
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/2.3.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b0b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000df0d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000124  2003dbf8  000df0d4  0001dbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ad4  2003dd20  2003dd20  0002dd20  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000df1f8  000df1f8  0001f1f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000df220  000df220  0001f220  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002c36e5  00000000  00000000  0001f224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000289bb  00000000  00000000  002e2909  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004b4c9  00000000  00000000  0030b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003a00  00000000  00000000  0035678d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000c038  00000000  00000000  0035a18d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004e34e  00000000  00000000  003661c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0006a4d3  00000000  00000000  003b4513  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00136f03  00000000  00000000  0041e9e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ad74  00000000  00000000  005558ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f009 fc4b 	bl	dd8cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f009 fc6d 	bl	dd91c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dbf8 	.word	0x2003dbf8
   d404c:	000df0d4 	.word	0x000df0d4
   d4050:	2003dd1c 	.word	0x2003dd1c
   d4054:	2003dd20 	.word	0x2003dd20
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f008 ff0d 	bl	dce80 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000df098 	.word	0x000df098
   d4080:	000df0cc 	.word	0x000df0cc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb58 	b.w	d4738 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fde3 	bl	d4c54 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f008 bead 	b.w	dcdf0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f006 b961 	b.w	da35c <malloc>

000d409a <_Znaj>:
   d409a:	f006 b95f 	b.w	da35c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f006 b965 	b.w	da36c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f005 fffe 	bl	da0ac <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d9c7d 	.word	0x000d9c7d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z13userSwitchISRv>:
  systemStatusWriteNeeded = true;
  return 1;
}

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z13userSwitchISRv+0x8>)
   d40d6:	2201      	movs	r2, #1
   d40d8:	701a      	strb	r2, [r3, #0]
}
   d40da:	4770      	bx	lr
   d40dc:	2003e264 	.word	0x2003e264

000d40e0 <_Z15reportFrequencyv>:
String reportFrequency() {
   d40e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   d40e2:	4b07      	ldr	r3, [pc, #28]	; (d4100 <_Z15reportFrequencyv+0x20>)
   d40e4:	4a07      	ldr	r2, [pc, #28]	; (d4104 <_Z15reportFrequencyv+0x24>)
   d40e6:	8bdb      	ldrh	r3, [r3, #30]
String reportFrequency() {
   d40e8:	4604      	mov	r4, r0
  snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   d40ea:	2110      	movs	r1, #16
   d40ec:	4668      	mov	r0, sp
   d40ee:	f006 f95d 	bl	da3ac <snprintf>
  return reportStr;
   d40f2:	4669      	mov	r1, sp
   d40f4:	4620      	mov	r0, r4
   d40f6:	f008 fa3a 	bl	dc56e <_ZN6StringC1EPKc>
}
   d40fa:	4620      	mov	r0, r4
   d40fc:	b004      	add	sp, #16
   d40fe:	bd10      	pop	{r4, pc}
   d4100:	2003e23c 	.word	0x2003e23c
   d4104:	000ddeb4 	.word	0x000ddeb4

000d4108 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4108:	b510      	push	{r4, lr}
   d410a:	4b03      	ldr	r3, [pc, #12]	; (d4118 <_ZN8MB85RC64D1Ev+0x10>)
   d410c:	6003      	str	r3, [r0, #0]
   d410e:	4604      	mov	r4, r0
   d4110:	f005 fc08 	bl	d9924 <_ZN6MB85RCD1Ev>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}
   d4118:	000de31c 	.word	0x000de31c

000d411c <_ZN8MB85RC64D0Ev>:
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
   d4120:	f7ff fff2 	bl	d4108 <_ZN8MB85RC64D1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	2110      	movs	r1, #16
   d4128:	f008 ff94 	bl	dd054 <_ZdlPvj>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4130:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4132:	2000      	movs	r0, #0
   d4134:	f006 f88a 	bl	da24c <spark_sync_time_pending>
   d4138:	b128      	cbz	r0, d4146 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d413a:	f006 f86f 	bl	da21c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d413e:	f080 0001 	eor.w	r0, r0, #1
   d4142:	b2c0      	uxtb	r0, r0
    }
   d4144:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4146:	2001      	movs	r0, #1
   d4148:	e7fc      	b.n	d4144 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d414c <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d414c:	b530      	push	{r4, r5, lr}
   d414e:	b085      	sub	sp, #20
   d4150:	4603      	mov	r3, r0
   d4152:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4154:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4156:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4158:	4798      	blx	r3
        size = str.length();
   d415a:	9802      	ldr	r0, [sp, #8]
   d415c:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d415e:	f006 f8fd 	bl	da35c <malloc>
   d4162:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4164:	b150      	cbz	r0, d417c <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d4166:	6822      	ldr	r2, [r4, #0]
   d4168:	9900      	ldr	r1, [sp, #0]
   d416a:	f009 fbaf 	bl	dd8cc <memcpy>
        return 0;
   d416e:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4170:	4668      	mov	r0, sp
   d4172:	f008 f9b1 	bl	dc4d8 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4176:	4620      	mov	r0, r4
   d4178:	b005      	add	sp, #20
   d417a:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d417c:	4c00      	ldr	r4, [pc, #0]	; (d4180 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d417e:	e7f7      	b.n	d4170 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4180:	fffffefc 	.word	0xfffffefc

000d4184 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4184:	4b0a      	ldr	r3, [pc, #40]	; (d41b0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4186:	b510      	push	{r4, lr}
   d4188:	4604      	mov	r4, r0
   d418a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d418c:	f007 f954 	bl	db438 <_ZN5spark10LogManager8instanceEv>
   d4190:	4621      	mov	r1, r4
   d4192:	f007 fb16 	bl	db7c2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4196:	f008 fde3 	bl	dcd60 <_Z16_fetch_usbserialv>
   d419a:	f008 fdd5 	bl	dcd48 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d419e:	4620      	mov	r0, r4
   d41a0:	4b04      	ldr	r3, [pc, #16]	; (d41b4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d41a2:	f840 3b04 	str.w	r3, [r0], #4
   d41a6:	f007 f9f9 	bl	db59c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d41aa:	4620      	mov	r0, r4
   d41ac:	bd10      	pop	{r4, pc}
   d41ae:	bf00      	nop
   d41b0:	000de304 	.word	0x000de304
   d41b4:	000de2ec 	.word	0x000de2ec

000d41b8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d41b8:	b510      	push	{r4, lr}
   d41ba:	4604      	mov	r4, r0
    }
   d41bc:	f7ff ffe2 	bl	d4184 <_ZN5spark16SerialLogHandlerD1Ev>
   d41c0:	4620      	mov	r0, r4
   d41c2:	2124      	movs	r1, #36	; 0x24
   d41c4:	f008 ff46 	bl	dd054 <_ZdlPvj>
   d41c8:	4620      	mov	r0, r4
   d41ca:	bd10      	pop	{r4, pc}

000d41cc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d41ce:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41d0:	4605      	mov	r5, r0
   d41d2:	460f      	mov	r7, r1
   d41d4:	4616      	mov	r6, r2
        if (valid_) {
   d41d6:	b18b      	cbz	r3, d41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41d8:	6803      	ldr	r3, [r0, #0]
   d41da:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41dc:	b183      	cbz	r3, d4200 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41de:	889a      	ldrh	r2, [r3, #4]
   d41e0:	2a01      	cmp	r2, #1
   d41e2:	d006      	beq.n	d41f2 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d41e4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41e6:	e7f9      	b.n	d41dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41e8:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d41ea:	b14b      	cbz	r3, d4200 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41ec:	889a      	ldrh	r2, [r3, #4]
   d41ee:	2a01      	cmp	r2, #1
   d41f0:	d1fa      	bne.n	d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d41f2:	b12b      	cbz	r3, d4200 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d41f4:	899a      	ldrh	r2, [r3, #12]
   d41f6:	42ba      	cmp	r2, r7
   d41f8:	d1f6      	bne.n	d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d41fa:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d41fc:	4628      	mov	r0, r5
   d41fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4200:	490a      	ldr	r1, [pc, #40]	; (d422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4202:	2010      	movs	r0, #16
   d4204:	f008 ff28 	bl	dd058 <_ZnwjRKSt9nothrow_t>
   d4208:	4604      	mov	r4, r0
   d420a:	b168      	cbz	r0, d4228 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d420c:	2210      	movs	r2, #16
   d420e:	2100      	movs	r1, #0
   d4210:	f009 fb84 	bl	dd91c <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4214:	4b06      	ldr	r3, [pc, #24]	; (d4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4216:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4218:	2301      	movs	r3, #1
   d421a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d421c:	692b      	ldr	r3, [r5, #16]
   d421e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4220:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4222:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4224:	612c      	str	r4, [r5, #16]
   d4226:	e7e9      	b.n	d41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4228:	7528      	strb	r0, [r5, #20]
                return *this;
   d422a:	e7e7      	b.n	d41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d422c:	000def3c 	.word	0x000def3c
   d4230:	00030010 	.word	0x00030010

000d4234 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4234:	b40e      	push	{r1, r2, r3}
   d4236:	b510      	push	{r4, lr}
   d4238:	b08d      	sub	sp, #52	; 0x34
   d423a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d423c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d423e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4242:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4244:	2300      	movs	r3, #0
   d4246:	2020      	movs	r0, #32
   d4248:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d424c:	e9cd 4200 	strd	r4, r2, [sp]
   d4250:	201e      	movs	r0, #30
   d4252:	aa04      	add	r2, sp, #16
   d4254:	f005 ff3a 	bl	da0cc <log_message_v>
}
   d4258:	b00d      	add	sp, #52	; 0x34
   d425a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d425e:	b003      	add	sp, #12
   d4260:	4770      	bx	lr
	...

000d4264 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>:
     * 
     * Note that 24:00:00 is not a valid time. You should generally use inclusive times such that
     * 23:59:59 is the end of the day.
     * 
     */
    LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd = LocalTimeHMS("23:59:59")) : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(hmsStart), hmsEnd(hmsEnd) {
   d4264:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d4266:	247f      	movs	r4, #127	; 0x7f
   d4268:	7004      	strb	r4, [r0, #0]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d426a:	2400      	movs	r4, #0
   d426c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d4270:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d4274:	e9c0 4405 	strd	r4, r4, [r0, #20]
class LocalTimeHMS {
   d4278:	6849      	ldr	r1, [r1, #4]
   d427a:	4c03      	ldr	r4, [pc, #12]	; (d4288 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_+0x24>)
   d427c:	6852      	ldr	r2, [r2, #4]
   d427e:	61c4      	str	r4, [r0, #28]
   d4280:	e9c0 1408 	strd	r1, r4, [r0, #32]
   d4284:	6282      	str	r2, [r0, #40]	; 0x28
    }
   d4286:	bd10      	pop	{r4, pc}
   d4288:	000de3fc 	.word	0x000de3fc

000d428c <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d428c:	b510      	push	{r4, lr}
   d428e:	4604      	mov	r4, r0
   d4290:	3024      	adds	r0, #36	; 0x24
   d4292:	f001 f94a 	bl	d552a <_ZN12LocalTimeHMSD1Ev>
   d4296:	f104 001c 	add.w	r0, r4, #28
   d429a:	f001 f946 	bl	d552a <_ZN12LocalTimeHMSD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d429e:	6920      	ldr	r0, [r4, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d42a0:	b108      	cbz	r0, d42a6 <_ZN14LocalTimeRangeD1Ev+0x1a>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d42a2:	f7ff fefc 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d42a6:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d42a8:	b108      	cbz	r0, d42ae <_ZN14LocalTimeRangeD1Ev+0x22>
   d42aa:	f7ff fef8 	bl	d409e <_ZdlPv>
   d42ae:	4620      	mov	r0, r4
   d42b0:	bd10      	pop	{r4, pc}

000d42b2 <_Z12flashTheLEDsv>:

void flashTheLEDs() {
   d42b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	time_t lastChange = 0;
	int flashes = 0;
   d42b6:	2500      	movs	r5, #0
	time_t lastChange = 0;
   d42b8:	462c      	mov	r4, r5
   d42ba:	46aa      	mov	sl, r5

	while (flashes <= 6) {
		if (millis() - lastChange > 1000) {
   d42bc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   d42c0:	f04f 0900 	mov.w	r9, #0
	while (flashes <= 6) {
   d42c4:	2d07      	cmp	r5, #7
   d42c6:	d018      	beq.n	d42fa <_Z12flashTheLEDsv+0x48>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42c8:	f005 fce0 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
		if (millis() - lastChange > 1000) {
   d42cc:	1b06      	subs	r6, r0, r4
   d42ce:	eb6a 074a 	sbc.w	r7, sl, sl, lsl #1
   d42d2:	45b0      	cmp	r8, r6
   d42d4:	eb79 0307 	sbcs.w	r3, r9, r7
   d42d8:	daf4      	bge.n	d42c4 <_Z12flashTheLEDsv+0x12>
   d42da:	f005 fcd7 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
			lastChange = millis();
   d42de:	4604      	mov	r4, r0
			digitalWrite(blueLED, !digitalRead(blueLED));
   d42e0:	2007      	movs	r0, #7
   d42e2:	f008 fe67 	bl	dcfb4 <digitalRead>
   d42e6:	fab0 f180 	clz	r1, r0
   d42ea:	0949      	lsrs	r1, r1, #5
   d42ec:	2007      	movs	r0, #7
   d42ee:	f008 fe48 	bl	dcf82 <digitalWrite>
			lastChange = millis();
   d42f2:	f04f 0a00 	mov.w	sl, #0
			flashes++;
   d42f6:	3501      	adds	r5, #1
   d42f8:	e7e4      	b.n	d42c4 <_Z12flashTheLEDsv+0x12>
		}
	}
	digitalWrite(blueLED, LOW);
   d42fa:	4628      	mov	r0, r5
   d42fc:	2100      	movs	r1, #0
}
   d42fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	digitalWrite(blueLED, LOW);
   d4302:	f008 be3e 	b.w	dcf82 <digitalWrite>

000d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4306:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4308:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d430a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d430c:	b17c      	cbz	r4, d432e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d430e:	6863      	ldr	r3, [r4, #4]
   d4310:	3b01      	subs	r3, #1
   d4312:	6063      	str	r3, [r4, #4]
   d4314:	b95b      	cbnz	r3, d432e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4316:	6823      	ldr	r3, [r4, #0]
   d4318:	4620      	mov	r0, r4
   d431a:	689b      	ldr	r3, [r3, #8]
   d431c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d431e:	68a3      	ldr	r3, [r4, #8]
   d4320:	3b01      	subs	r3, #1
   d4322:	60a3      	str	r3, [r4, #8]
   d4324:	b91b      	cbnz	r3, d432e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4326:	6823      	ldr	r3, [r4, #0]
   d4328:	4620      	mov	r0, r4
   d432a:	68db      	ldr	r3, [r3, #12]
   d432c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d432e:	4628      	mov	r0, r5
   d4330:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4334 <_Z22publishStateTransitionv>:
{
   d4334:	b5f0      	push	{r4, r5, r6, r7, lr}
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4336:	4d1d      	ldr	r5, [pc, #116]	; (d43ac <_Z22publishStateTransitionv+0x78>)
   d4338:	4c1d      	ldr	r4, [pc, #116]	; (d43b0 <_Z22publishStateTransitionv+0x7c>)
   d433a:	4b1e      	ldr	r3, [pc, #120]	; (d43b4 <_Z22publishStateTransitionv+0x80>)
   d433c:	782a      	ldrb	r2, [r5, #0]
   d433e:	7821      	ldrb	r1, [r4, #0]
{
   d4340:	b08f      	sub	sp, #60	; 0x3c
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4342:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d4346:	9200      	str	r2, [sp, #0]
   d4348:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d434c:	4a1a      	ldr	r2, [pc, #104]	; (d43b8 <_Z22publishStateTransitionv+0x84>)
   d434e:	2128      	movs	r1, #40	; 0x28
   d4350:	a804      	add	r0, sp, #16
   d4352:	f006 f82b 	bl	da3ac <snprintf>
	oldState = state;
   d4356:	782b      	ldrb	r3, [r5, #0]
   d4358:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d435a:	f005 ff5f 	bl	da21c <spark_cloud_flag_connected>
	if (Particle.connected()) {
   d435e:	b1f8      	cbz	r0, d43a0 <_Z22publishStateTransitionv+0x6c>
		if (millis() - lastPublish > 1000) {
   d4360:	4c16      	ldr	r4, [pc, #88]	; (d43bc <_Z22publishStateTransitionv+0x88>)
   d4362:	f005 fc93 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
   d4366:	e9d4 3200 	ldrd	r3, r2, [r4]
   d436a:	1ac6      	subs	r6, r0, r3
   d436c:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d4370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4374:	2300      	movs	r3, #0
   d4376:	42b2      	cmp	r2, r6
   d4378:	41bb      	sbcs	r3, r7
   d437a:	da11      	bge.n	d43a0 <_Z22publishStateTransitionv+0x6c>
   d437c:	f005 fc86 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d4380:	2300      	movs	r3, #0
   d4382:	6063      	str	r3, [r4, #4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4384:	4b0e      	ldr	r3, [pc, #56]	; (d43c0 <_Z22publishStateTransitionv+0x8c>)
   d4386:	6020      	str	r0, [r4, #0]
   d4388:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d438a:	f88d 3000 	strb.w	r3, [sp]
   d438e:	a802      	add	r0, sp, #8
   d4390:	490c      	ldr	r1, [pc, #48]	; (d43c4 <_Z22publishStateTransitionv+0x90>)
   d4392:	233c      	movs	r3, #60	; 0x3c
   d4394:	aa04      	add	r2, sp, #16
   d4396:	f006 fa33 	bl	da800 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d439a:	a803      	add	r0, sp, #12
   d439c:	f7ff ffb3 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	Log.info(stateTransitionString);
   d43a0:	4809      	ldr	r0, [pc, #36]	; (d43c8 <_Z22publishStateTransitionv+0x94>)
   d43a2:	a904      	add	r1, sp, #16
   d43a4:	f7ff ff46 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
}
   d43a8:	b00f      	add	sp, #60	; 0x3c
   d43aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43ac:	2003e238 	.word	0x2003e238
   d43b0:	2003e204 	.word	0x2003e204
   d43b4:	2003dc14 	.word	0x2003dc14
   d43b8:	000ddebf 	.word	0x000ddebf
   d43bc:	2003dd30 	.word	0x2003dd30
   d43c0:	2003dd2c 	.word	0x2003dd2c
   d43c4:	000ddecd 	.word	0x000ddecd
   d43c8:	2003e588 	.word	0x2003e588

000d43cc <_Z12setFrequency6String>:
{
   d43cc:	b500      	push	{lr}
   d43ce:	b0c7      	sub	sp, #284	; 0x11c
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d43d0:	6800      	ldr	r0, [r0, #0]
   d43d2:	220a      	movs	r2, #10
   d43d4:	a903      	add	r1, sp, #12
   d43d6:	f009 fc2f 	bl	ddc38 <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d43da:	2878      	cmp	r0, #120	; 0x78
   d43dc:	d81e      	bhi.n	d441c <_Z12setFrequency6String+0x50>
  updatedFrequencyMinutes = tempTime;
   d43de:	4b11      	ldr	r3, [pc, #68]	; (d4424 <_Z12setFrequency6String+0x58>)
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMinutes);
   d43e0:	4a11      	ldr	r2, [pc, #68]	; (d4428 <_Z12setFrequency6String+0x5c>)
  updatedFrequencyMinutes = tempTime;
   d43e2:	8018      	strh	r0, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMinutes);
   d43e4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d43e8:	4603      	mov	r3, r0
   d43ea:	a806      	add	r0, sp, #24
   d43ec:	f005 ffde 	bl	da3ac <snprintf>
  Log.info(data);
   d43f0:	480e      	ldr	r0, [pc, #56]	; (d442c <_Z12setFrequency6String+0x60>)
   d43f2:	a906      	add	r1, sp, #24
   d43f4:	f7ff ff1e 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43f8:	f005 ff10 	bl	da21c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d43fc:	b160      	cbz	r0, d4418 <_Z12setFrequency6String+0x4c>
   d43fe:	4b0c      	ldr	r3, [pc, #48]	; (d4430 <_Z12setFrequency6String+0x64>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4400:	490c      	ldr	r1, [pc, #48]	; (d4434 <_Z12setFrequency6String+0x68>)
   d4402:	781b      	ldrb	r3, [r3, #0]
   d4404:	f88d 3000 	strb.w	r3, [sp]
   d4408:	a804      	add	r0, sp, #16
   d440a:	233c      	movs	r3, #60	; 0x3c
   d440c:	aa06      	add	r2, sp, #24
   d440e:	f006 f9f7 	bl	da800 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4412:	a805      	add	r0, sp, #20
   d4414:	f7ff ff77 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4418:	2001      	movs	r0, #1
   d441a:	e000      	b.n	d441e <_Z12setFrequency6String+0x52>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d441c:	2000      	movs	r0, #0
}
   d441e:	b047      	add	sp, #284	; 0x11c
   d4420:	f85d fb04 	ldr.w	pc, [sp], #4
   d4424:	2003e262 	.word	0x2003e262
   d4428:	000ddede 	.word	0x000ddede
   d442c:	2003e588 	.word	0x2003e588
   d4430:	2003dd2c 	.word	0x2003dd2c
   d4434:	000ddf1e 	.word	0x000ddf1e

000d4438 <_Z15setLowPowerMode6String>:
{
   d4438:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d443a:	491e      	ldr	r1, [pc, #120]	; (d44b4 <_Z15setLowPowerMode6String+0x7c>)
   d443c:	b085      	sub	sp, #20
   d443e:	4604      	mov	r4, r0
   d4440:	f008 f94e 	bl	dc6e0 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4444:	b170      	cbz	r0, d4464 <_Z15setLowPowerMode6String+0x2c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4446:	491b      	ldr	r1, [pc, #108]	; (d44b4 <_Z15setLowPowerMode6String+0x7c>)
   d4448:	4620      	mov	r0, r4
   d444a:	f008 f949 	bl	dc6e0 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d444e:	4605      	mov	r5, r0
   d4450:	b980      	cbnz	r0, d4474 <_Z15setLowPowerMode6String+0x3c>
   d4452:	4919      	ldr	r1, [pc, #100]	; (d44b8 <_Z15setLowPowerMode6String+0x80>)
   d4454:	4620      	mov	r0, r4
   d4456:	f008 f943 	bl	dc6e0 <_ZNK6String6equalsEPKc>
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d445a:	b338      	cbz	r0, d44ac <_Z15setLowPowerMode6String+0x74>
    sysStatus.lowPowerMode = false;
   d445c:	4c17      	ldr	r4, [pc, #92]	; (d44bc <_Z15setLowPowerMode6String+0x84>)
    Log.info("Cleared Low Power Mode");
   d445e:	4918      	ldr	r1, [pc, #96]	; (d44c0 <_Z15setLowPowerMode6String+0x88>)
    sysStatus.lowPowerMode = false;
   d4460:	7125      	strb	r5, [r4, #4]
    Log.info("Cleared Low Power Mode");
   d4462:	e00b      	b.n	d447c <_Z15setLowPowerMode6String+0x44>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4464:	4914      	ldr	r1, [pc, #80]	; (d44b8 <_Z15setLowPowerMode6String+0x80>)
   d4466:	4620      	mov	r0, r4
   d4468:	f008 f93a 	bl	dc6e0 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d446c:	2800      	cmp	r0, #0
   d446e:	d1ea      	bne.n	d4446 <_Z15setLowPowerMode6String+0xe>
}
   d4470:	b005      	add	sp, #20
   d4472:	bd30      	pop	{r4, r5, pc}
    sysStatus.lowPowerMode = true;
   d4474:	4c11      	ldr	r4, [pc, #68]	; (d44bc <_Z15setLowPowerMode6String+0x84>)
    Log.info("Set Low Power Mode");
   d4476:	4913      	ldr	r1, [pc, #76]	; (d44c4 <_Z15setLowPowerMode6String+0x8c>)
    sysStatus.lowPowerMode = true;
   d4478:	2301      	movs	r3, #1
   d447a:	7123      	strb	r3, [r4, #4]
    Log.info("Cleared Low Power Mode");
   d447c:	4812      	ldr	r0, [pc, #72]	; (d44c8 <_Z15setLowPowerMode6String+0x90>)
   d447e:	f7ff fed9 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4482:	f005 fecb 	bl	da21c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode",(sysStatus.lowPowerMode) ? "Low Power" :"Not Low Power", PRIVATE);
   d4486:	b188      	cbz	r0, d44ac <_Z15setLowPowerMode6String+0x74>
   d4488:	4b10      	ldr	r3, [pc, #64]	; (d44cc <_Z15setLowPowerMode6String+0x94>)
   d448a:	7920      	ldrb	r0, [r4, #4]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d448c:	4910      	ldr	r1, [pc, #64]	; (d44d0 <_Z15setLowPowerMode6String+0x98>)
   d448e:	4a11      	ldr	r2, [pc, #68]	; (d44d4 <_Z15setLowPowerMode6String+0x9c>)
   d4490:	781b      	ldrb	r3, [r3, #0]
   d4492:	f88d 3000 	strb.w	r3, [sp]
   d4496:	2800      	cmp	r0, #0
   d4498:	bf08      	it	eq
   d449a:	460a      	moveq	r2, r1
   d449c:	233c      	movs	r3, #60	; 0x3c
   d449e:	a802      	add	r0, sp, #8
   d44a0:	490d      	ldr	r1, [pc, #52]	; (d44d8 <_Z15setLowPowerMode6String+0xa0>)
   d44a2:	f006 f9ad 	bl	da800 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d44a6:	a803      	add	r0, sp, #12
   d44a8:	f7ff ff2d 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  systemStatusWriteNeeded = true;
   d44ac:	4b0b      	ldr	r3, [pc, #44]	; (d44dc <_Z15setLowPowerMode6String+0xa4>)
   d44ae:	2001      	movs	r0, #1
   d44b0:	7018      	strb	r0, [r3, #0]
  return 1;
   d44b2:	e7dd      	b.n	d4470 <_Z15setLowPowerMode6String+0x38>
   d44b4:	000ded74 	.word	0x000ded74
   d44b8:	000de3a4 	.word	0x000de3a4
   d44bc:	2003e23c 	.word	0x2003e23c
   d44c0:	000ddf44 	.word	0x000ddf44
   d44c4:	000ddf31 	.word	0x000ddf31
   d44c8:	2003e588 	.word	0x2003e588
   d44cc:	2003dd2c 	.word	0x2003dd2c
   d44d0:	000ddf23 	.word	0x000ddf23
   d44d4:	000ddf27 	.word	0x000ddf27
   d44d8:	000ddf56 	.word	0x000ddf56
   d44dc:	2003e260 	.word	0x2003e260

000d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d44e0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d44e2:	e9d0 5300 	ldrd	r5, r3, [r0]
   d44e6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d44e8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d44ea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d44ee:	42ae      	cmp	r6, r5
   d44f0:	d004      	beq.n	d44fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d44f2:	4628      	mov	r0, r5
   d44f4:	f007 fff0 	bl	dc4d8 <_ZN6StringD1Ev>
   d44f8:	3514      	adds	r5, #20
   d44fa:	e7f8      	b.n	d44ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d44fc:	6820      	ldr	r0, [r4, #0]
   d44fe:	f005 ff35 	bl	da36c <free>
    AllocatorT::free(data_);
}
   d4502:	4620      	mov	r0, r4
   d4504:	bd70      	pop	{r4, r5, r6, pc}

000d4506 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4506:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d450a:	4604      	mov	r4, r0
   d450c:	460d      	mov	r5, r1
   d450e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4510:	d916      	bls.n	d4540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4512:	4290      	cmp	r0, r2
   d4514:	d215      	bcs.n	d4542 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4516:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d451a:	1a75      	subs	r5, r6, r1
   d451c:	f1a1 0714 	sub.w	r7, r1, #20
   d4520:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4522:	42b7      	cmp	r7, r6
   d4524:	d01c      	beq.n	d4560 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4526:	b12c      	cbz	r4, d4534 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4528:	4631      	mov	r1, r6
   d452a:	4620      	mov	r0, r4
   d452c:	f008 f850 	bl	dc5d0 <_ZN6StringC1EOS_>
   d4530:	7c33      	ldrb	r3, [r6, #16]
   d4532:	7423      	strb	r3, [r4, #16]
   d4534:	4630      	mov	r0, r6
   d4536:	f007 ffcf 	bl	dc4d8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d453a:	3e14      	subs	r6, #20
   d453c:	3c14      	subs	r4, #20
   d453e:	e7f0      	b.n	d4522 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4540:	d00e      	beq.n	d4560 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4542:	42b5      	cmp	r5, r6
   d4544:	d00c      	beq.n	d4560 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4546:	b12c      	cbz	r4, d4554 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4548:	4629      	mov	r1, r5
   d454a:	4620      	mov	r0, r4
   d454c:	f008 f840 	bl	dc5d0 <_ZN6StringC1EOS_>
   d4550:	7c2b      	ldrb	r3, [r5, #16]
   d4552:	7423      	strb	r3, [r4, #16]
   d4554:	4628      	mov	r0, r5
   d4556:	f007 ffbf 	bl	dc4d8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d455a:	3514      	adds	r5, #20
   d455c:	3414      	adds	r4, #20
   d455e:	e7f0      	b.n	d4542 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4562 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4566:	2300      	movs	r3, #0
   d4568:	e9c0 3300 	strd	r3, r3, [r0]
   d456c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d456e:	684f      	ldr	r7, [r1, #4]
   d4570:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4572:	4604      	mov	r4, r0
   d4574:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4576:	dd23      	ble.n	d45c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4578:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d457c:	fb08 f007 	mul.w	r0, r8, r7
   d4580:	f005 feec 	bl	da35c <malloc>
            if (!d) {
   d4584:	4605      	mov	r5, r0
   d4586:	b1d8      	cbz	r0, d45c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4588:	e9d4 1200 	ldrd	r1, r2, [r4]
   d458c:	fb08 1202 	mla	r2, r8, r2, r1
   d4590:	f7ff ffb9 	bl	d4506 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4594:	6820      	ldr	r0, [r4, #0]
   d4596:	f005 fee9 	bl	da36c <free>
        data_ = d;
   d459a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d459c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d459e:	e9d6 7300 	ldrd	r7, r3, [r6]
   d45a2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d45a6:	45b8      	cmp	r8, r7
   d45a8:	d008      	beq.n	d45bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d45aa:	4639      	mov	r1, r7
   d45ac:	4628      	mov	r0, r5
   d45ae:	f008 f829 	bl	dc604 <_ZN6StringC1ERKS_>
   d45b2:	7c3b      	ldrb	r3, [r7, #16]
   d45b4:	742b      	strb	r3, [r5, #16]
   d45b6:	3714      	adds	r7, #20
   d45b8:	3514      	adds	r5, #20
   d45ba:	e7f4      	b.n	d45a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d45bc:	6873      	ldr	r3, [r6, #4]
   d45be:	6063      	str	r3, [r4, #4]
}
   d45c0:	4620      	mov	r0, r4
   d45c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d45c8 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d45c8:	4b48      	ldr	r3, [pc, #288]	; (d46ec <_GLOBAL__sub_I_sysStatus+0x124>)
			return (long)(localTimeConvert_NEXT.time - localTimeConvert_NOW.time);
		}
		else return 0;
    }
	else return 0;
   d45ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45ce:	2601      	movs	r6, #1
   d45d0:	701e      	strb	r6, [r3, #0]
   d45d2:	4b47      	ldr	r3, [pc, #284]	; (d46f0 <_GLOBAL__sub_I_sysStatus+0x128>)
        filter_(level, filters) {
   d45d4:	4d47      	ldr	r5, [pc, #284]	; (d46f4 <_GLOBAL__sub_I_sysStatus+0x12c>)
   d45d6:	2208      	movs	r2, #8
   d45d8:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d45da:	4b47      	ldr	r3, [pc, #284]	; (d46f8 <_GLOBAL__sub_I_sysStatus+0x130>)
    SleepResult() {}
   d45dc:	4a47      	ldr	r2, [pc, #284]	; (d46fc <_GLOBAL__sub_I_sysStatus+0x134>)
   d45de:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d45e0:	2400      	movs	r4, #0
   d45e2:	b08c      	sub	sp, #48	; 0x30
   d45e4:	601c      	str	r4, [r3, #0]
   d45e6:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d45e8:	719c      	strb	r4, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d45ea:	2002      	movs	r0, #2
   d45ec:	f005 fd98 	bl	da120 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d45f0:	4621      	mov	r1, r4
   d45f2:	4630      	mov	r0, r6
   d45f4:	f005 fdac 	bl	da150 <system_thread_set_state>
        capacity_(0) {
   d45f8:	e9cd 4400 	strd	r4, r4, [sp]
   d45fc:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d45fe:	f008 fbaf 	bl	dcd60 <_Z16_fetch_usbserialv>
   d4602:	4669      	mov	r1, sp
   d4604:	4607      	mov	r7, r0
   d4606:	a803      	add	r0, sp, #12
   d4608:	f7ff ffab 	bl	d4562 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d460c:	46a8      	mov	r8, r5
        stream_(&stream) {
   d460e:	a903      	add	r1, sp, #12
   d4610:	a806      	add	r0, sp, #24
   d4612:	f7ff ffa6 	bl	d4562 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4616:	4b3a      	ldr	r3, [pc, #232]	; (d4700 <_GLOBAL__sub_I_sysStatus+0x138>)
   d4618:	f848 3b04 	str.w	r3, [r8], #4
   d461c:	a906      	add	r1, sp, #24
   d461e:	a809      	add	r0, sp, #36	; 0x24
   d4620:	f7ff ff9f 	bl	d4562 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4624:	aa09      	add	r2, sp, #36	; 0x24
   d4626:	211e      	movs	r1, #30
   d4628:	4640      	mov	r0, r8
   d462a:	f007 fa24 	bl	dba76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d462e:	a809      	add	r0, sp, #36	; 0x24
   d4630:	f7ff ff56 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4634:	a806      	add	r0, sp, #24
   d4636:	f7ff ff53 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d463a:	4b32      	ldr	r3, [pc, #200]	; (d4704 <_GLOBAL__sub_I_sysStatus+0x13c>)
   d463c:	602b      	str	r3, [r5, #0]
   d463e:	622f      	str	r7, [r5, #32]
   d4640:	a803      	add	r0, sp, #12
   d4642:	f7ff ff4d 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4646:	4b30      	ldr	r3, [pc, #192]	; (d4708 <_GLOBAL__sub_I_sysStatus+0x140>)
   d4648:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d464a:	f008 fb89 	bl	dcd60 <_Z16_fetch_usbserialv>
   d464e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4652:	f008 fb75 	bl	dcd40 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4656:	f006 feef 	bl	db438 <_ZN5spark10LogManager8instanceEv>
   d465a:	4629      	mov	r1, r5
   d465c:	f007 f99d 	bl	db99a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   d4660:	4668      	mov	r0, sp
   d4662:	f7ff ff3d 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        : config_(config) {
   d4666:	4b29      	ldr	r3, [pc, #164]	; (d470c <_GLOBAL__sub_I_sysStatus+0x144>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d4668:	4d29      	ldr	r5, [pc, #164]	; (d4710 <_GLOBAL__sub_I_sysStatus+0x148>)
              valid_(true) {
   d466a:	f8a3 4009 	strh.w	r4, [r3, #9]
        : config_(config) {
   d466e:	461a      	mov	r2, r3
   d4670:	1d19      	adds	r1, r3, #4
   d4672:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d4676:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d4678:	4a26      	ldr	r2, [pc, #152]	; (d4714 <_GLOBAL__sub_I_sysStatus+0x14c>)
              valid_(true) {
   d467a:	751e      	strb	r6, [r3, #20]
        config_.wakeup_sources = nullptr;
   d467c:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d4680:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4682:	721c      	strb	r4, [r3, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d4684:	f008 fcc2 	bl	dd00c <_Z19__fetch_global_Wirev>
   d4688:	4623      	mov	r3, r4
   d468a:	4601      	mov	r1, r0
   d468c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d4690:	4628      	mov	r0, r5
   d4692:	f005 f953 	bl	d993c <_ZN6MB85RCC1ER7TwoWireji>
   d4696:	4b20      	ldr	r3, [pc, #128]	; (d4718 <_GLOBAL__sub_I_sysStatus+0x150>)
   d4698:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d469a:	f008 fcb7 	bl	dd00c <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   d469e:	4d1f      	ldr	r5, [pc, #124]	; (d471c <_GLOBAL__sub_I_sysStatus+0x154>)
   d46a0:	4601      	mov	r1, r0
   d46a2:	2269      	movs	r2, #105	; 0x69
   d46a4:	481e      	ldr	r0, [pc, #120]	; (d4720 <_GLOBAL__sub_I_sysStatus+0x158>)
   d46a6:	f004 fcf9 	bl	d909c <_ZN6AB1805C1ER7TwoWireh>
   d46aa:	491e      	ldr	r1, [pc, #120]	; (d4724 <_GLOBAL__sub_I_sysStatus+0x15c>)
   d46ac:	4628      	mov	r0, r5
   d46ae:	f007 ff5e 	bl	dc56e <_ZN6StringC1EPKc>
   d46b2:	2200      	movs	r2, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   d46b4:	481c      	ldr	r0, [pc, #112]	; (d4728 <_GLOBAL__sub_I_sysStatus+0x160>)
    LocalTimeSchedule() {
   d46b6:	612c      	str	r4, [r5, #16]
   d46b8:	2300      	movs	r3, #0
   d46ba:	e9c5 2306 	strd	r2, r3, [r5, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
   d46be:	e9c5 4408 	strd	r4, r4, [r5, #32]
   d46c2:	62ac      	str	r4, [r5, #40]	; 0x28
class LocalTimeConvert {
   d46c4:	2306      	movs	r3, #6
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d46c6:	4c19      	ldr	r4, [pc, #100]	; (d472c <_GLOBAL__sub_I_sysStatus+0x164>)
   d46c8:	f840 3b04 	str.w	r3, [r0], #4
   d46cc:	f001 fa08 	bl	d5ae0 <_ZN22LocalTimePosixTimezoneC1Ev>
   d46d0:	4b17      	ldr	r3, [pc, #92]	; (d4730 <_GLOBAL__sub_I_sysStatus+0x168>)
   d46d2:	2202      	movs	r2, #2
   d46d4:	210e      	movs	r1, #14
   d46d6:	4620      	mov	r0, r4
   d46d8:	f003 fee2 	bl	d84a0 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   d46dc:	4632      	mov	r2, r6
   d46de:	4621      	mov	r1, r4
   d46e0:	4814      	ldr	r0, [pc, #80]	; (d4734 <_GLOBAL__sub_I_sysStatus+0x16c>)
   d46e2:	f003 fa01 	bl	d7ae8 <_ZN6RHMeshC1ER15RHGenericDriverh>
   d46e6:	b00c      	add	sp, #48	; 0x30
   d46e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d46ec:	2003dd2c 	.word	0x2003dd2c
   d46f0:	2003dd2d 	.word	0x2003dd2d
   d46f4:	2003e0a8 	.word	0x2003e0a8
   d46f8:	2003dd20 	.word	0x2003dd20
   d46fc:	ffff0000 	.word	0xffff0000
   d4700:	000de2ec 	.word	0x000de2ec
   d4704:	000dedf4 	.word	0x000dedf4
   d4708:	000de304 	.word	0x000de304
   d470c:	2003de60 	.word	0x2003de60
   d4710:	2003dfa8 	.word	0x2003dfa8
   d4714:	00030010 	.word	0x00030010
   d4718:	000de31c 	.word	0x000de31c
   d471c:	2003e208 	.word	0x2003e208
   d4720:	2003dd44 	.word	0x2003dd44
   d4724:	000dedbc 	.word	0x000dedbc
   d4728:	2003dfb8 	.word	0x2003dfb8
   d472c:	2003de78 	.word	0x2003de78
   d4730:	2003e284 	.word	0x2003e284
   d4734:	2003e0cc 	.word	0x2003e0cc

000d4738 <setup>:
{
   d4738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	pinMode(blueLED,OUTPUT);                          // Turn on the led to signal startup
   d473c:	2101      	movs	r1, #1
{
   d473e:	b0a1      	sub	sp, #132	; 0x84
	pinMode(blueLED,OUTPUT);                          // Turn on the led to signal startup
   d4740:	2007      	movs	r0, #7
   d4742:	f008 fc0d 	bl	dcf60 <pinMode>
        spark_variable_t extra = {};
   d4746:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
   d4748:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d474a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
        extra.size = sizeof(extra);
   d474e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4752:	4ba3      	ldr	r3, [pc, #652]	; (d49e0 <setup+0x2a8>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d4754:	49a3      	ldr	r1, [pc, #652]	; (d49e4 <setup+0x2ac>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4756:	930c      	str	r3, [sp, #48]	; 0x30
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d4758:	2204      	movs	r2, #4
   d475a:	ab0a      	add	r3, sp, #40	; 0x28
   d475c:	48a2      	ldr	r0, [pc, #648]	; (d49e8 <setup+0x2b0>)
   d475e:	f005 fd3d 	bl	da1dc <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4762:	4aa2      	ldr	r2, [pc, #648]	; (d49ec <setup+0x2b4>)
   d4764:	49a2      	ldr	r1, [pc, #648]	; (d49f0 <setup+0x2b8>)
   d4766:	48a3      	ldr	r0, [pc, #652]	; (d49f4 <setup+0x2bc>)
   d4768:	f005 ff3d 	bl	da5e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d476c:	4aa2      	ldr	r2, [pc, #648]	; (d49f8 <setup+0x2c0>)
   d476e:	49a3      	ldr	r1, [pc, #652]	; (d49fc <setup+0x2c4>)
   d4770:	48a0      	ldr	r0, [pc, #640]	; (d49f4 <setup+0x2bc>)
   d4772:	f005 ff38 	bl	da5e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        conn_prop.size = sizeof(conn_prop);
   d4776:	2308      	movs	r3, #8
   d4778:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d477c:	2301      	movs	r3, #1
   d477e:	930b      	str	r3, [sp, #44]	; 0x2c
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4780:	aa0a      	add	r2, sp, #40	; 0x28
   d4782:	4623      	mov	r3, r4
   d4784:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4788:	4620      	mov	r0, r4
        particle::protocol::connection_properties_t conn_prop = {0};
   d478a:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d478e:	f005 fd6d 	bl	da26c <spark_set_connection_property>
	if (!manager.init()) Log.info("init failed");	// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d4792:	489b      	ldr	r0, [pc, #620]	; (d4a00 <setup+0x2c8>)
   d4794:	f003 fbec 	bl	d7f70 <_ZN8RHRouter4initEv>
   d4798:	b918      	cbnz	r0, d47a2 <setup+0x6a>
   d479a:	499a      	ldr	r1, [pc, #616]	; (d4a04 <setup+0x2cc>)
   d479c:	489a      	ldr	r0, [pc, #616]	; (d4a08 <setup+0x2d0>)
   d479e:	f7ff fd49 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   d47a2:	ed9f 0a9a 	vldr	s0, [pc, #616]	; d4a0c <setup+0x2d4>
   d47a6:	489a      	ldr	r0, [pc, #616]	; (d4a10 <setup+0x2d8>)
   d47a8:	f003 feba 	bl	d8520 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   d47ac:	2200      	movs	r2, #0
   d47ae:	2117      	movs	r1, #23
   d47b0:	4897      	ldr	r0, [pc, #604]	; (d4a10 <setup+0x2d8>)
   d47b2:	f004 f82f 	bl	d8814 <_ZN7RH_RF9510setTxPowerEab>
  	PublishQueuePosix::instance().setup();          // Start the Publish Queie
   d47b6:	f002 faa3 	bl	d6d00 <_ZN17PublishQueuePosix8instanceEv>
   d47ba:	f002 fcaf 	bl	d711c <_ZN17PublishQueuePosix5setupEv>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d47be:	4895      	ldr	r0, [pc, #596]	; (d4a14 <setup+0x2dc>)
   d47c0:	2308      	movs	r3, #8
  	ab1805.withFOUT(D8).setup();                    // The carrier board has D8 connected to FOUT for wake interrupts
   d47c2:	2101      	movs	r1, #1
   d47c4:	8143      	strh	r3, [r0, #10]
   d47c6:	f004 ff75 	bl	d96b4 <_ZN6AB18055setupEb>
  	ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);    // Enable watchdog
   d47ca:	217c      	movs	r1, #124	; 0x7c
   d47cc:	4891      	ldr	r0, [pc, #580]	; (d4a14 <setup+0x2dc>)
   d47ce:	f004 fd55 	bl	d927c <_ZN6AB18056setWDTEi>
	fram.begin();                                                        // Initialize the FRAM module
   d47d2:	4891      	ldr	r0, [pc, #580]	; (d4a18 <setup+0x2e0>)
   d47d4:	f005 f8bc 	bl	d9950 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d47d8:	488f      	ldr	r0, [pc, #572]	; (d4a18 <setup+0x2e0>)
   d47da:	2301      	movs	r3, #1
   d47dc:	f10d 020f 	add.w	r2, sp, #15
   d47e0:	2100      	movs	r1, #0
   d47e2:	f005 f8f7 	bl	d99d4 <_ZN6MB85RC8readDataEjPhj>
	if (tempVersion != FRAMversionNumber) {                              // Check to see if the memory map in the sketch matches the data on the chip
   d47e6:	f89d 400f 	ldrb.w	r4, [sp, #15]
   d47ea:	2c01      	cmp	r4, #1
   d47ec:	d039      	beq.n	d4862 <setup+0x12a>
		Log.info("Erasing FRAM");
   d47ee:	498b      	ldr	r1, [pc, #556]	; (d4a1c <setup+0x2e4>)
   d47f0:	4885      	ldr	r0, [pc, #532]	; (d4a08 <setup+0x2d0>)
   d47f2:	f7ff fd1f 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
		fram.erase();                                                      // Reset the FRAM to correct the issue
   d47f6:	4888      	ldr	r0, [pc, #544]	; (d4a18 <setup+0x2e0>)
   d47f8:	f005 f8b4 	bl	d9964 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d47fc:	4a88      	ldr	r2, [pc, #544]	; (d4a20 <setup+0x2e8>)
   d47fe:	4886      	ldr	r0, [pc, #536]	; (d4a18 <setup+0x2e0>)
   d4800:	2304      	movs	r3, #4
   d4802:	2100      	movs	r1, #0
   d4804:	f005 f931 	bl	d9a6a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4808:	2301      	movs	r3, #1
   d480a:	4883      	ldr	r0, [pc, #524]	; (d4a18 <setup+0x2e0>)
   d480c:	f10d 020f 	add.w	r2, sp, #15
   d4810:	2100      	movs	r1, #0
   d4812:	f005 f8df 	bl	d99d4 <_ZN6MB85RC8readDataEjPhj>
		if (tempVersion != FRAMversionNumber) {
   d4816:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d481a:	2b01      	cmp	r3, #1
   d481c:	d002      	beq.n	d4824 <setup+0xec>
		state = ERROR_STATE;                                             // Device will not work without FRAM will need to reset
   d481e:	4b81      	ldr	r3, [pc, #516]	; (d4a24 <setup+0x2ec>)
   d4820:	2201      	movs	r2, #1
   d4822:	701a      	strb	r2, [r3, #0]
	if (!Time.isValid()) {							// I need to make sure the time is valid here.
   d4824:	f008 f97e 	bl	dcb24 <_ZN9TimeClass7isValidEv>
   d4828:	4604      	mov	r4, r0
   d482a:	2800      	cmp	r0, #0
   d482c:	d13e      	bne.n	d48ac <setup+0x174>
        spark_cloud_flag_connect();
   d482e:	f005 fced 	bl	da20c <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4832:	4620      	mov	r0, r4
   d4834:	f005 fa3a 	bl	d9cac <hal_timer_millis>
        while (_while() && !_condition()) {
   d4838:	f8df 8218 	ldr.w	r8, [pc, #536]	; d4a54 <setup+0x31c>
        return hal_timer_millis(nullptr);
   d483c:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d483e:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4842:	2000      	movs	r0, #0
   d4844:	f005 fa32 	bl	d9cac <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4848:	1b46      	subs	r6, r0, r5
   d484a:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d484e:	45b9      	cmp	r9, r7
   d4850:	bf08      	it	eq
   d4852:	45b0      	cmpeq	r8, r6
   d4854:	d310      	bcc.n	d4878 <setup+0x140>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4856:	f005 fce1 	bl	da21c <spark_cloud_flag_connected>
   d485a:	b968      	cbnz	r0, d4878 <setup+0x140>
            spark_process();
   d485c:	f005 fcce 	bl	da1fc <spark_process>
        while (_while() && !_condition()) {
   d4860:	e7ef      	b.n	d4842 <setup+0x10a>
		Log.info("Loading the sysStatus array");
   d4862:	4971      	ldr	r1, [pc, #452]	; (d4a28 <setup+0x2f0>)
   d4864:	4868      	ldr	r0, [pc, #416]	; (d4a08 <setup+0x2d0>)
   d4866:	f7ff fce5 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d486a:	4a70      	ldr	r2, [pc, #448]	; (d4a2c <setup+0x2f4>)
   d486c:	486a      	ldr	r0, [pc, #424]	; (d4a18 <setup+0x2e0>)
   d486e:	2324      	movs	r3, #36	; 0x24
   d4870:	4621      	mov	r1, r4
   d4872:	f005 f8af 	bl	d99d4 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d4876:	e7d5      	b.n	d4824 <setup+0xec>
   d4878:	f005 fcd0 	bl	da21c <spark_cloud_flag_connected>
		if (waitFor(Particle.connected, 600000)) {	// Connect to Particle
   d487c:	b1b0      	cbz	r0, d48ac <setup+0x174>
			sysStatus.lastConnection = Time.now();			// Record the last connection time
   d487e:	f008 f96e 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4882:	4c6a      	ldr	r4, [pc, #424]	; (d4a2c <setup+0x2f4>)
   d4884:	61a0      	str	r0, [r4, #24]
   d4886:	f005 fcc9 	bl	da21c <spark_cloud_flag_connected>
        if (!connected()) {
   d488a:	b110      	cbz	r0, d4892 <setup+0x15a>
        return spark_sync_time(NULL);
   d488c:	2000      	movs	r0, #0
   d488e:	f005 fcd5 	bl	da23c <spark_sync_time>
			waitUntil(Particle.syncTimeDone);		// Make sure sync is complete
   d4892:	f7ff fc4d 	bl	d4130 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4896:	b910      	cbnz	r0, d489e <setup+0x166>
            spark_process();
   d4898:	f005 fcb0 	bl	da1fc <spark_process>
        while (_while() && !_condition()) {
   d489c:	e7f9      	b.n	d4892 <setup+0x15a>
   d489e:	f7ff fc47 	bl	d4130 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
			if (sysStatus.lowPowerMode) state = DISCONNECTING_STATE;
   d48a2:	7923      	ldrb	r3, [r4, #4]
   d48a4:	b113      	cbz	r3, d48ac <setup+0x174>
   d48a6:	4b5f      	ldr	r3, [pc, #380]	; (d4a24 <setup+0x2ec>)
   d48a8:	2206      	movs	r2, #6
   d48aa:	701a      	strb	r2, [r3, #0]
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   d48ac:	f001 fb86 	bl	d5fbc <_ZN9LocalTime8instanceEv>
   d48b0:	495f      	ldr	r1, [pc, #380]	; (d4a30 <setup+0x2f8>)
   d48b2:	4604      	mov	r4, r0
   d48b4:	a80a      	add	r0, sp, #40	; 0x28
   d48b6:	f001 f9c5 	bl	d5c44 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d48ba:	a90b      	add	r1, sp, #44	; 0x2c
   d48bc:	f104 0008 	add.w	r0, r4, #8
   d48c0:	f007 fe91 	bl	dc5e6 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d48c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d48c6:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   d48c8:	a911      	add	r1, sp, #68	; 0x44
   d48ca:	f104 0020 	add.w	r0, r4, #32
   d48ce:	f007 fe8a 	bl	dc5e6 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d48d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d48d4:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   d48d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d48d8:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   d48da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d48dc:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   d48de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d48e0:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   d48e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d48e4:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   d48e6:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
   d48ea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   d48ee:	a80a      	add	r0, sp, #40	; 0x28
   d48f0:	f000 fe32 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d48f4:	f008 f933 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d48f8:	4c4e      	ldr	r4, [pc, #312]	; (d4a34 <setup+0x2fc>)
   d48fa:	17c1      	asrs	r1, r0, #31
   d48fc:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   d4900:	4620      	mov	r0, r4
   d4902:	f001 fbd3 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
  	publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d4906:	4b49      	ldr	r3, [pc, #292]	; (d4a2c <setup+0x2f4>)
   d4908:	494b      	ldr	r1, [pc, #300]	; (d4a38 <setup+0x300>)
   d490a:	8bdd      	ldrh	r5, [r3, #30]
   d490c:	a805      	add	r0, sp, #20
   d490e:	f000 ffbd 	bl	d588c <_ZN12LocalTimeHMSC1EPKc>
   d4912:	494a      	ldr	r1, [pc, #296]	; (d4a3c <setup+0x304>)
   d4914:	a807      	add	r0, sp, #28
   d4916:	f000 ffb9 	bl	d588c <_ZN12LocalTimeHMSC1EPKc>
   d491a:	aa07      	add	r2, sp, #28
   d491c:	a905      	add	r1, sp, #20
   d491e:	a80a      	add	r0, sp, #40	; 0x28
   d4920:	f7ff fca0 	bl	d4264 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d4924:	4629      	mov	r1, r5
   d4926:	aa0a      	add	r2, sp, #40	; 0x28
   d4928:	4845      	ldr	r0, [pc, #276]	; (d4a40 <setup+0x308>)
   d492a:	f002 f864 	bl	d69f6 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d492e:	a80a      	add	r0, sp, #40	; 0x28
   d4930:	f7ff fcac 	bl	d428c <_ZN14LocalTimeRangeD1Ev>
   d4934:	a807      	add	r0, sp, #28
   d4936:	f000 fdf8 	bl	d552a <_ZN12LocalTimeHMSD1Ev>
   d493a:	a805      	add	r0, sp, #20
   d493c:	f000 fdf5 	bl	d552a <_ZN12LocalTimeHMSD1Ev>
  	Log.info("Startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   d4940:	4b40      	ldr	r3, [pc, #256]	; (d4a44 <setup+0x30c>)
   d4942:	4621      	mov	r1, r4
   d4944:	681a      	ldr	r2, [r3, #0]
   d4946:	a80a      	add	r0, sp, #40	; 0x28
   d4948:	f001 fa92 	bl	d5e70 <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d494c:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d494e:	a905      	add	r1, sp, #20
   d4950:	2003      	movs	r0, #3
   d4952:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    const diag_source* src = nullptr;
   d4954:	9205      	str	r2, [sp, #20]
    const int ret = diag_get_source(id, &src, nullptr);
   d4956:	f005 fbd1 	bl	da0fc <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d495a:	2800      	cmp	r0, #0
   d495c:	d13c      	bne.n	d49d8 <setup+0x2a0>
        return ret;
    }
    return get(src, val);
   d495e:	9c05      	ldr	r4, [sp, #20]
    SPARK_ASSERT(src && src->callback);
   d4960:	b10c      	cbz	r4, d4966 <setup+0x22e>
   d4962:	6923      	ldr	r3, [r4, #16]
   d4964:	b923      	cbnz	r3, d4970 <setup+0x238>
   d4966:	4a38      	ldr	r2, [pc, #224]	; (d4a48 <setup+0x310>)
   d4968:	2100      	movs	r1, #0
   d496a:	200a      	movs	r0, #10
   d496c:	f005 fb9e 	bl	da0ac <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4970:	2300      	movs	r3, #0
   d4972:	f8ad 301e 	strh.w	r3, [sp, #30]
   d4976:	230c      	movs	r3, #12
   d4978:	f8ad 301c 	strh.w	r3, [sp, #28]
   d497c:	ab04      	add	r3, sp, #16
   d497e:	9308      	str	r3, [sp, #32]
   d4980:	2304      	movs	r3, #4
   d4982:	9309      	str	r3, [sp, #36]	; 0x24
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4984:	6923      	ldr	r3, [r4, #16]
   d4986:	aa07      	add	r2, sp, #28
   d4988:	2101      	movs	r1, #1
   d498a:	4620      	mov	r0, r4
   d498c:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d498e:	bb18      	cbnz	r0, d49d8 <setup+0x2a0>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4990:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   d4994:	ee07 3a90 	vmov	s15, r3
   d4998:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   d499c:	ee17 0a90 	vmov	r0, s15
   d49a0:	f008 fccc 	bl	dd33c <__aeabi_f2d>
   d49a4:	462a      	mov	r2, r5
   d49a6:	e9cd 0100 	strd	r0, r1, [sp]
   d49aa:	4928      	ldr	r1, [pc, #160]	; (d4a4c <setup+0x314>)
   d49ac:	4816      	ldr	r0, [pc, #88]	; (d4a08 <setup+0x2d0>)
   d49ae:	f7ff fc41 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d49b2:	a80a      	add	r0, sp, #40	; 0x28
   d49b4:	f007 fd90 	bl	dc4d8 <_ZN6StringD1Ev>
  	attachInterrupt(userSwitch,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   d49b8:	2200      	movs	r2, #0
   d49ba:	9200      	str	r2, [sp, #0]
   d49bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d49c0:	4923      	ldr	r1, [pc, #140]	; (d4a50 <setup+0x318>)
   d49c2:	2004      	movs	r0, #4
   d49c4:	f006 f95c 	bl	dac80 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   d49c8:	4b16      	ldr	r3, [pc, #88]	; (d4a24 <setup+0x2ec>)
   d49ca:	781a      	ldrb	r2, [r3, #0]
   d49cc:	b90a      	cbnz	r2, d49d2 <setup+0x29a>
   d49ce:	2202      	movs	r2, #2
   d49d0:	701a      	strb	r2, [r3, #0]
}
   d49d2:	b021      	add	sp, #132	; 0x84
   d49d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return -1.0f;
   d49d8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d49dc:	e7de      	b.n	d499c <setup+0x264>
   d49de:	bf00      	nop
   d49e0:	000d414d 	.word	0x000d414d
   d49e4:	000d40e1 	.word	0x000d40e1
   d49e8:	000ddf5b 	.word	0x000ddf5b
   d49ec:	000ddf6c 	.word	0x000ddf6c
   d49f0:	000d4439 	.word	0x000d4439
   d49f4:	000da5bb 	.word	0x000da5bb
   d49f8:	000ddf7a 	.word	0x000ddf7a
   d49fc:	000d43cd 	.word	0x000d43cd
   d4a00:	2003e0cc 	.word	0x2003e0cc
   d4a04:	000ddf88 	.word	0x000ddf88
   d4a08:	2003e588 	.word	0x2003e588
   d4a0c:	4464c000 	.word	0x4464c000
   d4a10:	2003de78 	.word	0x2003de78
   d4a14:	2003dd44 	.word	0x2003dd44
   d4a18:	2003dfa8 	.word	0x2003dfa8
   d4a1c:	000ddf94 	.word	0x000ddf94
   d4a20:	000de36c 	.word	0x000de36c
   d4a24:	2003e238 	.word	0x2003e238
   d4a28:	000ddfa1 	.word	0x000ddfa1
   d4a2c:	2003e23c 	.word	0x2003e23c
   d4a30:	000ddfbd 	.word	0x000ddfbd
   d4a34:	2003dfb8 	.word	0x2003dfb8
   d4a38:	000ddfe4 	.word	0x000ddfe4
   d4a3c:	000ddfed 	.word	0x000ddfed
   d4a40:	2003e208 	.word	0x2003e208
   d4a44:	2003dcb0 	.word	0x2003dcb0
   d4a48:	000d9c7d 	.word	0x000d9c7d
   d4a4c:	000ddff6 	.word	0x000ddff6
   d4a50:	000d40d5 	.word	0x000d40d5
   d4a54:	000927bf 	.word	0x000927bf

000d4a58 <_Z21secondsUntilNextEventv.part.0>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d4a58:	b530      	push	{r4, r5, lr}
   d4a5a:	b0c1      	sub	sp, #260	; 0x104
   d4a5c:	f008 f87f 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4a60:	4c20      	ldr	r4, [pc, #128]	; (d4ae4 <_Z21secondsUntilNextEventv.part.0+0x8c>)
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d4a62:	4d21      	ldr	r5, [pc, #132]	; (d4ae8 <_Z21secondsUntilNextEventv.part.0+0x90>)
   d4a64:	17c1      	asrs	r1, r0, #31
   d4a66:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
        localTimeConvert_NOW.withCurrentTime().convert();
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	f001 fb1e 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d4a70:	682a      	ldr	r2, [r5, #0]
   d4a72:	4621      	mov	r1, r4
   d4a74:	a804      	add	r0, sp, #16
   d4a76:	f001 f9fb 	bl	d5e70 <_ZN16LocalTimeConvert6formatEPKc>
   d4a7a:	9a04      	ldr	r2, [sp, #16]
   d4a7c:	491b      	ldr	r1, [pc, #108]	; (d4aec <_Z21secondsUntilNextEventv.part.0+0x94>)
   d4a7e:	481c      	ldr	r0, [pc, #112]	; (d4af0 <_Z21secondsUntilNextEventv.part.0+0x98>)
   d4a80:	f7ff fbd8 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d4a84:	a804      	add	r0, sp, #16
   d4a86:	f007 fd27 	bl	dc4d8 <_ZN6StringD1Ev>
class LocalTimeConvert {
   d4a8a:	2306      	movs	r3, #6
   d4a8c:	a805      	add	r0, sp, #20
   d4a8e:	9304      	str	r3, [sp, #16]
   d4a90:	f001 f826 	bl	d5ae0 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d4a94:	f008 f863 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4a98:	17c1      	asrs	r1, r0, #31
   d4a9a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
        localTimeConvert_NEXT.withCurrentTime().convert();
   d4a9e:	a804      	add	r0, sp, #16
   d4aa0:	f001 fb04 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
		if (publishSchedule.getNextScheduledTime(localTimeConvert_NEXT)) {
   d4aa4:	4813      	ldr	r0, [pc, #76]	; (d4af4 <_Z21secondsUntilNextEventv.part.0+0x9c>)
   d4aa6:	a904      	add	r1, sp, #16
   d4aa8:	f001 fe50 	bl	d674c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d4aac:	b1c0      	cbz	r0, d4ae0 <_Z21secondsUntilNextEventv.part.0+0x88>
        	Log.info("time of next event is: %s which is %lu seconds away", localTimeConvert_NEXT.format(TIME_FORMAT_DEFAULT).c_str(), (long)(localTimeConvert_NEXT.time - localTimeConvert_NOW.time));
   d4aae:	682a      	ldr	r2, [r5, #0]
   d4ab0:	a904      	add	r1, sp, #16
   d4ab2:	4668      	mov	r0, sp
   d4ab4:	f001 f9dc 	bl	d5e70 <_ZN16LocalTimeConvert6formatEPKc>
   d4ab8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   d4aba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d4abc:	490e      	ldr	r1, [pc, #56]	; (d4af8 <_Z21secondsUntilNextEventv.part.0+0xa0>)
   d4abe:	480c      	ldr	r0, [pc, #48]	; (d4af0 <_Z21secondsUntilNextEventv.part.0+0x98>)
   d4ac0:	1ad3      	subs	r3, r2, r3
   d4ac2:	9a00      	ldr	r2, [sp, #0]
   d4ac4:	f7ff fbb6 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d4ac8:	4668      	mov	r0, sp
   d4aca:	f007 fd05 	bl	dc4d8 <_ZN6StringD1Ev>
			return (long)(localTimeConvert_NEXT.time - localTimeConvert_NOW.time);
   d4ace:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d4ad0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   d4ad2:	1a24      	subs	r4, r4, r0
class LocalTimeConvert {
   d4ad4:	a805      	add	r0, sp, #20
   d4ad6:	f000 fd3f 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
   d4ada:	4620      	mov	r0, r4
   d4adc:	b041      	add	sp, #260	; 0x104
   d4ade:	bd30      	pop	{r4, r5, pc}
		else return 0;
   d4ae0:	4604      	mov	r4, r0
   d4ae2:	e7f7      	b.n	d4ad4 <_Z21secondsUntilNextEventv.part.0+0x7c>
   d4ae4:	2003dfb8 	.word	0x2003dfb8
   d4ae8:	2003dcac 	.word	0x2003dcac
   d4aec:	000de020 	.word	0x000de020
   d4af0:	2003e588 	.word	0x2003e588
   d4af4:	2003e208 	.word	0x2003e208
   d4af8:	000de02f 	.word	0x000de02f

000d4afc <_Z21secondsUntilNextEventv>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d4afc:	b508      	push	{r3, lr}
   if (Time.isValid()) {
   d4afe:	f008 f811 	bl	dcb24 <_ZN9TimeClass7isValidEv>
   d4b02:	b118      	cbz	r0, d4b0c <_Z21secondsUntilNextEventv+0x10>
   d4b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4b08:	f7ff bfa6 	b.w	d4a58 <_Z21secondsUntilNextEventv.part.0>
   d4b0c:	bd08      	pop	{r3, pc}
	...

000d4b10 <_Z22disconnectFromParticlev>:
{
   d4b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b14:	b087      	sub	sp, #28
  time_t startTime = Time.now();
   d4b16:	f008 f822 	bl	dcb5e <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   d4b1a:	4946      	ldr	r1, [pc, #280]	; (d4c34 <_Z22disconnectFromParticlev+0x124>)
  time_t startTime = Time.now();
   d4b1c:	9001      	str	r0, [sp, #4]
  Log.info("In the disconnect from Particle function");
   d4b1e:	4846      	ldr	r0, [pc, #280]	; (d4c38 <_Z22disconnectFromParticlev+0x128>)
   d4b20:	f7ff fb88 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(userSwitch);                                         // Stop watching the userSwitch as we will no longer be connected
   d4b24:	2004      	movs	r0, #4
   d4b26:	f006 f8d5 	bl	dacd4 <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d4b2a:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();                                               // Disconnect from Particle
   d4b2e:	a803      	add	r0, sp, #12
   d4b30:	e9cd aa03 	strd	sl, sl, [sp, #12]
   d4b34:	f8ad a014 	strh.w	sl, [sp, #20]
   d4b38:	f005 fd66 	bl	da608 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d4b3c:	4650      	mov	r0, sl
   d4b3e:	f005 f8b5 	bl	d9cac <hal_timer_millis>
        while (_while() && !_condition()) {
   d4b42:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d4b46:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d4b48:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4b4c:	2000      	movs	r0, #0
   d4b4e:	f005 f8ad 	bl	d9cac <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4b52:	ebb0 060b 	subs.w	r6, r0, fp
   d4b56:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d4b5a:	45b9      	cmp	r9, r7
   d4b5c:	bf08      	it	eq
   d4b5e:	45b0      	cmpeq	r8, r6
   d4b60:	d305      	bcc.n	d4b6e <_Z22disconnectFromParticlev+0x5e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b62:	f005 fb5b 	bl	da21c <spark_cloud_flag_connected>
   d4b66:	b110      	cbz	r0, d4b6e <_Z22disconnectFromParticlev+0x5e>
            spark_process();
   d4b68:	f005 fb48 	bl	da1fc <spark_process>
        while (_while() && !_condition()) {
   d4b6c:	e7ee      	b.n	d4b4c <_Z22disconnectFromParticlev+0x3c>
   d4b6e:	f005 fb55 	bl	da21c <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b72:	f005 f88b 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b76:	4f31      	ldr	r7, [pc, #196]	; (d4c3c <_Z22disconnectFromParticlev+0x12c>)
   d4b78:	6038      	str	r0, [r7, #0]
    		spark_process();
   d4b7a:	f005 fb3f 	bl	da1fc <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b7e:	f005 fb4d 	bl	da21c <spark_cloud_flag_connected>
   d4b82:	46bb      	mov	fp, r7
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   d4b84:	4606      	mov	r6, r0
   d4b86:	b140      	cbz	r0, d4b9a <_Z22disconnectFromParticlev+0x8a>
    Log.info("Failed to disconnect from Particle");
   d4b88:	492d      	ldr	r1, [pc, #180]	; (d4c40 <_Z22disconnectFromParticlev+0x130>)
   d4b8a:	482b      	ldr	r0, [pc, #172]	; (d4c38 <_Z22disconnectFromParticlev+0x128>)
   d4b8c:	f7ff fb52 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   d4b90:	2600      	movs	r6, #0
}
   d4b92:	4630      	mov	r0, r6
   d4b94:	b007      	add	sp, #28
   d4b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   d4b9a:	f007 ffe0 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4b9e:	9b01      	ldr	r3, [sp, #4]
   d4ba0:	4928      	ldr	r1, [pc, #160]	; (d4c44 <_Z22disconnectFromParticlev+0x134>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ba2:	4f29      	ldr	r7, [pc, #164]	; (d4c48 <_Z22disconnectFromParticlev+0x138>)
   d4ba4:	1ac2      	subs	r2, r0, r3
   d4ba6:	4824      	ldr	r0, [pc, #144]	; (d4c38 <_Z22disconnectFromParticlev+0x128>)
   d4ba8:	f7ff fb44 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   d4bac:	f007 ffd7 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4bb0:	4632      	mov	r2, r6
   d4bb2:	2102      	movs	r1, #2
   d4bb4:	4680      	mov	r8, r0
   d4bb6:	6878      	ldr	r0, [r7, #4]
   d4bb8:	f005 fb80 	bl	da2bc <network_disconnect>
        network_off(*this, 0, 0, NULL);
   d4bbc:	6878      	ldr	r0, [r7, #4]
   d4bbe:	4633      	mov	r3, r6
   d4bc0:	4632      	mov	r2, r6
   d4bc2:	4631      	mov	r1, r6
   d4bc4:	f005 fb92 	bl	da2ec <network_off>
        return hal_timer_millis(nullptr);
   d4bc8:	4630      	mov	r0, r6
   d4bca:	f005 f86f 	bl	d9cac <hal_timer_millis>
   d4bce:	46b2      	mov	sl, r6
   d4bd0:	4681      	mov	r9, r0
   d4bd2:	2000      	movs	r0, #0
   d4bd4:	f005 f86a 	bl	d9cac <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4bd8:	ebb0 0409 	subs.w	r4, r0, r9
   d4bdc:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d4be0:	2300      	movs	r3, #0
   d4be2:	f247 522f 	movw	r2, #29999	; 0x752f
   d4be6:	42ab      	cmp	r3, r5
   d4be8:	bf08      	it	eq
   d4bea:	42a2      	cmpeq	r2, r4
   d4bec:	d306      	bcc.n	d4bfc <_Z22disconnectFromParticlev+0xec>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d4bee:	4638      	mov	r0, r7
   d4bf0:	f007 fa80 	bl	dc0f4 <_ZN5spark12NetworkClass5isOffEv>
   d4bf4:	b910      	cbnz	r0, d4bfc <_Z22disconnectFromParticlev+0xec>
            spark_process();
   d4bf6:	f005 fb01 	bl	da1fc <spark_process>
        while (_while() && !_condition()) {
   d4bfa:	e7ea      	b.n	d4bd2 <_Z22disconnectFromParticlev+0xc2>
   d4bfc:	4812      	ldr	r0, [pc, #72]	; (d4c48 <_Z22disconnectFromParticlev+0x138>)
   d4bfe:	f007 fa79 	bl	dc0f4 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   d4c02:	f005 f843 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d4c06:	f8cb 0000 	str.w	r0, [fp]
    		spark_process();
   d4c0a:	f005 faf7 	bl	da1fc <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   d4c0e:	480e      	ldr	r0, [pc, #56]	; (d4c48 <_Z22disconnectFromParticlev+0x138>)
   d4c10:	f007 fa6c 	bl	dc0ec <_ZN5spark12NetworkClass4isOnEv>
   d4c14:	b120      	cbz	r0, d4c20 <_Z22disconnectFromParticlev+0x110>
    Log.info("Failed to turn off the Cellular modem");
   d4c16:	490d      	ldr	r1, [pc, #52]	; (d4c4c <_Z22disconnectFromParticlev+0x13c>)
   d4c18:	4807      	ldr	r0, [pc, #28]	; (d4c38 <_Z22disconnectFromParticlev+0x128>)
   d4c1a:	f7ff fb0b 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   d4c1e:	e7b8      	b.n	d4b92 <_Z22disconnectFromParticlev+0x82>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   d4c20:	f007 ff9d 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4c24:	490a      	ldr	r1, [pc, #40]	; (d4c50 <_Z22disconnectFromParticlev+0x140>)
   d4c26:	eba0 0208 	sub.w	r2, r0, r8
   d4c2a:	4803      	ldr	r0, [pc, #12]	; (d4c38 <_Z22disconnectFromParticlev+0x128>)
   d4c2c:	f7ff fb02 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
    return true;
   d4c30:	2601      	movs	r6, #1
   d4c32:	e7ae      	b.n	d4b92 <_Z22disconnectFromParticlev+0x82>
   d4c34:	000de063 	.word	0x000de063
   d4c38:	2003e588 	.word	0x2003e588
   d4c3c:	2003e738 	.word	0x2003e738
   d4c40:	000de08c 	.word	0x000de08c
   d4c44:	000de0af 	.word	0x000de0af
   d4c48:	2003e4b4 	.word	0x2003e4b4
   d4c4c:	000de0d8 	.word	0x000de0d8
   d4c50:	000de0fe 	.word	0x000de0fe

000d4c54 <loop>:
void loop() {
   d4c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   d4c58:	4cb5      	ldr	r4, [pc, #724]	; (d4f30 <loop+0x2dc>)
   d4c5a:	7823      	ldrb	r3, [r4, #0]
   d4c5c:	3b02      	subs	r3, #2
void loop() {
   d4c5e:	b0d5      	sub	sp, #340	; 0x154
   d4c60:	2b05      	cmp	r3, #5
   d4c62:	d87f      	bhi.n	d4d64 <loop+0x110>
   d4c64:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4c68:	00190006 	.word	0x00190006
   d4c6c:	01f90093 	.word	0x01f90093
   d4c70:	019f021c 	.word	0x019f021c
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4c74:	4baf      	ldr	r3, [pc, #700]	; (d4f34 <loop+0x2e0>)
   d4c76:	781b      	ldrb	r3, [r3, #0]
   d4c78:	2b02      	cmp	r3, #2
   d4c7a:	d001      	beq.n	d4c80 <loop+0x2c>
   d4c7c:	f7ff fb5a 	bl	d4334 <_Z22publishStateTransitionv>
			if (publishSchedule.isScheduledTime()) state = LoRA_STATE;		   // See Time section in setup for schedule
   d4c80:	48ad      	ldr	r0, [pc, #692]	; (d4f38 <loop+0x2e4>)
   d4c82:	f001 fd99 	bl	d67b8 <_ZN17LocalTimeSchedule15isScheduledTimeEv>
   d4c86:	b108      	cbz	r0, d4c8c <loop+0x38>
   d4c88:	2304      	movs	r3, #4
   d4c8a:	7023      	strb	r3, [r4, #0]
			if (userSwitchDectected) state = CONNECTING_STATE;
   d4c8c:	4bab      	ldr	r3, [pc, #684]	; (d4f3c <loop+0x2e8>)
   d4c8e:	781b      	ldrb	r3, [r3, #0]
   d4c90:	2b00      	cmp	r3, #0
   d4c92:	d067      	beq.n	d4d64 <loop+0x110>
			if (!Particle.connected()) state = CONNECTING_STATE;                     // Now we will turn on the cellular radio and connect to Particle
   d4c94:	2305      	movs	r3, #5
				if (sysStatus.lowPowerMode) state = SLEEPING_STATE;
   d4c96:	7023      	strb	r3, [r4, #0]
   d4c98:	e064      	b.n	d4d64 <loop+0x110>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4c9a:	4ba6      	ldr	r3, [pc, #664]	; (d4f34 <loop+0x2e0>)
   d4c9c:	781b      	ldrb	r3, [r3, #0]
   d4c9e:	2b03      	cmp	r3, #3
   d4ca0:	d001      	beq.n	d4ca6 <loop+0x52>
   d4ca2:	f7ff fb47 	bl	d4334 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d4ca6:	2100      	movs	r1, #0
   d4ca8:	48a5      	ldr	r0, [pc, #660]	; (d4f40 <loop+0x2ec>)
   d4caa:	f004 fae7 	bl	d927c <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent()-10;  		   		   // Subtracting ten seconds to reduce prospect of round tripping to IDLE
   d4cae:	f7ff ff25 	bl	d4afc <_Z21secondsUntilNextEventv>
   d4cb2:	f1a0 070a 	sub.w	r7, r0, #10
			Log.info("Sleep for %i seconds", wakeInSeconds);
   d4cb6:	463a      	mov	r2, r7
   d4cb8:	49a2      	ldr	r1, [pc, #648]	; (d4f44 <loop+0x2f0>)
   d4cba:	48a3      	ldr	r0, [pc, #652]	; (d4f48 <loop+0x2f4>)
   d4cbc:	f7ff faba 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   d4cc0:	4ba2      	ldr	r3, [pc, #648]	; (d4f4c <loop+0x2f8>)
   d4cc2:	7d1a      	ldrb	r2, [r3, #20]
   d4cc4:	b10a      	cbz	r2, d4cca <loop+0x76>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4cc6:	2202      	movs	r2, #2
   d4cc8:	721a      	strb	r2, [r3, #8]
				.gpio(userSwitch,CHANGE)
   d4cca:	48a0      	ldr	r0, [pc, #640]	; (d4f4c <loop+0x2f8>)
   d4ccc:	2200      	movs	r2, #0
   d4cce:	2104      	movs	r1, #4
   d4cd0:	f7ff fa7c 	bl	d41cc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4cd4:	7d03      	ldrb	r3, [r0, #20]
   d4cd6:	4606      	mov	r6, r0
   d4cd8:	b1fb      	cbz	r3, d4d1a <loop+0xc6>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4cda:	6833      	ldr	r3, [r6, #0]
				.duration(wakeInSeconds * 1000L);
   d4cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ce0:	68db      	ldr	r3, [r3, #12]
   d4ce2:	4347      	muls	r7, r0
        if (!start) {
   d4ce4:	b12b      	cbz	r3, d4cf2 <loop+0x9e>
            if (start->type == type) {
   d4ce6:	889a      	ldrh	r2, [r3, #4]
   d4ce8:	2a04      	cmp	r2, #4
   d4cea:	f000 81f5 	beq.w	d50d8 <loop+0x484>
            start = start->next;
   d4cee:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4cf0:	e7f8      	b.n	d4ce4 <loop+0x90>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4cf2:	4997      	ldr	r1, [pc, #604]	; (d4f50 <loop+0x2fc>)
   d4cf4:	2010      	movs	r0, #16
   d4cf6:	f008 f9af 	bl	dd058 <_ZnwjRKSt9nothrow_t>
   d4cfa:	4605      	mov	r5, r0
   d4cfc:	2800      	cmp	r0, #0
   d4cfe:	f000 81e9 	beq.w	d50d4 <loop+0x480>
   d4d02:	2210      	movs	r2, #16
   d4d04:	2100      	movs	r1, #0
   d4d06:	f008 fe09 	bl	dd91c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4d0a:	4b92      	ldr	r3, [pc, #584]	; (d4f54 <loop+0x300>)
   d4d0c:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4d0e:	2304      	movs	r3, #4
   d4d10:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4d12:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d4d14:	e9c5 3702 	strd	r3, r7, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4d18:	6135      	str	r5, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   d4d1a:	498c      	ldr	r1, [pc, #560]	; (d4f4c <loop+0x2f8>)
   d4d1c:	a811      	add	r0, sp, #68	; 0x44
   d4d1e:	f007 fd85 	bl	dc82c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4d22:	4887      	ldr	r0, [pc, #540]	; (d4f40 <loop+0x2ec>)
   d4d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4d28:	f004 faa8 	bl	d927c <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4d2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
        if (wakeupSource_) {
   d4d2e:	b19b      	cbz	r3, d4d58 <loop+0x104>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4d30:	889a      	ldrh	r2, [r3, #4]
   d4d32:	2a01      	cmp	r2, #1
   d4d34:	d110      	bne.n	d4d58 <loop+0x104>
			if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   d4d36:	899b      	ldrh	r3, [r3, #12]
   d4d38:	2b04      	cmp	r3, #4
   d4d3a:	d10d      	bne.n	d4d58 <loop+0x104>
				setLowPowerMode("0");                                          // We are waking the device for a reason
   d4d3c:	4986      	ldr	r1, [pc, #536]	; (d4f58 <loop+0x304>)
   d4d3e:	a814      	add	r0, sp, #80	; 0x50
   d4d40:	f007 fc15 	bl	dc56e <_ZN6StringC1EPKc>
   d4d44:	a814      	add	r0, sp, #80	; 0x50
   d4d46:	f7ff fb77 	bl	d4438 <_Z15setLowPowerMode6String>
   d4d4a:	a814      	add	r0, sp, #80	; 0x50
   d4d4c:	f007 fbc4 	bl	dc4d8 <_ZN6StringD1Ev>
				Log.info("Woke with user button - normal operations");
   d4d50:	4982      	ldr	r1, [pc, #520]	; (d4f5c <loop+0x308>)
   d4d52:	487d      	ldr	r0, [pc, #500]	; (d4f48 <loop+0x2f4>)
   d4d54:	f7ff fa6e 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
        if (wakeupSource_) {
   d4d58:	9811      	ldr	r0, [sp, #68]	; 0x44
			state = IDLE_STATE;
   d4d5a:	2302      	movs	r3, #2
   d4d5c:	7023      	strb	r3, [r4, #0]
   d4d5e:	b108      	cbz	r0, d4d64 <loop+0x110>
            free(wakeupSource_);
   d4d60:	f005 fb04 	bl	da36c <free>
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   d4d64:	4876      	ldr	r0, [pc, #472]	; (d4f40 <loop+0x2ec>)
	if (systemStatusWriteNeeded) {                                       // These flags get set when a value is changed
   d4d66:	4c7e      	ldr	r4, [pc, #504]	; (d4f60 <loop+0x30c>)
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   d4d68:	f004 fd84 	bl	d9874 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   d4d6c:	f001 ffc8 	bl	d6d00 <_ZN17PublishQueuePosix8instanceEv>
   d4d70:	f001 feb9 	bl	d6ae6 <_ZN17PublishQueuePosix4loopEv>
	if (systemStatusWriteNeeded) {                                       // These flags get set when a value is changed
   d4d74:	7823      	ldrb	r3, [r4, #0]
   d4d76:	b13b      	cbz	r3, d4d88 <loop+0x134>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4d78:	2324      	movs	r3, #36	; 0x24
   d4d7a:	4a7a      	ldr	r2, [pc, #488]	; (d4f64 <loop+0x310>)
   d4d7c:	487a      	ldr	r0, [pc, #488]	; (d4f68 <loop+0x314>)
   d4d7e:	2101      	movs	r1, #1
   d4d80:	f004 fe73 	bl	d9a6a <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
   d4d84:	2300      	movs	r3, #0
   d4d86:	7023      	strb	r3, [r4, #0]
}
   d4d88:	b055      	add	sp, #340	; 0x154
   d4d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t len = sizeof(buf);
   d4d8e:	23f9      	movs	r3, #249	; 0xf9
   d4d90:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			if (state != oldState) {
   d4d94:	4b67      	ldr	r3, [pc, #412]	; (d4f34 <loop+0x2e0>)
   d4d96:	4d75      	ldr	r5, [pc, #468]	; (d4f6c <loop+0x318>)
   d4d98:	781b      	ldrb	r3, [r3, #0]
   d4d9a:	2b04      	cmp	r3, #4
   d4d9c:	d00a      	beq.n	d4db4 <loop+0x160>
				publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4d9e:	f7ff fac9 	bl	d4334 <_Z22publishStateTransitionv>
   d4da2:	f004 ff73 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
				Log.info("In the LoRA state with a frequency of %u minutes", sysStatus.frequencyMinutes);
   d4da6:	4b6f      	ldr	r3, [pc, #444]	; (d4f64 <loop+0x310>)
				startLoRAWindow = millis();               // Mark when we enter this state - for timeouts
   d4da8:	6028      	str	r0, [r5, #0]
				Log.info("In the LoRA state with a frequency of %u minutes", sysStatus.frequencyMinutes);
   d4daa:	8bda      	ldrh	r2, [r3, #30]
   d4dac:	4970      	ldr	r1, [pc, #448]	; (d4f70 <loop+0x31c>)
   d4dae:	4866      	ldr	r0, [pc, #408]	; (d4f48 <loop+0x2f4>)
   d4db0:	f7ff fa40 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
			if (manager.recvfromAck(buf, &len, &from))	{	// We have received a message
   d4db4:	4f6f      	ldr	r7, [pc, #444]	; (d4f74 <loop+0x320>)
   d4db6:	4870      	ldr	r0, [pc, #448]	; (d4f78 <loop+0x324>)
   d4db8:	2600      	movs	r6, #0
   d4dba:	e9cd 6602 	strd	r6, r6, [sp, #8]
   d4dbe:	e9cd 6600 	strd	r6, r6, [sp]
   d4dc2:	f10d 033b 	add.w	r3, sp, #59	; 0x3b
   d4dc6:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
   d4dca:	4639      	mov	r1, r7
   d4dcc:	f002 feca 	bl	d7b64 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d4dd0:	2800      	cmp	r0, #0
   d4dd2:	f000 80a4 	beq.w	d4f1e <loop+0x2ca>
				digitalWrite(blueLED,HIGH);			        // Signal we are using the radio
   d4dd6:	2101      	movs	r1, #1
   d4dd8:	2007      	movs	r0, #7
   d4dda:	f008 f8d2 	bl	dcf82 <digitalWrite>
				buf[len] = 0;
   d4dde:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				Log.info("Received from 0x%02x with rssi=%d msg = %d", from, driver.lastRssi(), buf[16]);
   d4de2:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   d4de6:	4865      	ldr	r0, [pc, #404]	; (d4f7c <loop+0x328>)
				buf[len] = 0;
   d4de8:	54fe      	strb	r6, [r7, r3]
				Log.info("Received from 0x%02x with rssi=%d msg = %d", from, driver.lastRssi(), buf[16]);
   d4dea:	920b      	str	r2, [sp, #44]	; 0x2c
   d4dec:	f002 fc69 	bl	d76c2 <_ZN15RHGenericDriver8lastRssiEv>
   d4df0:	7c39      	ldrb	r1, [r7, #16]
   d4df2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4df4:	9100      	str	r1, [sp, #0]
   d4df6:	4603      	mov	r3, r0
   d4df8:	4961      	ldr	r1, [pc, #388]	; (d4f80 <loop+0x32c>)
   d4dfa:	4853      	ldr	r0, [pc, #332]	; (d4f48 <loop+0x2f4>)
				if (updatedFrequencyMinutes) {              // If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   d4dfc:	f8df a19c 	ldr.w	sl, [pc, #412]	; d4f9c <loop+0x348>
   d4e00:	f8df 8160 	ldr.w	r8, [pc, #352]	; d4f64 <loop+0x310>
				Log.info("Received from 0x%02x with rssi=%d msg = %d", from, driver.lastRssi(), buf[16]);
   d4e04:	f7ff fa16 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d4e08:	f004 ff40 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
				Log.info("waited for %lu seconds", (long)((millis() - startLoRAWindow)/1000L));
   d4e0c:	682a      	ldr	r2, [r5, #0]
   d4e0e:	495d      	ldr	r1, [pc, #372]	; (d4f84 <loop+0x330>)
   d4e10:	1a80      	subs	r0, r0, r2
   d4e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e16:	fbb0 f2f2 	udiv	r2, r0, r2
   d4e1a:	484b      	ldr	r0, [pc, #300]	; (d4f48 <loop+0x2f4>)
   d4e1c:	f7ff fa0a 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
				if (updatedFrequencyMinutes) {              // If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   d4e20:	f8ba 9000 	ldrh.w	r9, [sl]
   d4e24:	f1b9 0f00 	cmp.w	r9, #0
   d4e28:	d021      	beq.n	d4e6e <loop+0x21a>
					publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("21:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d4e2a:	4957      	ldr	r1, [pc, #348]	; (d4f88 <loop+0x334>)
					sysStatus.frequencyMinutes = updatedFrequencyMinutes;
   d4e2c:	f8a8 901e 	strh.w	r9, [r8, #30]
					publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("21:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d4e30:	a80f      	add	r0, sp, #60	; 0x3c
   d4e32:	f000 fd2b 	bl	d588c <_ZN12LocalTimeHMSC1EPKc>
   d4e36:	4955      	ldr	r1, [pc, #340]	; (d4f8c <loop+0x338>)
   d4e38:	a811      	add	r0, sp, #68	; 0x44
   d4e3a:	f000 fd27 	bl	d588c <_ZN12LocalTimeHMSC1EPKc>
   d4e3e:	aa11      	add	r2, sp, #68	; 0x44
   d4e40:	a90f      	add	r1, sp, #60	; 0x3c
   d4e42:	a814      	add	r0, sp, #80	; 0x50
   d4e44:	f7ff fa0e 	bl	d4264 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d4e48:	aa14      	add	r2, sp, #80	; 0x50
   d4e4a:	4649      	mov	r1, r9
   d4e4c:	483a      	ldr	r0, [pc, #232]	; (d4f38 <loop+0x2e4>)
   d4e4e:	f001 fdd2 	bl	d69f6 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d4e52:	a814      	add	r0, sp, #80	; 0x50
   d4e54:	f7ff fa1a 	bl	d428c <_ZN14LocalTimeRangeD1Ev>
   d4e58:	a811      	add	r0, sp, #68	; 0x44
   d4e5a:	f000 fb66 	bl	d552a <_ZN12LocalTimeHMSD1Ev>
   d4e5e:	a80f      	add	r0, sp, #60	; 0x3c
   d4e60:	f000 fb63 	bl	d552a <_ZN12LocalTimeHMSD1Ev>
					systemStatusWriteNeeded = true;
   d4e64:	4b3e      	ldr	r3, [pc, #248]	; (d4f60 <loop+0x30c>)
					updatedFrequencyMinutes = 0;
   d4e66:	f8aa 6000 	strh.w	r6, [sl]
					systemStatusWriteNeeded = true;
   d4e6a:	2201      	movs	r2, #1
   d4e6c:	701a      	strb	r2, [r3, #0]
				data[2] = buf[16];							// Message number
   d4e6e:	7c3b      	ldrb	r3, [r7, #16]
   d4e70:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
        		data[0] = 0;                                // to be replaced/updated
   d4e74:	2600      	movs	r6, #0
   d4e76:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
				data[3] = ((uint8_t) ((Time.now()) >> 24)); // Fourth byte - current time
   d4e7a:	f007 fe70 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4e7e:	1600      	asrs	r0, r0, #24
   d4e80:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
				data[4] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   d4e84:	f007 fe6b 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4e88:	1400      	asrs	r0, r0, #16
   d4e8a:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
				data[5] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   d4e8e:	f007 fe66 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4e92:	1200      	asrs	r0, r0, #8
   d4e94:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
				data[6] = ((uint8_t) (Time.now()));		    // First byte			
   d4e98:	f007 fe61 	bl	dcb5e <_ZN9TimeClass3nowEv>
				data[7] = highByte(sysStatus.frequencyMinutes);	// Time till next report
   d4e9c:	f8b8 301e 	ldrh.w	r3, [r8, #30]
				data[8] = lowByte(sysStatus.frequencyMinutes);		
   d4ea0:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				data[7] = highByte(sysStatus.frequencyMinutes);	// Time till next report
   d4ea4:	121a      	asrs	r2, r3, #8
   d4ea6:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
				Log.info("Sent response to client message = %d, time = %s, next report = %u minutes", data[2], Time.timeStr(data[3] << 24 | data[4] << 16 | data[5] <<8 | data[6]).c_str(), (data[7] << 8 | data[8]));
   d4eaa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   d4eae:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
				data[6] = ((uint8_t) (Time.now()));		    // First byte			
   d4eb2:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
				Log.info("Sent response to client message = %d, time = %s, next report = %u minutes", data[2], Time.timeStr(data[3] << 24 | data[4] << 16 | data[5] <<8 | data[6]).c_str(), (data[7] << 8 | data[8]));
   d4eb6:	0412      	lsls	r2, r2, #16
   d4eb8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d4ebc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   d4ec0:	f89d 7046 	ldrb.w	r7, [sp, #70]	; 0x46
   d4ec4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   d4ec8:	b2c0      	uxtb	r0, r0
   d4eca:	4302      	orrs	r2, r0
   d4ecc:	17d3      	asrs	r3, r2, #31
   d4ece:	a814      	add	r0, sp, #80	; 0x50
   d4ed0:	f007 fd42 	bl	dc958 <_ZN9TimeClass7timeStrEx>
   d4ed4:	f8bd 304b 	ldrh.w	r3, [sp, #75]	; 0x4b
   d4ed8:	492d      	ldr	r1, [pc, #180]	; (d4f90 <loop+0x33c>)
   d4eda:	481b      	ldr	r0, [pc, #108]	; (d4f48 <loop+0x2f4>)
   d4edc:	ba5b      	rev16	r3, r3
   d4ede:	b29b      	uxth	r3, r3
   d4ee0:	463a      	mov	r2, r7
   d4ee2:	9300      	str	r3, [sp, #0]
   d4ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d4ee6:	f7ff f9a5 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d4eea:	a814      	add	r0, sp, #80	; 0x50
   d4eec:	f007 faf4 	bl	dc4d8 <_ZN6StringD1Ev>
				if (manager.sendtoWait(data, sizeof(data), from) != RH_ROUTER_ERROR_NONE) Log.info("sendtoWait failed");
   d4ef0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   d4ef4:	4820      	ldr	r0, [pc, #128]	; (d4f78 <loop+0x324>)
   d4ef6:	9600      	str	r6, [sp, #0]
   d4ef8:	2209      	movs	r2, #9
   d4efa:	a911      	add	r1, sp, #68	; 0x44
   d4efc:	f002 fdfe 	bl	d7afc <_ZN6RHMesh10sendtoWaitEPhhhh>
   d4f00:	2800      	cmp	r0, #0
   d4f02:	d04d      	beq.n	d4fa0 <loop+0x34c>
   d4f04:	4923      	ldr	r1, [pc, #140]	; (d4f94 <loop+0x340>)
   d4f06:	4810      	ldr	r0, [pc, #64]	; (d4f48 <loop+0x2f4>)
   d4f08:	f7ff f994 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
				digitalWrite(blueLED,LOW);			        // Done with the radio
   d4f0c:	2100      	movs	r1, #0
   d4f0e:	2007      	movs	r0, #7
   d4f10:	f008 f837 	bl	dcf82 <digitalWrite>
				driver.sleep();                             // Here is where we will power down the LoRA radio module
   d4f14:	4819      	ldr	r0, [pc, #100]	; (d4f7c <loop+0x328>)
   d4f16:	f003 fa8e 	bl	d8436 <_ZN7RH_RF955sleepEv>
				state = REPORTING_STATE;
   d4f1a:	2307      	movs	r3, #7
   d4f1c:	7023      	strb	r3, [r4, #0]
   d4f1e:	f004 feb5 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 300000L) state = CONNECTING_STATE;	// This is a fail safe to make sure an off-line client won't prevent gatewat from checking in - and setting its clock
   d4f22:	682b      	ldr	r3, [r5, #0]
   d4f24:	1ac0      	subs	r0, r0, r3
   d4f26:	4b1c      	ldr	r3, [pc, #112]	; (d4f98 <loop+0x344>)
   d4f28:	4298      	cmp	r0, r3
   d4f2a:	f67f af1b 	bls.w	d4d64 <loop+0x110>
   d4f2e:	e6b1      	b.n	d4c94 <loop+0x40>
   d4f30:	2003e238 	.word	0x2003e238
   d4f34:	2003e204 	.word	0x2003e204
   d4f38:	2003e208 	.word	0x2003e208
   d4f3c:	2003e264 	.word	0x2003e264
   d4f40:	2003dd44 	.word	0x2003dd44
   d4f44:	000de12a 	.word	0x000de12a
   d4f48:	2003e588 	.word	0x2003e588
   d4f4c:	2003de60 	.word	0x2003de60
   d4f50:	000def3c 	.word	0x000def3c
   d4f54:	00030010 	.word	0x00030010
   d4f58:	000de3a4 	.word	0x000de3a4
   d4f5c:	000de13f 	.word	0x000de13f
   d4f60:	2003e260 	.word	0x2003e260
   d4f64:	2003e23c 	.word	0x2003e23c
   d4f68:	2003dfa8 	.word	0x2003dfa8
   d4f6c:	2003dd38 	.word	0x2003dd38
   d4f70:	000de169 	.word	0x000de169
   d4f74:	2003dd64 	.word	0x2003dd64
   d4f78:	2003e0cc 	.word	0x2003e0cc
   d4f7c:	2003de78 	.word	0x2003de78
   d4f80:	000de19a 	.word	0x000de19a
   d4f84:	000de1c5 	.word	0x000de1c5
   d4f88:	000ddfe4 	.word	0x000ddfe4
   d4f8c:	000de1dc 	.word	0x000de1dc
   d4f90:	000de1e5 	.word	0x000de1e5
   d4f94:	000de22f 	.word	0x000de22f
   d4f98:	000493e0 	.word	0x000493e0
   d4f9c:	2003e262 	.word	0x2003e262
				else flashTheLEDs();
   d4fa0:	f7ff f987 	bl	d42b2 <_Z12flashTheLEDsv>
   d4fa4:	e7b2      	b.n	d4f0c <loop+0x2b8>
			if (state != oldState) publishStateTransition();
   d4fa6:	4b4d      	ldr	r3, [pc, #308]	; (d50dc <loop+0x488>)
   d4fa8:	781b      	ldrb	r3, [r3, #0]
   d4faa:	2b07      	cmp	r3, #7
   d4fac:	d001      	beq.n	d4fb2 <loop+0x35e>
   d4fae:	f7ff f9c1 	bl	d4334 <_Z22publishStateTransitionv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"alerts\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",(buf[2] << 8 | buf[3]), (buf[5] << 8 | buf[6]), (buf[7] << 8 | buf[8]), buf[10], batteryContext[buf[11]], buf[9], buf[12], buf[13], ((buf[14] << 8 | buf[15]) - 65535), buf[16], Time.now());
   d4fb2:	4a4b      	ldr	r2, [pc, #300]	; (d50e0 <loop+0x48c>)
   d4fb4:	494b      	ldr	r1, [pc, #300]	; (d50e4 <loop+0x490>)
   d4fb6:	8853      	ldrh	r3, [r2, #2]
   d4fb8:	7ad0      	ldrb	r0, [r2, #11]
   d4fba:	89d5      	ldrh	r5, [r2, #14]
   d4fbc:	f8b2 6005 	ldrh.w	r6, [r2, #5]
   d4fc0:	f8b2 7007 	ldrh.w	r7, [r2, #7]
   d4fc4:	f892 800a 	ldrb.w	r8, [r2, #10]
   d4fc8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d4fcc:	f892 a009 	ldrb.w	sl, [r2, #9]
   d4fd0:	f892 b00c 	ldrb.w	fp, [r2, #12]
   d4fd4:	f892 900d 	ldrb.w	r9, [r2, #13]
   d4fd8:	7c12      	ldrb	r2, [r2, #16]
   d4fda:	910c      	str	r1, [sp, #48]	; 0x30
   d4fdc:	ba5b      	rev16	r3, r3
   d4fde:	b29b      	uxth	r3, r3
   d4fe0:	ba6d      	rev16	r5, r5
   d4fe2:	930d      	str	r3, [sp, #52]	; 0x34
   d4fe4:	920b      	str	r2, [sp, #44]	; 0x2c
   d4fe6:	b2ad      	uxth	r5, r5
   d4fe8:	f007 fdb9 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d4fec:	ba76      	rev16	r6, r6
   d4fee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4ff0:	990c      	ldr	r1, [sp, #48]	; 0x30
   d4ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4ff4:	9009      	str	r0, [sp, #36]	; 0x24
   d4ff6:	ba7f      	rev16	r7, r7
   d4ff8:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   d4ffc:	3dff      	subs	r5, #255	; 0xff
   d4ffe:	b2b6      	uxth	r6, r6
   d5000:	b2bf      	uxth	r7, r7
   d5002:	e9cd 5207 	strd	r5, r2, [sp, #28]
   d5006:	e9cd 8102 	strd	r8, r1, [sp, #8]
   d500a:	4a37      	ldr	r2, [pc, #220]	; (d50e8 <loop+0x494>)
   d500c:	f8cd a010 	str.w	sl, [sp, #16]
   d5010:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5014:	e9cd b905 	strd	fp, r9, [sp, #20]
   d5018:	e9cd 6700 	strd	r6, r7, [sp]
   d501c:	a814      	add	r0, sp, #80	; 0x50
   d501e:	f005 f9c5 	bl	da3ac <snprintf>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   d5022:	f001 fe6d 	bl	d6d00 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d5026:	4b31      	ldr	r3, [pc, #196]	; (d50ec <loop+0x498>)
   d5028:	4a31      	ldr	r2, [pc, #196]	; (d50f0 <loop+0x49c>)
   d502a:	781b      	ldrb	r3, [r3, #0]
   d502c:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   d502e:	2100      	movs	r1, #0
   d5030:	4313      	orrs	r3, r2
   d5032:	6802      	ldr	r2, [r0, #0]
   d5034:	f88d 1004 	strb.w	r1, [sp, #4]
   d5038:	f88d 3000 	strb.w	r3, [sp]
   d503c:	6815      	ldr	r5, [r2, #0]
   d503e:	492d      	ldr	r1, [pc, #180]	; (d50f4 <loop+0x4a0>)
   d5040:	233c      	movs	r3, #60	; 0x3c
   d5042:	aa14      	add	r2, sp, #80	; 0x50
   d5044:	47a8      	blx	r5
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5046:	f005 f8e9 	bl	da21c <spark_cloud_flag_connected>
			if (!Particle.connected()) state = CONNECTING_STATE;                     // Now we will turn on the cellular radio and connect to Particle
   d504a:	2800      	cmp	r0, #0
   d504c:	f43f ae22 	beq.w	d4c94 <loop+0x40>
			else if (sysStatus.lowPowerMode) state = DISCONNECTING_STATE;			// If we are connected but need to go to low power mode, we need to disconnect
   d5050:	4b29      	ldr	r3, [pc, #164]	; (d50f8 <loop+0x4a4>)
   d5052:	791b      	ldrb	r3, [r3, #4]
				if(Particle.connected() && !sysStatus.lowPowerMode) state = IDLE_STATE;
   d5054:	b9bb      	cbnz	r3, d5086 <loop+0x432>
   d5056:	2302      	movs	r3, #2
   d5058:	e61d      	b.n	d4c96 <loop+0x42>
			if (state != oldState) {
   d505a:	4b20      	ldr	r3, [pc, #128]	; (d50dc <loop+0x488>)
   d505c:	781b      	ldrb	r3, [r3, #0]
   d505e:	2b05      	cmp	r3, #5
   d5060:	d007      	beq.n	d5072 <loop+0x41e>
				publishStateTransition();  
   d5062:	f7ff f967 	bl	d4334 <_Z22publishStateTransitionv>
        spark_cloud_flag_connect();
   d5066:	f005 f8d1 	bl	da20c <spark_cloud_flag_connect>
   d506a:	f004 fe0f 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   d506e:	4b23      	ldr	r3, [pc, #140]	; (d50fc <loop+0x4a8>)
   d5070:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5072:	f005 f8d3 	bl	da21c <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout - either way we need to disconnect
   d5076:	b140      	cbz	r0, d508a <loop+0x436>
				sysStatus.lastConnection = Time.now();
   d5078:	f007 fd71 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d507c:	4d1e      	ldr	r5, [pc, #120]	; (d50f8 <loop+0x4a4>)
   d507e:	61a8      	str	r0, [r5, #24]
   d5080:	f005 f8cc 	bl	da21c <spark_cloud_flag_connected>
				if(Particle.connected() && !sysStatus.lowPowerMode) state = IDLE_STATE;
   d5084:	b950      	cbnz	r0, d509c <loop+0x448>
				else state = DISCONNECTING_STATE;
   d5086:	2306      	movs	r3, #6
   d5088:	e605      	b.n	d4c96 <loop+0x42>
   d508a:	f004 fdff 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout - either way we need to disconnect
   d508e:	4b1b      	ldr	r3, [pc, #108]	; (d50fc <loop+0x4a8>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	1ac0      	subs	r0, r0, r3
   d5094:	4b1a      	ldr	r3, [pc, #104]	; (d5100 <loop+0x4ac>)
   d5096:	4298      	cmp	r0, r3
   d5098:	d8ee      	bhi.n	d5078 <loop+0x424>
   d509a:	e663      	b.n	d4d64 <loop+0x110>
				if(Particle.connected() && !sysStatus.lowPowerMode) state = IDLE_STATE;
   d509c:	792b      	ldrb	r3, [r5, #4]
   d509e:	e7d9      	b.n	d5054 <loop+0x400>
			if (state != oldState) {
   d50a0:	4b0e      	ldr	r3, [pc, #56]	; (d50dc <loop+0x488>)
   d50a2:	4d18      	ldr	r5, [pc, #96]	; (d5104 <loop+0x4b0>)
   d50a4:	781b      	ldrb	r3, [r3, #0]
   d50a6:	2b06      	cmp	r3, #6
   d50a8:	d004      	beq.n	d50b4 <loop+0x460>
				publishStateTransition(); 
   d50aa:	f7ff f943 	bl	d4334 <_Z22publishStateTransitionv>
   d50ae:	f004 fded 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   d50b2:	6028      	str	r0, [r5, #0]
   d50b4:	f004 fdea 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stayConnectedWindow > 90000) {							// Stay on-line for 90 seconds
   d50b8:	682b      	ldr	r3, [r5, #0]
   d50ba:	1ac0      	subs	r0, r0, r3
   d50bc:	4b12      	ldr	r3, [pc, #72]	; (d5108 <loop+0x4b4>)
   d50be:	4298      	cmp	r0, r3
   d50c0:	f67f ae50 	bls.w	d4d64 <loop+0x110>
				disconnectFromParticle();
   d50c4:	f7ff fd24 	bl	d4b10 <_Z22disconnectFromParticlev>
				if (sysStatus.lowPowerMode) state = SLEEPING_STATE;
   d50c8:	4b0b      	ldr	r3, [pc, #44]	; (d50f8 <loop+0x4a4>)
   d50ca:	791b      	ldrb	r3, [r3, #4]
   d50cc:	2b00      	cmp	r3, #0
   d50ce:	d0c2      	beq.n	d5056 <loop+0x402>
   d50d0:	2303      	movs	r3, #3
   d50d2:	e5e0      	b.n	d4c96 <loop+0x42>
                valid_ = false;
   d50d4:	7530      	strb	r0, [r6, #20]
                return *this;
   d50d6:	e620      	b.n	d4d1a <loop+0xc6>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d50d8:	60df      	str	r7, [r3, #12]
                return *this;
   d50da:	e61e      	b.n	d4d1a <loop+0xc6>
   d50dc:	2003e204 	.word	0x2003e204
   d50e0:	2003dd64 	.word	0x2003dd64
   d50e4:	2003dbf8 	.word	0x2003dbf8
   d50e8:	000de241 	.word	0x000de241
   d50ec:	2003dd2d 	.word	0x2003dd2d
   d50f0:	2003dd2c 	.word	0x2003dd2c
   d50f4:	000de2cc 	.word	0x000de2cc
   d50f8:	2003e23c 	.word	0x2003e23c
   d50fc:	2003dd3c 	.word	0x2003dd3c
   d5100:	000493e0 	.word	0x000493e0
   d5104:	2003dd40 	.word	0x2003dd40
   d5108:	00015f90 	.word	0x00015f90

000d510c <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d510c:	2a02      	cmp	r2, #2
   d510e:	d006      	beq.n	d511e <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d5110:	2a03      	cmp	r2, #3
   d5112:	d002      	beq.n	d511a <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d5114:	2a01      	cmp	r2, #1
   d5116:	d100      	bne.n	d511a <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5118:	6001      	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d511a:	2000      	movs	r0, #0
   d511c:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d511e:	680b      	ldr	r3, [r1, #0]
   d5120:	6003      	str	r3, [r0, #0]
	}
   d5122:	e7fa      	b.n	d511a <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d5124 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5124:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5126:	2301      	movs	r3, #1
   d5128:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d512a:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d512c:	4604      	mov	r4, r0
        if (th->func) {
   d512e:	b143      	cbz	r3, d5142 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d5130:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5132:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d5134:	2301      	movs	r3, #1
   d5136:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5138:	2000      	movs	r0, #0
    }
   d513a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d513e:	f004 bd85 	b.w	d9c4c <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5142:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d5144:	2800      	cmp	r0, #0
   d5146:	d0f5      	beq.n	d5134 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d5148:	6883      	ldr	r3, [r0, #8]
   d514a:	b90b      	cbnz	r3, d5150 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d514c:	f007 ff8e 	bl	dd06c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5150:	68c3      	ldr	r3, [r0, #12]
   d5152:	e7ee      	b.n	d5132 <_ZN6Thread3runEPv+0xe>

000d5154 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5154:	b510      	push	{r4, lr}
      if (_M_manager)
   d5156:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5158:	4604      	mov	r4, r0
      if (_M_manager)
   d515a:	b113      	cbz	r3, d5162 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d515c:	2203      	movs	r2, #3
   d515e:	4601      	mov	r1, r0
   d5160:	4798      	blx	r3
    }
   d5162:	4620      	mov	r0, r4
   d5164:	bd10      	pop	{r4, pc}

000d5166 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d5166:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d5168:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d516a:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d516c:	b135      	cbz	r5, d517c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d516e:	4628      	mov	r0, r5
   d5170:	f7ff fff0 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5174:	2110      	movs	r1, #16
   d5176:	4628      	mov	r0, r5
   d5178:	f007 ff6c 	bl	dd054 <_ZdlPvj>
   d517c:	4620      	mov	r0, r4
   d517e:	2114      	movs	r1, #20
      }
   d5180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d5184:	f007 bf66 	b.w	dd054 <_ZdlPvj>

000d5188 <_ZN6Thread7disposeEv>:
    void dispose()
   d5188:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d518a:	6803      	ldr	r3, [r0, #0]
   d518c:	4604      	mov	r4, r0
        if (!isValid())
   d518e:	b1ab      	cbz	r3, d51bc <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d5190:	6858      	ldr	r0, [r3, #4]
   d5192:	f004 fd0b 	bl	d9bac <os_thread_is_current>
   d5196:	b988      	cbnz	r0, d51bc <_ZN6Thread7disposeEv+0x34>
   d5198:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d519a:	7c5a      	ldrb	r2, [r3, #17]
   d519c:	b912      	cbnz	r2, d51a4 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d519e:	6858      	ldr	r0, [r3, #4]
   d51a0:	f004 fd0c 	bl	d9bbc <os_thread_join>
        os_thread_cleanup(d_->handle);
   d51a4:	6823      	ldr	r3, [r4, #0]
   d51a6:	6858      	ldr	r0, [r3, #4]
   d51a8:	f004 fd10 	bl	d9bcc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51ac:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d51ae:	2300      	movs	r3, #0
   d51b0:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d51b2:	b118      	cbz	r0, d51bc <_ZN6Thread7disposeEv+0x34>
    }
   d51b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d51b8:	f7ff bfd5 	b.w	d5166 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d51bc:	bd10      	pop	{r4, pc}
	...

000d51c0 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   d51c0:	4a05      	ldr	r2, [pc, #20]	; (d51d8 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   d51c2:	6002      	str	r2, [r0, #0]
   d51c4:	2200      	movs	r2, #0
   d51c6:	6042      	str	r2, [r0, #4]
   d51c8:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d51ca:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d51ce:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d51d2:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d51d6:	4770      	bx	lr
   d51d8:	000de38c 	.word	0x000de38c

000d51dc <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   d51dc:	b510      	push	{r4, lr}
    if (!_instance) {
   d51de:	4c07      	ldr	r4, [pc, #28]	; (d51fc <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   d51e0:	6823      	ldr	r3, [r4, #0]
   d51e2:	b943      	cbnz	r3, d51f6 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   d51e4:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d51e8:	f7fe ff55 	bl	d4096 <_Znwj>
   d51ec:	4603      	mov	r3, r0
   d51ee:	b108      	cbz	r0, d51f4 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   d51f0:	f7ff ffe6 	bl	d51c0 <_ZN19BackgroundPublishRKC1Ev>
   d51f4:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d51f6:	6820      	ldr	r0, [r4, #0]
   d51f8:	bd10      	pop	{r4, pc}
   d51fa:	bf00      	nop
   d51fc:	2003e268 	.word	0x2003e268

000d5200 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   d5200:	b538      	push	{r3, r4, r5, lr}
   d5202:	4604      	mov	r4, r0
    if(thread)
   d5204:	6840      	ldr	r0, [r0, #4]
   d5206:	b190      	cbz	r0, d522e <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d5208:	2302      	movs	r3, #2
   d520a:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d520c:	f7ff ffbc 	bl	d5188 <_ZN6Thread7disposeEv>
        delete thread;
   d5210:	6865      	ldr	r5, [r4, #4]
   d5212:	b155      	cbz	r5, d522a <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   d5214:	4628      	mov	r0, r5
   d5216:	f7ff ffb7 	bl	d5188 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d521a:	6828      	ldr	r0, [r5, #0]
   d521c:	b108      	cbz	r0, d5222 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d521e:	f7ff ffa2 	bl	d5166 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d5222:	2104      	movs	r1, #4
   d5224:	4628      	mov	r0, r5
   d5226:	f007 ff15 	bl	dd054 <_ZdlPvj>
        thread = NULL;
   d522a:	2300      	movs	r3, #0
   d522c:	6063      	str	r3, [r4, #4]
    }
}
   d522e:	bd38      	pop	{r3, r4, r5, pc}

000d5230 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d5230:	b510      	push	{r4, lr}
   d5232:	4b05      	ldr	r3, [pc, #20]	; (d5248 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   d5234:	6003      	str	r3, [r0, #0]
   d5236:	4604      	mov	r4, r0
    stop();
   d5238:	f7ff ffe2 	bl	d5200 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   d523c:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d5240:	f7ff ff88 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
}
   d5244:	4620      	mov	r0, r4
   d5246:	bd10      	pop	{r4, pc}
   d5248:	000de38c 	.word	0x000de38c

000d524c <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d524c:	b510      	push	{r4, lr}
   d524e:	4604      	mov	r4, r0
}
   d5250:	f7ff ffee 	bl	d5230 <_ZN19BackgroundPublishRKD1Ev>
   d5254:	4620      	mov	r0, r4
   d5256:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d525a:	f007 fefb 	bl	dd054 <_ZdlPvj>
   d525e:	4620      	mov	r0, r4
   d5260:	bd10      	pop	{r4, pc}

000d5262 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   d5262:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5264:	4604      	mov	r4, r0
   d5266:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d5268:	f100 060d 	add.w	r6, r0, #13
   d526c:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d5270:	7b23      	ldrb	r3, [r4, #12]
   d5272:	b91b      	cbnz	r3, d527c <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   d5274:	2001      	movs	r0, #1
   d5276:	f005 f8e9 	bl	da44c <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d527a:	e7f9      	b.n	d5270 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d527c:	7b23      	ldrb	r3, [r4, #12]
   d527e:	2b02      	cmp	r3, #2
   d5280:	d062      	beq.n	d5348 <_ZN19BackgroundPublishRK8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d5282:	68a0      	ldr	r0, [r4, #8]
   d5284:	f004 fcb2 	bl	d9bec <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d5288:	68a0      	ldr	r0, [r4, #8]
   d528a:	f004 fcb7 	bl	d9bfc <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d528e:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5292:	f88d 3000 	strb.w	r3, [sp]
   d5296:	463a      	mov	r2, r7
   d5298:	233c      	movs	r3, #60	; 0x3c
   d529a:	4631      	mov	r1, r6
   d529c:	a806      	add	r0, sp, #24
   d529e:	f005 faaf 	bl	da800 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d52a2:	9d06      	ldr	r5, [sp, #24]
   d52a4:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d52a6:	b933      	cbnz	r3, d52b6 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   d52a8:	7b23      	ldrb	r3, [r4, #12]
   d52aa:	2b02      	cmp	r3, #2
   d52ac:	d003      	beq.n	d52b6 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d52ae:	2001      	movs	r0, #1
   d52b0:	f005 f8cc 	bl	da44c <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d52b4:	e7f5      	b.n	d52a2 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   d52b6:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d52ba:	b31b      	cbz	r3, d5304 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d52bc:	2000      	movs	r0, #0
   d52be:	f004 ff4f 	bl	da160 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d52c2:	b120      	cbz	r0, d52ce <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   d52c4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d52c6:	b913      	cbnz	r3, d52ce <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   d52c8:	f004 ff98 	bl	da1fc <spark_process>
    }
   d52cc:	e7fa      	b.n	d52c4 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d52ce:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d52d0:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d52d4:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d52d6:	1e59      	subs	r1, r3, #1
   d52d8:	424b      	negs	r3, r1
   d52da:	414b      	adcs	r3, r1
   d52dc:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d52e0:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d52e4:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d52e8:	b90b      	cbnz	r3, d52ee <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   d52ea:	f007 febf 	bl	dd06c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52ee:	ab05      	add	r3, sp, #20
   d52f0:	9300      	str	r3, [sp, #0]
   d52f2:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d52f6:	ab04      	add	r3, sp, #16
   d52f8:	aa03      	add	r2, sp, #12
   d52fa:	f10d 010b 	add.w	r1, sp, #11
   d52fe:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d5302:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d5304:	68a0      	ldr	r0, [r4, #8]
   d5306:	f004 fc71 	bl	d9bec <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d530a:	7b23      	ldrb	r3, [r4, #12]
   d530c:	2b02      	cmp	r3, #2
   d530e:	d015      	beq.n	d533c <_ZN19BackgroundPublishRK8thread_fEv+0xda>
	if (_M_manager)
   d5310:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d5314:	2500      	movs	r5, #0
   d5316:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d531a:	b133      	cbz	r3, d532a <_ZN19BackgroundPublishRK8thread_fEv+0xc8>
            completed_cb = NULL;
   d531c:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d5320:	2203      	movs	r2, #3
   d5322:	4608      	mov	r0, r1
   d5324:	4798      	blx	r3
	    _M_invoker = nullptr;
   d5326:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d532a:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d532c:	68a0      	ldr	r0, [r4, #8]
   d532e:	7323      	strb	r3, [r4, #12]
   d5330:	f004 fc64 	bl	d9bfc <os_mutex_unlock>
   d5334:	a807      	add	r0, sp, #28
   d5336:	f7fe ffe6 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d533a:	e799      	b.n	d5270 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   d533c:	68a0      	ldr	r0, [r4, #8]
   d533e:	f004 fc5d 	bl	d9bfc <os_mutex_unlock>
   d5342:	a807      	add	r0, sp, #28
   d5344:	f7fe ffdf 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d5348:	b009      	add	sp, #36	; 0x24
   d534a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d534c <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d534c:	6800      	ldr	r0, [r0, #0]
   d534e:	f7ff bf88 	b.w	d5262 <_ZN19BackgroundPublishRK8thread_fEv>

000d5352 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5352:	b513      	push	{r0, r1, r4, lr}
   d5354:	460b      	mov	r3, r1
   d5356:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5358:	e9d0 0100 	ldrd	r0, r1, [r0]
   d535c:	466c      	mov	r4, sp
   d535e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5362:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5366:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d536a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d536e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5372:	b002      	add	sp, #8
   d5374:	bd10      	pop	{r4, pc}
	...

000d5378 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d5378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d537c:	4606      	mov	r6, r0
   d537e:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d5380:	2014      	movs	r0, #20
   d5382:	4926      	ldr	r1, [pc, #152]	; (d541c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d5384:	4617      	mov	r7, r2
   d5386:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d5388:	f007 fe66 	bl	dd058 <_ZnwjRKSt9nothrow_t>
   d538c:	4604      	mov	r4, r0
   d538e:	b130      	cbz	r0, d539e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5390:	2200      	movs	r2, #0
            exited(false) {
   d5392:	e9c0 2200 	strd	r2, r2, [r0]
   d5396:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d539a:	7402      	strb	r2, [r0, #16]
   d539c:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d539e:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d53a0:	2c00      	cmp	r4, #0
   d53a2:	d031      	beq.n	d5408 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d53a4:	491d      	ldr	r1, [pc, #116]	; (d541c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d53a6:	2010      	movs	r0, #16
   d53a8:	f007 fe56 	bl	dd058 <_ZnwjRKSt9nothrow_t>
   d53ac:	4605      	mov	r5, r0
   d53ae:	b168      	cbz	r0, d53cc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d53b0:	2300      	movs	r3, #0
   d53b2:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d53b4:	4601      	mov	r1, r0
   d53b6:	4638      	mov	r0, r7
   d53b8:	f7ff ffcb 	bl	d5352 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53bc:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d53be:	68aa      	ldr	r2, [r5, #8]
   d53c0:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53c2:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d53c4:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53c6:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53c8:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d53ca:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53cc:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d53ce:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d53d0:	b137      	cbz	r7, d53e0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d53d2:	4638      	mov	r0, r7
   d53d4:	f7ff febe 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d53d8:	2110      	movs	r1, #16
   d53da:	4638      	mov	r0, r7
   d53dc:	f007 fe3a 	bl	dd054 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d53e0:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d53e2:	6803      	ldr	r3, [r0, #0]
   d53e4:	b183      	cbz	r3, d5408 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d53e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d53e8:	464a      	mov	r2, r9
   d53ea:	e9cd 0300 	strd	r0, r3, [sp]
   d53ee:	4641      	mov	r1, r8
   d53f0:	4b0b      	ldr	r3, [pc, #44]	; (d5420 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d53f2:	3004      	adds	r0, #4
   d53f4:	f004 fbd2 	bl	d9b9c <os_thread_create>
   d53f8:	b930      	cbnz	r0, d5408 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d53fa:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d53fc:	7c1b      	ldrb	r3, [r3, #16]
   d53fe:	b94b      	cbnz	r3, d5414 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d5400:	2001      	movs	r0, #1
   d5402:	f004 fc33 	bl	d9c6c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d5406:	e7f8      	b.n	d53fa <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5408:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d540a:	2300      	movs	r3, #0
   d540c:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d540e:	b108      	cbz	r0, d5414 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d5410:	f7ff fea9 	bl	d5166 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d5414:	4630      	mov	r0, r6
   d5416:	b003      	add	sp, #12
   d5418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d541c:	000def3c 	.word	0x000def3c
   d5420:	000d5125 	.word	0x000d5125

000d5424 <_ZN19BackgroundPublishRK5startEv>:
{
   d5424:	b530      	push	{r4, r5, lr}
    if(!thread)
   d5426:	6843      	ldr	r3, [r0, #4]
{
   d5428:	b087      	sub	sp, #28
   d542a:	4604      	mov	r4, r0
    if(!thread)
   d542c:	b9c3      	cbnz	r3, d5460 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   d542e:	3008      	adds	r0, #8
   d5430:	f004 fbd4 	bl	d9bdc <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d5434:	4b0b      	ldr	r3, [pc, #44]	; (d5464 <_ZN19BackgroundPublishRK5startEv+0x40>)
   d5436:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d5438:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d543a:	4b0b      	ldr	r3, [pc, #44]	; (d5468 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d543c:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d543e:	9304      	str	r3, [sp, #16]
   d5440:	f7fe fe29 	bl	d4096 <_Znwj>
   d5444:	4605      	mov	r5, r0
   d5446:	b138      	cbz	r0, d5458 <_ZN19BackgroundPublishRK5startEv+0x34>
   d5448:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d544c:	9300      	str	r3, [sp, #0]
   d544e:	4907      	ldr	r1, [pc, #28]	; (d546c <_ZN19BackgroundPublishRK5startEv+0x48>)
   d5450:	2302      	movs	r3, #2
   d5452:	aa02      	add	r2, sp, #8
   d5454:	f7ff ff90 	bl	d5378 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   d5458:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d545a:	a802      	add	r0, sp, #8
   d545c:	f7ff fe7a 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
}
   d5460:	b007      	add	sp, #28
   d5462:	bd30      	pop	{r4, r5, pc}
   d5464:	000d534d 	.word	0x000d534d
   d5468:	000d510d 	.word	0x000d510d
   d546c:	000de370 	.word	0x000de370

000d5470 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d5470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5474:	4604      	mov	r4, r0
   d5476:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d5478:	6880      	ldr	r0, [r0, #8]
   d547a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d547c:	4698      	mov	r8, r3
   d547e:	460d      	mov	r5, r1
   d5480:	4616      	mov	r6, r2
   d5482:	f004 fbb3 	bl	d9bec <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d5486:	6863      	ldr	r3, [r4, #4]
   d5488:	b11b      	cbz	r3, d5492 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d548a:	7b23      	ldrb	r3, [r4, #12]
   d548c:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d5490:	b133      	cbz	r3, d54a0 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d5492:	68a0      	ldr	r0, [r4, #8]
   d5494:	f004 fbb2 	bl	d9bfc <os_mutex_unlock>
    {
        return false;
   d5498:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d549a:	b005      	add	sp, #20
   d549c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d54a0:	68a0      	ldr	r0, [r4, #8]
   d54a2:	f004 fbab 	bl	d9bfc <os_mutex_unlock>
    if(!name)
   d54a6:	2d00      	cmp	r5, #0
   d54a8:	d03d      	beq.n	d5526 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d54aa:	2241      	movs	r2, #65	; 0x41
   d54ac:	4629      	mov	r1, r5
   d54ae:	f104 000d 	add.w	r0, r4, #13
   d54b2:	f008 faf4 	bl	dda9e <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d54b6:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d54ba:	b38e      	cbz	r6, d5520 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d54bc:	f240 226f 	movw	r2, #623	; 0x26f
   d54c0:	4631      	mov	r1, r6
   d54c2:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d54c6:	f008 faea 	bl	dda9e <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d54ca:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d54ce:	2300      	movs	r3, #0
   d54d0:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d54d2:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d54d4:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d54d8:	b13b      	cbz	r3, d54ea <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d54da:	2202      	movs	r2, #2
   d54dc:	4639      	mov	r1, r7
   d54de:	4668      	mov	r0, sp
   d54e0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d54e2:	68fb      	ldr	r3, [r7, #12]
   d54e4:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d54e6:	68bb      	ldr	r3, [r7, #8]
   d54e8:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d54ea:	4629      	mov	r1, r5
   d54ec:	4668      	mov	r0, sp
   d54ee:	f7ff ff30 	bl	d5352 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54f2:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d54f4:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d54f8:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54fc:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d54fe:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d5500:	4668      	mov	r0, sp
   d5502:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d5506:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d550a:	9203      	str	r2, [sp, #12]
   d550c:	f7ff fe22 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d5510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d5512:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d5516:	2001      	movs	r0, #1
    event_flags = flags;
   d5518:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d551c:	7320      	strb	r0, [r4, #12]
    return true;
   d551e:	e7bc      	b.n	d549a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d5520:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d5524:	e7d3      	b.n	d54ce <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d5526:	4628      	mov	r0, r5
   d5528:	e7b7      	b.n	d549a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000d552a <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d552a:	4770      	bx	lr

000d552c <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d552c:	4770      	bx	lr

000d552e <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   d552e:	2001      	movs	r0, #1
   d5530:	4770      	bx	lr

000d5532 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d5532:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5534:	bf08      	it	eq
   d5536:	6001      	streq	r1, [r0, #0]
	}
   d5538:	2000      	movs	r0, #0
   d553a:	4770      	bx	lr

000d553c <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d553c:	b510      	push	{r4, lr}
}
   d553e:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d5540:	4604      	mov	r4, r0
}
   d5542:	f007 fd87 	bl	dd054 <_ZdlPvj>
   d5546:	4620      	mov	r0, r4
   d5548:	bd10      	pop	{r4, pc}

000d554a <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d554a:	b510      	push	{r4, lr}
}
   d554c:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d554e:	4604      	mov	r4, r0
}
   d5550:	f007 fd80 	bl	dd054 <_ZdlPvj>
   d5554:	4620      	mov	r0, r4
   d5556:	bd10      	pop	{r4, pc}

000d5558 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d5558:	b510      	push	{r4, lr}
   d555a:	4b05      	ldr	r3, [pc, #20]	; (d5570 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d555c:	4604      	mov	r4, r0
   d555e:	f840 3b1c 	str.w	r3, [r0], #28
   d5562:	f006 ffb9 	bl	dc4d8 <_ZN6StringD1Ev>
   d5566:	1d20      	adds	r0, r4, #4
   d5568:	f006 ffb6 	bl	dc4d8 <_ZN6StringD1Ev>
}
   d556c:	4620      	mov	r0, r4
   d556e:	bd10      	pop	{r4, pc}
   d5570:	000de41c 	.word	0x000de41c

000d5574 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d5574:	b510      	push	{r4, lr}
   d5576:	4604      	mov	r4, r0
}
   d5578:	f7ff ffee 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
   d557c:	4620      	mov	r0, r4
   d557e:	2158      	movs	r1, #88	; 0x58
   d5580:	f007 fd68 	bl	dd054 <_ZdlPvj>
   d5584:	4620      	mov	r0, r4
   d5586:	bd10      	pop	{r4, pc}

000d5588 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d5588:	b510      	push	{r4, lr}
   d558a:	4b04      	ldr	r3, [pc, #16]	; (d559c <_ZN9LocalTimeD1Ev+0x14>)
   d558c:	4604      	mov	r4, r0
   d558e:	f840 3b04 	str.w	r3, [r0], #4
   d5592:	f7ff ffe1 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
   d5596:	4620      	mov	r0, r4
   d5598:	bd10      	pop	{r4, pc}
   d559a:	bf00      	nop
   d559c:	000de3ec 	.word	0x000de3ec

000d55a0 <_ZN9LocalTimeD0Ev>:
   d55a0:	b510      	push	{r4, lr}
   d55a2:	4604      	mov	r4, r0
   d55a4:	f7ff fff0 	bl	d5588 <_ZN9LocalTimeD1Ev>
   d55a8:	4620      	mov	r0, r4
   d55aa:	2160      	movs	r1, #96	; 0x60
   d55ac:	f007 fd52 	bl	dd054 <_ZdlPvj>
   d55b0:	4620      	mov	r0, r4
   d55b2:	bd10      	pop	{r4, pc}

000d55b4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d55b4:	f020 0302 	bic.w	r3, r0, #2
   d55b8:	2b01      	cmp	r3, #1
   d55ba:	d003      	beq.n	d55c4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d55bc:	1f43      	subs	r3, r0, #5
   d55be:	4258      	negs	r0, r3
   d55c0:	4158      	adcs	r0, r3
   d55c2:	4770      	bx	lr
   d55c4:	4618      	mov	r0, r3
   d55c6:	4770      	bx	lr

000d55c8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d55c8:	b108      	cbz	r0, d55ce <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
   d55ca:	f7fe bd68 	b.w	d409e <_ZdlPv>
	  _Tr::deallocate(_M_impl, __p, __n);
      }
   d55ce:	4770      	bx	lr

000d55d0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d55d0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d55d2:	b148      	cbz	r0, d55e8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d55d4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d55d8:	d301      	bcc.n	d55de <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d55da:	f007 fd41 	bl	dd060 <_ZSt17__throw_bad_allocv>
      }
   d55de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d55e2:	0080      	lsls	r0, r0, #2
   d55e4:	f7fe bd57 	b.w	d4096 <_Znwj>
   d55e8:	bd08      	pop	{r3, pc}

000d55ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55ea:	680b      	ldr	r3, [r1, #0]
   d55ec:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d55ee:	684b      	ldr	r3, [r1, #4]
   d55f0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d55f2:	b113      	cbz	r3, d55fa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d55f4:	685a      	ldr	r2, [r3, #4]
   d55f6:	3201      	adds	r2, #1
   d55f8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55fa:	4770      	bx	lr

000d55fc <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d55fc:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d5600:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d5604:	429a      	cmp	r2, r3
   d5606:	db13      	blt.n	d5630 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d5608:	dc10      	bgt.n	d562c <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d560a:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d560e:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d5612:	429a      	cmp	r2, r3
   d5614:	db0c      	blt.n	d5630 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d5616:	dc09      	bgt.n	d562c <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d5618:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d561c:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d5620:	429a      	cmp	r2, r3
   d5622:	db05      	blt.n	d5630 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d5624:	bfcc      	ite	gt
   d5626:	2001      	movgt	r0, #1
   d5628:	2000      	movle	r0, #0
   d562a:	4770      	bx	lr
            return +1;
   d562c:	2001      	movs	r0, #1
   d562e:	4770      	bx	lr
            return -1;
   d5630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d5634:	4770      	bx	lr
	...

000d5638 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d5638:	4a02      	ldr	r2, [pc, #8]	; (d5644 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d563a:	6002      	str	r2, [r0, #0]
   d563c:	684a      	ldr	r2, [r1, #4]
   d563e:	6042      	str	r2, [r0, #4]
   d5640:	4770      	bx	lr
   d5642:	bf00      	nop
   d5644:	000de3fc 	.word	0x000de3fc

000d5648 <_ZN12LocalTimeHMSaSERKS_>:
   d5648:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d564c:	7102      	strb	r2, [r0, #4]
   d564e:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d5652:	7142      	strb	r2, [r0, #5]
   d5654:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d5658:	7182      	strb	r2, [r0, #6]
   d565a:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d565e:	71c2      	strb	r2, [r0, #7]
   d5660:	4770      	bx	lr

000d5662 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d5662:	b538      	push	{r3, r4, r5, lr}
   d5664:	460c      	mov	r4, r1
   d5666:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d5668:	f100 011c 	add.w	r1, r0, #28
   d566c:	4620      	mov	r0, r4
   d566e:	f7ff ffc5 	bl	d55fc <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d5672:	2800      	cmp	r0, #0
   d5674:	db09      	blt.n	d568a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d5676:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d567a:	4620      	mov	r0, r4
   d567c:	f7ff ffbe 	bl	d55fc <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d5680:	2800      	cmp	r0, #0
   d5682:	bfd4      	ite	le
   d5684:	2000      	movle	r0, #0
   d5686:	2001      	movgt	r0, #1
    }
   d5688:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d568a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d568e:	e7fb      	b.n	d5688 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d5690 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d5690:	b538      	push	{r3, r4, r5, lr}
   d5692:	4604      	mov	r4, r0
   d5694:	460d      	mov	r5, r1
   d5696:	3004      	adds	r0, #4
   d5698:	3104      	adds	r1, #4
   d569a:	f006 ffa4 	bl	dc5e6 <_ZN6StringaSERKS_>
   d569e:	f105 0114 	add.w	r1, r5, #20
   d56a2:	f104 0014 	add.w	r0, r4, #20
   d56a6:	f7ff ffcf 	bl	d5648 <_ZN12LocalTimeHMSaSERKS_>
   d56aa:	f105 011c 	add.w	r1, r5, #28
   d56ae:	f104 001c 	add.w	r0, r4, #28
   d56b2:	f006 ff98 	bl	dc5e6 <_ZN6StringaSERKS_>
   d56b6:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d56ba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d56be:	f7ff ffc3 	bl	d5648 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d56c2:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d56c6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d56ca:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d56ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d56d2:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d56d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d56da:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d56de:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d56e2:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d56e6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d56ea:	f7ff ffad 	bl	d5648 <_ZN12LocalTimeHMSaSERKS_>
   d56ee:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d56f2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d56f6:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d56fa:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d56fe:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d5702:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d5706:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d570a:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d570e:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d5712:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d5716:	f7ff ff97 	bl	d5648 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d571a:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d571e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d5722:	4620      	mov	r0, r4
   d5724:	bd38      	pop	{r3, r4, r5, pc}

000d5726 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d5726:	694a      	ldr	r2, [r1, #20]
   d5728:	6803      	ldr	r3, [r0, #0]
   d572a:	f362 0316 	bfi	r3, r2, #0, #23
   d572e:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d5730:	690b      	ldr	r3, [r1, #16]
   d5732:	1c5a      	adds	r2, r3, #1
   d5734:	8843      	ldrh	r3, [r0, #2]
   d5736:	f362 13ca 	bfi	r3, r2, #7, #4
   d573a:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d573c:	68ca      	ldr	r2, [r1, #12]
   d573e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d5742:	f362 03c7 	bfi	r3, r2, #3, #5
   d5746:	70c3      	strb	r3, [r0, #3]
}
   d5748:	4770      	bx	lr

000d574a <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d574a:	b510      	push	{r4, lr}
   d574c:	4604      	mov	r4, r0
   d574e:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d5750:	2224      	movs	r2, #36	; 0x24
   d5752:	2100      	movs	r1, #0
   d5754:	a803      	add	r0, sp, #12
   d5756:	f008 f8e1 	bl	dd91c <memset>
    timeInfo.tm_year = ymd.year;
   d575a:	6823      	ldr	r3, [r4, #0]
   d575c:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5760:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d5762:	8863      	ldrh	r3, [r4, #2]
   d5764:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d5768:	3b01      	subs	r3, #1
   d576a:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d576c:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d576e:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d5770:	08db      	lsrs	r3, r3, #3
   d5772:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d5774:	f004 fe62 	bl	da43c <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d5778:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d577c:	a903      	add	r1, sp, #12
   d577e:	4668      	mov	r0, sp
   d5780:	f004 fe4c 	bl	da41c <localtime_r>
}
   d5784:	9809      	ldr	r0, [sp, #36]	; 0x24
   d5786:	b00c      	add	sp, #48	; 0x30
   d5788:	bd10      	pop	{r4, pc}

000d578a <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d578a:	b530      	push	{r4, r5, lr}
   d578c:	4604      	mov	r4, r0
   d578e:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d5790:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d5792:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d5794:	a803      	add	r0, sp, #12
   d5796:	2100      	movs	r1, #0
   d5798:	f008 f8c0 	bl	dd91c <memset>
    timeInfo.tm_year = ymd.year;
   d579c:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d579e:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d57a0:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d57a4:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d57a6:	8863      	ldrh	r3, [r4, #2]
   d57a8:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d57ac:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d57ae:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d57b2:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d57b4:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d57b6:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d57b8:	f004 fe40 	bl	da43c <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d57bc:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d57c0:	a903      	add	r1, sp, #12
   d57c2:	4668      	mov	r0, sp
   d57c4:	f004 fe2a 	bl	da41c <localtime_r>
    fromTimeInfo(&timeInfo);
   d57c8:	a903      	add	r1, sp, #12
   d57ca:	4620      	mov	r0, r4
   d57cc:	f7ff ffab 	bl	d5726 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d57d0:	b00d      	add	sp, #52	; 0x34
   d57d2:	bd30      	pop	{r4, r5, pc}

000d57d4 <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d57d4:	6803      	ldr	r3, [r0, #0]
   d57d6:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d57da:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d57de:	4293      	cmp	r3, r2
   d57e0:	d313      	bcc.n	d580a <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d57e2:	d810      	bhi.n	d5806 <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d57e4:	8842      	ldrh	r2, [r0, #2]
   d57e6:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d57ea:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d57ee:	429a      	cmp	r2, r3
   d57f0:	d30b      	bcc.n	d580a <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d57f2:	d808      	bhi.n	d5806 <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d57f4:	78c3      	ldrb	r3, [r0, #3]
   d57f6:	08db      	lsrs	r3, r3, #3
   d57f8:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d57fc:	d305      	bcc.n	d580a <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d57fe:	bf8c      	ite	hi
   d5800:	2001      	movhi	r0, #1
   d5802:	2000      	movls	r0, #0
   d5804:	4770      	bx	lr
        cmp = +1;
   d5806:	2001      	movs	r0, #1
   d5808:	4770      	bx	lr
        cmp = -1;
   d580a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d580e:	4770      	bx	lr

000d5810 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d5810:	4a02      	ldr	r2, [pc, #8]	; (d581c <_ZN12LocalTimeHMSC1Ev+0xc>)
   d5812:	6002      	str	r2, [r0, #0]
   d5814:	2200      	movs	r2, #0
   d5816:	6042      	str	r2, [r0, #4]
}
   d5818:	4770      	bx	lr
   d581a:	bf00      	nop
   d581c:	000de3fc 	.word	0x000de3fc

000d5820 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d5820:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d5822:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d5824:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d5826:	8083      	strh	r3, [r0, #4]
   d5828:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d582a:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d582c:	ab05      	add	r3, sp, #20
   d582e:	9300      	str	r3, [sp, #0]
   d5830:	4913      	ldr	r1, [pc, #76]	; (d5880 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d5832:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d5834:	ab04      	add	r3, sp, #16
   d5836:	aa03      	add	r2, sp, #12
   d5838:	4628      	mov	r0, r5
   d583a:	f004 fdaf 	bl	da39c <sscanf>
   d583e:	2803      	cmp	r0, #3
   d5840:	d107      	bne.n	d5852 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d5842:	9b03      	ldr	r3, [sp, #12]
   d5844:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d5846:	9b04      	ldr	r3, [sp, #16]
   d5848:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d584a:	9b05      	ldr	r3, [sp, #20]
   d584c:	71a3      	strb	r3, [r4, #6]
}
   d584e:	b007      	add	sp, #28
   d5850:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d5852:	490c      	ldr	r1, [pc, #48]	; (d5884 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d5854:	ab04      	add	r3, sp, #16
   d5856:	aa03      	add	r2, sp, #12
   d5858:	4628      	mov	r0, r5
   d585a:	f004 fd9f 	bl	da39c <sscanf>
   d585e:	2802      	cmp	r0, #2
   d5860:	d104      	bne.n	d586c <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d5862:	9b03      	ldr	r3, [sp, #12]
   d5864:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d5866:	9b04      	ldr	r3, [sp, #16]
   d5868:	7163      	strb	r3, [r4, #5]
   d586a:	e7f0      	b.n	d584e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d586c:	4906      	ldr	r1, [pc, #24]	; (d5888 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d586e:	aa03      	add	r2, sp, #12
   d5870:	4628      	mov	r0, r5
   d5872:	f004 fd93 	bl	da39c <sscanf>
   d5876:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d5878:	bf04      	itt	eq
   d587a:	9b03      	ldreq	r3, [sp, #12]
   d587c:	7123      	strbeq	r3, [r4, #4]
}
   d587e:	e7e6      	b.n	d584e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d5880:	000de394 	.word	0x000de394
   d5884:	000de397 	.word	0x000de397
   d5888:	000de1c2 	.word	0x000de1c2

000d588c <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d588c:	b510      	push	{r4, lr}
   d588e:	4b04      	ldr	r3, [pc, #16]	; (d58a0 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d5890:	6003      	str	r3, [r0, #0]
   d5892:	2300      	movs	r3, #0
   d5894:	4604      	mov	r4, r0
   d5896:	6043      	str	r3, [r0, #4]
    parse(str);
   d5898:	f7ff ffc2 	bl	d5820 <_ZN12LocalTimeHMS5parseEPKc>
}
   d589c:	4620      	mov	r0, r4
   d589e:	bd10      	pop	{r4, pc}
   d58a0:	000de3fc 	.word	0x000de3fc

000d58a4 <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d58a4:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d58a6:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d58a8:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d58aa:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d58ac:	7003      	strb	r3, [r0, #0]
   d58ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d58b2:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d58b6:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d58ba:	490a      	ldr	r1, [pc, #40]	; (d58e4 <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d58bc:	301c      	adds	r0, #28
   d58be:	f7ff ffe5 	bl	d588c <_ZN12LocalTimeHMSC1EPKc>
   d58c2:	4909      	ldr	r1, [pc, #36]	; (d58e8 <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d58c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d58c8:	f7ff ffe0 	bl	d588c <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d58cc:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d58d0:	4906      	ldr	r1, [pc, #24]	; (d58ec <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d58d2:	6365      	str	r5, [r4, #52]	; 0x34
   d58d4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d58d8:	f006 fe49 	bl	dc56e <_ZN6StringC1EPKc>
   d58dc:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d58de:	4620      	mov	r0, r4
   d58e0:	bd38      	pop	{r3, r4, r5, pc}
   d58e2:	bf00      	nop
   d58e4:	000de39d 	.word	0x000de39d
   d58e8:	000de3a6 	.word	0x000de3a6
   d58ec:	000dedbc 	.word	0x000dedbc

000d58f0 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d58f0:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d58f4:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d58f8:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d58fc:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d58fe:	bfb8      	it	lt
   d5900:	4808      	ldrlt	r0, [pc, #32]	; (d5924 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d5902:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d5906:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d590a:	bfbd      	ittte	lt
   d590c:	fb00 2003 	mlalt	r0, r0, r3, r2
   d5910:	1840      	addlt	r0, r0, r1
   d5912:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d5914:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d5918:	bfa4      	itt	ge
   d591a:	fb00 2303 	mlage	r3, r0, r3, r2
   d591e:	1858      	addge	r0, r3, r1
}
   d5920:	4770      	bx	lr
   d5922:	bf00      	nop
   d5924:	fffff1f0 	.word	0xfffff1f0

000d5928 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d5928:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d592c:	b943      	cbnz	r3, d5940 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d592e:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d5932:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d5934:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d5938:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d593a:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d593e:	600b      	str	r3, [r1, #0]
}
   d5940:	4770      	bx	lr

000d5942 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d5942:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d5946:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d5948:	b9b3      	cbnz	r3, d5978 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d594a:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d594e:	688c      	ldr	r4, [r1, #8]
   d5950:	442c      	add	r4, r5
   d5952:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d5956:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d5958:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d595c:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d595e:	bfb5      	itete	lt
   d5960:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d5962:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d5964:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d5966:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d5968:	bfb5      	itete	lt
   d596a:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d596e:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d5972:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d5974:	189b      	addge	r3, r3, r2
   d5976:	600b      	str	r3, [r1, #0]
}
   d5978:	bd30      	pop	{r4, r5, pc}

000d597a <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d597a:	b538      	push	{r3, r4, r5, lr}
   d597c:	6844      	ldr	r4, [r0, #4]
   d597e:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d5980:	68ab      	ldr	r3, [r5, #8]
   d5982:	42a3      	cmp	r3, r4
   d5984:	d007      	beq.n	d5996 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d5986:	4620      	mov	r0, r4
   d5988:	f7ff ff24 	bl	d57d4 <_ZNK12LocalTimeYMD9compareToES_>
   d598c:	3404      	adds	r4, #4
        if (*it == ymd) {
   d598e:	2800      	cmp	r0, #0
   d5990:	d1f6      	bne.n	d5980 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d5992:	2001      	movs	r0, #1
}
   d5994:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d5996:	2000      	movs	r0, #0
   d5998:	e7fc      	b.n	d5994 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d599a <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d599a:	b538      	push	{r3, r4, r5, lr}
   d599c:	6904      	ldr	r4, [r0, #16]
   d599e:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d59a0:	696b      	ldr	r3, [r5, #20]
   d59a2:	42a3      	cmp	r3, r4
   d59a4:	d007      	beq.n	d59b6 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d59a6:	4620      	mov	r0, r4
   d59a8:	f7ff ff14 	bl	d57d4 <_ZNK12LocalTimeYMD9compareToES_>
   d59ac:	3404      	adds	r4, #4
        if (*it == ymd) {
   d59ae:	2800      	cmp	r0, #0
   d59b0:	d1f6      	bne.n	d59a0 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d59b2:	2001      	movs	r0, #1
}
   d59b4:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d59b6:	2000      	movs	r0, #0
   d59b8:	e7fc      	b.n	d59b4 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d59ba <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d59ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d59bc:	4605      	mov	r5, r0
   d59be:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d59c0:	f7ff ffeb 	bl	d599a <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d59c4:	b990      	cbnz	r0, d59ec <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d59c6:	a801      	add	r0, sp, #4
   d59c8:	9101      	str	r1, [sp, #4]
   d59ca:	f7ff febe 	bl	d574a <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d59ce:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d59d0:	4631      	mov	r1, r6
   d59d2:	fa43 f400 	asr.w	r4, r3, r0
   d59d6:	4628      	mov	r0, r5
   d59d8:	f7ff ffcf 	bl	d597a <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d59dc:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d59e0:	2c00      	cmp	r4, #0
   d59e2:	bf08      	it	eq
   d59e4:	4604      	moveq	r4, r0
}
   d59e6:	4620      	mov	r0, r4
   d59e8:	b002      	add	sp, #8
   d59ea:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d59ec:	2400      	movs	r4, #0
   d59ee:	e7fa      	b.n	d59e6 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d59f0 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d59f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d59f4:	2400      	movs	r4, #0
   d59f6:	6845      	ldr	r5, [r0, #4]
   d59f8:	4680      	mov	r8, r0
   d59fa:	4626      	mov	r6, r4
   d59fc:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d59fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d5a02:	429d      	cmp	r5, r3
   d5a04:	d01e      	beq.n	d5a44 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d5a06:	f367 0916 	bfi	r9, r7, #0, #23
   d5a0a:	f366 59da 	bfi	r9, r6, #23, #4
   d5a0e:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d5a12:	f1b9 0f00 	cmp.w	r9, #0
   d5a16:	d109      	bne.n	d5a2c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d5a18:	682f      	ldr	r7, [r5, #0]
   d5a1a:	886e      	ldrh	r6, [r5, #2]
   d5a1c:	78ec      	ldrb	r4, [r5, #3]
   d5a1e:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d5a22:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d5a26:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d5a28:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d5a2a:	e7e8      	b.n	d59fe <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d5a2c:	f367 0116 	bfi	r1, r7, #0, #23
   d5a30:	f366 51da 	bfi	r1, r6, #23, #4
   d5a34:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d5a38:	4628      	mov	r0, r5
   d5a3a:	f7ff fecb 	bl	d57d4 <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d5a3e:	2800      	cmp	r0, #0
   d5a40:	dcea      	bgt.n	d5a18 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d5a42:	e7f1      	b.n	d5a28 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d5a44:	2000      	movs	r0, #0
   d5a46:	f367 0016 	bfi	r0, r7, #0, #23
   d5a4a:	f366 50da 	bfi	r0, r6, #23, #4
   d5a4e:	f364 60df 	bfi	r0, r4, #27, #5
}
   d5a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d5a58 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d5a58:	4a05      	ldr	r2, [pc, #20]	; (d5a70 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d5a5a:	b508      	push	{r3, lr}
   d5a5c:	6002      	str	r2, [r0, #0]
   d5a5e:	2200      	movs	r2, #0
   d5a60:	4603      	mov	r3, r0
   d5a62:	6042      	str	r2, [r0, #4]
   d5a64:	3008      	adds	r0, #8
   d5a66:	f7ff fed3 	bl	d5810 <_ZN12LocalTimeHMSC1Ev>
}
   d5a6a:	4618      	mov	r0, r3
   d5a6c:	bd08      	pop	{r3, pc}
   d5a6e:	bf00      	nop
   d5a70:	000de40c 	.word	0x000de40c

000d5a74 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d5a74:	2300      	movs	r3, #0
   d5a76:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d5a78:	8183      	strh	r3, [r0, #12]
   d5a7a:	7383      	strb	r3, [r0, #14]
}
   d5a7c:	4770      	bx	lr
	...

000d5a80 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d5a80:	b530      	push	{r4, r5, lr}
   d5a82:	4604      	mov	r4, r0
   d5a84:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d5a86:	460d      	mov	r5, r1
   d5a88:	b111      	cbz	r1, d5a90 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d5a8a:	780b      	ldrb	r3, [r1, #0]
   d5a8c:	2b4d      	cmp	r3, #77	; 0x4d
   d5a8e:	d003      	beq.n	d5a98 <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d5a90:	4620      	mov	r0, r4
   d5a92:	f7ff ffef 	bl	d5a74 <_ZN15LocalTimeChange5clearEv>
   d5a96:	e01b      	b.n	d5ad0 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d5a98:	ab05      	add	r3, sp, #20
   d5a9a:	9300      	str	r3, [sp, #0]
   d5a9c:	490f      	ldr	r1, [pc, #60]	; (d5adc <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d5a9e:	ab04      	add	r3, sp, #16
   d5aa0:	aa03      	add	r2, sp, #12
   d5aa2:	4628      	mov	r0, r5
   d5aa4:	f004 fc7a 	bl	da39c <sscanf>
   d5aa8:	2803      	cmp	r0, #3
   d5aaa:	d1f1      	bne.n	d5a90 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d5aac:	9b03      	ldr	r3, [sp, #12]
   d5aae:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d5ab0:	9b04      	ldr	r3, [sp, #16]
   d5ab2:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d5ab4:	9b05      	ldr	r3, [sp, #20]
   d5ab6:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d5ab8:	212f      	movs	r1, #47	; 0x2f
   d5aba:	4628      	mov	r0, r5
   d5abc:	f007 ff8e 	bl	dd9dc <strchr>
        if (cp) {
   d5ac0:	b140      	cbz	r0, d5ad4 <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d5ac2:	1c41      	adds	r1, r0, #1
   d5ac4:	f104 0008 	add.w	r0, r4, #8
   d5ac8:	f7ff feaa 	bl	d5820 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d5acc:	2301      	movs	r3, #1
   d5ace:	71e3      	strb	r3, [r4, #7]
}
   d5ad0:	b007      	add	sp, #28
   d5ad2:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d5ad4:	81a0      	strh	r0, [r4, #12]
   d5ad6:	73a0      	strb	r0, [r4, #14]
}
   d5ad8:	e7f8      	b.n	d5acc <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d5ada:	bf00      	nop
   d5adc:	000de3af 	.word	0x000de3af

000d5ae0 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d5ae0:	4b10      	ldr	r3, [pc, #64]	; (d5b24 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d5ae2:	4911      	ldr	r1, [pc, #68]	; (d5b28 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d5ae4:	b510      	push	{r4, lr}
   d5ae6:	4604      	mov	r4, r0
   d5ae8:	f840 3b04 	str.w	r3, [r0], #4
   d5aec:	f006 fd3f 	bl	dc56e <_ZN6StringC1EPKc>
   d5af0:	f104 0014 	add.w	r0, r4, #20
   d5af4:	f7ff fe8c 	bl	d5810 <_ZN12LocalTimeHMSC1Ev>
   d5af8:	490b      	ldr	r1, [pc, #44]	; (d5b28 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d5afa:	f104 001c 	add.w	r0, r4, #28
   d5afe:	f006 fd36 	bl	dc56e <_ZN6StringC1EPKc>
   d5b02:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5b06:	f7ff fe83 	bl	d5810 <_ZN12LocalTimeHMSC1Ev>
   d5b0a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5b0e:	f7ff ffa3 	bl	d5a58 <_ZN15LocalTimeChangeC1Ev>
   d5b12:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5b16:	f7ff ff9f 	bl	d5a58 <_ZN15LocalTimeChangeC1Ev>
   d5b1a:	2300      	movs	r3, #0
   d5b1c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d5b20:	4620      	mov	r0, r4
   d5b22:	bd10      	pop	{r4, pc}
   d5b24:	000de41c 	.word	0x000de41c
   d5b28:	000dedbc 	.word	0x000dedbc

000d5b2c <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d5b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b30:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d5b32:	4608      	mov	r0, r1
   d5b34:	f007 ff7c 	bl	dda30 <strdup>
    size_t ii = 0;
   d5b38:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d5b3a:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d5b3c:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d5b3e:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d5b42:	493f      	ldr	r1, [pc, #252]	; (d5c40 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d5b44:	9801      	ldr	r0, [sp, #4]
   d5b46:	aa01      	add	r2, sp, #4
   d5b48:	f007 fff8 	bl	ddb3c <strtok_r>
   d5b4c:	4601      	mov	r1, r0
   d5b4e:	2800      	cmp	r0, #0
   d5b50:	d062      	beq.n	d5c18 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d5b52:	2d01      	cmp	r5, #1
   d5b54:	f105 0301 	add.w	r3, r5, #1
   d5b58:	d053      	beq.n	d5c02 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d5b5a:	2d02      	cmp	r5, #2
   d5b5c:	d056      	beq.n	d5c0c <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d5b5e:	2d00      	cmp	r5, #0
   d5b60:	d146      	bne.n	d5bf0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d5b62:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d5b64:	f892 9000 	ldrb.w	r9, [r2]
   d5b68:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d5b6c:	4615      	mov	r5, r2
   d5b6e:	4617      	mov	r7, r2
   d5b70:	f102 0201 	add.w	r2, r2, #1
   d5b74:	d8f6      	bhi.n	d5b64 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d5b76:	2200      	movs	r2, #0
   d5b78:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d5b7a:	f104 001c 	add.w	r0, r4, #28
   d5b7e:	f006 fd54 	bl	dc62a <_ZN6StringaSEPKc>
                valid = true;
   d5b82:	2201      	movs	r2, #1
                *cp = save2;
   d5b84:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d5b88:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d5b8c:	782a      	ldrb	r2, [r5, #0]
   d5b8e:	b36a      	cbz	r2, d5bec <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d5b90:	f897 a000 	ldrb.w	sl, [r7]
   d5b94:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d5b98:	2a3f      	cmp	r2, #63	; 0x3f
   d5b9a:	46b9      	mov	r9, r7
   d5b9c:	46bb      	mov	fp, r7
   d5b9e:	f107 0701 	add.w	r7, r7, #1
   d5ba2:	d9f5      	bls.n	d5b90 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d5ba4:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d5ba6:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d5baa:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d5bae:	4629      	mov	r1, r5
   d5bb0:	4638      	mov	r0, r7
   d5bb2:	f7ff fe35 	bl	d5820 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d5bb6:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d5bba:	f1ba 0f00 	cmp.w	sl, #0
   d5bbe:	d015      	beq.n	d5bec <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d5bc0:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d5bc2:	f81b ab01 	ldrb.w	sl, [fp], #1
   d5bc6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d5bca:	d8f9      	bhi.n	d5bc0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d5bcc:	2200      	movs	r2, #0
   d5bce:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d5bd0:	4649      	mov	r1, r9
   d5bd2:	1d20      	adds	r0, r4, #4
   d5bd4:	f006 fd29 	bl	dc62a <_ZN6StringaSEPKc>
                        *cp = save2;
   d5bd8:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d5bdc:	f104 0014 	add.w	r0, r4, #20
   d5be0:	f1ba 0f00 	cmp.w	sl, #0
   d5be4:	d006      	beq.n	d5bf4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d5be6:	4629      	mov	r1, r5
   d5be8:	f7ff fe1a 	bl	d5820 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d5bec:	2501      	movs	r5, #1
   d5bee:	e7a8      	b.n	d5b42 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d5bf0:	461d      	mov	r5, r3
   d5bf2:	e7a6      	b.n	d5b42 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d5bf4:	4639      	mov	r1, r7
   d5bf6:	f7ff fd27 	bl	d5648 <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d5bfa:	7e23      	ldrb	r3, [r4, #24]
   d5bfc:	3b01      	subs	r3, #1
   d5bfe:	7623      	strb	r3, [r4, #24]
   d5c00:	e7f4      	b.n	d5bec <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d5c02:	4640      	mov	r0, r8
   d5c04:	f7ff ff3c 	bl	d5a80 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d5c08:	2502      	movs	r5, #2
   d5c0a:	e79a      	b.n	d5b42 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d5c0c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5c10:	f7ff ff36 	bl	d5a80 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d5c14:	2503      	movs	r5, #3
   d5c16:	e794      	b.n	d5b42 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d5c18:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d5c1c:	b143      	cbz	r3, d5c30 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d5c1e:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d5c22:	b92a      	cbnz	r2, d5c30 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d5c24:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5c28:	f7ff ff24 	bl	d5a74 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d5c2c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d5c30:	4630      	mov	r0, r6
   d5c32:	f004 fb9b 	bl	da36c <free>
}
   d5c36:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d5c3a:	b003      	add	sp, #12
   d5c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c40:	000de3b9 	.word	0x000de3b9

000d5c44 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d5c44:	b538      	push	{r3, r4, r5, lr}
   d5c46:	4b13      	ldr	r3, [pc, #76]	; (d5c94 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d5c48:	4604      	mov	r4, r0
   d5c4a:	460d      	mov	r5, r1
   d5c4c:	f840 3b04 	str.w	r3, [r0], #4
   d5c50:	4911      	ldr	r1, [pc, #68]	; (d5c98 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d5c52:	f006 fc8c 	bl	dc56e <_ZN6StringC1EPKc>
   d5c56:	f104 0014 	add.w	r0, r4, #20
   d5c5a:	f7ff fdd9 	bl	d5810 <_ZN12LocalTimeHMSC1Ev>
   d5c5e:	490e      	ldr	r1, [pc, #56]	; (d5c98 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d5c60:	f104 001c 	add.w	r0, r4, #28
   d5c64:	f006 fc83 	bl	dc56e <_ZN6StringC1EPKc>
   d5c68:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5c6c:	f7ff fdd0 	bl	d5810 <_ZN12LocalTimeHMSC1Ev>
   d5c70:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5c74:	f7ff fef0 	bl	d5a58 <_ZN15LocalTimeChangeC1Ev>
   d5c78:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5c7c:	f7ff feec 	bl	d5a58 <_ZN15LocalTimeChangeC1Ev>
   d5c80:	2300      	movs	r3, #0
   d5c82:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d5c86:	4629      	mov	r1, r5
   d5c88:	4620      	mov	r0, r4
   d5c8a:	f7ff ff4f 	bl	d5b2c <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d5c8e:	4620      	mov	r0, r4
   d5c90:	bd38      	pop	{r3, r4, r5, pc}
   d5c92:	bf00      	nop
   d5c94:	000de41c 	.word	0x000de41c
   d5c98:	000dedbc 	.word	0x000dedbc

000d5c9c <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d5ca0:	f7ff fdb6 	bl	d5810 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d5ca4:	688a      	ldr	r2, [r1, #8]
   d5ca6:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d5ca8:	684a      	ldr	r2, [r1, #4]
   d5caa:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d5cac:	680a      	ldr	r2, [r1, #0]
   d5cae:	719a      	strb	r2, [r3, #6]
}
   d5cb0:	4618      	mov	r0, r3
   d5cb2:	bd08      	pop	{r3, pc}

000d5cb4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d5cb4:	b513      	push	{r0, r1, r4, lr}
   d5cb6:	4b07      	ldr	r3, [pc, #28]	; (d5cd4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d5cb8:	6003      	str	r3, [r0, #0]
   d5cba:	2300      	movs	r3, #0
   d5cbc:	4604      	mov	r4, r0
   d5cbe:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d5cc0:	4668      	mov	r0, sp
   d5cc2:	f7ff ffeb 	bl	d5c9c <_ZNK14LocalTimeValue3hmsEv>
   d5cc6:	4669      	mov	r1, sp
   d5cc8:	4620      	mov	r0, r4
   d5cca:	f7ff fcbd 	bl	d5648 <_ZN12LocalTimeHMSaSERKS_>
}
   d5cce:	4620      	mov	r0, r4
   d5cd0:	b002      	add	sp, #8
   d5cd2:	bd10      	pop	{r4, pc}
   d5cd4:	000de3fc 	.word	0x000de3fc

000d5cd8 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d5cd8:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d5cdc:	b943      	cbnz	r3, d5cf0 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d5cde:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d5ce2:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d5ce4:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d5ce8:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d5cea:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d5cee:	6003      	str	r3, [r0, #0]
}
   d5cf0:	4770      	bx	lr

000d5cf2 <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d5cf2:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d5cf4:	2300      	movs	r3, #0
   d5cf6:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d5cf8:	a801      	add	r0, sp, #4
   d5cfa:	9301      	str	r3, [sp, #4]
   d5cfc:	f7ff fd13 	bl	d5726 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d5d00:	9801      	ldr	r0, [sp, #4]
   d5d02:	b003      	add	sp, #12
   d5d04:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d08 <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d5d08:	4b19      	ldr	r3, [pc, #100]	; (d5d70 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d5d0a:	b570      	push	{r4, r5, r6, lr}
   d5d0c:	4604      	mov	r4, r0
   d5d0e:	460d      	mov	r5, r1
   d5d10:	f840 3b04 	str.w	r3, [r0], #4
   d5d14:	3104      	adds	r1, #4
   d5d16:	f006 fc75 	bl	dc604 <_ZN6StringC1ERKS_>
   d5d1a:	f105 0114 	add.w	r1, r5, #20
   d5d1e:	f104 0014 	add.w	r0, r4, #20
   d5d22:	f7ff fc89 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d5d26:	f105 011c 	add.w	r1, r5, #28
   d5d2a:	f104 001c 	add.w	r0, r4, #28
   d5d2e:	f006 fc69 	bl	dc604 <_ZN6StringC1ERKS_>
   d5d32:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d5d36:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5d3a:	f7ff fc7d 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d5d3e:	4e0d      	ldr	r6, [pc, #52]	; (d5d74 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d5d40:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5d42:	63a3      	str	r3, [r4, #56]	; 0x38
   d5d44:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d5d48:	6366      	str	r6, [r4, #52]	; 0x34
   d5d4a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5d4e:	f7ff fc73 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d5d52:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d5d54:	64a3      	str	r3, [r4, #72]	; 0x48
   d5d56:	6466      	str	r6, [r4, #68]	; 0x44
   d5d58:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d5d5c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d5d60:	f7ff fc6a 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d5d64:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d5d68:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	bd70      	pop	{r4, r5, r6, pc}
   d5d70:	000de41c 	.word	0x000de41c
   d5d74:	000de40c 	.word	0x000de40c

000d5d78 <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d5d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d7a:	460c      	mov	r4, r1
   d5d7c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5d80:	4607      	mov	r7, r0
   d5d82:	f840 3b04 	str.w	r3, [r0], #4
   d5d86:	f7ff ffbf 	bl	d5d08 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d5d8a:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d5d8e:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d5d92:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d5d96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5d98:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d5d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5d9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5da2:	6833      	ldr	r3, [r6, #0]
   d5da4:	602b      	str	r3, [r5, #0]
   d5da6:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d5daa:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d5dae:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d5db2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5db4:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d5db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5dba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5dbe:	6833      	ldr	r3, [r6, #0]
   d5dc0:	602b      	str	r3, [r5, #0]
   d5dc2:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d5dc6:	34c8      	adds	r4, #200	; 0xc8
   d5dc8:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d5dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5dce:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d5dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5dd8:	6823      	ldr	r3, [r4, #0]
   d5dda:	602b      	str	r3, [r5, #0]
   d5ddc:	4638      	mov	r0, r7
   d5dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5de0 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d5de0:	b510      	push	{r4, lr}
   d5de2:	4604      	mov	r4, r0
   d5de4:	3038      	adds	r0, #56	; 0x38
   d5de6:	f006 fb77 	bl	dc4d8 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d5dea:	6920      	ldr	r0, [r4, #16]
   d5dec:	f7ff fbec 	bl	d55c8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d5df0:	6860      	ldr	r0, [r4, #4]
   d5df2:	f7ff fbe9 	bl	d55c8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d5df6:	4620      	mov	r0, r4
   d5df8:	bd10      	pop	{r4, pc}

000d5dfa <_ZN16LocalTimeConvert7timeStrEv>:
String LocalTimeConvert::timeStr() {
   d5dfa:	b510      	push	{r4, lr}
   d5dfc:	4604      	mov	r4, r0
   d5dfe:	b088      	sub	sp, #32
   d5e00:	4608      	mov	r0, r1
    asctime_r(&localTimeValue, ascstr);
   d5e02:	3068      	adds	r0, #104	; 0x68
   d5e04:	a901      	add	r1, sp, #4
   d5e06:	f007 fd23 	bl	dd850 <asctime_r>
    int len = strlen(ascstr);
   d5e0a:	a801      	add	r0, sp, #4
   d5e0c:	f007 fe2d 	bl	dda6a <strlen>
    ascstr[len-1] = 0; // remove final newline
   d5e10:	ab08      	add	r3, sp, #32
   d5e12:	4418      	add	r0, r3
   d5e14:	2300      	movs	r3, #0
   d5e16:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   d5e1a:	a901      	add	r1, sp, #4
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	f006 fba6 	bl	dc56e <_ZN6StringC1EPKc>
}
   d5e22:	4620      	mov	r0, r4
   d5e24:	b008      	add	sp, #32
   d5e26:	bd10      	pop	{r4, pc}

000d5e28 <_ZNK16LocalTimeConvert8zoneNameEv>:
String LocalTimeConvert::zoneName() const { 
   d5e28:	b538      	push	{r3, r4, r5, lr}
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   d5e2a:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
   d5e2e:	4605      	mov	r5, r0
   d5e30:	460c      	mov	r4, r1
   d5e32:	b13b      	cbz	r3, d5e44 <_ZNK16LocalTimeConvert8zoneNameEv+0x1c>
   d5e34:	f991 303f 	ldrsb.w	r3, [r1, #63]	; 0x3f
   d5e38:	b953      	cbnz	r3, d5e50 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
   d5e3a:	f101 0030 	add.w	r0, r1, #48	; 0x30
   d5e3e:	f7ff fd57 	bl	d58f0 <_ZNK12LocalTimeHMS9toSecondsEv>
   d5e42:	b928      	cbnz	r0, d5e50 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
        return "Z";
   d5e44:	4909      	ldr	r1, [pc, #36]	; (d5e6c <_ZNK16LocalTimeConvert8zoneNameEv+0x44>)
   d5e46:	4628      	mov	r0, r5
   d5e48:	f006 fb91 	bl	dc56e <_ZN6StringC1EPKc>
};
   d5e4c:	4628      	mov	r0, r5
   d5e4e:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   d5e50:	6820      	ldr	r0, [r4, #0]
   d5e52:	f7ff fbaf 	bl	d55b4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d5e56:	b128      	cbz	r0, d5e64 <_ZNK16LocalTimeConvert8zoneNameEv+0x3c>
        return config.dstName;
   d5e58:	f104 0108 	add.w	r1, r4, #8
        return config.standardName;
   d5e5c:	4628      	mov	r0, r5
   d5e5e:	f006 fbd1 	bl	dc604 <_ZN6StringC1ERKS_>
   d5e62:	e7f3      	b.n	d5e4c <_ZNK16LocalTimeConvert8zoneNameEv+0x24>
   d5e64:	f104 0120 	add.w	r1, r4, #32
   d5e68:	e7f8      	b.n	d5e5c <_ZNK16LocalTimeConvert8zoneNameEv+0x34>
   d5e6a:	bf00      	nop
   d5e6c:	000de3bb 	.word	0x000de3bb

000d5e70 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   d5e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e74:	4680      	mov	r8, r0
   d5e76:	b0a9      	sub	sp, #164	; 0xa4
   d5e78:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d5e7a:	4615      	mov	r5, r2
   d5e7c:	b12a      	cbz	r2, d5e8a <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   d5e7e:	4b4b      	ldr	r3, [pc, #300]	; (d5fac <_ZN16LocalTimeConvert6formatEPKc+0x13c>)
   d5e80:	4610      	mov	r0, r2
   d5e82:	6819      	ldr	r1, [r3, #0]
   d5e84:	f007 fdc1 	bl	dda0a <strcmp>
   d5e88:	b938      	cbnz	r0, d5e9a <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   d5e8a:	4621      	mov	r1, r4
   d5e8c:	4640      	mov	r0, r8
   d5e8e:	f7ff ffb4 	bl	d5dfa <_ZN16LocalTimeConvert7timeStrEv>
}
   d5e92:	4640      	mov	r0, r8
   d5e94:	b029      	add	sp, #164	; 0xa4
   d5e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d5e9a:	4629      	mov	r1, r5
   d5e9c:	223f      	movs	r2, #63	; 0x3f
   d5e9e:	a818      	add	r0, sp, #96	; 0x60
   d5ea0:	f007 fdfd 	bl	dda9e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d5ea4:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d5ea6:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d5ea8:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d5eac:	f007 fddd 	bl	dda6a <strlen>
    String zoneNameStr = zoneName();
   d5eb0:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d5eb2:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   d5eb4:	a803      	add	r0, sp, #12
   d5eb6:	f7ff ffb7 	bl	d5e28 <_ZNK16LocalTimeConvert8zoneNameEv>
   d5eba:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   d5ebe:	b13b      	cbz	r3, d5ed0 <_ZN16LocalTimeConvert6formatEPKc+0x60>
   d5ec0:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d5ec4:	bb83      	cbnz	r3, d5f28 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
   d5ec6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d5eca:	f7ff fd11 	bl	d58f0 <_ZNK12LocalTimeHMS9toSecondsEv>
   d5ece:	bb58      	cbnz	r0, d5f28 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
        strcpy(time_zone_str, "Z");
   d5ed0:	4937      	ldr	r1, [pc, #220]	; (d5fb0 <_ZN16LocalTimeConvert6formatEPKc+0x140>)
   d5ed2:	a807      	add	r0, sp, #28
   d5ed4:	f007 fda3 	bl	dda1e <strcpy>
   d5ed8:	af18      	add	r7, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   d5eda:	2600      	movs	r6, #0
    for (size_t i=0; i<len-1; i++)
   d5edc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   d5ee0:	45b3      	cmp	fp, r6
   d5ee2:	d94e      	bls.n	d5f82 <_ZN16LocalTimeConvert6formatEPKc+0x112>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d5ee4:	46ba      	mov	sl, r7
   d5ee6:	f106 0901 	add.w	r9, r6, #1
   d5eea:	f81a 3b01 	ldrb.w	r3, [sl], #1
   d5eee:	2b25      	cmp	r3, #37	; 0x25
   d5ef0:	d117      	bne.n	d5f22 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
   d5ef2:	787b      	ldrb	r3, [r7, #1]
   d5ef4:	2b7a      	cmp	r3, #122	; 0x7a
   d5ef6:	d136      	bne.n	d5f66 <_ZN16LocalTimeConvert6formatEPKc+0xf6>
            size_t tzlen = strlen(time_zone_str);
   d5ef8:	a807      	add	r0, sp, #28
   d5efa:	f007 fdb6 	bl	dda6a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d5efe:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   d5f00:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d5f02:	1830      	adds	r0, r6, r0
   d5f04:	ebab 0206 	sub.w	r2, fp, r6
   d5f08:	1cb9      	adds	r1, r7, #2
   d5f0a:	4418      	add	r0, r3
   d5f0c:	f007 fcde 	bl	dd8cc <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d5f10:	462a      	mov	r2, r5
   d5f12:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d5f14:	4638      	mov	r0, r7
   d5f16:	f007 fcd9 	bl	dd8cc <memcpy>
            len = strlen(format_str);
   d5f1a:	a818      	add	r0, sp, #96	; 0x60
   d5f1c:	f007 fda5 	bl	dda6a <strlen>
   d5f20:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   d5f22:	4657      	mov	r7, sl
   d5f24:	464e      	mov	r6, r9
   d5f26:	e7d9      	b.n	d5edc <_ZN16LocalTimeConvert6formatEPKc+0x6c>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d5f28:	6820      	ldr	r0, [r4, #0]
   d5f2a:	f7ff fb43 	bl	d55b4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d5f2e:	b1b8      	cbz	r0, d5f60 <_ZN16LocalTimeConvert6formatEPKc+0xf0>
   d5f30:	f104 0018 	add.w	r0, r4, #24
   d5f34:	f7ff fcdc 	bl	d58f0 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   d5f38:	213c      	movs	r1, #60	; 0x3c
   d5f3a:	fb90 f3f1 	sdiv	r3, r0, r1
   d5f3e:	2b00      	cmp	r3, #0
   d5f40:	bfb8      	it	lt
   d5f42:	425b      	neglt	r3, r3
   d5f44:	fbb3 f2f1 	udiv	r2, r3, r1
   d5f48:	fb01 3312 	mls	r3, r1, r2, r3
   d5f4c:	9300      	str	r3, [sp, #0]
   d5f4e:	4a19      	ldr	r2, [pc, #100]	; (d5fb4 <_ZN16LocalTimeConvert6formatEPKc+0x144>)
   d5f50:	4b19      	ldr	r3, [pc, #100]	; (d5fb8 <_ZN16LocalTimeConvert6formatEPKc+0x148>)
   d5f52:	fb90 f3f3 	sdiv	r3, r0, r3
   d5f56:	2110      	movs	r1, #16
   d5f58:	a807      	add	r0, sp, #28
   d5f5a:	f004 fa27 	bl	da3ac <snprintf>
   d5f5e:	e7bb      	b.n	d5ed8 <_ZN16LocalTimeConvert6formatEPKc+0x68>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d5f60:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d5f64:	e7e6      	b.n	d5f34 <_ZN16LocalTimeConvert6formatEPKc+0xc4>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   d5f66:	2b5a      	cmp	r3, #90	; 0x5a
   d5f68:	d1db      	bne.n	d5f22 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
            size_t tzlen = zoneNameStr.length();
   d5f6a:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d5f6c:	ab18      	add	r3, sp, #96	; 0x60
   d5f6e:	1970      	adds	r0, r6, r5
   d5f70:	ebab 0206 	sub.w	r2, fp, r6
   d5f74:	1cb9      	adds	r1, r7, #2
   d5f76:	4418      	add	r0, r3
   d5f78:	f007 fca8 	bl	dd8cc <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d5f7c:	9903      	ldr	r1, [sp, #12]
   d5f7e:	462a      	mov	r2, r5
   d5f80:	e7c8      	b.n	d5f14 <_ZN16LocalTimeConvert6formatEPKc+0xa4>
    char buf[50] = {};
   d5f82:	2100      	movs	r1, #0
   d5f84:	222e      	movs	r2, #46	; 0x2e
   d5f86:	a80c      	add	r0, sp, #48	; 0x30
   d5f88:	910b      	str	r1, [sp, #44]	; 0x2c
   d5f8a:	f007 fcc7 	bl	dd91c <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   d5f8e:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d5f92:	aa18      	add	r2, sp, #96	; 0x60
   d5f94:	2132      	movs	r1, #50	; 0x32
   d5f96:	a80b      	add	r0, sp, #44	; 0x2c
   d5f98:	f004 fa38 	bl	da40c <strftime>
    return String(buf);    
   d5f9c:	a90b      	add	r1, sp, #44	; 0x2c
   d5f9e:	4640      	mov	r0, r8
   d5fa0:	f006 fae5 	bl	dc56e <_ZN6StringC1EPKc>
    String zoneNameStr = zoneName();
   d5fa4:	a803      	add	r0, sp, #12
   d5fa6:	f006 fa97 	bl	dc4d8 <_ZN6StringD1Ev>
   d5faa:	e772      	b.n	d5e92 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   d5fac:	2003dcac 	.word	0x2003dcac
   d5fb0:	000de3bb 	.word	0x000de3bb
   d5fb4:	000de3bd 	.word	0x000de3bd
   d5fb8:	fffff1f0 	.word	0xfffff1f0

000d5fbc <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d5fbc:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d5fbe:	4d09      	ldr	r5, [pc, #36]	; (d5fe4 <_ZN9LocalTime8instanceEv+0x28>)
   d5fc0:	682b      	ldr	r3, [r5, #0]
   d5fc2:	b963      	cbnz	r3, d5fde <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d5fc4:	2060      	movs	r0, #96	; 0x60
   d5fc6:	f7fe f866 	bl	d4096 <_Znwj>
   d5fca:	4604      	mov	r4, r0
   d5fcc:	b130      	cbz	r0, d5fdc <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d5fce:	4b06      	ldr	r3, [pc, #24]	; (d5fe8 <_ZN9LocalTime8instanceEv+0x2c>)
   d5fd0:	f840 3b04 	str.w	r3, [r0], #4
   d5fd4:	f7ff fd84 	bl	d5ae0 <_ZN22LocalTimePosixTimezoneC1Ev>
   d5fd8:	2364      	movs	r3, #100	; 0x64
   d5fda:	65e3      	str	r3, [r4, #92]	; 0x5c
   d5fdc:	602c      	str	r4, [r5, #0]
}
   d5fde:	6828      	ldr	r0, [r5, #0]
   d5fe0:	bd38      	pop	{r3, r4, r5, pc}
   d5fe2:	bf00      	nop
   d5fe4:	2003e26c 	.word	0x2003e26c
   d5fe8:	000de3ec 	.word	0x000de3ec

000d5fec <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d5fec:	f004 ba26 	b.w	da43c <mktime>

000d5ff0 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d5ff0:	3901      	subs	r1, #1
   d5ff2:	290b      	cmp	r1, #11
   d5ff4:	d815      	bhi.n	d6022 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d5ff6:	e8df f001 	tbb	[pc, r1]
   d5ffa:	0816      	.short	0x0816
   d5ffc:	06160616 	.word	0x06160616
   d6000:	16061616 	.word	0x16061616
   d6004:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d6006:	201e      	movs	r0, #30
   d6008:	4770      	bx	lr
            if ((year % 4) == 0) {
   d600a:	0783      	lsls	r3, r0, #30
   d600c:	d10d      	bne.n	d602a <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d600e:	2264      	movs	r2, #100	; 0x64
   d6010:	fb90 f3f2 	sdiv	r3, r0, r2
   d6014:	fb02 0013 	mls	r0, r2, r3, r0
   d6018:	2800      	cmp	r0, #0
                    return 29;
   d601a:	bf0c      	ite	eq
   d601c:	201c      	moveq	r0, #28
   d601e:	201d      	movne	r0, #29
   d6020:	4770      	bx	lr
    return 0;
   d6022:	2000      	movs	r0, #0
   d6024:	4770      	bx	lr
            return 31;
   d6026:	201f      	movs	r0, #31
   d6028:	4770      	bx	lr
                return 28;
   d602a:	201c      	movs	r0, #28
}
   d602c:	4770      	bx	lr

000d602e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d602e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d6030:	2301      	movs	r3, #1
   d6032:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d6034:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6038:	3b01      	subs	r3, #1
   d603a:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d603c:	2300      	movs	r3, #0
   d603e:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d6042:	4606      	mov	r6, r0
   d6044:	460c      	mov	r4, r1
   d6046:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d6048:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d604a:	4620      	mov	r0, r4
   d604c:	f7ff ffce 	bl	d5fec <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d6050:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d6054:	69a2      	ldr	r2, [r4, #24]
   d6056:	429a      	cmp	r2, r3
   d6058:	d003      	beq.n	d6062 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d605a:	68e3      	ldr	r3, [r4, #12]
   d605c:	3301      	adds	r3, #1
   d605e:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d6060:	e7f3      	b.n	d604a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d6062:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d6066:	2d01      	cmp	r5, #1
   d6068:	d013      	beq.n	d6092 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d606a:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d606c:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d606e:	3d01      	subs	r5, #1
   d6070:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d6074:	441d      	add	r5, r3
   d6076:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d6078:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d607c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6080:	f7ff ffb6 	bl	d5ff0 <_ZN9LocalTime14lastDayOfMonthEii>
   d6084:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d6086:	bfc4      	itt	gt
   d6088:	3d07      	subgt	r5, #7
   d608a:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d608c:	4620      	mov	r0, r4
   d608e:	f7ff ffad 	bl	d5fec <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d6092:	4621      	mov	r1, r4
   d6094:	f106 0008 	add.w	r0, r6, #8
   d6098:	f7ff fc46 	bl	d5928 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d609c:	4638      	mov	r0, r7
   d609e:	f7ff fc50 	bl	d5942 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d60a2:	4620      	mov	r0, r4
}
   d60a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d60a8:	f004 b9c8 	b.w	da43c <mktime>

000d60ac <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d60ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d60ae:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d60b2:	b085      	sub	sp, #20
   d60b4:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d60b6:	b92b      	cbnz	r3, d60c4 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d60b8:	f7ff ff80 	bl	d5fbc <_ZN9LocalTime8instanceEv>
   d60bc:	1d01      	adds	r1, r0, #4
   d60be:	1d20      	adds	r0, r4, #4
   d60c0:	f7ff fae6 	bl	d5690 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d60c4:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d60c8:	2b00      	cmp	r3, #0
   d60ca:	d069      	beq.n	d61a0 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d60cc:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d60d0:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d60d4:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d60d6:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d60d8:	a802      	add	r0, sp, #8
   d60da:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d60de:	f004 f99d 	bl	da41c <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d60e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d60e4:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d60e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d60ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d60ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d60ee:	6833      	ldr	r3, [r6, #0]
   d60f0:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d60f2:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d60f6:	a802      	add	r0, sp, #8
   d60f8:	f7ff fa9e 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d60fc:	aa02      	add	r2, sp, #8
   d60fe:	4639      	mov	r1, r7
   d6100:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6104:	f7ff ff93 	bl	d602e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d6108:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d610c:	f104 0118 	add.w	r1, r4, #24
   d6110:	a802      	add	r0, sp, #8
   d6112:	f7ff fa91 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d6116:	aa02      	add	r2, sp, #8
   d6118:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d611c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6120:	f7ff ff85 	bl	d602e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d6124:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6128:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d612a:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d612c:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d612e:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6132:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d6136:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d613a:	da24      	bge.n	d6186 <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d613c:	42b0      	cmp	r0, r6
   d613e:	eb71 0507 	sbcs.w	r5, r1, r7
   d6142:	da19      	bge.n	d6178 <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d6144:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d6146:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d6148:	6820      	ldr	r0, [r4, #0]
   d614a:	f7ff fa33 	bl	d55b4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d614e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d6152:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d6156:	9101      	str	r1, [sp, #4]
   d6158:	bb20      	cbnz	r0, d61a4 <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d615a:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d615e:	f7ff fbc7 	bl	d58f0 <_ZNK12LocalTimeHMS9toSecondsEv>
   d6162:	1a36      	subs	r6, r6, r0
   d6164:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d6168:	9901      	ldr	r1, [sp, #4]
   d616a:	a802      	add	r0, sp, #8
   d616c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6170:	f004 f954 	bl	da41c <localtime_r>
}
   d6174:	b005      	add	sp, #20
   d6176:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d6178:	4290      	cmp	r0, r2
   d617a:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d617e:	bfb4      	ite	lt
   d6180:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d6182:	2302      	movge	r3, #2
   d6184:	e7df      	b.n	d6146 <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d6186:	4290      	cmp	r0, r2
   d6188:	eb71 0303 	sbcs.w	r3, r1, r3
   d618c:	da01      	bge.n	d6192 <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d618e:	2303      	movs	r3, #3
   d6190:	e7d9      	b.n	d6146 <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d6192:	42b0      	cmp	r0, r6
   d6194:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d6198:	bfb4      	ite	lt
   d619a:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d619c:	2305      	movge	r3, #5
   d619e:	e7d2      	b.n	d6146 <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d61a0:	2306      	movs	r3, #6
   d61a2:	e7d0      	b.n	d6146 <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d61a4:	f104 0018 	add.w	r0, r4, #24
   d61a8:	e7d9      	b.n	d615e <_ZN16LocalTimeConvert7convertEv+0xb2>

000d61aa <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d61aa:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d61ae:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d61b0:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d61b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d61b4:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d61b6:	ad01      	add	r5, sp, #4
   d61b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d61ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d61bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d61be:	6823      	ldr	r3, [r4, #0]
   d61c0:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d61c2:	a801      	add	r0, sp, #4
   d61c4:	f004 f93a 	bl	da43c <mktime>
   d61c8:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d61ca:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d61ce:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d61d0:	f7ff fb8e 	bl	d58f0 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d61d4:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d61d8:	eb14 0800 	adds.w	r8, r4, r0
   d61dc:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d61e0:	b31b      	cbz	r3, d622a <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d61e2:	2306      	movs	r3, #6
   d61e4:	a821      	add	r0, sp, #132	; 0x84
   d61e6:	9320      	str	r3, [sp, #128]	; 0x80
   d61e8:	f7ff fc7a 	bl	d5ae0 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d61ec:	4631      	mov	r1, r6
   d61ee:	a80a      	add	r0, sp, #40	; 0x28
   d61f0:	f7ff fd8a 	bl	d5d08 <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d61f4:	a90a      	add	r1, sp, #40	; 0x28
   d61f6:	a821      	add	r0, sp, #132	; 0x84
   d61f8:	f7ff fa4a 	bl	d5690 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d61fc:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d61fe:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d6202:	f7ff ff53 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
   d6206:	a80a      	add	r0, sp, #40	; 0x28
   d6208:	f7ff f9a6 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d620c:	9820      	ldr	r0, [sp, #128]	; 0x80
   d620e:	f7ff f9d1 	bl	d55b4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6212:	b138      	cbz	r0, d6224 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d6214:	f106 0014 	add.w	r0, r6, #20
   d6218:	f7ff fb6a 	bl	d58f0 <_ZNK12LocalTimeHMS9toSecondsEv>
   d621c:	eb14 0800 	adds.w	r8, r4, r0
   d6220:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d6224:	a821      	add	r0, sp, #132	; 0x84
   d6226:	f7ff f997 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d622a:	4640      	mov	r0, r8
   d622c:	4649      	mov	r1, r9
   d622e:	b05c      	add	sp, #368	; 0x170
   d6230:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d6234 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d6234:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d6236:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d623a:	b097      	sub	sp, #92	; 0x5c
   d623c:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d623e:	b9c3      	cbnz	r3, d6272 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d6240:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d6244:	4668      	mov	r0, sp
   d6246:	f7ff f9f7 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d624a:	4669      	mov	r1, sp
   d624c:	4628      	mov	r0, r5
   d624e:	f7ff fd43 	bl	d5cd8 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d6252:	1d21      	adds	r1, r4, #4
   d6254:	4668      	mov	r0, sp
   d6256:	f7ff fd57 	bl	d5d08 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d625a:	4669      	mov	r1, sp
   d625c:	4628      	mov	r0, r5
   d625e:	f7ff ffa4 	bl	d61aa <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d6262:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d6266:	4668      	mov	r0, sp
   d6268:	f7ff f976 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d626c:	4620      	mov	r0, r4
   d626e:	f7ff ff1d 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
}
   d6272:	b017      	add	sp, #92	; 0x5c
   d6274:	bd30      	pop	{r4, r5, pc}
	...

000d6278 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d6278:	b530      	push	{r4, r5, lr}
    time += 86400;
   d627a:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d627e:	4d0b      	ldr	r5, [pc, #44]	; (d62ac <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d6280:	195b      	adds	r3, r3, r5
   d6282:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d6286:	b085      	sub	sp, #20
    time += 86400;
   d6288:	eb45 0202 	adc.w	r2, r5, r2
   d628c:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d6290:	4604      	mov	r4, r0
   d6292:	9101      	str	r1, [sp, #4]
    convert();
   d6294:	f7ff ff0a 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d6298:	9901      	ldr	r1, [sp, #4]
   d629a:	a802      	add	r0, sp, #8
   d629c:	f7ff f9cc 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d62a0:	a902      	add	r1, sp, #8
   d62a2:	4620      	mov	r0, r4
   d62a4:	f7ff ffc6 	bl	d6234 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d62a8:	b005      	add	sp, #20
   d62aa:	bd30      	pop	{r4, r5, pc}
   d62ac:	00015180 	.word	0x00015180

000d62b0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d62b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62b4:	b08a      	sub	sp, #40	; 0x28
   d62b6:	4617      	mov	r7, r2
   d62b8:	4606      	mov	r6, r0
   d62ba:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d62bc:	2224      	movs	r2, #36	; 0x24
   d62be:	2100      	movs	r1, #0
   d62c0:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d62c2:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d62c4:	f007 fb2a 	bl	dd91c <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d62c8:	2f06      	cmp	r7, #6
   d62ca:	d829      	bhi.n	d6320 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d62cc:	4629      	mov	r1, r5
   d62ce:	4630      	mov	r0, r6
   d62d0:	f7ff fe8e 	bl	d5ff0 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d62d4:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d62d6:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d62d8:	dd24      	ble.n	d6324 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d62da:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d62de:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d62e0:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d62e2:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d62e4:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d62e6:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d62e8:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d62ea:	f7ff fe7f 	bl	d5fec <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d62ee:	9a07      	ldr	r2, [sp, #28]
   d62f0:	9b04      	ldr	r3, [sp, #16]
   d62f2:	42ba      	cmp	r2, r7
   d62f4:	d001      	beq.n	d62fa <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d62f6:	3301      	adds	r3, #1
   d62f8:	e7f5      	b.n	d62e6 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d62fa:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d62fc:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d62fe:	4294      	cmp	r4, r2
   d6300:	d106      	bne.n	d6310 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d6302:	b101      	cbz	r1, d6306 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d6304:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d6306:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d6308:	4620      	mov	r0, r4
   d630a:	b00a      	add	sp, #40	; 0x28
   d630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d6310:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d6312:	4543      	cmp	r3, r8
   d6314:	dc04      	bgt.n	d6320 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d6316:	3201      	adds	r2, #1
   d6318:	2a06      	cmp	r2, #6
   d631a:	f04f 0101 	mov.w	r1, #1
   d631e:	d1ee      	bne.n	d62fe <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d6320:	2400      	movs	r4, #0
   d6322:	e7f1      	b.n	d6308 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d6324:	d0f0      	beq.n	d6308 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d6326:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d6328:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d632c:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d6330:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d6332:	a801      	add	r0, sp, #4
   d6334:	f7ff fe5a 	bl	d5fec <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d6338:	9b07      	ldr	r3, [sp, #28]
   d633a:	9904      	ldr	r1, [sp, #16]
   d633c:	42bb      	cmp	r3, r7
   d633e:	d002      	beq.n	d6346 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d6340:	3901      	subs	r1, #1
   d6342:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d6344:	e7f5      	b.n	d6332 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d6346:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d6348:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d634a:	4264      	negs	r4, r4
   d634c:	4294      	cmp	r4, r2
   d634e:	dc03      	bgt.n	d6358 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d6350:	2800      	cmp	r0, #0
   d6352:	d0d8      	beq.n	d6306 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d6354:	9104      	str	r1, [sp, #16]
   d6356:	e7d6      	b.n	d6306 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d6358:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d635a:	2900      	cmp	r1, #0
   d635c:	dde0      	ble.n	d6320 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d635e:	3201      	adds	r2, #1
   d6360:	2a06      	cmp	r2, #6
   d6362:	f04f 0001 	mov.w	r0, #1
   d6366:	d1f1      	bne.n	d634c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d6368:	e7da      	b.n	d6320 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d636c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d636c:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d6370:	b0cd      	sub	sp, #308	; 0x134
   d6372:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d6374:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d6376:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d6378:	f7ff fcfe 	bl	d5d78 <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d637c:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d637e:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d6380:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d6382:	f7ff fb35 	bl	d59f0 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d6386:	bb58      	cbnz	r0, d63e0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d6388:	a82a      	add	r0, sp, #168	; 0xa8
   d638a:	f7ff fcb2 	bl	d5cf2 <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d638e:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d6390:	f7ff fe14 	bl	d5fbc <_ZN9LocalTime8instanceEv>
   d6394:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d6396:	a802      	add	r0, sp, #8
   d6398:	f7ff f9f7 	bl	d578a <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d639c:	f8df a20c 	ldr.w	sl, [pc, #524]	; d65ac <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d63a0:	a82a      	add	r0, sp, #168	; 0xa8
   d63a2:	f7ff fca6 	bl	d5cf2 <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d63a6:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d63a8:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d63aa:	4606      	mov	r6, r0
   d63ac:	a803      	add	r0, sp, #12
   d63ae:	f7ff fa11 	bl	d57d4 <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d63b2:	2800      	cmp	r0, #0
   d63b4:	f300 80f2 	bgt.w	d659c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d63b8:	4631      	mov	r1, r6
   d63ba:	4620      	mov	r0, r4
   d63bc:	f7ff fafd 	bl	d59ba <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d63c0:	4607      	mov	r7, r0
   d63c2:	2800      	cmp	r0, #0
   d63c4:	f000 8094 	beq.w	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d63c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d63ca:	3b01      	subs	r3, #1
   d63cc:	2b04      	cmp	r3, #4
   d63ce:	f200 808f 	bhi.w	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d63d2:	e8df f013 	tbh	[pc, r3, lsl #1]
   d63d6:	0007      	.short	0x0007
   d63d8:	00960007 	.word	0x00960007
   d63dc:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d63e0:	9002      	str	r0, [sp, #8]
   d63e2:	e7db      	b.n	d639c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d63e4:	a92a      	add	r1, sp, #168	; 0xa8
   d63e6:	a807      	add	r0, sp, #28
   d63e8:	f7ff fc58 	bl	d5c9c <_ZNK14LocalTimeValue3hmsEv>
   d63ec:	a907      	add	r1, sp, #28
   d63ee:	4620      	mov	r0, r4
   d63f0:	f7ff f937 	bl	d5662 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d63f4:	2800      	cmp	r0, #0
   d63f6:	da0d      	bge.n	d6414 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d63f8:	f104 011c 	add.w	r1, r4, #28
   d63fc:	a807      	add	r0, sp, #28
   d63fe:	f7ff f91b 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d6402:	a907      	add	r1, sp, #28
   d6404:	a810      	add	r0, sp, #64	; 0x40
   d6406:	f7ff ff15 	bl	d6234 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d640a:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d640e:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d6412:	e094      	b.n	d653e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d6414:	d16c      	bne.n	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d6416:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d6418:	2b01      	cmp	r3, #1
   d641a:	d025      	beq.n	d6468 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d641c:	2b02      	cmp	r3, #2
   d641e:	d167      	bne.n	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d6420:	f104 011c 	add.w	r1, r4, #28
   d6424:	a804      	add	r0, sp, #16
   d6426:	f7ff f907 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d642a:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d642e:	4649      	mov	r1, r9
   d6430:	a804      	add	r0, sp, #16
   d6432:	f7ff f8e3 	bl	d55fc <_ZNK12LocalTimeHMS9compareToERKS_>
   d6436:	2800      	cmp	r0, #0
   d6438:	dc5a      	bgt.n	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d643a:	a904      	add	r1, sp, #16
   d643c:	a807      	add	r0, sp, #28
   d643e:	f7ff f8fb 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d6442:	a907      	add	r1, sp, #28
   d6444:	a810      	add	r0, sp, #64	; 0x40
   d6446:	f7ff fef5 	bl	d6234 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d644a:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d644e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6452:	4290      	cmp	r0, r2
   d6454:	eb71 0303 	sbcs.w	r3, r1, r3
   d6458:	db41      	blt.n	d64de <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d645a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d645e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d6460:	4413      	add	r3, r2
   d6462:	f88d 3014 	strb.w	r3, [sp, #20]
   d6466:	e7e2      	b.n	d642e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d6468:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d646a:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d646e:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d6472:	213c      	movs	r1, #60	; 0x3c
   d6474:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d6476:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d647a:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d647e:	1852      	adds	r2, r2, r1
   d6480:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d6484:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d6486:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d648a:	f7ff fe0f 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d648e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d6492:	a907      	add	r1, sp, #28
   d6494:	a804      	add	r0, sp, #16
   d6496:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d649a:	f003 ffbf 	bl	da41c <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d649e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d64a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d64a2:	1b9b      	subs	r3, r3, r6
   d64a4:	fb93 f2f1 	sdiv	r2, r3, r1
   d64a8:	fb01 3312 	mls	r3, r1, r2, r3
   d64ac:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d64ae:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d64b0:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d64b2:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d64b6:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d64b8:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d64ba:	f003 ffbf 	bl	da43c <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d64be:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d64c2:	a810      	add	r0, sp, #64	; 0x40
   d64c4:	f7ff fdf2 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d64c8:	a92a      	add	r1, sp, #168	; 0xa8
   d64ca:	a804      	add	r0, sp, #16
   d64cc:	f7ff fbf2 	bl	d5cb4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d64d0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d64d4:	a804      	add	r0, sp, #16
   d64d6:	f7ff f891 	bl	d55fc <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d64da:	2800      	cmp	r0, #0
   d64dc:	da08      	bge.n	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d64de:	a82a      	add	r0, sp, #168	; 0xa8
   d64e0:	f7ff fc07 	bl	d5cf2 <_ZNK14LocalTimeValue3ymdEv>
   d64e4:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d64e6:	4620      	mov	r0, r4
   d64e8:	f7ff fa67 	bl	d59ba <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d64ec:	2800      	cmp	r0, #0
   d64ee:	d18c      	bne.n	d640a <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d64f0:	4651      	mov	r1, sl
   d64f2:	a807      	add	r0, sp, #28
   d64f4:	f7ff f9ca 	bl	d588c <_ZN12LocalTimeHMSC1EPKc>
   d64f8:	a907      	add	r1, sp, #28
   d64fa:	a810      	add	r0, sp, #64	; 0x40
   d64fc:	f7ff febc 	bl	d6278 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d6500:	e74e      	b.n	d63a0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d6502:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d6504:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d6506:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d650a:	3101      	adds	r1, #1
   d650c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6510:	f7ff fece 	bl	d62b0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d6514:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d6516:	4298      	cmp	r0, r3
   d6518:	d1ea      	bne.n	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d651a:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d651e:	a807      	add	r0, sp, #28
   d6520:	f7ff f88a 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d6524:	a907      	add	r1, sp, #28
   d6526:	a810      	add	r0, sp, #64	; 0x40
   d6528:	f7ff fe84 	bl	d6234 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d652c:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d6530:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d6534:	4282      	cmp	r2, r0
   d6536:	418b      	sbcs	r3, r1
   d6538:	dada      	bge.n	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d653a:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d653e:	4628      	mov	r0, r5
   d6540:	f7ff fdb4 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d6544:	e02b      	b.n	d659e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d6546:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d6548:	2e00      	cmp	r6, #0
   d654a:	da08      	bge.n	d655e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d654c:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d654e:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d6550:	3101      	adds	r1, #1
   d6552:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6556:	f7ff fd4b 	bl	d5ff0 <_ZN9LocalTime14lastDayOfMonthEii>
   d655a:	4430      	add	r0, r6
   d655c:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d655e:	a82a      	add	r0, sp, #168	; 0xa8
   d6560:	f7ff fbc7 	bl	d5cf2 <_ZNK14LocalTimeValue3ymdEv>
   d6564:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d6568:	d1c2      	bne.n	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d656a:	a92a      	add	r1, sp, #168	; 0xa8
   d656c:	a807      	add	r0, sp, #28
   d656e:	f7ff fb95 	bl	d5c9c <_ZNK14LocalTimeValue3hmsEv>
   d6572:	a907      	add	r1, sp, #28
   d6574:	4620      	mov	r0, r4
   d6576:	f7ff f874 	bl	d5662 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d657a:	2800      	cmp	r0, #0
   d657c:	dcb8      	bgt.n	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d657e:	e7cc      	b.n	d651a <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d6580:	a92a      	add	r1, sp, #168	; 0xa8
   d6582:	a807      	add	r0, sp, #28
   d6584:	f7ff fb8a 	bl	d5c9c <_ZNK14LocalTimeValue3hmsEv>
   d6588:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d658c:	a807      	add	r0, sp, #28
   d658e:	9101      	str	r1, [sp, #4]
   d6590:	f7ff f834 	bl	d55fc <_ZNK12LocalTimeHMS9compareToERKS_>
   d6594:	2800      	cmp	r0, #0
   d6596:	9901      	ldr	r1, [sp, #4]
   d6598:	dcaa      	bgt.n	d64f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d659a:	e7c0      	b.n	d651e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d659c:	2700      	movs	r7, #0
class LocalTimeConvert {
   d659e:	a811      	add	r0, sp, #68	; 0x44
   d65a0:	f7fe ffda 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d65a4:	4638      	mov	r0, r7
   d65a6:	b04d      	add	sp, #308	; 0x134
   d65a8:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d65ac:	000de39d 	.word	0x000de39d

000d65b0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d65b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d65b2:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d65b4:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d65b6:	4668      	mov	r0, sp
   d65b8:	f7ff f817 	bl	d55ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d65bc:	466a      	mov	r2, sp
   d65be:	4629      	mov	r1, r5
   d65c0:	4620      	mov	r0, r4
   d65c2:	f004 fd0f 	bl	dafe4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d65c6:	a801      	add	r0, sp, #4
   d65c8:	f7fd fe9d 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d65cc:	4620      	mov	r0, r4
   d65ce:	b003      	add	sp, #12
   d65d0:	bd30      	pop	{r4, r5, pc}

000d65d2 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d65d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d65d4:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d65d6:	4604      	mov	r4, r0
   d65d8:	4668      	mov	r0, sp
   d65da:	f7ff f806 	bl	d55ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d65de:	466a      	mov	r2, sp
   d65e0:	4629      	mov	r1, r5
   d65e2:	4620      	mov	r0, r4
   d65e4:	f004 fcda 	bl	daf9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d65e8:	a801      	add	r0, sp, #4
   d65ea:	f7fd fe8c 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d65ee:	4620      	mov	r0, r4
   d65f0:	b003      	add	sp, #12
   d65f2:	bd30      	pop	{r4, r5, pc}

000d65f4 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d65f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d65f6:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d65f8:	4604      	mov	r4, r0
   d65fa:	4668      	mov	r0, sp
   d65fc:	f7fe fff5 	bl	d55ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d6600:	466a      	mov	r2, sp
   d6602:	4629      	mov	r1, r5
   d6604:	4620      	mov	r0, r4
   d6606:	f004 fc72 	bl	daeee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d660a:	a801      	add	r0, sp, #4
   d660c:	f7fd fe7b 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6610:	4620      	mov	r0, r4
   d6612:	b003      	add	sp, #12
   d6614:	bd30      	pop	{r4, r5, pc}

000d6616 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */
      vector(const vector& __x)
   d6616:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6618:	e9d1 3600 	ldrd	r3, r6, [r1]
   d661c:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d661e:	2300      	movs	r3, #0
   d6620:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d6624:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6626:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d6628:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d662a:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d662c:	f7fe ffd0 	bl	d55d0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d6630:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d6634:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d6638:	4406      	add	r6, r0
   d663a:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d663c:	462a      	mov	r2, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d663e:	4601      	mov	r1, r0
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d6640:	4293      	cmp	r3, r2
   d6642:	d005      	beq.n	d6650 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d6644:	b109      	cbz	r1, d664a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d6646:	6816      	ldr	r6, [r2, #0]
   d6648:	600e      	str	r6, [r1, #0]
   d664a:	3104      	adds	r1, #4
   d664c:	3204      	adds	r2, #4
   d664e:	e7f7      	b.n	d6640 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d6650:	1b5b      	subs	r3, r3, r5
   d6652:	4418      	add	r0, r3
   d6654:	6060      	str	r0, [r4, #4]
      }
   d6656:	4620      	mov	r0, r4
   d6658:	bd70      	pop	{r4, r5, r6, pc}

000d665a <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d665a:	b538      	push	{r3, r4, r5, lr}
   d665c:	460d      	mov	r5, r1
   d665e:	f811 3b04 	ldrb.w	r3, [r1], #4
   d6662:	4604      	mov	r4, r0
   d6664:	f800 3b04 	strb.w	r3, [r0], #4
   d6668:	f7ff ffd5 	bl	d6616 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d666c:	f105 0110 	add.w	r1, r5, #16
   d6670:	f104 0010 	add.w	r0, r4, #16
   d6674:	f7ff ffcf 	bl	d6616 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d6678:	4620      	mov	r0, r4
   d667a:	bd38      	pop	{r3, r4, r5, pc}

000d667c <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d667c:	b538      	push	{r3, r4, r5, lr}
   d667e:	4604      	mov	r4, r0
   d6680:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6682:	f7ff ffea 	bl	d665a <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d6686:	f105 011c 	add.w	r1, r5, #28
   d668a:	f104 001c 	add.w	r0, r4, #28
   d668e:	f7fe ffd3 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
   d6692:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d6696:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d669a:	f7fe ffcd 	bl	d5638 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d669e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d66a0:	62e3      	str	r3, [r4, #44]	; 0x2c
   d66a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d66a4:	6323      	str	r3, [r4, #48]	; 0x30
   d66a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d66a8:	6363      	str	r3, [r4, #52]	; 0x34
   d66aa:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d66ae:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d66b2:	f005 ffa7 	bl	dc604 <_ZN6StringC1ERKS_>
   d66b6:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d66b8:	64a3      	str	r3, [r4, #72]	; 0x48
   d66ba:	4620      	mov	r0, r4
   d66bc:	bd38      	pop	{r3, r4, r5, pc}

000d66be <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d66be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d66c2:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d66c6:	b0d1      	sub	sp, #324	; 0x144
   d66c8:	4681      	mov	r9, r0
   d66ca:	460c      	mov	r4, r1
   d66cc:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d66ce:	2600      	movs	r6, #0
   d66d0:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d66d2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d66d6:	4543      	cmp	r3, r8
   d66d8:	d029      	beq.n	d672e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d66da:	4641      	mov	r1, r8
   d66dc:	a801      	add	r0, sp, #4
   d66de:	f7ff ffcd 	bl	d667c <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   d66e2:	68ab      	ldr	r3, [r5, #8]
   d66e4:	b90b      	cbnz	r3, d66ea <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d66e6:	f006 fcc1 	bl	dd06c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d66ea:	68eb      	ldr	r3, [r5, #12]
   d66ec:	a901      	add	r1, sp, #4
   d66ee:	4628      	mov	r0, r5
   d66f0:	4798      	blx	r3
        if (filter(item)) {
   d66f2:	b1b0      	cbz	r0, d6722 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d66f4:	4621      	mov	r1, r4
   d66f6:	a814      	add	r0, sp, #80	; 0x50
   d66f8:	f7ff fb3e 	bl	d5d78 <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d66fc:	a914      	add	r1, sp, #80	; 0x50
   d66fe:	a801      	add	r0, sp, #4
   d6700:	f7ff fe34 	bl	d636c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d6704:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d6708:	b110      	cbz	r0, d6710 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d670a:	ea56 0107 	orrs.w	r1, r6, r7
   d670e:	d003      	beq.n	d6718 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d6710:	42b2      	cmp	r2, r6
   d6712:	eb73 0107 	sbcs.w	r1, r3, r7
   d6716:	da01      	bge.n	d671c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d6718:	4616      	mov	r6, r2
   d671a:	461f      	mov	r7, r3
class LocalTimeConvert {
   d671c:	a815      	add	r0, sp, #84	; 0x54
   d671e:	f7fe ff1b 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d6722:	a801      	add	r0, sp, #4
   d6724:	f7ff fb5c 	bl	d5de0 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d6728:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d672c:	e7d1      	b.n	d66d2 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d672e:	ea56 0307 	orrs.w	r3, r6, r7
   d6732:	d008      	beq.n	d6746 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d6734:	4620      	mov	r0, r4
        conv.time = closestTime;
   d6736:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d673a:	f7ff fcb7 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
        return true;
   d673e:	2001      	movs	r0, #1
}
   d6740:	b051      	add	sp, #324	; 0x144
   d6742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d6746:	2000      	movs	r0, #0
   d6748:	e7fa      	b.n	d6740 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d674c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d674c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d674e:	4b08      	ldr	r3, [pc, #32]	; (d6770 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d6750:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d6752:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d6754:	4b07      	ldr	r3, [pc, #28]	; (d6774 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d6756:	9302      	str	r3, [sp, #8]
   d6758:	f7ff ffb1 	bl	d66be <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d675c:	9b02      	ldr	r3, [sp, #8]
   d675e:	4604      	mov	r4, r0
   d6760:	b11b      	cbz	r3, d676a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6762:	4669      	mov	r1, sp
   d6764:	2203      	movs	r2, #3
   d6766:	4608      	mov	r0, r1
   d6768:	4798      	blx	r3
}
   d676a:	4620      	mov	r0, r4
   d676c:	b004      	add	sp, #16
   d676e:	bd10      	pop	{r4, pc}
   d6770:	000d552f 	.word	0x000d552f
   d6774:	000d5533 	.word	0x000d5533

000d6778 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>:
bool LocalTimeSchedule::isScheduledTime(LocalTimeConvert &conv, time_t timeNow) {
   d6778:	b570      	push	{r4, r5, r6, lr}
   d677a:	4604      	mov	r4, r0
   d677c:	460d      	mov	r5, r1
   d677e:	4610      	mov	r0, r2
   d6780:	4619      	mov	r1, r3
    if (nextTime != 0 && nextTime <= timeNow) {
   d6782:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d6786:	ea52 0603 	orrs.w	r6, r2, r3
   d678a:	d013      	beq.n	d67b4 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
   d678c:	4290      	cmp	r0, r2
   d678e:	eb71 0303 	sbcs.w	r3, r1, r3
   d6792:	db0f      	blt.n	d67b4 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
        nextTime = 0;
   d6794:	2200      	movs	r2, #0
   d6796:	2300      	movs	r3, #0
   d6798:	e9c4 2306 	strd	r2, r3, [r4, #24]
        result = true;
   d679c:	2601      	movs	r6, #1
    if (getNextScheduledTime(conv)) {
   d679e:	4629      	mov	r1, r5
   d67a0:	4620      	mov	r0, r4
   d67a2:	f7ff ffd3 	bl	d674c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d67a6:	b118      	cbz	r0, d67b0 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x38>
        nextTime = conv.time;
   d67a8:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d67ac:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
   d67b0:	4630      	mov	r0, r6
   d67b2:	bd70      	pop	{r4, r5, r6, pc}
    bool result = false;
   d67b4:	2600      	movs	r6, #0
   d67b6:	e7f2      	b.n	d679e <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x26>

000d67b8 <_ZN17LocalTimeSchedule15isScheduledTimeEv>:
bool LocalTimeSchedule::isScheduledTime() {
   d67b8:	b530      	push	{r4, r5, lr}
   d67ba:	b0bd      	sub	sp, #244	; 0xf4
   d67bc:	4605      	mov	r5, r0
    if (!Time.isValid()) {
   d67be:	f006 f9b1 	bl	dcb24 <_ZN9TimeClass7isValidEv>
   d67c2:	4604      	mov	r4, r0
   d67c4:	b1c0      	cbz	r0, d67f8 <_ZN17LocalTimeSchedule15isScheduledTimeEv+0x40>
   d67c6:	2306      	movs	r3, #6
   d67c8:	a801      	add	r0, sp, #4
   d67ca:	9300      	str	r3, [sp, #0]
   d67cc:	f7ff f988 	bl	d5ae0 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d67d0:	f006 f9c5 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d67d4:	17c1      	asrs	r1, r0, #31
   d67d6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    conv.withCurrentTime().convert();
   d67da:	4668      	mov	r0, sp
   d67dc:	f7ff fc66 	bl	d60ac <_ZN16LocalTimeConvert7convertEv>
    return isScheduledTime(conv, Time.now());
   d67e0:	f006 f9bd 	bl	dcb5e <_ZN9TimeClass3nowEv>
   d67e4:	4669      	mov	r1, sp
   d67e6:	4602      	mov	r2, r0
   d67e8:	17c3      	asrs	r3, r0, #31
   d67ea:	4628      	mov	r0, r5
   d67ec:	f7ff ffc4 	bl	d6778 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>
   d67f0:	4604      	mov	r4, r0
class LocalTimeConvert {
   d67f2:	a801      	add	r0, sp, #4
   d67f4:	f7fe feb0 	bl	d5558 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d67f8:	4620      	mov	r0, r4
   d67fa:	b03d      	add	sp, #244	; 0xf4
   d67fc:	bd30      	pop	{r4, r5, pc}

000d67fe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   d67fe:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d6800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6804:	4604      	mov	r4, r0
   d6806:	460e      	mov	r6, r1
      if (&__x != this)
   d6808:	d022      	beq.n	d6850 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d680a:	e9d1 5800 	ldrd	r5, r8, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   d680e:	6800      	ldr	r0, [r0, #0]
   d6810:	68a3      	ldr	r3, [r4, #8]
   d6812:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6814:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d6818:	109b      	asrs	r3, r3, #2
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   d681a:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d681e:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d6822:	d218      	bcs.n	d6856 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   d6824:	4608      	mov	r0, r1
   d6826:	f7fe fed3 	bl	d55d0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d682a:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d682c:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d682e:	45a8      	cmp	r8, r5
   d6830:	d005      	beq.n	d683e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d6832:	b10b      	cbz	r3, d6838 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d6834:	682a      	ldr	r2, [r5, #0]
   d6836:	601a      	str	r2, [r3, #0]
   d6838:	3304      	adds	r3, #4
   d683a:	3504      	adds	r5, #4
   d683c:	e7f7      	b.n	d682e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
   d683e:	6820      	ldr	r0, [r4, #0]
   d6840:	f7fe fec2 	bl	d55c8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
   d6844:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d6846:	443e      	add	r6, r7
   d6848:	60a6      	str	r6, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d684a:	6823      	ldr	r3, [r4, #0]
   d684c:	441f      	add	r7, r3
   d684e:	6067      	str	r7, [r4, #4]
	}
      return *this;
    }
   d6850:	4620      	mov	r0, r4
   d6852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6856:	6862      	ldr	r2, [r4, #4]
   d6858:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d685a:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d685e:	d806      	bhi.n	d686e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d6860:	45a8      	cmp	r8, r5
   d6862:	d0f2      	beq.n	d684a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6864:	463a      	mov	r2, r7
   d6866:	4629      	mov	r1, r5
   d6868:	f007 f83e 	bl	dd8e8 <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d686c:	e7ed      	b.n	d684a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d686e:	b112      	cbz	r2, d6876 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6870:	4629      	mov	r1, r5
   d6872:	f007 f839 	bl	dd8e8 <memmove>
   d6876:	e9d4 3200 	ldrd	r3, r2, [r4]
   d687a:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d687c:	6833      	ldr	r3, [r6, #0]
   d687e:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d6880:	6871      	ldr	r1, [r6, #4]
   d6882:	4299      	cmp	r1, r3
   d6884:	d0e1      	beq.n	d684a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d6886:	b10a      	cbz	r2, d688c <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d6888:	6818      	ldr	r0, [r3, #0]
   d688a:	6010      	str	r0, [r2, #0]
   d688c:	3304      	adds	r3, #4
   d688e:	3204      	adds	r2, #4
   d6890:	e7f7      	b.n	d6882 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d6892 <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6892:	b538      	push	{r3, r4, r5, lr}
   d6894:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d6896:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d689a:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d689c:	f800 3b04 	strb.w	r3, [r0], #4
   d68a0:	f7ff ffad 	bl	d67fe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d68a4:	f105 0110 	add.w	r1, r5, #16
   d68a8:	f104 0010 	add.w	r0, r4, #16
   d68ac:	f7ff ffa7 	bl	d67fe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d68b0:	f105 011c 	add.w	r1, r5, #28
   d68b4:	f104 001c 	add.w	r0, r4, #28
   d68b8:	f7fe fec6 	bl	d5648 <_ZN12LocalTimeHMSaSERKS_>
   d68bc:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d68c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d68c4:	f7fe fec0 	bl	d5648 <_ZN12LocalTimeHMSaSERKS_>
   d68c8:	4620      	mov	r0, r4
   d68ca:	bd38      	pop	{r3, r4, r5, pc}

000d68cc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d68cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68d0:	e9d0 6900 	ldrd	r6, r9, [r0]
   d68d4:	4d3b      	ldr	r5, [pc, #236]	; (d69c4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d68d6:	4b3c      	ldr	r3, [pc, #240]	; (d69c8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d68d8:	eba9 0406 	sub.w	r4, r9, r6
   d68dc:	10a4      	asrs	r4, r4, #2
   d68de:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d68e0:	429c      	cmp	r4, r3
   d68e2:	468a      	mov	sl, r1
   d68e4:	4607      	mov	r7, r0
   d68e6:	4611      	mov	r1, r2
   d68e8:	46a8      	mov	r8, r5
   d68ea:	d102      	bne.n	d68f2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d68ec:	4837      	ldr	r0, [pc, #220]	; (d69cc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d68ee:	f006 fbba 	bl	dd066 <_ZSt20__throw_length_errorPKc>
   d68f2:	2c01      	cmp	r4, #1
   d68f4:	4622      	mov	r2, r4
   d68f6:	bf38      	it	cc
   d68f8:	2201      	movcc	r2, #1
   d68fa:	18a4      	adds	r4, r4, r2
   d68fc:	ebaa 0506 	sub.w	r5, sl, r6

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d6900:	d25d      	bcs.n	d69be <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d6902:	b154      	cbz	r4, d691a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d6904:	429c      	cmp	r4, r3
   d6906:	bf28      	it	cs
   d6908:	461c      	movcs	r4, r3
   d690a:	204c      	movs	r0, #76	; 0x4c
   d690c:	4360      	muls	r0, r4
   d690e:	9100      	str	r1, [sp, #0]
   d6910:	f7fd fbc1 	bl	d4096 <_Znwj>
   d6914:	9900      	ldr	r1, [sp, #0]
   d6916:	4683      	mov	fp, r0
   d6918:	e000      	b.n	d691c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d691a:	46a3      	mov	fp, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d691c:	eb1b 0005 	adds.w	r0, fp, r5
   d6920:	d001      	beq.n	d6926 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d6922:	f7ff feab 	bl	d667c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d6926:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6928:	4631      	mov	r1, r6
   d692a:	458a      	cmp	sl, r1
   d692c:	d00a      	beq.n	d6944 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d692e:	b133      	cbz	r3, d693e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d6930:	4618      	mov	r0, r3
   d6932:	9101      	str	r1, [sp, #4]
   d6934:	9300      	str	r3, [sp, #0]
   d6936:	f7ff fea1 	bl	d667c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d693a:	e9dd 3100 	ldrd	r3, r1, [sp]
   d693e:	314c      	adds	r1, #76	; 0x4c
   d6940:	334c      	adds	r3, #76	; 0x4c
   d6942:	e7f2      	b.n	d692a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d6944:	08ad      	lsrs	r5, r5, #2
   d6946:	fb08 fa05 	mul.w	sl, r8, r5
   d694a:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d694e:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d6952:	fb0a fa05 	mul.w	sl, sl, r5
   d6956:	eb06 050a 	add.w	r5, r6, sl
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   d695a:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d695e:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d6960:	4653      	mov	r3, sl
   d6962:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d6964:	4549      	cmp	r1, r9
   d6966:	d113      	bne.n	d6990 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d6968:	eba9 0505 	sub.w	r5, r9, r5
   d696c:	08ad      	lsrs	r5, r5, #2
   d696e:	fb08 f505 	mul.w	r5, r8, r5
   d6972:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d6976:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d697a:	fb08 a505 	mla	r5, r8, r5, sl
   d697e:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d6980:	45c8      	cmp	r8, r9
   d6982:	d00f      	beq.n	d69a4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d6984:	4640      	mov	r0, r8
   d6986:	f7ff fa2b 	bl	d5de0 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d698a:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d698e:	e7f7      	b.n	d6980 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d6990:	4618      	mov	r0, r3
   d6992:	9101      	str	r1, [sp, #4]
   d6994:	9300      	str	r3, [sp, #0]
   d6996:	f7ff fe71 	bl	d667c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d699a:	9901      	ldr	r1, [sp, #4]
   d699c:	9b00      	ldr	r3, [sp, #0]
   d699e:	314c      	adds	r1, #76	; 0x4c
   d69a0:	334c      	adds	r3, #76	; 0x4c
   d69a2:	e7df      	b.n	d6964 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d69a4:	b116      	cbz	r6, d69ac <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d69a6:	4630      	mov	r0, r6
   d69a8:	f7fd fb79 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d69ac:	204c      	movs	r0, #76	; 0x4c
   d69ae:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d69b2:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d69b6:	60bc      	str	r4, [r7, #8]
    }
   d69b8:	b003      	add	sp, #12
   d69ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d69be:	461c      	mov	r4, r3
   d69c0:	e7a3      	b.n	d690a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d69c2:	bf00      	nop
   d69c4:	286bca1b 	.word	0x286bca1b
   d69c8:	01af286b 	.word	0x01af286b
   d69cc:	000de3c8 	.word	0x000de3c8

000d69d0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d69d0:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d69d2:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d69d6:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d69d8:	4604      	mov	r4, r0
   d69da:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d69dc:	d007      	beq.n	d69ee <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d69de:	b113      	cbz	r3, d69e6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d69e0:	4618      	mov	r0, r3
   d69e2:	f7ff fe4b 	bl	d667c <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d69e6:	6863      	ldr	r3, [r4, #4]
   d69e8:	334c      	adds	r3, #76	; 0x4c
   d69ea:	6063      	str	r3, [r4, #4]
      }
   d69ec:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d69ee:	4619      	mov	r1, r3
   d69f0:	f7ff ff6c 	bl	d68cc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d69f4:	e7fa      	b.n	d69ec <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d69f6 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d69f6:	b530      	push	{r4, r5, lr}
   d69f8:	b097      	sub	sp, #92	; 0x5c
   d69fa:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d69fc:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d69fe:	9201      	str	r2, [sp, #4]
   d6a00:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d6a02:	f7fe ff4f 	bl	d58a4 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d6a06:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d6a08:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d6a0a:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d6a0c:	a803      	add	r0, sp, #12
    item.increment = increment;
   d6a0e:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d6a10:	f7ff ff3f 	bl	d6892 <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d6a14:	a903      	add	r1, sp, #12
   d6a16:	f104 0020 	add.w	r0, r4, #32
   d6a1a:	f7ff ffd9 	bl	d69d0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d6a1e:	a803      	add	r0, sp, #12
   d6a20:	f7ff f9de 	bl	d5de0 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d6a24:	4620      	mov	r0, r4
   d6a26:	b017      	add	sp, #92	; 0x5c
   d6a28:	bd30      	pop	{r4, r5, pc}

000d6a2a <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d6a2a:	6803      	ldr	r3, [r0, #0]
   d6a2c:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d6a2e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d6a32:	2101      	movs	r1, #1
   d6a34:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d6a38:	4770      	bx	lr

000d6a3a <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d6a3a:	2a02      	cmp	r2, #2
   d6a3c:	d006      	beq.n	d6a4c <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d6a3e:	2a03      	cmp	r2, #3
   d6a40:	d002      	beq.n	d6a48 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d6a42:	2a01      	cmp	r2, #1
   d6a44:	d100      	bne.n	d6a48 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6a46:	6001      	str	r1, [r0, #0]
	}
   d6a48:	2000      	movs	r0, #0
   d6a4a:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6a4c:	680b      	ldr	r3, [r1, #0]
   d6a4e:	6003      	str	r3, [r0, #0]
	}
   d6a50:	e7fa      	b.n	d6a48 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d6a52 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6a52:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6a54:	4603      	mov	r3, r0
	switch (__op)
   d6a56:	d102      	bne.n	d6a5e <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6a58:	6001      	str	r1, [r0, #0]
      }
   d6a5a:	2000      	movs	r0, #0
   d6a5c:	4770      	bx	lr
	  switch (__op)
   d6a5e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6a60:	bf04      	itt	eq
   d6a62:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6a66:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d6a6a:	e7f6      	b.n	d6a5a <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d6a6c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6a6c:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6a6e:	6842      	ldr	r2, [r0, #4]
   d6a70:	4603      	mov	r3, r0
   d6a72:	1054      	asrs	r4, r2, #1
   d6a74:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6a78:	07d2      	lsls	r2, r2, #31
   d6a7a:	bf48      	it	mi
   d6a7c:	590a      	ldrmi	r2, [r1, r4]
   d6a7e:	681b      	ldr	r3, [r3, #0]
      }
   d6a80:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6a84:	bf48      	it	mi
   d6a86:	58d3      	ldrmi	r3, [r2, r3]
   d6a88:	4718      	bx	r3

000d6a8a <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d6a8a:	b40e      	push	{r1, r2, r3}
   d6a8c:	b510      	push	{r4, lr}
   d6a8e:	b08d      	sub	sp, #52	; 0x34
   d6a90:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d6a92:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d6a94:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d6a98:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d6a9a:	2300      	movs	r3, #0
   d6a9c:	2020      	movs	r0, #32
   d6a9e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d6aa2:	e9cd 4200 	strd	r4, r2, [sp]
   d6aa6:	2001      	movs	r0, #1
   d6aa8:	aa04      	add	r2, sp, #16
   d6aaa:	f003 fb0f 	bl	da0cc <log_message_v>
}
   d6aae:	b00d      	add	sp, #52	; 0x34
   d6ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6ab4:	b003      	add	sp, #12
   d6ab6:	4770      	bx	lr

000d6ab8 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d6ab8:	b40e      	push	{r1, r2, r3}
   d6aba:	b510      	push	{r4, lr}
   d6abc:	b08d      	sub	sp, #52	; 0x34
   d6abe:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d6ac0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d6ac2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d6ac6:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d6ac8:	2300      	movs	r3, #0
   d6aca:	2020      	movs	r0, #32
   d6acc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d6ad0:	e9cd 4200 	strd	r4, r2, [sp]
   d6ad4:	2032      	movs	r0, #50	; 0x32
   d6ad6:	aa04      	add	r2, sp, #16
   d6ad8:	f003 faf8 	bl	da0cc <log_message_v>
}
   d6adc:	b00d      	add	sp, #52	; 0x34
   d6ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6ae2:	b003      	add	sp, #12
   d6ae4:	4770      	bx	lr

000d6ae6 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d6ae6:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d6aea:	4601      	mov	r1, r0
    if (stateHandler) {
   d6aec:	b11b      	cbz	r3, d6af6 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6aee:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d6af2:	30c0      	adds	r0, #192	; 0xc0
   d6af4:	4718      	bx	r3
}
   d6af6:	4770      	bx	lr

000d6af8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d6af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d6afa:	4d12      	ldr	r5, [pc, #72]	; (d6b44 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d6afc:	4608      	mov	r0, r1
        eventData = "";
   d6afe:	2a00      	cmp	r2, #0
   d6b00:	bf18      	it	ne
   d6b02:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d6b04:	460f      	mov	r7, r1
   d6b06:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d6b08:	f006 ffaf 	bl	dda6a <strlen>
   d6b0c:	2840      	cmp	r0, #64	; 0x40
   d6b0e:	d817      	bhi.n	d6b40 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d6b10:	4628      	mov	r0, r5
   d6b12:	f006 ffaa 	bl	dda6a <strlen>
   d6b16:	f240 236e 	movw	r3, #622	; 0x26e
   d6b1a:	4298      	cmp	r0, r3
   d6b1c:	d810      	bhi.n	d6b40 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d6b1e:	3043      	adds	r0, #67	; 0x43
   d6b20:	f7fd fabb 	bl	d409a <_Znaj>
    if (event) {
   d6b24:	4604      	mov	r4, r0
   d6b26:	b148      	cbz	r0, d6b3c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d6b28:	4639      	mov	r1, r7
        event->flags = flags;
   d6b2a:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d6b2e:	f006 ff76 	bl	dda1e <strcpy>
        strcpy(event->eventData, eventData);
   d6b32:	4629      	mov	r1, r5
   d6b34:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d6b38:	f006 ff71 	bl	dda1e <strcpy>
}
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d6b40:	2400      	movs	r4, #0
   d6b42:	e7fb      	b.n	d6b3c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d6b44:	000dedbc 	.word	0x000dedbc

000d6b48 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d6b48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b4a:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d6b4c:	460a      	mov	r2, r1
   d6b4e:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d6b50:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d6b52:	1d01      	adds	r1, r0, #4
   d6b54:	a808      	add	r0, sp, #32
   d6b56:	f002 f833 	bl	d8bc0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d6b5a:	9808      	ldr	r0, [sp, #32]
   d6b5c:	2100      	movs	r1, #0
   d6b5e:	f007 f88f 	bl	ddc80 <open>
   d6b62:	4605      	mov	r5, r0
   d6b64:	a808      	add	r0, sp, #32
   d6b66:	f005 fcb7 	bl	dc4d8 <_ZN6StringD1Ev>
    if (fd) {
   d6b6a:	2d00      	cmp	r5, #0
   d6b6c:	d060      	beq.n	d6c30 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d6b6e:	a908      	add	r1, sp, #32
   d6b70:	4628      	mov	r0, r5
   d6b72:	f007 f873 	bl	ddc5c <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d6b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6b78:	492e      	ldr	r1, [pc, #184]	; (d6c34 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d6b7a:	482f      	ldr	r0, [pc, #188]	; (d6c38 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d6b7c:	4632      	mov	r2, r6
   d6b7e:	f7ff ff84 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d6b82:	2200      	movs	r2, #0
   d6b84:	4611      	mov	r1, r2
   d6b86:	4628      	mov	r0, r5
   d6b88:	f007 f870 	bl	ddc6c <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d6b8c:	2208      	movs	r2, #8
   d6b8e:	a906      	add	r1, sp, #24
   d6b90:	4628      	mov	r0, r5
   d6b92:	f007 f889 	bl	ddca8 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d6b96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d6b98:	2f4a      	cmp	r7, #74	; 0x4a
   d6b9a:	dd39      	ble.n	d6c10 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d6b9c:	4b27      	ldr	r3, [pc, #156]	; (d6c3c <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d6b9e:	9a06      	ldr	r2, [sp, #24]
   d6ba0:	429a      	cmp	r2, r3
   d6ba2:	d135      	bne.n	d6c10 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d6ba4:	4b26      	ldr	r3, [pc, #152]	; (d6c40 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d6ba6:	9a07      	ldr	r2, [sp, #28]
   d6ba8:	429a      	cmp	r2, r3
   d6baa:	d131      	bne.n	d6c10 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d6bac:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d6bb0:	4610      	mov	r0, r2
   d6bb2:	9205      	str	r2, [sp, #20]
   d6bb4:	f7fd fa71 	bl	d409a <_Znaj>
            if (result) {
   d6bb8:	4604      	mov	r4, r0
   d6bba:	b1c0      	cbz	r0, d6bee <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d6bbc:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d6bbe:	4601      	mov	r1, r0
   d6bc0:	9a05      	ldr	r2, [sp, #20]
   d6bc2:	4628      	mov	r0, r5
   d6bc4:	f007 f870 	bl	ddca8 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d6bc8:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d6bcc:	b9ab      	cbnz	r3, d6bfa <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d6bce:	1c63      	adds	r3, r4, #1
   d6bd0:	4618      	mov	r0, r3
   d6bd2:	9305      	str	r3, [sp, #20]
   d6bd4:	f006 ff49 	bl	dda6a <strlen>
   d6bd8:	283f      	cmp	r0, #63	; 0x3f
   d6bda:	9b05      	ldr	r3, [sp, #20]
   d6bdc:	d80d      	bhi.n	d6bfa <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d6bde:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d6be2:	9200      	str	r2, [sp, #0]
   d6be4:	4917      	ldr	r1, [pc, #92]	; (d6c44 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d6be6:	4814      	ldr	r0, [pc, #80]	; (d6c38 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d6be8:	4632      	mov	r2, r6
   d6bea:	f7ff ff4e 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d6bee:	4628      	mov	r0, r5
   d6bf0:	f007 f82c 	bl	ddc4c <close>
}
   d6bf4:	4620      	mov	r0, r4
   d6bf6:	b01f      	add	sp, #124	; 0x7c
   d6bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d6bfa:	4913      	ldr	r1, [pc, #76]	; (d6c48 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d6bfc:	480e      	ldr	r0, [pc, #56]	; (d6c38 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d6bfe:	4632      	mov	r2, r6
   d6c00:	f7ff ff43 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d6c04:	2143      	movs	r1, #67	; 0x43
   d6c06:	4620      	mov	r0, r4
   d6c08:	f006 fa24 	bl	dd054 <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d6c0c:	2400      	movs	r4, #0
   d6c0e:	e7ee      	b.n	d6bee <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d6c10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d6c14:	9302      	str	r3, [sp, #8]
   d6c16:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d6c1a:	9301      	str	r3, [sp, #4]
   d6c1c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d6c20:	9300      	str	r3, [sp, #0]
   d6c22:	490a      	ldr	r1, [pc, #40]	; (d6c4c <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d6c24:	9b06      	ldr	r3, [sp, #24]
   d6c26:	4804      	ldr	r0, [pc, #16]	; (d6c38 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d6c28:	4632      	mov	r2, r6
   d6c2a:	f7ff ff2e 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
   d6c2e:	e7ed      	b.n	d6c0c <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d6c30:	462c      	mov	r4, r5
    return result;
   d6c32:	e7df      	b.n	d6bf4 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d6c34:	000de424 	.word	0x000de424
   d6c38:	2003e270 	.word	0x2003e270
   d6c3c:	31b67663 	.word	0x31b67663
   d6c40:	00410801 	.word	0x00410801
   d6c44:	000de438 	.word	0x000de438
   d6c48:	000de45a 	.word	0x000de45a
   d6c4c:	000de488 	.word	0x000de488

000d6c50 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d6c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6c54:	4680      	mov	r8, r0
   d6c56:	4b28      	ldr	r3, [pc, #160]	; (d6cf8 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   d6c58:	f848 3b04 	str.w	r3, [r8], #4
   d6c5c:	4604      	mov	r4, r0
   d6c5e:	4640      	mov	r0, r8
   d6c60:	f001 fec6 	bl	d89f0 <_ZN14SequentialFileC1Ev>
   d6c64:	2202      	movs	r2, #2
   d6c66:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d6c68:	2500      	movs	r5, #0
   d6c6a:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d6c6e:	2308      	movs	r3, #8
   d6c70:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d6c72:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d6c76:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d6c7a:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d6c7e:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d6c82:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6c84:	2020      	movs	r0, #32
   d6c86:	f7fd fa06 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d6c8a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d6c8c:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d6c8e:	3e01      	subs	r6, #1
   d6c90:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d6c92:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d6c96:	4607      	mov	r7, r0
   d6c98:	f44f 7000 	mov.w	r0, #512	; 0x200
   d6c9c:	f7fd f9fb 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d6ca0:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d6ca4:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d6ca8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6cac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6cb4:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d6cb8:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d6cbc:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d6cc0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d6cc4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d6cc8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d6ccc:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d6cd0:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d6cd4:	4909      	ldr	r1, [pc, #36]	; (d6cfc <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   d6cd6:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d6cda:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d6cde:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   d6ce2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d6ce6:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d6cea:	4640      	mov	r0, r8
   d6cec:	f001 fec6 	bl	d8a7c <_ZN14SequentialFile11withDirPathEPKc>
}
   d6cf0:	4620      	mov	r0, r4
   d6cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6cf6:	bf00      	nop
   d6cf8:	000de6a4 	.word	0x000de6a4
   d6cfc:	000de4cd 	.word	0x000de4cd

000d6d00 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d6d00:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d6d02:	4c06      	ldr	r4, [pc, #24]	; (d6d1c <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d6d04:	6823      	ldr	r3, [r4, #0]
   d6d06:	b93b      	cbnz	r3, d6d18 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d6d08:	20d0      	movs	r0, #208	; 0xd0
   d6d0a:	f7fd f9c4 	bl	d4096 <_Znwj>
   d6d0e:	4605      	mov	r5, r0
   d6d10:	b108      	cbz	r0, d6d16 <_ZN17PublishQueuePosix8instanceEv+0x16>
   d6d12:	f7ff ff9d 	bl	d6c50 <_ZN17PublishQueuePosixC1Ev>
   d6d16:	6025      	str	r5, [r4, #0]
}
   d6d18:	6820      	ldr	r0, [r4, #0]
   d6d1a:	bd38      	pop	{r3, r4, r5, pc}
   d6d1c:	2003e274 	.word	0x2003e274

000d6d20 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6d20:	b510      	push	{r4, lr}
   d6d22:	e9d1 2300 	ldrd	r2, r3, [r1]
   d6d26:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d6d28:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d6d2a:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6d2c:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d6d2e:	b90a      	cbnz	r2, d6d34 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d6d30:	07d9      	lsls	r1, r3, #31
   d6d32:	d505      	bpl.n	d6d40 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6d34:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6d38:	4b0f      	ldr	r3, [pc, #60]	; (d6d78 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d6d3a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d6d3c:	4b0f      	ldr	r3, [pc, #60]	; (d6d7c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d6d3e:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d40:	ab02      	add	r3, sp, #8
   d6d42:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6d46:	466a      	mov	r2, sp
   d6d48:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6d4c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6d50:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6d54:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d58:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d5a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6d5e:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d60:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d62:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6d64:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d6d66:	4618      	mov	r0, r3
   d6d68:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d6a:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6d6c:	9105      	str	r1, [sp, #20]
   d6d6e:	f7fe f9f1 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
	}
   d6d72:	4620      	mov	r0, r4
   d6d74:	b006      	add	sp, #24
   d6d76:	bd10      	pop	{r4, pc}
   d6d78:	000d6a6d 	.word	0x000d6a6d
   d6d7c:	000d6a53 	.word	0x000d6a53

000d6d80 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6d80:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d6d82:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d6d84:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d6d86:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d6d88:	f002 ff58 	bl	d9c3c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6d8c:	4620      	mov	r0, r4
   d6d8e:	bd10      	pop	{r4, pc}

000d6d90 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d6d90:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d6d92:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d6d94:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d6d96:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d6d98:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d6d9a:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d6d9c:	d002      	beq.n	d6da4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d6d9e:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d6da0:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d6da2:	bd10      	pop	{r4, pc}
	::operator delete(__p);
   d6da4:	68c0      	ldr	r0, [r0, #12]
   d6da6:	f7fd f97a 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d6daa:	6963      	ldr	r3, [r4, #20]
   d6dac:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d6dae:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d6db0:	685b      	ldr	r3, [r3, #4]
   d6db2:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d6db4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d6db8:	6122      	str	r2, [r4, #16]
   d6dba:	e7f1      	b.n	d6da0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d6dbc <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d6dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6dc0:	b087      	sub	sp, #28
   d6dc2:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6dc4:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d6dc6:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d6dc8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d6e74 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d6dcc:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d6e78 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d6dd0:	f002 ff2c 	bl	d9c2c <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d6dd4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d6e7c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d6dd8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d6ddc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d6de0:	4293      	cmp	r3, r2
   d6de2:	d105      	bne.n	d6df0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d6de4:	a801      	add	r0, sp, #4
   d6de6:	f7ff ffcb 	bl	d6d80 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d6dea:	b007      	add	sp, #28
   d6dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d6df0:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d6df4:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d6df8:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d6dfa:	f7ff ffc9 	bl	d6d90 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d6dfe:	4640      	mov	r0, r8
   d6e00:	f002 f8d2 	bl	d8fa8 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d6e04:	2300      	movs	r3, #0
   d6e06:	4602      	mov	r2, r0
   d6e08:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d6e0a:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d6e0c:	a802      	add	r0, sp, #8
   d6e0e:	f001 fed7 	bl	d8bc0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d6e12:	9802      	ldr	r0, [sp, #8]
   d6e14:	f240 2102 	movw	r1, #514	; 0x202
   d6e18:	f006 ff32 	bl	ddc80 <open>
   d6e1c:	4605      	mov	r5, r0
   d6e1e:	a802      	add	r0, sp, #8
   d6e20:	f005 fb5a 	bl	dc4d8 <_ZN6StringD1Ev>
            if (fd) {
   d6e24:	b1cd      	cbz	r5, d6e5a <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d6e26:	2208      	movs	r2, #8
   d6e28:	eb0d 0102 	add.w	r1, sp, r2
   d6e2c:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d6e2e:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d6e32:	f006 ff4b 	bl	ddccc <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d6e36:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d6e3a:	f006 fe16 	bl	dda6a <strlen>
   d6e3e:	4639      	mov	r1, r7
   d6e40:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d6e44:	4628      	mov	r0, r5
   d6e46:	f006 ff41 	bl	ddccc <write>
                close(fd);
   d6e4a:	4628      	mov	r0, r5
   d6e4c:	f006 fefe 	bl	ddc4c <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d6e50:	4807      	ldr	r0, [pc, #28]	; (d6e70 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d6e52:	4632      	mov	r2, r6
   d6e54:	4659      	mov	r1, fp
   d6e56:	f7ff fe18 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d6e5a:	4631      	mov	r1, r6
   d6e5c:	4640      	mov	r0, r8
   d6e5e:	f002 f8e3 	bl	d9028 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d6e62:	2f00      	cmp	r7, #0
   d6e64:	d0b8      	beq.n	d6dd8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d6e66:	2143      	movs	r1, #67	; 0x43
   d6e68:	4638      	mov	r0, r7
   d6e6a:	f006 f8f3 	bl	dd054 <_ZdlPvj>
   d6e6e:	e7b1      	b.n	d6dd4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d6e70:	2003e270 	.word	0x2003e270
   d6e74:	31b67663 	.word	0x31b67663
   d6e78:	00410801 	.word	0x00410801
   d6e7c:	000de4db 	.word	0x000de4db

000d6e80 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d6e80:	2900      	cmp	r1, #0
   d6e82:	bf08      	it	eq
   d6e84:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d6e88:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d6e8a:	d005      	beq.n	d6e98 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d6e8c:	2900      	cmp	r1, #0
   d6e8e:	bf08      	it	eq
   d6e90:	2840      	cmpeq	r0, #64	; 0x40
   d6e92:	d10b      	bne.n	d6eac <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d6e94:	2a09      	cmp	r2, #9
   d6e96:	d109      	bne.n	d6eac <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d6e98:	4905      	ldr	r1, [pc, #20]	; (d6eb0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d6e9a:	4806      	ldr	r0, [pc, #24]	; (d6eb4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d6e9c:	f7ff fdf5 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d6ea0:	f7ff ff2e 	bl	d6d00 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d6ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d6ea8:	f7ff bf88 	b.w	d6dbc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d6eac:	bd38      	pop	{r3, r4, r5, pc}
   d6eae:	bf00      	nop
   d6eb0:	000de4f8 	.word	0x000de4f8
   d6eb4:	2003e270 	.word	0x2003e270

000d6eb8 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d6eb8:	b570      	push	{r4, r5, r6, lr}
   d6eba:	b086      	sub	sp, #24
   d6ebc:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6ebe:	f003 f9ad 	bl	da21c <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d6ec2:	b948      	cbnz	r0, d6ed8 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d6ec4:	4b43      	ldr	r3, [pc, #268]	; (d6fd4 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   d6ec6:	a902      	add	r1, sp, #8
   d6ec8:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d6ecc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d6ed0:	f7ff ff26 	bl	d6d20 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6ed4:	b006      	add	sp, #24
   d6ed6:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   d6ed8:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   d6edc:	b11d      	cbz	r5, d6ee6 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   d6ede:	2301      	movs	r3, #1
   d6ee0:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   d6ee4:	e7f6      	b.n	d6ed4 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d6ee6:	f002 fed1 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d6eea:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d6eee:	1ac0      	subs	r0, r0, r3
   d6ef0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d6ef4:	4298      	cmp	r0, r3
   d6ef6:	d3ed      	bcc.n	d6ed4 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d6ef8:	1d26      	adds	r6, r4, #4
   d6efa:	4629      	mov	r1, r5
   d6efc:	4630      	mov	r0, r6
   d6efe:	f002 f85f 	bl	d8fc0 <_ZN14SequentialFile16getFileFromQueueEb>
   d6f02:	4601      	mov	r1, r0
   d6f04:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d6f08:	2800      	cmp	r0, #0
   d6f0a:	d052      	beq.n	d6fb2 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   d6f0c:	4620      	mov	r0, r4
   d6f0e:	f7ff fe1b 	bl	d6b48 <_ZN17PublishQueuePosix13readQueueFileEi>
   d6f12:	4605      	mov	r5, r0
   d6f14:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d6f18:	2800      	cmp	r0, #0
   d6f1a:	d035      	beq.n	d6f88 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   d6f1c:	f002 feb6 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d6f20:	ae02      	add	r6, sp, #8
   d6f22:	2500      	movs	r5, #0
   d6f24:	4b2c      	ldr	r3, [pc, #176]	; (d6fd8 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   d6f26:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d6f2a:	4631      	mov	r1, r6
   d6f2c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d6f30:	9302      	str	r3, [sp, #8]
   d6f32:	9503      	str	r5, [sp, #12]
   d6f34:	f7ff fef4 	bl	d6d20 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d6f38:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d6f3c:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d6f40:	9200      	str	r2, [sp, #0]
   d6f42:	4926      	ldr	r1, [pc, #152]	; (d6fdc <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d6f44:	4a26      	ldr	r2, [pc, #152]	; (d6fe0 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   d6f46:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d6f4a:	42a8      	cmp	r0, r5
   d6f4c:	bf08      	it	eq
   d6f4e:	460a      	moveq	r2, r1
   d6f50:	3301      	adds	r3, #1
   d6f52:	4924      	ldr	r1, [pc, #144]	; (d6fe4 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   d6f54:	4824      	ldr	r0, [pc, #144]	; (d6fe8 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   d6f56:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d6f5a:	f7ff fd96 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d6f5e:	f7fe f93d 	bl	d51dc <_ZN19BackgroundPublishRK8instanceEv>
   d6f62:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d6f66:	4b21      	ldr	r3, [pc, #132]	; (d6fec <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   d6f68:	9305      	str	r3, [sp, #20]
   d6f6a:	e9cd 6500 	strd	r6, r5, [sp]
   d6f6e:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d6f70:	4b1f      	ldr	r3, [pc, #124]	; (d6ff0 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6f72:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d6f74:	9304      	str	r3, [sp, #16]
   d6f76:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6f7a:	3242      	adds	r2, #66	; 0x42
   d6f7c:	f7fe fa78 	bl	d5470 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d6f80:	4630      	mov	r0, r6
   d6f82:	f7fe f8e7 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
   d6f86:	e7a5      	b.n	d6ed4 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d6f88:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d6f8c:	4919      	ldr	r1, [pc, #100]	; (d6ff4 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   d6f8e:	4816      	ldr	r0, [pc, #88]	; (d6fe8 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d6f90:	f7fd f950 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d6f94:	2101      	movs	r1, #1
   d6f96:	4630      	mov	r0, r6
   d6f98:	f002 f812 	bl	d8fc0 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d6f9c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d6fa0:	462a      	mov	r2, r5
   d6fa2:	4630      	mov	r0, r6
   d6fa4:	f001 fe48 	bl	d8c38 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d6fa8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d6fac:	2b00      	cmp	r3, #0
   d6fae:	d1b5      	bne.n	d6f1c <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   d6fb0:	e795      	b.n	d6ede <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d6fb2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d6fb6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d6fba:	429a      	cmp	r2, r3
   d6fbc:	d007      	beq.n	d6fce <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   d6fbe:	681b      	ldr	r3, [r3, #0]
   d6fc0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d6fc4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d6fc8:	f7ff fee2 	bl	d6d90 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d6fcc:	e7ec      	b.n	d6fa8 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   d6fce:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d6fd2:	e784      	b.n	d6ede <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d6fd4:	000d7059 	.word	0x000d7059
   d6fd8:	000d73b1 	.word	0x000d73b1
   d6fdc:	000de527 	.word	0x000de527
   d6fe0:	000dea2c 	.word	0x000dea2c
   d6fe4:	000de548 	.word	0x000de548
   d6fe8:	2003e270 	.word	0x2003e270
   d6fec:	000d6a2b 	.word	0x000d6a2b
   d6ff0:	000d6a3b 	.word	0x000d6a3b
   d6ff4:	000de52b 	.word	0x000de52b

000d6ff8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d6ff8:	68c3      	ldr	r3, [r0, #12]
   d6ffa:	68ca      	ldr	r2, [r1, #12]
   d6ffc:	1a9b      	subs	r3, r3, r2
   d6ffe:	109b      	asrs	r3, r3, #2
   d7000:	1e5a      	subs	r2, r3, #1
   d7002:	e9d0 3000 	ldrd	r3, r0, [r0]
   d7006:	1a1b      	subs	r3, r3, r0
   d7008:	109b      	asrs	r3, r3, #2
   d700a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d700e:	6888      	ldr	r0, [r1, #8]
   d7010:	680a      	ldr	r2, [r1, #0]
   d7012:	1a80      	subs	r0, r0, r2
    }
   d7014:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d7018:	4770      	bx	lr

000d701a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   d701a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d701c:	4605      	mov	r5, r0
   d701e:	9001      	str	r0, [sp, #4]
   d7020:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d7022:	f002 fe03 	bl	d9c2c <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d7026:	f105 0180 	add.w	r1, r5, #128	; 0x80
   d702a:	f105 0090 	add.w	r0, r5, #144	; 0x90
   d702e:	f7ff ffe3 	bl	d6ff8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (result == 0) {
   d7032:	4604      	mov	r4, r0
   d7034:	b950      	cbnz	r0, d704c <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
            result = fileQueue.getQueueLen();
   d7036:	1d28      	adds	r0, r5, #4
   d7038:	f002 f810 	bl	d905c <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   d703c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   d7040:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   d7042:	b11b      	cbz	r3, d704c <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
   d7044:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d7048:	b903      	cbnz	r3, d704c <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
                result++;
   d704a:	3401      	adds	r4, #1
    WITH_LOCK(*this) {
   d704c:	a801      	add	r0, sp, #4
   d704e:	f7ff fe97 	bl	d6d80 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d7052:	4620      	mov	r0, r4
   d7054:	b003      	add	sp, #12
   d7056:	bd30      	pop	{r4, r5, pc}

000d7058 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d7058:	b513      	push	{r0, r1, r4, lr}
   d705a:	4604      	mov	r4, r0
   d705c:	f003 f8de 	bl	da21c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d7060:	b190      	cbz	r0, d7088 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   d7062:	f002 fe13 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d7066:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d706a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d706e:	4b0d      	ldr	r3, [pc, #52]	; (d70a4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   d7070:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d7074:	9300      	str	r3, [sp, #0]
   d7076:	4669      	mov	r1, sp
   d7078:	2300      	movs	r3, #0
   d707a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d707e:	9301      	str	r3, [sp, #4]
   d7080:	f7ff fe4e 	bl	d6d20 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7084:	b002      	add	sp, #8
   d7086:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   d7088:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   d708c:	b11b      	cbz	r3, d7096 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   d708e:	2301      	movs	r3, #1
   d7090:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   d7094:	e7f6      	b.n	d7084 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   d7096:	4620      	mov	r0, r4
   d7098:	f7ff ffbf 	bl	d701a <_ZN17PublishQueuePosix12getNumEventsEv>
   d709c:	2800      	cmp	r0, #0
   d709e:	d0f6      	beq.n	d708e <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   d70a0:	e7f0      	b.n	d7084 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d70a2:	bf00      	nop
   d70a4:	000d6eb9 	.word	0x000d6eb9

000d70a8 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d70a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d70ac:	4604      	mov	r4, r0
   d70ae:	9001      	str	r0, [sp, #4]
   d70b0:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d70b2:	f002 fdbb 	bl	d9c2c <os_mutex_recursive_lock>
   d70b6:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d70ba:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d70be:	f7ff ff9b 	bl	d6ff8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d70c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d70c4:	4283      	cmp	r3, r0
   d70c6:	d202      	bcs.n	d70ce <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d70c8:	4620      	mov	r0, r4
   d70ca:	f7ff fe77 	bl	d6dbc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d70ce:	f8df 8048 	ldr.w	r8, [pc, #72]	; d7118 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d70d2:	4f10      	ldr	r7, [pc, #64]	; (d7114 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d70d4:	1d26      	adds	r6, r4, #4
   d70d6:	4630      	mov	r0, r6
   d70d8:	f001 ffc0 	bl	d905c <_ZNK14SequentialFile11getQueueLenEv>
   d70dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d70de:	4298      	cmp	r0, r3
   d70e0:	dc05      	bgt.n	d70ee <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d70e2:	a801      	add	r0, sp, #4
   d70e4:	f7ff fe4c 	bl	d6d80 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d70e8:	b002      	add	sp, #8
   d70ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d70ee:	2101      	movs	r1, #1
   d70f0:	4630      	mov	r0, r6
   d70f2:	f001 ff65 	bl	d8fc0 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d70f6:	4605      	mov	r5, r0
   d70f8:	2800      	cmp	r0, #0
   d70fa:	d0ec      	beq.n	d70d6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d70fc:	4601      	mov	r1, r0
   d70fe:	2200      	movs	r2, #0
   d7100:	4630      	mov	r0, r6
   d7102:	f001 fd99 	bl	d8c38 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d7106:	462a      	mov	r2, r5
   d7108:	4641      	mov	r1, r8
   d710a:	4638      	mov	r0, r7
   d710c:	f7fd f892 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d7110:	e7e1      	b.n	d70d6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d7112:	bf00      	nop
   d7114:	2003e270 	.word	0x2003e270
   d7118:	000de567 	.word	0x000de567

000d711c <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d711c:	b513      	push	{r0, r1, r4, lr}
   d711e:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d7120:	2000      	movs	r0, #0
   d7122:	f003 f82d 	bl	da180 <system_thread_get_state>
   d7126:	2801      	cmp	r0, #1
   d7128:	d005      	beq.n	d7136 <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d712a:	4912      	ldr	r1, [pc, #72]	; (d7174 <_ZN17PublishQueuePosix5setupEv+0x58>)
   d712c:	4812      	ldr	r0, [pc, #72]	; (d7178 <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d712e:	f7ff fcc3 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
}
   d7132:	b002      	add	sp, #8
   d7134:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d7136:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d713a:	f002 fd67 	bl	d9c0c <os_mutex_recursive_create>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d713e:	4a0f      	ldr	r2, [pc, #60]	; (d717c <_ZN17PublishQueuePosix5setupEv+0x60>)
   d7140:	2300      	movs	r3, #0
   d7142:	2100      	movs	r1, #0
   d7144:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d7148:	f002 fffa 	bl	da140 <system_subscribe_event>
    BackgroundPublishRK::instance().start();
   d714c:	f7fe f846 	bl	d51dc <_ZN19BackgroundPublishRK8instanceEv>
   d7150:	f7fe f968 	bl	d5424 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   d7154:	1d20      	adds	r0, r4, #4
   d7156:	f001 feaf 	bl	d8eb8 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d715a:	4620      	mov	r0, r4
   d715c:	f7ff ffa4 	bl	d70a8 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d7160:	4b07      	ldr	r3, [pc, #28]	; (d7180 <_ZN17PublishQueuePosix5setupEv+0x64>)
   d7162:	9300      	str	r3, [sp, #0]
   d7164:	4669      	mov	r1, sp
   d7166:	2300      	movs	r3, #0
   d7168:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d716c:	9301      	str	r3, [sp, #4]
   d716e:	f7ff fdd7 	bl	d6d20 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7172:	e7de      	b.n	d7132 <_ZN17PublishQueuePosix5setupEv+0x16>
   d7174:	000de57a 	.word	0x000de57a
   d7178:	2003e270 	.word	0x2003e270
   d717c:	000d6e81 	.word	0x000d6e81
   d7180:	000d7059 	.word	0x000d7059

000d7184 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d7184:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d7186:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d7188:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d718a:	b163      	cbz	r3, d71a6 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d718c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d718e:	6945      	ldr	r5, [r0, #20]
   d7190:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d7192:	42ae      	cmp	r6, r5
   d7194:	d904      	bls.n	d71a0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d7196:	f855 0b04 	ldr.w	r0, [r5], #4
   d719a:	f7fc ff80 	bl	d409e <_ZdlPv>
   d719e:	e7f8      	b.n	d7192 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d71a0:	6820      	ldr	r0, [r4, #0]
   d71a2:	f7fc ff7c 	bl	d409e <_ZdlPv>
    }
   d71a6:	4620      	mov	r0, r4
   d71a8:	bd70      	pop	{r4, r5, r6, pc}

000d71aa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d71aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d71ae:	4606      	mov	r6, r0
   d71b0:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d71b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d71b4:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d71b6:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d71b8:	1a47      	subs	r7, r0, r1
   d71ba:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d71be:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d71c0:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d71c4:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d71c6:	d927      	bls.n	d7218 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d71c8:	1b5d      	subs	r5, r3, r5
   d71ca:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d71cc:	6832      	ldr	r2, [r6, #0]
   d71ce:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d71d0:	b10c      	cbz	r4, d71d6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d71d2:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d71d6:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d71d8:	4414      	add	r4, r2
   d71da:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d71dc:	42a1      	cmp	r1, r4
   d71de:	eba3 0201 	sub.w	r2, r3, r1
   d71e2:	d913      	bls.n	d720c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   d71e4:	4299      	cmp	r1, r3
   d71e6:	d002      	beq.n	d71ee <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d71e8:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d71ea:	f006 fb7d 	bl	dd8e8 <memmove>
	_M_node = __new_node;
   d71ee:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d71f0:	6823      	ldr	r3, [r4, #0]
   d71f2:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d71f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d71f8:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d71fa:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d71fc:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d71fe:	59e3      	ldr	r3, [r4, r7]
   d7200:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7202:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d7206:	6233      	str	r3, [r6, #32]
    }
   d7208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d720c:	4299      	cmp	r1, r3
   d720e:	d0ee      	beq.n	d71ee <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d7210:	1d38      	adds	r0, r7, #4
   d7212:	1a80      	subs	r0, r0, r2
   d7214:	4420      	add	r0, r4
   d7216:	e7e8      	b.n	d71ea <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d7218:	f103 0802 	add.w	r8, r3, #2
   d721c:	454b      	cmp	r3, r9
   d721e:	bf2c      	ite	cs
   d7220:	4498      	addcs	r8, r3
   d7222:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d7224:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d7228:	d301      	bcc.n	d722e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d722a:	f005 ff19 	bl	dd060 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d722e:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d7232:	f7fc ff30 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d7236:	eba8 0505 	sub.w	r5, r8, r5
   d723a:	086d      	lsrs	r5, r5, #1
   d723c:	4682      	mov	sl, r0
   d723e:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d7240:	b10c      	cbz	r4, d7246 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d7242:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d7246:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d7248:	6971      	ldr	r1, [r6, #20]
   d724a:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d724c:	442c      	add	r4, r5
	  if (_Num)
   d724e:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d7250:	4454      	add	r4, sl
   d7252:	d003      	beq.n	d725c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7254:	1a52      	subs	r2, r2, r1
   d7256:	4620      	mov	r0, r4
   d7258:	f006 fb46 	bl	dd8e8 <memmove>
	::operator delete(__p);
   d725c:	6830      	ldr	r0, [r6, #0]
   d725e:	f7fc ff1e 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d7262:	e9c6 a800 	strd	sl, r8, [r6]
   d7266:	e7c2      	b.n	d71ee <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d7268 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d726c:	b086      	sub	sp, #24
   d726e:	4604      	mov	r4, r0
   d7270:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d7274:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d7278:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d727a:	460f      	mov	r7, r1
   d727c:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d727e:	f7ff fc3b 	bl	d6af8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d7282:	4605      	mov	r5, r0
   d7284:	2800      	cmp	r0, #0
   d7286:	d042      	beq.n	d730e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d7288:	4b43      	ldr	r3, [pc, #268]	; (d7398 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d728a:	4944      	ldr	r1, [pc, #272]	; (d739c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d728c:	4844      	ldr	r0, [pc, #272]	; (d73a0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d728e:	2e00      	cmp	r6, #0
   d7290:	bf18      	it	ne
   d7292:	4633      	movne	r3, r6
   d7294:	463a      	mov	r2, r7
   d7296:	f7ff fbf8 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
   d729a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d729c:	9405      	str	r4, [sp, #20]
   d729e:	f002 fcc5 	bl	d9c2c <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d72a2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d72a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d72aa:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d72ac:	4293      	cmp	r3, r2
   d72ae:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d72b2:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d72b6:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d72ba:	d02b      	beq.n	d7314 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d72bc:	b103      	cbz	r3, d72c0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d72be:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d72c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d72c4:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d72c6:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d72c8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d72cc:	4628      	mov	r0, r5
   d72ce:	f001 fec5 	bl	d905c <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d72d2:	4639      	mov	r1, r7
   d72d4:	9003      	str	r0, [sp, #12]
   d72d6:	4630      	mov	r0, r6
   d72d8:	f7ff fe8e 	bl	d6ff8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d72dc:	9002      	str	r0, [sp, #8]
   d72de:	f002 ff9d 	bl	da21c <spark_cloud_flag_connected>
   d72e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d72e6:	9000      	str	r0, [sp, #0]
   d72e8:	492e      	ldr	r1, [pc, #184]	; (d73a4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d72ea:	482d      	ldr	r0, [pc, #180]	; (d73a0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d72ec:	f7ff fbcd 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d72f0:	4628      	mov	r0, r5
   d72f2:	f001 feb3 	bl	d905c <_ZNK14SequentialFile11getQueueLenEv>
   d72f6:	2800      	cmp	r0, #0
   d72f8:	d03e      	beq.n	d7378 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d72fa:	4620      	mov	r0, r4
   d72fc:	f7ff fd5e 	bl	d6dbc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d7300:	4620      	mov	r0, r4
   d7302:	f7ff fed1 	bl	d70a8 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d7306:	a805      	add	r0, sp, #20
   d7308:	f7ff fd3a 	bl	d6d80 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d730c:	2001      	movs	r0, #1
}
   d730e:	b006      	add	sp, #24
   d7310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7314:	4639      	mov	r1, r7
   d7316:	4630      	mov	r0, r6
   d7318:	f7ff fe6e 	bl	d6ff8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d731c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d7320:	4298      	cmp	r0, r3
   d7322:	d102      	bne.n	d732a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d7324:	4820      	ldr	r0, [pc, #128]	; (d73a8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d7326:	f005 fe9e 	bl	dd066 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d732a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d732e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d7330:	1a9a      	subs	r2, r3, r2
   d7332:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d7334:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d7338:	2b01      	cmp	r3, #1
   d733a:	d804      	bhi.n	d7346 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d733c:	2200      	movs	r2, #0
   d733e:	2101      	movs	r1, #1
   d7340:	4640      	mov	r0, r8
   d7342:	f7ff ff32 	bl	d71aa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7346:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d734a:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d734e:	f7fc fea2 	bl	d4096 <_Znwj>
   d7352:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d7356:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d735a:	b103      	cbz	r3, d735e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d735c:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d735e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d7362:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d7364:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d7368:	685b      	ldr	r3, [r3, #4]
   d736a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d736e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d7372:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d7376:	e7a6      	b.n	d72c6 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d7378:	4639      	mov	r1, r7
   d737a:	4630      	mov	r0, r6
   d737c:	f7ff fe3c 	bl	d6ff8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d7380:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d7382:	4283      	cmp	r3, r0
   d7384:	d3b9      	bcc.n	d72fa <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d7386:	f002 ff49 	bl	da21c <spark_cloud_flag_connected>
   d738a:	2800      	cmp	r0, #0
   d738c:	d0b5      	beq.n	d72fa <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d738e:	4907      	ldr	r1, [pc, #28]	; (d73ac <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d7390:	4803      	ldr	r0, [pc, #12]	; (d73a0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d7392:	f7ff fb7a 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
   d7396:	e7b3      	b.n	d7300 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d7398:	000dedbc 	.word	0x000dedbc
   d739c:	000de59d 	.word	0x000de59d
   d73a0:	2003e270 	.word	0x2003e270
   d73a4:	000de5f5 	.word	0x000de5f5
   d73a8:	000de5c5 	.word	0x000de5c5
   d73ac:	000de621 	.word	0x000de621

000d73b0 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d73b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d73b2:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d73b6:	4604      	mov	r4, r0
    if (!publishComplete) {
   d73b8:	2b00      	cmp	r3, #0
   d73ba:	d041      	beq.n	d7440 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d73bc:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d73c0:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d73c4:	2b00      	cmp	r3, #0
   d73c6:	d03d      	beq.n	d7444 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d73c8:	4952      	ldr	r1, [pc, #328]	; (d7514 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d73ca:	4853      	ldr	r0, [pc, #332]	; (d7518 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d73cc:	f7ff fb5d 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d73d0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d73d4:	b1d3      	cbz	r3, d740c <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d73d6:	1d26      	adds	r6, r4, #4
   d73d8:	2100      	movs	r1, #0
   d73da:	4630      	mov	r0, r6
   d73dc:	f001 fdf0 	bl	d8fc0 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d73e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d73e4:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d73e6:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d73e8:	d10d      	bne.n	d7406 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d73ea:	2101      	movs	r1, #1
   d73ec:	4630      	mov	r0, r6
   d73ee:	f001 fde7 	bl	d8fc0 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d73f2:	2200      	movs	r2, #0
   d73f4:	4629      	mov	r1, r5
   d73f6:	4630      	mov	r0, r6
   d73f8:	f001 fc1e 	bl	d8c38 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d73fc:	4947      	ldr	r1, [pc, #284]	; (d751c <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d73fe:	4846      	ldr	r0, [pc, #280]	; (d7518 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d7400:	462a      	mov	r2, r5
   d7402:	f7ff fb42 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d7406:	2300      	movs	r3, #0
   d7408:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d740c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d7410:	b110      	cbz	r0, d7418 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d7412:	2143      	movs	r1, #67	; 0x43
   d7414:	f005 fe1e 	bl	dd054 <_ZdlPvj>
        curEvent = NULL;
   d7418:	2300      	movs	r3, #0
   d741a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d741e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d7422:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d7426:	4b3e      	ldr	r3, [pc, #248]	; (d7520 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d7428:	9300      	str	r3, [sp, #0]
   d742a:	4669      	mov	r1, sp
   d742c:	2300      	movs	r3, #0
   d742e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d7432:	9301      	str	r3, [sp, #4]
   d7434:	f7ff fc74 	bl	d6d20 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7438:	f002 fc28 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d743c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d7440:	b002      	add	sp, #8
   d7442:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d7444:	4937      	ldr	r1, [pc, #220]	; (d7524 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d7446:	4834      	ldr	r0, [pc, #208]	; (d7518 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d7448:	f7ff fb1f 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d744c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d7450:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d7454:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d7458:	b14b      	cbz	r3, d746e <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d745a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d745e:	b110      	cbz	r0, d7466 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d7460:	2143      	movs	r1, #67	; 0x43
   d7462:	f005 fdf7 	bl	dd054 <_ZdlPvj>
            curEvent = NULL;
   d7466:	2300      	movs	r3, #0
   d7468:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d746c:	e7db      	b.n	d7426 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d746e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d7470:	9400      	str	r4, [sp, #0]
   d7472:	f002 fbdb 	bl	d9c2c <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d7476:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d747a:	4293      	cmp	r3, r2
   d747c:	d013      	beq.n	d74a6 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d747e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d7482:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d7486:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d748a:	3b04      	subs	r3, #4
   d748c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d7490:	4668      	mov	r0, sp
   d7492:	f7ff fc75 	bl	d6d80 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d7496:	4924      	ldr	r1, [pc, #144]	; (d7528 <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d7498:	481f      	ldr	r0, [pc, #124]	; (d7518 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d749a:	f7ff faf6 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d749e:	4620      	mov	r0, r4
   d74a0:	f7ff fc8c 	bl	d6dbc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d74a4:	e7bf      	b.n	d7426 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d74a6:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d74aa:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d74ae:	f7ff fda3 	bl	d6ff8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d74b2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d74b6:	4298      	cmp	r0, r3
   d74b8:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d74bc:	d102      	bne.n	d74c4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d74be:	481b      	ldr	r0, [pc, #108]	; (d752c <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d74c0:	f005 fdd1 	bl	dd066 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d74c4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d74c8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d74ca:	429a      	cmp	r2, r3
   d74cc:	d104      	bne.n	d74d8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d74ce:	2201      	movs	r2, #1
   d74d0:	4611      	mov	r1, r2
   d74d2:	4628      	mov	r0, r5
   d74d4:	f7ff fe69 	bl	d71aa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d74d8:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d74dc:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d74e0:	f7fc fdd9 	bl	d4096 <_Znwj>
   d74e4:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d74e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d74ec:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d74ee:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d74f2:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d74f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d74fa:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d74fe:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d7502:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d7506:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d750a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d750e:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d7512:	e7bd      	b.n	d7490 <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d7514:	000de634 	.word	0x000de634
   d7518:	2003e270 	.word	0x2003e270
   d751c:	000de647 	.word	0x000de647
   d7520:	000d6eb9 	.word	0x000d6eb9
   d7524:	000de657 	.word	0x000de657
   d7528:	000de669 	.word	0x000de669
   d752c:	000de5c5 	.word	0x000de5c5

000d7530 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
        name_(name) {
   d7530:	4b01      	ldr	r3, [pc, #4]	; (d7538 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d7532:	4a02      	ldr	r2, [pc, #8]	; (d753c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d7534:	601a      	str	r2, [r3, #0]
}
   d7536:	4770      	bx	lr
   d7538:	2003e270 	.word	0x2003e270
   d753c:	000de690 	.word	0x000de690

000d7540 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d7540:	b510      	push	{r4, lr}
   d7542:	4b07      	ldr	r3, [pc, #28]	; (d7560 <_ZN17PublishQueuePosixD1Ev+0x20>)
   d7544:	4604      	mov	r4, r0
   d7546:	f840 3bc0 	str.w	r3, [r0], #192
   d754a:	f7fd fe03 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d754e:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d7552:	f7ff fe17 	bl	d7184 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d7556:	1d20      	adds	r0, r4, #4
   d7558:	f001 fbec 	bl	d8d34 <_ZN14SequentialFileD1Ev>
}
   d755c:	4620      	mov	r0, r4
   d755e:	bd10      	pop	{r4, pc}
   d7560:	000de6a4 	.word	0x000de6a4

000d7564 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d7564:	b510      	push	{r4, lr}
   d7566:	4604      	mov	r4, r0
}
   d7568:	f7ff ffea 	bl	d7540 <_ZN17PublishQueuePosixD1Ev>
   d756c:	4620      	mov	r0, r4
   d756e:	21d0      	movs	r1, #208	; 0xd0
   d7570:	f005 fd70 	bl	dd054 <_ZdlPvj>
   d7574:	4620      	mov	r0, r4
   d7576:	bd10      	pop	{r4, pc}

000d7578 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d7578:	6001      	str	r1, [r0, #0]
   d757a:	7102      	strb	r2, [r0, #4]
{
}
   d757c:	4770      	bx	lr

000d757e <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d757e:	6800      	ldr	r0, [r0, #0]
   d7580:	6803      	ldr	r3, [r0, #0]
   d7582:	68db      	ldr	r3, [r3, #12]
   d7584:	4718      	bx	r3

000d7586 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d7586:	6800      	ldr	r0, [r0, #0]
   d7588:	6803      	ldr	r3, [r0, #0]
   d758a:	6a1b      	ldr	r3, [r3, #32]
   d758c:	4718      	bx	r3

000d758e <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d758e:	6800      	ldr	r0, [r0, #0]
   d7590:	6803      	ldr	r3, [r0, #0]
   d7592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7594:	4718      	bx	r3

000d7596 <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d7596:	6800      	ldr	r0, [r0, #0]
   d7598:	6803      	ldr	r3, [r0, #0]
   d759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d759c:	4718      	bx	r3

000d759e <_ZN10RHDatagram6sendtoEPhhh>:
{
   d759e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d75a0:	4605      	mov	r5, r0
   d75a2:	460c      	mov	r4, r1
    setHeaderTo(address);
   d75a4:	4619      	mov	r1, r3
{
   d75a6:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d75a8:	f7ff fff5 	bl	d7596 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d75ac:	6828      	ldr	r0, [r5, #0]
   d75ae:	9a01      	ldr	r2, [sp, #4]
   d75b0:	6803      	ldr	r3, [r0, #0]
   d75b2:	695b      	ldr	r3, [r3, #20]
   d75b4:	4621      	mov	r1, r4
}
   d75b6:	b003      	add	sp, #12
   d75b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d75bc:	4718      	bx	r3

000d75be <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d75be:	6800      	ldr	r0, [r0, #0]
   d75c0:	6803      	ldr	r3, [r0, #0]
   d75c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d75c4:	4718      	bx	r3

000d75c6 <_ZN10RHDatagram14setThisAddressEh>:
{
   d75c6:	b538      	push	{r3, r4, r5, lr}
   d75c8:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d75ca:	6800      	ldr	r0, [r0, #0]
   d75cc:	6803      	ldr	r3, [r0, #0]
{
   d75ce:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d75d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d75d2:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d75d4:	4629      	mov	r1, r5
   d75d6:	4620      	mov	r0, r4
   d75d8:	f7ff fff1 	bl	d75be <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d75dc:	7125      	strb	r5, [r4, #4]
}
   d75de:	bd38      	pop	{r3, r4, r5, pc}

000d75e0 <_ZN10RHDatagram4initEv>:
{
   d75e0:	b538      	push	{r3, r4, r5, lr}
   d75e2:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d75e4:	6800      	ldr	r0, [r0, #0]
   d75e6:	6803      	ldr	r3, [r0, #0]
   d75e8:	689b      	ldr	r3, [r3, #8]
   d75ea:	4798      	blx	r3
    if (ret)
   d75ec:	4605      	mov	r5, r0
   d75ee:	b118      	cbz	r0, d75f8 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d75f0:	7921      	ldrb	r1, [r4, #4]
   d75f2:	4620      	mov	r0, r4
   d75f4:	f7ff ffe7 	bl	d75c6 <_ZN10RHDatagram14setThisAddressEh>
}
   d75f8:	4628      	mov	r0, r5
   d75fa:	bd38      	pop	{r3, r4, r5, pc}

000d75fc <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d75fc:	6800      	ldr	r0, [r0, #0]
   d75fe:	6803      	ldr	r3, [r0, #0]
   d7600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7602:	4718      	bx	r3

000d7604 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d7604:	6800      	ldr	r0, [r0, #0]
   d7606:	6803      	ldr	r3, [r0, #0]
   d7608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d760a:	4718      	bx	r3

000d760c <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d760c:	6800      	ldr	r0, [r0, #0]
   d760e:	6803      	ldr	r3, [r0, #0]
   d7610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7612:	4718      	bx	r3

000d7614 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d7614:	6800      	ldr	r0, [r0, #0]
   d7616:	6803      	ldr	r3, [r0, #0]
   d7618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d761a:	4718      	bx	r3

000d761c <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d761c:	6800      	ldr	r0, [r0, #0]
   d761e:	6803      	ldr	r3, [r0, #0]
   d7620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7622:	4718      	bx	r3

000d7624 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d7624:	6800      	ldr	r0, [r0, #0]
   d7626:	6803      	ldr	r3, [r0, #0]
   d7628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d762a:	4718      	bx	r3

000d762c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d762c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7630:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d7632:	6800      	ldr	r0, [r0, #0]
{
   d7634:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d7636:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d7638:	6803      	ldr	r3, [r0, #0]
   d763a:	691b      	ldr	r3, [r3, #16]
{
   d763c:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d7640:	4798      	blx	r3
   d7642:	4605      	mov	r5, r0
   d7644:	b1c8      	cbz	r0, d767a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d7646:	b11e      	cbz	r6, d7650 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d7648:	4620      	mov	r0, r4
   d764a:	f7ff ffe3 	bl	d7614 <_ZN10RHDatagram10headerFromEv>
   d764e:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d7650:	f1b9 0f00 	cmp.w	r9, #0
   d7654:	d004      	beq.n	d7660 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d7656:	4620      	mov	r0, r4
   d7658:	f7ff ffd8 	bl	d760c <_ZN10RHDatagram8headerToEv>
   d765c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d7660:	f1b8 0f00 	cmp.w	r8, #0
   d7664:	d004      	beq.n	d7670 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d7666:	4620      	mov	r0, r4
   d7668:	f7ff ffd8 	bl	d761c <_ZN10RHDatagram8headerIdEv>
   d766c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d7670:	b11f      	cbz	r7, d767a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d7672:	4620      	mov	r0, r4
   d7674:	f7ff ffd6 	bl	d7624 <_ZN10RHDatagram11headerFlagsEv>
   d7678:	7038      	strb	r0, [r7, #0]
}
   d767a:	4628      	mov	r0, r5
   d767c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d7680 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d7680:	2001      	movs	r0, #1
   d7682:	4770      	bx	lr

000d7684 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d7684:	7903      	ldrb	r3, [r0, #4]
   d7686:	2b03      	cmp	r3, #3
   d7688:	d0fc      	beq.n	d7684 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d768a:	2001      	movs	r0, #1
   d768c:	4770      	bx	lr

000d768e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d768e:	2000      	movs	r0, #0
   d7690:	4770      	bx	lr

000d7692 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d7692:	7181      	strb	r1, [r0, #6]
}
   d7694:	4770      	bx	lr

000d7696 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d7696:	7141      	strb	r1, [r0, #5]
}
   d7698:	4770      	bx	lr

000d769a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d769a:	72c1      	strb	r1, [r0, #11]
}
   d769c:	4770      	bx	lr

000d769e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d769e:	7301      	strb	r1, [r0, #12]
}
   d76a0:	4770      	bx	lr

000d76a2 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d76a2:	7341      	strb	r1, [r0, #13]
}
   d76a4:	4770      	bx	lr

000d76a6 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d76a6:	7b83      	ldrb	r3, [r0, #14]
   d76a8:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d76ac:	4311      	orrs	r1, r2
   d76ae:	7381      	strb	r1, [r0, #14]
}
   d76b0:	4770      	bx	lr

000d76b2 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d76b2:	79c0      	ldrb	r0, [r0, #7]
}
   d76b4:	4770      	bx	lr

000d76b6 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d76b6:	7a00      	ldrb	r0, [r0, #8]
}
   d76b8:	4770      	bx	lr

000d76ba <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d76ba:	7a40      	ldrb	r0, [r0, #9]
}
   d76bc:	4770      	bx	lr

000d76be <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d76be:	7a80      	ldrb	r0, [r0, #10]
}
   d76c0:	4770      	bx	lr

000d76c2 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d76c2:	8a00      	ldrh	r0, [r0, #16]
}
   d76c4:	b200      	sxth	r0, r0
   d76c6:	4770      	bx	lr

000d76c8 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d76c8:	7900      	ldrb	r0, [r0, #4]
}
   d76ca:	4770      	bx	lr

000d76cc <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d76cc:	7101      	strb	r1, [r0, #4]
}
   d76ce:	4770      	bx	lr

000d76d0 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d76d0:	8a40      	ldrh	r0, [r0, #18]
}
   d76d2:	b280      	uxth	r0, r0
   d76d4:	4770      	bx	lr

000d76d6 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d76d6:	8a80      	ldrh	r0, [r0, #20]
}
   d76d8:	b280      	uxth	r0, r0
   d76da:	4770      	bx	lr

000d76dc <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d76dc:	8ac0      	ldrh	r0, [r0, #22]
}
   d76de:	b280      	uxth	r0, r0
   d76e0:	4770      	bx	lr

000d76e2 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d76e2:	b538      	push	{r3, r4, r5, lr}
   d76e4:	4605      	mov	r5, r0
   d76e6:	460c      	mov	r4, r1
    while (!available())
   d76e8:	682b      	ldr	r3, [r5, #0]
   d76ea:	4628      	mov	r0, r5
   d76ec:	68db      	ldr	r3, [r3, #12]
   d76ee:	4798      	blx	r3
   d76f0:	b928      	cbnz	r0, d76fe <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d76f2:	2c00      	cmp	r4, #0
   d76f4:	d0f8      	beq.n	d76e8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d76f6:	4620      	mov	r0, r4
   d76f8:	f002 fea8 	bl	da44c <delay>
   d76fc:	e7f4      	b.n	d76e8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d76fe:	bd38      	pop	{r3, r4, r5, pc}

000d7700 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d7700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7702:	4605      	mov	r5, r0
   d7704:	460f      	mov	r7, r1
   d7706:	4614      	mov	r4, r2
   d7708:	f002 fac0 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
   d770c:	4606      	mov	r6, r0
   d770e:	f002 fabd 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d7712:	1b80      	subs	r0, r0, r6
   d7714:	42b8      	cmp	r0, r7
   d7716:	d20a      	bcs.n	d772e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d7718:	682b      	ldr	r3, [r5, #0]
   d771a:	4628      	mov	r0, r5
   d771c:	68db      	ldr	r3, [r3, #12]
   d771e:	4798      	blx	r3
   d7720:	b930      	cbnz	r0, d7730 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d7722:	2c00      	cmp	r4, #0
   d7724:	d0f3      	beq.n	d770e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d7726:	4620      	mov	r0, r4
   d7728:	f002 fe90 	bl	da44c <delay>
   d772c:	e7ef      	b.n	d770e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d772e:	2000      	movs	r0, #0
}
   d7730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7732 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d7732:	b570      	push	{r4, r5, r6, lr}
   d7734:	4604      	mov	r4, r0
   d7736:	460e      	mov	r6, r1
   d7738:	f002 faa8 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
   d773c:	4605      	mov	r5, r0
   d773e:	f002 faa5 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d7742:	1b40      	subs	r0, r0, r5
   d7744:	42b0      	cmp	r0, r6
   d7746:	d204      	bcs.n	d7752 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d7748:	7923      	ldrb	r3, [r4, #4]
   d774a:	2b03      	cmp	r3, #3
   d774c:	d0f7      	beq.n	d773e <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d774e:	2001      	movs	r0, #1
}
   d7750:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d7752:	2000      	movs	r0, #0
   d7754:	e7fc      	b.n	d7750 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d7756 <_ZN15RHGenericDriver7waitCADEv>:
{
   d7756:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d7758:	69c3      	ldr	r3, [r0, #28]
{
   d775a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d775c:	b1b3      	cbz	r3, d778c <_ZN15RHGenericDriver7waitCADEv+0x36>
   d775e:	f002 fa95 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d7762:	2664      	movs	r6, #100	; 0x64
   d7764:	4605      	mov	r5, r0
    while (isChannelActive())
   d7766:	6823      	ldr	r3, [r4, #0]
   d7768:	4620      	mov	r0, r4
   d776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d776c:	4798      	blx	r3
   d776e:	b168      	cbz	r0, d778c <_ZN15RHGenericDriver7waitCADEv+0x36>
   d7770:	f002 fa8c 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d7774:	69e3      	ldr	r3, [r4, #28]
   d7776:	1b40      	subs	r0, r0, r5
   d7778:	4298      	cmp	r0, r3
   d777a:	d809      	bhi.n	d7790 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d777c:	210a      	movs	r1, #10
   d777e:	2001      	movs	r0, #1
   d7780:	f004 fdd9 	bl	dc336 <_Z6randomii>
   d7784:	4370      	muls	r0, r6
   d7786:	f002 fe61 	bl	da44c <delay>
    while (isChannelActive())
   d778a:	e7ec      	b.n	d7766 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d778c:	2001      	movs	r0, #1
}
   d778e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d7790:	2000      	movs	r0, #0
   d7792:	e7fc      	b.n	d778e <_ZN15RHGenericDriver7waitCADEv+0x38>

000d7794 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d7794:	4a06      	ldr	r2, [pc, #24]	; (d77b0 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d7796:	6002      	str	r2, [r0, #0]
   d7798:	21ff      	movs	r1, #255	; 0xff
   d779a:	2200      	movs	r2, #0
   d779c:	7102      	strb	r2, [r0, #4]
   d779e:	7141      	strb	r1, [r0, #5]
   d77a0:	8242      	strh	r2, [r0, #18]
   d77a2:	72c1      	strb	r1, [r0, #11]
   d77a4:	8282      	strh	r2, [r0, #20]
   d77a6:	8181      	strh	r1, [r0, #12]
   d77a8:	7382      	strb	r2, [r0, #14]
   d77aa:	82c2      	strh	r2, [r0, #22]
   d77ac:	61c2      	str	r2, [r0, #28]
}
   d77ae:	4770      	bx	lr
   d77b0:	000de6b8 	.word	0x000de6b8

000d77b4 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d77b4:	4770      	bx	lr

000d77b6 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d77b6:	4770      	bx	lr

000d77b8 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d77b8:	4770      	bx	lr

000d77ba <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d77ba:	4770      	bx	lr

000d77bc <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d77bc:	4770      	bx	lr

000d77be <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d77be:	7141      	strb	r1, [r0, #5]
}
   d77c0:	4770      	bx	lr

000d77c2 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d77c2:	7181      	strb	r1, [r0, #6]
}
   d77c4:	4770      	bx	lr

000d77c6 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d77c6:	7101      	strb	r1, [r0, #4]
}
   d77c8:	4770      	bx	lr
	...

000d77cc <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d77cc:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d77ce:	4d03      	ldr	r5, [pc, #12]	; (d77dc <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d77d0:	6005      	str	r5, [r0, #0]
   d77d2:	7101      	strb	r1, [r0, #4]
   d77d4:	7142      	strb	r2, [r0, #5]
   d77d6:	7183      	strb	r3, [r0, #6]
}
   d77d8:	bd30      	pop	{r4, r5, pc}
   d77da:	bf00      	nop
   d77dc:	000de738 	.word	0x000de738

000d77e0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d77e0:	4770      	bx	lr

000d77e2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d77e2:	b510      	push	{r4, lr}
  }
   d77e4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d77e6:	4604      	mov	r4, r0
  }
   d77e8:	f005 fc34 	bl	dd054 <_ZdlPvj>
   d77ec:	4620      	mov	r0, r4
   d77ee:	bd10      	pop	{r4, pc}

000d77f0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d77f0:	b40e      	push	{r1, r2, r3}
   d77f2:	b503      	push	{r0, r1, lr}
   d77f4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d77f6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d77f8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d77fc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d77fe:	f004 fd5e 	bl	dc2be <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d7802:	b002      	add	sp, #8
   d7804:	f85d eb04 	ldr.w	lr, [sp], #4
   d7808:	b003      	add	sp, #12
   d780a:	4770      	bx	lr

000d780c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d780c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d780e:	4604      	mov	r4, r0
   d7810:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d7812:	7922      	ldrb	r2, [r4, #4]
   d7814:	68a3      	ldr	r3, [r4, #8]
   d7816:	b132      	cbz	r2, d7826 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d7818:	b9a3      	cbnz	r3, d7844 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d781a:	490b      	ldr	r1, [pc, #44]	; (d7848 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d781c:	b002      	add	sp, #8
   d781e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d7822:	f004 bd1b 	b.w	dc25c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d7826:	4a09      	ldr	r2, [pc, #36]	; (d784c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d7828:	7b26      	ldrb	r6, [r4, #12]
   d782a:	4d09      	ldr	r5, [pc, #36]	; (d7850 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d782c:	4909      	ldr	r1, [pc, #36]	; (d7854 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d782e:	7b64      	ldrb	r4, [r4, #13]
   d7830:	2e01      	cmp	r6, #1
   d7832:	bf18      	it	ne
   d7834:	4629      	movne	r1, r5
   d7836:	e9cd 1400 	strd	r1, r4, [sp]
   d783a:	4907      	ldr	r1, [pc, #28]	; (d7858 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d783c:	f7ff ffd8 	bl	d77f0 <_ZN5Print6printfEPKcz>
  }
   d7840:	b002      	add	sp, #8
   d7842:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d7844:	4a05      	ldr	r2, [pc, #20]	; (d785c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d7846:	e7ef      	b.n	d7828 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d7848:	000de775 	.word	0x000de775
   d784c:	000dedbc 	.word	0x000dedbc
   d7850:	000de771 	.word	0x000de771
   d7854:	000de76d 	.word	0x000de76d
   d7858:	000de78b 	.word	0x000de78b
   d785c:	000de764 	.word	0x000de764

000d7860 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d7860:	b510      	push	{r4, lr}
   d7862:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d7864:	f7ff ffb2 	bl	d77cc <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d7868:	4b05      	ldr	r3, [pc, #20]	; (d7880 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d786a:	6023      	str	r3, [r4, #0]
  {
   d786c:	4b05      	ldr	r3, [pc, #20]	; (d7884 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d786e:	60a3      	str	r3, [r4, #8]
   d7870:	2301      	movs	r3, #1
   d7872:	7323      	strb	r3, [r4, #12]
   d7874:	2300      	movs	r3, #0
   d7876:	6123      	str	r3, [r4, #16]
   d7878:	82a3      	strh	r3, [r4, #20]
{
}
   d787a:	4620      	mov	r0, r4
   d787c:	bd10      	pop	{r4, pc}
   d787e:	bf00      	nop
   d7880:	000de7c4 	.word	0x000de7c4
   d7884:	000de7b0 	.word	0x000de7b0

000d7888 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d7888:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d788a:	4c0b      	ldr	r4, [pc, #44]	; (d78b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d788c:	7821      	ldrb	r1, [r4, #0]
   d788e:	f3bf 8f5b 	dmb	ish
   d7892:	f011 0101 	ands.w	r1, r1, #1
   d7896:	d10b      	bne.n	d78b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d7898:	4620      	mov	r0, r4
   d789a:	9101      	str	r1, [sp, #4]
   d789c:	f7fc fc0c 	bl	d40b8 <__cxa_guard_acquire>
   d78a0:	9901      	ldr	r1, [sp, #4]
   d78a2:	b128      	cbz	r0, d78b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d78a4:	4805      	ldr	r0, [pc, #20]	; (d78bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d78a6:	f004 fd5d 	bl	dc364 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d78aa:	4620      	mov	r0, r4
   d78ac:	f7fc fc09 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d78b0:	4802      	ldr	r0, [pc, #8]	; (d78bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d78b2:	b002      	add	sp, #8
   d78b4:	bd10      	pop	{r4, pc}
   d78b6:	bf00      	nop
   d78b8:	2003e278 	.word	0x2003e278
   d78bc:	2003e27c 	.word	0x2003e27c

000d78c0 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d78c0:	b507      	push	{r0, r1, r2, lr}
   d78c2:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d78c4:	f7ff ffe0 	bl	d7888 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d78c8:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d78ca:	b003      	add	sp, #12
   d78cc:	f85d eb04 	ldr.w	lr, [sp], #4
   d78d0:	f004 bdfa 	b.w	dc4c8 <_ZN8SPIClass8transferEh>

000d78d4 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d78d4:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d78d6:	f7ff ffd7 	bl	d7888 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d78da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d78de:	f004 bdf9 	b.w	dc4d4 <_ZN8SPIClass15attachInterruptEv>

000d78e2 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d78e2:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d78e4:	f7ff ffd0 	bl	d7888 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d78e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d78ec:	f004 bdf3 	b.w	dc4d6 <_ZN8SPIClass15detachInterruptEv>

000d78f0 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d78f0:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d78f2:	7903      	ldrb	r3, [r0, #4]
   d78f4:	2b04      	cmp	r3, #4
   d78f6:	d020      	beq.n	d793a <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d78f8:	2b03      	cmp	r3, #3
   d78fa:	d020      	beq.n	d793e <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d78fc:	2b02      	cmp	r3, #2
   d78fe:	d020      	beq.n	d7942 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d7900:	4a11      	ldr	r2, [pc, #68]	; (d7948 <_ZN13RHHardwareSPI5beginEv+0x58>)
   d7902:	4912      	ldr	r1, [pc, #72]	; (d794c <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d7904:	2b01      	cmp	r3, #1
   d7906:	bf18      	it	ne
   d7908:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d790a:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d790c:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d790e:	3901      	subs	r1, #1
   d7910:	bf18      	it	ne
   d7912:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d7914:	b133      	cbz	r3, d7924 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d7916:	2b01      	cmp	r3, #1
   d7918:	d004      	beq.n	d7924 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d791a:	2b02      	cmp	r3, #2
   d791c:	d002      	beq.n	d7924 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d791e:	2b03      	cmp	r3, #3
   d7920:	bf18      	it	ne
   d7922:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d7924:	2400      	movs	r4, #0
   d7926:	7304      	strb	r4, [r0, #12]
   d7928:	6102      	str	r2, [r0, #16]
   d792a:	7501      	strb	r1, [r0, #20]
   d792c:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d792e:	f7ff ffab 	bl	d7888 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d7932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7936:	f004 bd1f 	b.w	dc378 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d793a:	4a05      	ldr	r2, [pc, #20]	; (d7950 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d793c:	e7e5      	b.n	d790a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d793e:	4a05      	ldr	r2, [pc, #20]	; (d7954 <_ZN13RHHardwareSPI5beginEv+0x64>)
   d7940:	e7e3      	b.n	d790a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d7942:	4a05      	ldr	r2, [pc, #20]	; (d7958 <_ZN13RHHardwareSPI5beginEv+0x68>)
   d7944:	e7e1      	b.n	d790a <_ZN13RHHardwareSPI5beginEv+0x1a>
   d7946:	bf00      	nop
   d7948:	001e8480 	.word	0x001e8480
   d794c:	000f4240 	.word	0x000f4240
   d7950:	00f42400 	.word	0x00f42400
   d7954:	007a1200 	.word	0x007a1200
   d7958:	003d0900 	.word	0x003d0900

000d795c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d795c:	b508      	push	{r3, lr}
        instance().end();
   d795e:	f7ff ff93 	bl	d7888 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d7962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d7966:	f004 bd18 	b.w	dc39a <_ZN8SPIClass3endEv>

000d796a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d796a:	b510      	push	{r4, lr}
   d796c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d796e:	f7ff ff8b 	bl	d7888 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7972:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d7976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d797a:	f004 bd37 	b.w	dc3ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d797e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d797e:	b508      	push	{r3, lr}
        instance().endTransaction();
   d7980:	f7ff ff82 	bl	d7888 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d7984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d7988:	f004 bd16 	b.w	dc3b8 <_ZN8SPIClass14endTransactionEv>

000d798c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d798c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d798e:	f7ff ff7b 	bl	d7888 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d7992:	bd08      	pop	{r3, pc}

000d7994 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d7994:	2300      	movs	r3, #0
   d7996:	4802      	ldr	r0, [pc, #8]	; (d79a0 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d7998:	461a      	mov	r2, r3
   d799a:	4619      	mov	r1, r3
   d799c:	f7ff bf60 	b.w	d7860 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d79a0:	2003e284 	.word	0x2003e284

000d79a4 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d79a4:	2a01      	cmp	r2, #1
   d79a6:	d105      	bne.n	d79b4 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d79a8:	7a00      	ldrb	r0, [r0, #8]
   d79aa:	780b      	ldrb	r3, [r1, #0]
   d79ac:	1a1b      	subs	r3, r3, r0
   d79ae:	4258      	negs	r0, r3
   d79b0:	4158      	adcs	r0, r3
   d79b2:	4770      	bx	lr
   d79b4:	2000      	movs	r0, #0
}
   d79b6:	4770      	bx	lr

000d79b8 <_ZN6RHMesh5doArpEh>:
{
   d79b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d79bc:	4d26      	ldr	r5, [pc, #152]	; (d7a58 <_ZN6RHMesh5doArpEh+0xa0>)
   d79be:	2301      	movs	r3, #1
{
   d79c0:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d79c2:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d79c4:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d79c6:	2300      	movs	r3, #0
{
   d79c8:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d79ca:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d79cc:	9300      	str	r3, [sp, #0]
   d79ce:	2203      	movs	r2, #3
   d79d0:	23ff      	movs	r3, #255	; 0xff
   d79d2:	4629      	mov	r1, r5
{
   d79d4:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d79d6:	f000 fbb9 	bl	d814c <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d79da:	b120      	cbz	r0, d79e6 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d79dc:	2400      	movs	r4, #0
}
   d79de:	4620      	mov	r0, r4
   d79e0:	b007      	add	sp, #28
   d79e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d79e6:	23fa      	movs	r3, #250	; 0xfa
   d79e8:	f88d 3017 	strb.w	r3, [sp, #23]
   d79ec:	f002 f94e 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d79f0:	f106 0904 	add.w	r9, r6, #4
   d79f4:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d79f6:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d79f8:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d79fc:	f002 f946 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
   d7a00:	1a20      	subs	r0, r4, r0
   d7a02:	2800      	cmp	r0, #0
   d7a04:	ddea      	ble.n	d79dc <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d7a06:	b281      	uxth	r1, r0
   d7a08:	2200      	movs	r2, #0
   d7a0a:	4648      	mov	r0, r9
   d7a0c:	f7ff fdbf 	bl	d758e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d7a10:	2800      	cmp	r0, #0
   d7a12:	d0f3      	beq.n	d79fc <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d7a14:	2300      	movs	r3, #0
   d7a16:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d7a1a:	e9cd 3300 	strd	r3, r3, [sp]
   d7a1e:	f10d 0217 	add.w	r2, sp, #23
   d7a22:	4651      	mov	r1, sl
   d7a24:	4630      	mov	r0, r6
   d7a26:	f000 fb9b 	bl	d8160 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d7a2a:	4604      	mov	r4, r0
   d7a2c:	2800      	cmp	r0, #0
   d7a2e:	d0e3      	beq.n	d79f8 <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d7a30:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d7a34:	2b01      	cmp	r3, #1
   d7a36:	d9df      	bls.n	d79f8 <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d7a38:	f895 b000 	ldrb.w	fp, [r5]
   d7a3c:	f1bb 0f02 	cmp.w	fp, #2
   d7a40:	d1da      	bne.n	d79f8 <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d7a42:	4648      	mov	r0, r9
   d7a44:	f7ff fde6 	bl	d7614 <_ZN10RHDatagram10headerFromEv>
   d7a48:	465b      	mov	r3, fp
   d7a4a:	4602      	mov	r2, r0
   d7a4c:	4639      	mov	r1, r7
   d7a4e:	4630      	mov	r0, r6
   d7a50:	f000 faf3 	bl	d803a <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d7a54:	e7c3      	b.n	d79de <_ZN6RHMesh5doArpEh+0x26>
   d7a56:	bf00      	nop
   d7a58:	2003e29c 	.word	0x2003e29c

000d7a5c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d7a5c:	2a01      	cmp	r2, #1
{
   d7a5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7a62:	4607      	mov	r7, r0
   d7a64:	460e      	mov	r6, r1
   d7a66:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d7a68:	d93b      	bls.n	d7ae2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d7a6a:	794d      	ldrb	r5, [r1, #5]
   d7a6c:	2d02      	cmp	r5, #2
   d7a6e:	d130      	bne.n	d7ad2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d7a70:	f100 0804 	add.w	r8, r0, #4
   d7a74:	79c9      	ldrb	r1, [r1, #7]
   d7a76:	9101      	str	r1, [sp, #4]
   d7a78:	4640      	mov	r0, r8
   d7a7a:	f7ff fdcb 	bl	d7614 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d7a7e:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d7a80:	462b      	mov	r3, r5
   d7a82:	4602      	mov	r2, r0
   d7a84:	9901      	ldr	r1, [sp, #4]
   d7a86:	4638      	mov	r0, r7
   d7a88:	f000 fad7 	bl	d803a <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d7a8c:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d7a8e:	f106 0308 	add.w	r3, r6, #8
   d7a92:	2400      	movs	r4, #0
   d7a94:	4622      	mov	r2, r4
   d7a96:	4295      	cmp	r5, r2
   d7a98:	f104 0401 	add.w	r4, r4, #1
   d7a9c:	b2e4      	uxtb	r4, r4
   d7a9e:	d904      	bls.n	d7aaa <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d7aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7aa4:	7a39      	ldrb	r1, [r7, #8]
   d7aa6:	4291      	cmp	r1, r2
   d7aa8:	d1f4      	bne.n	d7a94 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d7aaa:	f104 0108 	add.w	r1, r4, #8
   d7aae:	440e      	add	r6, r1
	while (i < numRoutes)
   d7ab0:	42a5      	cmp	r5, r4
   d7ab2:	d916      	bls.n	d7ae2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d7ab4:	f816 1b01 	ldrb.w	r1, [r6], #1
   d7ab8:	9101      	str	r1, [sp, #4]
   d7aba:	4640      	mov	r0, r8
   d7abc:	f7ff fdaa 	bl	d7614 <_ZN10RHDatagram10headerFromEv>
   d7ac0:	3401      	adds	r4, #1
   d7ac2:	4602      	mov	r2, r0
   d7ac4:	9901      	ldr	r1, [sp, #4]
   d7ac6:	2302      	movs	r3, #2
   d7ac8:	4638      	mov	r0, r7
   d7aca:	b2e4      	uxtb	r4, r4
   d7acc:	f000 fab5 	bl	d803a <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d7ad0:	e7ee      	b.n	d7ab0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d7ad2:	2d03      	cmp	r5, #3
   d7ad4:	d105      	bne.n	d7ae2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d7ad6:	7989      	ldrb	r1, [r1, #6]
}
   d7ad8:	b002      	add	sp, #8
   d7ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d7ade:	f000 ba95 	b.w	d800c <_ZN8RHRouter13deleteRouteToEh>
}
   d7ae2:	b002      	add	sp, #8
   d7ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7ae8 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d7ae8:	b510      	push	{r4, lr}
   d7aea:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d7aec:	f000 fae6 	bl	d80bc <_ZN8RHRouterC1ER15RHGenericDriverh>
   d7af0:	4b01      	ldr	r3, [pc, #4]	; (d7af8 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d7af2:	6023      	str	r3, [r4, #0]
}
   d7af4:	4620      	mov	r0, r4
   d7af6:	bd10      	pop	{r4, pc}
   d7af8:	000de7f8 	.word	0x000de7f8

000d7afc <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d7afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d7b00:	2af9      	cmp	r2, #249	; 0xf9
{
   d7b02:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d7b06:	4606      	mov	r6, r0
   d7b08:	460f      	mov	r7, r1
   d7b0a:	4614      	mov	r4, r2
   d7b0c:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d7b0e:	d825      	bhi.n	d7b5c <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d7b10:	2bff      	cmp	r3, #255	; 0xff
   d7b12:	d114      	bne.n	d7b3e <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d7b14:	f8df 8048 	ldr.w	r8, [pc, #72]	; d7b60 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d7b18:	4640      	mov	r0, r8
   d7b1a:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d7b1c:	4622      	mov	r2, r4
   d7b1e:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d7b20:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d7b24:	f005 fed2 	bl	dd8cc <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d7b28:	1c62      	adds	r2, r4, #1
   d7b2a:	f8cd 9020 	str.w	r9, [sp, #32]
   d7b2e:	462b      	mov	r3, r5
   d7b30:	4641      	mov	r1, r8
   d7b32:	4630      	mov	r0, r6
   d7b34:	b2d2      	uxtb	r2, r2
}
   d7b36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d7b3a:	f000 bb07 	b.w	d814c <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d7b3e:	4619      	mov	r1, r3
   d7b40:	f000 fa20 	bl	d7f84 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d7b44:	2800      	cmp	r0, #0
   d7b46:	d1e5      	bne.n	d7b14 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d7b48:	6833      	ldr	r3, [r6, #0]
   d7b4a:	4629      	mov	r1, r5
   d7b4c:	689b      	ldr	r3, [r3, #8]
   d7b4e:	4630      	mov	r0, r6
   d7b50:	4798      	blx	r3
   d7b52:	2800      	cmp	r0, #0
   d7b54:	d1de      	bne.n	d7b14 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d7b56:	2002      	movs	r0, #2
}
   d7b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d7b5c:	2001      	movs	r0, #1
   d7b5e:	e7fb      	b.n	d7b58 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d7b60:	2003e29c 	.word	0x2003e29c

000d7b64 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d7b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b68:	b089      	sub	sp, #36	; 0x24
   d7b6a:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d7b6c:	23fa      	movs	r3, #250	; 0xfa
   d7b6e:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d7b72:	f10d 031f 	add.w	r3, sp, #31
   d7b76:	9303      	str	r3, [sp, #12]
   d7b78:	f10d 031e 	add.w	r3, sp, #30
   d7b7c:	f8df a180 	ldr.w	sl, [pc, #384]	; d7d00 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d7b80:	9302      	str	r3, [sp, #8]
   d7b82:	f10d 031d 	add.w	r3, sp, #29
   d7b86:	9301      	str	r3, [sp, #4]
   d7b88:	ab07      	add	r3, sp, #28
   d7b8a:	9300      	str	r3, [sp, #0]
{     
   d7b8c:	4689      	mov	r9, r1
   d7b8e:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d7b90:	f10d 031b 	add.w	r3, sp, #27
   d7b94:	f10d 021a 	add.w	r2, sp, #26
   d7b98:	4651      	mov	r1, sl
{     
   d7b9a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d7b9e:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d7ba0:	f000 fade 	bl	d8160 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d7ba4:	4656      	mov	r6, sl
   d7ba6:	4604      	mov	r4, r0
   d7ba8:	b920      	cbnz	r0, d7bb4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d7baa:	2400      	movs	r4, #0
}
   d7bac:	4620      	mov	r0, r4
   d7bae:	b009      	add	sp, #36	; 0x24
   d7bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d7bb4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d7bb8:	b373      	cbz	r3, d7c18 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d7bba:	f89a 2000 	ldrb.w	r2, [sl]
   d7bbe:	bb5a      	cbnz	r2, d7c18 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d7bc0:	f1b8 0f00 	cmp.w	r8, #0
   d7bc4:	d003      	beq.n	d7bce <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d7bc6:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d7bca:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d7bce:	f1bb 0f00 	cmp.w	fp, #0
   d7bd2:	d003      	beq.n	d7bdc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d7bd4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7bd8:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d7bdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7bde:	b11a      	cbz	r2, d7be8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d7be0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d7be2:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d7be6:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d7be8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d7bea:	b11a      	cbz	r2, d7bf4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d7bec:	9914      	ldr	r1, [sp, #80]	; 0x50
   d7bee:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d7bf2:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d7bf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d7bf6:	b11a      	cbz	r2, d7c00 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d7bf8:	9915      	ldr	r1, [sp, #84]	; 0x54
   d7bfa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d7bfe:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d7c00:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d7c02:	493d      	ldr	r1, [pc, #244]	; (d7cf8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d7c04:	3b01      	subs	r3, #1
   d7c06:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d7c08:	429a      	cmp	r2, r3
		*len = msgLen;
   d7c0a:	bf88      	it	hi
   d7c0c:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d7c0e:	783a      	ldrb	r2, [r7, #0]
   d7c10:	4648      	mov	r0, r9
   d7c12:	f005 fe5b 	bl	dd8cc <memcpy>
	    return true;
   d7c16:	e7c9      	b.n	d7bac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d7c18:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7c1c:	2aff      	cmp	r2, #255	; 0xff
   d7c1e:	d1c4      	bne.n	d7baa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d7c20:	2b01      	cmp	r3, #1
   d7c22:	d9c2      	bls.n	d7baa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d7c24:	7832      	ldrb	r2, [r6, #0]
   d7c26:	2a01      	cmp	r2, #1
   d7c28:	d1bf      	bne.n	d7baa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d7c2a:	7a2a      	ldrb	r2, [r5, #8]
   d7c2c:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d7c30:	42a2      	cmp	r2, r4
   d7c32:	d0ba      	beq.n	d7baa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d7c34:	1edf      	subs	r7, r3, #3
   d7c36:	4931      	ldr	r1, [pc, #196]	; (d7cfc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d7c38:	b2ff      	uxtb	r7, r7
   d7c3a:	2300      	movs	r3, #0
   d7c3c:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d7c40:	4547      	cmp	r7, r8
   d7c42:	d906      	bls.n	d7c52 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d7c44:	f811 0b01 	ldrb.w	r0, [r1], #1
   d7c48:	4282      	cmp	r2, r0
   d7c4a:	f103 0301 	add.w	r3, r3, #1
   d7c4e:	d1f5      	bne.n	d7c3c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d7c50:	e7ab      	b.n	d7baa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d7c52:	f105 0904 	add.w	r9, r5, #4
   d7c56:	4648      	mov	r0, r9
   d7c58:	f7ff fcdc 	bl	d7614 <_ZN10RHDatagram10headerFromEv>
   d7c5c:	2302      	movs	r3, #2
   d7c5e:	4602      	mov	r2, r0
   d7c60:	4621      	mov	r1, r4
   d7c62:	4628      	mov	r0, r5
   d7c64:	f000 f9e9 	bl	d803a <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d7c68:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d7c6c:	b193      	cbz	r3, d7c94 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d7c6e:	4c24      	ldr	r4, [pc, #144]	; (d7d00 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d7c70:	1ba3      	subs	r3, r4, r6
   d7c72:	b2db      	uxtb	r3, r3
   d7c74:	429f      	cmp	r7, r3
   d7c76:	d90c      	bls.n	d7c92 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d7c78:	78e1      	ldrb	r1, [r4, #3]
   d7c7a:	9105      	str	r1, [sp, #20]
   d7c7c:	4648      	mov	r0, r9
   d7c7e:	f7ff fcc9 	bl	d7614 <_ZN10RHDatagram10headerFromEv>
   d7c82:	9905      	ldr	r1, [sp, #20]
   d7c84:	4602      	mov	r2, r0
   d7c86:	2302      	movs	r3, #2
   d7c88:	4628      	mov	r0, r5
   d7c8a:	f000 f9d6 	bl	d803a <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d7c8e:	3401      	adds	r4, #1
   d7c90:	e7ee      	b.n	d7c70 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d7c92:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d7c94:	682b      	ldr	r3, [r5, #0]
   d7c96:	7872      	ldrb	r2, [r6, #1]
   d7c98:	68db      	ldr	r3, [r3, #12]
   d7c9a:	491a      	ldr	r1, [pc, #104]	; (d7d04 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d7c9c:	4628      	mov	r0, r5
   d7c9e:	4798      	blx	r3
   d7ca0:	4604      	mov	r4, r0
   d7ca2:	b160      	cbz	r0, d7cbe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d7ca4:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d7ca6:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d7ca8:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d7caa:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d7cae:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d7cb2:	4913      	ldr	r1, [pc, #76]	; (d7d00 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d7cb4:	9400      	str	r4, [sp, #0]
   d7cb6:	4628      	mov	r0, r5
   d7cb8:	f000 fa48 	bl	d814c <_ZN8RHRouter10sendtoWaitEPhhhh>
   d7cbc:	e776      	b.n	d7bac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d7cbe:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d7cc2:	4543      	cmp	r3, r8
   d7cc4:	f67f af71 	bls.w	d7baa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d7cc8:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d7ccc:	2b00      	cmp	r3, #0
   d7cce:	f43f af6c 	beq.w	d7baa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d7cd2:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d7cd6:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7cd8:	4909      	ldr	r1, [pc, #36]	; (d7d00 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d7cda:	443e      	add	r6, r7
		tmpMessageLen++;
   d7cdc:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d7cde:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7ce0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d7ce4:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d7ce6:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7ce8:	9300      	str	r3, [sp, #0]
   d7cea:	4628      	mov	r0, r5
   d7cec:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d7cee:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7cf2:	f000 f9f5 	bl	d80e0 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d7cf6:	e759      	b.n	d7bac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d7cf8:	2003e29d 	.word	0x2003e29d
   d7cfc:	2003e29f 	.word	0x2003e29f
   d7d00:	2003e29c 	.word	0x2003e29c
   d7d04:	2003e29e 	.word	0x2003e29e

000d7d08 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d7d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d0a:	b085      	sub	sp, #20
   d7d0c:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d7d0e:	3004      	adds	r0, #4
{
   d7d10:	460e      	mov	r6, r1
   d7d12:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d7d14:	f7ff fc7e 	bl	d7614 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d7d18:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d7d1a:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d7d1c:	4631      	mov	r1, r6
   d7d1e:	4628      	mov	r0, r5
   d7d20:	f000 f947 	bl	d7fb2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d7d24:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d7d26:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d7d28:	d001      	beq.n	d7d2e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d7d2a:	2805      	cmp	r0, #5
   d7d2c:	d11b      	bne.n	d7d66 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d7d2e:	7831      	ldrb	r1, [r6, #0]
   d7d30:	4628      	mov	r0, r5
   d7d32:	f000 f96b 	bl	d800c <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d7d36:	7872      	ldrb	r2, [r6, #1]
   d7d38:	7a2b      	ldrb	r3, [r5, #8]
   d7d3a:	429a      	cmp	r2, r3
   d7d3c:	d013      	beq.n	d7d66 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d7d3e:	4c0b      	ldr	r4, [pc, #44]	; (d7d6c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d7d40:	2303      	movs	r3, #3
   d7d42:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d7d44:	7833      	ldrb	r3, [r6, #0]
   d7d46:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d7d48:	7871      	ldrb	r1, [r6, #1]
   d7d4a:	2302      	movs	r3, #2
   d7d4c:	463a      	mov	r2, r7
   d7d4e:	4628      	mov	r0, r5
   d7d50:	f000 f973 	bl	d803a <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d7d54:	2300      	movs	r3, #0
   d7d56:	9300      	str	r3, [sp, #0]
   d7d58:	4621      	mov	r1, r4
   d7d5a:	7873      	ldrb	r3, [r6, #1]
   d7d5c:	2202      	movs	r2, #2
   d7d5e:	4628      	mov	r0, r5
   d7d60:	f000 f9f4 	bl	d814c <_ZN8RHRouter10sendtoWaitEPhhhh>
   d7d64:	4604      	mov	r4, r0
}
   d7d66:	4620      	mov	r0, r4
   d7d68:	b005      	add	sp, #20
   d7d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d6c:	2003e29c 	.word	0x2003e29c

000d7d70 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d7d70:	b510      	push	{r4, lr}
   d7d72:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d7d74:	f7ff fc00 	bl	d7578 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d7d78:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d7d7a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d7d7c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d7d7e:	2303      	movs	r3, #3
    _retransmissions = 0;
   d7d80:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d7d82:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d7d84:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d7d86:	f44f 7280 	mov.w	r2, #256	; 0x100
   d7d8a:	f104 0011 	add.w	r0, r4, #17
   d7d8e:	f005 fdc5 	bl	dd91c <memset>
}
   d7d92:	4620      	mov	r0, r4
   d7d94:	bd10      	pop	{r4, pc}

000d7d96 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d7d96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7d98:	4604      	mov	r4, r0
   d7d9a:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d7d9c:	f7ff fc2e 	bl	d75fc <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d7da0:	4620      	mov	r0, r4
   d7da2:	2200      	movs	r2, #0
   d7da4:	2180      	movs	r1, #128	; 0x80
   d7da6:	f7ff fc2d 	bl	d7604 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d7daa:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d7dac:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d7dae:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d7db2:	f10d 010f 	add.w	r1, sp, #15
   d7db6:	2201      	movs	r2, #1
   d7db8:	4620      	mov	r0, r4
   d7dba:	f7ff fbf0 	bl	d759e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d7dbe:	4620      	mov	r0, r4
   d7dc0:	f7ff fbe1 	bl	d7586 <_ZN10RHDatagram14waitPacketSentEv>
}
   d7dc4:	b004      	add	sp, #16
   d7dc6:	bd10      	pop	{r4, pc}

000d7dc8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d7dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d7dcc:	7b05      	ldrb	r5, [r0, #12]
   d7dce:	3501      	adds	r5, #1
   d7dd0:	b2ed      	uxtb	r5, r5
{
   d7dd2:	b087      	sub	sp, #28
   d7dd4:	4604      	mov	r4, r0
   d7dd6:	4689      	mov	r9, r1
   d7dd8:	4692      	mov	sl, r2
   d7dda:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d7ddc:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d7dde:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d7de0:	7c22      	ldrb	r2, [r4, #16]
   d7de2:	463b      	mov	r3, r7
   d7de4:	429a      	cmp	r2, r3
   d7de6:	f107 0701 	add.w	r7, r7, #1
   d7dea:	b2ff      	uxtb	r7, r7
   d7dec:	d36b      	bcc.n	d7ec6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d7dee:	4629      	mov	r1, r5
   d7df0:	4620      	mov	r0, r4
   d7df2:	f7ff fc03 	bl	d75fc <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d7df6:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d7df8:	bf0d      	iteet	eq
   d7dfa:	22c0      	moveq	r2, #192	; 0xc0
   d7dfc:	2280      	movne	r2, #128	; 0x80
   d7dfe:	2140      	movne	r1, #64	; 0x40
   d7e00:	2100      	moveq	r1, #0
   d7e02:	4620      	mov	r0, r4
   d7e04:	f7ff fbfe 	bl	d7604 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d7e08:	4643      	mov	r3, r8
   d7e0a:	4652      	mov	r2, sl
   d7e0c:	4649      	mov	r1, r9
   d7e0e:	4620      	mov	r0, r4
   d7e10:	f7ff fbc5 	bl	d759e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d7e14:	4620      	mov	r0, r4
   d7e16:	f7ff fbb6 	bl	d7586 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d7e1a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d7e1e:	d054      	beq.n	d7eca <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d7e20:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d7e22:	bf82      	ittt	hi
   d7e24:	68a3      	ldrhi	r3, [r4, #8]
   d7e26:	3301      	addhi	r3, #1
   d7e28:	60a3      	strhi	r3, [r4, #8]
   d7e2a:	f001 ff2f 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d7e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d7e32:	4683      	mov	fp, r0
   d7e34:	2000      	movs	r0, #0
   d7e36:	89e6      	ldrh	r6, [r4, #14]
   d7e38:	f004 fa7d 	bl	dc336 <_Z6randomii>
   d7e3c:	4370      	muls	r0, r6
   d7e3e:	bf48      	it	mi
   d7e40:	30ff      	addmi	r0, #255	; 0xff
   d7e42:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d7e46:	fa1b f686 	uxtah	r6, fp, r6
   d7e4a:	f001 ff1f 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
   d7e4e:	1a30      	subs	r0, r6, r0
   d7e50:	2800      	cmp	r0, #0
   d7e52:	ddc5      	ble.n	d7de0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d7e54:	b281      	uxth	r1, r0
   d7e56:	2200      	movs	r2, #0
   d7e58:	4620      	mov	r0, r4
   d7e5a:	f7ff fb98 	bl	d758e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d7e5e:	2800      	cmp	r0, #0
   d7e60:	d0f3      	beq.n	d7e4a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d7e62:	f10d 0317 	add.w	r3, sp, #23
   d7e66:	9302      	str	r3, [sp, #8]
   d7e68:	f10d 0316 	add.w	r3, sp, #22
   d7e6c:	9301      	str	r3, [sp, #4]
   d7e6e:	2200      	movs	r2, #0
   d7e70:	f10d 0315 	add.w	r3, sp, #21
   d7e74:	9300      	str	r3, [sp, #0]
   d7e76:	4611      	mov	r1, r2
   d7e78:	ab05      	add	r3, sp, #20
   d7e7a:	4620      	mov	r0, r4
   d7e7c:	f7ff fbd6 	bl	d762c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d7e80:	2800      	cmp	r0, #0
   d7e82:	d0e2      	beq.n	d7e4a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d7e84:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d7e88:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d7e8c:	4542      	cmp	r2, r8
   d7e8e:	d10e      	bne.n	d7eae <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d7e90:	f894 c004 	ldrb.w	ip, [r4, #4]
   d7e94:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d7e98:	458c      	cmp	ip, r1
   d7e9a:	d108      	bne.n	d7eae <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d7e9c:	2b00      	cmp	r3, #0
   d7e9e:	da08      	bge.n	d7eb2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d7ea0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d7ea4:	42ab      	cmp	r3, r5
   d7ea6:	d1d0      	bne.n	d7e4a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d7ea8:	b007      	add	sp, #28
   d7eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d7eae:	2b00      	cmp	r3, #0
   d7eb0:	dbcb      	blt.n	d7e4a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d7eb2:	18a1      	adds	r1, r4, r2
   d7eb4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d7eb8:	7c49      	ldrb	r1, [r1, #17]
   d7eba:	4299      	cmp	r1, r3
   d7ebc:	d1c5      	bne.n	d7e4a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d7ebe:	4620      	mov	r0, r4
   d7ec0:	f7ff ff69 	bl	d7d96 <_ZN18RHReliableDatagram11acknowledgeEhh>
   d7ec4:	e7c1      	b.n	d7e4a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d7ec6:	2000      	movs	r0, #0
   d7ec8:	e7ee      	b.n	d7ea8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d7eca:	2001      	movs	r0, #1
   d7ecc:	e7ec      	b.n	d7ea8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d7ece <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d7ece:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7ed2:	b089      	sub	sp, #36	; 0x24
   d7ed4:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d7ed8:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d7edc:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d7ede:	4604      	mov	r4, r0
   d7ee0:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d7ee2:	f7ff fb4c 	bl	d757e <_ZN10RHDatagram9availableEv>
   d7ee6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d7eea:	b920      	cbnz	r0, d7ef6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d7eec:	2500      	movs	r5, #0
}
   d7eee:	4628      	mov	r0, r5
   d7ef0:	b009      	add	sp, #36	; 0x24
   d7ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d7ef6:	f10d 031f 	add.w	r3, sp, #31
   d7efa:	9302      	str	r3, [sp, #8]
   d7efc:	f10d 031e 	add.w	r3, sp, #30
   d7f00:	9301      	str	r3, [sp, #4]
   d7f02:	f10d 031d 	add.w	r3, sp, #29
   d7f06:	9300      	str	r3, [sp, #0]
   d7f08:	4620      	mov	r0, r4
   d7f0a:	ab07      	add	r3, sp, #28
   d7f0c:	f7ff fb8e 	bl	d762c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d7f10:	4605      	mov	r5, r0
   d7f12:	2800      	cmp	r0, #0
   d7f14:	d0ea      	beq.n	d7eec <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d7f16:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d7f1a:	2b00      	cmp	r3, #0
   d7f1c:	dbe6      	blt.n	d7eec <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d7f1e:	7922      	ldrb	r2, [r4, #4]
   d7f20:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d7f24:	429a      	cmp	r2, r3
   d7f26:	d106      	bne.n	d7f36 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d7f28:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7f2c:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d7f30:	4620      	mov	r0, r4
   d7f32:	f7ff ff30 	bl	d7d96 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d7f36:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7f3a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d7f3e:	4414      	add	r4, r2
   d7f40:	7c61      	ldrb	r1, [r4, #17]
   d7f42:	4299      	cmp	r1, r3
   d7f44:	d0d2      	beq.n	d7eec <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d7f46:	b106      	cbz	r6, d7f4a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d7f48:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d7f4a:	f1b9 0f00 	cmp.w	r9, #0
   d7f4e:	d003      	beq.n	d7f58 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d7f50:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d7f54:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d7f58:	f1b8 0f00 	cmp.w	r8, #0
   d7f5c:	d001      	beq.n	d7f62 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d7f5e:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d7f62:	b117      	cbz	r7, d7f6a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d7f64:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d7f68:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d7f6a:	7463      	strb	r3, [r4, #17]
		return true;
   d7f6c:	e7bf      	b.n	d7eee <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d7f6e <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d7f6e:	4770      	bx	lr

000d7f70 <_ZN8RHRouter4initEv>:
{
   d7f70:	b510      	push	{r4, lr}
   d7f72:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d7f74:	3004      	adds	r0, #4
   d7f76:	f7ff fb33 	bl	d75e0 <_ZN10RHDatagram4initEv>
    if (ret)
   d7f7a:	b110      	cbz	r0, d7f82 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d7f7c:	231e      	movs	r3, #30
   d7f7e:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d7f82:	bd10      	pop	{r4, pc}

000d7f84 <_ZN8RHRouter10getRouteToEh>:
{
   d7f84:	b510      	push	{r4, lr}
   d7f86:	4602      	mov	r2, r0
   d7f88:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d7f8a:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d7f8e:	428c      	cmp	r4, r1
   d7f90:	d108      	bne.n	d7fa4 <_ZN8RHRouter10getRouteToEh+0x20>
   d7f92:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d7f96:	b12c      	cbz	r4, d7fa4 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d7f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7f9c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d7fa0:	4418      	add	r0, r3
}
   d7fa2:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7fa4:	3301      	adds	r3, #1
   d7fa6:	2b0a      	cmp	r3, #10
   d7fa8:	f102 0203 	add.w	r2, r2, #3
   d7fac:	d1ed      	bne.n	d7f8a <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d7fae:	2000      	movs	r0, #0
   d7fb0:	e7f7      	b.n	d7fa2 <_ZN8RHRouter10getRouteToEh+0x1e>

000d7fb2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d7fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d7fb4:	780b      	ldrb	r3, [r1, #0]
   d7fb6:	2bff      	cmp	r3, #255	; 0xff
{
   d7fb8:	4605      	mov	r5, r0
   d7fba:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d7fbc:	d006      	beq.n	d7fcc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d7fbe:	4619      	mov	r1, r3
   d7fc0:	9201      	str	r2, [sp, #4]
   d7fc2:	f7ff ffdf 	bl	d7f84 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d7fc6:	b158      	cbz	r0, d7fe0 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d7fc8:	7843      	ldrb	r3, [r0, #1]
   d7fca:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d7fcc:	4621      	mov	r1, r4
   d7fce:	1d28      	adds	r0, r5, #4
   d7fd0:	f7ff fefa 	bl	d7dc8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d7fd4:	2800      	cmp	r0, #0
   d7fd6:	bf14      	ite	ne
   d7fd8:	2000      	movne	r0, #0
   d7fda:	2005      	moveq	r0, #5
}
   d7fdc:	b003      	add	sp, #12
   d7fde:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d7fe0:	2002      	movs	r0, #2
   d7fe2:	e7fb      	b.n	d7fdc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d7fe4 <_ZN8RHRouter11deleteRouteEh>:
{
   d7fe4:	b510      	push	{r4, lr}
   d7fe6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d7fea:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d7fec:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d7ff0:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d7ff4:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d7ff8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d7ffc:	4421      	add	r1, r4
   d7ffe:	4420      	add	r0, r4
   d8000:	f005 fc64 	bl	dd8cc <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d8004:	2300      	movs	r3, #0
   d8006:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d800a:	bd10      	pop	{r4, pc}

000d800c <_ZN8RHRouter13deleteRouteToEh>:
{
   d800c:	b538      	push	{r3, r4, r5, lr}
   d800e:	460a      	mov	r2, r1
   d8010:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d8012:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d8016:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d801a:	b2d9      	uxtb	r1, r3
   d801c:	5d65      	ldrb	r5, [r4, r5]
   d801e:	4295      	cmp	r5, r2
   d8020:	d103      	bne.n	d802a <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d8022:	f7ff ffdf 	bl	d7fe4 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d8026:	2001      	movs	r0, #1
}
   d8028:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d802a:	3301      	adds	r3, #1
   d802c:	2b0a      	cmp	r3, #10
   d802e:	d1f2      	bne.n	d8016 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d8030:	2000      	movs	r0, #0
   d8032:	e7f9      	b.n	d8028 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d8034 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d8034:	2100      	movs	r1, #0
   d8036:	f7ff bfd5 	b.w	d7fe4 <_ZN8RHRouter11deleteRouteEh>

000d803a <_ZN8RHRouter10addRouteToEhhh>:
{
   d803a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d803c:	4616      	mov	r6, r2
   d803e:	461f      	mov	r7, r3
   d8040:	4604      	mov	r4, r0
   d8042:	460d      	mov	r5, r1
   d8044:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d8046:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d804a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d804e:	5c11      	ldrb	r1, [r2, r0]
   d8050:	42a9      	cmp	r1, r5
   d8052:	d105      	bne.n	d8060 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d8054:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d8056:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d805a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d8060:	3301      	adds	r3, #1
   d8062:	2b0a      	cmp	r3, #10
   d8064:	d1f1      	bne.n	d804a <_ZN8RHRouter10addRouteToEhhh+0x10>
   d8066:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d8068:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d806c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d8070:	5c11      	ldrb	r1, [r2, r0]
   d8072:	b919      	cbnz	r1, d807c <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d8074:	4420      	add	r0, r4
   d8076:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d807a:	e7ec      	b.n	d8056 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d807c:	3301      	adds	r3, #1
   d807e:	2b0a      	cmp	r3, #10
   d8080:	d1f4      	bne.n	d806c <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d8082:	4620      	mov	r0, r4
   d8084:	f7ff ffd6 	bl	d8034 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d8088:	4620      	mov	r0, r4
   d808a:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d808e:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d8092:	b92a      	cbnz	r2, d80a0 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d8094:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d8098:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d809c:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d80a0:	3003      	adds	r0, #3
   d80a2:	4298      	cmp	r0, r3
   d80a4:	d1f3      	bne.n	d808e <_ZN8RHRouter10addRouteToEhhh+0x54>
   d80a6:	e7da      	b.n	d805e <_ZN8RHRouter10addRouteToEhhh+0x24>

000d80a8 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d80a8:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d80ac:	2200      	movs	r2, #0
   d80ae:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d80b2:	3003      	adds	r0, #3
   d80b4:	4298      	cmp	r0, r3
   d80b6:	d1fa      	bne.n	d80ae <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d80b8:	4770      	bx	lr
	...

000d80bc <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d80bc:	b510      	push	{r4, lr}
   d80be:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d80c0:	3004      	adds	r0, #4
   d80c2:	f7ff fe55 	bl	d7d70 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d80c6:	4b05      	ldr	r3, [pc, #20]	; (d80dc <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d80c8:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d80ca:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d80ce:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d80d0:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d80d4:	f7ff ffe8 	bl	d80a8 <_ZN8RHRouter17clearRoutingTableEv>
}
   d80d8:	4620      	mov	r0, r4
   d80da:	bd10      	pop	{r4, pc}
   d80dc:	000de810 	.word	0x000de810

000d80e0 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d80e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d80e4:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d80e6:	6840      	ldr	r0, [r0, #4]
{
   d80e8:	9101      	str	r1, [sp, #4]
   d80ea:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d80ec:	6803      	ldr	r3, [r0, #0]
{
   d80ee:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d80f2:	699b      	ldr	r3, [r3, #24]
{
   d80f4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d80f8:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d80fa:	4798      	blx	r3
   d80fc:	f106 0805 	add.w	r8, r6, #5
   d8100:	4580      	cmp	r8, r0
   d8102:	d81c      	bhi.n	d813e <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d8104:	4d10      	ldr	r5, [pc, #64]	; (d8148 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d8106:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d8108:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d810c:	2300      	movs	r3, #0
   d810e:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d8110:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d8114:	70eb      	strb	r3, [r5, #3]
   d8116:	1c5a      	adds	r2, r3, #1
   d8118:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d811c:	1d68      	adds	r0, r5, #5
   d811e:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d8120:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d8122:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d8126:	f005 fbd1 	bl	dd8cc <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d812a:	6823      	ldr	r3, [r4, #0]
   d812c:	685b      	ldr	r3, [r3, #4]
   d812e:	fa5f f288 	uxtb.w	r2, r8
   d8132:	4629      	mov	r1, r5
   d8134:	4620      	mov	r0, r4
}
   d8136:	b002      	add	sp, #8
   d8138:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d813c:	4718      	bx	r3
}
   d813e:	2001      	movs	r0, #1
   d8140:	b002      	add	sp, #8
   d8142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8146:	bf00      	nop
   d8148:	2003e396 	.word	0x2003e396

000d814c <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d814c:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d814e:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d8152:	9401      	str	r4, [sp, #4]
   d8154:	7a04      	ldrb	r4, [r0, #8]
   d8156:	9400      	str	r4, [sp, #0]
   d8158:	f7ff ffc2 	bl	d80e0 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d815c:	b002      	add	sp, #8
   d815e:	bd10      	pop	{r4, pc}

000d8160 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d8160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8164:	b087      	sub	sp, #28
   d8166:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d8168:	23ff      	movs	r3, #255	; 0xff
   d816a:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d816e:	f10d 0317 	add.w	r3, sp, #23
   d8172:	9302      	str	r3, [sp, #8]
   d8174:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d8248 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d8178:	f10d 0316 	add.w	r3, sp, #22
   d817c:	9301      	str	r3, [sp, #4]
   d817e:	f10d 0315 	add.w	r3, sp, #21
   d8182:	9300      	str	r3, [sp, #0]
{  
   d8184:	4604      	mov	r4, r0
   d8186:	4688      	mov	r8, r1
   d8188:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d818a:	ab05      	add	r3, sp, #20
   d818c:	f10d 0213 	add.w	r2, sp, #19
   d8190:	4649      	mov	r1, r9
   d8192:	3004      	adds	r0, #4
{  
   d8194:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d8198:	f7ff fe99 	bl	d7ece <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d819c:	4605      	mov	r5, r0
   d819e:	b908      	cbnz	r0, d81a4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d81a0:	2500      	movs	r5, #0
   d81a2:	e038      	b.n	d8216 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d81a4:	6823      	ldr	r3, [r4, #0]
   d81a6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d81aa:	681b      	ldr	r3, [r3, #0]
   d81ac:	4649      	mov	r1, r9
   d81ae:	4620      	mov	r0, r4
   d81b0:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d81b2:	f899 3000 	ldrb.w	r3, [r9]
   d81b6:	7a22      	ldrb	r2, [r4, #8]
   d81b8:	429a      	cmp	r2, r3
   d81ba:	d001      	beq.n	d81c0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d81bc:	2bff      	cmp	r3, #255	; 0xff
   d81be:	d12e      	bne.n	d821e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d81c0:	b117      	cbz	r7, d81c8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d81c2:	4b21      	ldr	r3, [pc, #132]	; (d8248 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d81c4:	785b      	ldrb	r3, [r3, #1]
   d81c6:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d81c8:	f1bb 0f00 	cmp.w	fp, #0
   d81cc:	d003      	beq.n	d81d6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d81ce:	4b1e      	ldr	r3, [pc, #120]	; (d8248 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d81d0:	781b      	ldrb	r3, [r3, #0]
   d81d2:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d81d6:	f1ba 0f00 	cmp.w	sl, #0
   d81da:	d003      	beq.n	d81e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d81dc:	4b1a      	ldr	r3, [pc, #104]	; (d8248 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d81de:	78db      	ldrb	r3, [r3, #3]
   d81e0:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d81e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d81e6:	b11b      	cbz	r3, d81f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d81e8:	4b17      	ldr	r3, [pc, #92]	; (d8248 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d81ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d81ec:	791b      	ldrb	r3, [r3, #4]
   d81ee:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d81f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d81f2:	b11b      	cbz	r3, d81fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d81f4:	4b14      	ldr	r3, [pc, #80]	; (d8248 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d81f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d81f8:	789b      	ldrb	r3, [r3, #2]
   d81fa:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d81fc:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d8200:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d8202:	4912      	ldr	r1, [pc, #72]	; (d824c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d8204:	3b05      	subs	r3, #5
   d8206:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d8208:	429a      	cmp	r2, r3
		*len = msgLen;
   d820a:	bf88      	it	hi
   d820c:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d820e:	7832      	ldrb	r2, [r6, #0]
   d8210:	4640      	mov	r0, r8
   d8212:	f005 fb5b 	bl	dd8cc <memcpy>
}
   d8216:	4628      	mov	r0, r5
   d8218:	b007      	add	sp, #28
   d821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d821e:	f899 3002 	ldrb.w	r3, [r9, #2]
   d8222:	1c5a      	adds	r2, r3, #1
   d8224:	f889 2002 	strb.w	r2, [r9, #2]
   d8228:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d822c:	429a      	cmp	r2, r3
   d822e:	d9b7      	bls.n	d81a0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d8230:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d8234:	2b00      	cmp	r3, #0
   d8236:	d0b3      	beq.n	d81a0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d8238:	6823      	ldr	r3, [r4, #0]
   d823a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d823e:	685b      	ldr	r3, [r3, #4]
   d8240:	4649      	mov	r1, r9
   d8242:	4620      	mov	r0, r4
   d8244:	4798      	blx	r3
   d8246:	e7ab      	b.n	d81a0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d8248:	2003e396 	.word	0x2003e396
   d824c:	2003e39b 	.word	0x2003e39b

000d8250 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d8250:	b510      	push	{r4, lr}
   d8252:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d8254:	6a00      	ldr	r0, [r0, #32]
   d8256:	6803      	ldr	r3, [r0, #0]
   d8258:	68db      	ldr	r3, [r3, #12]
   d825a:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d825c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d8260:	28ff      	cmp	r0, #255	; 0xff
   d8262:	d002      	beq.n	d826a <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d8264:	2101      	movs	r1, #1
   d8266:	f004 fe7b 	bl	dcf60 <pinMode>

    deselectSlave();
   d826a:	6823      	ldr	r3, [r4, #0]
   d826c:	4620      	mov	r0, r4
   d826e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d8270:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d8272:	2064      	movs	r0, #100	; 0x64
   d8274:	f002 f8ea 	bl	da44c <delay>
#endif
    
    return true;
}
   d8278:	2001      	movs	r0, #1
   d827a:	bd10      	pop	{r4, pc}

000d827c <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d827c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d8280:	2100      	movs	r1, #0
   d8282:	f004 be7e 	b.w	dcf82 <digitalWrite>

000d8286 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d8286:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d828a:	2101      	movs	r1, #1
   d828c:	f004 be79 	b.w	dcf82 <digitalWrite>

000d8290 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d8290:	b570      	push	{r4, r5, r6, lr}
   d8292:	4604      	mov	r4, r0
   d8294:	460d      	mov	r5, r1
   d8296:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d8298:	f7ff fa7c 	bl	d7794 <_ZN15RHGenericDriverC1Ev>
   d829c:	4b03      	ldr	r3, [pc, #12]	; (d82ac <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d829e:	6023      	str	r3, [r4, #0]
   d82a0:	6226      	str	r6, [r4, #32]
   d82a2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d82a6:	4620      	mov	r0, r4
   d82a8:	bd70      	pop	{r4, r5, r6, pc}
   d82aa:	bf00      	nop
   d82ac:	000de820 	.word	0x000de820

000d82b0 <_ZN11RHSPIDriver7spiReadEh>:
{
   d82b0:	b538      	push	{r3, r4, r5, lr}
   d82b2:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d82b4:	6a00      	ldr	r0, [r0, #32]
   d82b6:	6803      	ldr	r3, [r0, #0]
   d82b8:	6a1b      	ldr	r3, [r3, #32]
{
   d82ba:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d82bc:	4798      	blx	r3
    selectSlave();
   d82be:	6823      	ldr	r3, [r4, #0]
   d82c0:	4620      	mov	r0, r4
   d82c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d82c4:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d82c6:	6a20      	ldr	r0, [r4, #32]
   d82c8:	6803      	ldr	r3, [r0, #0]
   d82ca:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d82ce:	681b      	ldr	r3, [r3, #0]
   d82d0:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d82d2:	6a20      	ldr	r0, [r4, #32]
   d82d4:	6803      	ldr	r3, [r0, #0]
   d82d6:	2100      	movs	r1, #0
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	4798      	blx	r3
    deselectSlave();
   d82dc:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d82de:	4605      	mov	r5, r0
    deselectSlave();
   d82e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d82e2:	4620      	mov	r0, r4
   d82e4:	4798      	blx	r3
    _spi.endTransaction();
   d82e6:	6a20      	ldr	r0, [r4, #32]
   d82e8:	6803      	ldr	r3, [r0, #0]
   d82ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82ec:	4798      	blx	r3
}
   d82ee:	4628      	mov	r0, r5
   d82f0:	bd38      	pop	{r3, r4, r5, pc}

000d82f2 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d82f2:	b570      	push	{r4, r5, r6, lr}
   d82f4:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d82f6:	6a00      	ldr	r0, [r0, #32]
   d82f8:	6803      	ldr	r3, [r0, #0]
   d82fa:	6a1b      	ldr	r3, [r3, #32]
{
   d82fc:	4616      	mov	r6, r2
   d82fe:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d8300:	4798      	blx	r3
    selectSlave();
   d8302:	6823      	ldr	r3, [r4, #0]
   d8304:	4620      	mov	r0, r4
   d8306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d8308:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d830a:	6a20      	ldr	r0, [r4, #32]
   d830c:	6803      	ldr	r3, [r0, #0]
   d830e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d8312:	681b      	ldr	r3, [r3, #0]
   d8314:	4798      	blx	r3
   d8316:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d8318:	6a20      	ldr	r0, [r4, #32]
   d831a:	6803      	ldr	r3, [r0, #0]
   d831c:	4631      	mov	r1, r6
   d831e:	681b      	ldr	r3, [r3, #0]
   d8320:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d8322:	2001      	movs	r0, #1
   d8324:	f001 fcaa 	bl	d9c7c <HAL_Delay_Microseconds>
    deselectSlave();
   d8328:	6823      	ldr	r3, [r4, #0]
   d832a:	4620      	mov	r0, r4
   d832c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d832e:	4798      	blx	r3
    _spi.endTransaction();
   d8330:	6a20      	ldr	r0, [r4, #32]
   d8332:	6803      	ldr	r3, [r0, #0]
   d8334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8336:	4798      	blx	r3
}
   d8338:	4628      	mov	r0, r5
   d833a:	bd70      	pop	{r4, r5, r6, pc}

000d833c <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d833e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d8340:	6a00      	ldr	r0, [r0, #32]
{
   d8342:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d8344:	6803      	ldr	r3, [r0, #0]
   d8346:	6a1b      	ldr	r3, [r3, #32]
{
   d8348:	460f      	mov	r7, r1
   d834a:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d834c:	4798      	blx	r3
    selectSlave();
   d834e:	6823      	ldr	r3, [r4, #0]
   d8350:	4620      	mov	r0, r4
   d8352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d8354:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d8356:	6a20      	ldr	r0, [r4, #32]
   d8358:	6803      	ldr	r3, [r0, #0]
   d835a:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d835e:	681b      	ldr	r3, [r3, #0]
   d8360:	4798      	blx	r3
   d8362:	442e      	add	r6, r5
   d8364:	4607      	mov	r7, r0
    while (len--)
   d8366:	42b5      	cmp	r5, r6
   d8368:	d007      	beq.n	d837a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d836a:	6a20      	ldr	r0, [r4, #32]
   d836c:	6803      	ldr	r3, [r0, #0]
   d836e:	2100      	movs	r1, #0
   d8370:	681b      	ldr	r3, [r3, #0]
   d8372:	4798      	blx	r3
   d8374:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d8378:	e7f5      	b.n	d8366 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d837a:	6823      	ldr	r3, [r4, #0]
   d837c:	4620      	mov	r0, r4
   d837e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d8380:	4798      	blx	r3
    _spi.endTransaction();
   d8382:	6a20      	ldr	r0, [r4, #32]
   d8384:	6803      	ldr	r3, [r0, #0]
   d8386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8388:	4798      	blx	r3
}
   d838a:	4638      	mov	r0, r7
   d838c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d838e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d838e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8390:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d8392:	6a00      	ldr	r0, [r0, #32]
{
   d8394:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d8396:	6803      	ldr	r3, [r0, #0]
   d8398:	6a1b      	ldr	r3, [r3, #32]
{
   d839a:	460f      	mov	r7, r1
   d839c:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d839e:	4798      	blx	r3
    selectSlave();
   d83a0:	6823      	ldr	r3, [r4, #0]
   d83a2:	4620      	mov	r0, r4
   d83a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d83a6:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d83a8:	6a20      	ldr	r0, [r4, #32]
   d83aa:	6803      	ldr	r3, [r0, #0]
   d83ac:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d83b0:	681b      	ldr	r3, [r3, #0]
   d83b2:	4798      	blx	r3
   d83b4:	442e      	add	r6, r5
   d83b6:	4607      	mov	r7, r0
    while (len--)
   d83b8:	42b5      	cmp	r5, r6
   d83ba:	d006      	beq.n	d83ca <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d83bc:	6a20      	ldr	r0, [r4, #32]
   d83be:	f815 1b01 	ldrb.w	r1, [r5], #1
   d83c2:	6803      	ldr	r3, [r0, #0]
   d83c4:	681b      	ldr	r3, [r3, #0]
   d83c6:	4798      	blx	r3
    while (len--)
   d83c8:	e7f6      	b.n	d83b8 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d83ca:	6823      	ldr	r3, [r4, #0]
   d83cc:	4620      	mov	r0, r4
   d83ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d83d0:	4798      	blx	r3
    _spi.endTransaction();
   d83d2:	6a20      	ldr	r0, [r4, #32]
   d83d4:	6803      	ldr	r3, [r0, #0]
   d83d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83d8:	4798      	blx	r3
}
   d83da:	4638      	mov	r0, r7
   d83dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d83de <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d83de:	6a00      	ldr	r0, [r0, #32]
   d83e0:	6803      	ldr	r3, [r0, #0]
   d83e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d83e4:	4718      	bx	r3

000d83e6 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d83e6:	2001      	movs	r0, #1
   d83e8:	4770      	bx	lr

000d83ea <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d83ea:	20fb      	movs	r0, #251	; 0xfb
   d83ec:	4770      	bx	lr

000d83ee <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d83ee:	4770      	bx	lr

000d83f0 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d83f0:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d83f2:	7903      	ldrb	r3, [r0, #4]
   d83f4:	2b05      	cmp	r3, #5
{
   d83f6:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d83f8:	d010      	beq.n	d841c <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d83fa:	6803      	ldr	r3, [r0, #0]
   d83fc:	2105      	movs	r1, #5
   d83fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d8402:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d8404:	2207      	movs	r2, #7
   d8406:	2101      	movs	r1, #1
   d8408:	4620      	mov	r0, r4
   d840a:	f7ff ff72 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d840e:	2280      	movs	r2, #128	; 0x80
   d8410:	2140      	movs	r1, #64	; 0x40
   d8412:	4620      	mov	r0, r4
   d8414:	f7ff ff6d 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d8418:	2305      	movs	r3, #5
   d841a:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d841c:	7923      	ldrb	r3, [r4, #4]
   d841e:	2b05      	cmp	r3, #5
   d8420:	d0fc      	beq.n	d841c <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d8422:	7e20      	ldrb	r0, [r4, #24]
}
   d8424:	bd10      	pop	{r4, pc}

000d8426 <_ZN7RH_RF95D0Ev>:
   d8426:	b510      	push	{r4, lr}
   d8428:	f44f 7198 	mov.w	r1, #304	; 0x130
   d842c:	4604      	mov	r4, r0
   d842e:	f004 fe11 	bl	dd054 <_ZdlPvj>
   d8432:	4620      	mov	r0, r4
   d8434:	bd10      	pop	{r4, pc}

000d8436 <_ZN7RH_RF955sleepEv>:
{
   d8436:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d8438:	7903      	ldrb	r3, [r0, #4]
   d843a:	2b01      	cmp	r3, #1
{
   d843c:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d843e:	d00b      	beq.n	d8458 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d8440:	6803      	ldr	r3, [r0, #0]
   d8442:	2101      	movs	r1, #1
   d8444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d8448:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d844a:	2200      	movs	r2, #0
   d844c:	2101      	movs	r1, #1
   d844e:	4620      	mov	r0, r4
   d8450:	f7ff ff4f 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d8454:	2301      	movs	r3, #1
   d8456:	7123      	strb	r3, [r4, #4]
}
   d8458:	2001      	movs	r0, #1
   d845a:	bd10      	pop	{r4, pc}

000d845c <_ZN7RH_RF954recvEPhS0_>:
{
   d845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d845e:	6803      	ldr	r3, [r0, #0]
   d8460:	68db      	ldr	r3, [r3, #12]
{
   d8462:	4604      	mov	r4, r0
   d8464:	460f      	mov	r7, r1
   d8466:	4615      	mov	r5, r2
    if (!available())
   d8468:	4798      	blx	r3
   d846a:	4606      	mov	r6, r0
   d846c:	b1b0      	cbz	r0, d849c <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d846e:	b187      	cbz	r7, d8492 <_ZN7RH_RF954recvEPhS0_+0x36>
   d8470:	b17d      	cbz	r5, d8492 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d8472:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d8476:	782a      	ldrb	r2, [r5, #0]
   d8478:	3b03      	subs	r3, #3
   d847a:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d847c:	bfde      	ittt	le
   d847e:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d8482:	3b04      	suble	r3, #4
   d8484:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d8486:	782a      	ldrb	r2, [r5, #0]
   d8488:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d848c:	4638      	mov	r0, r7
   d848e:	f005 fa1d 	bl	dd8cc <memcpy>
    _rxBufValid = false;
   d8492:	2300      	movs	r3, #0
   d8494:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d8498:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d849c:	4630      	mov	r0, r6
   d849e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d84a0 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d84a0:	b538      	push	{r3, r4, r5, lr}
   d84a2:	4604      	mov	r4, r0
   d84a4:	4615      	mov	r5, r2
    _rxBufValid(0)
   d84a6:	461a      	mov	r2, r3
   d84a8:	f7ff fef2 	bl	d8290 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d84ac:	4b09      	ldr	r3, [pc, #36]	; (d84d4 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d84ae:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d84b0:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d84b2:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d84b4:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d84b8:	2201      	movs	r2, #1
    _rxBufValid(0)
   d84ba:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d84be:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d84c2:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d84c6:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d84ca:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d84ce:	4620      	mov	r0, r4
   d84d0:	bd38      	pop	{r3, r4, r5, pc}
   d84d2:	bf00      	nop
   d84d4:	000de8b8 	.word	0x000de8b8

000d84d8 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d84d8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d84dc:	2b03      	cmp	r3, #3
   d84de:	d91b      	bls.n	d8518 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d84e0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d84e4:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d84e6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d84ea:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d84ec:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d84f0:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d84f2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d84f6:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d84f8:	7983      	ldrb	r3, [r0, #6]
   d84fa:	b933      	cbnz	r3, d850a <_ZN7RH_RF9513validateRxBufEv+0x32>
   d84fc:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d84fe:	7942      	ldrb	r2, [r0, #5]
   d8500:	429a      	cmp	r2, r3
   d8502:	d002      	beq.n	d850a <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d8504:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d8506:	2bff      	cmp	r3, #255	; 0xff
   d8508:	d106      	bne.n	d8518 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d850a:	8a83      	ldrh	r3, [r0, #20]
   d850c:	3301      	adds	r3, #1
   d850e:	b29b      	uxth	r3, r3
   d8510:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d8512:	2301      	movs	r3, #1
   d8514:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d8518:	4770      	bx	lr
   d851a:	0000      	movs	r0, r0
   d851c:	0000      	movs	r0, r0
	...

000d8520 <_ZN7RH_RF9512setFrequencyEf>:
{
   d8520:	b538      	push	{r3, r4, r5, lr}
   d8522:	4604      	mov	r4, r0
   d8524:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d8528:	ee10 0a10 	vmov	r0, s0
{
   d852c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d8530:	f004 ff04 	bl	dd33c <__aeabi_f2d>
   d8534:	a317      	add	r3, pc, #92	; (adr r3, d8594 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d8536:	e9d3 2300 	ldrd	r2, r3, [r3]
   d853a:	f004 ff57 	bl	dd3ec <__aeabi_dmul>
   d853e:	a317      	add	r3, pc, #92	; (adr r3, d859c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d8540:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8544:	f005 f87c 	bl	dd640 <__aeabi_ddiv>
   d8548:	f005 f962 	bl	dd810 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d854c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d854e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d8550:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d8554:	4620      	mov	r0, r4
   d8556:	f7ff fecc 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d855a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d855e:	2107      	movs	r1, #7
   d8560:	4620      	mov	r0, r4
   d8562:	f7ff fec6 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d8566:	b2ea      	uxtb	r2, r5
   d8568:	2108      	movs	r1, #8
   d856a:	4620      	mov	r0, r4
   d856c:	f7ff fec1 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d8570:	eddf 7a07 	vldr	s15, [pc, #28]	; d8590 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d8574:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d8578:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d857c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8580:	bfac      	ite	ge
   d8582:	2301      	movge	r3, #1
   d8584:	2300      	movlt	r3, #0
}
   d8586:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d8588:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d858c:	bd38      	pop	{r3, r4, r5, pc}
   d858e:	bf00      	nop
   d8590:	4442c000 	.word	0x4442c000
   d8594:	00000000 	.word	0x00000000
   d8598:	412e8480 	.word	0x412e8480
   d859c:	00000000 	.word	0x00000000
   d85a0:	404e8480 	.word	0x404e8480

000d85a4 <_ZN7RH_RF9511setModeIdleEv>:
{
   d85a4:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d85a6:	7903      	ldrb	r3, [r0, #4]
   d85a8:	2b02      	cmp	r3, #2
{
   d85aa:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d85ac:	d00b      	beq.n	d85c6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d85ae:	6803      	ldr	r3, [r0, #0]
   d85b0:	2102      	movs	r1, #2
   d85b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d85b6:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d85b8:	2201      	movs	r2, #1
   d85ba:	4611      	mov	r1, r2
   d85bc:	4620      	mov	r0, r4
   d85be:	f7ff fe98 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d85c2:	2302      	movs	r3, #2
   d85c4:	7123      	strb	r3, [r4, #4]
}
   d85c6:	bd10      	pop	{r4, pc}

000d85c8 <_ZN7RH_RF9515handleInterruptEv>:
{
   d85c8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d85ca:	2112      	movs	r1, #18
{
   d85cc:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d85ce:	f7ff fe6f 	bl	d82b0 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d85d2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d85d4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d85d6:	4620      	mov	r0, r4
   d85d8:	f7ff fe6a 	bl	d82b0 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d85dc:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d85de:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d85e0:	2112      	movs	r1, #18
   d85e2:	4620      	mov	r0, r4
   d85e4:	f7ff fe85 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d85e8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d85ea:	2b04      	cmp	r3, #4
   d85ec:	d107      	bne.n	d85fe <_ZN7RH_RF9515handleInterruptEv+0x36>
   d85ee:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d85f2:	d117      	bne.n	d8624 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d85f4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d85f8:	b10b      	cbz	r3, d85fe <_ZN7RH_RF9515handleInterruptEv+0x36>
   d85fa:	0670      	lsls	r0, r6, #25
   d85fc:	d512      	bpl.n	d8624 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d85fe:	7923      	ldrb	r3, [r4, #4]
   d8600:	2b04      	cmp	r3, #4
   d8602:	d101      	bne.n	d8608 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d8604:	0669      	lsls	r1, r5, #25
   d8606:	d422      	bmi.n	d864e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d8608:	7923      	ldrb	r3, [r4, #4]
   d860a:	2b03      	cmp	r3, #3
   d860c:	d101      	bne.n	d8612 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d860e:	072a      	lsls	r2, r5, #28
   d8610:	d469      	bmi.n	d86e6 <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d8612:	7923      	ldrb	r3, [r4, #4]
   d8614:	2b05      	cmp	r3, #5
   d8616:	d10e      	bne.n	d8636 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d8618:	076b      	lsls	r3, r5, #29
   d861a:	d50c      	bpl.n	d8636 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d861c:	f005 0501 	and.w	r5, r5, #1
   d8620:	7625      	strb	r5, [r4, #24]
   d8622:	e059      	b.n	d86d8 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d8624:	8a63      	ldrh	r3, [r4, #18]
   d8626:	3301      	adds	r3, #1
   d8628:	b29b      	uxth	r3, r3
   d862a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d862c:	2300      	movs	r3, #0
   d862e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d8632:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d8636:	22ff      	movs	r2, #255	; 0xff
   d8638:	2112      	movs	r1, #18
   d863a:	4620      	mov	r0, r4
   d863c:	f7ff fe59 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d8640:	4620      	mov	r0, r4
   d8642:	22ff      	movs	r2, #255	; 0xff
}
   d8644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d8648:	2112      	movs	r1, #18
   d864a:	f7ff be52 	b.w	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d864e:	2113      	movs	r1, #19
   d8650:	4620      	mov	r0, r4
   d8652:	f7ff fe2d 	bl	d82b0 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d8656:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d8658:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d865a:	4620      	mov	r0, r4
   d865c:	f7ff fe28 	bl	d82b0 <_ZN11RHSPIDriver7spiReadEh>
   d8660:	210d      	movs	r1, #13
   d8662:	4602      	mov	r2, r0
   d8664:	4620      	mov	r0, r4
   d8666:	f7ff fe44 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d866a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d866e:	462b      	mov	r3, r5
   d8670:	2100      	movs	r1, #0
   d8672:	4620      	mov	r0, r4
   d8674:	f7ff fe62 	bl	d833c <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d8678:	2119      	movs	r1, #25
	_bufLen = len;
   d867a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d867e:	4620      	mov	r0, r4
   d8680:	f7ff fe16 	bl	d82b0 <_ZN11RHSPIDriver7spiReadEh>
   d8684:	b240      	sxtb	r0, r0
   d8686:	2800      	cmp	r0, #0
   d8688:	bfb8      	it	lt
   d868a:	3003      	addlt	r0, #3
   d868c:	1080      	asrs	r0, r0, #2
   d868e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d8692:	211a      	movs	r1, #26
   d8694:	4620      	mov	r0, r4
   d8696:	f7ff fe0b 	bl	d82b0 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d869a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d869e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d86a0:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d86a2:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d86a4:	bfa9      	itett	ge
   d86a6:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d86a8:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d86aa:	b21b      	sxthge	r3, r3
   d86ac:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d86ae:	bfb2      	itee	lt
   d86b0:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d86b2:	220f      	movge	r2, #15
   d86b4:	fb93 f3f2 	sdivge	r3, r3, r2
   d86b8:	b21b      	sxth	r3, r3
   d86ba:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d86bc:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d86c0:	b173      	cbz	r3, d86e0 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d86c2:	8a23      	ldrh	r3, [r4, #16]
   d86c4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d86c6:	b21b      	sxth	r3, r3
   d86c8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d86ca:	4620      	mov	r0, r4
   d86cc:	f7ff ff04 	bl	d84d8 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d86d0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d86d4:	2b00      	cmp	r3, #0
   d86d6:	d0ae      	beq.n	d8636 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d86d8:	4620      	mov	r0, r4
   d86da:	f7ff ff63 	bl	d85a4 <_ZN7RH_RF9511setModeIdleEv>
   d86de:	e7aa      	b.n	d8636 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d86e0:	8a23      	ldrh	r3, [r4, #16]
   d86e2:	3ba4      	subs	r3, #164	; 0xa4
   d86e4:	e7ef      	b.n	d86c6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d86e6:	8ae3      	ldrh	r3, [r4, #22]
   d86e8:	3301      	adds	r3, #1
   d86ea:	b29b      	uxth	r3, r3
   d86ec:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d86ee:	e7f3      	b.n	d86d8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d86f0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d86f0:	4b02      	ldr	r3, [pc, #8]	; (d86fc <_ZN7RH_RF954isr0Ev+0xc>)
   d86f2:	6818      	ldr	r0, [r3, #0]
   d86f4:	b108      	cbz	r0, d86fa <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d86f6:	f7ff bf67 	b.w	d85c8 <_ZN7RH_RF9515handleInterruptEv>
}
   d86fa:	4770      	bx	lr
   d86fc:	2003e498 	.word	0x2003e498

000d8700 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d8700:	4b02      	ldr	r3, [pc, #8]	; (d870c <_ZN7RH_RF954isr1Ev+0xc>)
   d8702:	6858      	ldr	r0, [r3, #4]
   d8704:	b108      	cbz	r0, d870a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d8706:	f7ff bf5f 	b.w	d85c8 <_ZN7RH_RF9515handleInterruptEv>
}
   d870a:	4770      	bx	lr
   d870c:	2003e498 	.word	0x2003e498

000d8710 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d8710:	4b02      	ldr	r3, [pc, #8]	; (d871c <_ZN7RH_RF954isr2Ev+0xc>)
   d8712:	6898      	ldr	r0, [r3, #8]
   d8714:	b108      	cbz	r0, d871a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d8716:	f7ff bf57 	b.w	d85c8 <_ZN7RH_RF9515handleInterruptEv>
}
   d871a:	4770      	bx	lr
   d871c:	2003e498 	.word	0x2003e498

000d8720 <_ZN7RH_RF959setModeRxEv>:
{
   d8720:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d8722:	7903      	ldrb	r3, [r0, #4]
   d8724:	2b04      	cmp	r3, #4
{
   d8726:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d8728:	d010      	beq.n	d874c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d872a:	6803      	ldr	r3, [r0, #0]
   d872c:	2104      	movs	r1, #4
   d872e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d8732:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d8734:	2205      	movs	r2, #5
   d8736:	2101      	movs	r1, #1
   d8738:	4620      	mov	r0, r4
   d873a:	f7ff fdda 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d873e:	2200      	movs	r2, #0
   d8740:	2140      	movs	r1, #64	; 0x40
   d8742:	4620      	mov	r0, r4
   d8744:	f7ff fdd5 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d8748:	2304      	movs	r3, #4
   d874a:	7123      	strb	r3, [r4, #4]
}
   d874c:	bd10      	pop	{r4, pc}

000d874e <_ZN7RH_RF959availableEv>:
{
   d874e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d8750:	7903      	ldrb	r3, [r0, #4]
   d8752:	2b03      	cmp	r3, #3
{
   d8754:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d8756:	d005      	beq.n	d8764 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d8758:	f7ff ffe2 	bl	d8720 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d875c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d8760:	b2c0      	uxtb	r0, r0
}
   d8762:	bd10      	pop	{r4, pc}
	return false;
   d8764:	2000      	movs	r0, #0
   d8766:	e7fc      	b.n	d8762 <_ZN7RH_RF959availableEv+0x14>

000d8768 <_ZN7RH_RF959setModeTxEv>:
{
   d8768:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d876a:	7903      	ldrb	r3, [r0, #4]
   d876c:	2b03      	cmp	r3, #3
{
   d876e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d8770:	d010      	beq.n	d8794 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d8772:	6803      	ldr	r3, [r0, #0]
   d8774:	2103      	movs	r1, #3
   d8776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d877a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d877c:	2203      	movs	r2, #3
   d877e:	2101      	movs	r1, #1
   d8780:	4620      	mov	r0, r4
   d8782:	f7ff fdb6 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d8786:	2240      	movs	r2, #64	; 0x40
   d8788:	4611      	mov	r1, r2
   d878a:	4620      	mov	r0, r4
   d878c:	f7ff fdb1 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d8790:	2303      	movs	r3, #3
   d8792:	7123      	strb	r3, [r4, #4]
}
   d8794:	bd10      	pop	{r4, pc}

000d8796 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d8796:	2afb      	cmp	r2, #251	; 0xfb
{
   d8798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d879a:	4604      	mov	r4, r0
   d879c:	460f      	mov	r7, r1
   d879e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d87a0:	d902      	bls.n	d87a8 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d87a2:	2600      	movs	r6, #0
}
   d87a4:	4630      	mov	r0, r6
   d87a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d87a8:	6803      	ldr	r3, [r0, #0]
   d87aa:	6a1b      	ldr	r3, [r3, #32]
   d87ac:	4798      	blx	r3
    setModeIdle();
   d87ae:	4620      	mov	r0, r4
   d87b0:	f7ff fef8 	bl	d85a4 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d87b4:	6823      	ldr	r3, [r4, #0]
   d87b6:	4620      	mov	r0, r4
   d87b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d87ba:	4798      	blx	r3
   d87bc:	4606      	mov	r6, r0
   d87be:	2800      	cmp	r0, #0
   d87c0:	d0ef      	beq.n	d87a2 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d87c2:	2200      	movs	r2, #0
   d87c4:	210d      	movs	r1, #13
   d87c6:	4620      	mov	r0, r4
   d87c8:	f7ff fd93 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d87cc:	7ae2      	ldrb	r2, [r4, #11]
   d87ce:	2100      	movs	r1, #0
   d87d0:	4620      	mov	r0, r4
   d87d2:	f7ff fd8e 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d87d6:	7b22      	ldrb	r2, [r4, #12]
   d87d8:	2100      	movs	r1, #0
   d87da:	4620      	mov	r0, r4
   d87dc:	f7ff fd89 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d87e0:	7b62      	ldrb	r2, [r4, #13]
   d87e2:	2100      	movs	r1, #0
   d87e4:	4620      	mov	r0, r4
   d87e6:	f7ff fd84 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d87ea:	7ba2      	ldrb	r2, [r4, #14]
   d87ec:	2100      	movs	r1, #0
   d87ee:	4620      	mov	r0, r4
   d87f0:	f7ff fd7f 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d87f4:	462b      	mov	r3, r5
   d87f6:	463a      	mov	r2, r7
   d87f8:	2100      	movs	r1, #0
   d87fa:	4620      	mov	r0, r4
   d87fc:	f7ff fdc7 	bl	d838e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d8800:	1d2a      	adds	r2, r5, #4
   d8802:	b2d2      	uxtb	r2, r2
   d8804:	2122      	movs	r1, #34	; 0x22
   d8806:	4620      	mov	r0, r4
   d8808:	f7ff fd73 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d880c:	4620      	mov	r0, r4
   d880e:	f7ff ffab 	bl	d8768 <_ZN7RH_RF959setModeTxEv>
    return true;
   d8812:	e7c7      	b.n	d87a4 <_ZN7RH_RF954sendEPKhh+0xe>

000d8814 <_ZN7RH_RF9510setTxPowerEab>:
{
   d8814:	b538      	push	{r3, r4, r5, lr}
   d8816:	4605      	mov	r5, r0
   d8818:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d881a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d881e:	b172      	cbz	r2, d883e <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d8820:	f381 0204 	usat	r2, #4, r1
   d8824:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d8828:	b2d2      	uxtb	r2, r2
   d882a:	2109      	movs	r1, #9
   d882c:	f7ff fd61 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d8830:	2204      	movs	r2, #4
   d8832:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d8834:	4628      	mov	r0, r5
}
   d8836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d883a:	f7ff bd5a 	b.w	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d883e:	2914      	cmp	r1, #20
   d8840:	dc10      	bgt.n	d8864 <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d8842:	2901      	cmp	r1, #1
   d8844:	dd10      	ble.n	d8868 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d8846:	2911      	cmp	r1, #17
   d8848:	dd0f      	ble.n	d886a <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d884a:	2207      	movs	r2, #7
   d884c:	214d      	movs	r1, #77	; 0x4d
   d884e:	4628      	mov	r0, r5
   d8850:	f7ff fd4f 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d8854:	3c03      	subs	r4, #3
   d8856:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d8858:	1ea2      	subs	r2, r4, #2
   d885a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d885e:	b2d2      	uxtb	r2, r2
   d8860:	2109      	movs	r1, #9
   d8862:	e7e7      	b.n	d8834 <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d8864:	2414      	movs	r4, #20
   d8866:	e7f0      	b.n	d884a <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d8868:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d886a:	2204      	movs	r2, #4
   d886c:	214d      	movs	r1, #77	; 0x4d
   d886e:	4628      	mov	r0, r5
   d8870:	f7ff fd3f 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
   d8874:	e7f0      	b.n	d8858 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d8876 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d8876:	b538      	push	{r3, r4, r5, lr}
   d8878:	460c      	mov	r4, r1
   d887a:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d887c:	780a      	ldrb	r2, [r1, #0]
   d887e:	211d      	movs	r1, #29
   d8880:	f7ff fd37 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d8884:	7862      	ldrb	r2, [r4, #1]
   d8886:	211e      	movs	r1, #30
   d8888:	4628      	mov	r0, r5
   d888a:	f7ff fd32 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d888e:	78a2      	ldrb	r2, [r4, #2]
   d8890:	4628      	mov	r0, r5
   d8892:	2126      	movs	r1, #38	; 0x26
}
   d8894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d8898:	f7ff bd2b 	b.w	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>

000d889c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d889c:	2905      	cmp	r1, #5
{
   d889e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d88a0:	d80f      	bhi.n	d88c2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d88a2:	4b09      	ldr	r3, [pc, #36]	; (d88c8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d88a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d88a8:	185c      	adds	r4, r3, r1
   d88aa:	5a5a      	ldrh	r2, [r3, r1]
   d88ac:	78a3      	ldrb	r3, [r4, #2]
   d88ae:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d88b2:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d88b4:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d88b8:	f7ff ffdd 	bl	d8876 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d88bc:	2001      	movs	r0, #1
}
   d88be:	b002      	add	sp, #8
   d88c0:	bd10      	pop	{r4, pc}
        return false;
   d88c2:	2000      	movs	r0, #0
   d88c4:	e7fb      	b.n	d88be <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d88c6:	bf00      	nop
   d88c8:	000de8a0 	.word	0x000de8a0

000d88cc <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d88cc:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d88ce:	0a0a      	lsrs	r2, r1, #8
{
   d88d0:	4605      	mov	r5, r0
   d88d2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d88d4:	2120      	movs	r1, #32
   d88d6:	f7ff fd0c 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d88da:	b2e2      	uxtb	r2, r4
   d88dc:	4628      	mov	r0, r5
   d88de:	2121      	movs	r1, #33	; 0x21
}
   d88e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d88e4:	f7ff bd05 	b.w	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>

000d88e8 <_ZN7RH_RF954initEv>:
{
   d88e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d88ea:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d88ec:	f7ff fcb0 	bl	d8250 <_ZN11RHSPIDriver4initEv>
   d88f0:	4606      	mov	r6, r0
   d88f2:	b918      	cbnz	r0, d88fc <_ZN7RH_RF954initEv+0x14>
	return false;
   d88f4:	2600      	movs	r6, #0
}
   d88f6:	4630      	mov	r0, r6
   d88f8:	b002      	add	sp, #8
   d88fa:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d88fc:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d8900:	2dff      	cmp	r5, #255	; 0xff
   d8902:	d052      	beq.n	d89aa <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d8904:	4629      	mov	r1, r5
   d8906:	4620      	mov	r0, r4
   d8908:	f7ff fd69 	bl	d83de <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d890c:	2280      	movs	r2, #128	; 0x80
   d890e:	2101      	movs	r1, #1
   d8910:	4620      	mov	r0, r4
   d8912:	f7ff fcee 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d8916:	200a      	movs	r0, #10
   d8918:	f001 fd98 	bl	da44c <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d891c:	2101      	movs	r1, #1
   d891e:	4620      	mov	r0, r4
   d8920:	f7ff fcc6 	bl	d82b0 <_ZN11RHSPIDriver7spiReadEh>
   d8924:	2880      	cmp	r0, #128	; 0x80
   d8926:	d1e5      	bne.n	d88f4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d8928:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d892c:	28ff      	cmp	r0, #255	; 0xff
   d892e:	d01c      	beq.n	d896a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d8930:	2100      	movs	r1, #0
   d8932:	f004 fb15 	bl	dcf60 <pinMode>
	if (_myInterruptIndex == 0xff)
   d8936:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d893a:	2bff      	cmp	r3, #255	; 0xff
   d893c:	d107      	bne.n	d894e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d893e:	4a25      	ldr	r2, [pc, #148]	; (d89d4 <_ZN7RH_RF954initEv+0xec>)
   d8940:	7813      	ldrb	r3, [r2, #0]
   d8942:	2b03      	cmp	r3, #3
   d8944:	d8d6      	bhi.n	d88f4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d8946:	1c59      	adds	r1, r3, #1
   d8948:	7011      	strb	r1, [r2, #0]
   d894a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d894e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d8952:	4b21      	ldr	r3, [pc, #132]	; (d89d8 <_ZN7RH_RF954initEv+0xf0>)
   d8954:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d8958:	bb52      	cbnz	r2, d89b0 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d895a:	4920      	ldr	r1, [pc, #128]	; (d89dc <_ZN7RH_RF954initEv+0xf4>)
   d895c:	9200      	str	r2, [sp, #0]
   d895e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8962:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d8964:	b2a8      	uxth	r0, r5
   d8966:	f002 f98b 	bl	dac80 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d896a:	2200      	movs	r2, #0
   d896c:	210e      	movs	r1, #14
   d896e:	4620      	mov	r0, r4
   d8970:	f7ff fcbf 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d8974:	2200      	movs	r2, #0
   d8976:	210f      	movs	r1, #15
   d8978:	4620      	mov	r0, r4
   d897a:	f7ff fcba 	bl	d82f2 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d897e:	4620      	mov	r0, r4
   d8980:	f7ff fe10 	bl	d85a4 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d8984:	2100      	movs	r1, #0
   d8986:	4620      	mov	r0, r4
   d8988:	f7ff ff88 	bl	d889c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d898c:	2108      	movs	r1, #8
   d898e:	4620      	mov	r0, r4
   d8990:	f7ff ff9c 	bl	d88cc <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d8994:	ed9f 0a12 	vldr	s0, [pc, #72]	; d89e0 <_ZN7RH_RF954initEv+0xf8>
   d8998:	4620      	mov	r0, r4
   d899a:	f7ff fdc1 	bl	d8520 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d899e:	2200      	movs	r2, #0
   d89a0:	210d      	movs	r1, #13
   d89a2:	4620      	mov	r0, r4
   d89a4:	f7ff ff36 	bl	d8814 <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d89a8:	e7a5      	b.n	d88f6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d89aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d89ae:	e7ad      	b.n	d890c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d89b0:	2a01      	cmp	r2, #1
   d89b2:	f04f 0300 	mov.w	r3, #0
   d89b6:	d104      	bne.n	d89c2 <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d89b8:	9300      	str	r3, [sp, #0]
   d89ba:	490a      	ldr	r1, [pc, #40]	; (d89e4 <_ZN7RH_RF954initEv+0xfc>)
   d89bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d89c0:	e7d0      	b.n	d8964 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d89c2:	2a02      	cmp	r2, #2
   d89c4:	d196      	bne.n	d88f4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d89c6:	9300      	str	r3, [sp, #0]
   d89c8:	4907      	ldr	r1, [pc, #28]	; (d89e8 <_ZN7RH_RF954initEv+0x100>)
   d89ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d89ce:	2201      	movs	r2, #1
   d89d0:	e7c8      	b.n	d8964 <_ZN7RH_RF954initEv+0x7c>
   d89d2:	bf00      	nop
   d89d4:	2003e495 	.word	0x2003e495
   d89d8:	2003e498 	.word	0x2003e498
   d89dc:	000d86f1 	.word	0x000d86f1
   d89e0:	43d90000 	.word	0x43d90000
   d89e4:	000d8701 	.word	0x000d8701
   d89e8:	000d8711 	.word	0x000d8711

000d89ec <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d89ec:	2001      	movs	r0, #1
   d89ee:	4770      	bx	lr

000d89f0 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d89f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d89f2:	4d1f      	ldr	r5, [pc, #124]	; (d8a70 <_ZN14SequentialFileC1Ev+0x80>)
   d89f4:	4b1f      	ldr	r3, [pc, #124]	; (d8a74 <_ZN14SequentialFileC1Ev+0x84>)
   d89f6:	4604      	mov	r4, r0
   d89f8:	4629      	mov	r1, r5
   d89fa:	f840 3b04 	str.w	r3, [r0], #4
   d89fe:	f003 fdb6 	bl	dc56e <_ZN6StringC1EPKc>
   d8a02:	491d      	ldr	r1, [pc, #116]	; (d8a78 <_ZN14SequentialFileC1Ev+0x88>)
   d8a04:	f104 0014 	add.w	r0, r4, #20
   d8a08:	f003 fdb1 	bl	dc56e <_ZN6StringC1EPKc>
   d8a0c:	4629      	mov	r1, r5
   d8a0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8a12:	f003 fdac 	bl	dc56e <_ZN6StringC1EPKc>
   d8a16:	2300      	movs	r3, #0
   d8a18:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d8a1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d8a20:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d8a24:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d8a28:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d8a2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d8a30:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d8a32:	2308      	movs	r3, #8
   d8a34:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8a36:	2020      	movs	r0, #32
   d8a38:	f7fb fb2d 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d8a3c:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d8a3e:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d8a40:	3d01      	subs	r5, #1
   d8a42:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d8a44:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d8a48:	4606      	mov	r6, r0
   d8a4a:	f44f 7000 	mov.w	r0, #512	; 0x200
   d8a4e:	f7fb fb22 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8a52:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d8a56:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d8a5a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d8a5e:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d8a60:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d8a62:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d8a64:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8a66:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d8a68:	6667      	str	r7, [r4, #100]	; 0x64

}
   d8a6a:	4620      	mov	r0, r4
   d8a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8a6e:	bf00      	nop
   d8a70:	000dedbc 	.word	0x000dedbc
   d8a74:	000dea3c 	.word	0x000dea3c
   d8a78:	000de93c 	.word	0x000de93c

000d8a7c <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d8a7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d8a7e:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d8a80:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d8a82:	4628      	mov	r0, r5
   d8a84:	f003 fdd1 	bl	dc62a <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d8a88:	490e      	ldr	r1, [pc, #56]	; (d8ac4 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d8a8a:	4668      	mov	r0, sp
   d8a8c:	f003 fd6f 	bl	dc56e <_ZN6StringC1EPKc>
   d8a90:	4669      	mov	r1, sp
   d8a92:	4628      	mov	r0, r5
   d8a94:	f003 fe36 	bl	dc704 <_ZNK6String8endsWithERKS_>
   d8a98:	4606      	mov	r6, r0
   d8a9a:	4668      	mov	r0, sp
   d8a9c:	f003 fd1c 	bl	dc4d8 <_ZN6StringD1Ev>
   d8aa0:	b16e      	cbz	r6, d8abe <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d8aa2:	68e3      	ldr	r3, [r4, #12]
   d8aa4:	2200      	movs	r2, #0
   d8aa6:	3b01      	subs	r3, #1
   d8aa8:	4629      	mov	r1, r5
   d8aaa:	4668      	mov	r0, sp
   d8aac:	f003 fe40 	bl	dc730 <_ZNK6String9substringEjj>
   d8ab0:	4669      	mov	r1, sp
   d8ab2:	4628      	mov	r0, r5
   d8ab4:	f003 fdb1 	bl	dc61a <_ZN6StringaSEOS_>
   d8ab8:	4668      	mov	r0, sp
   d8aba:	f003 fd0d 	bl	dc4d8 <_ZN6StringD1Ev>
    }
    return *this; 
};
   d8abe:	4620      	mov	r0, r4
   d8ac0:	b004      	add	sp, #16
   d8ac2:	bd70      	pop	{r4, r5, r6, pc}
   d8ac4:	000de941 	.word	0x000de941

000d8ac8 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d8ac8:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d8aca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d8acc:	4604      	mov	r4, r0
    if (!queueMutex) {
   d8ace:	b913      	cbnz	r3, d8ad6 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d8ad0:	303c      	adds	r0, #60	; 0x3c
   d8ad2:	f001 f883 	bl	d9bdc <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d8ad6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d8ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d8adc:	f001 b886 	b.w	d9bec <os_mutex_lock>

000d8ae0 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d8ae0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8ae2:	f001 b88b 	b.w	d9bfc <os_mutex_unlock>
	...

000d8ae8 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d8ae8:	b510      	push	{r4, lr}
   d8aea:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d8aec:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d8aee:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d8af0:	f001 fa1c 	bl	d9f2c <stat>
    if (result == 0) {
   d8af4:	b9d0      	cbnz	r0, d8b2c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d8af6:	9b01      	ldr	r3, [sp, #4]
   d8af8:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d8afa:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d8afc:	d506      	bpl.n	d8b0c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d8afe:	4915      	ldr	r1, [pc, #84]	; (d8b54 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d8b00:	4815      	ldr	r0, [pc, #84]	; (d8b58 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d8b02:	f7fb fb97 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d8b06:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d8b08:	b016      	add	sp, #88	; 0x58
   d8b0a:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d8b0c:	4812      	ldr	r0, [pc, #72]	; (d8b58 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d8b0e:	4913      	ldr	r1, [pc, #76]	; (d8b5c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d8b10:	f7fd ffd2 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d8b14:	4620      	mov	r0, r4
   d8b16:	f005 f8d1 	bl	ddcbc <unlink>
    result = mkdir(path, 0777);
   d8b1a:	f240 11ff 	movw	r1, #511	; 0x1ff
   d8b1e:	4620      	mov	r0, r4
   d8b20:	f001 fa0c 	bl	d9f3c <mkdir>
    if (result == 0) {
   d8b24:	b980      	cbnz	r0, d8b48 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d8b26:	490e      	ldr	r1, [pc, #56]	; (d8b60 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d8b28:	4622      	mov	r2, r4
   d8b2a:	e7e9      	b.n	d8b00 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d8b2c:	f001 fc5e 	bl	da3ec <__errno>
   d8b30:	6803      	ldr	r3, [r0, #0]
   d8b32:	2b02      	cmp	r3, #2
   d8b34:	d0f1      	beq.n	d8b1a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d8b36:	f001 fc59 	bl	da3ec <__errno>
   d8b3a:	490a      	ldr	r1, [pc, #40]	; (d8b64 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d8b3c:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d8b3e:	4806      	ldr	r0, [pc, #24]	; (d8b58 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d8b40:	f7fd ffba 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d8b44:	2000      	movs	r0, #0
   d8b46:	e7df      	b.n	d8b08 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d8b48:	f001 fc50 	bl	da3ec <__errno>
   d8b4c:	4906      	ldr	r1, [pc, #24]	; (d8b68 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d8b4e:	6802      	ldr	r2, [r0, #0]
   d8b50:	e7f5      	b.n	d8b3e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d8b52:	bf00      	nop
   d8b54:	000de94e 	.word	0x000de94e
   d8b58:	2003e4a4 	.word	0x2003e4a4
   d8b5c:	000de96b 	.word	0x000de96b
   d8b60:	000de99c 	.word	0x000de99c
   d8b64:	000de988 	.word	0x000de988
   d8b68:	000de9ab 	.word	0x000de9ab

000d8b6c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   d8b6c:	b538      	push	{r3, r4, r5, lr}
   d8b6e:	4615      	mov	r5, r2
   d8b70:	4604      	mov	r4, r0
    String result = name;
   d8b72:	f003 fcfc 	bl	dc56e <_ZN6StringC1EPKc>

    if (ext && *ext) {
   d8b76:	b14d      	cbz	r5, d8b8c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   d8b78:	782b      	ldrb	r3, [r5, #0]
   d8b7a:	b13b      	cbz	r3, d8b8c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d8b7c:	4904      	ldr	r1, [pc, #16]	; (d8b90 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   d8b7e:	4620      	mov	r0, r4
   d8b80:	f003 fd7c 	bl	dc67c <_ZN6String6concatEPKc>
   d8b84:	4629      	mov	r1, r5
   d8b86:	4620      	mov	r0, r4
   d8b88:	f003 fd78 	bl	dc67c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   d8b8c:	4620      	mov	r0, r4
   d8b8e:	bd38      	pop	{r3, r4, r5, pc}
   d8b90:	000deebc 	.word	0x000deebc

000d8b94 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   d8b94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8b96:	4605      	mov	r5, r0
   d8b98:	460e      	mov	r6, r1
   d8b9a:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   d8b9c:	6949      	ldr	r1, [r1, #20]
   d8b9e:	4668      	mov	r0, sp
   d8ba0:	f003 fde6 	bl	dc770 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   d8ba4:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   d8ba6:	b904      	cbnz	r4, d8baa <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   d8ba8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d8baa:	4622      	mov	r2, r4
   d8bac:	4628      	mov	r0, r5
   d8bae:	f7ff ffdd 	bl	d8b6c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   d8bb2:	4668      	mov	r0, sp
   d8bb4:	f003 fc90 	bl	dc4d8 <_ZN6StringD1Ev>
}
   d8bb8:	4628      	mov	r0, r5
   d8bba:	b004      	add	sp, #16
   d8bbc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8bc0 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d8bc0:	b570      	push	{r4, r5, r6, lr}
   d8bc2:	460c      	mov	r4, r1
   d8bc4:	b08e      	sub	sp, #56	; 0x38
    String result;
   d8bc6:	491a      	ldr	r1, [pc, #104]	; (d8c30 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d8bc8:	e9cd 3200 	strd	r3, r2, [sp]
   d8bcc:	4605      	mov	r5, r0
    String result;
   d8bce:	f003 fcce 	bl	dc56e <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   d8bd2:	69e0      	ldr	r0, [r4, #28]
   d8bd4:	68e1      	ldr	r1, [r4, #12]
   d8bd6:	4401      	add	r1, r0
   d8bd8:	3104      	adds	r1, #4
   d8bda:	4628      	mov	r0, r5
   d8bdc:	f003 fc9a 	bl	dc514 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8be0:	1d21      	adds	r1, r4, #4
   d8be2:	a806      	add	r0, sp, #24
   d8be4:	f003 fd0e 	bl	dc604 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   d8be8:	4912      	ldr	r1, [pc, #72]	; (d8c34 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   d8bea:	a802      	add	r0, sp, #8
   d8bec:	f003 fcbf 	bl	dc56e <_ZN6StringC1EPKc>
   d8bf0:	a902      	add	r1, sp, #8
   d8bf2:	a806      	add	r0, sp, #24
   d8bf4:	f003 fd53 	bl	dc69e <_ZplRK15StringSumHelperRK6String>
   d8bf8:	e9dd 3200 	ldrd	r3, r2, [sp]
   d8bfc:	4606      	mov	r6, r0
   d8bfe:	4621      	mov	r1, r4
   d8c00:	a80a      	add	r0, sp, #40	; 0x28
   d8c02:	f7ff ffc7 	bl	d8b94 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   d8c06:	a90a      	add	r1, sp, #40	; 0x28
   d8c08:	4630      	mov	r0, r6
   d8c0a:	f003 fd48 	bl	dc69e <_ZplRK15StringSumHelperRK6String>
   d8c0e:	4601      	mov	r1, r0
   d8c10:	4628      	mov	r0, r5
   d8c12:	f003 fce8 	bl	dc5e6 <_ZN6StringaSERKS_>
   d8c16:	a80a      	add	r0, sp, #40	; 0x28
   d8c18:	f003 fc5e 	bl	dc4d8 <_ZN6StringD1Ev>
   d8c1c:	a802      	add	r0, sp, #8
   d8c1e:	f003 fc5b 	bl	dc4d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d8c22:	a806      	add	r0, sp, #24
   d8c24:	f003 fc58 	bl	dc4d8 <_ZN6StringD1Ev>
}
   d8c28:	4628      	mov	r0, r5
   d8c2a:	b00e      	add	sp, #56	; 0x38
   d8c2c:	bd70      	pop	{r4, r5, r6, pc}
   d8c2e:	bf00      	nop
   d8c30:	000dedbc 	.word	0x000dedbc
   d8c34:	000de941 	.word	0x000de941

000d8c38 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d8c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   d8c3c:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d8c3e:	b08e      	sub	sp, #56	; 0x38
   d8c40:	4605      	mov	r5, r0
   d8c42:	460f      	mov	r7, r1
    if (allExtensions) {
   d8c44:	2a00      	cmp	r2, #0
   d8c46:	d04a      	beq.n	d8cde <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   d8c48:	6840      	ldr	r0, [r0, #4]
   d8c4a:	f001 f987 	bl	d9f5c <opendir>
        if (dir) {
   d8c4e:	4606      	mov	r6, r0
   d8c50:	2800      	cmp	r0, #0
   d8c52:	d041      	beq.n	d8cd8 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   d8c54:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d8d08 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   d8c58:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d8d00 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   d8c5c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d8d04 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   d8c60:	4630      	mov	r0, r6
   d8c62:	f001 f983 	bl	d9f6c <readdir>
                if (!ent) {
   d8c66:	2800      	cmp	r0, #0
   d8c68:	d033      	beq.n	d8cd2 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   d8c6a:	7a82      	ldrb	r2, [r0, #10]
   d8c6c:	2a08      	cmp	r2, #8
   d8c6e:	d1f7      	bne.n	d8c60 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   d8c70:	f100 040b 	add.w	r4, r0, #11
   d8c74:	6969      	ldr	r1, [r5, #20]
   d8c76:	aa01      	add	r2, sp, #4
   d8c78:	4620      	mov	r0, r4
   d8c7a:	f001 fb8f 	bl	da39c <sscanf>
   d8c7e:	2801      	cmp	r0, #1
   d8c80:	d1ee      	bne.n	d8c60 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   d8c82:	9b01      	ldr	r3, [sp, #4]
   d8c84:	429f      	cmp	r7, r3
   d8c86:	d1eb      	bne.n	d8c60 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   d8c88:	1d29      	adds	r1, r5, #4
   d8c8a:	a806      	add	r0, sp, #24
   d8c8c:	f003 fcba 	bl	dc604 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   d8c90:	4651      	mov	r1, sl
   d8c92:	a80a      	add	r0, sp, #40	; 0x28
   d8c94:	f003 fc6b 	bl	dc56e <_ZN6StringC1EPKc>
   d8c98:	a90a      	add	r1, sp, #40	; 0x28
   d8c9a:	a806      	add	r0, sp, #24
   d8c9c:	f003 fcff 	bl	dc69e <_ZplRK15StringSumHelperRK6String>
   d8ca0:	4621      	mov	r1, r4
   d8ca2:	f003 fd08 	bl	dc6b6 <_ZplRK15StringSumHelperPKc>
   d8ca6:	4601      	mov	r1, r0
   d8ca8:	a802      	add	r0, sp, #8
   d8caa:	f003 fcab 	bl	dc604 <_ZN6StringC1ERKS_>
   d8cae:	a80a      	add	r0, sp, #40	; 0x28
   d8cb0:	f003 fc12 	bl	dc4d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d8cb4:	a806      	add	r0, sp, #24
   d8cb6:	f003 fc0f 	bl	dc4d8 <_ZN6StringD1Ev>
                        unlink(path);
   d8cba:	9802      	ldr	r0, [sp, #8]
   d8cbc:	f004 fffe 	bl	ddcbc <unlink>
                        _log.trace("removed %s", path.c_str());
   d8cc0:	4640      	mov	r0, r8
   d8cc2:	9a02      	ldr	r2, [sp, #8]
   d8cc4:	4649      	mov	r1, r9
   d8cc6:	f7fd fee0 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   d8cca:	a802      	add	r0, sp, #8
   d8ccc:	f003 fc04 	bl	dc4d8 <_ZN6StringD1Ev>
                    continue;
   d8cd0:	e7c6      	b.n	d8c60 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   d8cd2:	4630      	mov	r0, r6
   d8cd4:	f001 f952 	bl	d9f7c <closedir>
}
   d8cd8:	b00e      	add	sp, #56	; 0x38
   d8cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   d8cde:	460a      	mov	r2, r1
   d8ce0:	4601      	mov	r1, r0
   d8ce2:	a80a      	add	r0, sp, #40	; 0x28
   d8ce4:	f7ff ff6c 	bl	d8bc0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   d8ce8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8cea:	f004 ffe7 	bl	ddcbc <unlink>
        _log.trace("removed %s", path.c_str());
   d8cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d8cf0:	4903      	ldr	r1, [pc, #12]	; (d8d00 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   d8cf2:	4804      	ldr	r0, [pc, #16]	; (d8d04 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   d8cf4:	f7fd fec9 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   d8cf8:	a80a      	add	r0, sp, #40	; 0x28
   d8cfa:	f003 fbed 	bl	dc4d8 <_ZN6StringD1Ev>
}
   d8cfe:	e7eb      	b.n	d8cd8 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   d8d00:	000de943 	.word	0x000de943
   d8d04:	2003e4a4 	.word	0x2003e4a4
   d8d08:	000de941 	.word	0x000de941

000d8d0c <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d8d0c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d8d0e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d8d10:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d8d12:	b163      	cbz	r3, d8d2e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d8d14:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8d16:	6945      	ldr	r5, [r0, #20]
   d8d18:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d8d1a:	42ae      	cmp	r6, r5
   d8d1c:	d904      	bls.n	d8d28 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   d8d1e:	f855 0b04 	ldr.w	r0, [r5], #4
   d8d22:	f7fb f9bc 	bl	d409e <_ZdlPv>
   d8d26:	e7f8      	b.n	d8d1a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   d8d28:	6820      	ldr	r0, [r4, #0]
   d8d2a:	f7fb f9b8 	bl	d409e <_ZdlPv>
    }
   d8d2e:	4620      	mov	r0, r4
   d8d30:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8d34 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   d8d34:	b510      	push	{r4, lr}
   d8d36:	4b09      	ldr	r3, [pc, #36]	; (d8d5c <_ZN14SequentialFileD1Ev+0x28>)
   d8d38:	4604      	mov	r4, r0
   d8d3a:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d8d3e:	f7ff ffe5 	bl	d8d0c <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   d8d42:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8d46:	f003 fbc7 	bl	dc4d8 <_ZN6StringD1Ev>
   d8d4a:	f104 0014 	add.w	r0, r4, #20
   d8d4e:	f003 fbc3 	bl	dc4d8 <_ZN6StringD1Ev>
   d8d52:	1d20      	adds	r0, r4, #4
   d8d54:	f003 fbc0 	bl	dc4d8 <_ZN6StringD1Ev>
}
   d8d58:	4620      	mov	r0, r4
   d8d5a:	bd10      	pop	{r4, pc}
   d8d5c:	000dea3c 	.word	0x000dea3c

000d8d60 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   d8d60:	b510      	push	{r4, lr}
   d8d62:	4604      	mov	r4, r0
}
   d8d64:	f7ff ffe6 	bl	d8d34 <_ZN14SequentialFileD1Ev>
   d8d68:	4620      	mov	r0, r4
   d8d6a:	2168      	movs	r1, #104	; 0x68
   d8d6c:	f004 f972 	bl	dd054 <_ZdlPvj>
   d8d70:	4620      	mov	r0, r4
   d8d72:	bd10      	pop	{r4, pc}

000d8d74 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d8d74:	68c3      	ldr	r3, [r0, #12]
   d8d76:	68ca      	ldr	r2, [r1, #12]
   d8d78:	1a9b      	subs	r3, r3, r2
   d8d7a:	109b      	asrs	r3, r3, #2
   d8d7c:	1e5a      	subs	r2, r3, #1
   d8d7e:	e9d0 3000 	ldrd	r3, r0, [r0]
   d8d82:	1a1b      	subs	r3, r3, r0
   d8d84:	109b      	asrs	r3, r3, #2
   d8d86:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d8d8a:	6888      	ldr	r0, [r1, #8]
   d8d8c:	680a      	ldr	r2, [r1, #0]
   d8d8e:	1a80      	subs	r0, r0, r2
    }
   d8d90:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d8d94:	4770      	bx	lr
	...

000d8d98 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   d8d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8d9c:	4604      	mov	r4, r0
   d8d9e:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8da0:	f100 0108 	add.w	r1, r0, #8
   d8da4:	3018      	adds	r0, #24
   d8da6:	f7ff ffe5 	bl	d8d74 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   d8daa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d8dae:	4298      	cmp	r0, r3
   d8db0:	d102      	bne.n	d8db8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   d8db2:	4837      	ldr	r0, [pc, #220]	; (d8e90 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   d8db4:	f004 f957 	bl	dd066 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d8db8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d8dba:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8dbc:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d8dbe:	1a11      	subs	r1, r2, r0
   d8dc0:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8dc4:	2901      	cmp	r1, #1
   d8dc6:	d821      	bhi.n	d8e0c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8dc8:	6961      	ldr	r1, [r4, #20]
   d8dca:	1a57      	subs	r7, r2, r1
   d8dcc:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d8dce:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8dd0:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   d8dd4:	d936      	bls.n	d8e44 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   d8dd6:	1b5d      	subs	r5, r3, r5
   d8dd8:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8dda:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d8dde:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d8de0:	42a9      	cmp	r1, r5
   d8de2:	eba3 0201 	sub.w	r2, r3, r1
   d8de6:	d927      	bls.n	d8e38 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   d8de8:	4299      	cmp	r1, r3
   d8dea:	d002      	beq.n	d8df2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8dec:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8dee:	f004 fd7b 	bl	dd8e8 <memmove>
	_M_node = __new_node;
   d8df2:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d8df4:	682b      	ldr	r3, [r5, #0]
   d8df6:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8df8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8dfc:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d8dfe:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   d8e00:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d8e02:	59eb      	ldr	r3, [r5, r7]
   d8e04:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8e06:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8e0a:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8e0c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d8e10:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d8e12:	f7fb f940 	bl	d4096 <_Znwj>
   d8e16:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d8e18:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8e1a:	b113      	cbz	r3, d8e22 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   d8e1c:	f8d8 2000 	ldr.w	r2, [r8]
   d8e20:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d8e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8e24:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d8e26:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d8e28:	685b      	ldr	r3, [r3, #4]
   d8e2a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8e2c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8e30:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d8e32:	61a3      	str	r3, [r4, #24]
      }
   d8e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d8e38:	4299      	cmp	r1, r3
   d8e3a:	d0da      	beq.n	d8df2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8e3c:	1d38      	adds	r0, r7, #4
   d8e3e:	1a80      	subs	r0, r0, r2
   d8e40:	4428      	add	r0, r5
   d8e42:	e7d4      	b.n	d8dee <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d8e44:	f103 0902 	add.w	r9, r3, #2
   d8e48:	2b01      	cmp	r3, #1
   d8e4a:	bf2c      	ite	cs
   d8e4c:	4499      	addcs	r9, r3
   d8e4e:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   d8e52:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   d8e56:	d301      	bcc.n	d8e5c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   d8e58:	f004 f902 	bl	dd060 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8e5c:	ea4f 0089 	mov.w	r0, r9, lsl #2
   d8e60:	f7fb f919 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   d8e64:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d8e66:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8e68:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   d8e6c:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8e6e:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   d8e70:	4291      	cmp	r1, r2
   d8e72:	4682      	mov	sl, r0
   d8e74:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d8e78:	d003      	beq.n	d8e82 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8e7a:	1a52      	subs	r2, r2, r1
   d8e7c:	4628      	mov	r0, r5
   d8e7e:	f004 fd33 	bl	dd8e8 <memmove>
	::operator delete(__p);
   d8e82:	6820      	ldr	r0, [r4, #0]
   d8e84:	f7fb f90b 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d8e88:	e9c4 a900 	strd	sl, r9, [r4]
   d8e8c:	e7b1      	b.n	d8df2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   d8e8e:	bf00      	nop
   d8e90:	000de5c5 	.word	0x000de5c5

000d8e94 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   d8e94:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   d8e96:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   d8e98:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   d8e9a:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   d8e9c:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   d8e9e:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   d8ea0:	d006      	beq.n	d8eb0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8ea2:	b10a      	cbz	r2, d8ea8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   d8ea4:	6809      	ldr	r1, [r1, #0]
   d8ea6:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d8ea8:	699a      	ldr	r2, [r3, #24]
   d8eaa:	3204      	adds	r2, #4
   d8eac:	619a      	str	r2, [r3, #24]
      }
   d8eae:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   d8eb0:	f7ff ff72 	bl	d8d98 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   d8eb4:	e7fb      	b.n	d8eae <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000d8eb8 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   d8eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   d8ebc:	68c3      	ldr	r3, [r0, #12]
   d8ebe:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   d8ec0:	b086      	sub	sp, #24
   d8ec2:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   d8ec4:	d808      	bhi.n	d8ed8 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   d8ec6:	4934      	ldr	r1, [pc, #208]	; (d8f98 <_ZN14SequentialFile7scanDirEv+0xe0>)
   d8ec8:	4834      	ldr	r0, [pc, #208]	; (d8f9c <_ZN14SequentialFile7scanDirEv+0xe4>)
   d8eca:	f7fd fdf5 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d8ece:	2600      	movs	r6, #0
}
   d8ed0:	4630      	mov	r0, r6
   d8ed2:	b006      	add	sp, #24
   d8ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   d8ed8:	6840      	ldr	r0, [r0, #4]
   d8eda:	f7ff fe05 	bl	d8ae8 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   d8ede:	4606      	mov	r6, r0
   d8ee0:	2800      	cmp	r0, #0
   d8ee2:	d0f4      	beq.n	d8ece <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   d8ee4:	6963      	ldr	r3, [r4, #20]
   d8ee6:	6862      	ldr	r2, [r4, #4]
   d8ee8:	492d      	ldr	r1, [pc, #180]	; (d8fa0 <_ZN14SequentialFile7scanDirEv+0xe8>)
   d8eea:	482c      	ldr	r0, [pc, #176]	; (d8f9c <_ZN14SequentialFile7scanDirEv+0xe4>)
   d8eec:	f7fd fdcd 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   d8ef0:	6860      	ldr	r0, [r4, #4]
   d8ef2:	f001 f833 	bl	d9f5c <opendir>
    if (!dir) {
   d8ef6:	4607      	mov	r7, r0
   d8ef8:	2800      	cmp	r0, #0
   d8efa:	d0e8      	beq.n	d8ece <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   d8efc:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d8efe:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d8fa4 <_ZN14SequentialFile7scanDirEv+0xec>
   d8f02:	f8df 8098 	ldr.w	r8, [pc, #152]	; d8f9c <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   d8f06:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   d8f08:	4638      	mov	r0, r7
   d8f0a:	f001 f82f 	bl	d9f6c <readdir>
        if (!ent) {
   d8f0e:	4605      	mov	r5, r0
   d8f10:	2800      	cmp	r0, #0
   d8f12:	d039      	beq.n	d8f88 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   d8f14:	7a83      	ldrb	r3, [r0, #10]
   d8f16:	2b08      	cmp	r3, #8
   d8f18:	d1f6      	bne.n	d8f08 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   d8f1a:	350b      	adds	r5, #11
   d8f1c:	6961      	ldr	r1, [r4, #20]
   d8f1e:	aa01      	add	r2, sp, #4
   d8f20:	4628      	mov	r0, r5
   d8f22:	f001 fa3b 	bl	da39c <sscanf>
   d8f26:	2801      	cmp	r0, #1
   d8f28:	d1ee      	bne.n	d8f08 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   d8f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d8f2c:	b17b      	cbz	r3, d8f4e <_ZN14SequentialFile7scanDirEv+0x96>
   d8f2e:	4629      	mov	r1, r5
   d8f30:	a802      	add	r0, sp, #8
   d8f32:	f003 fb1c 	bl	dc56e <_ZN6StringC1EPKc>
   d8f36:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d8f3a:	a802      	add	r0, sp, #8
   d8f3c:	f003 fbe2 	bl	dc704 <_ZNK6String8endsWithERKS_>
   d8f40:	4682      	mov	sl, r0
   d8f42:	a802      	add	r0, sp, #8
   d8f44:	f003 fac8 	bl	dc4d8 <_ZN6StringD1Ev>
   d8f48:	f1ba 0f00 	cmp.w	sl, #0
   d8f4c:	d0dc      	beq.n	d8f08 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   d8f4e:	6823      	ldr	r3, [r4, #0]
   d8f50:	4629      	mov	r1, r5
   d8f52:	689b      	ldr	r3, [r3, #8]
   d8f54:	4620      	mov	r0, r4
   d8f56:	4798      	blx	r3
   d8f58:	2800      	cmp	r0, #0
   d8f5a:	d0d5      	beq.n	d8f08 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   d8f5c:	9a01      	ldr	r2, [sp, #4]
   d8f5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8f60:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   d8f62:	bfb8      	it	lt
   d8f64:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d8f66:	462b      	mov	r3, r5
   d8f68:	4649      	mov	r1, r9
   d8f6a:	4640      	mov	r0, r8
   d8f6c:	f7fd fd8d 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   d8f70:	4620      	mov	r0, r4
   d8f72:	f7ff fda9 	bl	d8ac8 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   d8f76:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d8f7a:	a901      	add	r1, sp, #4
   d8f7c:	f7ff ff8a 	bl	d8e94 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   d8f80:	4620      	mov	r0, r4
   d8f82:	f7ff fdad 	bl	d8ae0 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   d8f86:	e7bf      	b.n	d8f08 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   d8f88:	4638      	mov	r0, r7
   d8f8a:	f000 fff7 	bl	d9f7c <closedir>
    scanDirCompleted = true;
   d8f8e:	2301      	movs	r3, #1
   d8f90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d8f94:	e79c      	b.n	d8ed0 <_ZN14SequentialFile7scanDirEv+0x18>
   d8f96:	bf00      	nop
   d8f98:	000de9c1 	.word	0x000de9c1
   d8f9c:	2003e4a4 	.word	0x2003e4a4
   d8fa0:	000de9d6 	.word	0x000de9d6
   d8fa4:	000de9f2 	.word	0x000de9f2

000d8fa8 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   d8fa8:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   d8faa:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   d8fae:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d8fb0:	b90b      	cbnz	r3, d8fb6 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   d8fb2:	f7ff ff81 	bl	d8eb8 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   d8fb6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d8fb8:	3001      	adds	r0, #1
   d8fba:	63a0      	str	r0, [r4, #56]	; 0x38
}
   d8fbc:	bd10      	pop	{r4, pc}
	...

000d8fc0 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   d8fc0:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   d8fc2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   d8fc6:	4604      	mov	r4, r0
   d8fc8:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   d8fca:	b90b      	cbnz	r3, d8fd0 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   d8fcc:	f7ff ff74 	bl	d8eb8 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   d8fd0:	4620      	mov	r0, r4
   d8fd2:	f7ff fd79 	bl	d8ac8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d8fd6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   d8fd8:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d8fda:	4293      	cmp	r3, r2
   d8fdc:	d01e      	beq.n	d901c <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   d8fde:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   d8fe0:	b12e      	cbz	r6, d8fee <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   d8fe2:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d8fe4:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d8fe6:	4293      	cmp	r3, r2
   d8fe8:	d00c      	beq.n	d9004 <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   d8fea:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d8fec:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   d8fee:	4620      	mov	r0, r4
   d8ff0:	f7ff fd76 	bl	d8ae0 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   d8ff4:	b125      	cbz	r5, d9000 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   d8ff6:	490a      	ldr	r1, [pc, #40]	; (d9020 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   d8ff8:	480a      	ldr	r0, [pc, #40]	; (d9024 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   d8ffa:	462a      	mov	r2, r5
   d8ffc:	f7fd fd45 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
}
   d9000:	4628      	mov	r0, r5
   d9002:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   d9004:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d9006:	f7fb f84a 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d900a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d900c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d900e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   d9010:	685b      	ldr	r3, [r3, #4]
   d9012:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9014:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d9018:	6522      	str	r2, [r4, #80]	; 0x50
   d901a:	e7e7      	b.n	d8fec <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   d901c:	2500      	movs	r5, #0
   d901e:	e7e6      	b.n	d8fee <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   d9020:	000dea08 	.word	0x000dea08
   d9024:	2003e4a4 	.word	0x2003e4a4

000d9028 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   d9028:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   d902a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   d902e:	9101      	str	r1, [sp, #4]
   d9030:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d9032:	b90b      	cbnz	r3, d9038 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   d9034:	f7ff ff40 	bl	d8eb8 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   d9038:	9b01      	ldr	r3, [sp, #4]
   d903a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d903c:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   d903e:	bfb8      	it	lt
   d9040:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   d9042:	4620      	mov	r0, r4
   d9044:	f7ff fd40 	bl	d8ac8 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   d9048:	a901      	add	r1, sp, #4
   d904a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d904e:	f7ff ff21 	bl	d8e94 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   d9052:	4620      	mov	r0, r4
   d9054:	f7ff fd44 	bl	d8ae0 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d9058:	b002      	add	sp, #8
   d905a:	bd10      	pop	{r4, pc}

000d905c <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   d905c:	b538      	push	{r3, r4, r5, lr}
   d905e:	4604      	mov	r4, r0
    queueMutexLock();
   d9060:	f7ff fd32 	bl	d8ac8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d9064:	f104 0148 	add.w	r1, r4, #72	; 0x48
   d9068:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d906c:	f7ff fe82 	bl	d8d74 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   d9070:	4605      	mov	r5, r0
    queueMutexUnlock();
   d9072:	4620      	mov	r0, r4
   d9074:	f7ff fd34 	bl	d8ae0 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d9078:	4628      	mov	r0, r5
   d907a:	bd38      	pop	{r3, r4, r5, pc}

000d907c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   d907c:	4b01      	ldr	r3, [pc, #4]	; (d9084 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   d907e:	4a02      	ldr	r2, [pc, #8]	; (d9088 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   d9080:	601a      	str	r2, [r3, #0]
}
   d9082:	4770      	bx	lr
   d9084:	2003e4a4 	.word	0x2003e4a4
   d9088:	000dea25 	.word	0x000dea25

000d908c <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d908c:	4770      	bx	lr

000d908e <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d908e:	b510      	push	{r4, lr}
}
   d9090:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d9092:	4604      	mov	r4, r0
}
   d9094:	f003 ffde 	bl	dd054 <_ZdlPvj>
   d9098:	4620      	mov	r0, r4
   d909a:	bd10      	pop	{r4, pc}

000d909c <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d909c:	b510      	push	{r4, lr}
   d909e:	7202      	strb	r2, [r0, #8]
   d90a0:	22ff      	movs	r2, #255	; 0xff
   d90a2:	8142      	strh	r2, [r0, #10]
   d90a4:	2200      	movs	r2, #0
   d90a6:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d90aa:	6142      	str	r2, [r0, #20]
   d90ac:	7602      	strb	r2, [r0, #24]
   d90ae:	61c2      	str	r2, [r0, #28]
    instance = this;
   d90b0:	4a02      	ldr	r2, [pc, #8]	; (d90bc <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d90b2:	4c03      	ldr	r4, [pc, #12]	; (d90c0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d90b4:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d90b6:	e9c0 4100 	strd	r4, r1, [r0]
}
   d90ba:	bd10      	pop	{r4, pc}
   d90bc:	2003e4ac 	.word	0x2003e4ac
   d90c0:	000dec34 	.word	0x000dec34

000d90c4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d90c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d90c8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d90cc:	4604      	mov	r4, r0
   d90ce:	4689      	mov	r9, r1
   d90d0:	4616      	mov	r6, r2
   d90d2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d90d4:	f1b8 0f00 	cmp.w	r8, #0
   d90d8:	d002      	beq.n	d90e0 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d90da:	6840      	ldr	r0, [r0, #4]
   d90dc:	f001 fdbc 	bl	dac58 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d90e0:	7a21      	ldrb	r1, [r4, #8]
   d90e2:	6860      	ldr	r0, [r4, #4]
   d90e4:	f001 fdad 	bl	dac42 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d90e8:	6860      	ldr	r0, [r4, #4]
   d90ea:	6803      	ldr	r3, [r0, #0]
   d90ec:	4649      	mov	r1, r9
   d90ee:	689b      	ldr	r3, [r3, #8]
   d90f0:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d90f2:	6860      	ldr	r0, [r4, #4]
   d90f4:	2100      	movs	r1, #0
   d90f6:	f001 fdab 	bl	dac50 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d90fa:	4605      	mov	r5, r0
   d90fc:	bb00      	cbnz	r0, d9140 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d90fe:	2301      	movs	r3, #1
   d9100:	7a21      	ldrb	r1, [r4, #8]
   d9102:	6860      	ldr	r0, [r4, #4]
   d9104:	463a      	mov	r2, r7
   d9106:	f001 fd8a 	bl	dac1e <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d910a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d910c:	4603      	mov	r3, r0
        if (count == num) {
   d910e:	d109      	bne.n	d9124 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d9110:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d9112:	42be      	cmp	r6, r7
   d9114:	d01c      	beq.n	d9150 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d9116:	6860      	ldr	r0, [r4, #4]
   d9118:	6803      	ldr	r3, [r0, #0]
   d911a:	695b      	ldr	r3, [r3, #20]
   d911c:	4798      	blx	r3
   d911e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d9122:	e7f6      	b.n	d9112 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d9124:	490b      	ldr	r1, [pc, #44]	; (d9154 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d9126:	480c      	ldr	r0, [pc, #48]	; (d9158 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d9128:	464a      	mov	r2, r9
   d912a:	f7fd fcc5 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d912e:	f1b8 0f00 	cmp.w	r8, #0
   d9132:	d002      	beq.n	d913a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d9134:	6860      	ldr	r0, [r4, #4]
   d9136:	f001 fd98 	bl	dac6a <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d913a:	4628      	mov	r0, r5
   d913c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d9140:	4603      	mov	r3, r0
   d9142:	4906      	ldr	r1, [pc, #24]	; (d915c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d9144:	4804      	ldr	r0, [pc, #16]	; (d9158 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d9146:	464a      	mov	r2, r9
   d9148:	f7fd fcb6 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d914c:	2500      	movs	r5, #0
   d914e:	e7ee      	b.n	d912e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d9150:	2501      	movs	r5, #1
   d9152:	e7ec      	b.n	d912e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d9154:	000dea48 	.word	0x000dea48
   d9158:	2003e4a8 	.word	0x2003e4a8
   d915c:	000dea6d 	.word	0x000dea6d

000d9160 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d9160:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d9162:	9300      	str	r3, [sp, #0]
   d9164:	2301      	movs	r3, #1
   d9166:	f7ff ffad 	bl	d90c4 <_ZN6AB180513readRegistersEhPhjb>
}
   d916a:	b003      	add	sp, #12
   d916c:	f85d fb04 	ldr.w	pc, [sp], #4

000d9170 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d9170:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d9172:	8943      	ldrh	r3, [r0, #10]
   d9174:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d9176:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d9178:	d010      	beq.n	d919c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d917a:	4e19      	ldr	r6, [pc, #100]	; (d91e0 <_ZN6AB180510detectChipEv+0x70>)
   d917c:	4d19      	ldr	r5, [pc, #100]	; (d91e4 <_ZN6AB180510detectChipEv+0x74>)
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d917e:	f000 fd85 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d9182:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d9186:	d209      	bcs.n	d919c <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d9188:	8960      	ldrh	r0, [r4, #10]
   d918a:	f003 ff13 	bl	dcfb4 <digitalRead>
   d918e:	2801      	cmp	r0, #1
   d9190:	d004      	beq.n	d919c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d9192:	4631      	mov	r1, r6
   d9194:	4628      	mov	r0, r5
   d9196:	f7fb f84d 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d919a:	e7f0      	b.n	d917e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d919c:	2301      	movs	r3, #1
   d919e:	f10d 0207 	add.w	r2, sp, #7
   d91a2:	2128      	movs	r1, #40	; 0x28
   d91a4:	4620      	mov	r0, r4
   d91a6:	f7ff ffdb 	bl	d9160 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d91aa:	b930      	cbnz	r0, d91ba <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d91ac:	480d      	ldr	r0, [pc, #52]	; (d91e4 <_ZN6AB180510detectChipEv+0x74>)
   d91ae:	490e      	ldr	r1, [pc, #56]	; (d91e8 <_ZN6AB180510detectChipEv+0x78>)
   d91b0:	f7fb f840 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d91b4:	2000      	movs	r0, #0
}
   d91b6:	b002      	add	sp, #8
   d91b8:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d91ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d91be:	2b18      	cmp	r3, #24
   d91c0:	d1f4      	bne.n	d91ac <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d91c2:	2301      	movs	r3, #1
   d91c4:	f10d 0207 	add.w	r2, sp, #7
   d91c8:	2129      	movs	r1, #41	; 0x29
   d91ca:	4620      	mov	r0, r4
   d91cc:	f7ff ffc8 	bl	d9160 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d91d0:	2800      	cmp	r0, #0
   d91d2:	d0eb      	beq.n	d91ac <_ZN6AB180510detectChipEv+0x3c>
   d91d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d91d8:	2b05      	cmp	r3, #5
   d91da:	d1e7      	bne.n	d91ac <_ZN6AB180510detectChipEv+0x3c>
   d91dc:	e7eb      	b.n	d91b6 <_ZN6AB180510detectChipEv+0x46>
   d91de:	bf00      	nop
   d91e0:	000dea91 	.word	0x000dea91
   d91e4:	2003e4a8 	.word	0x2003e4a8
   d91e8:	000deaa6 	.word	0x000deaa6

000d91ec <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d91ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d91f0:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d91f4:	4604      	mov	r4, r0
   d91f6:	460f      	mov	r7, r1
   d91f8:	4615      	mov	r5, r2
   d91fa:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d91fc:	f1b8 0f00 	cmp.w	r8, #0
   d9200:	d002      	beq.n	d9208 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d9202:	6840      	ldr	r0, [r0, #4]
   d9204:	f001 fd28 	bl	dac58 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d9208:	7a21      	ldrb	r1, [r4, #8]
   d920a:	6860      	ldr	r0, [r4, #4]
   d920c:	f001 fd19 	bl	dac42 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d9210:	6860      	ldr	r0, [r4, #4]
   d9212:	6803      	ldr	r3, [r0, #0]
   d9214:	4639      	mov	r1, r7
   d9216:	689b      	ldr	r3, [r3, #8]
   d9218:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d921a:	442e      	add	r6, r5
   d921c:	42b5      	cmp	r5, r6
   d921e:	6860      	ldr	r0, [r4, #4]
   d9220:	d005      	beq.n	d922e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d9222:	6803      	ldr	r3, [r0, #0]
   d9224:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9228:	689b      	ldr	r3, [r3, #8]
   d922a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d922c:	e7f6      	b.n	d921c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d922e:	2101      	movs	r1, #1
   d9230:	f001 fd0e 	bl	dac50 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d9234:	4603      	mov	r3, r0
   d9236:	b170      	cbz	r0, d9256 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d9238:	4908      	ldr	r1, [pc, #32]	; (d925c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d923a:	4809      	ldr	r0, [pc, #36]	; (d9260 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d923c:	463a      	mov	r2, r7
   d923e:	f7fd fc3b 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d9242:	2500      	movs	r5, #0
    }

    if (lock) {
   d9244:	f1b8 0f00 	cmp.w	r8, #0
   d9248:	d002      	beq.n	d9250 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d924a:	6860      	ldr	r0, [r4, #4]
   d924c:	f001 fd0d 	bl	dac6a <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d9250:	4628      	mov	r0, r5
   d9252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d9256:	2501      	movs	r5, #1
   d9258:	e7f4      	b.n	d9244 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d925a:	bf00      	nop
   d925c:	000deab3 	.word	0x000deab3
   d9260:	2003e4a8 	.word	0x2003e4a8

000d9264 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d9264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9266:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d926a:	9300      	str	r3, [sp, #0]
   d926c:	f10d 020f 	add.w	r2, sp, #15
   d9270:	2301      	movs	r3, #1
   d9272:	f7ff ffbb 	bl	d91ec <_ZN6AB180514writeRegistersEhPKhjb>
}
   d9276:	b005      	add	sp, #20
   d9278:	f85d fb04 	ldr.w	pc, [sp], #4

000d927c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d927e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d9280:	460c      	mov	r4, r1
   d9282:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d9284:	491a      	ldr	r1, [pc, #104]	; (d92f0 <_ZN6AB18056setWDTEi+0x74>)
   d9286:	481b      	ldr	r0, [pc, #108]	; (d92f4 <_ZN6AB18056setWDTEi+0x78>)
   d9288:	f7fa ffd4 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d928c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d928e:	bfb8      	it	lt
   d9290:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d9292:	b97c      	cbnz	r4, d92b4 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d9294:	2301      	movs	r3, #1
   d9296:	4622      	mov	r2, r4
   d9298:	211b      	movs	r1, #27
   d929a:	4628      	mov	r0, r5
   d929c:	f7ff ffe2 	bl	d9264 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d92a0:	4915      	ldr	r1, [pc, #84]	; (d92f8 <_ZN6AB18056setWDTEi+0x7c>)
   d92a2:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d92a4:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d92a6:	4813      	ldr	r0, [pc, #76]	; (d92f4 <_ZN6AB18056setWDTEi+0x78>)
   d92a8:	f7fd fbef 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d92ac:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d92ae:	616c      	str	r4, [r5, #20]
}
   d92b0:	4630      	mov	r0, r6
   d92b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d92b4:	2c03      	cmp	r4, #3
   d92b6:	dd19      	ble.n	d92ec <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d92b8:	10a7      	asrs	r7, r4, #2
   d92ba:	2f1f      	cmp	r7, #31
   d92bc:	bfa8      	it	ge
   d92be:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d92c0:	00ba      	lsls	r2, r7, #2
   d92c2:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d92c6:	2301      	movs	r3, #1
   d92c8:	b2d2      	uxtb	r2, r2
   d92ca:	211b      	movs	r1, #27
   d92cc:	4628      	mov	r0, r5
   d92ce:	f7ff ffc9 	bl	d9264 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d92d2:	463a      	mov	r2, r7
   d92d4:	4603      	mov	r3, r0
   d92d6:	4909      	ldr	r1, [pc, #36]	; (d92fc <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d92d8:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d92da:	4806      	ldr	r0, [pc, #24]	; (d92f4 <_ZN6AB18056setWDTEi+0x78>)
   d92dc:	f7fd fbd5 	bl	d6a8a <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d92e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d92e4:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d92e6:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d92e8:	616f      	str	r7, [r5, #20]
   d92ea:	e7e1      	b.n	d92b0 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d92ec:	2701      	movs	r7, #1
   d92ee:	e7e7      	b.n	d92c0 <_ZN6AB18056setWDTEi+0x44>
   d92f0:	000dead8 	.word	0x000dead8
   d92f4:	2003e4a8 	.word	0x2003e4a8
   d92f8:	000deae2 	.word	0x000deae2
   d92fc:	000deafe 	.word	0x000deafe

000d9300 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d9300:	460b      	mov	r3, r1
    if (instance) {
   d9302:	4907      	ldr	r1, [pc, #28]	; (d9320 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d9304:	4602      	mov	r2, r0
    if (instance) {
   d9306:	6808      	ldr	r0, [r1, #0]
   d9308:	b148      	cbz	r0, d931e <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d930a:	2b00      	cmp	r3, #0
   d930c:	bf08      	it	eq
   d930e:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d9312:	d104      	bne.n	d931e <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d9314:	68c3      	ldr	r3, [r0, #12]
   d9316:	b113      	cbz	r3, d931e <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d9318:	2100      	movs	r1, #0
   d931a:	f7ff bfaf 	b.w	d927c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d931e:	4770      	bx	lr
   d9320:	2003e4ac 	.word	0x2003e4ac

000d9324 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d9324:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d9328:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d932c:	4605      	mov	r5, r0
   d932e:	4616      	mov	r6, r2
   d9330:	461f      	mov	r7, r3
    if (lock) {
   d9332:	f1b8 0f00 	cmp.w	r8, #0
   d9336:	d004      	beq.n	d9342 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d9338:	6840      	ldr	r0, [r0, #4]
   d933a:	9101      	str	r1, [sp, #4]
   d933c:	f001 fc8c 	bl	dac58 <_ZN7TwoWire4lockEv>
   d9340:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d9342:	9101      	str	r1, [sp, #4]
   d9344:	2300      	movs	r3, #0
   d9346:	f10d 020f 	add.w	r2, sp, #15
   d934a:	4628      	mov	r0, r5
   d934c:	f7ff ff08 	bl	d9160 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d9350:	4604      	mov	r4, r0
   d9352:	b160      	cbz	r0, d936e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d9354:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d9358:	ea03 0206 	and.w	r2, r3, r6
   d935c:	433a      	orrs	r2, r7
        if (newValue != value) {
   d935e:	4293      	cmp	r3, r2
   d9360:	d005      	beq.n	d936e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d9362:	9901      	ldr	r1, [sp, #4]
   d9364:	2300      	movs	r3, #0
   d9366:	4628      	mov	r0, r5
   d9368:	f7ff ff7c 	bl	d9264 <_ZN6AB180513writeRegisterEhhb>
   d936c:	4604      	mov	r4, r0
    if (lock) {
   d936e:	f1b8 0f00 	cmp.w	r8, #0
   d9372:	d002      	beq.n	d937a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d9374:	6868      	ldr	r0, [r5, #4]
   d9376:	f001 fc78 	bl	dac6a <_ZN7TwoWire6unlockEv>
}
   d937a:	4620      	mov	r0, r4
   d937c:	b004      	add	sp, #16
   d937e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9382 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d9382:	b513      	push	{r0, r1, r4, lr}
   d9384:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d9386:	f10d 0207 	add.w	r2, sp, #7
   d938a:	f7ff fee9 	bl	d9160 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d938e:	b128      	cbz	r0, d939c <_ZN6AB180510isBitClearEhhb+0x1a>
   d9390:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d9394:	421c      	tst	r4, r3
   d9396:	bf0c      	ite	eq
   d9398:	2001      	moveq	r0, #1
   d939a:	2000      	movne	r0, #0
}
   d939c:	b002      	add	sp, #8
   d939e:	bd10      	pop	{r4, pc}

000d93a0 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d93a0:	b513      	push	{r0, r1, r4, lr}
   d93a2:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d93a4:	f10d 0207 	add.w	r2, sp, #7
   d93a8:	f7ff feda 	bl	d9160 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d93ac:	b128      	cbz	r0, d93ba <_ZN6AB18058isBitSetEhhb+0x1a>
   d93ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d93b2:	421c      	tst	r4, r3
   d93b4:	bf14      	ite	ne
   d93b6:	2001      	movne	r0, #1
   d93b8:	2000      	moveq	r0, #0
}
   d93ba:	b002      	add	sp, #8
   d93bc:	bd10      	pop	{r4, pc}

000d93be <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d93be:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d93c0:	43d2      	mvns	r2, r2
   d93c2:	9300      	str	r3, [sp, #0]
   d93c4:	b2d2      	uxtb	r2, r2
   d93c6:	2300      	movs	r3, #0
   d93c8:	f7ff ffac 	bl	d9324 <_ZN6AB180512maskRegisterEhhhb>
}
   d93cc:	b003      	add	sp, #12
   d93ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d93d4 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d93d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d93d6:	2301      	movs	r3, #1
   d93d8:	f10d 0207 	add.w	r2, sp, #7
   d93dc:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d93de:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d93e0:	f7ff febe 	bl	d9160 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d93e4:	4605      	mov	r5, r0
   d93e6:	b938      	cbnz	r0, d93f8 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d93e8:	491e      	ldr	r1, [pc, #120]	; (d9464 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d93ea:	481f      	ldr	r0, [pc, #124]	; (d9468 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d93ec:	22ad      	movs	r2, #173	; 0xad
   d93ee:	f7fd fb63 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
}
   d93f2:	4628      	mov	r0, r5
   d93f4:	b003      	add	sp, #12
   d93f6:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d93f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d93fc:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d9400:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d9404:	d00b      	beq.n	d941e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d9406:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d9408:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d940a:	210f      	movs	r1, #15
   d940c:	4620      	mov	r0, r4
   d940e:	f7ff ffd6 	bl	d93be <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d9412:	4a16      	ldr	r2, [pc, #88]	; (d946c <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d9414:	4916      	ldr	r1, [pc, #88]	; (d9470 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d9416:	4814      	ldr	r0, [pc, #80]	; (d9468 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d9418:	f7fa ff0c 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d941c:	e7e9      	b.n	d93f2 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d941e:	2208      	movs	r2, #8
   d9420:	2117      	movs	r1, #23
   d9422:	4620      	mov	r0, r4
   d9424:	f7ff ffbc 	bl	d93a0 <_ZN6AB18058isBitSetEhhb>
   d9428:	b118      	cbz	r0, d9432 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d942a:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d942c:	4a11      	ldr	r2, [pc, #68]	; (d9474 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d942e:	61e3      	str	r3, [r4, #28]
   d9430:	e7f0      	b.n	d9414 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d9432:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d9436:	071a      	lsls	r2, r3, #28
   d9438:	d509      	bpl.n	d944e <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d943a:	2303      	movs	r3, #3
   d943c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d943e:	2208      	movs	r2, #8
   d9440:	2301      	movs	r3, #1
   d9442:	210f      	movs	r1, #15
   d9444:	4620      	mov	r0, r4
   d9446:	f7ff ffba 	bl	d93be <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d944a:	4a0b      	ldr	r2, [pc, #44]	; (d9478 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d944c:	e7e2      	b.n	d9414 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d944e:	075b      	lsls	r3, r3, #29
   d9450:	d5cf      	bpl.n	d93f2 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d9452:	2204      	movs	r2, #4
   d9454:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d9456:	2301      	movs	r3, #1
   d9458:	210f      	movs	r1, #15
   d945a:	4620      	mov	r0, r4
   d945c:	f7ff ffaf 	bl	d93be <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d9460:	4a06      	ldr	r2, [pc, #24]	; (d947c <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d9462:	e7d7      	b.n	d9414 <_ZN6AB180516updateWakeReasonEv+0x40>
   d9464:	000deb51 	.word	0x000deb51
   d9468:	2003e4a8 	.word	0x2003e4a8
   d946c:	000deb22 	.word	0x000deb22
   d9470:	000deb70 	.word	0x000deb70
   d9474:	000deb2b 	.word	0x000deb2b
   d9478:	000deb3b 	.word	0x000deb3b
   d947c:	000deb4b 	.word	0x000deb4b

000d9480 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d9480:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d9482:	9300      	str	r3, [sp, #0]
   d9484:	4613      	mov	r3, r2
   d9486:	22ff      	movs	r2, #255	; 0xff
   d9488:	f7ff ff4c 	bl	d9324 <_ZN6AB180512maskRegisterEhhhb>
}
   d948c:	b003      	add	sp, #12
   d948e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9492 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d9492:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d9496:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d949a:	4605      	mov	r5, r0
   d949c:	460c      	mov	r4, r1
   d949e:	4691      	mov	r9, r2
   d94a0:	461f      	mov	r7, r3
    if (lock) {
   d94a2:	f1ba 0f00 	cmp.w	sl, #0
   d94a6:	d002      	beq.n	d94ae <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d94a8:	6840      	ldr	r0, [r0, #4]
   d94aa:	f001 fbd5 	bl	dac58 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d94ae:	b307      	cbz	r7, d94f2 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d94b0:	2f20      	cmp	r7, #32
   d94b2:	463e      	mov	r6, r7
   d94b4:	bf28      	it	cs
   d94b6:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d94b8:	2c7f      	cmp	r4, #127	; 0x7f
   d94ba:	d826      	bhi.n	d950a <_ZN6AB18057readRamEjPhjb+0x78>
   d94bc:	1933      	adds	r3, r6, r4
   d94be:	2b80      	cmp	r3, #128	; 0x80
   d94c0:	d901      	bls.n	d94c6 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d94c2:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d94c6:	2301      	movs	r3, #1
   d94c8:	2204      	movs	r2, #4
   d94ca:	213f      	movs	r1, #63	; 0x3f
   d94cc:	4628      	mov	r0, r5
   d94ce:	f7ff ff76 	bl	d93be <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d94d2:	2300      	movs	r3, #0
   d94d4:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d94d8:	9300      	str	r3, [sp, #0]
   d94da:	464a      	mov	r2, r9
   d94dc:	4633      	mov	r3, r6
   d94de:	b2c9      	uxtb	r1, r1
   d94e0:	4628      	mov	r0, r5
   d94e2:	f7ff fdef 	bl	d90c4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d94e6:	4680      	mov	r8, r0
   d94e8:	b128      	cbz	r0, d94f6 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d94ea:	4434      	add	r4, r6
        dataLen -= count;
   d94ec:	1bbf      	subs	r7, r7, r6
        data += count;
   d94ee:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d94f0:	e7dd      	b.n	d94ae <_ZN6AB18057readRamEjPhjb+0x1c>
   d94f2:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d94f6:	f1ba 0f00 	cmp.w	sl, #0
   d94fa:	d002      	beq.n	d9502 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d94fc:	6868      	ldr	r0, [r5, #4]
   d94fe:	f001 fbb4 	bl	dac6a <_ZN7TwoWire6unlockEv>
}
   d9502:	4640      	mov	r0, r8
   d9504:	b002      	add	sp, #8
   d9506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d950a:	2301      	movs	r3, #1
   d950c:	2204      	movs	r2, #4
   d950e:	213f      	movs	r1, #63	; 0x3f
   d9510:	4628      	mov	r0, r5
   d9512:	f7ff ffb5 	bl	d9480 <_ZN6AB180514setRegisterBitEhhb>
   d9516:	e7dc      	b.n	d94d2 <_ZN6AB18057readRamEjPhjb+0x40>

000d9518 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d9518:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d951c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d9520:	4605      	mov	r5, r0
   d9522:	460c      	mov	r4, r1
   d9524:	4691      	mov	r9, r2
   d9526:	461f      	mov	r7, r3
    if (lock) {
   d9528:	f1ba 0f00 	cmp.w	sl, #0
   d952c:	d002      	beq.n	d9534 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d952e:	6840      	ldr	r0, [r0, #4]
   d9530:	f001 fb92 	bl	dac58 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d9534:	b307      	cbz	r7, d9578 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d9536:	2f1f      	cmp	r7, #31
   d9538:	463e      	mov	r6, r7
   d953a:	bf28      	it	cs
   d953c:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d953e:	2c7f      	cmp	r4, #127	; 0x7f
   d9540:	d826      	bhi.n	d9590 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d9542:	1933      	adds	r3, r6, r4
   d9544:	2b80      	cmp	r3, #128	; 0x80
   d9546:	d901      	bls.n	d954c <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d9548:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d954c:	2301      	movs	r3, #1
   d954e:	2204      	movs	r2, #4
   d9550:	213f      	movs	r1, #63	; 0x3f
   d9552:	4628      	mov	r0, r5
   d9554:	f7ff ff33 	bl	d93be <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d9558:	2300      	movs	r3, #0
   d955a:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d955e:	9300      	str	r3, [sp, #0]
   d9560:	464a      	mov	r2, r9
   d9562:	4633      	mov	r3, r6
   d9564:	b2c9      	uxtb	r1, r1
   d9566:	4628      	mov	r0, r5
   d9568:	f7ff fe40 	bl	d91ec <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d956c:	4680      	mov	r8, r0
   d956e:	b128      	cbz	r0, d957c <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d9570:	4434      	add	r4, r6
        dataLen -= count;
   d9572:	1bbf      	subs	r7, r7, r6
        data += count;
   d9574:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d9576:	e7dd      	b.n	d9534 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d9578:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d957c:	f1ba 0f00 	cmp.w	sl, #0
   d9580:	d002      	beq.n	d9588 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d9582:	6868      	ldr	r0, [r5, #4]
   d9584:	f001 fb71 	bl	dac6a <_ZN7TwoWire6unlockEv>
}
   d9588:	4640      	mov	r0, r8
   d958a:	b002      	add	sp, #8
   d958c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d9590:	2301      	movs	r3, #1
   d9592:	2204      	movs	r2, #4
   d9594:	213f      	movs	r1, #63	; 0x3f
   d9596:	4628      	mov	r0, r5
   d9598:	f7ff ff72 	bl	d9480 <_ZN6AB180514setRegisterBitEhhb>
   d959c:	e7dc      	b.n	d9558 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d95a0 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d95a0:	b530      	push	{r4, r5, lr}
   d95a2:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d95a4:	680d      	ldr	r5, [r1, #0]
   d95a6:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d95aa:	9503      	str	r5, [sp, #12]
   d95ac:	684d      	ldr	r5, [r1, #4]
   d95ae:	9502      	str	r5, [sp, #8]
   d95b0:	688d      	ldr	r5, [r1, #8]
   d95b2:	9501      	str	r5, [sp, #4]
   d95b4:	68c9      	ldr	r1, [r1, #12]
   d95b6:	9100      	str	r1, [sp, #0]
   d95b8:	3301      	adds	r3, #1
   d95ba:	4904      	ldr	r1, [pc, #16]	; (d95cc <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d95bc:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d95c0:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d95c2:	f003 f8d5 	bl	dc770 <_ZN6String6formatEPKcz>
}
   d95c6:	4620      	mov	r0, r4
   d95c8:	b005      	add	sp, #20
   d95ca:	bd30      	pop	{r4, r5, pc}
   d95cc:	000deb81 	.word	0x000deb81

000d95d0 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d95d0:	1103      	asrs	r3, r0, #4
}
   d95d2:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d95d4:	f000 000f 	and.w	r0, r0, #15
}
   d95d8:	fb02 0003 	mla	r0, r2, r3, r0
   d95dc:	4770      	bx	lr

000d95de <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d95de:	b538      	push	{r3, r4, r5, lr}
   d95e0:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d95e2:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d95e4:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d95e6:	f7ff fff3 	bl	d95d0 <_ZN6AB180510bcdToValueEh>
   d95ea:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d95ec:	7860      	ldrb	r0, [r4, #1]
   d95ee:	f7ff ffef 	bl	d95d0 <_ZN6AB180510bcdToValueEh>
   d95f2:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d95f4:	78a0      	ldrb	r0, [r4, #2]
   d95f6:	f7ff ffeb 	bl	d95d0 <_ZN6AB180510bcdToValueEh>
   d95fa:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d95fc:	78e0      	ldrb	r0, [r4, #3]
   d95fe:	f7ff ffe7 	bl	d95d0 <_ZN6AB180510bcdToValueEh>
   d9602:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d9604:	7920      	ldrb	r0, [r4, #4]
   d9606:	f7ff ffe3 	bl	d95d0 <_ZN6AB180510bcdToValueEh>
   d960a:	3801      	subs	r0, #1
   d960c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d960e:	b92d      	cbnz	r5, d961c <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d9610:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d9612:	7828      	ldrb	r0, [r5, #0]
   d9614:	f7ff ffdc 	bl	d95d0 <_ZN6AB180510bcdToValueEh>
   d9618:	6188      	str	r0, [r1, #24]
}
   d961a:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d961c:	7960      	ldrb	r0, [r4, #5]
   d961e:	f7ff ffd7 	bl	d95d0 <_ZN6AB180510bcdToValueEh>
   d9622:	3064      	adds	r0, #100	; 0x64
   d9624:	1da5      	adds	r5, r4, #6
   d9626:	6148      	str	r0, [r1, #20]
   d9628:	e7f3      	b.n	d9612 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d962c <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d962c:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d962e:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d9630:	b088      	sub	sp, #32
   d9632:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d9634:	461a      	mov	r2, r3
   d9636:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d9638:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d963a:	f7ff fea2 	bl	d9382 <_ZN6AB180510isBitClearEhhb>
   d963e:	b1f0      	cbz	r0, d967e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d9640:	2308      	movs	r3, #8
   d9642:	2601      	movs	r6, #1
   d9644:	4620      	mov	r0, r4
   d9646:	9600      	str	r6, [sp, #0]
   d9648:	eb0d 0203 	add.w	r2, sp, r3
   d964c:	2100      	movs	r1, #0
   d964e:	f7ff fd39 	bl	d90c4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d9652:	4604      	mov	r4, r0
   d9654:	b198      	cbz	r0, d967e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d9656:	4632      	mov	r2, r6
   d9658:	4629      	mov	r1, r5
   d965a:	f10d 0009 	add.w	r0, sp, #9
   d965e:	f7ff ffbe 	bl	d95de <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d9662:	a804      	add	r0, sp, #16
   d9664:	f7ff ff9c 	bl	d95a0 <_ZN6AB180510tmToStringEPK2tm>
   d9668:	4808      	ldr	r0, [pc, #32]	; (d968c <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d966a:	9a04      	ldr	r2, [sp, #16]
   d966c:	4908      	ldr	r1, [pc, #32]	; (d9690 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d966e:	f7fa fde1 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d9672:	a804      	add	r0, sp, #16
   d9674:	f002 ff30 	bl	dc4d8 <_ZN6StringD1Ev>
}
   d9678:	4620      	mov	r0, r4
   d967a:	b008      	add	sp, #32
   d967c:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d967e:	2224      	movs	r2, #36	; 0x24
   d9680:	2100      	movs	r1, #0
   d9682:	4628      	mov	r0, r5
   d9684:	f004 f94a 	bl	dd91c <memset>
   d9688:	2400      	movs	r4, #0
   d968a:	e7f5      	b.n	d9678 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d968c:	2003e4a8 	.word	0x2003e4a8
   d9690:	000deb9f 	.word	0x000deb9f

000d9694 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d9694:	b530      	push	{r4, r5, lr}
   d9696:	b08b      	sub	sp, #44	; 0x2c
   d9698:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d969a:	a901      	add	r1, sp, #4
   d969c:	f7ff ffc6 	bl	d962c <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d96a0:	4604      	mov	r4, r0
   d96a2:	b120      	cbz	r0, d96ae <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d96a4:	a801      	add	r0, sp, #4
   d96a6:	f000 fec9 	bl	da43c <mktime>
   d96aa:	e9c5 0100 	strd	r0, r1, [r5]
}
   d96ae:	4620      	mov	r0, r4
   d96b0:	b00b      	add	sp, #44	; 0x2c
   d96b2:	bd30      	pop	{r4, r5, pc}

000d96b4 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d96b4:	b510      	push	{r4, lr}
   d96b6:	4604      	mov	r4, r0
   d96b8:	b088      	sub	sp, #32
    if (callBegin) {
   d96ba:	b111      	cbz	r1, d96c2 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d96bc:	6840      	ldr	r0, [r0, #4]
   d96be:	f001 fa91 	bl	dabe4 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d96c2:	4620      	mov	r0, r4
   d96c4:	f7ff fd54 	bl	d9170 <_ZN6AB180510detectChipEv>
   d96c8:	b370      	cbz	r0, d9728 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d96ca:	4620      	mov	r0, r4
   d96cc:	f7ff fe82 	bl	d93d4 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d96d0:	2301      	movs	r3, #1
   d96d2:	461a      	mov	r2, r3
   d96d4:	2110      	movs	r1, #16
   d96d6:	4620      	mov	r0, r4
   d96d8:	f7ff fe53 	bl	d9382 <_ZN6AB180510isBitClearEhhb>
   d96dc:	b1d8      	cbz	r0, d9716 <_ZN6AB18055setupEb+0x62>
   d96de:	f003 fa21 	bl	dcb24 <_ZN9TimeClass7isValidEv>
   d96e2:	b9c0      	cbnz	r0, d9716 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d96e4:	a902      	add	r1, sp, #8
   d96e6:	4620      	mov	r0, r4
   d96e8:	f7ff ffd4 	bl	d9694 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d96ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d96f0:	f003 f91f 	bl	dc932 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d96f4:	4b0f      	ldr	r3, [pc, #60]	; (d9734 <_ZN6AB18055setupEb+0x80>)
   d96f6:	4910      	ldr	r1, [pc, #64]	; (d9738 <_ZN6AB18055setupEb+0x84>)
   d96f8:	681b      	ldr	r3, [r3, #0]
   d96fa:	9300      	str	r3, [sp, #0]
   d96fc:	a804      	add	r0, sp, #16
   d96fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9702:	f003 f9cd 	bl	dcaa0 <_ZN9TimeClass6formatExPKc>
   d9706:	480d      	ldr	r0, [pc, #52]	; (d973c <_ZN6AB18055setupEb+0x88>)
   d9708:	9a04      	ldr	r2, [sp, #16]
   d970a:	490d      	ldr	r1, [pc, #52]	; (d9740 <_ZN6AB18055setupEb+0x8c>)
   d970c:	f7fa fd92 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d9710:	a804      	add	r0, sp, #16
   d9712:	f002 fee1 	bl	dc4d8 <_ZN6StringD1Ev>
   d9716:	4a0b      	ldr	r2, [pc, #44]	; (d9744 <_ZN6AB18055setupEb+0x90>)
   d9718:	2300      	movs	r3, #0
   d971a:	2100      	movs	r1, #0
   d971c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d9720:	f000 fd0e 	bl	da140 <system_subscribe_event>
}
   d9724:	b008      	add	sp, #32
   d9726:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d9728:	4907      	ldr	r1, [pc, #28]	; (d9748 <_ZN6AB18055setupEb+0x94>)
   d972a:	4804      	ldr	r0, [pc, #16]	; (d973c <_ZN6AB18055setupEb+0x88>)
   d972c:	f7fd f9c4 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
   d9730:	e7f1      	b.n	d9716 <_ZN6AB18055setupEb+0x62>
   d9732:	bf00      	nop
   d9734:	2003dcac 	.word	0x2003dcac
   d9738:	2003e5dc 	.word	0x2003e5dc
   d973c:	2003e4a8 	.word	0x2003e4a8
   d9740:	000debad 	.word	0x000debad
   d9744:	000d9301 	.word	0x000d9301
   d9748:	000debca 	.word	0x000debca

000d974c <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d974c:	220a      	movs	r2, #10
   d974e:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d9752:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d9756:	fb93 f1f2 	sdiv	r1, r3, r2
   d975a:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d975e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d9762:	b2c0      	uxtb	r0, r0
   d9764:	4770      	bx	lr

000d9766 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d9766:	b570      	push	{r4, r5, r6, lr}
   d9768:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d976a:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d976c:	460c      	mov	r4, r1
   d976e:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d9770:	f7ff ffec 	bl	d974c <_ZN6AB180510valueToBcdEi>
   d9774:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d9776:	6868      	ldr	r0, [r5, #4]
   d9778:	f7ff ffe8 	bl	d974c <_ZN6AB180510valueToBcdEi>
   d977c:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d977e:	68a8      	ldr	r0, [r5, #8]
   d9780:	f7ff ffe4 	bl	d974c <_ZN6AB180510valueToBcdEi>
   d9784:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d9786:	68e8      	ldr	r0, [r5, #12]
   d9788:	f7ff ffe0 	bl	d974c <_ZN6AB180510valueToBcdEi>
   d978c:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d978e:	6928      	ldr	r0, [r5, #16]
   d9790:	3001      	adds	r0, #1
   d9792:	f7ff ffdb 	bl	d974c <_ZN6AB180510valueToBcdEi>
   d9796:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d9798:	b92e      	cbnz	r6, d97a6 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d979a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d979c:	69a8      	ldr	r0, [r5, #24]
   d979e:	f7ff ffd5 	bl	d974c <_ZN6AB180510valueToBcdEi>
   d97a2:	7030      	strb	r0, [r6, #0]
}
   d97a4:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d97a6:	696a      	ldr	r2, [r5, #20]
   d97a8:	2364      	movs	r3, #100	; 0x64
   d97aa:	fb92 f0f3 	sdiv	r0, r2, r3
   d97ae:	fb03 2010 	mls	r0, r3, r0, r2
   d97b2:	f7ff ffcb 	bl	d974c <_ZN6AB180510valueToBcdEi>
   d97b6:	1da6      	adds	r6, r4, #6
   d97b8:	7160      	strb	r0, [r4, #5]
   d97ba:	e7ef      	b.n	d979c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d97bc <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d97bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d97be:	b087      	sub	sp, #28
   d97c0:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d97c2:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d97c4:	4616      	mov	r6, r2
   d97c6:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d97c8:	f7ff feea 	bl	d95a0 <_ZN6AB180510tmToStringEPK2tm>
   d97cc:	481e      	ldr	r0, [pc, #120]	; (d9848 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d97ce:	9a02      	ldr	r2, [sp, #8]
   d97d0:	491e      	ldr	r1, [pc, #120]	; (d984c <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d97d2:	f7fa fd2f 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d97d6:	a802      	add	r0, sp, #8
   d97d8:	f002 fe7e 	bl	dc4d8 <_ZN6StringD1Ev>
    if (lock) {
   d97dc:	b116      	cbz	r6, d97e4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d97de:	6868      	ldr	r0, [r5, #4]
   d97e0:	f001 fa3a 	bl	dac58 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d97e4:	4620      	mov	r0, r4
   d97e6:	2201      	movs	r2, #1
   d97e8:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d97ec:	2700      	movs	r7, #0
   d97ee:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d97f2:	f7ff ffb8 	bl	d9766 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d97f6:	2301      	movs	r3, #1
   d97f8:	461a      	mov	r2, r3
   d97fa:	2110      	movs	r1, #16
   d97fc:	4628      	mov	r0, r5
   d97fe:	f7ff fe3f 	bl	d9480 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d9802:	4604      	mov	r4, r0
   d9804:	b1e8      	cbz	r0, d9842 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d9806:	2308      	movs	r3, #8
   d9808:	9700      	str	r7, [sp, #0]
   d980a:	eb0d 0203 	add.w	r2, sp, r3
   d980e:	4639      	mov	r1, r7
   d9810:	4628      	mov	r0, r5
   d9812:	f7ff fceb 	bl	d91ec <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d9816:	4604      	mov	r4, r0
   d9818:	b160      	cbz	r0, d9834 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d981a:	2301      	movs	r3, #1
   d981c:	461a      	mov	r2, r3
   d981e:	2110      	movs	r1, #16
   d9820:	4628      	mov	r0, r5
   d9822:	f7ff fdcc 	bl	d93be <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d9826:	b116      	cbz	r6, d982e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d9828:	6868      	ldr	r0, [r5, #4]
   d982a:	f001 fa1e 	bl	dac6a <_ZN7TwoWire6unlockEv>
}
   d982e:	4620      	mov	r0, r4
   d9830:	b007      	add	sp, #28
   d9832:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d9834:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d9838:	4905      	ldr	r1, [pc, #20]	; (d9850 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d983a:	4803      	ldr	r0, [pc, #12]	; (d9848 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d983c:	f7fd f93c 	bl	d6ab8 <_ZNK5spark6Logger5errorEPKcz>
   d9840:	e7f1      	b.n	d9826 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d9842:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d9846:	e7f7      	b.n	d9838 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d9848:	2003e4a8 	.word	0x2003e4a8
   d984c:	000debe2 	.word	0x000debe2
   d9850:	000debf0 	.word	0x000debf0

000d9854 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d9854:	b513      	push	{r0, r1, r4, lr}
   d9856:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d9858:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d985a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d985e:	f004 f823 	bl	dd8a8 <gmtime>
    return setRtcFromTm(tm, lock);
   d9862:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d9866:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d9868:	4620      	mov	r0, r4
   d986a:	f7ff ffa7 	bl	d97bc <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d986e:	b002      	add	sp, #8
   d9870:	bd10      	pop	{r4, pc}
	...

000d9874 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d9874:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d9876:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d9878:	b089      	sub	sp, #36	; 0x24
   d987a:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d987c:	bb75      	cbnz	r5, d98dc <_ZN6AB18054loopEv+0x68>
   d987e:	f003 f951 	bl	dcb24 <_ZN9TimeClass7isValidEv>
   d9882:	b358      	cbz	r0, d98dc <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d9884:	2600      	movs	r6, #0
   d9886:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d9888:	a904      	add	r1, sp, #16
   d988a:	4628      	mov	r0, r5
        tm = 0;
   d988c:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d9890:	f000 fce4 	bl	da25c <spark_sync_time_last>
   d9894:	b310      	cbz	r0, d98dc <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d9896:	2501      	movs	r5, #1
   d9898:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d989a:	f003 f960 	bl	dcb5e <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d989e:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d98a0:	4602      	mov	r2, r0
   d98a2:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d98a4:	4620      	mov	r0, r4
        time_t time = Time.now();
   d98a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d98aa:	f7ff ffd3 	bl	d9854 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d98ae:	a902      	add	r1, sp, #8
   d98b0:	4620      	mov	r0, r4
        time = 0;
   d98b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d98b6:	f7ff feed 	bl	d9694 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d98ba:	4b12      	ldr	r3, [pc, #72]	; (d9904 <_ZN6AB18054loopEv+0x90>)
   d98bc:	4912      	ldr	r1, [pc, #72]	; (d9908 <_ZN6AB18054loopEv+0x94>)
   d98be:	681b      	ldr	r3, [r3, #0]
   d98c0:	9300      	str	r3, [sp, #0]
   d98c2:	a804      	add	r0, sp, #16
   d98c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d98c8:	f003 f8ea 	bl	dcaa0 <_ZN9TimeClass6formatExPKc>
   d98cc:	480f      	ldr	r0, [pc, #60]	; (d990c <_ZN6AB18054loopEv+0x98>)
   d98ce:	9a04      	ldr	r2, [sp, #16]
   d98d0:	490f      	ldr	r1, [pc, #60]	; (d9910 <_ZN6AB18054loopEv+0x9c>)
   d98d2:	f7fa fcaf 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
   d98d6:	a804      	add	r0, sp, #16
   d98d8:	f002 fdfe 	bl	dc4d8 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d98dc:	6963      	ldr	r3, [r4, #20]
   d98de:	b173      	cbz	r3, d98fe <_ZN6AB18054loopEv+0x8a>
   d98e0:	f000 f9d4 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d98e4:	6923      	ldr	r3, [r4, #16]
   d98e6:	1ac0      	subs	r0, r0, r3
   d98e8:	6963      	ldr	r3, [r4, #20]
   d98ea:	4298      	cmp	r0, r3
   d98ec:	d307      	bcc.n	d98fe <_ZN6AB18054loopEv+0x8a>
   d98ee:	f000 f9cd 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d98f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d98f6:	6120      	str	r0, [r4, #16]
            setWDT();
   d98f8:	4620      	mov	r0, r4
   d98fa:	f7ff fcbf 	bl	d927c <_ZN6AB18056setWDTEi>
}
   d98fe:	b009      	add	sp, #36	; 0x24
   d9900:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9902:	bf00      	nop
   d9904:	2003dcac 	.word	0x2003dcac
   d9908:	2003e5dc 	.word	0x2003e5dc
   d990c:	2003e4a8 	.word	0x2003e4a8
   d9910:	000dec0b 	.word	0x000dec0b

000d9914 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
   d9914:	4b01      	ldr	r3, [pc, #4]	; (d991c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d9916:	4a02      	ldr	r2, [pc, #8]	; (d9920 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d9918:	601a      	str	r2, [r3, #0]
}
   d991a:	4770      	bx	lr
   d991c:	2003e4a8 	.word	0x2003e4a8
   d9920:	000dec21 	.word	0x000dec21

000d9924 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d9924:	4770      	bx	lr

000d9926 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d9926:	b510      	push	{r4, lr}
}
   d9928:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d992a:	4604      	mov	r4, r0
}
   d992c:	f003 fb92 	bl	dd054 <_ZdlPvj>
   d9930:	4620      	mov	r0, r4
   d9932:	bd10      	pop	{r4, pc}

000d9934 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d9934:	6803      	ldr	r3, [r0, #0]
   d9936:	b2c9      	uxtb	r1, r1
   d9938:	689b      	ldr	r3, [r3, #8]
   d993a:	4718      	bx	r3

000d993c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d993c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d993e:	4d03      	ldr	r5, [pc, #12]	; (d994c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d9940:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d9944:	e9c0 5100 	strd	r5, r1, [r0]
}
   d9948:	bd30      	pop	{r4, r5, pc}
   d994a:	bf00      	nop
   d994c:	000dec78 	.word	0x000dec78

000d9950 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d9950:	6840      	ldr	r0, [r0, #4]
   d9952:	f001 b947 	b.w	dabe4 <_ZN7TwoWire5beginEv>

000d9956 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      ~lock_guard()
   d9956:	b510      	push	{r4, lr}
   d9958:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d995a:	6800      	ldr	r0, [r0, #0]
   d995c:	f001 f985 	bl	dac6a <_ZN7TwoWire6unlockEv>
   d9960:	4620      	mov	r0, r4
   d9962:	bd10      	pop	{r4, pc}

000d9964 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d9964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9968:	b08a      	sub	sp, #40	; 0x28
   d996a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d996c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d996e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9970:	f001 f972 	bl	dac58 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d9974:	221e      	movs	r2, #30
   d9976:	2100      	movs	r1, #0
   d9978:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d997a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d997c:	f003 ffce 	bl	dd91c <memset>
		size_t framAddr = 0;
   d9980:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d9982:	b1ef      	cbz	r7, d99c0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d9984:	6823      	ldr	r3, [r4, #0]
   d9986:	2f1e      	cmp	r7, #30
   d9988:	46b8      	mov	r8, r7
   d998a:	bf28      	it	cs
   d998c:	f04f 081e 	movcs.w	r8, #30
   d9990:	68dd      	ldr	r5, [r3, #12]
   d9992:	aa02      	add	r2, sp, #8
   d9994:	4643      	mov	r3, r8
   d9996:	4631      	mov	r1, r6
   d9998:	4620      	mov	r0, r4
   d999a:	47a8      	blx	r5
			if (!result) {
   d999c:	4605      	mov	r5, r0
   d999e:	b958      	cbnz	r0, d99b8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d99a0:	480a      	ldr	r0, [pc, #40]	; (d99cc <_ZN6MB85RC5eraseEv+0x68>)
   d99a2:	490b      	ldr	r1, [pc, #44]	; (d99d0 <_ZN6MB85RC5eraseEv+0x6c>)
   d99a4:	4632      	mov	r2, r6
   d99a6:	f7fa fc45 	bl	d4234 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d99aa:	a801      	add	r0, sp, #4
   d99ac:	f7ff ffd3 	bl	d9956 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d99b0:	4628      	mov	r0, r5
   d99b2:	b00a      	add	sp, #40	; 0x28
   d99b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d99b8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d99bc:	4446      	add	r6, r8
		while(totalLen > 0) {
   d99be:	e7e0      	b.n	d9982 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d99c0:	a801      	add	r0, sp, #4
   d99c2:	f7ff ffc8 	bl	d9956 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d99c6:	2501      	movs	r5, #1
   d99c8:	e7f2      	b.n	d99b0 <_ZN6MB85RC5eraseEv+0x4c>
   d99ca:	bf00      	nop
   d99cc:	2003e588 	.word	0x2003e588
   d99d0:	000dec44 	.word	0x000dec44

000d99d4 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d99d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d99d8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d99da:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d99dc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d99de:	460d      	mov	r5, r1
   d99e0:	4616      	mov	r6, r2
   d99e2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d99e4:	f001 f938 	bl	dac58 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d99e8:	b1a7      	cbz	r7, d9a14 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d99ea:	68e1      	ldr	r1, [r4, #12]
   d99ec:	6860      	ldr	r0, [r4, #4]
   d99ee:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d99f2:	f001 f92a 	bl	dac4a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d99f6:	0a29      	lsrs	r1, r5, #8
   d99f8:	6860      	ldr	r0, [r4, #4]
   d99fa:	f7ff ff9b 	bl	d9934 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d99fe:	4629      	mov	r1, r5
   d9a00:	6860      	ldr	r0, [r4, #4]
   d9a02:	f7ff ff97 	bl	d9934 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d9a06:	6860      	ldr	r0, [r4, #4]
   d9a08:	2100      	movs	r1, #0
   d9a0a:	f001 f921 	bl	dac50 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d9a0e:	b148      	cbz	r0, d9a24 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d9a10:	2400      	movs	r4, #0
   d9a12:	e000      	b.n	d9a16 <_ZN6MB85RC8readDataEjPhj+0x42>
   d9a14:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d9a16:	a801      	add	r0, sp, #4
   d9a18:	f7ff ff9d 	bl	d9956 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d9a1c:	4620      	mov	r0, r4
   d9a1e:	b003      	add	sp, #12
   d9a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d9a24:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d9a26:	7b21      	ldrb	r1, [r4, #12]
   d9a28:	6860      	ldr	r0, [r4, #4]
   d9a2a:	46b8      	mov	r8, r7
   d9a2c:	bf28      	it	cs
   d9a2e:	f04f 0820 	movcs.w	r8, #32
   d9a32:	2301      	movs	r3, #1
   d9a34:	4642      	mov	r2, r8
   d9a36:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d9a3a:	f001 f8f0 	bl	dac1e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d9a3e:	f003 fae5 	bl	dd00c <_Z19__fetch_global_Wirev>
   d9a42:	6803      	ldr	r3, [r0, #0]
   d9a44:	691b      	ldr	r3, [r3, #16]
   d9a46:	4798      	blx	r3
   d9a48:	4540      	cmp	r0, r8
   d9a4a:	dbe1      	blt.n	d9a10 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d9a4c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d9a50:	f003 fadc 	bl	dd00c <_Z19__fetch_global_Wirev>
   d9a54:	6803      	ldr	r3, [r0, #0]
   d9a56:	695b      	ldr	r3, [r3, #20]
   d9a58:	4798      	blx	r3
   d9a5a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d9a5e:	454e      	cmp	r6, r9
   d9a60:	d1f6      	bne.n	d9a50 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d9a62:	4445      	add	r5, r8
   d9a64:	eba7 0708 	sub.w	r7, r7, r8
   d9a68:	e7be      	b.n	d99e8 <_ZN6MB85RC8readDataEjPhj+0x14>

000d9a6a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d9a6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9a6e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d9a70:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9a72:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d9a74:	460e      	mov	r6, r1
   d9a76:	4690      	mov	r8, r2
   d9a78:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d9a7a:	f001 f8ed 	bl	dac58 <_ZN7TwoWire4lockEv>
   d9a7e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d9a82:	f1b9 0f00 	cmp.w	r9, #0
   d9a86:	d02a      	beq.n	d9ade <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d9a88:	b34d      	cbz	r5, d9ade <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d9a8a:	68e1      	ldr	r1, [r4, #12]
   d9a8c:	6860      	ldr	r0, [r4, #4]
   d9a8e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d9a92:	f001 f8da 	bl	dac4a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d9a96:	0a31      	lsrs	r1, r6, #8
   d9a98:	6860      	ldr	r0, [r4, #4]
   d9a9a:	f7ff ff4b 	bl	d9934 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d9a9e:	6860      	ldr	r0, [r4, #4]
   d9aa0:	4631      	mov	r1, r6
   d9aa2:	f7ff ff47 	bl	d9934 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d9aa6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d9aaa:	4647      	mov	r7, r8
   d9aac:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d9ab0:	6860      	ldr	r0, [r4, #4]
   d9ab2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d9ab6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d9ab8:	3d01      	subs	r5, #1
				wire.write(*data);
   d9aba:	689b      	ldr	r3, [r3, #8]
   d9abc:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d9abe:	4555      	cmp	r5, sl
   d9ac0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d9ac4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d9ac6:	d001      	beq.n	d9acc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d9ac8:	2d00      	cmp	r5, #0
   d9aca:	d1f1      	bne.n	d9ab0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d9acc:	6860      	ldr	r0, [r4, #4]
   d9ace:	2101      	movs	r1, #1
   d9ad0:	f001 f8be 	bl	dac50 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d9ad4:	2800      	cmp	r0, #0
   d9ad6:	d0d7      	beq.n	d9a88 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d9ad8:	f04f 0900 	mov.w	r9, #0
   d9adc:	e7d1      	b.n	d9a82 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d9ade:	a801      	add	r0, sp, #4
   d9ae0:	f7ff ff39 	bl	d9956 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d9ae4:	4648      	mov	r0, r9
   d9ae6:	b003      	add	sp, #12
   d9ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9aec <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d9aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9af0:	b08b      	sub	sp, #44	; 0x2c
   d9af2:	460e      	mov	r6, r1
   d9af4:	4615      	mov	r5, r2
   d9af6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d9af8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9afa:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d9afc:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d9afe:	f001 f8ab 	bl	dac58 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d9b02:	42ae      	cmp	r6, r5
   d9b04:	d229      	bcs.n	d9b5a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d9b06:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d9b08:	4425      	add	r5, r4
			while(numBytes > 0) {
   d9b0a:	b18c      	cbz	r4, d9b30 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d9b0c:	2c1e      	cmp	r4, #30
   d9b0e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d9b10:	f8d8 3000 	ldr.w	r3, [r8]
   d9b14:	bf28      	it	cs
   d9b16:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d9b18:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d9b1a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d9b1e:	aa02      	add	r2, sp, #8
   d9b20:	463b      	mov	r3, r7
   d9b22:	4631      	mov	r1, r6
   d9b24:	4640      	mov	r0, r8
				framAddrTo -= count;
   d9b26:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d9b28:	47c8      	blx	r9
				if (!result) {
   d9b2a:	b948      	cbnz	r0, d9b40 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d9b2c:	2400      	movs	r4, #0
   d9b2e:	e000      	b.n	d9b32 <_ZN6MB85RC8moveDataEjjj+0x46>
   d9b30:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d9b32:	a801      	add	r0, sp, #4
   d9b34:	f7ff ff0f 	bl	d9956 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d9b38:	4620      	mov	r0, r4
   d9b3a:	b00b      	add	sp, #44	; 0x2c
   d9b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d9b40:	f8d8 3000 	ldr.w	r3, [r8]
   d9b44:	aa02      	add	r2, sp, #8
   d9b46:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d9b4a:	4629      	mov	r1, r5
   d9b4c:	463b      	mov	r3, r7
   d9b4e:	4640      	mov	r0, r8
   d9b50:	47c8      	blx	r9
				if (!result) {
   d9b52:	2800      	cmp	r0, #0
   d9b54:	d0ea      	beq.n	d9b2c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d9b56:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d9b58:	e7d7      	b.n	d9b0a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d9b5a:	d9e9      	bls.n	d9b30 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d9b5c:	2c00      	cmp	r4, #0
   d9b5e:	d0e7      	beq.n	d9b30 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d9b60:	f8d8 3000 	ldr.w	r3, [r8]
   d9b64:	2c1e      	cmp	r4, #30
   d9b66:	4627      	mov	r7, r4
   d9b68:	bf28      	it	cs
   d9b6a:	271e      	movcs	r7, #30
   d9b6c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d9b70:	aa02      	add	r2, sp, #8
   d9b72:	463b      	mov	r3, r7
   d9b74:	4631      	mov	r1, r6
   d9b76:	4640      	mov	r0, r8
   d9b78:	47c8      	blx	r9
				if (!result) {
   d9b7a:	2800      	cmp	r0, #0
   d9b7c:	d0d6      	beq.n	d9b2c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d9b7e:	f8d8 3000 	ldr.w	r3, [r8]
   d9b82:	aa02      	add	r2, sp, #8
   d9b84:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d9b88:	4629      	mov	r1, r5
   d9b8a:	463b      	mov	r3, r7
   d9b8c:	4640      	mov	r0, r8
   d9b8e:	47c8      	blx	r9
				if (!result) {
   d9b90:	2800      	cmp	r0, #0
   d9b92:	d0cb      	beq.n	d9b2c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d9b94:	443e      	add	r6, r7
				framAddrTo += count;
   d9b96:	443d      	add	r5, r7
				numBytes -= count;
   d9b98:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d9b9a:	e7df      	b.n	d9b5c <_ZN6MB85RC8moveDataEjjj+0x70>

000d9b9c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d9b9c:	b508      	push	{r3, lr}
   d9b9e:	4b02      	ldr	r3, [pc, #8]	; (d9ba8 <os_thread_create+0xc>)
   d9ba0:	681b      	ldr	r3, [r3, #0]
   d9ba2:	685b      	ldr	r3, [r3, #4]
   d9ba4:	9301      	str	r3, [sp, #4]
   d9ba6:	bd08      	pop	{r3, pc}
   d9ba8:	00030248 	.word	0x00030248

000d9bac <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d9bac:	b508      	push	{r3, lr}
   d9bae:	4b02      	ldr	r3, [pc, #8]	; (d9bb8 <os_thread_is_current+0xc>)
   d9bb0:	681b      	ldr	r3, [r3, #0]
   d9bb2:	689b      	ldr	r3, [r3, #8]
   d9bb4:	9301      	str	r3, [sp, #4]
   d9bb6:	bd08      	pop	{r3, pc}
   d9bb8:	00030248 	.word	0x00030248

000d9bbc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d9bbc:	b508      	push	{r3, lr}
   d9bbe:	4b02      	ldr	r3, [pc, #8]	; (d9bc8 <os_thread_join+0xc>)
   d9bc0:	681b      	ldr	r3, [r3, #0]
   d9bc2:	691b      	ldr	r3, [r3, #16]
   d9bc4:	9301      	str	r3, [sp, #4]
   d9bc6:	bd08      	pop	{r3, pc}
   d9bc8:	00030248 	.word	0x00030248

000d9bcc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d9bcc:	b508      	push	{r3, lr}
   d9bce:	4b02      	ldr	r3, [pc, #8]	; (d9bd8 <os_thread_cleanup+0xc>)
   d9bd0:	681b      	ldr	r3, [r3, #0]
   d9bd2:	695b      	ldr	r3, [r3, #20]
   d9bd4:	9301      	str	r3, [sp, #4]
   d9bd6:	bd08      	pop	{r3, pc}
   d9bd8:	00030248 	.word	0x00030248

000d9bdc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d9bdc:	b508      	push	{r3, lr}
   d9bde:	4b02      	ldr	r3, [pc, #8]	; (d9be8 <os_mutex_create+0xc>)
   d9be0:	681b      	ldr	r3, [r3, #0]
   d9be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9be4:	9301      	str	r3, [sp, #4]
   d9be6:	bd08      	pop	{r3, pc}
   d9be8:	00030248 	.word	0x00030248

000d9bec <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d9bec:	b508      	push	{r3, lr}
   d9bee:	4b02      	ldr	r3, [pc, #8]	; (d9bf8 <os_mutex_lock+0xc>)
   d9bf0:	681b      	ldr	r3, [r3, #0]
   d9bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d9bf4:	9301      	str	r3, [sp, #4]
   d9bf6:	bd08      	pop	{r3, pc}
   d9bf8:	00030248 	.word	0x00030248

000d9bfc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d9bfc:	b508      	push	{r3, lr}
   d9bfe:	4b02      	ldr	r3, [pc, #8]	; (d9c08 <os_mutex_unlock+0xc>)
   d9c00:	681b      	ldr	r3, [r3, #0]
   d9c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9c04:	9301      	str	r3, [sp, #4]
   d9c06:	bd08      	pop	{r3, pc}
   d9c08:	00030248 	.word	0x00030248

000d9c0c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d9c0c:	b508      	push	{r3, lr}
   d9c0e:	4b02      	ldr	r3, [pc, #8]	; (d9c18 <os_mutex_recursive_create+0xc>)
   d9c10:	681b      	ldr	r3, [r3, #0]
   d9c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9c14:	9301      	str	r3, [sp, #4]
   d9c16:	bd08      	pop	{r3, pc}
   d9c18:	00030248 	.word	0x00030248

000d9c1c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d9c1c:	b508      	push	{r3, lr}
   d9c1e:	4b02      	ldr	r3, [pc, #8]	; (d9c28 <os_mutex_recursive_destroy+0xc>)
   d9c20:	681b      	ldr	r3, [r3, #0]
   d9c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9c24:	9301      	str	r3, [sp, #4]
   d9c26:	bd08      	pop	{r3, pc}
   d9c28:	00030248 	.word	0x00030248

000d9c2c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d9c2c:	b508      	push	{r3, lr}
   d9c2e:	4b02      	ldr	r3, [pc, #8]	; (d9c38 <os_mutex_recursive_lock+0xc>)
   d9c30:	681b      	ldr	r3, [r3, #0]
   d9c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9c34:	9301      	str	r3, [sp, #4]
   d9c36:	bd08      	pop	{r3, pc}
   d9c38:	00030248 	.word	0x00030248

000d9c3c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d9c3c:	b508      	push	{r3, lr}
   d9c3e:	4b02      	ldr	r3, [pc, #8]	; (d9c48 <os_mutex_recursive_unlock+0xc>)
   d9c40:	681b      	ldr	r3, [r3, #0]
   d9c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d9c44:	9301      	str	r3, [sp, #4]
   d9c46:	bd08      	pop	{r3, pc}
   d9c48:	00030248 	.word	0x00030248

000d9c4c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d9c4c:	b508      	push	{r3, lr}
   d9c4e:	4b02      	ldr	r3, [pc, #8]	; (d9c58 <os_thread_exit+0xc>)
   d9c50:	681b      	ldr	r3, [r3, #0]
   d9c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d9c54:	9301      	str	r3, [sp, #4]
   d9c56:	bd08      	pop	{r3, pc}
   d9c58:	00030248 	.word	0x00030248

000d9c5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d9c5c:	b508      	push	{r3, lr}
   d9c5e:	4b02      	ldr	r3, [pc, #8]	; (d9c68 <HAL_RNG_GetRandomNumber+0xc>)
   d9c60:	681b      	ldr	r3, [r3, #0]
   d9c62:	685b      	ldr	r3, [r3, #4]
   d9c64:	9301      	str	r3, [sp, #4]
   d9c66:	bd08      	pop	{r3, pc}
   d9c68:	00030218 	.word	0x00030218

000d9c6c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d9c6c:	b508      	push	{r3, lr}
   d9c6e:	4b02      	ldr	r3, [pc, #8]	; (d9c78 <HAL_Delay_Milliseconds+0xc>)
   d9c70:	681b      	ldr	r3, [r3, #0]
   d9c72:	689b      	ldr	r3, [r3, #8]
   d9c74:	9301      	str	r3, [sp, #4]
   d9c76:	bd08      	pop	{r3, pc}
   d9c78:	00030218 	.word	0x00030218

000d9c7c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d9c7c:	b508      	push	{r3, lr}
   d9c7e:	4b02      	ldr	r3, [pc, #8]	; (d9c88 <HAL_Delay_Microseconds+0xc>)
   d9c80:	681b      	ldr	r3, [r3, #0]
   d9c82:	68db      	ldr	r3, [r3, #12]
   d9c84:	9301      	str	r3, [sp, #4]
   d9c86:	bd08      	pop	{r3, pc}
   d9c88:	00030218 	.word	0x00030218

000d9c8c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d9c8c:	b508      	push	{r3, lr}
   d9c8e:	4b02      	ldr	r3, [pc, #8]	; (d9c98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d9c90:	681b      	ldr	r3, [r3, #0]
   d9c92:	695b      	ldr	r3, [r3, #20]
   d9c94:	9301      	str	r3, [sp, #4]
   d9c96:	bd08      	pop	{r3, pc}
   d9c98:	00030218 	.word	0x00030218

000d9c9c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d9c9c:	b508      	push	{r3, lr}
   d9c9e:	4b02      	ldr	r3, [pc, #8]	; (d9ca8 <hal_rtc_time_is_valid+0xc>)
   d9ca0:	681b      	ldr	r3, [r3, #0]
   d9ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9ca4:	9301      	str	r3, [sp, #4]
   d9ca6:	bd08      	pop	{r3, pc}
   d9ca8:	00030218 	.word	0x00030218

000d9cac <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d9cac:	b508      	push	{r3, lr}
   d9cae:	4b02      	ldr	r3, [pc, #8]	; (d9cb8 <hal_timer_millis+0xc>)
   d9cb0:	681b      	ldr	r3, [r3, #0]
   d9cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d9cb4:	9301      	str	r3, [sp, #4]
   d9cb6:	bd08      	pop	{r3, pc}
   d9cb8:	00030218 	.word	0x00030218

000d9cbc <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d9cbc:	b508      	push	{r3, lr}
   d9cbe:	4b02      	ldr	r3, [pc, #8]	; (d9cc8 <hal_rtc_get_time+0xc>)
   d9cc0:	681b      	ldr	r3, [r3, #0]
   d9cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d9cc4:	9301      	str	r3, [sp, #4]
   d9cc6:	bd08      	pop	{r3, pc}
   d9cc8:	00030218 	.word	0x00030218

000d9ccc <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d9ccc:	b508      	push	{r3, lr}
   d9cce:	4b02      	ldr	r3, [pc, #8]	; (d9cd8 <hal_rtc_set_time+0xc>)
   d9cd0:	681b      	ldr	r3, [r3, #0]
   d9cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d9cd4:	9301      	str	r3, [sp, #4]
   d9cd6:	bd08      	pop	{r3, pc}
   d9cd8:	00030218 	.word	0x00030218

000d9cdc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d9cdc:	b508      	push	{r3, lr}
   d9cde:	4b02      	ldr	r3, [pc, #8]	; (d9ce8 <HAL_Pin_Mode+0xc>)
   d9ce0:	681b      	ldr	r3, [r3, #0]
   d9ce2:	689b      	ldr	r3, [r3, #8]
   d9ce4:	9301      	str	r3, [sp, #4]
   d9ce6:	bd08      	pop	{r3, pc}
   d9ce8:	0003022c 	.word	0x0003022c

000d9cec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d9cec:	b508      	push	{r3, lr}
   d9cee:	4b02      	ldr	r3, [pc, #8]	; (d9cf8 <HAL_Get_Pin_Mode+0xc>)
   d9cf0:	681b      	ldr	r3, [r3, #0]
   d9cf2:	68db      	ldr	r3, [r3, #12]
   d9cf4:	9301      	str	r3, [sp, #4]
   d9cf6:	bd08      	pop	{r3, pc}
   d9cf8:	0003022c 	.word	0x0003022c

000d9cfc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d9cfc:	b508      	push	{r3, lr}
   d9cfe:	4b02      	ldr	r3, [pc, #8]	; (d9d08 <HAL_GPIO_Write+0xc>)
   d9d00:	681b      	ldr	r3, [r3, #0]
   d9d02:	691b      	ldr	r3, [r3, #16]
   d9d04:	9301      	str	r3, [sp, #4]
   d9d06:	bd08      	pop	{r3, pc}
   d9d08:	0003022c 	.word	0x0003022c

000d9d0c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d9d0c:	b508      	push	{r3, lr}
   d9d0e:	4b02      	ldr	r3, [pc, #8]	; (d9d18 <HAL_GPIO_Read+0xc>)
   d9d10:	681b      	ldr	r3, [r3, #0]
   d9d12:	695b      	ldr	r3, [r3, #20]
   d9d14:	9301      	str	r3, [sp, #4]
   d9d16:	bd08      	pop	{r3, pc}
   d9d18:	0003022c 	.word	0x0003022c

000d9d1c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d9d1c:	b508      	push	{r3, lr}
   d9d1e:	4b02      	ldr	r3, [pc, #8]	; (d9d28 <HAL_Interrupts_Attach+0xc>)
   d9d20:	681b      	ldr	r3, [r3, #0]
   d9d22:	699b      	ldr	r3, [r3, #24]
   d9d24:	9301      	str	r3, [sp, #4]
   d9d26:	bd08      	pop	{r3, pc}
   d9d28:	0003022c 	.word	0x0003022c

000d9d2c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d9d2c:	b508      	push	{r3, lr}
   d9d2e:	4b02      	ldr	r3, [pc, #8]	; (d9d38 <HAL_Interrupts_Detach+0xc>)
   d9d30:	681b      	ldr	r3, [r3, #0]
   d9d32:	69db      	ldr	r3, [r3, #28]
   d9d34:	9301      	str	r3, [sp, #4]
   d9d36:	bd08      	pop	{r3, pc}
   d9d38:	0003022c 	.word	0x0003022c

000d9d3c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d9d3c:	b508      	push	{r3, lr}
   d9d3e:	4b02      	ldr	r3, [pc, #8]	; (d9d48 <hal_i2c_begin+0xc>)
   d9d40:	681b      	ldr	r3, [r3, #0]
   d9d42:	68db      	ldr	r3, [r3, #12]
   d9d44:	9301      	str	r3, [sp, #4]
   d9d46:	bd08      	pop	{r3, pc}
   d9d48:	00030228 	.word	0x00030228

000d9d4c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d9d4c:	b508      	push	{r3, lr}
   d9d4e:	4b02      	ldr	r3, [pc, #8]	; (d9d58 <hal_i2c_begin_transmission+0xc>)
   d9d50:	681b      	ldr	r3, [r3, #0]
   d9d52:	699b      	ldr	r3, [r3, #24]
   d9d54:	9301      	str	r3, [sp, #4]
   d9d56:	bd08      	pop	{r3, pc}
   d9d58:	00030228 	.word	0x00030228

000d9d5c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d9d5c:	b508      	push	{r3, lr}
   d9d5e:	4b02      	ldr	r3, [pc, #8]	; (d9d68 <hal_i2c_end_transmission+0xc>)
   d9d60:	681b      	ldr	r3, [r3, #0]
   d9d62:	69db      	ldr	r3, [r3, #28]
   d9d64:	9301      	str	r3, [sp, #4]
   d9d66:	bd08      	pop	{r3, pc}
   d9d68:	00030228 	.word	0x00030228

000d9d6c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d9d6c:	b508      	push	{r3, lr}
   d9d6e:	4b02      	ldr	r3, [pc, #8]	; (d9d78 <hal_i2c_write+0xc>)
   d9d70:	681b      	ldr	r3, [r3, #0]
   d9d72:	6a1b      	ldr	r3, [r3, #32]
   d9d74:	9301      	str	r3, [sp, #4]
   d9d76:	bd08      	pop	{r3, pc}
   d9d78:	00030228 	.word	0x00030228

000d9d7c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d9d7c:	b508      	push	{r3, lr}
   d9d7e:	4b02      	ldr	r3, [pc, #8]	; (d9d88 <hal_i2c_available+0xc>)
   d9d80:	681b      	ldr	r3, [r3, #0]
   d9d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9d84:	9301      	str	r3, [sp, #4]
   d9d86:	bd08      	pop	{r3, pc}
   d9d88:	00030228 	.word	0x00030228

000d9d8c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d9d8c:	b508      	push	{r3, lr}
   d9d8e:	4b02      	ldr	r3, [pc, #8]	; (d9d98 <hal_i2c_read+0xc>)
   d9d90:	681b      	ldr	r3, [r3, #0]
   d9d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9d94:	9301      	str	r3, [sp, #4]
   d9d96:	bd08      	pop	{r3, pc}
   d9d98:	00030228 	.word	0x00030228

000d9d9c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d9d9c:	b508      	push	{r3, lr}
   d9d9e:	4b02      	ldr	r3, [pc, #8]	; (d9da8 <hal_i2c_peek+0xc>)
   d9da0:	681b      	ldr	r3, [r3, #0]
   d9da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9da4:	9301      	str	r3, [sp, #4]
   d9da6:	bd08      	pop	{r3, pc}
   d9da8:	00030228 	.word	0x00030228

000d9dac <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d9dac:	b508      	push	{r3, lr}
   d9dae:	4b02      	ldr	r3, [pc, #8]	; (d9db8 <hal_i2c_flush+0xc>)
   d9db0:	681b      	ldr	r3, [r3, #0]
   d9db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9db4:	9301      	str	r3, [sp, #4]
   d9db6:	bd08      	pop	{r3, pc}
   d9db8:	00030228 	.word	0x00030228

000d9dbc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d9dbc:	b508      	push	{r3, lr}
   d9dbe:	4b02      	ldr	r3, [pc, #8]	; (d9dc8 <hal_i2c_is_enabled+0xc>)
   d9dc0:	681b      	ldr	r3, [r3, #0]
   d9dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9dc4:	9301      	str	r3, [sp, #4]
   d9dc6:	bd08      	pop	{r3, pc}
   d9dc8:	00030228 	.word	0x00030228

000d9dcc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d9dcc:	b508      	push	{r3, lr}
   d9dce:	4b02      	ldr	r3, [pc, #8]	; (d9dd8 <hal_i2c_init+0xc>)
   d9dd0:	681b      	ldr	r3, [r3, #0]
   d9dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9dd4:	9301      	str	r3, [sp, #4]
   d9dd6:	bd08      	pop	{r3, pc}
   d9dd8:	00030228 	.word	0x00030228

000d9ddc <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d9ddc:	b508      	push	{r3, lr}
   d9dde:	4b02      	ldr	r3, [pc, #8]	; (d9de8 <hal_i2c_lock+0xc>)
   d9de0:	681b      	ldr	r3, [r3, #0]
   d9de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9de4:	9301      	str	r3, [sp, #4]
   d9de6:	bd08      	pop	{r3, pc}
   d9de8:	00030228 	.word	0x00030228

000d9dec <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d9dec:	b508      	push	{r3, lr}
   d9dee:	4b02      	ldr	r3, [pc, #8]	; (d9df8 <hal_i2c_unlock+0xc>)
   d9df0:	681b      	ldr	r3, [r3, #0]
   d9df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9df4:	9301      	str	r3, [sp, #4]
   d9df6:	bd08      	pop	{r3, pc}
   d9df8:	00030228 	.word	0x00030228

000d9dfc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d9dfc:	b508      	push	{r3, lr}
   d9dfe:	4b02      	ldr	r3, [pc, #8]	; (d9e08 <hal_i2c_request_ex+0xc>)
   d9e00:	681b      	ldr	r3, [r3, #0]
   d9e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d9e04:	9301      	str	r3, [sp, #4]
   d9e06:	bd08      	pop	{r3, pc}
   d9e08:	00030228 	.word	0x00030228

000d9e0c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d9e0c:	b508      	push	{r3, lr}
   d9e0e:	4b02      	ldr	r3, [pc, #8]	; (d9e18 <inet_inet_ntop+0xc>)
   d9e10:	681b      	ldr	r3, [r3, #0]
   d9e12:	695b      	ldr	r3, [r3, #20]
   d9e14:	9301      	str	r3, [sp, #4]
   d9e16:	bd08      	pop	{r3, pc}
   d9e18:	00030264 	.word	0x00030264

000d9e1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d9e1c:	b508      	push	{r3, lr}
   d9e1e:	4b02      	ldr	r3, [pc, #8]	; (d9e28 <netdb_freeaddrinfo+0xc>)
   d9e20:	681b      	ldr	r3, [r3, #0]
   d9e22:	689b      	ldr	r3, [r3, #8]
   d9e24:	9301      	str	r3, [sp, #4]
   d9e26:	bd08      	pop	{r3, pc}
   d9e28:	00030268 	.word	0x00030268

000d9e2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d9e2c:	b508      	push	{r3, lr}
   d9e2e:	4b02      	ldr	r3, [pc, #8]	; (d9e38 <netdb_getaddrinfo+0xc>)
   d9e30:	681b      	ldr	r3, [r3, #0]
   d9e32:	68db      	ldr	r3, [r3, #12]
   d9e34:	9301      	str	r3, [sp, #4]
   d9e36:	bd08      	pop	{r3, pc}
   d9e38:	00030268 	.word	0x00030268

000d9e3c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d9e3c:	b508      	push	{r3, lr}
   d9e3e:	4b02      	ldr	r3, [pc, #8]	; (d9e48 <hal_spi_begin+0xc>)
   d9e40:	681b      	ldr	r3, [r3, #0]
   d9e42:	681b      	ldr	r3, [r3, #0]
   d9e44:	9301      	str	r3, [sp, #4]
   d9e46:	bd08      	pop	{r3, pc}
   d9e48:	00030230 	.word	0x00030230

000d9e4c <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d9e4c:	b508      	push	{r3, lr}
   d9e4e:	4b02      	ldr	r3, [pc, #8]	; (d9e58 <hal_spi_end+0xc>)
   d9e50:	681b      	ldr	r3, [r3, #0]
   d9e52:	685b      	ldr	r3, [r3, #4]
   d9e54:	9301      	str	r3, [sp, #4]
   d9e56:	bd08      	pop	{r3, pc}
   d9e58:	00030230 	.word	0x00030230

000d9e5c <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d9e5c:	b508      	push	{r3, lr}
   d9e5e:	4b02      	ldr	r3, [pc, #8]	; (d9e68 <hal_spi_transfer+0xc>)
   d9e60:	681b      	ldr	r3, [r3, #0]
   d9e62:	695b      	ldr	r3, [r3, #20]
   d9e64:	9301      	str	r3, [sp, #4]
   d9e66:	bd08      	pop	{r3, pc}
   d9e68:	00030230 	.word	0x00030230

000d9e6c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d9e6c:	b508      	push	{r3, lr}
   d9e6e:	4b02      	ldr	r3, [pc, #8]	; (d9e78 <hal_spi_init+0xc>)
   d9e70:	681b      	ldr	r3, [r3, #0]
   d9e72:	69db      	ldr	r3, [r3, #28]
   d9e74:	9301      	str	r3, [sp, #4]
   d9e76:	bd08      	pop	{r3, pc}
   d9e78:	00030230 	.word	0x00030230

000d9e7c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d9e7c:	b508      	push	{r3, lr}
   d9e7e:	4b02      	ldr	r3, [pc, #8]	; (d9e88 <hal_spi_is_enabled+0xc>)
   d9e80:	681b      	ldr	r3, [r3, #0]
   d9e82:	6a1b      	ldr	r3, [r3, #32]
   d9e84:	9301      	str	r3, [sp, #4]
   d9e86:	bd08      	pop	{r3, pc}
   d9e88:	00030230 	.word	0x00030230

000d9e8c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d9e8c:	b508      	push	{r3, lr}
   d9e8e:	4b02      	ldr	r3, [pc, #8]	; (d9e98 <hal_spi_info+0xc>)
   d9e90:	681b      	ldr	r3, [r3, #0]
   d9e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9e94:	9301      	str	r3, [sp, #4]
   d9e96:	bd08      	pop	{r3, pc}
   d9e98:	00030230 	.word	0x00030230

000d9e9c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d9e9c:	b508      	push	{r3, lr}
   d9e9e:	4b02      	ldr	r3, [pc, #8]	; (d9ea8 <hal_spi_set_settings+0xc>)
   d9ea0:	681b      	ldr	r3, [r3, #0]
   d9ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9ea4:	9301      	str	r3, [sp, #4]
   d9ea6:	bd08      	pop	{r3, pc}
   d9ea8:	00030230 	.word	0x00030230

000d9eac <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d9eac:	b508      	push	{r3, lr}
   d9eae:	4b02      	ldr	r3, [pc, #8]	; (d9eb8 <hal_spi_acquire+0xc>)
   d9eb0:	681b      	ldr	r3, [r3, #0]
   d9eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9eb4:	9301      	str	r3, [sp, #4]
   d9eb6:	bd08      	pop	{r3, pc}
   d9eb8:	00030230 	.word	0x00030230

000d9ebc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d9ebc:	b508      	push	{r3, lr}
   d9ebe:	4b02      	ldr	r3, [pc, #8]	; (d9ec8 <hal_spi_release+0xc>)
   d9ec0:	681b      	ldr	r3, [r3, #0]
   d9ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9ec4:	9301      	str	r3, [sp, #4]
   d9ec6:	bd08      	pop	{r3, pc}
   d9ec8:	00030230 	.word	0x00030230

000d9ecc <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   d9ecc:	b508      	push	{r3, lr}
   d9ece:	4b02      	ldr	r3, [pc, #8]	; (d9ed8 <_open+0xc>)
   d9ed0:	681b      	ldr	r3, [r3, #0]
   d9ed2:	681b      	ldr	r3, [r3, #0]
   d9ed4:	9301      	str	r3, [sp, #4]
   d9ed6:	bd08      	pop	{r3, pc}
   d9ed8:	00030284 	.word	0x00030284

000d9edc <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   d9edc:	b508      	push	{r3, lr}
   d9ede:	4b02      	ldr	r3, [pc, #8]	; (d9ee8 <_write+0xc>)
   d9ee0:	681b      	ldr	r3, [r3, #0]
   d9ee2:	685b      	ldr	r3, [r3, #4]
   d9ee4:	9301      	str	r3, [sp, #4]
   d9ee6:	bd08      	pop	{r3, pc}
   d9ee8:	00030284 	.word	0x00030284

000d9eec <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   d9eec:	b508      	push	{r3, lr}
   d9eee:	4b02      	ldr	r3, [pc, #8]	; (d9ef8 <_read+0xc>)
   d9ef0:	681b      	ldr	r3, [r3, #0]
   d9ef2:	689b      	ldr	r3, [r3, #8]
   d9ef4:	9301      	str	r3, [sp, #4]
   d9ef6:	bd08      	pop	{r3, pc}
   d9ef8:	00030284 	.word	0x00030284

000d9efc <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   d9efc:	b508      	push	{r3, lr}
   d9efe:	4b02      	ldr	r3, [pc, #8]	; (d9f08 <_close+0xc>)
   d9f00:	681b      	ldr	r3, [r3, #0]
   d9f02:	68db      	ldr	r3, [r3, #12]
   d9f04:	9301      	str	r3, [sp, #4]
   d9f06:	bd08      	pop	{r3, pc}
   d9f08:	00030284 	.word	0x00030284

000d9f0c <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   d9f0c:	b508      	push	{r3, lr}
   d9f0e:	4b02      	ldr	r3, [pc, #8]	; (d9f18 <_fstat+0xc>)
   d9f10:	681b      	ldr	r3, [r3, #0]
   d9f12:	695b      	ldr	r3, [r3, #20]
   d9f14:	9301      	str	r3, [sp, #4]
   d9f16:	bd08      	pop	{r3, pc}
   d9f18:	00030284 	.word	0x00030284

000d9f1c <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   d9f1c:	b508      	push	{r3, lr}
   d9f1e:	4b02      	ldr	r3, [pc, #8]	; (d9f28 <_lseek+0xc>)
   d9f20:	681b      	ldr	r3, [r3, #0]
   d9f22:	6a1b      	ldr	r3, [r3, #32]
   d9f24:	9301      	str	r3, [sp, #4]
   d9f26:	bd08      	pop	{r3, pc}
   d9f28:	00030284 	.word	0x00030284

000d9f2c <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   d9f2c:	b508      	push	{r3, lr}
   d9f2e:	4b02      	ldr	r3, [pc, #8]	; (d9f38 <stat+0xc>)
   d9f30:	681b      	ldr	r3, [r3, #0]
   d9f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9f34:	9301      	str	r3, [sp, #4]
   d9f36:	bd08      	pop	{r3, pc}
   d9f38:	00030284 	.word	0x00030284

000d9f3c <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   d9f3c:	b508      	push	{r3, lr}
   d9f3e:	4b02      	ldr	r3, [pc, #8]	; (d9f48 <mkdir+0xc>)
   d9f40:	681b      	ldr	r3, [r3, #0]
   d9f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9f44:	9301      	str	r3, [sp, #4]
   d9f46:	bd08      	pop	{r3, pc}
   d9f48:	00030284 	.word	0x00030284

000d9f4c <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   d9f4c:	b508      	push	{r3, lr}
   d9f4e:	4b02      	ldr	r3, [pc, #8]	; (d9f58 <_unlink+0xc>)
   d9f50:	681b      	ldr	r3, [r3, #0]
   d9f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9f54:	9301      	str	r3, [sp, #4]
   d9f56:	bd08      	pop	{r3, pc}
   d9f58:	00030284 	.word	0x00030284

000d9f5c <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   d9f5c:	b508      	push	{r3, lr}
   d9f5e:	4b02      	ldr	r3, [pc, #8]	; (d9f68 <opendir+0xc>)
   d9f60:	681b      	ldr	r3, [r3, #0]
   d9f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9f64:	9301      	str	r3, [sp, #4]
   d9f66:	bd08      	pop	{r3, pc}
   d9f68:	00030284 	.word	0x00030284

000d9f6c <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   d9f6c:	b508      	push	{r3, lr}
   d9f6e:	4b02      	ldr	r3, [pc, #8]	; (d9f78 <readdir+0xc>)
   d9f70:	681b      	ldr	r3, [r3, #0]
   d9f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9f74:	9301      	str	r3, [sp, #4]
   d9f76:	bd08      	pop	{r3, pc}
   d9f78:	00030284 	.word	0x00030284

000d9f7c <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   d9f7c:	b508      	push	{r3, lr}
   d9f7e:	4b02      	ldr	r3, [pc, #8]	; (d9f88 <closedir+0xc>)
   d9f80:	681b      	ldr	r3, [r3, #0]
   d9f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d9f84:	9301      	str	r3, [sp, #4]
   d9f86:	bd08      	pop	{r3, pc}
   d9f88:	00030284 	.word	0x00030284

000d9f8c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d9f8c:	b508      	push	{r3, lr}
   d9f8e:	4b02      	ldr	r3, [pc, #8]	; (d9f98 <hal_usart_init+0xc>)
   d9f90:	681b      	ldr	r3, [r3, #0]
   d9f92:	681b      	ldr	r3, [r3, #0]
   d9f94:	9301      	str	r3, [sp, #4]
   d9f96:	bd08      	pop	{r3, pc}
   d9f98:	0003023c 	.word	0x0003023c

000d9f9c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d9f9c:	b508      	push	{r3, lr}
   d9f9e:	4b02      	ldr	r3, [pc, #8]	; (d9fa8 <hal_usart_end+0xc>)
   d9fa0:	681b      	ldr	r3, [r3, #0]
   d9fa2:	689b      	ldr	r3, [r3, #8]
   d9fa4:	9301      	str	r3, [sp, #4]
   d9fa6:	bd08      	pop	{r3, pc}
   d9fa8:	0003023c 	.word	0x0003023c

000d9fac <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d9fac:	b508      	push	{r3, lr}
   d9fae:	4b02      	ldr	r3, [pc, #8]	; (d9fb8 <hal_usart_write+0xc>)
   d9fb0:	681b      	ldr	r3, [r3, #0]
   d9fb2:	68db      	ldr	r3, [r3, #12]
   d9fb4:	9301      	str	r3, [sp, #4]
   d9fb6:	bd08      	pop	{r3, pc}
   d9fb8:	0003023c 	.word	0x0003023c

000d9fbc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d9fbc:	b508      	push	{r3, lr}
   d9fbe:	4b02      	ldr	r3, [pc, #8]	; (d9fc8 <hal_usart_available+0xc>)
   d9fc0:	681b      	ldr	r3, [r3, #0]
   d9fc2:	691b      	ldr	r3, [r3, #16]
   d9fc4:	9301      	str	r3, [sp, #4]
   d9fc6:	bd08      	pop	{r3, pc}
   d9fc8:	0003023c 	.word	0x0003023c

000d9fcc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d9fcc:	b508      	push	{r3, lr}
   d9fce:	4b02      	ldr	r3, [pc, #8]	; (d9fd8 <hal_usart_read+0xc>)
   d9fd0:	681b      	ldr	r3, [r3, #0]
   d9fd2:	695b      	ldr	r3, [r3, #20]
   d9fd4:	9301      	str	r3, [sp, #4]
   d9fd6:	bd08      	pop	{r3, pc}
   d9fd8:	0003023c 	.word	0x0003023c

000d9fdc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d9fdc:	b508      	push	{r3, lr}
   d9fde:	4b02      	ldr	r3, [pc, #8]	; (d9fe8 <hal_usart_peek+0xc>)
   d9fe0:	681b      	ldr	r3, [r3, #0]
   d9fe2:	699b      	ldr	r3, [r3, #24]
   d9fe4:	9301      	str	r3, [sp, #4]
   d9fe6:	bd08      	pop	{r3, pc}
   d9fe8:	0003023c 	.word	0x0003023c

000d9fec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d9fec:	b508      	push	{r3, lr}
   d9fee:	4b02      	ldr	r3, [pc, #8]	; (d9ff8 <hal_usart_flush+0xc>)
   d9ff0:	681b      	ldr	r3, [r3, #0]
   d9ff2:	69db      	ldr	r3, [r3, #28]
   d9ff4:	9301      	str	r3, [sp, #4]
   d9ff6:	bd08      	pop	{r3, pc}
   d9ff8:	0003023c 	.word	0x0003023c

000d9ffc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d9ffc:	b508      	push	{r3, lr}
   d9ffe:	4b02      	ldr	r3, [pc, #8]	; (da008 <hal_usart_is_enabled+0xc>)
   da000:	681b      	ldr	r3, [r3, #0]
   da002:	6a1b      	ldr	r3, [r3, #32]
   da004:	9301      	str	r3, [sp, #4]
   da006:	bd08      	pop	{r3, pc}
   da008:	0003023c 	.word	0x0003023c

000da00c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   da00c:	b508      	push	{r3, lr}
   da00e:	4b02      	ldr	r3, [pc, #8]	; (da018 <hal_usart_available_data_for_write+0xc>)
   da010:	681b      	ldr	r3, [r3, #0]
   da012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da014:	9301      	str	r3, [sp, #4]
   da016:	bd08      	pop	{r3, pc}
   da018:	0003023c 	.word	0x0003023c

000da01c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   da01c:	b508      	push	{r3, lr}
   da01e:	4b02      	ldr	r3, [pc, #8]	; (da028 <hal_usart_begin_config+0xc>)
   da020:	681b      	ldr	r3, [r3, #0]
   da022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da024:	9301      	str	r3, [sp, #4]
   da026:	bd08      	pop	{r3, pc}
   da028:	0003023c 	.word	0x0003023c

000da02c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   da02c:	b508      	push	{r3, lr}
   da02e:	4b02      	ldr	r3, [pc, #8]	; (da038 <HAL_USB_USART_Init+0xc>)
   da030:	681b      	ldr	r3, [r3, #0]
   da032:	681b      	ldr	r3, [r3, #0]
   da034:	9301      	str	r3, [sp, #4]
   da036:	bd08      	pop	{r3, pc}
   da038:	0003024c 	.word	0x0003024c

000da03c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   da03c:	b508      	push	{r3, lr}
   da03e:	4b02      	ldr	r3, [pc, #8]	; (da048 <HAL_USB_USART_Begin+0xc>)
   da040:	681b      	ldr	r3, [r3, #0]
   da042:	685b      	ldr	r3, [r3, #4]
   da044:	9301      	str	r3, [sp, #4]
   da046:	bd08      	pop	{r3, pc}
   da048:	0003024c 	.word	0x0003024c

000da04c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   da04c:	b508      	push	{r3, lr}
   da04e:	4b02      	ldr	r3, [pc, #8]	; (da058 <HAL_USB_USART_End+0xc>)
   da050:	681b      	ldr	r3, [r3, #0]
   da052:	689b      	ldr	r3, [r3, #8]
   da054:	9301      	str	r3, [sp, #4]
   da056:	bd08      	pop	{r3, pc}
   da058:	0003024c 	.word	0x0003024c

000da05c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   da05c:	b508      	push	{r3, lr}
   da05e:	4b02      	ldr	r3, [pc, #8]	; (da068 <HAL_USB_USART_Available_Data+0xc>)
   da060:	681b      	ldr	r3, [r3, #0]
   da062:	691b      	ldr	r3, [r3, #16]
   da064:	9301      	str	r3, [sp, #4]
   da066:	bd08      	pop	{r3, pc}
   da068:	0003024c 	.word	0x0003024c

000da06c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   da06c:	b508      	push	{r3, lr}
   da06e:	4b02      	ldr	r3, [pc, #8]	; (da078 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   da070:	681b      	ldr	r3, [r3, #0]
   da072:	695b      	ldr	r3, [r3, #20]
   da074:	9301      	str	r3, [sp, #4]
   da076:	bd08      	pop	{r3, pc}
   da078:	0003024c 	.word	0x0003024c

000da07c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da07c:	b508      	push	{r3, lr}
   da07e:	4b02      	ldr	r3, [pc, #8]	; (da088 <HAL_USB_USART_Receive_Data+0xc>)
   da080:	681b      	ldr	r3, [r3, #0]
   da082:	699b      	ldr	r3, [r3, #24]
   da084:	9301      	str	r3, [sp, #4]
   da086:	bd08      	pop	{r3, pc}
   da088:	0003024c 	.word	0x0003024c

000da08c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da08c:	b508      	push	{r3, lr}
   da08e:	4b02      	ldr	r3, [pc, #8]	; (da098 <HAL_USB_USART_Send_Data+0xc>)
   da090:	681b      	ldr	r3, [r3, #0]
   da092:	69db      	ldr	r3, [r3, #28]
   da094:	9301      	str	r3, [sp, #4]
   da096:	bd08      	pop	{r3, pc}
   da098:	0003024c 	.word	0x0003024c

000da09c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   da09c:	b508      	push	{r3, lr}
   da09e:	4b02      	ldr	r3, [pc, #8]	; (da0a8 <HAL_USB_USART_Flush_Data+0xc>)
   da0a0:	681b      	ldr	r3, [r3, #0]
   da0a2:	6a1b      	ldr	r3, [r3, #32]
   da0a4:	9301      	str	r3, [sp, #4]
   da0a6:	bd08      	pop	{r3, pc}
   da0a8:	0003024c 	.word	0x0003024c

000da0ac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   da0ac:	b508      	push	{r3, lr}
   da0ae:	4b02      	ldr	r3, [pc, #8]	; (da0b8 <panic_+0xc>)
   da0b0:	681b      	ldr	r3, [r3, #0]
   da0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da0b4:	9301      	str	r3, [sp, #4]
   da0b6:	bd08      	pop	{r3, pc}
   da0b8:	00030260 	.word	0x00030260

000da0bc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   da0bc:	b508      	push	{r3, lr}
   da0be:	4b02      	ldr	r3, [pc, #8]	; (da0c8 <log_message+0xc>)
   da0c0:	681b      	ldr	r3, [r3, #0]
   da0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da0c4:	9301      	str	r3, [sp, #4]
   da0c6:	bd08      	pop	{r3, pc}
   da0c8:	00030260 	.word	0x00030260

000da0cc <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   da0cc:	b508      	push	{r3, lr}
   da0ce:	4b02      	ldr	r3, [pc, #8]	; (da0d8 <log_message_v+0xc>)
   da0d0:	681b      	ldr	r3, [r3, #0]
   da0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da0d4:	9301      	str	r3, [sp, #4]
   da0d6:	bd08      	pop	{r3, pc}
   da0d8:	00030260 	.word	0x00030260

000da0dc <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   da0dc:	b508      	push	{r3, lr}
   da0de:	4b02      	ldr	r3, [pc, #8]	; (da0e8 <log_level_name+0xc>)
   da0e0:	681b      	ldr	r3, [r3, #0]
   da0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   da0e4:	9301      	str	r3, [sp, #4]
   da0e6:	bd08      	pop	{r3, pc}
   da0e8:	00030260 	.word	0x00030260

000da0ec <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   da0ec:	b508      	push	{r3, lr}
   da0ee:	4b02      	ldr	r3, [pc, #8]	; (da0f8 <log_set_callbacks+0xc>)
   da0f0:	681b      	ldr	r3, [r3, #0]
   da0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   da0f4:	9301      	str	r3, [sp, #4]
   da0f6:	bd08      	pop	{r3, pc}
   da0f8:	00030260 	.word	0x00030260

000da0fc <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   da0fc:	b508      	push	{r3, lr}
   da0fe:	4b03      	ldr	r3, [pc, #12]	; (da10c <diag_get_source+0x10>)
   da100:	681b      	ldr	r3, [r3, #0]
   da102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   da106:	9301      	str	r3, [sp, #4]
   da108:	bd08      	pop	{r3, pc}
   da10a:	0000      	.short	0x0000
   da10c:	00030260 	.word	0x00030260

000da110 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   da110:	b508      	push	{r3, lr}
   da112:	4b02      	ldr	r3, [pc, #8]	; (da11c <system_mode+0xc>)
   da114:	681b      	ldr	r3, [r3, #0]
   da116:	681b      	ldr	r3, [r3, #0]
   da118:	9301      	str	r3, [sp, #4]
   da11a:	bd08      	pop	{r3, pc}
   da11c:	00030220 	.word	0x00030220

000da120 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   da120:	b508      	push	{r3, lr}
   da122:	4b02      	ldr	r3, [pc, #8]	; (da12c <set_system_mode+0xc>)
   da124:	681b      	ldr	r3, [r3, #0]
   da126:	685b      	ldr	r3, [r3, #4]
   da128:	9301      	str	r3, [sp, #4]
   da12a:	bd08      	pop	{r3, pc}
   da12c:	00030220 	.word	0x00030220

000da130 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   da130:	b508      	push	{r3, lr}
   da132:	4b02      	ldr	r3, [pc, #8]	; (da13c <system_delay_ms+0xc>)
   da134:	681b      	ldr	r3, [r3, #0]
   da136:	695b      	ldr	r3, [r3, #20]
   da138:	9301      	str	r3, [sp, #4]
   da13a:	bd08      	pop	{r3, pc}
   da13c:	00030220 	.word	0x00030220

000da140 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   da140:	b508      	push	{r3, lr}
   da142:	4b02      	ldr	r3, [pc, #8]	; (da14c <system_subscribe_event+0xc>)
   da144:	681b      	ldr	r3, [r3, #0]
   da146:	6a1b      	ldr	r3, [r3, #32]
   da148:	9301      	str	r3, [sp, #4]
   da14a:	bd08      	pop	{r3, pc}
   da14c:	00030220 	.word	0x00030220

000da150 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   da150:	b508      	push	{r3, lr}
   da152:	4b02      	ldr	r3, [pc, #8]	; (da15c <system_thread_set_state+0xc>)
   da154:	681b      	ldr	r3, [r3, #0]
   da156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da158:	9301      	str	r3, [sp, #4]
   da15a:	bd08      	pop	{r3, pc}
   da15c:	00030220 	.word	0x00030220

000da160 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   da160:	b508      	push	{r3, lr}
   da162:	4b02      	ldr	r3, [pc, #8]	; (da16c <application_thread_current+0xc>)
   da164:	681b      	ldr	r3, [r3, #0]
   da166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da168:	9301      	str	r3, [sp, #4]
   da16a:	bd08      	pop	{r3, pc}
   da16c:	00030220 	.word	0x00030220

000da170 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   da170:	b508      	push	{r3, lr}
   da172:	4b02      	ldr	r3, [pc, #8]	; (da17c <application_thread_invoke+0xc>)
   da174:	681b      	ldr	r3, [r3, #0]
   da176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da178:	9301      	str	r3, [sp, #4]
   da17a:	bd08      	pop	{r3, pc}
   da17c:	00030220 	.word	0x00030220

000da180 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   da180:	b508      	push	{r3, lr}
   da182:	4b02      	ldr	r3, [pc, #8]	; (da18c <system_thread_get_state+0xc>)
   da184:	681b      	ldr	r3, [r3, #0]
   da186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da188:	9301      	str	r3, [sp, #4]
   da18a:	bd08      	pop	{r3, pc}
   da18c:	00030220 	.word	0x00030220

000da190 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   da190:	b508      	push	{r3, lr}
   da192:	4b02      	ldr	r3, [pc, #8]	; (da19c <system_notify_time_changed+0xc>)
   da194:	681b      	ldr	r3, [r3, #0]
   da196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   da198:	9301      	str	r3, [sp, #4]
   da19a:	bd08      	pop	{r3, pc}
   da19c:	00030220 	.word	0x00030220

000da1a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   da1a0:	b508      	push	{r3, lr}
   da1a2:	4b03      	ldr	r3, [pc, #12]	; (da1b0 <system_ctrl_set_app_request_handler+0x10>)
   da1a4:	681b      	ldr	r3, [r3, #0]
   da1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   da1aa:	9301      	str	r3, [sp, #4]
   da1ac:	bd08      	pop	{r3, pc}
   da1ae:	0000      	.short	0x0000
   da1b0:	00030220 	.word	0x00030220

000da1b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   da1b4:	b508      	push	{r3, lr}
   da1b6:	4b03      	ldr	r3, [pc, #12]	; (da1c4 <system_ctrl_set_result+0x10>)
   da1b8:	681b      	ldr	r3, [r3, #0]
   da1ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   da1be:	9301      	str	r3, [sp, #4]
   da1c0:	bd08      	pop	{r3, pc}
   da1c2:	0000      	.short	0x0000
   da1c4:	00030220 	.word	0x00030220

000da1c8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   da1c8:	b508      	push	{r3, lr}
   da1ca:	4b03      	ldr	r3, [pc, #12]	; (da1d8 <system_sleep_ext+0x10>)
   da1cc:	681b      	ldr	r3, [r3, #0]
   da1ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   da1d2:	9301      	str	r3, [sp, #4]
   da1d4:	bd08      	pop	{r3, pc}
   da1d6:	0000      	.short	0x0000
   da1d8:	00030220 	.word	0x00030220

000da1dc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   da1dc:	b508      	push	{r3, lr}
   da1de:	4b02      	ldr	r3, [pc, #8]	; (da1e8 <spark_variable+0xc>)
   da1e0:	681b      	ldr	r3, [r3, #0]
   da1e2:	681b      	ldr	r3, [r3, #0]
   da1e4:	9301      	str	r3, [sp, #4]
   da1e6:	bd08      	pop	{r3, pc}
   da1e8:	00030244 	.word	0x00030244

000da1ec <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   da1ec:	b508      	push	{r3, lr}
   da1ee:	4b02      	ldr	r3, [pc, #8]	; (da1f8 <spark_function+0xc>)
   da1f0:	681b      	ldr	r3, [r3, #0]
   da1f2:	685b      	ldr	r3, [r3, #4]
   da1f4:	9301      	str	r3, [sp, #4]
   da1f6:	bd08      	pop	{r3, pc}
   da1f8:	00030244 	.word	0x00030244

000da1fc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   da1fc:	b508      	push	{r3, lr}
   da1fe:	4b02      	ldr	r3, [pc, #8]	; (da208 <spark_process+0xc>)
   da200:	681b      	ldr	r3, [r3, #0]
   da202:	689b      	ldr	r3, [r3, #8]
   da204:	9301      	str	r3, [sp, #4]
   da206:	bd08      	pop	{r3, pc}
   da208:	00030244 	.word	0x00030244

000da20c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   da20c:	b508      	push	{r3, lr}
   da20e:	4b02      	ldr	r3, [pc, #8]	; (da218 <spark_cloud_flag_connect+0xc>)
   da210:	681b      	ldr	r3, [r3, #0]
   da212:	68db      	ldr	r3, [r3, #12]
   da214:	9301      	str	r3, [sp, #4]
   da216:	bd08      	pop	{r3, pc}
   da218:	00030244 	.word	0x00030244

000da21c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   da21c:	b508      	push	{r3, lr}
   da21e:	4b02      	ldr	r3, [pc, #8]	; (da228 <spark_cloud_flag_connected+0xc>)
   da220:	681b      	ldr	r3, [r3, #0]
   da222:	695b      	ldr	r3, [r3, #20]
   da224:	9301      	str	r3, [sp, #4]
   da226:	bd08      	pop	{r3, pc}
   da228:	00030244 	.word	0x00030244

000da22c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   da22c:	b508      	push	{r3, lr}
   da22e:	4b02      	ldr	r3, [pc, #8]	; (da238 <spark_send_event+0xc>)
   da230:	681b      	ldr	r3, [r3, #0]
   da232:	6a1b      	ldr	r3, [r3, #32]
   da234:	9301      	str	r3, [sp, #4]
   da236:	bd08      	pop	{r3, pc}
   da238:	00030244 	.word	0x00030244

000da23c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   da23c:	b508      	push	{r3, lr}
   da23e:	4b02      	ldr	r3, [pc, #8]	; (da248 <spark_sync_time+0xc>)
   da240:	681b      	ldr	r3, [r3, #0]
   da242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da244:	9301      	str	r3, [sp, #4]
   da246:	bd08      	pop	{r3, pc}
   da248:	00030244 	.word	0x00030244

000da24c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   da24c:	b508      	push	{r3, lr}
   da24e:	4b02      	ldr	r3, [pc, #8]	; (da258 <spark_sync_time_pending+0xc>)
   da250:	681b      	ldr	r3, [r3, #0]
   da252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da254:	9301      	str	r3, [sp, #4]
   da256:	bd08      	pop	{r3, pc}
   da258:	00030244 	.word	0x00030244

000da25c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   da25c:	b508      	push	{r3, lr}
   da25e:	4b02      	ldr	r3, [pc, #8]	; (da268 <spark_sync_time_last+0xc>)
   da260:	681b      	ldr	r3, [r3, #0]
   da262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da264:	9301      	str	r3, [sp, #4]
   da266:	bd08      	pop	{r3, pc}
   da268:	00030244 	.word	0x00030244

000da26c <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   da26c:	b508      	push	{r3, lr}
   da26e:	4b02      	ldr	r3, [pc, #8]	; (da278 <spark_set_connection_property+0xc>)
   da270:	681b      	ldr	r3, [r3, #0]
   da272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   da274:	9301      	str	r3, [sp, #4]
   da276:	bd08      	pop	{r3, pc}
   da278:	00030244 	.word	0x00030244

000da27c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   da27c:	b508      	push	{r3, lr}
   da27e:	4b02      	ldr	r3, [pc, #8]	; (da288 <spark_set_random_seed_from_cloud_handler+0xc>)
   da280:	681b      	ldr	r3, [r3, #0]
   da282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   da284:	9301      	str	r3, [sp, #4]
   da286:	bd08      	pop	{r3, pc}
   da288:	00030244 	.word	0x00030244

000da28c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   da28c:	b508      	push	{r3, lr}
   da28e:	4b02      	ldr	r3, [pc, #8]	; (da298 <spark_cloud_disconnect+0xc>)
   da290:	681b      	ldr	r3, [r3, #0]
   da292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da294:	9301      	str	r3, [sp, #4]
   da296:	bd08      	pop	{r3, pc}
   da298:	00030244 	.word	0x00030244

000da29c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   da29c:	b508      	push	{r3, lr}
   da29e:	4b02      	ldr	r3, [pc, #8]	; (da2a8 <network_connect+0xc>)
   da2a0:	681b      	ldr	r3, [r3, #0]
   da2a2:	685b      	ldr	r3, [r3, #4]
   da2a4:	9301      	str	r3, [sp, #4]
   da2a6:	bd08      	pop	{r3, pc}
   da2a8:	00030240 	.word	0x00030240

000da2ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   da2ac:	b508      	push	{r3, lr}
   da2ae:	4b02      	ldr	r3, [pc, #8]	; (da2b8 <network_connecting+0xc>)
   da2b0:	681b      	ldr	r3, [r3, #0]
   da2b2:	689b      	ldr	r3, [r3, #8]
   da2b4:	9301      	str	r3, [sp, #4]
   da2b6:	bd08      	pop	{r3, pc}
   da2b8:	00030240 	.word	0x00030240

000da2bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   da2bc:	b508      	push	{r3, lr}
   da2be:	4b02      	ldr	r3, [pc, #8]	; (da2c8 <network_disconnect+0xc>)
   da2c0:	681b      	ldr	r3, [r3, #0]
   da2c2:	68db      	ldr	r3, [r3, #12]
   da2c4:	9301      	str	r3, [sp, #4]
   da2c6:	bd08      	pop	{r3, pc}
   da2c8:	00030240 	.word	0x00030240

000da2cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   da2cc:	b508      	push	{r3, lr}
   da2ce:	4b02      	ldr	r3, [pc, #8]	; (da2d8 <network_ready+0xc>)
   da2d0:	681b      	ldr	r3, [r3, #0]
   da2d2:	691b      	ldr	r3, [r3, #16]
   da2d4:	9301      	str	r3, [sp, #4]
   da2d6:	bd08      	pop	{r3, pc}
   da2d8:	00030240 	.word	0x00030240

000da2dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   da2dc:	b508      	push	{r3, lr}
   da2de:	4b02      	ldr	r3, [pc, #8]	; (da2e8 <network_on+0xc>)
   da2e0:	681b      	ldr	r3, [r3, #0]
   da2e2:	695b      	ldr	r3, [r3, #20]
   da2e4:	9301      	str	r3, [sp, #4]
   da2e6:	bd08      	pop	{r3, pc}
   da2e8:	00030240 	.word	0x00030240

000da2ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   da2ec:	b508      	push	{r3, lr}
   da2ee:	4b02      	ldr	r3, [pc, #8]	; (da2f8 <network_off+0xc>)
   da2f0:	681b      	ldr	r3, [r3, #0]
   da2f2:	699b      	ldr	r3, [r3, #24]
   da2f4:	9301      	str	r3, [sp, #4]
   da2f6:	bd08      	pop	{r3, pc}
   da2f8:	00030240 	.word	0x00030240

000da2fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   da2fc:	b508      	push	{r3, lr}
   da2fe:	4b02      	ldr	r3, [pc, #8]	; (da308 <network_listen+0xc>)
   da300:	681b      	ldr	r3, [r3, #0]
   da302:	69db      	ldr	r3, [r3, #28]
   da304:	9301      	str	r3, [sp, #4]
   da306:	bd08      	pop	{r3, pc}
   da308:	00030240 	.word	0x00030240

000da30c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   da30c:	b508      	push	{r3, lr}
   da30e:	4b02      	ldr	r3, [pc, #8]	; (da318 <network_listening+0xc>)
   da310:	681b      	ldr	r3, [r3, #0]
   da312:	6a1b      	ldr	r3, [r3, #32]
   da314:	9301      	str	r3, [sp, #4]
   da316:	bd08      	pop	{r3, pc}
   da318:	00030240 	.word	0x00030240

000da31c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   da31c:	b508      	push	{r3, lr}
   da31e:	4b02      	ldr	r3, [pc, #8]	; (da328 <network_set_listen_timeout+0xc>)
   da320:	681b      	ldr	r3, [r3, #0]
   da322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da324:	9301      	str	r3, [sp, #4]
   da326:	bd08      	pop	{r3, pc}
   da328:	00030240 	.word	0x00030240

000da32c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   da32c:	b508      	push	{r3, lr}
   da32e:	4b02      	ldr	r3, [pc, #8]	; (da338 <network_get_listen_timeout+0xc>)
   da330:	681b      	ldr	r3, [r3, #0]
   da332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da334:	9301      	str	r3, [sp, #4]
   da336:	bd08      	pop	{r3, pc}
   da338:	00030240 	.word	0x00030240

000da33c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   da33c:	b508      	push	{r3, lr}
   da33e:	4b02      	ldr	r3, [pc, #8]	; (da348 <network_is_on+0xc>)
   da340:	681b      	ldr	r3, [r3, #0]
   da342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da344:	9301      	str	r3, [sp, #4]
   da346:	bd08      	pop	{r3, pc}
   da348:	00030240 	.word	0x00030240

000da34c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   da34c:	b508      	push	{r3, lr}
   da34e:	4b02      	ldr	r3, [pc, #8]	; (da358 <network_is_off+0xc>)
   da350:	681b      	ldr	r3, [r3, #0]
   da352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da354:	9301      	str	r3, [sp, #4]
   da356:	bd08      	pop	{r3, pc}
   da358:	00030240 	.word	0x00030240

000da35c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   da35c:	b508      	push	{r3, lr}
   da35e:	4b02      	ldr	r3, [pc, #8]	; (da368 <malloc+0xc>)
   da360:	681b      	ldr	r3, [r3, #0]
   da362:	681b      	ldr	r3, [r3, #0]
   da364:	9301      	str	r3, [sp, #4]
   da366:	bd08      	pop	{r3, pc}
   da368:	0003021c 	.word	0x0003021c

000da36c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   da36c:	b508      	push	{r3, lr}
   da36e:	4b02      	ldr	r3, [pc, #8]	; (da378 <free+0xc>)
   da370:	681b      	ldr	r3, [r3, #0]
   da372:	685b      	ldr	r3, [r3, #4]
   da374:	9301      	str	r3, [sp, #4]
   da376:	bd08      	pop	{r3, pc}
   da378:	0003021c 	.word	0x0003021c

000da37c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   da37c:	b508      	push	{r3, lr}
   da37e:	4b02      	ldr	r3, [pc, #8]	; (da388 <realloc+0xc>)
   da380:	681b      	ldr	r3, [r3, #0]
   da382:	689b      	ldr	r3, [r3, #8]
   da384:	9301      	str	r3, [sp, #4]
   da386:	bd08      	pop	{r3, pc}
   da388:	0003021c 	.word	0x0003021c

000da38c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   da38c:	b508      	push	{r3, lr}
   da38e:	4b02      	ldr	r3, [pc, #8]	; (da398 <siprintf+0xc>)
   da390:	681b      	ldr	r3, [r3, #0]
   da392:	691b      	ldr	r3, [r3, #16]
   da394:	9301      	str	r3, [sp, #4]
   da396:	bd08      	pop	{r3, pc}
   da398:	0003021c 	.word	0x0003021c

000da39c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   da39c:	b508      	push	{r3, lr}
   da39e:	4b02      	ldr	r3, [pc, #8]	; (da3a8 <sscanf+0xc>)
   da3a0:	681b      	ldr	r3, [r3, #0]
   da3a2:	695b      	ldr	r3, [r3, #20]
   da3a4:	9301      	str	r3, [sp, #4]
   da3a6:	bd08      	pop	{r3, pc}
   da3a8:	0003021c 	.word	0x0003021c

000da3ac <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   da3ac:	b508      	push	{r3, lr}
   da3ae:	4b02      	ldr	r3, [pc, #8]	; (da3b8 <snprintf+0xc>)
   da3b0:	681b      	ldr	r3, [r3, #0]
   da3b2:	69db      	ldr	r3, [r3, #28]
   da3b4:	9301      	str	r3, [sp, #4]
   da3b6:	bd08      	pop	{r3, pc}
   da3b8:	0003021c 	.word	0x0003021c

000da3bc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   da3bc:	b508      	push	{r3, lr}
   da3be:	4b02      	ldr	r3, [pc, #8]	; (da3c8 <vsnprintf+0xc>)
   da3c0:	681b      	ldr	r3, [r3, #0]
   da3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da3c4:	9301      	str	r3, [sp, #4]
   da3c6:	bd08      	pop	{r3, pc}
   da3c8:	0003021c 	.word	0x0003021c

000da3cc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   da3cc:	b508      	push	{r3, lr}
   da3ce:	4b02      	ldr	r3, [pc, #8]	; (da3d8 <abort+0xc>)
   da3d0:	681b      	ldr	r3, [r3, #0]
   da3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da3d4:	9301      	str	r3, [sp, #4]
   da3d6:	bd08      	pop	{r3, pc}
   da3d8:	0003021c 	.word	0x0003021c

000da3dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   da3dc:	b508      	push	{r3, lr}
   da3de:	4b02      	ldr	r3, [pc, #8]	; (da3e8 <_malloc_r+0xc>)
   da3e0:	681b      	ldr	r3, [r3, #0]
   da3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da3e4:	9301      	str	r3, [sp, #4]
   da3e6:	bd08      	pop	{r3, pc}
   da3e8:	0003021c 	.word	0x0003021c

000da3ec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   da3ec:	b508      	push	{r3, lr}
   da3ee:	4b02      	ldr	r3, [pc, #8]	; (da3f8 <__errno+0xc>)
   da3f0:	681b      	ldr	r3, [r3, #0]
   da3f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   da3f4:	9301      	str	r3, [sp, #4]
   da3f6:	bd08      	pop	{r3, pc}
   da3f8:	0003021c 	.word	0x0003021c

000da3fc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   da3fc:	b508      	push	{r3, lr}
   da3fe:	4b02      	ldr	r3, [pc, #8]	; (da408 <newlib_impure_ptr_callback+0xc>)
   da400:	681b      	ldr	r3, [r3, #0]
   da402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da404:	9301      	str	r3, [sp, #4]
   da406:	bd08      	pop	{r3, pc}
   da408:	0003021c 	.word	0x0003021c

000da40c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   da40c:	b508      	push	{r3, lr}
   da40e:	4b02      	ldr	r3, [pc, #8]	; (da418 <strftime+0xc>)
   da410:	681b      	ldr	r3, [r3, #0]
   da412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da414:	9301      	str	r3, [sp, #4]
   da416:	bd08      	pop	{r3, pc}
   da418:	0003021c 	.word	0x0003021c

000da41c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   da41c:	b508      	push	{r3, lr}
   da41e:	4b02      	ldr	r3, [pc, #8]	; (da428 <localtime_r+0xc>)
   da420:	681b      	ldr	r3, [r3, #0]
   da422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da424:	9301      	str	r3, [sp, #4]
   da426:	bd08      	pop	{r3, pc}
   da428:	0003021c 	.word	0x0003021c

000da42c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   da42c:	b508      	push	{r3, lr}
   da42e:	4b02      	ldr	r3, [pc, #8]	; (da438 <gmtime_r+0xc>)
   da430:	681b      	ldr	r3, [r3, #0]
   da432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da434:	9301      	str	r3, [sp, #4]
   da436:	bd08      	pop	{r3, pc}
   da438:	0003021c 	.word	0x0003021c

000da43c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   da43c:	b508      	push	{r3, lr}
   da43e:	4b02      	ldr	r3, [pc, #8]	; (da448 <mktime+0xc>)
   da440:	681b      	ldr	r3, [r3, #0]
   da442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da444:	9301      	str	r3, [sp, #4]
   da446:	bd08      	pop	{r3, pc}
   da448:	0003021c 	.word	0x0003021c

000da44c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   da44c:	2100      	movs	r1, #0
   da44e:	f7ff be6f 	b.w	da130 <system_delay_ms>

000da452 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   da452:	b510      	push	{r4, lr}
      if (_M_empty())
   da454:	6883      	ldr	r3, [r0, #8]
   da456:	4604      	mov	r4, r0
   da458:	b90b      	cbnz	r3, da45e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   da45a:	f002 fe07 	bl	dd06c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da45e:	68c3      	ldr	r3, [r0, #12]
   da460:	4798      	blx	r3
      if (_M_manager)
   da462:	68a3      	ldr	r3, [r4, #8]
   da464:	b11b      	cbz	r3, da46e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da466:	2203      	movs	r2, #3
   da468:	4621      	mov	r1, r4
   da46a:	4620      	mov	r0, r4
   da46c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   da46e:	4620      	mov	r0, r4
   da470:	2110      	movs	r1, #16
}
   da472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   da476:	f002 bded 	b.w	dd054 <_ZdlPvj>

000da47a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   da47a:	680b      	ldr	r3, [r1, #0]
   da47c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   da47e:	b113      	cbz	r3, da486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   da480:	685a      	ldr	r2, [r3, #4]
   da482:	3201      	adds	r2, #1
   da484:	605a      	str	r2, [r3, #4]
      }
   da486:	4770      	bx	lr

000da488 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da488:	4802      	ldr	r0, [pc, #8]	; (da494 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   da48a:	2300      	movs	r3, #0
   da48c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   da48e:	f7ff bbbd 	b.w	d9c0c <os_mutex_recursive_create>
   da492:	bf00      	nop
   da494:	2003e4b0 	.word	0x2003e4b0

000da498 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   da498:	2200      	movs	r2, #0
   da49a:	6840      	ldr	r0, [r0, #4]
   da49c:	4611      	mov	r1, r2
   da49e:	f7ff bf15 	b.w	da2cc <network_ready>

000da4a2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   da4a2:	2200      	movs	r2, #0
   da4a4:	6840      	ldr	r0, [r0, #4]
   da4a6:	4611      	mov	r1, r2
   da4a8:	f7ff bf30 	b.w	da30c <network_listening>

000da4ac <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   da4ac:	2200      	movs	r2, #0
   da4ae:	6840      	ldr	r0, [r0, #4]
   da4b0:	4611      	mov	r1, r2
   da4b2:	f7ff bf3b 	b.w	da32c <network_get_listen_timeout>

000da4b6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   da4b6:	6840      	ldr	r0, [r0, #4]
   da4b8:	2200      	movs	r2, #0
   da4ba:	f7ff bf2f 	b.w	da31c <network_set_listen_timeout>

000da4be <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   da4be:	6840      	ldr	r0, [r0, #4]
   da4c0:	2200      	movs	r2, #0
   da4c2:	f081 0101 	eor.w	r1, r1, #1
   da4c6:	f7ff bf19 	b.w	da2fc <network_listen>

000da4ca <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   da4ca:	2300      	movs	r3, #0
   da4cc:	6840      	ldr	r0, [r0, #4]
   da4ce:	461a      	mov	r2, r3
   da4d0:	4619      	mov	r1, r3
   da4d2:	f7ff bf0b 	b.w	da2ec <network_off>

000da4d6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   da4d6:	2300      	movs	r3, #0
   da4d8:	6840      	ldr	r0, [r0, #4]
   da4da:	461a      	mov	r2, r3
   da4dc:	4619      	mov	r1, r3
   da4de:	f7ff befd 	b.w	da2dc <network_on>

000da4e2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   da4e2:	2200      	movs	r2, #0
   da4e4:	6840      	ldr	r0, [r0, #4]
   da4e6:	4611      	mov	r1, r2
   da4e8:	f7ff bee0 	b.w	da2ac <network_connecting>

000da4ec <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da4ec:	6840      	ldr	r0, [r0, #4]
   da4ee:	2200      	movs	r2, #0
   da4f0:	2102      	movs	r1, #2
   da4f2:	f7ff bee3 	b.w	da2bc <network_disconnect>

000da4f6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   da4f6:	2300      	movs	r3, #0
   da4f8:	6840      	ldr	r0, [r0, #4]
   da4fa:	461a      	mov	r2, r3
   da4fc:	f7ff bece 	b.w	da29c <network_connect>

000da500 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   da500:	4b08      	ldr	r3, [pc, #32]	; (da524 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   da502:	b510      	push	{r4, lr}
   da504:	2428      	movs	r4, #40	; 0x28
   da506:	4622      	mov	r2, r4
   da508:	4618      	mov	r0, r3
   da50a:	2100      	movs	r1, #0
   da50c:	f003 fa06 	bl	dd91c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   da510:	4b05      	ldr	r3, [pc, #20]	; (da528 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   da512:	8004      	strh	r4, [r0, #0]
        cid = -1;
   da514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da518:	6042      	str	r2, [r0, #4]
   da51a:	2204      	movs	r2, #4
   da51c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   da51e:	4a03      	ldr	r2, [pc, #12]	; (da52c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   da520:	601a      	str	r2, [r3, #0]
   da522:	bd10      	pop	{r4, pc}
   da524:	2003e4bc 	.word	0x2003e4bc
   da528:	2003e4b4 	.word	0x2003e4b4
   da52c:	000dec94 	.word	0x000dec94

000da530 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da530:	4770      	bx	lr

000da532 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   da532:	2000      	movs	r0, #0
   da534:	4770      	bx	lr

000da536 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da536:	b510      	push	{r4, lr}
   da538:	2110      	movs	r1, #16
   da53a:	4604      	mov	r4, r0
   da53c:	f002 fd8a 	bl	dd054 <_ZdlPvj>
   da540:	4620      	mov	r0, r4
   da542:	bd10      	pop	{r4, pc}

000da544 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   da544:	b508      	push	{r3, lr}
      { delete this; }
   da546:	f7ff fff6 	bl	da536 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   da54a:	bd08      	pop	{r3, pc}

000da54c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   da54c:	b530      	push	{r4, r5, lr}
        type_(type) {
   da54e:	2200      	movs	r2, #0
   da550:	f64f 749c 	movw	r4, #65436	; 0xff9c
   da554:	6002      	str	r2, [r0, #0]
   da556:	8084      	strh	r4, [r0, #4]
   da558:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   da55a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   da55c:	680c      	ldr	r4, [r1, #0]
   da55e:	8085      	strh	r5, [r0, #4]
   da560:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da562:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   da564:	bd30      	pop	{r4, r5, pc}

000da566 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   da566:	b510      	push	{r4, lr}
   da568:	4604      	mov	r4, r0
    free((void*)msg_);
   da56a:	6800      	ldr	r0, [r0, #0]
   da56c:	f7ff fefe 	bl	da36c <free>
}
   da570:	4620      	mov	r0, r4
   da572:	bd10      	pop	{r4, pc}

000da574 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   da574:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   da576:	68c4      	ldr	r4, [r0, #12]
   da578:	b1f4      	cbz	r4, da5b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   da57a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   da57c:	2b02      	cmp	r3, #2
   da57e:	d103      	bne.n	da588 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   da580:	f104 000c 	add.w	r0, r4, #12
   da584:	f7ff ffef 	bl	da566 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   da588:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   da58a:	b135      	cbz	r5, da59a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   da58c:	4628      	mov	r0, r5
   da58e:	f7fa fde1 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
   da592:	2110      	movs	r1, #16
   da594:	4628      	mov	r0, r5
   da596:	f002 fd5d 	bl	dd054 <_ZdlPvj>
   da59a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   da59c:	b135      	cbz	r5, da5ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   da59e:	4628      	mov	r0, r5
   da5a0:	f7fa fdd8 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
   da5a4:	2110      	movs	r1, #16
   da5a6:	4628      	mov	r0, r5
   da5a8:	f002 fd54 	bl	dd054 <_ZdlPvj>
   da5ac:	4620      	mov	r0, r4
   da5ae:	2114      	movs	r1, #20
   da5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da5b4:	f002 bd4e 	b.w	dd054 <_ZdlPvj>
   da5b8:	bd38      	pop	{r3, r4, r5, pc}

000da5ba <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   da5ba:	b510      	push	{r4, lr}
   da5bc:	b088      	sub	sp, #32
   da5be:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   da5c0:	4668      	mov	r0, sp
   da5c2:	f001 ffd4 	bl	dc56e <_ZN6StringC1EPKc>
    return (*fn)(p);
   da5c6:	4669      	mov	r1, sp
   da5c8:	a804      	add	r0, sp, #16
   da5ca:	f002 f81b 	bl	dc604 <_ZN6StringC1ERKS_>
   da5ce:	a804      	add	r0, sp, #16
   da5d0:	47a0      	blx	r4
   da5d2:	4604      	mov	r4, r0
   da5d4:	a804      	add	r0, sp, #16
   da5d6:	f001 ff7f 	bl	dc4d8 <_ZN6StringD1Ev>
    String p(param);
   da5da:	4668      	mov	r0, sp
   da5dc:	f001 ff7c 	bl	dc4d8 <_ZN6StringD1Ev>
}
   da5e0:	4620      	mov	r0, r4
   da5e2:	b008      	add	sp, #32
   da5e4:	bd10      	pop	{r4, pc}

000da5e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   da5e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   da5e8:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   da5ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   da5ee:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   da5f0:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   da5f2:	461a      	mov	r2, r3
   da5f4:	4669      	mov	r1, sp
   da5f6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   da5f8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   da5fc:	f8ad 4000 	strh.w	r4, [sp]
   da600:	f7ff fdf4 	bl	da1ec <spark_function>
}
   da604:	b004      	add	sp, #16
   da606:	bd10      	pop	{r4, pc}

000da608 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   da608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   da60a:	230c      	movs	r3, #12
   da60c:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   da610:	6803      	ldr	r3, [r0, #0]
   da612:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   da616:	7a03      	ldrb	r3, [r0, #8]
   da618:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   da61c:	6843      	ldr	r3, [r0, #4]
   da61e:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   da620:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   da622:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   da624:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   da628:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   da62a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   da62e:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   da632:	f7ff fe2b 	bl	da28c <spark_cloud_disconnect>
}
   da636:	b005      	add	sp, #20
   da638:	f85d fb04 	ldr.w	pc, [sp], #4

000da63c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   da63c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da63e:	460e      	mov	r6, r1
   da640:	4604      	mov	r4, r0
   da642:	f856 3b04 	ldr.w	r3, [r6], #4
   da646:	9300      	str	r3, [sp, #0]
   da648:	460d      	mov	r5, r1
   da64a:	a801      	add	r0, sp, #4
   da64c:	4631      	mov	r1, r6
   da64e:	f7ff ff14 	bl	da47a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da652:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   da654:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   da656:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   da658:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   da65a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   da65c:	2300      	movs	r3, #0
   da65e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   da660:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   da662:	f7f9 fe50 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da666:	4630      	mov	r0, r6
   da668:	f7f9 fe4d 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   da66c:	4628      	mov	r0, r5
   da66e:	2108      	movs	r1, #8
   da670:	f002 fcf0 	bl	dd054 <_ZdlPvj>
        return p;
    }
   da674:	4620      	mov	r0, r4
   da676:	b002      	add	sp, #8
   da678:	bd70      	pop	{r4, r5, r6, pc}

000da67a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   da67a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   da67c:	b510      	push	{r4, lr}
      if (_M_empty())
   da67e:	b90a      	cbnz	r2, da684 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   da680:	f002 fcf4 	bl	dd06c <_ZSt25__throw_bad_function_callv>
    }
   da684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da688:	68c3      	ldr	r3, [r0, #12]
   da68a:	4718      	bx	r3

000da68c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da68c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   da68e:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   da690:	f100 0110 	add.w	r1, r0, #16
   da694:	f7ff fff1 	bl	da67a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   da698:	bd08      	pop	{r3, pc}

000da69a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   da69a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   da69c:	b510      	push	{r4, lr}
      if (_M_empty())
   da69e:	b90a      	cbnz	r2, da6a4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   da6a0:	f002 fce4 	bl	dd06c <_ZSt25__throw_bad_function_callv>
    }
   da6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da6a8:	68c3      	ldr	r3, [r0, #12]
   da6aa:	4718      	bx	r3

000da6ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da6ac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   da6ae:	6800      	ldr	r0, [r0, #0]
   da6b0:	f100 0110 	add.w	r1, r0, #16
   da6b4:	f7ff fff1 	bl	da69a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   da6b8:	bd08      	pop	{r3, pc}
	...

000da6bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   da6bc:	b538      	push	{r3, r4, r5, lr}
   da6be:	2300      	movs	r3, #0
   da6c0:	4604      	mov	r4, r0
   da6c2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da6c4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   da6c6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da6c8:	f7f9 fce5 	bl	d4096 <_Znwj>
   da6cc:	b128      	cbz	r0, da6da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   da6ce:	2301      	movs	r3, #1
   da6d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   da6d4:	4b02      	ldr	r3, [pc, #8]	; (da6e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   da6d6:	6003      	str	r3, [r0, #0]
   da6d8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da6da:	6020      	str	r0, [r4, #0]
	}
   da6dc:	4620      	mov	r0, r4
   da6de:	bd38      	pop	{r3, r4, r5, pc}
   da6e0:	000decd0 	.word	0x000decd0

000da6e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   da6e4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da6e6:	2300      	movs	r3, #0
   da6e8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da6ea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da6ec:	4604      	mov	r4, r0
   da6ee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da6f0:	b12b      	cbz	r3, da6fe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da6f2:	2202      	movs	r2, #2
   da6f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da6f6:	68eb      	ldr	r3, [r5, #12]
   da6f8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da6fa:	68ab      	ldr	r3, [r5, #8]
   da6fc:	60a3      	str	r3, [r4, #8]
    }
   da6fe:	4620      	mov	r0, r4
   da700:	bd38      	pop	{r3, r4, r5, pc}
	...

000da704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   da704:	b5f0      	push	{r4, r5, r6, r7, lr}
   da706:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   da708:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   da70a:	4668      	mov	r0, sp
   da70c:	f7ff ff1e 	bl	da54c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   da710:	f04f 0302 	mov.w	r3, #2
   da714:	e8d4 2f4f 	ldrexb	r2, [r4]
   da718:	2a00      	cmp	r2, #0
   da71a:	d103      	bne.n	da724 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   da71c:	e8c4 3f41 	strexb	r1, r3, [r4]
   da720:	2900      	cmp	r1, #0
   da722:	d1f7      	bne.n	da714 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   da724:	d125      	bne.n	da772 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   da726:	f104 050c 	add.w	r5, r4, #12
   da72a:	4669      	mov	r1, sp
   da72c:	4628      	mov	r0, r5
   da72e:	f7ff ff0d 	bl	da54c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   da732:	f3bf 8f5b 	dmb	ish
   da736:	2301      	movs	r3, #1
   da738:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   da73a:	2000      	movs	r0, #0
   da73c:	f104 0308 	add.w	r3, r4, #8
   da740:	f3bf 8f5b 	dmb	ish
   da744:	e853 6f00 	ldrex	r6, [r3]
   da748:	e843 0200 	strex	r2, r0, [r3]
   da74c:	2a00      	cmp	r2, #0
   da74e:	d1f9      	bne.n	da744 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   da750:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   da754:	b16e      	cbz	r6, da772 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   da756:	f7ff fd03 	bl	da160 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   da75a:	b178      	cbz	r0, da77c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   da75c:	4629      	mov	r1, r5
   da75e:	4630      	mov	r0, r6
   da760:	f7ff ff8b 	bl	da67a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   da764:	4630      	mov	r0, r6
   da766:	f7fa fcf5 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   da76a:	2110      	movs	r1, #16
   da76c:	4630      	mov	r0, r6
   da76e:	f002 fc71 	bl	dd054 <_ZdlPvj>
        p_->setError(std::move(error));
   da772:	4668      	mov	r0, sp
   da774:	f7ff fef7 	bl	da566 <_ZN8particle5ErrorD1Ev>
    }
   da778:	b009      	add	sp, #36	; 0x24
   da77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   da77c:	4631      	mov	r1, r6
   da77e:	a802      	add	r0, sp, #8
   da780:	f7ff ffb0 	bl	da6e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   da784:	68e0      	ldr	r0, [r4, #12]
   da786:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   da78a:	b108      	cbz	r0, da790 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   da78c:	f003 f950 	bl	dda30 <strdup>
        type_(type) {
   da790:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   da792:	2010      	movs	r0, #16
   da794:	f8ad 501c 	strh.w	r5, [sp, #28]
   da798:	f7f9 fc7d 	bl	d4096 <_Znwj>
   da79c:	4605      	mov	r5, r0
   da79e:	b1e8      	cbz	r0, da7dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   da7a0:	2700      	movs	r7, #0
   da7a2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da7a4:	2018      	movs	r0, #24
   da7a6:	f7f9 fc76 	bl	d4096 <_Znwj>
   da7aa:	4604      	mov	r4, r0
   da7ac:	b188      	cbz	r0, da7d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   da7ae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   da7b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   da7b2:	a802      	add	r0, sp, #8
   da7b4:	f7fa fdcd 	bl	d5352 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da7b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   da7ba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da7bc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da7be:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   da7c0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   da7c2:	a906      	add	r1, sp, #24
   da7c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da7c6:	60e3      	str	r3, [r4, #12]
   da7c8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   da7cc:	9205      	str	r2, [sp, #20]
   da7ce:	f7ff febd 	bl	da54c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   da7d2:	4b08      	ldr	r3, [pc, #32]	; (da7f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   da7d4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   da7d6:	4b08      	ldr	r3, [pc, #32]	; (da7f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da7d8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   da7da:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   da7dc:	a806      	add	r0, sp, #24
   da7de:	f7ff fec2 	bl	da566 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   da7e2:	a802      	add	r0, sp, #8
   da7e4:	f7fa fcb6 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   da7e8:	2200      	movs	r2, #0
   da7ea:	4629      	mov	r1, r5
   da7ec:	4803      	ldr	r0, [pc, #12]	; (da7fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   da7ee:	f7ff fcbf 	bl	da170 <application_thread_invoke>
   da7f2:	e7b7      	b.n	da764 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   da7f4:	000da68d 	.word	0x000da68d
   da7f8:	000da925 	.word	0x000da925
   da7fc:	000da453 	.word	0x000da453

000da800 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   da800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da804:	b08a      	sub	sp, #40	; 0x28
   da806:	4605      	mov	r5, r0
   da808:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   da80c:	460c      	mov	r4, r1
   da80e:	4617      	mov	r7, r2
   da810:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   da812:	f7ff fd03 	bl	da21c <spark_cloud_flag_connected>
   da816:	ae07      	add	r6, sp, #28
    if (!connected()) {
   da818:	4682      	mov	sl, r0
   da81a:	bb38      	cbnz	r0, da86c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   da81c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   da820:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   da822:	a905      	add	r1, sp, #20
   da824:	4630      	mov	r0, r6
   da826:	f8ad 3018 	strh.w	r3, [sp, #24]
   da82a:	f7ff fe8f 	bl	da54c <_ZN8particle5ErrorC1EOS0_>
   da82e:	2014      	movs	r0, #20
   da830:	f7f9 fc31 	bl	d4096 <_Znwj>
   da834:	4604      	mov	r4, r0
   da836:	b148      	cbz	r0, da84c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   da838:	2302      	movs	r3, #2
   da83a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da83c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   da83e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da842:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   da844:	4631      	mov	r1, r6
   da846:	300c      	adds	r0, #12
   da848:	f7ff fe80 	bl	da54c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   da84c:	4628      	mov	r0, r5
	: __shared_count(__p)
   da84e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   da850:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   da854:	f7ff ff32 	bl	da6bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   da858:	4630      	mov	r0, r6
   da85a:	f7ff fe84 	bl	da566 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   da85e:	a805      	add	r0, sp, #20
   da860:	f7ff fe81 	bl	da566 <_ZN8particle5ErrorD1Ev>
}
   da864:	4628      	mov	r0, r5
   da866:	b00a      	add	sp, #40	; 0x28
   da868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   da86c:	230c      	movs	r3, #12
   da86e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   da872:	2014      	movs	r0, #20
   da874:	e9cd aa08 	strd	sl, sl, [sp, #32]
   da878:	9307      	str	r3, [sp, #28]
   da87a:	f7f9 fc0c 	bl	d4096 <_Znwj>
   da87e:	4601      	mov	r1, r0
   da880:	b128      	cbz	r0, da88e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   da882:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   da886:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da88a:	f880 a001 	strb.w	sl, [r0, #1]
   da88e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   da890:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   da892:	f7ff ff13 	bl	da6bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   da896:	4b22      	ldr	r3, [pc, #136]	; (da920 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   da898:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   da89a:	2008      	movs	r0, #8
   da89c:	f7f9 fbfb 	bl	d4096 <_Znwj>
   da8a0:	4682      	mov	sl, r0
   da8a2:	b128      	cbz	r0, da8b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da8a4:	9b03      	ldr	r3, [sp, #12]
   da8a6:	f840 3b04 	str.w	r3, [r0], #4
   da8aa:	a904      	add	r1, sp, #16
   da8ac:	f7ff fde5 	bl	da47a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   da8b0:	9600      	str	r6, [sp, #0]
   da8b2:	fa5f f389 	uxtb.w	r3, r9
   da8b6:	4642      	mov	r2, r8
   da8b8:	4639      	mov	r1, r7
   da8ba:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   da8bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   da8c0:	f7ff fcb4 	bl	da22c <spark_send_event>
   da8c4:	b9b8      	cbnz	r0, da8f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   da8c6:	9b03      	ldr	r3, [sp, #12]
   da8c8:	785b      	ldrb	r3, [r3, #1]
   da8ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   da8ce:	b993      	cbnz	r3, da8f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   da8d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   da8d4:	a905      	add	r1, sp, #20
   da8d6:	a803      	add	r0, sp, #12
   da8d8:	9205      	str	r2, [sp, #20]
   da8da:	f8ad 3018 	strh.w	r3, [sp, #24]
   da8de:	f7ff ff11 	bl	da704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   da8e2:	a805      	add	r0, sp, #20
   da8e4:	f7ff fe3f 	bl	da566 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   da8e8:	a805      	add	r0, sp, #20
   da8ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   da8ec:	f7ff fea6 	bl	da63c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   da8f0:	a806      	add	r0, sp, #24
   da8f2:	f7f9 fd08 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da8f6:	9b03      	ldr	r3, [sp, #12]
   da8f8:	9305      	str	r3, [sp, #20]
   da8fa:	a904      	add	r1, sp, #16
   da8fc:	a806      	add	r0, sp, #24
   da8fe:	f7ff fdbc 	bl	da47a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   da902:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da904:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   da906:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   da908:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   da90a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   da90c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   da90e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   da910:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   da912:	f7f9 fcf8 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da916:	a804      	add	r0, sp, #16
   da918:	f7f9 fcf5 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   da91c:	e7a2      	b.n	da864 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   da91e:	bf00      	nop
   da920:	000da9e9 	.word	0x000da9e9

000da924 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   da924:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   da926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da928:	4605      	mov	r5, r0
	  switch (__op)
   da92a:	d007      	beq.n	da93c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   da92c:	2a03      	cmp	r2, #3
   da92e:	d018      	beq.n	da962 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   da930:	2a01      	cmp	r2, #1
   da932:	d101      	bne.n	da938 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   da934:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   da936:	6003      	str	r3, [r0, #0]
	}
   da938:	2000      	movs	r0, #0
   da93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   da93c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   da93e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   da940:	f7f9 fba9 	bl	d4096 <_Znwj>
   da944:	4604      	mov	r4, r0
   da946:	b150      	cbz	r0, da95e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   da948:	4631      	mov	r1, r6
   da94a:	f7ff fecb 	bl	da6e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   da94e:	6930      	ldr	r0, [r6, #16]
   da950:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   da954:	b108      	cbz	r0, da95a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   da956:	f003 f86b 	bl	dda30 <strdup>
        type_(type) {
   da95a:	6120      	str	r0, [r4, #16]
   da95c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   da95e:	602c      	str	r4, [r5, #0]
	}
   da960:	e7ea      	b.n	da938 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   da962:	6804      	ldr	r4, [r0, #0]
   da964:	2c00      	cmp	r4, #0
   da966:	d0e7      	beq.n	da938 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   da968:	f104 0010 	add.w	r0, r4, #16
   da96c:	f7ff fdfb 	bl	da566 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   da970:	4620      	mov	r0, r4
   da972:	f7fa fbef 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   da976:	2118      	movs	r1, #24
   da978:	4620      	mov	r0, r4
   da97a:	f002 fb6b 	bl	dd054 <_ZdlPvj>
   da97e:	e7db      	b.n	da938 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000da980 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   da980:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da982:	2300      	movs	r3, #0
   da984:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da986:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da988:	4604      	mov	r4, r0
   da98a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da98c:	b12b      	cbz	r3, da99a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da98e:	2202      	movs	r2, #2
   da990:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da992:	68eb      	ldr	r3, [r5, #12]
   da994:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da996:	68ab      	ldr	r3, [r5, #8]
   da998:	60a3      	str	r3, [r4, #8]
    }
   da99a:	4620      	mov	r0, r4
   da99c:	bd38      	pop	{r3, r4, r5, pc}

000da99e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   da99e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   da9a0:	b570      	push	{r4, r5, r6, lr}
   da9a2:	4604      	mov	r4, r0
	  switch (__op)
   da9a4:	d007      	beq.n	da9b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   da9a6:	2a03      	cmp	r2, #3
   da9a8:	d012      	beq.n	da9d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   da9aa:	2a01      	cmp	r2, #1
   da9ac:	d101      	bne.n	da9b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   da9ae:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   da9b0:	6003      	str	r3, [r0, #0]
	}
   da9b2:	2000      	movs	r0, #0
   da9b4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   da9b6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   da9b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   da9ba:	f7f9 fb6c 	bl	d4096 <_Znwj>
   da9be:	4605      	mov	r5, r0
   da9c0:	b120      	cbz	r0, da9cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   da9c2:	4631      	mov	r1, r6
   da9c4:	f7ff ffdc 	bl	da980 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   da9c8:	7c33      	ldrb	r3, [r6, #16]
   da9ca:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   da9cc:	6025      	str	r5, [r4, #0]
	}
   da9ce:	e7f0      	b.n	da9b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   da9d0:	6804      	ldr	r4, [r0, #0]
   da9d2:	2c00      	cmp	r4, #0
   da9d4:	d0ed      	beq.n	da9b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   da9d6:	4620      	mov	r0, r4
   da9d8:	f7fa fbbc 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   da9dc:	2114      	movs	r1, #20
   da9de:	4620      	mov	r0, r4
   da9e0:	f002 fb38 	bl	dd054 <_ZdlPvj>
   da9e4:	e7e5      	b.n	da9b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000da9e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   da9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   da9ea:	b089      	sub	sp, #36	; 0x24
   da9ec:	4604      	mov	r4, r0
   da9ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   da9f0:	a801      	add	r0, sp, #4
   da9f2:	4611      	mov	r1, r2
   da9f4:	f7ff fe22 	bl	da63c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   da9f8:	b1a4      	cbz	r4, daa24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   da9fa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   da9fc:	b11d      	cbz	r5, daa06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   da9fe:	4628      	mov	r0, r5
   daa00:	f003 f816 	bl	dda30 <strdup>
   daa04:	4605      	mov	r5, r0
   daa06:	a801      	add	r0, sp, #4
   daa08:	a903      	add	r1, sp, #12
        type_(type) {
   daa0a:	9503      	str	r5, [sp, #12]
   daa0c:	f8ad 4010 	strh.w	r4, [sp, #16]
   daa10:	f7ff fe78 	bl	da704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   daa14:	a803      	add	r0, sp, #12
   daa16:	f7ff fda6 	bl	da566 <_ZN8particle5ErrorD1Ev>
   daa1a:	a802      	add	r0, sp, #8
   daa1c:	f7f9 fc73 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   daa20:	b009      	add	sp, #36	; 0x24
   daa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   daa24:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   daa26:	2301      	movs	r3, #1
   daa28:	e8d5 2f4f 	ldrexb	r2, [r5]
   daa2c:	2a00      	cmp	r2, #0
   daa2e:	d103      	bne.n	daa38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   daa30:	e8c5 3f41 	strexb	r1, r3, [r5]
   daa34:	2900      	cmp	r1, #0
   daa36:	d1f7      	bne.n	daa28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   daa38:	d1ef      	bne.n	daa1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   daa3a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   daa3c:	f3bf 8f5b 	dmb	ish
   daa40:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   daa42:	1d2b      	adds	r3, r5, #4
   daa44:	f3bf 8f5b 	dmb	ish
   daa48:	e853 6f00 	ldrex	r6, [r3]
   daa4c:	e843 4200 	strex	r2, r4, [r3]
   daa50:	2a00      	cmp	r2, #0
   daa52:	d1f9      	bne.n	daa48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   daa54:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   daa58:	2e00      	cmp	r6, #0
   daa5a:	d0de      	beq.n	daa1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   daa5c:	4620      	mov	r0, r4
   daa5e:	f7ff fb7f 	bl	da160 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   daa62:	4607      	mov	r7, r0
   daa64:	b160      	cbz	r0, daa80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   daa66:	f105 010c 	add.w	r1, r5, #12
   daa6a:	4630      	mov	r0, r6
   daa6c:	f7ff fe15 	bl	da69a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   daa70:	4630      	mov	r0, r6
   daa72:	f7fa fb6f 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   daa76:	2110      	movs	r1, #16
   daa78:	4630      	mov	r0, r6
   daa7a:	f002 faeb 	bl	dd054 <_ZdlPvj>
   daa7e:	e7cc      	b.n	daa1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   daa80:	4631      	mov	r1, r6
   daa82:	a803      	add	r0, sp, #12
   daa84:	f7ff ff7c 	bl	da980 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   daa88:	7b2b      	ldrb	r3, [r5, #12]
   daa8a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   daa8e:	2010      	movs	r0, #16
   daa90:	f7f9 fb01 	bl	d4096 <_Znwj>
   daa94:	4605      	mov	r5, r0
   daa96:	b1d0      	cbz	r0, daace <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   daa98:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daa9a:	2014      	movs	r0, #20
   daa9c:	f7f9 fafb 	bl	d4096 <_Znwj>
   daaa0:	4604      	mov	r4, r0
   daaa2:	b178      	cbz	r0, daac4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   daaa4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   daaa6:	4601      	mov	r1, r0
   daaa8:	a803      	add	r0, sp, #12
   daaaa:	f7fa fc52 	bl	d5352 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daaae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   daab0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   daab2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daab4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   daab6:	9205      	str	r2, [sp, #20]
   daab8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   daaba:	60e3      	str	r3, [r4, #12]
   daabc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   daac0:	9206      	str	r2, [sp, #24]
   daac2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   daac4:	4b06      	ldr	r3, [pc, #24]	; (daae0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   daac6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   daac8:	4b06      	ldr	r3, [pc, #24]	; (daae4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daaca:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   daacc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   daace:	a803      	add	r0, sp, #12
   daad0:	f7fa fb40 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   daad4:	2200      	movs	r2, #0
   daad6:	4629      	mov	r1, r5
   daad8:	4803      	ldr	r0, [pc, #12]	; (daae8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   daada:	f7ff fb49 	bl	da170 <application_thread_invoke>
   daade:	e7c7      	b.n	daa70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   daae0:	000da6ad 	.word	0x000da6ad
   daae4:	000da99f 	.word	0x000da99f
   daae8:	000da453 	.word	0x000da453

000daaec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   daaec:	2200      	movs	r2, #0
   daaee:	6840      	ldr	r0, [r0, #4]
   daaf0:	4611      	mov	r1, r2
   daaf2:	f7ff bc0b 	b.w	da30c <network_listening>

000daaf6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   daaf6:	2200      	movs	r2, #0
   daaf8:	6840      	ldr	r0, [r0, #4]
   daafa:	4611      	mov	r1, r2
   daafc:	f7ff bc16 	b.w	da32c <network_get_listen_timeout>

000dab00 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dab00:	6840      	ldr	r0, [r0, #4]
   dab02:	2200      	movs	r2, #0
   dab04:	f7ff bc0a 	b.w	da31c <network_set_listen_timeout>

000dab08 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dab08:	6840      	ldr	r0, [r0, #4]
   dab0a:	2200      	movs	r2, #0
   dab0c:	f081 0101 	eor.w	r1, r1, #1
   dab10:	f7ff bbf4 	b.w	da2fc <network_listen>

000dab14 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dab14:	2300      	movs	r3, #0
   dab16:	6840      	ldr	r0, [r0, #4]
   dab18:	461a      	mov	r2, r3
   dab1a:	4619      	mov	r1, r3
   dab1c:	f7ff bbe6 	b.w	da2ec <network_off>

000dab20 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dab20:	2300      	movs	r3, #0
   dab22:	6840      	ldr	r0, [r0, #4]
   dab24:	461a      	mov	r2, r3
   dab26:	4619      	mov	r1, r3
   dab28:	f7ff bbd8 	b.w	da2dc <network_on>

000dab2c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dab2c:	2200      	movs	r2, #0
   dab2e:	6840      	ldr	r0, [r0, #4]
   dab30:	4611      	mov	r1, r2
   dab32:	f7ff bbcb 	b.w	da2cc <network_ready>

000dab36 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dab36:	2200      	movs	r2, #0
   dab38:	6840      	ldr	r0, [r0, #4]
   dab3a:	4611      	mov	r1, r2
   dab3c:	f7ff bbb6 	b.w	da2ac <network_connecting>

000dab40 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dab40:	6840      	ldr	r0, [r0, #4]
   dab42:	2200      	movs	r2, #0
   dab44:	2102      	movs	r1, #2
   dab46:	f7ff bbb9 	b.w	da2bc <network_disconnect>

000dab4a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dab4a:	2300      	movs	r3, #0
   dab4c:	6840      	ldr	r0, [r0, #4]
   dab4e:	461a      	mov	r2, r3
   dab50:	f7ff bba4 	b.w	da29c <network_connect>

000dab54 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   dab54:	4b02      	ldr	r3, [pc, #8]	; (dab60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dab56:	2203      	movs	r2, #3
   dab58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   dab5a:	4a02      	ldr	r2, [pc, #8]	; (dab64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   dab5c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   dab5e:	4770      	bx	lr
   dab60:	2003e4e4 	.word	0x2003e4e4
   dab64:	000decec 	.word	0x000decec

000dab68 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   dab68:	4770      	bx	lr

000dab6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dab6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dab6c:	4606      	mov	r6, r0
   dab6e:	4615      	mov	r5, r2
   dab70:	460c      	mov	r4, r1
   dab72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dab74:	42bc      	cmp	r4, r7
   dab76:	d006      	beq.n	dab86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dab78:	6833      	ldr	r3, [r6, #0]
   dab7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   dab7e:	689b      	ldr	r3, [r3, #8]
   dab80:	4630      	mov	r0, r6
   dab82:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   dab84:	e7f6      	b.n	dab74 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   dab86:	4628      	mov	r0, r5
   dab88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dab8a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   dab8a:	7c00      	ldrb	r0, [r0, #16]
   dab8c:	2200      	movs	r2, #0
   dab8e:	f7ff b8ed 	b.w	d9d6c <hal_i2c_write>

000dab92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   dab92:	7c00      	ldrb	r0, [r0, #16]
   dab94:	2100      	movs	r1, #0
   dab96:	f7ff b8f1 	b.w	d9d7c <hal_i2c_available>

000dab9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   dab9a:	7c00      	ldrb	r0, [r0, #16]
   dab9c:	2100      	movs	r1, #0
   dab9e:	f7ff b8f5 	b.w	d9d8c <hal_i2c_read>

000daba2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   daba2:	7c00      	ldrb	r0, [r0, #16]
   daba4:	2100      	movs	r1, #0
   daba6:	f7ff b8f9 	b.w	d9d9c <hal_i2c_peek>

000dabaa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   dabaa:	7c00      	ldrb	r0, [r0, #16]
   dabac:	2100      	movs	r1, #0
   dabae:	f7ff b8fd 	b.w	d9dac <hal_i2c_flush>

000dabb2 <_ZN7TwoWireD0Ev>:
   dabb2:	b510      	push	{r4, lr}
   dabb4:	2114      	movs	r1, #20
   dabb6:	4604      	mov	r4, r0
   dabb8:	f002 fa4c 	bl	dd054 <_ZdlPvj>
   dabbc:	4620      	mov	r0, r4
   dabbe:	bd10      	pop	{r4, pc}

000dabc0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   dabc0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dabc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dabc6:	4604      	mov	r4, r0
   dabc8:	4608      	mov	r0, r1
   dabca:	2100      	movs	r1, #0
   dabcc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dabd0:	4b03      	ldr	r3, [pc, #12]	; (dabe0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   dabd2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   dabd4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   dabd6:	4611      	mov	r1, r2
   dabd8:	f7ff f8f8 	bl	d9dcc <hal_i2c_init>
}
   dabdc:	4620      	mov	r0, r4
   dabde:	bd10      	pop	{r4, pc}
   dabe0:	000ded28 	.word	0x000ded28

000dabe4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dabe4:	2300      	movs	r3, #0
   dabe6:	7c00      	ldrb	r0, [r0, #16]
   dabe8:	461a      	mov	r2, r3
   dabea:	4619      	mov	r1, r3
   dabec:	f7ff b8a6 	b.w	d9d3c <hal_i2c_begin>

000dabf0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   dabf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   dabf2:	2200      	movs	r2, #0
   dabf4:	2314      	movs	r3, #20
   dabf6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   dabfa:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   dabfe:	780b      	ldrb	r3, [r1, #0]
   dac00:	f88d 3008 	strb.w	r3, [sp, #8]
   dac04:	684b      	ldr	r3, [r1, #4]
   dac06:	9303      	str	r3, [sp, #12]
   dac08:	68cb      	ldr	r3, [r1, #12]
   dac0a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   dac0c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   dac0e:	7a0b      	ldrb	r3, [r1, #8]
   dac10:	9305      	str	r3, [sp, #20]
   dac12:	a901      	add	r1, sp, #4
   dac14:	f7ff f8f2 	bl	d9dfc <hal_i2c_request_ex>
}
   dac18:	b007      	add	sp, #28
   dac1a:	f85d fb04 	ldr.w	pc, [sp], #4

000dac1e <_ZN7TwoWire11requestFromEhjh>:
{
   dac1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   dac20:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dac22:	f88d 1000 	strb.w	r1, [sp]
   dac26:	f04f 0164 	mov.w	r1, #100	; 0x64
   dac2a:	9103      	str	r1, [sp, #12]
   dac2c:	bf18      	it	ne
   dac2e:	2301      	movne	r3, #1
   dac30:	4669      	mov	r1, sp
    size_ = size;
   dac32:	9201      	str	r2, [sp, #4]
   dac34:	f88d 3008 	strb.w	r3, [sp, #8]
   dac38:	f7ff ffda 	bl	dabf0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   dac3c:	b005      	add	sp, #20
   dac3e:	f85d fb04 	ldr.w	pc, [sp], #4

000dac42 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   dac42:	7c00      	ldrb	r0, [r0, #16]
   dac44:	2200      	movs	r2, #0
   dac46:	f7ff b881 	b.w	d9d4c <hal_i2c_begin_transmission>

000dac4a <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   dac4a:	b2c9      	uxtb	r1, r1
   dac4c:	f7ff bff9 	b.w	dac42 <_ZN7TwoWire17beginTransmissionEh>

000dac50 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   dac50:	7c00      	ldrb	r0, [r0, #16]
   dac52:	2200      	movs	r2, #0
   dac54:	f7ff b882 	b.w	d9d5c <hal_i2c_end_transmission>

000dac58 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   dac58:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   dac5a:	2100      	movs	r1, #0
   dac5c:	7c00      	ldrb	r0, [r0, #16]
   dac5e:	f7ff f8bd 	bl	d9ddc <hal_i2c_lock>
}
   dac62:	fab0 f080 	clz	r0, r0
   dac66:	0940      	lsrs	r0, r0, #5
   dac68:	bd08      	pop	{r3, pc}

000dac6a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dac6a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   dac6c:	2100      	movs	r1, #0
   dac6e:	7c00      	ldrb	r0, [r0, #16]
   dac70:	f7ff f8bc 	bl	d9dec <hal_i2c_unlock>
}
   dac74:	fab0 f080 	clz	r0, r0
   dac78:	0940      	lsrs	r0, r0, #5
   dac7a:	bd08      	pop	{r3, pc}

000dac7c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   dac7c:	4700      	bx	r0
	...

000dac80 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   dac80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   dac84:	2400      	movs	r4, #0
{
   dac86:	461d      	mov	r5, r3
   dac88:	460f      	mov	r7, r1
   dac8a:	4690      	mov	r8, r2
   dac8c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   dac8e:	f7ff f84d 	bl	d9d2c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   dac92:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dac94:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   dac98:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dac9c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   daca0:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   daca4:	bfa2      	ittt	ge
   daca6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   dacaa:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   dacae:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dacb0:	4907      	ldr	r1, [pc, #28]	; (dacd0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   dacb2:	9400      	str	r4, [sp, #0]
   dacb4:	4643      	mov	r3, r8
   dacb6:	463a      	mov	r2, r7
   dacb8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   dacba:	bfa8      	it	ge
   dacbc:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dacc0:	f7ff f82c 	bl	d9d1c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   dacc4:	fab0 f080 	clz	r0, r0
   dacc8:	0940      	lsrs	r0, r0, #5
   dacca:	b004      	add	sp, #16
   daccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dacd0:	000dac7d 	.word	0x000dac7d

000dacd4 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   dacd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dacd6:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   dacd8:	f7ff f828 	bl	d9d2c <HAL_Interrupts_Detach>
   dacdc:	4605      	mov	r5, r0
   dacde:	b970      	cbnz	r0, dacfe <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   dace0:	4f08      	ldr	r7, [pc, #32]	; (dad04 <_Z15detachInterruptt+0x30>)
   dace2:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   dace6:	b146      	cbz	r6, dacfa <_Z15detachInterruptt+0x26>
   dace8:	4630      	mov	r0, r6
   dacea:	f7fa fa33 	bl	d5154 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   dacee:	2110      	movs	r1, #16
   dacf0:	4630      	mov	r0, r6
   dacf2:	f002 f9af 	bl	dd054 <_ZdlPvj>
        handlers[pin] = nullptr;
   dacf6:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   dacfa:	2001      	movs	r0, #1
   dacfc:	e000      	b.n	dad00 <_Z15detachInterruptt+0x2c>
        return false;
   dacfe:	2000      	movs	r0, #0
    }
    return true;
}
   dad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dad02:	bf00      	nop
   dad04:	2003e4ec 	.word	0x2003e4ec

000dad08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dad08:	4770      	bx	lr

000dad0a <_ZN9IPAddressD0Ev>:
   dad0a:	b510      	push	{r4, lr}
   dad0c:	2118      	movs	r1, #24
   dad0e:	4604      	mov	r4, r0
   dad10:	f002 f9a0 	bl	dd054 <_ZdlPvj>
   dad14:	4620      	mov	r0, r4
   dad16:	bd10      	pop	{r4, pc}

000dad18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dad18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dad1a:	7d03      	ldrb	r3, [r0, #20]
   dad1c:	2b06      	cmp	r3, #6
{
   dad1e:	b08d      	sub	sp, #52	; 0x34
   dad20:	460e      	mov	r6, r1
   dad22:	f100 0704 	add.w	r7, r0, #4
   dad26:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   dad2a:	d012      	beq.n	dad52 <_ZNK9IPAddress7printToER5Print+0x3a>
   dad2c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   dad30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dad34:	220a      	movs	r2, #10
   dad36:	4630      	mov	r0, r6
   dad38:	f001 faa3 	bl	dc282 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dad3c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dad3e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   dad40:	d019      	beq.n	dad76 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   dad42:	2c00      	cmp	r4, #0
   dad44:	d0f4      	beq.n	dad30 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   dad46:	212e      	movs	r1, #46	; 0x2e
   dad48:	4630      	mov	r0, r6
   dad4a:	f001 fa8b 	bl	dc264 <_ZN5Print5printEc>
   dad4e:	4404      	add	r4, r0
   dad50:	e7ee      	b.n	dad30 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dad52:	232f      	movs	r3, #47	; 0x2f
   dad54:	466a      	mov	r2, sp
   dad56:	4639      	mov	r1, r7
   dad58:	200a      	movs	r0, #10
		buf[0] = 0;
   dad5a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dad5e:	f7ff f855 	bl	d9e0c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   dad62:	4668      	mov	r0, sp
   dad64:	f002 fe81 	bl	dda6a <strlen>
   dad68:	6833      	ldr	r3, [r6, #0]
   dad6a:	4602      	mov	r2, r0
   dad6c:	68db      	ldr	r3, [r3, #12]
   dad6e:	4669      	mov	r1, sp
   dad70:	4630      	mov	r0, r6
   dad72:	4798      	blx	r3
   dad74:	4604      	mov	r4, r0
    }
    return n;
}
   dad76:	4620      	mov	r0, r4
   dad78:	b00d      	add	sp, #52	; 0x34
   dad7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dad7c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   dad7c:	b510      	push	{r4, lr}
   dad7e:	4b05      	ldr	r3, [pc, #20]	; (dad94 <_ZN9IPAddressC1Ev+0x18>)
   dad80:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dad82:	2211      	movs	r2, #17
   dad84:	f840 3b04 	str.w	r3, [r0], #4
   dad88:	2100      	movs	r1, #0
   dad8a:	f002 fdc7 	bl	dd91c <memset>
}
   dad8e:	4620      	mov	r0, r4
   dad90:	bd10      	pop	{r4, pc}
   dad92:	bf00      	nop
   dad94:	000ded50 	.word	0x000ded50

000dad98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dad98:	4603      	mov	r3, r0
   dad9a:	4a07      	ldr	r2, [pc, #28]	; (dadb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dad9c:	b510      	push	{r4, lr}
   dad9e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dada2:	f101 0210 	add.w	r2, r1, #16
   dada6:	f851 4b04 	ldr.w	r4, [r1], #4
   dadaa:	f843 4b04 	str.w	r4, [r3], #4
   dadae:	4291      	cmp	r1, r2
   dadb0:	d1f9      	bne.n	dada6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dadb2:	780a      	ldrb	r2, [r1, #0]
   dadb4:	701a      	strb	r2, [r3, #0]
}
   dadb6:	bd10      	pop	{r4, pc}
   dadb8:	000ded50 	.word	0x000ded50

000dadbc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dadbc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dadbe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dadc2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dadc6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dadca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dadce:	2304      	movs	r3, #4
   dadd0:	6041      	str	r1, [r0, #4]
   dadd2:	7503      	strb	r3, [r0, #20]
}
   dadd4:	bd10      	pop	{r4, pc}

000dadd6 <_ZN9IPAddressaSEPKh>:
{
   dadd6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dadd8:	78cb      	ldrb	r3, [r1, #3]
   dadda:	9300      	str	r3, [sp, #0]
   daddc:	788b      	ldrb	r3, [r1, #2]
   dadde:	784a      	ldrb	r2, [r1, #1]
   dade0:	7809      	ldrb	r1, [r1, #0]
   dade2:	f7ff ffeb 	bl	dadbc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dade6:	b002      	add	sp, #8
   dade8:	bd10      	pop	{r4, pc}

000dadea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   dadea:	f100 0310 	add.w	r3, r0, #16
   dadee:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   dadf0:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   dadf4:	2901      	cmp	r1, #1
   dadf6:	4618      	mov	r0, r3
   dadf8:	d108      	bne.n	dae0c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   dadfa:	f853 1c04 	ldr.w	r1, [r3, #-4]
   dadfe:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   dae02:	3a01      	subs	r2, #1
   dae04:	f103 0310 	add.w	r3, r3, #16
   dae08:	d1f2      	bne.n	dadf0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   dae0a:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   dae0c:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   dae0e:	bf04      	itt	eq
   dae10:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   dae14:	1852      	addeq	r2, r2, r1
   dae16:	e7f4      	b.n	dae02 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000dae18 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   dae18:	b40e      	push	{r1, r2, r3}
   dae1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   dae1c:	b088      	sub	sp, #32
   dae1e:	af00      	add	r7, sp, #0
   dae20:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dae24:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   dae26:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dae2a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   dae2c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dae2e:	462b      	mov	r3, r5
   dae30:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   dae32:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dae34:	f7ff fac2 	bl	da3bc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   dae38:	280f      	cmp	r0, #15
   dae3a:	687a      	ldr	r2, [r7, #4]
   dae3c:	d91a      	bls.n	dae74 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   dae3e:	f100 0308 	add.w	r3, r0, #8
   dae42:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   dae46:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   dae48:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dae4c:	1c41      	adds	r1, r0, #1
   dae4e:	462b      	mov	r3, r5
   dae50:	4668      	mov	r0, sp
        va_start(args, fmt);
   dae52:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dae54:	f7ff fab2 	bl	da3bc <vsnprintf>
        if (n > 0) {
   dae58:	1e02      	subs	r2, r0, #0
   dae5a:	dd04      	ble.n	dae66 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   dae5c:	6823      	ldr	r3, [r4, #0]
   dae5e:	4669      	mov	r1, sp
   dae60:	689b      	ldr	r3, [r3, #8]
   dae62:	4620      	mov	r0, r4
   dae64:	4798      	blx	r3
   dae66:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   dae68:	3720      	adds	r7, #32
   dae6a:	46bd      	mov	sp, r7
   dae6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dae70:	b003      	add	sp, #12
   dae72:	4770      	bx	lr
    } else if (n > 0) {
   dae74:	2800      	cmp	r0, #0
   dae76:	d0f7      	beq.n	dae68 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   dae78:	6823      	ldr	r3, [r4, #0]
   dae7a:	4602      	mov	r2, r0
   dae7c:	689b      	ldr	r3, [r3, #8]
   dae7e:	f107 0110 	add.w	r1, r7, #16
   dae82:	4620      	mov	r0, r4
   dae84:	4798      	blx	r3
}
   dae86:	e7ef      	b.n	dae68 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000dae88 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dae88:	b510      	push	{r4, lr}
          _M_dispose();
   dae8a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dae8c:	4604      	mov	r4, r0
          _M_dispose();
   dae8e:	689b      	ldr	r3, [r3, #8]
   dae90:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dae92:	68a3      	ldr	r3, [r4, #8]
   dae94:	3b01      	subs	r3, #1
   dae96:	60a3      	str	r3, [r4, #8]
   dae98:	b92b      	cbnz	r3, daea6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   dae9a:	6823      	ldr	r3, [r4, #0]
   dae9c:	4620      	mov	r0, r4
   dae9e:	68db      	ldr	r3, [r3, #12]
    }
   daea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   daea4:	4718      	bx	r3
    }
   daea6:	bd10      	pop	{r4, pc}

000daea8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   daea8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   daeaa:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   daeac:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   daeb0:	689b      	ldr	r3, [r3, #8]
   daeb2:	2201      	movs	r2, #1
   daeb4:	f10d 0107 	add.w	r1, sp, #7
   daeb8:	4798      	blx	r3
}
   daeba:	b003      	add	sp, #12
   daebc:	f85d fb04 	ldr.w	pc, [sp], #4

000daec0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   daec0:	b538      	push	{r3, r4, r5, lr}
   daec2:	680b      	ldr	r3, [r1, #0]
   daec4:	6003      	str	r3, [r0, #0]
   daec6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   daec8:	6843      	ldr	r3, [r0, #4]
   daeca:	429d      	cmp	r5, r3
    class __shared_ptr
   daecc:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   daece:	d00c      	beq.n	daeea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   daed0:	b115      	cbz	r5, daed8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   daed2:	686b      	ldr	r3, [r5, #4]
   daed4:	3301      	adds	r3, #1
   daed6:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   daed8:	6860      	ldr	r0, [r4, #4]
   daeda:	b128      	cbz	r0, daee8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   daedc:	6843      	ldr	r3, [r0, #4]
   daede:	3b01      	subs	r3, #1
   daee0:	6043      	str	r3, [r0, #4]
   daee2:	b90b      	cbnz	r3, daee8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   daee4:	f7ff ffd0 	bl	dae88 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   daee8:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   daeea:	4620      	mov	r0, r4
   daeec:	bd38      	pop	{r3, r4, r5, pc}

000daeee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   daeee:	460b      	mov	r3, r1
   daef0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   daef2:	2200      	movs	r2, #0
   daef4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   daef6:	e9c0 2200 	strd	r2, r2, [r0]
   daefa:	4604      	mov	r4, r0
        t_ = t;
   daefc:	6083      	str	r3, [r0, #8]
    if (t) {
   daefe:	b90b      	cbnz	r3, daf04 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   daf00:	4620      	mov	r0, r4
   daf02:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   daf04:	f7ff ffdc 	bl	daec0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   daf08:	e7fa      	b.n	daf00 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000daf0a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   daf0a:	6883      	ldr	r3, [r0, #8]
   daf0c:	b1eb      	cbz	r3, daf4a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   daf0e:	781a      	ldrb	r2, [r3, #0]
   daf10:	2a03      	cmp	r2, #3
   daf12:	d81a      	bhi.n	daf4a <_ZNK5spark9JSONValue4typeEv+0x40>
   daf14:	e8df f002 	tbb	[pc, r2]
   daf18:	1b021704 	.word	0x1b021704
   daf1c:	2005      	movs	r0, #5
   daf1e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   daf20:	6802      	ldr	r2, [r0, #0]
   daf22:	685b      	ldr	r3, [r3, #4]
   daf24:	6852      	ldr	r2, [r2, #4]
   daf26:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   daf28:	282d      	cmp	r0, #45	; 0x2d
   daf2a:	d012      	beq.n	daf52 <_ZNK5spark9JSONValue4typeEv+0x48>
   daf2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   daf30:	2b09      	cmp	r3, #9
   daf32:	d90e      	bls.n	daf52 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   daf34:	2874      	cmp	r0, #116	; 0x74
   daf36:	d00e      	beq.n	daf56 <_ZNK5spark9JSONValue4typeEv+0x4c>
   daf38:	2866      	cmp	r0, #102	; 0x66
   daf3a:	d00c      	beq.n	daf56 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   daf3c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   daf40:	4258      	negs	r0, r3
   daf42:	4158      	adcs	r0, r3
   daf44:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   daf46:	2006      	movs	r0, #6
   daf48:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   daf4a:	2000      	movs	r0, #0
   daf4c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   daf4e:	2004      	movs	r0, #4
   daf50:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   daf52:	2003      	movs	r0, #3
   daf54:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   daf56:	2002      	movs	r0, #2
}
   daf58:	4770      	bx	lr

000daf5a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   daf5a:	b510      	push	{r4, lr}
   daf5c:	4604      	mov	r4, r0
    switch (type()) {
   daf5e:	f7ff ffd4 	bl	daf0a <_ZNK5spark9JSONValue4typeEv>
   daf62:	2802      	cmp	r0, #2
   daf64:	d00e      	beq.n	daf84 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   daf66:	1ec3      	subs	r3, r0, #3
   daf68:	b2db      	uxtb	r3, r3
   daf6a:	2b01      	cmp	r3, #1
   daf6c:	d814      	bhi.n	daf98 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   daf6e:	6822      	ldr	r2, [r4, #0]
   daf70:	68a3      	ldr	r3, [r4, #8]
   daf72:	6850      	ldr	r0, [r2, #4]
   daf74:	685b      	ldr	r3, [r3, #4]
}
   daf76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   daf7a:	220a      	movs	r2, #10
   daf7c:	2100      	movs	r1, #0
   daf7e:	4418      	add	r0, r3
   daf80:	f002 be5a 	b.w	ddc38 <strtol>
        const char* const s = d_->json + t_->start;
   daf84:	6822      	ldr	r2, [r4, #0]
   daf86:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   daf88:	6852      	ldr	r2, [r2, #4]
   daf8a:	685b      	ldr	r3, [r3, #4]
   daf8c:	5cd0      	ldrb	r0, [r2, r3]
   daf8e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   daf92:	4258      	negs	r0, r3
   daf94:	4158      	adcs	r0, r3
}
   daf96:	bd10      	pop	{r4, pc}
    switch (type()) {
   daf98:	2000      	movs	r0, #0
   daf9a:	e7fc      	b.n	daf96 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000daf9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   daf9c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   daf9e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   dafa0:	e9c0 3300 	strd	r3, r3, [r0]
   dafa4:	4604      	mov	r4, r0
        n_(0) {
   dafa6:	480e      	ldr	r0, [pc, #56]	; (dafe0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   dafa8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   dafac:	b1a9      	cbz	r1, dafda <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   dafae:	780b      	ldrb	r3, [r1, #0]
   dafb0:	2b03      	cmp	r3, #3
   dafb2:	d006      	beq.n	dafc2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   dafb4:	b98b      	cbnz	r3, dafda <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   dafb6:	6813      	ldr	r3, [r2, #0]
   dafb8:	6858      	ldr	r0, [r3, #4]
   dafba:	684b      	ldr	r3, [r1, #4]
   dafbc:	5cc3      	ldrb	r3, [r0, r3]
   dafbe:	2b6e      	cmp	r3, #110	; 0x6e
   dafc0:	d007      	beq.n	dafd2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   dafc2:	6813      	ldr	r3, [r2, #0]
   dafc4:	684d      	ldr	r5, [r1, #4]
   dafc6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   dafc8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   dafca:	4428      	add	r0, r5
            n_ = t->end - t->start;
   dafcc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   dafce:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   dafd0:	60e3      	str	r3, [r4, #12]
   dafd2:	4611      	mov	r1, r2
   dafd4:	4620      	mov	r0, r4
   dafd6:	f7ff ff73 	bl	daec0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dafda:	4620      	mov	r0, r4
   dafdc:	bd38      	pop	{r3, r4, r5, pc}
   dafde:	bf00      	nop
   dafe0:	000dedbc 	.word	0x000dedbc

000dafe4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dafe4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dafe6:	2500      	movs	r5, #0
   dafe8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   dafea:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   dafee:	e9c0 5502 	strd	r5, r5, [r0, #8]
   daff2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   daff6:	4604      	mov	r4, r0
   daff8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   daffa:	b14b      	cbz	r3, db010 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   daffc:	781a      	ldrb	r2, [r3, #0]
   daffe:	2a01      	cmp	r2, #1
   db000:	d106      	bne.n	db010 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   db002:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   db006:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   db008:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   db00a:	6143      	str	r3, [r0, #20]
   db00c:	f7ff ff58 	bl	daec0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   db010:	4620      	mov	r0, r4
   db012:	bd38      	pop	{r3, r4, r5, pc}

000db014 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   db014:	b510      	push	{r4, lr}
    if (!n_) {
   db016:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   db018:	4604      	mov	r4, r0
    if (!n_) {
   db01a:	b163      	cbz	r3, db036 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   db01c:	6880      	ldr	r0, [r0, #8]
   db01e:	60e0      	str	r0, [r4, #12]
    --n_;
   db020:	3b01      	subs	r3, #1
    ++t_;
   db022:	3010      	adds	r0, #16
   db024:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   db026:	6120      	str	r0, [r4, #16]
    --n_;
   db028:	6163      	str	r3, [r4, #20]
    if (n_) {
   db02a:	b113      	cbz	r3, db032 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   db02c:	f7ff fedd 	bl	dadea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   db030:	60a0      	str	r0, [r4, #8]
    return true;
   db032:	2001      	movs	r0, #1
   db034:	e000      	b.n	db038 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   db036:	4618      	mov	r0, r3
}
   db038:	bd10      	pop	{r4, pc}

000db03a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   db03a:	b510      	push	{r4, lr}
    write('}');
   db03c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   db03e:	4604      	mov	r4, r0
    write('}');
   db040:	f7ff ff32 	bl	daea8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   db044:	2301      	movs	r3, #1
   db046:	7123      	strb	r3, [r4, #4]
}
   db048:	4620      	mov	r0, r4
   db04a:	bd10      	pop	{r4, pc}

000db04c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   db04c:	b508      	push	{r3, lr}
    switch (state_) {
   db04e:	7903      	ldrb	r3, [r0, #4]
   db050:	2b01      	cmp	r3, #1
   db052:	d002      	beq.n	db05a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   db054:	2b02      	cmp	r3, #2
   db056:	d004      	beq.n	db062 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   db058:	bd08      	pop	{r3, pc}
        write(',');
   db05a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   db05c:	f7ff ff24 	bl	daea8 <_ZN5spark10JSONWriter5writeEc>
}
   db060:	e7fa      	b.n	db058 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   db062:	213a      	movs	r1, #58	; 0x3a
   db064:	e7fa      	b.n	db05c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000db066 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   db066:	b510      	push	{r4, lr}
   db068:	4604      	mov	r4, r0
    writeSeparator();
   db06a:	f7ff ffef 	bl	db04c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   db06e:	4620      	mov	r0, r4
   db070:	217b      	movs	r1, #123	; 0x7b
   db072:	f7ff ff19 	bl	daea8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   db076:	2300      	movs	r3, #0
   db078:	7123      	strb	r3, [r4, #4]
}
   db07a:	4620      	mov	r0, r4
   db07c:	bd10      	pop	{r4, pc}
	...

000db080 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   db080:	b513      	push	{r0, r1, r4, lr}
   db082:	4604      	mov	r4, r0
   db084:	9101      	str	r1, [sp, #4]
    writeSeparator();
   db086:	f7ff ffe1 	bl	db04c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   db08a:	6823      	ldr	r3, [r4, #0]
   db08c:	9a01      	ldr	r2, [sp, #4]
   db08e:	68db      	ldr	r3, [r3, #12]
   db090:	4903      	ldr	r1, [pc, #12]	; (db0a0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   db092:	4620      	mov	r0, r4
   db094:	4798      	blx	r3
    state_ = NEXT;
   db096:	2301      	movs	r3, #1
}
   db098:	4620      	mov	r0, r4
    state_ = NEXT;
   db09a:	7123      	strb	r3, [r4, #4]
}
   db09c:	b002      	add	sp, #8
   db09e:	bd10      	pop	{r4, pc}
   db0a0:	000de1c2 	.word	0x000de1c2

000db0a4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   db0a4:	b513      	push	{r0, r1, r4, lr}
   db0a6:	4604      	mov	r4, r0
   db0a8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   db0aa:	f7ff ffcf 	bl	db04c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   db0ae:	6823      	ldr	r3, [r4, #0]
   db0b0:	9a01      	ldr	r2, [sp, #4]
   db0b2:	68db      	ldr	r3, [r3, #12]
   db0b4:	4903      	ldr	r1, [pc, #12]	; (db0c4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   db0b6:	4620      	mov	r0, r4
   db0b8:	4798      	blx	r3
    state_ = NEXT;
   db0ba:	2301      	movs	r3, #1
}
   db0bc:	4620      	mov	r0, r4
    state_ = NEXT;
   db0be:	7123      	strb	r3, [r4, #4]
}
   db0c0:	b002      	add	sp, #8
   db0c2:	bd10      	pop	{r4, pc}
   db0c4:	000de4ca 	.word	0x000de4ca

000db0c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   db0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db0cc:	460d      	mov	r5, r1
   db0ce:	4617      	mov	r7, r2
    write('"');
   db0d0:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   db0d2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; db174 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   db0d6:	4604      	mov	r4, r0
    const char* const end = str + size;
   db0d8:	442f      	add	r7, r5
    write('"');
   db0da:	f7ff fee5 	bl	daea8 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   db0de:	4629      	mov	r1, r5
    while (s != end) {
   db0e0:	42bd      	cmp	r5, r7
   db0e2:	462a      	mov	r2, r5
   db0e4:	d038      	beq.n	db158 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   db0e6:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   db0ea:	2e22      	cmp	r6, #34	; 0x22
   db0ec:	d003      	beq.n	db0f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   db0ee:	2e5c      	cmp	r6, #92	; 0x5c
   db0f0:	d001      	beq.n	db0f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   db0f2:	2e1f      	cmp	r6, #31
   db0f4:	d8f4      	bhi.n	db0e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   db0f6:	6823      	ldr	r3, [r4, #0]
   db0f8:	1a52      	subs	r2, r2, r1
   db0fa:	689b      	ldr	r3, [r3, #8]
   db0fc:	4620      	mov	r0, r4
   db0fe:	4798      	blx	r3
            write('\\');
   db100:	215c      	movs	r1, #92	; 0x5c
   db102:	4620      	mov	r0, r4
   db104:	f7ff fed0 	bl	daea8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   db108:	2e0d      	cmp	r6, #13
   db10a:	d80a      	bhi.n	db122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   db10c:	2e07      	cmp	r6, #7
   db10e:	d91c      	bls.n	db14a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   db110:	f1a6 0308 	sub.w	r3, r6, #8
   db114:	2b05      	cmp	r3, #5
   db116:	d818      	bhi.n	db14a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   db118:	e8df f003 	tbb	[pc, r3]
   db11c:	17110f0d 	.word	0x17110f0d
   db120:	1513      	.short	0x1513
   db122:	2e22      	cmp	r6, #34	; 0x22
   db124:	d001      	beq.n	db12a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   db126:	2e5c      	cmp	r6, #92	; 0x5c
   db128:	d10f      	bne.n	db14a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   db12a:	4631      	mov	r1, r6
                write('b');
   db12c:	4620      	mov	r0, r4
   db12e:	f7ff febb 	bl	daea8 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   db132:	4629      	mov	r1, r5
    while (s != end) {
   db134:	e7d4      	b.n	db0e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   db136:	2162      	movs	r1, #98	; 0x62
   db138:	e7f8      	b.n	db12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   db13a:	2174      	movs	r1, #116	; 0x74
   db13c:	e7f6      	b.n	db12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   db13e:	216e      	movs	r1, #110	; 0x6e
   db140:	e7f4      	b.n	db12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   db142:	2166      	movs	r1, #102	; 0x66
   db144:	e7f2      	b.n	db12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   db146:	2172      	movs	r1, #114	; 0x72
   db148:	e7f0      	b.n	db12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   db14a:	6823      	ldr	r3, [r4, #0]
   db14c:	4632      	mov	r2, r6
   db14e:	68db      	ldr	r3, [r3, #12]
   db150:	4641      	mov	r1, r8
   db152:	4620      	mov	r0, r4
   db154:	4798      	blx	r3
                break;
   db156:	e7ec      	b.n	db132 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   db158:	428d      	cmp	r5, r1
   db15a:	d004      	beq.n	db166 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   db15c:	6823      	ldr	r3, [r4, #0]
   db15e:	1a6a      	subs	r2, r5, r1
   db160:	689b      	ldr	r3, [r3, #8]
   db162:	4620      	mov	r0, r4
   db164:	4798      	blx	r3
    }
    write('"');
   db166:	2122      	movs	r1, #34	; 0x22
   db168:	4620      	mov	r0, r4
   db16a:	f7ff fe9d 	bl	daea8 <_ZN5spark10JSONWriter5writeEc>
}
   db16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db172:	bf00      	nop
   db174:	000ded5c 	.word	0x000ded5c

000db178 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   db178:	b513      	push	{r0, r1, r4, lr}
   db17a:	4604      	mov	r4, r0
   db17c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   db180:	f7ff ff64 	bl	db04c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   db184:	4620      	mov	r0, r4
   db186:	e9dd 2100 	ldrd	r2, r1, [sp]
   db18a:	f7ff ff9d 	bl	db0c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   db18e:	2302      	movs	r3, #2
}
   db190:	4620      	mov	r0, r4
    state_ = VALUE;
   db192:	7123      	strb	r3, [r4, #4]
}
   db194:	b002      	add	sp, #8
   db196:	bd10      	pop	{r4, pc}

000db198 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   db198:	b513      	push	{r0, r1, r4, lr}
   db19a:	4604      	mov	r4, r0
   db19c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   db1a0:	f7ff ff54 	bl	db04c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   db1a4:	4620      	mov	r0, r4
   db1a6:	e9dd 2100 	ldrd	r2, r1, [sp]
   db1aa:	f7ff ff8d 	bl	db0c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   db1ae:	2301      	movs	r3, #1
}
   db1b0:	4620      	mov	r0, r4
    state_ = NEXT;
   db1b2:	7123      	strb	r3, [r4, #4]
}
   db1b4:	b002      	add	sp, #8
   db1b6:	bd10      	pop	{r4, pc}

000db1b8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   db1b8:	6880      	ldr	r0, [r0, #8]
   db1ba:	6803      	ldr	r3, [r0, #0]
   db1bc:	68db      	ldr	r3, [r3, #12]
   db1be:	4718      	bx	r3

000db1c0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   db1c0:	4770      	bx	lr

000db1c2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   db1c2:	4608      	mov	r0, r1
   db1c4:	b111      	cbz	r1, db1cc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   db1c6:	680b      	ldr	r3, [r1, #0]
   db1c8:	685b      	ldr	r3, [r3, #4]
   db1ca:	4718      	bx	r3
}
   db1cc:	4770      	bx	lr

000db1ce <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   db1ce:	4770      	bx	lr

000db1d0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   db1d0:	4770      	bx	lr

000db1d2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   db1d2:	4770      	bx	lr

000db1d4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   db1d4:	4770      	bx	lr

000db1d6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   db1d6:	b538      	push	{r3, r4, r5, lr}
   db1d8:	4604      	mov	r4, r0
   db1da:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   db1dc:	6800      	ldr	r0, [r0, #0]
   db1de:	212e      	movs	r1, #46	; 0x2e
   db1e0:	f002 fc09 	bl	dd9f6 <strchrnul>
    size = s - category;
   db1e4:	6823      	ldr	r3, [r4, #0]
   db1e6:	1ac3      	subs	r3, r0, r3
   db1e8:	602b      	str	r3, [r5, #0]
    if (size) {
   db1ea:	b123      	cbz	r3, db1f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   db1ec:	7803      	ldrb	r3, [r0, #0]
   db1ee:	b103      	cbz	r3, db1f2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   db1f0:	3001      	adds	r0, #1
   db1f2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   db1f4:	6020      	str	r0, [r4, #0]
}
   db1f6:	4618      	mov	r0, r3
   db1f8:	bd38      	pop	{r3, r4, r5, pc}

000db1fa <_ZN5spark16JSONStreamWriterD0Ev>:
   db1fa:	b510      	push	{r4, lr}
   db1fc:	210c      	movs	r1, #12
   db1fe:	4604      	mov	r4, r0
   db200:	f001 ff28 	bl	dd054 <_ZdlPvj>
   db204:	4620      	mov	r0, r4
   db206:	bd10      	pop	{r4, pc}

000db208 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   db208:	b510      	push	{r4, lr}
   db20a:	2104      	movs	r1, #4
   db20c:	4604      	mov	r4, r0
   db20e:	f001 ff21 	bl	dd054 <_ZdlPvj>
   db212:	4620      	mov	r0, r4
   db214:	bd10      	pop	{r4, pc}

000db216 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   db216:	b510      	push	{r4, lr}
   db218:	2104      	movs	r1, #4
   db21a:	4604      	mov	r4, r0
   db21c:	f001 ff1a 	bl	dd054 <_ZdlPvj>
   db220:	4620      	mov	r0, r4
   db222:	bd10      	pop	{r4, pc}

000db224 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   db224:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   db226:	f002 fbf0 	bl	dda0a <strcmp>
}
   db22a:	fab0 f080 	clz	r0, r0
   db22e:	0940      	lsrs	r0, r0, #5
   db230:	bd08      	pop	{r3, pc}

000db232 <__tcf_1>:
   db232:	4770      	bx	lr

000db234 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   db234:	b510      	push	{r4, lr}
   db236:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   db238:	f001 fd92 	bl	dcd60 <_Z16_fetch_usbserialv>
   db23c:	4284      	cmp	r4, r0
   db23e:	d010      	beq.n	db262 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   db240:	f001 fd06 	bl	dcc50 <_Z22__fetch_global_Serial1v>
   db244:	4284      	cmp	r4, r0
   db246:	d105      	bne.n	db254 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   db248:	f001 fd02 	bl	dcc50 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   db24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   db250:	f001 bcfb 	b.w	dcc4a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   db254:	b12c      	cbz	r4, db262 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   db256:	6823      	ldr	r3, [r4, #0]
   db258:	4620      	mov	r0, r4
   db25a:	685b      	ldr	r3, [r3, #4]
}
   db25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   db260:	4718      	bx	r3
   db262:	bd10      	pop	{r4, pc}

000db264 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   db264:	b513      	push	{r0, r1, r4, lr}
   db266:	4604      	mov	r4, r0
    return value(val, strlen(val));
   db268:	4608      	mov	r0, r1
   db26a:	9101      	str	r1, [sp, #4]
   db26c:	f002 fbfd 	bl	dda6a <strlen>
   db270:	9901      	ldr	r1, [sp, #4]
   db272:	4602      	mov	r2, r0
   db274:	4620      	mov	r0, r4
}
   db276:	b002      	add	sp, #8
   db278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   db27c:	f7ff bf8c 	b.w	db198 <_ZN5spark10JSONWriter5valueEPKcj>

000db280 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   db280:	b513      	push	{r0, r1, r4, lr}
   db282:	4604      	mov	r4, r0
    write(str, strlen(str));
   db284:	4608      	mov	r0, r1
   db286:	9101      	str	r1, [sp, #4]
   db288:	f002 fbef 	bl	dda6a <strlen>
   db28c:	6823      	ldr	r3, [r4, #0]
   db28e:	9901      	ldr	r1, [sp, #4]
   db290:	68db      	ldr	r3, [r3, #12]
   db292:	4602      	mov	r2, r0
   db294:	4620      	mov	r0, r4
}
   db296:	b002      	add	sp, #8
   db298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   db29c:	4718      	bx	r3

000db29e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   db29e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   db2a0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   db2a2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   db2a6:	68db      	ldr	r3, [r3, #12]
   db2a8:	2201      	movs	r2, #1
   db2aa:	f10d 0107 	add.w	r1, sp, #7
   db2ae:	4798      	blx	r3
}
   db2b0:	b003      	add	sp, #12
   db2b2:	f85d fb04 	ldr.w	pc, [sp], #4

000db2b6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   db2b6:	b40e      	push	{r1, r2, r3}
   db2b8:	b503      	push	{r0, r1, lr}
   db2ba:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   db2bc:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   db2be:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   db2c2:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   db2c4:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   db2c6:	f000 fffa 	bl	dc2be <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   db2ca:	b002      	add	sp, #8
   db2cc:	f85d eb04 	ldr.w	lr, [sp], #4
   db2d0:	b003      	add	sp, #12
   db2d2:	4770      	bx	lr

000db2d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   db2d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   db2d8:	e9d0 9500 	ldrd	r9, r5, [r0]
   db2dc:	f04f 0814 	mov.w	r8, #20
   db2e0:	fb08 f505 	mul.w	r5, r8, r5
   db2e4:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   db2e6:	10ab      	asrs	r3, r5, #2
   db2e8:	4d18      	ldr	r5, [pc, #96]	; (db34c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   db2ea:	4617      	mov	r7, r2
   db2ec:	435d      	muls	r5, r3
   db2ee:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   db2f0:	2d00      	cmp	r5, #0
   db2f2:	dd23      	ble.n	db33c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   db2f4:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   db2f6:	fb08 f006 	mul.w	r0, r8, r6
   db2fa:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   db2fe:	463a      	mov	r2, r7
   db300:	f8ba b004 	ldrh.w	fp, [sl, #4]
   db304:	5820      	ldr	r0, [r4, r0]
   db306:	9101      	str	r1, [sp, #4]
   db308:	455f      	cmp	r7, fp
   db30a:	bf28      	it	cs
   db30c:	465a      	movcs	r2, fp
   db30e:	f002 fbb4 	bl	dda7a <strncmp>
                if (cmp == 0) {
   db312:	9901      	ldr	r1, [sp, #4]
   db314:	2301      	movs	r3, #1
   db316:	b978      	cbnz	r0, db338 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   db318:	455f      	cmp	r7, fp
   db31a:	d103      	bne.n	db324 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   db31c:	9a00      	ldr	r2, [sp, #0]
   db31e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   db320:	4635      	mov	r5, r6
   db322:	e7e5      	b.n	db2f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   db324:	bf8c      	ite	hi
   db326:	2001      	movhi	r0, #1
   db328:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   db32a:	2800      	cmp	r0, #0
   db32c:	d0f8      	beq.n	db320 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   db32e:	1bae      	subs	r6, r5, r6
	      ++__first;
   db330:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   db334:	3e01      	subs	r6, #1
   db336:	e7f3      	b.n	db320 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   db338:	0fc0      	lsrs	r0, r0, #31
   db33a:	e7f6      	b.n	db32a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   db33c:	eba4 0409 	sub.w	r4, r4, r9
}
   db340:	4802      	ldr	r0, [pc, #8]	; (db34c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   db342:	10a4      	asrs	r4, r4, #2
   db344:	4360      	muls	r0, r4
   db346:	b003      	add	sp, #12
   db348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db34c:	cccccccd 	.word	0xcccccccd

000db350 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   db350:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   db352:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   db354:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   db356:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   db358:	b30b      	cbz	r3, db39e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   db35a:	b301      	cbz	r1, db39e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   db35c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   db35e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   db362:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   db364:	a903      	add	r1, sp, #12
   db366:	a801      	add	r0, sp, #4
   db368:	f7ff ff35 	bl	db1d6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   db36c:	4601      	mov	r1, r0
   db36e:	b1b0      	cbz	r0, db39e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   db370:	f10d 030b 	add.w	r3, sp, #11
   db374:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   db376:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   db37a:	4620      	mov	r0, r4
   db37c:	f7ff ffaa 	bl	db2d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   db380:	f89d 300b 	ldrb.w	r3, [sp, #11]
   db384:	b15b      	cbz	r3, db39e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   db386:	6824      	ldr	r4, [r4, #0]
   db388:	2314      	movs	r3, #20
   db38a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   db38e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   db392:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   db396:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   db398:	bfa8      	it	ge
   db39a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   db39c:	e7e2      	b.n	db364 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   db39e:	4630      	mov	r0, r6
   db3a0:	b004      	add	sp, #16
   db3a2:	bd70      	pop	{r4, r5, r6, pc}

000db3a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   db3a4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   db3a6:	4c09      	ldr	r4, [pc, #36]	; (db3cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   db3a8:	7823      	ldrb	r3, [r4, #0]
   db3aa:	f3bf 8f5b 	dmb	ish
   db3ae:	07db      	lsls	r3, r3, #31
   db3b0:	d409      	bmi.n	db3c6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   db3b2:	4620      	mov	r0, r4
   db3b4:	f7f8 fe80 	bl	d40b8 <__cxa_guard_acquire>
   db3b8:	b128      	cbz	r0, db3c6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   db3ba:	4620      	mov	r0, r4
   db3bc:	f7f8 fe81 	bl	d40c2 <__cxa_guard_release>
   db3c0:	4803      	ldr	r0, [pc, #12]	; (db3d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   db3c2:	f002 fa6b 	bl	dd89c <atexit>
}
   db3c6:	4803      	ldr	r0, [pc, #12]	; (db3d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   db3c8:	bd10      	pop	{r4, pc}
   db3ca:	bf00      	nop
   db3cc:	2003e580 	.word	0x2003e580
   db3d0:	000db1cf 	.word	0x000db1cf
   db3d4:	2003dca4 	.word	0x2003dca4

000db3d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   db3d8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   db3da:	4c09      	ldr	r4, [pc, #36]	; (db400 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   db3dc:	7823      	ldrb	r3, [r4, #0]
   db3de:	f3bf 8f5b 	dmb	ish
   db3e2:	07db      	lsls	r3, r3, #31
   db3e4:	d409      	bmi.n	db3fa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   db3e6:	4620      	mov	r0, r4
   db3e8:	f7f8 fe66 	bl	d40b8 <__cxa_guard_acquire>
   db3ec:	b128      	cbz	r0, db3fa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   db3ee:	4620      	mov	r0, r4
   db3f0:	f7f8 fe67 	bl	d40c2 <__cxa_guard_release>
   db3f4:	4803      	ldr	r0, [pc, #12]	; (db404 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   db3f6:	f002 fa51 	bl	dd89c <atexit>
    return &factory;
}
   db3fa:	4803      	ldr	r0, [pc, #12]	; (db408 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   db3fc:	bd10      	pop	{r4, pc}
   db3fe:	bf00      	nop
   db400:	2003e584 	.word	0x2003e584
   db404:	000db233 	.word	0x000db233
   db408:	2003dca8 	.word	0x2003dca8

000db40c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   db40c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   db40e:	2500      	movs	r5, #0
   db410:	4604      	mov	r4, r0
   db412:	e9c0 5500 	strd	r5, r5, [r0]
   db416:	e9c0 5504 	strd	r5, r5, [r0, #16]
   db41a:	6085      	str	r5, [r0, #8]
   db41c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   db41e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   db422:	f7fe fbf3 	bl	d9c0c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   db426:	f7ff ffbd 	bl	db3a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   db42a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   db42c:	f7ff ffd4 	bl	db3d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   db430:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   db432:	6220      	str	r0, [r4, #32]
}
   db434:	4620      	mov	r0, r4
   db436:	bd38      	pop	{r3, r4, r5, pc}

000db438 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   db438:	b510      	push	{r4, lr}
    static LogManager mgr;
   db43a:	4c0a      	ldr	r4, [pc, #40]	; (db464 <_ZN5spark10LogManager8instanceEv+0x2c>)
   db43c:	7823      	ldrb	r3, [r4, #0]
   db43e:	f3bf 8f5b 	dmb	ish
   db442:	07db      	lsls	r3, r3, #31
   db444:	d40c      	bmi.n	db460 <_ZN5spark10LogManager8instanceEv+0x28>
   db446:	4620      	mov	r0, r4
   db448:	f7f8 fe36 	bl	d40b8 <__cxa_guard_acquire>
   db44c:	b140      	cbz	r0, db460 <_ZN5spark10LogManager8instanceEv+0x28>
   db44e:	4806      	ldr	r0, [pc, #24]	; (db468 <_ZN5spark10LogManager8instanceEv+0x30>)
   db450:	f7ff ffdc 	bl	db40c <_ZN5spark10LogManagerC1Ev>
   db454:	4620      	mov	r0, r4
   db456:	f7f8 fe34 	bl	d40c2 <__cxa_guard_release>
   db45a:	4804      	ldr	r0, [pc, #16]	; (db46c <_ZN5spark10LogManager8instanceEv+0x34>)
   db45c:	f002 fa1e 	bl	dd89c <atexit>
    return &mgr;
}
   db460:	4801      	ldr	r0, [pc, #4]	; (db468 <_ZN5spark10LogManager8instanceEv+0x30>)
   db462:	bd10      	pop	{r4, pc}
   db464:	2003e57c 	.word	0x2003e57c
   db468:	2003e58c 	.word	0x2003e58c
   db46c:	000db8a1 	.word	0x000db8a1

000db470 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   db470:	4a02      	ldr	r2, [pc, #8]	; (db47c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   db472:	4903      	ldr	r1, [pc, #12]	; (db480 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   db474:	4803      	ldr	r0, [pc, #12]	; (db484 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   db476:	2300      	movs	r3, #0
   db478:	f7fe be38 	b.w	da0ec <log_set_callbacks>
   db47c:	000db729 	.word	0x000db729
   db480:	000db6b5 	.word	0x000db6b5
   db484:	000db635 	.word	0x000db635

000db488 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   db488:	2300      	movs	r3, #0
   db48a:	461a      	mov	r2, r3
   db48c:	4619      	mov	r1, r3
   db48e:	4618      	mov	r0, r3
   db490:	f7fe be2c 	b.w	da0ec <log_set_callbacks>

000db494 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   db494:	b570      	push	{r4, r5, r6, lr}
   db496:	b08a      	sub	sp, #40	; 0x28
   db498:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   db49a:	4601      	mov	r1, r0
   db49c:	a804      	add	r0, sp, #16
   db49e:	f7fb f887 	bl	d65b0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   db4a2:	4e14      	ldr	r6, [pc, #80]	; (db4f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   db4a4:	a804      	add	r0, sp, #16
   db4a6:	f7ff fdb5 	bl	db014 <_ZN5spark18JSONObjectIterator4nextEv>
   db4aa:	b1e8      	cbz	r0, db4e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   db4ac:	a904      	add	r1, sp, #16
   db4ae:	4668      	mov	r0, sp
   db4b0:	f7fb f88f 	bl	d65d2 <_ZNK5spark18JSONObjectIterator4nameEv>
   db4b4:	9802      	ldr	r0, [sp, #8]
   db4b6:	4631      	mov	r1, r6
   db4b8:	f7ff feb4 	bl	db224 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   db4bc:	4604      	mov	r4, r0
   db4be:	b110      	cbz	r0, db4c6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   db4c0:	1e2c      	subs	r4, r5, #0
   db4c2:	bf18      	it	ne
   db4c4:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   db4c6:	a801      	add	r0, sp, #4
   db4c8:	f7f8 ff1d 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db4cc:	2c00      	cmp	r4, #0
   db4ce:	d0e9      	beq.n	db4a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   db4d0:	a904      	add	r1, sp, #16
   db4d2:	4668      	mov	r0, sp
   db4d4:	f7fb f88e 	bl	d65f4 <_ZNK5spark18JSONObjectIterator5valueEv>
   db4d8:	4668      	mov	r0, sp
   db4da:	f7ff fd3e 	bl	daf5a <_ZNK5spark9JSONValue5toIntEv>
   db4de:	6028      	str	r0, [r5, #0]
   db4e0:	a801      	add	r0, sp, #4
   db4e2:	f7f8 ff10 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db4e6:	e7dd      	b.n	db4a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   db4e8:	a805      	add	r0, sp, #20
   db4ea:	f7f8 ff0c 	bl	d4306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   db4ee:	b00a      	add	sp, #40	; 0x28
   db4f0:	bd70      	pop	{r4, r5, r6, pc}
   db4f2:	bf00      	nop
   db4f4:	000ded62 	.word	0x000ded62

000db4f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   db4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db4fa:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   db4fc:	4620      	mov	r0, r4
   db4fe:	4912      	ldr	r1, [pc, #72]	; (db548 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   db500:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   db502:	f002 fa82 	bl	dda0a <strcmp>
   db506:	b948      	cbnz	r0, db51c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   db508:	f001 fc2a 	bl	dcd60 <_Z16_fetch_usbserialv>
   db50c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   db510:	f001 fc16 	bl	dcd40 <_ZN9USBSerial5beginEl>
        return &Serial;
   db514:	f001 fc24 	bl	dcd60 <_Z16_fetch_usbserialv>
}
   db518:	b003      	add	sp, #12
   db51a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   db51c:	490b      	ldr	r1, [pc, #44]	; (db54c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   db51e:	4620      	mov	r0, r4
   db520:	f002 fa73 	bl	dda0a <strcmp>
   db524:	b970      	cbnz	r0, db544 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   db526:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   db52a:	a901      	add	r1, sp, #4
   db52c:	4628      	mov	r0, r5
        int baud = 9600;
   db52e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   db530:	f7ff ffb0 	bl	db494 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   db534:	f001 fb8c 	bl	dcc50 <_Z22__fetch_global_Serial1v>
   db538:	9901      	ldr	r1, [sp, #4]
   db53a:	f001 fb83 	bl	dcc44 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   db53e:	f001 fb87 	bl	dcc50 <_Z22__fetch_global_Serial1v>
   db542:	e7e9      	b.n	db518 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   db544:	2000      	movs	r0, #0
   db546:	e7e7      	b.n	db518 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   db548:	000ded67 	.word	0x000ded67
   db54c:	000ded6e 	.word	0x000ded6e

000db550 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   db550:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   db552:	e9d0 5300 	ldrd	r5, r3, [r0]
   db556:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   db558:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   db55a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   db55e:	42ae      	cmp	r6, r5
   db560:	d005      	beq.n	db56e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   db562:	f105 0008 	add.w	r0, r5, #8
   db566:	f7ff fff3 	bl	db550 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   db56a:	3514      	adds	r5, #20
   db56c:	e7f7      	b.n	db55e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   db56e:	6820      	ldr	r0, [r4, #0]
   db570:	f7fe fefc 	bl	da36c <free>
}
   db574:	4620      	mov	r0, r4
   db576:	bd70      	pop	{r4, r5, r6, pc}

000db578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   db578:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   db57a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   db57e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   db580:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   db584:	42ae      	cmp	r6, r5
   db586:	d004      	beq.n	db592 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   db588:	4628      	mov	r0, r5
   db58a:	f000 ffa5 	bl	dc4d8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   db58e:	3510      	adds	r5, #16
   db590:	e7f8      	b.n	db584 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   db592:	6820      	ldr	r0, [r4, #0]
   db594:	f7fe feea 	bl	da36c <free>
}
   db598:	4620      	mov	r0, r4
   db59a:	bd70      	pop	{r4, r5, r6, pc}

000db59c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   db59c:	b510      	push	{r4, lr}
   db59e:	4604      	mov	r4, r0
   db5a0:	300c      	adds	r0, #12
   db5a2:	f7ff ffd5 	bl	db550 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   db5a6:	4620      	mov	r0, r4
   db5a8:	f7ff ffe6 	bl	db578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   db5ac:	4620      	mov	r0, r4
   db5ae:	bd10      	pop	{r4, pc}

000db5b0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   db5b0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   db5b2:	4b04      	ldr	r3, [pc, #16]	; (db5c4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   db5b4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   db5b6:	f840 3b04 	str.w	r3, [r0], #4
   db5ba:	f7ff ffef 	bl	db59c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   db5be:	4620      	mov	r0, r4
   db5c0:	bd10      	pop	{r4, pc}
   db5c2:	bf00      	nop
   db5c4:	000de2ec 	.word	0x000de2ec

000db5c8 <_ZN5spark16StreamLogHandlerD0Ev>:
   db5c8:	b510      	push	{r4, lr}
   db5ca:	4604      	mov	r4, r0
   db5cc:	f7ff fff0 	bl	db5b0 <_ZN5spark16StreamLogHandlerD1Ev>
   db5d0:	4620      	mov	r0, r4
   db5d2:	2124      	movs	r1, #36	; 0x24
   db5d4:	f001 fd3e 	bl	dd054 <_ZdlPvj>
   db5d8:	4620      	mov	r0, r4
   db5da:	bd10      	pop	{r4, pc}

000db5dc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   db5dc:	b510      	push	{r4, lr}
   db5de:	4b03      	ldr	r3, [pc, #12]	; (db5ec <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   db5e0:	6003      	str	r3, [r0, #0]
   db5e2:	4604      	mov	r4, r0
   db5e4:	f7ff ffe4 	bl	db5b0 <_ZN5spark16StreamLogHandlerD1Ev>
   db5e8:	4620      	mov	r0, r4
   db5ea:	bd10      	pop	{r4, pc}
   db5ec:	000dee0c 	.word	0x000dee0c

000db5f0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   db5f0:	b510      	push	{r4, lr}
   db5f2:	4604      	mov	r4, r0
   db5f4:	f7ff fff2 	bl	db5dc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   db5f8:	4620      	mov	r0, r4
   db5fa:	2124      	movs	r1, #36	; 0x24
   db5fc:	f001 fd2a 	bl	dd054 <_ZdlPvj>
   db600:	4620      	mov	r0, r4
   db602:	bd10      	pop	{r4, pc}

000db604 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   db604:	2200      	movs	r2, #0
   db606:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   db60a:	b510      	push	{r4, lr}
        capacity_(0) {
   db60c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   db60e:	680c      	ldr	r4, [r1, #0]
   db610:	6004      	str	r4, [r0, #0]
   db612:	684c      	ldr	r4, [r1, #4]
   db614:	6044      	str	r4, [r0, #4]
   db616:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db618:	600a      	str	r2, [r1, #0]
   db61a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   db61c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db61e:	608a      	str	r2, [r1, #8]
}
   db620:	bd10      	pop	{r4, pc}

000db622 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   db622:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   db624:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   db626:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   db628:	6818      	ldr	r0, [r3, #0]
   db62a:	f7fe fb07 	bl	d9c3c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   db62e:	4620      	mov	r0, r4
   db630:	bd10      	pop	{r4, pc}
	...

000db634 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   db634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db638:	b087      	sub	sp, #28
   db63a:	4680      	mov	r8, r0
   db63c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   db63e:	4b1c      	ldr	r3, [pc, #112]	; (db6b0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   db640:	685b      	ldr	r3, [r3, #4]
   db642:	f3c3 0308 	ubfx	r3, r3, #0, #9
   db646:	4689      	mov	r9, r1
   db648:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   db64a:	b96b      	cbnz	r3, db668 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   db64c:	f7ff fef4 	bl	db438 <_ZN5spark10LogManager8instanceEv>
   db650:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   db652:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   db656:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   db658:	9305      	str	r3, [sp, #20]
   db65a:	f7fe fae7 	bl	d9c2c <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   db65e:	7b23      	ldrb	r3, [r4, #12]
   db660:	b12b      	cbz	r3, db66e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   db662:	a805      	add	r0, sp, #20
   db664:	f7ff ffdd 	bl	db622 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   db668:	b007      	add	sp, #28
   db66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   db66e:	2301      	movs	r3, #1
   db670:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   db672:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   db676:	fa5f f989 	uxtb.w	r9, r9
   db67a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   db67e:	45aa      	cmp	sl, r5
   db680:	d012      	beq.n	db6a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   db682:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   db686:	4631      	mov	r1, r6
   db688:	1d38      	adds	r0, r7, #4
   db68a:	f7ff fe61 	bl	db350 <_ZNK5spark6detail9LogFilter5levelEPKc>
   db68e:	4581      	cmp	r9, r0
   db690:	d3f5      	bcc.n	db67e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   db692:	683b      	ldr	r3, [r7, #0]
   db694:	9a03      	ldr	r2, [sp, #12]
   db696:	9200      	str	r2, [sp, #0]
   db698:	f8d3 b008 	ldr.w	fp, [r3, #8]
   db69c:	464a      	mov	r2, r9
   db69e:	4633      	mov	r3, r6
   db6a0:	4641      	mov	r1, r8
   db6a2:	4638      	mov	r0, r7
   db6a4:	47d8      	blx	fp
   db6a6:	e7ea      	b.n	db67e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   db6a8:	2300      	movs	r3, #0
   db6aa:	7323      	strb	r3, [r4, #12]
   db6ac:	e7d9      	b.n	db662 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   db6ae:	bf00      	nop
   db6b0:	e000ed00 	.word	0xe000ed00

000db6b4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   db6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db6b8:	469b      	mov	fp, r3
   db6ba:	4b1a      	ldr	r3, [pc, #104]	; (db724 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   db6bc:	685b      	ldr	r3, [r3, #4]
   db6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
   db6c2:	4680      	mov	r8, r0
   db6c4:	4689      	mov	r9, r1
   db6c6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   db6c8:	b96b      	cbnz	r3, db6e6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   db6ca:	f7ff feb5 	bl	db438 <_ZN5spark10LogManager8instanceEv>
   db6ce:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   db6d0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   db6d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   db6d6:	9301      	str	r3, [sp, #4]
   db6d8:	f7fe faa8 	bl	d9c2c <os_mutex_recursive_lock>
        if (that->isActive()) {
   db6dc:	7b23      	ldrb	r3, [r4, #12]
   db6de:	b12b      	cbz	r3, db6ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   db6e0:	a801      	add	r0, sp, #4
   db6e2:	f7ff ff9e 	bl	db622 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   db6e6:	b003      	add	sp, #12
   db6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   db6ec:	2301      	movs	r3, #1
   db6ee:	7323      	strb	r3, [r4, #12]
   db6f0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   db6f4:	b2f6      	uxtb	r6, r6
   db6f6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   db6fa:	4555      	cmp	r5, sl
   db6fc:	d00e      	beq.n	db71c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   db6fe:	f855 7b04 	ldr.w	r7, [r5], #4
   db702:	4659      	mov	r1, fp
   db704:	1d38      	adds	r0, r7, #4
   db706:	f7ff fe23 	bl	db350 <_ZNK5spark6detail9LogFilter5levelEPKc>
   db70a:	4286      	cmp	r6, r0
   db70c:	d3f5      	bcc.n	db6fa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   db70e:	683b      	ldr	r3, [r7, #0]
   db710:	464a      	mov	r2, r9
   db712:	68db      	ldr	r3, [r3, #12]
   db714:	4641      	mov	r1, r8
   db716:	4638      	mov	r0, r7
   db718:	4798      	blx	r3
   db71a:	e7ee      	b.n	db6fa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   db71c:	2300      	movs	r3, #0
   db71e:	7323      	strb	r3, [r4, #12]
   db720:	e7de      	b.n	db6e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   db722:	bf00      	nop
   db724:	e000ed00 	.word	0xe000ed00

000db728 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   db728:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   db72c:	4b16      	ldr	r3, [pc, #88]	; (db788 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   db72e:	685b      	ldr	r3, [r3, #4]
   db730:	f3c3 0308 	ubfx	r3, r3, #0, #9
   db734:	4605      	mov	r5, r0
   db736:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   db738:	bb1b      	cbnz	r3, db782 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   db73a:	f7ff fe7d 	bl	db438 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   db73e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   db742:	4604      	mov	r4, r0
   db744:	6a40      	ldr	r0, [r0, #36]	; 0x24
   db746:	9301      	str	r3, [sp, #4]
   db748:	f7fe fa70 	bl	d9c2c <os_mutex_recursive_lock>
   db74c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   db750:	2446      	movs	r4, #70	; 0x46
   db752:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   db756:	45b0      	cmp	r8, r6
   db758:	d109      	bne.n	db76e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   db75a:	a801      	add	r0, sp, #4
   db75c:	f7ff ff61 	bl	db622 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   db760:	42a5      	cmp	r5, r4
   db762:	bfb4      	ite	lt
   db764:	2000      	movlt	r0, #0
   db766:	2001      	movge	r0, #1
}
   db768:	b002      	add	sp, #8
   db76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   db76e:	f856 0b04 	ldr.w	r0, [r6], #4
   db772:	4639      	mov	r1, r7
   db774:	3004      	adds	r0, #4
   db776:	f7ff fdeb 	bl	db350 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   db77a:	4284      	cmp	r4, r0
   db77c:	bfa8      	it	ge
   db77e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   db780:	e7e9      	b.n	db756 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   db782:	2000      	movs	r0, #0
   db784:	e7f0      	b.n	db768 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   db786:	bf00      	nop
   db788:	e000ed00 	.word	0xe000ed00

000db78c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   db78c:	b570      	push	{r4, r5, r6, lr}
   db78e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   db790:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   db794:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   db796:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   db79a:	4282      	cmp	r2, r0
   db79c:	d007      	beq.n	db7ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   db79e:	4601      	mov	r1, r0
            if (*p == value) {
   db7a0:	681d      	ldr	r5, [r3, #0]
   db7a2:	f851 6b04 	ldr.w	r6, [r1], #4
   db7a6:	42ae      	cmp	r6, r5
   db7a8:	d003      	beq.n	db7b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   db7aa:	4608      	mov	r0, r1
   db7ac:	e7f5      	b.n	db79a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   db7ae:	2000      	movs	r0, #0
}
   db7b0:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   db7b2:	1a52      	subs	r2, r2, r1
   db7b4:	f002 f898 	bl	dd8e8 <memmove>
    --size_;
   db7b8:	6863      	ldr	r3, [r4, #4]
   db7ba:	3b01      	subs	r3, #1
   db7bc:	6063      	str	r3, [r4, #4]
    return true;
   db7be:	2001      	movs	r0, #1
   db7c0:	e7f6      	b.n	db7b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000db7c2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   db7c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   db7c4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   db7c8:	4604      	mov	r4, r0
   db7ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
   db7cc:	9101      	str	r1, [sp, #4]
   db7ce:	9303      	str	r3, [sp, #12]
   db7d0:	f7fe fa2c 	bl	d9c2c <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   db7d4:	a901      	add	r1, sp, #4
   db7d6:	4620      	mov	r0, r4
   db7d8:	f7ff ffd8 	bl	db78c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   db7dc:	b118      	cbz	r0, db7e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   db7de:	6863      	ldr	r3, [r4, #4]
   db7e0:	b90b      	cbnz	r3, db7e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   db7e2:	f7ff fe51 	bl	db488 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   db7e6:	a803      	add	r0, sp, #12
   db7e8:	f7ff ff1b 	bl	db622 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   db7ec:	b004      	add	sp, #16
   db7ee:	bd10      	pop	{r4, pc}

000db7f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   db7f0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   db7f2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   db7f6:	2318      	movs	r3, #24
   db7f8:	4604      	mov	r4, r0
   db7fa:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   db7fe:	42ae      	cmp	r6, r5
   db800:	d015      	beq.n	db82e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   db802:	f105 0110 	add.w	r1, r5, #16
   db806:	4620      	mov	r0, r4
   db808:	f7ff ffc0 	bl	db78c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   db80c:	6863      	ldr	r3, [r4, #4]
   db80e:	b90b      	cbnz	r3, db814 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   db810:	f7ff fe3a 	bl	db488 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   db814:	69e0      	ldr	r0, [r4, #28]
   db816:	6929      	ldr	r1, [r5, #16]
   db818:	6803      	ldr	r3, [r0, #0]
   db81a:	68db      	ldr	r3, [r3, #12]
   db81c:	4798      	blx	r3
        if (h.stream) {
   db81e:	6969      	ldr	r1, [r5, #20]
   db820:	b119      	cbz	r1, db82a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   db822:	6a20      	ldr	r0, [r4, #32]
   db824:	6803      	ldr	r3, [r0, #0]
   db826:	68db      	ldr	r3, [r3, #12]
   db828:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   db82a:	3518      	adds	r5, #24
   db82c:	e7e7      	b.n	db7fe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   db82e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   db832:	2618      	movs	r6, #24
   db834:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   db838:	42ae      	cmp	r6, r5
   db83a:	d004      	beq.n	db846 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   db83c:	4628      	mov	r0, r5
   db83e:	f000 fe4b 	bl	dc4d8 <_ZN6StringD1Ev>
   db842:	3518      	adds	r5, #24
   db844:	e7f8      	b.n	db838 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   db846:	2300      	movs	r3, #0
   db848:	6163      	str	r3, [r4, #20]
}
   db84a:	bd70      	pop	{r4, r5, r6, pc}

000db84c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   db84c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   db84e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   db850:	f7ff fe1a 	bl	db488 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   db854:	f104 0324 	add.w	r3, r4, #36	; 0x24
   db858:	6a60      	ldr	r0, [r4, #36]	; 0x24
   db85a:	9301      	str	r3, [sp, #4]
   db85c:	f7fe f9e6 	bl	d9c2c <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   db860:	4620      	mov	r0, r4
   db862:	f7ff ffc5 	bl	db7f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   db866:	a801      	add	r0, sp, #4
   db868:	f7ff fedb 	bl	db622 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   db86c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   db86e:	b108      	cbz	r0, db874 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   db870:	f7fe f9d4 	bl	d9c1c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   db874:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   db878:	2618      	movs	r6, #24
   db87a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   db87e:	42ae      	cmp	r6, r5
   db880:	d004      	beq.n	db88c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   db882:	4628      	mov	r0, r5
   db884:	f000 fe28 	bl	dc4d8 <_ZN6StringD1Ev>
   db888:	3518      	adds	r5, #24
   db88a:	e7f8      	b.n	db87e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   db88c:	6920      	ldr	r0, [r4, #16]
   db88e:	f7fe fd6d 	bl	da36c <free>
   db892:	6820      	ldr	r0, [r4, #0]
   db894:	f7fe fd6a 	bl	da36c <free>
}
   db898:	4620      	mov	r0, r4
   db89a:	b002      	add	sp, #8
   db89c:	bd70      	pop	{r4, r5, r6, pc}
	...

000db8a0 <__tcf_2>:
    static LogManager mgr;
   db8a0:	4801      	ldr	r0, [pc, #4]	; (db8a8 <__tcf_2+0x8>)
   db8a2:	f7ff bfd3 	b.w	db84c <_ZN5spark10LogManagerD1Ev>
   db8a6:	bf00      	nop
   db8a8:	2003e58c 	.word	0x2003e58c

000db8ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   db8ac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   db8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db8b0:	4606      	mov	r6, r0
   db8b2:	460c      	mov	r4, r1
   db8b4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   db8b6:	d927      	bls.n	db908 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   db8b8:	4290      	cmp	r0, r2
   db8ba:	d226      	bcs.n	db90a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   db8bc:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   db8c0:	1a6c      	subs	r4, r5, r1
   db8c2:	f1a1 0714 	sub.w	r7, r1, #20
   db8c6:	4404      	add	r4, r0
        capacity_(0) {
   db8c8:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   db8ca:	42af      	cmp	r7, r5
   db8cc:	d03d      	beq.n	db94a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   db8ce:	b1a4      	cbz	r4, db8fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   db8d0:	682b      	ldr	r3, [r5, #0]
   db8d2:	6023      	str	r3, [r4, #0]
   db8d4:	88ab      	ldrh	r3, [r5, #4]
   db8d6:	80a3      	strh	r3, [r4, #4]
   db8d8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   db8dc:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   db8de:	e9c4 6602 	strd	r6, r6, [r4, #8]
   db8e2:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   db8e4:	68ab      	ldr	r3, [r5, #8]
   db8e6:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db8e8:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db8ea:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   db8ec:	68ea      	ldr	r2, [r5, #12]
   db8ee:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db8f0:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db8f2:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   db8f4:	692a      	ldr	r2, [r5, #16]
   db8f6:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   db8f8:	612b      	str	r3, [r5, #16]
   db8fa:	f105 0008 	add.w	r0, r5, #8
   db8fe:	f7ff fe27 	bl	db550 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   db902:	3d14      	subs	r5, #20
   db904:	3c14      	subs	r4, #20
   db906:	e7e0      	b.n	db8ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   db908:	d01f      	beq.n	db94a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   db90a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   db90c:	42ac      	cmp	r4, r5
   db90e:	d01c      	beq.n	db94a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   db910:	b1a6      	cbz	r6, db93c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   db912:	6823      	ldr	r3, [r4, #0]
   db914:	6033      	str	r3, [r6, #0]
   db916:	88a3      	ldrh	r3, [r4, #4]
   db918:	80b3      	strh	r3, [r6, #4]
   db91a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   db91e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   db920:	e9c6 7702 	strd	r7, r7, [r6, #8]
   db924:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   db926:	68a3      	ldr	r3, [r4, #8]
   db928:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db92a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db92c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   db92e:	68e2      	ldr	r2, [r4, #12]
   db930:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db932:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db934:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   db936:	6922      	ldr	r2, [r4, #16]
   db938:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   db93a:	6123      	str	r3, [r4, #16]
   db93c:	f104 0008 	add.w	r0, r4, #8
   db940:	f7ff fe06 	bl	db550 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   db944:	3414      	adds	r4, #20
   db946:	3614      	adds	r6, #20
   db948:	e7e0      	b.n	db90c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   db94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db94c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   db94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   db94e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   db952:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   db954:	4604      	mov	r4, r0
   db956:	460e      	mov	r6, r1
   db958:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   db95a:	db0d      	blt.n	db978 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   db95c:	3501      	adds	r5, #1
        if (n > 0) {
   db95e:	2d00      	cmp	r5, #0
   db960:	6800      	ldr	r0, [r0, #0]
   db962:	dd04      	ble.n	db96e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   db964:	00a9      	lsls	r1, r5, #2
   db966:	f7fe fd09 	bl	da37c <realloc>
            if (!d) {
   db96a:	b918      	cbnz	r0, db974 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   db96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   db96e:	f7fe fcfd 	bl	da36c <free>
        T* d = nullptr;
   db972:	2000      	movs	r0, #0
        data_ = d;
   db974:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   db976:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   db978:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   db97a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   db97c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   db980:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   db982:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   db986:	1d08      	adds	r0, r1, #4
   db988:	f001 ffae 	bl	dd8e8 <memmove>
    new(p) T(std::move(value));
   db98c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   db990:	6863      	ldr	r3, [r4, #4]
   db992:	3301      	adds	r3, #1
   db994:	6063      	str	r3, [r4, #4]
    return true;
   db996:	2001      	movs	r0, #1
   db998:	e7e8      	b.n	db96c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000db99a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   db99a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   db99c:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   db9a0:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   db9a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   db9a4:	9301      	str	r3, [sp, #4]
   db9a6:	460d      	mov	r5, r1
   db9a8:	f7fe f940 	bl	d9c2c <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   db9ac:	e9d4 3100 	ldrd	r3, r1, [r4]
   db9b0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   db9b4:	4283      	cmp	r3, r0
   db9b6:	461a      	mov	r2, r3
   db9b8:	d00b      	beq.n	db9d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   db9ba:	6812      	ldr	r2, [r2, #0]
   db9bc:	42aa      	cmp	r2, r5
   db9be:	f103 0304 	add.w	r3, r3, #4
   db9c2:	d1f7      	bne.n	db9b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   db9c4:	a801      	add	r0, sp, #4
   db9c6:	f7ff fe2c 	bl	db622 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   db9ca:	2500      	movs	r5, #0
}
   db9cc:	4628      	mov	r0, r5
   db9ce:	b003      	add	sp, #12
   db9d0:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   db9d2:	462a      	mov	r2, r5
   db9d4:	4620      	mov	r0, r4
   db9d6:	f7ff ffb9 	bl	db94c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   db9da:	4605      	mov	r5, r0
   db9dc:	2800      	cmp	r0, #0
   db9de:	d0f1      	beq.n	db9c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   db9e0:	6863      	ldr	r3, [r4, #4]
   db9e2:	2b01      	cmp	r3, #1
   db9e4:	d101      	bne.n	db9ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   db9e6:	f7ff fd43 	bl	db470 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   db9ea:	a801      	add	r0, sp, #4
   db9ec:	f7ff fe19 	bl	db622 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   db9f0:	e7ec      	b.n	db9cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000db9f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   db9f2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   db9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db9f6:	4604      	mov	r4, r0
   db9f8:	460d      	mov	r5, r1
   db9fa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   db9fc:	d914      	bls.n	dba28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   db9fe:	4290      	cmp	r0, r2
   dba00:	d213      	bcs.n	dba2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   dba02:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   dba06:	1a75      	subs	r5, r6, r1
   dba08:	f1a1 0710 	sub.w	r7, r1, #16
   dba0c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   dba0e:	42b7      	cmp	r7, r6
   dba10:	d018      	beq.n	dba44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   dba12:	b11c      	cbz	r4, dba1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   dba14:	4631      	mov	r1, r6
   dba16:	4620      	mov	r0, r4
   dba18:	f000 fdda 	bl	dc5d0 <_ZN6StringC1EOS_>
                end->~T();
   dba1c:	4630      	mov	r0, r6
   dba1e:	f000 fd5b 	bl	dc4d8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   dba22:	3e10      	subs	r6, #16
   dba24:	3c10      	subs	r4, #16
   dba26:	e7f2      	b.n	dba0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   dba28:	d00c      	beq.n	dba44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   dba2a:	42b5      	cmp	r5, r6
   dba2c:	d00a      	beq.n	dba44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   dba2e:	b11c      	cbz	r4, dba38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   dba30:	4629      	mov	r1, r5
   dba32:	4620      	mov	r0, r4
   dba34:	f000 fdcc 	bl	dc5d0 <_ZN6StringC1EOS_>
                p->~T();
   dba38:	4628      	mov	r0, r5
   dba3a:	f000 fd4d 	bl	dc4d8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   dba3e:	3510      	adds	r5, #16
   dba40:	3410      	adds	r4, #16
   dba42:	e7f2      	b.n	dba2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   dba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dba46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   dba46:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   dba48:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   dba4a:	4605      	mov	r5, r0
        if (n > 0) {
   dba4c:	dd11      	ble.n	dba72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   dba4e:	0130      	lsls	r0, r6, #4
   dba50:	f7fe fc84 	bl	da35c <malloc>
            if (!d) {
   dba54:	4604      	mov	r4, r0
   dba56:	b158      	cbz	r0, dba70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   dba58:	e9d5 1200 	ldrd	r1, r2, [r5]
   dba5c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   dba60:	f7ff ffc7 	bl	db9f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   dba64:	6828      	ldr	r0, [r5, #0]
   dba66:	f7fe fc81 	bl	da36c <free>
        data_ = d;
   dba6a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   dba6c:	60ae      	str	r6, [r5, #8]
        return true;
   dba6e:	2001      	movs	r0, #1
    }
   dba70:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   dba72:	2400      	movs	r4, #0
   dba74:	e7f6      	b.n	dba64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000dba76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dba76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dba7a:	4691      	mov	r9, r2
   dba7c:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   dba7e:	2300      	movs	r3, #0
   dba80:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   dba82:	f8d9 1004 	ldr.w	r1, [r9, #4]
   dba86:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dba88:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   dba8a:	4299      	cmp	r1, r3
        capacity_(0) {
   dba8c:	e9c0 3300 	strd	r3, r3, [r0]
   dba90:	e9c0 3302 	strd	r3, r3, [r0, #8]
   dba94:	e9c0 3304 	strd	r3, r3, [r0, #16]
   dba98:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dba9c:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dba9e:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   dbaa0:	dc23      	bgt.n	dbaea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   dbaa2:	e9d9 5700 	ldrd	r5, r7, [r9]
   dbaa6:	2314      	movs	r3, #20
   dbaa8:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   dbaac:	42af      	cmp	r7, r5
   dbaae:	d03b      	beq.n	dbb28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   dbab0:	4629      	mov	r1, r5
   dbab2:	a80d      	add	r0, sp, #52	; 0x34
   dbab4:	f000 fd8c 	bl	dc5d0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   dbab8:	a90d      	add	r1, sp, #52	; 0x34
   dbaba:	a811      	add	r0, sp, #68	; 0x44
   dbabc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   dbabe:	f000 fd87 	bl	dc5d0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dbac2:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   dbac6:	4299      	cmp	r1, r3
   dbac8:	da1b      	bge.n	dbb02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   dbaca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   dbacc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   dbace:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   dbad2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   dbad6:	4631      	mov	r1, r6
   dbad8:	f106 0010 	add.w	r0, r6, #16
   dbadc:	f7ff ff89 	bl	db9f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   dbae0:	b9ee      	cbnz	r6, dbb1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   dbae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dbae4:	3301      	adds	r3, #1
   dbae6:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   dbae8:	e011      	b.n	dbb0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   dbaea:	a80a      	add	r0, sp, #40	; 0x28
   dbaec:	f7ff ffab 	bl	dba46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dbaf0:	2800      	cmp	r0, #0
   dbaf2:	d1d6      	bne.n	dbaa2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   dbaf4:	a80a      	add	r0, sp, #40	; 0x28
   dbaf6:	f7ff fd3f 	bl	db578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dbafa:	4620      	mov	r0, r4
   dbafc:	b017      	add	sp, #92	; 0x5c
   dbafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dbb02:	3101      	adds	r1, #1
   dbb04:	a80a      	add	r0, sp, #40	; 0x28
   dbb06:	f7ff ff9e 	bl	dba46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dbb0a:	2800      	cmp	r0, #0
   dbb0c:	d1dd      	bne.n	dbaca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   dbb0e:	a811      	add	r0, sp, #68	; 0x44
   dbb10:	f000 fce2 	bl	dc4d8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   dbb14:	a80d      	add	r0, sp, #52	; 0x34
   dbb16:	f000 fcdf 	bl	dc4d8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   dbb1a:	3514      	adds	r5, #20
   dbb1c:	e7c6      	b.n	dbaac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   dbb1e:	a911      	add	r1, sp, #68	; 0x44
   dbb20:	4630      	mov	r0, r6
   dbb22:	f000 fd55 	bl	dc5d0 <_ZN6StringC1EOS_>
   dbb26:	e7dc      	b.n	dbae2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   dbb28:	2600      	movs	r6, #0
   dbb2a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   dbb2e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   dbb30:	4637      	mov	r7, r6
   dbb32:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   dbb36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dbb3a:	429e      	cmp	r6, r3
   dbb3c:	f280 8097 	bge.w	dbc6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   dbb40:	0133      	lsls	r3, r6, #4
   dbb42:	58d3      	ldr	r3, [r2, r3]
   dbb44:	9308      	str	r3, [sp, #32]
        if (!category) {
   dbb46:	b90b      	cbnz	r3, dbb4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   dbb48:	3601      	adds	r6, #1
   dbb4a:	e7f4      	b.n	dbb36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   dbb4c:	fb0a f306 	mul.w	r3, sl, r6
   dbb50:	9709      	str	r7, [sp, #36]	; 0x24
   dbb52:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   dbb54:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   dbb56:	a909      	add	r1, sp, #36	; 0x24
   dbb58:	a808      	add	r0, sp, #32
   dbb5a:	f7ff fb3c 	bl	db1d6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dbb5e:	4683      	mov	fp, r0
   dbb60:	2800      	cmp	r0, #0
   dbb62:	d0f1      	beq.n	dbb48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   dbb64:	4601      	mov	r1, r0
   dbb66:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   dbb68:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dbb6c:	f10d 031f 	add.w	r3, sp, #31
   dbb70:	4628      	mov	r0, r5
   dbb72:	f7ff fbaf 	bl	db2d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dbb76:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dbb7a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dbb7c:	f1b8 0f00 	cmp.w	r8, #0
   dbb80:	d166      	bne.n	dbc50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   dbb82:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   dbb86:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   dbb8a:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   dbb8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dbb92:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   dbb96:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   dbb9a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dbb9e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   dbba2:	4293      	cmp	r3, r2
   dbba4:	db1a      	blt.n	dbbdc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   dbba6:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   dbbaa:	f1bb 0f00 	cmp.w	fp, #0
   dbbae:	dd4a      	ble.n	dbc46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   dbbb0:	fb0a f00b 	mul.w	r0, sl, fp
   dbbb4:	f7fe fbd2 	bl	da35c <malloc>
            if (!d) {
   dbbb8:	9004      	str	r0, [sp, #16]
   dbbba:	2800      	cmp	r0, #0
   dbbbc:	d045      	beq.n	dbc4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   dbbbe:	e9d5 1200 	ldrd	r1, r2, [r5]
   dbbc2:	fb0a 1202 	mla	r2, sl, r2, r1
   dbbc6:	f7ff fe71 	bl	db8ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   dbbca:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   dbbcc:	6828      	ldr	r0, [r5, #0]
   dbbce:	9304      	str	r3, [sp, #16]
   dbbd0:	f7fe fbcc 	bl	da36c <free>
        data_ = d;
   dbbd4:	9b04      	ldr	r3, [sp, #16]
   dbbd6:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   dbbd8:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   dbbdc:	9b01      	ldr	r3, [sp, #4]
   dbbde:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   dbbe2:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   dbbe4:	fb0a f303 	mul.w	r3, sl, r3
   dbbe8:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   dbbec:	f101 0014 	add.w	r0, r1, #20
   dbbf0:	fb0a b202 	mla	r2, sl, r2, fp
   dbbf4:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   dbbf6:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   dbbf8:	f7ff fe58 	bl	db8ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   dbbfc:	9904      	ldr	r1, [sp, #16]
   dbbfe:	b1a9      	cbz	r1, dbc2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   dbc00:	9b05      	ldr	r3, [sp, #20]
   dbc02:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dbc04:	f84b 2003 	str.w	r2, [fp, r3]
   dbc08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   dbc0c:	808b      	strh	r3, [r1, #4]
   dbc0e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   dbc12:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   dbc14:	e9c1 7702 	strd	r7, r7, [r1, #8]
   dbc18:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbc1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dbc1c:	608b      	str	r3, [r1, #8]
   dbc1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   dbc20:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   dbc22:	60cb      	str	r3, [r1, #12]
   dbc24:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   dbc26:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   dbc28:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dbc2a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   dbc2c:	686b      	ldr	r3, [r5, #4]
   dbc2e:	3301      	adds	r3, #1
   dbc30:	606b      	str	r3, [r5, #4]
   dbc32:	a813      	add	r0, sp, #76	; 0x4c
   dbc34:	f7ff fc8c 	bl	db550 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dbc38:	f1b8 0f00 	cmp.w	r8, #0
   dbc3c:	d008      	beq.n	dbc50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   dbc3e:	a80d      	add	r0, sp, #52	; 0x34
   dbc40:	f7ff fc86 	bl	db550 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dbc44:	e756      	b.n	dbaf4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   dbc46:	4643      	mov	r3, r8
   dbc48:	e7c0      	b.n	dbbcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dbc4a:	f04f 0801 	mov.w	r8, #1
   dbc4e:	e7f0      	b.n	dbc32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   dbc50:	9b01      	ldr	r3, [sp, #4]
   dbc52:	682d      	ldr	r5, [r5, #0]
   dbc54:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   dbc58:	9b08      	ldr	r3, [sp, #32]
   dbc5a:	781b      	ldrb	r3, [r3, #0]
   dbc5c:	b92b      	cbnz	r3, dbc6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   dbc5e:	f8d9 3000 	ldr.w	r3, [r9]
   dbc62:	9a02      	ldr	r2, [sp, #8]
   dbc64:	4413      	add	r3, r2
   dbc66:	7c1b      	ldrb	r3, [r3, #16]
   dbc68:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   dbc6a:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   dbc6c:	e773      	b.n	dbb56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbc6e:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dbc70:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbc72:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   dbc74:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbc76:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dbc78:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   dbc7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   dbc7c:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbc7e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dbc80:	60a2      	str	r2, [r4, #8]
   dbc82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   dbc84:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbc86:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbc88:	60e2      	str	r2, [r4, #12]
   dbc8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   dbc8c:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbc8e:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   dbc90:	6122      	str	r2, [r4, #16]
   dbc92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   dbc94:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   dbc96:	9b03      	ldr	r3, [sp, #12]
   dbc98:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   dbc9a:	6162      	str	r2, [r4, #20]
   dbc9c:	7623      	strb	r3, [r4, #24]
   dbc9e:	e7ce      	b.n	dbc3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000dbca0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dbca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   dbca2:	4605      	mov	r5, r0
   dbca4:	4b09      	ldr	r3, [pc, #36]	; (dbccc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   dbca6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dbcaa:	4604      	mov	r4, r0
   dbcac:	460e      	mov	r6, r1
        filter_(level, filters) {
   dbcae:	a801      	add	r0, sp, #4
   dbcb0:	4611      	mov	r1, r2
   dbcb2:	f7f8 fc56 	bl	d4562 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dbcb6:	aa01      	add	r2, sp, #4
   dbcb8:	4631      	mov	r1, r6
   dbcba:	4628      	mov	r0, r5
   dbcbc:	f7ff fedb 	bl	dba76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dbcc0:	a801      	add	r0, sp, #4
   dbcc2:	f7f8 fc0d 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   dbcc6:	4620      	mov	r0, r4
   dbcc8:	b004      	add	sp, #16
   dbcca:	bd70      	pop	{r4, r5, r6, pc}
   dbccc:	000de2ec 	.word	0x000de2ec

000dbcd0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   dbcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbcd2:	460f      	mov	r7, r1
   dbcd4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dbcd6:	4926      	ldr	r1, [pc, #152]	; (dbd70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   dbcd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dbcda:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   dbcdc:	4616      	mov	r6, r2
   dbcde:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dbce0:	f001 fe93 	bl	dda0a <strcmp>
   dbce4:	bb00      	cbnz	r0, dbd28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   dbce6:	b1e4      	cbz	r4, dbd22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   dbce8:	4629      	mov	r1, r5
   dbcea:	4668      	mov	r0, sp
   dbcec:	f7ff fc8a 	bl	db604 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dbcf0:	4920      	ldr	r1, [pc, #128]	; (dbd74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dbcf2:	2024      	movs	r0, #36	; 0x24
   dbcf4:	f001 f9b0 	bl	dd058 <_ZnwjRKSt9nothrow_t>
   dbcf8:	4605      	mov	r5, r0
   dbcfa:	b170      	cbz	r0, dbd1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dbcfc:	4669      	mov	r1, sp
   dbcfe:	a803      	add	r0, sp, #12
   dbd00:	f7f8 fc2f 	bl	d4562 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dbd04:	aa03      	add	r2, sp, #12
   dbd06:	4631      	mov	r1, r6
   dbd08:	4628      	mov	r0, r5
   dbd0a:	f7ff ffc9 	bl	dbca0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dbd0e:	a803      	add	r0, sp, #12
   dbd10:	f7f8 fbe6 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   dbd14:	4b18      	ldr	r3, [pc, #96]	; (dbd78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   dbd16:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   dbd18:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dbd1a:	4668      	mov	r0, sp
   dbd1c:	f7f8 fbe0 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dbd20:	462c      	mov	r4, r5
}
   dbd22:	4620      	mov	r0, r4
   dbd24:	b007      	add	sp, #28
   dbd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   dbd28:	4914      	ldr	r1, [pc, #80]	; (dbd7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   dbd2a:	4638      	mov	r0, r7
   dbd2c:	f001 fe6d 	bl	dda0a <strcmp>
   dbd30:	b9e0      	cbnz	r0, dbd6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   dbd32:	2c00      	cmp	r4, #0
   dbd34:	d0f5      	beq.n	dbd22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dbd36:	4629      	mov	r1, r5
   dbd38:	4668      	mov	r0, sp
   dbd3a:	f7ff fc63 	bl	db604 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dbd3e:	490d      	ldr	r1, [pc, #52]	; (dbd74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dbd40:	2024      	movs	r0, #36	; 0x24
   dbd42:	f001 f989 	bl	dd058 <_ZnwjRKSt9nothrow_t>
   dbd46:	4605      	mov	r5, r0
   dbd48:	2800      	cmp	r0, #0
   dbd4a:	d0e6      	beq.n	dbd1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dbd4c:	4669      	mov	r1, sp
   dbd4e:	a803      	add	r0, sp, #12
   dbd50:	f7f8 fc07 	bl	d4562 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dbd54:	aa03      	add	r2, sp, #12
   dbd56:	4631      	mov	r1, r6
   dbd58:	4628      	mov	r0, r5
   dbd5a:	f7ff ffa1 	bl	dbca0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dbd5e:	a803      	add	r0, sp, #12
   dbd60:	f7f8 fbbe 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dbd64:	4b06      	ldr	r3, [pc, #24]	; (dbd80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   dbd66:	602b      	str	r3, [r5, #0]
   dbd68:	622c      	str	r4, [r5, #32]
}
   dbd6a:	e7d6      	b.n	dbd1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   dbd6c:	2400      	movs	r4, #0
   dbd6e:	e7d8      	b.n	dbd22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   dbd70:	000ded76 	.word	0x000ded76
   dbd74:	000def3c 	.word	0x000def3c
   dbd78:	000dee0c 	.word	0x000dee0c
   dbd7c:	000ded7a 	.word	0x000ded7a
   dbd80:	000dedf4 	.word	0x000dedf4

000dbd84 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   dbd84:	4b01      	ldr	r3, [pc, #4]	; (dbd8c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dbd86:	4a02      	ldr	r2, [pc, #8]	; (dbd90 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dbd88:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   dbd8a:	4770      	bx	lr
   dbd8c:	2003e588 	.word	0x2003e588
   dbd90:	000ded8b 	.word	0x000ded8b

000dbd94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dbd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbd98:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   dbd9a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dbd9e:	4604      	mov	r4, r0
   dbda0:	460e      	mov	r6, r1
   dbda2:	4617      	mov	r7, r2
   dbda4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   dbda6:	f000 ffdb 	bl	dcd60 <_Z16_fetch_usbserialv>
   dbdaa:	4581      	cmp	r9, r0
   dbdac:	d04c      	beq.n	dbe48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   dbdae:	792b      	ldrb	r3, [r5, #4]
   dbdb0:	0719      	lsls	r1, r3, #28
   dbdb2:	d504      	bpl.n	dbdbe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   dbdb4:	696a      	ldr	r2, [r5, #20]
   dbdb6:	4954      	ldr	r1, [pc, #336]	; (dbf08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   dbdb8:	4620      	mov	r0, r4
   dbdba:	f7ff fa7c 	bl	db2b6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   dbdbe:	f1b8 0f00 	cmp.w	r8, #0
   dbdc2:	d00d      	beq.n	dbde0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   dbdc4:	215b      	movs	r1, #91	; 0x5b
   dbdc6:	4620      	mov	r0, r4
   dbdc8:	f7ff fa69 	bl	db29e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   dbdcc:	4641      	mov	r1, r8
   dbdce:	4620      	mov	r0, r4
   dbdd0:	f7ff fa56 	bl	db280 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   dbdd4:	6823      	ldr	r3, [r4, #0]
   dbdd6:	494d      	ldr	r1, [pc, #308]	; (dbf0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   dbdd8:	68db      	ldr	r3, [r3, #12]
   dbdda:	2202      	movs	r2, #2
   dbddc:	4620      	mov	r0, r4
   dbdde:	4798      	blx	r3
    if (attr.has_file) {
   dbde0:	792b      	ldrb	r3, [r5, #4]
   dbde2:	07da      	lsls	r2, r3, #31
   dbde4:	d523      	bpl.n	dbe2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   dbde6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   dbdea:	212f      	movs	r1, #47	; 0x2f
   dbdec:	4640      	mov	r0, r8
   dbdee:	f001 fe69 	bl	ddac4 <strrchr>
    if (s1) {
   dbdf2:	b108      	cbz	r0, dbdf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   dbdf4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   dbdf8:	4641      	mov	r1, r8
   dbdfa:	4620      	mov	r0, r4
   dbdfc:	f7ff fa40 	bl	db280 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   dbe00:	792b      	ldrb	r3, [r5, #4]
   dbe02:	079b      	lsls	r3, r3, #30
   dbe04:	d508      	bpl.n	dbe18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   dbe06:	213a      	movs	r1, #58	; 0x3a
   dbe08:	4620      	mov	r0, r4
   dbe0a:	f7ff fa48 	bl	db29e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   dbe0e:	68ea      	ldr	r2, [r5, #12]
   dbe10:	493f      	ldr	r1, [pc, #252]	; (dbf10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   dbe12:	4620      	mov	r0, r4
   dbe14:	f7ff fa4f 	bl	db2b6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   dbe18:	792a      	ldrb	r2, [r5, #4]
   dbe1a:	6823      	ldr	r3, [r4, #0]
   dbe1c:	f012 0f04 	tst.w	r2, #4
   dbe20:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   dbe22:	bf14      	ite	ne
   dbe24:	493b      	ldrne	r1, [pc, #236]	; (dbf14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   dbe26:	493c      	ldreq	r1, [pc, #240]	; (dbf18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   dbe28:	2202      	movs	r2, #2
            write(": ", 2);
   dbe2a:	4620      	mov	r0, r4
   dbe2c:	4798      	blx	r3
    if (attr.has_function) {
   dbe2e:	792b      	ldrb	r3, [r5, #4]
   dbe30:	0758      	lsls	r0, r3, #29
   dbe32:	d51d      	bpl.n	dbe70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dbe34:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dbe36:	460b      	mov	r3, r1
   dbe38:	461a      	mov	r2, r3
    for (; *s; ++s) {
   dbe3a:	f813 0b01 	ldrb.w	r0, [r3], #1
   dbe3e:	b160      	cbz	r0, dbe5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   dbe40:	2820      	cmp	r0, #32
   dbe42:	d108      	bne.n	dbe56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   dbe44:	4619      	mov	r1, r3
   dbe46:	e7f7      	b.n	dbe38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   dbe48:	4834      	ldr	r0, [pc, #208]	; (dbf1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   dbe4a:	f000 f966 	bl	dc11a <_ZN5spark12NetworkClass9listeningEv>
   dbe4e:	2800      	cmp	r0, #0
   dbe50:	d0ad      	beq.n	dbdae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   dbe52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   dbe56:	2828      	cmp	r0, #40	; 0x28
   dbe58:	d1ee      	bne.n	dbe38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   dbe5a:	6823      	ldr	r3, [r4, #0]
   dbe5c:	1a52      	subs	r2, r2, r1
   dbe5e:	68db      	ldr	r3, [r3, #12]
   dbe60:	4620      	mov	r0, r4
   dbe62:	4798      	blx	r3
        write("(): ", 4);
   dbe64:	6823      	ldr	r3, [r4, #0]
   dbe66:	492e      	ldr	r1, [pc, #184]	; (dbf20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   dbe68:	68db      	ldr	r3, [r3, #12]
   dbe6a:	2204      	movs	r2, #4
   dbe6c:	4620      	mov	r0, r4
   dbe6e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   dbe70:	2100      	movs	r1, #0
   dbe72:	4638      	mov	r0, r7
   dbe74:	f7fe f932 	bl	da0dc <log_level_name>
   dbe78:	4601      	mov	r1, r0
    write(s);
   dbe7a:	4620      	mov	r0, r4
   dbe7c:	f7ff fa00 	bl	db280 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   dbe80:	6823      	ldr	r3, [r4, #0]
   dbe82:	4925      	ldr	r1, [pc, #148]	; (dbf18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   dbe84:	68db      	ldr	r3, [r3, #12]
   dbe86:	2202      	movs	r2, #2
   dbe88:	4620      	mov	r0, r4
   dbe8a:	4798      	blx	r3
    if (msg) {
   dbe8c:	b11e      	cbz	r6, dbe96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   dbe8e:	4631      	mov	r1, r6
   dbe90:	4620      	mov	r0, r4
   dbe92:	f7ff f9f5 	bl	db280 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   dbe96:	792b      	ldrb	r3, [r5, #4]
   dbe98:	f013 0f30 	tst.w	r3, #48	; 0x30
   dbe9c:	d02c      	beq.n	dbef8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   dbe9e:	6823      	ldr	r3, [r4, #0]
   dbea0:	4920      	ldr	r1, [pc, #128]	; (dbf24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   dbea2:	68db      	ldr	r3, [r3, #12]
   dbea4:	2202      	movs	r2, #2
   dbea6:	4620      	mov	r0, r4
   dbea8:	4798      	blx	r3
        if (attr.has_code) {
   dbeaa:	792b      	ldrb	r3, [r5, #4]
   dbeac:	06d9      	lsls	r1, r3, #27
   dbeae:	d50a      	bpl.n	dbec6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   dbeb0:	6823      	ldr	r3, [r4, #0]
   dbeb2:	491d      	ldr	r1, [pc, #116]	; (dbf28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   dbeb4:	68db      	ldr	r3, [r3, #12]
   dbeb6:	2207      	movs	r2, #7
   dbeb8:	4620      	mov	r0, r4
   dbeba:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   dbebc:	69aa      	ldr	r2, [r5, #24]
   dbebe:	491b      	ldr	r1, [pc, #108]	; (dbf2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   dbec0:	4620      	mov	r0, r4
   dbec2:	f7ff f9f8 	bl	db2b6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   dbec6:	792b      	ldrb	r3, [r5, #4]
   dbec8:	069a      	lsls	r2, r3, #26
   dbeca:	d511      	bpl.n	dbef0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   dbecc:	06db      	lsls	r3, r3, #27
   dbece:	d505      	bpl.n	dbedc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   dbed0:	6823      	ldr	r3, [r4, #0]
   dbed2:	4910      	ldr	r1, [pc, #64]	; (dbf14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   dbed4:	68db      	ldr	r3, [r3, #12]
   dbed6:	2202      	movs	r2, #2
   dbed8:	4620      	mov	r0, r4
   dbeda:	4798      	blx	r3
            write("details = ", 10);
   dbedc:	6823      	ldr	r3, [r4, #0]
   dbede:	4914      	ldr	r1, [pc, #80]	; (dbf30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   dbee0:	68db      	ldr	r3, [r3, #12]
   dbee2:	4620      	mov	r0, r4
   dbee4:	220a      	movs	r2, #10
   dbee6:	4798      	blx	r3
            write(attr.details);
   dbee8:	69e9      	ldr	r1, [r5, #28]
   dbeea:	4620      	mov	r0, r4
   dbeec:	f7ff f9c8 	bl	db280 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   dbef0:	215d      	movs	r1, #93	; 0x5d
   dbef2:	4620      	mov	r0, r4
   dbef4:	f7ff f9d3 	bl	db29e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   dbef8:	6823      	ldr	r3, [r4, #0]
   dbefa:	490e      	ldr	r1, [pc, #56]	; (dbf34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   dbefc:	68db      	ldr	r3, [r3, #12]
   dbefe:	4620      	mov	r0, r4
   dbf00:	2202      	movs	r2, #2
}
   dbf02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   dbf06:	4718      	bx	r3
   dbf08:	000ded8f 	.word	0x000ded8f
   dbf0c:	000ded96 	.word	0x000ded96
   dbf10:	000de1c2 	.word	0x000de1c2
   dbf14:	000ded99 	.word	0x000ded99
   dbf18:	000ded9e 	.word	0x000ded9e
   dbf1c:	2003e5b4 	.word	0x2003e5b4
   dbf20:	000ded9c 	.word	0x000ded9c
   dbf24:	000deda1 	.word	0x000deda1
   dbf28:	000deda4 	.word	0x000deda4
   dbf2c:	000dedac 	.word	0x000dedac
   dbf30:	000dedaf 	.word	0x000dedaf
   dbf34:	000dedba 	.word	0x000dedba

000dbf38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dbf38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbf3c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   dbf3e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dbf42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dbf44:	4605      	mov	r5, r0
   dbf46:	460f      	mov	r7, r1
   dbf48:	4690      	mov	r8, r2
   dbf4a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   dbf4c:	f000 ff08 	bl	dcd60 <_Z16_fetch_usbserialv>
   dbf50:	4581      	cmp	r9, r0
   dbf52:	d105      	bne.n	dbf60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   dbf54:	4849      	ldr	r0, [pc, #292]	; (dc07c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   dbf56:	f000 f8e0 	bl	dc11a <_ZN5spark12NetworkClass9listeningEv>
   dbf5a:	2800      	cmp	r0, #0
   dbf5c:	f040 808a 	bne.w	dc074 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   dbf60:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   dbf62:	4a47      	ldr	r2, [pc, #284]	; (dc080 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   dbf64:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   dbf66:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   dbf6a:	a801      	add	r0, sp, #4
        strm_(stream) {
   dbf6c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   dbf6e:	f88d 9008 	strb.w	r9, [sp, #8]
   dbf72:	f7ff f878 	bl	db066 <_ZN5spark10JSONWriter11beginObjectEv>
   dbf76:	4649      	mov	r1, r9
   dbf78:	4640      	mov	r0, r8
   dbf7a:	f7fe f8af 	bl	da0dc <log_level_name>
    json.name("l", 1).value(s);
   dbf7e:	4941      	ldr	r1, [pc, #260]	; (dc084 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   dbf80:	4680      	mov	r8, r0
   dbf82:	2201      	movs	r2, #1
   dbf84:	a801      	add	r0, sp, #4
   dbf86:	f7ff f8f7 	bl	db178 <_ZN5spark10JSONWriter4nameEPKcj>
   dbf8a:	4641      	mov	r1, r8
   dbf8c:	f7ff f96a 	bl	db264 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   dbf90:	b13f      	cbz	r7, dbfa2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   dbf92:	493d      	ldr	r1, [pc, #244]	; (dc088 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   dbf94:	2201      	movs	r2, #1
   dbf96:	a801      	add	r0, sp, #4
   dbf98:	f7ff f8ee 	bl	db178 <_ZN5spark10JSONWriter4nameEPKcj>
   dbf9c:	4639      	mov	r1, r7
   dbf9e:	f7ff f961 	bl	db264 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   dbfa2:	b13e      	cbz	r6, dbfb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   dbfa4:	4939      	ldr	r1, [pc, #228]	; (dc08c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   dbfa6:	2201      	movs	r2, #1
   dbfa8:	a801      	add	r0, sp, #4
   dbfaa:	f7ff f8e5 	bl	db178 <_ZN5spark10JSONWriter4nameEPKcj>
   dbfae:	4631      	mov	r1, r6
   dbfb0:	f7ff f958 	bl	db264 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   dbfb4:	7923      	ldrb	r3, [r4, #4]
   dbfb6:	07df      	lsls	r7, r3, #31
   dbfb8:	d50e      	bpl.n	dbfd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   dbfba:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   dbfbc:	212f      	movs	r1, #47	; 0x2f
   dbfbe:	4630      	mov	r0, r6
   dbfc0:	f001 fd80 	bl	ddac4 <strrchr>
    if (s1) {
   dbfc4:	b100      	cbz	r0, dbfc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   dbfc6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   dbfc8:	4931      	ldr	r1, [pc, #196]	; (dc090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   dbfca:	2201      	movs	r2, #1
   dbfcc:	a801      	add	r0, sp, #4
   dbfce:	f7ff f8d3 	bl	db178 <_ZN5spark10JSONWriter4nameEPKcj>
   dbfd2:	4631      	mov	r1, r6
   dbfd4:	f7ff f946 	bl	db264 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   dbfd8:	7923      	ldrb	r3, [r4, #4]
   dbfda:	079e      	lsls	r6, r3, #30
   dbfdc:	d507      	bpl.n	dbfee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   dbfde:	492d      	ldr	r1, [pc, #180]	; (dc094 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   dbfe0:	2202      	movs	r2, #2
   dbfe2:	a801      	add	r0, sp, #4
   dbfe4:	f7ff f8c8 	bl	db178 <_ZN5spark10JSONWriter4nameEPKcj>
   dbfe8:	68e1      	ldr	r1, [r4, #12]
   dbfea:	f7ff f849 	bl	db080 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   dbfee:	7923      	ldrb	r3, [r4, #4]
   dbff0:	0758      	lsls	r0, r3, #29
   dbff2:	d514      	bpl.n	dc01e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dbff4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dbff6:	4633      	mov	r3, r6
   dbff8:	461f      	mov	r7, r3
    for (; *s; ++s) {
   dbffa:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbffe:	b12a      	cbz	r2, dc00c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   dc000:	2a20      	cmp	r2, #32
   dc002:	d101      	bne.n	dc008 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   dc004:	461e      	mov	r6, r3
   dc006:	e7f7      	b.n	dbff8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   dc008:	2a28      	cmp	r2, #40	; 0x28
   dc00a:	d1f5      	bne.n	dbff8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   dc00c:	4922      	ldr	r1, [pc, #136]	; (dc098 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   dc00e:	2202      	movs	r2, #2
   dc010:	a801      	add	r0, sp, #4
   dc012:	f7ff f8b1 	bl	db178 <_ZN5spark10JSONWriter4nameEPKcj>
   dc016:	1bba      	subs	r2, r7, r6
   dc018:	4631      	mov	r1, r6
   dc01a:	f7ff f8bd 	bl	db198 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   dc01e:	7923      	ldrb	r3, [r4, #4]
   dc020:	0719      	lsls	r1, r3, #28
   dc022:	d507      	bpl.n	dc034 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   dc024:	491d      	ldr	r1, [pc, #116]	; (dc09c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   dc026:	2201      	movs	r2, #1
   dc028:	a801      	add	r0, sp, #4
   dc02a:	f7ff f8a5 	bl	db178 <_ZN5spark10JSONWriter4nameEPKcj>
   dc02e:	6961      	ldr	r1, [r4, #20]
   dc030:	f7ff f838 	bl	db0a4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   dc034:	7923      	ldrb	r3, [r4, #4]
   dc036:	06da      	lsls	r2, r3, #27
   dc038:	d508      	bpl.n	dc04c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   dc03a:	2204      	movs	r2, #4
   dc03c:	4918      	ldr	r1, [pc, #96]	; (dc0a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   dc03e:	eb0d 0002 	add.w	r0, sp, r2
   dc042:	f7ff f899 	bl	db178 <_ZN5spark10JSONWriter4nameEPKcj>
   dc046:	69a1      	ldr	r1, [r4, #24]
   dc048:	f7ff f81a 	bl	db080 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   dc04c:	7923      	ldrb	r3, [r4, #4]
   dc04e:	069b      	lsls	r3, r3, #26
   dc050:	d507      	bpl.n	dc062 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   dc052:	4914      	ldr	r1, [pc, #80]	; (dc0a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   dc054:	2206      	movs	r2, #6
   dc056:	a801      	add	r0, sp, #4
   dc058:	f7ff f88e 	bl	db178 <_ZN5spark10JSONWriter4nameEPKcj>
   dc05c:	69e1      	ldr	r1, [r4, #28]
   dc05e:	f7ff f901 	bl	db264 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   dc062:	a801      	add	r0, sp, #4
   dc064:	f7fe ffe9 	bl	db03a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   dc068:	6a28      	ldr	r0, [r5, #32]
   dc06a:	490f      	ldr	r1, [pc, #60]	; (dc0a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   dc06c:	6803      	ldr	r3, [r0, #0]
   dc06e:	2202      	movs	r2, #2
   dc070:	68db      	ldr	r3, [r3, #12]
   dc072:	4798      	blx	r3
}
   dc074:	b005      	add	sp, #20
   dc076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc07a:	bf00      	nop
   dc07c:	2003e5b4 	.word	0x2003e5b4
   dc080:	000deddc 	.word	0x000deddc
   dc084:	000ded6c 	.word	0x000ded6c
   dc088:	000de529 	.word	0x000de529
   dc08c:	000dedbd 	.word	0x000dedbd
   dc090:	000de01e 	.word	0x000de01e
   dc094:	000dedbf 	.word	0x000dedbf
   dc098:	000dedc2 	.word	0x000dedc2
   dc09c:	000ddf1c 	.word	0x000ddf1c
   dc0a0:	000dedc5 	.word	0x000dedc5
   dc0a4:	000dedca 	.word	0x000dedca
   dc0a8:	000dedba 	.word	0x000dedba

000dc0ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dc0ac:	2300      	movs	r3, #0
   dc0ae:	6840      	ldr	r0, [r0, #4]
   dc0b0:	461a      	mov	r2, r3
   dc0b2:	f7fe b8f3 	b.w	da29c <network_connect>

000dc0b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dc0b6:	6840      	ldr	r0, [r0, #4]
   dc0b8:	2200      	movs	r2, #0
   dc0ba:	2102      	movs	r1, #2
   dc0bc:	f7fe b8fe 	b.w	da2bc <network_disconnect>

000dc0c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dc0c0:	2200      	movs	r2, #0
   dc0c2:	6840      	ldr	r0, [r0, #4]
   dc0c4:	4611      	mov	r1, r2
   dc0c6:	f7fe b8f1 	b.w	da2ac <network_connecting>

000dc0ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dc0ca:	2200      	movs	r2, #0
   dc0cc:	6840      	ldr	r0, [r0, #4]
   dc0ce:	4611      	mov	r1, r2
   dc0d0:	f7fe b8fc 	b.w	da2cc <network_ready>

000dc0d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dc0d4:	2300      	movs	r3, #0
   dc0d6:	6840      	ldr	r0, [r0, #4]
   dc0d8:	461a      	mov	r2, r3
   dc0da:	4619      	mov	r1, r3
   dc0dc:	f7fe b8fe 	b.w	da2dc <network_on>

000dc0e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dc0e0:	2300      	movs	r3, #0
   dc0e2:	6840      	ldr	r0, [r0, #4]
   dc0e4:	461a      	mov	r2, r3
   dc0e6:	4619      	mov	r1, r3
   dc0e8:	f7fe b900 	b.w	da2ec <network_off>

000dc0ec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   dc0ec:	6840      	ldr	r0, [r0, #4]
   dc0ee:	2100      	movs	r1, #0
   dc0f0:	f7fe b924 	b.w	da33c <network_is_on>

000dc0f4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   dc0f4:	6840      	ldr	r0, [r0, #4]
   dc0f6:	2100      	movs	r1, #0
   dc0f8:	f7fe b928 	b.w	da34c <network_is_off>

000dc0fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dc0fc:	6840      	ldr	r0, [r0, #4]
   dc0fe:	2200      	movs	r2, #0
   dc100:	f081 0101 	eor.w	r1, r1, #1
   dc104:	f7fe b8fa 	b.w	da2fc <network_listen>

000dc108 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dc108:	6840      	ldr	r0, [r0, #4]
   dc10a:	2200      	movs	r2, #0
   dc10c:	f7fe b906 	b.w	da31c <network_set_listen_timeout>

000dc110 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dc110:	2200      	movs	r2, #0
   dc112:	6840      	ldr	r0, [r0, #4]
   dc114:	4611      	mov	r1, r2
   dc116:	f7fe b909 	b.w	da32c <network_get_listen_timeout>

000dc11a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dc11a:	2200      	movs	r2, #0
   dc11c:	6840      	ldr	r0, [r0, #4]
   dc11e:	4611      	mov	r1, r2
   dc120:	f7fe b8f4 	b.w	da30c <network_listening>

000dc124 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dc124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dc128:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   dc12a:	b095      	sub	sp, #84	; 0x54
   dc12c:	4616      	mov	r6, r2
   dc12e:	460d      	mov	r5, r1
   dc130:	4607      	mov	r7, r0
    IPAddress addr;
   dc132:	f7fe fe23 	bl	dad7c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   dc136:	4621      	mov	r1, r4
   dc138:	2218      	movs	r2, #24
   dc13a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   dc13c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dc13e:	f001 fbed 	bl	dd91c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dc142:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   dc144:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dc148:	4621      	mov	r1, r4
   dc14a:	466b      	mov	r3, sp
   dc14c:	aa0c      	add	r2, sp, #48	; 0x30
   dc14e:	4630      	mov	r0, r6
   dc150:	f7fd fe6c 	bl	d9e2c <netdb_getaddrinfo>
    if (!r) {
   dc154:	4604      	mov	r4, r0
   dc156:	2800      	cmp	r0, #0
   dc158:	d146      	bne.n	dc1e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dc15a:	4602      	mov	r2, r0
   dc15c:	2101      	movs	r1, #1
   dc15e:	6868      	ldr	r0, [r5, #4]
   dc160:	f7fe f8b4 	bl	da2cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dc164:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dc166:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dc168:	4622      	mov	r2, r4
   dc16a:	6868      	ldr	r0, [r5, #4]
   dc16c:	f7fe f8ae 	bl	da2cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dc170:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dc172:	4681      	mov	r9, r0
        bool ok = false;
   dc174:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dc176:	2e00      	cmp	r6, #0
   dc178:	d036      	beq.n	dc1e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   dc17a:	2900      	cmp	r1, #0
   dc17c:	d134      	bne.n	dc1e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dc17e:	6873      	ldr	r3, [r6, #4]
   dc180:	2b02      	cmp	r3, #2
   dc182:	d003      	beq.n	dc18c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   dc184:	2b0a      	cmp	r3, #10
   dc186:	d00b      	beq.n	dc1a0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dc188:	69f6      	ldr	r6, [r6, #28]
   dc18a:	e7f4      	b.n	dc176 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   dc18c:	f1b8 0f00 	cmp.w	r8, #0
   dc190:	d004      	beq.n	dc19c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dc192:	6971      	ldr	r1, [r6, #20]
   dc194:	4638      	mov	r0, r7
   dc196:	3104      	adds	r1, #4
   dc198:	f7fe fe1d 	bl	dadd6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   dc19c:	4641      	mov	r1, r8
   dc19e:	e7f3      	b.n	dc188 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   dc1a0:	f1b9 0f00 	cmp.w	r9, #0
   dc1a4:	d101      	bne.n	dc1aa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   dc1a6:	4649      	mov	r1, r9
   dc1a8:	e7ee      	b.n	dc188 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dc1aa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dc1ac:	2210      	movs	r2, #16
   dc1ae:	a801      	add	r0, sp, #4
   dc1b0:	f001 fbb4 	bl	dd91c <memset>
                    a.v = 6;
   dc1b4:	2306      	movs	r3, #6
   dc1b6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dc1ba:	ad01      	add	r5, sp, #4
   dc1bc:	f104 0308 	add.w	r3, r4, #8
   dc1c0:	3418      	adds	r4, #24
   dc1c2:	6818      	ldr	r0, [r3, #0]
   dc1c4:	6859      	ldr	r1, [r3, #4]
   dc1c6:	462a      	mov	r2, r5
   dc1c8:	c203      	stmia	r2!, {r0, r1}
   dc1ca:	3308      	adds	r3, #8
   dc1cc:	42a3      	cmp	r3, r4
   dc1ce:	4615      	mov	r5, r2
   dc1d0:	d1f7      	bne.n	dc1c2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   dc1d2:	a901      	add	r1, sp, #4
   dc1d4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   dc1d6:	ad07      	add	r5, sp, #28
   dc1d8:	f7fe fdde 	bl	dad98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dc1dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc1de:	1d3c      	adds	r4, r7, #4
   dc1e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc1e2:	682b      	ldr	r3, [r5, #0]
   dc1e4:	7023      	strb	r3, [r4, #0]
   dc1e6:	e7de      	b.n	dc1a6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dc1e8:	9800      	ldr	r0, [sp, #0]
   dc1ea:	f7fd fe17 	bl	d9e1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dc1ee:	4638      	mov	r0, r7
   dc1f0:	b015      	add	sp, #84	; 0x54
   dc1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000dc1f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dc1f8:	4b02      	ldr	r3, [pc, #8]	; (dc204 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dc1fa:	4a03      	ldr	r2, [pc, #12]	; (dc208 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dc1fc:	601a      	str	r2, [r3, #0]
   dc1fe:	2200      	movs	r2, #0
   dc200:	605a      	str	r2, [r3, #4]

} // spark
   dc202:	4770      	bx	lr
   dc204:	2003e5b4 	.word	0x2003e5b4
   dc208:	000dee54 	.word	0x000dee54

000dc20c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dc20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc20e:	4606      	mov	r6, r0
   dc210:	460d      	mov	r5, r1
  size_t n = 0;
   dc212:	188f      	adds	r7, r1, r2
   dc214:	2400      	movs	r4, #0
  while (size--) {
   dc216:	42bd      	cmp	r5, r7
   dc218:	d00c      	beq.n	dc234 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dc21a:	6833      	ldr	r3, [r6, #0]
   dc21c:	f815 1b01 	ldrb.w	r1, [r5], #1
   dc220:	689b      	ldr	r3, [r3, #8]
   dc222:	4630      	mov	r0, r6
   dc224:	4798      	blx	r3
     if (chunk>=0)
   dc226:	1e03      	subs	r3, r0, #0
   dc228:	db01      	blt.n	dc22e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dc22a:	441c      	add	r4, r3
  while (size--) {
   dc22c:	e7f3      	b.n	dc216 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dc22e:	2c00      	cmp	r4, #0
   dc230:	bf08      	it	eq
   dc232:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   dc234:	4620      	mov	r0, r4
   dc236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc238 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   dc238:	b513      	push	{r0, r1, r4, lr}
   dc23a:	4604      	mov	r4, r0
    }
   dc23c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   dc23e:	b159      	cbz	r1, dc258 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   dc240:	9101      	str	r1, [sp, #4]
   dc242:	f001 fc12 	bl	dda6a <strlen>
   dc246:	6823      	ldr	r3, [r4, #0]
   dc248:	9901      	ldr	r1, [sp, #4]
   dc24a:	68db      	ldr	r3, [r3, #12]
   dc24c:	4602      	mov	r2, r0
   dc24e:	4620      	mov	r0, r4
    }
   dc250:	b002      	add	sp, #8
   dc252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   dc256:	4718      	bx	r3
    }
   dc258:	b002      	add	sp, #8
   dc25a:	bd10      	pop	{r4, pc}

000dc25c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   dc25c:	b508      	push	{r3, lr}
  return write(str);
   dc25e:	f7ff ffeb 	bl	dc238 <_ZN5Print5writeEPKc>
}
   dc262:	bd08      	pop	{r3, pc}

000dc264 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   dc264:	6803      	ldr	r3, [r0, #0]
   dc266:	689b      	ldr	r3, [r3, #8]
   dc268:	4718      	bx	r3

000dc26a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dc26a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dc26c:	210d      	movs	r1, #13
{
   dc26e:	4605      	mov	r5, r0
  size_t n = print('\r');
   dc270:	f7ff fff8 	bl	dc264 <_ZN5Print5printEc>
  n += print('\n');
   dc274:	210a      	movs	r1, #10
  size_t n = print('\r');
   dc276:	4604      	mov	r4, r0
  n += print('\n');
   dc278:	4628      	mov	r0, r5
   dc27a:	f7ff fff3 	bl	dc264 <_ZN5Print5printEc>
  return n;
}
   dc27e:	4420      	add	r0, r4
   dc280:	bd38      	pop	{r3, r4, r5, pc}

000dc282 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dc282:	b530      	push	{r4, r5, lr}
   dc284:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dc286:	2300      	movs	r3, #0
   dc288:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dc28c:	2a01      	cmp	r2, #1
   dc28e:	bf98      	it	ls
   dc290:	220a      	movls	r2, #10
   dc292:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   dc294:	460d      	mov	r5, r1
   dc296:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   dc29a:	fb01 5312 	mls	r3, r1, r2, r5
   dc29e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dc2a2:	2b09      	cmp	r3, #9
   dc2a4:	bf94      	ite	ls
   dc2a6:	3330      	addls	r3, #48	; 0x30
   dc2a8:	3337      	addhi	r3, #55	; 0x37
   dc2aa:	b2db      	uxtb	r3, r3
  } while(n);
   dc2ac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dc2ae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   dc2b2:	d9ef      	bls.n	dc294 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   dc2b4:	4621      	mov	r1, r4
   dc2b6:	f7ff ffbf 	bl	dc238 <_ZN5Print5writeEPKc>
}
   dc2ba:	b00b      	add	sp, #44	; 0x2c
   dc2bc:	bd30      	pop	{r4, r5, pc}

000dc2be <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   dc2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc2c2:	b086      	sub	sp, #24
   dc2c4:	af00      	add	r7, sp, #0
   dc2c6:	4605      	mov	r5, r0
   dc2c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   dc2ca:	1d38      	adds	r0, r7, #4
   dc2cc:	2114      	movs	r1, #20
{
   dc2ce:	4614      	mov	r4, r2
    va_copy(args2, args);
   dc2d0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   dc2d2:	f7fe f873 	bl	da3bc <vsnprintf>

    if (n<bufsize)
   dc2d6:	2813      	cmp	r0, #19
   dc2d8:	d80e      	bhi.n	dc2f8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   dc2da:	1d39      	adds	r1, r7, #4
   dc2dc:	4628      	mov	r0, r5
   dc2de:	f7ff ffab 	bl	dc238 <_ZN5Print5writeEPKc>
   dc2e2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   dc2e4:	b11e      	cbz	r6, dc2ee <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   dc2e6:	4628      	mov	r0, r5
   dc2e8:	f7ff ffbf 	bl	dc26a <_ZN5Print7printlnEv>
   dc2ec:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   dc2ee:	4620      	mov	r0, r4
   dc2f0:	3718      	adds	r7, #24
   dc2f2:	46bd      	mov	sp, r7
   dc2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   dc2f8:	f100 0308 	add.w	r3, r0, #8
   dc2fc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   dc300:	46e8      	mov	r8, sp
        char bigger[n+1];
   dc302:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   dc306:	4622      	mov	r2, r4
   dc308:	1c41      	adds	r1, r0, #1
   dc30a:	683b      	ldr	r3, [r7, #0]
   dc30c:	4668      	mov	r0, sp
   dc30e:	f7fe f855 	bl	da3bc <vsnprintf>
  return write(str);
   dc312:	4669      	mov	r1, sp
   dc314:	4628      	mov	r0, r5
   dc316:	f7ff ff8f 	bl	dc238 <_ZN5Print5writeEPKc>
   dc31a:	4604      	mov	r4, r0
   dc31c:	46c5      	mov	sp, r8
   dc31e:	e7e1      	b.n	dc2e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000dc320 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   dc320:	b510      	push	{r4, lr}
  if (0 == max) {
   dc322:	4604      	mov	r4, r0
   dc324:	b128      	cbz	r0, dc332 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   dc326:	f001 fb25 	bl	dd974 <rand>
   dc32a:	fb90 f3f4 	sdiv	r3, r0, r4
   dc32e:	fb03 0414 	mls	r4, r3, r4, r0
}
   dc332:	4620      	mov	r0, r4
   dc334:	bd10      	pop	{r4, pc}

000dc336 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   dc336:	4288      	cmp	r0, r1
{
   dc338:	b510      	push	{r4, lr}
   dc33a:	4604      	mov	r4, r0
  if (min >= max) {
   dc33c:	da03      	bge.n	dc346 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   dc33e:	1a08      	subs	r0, r1, r0
   dc340:	f7ff ffee 	bl	dc320 <_Z6randomi>
   dc344:	4404      	add	r4, r0
}
   dc346:	4620      	mov	r0, r4
   dc348:	bd10      	pop	{r4, pc}
	...

000dc34c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   dc34c:	4b01      	ldr	r3, [pc, #4]	; (dc354 <_GLOBAL__sub_I_RGB+0x8>)
   dc34e:	2200      	movs	r2, #0
   dc350:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   dc352:	4770      	bx	lr
   dc354:	2003e5bc 	.word	0x2003e5bc

000dc358 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   dc358:	2100      	movs	r1, #0
   dc35a:	f7fd bda7 	b.w	d9eac <hal_spi_acquire>

000dc35e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   dc35e:	2100      	movs	r1, #0
   dc360:	f7fd bdac 	b.w	d9ebc <hal_spi_release>

000dc364 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   dc364:	b510      	push	{r4, lr}
   dc366:	4604      	mov	r4, r0
   dc368:	4608      	mov	r0, r1
{
    _spi = spi;
   dc36a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   dc36c:	f7fd fd7e 	bl	d9e6c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dc370:	2300      	movs	r3, #0
   dc372:	6063      	str	r3, [r4, #4]
}
   dc374:	4620      	mov	r0, r4
   dc376:	bd10      	pop	{r4, pc}

000dc378 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   dc378:	b510      	push	{r4, lr}
   dc37a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   dc37c:	7800      	ldrb	r0, [r0, #0]
   dc37e:	f7ff ffeb 	bl	dc358 <_ZN8SPIClass4lockEv.isra.0>
   dc382:	b948      	cbnz	r0, dc398 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   dc384:	7820      	ldrb	r0, [r4, #0]
   dc386:	f64f 71ff 	movw	r1, #65535	; 0xffff
   dc38a:	f7fd fd57 	bl	d9e3c <hal_spi_begin>
        unlock();
   dc38e:	7820      	ldrb	r0, [r4, #0]
    }
}
   dc390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dc394:	f7ff bfe3 	b.w	dc35e <_ZN8SPIClass6unlockEv.isra.0>
}
   dc398:	bd10      	pop	{r4, pc}

000dc39a <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   dc39a:	b510      	push	{r4, lr}
   dc39c:	4604      	mov	r4, r0
    if (!lock())
   dc39e:	7800      	ldrb	r0, [r0, #0]
   dc3a0:	f7ff ffda 	bl	dc358 <_ZN8SPIClass4lockEv.isra.0>
   dc3a4:	b938      	cbnz	r0, dc3b6 <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   dc3a6:	7820      	ldrb	r0, [r4, #0]
   dc3a8:	f7fd fd50 	bl	d9e4c <hal_spi_end>
        unlock();
   dc3ac:	7820      	ldrb	r0, [r4, #0]
    }
}
   dc3ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dc3b2:	f7ff bfd4 	b.w	dc35e <_ZN8SPIClass6unlockEv.isra.0>
}
   dc3b6:	bd10      	pop	{r4, pc}

000dc3b8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   dc3b8:	7800      	ldrb	r0, [r0, #0]
   dc3ba:	f7ff bfd0 	b.w	dc35e <_ZN8SPIClass6unlockEv.isra.0>
	...

000dc3c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   dc3c0:	0840      	lsrs	r0, r0, #1
{
   dc3c2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   dc3c4:	6018      	str	r0, [r3, #0]
   dc3c6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   dc3c8:	6818      	ldr	r0, [r3, #0]
   dc3ca:	4288      	cmp	r0, r1
   dc3cc:	b2e5      	uxtb	r5, r4
   dc3ce:	d906      	bls.n	dc3de <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   dc3d0:	3401      	adds	r4, #1
   dc3d2:	2c08      	cmp	r4, #8
   dc3d4:	d002      	beq.n	dc3dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   dc3d6:	0840      	lsrs	r0, r0, #1
   dc3d8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   dc3da:	e7f5      	b.n	dc3c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   dc3dc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   dc3de:	4b02      	ldr	r3, [pc, #8]	; (dc3e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   dc3e0:	5d5b      	ldrb	r3, [r3, r5]
   dc3e2:	7013      	strb	r3, [r2, #0]
}
   dc3e4:	bd30      	pop	{r4, r5, pc}
   dc3e6:	bf00      	nop
   dc3e8:	000dee88 	.word	0x000dee88

000dc3ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   dc3ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc3f0:	4606      	mov	r6, r0
   dc3f2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   dc3f4:	7800      	ldrb	r0, [r0, #0]
{
   dc3f6:	460c      	mov	r4, r1
    CHECK(lock());
   dc3f8:	f7ff ffae 	bl	dc358 <_ZN8SPIClass4lockEv.isra.0>
   dc3fc:	2800      	cmp	r0, #0
   dc3fe:	db1b      	blt.n	dc438 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   dc400:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   dc402:	2214      	movs	r2, #20
   dc404:	2100      	movs	r1, #0
   dc406:	a809      	add	r0, sp, #36	; 0x24
   dc408:	f001 fa88 	bl	dd91c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   dc40c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   dc40e:	2200      	movs	r2, #0
   dc410:	a909      	add	r1, sp, #36	; 0x24
   dc412:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   dc414:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   dc418:	f7fd fd38 	bl	d9e8c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   dc41c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   dc420:	b113      	cbz	r3, dc428 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   dc422:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   dc426:	b155      	cbz	r5, dc43e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   dc428:	2700      	movs	r7, #0
   dc42a:	46b9      	mov	r9, r7
   dc42c:	46b8      	mov	r8, r7
   dc42e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   dc430:	7923      	ldrb	r3, [r4, #4]
   dc432:	b15d      	cbz	r5, dc44c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   dc434:	b1c3      	cbz	r3, dc468 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   dc436:	2000      	movs	r0, #0
}
   dc438:	b00f      	add	sp, #60	; 0x3c
   dc43a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   dc43e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dc442:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   dc446:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   dc44a:	e7f1      	b.n	dc430 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   dc44c:	2b00      	cmp	r3, #0
   dc44e:	d135      	bne.n	dc4bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   dc450:	68a3      	ldr	r3, [r4, #8]
   dc452:	4543      	cmp	r3, r8
   dc454:	d108      	bne.n	dc468 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   dc456:	f88d 9020 	strb.w	r9, [sp, #32]
   dc45a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   dc45e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dc462:	89a3      	ldrh	r3, [r4, #12]
   dc464:	429a      	cmp	r2, r3
   dc466:	d0e6      	beq.n	dc436 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   dc468:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   dc46a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   dc46c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   dc470:	980a      	ldr	r0, [sp, #40]	; 0x28
   dc472:	ab04      	add	r3, sp, #16
   dc474:	f10d 020f 	add.w	r2, sp, #15
   dc478:	f7ff ffa2 	bl	dc3c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   dc47c:	7921      	ldrb	r1, [r4, #4]
   dc47e:	b985      	cbnz	r5, dc4a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   dc480:	b989      	cbnz	r1, dc4a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   dc482:	68a3      	ldr	r3, [r4, #8]
   dc484:	4543      	cmp	r3, r8
   dc486:	d30e      	bcc.n	dc4a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   dc488:	f88d 9020 	strb.w	r9, [sp, #32]
   dc48c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   dc490:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dc494:	89a3      	ldrh	r3, [r4, #12]
   dc496:	429a      	cmp	r2, r3
   dc498:	d105      	bne.n	dc4a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   dc49a:	9b04      	ldr	r3, [sp, #16]
   dc49c:	4543      	cmp	r3, r8
   dc49e:	d102      	bne.n	dc4a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   dc4a0:	e7c9      	b.n	dc436 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   dc4a2:	2900      	cmp	r1, #0
   dc4a4:	d1f9      	bne.n	dc49a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   dc4a6:	2300      	movs	r3, #0
   dc4a8:	9301      	str	r3, [sp, #4]
   dc4aa:	7b63      	ldrb	r3, [r4, #13]
   dc4ac:	9300      	str	r3, [sp, #0]
   dc4ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   dc4b2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   dc4b4:	7830      	ldrb	r0, [r6, #0]
   dc4b6:	f7fd fcf1 	bl	d9e9c <hal_spi_set_settings>
   dc4ba:	e7bc      	b.n	dc436 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   dc4bc:	e9cd 5500 	strd	r5, r5, [sp]
   dc4c0:	462b      	mov	r3, r5
   dc4c2:	462a      	mov	r2, r5
   dc4c4:	2101      	movs	r1, #1
   dc4c6:	e7f5      	b.n	dc4b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000dc4c8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   dc4c8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   dc4ca:	7800      	ldrb	r0, [r0, #0]
   dc4cc:	f7fd fcc6 	bl	d9e5c <hal_spi_transfer>
}
   dc4d0:	b2c0      	uxtb	r0, r0
   dc4d2:	bd08      	pop	{r3, pc}

000dc4d4 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   dc4d4:	4770      	bx	lr

000dc4d6 <_ZN8SPIClass15detachInterruptEv>:
   dc4d6:	4770      	bx	lr

000dc4d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dc4d8:	b510      	push	{r4, lr}
   dc4da:	4604      	mov	r4, r0
{
	free(buffer);
   dc4dc:	6800      	ldr	r0, [r0, #0]
   dc4de:	f7fd ff45 	bl	da36c <free>
}
   dc4e2:	4620      	mov	r0, r4
   dc4e4:	bd10      	pop	{r4, pc}

000dc4e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dc4e6:	b510      	push	{r4, lr}
   dc4e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dc4ea:	6800      	ldr	r0, [r0, #0]
   dc4ec:	b108      	cbz	r0, dc4f2 <_ZN6String10invalidateEv+0xc>
   dc4ee:	f7fd ff3d 	bl	da36c <free>
	buffer = NULL;
   dc4f2:	2300      	movs	r3, #0
	capacity = len = 0;
   dc4f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   dc4f8:	6023      	str	r3, [r4, #0]
}
   dc4fa:	bd10      	pop	{r4, pc}

000dc4fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dc4fc:	b538      	push	{r3, r4, r5, lr}
   dc4fe:	4604      	mov	r4, r0
   dc500:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dc502:	6800      	ldr	r0, [r0, #0]
   dc504:	3101      	adds	r1, #1
   dc506:	f7fd ff39 	bl	da37c <realloc>
	if (newbuffer) {
   dc50a:	b110      	cbz	r0, dc512 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dc50c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   dc510:	2001      	movs	r0, #1
	}
	return 0;
}
   dc512:	bd38      	pop	{r3, r4, r5, pc}

000dc514 <_ZN6String7reserveEj>:
{
   dc514:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dc516:	6803      	ldr	r3, [r0, #0]
{
   dc518:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dc51a:	b123      	cbz	r3, dc526 <_ZN6String7reserveEj+0x12>
   dc51c:	6843      	ldr	r3, [r0, #4]
   dc51e:	428b      	cmp	r3, r1
   dc520:	d301      	bcc.n	dc526 <_ZN6String7reserveEj+0x12>
   dc522:	2001      	movs	r0, #1
}
   dc524:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   dc526:	4620      	mov	r0, r4
   dc528:	f7ff ffe8 	bl	dc4fc <_ZN6String12changeBufferEj>
   dc52c:	2800      	cmp	r0, #0
   dc52e:	d0f9      	beq.n	dc524 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   dc530:	68a3      	ldr	r3, [r4, #8]
   dc532:	2b00      	cmp	r3, #0
   dc534:	d1f5      	bne.n	dc522 <_ZN6String7reserveEj+0xe>
   dc536:	6822      	ldr	r2, [r4, #0]
   dc538:	7013      	strb	r3, [r2, #0]
   dc53a:	e7f2      	b.n	dc522 <_ZN6String7reserveEj+0xe>

000dc53c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dc53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc53e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   dc540:	4611      	mov	r1, r2
   dc542:	9201      	str	r2, [sp, #4]
{
   dc544:	4604      	mov	r4, r0
	if (!reserve(length)) {
   dc546:	f7ff ffe5 	bl	dc514 <_ZN6String7reserveEj>
   dc54a:	9a01      	ldr	r2, [sp, #4]
   dc54c:	b928      	cbnz	r0, dc55a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   dc54e:	4620      	mov	r0, r4
   dc550:	f7ff ffc9 	bl	dc4e6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   dc554:	4620      	mov	r0, r4
   dc556:	b003      	add	sp, #12
   dc558:	bd30      	pop	{r4, r5, pc}
	len = length;
   dc55a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   dc55c:	4629      	mov	r1, r5
   dc55e:	6820      	ldr	r0, [r4, #0]
   dc560:	f001 f9b4 	bl	dd8cc <memcpy>
	buffer[len] = 0;
   dc564:	6822      	ldr	r2, [r4, #0]
   dc566:	68a3      	ldr	r3, [r4, #8]
   dc568:	2100      	movs	r1, #0
   dc56a:	54d1      	strb	r1, [r2, r3]
	return *this;
   dc56c:	e7f2      	b.n	dc554 <_ZN6String4copyEPKcj+0x18>

000dc56e <_ZN6StringC1EPKc>:
	buffer = NULL;
   dc56e:	2300      	movs	r3, #0
String::String(const char *cstr)
   dc570:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   dc572:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   dc576:	4604      	mov	r4, r0
	len = 0;
   dc578:	6083      	str	r3, [r0, #8]
	flags = 0;
   dc57a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   dc57c:	b141      	cbz	r1, dc590 <_ZN6StringC1EPKc+0x22>
   dc57e:	4608      	mov	r0, r1
   dc580:	9101      	str	r1, [sp, #4]
   dc582:	f001 fa72 	bl	dda6a <strlen>
   dc586:	9901      	ldr	r1, [sp, #4]
   dc588:	4602      	mov	r2, r0
   dc58a:	4620      	mov	r0, r4
   dc58c:	f7ff ffd6 	bl	dc53c <_ZN6String4copyEPKcj>
}
   dc590:	4620      	mov	r0, r4
   dc592:	b002      	add	sp, #8
   dc594:	bd10      	pop	{r4, pc}

000dc596 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dc596:	b538      	push	{r3, r4, r5, lr}
   dc598:	4605      	mov	r5, r0
	if (buffer) {
   dc59a:	6800      	ldr	r0, [r0, #0]
{
   dc59c:	460c      	mov	r4, r1
	if (buffer) {
   dc59e:	b168      	cbz	r0, dc5bc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   dc5a0:	686a      	ldr	r2, [r5, #4]
   dc5a2:	688b      	ldr	r3, [r1, #8]
   dc5a4:	429a      	cmp	r2, r3
   dc5a6:	d307      	bcc.n	dc5b8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   dc5a8:	6809      	ldr	r1, [r1, #0]
   dc5aa:	f001 fa38 	bl	dda1e <strcpy>
			len = rhs.len;
   dc5ae:	68a3      	ldr	r3, [r4, #8]
   dc5b0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dc5b2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   dc5b4:	60a3      	str	r3, [r4, #8]
}
   dc5b6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   dc5b8:	f7fd fed8 	bl	da36c <free>
	buffer = rhs.buffer;
   dc5bc:	6823      	ldr	r3, [r4, #0]
   dc5be:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dc5c0:	6863      	ldr	r3, [r4, #4]
   dc5c2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dc5c4:	68a3      	ldr	r3, [r4, #8]
   dc5c6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dc5c8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   dc5ca:	e9c4 3300 	strd	r3, r3, [r4]
   dc5ce:	e7f1      	b.n	dc5b4 <_ZN6String4moveERS_+0x1e>

000dc5d0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   dc5d0:	b510      	push	{r4, lr}
	buffer = NULL;
   dc5d2:	2300      	movs	r3, #0
	capacity = 0;
   dc5d4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   dc5d8:	4604      	mov	r4, r0
	len = 0;
   dc5da:	6083      	str	r3, [r0, #8]
	flags = 0;
   dc5dc:	7303      	strb	r3, [r0, #12]
	move(rval);
   dc5de:	f7ff ffda 	bl	dc596 <_ZN6String4moveERS_>
}
   dc5e2:	4620      	mov	r0, r4
   dc5e4:	bd10      	pop	{r4, pc}

000dc5e6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dc5e6:	4288      	cmp	r0, r1
{
   dc5e8:	b510      	push	{r4, lr}
   dc5ea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dc5ec:	d005      	beq.n	dc5fa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dc5ee:	680b      	ldr	r3, [r1, #0]
   dc5f0:	b12b      	cbz	r3, dc5fe <_ZN6StringaSERKS_+0x18>
   dc5f2:	688a      	ldr	r2, [r1, #8]
   dc5f4:	4619      	mov	r1, r3
   dc5f6:	f7ff ffa1 	bl	dc53c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dc5fa:	4620      	mov	r0, r4
   dc5fc:	bd10      	pop	{r4, pc}
	else invalidate();
   dc5fe:	f7ff ff72 	bl	dc4e6 <_ZN6String10invalidateEv>
   dc602:	e7fa      	b.n	dc5fa <_ZN6StringaSERKS_+0x14>

000dc604 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   dc604:	b510      	push	{r4, lr}
	buffer = NULL;
   dc606:	2300      	movs	r3, #0
String::String(const String &value)
   dc608:	4604      	mov	r4, r0
	capacity = 0;
   dc60a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   dc60e:	6083      	str	r3, [r0, #8]
	flags = 0;
   dc610:	7303      	strb	r3, [r0, #12]
	*this = value;
   dc612:	f7ff ffe8 	bl	dc5e6 <_ZN6StringaSERKS_>
}
   dc616:	4620      	mov	r0, r4
   dc618:	bd10      	pop	{r4, pc}

000dc61a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dc61a:	4288      	cmp	r0, r1
{
   dc61c:	b510      	push	{r4, lr}
   dc61e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dc620:	d001      	beq.n	dc626 <_ZN6StringaSEOS_+0xc>
   dc622:	f7ff ffb8 	bl	dc596 <_ZN6String4moveERS_>
	return *this;
}
   dc626:	4620      	mov	r0, r4
   dc628:	bd10      	pop	{r4, pc}

000dc62a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dc62a:	b513      	push	{r0, r1, r4, lr}
   dc62c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   dc62e:	b159      	cbz	r1, dc648 <_ZN6StringaSEPKc+0x1e>
   dc630:	4608      	mov	r0, r1
   dc632:	9101      	str	r1, [sp, #4]
   dc634:	f001 fa19 	bl	dda6a <strlen>
   dc638:	9901      	ldr	r1, [sp, #4]
   dc63a:	4602      	mov	r2, r0
   dc63c:	4620      	mov	r0, r4
   dc63e:	f7ff ff7d 	bl	dc53c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dc642:	4620      	mov	r0, r4
   dc644:	b002      	add	sp, #8
   dc646:	bd10      	pop	{r4, pc}
	else invalidate();
   dc648:	f7ff ff4d 	bl	dc4e6 <_ZN6String10invalidateEv>
   dc64c:	e7f9      	b.n	dc642 <_ZN6StringaSEPKc+0x18>

000dc64e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dc64e:	b570      	push	{r4, r5, r6, lr}
   dc650:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dc652:	460e      	mov	r6, r1
   dc654:	b909      	cbnz	r1, dc65a <_ZN6String6concatEPKcj+0xc>
   dc656:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dc658:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dc65a:	b16a      	cbz	r2, dc678 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   dc65c:	6884      	ldr	r4, [r0, #8]
   dc65e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   dc660:	4621      	mov	r1, r4
   dc662:	f7ff ff57 	bl	dc514 <_ZN6String7reserveEj>
   dc666:	2800      	cmp	r0, #0
   dc668:	d0f5      	beq.n	dc656 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dc66a:	6828      	ldr	r0, [r5, #0]
   dc66c:	68ab      	ldr	r3, [r5, #8]
   dc66e:	4631      	mov	r1, r6
   dc670:	4418      	add	r0, r3
   dc672:	f001 f9d4 	bl	dda1e <strcpy>
	len = newlen;
   dc676:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dc678:	2001      	movs	r0, #1
   dc67a:	e7ed      	b.n	dc658 <_ZN6String6concatEPKcj+0xa>

000dc67c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dc67c:	b513      	push	{r0, r1, r4, lr}
   dc67e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   dc680:	4608      	mov	r0, r1
	if (!cstr) return 0;
   dc682:	b151      	cbz	r1, dc69a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   dc684:	9101      	str	r1, [sp, #4]
   dc686:	f001 f9f0 	bl	dda6a <strlen>
   dc68a:	9901      	ldr	r1, [sp, #4]
   dc68c:	4602      	mov	r2, r0
   dc68e:	4620      	mov	r0, r4
}
   dc690:	b002      	add	sp, #8
   dc692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   dc696:	f7ff bfda 	b.w	dc64e <_ZN6String6concatEPKcj>
}
   dc69a:	b002      	add	sp, #8
   dc69c:	bd10      	pop	{r4, pc}

000dc69e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dc69e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dc6a0:	688a      	ldr	r2, [r1, #8]
   dc6a2:	6809      	ldr	r1, [r1, #0]
{
   dc6a4:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dc6a6:	f7ff ffd2 	bl	dc64e <_ZN6String6concatEPKcj>
   dc6aa:	b910      	cbnz	r0, dc6b2 <_ZplRK15StringSumHelperRK6String+0x14>
   dc6ac:	4620      	mov	r0, r4
   dc6ae:	f7ff ff1a 	bl	dc4e6 <_ZN6String10invalidateEv>
	return a;
}
   dc6b2:	4620      	mov	r0, r4
   dc6b4:	bd10      	pop	{r4, pc}

000dc6b6 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dc6b6:	b513      	push	{r0, r1, r4, lr}
   dc6b8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dc6ba:	b929      	cbnz	r1, dc6c8 <_ZplRK15StringSumHelperPKc+0x12>
   dc6bc:	4620      	mov	r0, r4
   dc6be:	f7ff ff12 	bl	dc4e6 <_ZN6String10invalidateEv>
	return a;
}
   dc6c2:	4620      	mov	r0, r4
   dc6c4:	b002      	add	sp, #8
   dc6c6:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dc6c8:	4608      	mov	r0, r1
   dc6ca:	9101      	str	r1, [sp, #4]
   dc6cc:	f001 f9cd 	bl	dda6a <strlen>
   dc6d0:	9901      	ldr	r1, [sp, #4]
   dc6d2:	4602      	mov	r2, r0
   dc6d4:	4620      	mov	r0, r4
   dc6d6:	f7ff ffba 	bl	dc64e <_ZN6String6concatEPKcj>
   dc6da:	2800      	cmp	r0, #0
   dc6dc:	d0ee      	beq.n	dc6bc <_ZplRK15StringSumHelperPKc+0x6>
   dc6de:	e7f0      	b.n	dc6c2 <_ZplRK15StringSumHelperPKc+0xc>

000dc6e0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dc6e0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dc6e2:	6882      	ldr	r2, [r0, #8]
   dc6e4:	b93a      	cbnz	r2, dc6f6 <_ZNK6String6equalsEPKc+0x16>
   dc6e6:	b121      	cbz	r1, dc6f2 <_ZNK6String6equalsEPKc+0x12>
   dc6e8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   dc6ea:	fab0 f080 	clz	r0, r0
   dc6ee:	0940      	lsrs	r0, r0, #5
   dc6f0:	e000      	b.n	dc6f4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dc6f2:	2001      	movs	r0, #1
}
   dc6f4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dc6f6:	6800      	ldr	r0, [r0, #0]
   dc6f8:	b909      	cbnz	r1, dc6fe <_ZNK6String6equalsEPKc+0x1e>
   dc6fa:	7800      	ldrb	r0, [r0, #0]
   dc6fc:	e7f5      	b.n	dc6ea <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   dc6fe:	f001 f984 	bl	dda0a <strcmp>
   dc702:	e7f2      	b.n	dc6ea <_ZNK6String6equalsEPKc+0xa>

000dc704 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   dc704:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dc706:	6883      	ldr	r3, [r0, #8]
   dc708:	688a      	ldr	r2, [r1, #8]
   dc70a:	4293      	cmp	r3, r2
   dc70c:	d30b      	bcc.n	dc726 <_ZNK6String8endsWithERKS_+0x22>
   dc70e:	6800      	ldr	r0, [r0, #0]
   dc710:	b140      	cbz	r0, dc724 <_ZNK6String8endsWithERKS_+0x20>
   dc712:	6809      	ldr	r1, [r1, #0]
   dc714:	b149      	cbz	r1, dc72a <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   dc716:	1a9b      	subs	r3, r3, r2
   dc718:	4418      	add	r0, r3
   dc71a:	f001 f976 	bl	dda0a <strcmp>
   dc71e:	fab0 f080 	clz	r0, r0
   dc722:	0940      	lsrs	r0, r0, #5
}
   dc724:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dc726:	2000      	movs	r0, #0
   dc728:	e7fc      	b.n	dc724 <_ZNK6String8endsWithERKS_+0x20>
   dc72a:	4608      	mov	r0, r1
   dc72c:	e7fa      	b.n	dc724 <_ZNK6String8endsWithERKS_+0x20>
	...

000dc730 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dc730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dc732:	429a      	cmp	r2, r3
{
   dc734:	460f      	mov	r7, r1
   dc736:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dc738:	490c      	ldr	r1, [pc, #48]	; (dc76c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   dc73a:	bf88      	it	hi
   dc73c:	4613      	movhi	r3, r2
{
   dc73e:	4614      	mov	r4, r2
   dc740:	4606      	mov	r6, r0
	if (left > right) {
   dc742:	bf84      	itt	hi
   dc744:	462c      	movhi	r4, r5
   dc746:	461d      	movhi	r5, r3
	String out;
   dc748:	f7ff ff11 	bl	dc56e <_ZN6StringC1EPKc>
	if (left > len) return out;
   dc74c:	68ba      	ldr	r2, [r7, #8]
   dc74e:	42a2      	cmp	r2, r4
   dc750:	d30a      	bcc.n	dc768 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dc752:	6839      	ldr	r1, [r7, #0]
   dc754:	42aa      	cmp	r2, r5
   dc756:	bf94      	ite	ls
   dc758:	ebc4 0202 	rsbls	r2, r4, r2
   dc75c:	ebc4 0205 	rsbhi	r2, r4, r5
   dc760:	4421      	add	r1, r4
   dc762:	4630      	mov	r0, r6
   dc764:	f7ff feea 	bl	dc53c <_ZN6String4copyEPKcj>
	return out;
}
   dc768:	4630      	mov	r0, r6
   dc76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc76c:	000dedbc 	.word	0x000dedbc

000dc770 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dc770:	b40e      	push	{r1, r2, r3}
   dc772:	b570      	push	{r4, r5, r6, lr}
   dc774:	b087      	sub	sp, #28
   dc776:	ad0b      	add	r5, sp, #44	; 0x2c
   dc778:	4604      	mov	r4, r0
   dc77a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dc77e:	9201      	str	r2, [sp, #4]
   dc780:	462b      	mov	r3, r5
   dc782:	2105      	movs	r1, #5
   dc784:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   dc786:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dc788:	f7fd fe18 	bl	da3bc <vsnprintf>
    va_end(marker);

    String result;
   dc78c:	490b      	ldr	r1, [pc, #44]	; (dc7bc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dc78e:	4606      	mov	r6, r0
    String result;
   dc790:	4620      	mov	r0, r4
   dc792:	f7ff feec 	bl	dc56e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   dc796:	4631      	mov	r1, r6
   dc798:	4620      	mov	r0, r4
   dc79a:	f7ff febb 	bl	dc514 <_ZN6String7reserveEj>
    if (result.buffer) {
   dc79e:	6820      	ldr	r0, [r4, #0]
   dc7a0:	b130      	cbz	r0, dc7b0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dc7a2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dc7a4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dc7a6:	462b      	mov	r3, r5
   dc7a8:	1c71      	adds	r1, r6, #1
   dc7aa:	f7fd fe07 	bl	da3bc <vsnprintf>
        va_end(marker);
        result.len = n;
   dc7ae:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dc7b0:	4620      	mov	r0, r4
   dc7b2:	b007      	add	sp, #28
   dc7b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dc7b8:	b003      	add	sp, #12
   dc7ba:	4770      	bx	lr
   dc7bc:	000dedbc 	.word	0x000dedbc

000dc7c0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dc7c0:	b510      	push	{r4, lr}
   dc7c2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dc7c4:	6800      	ldr	r0, [r0, #0]
   dc7c6:	b118      	cbz	r0, dc7d0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dc7c8:	f7fd fdd0 	bl	da36c <free>
            wakeupSource_ = nullptr;
   dc7cc:	2300      	movs	r3, #0
   dc7ce:	6023      	str	r3, [r4, #0]
        }
    }
   dc7d0:	bd10      	pop	{r4, pc}

000dc7d2 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dc7d2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dc7d4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dc7d8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dc7da:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dc7dc:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   dc7de:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dc7e2:	f8c0 2006 	str.w	r2, [r0, #6]
   dc7e6:	889b      	ldrh	r3, [r3, #4]
   dc7e8:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dc7ea:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   dc7ec:	f7ff ffe8 	bl	dc7c0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   dc7f0:	682b      	ldr	r3, [r5, #0]
   dc7f2:	b113      	cbz	r3, dc7fa <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dc7f4:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dc7f6:	2300      	movs	r3, #0
   dc7f8:	602b      	str	r3, [r5, #0]
    }
   dc7fa:	4620      	mov	r0, r4
   dc7fc:	bd38      	pop	{r3, r4, r5, pc}
	...

000dc800 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   dc800:	b538      	push	{r3, r4, r5, lr}
   dc802:	460c      	mov	r4, r1
   dc804:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   dc806:	f7ff ffdb 	bl	dc7c0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   dc80a:	b144      	cbz	r4, dc81e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   dc80c:	8820      	ldrh	r0, [r4, #0]
   dc80e:	f7fd fda5 	bl	da35c <malloc>
   dc812:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   dc814:	b128      	cbz	r0, dc822 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   dc816:	8822      	ldrh	r2, [r4, #0]
   dc818:	4621      	mov	r1, r4
   dc81a:	f001 f857 	bl	dd8cc <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dc81e:	2000      	movs	r0, #0
    }
   dc820:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dc822:	4801      	ldr	r0, [pc, #4]	; (dc828 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dc824:	e7fc      	b.n	dc820 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dc826:	bf00      	nop
   dc828:	fffffefc 	.word	0xfffffefc

000dc82c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dc82c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc82e:	4d2d      	ldr	r5, [pc, #180]	; (dc8e4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dc830:	7d0b      	ldrb	r3, [r1, #20]
   dc832:	4604      	mov	r4, r0
   dc834:	b08b      	sub	sp, #44	; 0x2c
   dc836:	4608      	mov	r0, r1
   dc838:	1daf      	adds	r7, r5, #6
   dc83a:	2b00      	cmp	r3, #0
   dc83c:	d038      	beq.n	dc8b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dc83e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dc840:	791b      	ldrb	r3, [r3, #4]
   dc842:	2b00      	cmp	r3, #0
   dc844:	d034      	beq.n	dc8b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dc846:	2200      	movs	r2, #0
    SleepResult() {}
   dc848:	4b27      	ldr	r3, [pc, #156]	; (dc8e8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dc84a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dc84c:	a902      	add	r1, sp, #8
   dc84e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dc850:	9202      	str	r2, [sp, #8]
   dc852:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dc856:	f88d 200e 	strb.w	r2, [sp, #14]
   dc85a:	f7fd fcb5 	bl	da1c8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dc85e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dc862:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dc866:	b200      	sxth	r0, r0
   dc868:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dc86c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dc870:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dc872:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dc874:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dc876:	4628      	mov	r0, r5
   dc878:	f7ff ffc2 	bl	dc800 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dc87c:	a802      	add	r0, sp, #8
   dc87e:	f7ff ff9f 	bl	dc7c0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dc882:	2300      	movs	r3, #0
   dc884:	6023      	str	r3, [r4, #0]
   dc886:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dc888:	71a3      	strb	r3, [r4, #6]
   dc88a:	8123      	strh	r3, [r4, #8]
   dc88c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dc890:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dc892:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dc896:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dc898:	683b      	ldr	r3, [r7, #0]
   dc89a:	f8c4 3006 	str.w	r3, [r4, #6]
   dc89e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dc8a0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dc8a2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dc8a4:	4620      	mov	r0, r4
   dc8a6:	f7ff ffab 	bl	dc800 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dc8aa:	4620      	mov	r0, r4
   dc8ac:	b00b      	add	sp, #44	; 0x2c
   dc8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dc8b0:	2600      	movs	r6, #0
   dc8b2:	2320      	movs	r3, #32
   dc8b4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dc8b8:	4b0c      	ldr	r3, [pc, #48]	; (dc8ec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dc8ba:	9300      	str	r3, [sp, #0]
   dc8bc:	490c      	ldr	r1, [pc, #48]	; (dc8f0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dc8be:	4633      	mov	r3, r6
   dc8c0:	aa02      	add	r2, sp, #8
   dc8c2:	2032      	movs	r0, #50	; 0x32
   dc8c4:	f7fd fbfa 	bl	da0bc <log_message>
    SleepResult() {}
   dc8c8:	4b07      	ldr	r3, [pc, #28]	; (dc8e8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dc8ca:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dc8cc:	a902      	add	r1, sp, #8
        error_ = error;
   dc8ce:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dc8d2:	4804      	ldr	r0, [pc, #16]	; (dc8e4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dc8d4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dc8d6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dc8da:	f8ad 300c 	strh.w	r3, [sp, #12]
   dc8de:	f7ff ff78 	bl	dc7d2 <_ZN17SystemSleepResultaSEOS_>
   dc8e2:	e7cb      	b.n	dc87c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dc8e4:	2003e5cc 	.word	0x2003e5cc
   dc8e8:	ffff0000 	.word	0xffff0000
   dc8ec:	000dee97 	.word	0x000dee97
   dc8f0:	000dee90 	.word	0x000dee90

000dc8f4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dc8f4:	4b05      	ldr	r3, [pc, #20]	; (dc90c <_GLOBAL__sub_I_System+0x18>)
   dc8f6:	2202      	movs	r2, #2
   dc8f8:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dc8fa:	4b05      	ldr	r3, [pc, #20]	; (dc910 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dc8fc:	4a05      	ldr	r2, [pc, #20]	; (dc914 <_GLOBAL__sub_I_System+0x20>)
   dc8fe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dc900:	2000      	movs	r0, #0
   dc902:	6018      	str	r0, [r3, #0]
   dc904:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dc906:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dc908:	f7fd bc0a 	b.w	da120 <set_system_mode>
   dc90c:	2003e5d8 	.word	0x2003e5d8
   dc910:	2003e5cc 	.word	0x2003e5cc
   dc914:	ffff0000 	.word	0xffff0000

000dc918 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dc918:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dc91a:	2000      	movs	r0, #0
   dc91c:	f7fd fc96 	bl	da24c <spark_sync_time_pending>
   dc920:	b128      	cbz	r0, dc92e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dc922:	f7fd fc7b 	bl	da21c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dc926:	f080 0001 	eor.w	r0, r0, #1
   dc92a:	b2c0      	uxtb	r0, r0
    }
   dc92c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dc92e:	2001      	movs	r0, #1
   dc930:	e7fc      	b.n	dc92c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000dc932 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dc932:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dc934:	4602      	mov	r2, r0
   dc936:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dc938:	4668      	mov	r0, sp
    struct timeval tv = {
   dc93a:	2100      	movs	r1, #0
    };
   dc93c:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dc940:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dc944:	f7fd f9c2 	bl	d9ccc <hal_rtc_set_time>
   dc948:	4602      	mov	r2, r0
   dc94a:	b910      	cbnz	r0, dc952 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dc94c:	4601      	mov	r1, r0
   dc94e:	f7fd fc1f 	bl	da190 <system_notify_time_changed>
    }
}
   dc952:	b005      	add	sp, #20
   dc954:	f85d fb04 	ldr.w	pc, [sp], #4

000dc958 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dc958:	b530      	push	{r4, r5, lr}
   dc95a:	4604      	mov	r4, r0
    t += time_zone_cache;
   dc95c:	4818      	ldr	r0, [pc, #96]	; (dc9c0 <_ZN9TimeClass7timeStrEx+0x68>)
   dc95e:	e9d0 1000 	ldrd	r1, r0, [r0]
   dc962:	1852      	adds	r2, r2, r1
   dc964:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dc968:	4816      	ldr	r0, [pc, #88]	; (dc9c4 <_ZN9TimeClass7timeStrEx+0x6c>)
   dc96a:	e9d0 1000 	ldrd	r1, r0, [r0]
   dc96e:	1852      	adds	r2, r2, r1
{
   dc970:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dc972:	eb40 0303 	adc.w	r3, r0, r3
   dc976:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dc97a:	2224      	movs	r2, #36	; 0x24
   dc97c:	eb0d 0002 	add.w	r0, sp, r2
   dc980:	2100      	movs	r1, #0
   dc982:	f000 ffcb 	bl	dd91c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dc986:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dc988:	a909      	add	r1, sp, #36	; 0x24
   dc98a:	4668      	mov	r0, sp
   dc98c:	f7fd fd46 	bl	da41c <localtime_r>
    char ascstr[26] = {};
   dc990:	2216      	movs	r2, #22
   dc992:	4629      	mov	r1, r5
   dc994:	a803      	add	r0, sp, #12
   dc996:	9502      	str	r5, [sp, #8]
   dc998:	f000 ffc0 	bl	dd91c <memset>
    asctime_r(&calendar_time, ascstr);
   dc99c:	a902      	add	r1, sp, #8
   dc99e:	a809      	add	r0, sp, #36	; 0x24
   dc9a0:	f000 ff56 	bl	dd850 <asctime_r>
    int len = strlen(ascstr);
   dc9a4:	a802      	add	r0, sp, #8
   dc9a6:	f001 f860 	bl	dda6a <strlen>
    ascstr[len-1] = 0; // remove final newline
   dc9aa:	ab12      	add	r3, sp, #72	; 0x48
   dc9ac:	4418      	add	r0, r3
    return String(ascstr);
   dc9ae:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dc9b0:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dc9b4:	4620      	mov	r0, r4
   dc9b6:	f7ff fdda 	bl	dc56e <_ZN6StringC1EPKc>
}
   dc9ba:	4620      	mov	r0, r4
   dc9bc:	b013      	add	sp, #76	; 0x4c
   dc9be:	bd30      	pop	{r4, r5, pc}
   dc9c0:	2003e5f0 	.word	0x2003e5f0
   dc9c4:	2003e5e8 	.word	0x2003e5e8

000dc9c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc9cc:	b0a5      	sub	sp, #148	; 0x94
   dc9ce:	4607      	mov	r7, r0
   dc9d0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc9d2:	a814      	add	r0, sp, #80	; 0x50
{
   dc9d4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc9d6:	223f      	movs	r2, #63	; 0x3f
{
   dc9d8:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc9da:	f001 f860 	bl	dda9e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dc9de:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dc9e0:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dc9e2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dc9e6:	f001 f840 	bl	dda6a <strlen>
   dc9ea:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dc9ec:	bb5d      	cbnz	r5, dca46 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dc9ee:	492a      	ldr	r1, [pc, #168]	; (dca98 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dc9f0:	a803      	add	r0, sp, #12
   dc9f2:	f001 f814 	bl	dda1e <strcpy>
   dc9f6:	ae14      	add	r6, sp, #80	; 0x50
{
   dc9f8:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dc9fa:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dc9fe:	45ab      	cmp	fp, r5
   dca00:	d936      	bls.n	dca70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dca02:	46b1      	mov	r9, r6
   dca04:	f105 0a01 	add.w	sl, r5, #1
   dca08:	f819 3b01 	ldrb.w	r3, [r9], #1
   dca0c:	2b25      	cmp	r3, #37	; 0x25
   dca0e:	d117      	bne.n	dca40 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dca10:	7873      	ldrb	r3, [r6, #1]
   dca12:	2b7a      	cmp	r3, #122	; 0x7a
   dca14:	d114      	bne.n	dca40 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dca16:	a803      	add	r0, sp, #12
   dca18:	f001 f827 	bl	dda6a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dca1c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dca1e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dca20:	1828      	adds	r0, r5, r0
   dca22:	4418      	add	r0, r3
   dca24:	ebab 0205 	sub.w	r2, fp, r5
   dca28:	1cb1      	adds	r1, r6, #2
   dca2a:	f000 ff4f 	bl	dd8cc <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dca2e:	4622      	mov	r2, r4
   dca30:	a903      	add	r1, sp, #12
   dca32:	4630      	mov	r0, r6
   dca34:	f000 ff4a 	bl	dd8cc <memcpy>
            len = strlen(format_str);
   dca38:	a814      	add	r0, sp, #80	; 0x50
   dca3a:	f001 f816 	bl	dda6a <strlen>
   dca3e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dca40:	464e      	mov	r6, r9
   dca42:	4655      	mov	r5, sl
   dca44:	e7d9      	b.n	dc9fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dca46:	213c      	movs	r1, #60	; 0x3c
   dca48:	fb95 f3f1 	sdiv	r3, r5, r1
   dca4c:	2b00      	cmp	r3, #0
   dca4e:	bfb8      	it	lt
   dca50:	425b      	neglt	r3, r3
   dca52:	fbb3 f2f1 	udiv	r2, r3, r1
   dca56:	fb01 3312 	mls	r3, r1, r2, r3
   dca5a:	9300      	str	r3, [sp, #0]
   dca5c:	4a0f      	ldr	r2, [pc, #60]	; (dca9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dca5e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dca62:	2110      	movs	r1, #16
   dca64:	a803      	add	r0, sp, #12
   dca66:	fb95 f3f3 	sdiv	r3, r5, r3
   dca6a:	f7fd fc9f 	bl	da3ac <snprintf>
   dca6e:	e7c2      	b.n	dc9f6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dca70:	2100      	movs	r1, #0
   dca72:	222e      	movs	r2, #46	; 0x2e
   dca74:	a808      	add	r0, sp, #32
   dca76:	9107      	str	r1, [sp, #28]
   dca78:	f000 ff50 	bl	dd91c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dca7c:	4643      	mov	r3, r8
   dca7e:	aa14      	add	r2, sp, #80	; 0x50
   dca80:	2132      	movs	r1, #50	; 0x32
   dca82:	a807      	add	r0, sp, #28
   dca84:	f7fd fcc2 	bl	da40c <strftime>
    return String(buf);
   dca88:	a907      	add	r1, sp, #28
   dca8a:	4638      	mov	r0, r7
   dca8c:	f7ff fd6f 	bl	dc56e <_ZN6StringC1EPKc>
}
   dca90:	4638      	mov	r0, r7
   dca92:	b025      	add	sp, #148	; 0x94
   dca94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dca98:	000de3bb 	.word	0x000de3bb
   dca9c:	000de3bd 	.word	0x000de3bd

000dcaa0 <_ZN9TimeClass6formatExPKc>:
{
   dcaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcaa2:	b08d      	sub	sp, #52	; 0x34
   dcaa4:	e9cd 2300 	strd	r2, r3, [sp]
   dcaa8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dcaaa:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dcaac:	b915      	cbnz	r5, dcab4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dcaae:	4b19      	ldr	r3, [pc, #100]	; (dcb14 <_ZN9TimeClass6formatExPKc+0x74>)
   dcab0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dcab2:	b12d      	cbz	r5, dcac0 <_ZN9TimeClass6formatExPKc+0x20>
   dcab4:	4b18      	ldr	r3, [pc, #96]	; (dcb18 <_ZN9TimeClass6formatExPKc+0x78>)
   dcab6:	4628      	mov	r0, r5
   dcab8:	6819      	ldr	r1, [r3, #0]
   dcaba:	f000 ffa6 	bl	dda0a <strcmp>
   dcabe:	b938      	cbnz	r0, dcad0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dcac0:	e9dd 2300 	ldrd	r2, r3, [sp]
   dcac4:	4620      	mov	r0, r4
   dcac6:	f7ff ff47 	bl	dc958 <_ZN9TimeClass7timeStrEx>
}
   dcaca:	4620      	mov	r0, r4
   dcacc:	b00d      	add	sp, #52	; 0x34
   dcace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   dcad0:	4e12      	ldr	r6, [pc, #72]	; (dcb1c <_ZN9TimeClass6formatExPKc+0x7c>)
   dcad2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   dcad4:	4f12      	ldr	r7, [pc, #72]	; (dcb20 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   dcad6:	e9d6 3200 	ldrd	r3, r2, [r6]
   dcada:	185b      	adds	r3, r3, r1
   dcadc:	9901      	ldr	r1, [sp, #4]
   dcade:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dcae2:	e9d7 0100 	ldrd	r0, r1, [r7]
   dcae6:	181b      	adds	r3, r3, r0
   dcae8:	eb41 0202 	adc.w	r2, r1, r2
   dcaec:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   dcaf0:	2100      	movs	r1, #0
   dcaf2:	2224      	movs	r2, #36	; 0x24
   dcaf4:	a803      	add	r0, sp, #12
   dcaf6:	f000 ff11 	bl	dd91c <memset>
    localtime_r(&t, &calendar_time);
   dcafa:	a903      	add	r1, sp, #12
   dcafc:	4668      	mov	r0, sp
   dcafe:	f7fd fc8d 	bl	da41c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dcb02:	6832      	ldr	r2, [r6, #0]
   dcb04:	683b      	ldr	r3, [r7, #0]
   dcb06:	a903      	add	r1, sp, #12
   dcb08:	4413      	add	r3, r2
   dcb0a:	4620      	mov	r0, r4
   dcb0c:	462a      	mov	r2, r5
   dcb0e:	f7ff ff5b 	bl	dc9c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   dcb12:	e7da      	b.n	dcaca <_ZN9TimeClass6formatExPKc+0x2a>
   dcb14:	2003e5e0 	.word	0x2003e5e0
   dcb18:	2003dcac 	.word	0x2003dcac
   dcb1c:	2003e5f0 	.word	0x2003e5f0
   dcb20:	2003e5e8 	.word	0x2003e5e8

000dcb24 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   dcb24:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   dcb26:	2000      	movs	r0, #0
   dcb28:	f7fd f8b8 	bl	d9c9c <hal_rtc_time_is_valid>
    if (rtcstate)
   dcb2c:	4604      	mov	r4, r0
   dcb2e:	b9a0      	cbnz	r0, dcb5a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dcb30:	f7fd faee 	bl	da110 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dcb34:	2801      	cmp	r0, #1
   dcb36:	d110      	bne.n	dcb5a <_ZN9TimeClass7isValidEv+0x36>
   dcb38:	4620      	mov	r0, r4
   dcb3a:	f7fd fb21 	bl	da180 <system_thread_get_state>
   dcb3e:	b960      	cbnz	r0, dcb5a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   dcb40:	f7ff feea 	bl	dc918 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dcb44:	b910      	cbnz	r0, dcb4c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   dcb46:	f7fd fb59 	bl	da1fc <spark_process>
        while (_while() && !_condition()) {
   dcb4a:	e7f9      	b.n	dcb40 <_ZN9TimeClass7isValidEv+0x1c>
   dcb4c:	f7ff fee4 	bl	dc918 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   dcb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   dcb54:	2000      	movs	r0, #0
   dcb56:	f7fd b8a1 	b.w	d9c9c <hal_rtc_time_is_valid>
}
   dcb5a:	4620      	mov	r0, r4
   dcb5c:	bd10      	pop	{r4, pc}

000dcb5e <_ZN9TimeClass3nowEv>:
{
   dcb5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   dcb60:	f7ff ffe0 	bl	dcb24 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   dcb64:	2210      	movs	r2, #16
   dcb66:	2100      	movs	r1, #0
   dcb68:	4668      	mov	r0, sp
   dcb6a:	f000 fed7 	bl	dd91c <memset>
    hal_rtc_get_time(&tv, nullptr);
   dcb6e:	2100      	movs	r1, #0
   dcb70:	4668      	mov	r0, sp
   dcb72:	f7fd f8a3 	bl	d9cbc <hal_rtc_get_time>
}
   dcb76:	9800      	ldr	r0, [sp, #0]
   dcb78:	b005      	add	sp, #20
   dcb7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dcb80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dcb80:	4b02      	ldr	r3, [pc, #8]	; (dcb8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dcb82:	681a      	ldr	r2, [r3, #0]
   dcb84:	4b02      	ldr	r3, [pc, #8]	; (dcb90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dcb86:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   dcb88:	4770      	bx	lr
   dcb8a:	bf00      	nop
   dcb8c:	2003dcac 	.word	0x2003dcac
   dcb90:	2003e5e0 	.word	0x2003e5e0

000dcb94 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   dcb94:	4770      	bx	lr

000dcb96 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dcb96:	7441      	strb	r1, [r0, #17]
}
   dcb98:	4770      	bx	lr

000dcb9a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dcb9a:	4770      	bx	lr

000dcb9c <_ZN11USARTSerial17availableForWriteEv>:
{
   dcb9c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   dcb9e:	7c00      	ldrb	r0, [r0, #16]
   dcba0:	f7fd fa34 	bl	da00c <hal_usart_available_data_for_write>
}
   dcba4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dcba8:	bd08      	pop	{r3, pc}

000dcbaa <_ZN11USARTSerial9availableEv>:
{
   dcbaa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dcbac:	7c00      	ldrb	r0, [r0, #16]
   dcbae:	f7fd fa05 	bl	d9fbc <hal_usart_available>
}
   dcbb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dcbb6:	bd08      	pop	{r3, pc}

000dcbb8 <_ZN11USARTSerial4peekEv>:
{
   dcbb8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dcbba:	7c00      	ldrb	r0, [r0, #16]
   dcbbc:	f7fd fa0e 	bl	d9fdc <hal_usart_peek>
}
   dcbc0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dcbc4:	bd08      	pop	{r3, pc}

000dcbc6 <_ZN11USARTSerial4readEv>:
{
   dcbc6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dcbc8:	7c00      	ldrb	r0, [r0, #16]
   dcbca:	f7fd f9ff 	bl	d9fcc <hal_usart_read>
}
   dcbce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dcbd2:	bd08      	pop	{r3, pc}

000dcbd4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   dcbd4:	7c00      	ldrb	r0, [r0, #16]
   dcbd6:	f7fd ba09 	b.w	d9fec <hal_usart_flush>

000dcbda <_ZN11USARTSerial5writeEh>:
{
   dcbda:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dcbdc:	7c45      	ldrb	r5, [r0, #17]
{
   dcbde:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dcbe0:	b12d      	cbz	r5, dcbee <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   dcbe2:	7c20      	ldrb	r0, [r4, #16]
}
   dcbe4:	b003      	add	sp, #12
   dcbe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   dcbea:	f7fd b9df 	b.w	d9fac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dcbee:	7c00      	ldrb	r0, [r0, #16]
   dcbf0:	9101      	str	r1, [sp, #4]
   dcbf2:	f7fd fa0b 	bl	da00c <hal_usart_available_data_for_write>
   dcbf6:	2800      	cmp	r0, #0
   dcbf8:	9901      	ldr	r1, [sp, #4]
   dcbfa:	dcf2      	bgt.n	dcbe2 <_ZN11USARTSerial5writeEh+0x8>
}
   dcbfc:	4628      	mov	r0, r5
   dcbfe:	b003      	add	sp, #12
   dcc00:	bd30      	pop	{r4, r5, pc}

000dcc02 <_ZN11USARTSerialD0Ev>:
   dcc02:	b510      	push	{r4, lr}
   dcc04:	2114      	movs	r1, #20
   dcc06:	4604      	mov	r4, r0
   dcc08:	f000 fa24 	bl	dd054 <_ZdlPvj>
   dcc0c:	4620      	mov	r0, r4
   dcc0e:	bd10      	pop	{r4, pc}

000dcc10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   dcc10:	b510      	push	{r4, lr}
   dcc12:	f04f 0c00 	mov.w	ip, #0
   dcc16:	4604      	mov	r4, r0
   dcc18:	4608      	mov	r0, r1
   dcc1a:	4611      	mov	r1, r2
   dcc1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dcc20:	e9c4 c201 	strd	ip, r2, [r4, #4]
   dcc24:	4a04      	ldr	r2, [pc, #16]	; (dcc38 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   dcc26:	6022      	str	r2, [r4, #0]
  _blocking = true;
   dcc28:	2201      	movs	r2, #1
  _serial = serial;
   dcc2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dcc2c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   dcc2e:	461a      	mov	r2, r3
   dcc30:	f7fd f9ac 	bl	d9f8c <hal_usart_init>
}
   dcc34:	4620      	mov	r0, r4
   dcc36:	bd10      	pop	{r4, pc}
   dcc38:	000deee4 	.word	0x000deee4

000dcc3c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   dcc3c:	7c00      	ldrb	r0, [r0, #16]
   dcc3e:	2300      	movs	r3, #0
   dcc40:	f7fd b9ec 	b.w	da01c <hal_usart_begin_config>

000dcc44 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   dcc44:	2200      	movs	r2, #0
   dcc46:	f7ff bff9 	b.w	dcc3c <_ZN11USARTSerial5beginEmm>

000dcc4a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   dcc4a:	7c00      	ldrb	r0, [r0, #16]
   dcc4c:	f7fd b9a6 	b.w	d9f9c <hal_usart_end>

000dcc50 <_Z22__fetch_global_Serial1v>:
{
   dcc50:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dcc52:	4c0d      	ldr	r4, [pc, #52]	; (dcc88 <_Z22__fetch_global_Serial1v+0x38>)
   dcc54:	7821      	ldrb	r1, [r4, #0]
   dcc56:	f3bf 8f5b 	dmb	ish
   dcc5a:	f011 0101 	ands.w	r1, r1, #1
   dcc5e:	d110      	bne.n	dcc82 <_Z22__fetch_global_Serial1v+0x32>
   dcc60:	4620      	mov	r0, r4
   dcc62:	9101      	str	r1, [sp, #4]
   dcc64:	f7f7 fa28 	bl	d40b8 <__cxa_guard_acquire>
   dcc68:	9901      	ldr	r1, [sp, #4]
   dcc6a:	b150      	cbz	r0, dcc82 <_Z22__fetch_global_Serial1v+0x32>
   dcc6c:	4b07      	ldr	r3, [pc, #28]	; (dcc8c <_Z22__fetch_global_Serial1v+0x3c>)
   dcc6e:	4a08      	ldr	r2, [pc, #32]	; (dcc90 <_Z22__fetch_global_Serial1v+0x40>)
   dcc70:	4808      	ldr	r0, [pc, #32]	; (dcc94 <_Z22__fetch_global_Serial1v+0x44>)
   dcc72:	f7ff ffcd 	bl	dcc10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   dcc76:	4620      	mov	r0, r4
   dcc78:	f7f7 fa23 	bl	d40c2 <__cxa_guard_release>
   dcc7c:	4806      	ldr	r0, [pc, #24]	; (dcc98 <_Z22__fetch_global_Serial1v+0x48>)
   dcc7e:	f000 fe0d 	bl	dd89c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dcc82:	4804      	ldr	r0, [pc, #16]	; (dcc94 <_Z22__fetch_global_Serial1v+0x44>)
   dcc84:	b002      	add	sp, #8
   dcc86:	bd10      	pop	{r4, pc}
   dcc88:	2003e5f8 	.word	0x2003e5f8
   dcc8c:	2003e680 	.word	0x2003e680
   dcc90:	2003e5fc 	.word	0x2003e5fc
   dcc94:	2003e704 	.word	0x2003e704
   dcc98:	000dcb9b 	.word	0x000dcb9b

000dcc9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dcc9c:	7441      	strb	r1, [r0, #17]
}
   dcc9e:	4770      	bx	lr

000dcca0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dcca0:	4770      	bx	lr

000dcca2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dcca2:	4770      	bx	lr

000dcca4 <_ZN9USBSerial4readEv>:
{
   dcca4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dcca6:	2100      	movs	r1, #0
   dcca8:	7c00      	ldrb	r0, [r0, #16]
   dccaa:	f7fd f9e7 	bl	da07c <HAL_USB_USART_Receive_Data>
}
   dccae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dccb2:	bd08      	pop	{r3, pc}

000dccb4 <_ZN9USBSerial4peekEv>:
{
   dccb4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dccb6:	2101      	movs	r1, #1
   dccb8:	7c00      	ldrb	r0, [r0, #16]
   dccba:	f7fd f9df 	bl	da07c <HAL_USB_USART_Receive_Data>
}
   dccbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dccc2:	bd08      	pop	{r3, pc}

000dccc4 <_ZN9USBSerial17availableForWriteEv>:
{
   dccc4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dccc6:	7c00      	ldrb	r0, [r0, #16]
   dccc8:	f7fd f9d0 	bl	da06c <HAL_USB_USART_Available_Data_For_Write>
}
   dcccc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dccd0:	bd08      	pop	{r3, pc}

000dccd2 <_ZN9USBSerial9availableEv>:
{
   dccd2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dccd4:	7c00      	ldrb	r0, [r0, #16]
   dccd6:	f7fd f9c1 	bl	da05c <HAL_USB_USART_Available_Data>
}
   dccda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dccde:	bd08      	pop	{r3, pc}

000dcce0 <_ZN9USBSerial5writeEh>:
{
   dcce0:	b513      	push	{r0, r1, r4, lr}
   dcce2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dcce4:	7c00      	ldrb	r0, [r0, #16]
{
   dcce6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dcce8:	f7fd f9c0 	bl	da06c <HAL_USB_USART_Available_Data_For_Write>
   dccec:	2800      	cmp	r0, #0
   dccee:	9901      	ldr	r1, [sp, #4]
   dccf0:	dc01      	bgt.n	dccf6 <_ZN9USBSerial5writeEh+0x16>
   dccf2:	7c60      	ldrb	r0, [r4, #17]
   dccf4:	b120      	cbz	r0, dcd00 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dccf6:	7c20      	ldrb	r0, [r4, #16]
   dccf8:	f7fd f9c8 	bl	da08c <HAL_USB_USART_Send_Data>
   dccfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   dcd00:	b002      	add	sp, #8
   dcd02:	bd10      	pop	{r4, pc}

000dcd04 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   dcd04:	7c00      	ldrb	r0, [r0, #16]
   dcd06:	f7fd b9c9 	b.w	da09c <HAL_USB_USART_Flush_Data>

000dcd0a <_ZN9USBSerialD0Ev>:
   dcd0a:	b510      	push	{r4, lr}
   dcd0c:	2114      	movs	r1, #20
   dcd0e:	4604      	mov	r4, r0
   dcd10:	f000 f9a0 	bl	dd054 <_ZdlPvj>
   dcd14:	4620      	mov	r0, r4
   dcd16:	bd10      	pop	{r4, pc}

000dcd18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dcd18:	b510      	push	{r4, lr}
   dcd1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dcd1e:	4604      	mov	r4, r0
   dcd20:	4608      	mov	r0, r1
   dcd22:	2100      	movs	r1, #0
   dcd24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dcd28:	4b04      	ldr	r3, [pc, #16]	; (dcd3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dcd2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   dcd2c:	2301      	movs	r3, #1
  _serial = serial;
   dcd2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dcd30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   dcd32:	4611      	mov	r1, r2
   dcd34:	f7fd f97a 	bl	da02c <HAL_USB_USART_Init>
}
   dcd38:	4620      	mov	r0, r4
   dcd3a:	bd10      	pop	{r4, pc}
   dcd3c:	000def14 	.word	0x000def14

000dcd40 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dcd40:	7c00      	ldrb	r0, [r0, #16]
   dcd42:	2200      	movs	r2, #0
   dcd44:	f7fd b97a 	b.w	da03c <HAL_USB_USART_Begin>

000dcd48 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   dcd48:	7c00      	ldrb	r0, [r0, #16]
   dcd4a:	f7fd b97f 	b.w	da04c <HAL_USB_USART_End>

000dcd4e <_Z19acquireSerialBufferv>:
{
   dcd4e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dcd50:	2214      	movs	r2, #20
{
   dcd52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dcd54:	2100      	movs	r1, #0
   dcd56:	f000 fde1 	bl	dd91c <memset>
}
   dcd5a:	4620      	mov	r0, r4
   dcd5c:	bd10      	pop	{r4, pc}
	...

000dcd60 <_Z16_fetch_usbserialv>:
{
   dcd60:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dcd62:	4c0f      	ldr	r4, [pc, #60]	; (dcda0 <_Z16_fetch_usbserialv+0x40>)
{
   dcd64:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dcd66:	a803      	add	r0, sp, #12
   dcd68:	f7ff fff1 	bl	dcd4e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dcd6c:	7821      	ldrb	r1, [r4, #0]
   dcd6e:	f3bf 8f5b 	dmb	ish
   dcd72:	f011 0101 	ands.w	r1, r1, #1
   dcd76:	d10f      	bne.n	dcd98 <_Z16_fetch_usbserialv+0x38>
   dcd78:	4620      	mov	r0, r4
   dcd7a:	9101      	str	r1, [sp, #4]
   dcd7c:	f7f7 f99c 	bl	d40b8 <__cxa_guard_acquire>
   dcd80:	9901      	ldr	r1, [sp, #4]
   dcd82:	b148      	cbz	r0, dcd98 <_Z16_fetch_usbserialv+0x38>
   dcd84:	aa03      	add	r2, sp, #12
   dcd86:	4807      	ldr	r0, [pc, #28]	; (dcda4 <_Z16_fetch_usbserialv+0x44>)
   dcd88:	f7ff ffc6 	bl	dcd18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dcd8c:	4620      	mov	r0, r4
   dcd8e:	f7f7 f998 	bl	d40c2 <__cxa_guard_release>
   dcd92:	4805      	ldr	r0, [pc, #20]	; (dcda8 <_Z16_fetch_usbserialv+0x48>)
   dcd94:	f000 fd82 	bl	dd89c <atexit>
	return _usbserial;
}
   dcd98:	4802      	ldr	r0, [pc, #8]	; (dcda4 <_Z16_fetch_usbserialv+0x44>)
   dcd9a:	b008      	add	sp, #32
   dcd9c:	bd10      	pop	{r4, pc}
   dcd9e:	bf00      	nop
   dcda0:	2003e718 	.word	0x2003e718
   dcda4:	2003e71c 	.word	0x2003e71c
   dcda8:	000dcca1 	.word	0x000dcca1

000dcdac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   dcdac:	4b01      	ldr	r3, [pc, #4]	; (dcdb4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   dcdae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   dcdb0:	4770      	bx	lr
   dcdb2:	bf00      	nop
   dcdb4:	2003dcb4 	.word	0x2003dcb4

000dcdb8 <serialEventRun>:
{
   dcdb8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dcdba:	4b0b      	ldr	r3, [pc, #44]	; (dcde8 <serialEventRun+0x30>)
   dcdbc:	b143      	cbz	r3, dcdd0 <serialEventRun+0x18>
   dcdbe:	f7ff ffcf 	bl	dcd60 <_Z16_fetch_usbserialv>
   dcdc2:	6803      	ldr	r3, [r0, #0]
   dcdc4:	691b      	ldr	r3, [r3, #16]
   dcdc6:	4798      	blx	r3
   dcdc8:	2800      	cmp	r0, #0
   dcdca:	dd01      	ble.n	dcdd0 <serialEventRun+0x18>
        serialEvent();
   dcdcc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   dcdd0:	4b06      	ldr	r3, [pc, #24]	; (dcdec <serialEventRun+0x34>)
   dcdd2:	b143      	cbz	r3, dcde6 <serialEventRun+0x2e>
   dcdd4:	f7ff ff3c 	bl	dcc50 <_Z22__fetch_global_Serial1v>
   dcdd8:	6803      	ldr	r3, [r0, #0]
   dcdda:	691b      	ldr	r3, [r3, #16]
   dcddc:	4798      	blx	r3
   dcdde:	2800      	cmp	r0, #0
   dcde0:	dd01      	ble.n	dcde6 <serialEventRun+0x2e>
        serialEvent1();
   dcde2:	f3af 8000 	nop.w
}
   dcde6:	bd08      	pop	{r3, pc}
	...

000dcdf0 <_post_loop>:
{
   dcdf0:	b508      	push	{r3, lr}
	serialEventRun();
   dcdf2:	f7ff ffe1 	bl	dcdb8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dcdf6:	f7fc ff49 	bl	d9c8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dcdfa:	4b01      	ldr	r3, [pc, #4]	; (dce00 <_post_loop+0x10>)
   dcdfc:	6018      	str	r0, [r3, #0]
}
   dcdfe:	bd08      	pop	{r3, pc}
   dce00:	2003e738 	.word	0x2003e738

000dce04 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dce04:	4805      	ldr	r0, [pc, #20]	; (dce1c <_Z33system_initialize_user_backup_ramv+0x18>)
   dce06:	4a06      	ldr	r2, [pc, #24]	; (dce20 <_Z33system_initialize_user_backup_ramv+0x1c>)
   dce08:	4906      	ldr	r1, [pc, #24]	; (dce24 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   dce0a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dce0c:	1a12      	subs	r2, r2, r0
   dce0e:	f000 fd5d 	bl	dd8cc <memcpy>
    __backup_sram_signature = signature;
   dce12:	4b05      	ldr	r3, [pc, #20]	; (dce28 <_Z33system_initialize_user_backup_ramv+0x24>)
   dce14:	4a05      	ldr	r2, [pc, #20]	; (dce2c <_Z33system_initialize_user_backup_ramv+0x28>)
   dce16:	601a      	str	r2, [r3, #0]
}
   dce18:	bd08      	pop	{r3, pc}
   dce1a:	bf00      	nop
   dce1c:	2003f400 	.word	0x2003f400
   dce20:	2003f404 	.word	0x2003f404
   dce24:	000df0d0 	.word	0x000df0d0
   dce28:	2003f400 	.word	0x2003f400
   dce2c:	9a271c1e 	.word	0x9a271c1e

000dce30 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dce30:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dce32:	2300      	movs	r3, #0
   dce34:	9300      	str	r3, [sp, #0]
   dce36:	461a      	mov	r2, r3
   dce38:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dce3c:	f7fd f9ba 	bl	da1b4 <system_ctrl_set_result>
}
   dce40:	b003      	add	sp, #12
   dce42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dce48 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   dce48:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dce4a:	8843      	ldrh	r3, [r0, #2]
   dce4c:	2b0a      	cmp	r3, #10
   dce4e:	d008      	beq.n	dce62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dce50:	2b50      	cmp	r3, #80	; 0x50
   dce52:	d10b      	bne.n	dce6c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   dce54:	4b09      	ldr	r3, [pc, #36]	; (dce7c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dce56:	681b      	ldr	r3, [r3, #0]
   dce58:	b14b      	cbz	r3, dce6e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   dce5a:	b003      	add	sp, #12
   dce5c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   dce60:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   dce62:	f7ff ffe5 	bl	dce30 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   dce66:	b003      	add	sp, #12
   dce68:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dce6c:	2300      	movs	r3, #0
   dce6e:	9300      	str	r3, [sp, #0]
   dce70:	461a      	mov	r2, r3
   dce72:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dce76:	f7fd f99d 	bl	da1b4 <system_ctrl_set_result>
}
   dce7a:	e7f4      	b.n	dce66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   dce7c:	2003e734 	.word	0x2003e734

000dce80 <module_user_init_hook>:
{
   dce80:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dce82:	4812      	ldr	r0, [pc, #72]	; (dcecc <module_user_init_hook+0x4c>)
   dce84:	2100      	movs	r1, #0
   dce86:	f7fd fab9 	bl	da3fc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   dce8a:	4b11      	ldr	r3, [pc, #68]	; (dced0 <module_user_init_hook+0x50>)
   dce8c:	681a      	ldr	r2, [r3, #0]
   dce8e:	4b11      	ldr	r3, [pc, #68]	; (dced4 <module_user_init_hook+0x54>)
   dce90:	429a      	cmp	r2, r3
   dce92:	4b11      	ldr	r3, [pc, #68]	; (dced8 <module_user_init_hook+0x58>)
   dce94:	bf0c      	ite	eq
   dce96:	2201      	moveq	r2, #1
   dce98:	2200      	movne	r2, #0
   dce9a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dce9c:	d001      	beq.n	dcea2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   dce9e:	f7ff ffb1 	bl	dce04 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dcea2:	f7fc fedb 	bl	d9c5c <HAL_RNG_GetRandomNumber>
   dcea6:	4604      	mov	r4, r0
    srand(seed);
   dcea8:	f000 fd40 	bl	dd92c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dceac:	4b0b      	ldr	r3, [pc, #44]	; (dcedc <module_user_init_hook+0x5c>)
   dceae:	b113      	cbz	r3, dceb6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   dceb0:	4620      	mov	r0, r4
   dceb2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dceb6:	2100      	movs	r1, #0
   dceb8:	4808      	ldr	r0, [pc, #32]	; (dcedc <module_user_init_hook+0x5c>)
   dceba:	f7fd f9df 	bl	da27c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   dcebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dcec2:	4807      	ldr	r0, [pc, #28]	; (dcee0 <module_user_init_hook+0x60>)
   dcec4:	2100      	movs	r1, #0
   dcec6:	f7fd b96b 	b.w	da1a0 <system_ctrl_set_app_request_handler>
   dceca:	bf00      	nop
   dcecc:	000dcdad 	.word	0x000dcdad
   dced0:	2003f400 	.word	0x2003f400
   dced4:	9a271c1e 	.word	0x9a271c1e
   dced8:	2003e730 	.word	0x2003e730
   dcedc:	00000000 	.word	0x00000000
   dcee0:	000dce49 	.word	0x000dce49

000dcee4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   dcee4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   dcee6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   dcee8:	d902      	bls.n	dcef0 <pinAvailable+0xc>
    return false;
   dceea:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   dceec:	b002      	add	sp, #8
   dceee:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   dcef0:	f1a0 030b 	sub.w	r3, r0, #11
   dcef4:	2b02      	cmp	r3, #2
   dcef6:	d81a      	bhi.n	dcf2e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dcef8:	4c17      	ldr	r4, [pc, #92]	; (dcf58 <pinAvailable+0x74>)
   dcefa:	7821      	ldrb	r1, [r4, #0]
   dcefc:	f3bf 8f5b 	dmb	ish
   dcf00:	f011 0101 	ands.w	r1, r1, #1
   dcf04:	d10b      	bne.n	dcf1e <pinAvailable+0x3a>
   dcf06:	4620      	mov	r0, r4
   dcf08:	9101      	str	r1, [sp, #4]
   dcf0a:	f7f7 f8d5 	bl	d40b8 <__cxa_guard_acquire>
   dcf0e:	9901      	ldr	r1, [sp, #4]
   dcf10:	b128      	cbz	r0, dcf1e <pinAvailable+0x3a>
   dcf12:	4812      	ldr	r0, [pc, #72]	; (dcf5c <pinAvailable+0x78>)
   dcf14:	f7ff fa26 	bl	dc364 <_ZN8SPIClassC1E19hal_spi_interface_t>
   dcf18:	4620      	mov	r0, r4
   dcf1a:	f7f7 f8d2 	bl	d40c2 <__cxa_guard_release>
   dcf1e:	4b0f      	ldr	r3, [pc, #60]	; (dcf5c <pinAvailable+0x78>)
   dcf20:	7818      	ldrb	r0, [r3, #0]
   dcf22:	f7fc ffab 	bl	d9e7c <hal_spi_is_enabled>
   dcf26:	2800      	cmp	r0, #0
   dcf28:	d1df      	bne.n	dceea <pinAvailable+0x6>
  return true; // 'pin' is available
   dcf2a:	2001      	movs	r0, #1
   dcf2c:	e7de      	b.n	dceec <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   dcf2e:	2801      	cmp	r0, #1
   dcf30:	d809      	bhi.n	dcf46 <pinAvailable+0x62>
   dcf32:	f000 f86b 	bl	dd00c <_Z19__fetch_global_Wirev>
   dcf36:	2100      	movs	r1, #0
   dcf38:	7c00      	ldrb	r0, [r0, #16]
   dcf3a:	f7fc ff3f 	bl	d9dbc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   dcf3e:	f080 0001 	eor.w	r0, r0, #1
   dcf42:	b2c0      	uxtb	r0, r0
   dcf44:	e7d2      	b.n	dceec <pinAvailable+0x8>
   dcf46:	3809      	subs	r0, #9
   dcf48:	2801      	cmp	r0, #1
   dcf4a:	d8ee      	bhi.n	dcf2a <pinAvailable+0x46>
   dcf4c:	f7ff fe80 	bl	dcc50 <_Z22__fetch_global_Serial1v>
   dcf50:	7c00      	ldrb	r0, [r0, #16]
   dcf52:	f7fd f853 	bl	d9ffc <hal_usart_is_enabled>
   dcf56:	e7f2      	b.n	dcf3e <pinAvailable+0x5a>
   dcf58:	2003e278 	.word	0x2003e278
   dcf5c:	2003e27c 	.word	0x2003e27c

000dcf60 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dcf60:	2823      	cmp	r0, #35	; 0x23
{
   dcf62:	b538      	push	{r3, r4, r5, lr}
   dcf64:	4604      	mov	r4, r0
   dcf66:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dcf68:	d80a      	bhi.n	dcf80 <pinMode+0x20>
   dcf6a:	29ff      	cmp	r1, #255	; 0xff
   dcf6c:	d008      	beq.n	dcf80 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   dcf6e:	f7ff ffb9 	bl	dcee4 <pinAvailable>
   dcf72:	b128      	cbz	r0, dcf80 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   dcf74:	4629      	mov	r1, r5
   dcf76:	4620      	mov	r0, r4
}
   dcf78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   dcf7c:	f7fc beae 	b.w	d9cdc <HAL_Pin_Mode>
}
   dcf80:	bd38      	pop	{r3, r4, r5, pc}

000dcf82 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dcf82:	b538      	push	{r3, r4, r5, lr}
   dcf84:	4604      	mov	r4, r0
   dcf86:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dcf88:	f7fc feb0 	bl	d9cec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dcf8c:	28ff      	cmp	r0, #255	; 0xff
   dcf8e:	d010      	beq.n	dcfb2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   dcf90:	2806      	cmp	r0, #6
   dcf92:	d804      	bhi.n	dcf9e <digitalWrite+0x1c>
   dcf94:	234d      	movs	r3, #77	; 0x4d
   dcf96:	fa23 f000 	lsr.w	r0, r3, r0
   dcf9a:	07c3      	lsls	r3, r0, #31
   dcf9c:	d409      	bmi.n	dcfb2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dcf9e:	4620      	mov	r0, r4
   dcfa0:	f7ff ffa0 	bl	dcee4 <pinAvailable>
   dcfa4:	b128      	cbz	r0, dcfb2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dcfa6:	4629      	mov	r1, r5
   dcfa8:	4620      	mov	r0, r4
}
   dcfaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   dcfae:	f7fc bea5 	b.w	d9cfc <HAL_GPIO_Write>
}
   dcfb2:	bd38      	pop	{r3, r4, r5, pc}

000dcfb4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dcfb4:	b510      	push	{r4, lr}
   dcfb6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dcfb8:	f7fc fe98 	bl	d9cec <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   dcfbc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   dcfbe:	b2db      	uxtb	r3, r3
   dcfc0:	2b01      	cmp	r3, #1
   dcfc2:	d908      	bls.n	dcfd6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dcfc4:	4620      	mov	r0, r4
   dcfc6:	f7ff ff8d 	bl	dcee4 <pinAvailable>
   dcfca:	b120      	cbz	r0, dcfd6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dcfcc:	4620      	mov	r0, r4
}
   dcfce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   dcfd2:	f7fc be9b 	b.w	d9d0c <HAL_GPIO_Read>
}
   dcfd6:	2000      	movs	r0, #0
   dcfd8:	bd10      	pop	{r4, pc}

000dcfda <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dcfda:	4770      	bx	lr

000dcfdc <_Z17acquireWireBufferv>:
{
   dcfdc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   dcfde:	2300      	movs	r3, #0
   dcfe0:	2520      	movs	r5, #32
   dcfe2:	8043      	strh	r3, [r0, #2]
   dcfe4:	2314      	movs	r3, #20
{
   dcfe6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   dcfe8:	8003      	strh	r3, [r0, #0]
   dcfea:	6085      	str	r5, [r0, #8]
   dcfec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dcfee:	4906      	ldr	r1, [pc, #24]	; (dd008 <_Z17acquireWireBufferv+0x2c>)
   dcff0:	4628      	mov	r0, r5
   dcff2:	f000 f833 	bl	dd05c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dcff6:	4904      	ldr	r1, [pc, #16]	; (dd008 <_Z17acquireWireBufferv+0x2c>)
	};
   dcff8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dcffa:	4628      	mov	r0, r5
   dcffc:	f000 f82e 	bl	dd05c <_ZnajRKSt9nothrow_t>
	};
   dd000:	60e0      	str	r0, [r4, #12]
}
   dd002:	4620      	mov	r0, r4
   dd004:	bd38      	pop	{r3, r4, r5, pc}
   dd006:	bf00      	nop
   dd008:	000def3c 	.word	0x000def3c

000dd00c <_Z19__fetch_global_Wirev>:
{
   dd00c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dd00e:	4d0e      	ldr	r5, [pc, #56]	; (dd048 <_Z19__fetch_global_Wirev+0x3c>)
   dd010:	7829      	ldrb	r1, [r5, #0]
   dd012:	f3bf 8f5b 	dmb	ish
   dd016:	f011 0401 	ands.w	r4, r1, #1
{
   dd01a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dd01c:	d111      	bne.n	dd042 <_Z19__fetch_global_Wirev+0x36>
   dd01e:	4628      	mov	r0, r5
   dd020:	f7f7 f84a 	bl	d40b8 <__cxa_guard_acquire>
   dd024:	b168      	cbz	r0, dd042 <_Z19__fetch_global_Wirev+0x36>
   dd026:	a801      	add	r0, sp, #4
   dd028:	f7ff ffd8 	bl	dcfdc <_Z17acquireWireBufferv>
   dd02c:	aa01      	add	r2, sp, #4
   dd02e:	4621      	mov	r1, r4
   dd030:	4806      	ldr	r0, [pc, #24]	; (dd04c <_Z19__fetch_global_Wirev+0x40>)
   dd032:	f7fd fdc5 	bl	dabc0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dd036:	4628      	mov	r0, r5
   dd038:	f7f7 f843 	bl	d40c2 <__cxa_guard_release>
   dd03c:	4804      	ldr	r0, [pc, #16]	; (dd050 <_Z19__fetch_global_Wirev+0x44>)
   dd03e:	f000 fc2d 	bl	dd89c <atexit>
	return wire;
}
   dd042:	4802      	ldr	r0, [pc, #8]	; (dd04c <_Z19__fetch_global_Wirev+0x40>)
   dd044:	b007      	add	sp, #28
   dd046:	bd30      	pop	{r4, r5, pc}
   dd048:	2003e73c 	.word	0x2003e73c
   dd04c:	2003e740 	.word	0x2003e740
   dd050:	000dcfdb 	.word	0x000dcfdb

000dd054 <_ZdlPvj>:
   dd054:	f7f7 b823 	b.w	d409e <_ZdlPv>

000dd058 <_ZnwjRKSt9nothrow_t>:
   dd058:	f7f7 b81d 	b.w	d4096 <_Znwj>

000dd05c <_ZnajRKSt9nothrow_t>:
   dd05c:	f7f7 b81d 	b.w	d409a <_Znaj>

000dd060 <_ZSt17__throw_bad_allocv>:
   dd060:	b508      	push	{r3, lr}
   dd062:	f7fd f9b3 	bl	da3cc <abort>

000dd066 <_ZSt20__throw_length_errorPKc>:
   dd066:	b508      	push	{r3, lr}
   dd068:	f7fd f9b0 	bl	da3cc <abort>

000dd06c <_ZSt25__throw_bad_function_callv>:
   dd06c:	b508      	push	{r3, lr}
   dd06e:	f7fd f9ad 	bl	da3cc <abort>
	...

000dd074 <__aeabi_drsub>:
   dd074:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dd078:	e002      	b.n	dd080 <__adddf3>
   dd07a:	bf00      	nop

000dd07c <__aeabi_dsub>:
   dd07c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dd080 <__adddf3>:
   dd080:	b530      	push	{r4, r5, lr}
   dd082:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dd086:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dd08a:	ea94 0f05 	teq	r4, r5
   dd08e:	bf08      	it	eq
   dd090:	ea90 0f02 	teqeq	r0, r2
   dd094:	bf1f      	itttt	ne
   dd096:	ea54 0c00 	orrsne.w	ip, r4, r0
   dd09a:	ea55 0c02 	orrsne.w	ip, r5, r2
   dd09e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dd0a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dd0a6:	f000 80e2 	beq.w	dd26e <__adddf3+0x1ee>
   dd0aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dd0ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dd0b2:	bfb8      	it	lt
   dd0b4:	426d      	neglt	r5, r5
   dd0b6:	dd0c      	ble.n	dd0d2 <__adddf3+0x52>
   dd0b8:	442c      	add	r4, r5
   dd0ba:	ea80 0202 	eor.w	r2, r0, r2
   dd0be:	ea81 0303 	eor.w	r3, r1, r3
   dd0c2:	ea82 0000 	eor.w	r0, r2, r0
   dd0c6:	ea83 0101 	eor.w	r1, r3, r1
   dd0ca:	ea80 0202 	eor.w	r2, r0, r2
   dd0ce:	ea81 0303 	eor.w	r3, r1, r3
   dd0d2:	2d36      	cmp	r5, #54	; 0x36
   dd0d4:	bf88      	it	hi
   dd0d6:	bd30      	pophi	{r4, r5, pc}
   dd0d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dd0dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dd0e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dd0e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dd0e8:	d002      	beq.n	dd0f0 <__adddf3+0x70>
   dd0ea:	4240      	negs	r0, r0
   dd0ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd0f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dd0f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dd0f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dd0fc:	d002      	beq.n	dd104 <__adddf3+0x84>
   dd0fe:	4252      	negs	r2, r2
   dd100:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd104:	ea94 0f05 	teq	r4, r5
   dd108:	f000 80a7 	beq.w	dd25a <__adddf3+0x1da>
   dd10c:	f1a4 0401 	sub.w	r4, r4, #1
   dd110:	f1d5 0e20 	rsbs	lr, r5, #32
   dd114:	db0d      	blt.n	dd132 <__adddf3+0xb2>
   dd116:	fa02 fc0e 	lsl.w	ip, r2, lr
   dd11a:	fa22 f205 	lsr.w	r2, r2, r5
   dd11e:	1880      	adds	r0, r0, r2
   dd120:	f141 0100 	adc.w	r1, r1, #0
   dd124:	fa03 f20e 	lsl.w	r2, r3, lr
   dd128:	1880      	adds	r0, r0, r2
   dd12a:	fa43 f305 	asr.w	r3, r3, r5
   dd12e:	4159      	adcs	r1, r3
   dd130:	e00e      	b.n	dd150 <__adddf3+0xd0>
   dd132:	f1a5 0520 	sub.w	r5, r5, #32
   dd136:	f10e 0e20 	add.w	lr, lr, #32
   dd13a:	2a01      	cmp	r2, #1
   dd13c:	fa03 fc0e 	lsl.w	ip, r3, lr
   dd140:	bf28      	it	cs
   dd142:	f04c 0c02 	orrcs.w	ip, ip, #2
   dd146:	fa43 f305 	asr.w	r3, r3, r5
   dd14a:	18c0      	adds	r0, r0, r3
   dd14c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dd150:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd154:	d507      	bpl.n	dd166 <__adddf3+0xe6>
   dd156:	f04f 0e00 	mov.w	lr, #0
   dd15a:	f1dc 0c00 	rsbs	ip, ip, #0
   dd15e:	eb7e 0000 	sbcs.w	r0, lr, r0
   dd162:	eb6e 0101 	sbc.w	r1, lr, r1
   dd166:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dd16a:	d31b      	bcc.n	dd1a4 <__adddf3+0x124>
   dd16c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dd170:	d30c      	bcc.n	dd18c <__adddf3+0x10c>
   dd172:	0849      	lsrs	r1, r1, #1
   dd174:	ea5f 0030 	movs.w	r0, r0, rrx
   dd178:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dd17c:	f104 0401 	add.w	r4, r4, #1
   dd180:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dd184:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dd188:	f080 809a 	bcs.w	dd2c0 <__adddf3+0x240>
   dd18c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dd190:	bf08      	it	eq
   dd192:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dd196:	f150 0000 	adcs.w	r0, r0, #0
   dd19a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd19e:	ea41 0105 	orr.w	r1, r1, r5
   dd1a2:	bd30      	pop	{r4, r5, pc}
   dd1a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dd1a8:	4140      	adcs	r0, r0
   dd1aa:	eb41 0101 	adc.w	r1, r1, r1
   dd1ae:	3c01      	subs	r4, #1
   dd1b0:	bf28      	it	cs
   dd1b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dd1b6:	d2e9      	bcs.n	dd18c <__adddf3+0x10c>
   dd1b8:	f091 0f00 	teq	r1, #0
   dd1bc:	bf04      	itt	eq
   dd1be:	4601      	moveq	r1, r0
   dd1c0:	2000      	moveq	r0, #0
   dd1c2:	fab1 f381 	clz	r3, r1
   dd1c6:	bf08      	it	eq
   dd1c8:	3320      	addeq	r3, #32
   dd1ca:	f1a3 030b 	sub.w	r3, r3, #11
   dd1ce:	f1b3 0220 	subs.w	r2, r3, #32
   dd1d2:	da0c      	bge.n	dd1ee <__adddf3+0x16e>
   dd1d4:	320c      	adds	r2, #12
   dd1d6:	dd08      	ble.n	dd1ea <__adddf3+0x16a>
   dd1d8:	f102 0c14 	add.w	ip, r2, #20
   dd1dc:	f1c2 020c 	rsb	r2, r2, #12
   dd1e0:	fa01 f00c 	lsl.w	r0, r1, ip
   dd1e4:	fa21 f102 	lsr.w	r1, r1, r2
   dd1e8:	e00c      	b.n	dd204 <__adddf3+0x184>
   dd1ea:	f102 0214 	add.w	r2, r2, #20
   dd1ee:	bfd8      	it	le
   dd1f0:	f1c2 0c20 	rsble	ip, r2, #32
   dd1f4:	fa01 f102 	lsl.w	r1, r1, r2
   dd1f8:	fa20 fc0c 	lsr.w	ip, r0, ip
   dd1fc:	bfdc      	itt	le
   dd1fe:	ea41 010c 	orrle.w	r1, r1, ip
   dd202:	4090      	lslle	r0, r2
   dd204:	1ae4      	subs	r4, r4, r3
   dd206:	bfa2      	ittt	ge
   dd208:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dd20c:	4329      	orrge	r1, r5
   dd20e:	bd30      	popge	{r4, r5, pc}
   dd210:	ea6f 0404 	mvn.w	r4, r4
   dd214:	3c1f      	subs	r4, #31
   dd216:	da1c      	bge.n	dd252 <__adddf3+0x1d2>
   dd218:	340c      	adds	r4, #12
   dd21a:	dc0e      	bgt.n	dd23a <__adddf3+0x1ba>
   dd21c:	f104 0414 	add.w	r4, r4, #20
   dd220:	f1c4 0220 	rsb	r2, r4, #32
   dd224:	fa20 f004 	lsr.w	r0, r0, r4
   dd228:	fa01 f302 	lsl.w	r3, r1, r2
   dd22c:	ea40 0003 	orr.w	r0, r0, r3
   dd230:	fa21 f304 	lsr.w	r3, r1, r4
   dd234:	ea45 0103 	orr.w	r1, r5, r3
   dd238:	bd30      	pop	{r4, r5, pc}
   dd23a:	f1c4 040c 	rsb	r4, r4, #12
   dd23e:	f1c4 0220 	rsb	r2, r4, #32
   dd242:	fa20 f002 	lsr.w	r0, r0, r2
   dd246:	fa01 f304 	lsl.w	r3, r1, r4
   dd24a:	ea40 0003 	orr.w	r0, r0, r3
   dd24e:	4629      	mov	r1, r5
   dd250:	bd30      	pop	{r4, r5, pc}
   dd252:	fa21 f004 	lsr.w	r0, r1, r4
   dd256:	4629      	mov	r1, r5
   dd258:	bd30      	pop	{r4, r5, pc}
   dd25a:	f094 0f00 	teq	r4, #0
   dd25e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dd262:	bf06      	itte	eq
   dd264:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dd268:	3401      	addeq	r4, #1
   dd26a:	3d01      	subne	r5, #1
   dd26c:	e74e      	b.n	dd10c <__adddf3+0x8c>
   dd26e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dd272:	bf18      	it	ne
   dd274:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dd278:	d029      	beq.n	dd2ce <__adddf3+0x24e>
   dd27a:	ea94 0f05 	teq	r4, r5
   dd27e:	bf08      	it	eq
   dd280:	ea90 0f02 	teqeq	r0, r2
   dd284:	d005      	beq.n	dd292 <__adddf3+0x212>
   dd286:	ea54 0c00 	orrs.w	ip, r4, r0
   dd28a:	bf04      	itt	eq
   dd28c:	4619      	moveq	r1, r3
   dd28e:	4610      	moveq	r0, r2
   dd290:	bd30      	pop	{r4, r5, pc}
   dd292:	ea91 0f03 	teq	r1, r3
   dd296:	bf1e      	ittt	ne
   dd298:	2100      	movne	r1, #0
   dd29a:	2000      	movne	r0, #0
   dd29c:	bd30      	popne	{r4, r5, pc}
   dd29e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dd2a2:	d105      	bne.n	dd2b0 <__adddf3+0x230>
   dd2a4:	0040      	lsls	r0, r0, #1
   dd2a6:	4149      	adcs	r1, r1
   dd2a8:	bf28      	it	cs
   dd2aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dd2ae:	bd30      	pop	{r4, r5, pc}
   dd2b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dd2b4:	bf3c      	itt	cc
   dd2b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dd2ba:	bd30      	popcc	{r4, r5, pc}
   dd2bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd2c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dd2c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dd2c8:	f04f 0000 	mov.w	r0, #0
   dd2cc:	bd30      	pop	{r4, r5, pc}
   dd2ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dd2d2:	bf1a      	itte	ne
   dd2d4:	4619      	movne	r1, r3
   dd2d6:	4610      	movne	r0, r2
   dd2d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dd2dc:	bf1c      	itt	ne
   dd2de:	460b      	movne	r3, r1
   dd2e0:	4602      	movne	r2, r0
   dd2e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dd2e6:	bf06      	itte	eq
   dd2e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dd2ec:	ea91 0f03 	teqeq	r1, r3
   dd2f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dd2f4:	bd30      	pop	{r4, r5, pc}
   dd2f6:	bf00      	nop

000dd2f8 <__aeabi_ui2d>:
   dd2f8:	f090 0f00 	teq	r0, #0
   dd2fc:	bf04      	itt	eq
   dd2fe:	2100      	moveq	r1, #0
   dd300:	4770      	bxeq	lr
   dd302:	b530      	push	{r4, r5, lr}
   dd304:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dd308:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dd30c:	f04f 0500 	mov.w	r5, #0
   dd310:	f04f 0100 	mov.w	r1, #0
   dd314:	e750      	b.n	dd1b8 <__adddf3+0x138>
   dd316:	bf00      	nop

000dd318 <__aeabi_i2d>:
   dd318:	f090 0f00 	teq	r0, #0
   dd31c:	bf04      	itt	eq
   dd31e:	2100      	moveq	r1, #0
   dd320:	4770      	bxeq	lr
   dd322:	b530      	push	{r4, r5, lr}
   dd324:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dd328:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dd32c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dd330:	bf48      	it	mi
   dd332:	4240      	negmi	r0, r0
   dd334:	f04f 0100 	mov.w	r1, #0
   dd338:	e73e      	b.n	dd1b8 <__adddf3+0x138>
   dd33a:	bf00      	nop

000dd33c <__aeabi_f2d>:
   dd33c:	0042      	lsls	r2, r0, #1
   dd33e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dd342:	ea4f 0131 	mov.w	r1, r1, rrx
   dd346:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dd34a:	bf1f      	itttt	ne
   dd34c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dd350:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dd354:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dd358:	4770      	bxne	lr
   dd35a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dd35e:	bf08      	it	eq
   dd360:	4770      	bxeq	lr
   dd362:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dd366:	bf04      	itt	eq
   dd368:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dd36c:	4770      	bxeq	lr
   dd36e:	b530      	push	{r4, r5, lr}
   dd370:	f44f 7460 	mov.w	r4, #896	; 0x380
   dd374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd378:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dd37c:	e71c      	b.n	dd1b8 <__adddf3+0x138>
   dd37e:	bf00      	nop

000dd380 <__aeabi_ul2d>:
   dd380:	ea50 0201 	orrs.w	r2, r0, r1
   dd384:	bf08      	it	eq
   dd386:	4770      	bxeq	lr
   dd388:	b530      	push	{r4, r5, lr}
   dd38a:	f04f 0500 	mov.w	r5, #0
   dd38e:	e00a      	b.n	dd3a6 <__aeabi_l2d+0x16>

000dd390 <__aeabi_l2d>:
   dd390:	ea50 0201 	orrs.w	r2, r0, r1
   dd394:	bf08      	it	eq
   dd396:	4770      	bxeq	lr
   dd398:	b530      	push	{r4, r5, lr}
   dd39a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dd39e:	d502      	bpl.n	dd3a6 <__aeabi_l2d+0x16>
   dd3a0:	4240      	negs	r0, r0
   dd3a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd3a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dd3aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dd3ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dd3b2:	f43f aed8 	beq.w	dd166 <__adddf3+0xe6>
   dd3b6:	f04f 0203 	mov.w	r2, #3
   dd3ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dd3be:	bf18      	it	ne
   dd3c0:	3203      	addne	r2, #3
   dd3c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dd3c6:	bf18      	it	ne
   dd3c8:	3203      	addne	r2, #3
   dd3ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dd3ce:	f1c2 0320 	rsb	r3, r2, #32
   dd3d2:	fa00 fc03 	lsl.w	ip, r0, r3
   dd3d6:	fa20 f002 	lsr.w	r0, r0, r2
   dd3da:	fa01 fe03 	lsl.w	lr, r1, r3
   dd3de:	ea40 000e 	orr.w	r0, r0, lr
   dd3e2:	fa21 f102 	lsr.w	r1, r1, r2
   dd3e6:	4414      	add	r4, r2
   dd3e8:	e6bd      	b.n	dd166 <__adddf3+0xe6>
   dd3ea:	bf00      	nop

000dd3ec <__aeabi_dmul>:
   dd3ec:	b570      	push	{r4, r5, r6, lr}
   dd3ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dd3f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dd3f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dd3fa:	bf1d      	ittte	ne
   dd3fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dd400:	ea94 0f0c 	teqne	r4, ip
   dd404:	ea95 0f0c 	teqne	r5, ip
   dd408:	f000 f8de 	bleq	dd5c8 <__aeabi_dmul+0x1dc>
   dd40c:	442c      	add	r4, r5
   dd40e:	ea81 0603 	eor.w	r6, r1, r3
   dd412:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dd416:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dd41a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dd41e:	bf18      	it	ne
   dd420:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dd424:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd42c:	d038      	beq.n	dd4a0 <__aeabi_dmul+0xb4>
   dd42e:	fba0 ce02 	umull	ip, lr, r0, r2
   dd432:	f04f 0500 	mov.w	r5, #0
   dd436:	fbe1 e502 	umlal	lr, r5, r1, r2
   dd43a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dd43e:	fbe0 e503 	umlal	lr, r5, r0, r3
   dd442:	f04f 0600 	mov.w	r6, #0
   dd446:	fbe1 5603 	umlal	r5, r6, r1, r3
   dd44a:	f09c 0f00 	teq	ip, #0
   dd44e:	bf18      	it	ne
   dd450:	f04e 0e01 	orrne.w	lr, lr, #1
   dd454:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dd458:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dd45c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dd460:	d204      	bcs.n	dd46c <__aeabi_dmul+0x80>
   dd462:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dd466:	416d      	adcs	r5, r5
   dd468:	eb46 0606 	adc.w	r6, r6, r6
   dd46c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dd470:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dd474:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dd478:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dd47c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dd480:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dd484:	bf88      	it	hi
   dd486:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dd48a:	d81e      	bhi.n	dd4ca <__aeabi_dmul+0xde>
   dd48c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dd490:	bf08      	it	eq
   dd492:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dd496:	f150 0000 	adcs.w	r0, r0, #0
   dd49a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd49e:	bd70      	pop	{r4, r5, r6, pc}
   dd4a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dd4a4:	ea46 0101 	orr.w	r1, r6, r1
   dd4a8:	ea40 0002 	orr.w	r0, r0, r2
   dd4ac:	ea81 0103 	eor.w	r1, r1, r3
   dd4b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dd4b4:	bfc2      	ittt	gt
   dd4b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   dd4ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dd4be:	bd70      	popgt	{r4, r5, r6, pc}
   dd4c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd4c4:	f04f 0e00 	mov.w	lr, #0
   dd4c8:	3c01      	subs	r4, #1
   dd4ca:	f300 80ab 	bgt.w	dd624 <__aeabi_dmul+0x238>
   dd4ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dd4d2:	bfde      	ittt	le
   dd4d4:	2000      	movle	r0, #0
   dd4d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dd4da:	bd70      	pople	{r4, r5, r6, pc}
   dd4dc:	f1c4 0400 	rsb	r4, r4, #0
   dd4e0:	3c20      	subs	r4, #32
   dd4e2:	da35      	bge.n	dd550 <__aeabi_dmul+0x164>
   dd4e4:	340c      	adds	r4, #12
   dd4e6:	dc1b      	bgt.n	dd520 <__aeabi_dmul+0x134>
   dd4e8:	f104 0414 	add.w	r4, r4, #20
   dd4ec:	f1c4 0520 	rsb	r5, r4, #32
   dd4f0:	fa00 f305 	lsl.w	r3, r0, r5
   dd4f4:	fa20 f004 	lsr.w	r0, r0, r4
   dd4f8:	fa01 f205 	lsl.w	r2, r1, r5
   dd4fc:	ea40 0002 	orr.w	r0, r0, r2
   dd500:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dd504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dd508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dd50c:	fa21 f604 	lsr.w	r6, r1, r4
   dd510:	eb42 0106 	adc.w	r1, r2, r6
   dd514:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dd518:	bf08      	it	eq
   dd51a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dd51e:	bd70      	pop	{r4, r5, r6, pc}
   dd520:	f1c4 040c 	rsb	r4, r4, #12
   dd524:	f1c4 0520 	rsb	r5, r4, #32
   dd528:	fa00 f304 	lsl.w	r3, r0, r4
   dd52c:	fa20 f005 	lsr.w	r0, r0, r5
   dd530:	fa01 f204 	lsl.w	r2, r1, r4
   dd534:	ea40 0002 	orr.w	r0, r0, r2
   dd538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dd53c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dd540:	f141 0100 	adc.w	r1, r1, #0
   dd544:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dd548:	bf08      	it	eq
   dd54a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dd54e:	bd70      	pop	{r4, r5, r6, pc}
   dd550:	f1c4 0520 	rsb	r5, r4, #32
   dd554:	fa00 f205 	lsl.w	r2, r0, r5
   dd558:	ea4e 0e02 	orr.w	lr, lr, r2
   dd55c:	fa20 f304 	lsr.w	r3, r0, r4
   dd560:	fa01 f205 	lsl.w	r2, r1, r5
   dd564:	ea43 0302 	orr.w	r3, r3, r2
   dd568:	fa21 f004 	lsr.w	r0, r1, r4
   dd56c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dd570:	fa21 f204 	lsr.w	r2, r1, r4
   dd574:	ea20 0002 	bic.w	r0, r0, r2
   dd578:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dd57c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dd580:	bf08      	it	eq
   dd582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dd586:	bd70      	pop	{r4, r5, r6, pc}
   dd588:	f094 0f00 	teq	r4, #0
   dd58c:	d10f      	bne.n	dd5ae <__aeabi_dmul+0x1c2>
   dd58e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dd592:	0040      	lsls	r0, r0, #1
   dd594:	eb41 0101 	adc.w	r1, r1, r1
   dd598:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd59c:	bf08      	it	eq
   dd59e:	3c01      	subeq	r4, #1
   dd5a0:	d0f7      	beq.n	dd592 <__aeabi_dmul+0x1a6>
   dd5a2:	ea41 0106 	orr.w	r1, r1, r6
   dd5a6:	f095 0f00 	teq	r5, #0
   dd5aa:	bf18      	it	ne
   dd5ac:	4770      	bxne	lr
   dd5ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dd5b2:	0052      	lsls	r2, r2, #1
   dd5b4:	eb43 0303 	adc.w	r3, r3, r3
   dd5b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dd5bc:	bf08      	it	eq
   dd5be:	3d01      	subeq	r5, #1
   dd5c0:	d0f7      	beq.n	dd5b2 <__aeabi_dmul+0x1c6>
   dd5c2:	ea43 0306 	orr.w	r3, r3, r6
   dd5c6:	4770      	bx	lr
   dd5c8:	ea94 0f0c 	teq	r4, ip
   dd5cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dd5d0:	bf18      	it	ne
   dd5d2:	ea95 0f0c 	teqne	r5, ip
   dd5d6:	d00c      	beq.n	dd5f2 <__aeabi_dmul+0x206>
   dd5d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dd5dc:	bf18      	it	ne
   dd5de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dd5e2:	d1d1      	bne.n	dd588 <__aeabi_dmul+0x19c>
   dd5e4:	ea81 0103 	eor.w	r1, r1, r3
   dd5e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dd5ec:	f04f 0000 	mov.w	r0, #0
   dd5f0:	bd70      	pop	{r4, r5, r6, pc}
   dd5f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dd5f6:	bf06      	itte	eq
   dd5f8:	4610      	moveq	r0, r2
   dd5fa:	4619      	moveq	r1, r3
   dd5fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dd600:	d019      	beq.n	dd636 <__aeabi_dmul+0x24a>
   dd602:	ea94 0f0c 	teq	r4, ip
   dd606:	d102      	bne.n	dd60e <__aeabi_dmul+0x222>
   dd608:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dd60c:	d113      	bne.n	dd636 <__aeabi_dmul+0x24a>
   dd60e:	ea95 0f0c 	teq	r5, ip
   dd612:	d105      	bne.n	dd620 <__aeabi_dmul+0x234>
   dd614:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dd618:	bf1c      	itt	ne
   dd61a:	4610      	movne	r0, r2
   dd61c:	4619      	movne	r1, r3
   dd61e:	d10a      	bne.n	dd636 <__aeabi_dmul+0x24a>
   dd620:	ea81 0103 	eor.w	r1, r1, r3
   dd624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dd628:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dd62c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dd630:	f04f 0000 	mov.w	r0, #0
   dd634:	bd70      	pop	{r4, r5, r6, pc}
   dd636:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dd63a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dd63e:	bd70      	pop	{r4, r5, r6, pc}

000dd640 <__aeabi_ddiv>:
   dd640:	b570      	push	{r4, r5, r6, lr}
   dd642:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dd646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dd64a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dd64e:	bf1d      	ittte	ne
   dd650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dd654:	ea94 0f0c 	teqne	r4, ip
   dd658:	ea95 0f0c 	teqne	r5, ip
   dd65c:	f000 f8a7 	bleq	dd7ae <__aeabi_ddiv+0x16e>
   dd660:	eba4 0405 	sub.w	r4, r4, r5
   dd664:	ea81 0e03 	eor.w	lr, r1, r3
   dd668:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dd66c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dd670:	f000 8088 	beq.w	dd784 <__aeabi_ddiv+0x144>
   dd674:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dd678:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dd67c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dd680:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dd684:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dd688:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dd68c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dd690:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dd694:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dd698:	429d      	cmp	r5, r3
   dd69a:	bf08      	it	eq
   dd69c:	4296      	cmpeq	r6, r2
   dd69e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dd6a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dd6a6:	d202      	bcs.n	dd6ae <__aeabi_ddiv+0x6e>
   dd6a8:	085b      	lsrs	r3, r3, #1
   dd6aa:	ea4f 0232 	mov.w	r2, r2, rrx
   dd6ae:	1ab6      	subs	r6, r6, r2
   dd6b0:	eb65 0503 	sbc.w	r5, r5, r3
   dd6b4:	085b      	lsrs	r3, r3, #1
   dd6b6:	ea4f 0232 	mov.w	r2, r2, rrx
   dd6ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dd6be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dd6c2:	ebb6 0e02 	subs.w	lr, r6, r2
   dd6c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd6ca:	bf22      	ittt	cs
   dd6cc:	1ab6      	subcs	r6, r6, r2
   dd6ce:	4675      	movcs	r5, lr
   dd6d0:	ea40 000c 	orrcs.w	r0, r0, ip
   dd6d4:	085b      	lsrs	r3, r3, #1
   dd6d6:	ea4f 0232 	mov.w	r2, r2, rrx
   dd6da:	ebb6 0e02 	subs.w	lr, r6, r2
   dd6de:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd6e2:	bf22      	ittt	cs
   dd6e4:	1ab6      	subcs	r6, r6, r2
   dd6e6:	4675      	movcs	r5, lr
   dd6e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dd6ec:	085b      	lsrs	r3, r3, #1
   dd6ee:	ea4f 0232 	mov.w	r2, r2, rrx
   dd6f2:	ebb6 0e02 	subs.w	lr, r6, r2
   dd6f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd6fa:	bf22      	ittt	cs
   dd6fc:	1ab6      	subcs	r6, r6, r2
   dd6fe:	4675      	movcs	r5, lr
   dd700:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dd704:	085b      	lsrs	r3, r3, #1
   dd706:	ea4f 0232 	mov.w	r2, r2, rrx
   dd70a:	ebb6 0e02 	subs.w	lr, r6, r2
   dd70e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd712:	bf22      	ittt	cs
   dd714:	1ab6      	subcs	r6, r6, r2
   dd716:	4675      	movcs	r5, lr
   dd718:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dd71c:	ea55 0e06 	orrs.w	lr, r5, r6
   dd720:	d018      	beq.n	dd754 <__aeabi_ddiv+0x114>
   dd722:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dd726:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dd72a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dd72e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dd732:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dd736:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dd73a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dd73e:	d1c0      	bne.n	dd6c2 <__aeabi_ddiv+0x82>
   dd740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd744:	d10b      	bne.n	dd75e <__aeabi_ddiv+0x11e>
   dd746:	ea41 0100 	orr.w	r1, r1, r0
   dd74a:	f04f 0000 	mov.w	r0, #0
   dd74e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dd752:	e7b6      	b.n	dd6c2 <__aeabi_ddiv+0x82>
   dd754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd758:	bf04      	itt	eq
   dd75a:	4301      	orreq	r1, r0
   dd75c:	2000      	moveq	r0, #0
   dd75e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dd762:	bf88      	it	hi
   dd764:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dd768:	f63f aeaf 	bhi.w	dd4ca <__aeabi_dmul+0xde>
   dd76c:	ebb5 0c03 	subs.w	ip, r5, r3
   dd770:	bf04      	itt	eq
   dd772:	ebb6 0c02 	subseq.w	ip, r6, r2
   dd776:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dd77a:	f150 0000 	adcs.w	r0, r0, #0
   dd77e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd782:	bd70      	pop	{r4, r5, r6, pc}
   dd784:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dd788:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dd78c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dd790:	bfc2      	ittt	gt
   dd792:	ebd4 050c 	rsbsgt	r5, r4, ip
   dd796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dd79a:	bd70      	popgt	{r4, r5, r6, pc}
   dd79c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd7a0:	f04f 0e00 	mov.w	lr, #0
   dd7a4:	3c01      	subs	r4, #1
   dd7a6:	e690      	b.n	dd4ca <__aeabi_dmul+0xde>
   dd7a8:	ea45 0e06 	orr.w	lr, r5, r6
   dd7ac:	e68d      	b.n	dd4ca <__aeabi_dmul+0xde>
   dd7ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dd7b2:	ea94 0f0c 	teq	r4, ip
   dd7b6:	bf08      	it	eq
   dd7b8:	ea95 0f0c 	teqeq	r5, ip
   dd7bc:	f43f af3b 	beq.w	dd636 <__aeabi_dmul+0x24a>
   dd7c0:	ea94 0f0c 	teq	r4, ip
   dd7c4:	d10a      	bne.n	dd7dc <__aeabi_ddiv+0x19c>
   dd7c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dd7ca:	f47f af34 	bne.w	dd636 <__aeabi_dmul+0x24a>
   dd7ce:	ea95 0f0c 	teq	r5, ip
   dd7d2:	f47f af25 	bne.w	dd620 <__aeabi_dmul+0x234>
   dd7d6:	4610      	mov	r0, r2
   dd7d8:	4619      	mov	r1, r3
   dd7da:	e72c      	b.n	dd636 <__aeabi_dmul+0x24a>
   dd7dc:	ea95 0f0c 	teq	r5, ip
   dd7e0:	d106      	bne.n	dd7f0 <__aeabi_ddiv+0x1b0>
   dd7e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dd7e6:	f43f aefd 	beq.w	dd5e4 <__aeabi_dmul+0x1f8>
   dd7ea:	4610      	mov	r0, r2
   dd7ec:	4619      	mov	r1, r3
   dd7ee:	e722      	b.n	dd636 <__aeabi_dmul+0x24a>
   dd7f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dd7f4:	bf18      	it	ne
   dd7f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dd7fa:	f47f aec5 	bne.w	dd588 <__aeabi_dmul+0x19c>
   dd7fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dd802:	f47f af0d 	bne.w	dd620 <__aeabi_dmul+0x234>
   dd806:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dd80a:	f47f aeeb 	bne.w	dd5e4 <__aeabi_dmul+0x1f8>
   dd80e:	e712      	b.n	dd636 <__aeabi_dmul+0x24a>

000dd810 <__aeabi_d2uiz>:
   dd810:	004a      	lsls	r2, r1, #1
   dd812:	d211      	bcs.n	dd838 <__aeabi_d2uiz+0x28>
   dd814:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dd818:	d211      	bcs.n	dd83e <__aeabi_d2uiz+0x2e>
   dd81a:	d50d      	bpl.n	dd838 <__aeabi_d2uiz+0x28>
   dd81c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dd820:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dd824:	d40e      	bmi.n	dd844 <__aeabi_d2uiz+0x34>
   dd826:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd82a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dd82e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dd832:	fa23 f002 	lsr.w	r0, r3, r2
   dd836:	4770      	bx	lr
   dd838:	f04f 0000 	mov.w	r0, #0
   dd83c:	4770      	bx	lr
   dd83e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dd842:	d102      	bne.n	dd84a <__aeabi_d2uiz+0x3a>
   dd844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dd848:	4770      	bx	lr
   dd84a:	f04f 0000 	mov.w	r0, #0
   dd84e:	4770      	bx	lr

000dd850 <asctime_r>:
   dd850:	b510      	push	{r4, lr}
   dd852:	460c      	mov	r4, r1
   dd854:	6941      	ldr	r1, [r0, #20]
   dd856:	6903      	ldr	r3, [r0, #16]
   dd858:	6982      	ldr	r2, [r0, #24]
   dd85a:	b086      	sub	sp, #24
   dd85c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dd860:	9104      	str	r1, [sp, #16]
   dd862:	6801      	ldr	r1, [r0, #0]
   dd864:	9103      	str	r1, [sp, #12]
   dd866:	6841      	ldr	r1, [r0, #4]
   dd868:	9102      	str	r1, [sp, #8]
   dd86a:	6881      	ldr	r1, [r0, #8]
   dd86c:	9101      	str	r1, [sp, #4]
   dd86e:	68c1      	ldr	r1, [r0, #12]
   dd870:	9100      	str	r1, [sp, #0]
   dd872:	4907      	ldr	r1, [pc, #28]	; (dd890 <asctime_r+0x40>)
   dd874:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dd878:	440b      	add	r3, r1
   dd87a:	4906      	ldr	r1, [pc, #24]	; (dd894 <asctime_r+0x44>)
   dd87c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dd880:	440a      	add	r2, r1
   dd882:	4620      	mov	r0, r4
   dd884:	4904      	ldr	r1, [pc, #16]	; (dd898 <asctime_r+0x48>)
   dd886:	f7fc fd81 	bl	da38c <siprintf>
   dd88a:	4620      	mov	r0, r4
   dd88c:	b006      	add	sp, #24
   dd88e:	bd10      	pop	{r4, pc}
   dd890:	000def72 	.word	0x000def72
   dd894:	000def5d 	.word	0x000def5d
   dd898:	000def3d 	.word	0x000def3d

000dd89c <atexit>:
   dd89c:	2300      	movs	r3, #0
   dd89e:	4601      	mov	r1, r0
   dd8a0:	461a      	mov	r2, r3
   dd8a2:	4618      	mov	r0, r3
   dd8a4:	f000 ba3e 	b.w	ddd24 <__register_exitproc>

000dd8a8 <gmtime>:
   dd8a8:	b538      	push	{r3, r4, r5, lr}
   dd8aa:	4b07      	ldr	r3, [pc, #28]	; (dd8c8 <gmtime+0x20>)
   dd8ac:	681d      	ldr	r5, [r3, #0]
   dd8ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dd8b0:	4604      	mov	r4, r0
   dd8b2:	b91b      	cbnz	r3, dd8bc <gmtime+0x14>
   dd8b4:	2024      	movs	r0, #36	; 0x24
   dd8b6:	f7fc fd51 	bl	da35c <malloc>
   dd8ba:	63e8      	str	r0, [r5, #60]	; 0x3c
   dd8bc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dd8be:	4620      	mov	r0, r4
   dd8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dd8c4:	f7fc bdb2 	b.w	da42c <gmtime_r>
   dd8c8:	2003dcb4 	.word	0x2003dcb4

000dd8cc <memcpy>:
   dd8cc:	440a      	add	r2, r1
   dd8ce:	4291      	cmp	r1, r2
   dd8d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dd8d4:	d100      	bne.n	dd8d8 <memcpy+0xc>
   dd8d6:	4770      	bx	lr
   dd8d8:	b510      	push	{r4, lr}
   dd8da:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd8de:	f803 4f01 	strb.w	r4, [r3, #1]!
   dd8e2:	4291      	cmp	r1, r2
   dd8e4:	d1f9      	bne.n	dd8da <memcpy+0xe>
   dd8e6:	bd10      	pop	{r4, pc}

000dd8e8 <memmove>:
   dd8e8:	4288      	cmp	r0, r1
   dd8ea:	b510      	push	{r4, lr}
   dd8ec:	eb01 0402 	add.w	r4, r1, r2
   dd8f0:	d902      	bls.n	dd8f8 <memmove+0x10>
   dd8f2:	4284      	cmp	r4, r0
   dd8f4:	4623      	mov	r3, r4
   dd8f6:	d807      	bhi.n	dd908 <memmove+0x20>
   dd8f8:	1e43      	subs	r3, r0, #1
   dd8fa:	42a1      	cmp	r1, r4
   dd8fc:	d008      	beq.n	dd910 <memmove+0x28>
   dd8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
   dd902:	f803 2f01 	strb.w	r2, [r3, #1]!
   dd906:	e7f8      	b.n	dd8fa <memmove+0x12>
   dd908:	4402      	add	r2, r0
   dd90a:	4601      	mov	r1, r0
   dd90c:	428a      	cmp	r2, r1
   dd90e:	d100      	bne.n	dd912 <memmove+0x2a>
   dd910:	bd10      	pop	{r4, pc}
   dd912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dd916:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dd91a:	e7f7      	b.n	dd90c <memmove+0x24>

000dd91c <memset>:
   dd91c:	4402      	add	r2, r0
   dd91e:	4603      	mov	r3, r0
   dd920:	4293      	cmp	r3, r2
   dd922:	d100      	bne.n	dd926 <memset+0xa>
   dd924:	4770      	bx	lr
   dd926:	f803 1b01 	strb.w	r1, [r3], #1
   dd92a:	e7f9      	b.n	dd920 <memset+0x4>

000dd92c <srand>:
   dd92c:	b538      	push	{r3, r4, r5, lr}
   dd92e:	4b0d      	ldr	r3, [pc, #52]	; (dd964 <srand+0x38>)
   dd930:	681d      	ldr	r5, [r3, #0]
   dd932:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd934:	4604      	mov	r4, r0
   dd936:	b97b      	cbnz	r3, dd958 <srand+0x2c>
   dd938:	2018      	movs	r0, #24
   dd93a:	f7fc fd0f 	bl	da35c <malloc>
   dd93e:	4a0a      	ldr	r2, [pc, #40]	; (dd968 <srand+0x3c>)
   dd940:	4b0a      	ldr	r3, [pc, #40]	; (dd96c <srand+0x40>)
   dd942:	63a8      	str	r0, [r5, #56]	; 0x38
   dd944:	e9c0 2300 	strd	r2, r3, [r0]
   dd948:	4b09      	ldr	r3, [pc, #36]	; (dd970 <srand+0x44>)
   dd94a:	6083      	str	r3, [r0, #8]
   dd94c:	230b      	movs	r3, #11
   dd94e:	8183      	strh	r3, [r0, #12]
   dd950:	2201      	movs	r2, #1
   dd952:	2300      	movs	r3, #0
   dd954:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dd958:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd95a:	2200      	movs	r2, #0
   dd95c:	611c      	str	r4, [r3, #16]
   dd95e:	615a      	str	r2, [r3, #20]
   dd960:	bd38      	pop	{r3, r4, r5, pc}
   dd962:	bf00      	nop
   dd964:	2003dcb4 	.word	0x2003dcb4
   dd968:	abcd330e 	.word	0xabcd330e
   dd96c:	e66d1234 	.word	0xe66d1234
   dd970:	0005deec 	.word	0x0005deec

000dd974 <rand>:
   dd974:	4b13      	ldr	r3, [pc, #76]	; (dd9c4 <rand+0x50>)
   dd976:	b510      	push	{r4, lr}
   dd978:	681c      	ldr	r4, [r3, #0]
   dd97a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dd97c:	b97b      	cbnz	r3, dd99e <rand+0x2a>
   dd97e:	2018      	movs	r0, #24
   dd980:	f7fc fcec 	bl	da35c <malloc>
   dd984:	4a10      	ldr	r2, [pc, #64]	; (dd9c8 <rand+0x54>)
   dd986:	4b11      	ldr	r3, [pc, #68]	; (dd9cc <rand+0x58>)
   dd988:	63a0      	str	r0, [r4, #56]	; 0x38
   dd98a:	e9c0 2300 	strd	r2, r3, [r0]
   dd98e:	4b10      	ldr	r3, [pc, #64]	; (dd9d0 <rand+0x5c>)
   dd990:	6083      	str	r3, [r0, #8]
   dd992:	230b      	movs	r3, #11
   dd994:	8183      	strh	r3, [r0, #12]
   dd996:	2201      	movs	r2, #1
   dd998:	2300      	movs	r3, #0
   dd99a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dd99e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   dd9a0:	480c      	ldr	r0, [pc, #48]	; (dd9d4 <rand+0x60>)
   dd9a2:	690a      	ldr	r2, [r1, #16]
   dd9a4:	694b      	ldr	r3, [r1, #20]
   dd9a6:	4c0c      	ldr	r4, [pc, #48]	; (dd9d8 <rand+0x64>)
   dd9a8:	4350      	muls	r0, r2
   dd9aa:	fb04 0003 	mla	r0, r4, r3, r0
   dd9ae:	fba2 3404 	umull	r3, r4, r2, r4
   dd9b2:	1c5a      	adds	r2, r3, #1
   dd9b4:	4404      	add	r4, r0
   dd9b6:	f144 0000 	adc.w	r0, r4, #0
   dd9ba:	e9c1 2004 	strd	r2, r0, [r1, #16]
   dd9be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   dd9c2:	bd10      	pop	{r4, pc}
   dd9c4:	2003dcb4 	.word	0x2003dcb4
   dd9c8:	abcd330e 	.word	0xabcd330e
   dd9cc:	e66d1234 	.word	0xe66d1234
   dd9d0:	0005deec 	.word	0x0005deec
   dd9d4:	5851f42d 	.word	0x5851f42d
   dd9d8:	4c957f2d 	.word	0x4c957f2d

000dd9dc <strchr>:
   dd9dc:	b2c9      	uxtb	r1, r1
   dd9de:	4603      	mov	r3, r0
   dd9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   dd9e4:	b11a      	cbz	r2, dd9ee <strchr+0x12>
   dd9e6:	428a      	cmp	r2, r1
   dd9e8:	d1f9      	bne.n	dd9de <strchr+0x2>
   dd9ea:	4618      	mov	r0, r3
   dd9ec:	4770      	bx	lr
   dd9ee:	2900      	cmp	r1, #0
   dd9f0:	bf18      	it	ne
   dd9f2:	2300      	movne	r3, #0
   dd9f4:	e7f9      	b.n	dd9ea <strchr+0xe>

000dd9f6 <strchrnul>:
   dd9f6:	b510      	push	{r4, lr}
   dd9f8:	4604      	mov	r4, r0
   dd9fa:	f7ff ffef 	bl	dd9dc <strchr>
   dd9fe:	b918      	cbnz	r0, dda08 <strchrnul+0x12>
   dda00:	4620      	mov	r0, r4
   dda02:	f000 f832 	bl	dda6a <strlen>
   dda06:	4420      	add	r0, r4
   dda08:	bd10      	pop	{r4, pc}

000dda0a <strcmp>:
   dda0a:	f810 2b01 	ldrb.w	r2, [r0], #1
   dda0e:	f811 3b01 	ldrb.w	r3, [r1], #1
   dda12:	2a01      	cmp	r2, #1
   dda14:	bf28      	it	cs
   dda16:	429a      	cmpcs	r2, r3
   dda18:	d0f7      	beq.n	dda0a <strcmp>
   dda1a:	1ad0      	subs	r0, r2, r3
   dda1c:	4770      	bx	lr

000dda1e <strcpy>:
   dda1e:	4603      	mov	r3, r0
   dda20:	f811 2b01 	ldrb.w	r2, [r1], #1
   dda24:	f803 2b01 	strb.w	r2, [r3], #1
   dda28:	2a00      	cmp	r2, #0
   dda2a:	d1f9      	bne.n	dda20 <strcpy+0x2>
   dda2c:	4770      	bx	lr
	...

000dda30 <strdup>:
   dda30:	4b02      	ldr	r3, [pc, #8]	; (dda3c <strdup+0xc>)
   dda32:	4601      	mov	r1, r0
   dda34:	6818      	ldr	r0, [r3, #0]
   dda36:	f000 b803 	b.w	dda40 <_strdup_r>
   dda3a:	bf00      	nop
   dda3c:	2003dcb4 	.word	0x2003dcb4

000dda40 <_strdup_r>:
   dda40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dda42:	4604      	mov	r4, r0
   dda44:	4608      	mov	r0, r1
   dda46:	460d      	mov	r5, r1
   dda48:	f000 f80f 	bl	dda6a <strlen>
   dda4c:	1c42      	adds	r2, r0, #1
   dda4e:	4611      	mov	r1, r2
   dda50:	4620      	mov	r0, r4
   dda52:	9201      	str	r2, [sp, #4]
   dda54:	f7fc fcc2 	bl	da3dc <_malloc_r>
   dda58:	4604      	mov	r4, r0
   dda5a:	b118      	cbz	r0, dda64 <_strdup_r+0x24>
   dda5c:	9a01      	ldr	r2, [sp, #4]
   dda5e:	4629      	mov	r1, r5
   dda60:	f7ff ff34 	bl	dd8cc <memcpy>
   dda64:	4620      	mov	r0, r4
   dda66:	b003      	add	sp, #12
   dda68:	bd30      	pop	{r4, r5, pc}

000dda6a <strlen>:
   dda6a:	4603      	mov	r3, r0
   dda6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dda70:	2a00      	cmp	r2, #0
   dda72:	d1fb      	bne.n	dda6c <strlen+0x2>
   dda74:	1a18      	subs	r0, r3, r0
   dda76:	3801      	subs	r0, #1
   dda78:	4770      	bx	lr

000dda7a <strncmp>:
   dda7a:	b510      	push	{r4, lr}
   dda7c:	b16a      	cbz	r2, dda9a <strncmp+0x20>
   dda7e:	3901      	subs	r1, #1
   dda80:	1884      	adds	r4, r0, r2
   dda82:	f810 3b01 	ldrb.w	r3, [r0], #1
   dda86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dda8a:	4293      	cmp	r3, r2
   dda8c:	d103      	bne.n	dda96 <strncmp+0x1c>
   dda8e:	42a0      	cmp	r0, r4
   dda90:	d001      	beq.n	dda96 <strncmp+0x1c>
   dda92:	2b00      	cmp	r3, #0
   dda94:	d1f5      	bne.n	dda82 <strncmp+0x8>
   dda96:	1a98      	subs	r0, r3, r2
   dda98:	bd10      	pop	{r4, pc}
   dda9a:	4610      	mov	r0, r2
   dda9c:	e7fc      	b.n	dda98 <strncmp+0x1e>

000dda9e <strncpy>:
   dda9e:	b510      	push	{r4, lr}
   ddaa0:	3901      	subs	r1, #1
   ddaa2:	4603      	mov	r3, r0
   ddaa4:	b132      	cbz	r2, ddab4 <strncpy+0x16>
   ddaa6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ddaaa:	f803 4b01 	strb.w	r4, [r3], #1
   ddaae:	3a01      	subs	r2, #1
   ddab0:	2c00      	cmp	r4, #0
   ddab2:	d1f7      	bne.n	ddaa4 <strncpy+0x6>
   ddab4:	441a      	add	r2, r3
   ddab6:	2100      	movs	r1, #0
   ddab8:	4293      	cmp	r3, r2
   ddaba:	d100      	bne.n	ddabe <strncpy+0x20>
   ddabc:	bd10      	pop	{r4, pc}
   ddabe:	f803 1b01 	strb.w	r1, [r3], #1
   ddac2:	e7f9      	b.n	ddab8 <strncpy+0x1a>

000ddac4 <strrchr>:
   ddac4:	b538      	push	{r3, r4, r5, lr}
   ddac6:	4603      	mov	r3, r0
   ddac8:	460c      	mov	r4, r1
   ddaca:	b969      	cbnz	r1, ddae8 <strrchr+0x24>
   ddacc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ddad0:	f7ff bf84 	b.w	dd9dc <strchr>
   ddad4:	1c43      	adds	r3, r0, #1
   ddad6:	4605      	mov	r5, r0
   ddad8:	4621      	mov	r1, r4
   ddada:	4618      	mov	r0, r3
   ddadc:	f7ff ff7e 	bl	dd9dc <strchr>
   ddae0:	2800      	cmp	r0, #0
   ddae2:	d1f7      	bne.n	ddad4 <strrchr+0x10>
   ddae4:	4628      	mov	r0, r5
   ddae6:	bd38      	pop	{r3, r4, r5, pc}
   ddae8:	2500      	movs	r5, #0
   ddaea:	e7f5      	b.n	ddad8 <strrchr+0x14>

000ddaec <__strtok_r>:
   ddaec:	b5f0      	push	{r4, r5, r6, r7, lr}
   ddaee:	b908      	cbnz	r0, ddaf4 <__strtok_r+0x8>
   ddaf0:	6810      	ldr	r0, [r2, #0]
   ddaf2:	b188      	cbz	r0, ddb18 <__strtok_r+0x2c>
   ddaf4:	4604      	mov	r4, r0
   ddaf6:	4620      	mov	r0, r4
   ddaf8:	f814 5b01 	ldrb.w	r5, [r4], #1
   ddafc:	460f      	mov	r7, r1
   ddafe:	f817 6b01 	ldrb.w	r6, [r7], #1
   ddb02:	b91e      	cbnz	r6, ddb0c <__strtok_r+0x20>
   ddb04:	b965      	cbnz	r5, ddb20 <__strtok_r+0x34>
   ddb06:	6015      	str	r5, [r2, #0]
   ddb08:	4628      	mov	r0, r5
   ddb0a:	e005      	b.n	ddb18 <__strtok_r+0x2c>
   ddb0c:	42b5      	cmp	r5, r6
   ddb0e:	d1f6      	bne.n	ddafe <__strtok_r+0x12>
   ddb10:	2b00      	cmp	r3, #0
   ddb12:	d1f0      	bne.n	ddaf6 <__strtok_r+0xa>
   ddb14:	6014      	str	r4, [r2, #0]
   ddb16:	7003      	strb	r3, [r0, #0]
   ddb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ddb1a:	461c      	mov	r4, r3
   ddb1c:	e00c      	b.n	ddb38 <__strtok_r+0x4c>
   ddb1e:	b915      	cbnz	r5, ddb26 <__strtok_r+0x3a>
   ddb20:	f814 3b01 	ldrb.w	r3, [r4], #1
   ddb24:	460e      	mov	r6, r1
   ddb26:	f816 5b01 	ldrb.w	r5, [r6], #1
   ddb2a:	42ab      	cmp	r3, r5
   ddb2c:	d1f7      	bne.n	ddb1e <__strtok_r+0x32>
   ddb2e:	2b00      	cmp	r3, #0
   ddb30:	d0f3      	beq.n	ddb1a <__strtok_r+0x2e>
   ddb32:	2300      	movs	r3, #0
   ddb34:	f804 3c01 	strb.w	r3, [r4, #-1]
   ddb38:	6014      	str	r4, [r2, #0]
   ddb3a:	e7ed      	b.n	ddb18 <__strtok_r+0x2c>

000ddb3c <strtok_r>:
   ddb3c:	2301      	movs	r3, #1
   ddb3e:	f7ff bfd5 	b.w	ddaec <__strtok_r>
	...

000ddb44 <_strtol_l.isra.0>:
   ddb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddb48:	4e3a      	ldr	r6, [pc, #232]	; (ddc34 <_strtol_l.isra.0+0xf0>)
   ddb4a:	4686      	mov	lr, r0
   ddb4c:	468c      	mov	ip, r1
   ddb4e:	4660      	mov	r0, ip
   ddb50:	f81c 4b01 	ldrb.w	r4, [ip], #1
   ddb54:	5da5      	ldrb	r5, [r4, r6]
   ddb56:	f015 0508 	ands.w	r5, r5, #8
   ddb5a:	d1f8      	bne.n	ddb4e <_strtol_l.isra.0+0xa>
   ddb5c:	2c2d      	cmp	r4, #45	; 0x2d
   ddb5e:	d133      	bne.n	ddbc8 <_strtol_l.isra.0+0x84>
   ddb60:	f89c 4000 	ldrb.w	r4, [ip]
   ddb64:	f04f 0801 	mov.w	r8, #1
   ddb68:	f100 0c02 	add.w	ip, r0, #2
   ddb6c:	2b00      	cmp	r3, #0
   ddb6e:	d05c      	beq.n	ddc2a <_strtol_l.isra.0+0xe6>
   ddb70:	2b10      	cmp	r3, #16
   ddb72:	d10c      	bne.n	ddb8e <_strtol_l.isra.0+0x4a>
   ddb74:	2c30      	cmp	r4, #48	; 0x30
   ddb76:	d10a      	bne.n	ddb8e <_strtol_l.isra.0+0x4a>
   ddb78:	f89c 0000 	ldrb.w	r0, [ip]
   ddb7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   ddb80:	2858      	cmp	r0, #88	; 0x58
   ddb82:	d14d      	bne.n	ddc20 <_strtol_l.isra.0+0xdc>
   ddb84:	f89c 4001 	ldrb.w	r4, [ip, #1]
   ddb88:	2310      	movs	r3, #16
   ddb8a:	f10c 0c02 	add.w	ip, ip, #2
   ddb8e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   ddb92:	3f01      	subs	r7, #1
   ddb94:	2600      	movs	r6, #0
   ddb96:	fbb7 f9f3 	udiv	r9, r7, r3
   ddb9a:	4630      	mov	r0, r6
   ddb9c:	fb03 7a19 	mls	sl, r3, r9, r7
   ddba0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   ddba4:	2d09      	cmp	r5, #9
   ddba6:	d818      	bhi.n	ddbda <_strtol_l.isra.0+0x96>
   ddba8:	462c      	mov	r4, r5
   ddbaa:	42a3      	cmp	r3, r4
   ddbac:	dd24      	ble.n	ddbf8 <_strtol_l.isra.0+0xb4>
   ddbae:	1c75      	adds	r5, r6, #1
   ddbb0:	d007      	beq.n	ddbc2 <_strtol_l.isra.0+0x7e>
   ddbb2:	4581      	cmp	r9, r0
   ddbb4:	d31d      	bcc.n	ddbf2 <_strtol_l.isra.0+0xae>
   ddbb6:	d101      	bne.n	ddbbc <_strtol_l.isra.0+0x78>
   ddbb8:	45a2      	cmp	sl, r4
   ddbba:	db1a      	blt.n	ddbf2 <_strtol_l.isra.0+0xae>
   ddbbc:	fb00 4003 	mla	r0, r0, r3, r4
   ddbc0:	2601      	movs	r6, #1
   ddbc2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   ddbc6:	e7eb      	b.n	ddba0 <_strtol_l.isra.0+0x5c>
   ddbc8:	2c2b      	cmp	r4, #43	; 0x2b
   ddbca:	bf08      	it	eq
   ddbcc:	f89c 4000 	ldrbeq.w	r4, [ip]
   ddbd0:	46a8      	mov	r8, r5
   ddbd2:	bf08      	it	eq
   ddbd4:	f100 0c02 	addeq.w	ip, r0, #2
   ddbd8:	e7c8      	b.n	ddb6c <_strtol_l.isra.0+0x28>
   ddbda:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   ddbde:	2d19      	cmp	r5, #25
   ddbe0:	d801      	bhi.n	ddbe6 <_strtol_l.isra.0+0xa2>
   ddbe2:	3c37      	subs	r4, #55	; 0x37
   ddbe4:	e7e1      	b.n	ddbaa <_strtol_l.isra.0+0x66>
   ddbe6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   ddbea:	2d19      	cmp	r5, #25
   ddbec:	d804      	bhi.n	ddbf8 <_strtol_l.isra.0+0xb4>
   ddbee:	3c57      	subs	r4, #87	; 0x57
   ddbf0:	e7db      	b.n	ddbaa <_strtol_l.isra.0+0x66>
   ddbf2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   ddbf6:	e7e4      	b.n	ddbc2 <_strtol_l.isra.0+0x7e>
   ddbf8:	1c73      	adds	r3, r6, #1
   ddbfa:	d106      	bne.n	ddc0a <_strtol_l.isra.0+0xc6>
   ddbfc:	2322      	movs	r3, #34	; 0x22
   ddbfe:	f8ce 3000 	str.w	r3, [lr]
   ddc02:	4638      	mov	r0, r7
   ddc04:	b942      	cbnz	r2, ddc18 <_strtol_l.isra.0+0xd4>
   ddc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddc0a:	f1b8 0f00 	cmp.w	r8, #0
   ddc0e:	d000      	beq.n	ddc12 <_strtol_l.isra.0+0xce>
   ddc10:	4240      	negs	r0, r0
   ddc12:	2a00      	cmp	r2, #0
   ddc14:	d0f7      	beq.n	ddc06 <_strtol_l.isra.0+0xc2>
   ddc16:	b10e      	cbz	r6, ddc1c <_strtol_l.isra.0+0xd8>
   ddc18:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   ddc1c:	6011      	str	r1, [r2, #0]
   ddc1e:	e7f2      	b.n	ddc06 <_strtol_l.isra.0+0xc2>
   ddc20:	2430      	movs	r4, #48	; 0x30
   ddc22:	2b00      	cmp	r3, #0
   ddc24:	d1b3      	bne.n	ddb8e <_strtol_l.isra.0+0x4a>
   ddc26:	2308      	movs	r3, #8
   ddc28:	e7b1      	b.n	ddb8e <_strtol_l.isra.0+0x4a>
   ddc2a:	2c30      	cmp	r4, #48	; 0x30
   ddc2c:	d0a4      	beq.n	ddb78 <_strtol_l.isra.0+0x34>
   ddc2e:	230a      	movs	r3, #10
   ddc30:	e7ad      	b.n	ddb8e <_strtol_l.isra.0+0x4a>
   ddc32:	bf00      	nop
   ddc34:	000def97 	.word	0x000def97

000ddc38 <strtol>:
   ddc38:	4613      	mov	r3, r2
   ddc3a:	460a      	mov	r2, r1
   ddc3c:	4601      	mov	r1, r0
   ddc3e:	4802      	ldr	r0, [pc, #8]	; (ddc48 <strtol+0x10>)
   ddc40:	6800      	ldr	r0, [r0, #0]
   ddc42:	f7ff bf7f 	b.w	ddb44 <_strtol_l.isra.0>
   ddc46:	bf00      	nop
   ddc48:	2003dcb4 	.word	0x2003dcb4

000ddc4c <close>:
   ddc4c:	4b02      	ldr	r3, [pc, #8]	; (ddc58 <close+0xc>)
   ddc4e:	4601      	mov	r1, r0
   ddc50:	6818      	ldr	r0, [r3, #0]
   ddc52:	f000 b8c9 	b.w	ddde8 <_close_r>
   ddc56:	bf00      	nop
   ddc58:	2003dcb4 	.word	0x2003dcb4

000ddc5c <fstat>:
   ddc5c:	4b02      	ldr	r3, [pc, #8]	; (ddc68 <fstat+0xc>)
   ddc5e:	460a      	mov	r2, r1
   ddc60:	4601      	mov	r1, r0
   ddc62:	6818      	ldr	r0, [r3, #0]
   ddc64:	f000 b8d0 	b.w	dde08 <_fstat_r>
   ddc68:	2003dcb4 	.word	0x2003dcb4

000ddc6c <lseek>:
   ddc6c:	4613      	mov	r3, r2
   ddc6e:	460a      	mov	r2, r1
   ddc70:	4601      	mov	r1, r0
   ddc72:	4802      	ldr	r0, [pc, #8]	; (ddc7c <lseek+0x10>)
   ddc74:	6800      	ldr	r0, [r0, #0]
   ddc76:	f000 b8dd 	b.w	dde34 <_lseek_r>
   ddc7a:	bf00      	nop
   ddc7c:	2003dcb4 	.word	0x2003dcb4

000ddc80 <open>:
   ddc80:	b40e      	push	{r1, r2, r3}
   ddc82:	b503      	push	{r0, r1, lr}
   ddc84:	ab03      	add	r3, sp, #12
   ddc86:	4601      	mov	r1, r0
   ddc88:	4806      	ldr	r0, [pc, #24]	; (ddca4 <open+0x24>)
   ddc8a:	f853 2b04 	ldr.w	r2, [r3], #4
   ddc8e:	9301      	str	r3, [sp, #4]
   ddc90:	6800      	ldr	r0, [r0, #0]
   ddc92:	9b04      	ldr	r3, [sp, #16]
   ddc94:	f000 f8e0 	bl	dde58 <_open_r>
   ddc98:	b002      	add	sp, #8
   ddc9a:	f85d eb04 	ldr.w	lr, [sp], #4
   ddc9e:	b003      	add	sp, #12
   ddca0:	4770      	bx	lr
   ddca2:	bf00      	nop
   ddca4:	2003dcb4 	.word	0x2003dcb4

000ddca8 <read>:
   ddca8:	4613      	mov	r3, r2
   ddcaa:	460a      	mov	r2, r1
   ddcac:	4601      	mov	r1, r0
   ddcae:	4802      	ldr	r0, [pc, #8]	; (ddcb8 <read+0x10>)
   ddcb0:	6800      	ldr	r0, [r0, #0]
   ddcb2:	f000 b8e3 	b.w	dde7c <_read_r>
   ddcb6:	bf00      	nop
   ddcb8:	2003dcb4 	.word	0x2003dcb4

000ddcbc <unlink>:
   ddcbc:	4b02      	ldr	r3, [pc, #8]	; (ddcc8 <unlink+0xc>)
   ddcbe:	4601      	mov	r1, r0
   ddcc0:	6818      	ldr	r0, [r3, #0]
   ddcc2:	f000 b80d 	b.w	ddce0 <_unlink_r>
   ddcc6:	bf00      	nop
   ddcc8:	2003dcb4 	.word	0x2003dcb4

000ddccc <write>:
   ddccc:	4613      	mov	r3, r2
   ddcce:	460a      	mov	r2, r1
   ddcd0:	4601      	mov	r1, r0
   ddcd2:	4802      	ldr	r0, [pc, #8]	; (ddcdc <write+0x10>)
   ddcd4:	6800      	ldr	r0, [r0, #0]
   ddcd6:	f000 b813 	b.w	ddd00 <_write_r>
   ddcda:	bf00      	nop
   ddcdc:	2003dcb4 	.word	0x2003dcb4

000ddce0 <_unlink_r>:
   ddce0:	b538      	push	{r3, r4, r5, lr}
   ddce2:	4d06      	ldr	r5, [pc, #24]	; (ddcfc <_unlink_r+0x1c>)
   ddce4:	2300      	movs	r3, #0
   ddce6:	4604      	mov	r4, r0
   ddce8:	4608      	mov	r0, r1
   ddcea:	602b      	str	r3, [r5, #0]
   ddcec:	f7fc f92e 	bl	d9f4c <_unlink>
   ddcf0:	1c43      	adds	r3, r0, #1
   ddcf2:	d102      	bne.n	ddcfa <_unlink_r+0x1a>
   ddcf4:	682b      	ldr	r3, [r5, #0]
   ddcf6:	b103      	cbz	r3, ddcfa <_unlink_r+0x1a>
   ddcf8:	6023      	str	r3, [r4, #0]
   ddcfa:	bd38      	pop	{r3, r4, r5, pc}
   ddcfc:	2003e7f0 	.word	0x2003e7f0

000ddd00 <_write_r>:
   ddd00:	b538      	push	{r3, r4, r5, lr}
   ddd02:	4d07      	ldr	r5, [pc, #28]	; (ddd20 <_write_r+0x20>)
   ddd04:	4604      	mov	r4, r0
   ddd06:	4608      	mov	r0, r1
   ddd08:	4611      	mov	r1, r2
   ddd0a:	2200      	movs	r2, #0
   ddd0c:	602a      	str	r2, [r5, #0]
   ddd0e:	461a      	mov	r2, r3
   ddd10:	f7fc f8e4 	bl	d9edc <_write>
   ddd14:	1c43      	adds	r3, r0, #1
   ddd16:	d102      	bne.n	ddd1e <_write_r+0x1e>
   ddd18:	682b      	ldr	r3, [r5, #0]
   ddd1a:	b103      	cbz	r3, ddd1e <_write_r+0x1e>
   ddd1c:	6023      	str	r3, [r4, #0]
   ddd1e:	bd38      	pop	{r3, r4, r5, pc}
   ddd20:	2003e7f0 	.word	0x2003e7f0

000ddd24 <__register_exitproc>:
   ddd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ddd28:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ddde4 <__register_exitproc+0xc0>
   ddd2c:	4606      	mov	r6, r0
   ddd2e:	f8d8 0000 	ldr.w	r0, [r8]
   ddd32:	461f      	mov	r7, r3
   ddd34:	460d      	mov	r5, r1
   ddd36:	4691      	mov	r9, r2
   ddd38:	f000 f878 	bl	dde2c <__retarget_lock_acquire_recursive>
   ddd3c:	4b25      	ldr	r3, [pc, #148]	; (dddd4 <__register_exitproc+0xb0>)
   ddd3e:	681c      	ldr	r4, [r3, #0]
   ddd40:	b934      	cbnz	r4, ddd50 <__register_exitproc+0x2c>
   ddd42:	4c25      	ldr	r4, [pc, #148]	; (dddd8 <__register_exitproc+0xb4>)
   ddd44:	601c      	str	r4, [r3, #0]
   ddd46:	4b25      	ldr	r3, [pc, #148]	; (ddddc <__register_exitproc+0xb8>)
   ddd48:	b113      	cbz	r3, ddd50 <__register_exitproc+0x2c>
   ddd4a:	681b      	ldr	r3, [r3, #0]
   ddd4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ddd50:	6863      	ldr	r3, [r4, #4]
   ddd52:	2b1f      	cmp	r3, #31
   ddd54:	dd07      	ble.n	ddd66 <__register_exitproc+0x42>
   ddd56:	f8d8 0000 	ldr.w	r0, [r8]
   ddd5a:	f000 f869 	bl	dde30 <__retarget_lock_release_recursive>
   ddd5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ddd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ddd66:	b34e      	cbz	r6, dddbc <__register_exitproc+0x98>
   ddd68:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ddd6c:	b988      	cbnz	r0, ddd92 <__register_exitproc+0x6e>
   ddd6e:	4b1c      	ldr	r3, [pc, #112]	; (ddde0 <__register_exitproc+0xbc>)
   ddd70:	b923      	cbnz	r3, ddd7c <__register_exitproc+0x58>
   ddd72:	f8d8 0000 	ldr.w	r0, [r8]
   ddd76:	f000 f85a 	bl	dde2e <__retarget_lock_release>
   ddd7a:	e7f0      	b.n	ddd5e <__register_exitproc+0x3a>
   ddd7c:	f44f 7084 	mov.w	r0, #264	; 0x108
   ddd80:	f7fc faec 	bl	da35c <malloc>
   ddd84:	2800      	cmp	r0, #0
   ddd86:	d0f4      	beq.n	ddd72 <__register_exitproc+0x4e>
   ddd88:	2300      	movs	r3, #0
   ddd8a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ddd8e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ddd92:	6863      	ldr	r3, [r4, #4]
   ddd94:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ddd98:	2201      	movs	r2, #1
   ddd9a:	409a      	lsls	r2, r3
   ddd9c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ddda0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ddda4:	4313      	orrs	r3, r2
   ddda6:	2e02      	cmp	r6, #2
   ddda8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dddac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dddb0:	bf02      	ittt	eq
   dddb2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dddb6:	431a      	orreq	r2, r3
   dddb8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dddbc:	6863      	ldr	r3, [r4, #4]
   dddbe:	f8d8 0000 	ldr.w	r0, [r8]
   dddc2:	1c5a      	adds	r2, r3, #1
   dddc4:	3302      	adds	r3, #2
   dddc6:	6062      	str	r2, [r4, #4]
   dddc8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dddcc:	f000 f830 	bl	dde30 <__retarget_lock_release_recursive>
   dddd0:	2000      	movs	r0, #0
   dddd2:	e7c6      	b.n	ddd62 <__register_exitproc+0x3e>
   dddd4:	2003e7e0 	.word	0x2003e7e0
   dddd8:	2003e754 	.word	0x2003e754
   ddddc:	00000000 	.word	0x00000000
   ddde0:	000da35d 	.word	0x000da35d
   ddde4:	2003dd18 	.word	0x2003dd18

000ddde8 <_close_r>:
   ddde8:	b538      	push	{r3, r4, r5, lr}
   dddea:	4d06      	ldr	r5, [pc, #24]	; (dde04 <_close_r+0x1c>)
   dddec:	2300      	movs	r3, #0
   dddee:	4604      	mov	r4, r0
   dddf0:	4608      	mov	r0, r1
   dddf2:	602b      	str	r3, [r5, #0]
   dddf4:	f7fc f882 	bl	d9efc <_close>
   dddf8:	1c43      	adds	r3, r0, #1
   dddfa:	d102      	bne.n	dde02 <_close_r+0x1a>
   dddfc:	682b      	ldr	r3, [r5, #0]
   dddfe:	b103      	cbz	r3, dde02 <_close_r+0x1a>
   dde00:	6023      	str	r3, [r4, #0]
   dde02:	bd38      	pop	{r3, r4, r5, pc}
   dde04:	2003e7f0 	.word	0x2003e7f0

000dde08 <_fstat_r>:
   dde08:	b538      	push	{r3, r4, r5, lr}
   dde0a:	4d07      	ldr	r5, [pc, #28]	; (dde28 <_fstat_r+0x20>)
   dde0c:	2300      	movs	r3, #0
   dde0e:	4604      	mov	r4, r0
   dde10:	4608      	mov	r0, r1
   dde12:	4611      	mov	r1, r2
   dde14:	602b      	str	r3, [r5, #0]
   dde16:	f7fc f879 	bl	d9f0c <_fstat>
   dde1a:	1c43      	adds	r3, r0, #1
   dde1c:	d102      	bne.n	dde24 <_fstat_r+0x1c>
   dde1e:	682b      	ldr	r3, [r5, #0]
   dde20:	b103      	cbz	r3, dde24 <_fstat_r+0x1c>
   dde22:	6023      	str	r3, [r4, #0]
   dde24:	bd38      	pop	{r3, r4, r5, pc}
   dde26:	bf00      	nop
   dde28:	2003e7f0 	.word	0x2003e7f0

000dde2c <__retarget_lock_acquire_recursive>:
   dde2c:	4770      	bx	lr

000dde2e <__retarget_lock_release>:
   dde2e:	4770      	bx	lr

000dde30 <__retarget_lock_release_recursive>:
   dde30:	4770      	bx	lr
	...

000dde34 <_lseek_r>:
   dde34:	b538      	push	{r3, r4, r5, lr}
   dde36:	4d07      	ldr	r5, [pc, #28]	; (dde54 <_lseek_r+0x20>)
   dde38:	4604      	mov	r4, r0
   dde3a:	4608      	mov	r0, r1
   dde3c:	4611      	mov	r1, r2
   dde3e:	2200      	movs	r2, #0
   dde40:	602a      	str	r2, [r5, #0]
   dde42:	461a      	mov	r2, r3
   dde44:	f7fc f86a 	bl	d9f1c <_lseek>
   dde48:	1c43      	adds	r3, r0, #1
   dde4a:	d102      	bne.n	dde52 <_lseek_r+0x1e>
   dde4c:	682b      	ldr	r3, [r5, #0]
   dde4e:	b103      	cbz	r3, dde52 <_lseek_r+0x1e>
   dde50:	6023      	str	r3, [r4, #0]
   dde52:	bd38      	pop	{r3, r4, r5, pc}
   dde54:	2003e7f0 	.word	0x2003e7f0

000dde58 <_open_r>:
   dde58:	b538      	push	{r3, r4, r5, lr}
   dde5a:	4d07      	ldr	r5, [pc, #28]	; (dde78 <_open_r+0x20>)
   dde5c:	4604      	mov	r4, r0
   dde5e:	4608      	mov	r0, r1
   dde60:	4611      	mov	r1, r2
   dde62:	2200      	movs	r2, #0
   dde64:	602a      	str	r2, [r5, #0]
   dde66:	461a      	mov	r2, r3
   dde68:	f7fc f830 	bl	d9ecc <_open>
   dde6c:	1c43      	adds	r3, r0, #1
   dde6e:	d102      	bne.n	dde76 <_open_r+0x1e>
   dde70:	682b      	ldr	r3, [r5, #0]
   dde72:	b103      	cbz	r3, dde76 <_open_r+0x1e>
   dde74:	6023      	str	r3, [r4, #0]
   dde76:	bd38      	pop	{r3, r4, r5, pc}
   dde78:	2003e7f0 	.word	0x2003e7f0

000dde7c <_read_r>:
   dde7c:	b538      	push	{r3, r4, r5, lr}
   dde7e:	4d07      	ldr	r5, [pc, #28]	; (dde9c <_read_r+0x20>)
   dde80:	4604      	mov	r4, r0
   dde82:	4608      	mov	r0, r1
   dde84:	4611      	mov	r1, r2
   dde86:	2200      	movs	r2, #0
   dde88:	602a      	str	r2, [r5, #0]
   dde8a:	461a      	mov	r2, r3
   dde8c:	f7fc f82e 	bl	d9eec <_read>
   dde90:	1c43      	adds	r3, r0, #1
   dde92:	d102      	bne.n	dde9a <_read_r+0x1e>
   dde94:	682b      	ldr	r3, [r5, #0]
   dde96:	b103      	cbz	r3, dde9a <_read_r+0x1e>
   dde98:	6023      	str	r3, [r4, #0]
   dde9a:	bd38      	pop	{r3, r4, r5, pc}
   dde9c:	2003e7f0 	.word	0x2003e7f0

000ddea0 <dynalib_user>:
   ddea0:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   ddeb0:	00000000 6d207525 72756e69 46007365     ....%u minures.F
   ddec0:	206d6f72 74207325 7325206f 61745300     rom %s to %s.Sta
   dded0:	54206574 736e6172 6f697469 6552006e     te Transition.Re
   ddee0:	74726f70 65726620 6e657571 77207963     port frequency w
   ddef0:	206c6c69 73206562 74207465 6925206f     ill be set to %i
   ddf00:	6e696d20 73657475 20746120 7478656e      minutes at next
   ddf10:	526f4c20 6f632041 63656e6e 69540074      LoRA connect.Ti
   ddf20:	4e00656d 4c20746f 5020776f 7265776f     me.Not Low Power
   ddf30:	74655300 776f4c20 776f5020 4d207265     .Set Low Power M
   ddf40:	0065646f 61656c43 20646572 20776f4c     ode.Cleared Low 
   ddf50:	65776f50 6f4d2072 52006564 726f7065     Power Mode.Repor
   ddf60:	72462074 65757165 0079636e 50776f4c     t Frequency.LowP
   ddf70:	7265776f 646f4d20 65530065 72462074     ower Mode.Set Fr
   ddf80:	65757165 0079636e 74696e69 69616620     equency.init fai
   ddf90:	0064656c 73617245 20676e69 4d415246     led.Erasing FRAM
   ddfa0:	616f4c00 676e6964 65687420 73797320     .Loading the sys
   ddfb0:	74617453 61207375 79617272 54534500     Status array.EST
   ddfc0:	54444535 2e334d2c 2f302e32 30303a32     5EDT,M3.2.0/2:00
   ddfd0:	2c30303a 2e31314d 2f302e31 30303a32     :00,M11.1.0/2:00
   ddfe0:	0030303a 303a3630 30303a30 3a323200     :00.06:00:00.22:
   ddff0:	353a3935 74530039 75747261 6f632070     59:59.Startup co
   de000:	656c706d 61206574 73252074 74697720     mplete at %s wit
   de010:	61622068 72657474 34252079 0066322e     h battery %4.2f.
   de020:	61636f6c 6974206c 203a656d 74007325     local time: %s.t
   de030:	20656d69 6e20666f 20747865 6e657665     ime of next even
   de040:	73692074 7325203a 69687720 69206863     t is: %s which i
   de050:	6c252073 65732075 646e6f63 77612073     s %lu seconds aw
   de060:	49007961 6874206e 69642065 6e6f6373     ay.In the discon
   de070:	7463656e 6f726620 6150206d 63697472     nect from Partic
   de080:	6620656c 74636e75 006e6f69 6c696146     le function.Fail
   de090:	74206465 6964206f 6e6f6373 7463656e     ed to disconnect
   de0a0:	6f726620 6150206d 63697472 4400656c      from Particle.D
   de0b0:	6f637369 63656e6e 20646574 6d6f7266     isconnected from
   de0c0:	72615020 6c636974 6e692065 20692520      Particle in %i 
   de0d0:	6f636573 0073646e 6c696146 74206465     seconds.Failed t
   de0e0:	7574206f 6f206e72 74206666 43206568     o turn off the C
   de0f0:	756c6c65 2072616c 65646f6d 7554006d     ellular modem.Tu
   de100:	64656e72 66666f20 65687420 6c656320     rned off the cel
   de110:	616c756c 6f6d2072 206d6564 25206e69     lular modem in %
   de120:	65732069 646e6f63 6c530073 20706565     i seconds.Sleep 
   de130:	20726f66 73206925 6e6f6365 57007364     for %i seconds.W
   de140:	20656b6f 68746977 65737520 75622072     oke with user bu
   de150:	6e6f7474 6e202d20 616d726f 706f206c     tton - normal op
   de160:	74617265 736e6f69 206e4900 20656874     erations.In the 
   de170:	41526f4c 61747320 77206574 20687469     LoRA state with 
   de180:	72662061 65757165 2079636e 2520666f     a frequency of %
   de190:	696d2075 6574756e 65520073 76696563     u minutes.Receiv
   de1a0:	66206465 206d6f72 30257830 77207832     ed from 0x%02x w
   de1b0:	20687469 69737372 2064253d 2067736d     ith rssi=%d msg 
   de1c0:	6425203d 69617700 20646574 20726f66     = %d.waited for 
   de1d0:	20756c25 6f636573 0073646e 353a3132     %lu seconds.21:5
   de1e0:	39353a39 6e655300 65722074 6e6f7073     9:59.Sent respon
   de1f0:	74206573 6c63206f 746e6569 73656d20     se to client mes
   de200:	65676173 25203d20 74202c64 20656d69     sage = %d, time 
   de210:	7325203d 656e202c 72207478 726f7065     = %s, next repor
   de220:	203d2074 6d207525 74756e69 73007365     t = %u minutes.s
   de230:	74646e65 6961576f 61662074 64656c69     endtoWait failed
   de240:	6e227b00 6965646f 253a2264 22202c75     .{"nodeid":%u, "
   de250:	72756f68 3a22796c 202c7525 69616422     hourly":%u, "dai
   de260:	3a22796c 222c7525 74746162 22797265     ly":%u,"battery"
   de270:	2c64253a 79656b22 223a2231 2c227325     :%d,"key1":"%s",
   de280:	6d657422 253a2270 22202c64 65736572     "temp":%d, "rese
   de290:	3a227374 202c6425 656c6122 22737472     ts":%d, "alerts"
   de2a0:	2c64253a 73737222 253a2269 22202c64     :%d,"rssi":%d, "
   de2b0:	2267736d 2c64253a 6d697422 61747365     msg":%d,"timesta
   de2c0:	3a22706d 30756c25 007d3030 64696255     mp":%lu000}.Ubid
   de2d0:	2d73746f 41526f4c 6f6f482d 31762d6b     ots-LoRA-Hook-v1
   de2e0:	00000000                                ....

000de2e4 <_ZTVN5spark10LogHandlerE>:
	...
   de2f4:	000d40a5 000d40c9                       .@...@..

000de2fc <_ZTVN5spark16SerialLogHandlerE>:
	...
   de304:	000d4185 000d41b9 000dbd95 000d40cb     .A...A.......@..

000de314 <_ZTV8MB85RC64>:
	...
   de31c:	000d4109 000d411d 000d99d5 000d9a6b     .A...A......k...
   de32c:	000d9aed 6e6b6e55 006e776f 20746f4e     ....Unknown.Not 
   de33c:	72616843 676e6967 61684300 64656772     Charging.Charged
   de34c:	73694400 72616863 676e6967 75614600     .Discharging.Fau
   de35c:	4400746c 6e6f6369 7463656e 00006465     lt.Diconnected..

000de36c <_ZL17FRAMversionNumber>:
   de36c:	00000001 6b636142 756f7267 7550646e     ....BackgroundPu
   de37c:	73696c62 004b5268                       blishRK.

000de384 <_ZTV19BackgroundPublishRK>:
	...
   de38c:	000d5231 000d524d 253a6425 64253a64     1R..MR..%d:%d:%d
   de39c:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   de3ac:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   de3bc:	302b2500 253a6433 00753230 74636576     .%+03d:%02u.vect
   de3cc:	3a3a726f 725f4d5f 6c6c6165 695f636f     or::_M_realloc_i
   de3dc:	7265736e 00000074                       nsert...

000de3e4 <_ZTV9LocalTime>:
	...
   de3ec:	000d5589 000d55a1                       .U...U..

000de3f4 <_ZTV12LocalTimeHMS>:
	...
   de3fc:	000d552b 000d553d                       +U..=U..

000de404 <_ZTV15LocalTimeChange>:
	...
   de40c:	000d552d 000d554b                       -U..KU..

000de414 <_ZTV22LocalTimePosixTimezone>:
	...
   de41c:	000d5559 000d5575 656c6966 3d6d754e     YU..uU..fileNum=
   de42c:	73206425 3d657a69 00646c25 64616572     %d size=%ld.read
   de43c:	75657551 6c694665 64252065 65766520     QueueFile %d eve
   de44c:	253d746e 61642073 253d6174 65720073     nt=%s data=%s.re
   de45c:	75516461 46657565 20656c69 63206425     adQueueFile %d c
   de46c:	7572726f 64657470 65766520 6e20746e     orrupted event n
   de47c:	20656d61 6420726f 00617461 64616572     ame or data.read
   de48c:	75657551 6c694665 64252065 64616220     QueueFile %d bad
   de49c:	67616d20 253d6369 786c3830 72657620      magic=%08lx ver
   de4ac:	6e6f6973 2075253d 64616568 69537265     sion=%u headerSi
   de4bc:	253d657a 616e2075 654c656d 75253d6e     ze=%u nameLen=%u
   de4cc:	73752f00 75702f72 65757162 77006575     ./usr/pubqueue.w
   de4dc:	65746972 75657551 466f5465 73656c69     riteQueueToFiles
   de4ec:	6c696620 6d754e65 0064253d 65736572      fileNum=%d.rese
   de4fc:	726f2074 73696420 6e6e6f63 20746365     t or disconnect 
   de50c:	6e657665 73202c74 20657661 656c6966     event, save file
   de51c:	6f742073 65757120 72006575 64006d61     s to queue.ram.d
   de52c:	61637369 6e696472 6f632067 70757272     iscarding corrup
   de53c:	20646574 656c6966 00642520 6c627570     ted file %d.publ
   de54c:	69687369 2520676e 76652073 3d746e65     ishing %s event=
   de55c:	64207325 3d617461 64007325 61637369     %s data=%s.disca
   de56c:	64656472 65766520 2520746e 59530064     rded event %d.SY
   de57c:	4d455453 5248545f 28444145 42414e45     STEM_THREAD(ENAB
   de58c:	2944454c 20736920 75716572 64657269     LED) is required
   de59c:	62757000 6873696c 6d6d6f43 65206e6f     .publishCommon e
   de5ac:	746e6576 656d614e 2073253d 6e657665     ventName=%s even
   de5bc:	74614474 73253d61 6e616300 20746f6e     tData=%s.cannot 
   de5cc:	61657263 73206574 3a3a6474 75716564     create std::dequ
   de5dc:	616c2065 72656772 61687420 616d206e     e larger than ma
   de5ec:	69735f78 2928657a 6c696600 65755165     x_size().fileQue
   de5fc:	654c6575 75253d6e 6d617220 75657551     ueLen=%u ramQueu
   de60c:	6e654c65 2075253d 6e6e6f63 65746365     eLen=%u connecte
   de61c:	64253d64 65757100 20646575 72206f74     d=%d.queued to r
   de62c:	75516d61 00657565 6c627570 20687369     amQueue.publish 
   de63c:	63637573 20737365 72006425 766f6d65     success %d.remov
   de64c:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   de65c:	66206873 656c6961 64252064 69727700     sh failed %d.wri
   de66c:	676e6974 206f7420 656c6966 66612073     ting to files af
   de67c:	20726574 6c627570 20687369 6c696166     ter publish fail
   de68c:	00657275 2e707061 71627570 00000000     ure.app.pubq....

000de69c <_ZTV17PublishQueuePosix>:
	...
   de6a4:	000d7269 000d7541 000d7565              ir..Au..eu..

000de6b0 <_ZTV15RHGenericDriver>:
	...
   de6c0:	000d7681 000d40a5 000d40a5 000d40a5     .v...@...@...@..
   de6d0:	000d40a5 000d76e3 000d7685 000d7733     .@...v...v..3w..
   de6e0:	000d7701 000d7757 000d768f 000d7697     .w..Ww...v...v..
   de6f0:	000d769b 000d769f 000d76a3 000d76a7     .v...v...v...v..
   de700:	000d7693 000d76b3 000d76b7 000d76bb     .v...v...v...v..
   de710:	000d76bf 000d76c3 000d76c9 000d76cd     .v...v...v...v..
   de720:	000d768f 000d76d1 000d76d7 000d76dd     .v...v...v...v..

000de730 <_ZTV12RHGenericSPI>:
	...
   de738:	000d40a5 000d77b5 000d77b7 000d40a5     .@...w...w...@..
   de748:	000d40a5 000d77bf 000d77c3 000d77c7     .@...w...w...w..
   de758:	000d77b9 000d77bb 000d77bd 61666564     .w...w...w..defa
   de768:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   de778:	74655349 676e6974 65642073 6c756166     ISettings defaul
   de788:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   de798:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000de7a8 <_ZTVN8particle11SPISettingsE>:
	...
   de7b0:	000d780d 000d77e1 000d77e3              .x...w...w..

000de7bc <_ZTV13RHHardwareSPI>:
	...
   de7c4:	000d78c1 000d78d5 000d78e3 000d78f1     .x...x...x...x..
   de7d4:	000d795d 000d77bf 000d77c3 000d77c7     ]y...w...w...w..
   de7e4:	000d796b 000d797f 000d798d              ky...y...y..

000de7f0 <_ZTV6RHMesh>:
	...
   de7f8:	000d7a5d 000d7d09 000d79b9 000d79a5     ]z...}...y...y..

000de808 <_ZTV8RHRouter>:
	...
   de810:	000d7f6f 000d7fb3                       o.......

000de818 <_ZTV11RHSPIDriver>:
	...
   de828:	000d8251 000d40a5 000d40a5 000d40a5     Q....@...@...@..
   de838:	000d40a5 000d76e3 000d7685 000d7733     .@...v...v..3w..
   de848:	000d7701 000d7757 000d768f 000d7697     .w..Ww...v...v..
   de858:	000d769b 000d769f 000d76a3 000d76a7     .v...v...v...v..
   de868:	000d7693 000d76b3 000d76b7 000d76bb     .v...v...v...v..
   de878:	000d76bf 000d76c3 000d76c9 000d76cd     .v...v...v...v..
   de888:	000d768f 000d76d1 000d76d7 000d76dd     .v...v...v...v..
   de898:	000d827d 000d8287                       }.......

000de8a0 <_ZL18MODEM_CONFIG_TABLE>:
   de8a0:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000de8b0 <_ZTV7RH_RF95>:
	...
   de8b8:	000d83ef 000d8427 000d88e9 000d874f     ....'.......O...
   de8c8:	000d845d 000d8797 000d83eb 000d76e3     ]............v..
   de8d8:	000d7685 000d7733 000d7701 000d7757     .v..3w...w..Ww..
   de8e8:	000d83f1 000d7697 000d769b 000d769f     .....v...v...v..
   de8f8:	000d76a3 000d76a7 000d7693 000d76b3     .v...v...v...v..
   de908:	000d76b7 000d76bb 000d76bf 000d76c3     .v...v...v...v..
   de918:	000d76c9 000d76cd 000d8437 000d76d1     .v...v..7....v..
   de928:	000d76d7 000d76dd 000d827d 000d8287     .v...v..}.......
   de938:	000d83e7 64383025 72002f00 766f6d65     ....%08d./.remov
   de948:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   de958:	20646e61 61207369 72696420 6f746365     and is a directo
   de968:	66007972 20656c69 74206e69 77206568     ry.file in the w
   de978:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   de988:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   de998:	0064253d 61657263 20646574 20726964     =%d.created dir 
   de9a8:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   de9b8:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   de9c8:	65727567 69642064 74615072 63730068     gured dirPath.sc
   de9d8:	696e6e61 2520676e 69772073 70206874     anning %s with p
   de9e8:	65747461 25206e72 64610073 676e6964     attern %s.adding
   de9f8:	206f7420 75657571 64252065 00732520      to queue %d %s.
   dea08:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   dea18:	74657220 656e7275 64252064 70706100      returned %d.app
   dea28:	7165732e 656c6966 00000000              .seqfile....

000dea34 <_ZTV14SequentialFile>:
	...
   dea3c:	000d8d35 000d8d61 000d89ed 6c696166     5...a.......fail
   dea4c:	74206465 6572206f 72206461 64416765     ed to read regAd
   dea5c:	253d7264 20783230 6e756f63 75253d74     dr=%02x count=%u
   dea6c:	69616600 2064656c 72206f74 20646165     .failed to read 
   dea7c:	41676572 3d726464 78323025 61747320     regAddr=%02x sta
   dea8c:	64253d74 554f4600 69642054 6f6e2064     t=%d.FOUT did no
   dea9c:	6f672074 47494820 6f6e0048 65642074     t go HIGH.not de
   deaac:	74636574 66006465 656c6961 6f742064     tected.failed to
   deabc:	69727720 72206574 64416765 253d7264      write regAddr=%
   deacc:	20783230 74617473 0064253d 57746573     02x stat=%d.setW
   deadc:	25205444 61770064 64686374 6320676f     DT %d.watchdog c
   deaec:	7261656c 62206465 75736552 253d746c     leared bResult=%
   deafc:	61770064 64686374 7320676f 66207465     d.watchdog set f
   deb0c:	5372756f 3d736365 62206425 75736552     ourSecs=%d bResu
   deb1c:	253d746c 41570064 44484354 4400474f     lt=%d.WATCHDOG.D
   deb2c:	5f504545 45574f50 4f445f52 43004e57     EEP_POWER_DOWN.C
   deb3c:	544e554f 4e574f44 4d49545f 41005245     OUNTDOWN_TIMER.A
   deb4c:	4d52414c 69616600 6572756c 206e6920     LARM.failure in 
   deb5c:	61647075 61576574 6552656b 6e6f7361     updateWakeReason
   deb6c:	00642520 656b6177 61657220 206e6f73      %d.wake reason 
   deb7c:	7325203d 34302500 30252d64 252d6432     = %s.%04d-%02d-%
   deb8c:	20643230 64323025 3230253a 30253a64     02d %02d:%02d:%0
   deb9c:	67006432 74527465 54734163 7325206d     2d.getRtcAsTm %s
   debac:	74657300 73797320 206d6574 636f6c63     .set system cloc
   debbc:	7266206b 52206d6f 25204354 61660073     k from RTC %s.fa
   debcc:	64656c69 206f7420 65746564 41207463     iled to detect A
   debdc:	30383142 65730035 63745274 6d547341     B1805.setRtcAsTm
   debec:	00732520 6c696166 20657275 73206e69      %s.failure in s
   debfc:	74527465 6f724663 206d546d 73006425     etRtcFromTm %d.s
   dec0c:	52207465 66204354 206d6f72 756f6c63     et RTC from clou
   dec1c:	73252064 70706100 3162612e 00353038     d %s.app.ab1805.

000dec2c <_ZTV6AB1805>:
	...
   dec34:	000d908d 000d908f 000d9493 000d9519     ................
   dec44:	74697277 74614465 61662061 64656c69     writeData failed
   dec54:	72756420 20676e69 73617265 72662065      during erase fr
   dec64:	64416d61 253d7264 00000075              amAddr=%u...

000dec70 <_ZTV6MB85RC>:
	...
   dec78:	000d9925 000d9927 000d99d5 000d9a6b     %...'.......k...
   dec88:	000d9aed                                ....

000dec8c <_ZTVN5spark13CellularClassE>:
	...
   dec94:	000da4f7 000da4ed 000da4e3 000da499     ................
   deca4:	000da4d7 000da4cb 000dc0ed 000dc0f5     ................
   decb4:	000da4bf 000da4b7 000da4ad 000da4a3     ................
   decc4:	000dc125                                %...

000decc8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   decd0:	000da531 000da537 000da575 000da545     1...7...u...E...
   dece0:	000da533                                3...

000dece4 <_ZTVN5spark13EthernetClassE>:
	...
   decec:	000dab4b 000dab41 000dab37 000dab2d     K...A...7...-...
   decfc:	000dab21 000dab15 000dc0ed 000dc0f5     !...............
   ded0c:	000dab09 000dab01 000daaf7 000daaed     ................
   ded1c:	000dc125                                %...

000ded20 <_ZTV7TwoWire>:
	...
   ded28:	000dab69 000dabb3 000dab8b 000dab6b     i...........k...
   ded38:	000dab93 000dab9b 000daba3 000dabab     ................

000ded48 <_ZTV9IPAddress>:
	...
   ded50:	000dad19 000dad09 000dad0b 34302575     ............u%04
   ded60:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   ded70:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   ded80:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   ded90:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   deda0:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   dedb0:	69617465 3d20736c 0a0d0020 6c006300     etails = ....c.l
   dedc0:	6e66006e 646f6300 65640065 6c696174     n.fn.code.detail
   dedd0:	00000000                                ....

000dedd4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   deddc:	000db1d5 000db1fb 000db1b9 000dae19     ................

000dedec <_ZTVN5spark16StreamLogHandlerE>:
	...
   dedf4:	000db5b1 000db5c9 000dbd95 000d40cb     .............@..

000dee04 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dee0c:	000db5dd 000db5f1 000dbf39 000db1c1     ........9.......

000dee1c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dee24:	000db1d3 000db209 000dbcd1 000db1c3     ................

000dee34 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dee3c:	000db1d1 000db217 000db4f9 000db235     ............5...

000dee4c <_ZTVN5spark12NetworkClassE>:
	...
   dee54:	000dc0ad 000dc0b7 000dc0c1 000dc0cb     ................
   dee64:	000dc0d5 000dc0e1 000dc0ed 000dc0f5     ................
   dee74:	000dc0fd 000dc109 000dc111 000dc11b     ................
   dee84:	000dc125                                %...

000dee88 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dee88:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   dee98:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   deea8:	72756769 6f697461 7369206e 766e6920     iguration is inv
   deeb8:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   deec8:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   deed8:	00000065                                e...

000deedc <_ZTV11USARTSerial>:
	...
   deee4:	000dcb95 000dcc03 000dcbdb 000dc20d     ................
   deef4:	000dcbab 000dcbc7 000dcbb9 000dcbd5     ................
   def04:	000dcb97 000dcb9d                       ........

000def0c <_ZTV9USBSerial>:
	...
   def14:	000dcca3 000dcd0b 000dcce1 000dc20d     ................
   def24:	000dccd3 000dcca5 000dccb5 000dcd05     ................
   def34:	000dccc5 000dcc9d                       ........

000def3c <_ZSt7nothrow>:
   def3c:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   def4c:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000def5d <day_name.6145>:
   def5d:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   def6d:	61536972                                 riSat

000def72 <mon_name.6146>:
   def72:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   def82:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   def92:	63654476                                vDec

000def96 <_ctype_>:
   def96:	20202000 20202020 28282020 20282828     .         ((((( 
   defa6:	20202020 20202020 20202020 20202020                     
   defb6:	10108820 10101010 10101010 10101010      ...............
   defc6:	04040410 04040404 10040404 10101010     ................
   defd6:	41411010 41414141 01010101 01010101     ..AAAAAA........
   defe6:	01010101 01010101 01010101 10101010     ................
   deff6:	42421010 42424242 02020202 02020202     ..BBBBBB........
   df006:	02020202 02020202 02020202 10101010     ................
   df016:	00000020 00000000 00000000 00000000      ...............
	...

000df097 <link_const_variable_data_end>:
	...

000df098 <link_constructors_location>:
   df098:	000d45c9 	.word	0x000d45c9
   df09c:	000d7531 	.word	0x000d7531
   df0a0:	000d7995 	.word	0x000d7995
   df0a4:	000d907d 	.word	0x000d907d
   df0a8:	000d9915 	.word	0x000d9915
   df0ac:	000da489 	.word	0x000da489
   df0b0:	000da501 	.word	0x000da501
   df0b4:	000dab55 	.word	0x000dab55
   df0b8:	000dbd85 	.word	0x000dbd85
   df0bc:	000dc1f9 	.word	0x000dc1f9
   df0c0:	000dc34d 	.word	0x000dc34d
   df0c4:	000dc8f5 	.word	0x000dc8f5
   df0c8:	000dcb81 	.word	0x000dcb81

000df0cc <link_constructors_end>:
   df0cc:	00000000 	.word	0x00000000
