
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/2.3.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c6d0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e06f0  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001ec  2003dac8  000e06f4  0002dac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b3c  2003dcb8  2003dcb8  0003dcb8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000e08e0  000e08e0  000308e0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000e090c  000e090c  0003090c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00358a69  00000000  00000000  00030910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00031250  00000000  00000000  00389379  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00050f70  00000000  00000000  003ba5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00004260  00000000  00000000  0040b539  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000d3a8  00000000  00000000  0040f799  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00058d41  00000000  00000000  0041cb41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0007ef05  00000000  00000000  00475882  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0013aba0  00000000  00000000  004f4787  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c2a8  00000000  00000000  0062f328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00a fd23 	bl	dea7c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00a fd45 	bl	deacc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dac8 	.word	0x2003dac8
   d404c:	000e06f4 	.word	0x000e06f4
   d4050:	2003dcb4 	.word	0x2003dcb4
   d4054:	2003dcb8 	.word	0x2003dcb8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f009 ff29 	bl	ddeb8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e06ac 	.word	0x000e06ac
   d4080:	000e06f0 	.word	0x000e06f0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbaa 	b.w	d47dc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fcf5 	bl	d4a78 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f009 bec9 	b.w	dde28 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f006 bf07 	b.w	daea8 <malloc>

000d409a <_Znaj>:
   d409a:	f006 bf05 	b.w	daea8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f006 bf0b 	b.w	daeb8 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f006 fd9a 	bl	dabe4 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000da795 	.word	0x000da795

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40c8:	b40e      	push	{r1, r2, r3}
   d40ca:	b510      	push	{r4, lr}
   d40cc:	b08d      	sub	sp, #52	; 0x34
   d40ce:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d40d0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d40d2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d40d6:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40d8:	2300      	movs	r3, #0
   d40da:	2020      	movs	r0, #32
   d40dc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40e0:	e9cd 4200 	strd	r4, r2, [sp]
   d40e4:	201e      	movs	r0, #30
   d40e6:	aa04      	add	r2, sp, #16
   d40e8:	f006 fd8c 	bl	dac04 <log_message_v>
}
   d40ec:	b00d      	add	sp, #52	; 0x34
   d40ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40f2:	b003      	add	sp, #12
   d40f4:	4770      	bx	lr
	...

000d40f8 <_Z14initializeLoRAb>:
 * and the values loaded.  If a device has not had a node and deviceID assigned, it will happen here
 * 
 * @return true - initialization successful
 * @return false - initialization failed
 */
bool initializeLoRA(bool gatewayID) {				// True if Gateway / False if Node
   d40f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d40fa:	4606      	mov	r6, r0
 	// Set up the Radio Module
	if (!manager.init()) {
   d40fc:	481f      	ldr	r0, [pc, #124]	; (d417c <_Z14initializeLoRAb+0x84>)
   d40fe:	f005 fa3d 	bl	d957c <_ZN8RHRouter4initEv>
   d4102:	4605      	mov	r5, r0
   d4104:	b930      	cbnz	r0, d4114 <_Z14initializeLoRAb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d4106:	491e      	ldr	r1, [pc, #120]	; (d4180 <_Z14initializeLoRAb+0x88>)
   d4108:	481e      	ldr	r0, [pc, #120]	; (d4184 <_Z14initializeLoRAb+0x8c>)
   d410a:	f7ff ffdd 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	}
	manager.setThisAddress(sysStatus.nodeNumber);	// Assign the NodeNumber to this node
	
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", sysStatus.nodeNumber, sysStatus.deviceID, sysStatus.structuresVersion);
	return true;
}
   d410e:	4628      	mov	r0, r5
   d4110:	b002      	add	sp, #8
   d4112:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   d4114:	ed9f 0a1c 	vldr	s0, [pc, #112]	; d4188 <_Z14initializeLoRAb+0x90>
   d4118:	481c      	ldr	r0, [pc, #112]	; (d418c <_Z14initializeLoRAb+0x94>)
	if (!(sysStatus.structuresVersion == 128)) {		// This will be our indication that the deviceID and nodeID has not yet been set
   d411a:	4c1d      	ldr	r4, [pc, #116]	; (d4190 <_Z14initializeLoRAb+0x98>)
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   d411c:	f005 fd04 	bl	d9b28 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   d4120:	481a      	ldr	r0, [pc, #104]	; (d418c <_Z14initializeLoRAb+0x94>)
   d4122:	2200      	movs	r2, #0
   d4124:	2117      	movs	r1, #23
   d4126:	f005 fe79 	bl	d9e1c <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.structuresVersion == 128)) {		// This will be our indication that the deviceID and nodeID has not yet been set
   d412a:	7923      	ldrb	r3, [r4, #4]
   d412c:	2b80      	cmp	r3, #128	; 0x80
   d412e:	d011      	beq.n	d4154 <_Z14initializeLoRAb+0x5c>
		randomSeed(sysStatus.lastConnection);		// 32-bit number for seed
   d4130:	6960      	ldr	r0, [r4, #20]
   d4132:	f009 f925 	bl	dd380 <_Z10randomSeedj>
		sysStatus.deviceID = random(1,65535);			// 16-bit number for deviceID
   d4136:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d413a:	2001      	movs	r0, #1
   d413c:	f009 f916 	bl	dd36c <_Z6randomii>
   d4140:	8020      	strh	r0, [r4, #0]
		if (gatewayID) {
   d4142:	b1a6      	cbz	r6, d416e <_Z14initializeLoRAb+0x76>
			Log.info("setting node number as Gateway");
   d4144:	4913      	ldr	r1, [pc, #76]	; (d4194 <_Z14initializeLoRAb+0x9c>)
   d4146:	480f      	ldr	r0, [pc, #60]	; (d4184 <_Z14initializeLoRAb+0x8c>)
   d4148:	f7ff ffbe 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
			sysStatus.nodeNumber = 0x00;
   d414c:	2300      	movs	r3, #0
   d414e:	8063      	strh	r3, [r4, #2]
		sysStatus.structuresVersion = 128;			// Set the structure to the magic number so we can have a stable deviceID
   d4150:	2380      	movs	r3, #128	; 0x80
   d4152:	7123      	strb	r3, [r4, #4]
	manager.setThisAddress(sysStatus.nodeNumber);	// Assign the NodeNumber to this node
   d4154:	78a1      	ldrb	r1, [r4, #2]
   d4156:	4810      	ldr	r0, [pc, #64]	; (d4198 <_Z14initializeLoRAb+0xa0>)
   d4158:	f004 fd0d 	bl	d8b76 <_ZN10RHDatagram14setThisAddressEh>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", sysStatus.nodeNumber, sysStatus.deviceID, sysStatus.structuresVersion);
   d415c:	7923      	ldrb	r3, [r4, #4]
   d415e:	9300      	str	r3, [sp, #0]
   d4160:	8862      	ldrh	r2, [r4, #2]
   d4162:	8823      	ldrh	r3, [r4, #0]
   d4164:	490d      	ldr	r1, [pc, #52]	; (d419c <_Z14initializeLoRAb+0xa4>)
   d4166:	4807      	ldr	r0, [pc, #28]	; (d4184 <_Z14initializeLoRAb+0x8c>)
   d4168:	f7ff ffae 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	return true;
   d416c:	e7cf      	b.n	d410e <_Z14initializeLoRAb+0x16>
		else sysStatus.nodeNumber = random(1,9);	// Random number in - unconfigured - range will trigger a Join request
   d416e:	2109      	movs	r1, #9
   d4170:	2001      	movs	r0, #1
   d4172:	f009 f8fb 	bl	dd36c <_Z6randomii>
   d4176:	8060      	strh	r0, [r4, #2]
   d4178:	e7ea      	b.n	d4150 <_Z14initializeLoRAb+0x58>
   d417a:	bf00      	nop
   d417c:	2003dee8 	.word	0x2003dee8
   d4180:	000df064 	.word	0x000df064
   d4184:	2003e570 	.word	0x2003e570
   d4188:	4464c000 	.word	0x4464c000
   d418c:	2003ddb4 	.word	0x2003ddb4
   d4190:	2003e220 	.word	0x2003e220
   d4194:	000df070 	.word	0x000df070
   d4198:	2003deec 	.word	0x2003deec
   d419c:	000df08f 	.word	0x000df08f

000d41a0 <_Z25decipherDataReportGatewayv>:
	if (lora_state == JOIN_ACK) { if(acknowledgeJoinRequestGateway(nextSeconds)) return true;}

	return false; 
}

bool decipherDataReportGateway() {
   d41a0:	b510      	push	{r4, lr}
   d41a2:	4b19      	ldr	r3, [pc, #100]	; (d4208 <_Z25decipherDataReportGatewayv+0x68>)
   d41a4:	885a      	ldrh	r2, [r3, #2]
	sysStatus.nodeNumber = buf[2] << 8 | buf[3]; // One time kluge until I implement the join process.
   d41a6:	7898      	ldrb	r0, [r3, #2]
   d41a8:	78d9      	ldrb	r1, [r3, #3]
   d41aa:	ba52      	rev16	r2, r2
   d41ac:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   d41b0:	b292      	uxth	r2, r2
   d41b2:	4816      	ldr	r0, [pc, #88]	; (d420c <_Z25decipherDataReportGatewayv+0x6c>)

	if(sysStatus.nodeNumber == (buf[2] << 8 | buf[3])) {
   d41b4:	4291      	cmp	r1, r2
	sysStatus.nodeNumber = buf[2] << 8 | buf[3]; // One time kluge until I implement the join process.
   d41b6:	8041      	strh	r1, [r0, #2]
	if(sysStatus.nodeNumber == (buf[2] << 8 | buf[3])) {
   d41b8:	d121      	bne.n	d41fe <_Z25decipherDataReportGatewayv+0x5e>
		sysStatus.nodeNumber = buf[2] << 8 | buf[3];
		current.hourly = buf[5] << 8 | buf[6];
   d41ba:	795c      	ldrb	r4, [r3, #5]
   d41bc:	7999      	ldrb	r1, [r3, #6]
   d41be:	4a14      	ldr	r2, [pc, #80]	; (d4210 <_Z25decipherDataReportGatewayv+0x70>)
   d41c0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   d41c4:	8391      	strh	r1, [r2, #28]
		current.daily = buf[7] << 8 | buf[8];
   d41c6:	79dc      	ldrb	r4, [r3, #7]
   d41c8:	7a19      	ldrb	r1, [r3, #8]
   d41ca:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   d41ce:	83d1      	strh	r1, [r2, #30]
		current.stateOfCharge = buf[10];
   d41d0:	7a99      	ldrb	r1, [r3, #10]
   d41d2:	6051      	str	r1, [r2, #4]
		current.batteryState = buf[11];
   d41d4:	7ad9      	ldrb	r1, [r3, #11]
   d41d6:	7211      	strb	r1, [r2, #8]
		current.internalTempC = buf[9];
   d41d8:	7a59      	ldrb	r1, [r3, #9]
   d41da:	7011      	strb	r1, [r2, #0]
		sysStatus.resetCount = buf[12];
   d41dc:	7b19      	ldrb	r1, [r3, #12]
   d41de:	60c1      	str	r1, [r0, #12]
		sysStatus.lastAlertCode = buf[13];
   d41e0:	7b59      	ldrb	r1, [r3, #13]
   d41e2:	7781      	strb	r1, [r0, #30]
		current.rssi = (buf[14] << 8 | buf[15]) - 65535;
   d41e4:	7b98      	ldrb	r0, [r3, #14]
   d41e6:	7bd9      	ldrb	r1, [r3, #15]
		current.messageNumber = buf[16];
   d41e8:	7c1b      	ldrb	r3, [r3, #16]
   d41ea:	7693      	strb	r3, [r2, #26]
		current.rssi = (buf[14] << 8 | buf[15]) - 65535;
   d41ec:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   d41f0:	3101      	adds	r1, #1
   d41f2:	8311      	strh	r1, [r2, #24]
	}
	else Log.info("Message intended for another node");

	lora_state = DATA_ACK;		// Prepare to respond
   d41f4:	4b07      	ldr	r3, [pc, #28]	; (d4214 <_Z25decipherDataReportGatewayv+0x74>)
   d41f6:	2204      	movs	r2, #4
   d41f8:	701a      	strb	r2, [r3, #0]

	return true;
}
   d41fa:	2001      	movs	r0, #1
   d41fc:	bd10      	pop	{r4, pc}
	else Log.info("Message intended for another node");
   d41fe:	4906      	ldr	r1, [pc, #24]	; (d4218 <_Z25decipherDataReportGatewayv+0x78>)
   d4200:	4806      	ldr	r0, [pc, #24]	; (d421c <_Z25decipherDataReportGatewayv+0x7c>)
   d4202:	f7ff ff61 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4206:	e7f5      	b.n	d41f4 <_Z25decipherDataReportGatewayv+0x54>
   d4208:	2003dcb9 	.word	0x2003dcb9
   d420c:	2003e220 	.word	0x2003e220
   d4210:	2003e200 	.word	0x2003e200
   d4214:	2003dcb8 	.word	0x2003dcb8
   d4218:	000df0e6 	.word	0x000df0e6
   d421c:	2003e570 	.word	0x2003e570

000d4220 <_Z27listenForLoRAMessageGatewayv>:
bool listenForLoRAMessageGateway() {
   d4220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag))	{	// We have received a message
   d4224:	4f22      	ldr	r7, [pc, #136]	; (d42b0 <_Z27listenForLoRAMessageGatewayv+0x90>)
   d4226:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d42d0 <_Z27listenForLoRAMessageGatewayv+0xb0>
   d422a:	4e22      	ldr	r6, [pc, #136]	; (d42b4 <_Z27listenForLoRAMessageGatewayv+0x94>)
   d422c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d42d4 <_Z27listenForLoRAMessageGatewayv+0xb4>
   d4230:	4821      	ldr	r0, [pc, #132]	; (d42b8 <_Z27listenForLoRAMessageGatewayv+0x98>)
bool listenForLoRAMessageGateway() {
   d4232:	b089      	sub	sp, #36	; 0x24
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag))	{	// We have received a message
   d4234:	2400      	movs	r4, #0
   d4236:	e9cd 4602 	strd	r4, r6, [sp, #8]
   d423a:	9404      	str	r4, [sp, #16]
   d423c:	9401      	str	r4, [sp, #4]
   d423e:	f8cd 8000 	str.w	r8, [sp]
   d4242:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d4246:	463a      	mov	r2, r7
   d4248:	4649      	mov	r1, r9
   d424a:	f005 f835 	bl	d92b8 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d424e:	4605      	mov	r5, r0
   d4250:	b918      	cbnz	r0, d425a <_Z27listenForLoRAMessageGatewayv+0x3a>
	return false; 
   d4252:	2000      	movs	r0, #0
}
   d4254:	b009      	add	sp, #36	; 0x24
   d4256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[len] = 0;
   d425a:	783b      	ldrb	r3, [r7, #0]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[messageFlag] ,len);
   d425c:	f898 2000 	ldrb.w	r2, [r8]
		buf[len] = 0;
   d4260:	f809 4003 	strb.w	r4, [r9, r3]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   d4264:	7833      	ldrb	r3, [r6, #0]
   d4266:	4c15      	ldr	r4, [pc, #84]	; (d42bc <_Z27listenForLoRAMessageGatewayv+0x9c>)
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[messageFlag] ,len);
   d4268:	4815      	ldr	r0, [pc, #84]	; (d42c0 <_Z27listenForLoRAMessageGatewayv+0xa0>)
   d426a:	9207      	str	r2, [sp, #28]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   d426c:	f003 030f 	and.w	r3, r3, #15
   d4270:	7023      	strb	r3, [r4, #0]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[messageFlag] ,len);
   d4272:	f004 fcfe 	bl	d8c72 <_ZN15RHGenericDriver8lastRssiEv>
   d4276:	7839      	ldrb	r1, [r7, #0]
   d4278:	9101      	str	r1, [sp, #4]
   d427a:	4603      	mov	r3, r0
   d427c:	4911      	ldr	r1, [pc, #68]	; (d42c4 <_Z27listenForLoRAMessageGatewayv+0xa4>)
   d427e:	7830      	ldrb	r0, [r6, #0]
   d4280:	9a07      	ldr	r2, [sp, #28]
   d4282:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   d4286:	9100      	str	r1, [sp, #0]
   d4288:	480f      	ldr	r0, [pc, #60]	; (d42c8 <_Z27listenForLoRAMessageGatewayv+0xa8>)
   d428a:	4910      	ldr	r1, [pc, #64]	; (d42cc <_Z27listenForLoRAMessageGatewayv+0xac>)
   d428c:	f7ff ff1c 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(decipherDataReportGateway()) return true;}
   d4290:	7823      	ldrb	r3, [r4, #0]
   d4292:	2b03      	cmp	r3, #3
   d4294:	d006      	beq.n	d42a4 <_Z27listenForLoRAMessageGatewayv+0x84>
		if (lora_state == JOIN_REQ) { if(decipherJoinRequestGateway()) return true;}
   d4296:	7823      	ldrb	r3, [r4, #0]
   d4298:	2b01      	cmp	r3, #1
   d429a:	d1da      	bne.n	d4252 <_Z27listenForLoRAMessageGatewayv+0x32>

bool decipherJoinRequestGateway() {
	// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set

	lora_state = JOIN_ACK;			// Prepare to respond
   d429c:	2302      	movs	r3, #2
   d429e:	7023      	strb	r3, [r4, #0]
		if (lora_state == JOIN_REQ) { if(decipherJoinRequestGateway()) return true;}
   d42a0:	4628      	mov	r0, r5
   d42a2:	e7d7      	b.n	d4254 <_Z27listenForLoRAMessageGatewayv+0x34>
		if (lora_state == DATA_RPT) { if(decipherDataReportGateway()) return true;}
   d42a4:	f7ff ff7c 	bl	d41a0 <_Z25decipherDataReportGatewayv>
   d42a8:	2800      	cmp	r0, #0
   d42aa:	d0f4      	beq.n	d4296 <_Z27listenForLoRAMessageGatewayv+0x76>
   d42ac:	e7d2      	b.n	d4254 <_Z27listenForLoRAMessageGatewayv+0x34>
   d42ae:	bf00      	nop
   d42b0:	2003dac8 	.word	0x2003dac8
   d42b4:	2003e020 	.word	0x2003e020
   d42b8:	2003dee8 	.word	0x2003dee8
   d42bc:	2003dcb8 	.word	0x2003dcb8
   d42c0:	2003ddb4 	.word	0x2003ddb4
   d42c4:	2003dac9 	.word	0x2003dac9
   d42c8:	2003e570 	.word	0x2003e570
   d42cc:	000df108 	.word	0x000df108
   d42d0:	2003dcb9 	.word	0x2003dcb9
   d42d4:	2003dee4 	.word	0x2003dee4

000d42d8 <_Z28acknowledgeDataReportGatewayi>:

	return true;
}

bool acknowledgeDataReportGateway(int nextSeconds) {
   d42d8:	b530      	push	{r4, r5, lr}

	Log.info("Preparing acknowledgement with %i seconds",sysStatus.nextReportSeconds);
   d42da:	4d35      	ldr	r5, [pc, #212]	; (d43b0 <_Z28acknowledgeDataReportGatewayi+0xd8>)

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = buf[16];							// Message number
   d42dc:	4c35      	ldr	r4, [pc, #212]	; (d43b4 <_Z28acknowledgeDataReportGatewayi+0xdc>)
	Log.info("Preparing acknowledgement with %i seconds",sysStatus.nextReportSeconds);
   d42de:	8b6a      	ldrh	r2, [r5, #26]
   d42e0:	4935      	ldr	r1, [pc, #212]	; (d43b8 <_Z28acknowledgeDataReportGatewayi+0xe0>)
   d42e2:	4836      	ldr	r0, [pc, #216]	; (d43bc <_Z28acknowledgeDataReportGatewayi+0xe4>)
bool acknowledgeDataReportGateway(int nextSeconds) {
   d42e4:	b087      	sub	sp, #28
	Log.info("Preparing acknowledgement with %i seconds",sysStatus.nextReportSeconds);
   d42e6:	f7ff feef 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = buf[16];							// Message number
   d42ea:	7c23      	ldrb	r3, [r4, #16]
   d42ec:	7023      	strb	r3, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24)); // Fourth byte - current time
   d42ee:	f009 fc52 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d42f2:	1600      	asrs	r0, r0, #24
   d42f4:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   d42f6:	f009 fc4e 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d42fa:	1400      	asrs	r0, r0, #16
   d42fc:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   d42fe:	f009 fc4a 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d4302:	1200      	asrs	r0, r0, #8
   d4304:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   d4306:	f009 fc46 	bl	ddb96 <_ZN9TimeClass3nowEv>
	buf[5] = highByte(sysStatus.frequencyMinutes);	// Frequency of reports - for Gateways
   d430a:	8bab      	ldrh	r3, [r5, #28]
	buf[6] = lowByte(sysStatus.frequencyMinutes);	
   d430c:	71a3      	strb	r3, [r4, #6]
	buf[5] = highByte(sysStatus.frequencyMinutes);	// Frequency of reports - for Gateways
   d430e:	121a      	asrs	r2, r3, #8
	buf[7] = highByte(sysStatus.nextReportSeconds);	// Seconds until next report - for Nodes
   d4310:	8b6b      	ldrh	r3, [r5, #26]
	buf[5] = highByte(sysStatus.frequencyMinutes);	// Frequency of reports - for Gateways
   d4312:	7162      	strb	r2, [r4, #5]
	buf[7] = highByte(sysStatus.nextReportSeconds);	// Seconds until next report - for Nodes
   d4314:	121a      	asrs	r2, r3, #8
   d4316:	71e2      	strb	r2, [r4, #7]
	buf[8] = lowByte(sysStatus.nextReportSeconds);
	
	Log.info("Sent response to client message = %d, time = %s, next report = %u seconds", buf[0], Time.timeStr(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]).c_str(), (buf[7] << 8 | buf[8]));
   d4318:	78a2      	ldrb	r2, [r4, #2]
	buf[8] = lowByte(sysStatus.nextReportSeconds);
   d431a:	7223      	strb	r3, [r4, #8]
	Log.info("Sent response to client message = %d, time = %s, next report = %u seconds", buf[0], Time.timeStr(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]).c_str(), (buf[7] << 8 | buf[8]));
   d431c:	7863      	ldrb	r3, [r4, #1]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   d431e:	7120      	strb	r0, [r4, #4]
	Log.info("Sent response to client message = %d, time = %s, next report = %u seconds", buf[0], Time.timeStr(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]).c_str(), (buf[7] << 8 | buf[8]));
   d4320:	0412      	lsls	r2, r2, #16
   d4322:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d4326:	78e3      	ldrb	r3, [r4, #3]
   d4328:	7825      	ldrb	r5, [r4, #0]
   d432a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   d432e:	b2c0      	uxtb	r0, r0
   d4330:	4302      	orrs	r2, r0
   d4332:	17d3      	asrs	r3, r2, #31
   d4334:	a802      	add	r0, sp, #8
   d4336:	f009 fb2b 	bl	dd990 <_ZN9TimeClass7timeStrEx>
   d433a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   d433e:	4920      	ldr	r1, [pc, #128]	; (d43c0 <_Z28acknowledgeDataReportGatewayi+0xe8>)
   d4340:	481e      	ldr	r0, [pc, #120]	; (d43bc <_Z28acknowledgeDataReportGatewayi+0xe4>)
   d4342:	ba5b      	rev16	r3, r3
   d4344:	b29b      	uxth	r3, r3
   d4346:	462a      	mov	r2, r5
   d4348:	9300      	str	r3, [sp, #0]
   d434a:	9b02      	ldr	r3, [sp, #8]
   d434c:	f7ff febc 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4350:	a802      	add	r0, sp, #8
   d4352:	f009 f8dd 	bl	dd510 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   d4356:	4b1b      	ldr	r3, [pc, #108]	; (d43c4 <_Z28acknowledgeDataReportGatewayi+0xec>)
   d4358:	881d      	ldrh	r5, [r3, #0]
   d435a:	2101      	movs	r1, #1
   d435c:	4628      	mov	r0, r5
   d435e:	f009 fe44 	bl	ddfea <digitalWrite>

	if (manager.sendtoWait(buf, 9, from, DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   d4362:	2304      	movs	r3, #4
   d4364:	9300      	str	r3, [sp, #0]
   d4366:	4b18      	ldr	r3, [pc, #96]	; (d43c8 <_Z28acknowledgeDataReportGatewayi+0xf0>)
   d4368:	4818      	ldr	r0, [pc, #96]	; (d43cc <_Z28acknowledgeDataReportGatewayi+0xf4>)
   d436a:	781b      	ldrb	r3, [r3, #0]
   d436c:	4621      	mov	r1, r4
   d436e:	2209      	movs	r2, #9
   d4370:	f004 fe9c 	bl	d90ac <_ZN6RHMesh10sendtoWaitEPhhhh>
   d4374:	4604      	mov	r4, r0
   d4376:	b968      	cbnz	r0, d4394 <_Z28acknowledgeDataReportGatewayi+0xbc>
		Log.info("Response received successfully");
   d4378:	4915      	ldr	r1, [pc, #84]	; (d43d0 <_Z28acknowledgeDataReportGatewayi+0xf8>)
   d437a:	4810      	ldr	r0, [pc, #64]	; (d43bc <_Z28acknowledgeDataReportGatewayi+0xe4>)
   d437c:	f7ff fea4 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   d4380:	4621      	mov	r1, r4
   d4382:	4628      	mov	r0, r5
   d4384:	f009 fe31 	bl	ddfea <digitalWrite>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   d4388:	4812      	ldr	r0, [pc, #72]	; (d43d4 <_Z28acknowledgeDataReportGatewayi+0xfc>)
   d438a:	f005 fb5a 	bl	d9a42 <_ZN7RH_RF955sleepEv>
		return true;
   d438e:	2001      	movs	r0, #1

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	driver.sleep();                             // Here is where we will power down the LoRA radio module
	return false;
}
   d4390:	b007      	add	sp, #28
   d4392:	bd30      	pop	{r4, r5, pc}
	Log.info("Response not acknowledged");
   d4394:	4910      	ldr	r1, [pc, #64]	; (d43d8 <_Z28acknowledgeDataReportGatewayi+0x100>)
   d4396:	4809      	ldr	r0, [pc, #36]	; (d43bc <_Z28acknowledgeDataReportGatewayi+0xe4>)
   d4398:	f7ff fe96 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   d439c:	2100      	movs	r1, #0
   d439e:	4628      	mov	r0, r5
   d43a0:	f009 fe23 	bl	ddfea <digitalWrite>
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   d43a4:	480b      	ldr	r0, [pc, #44]	; (d43d4 <_Z28acknowledgeDataReportGatewayi+0xfc>)
   d43a6:	f005 fb4c 	bl	d9a42 <_ZN7RH_RF955sleepEv>
	return false;
   d43aa:	2000      	movs	r0, #0
   d43ac:	e7f0      	b.n	d4390 <_Z28acknowledgeDataReportGatewayi+0xb8>
   d43ae:	bf00      	nop
   d43b0:	2003e220 	.word	0x2003e220
   d43b4:	2003dcb9 	.word	0x2003dcb9
   d43b8:	000df147 	.word	0x000df147
   d43bc:	2003e570 	.word	0x2003e570
   d43c0:	000df171 	.word	0x000df171
   d43c4:	000df4b0 	.word	0x000df4b0
   d43c8:	2003dee4 	.word	0x2003dee4
   d43cc:	2003dee8 	.word	0x2003dee8
   d43d0:	000df1bb 	.word	0x000df1bb
   d43d4:	2003ddb4 	.word	0x2003ddb4
   d43d8:	000df1da 	.word	0x000df1da

000d43dc <_Z29acknowledgeJoinRequestGatewayi>:

bool acknowledgeJoinRequestGateway(int nextSeconds) {
   d43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t newNodeNumber = 0;
	uint16_t nextSecondsShort = (uint16_t)nextSeconds;
	Log.info("Preparing acknowledgement with %i seconds",nextSecondsShort);

	if (from < 10) {							// Device needs a new node number
   d43de:	4e3a      	ldr	r6, [pc, #232]	; (d44c8 <_Z29acknowledgeJoinRequestGatewayi+0xec>)
	Log.info("Preparing acknowledgement with %i seconds",nextSecondsShort);
   d43e0:	493a      	ldr	r1, [pc, #232]	; (d44cc <_Z29acknowledgeJoinRequestGatewayi+0xf0>)
   d43e2:	b282      	uxth	r2, r0
bool acknowledgeJoinRequestGateway(int nextSeconds) {
   d43e4:	b087      	sub	sp, #28
   d43e6:	4607      	mov	r7, r0
	Log.info("Preparing acknowledgement with %i seconds",nextSecondsShort);
   d43e8:	4839      	ldr	r0, [pc, #228]	; (d44d0 <_Z29acknowledgeJoinRequestGatewayi+0xf4>)
   d43ea:	f7ff fe6d 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	if (from < 10) {							// Device needs a new node number
   d43ee:	7833      	ldrb	r3, [r6, #0]
   d43f0:	2b09      	cmp	r3, #9
   d43f2:	d85a      	bhi.n	d44aa <_Z29acknowledgeJoinRequestGatewayi+0xce>
		randomSeed(sysStatus.lastHookResponse);
   d43f4:	4b37      	ldr	r3, [pc, #220]	; (d44d4 <_Z29acknowledgeJoinRequestGatewayi+0xf8>)
   d43f6:	6918      	ldr	r0, [r3, #16]
   d43f8:	f008 ffc2 	bl	dd380 <_Z10randomSeedj>
		newNodeNumber = random(10,255);
   d43fc:	21ff      	movs	r1, #255	; 0xff
   d43fe:	200a      	movs	r0, #10
   d4400:	f008 ffb4 	bl	dd36c <_Z6randomii>
   d4404:	b285      	uxth	r5, r0
	}

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = 128;								// Magic number - so you can trust me
   d4406:	4c34      	ldr	r4, [pc, #208]	; (d44d8 <_Z29acknowledgeJoinRequestGatewayi+0xfc>)
   d4408:	2380      	movs	r3, #128	; 0x80
   d440a:	7023      	strb	r3, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   d440c:	f009 fbc3 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d4410:	1600      	asrs	r0, r0, #24
   d4412:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   d4414:	f009 fbbf 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d4418:	1400      	asrs	r0, r0, #16
   d441a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   d441c:	f009 fbbb 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d4420:	1200      	asrs	r0, r0, #8
   d4422:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   d4424:	f009 fbb7 	bl	ddb96 <_ZN9TimeClass3nowEv>
	buf[5] = highByte(newNodeNumber);			// New Node Number for device
   d4428:	122b      	asrs	r3, r5, #8
	buf[6] = lowByte(newNodeNumber);	
	buf[7] = highByte(nextSecondsShort);		// Seconds until next report - for Nodes
	buf[8] = lowByte(nextSecondsShort);
	
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", newNodeNumber, Time.timeStr(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]).c_str(), (buf[7] << 8 | buf[8]));
   d442a:	78a2      	ldrb	r2, [r4, #2]
	buf[5] = highByte(newNodeNumber);			// New Node Number for device
   d442c:	7163      	strb	r3, [r4, #5]
	buf[7] = highByte(nextSecondsShort);		// Seconds until next report - for Nodes
   d442e:	123b      	asrs	r3, r7, #8
   d4430:	71e3      	strb	r3, [r4, #7]
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", newNodeNumber, Time.timeStr(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]).c_str(), (buf[7] << 8 | buf[8]));
   d4432:	7863      	ldrb	r3, [r4, #1]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   d4434:	7120      	strb	r0, [r4, #4]
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", newNodeNumber, Time.timeStr(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]).c_str(), (buf[7] << 8 | buf[8]));
   d4436:	0412      	lsls	r2, r2, #16
   d4438:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d443c:	78e3      	ldrb	r3, [r4, #3]
	buf[6] = lowByte(newNodeNumber);	
   d443e:	71a5      	strb	r5, [r4, #6]
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", newNodeNumber, Time.timeStr(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]).c_str(), (buf[7] << 8 | buf[8]));
   d4440:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   d4444:	b2c0      	uxtb	r0, r0
   d4446:	4302      	orrs	r2, r0
   d4448:	17d3      	asrs	r3, r2, #31
   d444a:	a802      	add	r0, sp, #8
	buf[8] = lowByte(nextSecondsShort);
   d444c:	7227      	strb	r7, [r4, #8]
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", newNodeNumber, Time.timeStr(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]).c_str(), (buf[7] << 8 | buf[8]));
   d444e:	f009 fa9f 	bl	dd990 <_ZN9TimeClass7timeStrEx>
   d4452:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   d4456:	4921      	ldr	r1, [pc, #132]	; (d44dc <_Z29acknowledgeJoinRequestGatewayi+0x100>)
   d4458:	481d      	ldr	r0, [pc, #116]	; (d44d0 <_Z29acknowledgeJoinRequestGatewayi+0xf4>)
   d445a:	ba5b      	rev16	r3, r3
   d445c:	b29b      	uxth	r3, r3
   d445e:	462a      	mov	r2, r5
   d4460:	9300      	str	r3, [sp, #0]
   d4462:	9b02      	ldr	r3, [sp, #8]
   d4464:	f7ff fe30 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4468:	a802      	add	r0, sp, #8
   d446a:	f009 f851 	bl	dd510 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   d446e:	4b1c      	ldr	r3, [pc, #112]	; (d44e0 <_Z29acknowledgeJoinRequestGatewayi+0x104>)
   d4470:	881d      	ldrh	r5, [r3, #0]
   d4472:	2101      	movs	r1, #1
   d4474:	4628      	mov	r0, r5
   d4476:	f009 fdb8 	bl	ddfea <digitalWrite>

	if (manager.sendtoWait(buf, 9, from, JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   d447a:	2302      	movs	r3, #2
   d447c:	9300      	str	r3, [sp, #0]
   d447e:	4621      	mov	r1, r4
   d4480:	7833      	ldrb	r3, [r6, #0]
   d4482:	4818      	ldr	r0, [pc, #96]	; (d44e4 <_Z29acknowledgeJoinRequestGatewayi+0x108>)
   d4484:	2209      	movs	r2, #9
   d4486:	f004 fe11 	bl	d90ac <_ZN6RHMesh10sendtoWaitEPhhhh>
   d448a:	4604      	mov	r4, r0
   d448c:	b978      	cbnz	r0, d44ae <_Z29acknowledgeJoinRequestGatewayi+0xd2>
		Log.info("Response received successfully");
   d448e:	4916      	ldr	r1, [pc, #88]	; (d44e8 <_Z29acknowledgeJoinRequestGatewayi+0x10c>)
   d4490:	480f      	ldr	r0, [pc, #60]	; (d44d0 <_Z29acknowledgeJoinRequestGatewayi+0xf4>)
   d4492:	f7ff fe19 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   d4496:	4621      	mov	r1, r4
   d4498:	4628      	mov	r0, r5
   d449a:	f009 fda6 	bl	ddfea <digitalWrite>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   d449e:	4813      	ldr	r0, [pc, #76]	; (d44ec <_Z29acknowledgeJoinRequestGatewayi+0x110>)
   d44a0:	f005 facf 	bl	d9a42 <_ZN7RH_RF955sleepEv>
		return true;
   d44a4:	2001      	movs	r0, #1

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	driver.sleep();                             // Here is where we will power down the LoRA radio module
	return false;
}
   d44a6:	b007      	add	sp, #28
   d44a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t newNodeNumber = 0;
   d44aa:	2500      	movs	r5, #0
   d44ac:	e7ab      	b.n	d4406 <_Z29acknowledgeJoinRequestGatewayi+0x2a>
	Log.info("Response not acknowledged");
   d44ae:	4910      	ldr	r1, [pc, #64]	; (d44f0 <_Z29acknowledgeJoinRequestGatewayi+0x114>)
   d44b0:	4807      	ldr	r0, [pc, #28]	; (d44d0 <_Z29acknowledgeJoinRequestGatewayi+0xf4>)
   d44b2:	f7ff fe09 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   d44b6:	2100      	movs	r1, #0
   d44b8:	4628      	mov	r0, r5
   d44ba:	f009 fd96 	bl	ddfea <digitalWrite>
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   d44be:	480b      	ldr	r0, [pc, #44]	; (d44ec <_Z29acknowledgeJoinRequestGatewayi+0x110>)
   d44c0:	f005 fabf 	bl	d9a42 <_ZN7RH_RF955sleepEv>
	return false;
   d44c4:	2000      	movs	r0, #0
   d44c6:	e7ee      	b.n	d44a6 <_Z29acknowledgeJoinRequestGatewayi+0xca>
   d44c8:	2003dee4 	.word	0x2003dee4
   d44cc:	000df147 	.word	0x000df147
   d44d0:	2003e570 	.word	0x2003e570
   d44d4:	2003e220 	.word	0x2003e220
   d44d8:	2003dcb9 	.word	0x2003dcb9
   d44dc:	000df1f4 	.word	0x000df1f4
   d44e0:	000df4b0 	.word	0x000df4b0
   d44e4:	2003dee8 	.word	0x2003dee8
   d44e8:	000df1bb 	.word	0x000df1bb
   d44ec:	2003ddb4 	.word	0x2003ddb4
   d44f0:	000df1da 	.word	0x000df1da

000d44f4 <_Z28respondForLoRAMessageGatewayi>:
bool respondForLoRAMessageGateway(int nextSeconds) {
   d44f4:	b538      	push	{r3, r4, r5, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   d44f6:	4c0e      	ldr	r4, [pc, #56]	; (d4530 <_Z28respondForLoRAMessageGatewayi+0x3c>)
   d44f8:	4b0e      	ldr	r3, [pc, #56]	; (d4534 <_Z28respondForLoRAMessageGatewayi+0x40>)
   d44fa:	7822      	ldrb	r2, [r4, #0]
   d44fc:	490e      	ldr	r1, [pc, #56]	; (d4538 <_Z28respondForLoRAMessageGatewayi+0x44>)
   d44fe:	eb03 1202 	add.w	r2, r3, r2, lsl #4
bool respondForLoRAMessageGateway(int nextSeconds) {
   d4502:	4605      	mov	r5, r0
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   d4504:	480d      	ldr	r0, [pc, #52]	; (d453c <_Z28respondForLoRAMessageGatewayi+0x48>)
   d4506:	f7ff fddf 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(acknowledgeDataReportGateway(nextSeconds)) return true;}
   d450a:	7823      	ldrb	r3, [r4, #0]
   d450c:	2b04      	cmp	r3, #4
   d450e:	d004      	beq.n	d451a <_Z28respondForLoRAMessageGatewayi+0x26>
	if (lora_state == JOIN_ACK) { if(acknowledgeJoinRequestGateway(nextSeconds)) return true;}
   d4510:	7823      	ldrb	r3, [r4, #0]
   d4512:	2b02      	cmp	r3, #2
   d4514:	d007      	beq.n	d4526 <_Z28respondForLoRAMessageGatewayi+0x32>
	return false; 
   d4516:	2000      	movs	r0, #0
}
   d4518:	bd38      	pop	{r3, r4, r5, pc}
	if (lora_state == DATA_ACK) { if(acknowledgeDataReportGateway(nextSeconds)) return true;}
   d451a:	4628      	mov	r0, r5
   d451c:	f7ff fedc 	bl	d42d8 <_Z28acknowledgeDataReportGatewayi>
   d4520:	2800      	cmp	r0, #0
   d4522:	d0f5      	beq.n	d4510 <_Z28respondForLoRAMessageGatewayi+0x1c>
   d4524:	e7f8      	b.n	d4518 <_Z28respondForLoRAMessageGatewayi+0x24>
	if (lora_state == JOIN_ACK) { if(acknowledgeJoinRequestGateway(nextSeconds)) return true;}
   d4526:	4628      	mov	r0, r5
}
   d4528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (lora_state == JOIN_ACK) { if(acknowledgeJoinRequestGateway(nextSeconds)) return true;}
   d452c:	f7ff bf56 	b.w	d43dc <_Z29acknowledgeJoinRequestGatewayi>
   d4530:	2003dcb8 	.word	0x2003dcb8
   d4534:	2003dac9 	.word	0x2003dac9
   d4538:	000df232 	.word	0x000df232
   d453c:	2003e570 	.word	0x2003e570

000d4540 <_GLOBAL__sub_I_loraStateNames>:
	}
	else {
		Log.info("No reply, are the gateways running?");
		return false;
	}
}
   d4540:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d4542:	4a08      	ldr	r2, [pc, #32]	; (d4564 <_GLOBAL__sub_I_loraStateNames+0x24>)
   d4544:	4c08      	ldr	r4, [pc, #32]	; (d4568 <_GLOBAL__sub_I_loraStateNames+0x28>)
   d4546:	4909      	ldr	r1, [pc, #36]	; (d456c <_GLOBAL__sub_I_loraStateNames+0x2c>)
   d4548:	7812      	ldrb	r2, [r2, #0]
   d454a:	7809      	ldrb	r1, [r1, #0]
   d454c:	4b08      	ldr	r3, [pc, #32]	; (d4570 <_GLOBAL__sub_I_loraStateNames+0x30>)
   d454e:	4620      	mov	r0, r4
   d4550:	f005 faac 	bl	d9aac <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   d4554:	4621      	mov	r1, r4
   d4556:	4807      	ldr	r0, [pc, #28]	; (d4574 <_GLOBAL__sub_I_loraStateNames+0x34>)
}
   d4558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   d455c:	2200      	movs	r2, #0
   d455e:	f004 bd9b 	b.w	d9098 <_ZN6RHMeshC1ER15RHGenericDriverh>
   d4562:	bf00      	nop
   d4564:	000df4b6 	.word	0x000df4b6
   d4568:	2003ddb4 	.word	0x2003ddb4
   d456c:	000df4b4 	.word	0x000df4b4
   d4570:	2003e274 	.word	0x2003e274
   d4574:	2003dee8 	.word	0x2003dee8

000d4578 <_Z13userSwitchISRv>:
	}
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   d4578:	4b01      	ldr	r3, [pc, #4]	; (d4580 <_Z13userSwitchISRv+0x8>)
   d457a:	2201      	movs	r2, #1
   d457c:	701a      	strb	r2, [r3, #0]
}
   d457e:	4770      	bx	lr
   d4580:	2003e1b1 	.word	0x2003e1b1

000d4584 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4584:	b510      	push	{r4, lr}
   d4586:	4b03      	ldr	r3, [pc, #12]	; (d4594 <_ZN8MB85RC64D1Ev+0x10>)
   d4588:	6003      	str	r3, [r0, #0]
   d458a:	4604      	mov	r4, r0
   d458c:	f003 fc15 	bl	d7dba <_ZN6MB85RCD1Ev>
   d4590:	4620      	mov	r0, r4
   d4592:	bd10      	pop	{r4, pc}
   d4594:	000df468 	.word	0x000df468

000d4598 <_ZN8MB85RC64D0Ev>:
   d4598:	b510      	push	{r4, lr}
   d459a:	4604      	mov	r4, r0
   d459c:	f7ff fff2 	bl	d4584 <_ZN8MB85RC64D1Ev>
   d45a0:	4620      	mov	r0, r4
   d45a2:	2110      	movs	r1, #16
   d45a4:	f009 fdde 	bl	de164 <_ZdlPvj>
   d45a8:	4620      	mov	r0, r4
   d45aa:	bd10      	pop	{r4, pc}

000d45ac <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d45ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d45ae:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d45b0:	4605      	mov	r5, r0
   d45b2:	460f      	mov	r7, r1
   d45b4:	4616      	mov	r6, r2
        if (valid_) {
   d45b6:	b18b      	cbz	r3, d45dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d45b8:	6803      	ldr	r3, [r0, #0]
   d45ba:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d45bc:	b183      	cbz	r3, d45e0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d45be:	889a      	ldrh	r2, [r3, #4]
   d45c0:	2a01      	cmp	r2, #1
   d45c2:	d006      	beq.n	d45d2 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d45c4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d45c6:	e7f9      	b.n	d45bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d45c8:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d45ca:	b14b      	cbz	r3, d45e0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d45cc:	889a      	ldrh	r2, [r3, #4]
   d45ce:	2a01      	cmp	r2, #1
   d45d0:	d1fa      	bne.n	d45c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d45d2:	b12b      	cbz	r3, d45e0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d45d4:	899a      	ldrh	r2, [r3, #12]
   d45d6:	42ba      	cmp	r2, r7
   d45d8:	d1f6      	bne.n	d45c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d45da:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d45dc:	4628      	mov	r0, r5
   d45de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d45e0:	490a      	ldr	r1, [pc, #40]	; (d460c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d45e2:	2010      	movs	r0, #16
   d45e4:	f009 fdc0 	bl	de168 <_ZnwjRKSt9nothrow_t>
   d45e8:	4604      	mov	r4, r0
   d45ea:	b168      	cbz	r0, d4608 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d45ec:	2210      	movs	r2, #16
   d45ee:	2100      	movs	r1, #0
   d45f0:	f00a fa6c 	bl	deacc <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d45f4:	4b06      	ldr	r3, [pc, #24]	; (d4610 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d45f6:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d45f8:	2301      	movs	r3, #1
   d45fa:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d45fc:	692b      	ldr	r3, [r5, #16]
   d45fe:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4600:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4602:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4604:	612c      	str	r4, [r5, #16]
   d4606:	e7e9      	b.n	d45dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4608:	7528      	strb	r0, [r5, #20]
                return *this;
   d460a:	e7e7      	b.n	d45dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d460c:	000e0550 	.word	0x000e0550
   d4610:	00030010 	.word	0x00030010

000d4614 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>:
     * 
     * Note that 24:00:00 is not a valid time. You should generally use inclusive times such that
     * 23:59:59 is the end of the day.
     * 
     */
    LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd = LocalTimeHMS("23:59:59")) : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(hmsStart), hmsEnd(hmsEnd) {
   d4614:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d4616:	247f      	movs	r4, #127	; 0x7f
   d4618:	7004      	strb	r4, [r0, #0]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d461a:	2400      	movs	r4, #0
   d461c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d4620:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d4624:	e9c0 4405 	strd	r4, r4, [r0, #20]
class LocalTimeHMS {
   d4628:	6849      	ldr	r1, [r1, #4]
   d462a:	4c03      	ldr	r4, [pc, #12]	; (d4638 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_+0x24>)
   d462c:	6852      	ldr	r2, [r2, #4]
   d462e:	61c4      	str	r4, [r0, #28]
   d4630:	e9c0 1408 	strd	r1, r4, [r0, #32]
   d4634:	6282      	str	r2, [r0, #40]	; 0x28
    }
   d4636:	bd10      	pop	{r4, pc}
   d4638:	000dfbd4 	.word	0x000dfbd4

000d463c <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d463c:	b510      	push	{r4, lr}
   d463e:	4604      	mov	r4, r0
   d4640:	3024      	adds	r0, #36	; 0x24
   d4642:	f002 f93a 	bl	d68ba <_ZN12LocalTimeHMSD1Ev>
   d4646:	f104 001c 	add.w	r0, r4, #28
   d464a:	f002 f936 	bl	d68ba <_ZN12LocalTimeHMSD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d464e:	6920      	ldr	r0, [r4, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4650:	b108      	cbz	r0, d4656 <_ZN14LocalTimeRangeD1Ev+0x1a>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4652:	f7ff fd24 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d4656:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d4658:	b108      	cbz	r0, d465e <_ZN14LocalTimeRangeD1Ev+0x22>
   d465a:	f7ff fd20 	bl	d409e <_ZdlPv>
   d465e:	4620      	mov	r0, r4
   d4660:	bd10      	pop	{r4, pc}
	...

000d4664 <_Z22publishStateTransitionv>:
{
   d4664:	b5f0      	push	{r4, r5, r6, r7, lr}
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4666:	4d25      	ldr	r5, [pc, #148]	; (d46fc <_Z22publishStateTransitionv+0x98>)
   d4668:	4c25      	ldr	r4, [pc, #148]	; (d4700 <_Z22publishStateTransitionv+0x9c>)
   d466a:	4b26      	ldr	r3, [pc, #152]	; (d4704 <_Z22publishStateTransitionv+0xa0>)
   d466c:	782a      	ldrb	r2, [r5, #0]
   d466e:	7821      	ldrb	r1, [r4, #0]
{
   d4670:	b08f      	sub	sp, #60	; 0x3c
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4672:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d4676:	9200      	str	r2, [sp, #0]
   d4678:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d467c:	4a22      	ldr	r2, [pc, #136]	; (d4708 <_Z22publishStateTransitionv+0xa4>)
   d467e:	2128      	movs	r1, #40	; 0x28
   d4680:	a804      	add	r0, sp, #16
   d4682:	f006 fc39 	bl	daef8 <snprintf>
	oldState = state;
   d4686:	782b      	ldrb	r3, [r5, #0]
   d4688:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d468a:	f006 fb6d 	bl	dad68 <spark_cloud_flag_connected>
	if (Particle.connected()) {
   d468e:	2800      	cmp	r0, #0
   d4690:	d02e      	beq.n	d46f0 <_Z22publishStateTransitionv+0x8c>
		if (millis() - lastPublish > 1000) {
   d4692:	4c1e      	ldr	r4, [pc, #120]	; (d470c <_Z22publishStateTransitionv+0xa8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4694:	f006 f886 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
   d4698:	e9d4 3200 	ldrd	r3, r2, [r4]
   d469c:	1ac6      	subs	r6, r0, r3
   d469e:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d46a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d46a6:	2300      	movs	r3, #0
   d46a8:	42b2      	cmp	r2, r6
   d46aa:	41bb      	sbcs	r3, r7
   d46ac:	da20      	bge.n	d46f0 <_Z22publishStateTransitionv+0x8c>
   d46ae:	f006 f879 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d46b2:	2300      	movs	r3, #0
   d46b4:	6063      	str	r3, [r4, #4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d46b6:	4b16      	ldr	r3, [pc, #88]	; (d4710 <_Z22publishStateTransitionv+0xac>)
   d46b8:	6020      	str	r0, [r4, #0]
   d46ba:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d46bc:	f88d 3000 	strb.w	r3, [sp]
   d46c0:	4914      	ldr	r1, [pc, #80]	; (d4714 <_Z22publishStateTransitionv+0xb0>)
   d46c2:	233c      	movs	r3, #60	; 0x3c
   d46c4:	aa04      	add	r2, sp, #16
   d46c6:	a802      	add	r0, sp, #8
   d46c8:	f006 ff2a 	bl	db520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d46cc:	9c03      	ldr	r4, [sp, #12]
   d46ce:	b17c      	cbz	r4, d46f0 <_Z22publishStateTransitionv+0x8c>
      if (--_M_use_count == 0)
   d46d0:	6863      	ldr	r3, [r4, #4]
   d46d2:	3b01      	subs	r3, #1
   d46d4:	6063      	str	r3, [r4, #4]
   d46d6:	b95b      	cbnz	r3, d46f0 <_Z22publishStateTransitionv+0x8c>
          _M_dispose();
   d46d8:	6823      	ldr	r3, [r4, #0]
   d46da:	4620      	mov	r0, r4
   d46dc:	689b      	ldr	r3, [r3, #8]
   d46de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46e0:	68a3      	ldr	r3, [r4, #8]
   d46e2:	3b01      	subs	r3, #1
   d46e4:	60a3      	str	r3, [r4, #8]
   d46e6:	b91b      	cbnz	r3, d46f0 <_Z22publishStateTransitionv+0x8c>
            _M_destroy();
   d46e8:	6823      	ldr	r3, [r4, #0]
   d46ea:	4620      	mov	r0, r4
   d46ec:	68db      	ldr	r3, [r3, #12]
   d46ee:	4798      	blx	r3
	Log.info(stateTransitionString);
   d46f0:	4809      	ldr	r0, [pc, #36]	; (d4718 <_Z22publishStateTransitionv+0xb4>)
   d46f2:	a904      	add	r1, sp, #16
   d46f4:	f7ff fce8 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
}
   d46f8:	b00f      	add	sp, #60	; 0x3c
   d46fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46fc:	2003e1b0 	.word	0x2003e1b0
   d4700:	2003e178 	.word	0x2003e178
   d4704:	2003db3f 	.word	0x2003db3f
   d4708:	000df257 	.word	0x000df257
   d470c:	2003e028 	.word	0x2003e028
   d4710:	2003e021 	.word	0x2003e021
   d4714:	000df265 	.word	0x000df265
   d4718:	2003e570 	.word	0x2003e570

000d471c <_GLOBAL__sub_I___appProductID>:
			return (uint16_t)secondsToReturn;
		}
		else return 0;
    }
	else return 0;
   d471c:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   d471e:	4b25      	ldr	r3, [pc, #148]	; (d47b4 <_GLOBAL__sub_I___appProductID+0x98>)
   d4720:	2501      	movs	r5, #1
   d4722:	701d      	strb	r5, [r3, #0]
   d4724:	4b24      	ldr	r3, [pc, #144]	; (d47b8 <_GLOBAL__sub_I___appProductID+0x9c>)
   d4726:	2208      	movs	r2, #8
   d4728:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d472a:	f009 fbf7 	bl	ddf1c <spark_protocol_instance>
   d472e:	2300      	movs	r3, #0
   d4730:	461a      	mov	r2, r3
   d4732:	210d      	movs	r1, #13
   d4734:	f009 fbfa 	bl	ddf2c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4738:	f009 fbf0 	bl	ddf1c <spark_protocol_instance>
   d473c:	2300      	movs	r3, #0
   d473e:	461a      	mov	r2, r3
   d4740:	4619      	mov	r1, r3
   d4742:	f009 fbfb 	bl	ddf3c <spark_protocol_set_product_firmware_version>
        : config_(config) {
   d4746:	4b1d      	ldr	r3, [pc, #116]	; (d47bc <_GLOBAL__sub_I___appProductID+0xa0>)
   d4748:	461a      	mov	r2, r3
   d474a:	1d19      	adds	r1, r3, #4
   d474c:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d4750:	2400      	movs	r4, #0
   d4752:	f8a3 4009 	strh.w	r4, [r3, #9]
   d4756:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d4758:	4a19      	ldr	r2, [pc, #100]	; (d47c0 <_GLOBAL__sub_I___appProductID+0xa4>)
              valid_(true) {
   d475a:	751d      	strb	r5, [r3, #20]
        config_.wakeup_sources = nullptr;
   d475c:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d4760:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4762:	721c      	strb	r4, [r3, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d4764:	f009 fcb6 	bl	de0d4 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d4768:	4d16      	ldr	r5, [pc, #88]	; (d47c4 <_GLOBAL__sub_I___appProductID+0xa8>)
   d476a:	4601      	mov	r1, r0
   d476c:	4623      	mov	r3, r4
   d476e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d4772:	4628      	mov	r0, r5
   d4774:	f003 fb2e 	bl	d7dd4 <_ZN6MB85RCC1ER7TwoWireji>
   d4778:	4b13      	ldr	r3, [pc, #76]	; (d47c8 <_GLOBAL__sub_I___appProductID+0xac>)
   d477a:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d477c:	f009 fcaa 	bl	de0d4 <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   d4780:	4d12      	ldr	r5, [pc, #72]	; (d47cc <_GLOBAL__sub_I___appProductID+0xb0>)
   d4782:	4601      	mov	r1, r0
   d4784:	2269      	movs	r2, #105	; 0x69
   d4786:	4812      	ldr	r0, [pc, #72]	; (d47d0 <_GLOBAL__sub_I___appProductID+0xb4>)
   d4788:	f001 f9be 	bl	d5b08 <_ZN6AB1805C1ER7TwoWireh>
   d478c:	4628      	mov	r0, r5
   d478e:	4911      	ldr	r1, [pc, #68]	; (d47d4 <_GLOBAL__sub_I___appProductID+0xb8>)
   d4790:	f008 ff09 	bl	dd5a6 <_ZN6StringC1EPKc>
   d4794:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   d4796:	4810      	ldr	r0, [pc, #64]	; (d47d8 <_GLOBAL__sub_I___appProductID+0xbc>)
    LocalTimeSchedule() {
   d4798:	612c      	str	r4, [r5, #16]
   d479a:	2200      	movs	r2, #0
   d479c:	e9c5 2306 	strd	r2, r3, [r5, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
   d47a0:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   d47a4:	2306      	movs	r3, #6
   d47a6:	f840 3b04 	str.w	r3, [r0], #4
   d47aa:	62ac      	str	r4, [r5, #40]	; 0x28
   d47ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d47b0:	f002 bb5e 	b.w	d6e70 <_ZN22LocalTimePosixTimezoneC1Ev>
   d47b4:	2003e021 	.word	0x2003e021
   d47b8:	2003e022 	.word	0x2003e022
   d47bc:	2003e060 	.word	0x2003e060
   d47c0:	00030010 	.word	0x00030010
   d47c4:	2003e078 	.word	0x2003e078
   d47c8:	000df468 	.word	0x000df468
   d47cc:	2003e180 	.word	0x2003e180
   d47d0:	2003e040 	.word	0x2003e040
   d47d4:	000e03d1 	.word	0x000e03d1
   d47d8:	2003e088 	.word	0x2003e088

000d47dc <setup>:
{
   d47dc:	b530      	push	{r4, r5, lr}
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d47de:	4c5f      	ldr	r4, [pc, #380]	; (d495c <setup+0x180>)
	sysStatus.structuresVersion = 111;
   d47e0:	4d5f      	ldr	r5, [pc, #380]	; (d4960 <setup+0x184>)
{
   d47e2:	b09f      	sub	sp, #124	; 0x7c
	delay(5000);	// Wait for serial 
   d47e4:	f241 3088 	movw	r0, #5000	; 0x1388
   d47e8:	f006 fbd6 	bl	daf98 <delay>
    initializePinModes();                           // Sets the pinModes
   d47ec:	f000 fb08 	bl	d4e00 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   d47f0:	f000 fb1e 	bl	d4e30 <_Z18initializePowerCfgv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   d47f4:	f001 f80e 	bl	d5814 <_Z18storageObjectStartv>
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   d47f8:	f000 fe56 	bl	d54a8 <_Z18particleInitializev>
   d47fc:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   d47fe:	4620      	mov	r0, r4
   d4800:	2101      	movs	r1, #1
   d4802:	8163      	strh	r3, [r4, #10]
   d4804:	f001 fd12 	bl	d622c <_ZN6AB18055setupEb>
        ab1805.resetConfig();                       // Reset the AB1805 configuration to default values
   d4808:	2100      	movs	r1, #0
   d480a:	4620      	mov	r0, r4
   d480c:	f001 faf0 	bl	d5df0 <_ZN6AB180511resetConfigEm>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   d4810:	217c      	movs	r1, #124	; 0x7c
   d4812:	4620      	mov	r0, r4
   d4814:	f001 fa68 	bl	d5ce8 <_ZN6AB18056setWDTEi>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   d4818:	f003 fd4a 	bl	d82b0 <_ZN17PublishQueuePosix8instanceEv>
   d481c:	f003 ff56 	bl	d86cc <_ZN17PublishQueuePosix5setupEv>
	sysStatus.structuresVersion = 111;
   d4820:	236f      	movs	r3, #111	; 0x6f
	initializeLoRA(1);							// Start the LoRA radio (true for Gateway and false for Node)
   d4822:	2001      	movs	r0, #1
	sysStatus.structuresVersion = 111;
   d4824:	712b      	strb	r3, [r5, #4]
	initializeLoRA(1);							// Start the LoRA radio (true for Gateway and false for Node)
   d4826:	f7ff fc67 	bl	d40f8 <_Z14initializeLoRAb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   d482a:	f002 fd8f 	bl	d734c <_ZN9LocalTime8instanceEv>
   d482e:	494d      	ldr	r1, [pc, #308]	; (d4964 <setup+0x188>)
   d4830:	4604      	mov	r4, r0
   d4832:	a808      	add	r0, sp, #32
   d4834:	f002 fbce 	bl	d6fd4 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d4838:	a909      	add	r1, sp, #36	; 0x24
   d483a:	f104 0008 	add.w	r0, r4, #8
   d483e:	f008 feee 	bl	dd61e <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d4842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4844:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   d4846:	a90f      	add	r1, sp, #60	; 0x3c
   d4848:	f104 0020 	add.w	r0, r4, #32
   d484c:	f008 fee7 	bl	dd61e <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d4850:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d4852:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   d4854:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d4856:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   d4858:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d485a:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   d485c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d485e:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   d4860:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d4862:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   d4864:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   d4868:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   d486c:	a808      	add	r0, sp, #32
   d486e:	f002 f83b 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d4872:	f009 f990 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d4876:	4c3c      	ldr	r4, [pc, #240]	; (d4968 <setup+0x18c>)
   d4878:	17c1      	asrs	r1, r0, #31
   d487a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   d487e:	4620      	mov	r0, r4
   d4880:	f002 fddc 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
  	publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d4884:	4939      	ldr	r1, [pc, #228]	; (d496c <setup+0x190>)
   d4886:	8bad      	ldrh	r5, [r5, #28]
   d4888:	a803      	add	r0, sp, #12
   d488a:	f002 f9c7 	bl	d6c1c <_ZN12LocalTimeHMSC1EPKc>
   d488e:	4938      	ldr	r1, [pc, #224]	; (d4970 <setup+0x194>)
   d4890:	a805      	add	r0, sp, #20
   d4892:	f002 f9c3 	bl	d6c1c <_ZN12LocalTimeHMSC1EPKc>
   d4896:	aa05      	add	r2, sp, #20
   d4898:	a903      	add	r1, sp, #12
   d489a:	a808      	add	r0, sp, #32
   d489c:	f7ff feba 	bl	d4614 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d48a0:	4629      	mov	r1, r5
   d48a2:	aa08      	add	r2, sp, #32
   d48a4:	4833      	ldr	r0, [pc, #204]	; (d4974 <setup+0x198>)
   d48a6:	f003 fa6e 	bl	d7d86 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d48aa:	a808      	add	r0, sp, #32
   d48ac:	f7ff fec6 	bl	d463c <_ZN14LocalTimeRangeD1Ev>
   d48b0:	a805      	add	r0, sp, #20
   d48b2:	f002 f802 	bl	d68ba <_ZN12LocalTimeHMSD1Ev>
   d48b6:	a803      	add	r0, sp, #12
   d48b8:	f001 ffff 	bl	d68ba <_ZN12LocalTimeHMSD1Ev>
  	Log.info("Startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   d48bc:	4b2e      	ldr	r3, [pc, #184]	; (d4978 <setup+0x19c>)
   d48be:	4621      	mov	r1, r4
   d48c0:	681a      	ldr	r2, [r3, #0]
   d48c2:	a808      	add	r0, sp, #32
   d48c4:	f002 fc9c 	bl	d7200 <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d48c8:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d48ca:	a903      	add	r1, sp, #12
   d48cc:	2003      	movs	r0, #3
   d48ce:	9d08      	ldr	r5, [sp, #32]
    const diag_source* src = nullptr;
   d48d0:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   d48d2:	f006 f9af 	bl	dac34 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d48d6:	2800      	cmp	r0, #0
   d48d8:	d13c      	bne.n	d4954 <setup+0x178>
        return ret;
    }
    return get(src, val);
   d48da:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   d48dc:	b10c      	cbz	r4, d48e2 <setup+0x106>
   d48de:	6923      	ldr	r3, [r4, #16]
   d48e0:	b923      	cbnz	r3, d48ec <setup+0x110>
   d48e2:	4a26      	ldr	r2, [pc, #152]	; (d497c <setup+0x1a0>)
   d48e4:	2100      	movs	r1, #0
   d48e6:	200a      	movs	r0, #10
   d48e8:	f006 f97c 	bl	dabe4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d48ec:	2300      	movs	r3, #0
   d48ee:	f8ad 3016 	strh.w	r3, [sp, #22]
   d48f2:	230c      	movs	r3, #12
   d48f4:	f8ad 3014 	strh.w	r3, [sp, #20]
   d48f8:	ab02      	add	r3, sp, #8
   d48fa:	9306      	str	r3, [sp, #24]
   d48fc:	2304      	movs	r3, #4
   d48fe:	9307      	str	r3, [sp, #28]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4900:	6923      	ldr	r3, [r4, #16]
   d4902:	aa05      	add	r2, sp, #20
   d4904:	2101      	movs	r1, #1
   d4906:	4620      	mov	r0, r4
   d4908:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d490a:	bb18      	cbnz	r0, d4954 <setup+0x178>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d490c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d4910:	ee07 3a90 	vmov	s15, r3
   d4914:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   d4918:	ee17 0a90 	vmov	r0, s15
   d491c:	f009 fd96 	bl	de44c <__aeabi_f2d>
   d4920:	462a      	mov	r2, r5
   d4922:	e9cd 0100 	strd	r0, r1, [sp]
   d4926:	4916      	ldr	r1, [pc, #88]	; (d4980 <setup+0x1a4>)
   d4928:	4816      	ldr	r0, [pc, #88]	; (d4984 <setup+0x1a8>)
   d492a:	f7ff fbcd 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d492e:	a808      	add	r0, sp, #32
   d4930:	f008 fdee 	bl	dd510 <_ZN6StringD1Ev>
  	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   d4934:	4814      	ldr	r0, [pc, #80]	; (d4988 <setup+0x1ac>)
   d4936:	4915      	ldr	r1, [pc, #84]	; (d498c <setup+0x1b0>)
   d4938:	8800      	ldrh	r0, [r0, #0]
   d493a:	2200      	movs	r2, #0
   d493c:	9200      	str	r2, [sp, #0]
   d493e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4942:	f007 f909 	bl	dbb58 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   d4946:	4b12      	ldr	r3, [pc, #72]	; (d4990 <setup+0x1b4>)
   d4948:	781a      	ldrb	r2, [r3, #0]
   d494a:	b90a      	cbnz	r2, d4950 <setup+0x174>
   d494c:	2204      	movs	r2, #4
   d494e:	701a      	strb	r2, [r3, #0]
}
   d4950:	b01f      	add	sp, #124	; 0x7c
   d4952:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d4954:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4958:	e7de      	b.n	d4918 <setup+0x13c>
   d495a:	bf00      	nop
   d495c:	2003e040 	.word	0x2003e040
   d4960:	2003e220 	.word	0x2003e220
   d4964:	000df276 	.word	0x000df276
   d4968:	2003e088 	.word	0x2003e088
   d496c:	000df29d 	.word	0x000df29d
   d4970:	000df2a6 	.word	0x000df2a6
   d4974:	2003e180 	.word	0x2003e180
   d4978:	2003dc48 	.word	0x2003dc48
   d497c:	000da795 	.word	0x000da795
   d4980:	000df2af 	.word	0x000df2af
   d4984:	2003e570 	.word	0x2003e570
   d4988:	000df4b2 	.word	0x000df4b2
   d498c:	000d4579 	.word	0x000d4579
   d4990:	2003e1b0 	.word	0x2003e1b0

000d4994 <_Z21secondsUntilNextEventv.part.0>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d4994:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4996:	b0c1      	sub	sp, #260	; 0x104
   d4998:	f009 f8fd 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d499c:	4e2a      	ldr	r6, [pc, #168]	; (d4a48 <_Z21secondsUntilNextEventv.part.0+0xb4>)
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d499e:	4f2b      	ldr	r7, [pc, #172]	; (d4a4c <_Z21secondsUntilNextEventv.part.0+0xb8>)
   d49a0:	17c1      	asrs	r1, r0, #31
   d49a2:	e9c6 0118 	strd	r0, r1, [r6, #96]	; 0x60
        localTimeConvert_NOW.withCurrentTime().convert();
   d49a6:	4630      	mov	r0, r6
   d49a8:	f002 fd48 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d49ac:	683a      	ldr	r2, [r7, #0]
   d49ae:	4631      	mov	r1, r6
   d49b0:	a804      	add	r0, sp, #16
   d49b2:	f002 fc25 	bl	d7200 <_ZN16LocalTimeConvert6formatEPKc>
   d49b6:	9a04      	ldr	r2, [sp, #16]
   d49b8:	4925      	ldr	r1, [pc, #148]	; (d4a50 <_Z21secondsUntilNextEventv.part.0+0xbc>)
   d49ba:	4826      	ldr	r0, [pc, #152]	; (d4a54 <_Z21secondsUntilNextEventv.part.0+0xc0>)
   d49bc:	f7ff fb84 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d49c0:	a804      	add	r0, sp, #16
   d49c2:	f008 fda5 	bl	dd510 <_ZN6StringD1Ev>
class LocalTimeConvert {
   d49c6:	2306      	movs	r3, #6
   d49c8:	a805      	add	r0, sp, #20
   d49ca:	9304      	str	r3, [sp, #16]
   d49cc:	f002 fa50 	bl	d6e70 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d49d0:	f009 f8e1 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d49d4:	17c1      	asrs	r1, r0, #31
   d49d6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
        localTimeConvert_NEXT.withCurrentTime().convert();
   d49da:	a804      	add	r0, sp, #16
   d49dc:	f002 fd2e 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
		publishSchedule.isScheduledTime();								// Clears this flag if set and enabled the next time
   d49e0:	481d      	ldr	r0, [pc, #116]	; (d4a58 <_Z21secondsUntilNextEventv.part.0+0xc4>)
   d49e2:	f003 f8b1 	bl	d7b48 <_ZN17LocalTimeSchedule15isScheduledTimeEv>
		if (publishSchedule.getNextScheduledTime(localTimeConvert_NEXT)) {
   d49e6:	481c      	ldr	r0, [pc, #112]	; (d4a58 <_Z21secondsUntilNextEventv.part.0+0xc4>)
   d49e8:	a904      	add	r1, sp, #16
   d49ea:	f003 f877 	bl	d7adc <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d49ee:	b348      	cbz	r0, d4a44 <_Z21secondsUntilNextEventv.part.0+0xb0>
			long unsigned secondsToReturn = constrain(localTimeConvert_NEXT.time - localTimeConvert_NOW.time, 0L, 86400L);	// Constrain to positive seconds less than or equal to a day.
   d49f0:	e9d6 3118 	ldrd	r3, r1, [r6, #96]	; 0x60
   d49f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d49f6:	1ad4      	subs	r4, r2, r3
   d49f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d49fa:	4a18      	ldr	r2, [pc, #96]	; (d4a5c <_Z21secondsUntilNextEventv.part.0+0xc8>)
   d49fc:	eb63 0501 	sbc.w	r5, r3, r1
   d4a00:	42a2      	cmp	r2, r4
   d4a02:	f04f 0300 	mov.w	r3, #0
   d4a06:	eb73 0105 	sbcs.w	r1, r3, r5
   d4a0a:	bfbc      	itt	lt
   d4a0c:	4614      	movlt	r4, r2
   d4a0e:	461d      	movlt	r5, r3
   d4a10:	2c00      	cmp	r4, #0
   d4a12:	f175 0300 	sbcs.w	r3, r5, #0
   d4a16:	bfb8      	it	lt
   d4a18:	2400      	movlt	r4, #0
        	Log.info("time of next event is: %s which is %lu seconds away", localTimeConvert_NEXT.format(TIME_FORMAT_DEFAULT).c_str(), secondsToReturn);
   d4a1a:	683a      	ldr	r2, [r7, #0]
   d4a1c:	a904      	add	r1, sp, #16
   d4a1e:	4668      	mov	r0, sp
   d4a20:	f002 fbee 	bl	d7200 <_ZN16LocalTimeConvert6formatEPKc>
   d4a24:	4623      	mov	r3, r4
   d4a26:	9a00      	ldr	r2, [sp, #0]
   d4a28:	490d      	ldr	r1, [pc, #52]	; (d4a60 <_Z21secondsUntilNextEventv.part.0+0xcc>)
   d4a2a:	480a      	ldr	r0, [pc, #40]	; (d4a54 <_Z21secondsUntilNextEventv.part.0+0xc0>)
   d4a2c:	f7ff fb4c 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4a30:	4668      	mov	r0, sp
   d4a32:	f008 fd6d 	bl	dd510 <_ZN6StringD1Ev>
			return (uint16_t)secondsToReturn;
   d4a36:	b2a4      	uxth	r4, r4
class LocalTimeConvert {
   d4a38:	a805      	add	r0, sp, #20
   d4a3a:	f001 ff55 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
   d4a3e:	4620      	mov	r0, r4
   d4a40:	b041      	add	sp, #260	; 0x104
   d4a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else return 0;
   d4a44:	4604      	mov	r4, r0
   d4a46:	e7f7      	b.n	d4a38 <_Z21secondsUntilNextEventv.part.0+0xa4>
   d4a48:	2003e088 	.word	0x2003e088
   d4a4c:	2003dc44 	.word	0x2003dc44
   d4a50:	000df2d9 	.word	0x000df2d9
   d4a54:	2003e570 	.word	0x2003e570
   d4a58:	2003e180 	.word	0x2003e180
   d4a5c:	00015180 	.word	0x00015180
   d4a60:	000df2e8 	.word	0x000df2e8

000d4a64 <_Z21secondsUntilNextEventv>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d4a64:	b508      	push	{r3, lr}
   if (Time.isValid()) {
   d4a66:	f009 f879 	bl	ddb5c <_ZN9TimeClass7isValidEv>
   d4a6a:	b118      	cbz	r0, d4a74 <_Z21secondsUntilNextEventv+0x10>
   d4a6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4a70:	f7ff bf90 	b.w	d4994 <_Z21secondsUntilNextEventv.part.0>
   d4a74:	bd08      	pop	{r3, pc}
	...

000d4a78 <loop>:
void loop() {
   d4a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   d4a7c:	4c9e      	ldr	r4, [pc, #632]	; (d4cf8 <loop+0x280>)
   d4a7e:	7823      	ldrb	r3, [r4, #0]
   d4a80:	3b02      	subs	r3, #2
void loop() {
   d4a82:	b0d5      	sub	sp, #340	; 0x154
   d4a84:	2b05      	cmp	r3, #5
   d4a86:	f200 8082 	bhi.w	d4b8e <loop+0x116>
   d4a8a:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4a8e:	0006      	.short	0x0006
   d4a90:	008f0018 	.word	0x008f0018
   d4a94:	018f016d 	.word	0x018f016d
   d4a98:	00e4      	.short	0x00e4
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4a9a:	4b98      	ldr	r3, [pc, #608]	; (d4cfc <loop+0x284>)
   d4a9c:	781b      	ldrb	r3, [r3, #0]
   d4a9e:	2b02      	cmp	r3, #2
   d4aa0:	d001      	beq.n	d4aa6 <loop+0x2e>
   d4aa2:	f7ff fddf 	bl	d4664 <_Z22publishStateTransitionv>
			if (publishSchedule.isScheduledTime()) state = LoRA_STATE;		   // See Time section in setup for schedule
   d4aa6:	4896      	ldr	r0, [pc, #600]	; (d4d00 <loop+0x288>)
   d4aa8:	f003 f84e 	bl	d7b48 <_ZN17LocalTimeSchedule15isScheduledTimeEv>
   d4aac:	b108      	cbz	r0, d4ab2 <loop+0x3a>
   d4aae:	2304      	movs	r3, #4
   d4ab0:	7023      	strb	r3, [r4, #0]
			if (userSwitchDectected) state = CONNECTING_STATE;
   d4ab2:	4b94      	ldr	r3, [pc, #592]	; (d4d04 <loop+0x28c>)
   d4ab4:	781b      	ldrb	r3, [r3, #0]
   d4ab6:	2b00      	cmp	r3, #0
   d4ab8:	d069      	beq.n	d4b8e <loop+0x116>
			if (!Particle.connected()) state = CONNECTING_STATE;                     // Now we will turn on the cellular radio and connect to Particle
   d4aba:	2305      	movs	r3, #5
   d4abc:	e0c9      	b.n	d4c52 <loop+0x1da>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4abe:	4b8f      	ldr	r3, [pc, #572]	; (d4cfc <loop+0x284>)
   d4ac0:	781b      	ldrb	r3, [r3, #0]
   d4ac2:	2b03      	cmp	r3, #3
   d4ac4:	d001      	beq.n	d4aca <loop+0x52>
   d4ac6:	f7ff fdcd 	bl	d4664 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d4aca:	2100      	movs	r1, #0
   d4acc:	488e      	ldr	r0, [pc, #568]	; (d4d08 <loop+0x290>)
   d4ace:	f001 f90b 	bl	d5ce8 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent()-10;  		   		   // Subtracting ten seconds to reduce prospect of round tripping to IDLE
   d4ad2:	f7ff ffc7 	bl	d4a64 <_Z21secondsUntilNextEventv>
   d4ad6:	f1a0 070a 	sub.w	r7, r0, #10
			Log.info("Sleep for %i seconds", wakeInSeconds);
   d4ada:	463a      	mov	r2, r7
   d4adc:	498b      	ldr	r1, [pc, #556]	; (d4d0c <loop+0x294>)
   d4ade:	488c      	ldr	r0, [pc, #560]	; (d4d10 <loop+0x298>)
   d4ae0:	f7ff faf2 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   d4ae4:	4b8b      	ldr	r3, [pc, #556]	; (d4d14 <loop+0x29c>)
   d4ae6:	7d1a      	ldrb	r2, [r3, #20]
   d4ae8:	b10a      	cbz	r2, d4aee <loop+0x76>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4aea:	2202      	movs	r2, #2
   d4aec:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   d4aee:	4b8a      	ldr	r3, [pc, #552]	; (d4d18 <loop+0x2a0>)
   d4af0:	4888      	ldr	r0, [pc, #544]	; (d4d14 <loop+0x29c>)
   d4af2:	f8b3 8000 	ldrh.w	r8, [r3]
   d4af6:	2200      	movs	r2, #0
   d4af8:	4641      	mov	r1, r8
   d4afa:	f7ff fd57 	bl	d45ac <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4afe:	7d03      	ldrb	r3, [r0, #20]
   d4b00:	4606      	mov	r6, r0
   d4b02:	b1fb      	cbz	r3, d4b44 <loop+0xcc>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4b04:	6833      	ldr	r3, [r6, #0]
				.duration(wakeInSeconds * 1000L);
   d4b06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4b0a:	68db      	ldr	r3, [r3, #12]
   d4b0c:	4347      	muls	r7, r0
        if (!start) {
   d4b0e:	b12b      	cbz	r3, d4b1c <loop+0xa4>
            if (start->type == type) {
   d4b10:	889a      	ldrh	r2, [r3, #4]
   d4b12:	2a04      	cmp	r2, #4
   d4b14:	f000 8166 	beq.w	d4de4 <loop+0x36c>
            start = start->next;
   d4b18:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4b1a:	e7f8      	b.n	d4b0e <loop+0x96>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4b1c:	497f      	ldr	r1, [pc, #508]	; (d4d1c <loop+0x2a4>)
   d4b1e:	2010      	movs	r0, #16
   d4b20:	f009 fb22 	bl	de168 <_ZnwjRKSt9nothrow_t>
   d4b24:	4605      	mov	r5, r0
   d4b26:	2800      	cmp	r0, #0
   d4b28:	f000 815a 	beq.w	d4de0 <loop+0x368>
   d4b2c:	2210      	movs	r2, #16
   d4b2e:	2100      	movs	r1, #0
   d4b30:	f009 ffcc 	bl	deacc <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4b34:	4b7a      	ldr	r3, [pc, #488]	; (d4d20 <loop+0x2a8>)
   d4b36:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4b38:	2304      	movs	r3, #4
   d4b3a:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4b3c:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d4b3e:	e9c5 3702 	strd	r3, r7, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4b42:	6135      	str	r5, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   d4b44:	4973      	ldr	r1, [pc, #460]	; (d4d14 <loop+0x29c>)
   d4b46:	a811      	add	r0, sp, #68	; 0x44
   d4b48:	f008 fe8c 	bl	dd864 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4b4c:	486e      	ldr	r0, [pc, #440]	; (d4d08 <loop+0x290>)
   d4b4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4b52:	f001 f8c9 	bl	d5ce8 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4b56:	9b11      	ldr	r3, [sp, #68]	; 0x44
        if (wakeupSource_) {
   d4b58:	b32b      	cbz	r3, d4ba6 <loop+0x12e>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4b5a:	889a      	ldrh	r2, [r3, #4]
   d4b5c:	2a01      	cmp	r2, #1
   d4b5e:	d122      	bne.n	d4ba6 <loop+0x12e>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d4b60:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   d4b62:	4598      	cmp	r8, r3
   d4b64:	d10d      	bne.n	d4b82 <loop+0x10a>
				setLowPowerMode("0");                                          // We are waking the device for a reason
   d4b66:	496f      	ldr	r1, [pc, #444]	; (d4d24 <loop+0x2ac>)
   d4b68:	a814      	add	r0, sp, #80	; 0x50
   d4b6a:	f008 fd1c 	bl	dd5a6 <_ZN6StringC1EPKc>
   d4b6e:	a814      	add	r0, sp, #80	; 0x50
   d4b70:	f000 fa7a 	bl	d5068 <_Z15setLowPowerMode6String>
   d4b74:	a814      	add	r0, sp, #80	; 0x50
   d4b76:	f008 fccb 	bl	dd510 <_ZN6StringD1Ev>
				Log.info("Woke with user button - normal operations");
   d4b7a:	496b      	ldr	r1, [pc, #428]	; (d4d28 <loop+0x2b0>)
   d4b7c:	4864      	ldr	r0, [pc, #400]	; (d4d10 <loop+0x298>)
   d4b7e:	f7ff faa3 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        if (wakeupSource_) {
   d4b82:	9811      	ldr	r0, [sp, #68]	; 0x44
			state = IDLE_STATE;
   d4b84:	2302      	movs	r3, #2
   d4b86:	7023      	strb	r3, [r4, #0]
   d4b88:	b108      	cbz	r0, d4b8e <loop+0x116>
            free(wakeupSource_);
   d4b8a:	f006 f995 	bl	daeb8 <free>
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   d4b8e:	485e      	ldr	r0, [pc, #376]	; (d4d08 <loop+0x290>)
   d4b90:	f001 fc2c 	bl	d63ec <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   d4b94:	f003 fb8c 	bl	d82b0 <_ZN17PublishQueuePosix8instanceEv>
   d4b98:	f003 fa7c 	bl	d8094 <_ZN17PublishQueuePosix4loopEv>
    storageObjectLoop();                            // Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   d4b9c:	f000 fdc2 	bl	d5724 <_Z17storageObjectLoopv>
}
   d4ba0:	b055      	add	sp, #340	; 0x154
   d4ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return std::numeric_limits<pin_t>::max();
   d4ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4baa:	e7da      	b.n	d4b62 <loop+0xea>
			if (state != oldState) {
   d4bac:	4b53      	ldr	r3, [pc, #332]	; (d4cfc <loop+0x284>)
   d4bae:	4d5f      	ldr	r5, [pc, #380]	; (d4d2c <loop+0x2b4>)
   d4bb0:	781b      	ldrb	r3, [r3, #0]
   d4bb2:	2b04      	cmp	r3, #4
   d4bb4:	d00b      	beq.n	d4bce <loop+0x156>
				publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4bb6:	f7ff fd55 	bl	d4664 <_Z22publishStateTransitionv>
   d4bba:	f005 fdf3 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
				successfulReceipt = false;
   d4bbe:	4b5c      	ldr	r3, [pc, #368]	; (d4d30 <loop+0x2b8>)
				startLoRAWindow = millis();               // Mark when we enter this state - for timeouts
   d4bc0:	6028      	str	r0, [r5, #0]
				successfulReceipt = false;
   d4bc2:	2200      	movs	r2, #0
				Log.info("Gateway is listening for LoRA messages");
   d4bc4:	495b      	ldr	r1, [pc, #364]	; (d4d34 <loop+0x2bc>)
   d4bc6:	4852      	ldr	r0, [pc, #328]	; (d4d10 <loop+0x298>)
				successfulReceipt = false;
   d4bc8:	701a      	strb	r2, [r3, #0]
				Log.info("Gateway is listening for LoRA messages");
   d4bca:	f7ff fa7d 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
			if (listenForLoRAMessageGateway()) {
   d4bce:	f7ff fb27 	bl	d4220 <_Z27listenForLoRAMessageGatewayv>
   d4bd2:	2800      	cmp	r0, #0
   d4bd4:	d030      	beq.n	d4c38 <loop+0x1c0>
				if (frequencyUpdated) {              // If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   d4bd6:	4b58      	ldr	r3, [pc, #352]	; (d4d38 <loop+0x2c0>)
   d4bd8:	781a      	ldrb	r2, [r3, #0]
   d4bda:	b34a      	cbz	r2, d4c30 <loop+0x1b8>
					Log.info("We are updating the publish frequency to %i minutes", sysStatus.frequencyMinutes);
   d4bdc:	4e57      	ldr	r6, [pc, #348]	; (d4d3c <loop+0x2c4>)
   d4bde:	4958      	ldr	r1, [pc, #352]	; (d4d40 <loop+0x2c8>)
   d4be0:	484b      	ldr	r0, [pc, #300]	; (d4d10 <loop+0x298>)
					frequencyUpdated = false;
   d4be2:	2200      	movs	r2, #0
   d4be4:	701a      	strb	r2, [r3, #0]
					Log.info("We are updating the publish frequency to %i minutes", sysStatus.frequencyMinutes);
   d4be6:	8bb2      	ldrh	r2, [r6, #28]
   d4be8:	f7ff fa6e 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
					publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("21:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d4bec:	4955      	ldr	r1, [pc, #340]	; (d4d44 <loop+0x2cc>)
   d4bee:	8bb6      	ldrh	r6, [r6, #28]
   d4bf0:	a80f      	add	r0, sp, #60	; 0x3c
   d4bf2:	f002 f813 	bl	d6c1c <_ZN12LocalTimeHMSC1EPKc>
   d4bf6:	4954      	ldr	r1, [pc, #336]	; (d4d48 <loop+0x2d0>)
   d4bf8:	a811      	add	r0, sp, #68	; 0x44
   d4bfa:	f002 f80f 	bl	d6c1c <_ZN12LocalTimeHMSC1EPKc>
   d4bfe:	aa11      	add	r2, sp, #68	; 0x44
   d4c00:	a90f      	add	r1, sp, #60	; 0x3c
   d4c02:	a814      	add	r0, sp, #80	; 0x50
   d4c04:	f7ff fd06 	bl	d4614 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d4c08:	aa14      	add	r2, sp, #80	; 0x50
   d4c0a:	4631      	mov	r1, r6
   d4c0c:	483c      	ldr	r0, [pc, #240]	; (d4d00 <loop+0x288>)
   d4c0e:	f003 f8ba 	bl	d7d86 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d4c12:	a814      	add	r0, sp, #80	; 0x50
   d4c14:	f7ff fd12 	bl	d463c <_ZN14LocalTimeRangeD1Ev>
   d4c18:	a811      	add	r0, sp, #68	; 0x44
   d4c1a:	f001 fe4e 	bl	d68ba <_ZN12LocalTimeHMSD1Ev>
   d4c1e:	a80f      	add	r0, sp, #60	; 0x3c
   d4c20:	f001 fe4b 	bl	d68ba <_ZN12LocalTimeHMSD1Ev>
					publishSchedule.isScheduledTime(); // Clears this flag
   d4c24:	4836      	ldr	r0, [pc, #216]	; (d4d00 <loop+0x288>)
   d4c26:	f002 ff8f 	bl	d7b48 <_ZN17LocalTimeSchedule15isScheduledTimeEv>
					successfulReceipt = true;
   d4c2a:	4b41      	ldr	r3, [pc, #260]	; (d4d30 <loop+0x2b8>)
   d4c2c:	2201      	movs	r2, #1
   d4c2e:	701a      	strb	r2, [r3, #0]
				respondForLoRAMessageGateway(secondsUntilNextEvent());					// Here we send our response based on the type of message received.
   d4c30:	f7ff ff18 	bl	d4a64 <_Z21secondsUntilNextEventv>
   d4c34:	f7ff fc5e 	bl	d44f4 <_Z28respondForLoRAMessageGatewayi>
   d4c38:	f005 fdb4 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 300000L) {
   d4c3c:	682b      	ldr	r3, [r5, #0]
   d4c3e:	1ac0      	subs	r0, r0, r3
   d4c40:	4b42      	ldr	r3, [pc, #264]	; (d4d4c <loop+0x2d4>)
   d4c42:	4298      	cmp	r0, r3
   d4c44:	d9a3      	bls.n	d4b8e <loop+0x116>
				if (successfulReceipt) state = REPORTING_STATE;	// This is a fail safe to make sure an off-line client won't prevent gatewat from checking in - and setting its clock
   d4c46:	4b3a      	ldr	r3, [pc, #232]	; (d4d30 <loop+0x2b8>)
   d4c48:	781b      	ldrb	r3, [r3, #0]
   d4c4a:	2b00      	cmp	r3, #0
   d4c4c:	f43f af35 	beq.w	d4aba <loop+0x42>
   d4c50:	2307      	movs	r3, #7
				if (sysStatus.lowPowerMode) state = SLEEPING_STATE;
   d4c52:	7023      	strb	r3, [r4, #0]
   d4c54:	e79b      	b.n	d4b8e <loop+0x116>
			if (state != oldState) publishStateTransition();
   d4c56:	4b29      	ldr	r3, [pc, #164]	; (d4cfc <loop+0x284>)
   d4c58:	781b      	ldrb	r3, [r3, #0]
   d4c5a:	2b07      	cmp	r3, #7
   d4c5c:	d001      	beq.n	d4c62 <loop+0x1ea>
   d4c5e:	f7ff fd01 	bl	d4664 <_Z22publishStateTransitionv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"alerts\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",sysStatus.nodeNumber, current.hourly, current.daily, current.stateOfCharge, batteryContext[current.batteryState], current.internalTempC, sysStatus.resetCount, sysStatus.lastAlertCode, current.rssi, current.messageNumber, Time.now());
   d4c62:	493b      	ldr	r1, [pc, #236]	; (d4d50 <loop+0x2d8>)
   d4c64:	4d35      	ldr	r5, [pc, #212]	; (d4d3c <loop+0x2c4>)
   d4c66:	7a08      	ldrb	r0, [r1, #8]
   d4c68:	4a3a      	ldr	r2, [pc, #232]	; (d4d54 <loop+0x2dc>)
   d4c6a:	886b      	ldrh	r3, [r5, #2]
   d4c6c:	8bce      	ldrh	r6, [r1, #30]
   d4c6e:	f8b1 801c 	ldrh.w	r8, [r1, #28]
   d4c72:	684f      	ldr	r7, [r1, #4]
   d4c74:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   d4c78:	f891 9000 	ldrb.w	r9, [r1]
   d4c7c:	f8b1 a018 	ldrh.w	sl, [r1, #24]
   d4c80:	930d      	str	r3, [sp, #52]	; 0x34
   d4c82:	7e89      	ldrb	r1, [r1, #26]
   d4c84:	68eb      	ldr	r3, [r5, #12]
   d4c86:	f895 b01e 	ldrb.w	fp, [r5, #30]
   d4c8a:	920c      	str	r2, [sp, #48]	; 0x30
   d4c8c:	930a      	str	r3, [sp, #40]	; 0x28
   d4c8e:	910b      	str	r1, [sp, #44]	; 0x2c
   d4c90:	f008 ff81 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d4c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d4c9a:	9009      	str	r0, [sp, #36]	; 0x24
   d4c9c:	e9cd a107 	strd	sl, r1, [sp, #28]
   d4ca0:	e9cd 9304 	strd	r9, r3, [sp, #16]
   d4ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4caa:	f8cd b018 	str.w	fp, [sp, #24]
   d4cae:	e9cd 7202 	strd	r7, r2, [sp, #8]
   d4cb2:	e9cd 8600 	strd	r8, r6, [sp]
   d4cb6:	4a28      	ldr	r2, [pc, #160]	; (d4d58 <loop+0x2e0>)
   d4cb8:	a814      	add	r0, sp, #80	; 0x50
   d4cba:	f006 f91d 	bl	daef8 <snprintf>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   d4cbe:	f003 faf7 	bl	d82b0 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4cc2:	4b26      	ldr	r3, [pc, #152]	; (d4d5c <loop+0x2e4>)
   d4cc4:	4a26      	ldr	r2, [pc, #152]	; (d4d60 <loop+0x2e8>)
   d4cc6:	781b      	ldrb	r3, [r3, #0]
   d4cc8:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4cca:	2100      	movs	r1, #0
   d4ccc:	4313      	orrs	r3, r2
   d4cce:	6802      	ldr	r2, [r0, #0]
   d4cd0:	f88d 1004 	strb.w	r1, [sp, #4]
   d4cd4:	f88d 3000 	strb.w	r3, [sp]
   d4cd8:	6816      	ldr	r6, [r2, #0]
   d4cda:	4922      	ldr	r1, [pc, #136]	; (d4d64 <loop+0x2ec>)
   d4cdc:	233c      	movs	r3, #60	; 0x3c
   d4cde:	aa14      	add	r2, sp, #80	; 0x50
   d4ce0:	47b0      	blx	r6
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ce2:	f006 f841 	bl	dad68 <spark_cloud_flag_connected>
			if (!Particle.connected()) state = CONNECTING_STATE;                     // Now we will turn on the cellular radio and connect to Particle
   d4ce6:	2800      	cmp	r0, #0
   d4ce8:	f43f aee7 	beq.w	d4aba <loop+0x42>
				if(Particle.connected() && !sysStatus.lowPowerMode) state = IDLE_STATE;	// We are connected and not low power - stay connected
   d4cec:	7a2b      	ldrb	r3, [r5, #8]
   d4cee:	2b00      	cmp	r3, #0
   d4cf0:	d151      	bne.n	d4d96 <loop+0x31e>
   d4cf2:	2302      	movs	r3, #2
   d4cf4:	e7ad      	b.n	d4c52 <loop+0x1da>
   d4cf6:	bf00      	nop
   d4cf8:	2003e1b0 	.word	0x2003e1b0
   d4cfc:	2003e178 	.word	0x2003e178
   d4d00:	2003e180 	.word	0x2003e180
   d4d04:	2003e1b1 	.word	0x2003e1b1
   d4d08:	2003e040 	.word	0x2003e040
   d4d0c:	000df31c 	.word	0x000df31c
   d4d10:	2003e570 	.word	0x2003e570
   d4d14:	2003e060 	.word	0x2003e060
   d4d18:	000df4b2 	.word	0x000df4b2
   d4d1c:	000e0550 	.word	0x000e0550
   d4d20:	00030010 	.word	0x00030010
   d4d24:	000dfb7c 	.word	0x000dfb7c
   d4d28:	000df331 	.word	0x000df331
   d4d2c:	2003e030 	.word	0x2003e030
   d4d30:	2003e038 	.word	0x2003e038
   d4d34:	000df35b 	.word	0x000df35b
   d4d38:	2003e1c1 	.word	0x2003e1c1
   d4d3c:	2003e220 	.word	0x2003e220
   d4d40:	000df382 	.word	0x000df382
   d4d44:	000df29d 	.word	0x000df29d
   d4d48:	000df3b6 	.word	0x000df3b6
   d4d4c:	000493e0 	.word	0x000493e0
   d4d50:	2003e200 	.word	0x2003e200
   d4d54:	2003dbd0 	.word	0x2003dbd0
   d4d58:	000df3bf 	.word	0x000df3bf
   d4d5c:	2003e022 	.word	0x2003e022
   d4d60:	2003e021 	.word	0x2003e021
   d4d64:	000df44a 	.word	0x000df44a
			if (state != oldState) {
   d4d68:	4b1f      	ldr	r3, [pc, #124]	; (d4de8 <loop+0x370>)
   d4d6a:	781b      	ldrb	r3, [r3, #0]
   d4d6c:	2b05      	cmp	r3, #5
   d4d6e:	d007      	beq.n	d4d80 <loop+0x308>
				publishStateTransition();  
   d4d70:	f7ff fc78 	bl	d4664 <_Z22publishStateTransitionv>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4d74:	f005 fff0 	bl	dad58 <spark_cloud_flag_connect>
   d4d78:	f005 fd14 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   d4d7c:	4b1b      	ldr	r3, [pc, #108]	; (d4dec <loop+0x374>)
   d4d7e:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d80:	f005 fff2 	bl	dad68 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   d4d84:	b148      	cbz	r0, d4d9a <loop+0x322>
				sysStatus.lastConnection = Time.now();
   d4d86:	f008 ff06 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d4d8a:	4d19      	ldr	r5, [pc, #100]	; (d4df0 <loop+0x378>)
   d4d8c:	6168      	str	r0, [r5, #20]
   d4d8e:	f005 ffeb 	bl	dad68 <spark_cloud_flag_connected>
				if(Particle.connected() && !sysStatus.lowPowerMode) state = IDLE_STATE;	// We are connected and not low power - stay connected
   d4d92:	2800      	cmp	r0, #0
   d4d94:	d1aa      	bne.n	d4cec <loop+0x274>
				else state = DISCONNECTING_STATE;										// Typically, we will disconnect and sleep to save power
   d4d96:	2306      	movs	r3, #6
   d4d98:	e75b      	b.n	d4c52 <loop+0x1da>
   d4d9a:	f005 fd03 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   d4d9e:	4b13      	ldr	r3, [pc, #76]	; (d4dec <loop+0x374>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	1ac0      	subs	r0, r0, r3
   d4da4:	4b13      	ldr	r3, [pc, #76]	; (d4df4 <loop+0x37c>)
   d4da6:	4298      	cmp	r0, r3
   d4da8:	d8ed      	bhi.n	d4d86 <loop+0x30e>
   d4daa:	e6f0      	b.n	d4b8e <loop+0x116>
			if (state != oldState) {
   d4dac:	4b0e      	ldr	r3, [pc, #56]	; (d4de8 <loop+0x370>)
   d4dae:	4d12      	ldr	r5, [pc, #72]	; (d4df8 <loop+0x380>)
   d4db0:	781b      	ldrb	r3, [r3, #0]
   d4db2:	2b06      	cmp	r3, #6
   d4db4:	d004      	beq.n	d4dc0 <loop+0x348>
				publishStateTransition(); 
   d4db6:	f7ff fc55 	bl	d4664 <_Z22publishStateTransitionv>
   d4dba:	f005 fcf3 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   d4dbe:	6028      	str	r0, [r5, #0]
   d4dc0:	f005 fcf0 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stayConnectedWindow > 90000) {							// Stay on-line for 90 seconds
   d4dc4:	682b      	ldr	r3, [r5, #0]
   d4dc6:	1ac0      	subs	r0, r0, r3
   d4dc8:	4b0c      	ldr	r3, [pc, #48]	; (d4dfc <loop+0x384>)
   d4dca:	4298      	cmp	r0, r3
   d4dcc:	f67f aedf 	bls.w	d4b8e <loop+0x116>
				disconnectFromParticle();
   d4dd0:	f000 fac4 	bl	d535c <_Z22disconnectFromParticlev>
				if (sysStatus.lowPowerMode) state = SLEEPING_STATE;
   d4dd4:	4b06      	ldr	r3, [pc, #24]	; (d4df0 <loop+0x378>)
   d4dd6:	7a1b      	ldrb	r3, [r3, #8]
   d4dd8:	2b00      	cmp	r3, #0
   d4dda:	d08a      	beq.n	d4cf2 <loop+0x27a>
   d4ddc:	2303      	movs	r3, #3
   d4dde:	e738      	b.n	d4c52 <loop+0x1da>
                valid_ = false;
   d4de0:	7530      	strb	r0, [r6, #20]
                return *this;
   d4de2:	e6af      	b.n	d4b44 <loop+0xcc>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4de4:	60df      	str	r7, [r3, #12]
                return *this;
   d4de6:	e6ad      	b.n	d4b44 <loop+0xcc>
   d4de8:	2003e178 	.word	0x2003e178
   d4dec:	2003e034 	.word	0x2003e034
   d4df0:	2003e220 	.word	0x2003e220
   d4df4:	000493e0 	.word	0x000493e0
   d4df8:	2003e03c 	.word	0x2003e03c
   d4dfc:	00015f90 	.word	0x00015f90

000d4e00 <_Z18initializePinModesv>:
const pin_t TMP36_SENSE_PIN   = A4;
const pin_t BUTTON_PIN        = D4;
const pin_t BLUE_LED          = D7;
const pin_t WAKEUP_PIN        = D8;

bool initializePinModes() {
   d4e00:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   d4e02:	4909      	ldr	r1, [pc, #36]	; (d4e28 <_Z18initializePinModesv+0x28>)
   d4e04:	4809      	ldr	r0, [pc, #36]	; (d4e2c <_Z18initializePinModesv+0x2c>)
   d4e06:	f7ff f95f 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   d4e0a:	2102      	movs	r1, #2
   d4e0c:	2004      	movs	r0, #4
   d4e0e:	f009 f8db 	bl	ddfc8 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   d4e12:	2100      	movs	r1, #0
   d4e14:	2008      	movs	r0, #8
   d4e16:	f009 f8d7 	bl	ddfc8 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   d4e1a:	2101      	movs	r1, #1
   d4e1c:	2007      	movs	r0, #7
   d4e1e:	f009 f8d3 	bl	ddfc8 <pinMode>
    return true;
}
   d4e22:	2001      	movs	r0, #1
   d4e24:	bd08      	pop	{r3, pc}
   d4e26:	bf00      	nop
   d4e28:	000df47c 	.word	0x000df47c
   d4e2c:	2003e570 	.word	0x2003e570

000d4e30 <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   d4e30:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   d4e32:	4918      	ldr	r1, [pc, #96]	; (d4e94 <_Z18initializePowerCfgv+0x64>)
   d4e34:	4818      	ldr	r0, [pc, #96]	; (d4e98 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   d4e36:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4e38:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   d4e3a:	f7ff f945 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4e3e:	4622      	mov	r2, r4
   d4e40:	2100      	movs	r1, #0
   d4e42:	4668      	mov	r0, sp
   d4e44:	f009 fe42 	bl	deacc <memset>
   d4e48:	4622      	mov	r2, r4
   d4e4a:	2100      	movs	r1, #0
   d4e4c:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4e50:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d4e54:	f009 fe3a 	bl	deacc <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   d4e58:	2100      	movs	r1, #0
   d4e5a:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4e5e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4e62:	f005 ff4d 	bl	dad00 <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4e66:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4e6a:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4e6e:	4b0b      	ldr	r3, [pc, #44]	; (d4e9c <_Z18initializePowerCfgv+0x6c>)
   d4e70:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4e72:	f241 0370 	movw	r3, #4208	; 0x1070
   d4e76:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4e7a:	9b00      	ldr	r3, [sp, #0]
   d4e7c:	2100      	movs	r1, #0
   d4e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4e82:	4668      	mov	r0, sp
   d4e84:	9300      	str	r3, [sp, #0]
   d4e86:	f005 ff3b 	bl	dad00 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   d4e8a:	3800      	subs	r0, #0
   d4e8c:	bf18      	it	ne
   d4e8e:	2001      	movne	r0, #1
   d4e90:	b010      	add	sp, #64	; 0x40
   d4e92:	bd10      	pop	{r4, pc}
   d4e94:	000df495 	.word	0x000df495
   d4e98:	2003e570 	.word	0x2003e570
   d4e9c:	03840384 	.word	0x03840384

000d4ea0 <_ZN5spark10LogHandler5writeEPKcj>:
}
   d4ea0:	4770      	bx	lr

000d4ea2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   d4ea2:	6a00      	ldr	r0, [r0, #32]
   d4ea4:	6803      	ldr	r3, [r0, #0]
   d4ea6:	68db      	ldr	r3, [r3, #12]
   d4ea8:	4718      	bx	r3
	...

000d4eac <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   d4eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   d4eae:	4b07      	ldr	r3, [pc, #28]	; (d4ecc <_Z15reportFrequencyv+0x20>)
   d4eb0:	4a07      	ldr	r2, [pc, #28]	; (d4ed0 <_Z15reportFrequencyv+0x24>)
   d4eb2:	8b9b      	ldrh	r3, [r3, #28]
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   d4eb4:	4604      	mov	r4, r0
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   d4eb6:	2110      	movs	r1, #16
   d4eb8:	4668      	mov	r0, sp
   d4eba:	f006 f81d 	bl	daef8 <snprintf>
    return reportStr;
   d4ebe:	4669      	mov	r1, sp
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	f008 fb70 	bl	dd5a6 <_ZN6StringC1EPKc>
}
   d4ec6:	4620      	mov	r0, r4
   d4ec8:	b004      	add	sp, #16
   d4eca:	bd10      	pop	{r4, pc}
   d4ecc:	2003e220 	.word	0x2003e220
   d4ed0:	000df4ba 	.word	0x000df4ba

000d4ed4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d4ed4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4ed6:	2000      	movs	r0, #0
   d4ed8:	f005 ff5e 	bl	dad98 <spark_sync_time_pending>
   d4edc:	b128      	cbz	r0, d4eea <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ede:	f005 ff43 	bl	dad68 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4ee2:	f080 0001 	eor.w	r0, r0, #1
   d4ee6:	b2c0      	uxtb	r0, r0
    }
   d4ee8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4eea:	2001      	movs	r0, #1
   d4eec:	e7fc      	b.n	d4ee8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d4ef0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4ef0:	b530      	push	{r4, r5, lr}
   d4ef2:	b085      	sub	sp, #20
   d4ef4:	4603      	mov	r3, r0
   d4ef6:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4ef8:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4efa:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4efc:	4798      	blx	r3
        size = str.length();
   d4efe:	9802      	ldr	r0, [sp, #8]
   d4f00:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d4f02:	f005 ffd1 	bl	daea8 <malloc>
   d4f06:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4f08:	b150      	cbz	r0, d4f20 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d4f0a:	6822      	ldr	r2, [r4, #0]
   d4f0c:	9900      	ldr	r1, [sp, #0]
   d4f0e:	f009 fdb5 	bl	dea7c <memcpy>
        return 0;
   d4f12:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4f14:	4668      	mov	r0, sp
   d4f16:	f008 fafb 	bl	dd510 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4f1a:	4620      	mov	r0, r4
   d4f1c:	b005      	add	sp, #20
   d4f1e:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d4f20:	4c00      	ldr	r4, [pc, #0]	; (d4f24 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d4f22:	e7f7      	b.n	d4f14 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4f24:	fffffefc 	.word	0xfffffefc

000d4f28 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4f28:	4b0a      	ldr	r3, [pc, #40]	; (d4f54 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4f2a:	b510      	push	{r4, lr}
   d4f2c:	4604      	mov	r4, r0
   d4f2e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4f30:	f007 f9ee 	bl	dc310 <_ZN5spark10LogManager8instanceEv>
   d4f34:	4621      	mov	r1, r4
   d4f36:	f007 fbb0 	bl	dc69a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4f3a:	f008 ff2d 	bl	ddd98 <_Z16_fetch_usbserialv>
   d4f3e:	f008 ff1f 	bl	ddd80 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4f42:	4620      	mov	r0, r4
   d4f44:	4b04      	ldr	r3, [pc, #16]	; (d4f58 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4f46:	f840 3b04 	str.w	r3, [r0], #4
   d4f4a:	f007 fa93 	bl	dc474 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4f4e:	4620      	mov	r0, r4
   d4f50:	bd10      	pop	{r4, pc}
   d4f52:	bf00      	nop
   d4f54:	000df780 	.word	0x000df780
   d4f58:	000df768 	.word	0x000df768

000d4f5c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4f5c:	b510      	push	{r4, lr}
   d4f5e:	4604      	mov	r4, r0
    }
   d4f60:	f7ff ffe2 	bl	d4f28 <_ZN5spark16SerialLogHandlerD1Ev>
   d4f64:	4620      	mov	r0, r4
   d4f66:	2124      	movs	r1, #36	; 0x24
   d4f68:	f009 f8fc 	bl	de164 <_ZdlPvj>
   d4f6c:	4620      	mov	r0, r4
   d4f6e:	bd10      	pop	{r4, pc}

000d4f70 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   d4f70:	b507      	push	{r0, r1, r2, lr}
        conn_prop.size = sizeof(conn_prop);
   d4f72:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4f74:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4f76:	f8ad 2000 	strh.w	r2, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4f7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4f7e:	2201      	movs	r2, #1
   d4f80:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4f82:	4341      	muls	r1, r0
   d4f84:	466a      	mov	r2, sp
   d4f86:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4f88:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4f8c:	f005 ff14 	bl	dadb8 <spark_set_connection_property>
    }
   d4f90:	b003      	add	sp, #12
   d4f92:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4f96:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d4f98:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4f9a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4f9c:	b17c      	cbz	r4, d4fbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4f9e:	6863      	ldr	r3, [r4, #4]
   d4fa0:	3b01      	subs	r3, #1
   d4fa2:	6063      	str	r3, [r4, #4]
   d4fa4:	b95b      	cbnz	r3, d4fbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4fa6:	6823      	ldr	r3, [r4, #0]
   d4fa8:	4620      	mov	r0, r4
   d4faa:	689b      	ldr	r3, [r3, #8]
   d4fac:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4fae:	68a3      	ldr	r3, [r4, #8]
   d4fb0:	3b01      	subs	r3, #1
   d4fb2:	60a3      	str	r3, [r4, #8]
   d4fb4:	b91b      	cbnz	r3, d4fbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4fb6:	6823      	ldr	r3, [r4, #0]
   d4fb8:	4620      	mov	r0, r4
   d4fba:	68db      	ldr	r3, [r3, #12]
   d4fbc:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4fbe:	4628      	mov	r0, r5
   d4fc0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4fc4 <_Z12setFrequency6String.part.0>:
 * @param command A string indicating the number of minutes between reporting events.  Note, this function
 * sets an interim value for reporting frequency which takes effect once sent to a new node.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setFrequency(String command)
   d4fc4:	b500      	push	{lr}
  sysStatus.frequencyMinutes = tempTime;
  if (sysStatus.frequencyMinutes < 12 && sysStatus.lowPowerMode) {
    Log.info("Short reporting frequency over-rides low power");
    sysStatus.lowPowerMode = false;
  }
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   d4fc6:	4b12      	ldr	r3, [pc, #72]	; (d5010 <_Z12setFrequency6String.part.0+0x4c>)
   d4fc8:	2201      	movs	r2, #1
   d4fca:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.frequencyMinutes);
   d4fcc:	4b11      	ldr	r3, [pc, #68]	; (d5014 <_Z12setFrequency6String.part.0+0x50>)
   d4fce:	4a12      	ldr	r2, [pc, #72]	; (d5018 <_Z12setFrequency6String.part.0+0x54>)
   d4fd0:	8b9b      	ldrh	r3, [r3, #28]
int setFrequency(String command)
   d4fd2:	b0c5      	sub	sp, #276	; 0x114
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.frequencyMinutes);
   d4fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4fd8:	a804      	add	r0, sp, #16
   d4fda:	f005 ff8d 	bl	daef8 <snprintf>
  Log.info(data);
   d4fde:	480f      	ldr	r0, [pc, #60]	; (d501c <_Z12setFrequency6String.part.0+0x58>)
   d4fe0:	a904      	add	r1, sp, #16
   d4fe2:	f7ff f871 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4fe6:	f005 febf 	bl	dad68 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4fea:	b160      	cbz	r0, d5006 <_Z12setFrequency6String.part.0+0x42>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4fec:	4b0c      	ldr	r3, [pc, #48]	; (d5020 <_Z12setFrequency6String.part.0+0x5c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4fee:	490d      	ldr	r1, [pc, #52]	; (d5024 <_Z12setFrequency6String.part.0+0x60>)
   d4ff0:	781b      	ldrb	r3, [r3, #0]
   d4ff2:	f88d 3000 	strb.w	r3, [sp]
   d4ff6:	a802      	add	r0, sp, #8
   d4ff8:	233c      	movs	r3, #60	; 0x3c
   d4ffa:	aa04      	add	r2, sp, #16
   d4ffc:	f006 fa90 	bl	db520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5000:	a803      	add	r0, sp, #12
   d5002:	f7ff ffc8 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
}
   d5006:	2001      	movs	r0, #1
   d5008:	b045      	add	sp, #276	; 0x114
   d500a:	f85d fb04 	ldr.w	pc, [sp], #4
   d500e:	bf00      	nop
   d5010:	2003e1c1 	.word	0x2003e1c1
   d5014:	2003e220 	.word	0x2003e220
   d5018:	000df4c5 	.word	0x000df4c5
   d501c:	2003e570 	.word	0x2003e570
   d5020:	2003e1c0 	.word	0x2003e1c0
   d5024:	000df505 	.word	0x000df505

000d5028 <_Z12setFrequency6String>:
{
   d5028:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d502a:	220a      	movs	r2, #10
   d502c:	6800      	ldr	r0, [r0, #0]
   d502e:	a901      	add	r1, sp, #4
   d5030:	f009 feda 	bl	dede8 <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d5034:	2878      	cmp	r0, #120	; 0x78
   d5036:	d80f      	bhi.n	d5058 <_Z12setFrequency6String+0x30>
  sysStatus.frequencyMinutes = tempTime;
   d5038:	4c08      	ldr	r4, [pc, #32]	; (d505c <_Z12setFrequency6String+0x34>)
  if (sysStatus.frequencyMinutes < 12 && sysStatus.lowPowerMode) {
   d503a:	280b      	cmp	r0, #11
  sysStatus.frequencyMinutes = tempTime;
   d503c:	83a0      	strh	r0, [r4, #28]
  if (sysStatus.frequencyMinutes < 12 && sysStatus.lowPowerMode) {
   d503e:	dc07      	bgt.n	d5050 <_Z12setFrequency6String+0x28>
   d5040:	7a23      	ldrb	r3, [r4, #8]
   d5042:	b12b      	cbz	r3, d5050 <_Z12setFrequency6String+0x28>
    Log.info("Short reporting frequency over-rides low power");
   d5044:	4906      	ldr	r1, [pc, #24]	; (d5060 <_Z12setFrequency6String+0x38>)
   d5046:	4807      	ldr	r0, [pc, #28]	; (d5064 <_Z12setFrequency6String+0x3c>)
   d5048:	f7ff f83e 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.lowPowerMode = false;
   d504c:	2300      	movs	r3, #0
   d504e:	7223      	strb	r3, [r4, #8]
   d5050:	f7ff ffb8 	bl	d4fc4 <_Z12setFrequency6String.part.0>
}
   d5054:	b002      	add	sp, #8
   d5056:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d5058:	2000      	movs	r0, #0
   d505a:	e7fb      	b.n	d5054 <_Z12setFrequency6String+0x2c>
   d505c:	2003e220 	.word	0x2003e220
   d5060:	000df50a 	.word	0x000df50a
   d5064:	2003e570 	.word	0x2003e570

000d5068 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d5068:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d506a:	4922      	ldr	r1, [pc, #136]	; (d50f4 <_Z15setLowPowerMode6String+0x8c>)
   d506c:	b095      	sub	sp, #84	; 0x54
   d506e:	4604      	mov	r4, r0
   d5070:	f008 fb52 	bl	dd718 <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d5074:	b138      	cbz	r0, d5086 <_Z15setLowPowerMode6String+0x1e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d5076:	4620      	mov	r0, r4
   d5078:	491e      	ldr	r1, [pc, #120]	; (d50f4 <_Z15setLowPowerMode6String+0x8c>)
   d507a:	4c1f      	ldr	r4, [pc, #124]	; (d50f8 <_Z15setLowPowerMode6String+0x90>)
   d507c:	f008 fb4c 	bl	dd718 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   d5080:	b948      	cbnz	r0, d5096 <_Z15setLowPowerMode6String+0x2e>
      sysStatus.frequencyMinutes = 12;
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.lowPowerMode = false;
   d5082:	7220      	strb	r0, [r4, #8]
   d5084:	e033      	b.n	d50ee <_Z15setLowPowerMode6String+0x86>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5086:	491d      	ldr	r1, [pc, #116]	; (d50fc <_Z15setLowPowerMode6String+0x94>)
   d5088:	4620      	mov	r0, r4
   d508a:	f008 fb45 	bl	dd718 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d508e:	2800      	cmp	r0, #0
   d5090:	d1f1      	bne.n	d5076 <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   d5092:	b015      	add	sp, #84	; 0x54
   d5094:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d5096:	8ba3      	ldrh	r3, [r4, #28]
    sysStatus.lowPowerMode = true;
   d5098:	2501      	movs	r5, #1
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d509a:	2b0b      	cmp	r3, #11
    sysStatus.lowPowerMode = true;
   d509c:	7225      	strb	r5, [r4, #8]
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d509e:	d91b      	bls.n	d50d8 <_Z15setLowPowerMode6String+0x70>
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d50a0:	4b17      	ldr	r3, [pc, #92]	; (d5100 <_Z15setLowPowerMode6String+0x98>)
   d50a2:	4a18      	ldr	r2, [pc, #96]	; (d5104 <_Z15setLowPowerMode6String+0x9c>)
   d50a4:	2140      	movs	r1, #64	; 0x40
   d50a6:	a804      	add	r0, sp, #16
   d50a8:	f005 ff26 	bl	daef8 <snprintf>
  Log.info(data);
   d50ac:	4816      	ldr	r0, [pc, #88]	; (d5108 <_Z15setLowPowerMode6String+0xa0>)
   d50ae:	a904      	add	r1, sp, #16
   d50b0:	f7ff f80a 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50b4:	f005 fe58 	bl	dad68 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d50b8:	b160      	cbz	r0, d50d4 <_Z15setLowPowerMode6String+0x6c>
   d50ba:	4b14      	ldr	r3, [pc, #80]	; (d510c <_Z15setLowPowerMode6String+0xa4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d50bc:	4914      	ldr	r1, [pc, #80]	; (d5110 <_Z15setLowPowerMode6String+0xa8>)
   d50be:	781b      	ldrb	r3, [r3, #0]
   d50c0:	f88d 3000 	strb.w	r3, [sp]
   d50c4:	a802      	add	r0, sp, #8
   d50c6:	233c      	movs	r3, #60	; 0x3c
   d50c8:	aa04      	add	r2, sp, #16
   d50ca:	f006 fa29 	bl	db520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d50ce:	a803      	add	r0, sp, #12
   d50d0:	f7ff ff61 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d50d4:	2001      	movs	r0, #1
   d50d6:	e7dc      	b.n	d5092 <_Z15setLowPowerMode6String+0x2a>
      Log.info("Increasing reporting frequency to 12 minutes");
   d50d8:	490e      	ldr	r1, [pc, #56]	; (d5114 <_Z15setLowPowerMode6String+0xac>)
   d50da:	480b      	ldr	r0, [pc, #44]	; (d5108 <_Z15setLowPowerMode6String+0xa0>)
   d50dc:	f7fe fff4 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.frequencyMinutes = 12;
   d50e0:	230c      	movs	r3, #12
   d50e2:	83a3      	strh	r3, [r4, #28]
      frequencyUpdated = true;
   d50e4:	4b0c      	ldr	r3, [pc, #48]	; (d5118 <_Z15setLowPowerMode6String+0xb0>)
   d50e6:	701d      	strb	r5, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d50e8:	7a23      	ldrb	r3, [r4, #8]
   d50ea:	2b00      	cmp	r3, #0
   d50ec:	d1d8      	bne.n	d50a0 <_Z15setLowPowerMode6String+0x38>
   d50ee:	4b0b      	ldr	r3, [pc, #44]	; (d511c <_Z15setLowPowerMode6String+0xb4>)
   d50f0:	e7d7      	b.n	d50a2 <_Z15setLowPowerMode6String+0x3a>
   d50f2:	bf00      	nop
   d50f4:	000df8d0 	.word	0x000df8d0
   d50f8:	2003e220 	.word	0x2003e220
   d50fc:	000dfb7c 	.word	0x000dfb7c
   d5100:	000df539 	.word	0x000df539
   d5104:	000df56d 	.word	0x000df56d
   d5108:	2003e570 	.word	0x2003e570
   d510c:	2003e1c0 	.word	0x2003e1c0
   d5110:	000df6f7 	.word	0x000df6f7
   d5114:	000df540 	.word	0x000df540
   d5118:	2003e1c1 	.word	0x2003e1c1
   d511c:	000df53d 	.word	0x000df53d

000d5120 <_Z13setVerizonSIM6String>:
 * 
 * @param command  - 1 for Verizon and 0 for Particle (default)
 * @return int 
 */
int setVerizonSIM(String command)                                   // If we are using a Verizon SIM, we will need to execute "keepAlive" calls in the main loop when not in low power mode
{
   d5120:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d5122:	491d      	ldr	r1, [pc, #116]	; (d5198 <_Z13setVerizonSIM6String+0x78>)
   d5124:	b085      	sub	sp, #20
   d5126:	4605      	mov	r5, r0
   d5128:	f008 faf6 	bl	dd718 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d512c:	4604      	mov	r4, r0
   d512e:	b1d0      	cbz	r0, d5166 <_Z13setVerizonSIM6String+0x46>
  {
    sysStatus.verizonSIM = true;
   d5130:	4b1a      	ldr	r3, [pc, #104]	; (d519c <_Z13setVerizonSIM6String+0x7c>)
   d5132:	2401      	movs	r4, #1
    Particle.keepAlive(60);                                         // send a ping every minute
   d5134:	203c      	movs	r0, #60	; 0x3c
    sysStatus.verizonSIM = true;
   d5136:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    Particle.keepAlive(60);                                         // send a ping every minute
   d513a:	f7ff ff19 	bl	d4f70 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d513e:	f005 fe13 	bl	dad68 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   d5142:	b910      	cbnz	r0, d514a <_Z13setVerizonSIM6String+0x2a>
   d5144:	2001      	movs	r0, #1
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
    return 1;
  }
  else return 0;
}
   d5146:	b005      	add	sp, #20
   d5148:	bd30      	pop	{r4, r5, pc}
   d514a:	4b15      	ldr	r3, [pc, #84]	; (d51a0 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d514c:	4a15      	ldr	r2, [pc, #84]	; (d51a4 <_Z13setVerizonSIM6String+0x84>)
   d514e:	781b      	ldrb	r3, [r3, #0]
   d5150:	f88d 3000 	strb.w	r3, [sp]
   d5154:	233c      	movs	r3, #60	; 0x3c
   d5156:	a802      	add	r0, sp, #8
   d5158:	4913      	ldr	r1, [pc, #76]	; (d51a8 <_Z13setVerizonSIM6String+0x88>)
   d515a:	f006 f9e1 	bl	db520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d515e:	a803      	add	r0, sp, #12
   d5160:	f7ff ff19 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5164:	e7ee      	b.n	d5144 <_Z13setVerizonSIM6String+0x24>
   d5166:	4911      	ldr	r1, [pc, #68]	; (d51ac <_Z13setVerizonSIM6String+0x8c>)
   d5168:	4628      	mov	r0, r5
   d516a:	f008 fad5 	bl	dd718 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d516e:	2800      	cmp	r0, #0
   d5170:	d0e9      	beq.n	d5146 <_Z13setVerizonSIM6String+0x26>
    sysStatus.verizonSIM = false;
   d5172:	4b0a      	ldr	r3, [pc, #40]	; (d519c <_Z13setVerizonSIM6String+0x7c>)
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   d5174:	f240 5064 	movw	r0, #1380	; 0x564
    sysStatus.verizonSIM = false;
   d5178:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   d517c:	f7ff fef8 	bl	d4f70 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5180:	f005 fdf2 	bl	dad68 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   d5184:	2800      	cmp	r0, #0
   d5186:	d0dd      	beq.n	d5144 <_Z13setVerizonSIM6String+0x24>
   d5188:	4b05      	ldr	r3, [pc, #20]	; (d51a0 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d518a:	4a09      	ldr	r2, [pc, #36]	; (d51b0 <_Z13setVerizonSIM6String+0x90>)
   d518c:	781b      	ldrb	r3, [r3, #0]
   d518e:	f88d 3000 	strb.w	r3, [sp]
   d5192:	233c      	movs	r3, #60	; 0x3c
   d5194:	e7df      	b.n	d5156 <_Z13setVerizonSIM6String+0x36>
   d5196:	bf00      	nop
   d5198:	000df8d0 	.word	0x000df8d0
   d519c:	2003e220 	.word	0x2003e220
   d51a0:	2003e1c0 	.word	0x2003e1c0
   d51a4:	000df587 	.word	0x000df587
   d51a8:	000df6f7 	.word	0x000df6f7
   d51ac:	000dfb7c 	.word	0x000dfb7c
   d51b0:	000df59a 	.word	0x000df59a

000d51b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d51b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d51b6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d51ba:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d51bc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d51be:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d51c2:	42ae      	cmp	r6, r5
   d51c4:	d004      	beq.n	d51d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d51c6:	4628      	mov	r0, r5
   d51c8:	f008 f9a2 	bl	dd510 <_ZN6StringD1Ev>
   d51cc:	3514      	adds	r5, #20
   d51ce:	e7f8      	b.n	d51c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d51d0:	6820      	ldr	r0, [r4, #0]
   d51d2:	f005 fe71 	bl	daeb8 <free>
    AllocatorT::free(data_);
}
   d51d6:	4620      	mov	r0, r4
   d51d8:	bd70      	pop	{r4, r5, r6, pc}

000d51da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d51da:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d51dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51de:	4604      	mov	r4, r0
   d51e0:	460d      	mov	r5, r1
   d51e2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d51e4:	d916      	bls.n	d5214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d51e6:	4290      	cmp	r0, r2
   d51e8:	d215      	bcs.n	d5216 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d51ea:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d51ee:	1a75      	subs	r5, r6, r1
   d51f0:	f1a1 0714 	sub.w	r7, r1, #20
   d51f4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d51f6:	42b7      	cmp	r7, r6
   d51f8:	d01c      	beq.n	d5234 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d51fa:	b12c      	cbz	r4, d5208 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d51fc:	4631      	mov	r1, r6
   d51fe:	4620      	mov	r0, r4
   d5200:	f008 fa02 	bl	dd608 <_ZN6StringC1EOS_>
   d5204:	7c33      	ldrb	r3, [r6, #16]
   d5206:	7423      	strb	r3, [r4, #16]
   d5208:	4630      	mov	r0, r6
   d520a:	f008 f981 	bl	dd510 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d520e:	3e14      	subs	r6, #20
   d5210:	3c14      	subs	r4, #20
   d5212:	e7f0      	b.n	d51f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5214:	d00e      	beq.n	d5234 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5216:	42b5      	cmp	r5, r6
   d5218:	d00c      	beq.n	d5234 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d521a:	b12c      	cbz	r4, d5228 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d521c:	4629      	mov	r1, r5
   d521e:	4620      	mov	r0, r4
   d5220:	f008 f9f2 	bl	dd608 <_ZN6StringC1EOS_>
   d5224:	7c2b      	ldrb	r3, [r5, #16]
   d5226:	7423      	strb	r3, [r4, #16]
   d5228:	4628      	mov	r0, r5
   d522a:	f008 f971 	bl	dd510 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d522e:	3514      	adds	r5, #20
   d5230:	3414      	adds	r4, #20
   d5232:	e7f0      	b.n	d5216 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d5234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d523a:	2300      	movs	r3, #0
   d523c:	e9c0 3300 	strd	r3, r3, [r0]
   d5240:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5242:	684f      	ldr	r7, [r1, #4]
   d5244:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5246:	4604      	mov	r4, r0
   d5248:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d524a:	dd23      	ble.n	d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d524c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d5250:	fb08 f007 	mul.w	r0, r8, r7
   d5254:	f005 fe28 	bl	daea8 <malloc>
            if (!d) {
   d5258:	4605      	mov	r5, r0
   d525a:	b1d8      	cbz	r0, d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d525c:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5260:	fb08 1202 	mla	r2, r8, r2, r1
   d5264:	f7ff ffb9 	bl	d51da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5268:	6820      	ldr	r0, [r4, #0]
   d526a:	f005 fe25 	bl	daeb8 <free>
        data_ = d;
   d526e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5270:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5272:	e9d6 7300 	ldrd	r7, r3, [r6]
   d5276:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d527a:	45b8      	cmp	r8, r7
   d527c:	d008      	beq.n	d5290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d527e:	4639      	mov	r1, r7
   d5280:	4628      	mov	r0, r5
   d5282:	f008 f9db 	bl	dd63c <_ZN6StringC1ERKS_>
   d5286:	7c3b      	ldrb	r3, [r7, #16]
   d5288:	742b      	strb	r3, [r5, #16]
   d528a:	3714      	adds	r7, #20
   d528c:	3514      	adds	r5, #20
   d528e:	e7f4      	b.n	d527a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5290:	6873      	ldr	r3, [r6, #4]
   d5292:	6063      	str	r3, [r4, #4]
}
   d5294:	4620      	mov	r0, r4
   d5296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d529c <_GLOBAL__sub_I_SystemMode>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   d529c:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d529e:	4b28      	ldr	r3, [pc, #160]	; (d5340 <_GLOBAL__sub_I_SystemMode+0xa4>)
    SleepResult() {}
   d52a0:	4a28      	ldr	r2, [pc, #160]	; (d5344 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d52a2:	2501      	movs	r5, #1
   d52a4:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d52a6:	4b28      	ldr	r3, [pc, #160]	; (d5348 <_GLOBAL__sub_I_SystemMode+0xac>)
   d52a8:	2400      	movs	r4, #0
   d52aa:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   d52ac:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d52ae:	601c      	str	r4, [r3, #0]
   d52b0:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d52b2:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d52b4:	2002      	movs	r0, #2
   d52b6:	f005 fccf 	bl	dac58 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d52ba:	4621      	mov	r1, r4
   d52bc:	4628      	mov	r0, r5
   d52be:	f005 fce3 	bl	dac88 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d52c2:	4629      	mov	r1, r5
   d52c4:	2004      	movs	r0, #4
   d52c6:	f005 fa4d 	bl	da764 <HAL_Feature_Set>
        capacity_(0) {
   d52ca:	e9cd 4400 	strd	r4, r4, [sp]
   d52ce:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d52d0:	f008 fd62 	bl	ddd98 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d52d4:	4c1d      	ldr	r4, [pc, #116]	; (d534c <_GLOBAL__sub_I_SystemMode+0xb0>)
   d52d6:	4605      	mov	r5, r0
   d52d8:	4669      	mov	r1, sp
   d52da:	a803      	add	r0, sp, #12
   d52dc:	f7ff ffab 	bl	d5236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d52e0:	4626      	mov	r6, r4
        stream_(&stream) {
   d52e2:	a903      	add	r1, sp, #12
   d52e4:	a806      	add	r0, sp, #24
   d52e6:	f7ff ffa6 	bl	d5236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d52ea:	4b19      	ldr	r3, [pc, #100]	; (d5350 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d52ec:	f846 3b04 	str.w	r3, [r6], #4
   d52f0:	a906      	add	r1, sp, #24
   d52f2:	a809      	add	r0, sp, #36	; 0x24
   d52f4:	f7ff ff9f 	bl	d5236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d52f8:	aa09      	add	r2, sp, #36	; 0x24
   d52fa:	211e      	movs	r1, #30
   d52fc:	4630      	mov	r0, r6
   d52fe:	f007 fb26 	bl	dc94e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5302:	a809      	add	r0, sp, #36	; 0x24
   d5304:	f7ff ff56 	bl	d51b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5308:	a806      	add	r0, sp, #24
   d530a:	f7ff ff53 	bl	d51b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d530e:	4b11      	ldr	r3, [pc, #68]	; (d5354 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d5310:	6023      	str	r3, [r4, #0]
   d5312:	6225      	str	r5, [r4, #32]
   d5314:	a803      	add	r0, sp, #12
   d5316:	f7ff ff4d 	bl	d51b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d531a:	4b0f      	ldr	r3, [pc, #60]	; (d5358 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d531c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d531e:	f008 fd3b 	bl	ddd98 <_Z16_fetch_usbserialv>
   d5322:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5326:	f008 fd27 	bl	ddd78 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d532a:	f006 fff1 	bl	dc310 <_ZN5spark10LogManager8instanceEv>
   d532e:	4621      	mov	r1, r4
   d5330:	f007 fa9f 	bl	dc872 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   d5334:	4668      	mov	r0, sp
   d5336:	f7ff ff3d 	bl	d51b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d533a:	b00c      	add	sp, #48	; 0x30
   d533c:	bd70      	pop	{r4, r5, r6, pc}
   d533e:	bf00      	nop
   d5340:	2003e1c0 	.word	0x2003e1c0
   d5344:	ffff0000 	.word	0xffff0000
   d5348:	2003e1b4 	.word	0x2003e1b4
   d534c:	2003e1c4 	.word	0x2003e1c4
   d5350:	000df768 	.word	0x000df768
   d5354:	000e0408 	.word	0x000e0408
   d5358:	000df780 	.word	0x000df780

000d535c <_Z22disconnectFromParticlev>:
{
   d535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5360:	b087      	sub	sp, #28
  time_t startTime = Time.now();
   d5362:	f008 fc18 	bl	ddb96 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   d5366:	4947      	ldr	r1, [pc, #284]	; (d5484 <_Z22disconnectFromParticlev+0x128>)
  time_t startTime = Time.now();
   d5368:	9001      	str	r0, [sp, #4]
  Log.info("In the disconnect from Particle function");
   d536a:	4847      	ldr	r0, [pc, #284]	; (d5488 <_Z22disconnectFromParticlev+0x12c>)
   d536c:	f7fe feac 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   d5370:	4b46      	ldr	r3, [pc, #280]	; (d548c <_Z22disconnectFromParticlev+0x130>)
   d5372:	8818      	ldrh	r0, [r3, #0]
   d5374:	f006 fc1a 	bl	dbbac <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d5378:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();                                               // Disconnect from Particle
   d537c:	a803      	add	r0, sp, #12
   d537e:	e9cd aa03 	strd	sl, sl, [sp, #12]
   d5382:	f8ad a014 	strh.w	sl, [sp, #20]
   d5386:	f005 ffd0 	bl	db32a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d538a:	4650      	mov	r0, sl
   d538c:	f005 fa1a 	bl	da7c4 <hal_timer_millis>
        while (_while() && !_condition()) {
   d5390:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d5394:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d5396:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d539a:	2000      	movs	r0, #0
   d539c:	f005 fa12 	bl	da7c4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d53a0:	ebb0 060b 	subs.w	r6, r0, fp
   d53a4:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d53a8:	45b9      	cmp	r9, r7
   d53aa:	bf08      	it	eq
   d53ac:	45b0      	cmpeq	r8, r6
   d53ae:	d305      	bcc.n	d53bc <_Z22disconnectFromParticlev+0x60>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d53b0:	f005 fcda 	bl	dad68 <spark_cloud_flag_connected>
   d53b4:	b110      	cbz	r0, d53bc <_Z22disconnectFromParticlev+0x60>
            spark_process();
   d53b6:	f005 fcc7 	bl	dad48 <spark_process>
        while (_while() && !_condition()) {
   d53ba:	e7ee      	b.n	d539a <_Z22disconnectFromParticlev+0x3e>
   d53bc:	f005 fcd4 	bl	dad68 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d53c0:	f005 f9f0 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d53c4:	4f32      	ldr	r7, [pc, #200]	; (d5490 <_Z22disconnectFromParticlev+0x134>)
   d53c6:	6038      	str	r0, [r7, #0]
    		spark_process();
   d53c8:	f005 fcbe 	bl	dad48 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d53cc:	f005 fccc 	bl	dad68 <spark_cloud_flag_connected>
   d53d0:	46bb      	mov	fp, r7
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   d53d2:	4606      	mov	r6, r0
   d53d4:	b140      	cbz	r0, d53e8 <_Z22disconnectFromParticlev+0x8c>
    Log.info("Failed to disconnect from Particle");
   d53d6:	492f      	ldr	r1, [pc, #188]	; (d5494 <_Z22disconnectFromParticlev+0x138>)
   d53d8:	482b      	ldr	r0, [pc, #172]	; (d5488 <_Z22disconnectFromParticlev+0x12c>)
   d53da:	f7fe fe75 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   d53de:	2600      	movs	r6, #0
   d53e0:	4630      	mov	r0, r6
   d53e2:	b007      	add	sp, #28
   d53e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   d53e8:	f008 fbd5 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d53ec:	9b01      	ldr	r3, [sp, #4]
   d53ee:	492a      	ldr	r1, [pc, #168]	; (d5498 <_Z22disconnectFromParticlev+0x13c>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d53f0:	4f2a      	ldr	r7, [pc, #168]	; (d549c <_Z22disconnectFromParticlev+0x140>)
   d53f2:	1ac2      	subs	r2, r0, r3
   d53f4:	4824      	ldr	r0, [pc, #144]	; (d5488 <_Z22disconnectFromParticlev+0x12c>)
   d53f6:	f7fe fe67 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   d53fa:	f008 fbcc 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d53fe:	4632      	mov	r2, r6
   d5400:	2102      	movs	r1, #2
   d5402:	4680      	mov	r8, r0
   d5404:	6878      	ldr	r0, [r7, #4]
   d5406:	f005 fcff 	bl	dae08 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   d540a:	6878      	ldr	r0, [r7, #4]
   d540c:	4633      	mov	r3, r6
   d540e:	4632      	mov	r2, r6
   d5410:	4631      	mov	r1, r6
   d5412:	f005 fd11 	bl	dae38 <network_off>
        return hal_timer_millis(nullptr);
   d5416:	4630      	mov	r0, r6
   d5418:	f005 f9d4 	bl	da7c4 <hal_timer_millis>
   d541c:	46b2      	mov	sl, r6
   d541e:	4681      	mov	r9, r0
   d5420:	2000      	movs	r0, #0
   d5422:	f005 f9cf 	bl	da7c4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5426:	ebb0 0409 	subs.w	r4, r0, r9
   d542a:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d542e:	2300      	movs	r3, #0
   d5430:	f247 522f 	movw	r2, #29999	; 0x752f
   d5434:	42ab      	cmp	r3, r5
   d5436:	bf08      	it	eq
   d5438:	42a2      	cmpeq	r2, r4
   d543a:	d306      	bcc.n	d544a <_Z22disconnectFromParticlev+0xee>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d543c:	4638      	mov	r0, r7
   d543e:	f007 fdc5 	bl	dcfcc <_ZN5spark12NetworkClass5isOffEv>
   d5442:	b910      	cbnz	r0, d544a <_Z22disconnectFromParticlev+0xee>
            spark_process();
   d5444:	f005 fc80 	bl	dad48 <spark_process>
        while (_while() && !_condition()) {
   d5448:	e7ea      	b.n	d5420 <_Z22disconnectFromParticlev+0xc4>
   d544a:	4814      	ldr	r0, [pc, #80]	; (d549c <_Z22disconnectFromParticlev+0x140>)
   d544c:	f007 fdbe 	bl	dcfcc <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   d5450:	f005 f9a8 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d5454:	f8cb 0000 	str.w	r0, [fp]
    		spark_process();
   d5458:	f005 fc76 	bl	dad48 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   d545c:	480f      	ldr	r0, [pc, #60]	; (d549c <_Z22disconnectFromParticlev+0x140>)
   d545e:	f007 fdb1 	bl	dcfc4 <_ZN5spark12NetworkClass4isOnEv>
   d5462:	b120      	cbz	r0, d546e <_Z22disconnectFromParticlev+0x112>
    Log.info("Failed to turn off the Cellular modem");
   d5464:	490e      	ldr	r1, [pc, #56]	; (d54a0 <_Z22disconnectFromParticlev+0x144>)
   d5466:	4808      	ldr	r0, [pc, #32]	; (d5488 <_Z22disconnectFromParticlev+0x12c>)
   d5468:	f7fe fe2e 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   d546c:	e7b8      	b.n	d53e0 <_Z22disconnectFromParticlev+0x84>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   d546e:	f008 fb92 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d5472:	490c      	ldr	r1, [pc, #48]	; (d54a4 <_Z22disconnectFromParticlev+0x148>)
   d5474:	eba0 0208 	sub.w	r2, r0, r8
   d5478:	4803      	ldr	r0, [pc, #12]	; (d5488 <_Z22disconnectFromParticlev+0x12c>)
   d547a:	f7fe fe25 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    return true;
   d547e:	2601      	movs	r6, #1
   d5480:	e7ae      	b.n	d53e0 <_Z22disconnectFromParticlev+0x84>
   d5482:	bf00      	nop
   d5484:	000df5ae 	.word	0x000df5ae
   d5488:	2003e570 	.word	0x2003e570
   d548c:	000df4b2 	.word	0x000df4b2
   d5490:	2003e720 	.word	0x2003e720
   d5494:	000df5d7 	.word	0x000df5d7
   d5498:	000df5fa 	.word	0x000df5fa
   d549c:	2003e49c 	.word	0x2003e49c
   d54a0:	000df623 	.word	0x000df623
   d54a4:	000df649 	.word	0x000df649

000d54a8 <_Z18particleInitializev>:
void particleInitialize() {
   d54a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d54ac:	b08c      	sub	sp, #48	; 0x30
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d54ae:	4b55      	ldr	r3, [pc, #340]	; (d5604 <_Z18particleInitializev+0x15c>)
   d54b0:	9304      	str	r3, [sp, #16]
   d54b2:	4b55      	ldr	r3, [pc, #340]	; (d5608 <_Z18particleInitializev+0x160>)
   d54b4:	9305      	str	r3, [sp, #20]
   d54b6:	4b55      	ldr	r3, [pc, #340]	; (d560c <_Z18particleInitializev+0x164>)
   d54b8:	9306      	str	r3, [sp, #24]
   d54ba:	4b55      	ldr	r3, [pc, #340]	; (d5610 <_Z18particleInitializev+0x168>)
   d54bc:	9307      	str	r3, [sp, #28]
   d54be:	4b55      	ldr	r3, [pc, #340]	; (d5614 <_Z18particleInitializev+0x16c>)
  Particle.variable("Low Power Mode",(sysStatus.lowPowerMode) ? "Yes" : "No");
   d54c0:	4d55      	ldr	r5, [pc, #340]	; (d5618 <_Z18particleInitializev+0x170>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d54c2:	9308      	str	r3, [sp, #32]
   d54c4:	4b55      	ldr	r3, [pc, #340]	; (d561c <_Z18particleInitializev+0x174>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d54c6:	4956      	ldr	r1, [pc, #344]	; (d5620 <_Z18particleInitializev+0x178>)
   d54c8:	4856      	ldr	r0, [pc, #344]	; (d5624 <_Z18particleInitializev+0x17c>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d54ca:	9309      	str	r3, [sp, #36]	; 0x24
   d54cc:	2400      	movs	r4, #0
   d54ce:	4b56      	ldr	r3, [pc, #344]	; (d5628 <_Z18particleInitializev+0x180>)
   d54d0:	930a      	str	r3, [sp, #40]	; 0x28
   d54d2:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d54d4:	f7fe fdf8 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  Particle.variable("Low Power Mode",(sysStatus.lowPowerMode) ? "Yes" : "No");
   d54d8:	f895 c008 	ldrb.w	ip, [r5, #8]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d54dc:	4853      	ldr	r0, [pc, #332]	; (d562c <_Z18particleInitializev+0x184>)
   d54de:	4954      	ldr	r1, [pc, #336]	; (d5630 <_Z18particleInitializev+0x188>)
   d54e0:	4623      	mov	r3, r4
   d54e2:	45a4      	cmp	ip, r4
   d54e4:	bf08      	it	eq
   d54e6:	4601      	moveq	r1, r0
   d54e8:	2204      	movs	r2, #4
   d54ea:	4852      	ldr	r0, [pc, #328]	; (d5634 <_Z18particleInitializev+0x18c>)
   d54ec:	f005 fc1c 	bl	dad28 <spark_variable>
   d54f0:	4951      	ldr	r1, [pc, #324]	; (d5638 <_Z18particleInitializev+0x190>)
   d54f2:	4852      	ldr	r0, [pc, #328]	; (d563c <_Z18particleInitializev+0x194>)
   d54f4:	4623      	mov	r3, r4
   d54f6:	2204      	movs	r2, #4
   d54f8:	f005 fc16 	bl	dad28 <spark_variable>
   d54fc:	4950      	ldr	r1, [pc, #320]	; (d5640 <_Z18particleInitializev+0x198>)
   d54fe:	4851      	ldr	r0, [pc, #324]	; (d5644 <_Z18particleInitializev+0x19c>)
   d5500:	4623      	mov	r3, r4
   d5502:	2204      	movs	r2, #4
   d5504:	f005 fc10 	bl	dad28 <spark_variable>
   d5508:	494f      	ldr	r1, [pc, #316]	; (d5648 <_Z18particleInitializev+0x1a0>)
   d550a:	4850      	ldr	r0, [pc, #320]	; (d564c <_Z18particleInitializev+0x1a4>)
   d550c:	4623      	mov	r3, r4
   d550e:	2202      	movs	r2, #2
   d5510:	f005 fc0a 	bl	dad28 <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.batteryState]);
   d5514:	4b4e      	ldr	r3, [pc, #312]	; (d5650 <_Z18particleInitializev+0x1a8>)
   d5516:	484f      	ldr	r0, [pc, #316]	; (d5654 <_Z18particleInitializev+0x1ac>)
   d5518:	7a19      	ldrb	r1, [r3, #8]
   d551a:	ab0c      	add	r3, sp, #48	; 0x30
   d551c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   d5520:	2204      	movs	r2, #4
   d5522:	f851 1c20 	ldr.w	r1, [r1, #-32]
   d5526:	4623      	mov	r3, r4
   d5528:	f005 fbfe 	bl	dad28 <spark_variable>
        extra.size = sizeof(extra);
   d552c:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d552e:	e9cd 4401 	strd	r4, r4, [sp, #4]
        extra.size = sizeof(extra);
   d5532:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d5536:	4b48      	ldr	r3, [pc, #288]	; (d5658 <_Z18particleInitializev+0x1b0>)
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d5538:	4948      	ldr	r1, [pc, #288]	; (d565c <_Z18particleInitializev+0x1b4>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d553a:	9303      	str	r3, [sp, #12]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d553c:	2204      	movs	r2, #4
   d553e:	ab01      	add	r3, sp, #4
   d5540:	4847      	ldr	r0, [pc, #284]	; (d5660 <_Z18particleInitializev+0x1b8>)
   d5542:	f005 fbf1 	bl	dad28 <spark_variable>
  Particle.variable("SIM Card", (sysStatus.verizonSIM) ? "Verizon" : "Particle");
   d5546:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d554a:	4846      	ldr	r0, [pc, #280]	; (d5664 <_Z18particleInitializev+0x1bc>)
   d554c:	4946      	ldr	r1, [pc, #280]	; (d5668 <_Z18particleInitializev+0x1c0>)
   d554e:	4623      	mov	r3, r4
   d5550:	45a4      	cmp	ip, r4
   d5552:	bf08      	it	eq
   d5554:	4601      	moveq	r1, r0
   d5556:	2204      	movs	r2, #4
   d5558:	4844      	ldr	r0, [pc, #272]	; (d566c <_Z18particleInitializev+0x1c4>)
   d555a:	f005 fbe5 	bl	dad28 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d555e:	4a44      	ldr	r2, [pc, #272]	; (d5670 <_Z18particleInitializev+0x1c8>)
   d5560:	4944      	ldr	r1, [pc, #272]	; (d5674 <_Z18particleInitializev+0x1cc>)
   d5562:	4845      	ldr	r0, [pc, #276]	; (d5678 <_Z18particleInitializev+0x1d0>)
   d5564:	f005 fed0 	bl	db308 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5568:	4a44      	ldr	r2, [pc, #272]	; (d567c <_Z18particleInitializev+0x1d4>)
   d556a:	4945      	ldr	r1, [pc, #276]	; (d5680 <_Z18particleInitializev+0x1d8>)
   d556c:	4842      	ldr	r0, [pc, #264]	; (d5678 <_Z18particleInitializev+0x1d0>)
   d556e:	f005 fecb 	bl	db308 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5572:	4a3e      	ldr	r2, [pc, #248]	; (d566c <_Z18particleInitializev+0x1c4>)
   d5574:	4943      	ldr	r1, [pc, #268]	; (d5684 <_Z18particleInitializev+0x1dc>)
   d5576:	4840      	ldr	r0, [pc, #256]	; (d5678 <_Z18particleInitializev+0x1d0>)
   d5578:	f005 fec6 	bl	db308 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (!digitalRead(BUTTON_PIN)) {
   d557c:	4b42      	ldr	r3, [pc, #264]	; (d5688 <_Z18particleInitializev+0x1e0>)
   d557e:	8818      	ldrh	r0, [r3, #0]
   d5580:	f008 fd4c 	bl	de01c <digitalRead>
   d5584:	b910      	cbnz	r0, d558c <_Z18particleInitializev+0xe4>
    sysStatus.lowPowerMode = false;     // If the user button is held down while resetting - diable sleep
   d5586:	7228      	strb	r0, [r5, #8]
        spark_cloud_flag_connect();
   d5588:	f005 fbe6 	bl	dad58 <spark_cloud_flag_connect>
	if (!Time.isValid()) {							// I need to make sure the time is valid here.
   d558c:	f008 fae6 	bl	ddb5c <_ZN9TimeClass7isValidEv>
   d5590:	4604      	mov	r4, r0
   d5592:	bb90      	cbnz	r0, d55fa <_Z18particleInitializev+0x152>
   d5594:	f005 fbe0 	bl	dad58 <spark_cloud_flag_connect>
        return hal_timer_millis(nullptr);
   d5598:	4620      	mov	r0, r4
   d559a:	f005 f913 	bl	da7c4 <hal_timer_millis>
        while (_while() && !_condition()) {
   d559e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d568c <_Z18particleInitializev+0x1e4>
        return hal_timer_millis(nullptr);
   d55a2:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d55a4:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d55a8:	2000      	movs	r0, #0
   d55aa:	f005 f90b 	bl	da7c4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d55ae:	ebb0 060a 	subs.w	r6, r0, sl
   d55b2:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d55b6:	45b9      	cmp	r9, r7
   d55b8:	bf08      	it	eq
   d55ba:	45b0      	cmpeq	r8, r6
   d55bc:	d305      	bcc.n	d55ca <_Z18particleInitializev+0x122>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d55be:	f005 fbd3 	bl	dad68 <spark_cloud_flag_connected>
   d55c2:	b910      	cbnz	r0, d55ca <_Z18particleInitializev+0x122>
            spark_process();
   d55c4:	f005 fbc0 	bl	dad48 <spark_process>
        while (_while() && !_condition()) {
   d55c8:	e7ee      	b.n	d55a8 <_Z18particleInitializev+0x100>
   d55ca:	f005 fbcd 	bl	dad68 <spark_cloud_flag_connected>
		if (waitFor(Particle.connected, 600000)) {	// Connect to Particle
   d55ce:	b1a0      	cbz	r0, d55fa <_Z18particleInitializev+0x152>
			sysStatus.lastConnection = Time.now();			// Record the last connection time
   d55d0:	f008 fae1 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d55d4:	6168      	str	r0, [r5, #20]
   d55d6:	f005 fbc7 	bl	dad68 <spark_cloud_flag_connected>
        if (!connected()) {
   d55da:	b110      	cbz	r0, d55e2 <_Z18particleInitializev+0x13a>
        return spark_sync_time(NULL);
   d55dc:	2000      	movs	r0, #0
   d55de:	f005 fbd3 	bl	dad88 <spark_sync_time>
			waitUntil(Particle.syncTimeDone);		// Make sure sync is complete
   d55e2:	f7ff fc77 	bl	d4ed4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d55e6:	b910      	cbnz	r0, d55ee <_Z18particleInitializev+0x146>
            spark_process();
   d55e8:	f005 fbae 	bl	dad48 <spark_process>
        while (_while() && !_condition()) {
   d55ec:	e7f9      	b.n	d55e2 <_Z18particleInitializev+0x13a>
   d55ee:	f7ff fc71 	bl	d4ed4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
			if (sysStatus.lowPowerMode) disconnectFromParticle();
   d55f2:	7a2b      	ldrb	r3, [r5, #8]
   d55f4:	b10b      	cbz	r3, d55fa <_Z18particleInitializev+0x152>
   d55f6:	f7ff feb1 	bl	d535c <_Z22disconnectFromParticlev>
  takeMeasurements();                               // Initialize sensor values
   d55fa:	f000 fa1b 	bl	d5a34 <_Z16takeMeasurementsv>
}
   d55fe:	b00c      	add	sp, #48	; 0x30
   d5600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5604:	000df684 	.word	0x000df684
   d5608:	000df68c 	.word	0x000df68c
   d560c:	000df690 	.word	0x000df690
   d5610:	000df699 	.word	0x000df699
   d5614:	000df6a1 	.word	0x000df6a1
   d5618:	2003e220 	.word	0x2003e220
   d561c:	000df6ad 	.word	0x000df6ad
   d5620:	000df6bf 	.word	0x000df6bf
   d5624:	2003e570 	.word	0x2003e570
   d5628:	000df6b3 	.word	0x000df6b3
   d562c:	000df679 	.word	0x000df679
   d5630:	000df675 	.word	0x000df675
   d5634:	000df6ed 	.word	0x000df6ed
   d5638:	2003db39 	.word	0x2003db39
   d563c:	000df6fc 	.word	0x000df6fc
   d5640:	2003dbfc 	.word	0x2003dbfc
   d5644:	000df704 	.word	0x000df704
   d5648:	2003e204 	.word	0x2003e204
   d564c:	000df70b 	.word	0x000df70b
   d5650:	2003e200 	.word	0x2003e200
   d5654:	000df716 	.word	0x000df716
   d5658:	000d4ef1 	.word	0x000d4ef1
   d565c:	000d4ead 	.word	0x000d4ead
   d5660:	000df725 	.word	0x000df725
   d5664:	000df5f1 	.word	0x000df5f1
   d5668:	000df67c 	.word	0x000df67c
   d566c:	000df739 	.word	0x000df739
   d5670:	000df742 	.word	0x000df742
   d5674:	000d5069 	.word	0x000d5069
   d5678:	000db2dd 	.word	0x000db2dd
   d567c:	000df750 	.word	0x000df750
   d5680:	000d5029 	.word	0x000d5029
   d5684:	000d5121 	.word	0x000d5121
   d5688:	000df4b2 	.word	0x000df4b2
   d568c:	000927bf 	.word	0x000927bf

000d5690 <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   d5690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5692:	f005 fb69 	bl	dad68 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d5696:	b1d8      	cbz	r0, d56d0 <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5698:	4b18      	ldr	r3, [pc, #96]	; (d56fc <_Z18loadSystemDefaultsv+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d569a:	4a19      	ldr	r2, [pc, #100]	; (d5700 <_Z18loadSystemDefaultsv+0x70>)
   d569c:	781b      	ldrb	r3, [r3, #0]
   d569e:	f88d 3000 	strb.w	r3, [sp]
   d56a2:	4918      	ldr	r1, [pc, #96]	; (d5704 <_Z18loadSystemDefaultsv+0x74>)
   d56a4:	233c      	movs	r3, #60	; 0x3c
   d56a6:	a802      	add	r0, sp, #8
   d56a8:	f005 ff3a 	bl	db520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d56ac:	9c03      	ldr	r4, [sp, #12]
   d56ae:	b17c      	cbz	r4, d56d0 <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   d56b0:	6863      	ldr	r3, [r4, #4]
   d56b2:	3b01      	subs	r3, #1
   d56b4:	6063      	str	r3, [r4, #4]
   d56b6:	b95b      	cbnz	r3, d56d0 <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   d56b8:	6823      	ldr	r3, [r4, #0]
   d56ba:	4620      	mov	r0, r4
   d56bc:	689b      	ldr	r3, [r3, #8]
   d56be:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d56c0:	68a3      	ldr	r3, [r4, #8]
   d56c2:	3b01      	subs	r3, #1
   d56c4:	60a3      	str	r3, [r4, #8]
   d56c6:	b91b      	cbnz	r3, d56d0 <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   d56c8:	6823      	ldr	r3, [r4, #0]
   d56ca:	4620      	mov	r0, r4
   d56cc:	68db      	ldr	r3, [r3, #12]
   d56ce:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   d56d0:	490d      	ldr	r1, [pc, #52]	; (d5708 <_Z18loadSystemDefaultsv+0x78>)
   d56d2:	480e      	ldr	r0, [pc, #56]	; (d570c <_Z18loadSystemDefaultsv+0x7c>)
   d56d4:	f7fe fcf8 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.nodeNumber = 2;
   d56d8:	4b0d      	ldr	r3, [pc, #52]	; (d5710 <_Z18loadSystemDefaultsv+0x80>)
   d56da:	2202      	movs	r2, #2
   d56dc:	805a      	strh	r2, [r3, #2]
  sysStatus.structuresVersion = 1;
   d56de:	4a0d      	ldr	r2, [pc, #52]	; (d5714 <_Z18loadSystemDefaultsv+0x84>)
   d56e0:	605a      	str	r2, [r3, #4]
  sysStatus.firmwareRelease = 1;
  sysStatus.verboseMode = false;
  sysStatus.solarPowerMode = true;
  sysStatus.lowPowerMode = true;
   d56e2:	2201      	movs	r2, #1
   d56e4:	721a      	strb	r2, [r3, #8]
  sysStatus.resetCount = 0;
  sysStatus.lastHookResponse = 0;
  sysStatus.frequencyMinutes = 60;
   d56e6:	213c      	movs	r1, #60	; 0x3c
  sysStatus.resetCount = 0;
   d56e8:	2200      	movs	r2, #0
  sysStatus.lastHookResponse = 0;
   d56ea:	e9c3 2203 	strd	r2, r2, [r3, #12]
  sysStatus.frequencyMinutes = 60;
   d56ee:	8399      	strh	r1, [r3, #28]
  sysStatus.lastAlertCode = 0;
   d56f0:	779a      	strb	r2, [r3, #30]
  sysStatus.lastAlertTime = 0;
   d56f2:	621a      	str	r2, [r3, #32]
  sysStatus.verizonSIM = false;
   d56f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   d56f8:	b004      	add	sp, #16
   d56fa:	bd10      	pop	{r4, pc}
   d56fc:	2003e1e8 	.word	0x2003e1e8
   d5700:	000df790 	.word	0x000df790
   d5704:	000df6f7 	.word	0x000df6f7
   d5708:	000df7a8 	.word	0x000df7a8
   d570c:	2003e570 	.word	0x2003e570
   d5710:	2003e220 	.word	0x2003e220
   d5714:	01000101 	.word	0x01000101

000d5718 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d5718:	4b01      	ldr	r3, [pc, #4]	; (d5720 <_GLOBAL__sub_I_sysStatus+0x8>)
   d571a:	2201      	movs	r2, #1
   d571c:	701a      	strb	r2, [r3, #0]
   d571e:	4770      	bx	lr
   d5720:	2003e1e8 	.word	0x2003e1e8

000d5724 <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d5724:	b570      	push	{r4, r5, r6, lr}
  if (Time.now() - lastCheckTime) {          // Check once a second
   d5726:	4c32      	ldr	r4, [pc, #200]	; (d57f0 <_Z17storageObjectLoopv+0xcc>)
   d5728:	f008 fa35 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d572c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d5730:	17c1      	asrs	r1, r0, #31
   d5732:	4299      	cmp	r1, r3
   d5734:	bf08      	it	eq
   d5736:	4290      	cmpeq	r0, r2
   d5738:	d058      	beq.n	d57ec <_Z17storageObjectLoopv+0xc8>
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d573a:	f008 fa2c 	bl	ddb96 <_ZN9TimeClass3nowEv>
                      std::hash<uint32_t>{}(sysStatus.lastHookResponse) + \
   d573e:	4d2d      	ldr	r5, [pc, #180]	; (d57f4 <_Z17storageObjectLoopv+0xd0>)
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d5740:	4e2d      	ldr	r6, [pc, #180]	; (d57f8 <_Z17storageObjectLoopv+0xd4>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d5742:	17c1      	asrs	r1, r0, #31
   d5744:	e9c4 0100 	strd	r0, r1, [r4]
                      std::hash<byte>{}(sysStatus.lastAlertCode)+ \
   d5748:	e9d5 3404 	ldrd	r3, r4, [r5, #16]
   d574c:	441c      	add	r4, r3
   d574e:	6a2b      	ldr	r3, [r5, #32]
   d5750:	441c      	add	r4, r3

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d5752:	882b      	ldrh	r3, [r5, #0]
   d5754:	441c      	add	r4, r3
   d5756:	886b      	ldrh	r3, [r5, #2]
   d5758:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d575a:	792b      	ldrb	r3, [r5, #4]
   d575c:	441c      	add	r4, r3
   d575e:	796b      	ldrb	r3, [r5, #5]
   d5760:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d5762:	79ab      	ldrb	r3, [r5, #6]
   d5764:	441c      	add	r4, r3
   d5766:	79eb      	ldrb	r3, [r5, #7]
   d5768:	441c      	add	r4, r3
   d576a:	7a2b      	ldrb	r3, [r5, #8]
   d576c:	441c      	add	r4, r3
   d576e:	68eb      	ldr	r3, [r5, #12]
   d5770:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d5772:	8b2b      	ldrh	r3, [r5, #24]
   d5774:	441c      	add	r4, r3
   d5776:	8bab      	ldrh	r3, [r5, #28]
   d5778:	441c      	add	r4, r3
   d577a:	8b6b      	ldrh	r3, [r5, #26]
   d577c:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d577e:	7fab      	ldrb	r3, [r5, #30]
   d5780:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d5782:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
                      std::hash<bool>{}(sysStatus.verizonSIM);
   d5786:	441c      	add	r4, r3
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d5788:	6833      	ldr	r3, [r6, #0]
   d578a:	429c      	cmp	r4, r3
   d578c:	d02c      	beq.n	d57e8 <_Z17storageObjectLoopv+0xc4>
      Log.info("sysStaus object stored and hash updated");
   d578e:	491b      	ldr	r1, [pc, #108]	; (d57fc <_Z17storageObjectLoopv+0xd8>)
   d5790:	481b      	ldr	r0, [pc, #108]	; (d5800 <_Z17storageObjectLoopv+0xdc>)
   d5792:	f7fe fc99 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5796:	481b      	ldr	r0, [pc, #108]	; (d5804 <_Z17storageObjectLoopv+0xe0>)
   d5798:	2328      	movs	r3, #40	; 0x28
   d579a:	462a      	mov	r2, r5
   d579c:	2101      	movs	r1, #1
   d579e:	f002 fbb0 	bl	d7f02 <_ZN6MB85RC9writeDataEjPKhj>
      lastSysStatusHash = sysStatusHash;
   d57a2:	6034      	str	r4, [r6, #0]
      returnValue = true;                           // In case I want to test whether values changed
   d57a4:	2001      	movs	r0, #1
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d57a6:	4d18      	ldr	r5, [pc, #96]	; (d5808 <_Z17storageObjectLoopv+0xe4>)
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d57a8:	4e18      	ldr	r6, [pc, #96]	; (d580c <_Z17storageObjectLoopv+0xe8>)
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d57aa:	686b      	ldr	r3, [r5, #4]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d57ac:	782c      	ldrb	r4, [r5, #0]
   d57ae:	441c      	add	r4, r3
   d57b0:	7a2b      	ldrb	r3, [r5, #8]
                      std::hash<int>{}(current.stateOfCharge)+ \
   d57b2:	441c      	add	r4, r3
                      std::hash<byte>{}(current.batteryState) + \
   d57b4:	692b      	ldr	r3, [r5, #16]
   d57b6:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d57b8:	8b2b      	ldrh	r3, [r5, #24]
                      std::hash<time_t>{}(current.lastSampleTime) + \
   d57ba:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d57bc:	7eab      	ldrb	r3, [r5, #26]
                      std::hash<uint16_t>{}(current.rssi) + \
   d57be:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d57c0:	8bab      	ldrh	r3, [r5, #28]
                      std::hash<uint8_t>{}(current.messageNumber) + \
   d57c2:	441c      	add	r4, r3
   d57c4:	8beb      	ldrh	r3, [r5, #30]
                      std::hash<uint16_t>{}(current.daily);
   d57c6:	441c      	add	r4, r3
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d57c8:	6833      	ldr	r3, [r6, #0]
   d57ca:	429c      	cmp	r4, r3
   d57cc:	d00b      	beq.n	d57e6 <_Z17storageObjectLoopv+0xc2>
      Log.info("current object stored and hash updated");
   d57ce:	4910      	ldr	r1, [pc, #64]	; (d5810 <_Z17storageObjectLoopv+0xec>)
   d57d0:	480b      	ldr	r0, [pc, #44]	; (d5800 <_Z17storageObjectLoopv+0xdc>)
   d57d2:	f7fe fc79 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d57d6:	480b      	ldr	r0, [pc, #44]	; (d5804 <_Z17storageObjectLoopv+0xe0>)
   d57d8:	2320      	movs	r3, #32
   d57da:	462a      	mov	r2, r5
   d57dc:	2150      	movs	r1, #80	; 0x50
   d57de:	f002 fb90 	bl	d7f02 <_ZN6MB85RC9writeDataEjPKhj>
      lastCurrentHash = currentHash;
   d57e2:	6034      	str	r4, [r6, #0]
      returnValue = true;
   d57e4:	2001      	movs	r0, #1
}
   d57e6:	bd70      	pop	{r4, r5, r6, pc}
  bool returnValue = false;
   d57e8:	2000      	movs	r0, #0
   d57ea:	e7dc      	b.n	d57a6 <_Z17storageObjectLoopv+0x82>
   d57ec:	2000      	movs	r0, #0
   d57ee:	e7fa      	b.n	d57e6 <_Z17storageObjectLoopv+0xc2>
   d57f0:	2003e1f0 	.word	0x2003e1f0
   d57f4:	2003e220 	.word	0x2003e220
   d57f8:	2003e1fc 	.word	0x2003e1fc
   d57fc:	000df7c0 	.word	0x000df7c0
   d5800:	2003e570 	.word	0x2003e570
   d5804:	2003e078 	.word	0x2003e078
   d5808:	2003e200 	.word	0x2003e200
   d580c:	2003e1f8 	.word	0x2003e1f8
   d5810:	000df7e8 	.word	0x000df7e8

000d5814 <_Z18storageObjectStartv>:
bool storageObjectStart() {
   d5814:	b513      	push	{r0, r1, r4, lr}
  Log.info("Initializing the Object Store");
   d5816:	4921      	ldr	r1, [pc, #132]	; (d589c <_Z18storageObjectStartv+0x88>)
   d5818:	4821      	ldr	r0, [pc, #132]	; (d58a0 <_Z18storageObjectStartv+0x8c>)
   d581a:	f7fe fc55 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  fram.begin();                                     // Initialize the FRAM module
   d581e:	4821      	ldr	r0, [pc, #132]	; (d58a4 <_Z18storageObjectStartv+0x90>)
   d5820:	f002 fae2 	bl	d7de8 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5824:	481f      	ldr	r0, [pc, #124]	; (d58a4 <_Z18storageObjectStartv+0x90>)
   d5826:	2301      	movs	r3, #1
   d5828:	f10d 0207 	add.w	r2, sp, #7
   d582c:	2100      	movs	r1, #0
   d582e:	f002 fb1d 	bl	d7e6c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   d5832:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d5836:	2c01      	cmp	r4, #1
   d5838:	d01c      	beq.n	d5874 <_Z18storageObjectStartv+0x60>
    Log.info("FRAM mismatch, erasing and locafing defaults if it checks out");
   d583a:	491b      	ldr	r1, [pc, #108]	; (d58a8 <_Z18storageObjectStartv+0x94>)
   d583c:	4818      	ldr	r0, [pc, #96]	; (d58a0 <_Z18storageObjectStartv+0x8c>)
   d583e:	f7fe fc43 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    fram.erase();                                   // Reset the FRAM to correct the issue
   d5842:	4818      	ldr	r0, [pc, #96]	; (d58a4 <_Z18storageObjectStartv+0x90>)
   d5844:	f002 fada 	bl	d7dfc <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5848:	4a18      	ldr	r2, [pc, #96]	; (d58ac <_Z18storageObjectStartv+0x98>)
   d584a:	4816      	ldr	r0, [pc, #88]	; (d58a4 <_Z18storageObjectStartv+0x90>)
   d584c:	2304      	movs	r3, #4
   d584e:	2100      	movs	r1, #0
   d5850:	f002 fb57 	bl	d7f02 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5854:	4813      	ldr	r0, [pc, #76]	; (d58a4 <_Z18storageObjectStartv+0x90>)
   d5856:	2301      	movs	r3, #1
   d5858:	f10d 0207 	add.w	r2, sp, #7
   d585c:	2100      	movs	r1, #0
   d585e:	f002 fb05 	bl	d7e6c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d5862:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d5866:	2c01      	cmp	r4, #1
   d5868:	d115      	bne.n	d5896 <_Z18storageObjectStartv+0x82>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   d586a:	f7ff ff11 	bl	d5690 <_Z18loadSystemDefaultsv>
   d586e:	4620      	mov	r0, r4
}
   d5870:	b002      	add	sp, #8
   d5872:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   d5874:	490e      	ldr	r1, [pc, #56]	; (d58b0 <_Z18storageObjectStartv+0x9c>)
   d5876:	480a      	ldr	r0, [pc, #40]	; (d58a0 <_Z18storageObjectStartv+0x8c>)
   d5878:	f7fe fc26 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d587c:	4621      	mov	r1, r4
   d587e:	4a0d      	ldr	r2, [pc, #52]	; (d58b4 <_Z18storageObjectStartv+0xa0>)
   d5880:	4808      	ldr	r0, [pc, #32]	; (d58a4 <_Z18storageObjectStartv+0x90>)
   d5882:	2328      	movs	r3, #40	; 0x28
   d5884:	f002 faf2 	bl	d7e6c <_ZN6MB85RC8readDataEjPhj>
   d5888:	4a0b      	ldr	r2, [pc, #44]	; (d58b8 <_Z18storageObjectStartv+0xa4>)
   d588a:	4806      	ldr	r0, [pc, #24]	; (d58a4 <_Z18storageObjectStartv+0x90>)
   d588c:	2320      	movs	r3, #32
   d588e:	2150      	movs	r1, #80	; 0x50
   d5890:	f002 faec 	bl	d7e6c <_ZN6MB85RC8readDataEjPhj>
   d5894:	e7eb      	b.n	d586e <_Z18storageObjectStartv+0x5a>
      return false;
   d5896:	2000      	movs	r0, #0
   d5898:	e7ea      	b.n	d5870 <_Z18storageObjectStartv+0x5c>
   d589a:	bf00      	nop
   d589c:	000df80f 	.word	0x000df80f
   d58a0:	2003e570 	.word	0x2003e570
   d58a4:	2003e078 	.word	0x2003e078
   d58a8:	000df82d 	.word	0x000df82d
   d58ac:	000df890 	.word	0x000df890
   d58b0:	000df86b 	.word	0x000df86b
   d58b4:	2003e220 	.word	0x2003e220
   d58b8:	2003e200 	.word	0x2003e200

000d58bc <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d58bc:	ee07 0a90 	vmov	s15, r0
   d58c0:	ed9f 7a09 	vldr	s14, [pc, #36]	; d58e8 <_Z17tmp36TemperatureCi+0x2c>
   d58c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d58c8:	ee67 7a87 	vmul.f32	s15, s15, s14
   d58cc:	ed9f 7a07 	vldr	s14, [pc, #28]	; d58ec <_Z17tmp36TemperatureCi+0x30>
   d58d0:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   d58d4:	eddf 7a06 	vldr	s15, [pc, #24]	; d58f0 <_Z17tmp36TemperatureCi+0x34>
   d58d8:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   d58dc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   d58e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d58e4:	4770      	bx	lr
   d58e6:	bf00      	nop
   d58e8:	454e4000 	.word	0x454e4000
   d58ec:	457ff000 	.word	0x457ff000
   d58f0:	43fa0000 	.word	0x43fa0000

000d58f4 <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   d58f4:	b510      	push	{r4, lr}
   d58f6:	b086      	sub	sp, #24
    const diag_source* src = nullptr;
   d58f8:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d58fa:	a902      	add	r1, sp, #8
   d58fc:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d58fe:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d5900:	f005 f998 	bl	dac34 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d5904:	b9b8      	cbnz	r0, d5936 <_Z12batteryStatev+0x42>
    return get(src, val);
   d5906:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d5908:	b10c      	cbz	r4, d590e <_Z12batteryStatev+0x1a>
   d590a:	6923      	ldr	r3, [r4, #16]
   d590c:	b923      	cbnz	r3, d5918 <_Z12batteryStatev+0x24>
   d590e:	4a19      	ldr	r2, [pc, #100]	; (d5974 <_Z12batteryStatev+0x80>)
   d5910:	2100      	movs	r1, #0
   d5912:	200a      	movs	r0, #10
   d5914:	f005 f966 	bl	dabe4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d5918:	2300      	movs	r3, #0
   d591a:	f8ad 300e 	strh.w	r3, [sp, #14]
   d591e:	230c      	movs	r3, #12
   d5920:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5924:	ab01      	add	r3, sp, #4
   d5926:	9304      	str	r3, [sp, #16]
   d5928:	2304      	movs	r3, #4
   d592a:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d592c:	aa03      	add	r2, sp, #12
   d592e:	6923      	ldr	r3, [r4, #16]
   d5930:	2101      	movs	r1, #1
   d5932:	4620      	mov	r0, r4
   d5934:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d5936:	4a10      	ldr	r2, [pc, #64]	; (d5978 <_Z12batteryStatev+0x84>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d5938:	4c10      	ldr	r4, [pc, #64]	; (d597c <_Z12batteryStatev+0x88>)
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d593a:	7a12      	ldrb	r2, [r2, #8]
        if (r < 0) {
   d593c:	2800      	cmp	r0, #0
        return val;
   d593e:	bfa8      	it	ge
   d5940:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d5942:	7220      	strb	r0, [r4, #8]
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d5944:	b132      	cbz	r2, d5954 <_Z12batteryStatev+0x60>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d5946:	480e      	ldr	r0, [pc, #56]	; (d5980 <_Z12batteryStatev+0x8c>)
   d5948:	f006 f858 	bl	db9fc <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d594c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5950:	f005 fb22 	bl	daf98 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d5954:	480a      	ldr	r0, [pc, #40]	; (d5980 <_Z12batteryStatev+0x8c>)
   d5956:	f005 fff1 	bl	db93c <_ZN9FuelGauge6getSoCEv>
   d595a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d595e:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   d5962:	283c      	cmp	r0, #60	; 0x3c
   d5964:	bfd4      	ite	le
   d5966:	2000      	movle	r0, #0
   d5968:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d596a:	edc4 7a01 	vstr	s15, [r4, #4]
}
   d596e:	b006      	add	sp, #24
   d5970:	bd10      	pop	{r4, pc}
   d5972:	bf00      	nop
   d5974:	000da795 	.word	0x000da795
   d5978:	2003e220 	.word	0x2003e220
   d597c:	2003e200 	.word	0x2003e200
   d5980:	2003e248 	.word	0x2003e248

000d5984 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   d5984:	b537      	push	{r0, r1, r2, r4, r5, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5986:	4d0c      	ldr	r5, [pc, #48]	; (d59b8 <_Z16isItSafeToChargev+0x34>)
  PMIC pmic(true);
   d5988:	2101      	movs	r1, #1
   d598a:	a801      	add	r0, sp, #4
   d598c:	f007 fbb1 	bl	dd0f2 <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5990:	782b      	ldrb	r3, [r5, #0]
   d5992:	2b25      	cmp	r3, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d5994:	a801      	add	r0, sp, #4
   d5996:	f04f 0401 	mov.w	r4, #1
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d599a:	d909      	bls.n	d59b0 <_Z16isItSafeToChargev+0x2c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d599c:	f007 fc3c 	bl	dd218 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d59a0:	722c      	strb	r4, [r5, #8]
    return false;
   d59a2:	2400      	movs	r4, #0
  PMIC pmic(true);
   d59a4:	a801      	add	r0, sp, #4
   d59a6:	f007 fbb3 	bl	dd110 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   d59aa:	4620      	mov	r0, r4
   d59ac:	b003      	add	sp, #12
   d59ae:	bd30      	pop	{r4, r5, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   d59b0:	f007 fc1b 	bl	dd1ea <_ZN4PMIC14enableChargingEv>
    return true;
   d59b4:	e7f6      	b.n	d59a4 <_Z16isItSafeToChargev+0x20>
   d59b6:	bf00      	nop
   d59b8:	2003e200 	.word	0x2003e200

000d59bc <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   d59bc:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d59be:	4d19      	ldr	r5, [pc, #100]	; (d5a24 <_Z17getSignalStrengthv+0x68>)
   d59c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d59c2:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d59c4:	ac04      	add	r4, sp, #16
   d59c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59cc:	e895 0003 	ldmia.w	r5, {r0, r1}
   d59d0:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d59d4:	4914      	ldr	r1, [pc, #80]	; (d5a28 <_Z17getSignalStrengthv+0x6c>)
   d59d6:	a80e      	add	r0, sp, #56	; 0x38
   d59d8:	f005 fb38 	bl	db04c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d59dc:	a80e      	add	r0, sp, #56	; 0x38
   d59de:	f005 fb88 	bl	db0f2 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d59e2:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d59e4:	a80e      	add	r0, sp, #56	; 0x38
   d59e6:	f005 fb9f 	bl	db128 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d59ea:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d59ec:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d59f0:	f005 fbca 	bl	db188 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d59f4:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d59f6:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d59fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d59fe:	f008 fd25 	bl	de44c <__aeabi_f2d>
   d5a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5a06:	4628      	mov	r0, r5
   d5a08:	f008 fd20 	bl	de44c <__aeabi_f2d>
   d5a0c:	e9cd 0100 	strd	r0, r1, [sp]
   d5a10:	4a06      	ldr	r2, [pc, #24]	; (d5a2c <_Z17getSignalStrengthv+0x70>)
   d5a12:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d5a16:	4806      	ldr	r0, [pc, #24]	; (d5a30 <_Z17getSignalStrengthv+0x74>)
   d5a18:	2140      	movs	r1, #64	; 0x40
   d5a1a:	f005 fa6d 	bl	daef8 <snprintf>
   d5a1e:	b019      	add	sp, #100	; 0x64
   d5a20:	bd30      	pop	{r4, r5, pc}
   d5a22:	bf00      	nop
   d5a24:	000df90c 	.word	0x000df90c
   d5a28:	2003e49c 	.word	0x2003e49c
   d5a2c:	000df8d2 	.word	0x000df8d2
   d5a30:	2003dbfc 	.word	0x2003dbfc

000d5a34 <_Z16takeMeasurementsv>:
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5a34:	4b10      	ldr	r3, [pc, #64]	; (d5a78 <_Z16takeMeasurementsv+0x44>)
bool takeMeasurements() { 
   d5a36:	b510      	push	{r4, lr}
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5a38:	8818      	ldrh	r0, [r3, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d5a3a:	4c10      	ldr	r4, [pc, #64]	; (d5a7c <_Z16takeMeasurementsv+0x48>)
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5a3c:	f008 fb01 	bl	de042 <analogRead>
   d5a40:	f7ff ff3c 	bl	d58bc <_Z17tmp36TemperatureCi>
   d5a44:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d5a48:	4a0d      	ldr	r2, [pc, #52]	; (d5a80 <_Z16takeMeasurementsv+0x4c>)
   d5a4a:	ee17 3a90 	vmov	r3, s15
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d5a4e:	2110      	movs	r1, #16
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5a50:	7013      	strb	r3, [r2, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d5a52:	4620      	mov	r0, r4
   d5a54:	b2db      	uxtb	r3, r3
   d5a56:	4a0b      	ldr	r2, [pc, #44]	; (d5a84 <_Z16takeMeasurementsv+0x50>)
   d5a58:	f005 fa4e 	bl	daef8 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   d5a5c:	490a      	ldr	r1, [pc, #40]	; (d5a88 <_Z16takeMeasurementsv+0x54>)
   d5a5e:	480b      	ldr	r0, [pc, #44]	; (d5a8c <_Z16takeMeasurementsv+0x58>)
   d5a60:	4622      	mov	r2, r4
   d5a62:	f7fe fb31 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   d5a66:	f7ff ff45 	bl	d58f4 <_Z12batteryStatev>
    isItSafeToCharge();
   d5a6a:	f7ff ff8b 	bl	d5984 <_Z16isItSafeToChargev>
    getSignalStrength();
   d5a6e:	f7ff ffa5 	bl	d59bc <_Z17getSignalStrengthv>
}
   d5a72:	2001      	movs	r0, #1
   d5a74:	bd10      	pop	{r4, pc}
   d5a76:	bf00      	nop
   d5a78:	000df4b8 	.word	0x000df4b8
   d5a7c:	2003dbec 	.word	0x2003dbec
   d5a80:	2003e200 	.word	0x2003e200
   d5a84:	000df8eb 	.word	0x000df8eb
   d5a88:	000df8f0 	.word	0x000df8f0
   d5a8c:	2003e570 	.word	0x2003e570

000d5a90 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   d5a90:	4801      	ldr	r0, [pc, #4]	; (d5a98 <_GLOBAL__sub_I_batteryContext+0x8>)
   d5a92:	2100      	movs	r1, #0
   d5a94:	f005 bf04 	b.w	db8a0 <_ZN9FuelGaugeC1Eb>
   d5a98:	2003e248 	.word	0x2003e248

000d5a9c <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d5a9c:	4770      	bx	lr

000d5a9e <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d5a9e:	b510      	push	{r4, lr}
}
   d5aa0:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d5aa2:	4604      	mov	r4, r0
}
   d5aa4:	f008 fb5e 	bl	de164 <_ZdlPvj>
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	bd10      	pop	{r4, pc}

000d5aac <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5aac:	b40e      	push	{r1, r2, r3}
   d5aae:	b510      	push	{r4, lr}
   d5ab0:	b08d      	sub	sp, #52	; 0x34
   d5ab2:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d5ab4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5ab6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5aba:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5abc:	2300      	movs	r3, #0
   d5abe:	2020      	movs	r0, #32
   d5ac0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5ac4:	e9cd 4200 	strd	r4, r2, [sp]
   d5ac8:	2001      	movs	r0, #1
   d5aca:	aa04      	add	r2, sp, #16
   d5acc:	f005 f89a 	bl	dac04 <log_message_v>
}
   d5ad0:	b00d      	add	sp, #52	; 0x34
   d5ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5ad6:	b003      	add	sp, #12
   d5ad8:	4770      	bx	lr

000d5ada <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d5ada:	b40e      	push	{r1, r2, r3}
   d5adc:	b510      	push	{r4, lr}
   d5ade:	b08d      	sub	sp, #52	; 0x34
   d5ae0:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d5ae2:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d5ae4:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5ae8:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5aea:	2300      	movs	r3, #0
   d5aec:	2020      	movs	r0, #32
   d5aee:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5af2:	e9cd 4200 	strd	r4, r2, [sp]
   d5af6:	2032      	movs	r0, #50	; 0x32
   d5af8:	aa04      	add	r2, sp, #16
   d5afa:	f005 f883 	bl	dac04 <log_message_v>
}
   d5afe:	b00d      	add	sp, #52	; 0x34
   d5b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5b04:	b003      	add	sp, #12
   d5b06:	4770      	bx	lr

000d5b08 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5b08:	b510      	push	{r4, lr}
   d5b0a:	7202      	strb	r2, [r0, #8]
   d5b0c:	22ff      	movs	r2, #255	; 0xff
   d5b0e:	8142      	strh	r2, [r0, #10]
   d5b10:	2200      	movs	r2, #0
   d5b12:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d5b16:	6142      	str	r2, [r0, #20]
   d5b18:	7602      	strb	r2, [r0, #24]
   d5b1a:	61c2      	str	r2, [r0, #28]
    instance = this;
   d5b1c:	4a02      	ldr	r2, [pc, #8]	; (d5b28 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5b1e:	4c03      	ldr	r4, [pc, #12]	; (d5b2c <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d5b20:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5b22:	e9c0 4100 	strd	r4, r1, [r0]
}
   d5b26:	bd10      	pop	{r4, pc}
   d5b28:	2003e254 	.word	0x2003e254
   d5b2c:	000dfb38 	.word	0x000dfb38

000d5b30 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d5b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b34:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d5b38:	4604      	mov	r4, r0
   d5b3a:	4689      	mov	r9, r1
   d5b3c:	4616      	mov	r6, r2
   d5b3e:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d5b40:	f1b8 0f00 	cmp.w	r8, #0
   d5b44:	d002      	beq.n	d5b4c <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d5b46:	6840      	ldr	r0, [r0, #4]
   d5b48:	f005 fff2 	bl	dbb30 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5b4c:	7a21      	ldrb	r1, [r4, #8]
   d5b4e:	6860      	ldr	r0, [r4, #4]
   d5b50:	f005 ffcb 	bl	dbaea <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d5b54:	6860      	ldr	r0, [r4, #4]
   d5b56:	6803      	ldr	r3, [r0, #0]
   d5b58:	4649      	mov	r1, r9
   d5b5a:	689b      	ldr	r3, [r3, #8]
   d5b5c:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d5b5e:	6860      	ldr	r0, [r4, #4]
   d5b60:	2100      	movs	r1, #0
   d5b62:	f005 ffe1 	bl	dbb28 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5b66:	4605      	mov	r5, r0
   d5b68:	bb00      	cbnz	r0, d5bac <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5b6a:	2301      	movs	r3, #1
   d5b6c:	7a21      	ldrb	r1, [r4, #8]
   d5b6e:	6860      	ldr	r0, [r4, #4]
   d5b70:	463a      	mov	r2, r7
   d5b72:	f005 ffa8 	bl	dbac6 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d5b76:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5b78:	4603      	mov	r3, r0
        if (count == num) {
   d5b7a:	d109      	bne.n	d5b90 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d5b7c:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d5b7e:	42be      	cmp	r6, r7
   d5b80:	d01c      	beq.n	d5bbc <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d5b82:	6860      	ldr	r0, [r4, #4]
   d5b84:	6803      	ldr	r3, [r0, #0]
   d5b86:	695b      	ldr	r3, [r3, #20]
   d5b88:	4798      	blx	r3
   d5b8a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d5b8e:	e7f6      	b.n	d5b7e <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d5b90:	490b      	ldr	r1, [pc, #44]	; (d5bc0 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d5b92:	480c      	ldr	r0, [pc, #48]	; (d5bc4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5b94:	464a      	mov	r2, r9
   d5b96:	f7ff ffa0 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d5b9a:	f1b8 0f00 	cmp.w	r8, #0
   d5b9e:	d002      	beq.n	d5ba6 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d5ba0:	6860      	ldr	r0, [r4, #4]
   d5ba2:	f005 ffce 	bl	dbb42 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d5ba6:	4628      	mov	r0, r5
   d5ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d5bac:	4603      	mov	r3, r0
   d5bae:	4906      	ldr	r1, [pc, #24]	; (d5bc8 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d5bb0:	4804      	ldr	r0, [pc, #16]	; (d5bc4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5bb2:	464a      	mov	r2, r9
   d5bb4:	f7ff ff91 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5bb8:	2500      	movs	r5, #0
   d5bba:	e7ee      	b.n	d5b9a <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d5bbc:	2501      	movs	r5, #1
   d5bbe:	e7ec      	b.n	d5b9a <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d5bc0:	000df934 	.word	0x000df934
   d5bc4:	2003e250 	.word	0x2003e250
   d5bc8:	000df959 	.word	0x000df959

000d5bcc <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d5bcc:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d5bce:	9300      	str	r3, [sp, #0]
   d5bd0:	2301      	movs	r3, #1
   d5bd2:	f7ff ffad 	bl	d5b30 <_ZN6AB180513readRegistersEhPhjb>
}
   d5bd6:	b003      	add	sp, #12
   d5bd8:	f85d fb04 	ldr.w	pc, [sp], #4

000d5bdc <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d5bdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d5bde:	8943      	ldrh	r3, [r0, #10]
   d5be0:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d5be2:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d5be4:	d010      	beq.n	d5c08 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5be6:	4e19      	ldr	r6, [pc, #100]	; (d5c4c <_ZN6AB180510detectChipEv+0x70>)
   d5be8:	4d19      	ldr	r5, [pc, #100]	; (d5c50 <_ZN6AB180510detectChipEv+0x74>)
   d5bea:	f004 fddb 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d5bee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d5bf2:	d209      	bcs.n	d5c08 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d5bf4:	8960      	ldrh	r0, [r4, #10]
   d5bf6:	f008 fa11 	bl	de01c <digitalRead>
   d5bfa:	2801      	cmp	r0, #1
   d5bfc:	d004      	beq.n	d5c08 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5bfe:	4631      	mov	r1, r6
   d5c00:	4628      	mov	r0, r5
   d5c02:	f7fe fa61 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5c06:	e7f0      	b.n	d5bea <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d5c08:	2301      	movs	r3, #1
   d5c0a:	f10d 0207 	add.w	r2, sp, #7
   d5c0e:	2128      	movs	r1, #40	; 0x28
   d5c10:	4620      	mov	r0, r4
   d5c12:	f7ff ffdb 	bl	d5bcc <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d5c16:	b930      	cbnz	r0, d5c26 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d5c18:	480d      	ldr	r0, [pc, #52]	; (d5c50 <_ZN6AB180510detectChipEv+0x74>)
   d5c1a:	490e      	ldr	r1, [pc, #56]	; (d5c54 <_ZN6AB180510detectChipEv+0x78>)
   d5c1c:	f7fe fa54 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5c20:	2000      	movs	r0, #0
}
   d5c22:	b002      	add	sp, #8
   d5c24:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d5c26:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5c2a:	2b18      	cmp	r3, #24
   d5c2c:	d1f4      	bne.n	d5c18 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d5c2e:	2301      	movs	r3, #1
   d5c30:	f10d 0207 	add.w	r2, sp, #7
   d5c34:	2129      	movs	r1, #41	; 0x29
   d5c36:	4620      	mov	r0, r4
   d5c38:	f7ff ffc8 	bl	d5bcc <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d5c3c:	2800      	cmp	r0, #0
   d5c3e:	d0eb      	beq.n	d5c18 <_ZN6AB180510detectChipEv+0x3c>
   d5c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5c44:	2b05      	cmp	r3, #5
   d5c46:	d1e7      	bne.n	d5c18 <_ZN6AB180510detectChipEv+0x3c>
   d5c48:	e7eb      	b.n	d5c22 <_ZN6AB180510detectChipEv+0x46>
   d5c4a:	bf00      	nop
   d5c4c:	000df97d 	.word	0x000df97d
   d5c50:	2003e250 	.word	0x2003e250
   d5c54:	000df992 	.word	0x000df992

000d5c58 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d5c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c5c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d5c60:	4604      	mov	r4, r0
   d5c62:	460f      	mov	r7, r1
   d5c64:	4615      	mov	r5, r2
   d5c66:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d5c68:	f1b8 0f00 	cmp.w	r8, #0
   d5c6c:	d002      	beq.n	d5c74 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d5c6e:	6840      	ldr	r0, [r0, #4]
   d5c70:	f005 ff5e 	bl	dbb30 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5c74:	7a21      	ldrb	r1, [r4, #8]
   d5c76:	6860      	ldr	r0, [r4, #4]
   d5c78:	f005 ff37 	bl	dbaea <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d5c7c:	6860      	ldr	r0, [r4, #4]
   d5c7e:	6803      	ldr	r3, [r0, #0]
   d5c80:	4639      	mov	r1, r7
   d5c82:	689b      	ldr	r3, [r3, #8]
   d5c84:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5c86:	442e      	add	r6, r5
   d5c88:	42b5      	cmp	r5, r6
   d5c8a:	6860      	ldr	r0, [r4, #4]
   d5c8c:	d005      	beq.n	d5c9a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d5c8e:	6803      	ldr	r3, [r0, #0]
   d5c90:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c94:	689b      	ldr	r3, [r3, #8]
   d5c96:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5c98:	e7f6      	b.n	d5c88 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d5c9a:	2101      	movs	r1, #1
   d5c9c:	f005 ff44 	bl	dbb28 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5ca0:	4603      	mov	r3, r0
   d5ca2:	b170      	cbz	r0, d5cc2 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d5ca4:	4908      	ldr	r1, [pc, #32]	; (d5cc8 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d5ca6:	4809      	ldr	r0, [pc, #36]	; (d5ccc <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d5ca8:	463a      	mov	r2, r7
   d5caa:	f7ff ff16 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5cae:	2500      	movs	r5, #0
    }

    if (lock) {
   d5cb0:	f1b8 0f00 	cmp.w	r8, #0
   d5cb4:	d002      	beq.n	d5cbc <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d5cb6:	6860      	ldr	r0, [r4, #4]
   d5cb8:	f005 ff43 	bl	dbb42 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d5cbc:	4628      	mov	r0, r5
   d5cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d5cc2:	2501      	movs	r5, #1
   d5cc4:	e7f4      	b.n	d5cb0 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d5cc6:	bf00      	nop
   d5cc8:	000df99f 	.word	0x000df99f
   d5ccc:	2003e250 	.word	0x2003e250

000d5cd0 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d5cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5cd2:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d5cd6:	9300      	str	r3, [sp, #0]
   d5cd8:	f10d 020f 	add.w	r2, sp, #15
   d5cdc:	2301      	movs	r3, #1
   d5cde:	f7ff ffbb 	bl	d5c58 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d5ce2:	b005      	add	sp, #20
   d5ce4:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ce8 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d5ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d5cea:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d5cec:	460c      	mov	r4, r1
   d5cee:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d5cf0:	491a      	ldr	r1, [pc, #104]	; (d5d5c <_ZN6AB18056setWDTEi+0x74>)
   d5cf2:	481b      	ldr	r0, [pc, #108]	; (d5d60 <_ZN6AB18056setWDTEi+0x78>)
   d5cf4:	f7fe f9e8 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d5cf8:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d5cfa:	bfb8      	it	lt
   d5cfc:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d5cfe:	b97c      	cbnz	r4, d5d20 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d5d00:	2301      	movs	r3, #1
   d5d02:	4622      	mov	r2, r4
   d5d04:	211b      	movs	r1, #27
   d5d06:	4628      	mov	r0, r5
   d5d08:	f7ff ffe2 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5d0c:	4915      	ldr	r1, [pc, #84]	; (d5d64 <_ZN6AB18056setWDTEi+0x7c>)
   d5d0e:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d5d10:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5d12:	4813      	ldr	r0, [pc, #76]	; (d5d60 <_ZN6AB18056setWDTEi+0x78>)
   d5d14:	f7ff feca 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d5d18:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d5d1a:	616c      	str	r4, [r5, #20]
}
   d5d1c:	4630      	mov	r0, r6
   d5d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d5d20:	2c03      	cmp	r4, #3
   d5d22:	dd19      	ble.n	d5d58 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5d24:	10a7      	asrs	r7, r4, #2
   d5d26:	2f1f      	cmp	r7, #31
   d5d28:	bfa8      	it	ge
   d5d2a:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5d2c:	00ba      	lsls	r2, r7, #2
   d5d2e:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d5d32:	2301      	movs	r3, #1
   d5d34:	b2d2      	uxtb	r2, r2
   d5d36:	211b      	movs	r1, #27
   d5d38:	4628      	mov	r0, r5
   d5d3a:	f7ff ffc9 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5d3e:	463a      	mov	r2, r7
   d5d40:	4603      	mov	r3, r0
   d5d42:	4909      	ldr	r1, [pc, #36]	; (d5d68 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5d44:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5d46:	4806      	ldr	r0, [pc, #24]	; (d5d60 <_ZN6AB18056setWDTEi+0x78>)
   d5d48:	f7ff feb0 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5d4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d5d50:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d5d52:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5d54:	616f      	str	r7, [r5, #20]
   d5d56:	e7e1      	b.n	d5d1c <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d5d58:	2701      	movs	r7, #1
   d5d5a:	e7e7      	b.n	d5d2c <_ZN6AB18056setWDTEi+0x44>
   d5d5c:	000df9c4 	.word	0x000df9c4
   d5d60:	2003e250 	.word	0x2003e250
   d5d64:	000df9ce 	.word	0x000df9ce
   d5d68:	000df9ea 	.word	0x000df9ea

000d5d6c <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5d6c:	460b      	mov	r3, r1
    if (instance) {
   d5d6e:	4907      	ldr	r1, [pc, #28]	; (d5d8c <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5d70:	4602      	mov	r2, r0
    if (instance) {
   d5d72:	6808      	ldr	r0, [r1, #0]
   d5d74:	b148      	cbz	r0, d5d8a <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d5d76:	2b00      	cmp	r3, #0
   d5d78:	bf08      	it	eq
   d5d7a:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d5d7e:	d104      	bne.n	d5d8a <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d5d80:	68c3      	ldr	r3, [r0, #12]
   d5d82:	b113      	cbz	r3, d5d8a <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d5d84:	2100      	movs	r1, #0
   d5d86:	f7ff bfaf 	b.w	d5ce8 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d5d8a:	4770      	bx	lr
   d5d8c:	2003e254 	.word	0x2003e254

000d5d90 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d5d90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5d94:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5d98:	4605      	mov	r5, r0
   d5d9a:	4616      	mov	r6, r2
   d5d9c:	461f      	mov	r7, r3
    if (lock) {
   d5d9e:	f1b8 0f00 	cmp.w	r8, #0
   d5da2:	d004      	beq.n	d5dae <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d5da4:	6840      	ldr	r0, [r0, #4]
   d5da6:	9101      	str	r1, [sp, #4]
   d5da8:	f005 fec2 	bl	dbb30 <_ZN7TwoWire4lockEv>
   d5dac:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d5dae:	9101      	str	r1, [sp, #4]
   d5db0:	2300      	movs	r3, #0
   d5db2:	f10d 020f 	add.w	r2, sp, #15
   d5db6:	4628      	mov	r0, r5
   d5db8:	f7ff ff08 	bl	d5bcc <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d5dbc:	4604      	mov	r4, r0
   d5dbe:	b160      	cbz	r0, d5dda <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d5dc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5dc4:	ea03 0206 	and.w	r2, r3, r6
   d5dc8:	433a      	orrs	r2, r7
        if (newValue != value) {
   d5dca:	4293      	cmp	r3, r2
   d5dcc:	d005      	beq.n	d5dda <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d5dce:	9901      	ldr	r1, [sp, #4]
   d5dd0:	2300      	movs	r3, #0
   d5dd2:	4628      	mov	r0, r5
   d5dd4:	f7ff ff7c 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
   d5dd8:	4604      	mov	r4, r0
    if (lock) {
   d5dda:	f1b8 0f00 	cmp.w	r8, #0
   d5dde:	d002      	beq.n	d5de6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d5de0:	6868      	ldr	r0, [r5, #4]
   d5de2:	f005 feae 	bl	dbb42 <_ZN7TwoWire6unlockEv>
}
   d5de6:	4620      	mov	r0, r4
   d5de8:	b004      	add	sp, #16
   d5dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5df0 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d5df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5df2:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d5df4:	460a      	mov	r2, r1
   d5df6:	483f      	ldr	r0, [pc, #252]	; (d5ef4 <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d5df8:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d5dfa:	493f      	ldr	r1, [pc, #252]	; (d5ef8 <_ZN6AB180511resetConfigEm+0x108>)
   d5dfc:	f7ff fe56 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d5e00:	6860      	ldr	r0, [r4, #4]
   d5e02:	f005 fe95 	bl	dbb30 <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d5e06:	2300      	movs	r3, #0
   d5e08:	461a      	mov	r2, r3
   d5e0a:	210f      	movs	r1, #15
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	f7ff ff5f 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d5e12:	2300      	movs	r3, #0
   d5e14:	2213      	movs	r2, #19
   d5e16:	2110      	movs	r1, #16
   d5e18:	4620      	mov	r0, r4
   d5e1a:	f7ff ff59 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d5e1e:	2300      	movs	r3, #0
   d5e20:	223c      	movs	r2, #60	; 0x3c
   d5e22:	2111      	movs	r1, #17
   d5e24:	4620      	mov	r0, r4
   d5e26:	f7ff ff53 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d5e2a:	2300      	movs	r3, #0
   d5e2c:	22e0      	movs	r2, #224	; 0xe0
   d5e2e:	2112      	movs	r1, #18
   d5e30:	4620      	mov	r0, r4
   d5e32:	f7ff ff4d 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d5e36:	2300      	movs	r3, #0
   d5e38:	2226      	movs	r2, #38	; 0x26
   d5e3a:	2113      	movs	r1, #19
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	f7ff ff47 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d5e42:	2300      	movs	r3, #0
   d5e44:	461a      	mov	r2, r3
   d5e46:	2117      	movs	r1, #23
   d5e48:	4620      	mov	r0, r4
   d5e4a:	f7ff ff41 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d5e4e:	f015 0301 	ands.w	r3, r5, #1
   d5e52:	d048      	beq.n	d5ee6 <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d5e54:	2300      	movs	r3, #0
   d5e56:	9300      	str	r3, [sp, #0]
   d5e58:	22e3      	movs	r2, #227	; 0xe3
   d5e5a:	2323      	movs	r3, #35	; 0x23
   d5e5c:	2118      	movs	r1, #24
   d5e5e:	4620      	mov	r0, r4
   d5e60:	f7ff ff96 	bl	d5d90 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d5e64:	2300      	movs	r3, #0
   d5e66:	461a      	mov	r2, r3
   d5e68:	2119      	movs	r1, #25
   d5e6a:	4620      	mov	r0, r4
   d5e6c:	f7ff ff30 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d5e70:	2300      	movs	r3, #0
   d5e72:	461a      	mov	r2, r3
   d5e74:	211a      	movs	r1, #26
   d5e76:	4620      	mov	r0, r4
   d5e78:	f7ff ff2a 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d5e7c:	2300      	movs	r3, #0
   d5e7e:	461a      	mov	r2, r3
   d5e80:	211b      	movs	r1, #27
   d5e82:	4620      	mov	r0, r4
   d5e84:	f7ff ff24 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d5e88:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d5e8c:	f04f 0300 	mov.w	r3, #0
   d5e90:	bf0c      	ite	eq
   d5e92:	461a      	moveq	r2, r3
   d5e94:	2288      	movne	r2, #136	; 0x88
   d5e96:	211c      	movs	r1, #28
   d5e98:	4620      	mov	r0, r4
   d5e9a:	f7ff ff19 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d5e9e:	2300      	movs	r3, #0
   d5ea0:	461a      	mov	r2, r3
   d5ea2:	2120      	movs	r1, #32
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	f7ff ff13 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d5eaa:	2300      	movs	r3, #0
   d5eac:	22f0      	movs	r2, #240	; 0xf0
   d5eae:	2121      	movs	r1, #33	; 0x21
   d5eb0:	4620      	mov	r0, r4
   d5eb2:	f7ff ff0d 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d5eb6:	2300      	movs	r3, #0
   d5eb8:	461a      	mov	r2, r3
   d5eba:	2126      	movs	r1, #38	; 0x26
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	f7ff ff07 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d5ec2:	2300      	movs	r3, #0
   d5ec4:	2280      	movs	r2, #128	; 0x80
   d5ec6:	2127      	movs	r1, #39	; 0x27
   d5ec8:	4620      	mov	r0, r4
   d5eca:	f7ff ff01 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d5ece:	2300      	movs	r3, #0
   d5ed0:	461a      	mov	r2, r3
   d5ed2:	2130      	movs	r1, #48	; 0x30
   d5ed4:	4620      	mov	r0, r4
   d5ed6:	f7ff fefb 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d5eda:	6860      	ldr	r0, [r4, #4]
   d5edc:	f005 fe31 	bl	dbb42 <_ZN7TwoWire6unlockEv>
}
   d5ee0:	2001      	movs	r0, #1
   d5ee2:	b003      	add	sp, #12
   d5ee4:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d5ee6:	2223      	movs	r2, #35	; 0x23
   d5ee8:	2118      	movs	r1, #24
   d5eea:	4620      	mov	r0, r4
   d5eec:	f7ff fef0 	bl	d5cd0 <_ZN6AB180513writeRegisterEhhb>
   d5ef0:	e7b8      	b.n	d5e64 <_ZN6AB180511resetConfigEm+0x74>
   d5ef2:	bf00      	nop
   d5ef4:	2003e250 	.word	0x2003e250
   d5ef8:	000dfa0e 	.word	0x000dfa0e

000d5efc <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5efc:	b513      	push	{r0, r1, r4, lr}
   d5efe:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5f00:	f10d 0207 	add.w	r2, sp, #7
   d5f04:	f7ff fe62 	bl	d5bcc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d5f08:	b128      	cbz	r0, d5f16 <_ZN6AB180510isBitClearEhhb+0x1a>
   d5f0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5f0e:	421c      	tst	r4, r3
   d5f10:	bf0c      	ite	eq
   d5f12:	2001      	moveq	r0, #1
   d5f14:	2000      	movne	r0, #0
}
   d5f16:	b002      	add	sp, #8
   d5f18:	bd10      	pop	{r4, pc}

000d5f1a <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5f1a:	b513      	push	{r0, r1, r4, lr}
   d5f1c:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5f1e:	f10d 0207 	add.w	r2, sp, #7
   d5f22:	f7ff fe53 	bl	d5bcc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d5f26:	b128      	cbz	r0, d5f34 <_ZN6AB18058isBitSetEhhb+0x1a>
   d5f28:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5f2c:	421c      	tst	r4, r3
   d5f2e:	bf14      	ite	ne
   d5f30:	2001      	movne	r0, #1
   d5f32:	2000      	moveq	r0, #0
}
   d5f34:	b002      	add	sp, #8
   d5f36:	bd10      	pop	{r4, pc}

000d5f38 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5f38:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d5f3a:	43d2      	mvns	r2, r2
   d5f3c:	9300      	str	r3, [sp, #0]
   d5f3e:	b2d2      	uxtb	r2, r2
   d5f40:	2300      	movs	r3, #0
   d5f42:	f7ff ff25 	bl	d5d90 <_ZN6AB180512maskRegisterEhhhb>
}
   d5f46:	b003      	add	sp, #12
   d5f48:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f4c <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d5f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d5f4e:	2301      	movs	r3, #1
   d5f50:	f10d 0207 	add.w	r2, sp, #7
   d5f54:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d5f56:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d5f58:	f7ff fe38 	bl	d5bcc <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d5f5c:	4605      	mov	r5, r0
   d5f5e:	b938      	cbnz	r0, d5f70 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d5f60:	491e      	ldr	r1, [pc, #120]	; (d5fdc <_ZN6AB180516updateWakeReasonEv+0x90>)
   d5f62:	481f      	ldr	r0, [pc, #124]	; (d5fe0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5f64:	22ad      	movs	r2, #173	; 0xad
   d5f66:	f7ff fdb8 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
}
   d5f6a:	4628      	mov	r0, r5
   d5f6c:	b003      	add	sp, #12
   d5f6e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d5f70:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5f74:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d5f78:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d5f7c:	d00b      	beq.n	d5f96 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5f7e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d5f80:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5f82:	210f      	movs	r1, #15
   d5f84:	4620      	mov	r0, r4
   d5f86:	f7ff ffd7 	bl	d5f38 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d5f8a:	4a16      	ldr	r2, [pc, #88]	; (d5fe4 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d5f8c:	4916      	ldr	r1, [pc, #88]	; (d5fe8 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d5f8e:	4814      	ldr	r0, [pc, #80]	; (d5fe0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5f90:	f7fe f89a 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5f94:	e7e9      	b.n	d5f6a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d5f96:	2208      	movs	r2, #8
   d5f98:	2117      	movs	r1, #23
   d5f9a:	4620      	mov	r0, r4
   d5f9c:	f7ff ffbd 	bl	d5f1a <_ZN6AB18058isBitSetEhhb>
   d5fa0:	b118      	cbz	r0, d5faa <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5fa2:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d5fa4:	4a11      	ldr	r2, [pc, #68]	; (d5fec <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5fa6:	61e3      	str	r3, [r4, #28]
   d5fa8:	e7f0      	b.n	d5f8c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d5faa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5fae:	071a      	lsls	r2, r3, #28
   d5fb0:	d509      	bpl.n	d5fc6 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d5fb2:	2303      	movs	r3, #3
   d5fb4:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d5fb6:	2208      	movs	r2, #8
   d5fb8:	2301      	movs	r3, #1
   d5fba:	210f      	movs	r1, #15
   d5fbc:	4620      	mov	r0, r4
   d5fbe:	f7ff ffbb 	bl	d5f38 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d5fc2:	4a0b      	ldr	r2, [pc, #44]	; (d5ff0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d5fc4:	e7e2      	b.n	d5f8c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d5fc6:	075b      	lsls	r3, r3, #29
   d5fc8:	d5cf      	bpl.n	d5f6a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d5fca:	2204      	movs	r2, #4
   d5fcc:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d5fce:	2301      	movs	r3, #1
   d5fd0:	210f      	movs	r1, #15
   d5fd2:	4620      	mov	r0, r4
   d5fd4:	f7ff ffb0 	bl	d5f38 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d5fd8:	4a06      	ldr	r2, [pc, #24]	; (d5ff4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d5fda:	e7d7      	b.n	d5f8c <_ZN6AB180516updateWakeReasonEv+0x40>
   d5fdc:	000dfa52 	.word	0x000dfa52
   d5fe0:	2003e250 	.word	0x2003e250
   d5fe4:	000dfa23 	.word	0x000dfa23
   d5fe8:	000dfa71 	.word	0x000dfa71
   d5fec:	000dfa2c 	.word	0x000dfa2c
   d5ff0:	000dfa3c 	.word	0x000dfa3c
   d5ff4:	000dfa4c 	.word	0x000dfa4c

000d5ff8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5ff8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d5ffa:	9300      	str	r3, [sp, #0]
   d5ffc:	4613      	mov	r3, r2
   d5ffe:	22ff      	movs	r2, #255	; 0xff
   d6000:	f7ff fec6 	bl	d5d90 <_ZN6AB180512maskRegisterEhhhb>
}
   d6004:	b003      	add	sp, #12
   d6006:	f85d fb04 	ldr.w	pc, [sp], #4

000d600a <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d600a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d600e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6012:	4605      	mov	r5, r0
   d6014:	460c      	mov	r4, r1
   d6016:	4691      	mov	r9, r2
   d6018:	461f      	mov	r7, r3
    if (lock) {
   d601a:	f1ba 0f00 	cmp.w	sl, #0
   d601e:	d002      	beq.n	d6026 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6020:	6840      	ldr	r0, [r0, #4]
   d6022:	f005 fd85 	bl	dbb30 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6026:	b307      	cbz	r7, d606a <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d6028:	2f20      	cmp	r7, #32
   d602a:	463e      	mov	r6, r7
   d602c:	bf28      	it	cs
   d602e:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6030:	2c7f      	cmp	r4, #127	; 0x7f
   d6032:	d826      	bhi.n	d6082 <_ZN6AB18057readRamEjPhjb+0x78>
   d6034:	1933      	adds	r3, r6, r4
   d6036:	2b80      	cmp	r3, #128	; 0x80
   d6038:	d901      	bls.n	d603e <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d603a:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d603e:	2301      	movs	r3, #1
   d6040:	2204      	movs	r2, #4
   d6042:	213f      	movs	r1, #63	; 0x3f
   d6044:	4628      	mov	r0, r5
   d6046:	f7ff ff77 	bl	d5f38 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d604a:	2300      	movs	r3, #0
   d604c:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6050:	9300      	str	r3, [sp, #0]
   d6052:	464a      	mov	r2, r9
   d6054:	4633      	mov	r3, r6
   d6056:	b2c9      	uxtb	r1, r1
   d6058:	4628      	mov	r0, r5
   d605a:	f7ff fd69 	bl	d5b30 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d605e:	4680      	mov	r8, r0
   d6060:	b128      	cbz	r0, d606e <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6062:	4434      	add	r4, r6
        dataLen -= count;
   d6064:	1bbf      	subs	r7, r7, r6
        data += count;
   d6066:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6068:	e7dd      	b.n	d6026 <_ZN6AB18057readRamEjPhjb+0x1c>
   d606a:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d606e:	f1ba 0f00 	cmp.w	sl, #0
   d6072:	d002      	beq.n	d607a <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6074:	6868      	ldr	r0, [r5, #4]
   d6076:	f005 fd64 	bl	dbb42 <_ZN7TwoWire6unlockEv>
}
   d607a:	4640      	mov	r0, r8
   d607c:	b002      	add	sp, #8
   d607e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6082:	2301      	movs	r3, #1
   d6084:	2204      	movs	r2, #4
   d6086:	213f      	movs	r1, #63	; 0x3f
   d6088:	4628      	mov	r0, r5
   d608a:	f7ff ffb5 	bl	d5ff8 <_ZN6AB180514setRegisterBitEhhb>
   d608e:	e7dc      	b.n	d604a <_ZN6AB18057readRamEjPhjb+0x40>

000d6090 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6090:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6094:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6098:	4605      	mov	r5, r0
   d609a:	460c      	mov	r4, r1
   d609c:	4691      	mov	r9, r2
   d609e:	461f      	mov	r7, r3
    if (lock) {
   d60a0:	f1ba 0f00 	cmp.w	sl, #0
   d60a4:	d002      	beq.n	d60ac <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d60a6:	6840      	ldr	r0, [r0, #4]
   d60a8:	f005 fd42 	bl	dbb30 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d60ac:	b307      	cbz	r7, d60f0 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d60ae:	2f1f      	cmp	r7, #31
   d60b0:	463e      	mov	r6, r7
   d60b2:	bf28      	it	cs
   d60b4:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d60b6:	2c7f      	cmp	r4, #127	; 0x7f
   d60b8:	d826      	bhi.n	d6108 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d60ba:	1933      	adds	r3, r6, r4
   d60bc:	2b80      	cmp	r3, #128	; 0x80
   d60be:	d901      	bls.n	d60c4 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d60c0:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d60c4:	2301      	movs	r3, #1
   d60c6:	2204      	movs	r2, #4
   d60c8:	213f      	movs	r1, #63	; 0x3f
   d60ca:	4628      	mov	r0, r5
   d60cc:	f7ff ff34 	bl	d5f38 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d60d0:	2300      	movs	r3, #0
   d60d2:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d60d6:	9300      	str	r3, [sp, #0]
   d60d8:	464a      	mov	r2, r9
   d60da:	4633      	mov	r3, r6
   d60dc:	b2c9      	uxtb	r1, r1
   d60de:	4628      	mov	r0, r5
   d60e0:	f7ff fdba 	bl	d5c58 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d60e4:	4680      	mov	r8, r0
   d60e6:	b128      	cbz	r0, d60f4 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d60e8:	4434      	add	r4, r6
        dataLen -= count;
   d60ea:	1bbf      	subs	r7, r7, r6
        data += count;
   d60ec:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d60ee:	e7dd      	b.n	d60ac <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d60f0:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d60f4:	f1ba 0f00 	cmp.w	sl, #0
   d60f8:	d002      	beq.n	d6100 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d60fa:	6868      	ldr	r0, [r5, #4]
   d60fc:	f005 fd21 	bl	dbb42 <_ZN7TwoWire6unlockEv>
}
   d6100:	4640      	mov	r0, r8
   d6102:	b002      	add	sp, #8
   d6104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6108:	2301      	movs	r3, #1
   d610a:	2204      	movs	r2, #4
   d610c:	213f      	movs	r1, #63	; 0x3f
   d610e:	4628      	mov	r0, r5
   d6110:	f7ff ff72 	bl	d5ff8 <_ZN6AB180514setRegisterBitEhhb>
   d6114:	e7dc      	b.n	d60d0 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d6118 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d6118:	b530      	push	{r4, r5, lr}
   d611a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d611c:	680d      	ldr	r5, [r1, #0]
   d611e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6122:	9503      	str	r5, [sp, #12]
   d6124:	684d      	ldr	r5, [r1, #4]
   d6126:	9502      	str	r5, [sp, #8]
   d6128:	688d      	ldr	r5, [r1, #8]
   d612a:	9501      	str	r5, [sp, #4]
   d612c:	68c9      	ldr	r1, [r1, #12]
   d612e:	9100      	str	r1, [sp, #0]
   d6130:	3301      	adds	r3, #1
   d6132:	4904      	ldr	r1, [pc, #16]	; (d6144 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6134:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d6138:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d613a:	f007 fb35 	bl	dd7a8 <_ZN6String6formatEPKcz>
}
   d613e:	4620      	mov	r0, r4
   d6140:	b005      	add	sp, #20
   d6142:	bd30      	pop	{r4, r5, pc}
   d6144:	000dfa82 	.word	0x000dfa82

000d6148 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6148:	1103      	asrs	r3, r0, #4
}
   d614a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d614c:	f000 000f 	and.w	r0, r0, #15
}
   d6150:	fb02 0003 	mla	r0, r2, r3, r0
   d6154:	4770      	bx	lr

000d6156 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6156:	b538      	push	{r3, r4, r5, lr}
   d6158:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d615a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d615c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d615e:	f7ff fff3 	bl	d6148 <_ZN6AB180510bcdToValueEh>
   d6162:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6164:	7860      	ldrb	r0, [r4, #1]
   d6166:	f7ff ffef 	bl	d6148 <_ZN6AB180510bcdToValueEh>
   d616a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d616c:	78a0      	ldrb	r0, [r4, #2]
   d616e:	f7ff ffeb 	bl	d6148 <_ZN6AB180510bcdToValueEh>
   d6172:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6174:	78e0      	ldrb	r0, [r4, #3]
   d6176:	f7ff ffe7 	bl	d6148 <_ZN6AB180510bcdToValueEh>
   d617a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d617c:	7920      	ldrb	r0, [r4, #4]
   d617e:	f7ff ffe3 	bl	d6148 <_ZN6AB180510bcdToValueEh>
   d6182:	3801      	subs	r0, #1
   d6184:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6186:	b92d      	cbnz	r5, d6194 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6188:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d618a:	7828      	ldrb	r0, [r5, #0]
   d618c:	f7ff ffdc 	bl	d6148 <_ZN6AB180510bcdToValueEh>
   d6190:	6188      	str	r0, [r1, #24]
}
   d6192:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6194:	7960      	ldrb	r0, [r4, #5]
   d6196:	f7ff ffd7 	bl	d6148 <_ZN6AB180510bcdToValueEh>
   d619a:	3064      	adds	r0, #100	; 0x64
   d619c:	1da5      	adds	r5, r4, #6
   d619e:	6148      	str	r0, [r1, #20]
   d61a0:	e7f3      	b.n	d618a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d61a4 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d61a4:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d61a6:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d61a8:	b088      	sub	sp, #32
   d61aa:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d61ac:	461a      	mov	r2, r3
   d61ae:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d61b0:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d61b2:	f7ff fea3 	bl	d5efc <_ZN6AB180510isBitClearEhhb>
   d61b6:	b1f0      	cbz	r0, d61f6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d61b8:	2308      	movs	r3, #8
   d61ba:	2601      	movs	r6, #1
   d61bc:	4620      	mov	r0, r4
   d61be:	9600      	str	r6, [sp, #0]
   d61c0:	eb0d 0203 	add.w	r2, sp, r3
   d61c4:	2100      	movs	r1, #0
   d61c6:	f7ff fcb3 	bl	d5b30 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d61ca:	4604      	mov	r4, r0
   d61cc:	b198      	cbz	r0, d61f6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d61ce:	4632      	mov	r2, r6
   d61d0:	4629      	mov	r1, r5
   d61d2:	f10d 0009 	add.w	r0, sp, #9
   d61d6:	f7ff ffbe 	bl	d6156 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d61da:	a804      	add	r0, sp, #16
   d61dc:	f7ff ff9c 	bl	d6118 <_ZN6AB180510tmToStringEPK2tm>
   d61e0:	4808      	ldr	r0, [pc, #32]	; (d6204 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d61e2:	9a04      	ldr	r2, [sp, #16]
   d61e4:	4908      	ldr	r1, [pc, #32]	; (d6208 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d61e6:	f7fd ff6f 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d61ea:	a804      	add	r0, sp, #16
   d61ec:	f007 f990 	bl	dd510 <_ZN6StringD1Ev>
}
   d61f0:	4620      	mov	r0, r4
   d61f2:	b008      	add	sp, #32
   d61f4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d61f6:	2224      	movs	r2, #36	; 0x24
   d61f8:	2100      	movs	r1, #0
   d61fa:	4628      	mov	r0, r5
   d61fc:	f008 fc66 	bl	deacc <memset>
   d6200:	2400      	movs	r4, #0
   d6202:	e7f5      	b.n	d61f0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d6204:	2003e250 	.word	0x2003e250
   d6208:	000dfaa0 	.word	0x000dfaa0

000d620c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d620c:	b530      	push	{r4, r5, lr}
   d620e:	b08b      	sub	sp, #44	; 0x2c
   d6210:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6212:	a901      	add	r1, sp, #4
   d6214:	f7ff ffc6 	bl	d61a4 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d6218:	4604      	mov	r4, r0
   d621a:	b120      	cbz	r0, d6226 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d621c:	a801      	add	r0, sp, #4
   d621e:	f004 feb3 	bl	daf88 <mktime>
   d6222:	e9c5 0100 	strd	r0, r1, [r5]
}
   d6226:	4620      	mov	r0, r4
   d6228:	b00b      	add	sp, #44	; 0x2c
   d622a:	bd30      	pop	{r4, r5, pc}

000d622c <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d622c:	b510      	push	{r4, lr}
   d622e:	4604      	mov	r4, r0
   d6230:	b088      	sub	sp, #32
    if (callBegin) {
   d6232:	b111      	cbz	r1, d623a <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d6234:	6840      	ldr	r0, [r0, #4]
   d6236:	f005 fc29 	bl	dba8c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d623a:	4620      	mov	r0, r4
   d623c:	f7ff fcce 	bl	d5bdc <_ZN6AB180510detectChipEv>
   d6240:	b370      	cbz	r0, d62a0 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6242:	4620      	mov	r0, r4
   d6244:	f7ff fe82 	bl	d5f4c <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6248:	2301      	movs	r3, #1
   d624a:	461a      	mov	r2, r3
   d624c:	2110      	movs	r1, #16
   d624e:	4620      	mov	r0, r4
   d6250:	f7ff fe54 	bl	d5efc <_ZN6AB180510isBitClearEhhb>
   d6254:	b1d8      	cbz	r0, d628e <_ZN6AB18055setupEb+0x62>
   d6256:	f007 fc81 	bl	ddb5c <_ZN9TimeClass7isValidEv>
   d625a:	b9c0      	cbnz	r0, d628e <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d625c:	a902      	add	r1, sp, #8
   d625e:	4620      	mov	r0, r4
   d6260:	f7ff ffd4 	bl	d620c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6268:	f007 fb7f 	bl	dd96a <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d626c:	4b0f      	ldr	r3, [pc, #60]	; (d62ac <_ZN6AB18055setupEb+0x80>)
   d626e:	4910      	ldr	r1, [pc, #64]	; (d62b0 <_ZN6AB18055setupEb+0x84>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	9300      	str	r3, [sp, #0]
   d6274:	a804      	add	r0, sp, #16
   d6276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d627a:	f007 fc2d 	bl	ddad8 <_ZN9TimeClass6formatExPKc>
   d627e:	480d      	ldr	r0, [pc, #52]	; (d62b4 <_ZN6AB18055setupEb+0x88>)
   d6280:	9a04      	ldr	r2, [sp, #16]
   d6282:	490d      	ldr	r1, [pc, #52]	; (d62b8 <_ZN6AB18055setupEb+0x8c>)
   d6284:	f7fd ff20 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d6288:	a804      	add	r0, sp, #16
   d628a:	f007 f941 	bl	dd510 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d628e:	4a0b      	ldr	r2, [pc, #44]	; (d62bc <_ZN6AB18055setupEb+0x90>)
   d6290:	2300      	movs	r3, #0
   d6292:	2100      	movs	r1, #0
   d6294:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6298:	f004 fcee 	bl	dac78 <system_subscribe_event>
}
   d629c:	b008      	add	sp, #32
   d629e:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d62a0:	4907      	ldr	r1, [pc, #28]	; (d62c0 <_ZN6AB18055setupEb+0x94>)
   d62a2:	4804      	ldr	r0, [pc, #16]	; (d62b4 <_ZN6AB18055setupEb+0x88>)
   d62a4:	f7ff fc19 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
   d62a8:	e7f1      	b.n	d628e <_ZN6AB18055setupEb+0x62>
   d62aa:	bf00      	nop
   d62ac:	2003dc44 	.word	0x2003dc44
   d62b0:	2003e5c4 	.word	0x2003e5c4
   d62b4:	2003e250 	.word	0x2003e250
   d62b8:	000dfaae 	.word	0x000dfaae
   d62bc:	000d5d6d 	.word	0x000d5d6d
   d62c0:	000dfacb 	.word	0x000dfacb

000d62c4 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d62c4:	220a      	movs	r2, #10
   d62c6:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d62ca:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d62ce:	fb93 f1f2 	sdiv	r1, r3, r2
   d62d2:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d62d6:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d62da:	b2c0      	uxtb	r0, r0
   d62dc:	4770      	bx	lr

000d62de <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d62de:	b570      	push	{r4, r5, r6, lr}
   d62e0:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d62e2:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d62e4:	460c      	mov	r4, r1
   d62e6:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d62e8:	f7ff ffec 	bl	d62c4 <_ZN6AB180510valueToBcdEi>
   d62ec:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d62ee:	6868      	ldr	r0, [r5, #4]
   d62f0:	f7ff ffe8 	bl	d62c4 <_ZN6AB180510valueToBcdEi>
   d62f4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d62f6:	68a8      	ldr	r0, [r5, #8]
   d62f8:	f7ff ffe4 	bl	d62c4 <_ZN6AB180510valueToBcdEi>
   d62fc:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d62fe:	68e8      	ldr	r0, [r5, #12]
   d6300:	f7ff ffe0 	bl	d62c4 <_ZN6AB180510valueToBcdEi>
   d6304:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6306:	6928      	ldr	r0, [r5, #16]
   d6308:	3001      	adds	r0, #1
   d630a:	f7ff ffdb 	bl	d62c4 <_ZN6AB180510valueToBcdEi>
   d630e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d6310:	b92e      	cbnz	r6, d631e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6312:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d6314:	69a8      	ldr	r0, [r5, #24]
   d6316:	f7ff ffd5 	bl	d62c4 <_ZN6AB180510valueToBcdEi>
   d631a:	7030      	strb	r0, [r6, #0]
}
   d631c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d631e:	696a      	ldr	r2, [r5, #20]
   d6320:	2364      	movs	r3, #100	; 0x64
   d6322:	fb92 f0f3 	sdiv	r0, r2, r3
   d6326:	fb03 2010 	mls	r0, r3, r0, r2
   d632a:	f7ff ffcb 	bl	d62c4 <_ZN6AB180510valueToBcdEi>
   d632e:	1da6      	adds	r6, r4, #6
   d6330:	7160      	strb	r0, [r4, #5]
   d6332:	e7ef      	b.n	d6314 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d6334 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6334:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6336:	b087      	sub	sp, #28
   d6338:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d633a:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d633c:	4616      	mov	r6, r2
   d633e:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6340:	f7ff feea 	bl	d6118 <_ZN6AB180510tmToStringEPK2tm>
   d6344:	481e      	ldr	r0, [pc, #120]	; (d63c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6346:	9a02      	ldr	r2, [sp, #8]
   d6348:	491e      	ldr	r1, [pc, #120]	; (d63c4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d634a:	f7fd febd 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d634e:	a802      	add	r0, sp, #8
   d6350:	f007 f8de 	bl	dd510 <_ZN6StringD1Ev>
    if (lock) {
   d6354:	b116      	cbz	r6, d635c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d6356:	6868      	ldr	r0, [r5, #4]
   d6358:	f005 fbea 	bl	dbb30 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d635c:	4620      	mov	r0, r4
   d635e:	2201      	movs	r2, #1
   d6360:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6364:	2700      	movs	r7, #0
   d6366:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d636a:	f7ff ffb8 	bl	d62de <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d636e:	2301      	movs	r3, #1
   d6370:	461a      	mov	r2, r3
   d6372:	2110      	movs	r1, #16
   d6374:	4628      	mov	r0, r5
   d6376:	f7ff fe3f 	bl	d5ff8 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d637a:	4604      	mov	r4, r0
   d637c:	b1e8      	cbz	r0, d63ba <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d637e:	2308      	movs	r3, #8
   d6380:	9700      	str	r7, [sp, #0]
   d6382:	eb0d 0203 	add.w	r2, sp, r3
   d6386:	4639      	mov	r1, r7
   d6388:	4628      	mov	r0, r5
   d638a:	f7ff fc65 	bl	d5c58 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d638e:	4604      	mov	r4, r0
   d6390:	b160      	cbz	r0, d63ac <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6392:	2301      	movs	r3, #1
   d6394:	461a      	mov	r2, r3
   d6396:	2110      	movs	r1, #16
   d6398:	4628      	mov	r0, r5
   d639a:	f7ff fdcd 	bl	d5f38 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d639e:	b116      	cbz	r6, d63a6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d63a0:	6868      	ldr	r0, [r5, #4]
   d63a2:	f005 fbce 	bl	dbb42 <_ZN7TwoWire6unlockEv>
}
   d63a6:	4620      	mov	r0, r4
   d63a8:	b007      	add	sp, #28
   d63aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d63ac:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d63b0:	4905      	ldr	r1, [pc, #20]	; (d63c8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d63b2:	4803      	ldr	r0, [pc, #12]	; (d63c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d63b4:	f7ff fb91 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
   d63b8:	e7f1      	b.n	d639e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d63ba:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d63be:	e7f7      	b.n	d63b0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d63c0:	2003e250 	.word	0x2003e250
   d63c4:	000dfae3 	.word	0x000dfae3
   d63c8:	000dfaf1 	.word	0x000dfaf1

000d63cc <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d63cc:	b513      	push	{r0, r1, r4, lr}
   d63ce:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d63d0:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d63d2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d63d6:	f008 fb3f 	bl	dea58 <gmtime>
    return setRtcFromTm(tm, lock);
   d63da:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d63de:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d63e0:	4620      	mov	r0, r4
   d63e2:	f7ff ffa7 	bl	d6334 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d63e6:	b002      	add	sp, #8
   d63e8:	bd10      	pop	{r4, pc}
	...

000d63ec <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d63ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d63ee:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d63f0:	b089      	sub	sp, #36	; 0x24
   d63f2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d63f4:	bb75      	cbnz	r5, d6454 <_ZN6AB18054loopEv+0x68>
   d63f6:	f007 fbb1 	bl	ddb5c <_ZN9TimeClass7isValidEv>
   d63fa:	b358      	cbz	r0, d6454 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d63fc:	2600      	movs	r6, #0
   d63fe:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d6400:	a904      	add	r1, sp, #16
   d6402:	4628      	mov	r0, r5
        tm = 0;
   d6404:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d6408:	f004 fcce 	bl	dada8 <spark_sync_time_last>
   d640c:	b310      	cbz	r0, d6454 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d640e:	2501      	movs	r5, #1
   d6410:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d6412:	f007 fbc0 	bl	ddb96 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d6416:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d6418:	4602      	mov	r2, r0
   d641a:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d641c:	4620      	mov	r0, r4
        time_t time = Time.now();
   d641e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d6422:	f7ff ffd3 	bl	d63cc <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d6426:	a902      	add	r1, sp, #8
   d6428:	4620      	mov	r0, r4
        time = 0;
   d642a:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d642e:	f7ff feed 	bl	d620c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6432:	4b12      	ldr	r3, [pc, #72]	; (d647c <_ZN6AB18054loopEv+0x90>)
   d6434:	4912      	ldr	r1, [pc, #72]	; (d6480 <_ZN6AB18054loopEv+0x94>)
   d6436:	681b      	ldr	r3, [r3, #0]
   d6438:	9300      	str	r3, [sp, #0]
   d643a:	a804      	add	r0, sp, #16
   d643c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6440:	f007 fb4a 	bl	ddad8 <_ZN9TimeClass6formatExPKc>
   d6444:	480f      	ldr	r0, [pc, #60]	; (d6484 <_ZN6AB18054loopEv+0x98>)
   d6446:	9a04      	ldr	r2, [sp, #16]
   d6448:	490f      	ldr	r1, [pc, #60]	; (d6488 <_ZN6AB18054loopEv+0x9c>)
   d644a:	f7fd fe3d 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d644e:	a804      	add	r0, sp, #16
   d6450:	f007 f85e 	bl	dd510 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6454:	6963      	ldr	r3, [r4, #20]
   d6456:	b173      	cbz	r3, d6476 <_ZN6AB18054loopEv+0x8a>
   d6458:	f004 f9a4 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d645c:	6923      	ldr	r3, [r4, #16]
   d645e:	1ac0      	subs	r0, r0, r3
   d6460:	6963      	ldr	r3, [r4, #20]
   d6462:	4298      	cmp	r0, r3
   d6464:	d307      	bcc.n	d6476 <_ZN6AB18054loopEv+0x8a>
   d6466:	f004 f99d 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d646a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d646e:	6120      	str	r0, [r4, #16]
            setWDT();
   d6470:	4620      	mov	r0, r4
   d6472:	f7ff fc39 	bl	d5ce8 <_ZN6AB18056setWDTEi>
}
   d6476:	b009      	add	sp, #36	; 0x24
   d6478:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d647a:	bf00      	nop
   d647c:	2003dc44 	.word	0x2003dc44
   d6480:	2003e5c4 	.word	0x2003e5c4
   d6484:	2003e250 	.word	0x2003e250
   d6488:	000dfb0c 	.word	0x000dfb0c

000d648c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d648c:	4b01      	ldr	r3, [pc, #4]	; (d6494 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d648e:	4a02      	ldr	r2, [pc, #8]	; (d6498 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6490:	601a      	str	r2, [r3, #0]
}
   d6492:	4770      	bx	lr
   d6494:	2003e250 	.word	0x2003e250
   d6498:	000dfb22 	.word	0x000dfb22

000d649c <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d649c:	2a02      	cmp	r2, #2
   d649e:	d006      	beq.n	d64ae <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d64a0:	2a03      	cmp	r2, #3
   d64a2:	d002      	beq.n	d64aa <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d64a4:	2a01      	cmp	r2, #1
   d64a6:	d100      	bne.n	d64aa <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d64a8:	6001      	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d64aa:	2000      	movs	r0, #0
   d64ac:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d64ae:	680b      	ldr	r3, [r1, #0]
   d64b0:	6003      	str	r3, [r0, #0]
	}
   d64b2:	e7fa      	b.n	d64aa <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d64b4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d64b4:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d64b6:	2301      	movs	r3, #1
   d64b8:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d64ba:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d64bc:	4604      	mov	r4, r0
        if (th->func) {
   d64be:	b143      	cbz	r3, d64d2 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d64c0:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64c2:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d64c4:	2301      	movs	r3, #1
   d64c6:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d64c8:	2000      	movs	r0, #0
    }
   d64ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d64ce:	f004 b941 	b.w	da754 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d64d2:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d64d4:	2800      	cmp	r0, #0
   d64d6:	d0f5      	beq.n	d64c4 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d64d8:	6883      	ldr	r3, [r0, #8]
   d64da:	b90b      	cbnz	r3, d64e0 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d64dc:	f007 fe4e 	bl	de17c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64e0:	68c3      	ldr	r3, [r0, #12]
   d64e2:	e7ee      	b.n	d64c2 <_ZN6Thread3runEPv+0xe>

000d64e4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d64e4:	b510      	push	{r4, lr}
      if (_M_manager)
   d64e6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d64e8:	4604      	mov	r4, r0
      if (_M_manager)
   d64ea:	b113      	cbz	r3, d64f2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d64ec:	2203      	movs	r2, #3
   d64ee:	4601      	mov	r1, r0
   d64f0:	4798      	blx	r3
    }
   d64f2:	4620      	mov	r0, r4
   d64f4:	bd10      	pop	{r4, pc}

000d64f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d64f6:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d64f8:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d64fa:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d64fc:	b135      	cbz	r5, d650c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d64fe:	4628      	mov	r0, r5
   d6500:	f7ff fff0 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6504:	2110      	movs	r1, #16
   d6506:	4628      	mov	r0, r5
   d6508:	f007 fe2c 	bl	de164 <_ZdlPvj>
   d650c:	4620      	mov	r0, r4
   d650e:	2114      	movs	r1, #20
      }
   d6510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d6514:	f007 be26 	b.w	de164 <_ZdlPvj>

000d6518 <_ZN6Thread7disposeEv>:
    void dispose()
   d6518:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d651a:	6803      	ldr	r3, [r0, #0]
   d651c:	4604      	mov	r4, r0
        if (!isValid())
   d651e:	b1ab      	cbz	r3, d654c <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d6520:	6858      	ldr	r0, [r3, #4]
   d6522:	f004 f8c7 	bl	da6b4 <os_thread_is_current>
   d6526:	b988      	cbnz	r0, d654c <_ZN6Thread7disposeEv+0x34>
   d6528:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d652a:	7c5a      	ldrb	r2, [r3, #17]
   d652c:	b912      	cbnz	r2, d6534 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d652e:	6858      	ldr	r0, [r3, #4]
   d6530:	f004 f8c8 	bl	da6c4 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d6534:	6823      	ldr	r3, [r4, #0]
   d6536:	6858      	ldr	r0, [r3, #4]
   d6538:	f004 f8cc 	bl	da6d4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d653c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d653e:	2300      	movs	r3, #0
   d6540:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d6542:	b118      	cbz	r0, d654c <_ZN6Thread7disposeEv+0x34>
    }
   d6544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6548:	f7ff bfd5 	b.w	d64f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d654c:	bd10      	pop	{r4, pc}
	...

000d6550 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   d6550:	4a05      	ldr	r2, [pc, #20]	; (d6568 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   d6552:	6002      	str	r2, [r0, #0]
   d6554:	2200      	movs	r2, #0
   d6556:	6042      	str	r2, [r0, #4]
   d6558:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d655a:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d655e:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d6562:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d6566:	4770      	bx	lr
   d6568:	000dfb64 	.word	0x000dfb64

000d656c <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   d656c:	b510      	push	{r4, lr}
    if (!_instance) {
   d656e:	4c07      	ldr	r4, [pc, #28]	; (d658c <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   d6570:	6823      	ldr	r3, [r4, #0]
   d6572:	b943      	cbnz	r3, d6586 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   d6574:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d6578:	f7fd fd8d 	bl	d4096 <_Znwj>
   d657c:	4603      	mov	r3, r0
   d657e:	b108      	cbz	r0, d6584 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   d6580:	f7ff ffe6 	bl	d6550 <_ZN19BackgroundPublishRKC1Ev>
   d6584:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d6586:	6820      	ldr	r0, [r4, #0]
   d6588:	bd10      	pop	{r4, pc}
   d658a:	bf00      	nop
   d658c:	2003e258 	.word	0x2003e258

000d6590 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   d6590:	b538      	push	{r3, r4, r5, lr}
   d6592:	4604      	mov	r4, r0
    if(thread)
   d6594:	6840      	ldr	r0, [r0, #4]
   d6596:	b190      	cbz	r0, d65be <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d6598:	2302      	movs	r3, #2
   d659a:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d659c:	f7ff ffbc 	bl	d6518 <_ZN6Thread7disposeEv>
        delete thread;
   d65a0:	6865      	ldr	r5, [r4, #4]
   d65a2:	b155      	cbz	r5, d65ba <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   d65a4:	4628      	mov	r0, r5
   d65a6:	f7ff ffb7 	bl	d6518 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d65aa:	6828      	ldr	r0, [r5, #0]
   d65ac:	b108      	cbz	r0, d65b2 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d65ae:	f7ff ffa2 	bl	d64f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d65b2:	2104      	movs	r1, #4
   d65b4:	4628      	mov	r0, r5
   d65b6:	f007 fdd5 	bl	de164 <_ZdlPvj>
        thread = NULL;
   d65ba:	2300      	movs	r3, #0
   d65bc:	6063      	str	r3, [r4, #4]
    }
}
   d65be:	bd38      	pop	{r3, r4, r5, pc}

000d65c0 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d65c0:	b510      	push	{r4, lr}
   d65c2:	4b05      	ldr	r3, [pc, #20]	; (d65d8 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   d65c4:	6003      	str	r3, [r0, #0]
   d65c6:	4604      	mov	r4, r0
    stop();
   d65c8:	f7ff ffe2 	bl	d6590 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   d65cc:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d65d0:	f7ff ff88 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
}
   d65d4:	4620      	mov	r0, r4
   d65d6:	bd10      	pop	{r4, pc}
   d65d8:	000dfb64 	.word	0x000dfb64

000d65dc <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d65dc:	b510      	push	{r4, lr}
   d65de:	4604      	mov	r4, r0
}
   d65e0:	f7ff ffee 	bl	d65c0 <_ZN19BackgroundPublishRKD1Ev>
   d65e4:	4620      	mov	r0, r4
   d65e6:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d65ea:	f007 fdbb 	bl	de164 <_ZdlPvj>
   d65ee:	4620      	mov	r0, r4
   d65f0:	bd10      	pop	{r4, pc}

000d65f2 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   d65f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65f4:	4604      	mov	r4, r0
   d65f6:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d65f8:	f100 060d 	add.w	r6, r0, #13
   d65fc:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d6600:	7b23      	ldrb	r3, [r4, #12]
   d6602:	b91b      	cbnz	r3, d660c <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   d6604:	2001      	movs	r0, #1
   d6606:	f004 fcc7 	bl	daf98 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d660a:	e7f9      	b.n	d6600 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d660c:	7b23      	ldrb	r3, [r4, #12]
   d660e:	2b02      	cmp	r3, #2
   d6610:	d062      	beq.n	d66d8 <_ZN19BackgroundPublishRK8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d6612:	68a0      	ldr	r0, [r4, #8]
   d6614:	f004 f86e 	bl	da6f4 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d6618:	68a0      	ldr	r0, [r4, #8]
   d661a:	f004 f873 	bl	da704 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d661e:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6622:	f88d 3000 	strb.w	r3, [sp]
   d6626:	463a      	mov	r2, r7
   d6628:	233c      	movs	r3, #60	; 0x3c
   d662a:	4631      	mov	r1, r6
   d662c:	a806      	add	r0, sp, #24
   d662e:	f004 ff77 	bl	db520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d6632:	9d06      	ldr	r5, [sp, #24]
   d6634:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d6636:	b933      	cbnz	r3, d6646 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   d6638:	7b23      	ldrb	r3, [r4, #12]
   d663a:	2b02      	cmp	r3, #2
   d663c:	d003      	beq.n	d6646 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d663e:	2001      	movs	r0, #1
   d6640:	f004 fcaa 	bl	daf98 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d6644:	e7f5      	b.n	d6632 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   d6646:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d664a:	b31b      	cbz	r3, d6694 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d664c:	2000      	movs	r0, #0
   d664e:	f004 fb23 	bl	dac98 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6652:	b120      	cbz	r0, d665e <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   d6654:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6656:	b913      	cbnz	r3, d665e <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   d6658:	f004 fb76 	bl	dad48 <spark_process>
    }
   d665c:	e7fa      	b.n	d6654 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d665e:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d6660:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d6664:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d6666:	1e59      	subs	r1, r3, #1
   d6668:	424b      	negs	r3, r1
   d666a:	414b      	adcs	r3, r1
   d666c:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d6670:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d6674:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d6678:	b90b      	cbnz	r3, d667e <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   d667a:	f007 fd7f 	bl	de17c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d667e:	ab05      	add	r3, sp, #20
   d6680:	9300      	str	r3, [sp, #0]
   d6682:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d6686:	ab04      	add	r3, sp, #16
   d6688:	aa03      	add	r2, sp, #12
   d668a:	f10d 010b 	add.w	r1, sp, #11
   d668e:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d6692:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d6694:	68a0      	ldr	r0, [r4, #8]
   d6696:	f004 f82d 	bl	da6f4 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d669a:	7b23      	ldrb	r3, [r4, #12]
   d669c:	2b02      	cmp	r3, #2
   d669e:	d015      	beq.n	d66cc <_ZN19BackgroundPublishRK8thread_fEv+0xda>
	if (_M_manager)
   d66a0:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d66a4:	2500      	movs	r5, #0
   d66a6:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d66aa:	b133      	cbz	r3, d66ba <_ZN19BackgroundPublishRK8thread_fEv+0xc8>
            completed_cb = NULL;
   d66ac:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d66b0:	2203      	movs	r2, #3
   d66b2:	4608      	mov	r0, r1
   d66b4:	4798      	blx	r3
	    _M_invoker = nullptr;
   d66b6:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d66ba:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d66bc:	68a0      	ldr	r0, [r4, #8]
   d66be:	7323      	strb	r3, [r4, #12]
   d66c0:	f004 f820 	bl	da704 <os_mutex_unlock>
      ~__shared_ptr() = default;
   d66c4:	a807      	add	r0, sp, #28
   d66c6:	f7fe fc66 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66ca:	e799      	b.n	d6600 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   d66cc:	68a0      	ldr	r0, [r4, #8]
   d66ce:	f004 f819 	bl	da704 <os_mutex_unlock>
   d66d2:	a807      	add	r0, sp, #28
   d66d4:	f7fe fc5f 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d66d8:	b009      	add	sp, #36	; 0x24
   d66da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d66dc <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d66dc:	6800      	ldr	r0, [r0, #0]
   d66de:	f7ff bf88 	b.w	d65f2 <_ZN19BackgroundPublishRK8thread_fEv>

000d66e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d66e2:	b513      	push	{r0, r1, r4, lr}
   d66e4:	460b      	mov	r3, r1
   d66e6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66e8:	e9d0 0100 	ldrd	r0, r1, [r0]
   d66ec:	466c      	mov	r4, sp
   d66ee:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d66f2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d66f6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d66fa:	e894 0003 	ldmia.w	r4, {r0, r1}
   d66fe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6702:	b002      	add	sp, #8
   d6704:	bd10      	pop	{r4, pc}
	...

000d6708 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d6708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d670c:	4606      	mov	r6, r0
   d670e:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d6710:	2014      	movs	r0, #20
   d6712:	4926      	ldr	r1, [pc, #152]	; (d67ac <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d6714:	4617      	mov	r7, r2
   d6716:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d6718:	f007 fd26 	bl	de168 <_ZnwjRKSt9nothrow_t>
   d671c:	4604      	mov	r4, r0
   d671e:	b130      	cbz	r0, d672e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6720:	2200      	movs	r2, #0
            exited(false) {
   d6722:	e9c0 2200 	strd	r2, r2, [r0]
   d6726:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d672a:	7402      	strb	r2, [r0, #16]
   d672c:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d672e:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d6730:	2c00      	cmp	r4, #0
   d6732:	d031      	beq.n	d6798 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d6734:	491d      	ldr	r1, [pc, #116]	; (d67ac <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d6736:	2010      	movs	r0, #16
   d6738:	f007 fd16 	bl	de168 <_ZnwjRKSt9nothrow_t>
   d673c:	4605      	mov	r5, r0
   d673e:	b168      	cbz	r0, d675c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d6740:	2300      	movs	r3, #0
   d6742:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6744:	4601      	mov	r1, r0
   d6746:	4638      	mov	r0, r7
   d6748:	f7ff ffcb 	bl	d66e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d674c:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d674e:	68aa      	ldr	r2, [r5, #8]
   d6750:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6752:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6754:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6756:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6758:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d675a:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d675c:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d675e:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d6760:	b137      	cbz	r7, d6770 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d6762:	4638      	mov	r0, r7
   d6764:	f7ff febe 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6768:	2110      	movs	r1, #16
   d676a:	4638      	mov	r0, r7
   d676c:	f007 fcfa 	bl	de164 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6770:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d6772:	6803      	ldr	r3, [r0, #0]
   d6774:	b183      	cbz	r3, d6798 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6778:	464a      	mov	r2, r9
   d677a:	e9cd 0300 	strd	r0, r3, [sp]
   d677e:	4641      	mov	r1, r8
   d6780:	4b0b      	ldr	r3, [pc, #44]	; (d67b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d6782:	3004      	adds	r0, #4
   d6784:	f003 ff8e 	bl	da6a4 <os_thread_create>
   d6788:	b930      	cbnz	r0, d6798 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d678a:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d678c:	7c1b      	ldrb	r3, [r3, #16]
   d678e:	b94b      	cbnz	r3, d67a4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d6790:	2001      	movs	r0, #1
   d6792:	f003 fff7 	bl	da784 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d6796:	e7f8      	b.n	d678a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6798:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d679a:	2300      	movs	r3, #0
   d679c:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d679e:	b108      	cbz	r0, d67a4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d67a0:	f7ff fea9 	bl	d64f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d67a4:	4630      	mov	r0, r6
   d67a6:	b003      	add	sp, #12
   d67a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d67ac:	000e0550 	.word	0x000e0550
   d67b0:	000d64b5 	.word	0x000d64b5

000d67b4 <_ZN19BackgroundPublishRK5startEv>:
{
   d67b4:	b530      	push	{r4, r5, lr}
    if(!thread)
   d67b6:	6843      	ldr	r3, [r0, #4]
{
   d67b8:	b087      	sub	sp, #28
   d67ba:	4604      	mov	r4, r0
    if(!thread)
   d67bc:	b9c3      	cbnz	r3, d67f0 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   d67be:	3008      	adds	r0, #8
   d67c0:	f003 ff90 	bl	da6e4 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d67c4:	4b0b      	ldr	r3, [pc, #44]	; (d67f4 <_ZN19BackgroundPublishRK5startEv+0x40>)
   d67c6:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d67c8:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d67ca:	4b0b      	ldr	r3, [pc, #44]	; (d67f8 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d67cc:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d67ce:	9304      	str	r3, [sp, #16]
   d67d0:	f7fd fc61 	bl	d4096 <_Znwj>
   d67d4:	4605      	mov	r5, r0
   d67d6:	b138      	cbz	r0, d67e8 <_ZN19BackgroundPublishRK5startEv+0x34>
   d67d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d67dc:	9300      	str	r3, [sp, #0]
   d67de:	4907      	ldr	r1, [pc, #28]	; (d67fc <_ZN19BackgroundPublishRK5startEv+0x48>)
   d67e0:	2302      	movs	r3, #2
   d67e2:	aa02      	add	r2, sp, #8
   d67e4:	f7ff ff90 	bl	d6708 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   d67e8:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d67ea:	a802      	add	r0, sp, #8
   d67ec:	f7ff fe7a 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
}
   d67f0:	b007      	add	sp, #28
   d67f2:	bd30      	pop	{r4, r5, pc}
   d67f4:	000d66dd 	.word	0x000d66dd
   d67f8:	000d649d 	.word	0x000d649d
   d67fc:	000dfb48 	.word	0x000dfb48

000d6800 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d6800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6804:	4604      	mov	r4, r0
   d6806:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d6808:	6880      	ldr	r0, [r0, #8]
   d680a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d680c:	4698      	mov	r8, r3
   d680e:	460d      	mov	r5, r1
   d6810:	4616      	mov	r6, r2
   d6812:	f003 ff6f 	bl	da6f4 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d6816:	6863      	ldr	r3, [r4, #4]
   d6818:	b11b      	cbz	r3, d6822 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d681a:	7b23      	ldrb	r3, [r4, #12]
   d681c:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d6820:	b133      	cbz	r3, d6830 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d6822:	68a0      	ldr	r0, [r4, #8]
   d6824:	f003 ff6e 	bl	da704 <os_mutex_unlock>
    {
        return false;
   d6828:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d682a:	b005      	add	sp, #20
   d682c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6830:	68a0      	ldr	r0, [r4, #8]
   d6832:	f003 ff67 	bl	da704 <os_mutex_unlock>
    if(!name)
   d6836:	2d00      	cmp	r5, #0
   d6838:	d03d      	beq.n	d68b6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d683a:	2241      	movs	r2, #65	; 0x41
   d683c:	4629      	mov	r1, r5
   d683e:	f104 000d 	add.w	r0, r4, #13
   d6842:	f008 fa04 	bl	dec4e <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d6846:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d684a:	b38e      	cbz	r6, d68b0 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d684c:	f240 226f 	movw	r2, #623	; 0x26f
   d6850:	4631      	mov	r1, r6
   d6852:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d6856:	f008 f9fa 	bl	dec4e <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d685a:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d685e:	2300      	movs	r3, #0
   d6860:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d6862:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d6864:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d6868:	b13b      	cbz	r3, d687a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d686a:	2202      	movs	r2, #2
   d686c:	4639      	mov	r1, r7
   d686e:	4668      	mov	r0, sp
   d6870:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6872:	68fb      	ldr	r3, [r7, #12]
   d6874:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d6876:	68bb      	ldr	r3, [r7, #8]
   d6878:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d687a:	4629      	mov	r1, r5
   d687c:	4668      	mov	r0, sp
   d687e:	f7ff ff30 	bl	d66e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6882:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6884:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d6888:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d688c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d688e:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6890:	4668      	mov	r0, sp
   d6892:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d6896:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d689a:	9203      	str	r2, [sp, #12]
   d689c:	f7ff fe22 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d68a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d68a2:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d68a6:	2001      	movs	r0, #1
    event_flags = flags;
   d68a8:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d68ac:	7320      	strb	r0, [r4, #12]
    return true;
   d68ae:	e7bc      	b.n	d682a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d68b0:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d68b4:	e7d3      	b.n	d685e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d68b6:	4628      	mov	r0, r5
   d68b8:	e7b7      	b.n	d682a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000d68ba <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d68ba:	4770      	bx	lr

000d68bc <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d68bc:	4770      	bx	lr

000d68be <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   d68be:	2001      	movs	r0, #1
   d68c0:	4770      	bx	lr

000d68c2 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d68c2:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d68c4:	bf08      	it	eq
   d68c6:	6001      	streq	r1, [r0, #0]
	}
   d68c8:	2000      	movs	r0, #0
   d68ca:	4770      	bx	lr

000d68cc <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d68cc:	b510      	push	{r4, lr}
}
   d68ce:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d68d0:	4604      	mov	r4, r0
}
   d68d2:	f007 fc47 	bl	de164 <_ZdlPvj>
   d68d6:	4620      	mov	r0, r4
   d68d8:	bd10      	pop	{r4, pc}

000d68da <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d68da:	b510      	push	{r4, lr}
}
   d68dc:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d68de:	4604      	mov	r4, r0
}
   d68e0:	f007 fc40 	bl	de164 <_ZdlPvj>
   d68e4:	4620      	mov	r0, r4
   d68e6:	bd10      	pop	{r4, pc}

000d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d68e8:	b510      	push	{r4, lr}
   d68ea:	4b05      	ldr	r3, [pc, #20]	; (d6900 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d68ec:	4604      	mov	r4, r0
   d68ee:	f840 3b1c 	str.w	r3, [r0], #28
   d68f2:	f006 fe0d 	bl	dd510 <_ZN6StringD1Ev>
   d68f6:	1d20      	adds	r0, r4, #4
   d68f8:	f006 fe0a 	bl	dd510 <_ZN6StringD1Ev>
}
   d68fc:	4620      	mov	r0, r4
   d68fe:	bd10      	pop	{r4, pc}
   d6900:	000dfbf4 	.word	0x000dfbf4

000d6904 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d6904:	b510      	push	{r4, lr}
   d6906:	4604      	mov	r4, r0
}
   d6908:	f7ff ffee 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
   d690c:	4620      	mov	r0, r4
   d690e:	2158      	movs	r1, #88	; 0x58
   d6910:	f007 fc28 	bl	de164 <_ZdlPvj>
   d6914:	4620      	mov	r0, r4
   d6916:	bd10      	pop	{r4, pc}

000d6918 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d6918:	b510      	push	{r4, lr}
   d691a:	4b04      	ldr	r3, [pc, #16]	; (d692c <_ZN9LocalTimeD1Ev+0x14>)
   d691c:	4604      	mov	r4, r0
   d691e:	f840 3b04 	str.w	r3, [r0], #4
   d6922:	f7ff ffe1 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
   d6926:	4620      	mov	r0, r4
   d6928:	bd10      	pop	{r4, pc}
   d692a:	bf00      	nop
   d692c:	000dfbc4 	.word	0x000dfbc4

000d6930 <_ZN9LocalTimeD0Ev>:
   d6930:	b510      	push	{r4, lr}
   d6932:	4604      	mov	r4, r0
   d6934:	f7ff fff0 	bl	d6918 <_ZN9LocalTimeD1Ev>
   d6938:	4620      	mov	r0, r4
   d693a:	2160      	movs	r1, #96	; 0x60
   d693c:	f007 fc12 	bl	de164 <_ZdlPvj>
   d6940:	4620      	mov	r0, r4
   d6942:	bd10      	pop	{r4, pc}

000d6944 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d6944:	f020 0302 	bic.w	r3, r0, #2
   d6948:	2b01      	cmp	r3, #1
   d694a:	d003      	beq.n	d6954 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d694c:	1f43      	subs	r3, r0, #5
   d694e:	4258      	negs	r0, r3
   d6950:	4158      	adcs	r0, r3
   d6952:	4770      	bx	lr
   d6954:	4618      	mov	r0, r3
   d6956:	4770      	bx	lr

000d6958 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d6958:	b108      	cbz	r0, d695e <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
   d695a:	f7fd bba0 	b.w	d409e <_ZdlPv>
	  _Tr::deallocate(_M_impl, __p, __n);
      }
   d695e:	4770      	bx	lr

000d6960 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d6960:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d6962:	b148      	cbz	r0, d6978 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d6964:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d6968:	d301      	bcc.n	d696e <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d696a:	f007 fc01 	bl	de170 <_ZSt17__throw_bad_allocv>
      }
   d696e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6972:	0080      	lsls	r0, r0, #2
   d6974:	f7fd bb8f 	b.w	d4096 <_Znwj>
   d6978:	bd08      	pop	{r3, pc}

000d697a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d697a:	680b      	ldr	r3, [r1, #0]
   d697c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d697e:	684b      	ldr	r3, [r1, #4]
   d6980:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d6982:	b113      	cbz	r3, d698a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d6984:	685a      	ldr	r2, [r3, #4]
   d6986:	3201      	adds	r2, #1
   d6988:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d698a:	4770      	bx	lr

000d698c <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d698c:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d6990:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d6994:	429a      	cmp	r2, r3
   d6996:	db13      	blt.n	d69c0 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d6998:	dc10      	bgt.n	d69bc <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d699a:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d699e:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d69a2:	429a      	cmp	r2, r3
   d69a4:	db0c      	blt.n	d69c0 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d69a6:	dc09      	bgt.n	d69bc <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d69a8:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d69ac:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d69b0:	429a      	cmp	r2, r3
   d69b2:	db05      	blt.n	d69c0 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d69b4:	bfcc      	ite	gt
   d69b6:	2001      	movgt	r0, #1
   d69b8:	2000      	movle	r0, #0
   d69ba:	4770      	bx	lr
            return +1;
   d69bc:	2001      	movs	r0, #1
   d69be:	4770      	bx	lr
            return -1;
   d69c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d69c4:	4770      	bx	lr
	...

000d69c8 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d69c8:	4a02      	ldr	r2, [pc, #8]	; (d69d4 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d69ca:	6002      	str	r2, [r0, #0]
   d69cc:	684a      	ldr	r2, [r1, #4]
   d69ce:	6042      	str	r2, [r0, #4]
   d69d0:	4770      	bx	lr
   d69d2:	bf00      	nop
   d69d4:	000dfbd4 	.word	0x000dfbd4

000d69d8 <_ZN12LocalTimeHMSaSERKS_>:
   d69d8:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d69dc:	7102      	strb	r2, [r0, #4]
   d69de:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d69e2:	7142      	strb	r2, [r0, #5]
   d69e4:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d69e8:	7182      	strb	r2, [r0, #6]
   d69ea:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d69ee:	71c2      	strb	r2, [r0, #7]
   d69f0:	4770      	bx	lr

000d69f2 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d69f2:	b538      	push	{r3, r4, r5, lr}
   d69f4:	460c      	mov	r4, r1
   d69f6:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d69f8:	f100 011c 	add.w	r1, r0, #28
   d69fc:	4620      	mov	r0, r4
   d69fe:	f7ff ffc5 	bl	d698c <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d6a02:	2800      	cmp	r0, #0
   d6a04:	db09      	blt.n	d6a1a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d6a06:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d6a0a:	4620      	mov	r0, r4
   d6a0c:	f7ff ffbe 	bl	d698c <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d6a10:	2800      	cmp	r0, #0
   d6a12:	bfd4      	ite	le
   d6a14:	2000      	movle	r0, #0
   d6a16:	2001      	movgt	r0, #1
    }
   d6a18:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d6a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6a1e:	e7fb      	b.n	d6a18 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d6a20 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d6a20:	b538      	push	{r3, r4, r5, lr}
   d6a22:	4604      	mov	r4, r0
   d6a24:	460d      	mov	r5, r1
   d6a26:	3004      	adds	r0, #4
   d6a28:	3104      	adds	r1, #4
   d6a2a:	f006 fdf8 	bl	dd61e <_ZN6StringaSERKS_>
   d6a2e:	f105 0114 	add.w	r1, r5, #20
   d6a32:	f104 0014 	add.w	r0, r4, #20
   d6a36:	f7ff ffcf 	bl	d69d8 <_ZN12LocalTimeHMSaSERKS_>
   d6a3a:	f105 011c 	add.w	r1, r5, #28
   d6a3e:	f104 001c 	add.w	r0, r4, #28
   d6a42:	f006 fdec 	bl	dd61e <_ZN6StringaSERKS_>
   d6a46:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d6a4a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6a4e:	f7ff ffc3 	bl	d69d8 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d6a52:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d6a56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d6a5a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d6a5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d6a62:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d6a66:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d6a6a:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d6a6e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d6a72:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d6a76:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6a7a:	f7ff ffad 	bl	d69d8 <_ZN12LocalTimeHMSaSERKS_>
   d6a7e:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d6a82:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d6a86:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d6a8a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d6a8e:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d6a92:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d6a96:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d6a9a:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d6a9e:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d6aa2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d6aa6:	f7ff ff97 	bl	d69d8 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d6aaa:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d6aae:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	bd38      	pop	{r3, r4, r5, pc}

000d6ab6 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d6ab6:	694a      	ldr	r2, [r1, #20]
   d6ab8:	6803      	ldr	r3, [r0, #0]
   d6aba:	f362 0316 	bfi	r3, r2, #0, #23
   d6abe:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d6ac0:	690b      	ldr	r3, [r1, #16]
   d6ac2:	1c5a      	adds	r2, r3, #1
   d6ac4:	8843      	ldrh	r3, [r0, #2]
   d6ac6:	f362 13ca 	bfi	r3, r2, #7, #4
   d6aca:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d6acc:	68ca      	ldr	r2, [r1, #12]
   d6ace:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d6ad2:	f362 03c7 	bfi	r3, r2, #3, #5
   d6ad6:	70c3      	strb	r3, [r0, #3]
}
   d6ad8:	4770      	bx	lr

000d6ada <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d6ada:	b510      	push	{r4, lr}
   d6adc:	4604      	mov	r4, r0
   d6ade:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d6ae0:	2224      	movs	r2, #36	; 0x24
   d6ae2:	2100      	movs	r1, #0
   d6ae4:	a803      	add	r0, sp, #12
   d6ae6:	f007 fff1 	bl	deacc <memset>
    timeInfo.tm_year = ymd.year;
   d6aea:	6823      	ldr	r3, [r4, #0]
   d6aec:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6af0:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d6af2:	8863      	ldrh	r3, [r4, #2]
   d6af4:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d6af8:	3b01      	subs	r3, #1
   d6afa:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d6afc:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d6afe:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d6b00:	08db      	lsrs	r3, r3, #3
   d6b02:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d6b04:	f004 fa40 	bl	daf88 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d6b08:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d6b0c:	a903      	add	r1, sp, #12
   d6b0e:	4668      	mov	r0, sp
   d6b10:	f004 fa2a 	bl	daf68 <localtime_r>
}
   d6b14:	9809      	ldr	r0, [sp, #36]	; 0x24
   d6b16:	b00c      	add	sp, #48	; 0x30
   d6b18:	bd10      	pop	{r4, pc}

000d6b1a <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d6b1a:	b530      	push	{r4, r5, lr}
   d6b1c:	4604      	mov	r4, r0
   d6b1e:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d6b20:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d6b22:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d6b24:	a803      	add	r0, sp, #12
   d6b26:	2100      	movs	r1, #0
   d6b28:	f007 ffd0 	bl	deacc <memset>
    timeInfo.tm_year = ymd.year;
   d6b2c:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d6b2e:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d6b30:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6b34:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d6b36:	8863      	ldrh	r3, [r4, #2]
   d6b38:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d6b3c:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d6b3e:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d6b42:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d6b44:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d6b46:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d6b48:	f004 fa1e 	bl	daf88 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d6b4c:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d6b50:	a903      	add	r1, sp, #12
   d6b52:	4668      	mov	r0, sp
   d6b54:	f004 fa08 	bl	daf68 <localtime_r>
    fromTimeInfo(&timeInfo);
   d6b58:	a903      	add	r1, sp, #12
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	f7ff ffab 	bl	d6ab6 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d6b60:	b00d      	add	sp, #52	; 0x34
   d6b62:	bd30      	pop	{r4, r5, pc}

000d6b64 <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d6b64:	6803      	ldr	r3, [r0, #0]
   d6b66:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d6b6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6b6e:	4293      	cmp	r3, r2
   d6b70:	d313      	bcc.n	d6b9a <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d6b72:	d810      	bhi.n	d6b96 <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d6b74:	8842      	ldrh	r2, [r0, #2]
   d6b76:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d6b7a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d6b7e:	429a      	cmp	r2, r3
   d6b80:	d30b      	bcc.n	d6b9a <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d6b82:	d808      	bhi.n	d6b96 <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d6b84:	78c3      	ldrb	r3, [r0, #3]
   d6b86:	08db      	lsrs	r3, r3, #3
   d6b88:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d6b8c:	d305      	bcc.n	d6b9a <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d6b8e:	bf8c      	ite	hi
   d6b90:	2001      	movhi	r0, #1
   d6b92:	2000      	movls	r0, #0
   d6b94:	4770      	bx	lr
        cmp = +1;
   d6b96:	2001      	movs	r0, #1
   d6b98:	4770      	bx	lr
        cmp = -1;
   d6b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6b9e:	4770      	bx	lr

000d6ba0 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d6ba0:	4a02      	ldr	r2, [pc, #8]	; (d6bac <_ZN12LocalTimeHMSC1Ev+0xc>)
   d6ba2:	6002      	str	r2, [r0, #0]
   d6ba4:	2200      	movs	r2, #0
   d6ba6:	6042      	str	r2, [r0, #4]
}
   d6ba8:	4770      	bx	lr
   d6baa:	bf00      	nop
   d6bac:	000dfbd4 	.word	0x000dfbd4

000d6bb0 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d6bb0:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d6bb2:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d6bb4:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d6bb6:	8083      	strh	r3, [r0, #4]
   d6bb8:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d6bba:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d6bbc:	ab05      	add	r3, sp, #20
   d6bbe:	9300      	str	r3, [sp, #0]
   d6bc0:	4913      	ldr	r1, [pc, #76]	; (d6c10 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d6bc2:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d6bc4:	ab04      	add	r3, sp, #16
   d6bc6:	aa03      	add	r2, sp, #12
   d6bc8:	4628      	mov	r0, r5
   d6bca:	f004 f98d 	bl	daee8 <sscanf>
   d6bce:	2803      	cmp	r0, #3
   d6bd0:	d107      	bne.n	d6be2 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d6bd2:	9b03      	ldr	r3, [sp, #12]
   d6bd4:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d6bd6:	9b04      	ldr	r3, [sp, #16]
   d6bd8:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d6bda:	9b05      	ldr	r3, [sp, #20]
   d6bdc:	71a3      	strb	r3, [r4, #6]
}
   d6bde:	b007      	add	sp, #28
   d6be0:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d6be2:	490c      	ldr	r1, [pc, #48]	; (d6c14 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d6be4:	ab04      	add	r3, sp, #16
   d6be6:	aa03      	add	r2, sp, #12
   d6be8:	4628      	mov	r0, r5
   d6bea:	f004 f97d 	bl	daee8 <sscanf>
   d6bee:	2802      	cmp	r0, #2
   d6bf0:	d104      	bne.n	d6bfc <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d6bf2:	9b03      	ldr	r3, [sp, #12]
   d6bf4:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d6bf6:	9b04      	ldr	r3, [sp, #16]
   d6bf8:	7163      	strb	r3, [r4, #5]
   d6bfa:	e7f0      	b.n	d6bde <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d6bfc:	4906      	ldr	r1, [pc, #24]	; (d6c18 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d6bfe:	aa03      	add	r2, sp, #12
   d6c00:	4628      	mov	r0, r5
   d6c02:	f004 f971 	bl	daee8 <sscanf>
   d6c06:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d6c08:	bf04      	itt	eq
   d6c0a:	9b03      	ldreq	r3, [sp, #12]
   d6c0c:	7123      	strbeq	r3, [r4, #4]
}
   d6c0e:	e7e6      	b.n	d6bde <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d6c10:	000dfb6c 	.word	0x000dfb6c
   d6c14:	000dfb6f 	.word	0x000dfb6f
   d6c18:	000df9cb 	.word	0x000df9cb

000d6c1c <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d6c1c:	b510      	push	{r4, lr}
   d6c1e:	4b04      	ldr	r3, [pc, #16]	; (d6c30 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d6c20:	6003      	str	r3, [r0, #0]
   d6c22:	2300      	movs	r3, #0
   d6c24:	4604      	mov	r4, r0
   d6c26:	6043      	str	r3, [r0, #4]
    parse(str);
   d6c28:	f7ff ffc2 	bl	d6bb0 <_ZN12LocalTimeHMS5parseEPKc>
}
   d6c2c:	4620      	mov	r0, r4
   d6c2e:	bd10      	pop	{r4, pc}
   d6c30:	000dfbd4 	.word	0x000dfbd4

000d6c34 <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d6c34:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6c36:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d6c38:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d6c3a:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d6c3c:	7003      	strb	r3, [r0, #0]
   d6c3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d6c42:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d6c46:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d6c4a:	490a      	ldr	r1, [pc, #40]	; (d6c74 <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d6c4c:	301c      	adds	r0, #28
   d6c4e:	f7ff ffe5 	bl	d6c1c <_ZN12LocalTimeHMSC1EPKc>
   d6c52:	4909      	ldr	r1, [pc, #36]	; (d6c78 <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d6c54:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6c58:	f7ff ffe0 	bl	d6c1c <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d6c5c:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d6c60:	4906      	ldr	r1, [pc, #24]	; (d6c7c <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d6c62:	6365      	str	r5, [r4, #52]	; 0x34
   d6c64:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6c68:	f006 fc9d 	bl	dd5a6 <_ZN6StringC1EPKc>
   d6c6c:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d6c6e:	4620      	mov	r0, r4
   d6c70:	bd38      	pop	{r3, r4, r5, pc}
   d6c72:	bf00      	nop
   d6c74:	000dfb75 	.word	0x000dfb75
   d6c78:	000dfb7e 	.word	0x000dfb7e
   d6c7c:	000e03d1 	.word	0x000e03d1

000d6c80 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d6c80:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6c84:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d6c88:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d6c8c:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d6c8e:	bfb8      	it	lt
   d6c90:	4808      	ldrlt	r0, [pc, #32]	; (d6cb4 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d6c92:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d6c96:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d6c9a:	bfbd      	ittte	lt
   d6c9c:	fb00 2003 	mlalt	r0, r0, r3, r2
   d6ca0:	1840      	addlt	r0, r0, r1
   d6ca2:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d6ca4:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d6ca8:	bfa4      	itt	ge
   d6caa:	fb00 2303 	mlage	r3, r0, r3, r2
   d6cae:	1858      	addge	r0, r3, r1
}
   d6cb0:	4770      	bx	lr
   d6cb2:	bf00      	nop
   d6cb4:	fffff1f0 	.word	0xfffff1f0

000d6cb8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d6cb8:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d6cbc:	b943      	cbnz	r3, d6cd0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d6cbe:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6cc2:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d6cc4:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d6cc8:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d6cca:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d6cce:	600b      	str	r3, [r1, #0]
}
   d6cd0:	4770      	bx	lr

000d6cd2 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d6cd2:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d6cd6:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d6cd8:	b9b3      	cbnz	r3, d6d08 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d6cda:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d6cde:	688c      	ldr	r4, [r1, #8]
   d6ce0:	442c      	add	r4, r5
   d6ce2:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d6ce6:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d6ce8:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d6cec:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d6cee:	bfb5      	itete	lt
   d6cf0:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d6cf2:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d6cf4:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d6cf6:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d6cf8:	bfb5      	itete	lt
   d6cfa:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d6cfe:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d6d02:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d6d04:	189b      	addge	r3, r3, r2
   d6d06:	600b      	str	r3, [r1, #0]
}
   d6d08:	bd30      	pop	{r4, r5, pc}

000d6d0a <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d6d0a:	b538      	push	{r3, r4, r5, lr}
   d6d0c:	6844      	ldr	r4, [r0, #4]
   d6d0e:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d6d10:	68ab      	ldr	r3, [r5, #8]
   d6d12:	42a3      	cmp	r3, r4
   d6d14:	d007      	beq.n	d6d26 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d6d16:	4620      	mov	r0, r4
   d6d18:	f7ff ff24 	bl	d6b64 <_ZNK12LocalTimeYMD9compareToES_>
   d6d1c:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6d1e:	2800      	cmp	r0, #0
   d6d20:	d1f6      	bne.n	d6d10 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d6d22:	2001      	movs	r0, #1
}
   d6d24:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d6d26:	2000      	movs	r0, #0
   d6d28:	e7fc      	b.n	d6d24 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d6d2a <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d6d2a:	b538      	push	{r3, r4, r5, lr}
   d6d2c:	6904      	ldr	r4, [r0, #16]
   d6d2e:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d6d30:	696b      	ldr	r3, [r5, #20]
   d6d32:	42a3      	cmp	r3, r4
   d6d34:	d007      	beq.n	d6d46 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d6d36:	4620      	mov	r0, r4
   d6d38:	f7ff ff14 	bl	d6b64 <_ZNK12LocalTimeYMD9compareToES_>
   d6d3c:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6d3e:	2800      	cmp	r0, #0
   d6d40:	d1f6      	bne.n	d6d30 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d6d42:	2001      	movs	r0, #1
}
   d6d44:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d6d46:	2000      	movs	r0, #0
   d6d48:	e7fc      	b.n	d6d44 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d6d4a <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d6d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6d4c:	4605      	mov	r5, r0
   d6d4e:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d6d50:	f7ff ffeb 	bl	d6d2a <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d6d54:	b990      	cbnz	r0, d6d7c <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d6d56:	a801      	add	r0, sp, #4
   d6d58:	9101      	str	r1, [sp, #4]
   d6d5a:	f7ff febe 	bl	d6ada <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d6d5e:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d6d60:	4631      	mov	r1, r6
   d6d62:	fa43 f400 	asr.w	r4, r3, r0
   d6d66:	4628      	mov	r0, r5
   d6d68:	f7ff ffcf 	bl	d6d0a <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d6d6c:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d6d70:	2c00      	cmp	r4, #0
   d6d72:	bf08      	it	eq
   d6d74:	4604      	moveq	r4, r0
}
   d6d76:	4620      	mov	r0, r4
   d6d78:	b002      	add	sp, #8
   d6d7a:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d6d7c:	2400      	movs	r4, #0
   d6d7e:	e7fa      	b.n	d6d76 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d6d80 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d6d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d6d84:	2400      	movs	r4, #0
   d6d86:	6845      	ldr	r5, [r0, #4]
   d6d88:	4680      	mov	r8, r0
   d6d8a:	4626      	mov	r6, r4
   d6d8c:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d6d8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d6d92:	429d      	cmp	r5, r3
   d6d94:	d01e      	beq.n	d6dd4 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d6d96:	f367 0916 	bfi	r9, r7, #0, #23
   d6d9a:	f366 59da 	bfi	r9, r6, #23, #4
   d6d9e:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d6da2:	f1b9 0f00 	cmp.w	r9, #0
   d6da6:	d109      	bne.n	d6dbc <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d6da8:	682f      	ldr	r7, [r5, #0]
   d6daa:	886e      	ldrh	r6, [r5, #2]
   d6dac:	78ec      	ldrb	r4, [r5, #3]
   d6dae:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d6db2:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d6db6:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d6db8:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d6dba:	e7e8      	b.n	d6d8e <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d6dbc:	f367 0116 	bfi	r1, r7, #0, #23
   d6dc0:	f366 51da 	bfi	r1, r6, #23, #4
   d6dc4:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d6dc8:	4628      	mov	r0, r5
   d6dca:	f7ff fecb 	bl	d6b64 <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d6dce:	2800      	cmp	r0, #0
   d6dd0:	dcea      	bgt.n	d6da8 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d6dd2:	e7f1      	b.n	d6db8 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d6dd4:	2000      	movs	r0, #0
   d6dd6:	f367 0016 	bfi	r0, r7, #0, #23
   d6dda:	f366 50da 	bfi	r0, r6, #23, #4
   d6dde:	f364 60df 	bfi	r0, r4, #27, #5
}
   d6de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d6de8 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d6de8:	4a05      	ldr	r2, [pc, #20]	; (d6e00 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d6dea:	b508      	push	{r3, lr}
   d6dec:	6002      	str	r2, [r0, #0]
   d6dee:	2200      	movs	r2, #0
   d6df0:	4603      	mov	r3, r0
   d6df2:	6042      	str	r2, [r0, #4]
   d6df4:	3008      	adds	r0, #8
   d6df6:	f7ff fed3 	bl	d6ba0 <_ZN12LocalTimeHMSC1Ev>
}
   d6dfa:	4618      	mov	r0, r3
   d6dfc:	bd08      	pop	{r3, pc}
   d6dfe:	bf00      	nop
   d6e00:	000dfbe4 	.word	0x000dfbe4

000d6e04 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d6e04:	2300      	movs	r3, #0
   d6e06:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d6e08:	8183      	strh	r3, [r0, #12]
   d6e0a:	7383      	strb	r3, [r0, #14]
}
   d6e0c:	4770      	bx	lr
	...

000d6e10 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d6e10:	b530      	push	{r4, r5, lr}
   d6e12:	4604      	mov	r4, r0
   d6e14:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d6e16:	460d      	mov	r5, r1
   d6e18:	b111      	cbz	r1, d6e20 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d6e1a:	780b      	ldrb	r3, [r1, #0]
   d6e1c:	2b4d      	cmp	r3, #77	; 0x4d
   d6e1e:	d003      	beq.n	d6e28 <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d6e20:	4620      	mov	r0, r4
   d6e22:	f7ff ffef 	bl	d6e04 <_ZN15LocalTimeChange5clearEv>
   d6e26:	e01b      	b.n	d6e60 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d6e28:	ab05      	add	r3, sp, #20
   d6e2a:	9300      	str	r3, [sp, #0]
   d6e2c:	490f      	ldr	r1, [pc, #60]	; (d6e6c <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d6e2e:	ab04      	add	r3, sp, #16
   d6e30:	aa03      	add	r2, sp, #12
   d6e32:	4628      	mov	r0, r5
   d6e34:	f004 f858 	bl	daee8 <sscanf>
   d6e38:	2803      	cmp	r0, #3
   d6e3a:	d1f1      	bne.n	d6e20 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d6e3c:	9b03      	ldr	r3, [sp, #12]
   d6e3e:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d6e40:	9b04      	ldr	r3, [sp, #16]
   d6e42:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d6e44:	9b05      	ldr	r3, [sp, #20]
   d6e46:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d6e48:	212f      	movs	r1, #47	; 0x2f
   d6e4a:	4628      	mov	r0, r5
   d6e4c:	f007 fe9e 	bl	deb8c <strchr>
        if (cp) {
   d6e50:	b140      	cbz	r0, d6e64 <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d6e52:	1c41      	adds	r1, r0, #1
   d6e54:	f104 0008 	add.w	r0, r4, #8
   d6e58:	f7ff feaa 	bl	d6bb0 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d6e5c:	2301      	movs	r3, #1
   d6e5e:	71e3      	strb	r3, [r4, #7]
}
   d6e60:	b007      	add	sp, #28
   d6e62:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d6e64:	81a0      	strh	r0, [r4, #12]
   d6e66:	73a0      	strb	r0, [r4, #14]
}
   d6e68:	e7f8      	b.n	d6e5c <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d6e6a:	bf00      	nop
   d6e6c:	000dfb87 	.word	0x000dfb87

000d6e70 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d6e70:	4b10      	ldr	r3, [pc, #64]	; (d6eb4 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d6e72:	4911      	ldr	r1, [pc, #68]	; (d6eb8 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d6e74:	b510      	push	{r4, lr}
   d6e76:	4604      	mov	r4, r0
   d6e78:	f840 3b04 	str.w	r3, [r0], #4
   d6e7c:	f006 fb93 	bl	dd5a6 <_ZN6StringC1EPKc>
   d6e80:	f104 0014 	add.w	r0, r4, #20
   d6e84:	f7ff fe8c 	bl	d6ba0 <_ZN12LocalTimeHMSC1Ev>
   d6e88:	490b      	ldr	r1, [pc, #44]	; (d6eb8 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d6e8a:	f104 001c 	add.w	r0, r4, #28
   d6e8e:	f006 fb8a 	bl	dd5a6 <_ZN6StringC1EPKc>
   d6e92:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6e96:	f7ff fe83 	bl	d6ba0 <_ZN12LocalTimeHMSC1Ev>
   d6e9a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6e9e:	f7ff ffa3 	bl	d6de8 <_ZN15LocalTimeChangeC1Ev>
   d6ea2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6ea6:	f7ff ff9f 	bl	d6de8 <_ZN15LocalTimeChangeC1Ev>
   d6eaa:	2300      	movs	r3, #0
   d6eac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	bd10      	pop	{r4, pc}
   d6eb4:	000dfbf4 	.word	0x000dfbf4
   d6eb8:	000e03d1 	.word	0x000e03d1

000d6ebc <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d6ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ec0:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d6ec2:	4608      	mov	r0, r1
   d6ec4:	f007 fe8c 	bl	debe0 <strdup>
    size_t ii = 0;
   d6ec8:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d6eca:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d6ecc:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d6ece:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d6ed2:	493f      	ldr	r1, [pc, #252]	; (d6fd0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d6ed4:	9801      	ldr	r0, [sp, #4]
   d6ed6:	aa01      	add	r2, sp, #4
   d6ed8:	f007 ff08 	bl	decec <strtok_r>
   d6edc:	4601      	mov	r1, r0
   d6ede:	2800      	cmp	r0, #0
   d6ee0:	d062      	beq.n	d6fa8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d6ee2:	2d01      	cmp	r5, #1
   d6ee4:	f105 0301 	add.w	r3, r5, #1
   d6ee8:	d053      	beq.n	d6f92 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d6eea:	2d02      	cmp	r5, #2
   d6eec:	d056      	beq.n	d6f9c <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d6eee:	2d00      	cmp	r5, #0
   d6ef0:	d146      	bne.n	d6f80 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d6ef2:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d6ef4:	f892 9000 	ldrb.w	r9, [r2]
   d6ef8:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d6efc:	4615      	mov	r5, r2
   d6efe:	4617      	mov	r7, r2
   d6f00:	f102 0201 	add.w	r2, r2, #1
   d6f04:	d8f6      	bhi.n	d6ef4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d6f06:	2200      	movs	r2, #0
   d6f08:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d6f0a:	f104 001c 	add.w	r0, r4, #28
   d6f0e:	f006 fba8 	bl	dd662 <_ZN6StringaSEPKc>
                valid = true;
   d6f12:	2201      	movs	r2, #1
                *cp = save2;
   d6f14:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d6f18:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d6f1c:	782a      	ldrb	r2, [r5, #0]
   d6f1e:	b36a      	cbz	r2, d6f7c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d6f20:	f897 a000 	ldrb.w	sl, [r7]
   d6f24:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d6f28:	2a3f      	cmp	r2, #63	; 0x3f
   d6f2a:	46b9      	mov	r9, r7
   d6f2c:	46bb      	mov	fp, r7
   d6f2e:	f107 0701 	add.w	r7, r7, #1
   d6f32:	d9f5      	bls.n	d6f20 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d6f34:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d6f36:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d6f3a:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d6f3e:	4629      	mov	r1, r5
   d6f40:	4638      	mov	r0, r7
   d6f42:	f7ff fe35 	bl	d6bb0 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d6f46:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d6f4a:	f1ba 0f00 	cmp.w	sl, #0
   d6f4e:	d015      	beq.n	d6f7c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d6f50:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d6f52:	f81b ab01 	ldrb.w	sl, [fp], #1
   d6f56:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d6f5a:	d8f9      	bhi.n	d6f50 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d6f5c:	2200      	movs	r2, #0
   d6f5e:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d6f60:	4649      	mov	r1, r9
   d6f62:	1d20      	adds	r0, r4, #4
   d6f64:	f006 fb7d 	bl	dd662 <_ZN6StringaSEPKc>
                        *cp = save2;
   d6f68:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d6f6c:	f104 0014 	add.w	r0, r4, #20
   d6f70:	f1ba 0f00 	cmp.w	sl, #0
   d6f74:	d006      	beq.n	d6f84 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d6f76:	4629      	mov	r1, r5
   d6f78:	f7ff fe1a 	bl	d6bb0 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d6f7c:	2501      	movs	r5, #1
   d6f7e:	e7a8      	b.n	d6ed2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d6f80:	461d      	mov	r5, r3
   d6f82:	e7a6      	b.n	d6ed2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d6f84:	4639      	mov	r1, r7
   d6f86:	f7ff fd27 	bl	d69d8 <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d6f8a:	7e23      	ldrb	r3, [r4, #24]
   d6f8c:	3b01      	subs	r3, #1
   d6f8e:	7623      	strb	r3, [r4, #24]
   d6f90:	e7f4      	b.n	d6f7c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d6f92:	4640      	mov	r0, r8
   d6f94:	f7ff ff3c 	bl	d6e10 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d6f98:	2502      	movs	r5, #2
   d6f9a:	e79a      	b.n	d6ed2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d6f9c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6fa0:	f7ff ff36 	bl	d6e10 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d6fa4:	2503      	movs	r5, #3
   d6fa6:	e794      	b.n	d6ed2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d6fa8:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d6fac:	b143      	cbz	r3, d6fc0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d6fae:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d6fb2:	b92a      	cbnz	r2, d6fc0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d6fb4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6fb8:	f7ff ff24 	bl	d6e04 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d6fbc:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d6fc0:	4630      	mov	r0, r6
   d6fc2:	f003 ff79 	bl	daeb8 <free>
}
   d6fc6:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d6fca:	b003      	add	sp, #12
   d6fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fd0:	000dfb91 	.word	0x000dfb91

000d6fd4 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d6fd4:	b538      	push	{r3, r4, r5, lr}
   d6fd6:	4b13      	ldr	r3, [pc, #76]	; (d7024 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d6fd8:	4604      	mov	r4, r0
   d6fda:	460d      	mov	r5, r1
   d6fdc:	f840 3b04 	str.w	r3, [r0], #4
   d6fe0:	4911      	ldr	r1, [pc, #68]	; (d7028 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d6fe2:	f006 fae0 	bl	dd5a6 <_ZN6StringC1EPKc>
   d6fe6:	f104 0014 	add.w	r0, r4, #20
   d6fea:	f7ff fdd9 	bl	d6ba0 <_ZN12LocalTimeHMSC1Ev>
   d6fee:	490e      	ldr	r1, [pc, #56]	; (d7028 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d6ff0:	f104 001c 	add.w	r0, r4, #28
   d6ff4:	f006 fad7 	bl	dd5a6 <_ZN6StringC1EPKc>
   d6ff8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6ffc:	f7ff fdd0 	bl	d6ba0 <_ZN12LocalTimeHMSC1Ev>
   d7000:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d7004:	f7ff fef0 	bl	d6de8 <_ZN15LocalTimeChangeC1Ev>
   d7008:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d700c:	f7ff feec 	bl	d6de8 <_ZN15LocalTimeChangeC1Ev>
   d7010:	2300      	movs	r3, #0
   d7012:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d7016:	4629      	mov	r1, r5
   d7018:	4620      	mov	r0, r4
   d701a:	f7ff ff4f 	bl	d6ebc <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d701e:	4620      	mov	r0, r4
   d7020:	bd38      	pop	{r3, r4, r5, pc}
   d7022:	bf00      	nop
   d7024:	000dfbf4 	.word	0x000dfbf4
   d7028:	000e03d1 	.word	0x000e03d1

000d702c <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d702c:	b508      	push	{r3, lr}
   d702e:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d7030:	f7ff fdb6 	bl	d6ba0 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d7034:	688a      	ldr	r2, [r1, #8]
   d7036:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d7038:	684a      	ldr	r2, [r1, #4]
   d703a:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d703c:	680a      	ldr	r2, [r1, #0]
   d703e:	719a      	strb	r2, [r3, #6]
}
   d7040:	4618      	mov	r0, r3
   d7042:	bd08      	pop	{r3, pc}

000d7044 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d7044:	b513      	push	{r0, r1, r4, lr}
   d7046:	4b07      	ldr	r3, [pc, #28]	; (d7064 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d7048:	6003      	str	r3, [r0, #0]
   d704a:	2300      	movs	r3, #0
   d704c:	4604      	mov	r4, r0
   d704e:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d7050:	4668      	mov	r0, sp
   d7052:	f7ff ffeb 	bl	d702c <_ZNK14LocalTimeValue3hmsEv>
   d7056:	4669      	mov	r1, sp
   d7058:	4620      	mov	r0, r4
   d705a:	f7ff fcbd 	bl	d69d8 <_ZN12LocalTimeHMSaSERKS_>
}
   d705e:	4620      	mov	r0, r4
   d7060:	b002      	add	sp, #8
   d7062:	bd10      	pop	{r4, pc}
   d7064:	000dfbd4 	.word	0x000dfbd4

000d7068 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d7068:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d706c:	b943      	cbnz	r3, d7080 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d706e:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d7072:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d7074:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d7078:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d707a:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d707e:	6003      	str	r3, [r0, #0]
}
   d7080:	4770      	bx	lr

000d7082 <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d7082:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d7084:	2300      	movs	r3, #0
   d7086:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d7088:	a801      	add	r0, sp, #4
   d708a:	9301      	str	r3, [sp, #4]
   d708c:	f7ff fd13 	bl	d6ab6 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d7090:	9801      	ldr	r0, [sp, #4]
   d7092:	b003      	add	sp, #12
   d7094:	f85d fb04 	ldr.w	pc, [sp], #4

000d7098 <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d7098:	4b19      	ldr	r3, [pc, #100]	; (d7100 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d709a:	b570      	push	{r4, r5, r6, lr}
   d709c:	4604      	mov	r4, r0
   d709e:	460d      	mov	r5, r1
   d70a0:	f840 3b04 	str.w	r3, [r0], #4
   d70a4:	3104      	adds	r1, #4
   d70a6:	f006 fac9 	bl	dd63c <_ZN6StringC1ERKS_>
   d70aa:	f105 0114 	add.w	r1, r5, #20
   d70ae:	f104 0014 	add.w	r0, r4, #20
   d70b2:	f7ff fc89 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d70b6:	f105 011c 	add.w	r1, r5, #28
   d70ba:	f104 001c 	add.w	r0, r4, #28
   d70be:	f006 fabd 	bl	dd63c <_ZN6StringC1ERKS_>
   d70c2:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d70c6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d70ca:	f7ff fc7d 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d70ce:	4e0d      	ldr	r6, [pc, #52]	; (d7104 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d70d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d70d2:	63a3      	str	r3, [r4, #56]	; 0x38
   d70d4:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d70d8:	6366      	str	r6, [r4, #52]	; 0x34
   d70da:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d70de:	f7ff fc73 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d70e2:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d70e4:	64a3      	str	r3, [r4, #72]	; 0x48
   d70e6:	6466      	str	r6, [r4, #68]	; 0x44
   d70e8:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d70ec:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d70f0:	f7ff fc6a 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d70f4:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d70f8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d70fc:	4620      	mov	r0, r4
   d70fe:	bd70      	pop	{r4, r5, r6, pc}
   d7100:	000dfbf4 	.word	0x000dfbf4
   d7104:	000dfbe4 	.word	0x000dfbe4

000d7108 <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d7108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d710a:	460c      	mov	r4, r1
   d710c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7110:	4607      	mov	r7, r0
   d7112:	f840 3b04 	str.w	r3, [r0], #4
   d7116:	f7ff ffbf 	bl	d7098 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d711a:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d711e:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d7122:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d7126:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7128:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d712c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d712e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7132:	6833      	ldr	r3, [r6, #0]
   d7134:	602b      	str	r3, [r5, #0]
   d7136:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d713a:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d713e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d7142:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7144:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d7148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d714a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d714c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d714e:	6833      	ldr	r3, [r6, #0]
   d7150:	602b      	str	r3, [r5, #0]
   d7152:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d7156:	34c8      	adds	r4, #200	; 0xc8
   d7158:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d715c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d715e:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d7162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7168:	6823      	ldr	r3, [r4, #0]
   d716a:	602b      	str	r3, [r5, #0]
   d716c:	4638      	mov	r0, r7
   d716e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7170 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d7170:	b510      	push	{r4, lr}
   d7172:	4604      	mov	r4, r0
   d7174:	3038      	adds	r0, #56	; 0x38
   d7176:	f006 f9cb 	bl	dd510 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d717a:	6920      	ldr	r0, [r4, #16]
   d717c:	f7ff fbec 	bl	d6958 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d7180:	6860      	ldr	r0, [r4, #4]
   d7182:	f7ff fbe9 	bl	d6958 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d7186:	4620      	mov	r0, r4
   d7188:	bd10      	pop	{r4, pc}

000d718a <_ZN16LocalTimeConvert7timeStrEv>:
String LocalTimeConvert::timeStr() {
   d718a:	b510      	push	{r4, lr}
   d718c:	4604      	mov	r4, r0
   d718e:	b088      	sub	sp, #32
   d7190:	4608      	mov	r0, r1
    asctime_r(&localTimeValue, ascstr);
   d7192:	3068      	adds	r0, #104	; 0x68
   d7194:	a901      	add	r1, sp, #4
   d7196:	f007 fc33 	bl	dea00 <asctime_r>
    int len = strlen(ascstr);
   d719a:	a801      	add	r0, sp, #4
   d719c:	f007 fd3d 	bl	dec1a <strlen>
    ascstr[len-1] = 0; // remove final newline
   d71a0:	ab08      	add	r3, sp, #32
   d71a2:	4418      	add	r0, r3
   d71a4:	2300      	movs	r3, #0
   d71a6:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   d71aa:	a901      	add	r1, sp, #4
   d71ac:	4620      	mov	r0, r4
   d71ae:	f006 f9fa 	bl	dd5a6 <_ZN6StringC1EPKc>
}
   d71b2:	4620      	mov	r0, r4
   d71b4:	b008      	add	sp, #32
   d71b6:	bd10      	pop	{r4, pc}

000d71b8 <_ZNK16LocalTimeConvert8zoneNameEv>:
String LocalTimeConvert::zoneName() const { 
   d71b8:	b538      	push	{r3, r4, r5, lr}
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   d71ba:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
   d71be:	4605      	mov	r5, r0
   d71c0:	460c      	mov	r4, r1
   d71c2:	b13b      	cbz	r3, d71d4 <_ZNK16LocalTimeConvert8zoneNameEv+0x1c>
   d71c4:	f991 303f 	ldrsb.w	r3, [r1, #63]	; 0x3f
   d71c8:	b953      	cbnz	r3, d71e0 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
   d71ca:	f101 0030 	add.w	r0, r1, #48	; 0x30
   d71ce:	f7ff fd57 	bl	d6c80 <_ZNK12LocalTimeHMS9toSecondsEv>
   d71d2:	b928      	cbnz	r0, d71e0 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
        return "Z";
   d71d4:	4909      	ldr	r1, [pc, #36]	; (d71fc <_ZNK16LocalTimeConvert8zoneNameEv+0x44>)
   d71d6:	4628      	mov	r0, r5
   d71d8:	f006 f9e5 	bl	dd5a6 <_ZN6StringC1EPKc>
};
   d71dc:	4628      	mov	r0, r5
   d71de:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   d71e0:	6820      	ldr	r0, [r4, #0]
   d71e2:	f7ff fbaf 	bl	d6944 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d71e6:	b128      	cbz	r0, d71f4 <_ZNK16LocalTimeConvert8zoneNameEv+0x3c>
        return config.dstName;
   d71e8:	f104 0108 	add.w	r1, r4, #8
        return config.standardName;
   d71ec:	4628      	mov	r0, r5
   d71ee:	f006 fa25 	bl	dd63c <_ZN6StringC1ERKS_>
   d71f2:	e7f3      	b.n	d71dc <_ZNK16LocalTimeConvert8zoneNameEv+0x24>
   d71f4:	f104 0120 	add.w	r1, r4, #32
   d71f8:	e7f8      	b.n	d71ec <_ZNK16LocalTimeConvert8zoneNameEv+0x34>
   d71fa:	bf00      	nop
   d71fc:	000dfb93 	.word	0x000dfb93

000d7200 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   d7200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7204:	4680      	mov	r8, r0
   d7206:	b0a9      	sub	sp, #164	; 0xa4
   d7208:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d720a:	4615      	mov	r5, r2
   d720c:	b12a      	cbz	r2, d721a <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   d720e:	4b4b      	ldr	r3, [pc, #300]	; (d733c <_ZN16LocalTimeConvert6formatEPKc+0x13c>)
   d7210:	4610      	mov	r0, r2
   d7212:	6819      	ldr	r1, [r3, #0]
   d7214:	f007 fcd1 	bl	debba <strcmp>
   d7218:	b938      	cbnz	r0, d722a <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   d721a:	4621      	mov	r1, r4
   d721c:	4640      	mov	r0, r8
   d721e:	f7ff ffb4 	bl	d718a <_ZN16LocalTimeConvert7timeStrEv>
}
   d7222:	4640      	mov	r0, r8
   d7224:	b029      	add	sp, #164	; 0xa4
   d7226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d722a:	4629      	mov	r1, r5
   d722c:	223f      	movs	r2, #63	; 0x3f
   d722e:	a818      	add	r0, sp, #96	; 0x60
   d7230:	f007 fd0d 	bl	dec4e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7234:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7236:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7238:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d723c:	f007 fced 	bl	dec1a <strlen>
    String zoneNameStr = zoneName();
   d7240:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7242:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   d7244:	a803      	add	r0, sp, #12
   d7246:	f7ff ffb7 	bl	d71b8 <_ZNK16LocalTimeConvert8zoneNameEv>
   d724a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   d724e:	b13b      	cbz	r3, d7260 <_ZN16LocalTimeConvert6formatEPKc+0x60>
   d7250:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d7254:	bb83      	cbnz	r3, d72b8 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
   d7256:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d725a:	f7ff fd11 	bl	d6c80 <_ZNK12LocalTimeHMS9toSecondsEv>
   d725e:	bb58      	cbnz	r0, d72b8 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
        strcpy(time_zone_str, "Z");
   d7260:	4937      	ldr	r1, [pc, #220]	; (d7340 <_ZN16LocalTimeConvert6formatEPKc+0x140>)
   d7262:	a807      	add	r0, sp, #28
   d7264:	f007 fcb3 	bl	debce <strcpy>
   d7268:	af18      	add	r7, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   d726a:	2600      	movs	r6, #0
    for (size_t i=0; i<len-1; i++)
   d726c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   d7270:	45b3      	cmp	fp, r6
   d7272:	d94e      	bls.n	d7312 <_ZN16LocalTimeConvert6formatEPKc+0x112>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d7274:	46ba      	mov	sl, r7
   d7276:	f106 0901 	add.w	r9, r6, #1
   d727a:	f81a 3b01 	ldrb.w	r3, [sl], #1
   d727e:	2b25      	cmp	r3, #37	; 0x25
   d7280:	d117      	bne.n	d72b2 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
   d7282:	787b      	ldrb	r3, [r7, #1]
   d7284:	2b7a      	cmp	r3, #122	; 0x7a
   d7286:	d136      	bne.n	d72f6 <_ZN16LocalTimeConvert6formatEPKc+0xf6>
            size_t tzlen = strlen(time_zone_str);
   d7288:	a807      	add	r0, sp, #28
   d728a:	f007 fcc6 	bl	dec1a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d728e:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   d7290:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7292:	1830      	adds	r0, r6, r0
   d7294:	ebab 0206 	sub.w	r2, fp, r6
   d7298:	1cb9      	adds	r1, r7, #2
   d729a:	4418      	add	r0, r3
   d729c:	f007 fbee 	bl	dea7c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d72a0:	462a      	mov	r2, r5
   d72a2:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d72a4:	4638      	mov	r0, r7
   d72a6:	f007 fbe9 	bl	dea7c <memcpy>
            len = strlen(format_str);
   d72aa:	a818      	add	r0, sp, #96	; 0x60
   d72ac:	f007 fcb5 	bl	dec1a <strlen>
   d72b0:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   d72b2:	4657      	mov	r7, sl
   d72b4:	464e      	mov	r6, r9
   d72b6:	e7d9      	b.n	d726c <_ZN16LocalTimeConvert6formatEPKc+0x6c>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d72b8:	6820      	ldr	r0, [r4, #0]
   d72ba:	f7ff fb43 	bl	d6944 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d72be:	b1b8      	cbz	r0, d72f0 <_ZN16LocalTimeConvert6formatEPKc+0xf0>
   d72c0:	f104 0018 	add.w	r0, r4, #24
   d72c4:	f7ff fcdc 	bl	d6c80 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   d72c8:	213c      	movs	r1, #60	; 0x3c
   d72ca:	fb90 f3f1 	sdiv	r3, r0, r1
   d72ce:	2b00      	cmp	r3, #0
   d72d0:	bfb8      	it	lt
   d72d2:	425b      	neglt	r3, r3
   d72d4:	fbb3 f2f1 	udiv	r2, r3, r1
   d72d8:	fb01 3312 	mls	r3, r1, r2, r3
   d72dc:	9300      	str	r3, [sp, #0]
   d72de:	4a19      	ldr	r2, [pc, #100]	; (d7344 <_ZN16LocalTimeConvert6formatEPKc+0x144>)
   d72e0:	4b19      	ldr	r3, [pc, #100]	; (d7348 <_ZN16LocalTimeConvert6formatEPKc+0x148>)
   d72e2:	fb90 f3f3 	sdiv	r3, r0, r3
   d72e6:	2110      	movs	r1, #16
   d72e8:	a807      	add	r0, sp, #28
   d72ea:	f003 fe05 	bl	daef8 <snprintf>
   d72ee:	e7bb      	b.n	d7268 <_ZN16LocalTimeConvert6formatEPKc+0x68>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d72f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d72f4:	e7e6      	b.n	d72c4 <_ZN16LocalTimeConvert6formatEPKc+0xc4>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   d72f6:	2b5a      	cmp	r3, #90	; 0x5a
   d72f8:	d1db      	bne.n	d72b2 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
            size_t tzlen = zoneNameStr.length();
   d72fa:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d72fc:	ab18      	add	r3, sp, #96	; 0x60
   d72fe:	1970      	adds	r0, r6, r5
   d7300:	ebab 0206 	sub.w	r2, fp, r6
   d7304:	1cb9      	adds	r1, r7, #2
   d7306:	4418      	add	r0, r3
   d7308:	f007 fbb8 	bl	dea7c <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d730c:	9903      	ldr	r1, [sp, #12]
   d730e:	462a      	mov	r2, r5
   d7310:	e7c8      	b.n	d72a4 <_ZN16LocalTimeConvert6formatEPKc+0xa4>
    char buf[50] = {};
   d7312:	2100      	movs	r1, #0
   d7314:	222e      	movs	r2, #46	; 0x2e
   d7316:	a80c      	add	r0, sp, #48	; 0x30
   d7318:	910b      	str	r1, [sp, #44]	; 0x2c
   d731a:	f007 fbd7 	bl	deacc <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   d731e:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d7322:	aa18      	add	r2, sp, #96	; 0x60
   d7324:	2132      	movs	r1, #50	; 0x32
   d7326:	a80b      	add	r0, sp, #44	; 0x2c
   d7328:	f003 fe16 	bl	daf58 <strftime>
    return String(buf);    
   d732c:	a90b      	add	r1, sp, #44	; 0x2c
   d732e:	4640      	mov	r0, r8
   d7330:	f006 f939 	bl	dd5a6 <_ZN6StringC1EPKc>
    String zoneNameStr = zoneName();
   d7334:	a803      	add	r0, sp, #12
   d7336:	f006 f8eb 	bl	dd510 <_ZN6StringD1Ev>
   d733a:	e772      	b.n	d7222 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   d733c:	2003dc44 	.word	0x2003dc44
   d7340:	000dfb93 	.word	0x000dfb93
   d7344:	000dfb95 	.word	0x000dfb95
   d7348:	fffff1f0 	.word	0xfffff1f0

000d734c <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d734c:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d734e:	4d09      	ldr	r5, [pc, #36]	; (d7374 <_ZN9LocalTime8instanceEv+0x28>)
   d7350:	682b      	ldr	r3, [r5, #0]
   d7352:	b963      	cbnz	r3, d736e <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d7354:	2060      	movs	r0, #96	; 0x60
   d7356:	f7fc fe9e 	bl	d4096 <_Znwj>
   d735a:	4604      	mov	r4, r0
   d735c:	b130      	cbz	r0, d736c <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d735e:	4b06      	ldr	r3, [pc, #24]	; (d7378 <_ZN9LocalTime8instanceEv+0x2c>)
   d7360:	f840 3b04 	str.w	r3, [r0], #4
   d7364:	f7ff fd84 	bl	d6e70 <_ZN22LocalTimePosixTimezoneC1Ev>
   d7368:	2364      	movs	r3, #100	; 0x64
   d736a:	65e3      	str	r3, [r4, #92]	; 0x5c
   d736c:	602c      	str	r4, [r5, #0]
}
   d736e:	6828      	ldr	r0, [r5, #0]
   d7370:	bd38      	pop	{r3, r4, r5, pc}
   d7372:	bf00      	nop
   d7374:	2003e25c 	.word	0x2003e25c
   d7378:	000dfbc4 	.word	0x000dfbc4

000d737c <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d737c:	f003 be04 	b.w	daf88 <mktime>

000d7380 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d7380:	3901      	subs	r1, #1
   d7382:	290b      	cmp	r1, #11
   d7384:	d815      	bhi.n	d73b2 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d7386:	e8df f001 	tbb	[pc, r1]
   d738a:	0816      	.short	0x0816
   d738c:	06160616 	.word	0x06160616
   d7390:	16061616 	.word	0x16061616
   d7394:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d7396:	201e      	movs	r0, #30
   d7398:	4770      	bx	lr
            if ((year % 4) == 0) {
   d739a:	0783      	lsls	r3, r0, #30
   d739c:	d10d      	bne.n	d73ba <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d739e:	2264      	movs	r2, #100	; 0x64
   d73a0:	fb90 f3f2 	sdiv	r3, r0, r2
   d73a4:	fb02 0013 	mls	r0, r2, r3, r0
   d73a8:	2800      	cmp	r0, #0
                    return 29;
   d73aa:	bf0c      	ite	eq
   d73ac:	201c      	moveq	r0, #28
   d73ae:	201d      	movne	r0, #29
   d73b0:	4770      	bx	lr
    return 0;
   d73b2:	2000      	movs	r0, #0
   d73b4:	4770      	bx	lr
            return 31;
   d73b6:	201f      	movs	r0, #31
   d73b8:	4770      	bx	lr
                return 28;
   d73ba:	201c      	movs	r0, #28
}
   d73bc:	4770      	bx	lr

000d73be <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d73be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d73c0:	2301      	movs	r3, #1
   d73c2:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d73c4:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d73c8:	3b01      	subs	r3, #1
   d73ca:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d73cc:	2300      	movs	r3, #0
   d73ce:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d73d2:	4606      	mov	r6, r0
   d73d4:	460c      	mov	r4, r1
   d73d6:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d73d8:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d73da:	4620      	mov	r0, r4
   d73dc:	f7ff ffce 	bl	d737c <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d73e0:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d73e4:	69a2      	ldr	r2, [r4, #24]
   d73e6:	429a      	cmp	r2, r3
   d73e8:	d003      	beq.n	d73f2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d73ea:	68e3      	ldr	r3, [r4, #12]
   d73ec:	3301      	adds	r3, #1
   d73ee:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d73f0:	e7f3      	b.n	d73da <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d73f2:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d73f6:	2d01      	cmp	r5, #1
   d73f8:	d013      	beq.n	d7422 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d73fa:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d73fc:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d73fe:	3d01      	subs	r5, #1
   d7400:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d7404:	441d      	add	r5, r3
   d7406:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d7408:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d740c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7410:	f7ff ffb6 	bl	d7380 <_ZN9LocalTime14lastDayOfMonthEii>
   d7414:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d7416:	bfc4      	itt	gt
   d7418:	3d07      	subgt	r5, #7
   d741a:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d741c:	4620      	mov	r0, r4
   d741e:	f7ff ffad 	bl	d737c <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d7422:	4621      	mov	r1, r4
   d7424:	f106 0008 	add.w	r0, r6, #8
   d7428:	f7ff fc46 	bl	d6cb8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d742c:	4638      	mov	r0, r7
   d742e:	f7ff fc50 	bl	d6cd2 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d7432:	4620      	mov	r0, r4
}
   d7434:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d7438:	f003 bda6 	b.w	daf88 <mktime>

000d743c <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d743c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d743e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d7442:	b085      	sub	sp, #20
   d7444:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d7446:	b92b      	cbnz	r3, d7454 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d7448:	f7ff ff80 	bl	d734c <_ZN9LocalTime8instanceEv>
   d744c:	1d01      	adds	r1, r0, #4
   d744e:	1d20      	adds	r0, r4, #4
   d7450:	f7ff fae6 	bl	d6a20 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d7454:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d7458:	2b00      	cmp	r3, #0
   d745a:	d069      	beq.n	d7530 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d745c:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d7460:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d7464:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d7466:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d7468:	a802      	add	r0, sp, #8
   d746a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d746e:	f003 fd7b 	bl	daf68 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d7472:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7474:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d7478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d747a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d747c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d747e:	6833      	ldr	r3, [r6, #0]
   d7480:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d7482:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d7486:	a802      	add	r0, sp, #8
   d7488:	f7ff fa9e 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d748c:	aa02      	add	r2, sp, #8
   d748e:	4639      	mov	r1, r7
   d7490:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d7494:	f7ff ff93 	bl	d73be <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d7498:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d749c:	f104 0118 	add.w	r1, r4, #24
   d74a0:	a802      	add	r0, sp, #8
   d74a2:	f7ff fa91 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d74a6:	aa02      	add	r2, sp, #8
   d74a8:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d74ac:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d74b0:	f7ff ff85 	bl	d73be <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d74b4:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d74b8:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d74ba:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d74bc:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d74be:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d74c2:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d74c6:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d74ca:	da24      	bge.n	d7516 <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d74cc:	42b0      	cmp	r0, r6
   d74ce:	eb71 0507 	sbcs.w	r5, r1, r7
   d74d2:	da19      	bge.n	d7508 <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d74d4:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d74d6:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d74d8:	6820      	ldr	r0, [r4, #0]
   d74da:	f7ff fa33 	bl	d6944 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d74de:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d74e2:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d74e6:	9101      	str	r1, [sp, #4]
   d74e8:	bb20      	cbnz	r0, d7534 <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d74ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d74ee:	f7ff fbc7 	bl	d6c80 <_ZNK12LocalTimeHMS9toSecondsEv>
   d74f2:	1a36      	subs	r6, r6, r0
   d74f4:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d74f8:	9901      	ldr	r1, [sp, #4]
   d74fa:	a802      	add	r0, sp, #8
   d74fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7500:	f003 fd32 	bl	daf68 <localtime_r>
}
   d7504:	b005      	add	sp, #20
   d7506:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d7508:	4290      	cmp	r0, r2
   d750a:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d750e:	bfb4      	ite	lt
   d7510:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d7512:	2302      	movge	r3, #2
   d7514:	e7df      	b.n	d74d6 <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d7516:	4290      	cmp	r0, r2
   d7518:	eb71 0303 	sbcs.w	r3, r1, r3
   d751c:	da01      	bge.n	d7522 <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d751e:	2303      	movs	r3, #3
   d7520:	e7d9      	b.n	d74d6 <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d7522:	42b0      	cmp	r0, r6
   d7524:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d7528:	bfb4      	ite	lt
   d752a:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d752c:	2305      	movge	r3, #5
   d752e:	e7d2      	b.n	d74d6 <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d7530:	2306      	movs	r3, #6
   d7532:	e7d0      	b.n	d74d6 <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d7534:	f104 0018 	add.w	r0, r4, #24
   d7538:	e7d9      	b.n	d74ee <_ZN16LocalTimeConvert7convertEv+0xb2>

000d753a <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d753a:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d753e:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d7540:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d7542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d7544:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d7546:	ad01      	add	r5, sp, #4
   d7548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d754a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d754c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d754e:	6823      	ldr	r3, [r4, #0]
   d7550:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d7552:	a801      	add	r0, sp, #4
   d7554:	f003 fd18 	bl	daf88 <mktime>
   d7558:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d755a:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d755e:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d7560:	f7ff fb8e 	bl	d6c80 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d7564:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d7568:	eb14 0800 	adds.w	r8, r4, r0
   d756c:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d7570:	b31b      	cbz	r3, d75ba <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d7572:	2306      	movs	r3, #6
   d7574:	a821      	add	r0, sp, #132	; 0x84
   d7576:	9320      	str	r3, [sp, #128]	; 0x80
   d7578:	f7ff fc7a 	bl	d6e70 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d757c:	4631      	mov	r1, r6
   d757e:	a80a      	add	r0, sp, #40	; 0x28
   d7580:	f7ff fd8a 	bl	d7098 <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d7584:	a90a      	add	r1, sp, #40	; 0x28
   d7586:	a821      	add	r0, sp, #132	; 0x84
   d7588:	f7ff fa4a 	bl	d6a20 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d758c:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d758e:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d7592:	f7ff ff53 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
   d7596:	a80a      	add	r0, sp, #40	; 0x28
   d7598:	f7ff f9a6 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d759c:	9820      	ldr	r0, [sp, #128]	; 0x80
   d759e:	f7ff f9d1 	bl	d6944 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d75a2:	b138      	cbz	r0, d75b4 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d75a4:	f106 0014 	add.w	r0, r6, #20
   d75a8:	f7ff fb6a 	bl	d6c80 <_ZNK12LocalTimeHMS9toSecondsEv>
   d75ac:	eb14 0800 	adds.w	r8, r4, r0
   d75b0:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d75b4:	a821      	add	r0, sp, #132	; 0x84
   d75b6:	f7ff f997 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d75ba:	4640      	mov	r0, r8
   d75bc:	4649      	mov	r1, r9
   d75be:	b05c      	add	sp, #368	; 0x170
   d75c0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d75c4 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d75c4:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d75c6:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d75ca:	b097      	sub	sp, #92	; 0x5c
   d75cc:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d75ce:	b9c3      	cbnz	r3, d7602 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d75d0:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d75d4:	4668      	mov	r0, sp
   d75d6:	f7ff f9f7 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d75da:	4669      	mov	r1, sp
   d75dc:	4628      	mov	r0, r5
   d75de:	f7ff fd43 	bl	d7068 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d75e2:	1d21      	adds	r1, r4, #4
   d75e4:	4668      	mov	r0, sp
   d75e6:	f7ff fd57 	bl	d7098 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d75ea:	4669      	mov	r1, sp
   d75ec:	4628      	mov	r0, r5
   d75ee:	f7ff ffa4 	bl	d753a <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d75f2:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d75f6:	4668      	mov	r0, sp
   d75f8:	f7ff f976 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d75fc:	4620      	mov	r0, r4
   d75fe:	f7ff ff1d 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
}
   d7602:	b017      	add	sp, #92	; 0x5c
   d7604:	bd30      	pop	{r4, r5, pc}
	...

000d7608 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d7608:	b530      	push	{r4, r5, lr}
    time += 86400;
   d760a:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d760e:	4d0b      	ldr	r5, [pc, #44]	; (d763c <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d7610:	195b      	adds	r3, r3, r5
   d7612:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d7616:	b085      	sub	sp, #20
    time += 86400;
   d7618:	eb45 0202 	adc.w	r2, r5, r2
   d761c:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d7620:	4604      	mov	r4, r0
   d7622:	9101      	str	r1, [sp, #4]
    convert();
   d7624:	f7ff ff0a 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d7628:	9901      	ldr	r1, [sp, #4]
   d762a:	a802      	add	r0, sp, #8
   d762c:	f7ff f9cc 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d7630:	a902      	add	r1, sp, #8
   d7632:	4620      	mov	r0, r4
   d7634:	f7ff ffc6 	bl	d75c4 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d7638:	b005      	add	sp, #20
   d763a:	bd30      	pop	{r4, r5, pc}
   d763c:	00015180 	.word	0x00015180

000d7640 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d7640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7644:	b08a      	sub	sp, #40	; 0x28
   d7646:	4617      	mov	r7, r2
   d7648:	4606      	mov	r6, r0
   d764a:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d764c:	2224      	movs	r2, #36	; 0x24
   d764e:	2100      	movs	r1, #0
   d7650:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d7652:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d7654:	f007 fa3a 	bl	deacc <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d7658:	2f06      	cmp	r7, #6
   d765a:	d829      	bhi.n	d76b0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d765c:	4629      	mov	r1, r5
   d765e:	4630      	mov	r0, r6
   d7660:	f7ff fe8e 	bl	d7380 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d7664:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d7666:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d7668:	dd24      	ble.n	d76b4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d766a:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d766e:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d7670:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d7672:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d7674:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d7676:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d7678:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d767a:	f7ff fe7f 	bl	d737c <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d767e:	9a07      	ldr	r2, [sp, #28]
   d7680:	9b04      	ldr	r3, [sp, #16]
   d7682:	42ba      	cmp	r2, r7
   d7684:	d001      	beq.n	d768a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d7686:	3301      	adds	r3, #1
   d7688:	e7f5      	b.n	d7676 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d768a:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d768c:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d768e:	4294      	cmp	r4, r2
   d7690:	d106      	bne.n	d76a0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d7692:	b101      	cbz	r1, d7696 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d7694:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d7696:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d7698:	4620      	mov	r0, r4
   d769a:	b00a      	add	sp, #40	; 0x28
   d769c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d76a0:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d76a2:	4543      	cmp	r3, r8
   d76a4:	dc04      	bgt.n	d76b0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d76a6:	3201      	adds	r2, #1
   d76a8:	2a06      	cmp	r2, #6
   d76aa:	f04f 0101 	mov.w	r1, #1
   d76ae:	d1ee      	bne.n	d768e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d76b0:	2400      	movs	r4, #0
   d76b2:	e7f1      	b.n	d7698 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d76b4:	d0f0      	beq.n	d7698 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d76b6:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d76b8:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d76bc:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d76c0:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d76c2:	a801      	add	r0, sp, #4
   d76c4:	f7ff fe5a 	bl	d737c <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d76c8:	9b07      	ldr	r3, [sp, #28]
   d76ca:	9904      	ldr	r1, [sp, #16]
   d76cc:	42bb      	cmp	r3, r7
   d76ce:	d002      	beq.n	d76d6 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d76d0:	3901      	subs	r1, #1
   d76d2:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d76d4:	e7f5      	b.n	d76c2 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d76d6:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d76d8:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d76da:	4264      	negs	r4, r4
   d76dc:	4294      	cmp	r4, r2
   d76de:	dc03      	bgt.n	d76e8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d76e0:	2800      	cmp	r0, #0
   d76e2:	d0d8      	beq.n	d7696 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d76e4:	9104      	str	r1, [sp, #16]
   d76e6:	e7d6      	b.n	d7696 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d76e8:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d76ea:	2900      	cmp	r1, #0
   d76ec:	dde0      	ble.n	d76b0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d76ee:	3201      	adds	r2, #1
   d76f0:	2a06      	cmp	r2, #6
   d76f2:	f04f 0001 	mov.w	r0, #1
   d76f6:	d1f1      	bne.n	d76dc <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d76f8:	e7da      	b.n	d76b0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d76fc <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d76fc:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d7700:	b0cd      	sub	sp, #308	; 0x134
   d7702:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d7704:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7706:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d7708:	f7ff fcfe 	bl	d7108 <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d770c:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d770e:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d7710:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d7712:	f7ff fb35 	bl	d6d80 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d7716:	bb58      	cbnz	r0, d7770 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d7718:	a82a      	add	r0, sp, #168	; 0xa8
   d771a:	f7ff fcb2 	bl	d7082 <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d771e:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d7720:	f7ff fe14 	bl	d734c <_ZN9LocalTime8instanceEv>
   d7724:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d7726:	a802      	add	r0, sp, #8
   d7728:	f7ff f9f7 	bl	d6b1a <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d772c:	f8df a20c 	ldr.w	sl, [pc, #524]	; d793c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d7730:	a82a      	add	r0, sp, #168	; 0xa8
   d7732:	f7ff fca6 	bl	d7082 <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d7736:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d7738:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d773a:	4606      	mov	r6, r0
   d773c:	a803      	add	r0, sp, #12
   d773e:	f7ff fa11 	bl	d6b64 <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d7742:	2800      	cmp	r0, #0
   d7744:	f300 80f2 	bgt.w	d792c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d7748:	4631      	mov	r1, r6
   d774a:	4620      	mov	r0, r4
   d774c:	f7ff fafd 	bl	d6d4a <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d7750:	4607      	mov	r7, r0
   d7752:	2800      	cmp	r0, #0
   d7754:	f000 8094 	beq.w	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d7758:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d775a:	3b01      	subs	r3, #1
   d775c:	2b04      	cmp	r3, #4
   d775e:	f200 808f 	bhi.w	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d7762:	e8df f013 	tbh	[pc, r3, lsl #1]
   d7766:	0007      	.short	0x0007
   d7768:	00960007 	.word	0x00960007
   d776c:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d7770:	9002      	str	r0, [sp, #8]
   d7772:	e7db      	b.n	d772c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d7774:	a92a      	add	r1, sp, #168	; 0xa8
   d7776:	a807      	add	r0, sp, #28
   d7778:	f7ff fc58 	bl	d702c <_ZNK14LocalTimeValue3hmsEv>
   d777c:	a907      	add	r1, sp, #28
   d777e:	4620      	mov	r0, r4
   d7780:	f7ff f937 	bl	d69f2 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d7784:	2800      	cmp	r0, #0
   d7786:	da0d      	bge.n	d77a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d7788:	f104 011c 	add.w	r1, r4, #28
   d778c:	a807      	add	r0, sp, #28
   d778e:	f7ff f91b 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d7792:	a907      	add	r1, sp, #28
   d7794:	a810      	add	r0, sp, #64	; 0x40
   d7796:	f7ff ff15 	bl	d75c4 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d779a:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d779e:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d77a2:	e094      	b.n	d78ce <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d77a4:	d16c      	bne.n	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d77a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d77a8:	2b01      	cmp	r3, #1
   d77aa:	d025      	beq.n	d77f8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d77ac:	2b02      	cmp	r3, #2
   d77ae:	d167      	bne.n	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d77b0:	f104 011c 	add.w	r1, r4, #28
   d77b4:	a804      	add	r0, sp, #16
   d77b6:	f7ff f907 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d77ba:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d77be:	4649      	mov	r1, r9
   d77c0:	a804      	add	r0, sp, #16
   d77c2:	f7ff f8e3 	bl	d698c <_ZNK12LocalTimeHMS9compareToERKS_>
   d77c6:	2800      	cmp	r0, #0
   d77c8:	dc5a      	bgt.n	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d77ca:	a904      	add	r1, sp, #16
   d77cc:	a807      	add	r0, sp, #28
   d77ce:	f7ff f8fb 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d77d2:	a907      	add	r1, sp, #28
   d77d4:	a810      	add	r0, sp, #64	; 0x40
   d77d6:	f7ff fef5 	bl	d75c4 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d77da:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d77de:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d77e2:	4290      	cmp	r0, r2
   d77e4:	eb71 0303 	sbcs.w	r3, r1, r3
   d77e8:	db41      	blt.n	d786e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d77ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d77ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d77f0:	4413      	add	r3, r2
   d77f2:	f88d 3014 	strb.w	r3, [sp, #20]
   d77f6:	e7e2      	b.n	d77be <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d77f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d77fa:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d77fe:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d7802:	213c      	movs	r1, #60	; 0x3c
   d7804:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d7806:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d780a:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d780e:	1852      	adds	r2, r2, r1
   d7810:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d7814:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d7816:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d781a:	f7ff fe0f 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d781e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d7822:	a907      	add	r1, sp, #28
   d7824:	a804      	add	r0, sp, #16
   d7826:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d782a:	f003 fb9d 	bl	daf68 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d782e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d7830:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7832:	1b9b      	subs	r3, r3, r6
   d7834:	fb93 f2f1 	sdiv	r2, r3, r1
   d7838:	fb01 3312 	mls	r3, r1, r2, r3
   d783c:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d783e:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d7840:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d7842:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d7846:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d7848:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d784a:	f003 fb9d 	bl	daf88 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d784e:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d7852:	a810      	add	r0, sp, #64	; 0x40
   d7854:	f7ff fdf2 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d7858:	a92a      	add	r1, sp, #168	; 0xa8
   d785a:	a804      	add	r0, sp, #16
   d785c:	f7ff fbf2 	bl	d7044 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d7860:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d7864:	a804      	add	r0, sp, #16
   d7866:	f7ff f891 	bl	d698c <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d786a:	2800      	cmp	r0, #0
   d786c:	da08      	bge.n	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d786e:	a82a      	add	r0, sp, #168	; 0xa8
   d7870:	f7ff fc07 	bl	d7082 <_ZNK14LocalTimeValue3ymdEv>
   d7874:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d7876:	4620      	mov	r0, r4
   d7878:	f7ff fa67 	bl	d6d4a <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d787c:	2800      	cmp	r0, #0
   d787e:	d18c      	bne.n	d779a <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d7880:	4651      	mov	r1, sl
   d7882:	a807      	add	r0, sp, #28
   d7884:	f7ff f9ca 	bl	d6c1c <_ZN12LocalTimeHMSC1EPKc>
   d7888:	a907      	add	r1, sp, #28
   d788a:	a810      	add	r0, sp, #64	; 0x40
   d788c:	f7ff febc 	bl	d7608 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d7890:	e74e      	b.n	d7730 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d7892:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d7894:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d7896:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d789a:	3101      	adds	r1, #1
   d789c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d78a0:	f7ff fece 	bl	d7640 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d78a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d78a6:	4298      	cmp	r0, r3
   d78a8:	d1ea      	bne.n	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d78aa:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d78ae:	a807      	add	r0, sp, #28
   d78b0:	f7ff f88a 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d78b4:	a907      	add	r1, sp, #28
   d78b6:	a810      	add	r0, sp, #64	; 0x40
   d78b8:	f7ff fe84 	bl	d75c4 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d78bc:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d78c0:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d78c4:	4282      	cmp	r2, r0
   d78c6:	418b      	sbcs	r3, r1
   d78c8:	dada      	bge.n	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d78ca:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d78ce:	4628      	mov	r0, r5
   d78d0:	f7ff fdb4 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d78d4:	e02b      	b.n	d792e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d78d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d78d8:	2e00      	cmp	r6, #0
   d78da:	da08      	bge.n	d78ee <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d78dc:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d78de:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d78e0:	3101      	adds	r1, #1
   d78e2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d78e6:	f7ff fd4b 	bl	d7380 <_ZN9LocalTime14lastDayOfMonthEii>
   d78ea:	4430      	add	r0, r6
   d78ec:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d78ee:	a82a      	add	r0, sp, #168	; 0xa8
   d78f0:	f7ff fbc7 	bl	d7082 <_ZNK14LocalTimeValue3ymdEv>
   d78f4:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d78f8:	d1c2      	bne.n	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d78fa:	a92a      	add	r1, sp, #168	; 0xa8
   d78fc:	a807      	add	r0, sp, #28
   d78fe:	f7ff fb95 	bl	d702c <_ZNK14LocalTimeValue3hmsEv>
   d7902:	a907      	add	r1, sp, #28
   d7904:	4620      	mov	r0, r4
   d7906:	f7ff f874 	bl	d69f2 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d790a:	2800      	cmp	r0, #0
   d790c:	dcb8      	bgt.n	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d790e:	e7cc      	b.n	d78aa <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d7910:	a92a      	add	r1, sp, #168	; 0xa8
   d7912:	a807      	add	r0, sp, #28
   d7914:	f7ff fb8a 	bl	d702c <_ZNK14LocalTimeValue3hmsEv>
   d7918:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d791c:	a807      	add	r0, sp, #28
   d791e:	9101      	str	r1, [sp, #4]
   d7920:	f7ff f834 	bl	d698c <_ZNK12LocalTimeHMS9compareToERKS_>
   d7924:	2800      	cmp	r0, #0
   d7926:	9901      	ldr	r1, [sp, #4]
   d7928:	dcaa      	bgt.n	d7880 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d792a:	e7c0      	b.n	d78ae <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d792c:	2700      	movs	r7, #0
class LocalTimeConvert {
   d792e:	a811      	add	r0, sp, #68	; 0x44
   d7930:	f7fe ffda 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d7934:	4638      	mov	r0, r7
   d7936:	b04d      	add	sp, #308	; 0x134
   d7938:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d793c:	000dfb75 	.word	0x000dfb75

000d7940 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7940:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d7942:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7944:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7946:	4668      	mov	r0, sp
   d7948:	f7ff f817 	bl	d697a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d794c:	466a      	mov	r2, sp
   d794e:	4629      	mov	r1, r5
   d7950:	4620      	mov	r0, r4
   d7952:	f004 fab3 	bl	dbebc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7956:	a801      	add	r0, sp, #4
   d7958:	f7fd fb1d 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d795c:	4620      	mov	r0, r4
   d795e:	b003      	add	sp, #12
   d7960:	bd30      	pop	{r4, r5, pc}

000d7962 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7962:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d7964:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7966:	4604      	mov	r4, r0
   d7968:	4668      	mov	r0, sp
   d796a:	f7ff f806 	bl	d697a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d796e:	466a      	mov	r2, sp
   d7970:	4629      	mov	r1, r5
   d7972:	4620      	mov	r0, r4
   d7974:	f004 fa7e 	bl	dbe74 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d7978:	a801      	add	r0, sp, #4
   d797a:	f7fd fb0c 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d797e:	4620      	mov	r0, r4
   d7980:	b003      	add	sp, #12
   d7982:	bd30      	pop	{r4, r5, pc}

000d7984 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7984:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d7986:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7988:	4604      	mov	r4, r0
   d798a:	4668      	mov	r0, sp
   d798c:	f7fe fff5 	bl	d697a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d7990:	466a      	mov	r2, sp
   d7992:	4629      	mov	r1, r5
   d7994:	4620      	mov	r0, r4
   d7996:	f004 fa16 	bl	dbdc6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d799a:	a801      	add	r0, sp, #4
   d799c:	f7fd fafb 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d79a0:	4620      	mov	r0, r4
   d79a2:	b003      	add	sp, #12
   d79a4:	bd30      	pop	{r4, r5, pc}

000d79a6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */
      vector(const vector& __x)
   d79a6:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d79a8:	e9d1 3600 	ldrd	r3, r6, [r1]
   d79ac:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d79ae:	2300      	movs	r3, #0
   d79b0:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d79b4:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d79b6:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d79b8:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d79ba:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d79bc:	f7fe ffd0 	bl	d6960 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d79c0:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d79c4:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d79c8:	4406      	add	r6, r0
   d79ca:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d79cc:	462a      	mov	r2, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d79ce:	4601      	mov	r1, r0
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d79d0:	4293      	cmp	r3, r2
   d79d2:	d005      	beq.n	d79e0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d79d4:	b109      	cbz	r1, d79da <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d79d6:	6816      	ldr	r6, [r2, #0]
   d79d8:	600e      	str	r6, [r1, #0]
   d79da:	3104      	adds	r1, #4
   d79dc:	3204      	adds	r2, #4
   d79de:	e7f7      	b.n	d79d0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d79e0:	1b5b      	subs	r3, r3, r5
   d79e2:	4418      	add	r0, r3
   d79e4:	6060      	str	r0, [r4, #4]
      }
   d79e6:	4620      	mov	r0, r4
   d79e8:	bd70      	pop	{r4, r5, r6, pc}

000d79ea <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d79ea:	b538      	push	{r3, r4, r5, lr}
   d79ec:	460d      	mov	r5, r1
   d79ee:	f811 3b04 	ldrb.w	r3, [r1], #4
   d79f2:	4604      	mov	r4, r0
   d79f4:	f800 3b04 	strb.w	r3, [r0], #4
   d79f8:	f7ff ffd5 	bl	d79a6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d79fc:	f105 0110 	add.w	r1, r5, #16
   d7a00:	f104 0010 	add.w	r0, r4, #16
   d7a04:	f7ff ffcf 	bl	d79a6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d7a08:	4620      	mov	r0, r4
   d7a0a:	bd38      	pop	{r3, r4, r5, pc}

000d7a0c <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d7a0c:	b538      	push	{r3, r4, r5, lr}
   d7a0e:	4604      	mov	r4, r0
   d7a10:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7a12:	f7ff ffea 	bl	d79ea <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d7a16:	f105 011c 	add.w	r1, r5, #28
   d7a1a:	f104 001c 	add.w	r0, r4, #28
   d7a1e:	f7fe ffd3 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
   d7a22:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d7a26:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7a2a:	f7fe ffcd 	bl	d69c8 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d7a2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d7a30:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7a32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d7a34:	6323      	str	r3, [r4, #48]	; 0x30
   d7a36:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d7a38:	6363      	str	r3, [r4, #52]	; 0x34
   d7a3a:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d7a3e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d7a42:	f005 fdfb 	bl	dd63c <_ZN6StringC1ERKS_>
   d7a46:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d7a48:	64a3      	str	r3, [r4, #72]	; 0x48
   d7a4a:	4620      	mov	r0, r4
   d7a4c:	bd38      	pop	{r3, r4, r5, pc}

000d7a4e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d7a4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7a52:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7a56:	b0d1      	sub	sp, #324	; 0x144
   d7a58:	4681      	mov	r9, r0
   d7a5a:	460c      	mov	r4, r1
   d7a5c:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d7a5e:	2600      	movs	r6, #0
   d7a60:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d7a62:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d7a66:	4543      	cmp	r3, r8
   d7a68:	d029      	beq.n	d7abe <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d7a6a:	4641      	mov	r1, r8
   d7a6c:	a801      	add	r0, sp, #4
   d7a6e:	f7ff ffcd 	bl	d7a0c <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   d7a72:	68ab      	ldr	r3, [r5, #8]
   d7a74:	b90b      	cbnz	r3, d7a7a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d7a76:	f006 fb81 	bl	de17c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a7a:	68eb      	ldr	r3, [r5, #12]
   d7a7c:	a901      	add	r1, sp, #4
   d7a7e:	4628      	mov	r0, r5
   d7a80:	4798      	blx	r3
        if (filter(item)) {
   d7a82:	b1b0      	cbz	r0, d7ab2 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d7a84:	4621      	mov	r1, r4
   d7a86:	a814      	add	r0, sp, #80	; 0x50
   d7a88:	f7ff fb3e 	bl	d7108 <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d7a8c:	a914      	add	r1, sp, #80	; 0x50
   d7a8e:	a801      	add	r0, sp, #4
   d7a90:	f7ff fe34 	bl	d76fc <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d7a94:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d7a98:	b110      	cbz	r0, d7aa0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d7a9a:	ea56 0107 	orrs.w	r1, r6, r7
   d7a9e:	d003      	beq.n	d7aa8 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d7aa0:	42b2      	cmp	r2, r6
   d7aa2:	eb73 0107 	sbcs.w	r1, r3, r7
   d7aa6:	da01      	bge.n	d7aac <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d7aa8:	4616      	mov	r6, r2
   d7aaa:	461f      	mov	r7, r3
class LocalTimeConvert {
   d7aac:	a815      	add	r0, sp, #84	; 0x54
   d7aae:	f7fe ff1b 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d7ab2:	a801      	add	r0, sp, #4
   d7ab4:	f7ff fb5c 	bl	d7170 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d7ab8:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d7abc:	e7d1      	b.n	d7a62 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d7abe:	ea56 0307 	orrs.w	r3, r6, r7
   d7ac2:	d008      	beq.n	d7ad6 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d7ac4:	4620      	mov	r0, r4
        conv.time = closestTime;
   d7ac6:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d7aca:	f7ff fcb7 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
        return true;
   d7ace:	2001      	movs	r0, #1
}
   d7ad0:	b051      	add	sp, #324	; 0x144
   d7ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d7ad6:	2000      	movs	r0, #0
   d7ad8:	e7fa      	b.n	d7ad0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d7adc <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d7ade:	4b08      	ldr	r3, [pc, #32]	; (d7b00 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d7ae0:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d7ae2:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d7ae4:	4b07      	ldr	r3, [pc, #28]	; (d7b04 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d7ae6:	9302      	str	r3, [sp, #8]
   d7ae8:	f7ff ffb1 	bl	d7a4e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d7aec:	9b02      	ldr	r3, [sp, #8]
   d7aee:	4604      	mov	r4, r0
   d7af0:	b11b      	cbz	r3, d7afa <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7af2:	4669      	mov	r1, sp
   d7af4:	2203      	movs	r2, #3
   d7af6:	4608      	mov	r0, r1
   d7af8:	4798      	blx	r3
}
   d7afa:	4620      	mov	r0, r4
   d7afc:	b004      	add	sp, #16
   d7afe:	bd10      	pop	{r4, pc}
   d7b00:	000d68bf 	.word	0x000d68bf
   d7b04:	000d68c3 	.word	0x000d68c3

000d7b08 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>:
bool LocalTimeSchedule::isScheduledTime(LocalTimeConvert &conv, time_t timeNow) {
   d7b08:	b570      	push	{r4, r5, r6, lr}
   d7b0a:	4604      	mov	r4, r0
   d7b0c:	460d      	mov	r5, r1
   d7b0e:	4610      	mov	r0, r2
   d7b10:	4619      	mov	r1, r3
    if (nextTime != 0 && nextTime <= timeNow) {
   d7b12:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d7b16:	ea52 0603 	orrs.w	r6, r2, r3
   d7b1a:	d013      	beq.n	d7b44 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
   d7b1c:	4290      	cmp	r0, r2
   d7b1e:	eb71 0303 	sbcs.w	r3, r1, r3
   d7b22:	db0f      	blt.n	d7b44 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
        nextTime = 0;
   d7b24:	2200      	movs	r2, #0
   d7b26:	2300      	movs	r3, #0
   d7b28:	e9c4 2306 	strd	r2, r3, [r4, #24]
        result = true;
   d7b2c:	2601      	movs	r6, #1
    if (getNextScheduledTime(conv)) {
   d7b2e:	4629      	mov	r1, r5
   d7b30:	4620      	mov	r0, r4
   d7b32:	f7ff ffd3 	bl	d7adc <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d7b36:	b118      	cbz	r0, d7b40 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x38>
        nextTime = conv.time;
   d7b38:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d7b3c:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
   d7b40:	4630      	mov	r0, r6
   d7b42:	bd70      	pop	{r4, r5, r6, pc}
    bool result = false;
   d7b44:	2600      	movs	r6, #0
   d7b46:	e7f2      	b.n	d7b2e <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x26>

000d7b48 <_ZN17LocalTimeSchedule15isScheduledTimeEv>:
bool LocalTimeSchedule::isScheduledTime() {
   d7b48:	b530      	push	{r4, r5, lr}
   d7b4a:	b0bd      	sub	sp, #244	; 0xf4
   d7b4c:	4605      	mov	r5, r0
    if (!Time.isValid()) {
   d7b4e:	f006 f805 	bl	ddb5c <_ZN9TimeClass7isValidEv>
   d7b52:	4604      	mov	r4, r0
   d7b54:	b1c0      	cbz	r0, d7b88 <_ZN17LocalTimeSchedule15isScheduledTimeEv+0x40>
   d7b56:	2306      	movs	r3, #6
   d7b58:	a801      	add	r0, sp, #4
   d7b5a:	9300      	str	r3, [sp, #0]
   d7b5c:	f7ff f988 	bl	d6e70 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d7b60:	f006 f819 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d7b64:	17c1      	asrs	r1, r0, #31
   d7b66:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    conv.withCurrentTime().convert();
   d7b6a:	4668      	mov	r0, sp
   d7b6c:	f7ff fc66 	bl	d743c <_ZN16LocalTimeConvert7convertEv>
    return isScheduledTime(conv, Time.now());
   d7b70:	f006 f811 	bl	ddb96 <_ZN9TimeClass3nowEv>
   d7b74:	4669      	mov	r1, sp
   d7b76:	4602      	mov	r2, r0
   d7b78:	17c3      	asrs	r3, r0, #31
   d7b7a:	4628      	mov	r0, r5
   d7b7c:	f7ff ffc4 	bl	d7b08 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>
   d7b80:	4604      	mov	r4, r0
class LocalTimeConvert {
   d7b82:	a801      	add	r0, sp, #4
   d7b84:	f7fe feb0 	bl	d68e8 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d7b88:	4620      	mov	r0, r4
   d7b8a:	b03d      	add	sp, #244	; 0xf4
   d7b8c:	bd30      	pop	{r4, r5, pc}

000d7b8e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   d7b8e:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d7b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7b94:	4604      	mov	r4, r0
   d7b96:	460e      	mov	r6, r1
      if (&__x != this)
   d7b98:	d022      	beq.n	d7be0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7b9a:	e9d1 5800 	ldrd	r5, r8, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   d7b9e:	6800      	ldr	r0, [r0, #0]
   d7ba0:	68a3      	ldr	r3, [r4, #8]
   d7ba2:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7ba4:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d7ba8:	109b      	asrs	r3, r3, #2
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   d7baa:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7bae:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d7bb2:	d218      	bcs.n	d7be6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   d7bb4:	4608      	mov	r0, r1
   d7bb6:	f7fe fed3 	bl	d6960 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d7bba:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d7bbc:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d7bbe:	45a8      	cmp	r8, r5
   d7bc0:	d005      	beq.n	d7bce <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d7bc2:	b10b      	cbz	r3, d7bc8 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d7bc4:	682a      	ldr	r2, [r5, #0]
   d7bc6:	601a      	str	r2, [r3, #0]
   d7bc8:	3304      	adds	r3, #4
   d7bca:	3504      	adds	r5, #4
   d7bcc:	e7f7      	b.n	d7bbe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
   d7bce:	6820      	ldr	r0, [r4, #0]
   d7bd0:	f7fe fec2 	bl	d6958 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
   d7bd4:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d7bd6:	443e      	add	r6, r7
   d7bd8:	60a6      	str	r6, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d7bda:	6823      	ldr	r3, [r4, #0]
   d7bdc:	441f      	add	r7, r3
   d7bde:	6067      	str	r7, [r4, #4]
	}
      return *this;
    }
   d7be0:	4620      	mov	r0, r4
   d7be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7be6:	6862      	ldr	r2, [r4, #4]
   d7be8:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d7bea:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d7bee:	d806      	bhi.n	d7bfe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d7bf0:	45a8      	cmp	r8, r5
   d7bf2:	d0f2      	beq.n	d7bda <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7bf4:	463a      	mov	r2, r7
   d7bf6:	4629      	mov	r1, r5
   d7bf8:	f006 ff4e 	bl	dea98 <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d7bfc:	e7ed      	b.n	d7bda <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d7bfe:	b112      	cbz	r2, d7c06 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7c00:	4629      	mov	r1, r5
   d7c02:	f006 ff49 	bl	dea98 <memmove>
   d7c06:	e9d4 3200 	ldrd	r3, r2, [r4]
   d7c0a:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d7c0c:	6833      	ldr	r3, [r6, #0]
   d7c0e:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d7c10:	6871      	ldr	r1, [r6, #4]
   d7c12:	4299      	cmp	r1, r3
   d7c14:	d0e1      	beq.n	d7bda <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d7c16:	b10a      	cbz	r2, d7c1c <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d7c18:	6818      	ldr	r0, [r3, #0]
   d7c1a:	6010      	str	r0, [r2, #0]
   d7c1c:	3304      	adds	r3, #4
   d7c1e:	3204      	adds	r2, #4
   d7c20:	e7f7      	b.n	d7c12 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d7c22 <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7c22:	b538      	push	{r3, r4, r5, lr}
   d7c24:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d7c26:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7c2a:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d7c2c:	f800 3b04 	strb.w	r3, [r0], #4
   d7c30:	f7ff ffad 	bl	d7b8e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d7c34:	f105 0110 	add.w	r1, r5, #16
   d7c38:	f104 0010 	add.w	r0, r4, #16
   d7c3c:	f7ff ffa7 	bl	d7b8e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7c40:	f105 011c 	add.w	r1, r5, #28
   d7c44:	f104 001c 	add.w	r0, r4, #28
   d7c48:	f7fe fec6 	bl	d69d8 <_ZN12LocalTimeHMSaSERKS_>
   d7c4c:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d7c50:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7c54:	f7fe fec0 	bl	d69d8 <_ZN12LocalTimeHMSaSERKS_>
   d7c58:	4620      	mov	r0, r4
   d7c5a:	bd38      	pop	{r3, r4, r5, pc}

000d7c5c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d7c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c60:	e9d0 6900 	ldrd	r6, r9, [r0]
   d7c64:	4d3b      	ldr	r5, [pc, #236]	; (d7d54 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d7c66:	4b3c      	ldr	r3, [pc, #240]	; (d7d58 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7c68:	eba9 0406 	sub.w	r4, r9, r6
   d7c6c:	10a4      	asrs	r4, r4, #2
   d7c6e:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d7c70:	429c      	cmp	r4, r3
   d7c72:	468a      	mov	sl, r1
   d7c74:	4607      	mov	r7, r0
   d7c76:	4611      	mov	r1, r2
   d7c78:	46a8      	mov	r8, r5
   d7c7a:	d102      	bne.n	d7c82 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d7c7c:	4837      	ldr	r0, [pc, #220]	; (d7d5c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d7c7e:	f006 fa7a 	bl	de176 <_ZSt20__throw_length_errorPKc>
   d7c82:	2c01      	cmp	r4, #1
   d7c84:	4622      	mov	r2, r4
   d7c86:	bf38      	it	cc
   d7c88:	2201      	movcc	r2, #1
   d7c8a:	18a4      	adds	r4, r4, r2
   d7c8c:	ebaa 0506 	sub.w	r5, sl, r6

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d7c90:	d25d      	bcs.n	d7d4e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d7c92:	b154      	cbz	r4, d7caa <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d7c94:	429c      	cmp	r4, r3
   d7c96:	bf28      	it	cs
   d7c98:	461c      	movcs	r4, r3
   d7c9a:	204c      	movs	r0, #76	; 0x4c
   d7c9c:	4360      	muls	r0, r4
   d7c9e:	9100      	str	r1, [sp, #0]
   d7ca0:	f7fc f9f9 	bl	d4096 <_Znwj>
   d7ca4:	9900      	ldr	r1, [sp, #0]
   d7ca6:	4683      	mov	fp, r0
   d7ca8:	e000      	b.n	d7cac <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d7caa:	46a3      	mov	fp, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7cac:	eb1b 0005 	adds.w	r0, fp, r5
   d7cb0:	d001      	beq.n	d7cb6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d7cb2:	f7ff feab 	bl	d7a0c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7cb6:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7cb8:	4631      	mov	r1, r6
   d7cba:	458a      	cmp	sl, r1
   d7cbc:	d00a      	beq.n	d7cd4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d7cbe:	b133      	cbz	r3, d7cce <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d7cc0:	4618      	mov	r0, r3
   d7cc2:	9101      	str	r1, [sp, #4]
   d7cc4:	9300      	str	r3, [sp, #0]
   d7cc6:	f7ff fea1 	bl	d7a0c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7cca:	e9dd 3100 	ldrd	r3, r1, [sp]
   d7cce:	314c      	adds	r1, #76	; 0x4c
   d7cd0:	334c      	adds	r3, #76	; 0x4c
   d7cd2:	e7f2      	b.n	d7cba <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d7cd4:	08ad      	lsrs	r5, r5, #2
   d7cd6:	fb08 fa05 	mul.w	sl, r8, r5
   d7cda:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d7cde:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d7ce2:	fb0a fa05 	mul.w	sl, sl, r5
   d7ce6:	eb06 050a 	add.w	r5, r6, sl
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   d7cea:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d7cee:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d7cf0:	4653      	mov	r3, sl
   d7cf2:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d7cf4:	4549      	cmp	r1, r9
   d7cf6:	d113      	bne.n	d7d20 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d7cf8:	eba9 0505 	sub.w	r5, r9, r5
   d7cfc:	08ad      	lsrs	r5, r5, #2
   d7cfe:	fb08 f505 	mul.w	r5, r8, r5
   d7d02:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d7d06:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d7d0a:	fb08 a505 	mla	r5, r8, r5, sl
   d7d0e:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d7d10:	45c8      	cmp	r8, r9
   d7d12:	d00f      	beq.n	d7d34 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d7d14:	4640      	mov	r0, r8
   d7d16:	f7ff fa2b 	bl	d7170 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d7d1a:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d7d1e:	e7f7      	b.n	d7d10 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d7d20:	4618      	mov	r0, r3
   d7d22:	9101      	str	r1, [sp, #4]
   d7d24:	9300      	str	r3, [sp, #0]
   d7d26:	f7ff fe71 	bl	d7a0c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7d2a:	9901      	ldr	r1, [sp, #4]
   d7d2c:	9b00      	ldr	r3, [sp, #0]
   d7d2e:	314c      	adds	r1, #76	; 0x4c
   d7d30:	334c      	adds	r3, #76	; 0x4c
   d7d32:	e7df      	b.n	d7cf4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d7d34:	b116      	cbz	r6, d7d3c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d7d36:	4630      	mov	r0, r6
   d7d38:	f7fc f9b1 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7d3c:	204c      	movs	r0, #76	; 0x4c
   d7d3e:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d7d42:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7d46:	60bc      	str	r4, [r7, #8]
    }
   d7d48:	b003      	add	sp, #12
   d7d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d7d4e:	461c      	mov	r4, r3
   d7d50:	e7a3      	b.n	d7c9a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d7d52:	bf00      	nop
   d7d54:	286bca1b 	.word	0x286bca1b
   d7d58:	01af286b 	.word	0x01af286b
   d7d5c:	000dfba0 	.word	0x000dfba0

000d7d60 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d7d60:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d7d62:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d7d66:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d7d68:	4604      	mov	r4, r0
   d7d6a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d7d6c:	d007      	beq.n	d7d7e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7d6e:	b113      	cbz	r3, d7d76 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d7d70:	4618      	mov	r0, r3
   d7d72:	f7ff fe4b 	bl	d7a0c <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d7d76:	6863      	ldr	r3, [r4, #4]
   d7d78:	334c      	adds	r3, #76	; 0x4c
   d7d7a:	6063      	str	r3, [r4, #4]
      }
   d7d7c:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d7d7e:	4619      	mov	r1, r3
   d7d80:	f7ff ff6c 	bl	d7c5c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d7d84:	e7fa      	b.n	d7d7c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d7d86 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d7d86:	b530      	push	{r4, r5, lr}
   d7d88:	b097      	sub	sp, #92	; 0x5c
   d7d8a:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d7d8c:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d7d8e:	9201      	str	r2, [sp, #4]
   d7d90:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d7d92:	f7fe ff4f 	bl	d6c34 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d7d96:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d7d98:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d7d9a:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d7d9c:	a803      	add	r0, sp, #12
    item.increment = increment;
   d7d9e:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d7da0:	f7ff ff3f 	bl	d7c22 <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d7da4:	a903      	add	r1, sp, #12
   d7da6:	f104 0020 	add.w	r0, r4, #32
   d7daa:	f7ff ffd9 	bl	d7d60 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d7dae:	a803      	add	r0, sp, #12
   d7db0:	f7ff f9de 	bl	d7170 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d7db4:	4620      	mov	r0, r4
   d7db6:	b017      	add	sp, #92	; 0x5c
   d7db8:	bd30      	pop	{r4, r5, pc}

000d7dba <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d7dba:	4770      	bx	lr

000d7dbc <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d7dbc:	b510      	push	{r4, lr}
}
   d7dbe:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d7dc0:	4604      	mov	r4, r0
}
   d7dc2:	f006 f9cf 	bl	de164 <_ZdlPvj>
   d7dc6:	4620      	mov	r0, r4
   d7dc8:	bd10      	pop	{r4, pc}

000d7dca <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d7dca:	6803      	ldr	r3, [r0, #0]
   d7dcc:	b2c9      	uxtb	r1, r1
   d7dce:	689b      	ldr	r3, [r3, #8]
   d7dd0:	4718      	bx	r3
	...

000d7dd4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d7dd4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d7dd6:	4d03      	ldr	r5, [pc, #12]	; (d7de4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d7dd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d7ddc:	e9c0 5100 	strd	r5, r1, [r0]
}
   d7de0:	bd30      	pop	{r4, r5, pc}
   d7de2:	bf00      	nop
   d7de4:	000dfc30 	.word	0x000dfc30

000d7de8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d7de8:	6840      	ldr	r0, [r0, #4]
   d7dea:	f003 be4f 	b.w	dba8c <_ZN7TwoWire5beginEv>

000d7dee <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7dee:	b510      	push	{r4, lr}
   d7df0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7df2:	6800      	ldr	r0, [r0, #0]
   d7df4:	f003 fea5 	bl	dbb42 <_ZN7TwoWire6unlockEv>
   d7df8:	4620      	mov	r0, r4
   d7dfa:	bd10      	pop	{r4, pc}

000d7dfc <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d7dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e00:	b08a      	sub	sp, #40	; 0x28
   d7e02:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d7e04:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7e06:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7e08:	f003 fe92 	bl	dbb30 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7e0c:	221e      	movs	r2, #30
   d7e0e:	2100      	movs	r1, #0
   d7e10:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d7e12:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d7e14:	f006 fe5a 	bl	deacc <memset>
		size_t framAddr = 0;
   d7e18:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d7e1a:	b1ef      	cbz	r7, d7e58 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7e1c:	6823      	ldr	r3, [r4, #0]
   d7e1e:	2f1e      	cmp	r7, #30
   d7e20:	46b8      	mov	r8, r7
   d7e22:	bf28      	it	cs
   d7e24:	f04f 081e 	movcs.w	r8, #30
   d7e28:	68dd      	ldr	r5, [r3, #12]
   d7e2a:	aa02      	add	r2, sp, #8
   d7e2c:	4643      	mov	r3, r8
   d7e2e:	4631      	mov	r1, r6
   d7e30:	4620      	mov	r0, r4
   d7e32:	47a8      	blx	r5
			if (!result) {
   d7e34:	4605      	mov	r5, r0
   d7e36:	b958      	cbnz	r0, d7e50 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d7e38:	480a      	ldr	r0, [pc, #40]	; (d7e64 <_ZN6MB85RC5eraseEv+0x68>)
   d7e3a:	490b      	ldr	r1, [pc, #44]	; (d7e68 <_ZN6MB85RC5eraseEv+0x6c>)
   d7e3c:	4632      	mov	r2, r6
   d7e3e:	f7fc f943 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7e42:	a801      	add	r0, sp, #4
   d7e44:	f7ff ffd3 	bl	d7dee <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d7e48:	4628      	mov	r0, r5
   d7e4a:	b00a      	add	sp, #40	; 0x28
   d7e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7e50:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d7e54:	4446      	add	r6, r8
		while(totalLen > 0) {
   d7e56:	e7e0      	b.n	d7e1a <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d7e58:	a801      	add	r0, sp, #4
   d7e5a:	f7ff ffc8 	bl	d7dee <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d7e5e:	2501      	movs	r5, #1
   d7e60:	e7f2      	b.n	d7e48 <_ZN6MB85RC5eraseEv+0x4c>
   d7e62:	bf00      	nop
   d7e64:	2003e570 	.word	0x2003e570
   d7e68:	000dfbfc 	.word	0x000dfbfc

000d7e6c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7e70:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7e72:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7e74:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7e76:	460d      	mov	r5, r1
   d7e78:	4616      	mov	r6, r2
   d7e7a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d7e7c:	f003 fe58 	bl	dbb30 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7e80:	b1a7      	cbz	r7, d7eac <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7e82:	68e1      	ldr	r1, [r4, #12]
   d7e84:	6860      	ldr	r0, [r4, #4]
   d7e86:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7e8a:	f003 fe32 	bl	dbaf2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7e8e:	0a29      	lsrs	r1, r5, #8
   d7e90:	6860      	ldr	r0, [r4, #4]
   d7e92:	f7ff ff9a 	bl	d7dca <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7e96:	4629      	mov	r1, r5
   d7e98:	6860      	ldr	r0, [r4, #4]
   d7e9a:	f7ff ff96 	bl	d7dca <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d7e9e:	6860      	ldr	r0, [r4, #4]
   d7ea0:	2100      	movs	r1, #0
   d7ea2:	f003 fe41 	bl	dbb28 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7ea6:	b148      	cbz	r0, d7ebc <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d7ea8:	2400      	movs	r4, #0
   d7eaa:	e000      	b.n	d7eae <_ZN6MB85RC8readDataEjPhj+0x42>
   d7eac:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7eae:	a801      	add	r0, sp, #4
   d7eb0:	f7ff ff9d 	bl	d7dee <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d7eb4:	4620      	mov	r0, r4
   d7eb6:	b003      	add	sp, #12
   d7eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d7ebc:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d7ebe:	7b21      	ldrb	r1, [r4, #12]
   d7ec0:	6860      	ldr	r0, [r4, #4]
   d7ec2:	46b8      	mov	r8, r7
   d7ec4:	bf28      	it	cs
   d7ec6:	f04f 0820 	movcs.w	r8, #32
   d7eca:	2301      	movs	r3, #1
   d7ecc:	4642      	mov	r2, r8
   d7ece:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7ed2:	f003 fdf8 	bl	dbac6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d7ed6:	f006 f8fd 	bl	de0d4 <_Z19__fetch_global_Wirev>
   d7eda:	6803      	ldr	r3, [r0, #0]
   d7edc:	691b      	ldr	r3, [r3, #16]
   d7ede:	4798      	blx	r3
   d7ee0:	4540      	cmp	r0, r8
   d7ee2:	dbe1      	blt.n	d7ea8 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d7ee4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d7ee8:	f006 f8f4 	bl	de0d4 <_Z19__fetch_global_Wirev>
   d7eec:	6803      	ldr	r3, [r0, #0]
   d7eee:	695b      	ldr	r3, [r3, #20]
   d7ef0:	4798      	blx	r3
   d7ef2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d7ef6:	454e      	cmp	r6, r9
   d7ef8:	d1f6      	bne.n	d7ee8 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d7efa:	4445      	add	r5, r8
   d7efc:	eba7 0708 	sub.w	r7, r7, r8
   d7f00:	e7be      	b.n	d7e80 <_ZN6MB85RC8readDataEjPhj+0x14>

000d7f02 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7f02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f06:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7f08:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7f0a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7f0c:	460e      	mov	r6, r1
   d7f0e:	4690      	mov	r8, r2
   d7f10:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d7f12:	f003 fe0d 	bl	dbb30 <_ZN7TwoWire4lockEv>
   d7f16:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d7f1a:	f1b9 0f00 	cmp.w	r9, #0
   d7f1e:	d02a      	beq.n	d7f76 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7f20:	b34d      	cbz	r5, d7f76 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7f22:	68e1      	ldr	r1, [r4, #12]
   d7f24:	6860      	ldr	r0, [r4, #4]
   d7f26:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7f2a:	f003 fde2 	bl	dbaf2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7f2e:	0a31      	lsrs	r1, r6, #8
   d7f30:	6860      	ldr	r0, [r4, #4]
   d7f32:	f7ff ff4a 	bl	d7dca <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7f36:	6860      	ldr	r0, [r4, #4]
   d7f38:	4631      	mov	r1, r6
   d7f3a:	f7ff ff46 	bl	d7dca <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7f3e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7f42:	4647      	mov	r7, r8
   d7f44:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d7f48:	6860      	ldr	r0, [r4, #4]
   d7f4a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d7f4e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7f50:	3d01      	subs	r5, #1
				wire.write(*data);
   d7f52:	689b      	ldr	r3, [r3, #8]
   d7f54:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7f56:	4555      	cmp	r5, sl
   d7f58:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d7f5c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7f5e:	d001      	beq.n	d7f64 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7f60:	2d00      	cmp	r5, #0
   d7f62:	d1f1      	bne.n	d7f48 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7f64:	6860      	ldr	r0, [r4, #4]
   d7f66:	2101      	movs	r1, #1
   d7f68:	f003 fdde 	bl	dbb28 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7f6c:	2800      	cmp	r0, #0
   d7f6e:	d0d7      	beq.n	d7f20 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7f70:	f04f 0900 	mov.w	r9, #0
   d7f74:	e7d1      	b.n	d7f1a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d7f76:	a801      	add	r0, sp, #4
   d7f78:	f7ff ff39 	bl	d7dee <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d7f7c:	4648      	mov	r0, r9
   d7f7e:	b003      	add	sp, #12
   d7f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7f84 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7f88:	b08b      	sub	sp, #44	; 0x2c
   d7f8a:	460e      	mov	r6, r1
   d7f8c:	4615      	mov	r5, r2
   d7f8e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d7f90:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7f92:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7f94:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d7f96:	f003 fdcb 	bl	dbb30 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d7f9a:	42ae      	cmp	r6, r5
   d7f9c:	d229      	bcs.n	d7ff2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d7f9e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d7fa0:	4425      	add	r5, r4
			while(numBytes > 0) {
   d7fa2:	b18c      	cbz	r4, d7fc8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d7fa4:	2c1e      	cmp	r4, #30
   d7fa6:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d7fa8:	f8d8 3000 	ldr.w	r3, [r8]
   d7fac:	bf28      	it	cs
   d7fae:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7fb0:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d7fb2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7fb6:	aa02      	add	r2, sp, #8
   d7fb8:	463b      	mov	r3, r7
   d7fba:	4631      	mov	r1, r6
   d7fbc:	4640      	mov	r0, r8
				framAddrTo -= count;
   d7fbe:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d7fc0:	47c8      	blx	r9
				if (!result) {
   d7fc2:	b948      	cbnz	r0, d7fd8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7fc4:	2400      	movs	r4, #0
   d7fc6:	e000      	b.n	d7fca <_ZN6MB85RC8moveDataEjjj+0x46>
   d7fc8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7fca:	a801      	add	r0, sp, #4
   d7fcc:	f7ff ff0f 	bl	d7dee <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d7fd0:	4620      	mov	r0, r4
   d7fd2:	b00b      	add	sp, #44	; 0x2c
   d7fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d7fd8:	f8d8 3000 	ldr.w	r3, [r8]
   d7fdc:	aa02      	add	r2, sp, #8
   d7fde:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7fe2:	4629      	mov	r1, r5
   d7fe4:	463b      	mov	r3, r7
   d7fe6:	4640      	mov	r0, r8
   d7fe8:	47c8      	blx	r9
				if (!result) {
   d7fea:	2800      	cmp	r0, #0
   d7fec:	d0ea      	beq.n	d7fc4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d7fee:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7ff0:	e7d7      	b.n	d7fa2 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d7ff2:	d9e9      	bls.n	d7fc8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d7ff4:	2c00      	cmp	r4, #0
   d7ff6:	d0e7      	beq.n	d7fc8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d7ff8:	f8d8 3000 	ldr.w	r3, [r8]
   d7ffc:	2c1e      	cmp	r4, #30
   d7ffe:	4627      	mov	r7, r4
   d8000:	bf28      	it	cs
   d8002:	271e      	movcs	r7, #30
   d8004:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d8008:	aa02      	add	r2, sp, #8
   d800a:	463b      	mov	r3, r7
   d800c:	4631      	mov	r1, r6
   d800e:	4640      	mov	r0, r8
   d8010:	47c8      	blx	r9
				if (!result) {
   d8012:	2800      	cmp	r0, #0
   d8014:	d0d6      	beq.n	d7fc4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d8016:	f8d8 3000 	ldr.w	r3, [r8]
   d801a:	aa02      	add	r2, sp, #8
   d801c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d8020:	4629      	mov	r1, r5
   d8022:	463b      	mov	r3, r7
   d8024:	4640      	mov	r0, r8
   d8026:	47c8      	blx	r9
				if (!result) {
   d8028:	2800      	cmp	r0, #0
   d802a:	d0cb      	beq.n	d7fc4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d802c:	443e      	add	r6, r7
				framAddrTo += count;
   d802e:	443d      	add	r5, r7
				numBytes -= count;
   d8030:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d8032:	e7df      	b.n	d7ff4 <_ZN6MB85RC8moveDataEjjj+0x70>

000d8034 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d8034:	6803      	ldr	r3, [r0, #0]
   d8036:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d8038:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d803c:	2101      	movs	r1, #1
   d803e:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d8042:	4770      	bx	lr

000d8044 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d8044:	2a02      	cmp	r2, #2
   d8046:	d006      	beq.n	d8056 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d8048:	2a03      	cmp	r2, #3
   d804a:	d002      	beq.n	d8052 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d804c:	2a01      	cmp	r2, #1
   d804e:	d100      	bne.n	d8052 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8050:	6001      	str	r1, [r0, #0]
	}
   d8052:	2000      	movs	r0, #0
   d8054:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d8056:	680b      	ldr	r3, [r1, #0]
   d8058:	6003      	str	r3, [r0, #0]
	}
   d805a:	e7fa      	b.n	d8052 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d805c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d805c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d805e:	4603      	mov	r3, r0
	switch (__op)
   d8060:	d102      	bne.n	d8068 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d8062:	6001      	str	r1, [r0, #0]
      }
   d8064:	2000      	movs	r0, #0
   d8066:	4770      	bx	lr
	  switch (__op)
   d8068:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d806a:	bf04      	itt	eq
   d806c:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d8070:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d8074:	e7f6      	b.n	d8064 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d8076 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8076:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d8078:	6842      	ldr	r2, [r0, #4]
   d807a:	4603      	mov	r3, r0
   d807c:	1054      	asrs	r4, r2, #1
   d807e:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d8082:	07d2      	lsls	r2, r2, #31
   d8084:	bf48      	it	mi
   d8086:	590a      	ldrmi	r2, [r1, r4]
   d8088:	681b      	ldr	r3, [r3, #0]
      }
   d808a:	f85d 4b04 	ldr.w	r4, [sp], #4
   d808e:	bf48      	it	mi
   d8090:	58d3      	ldrmi	r3, [r2, r3]
   d8092:	4718      	bx	r3

000d8094 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d8094:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d8098:	4601      	mov	r1, r0
    if (stateHandler) {
   d809a:	b11b      	cbz	r3, d80a4 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d809c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d80a0:	30c0      	adds	r0, #192	; 0xc0
   d80a2:	4718      	bx	r3
}
   d80a4:	4770      	bx	lr
	...

000d80a8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d80a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d80aa:	4d12      	ldr	r5, [pc, #72]	; (d80f4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d80ac:	4608      	mov	r0, r1
        eventData = "";
   d80ae:	2a00      	cmp	r2, #0
   d80b0:	bf18      	it	ne
   d80b2:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d80b4:	460f      	mov	r7, r1
   d80b6:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d80b8:	f006 fdaf 	bl	dec1a <strlen>
   d80bc:	2840      	cmp	r0, #64	; 0x40
   d80be:	d817      	bhi.n	d80f0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d80c0:	4628      	mov	r0, r5
   d80c2:	f006 fdaa 	bl	dec1a <strlen>
   d80c6:	f240 236e 	movw	r3, #622	; 0x26e
   d80ca:	4298      	cmp	r0, r3
   d80cc:	d810      	bhi.n	d80f0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d80ce:	3043      	adds	r0, #67	; 0x43
   d80d0:	f7fb ffe3 	bl	d409a <_Znaj>
    if (event) {
   d80d4:	4604      	mov	r4, r0
   d80d6:	b148      	cbz	r0, d80ec <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d80d8:	4639      	mov	r1, r7
        event->flags = flags;
   d80da:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d80de:	f006 fd76 	bl	debce <strcpy>
        strcpy(event->eventData, eventData);
   d80e2:	4629      	mov	r1, r5
   d80e4:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d80e8:	f006 fd71 	bl	debce <strcpy>
}
   d80ec:	4620      	mov	r0, r4
   d80ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d80f0:	2400      	movs	r4, #0
   d80f2:	e7fb      	b.n	d80ec <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d80f4:	000e03d1 	.word	0x000e03d1

000d80f8 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d80f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d80fa:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d80fc:	460a      	mov	r2, r1
   d80fe:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d8100:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d8102:	1d01      	adds	r1, r0, #4
   d8104:	a808      	add	r0, sp, #32
   d8106:	f002 f85f 	bl	da1c8 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d810a:	9808      	ldr	r0, [sp, #32]
   d810c:	2100      	movs	r1, #0
   d810e:	f006 fe8f 	bl	dee30 <open>
   d8112:	4605      	mov	r5, r0
   d8114:	a808      	add	r0, sp, #32
   d8116:	f005 f9fb 	bl	dd510 <_ZN6StringD1Ev>
    if (fd) {
   d811a:	2d00      	cmp	r5, #0
   d811c:	d060      	beq.n	d81e0 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d811e:	a908      	add	r1, sp, #32
   d8120:	4628      	mov	r0, r5
   d8122:	f006 fe73 	bl	dee0c <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d8126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8128:	492e      	ldr	r1, [pc, #184]	; (d81e4 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d812a:	482f      	ldr	r0, [pc, #188]	; (d81e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d812c:	4632      	mov	r2, r6
   d812e:	f7fd fcbd 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d8132:	2200      	movs	r2, #0
   d8134:	4611      	mov	r1, r2
   d8136:	4628      	mov	r0, r5
   d8138:	f006 fe70 	bl	dee1c <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d813c:	2208      	movs	r2, #8
   d813e:	a906      	add	r1, sp, #24
   d8140:	4628      	mov	r0, r5
   d8142:	f006 fe89 	bl	dee58 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d8146:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d8148:	2f4a      	cmp	r7, #74	; 0x4a
   d814a:	dd39      	ble.n	d81c0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d814c:	4b27      	ldr	r3, [pc, #156]	; (d81ec <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d814e:	9a06      	ldr	r2, [sp, #24]
   d8150:	429a      	cmp	r2, r3
   d8152:	d135      	bne.n	d81c0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d8154:	4b26      	ldr	r3, [pc, #152]	; (d81f0 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d8156:	9a07      	ldr	r2, [sp, #28]
   d8158:	429a      	cmp	r2, r3
   d815a:	d131      	bne.n	d81c0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d815c:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d8160:	4610      	mov	r0, r2
   d8162:	9205      	str	r2, [sp, #20]
   d8164:	f7fb ff99 	bl	d409a <_Znaj>
            if (result) {
   d8168:	4604      	mov	r4, r0
   d816a:	b1c0      	cbz	r0, d819e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d816c:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d816e:	4601      	mov	r1, r0
   d8170:	9a05      	ldr	r2, [sp, #20]
   d8172:	4628      	mov	r0, r5
   d8174:	f006 fe70 	bl	dee58 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d8178:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d817c:	b9ab      	cbnz	r3, d81aa <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d817e:	1c63      	adds	r3, r4, #1
   d8180:	4618      	mov	r0, r3
   d8182:	9305      	str	r3, [sp, #20]
   d8184:	f006 fd49 	bl	dec1a <strlen>
   d8188:	283f      	cmp	r0, #63	; 0x3f
   d818a:	9b05      	ldr	r3, [sp, #20]
   d818c:	d80d      	bhi.n	d81aa <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d818e:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d8192:	9200      	str	r2, [sp, #0]
   d8194:	4917      	ldr	r1, [pc, #92]	; (d81f4 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d8196:	4814      	ldr	r0, [pc, #80]	; (d81e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8198:	4632      	mov	r2, r6
   d819a:	f7fd fc87 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d819e:	4628      	mov	r0, r5
   d81a0:	f006 fe2c 	bl	dedfc <close>
}
   d81a4:	4620      	mov	r0, r4
   d81a6:	b01f      	add	sp, #124	; 0x7c
   d81a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d81aa:	4913      	ldr	r1, [pc, #76]	; (d81f8 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d81ac:	480e      	ldr	r0, [pc, #56]	; (d81e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d81ae:	4632      	mov	r2, r6
   d81b0:	f7fd fc7c 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d81b4:	2143      	movs	r1, #67	; 0x43
   d81b6:	4620      	mov	r0, r4
   d81b8:	f005 ffd4 	bl	de164 <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d81bc:	2400      	movs	r4, #0
   d81be:	e7ee      	b.n	d819e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d81c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d81c4:	9302      	str	r3, [sp, #8]
   d81c6:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d81ca:	9301      	str	r3, [sp, #4]
   d81cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d81d0:	9300      	str	r3, [sp, #0]
   d81d2:	490a      	ldr	r1, [pc, #40]	; (d81fc <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d81d4:	9b06      	ldr	r3, [sp, #24]
   d81d6:	4804      	ldr	r0, [pc, #16]	; (d81e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d81d8:	4632      	mov	r2, r6
   d81da:	f7fd fc67 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
   d81de:	e7ed      	b.n	d81bc <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d81e0:	462c      	mov	r4, r5
    return result;
   d81e2:	e7df      	b.n	d81a4 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d81e4:	000dfc44 	.word	0x000dfc44
   d81e8:	2003e260 	.word	0x2003e260
   d81ec:	31b67663 	.word	0x31b67663
   d81f0:	00410801 	.word	0x00410801
   d81f4:	000dfc58 	.word	0x000dfc58
   d81f8:	000dfc7a 	.word	0x000dfc7a
   d81fc:	000dfca8 	.word	0x000dfca8

000d8200 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d8200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8204:	4680      	mov	r8, r0
   d8206:	4b28      	ldr	r3, [pc, #160]	; (d82a8 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   d8208:	f848 3b04 	str.w	r3, [r8], #4
   d820c:	4604      	mov	r4, r0
   d820e:	4640      	mov	r0, r8
   d8210:	f001 fef2 	bl	d9ff8 <_ZN14SequentialFileC1Ev>
   d8214:	2202      	movs	r2, #2
   d8216:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d8218:	2500      	movs	r5, #0
   d821a:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d821e:	2308      	movs	r3, #8
   d8220:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d8222:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d8226:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d822a:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d822e:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d8232:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8234:	2020      	movs	r0, #32
   d8236:	f7fb ff2e 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d823a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d823c:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d823e:	3e01      	subs	r6, #1
   d8240:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d8242:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d8246:	4607      	mov	r7, r0
   d8248:	f44f 7000 	mov.w	r0, #512	; 0x200
   d824c:	f7fb ff23 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8250:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d8254:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d8258:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d825c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d8260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8264:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d8268:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d826c:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d8270:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d8274:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d8278:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d827c:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d8280:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d8284:	4909      	ldr	r1, [pc, #36]	; (d82ac <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   d8286:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d828a:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d828e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   d8292:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d8296:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d829a:	4640      	mov	r0, r8
   d829c:	f001 fef2 	bl	da084 <_ZN14SequentialFile11withDirPathEPKc>
}
   d82a0:	4620      	mov	r0, r4
   d82a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d82a6:	bf00      	nop
   d82a8:	000dfec4 	.word	0x000dfec4
   d82ac:	000dfced 	.word	0x000dfced

000d82b0 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d82b0:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d82b2:	4c06      	ldr	r4, [pc, #24]	; (d82cc <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d82b4:	6823      	ldr	r3, [r4, #0]
   d82b6:	b93b      	cbnz	r3, d82c8 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d82b8:	20d0      	movs	r0, #208	; 0xd0
   d82ba:	f7fb feec 	bl	d4096 <_Znwj>
   d82be:	4605      	mov	r5, r0
   d82c0:	b108      	cbz	r0, d82c6 <_ZN17PublishQueuePosix8instanceEv+0x16>
   d82c2:	f7ff ff9d 	bl	d8200 <_ZN17PublishQueuePosixC1Ev>
   d82c6:	6025      	str	r5, [r4, #0]
}
   d82c8:	6820      	ldr	r0, [r4, #0]
   d82ca:	bd38      	pop	{r3, r4, r5, pc}
   d82cc:	2003e264 	.word	0x2003e264

000d82d0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d82d0:	b510      	push	{r4, lr}
   d82d2:	e9d1 2300 	ldrd	r2, r3, [r1]
   d82d6:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d82d8:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d82da:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d82dc:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d82de:	b90a      	cbnz	r2, d82e4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d82e0:	07d9      	lsls	r1, r3, #31
   d82e2:	d505      	bpl.n	d82f0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d82e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d82e8:	4b0f      	ldr	r3, [pc, #60]	; (d8328 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d82ea:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d82ec:	4b0f      	ldr	r3, [pc, #60]	; (d832c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d82ee:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d82f0:	ab02      	add	r3, sp, #8
   d82f2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d82f6:	466a      	mov	r2, sp
   d82f8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d82fc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8300:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8304:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8308:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d830a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d830e:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8310:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8312:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8314:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d8316:	4618      	mov	r0, r3
   d8318:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d831a:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d831c:	9105      	str	r1, [sp, #20]
   d831e:	f7fe f8e1 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
	}
   d8322:	4620      	mov	r0, r4
   d8324:	b006      	add	sp, #24
   d8326:	bd10      	pop	{r4, pc}
   d8328:	000d8077 	.word	0x000d8077
   d832c:	000d805d 	.word	0x000d805d

000d8330 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      ~lock_guard()
   d8330:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d8332:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d8334:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d8336:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d8338:	f002 fa04 	bl	da744 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d833c:	4620      	mov	r0, r4
   d833e:	bd10      	pop	{r4, pc}

000d8340 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d8340:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d8342:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d8344:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d8346:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d8348:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d834a:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d834c:	d002      	beq.n	d8354 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d834e:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d8350:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d8352:	bd10      	pop	{r4, pc}
	::operator delete(__p);
   d8354:	68c0      	ldr	r0, [r0, #12]
   d8356:	f7fb fea2 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d835a:	6963      	ldr	r3, [r4, #20]
   d835c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d835e:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d8360:	685b      	ldr	r3, [r3, #4]
   d8362:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8364:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8368:	6122      	str	r2, [r4, #16]
   d836a:	e7f1      	b.n	d8350 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d836c <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8370:	b087      	sub	sp, #28
   d8372:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8374:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d8376:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d8378:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d8424 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d837c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d8428 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d8380:	f002 f9d8 	bl	da734 <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8384:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d842c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d8388:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d838c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d8390:	4293      	cmp	r3, r2
   d8392:	d105      	bne.n	d83a0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d8394:	a801      	add	r0, sp, #4
   d8396:	f7ff ffcb 	bl	d8330 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d839a:	b007      	add	sp, #28
   d839c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d83a0:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d83a4:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d83a8:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d83aa:	f7ff ffc9 	bl	d8340 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d83ae:	4640      	mov	r0, r8
   d83b0:	f002 f8fe 	bl	da5b0 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d83b4:	2300      	movs	r3, #0
   d83b6:	4602      	mov	r2, r0
   d83b8:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d83ba:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d83bc:	a802      	add	r0, sp, #8
   d83be:	f001 ff03 	bl	da1c8 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d83c2:	9802      	ldr	r0, [sp, #8]
   d83c4:	f240 2102 	movw	r1, #514	; 0x202
   d83c8:	f006 fd32 	bl	dee30 <open>
   d83cc:	4605      	mov	r5, r0
   d83ce:	a802      	add	r0, sp, #8
   d83d0:	f005 f89e 	bl	dd510 <_ZN6StringD1Ev>
            if (fd) {
   d83d4:	b1cd      	cbz	r5, d840a <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d83d6:	2208      	movs	r2, #8
   d83d8:	eb0d 0102 	add.w	r1, sp, r2
   d83dc:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d83de:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d83e2:	f006 fd4b 	bl	dee7c <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d83e6:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d83ea:	f006 fc16 	bl	dec1a <strlen>
   d83ee:	4639      	mov	r1, r7
   d83f0:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d83f4:	4628      	mov	r0, r5
   d83f6:	f006 fd41 	bl	dee7c <write>
                close(fd);
   d83fa:	4628      	mov	r0, r5
   d83fc:	f006 fcfe 	bl	dedfc <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8400:	4807      	ldr	r0, [pc, #28]	; (d8420 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d8402:	4632      	mov	r2, r6
   d8404:	4659      	mov	r1, fp
   d8406:	f7fd fb51 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d840a:	4631      	mov	r1, r6
   d840c:	4640      	mov	r0, r8
   d840e:	f002 f90f 	bl	da630 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d8412:	2f00      	cmp	r7, #0
   d8414:	d0b8      	beq.n	d8388 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d8416:	2143      	movs	r1, #67	; 0x43
   d8418:	4638      	mov	r0, r7
   d841a:	f005 fea3 	bl	de164 <_ZdlPvj>
   d841e:	e7b1      	b.n	d8384 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d8420:	2003e260 	.word	0x2003e260
   d8424:	31b67663 	.word	0x31b67663
   d8428:	00410801 	.word	0x00410801
   d842c:	000dfcfb 	.word	0x000dfcfb

000d8430 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d8430:	2900      	cmp	r1, #0
   d8432:	bf08      	it	eq
   d8434:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d8438:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d843a:	d005      	beq.n	d8448 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d843c:	2900      	cmp	r1, #0
   d843e:	bf08      	it	eq
   d8440:	2840      	cmpeq	r0, #64	; 0x40
   d8442:	d10b      	bne.n	d845c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d8444:	2a09      	cmp	r2, #9
   d8446:	d109      	bne.n	d845c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d8448:	4905      	ldr	r1, [pc, #20]	; (d8460 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d844a:	4806      	ldr	r0, [pc, #24]	; (d8464 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d844c:	f7fd fb2e 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d8450:	f7ff ff2e 	bl	d82b0 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d8454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d8458:	f7ff bf88 	b.w	d836c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d845c:	bd38      	pop	{r3, r4, r5, pc}
   d845e:	bf00      	nop
   d8460:	000dfd18 	.word	0x000dfd18
   d8464:	2003e260 	.word	0x2003e260

000d8468 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d8468:	b570      	push	{r4, r5, r6, lr}
   d846a:	b086      	sub	sp, #24
   d846c:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d846e:	f002 fc7b 	bl	dad68 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d8472:	b948      	cbnz	r0, d8488 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d8474:	4b43      	ldr	r3, [pc, #268]	; (d8584 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   d8476:	a902      	add	r1, sp, #8
   d8478:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d847c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8480:	f7ff ff26 	bl	d82d0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8484:	b006      	add	sp, #24
   d8486:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   d8488:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   d848c:	b11d      	cbz	r5, d8496 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   d848e:	2301      	movs	r3, #1
   d8490:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   d8494:	e7f6      	b.n	d8484 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d8496:	f002 f985 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d849a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d849e:	1ac0      	subs	r0, r0, r3
   d84a0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d84a4:	4298      	cmp	r0, r3
   d84a6:	d3ed      	bcc.n	d8484 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d84a8:	1d26      	adds	r6, r4, #4
   d84aa:	4629      	mov	r1, r5
   d84ac:	4630      	mov	r0, r6
   d84ae:	f002 f88b 	bl	da5c8 <_ZN14SequentialFile16getFileFromQueueEb>
   d84b2:	4601      	mov	r1, r0
   d84b4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d84b8:	2800      	cmp	r0, #0
   d84ba:	d052      	beq.n	d8562 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   d84bc:	4620      	mov	r0, r4
   d84be:	f7ff fe1b 	bl	d80f8 <_ZN17PublishQueuePosix13readQueueFileEi>
   d84c2:	4605      	mov	r5, r0
   d84c4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d84c8:	2800      	cmp	r0, #0
   d84ca:	d035      	beq.n	d8538 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   d84cc:	f002 f96a 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d84d0:	ae02      	add	r6, sp, #8
   d84d2:	2500      	movs	r5, #0
   d84d4:	4b2c      	ldr	r3, [pc, #176]	; (d8588 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   d84d6:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d84da:	4631      	mov	r1, r6
   d84dc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d84e0:	9302      	str	r3, [sp, #8]
   d84e2:	9503      	str	r5, [sp, #12]
   d84e4:	f7ff fef4 	bl	d82d0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d84e8:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d84ec:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d84f0:	9200      	str	r2, [sp, #0]
   d84f2:	4926      	ldr	r1, [pc, #152]	; (d858c <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d84f4:	4a26      	ldr	r2, [pc, #152]	; (d8590 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   d84f6:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d84fa:	42a8      	cmp	r0, r5
   d84fc:	bf08      	it	eq
   d84fe:	460a      	moveq	r2, r1
   d8500:	3301      	adds	r3, #1
   d8502:	4924      	ldr	r1, [pc, #144]	; (d8594 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   d8504:	4824      	ldr	r0, [pc, #144]	; (d8598 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   d8506:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d850a:	f7fd facf 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d850e:	f7fe f82d 	bl	d656c <_ZN19BackgroundPublishRK8instanceEv>
   d8512:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d8516:	4b21      	ldr	r3, [pc, #132]	; (d859c <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   d8518:	9305      	str	r3, [sp, #20]
   d851a:	e9cd 6500 	strd	r6, r5, [sp]
   d851e:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d8520:	4b1f      	ldr	r3, [pc, #124]	; (d85a0 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8522:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d8524:	9304      	str	r3, [sp, #16]
   d8526:	f811 3b01 	ldrb.w	r3, [r1], #1
   d852a:	3242      	adds	r2, #66	; 0x42
   d852c:	f7fe f968 	bl	d6800 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d8530:	4630      	mov	r0, r6
   d8532:	f7fd ffd7 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
   d8536:	e7a5      	b.n	d8484 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d8538:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d853c:	4919      	ldr	r1, [pc, #100]	; (d85a4 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   d853e:	4816      	ldr	r0, [pc, #88]	; (d8598 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d8540:	f7fb fdc2 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d8544:	2101      	movs	r1, #1
   d8546:	4630      	mov	r0, r6
   d8548:	f002 f83e 	bl	da5c8 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d854c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d8550:	462a      	mov	r2, r5
   d8552:	4630      	mov	r0, r6
   d8554:	f001 fe74 	bl	da240 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d8558:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d855c:	2b00      	cmp	r3, #0
   d855e:	d1b5      	bne.n	d84cc <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   d8560:	e795      	b.n	d848e <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d8562:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d8566:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d856a:	429a      	cmp	r2, r3
   d856c:	d007      	beq.n	d857e <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   d856e:	681b      	ldr	r3, [r3, #0]
   d8570:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d8574:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d8578:	f7ff fee2 	bl	d8340 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d857c:	e7ec      	b.n	d8558 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   d857e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d8582:	e784      	b.n	d848e <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d8584:	000d8609 	.word	0x000d8609
   d8588:	000d8961 	.word	0x000d8961
   d858c:	000dfd47 	.word	0x000dfd47
   d8590:	000e024c 	.word	0x000e024c
   d8594:	000dfd68 	.word	0x000dfd68
   d8598:	2003e260 	.word	0x2003e260
   d859c:	000d8035 	.word	0x000d8035
   d85a0:	000d8045 	.word	0x000d8045
   d85a4:	000dfd4b 	.word	0x000dfd4b

000d85a8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d85a8:	68c3      	ldr	r3, [r0, #12]
   d85aa:	68ca      	ldr	r2, [r1, #12]
   d85ac:	1a9b      	subs	r3, r3, r2
   d85ae:	109b      	asrs	r3, r3, #2
   d85b0:	1e5a      	subs	r2, r3, #1
   d85b2:	e9d0 3000 	ldrd	r3, r0, [r0]
   d85b6:	1a1b      	subs	r3, r3, r0
   d85b8:	109b      	asrs	r3, r3, #2
   d85ba:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d85be:	6888      	ldr	r0, [r1, #8]
   d85c0:	680a      	ldr	r2, [r1, #0]
   d85c2:	1a80      	subs	r0, r0, r2
    }
   d85c4:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d85c8:	4770      	bx	lr

000d85ca <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   d85ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d85cc:	4605      	mov	r5, r0
   d85ce:	9001      	str	r0, [sp, #4]
   d85d0:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d85d2:	f002 f8af 	bl	da734 <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d85d6:	f105 0180 	add.w	r1, r5, #128	; 0x80
   d85da:	f105 0090 	add.w	r0, r5, #144	; 0x90
   d85de:	f7ff ffe3 	bl	d85a8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (result == 0) {
   d85e2:	4604      	mov	r4, r0
   d85e4:	b950      	cbnz	r0, d85fc <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
            result = fileQueue.getQueueLen();
   d85e6:	1d28      	adds	r0, r5, #4
   d85e8:	f002 f83c 	bl	da664 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   d85ec:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   d85f0:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   d85f2:	b11b      	cbz	r3, d85fc <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
   d85f4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d85f8:	b903      	cbnz	r3, d85fc <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
                result++;
   d85fa:	3401      	adds	r4, #1
    WITH_LOCK(*this) {
   d85fc:	a801      	add	r0, sp, #4
   d85fe:	f7ff fe97 	bl	d8330 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8602:	4620      	mov	r0, r4
   d8604:	b003      	add	sp, #12
   d8606:	bd30      	pop	{r4, r5, pc}

000d8608 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d8608:	b513      	push	{r0, r1, r4, lr}
   d860a:	4604      	mov	r4, r0
   d860c:	f002 fbac 	bl	dad68 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d8610:	b190      	cbz	r0, d8638 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   d8612:	f002 f8c7 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d8616:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d861a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d861e:	4b0d      	ldr	r3, [pc, #52]	; (d8654 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   d8620:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d8624:	9300      	str	r3, [sp, #0]
   d8626:	4669      	mov	r1, sp
   d8628:	2300      	movs	r3, #0
   d862a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d862e:	9301      	str	r3, [sp, #4]
   d8630:	f7ff fe4e 	bl	d82d0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8634:	b002      	add	sp, #8
   d8636:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   d8638:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   d863c:	b11b      	cbz	r3, d8646 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   d863e:	2301      	movs	r3, #1
   d8640:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   d8644:	e7f6      	b.n	d8634 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   d8646:	4620      	mov	r0, r4
   d8648:	f7ff ffbf 	bl	d85ca <_ZN17PublishQueuePosix12getNumEventsEv>
   d864c:	2800      	cmp	r0, #0
   d864e:	d0f6      	beq.n	d863e <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   d8650:	e7f0      	b.n	d8634 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d8652:	bf00      	nop
   d8654:	000d8469 	.word	0x000d8469

000d8658 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d8658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d865c:	4604      	mov	r4, r0
   d865e:	9001      	str	r0, [sp, #4]
   d8660:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d8662:	f002 f867 	bl	da734 <os_mutex_recursive_lock>
   d8666:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d866a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d866e:	f7ff ff9b 	bl	d85a8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d8672:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d8674:	4283      	cmp	r3, r0
   d8676:	d202      	bcs.n	d867e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d8678:	4620      	mov	r0, r4
   d867a:	f7ff fe77 	bl	d836c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d867e:	f8df 8048 	ldr.w	r8, [pc, #72]	; d86c8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d8682:	4f10      	ldr	r7, [pc, #64]	; (d86c4 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d8684:	1d26      	adds	r6, r4, #4
   d8686:	4630      	mov	r0, r6
   d8688:	f001 ffec 	bl	da664 <_ZNK14SequentialFile11getQueueLenEv>
   d868c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d868e:	4298      	cmp	r0, r3
   d8690:	dc05      	bgt.n	d869e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d8692:	a801      	add	r0, sp, #4
   d8694:	f7ff fe4c 	bl	d8330 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8698:	b002      	add	sp, #8
   d869a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d869e:	2101      	movs	r1, #1
   d86a0:	4630      	mov	r0, r6
   d86a2:	f001 ff91 	bl	da5c8 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d86a6:	4605      	mov	r5, r0
   d86a8:	2800      	cmp	r0, #0
   d86aa:	d0ec      	beq.n	d8686 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d86ac:	4601      	mov	r1, r0
   d86ae:	2200      	movs	r2, #0
   d86b0:	4630      	mov	r0, r6
   d86b2:	f001 fdc5 	bl	da240 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d86b6:	462a      	mov	r2, r5
   d86b8:	4641      	mov	r1, r8
   d86ba:	4638      	mov	r0, r7
   d86bc:	f7fb fd04 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d86c0:	e7e1      	b.n	d8686 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d86c2:	bf00      	nop
   d86c4:	2003e260 	.word	0x2003e260
   d86c8:	000dfd87 	.word	0x000dfd87

000d86cc <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d86cc:	b513      	push	{r0, r1, r4, lr}
   d86ce:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d86d0:	2000      	movs	r0, #0
   d86d2:	f002 faf1 	bl	dacb8 <system_thread_get_state>
   d86d6:	2801      	cmp	r0, #1
   d86d8:	d005      	beq.n	d86e6 <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d86da:	4912      	ldr	r1, [pc, #72]	; (d8724 <_ZN17PublishQueuePosix5setupEv+0x58>)
   d86dc:	4812      	ldr	r0, [pc, #72]	; (d8728 <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d86de:	f7fd f9fc 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
}
   d86e2:	b002      	add	sp, #8
   d86e4:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d86e6:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d86ea:	f002 f813 	bl	da714 <os_mutex_recursive_create>
   d86ee:	4a0f      	ldr	r2, [pc, #60]	; (d872c <_ZN17PublishQueuePosix5setupEv+0x60>)
   d86f0:	2300      	movs	r3, #0
   d86f2:	2100      	movs	r1, #0
   d86f4:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d86f8:	f002 fabe 	bl	dac78 <system_subscribe_event>
    BackgroundPublishRK::instance().start();
   d86fc:	f7fd ff36 	bl	d656c <_ZN19BackgroundPublishRK8instanceEv>
   d8700:	f7fe f858 	bl	d67b4 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   d8704:	1d20      	adds	r0, r4, #4
   d8706:	f001 fedb 	bl	da4c0 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d870a:	4620      	mov	r0, r4
   d870c:	f7ff ffa4 	bl	d8658 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d8710:	4b07      	ldr	r3, [pc, #28]	; (d8730 <_ZN17PublishQueuePosix5setupEv+0x64>)
   d8712:	9300      	str	r3, [sp, #0]
   d8714:	4669      	mov	r1, sp
   d8716:	2300      	movs	r3, #0
   d8718:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d871c:	9301      	str	r3, [sp, #4]
   d871e:	f7ff fdd7 	bl	d82d0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8722:	e7de      	b.n	d86e2 <_ZN17PublishQueuePosix5setupEv+0x16>
   d8724:	000dfd9a 	.word	0x000dfd9a
   d8728:	2003e260 	.word	0x2003e260
   d872c:	000d8431 	.word	0x000d8431
   d8730:	000d8609 	.word	0x000d8609

000d8734 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d8734:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d8736:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d8738:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d873a:	b163      	cbz	r3, d8756 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d873c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d873e:	6945      	ldr	r5, [r0, #20]
   d8740:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d8742:	42ae      	cmp	r6, r5
   d8744:	d904      	bls.n	d8750 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d8746:	f855 0b04 	ldr.w	r0, [r5], #4
   d874a:	f7fb fca8 	bl	d409e <_ZdlPv>
   d874e:	e7f8      	b.n	d8742 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d8750:	6820      	ldr	r0, [r4, #0]
   d8752:	f7fb fca4 	bl	d409e <_ZdlPv>
    }
   d8756:	4620      	mov	r0, r4
   d8758:	bd70      	pop	{r4, r5, r6, pc}

000d875a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d875a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d875e:	4606      	mov	r6, r0
   d8760:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8762:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8764:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8766:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8768:	1a47      	subs	r7, r0, r1
   d876a:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d876e:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8770:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d8774:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8776:	d927      	bls.n	d87c8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d8778:	1b5d      	subs	r5, r3, r5
   d877a:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d877c:	6832      	ldr	r2, [r6, #0]
   d877e:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8780:	b10c      	cbz	r4, d8786 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d8782:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d8786:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8788:	4414      	add	r4, r2
   d878a:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d878c:	42a1      	cmp	r1, r4
   d878e:	eba3 0201 	sub.w	r2, r3, r1
   d8792:	d913      	bls.n	d87bc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   d8794:	4299      	cmp	r1, r3
   d8796:	d002      	beq.n	d879e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8798:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d879a:	f006 f97d 	bl	dea98 <memmove>
	_M_node = __new_node;
   d879e:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d87a0:	6823      	ldr	r3, [r4, #0]
   d87a2:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d87a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d87a8:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d87aa:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d87ac:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d87ae:	59e3      	ldr	r3, [r4, r7]
   d87b0:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d87b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d87b6:	6233      	str	r3, [r6, #32]
    }
   d87b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d87bc:	4299      	cmp	r1, r3
   d87be:	d0ee      	beq.n	d879e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d87c0:	1d38      	adds	r0, r7, #4
   d87c2:	1a80      	subs	r0, r0, r2
   d87c4:	4420      	add	r0, r4
   d87c6:	e7e8      	b.n	d879a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d87c8:	f103 0802 	add.w	r8, r3, #2
   d87cc:	454b      	cmp	r3, r9
   d87ce:	bf2c      	ite	cs
   d87d0:	4498      	addcs	r8, r3
   d87d2:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d87d4:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d87d8:	d301      	bcc.n	d87de <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d87da:	f005 fcc9 	bl	de170 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d87de:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d87e2:	f7fb fc58 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d87e6:	eba8 0505 	sub.w	r5, r8, r5
   d87ea:	086d      	lsrs	r5, r5, #1
   d87ec:	4682      	mov	sl, r0
   d87ee:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d87f0:	b10c      	cbz	r4, d87f6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d87f2:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d87f6:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d87f8:	6971      	ldr	r1, [r6, #20]
   d87fa:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d87fc:	442c      	add	r4, r5
	  if (_Num)
   d87fe:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8800:	4454      	add	r4, sl
   d8802:	d003      	beq.n	d880c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8804:	1a52      	subs	r2, r2, r1
   d8806:	4620      	mov	r0, r4
   d8808:	f006 f946 	bl	dea98 <memmove>
	::operator delete(__p);
   d880c:	6830      	ldr	r0, [r6, #0]
   d880e:	f7fb fc46 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d8812:	e9c6 a800 	strd	sl, r8, [r6]
   d8816:	e7c2      	b.n	d879e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d8818 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d8818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d881c:	b086      	sub	sp, #24
   d881e:	4604      	mov	r4, r0
   d8820:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d8824:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d8828:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d882a:	460f      	mov	r7, r1
   d882c:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d882e:	f7ff fc3b 	bl	d80a8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d8832:	4605      	mov	r5, r0
   d8834:	2800      	cmp	r0, #0
   d8836:	d042      	beq.n	d88be <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d8838:	4b43      	ldr	r3, [pc, #268]	; (d8948 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d883a:	4944      	ldr	r1, [pc, #272]	; (d894c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d883c:	4844      	ldr	r0, [pc, #272]	; (d8950 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d883e:	2e00      	cmp	r6, #0
   d8840:	bf18      	it	ne
   d8842:	4633      	movne	r3, r6
   d8844:	463a      	mov	r2, r7
   d8846:	f7fd f931 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
   d884a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d884c:	9405      	str	r4, [sp, #20]
   d884e:	f001 ff71 	bl	da734 <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d8852:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d8856:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d885a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d885c:	4293      	cmp	r3, r2
   d885e:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d8862:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d8866:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d886a:	d02b      	beq.n	d88c4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d886c:	b103      	cbz	r3, d8870 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d886e:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d8870:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d8874:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d8876:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d8878:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d887c:	4628      	mov	r0, r5
   d887e:	f001 fef1 	bl	da664 <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8882:	4639      	mov	r1, r7
   d8884:	9003      	str	r0, [sp, #12]
   d8886:	4630      	mov	r0, r6
   d8888:	f7ff fe8e 	bl	d85a8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d888c:	9002      	str	r0, [sp, #8]
   d888e:	f002 fa6b 	bl	dad68 <spark_cloud_flag_connected>
   d8892:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d8896:	9000      	str	r0, [sp, #0]
   d8898:	492e      	ldr	r1, [pc, #184]	; (d8954 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d889a:	482d      	ldr	r0, [pc, #180]	; (d8950 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d889c:	f7fd f906 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d88a0:	4628      	mov	r0, r5
   d88a2:	f001 fedf 	bl	da664 <_ZNK14SequentialFile11getQueueLenEv>
   d88a6:	2800      	cmp	r0, #0
   d88a8:	d03e      	beq.n	d8928 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d88aa:	4620      	mov	r0, r4
   d88ac:	f7ff fd5e 	bl	d836c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d88b0:	4620      	mov	r0, r4
   d88b2:	f7ff fed1 	bl	d8658 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d88b6:	a805      	add	r0, sp, #20
   d88b8:	f7ff fd3a 	bl	d8330 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d88bc:	2001      	movs	r0, #1
}
   d88be:	b006      	add	sp, #24
   d88c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d88c4:	4639      	mov	r1, r7
   d88c6:	4630      	mov	r0, r6
   d88c8:	f7ff fe6e 	bl	d85a8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d88cc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d88d0:	4298      	cmp	r0, r3
   d88d2:	d102      	bne.n	d88da <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d88d4:	4820      	ldr	r0, [pc, #128]	; (d8958 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d88d6:	f005 fc4e 	bl	de176 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d88da:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d88de:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d88e0:	1a9a      	subs	r2, r3, r2
   d88e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d88e4:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d88e8:	2b01      	cmp	r3, #1
   d88ea:	d804      	bhi.n	d88f6 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d88ec:	2200      	movs	r2, #0
   d88ee:	2101      	movs	r1, #1
   d88f0:	4640      	mov	r0, r8
   d88f2:	f7ff ff32 	bl	d875a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d88f6:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d88fa:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d88fe:	f7fb fbca 	bl	d4096 <_Znwj>
   d8902:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d8906:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d890a:	b103      	cbz	r3, d890e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d890c:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d890e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d8912:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d8914:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d8918:	685b      	ldr	r3, [r3, #4]
   d891a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d891e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8922:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d8926:	e7a6      	b.n	d8876 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8928:	4639      	mov	r1, r7
   d892a:	4630      	mov	r0, r6
   d892c:	f7ff fe3c 	bl	d85a8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d8930:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d8932:	4283      	cmp	r3, r0
   d8934:	d3b9      	bcc.n	d88aa <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d8936:	f002 fa17 	bl	dad68 <spark_cloud_flag_connected>
   d893a:	2800      	cmp	r0, #0
   d893c:	d0b5      	beq.n	d88aa <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d893e:	4907      	ldr	r1, [pc, #28]	; (d895c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d8940:	4803      	ldr	r0, [pc, #12]	; (d8950 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d8942:	f7fd f8b3 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
   d8946:	e7b3      	b.n	d88b0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d8948:	000e03d1 	.word	0x000e03d1
   d894c:	000dfdbd 	.word	0x000dfdbd
   d8950:	2003e260 	.word	0x2003e260
   d8954:	000dfe15 	.word	0x000dfe15
   d8958:	000dfde5 	.word	0x000dfde5
   d895c:	000dfe41 	.word	0x000dfe41

000d8960 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d8960:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d8962:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d8966:	4604      	mov	r4, r0
    if (!publishComplete) {
   d8968:	2b00      	cmp	r3, #0
   d896a:	d041      	beq.n	d89f0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d896c:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d8970:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d8974:	2b00      	cmp	r3, #0
   d8976:	d03d      	beq.n	d89f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d8978:	4952      	ldr	r1, [pc, #328]	; (d8ac4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d897a:	4853      	ldr	r0, [pc, #332]	; (d8ac8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d897c:	f7fd f896 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d8980:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d8984:	b1d3      	cbz	r3, d89bc <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d8986:	1d26      	adds	r6, r4, #4
   d8988:	2100      	movs	r1, #0
   d898a:	4630      	mov	r0, r6
   d898c:	f001 fe1c 	bl	da5c8 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d8990:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d8994:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d8996:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d8998:	d10d      	bne.n	d89b6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d899a:	2101      	movs	r1, #1
   d899c:	4630      	mov	r0, r6
   d899e:	f001 fe13 	bl	da5c8 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d89a2:	2200      	movs	r2, #0
   d89a4:	4629      	mov	r1, r5
   d89a6:	4630      	mov	r0, r6
   d89a8:	f001 fc4a 	bl	da240 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d89ac:	4947      	ldr	r1, [pc, #284]	; (d8acc <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d89ae:	4846      	ldr	r0, [pc, #280]	; (d8ac8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d89b0:	462a      	mov	r2, r5
   d89b2:	f7fd f87b 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d89b6:	2300      	movs	r3, #0
   d89b8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d89bc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d89c0:	b110      	cbz	r0, d89c8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d89c2:	2143      	movs	r1, #67	; 0x43
   d89c4:	f005 fbce 	bl	de164 <_ZdlPvj>
        curEvent = NULL;
   d89c8:	2300      	movs	r3, #0
   d89ca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d89ce:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d89d2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d89d6:	4b3e      	ldr	r3, [pc, #248]	; (d8ad0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d89d8:	9300      	str	r3, [sp, #0]
   d89da:	4669      	mov	r1, sp
   d89dc:	2300      	movs	r3, #0
   d89de:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d89e2:	9301      	str	r3, [sp, #4]
   d89e4:	f7ff fc74 	bl	d82d0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d89e8:	f001 fedc 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d89ec:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d89f0:	b002      	add	sp, #8
   d89f2:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d89f4:	4937      	ldr	r1, [pc, #220]	; (d8ad4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d89f6:	4834      	ldr	r0, [pc, #208]	; (d8ac8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d89f8:	f7fd f858 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d89fc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d8a00:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d8a04:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d8a08:	b14b      	cbz	r3, d8a1e <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d8a0a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d8a0e:	b110      	cbz	r0, d8a16 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d8a10:	2143      	movs	r1, #67	; 0x43
   d8a12:	f005 fba7 	bl	de164 <_ZdlPvj>
            curEvent = NULL;
   d8a16:	2300      	movs	r3, #0
   d8a18:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d8a1c:	e7db      	b.n	d89d6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d8a1e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d8a20:	9400      	str	r4, [sp, #0]
   d8a22:	f001 fe87 	bl	da734 <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d8a26:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d8a2a:	4293      	cmp	r3, r2
   d8a2c:	d013      	beq.n	d8a56 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d8a2e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d8a32:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d8a36:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d8a3a:	3b04      	subs	r3, #4
   d8a3c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d8a40:	4668      	mov	r0, sp
   d8a42:	f7ff fc75 	bl	d8330 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d8a46:	4924      	ldr	r1, [pc, #144]	; (d8ad8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d8a48:	481f      	ldr	r0, [pc, #124]	; (d8ac8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8a4a:	f7fd f82f 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d8a4e:	4620      	mov	r0, r4
   d8a50:	f7ff fc8c 	bl	d836c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d8a54:	e7bf      	b.n	d89d6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8a56:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d8a5a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d8a5e:	f7ff fda3 	bl	d85a8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d8a62:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d8a66:	4298      	cmp	r0, r3
   d8a68:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d8a6c:	d102      	bne.n	d8a74 <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d8a6e:	481b      	ldr	r0, [pc, #108]	; (d8adc <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d8a70:	f005 fb81 	bl	de176 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d8a74:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d8a78:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d8a7a:	429a      	cmp	r2, r3
   d8a7c:	d104      	bne.n	d8a88 <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d8a7e:	2201      	movs	r2, #1
   d8a80:	4611      	mov	r1, r2
   d8a82:	4628      	mov	r0, r5
   d8a84:	f7ff fe69 	bl	d875a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8a88:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d8a8c:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d8a90:	f7fb fb01 	bl	d4096 <_Znwj>
   d8a94:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d8a98:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d8a9c:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d8a9e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d8aa2:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d8aa6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8aaa:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8aae:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d8ab2:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d8ab6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d8aba:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8abe:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d8ac2:	e7bd      	b.n	d8a40 <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d8ac4:	000dfe54 	.word	0x000dfe54
   d8ac8:	2003e260 	.word	0x2003e260
   d8acc:	000dfe67 	.word	0x000dfe67
   d8ad0:	000d8469 	.word	0x000d8469
   d8ad4:	000dfe77 	.word	0x000dfe77
   d8ad8:	000dfe89 	.word	0x000dfe89
   d8adc:	000dfde5 	.word	0x000dfde5

000d8ae0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   d8ae0:	4b01      	ldr	r3, [pc, #4]	; (d8ae8 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d8ae2:	4a02      	ldr	r2, [pc, #8]	; (d8aec <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d8ae4:	601a      	str	r2, [r3, #0]
}
   d8ae6:	4770      	bx	lr
   d8ae8:	2003e260 	.word	0x2003e260
   d8aec:	000dfeb0 	.word	0x000dfeb0

000d8af0 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d8af0:	b510      	push	{r4, lr}
   d8af2:	4b07      	ldr	r3, [pc, #28]	; (d8b10 <_ZN17PublishQueuePosixD1Ev+0x20>)
   d8af4:	4604      	mov	r4, r0
   d8af6:	f840 3bc0 	str.w	r3, [r0], #192
   d8afa:	f7fd fcf3 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d8afe:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d8b02:	f7ff fe17 	bl	d8734 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d8b06:	1d20      	adds	r0, r4, #4
   d8b08:	f001 fc18 	bl	da33c <_ZN14SequentialFileD1Ev>
}
   d8b0c:	4620      	mov	r0, r4
   d8b0e:	bd10      	pop	{r4, pc}
   d8b10:	000dfec4 	.word	0x000dfec4

000d8b14 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d8b14:	b510      	push	{r4, lr}
   d8b16:	4604      	mov	r4, r0
}
   d8b18:	f7ff ffea 	bl	d8af0 <_ZN17PublishQueuePosixD1Ev>
   d8b1c:	4620      	mov	r0, r4
   d8b1e:	21d0      	movs	r1, #208	; 0xd0
   d8b20:	f005 fb20 	bl	de164 <_ZdlPvj>
   d8b24:	4620      	mov	r0, r4
   d8b26:	bd10      	pop	{r4, pc}

000d8b28 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d8b28:	6001      	str	r1, [r0, #0]
   d8b2a:	7102      	strb	r2, [r0, #4]
{
}
   d8b2c:	4770      	bx	lr

000d8b2e <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d8b2e:	6800      	ldr	r0, [r0, #0]
   d8b30:	6803      	ldr	r3, [r0, #0]
   d8b32:	68db      	ldr	r3, [r3, #12]
   d8b34:	4718      	bx	r3

000d8b36 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d8b36:	6800      	ldr	r0, [r0, #0]
   d8b38:	6803      	ldr	r3, [r0, #0]
   d8b3a:	6a1b      	ldr	r3, [r3, #32]
   d8b3c:	4718      	bx	r3

000d8b3e <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d8b3e:	6800      	ldr	r0, [r0, #0]
   d8b40:	6803      	ldr	r3, [r0, #0]
   d8b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8b44:	4718      	bx	r3

000d8b46 <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d8b46:	6800      	ldr	r0, [r0, #0]
   d8b48:	6803      	ldr	r3, [r0, #0]
   d8b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8b4c:	4718      	bx	r3

000d8b4e <_ZN10RHDatagram6sendtoEPhhh>:
{
   d8b4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8b50:	4605      	mov	r5, r0
   d8b52:	460c      	mov	r4, r1
    setHeaderTo(address);
   d8b54:	4619      	mov	r1, r3
{
   d8b56:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d8b58:	f7ff fff5 	bl	d8b46 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d8b5c:	6828      	ldr	r0, [r5, #0]
   d8b5e:	9a01      	ldr	r2, [sp, #4]
   d8b60:	6803      	ldr	r3, [r0, #0]
   d8b62:	695b      	ldr	r3, [r3, #20]
   d8b64:	4621      	mov	r1, r4
}
   d8b66:	b003      	add	sp, #12
   d8b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d8b6c:	4718      	bx	r3

000d8b6e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d8b6e:	6800      	ldr	r0, [r0, #0]
   d8b70:	6803      	ldr	r3, [r0, #0]
   d8b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8b74:	4718      	bx	r3

000d8b76 <_ZN10RHDatagram14setThisAddressEh>:
{
   d8b76:	b538      	push	{r3, r4, r5, lr}
   d8b78:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d8b7a:	6800      	ldr	r0, [r0, #0]
   d8b7c:	6803      	ldr	r3, [r0, #0]
{
   d8b7e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d8b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8b82:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d8b84:	4629      	mov	r1, r5
   d8b86:	4620      	mov	r0, r4
   d8b88:	f7ff fff1 	bl	d8b6e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d8b8c:	7125      	strb	r5, [r4, #4]
}
   d8b8e:	bd38      	pop	{r3, r4, r5, pc}

000d8b90 <_ZN10RHDatagram4initEv>:
{
   d8b90:	b538      	push	{r3, r4, r5, lr}
   d8b92:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d8b94:	6800      	ldr	r0, [r0, #0]
   d8b96:	6803      	ldr	r3, [r0, #0]
   d8b98:	689b      	ldr	r3, [r3, #8]
   d8b9a:	4798      	blx	r3
    if (ret)
   d8b9c:	4605      	mov	r5, r0
   d8b9e:	b118      	cbz	r0, d8ba8 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d8ba0:	7921      	ldrb	r1, [r4, #4]
   d8ba2:	4620      	mov	r0, r4
   d8ba4:	f7ff ffe7 	bl	d8b76 <_ZN10RHDatagram14setThisAddressEh>
}
   d8ba8:	4628      	mov	r0, r5
   d8baa:	bd38      	pop	{r3, r4, r5, pc}

000d8bac <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d8bac:	6800      	ldr	r0, [r0, #0]
   d8bae:	6803      	ldr	r3, [r0, #0]
   d8bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8bb2:	4718      	bx	r3

000d8bb4 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d8bb4:	6800      	ldr	r0, [r0, #0]
   d8bb6:	6803      	ldr	r3, [r0, #0]
   d8bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8bba:	4718      	bx	r3

000d8bbc <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d8bbc:	6800      	ldr	r0, [r0, #0]
   d8bbe:	6803      	ldr	r3, [r0, #0]
   d8bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8bc2:	4718      	bx	r3

000d8bc4 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d8bc4:	6800      	ldr	r0, [r0, #0]
   d8bc6:	6803      	ldr	r3, [r0, #0]
   d8bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8bca:	4718      	bx	r3

000d8bcc <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d8bcc:	6800      	ldr	r0, [r0, #0]
   d8bce:	6803      	ldr	r3, [r0, #0]
   d8bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8bd2:	4718      	bx	r3

000d8bd4 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d8bd4:	6800      	ldr	r0, [r0, #0]
   d8bd6:	6803      	ldr	r3, [r0, #0]
   d8bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8bda:	4718      	bx	r3

000d8bdc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d8bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8be0:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d8be2:	6800      	ldr	r0, [r0, #0]
{
   d8be4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d8be6:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d8be8:	6803      	ldr	r3, [r0, #0]
   d8bea:	691b      	ldr	r3, [r3, #16]
{
   d8bec:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d8bf0:	4798      	blx	r3
   d8bf2:	4605      	mov	r5, r0
   d8bf4:	b1c8      	cbz	r0, d8c2a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d8bf6:	b11e      	cbz	r6, d8c00 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d8bf8:	4620      	mov	r0, r4
   d8bfa:	f7ff ffe3 	bl	d8bc4 <_ZN10RHDatagram10headerFromEv>
   d8bfe:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d8c00:	f1b9 0f00 	cmp.w	r9, #0
   d8c04:	d004      	beq.n	d8c10 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d8c06:	4620      	mov	r0, r4
   d8c08:	f7ff ffd8 	bl	d8bbc <_ZN10RHDatagram8headerToEv>
   d8c0c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d8c10:	f1b8 0f00 	cmp.w	r8, #0
   d8c14:	d004      	beq.n	d8c20 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d8c16:	4620      	mov	r0, r4
   d8c18:	f7ff ffd8 	bl	d8bcc <_ZN10RHDatagram8headerIdEv>
   d8c1c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d8c20:	b11f      	cbz	r7, d8c2a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d8c22:	4620      	mov	r0, r4
   d8c24:	f7ff ffd6 	bl	d8bd4 <_ZN10RHDatagram11headerFlagsEv>
   d8c28:	7038      	strb	r0, [r7, #0]
}
   d8c2a:	4628      	mov	r0, r5
   d8c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8c30 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d8c30:	2001      	movs	r0, #1
   d8c32:	4770      	bx	lr

000d8c34 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d8c34:	7903      	ldrb	r3, [r0, #4]
   d8c36:	2b03      	cmp	r3, #3
   d8c38:	d0fc      	beq.n	d8c34 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d8c3a:	2001      	movs	r0, #1
   d8c3c:	4770      	bx	lr

000d8c3e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d8c3e:	2000      	movs	r0, #0
   d8c40:	4770      	bx	lr

000d8c42 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d8c42:	7181      	strb	r1, [r0, #6]
}
   d8c44:	4770      	bx	lr

000d8c46 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d8c46:	7141      	strb	r1, [r0, #5]
}
   d8c48:	4770      	bx	lr

000d8c4a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d8c4a:	72c1      	strb	r1, [r0, #11]
}
   d8c4c:	4770      	bx	lr

000d8c4e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d8c4e:	7301      	strb	r1, [r0, #12]
}
   d8c50:	4770      	bx	lr

000d8c52 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d8c52:	7341      	strb	r1, [r0, #13]
}
   d8c54:	4770      	bx	lr

000d8c56 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d8c56:	7b83      	ldrb	r3, [r0, #14]
   d8c58:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d8c5c:	4311      	orrs	r1, r2
   d8c5e:	7381      	strb	r1, [r0, #14]
}
   d8c60:	4770      	bx	lr

000d8c62 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d8c62:	79c0      	ldrb	r0, [r0, #7]
}
   d8c64:	4770      	bx	lr

000d8c66 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d8c66:	7a00      	ldrb	r0, [r0, #8]
}
   d8c68:	4770      	bx	lr

000d8c6a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d8c6a:	7a40      	ldrb	r0, [r0, #9]
}
   d8c6c:	4770      	bx	lr

000d8c6e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d8c6e:	7a80      	ldrb	r0, [r0, #10]
}
   d8c70:	4770      	bx	lr

000d8c72 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d8c72:	8a00      	ldrh	r0, [r0, #16]
}
   d8c74:	b200      	sxth	r0, r0
   d8c76:	4770      	bx	lr

000d8c78 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d8c78:	7900      	ldrb	r0, [r0, #4]
}
   d8c7a:	4770      	bx	lr

000d8c7c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d8c7c:	7101      	strb	r1, [r0, #4]
}
   d8c7e:	4770      	bx	lr

000d8c80 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d8c80:	8a40      	ldrh	r0, [r0, #18]
}
   d8c82:	b280      	uxth	r0, r0
   d8c84:	4770      	bx	lr

000d8c86 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d8c86:	8a80      	ldrh	r0, [r0, #20]
}
   d8c88:	b280      	uxth	r0, r0
   d8c8a:	4770      	bx	lr

000d8c8c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d8c8c:	8ac0      	ldrh	r0, [r0, #22]
}
   d8c8e:	b280      	uxth	r0, r0
   d8c90:	4770      	bx	lr

000d8c92 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d8c92:	b538      	push	{r3, r4, r5, lr}
   d8c94:	4605      	mov	r5, r0
   d8c96:	460c      	mov	r4, r1
    while (!available())
   d8c98:	682b      	ldr	r3, [r5, #0]
   d8c9a:	4628      	mov	r0, r5
   d8c9c:	68db      	ldr	r3, [r3, #12]
   d8c9e:	4798      	blx	r3
   d8ca0:	b928      	cbnz	r0, d8cae <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d8ca2:	2c00      	cmp	r4, #0
   d8ca4:	d0f8      	beq.n	d8c98 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d8ca6:	4620      	mov	r0, r4
   d8ca8:	f002 f976 	bl	daf98 <delay>
   d8cac:	e7f4      	b.n	d8c98 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d8cae:	bd38      	pop	{r3, r4, r5, pc}

000d8cb0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d8cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8cb2:	4605      	mov	r5, r0
   d8cb4:	460f      	mov	r7, r1
   d8cb6:	4614      	mov	r4, r2
   d8cb8:	f001 fd74 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
   d8cbc:	4606      	mov	r6, r0
   d8cbe:	f001 fd71 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d8cc2:	1b80      	subs	r0, r0, r6
   d8cc4:	42b8      	cmp	r0, r7
   d8cc6:	d20a      	bcs.n	d8cde <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d8cc8:	682b      	ldr	r3, [r5, #0]
   d8cca:	4628      	mov	r0, r5
   d8ccc:	68db      	ldr	r3, [r3, #12]
   d8cce:	4798      	blx	r3
   d8cd0:	b930      	cbnz	r0, d8ce0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d8cd2:	2c00      	cmp	r4, #0
   d8cd4:	d0f3      	beq.n	d8cbe <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d8cd6:	4620      	mov	r0, r4
   d8cd8:	f002 f95e 	bl	daf98 <delay>
   d8cdc:	e7ef      	b.n	d8cbe <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d8cde:	2000      	movs	r0, #0
}
   d8ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8ce2 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d8ce2:	b570      	push	{r4, r5, r6, lr}
   d8ce4:	4604      	mov	r4, r0
   d8ce6:	460e      	mov	r6, r1
   d8ce8:	f001 fd5c 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
   d8cec:	4605      	mov	r5, r0
   d8cee:	f001 fd59 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d8cf2:	1b40      	subs	r0, r0, r5
   d8cf4:	42b0      	cmp	r0, r6
   d8cf6:	d204      	bcs.n	d8d02 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d8cf8:	7923      	ldrb	r3, [r4, #4]
   d8cfa:	2b03      	cmp	r3, #3
   d8cfc:	d0f7      	beq.n	d8cee <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d8cfe:	2001      	movs	r0, #1
}
   d8d00:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d8d02:	2000      	movs	r0, #0
   d8d04:	e7fc      	b.n	d8d00 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d8d06 <_ZN15RHGenericDriver7waitCADEv>:
{
   d8d06:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d8d08:	69c3      	ldr	r3, [r0, #28]
{
   d8d0a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d8d0c:	b1b3      	cbz	r3, d8d3c <_ZN15RHGenericDriver7waitCADEv+0x36>
   d8d0e:	f001 fd49 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d8d12:	2664      	movs	r6, #100	; 0x64
   d8d14:	4605      	mov	r5, r0
    while (isChannelActive())
   d8d16:	6823      	ldr	r3, [r4, #0]
   d8d18:	4620      	mov	r0, r4
   d8d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8d1c:	4798      	blx	r3
   d8d1e:	b168      	cbz	r0, d8d3c <_ZN15RHGenericDriver7waitCADEv+0x36>
   d8d20:	f001 fd40 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d8d24:	69e3      	ldr	r3, [r4, #28]
   d8d26:	1b40      	subs	r0, r0, r5
   d8d28:	4298      	cmp	r0, r3
   d8d2a:	d809      	bhi.n	d8d40 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d8d2c:	210a      	movs	r1, #10
   d8d2e:	2001      	movs	r0, #1
   d8d30:	f004 fb1c 	bl	dd36c <_Z6randomii>
   d8d34:	4370      	muls	r0, r6
   d8d36:	f002 f92f 	bl	daf98 <delay>
    while (isChannelActive())
   d8d3a:	e7ec      	b.n	d8d16 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d8d3c:	2001      	movs	r0, #1
}
   d8d3e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d8d40:	2000      	movs	r0, #0
   d8d42:	e7fc      	b.n	d8d3e <_ZN15RHGenericDriver7waitCADEv+0x38>

000d8d44 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d8d44:	4a06      	ldr	r2, [pc, #24]	; (d8d60 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d8d46:	6002      	str	r2, [r0, #0]
   d8d48:	21ff      	movs	r1, #255	; 0xff
   d8d4a:	2200      	movs	r2, #0
   d8d4c:	7102      	strb	r2, [r0, #4]
   d8d4e:	7141      	strb	r1, [r0, #5]
   d8d50:	8242      	strh	r2, [r0, #18]
   d8d52:	72c1      	strb	r1, [r0, #11]
   d8d54:	8282      	strh	r2, [r0, #20]
   d8d56:	8181      	strh	r1, [r0, #12]
   d8d58:	7382      	strb	r2, [r0, #14]
   d8d5a:	82c2      	strh	r2, [r0, #22]
   d8d5c:	61c2      	str	r2, [r0, #28]
}
   d8d5e:	4770      	bx	lr
   d8d60:	000dfed8 	.word	0x000dfed8

000d8d64 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d8d64:	4770      	bx	lr

000d8d66 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d8d66:	4770      	bx	lr

000d8d68 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d8d68:	4770      	bx	lr

000d8d6a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d8d6a:	4770      	bx	lr

000d8d6c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d8d6c:	4770      	bx	lr

000d8d6e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d8d6e:	7141      	strb	r1, [r0, #5]
}
   d8d70:	4770      	bx	lr

000d8d72 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d8d72:	7181      	strb	r1, [r0, #6]
}
   d8d74:	4770      	bx	lr

000d8d76 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d8d76:	7101      	strb	r1, [r0, #4]
}
   d8d78:	4770      	bx	lr
	...

000d8d7c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d8d7c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d8d7e:	4d03      	ldr	r5, [pc, #12]	; (d8d8c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d8d80:	6005      	str	r5, [r0, #0]
   d8d82:	7101      	strb	r1, [r0, #4]
   d8d84:	7142      	strb	r2, [r0, #5]
   d8d86:	7183      	strb	r3, [r0, #6]
}
   d8d88:	bd30      	pop	{r4, r5, pc}
   d8d8a:	bf00      	nop
   d8d8c:	000dff58 	.word	0x000dff58

000d8d90 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d8d90:	4770      	bx	lr

000d8d92 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d8d92:	b510      	push	{r4, lr}
  }
   d8d94:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d8d96:	4604      	mov	r4, r0
  }
   d8d98:	f005 f9e4 	bl	de164 <_ZdlPvj>
   d8d9c:	4620      	mov	r0, r4
   d8d9e:	bd10      	pop	{r4, pc}

000d8da0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d8da0:	b40e      	push	{r1, r2, r3}
   d8da2:	b503      	push	{r0, r1, lr}
   d8da4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d8da6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d8da8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d8dac:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d8dae:	f004 faa1 	bl	dd2f4 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d8db2:	b002      	add	sp, #8
   d8db4:	f85d eb04 	ldr.w	lr, [sp], #4
   d8db8:	b003      	add	sp, #12
   d8dba:	4770      	bx	lr

000d8dbc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d8dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8dbe:	4604      	mov	r4, r0
   d8dc0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d8dc2:	7922      	ldrb	r2, [r4, #4]
   d8dc4:	68a3      	ldr	r3, [r4, #8]
   d8dc6:	b132      	cbz	r2, d8dd6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d8dc8:	b9a3      	cbnz	r3, d8df4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d8dca:	490b      	ldr	r1, [pc, #44]	; (d8df8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d8dcc:	b002      	add	sp, #8
   d8dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d8dd2:	f004 ba5e 	b.w	dd292 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d8dd6:	4a09      	ldr	r2, [pc, #36]	; (d8dfc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d8dd8:	7b26      	ldrb	r6, [r4, #12]
   d8dda:	4d09      	ldr	r5, [pc, #36]	; (d8e00 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d8ddc:	4909      	ldr	r1, [pc, #36]	; (d8e04 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d8dde:	7b64      	ldrb	r4, [r4, #13]
   d8de0:	2e01      	cmp	r6, #1
   d8de2:	bf18      	it	ne
   d8de4:	4629      	movne	r1, r5
   d8de6:	e9cd 1400 	strd	r1, r4, [sp]
   d8dea:	4907      	ldr	r1, [pc, #28]	; (d8e08 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d8dec:	f7ff ffd8 	bl	d8da0 <_ZN5Print6printfEPKcz>
  }
   d8df0:	b002      	add	sp, #8
   d8df2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d8df4:	4a05      	ldr	r2, [pc, #20]	; (d8e0c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d8df6:	e7ef      	b.n	d8dd8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d8df8:	000dff95 	.word	0x000dff95
   d8dfc:	000e03d1 	.word	0x000e03d1
   d8e00:	000dff91 	.word	0x000dff91
   d8e04:	000dff8d 	.word	0x000dff8d
   d8e08:	000dffab 	.word	0x000dffab
   d8e0c:	000dff84 	.word	0x000dff84

000d8e10 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d8e10:	b510      	push	{r4, lr}
   d8e12:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d8e14:	f7ff ffb2 	bl	d8d7c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d8e18:	4b05      	ldr	r3, [pc, #20]	; (d8e30 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d8e1a:	6023      	str	r3, [r4, #0]
  {
   d8e1c:	4b05      	ldr	r3, [pc, #20]	; (d8e34 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d8e1e:	60a3      	str	r3, [r4, #8]
   d8e20:	2301      	movs	r3, #1
   d8e22:	7323      	strb	r3, [r4, #12]
   d8e24:	2300      	movs	r3, #0
   d8e26:	6123      	str	r3, [r4, #16]
   d8e28:	82a3      	strh	r3, [r4, #20]
{
}
   d8e2a:	4620      	mov	r0, r4
   d8e2c:	bd10      	pop	{r4, pc}
   d8e2e:	bf00      	nop
   d8e30:	000dffe4 	.word	0x000dffe4
   d8e34:	000dffd0 	.word	0x000dffd0

000d8e38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d8e38:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d8e3a:	4c0b      	ldr	r4, [pc, #44]	; (d8e68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d8e3c:	7821      	ldrb	r1, [r4, #0]
   d8e3e:	f3bf 8f5b 	dmb	ish
   d8e42:	f011 0101 	ands.w	r1, r1, #1
   d8e46:	d10b      	bne.n	d8e60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d8e48:	4620      	mov	r0, r4
   d8e4a:	9101      	str	r1, [sp, #4]
   d8e4c:	f7fb f934 	bl	d40b8 <__cxa_guard_acquire>
   d8e50:	9901      	ldr	r1, [sp, #4]
   d8e52:	b128      	cbz	r0, d8e60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d8e54:	4805      	ldr	r0, [pc, #20]	; (d8e6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d8e56:	f004 faa1 	bl	dd39c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8e5a:	4620      	mov	r0, r4
   d8e5c:	f7fb f931 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d8e60:	4802      	ldr	r0, [pc, #8]	; (d8e6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d8e62:	b002      	add	sp, #8
   d8e64:	bd10      	pop	{r4, pc}
   d8e66:	bf00      	nop
   d8e68:	2003e268 	.word	0x2003e268
   d8e6c:	2003e26c 	.word	0x2003e26c

000d8e70 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d8e70:	b507      	push	{r0, r1, r2, lr}
   d8e72:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d8e74:	f7ff ffe0 	bl	d8e38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8e78:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d8e7a:	b003      	add	sp, #12
   d8e7c:	f85d eb04 	ldr.w	lr, [sp], #4
   d8e80:	f004 bb3e 	b.w	dd500 <_ZN8SPIClass8transferEh>

000d8e84 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d8e84:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d8e86:	f7ff ffd7 	bl	d8e38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d8e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8e8e:	f004 bb3d 	b.w	dd50c <_ZN8SPIClass15attachInterruptEv>

000d8e92 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d8e92:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d8e94:	f7ff ffd0 	bl	d8e38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d8e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8e9c:	f004 bb37 	b.w	dd50e <_ZN8SPIClass15detachInterruptEv>

000d8ea0 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d8ea0:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d8ea2:	7903      	ldrb	r3, [r0, #4]
   d8ea4:	2b04      	cmp	r3, #4
   d8ea6:	d020      	beq.n	d8eea <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d8ea8:	2b03      	cmp	r3, #3
   d8eaa:	d020      	beq.n	d8eee <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d8eac:	2b02      	cmp	r3, #2
   d8eae:	d020      	beq.n	d8ef2 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d8eb0:	4a11      	ldr	r2, [pc, #68]	; (d8ef8 <_ZN13RHHardwareSPI5beginEv+0x58>)
   d8eb2:	4912      	ldr	r1, [pc, #72]	; (d8efc <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d8eb4:	2b01      	cmp	r3, #1
   d8eb6:	bf18      	it	ne
   d8eb8:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d8eba:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d8ebc:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d8ebe:	3901      	subs	r1, #1
   d8ec0:	bf18      	it	ne
   d8ec2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d8ec4:	b133      	cbz	r3, d8ed4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d8ec6:	2b01      	cmp	r3, #1
   d8ec8:	d004      	beq.n	d8ed4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d8eca:	2b02      	cmp	r3, #2
   d8ecc:	d002      	beq.n	d8ed4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d8ece:	2b03      	cmp	r3, #3
   d8ed0:	bf18      	it	ne
   d8ed2:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d8ed4:	2400      	movs	r4, #0
   d8ed6:	7304      	strb	r4, [r0, #12]
   d8ed8:	6102      	str	r2, [r0, #16]
   d8eda:	7501      	strb	r1, [r0, #20]
   d8edc:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d8ede:	f7ff ffab 	bl	d8e38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d8ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8ee6:	f004 ba63 	b.w	dd3b0 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d8eea:	4a05      	ldr	r2, [pc, #20]	; (d8f00 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d8eec:	e7e5      	b.n	d8eba <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d8eee:	4a05      	ldr	r2, [pc, #20]	; (d8f04 <_ZN13RHHardwareSPI5beginEv+0x64>)
   d8ef0:	e7e3      	b.n	d8eba <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d8ef2:	4a05      	ldr	r2, [pc, #20]	; (d8f08 <_ZN13RHHardwareSPI5beginEv+0x68>)
   d8ef4:	e7e1      	b.n	d8eba <_ZN13RHHardwareSPI5beginEv+0x1a>
   d8ef6:	bf00      	nop
   d8ef8:	001e8480 	.word	0x001e8480
   d8efc:	000f4240 	.word	0x000f4240
   d8f00:	00f42400 	.word	0x00f42400
   d8f04:	007a1200 	.word	0x007a1200
   d8f08:	003d0900 	.word	0x003d0900

000d8f0c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d8f0c:	b508      	push	{r3, lr}
        instance().end();
   d8f0e:	f7ff ff93 	bl	d8e38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d8f12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8f16:	f004 ba5c 	b.w	dd3d2 <_ZN8SPIClass3endEv>

000d8f1a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d8f1a:	b510      	push	{r4, lr}
   d8f1c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d8f1e:	f7ff ff8b 	bl	d8e38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8f22:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d8f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8f2a:	f004 ba7b 	b.w	dd424 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d8f2e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d8f2e:	b508      	push	{r3, lr}
        instance().endTransaction();
   d8f30:	f7ff ff82 	bl	d8e38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d8f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8f38:	f004 ba5a 	b.w	dd3f0 <_ZN8SPIClass14endTransactionEv>

000d8f3c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d8f3c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d8f3e:	f7ff ff7b 	bl	d8e38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d8f42:	bd08      	pop	{r3, pc}

000d8f44 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d8f44:	2300      	movs	r3, #0
   d8f46:	4802      	ldr	r0, [pc, #8]	; (d8f50 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d8f48:	461a      	mov	r2, r3
   d8f4a:	4619      	mov	r1, r3
   d8f4c:	f7ff bf60 	b.w	d8e10 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d8f50:	2003e274 	.word	0x2003e274

000d8f54 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d8f54:	2a01      	cmp	r2, #1
   d8f56:	d105      	bne.n	d8f64 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d8f58:	7a00      	ldrb	r0, [r0, #8]
   d8f5a:	780b      	ldrb	r3, [r1, #0]
   d8f5c:	1a1b      	subs	r3, r3, r0
   d8f5e:	4258      	negs	r0, r3
   d8f60:	4158      	adcs	r0, r3
   d8f62:	4770      	bx	lr
   d8f64:	2000      	movs	r0, #0
}
   d8f66:	4770      	bx	lr

000d8f68 <_ZN6RHMesh5doArpEh>:
{
   d8f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d8f6c:	4d26      	ldr	r5, [pc, #152]	; (d9008 <_ZN6RHMesh5doArpEh+0xa0>)
   d8f6e:	2301      	movs	r3, #1
{
   d8f70:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d8f72:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d8f74:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d8f76:	2300      	movs	r3, #0
{
   d8f78:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d8f7a:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d8f7c:	9300      	str	r3, [sp, #0]
   d8f7e:	2203      	movs	r2, #3
   d8f80:	23ff      	movs	r3, #255	; 0xff
   d8f82:	4629      	mov	r1, r5
{
   d8f84:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d8f86:	f000 fbe7 	bl	d9758 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d8f8a:	b120      	cbz	r0, d8f96 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d8f8c:	2400      	movs	r4, #0
}
   d8f8e:	4620      	mov	r0, r4
   d8f90:	b007      	add	sp, #28
   d8f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d8f96:	23fa      	movs	r3, #250	; 0xfa
   d8f98:	f88d 3017 	strb.w	r3, [sp, #23]
   d8f9c:	f001 fc02 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d8fa0:	f106 0904 	add.w	r9, r6, #4
   d8fa4:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d8fa6:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d8fa8:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d8fac:	f001 fbfa 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
   d8fb0:	1a20      	subs	r0, r4, r0
   d8fb2:	2800      	cmp	r0, #0
   d8fb4:	ddea      	ble.n	d8f8c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d8fb6:	b281      	uxth	r1, r0
   d8fb8:	2200      	movs	r2, #0
   d8fba:	4648      	mov	r0, r9
   d8fbc:	f7ff fdbf 	bl	d8b3e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d8fc0:	2800      	cmp	r0, #0
   d8fc2:	d0f3      	beq.n	d8fac <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d8fc4:	2300      	movs	r3, #0
   d8fc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d8fca:	e9cd 3300 	strd	r3, r3, [sp]
   d8fce:	f10d 0217 	add.w	r2, sp, #23
   d8fd2:	4651      	mov	r1, sl
   d8fd4:	4630      	mov	r0, r6
   d8fd6:	f000 fbc9 	bl	d976c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d8fda:	4604      	mov	r4, r0
   d8fdc:	2800      	cmp	r0, #0
   d8fde:	d0e3      	beq.n	d8fa8 <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d8fe0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d8fe4:	2b01      	cmp	r3, #1
   d8fe6:	d9df      	bls.n	d8fa8 <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d8fe8:	f895 b000 	ldrb.w	fp, [r5]
   d8fec:	f1bb 0f02 	cmp.w	fp, #2
   d8ff0:	d1da      	bne.n	d8fa8 <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d8ff2:	4648      	mov	r0, r9
   d8ff4:	f7ff fde6 	bl	d8bc4 <_ZN10RHDatagram10headerFromEv>
   d8ff8:	465b      	mov	r3, fp
   d8ffa:	4602      	mov	r2, r0
   d8ffc:	4639      	mov	r1, r7
   d8ffe:	4630      	mov	r0, r6
   d9000:	f000 fb21 	bl	d9646 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d9004:	e7c3      	b.n	d8f8e <_ZN6RHMesh5doArpEh+0x26>
   d9006:	bf00      	nop
   d9008:	2003e28c 	.word	0x2003e28c

000d900c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d900c:	2a01      	cmp	r2, #1
{
   d900e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9012:	4607      	mov	r7, r0
   d9014:	460e      	mov	r6, r1
   d9016:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d9018:	d93b      	bls.n	d9092 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d901a:	794d      	ldrb	r5, [r1, #5]
   d901c:	2d02      	cmp	r5, #2
   d901e:	d130      	bne.n	d9082 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d9020:	f100 0804 	add.w	r8, r0, #4
   d9024:	79c9      	ldrb	r1, [r1, #7]
   d9026:	9101      	str	r1, [sp, #4]
   d9028:	4640      	mov	r0, r8
   d902a:	f7ff fdcb 	bl	d8bc4 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d902e:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d9030:	462b      	mov	r3, r5
   d9032:	4602      	mov	r2, r0
   d9034:	9901      	ldr	r1, [sp, #4]
   d9036:	4638      	mov	r0, r7
   d9038:	f000 fb05 	bl	d9646 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d903c:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d903e:	f106 0308 	add.w	r3, r6, #8
   d9042:	2400      	movs	r4, #0
   d9044:	4622      	mov	r2, r4
   d9046:	4295      	cmp	r5, r2
   d9048:	f104 0401 	add.w	r4, r4, #1
   d904c:	b2e4      	uxtb	r4, r4
   d904e:	d904      	bls.n	d905a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d9050:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9054:	7a39      	ldrb	r1, [r7, #8]
   d9056:	4291      	cmp	r1, r2
   d9058:	d1f4      	bne.n	d9044 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d905a:	f104 0108 	add.w	r1, r4, #8
   d905e:	440e      	add	r6, r1
	while (i < numRoutes)
   d9060:	42a5      	cmp	r5, r4
   d9062:	d916      	bls.n	d9092 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d9064:	f816 1b01 	ldrb.w	r1, [r6], #1
   d9068:	9101      	str	r1, [sp, #4]
   d906a:	4640      	mov	r0, r8
   d906c:	f7ff fdaa 	bl	d8bc4 <_ZN10RHDatagram10headerFromEv>
   d9070:	3401      	adds	r4, #1
   d9072:	4602      	mov	r2, r0
   d9074:	9901      	ldr	r1, [sp, #4]
   d9076:	2302      	movs	r3, #2
   d9078:	4638      	mov	r0, r7
   d907a:	b2e4      	uxtb	r4, r4
   d907c:	f000 fae3 	bl	d9646 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d9080:	e7ee      	b.n	d9060 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d9082:	2d03      	cmp	r5, #3
   d9084:	d105      	bne.n	d9092 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d9086:	7989      	ldrb	r1, [r1, #6]
}
   d9088:	b002      	add	sp, #8
   d908a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d908e:	f000 bac3 	b.w	d9618 <_ZN8RHRouter13deleteRouteToEh>
}
   d9092:	b002      	add	sp, #8
   d9094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9098 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d9098:	b510      	push	{r4, lr}
   d909a:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d909c:	f000 fb14 	bl	d96c8 <_ZN8RHRouterC1ER15RHGenericDriverh>
   d90a0:	4b01      	ldr	r3, [pc, #4]	; (d90a8 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d90a2:	6023      	str	r3, [r4, #0]
}
   d90a4:	4620      	mov	r0, r4
   d90a6:	bd10      	pop	{r4, pc}
   d90a8:	000e0018 	.word	0x000e0018

000d90ac <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d90ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d90b0:	2af9      	cmp	r2, #249	; 0xf9
{
   d90b2:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d90b6:	4606      	mov	r6, r0
   d90b8:	460f      	mov	r7, r1
   d90ba:	4614      	mov	r4, r2
   d90bc:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d90be:	d825      	bhi.n	d910c <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d90c0:	2bff      	cmp	r3, #255	; 0xff
   d90c2:	d114      	bne.n	d90ee <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d90c4:	f8df 8048 	ldr.w	r8, [pc, #72]	; d9110 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d90c8:	4640      	mov	r0, r8
   d90ca:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d90cc:	4622      	mov	r2, r4
   d90ce:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d90d0:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d90d4:	f005 fcd2 	bl	dea7c <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d90d8:	1c62      	adds	r2, r4, #1
   d90da:	f8cd 9020 	str.w	r9, [sp, #32]
   d90de:	462b      	mov	r3, r5
   d90e0:	4641      	mov	r1, r8
   d90e2:	4630      	mov	r0, r6
   d90e4:	b2d2      	uxtb	r2, r2
}
   d90e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d90ea:	f000 bb35 	b.w	d9758 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d90ee:	4619      	mov	r1, r3
   d90f0:	f000 fa4e 	bl	d9590 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d90f4:	2800      	cmp	r0, #0
   d90f6:	d1e5      	bne.n	d90c4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d90f8:	6833      	ldr	r3, [r6, #0]
   d90fa:	4629      	mov	r1, r5
   d90fc:	689b      	ldr	r3, [r3, #8]
   d90fe:	4630      	mov	r0, r6
   d9100:	4798      	blx	r3
   d9102:	2800      	cmp	r0, #0
   d9104:	d1de      	bne.n	d90c4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d9106:	2002      	movs	r0, #2
}
   d9108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d910c:	2001      	movs	r0, #1
   d910e:	e7fb      	b.n	d9108 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d9110:	2003e28c 	.word	0x2003e28c

000d9114 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d9114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9118:	b089      	sub	sp, #36	; 0x24
   d911a:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d911c:	23fa      	movs	r3, #250	; 0xfa
   d911e:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d9122:	f10d 031f 	add.w	r3, sp, #31
   d9126:	9303      	str	r3, [sp, #12]
   d9128:	f10d 031e 	add.w	r3, sp, #30
   d912c:	f8df a180 	ldr.w	sl, [pc, #384]	; d92b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d9130:	9302      	str	r3, [sp, #8]
   d9132:	f10d 031d 	add.w	r3, sp, #29
   d9136:	9301      	str	r3, [sp, #4]
   d9138:	ab07      	add	r3, sp, #28
   d913a:	9300      	str	r3, [sp, #0]
{     
   d913c:	4689      	mov	r9, r1
   d913e:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d9140:	f10d 031b 	add.w	r3, sp, #27
   d9144:	f10d 021a 	add.w	r2, sp, #26
   d9148:	4651      	mov	r1, sl
{     
   d914a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d914e:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d9150:	f000 fb0c 	bl	d976c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d9154:	4656      	mov	r6, sl
   d9156:	4604      	mov	r4, r0
   d9158:	b920      	cbnz	r0, d9164 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d915a:	2400      	movs	r4, #0
}
   d915c:	4620      	mov	r0, r4
   d915e:	b009      	add	sp, #36	; 0x24
   d9160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d9164:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d9168:	b373      	cbz	r3, d91c8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d916a:	f89a 2000 	ldrb.w	r2, [sl]
   d916e:	bb5a      	cbnz	r2, d91c8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d9170:	f1b8 0f00 	cmp.w	r8, #0
   d9174:	d003      	beq.n	d917e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d9176:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d917a:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d917e:	f1bb 0f00 	cmp.w	fp, #0
   d9182:	d003      	beq.n	d918c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d9184:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d9188:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d918c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d918e:	b11a      	cbz	r2, d9198 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d9190:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d9192:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d9196:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d9198:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d919a:	b11a      	cbz	r2, d91a4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d919c:	9914      	ldr	r1, [sp, #80]	; 0x50
   d919e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d91a2:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d91a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d91a6:	b11a      	cbz	r2, d91b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d91a8:	9915      	ldr	r1, [sp, #84]	; 0x54
   d91aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d91ae:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d91b0:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d91b2:	493d      	ldr	r1, [pc, #244]	; (d92a8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d91b4:	3b01      	subs	r3, #1
   d91b6:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d91b8:	429a      	cmp	r2, r3
		*len = msgLen;
   d91ba:	bf88      	it	hi
   d91bc:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d91be:	783a      	ldrb	r2, [r7, #0]
   d91c0:	4648      	mov	r0, r9
   d91c2:	f005 fc5b 	bl	dea7c <memcpy>
	    return true;
   d91c6:	e7c9      	b.n	d915c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d91c8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d91cc:	2aff      	cmp	r2, #255	; 0xff
   d91ce:	d1c4      	bne.n	d915a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d91d0:	2b01      	cmp	r3, #1
   d91d2:	d9c2      	bls.n	d915a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d91d4:	7832      	ldrb	r2, [r6, #0]
   d91d6:	2a01      	cmp	r2, #1
   d91d8:	d1bf      	bne.n	d915a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d91da:	7a2a      	ldrb	r2, [r5, #8]
   d91dc:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d91e0:	42a2      	cmp	r2, r4
   d91e2:	d0ba      	beq.n	d915a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d91e4:	1edf      	subs	r7, r3, #3
   d91e6:	4931      	ldr	r1, [pc, #196]	; (d92ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d91e8:	b2ff      	uxtb	r7, r7
   d91ea:	2300      	movs	r3, #0
   d91ec:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d91f0:	4547      	cmp	r7, r8
   d91f2:	d906      	bls.n	d9202 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d91f4:	f811 0b01 	ldrb.w	r0, [r1], #1
   d91f8:	4282      	cmp	r2, r0
   d91fa:	f103 0301 	add.w	r3, r3, #1
   d91fe:	d1f5      	bne.n	d91ec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d9200:	e7ab      	b.n	d915a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d9202:	f105 0904 	add.w	r9, r5, #4
   d9206:	4648      	mov	r0, r9
   d9208:	f7ff fcdc 	bl	d8bc4 <_ZN10RHDatagram10headerFromEv>
   d920c:	2302      	movs	r3, #2
   d920e:	4602      	mov	r2, r0
   d9210:	4621      	mov	r1, r4
   d9212:	4628      	mov	r0, r5
   d9214:	f000 fa17 	bl	d9646 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d9218:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d921c:	b193      	cbz	r3, d9244 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d921e:	4c24      	ldr	r4, [pc, #144]	; (d92b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d9220:	1ba3      	subs	r3, r4, r6
   d9222:	b2db      	uxtb	r3, r3
   d9224:	429f      	cmp	r7, r3
   d9226:	d90c      	bls.n	d9242 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d9228:	78e1      	ldrb	r1, [r4, #3]
   d922a:	9105      	str	r1, [sp, #20]
   d922c:	4648      	mov	r0, r9
   d922e:	f7ff fcc9 	bl	d8bc4 <_ZN10RHDatagram10headerFromEv>
   d9232:	9905      	ldr	r1, [sp, #20]
   d9234:	4602      	mov	r2, r0
   d9236:	2302      	movs	r3, #2
   d9238:	4628      	mov	r0, r5
   d923a:	f000 fa04 	bl	d9646 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d923e:	3401      	adds	r4, #1
   d9240:	e7ee      	b.n	d9220 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d9242:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d9244:	682b      	ldr	r3, [r5, #0]
   d9246:	7872      	ldrb	r2, [r6, #1]
   d9248:	68db      	ldr	r3, [r3, #12]
   d924a:	491a      	ldr	r1, [pc, #104]	; (d92b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d924c:	4628      	mov	r0, r5
   d924e:	4798      	blx	r3
   d9250:	4604      	mov	r4, r0
   d9252:	b160      	cbz	r0, d926e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d9254:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d9256:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d9258:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d925a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d925e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d9262:	4913      	ldr	r1, [pc, #76]	; (d92b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d9264:	9400      	str	r4, [sp, #0]
   d9266:	4628      	mov	r0, r5
   d9268:	f000 fa76 	bl	d9758 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d926c:	e776      	b.n	d915c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d926e:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d9272:	4543      	cmp	r3, r8
   d9274:	f67f af71 	bls.w	d915a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d9278:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d927c:	2b00      	cmp	r3, #0
   d927e:	f43f af6c 	beq.w	d915a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d9282:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d9286:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9288:	4909      	ldr	r1, [pc, #36]	; (d92b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d928a:	443e      	add	r6, r7
		tmpMessageLen++;
   d928c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d928e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9290:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d9294:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d9296:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9298:	9300      	str	r3, [sp, #0]
   d929a:	4628      	mov	r0, r5
   d929c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d929e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d92a2:	f000 fa23 	bl	d96ec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d92a6:	e759      	b.n	d915c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d92a8:	2003e28d 	.word	0x2003e28d
   d92ac:	2003e28f 	.word	0x2003e28f
   d92b0:	2003e28c 	.word	0x2003e28c
   d92b4:	2003e28e 	.word	0x2003e28e

000d92b8 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d92b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d92bc:	b085      	sub	sp, #20
   d92be:	4680      	mov	r8, r0
   d92c0:	461c      	mov	r4, r3
   d92c2:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d92c6:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d92c8:	4689      	mov	r9, r1
   d92ca:	4692      	mov	sl, r2
   d92cc:	f001 fa6a 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d92d0:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d92d4:	4404      	add	r4, r0
   d92d6:	f001 fa65 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
   d92da:	1a20      	subs	r0, r4, r0
   d92dc:	2800      	cmp	r0, #0
   d92de:	dd16      	ble.n	d930e <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d92e0:	b281      	uxth	r1, r0
   d92e2:	2200      	movs	r2, #0
   d92e4:	4658      	mov	r0, fp
   d92e6:	f7ff fc2a 	bl	d8b3e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d92ea:	2800      	cmp	r0, #0
   d92ec:	d0f3      	beq.n	d92d6 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d92ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d92f0:	9300      	str	r3, [sp, #0]
   d92f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d92f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d92f8:	9501      	str	r5, [sp, #4]
   d92fa:	4652      	mov	r2, sl
   d92fc:	4649      	mov	r1, r9
   d92fe:	4640      	mov	r0, r8
   d9300:	f7ff ff08 	bl	d9114 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d9304:	2800      	cmp	r0, #0
   d9306:	d0e6      	beq.n	d92d6 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d9308:	b005      	add	sp, #20
   d930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d930e:	2000      	movs	r0, #0
   d9310:	e7fa      	b.n	d9308 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d9314 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d9314:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9316:	b085      	sub	sp, #20
   d9318:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d931a:	3004      	adds	r0, #4
{
   d931c:	460e      	mov	r6, r1
   d931e:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d9320:	f7ff fc50 	bl	d8bc4 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d9324:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d9326:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d9328:	4631      	mov	r1, r6
   d932a:	4628      	mov	r0, r5
   d932c:	f000 f947 	bl	d95be <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d9330:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d9332:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d9334:	d001      	beq.n	d933a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d9336:	2805      	cmp	r0, #5
   d9338:	d11b      	bne.n	d9372 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d933a:	7831      	ldrb	r1, [r6, #0]
   d933c:	4628      	mov	r0, r5
   d933e:	f000 f96b 	bl	d9618 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d9342:	7872      	ldrb	r2, [r6, #1]
   d9344:	7a2b      	ldrb	r3, [r5, #8]
   d9346:	429a      	cmp	r2, r3
   d9348:	d013      	beq.n	d9372 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d934a:	4c0b      	ldr	r4, [pc, #44]	; (d9378 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d934c:	2303      	movs	r3, #3
   d934e:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d9350:	7833      	ldrb	r3, [r6, #0]
   d9352:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d9354:	7871      	ldrb	r1, [r6, #1]
   d9356:	2302      	movs	r3, #2
   d9358:	463a      	mov	r2, r7
   d935a:	4628      	mov	r0, r5
   d935c:	f000 f973 	bl	d9646 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d9360:	2300      	movs	r3, #0
   d9362:	9300      	str	r3, [sp, #0]
   d9364:	4621      	mov	r1, r4
   d9366:	7873      	ldrb	r3, [r6, #1]
   d9368:	2202      	movs	r2, #2
   d936a:	4628      	mov	r0, r5
   d936c:	f000 f9f4 	bl	d9758 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d9370:	4604      	mov	r4, r0
}
   d9372:	4620      	mov	r0, r4
   d9374:	b005      	add	sp, #20
   d9376:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9378:	2003e28c 	.word	0x2003e28c

000d937c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d937c:	b510      	push	{r4, lr}
   d937e:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d9380:	f7ff fbd2 	bl	d8b28 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d9384:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d9386:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d9388:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d938a:	2303      	movs	r3, #3
    _retransmissions = 0;
   d938c:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d938e:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d9390:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d9392:	f44f 7280 	mov.w	r2, #256	; 0x100
   d9396:	f104 0011 	add.w	r0, r4, #17
   d939a:	f005 fb97 	bl	deacc <memset>
}
   d939e:	4620      	mov	r0, r4
   d93a0:	bd10      	pop	{r4, pc}

000d93a2 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d93a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d93a4:	4604      	mov	r4, r0
   d93a6:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d93a8:	f7ff fc00 	bl	d8bac <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d93ac:	4620      	mov	r0, r4
   d93ae:	2200      	movs	r2, #0
   d93b0:	2180      	movs	r1, #128	; 0x80
   d93b2:	f7ff fbff 	bl	d8bb4 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d93b6:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d93b8:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d93ba:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d93be:	f10d 010f 	add.w	r1, sp, #15
   d93c2:	2201      	movs	r2, #1
   d93c4:	4620      	mov	r0, r4
   d93c6:	f7ff fbc2 	bl	d8b4e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d93ca:	4620      	mov	r0, r4
   d93cc:	f7ff fbb3 	bl	d8b36 <_ZN10RHDatagram14waitPacketSentEv>
}
   d93d0:	b004      	add	sp, #16
   d93d2:	bd10      	pop	{r4, pc}

000d93d4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d93d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d93d8:	7b05      	ldrb	r5, [r0, #12]
   d93da:	3501      	adds	r5, #1
   d93dc:	b2ed      	uxtb	r5, r5
{
   d93de:	b087      	sub	sp, #28
   d93e0:	4604      	mov	r4, r0
   d93e2:	4689      	mov	r9, r1
   d93e4:	4692      	mov	sl, r2
   d93e6:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d93e8:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d93ea:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d93ec:	7c22      	ldrb	r2, [r4, #16]
   d93ee:	463b      	mov	r3, r7
   d93f0:	429a      	cmp	r2, r3
   d93f2:	f107 0701 	add.w	r7, r7, #1
   d93f6:	b2ff      	uxtb	r7, r7
   d93f8:	d36b      	bcc.n	d94d2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d93fa:	4629      	mov	r1, r5
   d93fc:	4620      	mov	r0, r4
   d93fe:	f7ff fbd5 	bl	d8bac <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d9402:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d9404:	bf0d      	iteet	eq
   d9406:	22c0      	moveq	r2, #192	; 0xc0
   d9408:	2280      	movne	r2, #128	; 0x80
   d940a:	2140      	movne	r1, #64	; 0x40
   d940c:	2100      	moveq	r1, #0
   d940e:	4620      	mov	r0, r4
   d9410:	f7ff fbd0 	bl	d8bb4 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d9414:	4643      	mov	r3, r8
   d9416:	4652      	mov	r2, sl
   d9418:	4649      	mov	r1, r9
   d941a:	4620      	mov	r0, r4
   d941c:	f7ff fb97 	bl	d8b4e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d9420:	4620      	mov	r0, r4
   d9422:	f7ff fb88 	bl	d8b36 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d9426:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d942a:	d054      	beq.n	d94d6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d942c:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d942e:	bf82      	ittt	hi
   d9430:	68a3      	ldrhi	r3, [r4, #8]
   d9432:	3301      	addhi	r3, #1
   d9434:	60a3      	strhi	r3, [r4, #8]
   d9436:	f001 f9b5 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d943a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d943e:	4683      	mov	fp, r0
   d9440:	2000      	movs	r0, #0
   d9442:	89e6      	ldrh	r6, [r4, #14]
   d9444:	f003 ff92 	bl	dd36c <_Z6randomii>
   d9448:	4370      	muls	r0, r6
   d944a:	bf48      	it	mi
   d944c:	30ff      	addmi	r0, #255	; 0xff
   d944e:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d9452:	fa1b f686 	uxtah	r6, fp, r6
   d9456:	f001 f9a5 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
   d945a:	1a30      	subs	r0, r6, r0
   d945c:	2800      	cmp	r0, #0
   d945e:	ddc5      	ble.n	d93ec <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d9460:	b281      	uxth	r1, r0
   d9462:	2200      	movs	r2, #0
   d9464:	4620      	mov	r0, r4
   d9466:	f7ff fb6a 	bl	d8b3e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d946a:	2800      	cmp	r0, #0
   d946c:	d0f3      	beq.n	d9456 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d946e:	f10d 0317 	add.w	r3, sp, #23
   d9472:	9302      	str	r3, [sp, #8]
   d9474:	f10d 0316 	add.w	r3, sp, #22
   d9478:	9301      	str	r3, [sp, #4]
   d947a:	2200      	movs	r2, #0
   d947c:	f10d 0315 	add.w	r3, sp, #21
   d9480:	9300      	str	r3, [sp, #0]
   d9482:	4611      	mov	r1, r2
   d9484:	ab05      	add	r3, sp, #20
   d9486:	4620      	mov	r0, r4
   d9488:	f7ff fba8 	bl	d8bdc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d948c:	2800      	cmp	r0, #0
   d948e:	d0e2      	beq.n	d9456 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d9490:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d9494:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d9498:	4542      	cmp	r2, r8
   d949a:	d10e      	bne.n	d94ba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d949c:	f894 c004 	ldrb.w	ip, [r4, #4]
   d94a0:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d94a4:	458c      	cmp	ip, r1
   d94a6:	d108      	bne.n	d94ba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d94a8:	2b00      	cmp	r3, #0
   d94aa:	da08      	bge.n	d94be <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d94ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d94b0:	42ab      	cmp	r3, r5
   d94b2:	d1d0      	bne.n	d9456 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d94b4:	b007      	add	sp, #28
   d94b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d94ba:	2b00      	cmp	r3, #0
   d94bc:	dbcb      	blt.n	d9456 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d94be:	18a1      	adds	r1, r4, r2
   d94c0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d94c4:	7c49      	ldrb	r1, [r1, #17]
   d94c6:	4299      	cmp	r1, r3
   d94c8:	d1c5      	bne.n	d9456 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d94ca:	4620      	mov	r0, r4
   d94cc:	f7ff ff69 	bl	d93a2 <_ZN18RHReliableDatagram11acknowledgeEhh>
   d94d0:	e7c1      	b.n	d9456 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d94d2:	2000      	movs	r0, #0
   d94d4:	e7ee      	b.n	d94b4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d94d6:	2001      	movs	r0, #1
   d94d8:	e7ec      	b.n	d94b4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d94da <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d94da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d94de:	b089      	sub	sp, #36	; 0x24
   d94e0:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d94e4:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d94e8:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d94ea:	4604      	mov	r4, r0
   d94ec:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d94ee:	f7ff fb1e 	bl	d8b2e <_ZN10RHDatagram9availableEv>
   d94f2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d94f6:	b920      	cbnz	r0, d9502 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d94f8:	2500      	movs	r5, #0
}
   d94fa:	4628      	mov	r0, r5
   d94fc:	b009      	add	sp, #36	; 0x24
   d94fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d9502:	f10d 031f 	add.w	r3, sp, #31
   d9506:	9302      	str	r3, [sp, #8]
   d9508:	f10d 031e 	add.w	r3, sp, #30
   d950c:	9301      	str	r3, [sp, #4]
   d950e:	f10d 031d 	add.w	r3, sp, #29
   d9512:	9300      	str	r3, [sp, #0]
   d9514:	4620      	mov	r0, r4
   d9516:	ab07      	add	r3, sp, #28
   d9518:	f7ff fb60 	bl	d8bdc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d951c:	4605      	mov	r5, r0
   d951e:	2800      	cmp	r0, #0
   d9520:	d0ea      	beq.n	d94f8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d9522:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d9526:	2b00      	cmp	r3, #0
   d9528:	dbe6      	blt.n	d94f8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d952a:	7922      	ldrb	r2, [r4, #4]
   d952c:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d9530:	429a      	cmp	r2, r3
   d9532:	d106      	bne.n	d9542 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d9534:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d9538:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d953c:	4620      	mov	r0, r4
   d953e:	f7ff ff30 	bl	d93a2 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d9542:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d9546:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d954a:	4414      	add	r4, r2
   d954c:	7c61      	ldrb	r1, [r4, #17]
   d954e:	4299      	cmp	r1, r3
   d9550:	d0d2      	beq.n	d94f8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d9552:	b106      	cbz	r6, d9556 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d9554:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d9556:	f1b9 0f00 	cmp.w	r9, #0
   d955a:	d003      	beq.n	d9564 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d955c:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d9560:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d9564:	f1b8 0f00 	cmp.w	r8, #0
   d9568:	d001      	beq.n	d956e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d956a:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d956e:	b117      	cbz	r7, d9576 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d9570:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d9574:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d9576:	7463      	strb	r3, [r4, #17]
		return true;
   d9578:	e7bf      	b.n	d94fa <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d957a <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d957a:	4770      	bx	lr

000d957c <_ZN8RHRouter4initEv>:
{
   d957c:	b510      	push	{r4, lr}
   d957e:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d9580:	3004      	adds	r0, #4
   d9582:	f7ff fb05 	bl	d8b90 <_ZN10RHDatagram4initEv>
    if (ret)
   d9586:	b110      	cbz	r0, d958e <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d9588:	231e      	movs	r3, #30
   d958a:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d958e:	bd10      	pop	{r4, pc}

000d9590 <_ZN8RHRouter10getRouteToEh>:
{
   d9590:	b510      	push	{r4, lr}
   d9592:	4602      	mov	r2, r0
   d9594:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d9596:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d959a:	428c      	cmp	r4, r1
   d959c:	d108      	bne.n	d95b0 <_ZN8RHRouter10getRouteToEh+0x20>
   d959e:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d95a2:	b12c      	cbz	r4, d95b0 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d95a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d95a8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d95ac:	4418      	add	r0, r3
}
   d95ae:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d95b0:	3301      	adds	r3, #1
   d95b2:	2b0a      	cmp	r3, #10
   d95b4:	f102 0203 	add.w	r2, r2, #3
   d95b8:	d1ed      	bne.n	d9596 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d95ba:	2000      	movs	r0, #0
   d95bc:	e7f7      	b.n	d95ae <_ZN8RHRouter10getRouteToEh+0x1e>

000d95be <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d95be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d95c0:	780b      	ldrb	r3, [r1, #0]
   d95c2:	2bff      	cmp	r3, #255	; 0xff
{
   d95c4:	4605      	mov	r5, r0
   d95c6:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d95c8:	d006      	beq.n	d95d8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d95ca:	4619      	mov	r1, r3
   d95cc:	9201      	str	r2, [sp, #4]
   d95ce:	f7ff ffdf 	bl	d9590 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d95d2:	b158      	cbz	r0, d95ec <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d95d4:	7843      	ldrb	r3, [r0, #1]
   d95d6:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d95d8:	4621      	mov	r1, r4
   d95da:	1d28      	adds	r0, r5, #4
   d95dc:	f7ff fefa 	bl	d93d4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d95e0:	2800      	cmp	r0, #0
   d95e2:	bf14      	ite	ne
   d95e4:	2000      	movne	r0, #0
   d95e6:	2005      	moveq	r0, #5
}
   d95e8:	b003      	add	sp, #12
   d95ea:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d95ec:	2002      	movs	r0, #2
   d95ee:	e7fb      	b.n	d95e8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d95f0 <_ZN8RHRouter11deleteRouteEh>:
{
   d95f0:	b510      	push	{r4, lr}
   d95f2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d95f6:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d95f8:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d95fc:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d9600:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d9604:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9608:	4421      	add	r1, r4
   d960a:	4420      	add	r0, r4
   d960c:	f005 fa36 	bl	dea7c <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d9610:	2300      	movs	r3, #0
   d9612:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d9616:	bd10      	pop	{r4, pc}

000d9618 <_ZN8RHRouter13deleteRouteToEh>:
{
   d9618:	b538      	push	{r3, r4, r5, lr}
   d961a:	460a      	mov	r2, r1
   d961c:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d961e:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d9622:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d9626:	b2d9      	uxtb	r1, r3
   d9628:	5d65      	ldrb	r5, [r4, r5]
   d962a:	4295      	cmp	r5, r2
   d962c:	d103      	bne.n	d9636 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d962e:	f7ff ffdf 	bl	d95f0 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d9632:	2001      	movs	r0, #1
}
   d9634:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9636:	3301      	adds	r3, #1
   d9638:	2b0a      	cmp	r3, #10
   d963a:	d1f2      	bne.n	d9622 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d963c:	2000      	movs	r0, #0
   d963e:	e7f9      	b.n	d9634 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d9640 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d9640:	2100      	movs	r1, #0
   d9642:	f7ff bfd5 	b.w	d95f0 <_ZN8RHRouter11deleteRouteEh>

000d9646 <_ZN8RHRouter10addRouteToEhhh>:
{
   d9646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9648:	4616      	mov	r6, r2
   d964a:	461f      	mov	r7, r3
   d964c:	4604      	mov	r4, r0
   d964e:	460d      	mov	r5, r1
   d9650:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d9652:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d9656:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d965a:	5c11      	ldrb	r1, [r2, r0]
   d965c:	42a9      	cmp	r1, r5
   d965e:	d105      	bne.n	d966c <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d9660:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d9662:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d9666:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d966a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d966c:	3301      	adds	r3, #1
   d966e:	2b0a      	cmp	r3, #10
   d9670:	d1f1      	bne.n	d9656 <_ZN8RHRouter10addRouteToEhhh+0x10>
   d9672:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d9674:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d9678:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d967c:	5c11      	ldrb	r1, [r2, r0]
   d967e:	b919      	cbnz	r1, d9688 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d9680:	4420      	add	r0, r4
   d9682:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d9686:	e7ec      	b.n	d9662 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9688:	3301      	adds	r3, #1
   d968a:	2b0a      	cmp	r3, #10
   d968c:	d1f4      	bne.n	d9678 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d968e:	4620      	mov	r0, r4
   d9690:	f7ff ffd6 	bl	d9640 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9694:	4620      	mov	r0, r4
   d9696:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d969a:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d969e:	b92a      	cbnz	r2, d96ac <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d96a0:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d96a4:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d96a8:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d96ac:	3003      	adds	r0, #3
   d96ae:	4298      	cmp	r0, r3
   d96b0:	d1f3      	bne.n	d969a <_ZN8RHRouter10addRouteToEhhh+0x54>
   d96b2:	e7da      	b.n	d966a <_ZN8RHRouter10addRouteToEhhh+0x24>

000d96b4 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d96b4:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d96b8:	2200      	movs	r2, #0
   d96ba:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d96be:	3003      	adds	r0, #3
   d96c0:	4298      	cmp	r0, r3
   d96c2:	d1fa      	bne.n	d96ba <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d96c4:	4770      	bx	lr
	...

000d96c8 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d96c8:	b510      	push	{r4, lr}
   d96ca:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d96cc:	3004      	adds	r0, #4
   d96ce:	f7ff fe55 	bl	d937c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d96d2:	4b05      	ldr	r3, [pc, #20]	; (d96e8 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d96d4:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d96d6:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d96da:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d96dc:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d96e0:	f7ff ffe8 	bl	d96b4 <_ZN8RHRouter17clearRoutingTableEv>
}
   d96e4:	4620      	mov	r0, r4
   d96e6:	bd10      	pop	{r4, pc}
   d96e8:	000e0030 	.word	0x000e0030

000d96ec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d96ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d96f0:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d96f2:	6840      	ldr	r0, [r0, #4]
{
   d96f4:	9101      	str	r1, [sp, #4]
   d96f6:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d96f8:	6803      	ldr	r3, [r0, #0]
{
   d96fa:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d96fe:	699b      	ldr	r3, [r3, #24]
{
   d9700:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d9704:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d9706:	4798      	blx	r3
   d9708:	f106 0805 	add.w	r8, r6, #5
   d970c:	4580      	cmp	r8, r0
   d970e:	d81c      	bhi.n	d974a <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d9710:	4d10      	ldr	r5, [pc, #64]	; (d9754 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d9712:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d9714:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d9718:	2300      	movs	r3, #0
   d971a:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d971c:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d9720:	70eb      	strb	r3, [r5, #3]
   d9722:	1c5a      	adds	r2, r3, #1
   d9724:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d9728:	1d68      	adds	r0, r5, #5
   d972a:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d972c:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d972e:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d9732:	f005 f9a3 	bl	dea7c <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d9736:	6823      	ldr	r3, [r4, #0]
   d9738:	685b      	ldr	r3, [r3, #4]
   d973a:	fa5f f288 	uxtb.w	r2, r8
   d973e:	4629      	mov	r1, r5
   d9740:	4620      	mov	r0, r4
}
   d9742:	b002      	add	sp, #8
   d9744:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d9748:	4718      	bx	r3
}
   d974a:	2001      	movs	r0, #1
   d974c:	b002      	add	sp, #8
   d974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9752:	bf00      	nop
   d9754:	2003e386 	.word	0x2003e386

000d9758 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d9758:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d975a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d975e:	9401      	str	r4, [sp, #4]
   d9760:	7a04      	ldrb	r4, [r0, #8]
   d9762:	9400      	str	r4, [sp, #0]
   d9764:	f7ff ffc2 	bl	d96ec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d9768:	b002      	add	sp, #8
   d976a:	bd10      	pop	{r4, pc}

000d976c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9770:	b087      	sub	sp, #28
   d9772:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d9774:	23ff      	movs	r3, #255	; 0xff
   d9776:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d977a:	f10d 0317 	add.w	r3, sp, #23
   d977e:	9302      	str	r3, [sp, #8]
   d9780:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d9854 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d9784:	f10d 0316 	add.w	r3, sp, #22
   d9788:	9301      	str	r3, [sp, #4]
   d978a:	f10d 0315 	add.w	r3, sp, #21
   d978e:	9300      	str	r3, [sp, #0]
{  
   d9790:	4604      	mov	r4, r0
   d9792:	4688      	mov	r8, r1
   d9794:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d9796:	ab05      	add	r3, sp, #20
   d9798:	f10d 0213 	add.w	r2, sp, #19
   d979c:	4649      	mov	r1, r9
   d979e:	3004      	adds	r0, #4
{  
   d97a0:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d97a4:	f7ff fe99 	bl	d94da <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d97a8:	4605      	mov	r5, r0
   d97aa:	b908      	cbnz	r0, d97b0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d97ac:	2500      	movs	r5, #0
   d97ae:	e038      	b.n	d9822 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d97b0:	6823      	ldr	r3, [r4, #0]
   d97b2:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d97b6:	681b      	ldr	r3, [r3, #0]
   d97b8:	4649      	mov	r1, r9
   d97ba:	4620      	mov	r0, r4
   d97bc:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d97be:	f899 3000 	ldrb.w	r3, [r9]
   d97c2:	7a22      	ldrb	r2, [r4, #8]
   d97c4:	429a      	cmp	r2, r3
   d97c6:	d001      	beq.n	d97cc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d97c8:	2bff      	cmp	r3, #255	; 0xff
   d97ca:	d12e      	bne.n	d982a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d97cc:	b117      	cbz	r7, d97d4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d97ce:	4b21      	ldr	r3, [pc, #132]	; (d9854 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d97d0:	785b      	ldrb	r3, [r3, #1]
   d97d2:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d97d4:	f1bb 0f00 	cmp.w	fp, #0
   d97d8:	d003      	beq.n	d97e2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d97da:	4b1e      	ldr	r3, [pc, #120]	; (d9854 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d97dc:	781b      	ldrb	r3, [r3, #0]
   d97de:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d97e2:	f1ba 0f00 	cmp.w	sl, #0
   d97e6:	d003      	beq.n	d97f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d97e8:	4b1a      	ldr	r3, [pc, #104]	; (d9854 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d97ea:	78db      	ldrb	r3, [r3, #3]
   d97ec:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d97f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d97f2:	b11b      	cbz	r3, d97fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d97f4:	4b17      	ldr	r3, [pc, #92]	; (d9854 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d97f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d97f8:	791b      	ldrb	r3, [r3, #4]
   d97fa:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d97fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d97fe:	b11b      	cbz	r3, d9808 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d9800:	4b14      	ldr	r3, [pc, #80]	; (d9854 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d9802:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d9804:	789b      	ldrb	r3, [r3, #2]
   d9806:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d9808:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d980c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d980e:	4912      	ldr	r1, [pc, #72]	; (d9858 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d9810:	3b05      	subs	r3, #5
   d9812:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d9814:	429a      	cmp	r2, r3
		*len = msgLen;
   d9816:	bf88      	it	hi
   d9818:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d981a:	7832      	ldrb	r2, [r6, #0]
   d981c:	4640      	mov	r0, r8
   d981e:	f005 f92d 	bl	dea7c <memcpy>
}
   d9822:	4628      	mov	r0, r5
   d9824:	b007      	add	sp, #28
   d9826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d982a:	f899 3002 	ldrb.w	r3, [r9, #2]
   d982e:	1c5a      	adds	r2, r3, #1
   d9830:	f889 2002 	strb.w	r2, [r9, #2]
   d9834:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d9838:	429a      	cmp	r2, r3
   d983a:	d9b7      	bls.n	d97ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d983c:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d9840:	2b00      	cmp	r3, #0
   d9842:	d0b3      	beq.n	d97ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d9844:	6823      	ldr	r3, [r4, #0]
   d9846:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d984a:	685b      	ldr	r3, [r3, #4]
   d984c:	4649      	mov	r1, r9
   d984e:	4620      	mov	r0, r4
   d9850:	4798      	blx	r3
   d9852:	e7ab      	b.n	d97ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d9854:	2003e386 	.word	0x2003e386
   d9858:	2003e38b 	.word	0x2003e38b

000d985c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d985c:	b510      	push	{r4, lr}
   d985e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d9860:	6a00      	ldr	r0, [r0, #32]
   d9862:	6803      	ldr	r3, [r0, #0]
   d9864:	68db      	ldr	r3, [r3, #12]
   d9866:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d9868:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d986c:	28ff      	cmp	r0, #255	; 0xff
   d986e:	d002      	beq.n	d9876 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d9870:	2101      	movs	r1, #1
   d9872:	f004 fba9 	bl	ddfc8 <pinMode>

    deselectSlave();
   d9876:	6823      	ldr	r3, [r4, #0]
   d9878:	4620      	mov	r0, r4
   d987a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d987c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d987e:	2064      	movs	r0, #100	; 0x64
   d9880:	f001 fb8a 	bl	daf98 <delay>
#endif
    
    return true;
}
   d9884:	2001      	movs	r0, #1
   d9886:	bd10      	pop	{r4, pc}

000d9888 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d9888:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d988c:	2100      	movs	r1, #0
   d988e:	f004 bbac 	b.w	ddfea <digitalWrite>

000d9892 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d9892:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d9896:	2101      	movs	r1, #1
   d9898:	f004 bba7 	b.w	ddfea <digitalWrite>

000d989c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d989c:	b570      	push	{r4, r5, r6, lr}
   d989e:	4604      	mov	r4, r0
   d98a0:	460d      	mov	r5, r1
   d98a2:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d98a4:	f7ff fa4e 	bl	d8d44 <_ZN15RHGenericDriverC1Ev>
   d98a8:	4b03      	ldr	r3, [pc, #12]	; (d98b8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d98aa:	6023      	str	r3, [r4, #0]
   d98ac:	6226      	str	r6, [r4, #32]
   d98ae:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d98b2:	4620      	mov	r0, r4
   d98b4:	bd70      	pop	{r4, r5, r6, pc}
   d98b6:	bf00      	nop
   d98b8:	000e0040 	.word	0x000e0040

000d98bc <_ZN11RHSPIDriver7spiReadEh>:
{
   d98bc:	b538      	push	{r3, r4, r5, lr}
   d98be:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d98c0:	6a00      	ldr	r0, [r0, #32]
   d98c2:	6803      	ldr	r3, [r0, #0]
   d98c4:	6a1b      	ldr	r3, [r3, #32]
{
   d98c6:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d98c8:	4798      	blx	r3
    selectSlave();
   d98ca:	6823      	ldr	r3, [r4, #0]
   d98cc:	4620      	mov	r0, r4
   d98ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d98d0:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d98d2:	6a20      	ldr	r0, [r4, #32]
   d98d4:	6803      	ldr	r3, [r0, #0]
   d98d6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d98da:	681b      	ldr	r3, [r3, #0]
   d98dc:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d98de:	6a20      	ldr	r0, [r4, #32]
   d98e0:	6803      	ldr	r3, [r0, #0]
   d98e2:	2100      	movs	r1, #0
   d98e4:	681b      	ldr	r3, [r3, #0]
   d98e6:	4798      	blx	r3
    deselectSlave();
   d98e8:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d98ea:	4605      	mov	r5, r0
    deselectSlave();
   d98ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d98ee:	4620      	mov	r0, r4
   d98f0:	4798      	blx	r3
    _spi.endTransaction();
   d98f2:	6a20      	ldr	r0, [r4, #32]
   d98f4:	6803      	ldr	r3, [r0, #0]
   d98f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d98f8:	4798      	blx	r3
}
   d98fa:	4628      	mov	r0, r5
   d98fc:	bd38      	pop	{r3, r4, r5, pc}

000d98fe <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d98fe:	b570      	push	{r4, r5, r6, lr}
   d9900:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d9902:	6a00      	ldr	r0, [r0, #32]
   d9904:	6803      	ldr	r3, [r0, #0]
   d9906:	6a1b      	ldr	r3, [r3, #32]
{
   d9908:	4616      	mov	r6, r2
   d990a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d990c:	4798      	blx	r3
    selectSlave();
   d990e:	6823      	ldr	r3, [r4, #0]
   d9910:	4620      	mov	r0, r4
   d9912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d9914:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d9916:	6a20      	ldr	r0, [r4, #32]
   d9918:	6803      	ldr	r3, [r0, #0]
   d991a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d991e:	681b      	ldr	r3, [r3, #0]
   d9920:	4798      	blx	r3
   d9922:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d9924:	6a20      	ldr	r0, [r4, #32]
   d9926:	6803      	ldr	r3, [r0, #0]
   d9928:	4631      	mov	r1, r6
   d992a:	681b      	ldr	r3, [r3, #0]
   d992c:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d992e:	2001      	movs	r0, #1
   d9930:	f000 ff30 	bl	da794 <HAL_Delay_Microseconds>
    deselectSlave();
   d9934:	6823      	ldr	r3, [r4, #0]
   d9936:	4620      	mov	r0, r4
   d9938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d993a:	4798      	blx	r3
    _spi.endTransaction();
   d993c:	6a20      	ldr	r0, [r4, #32]
   d993e:	6803      	ldr	r3, [r0, #0]
   d9940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9942:	4798      	blx	r3
}
   d9944:	4628      	mov	r0, r5
   d9946:	bd70      	pop	{r4, r5, r6, pc}

000d9948 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d9948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d994a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d994c:	6a00      	ldr	r0, [r0, #32]
{
   d994e:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d9950:	6803      	ldr	r3, [r0, #0]
   d9952:	6a1b      	ldr	r3, [r3, #32]
{
   d9954:	460f      	mov	r7, r1
   d9956:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d9958:	4798      	blx	r3
    selectSlave();
   d995a:	6823      	ldr	r3, [r4, #0]
   d995c:	4620      	mov	r0, r4
   d995e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d9960:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d9962:	6a20      	ldr	r0, [r4, #32]
   d9964:	6803      	ldr	r3, [r0, #0]
   d9966:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d996a:	681b      	ldr	r3, [r3, #0]
   d996c:	4798      	blx	r3
   d996e:	442e      	add	r6, r5
   d9970:	4607      	mov	r7, r0
    while (len--)
   d9972:	42b5      	cmp	r5, r6
   d9974:	d007      	beq.n	d9986 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d9976:	6a20      	ldr	r0, [r4, #32]
   d9978:	6803      	ldr	r3, [r0, #0]
   d997a:	2100      	movs	r1, #0
   d997c:	681b      	ldr	r3, [r3, #0]
   d997e:	4798      	blx	r3
   d9980:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d9984:	e7f5      	b.n	d9972 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d9986:	6823      	ldr	r3, [r4, #0]
   d9988:	4620      	mov	r0, r4
   d998a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d998c:	4798      	blx	r3
    _spi.endTransaction();
   d998e:	6a20      	ldr	r0, [r4, #32]
   d9990:	6803      	ldr	r3, [r0, #0]
   d9992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9994:	4798      	blx	r3
}
   d9996:	4638      	mov	r0, r7
   d9998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d999a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d999a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d999c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d999e:	6a00      	ldr	r0, [r0, #32]
{
   d99a0:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d99a2:	6803      	ldr	r3, [r0, #0]
   d99a4:	6a1b      	ldr	r3, [r3, #32]
{
   d99a6:	460f      	mov	r7, r1
   d99a8:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d99aa:	4798      	blx	r3
    selectSlave();
   d99ac:	6823      	ldr	r3, [r4, #0]
   d99ae:	4620      	mov	r0, r4
   d99b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d99b2:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d99b4:	6a20      	ldr	r0, [r4, #32]
   d99b6:	6803      	ldr	r3, [r0, #0]
   d99b8:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d99bc:	681b      	ldr	r3, [r3, #0]
   d99be:	4798      	blx	r3
   d99c0:	442e      	add	r6, r5
   d99c2:	4607      	mov	r7, r0
    while (len--)
   d99c4:	42b5      	cmp	r5, r6
   d99c6:	d006      	beq.n	d99d6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d99c8:	6a20      	ldr	r0, [r4, #32]
   d99ca:	f815 1b01 	ldrb.w	r1, [r5], #1
   d99ce:	6803      	ldr	r3, [r0, #0]
   d99d0:	681b      	ldr	r3, [r3, #0]
   d99d2:	4798      	blx	r3
    while (len--)
   d99d4:	e7f6      	b.n	d99c4 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d99d6:	6823      	ldr	r3, [r4, #0]
   d99d8:	4620      	mov	r0, r4
   d99da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d99dc:	4798      	blx	r3
    _spi.endTransaction();
   d99de:	6a20      	ldr	r0, [r4, #32]
   d99e0:	6803      	ldr	r3, [r0, #0]
   d99e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d99e4:	4798      	blx	r3
}
   d99e6:	4638      	mov	r0, r7
   d99e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d99ea <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d99ea:	6a00      	ldr	r0, [r0, #32]
   d99ec:	6803      	ldr	r3, [r0, #0]
   d99ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d99f0:	4718      	bx	r3

000d99f2 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d99f2:	2001      	movs	r0, #1
   d99f4:	4770      	bx	lr

000d99f6 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d99f6:	20fb      	movs	r0, #251	; 0xfb
   d99f8:	4770      	bx	lr

000d99fa <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d99fa:	4770      	bx	lr

000d99fc <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d99fc:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d99fe:	7903      	ldrb	r3, [r0, #4]
   d9a00:	2b05      	cmp	r3, #5
{
   d9a02:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d9a04:	d010      	beq.n	d9a28 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d9a06:	6803      	ldr	r3, [r0, #0]
   d9a08:	2105      	movs	r1, #5
   d9a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9a0e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d9a10:	2207      	movs	r2, #7
   d9a12:	2101      	movs	r1, #1
   d9a14:	4620      	mov	r0, r4
   d9a16:	f7ff ff72 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d9a1a:	2280      	movs	r2, #128	; 0x80
   d9a1c:	2140      	movs	r1, #64	; 0x40
   d9a1e:	4620      	mov	r0, r4
   d9a20:	f7ff ff6d 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d9a24:	2305      	movs	r3, #5
   d9a26:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d9a28:	7923      	ldrb	r3, [r4, #4]
   d9a2a:	2b05      	cmp	r3, #5
   d9a2c:	d0fc      	beq.n	d9a28 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d9a2e:	7e20      	ldrb	r0, [r4, #24]
}
   d9a30:	bd10      	pop	{r4, pc}

000d9a32 <_ZN7RH_RF95D0Ev>:
   d9a32:	b510      	push	{r4, lr}
   d9a34:	f44f 7198 	mov.w	r1, #304	; 0x130
   d9a38:	4604      	mov	r4, r0
   d9a3a:	f004 fb93 	bl	de164 <_ZdlPvj>
   d9a3e:	4620      	mov	r0, r4
   d9a40:	bd10      	pop	{r4, pc}

000d9a42 <_ZN7RH_RF955sleepEv>:
{
   d9a42:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d9a44:	7903      	ldrb	r3, [r0, #4]
   d9a46:	2b01      	cmp	r3, #1
{
   d9a48:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d9a4a:	d00b      	beq.n	d9a64 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d9a4c:	6803      	ldr	r3, [r0, #0]
   d9a4e:	2101      	movs	r1, #1
   d9a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9a54:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d9a56:	2200      	movs	r2, #0
   d9a58:	2101      	movs	r1, #1
   d9a5a:	4620      	mov	r0, r4
   d9a5c:	f7ff ff4f 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d9a60:	2301      	movs	r3, #1
   d9a62:	7123      	strb	r3, [r4, #4]
}
   d9a64:	2001      	movs	r0, #1
   d9a66:	bd10      	pop	{r4, pc}

000d9a68 <_ZN7RH_RF954recvEPhS0_>:
{
   d9a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d9a6a:	6803      	ldr	r3, [r0, #0]
   d9a6c:	68db      	ldr	r3, [r3, #12]
{
   d9a6e:	4604      	mov	r4, r0
   d9a70:	460f      	mov	r7, r1
   d9a72:	4615      	mov	r5, r2
    if (!available())
   d9a74:	4798      	blx	r3
   d9a76:	4606      	mov	r6, r0
   d9a78:	b1b0      	cbz	r0, d9aa8 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d9a7a:	b187      	cbz	r7, d9a9e <_ZN7RH_RF954recvEPhS0_+0x36>
   d9a7c:	b17d      	cbz	r5, d9a9e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d9a7e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d9a82:	782a      	ldrb	r2, [r5, #0]
   d9a84:	3b03      	subs	r3, #3
   d9a86:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d9a88:	bfde      	ittt	le
   d9a8a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d9a8e:	3b04      	suble	r3, #4
   d9a90:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d9a92:	782a      	ldrb	r2, [r5, #0]
   d9a94:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d9a98:	4638      	mov	r0, r7
   d9a9a:	f004 ffef 	bl	dea7c <memcpy>
    _rxBufValid = false;
   d9a9e:	2300      	movs	r3, #0
   d9aa0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d9aa4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d9aa8:	4630      	mov	r0, r6
   d9aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9aac <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d9aac:	b538      	push	{r3, r4, r5, lr}
   d9aae:	4604      	mov	r4, r0
   d9ab0:	4615      	mov	r5, r2
    _rxBufValid(0)
   d9ab2:	461a      	mov	r2, r3
   d9ab4:	f7ff fef2 	bl	d989c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d9ab8:	4b09      	ldr	r3, [pc, #36]	; (d9ae0 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d9aba:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d9abc:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d9abe:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d9ac0:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d9ac4:	2201      	movs	r2, #1
    _rxBufValid(0)
   d9ac6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d9aca:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d9ace:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d9ad2:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d9ad6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d9ada:	4620      	mov	r0, r4
   d9adc:	bd38      	pop	{r3, r4, r5, pc}
   d9ade:	bf00      	nop
   d9ae0:	000e00d8 	.word	0x000e00d8

000d9ae4 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d9ae4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d9ae8:	2b03      	cmp	r3, #3
   d9aea:	d91b      	bls.n	d9b24 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d9aec:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d9af0:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d9af2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d9af6:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d9af8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d9afc:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d9afe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d9b02:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d9b04:	7983      	ldrb	r3, [r0, #6]
   d9b06:	b933      	cbnz	r3, d9b16 <_ZN7RH_RF9513validateRxBufEv+0x32>
   d9b08:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d9b0a:	7942      	ldrb	r2, [r0, #5]
   d9b0c:	429a      	cmp	r2, r3
   d9b0e:	d002      	beq.n	d9b16 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d9b10:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d9b12:	2bff      	cmp	r3, #255	; 0xff
   d9b14:	d106      	bne.n	d9b24 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d9b16:	8a83      	ldrh	r3, [r0, #20]
   d9b18:	3301      	adds	r3, #1
   d9b1a:	b29b      	uxth	r3, r3
   d9b1c:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d9b1e:	2301      	movs	r3, #1
   d9b20:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d9b24:	4770      	bx	lr
	...

000d9b28 <_ZN7RH_RF9512setFrequencyEf>:
{
   d9b28:	b538      	push	{r3, r4, r5, lr}
   d9b2a:	4604      	mov	r4, r0
   d9b2c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d9b30:	ee10 0a10 	vmov	r0, s0
{
   d9b34:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d9b38:	f004 fc88 	bl	de44c <__aeabi_f2d>
   d9b3c:	a317      	add	r3, pc, #92	; (adr r3, d9b9c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d9b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b42:	f004 fcdb 	bl	de4fc <__aeabi_dmul>
   d9b46:	a317      	add	r3, pc, #92	; (adr r3, d9ba4 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d9b48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b4c:	f004 fe00 	bl	de750 <__aeabi_ddiv>
   d9b50:	f004 fee6 	bl	de920 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d9b54:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d9b56:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d9b58:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d9b5c:	4620      	mov	r0, r4
   d9b5e:	f7ff fece 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d9b62:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d9b66:	2107      	movs	r1, #7
   d9b68:	4620      	mov	r0, r4
   d9b6a:	f7ff fec8 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d9b6e:	b2ea      	uxtb	r2, r5
   d9b70:	2108      	movs	r1, #8
   d9b72:	4620      	mov	r0, r4
   d9b74:	f7ff fec3 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d9b78:	eddf 7a07 	vldr	s15, [pc, #28]	; d9b98 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d9b7c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d9b80:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d9b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9b88:	bfac      	ite	ge
   d9b8a:	2301      	movge	r3, #1
   d9b8c:	2300      	movlt	r3, #0
}
   d9b8e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d9b90:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d9b94:	bd38      	pop	{r3, r4, r5, pc}
   d9b96:	bf00      	nop
   d9b98:	4442c000 	.word	0x4442c000
   d9b9c:	00000000 	.word	0x00000000
   d9ba0:	412e8480 	.word	0x412e8480
   d9ba4:	00000000 	.word	0x00000000
   d9ba8:	404e8480 	.word	0x404e8480

000d9bac <_ZN7RH_RF9511setModeIdleEv>:
{
   d9bac:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d9bae:	7903      	ldrb	r3, [r0, #4]
   d9bb0:	2b02      	cmp	r3, #2
{
   d9bb2:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d9bb4:	d00b      	beq.n	d9bce <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d9bb6:	6803      	ldr	r3, [r0, #0]
   d9bb8:	2102      	movs	r1, #2
   d9bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9bbe:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d9bc0:	2201      	movs	r2, #1
   d9bc2:	4611      	mov	r1, r2
   d9bc4:	4620      	mov	r0, r4
   d9bc6:	f7ff fe9a 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d9bca:	2302      	movs	r3, #2
   d9bcc:	7123      	strb	r3, [r4, #4]
}
   d9bce:	bd10      	pop	{r4, pc}

000d9bd0 <_ZN7RH_RF9515handleInterruptEv>:
{
   d9bd0:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d9bd2:	2112      	movs	r1, #18
{
   d9bd4:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d9bd6:	f7ff fe71 	bl	d98bc <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d9bda:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d9bdc:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d9bde:	4620      	mov	r0, r4
   d9be0:	f7ff fe6c 	bl	d98bc <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9be4:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d9be6:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9be8:	2112      	movs	r1, #18
   d9bea:	4620      	mov	r0, r4
   d9bec:	f7ff fe87 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d9bf0:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d9bf2:	2b04      	cmp	r3, #4
   d9bf4:	d107      	bne.n	d9c06 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d9bf6:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d9bfa:	d117      	bne.n	d9c2c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d9bfc:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d9c00:	b10b      	cbz	r3, d9c06 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d9c02:	0670      	lsls	r0, r6, #25
   d9c04:	d512      	bpl.n	d9c2c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d9c06:	7923      	ldrb	r3, [r4, #4]
   d9c08:	2b04      	cmp	r3, #4
   d9c0a:	d101      	bne.n	d9c10 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d9c0c:	0669      	lsls	r1, r5, #25
   d9c0e:	d422      	bmi.n	d9c56 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d9c10:	7923      	ldrb	r3, [r4, #4]
   d9c12:	2b03      	cmp	r3, #3
   d9c14:	d101      	bne.n	d9c1a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d9c16:	072a      	lsls	r2, r5, #28
   d9c18:	d469      	bmi.n	d9cee <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d9c1a:	7923      	ldrb	r3, [r4, #4]
   d9c1c:	2b05      	cmp	r3, #5
   d9c1e:	d10e      	bne.n	d9c3e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d9c20:	076b      	lsls	r3, r5, #29
   d9c22:	d50c      	bpl.n	d9c3e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d9c24:	f005 0501 	and.w	r5, r5, #1
   d9c28:	7625      	strb	r5, [r4, #24]
   d9c2a:	e059      	b.n	d9ce0 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d9c2c:	8a63      	ldrh	r3, [r4, #18]
   d9c2e:	3301      	adds	r3, #1
   d9c30:	b29b      	uxth	r3, r3
   d9c32:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d9c34:	2300      	movs	r3, #0
   d9c36:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d9c3a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9c3e:	22ff      	movs	r2, #255	; 0xff
   d9c40:	2112      	movs	r1, #18
   d9c42:	4620      	mov	r0, r4
   d9c44:	f7ff fe5b 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9c48:	4620      	mov	r0, r4
   d9c4a:	22ff      	movs	r2, #255	; 0xff
}
   d9c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9c50:	2112      	movs	r1, #18
   d9c52:	f7ff be54 	b.w	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d9c56:	2113      	movs	r1, #19
   d9c58:	4620      	mov	r0, r4
   d9c5a:	f7ff fe2f 	bl	d98bc <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d9c5e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d9c60:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d9c62:	4620      	mov	r0, r4
   d9c64:	f7ff fe2a 	bl	d98bc <_ZN11RHSPIDriver7spiReadEh>
   d9c68:	210d      	movs	r1, #13
   d9c6a:	4602      	mov	r2, r0
   d9c6c:	4620      	mov	r0, r4
   d9c6e:	f7ff fe46 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d9c72:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d9c76:	462b      	mov	r3, r5
   d9c78:	2100      	movs	r1, #0
   d9c7a:	4620      	mov	r0, r4
   d9c7c:	f7ff fe64 	bl	d9948 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d9c80:	2119      	movs	r1, #25
	_bufLen = len;
   d9c82:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d9c86:	4620      	mov	r0, r4
   d9c88:	f7ff fe18 	bl	d98bc <_ZN11RHSPIDriver7spiReadEh>
   d9c8c:	b240      	sxtb	r0, r0
   d9c8e:	2800      	cmp	r0, #0
   d9c90:	bfb8      	it	lt
   d9c92:	3003      	addlt	r0, #3
   d9c94:	1080      	asrs	r0, r0, #2
   d9c96:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d9c9a:	211a      	movs	r1, #26
   d9c9c:	4620      	mov	r0, r4
   d9c9e:	f7ff fe0d 	bl	d98bc <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d9ca2:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d9ca6:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d9ca8:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d9caa:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d9cac:	bfa9      	itett	ge
   d9cae:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d9cb0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d9cb2:	b21b      	sxthge	r3, r3
   d9cb4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d9cb6:	bfb2      	itee	lt
   d9cb8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d9cba:	220f      	movge	r2, #15
   d9cbc:	fb93 f3f2 	sdivge	r3, r3, r2
   d9cc0:	b21b      	sxth	r3, r3
   d9cc2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d9cc4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d9cc8:	b173      	cbz	r3, d9ce8 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d9cca:	8a23      	ldrh	r3, [r4, #16]
   d9ccc:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d9cce:	b21b      	sxth	r3, r3
   d9cd0:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d9cd2:	4620      	mov	r0, r4
   d9cd4:	f7ff ff06 	bl	d9ae4 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d9cd8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d9cdc:	2b00      	cmp	r3, #0
   d9cde:	d0ae      	beq.n	d9c3e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d9ce0:	4620      	mov	r0, r4
   d9ce2:	f7ff ff63 	bl	d9bac <_ZN7RH_RF9511setModeIdleEv>
   d9ce6:	e7aa      	b.n	d9c3e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d9ce8:	8a23      	ldrh	r3, [r4, #16]
   d9cea:	3ba4      	subs	r3, #164	; 0xa4
   d9cec:	e7ef      	b.n	d9cce <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d9cee:	8ae3      	ldrh	r3, [r4, #22]
   d9cf0:	3301      	adds	r3, #1
   d9cf2:	b29b      	uxth	r3, r3
   d9cf4:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d9cf6:	e7f3      	b.n	d9ce0 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d9cf8 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d9cf8:	4b02      	ldr	r3, [pc, #8]	; (d9d04 <_ZN7RH_RF954isr0Ev+0xc>)
   d9cfa:	6818      	ldr	r0, [r3, #0]
   d9cfc:	b108      	cbz	r0, d9d02 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d9cfe:	f7ff bf67 	b.w	d9bd0 <_ZN7RH_RF9515handleInterruptEv>
}
   d9d02:	4770      	bx	lr
   d9d04:	2003e488 	.word	0x2003e488

000d9d08 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d9d08:	4b02      	ldr	r3, [pc, #8]	; (d9d14 <_ZN7RH_RF954isr1Ev+0xc>)
   d9d0a:	6858      	ldr	r0, [r3, #4]
   d9d0c:	b108      	cbz	r0, d9d12 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d9d0e:	f7ff bf5f 	b.w	d9bd0 <_ZN7RH_RF9515handleInterruptEv>
}
   d9d12:	4770      	bx	lr
   d9d14:	2003e488 	.word	0x2003e488

000d9d18 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d9d18:	4b02      	ldr	r3, [pc, #8]	; (d9d24 <_ZN7RH_RF954isr2Ev+0xc>)
   d9d1a:	6898      	ldr	r0, [r3, #8]
   d9d1c:	b108      	cbz	r0, d9d22 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d9d1e:	f7ff bf57 	b.w	d9bd0 <_ZN7RH_RF9515handleInterruptEv>
}
   d9d22:	4770      	bx	lr
   d9d24:	2003e488 	.word	0x2003e488

000d9d28 <_ZN7RH_RF959setModeRxEv>:
{
   d9d28:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d9d2a:	7903      	ldrb	r3, [r0, #4]
   d9d2c:	2b04      	cmp	r3, #4
{
   d9d2e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d9d30:	d010      	beq.n	d9d54 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d9d32:	6803      	ldr	r3, [r0, #0]
   d9d34:	2104      	movs	r1, #4
   d9d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9d3a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d9d3c:	2205      	movs	r2, #5
   d9d3e:	2101      	movs	r1, #1
   d9d40:	4620      	mov	r0, r4
   d9d42:	f7ff fddc 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d9d46:	2200      	movs	r2, #0
   d9d48:	2140      	movs	r1, #64	; 0x40
   d9d4a:	4620      	mov	r0, r4
   d9d4c:	f7ff fdd7 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d9d50:	2304      	movs	r3, #4
   d9d52:	7123      	strb	r3, [r4, #4]
}
   d9d54:	bd10      	pop	{r4, pc}

000d9d56 <_ZN7RH_RF959availableEv>:
{
   d9d56:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d9d58:	7903      	ldrb	r3, [r0, #4]
   d9d5a:	2b03      	cmp	r3, #3
{
   d9d5c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d9d5e:	d005      	beq.n	d9d6c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d9d60:	f7ff ffe2 	bl	d9d28 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d9d64:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d9d68:	b2c0      	uxtb	r0, r0
}
   d9d6a:	bd10      	pop	{r4, pc}
	return false;
   d9d6c:	2000      	movs	r0, #0
   d9d6e:	e7fc      	b.n	d9d6a <_ZN7RH_RF959availableEv+0x14>

000d9d70 <_ZN7RH_RF959setModeTxEv>:
{
   d9d70:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d9d72:	7903      	ldrb	r3, [r0, #4]
   d9d74:	2b03      	cmp	r3, #3
{
   d9d76:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d9d78:	d010      	beq.n	d9d9c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d9d7a:	6803      	ldr	r3, [r0, #0]
   d9d7c:	2103      	movs	r1, #3
   d9d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9d82:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d9d84:	2203      	movs	r2, #3
   d9d86:	2101      	movs	r1, #1
   d9d88:	4620      	mov	r0, r4
   d9d8a:	f7ff fdb8 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d9d8e:	2240      	movs	r2, #64	; 0x40
   d9d90:	4611      	mov	r1, r2
   d9d92:	4620      	mov	r0, r4
   d9d94:	f7ff fdb3 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d9d98:	2303      	movs	r3, #3
   d9d9a:	7123      	strb	r3, [r4, #4]
}
   d9d9c:	bd10      	pop	{r4, pc}

000d9d9e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d9d9e:	2afb      	cmp	r2, #251	; 0xfb
{
   d9da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9da2:	4604      	mov	r4, r0
   d9da4:	460f      	mov	r7, r1
   d9da6:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d9da8:	d902      	bls.n	d9db0 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d9daa:	2600      	movs	r6, #0
}
   d9dac:	4630      	mov	r0, r6
   d9dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d9db0:	6803      	ldr	r3, [r0, #0]
   d9db2:	6a1b      	ldr	r3, [r3, #32]
   d9db4:	4798      	blx	r3
    setModeIdle();
   d9db6:	4620      	mov	r0, r4
   d9db8:	f7ff fef8 	bl	d9bac <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d9dbc:	6823      	ldr	r3, [r4, #0]
   d9dbe:	4620      	mov	r0, r4
   d9dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9dc2:	4798      	blx	r3
   d9dc4:	4606      	mov	r6, r0
   d9dc6:	2800      	cmp	r0, #0
   d9dc8:	d0ef      	beq.n	d9daa <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d9dca:	2200      	movs	r2, #0
   d9dcc:	210d      	movs	r1, #13
   d9dce:	4620      	mov	r0, r4
   d9dd0:	f7ff fd95 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d9dd4:	7ae2      	ldrb	r2, [r4, #11]
   d9dd6:	2100      	movs	r1, #0
   d9dd8:	4620      	mov	r0, r4
   d9dda:	f7ff fd90 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d9dde:	7b22      	ldrb	r2, [r4, #12]
   d9de0:	2100      	movs	r1, #0
   d9de2:	4620      	mov	r0, r4
   d9de4:	f7ff fd8b 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d9de8:	7b62      	ldrb	r2, [r4, #13]
   d9dea:	2100      	movs	r1, #0
   d9dec:	4620      	mov	r0, r4
   d9dee:	f7ff fd86 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d9df2:	7ba2      	ldrb	r2, [r4, #14]
   d9df4:	2100      	movs	r1, #0
   d9df6:	4620      	mov	r0, r4
   d9df8:	f7ff fd81 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d9dfc:	462b      	mov	r3, r5
   d9dfe:	463a      	mov	r2, r7
   d9e00:	2100      	movs	r1, #0
   d9e02:	4620      	mov	r0, r4
   d9e04:	f7ff fdc9 	bl	d999a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d9e08:	1d2a      	adds	r2, r5, #4
   d9e0a:	b2d2      	uxtb	r2, r2
   d9e0c:	2122      	movs	r1, #34	; 0x22
   d9e0e:	4620      	mov	r0, r4
   d9e10:	f7ff fd75 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d9e14:	4620      	mov	r0, r4
   d9e16:	f7ff ffab 	bl	d9d70 <_ZN7RH_RF959setModeTxEv>
    return true;
   d9e1a:	e7c7      	b.n	d9dac <_ZN7RH_RF954sendEPKhh+0xe>

000d9e1c <_ZN7RH_RF9510setTxPowerEab>:
{
   d9e1c:	b538      	push	{r3, r4, r5, lr}
   d9e1e:	4605      	mov	r5, r0
   d9e20:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d9e22:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d9e26:	b172      	cbz	r2, d9e46 <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d9e28:	f381 0204 	usat	r2, #4, r1
   d9e2c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d9e30:	b2d2      	uxtb	r2, r2
   d9e32:	2109      	movs	r1, #9
   d9e34:	f7ff fd63 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d9e38:	2204      	movs	r2, #4
   d9e3a:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d9e3c:	4628      	mov	r0, r5
}
   d9e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d9e42:	f7ff bd5c 	b.w	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d9e46:	2914      	cmp	r1, #20
   d9e48:	dc10      	bgt.n	d9e6c <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d9e4a:	2901      	cmp	r1, #1
   d9e4c:	dd10      	ble.n	d9e70 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d9e4e:	2911      	cmp	r1, #17
   d9e50:	dd0f      	ble.n	d9e72 <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d9e52:	2207      	movs	r2, #7
   d9e54:	214d      	movs	r1, #77	; 0x4d
   d9e56:	4628      	mov	r0, r5
   d9e58:	f7ff fd51 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d9e5c:	3c03      	subs	r4, #3
   d9e5e:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d9e60:	1ea2      	subs	r2, r4, #2
   d9e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d9e66:	b2d2      	uxtb	r2, r2
   d9e68:	2109      	movs	r1, #9
   d9e6a:	e7e7      	b.n	d9e3c <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d9e6c:	2414      	movs	r4, #20
   d9e6e:	e7f0      	b.n	d9e52 <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d9e70:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d9e72:	2204      	movs	r2, #4
   d9e74:	214d      	movs	r1, #77	; 0x4d
   d9e76:	4628      	mov	r0, r5
   d9e78:	f7ff fd41 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
   d9e7c:	e7f0      	b.n	d9e60 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d9e7e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d9e7e:	b538      	push	{r3, r4, r5, lr}
   d9e80:	460c      	mov	r4, r1
   d9e82:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d9e84:	780a      	ldrb	r2, [r1, #0]
   d9e86:	211d      	movs	r1, #29
   d9e88:	f7ff fd39 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d9e8c:	7862      	ldrb	r2, [r4, #1]
   d9e8e:	211e      	movs	r1, #30
   d9e90:	4628      	mov	r0, r5
   d9e92:	f7ff fd34 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d9e96:	78a2      	ldrb	r2, [r4, #2]
   d9e98:	4628      	mov	r0, r5
   d9e9a:	2126      	movs	r1, #38	; 0x26
}
   d9e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d9ea0:	f7ff bd2d 	b.w	d98fe <_ZN11RHSPIDriver8spiWriteEhh>

000d9ea4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d9ea4:	2905      	cmp	r1, #5
{
   d9ea6:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d9ea8:	d80f      	bhi.n	d9eca <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d9eaa:	4b09      	ldr	r3, [pc, #36]	; (d9ed0 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d9eac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d9eb0:	185c      	adds	r4, r3, r1
   d9eb2:	5a5a      	ldrh	r2, [r3, r1]
   d9eb4:	78a3      	ldrb	r3, [r4, #2]
   d9eb6:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d9eba:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d9ebc:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d9ec0:	f7ff ffdd 	bl	d9e7e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d9ec4:	2001      	movs	r0, #1
}
   d9ec6:	b002      	add	sp, #8
   d9ec8:	bd10      	pop	{r4, pc}
        return false;
   d9eca:	2000      	movs	r0, #0
   d9ecc:	e7fb      	b.n	d9ec6 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d9ece:	bf00      	nop
   d9ed0:	000e00c0 	.word	0x000e00c0

000d9ed4 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d9ed4:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d9ed6:	0a0a      	lsrs	r2, r1, #8
{
   d9ed8:	4605      	mov	r5, r0
   d9eda:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d9edc:	2120      	movs	r1, #32
   d9ede:	f7ff fd0e 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d9ee2:	b2e2      	uxtb	r2, r4
   d9ee4:	4628      	mov	r0, r5
   d9ee6:	2121      	movs	r1, #33	; 0x21
}
   d9ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d9eec:	f7ff bd07 	b.w	d98fe <_ZN11RHSPIDriver8spiWriteEhh>

000d9ef0 <_ZN7RH_RF954initEv>:
{
   d9ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9ef2:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d9ef4:	f7ff fcb2 	bl	d985c <_ZN11RHSPIDriver4initEv>
   d9ef8:	4606      	mov	r6, r0
   d9efa:	b918      	cbnz	r0, d9f04 <_ZN7RH_RF954initEv+0x14>
	return false;
   d9efc:	2600      	movs	r6, #0
}
   d9efe:	4630      	mov	r0, r6
   d9f00:	b002      	add	sp, #8
   d9f02:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d9f04:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d9f08:	2dff      	cmp	r5, #255	; 0xff
   d9f0a:	d052      	beq.n	d9fb2 <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d9f0c:	4629      	mov	r1, r5
   d9f0e:	4620      	mov	r0, r4
   d9f10:	f7ff fd6b 	bl	d99ea <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d9f14:	2280      	movs	r2, #128	; 0x80
   d9f16:	2101      	movs	r1, #1
   d9f18:	4620      	mov	r0, r4
   d9f1a:	f7ff fcf0 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d9f1e:	200a      	movs	r0, #10
   d9f20:	f001 f83a 	bl	daf98 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d9f24:	2101      	movs	r1, #1
   d9f26:	4620      	mov	r0, r4
   d9f28:	f7ff fcc8 	bl	d98bc <_ZN11RHSPIDriver7spiReadEh>
   d9f2c:	2880      	cmp	r0, #128	; 0x80
   d9f2e:	d1e5      	bne.n	d9efc <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d9f30:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d9f34:	28ff      	cmp	r0, #255	; 0xff
   d9f36:	d01c      	beq.n	d9f72 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d9f38:	2100      	movs	r1, #0
   d9f3a:	f004 f845 	bl	ddfc8 <pinMode>
	if (_myInterruptIndex == 0xff)
   d9f3e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d9f42:	2bff      	cmp	r3, #255	; 0xff
   d9f44:	d107      	bne.n	d9f56 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d9f46:	4a25      	ldr	r2, [pc, #148]	; (d9fdc <_ZN7RH_RF954initEv+0xec>)
   d9f48:	7813      	ldrb	r3, [r2, #0]
   d9f4a:	2b03      	cmp	r3, #3
   d9f4c:	d8d6      	bhi.n	d9efc <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d9f4e:	1c59      	adds	r1, r3, #1
   d9f50:	7011      	strb	r1, [r2, #0]
   d9f52:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d9f56:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d9f5a:	4b21      	ldr	r3, [pc, #132]	; (d9fe0 <_ZN7RH_RF954initEv+0xf0>)
   d9f5c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d9f60:	bb52      	cbnz	r2, d9fb8 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d9f62:	4920      	ldr	r1, [pc, #128]	; (d9fe4 <_ZN7RH_RF954initEv+0xf4>)
   d9f64:	9200      	str	r2, [sp, #0]
   d9f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9f6a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d9f6c:	b2a8      	uxth	r0, r5
   d9f6e:	f001 fdf3 	bl	dbb58 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d9f72:	2200      	movs	r2, #0
   d9f74:	210e      	movs	r1, #14
   d9f76:	4620      	mov	r0, r4
   d9f78:	f7ff fcc1 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d9f7c:	2200      	movs	r2, #0
   d9f7e:	210f      	movs	r1, #15
   d9f80:	4620      	mov	r0, r4
   d9f82:	f7ff fcbc 	bl	d98fe <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d9f86:	4620      	mov	r0, r4
   d9f88:	f7ff fe10 	bl	d9bac <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d9f8c:	2100      	movs	r1, #0
   d9f8e:	4620      	mov	r0, r4
   d9f90:	f7ff ff88 	bl	d9ea4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d9f94:	2108      	movs	r1, #8
   d9f96:	4620      	mov	r0, r4
   d9f98:	f7ff ff9c 	bl	d9ed4 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d9f9c:	ed9f 0a12 	vldr	s0, [pc, #72]	; d9fe8 <_ZN7RH_RF954initEv+0xf8>
   d9fa0:	4620      	mov	r0, r4
   d9fa2:	f7ff fdc1 	bl	d9b28 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d9fa6:	2200      	movs	r2, #0
   d9fa8:	210d      	movs	r1, #13
   d9faa:	4620      	mov	r0, r4
   d9fac:	f7ff ff36 	bl	d9e1c <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d9fb0:	e7a5      	b.n	d9efe <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d9fb2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d9fb6:	e7ad      	b.n	d9f14 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d9fb8:	2a01      	cmp	r2, #1
   d9fba:	f04f 0300 	mov.w	r3, #0
   d9fbe:	d104      	bne.n	d9fca <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d9fc0:	9300      	str	r3, [sp, #0]
   d9fc2:	490a      	ldr	r1, [pc, #40]	; (d9fec <_ZN7RH_RF954initEv+0xfc>)
   d9fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9fc8:	e7d0      	b.n	d9f6c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d9fca:	2a02      	cmp	r2, #2
   d9fcc:	d196      	bne.n	d9efc <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d9fce:	9300      	str	r3, [sp, #0]
   d9fd0:	4907      	ldr	r1, [pc, #28]	; (d9ff0 <_ZN7RH_RF954initEv+0x100>)
   d9fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9fd6:	2201      	movs	r2, #1
   d9fd8:	e7c8      	b.n	d9f6c <_ZN7RH_RF954initEv+0x7c>
   d9fda:	bf00      	nop
   d9fdc:	2003e485 	.word	0x2003e485
   d9fe0:	2003e488 	.word	0x2003e488
   d9fe4:	000d9cf9 	.word	0x000d9cf9
   d9fe8:	43d90000 	.word	0x43d90000
   d9fec:	000d9d09 	.word	0x000d9d09
   d9ff0:	000d9d19 	.word	0x000d9d19

000d9ff4 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d9ff4:	2001      	movs	r0, #1
   d9ff6:	4770      	bx	lr

000d9ff8 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d9ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9ffa:	4d1f      	ldr	r5, [pc, #124]	; (da078 <_ZN14SequentialFileC1Ev+0x80>)
   d9ffc:	4b1f      	ldr	r3, [pc, #124]	; (da07c <_ZN14SequentialFileC1Ev+0x84>)
   d9ffe:	4604      	mov	r4, r0
   da000:	4629      	mov	r1, r5
   da002:	f840 3b04 	str.w	r3, [r0], #4
   da006:	f003 face 	bl	dd5a6 <_ZN6StringC1EPKc>
   da00a:	491d      	ldr	r1, [pc, #116]	; (da080 <_ZN14SequentialFileC1Ev+0x88>)
   da00c:	f104 0014 	add.w	r0, r4, #20
   da010:	f003 fac9 	bl	dd5a6 <_ZN6StringC1EPKc>
   da014:	4629      	mov	r1, r5
   da016:	f104 0024 	add.w	r0, r4, #36	; 0x24
   da01a:	f003 fac4 	bl	dd5a6 <_ZN6StringC1EPKc>
   da01e:	2300      	movs	r3, #0
   da020:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   da024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   da028:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   da02c:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   da030:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   da034:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   da038:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   da03a:	2308      	movs	r3, #8
   da03c:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da03e:	2020      	movs	r0, #32
   da040:	f7fa f829 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   da044:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   da046:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   da048:	3d01      	subs	r5, #1
   da04a:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   da04c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   da050:	4606      	mov	r6, r0
   da052:	f44f 7000 	mov.w	r0, #512	; 0x200
   da056:	f7fa f81e 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   da05a:	f500 7300 	add.w	r3, r0, #512	; 0x200
   da05e:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   da062:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   da066:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   da068:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   da06a:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   da06c:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   da06e:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   da070:	6667      	str	r7, [r4, #100]	; 0x64

}
   da072:	4620      	mov	r0, r4
   da074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da076:	bf00      	nop
   da078:	000e03d1 	.word	0x000e03d1
   da07c:	000e025c 	.word	0x000e025c
   da080:	000e015c 	.word	0x000e015c

000da084 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   da084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   da086:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   da088:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   da08a:	4628      	mov	r0, r5
   da08c:	f003 fae9 	bl	dd662 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   da090:	490e      	ldr	r1, [pc, #56]	; (da0cc <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   da092:	4668      	mov	r0, sp
   da094:	f003 fa87 	bl	dd5a6 <_ZN6StringC1EPKc>
   da098:	4669      	mov	r1, sp
   da09a:	4628      	mov	r0, r5
   da09c:	f003 fb4e 	bl	dd73c <_ZNK6String8endsWithERKS_>
   da0a0:	4606      	mov	r6, r0
   da0a2:	4668      	mov	r0, sp
   da0a4:	f003 fa34 	bl	dd510 <_ZN6StringD1Ev>
   da0a8:	b16e      	cbz	r6, da0c6 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   da0aa:	68e3      	ldr	r3, [r4, #12]
   da0ac:	2200      	movs	r2, #0
   da0ae:	3b01      	subs	r3, #1
   da0b0:	4629      	mov	r1, r5
   da0b2:	4668      	mov	r0, sp
   da0b4:	f003 fb58 	bl	dd768 <_ZNK6String9substringEjj>
   da0b8:	4669      	mov	r1, sp
   da0ba:	4628      	mov	r0, r5
   da0bc:	f003 fac9 	bl	dd652 <_ZN6StringaSEOS_>
   da0c0:	4668      	mov	r0, sp
   da0c2:	f003 fa25 	bl	dd510 <_ZN6StringD1Ev>
    }
    return *this; 
};
   da0c6:	4620      	mov	r0, r4
   da0c8:	b004      	add	sp, #16
   da0ca:	bd70      	pop	{r4, r5, r6, pc}
   da0cc:	000e0161 	.word	0x000e0161

000da0d0 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   da0d0:	b510      	push	{r4, lr}
    if (!queueMutex) {
   da0d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   da0d4:	4604      	mov	r4, r0
    if (!queueMutex) {
   da0d6:	b913      	cbnz	r3, da0de <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   da0d8:	303c      	adds	r0, #60	; 0x3c
   da0da:	f000 fb03 	bl	da6e4 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   da0de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   da0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   da0e4:	f000 bb06 	b.w	da6f4 <os_mutex_lock>

000da0e8 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   da0e8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   da0ea:	f000 bb0b 	b.w	da704 <os_mutex_unlock>
	...

000da0f0 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   da0f0:	b510      	push	{r4, lr}
   da0f2:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   da0f4:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   da0f6:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   da0f8:	f000 fcb4 	bl	daa64 <stat>
    if (result == 0) {
   da0fc:	b9d0      	cbnz	r0, da134 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   da0fe:	9b01      	ldr	r3, [sp, #4]
   da100:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   da102:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   da104:	d506      	bpl.n	da114 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   da106:	4915      	ldr	r1, [pc, #84]	; (da15c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   da108:	4815      	ldr	r0, [pc, #84]	; (da160 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   da10a:	f7f9 ffdd 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   da10e:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   da110:	b016      	add	sp, #88	; 0x58
   da112:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   da114:	4812      	ldr	r0, [pc, #72]	; (da160 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   da116:	4913      	ldr	r1, [pc, #76]	; (da164 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   da118:	f7fb fcdf 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   da11c:	4620      	mov	r0, r4
   da11e:	f004 fea5 	bl	dee6c <unlink>
    result = mkdir(path, 0777);
   da122:	f240 11ff 	movw	r1, #511	; 0x1ff
   da126:	4620      	mov	r0, r4
   da128:	f000 fca4 	bl	daa74 <mkdir>
    if (result == 0) {
   da12c:	b980      	cbnz	r0, da150 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   da12e:	490e      	ldr	r1, [pc, #56]	; (da168 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   da130:	4622      	mov	r2, r4
   da132:	e7e9      	b.n	da108 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   da134:	f000 ff00 	bl	daf38 <__errno>
   da138:	6803      	ldr	r3, [r0, #0]
   da13a:	2b02      	cmp	r3, #2
   da13c:	d0f1      	beq.n	da122 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   da13e:	f000 fefb 	bl	daf38 <__errno>
   da142:	490a      	ldr	r1, [pc, #40]	; (da16c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   da144:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   da146:	4806      	ldr	r0, [pc, #24]	; (da160 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   da148:	f7fb fcc7 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
        return false;
   da14c:	2000      	movs	r0, #0
   da14e:	e7df      	b.n	da110 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   da150:	f000 fef2 	bl	daf38 <__errno>
   da154:	4906      	ldr	r1, [pc, #24]	; (da170 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   da156:	6802      	ldr	r2, [r0, #0]
   da158:	e7f5      	b.n	da146 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   da15a:	bf00      	nop
   da15c:	000e016e 	.word	0x000e016e
   da160:	2003e494 	.word	0x2003e494
   da164:	000e018b 	.word	0x000e018b
   da168:	000e01bc 	.word	0x000e01bc
   da16c:	000e01a8 	.word	0x000e01a8
   da170:	000e01cb 	.word	0x000e01cb

000da174 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   da174:	b538      	push	{r3, r4, r5, lr}
   da176:	4615      	mov	r5, r2
   da178:	4604      	mov	r4, r0
    String result = name;
   da17a:	f003 fa14 	bl	dd5a6 <_ZN6StringC1EPKc>

    if (ext && *ext) {
   da17e:	b14d      	cbz	r5, da194 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   da180:	782b      	ldrb	r3, [r5, #0]
   da182:	b13b      	cbz	r3, da194 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   da184:	4904      	ldr	r1, [pc, #16]	; (da198 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   da186:	4620      	mov	r0, r4
   da188:	f003 fa94 	bl	dd6b4 <_ZN6String6concatEPKc>
   da18c:	4629      	mov	r1, r5
   da18e:	4620      	mov	r0, r4
   da190:	f003 fa90 	bl	dd6b4 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   da194:	4620      	mov	r0, r4
   da196:	bd38      	pop	{r3, r4, r5, pc}
   da198:	000e04d0 	.word	0x000e04d0

000da19c <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   da19c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da19e:	4605      	mov	r5, r0
   da1a0:	460e      	mov	r6, r1
   da1a2:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   da1a4:	6949      	ldr	r1, [r1, #20]
   da1a6:	4668      	mov	r0, sp
   da1a8:	f003 fafe 	bl	dd7a8 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   da1ac:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   da1ae:	b904      	cbnz	r4, da1b2 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   da1b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da1b2:	4622      	mov	r2, r4
   da1b4:	4628      	mov	r0, r5
   da1b6:	f7ff ffdd 	bl	da174 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   da1ba:	4668      	mov	r0, sp
   da1bc:	f003 f9a8 	bl	dd510 <_ZN6StringD1Ev>
}
   da1c0:	4628      	mov	r0, r5
   da1c2:	b004      	add	sp, #16
   da1c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000da1c8 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   da1c8:	b570      	push	{r4, r5, r6, lr}
   da1ca:	460c      	mov	r4, r1
   da1cc:	b08e      	sub	sp, #56	; 0x38
    String result;
   da1ce:	491a      	ldr	r1, [pc, #104]	; (da238 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   da1d0:	e9cd 3200 	strd	r3, r2, [sp]
   da1d4:	4605      	mov	r5, r0
    String result;
   da1d6:	f003 f9e6 	bl	dd5a6 <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   da1da:	69e0      	ldr	r0, [r4, #28]
   da1dc:	68e1      	ldr	r1, [r4, #12]
   da1de:	4401      	add	r1, r0
   da1e0:	3104      	adds	r1, #4
   da1e2:	4628      	mov	r0, r5
   da1e4:	f003 f9b2 	bl	dd54c <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   da1e8:	1d21      	adds	r1, r4, #4
   da1ea:	a806      	add	r0, sp, #24
   da1ec:	f003 fa26 	bl	dd63c <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   da1f0:	4912      	ldr	r1, [pc, #72]	; (da23c <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   da1f2:	a802      	add	r0, sp, #8
   da1f4:	f003 f9d7 	bl	dd5a6 <_ZN6StringC1EPKc>
   da1f8:	a902      	add	r1, sp, #8
   da1fa:	a806      	add	r0, sp, #24
   da1fc:	f003 fa6b 	bl	dd6d6 <_ZplRK15StringSumHelperRK6String>
   da200:	e9dd 3200 	ldrd	r3, r2, [sp]
   da204:	4606      	mov	r6, r0
   da206:	4621      	mov	r1, r4
   da208:	a80a      	add	r0, sp, #40	; 0x28
   da20a:	f7ff ffc7 	bl	da19c <_ZN14SequentialFile17getNameForFileNumEiPKc>
   da20e:	a90a      	add	r1, sp, #40	; 0x28
   da210:	4630      	mov	r0, r6
   da212:	f003 fa60 	bl	dd6d6 <_ZplRK15StringSumHelperRK6String>
   da216:	4601      	mov	r1, r0
   da218:	4628      	mov	r0, r5
   da21a:	f003 fa00 	bl	dd61e <_ZN6StringaSERKS_>
   da21e:	a80a      	add	r0, sp, #40	; 0x28
   da220:	f003 f976 	bl	dd510 <_ZN6StringD1Ev>
   da224:	a802      	add	r0, sp, #8
   da226:	f003 f973 	bl	dd510 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da22a:	a806      	add	r0, sp, #24
   da22c:	f003 f970 	bl	dd510 <_ZN6StringD1Ev>
}
   da230:	4628      	mov	r0, r5
   da232:	b00e      	add	sp, #56	; 0x38
   da234:	bd70      	pop	{r4, r5, r6, pc}
   da236:	bf00      	nop
   da238:	000e03d1 	.word	0x000e03d1
   da23c:	000e0161 	.word	0x000e0161

000da240 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   da240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   da244:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   da246:	b08e      	sub	sp, #56	; 0x38
   da248:	4605      	mov	r5, r0
   da24a:	460f      	mov	r7, r1
    if (allExtensions) {
   da24c:	2a00      	cmp	r2, #0
   da24e:	d04a      	beq.n	da2e6 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   da250:	6840      	ldr	r0, [r0, #4]
   da252:	f000 fc1f 	bl	daa94 <opendir>
        if (dir) {
   da256:	4606      	mov	r6, r0
   da258:	2800      	cmp	r0, #0
   da25a:	d041      	beq.n	da2e0 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   da25c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; da310 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   da260:	f8df 90a4 	ldr.w	r9, [pc, #164]	; da308 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   da264:	f8df 80a4 	ldr.w	r8, [pc, #164]	; da30c <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   da268:	4630      	mov	r0, r6
   da26a:	f000 fc1b 	bl	daaa4 <readdir>
                if (!ent) {
   da26e:	2800      	cmp	r0, #0
   da270:	d033      	beq.n	da2da <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   da272:	7a82      	ldrb	r2, [r0, #10]
   da274:	2a08      	cmp	r2, #8
   da276:	d1f7      	bne.n	da268 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   da278:	f100 040b 	add.w	r4, r0, #11
   da27c:	6969      	ldr	r1, [r5, #20]
   da27e:	aa01      	add	r2, sp, #4
   da280:	4620      	mov	r0, r4
   da282:	f000 fe31 	bl	daee8 <sscanf>
   da286:	2801      	cmp	r0, #1
   da288:	d1ee      	bne.n	da268 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   da28a:	9b01      	ldr	r3, [sp, #4]
   da28c:	429f      	cmp	r7, r3
   da28e:	d1eb      	bne.n	da268 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   da290:	1d29      	adds	r1, r5, #4
   da292:	a806      	add	r0, sp, #24
   da294:	f003 f9d2 	bl	dd63c <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   da298:	4651      	mov	r1, sl
   da29a:	a80a      	add	r0, sp, #40	; 0x28
   da29c:	f003 f983 	bl	dd5a6 <_ZN6StringC1EPKc>
   da2a0:	a90a      	add	r1, sp, #40	; 0x28
   da2a2:	a806      	add	r0, sp, #24
   da2a4:	f003 fa17 	bl	dd6d6 <_ZplRK15StringSumHelperRK6String>
   da2a8:	4621      	mov	r1, r4
   da2aa:	f003 fa20 	bl	dd6ee <_ZplRK15StringSumHelperPKc>
   da2ae:	4601      	mov	r1, r0
   da2b0:	a802      	add	r0, sp, #8
   da2b2:	f003 f9c3 	bl	dd63c <_ZN6StringC1ERKS_>
   da2b6:	a80a      	add	r0, sp, #40	; 0x28
   da2b8:	f003 f92a 	bl	dd510 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da2bc:	a806      	add	r0, sp, #24
   da2be:	f003 f927 	bl	dd510 <_ZN6StringD1Ev>
                        unlink(path);
   da2c2:	9802      	ldr	r0, [sp, #8]
   da2c4:	f004 fdd2 	bl	dee6c <unlink>
                        _log.trace("removed %s", path.c_str());
   da2c8:	4640      	mov	r0, r8
   da2ca:	9a02      	ldr	r2, [sp, #8]
   da2cc:	4649      	mov	r1, r9
   da2ce:	f7fb fbed 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   da2d2:	a802      	add	r0, sp, #8
   da2d4:	f003 f91c 	bl	dd510 <_ZN6StringD1Ev>
                    continue;
   da2d8:	e7c6      	b.n	da268 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   da2da:	4630      	mov	r0, r6
   da2dc:	f000 fbea 	bl	daab4 <closedir>
}
   da2e0:	b00e      	add	sp, #56	; 0x38
   da2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   da2e6:	460a      	mov	r2, r1
   da2e8:	4601      	mov	r1, r0
   da2ea:	a80a      	add	r0, sp, #40	; 0x28
   da2ec:	f7ff ff6c 	bl	da1c8 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   da2f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   da2f2:	f004 fdbb 	bl	dee6c <unlink>
        _log.trace("removed %s", path.c_str());
   da2f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   da2f8:	4903      	ldr	r1, [pc, #12]	; (da308 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   da2fa:	4804      	ldr	r0, [pc, #16]	; (da30c <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   da2fc:	f7fb fbd6 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   da300:	a80a      	add	r0, sp, #40	; 0x28
   da302:	f003 f905 	bl	dd510 <_ZN6StringD1Ev>
}
   da306:	e7eb      	b.n	da2e0 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   da308:	000e0163 	.word	0x000e0163
   da30c:	2003e494 	.word	0x2003e494
   da310:	000e0161 	.word	0x000e0161

000da314 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   da314:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   da316:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   da318:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   da31a:	b163      	cbz	r3, da336 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   da31c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   da31e:	6945      	ldr	r5, [r0, #20]
   da320:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   da322:	42ae      	cmp	r6, r5
   da324:	d904      	bls.n	da330 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   da326:	f855 0b04 	ldr.w	r0, [r5], #4
   da32a:	f7f9 feb8 	bl	d409e <_ZdlPv>
   da32e:	e7f8      	b.n	da322 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   da330:	6820      	ldr	r0, [r4, #0]
   da332:	f7f9 feb4 	bl	d409e <_ZdlPv>
    }
   da336:	4620      	mov	r0, r4
   da338:	bd70      	pop	{r4, r5, r6, pc}
	...

000da33c <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   da33c:	b510      	push	{r4, lr}
   da33e:	4b09      	ldr	r3, [pc, #36]	; (da364 <_ZN14SequentialFileD1Ev+0x28>)
   da340:	4604      	mov	r4, r0
   da342:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   da346:	f7ff ffe5 	bl	da314 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   da34a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   da34e:	f003 f8df 	bl	dd510 <_ZN6StringD1Ev>
   da352:	f104 0014 	add.w	r0, r4, #20
   da356:	f003 f8db 	bl	dd510 <_ZN6StringD1Ev>
   da35a:	1d20      	adds	r0, r4, #4
   da35c:	f003 f8d8 	bl	dd510 <_ZN6StringD1Ev>
}
   da360:	4620      	mov	r0, r4
   da362:	bd10      	pop	{r4, pc}
   da364:	000e025c 	.word	0x000e025c

000da368 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   da368:	b510      	push	{r4, lr}
   da36a:	4604      	mov	r4, r0
}
   da36c:	f7ff ffe6 	bl	da33c <_ZN14SequentialFileD1Ev>
   da370:	4620      	mov	r0, r4
   da372:	2168      	movs	r1, #104	; 0x68
   da374:	f003 fef6 	bl	de164 <_ZdlPvj>
   da378:	4620      	mov	r0, r4
   da37a:	bd10      	pop	{r4, pc}

000da37c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   da37c:	68c3      	ldr	r3, [r0, #12]
   da37e:	68ca      	ldr	r2, [r1, #12]
   da380:	1a9b      	subs	r3, r3, r2
   da382:	109b      	asrs	r3, r3, #2
   da384:	1e5a      	subs	r2, r3, #1
   da386:	e9d0 3000 	ldrd	r3, r0, [r0]
   da38a:	1a1b      	subs	r3, r3, r0
   da38c:	109b      	asrs	r3, r3, #2
   da38e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   da392:	6888      	ldr	r0, [r1, #8]
   da394:	680a      	ldr	r2, [r1, #0]
   da396:	1a80      	subs	r0, r0, r2
    }
   da398:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   da39c:	4770      	bx	lr
	...

000da3a0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   da3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da3a4:	4604      	mov	r4, r0
   da3a6:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   da3a8:	f100 0108 	add.w	r1, r0, #8
   da3ac:	3018      	adds	r0, #24
   da3ae:	f7ff ffe5 	bl	da37c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   da3b2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   da3b6:	4298      	cmp	r0, r3
   da3b8:	d102      	bne.n	da3c0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   da3ba:	4837      	ldr	r0, [pc, #220]	; (da498 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   da3bc:	f003 fedb 	bl	de176 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   da3c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   da3c2:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   da3c4:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   da3c6:	1a11      	subs	r1, r2, r0
   da3c8:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   da3cc:	2901      	cmp	r1, #1
   da3ce:	d821      	bhi.n	da414 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   da3d0:	6961      	ldr	r1, [r4, #20]
   da3d2:	1a57      	subs	r7, r2, r1
   da3d4:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   da3d6:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   da3d8:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   da3dc:	d936      	bls.n	da44c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   da3de:	1b5d      	subs	r5, r3, r5
   da3e0:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   da3e2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   da3e6:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   da3e8:	42a9      	cmp	r1, r5
   da3ea:	eba3 0201 	sub.w	r2, r3, r1
   da3ee:	d927      	bls.n	da440 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   da3f0:	4299      	cmp	r1, r3
   da3f2:	d002      	beq.n	da3fa <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   da3f4:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   da3f6:	f004 fb4f 	bl	dea98 <memmove>
	_M_node = __new_node;
   da3fa:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   da3fc:	682b      	ldr	r3, [r5, #0]
   da3fe:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   da400:	f503 7300 	add.w	r3, r3, #512	; 0x200
   da404:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   da406:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   da408:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   da40a:	59eb      	ldr	r3, [r5, r7]
   da40c:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   da40e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   da412:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da414:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   da418:	6a65      	ldr	r5, [r4, #36]	; 0x24
   da41a:	f7f9 fe3c 	bl	d4096 <_Znwj>
   da41e:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   da420:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da422:	b113      	cbz	r3, da42a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   da424:	f8d8 2000 	ldr.w	r2, [r8]
   da428:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   da42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da42c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   da42e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   da430:	685b      	ldr	r3, [r3, #4]
   da432:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   da434:	f503 7200 	add.w	r2, r3, #512	; 0x200
   da438:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   da43a:	61a3      	str	r3, [r4, #24]
      }
   da43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   da440:	4299      	cmp	r1, r3
   da442:	d0da      	beq.n	da3fa <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   da444:	1d38      	adds	r0, r7, #4
   da446:	1a80      	subs	r0, r0, r2
   da448:	4428      	add	r0, r5
   da44a:	e7d4      	b.n	da3f6 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   da44c:	f103 0902 	add.w	r9, r3, #2
   da450:	2b01      	cmp	r3, #1
   da452:	bf2c      	ite	cs
   da454:	4499      	addcs	r9, r3
   da456:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   da45a:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   da45e:	d301      	bcc.n	da464 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   da460:	f003 fe86 	bl	de170 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da464:	ea4f 0089 	mov.w	r0, r9, lsl #2
   da468:	f7f9 fe15 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   da46c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   da46e:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   da470:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   da474:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   da476:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   da478:	4291      	cmp	r1, r2
   da47a:	4682      	mov	sl, r0
   da47c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   da480:	d003      	beq.n	da48a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   da482:	1a52      	subs	r2, r2, r1
   da484:	4628      	mov	r0, r5
   da486:	f004 fb07 	bl	dea98 <memmove>
	::operator delete(__p);
   da48a:	6820      	ldr	r0, [r4, #0]
   da48c:	f7f9 fe07 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   da490:	e9c4 a900 	strd	sl, r9, [r4]
   da494:	e7b1      	b.n	da3fa <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   da496:	bf00      	nop
   da498:	000dfde5 	.word	0x000dfde5

000da49c <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   da49c:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   da49e:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   da4a0:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   da4a2:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   da4a4:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   da4a6:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   da4a8:	d006      	beq.n	da4b8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da4aa:	b10a      	cbz	r2, da4b0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   da4ac:	6809      	ldr	r1, [r1, #0]
   da4ae:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   da4b0:	699a      	ldr	r2, [r3, #24]
   da4b2:	3204      	adds	r2, #4
   da4b4:	619a      	str	r2, [r3, #24]
      }
   da4b6:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   da4b8:	f7ff ff72 	bl	da3a0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   da4bc:	e7fb      	b.n	da4b6 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000da4c0 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   da4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   da4c4:	68c3      	ldr	r3, [r0, #12]
   da4c6:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   da4c8:	b086      	sub	sp, #24
   da4ca:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   da4cc:	d808      	bhi.n	da4e0 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   da4ce:	4934      	ldr	r1, [pc, #208]	; (da5a0 <_ZN14SequentialFile7scanDirEv+0xe0>)
   da4d0:	4834      	ldr	r0, [pc, #208]	; (da5a4 <_ZN14SequentialFile7scanDirEv+0xe4>)
   da4d2:	f7fb fb02 	bl	d5ada <_ZNK5spark6Logger5errorEPKcz>
        return false;
   da4d6:	2600      	movs	r6, #0
}
   da4d8:	4630      	mov	r0, r6
   da4da:	b006      	add	sp, #24
   da4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   da4e0:	6840      	ldr	r0, [r0, #4]
   da4e2:	f7ff fe05 	bl	da0f0 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   da4e6:	4606      	mov	r6, r0
   da4e8:	2800      	cmp	r0, #0
   da4ea:	d0f4      	beq.n	da4d6 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   da4ec:	6963      	ldr	r3, [r4, #20]
   da4ee:	6862      	ldr	r2, [r4, #4]
   da4f0:	492d      	ldr	r1, [pc, #180]	; (da5a8 <_ZN14SequentialFile7scanDirEv+0xe8>)
   da4f2:	482c      	ldr	r0, [pc, #176]	; (da5a4 <_ZN14SequentialFile7scanDirEv+0xe4>)
   da4f4:	f7fb fada 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   da4f8:	6860      	ldr	r0, [r4, #4]
   da4fa:	f000 facb 	bl	daa94 <opendir>
    if (!dir) {
   da4fe:	4607      	mov	r7, r0
   da500:	2800      	cmp	r0, #0
   da502:	d0e8      	beq.n	da4d6 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   da504:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   da506:	f8df 90a4 	ldr.w	r9, [pc, #164]	; da5ac <_ZN14SequentialFile7scanDirEv+0xec>
   da50a:	f8df 8098 	ldr.w	r8, [pc, #152]	; da5a4 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   da50e:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   da510:	4638      	mov	r0, r7
   da512:	f000 fac7 	bl	daaa4 <readdir>
        if (!ent) {
   da516:	4605      	mov	r5, r0
   da518:	2800      	cmp	r0, #0
   da51a:	d039      	beq.n	da590 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   da51c:	7a83      	ldrb	r3, [r0, #10]
   da51e:	2b08      	cmp	r3, #8
   da520:	d1f6      	bne.n	da510 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   da522:	350b      	adds	r5, #11
   da524:	6961      	ldr	r1, [r4, #20]
   da526:	aa01      	add	r2, sp, #4
   da528:	4628      	mov	r0, r5
   da52a:	f000 fcdd 	bl	daee8 <sscanf>
   da52e:	2801      	cmp	r0, #1
   da530:	d1ee      	bne.n	da510 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   da532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   da534:	b17b      	cbz	r3, da556 <_ZN14SequentialFile7scanDirEv+0x96>
   da536:	4629      	mov	r1, r5
   da538:	a802      	add	r0, sp, #8
   da53a:	f003 f834 	bl	dd5a6 <_ZN6StringC1EPKc>
   da53e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   da542:	a802      	add	r0, sp, #8
   da544:	f003 f8fa 	bl	dd73c <_ZNK6String8endsWithERKS_>
   da548:	4682      	mov	sl, r0
   da54a:	a802      	add	r0, sp, #8
   da54c:	f002 ffe0 	bl	dd510 <_ZN6StringD1Ev>
   da550:	f1ba 0f00 	cmp.w	sl, #0
   da554:	d0dc      	beq.n	da510 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   da556:	6823      	ldr	r3, [r4, #0]
   da558:	4629      	mov	r1, r5
   da55a:	689b      	ldr	r3, [r3, #8]
   da55c:	4620      	mov	r0, r4
   da55e:	4798      	blx	r3
   da560:	2800      	cmp	r0, #0
   da562:	d0d5      	beq.n	da510 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   da564:	9a01      	ldr	r2, [sp, #4]
   da566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da568:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   da56a:	bfb8      	it	lt
   da56c:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   da56e:	462b      	mov	r3, r5
   da570:	4649      	mov	r1, r9
   da572:	4640      	mov	r0, r8
   da574:	f7fb fa9a 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   da578:	4620      	mov	r0, r4
   da57a:	f7ff fda9 	bl	da0d0 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   da57e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   da582:	a901      	add	r1, sp, #4
   da584:	f7ff ff8a 	bl	da49c <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   da588:	4620      	mov	r0, r4
   da58a:	f7ff fdad 	bl	da0e8 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   da58e:	e7bf      	b.n	da510 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   da590:	4638      	mov	r0, r7
   da592:	f000 fa8f 	bl	daab4 <closedir>
    scanDirCompleted = true;
   da596:	2301      	movs	r3, #1
   da598:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   da59c:	e79c      	b.n	da4d8 <_ZN14SequentialFile7scanDirEv+0x18>
   da59e:	bf00      	nop
   da5a0:	000e01e1 	.word	0x000e01e1
   da5a4:	2003e494 	.word	0x2003e494
   da5a8:	000e01f6 	.word	0x000e01f6
   da5ac:	000e0212 	.word	0x000e0212

000da5b0 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   da5b0:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   da5b2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   da5b6:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   da5b8:	b90b      	cbnz	r3, da5be <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   da5ba:	f7ff ff81 	bl	da4c0 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   da5be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   da5c0:	3001      	adds	r0, #1
   da5c2:	63a0      	str	r0, [r4, #56]	; 0x38
}
   da5c4:	bd10      	pop	{r4, pc}
	...

000da5c8 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   da5c8:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   da5ca:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   da5ce:	4604      	mov	r4, r0
   da5d0:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   da5d2:	b90b      	cbnz	r3, da5d8 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   da5d4:	f7ff ff74 	bl	da4c0 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   da5d8:	4620      	mov	r0, r4
   da5da:	f7ff fd79 	bl	da0d0 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   da5de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   da5e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
   da5e2:	4293      	cmp	r3, r2
   da5e4:	d01e      	beq.n	da624 <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   da5e6:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   da5e8:	b12e      	cbz	r6, da5f6 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   da5ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
   da5ec:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   da5ee:	4293      	cmp	r3, r2
   da5f0:	d00c      	beq.n	da60c <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   da5f2:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   da5f4:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   da5f6:	4620      	mov	r0, r4
   da5f8:	f7ff fd76 	bl	da0e8 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   da5fc:	b125      	cbz	r5, da608 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   da5fe:	490a      	ldr	r1, [pc, #40]	; (da628 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   da600:	480a      	ldr	r0, [pc, #40]	; (da62c <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   da602:	462a      	mov	r2, r5
   da604:	f7fb fa52 	bl	d5aac <_ZNK5spark6Logger5traceEPKcz>
}
   da608:	4628      	mov	r0, r5
   da60a:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   da60c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   da60e:	f7f9 fd46 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   da612:	6d63      	ldr	r3, [r4, #84]	; 0x54
   da614:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   da616:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   da618:	685b      	ldr	r3, [r3, #4]
   da61a:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   da61c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   da620:	6522      	str	r2, [r4, #80]	; 0x50
   da622:	e7e7      	b.n	da5f4 <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   da624:	2500      	movs	r5, #0
   da626:	e7e6      	b.n	da5f6 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   da628:	000e0228 	.word	0x000e0228
   da62c:	2003e494 	.word	0x2003e494

000da630 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   da630:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   da632:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   da636:	9101      	str	r1, [sp, #4]
   da638:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   da63a:	b90b      	cbnz	r3, da640 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   da63c:	f7ff ff40 	bl	da4c0 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   da640:	9b01      	ldr	r3, [sp, #4]
   da642:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   da644:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   da646:	bfb8      	it	lt
   da648:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   da64a:	4620      	mov	r0, r4
   da64c:	f7ff fd40 	bl	da0d0 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   da650:	a901      	add	r1, sp, #4
   da652:	f104 0040 	add.w	r0, r4, #64	; 0x40
   da656:	f7ff ff21 	bl	da49c <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   da65a:	4620      	mov	r0, r4
   da65c:	f7ff fd44 	bl	da0e8 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   da660:	b002      	add	sp, #8
   da662:	bd10      	pop	{r4, pc}

000da664 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   da664:	b538      	push	{r3, r4, r5, lr}
   da666:	4604      	mov	r4, r0
    queueMutexLock();
   da668:	f7ff fd32 	bl	da0d0 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   da66c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   da670:	f104 0058 	add.w	r0, r4, #88	; 0x58
   da674:	f7ff fe82 	bl	da37c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   da678:	4605      	mov	r5, r0
    queueMutexUnlock();
   da67a:	4620      	mov	r0, r4
   da67c:	f7ff fd34 	bl	da0e8 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   da680:	4628      	mov	r0, r5
   da682:	bd38      	pop	{r3, r4, r5, pc}

000da684 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   da684:	4b01      	ldr	r3, [pc, #4]	; (da68c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   da686:	4a02      	ldr	r2, [pc, #8]	; (da690 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   da688:	601a      	str	r2, [r3, #0]
}
   da68a:	4770      	bx	lr
   da68c:	2003e494 	.word	0x2003e494
   da690:	000e0245 	.word	0x000e0245

000da694 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   da694:	b508      	push	{r3, lr}
   da696:	4b02      	ldr	r3, [pc, #8]	; (da6a0 <cellular_signal+0xc>)
   da698:	681b      	ldr	r3, [r3, #0]
   da69a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da69c:	9301      	str	r3, [sp, #4]
   da69e:	bd08      	pop	{r3, pc}
   da6a0:	00030274 	.word	0x00030274

000da6a4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   da6a4:	b508      	push	{r3, lr}
   da6a6:	4b02      	ldr	r3, [pc, #8]	; (da6b0 <os_thread_create+0xc>)
   da6a8:	681b      	ldr	r3, [r3, #0]
   da6aa:	685b      	ldr	r3, [r3, #4]
   da6ac:	9301      	str	r3, [sp, #4]
   da6ae:	bd08      	pop	{r3, pc}
   da6b0:	00030248 	.word	0x00030248

000da6b4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   da6b4:	b508      	push	{r3, lr}
   da6b6:	4b02      	ldr	r3, [pc, #8]	; (da6c0 <os_thread_is_current+0xc>)
   da6b8:	681b      	ldr	r3, [r3, #0]
   da6ba:	689b      	ldr	r3, [r3, #8]
   da6bc:	9301      	str	r3, [sp, #4]
   da6be:	bd08      	pop	{r3, pc}
   da6c0:	00030248 	.word	0x00030248

000da6c4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   da6c4:	b508      	push	{r3, lr}
   da6c6:	4b02      	ldr	r3, [pc, #8]	; (da6d0 <os_thread_join+0xc>)
   da6c8:	681b      	ldr	r3, [r3, #0]
   da6ca:	691b      	ldr	r3, [r3, #16]
   da6cc:	9301      	str	r3, [sp, #4]
   da6ce:	bd08      	pop	{r3, pc}
   da6d0:	00030248 	.word	0x00030248

000da6d4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   da6d4:	b508      	push	{r3, lr}
   da6d6:	4b02      	ldr	r3, [pc, #8]	; (da6e0 <os_thread_cleanup+0xc>)
   da6d8:	681b      	ldr	r3, [r3, #0]
   da6da:	695b      	ldr	r3, [r3, #20]
   da6dc:	9301      	str	r3, [sp, #4]
   da6de:	bd08      	pop	{r3, pc}
   da6e0:	00030248 	.word	0x00030248

000da6e4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   da6e4:	b508      	push	{r3, lr}
   da6e6:	4b02      	ldr	r3, [pc, #8]	; (da6f0 <os_mutex_create+0xc>)
   da6e8:	681b      	ldr	r3, [r3, #0]
   da6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da6ec:	9301      	str	r3, [sp, #4]
   da6ee:	bd08      	pop	{r3, pc}
   da6f0:	00030248 	.word	0x00030248

000da6f4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   da6f4:	b508      	push	{r3, lr}
   da6f6:	4b02      	ldr	r3, [pc, #8]	; (da700 <os_mutex_lock+0xc>)
   da6f8:	681b      	ldr	r3, [r3, #0]
   da6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   da6fc:	9301      	str	r3, [sp, #4]
   da6fe:	bd08      	pop	{r3, pc}
   da700:	00030248 	.word	0x00030248

000da704 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   da704:	b508      	push	{r3, lr}
   da706:	4b02      	ldr	r3, [pc, #8]	; (da710 <os_mutex_unlock+0xc>)
   da708:	681b      	ldr	r3, [r3, #0]
   da70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da70c:	9301      	str	r3, [sp, #4]
   da70e:	bd08      	pop	{r3, pc}
   da710:	00030248 	.word	0x00030248

000da714 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   da714:	b508      	push	{r3, lr}
   da716:	4b02      	ldr	r3, [pc, #8]	; (da720 <os_mutex_recursive_create+0xc>)
   da718:	681b      	ldr	r3, [r3, #0]
   da71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da71c:	9301      	str	r3, [sp, #4]
   da71e:	bd08      	pop	{r3, pc}
   da720:	00030248 	.word	0x00030248

000da724 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   da724:	b508      	push	{r3, lr}
   da726:	4b02      	ldr	r3, [pc, #8]	; (da730 <os_mutex_recursive_destroy+0xc>)
   da728:	681b      	ldr	r3, [r3, #0]
   da72a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da72c:	9301      	str	r3, [sp, #4]
   da72e:	bd08      	pop	{r3, pc}
   da730:	00030248 	.word	0x00030248

000da734 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   da734:	b508      	push	{r3, lr}
   da736:	4b02      	ldr	r3, [pc, #8]	; (da740 <os_mutex_recursive_lock+0xc>)
   da738:	681b      	ldr	r3, [r3, #0]
   da73a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da73c:	9301      	str	r3, [sp, #4]
   da73e:	bd08      	pop	{r3, pc}
   da740:	00030248 	.word	0x00030248

000da744 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   da744:	b508      	push	{r3, lr}
   da746:	4b02      	ldr	r3, [pc, #8]	; (da750 <os_mutex_recursive_unlock+0xc>)
   da748:	681b      	ldr	r3, [r3, #0]
   da74a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da74c:	9301      	str	r3, [sp, #4]
   da74e:	bd08      	pop	{r3, pc}
   da750:	00030248 	.word	0x00030248

000da754 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   da754:	b508      	push	{r3, lr}
   da756:	4b02      	ldr	r3, [pc, #8]	; (da760 <os_thread_exit+0xc>)
   da758:	681b      	ldr	r3, [r3, #0]
   da75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   da75c:	9301      	str	r3, [sp, #4]
   da75e:	bd08      	pop	{r3, pc}
   da760:	00030248 	.word	0x00030248

000da764 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   da764:	b508      	push	{r3, lr}
   da766:	4b02      	ldr	r3, [pc, #8]	; (da770 <HAL_Feature_Set+0xc>)
   da768:	681b      	ldr	r3, [r3, #0]
   da76a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   da76c:	9301      	str	r3, [sp, #4]
   da76e:	bd08      	pop	{r3, pc}
   da770:	00030234 	.word	0x00030234

000da774 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   da774:	b508      	push	{r3, lr}
   da776:	4b02      	ldr	r3, [pc, #8]	; (da780 <HAL_RNG_GetRandomNumber+0xc>)
   da778:	681b      	ldr	r3, [r3, #0]
   da77a:	685b      	ldr	r3, [r3, #4]
   da77c:	9301      	str	r3, [sp, #4]
   da77e:	bd08      	pop	{r3, pc}
   da780:	00030218 	.word	0x00030218

000da784 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   da784:	b508      	push	{r3, lr}
   da786:	4b02      	ldr	r3, [pc, #8]	; (da790 <HAL_Delay_Milliseconds+0xc>)
   da788:	681b      	ldr	r3, [r3, #0]
   da78a:	689b      	ldr	r3, [r3, #8]
   da78c:	9301      	str	r3, [sp, #4]
   da78e:	bd08      	pop	{r3, pc}
   da790:	00030218 	.word	0x00030218

000da794 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   da794:	b508      	push	{r3, lr}
   da796:	4b02      	ldr	r3, [pc, #8]	; (da7a0 <HAL_Delay_Microseconds+0xc>)
   da798:	681b      	ldr	r3, [r3, #0]
   da79a:	68db      	ldr	r3, [r3, #12]
   da79c:	9301      	str	r3, [sp, #4]
   da79e:	bd08      	pop	{r3, pc}
   da7a0:	00030218 	.word	0x00030218

000da7a4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   da7a4:	b508      	push	{r3, lr}
   da7a6:	4b02      	ldr	r3, [pc, #8]	; (da7b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   da7a8:	681b      	ldr	r3, [r3, #0]
   da7aa:	695b      	ldr	r3, [r3, #20]
   da7ac:	9301      	str	r3, [sp, #4]
   da7ae:	bd08      	pop	{r3, pc}
   da7b0:	00030218 	.word	0x00030218

000da7b4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   da7b4:	b508      	push	{r3, lr}
   da7b6:	4b02      	ldr	r3, [pc, #8]	; (da7c0 <hal_rtc_time_is_valid+0xc>)
   da7b8:	681b      	ldr	r3, [r3, #0]
   da7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da7bc:	9301      	str	r3, [sp, #4]
   da7be:	bd08      	pop	{r3, pc}
   da7c0:	00030218 	.word	0x00030218

000da7c4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   da7c4:	b508      	push	{r3, lr}
   da7c6:	4b02      	ldr	r3, [pc, #8]	; (da7d0 <hal_timer_millis+0xc>)
   da7c8:	681b      	ldr	r3, [r3, #0]
   da7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   da7cc:	9301      	str	r3, [sp, #4]
   da7ce:	bd08      	pop	{r3, pc}
   da7d0:	00030218 	.word	0x00030218

000da7d4 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   da7d4:	b508      	push	{r3, lr}
   da7d6:	4b02      	ldr	r3, [pc, #8]	; (da7e0 <hal_rtc_get_time+0xc>)
   da7d8:	681b      	ldr	r3, [r3, #0]
   da7da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   da7dc:	9301      	str	r3, [sp, #4]
   da7de:	bd08      	pop	{r3, pc}
   da7e0:	00030218 	.word	0x00030218

000da7e4 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   da7e4:	b508      	push	{r3, lr}
   da7e6:	4b02      	ldr	r3, [pc, #8]	; (da7f0 <hal_rtc_set_time+0xc>)
   da7e8:	681b      	ldr	r3, [r3, #0]
   da7ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   da7ec:	9301      	str	r3, [sp, #4]
   da7ee:	bd08      	pop	{r3, pc}
   da7f0:	00030218 	.word	0x00030218

000da7f4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   da7f4:	b508      	push	{r3, lr}
   da7f6:	4b02      	ldr	r3, [pc, #8]	; (da800 <HAL_Validate_Pin_Function+0xc>)
   da7f8:	681b      	ldr	r3, [r3, #0]
   da7fa:	685b      	ldr	r3, [r3, #4]
   da7fc:	9301      	str	r3, [sp, #4]
   da7fe:	bd08      	pop	{r3, pc}
   da800:	0003022c 	.word	0x0003022c

000da804 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   da804:	b508      	push	{r3, lr}
   da806:	4b02      	ldr	r3, [pc, #8]	; (da810 <HAL_Pin_Mode+0xc>)
   da808:	681b      	ldr	r3, [r3, #0]
   da80a:	689b      	ldr	r3, [r3, #8]
   da80c:	9301      	str	r3, [sp, #4]
   da80e:	bd08      	pop	{r3, pc}
   da810:	0003022c 	.word	0x0003022c

000da814 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   da814:	b508      	push	{r3, lr}
   da816:	4b02      	ldr	r3, [pc, #8]	; (da820 <HAL_Get_Pin_Mode+0xc>)
   da818:	681b      	ldr	r3, [r3, #0]
   da81a:	68db      	ldr	r3, [r3, #12]
   da81c:	9301      	str	r3, [sp, #4]
   da81e:	bd08      	pop	{r3, pc}
   da820:	0003022c 	.word	0x0003022c

000da824 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   da824:	b508      	push	{r3, lr}
   da826:	4b02      	ldr	r3, [pc, #8]	; (da830 <HAL_GPIO_Write+0xc>)
   da828:	681b      	ldr	r3, [r3, #0]
   da82a:	691b      	ldr	r3, [r3, #16]
   da82c:	9301      	str	r3, [sp, #4]
   da82e:	bd08      	pop	{r3, pc}
   da830:	0003022c 	.word	0x0003022c

000da834 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   da834:	b508      	push	{r3, lr}
   da836:	4b02      	ldr	r3, [pc, #8]	; (da840 <HAL_GPIO_Read+0xc>)
   da838:	681b      	ldr	r3, [r3, #0]
   da83a:	695b      	ldr	r3, [r3, #20]
   da83c:	9301      	str	r3, [sp, #4]
   da83e:	bd08      	pop	{r3, pc}
   da840:	0003022c 	.word	0x0003022c

000da844 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   da844:	b508      	push	{r3, lr}
   da846:	4b02      	ldr	r3, [pc, #8]	; (da850 <HAL_Interrupts_Attach+0xc>)
   da848:	681b      	ldr	r3, [r3, #0]
   da84a:	699b      	ldr	r3, [r3, #24]
   da84c:	9301      	str	r3, [sp, #4]
   da84e:	bd08      	pop	{r3, pc}
   da850:	0003022c 	.word	0x0003022c

000da854 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   da854:	b508      	push	{r3, lr}
   da856:	4b02      	ldr	r3, [pc, #8]	; (da860 <HAL_Interrupts_Detach+0xc>)
   da858:	681b      	ldr	r3, [r3, #0]
   da85a:	69db      	ldr	r3, [r3, #28]
   da85c:	9301      	str	r3, [sp, #4]
   da85e:	bd08      	pop	{r3, pc}
   da860:	0003022c 	.word	0x0003022c

000da864 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   da864:	b508      	push	{r3, lr}
   da866:	4b02      	ldr	r3, [pc, #8]	; (da870 <hal_adc_read+0xc>)
   da868:	681b      	ldr	r3, [r3, #0]
   da86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da86c:	9301      	str	r3, [sp, #4]
   da86e:	bd08      	pop	{r3, pc}
   da870:	0003022c 	.word	0x0003022c

000da874 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   da874:	b508      	push	{r3, lr}
   da876:	4b02      	ldr	r3, [pc, #8]	; (da880 <hal_i2c_begin+0xc>)
   da878:	681b      	ldr	r3, [r3, #0]
   da87a:	68db      	ldr	r3, [r3, #12]
   da87c:	9301      	str	r3, [sp, #4]
   da87e:	bd08      	pop	{r3, pc}
   da880:	00030228 	.word	0x00030228

000da884 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   da884:	b508      	push	{r3, lr}
   da886:	4b02      	ldr	r3, [pc, #8]	; (da890 <hal_i2c_begin_transmission+0xc>)
   da888:	681b      	ldr	r3, [r3, #0]
   da88a:	699b      	ldr	r3, [r3, #24]
   da88c:	9301      	str	r3, [sp, #4]
   da88e:	bd08      	pop	{r3, pc}
   da890:	00030228 	.word	0x00030228

000da894 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   da894:	b508      	push	{r3, lr}
   da896:	4b02      	ldr	r3, [pc, #8]	; (da8a0 <hal_i2c_end_transmission+0xc>)
   da898:	681b      	ldr	r3, [r3, #0]
   da89a:	69db      	ldr	r3, [r3, #28]
   da89c:	9301      	str	r3, [sp, #4]
   da89e:	bd08      	pop	{r3, pc}
   da8a0:	00030228 	.word	0x00030228

000da8a4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   da8a4:	b508      	push	{r3, lr}
   da8a6:	4b02      	ldr	r3, [pc, #8]	; (da8b0 <hal_i2c_write+0xc>)
   da8a8:	681b      	ldr	r3, [r3, #0]
   da8aa:	6a1b      	ldr	r3, [r3, #32]
   da8ac:	9301      	str	r3, [sp, #4]
   da8ae:	bd08      	pop	{r3, pc}
   da8b0:	00030228 	.word	0x00030228

000da8b4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   da8b4:	b508      	push	{r3, lr}
   da8b6:	4b02      	ldr	r3, [pc, #8]	; (da8c0 <hal_i2c_available+0xc>)
   da8b8:	681b      	ldr	r3, [r3, #0]
   da8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da8bc:	9301      	str	r3, [sp, #4]
   da8be:	bd08      	pop	{r3, pc}
   da8c0:	00030228 	.word	0x00030228

000da8c4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   da8c4:	b508      	push	{r3, lr}
   da8c6:	4b02      	ldr	r3, [pc, #8]	; (da8d0 <hal_i2c_read+0xc>)
   da8c8:	681b      	ldr	r3, [r3, #0]
   da8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da8cc:	9301      	str	r3, [sp, #4]
   da8ce:	bd08      	pop	{r3, pc}
   da8d0:	00030228 	.word	0x00030228

000da8d4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   da8d4:	b508      	push	{r3, lr}
   da8d6:	4b02      	ldr	r3, [pc, #8]	; (da8e0 <hal_i2c_peek+0xc>)
   da8d8:	681b      	ldr	r3, [r3, #0]
   da8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da8dc:	9301      	str	r3, [sp, #4]
   da8de:	bd08      	pop	{r3, pc}
   da8e0:	00030228 	.word	0x00030228

000da8e4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   da8e4:	b508      	push	{r3, lr}
   da8e6:	4b02      	ldr	r3, [pc, #8]	; (da8f0 <hal_i2c_flush+0xc>)
   da8e8:	681b      	ldr	r3, [r3, #0]
   da8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da8ec:	9301      	str	r3, [sp, #4]
   da8ee:	bd08      	pop	{r3, pc}
   da8f0:	00030228 	.word	0x00030228

000da8f4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   da8f4:	b508      	push	{r3, lr}
   da8f6:	4b02      	ldr	r3, [pc, #8]	; (da900 <hal_i2c_is_enabled+0xc>)
   da8f8:	681b      	ldr	r3, [r3, #0]
   da8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da8fc:	9301      	str	r3, [sp, #4]
   da8fe:	bd08      	pop	{r3, pc}
   da900:	00030228 	.word	0x00030228

000da904 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   da904:	b508      	push	{r3, lr}
   da906:	4b02      	ldr	r3, [pc, #8]	; (da910 <hal_i2c_init+0xc>)
   da908:	681b      	ldr	r3, [r3, #0]
   da90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da90c:	9301      	str	r3, [sp, #4]
   da90e:	bd08      	pop	{r3, pc}
   da910:	00030228 	.word	0x00030228

000da914 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   da914:	b508      	push	{r3, lr}
   da916:	4b02      	ldr	r3, [pc, #8]	; (da920 <hal_i2c_lock+0xc>)
   da918:	681b      	ldr	r3, [r3, #0]
   da91a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da91c:	9301      	str	r3, [sp, #4]
   da91e:	bd08      	pop	{r3, pc}
   da920:	00030228 	.word	0x00030228

000da924 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   da924:	b508      	push	{r3, lr}
   da926:	4b02      	ldr	r3, [pc, #8]	; (da930 <hal_i2c_unlock+0xc>)
   da928:	681b      	ldr	r3, [r3, #0]
   da92a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da92c:	9301      	str	r3, [sp, #4]
   da92e:	bd08      	pop	{r3, pc}
   da930:	00030228 	.word	0x00030228

000da934 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   da934:	b508      	push	{r3, lr}
   da936:	4b02      	ldr	r3, [pc, #8]	; (da940 <hal_i2c_request_ex+0xc>)
   da938:	681b      	ldr	r3, [r3, #0]
   da93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da93c:	9301      	str	r3, [sp, #4]
   da93e:	bd08      	pop	{r3, pc}
   da940:	00030228 	.word	0x00030228

000da944 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   da944:	b508      	push	{r3, lr}
   da946:	4b02      	ldr	r3, [pc, #8]	; (da950 <inet_inet_ntop+0xc>)
   da948:	681b      	ldr	r3, [r3, #0]
   da94a:	695b      	ldr	r3, [r3, #20]
   da94c:	9301      	str	r3, [sp, #4]
   da94e:	bd08      	pop	{r3, pc}
   da950:	00030264 	.word	0x00030264

000da954 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   da954:	b508      	push	{r3, lr}
   da956:	4b02      	ldr	r3, [pc, #8]	; (da960 <netdb_freeaddrinfo+0xc>)
   da958:	681b      	ldr	r3, [r3, #0]
   da95a:	689b      	ldr	r3, [r3, #8]
   da95c:	9301      	str	r3, [sp, #4]
   da95e:	bd08      	pop	{r3, pc}
   da960:	00030268 	.word	0x00030268

000da964 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   da964:	b508      	push	{r3, lr}
   da966:	4b02      	ldr	r3, [pc, #8]	; (da970 <netdb_getaddrinfo+0xc>)
   da968:	681b      	ldr	r3, [r3, #0]
   da96a:	68db      	ldr	r3, [r3, #12]
   da96c:	9301      	str	r3, [sp, #4]
   da96e:	bd08      	pop	{r3, pc}
   da970:	00030268 	.word	0x00030268

000da974 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   da974:	b508      	push	{r3, lr}
   da976:	4b02      	ldr	r3, [pc, #8]	; (da980 <hal_spi_begin+0xc>)
   da978:	681b      	ldr	r3, [r3, #0]
   da97a:	681b      	ldr	r3, [r3, #0]
   da97c:	9301      	str	r3, [sp, #4]
   da97e:	bd08      	pop	{r3, pc}
   da980:	00030230 	.word	0x00030230

000da984 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   da984:	b508      	push	{r3, lr}
   da986:	4b02      	ldr	r3, [pc, #8]	; (da990 <hal_spi_end+0xc>)
   da988:	681b      	ldr	r3, [r3, #0]
   da98a:	685b      	ldr	r3, [r3, #4]
   da98c:	9301      	str	r3, [sp, #4]
   da98e:	bd08      	pop	{r3, pc}
   da990:	00030230 	.word	0x00030230

000da994 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   da994:	b508      	push	{r3, lr}
   da996:	4b02      	ldr	r3, [pc, #8]	; (da9a0 <hal_spi_transfer+0xc>)
   da998:	681b      	ldr	r3, [r3, #0]
   da99a:	695b      	ldr	r3, [r3, #20]
   da99c:	9301      	str	r3, [sp, #4]
   da99e:	bd08      	pop	{r3, pc}
   da9a0:	00030230 	.word	0x00030230

000da9a4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   da9a4:	b508      	push	{r3, lr}
   da9a6:	4b02      	ldr	r3, [pc, #8]	; (da9b0 <hal_spi_init+0xc>)
   da9a8:	681b      	ldr	r3, [r3, #0]
   da9aa:	69db      	ldr	r3, [r3, #28]
   da9ac:	9301      	str	r3, [sp, #4]
   da9ae:	bd08      	pop	{r3, pc}
   da9b0:	00030230 	.word	0x00030230

000da9b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   da9b4:	b508      	push	{r3, lr}
   da9b6:	4b02      	ldr	r3, [pc, #8]	; (da9c0 <hal_spi_is_enabled+0xc>)
   da9b8:	681b      	ldr	r3, [r3, #0]
   da9ba:	6a1b      	ldr	r3, [r3, #32]
   da9bc:	9301      	str	r3, [sp, #4]
   da9be:	bd08      	pop	{r3, pc}
   da9c0:	00030230 	.word	0x00030230

000da9c4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   da9c4:	b508      	push	{r3, lr}
   da9c6:	4b02      	ldr	r3, [pc, #8]	; (da9d0 <hal_spi_info+0xc>)
   da9c8:	681b      	ldr	r3, [r3, #0]
   da9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da9cc:	9301      	str	r3, [sp, #4]
   da9ce:	bd08      	pop	{r3, pc}
   da9d0:	00030230 	.word	0x00030230

000da9d4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   da9d4:	b508      	push	{r3, lr}
   da9d6:	4b02      	ldr	r3, [pc, #8]	; (da9e0 <hal_spi_set_settings+0xc>)
   da9d8:	681b      	ldr	r3, [r3, #0]
   da9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   da9dc:	9301      	str	r3, [sp, #4]
   da9de:	bd08      	pop	{r3, pc}
   da9e0:	00030230 	.word	0x00030230

000da9e4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   da9e4:	b508      	push	{r3, lr}
   da9e6:	4b02      	ldr	r3, [pc, #8]	; (da9f0 <hal_spi_acquire+0xc>)
   da9e8:	681b      	ldr	r3, [r3, #0]
   da9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da9ec:	9301      	str	r3, [sp, #4]
   da9ee:	bd08      	pop	{r3, pc}
   da9f0:	00030230 	.word	0x00030230

000da9f4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   da9f4:	b508      	push	{r3, lr}
   da9f6:	4b02      	ldr	r3, [pc, #8]	; (daa00 <hal_spi_release+0xc>)
   da9f8:	681b      	ldr	r3, [r3, #0]
   da9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da9fc:	9301      	str	r3, [sp, #4]
   da9fe:	bd08      	pop	{r3, pc}
   daa00:	00030230 	.word	0x00030230

000daa04 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   daa04:	b508      	push	{r3, lr}
   daa06:	4b02      	ldr	r3, [pc, #8]	; (daa10 <_open+0xc>)
   daa08:	681b      	ldr	r3, [r3, #0]
   daa0a:	681b      	ldr	r3, [r3, #0]
   daa0c:	9301      	str	r3, [sp, #4]
   daa0e:	bd08      	pop	{r3, pc}
   daa10:	00030284 	.word	0x00030284

000daa14 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   daa14:	b508      	push	{r3, lr}
   daa16:	4b02      	ldr	r3, [pc, #8]	; (daa20 <_write+0xc>)
   daa18:	681b      	ldr	r3, [r3, #0]
   daa1a:	685b      	ldr	r3, [r3, #4]
   daa1c:	9301      	str	r3, [sp, #4]
   daa1e:	bd08      	pop	{r3, pc}
   daa20:	00030284 	.word	0x00030284

000daa24 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   daa24:	b508      	push	{r3, lr}
   daa26:	4b02      	ldr	r3, [pc, #8]	; (daa30 <_read+0xc>)
   daa28:	681b      	ldr	r3, [r3, #0]
   daa2a:	689b      	ldr	r3, [r3, #8]
   daa2c:	9301      	str	r3, [sp, #4]
   daa2e:	bd08      	pop	{r3, pc}
   daa30:	00030284 	.word	0x00030284

000daa34 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   daa34:	b508      	push	{r3, lr}
   daa36:	4b02      	ldr	r3, [pc, #8]	; (daa40 <_close+0xc>)
   daa38:	681b      	ldr	r3, [r3, #0]
   daa3a:	68db      	ldr	r3, [r3, #12]
   daa3c:	9301      	str	r3, [sp, #4]
   daa3e:	bd08      	pop	{r3, pc}
   daa40:	00030284 	.word	0x00030284

000daa44 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   daa44:	b508      	push	{r3, lr}
   daa46:	4b02      	ldr	r3, [pc, #8]	; (daa50 <_fstat+0xc>)
   daa48:	681b      	ldr	r3, [r3, #0]
   daa4a:	695b      	ldr	r3, [r3, #20]
   daa4c:	9301      	str	r3, [sp, #4]
   daa4e:	bd08      	pop	{r3, pc}
   daa50:	00030284 	.word	0x00030284

000daa54 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   daa54:	b508      	push	{r3, lr}
   daa56:	4b02      	ldr	r3, [pc, #8]	; (daa60 <_lseek+0xc>)
   daa58:	681b      	ldr	r3, [r3, #0]
   daa5a:	6a1b      	ldr	r3, [r3, #32]
   daa5c:	9301      	str	r3, [sp, #4]
   daa5e:	bd08      	pop	{r3, pc}
   daa60:	00030284 	.word	0x00030284

000daa64 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   daa64:	b508      	push	{r3, lr}
   daa66:	4b02      	ldr	r3, [pc, #8]	; (daa70 <stat+0xc>)
   daa68:	681b      	ldr	r3, [r3, #0]
   daa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   daa6c:	9301      	str	r3, [sp, #4]
   daa6e:	bd08      	pop	{r3, pc}
   daa70:	00030284 	.word	0x00030284

000daa74 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   daa74:	b508      	push	{r3, lr}
   daa76:	4b02      	ldr	r3, [pc, #8]	; (daa80 <mkdir+0xc>)
   daa78:	681b      	ldr	r3, [r3, #0]
   daa7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   daa7c:	9301      	str	r3, [sp, #4]
   daa7e:	bd08      	pop	{r3, pc}
   daa80:	00030284 	.word	0x00030284

000daa84 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   daa84:	b508      	push	{r3, lr}
   daa86:	4b02      	ldr	r3, [pc, #8]	; (daa90 <_unlink+0xc>)
   daa88:	681b      	ldr	r3, [r3, #0]
   daa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   daa8c:	9301      	str	r3, [sp, #4]
   daa8e:	bd08      	pop	{r3, pc}
   daa90:	00030284 	.word	0x00030284

000daa94 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   daa94:	b508      	push	{r3, lr}
   daa96:	4b02      	ldr	r3, [pc, #8]	; (daaa0 <opendir+0xc>)
   daa98:	681b      	ldr	r3, [r3, #0]
   daa9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   daa9c:	9301      	str	r3, [sp, #4]
   daa9e:	bd08      	pop	{r3, pc}
   daaa0:	00030284 	.word	0x00030284

000daaa4 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   daaa4:	b508      	push	{r3, lr}
   daaa6:	4b02      	ldr	r3, [pc, #8]	; (daab0 <readdir+0xc>)
   daaa8:	681b      	ldr	r3, [r3, #0]
   daaaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   daaac:	9301      	str	r3, [sp, #4]
   daaae:	bd08      	pop	{r3, pc}
   daab0:	00030284 	.word	0x00030284

000daab4 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   daab4:	b508      	push	{r3, lr}
   daab6:	4b02      	ldr	r3, [pc, #8]	; (daac0 <closedir+0xc>)
   daab8:	681b      	ldr	r3, [r3, #0]
   daaba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   daabc:	9301      	str	r3, [sp, #4]
   daabe:	bd08      	pop	{r3, pc}
   daac0:	00030284 	.word	0x00030284

000daac4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   daac4:	b508      	push	{r3, lr}
   daac6:	4b02      	ldr	r3, [pc, #8]	; (daad0 <hal_usart_init+0xc>)
   daac8:	681b      	ldr	r3, [r3, #0]
   daaca:	681b      	ldr	r3, [r3, #0]
   daacc:	9301      	str	r3, [sp, #4]
   daace:	bd08      	pop	{r3, pc}
   daad0:	0003023c 	.word	0x0003023c

000daad4 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   daad4:	b508      	push	{r3, lr}
   daad6:	4b02      	ldr	r3, [pc, #8]	; (daae0 <hal_usart_end+0xc>)
   daad8:	681b      	ldr	r3, [r3, #0]
   daada:	689b      	ldr	r3, [r3, #8]
   daadc:	9301      	str	r3, [sp, #4]
   daade:	bd08      	pop	{r3, pc}
   daae0:	0003023c 	.word	0x0003023c

000daae4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   daae4:	b508      	push	{r3, lr}
   daae6:	4b02      	ldr	r3, [pc, #8]	; (daaf0 <hal_usart_write+0xc>)
   daae8:	681b      	ldr	r3, [r3, #0]
   daaea:	68db      	ldr	r3, [r3, #12]
   daaec:	9301      	str	r3, [sp, #4]
   daaee:	bd08      	pop	{r3, pc}
   daaf0:	0003023c 	.word	0x0003023c

000daaf4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   daaf4:	b508      	push	{r3, lr}
   daaf6:	4b02      	ldr	r3, [pc, #8]	; (dab00 <hal_usart_available+0xc>)
   daaf8:	681b      	ldr	r3, [r3, #0]
   daafa:	691b      	ldr	r3, [r3, #16]
   daafc:	9301      	str	r3, [sp, #4]
   daafe:	bd08      	pop	{r3, pc}
   dab00:	0003023c 	.word	0x0003023c

000dab04 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   dab04:	b508      	push	{r3, lr}
   dab06:	4b02      	ldr	r3, [pc, #8]	; (dab10 <hal_usart_read+0xc>)
   dab08:	681b      	ldr	r3, [r3, #0]
   dab0a:	695b      	ldr	r3, [r3, #20]
   dab0c:	9301      	str	r3, [sp, #4]
   dab0e:	bd08      	pop	{r3, pc}
   dab10:	0003023c 	.word	0x0003023c

000dab14 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   dab14:	b508      	push	{r3, lr}
   dab16:	4b02      	ldr	r3, [pc, #8]	; (dab20 <hal_usart_peek+0xc>)
   dab18:	681b      	ldr	r3, [r3, #0]
   dab1a:	699b      	ldr	r3, [r3, #24]
   dab1c:	9301      	str	r3, [sp, #4]
   dab1e:	bd08      	pop	{r3, pc}
   dab20:	0003023c 	.word	0x0003023c

000dab24 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   dab24:	b508      	push	{r3, lr}
   dab26:	4b02      	ldr	r3, [pc, #8]	; (dab30 <hal_usart_flush+0xc>)
   dab28:	681b      	ldr	r3, [r3, #0]
   dab2a:	69db      	ldr	r3, [r3, #28]
   dab2c:	9301      	str	r3, [sp, #4]
   dab2e:	bd08      	pop	{r3, pc}
   dab30:	0003023c 	.word	0x0003023c

000dab34 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   dab34:	b508      	push	{r3, lr}
   dab36:	4b02      	ldr	r3, [pc, #8]	; (dab40 <hal_usart_is_enabled+0xc>)
   dab38:	681b      	ldr	r3, [r3, #0]
   dab3a:	6a1b      	ldr	r3, [r3, #32]
   dab3c:	9301      	str	r3, [sp, #4]
   dab3e:	bd08      	pop	{r3, pc}
   dab40:	0003023c 	.word	0x0003023c

000dab44 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   dab44:	b508      	push	{r3, lr}
   dab46:	4b02      	ldr	r3, [pc, #8]	; (dab50 <hal_usart_available_data_for_write+0xc>)
   dab48:	681b      	ldr	r3, [r3, #0]
   dab4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dab4c:	9301      	str	r3, [sp, #4]
   dab4e:	bd08      	pop	{r3, pc}
   dab50:	0003023c 	.word	0x0003023c

000dab54 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   dab54:	b508      	push	{r3, lr}
   dab56:	4b02      	ldr	r3, [pc, #8]	; (dab60 <hal_usart_begin_config+0xc>)
   dab58:	681b      	ldr	r3, [r3, #0]
   dab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dab5c:	9301      	str	r3, [sp, #4]
   dab5e:	bd08      	pop	{r3, pc}
   dab60:	0003023c 	.word	0x0003023c

000dab64 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   dab64:	b508      	push	{r3, lr}
   dab66:	4b02      	ldr	r3, [pc, #8]	; (dab70 <HAL_USB_USART_Init+0xc>)
   dab68:	681b      	ldr	r3, [r3, #0]
   dab6a:	681b      	ldr	r3, [r3, #0]
   dab6c:	9301      	str	r3, [sp, #4]
   dab6e:	bd08      	pop	{r3, pc}
   dab70:	0003024c 	.word	0x0003024c

000dab74 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   dab74:	b508      	push	{r3, lr}
   dab76:	4b02      	ldr	r3, [pc, #8]	; (dab80 <HAL_USB_USART_Begin+0xc>)
   dab78:	681b      	ldr	r3, [r3, #0]
   dab7a:	685b      	ldr	r3, [r3, #4]
   dab7c:	9301      	str	r3, [sp, #4]
   dab7e:	bd08      	pop	{r3, pc}
   dab80:	0003024c 	.word	0x0003024c

000dab84 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   dab84:	b508      	push	{r3, lr}
   dab86:	4b02      	ldr	r3, [pc, #8]	; (dab90 <HAL_USB_USART_End+0xc>)
   dab88:	681b      	ldr	r3, [r3, #0]
   dab8a:	689b      	ldr	r3, [r3, #8]
   dab8c:	9301      	str	r3, [sp, #4]
   dab8e:	bd08      	pop	{r3, pc}
   dab90:	0003024c 	.word	0x0003024c

000dab94 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   dab94:	b508      	push	{r3, lr}
   dab96:	4b02      	ldr	r3, [pc, #8]	; (daba0 <HAL_USB_USART_Available_Data+0xc>)
   dab98:	681b      	ldr	r3, [r3, #0]
   dab9a:	691b      	ldr	r3, [r3, #16]
   dab9c:	9301      	str	r3, [sp, #4]
   dab9e:	bd08      	pop	{r3, pc}
   daba0:	0003024c 	.word	0x0003024c

000daba4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   daba4:	b508      	push	{r3, lr}
   daba6:	4b02      	ldr	r3, [pc, #8]	; (dabb0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   daba8:	681b      	ldr	r3, [r3, #0]
   dabaa:	695b      	ldr	r3, [r3, #20]
   dabac:	9301      	str	r3, [sp, #4]
   dabae:	bd08      	pop	{r3, pc}
   dabb0:	0003024c 	.word	0x0003024c

000dabb4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dabb4:	b508      	push	{r3, lr}
   dabb6:	4b02      	ldr	r3, [pc, #8]	; (dabc0 <HAL_USB_USART_Receive_Data+0xc>)
   dabb8:	681b      	ldr	r3, [r3, #0]
   dabba:	699b      	ldr	r3, [r3, #24]
   dabbc:	9301      	str	r3, [sp, #4]
   dabbe:	bd08      	pop	{r3, pc}
   dabc0:	0003024c 	.word	0x0003024c

000dabc4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dabc4:	b508      	push	{r3, lr}
   dabc6:	4b02      	ldr	r3, [pc, #8]	; (dabd0 <HAL_USB_USART_Send_Data+0xc>)
   dabc8:	681b      	ldr	r3, [r3, #0]
   dabca:	69db      	ldr	r3, [r3, #28]
   dabcc:	9301      	str	r3, [sp, #4]
   dabce:	bd08      	pop	{r3, pc}
   dabd0:	0003024c 	.word	0x0003024c

000dabd4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   dabd4:	b508      	push	{r3, lr}
   dabd6:	4b02      	ldr	r3, [pc, #8]	; (dabe0 <HAL_USB_USART_Flush_Data+0xc>)
   dabd8:	681b      	ldr	r3, [r3, #0]
   dabda:	6a1b      	ldr	r3, [r3, #32]
   dabdc:	9301      	str	r3, [sp, #4]
   dabde:	bd08      	pop	{r3, pc}
   dabe0:	0003024c 	.word	0x0003024c

000dabe4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   dabe4:	b508      	push	{r3, lr}
   dabe6:	4b02      	ldr	r3, [pc, #8]	; (dabf0 <panic_+0xc>)
   dabe8:	681b      	ldr	r3, [r3, #0]
   dabea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dabec:	9301      	str	r3, [sp, #4]
   dabee:	bd08      	pop	{r3, pc}
   dabf0:	00030260 	.word	0x00030260

000dabf4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   dabf4:	b508      	push	{r3, lr}
   dabf6:	4b02      	ldr	r3, [pc, #8]	; (dac00 <log_message+0xc>)
   dabf8:	681b      	ldr	r3, [r3, #0]
   dabfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dabfc:	9301      	str	r3, [sp, #4]
   dabfe:	bd08      	pop	{r3, pc}
   dac00:	00030260 	.word	0x00030260

000dac04 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   dac04:	b508      	push	{r3, lr}
   dac06:	4b02      	ldr	r3, [pc, #8]	; (dac10 <log_message_v+0xc>)
   dac08:	681b      	ldr	r3, [r3, #0]
   dac0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dac0c:	9301      	str	r3, [sp, #4]
   dac0e:	bd08      	pop	{r3, pc}
   dac10:	00030260 	.word	0x00030260

000dac14 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   dac14:	b508      	push	{r3, lr}
   dac16:	4b02      	ldr	r3, [pc, #8]	; (dac20 <log_level_name+0xc>)
   dac18:	681b      	ldr	r3, [r3, #0]
   dac1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dac1c:	9301      	str	r3, [sp, #4]
   dac1e:	bd08      	pop	{r3, pc}
   dac20:	00030260 	.word	0x00030260

000dac24 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   dac24:	b508      	push	{r3, lr}
   dac26:	4b02      	ldr	r3, [pc, #8]	; (dac30 <log_set_callbacks+0xc>)
   dac28:	681b      	ldr	r3, [r3, #0]
   dac2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   dac2c:	9301      	str	r3, [sp, #4]
   dac2e:	bd08      	pop	{r3, pc}
   dac30:	00030260 	.word	0x00030260

000dac34 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   dac34:	b508      	push	{r3, lr}
   dac36:	4b03      	ldr	r3, [pc, #12]	; (dac44 <diag_get_source+0x10>)
   dac38:	681b      	ldr	r3, [r3, #0]
   dac3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   dac3e:	9301      	str	r3, [sp, #4]
   dac40:	bd08      	pop	{r3, pc}
   dac42:	0000      	.short	0x0000
   dac44:	00030260 	.word	0x00030260

000dac48 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   dac48:	b508      	push	{r3, lr}
   dac4a:	4b02      	ldr	r3, [pc, #8]	; (dac54 <system_mode+0xc>)
   dac4c:	681b      	ldr	r3, [r3, #0]
   dac4e:	681b      	ldr	r3, [r3, #0]
   dac50:	9301      	str	r3, [sp, #4]
   dac52:	bd08      	pop	{r3, pc}
   dac54:	00030220 	.word	0x00030220

000dac58 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   dac58:	b508      	push	{r3, lr}
   dac5a:	4b02      	ldr	r3, [pc, #8]	; (dac64 <set_system_mode+0xc>)
   dac5c:	681b      	ldr	r3, [r3, #0]
   dac5e:	685b      	ldr	r3, [r3, #4]
   dac60:	9301      	str	r3, [sp, #4]
   dac62:	bd08      	pop	{r3, pc}
   dac64:	00030220 	.word	0x00030220

000dac68 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   dac68:	b508      	push	{r3, lr}
   dac6a:	4b02      	ldr	r3, [pc, #8]	; (dac74 <system_delay_ms+0xc>)
   dac6c:	681b      	ldr	r3, [r3, #0]
   dac6e:	695b      	ldr	r3, [r3, #20]
   dac70:	9301      	str	r3, [sp, #4]
   dac72:	bd08      	pop	{r3, pc}
   dac74:	00030220 	.word	0x00030220

000dac78 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   dac78:	b508      	push	{r3, lr}
   dac7a:	4b02      	ldr	r3, [pc, #8]	; (dac84 <system_subscribe_event+0xc>)
   dac7c:	681b      	ldr	r3, [r3, #0]
   dac7e:	6a1b      	ldr	r3, [r3, #32]
   dac80:	9301      	str	r3, [sp, #4]
   dac82:	bd08      	pop	{r3, pc}
   dac84:	00030220 	.word	0x00030220

000dac88 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   dac88:	b508      	push	{r3, lr}
   dac8a:	4b02      	ldr	r3, [pc, #8]	; (dac94 <system_thread_set_state+0xc>)
   dac8c:	681b      	ldr	r3, [r3, #0]
   dac8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dac90:	9301      	str	r3, [sp, #4]
   dac92:	bd08      	pop	{r3, pc}
   dac94:	00030220 	.word	0x00030220

000dac98 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   dac98:	b508      	push	{r3, lr}
   dac9a:	4b02      	ldr	r3, [pc, #8]	; (daca4 <application_thread_current+0xc>)
   dac9c:	681b      	ldr	r3, [r3, #0]
   dac9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   daca0:	9301      	str	r3, [sp, #4]
   daca2:	bd08      	pop	{r3, pc}
   daca4:	00030220 	.word	0x00030220

000daca8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   daca8:	b508      	push	{r3, lr}
   dacaa:	4b02      	ldr	r3, [pc, #8]	; (dacb4 <application_thread_invoke+0xc>)
   dacac:	681b      	ldr	r3, [r3, #0]
   dacae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dacb0:	9301      	str	r3, [sp, #4]
   dacb2:	bd08      	pop	{r3, pc}
   dacb4:	00030220 	.word	0x00030220

000dacb8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   dacb8:	b508      	push	{r3, lr}
   dacba:	4b02      	ldr	r3, [pc, #8]	; (dacc4 <system_thread_get_state+0xc>)
   dacbc:	681b      	ldr	r3, [r3, #0]
   dacbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dacc0:	9301      	str	r3, [sp, #4]
   dacc2:	bd08      	pop	{r3, pc}
   dacc4:	00030220 	.word	0x00030220

000dacc8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   dacc8:	b508      	push	{r3, lr}
   dacca:	4b02      	ldr	r3, [pc, #8]	; (dacd4 <system_notify_time_changed+0xc>)
   daccc:	681b      	ldr	r3, [r3, #0]
   dacce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dacd0:	9301      	str	r3, [sp, #4]
   dacd2:	bd08      	pop	{r3, pc}
   dacd4:	00030220 	.word	0x00030220

000dacd8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   dacd8:	b508      	push	{r3, lr}
   dacda:	4b03      	ldr	r3, [pc, #12]	; (dace8 <system_ctrl_set_app_request_handler+0x10>)
   dacdc:	681b      	ldr	r3, [r3, #0]
   dacde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   dace2:	9301      	str	r3, [sp, #4]
   dace4:	bd08      	pop	{r3, pc}
   dace6:	0000      	.short	0x0000
   dace8:	00030220 	.word	0x00030220

000dacec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   dacec:	b508      	push	{r3, lr}
   dacee:	4b03      	ldr	r3, [pc, #12]	; (dacfc <system_ctrl_set_result+0x10>)
   dacf0:	681b      	ldr	r3, [r3, #0]
   dacf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   dacf6:	9301      	str	r3, [sp, #4]
   dacf8:	bd08      	pop	{r3, pc}
   dacfa:	0000      	.short	0x0000
   dacfc:	00030220 	.word	0x00030220

000dad00 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   dad00:	b508      	push	{r3, lr}
   dad02:	4b03      	ldr	r3, [pc, #12]	; (dad10 <system_power_management_set_config+0x10>)
   dad04:	681b      	ldr	r3, [r3, #0]
   dad06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   dad0a:	9301      	str	r3, [sp, #4]
   dad0c:	bd08      	pop	{r3, pc}
   dad0e:	0000      	.short	0x0000
   dad10:	00030220 	.word	0x00030220

000dad14 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   dad14:	b508      	push	{r3, lr}
   dad16:	4b03      	ldr	r3, [pc, #12]	; (dad24 <system_sleep_ext+0x10>)
   dad18:	681b      	ldr	r3, [r3, #0]
   dad1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   dad1e:	9301      	str	r3, [sp, #4]
   dad20:	bd08      	pop	{r3, pc}
   dad22:	0000      	.short	0x0000
   dad24:	00030220 	.word	0x00030220

000dad28 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   dad28:	b508      	push	{r3, lr}
   dad2a:	4b02      	ldr	r3, [pc, #8]	; (dad34 <spark_variable+0xc>)
   dad2c:	681b      	ldr	r3, [r3, #0]
   dad2e:	681b      	ldr	r3, [r3, #0]
   dad30:	9301      	str	r3, [sp, #4]
   dad32:	bd08      	pop	{r3, pc}
   dad34:	00030244 	.word	0x00030244

000dad38 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   dad38:	b508      	push	{r3, lr}
   dad3a:	4b02      	ldr	r3, [pc, #8]	; (dad44 <spark_function+0xc>)
   dad3c:	681b      	ldr	r3, [r3, #0]
   dad3e:	685b      	ldr	r3, [r3, #4]
   dad40:	9301      	str	r3, [sp, #4]
   dad42:	bd08      	pop	{r3, pc}
   dad44:	00030244 	.word	0x00030244

000dad48 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   dad48:	b508      	push	{r3, lr}
   dad4a:	4b02      	ldr	r3, [pc, #8]	; (dad54 <spark_process+0xc>)
   dad4c:	681b      	ldr	r3, [r3, #0]
   dad4e:	689b      	ldr	r3, [r3, #8]
   dad50:	9301      	str	r3, [sp, #4]
   dad52:	bd08      	pop	{r3, pc}
   dad54:	00030244 	.word	0x00030244

000dad58 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   dad58:	b508      	push	{r3, lr}
   dad5a:	4b02      	ldr	r3, [pc, #8]	; (dad64 <spark_cloud_flag_connect+0xc>)
   dad5c:	681b      	ldr	r3, [r3, #0]
   dad5e:	68db      	ldr	r3, [r3, #12]
   dad60:	9301      	str	r3, [sp, #4]
   dad62:	bd08      	pop	{r3, pc}
   dad64:	00030244 	.word	0x00030244

000dad68 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   dad68:	b508      	push	{r3, lr}
   dad6a:	4b02      	ldr	r3, [pc, #8]	; (dad74 <spark_cloud_flag_connected+0xc>)
   dad6c:	681b      	ldr	r3, [r3, #0]
   dad6e:	695b      	ldr	r3, [r3, #20]
   dad70:	9301      	str	r3, [sp, #4]
   dad72:	bd08      	pop	{r3, pc}
   dad74:	00030244 	.word	0x00030244

000dad78 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dad78:	b508      	push	{r3, lr}
   dad7a:	4b02      	ldr	r3, [pc, #8]	; (dad84 <spark_send_event+0xc>)
   dad7c:	681b      	ldr	r3, [r3, #0]
   dad7e:	6a1b      	ldr	r3, [r3, #32]
   dad80:	9301      	str	r3, [sp, #4]
   dad82:	bd08      	pop	{r3, pc}
   dad84:	00030244 	.word	0x00030244

000dad88 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   dad88:	b508      	push	{r3, lr}
   dad8a:	4b02      	ldr	r3, [pc, #8]	; (dad94 <spark_sync_time+0xc>)
   dad8c:	681b      	ldr	r3, [r3, #0]
   dad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dad90:	9301      	str	r3, [sp, #4]
   dad92:	bd08      	pop	{r3, pc}
   dad94:	00030244 	.word	0x00030244

000dad98 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dad98:	b508      	push	{r3, lr}
   dad9a:	4b02      	ldr	r3, [pc, #8]	; (dada4 <spark_sync_time_pending+0xc>)
   dad9c:	681b      	ldr	r3, [r3, #0]
   dad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dada0:	9301      	str	r3, [sp, #4]
   dada2:	bd08      	pop	{r3, pc}
   dada4:	00030244 	.word	0x00030244

000dada8 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   dada8:	b508      	push	{r3, lr}
   dadaa:	4b02      	ldr	r3, [pc, #8]	; (dadb4 <spark_sync_time_last+0xc>)
   dadac:	681b      	ldr	r3, [r3, #0]
   dadae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dadb0:	9301      	str	r3, [sp, #4]
   dadb2:	bd08      	pop	{r3, pc}
   dadb4:	00030244 	.word	0x00030244

000dadb8 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   dadb8:	b508      	push	{r3, lr}
   dadba:	4b02      	ldr	r3, [pc, #8]	; (dadc4 <spark_set_connection_property+0xc>)
   dadbc:	681b      	ldr	r3, [r3, #0]
   dadbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dadc0:	9301      	str	r3, [sp, #4]
   dadc2:	bd08      	pop	{r3, pc}
   dadc4:	00030244 	.word	0x00030244

000dadc8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dadc8:	b508      	push	{r3, lr}
   dadca:	4b02      	ldr	r3, [pc, #8]	; (dadd4 <spark_set_random_seed_from_cloud_handler+0xc>)
   dadcc:	681b      	ldr	r3, [r3, #0]
   dadce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dadd0:	9301      	str	r3, [sp, #4]
   dadd2:	bd08      	pop	{r3, pc}
   dadd4:	00030244 	.word	0x00030244

000dadd8 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   dadd8:	b508      	push	{r3, lr}
   dadda:	4b02      	ldr	r3, [pc, #8]	; (dade4 <spark_cloud_disconnect+0xc>)
   daddc:	681b      	ldr	r3, [r3, #0]
   dadde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dade0:	9301      	str	r3, [sp, #4]
   dade2:	bd08      	pop	{r3, pc}
   dade4:	00030244 	.word	0x00030244

000dade8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   dade8:	b508      	push	{r3, lr}
   dadea:	4b02      	ldr	r3, [pc, #8]	; (dadf4 <network_connect+0xc>)
   dadec:	681b      	ldr	r3, [r3, #0]
   dadee:	685b      	ldr	r3, [r3, #4]
   dadf0:	9301      	str	r3, [sp, #4]
   dadf2:	bd08      	pop	{r3, pc}
   dadf4:	00030240 	.word	0x00030240

000dadf8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   dadf8:	b508      	push	{r3, lr}
   dadfa:	4b02      	ldr	r3, [pc, #8]	; (dae04 <network_connecting+0xc>)
   dadfc:	681b      	ldr	r3, [r3, #0]
   dadfe:	689b      	ldr	r3, [r3, #8]
   dae00:	9301      	str	r3, [sp, #4]
   dae02:	bd08      	pop	{r3, pc}
   dae04:	00030240 	.word	0x00030240

000dae08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   dae08:	b508      	push	{r3, lr}
   dae0a:	4b02      	ldr	r3, [pc, #8]	; (dae14 <network_disconnect+0xc>)
   dae0c:	681b      	ldr	r3, [r3, #0]
   dae0e:	68db      	ldr	r3, [r3, #12]
   dae10:	9301      	str	r3, [sp, #4]
   dae12:	bd08      	pop	{r3, pc}
   dae14:	00030240 	.word	0x00030240

000dae18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   dae18:	b508      	push	{r3, lr}
   dae1a:	4b02      	ldr	r3, [pc, #8]	; (dae24 <network_ready+0xc>)
   dae1c:	681b      	ldr	r3, [r3, #0]
   dae1e:	691b      	ldr	r3, [r3, #16]
   dae20:	9301      	str	r3, [sp, #4]
   dae22:	bd08      	pop	{r3, pc}
   dae24:	00030240 	.word	0x00030240

000dae28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dae28:	b508      	push	{r3, lr}
   dae2a:	4b02      	ldr	r3, [pc, #8]	; (dae34 <network_on+0xc>)
   dae2c:	681b      	ldr	r3, [r3, #0]
   dae2e:	695b      	ldr	r3, [r3, #20]
   dae30:	9301      	str	r3, [sp, #4]
   dae32:	bd08      	pop	{r3, pc}
   dae34:	00030240 	.word	0x00030240

000dae38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dae38:	b508      	push	{r3, lr}
   dae3a:	4b02      	ldr	r3, [pc, #8]	; (dae44 <network_off+0xc>)
   dae3c:	681b      	ldr	r3, [r3, #0]
   dae3e:	699b      	ldr	r3, [r3, #24]
   dae40:	9301      	str	r3, [sp, #4]
   dae42:	bd08      	pop	{r3, pc}
   dae44:	00030240 	.word	0x00030240

000dae48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dae48:	b508      	push	{r3, lr}
   dae4a:	4b02      	ldr	r3, [pc, #8]	; (dae54 <network_listen+0xc>)
   dae4c:	681b      	ldr	r3, [r3, #0]
   dae4e:	69db      	ldr	r3, [r3, #28]
   dae50:	9301      	str	r3, [sp, #4]
   dae52:	bd08      	pop	{r3, pc}
   dae54:	00030240 	.word	0x00030240

000dae58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dae58:	b508      	push	{r3, lr}
   dae5a:	4b02      	ldr	r3, [pc, #8]	; (dae64 <network_listening+0xc>)
   dae5c:	681b      	ldr	r3, [r3, #0]
   dae5e:	6a1b      	ldr	r3, [r3, #32]
   dae60:	9301      	str	r3, [sp, #4]
   dae62:	bd08      	pop	{r3, pc}
   dae64:	00030240 	.word	0x00030240

000dae68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dae68:	b508      	push	{r3, lr}
   dae6a:	4b02      	ldr	r3, [pc, #8]	; (dae74 <network_set_listen_timeout+0xc>)
   dae6c:	681b      	ldr	r3, [r3, #0]
   dae6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dae70:	9301      	str	r3, [sp, #4]
   dae72:	bd08      	pop	{r3, pc}
   dae74:	00030240 	.word	0x00030240

000dae78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dae78:	b508      	push	{r3, lr}
   dae7a:	4b02      	ldr	r3, [pc, #8]	; (dae84 <network_get_listen_timeout+0xc>)
   dae7c:	681b      	ldr	r3, [r3, #0]
   dae7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dae80:	9301      	str	r3, [sp, #4]
   dae82:	bd08      	pop	{r3, pc}
   dae84:	00030240 	.word	0x00030240

000dae88 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   dae88:	b508      	push	{r3, lr}
   dae8a:	4b02      	ldr	r3, [pc, #8]	; (dae94 <network_is_on+0xc>)
   dae8c:	681b      	ldr	r3, [r3, #0]
   dae8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dae90:	9301      	str	r3, [sp, #4]
   dae92:	bd08      	pop	{r3, pc}
   dae94:	00030240 	.word	0x00030240

000dae98 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   dae98:	b508      	push	{r3, lr}
   dae9a:	4b02      	ldr	r3, [pc, #8]	; (daea4 <network_is_off+0xc>)
   dae9c:	681b      	ldr	r3, [r3, #0]
   dae9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   daea0:	9301      	str	r3, [sp, #4]
   daea2:	bd08      	pop	{r3, pc}
   daea4:	00030240 	.word	0x00030240

000daea8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   daea8:	b508      	push	{r3, lr}
   daeaa:	4b02      	ldr	r3, [pc, #8]	; (daeb4 <malloc+0xc>)
   daeac:	681b      	ldr	r3, [r3, #0]
   daeae:	681b      	ldr	r3, [r3, #0]
   daeb0:	9301      	str	r3, [sp, #4]
   daeb2:	bd08      	pop	{r3, pc}
   daeb4:	0003021c 	.word	0x0003021c

000daeb8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   daeb8:	b508      	push	{r3, lr}
   daeba:	4b02      	ldr	r3, [pc, #8]	; (daec4 <free+0xc>)
   daebc:	681b      	ldr	r3, [r3, #0]
   daebe:	685b      	ldr	r3, [r3, #4]
   daec0:	9301      	str	r3, [sp, #4]
   daec2:	bd08      	pop	{r3, pc}
   daec4:	0003021c 	.word	0x0003021c

000daec8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   daec8:	b508      	push	{r3, lr}
   daeca:	4b02      	ldr	r3, [pc, #8]	; (daed4 <realloc+0xc>)
   daecc:	681b      	ldr	r3, [r3, #0]
   daece:	689b      	ldr	r3, [r3, #8]
   daed0:	9301      	str	r3, [sp, #4]
   daed2:	bd08      	pop	{r3, pc}
   daed4:	0003021c 	.word	0x0003021c

000daed8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   daed8:	b508      	push	{r3, lr}
   daeda:	4b02      	ldr	r3, [pc, #8]	; (daee4 <siprintf+0xc>)
   daedc:	681b      	ldr	r3, [r3, #0]
   daede:	691b      	ldr	r3, [r3, #16]
   daee0:	9301      	str	r3, [sp, #4]
   daee2:	bd08      	pop	{r3, pc}
   daee4:	0003021c 	.word	0x0003021c

000daee8 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   daee8:	b508      	push	{r3, lr}
   daeea:	4b02      	ldr	r3, [pc, #8]	; (daef4 <sscanf+0xc>)
   daeec:	681b      	ldr	r3, [r3, #0]
   daeee:	695b      	ldr	r3, [r3, #20]
   daef0:	9301      	str	r3, [sp, #4]
   daef2:	bd08      	pop	{r3, pc}
   daef4:	0003021c 	.word	0x0003021c

000daef8 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   daef8:	b508      	push	{r3, lr}
   daefa:	4b02      	ldr	r3, [pc, #8]	; (daf04 <snprintf+0xc>)
   daefc:	681b      	ldr	r3, [r3, #0]
   daefe:	69db      	ldr	r3, [r3, #28]
   daf00:	9301      	str	r3, [sp, #4]
   daf02:	bd08      	pop	{r3, pc}
   daf04:	0003021c 	.word	0x0003021c

000daf08 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   daf08:	b508      	push	{r3, lr}
   daf0a:	4b02      	ldr	r3, [pc, #8]	; (daf14 <vsnprintf+0xc>)
   daf0c:	681b      	ldr	r3, [r3, #0]
   daf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   daf10:	9301      	str	r3, [sp, #4]
   daf12:	bd08      	pop	{r3, pc}
   daf14:	0003021c 	.word	0x0003021c

000daf18 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   daf18:	b508      	push	{r3, lr}
   daf1a:	4b02      	ldr	r3, [pc, #8]	; (daf24 <abort+0xc>)
   daf1c:	681b      	ldr	r3, [r3, #0]
   daf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   daf20:	9301      	str	r3, [sp, #4]
   daf22:	bd08      	pop	{r3, pc}
   daf24:	0003021c 	.word	0x0003021c

000daf28 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   daf28:	b508      	push	{r3, lr}
   daf2a:	4b02      	ldr	r3, [pc, #8]	; (daf34 <_malloc_r+0xc>)
   daf2c:	681b      	ldr	r3, [r3, #0]
   daf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   daf30:	9301      	str	r3, [sp, #4]
   daf32:	bd08      	pop	{r3, pc}
   daf34:	0003021c 	.word	0x0003021c

000daf38 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   daf38:	b508      	push	{r3, lr}
   daf3a:	4b02      	ldr	r3, [pc, #8]	; (daf44 <__errno+0xc>)
   daf3c:	681b      	ldr	r3, [r3, #0]
   daf3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   daf40:	9301      	str	r3, [sp, #4]
   daf42:	bd08      	pop	{r3, pc}
   daf44:	0003021c 	.word	0x0003021c

000daf48 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   daf48:	b508      	push	{r3, lr}
   daf4a:	4b02      	ldr	r3, [pc, #8]	; (daf54 <newlib_impure_ptr_callback+0xc>)
   daf4c:	681b      	ldr	r3, [r3, #0]
   daf4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   daf50:	9301      	str	r3, [sp, #4]
   daf52:	bd08      	pop	{r3, pc}
   daf54:	0003021c 	.word	0x0003021c

000daf58 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   daf58:	b508      	push	{r3, lr}
   daf5a:	4b02      	ldr	r3, [pc, #8]	; (daf64 <strftime+0xc>)
   daf5c:	681b      	ldr	r3, [r3, #0]
   daf5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   daf60:	9301      	str	r3, [sp, #4]
   daf62:	bd08      	pop	{r3, pc}
   daf64:	0003021c 	.word	0x0003021c

000daf68 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   daf68:	b508      	push	{r3, lr}
   daf6a:	4b02      	ldr	r3, [pc, #8]	; (daf74 <localtime_r+0xc>)
   daf6c:	681b      	ldr	r3, [r3, #0]
   daf6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   daf70:	9301      	str	r3, [sp, #4]
   daf72:	bd08      	pop	{r3, pc}
   daf74:	0003021c 	.word	0x0003021c

000daf78 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   daf78:	b508      	push	{r3, lr}
   daf7a:	4b02      	ldr	r3, [pc, #8]	; (daf84 <gmtime_r+0xc>)
   daf7c:	681b      	ldr	r3, [r3, #0]
   daf7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   daf80:	9301      	str	r3, [sp, #4]
   daf82:	bd08      	pop	{r3, pc}
   daf84:	0003021c 	.word	0x0003021c

000daf88 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   daf88:	b508      	push	{r3, lr}
   daf8a:	4b02      	ldr	r3, [pc, #8]	; (daf94 <mktime+0xc>)
   daf8c:	681b      	ldr	r3, [r3, #0]
   daf8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   daf90:	9301      	str	r3, [sp, #4]
   daf92:	bd08      	pop	{r3, pc}
   daf94:	0003021c 	.word	0x0003021c

000daf98 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   daf98:	2100      	movs	r1, #0
   daf9a:	f7ff be65 	b.w	dac68 <system_delay_ms>

000daf9e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   daf9e:	b510      	push	{r4, lr}
      if (_M_empty())
   dafa0:	6883      	ldr	r3, [r0, #8]
   dafa2:	4604      	mov	r4, r0
   dafa4:	b90b      	cbnz	r3, dafaa <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dafa6:	f003 f8e9 	bl	de17c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dafaa:	68c3      	ldr	r3, [r0, #12]
   dafac:	4798      	blx	r3
      if (_M_manager)
   dafae:	68a3      	ldr	r3, [r4, #8]
   dafb0:	b11b      	cbz	r3, dafba <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dafb2:	2203      	movs	r2, #3
   dafb4:	4621      	mov	r1, r4
   dafb6:	4620      	mov	r0, r4
   dafb8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dafba:	4620      	mov	r0, r4
   dafbc:	2110      	movs	r1, #16
}
   dafbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   dafc2:	f003 b8cf 	b.w	de164 <_ZdlPvj>

000dafc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   dafc6:	680b      	ldr	r3, [r1, #0]
   dafc8:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   dafca:	b113      	cbz	r3, dafd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   dafcc:	685a      	ldr	r2, [r3, #4]
   dafce:	3201      	adds	r2, #1
   dafd0:	605a      	str	r2, [r3, #4]
      }
   dafd2:	4770      	bx	lr

000dafd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dafd4:	4802      	ldr	r0, [pc, #8]	; (dafe0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   dafd6:	2300      	movs	r3, #0
   dafd8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   dafda:	f7ff bb9b 	b.w	da714 <os_mutex_recursive_create>
   dafde:	bf00      	nop
   dafe0:	2003e498 	.word	0x2003e498

000dafe4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   dafe4:	2200      	movs	r2, #0
   dafe6:	6840      	ldr	r0, [r0, #4]
   dafe8:	4611      	mov	r1, r2
   dafea:	f7ff bf15 	b.w	dae18 <network_ready>

000dafee <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   dafee:	2200      	movs	r2, #0
   daff0:	6840      	ldr	r0, [r0, #4]
   daff2:	4611      	mov	r1, r2
   daff4:	f7ff bf30 	b.w	dae58 <network_listening>

000daff8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   daff8:	2200      	movs	r2, #0
   daffa:	6840      	ldr	r0, [r0, #4]
   daffc:	4611      	mov	r1, r2
   daffe:	f7ff bf3b 	b.w	dae78 <network_get_listen_timeout>

000db002 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   db002:	6840      	ldr	r0, [r0, #4]
   db004:	2200      	movs	r2, #0
   db006:	f7ff bf2f 	b.w	dae68 <network_set_listen_timeout>

000db00a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   db00a:	6840      	ldr	r0, [r0, #4]
   db00c:	2200      	movs	r2, #0
   db00e:	f081 0101 	eor.w	r1, r1, #1
   db012:	f7ff bf19 	b.w	dae48 <network_listen>

000db016 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   db016:	2300      	movs	r3, #0
   db018:	6840      	ldr	r0, [r0, #4]
   db01a:	461a      	mov	r2, r3
   db01c:	4619      	mov	r1, r3
   db01e:	f7ff bf0b 	b.w	dae38 <network_off>

000db022 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   db022:	2300      	movs	r3, #0
   db024:	6840      	ldr	r0, [r0, #4]
   db026:	461a      	mov	r2, r3
   db028:	4619      	mov	r1, r3
   db02a:	f7ff befd 	b.w	dae28 <network_on>

000db02e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   db02e:	2200      	movs	r2, #0
   db030:	6840      	ldr	r0, [r0, #4]
   db032:	4611      	mov	r1, r2
   db034:	f7ff bee0 	b.w	dadf8 <network_connecting>

000db038 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db038:	6840      	ldr	r0, [r0, #4]
   db03a:	2200      	movs	r2, #0
   db03c:	2102      	movs	r1, #2
   db03e:	f7ff bee3 	b.w	dae08 <network_disconnect>

000db042 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   db042:	2300      	movs	r3, #0
   db044:	6840      	ldr	r0, [r0, #4]
   db046:	461a      	mov	r2, r3
   db048:	f7ff bece 	b.w	dade8 <network_connect>

000db04c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   db04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   db04e:	4b1b      	ldr	r3, [pc, #108]	; (db0bc <_ZN5spark13CellularClass4RSSIEv+0x70>)
   db050:	6003      	str	r3, [r0, #0]
   db052:	2500      	movs	r5, #0
   db054:	460f      	mov	r7, r1
   db056:	3330      	adds	r3, #48	; 0x30
   db058:	2618      	movs	r6, #24
   db05a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   db05e:	b089      	sub	sp, #36	; 0x24
   db060:	6043      	str	r3, [r0, #4]
   db062:	4632      	mov	r2, r6
   db064:	4629      	mov	r1, r5
   db066:	4604      	mov	r4, r0
   db068:	3010      	adds	r0, #16
   db06a:	f003 fd2f 	bl	deacc <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   db06e:	6878      	ldr	r0, [r7, #4]
   db070:	462a      	mov	r2, r5
   db072:	4629      	mov	r1, r5
   db074:	f7ff fed0 	bl	dae18 <network_ready>
   db078:	b918      	cbnz	r0, db082 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   db07a:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   db07c:	4620      	mov	r0, r4
   db07e:	b009      	add	sp, #36	; 0x24
   db080:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   db082:	4629      	mov	r1, r5
   db084:	4632      	mov	r2, r6
   db086:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   db088:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   db08c:	f003 fd1e 	bl	deacc <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   db090:	a902      	add	r1, sp, #8
   db092:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   db094:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   db098:	f7ff fafc 	bl	da694 <cellular_signal>
   db09c:	b110      	cbz	r0, db0a4 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   db09e:	2301      	movs	r3, #1
   db0a0:	60a3      	str	r3, [r4, #8]
            return sig;
   db0a2:	e7eb      	b.n	db07c <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   db0a4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   db0a6:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   db0a8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   db0aa:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   db0ac:	b90b      	cbnz	r3, db0b2 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   db0ae:	2302      	movs	r3, #2
   db0b0:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   db0b2:	a902      	add	r1, sp, #8
   db0b4:	4620      	mov	r0, r4
   db0b6:	f000 f8c0 	bl	db23a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   db0ba:	e7df      	b.n	db07c <_ZN5spark13CellularClass4RSSIEv+0x30>
   db0bc:	000e02ac 	.word	0x000e02ac

000db0c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   db0c0:	4b08      	ldr	r3, [pc, #32]	; (db0e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   db0c2:	b510      	push	{r4, lr}
   db0c4:	2428      	movs	r4, #40	; 0x28
   db0c6:	4622      	mov	r2, r4
   db0c8:	4618      	mov	r0, r3
   db0ca:	2100      	movs	r1, #0
   db0cc:	f003 fcfe 	bl	deacc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   db0d0:	4b05      	ldr	r3, [pc, #20]	; (db0e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   db0d2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   db0d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db0d8:	6042      	str	r2, [r0, #4]
   db0da:	2204      	movs	r2, #4
   db0dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   db0de:	4a03      	ldr	r2, [pc, #12]	; (db0ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   db0e0:	601a      	str	r2, [r3, #0]
   db0e2:	bd10      	pop	{r4, pc}
   db0e4:	2003e4a4 	.word	0x2003e4a4
   db0e8:	2003e49c 	.word	0x2003e49c
   db0ec:	000e0270 	.word	0x000e0270

000db0f0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   db0f0:	4770      	bx	lr

000db0f2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   db0f2:	7d00      	ldrb	r0, [r0, #20]
   db0f4:	4770      	bx	lr

000db0f6 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   db0f6:	7d03      	ldrb	r3, [r0, #20]
   db0f8:	b14b      	cbz	r3, db10e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   db0fa:	6983      	ldr	r3, [r0, #24]
   db0fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db100:	d005      	beq.n	db10e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   db102:	6a00      	ldr	r0, [r0, #32]
   db104:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   db108:	bf18      	it	ne
   db10a:	2001      	movne	r0, #1
   db10c:	4770      	bx	lr
   db10e:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   db110:	4770      	bx	lr

000db112 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   db112:	6803      	ldr	r3, [r0, #0]
   db114:	6a1b      	ldr	r3, [r3, #32]
   db116:	4718      	bx	r3

000db118 <_ZN14CellularSignalD0Ev>:
   db118:	b510      	push	{r4, lr}
   db11a:	2128      	movs	r1, #40	; 0x28
   db11c:	4604      	mov	r4, r0
   db11e:	f003 f821 	bl	de164 <_ZdlPvj>
   db122:	4620      	mov	r0, r4
   db124:	bd10      	pop	{r4, pc}
	...

000db128 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   db128:	7d03      	ldrb	r3, [r0, #20]
   db12a:	b17b      	cbz	r3, db14c <_ZNK14CellularSignal11getStrengthEv+0x24>
   db12c:	69c3      	ldr	r3, [r0, #28]
   db12e:	2b00      	cmp	r3, #0
   db130:	db0c      	blt.n	db14c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   db132:	ee07 3a90 	vmov	s15, r3
   db136:	ed9f 7a07 	vldr	s14, [pc, #28]	; db154 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   db13a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db13e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db142:	eddf 7a05 	vldr	s15, [pc, #20]	; db158 <_ZNK14CellularSignal11getStrengthEv+0x30>
   db146:	ee20 0a27 	vmul.f32	s0, s0, s15
   db14a:	4770      	bx	lr
    return -1.0f;
   db14c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   db150:	4770      	bx	lr
   db152:	bf00      	nop
   db154:	477fff00 	.word	0x477fff00
   db158:	42c80000 	.word	0x42c80000

000db15c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   db15c:	7d03      	ldrb	r3, [r0, #20]
   db15e:	b163      	cbz	r3, db17a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   db160:	6983      	ldr	r3, [r0, #24]
   db162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db166:	d008      	beq.n	db17a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   db168:	ee07 3a90 	vmov	s15, r3
   db16c:	ed9f 7a04 	vldr	s14, [pc, #16]	; db180 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   db170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db174:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db178:	4770      	bx	lr
    return 0.0f;
   db17a:	ed9f 0a02 	vldr	s0, [pc, #8]	; db184 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   db17e:	4770      	bx	lr
   db180:	42c80000 	.word	0x42c80000
   db184:	00000000 	.word	0x00000000

000db188 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   db188:	7d03      	ldrb	r3, [r0, #20]
   db18a:	b17b      	cbz	r3, db1ac <_ZNK14CellularSignal10getQualityEv+0x24>
   db18c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   db18e:	2b00      	cmp	r3, #0
   db190:	db0c      	blt.n	db1ac <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   db192:	ee07 3a90 	vmov	s15, r3
   db196:	ed9f 7a07 	vldr	s14, [pc, #28]	; db1b4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   db19a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db19e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db1a2:	eddf 7a05 	vldr	s15, [pc, #20]	; db1b8 <_ZNK14CellularSignal10getQualityEv+0x30>
   db1a6:	ee20 0a27 	vmul.f32	s0, s0, s15
   db1aa:	4770      	bx	lr
    return -1.0f;
   db1ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   db1b0:	4770      	bx	lr
   db1b2:	bf00      	nop
   db1b4:	477fff00 	.word	0x477fff00
   db1b8:	42c80000 	.word	0x42c80000

000db1bc <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   db1bc:	7d03      	ldrb	r3, [r0, #20]
   db1be:	b163      	cbz	r3, db1da <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   db1c0:	6a03      	ldr	r3, [r0, #32]
   db1c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db1c6:	d008      	beq.n	db1da <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   db1c8:	ee07 3a90 	vmov	s15, r3
   db1cc:	ed9f 7a04 	vldr	s14, [pc, #16]	; db1e0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   db1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db1d4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db1d8:	4770      	bx	lr
    return 0.0f;
   db1da:	ed9f 0a02 	vldr	s0, [pc, #8]	; db1e4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   db1de:	4770      	bx	lr
   db1e0:	42c80000 	.word	0x42c80000
   db1e4:	00000000 	.word	0x00000000

000db1e8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   db1e8:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   db1ea:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   db1ec:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   db1ee:	da0a      	bge.n	db206 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   db1f0:	212d      	movs	r1, #45	; 0x2d
   db1f2:	f002 f852 	bl	dd29a <_ZN5Print5printEc>
            val = -n;
   db1f6:	4261      	negs	r1, r4
            t = print('-');
   db1f8:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   db1fa:	220a      	movs	r2, #10
   db1fc:	4630      	mov	r0, r6
   db1fe:	f002 f85b 	bl	dd2b8 <_ZN5Print11printNumberEmh>
    }
}
   db202:	4428      	add	r0, r5
   db204:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   db206:	4621      	mov	r1, r4
        size_t t = 0;
   db208:	2500      	movs	r5, #0
   db20a:	e7f6      	b.n	db1fa <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000db20c <_ZNK14CellularSignal7printToER5Print>:
{
   db20c:	b570      	push	{r4, r5, r6, lr}
   db20e:	460c      	mov	r4, r1
   db210:	4605      	mov	r5, r0
   db212:	6881      	ldr	r1, [r0, #8]
   db214:	4620      	mov	r0, r4
   db216:	f7ff ffe7 	bl	db1e8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   db21a:	212c      	movs	r1, #44	; 0x2c
   db21c:	4606      	mov	r6, r0
   db21e:	4620      	mov	r0, r4
   db220:	f002 f83b 	bl	dd29a <_ZN5Print5printEc>
   db224:	68e9      	ldr	r1, [r5, #12]
   db226:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   db228:	4620      	mov	r0, r4
   db22a:	f7ff ffdd 	bl	db1e8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   db22e:	4430      	add	r0, r6
   db230:	bd70      	pop	{r4, r5, r6, pc}

000db232 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   db232:	f1a0 0004 	sub.w	r0, r0, #4
   db236:	f7ff bfe9 	b.w	db20c <_ZNK14CellularSignal7printToER5Print>

000db23a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   db23a:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   db23c:	460d      	mov	r5, r1
   db23e:	f100 0410 	add.w	r4, r0, #16
   db242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db246:	e895 0003 	ldmia.w	r5, {r0, r1}
   db24a:	e884 0003 	stmia.w	r4, {r0, r1}
}
   db24e:	2001      	movs	r0, #1
   db250:	bd30      	pop	{r4, r5, pc}

000db252 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   db252:	4770      	bx	lr

000db254 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   db254:	2000      	movs	r0, #0
   db256:	4770      	bx	lr

000db258 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   db258:	b510      	push	{r4, lr}
   db25a:	2110      	movs	r1, #16
   db25c:	4604      	mov	r4, r0
   db25e:	f002 ff81 	bl	de164 <_ZdlPvj>
   db262:	4620      	mov	r0, r4
   db264:	bd10      	pop	{r4, pc}

000db266 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   db266:	b508      	push	{r3, lr}
      { delete this; }
   db268:	f7ff fff6 	bl	db258 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   db26c:	bd08      	pop	{r3, pc}

000db26e <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   db26e:	b530      	push	{r4, r5, lr}
        type_(type) {
   db270:	2200      	movs	r2, #0
   db272:	f64f 749c 	movw	r4, #65436	; 0xff9c
   db276:	6002      	str	r2, [r0, #0]
   db278:	8084      	strh	r4, [r0, #4]
   db27a:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   db27c:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   db27e:	680c      	ldr	r4, [r1, #0]
   db280:	8085      	strh	r5, [r0, #4]
   db282:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   db284:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   db286:	bd30      	pop	{r4, r5, pc}

000db288 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   db288:	b510      	push	{r4, lr}
   db28a:	4604      	mov	r4, r0
    free((void*)msg_);
   db28c:	6800      	ldr	r0, [r0, #0]
   db28e:	f7ff fe13 	bl	daeb8 <free>
}
   db292:	4620      	mov	r0, r4
   db294:	bd10      	pop	{r4, pc}

000db296 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   db296:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   db298:	68c4      	ldr	r4, [r0, #12]
   db29a:	b1f4      	cbz	r4, db2da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   db29c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   db29e:	2b02      	cmp	r3, #2
   db2a0:	d103      	bne.n	db2aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   db2a2:	f104 000c 	add.w	r0, r4, #12
   db2a6:	f7ff ffef 	bl	db288 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   db2aa:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   db2ac:	b135      	cbz	r5, db2bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   db2ae:	4628      	mov	r0, r5
   db2b0:	f7fb f918 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
   db2b4:	2110      	movs	r1, #16
   db2b6:	4628      	mov	r0, r5
   db2b8:	f002 ff54 	bl	de164 <_ZdlPvj>
   db2bc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   db2be:	b135      	cbz	r5, db2ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   db2c0:	4628      	mov	r0, r5
   db2c2:	f7fb f90f 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
   db2c6:	2110      	movs	r1, #16
   db2c8:	4628      	mov	r0, r5
   db2ca:	f002 ff4b 	bl	de164 <_ZdlPvj>
   db2ce:	4620      	mov	r0, r4
   db2d0:	2114      	movs	r1, #20
   db2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db2d6:	f002 bf45 	b.w	de164 <_ZdlPvj>
   db2da:	bd38      	pop	{r3, r4, r5, pc}

000db2dc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   db2dc:	b510      	push	{r4, lr}
   db2de:	b088      	sub	sp, #32
   db2e0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   db2e2:	4668      	mov	r0, sp
   db2e4:	f002 f95f 	bl	dd5a6 <_ZN6StringC1EPKc>
    return (*fn)(p);
   db2e8:	4669      	mov	r1, sp
   db2ea:	a804      	add	r0, sp, #16
   db2ec:	f002 f9a6 	bl	dd63c <_ZN6StringC1ERKS_>
   db2f0:	a804      	add	r0, sp, #16
   db2f2:	47a0      	blx	r4
   db2f4:	4604      	mov	r4, r0
   db2f6:	a804      	add	r0, sp, #16
   db2f8:	f002 f90a 	bl	dd510 <_ZN6StringD1Ev>
    String p(param);
   db2fc:	4668      	mov	r0, sp
   db2fe:	f002 f907 	bl	dd510 <_ZN6StringD1Ev>
}
   db302:	4620      	mov	r0, r4
   db304:	b008      	add	sp, #32
   db306:	bd10      	pop	{r4, pc}

000db308 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   db308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   db30a:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   db30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   db310:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   db312:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   db314:	461a      	mov	r2, r3
   db316:	4669      	mov	r1, sp
   db318:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   db31a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   db31e:	f8ad 4000 	strh.w	r4, [sp]
   db322:	f7ff fd09 	bl	dad38 <spark_function>
}
   db326:	b004      	add	sp, #16
   db328:	bd10      	pop	{r4, pc}

000db32a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   db32a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   db32c:	230c      	movs	r3, #12
   db32e:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   db332:	6803      	ldr	r3, [r0, #0]
   db334:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   db338:	7a03      	ldrb	r3, [r0, #8]
   db33a:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   db33e:	6843      	ldr	r3, [r0, #4]
   db340:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   db342:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   db344:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   db346:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   db34a:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   db34c:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   db350:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   db354:	f7ff fd40 	bl	dadd8 <spark_cloud_disconnect>
}
   db358:	b005      	add	sp, #20
   db35a:	f85d fb04 	ldr.w	pc, [sp], #4

000db35e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   db35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db360:	460e      	mov	r6, r1
   db362:	4604      	mov	r4, r0
   db364:	f856 3b04 	ldr.w	r3, [r6], #4
   db368:	9300      	str	r3, [sp, #0]
   db36a:	460d      	mov	r5, r1
   db36c:	a801      	add	r0, sp, #4
   db36e:	4631      	mov	r1, r6
   db370:	f7ff fe29 	bl	dafc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   db374:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   db376:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   db378:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   db37a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   db37c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   db37e:	2300      	movs	r3, #0
   db380:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   db382:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   db384:	f7f9 fe07 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db388:	4630      	mov	r0, r6
   db38a:	f7f9 fe04 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   db38e:	4628      	mov	r0, r5
   db390:	2108      	movs	r1, #8
   db392:	f002 fee7 	bl	de164 <_ZdlPvj>
        return p;
    }
   db396:	4620      	mov	r0, r4
   db398:	b002      	add	sp, #8
   db39a:	bd70      	pop	{r4, r5, r6, pc}

000db39c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   db39c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   db39e:	b510      	push	{r4, lr}
      if (_M_empty())
   db3a0:	b90a      	cbnz	r2, db3a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   db3a2:	f002 feeb 	bl	de17c <_ZSt25__throw_bad_function_callv>
    }
   db3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db3aa:	68c3      	ldr	r3, [r0, #12]
   db3ac:	4718      	bx	r3

000db3ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db3ae:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   db3b0:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   db3b2:	f100 0110 	add.w	r1, r0, #16
   db3b6:	f7ff fff1 	bl	db39c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   db3ba:	bd08      	pop	{r3, pc}

000db3bc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   db3bc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   db3be:	b510      	push	{r4, lr}
      if (_M_empty())
   db3c0:	b90a      	cbnz	r2, db3c6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   db3c2:	f002 fedb 	bl	de17c <_ZSt25__throw_bad_function_callv>
    }
   db3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db3ca:	68c3      	ldr	r3, [r0, #12]
   db3cc:	4718      	bx	r3

000db3ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db3ce:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   db3d0:	6800      	ldr	r0, [r0, #0]
   db3d2:	f100 0110 	add.w	r1, r0, #16
   db3d6:	f7ff fff1 	bl	db3bc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   db3da:	bd08      	pop	{r3, pc}

000db3dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   db3dc:	b538      	push	{r3, r4, r5, lr}
   db3de:	2300      	movs	r3, #0
   db3e0:	4604      	mov	r4, r0
   db3e2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db3e4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   db3e6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db3e8:	f7f8 fe55 	bl	d4096 <_Znwj>
   db3ec:	b128      	cbz	r0, db3fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   db3ee:	2301      	movs	r3, #1
   db3f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   db3f4:	4b02      	ldr	r3, [pc, #8]	; (db400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   db3f6:	6003      	str	r3, [r0, #0]
   db3f8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db3fa:	6020      	str	r0, [r4, #0]
	}
   db3fc:	4620      	mov	r0, r4
   db3fe:	bd38      	pop	{r3, r4, r5, pc}
   db400:	000e02e8 	.word	0x000e02e8

000db404 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   db404:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db406:	2300      	movs	r3, #0
   db408:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db40a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db40c:	4604      	mov	r4, r0
   db40e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db410:	b12b      	cbz	r3, db41e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db412:	2202      	movs	r2, #2
   db414:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db416:	68eb      	ldr	r3, [r5, #12]
   db418:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db41a:	68ab      	ldr	r3, [r5, #8]
   db41c:	60a3      	str	r3, [r4, #8]
    }
   db41e:	4620      	mov	r0, r4
   db420:	bd38      	pop	{r3, r4, r5, pc}
	...

000db424 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   db424:	b5f0      	push	{r4, r5, r6, r7, lr}
   db426:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   db428:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   db42a:	4668      	mov	r0, sp
   db42c:	f7ff ff1f 	bl	db26e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   db430:	f04f 0302 	mov.w	r3, #2
   db434:	e8d4 2f4f 	ldrexb	r2, [r4]
   db438:	2a00      	cmp	r2, #0
   db43a:	d103      	bne.n	db444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   db43c:	e8c4 3f41 	strexb	r1, r3, [r4]
   db440:	2900      	cmp	r1, #0
   db442:	d1f7      	bne.n	db434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   db444:	d125      	bne.n	db492 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   db446:	f104 050c 	add.w	r5, r4, #12
   db44a:	4669      	mov	r1, sp
   db44c:	4628      	mov	r0, r5
   db44e:	f7ff ff0e 	bl	db26e <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   db452:	f3bf 8f5b 	dmb	ish
   db456:	2301      	movs	r3, #1
   db458:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   db45a:	2000      	movs	r0, #0
   db45c:	f104 0308 	add.w	r3, r4, #8
   db460:	f3bf 8f5b 	dmb	ish
   db464:	e853 6f00 	ldrex	r6, [r3]
   db468:	e843 0200 	strex	r2, r0, [r3]
   db46c:	2a00      	cmp	r2, #0
   db46e:	d1f9      	bne.n	db464 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   db470:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   db474:	b16e      	cbz	r6, db492 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   db476:	f7ff fc0f 	bl	dac98 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   db47a:	b178      	cbz	r0, db49c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   db47c:	4629      	mov	r1, r5
   db47e:	4630      	mov	r0, r6
   db480:	f7ff ff8c 	bl	db39c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   db484:	4630      	mov	r0, r6
   db486:	f7fb f82d 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   db48a:	2110      	movs	r1, #16
   db48c:	4630      	mov	r0, r6
   db48e:	f002 fe69 	bl	de164 <_ZdlPvj>
        p_->setError(std::move(error));
   db492:	4668      	mov	r0, sp
   db494:	f7ff fef8 	bl	db288 <_ZN8particle5ErrorD1Ev>
    }
   db498:	b009      	add	sp, #36	; 0x24
   db49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   db49c:	4631      	mov	r1, r6
   db49e:	a802      	add	r0, sp, #8
   db4a0:	f7ff ffb0 	bl	db404 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   db4a4:	68e0      	ldr	r0, [r4, #12]
   db4a6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db4aa:	b108      	cbz	r0, db4b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   db4ac:	f003 fb98 	bl	debe0 <strdup>
        type_(type) {
   db4b0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   db4b2:	2010      	movs	r0, #16
   db4b4:	f8ad 501c 	strh.w	r5, [sp, #28]
   db4b8:	f7f8 fded 	bl	d4096 <_Znwj>
   db4bc:	4605      	mov	r5, r0
   db4be:	b1e8      	cbz	r0, db4fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   db4c0:	2700      	movs	r7, #0
   db4c2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db4c4:	2018      	movs	r0, #24
   db4c6:	f7f8 fde6 	bl	d4096 <_Znwj>
   db4ca:	4604      	mov	r4, r0
   db4cc:	b188      	cbz	r0, db4f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   db4ce:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   db4d0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   db4d2:	a802      	add	r0, sp, #8
   db4d4:	f7fb f905 	bl	d66e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db4d8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   db4da:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db4dc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db4de:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   db4e0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   db4e2:	a906      	add	r1, sp, #24
   db4e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db4e6:	60e3      	str	r3, [r4, #12]
   db4e8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   db4ec:	9205      	str	r2, [sp, #20]
   db4ee:	f7ff febe 	bl	db26e <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   db4f2:	4b08      	ldr	r3, [pc, #32]	; (db514 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   db4f4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   db4f6:	4b08      	ldr	r3, [pc, #32]	; (db518 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db4f8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   db4fa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   db4fc:	a806      	add	r0, sp, #24
   db4fe:	f7ff fec3 	bl	db288 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   db502:	a802      	add	r0, sp, #8
   db504:	f7fa ffee 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   db508:	2200      	movs	r2, #0
   db50a:	4629      	mov	r1, r5
   db50c:	4803      	ldr	r0, [pc, #12]	; (db51c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   db50e:	f7ff fbcb 	bl	daca8 <application_thread_invoke>
   db512:	e7b7      	b.n	db484 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   db514:	000db3af 	.word	0x000db3af
   db518:	000db645 	.word	0x000db645
   db51c:	000daf9f 	.word	0x000daf9f

000db520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   db520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db524:	b08a      	sub	sp, #40	; 0x28
   db526:	4605      	mov	r5, r0
   db528:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   db52c:	460c      	mov	r4, r1
   db52e:	4617      	mov	r7, r2
   db530:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   db532:	f7ff fc19 	bl	dad68 <spark_cloud_flag_connected>
   db536:	ae07      	add	r6, sp, #28
    if (!connected()) {
   db538:	4682      	mov	sl, r0
   db53a:	bb38      	cbnz	r0, db58c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   db53c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   db540:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   db542:	a905      	add	r1, sp, #20
   db544:	4630      	mov	r0, r6
   db546:	f8ad 3018 	strh.w	r3, [sp, #24]
   db54a:	f7ff fe90 	bl	db26e <_ZN8particle5ErrorC1EOS0_>
   db54e:	2014      	movs	r0, #20
   db550:	f7f8 fda1 	bl	d4096 <_Znwj>
   db554:	4604      	mov	r4, r0
   db556:	b148      	cbz	r0, db56c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   db558:	2302      	movs	r3, #2
   db55a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db55c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   db55e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db562:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   db564:	4631      	mov	r1, r6
   db566:	300c      	adds	r0, #12
   db568:	f7ff fe81 	bl	db26e <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db56c:	4628      	mov	r0, r5
	: __shared_count(__p)
   db56e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db570:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   db574:	f7ff ff32 	bl	db3dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   db578:	4630      	mov	r0, r6
   db57a:	f7ff fe85 	bl	db288 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   db57e:	a805      	add	r0, sp, #20
   db580:	f7ff fe82 	bl	db288 <_ZN8particle5ErrorD1Ev>
}
   db584:	4628      	mov	r0, r5
   db586:	b00a      	add	sp, #40	; 0x28
   db588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   db58c:	230c      	movs	r3, #12
   db58e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   db592:	2014      	movs	r0, #20
   db594:	e9cd aa08 	strd	sl, sl, [sp, #32]
   db598:	9307      	str	r3, [sp, #28]
   db59a:	f7f8 fd7c 	bl	d4096 <_Znwj>
   db59e:	4601      	mov	r1, r0
   db5a0:	b128      	cbz	r0, db5ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   db5a2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   db5a6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db5aa:	f880 a001 	strb.w	sl, [r0, #1]
   db5ae:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db5b0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   db5b2:	f7ff ff13 	bl	db3dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   db5b6:	4b22      	ldr	r3, [pc, #136]	; (db640 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   db5b8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   db5ba:	2008      	movs	r0, #8
   db5bc:	f7f8 fd6b 	bl	d4096 <_Znwj>
   db5c0:	4682      	mov	sl, r0
   db5c2:	b128      	cbz	r0, db5d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db5c4:	9b03      	ldr	r3, [sp, #12]
   db5c6:	f840 3b04 	str.w	r3, [r0], #4
   db5ca:	a904      	add	r1, sp, #16
   db5cc:	f7ff fcfb 	bl	dafc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db5d0:	9600      	str	r6, [sp, #0]
   db5d2:	fa5f f389 	uxtb.w	r3, r9
   db5d6:	4642      	mov	r2, r8
   db5d8:	4639      	mov	r1, r7
   db5da:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   db5dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db5e0:	f7ff fbca 	bl	dad78 <spark_send_event>
   db5e4:	b9b8      	cbnz	r0, db616 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   db5e6:	9b03      	ldr	r3, [sp, #12]
   db5e8:	785b      	ldrb	r3, [r3, #1]
   db5ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   db5ee:	b993      	cbnz	r3, db616 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   db5f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   db5f4:	a905      	add	r1, sp, #20
   db5f6:	a803      	add	r0, sp, #12
   db5f8:	9205      	str	r2, [sp, #20]
   db5fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   db5fe:	f7ff ff11 	bl	db424 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db602:	a805      	add	r0, sp, #20
   db604:	f7ff fe40 	bl	db288 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   db608:	a805      	add	r0, sp, #20
   db60a:	9909      	ldr	r1, [sp, #36]	; 0x24
   db60c:	f7ff fea7 	bl	db35e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   db610:	a806      	add	r0, sp, #24
   db612:	f7f9 fcc0 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db616:	9b03      	ldr	r3, [sp, #12]
   db618:	9305      	str	r3, [sp, #20]
   db61a:	a904      	add	r1, sp, #16
   db61c:	a806      	add	r0, sp, #24
   db61e:	f7ff fcd2 	bl	dafc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   db622:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   db624:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   db626:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   db628:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   db62a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   db62c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   db62e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   db630:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   db632:	f7f9 fcb0 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db636:	a804      	add	r0, sp, #16
   db638:	f7f9 fcad 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   db63c:	e7a2      	b.n	db584 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   db63e:	bf00      	nop
   db640:	000db709 	.word	0x000db709

000db644 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   db644:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db648:	4605      	mov	r5, r0
	  switch (__op)
   db64a:	d007      	beq.n	db65c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   db64c:	2a03      	cmp	r2, #3
   db64e:	d018      	beq.n	db682 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   db650:	2a01      	cmp	r2, #1
   db652:	d101      	bne.n	db658 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db654:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db656:	6003      	str	r3, [r0, #0]
	}
   db658:	2000      	movs	r0, #0
   db65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db65c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   db65e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db660:	f7f8 fd19 	bl	d4096 <_Znwj>
   db664:	4604      	mov	r4, r0
   db666:	b150      	cbz	r0, db67e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   db668:	4631      	mov	r1, r6
   db66a:	f7ff fecb 	bl	db404 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   db66e:	6930      	ldr	r0, [r6, #16]
   db670:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db674:	b108      	cbz	r0, db67a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   db676:	f003 fab3 	bl	debe0 <strdup>
        type_(type) {
   db67a:	6120      	str	r0, [r4, #16]
   db67c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   db67e:	602c      	str	r4, [r5, #0]
	}
   db680:	e7ea      	b.n	db658 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db682:	6804      	ldr	r4, [r0, #0]
   db684:	2c00      	cmp	r4, #0
   db686:	d0e7      	beq.n	db658 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   db688:	f104 0010 	add.w	r0, r4, #16
   db68c:	f7ff fdfc 	bl	db288 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   db690:	4620      	mov	r0, r4
   db692:	f7fa ff27 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   db696:	2118      	movs	r1, #24
   db698:	4620      	mov	r0, r4
   db69a:	f002 fd63 	bl	de164 <_ZdlPvj>
   db69e:	e7db      	b.n	db658 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000db6a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   db6a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db6a2:	2300      	movs	r3, #0
   db6a4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db6a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db6a8:	4604      	mov	r4, r0
   db6aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db6ac:	b12b      	cbz	r3, db6ba <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db6ae:	2202      	movs	r2, #2
   db6b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db6b2:	68eb      	ldr	r3, [r5, #12]
   db6b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db6b6:	68ab      	ldr	r3, [r5, #8]
   db6b8:	60a3      	str	r3, [r4, #8]
    }
   db6ba:	4620      	mov	r0, r4
   db6bc:	bd38      	pop	{r3, r4, r5, pc}

000db6be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   db6be:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db6c0:	b570      	push	{r4, r5, r6, lr}
   db6c2:	4604      	mov	r4, r0
	  switch (__op)
   db6c4:	d007      	beq.n	db6d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   db6c6:	2a03      	cmp	r2, #3
   db6c8:	d012      	beq.n	db6f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   db6ca:	2a01      	cmp	r2, #1
   db6cc:	d101      	bne.n	db6d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db6ce:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db6d0:	6003      	str	r3, [r0, #0]
	}
   db6d2:	2000      	movs	r0, #0
   db6d4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db6d6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   db6d8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db6da:	f7f8 fcdc 	bl	d4096 <_Znwj>
   db6de:	4605      	mov	r5, r0
   db6e0:	b120      	cbz	r0, db6ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   db6e2:	4631      	mov	r1, r6
   db6e4:	f7ff ffdc 	bl	db6a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   db6e8:	7c33      	ldrb	r3, [r6, #16]
   db6ea:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   db6ec:	6025      	str	r5, [r4, #0]
	}
   db6ee:	e7f0      	b.n	db6d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db6f0:	6804      	ldr	r4, [r0, #0]
   db6f2:	2c00      	cmp	r4, #0
   db6f4:	d0ed      	beq.n	db6d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   db6f6:	4620      	mov	r0, r4
   db6f8:	f7fa fef4 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   db6fc:	2114      	movs	r1, #20
   db6fe:	4620      	mov	r0, r4
   db700:	f002 fd30 	bl	de164 <_ZdlPvj>
   db704:	e7e5      	b.n	db6d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000db708 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   db708:	b5f0      	push	{r4, r5, r6, r7, lr}
   db70a:	b089      	sub	sp, #36	; 0x24
   db70c:	4604      	mov	r4, r0
   db70e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   db710:	a801      	add	r0, sp, #4
   db712:	4611      	mov	r1, r2
   db714:	f7ff fe23 	bl	db35e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   db718:	b1a4      	cbz	r4, db744 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   db71a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db71c:	b11d      	cbz	r5, db726 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   db71e:	4628      	mov	r0, r5
   db720:	f003 fa5e 	bl	debe0 <strdup>
   db724:	4605      	mov	r5, r0
   db726:	a801      	add	r0, sp, #4
   db728:	a903      	add	r1, sp, #12
        type_(type) {
   db72a:	9503      	str	r5, [sp, #12]
   db72c:	f8ad 4010 	strh.w	r4, [sp, #16]
   db730:	f7ff fe78 	bl	db424 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db734:	a803      	add	r0, sp, #12
   db736:	f7ff fda7 	bl	db288 <_ZN8particle5ErrorD1Ev>
   db73a:	a802      	add	r0, sp, #8
   db73c:	f7f9 fc2b 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   db740:	b009      	add	sp, #36	; 0x24
   db742:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   db744:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   db746:	2301      	movs	r3, #1
   db748:	e8d5 2f4f 	ldrexb	r2, [r5]
   db74c:	2a00      	cmp	r2, #0
   db74e:	d103      	bne.n	db758 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   db750:	e8c5 3f41 	strexb	r1, r3, [r5]
   db754:	2900      	cmp	r1, #0
   db756:	d1f7      	bne.n	db748 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   db758:	d1ef      	bne.n	db73a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   db75a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   db75c:	f3bf 8f5b 	dmb	ish
   db760:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   db762:	1d2b      	adds	r3, r5, #4
   db764:	f3bf 8f5b 	dmb	ish
   db768:	e853 6f00 	ldrex	r6, [r3]
   db76c:	e843 4200 	strex	r2, r4, [r3]
   db770:	2a00      	cmp	r2, #0
   db772:	d1f9      	bne.n	db768 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   db774:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   db778:	2e00      	cmp	r6, #0
   db77a:	d0de      	beq.n	db73a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   db77c:	4620      	mov	r0, r4
   db77e:	f7ff fa8b 	bl	dac98 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   db782:	4607      	mov	r7, r0
   db784:	b160      	cbz	r0, db7a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   db786:	f105 010c 	add.w	r1, r5, #12
   db78a:	4630      	mov	r0, r6
   db78c:	f7ff fe16 	bl	db3bc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   db790:	4630      	mov	r0, r6
   db792:	f7fa fea7 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   db796:	2110      	movs	r1, #16
   db798:	4630      	mov	r0, r6
   db79a:	f002 fce3 	bl	de164 <_ZdlPvj>
   db79e:	e7cc      	b.n	db73a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   db7a0:	4631      	mov	r1, r6
   db7a2:	a803      	add	r0, sp, #12
   db7a4:	f7ff ff7c 	bl	db6a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   db7a8:	7b2b      	ldrb	r3, [r5, #12]
   db7aa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   db7ae:	2010      	movs	r0, #16
   db7b0:	f7f8 fc71 	bl	d4096 <_Znwj>
   db7b4:	4605      	mov	r5, r0
   db7b6:	b1d0      	cbz	r0, db7ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   db7b8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db7ba:	2014      	movs	r0, #20
   db7bc:	f7f8 fc6b 	bl	d4096 <_Znwj>
   db7c0:	4604      	mov	r4, r0
   db7c2:	b178      	cbz	r0, db7e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   db7c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   db7c6:	4601      	mov	r1, r0
   db7c8:	a803      	add	r0, sp, #12
   db7ca:	f7fa ff8a 	bl	d66e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db7ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   db7d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db7d2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db7d4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   db7d6:	9205      	str	r2, [sp, #20]
   db7d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db7da:	60e3      	str	r3, [r4, #12]
   db7dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   db7e0:	9206      	str	r2, [sp, #24]
   db7e2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   db7e4:	4b06      	ldr	r3, [pc, #24]	; (db800 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   db7e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   db7e8:	4b06      	ldr	r3, [pc, #24]	; (db804 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db7ea:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   db7ec:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   db7ee:	a803      	add	r0, sp, #12
   db7f0:	f7fa fe78 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   db7f4:	2200      	movs	r2, #0
   db7f6:	4629      	mov	r1, r5
   db7f8:	4803      	ldr	r0, [pc, #12]	; (db808 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   db7fa:	f7ff fa55 	bl	daca8 <application_thread_invoke>
   db7fe:	e7c7      	b.n	db790 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   db800:	000db3cf 	.word	0x000db3cf
   db804:	000db6bf 	.word	0x000db6bf
   db808:	000daf9f 	.word	0x000daf9f

000db80c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db80c:	2200      	movs	r2, #0
   db80e:	6840      	ldr	r0, [r0, #4]
   db810:	4611      	mov	r1, r2
   db812:	f7ff bb21 	b.w	dae58 <network_listening>

000db816 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   db816:	2200      	movs	r2, #0
   db818:	6840      	ldr	r0, [r0, #4]
   db81a:	4611      	mov	r1, r2
   db81c:	f7ff bb2c 	b.w	dae78 <network_get_listen_timeout>

000db820 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   db820:	6840      	ldr	r0, [r0, #4]
   db822:	2200      	movs	r2, #0
   db824:	f7ff bb20 	b.w	dae68 <network_set_listen_timeout>

000db828 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   db828:	6840      	ldr	r0, [r0, #4]
   db82a:	2200      	movs	r2, #0
   db82c:	f081 0101 	eor.w	r1, r1, #1
   db830:	f7ff bb0a 	b.w	dae48 <network_listen>

000db834 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   db834:	2300      	movs	r3, #0
   db836:	6840      	ldr	r0, [r0, #4]
   db838:	461a      	mov	r2, r3
   db83a:	4619      	mov	r1, r3
   db83c:	f7ff bafc 	b.w	dae38 <network_off>

000db840 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   db840:	2300      	movs	r3, #0
   db842:	6840      	ldr	r0, [r0, #4]
   db844:	461a      	mov	r2, r3
   db846:	4619      	mov	r1, r3
   db848:	f7ff baee 	b.w	dae28 <network_on>

000db84c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db84c:	2200      	movs	r2, #0
   db84e:	6840      	ldr	r0, [r0, #4]
   db850:	4611      	mov	r1, r2
   db852:	f7ff bae1 	b.w	dae18 <network_ready>

000db856 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   db856:	2200      	movs	r2, #0
   db858:	6840      	ldr	r0, [r0, #4]
   db85a:	4611      	mov	r1, r2
   db85c:	f7ff bacc 	b.w	dadf8 <network_connecting>

000db860 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db860:	6840      	ldr	r0, [r0, #4]
   db862:	2200      	movs	r2, #0
   db864:	2102      	movs	r1, #2
   db866:	f7ff bacf 	b.w	dae08 <network_disconnect>

000db86a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   db86a:	2300      	movs	r3, #0
   db86c:	6840      	ldr	r0, [r0, #4]
   db86e:	461a      	mov	r2, r3
   db870:	f7ff baba 	b.w	dade8 <network_connect>

000db874 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   db874:	4b02      	ldr	r3, [pc, #8]	; (db880 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   db876:	2203      	movs	r2, #3
   db878:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   db87a:	4a02      	ldr	r2, [pc, #8]	; (db884 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   db87c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   db87e:	4770      	bx	lr
   db880:	2003e4cc 	.word	0x2003e4cc
   db884:	000e0304 	.word	0x000e0304

000db888 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   db888:	6800      	ldr	r0, [r0, #0]
   db88a:	f000 b951 	b.w	dbb30 <_ZN7TwoWire4lockEv>

000db88e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   db88e:	b510      	push	{r4, lr}
   db890:	4604      	mov	r4, r0
      lock_(_lock) {
   db892:	6001      	str	r1, [r0, #0]
   db894:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   db896:	b10a      	cbz	r2, db89c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   db898:	f7ff fff6 	bl	db888 <_ZN9FuelGauge4lockEv>
}
   db89c:	4620      	mov	r0, r4
   db89e:	bd10      	pop	{r4, pc}

000db8a0 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   db8a0:	b513      	push	{r0, r1, r4, lr}
   db8a2:	4604      	mov	r4, r0
   db8a4:	9101      	str	r1, [sp, #4]
            return &Wire1;
   db8a6:	f002 fc39 	bl	de11c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   db8aa:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   db8ac:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   db8ae:	4620      	mov	r0, r4
   db8b0:	f7ff ffed 	bl	db88e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   db8b4:	4620      	mov	r0, r4
   db8b6:	b002      	add	sp, #8
   db8b8:	bd10      	pop	{r4, pc}

000db8ba <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   db8ba:	6800      	ldr	r0, [r0, #0]
   db8bc:	f000 b941 	b.w	dbb42 <_ZN7TwoWire6unlockEv>

000db8c0 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   db8c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   db8c4:	4604      	mov	r4, r0
   db8c6:	460d      	mov	r5, r1
   db8c8:	4617      	mov	r7, r2
   db8ca:	461e      	mov	r6, r3
      { _M_device.lock(); }
   db8cc:	f7ff ffdc 	bl	db888 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db8d0:	2336      	movs	r3, #54	; 0x36
   db8d2:	f88d 3000 	strb.w	r3, [sp]
   db8d6:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   db8d8:	6820      	ldr	r0, [r4, #0]
   db8da:	9301      	str	r3, [sp, #4]
   db8dc:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   db8e0:	230a      	movs	r3, #10
   db8e2:	4669      	mov	r1, sp
   db8e4:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db8e6:	f88d 8008 	strb.w	r8, [sp, #8]
   db8ea:	f000 f905 	bl	dbaf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   db8ee:	6820      	ldr	r0, [r4, #0]
   db8f0:	6803      	ldr	r3, [r0, #0]
   db8f2:	4629      	mov	r1, r5
   db8f4:	689b      	ldr	r3, [r3, #8]
   db8f6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   db8f8:	6820      	ldr	r0, [r4, #0]
   db8fa:	4641      	mov	r1, r8
   db8fc:	f000 f914 	bl	dbb28 <_ZN7TwoWire15endTransmissionEh>
   db900:	4605      	mov	r5, r0
   db902:	b140      	cbz	r0, db916 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   db904:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   db908:	4620      	mov	r0, r4
   db90a:	f7ff ffd6 	bl	db8ba <_ZN9FuelGauge6unlockEv>
}
   db90e:	4628      	mov	r0, r5
   db910:	b004      	add	sp, #16
   db912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   db916:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   db918:	6820      	ldr	r0, [r4, #0]
   db91a:	9301      	str	r3, [sp, #4]
   db91c:	4669      	mov	r1, sp
   db91e:	f000 f8bb 	bl	dba98 <_ZN7TwoWire11requestFromERK16WireTransmission>
   db922:	2802      	cmp	r0, #2
   db924:	d1ee      	bne.n	db904 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   db926:	6820      	ldr	r0, [r4, #0]
   db928:	6803      	ldr	r3, [r0, #0]
   db92a:	695b      	ldr	r3, [r3, #20]
   db92c:	4798      	blx	r3
   db92e:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   db930:	6820      	ldr	r0, [r4, #0]
   db932:	6803      	ldr	r3, [r0, #0]
   db934:	695b      	ldr	r3, [r3, #20]
   db936:	4798      	blx	r3
   db938:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   db93a:	e7e5      	b.n	db908 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000db93c <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   db93c:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   db93e:	2300      	movs	r3, #0
   db940:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   db944:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   db948:	f10d 0206 	add.w	r2, sp, #6
   db94c:	f10d 0307 	add.w	r3, sp, #7
   db950:	2104      	movs	r1, #4
   db952:	f7ff ffb5 	bl	db8c0 <_ZN9FuelGauge12readRegisterEhRhS0_>
   db956:	b9b0      	cbnz	r0, db986 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   db958:	f89d 0007 	ldrb.w	r0, [sp, #7]
   db95c:	f002 fd64 	bl	de428 <__aeabi_i2d>
   db960:	4b0a      	ldr	r3, [pc, #40]	; (db98c <_ZN9FuelGauge6getSoCEv+0x50>)
   db962:	2200      	movs	r2, #0
   db964:	f002 fdca 	bl	de4fc <__aeabi_dmul>
   db968:	f002 fffa 	bl	de960 <__aeabi_d2f>
        return MSB + decimal;
   db96c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   db970:	ee00 3a10 	vmov	s0, r3
   db974:	ee07 0a90 	vmov	s15, r0
   db978:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   db97c:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   db980:	b003      	add	sp, #12
   db982:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   db986:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   db98a:	e7f9      	b.n	db980 <_ZN9FuelGauge6getSoCEv+0x44>
   db98c:	3f700000 	.word	0x3f700000

000db990 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   db990:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   db994:	4616      	mov	r6, r2
   db996:	4604      	mov	r4, r0
   db998:	461d      	mov	r5, r3
   db99a:	460f      	mov	r7, r1
      { _M_device.lock(); }
   db99c:	f7ff ff74 	bl	db888 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db9a0:	2336      	movs	r3, #54	; 0x36
   db9a2:	f88d 3000 	strb.w	r3, [sp]
   db9a6:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   db9a8:	6820      	ldr	r0, [r4, #0]
   db9aa:	9301      	str	r3, [sp, #4]
   db9ac:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   db9b0:	230a      	movs	r3, #10
   db9b2:	4669      	mov	r1, sp
   db9b4:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db9b6:	f88d 8008 	strb.w	r8, [sp, #8]
   db9ba:	f000 f89d 	bl	dbaf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   db9be:	6820      	ldr	r0, [r4, #0]
   db9c0:	6803      	ldr	r3, [r0, #0]
   db9c2:	4639      	mov	r1, r7
   db9c4:	689b      	ldr	r3, [r3, #8]
   db9c6:	4798      	blx	r3
    i2c_.write(MSB);
   db9c8:	6820      	ldr	r0, [r4, #0]
   db9ca:	6803      	ldr	r3, [r0, #0]
   db9cc:	4631      	mov	r1, r6
   db9ce:	689b      	ldr	r3, [r3, #8]
   db9d0:	4798      	blx	r3
    i2c_.write(LSB);
   db9d2:	6820      	ldr	r0, [r4, #0]
   db9d4:	6803      	ldr	r3, [r0, #0]
   db9d6:	4629      	mov	r1, r5
   db9d8:	689b      	ldr	r3, [r3, #8]
   db9da:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   db9dc:	4641      	mov	r1, r8
   db9de:	6820      	ldr	r0, [r4, #0]
   db9e0:	f000 f8a2 	bl	dbb28 <_ZN7TwoWire15endTransmissionEh>
   db9e4:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   db9e6:	4620      	mov	r0, r4
   db9e8:	bf0c      	ite	eq
   db9ea:	2500      	moveq	r5, #0
   db9ec:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   db9f0:	f7ff ff63 	bl	db8ba <_ZN9FuelGauge6unlockEv>
}
   db9f4:	4628      	mov	r0, r5
   db9f6:	b004      	add	sp, #16
   db9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db9fc <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   db9fc:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   db9fe:	2240      	movs	r2, #64	; 0x40
   dba00:	2300      	movs	r3, #0
   dba02:	2106      	movs	r1, #6
   dba04:	f7ff ffc4 	bl	db990 <_ZN9FuelGauge13writeRegisterEhhh>
}
   dba08:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   dba0c:	bd08      	pop	{r3, pc}

000dba0e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   dba0e:	4770      	bx	lr

000dba10 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dba10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dba12:	4606      	mov	r6, r0
   dba14:	4615      	mov	r5, r2
   dba16:	460c      	mov	r4, r1
   dba18:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dba1a:	42bc      	cmp	r4, r7
   dba1c:	d006      	beq.n	dba2c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dba1e:	6833      	ldr	r3, [r6, #0]
   dba20:	f814 1b01 	ldrb.w	r1, [r4], #1
   dba24:	689b      	ldr	r3, [r3, #8]
   dba26:	4630      	mov	r0, r6
   dba28:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   dba2a:	e7f6      	b.n	dba1a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   dba2c:	4628      	mov	r0, r5
   dba2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dba30 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   dba30:	7c00      	ldrb	r0, [r0, #16]
   dba32:	2200      	movs	r2, #0
   dba34:	f7fe bf36 	b.w	da8a4 <hal_i2c_write>

000dba38 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   dba38:	7c00      	ldrb	r0, [r0, #16]
   dba3a:	2100      	movs	r1, #0
   dba3c:	f7fe bf3a 	b.w	da8b4 <hal_i2c_available>

000dba40 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   dba40:	7c00      	ldrb	r0, [r0, #16]
   dba42:	2100      	movs	r1, #0
   dba44:	f7fe bf3e 	b.w	da8c4 <hal_i2c_read>

000dba48 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   dba48:	7c00      	ldrb	r0, [r0, #16]
   dba4a:	2100      	movs	r1, #0
   dba4c:	f7fe bf42 	b.w	da8d4 <hal_i2c_peek>

000dba50 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   dba50:	7c00      	ldrb	r0, [r0, #16]
   dba52:	2100      	movs	r1, #0
   dba54:	f7fe bf46 	b.w	da8e4 <hal_i2c_flush>

000dba58 <_ZN7TwoWireD0Ev>:
   dba58:	b510      	push	{r4, lr}
   dba5a:	2114      	movs	r1, #20
   dba5c:	4604      	mov	r4, r0
   dba5e:	f002 fb81 	bl	de164 <_ZdlPvj>
   dba62:	4620      	mov	r0, r4
   dba64:	bd10      	pop	{r4, pc}
	...

000dba68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   dba68:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dba6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dba6e:	4604      	mov	r4, r0
   dba70:	4608      	mov	r0, r1
   dba72:	2100      	movs	r1, #0
   dba74:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dba78:	4b03      	ldr	r3, [pc, #12]	; (dba88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   dba7a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   dba7c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   dba7e:	4611      	mov	r1, r2
   dba80:	f7fe ff40 	bl	da904 <hal_i2c_init>
}
   dba84:	4620      	mov	r0, r4
   dba86:	bd10      	pop	{r4, pc}
   dba88:	000e0340 	.word	0x000e0340

000dba8c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dba8c:	2300      	movs	r3, #0
   dba8e:	7c00      	ldrb	r0, [r0, #16]
   dba90:	461a      	mov	r2, r3
   dba92:	4619      	mov	r1, r3
   dba94:	f7fe beee 	b.w	da874 <hal_i2c_begin>

000dba98 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   dba98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   dba9a:	2200      	movs	r2, #0
   dba9c:	2314      	movs	r3, #20
   dba9e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   dbaa2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   dbaa6:	780b      	ldrb	r3, [r1, #0]
   dbaa8:	f88d 3008 	strb.w	r3, [sp, #8]
   dbaac:	684b      	ldr	r3, [r1, #4]
   dbaae:	9303      	str	r3, [sp, #12]
   dbab0:	68cb      	ldr	r3, [r1, #12]
   dbab2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   dbab4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   dbab6:	7a0b      	ldrb	r3, [r1, #8]
   dbab8:	9305      	str	r3, [sp, #20]
   dbaba:	a901      	add	r1, sp, #4
   dbabc:	f7fe ff3a 	bl	da934 <hal_i2c_request_ex>
}
   dbac0:	b007      	add	sp, #28
   dbac2:	f85d fb04 	ldr.w	pc, [sp], #4

000dbac6 <_ZN7TwoWire11requestFromEhjh>:
{
   dbac6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   dbac8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dbaca:	f88d 1000 	strb.w	r1, [sp]
   dbace:	f04f 0164 	mov.w	r1, #100	; 0x64
   dbad2:	9103      	str	r1, [sp, #12]
   dbad4:	bf18      	it	ne
   dbad6:	2301      	movne	r3, #1
   dbad8:	4669      	mov	r1, sp
    size_ = size;
   dbada:	9201      	str	r2, [sp, #4]
   dbadc:	f88d 3008 	strb.w	r3, [sp, #8]
   dbae0:	f7ff ffda 	bl	dba98 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   dbae4:	b005      	add	sp, #20
   dbae6:	f85d fb04 	ldr.w	pc, [sp], #4

000dbaea <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   dbaea:	7c00      	ldrb	r0, [r0, #16]
   dbaec:	2200      	movs	r2, #0
   dbaee:	f7fe bec9 	b.w	da884 <hal_i2c_begin_transmission>

000dbaf2 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   dbaf2:	b2c9      	uxtb	r1, r1
   dbaf4:	f7ff bff9 	b.w	dbaea <_ZN7TwoWire17beginTransmissionEh>

000dbaf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   dbaf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   dbafa:	2300      	movs	r3, #0
   dbafc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   dbb00:	684a      	ldr	r2, [r1, #4]
   dbb02:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   dbb04:	2314      	movs	r3, #20
    };
   dbb06:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   dbb08:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   dbb0c:	780b      	ldrb	r3, [r1, #0]
    };
   dbb0e:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   dbb10:	7a0a      	ldrb	r2, [r1, #8]
   dbb12:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   dbb14:	7c00      	ldrb	r0, [r0, #16]
    };
   dbb16:	f88d 3008 	strb.w	r3, [sp, #8]
   dbb1a:	aa01      	add	r2, sp, #4
   dbb1c:	4619      	mov	r1, r3
   dbb1e:	f7fe feb1 	bl	da884 <hal_i2c_begin_transmission>
}
   dbb22:	b007      	add	sp, #28
   dbb24:	f85d fb04 	ldr.w	pc, [sp], #4

000dbb28 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   dbb28:	7c00      	ldrb	r0, [r0, #16]
   dbb2a:	2200      	movs	r2, #0
   dbb2c:	f7fe beb2 	b.w	da894 <hal_i2c_end_transmission>

000dbb30 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   dbb30:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   dbb32:	2100      	movs	r1, #0
   dbb34:	7c00      	ldrb	r0, [r0, #16]
   dbb36:	f7fe feed 	bl	da914 <hal_i2c_lock>
}
   dbb3a:	fab0 f080 	clz	r0, r0
   dbb3e:	0940      	lsrs	r0, r0, #5
   dbb40:	bd08      	pop	{r3, pc}

000dbb42 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dbb42:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   dbb44:	2100      	movs	r1, #0
   dbb46:	7c00      	ldrb	r0, [r0, #16]
   dbb48:	f7fe feec 	bl	da924 <hal_i2c_unlock>
}
   dbb4c:	fab0 f080 	clz	r0, r0
   dbb50:	0940      	lsrs	r0, r0, #5
   dbb52:	bd08      	pop	{r3, pc}

000dbb54 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   dbb54:	4700      	bx	r0
	...

000dbb58 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   dbb58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   dbb5c:	2400      	movs	r4, #0
{
   dbb5e:	461d      	mov	r5, r3
   dbb60:	460f      	mov	r7, r1
   dbb62:	4690      	mov	r8, r2
   dbb64:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   dbb66:	f7fe fe75 	bl	da854 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   dbb6a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dbb6c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   dbb70:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dbb74:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   dbb78:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   dbb7c:	bfa2      	ittt	ge
   dbb7e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   dbb82:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   dbb86:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dbb88:	4907      	ldr	r1, [pc, #28]	; (dbba8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   dbb8a:	9400      	str	r4, [sp, #0]
   dbb8c:	4643      	mov	r3, r8
   dbb8e:	463a      	mov	r2, r7
   dbb90:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   dbb92:	bfa8      	it	ge
   dbb94:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dbb98:	f7fe fe54 	bl	da844 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   dbb9c:	fab0 f080 	clz	r0, r0
   dbba0:	0940      	lsrs	r0, r0, #5
   dbba2:	b004      	add	sp, #16
   dbba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbba8:	000dbb55 	.word	0x000dbb55

000dbbac <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   dbbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbbae:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   dbbb0:	f7fe fe50 	bl	da854 <HAL_Interrupts_Detach>
   dbbb4:	4605      	mov	r5, r0
   dbbb6:	b970      	cbnz	r0, dbbd6 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   dbbb8:	4f08      	ldr	r7, [pc, #32]	; (dbbdc <_Z15detachInterruptt+0x30>)
   dbbba:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   dbbbe:	b146      	cbz	r6, dbbd2 <_Z15detachInterruptt+0x26>
   dbbc0:	4630      	mov	r0, r6
   dbbc2:	f7fa fc8f 	bl	d64e4 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   dbbc6:	2110      	movs	r1, #16
   dbbc8:	4630      	mov	r0, r6
   dbbca:	f002 facb 	bl	de164 <_ZdlPvj>
        handlers[pin] = nullptr;
   dbbce:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   dbbd2:	2001      	movs	r0, #1
   dbbd4:	e000      	b.n	dbbd8 <_Z15detachInterruptt+0x2c>
        return false;
   dbbd6:	2000      	movs	r0, #0
    }
    return true;
}
   dbbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dbbda:	bf00      	nop
   dbbdc:	2003e4d4 	.word	0x2003e4d4

000dbbe0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dbbe0:	4770      	bx	lr

000dbbe2 <_ZN9IPAddressD0Ev>:
   dbbe2:	b510      	push	{r4, lr}
   dbbe4:	2118      	movs	r1, #24
   dbbe6:	4604      	mov	r4, r0
   dbbe8:	f002 fabc 	bl	de164 <_ZdlPvj>
   dbbec:	4620      	mov	r0, r4
   dbbee:	bd10      	pop	{r4, pc}

000dbbf0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dbbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dbbf2:	7d03      	ldrb	r3, [r0, #20]
   dbbf4:	2b06      	cmp	r3, #6
{
   dbbf6:	b08d      	sub	sp, #52	; 0x34
   dbbf8:	460e      	mov	r6, r1
   dbbfa:	f100 0704 	add.w	r7, r0, #4
   dbbfe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   dbc02:	d012      	beq.n	dbc2a <_ZNK9IPAddress7printToER5Print+0x3a>
   dbc04:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   dbc08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dbc0c:	220a      	movs	r2, #10
   dbc0e:	4630      	mov	r0, r6
   dbc10:	f001 fb52 	bl	dd2b8 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dbc14:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dbc16:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   dbc18:	d019      	beq.n	dbc4e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   dbc1a:	2c00      	cmp	r4, #0
   dbc1c:	d0f4      	beq.n	dbc08 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   dbc1e:	212e      	movs	r1, #46	; 0x2e
   dbc20:	4630      	mov	r0, r6
   dbc22:	f001 fb3a 	bl	dd29a <_ZN5Print5printEc>
   dbc26:	4404      	add	r4, r0
   dbc28:	e7ee      	b.n	dbc08 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dbc2a:	232f      	movs	r3, #47	; 0x2f
   dbc2c:	466a      	mov	r2, sp
   dbc2e:	4639      	mov	r1, r7
   dbc30:	200a      	movs	r0, #10
		buf[0] = 0;
   dbc32:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dbc36:	f7fe fe85 	bl	da944 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   dbc3a:	4668      	mov	r0, sp
   dbc3c:	f002 ffed 	bl	dec1a <strlen>
   dbc40:	6833      	ldr	r3, [r6, #0]
   dbc42:	4602      	mov	r2, r0
   dbc44:	68db      	ldr	r3, [r3, #12]
   dbc46:	4669      	mov	r1, sp
   dbc48:	4630      	mov	r0, r6
   dbc4a:	4798      	blx	r3
   dbc4c:	4604      	mov	r4, r0
    }
    return n;
}
   dbc4e:	4620      	mov	r0, r4
   dbc50:	b00d      	add	sp, #52	; 0x34
   dbc52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dbc54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   dbc54:	b510      	push	{r4, lr}
   dbc56:	4b05      	ldr	r3, [pc, #20]	; (dbc6c <_ZN9IPAddressC1Ev+0x18>)
   dbc58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dbc5a:	2211      	movs	r2, #17
   dbc5c:	f840 3b04 	str.w	r3, [r0], #4
   dbc60:	2100      	movs	r1, #0
   dbc62:	f002 ff33 	bl	deacc <memset>
}
   dbc66:	4620      	mov	r0, r4
   dbc68:	bd10      	pop	{r4, pc}
   dbc6a:	bf00      	nop
   dbc6c:	000e0368 	.word	0x000e0368

000dbc70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dbc70:	4603      	mov	r3, r0
   dbc72:	4a07      	ldr	r2, [pc, #28]	; (dbc90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dbc74:	b510      	push	{r4, lr}
   dbc76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dbc7a:	f101 0210 	add.w	r2, r1, #16
   dbc7e:	f851 4b04 	ldr.w	r4, [r1], #4
   dbc82:	f843 4b04 	str.w	r4, [r3], #4
   dbc86:	4291      	cmp	r1, r2
   dbc88:	d1f9      	bne.n	dbc7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dbc8a:	780a      	ldrb	r2, [r1, #0]
   dbc8c:	701a      	strb	r2, [r3, #0]
}
   dbc8e:	bd10      	pop	{r4, pc}
   dbc90:	000e0368 	.word	0x000e0368

000dbc94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dbc94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dbc96:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dbc9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dbc9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dbca2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dbca6:	2304      	movs	r3, #4
   dbca8:	6041      	str	r1, [r0, #4]
   dbcaa:	7503      	strb	r3, [r0, #20]
}
   dbcac:	bd10      	pop	{r4, pc}

000dbcae <_ZN9IPAddressaSEPKh>:
{
   dbcae:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dbcb0:	78cb      	ldrb	r3, [r1, #3]
   dbcb2:	9300      	str	r3, [sp, #0]
   dbcb4:	788b      	ldrb	r3, [r1, #2]
   dbcb6:	784a      	ldrb	r2, [r1, #1]
   dbcb8:	7809      	ldrb	r1, [r1, #0]
   dbcba:	f7ff ffeb 	bl	dbc94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dbcbe:	b002      	add	sp, #8
   dbcc0:	bd10      	pop	{r4, pc}

000dbcc2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   dbcc2:	f100 0310 	add.w	r3, r0, #16
   dbcc6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   dbcc8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   dbccc:	2901      	cmp	r1, #1
   dbcce:	4618      	mov	r0, r3
   dbcd0:	d108      	bne.n	dbce4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   dbcd2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   dbcd6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   dbcda:	3a01      	subs	r2, #1
   dbcdc:	f103 0310 	add.w	r3, r3, #16
   dbce0:	d1f2      	bne.n	dbcc8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   dbce2:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   dbce4:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   dbce6:	bf04      	itt	eq
   dbce8:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   dbcec:	1852      	addeq	r2, r2, r1
   dbcee:	e7f4      	b.n	dbcda <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000dbcf0 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   dbcf0:	b40e      	push	{r1, r2, r3}
   dbcf2:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbcf4:	b088      	sub	sp, #32
   dbcf6:	af00      	add	r7, sp, #0
   dbcf8:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbcfc:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   dbcfe:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbd02:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   dbd04:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbd06:	462b      	mov	r3, r5
   dbd08:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   dbd0a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbd0c:	f7ff f8fc 	bl	daf08 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   dbd10:	280f      	cmp	r0, #15
   dbd12:	687a      	ldr	r2, [r7, #4]
   dbd14:	d91a      	bls.n	dbd4c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   dbd16:	f100 0308 	add.w	r3, r0, #8
   dbd1a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   dbd1e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   dbd20:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbd24:	1c41      	adds	r1, r0, #1
   dbd26:	462b      	mov	r3, r5
   dbd28:	4668      	mov	r0, sp
        va_start(args, fmt);
   dbd2a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbd2c:	f7ff f8ec 	bl	daf08 <vsnprintf>
        if (n > 0) {
   dbd30:	1e02      	subs	r2, r0, #0
   dbd32:	dd04      	ble.n	dbd3e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   dbd34:	6823      	ldr	r3, [r4, #0]
   dbd36:	4669      	mov	r1, sp
   dbd38:	689b      	ldr	r3, [r3, #8]
   dbd3a:	4620      	mov	r0, r4
   dbd3c:	4798      	blx	r3
   dbd3e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   dbd40:	3720      	adds	r7, #32
   dbd42:	46bd      	mov	sp, r7
   dbd44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dbd48:	b003      	add	sp, #12
   dbd4a:	4770      	bx	lr
    } else if (n > 0) {
   dbd4c:	2800      	cmp	r0, #0
   dbd4e:	d0f7      	beq.n	dbd40 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   dbd50:	6823      	ldr	r3, [r4, #0]
   dbd52:	4602      	mov	r2, r0
   dbd54:	689b      	ldr	r3, [r3, #8]
   dbd56:	f107 0110 	add.w	r1, r7, #16
   dbd5a:	4620      	mov	r0, r4
   dbd5c:	4798      	blx	r3
}
   dbd5e:	e7ef      	b.n	dbd40 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000dbd60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dbd60:	b510      	push	{r4, lr}
          _M_dispose();
   dbd62:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dbd64:	4604      	mov	r4, r0
          _M_dispose();
   dbd66:	689b      	ldr	r3, [r3, #8]
   dbd68:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dbd6a:	68a3      	ldr	r3, [r4, #8]
   dbd6c:	3b01      	subs	r3, #1
   dbd6e:	60a3      	str	r3, [r4, #8]
   dbd70:	b92b      	cbnz	r3, dbd7e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   dbd72:	6823      	ldr	r3, [r4, #0]
   dbd74:	4620      	mov	r0, r4
   dbd76:	68db      	ldr	r3, [r3, #12]
    }
   dbd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   dbd7c:	4718      	bx	r3
    }
   dbd7e:	bd10      	pop	{r4, pc}

000dbd80 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   dbd80:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dbd82:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   dbd84:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dbd88:	689b      	ldr	r3, [r3, #8]
   dbd8a:	2201      	movs	r2, #1
   dbd8c:	f10d 0107 	add.w	r1, sp, #7
   dbd90:	4798      	blx	r3
}
   dbd92:	b003      	add	sp, #12
   dbd94:	f85d fb04 	ldr.w	pc, [sp], #4

000dbd98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   dbd98:	b538      	push	{r3, r4, r5, lr}
   dbd9a:	680b      	ldr	r3, [r1, #0]
   dbd9c:	6003      	str	r3, [r0, #0]
   dbd9e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   dbda0:	6843      	ldr	r3, [r0, #4]
   dbda2:	429d      	cmp	r5, r3
    class __shared_ptr
   dbda4:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   dbda6:	d00c      	beq.n	dbdc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   dbda8:	b115      	cbz	r5, dbdb0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   dbdaa:	686b      	ldr	r3, [r5, #4]
   dbdac:	3301      	adds	r3, #1
   dbdae:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   dbdb0:	6860      	ldr	r0, [r4, #4]
   dbdb2:	b128      	cbz	r0, dbdc0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   dbdb4:	6843      	ldr	r3, [r0, #4]
   dbdb6:	3b01      	subs	r3, #1
   dbdb8:	6043      	str	r3, [r0, #4]
   dbdba:	b90b      	cbnz	r3, dbdc0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   dbdbc:	f7ff ffd0 	bl	dbd60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   dbdc0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   dbdc2:	4620      	mov	r0, r4
   dbdc4:	bd38      	pop	{r3, r4, r5, pc}

000dbdc6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbdc6:	460b      	mov	r3, r1
   dbdc8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   dbdca:	2200      	movs	r2, #0
   dbdcc:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   dbdce:	e9c0 2200 	strd	r2, r2, [r0]
   dbdd2:	4604      	mov	r4, r0
        t_ = t;
   dbdd4:	6083      	str	r3, [r0, #8]
    if (t) {
   dbdd6:	b90b      	cbnz	r3, dbddc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   dbdd8:	4620      	mov	r0, r4
   dbdda:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   dbddc:	f7ff ffdc 	bl	dbd98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   dbde0:	e7fa      	b.n	dbdd8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000dbde2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   dbde2:	6883      	ldr	r3, [r0, #8]
   dbde4:	b1eb      	cbz	r3, dbe22 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   dbde6:	781a      	ldrb	r2, [r3, #0]
   dbde8:	2a03      	cmp	r2, #3
   dbdea:	d81a      	bhi.n	dbe22 <_ZNK5spark9JSONValue4typeEv+0x40>
   dbdec:	e8df f002 	tbb	[pc, r2]
   dbdf0:	1b021704 	.word	0x1b021704
   dbdf4:	2005      	movs	r0, #5
   dbdf6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   dbdf8:	6802      	ldr	r2, [r0, #0]
   dbdfa:	685b      	ldr	r3, [r3, #4]
   dbdfc:	6852      	ldr	r2, [r2, #4]
   dbdfe:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   dbe00:	282d      	cmp	r0, #45	; 0x2d
   dbe02:	d012      	beq.n	dbe2a <_ZNK5spark9JSONValue4typeEv+0x48>
   dbe04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dbe08:	2b09      	cmp	r3, #9
   dbe0a:	d90e      	bls.n	dbe2a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   dbe0c:	2874      	cmp	r0, #116	; 0x74
   dbe0e:	d00e      	beq.n	dbe2e <_ZNK5spark9JSONValue4typeEv+0x4c>
   dbe10:	2866      	cmp	r0, #102	; 0x66
   dbe12:	d00c      	beq.n	dbe2e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   dbe14:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   dbe18:	4258      	negs	r0, r3
   dbe1a:	4158      	adcs	r0, r3
   dbe1c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   dbe1e:	2006      	movs	r0, #6
   dbe20:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   dbe22:	2000      	movs	r0, #0
   dbe24:	4770      	bx	lr
        return JSON_TYPE_STRING;
   dbe26:	2004      	movs	r0, #4
   dbe28:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   dbe2a:	2003      	movs	r0, #3
   dbe2c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   dbe2e:	2002      	movs	r0, #2
}
   dbe30:	4770      	bx	lr

000dbe32 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   dbe32:	b510      	push	{r4, lr}
   dbe34:	4604      	mov	r4, r0
    switch (type()) {
   dbe36:	f7ff ffd4 	bl	dbde2 <_ZNK5spark9JSONValue4typeEv>
   dbe3a:	2802      	cmp	r0, #2
   dbe3c:	d00e      	beq.n	dbe5c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   dbe3e:	1ec3      	subs	r3, r0, #3
   dbe40:	b2db      	uxtb	r3, r3
   dbe42:	2b01      	cmp	r3, #1
   dbe44:	d814      	bhi.n	dbe70 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   dbe46:	6822      	ldr	r2, [r4, #0]
   dbe48:	68a3      	ldr	r3, [r4, #8]
   dbe4a:	6850      	ldr	r0, [r2, #4]
   dbe4c:	685b      	ldr	r3, [r3, #4]
}
   dbe4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   dbe52:	220a      	movs	r2, #10
   dbe54:	2100      	movs	r1, #0
   dbe56:	4418      	add	r0, r3
   dbe58:	f002 bfc6 	b.w	dede8 <strtol>
        const char* const s = d_->json + t_->start;
   dbe5c:	6822      	ldr	r2, [r4, #0]
   dbe5e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dbe60:	6852      	ldr	r2, [r2, #4]
   dbe62:	685b      	ldr	r3, [r3, #4]
   dbe64:	5cd0      	ldrb	r0, [r2, r3]
   dbe66:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   dbe6a:	4258      	negs	r0, r3
   dbe6c:	4158      	adcs	r0, r3
}
   dbe6e:	bd10      	pop	{r4, pc}
    switch (type()) {
   dbe70:	2000      	movs	r0, #0
   dbe72:	e7fc      	b.n	dbe6e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000dbe74 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbe74:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dbe76:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   dbe78:	e9c0 3300 	strd	r3, r3, [r0]
   dbe7c:	4604      	mov	r4, r0
        n_(0) {
   dbe7e:	480e      	ldr	r0, [pc, #56]	; (dbeb8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   dbe80:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   dbe84:	b1a9      	cbz	r1, dbeb2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   dbe86:	780b      	ldrb	r3, [r1, #0]
   dbe88:	2b03      	cmp	r3, #3
   dbe8a:	d006      	beq.n	dbe9a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   dbe8c:	b98b      	cbnz	r3, dbeb2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   dbe8e:	6813      	ldr	r3, [r2, #0]
   dbe90:	6858      	ldr	r0, [r3, #4]
   dbe92:	684b      	ldr	r3, [r1, #4]
   dbe94:	5cc3      	ldrb	r3, [r0, r3]
   dbe96:	2b6e      	cmp	r3, #110	; 0x6e
   dbe98:	d007      	beq.n	dbeaa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   dbe9a:	6813      	ldr	r3, [r2, #0]
   dbe9c:	684d      	ldr	r5, [r1, #4]
   dbe9e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   dbea0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   dbea2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   dbea4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   dbea6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   dbea8:	60e3      	str	r3, [r4, #12]
   dbeaa:	4611      	mov	r1, r2
   dbeac:	4620      	mov	r0, r4
   dbeae:	f7ff ff73 	bl	dbd98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dbeb2:	4620      	mov	r0, r4
   dbeb4:	bd38      	pop	{r3, r4, r5, pc}
   dbeb6:	bf00      	nop
   dbeb8:	000e03d1 	.word	0x000e03d1

000dbebc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbebc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dbebe:	2500      	movs	r5, #0
   dbec0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   dbec2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   dbec6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dbeca:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dbece:	4604      	mov	r4, r0
   dbed0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   dbed2:	b14b      	cbz	r3, dbee8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   dbed4:	781a      	ldrb	r2, [r3, #0]
   dbed6:	2a01      	cmp	r2, #1
   dbed8:	d106      	bne.n	dbee8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   dbeda:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   dbede:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   dbee0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   dbee2:	6143      	str	r3, [r0, #20]
   dbee4:	f7ff ff58 	bl	dbd98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dbee8:	4620      	mov	r0, r4
   dbeea:	bd38      	pop	{r3, r4, r5, pc}

000dbeec <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   dbeec:	b510      	push	{r4, lr}
    if (!n_) {
   dbeee:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   dbef0:	4604      	mov	r4, r0
    if (!n_) {
   dbef2:	b163      	cbz	r3, dbf0e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   dbef4:	6880      	ldr	r0, [r0, #8]
   dbef6:	60e0      	str	r0, [r4, #12]
    --n_;
   dbef8:	3b01      	subs	r3, #1
    ++t_;
   dbefa:	3010      	adds	r0, #16
   dbefc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   dbefe:	6120      	str	r0, [r4, #16]
    --n_;
   dbf00:	6163      	str	r3, [r4, #20]
    if (n_) {
   dbf02:	b113      	cbz	r3, dbf0a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   dbf04:	f7ff fedd 	bl	dbcc2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   dbf08:	60a0      	str	r0, [r4, #8]
    return true;
   dbf0a:	2001      	movs	r0, #1
   dbf0c:	e000      	b.n	dbf10 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   dbf0e:	4618      	mov	r0, r3
}
   dbf10:	bd10      	pop	{r4, pc}

000dbf12 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   dbf12:	b510      	push	{r4, lr}
    write('}');
   dbf14:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   dbf16:	4604      	mov	r4, r0
    write('}');
   dbf18:	f7ff ff32 	bl	dbd80 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   dbf1c:	2301      	movs	r3, #1
   dbf1e:	7123      	strb	r3, [r4, #4]
}
   dbf20:	4620      	mov	r0, r4
   dbf22:	bd10      	pop	{r4, pc}

000dbf24 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   dbf24:	b508      	push	{r3, lr}
    switch (state_) {
   dbf26:	7903      	ldrb	r3, [r0, #4]
   dbf28:	2b01      	cmp	r3, #1
   dbf2a:	d002      	beq.n	dbf32 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   dbf2c:	2b02      	cmp	r3, #2
   dbf2e:	d004      	beq.n	dbf3a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   dbf30:	bd08      	pop	{r3, pc}
        write(',');
   dbf32:	212c      	movs	r1, #44	; 0x2c
        write(':');
   dbf34:	f7ff ff24 	bl	dbd80 <_ZN5spark10JSONWriter5writeEc>
}
   dbf38:	e7fa      	b.n	dbf30 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   dbf3a:	213a      	movs	r1, #58	; 0x3a
   dbf3c:	e7fa      	b.n	dbf34 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000dbf3e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   dbf3e:	b510      	push	{r4, lr}
   dbf40:	4604      	mov	r4, r0
    writeSeparator();
   dbf42:	f7ff ffef 	bl	dbf24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   dbf46:	4620      	mov	r0, r4
   dbf48:	217b      	movs	r1, #123	; 0x7b
   dbf4a:	f7ff ff19 	bl	dbd80 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   dbf4e:	2300      	movs	r3, #0
   dbf50:	7123      	strb	r3, [r4, #4]
}
   dbf52:	4620      	mov	r0, r4
   dbf54:	bd10      	pop	{r4, pc}
	...

000dbf58 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   dbf58:	b513      	push	{r0, r1, r4, lr}
   dbf5a:	4604      	mov	r4, r0
   dbf5c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dbf5e:	f7ff ffe1 	bl	dbf24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   dbf62:	6823      	ldr	r3, [r4, #0]
   dbf64:	9a01      	ldr	r2, [sp, #4]
   dbf66:	68db      	ldr	r3, [r3, #12]
   dbf68:	4903      	ldr	r1, [pc, #12]	; (dbf78 <_ZN5spark10JSONWriter5valueEi+0x20>)
   dbf6a:	4620      	mov	r0, r4
   dbf6c:	4798      	blx	r3
    state_ = NEXT;
   dbf6e:	2301      	movs	r3, #1
}
   dbf70:	4620      	mov	r0, r4
    state_ = NEXT;
   dbf72:	7123      	strb	r3, [r4, #4]
}
   dbf74:	b002      	add	sp, #8
   dbf76:	bd10      	pop	{r4, pc}
   dbf78:	000df9cb 	.word	0x000df9cb

000dbf7c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   dbf7c:	b513      	push	{r0, r1, r4, lr}
   dbf7e:	4604      	mov	r4, r0
   dbf80:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dbf82:	f7ff ffcf 	bl	dbf24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   dbf86:	6823      	ldr	r3, [r4, #0]
   dbf88:	9a01      	ldr	r2, [sp, #4]
   dbf8a:	68db      	ldr	r3, [r3, #12]
   dbf8c:	4903      	ldr	r1, [pc, #12]	; (dbf9c <_ZN5spark10JSONWriter5valueEj+0x20>)
   dbf8e:	4620      	mov	r0, r4
   dbf90:	4798      	blx	r3
    state_ = NEXT;
   dbf92:	2301      	movs	r3, #1
}
   dbf94:	4620      	mov	r0, r4
    state_ = NEXT;
   dbf96:	7123      	strb	r3, [r4, #4]
}
   dbf98:	b002      	add	sp, #8
   dbf9a:	bd10      	pop	{r4, pc}
   dbf9c:	000dfcea 	.word	0x000dfcea

000dbfa0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dbfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbfa4:	460d      	mov	r5, r1
   dbfa6:	4617      	mov	r7, r2
    write('"');
   dbfa8:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   dbfaa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; dc04c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dbfae:	4604      	mov	r4, r0
    const char* const end = str + size;
   dbfb0:	442f      	add	r7, r5
    write('"');
   dbfb2:	f7ff fee5 	bl	dbd80 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   dbfb6:	4629      	mov	r1, r5
    while (s != end) {
   dbfb8:	42bd      	cmp	r5, r7
   dbfba:	462a      	mov	r2, r5
   dbfbc:	d038      	beq.n	dc030 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   dbfbe:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   dbfc2:	2e22      	cmp	r6, #34	; 0x22
   dbfc4:	d003      	beq.n	dbfce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dbfc6:	2e5c      	cmp	r6, #92	; 0x5c
   dbfc8:	d001      	beq.n	dbfce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dbfca:	2e1f      	cmp	r6, #31
   dbfcc:	d8f4      	bhi.n	dbfb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   dbfce:	6823      	ldr	r3, [r4, #0]
   dbfd0:	1a52      	subs	r2, r2, r1
   dbfd2:	689b      	ldr	r3, [r3, #8]
   dbfd4:	4620      	mov	r0, r4
   dbfd6:	4798      	blx	r3
            write('\\');
   dbfd8:	215c      	movs	r1, #92	; 0x5c
   dbfda:	4620      	mov	r0, r4
   dbfdc:	f7ff fed0 	bl	dbd80 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   dbfe0:	2e0d      	cmp	r6, #13
   dbfe2:	d80a      	bhi.n	dbffa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   dbfe4:	2e07      	cmp	r6, #7
   dbfe6:	d91c      	bls.n	dc022 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dbfe8:	f1a6 0308 	sub.w	r3, r6, #8
   dbfec:	2b05      	cmp	r3, #5
   dbfee:	d818      	bhi.n	dc022 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dbff0:	e8df f003 	tbb	[pc, r3]
   dbff4:	17110f0d 	.word	0x17110f0d
   dbff8:	1513      	.short	0x1513
   dbffa:	2e22      	cmp	r6, #34	; 0x22
   dbffc:	d001      	beq.n	dc002 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   dbffe:	2e5c      	cmp	r6, #92	; 0x5c
   dc000:	d10f      	bne.n	dc022 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   dc002:	4631      	mov	r1, r6
                write('b');
   dc004:	4620      	mov	r0, r4
   dc006:	f7ff febb 	bl	dbd80 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   dc00a:	4629      	mov	r1, r5
    while (s != end) {
   dc00c:	e7d4      	b.n	dbfb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   dc00e:	2162      	movs	r1, #98	; 0x62
   dc010:	e7f8      	b.n	dc004 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   dc012:	2174      	movs	r1, #116	; 0x74
   dc014:	e7f6      	b.n	dc004 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   dc016:	216e      	movs	r1, #110	; 0x6e
   dc018:	e7f4      	b.n	dc004 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   dc01a:	2166      	movs	r1, #102	; 0x66
   dc01c:	e7f2      	b.n	dc004 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   dc01e:	2172      	movs	r1, #114	; 0x72
   dc020:	e7f0      	b.n	dc004 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   dc022:	6823      	ldr	r3, [r4, #0]
   dc024:	4632      	mov	r2, r6
   dc026:	68db      	ldr	r3, [r3, #12]
   dc028:	4641      	mov	r1, r8
   dc02a:	4620      	mov	r0, r4
   dc02c:	4798      	blx	r3
                break;
   dc02e:	e7ec      	b.n	dc00a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   dc030:	428d      	cmp	r5, r1
   dc032:	d004      	beq.n	dc03e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   dc034:	6823      	ldr	r3, [r4, #0]
   dc036:	1a6a      	subs	r2, r5, r1
   dc038:	689b      	ldr	r3, [r3, #8]
   dc03a:	4620      	mov	r0, r4
   dc03c:	4798      	blx	r3
    }
    write('"');
   dc03e:	2122      	movs	r1, #34	; 0x22
   dc040:	4620      	mov	r0, r4
   dc042:	f7ff fe9d 	bl	dbd80 <_ZN5spark10JSONWriter5writeEc>
}
   dc046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc04a:	bf00      	nop
   dc04c:	000e0374 	.word	0x000e0374

000dc050 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   dc050:	b513      	push	{r0, r1, r4, lr}
   dc052:	4604      	mov	r4, r0
   dc054:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dc058:	f7ff ff64 	bl	dbf24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   dc05c:	4620      	mov	r0, r4
   dc05e:	e9dd 2100 	ldrd	r2, r1, [sp]
   dc062:	f7ff ff9d 	bl	dbfa0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   dc066:	2302      	movs	r3, #2
}
   dc068:	4620      	mov	r0, r4
    state_ = VALUE;
   dc06a:	7123      	strb	r3, [r4, #4]
}
   dc06c:	b002      	add	sp, #8
   dc06e:	bd10      	pop	{r4, pc}

000dc070 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   dc070:	b513      	push	{r0, r1, r4, lr}
   dc072:	4604      	mov	r4, r0
   dc074:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dc078:	f7ff ff54 	bl	dbf24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   dc07c:	4620      	mov	r0, r4
   dc07e:	e9dd 2100 	ldrd	r2, r1, [sp]
   dc082:	f7ff ff8d 	bl	dbfa0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   dc086:	2301      	movs	r3, #1
}
   dc088:	4620      	mov	r0, r4
    state_ = NEXT;
   dc08a:	7123      	strb	r3, [r4, #4]
}
   dc08c:	b002      	add	sp, #8
   dc08e:	bd10      	pop	{r4, pc}

000dc090 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   dc090:	6880      	ldr	r0, [r0, #8]
   dc092:	6803      	ldr	r3, [r0, #0]
   dc094:	68db      	ldr	r3, [r3, #12]
   dc096:	4718      	bx	r3

000dc098 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   dc098:	4770      	bx	lr

000dc09a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   dc09a:	4608      	mov	r0, r1
   dc09c:	b111      	cbz	r1, dc0a4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   dc09e:	680b      	ldr	r3, [r1, #0]
   dc0a0:	685b      	ldr	r3, [r3, #4]
   dc0a2:	4718      	bx	r3
}
   dc0a4:	4770      	bx	lr

000dc0a6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   dc0a6:	4770      	bx	lr

000dc0a8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dc0a8:	4770      	bx	lr

000dc0aa <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   dc0aa:	4770      	bx	lr

000dc0ac <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   dc0ac:	4770      	bx	lr

000dc0ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   dc0ae:	b538      	push	{r3, r4, r5, lr}
   dc0b0:	4604      	mov	r4, r0
   dc0b2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   dc0b4:	6800      	ldr	r0, [r0, #0]
   dc0b6:	212e      	movs	r1, #46	; 0x2e
   dc0b8:	f002 fd75 	bl	deba6 <strchrnul>
    size = s - category;
   dc0bc:	6823      	ldr	r3, [r4, #0]
   dc0be:	1ac3      	subs	r3, r0, r3
   dc0c0:	602b      	str	r3, [r5, #0]
    if (size) {
   dc0c2:	b123      	cbz	r3, dc0ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   dc0c4:	7803      	ldrb	r3, [r0, #0]
   dc0c6:	b103      	cbz	r3, dc0ca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   dc0c8:	3001      	adds	r0, #1
   dc0ca:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dc0cc:	6020      	str	r0, [r4, #0]
}
   dc0ce:	4618      	mov	r0, r3
   dc0d0:	bd38      	pop	{r3, r4, r5, pc}

000dc0d2 <_ZN5spark16JSONStreamWriterD0Ev>:
   dc0d2:	b510      	push	{r4, lr}
   dc0d4:	210c      	movs	r1, #12
   dc0d6:	4604      	mov	r4, r0
   dc0d8:	f002 f844 	bl	de164 <_ZdlPvj>
   dc0dc:	4620      	mov	r0, r4
   dc0de:	bd10      	pop	{r4, pc}

000dc0e0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   dc0e0:	b510      	push	{r4, lr}
   dc0e2:	2104      	movs	r1, #4
   dc0e4:	4604      	mov	r4, r0
   dc0e6:	f002 f83d 	bl	de164 <_ZdlPvj>
   dc0ea:	4620      	mov	r0, r4
   dc0ec:	bd10      	pop	{r4, pc}

000dc0ee <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dc0ee:	b510      	push	{r4, lr}
   dc0f0:	2104      	movs	r1, #4
   dc0f2:	4604      	mov	r4, r0
   dc0f4:	f002 f836 	bl	de164 <_ZdlPvj>
   dc0f8:	4620      	mov	r0, r4
   dc0fa:	bd10      	pop	{r4, pc}

000dc0fc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   dc0fc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   dc0fe:	f002 fd5c 	bl	debba <strcmp>
}
   dc102:	fab0 f080 	clz	r0, r0
   dc106:	0940      	lsrs	r0, r0, #5
   dc108:	bd08      	pop	{r3, pc}

000dc10a <__tcf_1>:
   dc10a:	4770      	bx	lr

000dc10c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   dc10c:	b510      	push	{r4, lr}
   dc10e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   dc110:	f001 fe42 	bl	ddd98 <_Z16_fetch_usbserialv>
   dc114:	4284      	cmp	r4, r0
   dc116:	d010      	beq.n	dc13a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   dc118:	f001 fdb6 	bl	ddc88 <_Z22__fetch_global_Serial1v>
   dc11c:	4284      	cmp	r4, r0
   dc11e:	d105      	bne.n	dc12c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   dc120:	f001 fdb2 	bl	ddc88 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   dc124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   dc128:	f001 bdab 	b.w	ddc82 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   dc12c:	b12c      	cbz	r4, dc13a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   dc12e:	6823      	ldr	r3, [r4, #0]
   dc130:	4620      	mov	r0, r4
   dc132:	685b      	ldr	r3, [r3, #4]
}
   dc134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dc138:	4718      	bx	r3
   dc13a:	bd10      	pop	{r4, pc}

000dc13c <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   dc13c:	b513      	push	{r0, r1, r4, lr}
   dc13e:	4604      	mov	r4, r0
    return value(val, strlen(val));
   dc140:	4608      	mov	r0, r1
   dc142:	9101      	str	r1, [sp, #4]
   dc144:	f002 fd69 	bl	dec1a <strlen>
   dc148:	9901      	ldr	r1, [sp, #4]
   dc14a:	4602      	mov	r2, r0
   dc14c:	4620      	mov	r0, r4
}
   dc14e:	b002      	add	sp, #8
   dc150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   dc154:	f7ff bf8c 	b.w	dc070 <_ZN5spark10JSONWriter5valueEPKcj>

000dc158 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   dc158:	b513      	push	{r0, r1, r4, lr}
   dc15a:	4604      	mov	r4, r0
    write(str, strlen(str));
   dc15c:	4608      	mov	r0, r1
   dc15e:	9101      	str	r1, [sp, #4]
   dc160:	f002 fd5b 	bl	dec1a <strlen>
   dc164:	6823      	ldr	r3, [r4, #0]
   dc166:	9901      	ldr	r1, [sp, #4]
   dc168:	68db      	ldr	r3, [r3, #12]
   dc16a:	4602      	mov	r2, r0
   dc16c:	4620      	mov	r0, r4
}
   dc16e:	b002      	add	sp, #8
   dc170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   dc174:	4718      	bx	r3

000dc176 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   dc176:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dc178:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   dc17a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dc17e:	68db      	ldr	r3, [r3, #12]
   dc180:	2201      	movs	r2, #1
   dc182:	f10d 0107 	add.w	r1, sp, #7
   dc186:	4798      	blx	r3
}
   dc188:	b003      	add	sp, #12
   dc18a:	f85d fb04 	ldr.w	pc, [sp], #4

000dc18e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dc18e:	b40e      	push	{r1, r2, r3}
   dc190:	b503      	push	{r0, r1, lr}
   dc192:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   dc194:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dc196:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   dc19a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   dc19c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   dc19e:	f001 f8a9 	bl	dd2f4 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   dc1a2:	b002      	add	sp, #8
   dc1a4:	f85d eb04 	ldr.w	lr, [sp], #4
   dc1a8:	b003      	add	sp, #12
   dc1aa:	4770      	bx	lr

000dc1ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dc1ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   dc1b0:	e9d0 9500 	ldrd	r9, r5, [r0]
   dc1b4:	f04f 0814 	mov.w	r8, #20
   dc1b8:	fb08 f505 	mul.w	r5, r8, r5
   dc1bc:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   dc1be:	10ab      	asrs	r3, r5, #2
   dc1c0:	4d18      	ldr	r5, [pc, #96]	; (dc224 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dc1c2:	4617      	mov	r7, r2
   dc1c4:	435d      	muls	r5, r3
   dc1c6:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   dc1c8:	2d00      	cmp	r5, #0
   dc1ca:	dd23      	ble.n	dc214 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   dc1cc:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   dc1ce:	fb08 f006 	mul.w	r0, r8, r6
   dc1d2:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   dc1d6:	463a      	mov	r2, r7
   dc1d8:	f8ba b004 	ldrh.w	fp, [sl, #4]
   dc1dc:	5820      	ldr	r0, [r4, r0]
   dc1de:	9101      	str	r1, [sp, #4]
   dc1e0:	455f      	cmp	r7, fp
   dc1e2:	bf28      	it	cs
   dc1e4:	465a      	movcs	r2, fp
   dc1e6:	f002 fd20 	bl	dec2a <strncmp>
                if (cmp == 0) {
   dc1ea:	9901      	ldr	r1, [sp, #4]
   dc1ec:	2301      	movs	r3, #1
   dc1ee:	b978      	cbnz	r0, dc210 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   dc1f0:	455f      	cmp	r7, fp
   dc1f2:	d103      	bne.n	dc1fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   dc1f4:	9a00      	ldr	r2, [sp, #0]
   dc1f6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dc1f8:	4635      	mov	r5, r6
   dc1fa:	e7e5      	b.n	dc1c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   dc1fc:	bf8c      	ite	hi
   dc1fe:	2001      	movhi	r0, #1
   dc200:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   dc202:	2800      	cmp	r0, #0
   dc204:	d0f8      	beq.n	dc1f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   dc206:	1bae      	subs	r6, r5, r6
	      ++__first;
   dc208:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   dc20c:	3e01      	subs	r6, #1
   dc20e:	e7f3      	b.n	dc1f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   dc210:	0fc0      	lsrs	r0, r0, #31
   dc212:	e7f6      	b.n	dc202 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   dc214:	eba4 0409 	sub.w	r4, r4, r9
}
   dc218:	4802      	ldr	r0, [pc, #8]	; (dc224 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dc21a:	10a4      	asrs	r4, r4, #2
   dc21c:	4360      	muls	r0, r4
   dc21e:	b003      	add	sp, #12
   dc220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc224:	cccccccd 	.word	0xcccccccd

000dc228 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dc228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   dc22a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   dc22c:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dc22e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   dc230:	b30b      	cbz	r3, dc276 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   dc232:	b301      	cbz	r1, dc276 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   dc234:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   dc236:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   dc23a:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   dc23c:	a903      	add	r1, sp, #12
   dc23e:	a801      	add	r0, sp, #4
   dc240:	f7ff ff35 	bl	dc0ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dc244:	4601      	mov	r1, r0
   dc246:	b1b0      	cbz	r0, dc276 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   dc248:	f10d 030b 	add.w	r3, sp, #11
   dc24c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   dc24e:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   dc252:	4620      	mov	r0, r4
   dc254:	f7ff ffaa 	bl	dc1ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   dc258:	f89d 300b 	ldrb.w	r3, [sp, #11]
   dc25c:	b15b      	cbz	r3, dc276 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   dc25e:	6824      	ldr	r4, [r4, #0]
   dc260:	2314      	movs	r3, #20
   dc262:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   dc266:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   dc26a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   dc26e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   dc270:	bfa8      	it	ge
   dc272:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   dc274:	e7e2      	b.n	dc23c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   dc276:	4630      	mov	r0, r6
   dc278:	b004      	add	sp, #16
   dc27a:	bd70      	pop	{r4, r5, r6, pc}

000dc27c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   dc27c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   dc27e:	4c09      	ldr	r4, [pc, #36]	; (dc2a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   dc280:	7823      	ldrb	r3, [r4, #0]
   dc282:	f3bf 8f5b 	dmb	ish
   dc286:	07db      	lsls	r3, r3, #31
   dc288:	d409      	bmi.n	dc29e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dc28a:	4620      	mov	r0, r4
   dc28c:	f7f7 ff14 	bl	d40b8 <__cxa_guard_acquire>
   dc290:	b128      	cbz	r0, dc29e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dc292:	4620      	mov	r0, r4
   dc294:	f7f7 ff15 	bl	d40c2 <__cxa_guard_release>
   dc298:	4803      	ldr	r0, [pc, #12]	; (dc2a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   dc29a:	f002 fbd7 	bl	dea4c <atexit>
}
   dc29e:	4803      	ldr	r0, [pc, #12]	; (dc2ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   dc2a0:	bd10      	pop	{r4, pc}
   dc2a2:	bf00      	nop
   dc2a4:	2003e568 	.word	0x2003e568
   dc2a8:	000dc0a7 	.word	0x000dc0a7
   dc2ac:	2003dc3c 	.word	0x2003dc3c

000dc2b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   dc2b0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   dc2b2:	4c09      	ldr	r4, [pc, #36]	; (dc2d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   dc2b4:	7823      	ldrb	r3, [r4, #0]
   dc2b6:	f3bf 8f5b 	dmb	ish
   dc2ba:	07db      	lsls	r3, r3, #31
   dc2bc:	d409      	bmi.n	dc2d2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dc2be:	4620      	mov	r0, r4
   dc2c0:	f7f7 fefa 	bl	d40b8 <__cxa_guard_acquire>
   dc2c4:	b128      	cbz	r0, dc2d2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dc2c6:	4620      	mov	r0, r4
   dc2c8:	f7f7 fefb 	bl	d40c2 <__cxa_guard_release>
   dc2cc:	4803      	ldr	r0, [pc, #12]	; (dc2dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   dc2ce:	f002 fbbd 	bl	dea4c <atexit>
    return &factory;
}
   dc2d2:	4803      	ldr	r0, [pc, #12]	; (dc2e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   dc2d4:	bd10      	pop	{r4, pc}
   dc2d6:	bf00      	nop
   dc2d8:	2003e56c 	.word	0x2003e56c
   dc2dc:	000dc10b 	.word	0x000dc10b
   dc2e0:	2003dc40 	.word	0x2003dc40

000dc2e4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   dc2e4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   dc2e6:	2500      	movs	r5, #0
   dc2e8:	4604      	mov	r4, r0
   dc2ea:	e9c0 5500 	strd	r5, r5, [r0]
   dc2ee:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dc2f2:	6085      	str	r5, [r0, #8]
   dc2f4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   dc2f6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   dc2fa:	f7fe fa0b 	bl	da714 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   dc2fe:	f7ff ffbd 	bl	dc27c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   dc302:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dc304:	f7ff ffd4 	bl	dc2b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   dc308:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dc30a:	6220      	str	r0, [r4, #32]
}
   dc30c:	4620      	mov	r0, r4
   dc30e:	bd38      	pop	{r3, r4, r5, pc}

000dc310 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   dc310:	b510      	push	{r4, lr}
    static LogManager mgr;
   dc312:	4c0a      	ldr	r4, [pc, #40]	; (dc33c <_ZN5spark10LogManager8instanceEv+0x2c>)
   dc314:	7823      	ldrb	r3, [r4, #0]
   dc316:	f3bf 8f5b 	dmb	ish
   dc31a:	07db      	lsls	r3, r3, #31
   dc31c:	d40c      	bmi.n	dc338 <_ZN5spark10LogManager8instanceEv+0x28>
   dc31e:	4620      	mov	r0, r4
   dc320:	f7f7 feca 	bl	d40b8 <__cxa_guard_acquire>
   dc324:	b140      	cbz	r0, dc338 <_ZN5spark10LogManager8instanceEv+0x28>
   dc326:	4806      	ldr	r0, [pc, #24]	; (dc340 <_ZN5spark10LogManager8instanceEv+0x30>)
   dc328:	f7ff ffdc 	bl	dc2e4 <_ZN5spark10LogManagerC1Ev>
   dc32c:	4620      	mov	r0, r4
   dc32e:	f7f7 fec8 	bl	d40c2 <__cxa_guard_release>
   dc332:	4804      	ldr	r0, [pc, #16]	; (dc344 <_ZN5spark10LogManager8instanceEv+0x34>)
   dc334:	f002 fb8a 	bl	dea4c <atexit>
    return &mgr;
}
   dc338:	4801      	ldr	r0, [pc, #4]	; (dc340 <_ZN5spark10LogManager8instanceEv+0x30>)
   dc33a:	bd10      	pop	{r4, pc}
   dc33c:	2003e564 	.word	0x2003e564
   dc340:	2003e574 	.word	0x2003e574
   dc344:	000dc779 	.word	0x000dc779

000dc348 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   dc348:	4a02      	ldr	r2, [pc, #8]	; (dc354 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   dc34a:	4903      	ldr	r1, [pc, #12]	; (dc358 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   dc34c:	4803      	ldr	r0, [pc, #12]	; (dc35c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   dc34e:	2300      	movs	r3, #0
   dc350:	f7fe bc68 	b.w	dac24 <log_set_callbacks>
   dc354:	000dc601 	.word	0x000dc601
   dc358:	000dc58d 	.word	0x000dc58d
   dc35c:	000dc50d 	.word	0x000dc50d

000dc360 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   dc360:	2300      	movs	r3, #0
   dc362:	461a      	mov	r2, r3
   dc364:	4619      	mov	r1, r3
   dc366:	4618      	mov	r0, r3
   dc368:	f7fe bc5c 	b.w	dac24 <log_set_callbacks>

000dc36c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   dc36c:	b570      	push	{r4, r5, r6, lr}
   dc36e:	b08a      	sub	sp, #40	; 0x28
   dc370:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   dc372:	4601      	mov	r1, r0
   dc374:	a804      	add	r0, sp, #16
   dc376:	f7fb fae3 	bl	d7940 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   dc37a:	4e14      	ldr	r6, [pc, #80]	; (dc3cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   dc37c:	a804      	add	r0, sp, #16
   dc37e:	f7ff fdb5 	bl	dbeec <_ZN5spark18JSONObjectIterator4nextEv>
   dc382:	b1e8      	cbz	r0, dc3c0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   dc384:	a904      	add	r1, sp, #16
   dc386:	4668      	mov	r0, sp
   dc388:	f7fb faeb 	bl	d7962 <_ZNK5spark18JSONObjectIterator4nameEv>
   dc38c:	9802      	ldr	r0, [sp, #8]
   dc38e:	4631      	mov	r1, r6
   dc390:	f7ff feb4 	bl	dc0fc <_ZNK5spark10JSONStringeqEPKc.isra.0>
   dc394:	4604      	mov	r4, r0
   dc396:	b110      	cbz	r0, dc39e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   dc398:	1e2c      	subs	r4, r5, #0
   dc39a:	bf18      	it	ne
   dc39c:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   dc39e:	a801      	add	r0, sp, #4
   dc3a0:	f7f8 fdf9 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc3a4:	2c00      	cmp	r4, #0
   dc3a6:	d0e9      	beq.n	dc37c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   dc3a8:	a904      	add	r1, sp, #16
   dc3aa:	4668      	mov	r0, sp
   dc3ac:	f7fb faea 	bl	d7984 <_ZNK5spark18JSONObjectIterator5valueEv>
   dc3b0:	4668      	mov	r0, sp
   dc3b2:	f7ff fd3e 	bl	dbe32 <_ZNK5spark9JSONValue5toIntEv>
   dc3b6:	6028      	str	r0, [r5, #0]
   dc3b8:	a801      	add	r0, sp, #4
   dc3ba:	f7f8 fdec 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc3be:	e7dd      	b.n	dc37c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   dc3c0:	a805      	add	r0, sp, #20
   dc3c2:	f7f8 fde8 	bl	d4f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dc3c6:	b00a      	add	sp, #40	; 0x28
   dc3c8:	bd70      	pop	{r4, r5, r6, pc}
   dc3ca:	bf00      	nop
   dc3cc:	000e037a 	.word	0x000e037a

000dc3d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dc3d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc3d2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   dc3d4:	4620      	mov	r0, r4
   dc3d6:	4912      	ldr	r1, [pc, #72]	; (dc420 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dc3d8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   dc3da:	f002 fbee 	bl	debba <strcmp>
   dc3de:	b948      	cbnz	r0, dc3f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   dc3e0:	f001 fcda 	bl	ddd98 <_Z16_fetch_usbserialv>
   dc3e4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   dc3e8:	f001 fcc6 	bl	ddd78 <_ZN9USBSerial5beginEl>
        return &Serial;
   dc3ec:	f001 fcd4 	bl	ddd98 <_Z16_fetch_usbserialv>
}
   dc3f0:	b003      	add	sp, #12
   dc3f2:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   dc3f4:	490b      	ldr	r1, [pc, #44]	; (dc424 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   dc3f6:	4620      	mov	r0, r4
   dc3f8:	f002 fbdf 	bl	debba <strcmp>
   dc3fc:	b970      	cbnz	r0, dc41c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   dc3fe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   dc402:	a901      	add	r1, sp, #4
   dc404:	4628      	mov	r0, r5
        int baud = 9600;
   dc406:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   dc408:	f7ff ffb0 	bl	dc36c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   dc40c:	f001 fc3c 	bl	ddc88 <_Z22__fetch_global_Serial1v>
   dc410:	9901      	ldr	r1, [sp, #4]
   dc412:	f001 fc33 	bl	ddc7c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   dc416:	f001 fc37 	bl	ddc88 <_Z22__fetch_global_Serial1v>
   dc41a:	e7e9      	b.n	dc3f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   dc41c:	2000      	movs	r0, #0
   dc41e:	e7e7      	b.n	dc3f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   dc420:	000e037f 	.word	0x000e037f
   dc424:	000e0386 	.word	0x000e0386

000dc428 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc428:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dc42a:	e9d0 5300 	ldrd	r5, r3, [r0]
   dc42e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc430:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dc432:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dc436:	42ae      	cmp	r6, r5
   dc438:	d005      	beq.n	dc446 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   dc43a:	f105 0008 	add.w	r0, r5, #8
   dc43e:	f7ff fff3 	bl	dc428 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dc442:	3514      	adds	r5, #20
   dc444:	e7f7      	b.n	dc436 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   dc446:	6820      	ldr	r0, [r4, #0]
   dc448:	f7fe fd36 	bl	daeb8 <free>
}
   dc44c:	4620      	mov	r0, r4
   dc44e:	bd70      	pop	{r4, r5, r6, pc}

000dc450 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc450:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dc452:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc456:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dc458:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   dc45c:	42ae      	cmp	r6, r5
   dc45e:	d004      	beq.n	dc46a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   dc460:	4628      	mov	r0, r5
   dc462:	f001 f855 	bl	dd510 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   dc466:	3510      	adds	r5, #16
   dc468:	e7f8      	b.n	dc45c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   dc46a:	6820      	ldr	r0, [r4, #0]
   dc46c:	f7fe fd24 	bl	daeb8 <free>
}
   dc470:	4620      	mov	r0, r4
   dc472:	bd70      	pop	{r4, r5, r6, pc}

000dc474 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   dc474:	b510      	push	{r4, lr}
   dc476:	4604      	mov	r4, r0
   dc478:	300c      	adds	r0, #12
   dc47a:	f7ff ffd5 	bl	dc428 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dc47e:	4620      	mov	r0, r4
   dc480:	f7ff ffe6 	bl	dc450 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dc484:	4620      	mov	r0, r4
   dc486:	bd10      	pop	{r4, pc}

000dc488 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   dc488:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   dc48a:	4b04      	ldr	r3, [pc, #16]	; (dc49c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   dc48c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   dc48e:	f840 3b04 	str.w	r3, [r0], #4
   dc492:	f7ff ffef 	bl	dc474 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   dc496:	4620      	mov	r0, r4
   dc498:	bd10      	pop	{r4, pc}
   dc49a:	bf00      	nop
   dc49c:	000df768 	.word	0x000df768

000dc4a0 <_ZN5spark16StreamLogHandlerD0Ev>:
   dc4a0:	b510      	push	{r4, lr}
   dc4a2:	4604      	mov	r4, r0
   dc4a4:	f7ff fff0 	bl	dc488 <_ZN5spark16StreamLogHandlerD1Ev>
   dc4a8:	4620      	mov	r0, r4
   dc4aa:	2124      	movs	r1, #36	; 0x24
   dc4ac:	f001 fe5a 	bl	de164 <_ZdlPvj>
   dc4b0:	4620      	mov	r0, r4
   dc4b2:	bd10      	pop	{r4, pc}

000dc4b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   dc4b4:	b510      	push	{r4, lr}
   dc4b6:	4b03      	ldr	r3, [pc, #12]	; (dc4c4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   dc4b8:	6003      	str	r3, [r0, #0]
   dc4ba:	4604      	mov	r4, r0
   dc4bc:	f7ff ffe4 	bl	dc488 <_ZN5spark16StreamLogHandlerD1Ev>
   dc4c0:	4620      	mov	r0, r4
   dc4c2:	bd10      	pop	{r4, pc}
   dc4c4:	000e0420 	.word	0x000e0420

000dc4c8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   dc4c8:	b510      	push	{r4, lr}
   dc4ca:	4604      	mov	r4, r0
   dc4cc:	f7ff fff2 	bl	dc4b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   dc4d0:	4620      	mov	r0, r4
   dc4d2:	2124      	movs	r1, #36	; 0x24
   dc4d4:	f001 fe46 	bl	de164 <_ZdlPvj>
   dc4d8:	4620      	mov	r0, r4
   dc4da:	bd10      	pop	{r4, pc}

000dc4dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   dc4dc:	2200      	movs	r2, #0
   dc4de:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   dc4e2:	b510      	push	{r4, lr}
        capacity_(0) {
   dc4e4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   dc4e6:	680c      	ldr	r4, [r1, #0]
   dc4e8:	6004      	str	r4, [r0, #0]
   dc4ea:	684c      	ldr	r4, [r1, #4]
   dc4ec:	6044      	str	r4, [r0, #4]
   dc4ee:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc4f0:	600a      	str	r2, [r1, #0]
   dc4f2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc4f4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc4f6:	608a      	str	r2, [r1, #8]
}
   dc4f8:	bd10      	pop	{r4, pc}

000dc4fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   dc4fa:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   dc4fc:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   dc4fe:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   dc500:	6818      	ldr	r0, [r3, #0]
   dc502:	f7fe f91f 	bl	da744 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   dc506:	4620      	mov	r0, r4
   dc508:	bd10      	pop	{r4, pc}
	...

000dc50c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   dc50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc510:	b087      	sub	sp, #28
   dc512:	4680      	mov	r8, r0
   dc514:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   dc516:	4b1c      	ldr	r3, [pc, #112]	; (dc588 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   dc518:	685b      	ldr	r3, [r3, #4]
   dc51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dc51e:	4689      	mov	r9, r1
   dc520:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   dc522:	b96b      	cbnz	r3, dc540 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   dc524:	f7ff fef4 	bl	dc310 <_ZN5spark10LogManager8instanceEv>
   dc528:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dc52a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   dc52e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dc530:	9305      	str	r3, [sp, #20]
   dc532:	f7fe f8ff 	bl	da734 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   dc536:	7b23      	ldrb	r3, [r4, #12]
   dc538:	b12b      	cbz	r3, dc546 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   dc53a:	a805      	add	r0, sp, #20
   dc53c:	f7ff ffdd 	bl	dc4fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   dc540:	b007      	add	sp, #28
   dc542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   dc546:	2301      	movs	r3, #1
   dc548:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   dc54a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   dc54e:	fa5f f989 	uxtb.w	r9, r9
   dc552:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dc556:	45aa      	cmp	sl, r5
   dc558:	d012      	beq.n	dc580 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   dc55a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   dc55e:	4631      	mov	r1, r6
   dc560:	1d38      	adds	r0, r7, #4
   dc562:	f7ff fe61 	bl	dc228 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dc566:	4581      	cmp	r9, r0
   dc568:	d3f5      	bcc.n	dc556 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   dc56a:	683b      	ldr	r3, [r7, #0]
   dc56c:	9a03      	ldr	r2, [sp, #12]
   dc56e:	9200      	str	r2, [sp, #0]
   dc570:	f8d3 b008 	ldr.w	fp, [r3, #8]
   dc574:	464a      	mov	r2, r9
   dc576:	4633      	mov	r3, r6
   dc578:	4641      	mov	r1, r8
   dc57a:	4638      	mov	r0, r7
   dc57c:	47d8      	blx	fp
   dc57e:	e7ea      	b.n	dc556 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   dc580:	2300      	movs	r3, #0
   dc582:	7323      	strb	r3, [r4, #12]
   dc584:	e7d9      	b.n	dc53a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   dc586:	bf00      	nop
   dc588:	e000ed00 	.word	0xe000ed00

000dc58c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   dc58c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc590:	469b      	mov	fp, r3
   dc592:	4b1a      	ldr	r3, [pc, #104]	; (dc5fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   dc594:	685b      	ldr	r3, [r3, #4]
   dc596:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dc59a:	4680      	mov	r8, r0
   dc59c:	4689      	mov	r9, r1
   dc59e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   dc5a0:	b96b      	cbnz	r3, dc5be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   dc5a2:	f7ff feb5 	bl	dc310 <_ZN5spark10LogManager8instanceEv>
   dc5a6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dc5a8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   dc5ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc5ae:	9301      	str	r3, [sp, #4]
   dc5b0:	f7fe f8c0 	bl	da734 <os_mutex_recursive_lock>
        if (that->isActive()) {
   dc5b4:	7b23      	ldrb	r3, [r4, #12]
   dc5b6:	b12b      	cbz	r3, dc5c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   dc5b8:	a801      	add	r0, sp, #4
   dc5ba:	f7ff ff9e 	bl	dc4fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dc5be:	b003      	add	sp, #12
   dc5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   dc5c4:	2301      	movs	r3, #1
   dc5c6:	7323      	strb	r3, [r4, #12]
   dc5c8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   dc5cc:	b2f6      	uxtb	r6, r6
   dc5ce:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dc5d2:	4555      	cmp	r5, sl
   dc5d4:	d00e      	beq.n	dc5f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   dc5d6:	f855 7b04 	ldr.w	r7, [r5], #4
   dc5da:	4659      	mov	r1, fp
   dc5dc:	1d38      	adds	r0, r7, #4
   dc5de:	f7ff fe23 	bl	dc228 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dc5e2:	4286      	cmp	r6, r0
   dc5e4:	d3f5      	bcc.n	dc5d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   dc5e6:	683b      	ldr	r3, [r7, #0]
   dc5e8:	464a      	mov	r2, r9
   dc5ea:	68db      	ldr	r3, [r3, #12]
   dc5ec:	4641      	mov	r1, r8
   dc5ee:	4638      	mov	r0, r7
   dc5f0:	4798      	blx	r3
   dc5f2:	e7ee      	b.n	dc5d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   dc5f4:	2300      	movs	r3, #0
   dc5f6:	7323      	strb	r3, [r4, #12]
   dc5f8:	e7de      	b.n	dc5b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   dc5fa:	bf00      	nop
   dc5fc:	e000ed00 	.word	0xe000ed00

000dc600 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   dc600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   dc604:	4b16      	ldr	r3, [pc, #88]	; (dc660 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   dc606:	685b      	ldr	r3, [r3, #4]
   dc608:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dc60c:	4605      	mov	r5, r0
   dc60e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   dc610:	bb1b      	cbnz	r3, dc65a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   dc612:	f7ff fe7d 	bl	dc310 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   dc616:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   dc61a:	4604      	mov	r4, r0
   dc61c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc61e:	9301      	str	r3, [sp, #4]
   dc620:	f7fe f888 	bl	da734 <os_mutex_recursive_lock>
   dc624:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   dc628:	2446      	movs	r4, #70	; 0x46
   dc62a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dc62e:	45b0      	cmp	r8, r6
   dc630:	d109      	bne.n	dc646 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   dc632:	a801      	add	r0, sp, #4
   dc634:	f7ff ff61 	bl	dc4fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   dc638:	42a5      	cmp	r5, r4
   dc63a:	bfb4      	ite	lt
   dc63c:	2000      	movlt	r0, #0
   dc63e:	2001      	movge	r0, #1
}
   dc640:	b002      	add	sp, #8
   dc642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   dc646:	f856 0b04 	ldr.w	r0, [r6], #4
   dc64a:	4639      	mov	r1, r7
   dc64c:	3004      	adds	r0, #4
   dc64e:	f7ff fdeb 	bl	dc228 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   dc652:	4284      	cmp	r4, r0
   dc654:	bfa8      	it	ge
   dc656:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   dc658:	e7e9      	b.n	dc62e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   dc65a:	2000      	movs	r0, #0
   dc65c:	e7f0      	b.n	dc640 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   dc65e:	bf00      	nop
   dc660:	e000ed00 	.word	0xe000ed00

000dc664 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   dc664:	b570      	push	{r4, r5, r6, lr}
   dc666:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   dc668:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   dc66c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   dc66e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   dc672:	4282      	cmp	r2, r0
   dc674:	d007      	beq.n	dc686 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   dc676:	4601      	mov	r1, r0
            if (*p == value) {
   dc678:	681d      	ldr	r5, [r3, #0]
   dc67a:	f851 6b04 	ldr.w	r6, [r1], #4
   dc67e:	42ae      	cmp	r6, r5
   dc680:	d003      	beq.n	dc68a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   dc682:	4608      	mov	r0, r1
   dc684:	e7f5      	b.n	dc672 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   dc686:	2000      	movs	r0, #0
}
   dc688:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   dc68a:	1a52      	subs	r2, r2, r1
   dc68c:	f002 fa04 	bl	dea98 <memmove>
    --size_;
   dc690:	6863      	ldr	r3, [r4, #4]
   dc692:	3b01      	subs	r3, #1
   dc694:	6063      	str	r3, [r4, #4]
    return true;
   dc696:	2001      	movs	r0, #1
   dc698:	e7f6      	b.n	dc688 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000dc69a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   dc69a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   dc69c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   dc6a0:	4604      	mov	r4, r0
   dc6a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc6a4:	9101      	str	r1, [sp, #4]
   dc6a6:	9303      	str	r3, [sp, #12]
   dc6a8:	f7fe f844 	bl	da734 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   dc6ac:	a901      	add	r1, sp, #4
   dc6ae:	4620      	mov	r0, r4
   dc6b0:	f7ff ffd8 	bl	dc664 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   dc6b4:	b118      	cbz	r0, dc6be <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   dc6b6:	6863      	ldr	r3, [r4, #4]
   dc6b8:	b90b      	cbnz	r3, dc6be <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   dc6ba:	f7ff fe51 	bl	dc360 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dc6be:	a803      	add	r0, sp, #12
   dc6c0:	f7ff ff1b 	bl	dc4fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dc6c4:	b004      	add	sp, #16
   dc6c6:	bd10      	pop	{r4, pc}

000dc6c8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   dc6c8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   dc6ca:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   dc6ce:	2318      	movs	r3, #24
   dc6d0:	4604      	mov	r4, r0
   dc6d2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   dc6d6:	42ae      	cmp	r6, r5
   dc6d8:	d015      	beq.n	dc706 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   dc6da:	f105 0110 	add.w	r1, r5, #16
   dc6de:	4620      	mov	r0, r4
   dc6e0:	f7ff ffc0 	bl	dc664 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   dc6e4:	6863      	ldr	r3, [r4, #4]
   dc6e6:	b90b      	cbnz	r3, dc6ec <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   dc6e8:	f7ff fe3a 	bl	dc360 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   dc6ec:	69e0      	ldr	r0, [r4, #28]
   dc6ee:	6929      	ldr	r1, [r5, #16]
   dc6f0:	6803      	ldr	r3, [r0, #0]
   dc6f2:	68db      	ldr	r3, [r3, #12]
   dc6f4:	4798      	blx	r3
        if (h.stream) {
   dc6f6:	6969      	ldr	r1, [r5, #20]
   dc6f8:	b119      	cbz	r1, dc702 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   dc6fa:	6a20      	ldr	r0, [r4, #32]
   dc6fc:	6803      	ldr	r3, [r0, #0]
   dc6fe:	68db      	ldr	r3, [r3, #12]
   dc700:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   dc702:	3518      	adds	r5, #24
   dc704:	e7e7      	b.n	dc6d6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   dc706:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dc70a:	2618      	movs	r6, #24
   dc70c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dc710:	42ae      	cmp	r6, r5
   dc712:	d004      	beq.n	dc71e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   dc714:	4628      	mov	r0, r5
   dc716:	f000 fefb 	bl	dd510 <_ZN6StringD1Ev>
   dc71a:	3518      	adds	r5, #24
   dc71c:	e7f8      	b.n	dc710 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   dc71e:	2300      	movs	r3, #0
   dc720:	6163      	str	r3, [r4, #20]
}
   dc722:	bd70      	pop	{r4, r5, r6, pc}

000dc724 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   dc724:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dc726:	4604      	mov	r4, r0
    resetSystemCallbacks();
   dc728:	f7ff fe1a 	bl	dc360 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dc72c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dc730:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dc732:	9301      	str	r3, [sp, #4]
   dc734:	f7fd fffe 	bl	da734 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   dc738:	4620      	mov	r0, r4
   dc73a:	f7ff ffc5 	bl	dc6c8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   dc73e:	a801      	add	r0, sp, #4
   dc740:	f7ff fedb 	bl	dc4fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   dc744:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dc746:	b108      	cbz	r0, dc74c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   dc748:	f7fd ffec 	bl	da724 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   dc74c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dc750:	2618      	movs	r6, #24
   dc752:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dc756:	42ae      	cmp	r6, r5
   dc758:	d004      	beq.n	dc764 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   dc75a:	4628      	mov	r0, r5
   dc75c:	f000 fed8 	bl	dd510 <_ZN6StringD1Ev>
   dc760:	3518      	adds	r5, #24
   dc762:	e7f8      	b.n	dc756 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   dc764:	6920      	ldr	r0, [r4, #16]
   dc766:	f7fe fba7 	bl	daeb8 <free>
   dc76a:	6820      	ldr	r0, [r4, #0]
   dc76c:	f7fe fba4 	bl	daeb8 <free>
}
   dc770:	4620      	mov	r0, r4
   dc772:	b002      	add	sp, #8
   dc774:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc778 <__tcf_2>:
    static LogManager mgr;
   dc778:	4801      	ldr	r0, [pc, #4]	; (dc780 <__tcf_2+0x8>)
   dc77a:	f7ff bfd3 	b.w	dc724 <_ZN5spark10LogManagerD1Ev>
   dc77e:	bf00      	nop
   dc780:	2003e574 	.word	0x2003e574

000dc784 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   dc784:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dc786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc788:	4606      	mov	r6, r0
   dc78a:	460c      	mov	r4, r1
   dc78c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   dc78e:	d927      	bls.n	dc7e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   dc790:	4290      	cmp	r0, r2
   dc792:	d226      	bcs.n	dc7e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   dc794:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   dc798:	1a6c      	subs	r4, r5, r1
   dc79a:	f1a1 0714 	sub.w	r7, r1, #20
   dc79e:	4404      	add	r4, r0
        capacity_(0) {
   dc7a0:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   dc7a2:	42af      	cmp	r7, r5
   dc7a4:	d03d      	beq.n	dc822 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   dc7a6:	b1a4      	cbz	r4, dc7d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   dc7a8:	682b      	ldr	r3, [r5, #0]
   dc7aa:	6023      	str	r3, [r4, #0]
   dc7ac:	88ab      	ldrh	r3, [r5, #4]
   dc7ae:	80a3      	strh	r3, [r4, #4]
   dc7b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   dc7b4:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   dc7b6:	e9c4 6602 	strd	r6, r6, [r4, #8]
   dc7ba:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc7bc:	68ab      	ldr	r3, [r5, #8]
   dc7be:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc7c0:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc7c2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc7c4:	68ea      	ldr	r2, [r5, #12]
   dc7c6:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc7c8:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc7ca:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc7cc:	692a      	ldr	r2, [r5, #16]
   dc7ce:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dc7d0:	612b      	str	r3, [r5, #16]
   dc7d2:	f105 0008 	add.w	r0, r5, #8
   dc7d6:	f7ff fe27 	bl	dc428 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   dc7da:	3d14      	subs	r5, #20
   dc7dc:	3c14      	subs	r4, #20
   dc7de:	e7e0      	b.n	dc7a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   dc7e0:	d01f      	beq.n	dc822 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   dc7e2:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   dc7e4:	42ac      	cmp	r4, r5
   dc7e6:	d01c      	beq.n	dc822 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   dc7e8:	b1a6      	cbz	r6, dc814 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   dc7ea:	6823      	ldr	r3, [r4, #0]
   dc7ec:	6033      	str	r3, [r6, #0]
   dc7ee:	88a3      	ldrh	r3, [r4, #4]
   dc7f0:	80b3      	strh	r3, [r6, #4]
   dc7f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   dc7f6:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   dc7f8:	e9c6 7702 	strd	r7, r7, [r6, #8]
   dc7fc:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc7fe:	68a3      	ldr	r3, [r4, #8]
   dc800:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc802:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc804:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc806:	68e2      	ldr	r2, [r4, #12]
   dc808:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc80a:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc80c:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc80e:	6922      	ldr	r2, [r4, #16]
   dc810:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dc812:	6123      	str	r3, [r4, #16]
   dc814:	f104 0008 	add.w	r0, r4, #8
   dc818:	f7ff fe06 	bl	dc428 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   dc81c:	3414      	adds	r4, #20
   dc81e:	3614      	adds	r6, #20
   dc820:	e7e0      	b.n	dc7e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   dc822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc824 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dc824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc826:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   dc82a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dc82c:	4604      	mov	r4, r0
   dc82e:	460e      	mov	r6, r1
   dc830:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc832:	db0d      	blt.n	dc850 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   dc834:	3501      	adds	r5, #1
        if (n > 0) {
   dc836:	2d00      	cmp	r5, #0
   dc838:	6800      	ldr	r0, [r0, #0]
   dc83a:	dd04      	ble.n	dc846 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   dc83c:	00a9      	lsls	r1, r5, #2
   dc83e:	f7fe fb43 	bl	daec8 <realloc>
            if (!d) {
   dc842:	b918      	cbnz	r0, dc84c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   dc844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   dc846:	f7fe fb37 	bl	daeb8 <free>
        T* d = nullptr;
   dc84a:	2000      	movs	r0, #0
        data_ = d;
   dc84c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   dc84e:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   dc850:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   dc852:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   dc854:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   dc858:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   dc85a:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   dc85e:	1d08      	adds	r0, r1, #4
   dc860:	f002 f91a 	bl	dea98 <memmove>
    new(p) T(std::move(value));
   dc864:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   dc868:	6863      	ldr	r3, [r4, #4]
   dc86a:	3301      	adds	r3, #1
   dc86c:	6063      	str	r3, [r4, #4]
    return true;
   dc86e:	2001      	movs	r0, #1
   dc870:	e7e8      	b.n	dc844 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000dc872 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   dc872:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   dc874:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   dc878:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   dc87a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc87c:	9301      	str	r3, [sp, #4]
   dc87e:	460d      	mov	r5, r1
   dc880:	f7fd ff58 	bl	da734 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   dc884:	e9d4 3100 	ldrd	r3, r1, [r4]
   dc888:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   dc88c:	4283      	cmp	r3, r0
   dc88e:	461a      	mov	r2, r3
   dc890:	d00b      	beq.n	dc8aa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   dc892:	6812      	ldr	r2, [r2, #0]
   dc894:	42aa      	cmp	r2, r5
   dc896:	f103 0304 	add.w	r3, r3, #4
   dc89a:	d1f7      	bne.n	dc88c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   dc89c:	a801      	add	r0, sp, #4
   dc89e:	f7ff fe2c 	bl	dc4fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   dc8a2:	2500      	movs	r5, #0
}
   dc8a4:	4628      	mov	r0, r5
   dc8a6:	b003      	add	sp, #12
   dc8a8:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   dc8aa:	462a      	mov	r2, r5
   dc8ac:	4620      	mov	r0, r4
   dc8ae:	f7ff ffb9 	bl	dc824 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   dc8b2:	4605      	mov	r5, r0
   dc8b4:	2800      	cmp	r0, #0
   dc8b6:	d0f1      	beq.n	dc89c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   dc8b8:	6863      	ldr	r3, [r4, #4]
   dc8ba:	2b01      	cmp	r3, #1
   dc8bc:	d101      	bne.n	dc8c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   dc8be:	f7ff fd43 	bl	dc348 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dc8c2:	a801      	add	r0, sp, #4
   dc8c4:	f7ff fe19 	bl	dc4fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   dc8c8:	e7ec      	b.n	dc8a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000dc8ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   dc8ca:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dc8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc8ce:	4604      	mov	r4, r0
   dc8d0:	460d      	mov	r5, r1
   dc8d2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   dc8d4:	d914      	bls.n	dc900 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   dc8d6:	4290      	cmp	r0, r2
   dc8d8:	d213      	bcs.n	dc902 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   dc8da:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   dc8de:	1a75      	subs	r5, r6, r1
   dc8e0:	f1a1 0710 	sub.w	r7, r1, #16
   dc8e4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   dc8e6:	42b7      	cmp	r7, r6
   dc8e8:	d018      	beq.n	dc91c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   dc8ea:	b11c      	cbz	r4, dc8f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   dc8ec:	4631      	mov	r1, r6
   dc8ee:	4620      	mov	r0, r4
   dc8f0:	f000 fe8a 	bl	dd608 <_ZN6StringC1EOS_>
                end->~T();
   dc8f4:	4630      	mov	r0, r6
   dc8f6:	f000 fe0b 	bl	dd510 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   dc8fa:	3e10      	subs	r6, #16
   dc8fc:	3c10      	subs	r4, #16
   dc8fe:	e7f2      	b.n	dc8e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   dc900:	d00c      	beq.n	dc91c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   dc902:	42b5      	cmp	r5, r6
   dc904:	d00a      	beq.n	dc91c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   dc906:	b11c      	cbz	r4, dc910 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   dc908:	4629      	mov	r1, r5
   dc90a:	4620      	mov	r0, r4
   dc90c:	f000 fe7c 	bl	dd608 <_ZN6StringC1EOS_>
                p->~T();
   dc910:	4628      	mov	r0, r5
   dc912:	f000 fdfd 	bl	dd510 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   dc916:	3510      	adds	r5, #16
   dc918:	3410      	adds	r4, #16
   dc91a:	e7f2      	b.n	dc902 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   dc91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc91e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   dc91e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   dc920:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   dc922:	4605      	mov	r5, r0
        if (n > 0) {
   dc924:	dd11      	ble.n	dc94a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   dc926:	0130      	lsls	r0, r6, #4
   dc928:	f7fe fabe 	bl	daea8 <malloc>
            if (!d) {
   dc92c:	4604      	mov	r4, r0
   dc92e:	b158      	cbz	r0, dc948 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   dc930:	e9d5 1200 	ldrd	r1, r2, [r5]
   dc934:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   dc938:	f7ff ffc7 	bl	dc8ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   dc93c:	6828      	ldr	r0, [r5, #0]
   dc93e:	f7fe fabb 	bl	daeb8 <free>
        data_ = d;
   dc942:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   dc944:	60ae      	str	r6, [r5, #8]
        return true;
   dc946:	2001      	movs	r0, #1
    }
   dc948:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   dc94a:	2400      	movs	r4, #0
   dc94c:	e7f6      	b.n	dc93c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000dc94e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dc94e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc952:	4691      	mov	r9, r2
   dc954:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   dc956:	2300      	movs	r3, #0
   dc958:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   dc95a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   dc95e:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dc960:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   dc962:	4299      	cmp	r1, r3
        capacity_(0) {
   dc964:	e9c0 3300 	strd	r3, r3, [r0]
   dc968:	e9c0 3302 	strd	r3, r3, [r0, #8]
   dc96c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   dc970:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dc974:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dc976:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   dc978:	dc23      	bgt.n	dc9c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   dc97a:	e9d9 5700 	ldrd	r5, r7, [r9]
   dc97e:	2314      	movs	r3, #20
   dc980:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   dc984:	42af      	cmp	r7, r5
   dc986:	d03b      	beq.n	dca00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   dc988:	4629      	mov	r1, r5
   dc98a:	a80d      	add	r0, sp, #52	; 0x34
   dc98c:	f000 fe3c 	bl	dd608 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   dc990:	a90d      	add	r1, sp, #52	; 0x34
   dc992:	a811      	add	r0, sp, #68	; 0x44
   dc994:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   dc996:	f000 fe37 	bl	dd608 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc99a:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   dc99e:	4299      	cmp	r1, r3
   dc9a0:	da1b      	bge.n	dc9da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   dc9a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   dc9a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   dc9a6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   dc9aa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   dc9ae:	4631      	mov	r1, r6
   dc9b0:	f106 0010 	add.w	r0, r6, #16
   dc9b4:	f7ff ff89 	bl	dc8ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   dc9b8:	b9ee      	cbnz	r6, dc9f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   dc9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc9bc:	3301      	adds	r3, #1
   dc9be:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   dc9c0:	e011      	b.n	dc9e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   dc9c2:	a80a      	add	r0, sp, #40	; 0x28
   dc9c4:	f7ff ffab 	bl	dc91e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dc9c8:	2800      	cmp	r0, #0
   dc9ca:	d1d6      	bne.n	dc97a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   dc9cc:	a80a      	add	r0, sp, #40	; 0x28
   dc9ce:	f7ff fd3f 	bl	dc450 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dc9d2:	4620      	mov	r0, r4
   dc9d4:	b017      	add	sp, #92	; 0x5c
   dc9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc9da:	3101      	adds	r1, #1
   dc9dc:	a80a      	add	r0, sp, #40	; 0x28
   dc9de:	f7ff ff9e 	bl	dc91e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dc9e2:	2800      	cmp	r0, #0
   dc9e4:	d1dd      	bne.n	dc9a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   dc9e6:	a811      	add	r0, sp, #68	; 0x44
   dc9e8:	f000 fd92 	bl	dd510 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   dc9ec:	a80d      	add	r0, sp, #52	; 0x34
   dc9ee:	f000 fd8f 	bl	dd510 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   dc9f2:	3514      	adds	r5, #20
   dc9f4:	e7c6      	b.n	dc984 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   dc9f6:	a911      	add	r1, sp, #68	; 0x44
   dc9f8:	4630      	mov	r0, r6
   dc9fa:	f000 fe05 	bl	dd608 <_ZN6StringC1EOS_>
   dc9fe:	e7dc      	b.n	dc9ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   dca00:	2600      	movs	r6, #0
   dca02:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   dca06:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   dca08:	4637      	mov	r7, r6
   dca0a:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   dca0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dca12:	429e      	cmp	r6, r3
   dca14:	f280 8097 	bge.w	dcb46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   dca18:	0133      	lsls	r3, r6, #4
   dca1a:	58d3      	ldr	r3, [r2, r3]
   dca1c:	9308      	str	r3, [sp, #32]
        if (!category) {
   dca1e:	b90b      	cbnz	r3, dca24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   dca20:	3601      	adds	r6, #1
   dca22:	e7f4      	b.n	dca0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   dca24:	fb0a f306 	mul.w	r3, sl, r6
   dca28:	9709      	str	r7, [sp, #36]	; 0x24
   dca2a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   dca2c:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   dca2e:	a909      	add	r1, sp, #36	; 0x24
   dca30:	a808      	add	r0, sp, #32
   dca32:	f7ff fb3c 	bl	dc0ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dca36:	4683      	mov	fp, r0
   dca38:	2800      	cmp	r0, #0
   dca3a:	d0f1      	beq.n	dca20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   dca3c:	4601      	mov	r1, r0
   dca3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   dca40:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dca44:	f10d 031f 	add.w	r3, sp, #31
   dca48:	4628      	mov	r0, r5
   dca4a:	f7ff fbaf 	bl	dc1ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dca4e:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dca52:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dca54:	f1b8 0f00 	cmp.w	r8, #0
   dca58:	d166      	bne.n	dcb28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   dca5a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   dca5e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   dca62:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   dca66:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dca6a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   dca6e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   dca72:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dca76:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   dca7a:	4293      	cmp	r3, r2
   dca7c:	db1a      	blt.n	dcab4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   dca7e:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   dca82:	f1bb 0f00 	cmp.w	fp, #0
   dca86:	dd4a      	ble.n	dcb1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   dca88:	fb0a f00b 	mul.w	r0, sl, fp
   dca8c:	f7fe fa0c 	bl	daea8 <malloc>
            if (!d) {
   dca90:	9004      	str	r0, [sp, #16]
   dca92:	2800      	cmp	r0, #0
   dca94:	d045      	beq.n	dcb22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   dca96:	e9d5 1200 	ldrd	r1, r2, [r5]
   dca9a:	fb0a 1202 	mla	r2, sl, r2, r1
   dca9e:	f7ff fe71 	bl	dc784 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   dcaa2:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   dcaa4:	6828      	ldr	r0, [r5, #0]
   dcaa6:	9304      	str	r3, [sp, #16]
   dcaa8:	f7fe fa06 	bl	daeb8 <free>
        data_ = d;
   dcaac:	9b04      	ldr	r3, [sp, #16]
   dcaae:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   dcab0:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   dcab4:	9b01      	ldr	r3, [sp, #4]
   dcab6:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   dcaba:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   dcabc:	fb0a f303 	mul.w	r3, sl, r3
   dcac0:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   dcac4:	f101 0014 	add.w	r0, r1, #20
   dcac8:	fb0a b202 	mla	r2, sl, r2, fp
   dcacc:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   dcace:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   dcad0:	f7ff fe58 	bl	dc784 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   dcad4:	9904      	ldr	r1, [sp, #16]
   dcad6:	b1a9      	cbz	r1, dcb04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   dcad8:	9b05      	ldr	r3, [sp, #20]
   dcada:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dcadc:	f84b 2003 	str.w	r2, [fp, r3]
   dcae0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   dcae4:	808b      	strh	r3, [r1, #4]
   dcae6:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   dcaea:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   dcaec:	e9c1 7702 	strd	r7, r7, [r1, #8]
   dcaf0:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   dcaf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dcaf4:	608b      	str	r3, [r1, #8]
   dcaf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   dcaf8:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   dcafa:	60cb      	str	r3, [r1, #12]
   dcafc:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   dcafe:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   dcb00:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dcb02:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   dcb04:	686b      	ldr	r3, [r5, #4]
   dcb06:	3301      	adds	r3, #1
   dcb08:	606b      	str	r3, [r5, #4]
   dcb0a:	a813      	add	r0, sp, #76	; 0x4c
   dcb0c:	f7ff fc8c 	bl	dc428 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dcb10:	f1b8 0f00 	cmp.w	r8, #0
   dcb14:	d008      	beq.n	dcb28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   dcb16:	a80d      	add	r0, sp, #52	; 0x34
   dcb18:	f7ff fc86 	bl	dc428 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dcb1c:	e756      	b.n	dc9cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   dcb1e:	4643      	mov	r3, r8
   dcb20:	e7c0      	b.n	dcaa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dcb22:	f04f 0801 	mov.w	r8, #1
   dcb26:	e7f0      	b.n	dcb0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   dcb28:	9b01      	ldr	r3, [sp, #4]
   dcb2a:	682d      	ldr	r5, [r5, #0]
   dcb2c:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   dcb30:	9b08      	ldr	r3, [sp, #32]
   dcb32:	781b      	ldrb	r3, [r3, #0]
   dcb34:	b92b      	cbnz	r3, dcb42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   dcb36:	f8d9 3000 	ldr.w	r3, [r9]
   dcb3a:	9a02      	ldr	r2, [sp, #8]
   dcb3c:	4413      	add	r3, r2
   dcb3e:	7c1b      	ldrb	r3, [r3, #16]
   dcb40:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   dcb42:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   dcb44:	e773      	b.n	dca2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb46:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dcb48:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb4a:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   dcb4c:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb4e:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dcb50:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   dcb52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   dcb54:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb56:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dcb58:	60a2      	str	r2, [r4, #8]
   dcb5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   dcb5c:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb5e:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dcb60:	60e2      	str	r2, [r4, #12]
   dcb62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   dcb64:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb66:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   dcb68:	6122      	str	r2, [r4, #16]
   dcb6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   dcb6c:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   dcb6e:	9b03      	ldr	r3, [sp, #12]
   dcb70:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   dcb72:	6162      	str	r2, [r4, #20]
   dcb74:	7623      	strb	r3, [r4, #24]
   dcb76:	e7ce      	b.n	dcb16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000dcb78 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dcb78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   dcb7a:	4605      	mov	r5, r0
   dcb7c:	4b09      	ldr	r3, [pc, #36]	; (dcba4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   dcb7e:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dcb82:	4604      	mov	r4, r0
   dcb84:	460e      	mov	r6, r1
        filter_(level, filters) {
   dcb86:	a801      	add	r0, sp, #4
   dcb88:	4611      	mov	r1, r2
   dcb8a:	f7f8 fb54 	bl	d5236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dcb8e:	aa01      	add	r2, sp, #4
   dcb90:	4631      	mov	r1, r6
   dcb92:	4628      	mov	r0, r5
   dcb94:	f7ff fedb 	bl	dc94e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dcb98:	a801      	add	r0, sp, #4
   dcb9a:	f7f8 fb0b 	bl	d51b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   dcb9e:	4620      	mov	r0, r4
   dcba0:	b004      	add	sp, #16
   dcba2:	bd70      	pop	{r4, r5, r6, pc}
   dcba4:	000df768 	.word	0x000df768

000dcba8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   dcba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcbaa:	460f      	mov	r7, r1
   dcbac:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dcbae:	4926      	ldr	r1, [pc, #152]	; (dcc48 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   dcbb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dcbb2:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   dcbb4:	4616      	mov	r6, r2
   dcbb6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dcbb8:	f001 ffff 	bl	debba <strcmp>
   dcbbc:	bb00      	cbnz	r0, dcc00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   dcbbe:	b1e4      	cbz	r4, dcbfa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   dcbc0:	4629      	mov	r1, r5
   dcbc2:	4668      	mov	r0, sp
   dcbc4:	f7ff fc8a 	bl	dc4dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dcbc8:	4920      	ldr	r1, [pc, #128]	; (dcc4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dcbca:	2024      	movs	r0, #36	; 0x24
   dcbcc:	f001 facc 	bl	de168 <_ZnwjRKSt9nothrow_t>
   dcbd0:	4605      	mov	r5, r0
   dcbd2:	b170      	cbz	r0, dcbf2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dcbd4:	4669      	mov	r1, sp
   dcbd6:	a803      	add	r0, sp, #12
   dcbd8:	f7f8 fb2d 	bl	d5236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dcbdc:	aa03      	add	r2, sp, #12
   dcbde:	4631      	mov	r1, r6
   dcbe0:	4628      	mov	r0, r5
   dcbe2:	f7ff ffc9 	bl	dcb78 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dcbe6:	a803      	add	r0, sp, #12
   dcbe8:	f7f8 fae4 	bl	d51b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   dcbec:	4b18      	ldr	r3, [pc, #96]	; (dcc50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   dcbee:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   dcbf0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dcbf2:	4668      	mov	r0, sp
   dcbf4:	f7f8 fade 	bl	d51b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dcbf8:	462c      	mov	r4, r5
}
   dcbfa:	4620      	mov	r0, r4
   dcbfc:	b007      	add	sp, #28
   dcbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   dcc00:	4914      	ldr	r1, [pc, #80]	; (dcc54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   dcc02:	4638      	mov	r0, r7
   dcc04:	f001 ffd9 	bl	debba <strcmp>
   dcc08:	b9e0      	cbnz	r0, dcc44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   dcc0a:	2c00      	cmp	r4, #0
   dcc0c:	d0f5      	beq.n	dcbfa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dcc0e:	4629      	mov	r1, r5
   dcc10:	4668      	mov	r0, sp
   dcc12:	f7ff fc63 	bl	dc4dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dcc16:	490d      	ldr	r1, [pc, #52]	; (dcc4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dcc18:	2024      	movs	r0, #36	; 0x24
   dcc1a:	f001 faa5 	bl	de168 <_ZnwjRKSt9nothrow_t>
   dcc1e:	4605      	mov	r5, r0
   dcc20:	2800      	cmp	r0, #0
   dcc22:	d0e6      	beq.n	dcbf2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dcc24:	4669      	mov	r1, sp
   dcc26:	a803      	add	r0, sp, #12
   dcc28:	f7f8 fb05 	bl	d5236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dcc2c:	aa03      	add	r2, sp, #12
   dcc2e:	4631      	mov	r1, r6
   dcc30:	4628      	mov	r0, r5
   dcc32:	f7ff ffa1 	bl	dcb78 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dcc36:	a803      	add	r0, sp, #12
   dcc38:	f7f8 fabc 	bl	d51b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dcc3c:	4b06      	ldr	r3, [pc, #24]	; (dcc58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   dcc3e:	602b      	str	r3, [r5, #0]
   dcc40:	622c      	str	r4, [r5, #32]
}
   dcc42:	e7d6      	b.n	dcbf2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   dcc44:	2400      	movs	r4, #0
   dcc46:	e7d8      	b.n	dcbfa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   dcc48:	000e038e 	.word	0x000e038e
   dcc4c:	000e0550 	.word	0x000e0550
   dcc50:	000e0420 	.word	0x000e0420
   dcc54:	000e0392 	.word	0x000e0392
   dcc58:	000e0408 	.word	0x000e0408

000dcc5c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   dcc5c:	4b01      	ldr	r3, [pc, #4]	; (dcc64 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dcc5e:	4a02      	ldr	r2, [pc, #8]	; (dcc68 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dcc60:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   dcc62:	4770      	bx	lr
   dcc64:	2003e570 	.word	0x2003e570
   dcc68:	000e03a3 	.word	0x000e03a3

000dcc6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dcc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcc70:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   dcc72:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dcc76:	4604      	mov	r4, r0
   dcc78:	460e      	mov	r6, r1
   dcc7a:	4617      	mov	r7, r2
   dcc7c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   dcc7e:	f001 f88b 	bl	ddd98 <_Z16_fetch_usbserialv>
   dcc82:	4581      	cmp	r9, r0
   dcc84:	d04c      	beq.n	dcd20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   dcc86:	792b      	ldrb	r3, [r5, #4]
   dcc88:	0719      	lsls	r1, r3, #28
   dcc8a:	d504      	bpl.n	dcc96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   dcc8c:	696a      	ldr	r2, [r5, #20]
   dcc8e:	4954      	ldr	r1, [pc, #336]	; (dcde0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   dcc90:	4620      	mov	r0, r4
   dcc92:	f7ff fa7c 	bl	dc18e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   dcc96:	f1b8 0f00 	cmp.w	r8, #0
   dcc9a:	d00d      	beq.n	dccb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   dcc9c:	215b      	movs	r1, #91	; 0x5b
   dcc9e:	4620      	mov	r0, r4
   dcca0:	f7ff fa69 	bl	dc176 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   dcca4:	4641      	mov	r1, r8
   dcca6:	4620      	mov	r0, r4
   dcca8:	f7ff fa56 	bl	dc158 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   dccac:	6823      	ldr	r3, [r4, #0]
   dccae:	494d      	ldr	r1, [pc, #308]	; (dcde4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   dccb0:	68db      	ldr	r3, [r3, #12]
   dccb2:	2202      	movs	r2, #2
   dccb4:	4620      	mov	r0, r4
   dccb6:	4798      	blx	r3
    if (attr.has_file) {
   dccb8:	792b      	ldrb	r3, [r5, #4]
   dccba:	07da      	lsls	r2, r3, #31
   dccbc:	d523      	bpl.n	dcd06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   dccbe:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   dccc2:	212f      	movs	r1, #47	; 0x2f
   dccc4:	4640      	mov	r0, r8
   dccc6:	f001 ffd5 	bl	dec74 <strrchr>
    if (s1) {
   dccca:	b108      	cbz	r0, dccd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   dcccc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   dccd0:	4641      	mov	r1, r8
   dccd2:	4620      	mov	r0, r4
   dccd4:	f7ff fa40 	bl	dc158 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   dccd8:	792b      	ldrb	r3, [r5, #4]
   dccda:	079b      	lsls	r3, r3, #30
   dccdc:	d508      	bpl.n	dccf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   dccde:	213a      	movs	r1, #58	; 0x3a
   dcce0:	4620      	mov	r0, r4
   dcce2:	f7ff fa48 	bl	dc176 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   dcce6:	68ea      	ldr	r2, [r5, #12]
   dcce8:	493f      	ldr	r1, [pc, #252]	; (dcde8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   dccea:	4620      	mov	r0, r4
   dccec:	f7ff fa4f 	bl	dc18e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   dccf0:	792a      	ldrb	r2, [r5, #4]
   dccf2:	6823      	ldr	r3, [r4, #0]
   dccf4:	f012 0f04 	tst.w	r2, #4
   dccf8:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   dccfa:	bf14      	ite	ne
   dccfc:	493b      	ldrne	r1, [pc, #236]	; (dcdec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   dccfe:	493c      	ldreq	r1, [pc, #240]	; (dcdf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   dcd00:	2202      	movs	r2, #2
            write(": ", 2);
   dcd02:	4620      	mov	r0, r4
   dcd04:	4798      	blx	r3
    if (attr.has_function) {
   dcd06:	792b      	ldrb	r3, [r5, #4]
   dcd08:	0758      	lsls	r0, r3, #29
   dcd0a:	d51d      	bpl.n	dcd48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dcd0c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dcd0e:	460b      	mov	r3, r1
   dcd10:	461a      	mov	r2, r3
    for (; *s; ++s) {
   dcd12:	f813 0b01 	ldrb.w	r0, [r3], #1
   dcd16:	b160      	cbz	r0, dcd32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   dcd18:	2820      	cmp	r0, #32
   dcd1a:	d108      	bne.n	dcd2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   dcd1c:	4619      	mov	r1, r3
   dcd1e:	e7f7      	b.n	dcd10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   dcd20:	4834      	ldr	r0, [pc, #208]	; (dcdf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   dcd22:	f000 f966 	bl	dcff2 <_ZN5spark12NetworkClass9listeningEv>
   dcd26:	2800      	cmp	r0, #0
   dcd28:	d0ad      	beq.n	dcc86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   dcd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   dcd2e:	2828      	cmp	r0, #40	; 0x28
   dcd30:	d1ee      	bne.n	dcd10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   dcd32:	6823      	ldr	r3, [r4, #0]
   dcd34:	1a52      	subs	r2, r2, r1
   dcd36:	68db      	ldr	r3, [r3, #12]
   dcd38:	4620      	mov	r0, r4
   dcd3a:	4798      	blx	r3
        write("(): ", 4);
   dcd3c:	6823      	ldr	r3, [r4, #0]
   dcd3e:	492e      	ldr	r1, [pc, #184]	; (dcdf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   dcd40:	68db      	ldr	r3, [r3, #12]
   dcd42:	2204      	movs	r2, #4
   dcd44:	4620      	mov	r0, r4
   dcd46:	4798      	blx	r3
    return log_level_name(level, nullptr);
   dcd48:	2100      	movs	r1, #0
   dcd4a:	4638      	mov	r0, r7
   dcd4c:	f7fd ff62 	bl	dac14 <log_level_name>
   dcd50:	4601      	mov	r1, r0
    write(s);
   dcd52:	4620      	mov	r0, r4
   dcd54:	f7ff fa00 	bl	dc158 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   dcd58:	6823      	ldr	r3, [r4, #0]
   dcd5a:	4925      	ldr	r1, [pc, #148]	; (dcdf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   dcd5c:	68db      	ldr	r3, [r3, #12]
   dcd5e:	2202      	movs	r2, #2
   dcd60:	4620      	mov	r0, r4
   dcd62:	4798      	blx	r3
    if (msg) {
   dcd64:	b11e      	cbz	r6, dcd6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   dcd66:	4631      	mov	r1, r6
   dcd68:	4620      	mov	r0, r4
   dcd6a:	f7ff f9f5 	bl	dc158 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   dcd6e:	792b      	ldrb	r3, [r5, #4]
   dcd70:	f013 0f30 	tst.w	r3, #48	; 0x30
   dcd74:	d02c      	beq.n	dcdd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   dcd76:	6823      	ldr	r3, [r4, #0]
   dcd78:	4920      	ldr	r1, [pc, #128]	; (dcdfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   dcd7a:	68db      	ldr	r3, [r3, #12]
   dcd7c:	2202      	movs	r2, #2
   dcd7e:	4620      	mov	r0, r4
   dcd80:	4798      	blx	r3
        if (attr.has_code) {
   dcd82:	792b      	ldrb	r3, [r5, #4]
   dcd84:	06d9      	lsls	r1, r3, #27
   dcd86:	d50a      	bpl.n	dcd9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   dcd88:	6823      	ldr	r3, [r4, #0]
   dcd8a:	491d      	ldr	r1, [pc, #116]	; (dce00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   dcd8c:	68db      	ldr	r3, [r3, #12]
   dcd8e:	2207      	movs	r2, #7
   dcd90:	4620      	mov	r0, r4
   dcd92:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   dcd94:	69aa      	ldr	r2, [r5, #24]
   dcd96:	491b      	ldr	r1, [pc, #108]	; (dce04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   dcd98:	4620      	mov	r0, r4
   dcd9a:	f7ff f9f8 	bl	dc18e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   dcd9e:	792b      	ldrb	r3, [r5, #4]
   dcda0:	069a      	lsls	r2, r3, #26
   dcda2:	d511      	bpl.n	dcdc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   dcda4:	06db      	lsls	r3, r3, #27
   dcda6:	d505      	bpl.n	dcdb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   dcda8:	6823      	ldr	r3, [r4, #0]
   dcdaa:	4910      	ldr	r1, [pc, #64]	; (dcdec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   dcdac:	68db      	ldr	r3, [r3, #12]
   dcdae:	2202      	movs	r2, #2
   dcdb0:	4620      	mov	r0, r4
   dcdb2:	4798      	blx	r3
            write("details = ", 10);
   dcdb4:	6823      	ldr	r3, [r4, #0]
   dcdb6:	4914      	ldr	r1, [pc, #80]	; (dce08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   dcdb8:	68db      	ldr	r3, [r3, #12]
   dcdba:	4620      	mov	r0, r4
   dcdbc:	220a      	movs	r2, #10
   dcdbe:	4798      	blx	r3
            write(attr.details);
   dcdc0:	69e9      	ldr	r1, [r5, #28]
   dcdc2:	4620      	mov	r0, r4
   dcdc4:	f7ff f9c8 	bl	dc158 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   dcdc8:	215d      	movs	r1, #93	; 0x5d
   dcdca:	4620      	mov	r0, r4
   dcdcc:	f7ff f9d3 	bl	dc176 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   dcdd0:	6823      	ldr	r3, [r4, #0]
   dcdd2:	490e      	ldr	r1, [pc, #56]	; (dce0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   dcdd4:	68db      	ldr	r3, [r3, #12]
   dcdd6:	4620      	mov	r0, r4
   dcdd8:	2202      	movs	r2, #2
}
   dcdda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   dcdde:	4718      	bx	r3
   dcde0:	000e03a7 	.word	0x000e03a7
   dcde4:	000e03ae 	.word	0x000e03ae
   dcde8:	000df9cb 	.word	0x000df9cb
   dcdec:	000e03b1 	.word	0x000e03b1
   dcdf0:	000e03b6 	.word	0x000e03b6
   dcdf4:	2003e59c 	.word	0x2003e59c
   dcdf8:	000e03b4 	.word	0x000e03b4
   dcdfc:	000e03b9 	.word	0x000e03b9
   dce00:	000e03bc 	.word	0x000e03bc
   dce04:	000df0e3 	.word	0x000df0e3
   dce08:	000e03c4 	.word	0x000e03c4
   dce0c:	000e03cf 	.word	0x000e03cf

000dce10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dce10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dce14:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   dce16:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dce1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dce1c:	4605      	mov	r5, r0
   dce1e:	460f      	mov	r7, r1
   dce20:	4690      	mov	r8, r2
   dce22:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   dce24:	f000 ffb8 	bl	ddd98 <_Z16_fetch_usbserialv>
   dce28:	4581      	cmp	r9, r0
   dce2a:	d105      	bne.n	dce38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   dce2c:	4849      	ldr	r0, [pc, #292]	; (dcf54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   dce2e:	f000 f8e0 	bl	dcff2 <_ZN5spark12NetworkClass9listeningEv>
   dce32:	2800      	cmp	r0, #0
   dce34:	f040 808a 	bne.w	dcf4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   dce38:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   dce3a:	4a47      	ldr	r2, [pc, #284]	; (dcf58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   dce3c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   dce3e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   dce42:	a801      	add	r0, sp, #4
        strm_(stream) {
   dce44:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   dce46:	f88d 9008 	strb.w	r9, [sp, #8]
   dce4a:	f7ff f878 	bl	dbf3e <_ZN5spark10JSONWriter11beginObjectEv>
   dce4e:	4649      	mov	r1, r9
   dce50:	4640      	mov	r0, r8
   dce52:	f7fd fedf 	bl	dac14 <log_level_name>
    json.name("l", 1).value(s);
   dce56:	4941      	ldr	r1, [pc, #260]	; (dcf5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   dce58:	4680      	mov	r8, r0
   dce5a:	2201      	movs	r2, #1
   dce5c:	a801      	add	r0, sp, #4
   dce5e:	f7ff f8f7 	bl	dc050 <_ZN5spark10JSONWriter4nameEPKcj>
   dce62:	4641      	mov	r1, r8
   dce64:	f7ff f96a 	bl	dc13c <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   dce68:	b13f      	cbz	r7, dce7a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   dce6a:	493d      	ldr	r1, [pc, #244]	; (dcf60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   dce6c:	2201      	movs	r2, #1
   dce6e:	a801      	add	r0, sp, #4
   dce70:	f7ff f8ee 	bl	dc050 <_ZN5spark10JSONWriter4nameEPKcj>
   dce74:	4639      	mov	r1, r7
   dce76:	f7ff f961 	bl	dc13c <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   dce7a:	b13e      	cbz	r6, dce8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   dce7c:	4939      	ldr	r1, [pc, #228]	; (dcf64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   dce7e:	2201      	movs	r2, #1
   dce80:	a801      	add	r0, sp, #4
   dce82:	f7ff f8e5 	bl	dc050 <_ZN5spark10JSONWriter4nameEPKcj>
   dce86:	4631      	mov	r1, r6
   dce88:	f7ff f958 	bl	dc13c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   dce8c:	7923      	ldrb	r3, [r4, #4]
   dce8e:	07df      	lsls	r7, r3, #31
   dce90:	d50e      	bpl.n	dceb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   dce92:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   dce94:	212f      	movs	r1, #47	; 0x2f
   dce96:	4630      	mov	r0, r6
   dce98:	f001 feec 	bl	dec74 <strrchr>
    if (s1) {
   dce9c:	b100      	cbz	r0, dcea0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   dce9e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   dcea0:	4931      	ldr	r1, [pc, #196]	; (dcf68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   dcea2:	2201      	movs	r2, #1
   dcea4:	a801      	add	r0, sp, #4
   dcea6:	f7ff f8d3 	bl	dc050 <_ZN5spark10JSONWriter4nameEPKcj>
   dceaa:	4631      	mov	r1, r6
   dceac:	f7ff f946 	bl	dc13c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   dceb0:	7923      	ldrb	r3, [r4, #4]
   dceb2:	079e      	lsls	r6, r3, #30
   dceb4:	d507      	bpl.n	dcec6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   dceb6:	492d      	ldr	r1, [pc, #180]	; (dcf6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   dceb8:	2202      	movs	r2, #2
   dceba:	a801      	add	r0, sp, #4
   dcebc:	f7ff f8c8 	bl	dc050 <_ZN5spark10JSONWriter4nameEPKcj>
   dcec0:	68e1      	ldr	r1, [r4, #12]
   dcec2:	f7ff f849 	bl	dbf58 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   dcec6:	7923      	ldrb	r3, [r4, #4]
   dcec8:	0758      	lsls	r0, r3, #29
   dceca:	d514      	bpl.n	dcef6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dcecc:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dcece:	4633      	mov	r3, r6
   dced0:	461f      	mov	r7, r3
    for (; *s; ++s) {
   dced2:	f813 2b01 	ldrb.w	r2, [r3], #1
   dced6:	b12a      	cbz	r2, dcee4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   dced8:	2a20      	cmp	r2, #32
   dceda:	d101      	bne.n	dcee0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   dcedc:	461e      	mov	r6, r3
   dcede:	e7f7      	b.n	dced0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   dcee0:	2a28      	cmp	r2, #40	; 0x28
   dcee2:	d1f5      	bne.n	dced0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   dcee4:	4922      	ldr	r1, [pc, #136]	; (dcf70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   dcee6:	2202      	movs	r2, #2
   dcee8:	a801      	add	r0, sp, #4
   dceea:	f7ff f8b1 	bl	dc050 <_ZN5spark10JSONWriter4nameEPKcj>
   dceee:	1bba      	subs	r2, r7, r6
   dcef0:	4631      	mov	r1, r6
   dcef2:	f7ff f8bd 	bl	dc070 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   dcef6:	7923      	ldrb	r3, [r4, #4]
   dcef8:	0719      	lsls	r1, r3, #28
   dcefa:	d507      	bpl.n	dcf0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   dcefc:	491d      	ldr	r1, [pc, #116]	; (dcf74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   dcefe:	2201      	movs	r2, #1
   dcf00:	a801      	add	r0, sp, #4
   dcf02:	f7ff f8a5 	bl	dc050 <_ZN5spark10JSONWriter4nameEPKcj>
   dcf06:	6961      	ldr	r1, [r4, #20]
   dcf08:	f7ff f838 	bl	dbf7c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   dcf0c:	7923      	ldrb	r3, [r4, #4]
   dcf0e:	06da      	lsls	r2, r3, #27
   dcf10:	d508      	bpl.n	dcf24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   dcf12:	2204      	movs	r2, #4
   dcf14:	4918      	ldr	r1, [pc, #96]	; (dcf78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   dcf16:	eb0d 0002 	add.w	r0, sp, r2
   dcf1a:	f7ff f899 	bl	dc050 <_ZN5spark10JSONWriter4nameEPKcj>
   dcf1e:	69a1      	ldr	r1, [r4, #24]
   dcf20:	f7ff f81a 	bl	dbf58 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   dcf24:	7923      	ldrb	r3, [r4, #4]
   dcf26:	069b      	lsls	r3, r3, #26
   dcf28:	d507      	bpl.n	dcf3a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   dcf2a:	4914      	ldr	r1, [pc, #80]	; (dcf7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   dcf2c:	2206      	movs	r2, #6
   dcf2e:	a801      	add	r0, sp, #4
   dcf30:	f7ff f88e 	bl	dc050 <_ZN5spark10JSONWriter4nameEPKcj>
   dcf34:	69e1      	ldr	r1, [r4, #28]
   dcf36:	f7ff f901 	bl	dc13c <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   dcf3a:	a801      	add	r0, sp, #4
   dcf3c:	f7fe ffe9 	bl	dbf12 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   dcf40:	6a28      	ldr	r0, [r5, #32]
   dcf42:	490f      	ldr	r1, [pc, #60]	; (dcf80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   dcf44:	6803      	ldr	r3, [r0, #0]
   dcf46:	2202      	movs	r2, #2
   dcf48:	68db      	ldr	r3, [r3, #12]
   dcf4a:	4798      	blx	r3
}
   dcf4c:	b005      	add	sp, #20
   dcf4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcf52:	bf00      	nop
   dcf54:	2003e59c 	.word	0x2003e59c
   dcf58:	000e03f0 	.word	0x000e03f0
   dcf5c:	000e0384 	.word	0x000e0384
   dcf60:	000dfd49 	.word	0x000dfd49
   dcf64:	000e03d2 	.word	0x000e03d2
   dcf68:	000df2d7 	.word	0x000df2d7
   dcf6c:	000e03d4 	.word	0x000e03d4
   dcf70:	000e03d7 	.word	0x000e03d7
   dcf74:	000df503 	.word	0x000df503
   dcf78:	000e03da 	.word	0x000e03da
   dcf7c:	000e03df 	.word	0x000e03df
   dcf80:	000e03cf 	.word	0x000e03cf

000dcf84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dcf84:	2300      	movs	r3, #0
   dcf86:	6840      	ldr	r0, [r0, #4]
   dcf88:	461a      	mov	r2, r3
   dcf8a:	f7fd bf2d 	b.w	dade8 <network_connect>

000dcf8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dcf8e:	6840      	ldr	r0, [r0, #4]
   dcf90:	2200      	movs	r2, #0
   dcf92:	2102      	movs	r1, #2
   dcf94:	f7fd bf38 	b.w	dae08 <network_disconnect>

000dcf98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dcf98:	2200      	movs	r2, #0
   dcf9a:	6840      	ldr	r0, [r0, #4]
   dcf9c:	4611      	mov	r1, r2
   dcf9e:	f7fd bf2b 	b.w	dadf8 <network_connecting>

000dcfa2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dcfa2:	2200      	movs	r2, #0
   dcfa4:	6840      	ldr	r0, [r0, #4]
   dcfa6:	4611      	mov	r1, r2
   dcfa8:	f7fd bf36 	b.w	dae18 <network_ready>

000dcfac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dcfac:	2300      	movs	r3, #0
   dcfae:	6840      	ldr	r0, [r0, #4]
   dcfb0:	461a      	mov	r2, r3
   dcfb2:	4619      	mov	r1, r3
   dcfb4:	f7fd bf38 	b.w	dae28 <network_on>

000dcfb8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dcfb8:	2300      	movs	r3, #0
   dcfba:	6840      	ldr	r0, [r0, #4]
   dcfbc:	461a      	mov	r2, r3
   dcfbe:	4619      	mov	r1, r3
   dcfc0:	f7fd bf3a 	b.w	dae38 <network_off>

000dcfc4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   dcfc4:	6840      	ldr	r0, [r0, #4]
   dcfc6:	2100      	movs	r1, #0
   dcfc8:	f7fd bf5e 	b.w	dae88 <network_is_on>

000dcfcc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   dcfcc:	6840      	ldr	r0, [r0, #4]
   dcfce:	2100      	movs	r1, #0
   dcfd0:	f7fd bf62 	b.w	dae98 <network_is_off>

000dcfd4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dcfd4:	6840      	ldr	r0, [r0, #4]
   dcfd6:	2200      	movs	r2, #0
   dcfd8:	f081 0101 	eor.w	r1, r1, #1
   dcfdc:	f7fd bf34 	b.w	dae48 <network_listen>

000dcfe0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dcfe0:	6840      	ldr	r0, [r0, #4]
   dcfe2:	2200      	movs	r2, #0
   dcfe4:	f7fd bf40 	b.w	dae68 <network_set_listen_timeout>

000dcfe8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dcfe8:	2200      	movs	r2, #0
   dcfea:	6840      	ldr	r0, [r0, #4]
   dcfec:	4611      	mov	r1, r2
   dcfee:	f7fd bf43 	b.w	dae78 <network_get_listen_timeout>

000dcff2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dcff2:	2200      	movs	r2, #0
   dcff4:	6840      	ldr	r0, [r0, #4]
   dcff6:	4611      	mov	r1, r2
   dcff8:	f7fd bf2e 	b.w	dae58 <network_listening>

000dcffc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dcffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dd000:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   dd002:	b095      	sub	sp, #84	; 0x54
   dd004:	4616      	mov	r6, r2
   dd006:	460d      	mov	r5, r1
   dd008:	4607      	mov	r7, r0
    IPAddress addr;
   dd00a:	f7fe fe23 	bl	dbc54 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   dd00e:	4621      	mov	r1, r4
   dd010:	2218      	movs	r2, #24
   dd012:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   dd014:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dd016:	f001 fd59 	bl	deacc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dd01a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   dd01c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dd020:	4621      	mov	r1, r4
   dd022:	466b      	mov	r3, sp
   dd024:	aa0c      	add	r2, sp, #48	; 0x30
   dd026:	4630      	mov	r0, r6
   dd028:	f7fd fc9c 	bl	da964 <netdb_getaddrinfo>
    if (!r) {
   dd02c:	4604      	mov	r4, r0
   dd02e:	2800      	cmp	r0, #0
   dd030:	d146      	bne.n	dd0c0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dd032:	4602      	mov	r2, r0
   dd034:	2101      	movs	r1, #1
   dd036:	6868      	ldr	r0, [r5, #4]
   dd038:	f7fd feee 	bl	dae18 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dd03c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dd03e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dd040:	4622      	mov	r2, r4
   dd042:	6868      	ldr	r0, [r5, #4]
   dd044:	f7fd fee8 	bl	dae18 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dd048:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dd04a:	4681      	mov	r9, r0
        bool ok = false;
   dd04c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dd04e:	2e00      	cmp	r6, #0
   dd050:	d036      	beq.n	dd0c0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   dd052:	2900      	cmp	r1, #0
   dd054:	d134      	bne.n	dd0c0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dd056:	6873      	ldr	r3, [r6, #4]
   dd058:	2b02      	cmp	r3, #2
   dd05a:	d003      	beq.n	dd064 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   dd05c:	2b0a      	cmp	r3, #10
   dd05e:	d00b      	beq.n	dd078 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dd060:	69f6      	ldr	r6, [r6, #28]
   dd062:	e7f4      	b.n	dd04e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   dd064:	f1b8 0f00 	cmp.w	r8, #0
   dd068:	d004      	beq.n	dd074 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dd06a:	6971      	ldr	r1, [r6, #20]
   dd06c:	4638      	mov	r0, r7
   dd06e:	3104      	adds	r1, #4
   dd070:	f7fe fe1d 	bl	dbcae <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   dd074:	4641      	mov	r1, r8
   dd076:	e7f3      	b.n	dd060 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   dd078:	f1b9 0f00 	cmp.w	r9, #0
   dd07c:	d101      	bne.n	dd082 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   dd07e:	4649      	mov	r1, r9
   dd080:	e7ee      	b.n	dd060 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dd082:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dd084:	2210      	movs	r2, #16
   dd086:	a801      	add	r0, sp, #4
   dd088:	f001 fd20 	bl	deacc <memset>
                    a.v = 6;
   dd08c:	2306      	movs	r3, #6
   dd08e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dd092:	ad01      	add	r5, sp, #4
   dd094:	f104 0308 	add.w	r3, r4, #8
   dd098:	3418      	adds	r4, #24
   dd09a:	6818      	ldr	r0, [r3, #0]
   dd09c:	6859      	ldr	r1, [r3, #4]
   dd09e:	462a      	mov	r2, r5
   dd0a0:	c203      	stmia	r2!, {r0, r1}
   dd0a2:	3308      	adds	r3, #8
   dd0a4:	42a3      	cmp	r3, r4
   dd0a6:	4615      	mov	r5, r2
   dd0a8:	d1f7      	bne.n	dd09a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   dd0aa:	a901      	add	r1, sp, #4
   dd0ac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   dd0ae:	ad07      	add	r5, sp, #28
   dd0b0:	f7fe fdde 	bl	dbc70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dd0b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dd0b6:	1d3c      	adds	r4, r7, #4
   dd0b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dd0ba:	682b      	ldr	r3, [r5, #0]
   dd0bc:	7023      	strb	r3, [r4, #0]
   dd0be:	e7de      	b.n	dd07e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dd0c0:	9800      	ldr	r0, [sp, #0]
   dd0c2:	f7fd fc47 	bl	da954 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dd0c6:	4638      	mov	r0, r7
   dd0c8:	b015      	add	sp, #84	; 0x54
   dd0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000dd0d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dd0d0:	4b02      	ldr	r3, [pc, #8]	; (dd0dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dd0d2:	4a03      	ldr	r2, [pc, #12]	; (dd0e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dd0d4:	601a      	str	r2, [r3, #0]
   dd0d6:	2200      	movs	r2, #0
   dd0d8:	605a      	str	r2, [r3, #4]

} // spark
   dd0da:	4770      	bx	lr
   dd0dc:	2003e59c 	.word	0x2003e59c
   dd0e0:	000e0468 	.word	0x000e0468

000dd0e4 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   dd0e4:	b508      	push	{r3, lr}
            return &Wire1;
   dd0e6:	f001 f819 	bl	de11c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   dd0ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   dd0ee:	f7fe bd1f 	b.w	dbb30 <_ZN7TwoWire4lockEv>

000dd0f2 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   dd0f2:	b510      	push	{r4, lr}
   dd0f4:	4604      	mov	r4, r0
    lock_(_lock)
   dd0f6:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   dd0f8:	b109      	cbz	r1, dd0fe <_ZN4PMICC1Eb+0xc>
        lock();
   dd0fa:	f7ff fff3 	bl	dd0e4 <_ZN4PMIC4lockEv.constprop.0>
}
   dd0fe:	4620      	mov	r0, r4
   dd100:	bd10      	pop	{r4, pc}

000dd102 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   dd102:	b508      	push	{r3, lr}
            return &Wire1;
   dd104:	f001 f80a 	bl	de11c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   dd108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   dd10c:	f7fe bd19 	b.w	dbb42 <_ZN7TwoWire6unlockEv>

000dd110 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   dd110:	b510      	push	{r4, lr}
    if (lock_) {
   dd112:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   dd114:	4604      	mov	r4, r0
    if (lock_) {
   dd116:	b10b      	cbz	r3, dd11c <_ZN4PMICD1Ev+0xc>
        unlock();
   dd118:	f7ff fff3 	bl	dd102 <_ZN4PMIC6unlockEv>
}
   dd11c:	4620      	mov	r0, r4
   dd11e:	bd10      	pop	{r4, pc}

000dd120 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   dd120:	b510      	push	{r4, lr}
   dd122:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   dd124:	6800      	ldr	r0, [r0, #0]
   dd126:	f7ff ffec 	bl	dd102 <_ZN4PMIC6unlockEv>
   dd12a:	4620      	mov	r0, r4
   dd12c:	bd10      	pop	{r4, pc}

000dd12e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   dd12e:	b530      	push	{r4, r5, lr}
   dd130:	b087      	sub	sp, #28
   dd132:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dd134:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dd136:	f7ff ffd5 	bl	dd0e4 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dd13a:	236b      	movs	r3, #107	; 0x6b
   dd13c:	f88d 3008 	strb.w	r3, [sp, #8]
   dd140:	2300      	movs	r3, #0
   dd142:	2401      	movs	r4, #1
   dd144:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   dd146:	230a      	movs	r3, #10
   dd148:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dd14a:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   dd14e:	f000 ffe5 	bl	de11c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   dd152:	a902      	add	r1, sp, #8
   dd154:	f7fe fcd0 	bl	dbaf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   dd158:	f000 ffe0 	bl	de11c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   dd15c:	6803      	ldr	r3, [r0, #0]
   dd15e:	4629      	mov	r1, r5
   dd160:	689b      	ldr	r3, [r3, #8]
   dd162:	4798      	blx	r3
            return &Wire1;
   dd164:	f000 ffda 	bl	de11c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   dd168:	4621      	mov	r1, r4
   dd16a:	f7fe fcdd 	bl	dbb28 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   dd16e:	9403      	str	r4, [sp, #12]
            return &Wire1;
   dd170:	f000 ffd4 	bl	de11c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   dd174:	a902      	add	r1, sp, #8
   dd176:	f7fe fc8f 	bl	dba98 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   dd17a:	f000 ffcf 	bl	de11c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   dd17e:	6803      	ldr	r3, [r0, #0]
   dd180:	695b      	ldr	r3, [r3, #20]
   dd182:	4798      	blx	r3
   dd184:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   dd186:	a801      	add	r0, sp, #4
   dd188:	f7ff ffca 	bl	dd120 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dd18c:	b2e0      	uxtb	r0, r4
   dd18e:	b007      	add	sp, #28
   dd190:	bd30      	pop	{r4, r5, pc}

000dd192 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   dd192:	b570      	push	{r4, r5, r6, lr}
   dd194:	b086      	sub	sp, #24
   dd196:	4614      	mov	r4, r2
   dd198:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dd19a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dd19c:	f7ff ffa2 	bl	dd0e4 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dd1a0:	236b      	movs	r3, #107	; 0x6b
   dd1a2:	f88d 3008 	strb.w	r3, [sp, #8]
   dd1a6:	2300      	movs	r3, #0
   dd1a8:	9303      	str	r3, [sp, #12]
   dd1aa:	2601      	movs	r6, #1
    timeout_ = ms;
   dd1ac:	230a      	movs	r3, #10
   dd1ae:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dd1b0:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   dd1b4:	f000 ffb2 	bl	de11c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   dd1b8:	a902      	add	r1, sp, #8
   dd1ba:	f7fe fc9d 	bl	dbaf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   dd1be:	f000 ffad 	bl	de11c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   dd1c2:	6803      	ldr	r3, [r0, #0]
   dd1c4:	4629      	mov	r1, r5
   dd1c6:	689b      	ldr	r3, [r3, #8]
   dd1c8:	4798      	blx	r3
            return &Wire1;
   dd1ca:	f000 ffa7 	bl	de11c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   dd1ce:	6803      	ldr	r3, [r0, #0]
   dd1d0:	4621      	mov	r1, r4
   dd1d2:	689b      	ldr	r3, [r3, #8]
   dd1d4:	4798      	blx	r3
            return &Wire1;
   dd1d6:	f000 ffa1 	bl	de11c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   dd1da:	4631      	mov	r1, r6
   dd1dc:	f7fe fca4 	bl	dbb28 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   dd1e0:	a801      	add	r0, sp, #4
   dd1e2:	f7ff ff9d 	bl	dd120 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dd1e6:	b006      	add	sp, #24
   dd1e8:	bd70      	pop	{r4, r5, r6, pc}

000dd1ea <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   dd1ea:	b513      	push	{r0, r1, r4, lr}
   dd1ec:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dd1ee:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dd1f0:	f7ff ff78 	bl	dd0e4 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   dd1f4:	2101      	movs	r1, #1
   dd1f6:	4620      	mov	r0, r4
   dd1f8:	f7ff ff99 	bl	dd12e <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   dd1fc:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   dd200:	f040 0210 	orr.w	r2, r0, #16
   dd204:	2101      	movs	r1, #1
   dd206:	4620      	mov	r0, r4
   dd208:	f7ff ffc3 	bl	dd192 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   dd20c:	a801      	add	r0, sp, #4
   dd20e:	f7ff ff87 	bl	dd120 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dd212:	2001      	movs	r0, #1
   dd214:	b002      	add	sp, #8
   dd216:	bd10      	pop	{r4, pc}

000dd218 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   dd218:	b513      	push	{r0, r1, r4, lr}
   dd21a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dd21c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dd21e:	f7ff ff61 	bl	dd0e4 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   dd222:	2101      	movs	r1, #1
   dd224:	4620      	mov	r0, r4
   dd226:	f7ff ff82 	bl	dd12e <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   dd22a:	2101      	movs	r1, #1
   dd22c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   dd230:	4620      	mov	r0, r4
   dd232:	f7ff ffae 	bl	dd192 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   dd236:	a801      	add	r0, sp, #4
   dd238:	f7ff ff72 	bl	dd120 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dd23c:	2001      	movs	r0, #1
   dd23e:	b002      	add	sp, #8
   dd240:	bd10      	pop	{r4, pc}

000dd242 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dd242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd244:	4606      	mov	r6, r0
   dd246:	460d      	mov	r5, r1
  size_t n = 0;
   dd248:	188f      	adds	r7, r1, r2
   dd24a:	2400      	movs	r4, #0
  while (size--) {
   dd24c:	42bd      	cmp	r5, r7
   dd24e:	d00c      	beq.n	dd26a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dd250:	6833      	ldr	r3, [r6, #0]
   dd252:	f815 1b01 	ldrb.w	r1, [r5], #1
   dd256:	689b      	ldr	r3, [r3, #8]
   dd258:	4630      	mov	r0, r6
   dd25a:	4798      	blx	r3
     if (chunk>=0)
   dd25c:	1e03      	subs	r3, r0, #0
   dd25e:	db01      	blt.n	dd264 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dd260:	441c      	add	r4, r3
  while (size--) {
   dd262:	e7f3      	b.n	dd24c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dd264:	2c00      	cmp	r4, #0
   dd266:	bf08      	it	eq
   dd268:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   dd26a:	4620      	mov	r0, r4
   dd26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dd26e <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   dd26e:	b513      	push	{r0, r1, r4, lr}
   dd270:	4604      	mov	r4, r0
    }
   dd272:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   dd274:	b159      	cbz	r1, dd28e <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   dd276:	9101      	str	r1, [sp, #4]
   dd278:	f001 fccf 	bl	dec1a <strlen>
   dd27c:	6823      	ldr	r3, [r4, #0]
   dd27e:	9901      	ldr	r1, [sp, #4]
   dd280:	68db      	ldr	r3, [r3, #12]
   dd282:	4602      	mov	r2, r0
   dd284:	4620      	mov	r0, r4
    }
   dd286:	b002      	add	sp, #8
   dd288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   dd28c:	4718      	bx	r3
    }
   dd28e:	b002      	add	sp, #8
   dd290:	bd10      	pop	{r4, pc}

000dd292 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   dd292:	b508      	push	{r3, lr}
  return write(str);
   dd294:	f7ff ffeb 	bl	dd26e <_ZN5Print5writeEPKc>
}
   dd298:	bd08      	pop	{r3, pc}

000dd29a <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   dd29a:	6803      	ldr	r3, [r0, #0]
   dd29c:	689b      	ldr	r3, [r3, #8]
   dd29e:	4718      	bx	r3

000dd2a0 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dd2a0:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dd2a2:	210d      	movs	r1, #13
{
   dd2a4:	4605      	mov	r5, r0
  size_t n = print('\r');
   dd2a6:	f7ff fff8 	bl	dd29a <_ZN5Print5printEc>
  n += print('\n');
   dd2aa:	210a      	movs	r1, #10
  size_t n = print('\r');
   dd2ac:	4604      	mov	r4, r0
  n += print('\n');
   dd2ae:	4628      	mov	r0, r5
   dd2b0:	f7ff fff3 	bl	dd29a <_ZN5Print5printEc>
  return n;
}
   dd2b4:	4420      	add	r0, r4
   dd2b6:	bd38      	pop	{r3, r4, r5, pc}

000dd2b8 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dd2b8:	b530      	push	{r4, r5, lr}
   dd2ba:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dd2bc:	2300      	movs	r3, #0
   dd2be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dd2c2:	2a01      	cmp	r2, #1
   dd2c4:	bf98      	it	ls
   dd2c6:	220a      	movls	r2, #10
   dd2c8:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   dd2ca:	460d      	mov	r5, r1
   dd2cc:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   dd2d0:	fb01 5312 	mls	r3, r1, r2, r5
   dd2d4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dd2d8:	2b09      	cmp	r3, #9
   dd2da:	bf94      	ite	ls
   dd2dc:	3330      	addls	r3, #48	; 0x30
   dd2de:	3337      	addhi	r3, #55	; 0x37
   dd2e0:	b2db      	uxtb	r3, r3
  } while(n);
   dd2e2:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dd2e4:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   dd2e8:	d9ef      	bls.n	dd2ca <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   dd2ea:	4621      	mov	r1, r4
   dd2ec:	f7ff ffbf 	bl	dd26e <_ZN5Print5writeEPKc>
}
   dd2f0:	b00b      	add	sp, #44	; 0x2c
   dd2f2:	bd30      	pop	{r4, r5, pc}

000dd2f4 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   dd2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd2f8:	b086      	sub	sp, #24
   dd2fa:	af00      	add	r7, sp, #0
   dd2fc:	4605      	mov	r5, r0
   dd2fe:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   dd300:	1d38      	adds	r0, r7, #4
   dd302:	2114      	movs	r1, #20
{
   dd304:	4614      	mov	r4, r2
    va_copy(args2, args);
   dd306:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   dd308:	f7fd fdfe 	bl	daf08 <vsnprintf>

    if (n<bufsize)
   dd30c:	2813      	cmp	r0, #19
   dd30e:	d80e      	bhi.n	dd32e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   dd310:	1d39      	adds	r1, r7, #4
   dd312:	4628      	mov	r0, r5
   dd314:	f7ff ffab 	bl	dd26e <_ZN5Print5writeEPKc>
   dd318:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   dd31a:	b11e      	cbz	r6, dd324 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   dd31c:	4628      	mov	r0, r5
   dd31e:	f7ff ffbf 	bl	dd2a0 <_ZN5Print7printlnEv>
   dd322:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   dd324:	4620      	mov	r0, r4
   dd326:	3718      	adds	r7, #24
   dd328:	46bd      	mov	sp, r7
   dd32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   dd32e:	f100 0308 	add.w	r3, r0, #8
   dd332:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   dd336:	46e8      	mov	r8, sp
        char bigger[n+1];
   dd338:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   dd33c:	4622      	mov	r2, r4
   dd33e:	1c41      	adds	r1, r0, #1
   dd340:	683b      	ldr	r3, [r7, #0]
   dd342:	4668      	mov	r0, sp
   dd344:	f7fd fde0 	bl	daf08 <vsnprintf>
  return write(str);
   dd348:	4669      	mov	r1, sp
   dd34a:	4628      	mov	r0, r5
   dd34c:	f7ff ff8f 	bl	dd26e <_ZN5Print5writeEPKc>
   dd350:	4604      	mov	r4, r0
   dd352:	46c5      	mov	sp, r8
   dd354:	e7e1      	b.n	dd31a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000dd356 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   dd356:	b510      	push	{r4, lr}
  if (0 == max) {
   dd358:	4604      	mov	r4, r0
   dd35a:	b128      	cbz	r0, dd368 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   dd35c:	f001 fbe2 	bl	deb24 <rand>
   dd360:	fb90 f3f4 	sdiv	r3, r0, r4
   dd364:	fb03 0414 	mls	r4, r3, r4, r0
}
   dd368:	4620      	mov	r0, r4
   dd36a:	bd10      	pop	{r4, pc}

000dd36c <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   dd36c:	4288      	cmp	r0, r1
{
   dd36e:	b510      	push	{r4, lr}
   dd370:	4604      	mov	r4, r0
  if (min >= max) {
   dd372:	da03      	bge.n	dd37c <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   dd374:	1a08      	subs	r0, r1, r0
   dd376:	f7ff ffee 	bl	dd356 <_Z6randomi>
   dd37a:	4404      	add	r4, r0
}
   dd37c:	4620      	mov	r0, r4
   dd37e:	bd10      	pop	{r4, pc}

000dd380 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   dd380:	f001 bbac 	b.w	deadc <srand>

000dd384 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   dd384:	4b01      	ldr	r3, [pc, #4]	; (dd38c <_GLOBAL__sub_I_RGB+0x8>)
   dd386:	2200      	movs	r2, #0
   dd388:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   dd38a:	4770      	bx	lr
   dd38c:	2003e5a4 	.word	0x2003e5a4

000dd390 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   dd390:	2100      	movs	r1, #0
   dd392:	f7fd bb27 	b.w	da9e4 <hal_spi_acquire>

000dd396 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   dd396:	2100      	movs	r1, #0
   dd398:	f7fd bb2c 	b.w	da9f4 <hal_spi_release>

000dd39c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   dd39c:	b510      	push	{r4, lr}
   dd39e:	4604      	mov	r4, r0
   dd3a0:	4608      	mov	r0, r1
{
    _spi = spi;
   dd3a2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   dd3a4:	f7fd fafe 	bl	da9a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dd3a8:	2300      	movs	r3, #0
   dd3aa:	6063      	str	r3, [r4, #4]
}
   dd3ac:	4620      	mov	r0, r4
   dd3ae:	bd10      	pop	{r4, pc}

000dd3b0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   dd3b0:	b510      	push	{r4, lr}
   dd3b2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   dd3b4:	7800      	ldrb	r0, [r0, #0]
   dd3b6:	f7ff ffeb 	bl	dd390 <_ZN8SPIClass4lockEv.isra.0>
   dd3ba:	b948      	cbnz	r0, dd3d0 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   dd3bc:	7820      	ldrb	r0, [r4, #0]
   dd3be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   dd3c2:	f7fd fad7 	bl	da974 <hal_spi_begin>
        unlock();
   dd3c6:	7820      	ldrb	r0, [r4, #0]
    }
}
   dd3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dd3cc:	f7ff bfe3 	b.w	dd396 <_ZN8SPIClass6unlockEv.isra.0>
}
   dd3d0:	bd10      	pop	{r4, pc}

000dd3d2 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   dd3d2:	b510      	push	{r4, lr}
   dd3d4:	4604      	mov	r4, r0
    if (!lock())
   dd3d6:	7800      	ldrb	r0, [r0, #0]
   dd3d8:	f7ff ffda 	bl	dd390 <_ZN8SPIClass4lockEv.isra.0>
   dd3dc:	b938      	cbnz	r0, dd3ee <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   dd3de:	7820      	ldrb	r0, [r4, #0]
   dd3e0:	f7fd fad0 	bl	da984 <hal_spi_end>
        unlock();
   dd3e4:	7820      	ldrb	r0, [r4, #0]
    }
}
   dd3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dd3ea:	f7ff bfd4 	b.w	dd396 <_ZN8SPIClass6unlockEv.isra.0>
}
   dd3ee:	bd10      	pop	{r4, pc}

000dd3f0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   dd3f0:	7800      	ldrb	r0, [r0, #0]
   dd3f2:	f7ff bfd0 	b.w	dd396 <_ZN8SPIClass6unlockEv.isra.0>
	...

000dd3f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   dd3f8:	0840      	lsrs	r0, r0, #1
{
   dd3fa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   dd3fc:	6018      	str	r0, [r3, #0]
   dd3fe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   dd400:	6818      	ldr	r0, [r3, #0]
   dd402:	4288      	cmp	r0, r1
   dd404:	b2e5      	uxtb	r5, r4
   dd406:	d906      	bls.n	dd416 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   dd408:	3401      	adds	r4, #1
   dd40a:	2c08      	cmp	r4, #8
   dd40c:	d002      	beq.n	dd414 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   dd40e:	0840      	lsrs	r0, r0, #1
   dd410:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   dd412:	e7f5      	b.n	dd400 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   dd414:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   dd416:	4b02      	ldr	r3, [pc, #8]	; (dd420 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   dd418:	5d5b      	ldrb	r3, [r3, r5]
   dd41a:	7013      	strb	r3, [r2, #0]
}
   dd41c:	bd30      	pop	{r4, r5, pc}
   dd41e:	bf00      	nop
   dd420:	000e049c 	.word	0x000e049c

000dd424 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   dd424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd428:	4606      	mov	r6, r0
   dd42a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   dd42c:	7800      	ldrb	r0, [r0, #0]
{
   dd42e:	460c      	mov	r4, r1
    CHECK(lock());
   dd430:	f7ff ffae 	bl	dd390 <_ZN8SPIClass4lockEv.isra.0>
   dd434:	2800      	cmp	r0, #0
   dd436:	db1b      	blt.n	dd470 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   dd438:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   dd43a:	2214      	movs	r2, #20
   dd43c:	2100      	movs	r1, #0
   dd43e:	a809      	add	r0, sp, #36	; 0x24
   dd440:	f001 fb44 	bl	deacc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   dd444:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   dd446:	2200      	movs	r2, #0
   dd448:	a909      	add	r1, sp, #36	; 0x24
   dd44a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   dd44c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   dd450:	f7fd fab8 	bl	da9c4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   dd454:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   dd458:	b113      	cbz	r3, dd460 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   dd45a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   dd45e:	b155      	cbz	r5, dd476 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   dd460:	2700      	movs	r7, #0
   dd462:	46b9      	mov	r9, r7
   dd464:	46b8      	mov	r8, r7
   dd466:	2501      	movs	r5, #1
    if (default_ && other.default_)
   dd468:	7923      	ldrb	r3, [r4, #4]
   dd46a:	b15d      	cbz	r5, dd484 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   dd46c:	b1c3      	cbz	r3, dd4a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   dd46e:	2000      	movs	r0, #0
}
   dd470:	b00f      	add	sp, #60	; 0x3c
   dd472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   dd476:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dd47a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   dd47e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   dd482:	e7f1      	b.n	dd468 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   dd484:	2b00      	cmp	r3, #0
   dd486:	d135      	bne.n	dd4f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   dd488:	68a3      	ldr	r3, [r4, #8]
   dd48a:	4543      	cmp	r3, r8
   dd48c:	d108      	bne.n	dd4a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   dd48e:	f88d 9020 	strb.w	r9, [sp, #32]
   dd492:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   dd496:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dd49a:	89a3      	ldrh	r3, [r4, #12]
   dd49c:	429a      	cmp	r2, r3
   dd49e:	d0e6      	beq.n	dd46e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   dd4a0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   dd4a2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   dd4a4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   dd4a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   dd4aa:	ab04      	add	r3, sp, #16
   dd4ac:	f10d 020f 	add.w	r2, sp, #15
   dd4b0:	f7ff ffa2 	bl	dd3f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   dd4b4:	7921      	ldrb	r1, [r4, #4]
   dd4b6:	b985      	cbnz	r5, dd4da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   dd4b8:	b989      	cbnz	r1, dd4de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   dd4ba:	68a3      	ldr	r3, [r4, #8]
   dd4bc:	4543      	cmp	r3, r8
   dd4be:	d30e      	bcc.n	dd4de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   dd4c0:	f88d 9020 	strb.w	r9, [sp, #32]
   dd4c4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   dd4c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dd4cc:	89a3      	ldrh	r3, [r4, #12]
   dd4ce:	429a      	cmp	r2, r3
   dd4d0:	d105      	bne.n	dd4de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   dd4d2:	9b04      	ldr	r3, [sp, #16]
   dd4d4:	4543      	cmp	r3, r8
   dd4d6:	d102      	bne.n	dd4de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   dd4d8:	e7c9      	b.n	dd46e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   dd4da:	2900      	cmp	r1, #0
   dd4dc:	d1f9      	bne.n	dd4d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   dd4de:	2300      	movs	r3, #0
   dd4e0:	9301      	str	r3, [sp, #4]
   dd4e2:	7b63      	ldrb	r3, [r4, #13]
   dd4e4:	9300      	str	r3, [sp, #0]
   dd4e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   dd4ea:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   dd4ec:	7830      	ldrb	r0, [r6, #0]
   dd4ee:	f7fd fa71 	bl	da9d4 <hal_spi_set_settings>
   dd4f2:	e7bc      	b.n	dd46e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   dd4f4:	e9cd 5500 	strd	r5, r5, [sp]
   dd4f8:	462b      	mov	r3, r5
   dd4fa:	462a      	mov	r2, r5
   dd4fc:	2101      	movs	r1, #1
   dd4fe:	e7f5      	b.n	dd4ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000dd500 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   dd500:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   dd502:	7800      	ldrb	r0, [r0, #0]
   dd504:	f7fd fa46 	bl	da994 <hal_spi_transfer>
}
   dd508:	b2c0      	uxtb	r0, r0
   dd50a:	bd08      	pop	{r3, pc}

000dd50c <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   dd50c:	4770      	bx	lr

000dd50e <_ZN8SPIClass15detachInterruptEv>:
   dd50e:	4770      	bx	lr

000dd510 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dd510:	b510      	push	{r4, lr}
   dd512:	4604      	mov	r4, r0
{
	free(buffer);
   dd514:	6800      	ldr	r0, [r0, #0]
   dd516:	f7fd fccf 	bl	daeb8 <free>
}
   dd51a:	4620      	mov	r0, r4
   dd51c:	bd10      	pop	{r4, pc}

000dd51e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dd51e:	b510      	push	{r4, lr}
   dd520:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dd522:	6800      	ldr	r0, [r0, #0]
   dd524:	b108      	cbz	r0, dd52a <_ZN6String10invalidateEv+0xc>
   dd526:	f7fd fcc7 	bl	daeb8 <free>
	buffer = NULL;
   dd52a:	2300      	movs	r3, #0
	capacity = len = 0;
   dd52c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   dd530:	6023      	str	r3, [r4, #0]
}
   dd532:	bd10      	pop	{r4, pc}

000dd534 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dd534:	b538      	push	{r3, r4, r5, lr}
   dd536:	4604      	mov	r4, r0
   dd538:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dd53a:	6800      	ldr	r0, [r0, #0]
   dd53c:	3101      	adds	r1, #1
   dd53e:	f7fd fcc3 	bl	daec8 <realloc>
	if (newbuffer) {
   dd542:	b110      	cbz	r0, dd54a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dd544:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   dd548:	2001      	movs	r0, #1
	}
	return 0;
}
   dd54a:	bd38      	pop	{r3, r4, r5, pc}

000dd54c <_ZN6String7reserveEj>:
{
   dd54c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dd54e:	6803      	ldr	r3, [r0, #0]
{
   dd550:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dd552:	b123      	cbz	r3, dd55e <_ZN6String7reserveEj+0x12>
   dd554:	6843      	ldr	r3, [r0, #4]
   dd556:	428b      	cmp	r3, r1
   dd558:	d301      	bcc.n	dd55e <_ZN6String7reserveEj+0x12>
   dd55a:	2001      	movs	r0, #1
}
   dd55c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   dd55e:	4620      	mov	r0, r4
   dd560:	f7ff ffe8 	bl	dd534 <_ZN6String12changeBufferEj>
   dd564:	2800      	cmp	r0, #0
   dd566:	d0f9      	beq.n	dd55c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   dd568:	68a3      	ldr	r3, [r4, #8]
   dd56a:	2b00      	cmp	r3, #0
   dd56c:	d1f5      	bne.n	dd55a <_ZN6String7reserveEj+0xe>
   dd56e:	6822      	ldr	r2, [r4, #0]
   dd570:	7013      	strb	r3, [r2, #0]
   dd572:	e7f2      	b.n	dd55a <_ZN6String7reserveEj+0xe>

000dd574 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dd574:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd576:	460d      	mov	r5, r1
	if (!reserve(length)) {
   dd578:	4611      	mov	r1, r2
   dd57a:	9201      	str	r2, [sp, #4]
{
   dd57c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   dd57e:	f7ff ffe5 	bl	dd54c <_ZN6String7reserveEj>
   dd582:	9a01      	ldr	r2, [sp, #4]
   dd584:	b928      	cbnz	r0, dd592 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   dd586:	4620      	mov	r0, r4
   dd588:	f7ff ffc9 	bl	dd51e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   dd58c:	4620      	mov	r0, r4
   dd58e:	b003      	add	sp, #12
   dd590:	bd30      	pop	{r4, r5, pc}
	len = length;
   dd592:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   dd594:	4629      	mov	r1, r5
   dd596:	6820      	ldr	r0, [r4, #0]
   dd598:	f001 fa70 	bl	dea7c <memcpy>
	buffer[len] = 0;
   dd59c:	6822      	ldr	r2, [r4, #0]
   dd59e:	68a3      	ldr	r3, [r4, #8]
   dd5a0:	2100      	movs	r1, #0
   dd5a2:	54d1      	strb	r1, [r2, r3]
	return *this;
   dd5a4:	e7f2      	b.n	dd58c <_ZN6String4copyEPKcj+0x18>

000dd5a6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   dd5a6:	2300      	movs	r3, #0
String::String(const char *cstr)
   dd5a8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   dd5aa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   dd5ae:	4604      	mov	r4, r0
	len = 0;
   dd5b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd5b2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   dd5b4:	b141      	cbz	r1, dd5c8 <_ZN6StringC1EPKc+0x22>
   dd5b6:	4608      	mov	r0, r1
   dd5b8:	9101      	str	r1, [sp, #4]
   dd5ba:	f001 fb2e 	bl	dec1a <strlen>
   dd5be:	9901      	ldr	r1, [sp, #4]
   dd5c0:	4602      	mov	r2, r0
   dd5c2:	4620      	mov	r0, r4
   dd5c4:	f7ff ffd6 	bl	dd574 <_ZN6String4copyEPKcj>
}
   dd5c8:	4620      	mov	r0, r4
   dd5ca:	b002      	add	sp, #8
   dd5cc:	bd10      	pop	{r4, pc}

000dd5ce <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dd5ce:	b538      	push	{r3, r4, r5, lr}
   dd5d0:	4605      	mov	r5, r0
	if (buffer) {
   dd5d2:	6800      	ldr	r0, [r0, #0]
{
   dd5d4:	460c      	mov	r4, r1
	if (buffer) {
   dd5d6:	b168      	cbz	r0, dd5f4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   dd5d8:	686a      	ldr	r2, [r5, #4]
   dd5da:	688b      	ldr	r3, [r1, #8]
   dd5dc:	429a      	cmp	r2, r3
   dd5de:	d307      	bcc.n	dd5f0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   dd5e0:	6809      	ldr	r1, [r1, #0]
   dd5e2:	f001 faf4 	bl	debce <strcpy>
			len = rhs.len;
   dd5e6:	68a3      	ldr	r3, [r4, #8]
   dd5e8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dd5ea:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   dd5ec:	60a3      	str	r3, [r4, #8]
}
   dd5ee:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   dd5f0:	f7fd fc62 	bl	daeb8 <free>
	buffer = rhs.buffer;
   dd5f4:	6823      	ldr	r3, [r4, #0]
   dd5f6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dd5f8:	6863      	ldr	r3, [r4, #4]
   dd5fa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dd5fc:	68a3      	ldr	r3, [r4, #8]
   dd5fe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dd600:	2300      	movs	r3, #0
	rhs.capacity = 0;
   dd602:	e9c4 3300 	strd	r3, r3, [r4]
   dd606:	e7f1      	b.n	dd5ec <_ZN6String4moveERS_+0x1e>

000dd608 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   dd608:	b510      	push	{r4, lr}
	buffer = NULL;
   dd60a:	2300      	movs	r3, #0
	capacity = 0;
   dd60c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   dd610:	4604      	mov	r4, r0
	len = 0;
   dd612:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd614:	7303      	strb	r3, [r0, #12]
	move(rval);
   dd616:	f7ff ffda 	bl	dd5ce <_ZN6String4moveERS_>
}
   dd61a:	4620      	mov	r0, r4
   dd61c:	bd10      	pop	{r4, pc}

000dd61e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dd61e:	4288      	cmp	r0, r1
{
   dd620:	b510      	push	{r4, lr}
   dd622:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dd624:	d005      	beq.n	dd632 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dd626:	680b      	ldr	r3, [r1, #0]
   dd628:	b12b      	cbz	r3, dd636 <_ZN6StringaSERKS_+0x18>
   dd62a:	688a      	ldr	r2, [r1, #8]
   dd62c:	4619      	mov	r1, r3
   dd62e:	f7ff ffa1 	bl	dd574 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dd632:	4620      	mov	r0, r4
   dd634:	bd10      	pop	{r4, pc}
	else invalidate();
   dd636:	f7ff ff72 	bl	dd51e <_ZN6String10invalidateEv>
   dd63a:	e7fa      	b.n	dd632 <_ZN6StringaSERKS_+0x14>

000dd63c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   dd63c:	b510      	push	{r4, lr}
	buffer = NULL;
   dd63e:	2300      	movs	r3, #0
String::String(const String &value)
   dd640:	4604      	mov	r4, r0
	capacity = 0;
   dd642:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   dd646:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd648:	7303      	strb	r3, [r0, #12]
	*this = value;
   dd64a:	f7ff ffe8 	bl	dd61e <_ZN6StringaSERKS_>
}
   dd64e:	4620      	mov	r0, r4
   dd650:	bd10      	pop	{r4, pc}

000dd652 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dd652:	4288      	cmp	r0, r1
{
   dd654:	b510      	push	{r4, lr}
   dd656:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dd658:	d001      	beq.n	dd65e <_ZN6StringaSEOS_+0xc>
   dd65a:	f7ff ffb8 	bl	dd5ce <_ZN6String4moveERS_>
	return *this;
}
   dd65e:	4620      	mov	r0, r4
   dd660:	bd10      	pop	{r4, pc}

000dd662 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dd662:	b513      	push	{r0, r1, r4, lr}
   dd664:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   dd666:	b159      	cbz	r1, dd680 <_ZN6StringaSEPKc+0x1e>
   dd668:	4608      	mov	r0, r1
   dd66a:	9101      	str	r1, [sp, #4]
   dd66c:	f001 fad5 	bl	dec1a <strlen>
   dd670:	9901      	ldr	r1, [sp, #4]
   dd672:	4602      	mov	r2, r0
   dd674:	4620      	mov	r0, r4
   dd676:	f7ff ff7d 	bl	dd574 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dd67a:	4620      	mov	r0, r4
   dd67c:	b002      	add	sp, #8
   dd67e:	bd10      	pop	{r4, pc}
	else invalidate();
   dd680:	f7ff ff4d 	bl	dd51e <_ZN6String10invalidateEv>
   dd684:	e7f9      	b.n	dd67a <_ZN6StringaSEPKc+0x18>

000dd686 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dd686:	b570      	push	{r4, r5, r6, lr}
   dd688:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dd68a:	460e      	mov	r6, r1
   dd68c:	b909      	cbnz	r1, dd692 <_ZN6String6concatEPKcj+0xc>
   dd68e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dd690:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dd692:	b16a      	cbz	r2, dd6b0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   dd694:	6884      	ldr	r4, [r0, #8]
   dd696:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   dd698:	4621      	mov	r1, r4
   dd69a:	f7ff ff57 	bl	dd54c <_ZN6String7reserveEj>
   dd69e:	2800      	cmp	r0, #0
   dd6a0:	d0f5      	beq.n	dd68e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dd6a2:	6828      	ldr	r0, [r5, #0]
   dd6a4:	68ab      	ldr	r3, [r5, #8]
   dd6a6:	4631      	mov	r1, r6
   dd6a8:	4418      	add	r0, r3
   dd6aa:	f001 fa90 	bl	debce <strcpy>
	len = newlen;
   dd6ae:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dd6b0:	2001      	movs	r0, #1
   dd6b2:	e7ed      	b.n	dd690 <_ZN6String6concatEPKcj+0xa>

000dd6b4 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dd6b4:	b513      	push	{r0, r1, r4, lr}
   dd6b6:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   dd6b8:	4608      	mov	r0, r1
	if (!cstr) return 0;
   dd6ba:	b151      	cbz	r1, dd6d2 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   dd6bc:	9101      	str	r1, [sp, #4]
   dd6be:	f001 faac 	bl	dec1a <strlen>
   dd6c2:	9901      	ldr	r1, [sp, #4]
   dd6c4:	4602      	mov	r2, r0
   dd6c6:	4620      	mov	r0, r4
}
   dd6c8:	b002      	add	sp, #8
   dd6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   dd6ce:	f7ff bfda 	b.w	dd686 <_ZN6String6concatEPKcj>
}
   dd6d2:	b002      	add	sp, #8
   dd6d4:	bd10      	pop	{r4, pc}

000dd6d6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dd6d6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dd6d8:	688a      	ldr	r2, [r1, #8]
   dd6da:	6809      	ldr	r1, [r1, #0]
{
   dd6dc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dd6de:	f7ff ffd2 	bl	dd686 <_ZN6String6concatEPKcj>
   dd6e2:	b910      	cbnz	r0, dd6ea <_ZplRK15StringSumHelperRK6String+0x14>
   dd6e4:	4620      	mov	r0, r4
   dd6e6:	f7ff ff1a 	bl	dd51e <_ZN6String10invalidateEv>
	return a;
}
   dd6ea:	4620      	mov	r0, r4
   dd6ec:	bd10      	pop	{r4, pc}

000dd6ee <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dd6ee:	b513      	push	{r0, r1, r4, lr}
   dd6f0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dd6f2:	b929      	cbnz	r1, dd700 <_ZplRK15StringSumHelperPKc+0x12>
   dd6f4:	4620      	mov	r0, r4
   dd6f6:	f7ff ff12 	bl	dd51e <_ZN6String10invalidateEv>
	return a;
}
   dd6fa:	4620      	mov	r0, r4
   dd6fc:	b002      	add	sp, #8
   dd6fe:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dd700:	4608      	mov	r0, r1
   dd702:	9101      	str	r1, [sp, #4]
   dd704:	f001 fa89 	bl	dec1a <strlen>
   dd708:	9901      	ldr	r1, [sp, #4]
   dd70a:	4602      	mov	r2, r0
   dd70c:	4620      	mov	r0, r4
   dd70e:	f7ff ffba 	bl	dd686 <_ZN6String6concatEPKcj>
   dd712:	2800      	cmp	r0, #0
   dd714:	d0ee      	beq.n	dd6f4 <_ZplRK15StringSumHelperPKc+0x6>
   dd716:	e7f0      	b.n	dd6fa <_ZplRK15StringSumHelperPKc+0xc>

000dd718 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dd718:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dd71a:	6882      	ldr	r2, [r0, #8]
   dd71c:	b93a      	cbnz	r2, dd72e <_ZNK6String6equalsEPKc+0x16>
   dd71e:	b121      	cbz	r1, dd72a <_ZNK6String6equalsEPKc+0x12>
   dd720:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   dd722:	fab0 f080 	clz	r0, r0
   dd726:	0940      	lsrs	r0, r0, #5
   dd728:	e000      	b.n	dd72c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dd72a:	2001      	movs	r0, #1
}
   dd72c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dd72e:	6800      	ldr	r0, [r0, #0]
   dd730:	b909      	cbnz	r1, dd736 <_ZNK6String6equalsEPKc+0x1e>
   dd732:	7800      	ldrb	r0, [r0, #0]
   dd734:	e7f5      	b.n	dd722 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   dd736:	f001 fa40 	bl	debba <strcmp>
   dd73a:	e7f2      	b.n	dd722 <_ZNK6String6equalsEPKc+0xa>

000dd73c <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   dd73c:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dd73e:	6883      	ldr	r3, [r0, #8]
   dd740:	688a      	ldr	r2, [r1, #8]
   dd742:	4293      	cmp	r3, r2
   dd744:	d30b      	bcc.n	dd75e <_ZNK6String8endsWithERKS_+0x22>
   dd746:	6800      	ldr	r0, [r0, #0]
   dd748:	b140      	cbz	r0, dd75c <_ZNK6String8endsWithERKS_+0x20>
   dd74a:	6809      	ldr	r1, [r1, #0]
   dd74c:	b149      	cbz	r1, dd762 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   dd74e:	1a9b      	subs	r3, r3, r2
   dd750:	4418      	add	r0, r3
   dd752:	f001 fa32 	bl	debba <strcmp>
   dd756:	fab0 f080 	clz	r0, r0
   dd75a:	0940      	lsrs	r0, r0, #5
}
   dd75c:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dd75e:	2000      	movs	r0, #0
   dd760:	e7fc      	b.n	dd75c <_ZNK6String8endsWithERKS_+0x20>
   dd762:	4608      	mov	r0, r1
   dd764:	e7fa      	b.n	dd75c <_ZNK6String8endsWithERKS_+0x20>
	...

000dd768 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dd768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dd76a:	429a      	cmp	r2, r3
{
   dd76c:	460f      	mov	r7, r1
   dd76e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dd770:	490c      	ldr	r1, [pc, #48]	; (dd7a4 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   dd772:	bf88      	it	hi
   dd774:	4613      	movhi	r3, r2
{
   dd776:	4614      	mov	r4, r2
   dd778:	4606      	mov	r6, r0
	if (left > right) {
   dd77a:	bf84      	itt	hi
   dd77c:	462c      	movhi	r4, r5
   dd77e:	461d      	movhi	r5, r3
	String out;
   dd780:	f7ff ff11 	bl	dd5a6 <_ZN6StringC1EPKc>
	if (left > len) return out;
   dd784:	68ba      	ldr	r2, [r7, #8]
   dd786:	42a2      	cmp	r2, r4
   dd788:	d30a      	bcc.n	dd7a0 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dd78a:	6839      	ldr	r1, [r7, #0]
   dd78c:	42aa      	cmp	r2, r5
   dd78e:	bf94      	ite	ls
   dd790:	ebc4 0202 	rsbls	r2, r4, r2
   dd794:	ebc4 0205 	rsbhi	r2, r4, r5
   dd798:	4421      	add	r1, r4
   dd79a:	4630      	mov	r0, r6
   dd79c:	f7ff feea 	bl	dd574 <_ZN6String4copyEPKcj>
	return out;
}
   dd7a0:	4630      	mov	r0, r6
   dd7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd7a4:	000e03d1 	.word	0x000e03d1

000dd7a8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dd7a8:	b40e      	push	{r1, r2, r3}
   dd7aa:	b570      	push	{r4, r5, r6, lr}
   dd7ac:	b087      	sub	sp, #28
   dd7ae:	ad0b      	add	r5, sp, #44	; 0x2c
   dd7b0:	4604      	mov	r4, r0
   dd7b2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd7b6:	9201      	str	r2, [sp, #4]
   dd7b8:	462b      	mov	r3, r5
   dd7ba:	2105      	movs	r1, #5
   dd7bc:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   dd7be:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd7c0:	f7fd fba2 	bl	daf08 <vsnprintf>
    va_end(marker);

    String result;
   dd7c4:	490b      	ldr	r1, [pc, #44]	; (dd7f4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd7c6:	4606      	mov	r6, r0
    String result;
   dd7c8:	4620      	mov	r0, r4
   dd7ca:	f7ff feec 	bl	dd5a6 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   dd7ce:	4631      	mov	r1, r6
   dd7d0:	4620      	mov	r0, r4
   dd7d2:	f7ff febb 	bl	dd54c <_ZN6String7reserveEj>
    if (result.buffer) {
   dd7d6:	6820      	ldr	r0, [r4, #0]
   dd7d8:	b130      	cbz	r0, dd7e8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dd7da:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dd7dc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dd7de:	462b      	mov	r3, r5
   dd7e0:	1c71      	adds	r1, r6, #1
   dd7e2:	f7fd fb91 	bl	daf08 <vsnprintf>
        va_end(marker);
        result.len = n;
   dd7e6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dd7e8:	4620      	mov	r0, r4
   dd7ea:	b007      	add	sp, #28
   dd7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dd7f0:	b003      	add	sp, #12
   dd7f2:	4770      	bx	lr
   dd7f4:	000e03d1 	.word	0x000e03d1

000dd7f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dd7f8:	b510      	push	{r4, lr}
   dd7fa:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dd7fc:	6800      	ldr	r0, [r0, #0]
   dd7fe:	b118      	cbz	r0, dd808 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dd800:	f7fd fb5a 	bl	daeb8 <free>
            wakeupSource_ = nullptr;
   dd804:	2300      	movs	r3, #0
   dd806:	6023      	str	r3, [r4, #0]
        }
    }
   dd808:	bd10      	pop	{r4, pc}

000dd80a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dd80a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dd80c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dd810:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dd812:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dd814:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   dd816:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dd81a:	f8c0 2006 	str.w	r2, [r0, #6]
   dd81e:	889b      	ldrh	r3, [r3, #4]
   dd820:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dd822:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   dd824:	f7ff ffe8 	bl	dd7f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   dd828:	682b      	ldr	r3, [r5, #0]
   dd82a:	b113      	cbz	r3, dd832 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dd82c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dd82e:	2300      	movs	r3, #0
   dd830:	602b      	str	r3, [r5, #0]
    }
   dd832:	4620      	mov	r0, r4
   dd834:	bd38      	pop	{r3, r4, r5, pc}
	...

000dd838 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   dd838:	b538      	push	{r3, r4, r5, lr}
   dd83a:	460c      	mov	r4, r1
   dd83c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   dd83e:	f7ff ffdb 	bl	dd7f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   dd842:	b144      	cbz	r4, dd856 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   dd844:	8820      	ldrh	r0, [r4, #0]
   dd846:	f7fd fb2f 	bl	daea8 <malloc>
   dd84a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   dd84c:	b128      	cbz	r0, dd85a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   dd84e:	8822      	ldrh	r2, [r4, #0]
   dd850:	4621      	mov	r1, r4
   dd852:	f001 f913 	bl	dea7c <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dd856:	2000      	movs	r0, #0
    }
   dd858:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dd85a:	4801      	ldr	r0, [pc, #4]	; (dd860 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dd85c:	e7fc      	b.n	dd858 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dd85e:	bf00      	nop
   dd860:	fffffefc 	.word	0xfffffefc

000dd864 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dd864:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd866:	4d2d      	ldr	r5, [pc, #180]	; (dd91c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dd868:	7d0b      	ldrb	r3, [r1, #20]
   dd86a:	4604      	mov	r4, r0
   dd86c:	b08b      	sub	sp, #44	; 0x2c
   dd86e:	4608      	mov	r0, r1
   dd870:	1daf      	adds	r7, r5, #6
   dd872:	2b00      	cmp	r3, #0
   dd874:	d038      	beq.n	dd8e8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dd876:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dd878:	791b      	ldrb	r3, [r3, #4]
   dd87a:	2b00      	cmp	r3, #0
   dd87c:	d034      	beq.n	dd8e8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dd87e:	2200      	movs	r2, #0
    SleepResult() {}
   dd880:	4b27      	ldr	r3, [pc, #156]	; (dd920 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dd882:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dd884:	a902      	add	r1, sp, #8
   dd886:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dd888:	9202      	str	r2, [sp, #8]
   dd88a:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dd88e:	f88d 200e 	strb.w	r2, [sp, #14]
   dd892:	f7fd fa3f 	bl	dad14 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dd896:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dd89a:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dd89e:	b200      	sxth	r0, r0
   dd8a0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dd8a4:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dd8a8:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dd8aa:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dd8ac:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dd8ae:	4628      	mov	r0, r5
   dd8b0:	f7ff ffc2 	bl	dd838 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dd8b4:	a802      	add	r0, sp, #8
   dd8b6:	f7ff ff9f 	bl	dd7f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dd8ba:	2300      	movs	r3, #0
   dd8bc:	6023      	str	r3, [r4, #0]
   dd8be:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dd8c0:	71a3      	strb	r3, [r4, #6]
   dd8c2:	8123      	strh	r3, [r4, #8]
   dd8c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dd8c8:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dd8ca:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dd8ce:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dd8d0:	683b      	ldr	r3, [r7, #0]
   dd8d2:	f8c4 3006 	str.w	r3, [r4, #6]
   dd8d6:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dd8d8:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dd8da:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dd8dc:	4620      	mov	r0, r4
   dd8de:	f7ff ffab 	bl	dd838 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dd8e2:	4620      	mov	r0, r4
   dd8e4:	b00b      	add	sp, #44	; 0x2c
   dd8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dd8e8:	2600      	movs	r6, #0
   dd8ea:	2320      	movs	r3, #32
   dd8ec:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dd8f0:	4b0c      	ldr	r3, [pc, #48]	; (dd924 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dd8f2:	9300      	str	r3, [sp, #0]
   dd8f4:	490c      	ldr	r1, [pc, #48]	; (dd928 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dd8f6:	4633      	mov	r3, r6
   dd8f8:	aa02      	add	r2, sp, #8
   dd8fa:	2032      	movs	r0, #50	; 0x32
   dd8fc:	f7fd f97a 	bl	dabf4 <log_message>
    SleepResult() {}
   dd900:	4b07      	ldr	r3, [pc, #28]	; (dd920 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dd902:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dd904:	a902      	add	r1, sp, #8
        error_ = error;
   dd906:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dd90a:	4804      	ldr	r0, [pc, #16]	; (dd91c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dd90c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dd90e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dd912:	f8ad 300c 	strh.w	r3, [sp, #12]
   dd916:	f7ff ff78 	bl	dd80a <_ZN17SystemSleepResultaSEOS_>
   dd91a:	e7cb      	b.n	dd8b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dd91c:	2003e5b4 	.word	0x2003e5b4
   dd920:	ffff0000 	.word	0xffff0000
   dd924:	000e04ab 	.word	0x000e04ab
   dd928:	000e04a4 	.word	0x000e04a4

000dd92c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dd92c:	4b05      	ldr	r3, [pc, #20]	; (dd944 <_GLOBAL__sub_I_System+0x18>)
   dd92e:	2202      	movs	r2, #2
   dd930:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dd932:	4b05      	ldr	r3, [pc, #20]	; (dd948 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dd934:	4a05      	ldr	r2, [pc, #20]	; (dd94c <_GLOBAL__sub_I_System+0x20>)
   dd936:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dd938:	2000      	movs	r0, #0
   dd93a:	6018      	str	r0, [r3, #0]
   dd93c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dd93e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dd940:	f7fd b98a 	b.w	dac58 <set_system_mode>
   dd944:	2003e5c0 	.word	0x2003e5c0
   dd948:	2003e5b4 	.word	0x2003e5b4
   dd94c:	ffff0000 	.word	0xffff0000

000dd950 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dd950:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd952:	2000      	movs	r0, #0
   dd954:	f7fd fa20 	bl	dad98 <spark_sync_time_pending>
   dd958:	b128      	cbz	r0, dd966 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dd95a:	f7fd fa05 	bl	dad68 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd95e:	f080 0001 	eor.w	r0, r0, #1
   dd962:	b2c0      	uxtb	r0, r0
    }
   dd964:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd966:	2001      	movs	r0, #1
   dd968:	e7fc      	b.n	dd964 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000dd96a <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dd96a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dd96c:	4602      	mov	r2, r0
   dd96e:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dd970:	4668      	mov	r0, sp
    struct timeval tv = {
   dd972:	2100      	movs	r1, #0
    };
   dd974:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dd978:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dd97c:	f7fc ff32 	bl	da7e4 <hal_rtc_set_time>
   dd980:	4602      	mov	r2, r0
   dd982:	b910      	cbnz	r0, dd98a <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dd984:	4601      	mov	r1, r0
   dd986:	f7fd f99f 	bl	dacc8 <system_notify_time_changed>
    }
}
   dd98a:	b005      	add	sp, #20
   dd98c:	f85d fb04 	ldr.w	pc, [sp], #4

000dd990 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dd990:	b530      	push	{r4, r5, lr}
   dd992:	4604      	mov	r4, r0
    t += time_zone_cache;
   dd994:	4818      	ldr	r0, [pc, #96]	; (dd9f8 <_ZN9TimeClass7timeStrEx+0x68>)
   dd996:	e9d0 1000 	ldrd	r1, r0, [r0]
   dd99a:	1852      	adds	r2, r2, r1
   dd99c:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dd9a0:	4816      	ldr	r0, [pc, #88]	; (dd9fc <_ZN9TimeClass7timeStrEx+0x6c>)
   dd9a2:	e9d0 1000 	ldrd	r1, r0, [r0]
   dd9a6:	1852      	adds	r2, r2, r1
{
   dd9a8:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dd9aa:	eb40 0303 	adc.w	r3, r0, r3
   dd9ae:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dd9b2:	2224      	movs	r2, #36	; 0x24
   dd9b4:	eb0d 0002 	add.w	r0, sp, r2
   dd9b8:	2100      	movs	r1, #0
   dd9ba:	f001 f887 	bl	deacc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dd9be:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dd9c0:	a909      	add	r1, sp, #36	; 0x24
   dd9c2:	4668      	mov	r0, sp
   dd9c4:	f7fd fad0 	bl	daf68 <localtime_r>
    char ascstr[26] = {};
   dd9c8:	2216      	movs	r2, #22
   dd9ca:	4629      	mov	r1, r5
   dd9cc:	a803      	add	r0, sp, #12
   dd9ce:	9502      	str	r5, [sp, #8]
   dd9d0:	f001 f87c 	bl	deacc <memset>
    asctime_r(&calendar_time, ascstr);
   dd9d4:	a902      	add	r1, sp, #8
   dd9d6:	a809      	add	r0, sp, #36	; 0x24
   dd9d8:	f001 f812 	bl	dea00 <asctime_r>
    int len = strlen(ascstr);
   dd9dc:	a802      	add	r0, sp, #8
   dd9de:	f001 f91c 	bl	dec1a <strlen>
    ascstr[len-1] = 0; // remove final newline
   dd9e2:	ab12      	add	r3, sp, #72	; 0x48
   dd9e4:	4418      	add	r0, r3
    return String(ascstr);
   dd9e6:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dd9e8:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dd9ec:	4620      	mov	r0, r4
   dd9ee:	f7ff fdda 	bl	dd5a6 <_ZN6StringC1EPKc>
}
   dd9f2:	4620      	mov	r0, r4
   dd9f4:	b013      	add	sp, #76	; 0x4c
   dd9f6:	bd30      	pop	{r4, r5, pc}
   dd9f8:	2003e5d8 	.word	0x2003e5d8
   dd9fc:	2003e5d0 	.word	0x2003e5d0

000dda00 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dda00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dda04:	b0a5      	sub	sp, #148	; 0x94
   dda06:	4607      	mov	r7, r0
   dda08:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dda0a:	a814      	add	r0, sp, #80	; 0x50
{
   dda0c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dda0e:	223f      	movs	r2, #63	; 0x3f
{
   dda10:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dda12:	f001 f91c 	bl	dec4e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dda16:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dda18:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dda1a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dda1e:	f001 f8fc 	bl	dec1a <strlen>
   dda22:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dda24:	bb5d      	cbnz	r5, dda7e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dda26:	492a      	ldr	r1, [pc, #168]	; (ddad0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dda28:	a803      	add	r0, sp, #12
   dda2a:	f001 f8d0 	bl	debce <strcpy>
   dda2e:	ae14      	add	r6, sp, #80	; 0x50
{
   dda30:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dda32:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dda36:	45ab      	cmp	fp, r5
   dda38:	d936      	bls.n	ddaa8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dda3a:	46b1      	mov	r9, r6
   dda3c:	f105 0a01 	add.w	sl, r5, #1
   dda40:	f819 3b01 	ldrb.w	r3, [r9], #1
   dda44:	2b25      	cmp	r3, #37	; 0x25
   dda46:	d117      	bne.n	dda78 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dda48:	7873      	ldrb	r3, [r6, #1]
   dda4a:	2b7a      	cmp	r3, #122	; 0x7a
   dda4c:	d114      	bne.n	dda78 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dda4e:	a803      	add	r0, sp, #12
   dda50:	f001 f8e3 	bl	dec1a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dda54:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dda56:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dda58:	1828      	adds	r0, r5, r0
   dda5a:	4418      	add	r0, r3
   dda5c:	ebab 0205 	sub.w	r2, fp, r5
   dda60:	1cb1      	adds	r1, r6, #2
   dda62:	f001 f80b 	bl	dea7c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dda66:	4622      	mov	r2, r4
   dda68:	a903      	add	r1, sp, #12
   dda6a:	4630      	mov	r0, r6
   dda6c:	f001 f806 	bl	dea7c <memcpy>
            len = strlen(format_str);
   dda70:	a814      	add	r0, sp, #80	; 0x50
   dda72:	f001 f8d2 	bl	dec1a <strlen>
   dda76:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dda78:	464e      	mov	r6, r9
   dda7a:	4655      	mov	r5, sl
   dda7c:	e7d9      	b.n	dda32 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dda7e:	213c      	movs	r1, #60	; 0x3c
   dda80:	fb95 f3f1 	sdiv	r3, r5, r1
   dda84:	2b00      	cmp	r3, #0
   dda86:	bfb8      	it	lt
   dda88:	425b      	neglt	r3, r3
   dda8a:	fbb3 f2f1 	udiv	r2, r3, r1
   dda8e:	fb01 3312 	mls	r3, r1, r2, r3
   dda92:	9300      	str	r3, [sp, #0]
   dda94:	4a0f      	ldr	r2, [pc, #60]	; (ddad4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dda96:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dda9a:	2110      	movs	r1, #16
   dda9c:	a803      	add	r0, sp, #12
   dda9e:	fb95 f3f3 	sdiv	r3, r5, r3
   ddaa2:	f7fd fa29 	bl	daef8 <snprintf>
   ddaa6:	e7c2      	b.n	dda2e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   ddaa8:	2100      	movs	r1, #0
   ddaaa:	222e      	movs	r2, #46	; 0x2e
   ddaac:	a808      	add	r0, sp, #32
   ddaae:	9107      	str	r1, [sp, #28]
   ddab0:	f001 f80c 	bl	deacc <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   ddab4:	4643      	mov	r3, r8
   ddab6:	aa14      	add	r2, sp, #80	; 0x50
   ddab8:	2132      	movs	r1, #50	; 0x32
   ddaba:	a807      	add	r0, sp, #28
   ddabc:	f7fd fa4c 	bl	daf58 <strftime>
    return String(buf);
   ddac0:	a907      	add	r1, sp, #28
   ddac2:	4638      	mov	r0, r7
   ddac4:	f7ff fd6f 	bl	dd5a6 <_ZN6StringC1EPKc>
}
   ddac8:	4638      	mov	r0, r7
   ddaca:	b025      	add	sp, #148	; 0x94
   ddacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddad0:	000dfb93 	.word	0x000dfb93
   ddad4:	000dfb95 	.word	0x000dfb95

000ddad8 <_ZN9TimeClass6formatExPKc>:
{
   ddad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ddada:	b08d      	sub	sp, #52	; 0x34
   ddadc:	e9cd 2300 	strd	r2, r3, [sp]
   ddae0:	9d12      	ldr	r5, [sp, #72]	; 0x48
   ddae2:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   ddae4:	b915      	cbnz	r5, ddaec <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   ddae6:	4b19      	ldr	r3, [pc, #100]	; (ddb4c <_ZN9TimeClass6formatExPKc+0x74>)
   ddae8:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   ddaea:	b12d      	cbz	r5, ddaf8 <_ZN9TimeClass6formatExPKc+0x20>
   ddaec:	4b18      	ldr	r3, [pc, #96]	; (ddb50 <_ZN9TimeClass6formatExPKc+0x78>)
   ddaee:	4628      	mov	r0, r5
   ddaf0:	6819      	ldr	r1, [r3, #0]
   ddaf2:	f001 f862 	bl	debba <strcmp>
   ddaf6:	b938      	cbnz	r0, ddb08 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   ddaf8:	e9dd 2300 	ldrd	r2, r3, [sp]
   ddafc:	4620      	mov	r0, r4
   ddafe:	f7ff ff47 	bl	dd990 <_ZN9TimeClass7timeStrEx>
}
   ddb02:	4620      	mov	r0, r4
   ddb04:	b00d      	add	sp, #52	; 0x34
   ddb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   ddb08:	4e12      	ldr	r6, [pc, #72]	; (ddb54 <_ZN9TimeClass6formatExPKc+0x7c>)
   ddb0a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   ddb0c:	4f12      	ldr	r7, [pc, #72]	; (ddb58 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   ddb0e:	e9d6 3200 	ldrd	r3, r2, [r6]
   ddb12:	185b      	adds	r3, r3, r1
   ddb14:	9901      	ldr	r1, [sp, #4]
   ddb16:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   ddb1a:	e9d7 0100 	ldrd	r0, r1, [r7]
   ddb1e:	181b      	adds	r3, r3, r0
   ddb20:	eb41 0202 	adc.w	r2, r1, r2
   ddb24:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   ddb28:	2100      	movs	r1, #0
   ddb2a:	2224      	movs	r2, #36	; 0x24
   ddb2c:	a803      	add	r0, sp, #12
   ddb2e:	f000 ffcd 	bl	deacc <memset>
    localtime_r(&t, &calendar_time);
   ddb32:	a903      	add	r1, sp, #12
   ddb34:	4668      	mov	r0, sp
   ddb36:	f7fd fa17 	bl	daf68 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   ddb3a:	6832      	ldr	r2, [r6, #0]
   ddb3c:	683b      	ldr	r3, [r7, #0]
   ddb3e:	a903      	add	r1, sp, #12
   ddb40:	4413      	add	r3, r2
   ddb42:	4620      	mov	r0, r4
   ddb44:	462a      	mov	r2, r5
   ddb46:	f7ff ff5b 	bl	dda00 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   ddb4a:	e7da      	b.n	ddb02 <_ZN9TimeClass6formatExPKc+0x2a>
   ddb4c:	2003e5c8 	.word	0x2003e5c8
   ddb50:	2003dc44 	.word	0x2003dc44
   ddb54:	2003e5d8 	.word	0x2003e5d8
   ddb58:	2003e5d0 	.word	0x2003e5d0

000ddb5c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   ddb5c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   ddb5e:	2000      	movs	r0, #0
   ddb60:	f7fc fe28 	bl	da7b4 <hal_rtc_time_is_valid>
    if (rtcstate)
   ddb64:	4604      	mov	r4, r0
   ddb66:	b9a0      	cbnz	r0, ddb92 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   ddb68:	f7fd f86e 	bl	dac48 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   ddb6c:	2801      	cmp	r0, #1
   ddb6e:	d110      	bne.n	ddb92 <_ZN9TimeClass7isValidEv+0x36>
   ddb70:	4620      	mov	r0, r4
   ddb72:	f7fd f8a1 	bl	dacb8 <system_thread_get_state>
   ddb76:	b960      	cbnz	r0, ddb92 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   ddb78:	f7ff feea 	bl	dd950 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   ddb7c:	b910      	cbnz	r0, ddb84 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   ddb7e:	f7fd f8e3 	bl	dad48 <spark_process>
        while (_while() && !_condition()) {
   ddb82:	e7f9      	b.n	ddb78 <_ZN9TimeClass7isValidEv+0x1c>
   ddb84:	f7ff fee4 	bl	dd950 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   ddb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   ddb8c:	2000      	movs	r0, #0
   ddb8e:	f7fc be11 	b.w	da7b4 <hal_rtc_time_is_valid>
}
   ddb92:	4620      	mov	r0, r4
   ddb94:	bd10      	pop	{r4, pc}

000ddb96 <_ZN9TimeClass3nowEv>:
{
   ddb96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   ddb98:	f7ff ffe0 	bl	ddb5c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   ddb9c:	2210      	movs	r2, #16
   ddb9e:	2100      	movs	r1, #0
   ddba0:	4668      	mov	r0, sp
   ddba2:	f000 ff93 	bl	deacc <memset>
    hal_rtc_get_time(&tv, nullptr);
   ddba6:	2100      	movs	r1, #0
   ddba8:	4668      	mov	r0, sp
   ddbaa:	f7fc fe13 	bl	da7d4 <hal_rtc_get_time>
}
   ddbae:	9800      	ldr	r0, [sp, #0]
   ddbb0:	b005      	add	sp, #20
   ddbb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ddbb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ddbb8:	4b02      	ldr	r3, [pc, #8]	; (ddbc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ddbba:	681a      	ldr	r2, [r3, #0]
   ddbbc:	4b02      	ldr	r3, [pc, #8]	; (ddbc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ddbbe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ddbc0:	4770      	bx	lr
   ddbc2:	bf00      	nop
   ddbc4:	2003dc44 	.word	0x2003dc44
   ddbc8:	2003e5c8 	.word	0x2003e5c8

000ddbcc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   ddbcc:	4770      	bx	lr

000ddbce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ddbce:	7441      	strb	r1, [r0, #17]
}
   ddbd0:	4770      	bx	lr

000ddbd2 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   ddbd2:	4770      	bx	lr

000ddbd4 <_ZN11USARTSerial17availableForWriteEv>:
{
   ddbd4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ddbd6:	7c00      	ldrb	r0, [r0, #16]
   ddbd8:	f7fc ffb4 	bl	dab44 <hal_usart_available_data_for_write>
}
   ddbdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ddbe0:	bd08      	pop	{r3, pc}

000ddbe2 <_ZN11USARTSerial9availableEv>:
{
   ddbe2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ddbe4:	7c00      	ldrb	r0, [r0, #16]
   ddbe6:	f7fc ff85 	bl	daaf4 <hal_usart_available>
}
   ddbea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ddbee:	bd08      	pop	{r3, pc}

000ddbf0 <_ZN11USARTSerial4peekEv>:
{
   ddbf0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ddbf2:	7c00      	ldrb	r0, [r0, #16]
   ddbf4:	f7fc ff8e 	bl	dab14 <hal_usart_peek>
}
   ddbf8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ddbfc:	bd08      	pop	{r3, pc}

000ddbfe <_ZN11USARTSerial4readEv>:
{
   ddbfe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ddc00:	7c00      	ldrb	r0, [r0, #16]
   ddc02:	f7fc ff7f 	bl	dab04 <hal_usart_read>
}
   ddc06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ddc0a:	bd08      	pop	{r3, pc}

000ddc0c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   ddc0c:	7c00      	ldrb	r0, [r0, #16]
   ddc0e:	f7fc bf89 	b.w	dab24 <hal_usart_flush>

000ddc12 <_ZN11USARTSerial5writeEh>:
{
   ddc12:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ddc14:	7c45      	ldrb	r5, [r0, #17]
{
   ddc16:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ddc18:	b12d      	cbz	r5, ddc26 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   ddc1a:	7c20      	ldrb	r0, [r4, #16]
}
   ddc1c:	b003      	add	sp, #12
   ddc1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ddc22:	f7fc bf5f 	b.w	daae4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ddc26:	7c00      	ldrb	r0, [r0, #16]
   ddc28:	9101      	str	r1, [sp, #4]
   ddc2a:	f7fc ff8b 	bl	dab44 <hal_usart_available_data_for_write>
   ddc2e:	2800      	cmp	r0, #0
   ddc30:	9901      	ldr	r1, [sp, #4]
   ddc32:	dcf2      	bgt.n	ddc1a <_ZN11USARTSerial5writeEh+0x8>
}
   ddc34:	4628      	mov	r0, r5
   ddc36:	b003      	add	sp, #12
   ddc38:	bd30      	pop	{r4, r5, pc}

000ddc3a <_ZN11USARTSerialD0Ev>:
   ddc3a:	b510      	push	{r4, lr}
   ddc3c:	2114      	movs	r1, #20
   ddc3e:	4604      	mov	r4, r0
   ddc40:	f000 fa90 	bl	de164 <_ZdlPvj>
   ddc44:	4620      	mov	r0, r4
   ddc46:	bd10      	pop	{r4, pc}

000ddc48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   ddc48:	b510      	push	{r4, lr}
   ddc4a:	f04f 0c00 	mov.w	ip, #0
   ddc4e:	4604      	mov	r4, r0
   ddc50:	4608      	mov	r0, r1
   ddc52:	4611      	mov	r1, r2
   ddc54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ddc58:	e9c4 c201 	strd	ip, r2, [r4, #4]
   ddc5c:	4a04      	ldr	r2, [pc, #16]	; (ddc70 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   ddc5e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   ddc60:	2201      	movs	r2, #1
  _serial = serial;
   ddc62:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ddc64:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   ddc66:	461a      	mov	r2, r3
   ddc68:	f7fc ff2c 	bl	daac4 <hal_usart_init>
}
   ddc6c:	4620      	mov	r0, r4
   ddc6e:	bd10      	pop	{r4, pc}
   ddc70:	000e04f8 	.word	0x000e04f8

000ddc74 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   ddc74:	7c00      	ldrb	r0, [r0, #16]
   ddc76:	2300      	movs	r3, #0
   ddc78:	f7fc bf6c 	b.w	dab54 <hal_usart_begin_config>

000ddc7c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   ddc7c:	2200      	movs	r2, #0
   ddc7e:	f7ff bff9 	b.w	ddc74 <_ZN11USARTSerial5beginEmm>

000ddc82 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   ddc82:	7c00      	ldrb	r0, [r0, #16]
   ddc84:	f7fc bf26 	b.w	daad4 <hal_usart_end>

000ddc88 <_Z22__fetch_global_Serial1v>:
{
   ddc88:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   ddc8a:	4c0d      	ldr	r4, [pc, #52]	; (ddcc0 <_Z22__fetch_global_Serial1v+0x38>)
   ddc8c:	7821      	ldrb	r1, [r4, #0]
   ddc8e:	f3bf 8f5b 	dmb	ish
   ddc92:	f011 0101 	ands.w	r1, r1, #1
   ddc96:	d110      	bne.n	ddcba <_Z22__fetch_global_Serial1v+0x32>
   ddc98:	4620      	mov	r0, r4
   ddc9a:	9101      	str	r1, [sp, #4]
   ddc9c:	f7f6 fa0c 	bl	d40b8 <__cxa_guard_acquire>
   ddca0:	9901      	ldr	r1, [sp, #4]
   ddca2:	b150      	cbz	r0, ddcba <_Z22__fetch_global_Serial1v+0x32>
   ddca4:	4b07      	ldr	r3, [pc, #28]	; (ddcc4 <_Z22__fetch_global_Serial1v+0x3c>)
   ddca6:	4a08      	ldr	r2, [pc, #32]	; (ddcc8 <_Z22__fetch_global_Serial1v+0x40>)
   ddca8:	4808      	ldr	r0, [pc, #32]	; (ddccc <_Z22__fetch_global_Serial1v+0x44>)
   ddcaa:	f7ff ffcd 	bl	ddc48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   ddcae:	4620      	mov	r0, r4
   ddcb0:	f7f6 fa07 	bl	d40c2 <__cxa_guard_release>
   ddcb4:	4806      	ldr	r0, [pc, #24]	; (ddcd0 <_Z22__fetch_global_Serial1v+0x48>)
   ddcb6:	f000 fec9 	bl	dea4c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   ddcba:	4804      	ldr	r0, [pc, #16]	; (ddccc <_Z22__fetch_global_Serial1v+0x44>)
   ddcbc:	b002      	add	sp, #8
   ddcbe:	bd10      	pop	{r4, pc}
   ddcc0:	2003e5e0 	.word	0x2003e5e0
   ddcc4:	2003e668 	.word	0x2003e668
   ddcc8:	2003e5e4 	.word	0x2003e5e4
   ddccc:	2003e6ec 	.word	0x2003e6ec
   ddcd0:	000ddbd3 	.word	0x000ddbd3

000ddcd4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ddcd4:	7441      	strb	r1, [r0, #17]
}
   ddcd6:	4770      	bx	lr

000ddcd8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ddcd8:	4770      	bx	lr

000ddcda <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ddcda:	4770      	bx	lr

000ddcdc <_ZN9USBSerial4readEv>:
{
   ddcdc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ddcde:	2100      	movs	r1, #0
   ddce0:	7c00      	ldrb	r0, [r0, #16]
   ddce2:	f7fc ff67 	bl	dabb4 <HAL_USB_USART_Receive_Data>
}
   ddce6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ddcea:	bd08      	pop	{r3, pc}

000ddcec <_ZN9USBSerial4peekEv>:
{
   ddcec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ddcee:	2101      	movs	r1, #1
   ddcf0:	7c00      	ldrb	r0, [r0, #16]
   ddcf2:	f7fc ff5f 	bl	dabb4 <HAL_USB_USART_Receive_Data>
}
   ddcf6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ddcfa:	bd08      	pop	{r3, pc}

000ddcfc <_ZN9USBSerial17availableForWriteEv>:
{
   ddcfc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ddcfe:	7c00      	ldrb	r0, [r0, #16]
   ddd00:	f7fc ff50 	bl	daba4 <HAL_USB_USART_Available_Data_For_Write>
}
   ddd04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ddd08:	bd08      	pop	{r3, pc}

000ddd0a <_ZN9USBSerial9availableEv>:
{
   ddd0a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ddd0c:	7c00      	ldrb	r0, [r0, #16]
   ddd0e:	f7fc ff41 	bl	dab94 <HAL_USB_USART_Available_Data>
}
   ddd12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ddd16:	bd08      	pop	{r3, pc}

000ddd18 <_ZN9USBSerial5writeEh>:
{
   ddd18:	b513      	push	{r0, r1, r4, lr}
   ddd1a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ddd1c:	7c00      	ldrb	r0, [r0, #16]
{
   ddd1e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ddd20:	f7fc ff40 	bl	daba4 <HAL_USB_USART_Available_Data_For_Write>
   ddd24:	2800      	cmp	r0, #0
   ddd26:	9901      	ldr	r1, [sp, #4]
   ddd28:	dc01      	bgt.n	ddd2e <_ZN9USBSerial5writeEh+0x16>
   ddd2a:	7c60      	ldrb	r0, [r4, #17]
   ddd2c:	b120      	cbz	r0, ddd38 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ddd2e:	7c20      	ldrb	r0, [r4, #16]
   ddd30:	f7fc ff48 	bl	dabc4 <HAL_USB_USART_Send_Data>
   ddd34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ddd38:	b002      	add	sp, #8
   ddd3a:	bd10      	pop	{r4, pc}

000ddd3c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ddd3c:	7c00      	ldrb	r0, [r0, #16]
   ddd3e:	f7fc bf49 	b.w	dabd4 <HAL_USB_USART_Flush_Data>

000ddd42 <_ZN9USBSerialD0Ev>:
   ddd42:	b510      	push	{r4, lr}
   ddd44:	2114      	movs	r1, #20
   ddd46:	4604      	mov	r4, r0
   ddd48:	f000 fa0c 	bl	de164 <_ZdlPvj>
   ddd4c:	4620      	mov	r0, r4
   ddd4e:	bd10      	pop	{r4, pc}

000ddd50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ddd50:	b510      	push	{r4, lr}
   ddd52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ddd56:	4604      	mov	r4, r0
   ddd58:	4608      	mov	r0, r1
   ddd5a:	2100      	movs	r1, #0
   ddd5c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ddd60:	4b04      	ldr	r3, [pc, #16]	; (ddd74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ddd62:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ddd64:	2301      	movs	r3, #1
  _serial = serial;
   ddd66:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ddd68:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ddd6a:	4611      	mov	r1, r2
   ddd6c:	f7fc fefa 	bl	dab64 <HAL_USB_USART_Init>
}
   ddd70:	4620      	mov	r0, r4
   ddd72:	bd10      	pop	{r4, pc}
   ddd74:	000e0528 	.word	0x000e0528

000ddd78 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ddd78:	7c00      	ldrb	r0, [r0, #16]
   ddd7a:	2200      	movs	r2, #0
   ddd7c:	f7fc befa 	b.w	dab74 <HAL_USB_USART_Begin>

000ddd80 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   ddd80:	7c00      	ldrb	r0, [r0, #16]
   ddd82:	f7fc beff 	b.w	dab84 <HAL_USB_USART_End>

000ddd86 <_Z19acquireSerialBufferv>:
{
   ddd86:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   ddd88:	2214      	movs	r2, #20
{
   ddd8a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   ddd8c:	2100      	movs	r1, #0
   ddd8e:	f000 fe9d 	bl	deacc <memset>
}
   ddd92:	4620      	mov	r0, r4
   ddd94:	bd10      	pop	{r4, pc}
	...

000ddd98 <_Z16_fetch_usbserialv>:
{
   ddd98:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ddd9a:	4c0f      	ldr	r4, [pc, #60]	; (dddd8 <_Z16_fetch_usbserialv+0x40>)
{
   ddd9c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ddd9e:	a803      	add	r0, sp, #12
   ddda0:	f7ff fff1 	bl	ddd86 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ddda4:	7821      	ldrb	r1, [r4, #0]
   ddda6:	f3bf 8f5b 	dmb	ish
   dddaa:	f011 0101 	ands.w	r1, r1, #1
   dddae:	d10f      	bne.n	dddd0 <_Z16_fetch_usbserialv+0x38>
   dddb0:	4620      	mov	r0, r4
   dddb2:	9101      	str	r1, [sp, #4]
   dddb4:	f7f6 f980 	bl	d40b8 <__cxa_guard_acquire>
   dddb8:	9901      	ldr	r1, [sp, #4]
   dddba:	b148      	cbz	r0, dddd0 <_Z16_fetch_usbserialv+0x38>
   dddbc:	aa03      	add	r2, sp, #12
   dddbe:	4807      	ldr	r0, [pc, #28]	; (ddddc <_Z16_fetch_usbserialv+0x44>)
   dddc0:	f7ff ffc6 	bl	ddd50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dddc4:	4620      	mov	r0, r4
   dddc6:	f7f6 f97c 	bl	d40c2 <__cxa_guard_release>
   dddca:	4805      	ldr	r0, [pc, #20]	; (ddde0 <_Z16_fetch_usbserialv+0x48>)
   dddcc:	f000 fe3e 	bl	dea4c <atexit>
	return _usbserial;
}
   dddd0:	4802      	ldr	r0, [pc, #8]	; (ddddc <_Z16_fetch_usbserialv+0x44>)
   dddd2:	b008      	add	sp, #32
   dddd4:	bd10      	pop	{r4, pc}
   dddd6:	bf00      	nop
   dddd8:	2003e700 	.word	0x2003e700
   ddddc:	2003e704 	.word	0x2003e704
   ddde0:	000ddcd9 	.word	0x000ddcd9

000ddde4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ddde4:	4b01      	ldr	r3, [pc, #4]	; (dddec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ddde6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ddde8:	4770      	bx	lr
   dddea:	bf00      	nop
   dddec:	2003dc4c 	.word	0x2003dc4c

000dddf0 <serialEventRun>:
{
   dddf0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dddf2:	4b0b      	ldr	r3, [pc, #44]	; (dde20 <serialEventRun+0x30>)
   dddf4:	b143      	cbz	r3, dde08 <serialEventRun+0x18>
   dddf6:	f7ff ffcf 	bl	ddd98 <_Z16_fetch_usbserialv>
   dddfa:	6803      	ldr	r3, [r0, #0]
   dddfc:	691b      	ldr	r3, [r3, #16]
   dddfe:	4798      	blx	r3
   dde00:	2800      	cmp	r0, #0
   dde02:	dd01      	ble.n	dde08 <serialEventRun+0x18>
        serialEvent();
   dde04:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   dde08:	4b06      	ldr	r3, [pc, #24]	; (dde24 <serialEventRun+0x34>)
   dde0a:	b143      	cbz	r3, dde1e <serialEventRun+0x2e>
   dde0c:	f7ff ff3c 	bl	ddc88 <_Z22__fetch_global_Serial1v>
   dde10:	6803      	ldr	r3, [r0, #0]
   dde12:	691b      	ldr	r3, [r3, #16]
   dde14:	4798      	blx	r3
   dde16:	2800      	cmp	r0, #0
   dde18:	dd01      	ble.n	dde1e <serialEventRun+0x2e>
        serialEvent1();
   dde1a:	f3af 8000 	nop.w
}
   dde1e:	bd08      	pop	{r3, pc}
	...

000dde28 <_post_loop>:
{
   dde28:	b508      	push	{r3, lr}
	serialEventRun();
   dde2a:	f7ff ffe1 	bl	dddf0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dde2e:	f7fc fcb9 	bl	da7a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dde32:	4b01      	ldr	r3, [pc, #4]	; (dde38 <_post_loop+0x10>)
   dde34:	6018      	str	r0, [r3, #0]
}
   dde36:	bd08      	pop	{r3, pc}
   dde38:	2003e720 	.word	0x2003e720

000dde3c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dde3c:	4805      	ldr	r0, [pc, #20]	; (dde54 <_Z33system_initialize_user_backup_ramv+0x18>)
   dde3e:	4a06      	ldr	r2, [pc, #24]	; (dde58 <_Z33system_initialize_user_backup_ramv+0x1c>)
   dde40:	4906      	ldr	r1, [pc, #24]	; (dde5c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   dde42:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dde44:	1a12      	subs	r2, r2, r0
   dde46:	f000 fe19 	bl	dea7c <memcpy>
    __backup_sram_signature = signature;
   dde4a:	4b05      	ldr	r3, [pc, #20]	; (dde60 <_Z33system_initialize_user_backup_ramv+0x24>)
   dde4c:	4a05      	ldr	r2, [pc, #20]	; (dde64 <_Z33system_initialize_user_backup_ramv+0x28>)
   dde4e:	601a      	str	r2, [r3, #0]
}
   dde50:	bd08      	pop	{r3, pc}
   dde52:	bf00      	nop
   dde54:	2003f400 	.word	0x2003f400
   dde58:	2003f404 	.word	0x2003f404
   dde5c:	000e06f0 	.word	0x000e06f0
   dde60:	2003f400 	.word	0x2003f400
   dde64:	9a271c1e 	.word	0x9a271c1e

000dde68 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dde68:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dde6a:	2300      	movs	r3, #0
   dde6c:	9300      	str	r3, [sp, #0]
   dde6e:	461a      	mov	r2, r3
   dde70:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dde74:	f7fc ff3a 	bl	dacec <system_ctrl_set_result>
}
   dde78:	b003      	add	sp, #12
   dde7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dde80 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   dde80:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dde82:	8843      	ldrh	r3, [r0, #2]
   dde84:	2b0a      	cmp	r3, #10
   dde86:	d008      	beq.n	dde9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dde88:	2b50      	cmp	r3, #80	; 0x50
   dde8a:	d10b      	bne.n	ddea4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   dde8c:	4b09      	ldr	r3, [pc, #36]	; (ddeb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dde8e:	681b      	ldr	r3, [r3, #0]
   dde90:	b14b      	cbz	r3, ddea6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   dde92:	b003      	add	sp, #12
   dde94:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   dde98:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   dde9a:	f7ff ffe5 	bl	dde68 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   dde9e:	b003      	add	sp, #12
   ddea0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ddea4:	2300      	movs	r3, #0
   ddea6:	9300      	str	r3, [sp, #0]
   ddea8:	461a      	mov	r2, r3
   ddeaa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ddeae:	f7fc ff1d 	bl	dacec <system_ctrl_set_result>
}
   ddeb2:	e7f4      	b.n	dde9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ddeb4:	2003e71c 	.word	0x2003e71c

000ddeb8 <module_user_init_hook>:
{
   ddeb8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ddeba:	4812      	ldr	r0, [pc, #72]	; (ddf04 <module_user_init_hook+0x4c>)
   ddebc:	2100      	movs	r1, #0
   ddebe:	f7fd f843 	bl	daf48 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ddec2:	4b11      	ldr	r3, [pc, #68]	; (ddf08 <module_user_init_hook+0x50>)
   ddec4:	681a      	ldr	r2, [r3, #0]
   ddec6:	4b11      	ldr	r3, [pc, #68]	; (ddf0c <module_user_init_hook+0x54>)
   ddec8:	429a      	cmp	r2, r3
   ddeca:	4b11      	ldr	r3, [pc, #68]	; (ddf10 <module_user_init_hook+0x58>)
   ddecc:	bf0c      	ite	eq
   ddece:	2201      	moveq	r2, #1
   dded0:	2200      	movne	r2, #0
   dded2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dded4:	d001      	beq.n	ddeda <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   dded6:	f7ff ffb1 	bl	dde3c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ddeda:	f7fc fc4b 	bl	da774 <HAL_RNG_GetRandomNumber>
   ddede:	4604      	mov	r4, r0
    srand(seed);
   ddee0:	f000 fdfc 	bl	deadc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ddee4:	4b0b      	ldr	r3, [pc, #44]	; (ddf14 <module_user_init_hook+0x5c>)
   ddee6:	b113      	cbz	r3, ddeee <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ddee8:	4620      	mov	r0, r4
   ddeea:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ddeee:	2100      	movs	r1, #0
   ddef0:	4808      	ldr	r0, [pc, #32]	; (ddf14 <module_user_init_hook+0x5c>)
   ddef2:	f7fc ff69 	bl	dadc8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ddef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ddefa:	4807      	ldr	r0, [pc, #28]	; (ddf18 <module_user_init_hook+0x60>)
   ddefc:	2100      	movs	r1, #0
   ddefe:	f7fc beeb 	b.w	dacd8 <system_ctrl_set_app_request_handler>
   ddf02:	bf00      	nop
   ddf04:	000ddde5 	.word	0x000ddde5
   ddf08:	2003f400 	.word	0x2003f400
   ddf0c:	9a271c1e 	.word	0x9a271c1e
   ddf10:	2003e718 	.word	0x2003e718
   ddf14:	00000000 	.word	0x00000000
   ddf18:	000dde81 	.word	0x000dde81

000ddf1c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   ddf1c:	b508      	push	{r3, lr}
   ddf1e:	4b02      	ldr	r3, [pc, #8]	; (ddf28 <spark_protocol_instance+0xc>)
   ddf20:	681b      	ldr	r3, [r3, #0]
   ddf22:	681b      	ldr	r3, [r3, #0]
   ddf24:	9301      	str	r3, [sp, #4]
   ddf26:	bd08      	pop	{r3, pc}
   ddf28:	0003025c 	.word	0x0003025c

000ddf2c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   ddf2c:	b508      	push	{r3, lr}
   ddf2e:	4b02      	ldr	r3, [pc, #8]	; (ddf38 <spark_protocol_set_product_id+0xc>)
   ddf30:	681b      	ldr	r3, [r3, #0]
   ddf32:	685b      	ldr	r3, [r3, #4]
   ddf34:	9301      	str	r3, [sp, #4]
   ddf36:	bd08      	pop	{r3, pc}
   ddf38:	0003025c 	.word	0x0003025c

000ddf3c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   ddf3c:	b508      	push	{r3, lr}
   ddf3e:	4b02      	ldr	r3, [pc, #8]	; (ddf48 <spark_protocol_set_product_firmware_version+0xc>)
   ddf40:	681b      	ldr	r3, [r3, #0]
   ddf42:	689b      	ldr	r3, [r3, #8]
   ddf44:	9301      	str	r3, [sp, #4]
   ddf46:	bd08      	pop	{r3, pc}
   ddf48:	0003025c 	.word	0x0003025c

000ddf4c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ddf4c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ddf4e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ddf50:	d902      	bls.n	ddf58 <pinAvailable+0xc>
    return false;
   ddf52:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ddf54:	b002      	add	sp, #8
   ddf56:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ddf58:	f1a0 030b 	sub.w	r3, r0, #11
   ddf5c:	2b02      	cmp	r3, #2
   ddf5e:	d81a      	bhi.n	ddf96 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ddf60:	4c17      	ldr	r4, [pc, #92]	; (ddfc0 <pinAvailable+0x74>)
   ddf62:	7821      	ldrb	r1, [r4, #0]
   ddf64:	f3bf 8f5b 	dmb	ish
   ddf68:	f011 0101 	ands.w	r1, r1, #1
   ddf6c:	d10b      	bne.n	ddf86 <pinAvailable+0x3a>
   ddf6e:	4620      	mov	r0, r4
   ddf70:	9101      	str	r1, [sp, #4]
   ddf72:	f7f6 f8a1 	bl	d40b8 <__cxa_guard_acquire>
   ddf76:	9901      	ldr	r1, [sp, #4]
   ddf78:	b128      	cbz	r0, ddf86 <pinAvailable+0x3a>
   ddf7a:	4812      	ldr	r0, [pc, #72]	; (ddfc4 <pinAvailable+0x78>)
   ddf7c:	f7ff fa0e 	bl	dd39c <_ZN8SPIClassC1E19hal_spi_interface_t>
   ddf80:	4620      	mov	r0, r4
   ddf82:	f7f6 f89e 	bl	d40c2 <__cxa_guard_release>
   ddf86:	4b0f      	ldr	r3, [pc, #60]	; (ddfc4 <pinAvailable+0x78>)
   ddf88:	7818      	ldrb	r0, [r3, #0]
   ddf8a:	f7fc fd13 	bl	da9b4 <hal_spi_is_enabled>
   ddf8e:	2800      	cmp	r0, #0
   ddf90:	d1df      	bne.n	ddf52 <pinAvailable+0x6>
  return true; // 'pin' is available
   ddf92:	2001      	movs	r0, #1
   ddf94:	e7de      	b.n	ddf54 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ddf96:	2801      	cmp	r0, #1
   ddf98:	d809      	bhi.n	ddfae <pinAvailable+0x62>
   ddf9a:	f000 f89b 	bl	de0d4 <_Z19__fetch_global_Wirev>
   ddf9e:	2100      	movs	r1, #0
   ddfa0:	7c00      	ldrb	r0, [r0, #16]
   ddfa2:	f7fc fca7 	bl	da8f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ddfa6:	f080 0001 	eor.w	r0, r0, #1
   ddfaa:	b2c0      	uxtb	r0, r0
   ddfac:	e7d2      	b.n	ddf54 <pinAvailable+0x8>
   ddfae:	3809      	subs	r0, #9
   ddfb0:	2801      	cmp	r0, #1
   ddfb2:	d8ee      	bhi.n	ddf92 <pinAvailable+0x46>
   ddfb4:	f7ff fe68 	bl	ddc88 <_Z22__fetch_global_Serial1v>
   ddfb8:	7c00      	ldrb	r0, [r0, #16]
   ddfba:	f7fc fdbb 	bl	dab34 <hal_usart_is_enabled>
   ddfbe:	e7f2      	b.n	ddfa6 <pinAvailable+0x5a>
   ddfc0:	2003e268 	.word	0x2003e268
   ddfc4:	2003e26c 	.word	0x2003e26c

000ddfc8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ddfc8:	2823      	cmp	r0, #35	; 0x23
{
   ddfca:	b538      	push	{r3, r4, r5, lr}
   ddfcc:	4604      	mov	r4, r0
   ddfce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ddfd0:	d80a      	bhi.n	ddfe8 <pinMode+0x20>
   ddfd2:	29ff      	cmp	r1, #255	; 0xff
   ddfd4:	d008      	beq.n	ddfe8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ddfd6:	f7ff ffb9 	bl	ddf4c <pinAvailable>
   ddfda:	b128      	cbz	r0, ddfe8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   ddfdc:	4629      	mov	r1, r5
   ddfde:	4620      	mov	r0, r4
}
   ddfe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   ddfe4:	f7fc bc0e 	b.w	da804 <HAL_Pin_Mode>
}
   ddfe8:	bd38      	pop	{r3, r4, r5, pc}

000ddfea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   ddfea:	b538      	push	{r3, r4, r5, lr}
   ddfec:	4604      	mov	r4, r0
   ddfee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   ddff0:	f7fc fc10 	bl	da814 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   ddff4:	28ff      	cmp	r0, #255	; 0xff
   ddff6:	d010      	beq.n	de01a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   ddff8:	2806      	cmp	r0, #6
   ddffa:	d804      	bhi.n	de006 <digitalWrite+0x1c>
   ddffc:	234d      	movs	r3, #77	; 0x4d
   ddffe:	fa23 f000 	lsr.w	r0, r3, r0
   de002:	07c3      	lsls	r3, r0, #31
   de004:	d409      	bmi.n	de01a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   de006:	4620      	mov	r0, r4
   de008:	f7ff ffa0 	bl	ddf4c <pinAvailable>
   de00c:	b128      	cbz	r0, de01a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   de00e:	4629      	mov	r1, r5
   de010:	4620      	mov	r0, r4
}
   de012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   de016:	f7fc bc05 	b.w	da824 <HAL_GPIO_Write>
}
   de01a:	bd38      	pop	{r3, r4, r5, pc}

000de01c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   de01c:	b510      	push	{r4, lr}
   de01e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   de020:	f7fc fbf8 	bl	da814 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   de024:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   de026:	b2db      	uxtb	r3, r3
   de028:	2b01      	cmp	r3, #1
   de02a:	d908      	bls.n	de03e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   de02c:	4620      	mov	r0, r4
   de02e:	f7ff ff8d 	bl	ddf4c <pinAvailable>
   de032:	b120      	cbz	r0, de03e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   de034:	4620      	mov	r0, r4
}
   de036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   de03a:	f7fc bbfb 	b.w	da834 <HAL_GPIO_Read>
}
   de03e:	2000      	movs	r0, #0
   de040:	bd10      	pop	{r4, pc}

000de042 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   de042:	280d      	cmp	r0, #13
{
   de044:	b510      	push	{r4, lr}
   de046:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   de048:	bf9c      	itt	ls
   de04a:	340e      	addls	r4, #14
   de04c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   de04e:	4620      	mov	r0, r4
   de050:	f7ff ff7c 	bl	ddf4c <pinAvailable>
   de054:	b150      	cbz	r0, de06c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   de056:	2103      	movs	r1, #3
   de058:	4620      	mov	r0, r4
   de05a:	f7fc fbcb 	bl	da7f4 <HAL_Validate_Pin_Function>
   de05e:	2803      	cmp	r0, #3
   de060:	d104      	bne.n	de06c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   de062:	4620      	mov	r0, r4
}
   de064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   de068:	f7fc bbfc 	b.w	da864 <hal_adc_read>
}
   de06c:	2000      	movs	r0, #0
   de06e:	bd10      	pop	{r4, pc}

000de070 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   de070:	4770      	bx	lr

000de072 <__tcf_1>:
   de072:	4770      	bx	lr

000de074 <_Z17acquireWireBufferv>:
{
   de074:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   de076:	2300      	movs	r3, #0
   de078:	2520      	movs	r5, #32
   de07a:	8043      	strh	r3, [r0, #2]
   de07c:	2314      	movs	r3, #20
{
   de07e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   de080:	8003      	strh	r3, [r0, #0]
   de082:	6085      	str	r5, [r0, #8]
   de084:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   de086:	4906      	ldr	r1, [pc, #24]	; (de0a0 <_Z17acquireWireBufferv+0x2c>)
   de088:	4628      	mov	r0, r5
   de08a:	f000 f86f 	bl	de16c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   de08e:	4904      	ldr	r1, [pc, #16]	; (de0a0 <_Z17acquireWireBufferv+0x2c>)
	};
   de090:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   de092:	4628      	mov	r0, r5
   de094:	f000 f86a 	bl	de16c <_ZnajRKSt9nothrow_t>
	};
   de098:	60e0      	str	r0, [r4, #12]
}
   de09a:	4620      	mov	r0, r4
   de09c:	bd38      	pop	{r3, r4, r5, pc}
   de09e:	bf00      	nop
   de0a0:	000e0550 	.word	0x000e0550

000de0a4 <_Z18acquireWire1Bufferv>:
   de0a4:	b538      	push	{r3, r4, r5, lr}
   de0a6:	2300      	movs	r3, #0
   de0a8:	2520      	movs	r5, #32
   de0aa:	8043      	strh	r3, [r0, #2]
   de0ac:	2314      	movs	r3, #20
   de0ae:	4604      	mov	r4, r0
   de0b0:	8003      	strh	r3, [r0, #0]
   de0b2:	6085      	str	r5, [r0, #8]
   de0b4:	6105      	str	r5, [r0, #16]
   de0b6:	4906      	ldr	r1, [pc, #24]	; (de0d0 <_Z18acquireWire1Bufferv+0x2c>)
   de0b8:	4628      	mov	r0, r5
   de0ba:	f000 f857 	bl	de16c <_ZnajRKSt9nothrow_t>
   de0be:	4904      	ldr	r1, [pc, #16]	; (de0d0 <_Z18acquireWire1Bufferv+0x2c>)
   de0c0:	6060      	str	r0, [r4, #4]
   de0c2:	4628      	mov	r0, r5
   de0c4:	f000 f852 	bl	de16c <_ZnajRKSt9nothrow_t>
   de0c8:	60e0      	str	r0, [r4, #12]
   de0ca:	4620      	mov	r0, r4
   de0cc:	bd38      	pop	{r3, r4, r5, pc}
   de0ce:	bf00      	nop
   de0d0:	000e0550 	.word	0x000e0550

000de0d4 <_Z19__fetch_global_Wirev>:
{
   de0d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   de0d6:	4d0e      	ldr	r5, [pc, #56]	; (de110 <_Z19__fetch_global_Wirev+0x3c>)
   de0d8:	7829      	ldrb	r1, [r5, #0]
   de0da:	f3bf 8f5b 	dmb	ish
   de0de:	f011 0401 	ands.w	r4, r1, #1
{
   de0e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   de0e4:	d111      	bne.n	de10a <_Z19__fetch_global_Wirev+0x36>
   de0e6:	4628      	mov	r0, r5
   de0e8:	f7f5 ffe6 	bl	d40b8 <__cxa_guard_acquire>
   de0ec:	b168      	cbz	r0, de10a <_Z19__fetch_global_Wirev+0x36>
   de0ee:	a801      	add	r0, sp, #4
   de0f0:	f7ff ffc0 	bl	de074 <_Z17acquireWireBufferv>
   de0f4:	aa01      	add	r2, sp, #4
   de0f6:	4621      	mov	r1, r4
   de0f8:	4806      	ldr	r0, [pc, #24]	; (de114 <_Z19__fetch_global_Wirev+0x40>)
   de0fa:	f7fd fcb5 	bl	dba68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   de0fe:	4628      	mov	r0, r5
   de100:	f7f5 ffdf 	bl	d40c2 <__cxa_guard_release>
   de104:	4804      	ldr	r0, [pc, #16]	; (de118 <_Z19__fetch_global_Wirev+0x44>)
   de106:	f000 fca1 	bl	dea4c <atexit>
	return wire;
}
   de10a:	4802      	ldr	r0, [pc, #8]	; (de114 <_Z19__fetch_global_Wirev+0x40>)
   de10c:	b007      	add	sp, #28
   de10e:	bd30      	pop	{r4, r5, pc}
   de110:	2003e724 	.word	0x2003e724
   de114:	2003e72c 	.word	0x2003e72c
   de118:	000de071 	.word	0x000de071

000de11c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   de11c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   de11e:	4c0e      	ldr	r4, [pc, #56]	; (de158 <_Z20__fetch_global_Wire1v+0x3c>)
   de120:	7823      	ldrb	r3, [r4, #0]
   de122:	f3bf 8f5b 	dmb	ish
   de126:	07db      	lsls	r3, r3, #31
{
   de128:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   de12a:	d411      	bmi.n	de150 <_Z20__fetch_global_Wire1v+0x34>
   de12c:	4620      	mov	r0, r4
   de12e:	f7f5 ffc3 	bl	d40b8 <__cxa_guard_acquire>
   de132:	b168      	cbz	r0, de150 <_Z20__fetch_global_Wire1v+0x34>
   de134:	a801      	add	r0, sp, #4
   de136:	f7ff ffb5 	bl	de0a4 <_Z18acquireWire1Bufferv>
   de13a:	aa01      	add	r2, sp, #4
   de13c:	2101      	movs	r1, #1
   de13e:	4807      	ldr	r0, [pc, #28]	; (de15c <_Z20__fetch_global_Wire1v+0x40>)
   de140:	f7fd fc92 	bl	dba68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   de144:	4620      	mov	r0, r4
   de146:	f7f5 ffbc 	bl	d40c2 <__cxa_guard_release>
   de14a:	4805      	ldr	r0, [pc, #20]	; (de160 <_Z20__fetch_global_Wire1v+0x44>)
   de14c:	f000 fc7e 	bl	dea4c <atexit>
	return wire;
}
   de150:	4802      	ldr	r0, [pc, #8]	; (de15c <_Z20__fetch_global_Wire1v+0x40>)
   de152:	b006      	add	sp, #24
   de154:	bd10      	pop	{r4, pc}
   de156:	bf00      	nop
   de158:	2003e728 	.word	0x2003e728
   de15c:	2003e740 	.word	0x2003e740
   de160:	000de073 	.word	0x000de073

000de164 <_ZdlPvj>:
   de164:	f7f5 bf9b 	b.w	d409e <_ZdlPv>

000de168 <_ZnwjRKSt9nothrow_t>:
   de168:	f7f5 bf95 	b.w	d4096 <_Znwj>

000de16c <_ZnajRKSt9nothrow_t>:
   de16c:	f7f5 bf95 	b.w	d409a <_Znaj>

000de170 <_ZSt17__throw_bad_allocv>:
   de170:	b508      	push	{r3, lr}
   de172:	f7fc fed1 	bl	daf18 <abort>

000de176 <_ZSt20__throw_length_errorPKc>:
   de176:	b508      	push	{r3, lr}
   de178:	f7fc fece 	bl	daf18 <abort>

000de17c <_ZSt25__throw_bad_function_callv>:
   de17c:	b508      	push	{r3, lr}
   de17e:	f7fc fecb 	bl	daf18 <abort>
	...

000de184 <__aeabi_drsub>:
   de184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   de188:	e002      	b.n	de190 <__adddf3>
   de18a:	bf00      	nop

000de18c <__aeabi_dsub>:
   de18c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000de190 <__adddf3>:
   de190:	b530      	push	{r4, r5, lr}
   de192:	ea4f 0441 	mov.w	r4, r1, lsl #1
   de196:	ea4f 0543 	mov.w	r5, r3, lsl #1
   de19a:	ea94 0f05 	teq	r4, r5
   de19e:	bf08      	it	eq
   de1a0:	ea90 0f02 	teqeq	r0, r2
   de1a4:	bf1f      	itttt	ne
   de1a6:	ea54 0c00 	orrsne.w	ip, r4, r0
   de1aa:	ea55 0c02 	orrsne.w	ip, r5, r2
   de1ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   de1b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   de1b6:	f000 80e2 	beq.w	de37e <__adddf3+0x1ee>
   de1ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   de1be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   de1c2:	bfb8      	it	lt
   de1c4:	426d      	neglt	r5, r5
   de1c6:	dd0c      	ble.n	de1e2 <__adddf3+0x52>
   de1c8:	442c      	add	r4, r5
   de1ca:	ea80 0202 	eor.w	r2, r0, r2
   de1ce:	ea81 0303 	eor.w	r3, r1, r3
   de1d2:	ea82 0000 	eor.w	r0, r2, r0
   de1d6:	ea83 0101 	eor.w	r1, r3, r1
   de1da:	ea80 0202 	eor.w	r2, r0, r2
   de1de:	ea81 0303 	eor.w	r3, r1, r3
   de1e2:	2d36      	cmp	r5, #54	; 0x36
   de1e4:	bf88      	it	hi
   de1e6:	bd30      	pophi	{r4, r5, pc}
   de1e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   de1ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   de1f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   de1f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   de1f8:	d002      	beq.n	de200 <__adddf3+0x70>
   de1fa:	4240      	negs	r0, r0
   de1fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de200:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   de204:	ea4f 3303 	mov.w	r3, r3, lsl #12
   de208:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   de20c:	d002      	beq.n	de214 <__adddf3+0x84>
   de20e:	4252      	negs	r2, r2
   de210:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   de214:	ea94 0f05 	teq	r4, r5
   de218:	f000 80a7 	beq.w	de36a <__adddf3+0x1da>
   de21c:	f1a4 0401 	sub.w	r4, r4, #1
   de220:	f1d5 0e20 	rsbs	lr, r5, #32
   de224:	db0d      	blt.n	de242 <__adddf3+0xb2>
   de226:	fa02 fc0e 	lsl.w	ip, r2, lr
   de22a:	fa22 f205 	lsr.w	r2, r2, r5
   de22e:	1880      	adds	r0, r0, r2
   de230:	f141 0100 	adc.w	r1, r1, #0
   de234:	fa03 f20e 	lsl.w	r2, r3, lr
   de238:	1880      	adds	r0, r0, r2
   de23a:	fa43 f305 	asr.w	r3, r3, r5
   de23e:	4159      	adcs	r1, r3
   de240:	e00e      	b.n	de260 <__adddf3+0xd0>
   de242:	f1a5 0520 	sub.w	r5, r5, #32
   de246:	f10e 0e20 	add.w	lr, lr, #32
   de24a:	2a01      	cmp	r2, #1
   de24c:	fa03 fc0e 	lsl.w	ip, r3, lr
   de250:	bf28      	it	cs
   de252:	f04c 0c02 	orrcs.w	ip, ip, #2
   de256:	fa43 f305 	asr.w	r3, r3, r5
   de25a:	18c0      	adds	r0, r0, r3
   de25c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   de260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   de264:	d507      	bpl.n	de276 <__adddf3+0xe6>
   de266:	f04f 0e00 	mov.w	lr, #0
   de26a:	f1dc 0c00 	rsbs	ip, ip, #0
   de26e:	eb7e 0000 	sbcs.w	r0, lr, r0
   de272:	eb6e 0101 	sbc.w	r1, lr, r1
   de276:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   de27a:	d31b      	bcc.n	de2b4 <__adddf3+0x124>
   de27c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   de280:	d30c      	bcc.n	de29c <__adddf3+0x10c>
   de282:	0849      	lsrs	r1, r1, #1
   de284:	ea5f 0030 	movs.w	r0, r0, rrx
   de288:	ea4f 0c3c 	mov.w	ip, ip, rrx
   de28c:	f104 0401 	add.w	r4, r4, #1
   de290:	ea4f 5244 	mov.w	r2, r4, lsl #21
   de294:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   de298:	f080 809a 	bcs.w	de3d0 <__adddf3+0x240>
   de29c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   de2a0:	bf08      	it	eq
   de2a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   de2a6:	f150 0000 	adcs.w	r0, r0, #0
   de2aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   de2ae:	ea41 0105 	orr.w	r1, r1, r5
   de2b2:	bd30      	pop	{r4, r5, pc}
   de2b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   de2b8:	4140      	adcs	r0, r0
   de2ba:	eb41 0101 	adc.w	r1, r1, r1
   de2be:	3c01      	subs	r4, #1
   de2c0:	bf28      	it	cs
   de2c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   de2c6:	d2e9      	bcs.n	de29c <__adddf3+0x10c>
   de2c8:	f091 0f00 	teq	r1, #0
   de2cc:	bf04      	itt	eq
   de2ce:	4601      	moveq	r1, r0
   de2d0:	2000      	moveq	r0, #0
   de2d2:	fab1 f381 	clz	r3, r1
   de2d6:	bf08      	it	eq
   de2d8:	3320      	addeq	r3, #32
   de2da:	f1a3 030b 	sub.w	r3, r3, #11
   de2de:	f1b3 0220 	subs.w	r2, r3, #32
   de2e2:	da0c      	bge.n	de2fe <__adddf3+0x16e>
   de2e4:	320c      	adds	r2, #12
   de2e6:	dd08      	ble.n	de2fa <__adddf3+0x16a>
   de2e8:	f102 0c14 	add.w	ip, r2, #20
   de2ec:	f1c2 020c 	rsb	r2, r2, #12
   de2f0:	fa01 f00c 	lsl.w	r0, r1, ip
   de2f4:	fa21 f102 	lsr.w	r1, r1, r2
   de2f8:	e00c      	b.n	de314 <__adddf3+0x184>
   de2fa:	f102 0214 	add.w	r2, r2, #20
   de2fe:	bfd8      	it	le
   de300:	f1c2 0c20 	rsble	ip, r2, #32
   de304:	fa01 f102 	lsl.w	r1, r1, r2
   de308:	fa20 fc0c 	lsr.w	ip, r0, ip
   de30c:	bfdc      	itt	le
   de30e:	ea41 010c 	orrle.w	r1, r1, ip
   de312:	4090      	lslle	r0, r2
   de314:	1ae4      	subs	r4, r4, r3
   de316:	bfa2      	ittt	ge
   de318:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   de31c:	4329      	orrge	r1, r5
   de31e:	bd30      	popge	{r4, r5, pc}
   de320:	ea6f 0404 	mvn.w	r4, r4
   de324:	3c1f      	subs	r4, #31
   de326:	da1c      	bge.n	de362 <__adddf3+0x1d2>
   de328:	340c      	adds	r4, #12
   de32a:	dc0e      	bgt.n	de34a <__adddf3+0x1ba>
   de32c:	f104 0414 	add.w	r4, r4, #20
   de330:	f1c4 0220 	rsb	r2, r4, #32
   de334:	fa20 f004 	lsr.w	r0, r0, r4
   de338:	fa01 f302 	lsl.w	r3, r1, r2
   de33c:	ea40 0003 	orr.w	r0, r0, r3
   de340:	fa21 f304 	lsr.w	r3, r1, r4
   de344:	ea45 0103 	orr.w	r1, r5, r3
   de348:	bd30      	pop	{r4, r5, pc}
   de34a:	f1c4 040c 	rsb	r4, r4, #12
   de34e:	f1c4 0220 	rsb	r2, r4, #32
   de352:	fa20 f002 	lsr.w	r0, r0, r2
   de356:	fa01 f304 	lsl.w	r3, r1, r4
   de35a:	ea40 0003 	orr.w	r0, r0, r3
   de35e:	4629      	mov	r1, r5
   de360:	bd30      	pop	{r4, r5, pc}
   de362:	fa21 f004 	lsr.w	r0, r1, r4
   de366:	4629      	mov	r1, r5
   de368:	bd30      	pop	{r4, r5, pc}
   de36a:	f094 0f00 	teq	r4, #0
   de36e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   de372:	bf06      	itte	eq
   de374:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   de378:	3401      	addeq	r4, #1
   de37a:	3d01      	subne	r5, #1
   de37c:	e74e      	b.n	de21c <__adddf3+0x8c>
   de37e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   de382:	bf18      	it	ne
   de384:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   de388:	d029      	beq.n	de3de <__adddf3+0x24e>
   de38a:	ea94 0f05 	teq	r4, r5
   de38e:	bf08      	it	eq
   de390:	ea90 0f02 	teqeq	r0, r2
   de394:	d005      	beq.n	de3a2 <__adddf3+0x212>
   de396:	ea54 0c00 	orrs.w	ip, r4, r0
   de39a:	bf04      	itt	eq
   de39c:	4619      	moveq	r1, r3
   de39e:	4610      	moveq	r0, r2
   de3a0:	bd30      	pop	{r4, r5, pc}
   de3a2:	ea91 0f03 	teq	r1, r3
   de3a6:	bf1e      	ittt	ne
   de3a8:	2100      	movne	r1, #0
   de3aa:	2000      	movne	r0, #0
   de3ac:	bd30      	popne	{r4, r5, pc}
   de3ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   de3b2:	d105      	bne.n	de3c0 <__adddf3+0x230>
   de3b4:	0040      	lsls	r0, r0, #1
   de3b6:	4149      	adcs	r1, r1
   de3b8:	bf28      	it	cs
   de3ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   de3be:	bd30      	pop	{r4, r5, pc}
   de3c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   de3c4:	bf3c      	itt	cc
   de3c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   de3ca:	bd30      	popcc	{r4, r5, pc}
   de3cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   de3d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   de3d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   de3d8:	f04f 0000 	mov.w	r0, #0
   de3dc:	bd30      	pop	{r4, r5, pc}
   de3de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   de3e2:	bf1a      	itte	ne
   de3e4:	4619      	movne	r1, r3
   de3e6:	4610      	movne	r0, r2
   de3e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   de3ec:	bf1c      	itt	ne
   de3ee:	460b      	movne	r3, r1
   de3f0:	4602      	movne	r2, r0
   de3f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   de3f6:	bf06      	itte	eq
   de3f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   de3fc:	ea91 0f03 	teqeq	r1, r3
   de400:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   de404:	bd30      	pop	{r4, r5, pc}
   de406:	bf00      	nop

000de408 <__aeabi_ui2d>:
   de408:	f090 0f00 	teq	r0, #0
   de40c:	bf04      	itt	eq
   de40e:	2100      	moveq	r1, #0
   de410:	4770      	bxeq	lr
   de412:	b530      	push	{r4, r5, lr}
   de414:	f44f 6480 	mov.w	r4, #1024	; 0x400
   de418:	f104 0432 	add.w	r4, r4, #50	; 0x32
   de41c:	f04f 0500 	mov.w	r5, #0
   de420:	f04f 0100 	mov.w	r1, #0
   de424:	e750      	b.n	de2c8 <__adddf3+0x138>
   de426:	bf00      	nop

000de428 <__aeabi_i2d>:
   de428:	f090 0f00 	teq	r0, #0
   de42c:	bf04      	itt	eq
   de42e:	2100      	moveq	r1, #0
   de430:	4770      	bxeq	lr
   de432:	b530      	push	{r4, r5, lr}
   de434:	f44f 6480 	mov.w	r4, #1024	; 0x400
   de438:	f104 0432 	add.w	r4, r4, #50	; 0x32
   de43c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   de440:	bf48      	it	mi
   de442:	4240      	negmi	r0, r0
   de444:	f04f 0100 	mov.w	r1, #0
   de448:	e73e      	b.n	de2c8 <__adddf3+0x138>
   de44a:	bf00      	nop

000de44c <__aeabi_f2d>:
   de44c:	0042      	lsls	r2, r0, #1
   de44e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   de452:	ea4f 0131 	mov.w	r1, r1, rrx
   de456:	ea4f 7002 	mov.w	r0, r2, lsl #28
   de45a:	bf1f      	itttt	ne
   de45c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   de460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   de464:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   de468:	4770      	bxne	lr
   de46a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   de46e:	bf08      	it	eq
   de470:	4770      	bxeq	lr
   de472:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   de476:	bf04      	itt	eq
   de478:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   de47c:	4770      	bxeq	lr
   de47e:	b530      	push	{r4, r5, lr}
   de480:	f44f 7460 	mov.w	r4, #896	; 0x380
   de484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   de488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   de48c:	e71c      	b.n	de2c8 <__adddf3+0x138>
   de48e:	bf00      	nop

000de490 <__aeabi_ul2d>:
   de490:	ea50 0201 	orrs.w	r2, r0, r1
   de494:	bf08      	it	eq
   de496:	4770      	bxeq	lr
   de498:	b530      	push	{r4, r5, lr}
   de49a:	f04f 0500 	mov.w	r5, #0
   de49e:	e00a      	b.n	de4b6 <__aeabi_l2d+0x16>

000de4a0 <__aeabi_l2d>:
   de4a0:	ea50 0201 	orrs.w	r2, r0, r1
   de4a4:	bf08      	it	eq
   de4a6:	4770      	bxeq	lr
   de4a8:	b530      	push	{r4, r5, lr}
   de4aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   de4ae:	d502      	bpl.n	de4b6 <__aeabi_l2d+0x16>
   de4b0:	4240      	negs	r0, r0
   de4b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de4b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   de4ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   de4be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   de4c2:	f43f aed8 	beq.w	de276 <__adddf3+0xe6>
   de4c6:	f04f 0203 	mov.w	r2, #3
   de4ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   de4ce:	bf18      	it	ne
   de4d0:	3203      	addne	r2, #3
   de4d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   de4d6:	bf18      	it	ne
   de4d8:	3203      	addne	r2, #3
   de4da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   de4de:	f1c2 0320 	rsb	r3, r2, #32
   de4e2:	fa00 fc03 	lsl.w	ip, r0, r3
   de4e6:	fa20 f002 	lsr.w	r0, r0, r2
   de4ea:	fa01 fe03 	lsl.w	lr, r1, r3
   de4ee:	ea40 000e 	orr.w	r0, r0, lr
   de4f2:	fa21 f102 	lsr.w	r1, r1, r2
   de4f6:	4414      	add	r4, r2
   de4f8:	e6bd      	b.n	de276 <__adddf3+0xe6>
   de4fa:	bf00      	nop

000de4fc <__aeabi_dmul>:
   de4fc:	b570      	push	{r4, r5, r6, lr}
   de4fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   de502:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   de506:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   de50a:	bf1d      	ittte	ne
   de50c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   de510:	ea94 0f0c 	teqne	r4, ip
   de514:	ea95 0f0c 	teqne	r5, ip
   de518:	f000 f8de 	bleq	de6d8 <__aeabi_dmul+0x1dc>
   de51c:	442c      	add	r4, r5
   de51e:	ea81 0603 	eor.w	r6, r1, r3
   de522:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   de526:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   de52a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   de52e:	bf18      	it	ne
   de530:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   de534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   de53c:	d038      	beq.n	de5b0 <__aeabi_dmul+0xb4>
   de53e:	fba0 ce02 	umull	ip, lr, r0, r2
   de542:	f04f 0500 	mov.w	r5, #0
   de546:	fbe1 e502 	umlal	lr, r5, r1, r2
   de54a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   de54e:	fbe0 e503 	umlal	lr, r5, r0, r3
   de552:	f04f 0600 	mov.w	r6, #0
   de556:	fbe1 5603 	umlal	r5, r6, r1, r3
   de55a:	f09c 0f00 	teq	ip, #0
   de55e:	bf18      	it	ne
   de560:	f04e 0e01 	orrne.w	lr, lr, #1
   de564:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   de568:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   de56c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   de570:	d204      	bcs.n	de57c <__aeabi_dmul+0x80>
   de572:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   de576:	416d      	adcs	r5, r5
   de578:	eb46 0606 	adc.w	r6, r6, r6
   de57c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   de580:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   de584:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   de588:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   de58c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   de590:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   de594:	bf88      	it	hi
   de596:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   de59a:	d81e      	bhi.n	de5da <__aeabi_dmul+0xde>
   de59c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   de5a0:	bf08      	it	eq
   de5a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   de5a6:	f150 0000 	adcs.w	r0, r0, #0
   de5aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   de5ae:	bd70      	pop	{r4, r5, r6, pc}
   de5b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   de5b4:	ea46 0101 	orr.w	r1, r6, r1
   de5b8:	ea40 0002 	orr.w	r0, r0, r2
   de5bc:	ea81 0103 	eor.w	r1, r1, r3
   de5c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   de5c4:	bfc2      	ittt	gt
   de5c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   de5ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   de5ce:	bd70      	popgt	{r4, r5, r6, pc}
   de5d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de5d4:	f04f 0e00 	mov.w	lr, #0
   de5d8:	3c01      	subs	r4, #1
   de5da:	f300 80ab 	bgt.w	de734 <__aeabi_dmul+0x238>
   de5de:	f114 0f36 	cmn.w	r4, #54	; 0x36
   de5e2:	bfde      	ittt	le
   de5e4:	2000      	movle	r0, #0
   de5e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   de5ea:	bd70      	pople	{r4, r5, r6, pc}
   de5ec:	f1c4 0400 	rsb	r4, r4, #0
   de5f0:	3c20      	subs	r4, #32
   de5f2:	da35      	bge.n	de660 <__aeabi_dmul+0x164>
   de5f4:	340c      	adds	r4, #12
   de5f6:	dc1b      	bgt.n	de630 <__aeabi_dmul+0x134>
   de5f8:	f104 0414 	add.w	r4, r4, #20
   de5fc:	f1c4 0520 	rsb	r5, r4, #32
   de600:	fa00 f305 	lsl.w	r3, r0, r5
   de604:	fa20 f004 	lsr.w	r0, r0, r4
   de608:	fa01 f205 	lsl.w	r2, r1, r5
   de60c:	ea40 0002 	orr.w	r0, r0, r2
   de610:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   de614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   de618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   de61c:	fa21 f604 	lsr.w	r6, r1, r4
   de620:	eb42 0106 	adc.w	r1, r2, r6
   de624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   de628:	bf08      	it	eq
   de62a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   de62e:	bd70      	pop	{r4, r5, r6, pc}
   de630:	f1c4 040c 	rsb	r4, r4, #12
   de634:	f1c4 0520 	rsb	r5, r4, #32
   de638:	fa00 f304 	lsl.w	r3, r0, r4
   de63c:	fa20 f005 	lsr.w	r0, r0, r5
   de640:	fa01 f204 	lsl.w	r2, r1, r4
   de644:	ea40 0002 	orr.w	r0, r0, r2
   de648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de64c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   de650:	f141 0100 	adc.w	r1, r1, #0
   de654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   de658:	bf08      	it	eq
   de65a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   de65e:	bd70      	pop	{r4, r5, r6, pc}
   de660:	f1c4 0520 	rsb	r5, r4, #32
   de664:	fa00 f205 	lsl.w	r2, r0, r5
   de668:	ea4e 0e02 	orr.w	lr, lr, r2
   de66c:	fa20 f304 	lsr.w	r3, r0, r4
   de670:	fa01 f205 	lsl.w	r2, r1, r5
   de674:	ea43 0302 	orr.w	r3, r3, r2
   de678:	fa21 f004 	lsr.w	r0, r1, r4
   de67c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de680:	fa21 f204 	lsr.w	r2, r1, r4
   de684:	ea20 0002 	bic.w	r0, r0, r2
   de688:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   de68c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   de690:	bf08      	it	eq
   de692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   de696:	bd70      	pop	{r4, r5, r6, pc}
   de698:	f094 0f00 	teq	r4, #0
   de69c:	d10f      	bne.n	de6be <__aeabi_dmul+0x1c2>
   de69e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   de6a2:	0040      	lsls	r0, r0, #1
   de6a4:	eb41 0101 	adc.w	r1, r1, r1
   de6a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   de6ac:	bf08      	it	eq
   de6ae:	3c01      	subeq	r4, #1
   de6b0:	d0f7      	beq.n	de6a2 <__aeabi_dmul+0x1a6>
   de6b2:	ea41 0106 	orr.w	r1, r1, r6
   de6b6:	f095 0f00 	teq	r5, #0
   de6ba:	bf18      	it	ne
   de6bc:	4770      	bxne	lr
   de6be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   de6c2:	0052      	lsls	r2, r2, #1
   de6c4:	eb43 0303 	adc.w	r3, r3, r3
   de6c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   de6cc:	bf08      	it	eq
   de6ce:	3d01      	subeq	r5, #1
   de6d0:	d0f7      	beq.n	de6c2 <__aeabi_dmul+0x1c6>
   de6d2:	ea43 0306 	orr.w	r3, r3, r6
   de6d6:	4770      	bx	lr
   de6d8:	ea94 0f0c 	teq	r4, ip
   de6dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   de6e0:	bf18      	it	ne
   de6e2:	ea95 0f0c 	teqne	r5, ip
   de6e6:	d00c      	beq.n	de702 <__aeabi_dmul+0x206>
   de6e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   de6ec:	bf18      	it	ne
   de6ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   de6f2:	d1d1      	bne.n	de698 <__aeabi_dmul+0x19c>
   de6f4:	ea81 0103 	eor.w	r1, r1, r3
   de6f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de6fc:	f04f 0000 	mov.w	r0, #0
   de700:	bd70      	pop	{r4, r5, r6, pc}
   de702:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   de706:	bf06      	itte	eq
   de708:	4610      	moveq	r0, r2
   de70a:	4619      	moveq	r1, r3
   de70c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   de710:	d019      	beq.n	de746 <__aeabi_dmul+0x24a>
   de712:	ea94 0f0c 	teq	r4, ip
   de716:	d102      	bne.n	de71e <__aeabi_dmul+0x222>
   de718:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   de71c:	d113      	bne.n	de746 <__aeabi_dmul+0x24a>
   de71e:	ea95 0f0c 	teq	r5, ip
   de722:	d105      	bne.n	de730 <__aeabi_dmul+0x234>
   de724:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   de728:	bf1c      	itt	ne
   de72a:	4610      	movne	r0, r2
   de72c:	4619      	movne	r1, r3
   de72e:	d10a      	bne.n	de746 <__aeabi_dmul+0x24a>
   de730:	ea81 0103 	eor.w	r1, r1, r3
   de734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de738:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   de73c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   de740:	f04f 0000 	mov.w	r0, #0
   de744:	bd70      	pop	{r4, r5, r6, pc}
   de746:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   de74a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   de74e:	bd70      	pop	{r4, r5, r6, pc}

000de750 <__aeabi_ddiv>:
   de750:	b570      	push	{r4, r5, r6, lr}
   de752:	f04f 0cff 	mov.w	ip, #255	; 0xff
   de756:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   de75a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   de75e:	bf1d      	ittte	ne
   de760:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   de764:	ea94 0f0c 	teqne	r4, ip
   de768:	ea95 0f0c 	teqne	r5, ip
   de76c:	f000 f8a7 	bleq	de8be <__aeabi_ddiv+0x16e>
   de770:	eba4 0405 	sub.w	r4, r4, r5
   de774:	ea81 0e03 	eor.w	lr, r1, r3
   de778:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   de77c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   de780:	f000 8088 	beq.w	de894 <__aeabi_ddiv+0x144>
   de784:	ea4f 3303 	mov.w	r3, r3, lsl #12
   de788:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   de78c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   de790:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   de794:	ea4f 2202 	mov.w	r2, r2, lsl #8
   de798:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   de79c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   de7a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   de7a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   de7a8:	429d      	cmp	r5, r3
   de7aa:	bf08      	it	eq
   de7ac:	4296      	cmpeq	r6, r2
   de7ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   de7b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   de7b6:	d202      	bcs.n	de7be <__aeabi_ddiv+0x6e>
   de7b8:	085b      	lsrs	r3, r3, #1
   de7ba:	ea4f 0232 	mov.w	r2, r2, rrx
   de7be:	1ab6      	subs	r6, r6, r2
   de7c0:	eb65 0503 	sbc.w	r5, r5, r3
   de7c4:	085b      	lsrs	r3, r3, #1
   de7c6:	ea4f 0232 	mov.w	r2, r2, rrx
   de7ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   de7ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   de7d2:	ebb6 0e02 	subs.w	lr, r6, r2
   de7d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   de7da:	bf22      	ittt	cs
   de7dc:	1ab6      	subcs	r6, r6, r2
   de7de:	4675      	movcs	r5, lr
   de7e0:	ea40 000c 	orrcs.w	r0, r0, ip
   de7e4:	085b      	lsrs	r3, r3, #1
   de7e6:	ea4f 0232 	mov.w	r2, r2, rrx
   de7ea:	ebb6 0e02 	subs.w	lr, r6, r2
   de7ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   de7f2:	bf22      	ittt	cs
   de7f4:	1ab6      	subcs	r6, r6, r2
   de7f6:	4675      	movcs	r5, lr
   de7f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   de7fc:	085b      	lsrs	r3, r3, #1
   de7fe:	ea4f 0232 	mov.w	r2, r2, rrx
   de802:	ebb6 0e02 	subs.w	lr, r6, r2
   de806:	eb75 0e03 	sbcs.w	lr, r5, r3
   de80a:	bf22      	ittt	cs
   de80c:	1ab6      	subcs	r6, r6, r2
   de80e:	4675      	movcs	r5, lr
   de810:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   de814:	085b      	lsrs	r3, r3, #1
   de816:	ea4f 0232 	mov.w	r2, r2, rrx
   de81a:	ebb6 0e02 	subs.w	lr, r6, r2
   de81e:	eb75 0e03 	sbcs.w	lr, r5, r3
   de822:	bf22      	ittt	cs
   de824:	1ab6      	subcs	r6, r6, r2
   de826:	4675      	movcs	r5, lr
   de828:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   de82c:	ea55 0e06 	orrs.w	lr, r5, r6
   de830:	d018      	beq.n	de864 <__aeabi_ddiv+0x114>
   de832:	ea4f 1505 	mov.w	r5, r5, lsl #4
   de836:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   de83a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   de83e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   de842:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   de846:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   de84a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   de84e:	d1c0      	bne.n	de7d2 <__aeabi_ddiv+0x82>
   de850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   de854:	d10b      	bne.n	de86e <__aeabi_ddiv+0x11e>
   de856:	ea41 0100 	orr.w	r1, r1, r0
   de85a:	f04f 0000 	mov.w	r0, #0
   de85e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   de862:	e7b6      	b.n	de7d2 <__aeabi_ddiv+0x82>
   de864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   de868:	bf04      	itt	eq
   de86a:	4301      	orreq	r1, r0
   de86c:	2000      	moveq	r0, #0
   de86e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   de872:	bf88      	it	hi
   de874:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   de878:	f63f aeaf 	bhi.w	de5da <__aeabi_dmul+0xde>
   de87c:	ebb5 0c03 	subs.w	ip, r5, r3
   de880:	bf04      	itt	eq
   de882:	ebb6 0c02 	subseq.w	ip, r6, r2
   de886:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   de88a:	f150 0000 	adcs.w	r0, r0, #0
   de88e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   de892:	bd70      	pop	{r4, r5, r6, pc}
   de894:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   de898:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   de89c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   de8a0:	bfc2      	ittt	gt
   de8a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   de8a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   de8aa:	bd70      	popgt	{r4, r5, r6, pc}
   de8ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de8b0:	f04f 0e00 	mov.w	lr, #0
   de8b4:	3c01      	subs	r4, #1
   de8b6:	e690      	b.n	de5da <__aeabi_dmul+0xde>
   de8b8:	ea45 0e06 	orr.w	lr, r5, r6
   de8bc:	e68d      	b.n	de5da <__aeabi_dmul+0xde>
   de8be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   de8c2:	ea94 0f0c 	teq	r4, ip
   de8c6:	bf08      	it	eq
   de8c8:	ea95 0f0c 	teqeq	r5, ip
   de8cc:	f43f af3b 	beq.w	de746 <__aeabi_dmul+0x24a>
   de8d0:	ea94 0f0c 	teq	r4, ip
   de8d4:	d10a      	bne.n	de8ec <__aeabi_ddiv+0x19c>
   de8d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   de8da:	f47f af34 	bne.w	de746 <__aeabi_dmul+0x24a>
   de8de:	ea95 0f0c 	teq	r5, ip
   de8e2:	f47f af25 	bne.w	de730 <__aeabi_dmul+0x234>
   de8e6:	4610      	mov	r0, r2
   de8e8:	4619      	mov	r1, r3
   de8ea:	e72c      	b.n	de746 <__aeabi_dmul+0x24a>
   de8ec:	ea95 0f0c 	teq	r5, ip
   de8f0:	d106      	bne.n	de900 <__aeabi_ddiv+0x1b0>
   de8f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   de8f6:	f43f aefd 	beq.w	de6f4 <__aeabi_dmul+0x1f8>
   de8fa:	4610      	mov	r0, r2
   de8fc:	4619      	mov	r1, r3
   de8fe:	e722      	b.n	de746 <__aeabi_dmul+0x24a>
   de900:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   de904:	bf18      	it	ne
   de906:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   de90a:	f47f aec5 	bne.w	de698 <__aeabi_dmul+0x19c>
   de90e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   de912:	f47f af0d 	bne.w	de730 <__aeabi_dmul+0x234>
   de916:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   de91a:	f47f aeeb 	bne.w	de6f4 <__aeabi_dmul+0x1f8>
   de91e:	e712      	b.n	de746 <__aeabi_dmul+0x24a>

000de920 <__aeabi_d2uiz>:
   de920:	004a      	lsls	r2, r1, #1
   de922:	d211      	bcs.n	de948 <__aeabi_d2uiz+0x28>
   de924:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   de928:	d211      	bcs.n	de94e <__aeabi_d2uiz+0x2e>
   de92a:	d50d      	bpl.n	de948 <__aeabi_d2uiz+0x28>
   de92c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   de930:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   de934:	d40e      	bmi.n	de954 <__aeabi_d2uiz+0x34>
   de936:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de93a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   de93e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   de942:	fa23 f002 	lsr.w	r0, r3, r2
   de946:	4770      	bx	lr
   de948:	f04f 0000 	mov.w	r0, #0
   de94c:	4770      	bx	lr
   de94e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   de952:	d102      	bne.n	de95a <__aeabi_d2uiz+0x3a>
   de954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   de958:	4770      	bx	lr
   de95a:	f04f 0000 	mov.w	r0, #0
   de95e:	4770      	bx	lr

000de960 <__aeabi_d2f>:
   de960:	ea4f 0241 	mov.w	r2, r1, lsl #1
   de964:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   de968:	bf24      	itt	cs
   de96a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   de96e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   de972:	d90d      	bls.n	de990 <__aeabi_d2f+0x30>
   de974:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   de978:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   de97c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   de980:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   de984:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   de988:	bf08      	it	eq
   de98a:	f020 0001 	biceq.w	r0, r0, #1
   de98e:	4770      	bx	lr
   de990:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   de994:	d121      	bne.n	de9da <__aeabi_d2f+0x7a>
   de996:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   de99a:	bfbc      	itt	lt
   de99c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   de9a0:	4770      	bxlt	lr
   de9a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de9a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   de9aa:	f1c2 0218 	rsb	r2, r2, #24
   de9ae:	f1c2 0c20 	rsb	ip, r2, #32
   de9b2:	fa10 f30c 	lsls.w	r3, r0, ip
   de9b6:	fa20 f002 	lsr.w	r0, r0, r2
   de9ba:	bf18      	it	ne
   de9bc:	f040 0001 	orrne.w	r0, r0, #1
   de9c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de9c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   de9c8:	fa03 fc0c 	lsl.w	ip, r3, ip
   de9cc:	ea40 000c 	orr.w	r0, r0, ip
   de9d0:	fa23 f302 	lsr.w	r3, r3, r2
   de9d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   de9d8:	e7cc      	b.n	de974 <__aeabi_d2f+0x14>
   de9da:	ea7f 5362 	mvns.w	r3, r2, asr #21
   de9de:	d107      	bne.n	de9f0 <__aeabi_d2f+0x90>
   de9e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   de9e4:	bf1e      	ittt	ne
   de9e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   de9ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   de9ee:	4770      	bxne	lr
   de9f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   de9f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   de9f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   de9fc:	4770      	bx	lr
   de9fe:	bf00      	nop

000dea00 <asctime_r>:
   dea00:	b510      	push	{r4, lr}
   dea02:	460c      	mov	r4, r1
   dea04:	6941      	ldr	r1, [r0, #20]
   dea06:	6903      	ldr	r3, [r0, #16]
   dea08:	6982      	ldr	r2, [r0, #24]
   dea0a:	b086      	sub	sp, #24
   dea0c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dea10:	9104      	str	r1, [sp, #16]
   dea12:	6801      	ldr	r1, [r0, #0]
   dea14:	9103      	str	r1, [sp, #12]
   dea16:	6841      	ldr	r1, [r0, #4]
   dea18:	9102      	str	r1, [sp, #8]
   dea1a:	6881      	ldr	r1, [r0, #8]
   dea1c:	9101      	str	r1, [sp, #4]
   dea1e:	68c1      	ldr	r1, [r0, #12]
   dea20:	9100      	str	r1, [sp, #0]
   dea22:	4907      	ldr	r1, [pc, #28]	; (dea40 <asctime_r+0x40>)
   dea24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dea28:	440b      	add	r3, r1
   dea2a:	4906      	ldr	r1, [pc, #24]	; (dea44 <asctime_r+0x44>)
   dea2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dea30:	440a      	add	r2, r1
   dea32:	4620      	mov	r0, r4
   dea34:	4904      	ldr	r1, [pc, #16]	; (dea48 <asctime_r+0x48>)
   dea36:	f7fc fa4f 	bl	daed8 <siprintf>
   dea3a:	4620      	mov	r0, r4
   dea3c:	b006      	add	sp, #24
   dea3e:	bd10      	pop	{r4, pc}
   dea40:	000e0586 	.word	0x000e0586
   dea44:	000e0571 	.word	0x000e0571
   dea48:	000e0551 	.word	0x000e0551

000dea4c <atexit>:
   dea4c:	2300      	movs	r3, #0
   dea4e:	4601      	mov	r1, r0
   dea50:	461a      	mov	r2, r3
   dea52:	4618      	mov	r0, r3
   dea54:	f000 ba3e 	b.w	deed4 <__register_exitproc>

000dea58 <gmtime>:
   dea58:	b538      	push	{r3, r4, r5, lr}
   dea5a:	4b07      	ldr	r3, [pc, #28]	; (dea78 <gmtime+0x20>)
   dea5c:	681d      	ldr	r5, [r3, #0]
   dea5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dea60:	4604      	mov	r4, r0
   dea62:	b91b      	cbnz	r3, dea6c <gmtime+0x14>
   dea64:	2024      	movs	r0, #36	; 0x24
   dea66:	f7fc fa1f 	bl	daea8 <malloc>
   dea6a:	63e8      	str	r0, [r5, #60]	; 0x3c
   dea6c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dea6e:	4620      	mov	r0, r4
   dea70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dea74:	f7fc ba80 	b.w	daf78 <gmtime_r>
   dea78:	2003dc4c 	.word	0x2003dc4c

000dea7c <memcpy>:
   dea7c:	440a      	add	r2, r1
   dea7e:	4291      	cmp	r1, r2
   dea80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dea84:	d100      	bne.n	dea88 <memcpy+0xc>
   dea86:	4770      	bx	lr
   dea88:	b510      	push	{r4, lr}
   dea8a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dea8e:	f803 4f01 	strb.w	r4, [r3, #1]!
   dea92:	4291      	cmp	r1, r2
   dea94:	d1f9      	bne.n	dea8a <memcpy+0xe>
   dea96:	bd10      	pop	{r4, pc}

000dea98 <memmove>:
   dea98:	4288      	cmp	r0, r1
   dea9a:	b510      	push	{r4, lr}
   dea9c:	eb01 0402 	add.w	r4, r1, r2
   deaa0:	d902      	bls.n	deaa8 <memmove+0x10>
   deaa2:	4284      	cmp	r4, r0
   deaa4:	4623      	mov	r3, r4
   deaa6:	d807      	bhi.n	deab8 <memmove+0x20>
   deaa8:	1e43      	subs	r3, r0, #1
   deaaa:	42a1      	cmp	r1, r4
   deaac:	d008      	beq.n	deac0 <memmove+0x28>
   deaae:	f811 2b01 	ldrb.w	r2, [r1], #1
   deab2:	f803 2f01 	strb.w	r2, [r3, #1]!
   deab6:	e7f8      	b.n	deaaa <memmove+0x12>
   deab8:	4402      	add	r2, r0
   deaba:	4601      	mov	r1, r0
   deabc:	428a      	cmp	r2, r1
   deabe:	d100      	bne.n	deac2 <memmove+0x2a>
   deac0:	bd10      	pop	{r4, pc}
   deac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   deac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   deaca:	e7f7      	b.n	deabc <memmove+0x24>

000deacc <memset>:
   deacc:	4402      	add	r2, r0
   deace:	4603      	mov	r3, r0
   dead0:	4293      	cmp	r3, r2
   dead2:	d100      	bne.n	dead6 <memset+0xa>
   dead4:	4770      	bx	lr
   dead6:	f803 1b01 	strb.w	r1, [r3], #1
   deada:	e7f9      	b.n	dead0 <memset+0x4>

000deadc <srand>:
   deadc:	b538      	push	{r3, r4, r5, lr}
   deade:	4b0d      	ldr	r3, [pc, #52]	; (deb14 <srand+0x38>)
   deae0:	681d      	ldr	r5, [r3, #0]
   deae2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   deae4:	4604      	mov	r4, r0
   deae6:	b97b      	cbnz	r3, deb08 <srand+0x2c>
   deae8:	2018      	movs	r0, #24
   deaea:	f7fc f9dd 	bl	daea8 <malloc>
   deaee:	4a0a      	ldr	r2, [pc, #40]	; (deb18 <srand+0x3c>)
   deaf0:	4b0a      	ldr	r3, [pc, #40]	; (deb1c <srand+0x40>)
   deaf2:	63a8      	str	r0, [r5, #56]	; 0x38
   deaf4:	e9c0 2300 	strd	r2, r3, [r0]
   deaf8:	4b09      	ldr	r3, [pc, #36]	; (deb20 <srand+0x44>)
   deafa:	6083      	str	r3, [r0, #8]
   deafc:	230b      	movs	r3, #11
   deafe:	8183      	strh	r3, [r0, #12]
   deb00:	2201      	movs	r2, #1
   deb02:	2300      	movs	r3, #0
   deb04:	e9c0 2304 	strd	r2, r3, [r0, #16]
   deb08:	6bab      	ldr	r3, [r5, #56]	; 0x38
   deb0a:	2200      	movs	r2, #0
   deb0c:	611c      	str	r4, [r3, #16]
   deb0e:	615a      	str	r2, [r3, #20]
   deb10:	bd38      	pop	{r3, r4, r5, pc}
   deb12:	bf00      	nop
   deb14:	2003dc4c 	.word	0x2003dc4c
   deb18:	abcd330e 	.word	0xabcd330e
   deb1c:	e66d1234 	.word	0xe66d1234
   deb20:	0005deec 	.word	0x0005deec

000deb24 <rand>:
   deb24:	4b13      	ldr	r3, [pc, #76]	; (deb74 <rand+0x50>)
   deb26:	b510      	push	{r4, lr}
   deb28:	681c      	ldr	r4, [r3, #0]
   deb2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   deb2c:	b97b      	cbnz	r3, deb4e <rand+0x2a>
   deb2e:	2018      	movs	r0, #24
   deb30:	f7fc f9ba 	bl	daea8 <malloc>
   deb34:	4a10      	ldr	r2, [pc, #64]	; (deb78 <rand+0x54>)
   deb36:	4b11      	ldr	r3, [pc, #68]	; (deb7c <rand+0x58>)
   deb38:	63a0      	str	r0, [r4, #56]	; 0x38
   deb3a:	e9c0 2300 	strd	r2, r3, [r0]
   deb3e:	4b10      	ldr	r3, [pc, #64]	; (deb80 <rand+0x5c>)
   deb40:	6083      	str	r3, [r0, #8]
   deb42:	230b      	movs	r3, #11
   deb44:	8183      	strh	r3, [r0, #12]
   deb46:	2201      	movs	r2, #1
   deb48:	2300      	movs	r3, #0
   deb4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   deb4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   deb50:	480c      	ldr	r0, [pc, #48]	; (deb84 <rand+0x60>)
   deb52:	690a      	ldr	r2, [r1, #16]
   deb54:	694b      	ldr	r3, [r1, #20]
   deb56:	4c0c      	ldr	r4, [pc, #48]	; (deb88 <rand+0x64>)
   deb58:	4350      	muls	r0, r2
   deb5a:	fb04 0003 	mla	r0, r4, r3, r0
   deb5e:	fba2 3404 	umull	r3, r4, r2, r4
   deb62:	1c5a      	adds	r2, r3, #1
   deb64:	4404      	add	r4, r0
   deb66:	f144 0000 	adc.w	r0, r4, #0
   deb6a:	e9c1 2004 	strd	r2, r0, [r1, #16]
   deb6e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   deb72:	bd10      	pop	{r4, pc}
   deb74:	2003dc4c 	.word	0x2003dc4c
   deb78:	abcd330e 	.word	0xabcd330e
   deb7c:	e66d1234 	.word	0xe66d1234
   deb80:	0005deec 	.word	0x0005deec
   deb84:	5851f42d 	.word	0x5851f42d
   deb88:	4c957f2d 	.word	0x4c957f2d

000deb8c <strchr>:
   deb8c:	b2c9      	uxtb	r1, r1
   deb8e:	4603      	mov	r3, r0
   deb90:	f810 2b01 	ldrb.w	r2, [r0], #1
   deb94:	b11a      	cbz	r2, deb9e <strchr+0x12>
   deb96:	428a      	cmp	r2, r1
   deb98:	d1f9      	bne.n	deb8e <strchr+0x2>
   deb9a:	4618      	mov	r0, r3
   deb9c:	4770      	bx	lr
   deb9e:	2900      	cmp	r1, #0
   deba0:	bf18      	it	ne
   deba2:	2300      	movne	r3, #0
   deba4:	e7f9      	b.n	deb9a <strchr+0xe>

000deba6 <strchrnul>:
   deba6:	b510      	push	{r4, lr}
   deba8:	4604      	mov	r4, r0
   debaa:	f7ff ffef 	bl	deb8c <strchr>
   debae:	b918      	cbnz	r0, debb8 <strchrnul+0x12>
   debb0:	4620      	mov	r0, r4
   debb2:	f000 f832 	bl	dec1a <strlen>
   debb6:	4420      	add	r0, r4
   debb8:	bd10      	pop	{r4, pc}

000debba <strcmp>:
   debba:	f810 2b01 	ldrb.w	r2, [r0], #1
   debbe:	f811 3b01 	ldrb.w	r3, [r1], #1
   debc2:	2a01      	cmp	r2, #1
   debc4:	bf28      	it	cs
   debc6:	429a      	cmpcs	r2, r3
   debc8:	d0f7      	beq.n	debba <strcmp>
   debca:	1ad0      	subs	r0, r2, r3
   debcc:	4770      	bx	lr

000debce <strcpy>:
   debce:	4603      	mov	r3, r0
   debd0:	f811 2b01 	ldrb.w	r2, [r1], #1
   debd4:	f803 2b01 	strb.w	r2, [r3], #1
   debd8:	2a00      	cmp	r2, #0
   debda:	d1f9      	bne.n	debd0 <strcpy+0x2>
   debdc:	4770      	bx	lr
	...

000debe0 <strdup>:
   debe0:	4b02      	ldr	r3, [pc, #8]	; (debec <strdup+0xc>)
   debe2:	4601      	mov	r1, r0
   debe4:	6818      	ldr	r0, [r3, #0]
   debe6:	f000 b803 	b.w	debf0 <_strdup_r>
   debea:	bf00      	nop
   debec:	2003dc4c 	.word	0x2003dc4c

000debf0 <_strdup_r>:
   debf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   debf2:	4604      	mov	r4, r0
   debf4:	4608      	mov	r0, r1
   debf6:	460d      	mov	r5, r1
   debf8:	f000 f80f 	bl	dec1a <strlen>
   debfc:	1c42      	adds	r2, r0, #1
   debfe:	4611      	mov	r1, r2
   dec00:	4620      	mov	r0, r4
   dec02:	9201      	str	r2, [sp, #4]
   dec04:	f7fc f990 	bl	daf28 <_malloc_r>
   dec08:	4604      	mov	r4, r0
   dec0a:	b118      	cbz	r0, dec14 <_strdup_r+0x24>
   dec0c:	9a01      	ldr	r2, [sp, #4]
   dec0e:	4629      	mov	r1, r5
   dec10:	f7ff ff34 	bl	dea7c <memcpy>
   dec14:	4620      	mov	r0, r4
   dec16:	b003      	add	sp, #12
   dec18:	bd30      	pop	{r4, r5, pc}

000dec1a <strlen>:
   dec1a:	4603      	mov	r3, r0
   dec1c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dec20:	2a00      	cmp	r2, #0
   dec22:	d1fb      	bne.n	dec1c <strlen+0x2>
   dec24:	1a18      	subs	r0, r3, r0
   dec26:	3801      	subs	r0, #1
   dec28:	4770      	bx	lr

000dec2a <strncmp>:
   dec2a:	b510      	push	{r4, lr}
   dec2c:	b16a      	cbz	r2, dec4a <strncmp+0x20>
   dec2e:	3901      	subs	r1, #1
   dec30:	1884      	adds	r4, r0, r2
   dec32:	f810 3b01 	ldrb.w	r3, [r0], #1
   dec36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dec3a:	4293      	cmp	r3, r2
   dec3c:	d103      	bne.n	dec46 <strncmp+0x1c>
   dec3e:	42a0      	cmp	r0, r4
   dec40:	d001      	beq.n	dec46 <strncmp+0x1c>
   dec42:	2b00      	cmp	r3, #0
   dec44:	d1f5      	bne.n	dec32 <strncmp+0x8>
   dec46:	1a98      	subs	r0, r3, r2
   dec48:	bd10      	pop	{r4, pc}
   dec4a:	4610      	mov	r0, r2
   dec4c:	e7fc      	b.n	dec48 <strncmp+0x1e>

000dec4e <strncpy>:
   dec4e:	b510      	push	{r4, lr}
   dec50:	3901      	subs	r1, #1
   dec52:	4603      	mov	r3, r0
   dec54:	b132      	cbz	r2, dec64 <strncpy+0x16>
   dec56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dec5a:	f803 4b01 	strb.w	r4, [r3], #1
   dec5e:	3a01      	subs	r2, #1
   dec60:	2c00      	cmp	r4, #0
   dec62:	d1f7      	bne.n	dec54 <strncpy+0x6>
   dec64:	441a      	add	r2, r3
   dec66:	2100      	movs	r1, #0
   dec68:	4293      	cmp	r3, r2
   dec6a:	d100      	bne.n	dec6e <strncpy+0x20>
   dec6c:	bd10      	pop	{r4, pc}
   dec6e:	f803 1b01 	strb.w	r1, [r3], #1
   dec72:	e7f9      	b.n	dec68 <strncpy+0x1a>

000dec74 <strrchr>:
   dec74:	b538      	push	{r3, r4, r5, lr}
   dec76:	4603      	mov	r3, r0
   dec78:	460c      	mov	r4, r1
   dec7a:	b969      	cbnz	r1, dec98 <strrchr+0x24>
   dec7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dec80:	f7ff bf84 	b.w	deb8c <strchr>
   dec84:	1c43      	adds	r3, r0, #1
   dec86:	4605      	mov	r5, r0
   dec88:	4621      	mov	r1, r4
   dec8a:	4618      	mov	r0, r3
   dec8c:	f7ff ff7e 	bl	deb8c <strchr>
   dec90:	2800      	cmp	r0, #0
   dec92:	d1f7      	bne.n	dec84 <strrchr+0x10>
   dec94:	4628      	mov	r0, r5
   dec96:	bd38      	pop	{r3, r4, r5, pc}
   dec98:	2500      	movs	r5, #0
   dec9a:	e7f5      	b.n	dec88 <strrchr+0x14>

000dec9c <__strtok_r>:
   dec9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dec9e:	b908      	cbnz	r0, deca4 <__strtok_r+0x8>
   deca0:	6810      	ldr	r0, [r2, #0]
   deca2:	b188      	cbz	r0, decc8 <__strtok_r+0x2c>
   deca4:	4604      	mov	r4, r0
   deca6:	4620      	mov	r0, r4
   deca8:	f814 5b01 	ldrb.w	r5, [r4], #1
   decac:	460f      	mov	r7, r1
   decae:	f817 6b01 	ldrb.w	r6, [r7], #1
   decb2:	b91e      	cbnz	r6, decbc <__strtok_r+0x20>
   decb4:	b965      	cbnz	r5, decd0 <__strtok_r+0x34>
   decb6:	6015      	str	r5, [r2, #0]
   decb8:	4628      	mov	r0, r5
   decba:	e005      	b.n	decc8 <__strtok_r+0x2c>
   decbc:	42b5      	cmp	r5, r6
   decbe:	d1f6      	bne.n	decae <__strtok_r+0x12>
   decc0:	2b00      	cmp	r3, #0
   decc2:	d1f0      	bne.n	deca6 <__strtok_r+0xa>
   decc4:	6014      	str	r4, [r2, #0]
   decc6:	7003      	strb	r3, [r0, #0]
   decc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   decca:	461c      	mov	r4, r3
   deccc:	e00c      	b.n	dece8 <__strtok_r+0x4c>
   decce:	b915      	cbnz	r5, decd6 <__strtok_r+0x3a>
   decd0:	f814 3b01 	ldrb.w	r3, [r4], #1
   decd4:	460e      	mov	r6, r1
   decd6:	f816 5b01 	ldrb.w	r5, [r6], #1
   decda:	42ab      	cmp	r3, r5
   decdc:	d1f7      	bne.n	decce <__strtok_r+0x32>
   decde:	2b00      	cmp	r3, #0
   dece0:	d0f3      	beq.n	decca <__strtok_r+0x2e>
   dece2:	2300      	movs	r3, #0
   dece4:	f804 3c01 	strb.w	r3, [r4, #-1]
   dece8:	6014      	str	r4, [r2, #0]
   decea:	e7ed      	b.n	decc8 <__strtok_r+0x2c>

000decec <strtok_r>:
   decec:	2301      	movs	r3, #1
   decee:	f7ff bfd5 	b.w	dec9c <__strtok_r>
	...

000decf4 <_strtol_l.isra.0>:
   decf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   decf8:	4e3a      	ldr	r6, [pc, #232]	; (dede4 <_strtol_l.isra.0+0xf0>)
   decfa:	4686      	mov	lr, r0
   decfc:	468c      	mov	ip, r1
   decfe:	4660      	mov	r0, ip
   ded00:	f81c 4b01 	ldrb.w	r4, [ip], #1
   ded04:	5da5      	ldrb	r5, [r4, r6]
   ded06:	f015 0508 	ands.w	r5, r5, #8
   ded0a:	d1f8      	bne.n	decfe <_strtol_l.isra.0+0xa>
   ded0c:	2c2d      	cmp	r4, #45	; 0x2d
   ded0e:	d133      	bne.n	ded78 <_strtol_l.isra.0+0x84>
   ded10:	f89c 4000 	ldrb.w	r4, [ip]
   ded14:	f04f 0801 	mov.w	r8, #1
   ded18:	f100 0c02 	add.w	ip, r0, #2
   ded1c:	2b00      	cmp	r3, #0
   ded1e:	d05c      	beq.n	dedda <_strtol_l.isra.0+0xe6>
   ded20:	2b10      	cmp	r3, #16
   ded22:	d10c      	bne.n	ded3e <_strtol_l.isra.0+0x4a>
   ded24:	2c30      	cmp	r4, #48	; 0x30
   ded26:	d10a      	bne.n	ded3e <_strtol_l.isra.0+0x4a>
   ded28:	f89c 0000 	ldrb.w	r0, [ip]
   ded2c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   ded30:	2858      	cmp	r0, #88	; 0x58
   ded32:	d14d      	bne.n	dedd0 <_strtol_l.isra.0+0xdc>
   ded34:	f89c 4001 	ldrb.w	r4, [ip, #1]
   ded38:	2310      	movs	r3, #16
   ded3a:	f10c 0c02 	add.w	ip, ip, #2
   ded3e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   ded42:	3f01      	subs	r7, #1
   ded44:	2600      	movs	r6, #0
   ded46:	fbb7 f9f3 	udiv	r9, r7, r3
   ded4a:	4630      	mov	r0, r6
   ded4c:	fb03 7a19 	mls	sl, r3, r9, r7
   ded50:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   ded54:	2d09      	cmp	r5, #9
   ded56:	d818      	bhi.n	ded8a <_strtol_l.isra.0+0x96>
   ded58:	462c      	mov	r4, r5
   ded5a:	42a3      	cmp	r3, r4
   ded5c:	dd24      	ble.n	deda8 <_strtol_l.isra.0+0xb4>
   ded5e:	1c75      	adds	r5, r6, #1
   ded60:	d007      	beq.n	ded72 <_strtol_l.isra.0+0x7e>
   ded62:	4581      	cmp	r9, r0
   ded64:	d31d      	bcc.n	deda2 <_strtol_l.isra.0+0xae>
   ded66:	d101      	bne.n	ded6c <_strtol_l.isra.0+0x78>
   ded68:	45a2      	cmp	sl, r4
   ded6a:	db1a      	blt.n	deda2 <_strtol_l.isra.0+0xae>
   ded6c:	fb00 4003 	mla	r0, r0, r3, r4
   ded70:	2601      	movs	r6, #1
   ded72:	f81c 4b01 	ldrb.w	r4, [ip], #1
   ded76:	e7eb      	b.n	ded50 <_strtol_l.isra.0+0x5c>
   ded78:	2c2b      	cmp	r4, #43	; 0x2b
   ded7a:	bf08      	it	eq
   ded7c:	f89c 4000 	ldrbeq.w	r4, [ip]
   ded80:	46a8      	mov	r8, r5
   ded82:	bf08      	it	eq
   ded84:	f100 0c02 	addeq.w	ip, r0, #2
   ded88:	e7c8      	b.n	ded1c <_strtol_l.isra.0+0x28>
   ded8a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   ded8e:	2d19      	cmp	r5, #25
   ded90:	d801      	bhi.n	ded96 <_strtol_l.isra.0+0xa2>
   ded92:	3c37      	subs	r4, #55	; 0x37
   ded94:	e7e1      	b.n	ded5a <_strtol_l.isra.0+0x66>
   ded96:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   ded9a:	2d19      	cmp	r5, #25
   ded9c:	d804      	bhi.n	deda8 <_strtol_l.isra.0+0xb4>
   ded9e:	3c57      	subs	r4, #87	; 0x57
   deda0:	e7db      	b.n	ded5a <_strtol_l.isra.0+0x66>
   deda2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   deda6:	e7e4      	b.n	ded72 <_strtol_l.isra.0+0x7e>
   deda8:	1c73      	adds	r3, r6, #1
   dedaa:	d106      	bne.n	dedba <_strtol_l.isra.0+0xc6>
   dedac:	2322      	movs	r3, #34	; 0x22
   dedae:	f8ce 3000 	str.w	r3, [lr]
   dedb2:	4638      	mov	r0, r7
   dedb4:	b942      	cbnz	r2, dedc8 <_strtol_l.isra.0+0xd4>
   dedb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dedba:	f1b8 0f00 	cmp.w	r8, #0
   dedbe:	d000      	beq.n	dedc2 <_strtol_l.isra.0+0xce>
   dedc0:	4240      	negs	r0, r0
   dedc2:	2a00      	cmp	r2, #0
   dedc4:	d0f7      	beq.n	dedb6 <_strtol_l.isra.0+0xc2>
   dedc6:	b10e      	cbz	r6, dedcc <_strtol_l.isra.0+0xd8>
   dedc8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dedcc:	6011      	str	r1, [r2, #0]
   dedce:	e7f2      	b.n	dedb6 <_strtol_l.isra.0+0xc2>
   dedd0:	2430      	movs	r4, #48	; 0x30
   dedd2:	2b00      	cmp	r3, #0
   dedd4:	d1b3      	bne.n	ded3e <_strtol_l.isra.0+0x4a>
   dedd6:	2308      	movs	r3, #8
   dedd8:	e7b1      	b.n	ded3e <_strtol_l.isra.0+0x4a>
   dedda:	2c30      	cmp	r4, #48	; 0x30
   deddc:	d0a4      	beq.n	ded28 <_strtol_l.isra.0+0x34>
   dedde:	230a      	movs	r3, #10
   dede0:	e7ad      	b.n	ded3e <_strtol_l.isra.0+0x4a>
   dede2:	bf00      	nop
   dede4:	000e05ab 	.word	0x000e05ab

000dede8 <strtol>:
   dede8:	4613      	mov	r3, r2
   dedea:	460a      	mov	r2, r1
   dedec:	4601      	mov	r1, r0
   dedee:	4802      	ldr	r0, [pc, #8]	; (dedf8 <strtol+0x10>)
   dedf0:	6800      	ldr	r0, [r0, #0]
   dedf2:	f7ff bf7f 	b.w	decf4 <_strtol_l.isra.0>
   dedf6:	bf00      	nop
   dedf8:	2003dc4c 	.word	0x2003dc4c

000dedfc <close>:
   dedfc:	4b02      	ldr	r3, [pc, #8]	; (dee08 <close+0xc>)
   dedfe:	4601      	mov	r1, r0
   dee00:	6818      	ldr	r0, [r3, #0]
   dee02:	f000 b8c9 	b.w	def98 <_close_r>
   dee06:	bf00      	nop
   dee08:	2003dc4c 	.word	0x2003dc4c

000dee0c <fstat>:
   dee0c:	4b02      	ldr	r3, [pc, #8]	; (dee18 <fstat+0xc>)
   dee0e:	460a      	mov	r2, r1
   dee10:	4601      	mov	r1, r0
   dee12:	6818      	ldr	r0, [r3, #0]
   dee14:	f000 b8d0 	b.w	defb8 <_fstat_r>
   dee18:	2003dc4c 	.word	0x2003dc4c

000dee1c <lseek>:
   dee1c:	4613      	mov	r3, r2
   dee1e:	460a      	mov	r2, r1
   dee20:	4601      	mov	r1, r0
   dee22:	4802      	ldr	r0, [pc, #8]	; (dee2c <lseek+0x10>)
   dee24:	6800      	ldr	r0, [r0, #0]
   dee26:	f000 b8dd 	b.w	defe4 <_lseek_r>
   dee2a:	bf00      	nop
   dee2c:	2003dc4c 	.word	0x2003dc4c

000dee30 <open>:
   dee30:	b40e      	push	{r1, r2, r3}
   dee32:	b503      	push	{r0, r1, lr}
   dee34:	ab03      	add	r3, sp, #12
   dee36:	4601      	mov	r1, r0
   dee38:	4806      	ldr	r0, [pc, #24]	; (dee54 <open+0x24>)
   dee3a:	f853 2b04 	ldr.w	r2, [r3], #4
   dee3e:	9301      	str	r3, [sp, #4]
   dee40:	6800      	ldr	r0, [r0, #0]
   dee42:	9b04      	ldr	r3, [sp, #16]
   dee44:	f000 f8e0 	bl	df008 <_open_r>
   dee48:	b002      	add	sp, #8
   dee4a:	f85d eb04 	ldr.w	lr, [sp], #4
   dee4e:	b003      	add	sp, #12
   dee50:	4770      	bx	lr
   dee52:	bf00      	nop
   dee54:	2003dc4c 	.word	0x2003dc4c

000dee58 <read>:
   dee58:	4613      	mov	r3, r2
   dee5a:	460a      	mov	r2, r1
   dee5c:	4601      	mov	r1, r0
   dee5e:	4802      	ldr	r0, [pc, #8]	; (dee68 <read+0x10>)
   dee60:	6800      	ldr	r0, [r0, #0]
   dee62:	f000 b8e3 	b.w	df02c <_read_r>
   dee66:	bf00      	nop
   dee68:	2003dc4c 	.word	0x2003dc4c

000dee6c <unlink>:
   dee6c:	4b02      	ldr	r3, [pc, #8]	; (dee78 <unlink+0xc>)
   dee6e:	4601      	mov	r1, r0
   dee70:	6818      	ldr	r0, [r3, #0]
   dee72:	f000 b80d 	b.w	dee90 <_unlink_r>
   dee76:	bf00      	nop
   dee78:	2003dc4c 	.word	0x2003dc4c

000dee7c <write>:
   dee7c:	4613      	mov	r3, r2
   dee7e:	460a      	mov	r2, r1
   dee80:	4601      	mov	r1, r0
   dee82:	4802      	ldr	r0, [pc, #8]	; (dee8c <write+0x10>)
   dee84:	6800      	ldr	r0, [r0, #0]
   dee86:	f000 b813 	b.w	deeb0 <_write_r>
   dee8a:	bf00      	nop
   dee8c:	2003dc4c 	.word	0x2003dc4c

000dee90 <_unlink_r>:
   dee90:	b538      	push	{r3, r4, r5, lr}
   dee92:	4d06      	ldr	r5, [pc, #24]	; (deeac <_unlink_r+0x1c>)
   dee94:	2300      	movs	r3, #0
   dee96:	4604      	mov	r4, r0
   dee98:	4608      	mov	r0, r1
   dee9a:	602b      	str	r3, [r5, #0]
   dee9c:	f7fb fdf2 	bl	daa84 <_unlink>
   deea0:	1c43      	adds	r3, r0, #1
   deea2:	d102      	bne.n	deeaa <_unlink_r+0x1a>
   deea4:	682b      	ldr	r3, [r5, #0]
   deea6:	b103      	cbz	r3, deeaa <_unlink_r+0x1a>
   deea8:	6023      	str	r3, [r4, #0]
   deeaa:	bd38      	pop	{r3, r4, r5, pc}
   deeac:	2003e7f0 	.word	0x2003e7f0

000deeb0 <_write_r>:
   deeb0:	b538      	push	{r3, r4, r5, lr}
   deeb2:	4d07      	ldr	r5, [pc, #28]	; (deed0 <_write_r+0x20>)
   deeb4:	4604      	mov	r4, r0
   deeb6:	4608      	mov	r0, r1
   deeb8:	4611      	mov	r1, r2
   deeba:	2200      	movs	r2, #0
   deebc:	602a      	str	r2, [r5, #0]
   deebe:	461a      	mov	r2, r3
   deec0:	f7fb fda8 	bl	daa14 <_write>
   deec4:	1c43      	adds	r3, r0, #1
   deec6:	d102      	bne.n	deece <_write_r+0x1e>
   deec8:	682b      	ldr	r3, [r5, #0]
   deeca:	b103      	cbz	r3, deece <_write_r+0x1e>
   deecc:	6023      	str	r3, [r4, #0]
   deece:	bd38      	pop	{r3, r4, r5, pc}
   deed0:	2003e7f0 	.word	0x2003e7f0

000deed4 <__register_exitproc>:
   deed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   deed8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; def94 <__register_exitproc+0xc0>
   deedc:	4606      	mov	r6, r0
   deede:	f8d8 0000 	ldr.w	r0, [r8]
   deee2:	461f      	mov	r7, r3
   deee4:	460d      	mov	r5, r1
   deee6:	4691      	mov	r9, r2
   deee8:	f000 f878 	bl	defdc <__retarget_lock_acquire_recursive>
   deeec:	4b25      	ldr	r3, [pc, #148]	; (def84 <__register_exitproc+0xb0>)
   deeee:	681c      	ldr	r4, [r3, #0]
   deef0:	b934      	cbnz	r4, def00 <__register_exitproc+0x2c>
   deef2:	4c25      	ldr	r4, [pc, #148]	; (def88 <__register_exitproc+0xb4>)
   deef4:	601c      	str	r4, [r3, #0]
   deef6:	4b25      	ldr	r3, [pc, #148]	; (def8c <__register_exitproc+0xb8>)
   deef8:	b113      	cbz	r3, def00 <__register_exitproc+0x2c>
   deefa:	681b      	ldr	r3, [r3, #0]
   deefc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   def00:	6863      	ldr	r3, [r4, #4]
   def02:	2b1f      	cmp	r3, #31
   def04:	dd07      	ble.n	def16 <__register_exitproc+0x42>
   def06:	f8d8 0000 	ldr.w	r0, [r8]
   def0a:	f000 f869 	bl	defe0 <__retarget_lock_release_recursive>
   def0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   def12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   def16:	b34e      	cbz	r6, def6c <__register_exitproc+0x98>
   def18:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   def1c:	b988      	cbnz	r0, def42 <__register_exitproc+0x6e>
   def1e:	4b1c      	ldr	r3, [pc, #112]	; (def90 <__register_exitproc+0xbc>)
   def20:	b923      	cbnz	r3, def2c <__register_exitproc+0x58>
   def22:	f8d8 0000 	ldr.w	r0, [r8]
   def26:	f000 f85a 	bl	defde <__retarget_lock_release>
   def2a:	e7f0      	b.n	def0e <__register_exitproc+0x3a>
   def2c:	f44f 7084 	mov.w	r0, #264	; 0x108
   def30:	f7fb ffba 	bl	daea8 <malloc>
   def34:	2800      	cmp	r0, #0
   def36:	d0f4      	beq.n	def22 <__register_exitproc+0x4e>
   def38:	2300      	movs	r3, #0
   def3a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   def3e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   def42:	6863      	ldr	r3, [r4, #4]
   def44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   def48:	2201      	movs	r2, #1
   def4a:	409a      	lsls	r2, r3
   def4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   def50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   def54:	4313      	orrs	r3, r2
   def56:	2e02      	cmp	r6, #2
   def58:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   def5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   def60:	bf02      	ittt	eq
   def62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   def66:	431a      	orreq	r2, r3
   def68:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   def6c:	6863      	ldr	r3, [r4, #4]
   def6e:	f8d8 0000 	ldr.w	r0, [r8]
   def72:	1c5a      	adds	r2, r3, #1
   def74:	3302      	adds	r3, #2
   def76:	6062      	str	r2, [r4, #4]
   def78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   def7c:	f000 f830 	bl	defe0 <__retarget_lock_release_recursive>
   def80:	2000      	movs	r0, #0
   def82:	e7c6      	b.n	def12 <__register_exitproc+0x3e>
   def84:	2003e7e0 	.word	0x2003e7e0
   def88:	2003e754 	.word	0x2003e754
   def8c:	00000000 	.word	0x00000000
   def90:	000daea9 	.word	0x000daea9
   def94:	2003dcb0 	.word	0x2003dcb0

000def98 <_close_r>:
   def98:	b538      	push	{r3, r4, r5, lr}
   def9a:	4d06      	ldr	r5, [pc, #24]	; (defb4 <_close_r+0x1c>)
   def9c:	2300      	movs	r3, #0
   def9e:	4604      	mov	r4, r0
   defa0:	4608      	mov	r0, r1
   defa2:	602b      	str	r3, [r5, #0]
   defa4:	f7fb fd46 	bl	daa34 <_close>
   defa8:	1c43      	adds	r3, r0, #1
   defaa:	d102      	bne.n	defb2 <_close_r+0x1a>
   defac:	682b      	ldr	r3, [r5, #0]
   defae:	b103      	cbz	r3, defb2 <_close_r+0x1a>
   defb0:	6023      	str	r3, [r4, #0]
   defb2:	bd38      	pop	{r3, r4, r5, pc}
   defb4:	2003e7f0 	.word	0x2003e7f0

000defb8 <_fstat_r>:
   defb8:	b538      	push	{r3, r4, r5, lr}
   defba:	4d07      	ldr	r5, [pc, #28]	; (defd8 <_fstat_r+0x20>)
   defbc:	2300      	movs	r3, #0
   defbe:	4604      	mov	r4, r0
   defc0:	4608      	mov	r0, r1
   defc2:	4611      	mov	r1, r2
   defc4:	602b      	str	r3, [r5, #0]
   defc6:	f7fb fd3d 	bl	daa44 <_fstat>
   defca:	1c43      	adds	r3, r0, #1
   defcc:	d102      	bne.n	defd4 <_fstat_r+0x1c>
   defce:	682b      	ldr	r3, [r5, #0]
   defd0:	b103      	cbz	r3, defd4 <_fstat_r+0x1c>
   defd2:	6023      	str	r3, [r4, #0]
   defd4:	bd38      	pop	{r3, r4, r5, pc}
   defd6:	bf00      	nop
   defd8:	2003e7f0 	.word	0x2003e7f0

000defdc <__retarget_lock_acquire_recursive>:
   defdc:	4770      	bx	lr

000defde <__retarget_lock_release>:
   defde:	4770      	bx	lr

000defe0 <__retarget_lock_release_recursive>:
   defe0:	4770      	bx	lr
	...

000defe4 <_lseek_r>:
   defe4:	b538      	push	{r3, r4, r5, lr}
   defe6:	4d07      	ldr	r5, [pc, #28]	; (df004 <_lseek_r+0x20>)
   defe8:	4604      	mov	r4, r0
   defea:	4608      	mov	r0, r1
   defec:	4611      	mov	r1, r2
   defee:	2200      	movs	r2, #0
   deff0:	602a      	str	r2, [r5, #0]
   deff2:	461a      	mov	r2, r3
   deff4:	f7fb fd2e 	bl	daa54 <_lseek>
   deff8:	1c43      	adds	r3, r0, #1
   deffa:	d102      	bne.n	df002 <_lseek_r+0x1e>
   deffc:	682b      	ldr	r3, [r5, #0]
   deffe:	b103      	cbz	r3, df002 <_lseek_r+0x1e>
   df000:	6023      	str	r3, [r4, #0]
   df002:	bd38      	pop	{r3, r4, r5, pc}
   df004:	2003e7f0 	.word	0x2003e7f0

000df008 <_open_r>:
   df008:	b538      	push	{r3, r4, r5, lr}
   df00a:	4d07      	ldr	r5, [pc, #28]	; (df028 <_open_r+0x20>)
   df00c:	4604      	mov	r4, r0
   df00e:	4608      	mov	r0, r1
   df010:	4611      	mov	r1, r2
   df012:	2200      	movs	r2, #0
   df014:	602a      	str	r2, [r5, #0]
   df016:	461a      	mov	r2, r3
   df018:	f7fb fcf4 	bl	daa04 <_open>
   df01c:	1c43      	adds	r3, r0, #1
   df01e:	d102      	bne.n	df026 <_open_r+0x1e>
   df020:	682b      	ldr	r3, [r5, #0]
   df022:	b103      	cbz	r3, df026 <_open_r+0x1e>
   df024:	6023      	str	r3, [r4, #0]
   df026:	bd38      	pop	{r3, r4, r5, pc}
   df028:	2003e7f0 	.word	0x2003e7f0

000df02c <_read_r>:
   df02c:	b538      	push	{r3, r4, r5, lr}
   df02e:	4d07      	ldr	r5, [pc, #28]	; (df04c <_read_r+0x20>)
   df030:	4604      	mov	r4, r0
   df032:	4608      	mov	r0, r1
   df034:	4611      	mov	r1, r2
   df036:	2200      	movs	r2, #0
   df038:	602a      	str	r2, [r5, #0]
   df03a:	461a      	mov	r2, r3
   df03c:	f7fb fcf2 	bl	daa24 <_read>
   df040:	1c43      	adds	r3, r0, #1
   df042:	d102      	bne.n	df04a <_read_r+0x1e>
   df044:	682b      	ldr	r3, [r5, #0]
   df046:	b103      	cbz	r3, df04a <_read_r+0x1e>
   df048:	6023      	str	r3, [r4, #0]
   df04a:	bd38      	pop	{r3, r4, r5, pc}
   df04c:	2003e7f0 	.word	0x2003e7f0

000df050 <dynalib_user>:
   df050:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   df060:	00000000 74696e69 69616620 0064656c     ....init failed.
   df070:	74746573 20676e69 65646f6e 6d756e20     setting node num
   df080:	20726562 47207361 77657461 4c007961     ber as Gateway.L
   df090:	2041526f 69646152 6e69206f 61697469     oRA Radio initia
   df0a0:	657a696c 73612064 646f4e20 6d754e65     lized as NodeNum
   df0b0:	20726562 2520666f 6e612069 65442064     ber of %i and De
   df0c0:	65636976 6f204449 69252066 646e6120     viceID of %i and
   df0d0:	6d206120 63696761 6d756e20 20726562      a magic number 
   df0e0:	2520666f 654d0069 67617373 6e692065     of %i.Message in
   df0f0:	646e6574 66206465 6120726f 68746f6e     tended for anoth
   df100:	6e207265 0065646f 65636552 64657669     er node.Received
   df110:	6f726620 6f6e206d 25206564 69772064      from node %d wi
   df120:	72206874 3d697373 2d206425 25206120     th rssi=%d - a %
   df130:	656d2073 67617373 666f2065 6e656c20     s message of len
   df140:	20687467 50006425 61706572 676e6972     gth %d.Preparing
   df150:	6b636120 6c776f6e 65676465 746e656d      acknowledgement
   df160:	74697720 69252068 63657320 73646e6f      with %i seconds
   df170:	6e655300 65722074 6e6f7073 74206573     .Sent response t
   df180:	6c63206f 746e6569 73656d20 65676173     o client message
   df190:	25203d20 74202c64 20656d69 7325203d      = %d, time = %s
   df1a0:	656e202c 72207478 726f7065 203d2074     , next report = 
   df1b0:	73207525 6e6f6365 52007364 6f707365     %u seconds.Respo
   df1c0:	2065736e 65636572 64657669 63757320     nse received suc
   df1d0:	73736563 6c6c7566 65520079 6e6f7073     cessfully.Respon
   df1e0:	6e206573 6120746f 6f6e6b63 64656c77     se not acknowled
   df1f0:	00646567 746e6553 73657220 736e6f70     ged.Sent respons
   df200:	6f742065 646f4e20 64252065 6974202c     e to Node %d, ti
   df210:	3d20656d 2c732520 78656e20 65722074     me = %s, next re
   df220:	74726f70 25203d20 65732075 646e6f63     port = %u second
   df230:	65520073 6e6f7073 676e6964 69737520     s.Responding usi
   df240:	7420676e 25206568 656d2073 67617373     ng the %s messag
   df250:	79742065 46006570 206d6f72 74207325     e type.From %s t
   df260:	7325206f 61745300 54206574 736e6172     o %s.State Trans
   df270:	6f697469 5345006e 44453554 334d2c54     ition.EST5EDT,M3
   df280:	302e322e 303a322f 30303a30 31314d2c     .2.0/2:00:00,M11
   df290:	302e312e 303a322f 30303a30 3a363000     .1.0/2:00:00.06:
   df2a0:	303a3030 32320030 3a39353a 53003935     00:00.22:59:59.S
   df2b0:	74726174 63207075 6c706d6f 20657465     tartup complete 
   df2c0:	25207461 69772073 62206874 65747461     at %s with batte
   df2d0:	25207972 66322e34 636f6c00 74206c61     ry %4.2f.local t
   df2e0:	3a656d69 00732520 656d6974 20666f20     ime: %s.time of 
   df2f0:	7478656e 65766520 6920746e 25203a73     next event is: %
   df300:	68772073 20686369 25207369 7320756c     s which is %lu s
   df310:	6e6f6365 61207364 00796177 65656c53     econds away.Slee
   df320:	6f662070 69252072 63657320 73646e6f     p for %i seconds
   df330:	6b6f5700 69772065 75206874 20726573     .Woke with user 
   df340:	74747562 2d206e6f 726f6e20 206c616d     button - normal 
   df350:	7265706f 6f697461 4700736e 77657461     operations.Gatew
   df360:	69207961 696c2073 6e657473 20676e69     ay is listening 
   df370:	20726f66 41526f4c 73656d20 65676173     for LoRA message
   df380:	65570073 65726120 64707520 6e697461     s.We are updatin
   df390:	68742067 75702065 73696c62 72662068     g the publish fr
   df3a0:	65757165 2079636e 25206f74 696d2069     equency to %i mi
   df3b0:	6574756e 31320073 3a39353a 7b003935     nutes.21:59:59.{
   df3c0:	646f6e22 22646965 2c75253a 6f682220     "nodeid":%u, "ho
   df3d0:	796c7275 75253a22 6422202c 796c6961     urly":%u, "daily
   df3e0:	75253a22 6162222c 72657474 253a2279     ":%u,"battery":%
   df3f0:	6b222c64 22317965 7325223a 74222c22     d,"key1":"%s","t
   df400:	22706d65 2c64253a 65722220 73746573     emp":%d, "resets
   df410:	64253a22 6122202c 7472656c 253a2273     ":%d, "alerts":%
   df420:	72222c64 22697373 2c64253a 736d2220     d,"rssi":%d, "ms
   df430:	253a2267 74222c64 73656d69 706d6174     g":%d,"timestamp
   df440:	6c253a22 30303075 6255007d 746f6469     ":%lu000}.Ubidot
   df450:	6f4c2d73 482d4152 2d6b6f6f 00003176     s-LoRA-Hook-v1..

000df460 <_ZTV8MB85RC64>:
	...
   df468:	000d4585 000d4599 000d7e6d 000d7f03     .E...E..m~......
   df478:	000d7f85 74696e49 7a696c61 20676e69     ....Initalizing 
   df488:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   df498:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   df4a8:	666e6f43 00006769                       Config..

000df4b0 <BLUE_LED>:
   df4b0:	                                         ..

000df4b2 <BUTTON_PIN>:
   df4b2:	                                         ..

000df4b4 <RFM95_CS>:
   df4b4:	                                         ..

000df4b6 <RFM95_INT>:
   df4b6:	                                         ..

000df4b8 <TMP36_SENSE_PIN>:
   df4b8:	7525000f 6e696d20 73657275 70655200     ..%u minures.Rep
   df4c8:	2074726f 71657266 636e6575 69772079     ort frequency wi
   df4d8:	62206c6c 65732065 6f742074 20692520     ll be set to %i 
   df4e8:	756e696d 20736574 6e207461 20747865     minutes at next 
   df4f8:	41526f4c 6e6f6320 7463656e 6d695400     LoRA connect.Tim
   df508:	68530065 2074726f 6f706572 6e697472     e.Short reportin
   df518:	72662067 65757165 2079636e 7265766f     g frequency over
   df528:	6469722d 6c207365 7020776f 7265776f     -rides low power
   df538:	73657900 006f6e00 72636e49 69736165     .yes.no.Increasi
   df548:	7220676e 726f7065 676e6974 65726620     ng reporting fre
   df558:	6e657571 74207963 3231206f 6e696d20     quency to 12 min
   df568:	73657475 20734900 20776f4c 65776f50     utes.Is Low Powe
   df578:	6f4d2072 73206564 203f7465 53007325     r Mode set? %s.S
   df588:	74207465 6556206f 6f7a6972 4953206e     et to Verizon SI
   df598:	6553004d 6f742074 72615020 6c636974     M.Set to Particl
   df5a8:	49532065 6e49004d 65687420 73696420     e SIM.In the dis
   df5b8:	6e6e6f63 20746365 6d6f7266 72615020     connect from Par
   df5c8:	6c636974 75662065 6974636e 46006e6f     ticle function.F
   df5d8:	656c6961 6f742064 73696420 6e6e6f63     ailed to disconn
   df5e8:	20746365 6d6f7266 72615020 6c636974     ect from Particl
   df5f8:	69440065 6e6f6373 7463656e 66206465     e.Disconnected f
   df608:	206d6f72 74726150 656c6369 206e6920     rom Particle in 
   df618:	73206925 6e6f6365 46007364 656c6961     %i seconds.Faile
   df628:	6f742064 72757420 666f206e 68742066     d to turn off th
   df638:	65432065 6c756c6c 6d207261 6d65646f     e Cellular modem
   df648:	72755400 2064656e 2066666f 20656874     .Turned off the 
   df658:	6c6c6563 72616c75 646f6d20 69206d65     cellular modem i
   df668:	6925206e 63657320 73646e6f 73655900     n %i seconds.Yes
   df678:	006f4e00 69726556 006e6f7a 6e6b6e55     .No.Verizon.Unkn
   df688:	006e776f 20746f4e 72616843 676e6967     own.Not Charging
   df698:	61684300 64656772 73694400 72616863     .Charged.Dischar
   df6a8:	676e6967 75614600 4400746c 6e6f6369     ging.Fault.Dicon
   df6b8:	7463656e 49006465 6974696e 7a696c61     nected.Initializ
   df6c8:	20676e69 74726150 656c6369 6e756620     ing Particle fun
   df6d8:	6f697463 6120736e 7620646e 61697261     ctions and varia
   df6e8:	73656c62 776f4c00 776f5020 4d207265     bles.Low Power M
   df6f8:	0065646f 656c6552 00657361 6e676953     ode.Release.Sign
   df708:	73006c61 65746174 6843664f 61420067     al.stateOfChg.Ba
   df718:	72657474 6e6f4379 74786574 70655200     tteryContext.Rep
   df728:	6974726f 4620676e 75716572 79636e65     orting Frequency
   df738:	4d495300 72614320 65530064 6f4c2074     .SIM Card.Set Lo
   df748:	6f502077 00726577 20746553 71657246     w Power.Set Freq
   df758:	636e6575 00000079                       uency...

000df760 <_ZTVN5spark10LogHandlerE>:
	...
   df770:	000d40a5 000d4ea1                       .@...N..

000df778 <_ZTVN5spark16SerialLogHandlerE>:
	...
   df780:	000d4f29 000d4f5d 000dcc6d 000d4ea3     )O..]O..m....N..
   df790:	64616f4c 20676e69 74737953 44206d65     Loading System D
   df7a0:	75616665 0073746c 64616f4c 20676e69     efaults.Loading 
   df7b0:	74737973 64206d65 75616665 0073746c     system defaults.
   df7c0:	53737973 73756174 6a626f20 20746365     sysStaus object 
   df7d0:	726f7473 61206465 6820646e 20687361     stored and hash 
   df7e0:	61647075 00646574 72727563 20746e65     updated.current 
   df7f0:	656a626f 73207463 65726f74 6e612064     object stored an
   df800:	61682064 75206873 74616470 49006465     d hash updated.I
   df810:	6974696e 7a696c61 20676e69 20656874     nitializing the 
   df820:	656a624f 53207463 65726f74 41524600     Object Store.FRA
   df830:	696d204d 74616d73 202c6863 73617265     M mismatch, eras
   df840:	20676e69 20646e61 61636f6c 676e6966     ing and locafing
   df850:	66656420 746c7561 66692073 20746920      defaults if it 
   df860:	63656863 6f20736b 46007475 204d4152     checks out.FRAM 
   df870:	74696e69 696c6169 2c64657a 616f6c20     initialized, loa
   df880:	676e6964 6a626f20 73746365 00000000     ding objects....

000df890 <_ZL17FRAMversionNumber>:
   df890:	00000001 656e6f4e 46695700 53470069     ....None.WiFi.GS
   df8a0:	4d55004d 43005354 00414d44 0045544c     M.UMTS.CDMA.LTE.
   df8b0:	45454549 31323038 4c003435 435f4554     IEEE802154.LTE_C
   df8c0:	4d5f5441 544c0031 41435f45 424e5f54     AT_M1.LTE_CAT_NB
   df8d0:	73250031 253a5320 66302e32 202c2525     1.%s S:%2.0f%%, 
   df8e0:	32253a51 2566302e 25002025 00432069     Q:%2.0f%% .%i C.
   df8f0:	65746e49 6c616e72 6d655420 61726570     Internal Tempera
   df900:	65727574 20736920 00007325 000df684     ture is %s......
   df910:	000df894 000df899 000df89e 000df8a2     ................
   df920:	000df8a7 000df8ac 000df8b0 000df8bb     ................
   df930:	000df8c6 6c696166 74206465 6572206f     ....failed to re
   df940:	72206461 64416765 253d7264 20783230     ad regAddr=%02x 
   df950:	6e756f63 75253d74 69616600 2064656c     count=%u.failed 
   df960:	72206f74 20646165 41676572 3d726464     to read regAddr=
   df970:	78323025 61747320 64253d74 554f4600     %02x stat=%d.FOU
   df980:	69642054 6f6e2064 6f672074 47494820     T did not go HIG
   df990:	6f6e0048 65642074 74636574 66006465     H.not detected.f
   df9a0:	656c6961 6f742064 69727720 72206574     ailed to write r
   df9b0:	64416765 253d7264 20783230 74617473     egAddr=%02x stat
   df9c0:	0064253d 57746573 25205444 61770064     =%d.setWDT %d.wa
   df9d0:	64686374 6320676f 7261656c 62206465     tchdog cleared b
   df9e0:	75736552 253d746c 61770064 64686374     Result=%d.watchd
   df9f0:	7320676f 66207465 5372756f 3d736365     og set fourSecs=
   dfa00:	62206425 75736552 253d746c 65720064     %d bResult=%d.re
   dfa10:	43746573 69666e6f 78302867 6c383025     setConfig(0x%08l
   dfa20:	57002978 48435441 00474f44 50454544     x).WATCHDOG.DEEP
   dfa30:	574f505f 445f5245 004e574f 4e554f43     _POWER_DOWN.COUN
   dfa40:	574f4454 49545f4e 0052454d 52414c41     TDOWN_TIMER.ALAR
   dfa50:	6166004d 72756c69 6e692065 64707520     M.failure in upd
   dfa60:	57657461 52656b61 6f736165 6425206e     ateWakeReason %d
   dfa70:	6b617700 65722065 6e6f7361 25203d20     .wake reason = %
   dfa80:	30250073 252d6434 2d643230 64323025     s.%04d-%02d-%02d
   dfa90:	32302520 30253a64 253a6432 00643230      %02d:%02d:%02d.
   dfaa0:	52746567 73416374 25206d54 65730073     getRtcAsTm %s.se
   dfab0:	79732074 6d657473 6f6c6320 66206b63     t system clock f
   dfac0:	206d6f72 20435452 66007325 656c6961     rom RTC %s.faile
   dfad0:	6f742064 74656420 20746365 38314241     d to detect AB18
   dfae0:	73003530 74527465 54734163 7325206d     05.setRtcAsTm %s
   dfaf0:	69616600 6572756c 206e6920 52746573     .failure in setR
   dfb00:	72466374 6d546d6f 00642520 20746573     tcFromTm %d.set 
   dfb10:	20435452 6d6f7266 6f6c6320 25206475     RTC from cloud %
   dfb20:	70610073 62612e70 35303831 00000000     s.app.ab1805....

000dfb30 <_ZTV6AB1805>:
	...
   dfb38:	000d5a9d 000d5a9f 000d600b 000d6091     .Z...Z...`...`..
   dfb48:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   dfb58:	004b5268                                hRK.

000dfb5c <_ZTV19BackgroundPublishRK>:
	...
   dfb64:	000d65c1 000d65dd 253a6425 64253a64     .e...e..%d:%d:%d
   dfb74:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   dfb84:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   dfb94:	302b2500 253a6433 00753230 74636576     .%+03d:%02u.vect
   dfba4:	3a3a726f 725f4d5f 6c6c6165 695f636f     or::_M_realloc_i
   dfbb4:	7265736e 00000074                       nsert...

000dfbbc <_ZTV9LocalTime>:
	...
   dfbc4:	000d6919 000d6931                       .i..1i..

000dfbcc <_ZTV12LocalTimeHMS>:
	...
   dfbd4:	000d68bb 000d68cd                       .h...h..

000dfbdc <_ZTV15LocalTimeChange>:
	...
   dfbe4:	000d68bd 000d68db                       .h...h..

000dfbec <_ZTV22LocalTimePosixTimezone>:
	...
   dfbf4:	000d68e9 000d6905 74697277 74614465     .h...i..writeDat
   dfc04:	61662061 64656c69 72756420 20676e69     a failed during 
   dfc14:	73617265 72662065 64416d61 253d7264     erase framAddr=%
   dfc24:	00000075                                u...

000dfc28 <_ZTV6MB85RC>:
	...
   dfc30:	000d7dbb 000d7dbd 000d7e6d 000d7f03     .}...}..m~......
   dfc40:	000d7f85 656c6966 3d6d754e 73206425     ....fileNum=%d s
   dfc50:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   dfc60:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   dfc70:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   dfc80:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   dfc90:	64657470 65766520 6e20746e 20656d61     pted event name 
   dfca0:	6420726f 00617461 64616572 75657551     or data.readQueu
   dfcb0:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   dfcc0:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   dfcd0:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   dfce0:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   dfcf0:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   dfd00:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   dfd10:	6d754e65 0064253d 65736572 726f2074     eNum=%d.reset or
   dfd20:	73696420 6e6e6f63 20746365 6e657665      disconnect even
   dfd30:	73202c74 20657661 656c6966 6f742073     t, save files to
   dfd40:	65757120 72006575 64006d61 61637369      queue.ram.disca
   dfd50:	6e696472 6f632067 70757272 20646574     rding corrupted 
   dfd60:	656c6966 00642520 6c627570 69687369     file %d.publishi
   dfd70:	2520676e 76652073 3d746e65 64207325     ng %s event=%s d
   dfd80:	3d617461 64007325 61637369 64656472     ata=%s.discarded
   dfd90:	65766520 2520746e 59530064 4d455453      event %d.SYSTEM
   dfda0:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   dfdb0:	20736920 75716572 64657269 62757000      is required.pub
   dfdc0:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   dfdd0:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   dfde0:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   dfdf0:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   dfe00:	72656772 61687420 616d206e 69735f78     rger than max_si
   dfe10:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   dfe20:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   dfe30:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   dfe40:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   dfe50:	00657565 6c627570 20687369 63637573     eue.publish succ
   dfe60:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   dfe70:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   dfe80:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   dfe90:	206f7420 656c6966 66612073 20726574      to files after 
   dfea0:	6c627570 20687369 6c696166 00657275     publish failure.
   dfeb0:	2e707061 71627570 00000000              app.pubq....

000dfebc <_ZTV17PublishQueuePosix>:
	...
   dfec4:	000d8819 000d8af1 000d8b15              ............

000dfed0 <_ZTV15RHGenericDriver>:
	...
   dfee0:	000d8c31 000d40a5 000d40a5 000d40a5     1....@...@...@..
   dfef0:	000d40a5 000d8c93 000d8c35 000d8ce3     .@......5.......
   dff00:	000d8cb1 000d8d07 000d8c3f 000d8c47     ........?...G...
   dff10:	000d8c4b 000d8c4f 000d8c53 000d8c57     K...O...S...W...
   dff20:	000d8c43 000d8c63 000d8c67 000d8c6b     C...c...g...k...
   dff30:	000d8c6f 000d8c73 000d8c79 000d8c7d     o...s...y...}...
   dff40:	000d8c3f 000d8c81 000d8c87 000d8c8d     ?...............

000dff50 <_ZTV12RHGenericSPI>:
	...
   dff58:	000d40a5 000d8d65 000d8d67 000d40a5     .@..e...g....@..
   dff68:	000d40a5 000d8d6f 000d8d73 000d8d77     .@..o...s...w...
   dff78:	000d8d69 000d8d6b 000d8d6d 61666564     i...k...m...defa
   dff88:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   dff98:	74655349 676e6974 65642073 6c756166     ISettings defaul
   dffa8:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   dffb8:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000dffc8 <_ZTVN8particle11SPISettingsE>:
	...
   dffd0:	000d8dbd 000d8d91 000d8d93              ............

000dffdc <_ZTV13RHHardwareSPI>:
	...
   dffe4:	000d8e71 000d8e85 000d8e93 000d8ea1     q...............
   dfff4:	000d8f0d 000d8d6f 000d8d73 000d8d77     ....o...s...w...
   e0004:	000d8f1b 000d8f2f 000d8f3d              ..../...=...

000e0010 <_ZTV6RHMesh>:
	...
   e0018:	000d900d 000d9315 000d8f69 000d8f55     ........i...U...

000e0028 <_ZTV8RHRouter>:
	...
   e0030:	000d957b 000d95bf                       {.......

000e0038 <_ZTV11RHSPIDriver>:
	...
   e0048:	000d985d 000d40a5 000d40a5 000d40a5     ]....@...@...@..
   e0058:	000d40a5 000d8c93 000d8c35 000d8ce3     .@......5.......
   e0068:	000d8cb1 000d8d07 000d8c3f 000d8c47     ........?...G...
   e0078:	000d8c4b 000d8c4f 000d8c53 000d8c57     K...O...S...W...
   e0088:	000d8c43 000d8c63 000d8c67 000d8c6b     C...c...g...k...
   e0098:	000d8c6f 000d8c73 000d8c79 000d8c7d     o...s...y...}...
   e00a8:	000d8c3f 000d8c81 000d8c87 000d8c8d     ?...............
   e00b8:	000d9889 000d9893                       ........

000e00c0 <_ZL18MODEM_CONFIG_TABLE>:
   e00c0:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000e00d0 <_ZTV7RH_RF95>:
	...
   e00d8:	000d99fb 000d9a33 000d9ef1 000d9d57     ....3.......W...
   e00e8:	000d9a69 000d9d9f 000d99f7 000d8c93     i...............
   e00f8:	000d8c35 000d8ce3 000d8cb1 000d8d07     5...............
   e0108:	000d99fd 000d8c47 000d8c4b 000d8c4f     ....G...K...O...
   e0118:	000d8c53 000d8c57 000d8c43 000d8c63     S...W...C...c...
   e0128:	000d8c67 000d8c6b 000d8c6f 000d8c73     g...k...o...s...
   e0138:	000d8c79 000d8c7d 000d9a43 000d8c81     y...}...C.......
   e0148:	000d8c87 000d8c8d 000d9889 000d9893     ................
   e0158:	000d99f3 64383025 72002f00 766f6d65     ....%08d./.remov
   e0168:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   e0178:	20646e61 61207369 72696420 6f746365     and is a directo
   e0188:	66007972 20656c69 74206e69 77206568     ry.file in the w
   e0198:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   e01a8:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   e01b8:	0064253d 61657263 20646574 20726964     =%d.created dir 
   e01c8:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   e01d8:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   e01e8:	65727567 69642064 74615072 63730068     gured dirPath.sc
   e01f8:	696e6e61 2520676e 69772073 70206874     anning %s with p
   e0208:	65747461 25206e72 64610073 676e6964     attern %s.adding
   e0218:	206f7420 75657571 64252065 00732520      to queue %d %s.
   e0228:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   e0238:	74657220 656e7275 64252064 70706100      returned %d.app
   e0248:	7165732e 656c6966 00000000              .seqfile....

000e0254 <_ZTV14SequentialFile>:
	...
   e025c:	000da33d 000da369 000d9ff5              =...i.......

000e0268 <_ZTVN5spark13CellularClassE>:
	...
   e0270:	000db043 000db039 000db02f 000dafe5     C...9.../.......
   e0280:	000db023 000db017 000dcfc5 000dcfcd     #...............
   e0290:	000db00b 000db003 000daff9 000dafef     ................
   e02a0:	000dcffd                                ....

000e02a4 <_ZTV14CellularSignal>:
	...
   e02ac:	000db0f1 000db119 000db0f3 000db129     ............)...
   e02bc:	000db15d 000db189 000db1bd 000db20d     ]...............
   e02cc:	000db0f7 000db113 fffffffc 00000000     ................
   e02dc:	000db233                                3...

000e02e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e02e8:	000db253 000db259 000db297 000db267     S...Y.......g...
   e02f8:	000db255                                U...

000e02fc <_ZTVN5spark13EthernetClassE>:
	...
   e0304:	000db86b 000db861 000db857 000db84d     k...a...W...M...
   e0314:	000db841 000db835 000dcfc5 000dcfcd     A...5...........
   e0324:	000db829 000db821 000db817 000db80d     )...!...........
   e0334:	000dcffd                                ....

000e0338 <_ZTV7TwoWire>:
	...
   e0340:	000dba0f 000dba59 000dba31 000dba11     ....Y...1.......
   e0350:	000dba39 000dba41 000dba49 000dba51     9...A...I...Q...

000e0360 <_ZTV9IPAddress>:
	...
   e0368:	000dbbf1 000dbbe1 000dbbe3 34302575     ............u%04
   e0378:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   e0388:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   e0398:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   e03a8:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   e03b8:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   e03c8:	20736c69 0d00203d 0063000a 66006e6c     ils = ....c.ln.f
   e03d8:	6f63006e 64006564 69617465 0000006c     n.code.detail...

000e03e8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   e03f0:	000dc0ad 000dc0d3 000dc091 000dbcf1     ................

000e0400 <_ZTVN5spark16StreamLogHandlerE>:
	...
   e0408:	000dc489 000dc4a1 000dcc6d 000d4ea3     ........m....N..

000e0418 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e0420:	000dc4b5 000dc4c9 000dce11 000dc099     ................

000e0430 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e0438:	000dc0ab 000dc0e1 000dcba9 000dc09b     ................

000e0448 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e0450:	000dc0a9 000dc0ef 000dc3d1 000dc10d     ................

000e0460 <_ZTVN5spark12NetworkClassE>:
	...
   e0468:	000dcf85 000dcf8f 000dcf99 000dcfa3     ................
   e0478:	000dcfad 000dcfb9 000dcfc5 000dcfcd     ................
   e0488:	000dcfd5 000dcfe1 000dcfe9 000dcff3     ................
   e0498:	000dcffd                                ....

000e049c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   e049c:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   e04ac:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   e04bc:	72756769 6f697461 7369206e 766e6920     iguration is inv
   e04cc:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   e04dc:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   e04ec:	00000065                                e...

000e04f0 <_ZTV11USARTSerial>:
	...
   e04f8:	000ddbcd 000ddc3b 000ddc13 000dd243     ....;.......C...
   e0508:	000ddbe3 000ddbff 000ddbf1 000ddc0d     ................
   e0518:	000ddbcf 000ddbd5                       ........

000e0520 <_ZTV9USBSerial>:
	...
   e0528:	000ddcdb 000ddd43 000ddd19 000dd243     ....C.......C...
   e0538:	000ddd0b 000ddcdd 000ddced 000ddd3d     ............=...
   e0548:	000ddcfd 000ddcd5                       ........

000e0550 <_ZSt7nothrow>:
   e0550:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   e0560:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000e0571 <day_name.6145>:
   e0571:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   e0581:	61536972                                 riSat

000e0586 <mon_name.6146>:
   e0586:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   e0596:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   e05a6:	63654476                                vDec

000e05aa <_ctype_>:
   e05aa:	20202000 20202020 28282020 20282828     .         ((((( 
   e05ba:	20202020 20202020 20202020 20202020                     
   e05ca:	10108820 10101010 10101010 10101010      ...............
   e05da:	04040410 04040404 10040404 10101010     ................
   e05ea:	41411010 41414141 01010101 01010101     ..AAAAAA........
   e05fa:	01010101 01010101 01010101 10101010     ................
   e060a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   e061a:	02020202 02020202 02020202 10101010     ................
   e062a:	00000020 00000000 00000000 00000000      ...............
	...

000e06ab <link_const_variable_data_end>:
	...

000e06ac <link_constructors_location>:
   e06ac:	000d4541 	.word	0x000d4541
   e06b0:	000d471d 	.word	0x000d471d
   e06b4:	000d529d 	.word	0x000d529d
   e06b8:	000d5719 	.word	0x000d5719
   e06bc:	000d5a91 	.word	0x000d5a91
   e06c0:	000d648d 	.word	0x000d648d
   e06c4:	000d8ae1 	.word	0x000d8ae1
   e06c8:	000d8f45 	.word	0x000d8f45
   e06cc:	000da685 	.word	0x000da685
   e06d0:	000dafd5 	.word	0x000dafd5
   e06d4:	000db0c1 	.word	0x000db0c1
   e06d8:	000db875 	.word	0x000db875
   e06dc:	000dcc5d 	.word	0x000dcc5d
   e06e0:	000dd0d1 	.word	0x000dd0d1
   e06e4:	000dd385 	.word	0x000dd385
   e06e8:	000dd92d 	.word	0x000dd92d
   e06ec:	000ddbb9 	.word	0x000ddbb9
