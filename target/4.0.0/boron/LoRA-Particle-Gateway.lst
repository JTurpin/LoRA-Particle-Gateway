
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000cbb0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c0bd0  000c0bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c0bf4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003dd00  000c0bf8  0002dd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008fc  2003def8  2003def8  0003def8  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c0dec  000c0dec  00030dec  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c0e18  000c0e18  00030e18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00287e8d  00000000  00000000  00030e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c60a  00000000  00000000  002b8ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00068a85  00000000  00000000  002e52b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004c60  00000000  00000000  0034dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011ba8  00000000  00000000  00352998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ec34  00000000  00000000  00364540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00092309  00000000  00000000  003c3174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c985  00000000  00000000  0045547d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000e484  00000000  00000000  005c1e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a fe13 	bl	bec5c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a fe35 	bl	becac <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd00 	.word	0x2003dd00
   b404c:	000c0bf8 	.word	0x000c0bf8
   b4050:	2003def4 	.word	0x2003def4
   b4054:	2003def8 	.word	0x2003def8
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f009 ff55 	bl	bdf10 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c0b84 	.word	0x000c0b84
   b4080:	000c0bc8 	.word	0x000c0bc8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b800 	b.w	b5088 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fcaf 	bl	b49ec <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f009 bef5 	b.w	bde80 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f006 beb9 	b.w	bae0c <malloc>

000b409a <_Znaj>:
   b409a:	f006 beb7 	b.w	bae0c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f006 bebd 	b.w	bae1c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f006 fd4a 	bl	bab44 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000ba6e5 	.word	0x000ba6e5
   b40b8:	000bf280 	.word	0x000bf280

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b500      	push	{lr}
   b40e0:	b08c      	sub	sp, #48	; 0x30
   b40e2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40e4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40e8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40ec:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ee:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40f2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40f4:	6801      	ldr	r1, [r0, #0]
   b40f6:	aa04      	add	r2, sp, #16
   b40f8:	201e      	movs	r0, #30
    attr.flags = 0;
   b40fa:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40fe:	f006 fd31 	bl	bab64 <log_message_v>
}
   b4102:	b00c      	add	sp, #48	; 0x30
   b4104:	f85d eb04 	ldr.w	lr, [sp], #4
   b4108:	b003      	add	sp, #12
   b410a:	4770      	bx	lr

000b410c <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b410c:	b510      	push	{r4, lr}
    if (!_instance) {
   b410e:	4c06      	ldr	r4, [pc, #24]	; (b4128 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4110:	6823      	ldr	r3, [r4, #0]
   b4112:	b933      	cbnz	r3, b4122 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4114:	2004      	movs	r0, #4
   b4116:	f7ff ffbe 	bl	b4096 <_Znwj>
   b411a:	b108      	cbz	r0, b4120 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b411c:	4b03      	ldr	r3, [pc, #12]	; (b412c <_ZN14LoRA_Functions8instanceEv+0x20>)
   b411e:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4120:	6020      	str	r0, [r4, #0]
}
   b4122:	6820      	ldr	r0, [r4, #0]
   b4124:	bd10      	pop	{r4, pc}
   b4126:	bf00      	nop
   b4128:	2003defc 	.word	0x2003defc
   b412c:	000bf558 	.word	0x000bf558

000b4130 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4132:	4830      	ldr	r0, [pc, #192]	; (b41f4 <_ZN14LoRA_Functions5setupEb+0xc4>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4134:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4136:	f005 f8a8 	bl	b928a <_ZN8RHRouter4initEv>
   b413a:	4604      	mov	r4, r0
   b413c:	b930      	cbnz	r0, b414c <_ZN14LoRA_Functions5setupEb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b413e:	492e      	ldr	r1, [pc, #184]	; (b41f8 <_ZN14LoRA_Functions5setupEb+0xc8>)
   b4140:	482e      	ldr	r0, [pc, #184]	; (b41fc <_ZN14LoRA_Functions5setupEb+0xcc>)
   b4142:	f7ff ffcb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
	
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
	return true;
}
   b4146:	4620      	mov	r0, r4
   b4148:	b004      	add	sp, #16
   b414a:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b414c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; b4200 <_ZN14LoRA_Functions5setupEb+0xd0>
   b4150:	482c      	ldr	r0, [pc, #176]	; (b4204 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b4152:	f005 fba5 	bl	b98a0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4156:	2200      	movs	r2, #0
   b4158:	2117      	movs	r1, #23
   b415a:	482a      	ldr	r0, [pc, #168]	; (b4204 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b415c:	f005 fd1a 	bl	b9b94 <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.get_structuresVersion() == 128)) {    	// This will be our indication that the deviceID and nodeID has not yet been set
   b4160:	f001 f936 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4164:	f001 fa7d 	bl	b5662 <_ZNK13sysStatusData21get_structuresVersionEv>
   b4168:	2880      	cmp	r0, #128	; 0x80
   b416a:	d022      	beq.n	b41b2 <_ZN14LoRA_Functions5setupEb+0x82>
		randomSeed(sysStatus.get_lastConnection());			// 32-bit number for seed
   b416c:	f001 f930 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4170:	f001 fb34 	bl	b57dc <_ZNK13sysStatusData18get_lastConnectionEv>
   b4174:	f009 f8e7 	bl	bd346 <_Z10randomSeedj>
		sysStatus.set_deviceID(random(1,65535));			// 16-bit number for deviceID
   b4178:	f001 f92a 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b417c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4180:	4606      	mov	r6, r0
   b4182:	2001      	movs	r0, #1
   b4184:	f009 f8d5 	bl	bd332 <_Z6randomii>
   b4188:	b281      	uxth	r1, r0
   b418a:	4630      	mov	r0, r6
   b418c:	f001 fa27 	bl	b55de <_ZN13sysStatusData12set_deviceIDEt>
		if (!gatewayID) sysStatus.set_nodeNumber(random(10,255));		// Random number in - unconfigured - range will trigger a Join request
   b4190:	bb65      	cbnz	r5, b41ec <_ZN14LoRA_Functions5setupEb+0xbc>
   b4192:	f001 f91d 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4196:	21ff      	movs	r1, #255	; 0xff
   b4198:	4605      	mov	r5, r0
   b419a:	200a      	movs	r0, #10
   b419c:	f009 f8c9 	bl	bd332 <_Z6randomii>
   b41a0:	b281      	uxth	r1, r0
   b41a2:	4628      	mov	r0, r5
		else sysStatus.set_nodeNumber(0);
   b41a4:	f001 fa21 	bl	b55ea <_ZN13sysStatusData14set_nodeNumberEt>
		sysStatus.set_structuresVersion(128);			// Set the structure to the magic number so we can have a stable deviceID
   b41a8:	f001 f912 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b41ac:	2180      	movs	r1, #128	; 0x80
   b41ae:	f001 fa8f 	bl	b56d0 <_ZN13sysStatusData21set_structuresVersionEh>
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
   b41b2:	f001 f90d 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b41b6:	f001 f9d1 	bl	b555c <_ZNK13sysStatusData14get_nodeNumberEv>
   b41ba:	b2c1      	uxtb	r1, r0
   b41bc:	4812      	ldr	r0, [pc, #72]	; (b4208 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b41be:	f004 fb7e 	bl	b88be <_ZN10RHDatagram14setThisAddressEh>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
   b41c2:	4811      	ldr	r0, [pc, #68]	; (b4208 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b41c4:	f004 fb61 	bl	b888a <_ZN10RHDatagram11thisAddressEv>
   b41c8:	9003      	str	r0, [sp, #12]
   b41ca:	f001 f901 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b41ce:	f001 f9c0 	bl	b5552 <_ZNK13sysStatusData12get_deviceIDEv>
   b41d2:	9002      	str	r0, [sp, #8]
   b41d4:	f001 f8fc 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b41d8:	f001 fa43 	bl	b5662 <_ZNK13sysStatusData21get_structuresVersionEv>
   b41dc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b41e0:	9000      	str	r0, [sp, #0]
   b41e2:	490a      	ldr	r1, [pc, #40]	; (b420c <_ZN14LoRA_Functions5setupEb+0xdc>)
   b41e4:	4805      	ldr	r0, [pc, #20]	; (b41fc <_ZN14LoRA_Functions5setupEb+0xcc>)
   b41e6:	f7ff ff79 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	return true;
   b41ea:	e7ac      	b.n	b4146 <_ZN14LoRA_Functions5setupEb+0x16>
		else sysStatus.set_nodeNumber(0);
   b41ec:	f001 f8f0 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b41f0:	2100      	movs	r1, #0
   b41f2:	e7d7      	b.n	b41a4 <_ZN14LoRA_Functions5setupEb+0x74>
   b41f4:	2003e0b4 	.word	0x2003e0b4
   b41f8:	000bf295 	.word	0x000bf295
   b41fc:	2003e658 	.word	0x2003e658
   b4200:	4464c000 	.word	0x4464c000
   b4204:	2003df84 	.word	0x2003df84
   b4208:	2003e0b8 	.word	0x2003e0b8
   b420c:	000bf2a1 	.word	0x000bf2a1

000b4210 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4210:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b4212:	4c06      	ldr	r4, [pc, #24]	; (b422c <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b4214:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b4216:	f10d 0203 	add.w	r2, sp, #3
   b421a:	a901      	add	r1, sp, #4
   b421c:	4620      	mov	r0, r4
   b421e:	f005 fad5 	bl	b97cc <_ZN7RH_RF954recvEPhS0_>
   b4222:	2800      	cmp	r0, #0
   b4224:	d1f7      	bne.n	b4216 <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b4226:	b040      	add	sp, #256	; 0x100
   b4228:	bd10      	pop	{r4, pc}
   b422a:	bf00      	nop
   b422c:	2003df84 	.word	0x2003df84

000b4230 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4230:	4801      	ldr	r0, [pc, #4]	; (b4238 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b4232:	f005 ba94 	b.w	b975e <_ZN7RH_RF955sleepEv>
   b4236:	bf00      	nop
   b4238:	2003df84 	.word	0x2003df84

000b423c <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {
   b423c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[5] << 8 | buf[6]);
   b423e:	4c24      	ldr	r4, [pc, #144]	; (b42d0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x94>)
   b4240:	f001 f916 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4244:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b4248:	ba49      	rev16	r1, r1
   b424a:	b289      	uxth	r1, r1
   b424c:	f001 f9eb 	bl	b5626 <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[7] << 8 | buf[8]);
   b4250:	f001 f90e 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4254:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   b4258:	ba49      	rev16	r1, r1
   b425a:	b289      	uxth	r1, r1
   b425c:	f001 f9e9 	bl	b5632 <_ZN17currentStatusData14set_dailyCountEt>
	current.set_stateOfCharge(buf[10]);
   b4260:	f001 f906 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4264:	4605      	mov	r5, r0
   b4266:	7aa0      	ldrb	r0, [r4, #10]
   b4268:	f00a f934 	bl	be4d4 <__aeabi_ui2d>
   b426c:	ec41 0b10 	vmov	d0, r0, r1
   b4270:	4628      	mov	r0, r5
   b4272:	f001 f939 	bl	b54e8 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[11]);
   b4276:	f001 f8fb 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b427a:	7ae1      	ldrb	r1, [r4, #11]
   b427c:	f001 fa34 	bl	b56e8 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_internalTempC(buf[9]);
   b4280:	f001 f8f6 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4284:	7a61      	ldrb	r1, [r4, #9]
   b4286:	f001 fa29 	bl	b56dc <_ZN17currentStatusData17set_internalTempCEh>
	current.set_RSSI((buf[14] << 8 | buf[15]) - 65535);
   b428a:	f001 f8f1 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b428e:	89e1      	ldrh	r1, [r4, #14]
   b4290:	ba49      	rev16	r1, r1
   b4292:	3101      	adds	r1, #1
   b4294:	b289      	uxth	r1, r1
   b4296:	f001 f9c0 	bl	b561a <_ZN17currentStatusData8set_RSSIEt>
	current.set_messageNumber(buf[16]);
   b429a:	f001 f8e9 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b429e:	7c21      	ldrb	r1, [r4, #16]
   b42a0:	f001 fa28 	bl	b56f4 <_ZN17currentStatusData17set_messageNumberEh>
	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b42a4:	f001 f8e4 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b42a8:	f001 f9ef 	bl	b568a <_ZNK17currentStatusData17get_messageNumberEv>
   b42ac:	9001      	str	r0, [sp, #4]
   b42ae:	f001 f8df 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b42b2:	f001 f962 	bl	b557a <_ZNK17currentStatusData14get_nodeNumberEv>
   b42b6:	9a01      	ldr	r2, [sp, #4]
   b42b8:	4906      	ldr	r1, [pc, #24]	; (b42d4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x98>)
   b42ba:	4603      	mov	r3, r0
   b42bc:	4806      	ldr	r0, [pc, #24]	; (b42d8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x9c>)
   b42be:	f7ff ff0d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b42c2:	4b06      	ldr	r3, [pc, #24]	; (b42dc <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xa0>)
   b42c4:	2204      	movs	r2, #4

	return true;
}
   b42c6:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b42c8:	701a      	strb	r2, [r3, #0]
}
   b42ca:	b003      	add	sp, #12
   b42cc:	bd30      	pop	{r4, r5, pc}
   b42ce:	bf00      	nop
   b42d0:	2003df08 	.word	0x2003df08
   b42d4:	000bf2f8 	.word	0x000bf2f8
   b42d8:	2003e658 	.word	0x2003e658
   b42dc:	2003def8 	.word	0x2003def8

000b42e0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:

bool LoRA_Functions::acknowledgeDataReportGateway() {
   b42e0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	static int success = 0;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	attempts++;
   b42e4:	4d48      	ldr	r5, [pc, #288]	; (b4408 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x128>)
     
	buf[0] = current.get_messageNumber();			 		// Message number
   b42e6:	4c49      	ldr	r4, [pc, #292]	; (b440c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x12c>)
	attempts++;
   b42e8:	682b      	ldr	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() {
   b42ea:	b088      	sub	sp, #32
	attempts++;
   b42ec:	3301      	adds	r3, #1
   b42ee:	602b      	str	r3, [r5, #0]
	buf[0] = current.get_messageNumber();			 		// Message number
   b42f0:	f001 f8be 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b42f4:	f001 f9c9 	bl	b568a <_ZNK17currentStatusData17get_messageNumberEv>
   b42f8:	7020      	strb	r0, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b42fa:	f009 fc92 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b42fe:	1600      	asrs	r0, r0, #24
   b4300:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4302:	f009 fc8e 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4306:	1400      	asrs	r0, r0, #16
   b4308:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b430a:	f009 fc8a 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b430e:	1200      	asrs	r0, r0, #8
   b4310:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    	// First byte			
   b4312:	f009 fc86 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4316:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b4318:	f001 f85a 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b431c:	f001 f923 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4320:	0a00      	lsrs	r0, r0, #8
   b4322:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());	
   b4324:	f001 f854 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4328:	f001 f91d 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b432c:	71a0      	strb	r0, [r4, #6]
	
	Log.info("Sent response to client message %d, time = %s and frequency %d minutes", buf[0], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b432e:	7826      	ldrb	r6, [r4, #0]
   b4330:	f009 fc77 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4334:	4602      	mov	r2, r0
   b4336:	17c3      	asrs	r3, r0, #31
   b4338:	a804      	add	r0, sp, #16
   b433a:	f009 fb6d 	bl	bda18 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b433e:	9b04      	ldr	r3, [sp, #16]
   b4340:	9303      	str	r3, [sp, #12]
   b4342:	f001 f845 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4346:	f001 f90e 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b434a:	4632      	mov	r2, r6
   b434c:	9b03      	ldr	r3, [sp, #12]
   b434e:	4930      	ldr	r1, [pc, #192]	; (b4410 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x130>)
   b4350:	9000      	str	r0, [sp, #0]
   b4352:	4830      	ldr	r0, [pc, #192]	; (b4414 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x134>)
   b4354:	f7ff fec2 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4358:	a804      	add	r0, sp, #16
   b435a:	f009 f8c3 	bl	bd4e4 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b435e:	4b2e      	ldr	r3, [pc, #184]	; (b4418 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x138>)
   b4360:	881e      	ldrh	r6, [r3, #0]
   b4362:	2101      	movs	r1, #1
   b4364:	4630      	mov	r0, r6
   b4366:	f009 fe6c 	bl	be042 <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b436a:	f001 f881 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b436e:	f001 f904 	bl	b557a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4372:	2304      	movs	r3, #4
   b4374:	9300      	str	r3, [sp, #0]
   b4376:	4621      	mov	r1, r4
   b4378:	b2c3      	uxtb	r3, r0
   b437a:	2209      	movs	r2, #9
   b437c:	4827      	ldr	r0, [pc, #156]	; (b441c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x13c>)
   b437e:	f004 fd3f 	bl	b8e00 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4382:	4b27      	ldr	r3, [pc, #156]	; (b4420 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b4384:	4604      	mov	r4, r0
		success++;
   b4386:	6818      	ldr	r0, [r3, #0]
	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4388:	bb04      	cbnz	r4, b43cc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xec>
		success++;
   b438a:	3001      	adds	r0, #1
   b438c:	6018      	str	r0, [r3, #0]
		Log.info("Response received successfully - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b438e:	f00a f8b1 	bl	be4f4 <__aeabi_i2d>
   b4392:	4680      	mov	r8, r0
   b4394:	6828      	ldr	r0, [r5, #0]
   b4396:	4689      	mov	r9, r1
   b4398:	f00a f8ac 	bl	be4f4 <__aeabi_i2d>
   b439c:	4602      	mov	r2, r0
   b439e:	460b      	mov	r3, r1
   b43a0:	4640      	mov	r0, r8
   b43a2:	4649      	mov	r1, r9
   b43a4:	f00a fa3a 	bl	be81c <__aeabi_ddiv>
   b43a8:	4b1e      	ldr	r3, [pc, #120]	; (b4424 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>)
   b43aa:	2200      	movs	r2, #0
   b43ac:	f00a f90c 	bl	be5c8 <__aeabi_dmul>
   b43b0:	4602      	mov	r2, r0
   b43b2:	460b      	mov	r3, r1
   b43b4:	4817      	ldr	r0, [pc, #92]	; (b4414 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x134>)
   b43b6:	491c      	ldr	r1, [pc, #112]	; (b4428 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x148>)
   b43b8:	f7ff fe90 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b43bc:	4630      	mov	r0, r6
   b43be:	4621      	mov	r1, r4
   b43c0:	f009 fe3f 	bl	be042 <digitalWrite>
		return true;
   b43c4:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b43c6:	b008      	add	sp, #32
   b43c8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b43cc:	f00a f892 	bl	be4f4 <__aeabi_i2d>
   b43d0:	4680      	mov	r8, r0
   b43d2:	6828      	ldr	r0, [r5, #0]
   b43d4:	4689      	mov	r9, r1
   b43d6:	f00a f88d 	bl	be4f4 <__aeabi_i2d>
   b43da:	4602      	mov	r2, r0
   b43dc:	460b      	mov	r3, r1
   b43de:	4640      	mov	r0, r8
   b43e0:	4649      	mov	r1, r9
   b43e2:	f00a fa1b 	bl	be81c <__aeabi_ddiv>
   b43e6:	4b0f      	ldr	r3, [pc, #60]	; (b4424 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>)
   b43e8:	2200      	movs	r2, #0
   b43ea:	f00a f8ed 	bl	be5c8 <__aeabi_dmul>
   b43ee:	4602      	mov	r2, r0
   b43f0:	460b      	mov	r3, r1
   b43f2:	4808      	ldr	r0, [pc, #32]	; (b4414 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x134>)
   b43f4:	490d      	ldr	r1, [pc, #52]	; (b442c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x14c>)
   b43f6:	f7ff fe71 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b43fa:	4630      	mov	r0, r6
   b43fc:	2100      	movs	r1, #0
   b43fe:	f009 fe20 	bl	be042 <digitalWrite>
	return false;
   b4402:	2000      	movs	r0, #0
   b4404:	e7df      	b.n	b43c6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xe6>
   b4406:	bf00      	nop
   b4408:	2003df04 	.word	0x2003df04
   b440c:	2003df08 	.word	0x2003df08
   b4410:	000bf31f 	.word	0x000bf31f
   b4414:	2003e658 	.word	0x2003e658
   b4418:	000bf870 	.word	0x000bf870
   b441c:	2003e0b4 	.word	0x2003e0b4
   b4420:	2003df00 	.word	0x2003df00
   b4424:	40590000 	.word	0x40590000
   b4428:	000bf366 	.word	0x000bf366
   b442c:	000bf39a 	.word	0x000bf39a

000b4430 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
	lora_state = JOIN_ACK;			// Prepare to respond

	return true;
}

bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b4430:	b530      	push	{r4, r5, lr}
   b4432:	b089      	sub	sp, #36	; 0x24
	uint16_t newNodeNumber = 0;

	if (current.get_nodeNumber() < 10) {							// Device needs a new node number
   b4434:	f001 f81c 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4438:	f001 f89f 	bl	b557a <_ZNK17currentStatusData14get_nodeNumberEv>
   b443c:	2809      	cmp	r0, #9
   b443e:	d860      	bhi.n	b4502 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xd2>
		randomSeed(sysStatus.get_lastHookResponse());
   b4440:	f000 ffc6 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4444:	f001 f9c5 	bl	b57d2 <_ZNK13sysStatusData20get_lastHookResponseEv>
   b4448:	f008 ff7d 	bl	bd346 <_Z10randomSeedj>
		newNodeNumber = random(10,255);
   b444c:	21ff      	movs	r1, #255	; 0xff
   b444e:	200a      	movs	r0, #10
   b4450:	f008 ff6f 	bl	bd332 <_Z6randomii>
   b4454:	b285      	uxth	r5, r0
	}

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = 128;								// Magic number - so you can trust me
   b4456:	4c31      	ldr	r4, [pc, #196]	; (b451c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xec>)
   b4458:	2380      	movs	r3, #128	; 0x80
   b445a:	7023      	strb	r3, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b445c:	f009 fbe1 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4460:	1600      	asrs	r0, r0, #24
   b4462:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b4464:	f009 fbdd 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4468:	1400      	asrs	r0, r0, #16
   b446a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b446c:	f009 fbd9 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4470:	1200      	asrs	r0, r0, #8
   b4472:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte		
   b4474:	f009 fbd5 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4478:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b447a:	f000 ffa9 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b447e:	f001 f872 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4482:	0a00      	lsrs	r0, r0, #8
   b4484:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());	
   b4486:	f000 ffa3 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b448a:	f001 f86c 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[7] = highByte(newNodeNumber);			// New Node Number for device
   b448e:	0a2b      	lsrs	r3, r5, #8
   b4490:	71e3      	strb	r3, [r4, #7]
	buf[8] = lowByte(newNodeNumber);	
   b4492:	7225      	strb	r5, [r4, #8]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());	
   b4494:	71a0      	strb	r0, [r4, #6]
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b4496:	f009 fbc4 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b449a:	4602      	mov	r2, r0
   b449c:	17c3      	asrs	r3, r0, #31
   b449e:	a804      	add	r0, sp, #16
   b44a0:	f009 faba 	bl	bda18 <_ZN9TimeClass7timeStrEx>
   b44a4:	9b04      	ldr	r3, [sp, #16]
   b44a6:	9303      	str	r3, [sp, #12]
	
	Log.info("Sent response to Node %d, time = %s and frequency %d minutes", newNodeNumber, Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b44a8:	f000 ff92 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b44ac:	f001 f85b 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44b0:	462a      	mov	r2, r5
   b44b2:	9b03      	ldr	r3, [sp, #12]
   b44b4:	491a      	ldr	r1, [pc, #104]	; (b4520 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf0>)
   b44b6:	9000      	str	r0, [sp, #0]
   b44b8:	481a      	ldr	r0, [pc, #104]	; (b4524 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf4>)
   b44ba:	f7ff fe0f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b44be:	a804      	add	r0, sp, #16
   b44c0:	f009 f810 	bl	bd4e4 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b44c4:	4b18      	ldr	r3, [pc, #96]	; (b4528 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf8>)
   b44c6:	881d      	ldrh	r5, [r3, #0]
   b44c8:	2101      	movs	r1, #1
   b44ca:	4628      	mov	r0, r5
   b44cc:	f009 fdb9 	bl	be042 <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b44d0:	f000 ffce 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b44d4:	f001 f851 	bl	b557a <_ZNK17currentStatusData14get_nodeNumberEv>
   b44d8:	2302      	movs	r3, #2
   b44da:	9300      	str	r3, [sp, #0]
   b44dc:	4621      	mov	r1, r4
   b44de:	b2c3      	uxtb	r3, r0
   b44e0:	2209      	movs	r2, #9
   b44e2:	4812      	ldr	r0, [pc, #72]	; (b452c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xfc>)
   b44e4:	f004 fc8c 	bl	b8e00 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b44e8:	4604      	mov	r4, r0
   b44ea:	b960      	cbnz	r0, b4506 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xd6>
		Log.info("Response received successfully");
   b44ec:	4910      	ldr	r1, [pc, #64]	; (b4530 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x100>)
   b44ee:	480d      	ldr	r0, [pc, #52]	; (b4524 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf4>)
   b44f0:	f7ff fdf4 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b44f4:	4628      	mov	r0, r5
   b44f6:	4621      	mov	r1, r4
   b44f8:	f009 fda3 	bl	be042 <digitalWrite>
		return true;
   b44fc:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b44fe:	b009      	add	sp, #36	; 0x24
   b4500:	bd30      	pop	{r4, r5, pc}
	uint16_t newNodeNumber = 0;
   b4502:	2500      	movs	r5, #0
   b4504:	e7a7      	b.n	b4456 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x26>
	Log.info("Response not acknowledged");
   b4506:	490b      	ldr	r1, [pc, #44]	; (b4534 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x104>)
   b4508:	4806      	ldr	r0, [pc, #24]	; (b4524 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf4>)
   b450a:	f7ff fde7 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b450e:	4628      	mov	r0, r5
   b4510:	2100      	movs	r1, #0
   b4512:	f009 fd96 	bl	be042 <digitalWrite>
	return false;
   b4516:	2000      	movs	r0, #0
   b4518:	e7f1      	b.n	b44fe <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xce>
   b451a:	bf00      	nop
   b451c:	2003df08 	.word	0x2003df08
   b4520:	000bf3c9 	.word	0x000bf3c9
   b4524:	2003e658 	.word	0x2003e658
   b4528:	000bf870 	.word	0x000bf870
   b452c:	2003e0b4 	.word	0x2003e0b4
   b4530:	000bf406 	.word	0x000bf406
   b4534:	000bf425 	.word	0x000bf425

000b4538 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:


bool LoRA_Functions::decipherAlertReportGateway() {
   b4538:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[0]);
   b453a:	4c12      	ldr	r4, [pc, #72]	; (b4584 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x4c>)
   b453c:	f000 ff98 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4540:	7821      	ldrb	r1, [r4, #0]
   b4542:	f001 f8dd 	bl	b5700 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]);
   b4546:	f000 ff93 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b454a:	f8d4 2001 	ldr.w	r2, [r4, #1]
   b454e:	ba12      	rev	r2, r2
   b4550:	17d3      	asrs	r3, r2, #31
   b4552:	f001 f971 	bl	b5838 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI((buf[5] << 8 | buf[6]) - 65535);
   b4556:	f000 ff8b 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b455a:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b455e:	ba49      	rev16	r1, r1
   b4560:	3101      	adds	r1, #1
   b4562:	b289      	uxth	r1, r1
   b4564:	f001 f859 	bl	b561a <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b4568:	f000 ff82 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b456c:	f001 f805 	bl	b557a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4570:	4905      	ldr	r1, [pc, #20]	; (b4588 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x50>)
   b4572:	4602      	mov	r2, r0
   b4574:	4805      	ldr	r0, [pc, #20]	; (b458c <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b4576:	f7ff fdb1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b457a:	4b05      	ldr	r3, [pc, #20]	; (b4590 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b457c:	2206      	movs	r2, #6
   b457e:	701a      	strb	r2, [r3, #0]

	return true;
}
   b4580:	2001      	movs	r0, #1
   b4582:	bd10      	pop	{r4, pc}
   b4584:	2003df08 	.word	0x2003df08
   b4588:	000bf43f 	.word	0x000bf43f
   b458c:	2003e658 	.word	0x2003e658
   b4590:	2003def8 	.word	0x2003def8

000b4594 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:

bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b4594:	b570      	push	{r4, r5, r6, lr}
	// uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = 0;									// Reserved
   b4596:	4c2f      	ldr	r4, [pc, #188]	; (b4654 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc0>)
   b4598:	2500      	movs	r5, #0
bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b459a:	b088      	sub	sp, #32
	buf[0] = 0;									// Reserved
   b459c:	7025      	strb	r5, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b459e:	f009 fb40 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b45a2:	1600      	asrs	r0, r0, #24
   b45a4:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b45a6:	f009 fb3c 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b45aa:	1400      	asrs	r0, r0, #16
   b45ac:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b45ae:	f009 fb38 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b45b2:	1200      	asrs	r0, r0, #8
   b45b4:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte	
   b45b6:	f009 fb34 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b45ba:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b45bc:	f000 ff08 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b45c0:	f000 ffd1 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b45c4:	0a00      	lsrs	r0, r0, #8
   b45c6:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());			
   b45c8:	f000 ff02 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b45cc:	f000 ffcb 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b45d0:	4b21      	ldr	r3, [pc, #132]	; (b4658 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc4>)
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());			
   b45d2:	71a0      	strb	r0, [r4, #6]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b45d4:	881e      	ldrh	r6, [r3, #0]
   b45d6:	2101      	movs	r1, #1
   b45d8:	4630      	mov	r0, r6
   b45da:	f009 fd32 	bl	be042 <digitalWrite>

	if (manager.sendtoWait(buf, 7, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b45de:	f000 ff47 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b45e2:	f000 ffca 	bl	b557a <_ZNK17currentStatusData14get_nodeNumberEv>
   b45e6:	2306      	movs	r3, #6
   b45e8:	9300      	str	r3, [sp, #0]
   b45ea:	4621      	mov	r1, r4
   b45ec:	b2c3      	uxtb	r3, r0
   b45ee:	2207      	movs	r2, #7
   b45f0:	481a      	ldr	r0, [pc, #104]	; (b465c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc8>)
   b45f2:	f004 fc05 	bl	b8e00 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b45f6:	4604      	mov	r4, r0
   b45f8:	bb10      	cbnz	r0, b4640 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xac>
		Log.info("Sent acknowledgment to Node %d, time = %s and frequency %d minutes", current.get_nodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b45fa:	f000 ff39 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b45fe:	f000 ffbc 	bl	b557a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4602:	4605      	mov	r5, r0
   b4604:	f009 fb0d 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4608:	4602      	mov	r2, r0
   b460a:	17c3      	asrs	r3, r0, #31
   b460c:	a804      	add	r0, sp, #16
   b460e:	f009 fa03 	bl	bda18 <_ZN9TimeClass7timeStrEx>
   b4612:	9b04      	ldr	r3, [sp, #16]
   b4614:	9303      	str	r3, [sp, #12]
   b4616:	f000 fedb 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b461a:	f000 ffa4 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b461e:	9b03      	ldr	r3, [sp, #12]
   b4620:	490f      	ldr	r1, [pc, #60]	; (b4660 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xcc>)
   b4622:	9000      	str	r0, [sp, #0]
   b4624:	462a      	mov	r2, r5
   b4626:	480f      	ldr	r0, [pc, #60]	; (b4664 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd0>)
   b4628:	f7ff fd58 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b462c:	a804      	add	r0, sp, #16
   b462e:	f008 ff59 	bl	bd4e4 <_ZN6StringD1Ev>
		digitalWrite(BLUE_LED,LOW);
   b4632:	4630      	mov	r0, r6
   b4634:	4621      	mov	r1, r4
   b4636:	f009 fd04 	bl	be042 <digitalWrite>
		return true;
   b463a:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b463c:	b008      	add	sp, #32
   b463e:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b4640:	4909      	ldr	r1, [pc, #36]	; (b4668 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd4>)
   b4642:	4808      	ldr	r0, [pc, #32]	; (b4664 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd0>)
   b4644:	f7ff fd4a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b4648:	4630      	mov	r0, r6
   b464a:	4629      	mov	r1, r5
   b464c:	f009 fcf9 	bl	be042 <digitalWrite>
	return false;
   b4650:	4628      	mov	r0, r5
   b4652:	e7f3      	b.n	b463c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xa8>
   b4654:	2003df08 	.word	0x2003df08
   b4658:	000bf870 	.word	0x000bf870
   b465c:	2003e0b4 	.word	0x2003e0b4
   b4660:	000bf464 	.word	0x000bf464
   b4664:	2003e658 	.word	0x2003e658
   b4668:	000bf425 	.word	0x000bf425

000b466c <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv>:
bool LoRA_Functions::respondForLoRAMessageGateway() {
   b466c:	b510      	push	{r4, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b466e:	4c13      	ldr	r4, [pc, #76]	; (b46bc <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x50>)
   b4670:	4b13      	ldr	r3, [pc, #76]	; (b46c0 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x54>)
   b4672:	7822      	ldrb	r2, [r4, #0]
   b4674:	4913      	ldr	r1, [pc, #76]	; (b46c4 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x58>)
   b4676:	4814      	ldr	r0, [pc, #80]	; (b46c8 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x5c>)
   b4678:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b467c:	f7ff fd2e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4680:	7823      	ldrb	r3, [r4, #0]
   b4682:	2b04      	cmp	r3, #4
   b4684:	d00c      	beq.n	b46a0 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x34>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b4686:	7823      	ldrb	r3, [r4, #0]
   b4688:	2b02      	cmp	r3, #2
   b468a:	d104      	bne.n	b4696 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x2a>
   b468c:	f7ff fd3e 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4690:	f7ff fece 	bl	b4430 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b4694:	b950      	cbnz	r0, b46ac <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x40>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4696:	7823      	ldrb	r3, [r4, #0]
   b4698:	2b06      	cmp	r3, #6
   b469a:	d009      	beq.n	b46b0 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x44>
	return false; 
   b469c:	2000      	movs	r0, #0
   b469e:	e006      	b.n	b46ae <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x42>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b46a0:	f7ff fd34 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b46a4:	f7ff fe1c 	bl	b42e0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b46a8:	2800      	cmp	r0, #0
   b46aa:	d0ec      	beq.n	b4686 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x1a>
   b46ac:	2001      	movs	r0, #1
}
   b46ae:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b46b0:	f7ff fd2c 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
}
   b46b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b46b8:	f7ff bf6c 	b.w	b4594 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b46bc:	2003def8 	.word	0x2003def8
   b46c0:	2003dd00 	.word	0x2003dd00
   b46c4:	000bf4a7 	.word	0x000bf4a7
   b46c8:	2003e658 	.word	0x2003e658

000b46cc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b46cc:	b570      	push	{r4, r5, r6, lr}
   b46ce:	b08a      	sub	sp, #40	; 0x28
	uint8_t len = sizeof(buf);
   b46d0:	2379      	movs	r3, #121	; 0x79
   b46d2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b46d6:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   b46da:	9303      	str	r3, [sp, #12]
   b46dc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   b46e0:	4c3e      	ldr	r4, [pc, #248]	; (b47dc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x110>)
   b46e2:	9302      	str	r3, [sp, #8]
   b46e4:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	ab09      	add	r3, sp, #36	; 0x24
   b46ec:	9300      	str	r3, [sp, #0]
   b46ee:	483c      	ldr	r0, [pc, #240]	; (b47e0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x114>)
   b46f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b46f4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b46f8:	4621      	mov	r1, r4
   b46fa:	f004 fbb5 	bl	b8e68 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b46fe:	b910      	cbnz	r0, b4706 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false; 
   b4700:	2000      	movs	r0, #0
}
   b4702:	b00a      	add	sp, #40	; 0x28
   b4704:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4706:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   b470a:	2200      	movs	r2, #0
   b470c:	54e2      	strb	r2, [r4, r3]
		current.set_deviceID(buf[0] << 8 | buf[1]);					// Set the current device ID for reporting
   b470e:	f000 feaf 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4712:	8821      	ldrh	r1, [r4, #0]
   b4714:	ba49      	rev16	r1, r1
   b4716:	b289      	uxth	r1, r1
   b4718:	f000 ff73 	bl	b5602 <_ZN17currentStatusData12set_deviceIDEt>
		current.set_nodeNumber(buf[2] << 8 | buf[3]);
   b471c:	f000 fea8 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4720:	8861      	ldrh	r1, [r4, #2]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4722:	4c30      	ldr	r4, [pc, #192]	; (b47e4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x118>)
		current.set_nodeNumber(buf[2] << 8 | buf[3]);
   b4724:	ba49      	rev16	r1, r1
   b4726:	b289      	uxth	r1, r1
   b4728:	f000 ff71 	bl	b560e <_ZN17currentStatusData14set_nodeNumberEt>
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b472c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b4730:	f003 030f 	and.w	r3, r3, #15
   b4734:	7023      	strb	r3, [r4, #0]
		Log.info("From node %d / id %d to %d with rssi=%d - a %s message of length %d in %d hops", current.get_nodeNumber(), id, dest, driver.lastRssi(), loraStateNames[lora_state], len, hops);
   b4736:	f000 fe9b 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b473a:	f000 ff1e 	bl	b557a <_ZNK17currentStatusData14get_nodeNumberEv>
   b473e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b4742:	9007      	str	r0, [sp, #28]
   b4744:	4828      	ldr	r0, [pc, #160]	; (b47e8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x11c>)
   b4746:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
   b474a:	9306      	str	r3, [sp, #24]
   b474c:	f004 f93d 	bl	b89ca <_ZN15RHGenericDriver8lastRssiEv>
   b4750:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   b4754:	9104      	str	r1, [sp, #16]
   b4756:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   b475a:	9103      	str	r1, [sp, #12]
   b475c:	7826      	ldrb	r6, [r4, #0]
   b475e:	4923      	ldr	r1, [pc, #140]	; (b47ec <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x120>)
   b4760:	9500      	str	r5, [sp, #0]
   b4762:	eb01 1106 	add.w	r1, r1, r6, lsl #4
   b4766:	e9cd 0101 	strd	r0, r1, [sp, #4]
   b476a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   b476e:	4920      	ldr	r1, [pc, #128]	; (b47f0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x124>)
   b4770:	4820      	ldr	r0, [pc, #128]	; (b47f4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x128>)
   b4772:	f7ff fcb3 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4776:	7823      	ldrb	r3, [r4, #0]
   b4778:	2b03      	cmp	r3, #3
   b477a:	d01f      	beq.n	b47bc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xf0>
		if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b477c:	7823      	ldrb	r3, [r4, #0]
   b477e:	2b01      	cmp	r3, #1
   b4780:	d123      	bne.n	b47ca <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xfe>
   b4782:	f7ff fcc3 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
	lora_state = JOIN_ACK;			// Prepare to respond
   b4786:	2302      	movs	r3, #2
   b4788:	7023      	strb	r3, [r4, #0]
		if (frequencyUpdated) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b478a:	4b1b      	ldr	r3, [pc, #108]	; (b47f8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x12c>)
   b478c:	781a      	ldrb	r2, [r3, #0]
   b478e:	b182      	cbz	r2, b47b2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xe6>
			frequencyUpdated = false;
   b4790:	2200      	movs	r2, #0
   b4792:	701a      	strb	r2, [r3, #0]
			sysStatus.set_frequencyMinutes(updatedFrequencyMins);		// This was the temporary value from the particle function
   b4794:	f000 fe1c 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4798:	4b18      	ldr	r3, [pc, #96]	; (b47fc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x130>)
   b479a:	8819      	ldrh	r1, [r3, #0]
   b479c:	f000 ff2b 	bl	b55f6 <_ZN13sysStatusData20set_frequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b47a0:	f000 fe16 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b47a4:	f000 fedf 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b47a8:	4915      	ldr	r1, [pc, #84]	; (b4800 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b47aa:	4602      	mov	r2, r0
   b47ac:	4811      	ldr	r0, [pc, #68]	; (b47f4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x128>)
   b47ae:	f7ff fc95 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondForLoRAMessageGateway()) return true;
   b47b2:	f7ff fcab 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b47b6:	f7ff ff59 	bl	b466c <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv>
   b47ba:	e7a2      	b.n	b4702 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b47bc:	f7ff fca6 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b47c0:	f7ff fd3c 	bl	b423c <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
   b47c4:	2800      	cmp	r0, #0
   b47c6:	d1d9      	bne.n	b477c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xb0>
   b47c8:	e79a      	b.n	b4700 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b47ca:	2b05      	cmp	r3, #5
   b47cc:	d1dd      	bne.n	b478a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xbe>
   b47ce:	f7ff fc9d 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b47d2:	f7ff feb1 	bl	b4538 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b47d6:	2800      	cmp	r0, #0
   b47d8:	d1d7      	bne.n	b478a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xbe>
   b47da:	e791      	b.n	b4700 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
   b47dc:	2003df08 	.word	0x2003df08
   b47e0:	2003e0b4 	.word	0x2003e0b4
   b47e4:	2003def8 	.word	0x2003def8
   b47e8:	2003df84 	.word	0x2003df84
   b47ec:	2003dd00 	.word	0x2003dd00
   b47f0:	000bf4cc 	.word	0x000bf4cc
   b47f4:	2003e658 	.word	0x2003e658
   b47f8:	2003e409 	.word	0x2003e409
   b47fc:	2003de0c 	.word	0x2003de0c
   b4800:	000bf51b 	.word	0x000bf51b

000b4804 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4804:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4806:	4a08      	ldr	r2, [pc, #32]	; (b4828 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b4808:	4c08      	ldr	r4, [pc, #32]	; (b482c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b480a:	4909      	ldr	r1, [pc, #36]	; (b4830 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b480c:	7812      	ldrb	r2, [r2, #0]
   b480e:	7809      	ldrb	r1, [r1, #0]
   b4810:	4b08      	ldr	r3, [pc, #32]	; (b4834 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b4812:	4620      	mov	r0, r4
   b4814:	f005 f804 	bl	b9820 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4818:	4621      	mov	r1, r4
   b481a:	4807      	ldr	r0, [pc, #28]	; (b4838 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b481c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4820:	2200      	movs	r2, #0
   b4822:	f004 bae3 	b.w	b8dec <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4826:	bf00      	nop
   b4828:	000bf876 	.word	0x000bf876
   b482c:	2003df84 	.word	0x2003df84
   b4830:	000bf874 	.word	0x000bf874
   b4834:	2003e45c 	.word	0x2003e45c
   b4838:	2003e0b4 	.word	0x2003e0b4

000b483c <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b483c:	4b01      	ldr	r3, [pc, #4]	; (b4844 <_Z18outOfMemoryHandleryi+0x8>)
   b483e:	601a      	str	r2, [r3, #0]
}
   b4840:	4770      	bx	lr
   b4842:	bf00      	nop
   b4844:	2003dd78 	.word	0x2003dd78

000b4848 <_Z13userSwitchISRv>:

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b4848:	4b01      	ldr	r3, [pc, #4]	; (b4850 <_Z13userSwitchISRv+0x8>)
   b484a:	2201      	movs	r2, #1
   b484c:	701a      	strb	r2, [r3, #0]
}
   b484e:	4770      	bx	lr
   b4850:	2003e3e2 	.word	0x2003e3e2

000b4854 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4854:	b530      	push	{r4, r5, lr}
   b4856:	b085      	sub	sp, #20
   b4858:	4604      	mov	r4, r0
   b485a:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b485c:	b160      	cbz	r0, b4878 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b485e:	6840      	ldr	r0, [r0, #4]
   b4860:	b150      	cbz	r0, b4878 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4862:	6885      	ldr	r5, [r0, #8]
   b4864:	b145      	cbz	r5, b4878 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4866:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b486a:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b486e:	68c4      	ldr	r4, [r0, #12]
   b4870:	ab01      	add	r3, sp, #4
   b4872:	466a      	mov	r2, sp
   b4874:	a902      	add	r1, sp, #8
   b4876:	47a0      	blx	r4
    }
   b4878:	b005      	add	sp, #20
   b487a:	bd30      	pop	{r4, r5, pc}

000b487c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b487c:	b530      	push	{r4, r5, lr}
   b487e:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4880:	6800      	ldr	r0, [r0, #0]
   b4882:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4884:	9301      	str	r3, [sp, #4]
   b4886:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b488a:	6883      	ldr	r3, [r0, #8]
   b488c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4890:	b90b      	cbnz	r3, b4896 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b4892:	f009 fcd9 	bl	be248 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4896:	68c3      	ldr	r3, [r0, #12]
   b4898:	aa01      	add	r2, sp, #4
   b489a:	a902      	add	r1, sp, #8
   b489c:	4798      	blx	r3
      }
   b489e:	b005      	add	sp, #20
   b48a0:	bd30      	pop	{r4, r5, pc}

000b48a2 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b48a2:	2a01      	cmp	r2, #1
   b48a4:	d102      	bne.n	b48ac <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b48a6:	6001      	str	r1, [r0, #0]
      }
   b48a8:	2000      	movs	r0, #0
   b48aa:	4770      	bx	lr
	  switch (__op)
   b48ac:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b48ae:	bf04      	itt	eq
   b48b0:	680b      	ldreq	r3, [r1, #0]
   b48b2:	6003      	streq	r3, [r0, #0]
	      break;
   b48b4:	e7f8      	b.n	b48a8 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b48b6 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b48b6:	6803      	ldr	r3, [r0, #0]
   b48b8:	6812      	ldr	r2, [r2, #0]
   b48ba:	e9d1 0100 	ldrd	r0, r1, [r1]
   b48be:	4718      	bx	r3

000b48c0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b48c0:	b510      	push	{r4, lr}
      if (_M_manager)
   b48c2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b48c4:	4604      	mov	r4, r0
      if (_M_manager)
   b48c6:	b113      	cbz	r3, b48ce <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b48c8:	2203      	movs	r2, #3
   b48ca:	4601      	mov	r1, r0
   b48cc:	4798      	blx	r3
    }
   b48ce:	4620      	mov	r0, r4
   b48d0:	bd10      	pop	{r4, pc}

000b48d2 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b48d2:	b510      	push	{r4, lr}
            delete callableWrapper;
   b48d4:	4604      	mov	r4, r0
   b48d6:	b138      	cbz	r0, b48e8 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b48d8:	f7ff fff2 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   b48dc:	4620      	mov	r0, r4
   b48de:	2110      	movs	r1, #16
        };
   b48e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b48e4:	f7ff bbdb 	b.w	b409e <_ZdlPvj>
        };
   b48e8:	bd10      	pop	{r4, pc}
	...

000b48ec <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b48ec:	b530      	push	{r4, r5, lr}
   b48ee:	b085      	sub	sp, #20
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b48f0:	f000 fd6e 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b48f4:	f000 fe37 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b48f8:	4604      	mov	r4, r0
   	if (Time.isValid() && !testModeFlag) {
   b48fa:	f009 f975 	bl	bdbe8 <_ZN9TimeClass7isValidEv>
   b48fe:	b328      	cbz	r0, b494c <_Z21secondsUntilNextEventv+0x60>
   b4900:	4b13      	ldr	r3, [pc, #76]	; (b4950 <_Z21secondsUntilNextEventv+0x64>)
   b4902:	781b      	ldrb	r3, [r3, #0]
   b4904:	bb13      	cbnz	r3, b494c <_Z21secondsUntilNextEventv+0x60>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4906:	f009 f98c 	bl	bdc22 <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b490a:	253c      	movs	r5, #60	; 0x3c
   b490c:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b490e:	fbb0 f4f5 	udiv	r4, r0, r5
   b4912:	fb04 0015 	mls	r0, r4, r5, r0
   b4916:	1a2c      	subs	r4, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b4918:	2c09      	cmp	r4, #9
   b491a:	d915      	bls.n	b4948 <_Z21secondsUntilNextEventv+0x5c>
   b491c:	42ac      	cmp	r4, r5
   b491e:	bf28      	it	cs
   b4920:	462c      	movcs	r4, r5
   b4922:	f009 f97e 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4926:	4602      	mov	r2, r0
   b4928:	17c3      	asrs	r3, r0, #31
   b492a:	4668      	mov	r0, sp
   b492c:	f009 f874 	bl	bda18 <_ZN9TimeClass7timeStrEx>
        Log.info("Time: %s and next event is %lu seconds away", Time.timeStr().c_str(), secondsToReturn);
   b4930:	4808      	ldr	r0, [pc, #32]	; (b4954 <_Z21secondsUntilNextEventv+0x68>)
   b4932:	9a00      	ldr	r2, [sp, #0]
   b4934:	4908      	ldr	r1, [pc, #32]	; (b4958 <_Z21secondsUntilNextEventv+0x6c>)
   b4936:	4623      	mov	r3, r4
   b4938:	f7ff fbd0 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b493c:	4668      	mov	r0, sp
   b493e:	f008 fdd1 	bl	bd4e4 <_ZN6StringD1Ev>
    }
	return secondsToReturn;
}
   b4942:	4620      	mov	r0, r4
   b4944:	b005      	add	sp, #20
   b4946:	bd30      	pop	{r4, r5, pc}
   b4948:	240a      	movs	r4, #10
   b494a:	e7ea      	b.n	b4922 <_Z21secondsUntilNextEventv+0x36>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b494c:	240a      	movs	r4, #10
   b494e:	e7f8      	b.n	b4942 <_Z21secondsUntilNextEventv+0x56>
   b4950:	2003e3e1 	.word	0x2003e3e1
   b4954:	2003e658 	.word	0x2003e658
   b4958:	000bf560 	.word	0x000bf560

000b495c <_Z22publishStateTransitionv>:
{
   b495c:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b495e:	4e1c      	ldr	r6, [pc, #112]	; (b49d0 <_Z22publishStateTransitionv+0x74>)
   b4960:	4c1c      	ldr	r4, [pc, #112]	; (b49d4 <_Z22publishStateTransitionv+0x78>)
   b4962:	7832      	ldrb	r2, [r6, #0]
   b4964:	4d1c      	ldr	r5, [pc, #112]	; (b49d8 <_Z22publishStateTransitionv+0x7c>)
   b4966:	2a02      	cmp	r2, #2
{
   b4968:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b496a:	d128      	bne.n	b49be <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b496c:	f009 f93c 	bl	bdbe8 <_ZN9TimeClass7isValidEv>
   b4970:	7832      	ldrb	r2, [r6, #0]
   b4972:	782b      	ldrb	r3, [r5, #0]
   b4974:	b958      	cbnz	r0, b498e <_Z22publishStateTransitionv+0x32>
   b4976:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b497a:	9200      	str	r2, [sp, #0]
   b497c:	4a17      	ldr	r2, [pc, #92]	; (b49dc <_Z22publishStateTransitionv+0x80>)
   b497e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4982:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4986:	a804      	add	r0, sp, #16
   b4988:	f006 fa68 	bl	bae5c <snprintf>
   b498c:	e00f      	b.n	b49ae <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b498e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4992:	9303      	str	r3, [sp, #12]
   b4994:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b4998:	f7ff ffa8 	bl	b48ec <_Z21secondsUntilNextEventv>
   b499c:	9b03      	ldr	r3, [sp, #12]
   b499e:	4a10      	ldr	r2, [pc, #64]	; (b49e0 <_Z22publishStateTransitionv+0x84>)
   b49a0:	e9cd 4000 	strd	r4, r0, [sp]
   b49a4:	f44f 7180 	mov.w	r1, #256	; 0x100
   b49a8:	a804      	add	r0, sp, #16
   b49aa:	f006 fa57 	bl	bae5c <snprintf>
	oldState = state;
   b49ae:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b49b0:	480c      	ldr	r0, [pc, #48]	; (b49e4 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b49b2:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b49b4:	a904      	add	r1, sp, #16
   b49b6:	f7ff fb91 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
}
   b49ba:	b044      	add	sp, #272	; 0x110
   b49bc:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b49be:	782b      	ldrb	r3, [r5, #0]
   b49c0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b49c4:	9200      	str	r2, [sp, #0]
   b49c6:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b49ca:	4a07      	ldr	r2, [pc, #28]	; (b49e8 <_Z22publishStateTransitionv+0x8c>)
   b49cc:	e7d9      	b.n	b4982 <_Z22publishStateTransitionv+0x26>
   b49ce:	bf00      	nop
   b49d0:	2003e3e0 	.word	0x2003e3e0
   b49d4:	2003dd7c 	.word	0x2003dd7c
   b49d8:	2003e3a9 	.word	0x2003e3a9
   b49dc:	000bf58c 	.word	0x000bf58c
   b49e0:	000bf5ac 	.word	0x000bf5ac
   b49e4:	2003e658 	.word	0x2003e658
   b49e8:	000bf5c9 	.word	0x000bf5c9

000b49ec <loop>:
void loop() {
   b49ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b49f0:	4d9a      	ldr	r5, [pc, #616]	; (b4c5c <loop+0x270>)
void loop() {
   b49f2:	ed2d 8b02 	vpush	{d8}
   b49f6:	782b      	ldrb	r3, [r5, #0]
   b49f8:	3b01      	subs	r3, #1
   b49fa:	b0d1      	sub	sp, #324	; 0x144
   b49fc:	2b06      	cmp	r3, #6
   b49fe:	d817      	bhi.n	b4a30 <loop+0x44>
   b4a00:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4a04:	000701e7 	.word	0x000701e7
   b4a08:	00f10031 	.word	0x00f10031
   b4a0c:	01d101aa 	.word	0x01d101aa
   b4a10:	014c      	.short	0x014c
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4a12:	4b93      	ldr	r3, [pc, #588]	; (b4c60 <loop+0x274>)
   b4a14:	781b      	ldrb	r3, [r3, #0]
   b4a16:	2b02      	cmp	r3, #2
   b4a18:	d001      	beq.n	b4a1e <loop+0x32>
   b4a1a:	f7ff ff9f 	bl	b495c <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b4a1e:	4b91      	ldr	r3, [pc, #580]	; (b4c64 <loop+0x278>)
   b4a20:	781a      	ldrb	r2, [r3, #0]
   b4a22:	b11a      	cbz	r2, b4a2c <loop+0x40>
				nextEventTime = false;
   b4a24:	2200      	movs	r2, #0
   b4a26:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b4a28:	2304      	movs	r3, #4
   b4a2a:	e000      	b.n	b4a2e <loop+0x42>
			else state = SLEEPING_STATE;
   b4a2c:	2303      	movs	r3, #3
   b4a2e:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b4a30:	488d      	ldr	r0, [pc, #564]	; (b4c68 <loop+0x27c>)
   b4a32:	f002 f93b 	bl	b6cac <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b4a36:	f003 fa9b 	bl	b7f70 <_ZN17PublishQueuePosix8instanceEv>
   b4a3a:	f003 f98b 	bl	b7d54 <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b4a3e:	f000 fd17 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4a42:	f000 fd25 	bl	b5490 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4a46:	f000 fcc3 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4a4a:	f000 fce9 	bl	b5420 <_ZN13sysStatusData4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b4a4e:	4b87      	ldr	r3, [pc, #540]	; (b4c6c <loop+0x280>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	2b00      	cmp	r3, #0
   b4a54:	f2c0 81f1 	blt.w	b4e3a <loop+0x44e>
}
   b4a58:	b051      	add	sp, #324	; 0x144
   b4a5a:	ecbd 8b02 	vpop	{d8}
   b4a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b4a62:	f008 bef2 	b.w	bd84a <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4a66:	4b7e      	ldr	r3, [pc, #504]	; (b4c60 <loop+0x274>)
   b4a68:	781b      	ldrb	r3, [r3, #0]
   b4a6a:	2b03      	cmp	r3, #3
   b4a6c:	d001      	beq.n	b4a72 <loop+0x86>
   b4a6e:	f7ff ff75 	bl	b495c <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4a72:	2100      	movs	r1, #0
   b4a74:	487c      	ldr	r0, [pc, #496]	; (b4c68 <loop+0x27c>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4a76:	4c7e      	ldr	r4, [pc, #504]	; (b4c70 <loop+0x284>)
   b4a78:	f001 fd6c 	bl	b6554 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b4a7c:	f7ff ff36 	bl	b48ec <_Z21secondsUntilNextEventv>
   b4a80:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b4a82:	f009 f8ce 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4a86:	19c2      	adds	r2, r0, r7
   b4a88:	17d3      	asrs	r3, r2, #31
   b4a8a:	a810      	add	r0, sp, #64	; 0x40
   b4a8c:	f008 ffc4 	bl	bda18 <_ZN9TimeClass7timeStrEx>
   b4a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4a92:	930b      	str	r3, [sp, #44]	; 0x2c
   b4a94:	f008 ff3c 	bl	bd910 <_ZN11SystemClass10freeMemoryEv>
   b4a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4a9a:	4976      	ldr	r1, [pc, #472]	; (b4c74 <loop+0x288>)
   b4a9c:	9000      	str	r0, [sp, #0]
   b4a9e:	463a      	mov	r2, r7
   b4aa0:	4875      	ldr	r0, [pc, #468]	; (b4c78 <loop+0x28c>)
   b4aa2:	f7ff fb1b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4aa6:	a810      	add	r0, sp, #64	; 0x40
   b4aa8:	f008 fd1c 	bl	bd4e4 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b4aac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4ab0:	f006 fa2c 	bl	baf0c <delay>
   b4ab4:	7d23      	ldrb	r3, [r4, #20]
   b4ab6:	2b00      	cmp	r3, #0
   b4ab8:	d050      	beq.n	b4b5c <loop+0x170>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4aba:	2302      	movs	r3, #2
   b4abc:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b4abe:	4b6f      	ldr	r3, [pc, #444]	; (b4c7c <loop+0x290>)
   b4ac0:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4ac4:	6823      	ldr	r3, [r4, #0]
   b4ac6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4ac8:	b1f3      	cbz	r3, b4b08 <loop+0x11c>
            if (start->type == type) {
   b4aca:	889a      	ldrh	r2, [r3, #4]
   b4acc:	2a01      	cmp	r2, #1
   b4ace:	d006      	beq.n	b4ade <loop+0xf2>
            start = start->next;
   b4ad0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4ad2:	e7f9      	b.n	b4ac8 <loop+0xdc>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4ad4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4ad6:	b1bb      	cbz	r3, b4b08 <loop+0x11c>
            if (start->type == type) {
   b4ad8:	889a      	ldrh	r2, [r3, #4]
   b4ada:	2a01      	cmp	r2, #1
   b4adc:	d1fa      	bne.n	b4ad4 <loop+0xe8>
                if (gpioWakeup->pin == pin) {
   b4ade:	899a      	ldrh	r2, [r3, #12]
   b4ae0:	4542      	cmp	r2, r8
   b4ae2:	d1f7      	bne.n	b4ad4 <loop+0xe8>
                    gpioWakeup->mode = mode;
   b4ae4:	2200      	movs	r2, #0
   b4ae6:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4ae8:	7d23      	ldrb	r3, [r4, #20]
   b4aea:	2b00      	cmp	r3, #0
   b4aec:	d036      	beq.n	b4b5c <loop+0x170>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4aee:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b4af0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b4af4:	68db      	ldr	r3, [r3, #12]
   b4af6:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b4afa:	b1db      	cbz	r3, b4b34 <loop+0x148>
            if (start->type == type) {
   b4afc:	889a      	ldrh	r2, [r3, #4]
   b4afe:	2a04      	cmp	r2, #4
   b4b00:	f000 8196 	beq.w	b4e30 <loop+0x444>
            start = start->next;
   b4b04:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4b06:	e7f8      	b.n	b4afa <loop+0x10e>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4b08:	495d      	ldr	r1, [pc, #372]	; (b4c80 <loop+0x294>)
   b4b0a:	2010      	movs	r0, #16
   b4b0c:	f009 fb92 	bl	be234 <_ZnwjRKSt9nothrow_t>
   b4b10:	4606      	mov	r6, r0
   b4b12:	2800      	cmp	r0, #0
   b4b14:	f000 818f 	beq.w	b4e36 <loop+0x44a>
   b4b18:	2210      	movs	r2, #16
   b4b1a:	2100      	movs	r1, #0
   b4b1c:	f00a f8c6 	bl	becac <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4b20:	4b58      	ldr	r3, [pc, #352]	; (b4c84 <loop+0x298>)
   b4b22:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4b24:	2301      	movs	r3, #1
   b4b26:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4b28:	6923      	ldr	r3, [r4, #16]
   b4b2a:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b4b2c:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4b30:	6126      	str	r6, [r4, #16]
   b4b32:	e7d9      	b.n	b4ae8 <loop+0xfc>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4b34:	4952      	ldr	r1, [pc, #328]	; (b4c80 <loop+0x294>)
   b4b36:	2010      	movs	r0, #16
   b4b38:	f009 fb7c 	bl	be234 <_ZnwjRKSt9nothrow_t>
   b4b3c:	4606      	mov	r6, r0
   b4b3e:	2800      	cmp	r0, #0
   b4b40:	f000 8179 	beq.w	b4e36 <loop+0x44a>
   b4b44:	2210      	movs	r2, #16
   b4b46:	2100      	movs	r1, #0
   b4b48:	f00a f8b0 	bl	becac <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4b4c:	4b4d      	ldr	r3, [pc, #308]	; (b4c84 <loop+0x298>)
   b4b4e:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4b50:	2304      	movs	r3, #4
   b4b52:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4b54:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4b56:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b4b58:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b4b5c:	4944      	ldr	r1, [pc, #272]	; (b4c70 <loop+0x284>)
   b4b5e:	a80d      	add	r0, sp, #52	; 0x34
   b4b60:	f008 fe76 	bl	bd850 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4b68:	483f      	ldr	r0, [pc, #252]	; (b4c68 <loop+0x27c>)
   b4b6a:	f001 fcf3 	bl	b6554 <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b4b6e:	2000      	movs	r0, #0
   b4b70:	f005 fdd0 	bl	ba714 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4b74:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4b78:	4604      	mov	r4, r0
   b4b7a:	2000      	movs	r0, #0
   b4b7c:	f005 fdca 	bl	ba714 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4b80:	1b00      	subs	r0, r0, r4
   b4b82:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4b86:	42b0      	cmp	r0, r6
   b4b88:	f171 0300 	sbcs.w	r3, r1, #0
   b4b8c:	d207      	bcs.n	b4b9e <loop+0x1b2>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4b8e:	f009 f92f 	bl	bddf0 <_Z16_fetch_usbserialv>
   b4b92:	f009 f922 	bl	bddda <_ZN9USBSerial11isConnectedEv>
   b4b96:	b910      	cbnz	r0, b4b9e <loop+0x1b2>
            spark_process();
   b4b98:	f006 f890 	bl	bacbc <spark_process>
        while (_while() && !_condition()) {
   b4b9c:	e7ed      	b.n	b4b7a <loop+0x18e>
   b4b9e:	f009 f927 	bl	bddf0 <_Z16_fetch_usbserialv>
   b4ba2:	f009 f91a 	bl	bddda <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b4ba6:	2302      	movs	r3, #2
   b4ba8:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b4baa:	4b2e      	ldr	r3, [pc, #184]	; (b4c64 <loop+0x278>)
   b4bac:	2201      	movs	r2, #1
   b4bae:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b4bb0:	f009 f837 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4bb4:	19c2      	adds	r2, r0, r7
   b4bb6:	17d3      	asrs	r3, r2, #31
   b4bb8:	a810      	add	r0, sp, #64	; 0x40
   b4bba:	f008 ff2d 	bl	bda18 <_ZN9TimeClass7timeStrEx>
   b4bbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4bc0:	920b      	str	r2, [sp, #44]	; 0x2c
   b4bc2:	f008 fea5 	bl	bd910 <_ZN11SystemClass10freeMemoryEv>
   b4bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4bc8:	492f      	ldr	r1, [pc, #188]	; (b4c88 <loop+0x29c>)
   b4bca:	4603      	mov	r3, r0
   b4bcc:	482a      	ldr	r0, [pc, #168]	; (b4c78 <loop+0x28c>)
   b4bce:	f7ff fa85 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4bd2:	a810      	add	r0, sp, #64	; 0x40
   b4bd4:	f008 fc86 	bl	bd4e4 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b4bd8:	980d      	ldr	r0, [sp, #52]	; 0x34
   b4bda:	2800      	cmp	r0, #0
   b4bdc:	f43f af28 	beq.w	b4a30 <loop+0x44>
            free(wakeupSource_);
   b4be0:	f006 f91c 	bl	bae1c <free>
		} break;
   b4be4:	e724      	b.n	b4a30 <loop+0x44>
			if (state != oldState) {
   b4be6:	4b1e      	ldr	r3, [pc, #120]	; (b4c60 <loop+0x274>)
   b4be8:	781b      	ldrb	r3, [r3, #0]
   b4bea:	2b04      	cmp	r3, #4
   b4bec:	d00f      	beq.n	b4c0e <loop+0x222>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b4bee:	2b07      	cmp	r3, #7
   b4bf0:	d003      	beq.n	b4bfa <loop+0x20e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4bf2:	f005 fd7f 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
   b4bf6:	4b25      	ldr	r3, [pc, #148]	; (b4c8c <loop+0x2a0>)
   b4bf8:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4bfa:	f7ff feaf 	bl	b495c <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b4bfe:	f7ff fa85 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c02:	f7ff fb05 	bl	b4210 <_ZN14LoRA_Functions11clearBufferEv>
				Log.info("Gateway is listening for LoRA messages");
   b4c06:	4922      	ldr	r1, [pc, #136]	; (b4c90 <loop+0x2a4>)
   b4c08:	481b      	ldr	r0, [pc, #108]	; (b4c78 <loop+0x28c>)
   b4c0a:	f7ff fa67 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) state = REPORTING_STATE; // Received and acknowledged data from a node - report
   b4c0e:	f7ff fa7d 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c12:	f7ff fd5b 	bl	b46cc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b4c16:	b108      	cbz	r0, b4c1c <loop+0x230>
   b4c18:	2307      	movs	r3, #7
   b4c1a:	702b      	strb	r3, [r5, #0]
			if (!testModeFlag && ((millis() - startLoRAWindow) > 150000L)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b4c1c:	4b1d      	ldr	r3, [pc, #116]	; (b4c94 <loop+0x2a8>)
   b4c1e:	781b      	ldrb	r3, [r3, #0]
   b4c20:	2b00      	cmp	r3, #0
   b4c22:	f47f af05 	bne.w	b4a30 <loop+0x44>
   b4c26:	f005 fd65 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
   b4c2a:	4b18      	ldr	r3, [pc, #96]	; (b4c8c <loop+0x2a0>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	1ac0      	subs	r0, r0, r3
   b4c30:	4b19      	ldr	r3, [pc, #100]	; (b4c98 <loop+0x2ac>)
   b4c32:	4298      	cmp	r0, r3
   b4c34:	f67f aefc 	bls.w	b4a30 <loop+0x44>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b4c38:	f7ff fa68 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c3c:	f7ff faf8 	bl	b4230 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over
   b4c40:	f009 f800 	bl	bdc44 <_ZN9TimeClass4hourEv>
   b4c44:	4604      	mov	r4, r0
   b4c46:	f000 fbc3 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4c4a:	f000 fdc7 	bl	b57dc <_ZNK13sysStatusData18get_lastConnectionEv>
   b4c4e:	f008 fec7 	bl	bd9e0 <_ZN9TimeClass4hourEx>
   b4c52:	4284      	cmp	r4, r0
   b4c54:	f000 80bb 	beq.w	b4dce <loop+0x3e2>
   b4c58:	2305      	movs	r3, #5
   b4c5a:	e6e8      	b.n	b4a2e <loop+0x42>
   b4c5c:	2003e3e0 	.word	0x2003e3e0
   b4c60:	2003e3a9 	.word	0x2003e3a9
   b4c64:	2003e3a8 	.word	0x2003e3a8
   b4c68:	2003e27c 	.word	0x2003e27c
   b4c6c:	2003dd78 	.word	0x2003dd78
   b4c70:	2003e29c 	.word	0x2003e29c
   b4c74:	000bf5d7 	.word	0x000bf5d7
   b4c78:	2003e658 	.word	0x2003e658
   b4c7c:	000bf872 	.word	0x000bf872
   b4c80:	000c0960 	.word	0x000c0960
   b4c84:	00030010 	.word	0x00030010
   b4c88:	000bf617 	.word	0x000bf617
   b4c8c:	2003e270 	.word	0x2003e270
   b4c90:	000bf638 	.word	0x000bf638
   b4c94:	2003e3e1 	.word	0x2003e3e1
   b4c98:	000249f0 	.word	0x000249f0
			if (state != oldState) publishStateTransition();
   b4c9c:	4b69      	ldr	r3, [pc, #420]	; (b4e44 <loop+0x458>)
   b4c9e:	781b      	ldrb	r3, [r3, #0]
   b4ca0:	2b07      	cmp	r3, #7
   b4ca2:	d001      	beq.n	b4ca8 <loop+0x2bc>
   b4ca4:	f7ff fe5a 	bl	b495c <_Z22publishStateTransitionv>
				current.get_deviceID(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()], current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4ca8:	f000 fbe2 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4cac:	f000 fc60 	bl	b5570 <_ZNK17currentStatusData12get_deviceIDEv>
   b4cb0:	900b      	str	r0, [sp, #44]	; 0x2c
   b4cb2:	f000 fbdd 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4cb6:	f000 fc6a 	bl	b558e <_ZNK17currentStatusData15get_hourlyCountEv>
   b4cba:	4604      	mov	r4, r0
   b4cbc:	f000 fbd8 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4cc0:	f000 fc6a 	bl	b5598 <_ZNK17currentStatusData14get_dailyCountEv>
   b4cc4:	4606      	mov	r6, r0
   b4cc6:	f000 fbd3 	bl	b5470 <_ZN17currentStatusData8instanceEv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}", \
   b4cca:	f000 fbed 	bl	b54a8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4cce:	eeb0 8a40 	vmov.f32	s16, s0
   b4cd2:	eef0 8a60 	vmov.f32	s17, s1
				current.get_deviceID(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()], current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4cd6:	f000 fbcb 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4cda:	f000 fcd1 	bl	b5680 <_ZNK17currentStatusData16get_batteryStateEv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}", \
   b4cde:	4a5a      	ldr	r2, [pc, #360]	; (b4e48 <loop+0x45c>)
   b4ce0:	f852 b020 	ldr.w	fp, [r2, r0, lsl #2]
				current.get_deviceID(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()], current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4ce4:	f000 fbc4 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4ce8:	f000 fcc5 	bl	b5676 <_ZNK17currentStatusData17get_internalTempCEv>
   b4cec:	4607      	mov	r7, r0
   b4cee:	f000 fb6f 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4cf2:	f000 fcbb 	bl	b566c <_ZNK13sysStatusData14get_resetCountEv>
   b4cf6:	4680      	mov	r8, r0
   b4cf8:	f000 fbba 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4cfc:	f000 fc42 	bl	b5584 <_ZNK17currentStatusData8get_RSSIEv>
   b4d00:	4681      	mov	r9, r0
   b4d02:	f000 fbb5 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b4d06:	f000 fcc0 	bl	b568a <_ZNK17currentStatusData17get_messageNumberEv>
   b4d0a:	4682      	mov	sl, r0
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}", \
   b4d0c:	f008 ff89 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4d12:	4a4e      	ldr	r2, [pc, #312]	; (b4e4c <loop+0x460>)
   b4d14:	e9cd a008 	strd	sl, r0, [sp, #32]
   b4d18:	e9cd 4600 	strd	r4, r6, [sp]
   b4d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4d20:	e9cd 8906 	strd	r8, r9, [sp, #24]
   b4d24:	e9cd b704 	strd	fp, r7, [sp, #16]
   b4d28:	ed8d 8b02 	vstr	d8, [sp, #8]
   b4d2c:	a810      	add	r0, sp, #64	; 0x40
   b4d2e:	f006 f895 	bl	bae5c <snprintf>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   b4d32:	f003 f91d 	bl	b7f70 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4d36:	4b46      	ldr	r3, [pc, #280]	; (b4e50 <loop+0x464>)
   b4d38:	4a46      	ldr	r2, [pc, #280]	; (b4e54 <loop+0x468>)
   b4d3a:	781b      	ldrb	r3, [r3, #0]
   b4d3c:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4d3e:	2100      	movs	r1, #0
   b4d40:	4313      	orrs	r3, r2
   b4d42:	6802      	ldr	r2, [r0, #0]
   b4d44:	f88d 1004 	strb.w	r1, [sp, #4]
   b4d48:	f88d 3000 	strb.w	r3, [sp]
   b4d4c:	6814      	ldr	r4, [r2, #0]
   b4d4e:	4942      	ldr	r1, [pc, #264]	; (b4e58 <loop+0x46c>)
   b4d50:	233c      	movs	r3, #60	; 0x3c
   b4d52:	aa10      	add	r2, sp, #64	; 0x40
   b4d54:	47a0      	blx	r4
   b4d56:	e667      	b.n	b4a28 <loop+0x3c>
			if (state != oldState) {
   b4d58:	4b3a      	ldr	r3, [pc, #232]	; (b4e44 <loop+0x458>)
   b4d5a:	781b      	ldrb	r3, [r3, #0]
   b4d5c:	2b05      	cmp	r3, #5
   b4d5e:	d014      	beq.n	b4d8a <loop+0x39e>
				publishStateTransition();  
   b4d60:	f7ff fdfc 	bl	b495c <_Z22publishStateTransitionv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d64:	f005 ffba 	bl	bacdc <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();
   b4d68:	b908      	cbnz	r0, b4d6e <loop+0x382>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4d6a:	f005 ffaf 	bl	baccc <spark_cloud_flag_connect>
				sysStatus.set_lastConnection(Time.now());			// Consider moving back to space below - for testing
   b4d6e:	f000 fb2f 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b4d72:	4604      	mov	r4, r0
   b4d74:	f008 ff55 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b4d78:	17c3      	asrs	r3, r0, #31
   b4d7a:	4602      	mov	r2, r0
   b4d7c:	4620      	mov	r0, r4
   b4d7e:	f000 fd56 	bl	b582e <_ZN13sysStatusData18set_lastConnectionEx>
   b4d82:	f005 fcb7 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b4d86:	4b35      	ldr	r3, [pc, #212]	; (b4e5c <loop+0x470>)
   b4d88:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d8a:	f005 ffa7 	bl	bacdc <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b4d8e:	b108      	cbz	r0, b4d94 <loop+0x3a8>
				state = DISCONNECTING_STATE;										// Typically, we will disconnect and sleep to save power
   b4d90:	2306      	movs	r3, #6
   b4d92:	e64c      	b.n	b4a2e <loop+0x42>
   b4d94:	f005 fcae 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b4d98:	4b30      	ldr	r3, [pc, #192]	; (b4e5c <loop+0x470>)
   b4d9a:	681b      	ldr	r3, [r3, #0]
   b4d9c:	1ac0      	subs	r0, r0, r3
   b4d9e:	4b30      	ldr	r3, [pc, #192]	; (b4e60 <loop+0x474>)
   b4da0:	4298      	cmp	r0, r3
   b4da2:	d8f5      	bhi.n	b4d90 <loop+0x3a4>
   b4da4:	e644      	b.n	b4a30 <loop+0x44>
			if (state != oldState) {
   b4da6:	4b27      	ldr	r3, [pc, #156]	; (b4e44 <loop+0x458>)
   b4da8:	4c2e      	ldr	r4, [pc, #184]	; (b4e64 <loop+0x478>)
   b4daa:	781b      	ldrb	r3, [r3, #0]
   b4dac:	2b06      	cmp	r3, #6
   b4dae:	d004      	beq.n	b4dba <loop+0x3ce>
				publishStateTransition(); 
   b4db0:	f7ff fdd4 	bl	b495c <_Z22publishStateTransitionv>
   b4db4:	f005 fc9e 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b4db8:	6020      	str	r0, [r4, #0]
   b4dba:	f005 fc9b 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stayConnectedWindow > 90000) {							// Stay on-line for 90 seconds
   b4dbe:	6823      	ldr	r3, [r4, #0]
   b4dc0:	1ac0      	subs	r0, r0, r3
   b4dc2:	4b29      	ldr	r3, [pc, #164]	; (b4e68 <loop+0x47c>)
   b4dc4:	4298      	cmp	r0, r3
   b4dc6:	f67f ae33 	bls.w	b4a30 <loop+0x44>
				disconnectFromParticle();
   b4dca:	f001 f8d1 	bl	b5f70 <_Z22disconnectFromParticlev>
				state = IDLE_STATE;
   b4dce:	2302      	movs	r3, #2
   b4dd0:	e62d      	b.n	b4a2e <loop+0x42>
			static system_tick_t resetTimeout = millis();
   b4dd2:	4c26      	ldr	r4, [pc, #152]	; (b4e6c <loop+0x480>)
   b4dd4:	4e26      	ldr	r6, [pc, #152]	; (b4e70 <loop+0x484>)
   b4dd6:	7823      	ldrb	r3, [r4, #0]
   b4dd8:	f3bf 8f5b 	dmb	ish
   b4ddc:	f013 0f01 	tst.w	r3, #1
   b4de0:	d109      	bne.n	b4df6 <loop+0x40a>
   b4de2:	4620      	mov	r0, r4
   b4de4:	f7ff f96a 	bl	b40bc <__cxa_guard_acquire>
   b4de8:	b128      	cbz	r0, b4df6 <loop+0x40a>
   b4dea:	f005 fc83 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
   b4dee:	6030      	str	r0, [r6, #0]
   b4df0:	4620      	mov	r0, r4
   b4df2:	f7ff f968 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b4df6:	4b13      	ldr	r3, [pc, #76]	; (b4e44 <loop+0x458>)
   b4df8:	782a      	ldrb	r2, [r5, #0]
   b4dfa:	781b      	ldrb	r3, [r3, #0]
   b4dfc:	429a      	cmp	r2, r3
   b4dfe:	d001      	beq.n	b4e04 <loop+0x418>
   b4e00:	f7ff fdac 	bl	b495c <_Z22publishStateTransitionv>
   b4e04:	f005 fc76 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b4e08:	6833      	ldr	r3, [r6, #0]
   b4e0a:	1ac0      	subs	r0, r0, r3
   b4e0c:	f247 5330 	movw	r3, #30000	; 0x7530
   b4e10:	4298      	cmp	r0, r3
   b4e12:	f67f ae0d 	bls.w	b4a30 <loop+0x44>
				Log.info("Deep power down device");
   b4e16:	4917      	ldr	r1, [pc, #92]	; (b4e74 <loop+0x488>)
   b4e18:	4817      	ldr	r0, [pc, #92]	; (b4e78 <loop+0x48c>)
   b4e1a:	f7ff f95f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b4e1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4e22:	f006 f873 	bl	baf0c <delay>
				ab1805.deepPowerDown(); 
   b4e26:	211e      	movs	r1, #30
   b4e28:	4814      	ldr	r0, [pc, #80]	; (b4e7c <loop+0x490>)
   b4e2a:	f001 fced 	bl	b6808 <_ZN6AB180513deepPowerDownEi>
   b4e2e:	e5ff      	b.n	b4a30 <loop+0x44>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4e30:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4e34:	e692      	b.n	b4b5c <loop+0x170>
                valid_ = false;
   b4e36:	7526      	strb	r6, [r4, #20]
                return *this;
   b4e38:	e690      	b.n	b4b5c <loop+0x170>
}
   b4e3a:	b051      	add	sp, #324	; 0x144
   b4e3c:	ecbd 8b02 	vpop	{d8}
   b4e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4e44:	2003e3a9 	.word	0x2003e3a9
   b4e48:	2003de10 	.word	0x2003de10
   b4e4c:	000bf65f 	.word	0x000bf65f
   b4e50:	2003e269 	.word	0x2003e269
   b4e54:	2003e268 	.word	0x2003e268
   b4e58:	000bf6e0 	.word	0x000bf6e0
   b4e5c:	2003e274 	.word	0x2003e274
   b4e60:	000493e0 	.word	0x000493e0
   b4e64:	2003e278 	.word	0x2003e278
   b4e68:	00015f90 	.word	0x00015f90
   b4e6c:	2003e264 	.word	0x2003e264
   b4e70:	2003e26c 	.word	0x2003e26c
   b4e74:	000bf6f5 	.word	0x000bf6f5
   b4e78:	2003e658 	.word	0x2003e658
   b4e7c:	2003e27c 	.word	0x2003e27c

000b4e80 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4e80:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4e82:	2300      	movs	r3, #0
   b4e84:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4e86:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4e88:	4604      	mov	r4, r0
   b4e8a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4e8c:	b12b      	cbz	r3, b4e9a <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4e8e:	2202      	movs	r2, #2
   b4e90:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4e92:	68eb      	ldr	r3, [r5, #12]
   b4e94:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4e96:	68ab      	ldr	r3, [r5, #8]
   b4e98:	60a3      	str	r3, [r4, #8]
    }
   b4e9a:	4620      	mov	r0, r4
   b4e9c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ea0 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4ea4:	b095      	sub	sp, #84	; 0x54
   b4ea6:	4605      	mov	r5, r0
        };
   b4ea8:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4eaa:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4eac:	4690      	mov	r8, r2
   b4eae:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4eb0:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4eb2:	f7ff ffe5 	bl	b4e80 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4eb6:	a904      	add	r1, sp, #16
   b4eb8:	a808      	add	r0, sp, #32
   b4eba:	f7ff ffe1 	bl	b4e80 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4ebe:	a908      	add	r1, sp, #32
   b4ec0:	4630      	mov	r0, r6
   b4ec2:	f7ff ffdd 	bl	b4e80 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4ec6:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4eca:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4ecc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ed0:	f7ff f8e1 	bl	b4096 <_Znwj>
   b4ed4:	4604      	mov	r4, r0
   b4ed6:	b1a0      	cbz	r0, b4f02 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ed8:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4edc:	ab01      	add	r3, sp, #4
   b4ede:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4ee2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4ee6:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4eea:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4ef0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ef2:	60a3      	str	r3, [r4, #8]
   b4ef4:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4efa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4efe:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4f00:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4f02:	4b24      	ldr	r3, [pc, #144]	; (b4f94 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4f04:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4f06:	4b24      	ldr	r3, [pc, #144]	; (b4f98 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4f08:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4f0a:	2200      	movs	r2, #0
   b4f0c:	2300      	movs	r3, #0
   b4f0e:	f04f 0900 	mov.w	r9, #0
   b4f12:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4f16:	4b21      	ldr	r3, [pc, #132]	; (b4f9c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4f18:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4f1c:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f1e:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4f20:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4f24:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4f28:	f7ff f8b5 	bl	b4096 <_Znwj>
   b4f2c:	4604      	mov	r4, r0
   b4f2e:	b1d8      	cbz	r0, b4f68 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4f32:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4f36:	b133      	cbz	r3, b4f46 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4f38:	2202      	movs	r2, #2
   b4f3a:	a910      	add	r1, sp, #64	; 0x40
   b4f3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4f3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4f40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4f42:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4f44:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4f46:	4b16      	ldr	r3, [pc, #88]	; (b4fa0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4f48:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4f4a:	4a16      	ldr	r2, [pc, #88]	; (b4fa4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4f4c:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4f4e:	ab01      	add	r3, sp, #4
   b4f50:	4640      	mov	r0, r8
   b4f52:	4639      	mov	r1, r7
   b4f54:	f005 fe40 	bl	babd8 <system_subscribe_event>
        if (r) {
   b4f58:	b1b0      	cbz	r0, b4f88 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4f5a:	4620      	mov	r0, r4
   b4f5c:	f7ff fcb0 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4f60:	2110      	movs	r1, #16
   b4f62:	4620      	mov	r0, r4
   b4f64:	f7ff f89b 	bl	b409e <_ZdlPvj>
   b4f68:	a810      	add	r0, sp, #64	; 0x40
   b4f6a:	f7ff fca9 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   b4f6e:	4630      	mov	r0, r6
   b4f70:	f7ff fca6 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   b4f74:	a808      	add	r0, sp, #32
   b4f76:	f7ff fca3 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   b4f7a:	a804      	add	r0, sp, #16
   b4f7c:	f7ff fca0 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
    }
   b4f80:	4628      	mov	r0, r5
   b4f82:	b015      	add	sp, #84	; 0x54
   b4f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4f88:	9b02      	ldr	r3, [sp, #8]
   b4f8a:	60ab      	str	r3, [r5, #8]
   b4f8c:	e9c5 8700 	strd	r8, r7, [r5]
   b4f90:	e7ea      	b.n	b4f68 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4f92:	bf00      	nop
   b4f94:	000b487d 	.word	0x000b487d
   b4f98:	000b4fa9 	.word	0x000b4fa9
   b4f9c:	000c0002 	.word	0x000c0002
   b4fa0:	000b48d3 	.word	0x000b48d3
   b4fa4:	000b4855 	.word	0x000b4855

000b4fa8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4fa8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4faa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4fac:	4604      	mov	r4, r0
	switch (__op)
   b4fae:	d104      	bne.n	b4fba <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4fb0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4fb2:	6003      	str	r3, [r0, #0]
      }
   b4fb4:	2000      	movs	r0, #0
   b4fb6:	b003      	add	sp, #12
   b4fb8:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4fba:	2a02      	cmp	r2, #2
   b4fbc:	d00c      	beq.n	b4fd8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4fbe:	2a03      	cmp	r2, #3
   b4fc0:	d1f8      	bne.n	b4fb4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4fc2:	6804      	ldr	r4, [r0, #0]
   b4fc4:	2c00      	cmp	r4, #0
   b4fc6:	d0f5      	beq.n	b4fb4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4fc8:	4620      	mov	r0, r4
   b4fca:	f7ff fc79 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4fce:	2110      	movs	r1, #16
   b4fd0:	4620      	mov	r0, r4
   b4fd2:	f7ff f864 	bl	b409e <_ZdlPvj>
   b4fd6:	e7ed      	b.n	b4fb4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4fd8:	6809      	ldr	r1, [r1, #0]
   b4fda:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4fdc:	2010      	movs	r0, #16
   b4fde:	f7ff f85a 	bl	b4096 <_Znwj>
   b4fe2:	4605      	mov	r5, r0
   b4fe4:	b110      	cbz	r0, b4fec <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4fe6:	9901      	ldr	r1, [sp, #4]
   b4fe8:	f7ff ff4a 	bl	b4e80 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4fec:	6025      	str	r5, [r4, #0]
	}
   b4fee:	e7e1      	b.n	b4fb4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4ff0 <_GLOBAL__sub_I___appProductVersion>:
}
   b4ff0:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b4ff2:	4b1d      	ldr	r3, [pc, #116]	; (b5068 <_GLOBAL__sub_I___appProductVersion+0x78>)
   b4ff4:	2501      	movs	r5, #1
   b4ff6:	701d      	strb	r5, [r3, #0]
   b4ff8:	4b1c      	ldr	r3, [pc, #112]	; (b506c <_GLOBAL__sub_I___appProductVersion+0x7c>)
   b4ffa:	2208      	movs	r2, #8
   b4ffc:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4ffe:	f008 ffb9 	bl	bdf74 <spark_protocol_instance>
   b5002:	2300      	movs	r3, #0
   b5004:	461a      	mov	r2, r3
   b5006:	4619      	mov	r1, r3
   b5008:	f008 ffc4 	bl	bdf94 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b500c:	f008 ffb2 	bl	bdf74 <spark_protocol_instance>
   b5010:	2300      	movs	r3, #0
   b5012:	461a      	mov	r2, r3
   b5014:	210d      	movs	r1, #13
   b5016:	f008 ffb5 	bl	bdf84 <spark_protocol_set_product_id>
        : config_(config) {
   b501a:	4b15      	ldr	r3, [pc, #84]	; (b5070 <_GLOBAL__sub_I___appProductVersion+0x80>)
   b501c:	1d1a      	adds	r2, r3, #4
              valid_(true) {
   b501e:	2400      	movs	r4, #0
        : config_(config) {
   b5020:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b5022:	4a14      	ldr	r2, [pc, #80]	; (b5074 <_GLOBAL__sub_I___appProductVersion+0x84>)
   b5024:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5026:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b502a:	611c      	str	r4, [r3, #16]
   b502c:	751d      	strb	r5, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b502e:	f009 f879 	bl	be124 <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   b5032:	4d11      	ldr	r5, [pc, #68]	; (b5078 <_GLOBAL__sub_I___appProductVersion+0x88>)
   b5034:	4601      	mov	r1, r0
   b5036:	2269      	movs	r2, #105	; 0x69
   b5038:	4810      	ldr	r0, [pc, #64]	; (b507c <_GLOBAL__sub_I___appProductVersion+0x8c>)
   b503a:	f001 f98d 	bl	b6358 <_ZN6AB1805C1ER7TwoWireh>
   b503e:	4628      	mov	r0, r5
   b5040:	490f      	ldr	r1, [pc, #60]	; (b5080 <_GLOBAL__sub_I___appProductVersion+0x90>)
   b5042:	f008 fa9a 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b5046:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5048:	480e      	ldr	r0, [pc, #56]	; (b5084 <_GLOBAL__sub_I___appProductVersion+0x94>)
    LocalTimeSchedule() {
   b504a:	612c      	str	r4, [r5, #16]
   b504c:	2200      	movs	r2, #0
   b504e:	e9c5 2306 	strd	r2, r3, [r5, #24]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5052:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   b5056:	2306      	movs	r3, #6
   b5058:	f840 3b04 	str.w	r3, [r0], #4
   b505c:	62ac      	str	r4, [r5, #40]	; 0x28
}
   b505e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5062:	f002 ba6d 	b.w	b7540 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5066:	bf00      	nop
   b5068:	2003e268 	.word	0x2003e268
   b506c:	2003e269 	.word	0x2003e269
   b5070:	2003e29c 	.word	0x2003e29c
   b5074:	00030010 	.word	0x00030010
   b5078:	2003e3b0 	.word	0x2003e3b0
   b507c:	2003e27c 	.word	0x2003e27c
   b5080:	000c07d9 	.word	0x000c07d9
   b5084:	2003e2b8 	.word	0x2003e2b8

000b5088 <setup>:
{
   b5088:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b508a:	2000      	movs	r0, #0
   b508c:	b09f      	sub	sp, #124	; 0x7c
   b508e:	f005 fb41 	bl	ba714 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5092:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5096:	4604      	mov	r4, r0
   b5098:	2000      	movs	r0, #0
   b509a:	f005 fb3b 	bl	ba714 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b509e:	1b00      	subs	r0, r0, r4
   b50a0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b50a4:	42a8      	cmp	r0, r5
   b50a6:	f171 0300 	sbcs.w	r3, r1, #0
   b50aa:	d207      	bcs.n	b50bc <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b50ac:	f008 fea0 	bl	bddf0 <_Z16_fetch_usbserialv>
   b50b0:	f008 fe93 	bl	bddda <_ZN9USBSerial11isConnectedEv>
   b50b4:	b910      	cbnz	r0, b50bc <setup+0x34>
            spark_process();
   b50b6:	f005 fe01 	bl	bacbc <spark_process>
        while (_while() && !_condition()) {
   b50ba:	e7ed      	b.n	b5098 <setup+0x10>
   b50bc:	f008 fe98 	bl	bddf0 <_Z16_fetch_usbserialv>
   b50c0:	f008 fe8b 	bl	bddda <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b50c4:	f000 fbd6 	bl	b5874 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b50c8:	f000 fc00 	bl	b58cc <_Z18initializePowerCfgv>
		current.setup();
   b50cc:	f000 f9d0 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b50d0:	6803      	ldr	r3, [r0, #0]
   b50d2:	681b      	ldr	r3, [r3, #0]
   b50d4:	4798      	blx	r3
  		sysStatus.setup();
   b50d6:	f000 f97b 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b50da:	6803      	ldr	r3, [r0, #0]
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	4798      	blx	r3
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   b50e0:	f000 fcb2 	bl	b5a48 <_Z18particleInitializev>
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b50e4:	485e      	ldr	r0, [pc, #376]	; (b5260 <setup+0x1d8>)
   b50e6:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b50e8:	2101      	movs	r1, #1
   b50ea:	8143      	strh	r3, [r0, #10]
   b50ec:	f001 fe30 	bl	b6d50 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b50f0:	217c      	movs	r1, #124	; 0x7c
   b50f2:	485b      	ldr	r0, [pc, #364]	; (b5260 <setup+0x1d8>)
   b50f4:	f001 fa2e 	bl	b6554 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b50f8:	4b5a      	ldr	r3, [pc, #360]	; (b5264 <setup+0x1dc>)
   b50fa:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b50fc:	4b5a      	ldr	r3, [pc, #360]	; (b5268 <setup+0x1e0>)
   b50fe:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5100:	ad08      	add	r5, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b5102:	4b5a      	ldr	r3, [pc, #360]	; (b526c <setup+0x1e4>)
   b5104:	930a      	str	r3, [sp, #40]	; 0x28
   b5106:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b510a:	2300      	movs	r3, #0
   b510c:	a804      	add	r0, sp, #16
   b510e:	9500      	str	r5, [sp, #0]
   b5110:	f7ff fec6 	bl	b4ea0 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5114:	4628      	mov	r0, r5
   b5116:	f7ff fbd3 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b511a:	f002 ff29 	bl	b7f70 <_ZN17PublishQueuePosix8instanceEv>
   b511e:	f003 f92d 	bl	b837c <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5122:	f7fe fff3 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b5126:	2101      	movs	r1, #1
   b5128:	f7ff f802 	bl	b4130 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b512c:	f002 fbb8 	bl	b78a0 <_ZN9LocalTime8instanceEv>
   b5130:	494f      	ldr	r1, [pc, #316]	; (b5270 <setup+0x1e8>)
   b5132:	4604      	mov	r4, r0
   b5134:	4628      	mov	r0, r5
   b5136:	f002 fab5 	bl	b76a4 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b513a:	a909      	add	r1, sp, #36	; 0x24
   b513c:	f104 0008 	add.w	r0, r4, #8
   b5140:	f008 fa57 	bl	bd5f2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b5146:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5148:	a90f      	add	r1, sp, #60	; 0x3c
   b514a:	f104 0020 	add.w	r0, r4, #32
   b514e:	f008 fa50 	bl	bd5f2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5152:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5154:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5156:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5158:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b515a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b515c:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b515e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5160:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5162:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b5164:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5166:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   b516a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b516e:	4628      	mov	r0, r5
   b5170:	f002 f866 	bl	b7240 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5174:	f008 fd55 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b5178:	4c3e      	ldr	r4, [pc, #248]	; (b5274 <setup+0x1ec>)
   b517a:	17c3      	asrs	r3, r0, #31
   b517c:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   b5180:	4620      	mov	r0, r4
   b5182:	f002 fc05 	bl	b7990 <_ZN16LocalTimeConvert7convertEv>
  	Log.info("Gateway startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   b5186:	4b3c      	ldr	r3, [pc, #240]	; (b5278 <setup+0x1f0>)
   b5188:	4621      	mov	r1, r4
   b518a:	681a      	ldr	r2, [r3, #0]
   b518c:	4628      	mov	r0, r5
   b518e:	f002 fae9 	bl	b7764 <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b5192:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5194:	a903      	add	r1, sp, #12
   b5196:	2003      	movs	r0, #3
   b5198:	9e08      	ldr	r6, [sp, #32]
    const diag_source* src = nullptr;
   b519a:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   b519c:	f005 fcfa 	bl	bab94 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b51a0:	2800      	cmp	r0, #0
   b51a2:	d155      	bne.n	b5250 <setup+0x1c8>
        return ret;
    }
    return get(src, val);
   b51a4:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   b51a6:	b10c      	cbz	r4, b51ac <setup+0x124>
   b51a8:	6923      	ldr	r3, [r4, #16]
   b51aa:	b923      	cbnz	r3, b51b6 <setup+0x12e>
   b51ac:	4a33      	ldr	r2, [pc, #204]	; (b527c <setup+0x1f4>)
   b51ae:	4934      	ldr	r1, [pc, #208]	; (b5280 <setup+0x1f8>)
   b51b0:	200a      	movs	r0, #10
   b51b2:	f005 fcc7 	bl	bab44 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b51b6:	230c      	movs	r3, #12
   b51b8:	9304      	str	r3, [sp, #16]
   b51ba:	ab02      	add	r3, sp, #8
   b51bc:	9305      	str	r3, [sp, #20]
   b51be:	2304      	movs	r3, #4
   b51c0:	9306      	str	r3, [sp, #24]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b51c2:	6923      	ldr	r3, [r4, #16]
   b51c4:	aa04      	add	r2, sp, #16
   b51c6:	2101      	movs	r1, #1
   b51c8:	4620      	mov	r0, r4
   b51ca:	4798      	blx	r3
        if (r) {
   b51cc:	2800      	cmp	r0, #0
   b51ce:	d13f      	bne.n	b5250 <setup+0x1c8>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b51d0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b51d4:	ee07 3a90 	vmov	s15, r3
   b51d8:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b51dc:	ee17 0a90 	vmov	r0, s15
   b51e0:	f009 f99a 	bl	be518 <__aeabi_f2d>
   b51e4:	4632      	mov	r2, r6
   b51e6:	e9cd 0100 	strd	r0, r1, [sp]
   b51ea:	4926      	ldr	r1, [pc, #152]	; (b5284 <setup+0x1fc>)
   b51ec:	4826      	ldr	r0, [pc, #152]	; (b5288 <setup+0x200>)
   b51ee:	f7fe ff75 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b51f2:	4628      	mov	r0, r5
   b51f4:	f008 f976 	bl	bd4e4 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b51f8:	4b24      	ldr	r3, [pc, #144]	; (b528c <setup+0x204>)
   b51fa:	4d25      	ldr	r5, [pc, #148]	; (b5290 <setup+0x208>)
   b51fc:	881e      	ldrh	r6, [r3, #0]
   b51fe:	4630      	mov	r0, r6
   b5200:	f008 ff38 	bl	be074 <digitalRead>
   b5204:	4604      	mov	r4, r0
   b5206:	bb30      	cbnz	r0, b5256 <setup+0x1ce>
		Log.info("User button pressed, test mode");
   b5208:	4922      	ldr	r1, [pc, #136]	; (b5294 <setup+0x20c>)
   b520a:	481f      	ldr	r0, [pc, #124]	; (b5288 <setup+0x200>)
   b520c:	f7fe ff66 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		testModeFlag = true;
   b5210:	4b21      	ldr	r3, [pc, #132]	; (b5298 <setup+0x210>)
   b5212:	2101      	movs	r1, #1
   b5214:	7019      	strb	r1, [r3, #0]
		digitalWrite(BLUE_LED,HIGH);
   b5216:	4b21      	ldr	r3, [pc, #132]	; (b529c <setup+0x214>)
   b5218:	881f      	ldrh	r7, [r3, #0]
   b521a:	4638      	mov	r0, r7
   b521c:	f008 ff11 	bl	be042 <digitalWrite>
		delay(2000);
   b5220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5224:	f005 fe72 	bl	baf0c <delay>
		digitalWrite(BLUE_LED,LOW);
   b5228:	4621      	mov	r1, r4
   b522a:	4638      	mov	r0, r7
   b522c:	f008 ff09 	bl	be042 <digitalWrite>
		state = LoRA_STATE;
   b5230:	2304      	movs	r3, #4
   b5232:	702b      	strb	r3, [r5, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5234:	2200      	movs	r2, #0
   b5236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b523a:	4919      	ldr	r1, [pc, #100]	; (b52a0 <setup+0x218>)
   b523c:	9200      	str	r2, [sp, #0]
   b523e:	4630      	mov	r0, r6
   b5240:	f006 fbda 	bl	bb9f8 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5244:	782b      	ldrb	r3, [r5, #0]
   b5246:	b90b      	cbnz	r3, b524c <setup+0x1c4>
   b5248:	2302      	movs	r3, #2
   b524a:	702b      	strb	r3, [r5, #0]
}
   b524c:	b01f      	add	sp, #124	; 0x7c
   b524e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1.0f;
   b5250:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5254:	e7c2      	b.n	b51dc <setup+0x154>
	else Log.info("No user button push detechted");
   b5256:	4913      	ldr	r1, [pc, #76]	; (b52a4 <setup+0x21c>)
   b5258:	480b      	ldr	r0, [pc, #44]	; (b5288 <setup+0x200>)
   b525a:	f7fe ff3f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b525e:	e7e9      	b.n	b5234 <setup+0x1ac>
   b5260:	2003e27c 	.word	0x2003e27c
   b5264:	000b483d 	.word	0x000b483d
   b5268:	000b48b7 	.word	0x000b48b7
   b526c:	000b48a3 	.word	0x000b48a3
   b5270:	000bf70c 	.word	0x000bf70c
   b5274:	2003e2b8 	.word	0x2003e2b8
   b5278:	2003de88 	.word	0x2003de88
   b527c:	000ba6e5 	.word	0x000ba6e5
   b5280:	000bf733 	.word	0x000bf733
   b5284:	000bf759 	.word	0x000bf759
   b5288:	2003e658 	.word	0x2003e658
   b528c:	000bf872 	.word	0x000bf872
   b5290:	2003e3e0 	.word	0x2003e3e0
   b5294:	000bf78b 	.word	0x000bf78b
   b5298:	2003e3e1 	.word	0x2003e3e1
   b529c:	000bf870 	.word	0x000bf870
   b52a0:	000b4849 	.word	0x000b4849
   b52a4:	000bf7aa 	.word	0x000bf7aa

000b52a8 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b52a8:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b52aa:	4b04      	ldr	r3, [pc, #16]	; (b52bc <_ZN17currentStatusDataD1Ev+0x14>)
   b52ac:	6003      	str	r3, [r0, #0]
   b52ae:	4604      	mov	r4, r0
            if (handle_) {
   b52b0:	6840      	ldr	r0, [r0, #4]
   b52b2:	b108      	cbz	r0, b52b8 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b52b4:	f005 f9d6 	bl	ba664 <os_mutex_recursive_destroy>
}
   b52b8:	4620      	mov	r0, r4
   b52ba:	bd10      	pop	{r4, pc}
   b52bc:	000c0654 	.word	0x000c0654

000b52c0 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b52c0:	b510      	push	{r4, lr}
   b52c2:	4604      	mov	r4, r0
}
   b52c4:	f7ff fff0 	bl	b52a8 <_ZN17currentStatusDataD1Ev>
   b52c8:	4620      	mov	r0, r4
   b52ca:	2178      	movs	r1, #120	; 0x78
   b52cc:	f7fe fee7 	bl	b409e <_ZdlPvj>
   b52d0:	4620      	mov	r0, r4
   b52d2:	bd10      	pop	{r4, pc}

000b52d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b52d4:	b510      	push	{r4, lr}
   b52d6:	4b03      	ldr	r3, [pc, #12]	; (b52e4 <_ZN8MB85RC64D1Ev+0x10>)
   b52d8:	6003      	str	r3, [r0, #0]
   b52da:	4604      	mov	r4, r0
   b52dc:	f002 fc06 	bl	b7aec <_ZN6MB85RCD1Ev>
   b52e0:	4620      	mov	r0, r4
   b52e2:	bd10      	pop	{r4, pc}
   b52e4:	000bf7d0 	.word	0x000bf7d0

000b52e8 <_ZN8MB85RC64D0Ev>:
   b52e8:	b510      	push	{r4, lr}
   b52ea:	4604      	mov	r4, r0
   b52ec:	f7ff fff2 	bl	b52d4 <_ZN8MB85RC64D1Ev>
   b52f0:	4620      	mov	r0, r4
   b52f2:	2110      	movs	r1, #16
   b52f4:	f7fe fed3 	bl	b409e <_ZdlPvj>
   b52f8:	4620      	mov	r0, r4
   b52fa:	bd10      	pop	{r4, pc}

000b52fc <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b52fc:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b52fe:	4b04      	ldr	r3, [pc, #16]	; (b5310 <_ZN13sysStatusDataD1Ev+0x14>)
   b5300:	6003      	str	r3, [r0, #0]
   b5302:	4604      	mov	r4, r0
            if (handle_) {
   b5304:	6840      	ldr	r0, [r0, #4]
   b5306:	b108      	cbz	r0, b530c <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5308:	f005 f9ac 	bl	ba664 <os_mutex_recursive_destroy>
}
   b530c:	4620      	mov	r0, r4
   b530e:	bd10      	pop	{r4, pc}
   b5310:	000c0654 	.word	0x000c0654

000b5314 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5314:	b510      	push	{r4, lr}
   b5316:	4604      	mov	r4, r0
}
   b5318:	f7ff fff0 	bl	b52fc <_ZN13sysStatusDataD1Ev>
   b531c:	4620      	mov	r0, r4
   b531e:	2170      	movs	r1, #112	; 0x70
   b5320:	f7fe febd 	bl	b409e <_ZdlPvj>
   b5324:	4620      	mov	r0, r4
   b5326:	bd10      	pop	{r4, pc}

000b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b5328:	b510      	push	{r4, lr}
            if (!handle_) {
   b532a:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b532c:	4604      	mov	r4, r0
            if (!handle_) {
   b532e:	b90b      	cbnz	r3, b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5330:	f005 f990 	bl	ba654 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b5334:	6820      	ldr	r0, [r4, #0]
        }
   b5336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b533a:	f005 b99b 	b.w	ba674 <os_mutex_recursive_lock>

000b533e <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b533e:	b538      	push	{r3, r4, r5, lr}
   b5340:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5342:	3004      	adds	r0, #4
   b5344:	f7ff fff0 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5348:	6a20      	ldr	r0, [r4, #32]
   b534a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b534c:	6803      	ldr	r3, [r0, #0]
   b534e:	68dd      	ldr	r5, [r3, #12]
   b5350:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5354:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5356:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b535c:	f005 b992 	b.w	ba684 <os_mutex_recursive_unlock>

000b5360 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5360:	b538      	push	{r3, r4, r5, lr}
   b5362:	4604      	mov	r4, r0
   b5364:	3004      	adds	r0, #4
   b5366:	f7ff ffdf 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b536a:	6a20      	ldr	r0, [r4, #32]
   b536c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b536e:	6803      	ldr	r3, [r0, #0]
   b5370:	689d      	ldr	r5, [r3, #8]
   b5372:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5376:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5378:	68a2      	ldr	r2, [r4, #8]
   b537a:	6823      	ldr	r3, [r4, #0]
   b537c:	88d1      	ldrh	r1, [r2, #6]
   b537e:	695b      	ldr	r3, [r3, #20]
   b5380:	4620      	mov	r0, r4
   b5382:	4798      	blx	r3
   b5384:	b918      	cbnz	r0, b538e <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5386:	6823      	ldr	r3, [r4, #0]
   b5388:	4620      	mov	r0, r4
   b538a:	699b      	ldr	r3, [r3, #24]
   b538c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b538e:	6860      	ldr	r0, [r4, #4]
   b5390:	f005 f978 	bl	ba684 <os_mutex_recursive_unlock>
        }
   b5394:	2001      	movs	r0, #1
   b5396:	bd38      	pop	{r3, r4, r5, pc}

000b5398 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5398:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b539c:	6081      	str	r1, [r0, #8]
   b539e:	4909      	ldr	r1, [pc, #36]	; (b53c4 <_ZN13sysStatusDataC1Ev+0x2c>)
   b53a0:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b53a4:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b53a8:	2101      	movs	r1, #1
   b53aa:	8281      	strh	r1, [r0, #20]
   b53ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b53b0:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b53b2:	4905      	ldr	r1, [pc, #20]	; (b53c8 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b53b4:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b53b6:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b53ba:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b53bc:	6182      	str	r2, [r0, #24]
   b53be:	4a03      	ldr	r2, [pc, #12]	; (b53cc <_ZN13sysStatusDataC1Ev+0x34>)
   b53c0:	6002      	str	r2, [r0, #0]
};
   b53c2:	4770      	bx	lr
   b53c4:	20a99e73 	.word	0x20a99e73
   b53c8:	2003e3ec 	.word	0x2003e3ec
   b53cc:	000bf7ec 	.word	0x000bf7ec

000b53d0 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b53d0:	b510      	push	{r4, lr}
    if (!_instance) {
   b53d2:	4c06      	ldr	r4, [pc, #24]	; (b53ec <_ZN13sysStatusData8instanceEv+0x1c>)
   b53d4:	6823      	ldr	r3, [r4, #0]
   b53d6:	b93b      	cbnz	r3, b53e8 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b53d8:	2070      	movs	r0, #112	; 0x70
   b53da:	f7fe fe5c 	bl	b4096 <_Znwj>
   b53de:	4603      	mov	r3, r0
   b53e0:	b108      	cbz	r0, b53e6 <_ZN13sysStatusData8instanceEv+0x16>
   b53e2:	f7ff ffd9 	bl	b5398 <_ZN13sysStatusDataC1Ev>
   b53e6:	6023      	str	r3, [r4, #0]
}
   b53e8:	6820      	ldr	r0, [r4, #0]
   b53ea:	bd10      	pop	{r4, pc}
   b53ec:	2003e3e4 	.word	0x2003e3e4

000b53f0 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b53f0:	b508      	push	{r3, lr}
    fram.begin();
   b53f2:	6a00      	ldr	r0, [r0, #32]
   b53f4:	f002 fb90 	bl	b7b18 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b53f8:	f7ff ffea 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b53fc:	6803      	ldr	r3, [r0, #0]
   b53fe:	685b      	ldr	r3, [r3, #4]
   b5400:	4798      	blx	r3
}
   b5402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setNodeConfiguration();                             // Here we will fix the settings specific to the node
   b5406:	f000 ba99 	b.w	b593c <_Z20setNodeConfigurationv>

000b540a <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b540a:	b510      	push	{r4, lr}
    fram.begin();
   b540c:	6a00      	ldr	r0, [r0, #32]
   b540e:	f002 fb83 	bl	b7b18 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5412:	f7ff ffdd 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5416:	6803      	ldr	r3, [r0, #0]
}
   b5418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b541c:	685b      	ldr	r3, [r3, #4]
   b541e:	4718      	bx	r3

000b5420 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5420:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5422:	f7ff ffd5 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5426:	6803      	ldr	r3, [r0, #0]
}
   b5428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b542c:	68db      	ldr	r3, [r3, #12]
   b542e:	2100      	movs	r1, #0
   b5430:	4718      	bx	r3
	...

000b5434 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5434:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5436:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b543a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b543c:	6182      	str	r2, [r0, #24]
   b543e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5442:	6081      	str	r1, [r0, #8]
   b5444:	61c2      	str	r2, [r0, #28]
   b5446:	4907      	ldr	r1, [pc, #28]	; (b5464 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5448:	4a07      	ldr	r2, [pc, #28]	; (b5468 <_ZN17currentStatusDataC1Ev+0x34>)
   b544a:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b544c:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5450:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5452:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5456:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5458:	2101      	movs	r1, #1
   b545a:	4a04      	ldr	r2, [pc, #16]	; (b546c <_ZN17currentStatusDataC1Ev+0x38>)
   b545c:	8281      	strh	r1, [r0, #20]
   b545e:	6002      	str	r2, [r0, #0]
};
   b5460:	4770      	bx	lr
   b5462:	bf00      	nop
   b5464:	20a99e73 	.word	0x20a99e73
   b5468:	2003e3ec 	.word	0x2003e3ec
   b546c:	000bf818 	.word	0x000bf818

000b5470 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5470:	b510      	push	{r4, lr}
    if (!_instance) {
   b5472:	4c06      	ldr	r4, [pc, #24]	; (b548c <_ZN17currentStatusData8instanceEv+0x1c>)
   b5474:	6823      	ldr	r3, [r4, #0]
   b5476:	b93b      	cbnz	r3, b5488 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5478:	2078      	movs	r0, #120	; 0x78
   b547a:	f7fe fe0c 	bl	b4096 <_Znwj>
   b547e:	4603      	mov	r3, r0
   b5480:	b108      	cbz	r0, b5486 <_ZN17currentStatusData8instanceEv+0x16>
   b5482:	f7ff ffd7 	bl	b5434 <_ZN17currentStatusDataC1Ev>
   b5486:	6023      	str	r3, [r4, #0]
}
   b5488:	6820      	ldr	r0, [r4, #0]
   b548a:	bd10      	pop	{r4, pc}
   b548c:	2003e3e8 	.word	0x2003e3e8

000b5490 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b5490:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5492:	f7ff ff9d 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5496:	6803      	ldr	r3, [r0, #0]
}
   b5498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b549c:	68db      	ldr	r3, [r3, #12]
   b549e:	2100      	movs	r1, #0
   b54a0:	4718      	bx	r3
   b54a2:	0000      	movs	r0, r0
   b54a4:	0000      	movs	r0, r0
	...

000b54a8 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b54a8:	b510      	push	{r4, lr}
   b54aa:	4604      	mov	r4, r0
   b54ac:	ed2d 8b02 	vpush	{d8}
   b54b0:	3004      	adds	r0, #4
   b54b2:	f7ff ff39 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b54b6:	68e3      	ldr	r3, [r4, #12]
   b54b8:	3b08      	subs	r3, #8
   b54ba:	2b17      	cmp	r3, #23
   b54bc:	d90c      	bls.n	b54d8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b54be:	68a3      	ldr	r3, [r4, #8]
   b54c0:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b54c4:	6860      	ldr	r0, [r4, #4]
   b54c6:	f005 f8dd 	bl	ba684 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b54ca:	eeb0 0a48 	vmov.f32	s0, s16
   b54ce:	eef0 0a68 	vmov.f32	s1, s17
   b54d2:	ecbd 8b02 	vpop	{d8}
   b54d6:	bd10      	pop	{r4, pc}
            T result = 0;
   b54d8:	ed9f 8b01 	vldr	d8, [pc, #4]	; b54e0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b54dc:	e7f2      	b.n	b54c4 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b54de:	bf00      	nop
	...

000b54e8 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b54e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54ea:	4604      	mov	r4, r0
   b54ec:	3004      	adds	r0, #4
   b54ee:	ec57 6b10 	vmov	r6, r7, d0
   b54f2:	f7ff ff19 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b54f6:	68e3      	ldr	r3, [r4, #12]
   b54f8:	3b08      	subs	r3, #8
   b54fa:	2b17      	cmp	r3, #23
   b54fc:	d912      	bls.n	b5524 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b54fe:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5500:	4630      	mov	r0, r6
   b5502:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5506:	4639      	mov	r1, r7
   b5508:	f009 fac6 	bl	bea98 <__aeabi_dcmpeq>
   b550c:	b950      	cbnz	r0, b5524 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b550e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b5512:	4620      	mov	r0, r4
   b5514:	68a5      	ldr	r5, [r4, #8]
   b5516:	f004 ffe3 	bl	ba4e0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b551a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b551c:	6823      	ldr	r3, [r4, #0]
   b551e:	4620      	mov	r0, r4
   b5520:	691b      	ldr	r3, [r3, #16]
   b5522:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5524:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b5526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b552a:	f005 b8ab 	b.w	ba684 <os_mutex_recursive_unlock>

000b552e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b552e:	b538      	push	{r3, r4, r5, lr}
   b5530:	4604      	mov	r4, r0
   b5532:	3004      	adds	r0, #4
   b5534:	460d      	mov	r5, r1
   b5536:	f7ff fef7 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b553a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b553c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b553e:	3b02      	subs	r3, #2
   b5540:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5542:	bf26      	itte	cs
   b5544:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5546:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5548:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b554a:	f005 f89b 	bl	ba684 <os_mutex_recursive_unlock>
        }
   b554e:	4628      	mov	r0, r5
   b5550:	bd38      	pop	{r3, r4, r5, pc}

000b5552 <_ZNK13sysStatusData12get_deviceIDEv>:
uint16_t sysStatusData::get_deviceID() const {
   b5552:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, deviceID));
   b5554:	2110      	movs	r1, #16
   b5556:	f7ff ffea 	bl	b552e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b555a:	bd08      	pop	{r3, pc}

000b555c <_ZNK13sysStatusData14get_nodeNumberEv>:
uint16_t sysStatusData::get_nodeNumber() const {
   b555c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, nodeNumber));
   b555e:	2112      	movs	r1, #18
   b5560:	f7ff ffe5 	bl	b552e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5564:	bd08      	pop	{r3, pc}

000b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b5566:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5568:	2134      	movs	r1, #52	; 0x34
   b556a:	f7ff ffe0 	bl	b552e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b556e:	bd08      	pop	{r3, pc}

000b5570 <_ZNK17currentStatusData12get_deviceIDEv>:
uint16_t currentStatusData::get_deviceID() const {
   b5570:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, deviceID));
   b5572:	2110      	movs	r1, #16
   b5574:	f7ff ffdb 	bl	b552e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5578:	bd08      	pop	{r3, pc}

000b557a <_ZNK17currentStatusData14get_nodeNumberEv>:
uint16_t currentStatusData::get_nodeNumber() const {
   b557a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeNumber));
   b557c:	2112      	movs	r1, #18
   b557e:	f7ff ffd6 	bl	b552e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5582:	bd08      	pop	{r3, pc}

000b5584 <_ZNK17currentStatusData8get_RSSIEv>:

void currentStatusData::set_lastSampleTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastSampleTime), value);
}

uint16_t currentStatusData::get_RSSI() const {
   b5584:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b5586:	2130      	movs	r1, #48	; 0x30
   b5588:	f7ff ffd1 	bl	b552e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b558c:	bd08      	pop	{r3, pc}

000b558e <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b558e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5590:	2140      	movs	r1, #64	; 0x40
   b5592:	f7ff ffcc 	bl	b552e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5596:	bd08      	pop	{r3, pc}

000b5598 <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b5598:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b559a:	2142      	movs	r1, #66	; 0x42
   b559c:	f7ff ffc7 	bl	b552e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b55a0:	bd08      	pop	{r3, pc}

000b55a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b55a2:	b570      	push	{r4, r5, r6, lr}
   b55a4:	4604      	mov	r4, r0
   b55a6:	3004      	adds	r0, #4
   b55a8:	460d      	mov	r5, r1
   b55aa:	4616      	mov	r6, r2
   b55ac:	f7ff febc 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b55b0:	68e3      	ldr	r3, [r4, #12]
   b55b2:	3b02      	subs	r3, #2
   b55b4:	42ab      	cmp	r3, r5
   b55b6:	d30d      	bcc.n	b55d4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b55b8:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b55ba:	5b5a      	ldrh	r2, [r3, r5]
   b55bc:	42b2      	cmp	r2, r6
   b55be:	d009      	beq.n	b55d4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b55c0:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b55c2:	4620      	mov	r0, r4
   b55c4:	68a5      	ldr	r5, [r4, #8]
   b55c6:	f004 ff8b 	bl	ba4e0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b55ca:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b55cc:	6823      	ldr	r3, [r4, #0]
   b55ce:	4620      	mov	r0, r4
   b55d0:	691b      	ldr	r3, [r3, #16]
   b55d2:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b55d4:	6860      	ldr	r0, [r4, #4]
        }
   b55d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b55da:	f005 b853 	b.w	ba684 <os_mutex_recursive_unlock>

000b55de <_ZN13sysStatusData12set_deviceIDEt>:
void sysStatusData::set_deviceID(uint16_t value) {
   b55de:	b508      	push	{r3, lr}
   b55e0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, deviceID), value);
   b55e2:	2110      	movs	r1, #16
   b55e4:	f7ff ffdd 	bl	b55a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b55e8:	bd08      	pop	{r3, pc}

000b55ea <_ZN13sysStatusData14set_nodeNumberEt>:
void sysStatusData::set_nodeNumber(uint16_t value) {
   b55ea:	b508      	push	{r3, lr}
   b55ec:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, nodeNumber), value);
   b55ee:	2112      	movs	r1, #18
   b55f0:	f7ff ffd7 	bl	b55a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b55f4:	bd08      	pop	{r3, pc}

000b55f6 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b55f6:	b508      	push	{r3, lr}
   b55f8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b55fa:	2134      	movs	r1, #52	; 0x34
   b55fc:	f7ff ffd1 	bl	b55a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5600:	bd08      	pop	{r3, pc}

000b5602 <_ZN17currentStatusData12set_deviceIDEt>:
void currentStatusData::set_deviceID(uint16_t value) {
   b5602:	b508      	push	{r3, lr}
   b5604:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, deviceID), value);
   b5606:	2110      	movs	r1, #16
   b5608:	f7ff ffcb 	bl	b55a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b560c:	bd08      	pop	{r3, pc}

000b560e <_ZN17currentStatusData14set_nodeNumberEt>:
void currentStatusData::set_nodeNumber(uint16_t value) {
   b560e:	b508      	push	{r3, lr}
   b5610:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, nodeNumber), value);
   b5612:	2112      	movs	r1, #18
   b5614:	f7ff ffc5 	bl	b55a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5618:	bd08      	pop	{r3, pc}

000b561a <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b561a:	b508      	push	{r3, lr}
   b561c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b561e:	2130      	movs	r1, #48	; 0x30
   b5620:	f7ff ffbf 	bl	b55a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5624:	bd08      	pop	{r3, pc}

000b5626 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b5626:	b508      	push	{r3, lr}
   b5628:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b562a:	2140      	movs	r1, #64	; 0x40
   b562c:	f7ff ffb9 	bl	b55a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5630:	bd08      	pop	{r3, pc}

000b5632 <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b5632:	b508      	push	{r3, lr}
   b5634:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5636:	2142      	movs	r1, #66	; 0x42
   b5638:	f7ff ffb3 	bl	b55a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b563c:	bd08      	pop	{r3, pc}

000b563e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b563e:	b538      	push	{r3, r4, r5, lr}
   b5640:	4604      	mov	r4, r0
   b5642:	3004      	adds	r0, #4
   b5644:	460d      	mov	r5, r1
   b5646:	f7ff fe6f 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b564a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b564c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b564e:	3b01      	subs	r3, #1
   b5650:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5652:	bf26      	itte	cs
   b5654:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5656:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5658:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b565a:	f005 f813 	bl	ba684 <os_mutex_recursive_unlock>
        }
   b565e:	4628      	mov	r0, r5
   b5660:	bd38      	pop	{r3, r4, r5, pc}

000b5662 <_ZNK13sysStatusData21get_structuresVersionEv>:
uint8_t sysStatusData::get_structuresVersion() const {
   b5662:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, structuresVersion));
   b5664:	2114      	movs	r1, #20
   b5666:	f7ff ffea 	bl	b563e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b566a:	bd08      	pop	{r3, pc}

000b566c <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b566c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b566e:	2118      	movs	r1, #24
   b5670:	f7ff ffe5 	bl	b563e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5674:	bd08      	pop	{r3, pc}

000b5676 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5676:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5678:	2114      	movs	r1, #20
   b567a:	f7ff ffe0 	bl	b563e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b567e:	bd08      	pop	{r3, pc}

000b5680 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5680:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5682:	2120      	movs	r1, #32
   b5684:	f7ff ffdb 	bl	b563e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5688:	bd08      	pop	{r3, pc}

000b568a <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b568a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b568c:	2132      	movs	r1, #50	; 0x32
   b568e:	f7ff ffd6 	bl	b563e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5692:	bd08      	pop	{r3, pc}

000b5694 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5694:	b570      	push	{r4, r5, r6, lr}
   b5696:	4604      	mov	r4, r0
   b5698:	3004      	adds	r0, #4
   b569a:	460d      	mov	r5, r1
   b569c:	4616      	mov	r6, r2
   b569e:	f7ff fe43 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b56a2:	68e3      	ldr	r3, [r4, #12]
   b56a4:	3b01      	subs	r3, #1
   b56a6:	42ab      	cmp	r3, r5
   b56a8:	d30d      	bcc.n	b56c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b56aa:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b56ac:	5d5a      	ldrb	r2, [r3, r5]
   b56ae:	42b2      	cmp	r2, r6
   b56b0:	d009      	beq.n	b56c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b56b2:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b56b4:	4620      	mov	r0, r4
   b56b6:	68a5      	ldr	r5, [r4, #8]
   b56b8:	f004 ff12 	bl	ba4e0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b56bc:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b56be:	6823      	ldr	r3, [r4, #0]
   b56c0:	4620      	mov	r0, r4
   b56c2:	691b      	ldr	r3, [r3, #16]
   b56c4:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b56c6:	6860      	ldr	r0, [r4, #4]
        }
   b56c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b56cc:	f004 bfda 	b.w	ba684 <os_mutex_recursive_unlock>

000b56d0 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b56d0:	b508      	push	{r3, lr}
   b56d2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b56d4:	2114      	movs	r1, #20
   b56d6:	f7ff ffdd 	bl	b5694 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b56da:	bd08      	pop	{r3, pc}

000b56dc <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b56dc:	b508      	push	{r3, lr}
   b56de:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b56e0:	2114      	movs	r1, #20
   b56e2:	f7ff ffd7 	bl	b5694 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b56e6:	bd08      	pop	{r3, pc}

000b56e8 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b56e8:	b508      	push	{r3, lr}
   b56ea:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b56ec:	2120      	movs	r1, #32
   b56ee:	f7ff ffd1 	bl	b5694 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b56f2:	bd08      	pop	{r3, pc}

000b56f4 <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b56f4:	b508      	push	{r3, lr}
   b56f6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b56f8:	2132      	movs	r1, #50	; 0x32
   b56fa:	f7ff ffcb 	bl	b5694 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b56fe:	bd08      	pop	{r3, pc}

000b5700 <_ZN17currentStatusData17set_alertCodeNodeEh>:

uint8_t currentStatusData::get_alertCodeNode() const {
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
}

void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5700:	b508      	push	{r3, lr}
   b5702:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b5704:	2144      	movs	r1, #68	; 0x44
   b5706:	f7ff ffc5 	bl	b5694 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b570a:	bd08      	pop	{r3, pc}

000b570c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b570c:	b538      	push	{r3, r4, r5, lr}
   b570e:	4604      	mov	r4, r0
   b5710:	3004      	adds	r0, #4
   b5712:	460d      	mov	r5, r1
   b5714:	f7ff fe08 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5718:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b571a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b571c:	3b01      	subs	r3, #1
   b571e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5720:	bf26      	itte	cs
   b5722:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5724:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5726:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5728:	f004 ffac 	bl	ba684 <os_mutex_recursive_unlock>
        }
   b572c:	4628      	mov	r0, r5
   b572e:	bd38      	pop	{r3, r4, r5, pc}

000b5730 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b5730:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b5732:	2117      	movs	r1, #23
   b5734:	f7ff ffea 	bl	b570c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5738:	bd08      	pop	{r3, pc}

000b573a <_ZNK13sysStatusData14get_verizonSIMEv>:
bool sysStatusData::get_verizonSIM() const {
   b573a:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, verizonSIM));
   b573c:	2143      	movs	r1, #67	; 0x43
   b573e:	f7ff ffe5 	bl	b570c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5742:	bd08      	pop	{r3, pc}

000b5744 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5744:	b570      	push	{r4, r5, r6, lr}
   b5746:	4604      	mov	r4, r0
   b5748:	3004      	adds	r0, #4
   b574a:	460d      	mov	r5, r1
   b574c:	4616      	mov	r6, r2
   b574e:	f7ff fdeb 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5752:	68e3      	ldr	r3, [r4, #12]
   b5754:	3b01      	subs	r3, #1
   b5756:	42ab      	cmp	r3, r5
   b5758:	d30d      	bcc.n	b5776 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b575a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b575c:	5d5a      	ldrb	r2, [r3, r5]
   b575e:	42b2      	cmp	r2, r6
   b5760:	d009      	beq.n	b5776 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b5762:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5764:	4620      	mov	r0, r4
   b5766:	68a5      	ldr	r5, [r4, #8]
   b5768:	f004 feba 	bl	ba4e0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b576c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b576e:	6823      	ldr	r3, [r4, #0]
   b5770:	4620      	mov	r0, r4
   b5772:	691b      	ldr	r3, [r3, #16]
   b5774:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5776:	6860      	ldr	r0, [r4, #4]
        }
   b5778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b577c:	f004 bf82 	b.w	ba684 <os_mutex_recursive_unlock>

000b5780 <_ZN13sysStatusData16set_lowPowerModeEb>:
void sysStatusData::set_lowPowerMode(bool value) {
   b5780:	b508      	push	{r3, lr}
   b5782:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowPowerMode), value);
   b5784:	2117      	movs	r1, #23
   b5786:	f7ff ffdd 	bl	b5744 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b578a:	bd08      	pop	{r3, pc}

000b578c <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b578c:	b508      	push	{r3, lr}
   b578e:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b5790:	2140      	movs	r1, #64	; 0x40
   b5792:	f7ff ffd7 	bl	b5744 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5796:	bd08      	pop	{r3, pc}

000b5798 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b5798:	b508      	push	{r3, lr}
   b579a:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b579c:	2143      	movs	r1, #67	; 0x43
   b579e:	f7ff ffd1 	bl	b5744 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b57a2:	bd08      	pop	{r3, pc}

000b57a4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b57a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57a6:	4604      	mov	r4, r0
   b57a8:	3004      	adds	r0, #4
   b57aa:	460d      	mov	r5, r1
   b57ac:	f7ff fdbc 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b57b0:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b57b2:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b57b4:	3b08      	subs	r3, #8
   b57b6:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b57b8:	bf23      	ittte	cs
   b57ba:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b57bc:	1949      	addcs	r1, r1, r5
   b57be:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b57c2:	2600      	movcc	r6, #0
   b57c4:	bf38      	it	cc
   b57c6:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b57c8:	f004 ff5c 	bl	ba684 <os_mutex_recursive_unlock>
        }
   b57cc:	4630      	mov	r0, r6
   b57ce:	4639      	mov	r1, r7
   b57d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b57d2 <_ZNK13sysStatusData20get_lastHookResponseEv>:
time_t sysStatusData::get_lastHookResponse() const {
   b57d2:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastHookResponse));
   b57d4:	2120      	movs	r1, #32
   b57d6:	f7ff ffe5 	bl	b57a4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b57da:	bd08      	pop	{r3, pc}

000b57dc <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b57dc:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b57de:	2128      	movs	r1, #40	; 0x28
   b57e0:	f7ff ffe0 	bl	b57a4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b57e4:	bd08      	pop	{r3, pc}

000b57e6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b57e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57e8:	4604      	mov	r4, r0
   b57ea:	3004      	adds	r0, #4
   b57ec:	460d      	mov	r5, r1
   b57ee:	461e      	mov	r6, r3
   b57f0:	4617      	mov	r7, r2
   b57f2:	f7ff fd99 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b57f6:	68e3      	ldr	r3, [r4, #12]
   b57f8:	3b08      	subs	r3, #8
   b57fa:	42ab      	cmp	r3, r5
   b57fc:	d312      	bcc.n	b5824 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b57fe:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5800:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5802:	5958      	ldr	r0, [r3, r5]
   b5804:	6851      	ldr	r1, [r2, #4]
   b5806:	42b1      	cmp	r1, r6
   b5808:	bf08      	it	eq
   b580a:	42b8      	cmpeq	r0, r7
   b580c:	d00a      	beq.n	b5824 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b580e:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5810:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5812:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b5814:	68a5      	ldr	r5, [r4, #8]
   b5816:	f004 fe63 	bl	ba4e0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b581a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b581c:	6823      	ldr	r3, [r4, #0]
   b581e:	4620      	mov	r0, r4
   b5820:	691b      	ldr	r3, [r3, #16]
   b5822:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5824:	6860      	ldr	r0, [r4, #4]
        }
   b5826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b582a:	f004 bf2b 	b.w	ba684 <os_mutex_recursive_unlock>

000b582e <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b582e:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5830:	2128      	movs	r1, #40	; 0x28
   b5832:	f7ff ffd8 	bl	b57e6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5836:	bd08      	pop	{r3, pc}

000b5838 <_ZN17currentStatusData22set_alertTimestampNodeEx>:

time_t currentStatusData::get_alertTimestampNode() const {
    return getValue<time_t>(offsetof(CurrentData, alertTimestampNode));
}

void currentStatusData::set_alertTimestampNode(time_t value) {
   b5838:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b583a:	2148      	movs	r1, #72	; 0x48
   b583c:	f7ff ffd3 	bl	b57e6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5840:	bd08      	pop	{r3, pc}
	...

000b5844 <_GLOBAL__sub_I_fram>:
   b5844:	4b08      	ldr	r3, [pc, #32]	; (b5868 <_GLOBAL__sub_I_fram+0x24>)
   b5846:	2201      	movs	r2, #1

void currentStatusData::logData(const char *msg) {
    Log.info("Current Structure values - %d, %d, %d, %4.2f", currentData.deviceID, currentData.nodeNumber, currentData.internalTempC, currentData.stateOfCharge);
}
   b5848:	b510      	push	{r4, lr}
   b584a:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b584c:	f008 fc6a 	bl	be124 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5850:	4c06      	ldr	r4, [pc, #24]	; (b586c <_GLOBAL__sub_I_fram+0x28>)
   b5852:	4601      	mov	r1, r0
   b5854:	2300      	movs	r3, #0
   b5856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b585a:	4620      	mov	r0, r4
   b585c:	f002 f952 	bl	b7b04 <_ZN6MB85RCC1ER7TwoWireji>
   b5860:	4b03      	ldr	r3, [pc, #12]	; (b5870 <_GLOBAL__sub_I_fram+0x2c>)
   b5862:	6023      	str	r3, [r4, #0]
}
   b5864:	bd10      	pop	{r4, pc}
   b5866:	bf00      	nop
   b5868:	2003e3e3 	.word	0x2003e3e3
   b586c:	2003e3ec 	.word	0x2003e3ec
   b5870:	000bf7d0 	.word	0x000bf7d0

000b5874 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b5874:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b5876:	4913      	ldr	r1, [pc, #76]	; (b58c4 <_Z18initializePinModesv+0x50>)
   b5878:	4813      	ldr	r0, [pc, #76]	; (b58c8 <_Z18initializePinModesv+0x54>)
   b587a:	f7fe fc2f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b587e:	2102      	movs	r1, #2
   b5880:	2004      	movs	r0, #4
   b5882:	f008 fbcd 	bl	be020 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b5886:	2100      	movs	r1, #0
   b5888:	2008      	movs	r0, #8
   b588a:	f008 fbc9 	bl	be020 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b588e:	2101      	movs	r1, #1
   b5890:	2007      	movs	r0, #7
   b5892:	f008 fbc5 	bl	be020 <pinMode>
    pinMode(INT_PIN, INPUT);
   b5896:	2100      	movs	r1, #0
   b5898:	2012      	movs	r0, #18
   b589a:	f008 fbc1 	bl	be020 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b589e:	2101      	movs	r1, #1
   b58a0:	2011      	movs	r0, #17
   b58a2:	f008 fbbd 	bl	be020 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b58a6:	2101      	movs	r1, #1
   b58a8:	2010      	movs	r0, #16
   b58aa:	f008 fbb9 	bl	be020 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b58ae:	2100      	movs	r1, #0
   b58b0:	2010      	movs	r0, #16
   b58b2:	f008 fbc6 	bl	be042 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b58b6:	2100      	movs	r1, #0
   b58b8:	2011      	movs	r0, #17
   b58ba:	f008 fbc2 	bl	be042 <digitalWrite>
    return true;
}
   b58be:	2001      	movs	r0, #1
   b58c0:	bd08      	pop	{r3, pc}
   b58c2:	bf00      	nop
   b58c4:	000bf83c 	.word	0x000bf83c
   b58c8:	2003e658 	.word	0x2003e658

000b58cc <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b58cc:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b58ce:	4918      	ldr	r1, [pc, #96]	; (b5930 <_Z18initializePowerCfgv+0x64>)
   b58d0:	4818      	ldr	r0, [pc, #96]	; (b5934 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b58d2:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b58d4:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b58d6:	f7fe fc01 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b58da:	4622      	mov	r2, r4
   b58dc:	2100      	movs	r1, #0
   b58de:	4668      	mov	r0, sp
   b58e0:	f009 f9e4 	bl	becac <memset>
   b58e4:	4622      	mov	r2, r4
   b58e6:	2100      	movs	r1, #0
   b58e8:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b58ec:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b58f0:	f009 f9dc 	bl	becac <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b58f4:	2100      	movs	r1, #0
   b58f6:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b58fa:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b58fe:	f005 f9af 	bl	bac60 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b5902:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b5906:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b590a:	4b0b      	ldr	r3, [pc, #44]	; (b5938 <_Z18initializePowerCfgv+0x6c>)
   b590c:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b590e:	f241 0370 	movw	r3, #4208	; 0x1070
   b5912:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b5916:	9b00      	ldr	r3, [sp, #0]
   b5918:	2100      	movs	r1, #0
   b591a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b591e:	4668      	mov	r0, sp
   b5920:	9300      	str	r3, [sp, #0]
   b5922:	f005 f99d 	bl	bac60 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b5926:	3800      	subs	r0, #0
   b5928:	bf18      	it	ne
   b592a:	2001      	movne	r0, #1
   b592c:	b010      	add	sp, #64	; 0x40
   b592e:	bd10      	pop	{r4, pc}
   b5930:	000bf855 	.word	0x000bf855
   b5934:	2003e658 	.word	0x2003e658
   b5938:	03840384 	.word	0x03840384

000b593c <_Z20setNodeConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setNodeConfiguration() {
   b593c:	b508      	push	{r3, lr}
  Log.info("Setting values for the node");
   b593e:	4908      	ldr	r1, [pc, #32]	; (b5960 <_Z20setNodeConfigurationv+0x24>)
   b5940:	4808      	ldr	r0, [pc, #32]	; (b5964 <_Z20setNodeConfigurationv+0x28>)
   b5942:	f7fe fbcb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b5946:	f7ff fd43 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b594a:	2101      	movs	r1, #1
   b594c:	f7ff ff1e 	bl	b578c <_ZN13sysStatusData14set_sensorTypeEb>
  // sysStatus.set_deviceID(32148);
  sysStatus.set_frequencyMinutes(10);
   b5950:	f7ff fd3e 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_frequencyMinutes(10);
   b5958:	210a      	movs	r1, #10
   b595a:	f7ff be4c 	b.w	b55f6 <_ZN13sysStatusData20set_frequencyMinutesEt>
   b595e:	bf00      	nop
   b5960:	000bf87a 	.word	0x000bf87a
   b5964:	2003e658 	.word	0x2003e658

000b5968 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b5968:	4770      	bx	lr

000b596a <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b596a:	6a00      	ldr	r0, [r0, #32]
   b596c:	6803      	ldr	r3, [r0, #0]
   b596e:	68db      	ldr	r3, [r3, #12]
   b5970:	4718      	bx	r3
	...

000b5974 <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b5974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5976:	4604      	mov	r4, r0
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.get_frequencyMinutes());
   b5978:	f7ff fd2a 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b597c:	f7ff fdf3 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5980:	4a06      	ldr	r2, [pc, #24]	; (b599c <_Z15reportFrequencyv+0x28>)
   b5982:	4603      	mov	r3, r0
   b5984:	2110      	movs	r1, #16
   b5986:	4668      	mov	r0, sp
   b5988:	f005 fa68 	bl	bae5c <snprintf>
    return reportStr;
   b598c:	4669      	mov	r1, sp
   b598e:	4620      	mov	r0, r4
   b5990:	f007 fdf3 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5994:	4620      	mov	r0, r4
   b5996:	b004      	add	sp, #16
   b5998:	bd10      	pop	{r4, pc}
   b599a:	bf00      	nop
   b599c:	000bf896 	.word	0x000bf896

000b59a0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b59a0:	b530      	push	{r4, r5, lr}
   b59a2:	b085      	sub	sp, #20
   b59a4:	4603      	mov	r3, r0
   b59a6:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b59a8:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b59aa:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b59ac:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b59ae:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b59b0:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b59b2:	f005 fa2b 	bl	bae0c <malloc>
   b59b6:	6028      	str	r0, [r5, #0]
        if (!data) {
   b59b8:	b150      	cbz	r0, b59d0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b59ba:	6822      	ldr	r2, [r4, #0]
   b59bc:	9900      	ldr	r1, [sp, #0]
   b59be:	f009 f94d 	bl	bec5c <memcpy>
        return 0;
   b59c2:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b59c4:	4668      	mov	r0, sp
   b59c6:	f007 fd8d 	bl	bd4e4 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b59ca:	4620      	mov	r0, r4
   b59cc:	b005      	add	sp, #20
   b59ce:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b59d0:	4c00      	ldr	r4, [pc, #0]	; (b59d4 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b59d2:	e7f7      	b.n	b59c4 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b59d4:	fffffefc 	.word	0xfffffefc

000b59d8 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b59d8:	2300      	movs	r3, #0
   b59da:	2204      	movs	r2, #4
   b59dc:	f005 b95e 	b.w	bac9c <spark_variable>

000b59e0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b59e0:	4b0a      	ldr	r3, [pc, #40]	; (b5a0c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b59e2:	b510      	push	{r4, lr}
   b59e4:	4604      	mov	r4, r0
   b59e6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b59e8:	f006 fbee 	bl	bc1c8 <_ZN5spark10LogManager8instanceEv>
   b59ec:	4621      	mov	r1, r4
   b59ee:	f006 fdf2 	bl	bc5d6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b59f2:	f008 f9fd 	bl	bddf0 <_Z16_fetch_usbserialv>
   b59f6:	f008 f9ed 	bl	bddd4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b59fa:	4620      	mov	r0, r4
   b59fc:	4b04      	ldr	r3, [pc, #16]	; (b5a10 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b59fe:	f840 3b04 	str.w	r3, [r0], #4
   b5a02:	f006 fc83 	bl	bc30c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b5a06:	4620      	mov	r0, r4
   b5a08:	bd10      	pop	{r4, pc}
   b5a0a:	bf00      	nop
   b5a0c:	000bfb5c 	.word	0x000bfb5c
   b5a10:	000bfb44 	.word	0x000bfb44

000b5a14 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b5a14:	b510      	push	{r4, lr}
   b5a16:	4604      	mov	r4, r0
    }
   b5a18:	f7ff ffe2 	bl	b59e0 <_ZN5spark16SerialLogHandlerD1Ev>
   b5a1c:	4620      	mov	r0, r4
   b5a1e:	2124      	movs	r1, #36	; 0x24
   b5a20:	f7fe fb3d 	bl	b409e <_ZdlPvj>
   b5a24:	4620      	mov	r0, r4
   b5a26:	bd10      	pop	{r4, pc}

000b5a28 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b5a28:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b5a2a:	2301      	movs	r3, #1
   b5a2c:	2208      	movs	r2, #8
   b5a2e:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b5a32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5a36:	2300      	movs	r3, #0
   b5a38:	4341      	muls	r1, r0
   b5a3a:	466a      	mov	r2, sp
   b5a3c:	4618      	mov	r0, r3
   b5a3e:	f005 f96d 	bl	bad1c <spark_set_connection_property>
    }
   b5a42:	b003      	add	sp, #12
   b5a44:	f85d fb04 	ldr.w	pc, [sp], #4

000b5a48 <_Z18particleInitializev>:
 * @brief Initializes the Particle functions and variables
 * 
 * @details If new particles of functions are defined, they need to be initialized here
 * 
 */
void particleInitialize() {
   b5a48:	b510      	push	{r4, lr}
   b5a4a:	b08c      	sub	sp, #48	; 0x30
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5a4c:	4b36      	ldr	r3, [pc, #216]	; (b5b28 <_Z18particleInitializev+0xe0>)
   b5a4e:	9304      	str	r3, [sp, #16]
   b5a50:	4b36      	ldr	r3, [pc, #216]	; (b5b2c <_Z18particleInitializev+0xe4>)
   b5a52:	9305      	str	r3, [sp, #20]
   b5a54:	4b36      	ldr	r3, [pc, #216]	; (b5b30 <_Z18particleInitializev+0xe8>)
   b5a56:	9306      	str	r3, [sp, #24]
   b5a58:	4b36      	ldr	r3, [pc, #216]	; (b5b34 <_Z18particleInitializev+0xec>)
   b5a5a:	9307      	str	r3, [sp, #28]
   b5a5c:	4b36      	ldr	r3, [pc, #216]	; (b5b38 <_Z18particleInitializev+0xf0>)
   b5a5e:	9308      	str	r3, [sp, #32]
   b5a60:	4b36      	ldr	r3, [pc, #216]	; (b5b3c <_Z18particleInitializev+0xf4>)

  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b5a62:	4937      	ldr	r1, [pc, #220]	; (b5b40 <_Z18particleInitializev+0xf8>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5a64:	9309      	str	r3, [sp, #36]	; 0x24
   b5a66:	2400      	movs	r4, #0
   b5a68:	4b36      	ldr	r3, [pc, #216]	; (b5b44 <_Z18particleInitializev+0xfc>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b5a6a:	4837      	ldr	r0, [pc, #220]	; (b5b48 <_Z18particleInitializev+0x100>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5a6c:	930a      	str	r3, [sp, #40]	; 0x28
   b5a6e:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b5a70:	f7fe fb34 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  Particle.variable("Low Power Mode",(sysStatus.get_lowPowerMode()) ? "Yes" : "No");
   b5a74:	f7ff fcac 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5a78:	f7ff fe5a 	bl	b5730 <_ZNK13sysStatusData16get_lowPowerModeEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5a7c:	4a33      	ldr	r2, [pc, #204]	; (b5b4c <_Z18particleInitializev+0x104>)
   b5a7e:	4934      	ldr	r1, [pc, #208]	; (b5b50 <_Z18particleInitializev+0x108>)
   b5a80:	42a0      	cmp	r0, r4
   b5a82:	bf18      	it	ne
   b5a84:	4611      	movne	r1, r2
   b5a86:	4833      	ldr	r0, [pc, #204]	; (b5b54 <_Z18particleInitializev+0x10c>)
   b5a88:	f7ff ffa6 	bl	b59d8 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5a8c:	4932      	ldr	r1, [pc, #200]	; (b5b58 <_Z18particleInitializev+0x110>)
   b5a8e:	4833      	ldr	r0, [pc, #204]	; (b5b5c <_Z18particleInitializev+0x114>)
   b5a90:	f7ff ffa2 	bl	b59d8 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5a94:	4932      	ldr	r1, [pc, #200]	; (b5b60 <_Z18particleInitializev+0x118>)
   b5a96:	4833      	ldr	r0, [pc, #204]	; (b5b64 <_Z18particleInitializev+0x11c>)
   b5a98:	f7ff ff9e 	bl	b59d8 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
  Particle.variable("Release",currentPointRelease);   
  Particle.variable("Signal", signalStr);
  Particle.variable("stateOfChg", current.get_stateOfCharge());
   b5a9c:	f7ff fce8 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b5aa0:	f7ff fd02 	bl	b54a8 <_ZNK17currentStatusData17get_stateOfChargeEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5aa4:	4623      	mov	r3, r4
   b5aa6:	2209      	movs	r2, #9
   b5aa8:	4669      	mov	r1, sp
   b5aaa:	482f      	ldr	r0, [pc, #188]	; (b5b68 <_Z18particleInitializev+0x120>)
   b5aac:	ed8d 0b00 	vstr	d0, [sp]
   b5ab0:	f005 f8f4 	bl	bac9c <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.get_batteryState()]);
   b5ab4:	f7ff fcdc 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b5ab8:	f7ff fde2 	bl	b5680 <_ZNK17currentStatusData16get_batteryStateEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5abc:	ab0c      	add	r3, sp, #48	; 0x30
   b5abe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b5ac2:	f850 1c20 	ldr.w	r1, [r0, #-32]
   b5ac6:	4829      	ldr	r0, [pc, #164]	; (b5b6c <_Z18particleInitializev+0x124>)
   b5ac8:	f7ff ff86 	bl	b59d8 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        extra.size = sizeof(extra);
   b5acc:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b5ace:	e9cd 4400 	strd	r4, r4, [sp]
        extra.size = sizeof(extra);
   b5ad2:	f8ad 3000 	strh.w	r3, [sp]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5ad6:	4b26      	ldr	r3, [pc, #152]	; (b5b70 <_Z18particleInitializev+0x128>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b5ad8:	4926      	ldr	r1, [pc, #152]	; (b5b74 <_Z18particleInitializev+0x12c>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5ada:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b5adc:	2204      	movs	r2, #4
   b5ade:	466b      	mov	r3, sp
   b5ae0:	4825      	ldr	r0, [pc, #148]	; (b5b78 <_Z18particleInitializev+0x130>)
   b5ae2:	f005 f8db 	bl	bac9c <spark_variable>
  Particle.variable("Reporting Frequency", reportFrequency);
  Particle.variable("SIM Card", (sysStatus.get_verizonSIM()) ? "Verizon" : "Particle");
   b5ae6:	f7ff fc73 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5aea:	f7ff fe26 	bl	b573a <_ZNK13sysStatusData14get_verizonSIMEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5aee:	4a23      	ldr	r2, [pc, #140]	; (b5b7c <_Z18particleInitializev+0x134>)
   b5af0:	4923      	ldr	r1, [pc, #140]	; (b5b80 <_Z18particleInitializev+0x138>)
   b5af2:	42a0      	cmp	r0, r4
   b5af4:	bf18      	it	ne
   b5af6:	4611      	movne	r1, r2
   b5af8:	4822      	ldr	r0, [pc, #136]	; (b5b84 <_Z18particleInitializev+0x13c>)
   b5afa:	f7ff ff6d 	bl	b59d8 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b5afe:	4a22      	ldr	r2, [pc, #136]	; (b5b88 <_Z18particleInitializev+0x140>)
   b5b00:	4922      	ldr	r1, [pc, #136]	; (b5b8c <_Z18particleInitializev+0x144>)
   b5b02:	4823      	ldr	r0, [pc, #140]	; (b5b90 <_Z18particleInitializev+0x148>)
   b5b04:	f005 fbbf 	bl	bb286 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5b08:	4a22      	ldr	r2, [pc, #136]	; (b5b94 <_Z18particleInitializev+0x14c>)
   b5b0a:	4923      	ldr	r1, [pc, #140]	; (b5b98 <_Z18particleInitializev+0x150>)
   b5b0c:	4820      	ldr	r0, [pc, #128]	; (b5b90 <_Z18particleInitializev+0x148>)
   b5b0e:	f005 fbba 	bl	bb286 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5b12:	4a1c      	ldr	r2, [pc, #112]	; (b5b84 <_Z18particleInitializev+0x13c>)
   b5b14:	4921      	ldr	r1, [pc, #132]	; (b5b9c <_Z18particleInitializev+0x154>)
   b5b16:	481e      	ldr	r0, [pc, #120]	; (b5b90 <_Z18particleInitializev+0x148>)
   b5b18:	f005 fbb5 	bl	bb286 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  */

  takeMeasurements();                               // Initialize sensor values

  // makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
}
   b5b1c:	b00c      	add	sp, #48	; 0x30
   b5b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  takeMeasurements();                               // Initialize sensor values
   b5b22:	f000 bba7 	b.w	b6274 <_Z16takeMeasurementsv>
   b5b26:	bf00      	nop
   b5b28:	000bf8b0 	.word	0x000bf8b0
   b5b2c:	000bf8b8 	.word	0x000bf8b8
   b5b30:	000bf8bc 	.word	0x000bf8bc
   b5b34:	000bf8c5 	.word	0x000bf8c5
   b5b38:	000bf8cd 	.word	0x000bf8cd
   b5b3c:	000bf8d9 	.word	0x000bf8d9
   b5b40:	000bf8eb 	.word	0x000bf8eb
   b5b44:	000bf8df 	.word	0x000bf8df
   b5b48:	2003e658 	.word	0x2003e658
   b5b4c:	000bf8a1 	.word	0x000bf8a1
   b5b50:	000bf8a5 	.word	0x000bf8a5
   b5b54:	000bf919 	.word	0x000bf919
   b5b58:	2003dd70 	.word	0x2003dd70
   b5b5c:	000bf928 	.word	0x000bf928
   b5b60:	2003de3c 	.word	0x2003de3c
   b5b64:	000bf930 	.word	0x000bf930
   b5b68:	000bf937 	.word	0x000bf937
   b5b6c:	000bf942 	.word	0x000bf942
   b5b70:	000b59a1 	.word	0x000b59a1
   b5b74:	000b5975 	.word	0x000b5975
   b5b78:	000bf951 	.word	0x000bf951
   b5b7c:	000bf8a8 	.word	0x000bf8a8
   b5b80:	000bfab6 	.word	0x000bfab6
   b5b84:	000bf965 	.word	0x000bf965
   b5b88:	000bf96e 	.word	0x000bf96e
   b5b8c:	000b5c65 	.word	0x000b5c65
   b5b90:	000bb25b 	.word	0x000bb25b
   b5b94:	000bf97c 	.word	0x000bf97c
   b5b98:	000b5bcd 	.word	0x000b5bcd
   b5b9c:	000b5d39 	.word	0x000b5d39

000b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5ba0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5ba2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5ba4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5ba6:	b17c      	cbz	r4, b5bc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5ba8:	6863      	ldr	r3, [r4, #4]
   b5baa:	3b01      	subs	r3, #1
   b5bac:	6063      	str	r3, [r4, #4]
   b5bae:	b95b      	cbnz	r3, b5bc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5bb0:	6823      	ldr	r3, [r4, #0]
   b5bb2:	4620      	mov	r0, r4
   b5bb4:	689b      	ldr	r3, [r3, #8]
   b5bb6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5bb8:	68a3      	ldr	r3, [r4, #8]
   b5bba:	3b01      	subs	r3, #1
   b5bbc:	60a3      	str	r3, [r4, #8]
   b5bbe:	b91b      	cbnz	r3, b5bc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5bc0:	6823      	ldr	r3, [r4, #0]
   b5bc2:	4620      	mov	r0, r4
   b5bc4:	68db      	ldr	r3, [r3, #12]
   b5bc6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5bc8:	4628      	mov	r0, r5
   b5bca:	bd38      	pop	{r3, r4, r5, pc}

000b5bcc <_Z12setFrequency6String>:
 * sets an interim value for reporting frequency which takes effect once sent to a new node.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setFrequency(String command)
{
   b5bcc:	b530      	push	{r4, r5, lr}
   b5bce:	b0c7      	sub	sp, #284	; 0x11c
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b5bd0:	6800      	ldr	r0, [r0, #0]
   b5bd2:	220a      	movs	r2, #10
   b5bd4:	a903      	add	r1, sp, #12
   b5bd6:	f009 fa15 	bl	bf004 <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b5bda:	2878      	cmp	r0, #120	; 0x78
   b5bdc:	d831      	bhi.n	b5c42 <_Z12setFrequency6String+0x76>
  updatedFrequencyMins = tempTime;
   b5bde:	4d1a      	ldr	r5, [pc, #104]	; (b5c48 <_Z12setFrequency6String+0x7c>)
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b5be0:	280b      	cmp	r0, #11
  updatedFrequencyMins = tempTime;
   b5be2:	8028      	strh	r0, [r5, #0]
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b5be4:	dc0d      	bgt.n	b5c02 <_Z12setFrequency6String+0x36>
   b5be6:	f7ff fbf3 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5bea:	f7ff fda1 	bl	b5730 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5bee:	b140      	cbz	r0, b5c02 <_Z12setFrequency6String+0x36>
    Log.info("Short reporting frequency over-rides low power");
   b5bf0:	4916      	ldr	r1, [pc, #88]	; (b5c4c <_Z12setFrequency6String+0x80>)
   b5bf2:	4817      	ldr	r0, [pc, #92]	; (b5c50 <_Z12setFrequency6String+0x84>)
   b5bf4:	f7fe fa72 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_lowPowerMode(false);
   b5bf8:	f7ff fbea 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5bfc:	2100      	movs	r1, #0
   b5bfe:	f7ff fdbf 	bl	b5780 <_ZN13sysStatusData16set_lowPowerModeEb>
  }
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b5c02:	4b14      	ldr	r3, [pc, #80]	; (b5c54 <_Z12setFrequency6String+0x88>)
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b5c04:	4a14      	ldr	r2, [pc, #80]	; (b5c58 <_Z12setFrequency6String+0x8c>)
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b5c06:	2401      	movs	r4, #1
   b5c08:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b5c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5c0e:	882b      	ldrh	r3, [r5, #0]
   b5c10:	a806      	add	r0, sp, #24
   b5c12:	f005 f923 	bl	bae5c <snprintf>
  Log.info(data);
   b5c16:	480e      	ldr	r0, [pc, #56]	; (b5c50 <_Z12setFrequency6String+0x84>)
   b5c18:	a906      	add	r1, sp, #24
   b5c1a:	f7fe fa5f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5c1e:	f005 f85d 	bl	bacdc <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b5c22:	b160      	cbz	r0, b5c3e <_Z12setFrequency6String+0x72>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5c24:	4b0d      	ldr	r3, [pc, #52]	; (b5c5c <_Z12setFrequency6String+0x90>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5c26:	490e      	ldr	r1, [pc, #56]	; (b5c60 <_Z12setFrequency6String+0x94>)
   b5c28:	781b      	ldrb	r3, [r3, #0]
   b5c2a:	f88d 3000 	strb.w	r3, [sp]
   b5c2e:	a804      	add	r0, sp, #16
   b5c30:	233c      	movs	r3, #60	; 0x3c
   b5c32:	aa06      	add	r2, sp, #24
   b5c34:	f005 fc38 	bl	bb4a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5c38:	a805      	add	r0, sp, #20
   b5c3a:	f7ff ffb1 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b5c3e:	4620      	mov	r0, r4
   b5c40:	e000      	b.n	b5c44 <_Z12setFrequency6String+0x78>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b5c42:	2000      	movs	r0, #0
}
   b5c44:	b047      	add	sp, #284	; 0x11c
   b5c46:	bd30      	pop	{r4, r5, pc}
   b5c48:	2003de0c 	.word	0x2003de0c
   b5c4c:	000bf98a 	.word	0x000bf98a
   b5c50:	2003e658 	.word	0x2003e658
   b5c54:	2003e409 	.word	0x2003e409
   b5c58:	000bf9b9 	.word	0x000bf9b9
   b5c5c:	2003e408 	.word	0x2003e408
   b5c60:	000bf9f9 	.word	0x000bf9f9

000b5c64 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   b5c64:	b510      	push	{r4, lr}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5c66:	492a      	ldr	r1, [pc, #168]	; (b5d10 <_Z15setLowPowerMode6String+0xac>)
   b5c68:	b094      	sub	sp, #80	; 0x50
   b5c6a:	4604      	mov	r4, r0
   b5c6c:	f007 fd3e 	bl	bd6ec <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b5c70:	b158      	cbz	r0, b5c8a <_Z15setLowPowerMode6String+0x26>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5c72:	4620      	mov	r0, r4
   b5c74:	4926      	ldr	r1, [pc, #152]	; (b5d10 <_Z15setLowPowerMode6String+0xac>)
   b5c76:	f007 fd39 	bl	bd6ec <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   b5c7a:	4604      	mov	r4, r0
   b5c7c:	b968      	cbnz	r0, b5c9a <_Z15setLowPowerMode6String+0x36>
      sysStatus.set_frequencyMinutes(12);
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.set_lowPowerMode(false);
   b5c7e:	f7ff fba7 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5c82:	4621      	mov	r1, r4
   b5c84:	f7ff fd7c 	bl	b5780 <_ZN13sysStatusData16set_lowPowerModeEb>
   b5c88:	e01e      	b.n	b5cc8 <_Z15setLowPowerMode6String+0x64>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5c8a:	4922      	ldr	r1, [pc, #136]	; (b5d14 <_Z15setLowPowerMode6String+0xb0>)
   b5c8c:	4620      	mov	r0, r4
   b5c8e:	f007 fd2d 	bl	bd6ec <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b5c92:	2800      	cmp	r0, #0
   b5c94:	d1ed      	bne.n	b5c72 <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   b5c96:	b014      	add	sp, #80	; 0x50
   b5c98:	bd10      	pop	{r4, pc}
    sysStatus.set_lowPowerMode(true);
   b5c9a:	f7ff fb99 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5c9e:	2101      	movs	r1, #1
   b5ca0:	f7ff fd6e 	bl	b5780 <_ZN13sysStatusData16set_lowPowerModeEb>
    if (sysStatus.get_frequencyMinutes() < 12 ) {                          // Need to increase reporting frequency to at least 12 mins for low power
   b5ca4:	f7ff fb94 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5ca8:	f7ff fc5d 	bl	b5566 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5cac:	280b      	cmp	r0, #11
   b5cae:	d80b      	bhi.n	b5cc8 <_Z15setLowPowerMode6String+0x64>
      Log.info("Increasing reporting frequency to 12 minutes");
   b5cb0:	4919      	ldr	r1, [pc, #100]	; (b5d18 <_Z15setLowPowerMode6String+0xb4>)
   b5cb2:	481a      	ldr	r0, [pc, #104]	; (b5d1c <_Z15setLowPowerMode6String+0xb8>)
   b5cb4:	f7fe fa12 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.set_frequencyMinutes(12);
   b5cb8:	f7ff fb8a 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5cbc:	210c      	movs	r1, #12
   b5cbe:	f7ff fc9a 	bl	b55f6 <_ZN13sysStatusData20set_frequencyMinutesEt>
      frequencyUpdated = true;
   b5cc2:	4b17      	ldr	r3, [pc, #92]	; (b5d20 <_Z15setLowPowerMode6String+0xbc>)
   b5cc4:	2201      	movs	r2, #1
   b5cc6:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.get_lowPowerMode()) ? "yes" : "no");
   b5cc8:	f7ff fb82 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5ccc:	f7ff fd30 	bl	b5730 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5cd0:	4914      	ldr	r1, [pc, #80]	; (b5d24 <_Z15setLowPowerMode6String+0xc0>)
   b5cd2:	4b15      	ldr	r3, [pc, #84]	; (b5d28 <_Z15setLowPowerMode6String+0xc4>)
   b5cd4:	4a15      	ldr	r2, [pc, #84]	; (b5d2c <_Z15setLowPowerMode6String+0xc8>)
   b5cd6:	2800      	cmp	r0, #0
   b5cd8:	bf18      	it	ne
   b5cda:	460b      	movne	r3, r1
   b5cdc:	2140      	movs	r1, #64	; 0x40
   b5cde:	a804      	add	r0, sp, #16
   b5ce0:	f005 f8bc 	bl	bae5c <snprintf>
  Log.info(data);
   b5ce4:	480d      	ldr	r0, [pc, #52]	; (b5d1c <_Z15setLowPowerMode6String+0xb8>)
   b5ce6:	a904      	add	r1, sp, #16
   b5ce8:	f7fe f9f8 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5cec:	f004 fff6 	bl	bacdc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b5cf0:	b160      	cbz	r0, b5d0c <_Z15setLowPowerMode6String+0xa8>
   b5cf2:	4b0f      	ldr	r3, [pc, #60]	; (b5d30 <_Z15setLowPowerMode6String+0xcc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5cf4:	490f      	ldr	r1, [pc, #60]	; (b5d34 <_Z15setLowPowerMode6String+0xd0>)
   b5cf6:	781b      	ldrb	r3, [r3, #0]
   b5cf8:	f88d 3000 	strb.w	r3, [sp]
   b5cfc:	a802      	add	r0, sp, #8
   b5cfe:	233c      	movs	r3, #60	; 0x3c
   b5d00:	aa04      	add	r2, sp, #16
   b5d02:	f005 fbd1 	bl	bb4a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5d06:	a803      	add	r0, sp, #12
   b5d08:	f7ff ff4a 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b5d0c:	2001      	movs	r0, #1
   b5d0e:	e7c2      	b.n	b5c96 <_Z15setLowPowerMode6String+0x32>
   b5d10:	000bfba8 	.word	0x000bfba8
   b5d14:	000bfea0 	.word	0x000bfea0
   b5d18:	000bfa05 	.word	0x000bfa05
   b5d1c:	2003e658 	.word	0x2003e658
   b5d20:	2003e409 	.word	0x2003e409
   b5d24:	000bf9fe 	.word	0x000bf9fe
   b5d28:	000bfa02 	.word	0x000bfa02
   b5d2c:	000bfa32 	.word	0x000bfa32
   b5d30:	2003e408 	.word	0x2003e408
   b5d34:	000bf923 	.word	0x000bf923

000b5d38 <_Z13setVerizonSIM6String>:
 * 
 * @param command  - 1 for Verizon and 0 for Particle (default)
 * @return int 
 */
int setVerizonSIM(String command)                                   // If we are using a Verizon SIM, we will need to execute "keepAlive" calls in the main loop when not in low power mode
{
   b5d38:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5d3a:	491e      	ldr	r1, [pc, #120]	; (b5db4 <_Z13setVerizonSIM6String+0x7c>)
   b5d3c:	b085      	sub	sp, #20
   b5d3e:	4605      	mov	r5, r0
   b5d40:	f007 fcd4 	bl	bd6ec <_ZNK6String6equalsEPKc>
  if (command == "1")
   b5d44:	4604      	mov	r4, r0
   b5d46:	b1d8      	cbz	r0, b5d80 <_Z13setVerizonSIM6String+0x48>
  {
    sysStatus.set_verizonSIM(true);
   b5d48:	f7ff fb42 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5d4c:	2101      	movs	r1, #1
   b5d4e:	f7ff fd23 	bl	b5798 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(60);                                         // send a ping every minute
   b5d52:	203c      	movs	r0, #60	; 0x3c
   b5d54:	f7ff fe68 	bl	b5a28 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5d58:	f004 ffc0 	bl	bacdc <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   b5d5c:	b910      	cbnz	r0, b5d64 <_Z13setVerizonSIM6String+0x2c>
  else if (command == "0")
  {
    sysStatus.set_verizonSIM(false);
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
    return 1;
   b5d5e:	2001      	movs	r0, #1
  }
  else return 0;
}
   b5d60:	b005      	add	sp, #20
   b5d62:	bd30      	pop	{r4, r5, pc}
   b5d64:	4b14      	ldr	r3, [pc, #80]	; (b5db8 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5d66:	4a15      	ldr	r2, [pc, #84]	; (b5dbc <_Z13setVerizonSIM6String+0x84>)
   b5d68:	781b      	ldrb	r3, [r3, #0]
   b5d6a:	f88d 3000 	strb.w	r3, [sp]
   b5d6e:	233c      	movs	r3, #60	; 0x3c
   b5d70:	a802      	add	r0, sp, #8
   b5d72:	4913      	ldr	r1, [pc, #76]	; (b5dc0 <_Z13setVerizonSIM6String+0x88>)
   b5d74:	f005 fb98 	bl	bb4a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5d78:	a803      	add	r0, sp, #12
   b5d7a:	f7ff ff11 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d7e:	e7ee      	b.n	b5d5e <_Z13setVerizonSIM6String+0x26>
   b5d80:	4910      	ldr	r1, [pc, #64]	; (b5dc4 <_Z13setVerizonSIM6String+0x8c>)
   b5d82:	4628      	mov	r0, r5
   b5d84:	f007 fcb2 	bl	bd6ec <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b5d88:	2800      	cmp	r0, #0
   b5d8a:	d0e9      	beq.n	b5d60 <_Z13setVerizonSIM6String+0x28>
    sysStatus.set_verizonSIM(false);
   b5d8c:	f7ff fb20 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b5d90:	4621      	mov	r1, r4
   b5d92:	f7ff fd01 	bl	b5798 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b5d96:	f240 5064 	movw	r0, #1380	; 0x564
   b5d9a:	f7ff fe45 	bl	b5a28 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5d9e:	f004 ff9d 	bl	bacdc <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   b5da2:	2800      	cmp	r0, #0
   b5da4:	d0db      	beq.n	b5d5e <_Z13setVerizonSIM6String+0x26>
   b5da6:	4b04      	ldr	r3, [pc, #16]	; (b5db8 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5da8:	4a07      	ldr	r2, [pc, #28]	; (b5dc8 <_Z13setVerizonSIM6String+0x90>)
   b5daa:	781b      	ldrb	r3, [r3, #0]
   b5dac:	f88d 3000 	strb.w	r3, [sp]
   b5db0:	233c      	movs	r3, #60	; 0x3c
   b5db2:	e7dd      	b.n	b5d70 <_Z13setVerizonSIM6String+0x38>
   b5db4:	000bfba8 	.word	0x000bfba8
   b5db8:	2003e408 	.word	0x2003e408
   b5dbc:	000bfa4c 	.word	0x000bfa4c
   b5dc0:	000bf923 	.word	0x000bf923
   b5dc4:	000bfea0 	.word	0x000bfea0
   b5dc8:	000bfa5f 	.word	0x000bfa5f

000b5dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5dcc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5dce:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5dd2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5dd4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5dd6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5dda:	42ae      	cmp	r6, r5
   b5ddc:	d004      	beq.n	b5de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5dde:	4628      	mov	r0, r5
   b5de0:	f007 fb80 	bl	bd4e4 <_ZN6StringD1Ev>
   b5de4:	3514      	adds	r5, #20
   b5de6:	e7f8      	b.n	b5dda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5de8:	6820      	ldr	r0, [r4, #0]
   b5dea:	f005 f817 	bl	bae1c <free>
    AllocatorT::free(data_);
}
   b5dee:	4620      	mov	r0, r4
   b5df0:	bd70      	pop	{r4, r5, r6, pc}

000b5df2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5df2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5df6:	4604      	mov	r4, r0
   b5df8:	460d      	mov	r5, r1
   b5dfa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5dfc:	d916      	bls.n	b5e2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5dfe:	4290      	cmp	r0, r2
   b5e00:	d215      	bcs.n	b5e2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5e02:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5e06:	1a75      	subs	r5, r6, r1
   b5e08:	f1a1 0714 	sub.w	r7, r1, #20
   b5e0c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5e0e:	42b7      	cmp	r7, r6
   b5e10:	d01c      	beq.n	b5e4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5e12:	b12c      	cbz	r4, b5e20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5e14:	4631      	mov	r1, r6
   b5e16:	4620      	mov	r0, r4
   b5e18:	f007 fbe0 	bl	bd5dc <_ZN6StringC1EOS_>
   b5e1c:	7c33      	ldrb	r3, [r6, #16]
   b5e1e:	7423      	strb	r3, [r4, #16]
   b5e20:	4630      	mov	r0, r6
   b5e22:	f007 fb5f 	bl	bd4e4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5e26:	3e14      	subs	r6, #20
   b5e28:	3c14      	subs	r4, #20
   b5e2a:	e7f0      	b.n	b5e0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5e2c:	d00e      	beq.n	b5e4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5e2e:	42b5      	cmp	r5, r6
   b5e30:	d00c      	beq.n	b5e4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5e32:	b12c      	cbz	r4, b5e40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5e34:	4629      	mov	r1, r5
   b5e36:	4620      	mov	r0, r4
   b5e38:	f007 fbd0 	bl	bd5dc <_ZN6StringC1EOS_>
   b5e3c:	7c2b      	ldrb	r3, [r5, #16]
   b5e3e:	7423      	strb	r3, [r4, #16]
   b5e40:	4628      	mov	r0, r5
   b5e42:	f007 fb4f 	bl	bd4e4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5e46:	3514      	adds	r5, #20
   b5e48:	3414      	adds	r4, #20
   b5e4a:	e7f0      	b.n	b5e2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5e52:	2300      	movs	r3, #0
   b5e54:	e9c0 3300 	strd	r3, r3, [r0]
   b5e58:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5e5a:	684f      	ldr	r7, [r1, #4]
   b5e5c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5e5e:	4604      	mov	r4, r0
   b5e60:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5e62:	dd23      	ble.n	b5eac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5e64:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5e68:	fb08 f007 	mul.w	r0, r8, r7
   b5e6c:	f004 ffce 	bl	bae0c <malloc>
            if (!d) {
   b5e70:	4605      	mov	r5, r0
   b5e72:	b1d8      	cbz	r0, b5eac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5e74:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5e78:	fb08 1202 	mla	r2, r8, r2, r1
   b5e7c:	f7ff ffb9 	bl	b5df2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5e80:	6820      	ldr	r0, [r4, #0]
   b5e82:	f004 ffcb 	bl	bae1c <free>
        data_ = d;
   b5e86:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5e88:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5e8a:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5e8e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5e92:	45b8      	cmp	r8, r7
   b5e94:	d008      	beq.n	b5ea8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5e96:	4639      	mov	r1, r7
   b5e98:	4628      	mov	r0, r5
   b5e9a:	f007 fbb9 	bl	bd610 <_ZN6StringC1ERKS_>
   b5e9e:	7c3b      	ldrb	r3, [r7, #16]
   b5ea0:	742b      	strb	r3, [r5, #16]
   b5ea2:	3714      	adds	r7, #20
   b5ea4:	3514      	adds	r5, #20
   b5ea6:	e7f4      	b.n	b5e92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5ea8:	6873      	ldr	r3, [r6, #4]
   b5eaa:	6063      	str	r3, [r4, #4]
}
   b5eac:	4620      	mov	r0, r4
   b5eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5eb4 <_GLOBAL__sub_I_SystemMode>:
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }

  else return 0;
   b5eb4:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b5eb6:	4b27      	ldr	r3, [pc, #156]	; (b5f54 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b5eb8:	4a27      	ldr	r2, [pc, #156]	; (b5f58 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b5eba:	2501      	movs	r5, #1
   b5ebc:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5ebe:	4b27      	ldr	r3, [pc, #156]	; (b5f5c <_GLOBAL__sub_I_SystemMode+0xa8>)
   b5ec0:	2400      	movs	r4, #0
   b5ec2:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b5ec4:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5ec6:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5eca:	2002      	movs	r0, #2
   b5ecc:	f004 fe74 	bl	babb8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b5ed0:	4621      	mov	r1, r4
   b5ed2:	4628      	mov	r0, r5
   b5ed4:	f004 fe88 	bl	babe8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b5ed8:	4629      	mov	r1, r5
   b5eda:	2004      	movs	r0, #4
   b5edc:	f004 fbea 	bl	ba6b4 <HAL_Feature_Set>
        capacity_(0) {
   b5ee0:	e9cd 4400 	strd	r4, r4, [sp]
   b5ee4:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b5ee6:	f007 ff83 	bl	bddf0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b5eea:	4c1d      	ldr	r4, [pc, #116]	; (b5f60 <_GLOBAL__sub_I_SystemMode+0xac>)
   b5eec:	4605      	mov	r5, r0
   b5eee:	4669      	mov	r1, sp
   b5ef0:	a803      	add	r0, sp, #12
   b5ef2:	f7ff ffac 	bl	b5e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5ef6:	4626      	mov	r6, r4
        stream_(&stream) {
   b5ef8:	a903      	add	r1, sp, #12
   b5efa:	a806      	add	r0, sp, #24
   b5efc:	f7ff ffa7 	bl	b5e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5f00:	4b18      	ldr	r3, [pc, #96]	; (b5f64 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b5f02:	f846 3b04 	str.w	r3, [r6], #4
   b5f06:	a906      	add	r1, sp, #24
   b5f08:	a809      	add	r0, sp, #36	; 0x24
   b5f0a:	f7ff ffa0 	bl	b5e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5f0e:	aa09      	add	r2, sp, #36	; 0x24
   b5f10:	211e      	movs	r1, #30
   b5f12:	4630      	mov	r0, r6
   b5f14:	f006 fc42 	bl	bc79c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5f18:	a809      	add	r0, sp, #36	; 0x24
   b5f1a:	f7ff ff57 	bl	b5dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5f1e:	a806      	add	r0, sp, #24
   b5f20:	f7ff ff54 	bl	b5dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5f24:	4b10      	ldr	r3, [pc, #64]	; (b5f68 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b5f26:	6023      	str	r3, [r4, #0]
   b5f28:	6225      	str	r5, [r4, #32]
   b5f2a:	a803      	add	r0, sp, #12
   b5f2c:	f7ff ff4e 	bl	b5dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5f30:	4b0e      	ldr	r3, [pc, #56]	; (b5f6c <_GLOBAL__sub_I_SystemMode+0xb8>)
   b5f32:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5f34:	f007 ff5c 	bl	bddf0 <_Z16_fetch_usbserialv>
   b5f38:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5f3c:	f007 ff46 	bl	bddcc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5f40:	f006 f942 	bl	bc1c8 <_ZN5spark10LogManager8instanceEv>
   b5f44:	4621      	mov	r1, r4
   b5f46:	f006 faff 	bl	bc548 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b5f4a:	4668      	mov	r0, sp
   b5f4c:	f7ff ff3e 	bl	b5dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5f50:	b00c      	add	sp, #48	; 0x30
   b5f52:	bd70      	pop	{r4, r5, r6, pc}
   b5f54:	2003e408 	.word	0x2003e408
   b5f58:	ffff0000 	.word	0xffff0000
   b5f5c:	2003e3fc 	.word	0x2003e3fc
   b5f60:	2003e40c 	.word	0x2003e40c
   b5f64:	000bfb44 	.word	0x000bfb44
   b5f68:	000c080c 	.word	0x000c080c
   b5f6c:	000bfb5c 	.word	0x000bfb5c

000b5f70 <_Z22disconnectFromParticlev>:
{
   b5f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5f74:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b5f76:	f007 fe54 	bl	bdc22 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b5f7a:	4943      	ldr	r1, [pc, #268]	; (b6088 <_Z22disconnectFromParticlev+0x118>)
  time_t startTime = Time.now();
   b5f7c:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b5f7e:	4843      	ldr	r0, [pc, #268]	; (b608c <_Z22disconnectFromParticlev+0x11c>)
   b5f80:	f7fe f8ac 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b5f84:	4b42      	ldr	r3, [pc, #264]	; (b6090 <_Z22disconnectFromParticlev+0x120>)
   b5f86:	8818      	ldrh	r0, [r3, #0]
   b5f88:	f005 fd60 	bl	bba4c <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b5f8c:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b5f8e:	a801      	add	r0, sp, #4
   b5f90:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b5f94:	f8ad 400c 	strh.w	r4, [sp, #12]
   b5f98:	f005 f986 	bl	bb2a8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	f004 fbb9 	bl	ba714 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5fa2:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b5fa6:	4604      	mov	r4, r0
   b5fa8:	2000      	movs	r0, #0
   b5faa:	f004 fbb3 	bl	ba714 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5fae:	1b03      	subs	r3, r0, r4
   b5fb0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5fb4:	42b3      	cmp	r3, r6
   b5fb6:	f171 0300 	sbcs.w	r3, r1, #0
   b5fba:	d205      	bcs.n	b5fc8 <_Z22disconnectFromParticlev+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5fbc:	f004 fe8e 	bl	bacdc <spark_cloud_flag_connected>
   b5fc0:	b110      	cbz	r0, b5fc8 <_Z22disconnectFromParticlev+0x58>
            spark_process();
   b5fc2:	f004 fe7b 	bl	bacbc <spark_process>
        while (_while() && !_condition()) {
   b5fc6:	e7ef      	b.n	b5fa8 <_Z22disconnectFromParticlev+0x38>
   b5fc8:	f004 fe88 	bl	bacdc <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5fcc:	f004 fb92 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5fd0:	4f30      	ldr	r7, [pc, #192]	; (b6094 <_Z22disconnectFromParticlev+0x124>)
   b5fd2:	6038      	str	r0, [r7, #0]
    		spark_process();
   b5fd4:	f004 fe72 	bl	bacbc <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5fd8:	f004 fe80 	bl	bacdc <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b5fdc:	4604      	mov	r4, r0
   b5fde:	b140      	cbz	r0, b5ff2 <_Z22disconnectFromParticlev+0x82>
    Log.info("Failed to disconnect from Particle");
   b5fe0:	492d      	ldr	r1, [pc, #180]	; (b6098 <_Z22disconnectFromParticlev+0x128>)
   b5fe2:	482a      	ldr	r0, [pc, #168]	; (b608c <_Z22disconnectFromParticlev+0x11c>)
   b5fe4:	f7fe f87a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b5fe8:	2400      	movs	r4, #0
}
   b5fea:	4620      	mov	r0, r4
   b5fec:	b005      	add	sp, #20
   b5fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b5ff2:	f007 fe16 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b5ff6:	4929      	ldr	r1, [pc, #164]	; (b609c <_Z22disconnectFromParticlev+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b5ff8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b60a0 <_Z22disconnectFromParticlev+0x130>
   b5ffc:	1b42      	subs	r2, r0, r5
   b5ffe:	4823      	ldr	r0, [pc, #140]	; (b608c <_Z22disconnectFromParticlev+0x11c>)
   b6000:	f7fe f86c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b6004:	f007 fe0d 	bl	bdc22 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6008:	4622      	mov	r2, r4
   b600a:	2102      	movs	r1, #2
   b600c:	4606      	mov	r6, r0
   b600e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6012:	f004 feab 	bl	bad6c <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b6016:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b601a:	4623      	mov	r3, r4
   b601c:	4622      	mov	r2, r4
   b601e:	4621      	mov	r1, r4
   b6020:	f004 febc 	bl	bad9c <network_off>
        return hal_timer_millis(nullptr);
   b6024:	4620      	mov	r0, r4
   b6026:	f004 fb75 	bl	ba714 <hal_timer_millis>
        while (_while() && !_condition()) {
   b602a:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b602e:	4605      	mov	r5, r0
   b6030:	2000      	movs	r0, #0
   b6032:	f004 fb6f 	bl	ba714 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6036:	1b43      	subs	r3, r0, r5
   b6038:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b603c:	454b      	cmp	r3, r9
   b603e:	f171 0300 	sbcs.w	r3, r1, #0
   b6042:	d206      	bcs.n	b6052 <_Z22disconnectFromParticlev+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b6044:	4640      	mov	r0, r8
   b6046:	f006 fec7 	bl	bcdd8 <_ZN5spark12NetworkClass5isOffEv>
   b604a:	b910      	cbnz	r0, b6052 <_Z22disconnectFromParticlev+0xe2>
            spark_process();
   b604c:	f004 fe36 	bl	bacbc <spark_process>
        while (_while() && !_condition()) {
   b6050:	e7ee      	b.n	b6030 <_Z22disconnectFromParticlev+0xc0>
   b6052:	4813      	ldr	r0, [pc, #76]	; (b60a0 <_Z22disconnectFromParticlev+0x130>)
   b6054:	f006 fec0 	bl	bcdd8 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b6058:	f004 fb4c 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b605c:	6038      	str	r0, [r7, #0]
    		spark_process();
   b605e:	f004 fe2d 	bl	bacbc <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b6062:	480f      	ldr	r0, [pc, #60]	; (b60a0 <_Z22disconnectFromParticlev+0x130>)
   b6064:	f006 feb4 	bl	bcdd0 <_ZN5spark12NetworkClass4isOnEv>
   b6068:	b120      	cbz	r0, b6074 <_Z22disconnectFromParticlev+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b606a:	490e      	ldr	r1, [pc, #56]	; (b60a4 <_Z22disconnectFromParticlev+0x134>)
   b606c:	4807      	ldr	r0, [pc, #28]	; (b608c <_Z22disconnectFromParticlev+0x11c>)
   b606e:	f7fe f835 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b6072:	e7ba      	b.n	b5fea <_Z22disconnectFromParticlev+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b6074:	f007 fdd5 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b6078:	490b      	ldr	r1, [pc, #44]	; (b60a8 <_Z22disconnectFromParticlev+0x138>)
   b607a:	1b82      	subs	r2, r0, r6
   b607c:	4803      	ldr	r0, [pc, #12]	; (b608c <_Z22disconnectFromParticlev+0x11c>)
   b607e:	f7fe f82d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b6082:	2401      	movs	r4, #1
   b6084:	e7b1      	b.n	b5fea <_Z22disconnectFromParticlev+0x7a>
   b6086:	bf00      	nop
   b6088:	000bfa73 	.word	0x000bfa73
   b608c:	2003e658 	.word	0x2003e658
   b6090:	000bf872 	.word	0x000bf872
   b6094:	2003e710 	.word	0x2003e710
   b6098:	000bfa9c 	.word	0x000bfa9c
   b609c:	000bfabf 	.word	0x000bfabf
   b60a0:	2003e584 	.word	0x2003e584
   b60a4:	000bfae8 	.word	0x000bfae8
   b60a8:	000bfb0e 	.word	0x000bfb0e

000b60ac <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b60ac:	ee07 0a90 	vmov	s15, r0
   b60b0:	ed9f 7a09 	vldr	s14, [pc, #36]	; b60d8 <_Z17tmp36TemperatureCi+0x2c>
   b60b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b60b8:	ee67 7a87 	vmul.f32	s15, s15, s14
   b60bc:	ed9f 7a07 	vldr	s14, [pc, #28]	; b60dc <_Z17tmp36TemperatureCi+0x30>
   b60c0:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b60c4:	eddf 7a06 	vldr	s15, [pc, #24]	; b60e0 <_Z17tmp36TemperatureCi+0x34>
   b60c8:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b60cc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b60d0:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b60d4:	4770      	bx	lr
   b60d6:	bf00      	nop
   b60d8:	454e4000 	.word	0x454e4000
   b60dc:	457ff000 	.word	0x457ff000
   b60e0:	43fa0000 	.word	0x43fa0000

000b60e4 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b60e4:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b60e6:	2101      	movs	r1, #1
   b60e8:	a801      	add	r0, sp, #4
   b60ea:	f006 ff0a 	bl	bcf02 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b60ee:	f7ff f9bf 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b60f2:	f7ff fac0 	bl	b5676 <_ZNK17currentStatusData17get_internalTempCEv>
   b60f6:	f7ff f9bb 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b60fa:	f7ff fabc 	bl	b5676 <_ZNK17currentStatusData17get_internalTempCEv>
   b60fe:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6100:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6102:	d90d      	bls.n	b6120 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6104:	f006 ff90 	bl	bd028 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b6108:	f7ff f9b2 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b610c:	2101      	movs	r1, #1
   b610e:	f7ff faeb 	bl	b56e8 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b6112:	2400      	movs	r4, #0
  PMIC pmic(true);
   b6114:	a801      	add	r0, sp, #4
   b6116:	f006 ff03 	bl	bcf20 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b611a:	4620      	mov	r0, r4
   b611c:	b002      	add	sp, #8
   b611e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b6120:	f006 ff67 	bl	bcff2 <_ZN4PMIC14enableChargingEv>
    return true;
   b6124:	2401      	movs	r4, #1
   b6126:	e7f5      	b.n	b6114 <_Z16isItSafeToChargev+0x30>

000b6128 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b6128:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b612a:	4d19      	ldr	r5, [pc, #100]	; (b6190 <_Z17getSignalStrengthv+0x68>)
   b612c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b612e:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6130:	ac0c      	add	r4, sp, #48	; 0x30
   b6132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6138:	e895 0003 	ldmia.w	r5, {r0, r1}
   b613c:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6140:	4914      	ldr	r1, [pc, #80]	; (b6194 <_Z17getSignalStrengthv+0x6c>)
   b6142:	a804      	add	r0, sp, #16
   b6144:	f004 ff5c 	bl	bb000 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6148:	a804      	add	r0, sp, #16
   b614a:	f004 ff9c 	bl	bb086 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b614e:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6150:	a804      	add	r0, sp, #16
   b6152:	f004 ffd1 	bl	bb0f8 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b6156:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b6158:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b615c:	f004 fffc 	bl	bb158 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6160:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b6162:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b616a:	f008 f9d5 	bl	be518 <__aeabi_f2d>
   b616e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6172:	4628      	mov	r0, r5
   b6174:	f008 f9d0 	bl	be518 <__aeabi_f2d>
   b6178:	e9cd 0100 	strd	r0, r1, [sp]
   b617c:	4a06      	ldr	r2, [pc, #24]	; (b6198 <_Z17getSignalStrengthv+0x70>)
   b617e:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6182:	4806      	ldr	r0, [pc, #24]	; (b619c <_Z17getSignalStrengthv+0x74>)
   b6184:	2140      	movs	r1, #64	; 0x40
   b6186:	f004 fe69 	bl	bae5c <snprintf>
}
   b618a:	b017      	add	sp, #92	; 0x5c
   b618c:	bd30      	pop	{r4, r5, pc}
   b618e:	bf00      	nop
   b6190:	000bfbe4 	.word	0x000bfbe4
   b6194:	2003e584 	.word	0x2003e584
   b6198:	000bfbaa 	.word	0x000bfbaa
   b619c:	2003de3c 	.word	0x2003de3c

000b61a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b61a0:	b530      	push	{r4, r5, lr}
   b61a2:	b085      	sub	sp, #20
   b61a4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b61a6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b61a8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b61aa:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b61ac:	f004 fcf2 	bl	bab94 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b61b0:	b990      	cbnz	r0, b61d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
    return get(src, val);
   b61b2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b61b4:	b10c      	cbz	r4, b61ba <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b61b6:	6923      	ldr	r3, [r4, #16]
   b61b8:	b923      	cbnz	r3, b61c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b61ba:	4a08      	ldr	r2, [pc, #32]	; (b61dc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b61bc:	4908      	ldr	r1, [pc, #32]	; (b61e0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b61be:	200a      	movs	r0, #10
   b61c0:	f004 fcc0 	bl	bab44 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b61c4:	230c      	movs	r3, #12
   b61c6:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b61ca:	2304      	movs	r3, #4
   b61cc:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b61ce:	aa01      	add	r2, sp, #4
   b61d0:	6923      	ldr	r3, [r4, #16]
   b61d2:	2101      	movs	r1, #1
   b61d4:	4620      	mov	r0, r4
   b61d6:	4798      	blx	r3
}
   b61d8:	b005      	add	sp, #20
   b61da:	bd30      	pop	{r4, r5, pc}
   b61dc:	000ba6e5 	.word	0x000ba6e5
   b61e0:	000bf733 	.word	0x000bf733

000b61e4 <_Z12batteryStatev>:
bool batteryState() {
   b61e4:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b61e6:	f7ff f943 	bl	b5470 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b61ea:	a901      	add	r1, sp, #4
   b61ec:	4604      	mov	r4, r0
   b61ee:	2007      	movs	r0, #7
   b61f0:	f7ff ffd6 	bl	b61a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b61f4:	1e01      	subs	r1, r0, #0
        return val;
   b61f6:	bfa8      	it	ge
   b61f8:	9901      	ldrge	r1, [sp, #4]
   b61fa:	4620      	mov	r0, r4
   b61fc:	b2c9      	uxtb	r1, r1
   b61fe:	f7ff fa73 	bl	b56e8 <_ZN17currentStatusData16set_batteryStateEh>
  if (sysStatus.get_lowPowerMode()) {                                        // Need to take these steps if we are sleeping
   b6202:	f7ff f8e5 	bl	b53d0 <_ZN13sysStatusData8instanceEv>
   b6206:	f7ff fa93 	bl	b5730 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b620a:	b130      	cbz	r0, b621a <_Z12batteryStatev+0x36>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b620c:	4817      	ldr	r0, [pc, #92]	; (b626c <_Z12batteryStatev+0x88>)
   b620e:	f005 fb45 	bl	bb89c <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b6212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6216:	f004 fe79 	bl	baf0c <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b621a:	f7ff f929 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b621e:	a901      	add	r1, sp, #4
   b6220:	4604      	mov	r4, r0
   b6222:	2003      	movs	r0, #3
   b6224:	f7ff ffbc 	bl	b61a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6228:	b9e8      	cbnz	r0, b6266 <_Z12batteryStatev+0x82>
   b622a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b622e:	ee07 3a90 	vmov	s15, r3
   b6232:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6236:	ee17 0a90 	vmov	r0, s15
   b623a:	f008 f96d 	bl	be518 <__aeabi_f2d>
   b623e:	ec41 0b10 	vmov	d0, r0, r1
   b6242:	4620      	mov	r0, r4
   b6244:	f7ff f950 	bl	b54e8 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b6248:	f7ff f912 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b624c:	f7ff f92c 	bl	b54a8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6250:	4b07      	ldr	r3, [pc, #28]	; (b6270 <_Z12batteryStatev+0x8c>)
   b6252:	ec51 0b10 	vmov	r0, r1, d0
   b6256:	2200      	movs	r2, #0
   b6258:	f008 fc46 	bl	beae8 <__aeabi_dcmpgt>
}
   b625c:	3800      	subs	r0, #0
   b625e:	bf18      	it	ne
   b6260:	2001      	movne	r0, #1
   b6262:	b002      	add	sp, #8
   b6264:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6266:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b626a:	e7e4      	b.n	b6236 <_Z12batteryStatev+0x52>
   b626c:	2003e430 	.word	0x2003e430
   b6270:	404e0000 	.word	0x404e0000

000b6274 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6274:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6276:	f7ff f8fb 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b627a:	4b14      	ldr	r3, [pc, #80]	; (b62cc <_Z16takeMeasurementsv+0x58>)
   b627c:	4604      	mov	r4, r0
   b627e:	8818      	ldrh	r0, [r3, #0]
   b6280:	f007 ff0b 	bl	be09a <analogRead>
   b6284:	f7ff ff12 	bl	b60ac <_Z17tmp36TemperatureCi>
   b6288:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b628c:	4620      	mov	r0, r4
   b628e:	edcd 7a01 	vstr	s15, [sp, #4]
   b6292:	f89d 1004 	ldrb.w	r1, [sp, #4]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6296:	4c0e      	ldr	r4, [pc, #56]	; (b62d0 <_Z16takeMeasurementsv+0x5c>)
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6298:	f7ff fa20 	bl	b56dc <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b629c:	f7ff f8e8 	bl	b5470 <_ZN17currentStatusData8instanceEv>
   b62a0:	f7ff f9e9 	bl	b5676 <_ZNK17currentStatusData17get_internalTempCEv>
   b62a4:	4a0b      	ldr	r2, [pc, #44]	; (b62d4 <_Z16takeMeasurementsv+0x60>)
   b62a6:	4603      	mov	r3, r0
   b62a8:	2110      	movs	r1, #16
   b62aa:	4620      	mov	r0, r4
   b62ac:	f004 fdd6 	bl	bae5c <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   b62b0:	4909      	ldr	r1, [pc, #36]	; (b62d8 <_Z16takeMeasurementsv+0x64>)
   b62b2:	480a      	ldr	r0, [pc, #40]	; (b62dc <_Z16takeMeasurementsv+0x68>)
   b62b4:	4622      	mov	r2, r4
   b62b6:	f7fd ff11 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   b62ba:	f7ff ff93 	bl	b61e4 <_Z12batteryStatev>
    isItSafeToCharge();
   b62be:	f7ff ff11 	bl	b60e4 <_Z16isItSafeToChargev>
    getSignalStrength();
   b62c2:	f7ff ff31 	bl	b6128 <_Z17getSignalStrengthv>
}
   b62c6:	2001      	movs	r0, #1
   b62c8:	b002      	add	sp, #8
   b62ca:	bd10      	pop	{r4, pc}
   b62cc:	000bf878 	.word	0x000bf878
   b62d0:	2003de2c 	.word	0x2003de2c
   b62d4:	000bfbc3 	.word	0x000bfbc3
   b62d8:	000bfbc8 	.word	0x000bfbc8
   b62dc:	2003e658 	.word	0x2003e658

000b62e0 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b62e0:	4801      	ldr	r0, [pc, #4]	; (b62e8 <_GLOBAL__sub_I_batteryContext+0x8>)
   b62e2:	2100      	movs	r1, #0
   b62e4:	f005 ba96 	b.w	bb814 <_ZN9FuelGaugeC1Eb>
   b62e8:	2003e430 	.word	0x2003e430

000b62ec <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b62ec:	4770      	bx	lr

000b62ee <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b62ee:	b510      	push	{r4, lr}
}
   b62f0:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b62f2:	4604      	mov	r4, r0
}
   b62f4:	f7fd fed3 	bl	b409e <_ZdlPvj>
   b62f8:	4620      	mov	r0, r4
   b62fa:	bd10      	pop	{r4, pc}

000b62fc <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b62fc:	b510      	push	{r4, lr}
   b62fe:	4604      	mov	r4, r0
   b6300:	b08a      	sub	sp, #40	; 0x28
   b6302:	4608      	mov	r0, r1
    attr.flags = 0;
   b6304:	f04f 0c20 	mov.w	ip, #32
   b6308:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b630a:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b630e:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6312:	460b      	mov	r3, r1
   b6314:	aa02      	add	r2, sp, #8
   b6316:	6821      	ldr	r1, [r4, #0]
   b6318:	f004 fc24 	bl	bab64 <log_message_v>
}
   b631c:	b00a      	add	sp, #40	; 0x28
   b631e:	bd10      	pop	{r4, pc}

000b6320 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6320:	b40e      	push	{r1, r2, r3}
   b6322:	b503      	push	{r0, r1, lr}
   b6324:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6326:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6328:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b632c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b632e:	f7ff ffe5 	bl	b62fc <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6332:	b002      	add	sp, #8
   b6334:	f85d eb04 	ldr.w	lr, [sp], #4
   b6338:	b003      	add	sp, #12
   b633a:	4770      	bx	lr

000b633c <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b633c:	b40e      	push	{r1, r2, r3}
   b633e:	b503      	push	{r0, r1, lr}
   b6340:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6342:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6344:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6348:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b634a:	f7ff ffd7 	bl	b62fc <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b634e:	b002      	add	sp, #8
   b6350:	f85d eb04 	ldr.w	lr, [sp], #4
   b6354:	b003      	add	sp, #12
   b6356:	4770      	bx	lr

000b6358 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6358:	b510      	push	{r4, lr}
   b635a:	7202      	strb	r2, [r0, #8]
   b635c:	22ff      	movs	r2, #255	; 0xff
   b635e:	8142      	strh	r2, [r0, #10]
   b6360:	2200      	movs	r2, #0
   b6362:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b6366:	6142      	str	r2, [r0, #20]
   b6368:	7602      	strb	r2, [r0, #24]
   b636a:	61c2      	str	r2, [r0, #28]
    instance = this;
   b636c:	4a02      	ldr	r2, [pc, #8]	; (b6378 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b636e:	4c03      	ldr	r4, [pc, #12]	; (b637c <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6370:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6372:	e9c0 4100 	strd	r4, r1, [r0]
}
   b6376:	bd10      	pop	{r4, pc}
   b6378:	2003e43c 	.word	0x2003e43c
   b637c:	000bfe5c 	.word	0x000bfe5c

000b6380 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6384:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6388:	4604      	mov	r4, r0
   b638a:	4689      	mov	r9, r1
   b638c:	4616      	mov	r6, r2
   b638e:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6390:	f1b8 0f00 	cmp.w	r8, #0
   b6394:	d002      	beq.n	b639c <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b6396:	6840      	ldr	r0, [r0, #4]
   b6398:	f005 fb1a 	bl	bb9d0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b639c:	7a21      	ldrb	r1, [r4, #8]
   b639e:	6860      	ldr	r0, [r4, #4]
   b63a0:	f005 faf3 	bl	bb98a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b63a4:	6860      	ldr	r0, [r4, #4]
   b63a6:	6803      	ldr	r3, [r0, #0]
   b63a8:	4649      	mov	r1, r9
   b63aa:	689b      	ldr	r3, [r3, #8]
   b63ac:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b63ae:	6860      	ldr	r0, [r4, #4]
   b63b0:	2100      	movs	r1, #0
   b63b2:	f005 fb09 	bl	bb9c8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b63b6:	4605      	mov	r5, r0
   b63b8:	bb00      	cbnz	r0, b63fc <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b63ba:	2301      	movs	r3, #1
   b63bc:	7a21      	ldrb	r1, [r4, #8]
   b63be:	6860      	ldr	r0, [r4, #4]
   b63c0:	463a      	mov	r2, r7
   b63c2:	f005 fad0 	bl	bb966 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b63c6:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b63c8:	4603      	mov	r3, r0
        if (count == num) {
   b63ca:	d109      	bne.n	b63e0 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b63cc:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b63ce:	42be      	cmp	r6, r7
   b63d0:	d01c      	beq.n	b640c <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b63d2:	6860      	ldr	r0, [r4, #4]
   b63d4:	6803      	ldr	r3, [r0, #0]
   b63d6:	695b      	ldr	r3, [r3, #20]
   b63d8:	4798      	blx	r3
   b63da:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b63de:	e7f6      	b.n	b63ce <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b63e0:	490b      	ldr	r1, [pc, #44]	; (b6410 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b63e2:	480c      	ldr	r0, [pc, #48]	; (b6414 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b63e4:	464a      	mov	r2, r9
   b63e6:	f7ff ff9b 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b63ea:	f1b8 0f00 	cmp.w	r8, #0
   b63ee:	d002      	beq.n	b63f6 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b63f0:	6860      	ldr	r0, [r4, #4]
   b63f2:	f005 faf6 	bl	bb9e2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b63f6:	4628      	mov	r0, r5
   b63f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b63fc:	4603      	mov	r3, r0
   b63fe:	4906      	ldr	r1, [pc, #24]	; (b6418 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6400:	4804      	ldr	r0, [pc, #16]	; (b6414 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6402:	464a      	mov	r2, r9
   b6404:	f7ff ff8c 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6408:	2500      	movs	r5, #0
   b640a:	e7ee      	b.n	b63ea <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b640c:	2501      	movs	r5, #1
   b640e:	e7ec      	b.n	b63ea <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6410:	000bfc0c 	.word	0x000bfc0c
   b6414:	2003e438 	.word	0x2003e438
   b6418:	000bfc31 	.word	0x000bfc31

000b641c <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b641c:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b641e:	9300      	str	r3, [sp, #0]
   b6420:	2301      	movs	r3, #1
   b6422:	f7ff ffad 	bl	b6380 <_ZN6AB180513readRegistersEhPhjb>
}
   b6426:	b003      	add	sp, #12
   b6428:	f85d fb04 	ldr.w	pc, [sp], #4

000b642c <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b642c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b642e:	8943      	ldrh	r3, [r0, #10]
   b6430:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b6432:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b6434:	d010      	beq.n	b6458 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6436:	4e19      	ldr	r6, [pc, #100]	; (b649c <_ZN6AB180510detectChipEv+0x70>)
   b6438:	4d19      	ldr	r5, [pc, #100]	; (b64a0 <_ZN6AB180510detectChipEv+0x74>)
   b643a:	f004 f95b 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b643e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6442:	d209      	bcs.n	b6458 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6444:	8960      	ldrh	r0, [r4, #10]
   b6446:	f007 fe15 	bl	be074 <digitalRead>
   b644a:	2801      	cmp	r0, #1
   b644c:	d004      	beq.n	b6458 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b644e:	4631      	mov	r1, r6
   b6450:	4628      	mov	r0, r5
   b6452:	f7fd fe43 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6456:	e7f0      	b.n	b643a <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6458:	2301      	movs	r3, #1
   b645a:	f10d 0207 	add.w	r2, sp, #7
   b645e:	2128      	movs	r1, #40	; 0x28
   b6460:	4620      	mov	r0, r4
   b6462:	f7ff ffdb 	bl	b641c <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6466:	b930      	cbnz	r0, b6476 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6468:	480d      	ldr	r0, [pc, #52]	; (b64a0 <_ZN6AB180510detectChipEv+0x74>)
   b646a:	490e      	ldr	r1, [pc, #56]	; (b64a4 <_ZN6AB180510detectChipEv+0x78>)
   b646c:	f7fd fe36 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6470:	2000      	movs	r0, #0
}
   b6472:	b002      	add	sp, #8
   b6474:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6476:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b647a:	2b18      	cmp	r3, #24
   b647c:	d1f4      	bne.n	b6468 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b647e:	2301      	movs	r3, #1
   b6480:	f10d 0207 	add.w	r2, sp, #7
   b6484:	2129      	movs	r1, #41	; 0x29
   b6486:	4620      	mov	r0, r4
   b6488:	f7ff ffc8 	bl	b641c <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b648c:	2800      	cmp	r0, #0
   b648e:	d0eb      	beq.n	b6468 <_ZN6AB180510detectChipEv+0x3c>
   b6490:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6494:	2b05      	cmp	r3, #5
   b6496:	d1e7      	bne.n	b6468 <_ZN6AB180510detectChipEv+0x3c>
   b6498:	e7eb      	b.n	b6472 <_ZN6AB180510detectChipEv+0x46>
   b649a:	bf00      	nop
   b649c:	000bfc55 	.word	0x000bfc55
   b64a0:	2003e438 	.word	0x2003e438
   b64a4:	000bfc6a 	.word	0x000bfc6a

000b64a8 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b64a8:	b507      	push	{r0, r1, r2, lr}
   b64aa:	4613      	mov	r3, r2
    uint8_t value = 0;
   b64ac:	2200      	movs	r2, #0
   b64ae:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b64b2:	f10d 0207 	add.w	r2, sp, #7
   b64b6:	f7ff ffb1 	bl	b641c <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b64ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b64be:	b003      	add	sp, #12
   b64c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b64c4 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b64c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b64c8:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b64cc:	4604      	mov	r4, r0
   b64ce:	460f      	mov	r7, r1
   b64d0:	4615      	mov	r5, r2
   b64d2:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b64d4:	f1b8 0f00 	cmp.w	r8, #0
   b64d8:	d002      	beq.n	b64e0 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b64da:	6840      	ldr	r0, [r0, #4]
   b64dc:	f005 fa78 	bl	bb9d0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b64e0:	7a21      	ldrb	r1, [r4, #8]
   b64e2:	6860      	ldr	r0, [r4, #4]
   b64e4:	f005 fa51 	bl	bb98a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b64e8:	6860      	ldr	r0, [r4, #4]
   b64ea:	6803      	ldr	r3, [r0, #0]
   b64ec:	4639      	mov	r1, r7
   b64ee:	689b      	ldr	r3, [r3, #8]
   b64f0:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b64f2:	442e      	add	r6, r5
   b64f4:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b64f6:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b64f8:	d005      	beq.n	b6506 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b64fa:	6803      	ldr	r3, [r0, #0]
   b64fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6500:	689b      	ldr	r3, [r3, #8]
   b6502:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6504:	e7f6      	b.n	b64f4 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6506:	2101      	movs	r1, #1
   b6508:	f005 fa5e 	bl	bb9c8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b650c:	4603      	mov	r3, r0
   b650e:	b170      	cbz	r0, b652e <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6510:	4908      	ldr	r1, [pc, #32]	; (b6534 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6512:	4809      	ldr	r0, [pc, #36]	; (b6538 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6514:	463a      	mov	r2, r7
   b6516:	f7ff ff03 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b651a:	2500      	movs	r5, #0
    }

    if (lock) {
   b651c:	f1b8 0f00 	cmp.w	r8, #0
   b6520:	d002      	beq.n	b6528 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6522:	6860      	ldr	r0, [r4, #4]
   b6524:	f005 fa5d 	bl	bb9e2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6528:	4628      	mov	r0, r5
   b652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b652e:	2501      	movs	r5, #1
   b6530:	e7f4      	b.n	b651c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6532:	bf00      	nop
   b6534:	000bfc77 	.word	0x000bfc77
   b6538:	2003e438 	.word	0x2003e438

000b653c <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b653c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b653e:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6542:	9300      	str	r3, [sp, #0]
   b6544:	f10d 020f 	add.w	r2, sp, #15
   b6548:	2301      	movs	r3, #1
   b654a:	f7ff ffbb 	bl	b64c4 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b654e:	b005      	add	sp, #20
   b6550:	f85d fb04 	ldr.w	pc, [sp], #4

000b6554 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6556:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6558:	460c      	mov	r4, r1
   b655a:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b655c:	491a      	ldr	r1, [pc, #104]	; (b65c8 <_ZN6AB18056setWDTEi+0x74>)
   b655e:	481b      	ldr	r0, [pc, #108]	; (b65cc <_ZN6AB18056setWDTEi+0x78>)
   b6560:	f7fd fdbc 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6564:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6566:	bfb8      	it	lt
   b6568:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b656a:	b97c      	cbnz	r4, b658c <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b656c:	2301      	movs	r3, #1
   b656e:	4622      	mov	r2, r4
   b6570:	211b      	movs	r1, #27
   b6572:	4628      	mov	r0, r5
   b6574:	f7ff ffe2 	bl	b653c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6578:	4915      	ldr	r1, [pc, #84]	; (b65d0 <_ZN6AB18056setWDTEi+0x7c>)
   b657a:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b657c:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b657e:	4813      	ldr	r0, [pc, #76]	; (b65cc <_ZN6AB18056setWDTEi+0x78>)
   b6580:	f7ff fedc 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6584:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6586:	616c      	str	r4, [r5, #20]
}
   b6588:	4630      	mov	r0, r6
   b658a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b658c:	2c03      	cmp	r4, #3
   b658e:	dd19      	ble.n	b65c4 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6590:	10a7      	asrs	r7, r4, #2
   b6592:	2f1f      	cmp	r7, #31
   b6594:	bfa8      	it	ge
   b6596:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6598:	00ba      	lsls	r2, r7, #2
   b659a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b659e:	2301      	movs	r3, #1
   b65a0:	b2d2      	uxtb	r2, r2
   b65a2:	211b      	movs	r1, #27
   b65a4:	4628      	mov	r0, r5
   b65a6:	f7ff ffc9 	bl	b653c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b65aa:	463a      	mov	r2, r7
   b65ac:	4603      	mov	r3, r0
   b65ae:	4909      	ldr	r1, [pc, #36]	; (b65d4 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b65b0:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b65b2:	4806      	ldr	r0, [pc, #24]	; (b65cc <_ZN6AB18056setWDTEi+0x78>)
   b65b4:	f7ff fec2 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b65b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b65bc:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b65be:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b65c0:	616f      	str	r7, [r5, #20]
   b65c2:	e7e1      	b.n	b6588 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b65c4:	2701      	movs	r7, #1
   b65c6:	e7e7      	b.n	b6598 <_ZN6AB18056setWDTEi+0x44>
   b65c8:	000bfc9c 	.word	0x000bfc9c
   b65cc:	2003e438 	.word	0x2003e438
   b65d0:	000bfca6 	.word	0x000bfca6
   b65d4:	000bfcc2 	.word	0x000bfcc2

000b65d8 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b65d8:	4b06      	ldr	r3, [pc, #24]	; (b65f4 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b65da:	681a      	ldr	r2, [r3, #0]
   b65dc:	b14a      	cbz	r2, b65f2 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b65de:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b65e2:	430b      	orrs	r3, r1
   b65e4:	d105      	bne.n	b65f2 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b65e6:	68d3      	ldr	r3, [r2, #12]
   b65e8:	b11b      	cbz	r3, b65f2 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b65ea:	2100      	movs	r1, #0
   b65ec:	4610      	mov	r0, r2
   b65ee:	f7ff bfb1 	b.w	b6554 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b65f2:	4770      	bx	lr
   b65f4:	2003e43c 	.word	0x2003e43c

000b65f8 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b65f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b65fc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6600:	4605      	mov	r5, r0
   b6602:	4616      	mov	r6, r2
   b6604:	461f      	mov	r7, r3
    if (lock) {
   b6606:	f1b8 0f00 	cmp.w	r8, #0
   b660a:	d004      	beq.n	b6616 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b660c:	6840      	ldr	r0, [r0, #4]
   b660e:	9101      	str	r1, [sp, #4]
   b6610:	f005 f9de 	bl	bb9d0 <_ZN7TwoWire4lockEv>
   b6614:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6616:	9101      	str	r1, [sp, #4]
   b6618:	2300      	movs	r3, #0
   b661a:	f10d 020f 	add.w	r2, sp, #15
   b661e:	4628      	mov	r0, r5
   b6620:	f7ff fefc 	bl	b641c <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6624:	4604      	mov	r4, r0
   b6626:	b160      	cbz	r0, b6642 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6628:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b662c:	ea03 0206 	and.w	r2, r3, r6
   b6630:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6632:	4293      	cmp	r3, r2
   b6634:	d005      	beq.n	b6642 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6636:	9901      	ldr	r1, [sp, #4]
   b6638:	2300      	movs	r3, #0
   b663a:	4628      	mov	r0, r5
   b663c:	f7ff ff7e 	bl	b653c <_ZN6AB180513writeRegisterEhhb>
   b6640:	4604      	mov	r4, r0
    if (lock) {
   b6642:	f1b8 0f00 	cmp.w	r8, #0
   b6646:	d002      	beq.n	b664e <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6648:	6868      	ldr	r0, [r5, #4]
   b664a:	f005 f9ca 	bl	bb9e2 <_ZN7TwoWire6unlockEv>
}
   b664e:	4620      	mov	r0, r4
   b6650:	b004      	add	sp, #16
   b6652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6656 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6656:	b513      	push	{r0, r1, r4, lr}
   b6658:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b665a:	f10d 0207 	add.w	r2, sp, #7
   b665e:	f7ff fedd 	bl	b641c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b6662:	b128      	cbz	r0, b6670 <_ZN6AB180510isBitClearEhhb+0x1a>
   b6664:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6668:	421c      	tst	r4, r3
   b666a:	bf0c      	ite	eq
   b666c:	2001      	moveq	r0, #1
   b666e:	2000      	movne	r0, #0
}
   b6670:	b002      	add	sp, #8
   b6672:	bd10      	pop	{r4, pc}

000b6674 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6674:	b513      	push	{r0, r1, r4, lr}
   b6676:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6678:	f10d 0207 	add.w	r2, sp, #7
   b667c:	f7ff fece 	bl	b641c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6680:	b128      	cbz	r0, b668e <_ZN6AB18058isBitSetEhhb+0x1a>
   b6682:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6686:	421c      	tst	r4, r3
   b6688:	bf14      	ite	ne
   b668a:	2001      	movne	r0, #1
   b668c:	2000      	moveq	r0, #0
}
   b668e:	b002      	add	sp, #8
   b6690:	bd10      	pop	{r4, pc}

000b6692 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6692:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6694:	43d2      	mvns	r2, r2
   b6696:	9300      	str	r3, [sp, #0]
   b6698:	b2d2      	uxtb	r2, r2
   b669a:	2300      	movs	r3, #0
   b669c:	f7ff ffac 	bl	b65f8 <_ZN6AB180512maskRegisterEhhhb>
}
   b66a0:	b003      	add	sp, #12
   b66a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b66a8 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b66a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b66aa:	2301      	movs	r3, #1
   b66ac:	f10d 0207 	add.w	r2, sp, #7
   b66b0:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b66b2:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b66b4:	f7ff feb2 	bl	b641c <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b66b8:	4605      	mov	r5, r0
   b66ba:	b938      	cbnz	r0, b66cc <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b66bc:	491e      	ldr	r1, [pc, #120]	; (b6738 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b66be:	481f      	ldr	r0, [pc, #124]	; (b673c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b66c0:	22ad      	movs	r2, #173	; 0xad
   b66c2:	f7ff fe2d 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
}
   b66c6:	4628      	mov	r0, r5
   b66c8:	b003      	add	sp, #12
   b66ca:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b66cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b66d0:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b66d4:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b66d8:	d00b      	beq.n	b66f2 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b66da:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b66dc:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b66de:	210f      	movs	r1, #15
   b66e0:	4620      	mov	r0, r4
   b66e2:	f7ff ffd6 	bl	b6692 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b66e6:	4a16      	ldr	r2, [pc, #88]	; (b6740 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b66e8:	4916      	ldr	r1, [pc, #88]	; (b6744 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b66ea:	4814      	ldr	r0, [pc, #80]	; (b673c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b66ec:	f7fd fcf6 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b66f0:	e7e9      	b.n	b66c6 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b66f2:	2208      	movs	r2, #8
   b66f4:	2117      	movs	r1, #23
   b66f6:	4620      	mov	r0, r4
   b66f8:	f7ff ffbc 	bl	b6674 <_ZN6AB18058isBitSetEhhb>
   b66fc:	b118      	cbz	r0, b6706 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b66fe:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6700:	4a11      	ldr	r2, [pc, #68]	; (b6748 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6702:	61e3      	str	r3, [r4, #28]
   b6704:	e7f0      	b.n	b66e8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b6706:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b670a:	071a      	lsls	r2, r3, #28
   b670c:	d509      	bpl.n	b6722 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b670e:	2303      	movs	r3, #3
   b6710:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6712:	2208      	movs	r2, #8
   b6714:	2301      	movs	r3, #1
   b6716:	210f      	movs	r1, #15
   b6718:	4620      	mov	r0, r4
   b671a:	f7ff ffba 	bl	b6692 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b671e:	4a0b      	ldr	r2, [pc, #44]	; (b674c <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6720:	e7e2      	b.n	b66e8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6722:	075b      	lsls	r3, r3, #29
   b6724:	d5cf      	bpl.n	b66c6 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b6726:	2204      	movs	r2, #4
   b6728:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b672a:	2301      	movs	r3, #1
   b672c:	210f      	movs	r1, #15
   b672e:	4620      	mov	r0, r4
   b6730:	f7ff ffaf 	bl	b6692 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6734:	4a06      	ldr	r2, [pc, #24]	; (b6750 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b6736:	e7d7      	b.n	b66e8 <_ZN6AB180516updateWakeReasonEv+0x40>
   b6738:	000bfd15 	.word	0x000bfd15
   b673c:	2003e438 	.word	0x2003e438
   b6740:	000bfce6 	.word	0x000bfce6
   b6744:	000bfd34 	.word	0x000bfd34
   b6748:	000bfcef 	.word	0x000bfcef
   b674c:	000bfcff 	.word	0x000bfcff
   b6750:	000bfd0f 	.word	0x000bfd0f

000b6754 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6754:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b6756:	9300      	str	r3, [sp, #0]
   b6758:	4613      	mov	r3, r2
   b675a:	22ff      	movs	r2, #255	; 0xff
   b675c:	f7ff ff4c 	bl	b65f8 <_ZN6AB180512maskRegisterEhhhb>
}
   b6760:	b003      	add	sp, #12
   b6762:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6768 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b676a:	460f      	mov	r7, r1
   b676c:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b676e:	2301      	movs	r3, #1
   b6770:	2200      	movs	r2, #0
   b6772:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6774:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6776:	f7ff fee1 	bl	b653c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b677a:	4604      	mov	r4, r0
   b677c:	b938      	cbnz	r0, b678e <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b677e:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b6782:	491f      	ldr	r1, [pc, #124]	; (b6800 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b6784:	481f      	ldr	r0, [pc, #124]	; (b6804 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b6786:	f7ff fdcb 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
}
   b678a:	4620      	mov	r0, r4
   b678c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b678e:	2301      	movs	r3, #1
   b6790:	2223      	movs	r2, #35	; 0x23
   b6792:	2118      	movs	r1, #24
   b6794:	4628      	mov	r0, r5
   b6796:	f7ff fed1 	bl	b653c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b679a:	4604      	mov	r4, r0
   b679c:	b910      	cbnz	r0, b67a4 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b679e:	f240 229b 	movw	r2, #667	; 0x29b
   b67a2:	e7ee      	b.n	b6782 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b67a4:	2fff      	cmp	r7, #255	; 0xff
   b67a6:	bfa8      	it	ge
   b67a8:	27ff      	movge	r7, #255	; 0xff
   b67aa:	2f01      	cmp	r7, #1
   b67ac:	bfb8      	it	lt
   b67ae:	2701      	movlt	r7, #1
   b67b0:	2301      	movs	r3, #1
   b67b2:	b2fa      	uxtb	r2, r7
   b67b4:	2119      	movs	r1, #25
   b67b6:	4628      	mov	r0, r5
   b67b8:	f7ff fec0 	bl	b653c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b67bc:	4604      	mov	r4, r0
   b67be:	b910      	cbnz	r0, b67c6 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b67c0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b67c4:	e7dd      	b.n	b6782 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b67c6:	2301      	movs	r3, #1
   b67c8:	2208      	movs	r2, #8
   b67ca:	2112      	movs	r1, #18
   b67cc:	4628      	mov	r0, r5
   b67ce:	f7ff ffc1 	bl	b6754 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b67d2:	4604      	mov	r4, r0
   b67d4:	b910      	cbnz	r0, b67dc <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b67d6:	f240 22af 	movw	r2, #687	; 0x2af
   b67da:	e7d2      	b.n	b6782 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b67dc:	2e00      	cmp	r6, #0
   b67de:	bf14      	ite	ne
   b67e0:	2203      	movne	r2, #3
   b67e2:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b67e4:	2301      	movs	r3, #1
   b67e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b67ea:	2118      	movs	r1, #24
   b67ec:	4628      	mov	r0, r5
   b67ee:	f7ff fea5 	bl	b653c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b67f2:	4604      	mov	r4, r0
   b67f4:	2800      	cmp	r0, #0
   b67f6:	d1c8      	bne.n	b678a <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b67f8:	f240 22b9 	movw	r2, #697	; 0x2b9
   b67fc:	e7c1      	b.n	b6782 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b67fe:	bf00      	nop
   b6800:	000bfd45 	.word	0x000bfd45
   b6804:	2003e438 	.word	0x2003e438

000b6808 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b680c:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b680e:	4605      	mov	r5, r0
   b6810:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6812:	484f      	ldr	r0, [pc, #316]	; (b6950 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6814:	494f      	ldr	r1, [pc, #316]	; (b6954 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b6816:	f7fd fc61 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b681a:	2100      	movs	r1, #0
   b681c:	4628      	mov	r0, r5
   b681e:	f7ff fe99 	bl	b6554 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6822:	4604      	mov	r4, r0
   b6824:	b948      	cbnz	r0, b683a <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b6826:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b682a:	494b      	ldr	r1, [pc, #300]	; (b6958 <_ZN6AB180513deepPowerDownEi+0x150>)
   b682c:	4848      	ldr	r0, [pc, #288]	; (b6950 <_ZN6AB180513deepPowerDownEi+0x148>)
   b682e:	f7ff fd77 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
}
   b6832:	4620      	mov	r0, r4
   b6834:	b003      	add	sp, #12
   b6836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b683a:	2301      	movs	r3, #1
   b683c:	461a      	mov	r2, r3
   b683e:	2130      	movs	r1, #48	; 0x30
   b6840:	4628      	mov	r0, r5
   b6842:	f7ff ff87 	bl	b6754 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6846:	4604      	mov	r4, r0
   b6848:	b910      	cbnz	r0, b6850 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b684a:	f240 2205 	movw	r2, #517	; 0x205
   b684e:	e7ec      	b.n	b682a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6850:	2210      	movs	r2, #16
   b6852:	2301      	movs	r3, #1
   b6854:	4611      	mov	r1, r2
   b6856:	4628      	mov	r0, r5
   b6858:	f7ff ff1b 	bl	b6692 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b685c:	4604      	mov	r4, r0
   b685e:	b910      	cbnz	r0, b6866 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6860:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b6864:	e7e1      	b.n	b682a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b6866:	2301      	movs	r3, #1
   b6868:	2226      	movs	r2, #38	; 0x26
   b686a:	2113      	movs	r1, #19
   b686c:	4628      	mov	r0, r5
   b686e:	f7ff fe65 	bl	b653c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6872:	4604      	mov	r4, r0
   b6874:	b910      	cbnz	r0, b687c <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b6876:	f240 2213 	movw	r2, #531	; 0x213
   b687a:	e7d6      	b.n	b682a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b687c:	2601      	movs	r6, #1
   b687e:	9600      	str	r6, [sp, #0]
   b6880:	4633      	mov	r3, r6
   b6882:	22fc      	movs	r2, #252	; 0xfc
   b6884:	2111      	movs	r1, #17
   b6886:	4628      	mov	r0, r5
   b6888:	f7ff feb6 	bl	b65f8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b688c:	4604      	mov	r4, r0
   b688e:	b910      	cbnz	r0, b6896 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6890:	f240 221b 	movw	r2, #539	; 0x21b
   b6894:	e7c9      	b.n	b682a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b6896:	2200      	movs	r2, #0
   b6898:	4639      	mov	r1, r7
   b689a:	4628      	mov	r0, r5
   b689c:	f7ff ff64 	bl	b6768 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b68a0:	4604      	mov	r4, r0
   b68a2:	b910      	cbnz	r0, b68aa <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b68a4:	f240 2222 	movw	r2, #546	; 0x222
   b68a8:	e7bf      	b.n	b682a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b68aa:	9600      	str	r6, [sp, #0]
   b68ac:	2302      	movs	r3, #2
   b68ae:	2277      	movs	r2, #119	; 0x77
   b68b0:	2110      	movs	r1, #16
   b68b2:	4628      	mov	r0, r5
   b68b4:	f7ff fea0 	bl	b65f8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b68b8:	4604      	mov	r4, r0
   b68ba:	b910      	cbnz	r0, b68c2 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b68bc:	f240 222b 	movw	r2, #555	; 0x22b
   b68c0:	e7b3      	b.n	b682a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b68c2:	4633      	mov	r3, r6
   b68c4:	2204      	movs	r2, #4
   b68c6:	211c      	movs	r1, #28
   b68c8:	4628      	mov	r0, r5
   b68ca:	f7ff ff43 	bl	b6754 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b68ce:	4604      	mov	r4, r0
   b68d0:	b910      	cbnz	r0, b68d8 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b68d2:	f240 2232 	movw	r2, #562	; 0x232
   b68d6:	e7a8      	b.n	b682a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b68d8:	9600      	str	r6, [sp, #0]
   b68da:	2318      	movs	r3, #24
   b68dc:	22e3      	movs	r2, #227	; 0xe3
   b68de:	2111      	movs	r1, #17
   b68e0:	4628      	mov	r0, r5
   b68e2:	f7ff fe89 	bl	b65f8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b68e6:	4604      	mov	r4, r0
   b68e8:	b910      	cbnz	r0, b68f0 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b68ea:	f240 2239 	movw	r2, #569	; 0x239
   b68ee:	e79c      	b.n	b682a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b68f0:	4633      	mov	r3, r6
   b68f2:	22c0      	movs	r2, #192	; 0xc0
   b68f4:	2117      	movs	r1, #23
   b68f6:	4628      	mov	r0, r5
   b68f8:	f7ff fe20 	bl	b653c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b68fc:	4604      	mov	r4, r0
   b68fe:	b910      	cbnz	r0, b6906 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6900:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6904:	e791      	b.n	b682a <_ZN6AB180513deepPowerDownEi+0x22>
   b6906:	f003 fef5 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b690a:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6960 <_ZN6AB180513deepPowerDownEi+0x158>
   b690e:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6950 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6912:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6916:	4606      	mov	r6, r0
   b6918:	434f      	muls	r7, r1
   b691a:	f003 feeb 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
   b691e:	1b80      	subs	r0, r0, r6
   b6920:	42b8      	cmp	r0, r7
   b6922:	d20e      	bcs.n	b6942 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6924:	2201      	movs	r2, #1
   b6926:	2117      	movs	r1, #23
   b6928:	4628      	mov	r0, r5
   b692a:	f7ff fdbd 	bl	b64a8 <_ZN6AB180512readRegisterEhb>
   b692e:	4649      	mov	r1, r9
   b6930:	4602      	mov	r2, r0
   b6932:	4640      	mov	r0, r8
   b6934:	f7fd fbd2 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b693c:	f004 fae6 	bl	baf0c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6940:	e7eb      	b.n	b691a <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6942:	4906      	ldr	r1, [pc, #24]	; (b695c <_ZN6AB180513deepPowerDownEi+0x154>)
   b6944:	4802      	ldr	r0, [pc, #8]	; (b6950 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6946:	f7ff fceb 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b694a:	f006 ff7e 	bl	bd84a <_ZN11SystemClass5resetEv>
    return true;
   b694e:	e770      	b.n	b6832 <_ZN6AB180513deepPowerDownEi+0x2a>
   b6950:	2003e438 	.word	0x2003e438
   b6954:	000bfd70 	.word	0x000bfd70
   b6958:	000bfd65 	.word	0x000bfd65
   b695c:	000bfd96 	.word	0x000bfd96
   b6960:	000bfd81 	.word	0x000bfd81

000b6964 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b6964:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6968:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b696c:	4605      	mov	r5, r0
   b696e:	460c      	mov	r4, r1
   b6970:	4691      	mov	r9, r2
   b6972:	461f      	mov	r7, r3
    if (lock) {
   b6974:	f1ba 0f00 	cmp.w	sl, #0
   b6978:	d002      	beq.n	b6980 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b697a:	6840      	ldr	r0, [r0, #4]
   b697c:	f005 f828 	bl	bb9d0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6980:	b307      	cbz	r7, b69c4 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b6982:	2f20      	cmp	r7, #32
   b6984:	463e      	mov	r6, r7
   b6986:	bf28      	it	cs
   b6988:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b698a:	2c7f      	cmp	r4, #127	; 0x7f
   b698c:	d826      	bhi.n	b69dc <_ZN6AB18057readRamEjPhjb+0x78>
   b698e:	1933      	adds	r3, r6, r4
   b6990:	2b80      	cmp	r3, #128	; 0x80
   b6992:	d901      	bls.n	b6998 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6994:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6998:	2301      	movs	r3, #1
   b699a:	2204      	movs	r2, #4
   b699c:	213f      	movs	r1, #63	; 0x3f
   b699e:	4628      	mov	r0, r5
   b69a0:	f7ff fe77 	bl	b6692 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b69a4:	2300      	movs	r3, #0
   b69a6:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b69aa:	9300      	str	r3, [sp, #0]
   b69ac:	464a      	mov	r2, r9
   b69ae:	4633      	mov	r3, r6
   b69b0:	b2c9      	uxtb	r1, r1
   b69b2:	4628      	mov	r0, r5
   b69b4:	f7ff fce4 	bl	b6380 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b69b8:	4680      	mov	r8, r0
   b69ba:	b128      	cbz	r0, b69c8 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b69bc:	4434      	add	r4, r6
        dataLen -= count;
   b69be:	1bbf      	subs	r7, r7, r6
        data += count;
   b69c0:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b69c2:	e7dd      	b.n	b6980 <_ZN6AB18057readRamEjPhjb+0x1c>
   b69c4:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b69c8:	f1ba 0f00 	cmp.w	sl, #0
   b69cc:	d002      	beq.n	b69d4 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b69ce:	6868      	ldr	r0, [r5, #4]
   b69d0:	f005 f807 	bl	bb9e2 <_ZN7TwoWire6unlockEv>
}
   b69d4:	4640      	mov	r0, r8
   b69d6:	b002      	add	sp, #8
   b69d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b69dc:	2301      	movs	r3, #1
   b69de:	2204      	movs	r2, #4
   b69e0:	213f      	movs	r1, #63	; 0x3f
   b69e2:	4628      	mov	r0, r5
   b69e4:	f7ff feb6 	bl	b6754 <_ZN6AB180514setRegisterBitEhhb>
   b69e8:	e7dc      	b.n	b69a4 <_ZN6AB18057readRamEjPhjb+0x40>

000b69ea <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b69ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b69ee:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b69f2:	4605      	mov	r5, r0
   b69f4:	460c      	mov	r4, r1
   b69f6:	4691      	mov	r9, r2
   b69f8:	461f      	mov	r7, r3
    if (lock) {
   b69fa:	f1ba 0f00 	cmp.w	sl, #0
   b69fe:	d002      	beq.n	b6a06 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6a00:	6840      	ldr	r0, [r0, #4]
   b6a02:	f004 ffe5 	bl	bb9d0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6a06:	b307      	cbz	r7, b6a4a <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b6a08:	2f1f      	cmp	r7, #31
   b6a0a:	463e      	mov	r6, r7
   b6a0c:	bf28      	it	cs
   b6a0e:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6a10:	2c7f      	cmp	r4, #127	; 0x7f
   b6a12:	d826      	bhi.n	b6a62 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6a14:	1933      	adds	r3, r6, r4
   b6a16:	2b80      	cmp	r3, #128	; 0x80
   b6a18:	d901      	bls.n	b6a1e <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b6a1a:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6a1e:	2301      	movs	r3, #1
   b6a20:	2204      	movs	r2, #4
   b6a22:	213f      	movs	r1, #63	; 0x3f
   b6a24:	4628      	mov	r0, r5
   b6a26:	f7ff fe34 	bl	b6692 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6a2a:	2300      	movs	r3, #0
   b6a2c:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6a30:	9300      	str	r3, [sp, #0]
   b6a32:	464a      	mov	r2, r9
   b6a34:	4633      	mov	r3, r6
   b6a36:	b2c9      	uxtb	r1, r1
   b6a38:	4628      	mov	r0, r5
   b6a3a:	f7ff fd43 	bl	b64c4 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b6a3e:	4680      	mov	r8, r0
   b6a40:	b128      	cbz	r0, b6a4e <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b6a42:	4434      	add	r4, r6
        dataLen -= count;
   b6a44:	1bbf      	subs	r7, r7, r6
        data += count;
   b6a46:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6a48:	e7dd      	b.n	b6a06 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6a4a:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6a4e:	f1ba 0f00 	cmp.w	sl, #0
   b6a52:	d002      	beq.n	b6a5a <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b6a54:	6868      	ldr	r0, [r5, #4]
   b6a56:	f004 ffc4 	bl	bb9e2 <_ZN7TwoWire6unlockEv>
}
   b6a5a:	4640      	mov	r0, r8
   b6a5c:	b002      	add	sp, #8
   b6a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6a62:	2301      	movs	r3, #1
   b6a64:	2204      	movs	r2, #4
   b6a66:	213f      	movs	r1, #63	; 0x3f
   b6a68:	4628      	mov	r0, r5
   b6a6a:	f7ff fe73 	bl	b6754 <_ZN6AB180514setRegisterBitEhhb>
   b6a6e:	e7dc      	b.n	b6a2a <_ZN6AB18058writeRamEjPKhjb+0x40>

000b6a70 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b6a70:	b530      	push	{r4, r5, lr}
   b6a72:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6a74:	680d      	ldr	r5, [r1, #0]
   b6a76:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b6a7a:	9503      	str	r5, [sp, #12]
   b6a7c:	684d      	ldr	r5, [r1, #4]
   b6a7e:	9502      	str	r5, [sp, #8]
   b6a80:	688d      	ldr	r5, [r1, #8]
   b6a82:	9501      	str	r5, [sp, #4]
   b6a84:	68c9      	ldr	r1, [r1, #12]
   b6a86:	9100      	str	r1, [sp, #0]
   b6a88:	3301      	adds	r3, #1
   b6a8a:	4904      	ldr	r1, [pc, #16]	; (b6a9c <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6a8c:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6a90:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6a92:	f006 fe73 	bl	bd77c <_ZN6String6formatEPKcz>
}
   b6a96:	4620      	mov	r0, r4
   b6a98:	b005      	add	sp, #20
   b6a9a:	bd30      	pop	{r4, r5, pc}
   b6a9c:	000bfda8 	.word	0x000bfda8

000b6aa0 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6aa0:	0903      	lsrs	r3, r0, #4
}
   b6aa2:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6aa4:	f000 000f 	and.w	r0, r0, #15
}
   b6aa8:	fb02 0003 	mla	r0, r2, r3, r0
   b6aac:	4770      	bx	lr

000b6aae <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6aae:	b538      	push	{r3, r4, r5, lr}
   b6ab0:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b6ab2:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6ab4:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b6ab6:	f7ff fff3 	bl	b6aa0 <_ZN6AB180510bcdToValueEh>
   b6aba:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6abc:	7860      	ldrb	r0, [r4, #1]
   b6abe:	f7ff ffef 	bl	b6aa0 <_ZN6AB180510bcdToValueEh>
   b6ac2:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6ac4:	78a0      	ldrb	r0, [r4, #2]
   b6ac6:	f7ff ffeb 	bl	b6aa0 <_ZN6AB180510bcdToValueEh>
   b6aca:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6acc:	78e0      	ldrb	r0, [r4, #3]
   b6ace:	f7ff ffe7 	bl	b6aa0 <_ZN6AB180510bcdToValueEh>
   b6ad2:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6ad4:	7920      	ldrb	r0, [r4, #4]
   b6ad6:	f7ff ffe3 	bl	b6aa0 <_ZN6AB180510bcdToValueEh>
   b6ada:	3801      	subs	r0, #1
   b6adc:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6ade:	b92d      	cbnz	r5, b6aec <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6ae0:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6ae2:	7828      	ldrb	r0, [r5, #0]
   b6ae4:	f7ff ffdc 	bl	b6aa0 <_ZN6AB180510bcdToValueEh>
   b6ae8:	6188      	str	r0, [r1, #24]
}
   b6aea:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6aec:	7960      	ldrb	r0, [r4, #5]
   b6aee:	f7ff ffd7 	bl	b6aa0 <_ZN6AB180510bcdToValueEh>
   b6af2:	3064      	adds	r0, #100	; 0x64
   b6af4:	1da5      	adds	r5, r4, #6
   b6af6:	6148      	str	r0, [r1, #20]
   b6af8:	e7f3      	b.n	b6ae2 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6afc <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6afc:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6afe:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6b00:	b088      	sub	sp, #32
   b6b02:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6b04:	461a      	mov	r2, r3
   b6b06:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6b08:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6b0a:	f7ff fda4 	bl	b6656 <_ZN6AB180510isBitClearEhhb>
   b6b0e:	b1f0      	cbz	r0, b6b4e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6b10:	2308      	movs	r3, #8
   b6b12:	2601      	movs	r6, #1
   b6b14:	4620      	mov	r0, r4
   b6b16:	9600      	str	r6, [sp, #0]
   b6b18:	eb0d 0203 	add.w	r2, sp, r3
   b6b1c:	2100      	movs	r1, #0
   b6b1e:	f7ff fc2f 	bl	b6380 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b6b22:	4604      	mov	r4, r0
   b6b24:	b198      	cbz	r0, b6b4e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b6b26:	4632      	mov	r2, r6
   b6b28:	4629      	mov	r1, r5
   b6b2a:	f10d 0009 	add.w	r0, sp, #9
   b6b2e:	f7ff ffbe 	bl	b6aae <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b6b32:	a804      	add	r0, sp, #16
   b6b34:	f7ff ff9c 	bl	b6a70 <_ZN6AB180510tmToStringEPK2tm>
   b6b38:	4808      	ldr	r0, [pc, #32]	; (b6b5c <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b6b3a:	9a04      	ldr	r2, [sp, #16]
   b6b3c:	4908      	ldr	r1, [pc, #32]	; (b6b60 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b6b3e:	f7fd facd 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6b42:	a804      	add	r0, sp, #16
   b6b44:	f006 fcce 	bl	bd4e4 <_ZN6StringD1Ev>
}
   b6b48:	4620      	mov	r0, r4
   b6b4a:	b008      	add	sp, #32
   b6b4c:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b6b4e:	2224      	movs	r2, #36	; 0x24
   b6b50:	2100      	movs	r1, #0
   b6b52:	4628      	mov	r0, r5
   b6b54:	f008 f8aa 	bl	becac <memset>
   b6b58:	2400      	movs	r4, #0
   b6b5a:	e7f5      	b.n	b6b48 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b6b5c:	2003e438 	.word	0x2003e438
   b6b60:	000bfdc6 	.word	0x000bfdc6

000b6b64 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b6b64:	b530      	push	{r4, r5, lr}
   b6b66:	b08b      	sub	sp, #44	; 0x2c
   b6b68:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b6b6a:	a901      	add	r1, sp, #4
   b6b6c:	f7ff ffc6 	bl	b6afc <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b6b70:	4604      	mov	r4, r0
   b6b72:	b120      	cbz	r0, b6b7e <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b6b74:	a801      	add	r0, sp, #4
   b6b76:	f004 f9c1 	bl	baefc <mktime>
   b6b7a:	e9c5 0100 	strd	r0, r1, [r5]
}
   b6b7e:	4620      	mov	r0, r4
   b6b80:	b00b      	add	sp, #44	; 0x2c
   b6b82:	bd30      	pop	{r4, r5, pc}

000b6b84 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b6b84:	230a      	movs	r3, #10
   b6b86:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b6b8a:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b6b8e:	fb91 f2f3 	sdiv	r2, r1, r3
   b6b92:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b6b96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b6b9a:	b2c0      	uxtb	r0, r0
   b6b9c:	4770      	bx	lr

000b6b9e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6b9e:	b570      	push	{r4, r5, r6, lr}
   b6ba0:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b6ba2:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6ba4:	460c      	mov	r4, r1
   b6ba6:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b6ba8:	f7ff ffec 	bl	b6b84 <_ZN6AB180510valueToBcdEi>
   b6bac:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6bae:	6868      	ldr	r0, [r5, #4]
   b6bb0:	f7ff ffe8 	bl	b6b84 <_ZN6AB180510valueToBcdEi>
   b6bb4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b6bb6:	68a8      	ldr	r0, [r5, #8]
   b6bb8:	f7ff ffe4 	bl	b6b84 <_ZN6AB180510valueToBcdEi>
   b6bbc:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6bbe:	68e8      	ldr	r0, [r5, #12]
   b6bc0:	f7ff ffe0 	bl	b6b84 <_ZN6AB180510valueToBcdEi>
   b6bc4:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6bc6:	6928      	ldr	r0, [r5, #16]
   b6bc8:	3001      	adds	r0, #1
   b6bca:	f7ff ffdb 	bl	b6b84 <_ZN6AB180510valueToBcdEi>
   b6bce:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6bd0:	b92e      	cbnz	r6, b6bde <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6bd2:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6bd4:	69a8      	ldr	r0, [r5, #24]
   b6bd6:	f7ff ffd5 	bl	b6b84 <_ZN6AB180510valueToBcdEi>
   b6bda:	7030      	strb	r0, [r6, #0]
}
   b6bdc:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6bde:	696a      	ldr	r2, [r5, #20]
   b6be0:	2364      	movs	r3, #100	; 0x64
   b6be2:	fb92 f0f3 	sdiv	r0, r2, r3
   b6be6:	fb03 2010 	mls	r0, r3, r0, r2
   b6bea:	f7ff ffcb 	bl	b6b84 <_ZN6AB180510valueToBcdEi>
   b6bee:	1da6      	adds	r6, r4, #6
   b6bf0:	7160      	strb	r0, [r4, #5]
   b6bf2:	e7ef      	b.n	b6bd4 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6bf4 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6bf6:	b087      	sub	sp, #28
   b6bf8:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6bfa:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6bfc:	4616      	mov	r6, r2
   b6bfe:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6c00:	f7ff ff36 	bl	b6a70 <_ZN6AB180510tmToStringEPK2tm>
   b6c04:	481e      	ldr	r0, [pc, #120]	; (b6c80 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6c06:	9a02      	ldr	r2, [sp, #8]
   b6c08:	491e      	ldr	r1, [pc, #120]	; (b6c84 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b6c0a:	f7fd fa67 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6c0e:	a802      	add	r0, sp, #8
   b6c10:	f006 fc68 	bl	bd4e4 <_ZN6StringD1Ev>
    if (lock) {
   b6c14:	b116      	cbz	r6, b6c1c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b6c16:	6868      	ldr	r0, [r5, #4]
   b6c18:	f004 feda 	bl	bb9d0 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	2201      	movs	r2, #1
   b6c20:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6c24:	2700      	movs	r7, #0
   b6c26:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b6c2a:	f7ff ffb8 	bl	b6b9e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6c2e:	2301      	movs	r3, #1
   b6c30:	461a      	mov	r2, r3
   b6c32:	2110      	movs	r1, #16
   b6c34:	4628      	mov	r0, r5
   b6c36:	f7ff fd8d 	bl	b6754 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b6c3a:	4604      	mov	r4, r0
   b6c3c:	b1e8      	cbz	r0, b6c7a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b6c3e:	2308      	movs	r3, #8
   b6c40:	9700      	str	r7, [sp, #0]
   b6c42:	eb0d 0203 	add.w	r2, sp, r3
   b6c46:	4639      	mov	r1, r7
   b6c48:	4628      	mov	r0, r5
   b6c4a:	f7ff fc3b 	bl	b64c4 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b6c4e:	4604      	mov	r4, r0
   b6c50:	b160      	cbz	r0, b6c6c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6c52:	2301      	movs	r3, #1
   b6c54:	461a      	mov	r2, r3
   b6c56:	2110      	movs	r1, #16
   b6c58:	4628      	mov	r0, r5
   b6c5a:	f7ff fd1a 	bl	b6692 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b6c5e:	b116      	cbz	r6, b6c66 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b6c60:	6868      	ldr	r0, [r5, #4]
   b6c62:	f004 febe 	bl	bb9e2 <_ZN7TwoWire6unlockEv>
}
   b6c66:	4620      	mov	r0, r4
   b6c68:	b007      	add	sp, #28
   b6c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b6c6c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b6c70:	4905      	ldr	r1, [pc, #20]	; (b6c88 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b6c72:	4803      	ldr	r0, [pc, #12]	; (b6c80 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6c74:	f7ff fb54 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
   b6c78:	e7f1      	b.n	b6c5e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b6c7a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b6c7e:	e7f7      	b.n	b6c70 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b6c80:	2003e438 	.word	0x2003e438
   b6c84:	000bfdd4 	.word	0x000bfdd4
   b6c88:	000bfde2 	.word	0x000bfde2

000b6c8c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6c8c:	b513      	push	{r0, r1, r4, lr}
   b6c8e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b6c90:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6c92:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b6c96:	f007 ffbb 	bl	bec10 <gmtime>
    return setRtcFromTm(tm, lock);
   b6c9a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b6c9e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6ca0:	4620      	mov	r0, r4
   b6ca2:	f7ff ffa7 	bl	b6bf4 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b6ca6:	b002      	add	sp, #8
   b6ca8:	bd10      	pop	{r4, pc}
	...

000b6cac <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6cae:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6cb0:	b089      	sub	sp, #36	; 0x24
   b6cb2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6cb4:	bb75      	cbnz	r5, b6d14 <_ZN6AB18054loopEv+0x68>
   b6cb6:	f006 ff97 	bl	bdbe8 <_ZN9TimeClass7isValidEv>
   b6cba:	b358      	cbz	r0, b6d14 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b6cbc:	2600      	movs	r6, #0
   b6cbe:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6cc0:	a904      	add	r1, sp, #16
   b6cc2:	4628      	mov	r0, r5
        tm = 0;
   b6cc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6cc8:	f004 f820 	bl	bad0c <spark_sync_time_last>
   b6ccc:	b310      	cbz	r0, b6d14 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6cce:	2501      	movs	r5, #1
   b6cd0:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6cd2:	f006 ffa6 	bl	bdc22 <_ZN9TimeClass3nowEv>
   b6cd6:	17c3      	asrs	r3, r0, #31
   b6cd8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6cdc:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6cde:	9500      	str	r5, [sp, #0]
   b6ce0:	4620      	mov	r0, r4
   b6ce2:	f7ff ffd3 	bl	b6c8c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b6ce6:	a902      	add	r1, sp, #8
   b6ce8:	4620      	mov	r0, r4
        time = 0;
   b6cea:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6cee:	f7ff ff39 	bl	b6b64 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6cf2:	4b13      	ldr	r3, [pc, #76]	; (b6d40 <_ZN6AB18054loopEv+0x94>)
   b6cf4:	4913      	ldr	r1, [pc, #76]	; (b6d44 <_ZN6AB18054loopEv+0x98>)
   b6cf6:	681b      	ldr	r3, [r3, #0]
   b6cf8:	9300      	str	r3, [sp, #0]
   b6cfa:	a804      	add	r0, sp, #16
   b6cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6d00:	f006 ff30 	bl	bdb64 <_ZN9TimeClass6formatExPKc>
   b6d04:	4810      	ldr	r0, [pc, #64]	; (b6d48 <_ZN6AB18054loopEv+0x9c>)
   b6d06:	9a04      	ldr	r2, [sp, #16]
   b6d08:	4910      	ldr	r1, [pc, #64]	; (b6d4c <_ZN6AB18054loopEv+0xa0>)
   b6d0a:	f7fd f9e7 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6d0e:	a804      	add	r0, sp, #16
   b6d10:	f006 fbe8 	bl	bd4e4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6d14:	6963      	ldr	r3, [r4, #20]
   b6d16:	b18b      	cbz	r3, b6d3c <_ZN6AB18054loopEv+0x90>
   b6d18:	f003 fcec 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6d1c:	6923      	ldr	r3, [r4, #16]
   b6d1e:	1ac0      	subs	r0, r0, r3
   b6d20:	6963      	ldr	r3, [r4, #20]
   b6d22:	4298      	cmp	r0, r3
   b6d24:	d30a      	bcc.n	b6d3c <_ZN6AB18054loopEv+0x90>
   b6d26:	f003 fce5 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b6d2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b6d2e:	6120      	str	r0, [r4, #16]
            setWDT();
   b6d30:	4620      	mov	r0, r4
}
   b6d32:	b009      	add	sp, #36	; 0x24
   b6d34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6d38:	f7ff bc0c 	b.w	b6554 <_ZN6AB18056setWDTEi>
}
   b6d3c:	b009      	add	sp, #36	; 0x24
   b6d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6d40:	2003de84 	.word	0x2003de84
   b6d44:	2003e6ac 	.word	0x2003e6ac
   b6d48:	2003e438 	.word	0x2003e438
   b6d4c:	000bfdfd 	.word	0x000bfdfd

000b6d50 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6d50:	b530      	push	{r4, r5, lr}
   b6d52:	4604      	mov	r4, r0
   b6d54:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b6d56:	b111      	cbz	r1, b6d5e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b6d58:	6840      	ldr	r0, [r0, #4]
   b6d5a:	f004 fde7 	bl	bb92c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b6d5e:	4620      	mov	r0, r4
   b6d60:	f7ff fb64 	bl	b642c <_ZN6AB180510detectChipEv>
   b6d64:	ad06      	add	r5, sp, #24
   b6d66:	2800      	cmp	r0, #0
   b6d68:	d037      	beq.n	b6dda <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b6d6a:	4620      	mov	r0, r4
   b6d6c:	f7ff fc9c 	bl	b66a8 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b6d70:	2301      	movs	r3, #1
   b6d72:	461a      	mov	r2, r3
   b6d74:	2110      	movs	r1, #16
   b6d76:	4620      	mov	r0, r4
   b6d78:	f7ff fc6d 	bl	b6656 <_ZN6AB180510isBitClearEhhb>
   b6d7c:	b1d8      	cbz	r0, b6db6 <_ZN6AB18055setupEb+0x66>
   b6d7e:	f006 ff33 	bl	bdbe8 <_ZN9TimeClass7isValidEv>
   b6d82:	b9c0      	cbnz	r0, b6db6 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b6d84:	a902      	add	r1, sp, #8
   b6d86:	4620      	mov	r0, r4
   b6d88:	f7ff feec 	bl	b6b64 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b6d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6d90:	f006 fe2e 	bl	bd9f0 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6d94:	4b13      	ldr	r3, [pc, #76]	; (b6de4 <_ZN6AB18055setupEb+0x94>)
   b6d96:	4914      	ldr	r1, [pc, #80]	; (b6de8 <_ZN6AB18055setupEb+0x98>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	9300      	str	r3, [sp, #0]
   b6d9c:	4628      	mov	r0, r5
   b6d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6da2:	f006 fedf 	bl	bdb64 <_ZN9TimeClass6formatExPKc>
   b6da6:	4811      	ldr	r0, [pc, #68]	; (b6dec <_ZN6AB18055setupEb+0x9c>)
   b6da8:	9a06      	ldr	r2, [sp, #24]
   b6daa:	4911      	ldr	r1, [pc, #68]	; (b6df0 <_ZN6AB18055setupEb+0xa0>)
   b6dac:	f7fd f996 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6db0:	4628      	mov	r0, r5
   b6db2:	f006 fb97 	bl	bd4e4 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6db6:	4b0f      	ldr	r3, [pc, #60]	; (b6df4 <_ZN6AB18055setupEb+0xa4>)
   b6db8:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b6dba:	4b0f      	ldr	r3, [pc, #60]	; (b6df8 <_ZN6AB18055setupEb+0xa8>)
   b6dbc:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6dbe:	4b0f      	ldr	r3, [pc, #60]	; (b6dfc <_ZN6AB18055setupEb+0xac>)
   b6dc0:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b6dc6:	2300      	movs	r3, #0
   b6dc8:	a802      	add	r0, sp, #8
   b6dca:	9500      	str	r5, [sp, #0]
   b6dcc:	f7fe f868 	bl	b4ea0 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6dd0:	4628      	mov	r0, r5
   b6dd2:	f7fd fd75 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
}
   b6dd6:	b00b      	add	sp, #44	; 0x2c
   b6dd8:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b6dda:	4909      	ldr	r1, [pc, #36]	; (b6e00 <_ZN6AB18055setupEb+0xb0>)
   b6ddc:	4803      	ldr	r0, [pc, #12]	; (b6dec <_ZN6AB18055setupEb+0x9c>)
   b6dde:	f7ff fa9f 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
   b6de2:	e7e8      	b.n	b6db6 <_ZN6AB18055setupEb+0x66>
   b6de4:	2003de84 	.word	0x2003de84
   b6de8:	2003e6ac 	.word	0x2003e6ac
   b6dec:	2003e438 	.word	0x2003e438
   b6df0:	000bfe13 	.word	0x000bfe13
   b6df4:	000b65d9 	.word	0x000b65d9
   b6df8:	000b48b7 	.word	0x000b48b7
   b6dfc:	000b48a3 	.word	0x000b48a3
   b6e00:	000bfe30 	.word	0x000bfe30

000b6e04 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6e04:	4b01      	ldr	r3, [pc, #4]	; (b6e0c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b6e06:	4a02      	ldr	r2, [pc, #8]	; (b6e10 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6e08:	601a      	str	r2, [r3, #0]
}
   b6e0a:	4770      	bx	lr
   b6e0c:	2003e438 	.word	0x2003e438
   b6e10:	000bfe48 	.word	0x000bfe48

000b6e14 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6e14:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b6e16:	2301      	movs	r3, #1
   b6e18:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b6e1a:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6e1c:	4604      	mov	r4, r0
        if (th->func) {
   b6e1e:	b143      	cbz	r3, b6e32 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6e20:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6e22:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6e24:	2301      	movs	r3, #1
   b6e26:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b6e28:	2000      	movs	r0, #0
    }
   b6e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b6e2e:	f003 bc31 	b.w	ba694 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6e32:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b6e34:	2800      	cmp	r0, #0
   b6e36:	d0f5      	beq.n	b6e24 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b6e38:	6883      	ldr	r3, [r0, #8]
   b6e3a:	b90b      	cbnz	r3, b6e40 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b6e3c:	f007 fa04 	bl	be248 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6e40:	68c3      	ldr	r3, [r0, #12]
   b6e42:	e7ee      	b.n	b6e22 <_ZN6Thread3runEPv+0xe>

000b6e44 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b6e44:	2a01      	cmp	r2, #1
   b6e46:	d102      	bne.n	b6e4e <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6e48:	6001      	str	r1, [r0, #0]
      }
   b6e4a:	2000      	movs	r0, #0
   b6e4c:	4770      	bx	lr
	  switch (__op)
   b6e4e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6e50:	bf04      	itt	eq
   b6e52:	680b      	ldreq	r3, [r1, #0]
   b6e54:	6003      	streq	r3, [r0, #0]
	      break;
   b6e56:	e7f8      	b.n	b6e4a <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b6e58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b6e58:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b6e5a:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b6e5c:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b6e5e:	b135      	cbz	r5, b6e6e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b6e60:	4628      	mov	r0, r5
   b6e62:	f7fd fd2d 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b6e66:	2110      	movs	r1, #16
   b6e68:	4628      	mov	r0, r5
   b6e6a:	f7fd f918 	bl	b409e <_ZdlPvj>
   b6e6e:	4620      	mov	r0, r4
   b6e70:	2114      	movs	r1, #20
      }
   b6e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b6e76:	f7fd b912 	b.w	b409e <_ZdlPvj>

000b6e7a <_ZN6Thread7disposeEv>:
    void dispose()
   b6e7a:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6e7c:	6803      	ldr	r3, [r0, #0]
   b6e7e:	4604      	mov	r4, r0
        if (!isValid())
   b6e80:	b1ab      	cbz	r3, b6eae <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b6e82:	6858      	ldr	r0, [r3, #4]
   b6e84:	f003 fbb6 	bl	ba5f4 <os_thread_is_current>
   b6e88:	b988      	cbnz	r0, b6eae <_ZN6Thread7disposeEv+0x34>
   b6e8a:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b6e8c:	7c5a      	ldrb	r2, [r3, #17]
   b6e8e:	b912      	cbnz	r2, b6e96 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b6e90:	6858      	ldr	r0, [r3, #4]
   b6e92:	f003 fbb7 	bl	ba604 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b6e96:	6823      	ldr	r3, [r4, #0]
   b6e98:	6858      	ldr	r0, [r3, #4]
   b6e9a:	f003 fbbb 	bl	ba614 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b6e9e:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b6ea0:	2300      	movs	r3, #0
   b6ea2:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b6ea4:	b118      	cbz	r0, b6eae <_ZN6Thread7disposeEv+0x34>
    }
   b6ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6eaa:	f7ff bfd5 	b.w	b6e58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b6eae:	bd10      	pop	{r4, pc}

000b6eb0 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b6eb0:	4a05      	ldr	r2, [pc, #20]	; (b6ec8 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b6eb2:	6002      	str	r2, [r0, #0]
   b6eb4:	2200      	movs	r2, #0
   b6eb6:	6042      	str	r2, [r0, #4]
   b6eb8:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b6eba:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b6ebe:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b6ec2:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b6ec6:	4770      	bx	lr
   b6ec8:	000bfe88 	.word	0x000bfe88

000b6ecc <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b6ecc:	b510      	push	{r4, lr}
    if (!_instance) {
   b6ece:	4c07      	ldr	r4, [pc, #28]	; (b6eec <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b6ed0:	6823      	ldr	r3, [r4, #0]
   b6ed2:	b943      	cbnz	r3, b6ee6 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b6ed4:	f240 4064 	movw	r0, #1124	; 0x464
   b6ed8:	f7fd f8dd 	bl	b4096 <_Znwj>
   b6edc:	4603      	mov	r3, r0
   b6ede:	b108      	cbz	r0, b6ee4 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b6ee0:	f7ff ffe6 	bl	b6eb0 <_ZN19BackgroundPublishRKC1Ev>
   b6ee4:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b6ee6:	6820      	ldr	r0, [r4, #0]
   b6ee8:	bd10      	pop	{r4, pc}
   b6eea:	bf00      	nop
   b6eec:	2003e440 	.word	0x2003e440

000b6ef0 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b6ef0:	b538      	push	{r3, r4, r5, lr}
   b6ef2:	4604      	mov	r4, r0
    if(thread)
   b6ef4:	6840      	ldr	r0, [r0, #4]
   b6ef6:	b190      	cbz	r0, b6f1e <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b6ef8:	2302      	movs	r3, #2
   b6efa:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b6efc:	f7ff ffbd 	bl	b6e7a <_ZN6Thread7disposeEv>
        delete thread;
   b6f00:	6865      	ldr	r5, [r4, #4]
   b6f02:	b155      	cbz	r5, b6f1a <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b6f04:	4628      	mov	r0, r5
   b6f06:	f7ff ffb8 	bl	b6e7a <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b6f0a:	6828      	ldr	r0, [r5, #0]
   b6f0c:	b108      	cbz	r0, b6f12 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b6f0e:	f7ff ffa3 	bl	b6e58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b6f12:	2104      	movs	r1, #4
   b6f14:	4628      	mov	r0, r5
   b6f16:	f7fd f8c2 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b6f1a:	2300      	movs	r3, #0
   b6f1c:	6063      	str	r3, [r4, #4]
    }
}
   b6f1e:	bd38      	pop	{r3, r4, r5, pc}

000b6f20 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6f20:	b510      	push	{r4, lr}
   b6f22:	4b05      	ldr	r3, [pc, #20]	; (b6f38 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b6f24:	6003      	str	r3, [r0, #0]
   b6f26:	4604      	mov	r4, r0
    stop();
   b6f28:	f7ff ffe2 	bl	b6ef0 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b6f2c:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b6f30:	f7fd fcc6 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
}
   b6f34:	4620      	mov	r0, r4
   b6f36:	bd10      	pop	{r4, pc}
   b6f38:	000bfe88 	.word	0x000bfe88

000b6f3c <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6f3c:	b510      	push	{r4, lr}
   b6f3e:	4604      	mov	r4, r0
}
   b6f40:	f7ff ffee 	bl	b6f20 <_ZN19BackgroundPublishRKD1Ev>
   b6f44:	4620      	mov	r0, r4
   b6f46:	f240 4164 	movw	r1, #1124	; 0x464
   b6f4a:	f7fd f8a8 	bl	b409e <_ZdlPvj>
   b6f4e:	4620      	mov	r0, r4
   b6f50:	bd10      	pop	{r4, pc}

000b6f52 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b6f52:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6f54:	4604      	mov	r4, r0
   b6f56:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b6f58:	f100 060d 	add.w	r6, r0, #13
   b6f5c:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b6f60:	7b23      	ldrb	r3, [r4, #12]
   b6f62:	b91b      	cbnz	r3, b6f6c <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b6f64:	2001      	movs	r0, #1
   b6f66:	f003 ffd1 	bl	baf0c <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b6f6a:	e7f9      	b.n	b6f60 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b6f6c:	7b23      	ldrb	r3, [r4, #12]
   b6f6e:	2b02      	cmp	r3, #2
   b6f70:	d064      	beq.n	b703c <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b6f72:	68a0      	ldr	r0, [r4, #8]
   b6f74:	f003 fb5e 	bl	ba634 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b6f78:	68a0      	ldr	r0, [r4, #8]
   b6f7a:	f003 fb63 	bl	ba644 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6f7e:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6f82:	f88d 3000 	strb.w	r3, [sp]
   b6f86:	463a      	mov	r2, r7
   b6f88:	233c      	movs	r3, #60	; 0x3c
   b6f8a:	4631      	mov	r1, r6
   b6f8c:	a806      	add	r0, sp, #24
   b6f8e:	f004 fa8b 	bl	bb4a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b6f92:	9d06      	ldr	r5, [sp, #24]
   b6f94:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b6f96:	b933      	cbnz	r3, b6fa6 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b6f98:	7b23      	ldrb	r3, [r4, #12]
   b6f9a:	2b02      	cmp	r3, #2
   b6f9c:	d003      	beq.n	b6fa6 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b6f9e:	2001      	movs	r0, #1
   b6fa0:	f003 ffb4 	bl	baf0c <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b6fa4:	e7f5      	b.n	b6f92 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b6fa6:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b6faa:	b31b      	cbz	r3, b6ff4 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b6fac:	2000      	movs	r0, #0
   b6fae:	f003 fe23 	bl	babf8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6fb2:	b120      	cbz	r0, b6fbe <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b6fb4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b6fb6:	b913      	cbnz	r3, b6fbe <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b6fb8:	f003 fe80 	bl	bacbc <spark_process>
    }
   b6fbc:	e7fa      	b.n	b6fb4 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6fbe:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b6fc0:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b6fc4:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b6fc6:	1e59      	subs	r1, r3, #1
   b6fc8:	424b      	negs	r3, r1
   b6fca:	414b      	adcs	r3, r1
   b6fcc:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b6fd0:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b6fd4:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b6fd8:	b90b      	cbnz	r3, b6fde <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b6fda:	f007 f935 	bl	be248 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6fde:	ab05      	add	r3, sp, #20
   b6fe0:	9300      	str	r3, [sp, #0]
   b6fe2:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b6fe6:	ab04      	add	r3, sp, #16
   b6fe8:	aa03      	add	r2, sp, #12
   b6fea:	f10d 010b 	add.w	r1, sp, #11
   b6fee:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b6ff2:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b6ff4:	68a0      	ldr	r0, [r4, #8]
   b6ff6:	f003 fb1d 	bl	ba634 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b6ffa:	7b23      	ldrb	r3, [r4, #12]
   b6ffc:	2b02      	cmp	r3, #2
   b6ffe:	d017      	beq.n	b7030 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b7000:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b7004:	2500      	movs	r5, #0
   b7006:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b700a:	b143      	cbz	r3, b701e <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b700c:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7010:	2203      	movs	r2, #3
   b7012:	4608      	mov	r0, r1
   b7014:	4798      	blx	r3
	    _M_manager = nullptr;
   b7016:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b701a:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b701e:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b7020:	68a0      	ldr	r0, [r4, #8]
   b7022:	7323      	strb	r3, [r4, #12]
   b7024:	f003 fb0e 	bl	ba644 <os_mutex_unlock>
   b7028:	a807      	add	r0, sp, #28
   b702a:	f7fe fdb9 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b702e:	e797      	b.n	b6f60 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b7030:	68a0      	ldr	r0, [r4, #8]
   b7032:	f003 fb07 	bl	ba644 <os_mutex_unlock>
   b7036:	a807      	add	r0, sp, #28
   b7038:	f7fe fdb2 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b703c:	b009      	add	sp, #36	; 0x24
   b703e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7040 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b7040:	6800      	ldr	r0, [r0, #0]
   b7042:	f7ff bf86 	b.w	b6f52 <_ZN19BackgroundPublishRK8thread_fEv>

000b7046 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7046:	b513      	push	{r0, r1, r4, lr}
   b7048:	460b      	mov	r3, r1
   b704a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b704c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7050:	466c      	mov	r4, sp
   b7052:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7056:	e893 0003 	ldmia.w	r3, {r0, r1}
   b705a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b705e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7062:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7066:	b002      	add	sp, #8
   b7068:	bd10      	pop	{r4, pc}
	...

000b706c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b706c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7070:	4606      	mov	r6, r0
   b7072:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b7074:	2014      	movs	r0, #20
   b7076:	4926      	ldr	r1, [pc, #152]	; (b7110 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b7078:	4617      	mov	r7, r2
   b707a:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b707c:	f007 f8da 	bl	be234 <_ZnwjRKSt9nothrow_t>
   b7080:	4604      	mov	r4, r0
   b7082:	b130      	cbz	r0, b7092 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b7084:	2000      	movs	r0, #0
            exited(false) {
   b7086:	e9c4 0000 	strd	r0, r0, [r4]
   b708a:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b708e:	7420      	strb	r0, [r4, #16]
   b7090:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7092:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b7094:	2c00      	cmp	r4, #0
   b7096:	d031      	beq.n	b70fc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b7098:	491d      	ldr	r1, [pc, #116]	; (b7110 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b709a:	2010      	movs	r0, #16
   b709c:	f007 f8ca 	bl	be234 <_ZnwjRKSt9nothrow_t>
   b70a0:	4605      	mov	r5, r0
   b70a2:	b168      	cbz	r0, b70c0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b70a4:	2300      	movs	r3, #0
   b70a6:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b70a8:	4601      	mov	r1, r0
   b70aa:	4638      	mov	r0, r7
   b70ac:	f7ff ffcb 	bl	b7046 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b70b0:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b70b2:	68aa      	ldr	r2, [r5, #8]
   b70b4:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b70b6:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b70b8:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b70ba:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b70bc:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b70be:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b70c0:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b70c2:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b70c4:	b137      	cbz	r7, b70d4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b70c6:	4638      	mov	r0, r7
   b70c8:	f7fd fbfa 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b70cc:	2110      	movs	r1, #16
   b70ce:	4638      	mov	r0, r7
   b70d0:	f7fc ffe5 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b70d4:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b70d6:	6803      	ldr	r3, [r0, #0]
   b70d8:	b183      	cbz	r3, b70fc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b70da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b70dc:	464a      	mov	r2, r9
   b70de:	e9cd 0300 	strd	r0, r3, [sp]
   b70e2:	4641      	mov	r1, r8
   b70e4:	4b0b      	ldr	r3, [pc, #44]	; (b7114 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b70e6:	3004      	adds	r0, #4
   b70e8:	f003 fa7c 	bl	ba5e4 <os_thread_create>
   b70ec:	b930      	cbnz	r0, b70fc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b70ee:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b70f0:	7c1b      	ldrb	r3, [r3, #16]
   b70f2:	b94b      	cbnz	r3, b7108 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b70f4:	2001      	movs	r0, #1
   b70f6:	f003 faed 	bl	ba6d4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b70fa:	e7f8      	b.n	b70ee <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b70fc:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b70fe:	2300      	movs	r3, #0
   b7100:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b7102:	b108      	cbz	r0, b7108 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b7104:	f7ff fea8 	bl	b6e58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b7108:	4630      	mov	r0, r6
   b710a:	b003      	add	sp, #12
   b710c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7110:	000c0960 	.word	0x000c0960
   b7114:	000b6e15 	.word	0x000b6e15

000b7118 <_ZN19BackgroundPublishRK5startEv>:
{
   b7118:	b530      	push	{r4, r5, lr}
    if(!thread)
   b711a:	6843      	ldr	r3, [r0, #4]
{
   b711c:	b087      	sub	sp, #28
   b711e:	4604      	mov	r4, r0
    if(!thread)
   b7120:	b9c3      	cbnz	r3, b7154 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b7122:	3008      	adds	r0, #8
   b7124:	f003 fa7e 	bl	ba624 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b7128:	4b0b      	ldr	r3, [pc, #44]	; (b7158 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b712a:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b712c:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b712e:	4b0b      	ldr	r3, [pc, #44]	; (b715c <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7130:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7132:	9304      	str	r3, [sp, #16]
   b7134:	f7fc ffaf 	bl	b4096 <_Znwj>
   b7138:	4605      	mov	r5, r0
   b713a:	b138      	cbz	r0, b714c <_ZN19BackgroundPublishRK5startEv+0x34>
   b713c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7140:	9300      	str	r3, [sp, #0]
   b7142:	4907      	ldr	r1, [pc, #28]	; (b7160 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b7144:	2302      	movs	r3, #2
   b7146:	aa02      	add	r2, sp, #8
   b7148:	f7ff ff90 	bl	b706c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b714c:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b714e:	a802      	add	r0, sp, #8
   b7150:	f7fd fbb6 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
}
   b7154:	b007      	add	sp, #28
   b7156:	bd30      	pop	{r4, r5, pc}
   b7158:	000b7041 	.word	0x000b7041
   b715c:	000b6e45 	.word	0x000b6e45
   b7160:	000bfe6c 	.word	0x000bfe6c

000b7164 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b7164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7168:	4604      	mov	r4, r0
   b716a:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b716c:	6880      	ldr	r0, [r0, #8]
   b716e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7170:	4698      	mov	r8, r3
   b7172:	460d      	mov	r5, r1
   b7174:	4616      	mov	r6, r2
   b7176:	f003 fa5d 	bl	ba634 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b717a:	6863      	ldr	r3, [r4, #4]
   b717c:	b11b      	cbz	r3, b7186 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b717e:	7b23      	ldrb	r3, [r4, #12]
   b7180:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b7184:	b133      	cbz	r3, b7194 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b7186:	68a0      	ldr	r0, [r4, #8]
   b7188:	f003 fa5c 	bl	ba644 <os_mutex_unlock>
    {
        return false;
   b718c:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b718e:	b005      	add	sp, #20
   b7190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7194:	68a0      	ldr	r0, [r4, #8]
   b7196:	f003 fa55 	bl	ba644 <os_mutex_unlock>
    if(!name)
   b719a:	2d00      	cmp	r5, #0
   b719c:	d03d      	beq.n	b721a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b719e:	2240      	movs	r2, #64	; 0x40
   b71a0:	4629      	mov	r1, r5
   b71a2:	f104 000d 	add.w	r0, r4, #13
   b71a6:	f007 fe58 	bl	bee5a <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b71aa:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b71ae:	b38e      	cbz	r6, b7214 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b71b0:	f240 4201 	movw	r2, #1025	; 0x401
   b71b4:	4631      	mov	r1, r6
   b71b6:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b71ba:	f007 fe4e 	bl	bee5a <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b71be:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b71c2:	2300      	movs	r3, #0
   b71c4:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b71c6:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b71c8:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b71cc:	b13b      	cbz	r3, b71de <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b71ce:	2202      	movs	r2, #2
   b71d0:	4639      	mov	r1, r7
   b71d2:	4668      	mov	r0, sp
   b71d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b71d6:	68fb      	ldr	r3, [r7, #12]
   b71d8:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b71da:	68bb      	ldr	r3, [r7, #8]
   b71dc:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b71de:	4629      	mov	r1, r5
   b71e0:	4668      	mov	r0, sp
   b71e2:	f7ff ff30 	bl	b7046 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b71e6:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b71e8:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b71ec:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b71f0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b71f2:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b71f4:	4668      	mov	r0, sp
   b71f6:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b71fa:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b71fe:	9203      	str	r2, [sp, #12]
   b7200:	f7fd fb5e 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b7204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7206:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b720a:	2001      	movs	r0, #1
    event_flags = flags;
   b720c:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7210:	7320      	strb	r0, [r4, #12]
    return true;
   b7212:	e7bc      	b.n	b718e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b7214:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b7218:	e7d3      	b.n	b71c2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b721a:	4628      	mov	r0, r5
   b721c:	e7b7      	b.n	b718e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000b721e <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b721e:	4770      	bx	lr

000b7220 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b7220:	4770      	bx	lr

000b7222 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b7222:	b510      	push	{r4, lr}
}
   b7224:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b7226:	4604      	mov	r4, r0
}
   b7228:	f7fc ff39 	bl	b409e <_ZdlPvj>
   b722c:	4620      	mov	r0, r4
   b722e:	bd10      	pop	{r4, pc}

000b7230 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b7230:	b510      	push	{r4, lr}
}
   b7232:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b7234:	4604      	mov	r4, r0
}
   b7236:	f7fc ff32 	bl	b409e <_ZdlPvj>
   b723a:	4620      	mov	r0, r4
   b723c:	bd10      	pop	{r4, pc}
	...

000b7240 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b7240:	b510      	push	{r4, lr}
   b7242:	4b05      	ldr	r3, [pc, #20]	; (b7258 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b7244:	4604      	mov	r4, r0
   b7246:	f840 3b1c 	str.w	r3, [r0], #28
   b724a:	f006 f94b 	bl	bd4e4 <_ZN6StringD1Ev>
   b724e:	1d20      	adds	r0, r4, #4
   b7250:	f006 f948 	bl	bd4e4 <_ZN6StringD1Ev>
}
   b7254:	4620      	mov	r0, r4
   b7256:	bd10      	pop	{r4, pc}
   b7258:	000bfefc 	.word	0x000bfefc

000b725c <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b725c:	b510      	push	{r4, lr}
   b725e:	4604      	mov	r4, r0
}
   b7260:	f7ff ffee 	bl	b7240 <_ZN22LocalTimePosixTimezoneD1Ev>
   b7264:	4620      	mov	r0, r4
   b7266:	2158      	movs	r1, #88	; 0x58
   b7268:	f7fc ff19 	bl	b409e <_ZdlPvj>
   b726c:	4620      	mov	r0, r4
   b726e:	bd10      	pop	{r4, pc}

000b7270 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b7270:	b510      	push	{r4, lr}
   b7272:	4b04      	ldr	r3, [pc, #16]	; (b7284 <_ZN9LocalTimeD1Ev+0x14>)
   b7274:	4604      	mov	r4, r0
   b7276:	f840 3b04 	str.w	r3, [r0], #4
   b727a:	f7ff ffe1 	bl	b7240 <_ZN22LocalTimePosixTimezoneD1Ev>
   b727e:	4620      	mov	r0, r4
   b7280:	bd10      	pop	{r4, pc}
   b7282:	bf00      	nop
   b7284:	000bfecc 	.word	0x000bfecc

000b7288 <_ZN9LocalTimeD0Ev>:
   b7288:	b510      	push	{r4, lr}
   b728a:	4604      	mov	r4, r0
   b728c:	f7ff fff0 	bl	b7270 <_ZN9LocalTimeD1Ev>
   b7290:	4620      	mov	r0, r4
   b7292:	2160      	movs	r1, #96	; 0x60
   b7294:	f7fc ff03 	bl	b409e <_ZdlPvj>
   b7298:	4620      	mov	r0, r4
   b729a:	bd10      	pop	{r4, pc}

000b729c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b729c:	f020 0302 	bic.w	r3, r0, #2
   b72a0:	2b01      	cmp	r3, #1
   b72a2:	d003      	beq.n	b72ac <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b72a4:	1f43      	subs	r3, r0, #5
   b72a6:	4258      	negs	r0, r3
   b72a8:	4158      	adcs	r0, r3
   b72aa:	4770      	bx	lr
   b72ac:	4618      	mov	r0, r3
   b72ae:	4770      	bx	lr

000b72b0 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b72b0:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b72b4:	7103      	strb	r3, [r0, #4]
   b72b6:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b72ba:	7143      	strb	r3, [r0, #5]
   b72bc:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b72c0:	7183      	strb	r3, [r0, #6]
   b72c2:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b72c6:	71c3      	strb	r3, [r0, #7]
   b72c8:	4770      	bx	lr

000b72ca <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b72ca:	b538      	push	{r3, r4, r5, lr}
   b72cc:	4604      	mov	r4, r0
   b72ce:	460d      	mov	r5, r1
   b72d0:	3004      	adds	r0, #4
   b72d2:	3104      	adds	r1, #4
   b72d4:	f006 f98d 	bl	bd5f2 <_ZN6StringaSERKS_>
   b72d8:	f105 0114 	add.w	r1, r5, #20
   b72dc:	f104 0014 	add.w	r0, r4, #20
   b72e0:	f7ff ffe6 	bl	b72b0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b72e4:	f105 011c 	add.w	r1, r5, #28
   b72e8:	f104 001c 	add.w	r0, r4, #28
   b72ec:	f006 f981 	bl	bd5f2 <_ZN6StringaSERKS_>
   b72f0:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b72f4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b72f8:	f7ff ffda 	bl	b72b0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b72fc:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b7300:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b7304:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b7308:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b730c:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b7310:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b7314:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b7318:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b731c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b7320:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7324:	f7ff ffc4 	bl	b72b0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b7328:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b732c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b7330:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b7334:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b7338:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b733c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b7340:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b7344:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b7348:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b734c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b7350:	f7ff ffae 	bl	b72b0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b7354:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b7358:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b735c:	bd38      	pop	{r3, r4, r5, pc}

000b735e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b735e:	680b      	ldr	r3, [r1, #0]
   b7360:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7362:	684b      	ldr	r3, [r1, #4]
   b7364:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7366:	b113      	cbz	r3, b736e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b7368:	685a      	ldr	r2, [r3, #4]
   b736a:	3201      	adds	r2, #1
   b736c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b736e:	4770      	bx	lr

000b7370 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b7370:	4a02      	ldr	r2, [pc, #8]	; (b737c <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b7372:	6002      	str	r2, [r0, #0]
   b7374:	684a      	ldr	r2, [r1, #4]
   b7376:	6042      	str	r2, [r0, #4]
   b7378:	4770      	bx	lr
   b737a:	bf00      	nop
   b737c:	000bfedc 	.word	0x000bfedc

000b7380 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b7380:	4a02      	ldr	r2, [pc, #8]	; (b738c <_ZN12LocalTimeHMSC1Ev+0xc>)
   b7382:	6002      	str	r2, [r0, #0]
   b7384:	2200      	movs	r2, #0
   b7386:	6042      	str	r2, [r0, #4]
}
   b7388:	4770      	bx	lr
   b738a:	bf00      	nop
   b738c:	000bfedc 	.word	0x000bfedc

000b7390 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b7390:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b7392:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b7394:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b7396:	8083      	strh	r3, [r0, #4]
   b7398:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b739a:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b739c:	ab05      	add	r3, sp, #20
   b739e:	9300      	str	r3, [sp, #0]
   b73a0:	4913      	ldr	r1, [pc, #76]	; (b73f0 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b73a2:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b73a4:	ab04      	add	r3, sp, #16
   b73a6:	aa03      	add	r2, sp, #12
   b73a8:	4628      	mov	r0, r5
   b73aa:	f003 fd4f 	bl	bae4c <sscanf>
   b73ae:	2803      	cmp	r0, #3
   b73b0:	d107      	bne.n	b73c2 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b73b2:	9b03      	ldr	r3, [sp, #12]
   b73b4:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b73b6:	9b04      	ldr	r3, [sp, #16]
   b73b8:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b73ba:	9b05      	ldr	r3, [sp, #20]
   b73bc:	71a3      	strb	r3, [r4, #6]
}
   b73be:	b007      	add	sp, #28
   b73c0:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b73c2:	490c      	ldr	r1, [pc, #48]	; (b73f4 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b73c4:	ab04      	add	r3, sp, #16
   b73c6:	aa03      	add	r2, sp, #12
   b73c8:	4628      	mov	r0, r5
   b73ca:	f003 fd3f 	bl	bae4c <sscanf>
   b73ce:	2802      	cmp	r0, #2
   b73d0:	d104      	bne.n	b73dc <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b73d2:	9b03      	ldr	r3, [sp, #12]
   b73d4:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b73d6:	9b04      	ldr	r3, [sp, #16]
   b73d8:	7163      	strb	r3, [r4, #5]
   b73da:	e7f0      	b.n	b73be <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b73dc:	4906      	ldr	r1, [pc, #24]	; (b73f8 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b73de:	aa03      	add	r2, sp, #12
   b73e0:	4628      	mov	r0, r5
   b73e2:	f003 fd33 	bl	bae4c <sscanf>
   b73e6:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b73e8:	bf04      	itt	eq
   b73ea:	9b03      	ldreq	r3, [sp, #12]
   b73ec:	7123      	strbeq	r3, [r4, #4]
}
   b73ee:	e7e6      	b.n	b73be <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b73f0:	000bfe90 	.word	0x000bfe90
   b73f4:	000bfe93 	.word	0x000bfe93
   b73f8:	000bfca3 	.word	0x000bfca3

000b73fc <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b73fc:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b7400:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7404:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b7408:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b740a:	bfb8      	it	lt
   b740c:	4808      	ldrlt	r0, [pc, #32]	; (b7430 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b740e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b7412:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b7416:	bfbd      	ittte	lt
   b7418:	fb00 3002 	mlalt	r0, r0, r2, r3
   b741c:	1840      	addlt	r0, r0, r1
   b741e:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b7420:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b7424:	bfa4      	itt	ge
   b7426:	fb00 3002 	mlage	r0, r0, r2, r3
   b742a:	1840      	addge	r0, r0, r1
}
   b742c:	4770      	bx	lr
   b742e:	bf00      	nop
   b7430:	fffff1f0 	.word	0xfffff1f0

000b7434 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b7434:	b508      	push	{r3, lr}
   b7436:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b743a:	b14b      	cbz	r3, b7450 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b743c:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b7440:	b943      	cbnz	r3, b7454 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b7442:	302c      	adds	r0, #44	; 0x2c
   b7444:	f7ff ffda 	bl	b73fc <_ZNK12LocalTimeHMS9toSecondsEv>
   b7448:	fab0 f080 	clz	r0, r0
   b744c:	0940      	lsrs	r0, r0, #5
   b744e:	bd08      	pop	{r3, pc}
   b7450:	2001      	movs	r0, #1
   b7452:	e7fc      	b.n	b744e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b7454:	2000      	movs	r0, #0
   b7456:	e7fa      	b.n	b744e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b7458 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b7458:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b745c:	b943      	cbnz	r3, b7470 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b745e:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7462:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b7464:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7468:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b746a:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b746e:	600b      	str	r3, [r1, #0]
}
   b7470:	4770      	bx	lr

000b7472 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b7472:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b7476:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b7478:	b9b3      	cbnz	r3, b74a8 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b747a:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b747e:	688c      	ldr	r4, [r1, #8]
   b7480:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b7482:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b7486:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b7488:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b748c:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b748e:	bfb5      	itete	lt
   b7490:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b7492:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b7494:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b7496:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b7498:	bfb5      	itete	lt
   b749a:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b749e:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b74a2:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b74a4:	189b      	addge	r3, r3, r2
   b74a6:	600b      	str	r3, [r1, #0]
}
   b74a8:	bd30      	pop	{r4, r5, pc}
	...

000b74ac <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b74ac:	b508      	push	{r3, lr}
   b74ae:	4a05      	ldr	r2, [pc, #20]	; (b74c4 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b74b0:	6002      	str	r2, [r0, #0]
   b74b2:	2200      	movs	r2, #0
   b74b4:	4603      	mov	r3, r0
   b74b6:	6042      	str	r2, [r0, #4]
   b74b8:	3008      	adds	r0, #8
   b74ba:	f7ff ff61 	bl	b7380 <_ZN12LocalTimeHMSC1Ev>
}
   b74be:	4618      	mov	r0, r3
   b74c0:	bd08      	pop	{r3, pc}
   b74c2:	bf00      	nop
   b74c4:	000bfeec 	.word	0x000bfeec

000b74c8 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b74c8:	2300      	movs	r3, #0
   b74ca:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b74cc:	8183      	strh	r3, [r0, #12]
   b74ce:	7383      	strb	r3, [r0, #14]
}
   b74d0:	4770      	bx	lr
	...

000b74d4 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b74d4:	b530      	push	{r4, r5, lr}
   b74d6:	4604      	mov	r4, r0
   b74d8:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b74da:	460d      	mov	r5, r1
   b74dc:	b111      	cbz	r1, b74e4 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b74de:	780b      	ldrb	r3, [r1, #0]
   b74e0:	2b4d      	cmp	r3, #77	; 0x4d
   b74e2:	d005      	beq.n	b74f0 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b74e4:	4620      	mov	r0, r4
}
   b74e6:	b007      	add	sp, #28
   b74e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b74ec:	f7ff bfec 	b.w	b74c8 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b74f0:	ab05      	add	r3, sp, #20
   b74f2:	9300      	str	r3, [sp, #0]
   b74f4:	4911      	ldr	r1, [pc, #68]	; (b753c <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b74f6:	ab04      	add	r3, sp, #16
   b74f8:	aa03      	add	r2, sp, #12
   b74fa:	4628      	mov	r0, r5
   b74fc:	f003 fca6 	bl	bae4c <sscanf>
   b7500:	2803      	cmp	r0, #3
   b7502:	d116      	bne.n	b7532 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b7504:	9b03      	ldr	r3, [sp, #12]
   b7506:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b7508:	9b04      	ldr	r3, [sp, #16]
   b750a:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b750c:	9b05      	ldr	r3, [sp, #20]
   b750e:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b7510:	212f      	movs	r1, #47	; 0x2f
   b7512:	4628      	mov	r0, r5
   b7514:	f007 fc3e 	bl	bed94 <strchr>
        if (cp) {
   b7518:	b140      	cbz	r0, b752c <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b751a:	1c41      	adds	r1, r0, #1
   b751c:	f104 0008 	add.w	r0, r4, #8
   b7520:	f7ff ff36 	bl	b7390 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b7524:	2301      	movs	r3, #1
   b7526:	71e3      	strb	r3, [r4, #7]
}
   b7528:	b007      	add	sp, #28
   b752a:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b752c:	81a0      	strh	r0, [r4, #12]
   b752e:	73a0      	strb	r0, [r4, #14]
}
   b7530:	e7f8      	b.n	b7524 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b7532:	4620      	mov	r0, r4
   b7534:	f7ff ffc8 	bl	b74c8 <_ZN15LocalTimeChange5clearEv>
   b7538:	e7f6      	b.n	b7528 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b753a:	bf00      	nop
   b753c:	000bfeab 	.word	0x000bfeab

000b7540 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b7540:	4b10      	ldr	r3, [pc, #64]	; (b7584 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b7542:	4911      	ldr	r1, [pc, #68]	; (b7588 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7544:	b510      	push	{r4, lr}
   b7546:	4604      	mov	r4, r0
   b7548:	f840 3b04 	str.w	r3, [r0], #4
   b754c:	f006 f815 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b7550:	f104 0014 	add.w	r0, r4, #20
   b7554:	f7ff ff14 	bl	b7380 <_ZN12LocalTimeHMSC1Ev>
   b7558:	490b      	ldr	r1, [pc, #44]	; (b7588 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b755a:	f104 001c 	add.w	r0, r4, #28
   b755e:	f006 f80c 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b7562:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b7566:	f7ff ff0b 	bl	b7380 <_ZN12LocalTimeHMSC1Ev>
   b756a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b756e:	f7ff ff9d 	bl	b74ac <_ZN15LocalTimeChangeC1Ev>
   b7572:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7576:	f7ff ff99 	bl	b74ac <_ZN15LocalTimeChangeC1Ev>
   b757a:	2300      	movs	r3, #0
   b757c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b7580:	4620      	mov	r0, r4
   b7582:	bd10      	pop	{r4, pc}
   b7584:	000bfefc 	.word	0x000bfefc
   b7588:	000c07d9 	.word	0x000c07d9

000b758c <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b758c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7590:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b7592:	4608      	mov	r0, r1
   b7594:	f007 fc28 	bl	bede8 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b7598:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b759a:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b759c:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b759e:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b75a2:	493f      	ldr	r1, [pc, #252]	; (b76a0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b75a4:	9801      	ldr	r0, [sp, #4]
   b75a6:	aa01      	add	r2, sp, #4
   b75a8:	f007 fca6 	bl	beef8 <strtok_r>
   b75ac:	4601      	mov	r1, r0
   b75ae:	2800      	cmp	r0, #0
   b75b0:	d062      	beq.n	b7678 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b75b2:	2d01      	cmp	r5, #1
   b75b4:	f105 0301 	add.w	r3, r5, #1
   b75b8:	d053      	beq.n	b7662 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b75ba:	2d02      	cmp	r5, #2
   b75bc:	d056      	beq.n	b766c <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b75be:	2d00      	cmp	r5, #0
   b75c0:	d146      	bne.n	b7650 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b75c2:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b75c4:	f892 9000 	ldrb.w	r9, [r2]
   b75c8:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b75cc:	4615      	mov	r5, r2
   b75ce:	4617      	mov	r7, r2
   b75d0:	f102 0201 	add.w	r2, r2, #1
   b75d4:	d8f6      	bhi.n	b75c4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b75d6:	2200      	movs	r2, #0
   b75d8:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b75da:	f104 001c 	add.w	r0, r4, #28
   b75de:	f006 f82a 	bl	bd636 <_ZN6StringaSEPKc>
                valid = true;
   b75e2:	2201      	movs	r2, #1
                *cp = save2;
   b75e4:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b75e8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b75ec:	782a      	ldrb	r2, [r5, #0]
   b75ee:	b36a      	cbz	r2, b764c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b75f0:	f897 a000 	ldrb.w	sl, [r7]
   b75f4:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b75f8:	2a3f      	cmp	r2, #63	; 0x3f
   b75fa:	46b9      	mov	r9, r7
   b75fc:	46bb      	mov	fp, r7
   b75fe:	f107 0701 	add.w	r7, r7, #1
   b7602:	d9f5      	bls.n	b75f0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b7604:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b7606:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b760a:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b760e:	4629      	mov	r1, r5
   b7610:	4638      	mov	r0, r7
   b7612:	f7ff febd 	bl	b7390 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b7616:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b761a:	f1ba 0f00 	cmp.w	sl, #0
   b761e:	d015      	beq.n	b764c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b7620:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b7622:	f81b ab01 	ldrb.w	sl, [fp], #1
   b7626:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b762a:	d8f9      	bhi.n	b7620 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b762c:	2200      	movs	r2, #0
   b762e:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b7630:	4649      	mov	r1, r9
   b7632:	1d20      	adds	r0, r4, #4
   b7634:	f005 ffff 	bl	bd636 <_ZN6StringaSEPKc>
                        *cp = save2;
   b7638:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b763c:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b7640:	f1ba 0f00 	cmp.w	sl, #0
   b7644:	d006      	beq.n	b7654 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b7646:	4629      	mov	r1, r5
   b7648:	f7ff fea2 	bl	b7390 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b764c:	2501      	movs	r5, #1
   b764e:	e7a8      	b.n	b75a2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b7650:	461d      	mov	r5, r3
   b7652:	e7a6      	b.n	b75a2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b7654:	4639      	mov	r1, r7
   b7656:	f7ff fe2b 	bl	b72b0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b765a:	7e23      	ldrb	r3, [r4, #24]
   b765c:	3b01      	subs	r3, #1
   b765e:	7623      	strb	r3, [r4, #24]
   b7660:	e7f4      	b.n	b764c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b7662:	4640      	mov	r0, r8
   b7664:	f7ff ff36 	bl	b74d4 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7668:	2502      	movs	r5, #2
   b766a:	e79a      	b.n	b75a2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b766c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7670:	f7ff ff30 	bl	b74d4 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7674:	2503      	movs	r5, #3
   b7676:	e794      	b.n	b75a2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b7678:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b767c:	b143      	cbz	r3, b7690 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b767e:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b7682:	b92a      	cbnz	r2, b7690 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b7684:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7688:	f7ff ff1e 	bl	b74c8 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b768c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b7690:	4630      	mov	r0, r6
   b7692:	f003 fbc3 	bl	bae1c <free>

    return valid;
}
   b7696:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b769a:	b003      	add	sp, #12
   b769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b76a0:	000bfeb5 	.word	0x000bfeb5

000b76a4 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b76a4:	b538      	push	{r3, r4, r5, lr}
   b76a6:	4b13      	ldr	r3, [pc, #76]	; (b76f4 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b76a8:	4604      	mov	r4, r0
   b76aa:	460d      	mov	r5, r1
   b76ac:	f840 3b04 	str.w	r3, [r0], #4
   b76b0:	4911      	ldr	r1, [pc, #68]	; (b76f8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b76b2:	f005 ff62 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b76b6:	f104 0014 	add.w	r0, r4, #20
   b76ba:	f7ff fe61 	bl	b7380 <_ZN12LocalTimeHMSC1Ev>
   b76be:	490e      	ldr	r1, [pc, #56]	; (b76f8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b76c0:	f104 001c 	add.w	r0, r4, #28
   b76c4:	f005 ff59 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b76c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b76cc:	f7ff fe58 	bl	b7380 <_ZN12LocalTimeHMSC1Ev>
   b76d0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b76d4:	f7ff feea 	bl	b74ac <_ZN15LocalTimeChangeC1Ev>
   b76d8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b76dc:	f7ff fee6 	bl	b74ac <_ZN15LocalTimeChangeC1Ev>
   b76e0:	2300      	movs	r3, #0
   b76e2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b76e6:	4629      	mov	r1, r5
   b76e8:	4620      	mov	r0, r4
   b76ea:	f7ff ff4f 	bl	b758c <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b76ee:	4620      	mov	r0, r4
   b76f0:	bd38      	pop	{r3, r4, r5, pc}
   b76f2:	bf00      	nop
   b76f4:	000bfefc 	.word	0x000bfefc
   b76f8:	000c07d9 	.word	0x000c07d9

000b76fc <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b76fc:	b510      	push	{r4, lr}
   b76fe:	4604      	mov	r4, r0
   b7700:	b088      	sub	sp, #32
   b7702:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b7704:	3068      	adds	r0, #104	; 0x68
   b7706:	a901      	add	r1, sp, #4
   b7708:	f007 fa56 	bl	bebb8 <asctime_r>
    int len = strlen(ascstr);
   b770c:	a801      	add	r0, sp, #4
   b770e:	f007 fb88 	bl	bee22 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b7712:	ab08      	add	r3, sp, #32
   b7714:	4418      	add	r0, r3
   b7716:	2300      	movs	r3, #0
   b7718:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b771c:	a901      	add	r1, sp, #4
   b771e:	4620      	mov	r0, r4
   b7720:	f005 ff2b 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7724:	4620      	mov	r0, r4
   b7726:	b008      	add	sp, #32
   b7728:	bd10      	pop	{r4, pc}
	...

000b772c <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b772c:	b538      	push	{r3, r4, r5, lr}
   b772e:	4604      	mov	r4, r0
    if (config.isZ()) {
   b7730:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b7732:	460d      	mov	r5, r1
    if (config.isZ()) {
   b7734:	f7ff fe7e 	bl	b7434 <_ZNK22LocalTimePosixTimezone3isZEv>
   b7738:	b128      	cbz	r0, b7746 <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b773a:	4909      	ldr	r1, [pc, #36]	; (b7760 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b773c:	4620      	mov	r0, r4
   b773e:	f005 ff1c 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b7742:	4620      	mov	r0, r4
   b7744:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b7746:	6828      	ldr	r0, [r5, #0]
   b7748:	f7ff fda8 	bl	b729c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b774c:	b128      	cbz	r0, b775a <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b774e:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b7752:	4620      	mov	r0, r4
   b7754:	f005 ff5c 	bl	bd610 <_ZN6StringC1ERKS_>
   b7758:	e7f3      	b.n	b7742 <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b775a:	f105 0120 	add.w	r1, r5, #32
   b775e:	e7f8      	b.n	b7752 <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b7760:	000bfeb7 	.word	0x000bfeb7

000b7764 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b7764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7768:	4680      	mov	r8, r0
   b776a:	b0a8      	sub	sp, #160	; 0xa0
   b776c:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b776e:	4615      	mov	r5, r2
   b7770:	b12a      	cbz	r2, b777e <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b7772:	4b47      	ldr	r3, [pc, #284]	; (b7890 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b7774:	4610      	mov	r0, r2
   b7776:	6819      	ldr	r1, [r3, #0]
   b7778:	f007 fb23 	bl	bedc2 <strcmp>
   b777c:	b938      	cbnz	r0, b778e <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b777e:	4621      	mov	r1, r4
   b7780:	4640      	mov	r0, r8
   b7782:	f7ff ffbb 	bl	b76fc <_ZN16LocalTimeConvert7timeStrEv>
}
   b7786:	4640      	mov	r0, r8
   b7788:	b028      	add	sp, #160	; 0xa0
   b778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b778e:	4629      	mov	r1, r5
   b7790:	223f      	movs	r2, #63	; 0x3f
   b7792:	a818      	add	r0, sp, #96	; 0x60
   b7794:	f007 fb61 	bl	bee5a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7798:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b779a:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b779c:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b77a0:	f007 fb3f 	bl	bee22 <strlen>
    String zoneNameStr = zoneName();
   b77a4:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b77a6:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b77a8:	a803      	add	r0, sp, #12
   b77aa:	f7ff ffbf 	bl	b772c <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b77ae:	1d20      	adds	r0, r4, #4
   b77b0:	f7ff fe40 	bl	b7434 <_ZNK22LocalTimePosixTimezone3isZEv>
   b77b4:	b348      	cbz	r0, b780a <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b77b6:	4937      	ldr	r1, [pc, #220]	; (b7894 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b77b8:	a807      	add	r0, sp, #28
   b77ba:	f007 fb0c 	bl	bedd6 <strcpy>
   b77be:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b77c0:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b77c2:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b77c6:	45ba      	cmp	sl, r7
   b77c8:	d94c      	bls.n	b7864 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b77ca:	7833      	ldrb	r3, [r6, #0]
   b77cc:	2b25      	cmp	r3, #37	; 0x25
   b77ce:	f107 0901 	add.w	r9, r7, #1
   b77d2:	d117      	bne.n	b7804 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b77d4:	7873      	ldrb	r3, [r6, #1]
   b77d6:	2b7a      	cmp	r3, #122	; 0x7a
   b77d8:	d136      	bne.n	b7848 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b77da:	a807      	add	r0, sp, #28
   b77dc:	f007 fb21 	bl	bee22 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b77e0:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b77e2:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b77e4:	1838      	adds	r0, r7, r0
   b77e6:	ebaa 0207 	sub.w	r2, sl, r7
   b77ea:	1cb1      	adds	r1, r6, #2
   b77ec:	4418      	add	r0, r3
   b77ee:	f007 fa35 	bl	bec5c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b77f2:	462a      	mov	r2, r5
   b77f4:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b77f6:	4630      	mov	r0, r6
   b77f8:	f007 fa30 	bl	bec5c <memcpy>
            len = strlen(format_str);
   b77fc:	a818      	add	r0, sp, #96	; 0x60
   b77fe:	f007 fb10 	bl	bee22 <strlen>
   b7802:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b7804:	3601      	adds	r6, #1
   b7806:	464f      	mov	r7, r9
   b7808:	e7db      	b.n	b77c2 <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b780a:	6820      	ldr	r0, [r4, #0]
   b780c:	f7ff fd46 	bl	b729c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b7810:	b1b8      	cbz	r0, b7842 <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b7812:	f104 0018 	add.w	r0, r4, #24
   b7816:	f7ff fdf1 	bl	b73fc <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b781a:	223c      	movs	r2, #60	; 0x3c
   b781c:	fb90 f3f2 	sdiv	r3, r0, r2
   b7820:	2b00      	cmp	r3, #0
   b7822:	bfb8      	it	lt
   b7824:	425b      	neglt	r3, r3
   b7826:	fbb3 f1f2 	udiv	r1, r3, r2
   b782a:	fb02 3311 	mls	r3, r2, r1, r3
   b782e:	9300      	str	r3, [sp, #0]
   b7830:	4a19      	ldr	r2, [pc, #100]	; (b7898 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b7832:	4b1a      	ldr	r3, [pc, #104]	; (b789c <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b7834:	fb90 f3f3 	sdiv	r3, r0, r3
   b7838:	2110      	movs	r1, #16
   b783a:	a807      	add	r0, sp, #28
   b783c:	f003 fb0e 	bl	bae5c <snprintf>
   b7840:	e7bd      	b.n	b77be <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b7842:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b7846:	e7e6      	b.n	b7816 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b7848:	2b5a      	cmp	r3, #90	; 0x5a
   b784a:	d1db      	bne.n	b7804 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b784c:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b784e:	ab18      	add	r3, sp, #96	; 0x60
   b7850:	1978      	adds	r0, r7, r5
   b7852:	ebaa 0207 	sub.w	r2, sl, r7
   b7856:	1cb1      	adds	r1, r6, #2
   b7858:	4418      	add	r0, r3
   b785a:	f007 f9ff 	bl	bec5c <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b785e:	9903      	ldr	r1, [sp, #12]
   b7860:	462a      	mov	r2, r5
   b7862:	e7c8      	b.n	b77f6 <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b7864:	2100      	movs	r1, #0
   b7866:	222e      	movs	r2, #46	; 0x2e
   b7868:	a80c      	add	r0, sp, #48	; 0x30
   b786a:	910b      	str	r1, [sp, #44]	; 0x2c
   b786c:	f007 fa1e 	bl	becac <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b7870:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b7874:	aa18      	add	r2, sp, #96	; 0x60
   b7876:	2132      	movs	r1, #50	; 0x32
   b7878:	a80b      	add	r0, sp, #44	; 0x2c
   b787a:	f003 fb27 	bl	baecc <strftime>
    return String(buf);    
   b787e:	a90b      	add	r1, sp, #44	; 0x2c
   b7880:	4640      	mov	r0, r8
   b7882:	f005 fe7a 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b7886:	a803      	add	r0, sp, #12
   b7888:	f005 fe2c 	bl	bd4e4 <_ZN6StringD1Ev>
   b788c:	e77b      	b.n	b7786 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b788e:	bf00      	nop
   b7890:	2003de84 	.word	0x2003de84
   b7894:	000bfeb7 	.word	0x000bfeb7
   b7898:	000bfeb9 	.word	0x000bfeb9
   b789c:	fffff1f0 	.word	0xfffff1f0

000b78a0 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b78a0:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b78a2:	4d09      	ldr	r5, [pc, #36]	; (b78c8 <_ZN9LocalTime8instanceEv+0x28>)
   b78a4:	682b      	ldr	r3, [r5, #0]
   b78a6:	b963      	cbnz	r3, b78c2 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b78a8:	2060      	movs	r0, #96	; 0x60
   b78aa:	f7fc fbf4 	bl	b4096 <_Znwj>
   b78ae:	4604      	mov	r4, r0
   b78b0:	b130      	cbz	r0, b78c0 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b78b2:	4b06      	ldr	r3, [pc, #24]	; (b78cc <_ZN9LocalTime8instanceEv+0x2c>)
   b78b4:	f840 3b04 	str.w	r3, [r0], #4
   b78b8:	f7ff fe42 	bl	b7540 <_ZN22LocalTimePosixTimezoneC1Ev>
   b78bc:	2364      	movs	r3, #100	; 0x64
   b78be:	65e3      	str	r3, [r4, #92]	; 0x5c
   b78c0:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b78c2:	6828      	ldr	r0, [r5, #0]
   b78c4:	bd38      	pop	{r3, r4, r5, pc}
   b78c6:	bf00      	nop
   b78c8:	2003e444 	.word	0x2003e444
   b78cc:	000bfecc 	.word	0x000bfecc

000b78d0 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b78d0:	f003 bb14 	b.w	baefc <mktime>

000b78d4 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b78d4:	3901      	subs	r1, #1
   b78d6:	290b      	cmp	r1, #11
   b78d8:	d815      	bhi.n	b7906 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b78da:	e8df f001 	tbb	[pc, r1]
   b78de:	0816      	.short	0x0816
   b78e0:	06160616 	.word	0x06160616
   b78e4:	16061616 	.word	0x16061616
   b78e8:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b78ea:	201e      	movs	r0, #30
   b78ec:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b78ee:	0783      	lsls	r3, r0, #30
   b78f0:	d10d      	bne.n	b790e <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b78f2:	2364      	movs	r3, #100	; 0x64
   b78f4:	fb90 f2f3 	sdiv	r2, r0, r3
   b78f8:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b78fc:	2800      	cmp	r0, #0
   b78fe:	bf0c      	ite	eq
   b7900:	201c      	moveq	r0, #28
   b7902:	201d      	movne	r0, #29
   b7904:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b7906:	2000      	movs	r0, #0
   b7908:	4770      	bx	lr
            return 31;
   b790a:	201f      	movs	r0, #31
   b790c:	4770      	bx	lr
                return 28;
   b790e:	201c      	movs	r0, #28
}
   b7910:	4770      	bx	lr

000b7912 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b7912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b7914:	2301      	movs	r3, #1
   b7916:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b7918:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b791c:	3b01      	subs	r3, #1
   b791e:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b7920:	2300      	movs	r3, #0
   b7922:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b7926:	4606      	mov	r6, r0
   b7928:	460c      	mov	r4, r1
   b792a:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b792c:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b792e:	4620      	mov	r0, r4
   b7930:	f7ff ffce 	bl	b78d0 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b7934:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b7938:	69a2      	ldr	r2, [r4, #24]
   b793a:	429a      	cmp	r2, r3
   b793c:	d003      	beq.n	b7946 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b793e:	68e3      	ldr	r3, [r4, #12]
   b7940:	3301      	adds	r3, #1
   b7942:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b7944:	e7f3      	b.n	b792e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b7946:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b794a:	2d01      	cmp	r5, #1
   b794c:	d013      	beq.n	b7976 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b794e:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b7950:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b7952:	3d01      	subs	r5, #1
   b7954:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b7958:	441d      	add	r5, r3
   b795a:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b795c:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b7960:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b7964:	f7ff ffb6 	bl	b78d4 <_ZN9LocalTime14lastDayOfMonthEii>
   b7968:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b796a:	bfc4      	itt	gt
   b796c:	3d07      	subgt	r5, #7
   b796e:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b7970:	4620      	mov	r0, r4
   b7972:	f7ff ffad 	bl	b78d0 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b7976:	4621      	mov	r1, r4
   b7978:	f106 0008 	add.w	r0, r6, #8
   b797c:	f7ff fd6c 	bl	b7458 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b7980:	4638      	mov	r0, r7
   b7982:	f7ff fd76 	bl	b7472 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b7986:	4620      	mov	r0, r4
}
   b7988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b798c:	f003 bab6 	b.w	baefc <mktime>

000b7990 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b7990:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b7992:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b7996:	b085      	sub	sp, #20
   b7998:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b799a:	b92b      	cbnz	r3, b79a8 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b799c:	f7ff ff80 	bl	b78a0 <_ZN9LocalTime8instanceEv>
   b79a0:	1d01      	adds	r1, r0, #4
   b79a2:	1d20      	adds	r0, r4, #4
   b79a4:	f7ff fc91 	bl	b72ca <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b79a8:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b79ac:	2b00      	cmp	r3, #0
   b79ae:	d065      	beq.n	b7a7c <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b79b0:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b79b4:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b79b8:	4639      	mov	r1, r7
   b79ba:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b79bc:	463e      	mov	r6, r7
   b79be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b79c2:	f003 fa8b 	bl	baedc <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b79c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b79c8:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b79cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b79ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b79d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b79d2:	6833      	ldr	r3, [r6, #0]
   b79d4:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b79d6:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b79da:	a802      	add	r0, sp, #8
   b79dc:	f7ff fcc8 	bl	b7370 <_ZN12LocalTimeHMSC1ERKS_>
   b79e0:	aa02      	add	r2, sp, #8
   b79e2:	4639      	mov	r1, r7
   b79e4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b79e8:	f7ff ff93 	bl	b7912 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b79ec:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b79f0:	f104 0118 	add.w	r1, r4, #24
   b79f4:	a802      	add	r0, sp, #8
   b79f6:	f7ff fcbb 	bl	b7370 <_ZN12LocalTimeHMSC1ERKS_>
   b79fa:	aa02      	add	r2, sp, #8
   b79fc:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b7a00:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b7a04:	f7ff ff85 	bl	b7912 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b7a08:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b7a0c:	4286      	cmp	r6, r0
   b7a0e:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b7a12:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b7a16:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b7a1a:	da23      	bge.n	b7a64 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b7a1c:	42b2      	cmp	r2, r6
   b7a1e:	eb73 0505 	sbcs.w	r5, r3, r5
   b7a22:	da19      	bge.n	b7a58 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b7a24:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b7a26:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b7a28:	6820      	ldr	r0, [r4, #0]
   b7a2a:	f7ff fc37 	bl	b729c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b7a2e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b7a32:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b7a36:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b7a38:	bb10      	cbnz	r0, b7a80 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b7a3a:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b7a3e:	f7ff fcdd 	bl	b73fc <_ZNK12LocalTimeHMS9toSecondsEv>
   b7a42:	1a2d      	subs	r5, r5, r0
   b7a44:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b7a48:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b7a4c:	9901      	ldr	r1, [sp, #4]
   b7a4e:	a802      	add	r0, sp, #8
   b7a50:	f003 fa44 	bl	baedc <localtime_r>
}
   b7a54:	b005      	add	sp, #20
   b7a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b7a58:	4282      	cmp	r2, r0
   b7a5a:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b7a5c:	bfb4      	ite	lt
   b7a5e:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b7a60:	2302      	movge	r3, #2
   b7a62:	e7e0      	b.n	b7a26 <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b7a64:	4282      	cmp	r2, r0
   b7a66:	eb73 0101 	sbcs.w	r1, r3, r1
   b7a6a:	da01      	bge.n	b7a70 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b7a6c:	2303      	movs	r3, #3
   b7a6e:	e7da      	b.n	b7a26 <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b7a70:	42b2      	cmp	r2, r6
   b7a72:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b7a74:	bfb4      	ite	lt
   b7a76:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b7a78:	2305      	movge	r3, #5
   b7a7a:	e7d4      	b.n	b7a26 <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b7a7c:	2306      	movs	r3, #6
   b7a7e:	e7d2      	b.n	b7a26 <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b7a80:	f104 0018 	add.w	r0, r4, #24
   b7a84:	e7db      	b.n	b7a3e <_ZN16LocalTimeConvert7convertEv+0xae>

000b7a86 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7a86:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b7a88:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7a8a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7a8c:	4668      	mov	r0, sp
   b7a8e:	f7ff fc66 	bl	b735e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b7a92:	466a      	mov	r2, sp
   b7a94:	4629      	mov	r1, r5
   b7a96:	4620      	mov	r0, r4
   b7a98:	f004 f952 	bl	bbd40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b7a9c:	a801      	add	r0, sp, #4
   b7a9e:	f7fe f87f 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7aa2:	4620      	mov	r0, r4
   b7aa4:	b003      	add	sp, #12
   b7aa6:	bd30      	pop	{r4, r5, pc}

000b7aa8 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b7aaa:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7aac:	4604      	mov	r4, r0
   b7aae:	4668      	mov	r0, sp
   b7ab0:	f7ff fc55 	bl	b735e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b7ab4:	466a      	mov	r2, sp
   b7ab6:	4629      	mov	r1, r5
   b7ab8:	4620      	mov	r0, r4
   b7aba:	f004 f91d 	bl	bbcf8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7abe:	a801      	add	r0, sp, #4
   b7ac0:	f7fe f86e 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7ac4:	4620      	mov	r0, r4
   b7ac6:	b003      	add	sp, #12
   b7ac8:	bd30      	pop	{r4, r5, pc}

000b7aca <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7aca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b7acc:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7ace:	4604      	mov	r4, r0
   b7ad0:	4668      	mov	r0, sp
   b7ad2:	f7ff fc44 	bl	b735e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b7ad6:	466a      	mov	r2, sp
   b7ad8:	4629      	mov	r1, r5
   b7ada:	4620      	mov	r0, r4
   b7adc:	f004 f8b5 	bl	bbc4a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7ae0:	a801      	add	r0, sp, #4
   b7ae2:	f7fe f85d 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7ae6:	4620      	mov	r0, r4
   b7ae8:	b003      	add	sp, #12
   b7aea:	bd30      	pop	{r4, r5, pc}

000b7aec <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b7aec:	4770      	bx	lr

000b7aee <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b7aee:	b510      	push	{r4, lr}
}
   b7af0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b7af2:	4604      	mov	r4, r0
}
   b7af4:	f7fc fad3 	bl	b409e <_ZdlPvj>
   b7af8:	4620      	mov	r0, r4
   b7afa:	bd10      	pop	{r4, pc}

000b7afc <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b7afc:	6803      	ldr	r3, [r0, #0]
   b7afe:	b2c9      	uxtb	r1, r1
   b7b00:	689b      	ldr	r3, [r3, #8]
   b7b02:	4718      	bx	r3

000b7b04 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b7b04:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b7b06:	4d03      	ldr	r5, [pc, #12]	; (b7b14 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b7b08:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b7b0c:	e9c0 5100 	strd	r5, r1, [r0]
}
   b7b10:	bd30      	pop	{r4, r5, pc}
   b7b12:	bf00      	nop
   b7b14:	000bff0c 	.word	0x000bff0c

000b7b18 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b7b18:	6840      	ldr	r0, [r0, #4]
   b7b1a:	f003 bf07 	b.w	bb92c <_ZN7TwoWire5beginEv>

000b7b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b7b1e:	b510      	push	{r4, lr}
   b7b20:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b7b22:	6800      	ldr	r0, [r0, #0]
   b7b24:	f003 ff5d 	bl	bb9e2 <_ZN7TwoWire6unlockEv>
   b7b28:	4620      	mov	r0, r4
   b7b2a:	bd10      	pop	{r4, pc}

000b7b2c <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b7b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7b30:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b7b32:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7b34:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b7b36:	460d      	mov	r5, r1
   b7b38:	4616      	mov	r6, r2
   b7b3a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b7b3c:	f003 ff48 	bl	bb9d0 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b7b40:	b1a7      	cbz	r7, b7b6c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7b42:	68e1      	ldr	r1, [r4, #12]
   b7b44:	6860      	ldr	r0, [r4, #4]
   b7b46:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7b4a:	f003 ff22 	bl	bb992 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b7b4e:	0a29      	lsrs	r1, r5, #8
   b7b50:	6860      	ldr	r0, [r4, #4]
   b7b52:	f7ff ffd3 	bl	b7afc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7b56:	4629      	mov	r1, r5
   b7b58:	6860      	ldr	r0, [r4, #4]
   b7b5a:	f7ff ffcf 	bl	b7afc <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b7b5e:	6860      	ldr	r0, [r4, #4]
   b7b60:	2100      	movs	r1, #0
   b7b62:	f003 ff31 	bl	bb9c8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b7b66:	b148      	cbz	r0, b7b7c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b7b68:	2400      	movs	r4, #0
   b7b6a:	e000      	b.n	b7b6e <_ZN6MB85RC8readDataEjPhj+0x42>
   b7b6c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b7b6e:	a801      	add	r0, sp, #4
   b7b70:	f7ff ffd5 	bl	b7b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b7b74:	4620      	mov	r0, r4
   b7b76:	b003      	add	sp, #12
   b7b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b7b7c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b7b7e:	7b21      	ldrb	r1, [r4, #12]
   b7b80:	6860      	ldr	r0, [r4, #4]
   b7b82:	46b8      	mov	r8, r7
   b7b84:	bf28      	it	cs
   b7b86:	f04f 0820 	movcs.w	r8, #32
   b7b8a:	2301      	movs	r3, #1
   b7b8c:	4642      	mov	r2, r8
   b7b8e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7b92:	f003 fee8 	bl	bb966 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b7b96:	f006 fac5 	bl	be124 <_Z19__fetch_global_Wirev>
   b7b9a:	6803      	ldr	r3, [r0, #0]
   b7b9c:	691b      	ldr	r3, [r3, #16]
   b7b9e:	4798      	blx	r3
   b7ba0:	4540      	cmp	r0, r8
   b7ba2:	dbe1      	blt.n	b7b68 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b7ba4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b7ba8:	f006 fabc 	bl	be124 <_Z19__fetch_global_Wirev>
   b7bac:	6803      	ldr	r3, [r0, #0]
   b7bae:	695b      	ldr	r3, [r3, #20]
   b7bb0:	4798      	blx	r3
   b7bb2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b7bb6:	454e      	cmp	r6, r9
   b7bb8:	d1f6      	bne.n	b7ba8 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b7bba:	4445      	add	r5, r8
				dataLen--;
   b7bbc:	eba7 0708 	sub.w	r7, r7, r8
   b7bc0:	e7be      	b.n	b7b40 <_ZN6MB85RC8readDataEjPhj+0x14>

000b7bc2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7bc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7bc6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b7bc8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7bca:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7bcc:	460e      	mov	r6, r1
   b7bce:	4690      	mov	r8, r2
   b7bd0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b7bd2:	f003 fefd 	bl	bb9d0 <_ZN7TwoWire4lockEv>
   b7bd6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b7bda:	f1b9 0f00 	cmp.w	r9, #0
   b7bde:	d02a      	beq.n	b7c36 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b7be0:	b34d      	cbz	r5, b7c36 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7be2:	68e1      	ldr	r1, [r4, #12]
   b7be4:	6860      	ldr	r0, [r4, #4]
   b7be6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7bea:	f003 fed2 	bl	bb992 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b7bee:	0a31      	lsrs	r1, r6, #8
   b7bf0:	6860      	ldr	r0, [r4, #4]
   b7bf2:	f7ff ff83 	bl	b7afc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7bf6:	6860      	ldr	r0, [r4, #4]
   b7bf8:	4631      	mov	r1, r6
   b7bfa:	f7ff ff7f 	bl	b7afc <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7bfe:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b7c02:	4647      	mov	r7, r8
   b7c04:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b7c08:	6860      	ldr	r0, [r4, #4]
   b7c0a:	f817 1b01 	ldrb.w	r1, [r7], #1
   b7c0e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b7c10:	3d01      	subs	r5, #1
				wire.write(*data);
   b7c12:	689b      	ldr	r3, [r3, #8]
   b7c14:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7c16:	4555      	cmp	r5, sl
   b7c18:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b7c1c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7c1e:	d001      	beq.n	b7c24 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b7c20:	2d00      	cmp	r5, #0
   b7c22:	d1f1      	bne.n	b7c08 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b7c24:	6860      	ldr	r0, [r4, #4]
   b7c26:	2101      	movs	r1, #1
   b7c28:	f003 fece 	bl	bb9c8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b7c2c:	2800      	cmp	r0, #0
   b7c2e:	d0d7      	beq.n	b7be0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b7c30:	f04f 0900 	mov.w	r9, #0
   b7c34:	e7d1      	b.n	b7bda <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b7c36:	a801      	add	r0, sp, #4
   b7c38:	f7ff ff71 	bl	b7b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b7c3c:	4648      	mov	r0, r9
   b7c3e:	b003      	add	sp, #12
   b7c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7c44 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7c48:	b08b      	sub	sp, #44	; 0x2c
   b7c4a:	460e      	mov	r6, r1
   b7c4c:	4615      	mov	r5, r2
   b7c4e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b7c50:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7c52:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7c54:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b7c56:	f003 febb 	bl	bb9d0 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b7c5a:	42ae      	cmp	r6, r5
   b7c5c:	d229      	bcs.n	b7cb2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b7c5e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b7c60:	4425      	add	r5, r4
			while(numBytes > 0) {
   b7c62:	b18c      	cbz	r4, b7c88 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b7c64:	2c1e      	cmp	r4, #30
   b7c66:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b7c68:	f8d8 3000 	ldr.w	r3, [r8]
   b7c6c:	bf28      	it	cs
   b7c6e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b7c70:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b7c72:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7c76:	aa02      	add	r2, sp, #8
   b7c78:	463b      	mov	r3, r7
   b7c7a:	4631      	mov	r1, r6
   b7c7c:	4640      	mov	r0, r8
				framAddrTo -= count;
   b7c7e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b7c80:	47c8      	blx	r9
				if (!result) {
   b7c82:	b948      	cbnz	r0, b7c98 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7c84:	2400      	movs	r4, #0
   b7c86:	e000      	b.n	b7c8a <_ZN6MB85RC8moveDataEjjj+0x46>
   b7c88:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b7c8a:	a801      	add	r0, sp, #4
   b7c8c:	f7ff ff47 	bl	b7b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b7c90:	4620      	mov	r0, r4
   b7c92:	b00b      	add	sp, #44	; 0x2c
   b7c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b7c98:	f8d8 3000 	ldr.w	r3, [r8]
   b7c9c:	aa02      	add	r2, sp, #8
   b7c9e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7ca2:	4629      	mov	r1, r5
   b7ca4:	463b      	mov	r3, r7
   b7ca6:	4640      	mov	r0, r8
   b7ca8:	47c8      	blx	r9
				if (!result) {
   b7caa:	2800      	cmp	r0, #0
   b7cac:	d0ea      	beq.n	b7c84 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b7cae:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7cb0:	e7d7      	b.n	b7c62 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b7cb2:	d9e9      	bls.n	b7c88 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b7cb4:	2c00      	cmp	r4, #0
   b7cb6:	d0e7      	beq.n	b7c88 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b7cb8:	f8d8 3000 	ldr.w	r3, [r8]
   b7cbc:	2c1e      	cmp	r4, #30
   b7cbe:	4627      	mov	r7, r4
   b7cc0:	bf28      	it	cs
   b7cc2:	271e      	movcs	r7, #30
   b7cc4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7cc8:	aa02      	add	r2, sp, #8
   b7cca:	463b      	mov	r3, r7
   b7ccc:	4631      	mov	r1, r6
   b7cce:	4640      	mov	r0, r8
   b7cd0:	47c8      	blx	r9
				if (!result) {
   b7cd2:	2800      	cmp	r0, #0
   b7cd4:	d0d6      	beq.n	b7c84 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b7cd6:	f8d8 3000 	ldr.w	r3, [r8]
   b7cda:	aa02      	add	r2, sp, #8
   b7cdc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7ce0:	4629      	mov	r1, r5
   b7ce2:	463b      	mov	r3, r7
   b7ce4:	4640      	mov	r0, r8
   b7ce6:	47c8      	blx	r9
				if (!result) {
   b7ce8:	2800      	cmp	r0, #0
   b7cea:	d0cb      	beq.n	b7c84 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b7cec:	443e      	add	r6, r7
				framAddrTo += count;
   b7cee:	443d      	add	r5, r7
				numBytes -= count;
   b7cf0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7cf2:	e7df      	b.n	b7cb4 <_ZN6MB85RC8moveDataEjjj+0x70>

000b7cf4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b7cf4:	6803      	ldr	r3, [r0, #0]
   b7cf6:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b7cf8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b7cfc:	2101      	movs	r1, #1
   b7cfe:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b7d02:	4770      	bx	lr

000b7d04 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7d04:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b7d06:	6842      	ldr	r2, [r0, #4]
   b7d08:	4603      	mov	r3, r0
   b7d0a:	1054      	asrs	r4, r2, #1
   b7d0c:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b7d10:	07d2      	lsls	r2, r2, #31
   b7d12:	bf48      	it	mi
   b7d14:	590a      	ldrmi	r2, [r1, r4]
   b7d16:	681b      	ldr	r3, [r3, #0]
      }
   b7d18:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7d1c:	bf48      	it	mi
   b7d1e:	58d3      	ldrmi	r3, [r2, r3]
   b7d20:	4718      	bx	r3

000b7d22 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b7d22:	2a01      	cmp	r2, #1
   b7d24:	d102      	bne.n	b7d2c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7d26:	6001      	str	r1, [r0, #0]
      }
   b7d28:	2000      	movs	r0, #0
   b7d2a:	4770      	bx	lr
	  switch (__op)
   b7d2c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7d2e:	bf04      	itt	eq
   b7d30:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b7d34:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b7d38:	e7f6      	b.n	b7d28 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b7d3a <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b7d3a:	2a01      	cmp	r2, #1
   b7d3c:	d102      	bne.n	b7d44 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7d3e:	6001      	str	r1, [r0, #0]
      }
   b7d40:	2000      	movs	r0, #0
   b7d42:	4770      	bx	lr
	  switch (__op)
   b7d44:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7d46:	bf04      	itt	eq
   b7d48:	680b      	ldreq	r3, [r1, #0]
   b7d4a:	6003      	streq	r3, [r0, #0]
	      break;
   b7d4c:	e7f8      	b.n	b7d40 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b7d4e <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b7d4e:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b7d50:	f002 bc90 	b.w	ba674 <os_mutex_recursive_lock>

000b7d54 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b7d54:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b7d58:	4601      	mov	r1, r0
    if (stateHandler) {
   b7d5a:	b11b      	cbz	r3, b7d64 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7d5c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b7d60:	30c0      	adds	r0, #192	; 0xc0
   b7d62:	4718      	bx	r3
}
   b7d64:	4770      	bx	lr
	...

000b7d68 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b7d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b7d6a:	4d12      	ldr	r5, [pc, #72]	; (b7db4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b7d6c:	4608      	mov	r0, r1
        eventData = "";
   b7d6e:	2a00      	cmp	r2, #0
   b7d70:	bf18      	it	ne
   b7d72:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b7d74:	460e      	mov	r6, r1
   b7d76:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b7d78:	f007 f853 	bl	bee22 <strlen>
   b7d7c:	2840      	cmp	r0, #64	; 0x40
   b7d7e:	d816      	bhi.n	b7dae <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b7d80:	4628      	mov	r0, r5
   b7d82:	f007 f84e 	bl	bee22 <strlen>
   b7d86:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b7d8a:	d810      	bhi.n	b7dae <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b7d8c:	3043      	adds	r0, #67	; 0x43
   b7d8e:	f7fc f984 	bl	b409a <_Znaj>
    if (event) {
   b7d92:	4604      	mov	r4, r0
   b7d94:	b148      	cbz	r0, b7daa <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b7d96:	4631      	mov	r1, r6
        event->flags = flags;
   b7d98:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b7d9c:	f007 f81b 	bl	bedd6 <strcpy>
        strcpy(event->eventData, eventData);
   b7da0:	4629      	mov	r1, r5
   b7da2:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b7da6:	f007 f816 	bl	bedd6 <strcpy>
}
   b7daa:	4620      	mov	r0, r4
   b7dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b7dae:	2400      	movs	r4, #0
   b7db0:	e7fb      	b.n	b7daa <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b7db2:	bf00      	nop
   b7db4:	000c07d9 	.word	0x000c07d9

000b7db8 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b7db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7dba:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b7dbc:	460a      	mov	r2, r1
   b7dbe:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b7dc0:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b7dc2:	1d01      	adds	r1, r0, #4
   b7dc4:	a808      	add	r0, sp, #32
   b7dc6:	f002 f8a5 	bl	b9f14 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b7dca:	9808      	ldr	r0, [sp, #32]
   b7dcc:	2100      	movs	r1, #0
   b7dce:	f007 f93d 	bl	bf04c <open>
   b7dd2:	4605      	mov	r5, r0
   b7dd4:	a808      	add	r0, sp, #32
   b7dd6:	f005 fb85 	bl	bd4e4 <_ZN6StringD1Ev>
    if (fd) {
   b7dda:	2d00      	cmp	r5, #0
   b7ddc:	d060      	beq.n	b7ea0 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b7dde:	a908      	add	r1, sp, #32
   b7de0:	4628      	mov	r0, r5
   b7de2:	f007 f921 	bl	bf028 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b7de6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b7de8:	492e      	ldr	r1, [pc, #184]	; (b7ea4 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b7dea:	482f      	ldr	r0, [pc, #188]	; (b7ea8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7dec:	4632      	mov	r2, r6
   b7dee:	f7fe faa5 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b7df2:	2200      	movs	r2, #0
   b7df4:	4611      	mov	r1, r2
   b7df6:	4628      	mov	r0, r5
   b7df8:	f007 f91e 	bl	bf038 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b7dfc:	2208      	movs	r2, #8
   b7dfe:	a906      	add	r1, sp, #24
   b7e00:	4628      	mov	r0, r5
   b7e02:	f007 f937 	bl	bf074 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b7e06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7e08:	2f4a      	cmp	r7, #74	; 0x4a
   b7e0a:	dd39      	ble.n	b7e80 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b7e0c:	4b27      	ldr	r3, [pc, #156]	; (b7eac <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b7e0e:	9a06      	ldr	r2, [sp, #24]
   b7e10:	429a      	cmp	r2, r3
   b7e12:	d135      	bne.n	b7e80 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b7e14:	4b26      	ldr	r3, [pc, #152]	; (b7eb0 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b7e16:	9a07      	ldr	r2, [sp, #28]
   b7e18:	429a      	cmp	r2, r3
   b7e1a:	d131      	bne.n	b7e80 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b7e1c:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b7e20:	4610      	mov	r0, r2
   b7e22:	9205      	str	r2, [sp, #20]
   b7e24:	f7fc f939 	bl	b409a <_Znaj>
            if (result) {
   b7e28:	4604      	mov	r4, r0
   b7e2a:	b1c0      	cbz	r0, b7e5e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b7e2c:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b7e2e:	4601      	mov	r1, r0
   b7e30:	9a05      	ldr	r2, [sp, #20]
   b7e32:	4628      	mov	r0, r5
   b7e34:	f007 f91e 	bl	bf074 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b7e38:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b7e3c:	b9ab      	cbnz	r3, b7e6a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b7e3e:	1c63      	adds	r3, r4, #1
   b7e40:	4618      	mov	r0, r3
   b7e42:	9305      	str	r3, [sp, #20]
   b7e44:	f006 ffed 	bl	bee22 <strlen>
   b7e48:	283f      	cmp	r0, #63	; 0x3f
   b7e4a:	9b05      	ldr	r3, [sp, #20]
   b7e4c:	d80d      	bhi.n	b7e6a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b7e4e:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b7e52:	9200      	str	r2, [sp, #0]
   b7e54:	4917      	ldr	r1, [pc, #92]	; (b7eb4 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b7e56:	4814      	ldr	r0, [pc, #80]	; (b7ea8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7e58:	4632      	mov	r2, r6
   b7e5a:	f7fe fa6f 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b7e5e:	4628      	mov	r0, r5
   b7e60:	f007 f8da 	bl	bf018 <close>
}
   b7e64:	4620      	mov	r0, r4
   b7e66:	b01f      	add	sp, #124	; 0x7c
   b7e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b7e6a:	4913      	ldr	r1, [pc, #76]	; (b7eb8 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b7e6c:	480e      	ldr	r0, [pc, #56]	; (b7ea8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7e6e:	4632      	mov	r2, r6
   b7e70:	f7fe fa64 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b7e74:	2143      	movs	r1, #67	; 0x43
   b7e76:	4620      	mov	r0, r4
   b7e78:	f7fc f911 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b7e7c:	2400      	movs	r4, #0
   b7e7e:	e7ee      	b.n	b7e5e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b7e80:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b7e84:	9302      	str	r3, [sp, #8]
   b7e86:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7e8a:	9301      	str	r3, [sp, #4]
   b7e8c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b7e90:	9300      	str	r3, [sp, #0]
   b7e92:	490a      	ldr	r1, [pc, #40]	; (b7ebc <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b7e94:	9b06      	ldr	r3, [sp, #24]
   b7e96:	4804      	ldr	r0, [pc, #16]	; (b7ea8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7e98:	4632      	mov	r2, r6
   b7e9a:	f7fe fa4f 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
   b7e9e:	e7ed      	b.n	b7e7c <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b7ea0:	462c      	mov	r4, r5
    return result;
   b7ea2:	e7df      	b.n	b7e64 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b7ea4:	000bff20 	.word	0x000bff20
   b7ea8:	2003e448 	.word	0x2003e448
   b7eac:	31b67663 	.word	0x31b67663
   b7eb0:	00410801 	.word	0x00410801
   b7eb4:	000bff34 	.word	0x000bff34
   b7eb8:	000bff56 	.word	0x000bff56
   b7ebc:	000bff84 	.word	0x000bff84

000b7ec0 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b7ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7ec4:	4680      	mov	r8, r0
   b7ec6:	4b28      	ldr	r3, [pc, #160]	; (b7f68 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b7ec8:	f848 3b04 	str.w	r3, [r8], #4
   b7ecc:	4604      	mov	r4, r0
   b7ece:	4640      	mov	r0, r8
   b7ed0:	f001 ff38 	bl	b9d44 <_ZN14SequentialFileC1Ev>
   b7ed4:	2202      	movs	r2, #2
   b7ed6:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b7ed8:	2500      	movs	r5, #0
   b7eda:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b7ede:	2308      	movs	r3, #8
   b7ee0:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b7ee2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b7ee6:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b7eea:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b7eee:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b7ef2:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7ef4:	2020      	movs	r0, #32
   b7ef6:	f7fc f8ce 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7efa:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b7efc:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7efe:	3e01      	subs	r6, #1
   b7f00:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b7f02:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b7f06:	4607      	mov	r7, r0
   b7f08:	f44f 7000 	mov.w	r0, #512	; 0x200
   b7f0c:	f7fc f8c3 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7f10:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b7f14:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b7f18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7f1c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7f24:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b7f28:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b7f2c:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b7f30:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b7f34:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b7f38:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b7f3c:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b7f40:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b7f44:	4909      	ldr	r1, [pc, #36]	; (b7f6c <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b7f46:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b7f4a:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b7f4e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b7f52:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b7f56:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b7f5a:	4640      	mov	r0, r8
   b7f5c:	f001 ff38 	bl	b9dd0 <_ZN14SequentialFile11withDirPathEPKc>
}
   b7f60:	4620      	mov	r0, r4
   b7f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7f66:	bf00      	nop
   b7f68:	000c01a0 	.word	0x000c01a0
   b7f6c:	000bffc9 	.word	0x000bffc9

000b7f70 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b7f70:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b7f72:	4d06      	ldr	r5, [pc, #24]	; (b7f8c <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b7f74:	682b      	ldr	r3, [r5, #0]
   b7f76:	b93b      	cbnz	r3, b7f88 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b7f78:	20d0      	movs	r0, #208	; 0xd0
   b7f7a:	f7fc f88c 	bl	b4096 <_Znwj>
   b7f7e:	4604      	mov	r4, r0
   b7f80:	b108      	cbz	r0, b7f86 <_ZN17PublishQueuePosix8instanceEv+0x16>
   b7f82:	f7ff ff9d 	bl	b7ec0 <_ZN17PublishQueuePosixC1Ev>
   b7f86:	602c      	str	r4, [r5, #0]
}
   b7f88:	6828      	ldr	r0, [r5, #0]
   b7f8a:	bd38      	pop	{r3, r4, r5, pc}
   b7f8c:	2003e44c 	.word	0x2003e44c

000b7f90 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b7f90:	6942      	ldr	r2, [r0, #20]
   b7f92:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b7f94:	1a9b      	subs	r3, r3, r2
   b7f96:	109b      	asrs	r3, r3, #2
   b7f98:	1e5a      	subs	r2, r3, #1
   b7f9a:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b7f9e:	1a5b      	subs	r3, r3, r1
   b7fa0:	109b      	asrs	r3, r3, #2
   b7fa2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b7fa6:	6902      	ldr	r2, [r0, #16]
   b7fa8:	6880      	ldr	r0, [r0, #8]
   b7faa:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b7fac:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b7fb0:	4770      	bx	lr

000b7fb2 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b7fb2:	b538      	push	{r3, r4, r5, lr}
   b7fb4:	4605      	mov	r5, r0
   b7fb6:	f7ff feca 	bl	b7d4e <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b7fba:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b7fbe:	f7ff ffe7 	bl	b7f90 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b7fc2:	4604      	mov	r4, r0
   b7fc4:	b950      	cbnz	r0, b7fdc <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b7fc6:	1d28      	adds	r0, r5, #4
   b7fc8:	f002 f9f8 	bl	ba3bc <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b7fcc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b7fd0:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b7fd2:	b11b      	cbz	r3, b7fdc <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b7fd4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b7fd8:	b903      	cbnz	r3, b7fdc <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b7fda:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b7fdc:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b7fde:	f002 fb51 	bl	ba684 <os_mutex_recursive_unlock>
}
   b7fe2:	4620      	mov	r0, r4
   b7fe4:	bd38      	pop	{r3, r4, r5, pc}

000b7fe6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b7fe6:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b7fe8:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b7fea:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b7fec:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b7fee:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b7ff0:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b7ff2:	d002      	beq.n	b7ffa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b7ff4:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b7ff6:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b7ff8:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7ffa:	68c0      	ldr	r0, [r0, #12]
   b7ffc:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8000:	f7fc f84d 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b8004:	6963      	ldr	r3, [r4, #20]
   b8006:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8008:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b800a:	685b      	ldr	r3, [r3, #4]
   b800c:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b800e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8012:	6122      	str	r2, [r4, #16]
   b8014:	e7ef      	b.n	b7ff6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b8018 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b8018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b801c:	b085      	sub	sp, #20
   b801e:	4604      	mov	r4, r0
   b8020:	f7ff fe95 	bl	b7d4e <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b8024:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b80cc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b8028:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b80d0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b802c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b80d4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b8030:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b8034:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b8038:	4293      	cmp	r3, r2
   b803a:	d105      	bne.n	b8048 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b803c:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b803e:	b005      	add	sp, #20
   b8040:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8044:	f002 bb1e 	b.w	ba684 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b8048:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b804c:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b8050:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b8052:	f7ff ffc8 	bl	b7fe6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b8056:	4640      	mov	r0, r8
   b8058:	f002 f954 	bl	ba304 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b805c:	2300      	movs	r3, #0
   b805e:	4602      	mov	r2, r0
   b8060:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b8062:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b8064:	4668      	mov	r0, sp
   b8066:	f001 ff55 	bl	b9f14 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b806a:	9800      	ldr	r0, [sp, #0]
   b806c:	f240 2102 	movw	r1, #514	; 0x202
   b8070:	f006 ffec 	bl	bf04c <open>
   b8074:	4605      	mov	r5, r0
   b8076:	4668      	mov	r0, sp
   b8078:	f005 fa34 	bl	bd4e4 <_ZN6StringD1Ev>
            if (fd) {
   b807c:	b1c5      	cbz	r5, b80b0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b807e:	2208      	movs	r2, #8
   b8080:	4669      	mov	r1, sp
   b8082:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b8084:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b8088:	f007 f806 	bl	bf098 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b808c:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b8090:	f006 fec7 	bl	bee22 <strlen>
   b8094:	4639      	mov	r1, r7
   b8096:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b809a:	4628      	mov	r0, r5
   b809c:	f006 fffc 	bl	bf098 <write>
                close(fd);
   b80a0:	4628      	mov	r0, r5
   b80a2:	f006 ffb9 	bl	bf018 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b80a6:	4808      	ldr	r0, [pc, #32]	; (b80c8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b80a8:	4632      	mov	r2, r6
   b80aa:	4659      	mov	r1, fp
   b80ac:	f7fe f946 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b80b0:	4631      	mov	r1, r6
   b80b2:	4640      	mov	r0, r8
   b80b4:	f002 f968 	bl	ba388 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b80b8:	2f00      	cmp	r7, #0
   b80ba:	d0b9      	beq.n	b8030 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b80bc:	2143      	movs	r1, #67	; 0x43
   b80be:	4638      	mov	r0, r7
   b80c0:	f7fb ffed 	bl	b409e <_ZdlPvj>
   b80c4:	e7b2      	b.n	b802c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b80c6:	bf00      	nop
   b80c8:	2003e448 	.word	0x2003e448
   b80cc:	31b67663 	.word	0x31b67663
   b80d0:	00410801 	.word	0x00410801
   b80d4:	000bffd7 	.word	0x000bffd7

000b80d8 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b80d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b80dc:	4604      	mov	r4, r0
   b80de:	f7ff fe36 	bl	b7d4e <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b80e2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b80e6:	f7ff ff53 	bl	b7f90 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b80ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b80ec:	4298      	cmp	r0, r3
   b80ee:	d902      	bls.n	b80f6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b80f0:	4620      	mov	r0, r4
   b80f2:	f7ff ff91 	bl	b8018 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b80f6:	f8df 8044 	ldr.w	r8, [pc, #68]	; b813c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b80fa:	4f0f      	ldr	r7, [pc, #60]	; (b8138 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b80fc:	1d26      	adds	r6, r4, #4
   b80fe:	4630      	mov	r0, r6
   b8100:	f002 f95c 	bl	ba3bc <_ZNK14SequentialFile11getQueueLenEv>
   b8104:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b8106:	4298      	cmp	r0, r3
   b8108:	dc04      	bgt.n	b8114 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b810a:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b810c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8110:	f002 bab8 	b.w	ba684 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b8114:	2101      	movs	r1, #1
   b8116:	4630      	mov	r0, r6
   b8118:	f002 f900 	bl	ba31c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b811c:	4605      	mov	r5, r0
   b811e:	2800      	cmp	r0, #0
   b8120:	d0ed      	beq.n	b80fe <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b8122:	4601      	mov	r1, r0
   b8124:	2200      	movs	r2, #0
   b8126:	4630      	mov	r0, r6
   b8128:	f001 ff30 	bl	b9f8c <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b812c:	462a      	mov	r2, r5
   b812e:	4641      	mov	r1, r8
   b8130:	4638      	mov	r0, r7
   b8132:	f7fb ffd3 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b8136:	e7e2      	b.n	b80fe <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b8138:	2003e448 	.word	0x2003e448
   b813c:	000bfff4 	.word	0x000bfff4

000b8140 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b8140:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b8142:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b8146:	430b      	orrs	r3, r1
   b8148:	d005      	beq.n	b8156 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b814a:	3840      	subs	r0, #64	; 0x40
   b814c:	ea50 0301 	orrs.w	r3, r0, r1
   b8150:	d10b      	bne.n	b816a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b8152:	2a09      	cmp	r2, #9
   b8154:	d109      	bne.n	b816a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b8156:	4905      	ldr	r1, [pc, #20]	; (b816c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b8158:	4805      	ldr	r0, [pc, #20]	; (b8170 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b815a:	f7fe f8ef 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b815e:	f7ff ff07 	bl	b7f70 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b8162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b8166:	f7ff bf57 	b.w	b8018 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b816a:	bd08      	pop	{r3, pc}
   b816c:	000c0007 	.word	0x000c0007
   b8170:	2003e448 	.word	0x2003e448

000b8174 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b8174:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b8176:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b8178:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b817a:	b183      	cbz	r3, b819e <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b817c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b817e:	6945      	ldr	r5, [r0, #20]
   b8180:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b8182:	42ae      	cmp	r6, r5
   b8184:	d906      	bls.n	b8194 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b8186:	f855 0b04 	ldr.w	r0, [r5], #4
   b818a:	f44f 7100 	mov.w	r1, #512	; 0x200
   b818e:	f7fb ff86 	bl	b409e <_ZdlPvj>
   b8192:	e7f6      	b.n	b8182 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b8194:	6861      	ldr	r1, [r4, #4]
   b8196:	6820      	ldr	r0, [r4, #0]
   b8198:	0089      	lsls	r1, r1, #2
   b819a:	f7fb ff80 	bl	b409e <_ZdlPvj>
    }
   b819e:	4620      	mov	r0, r4
   b81a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b81a4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b81a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b81a6:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b81aa:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b81ac:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b81ae:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b81b0:	b90a      	cbnz	r2, b81b6 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b81b2:	07d9      	lsls	r1, r3, #31
   b81b4:	d505      	bpl.n	b81c2 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b81b6:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b81ba:	4b0a      	ldr	r3, [pc, #40]	; (b81e4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b81bc:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b81be:	4b0a      	ldr	r3, [pc, #40]	; (b81e8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b81c0:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b81c2:	4621      	mov	r1, r4
   b81c4:	4668      	mov	r0, sp
   b81c6:	f7fe ff3e 	bl	b7046 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b81ca:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b81cc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b81ce:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b81d0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b81d2:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b81d4:	4668      	mov	r0, sp
   b81d6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b81d8:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b81da:	9203      	str	r2, [sp, #12]
   b81dc:	f7fc fb70 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
	}
   b81e0:	b004      	add	sp, #16
   b81e2:	bd10      	pop	{r4, pc}
   b81e4:	000b7d05 	.word	0x000b7d05
   b81e8:	000b7d23 	.word	0x000b7d23

000b81ec <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b81ec:	b570      	push	{r4, r5, r6, lr}
   b81ee:	b086      	sub	sp, #24
   b81f0:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b81f2:	f002 fd73 	bl	bacdc <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b81f6:	b948      	cbnz	r0, b820c <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b81f8:	4b43      	ldr	r3, [pc, #268]	; (b8308 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b81fa:	a902      	add	r1, sp, #8
   b81fc:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b8200:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8204:	f7ff ffce 	bl	b81a4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b8208:	b006      	add	sp, #24
   b820a:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b820c:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b8210:	b11d      	cbz	r5, b821a <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b8212:	2301      	movs	r3, #1
   b8214:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b8218:	e7f6      	b.n	b8208 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b821a:	f002 fa6b 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b821e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8222:	1ac0      	subs	r0, r0, r3
   b8224:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8228:	4298      	cmp	r0, r3
   b822a:	d3ed      	bcc.n	b8208 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b822c:	1d26      	adds	r6, r4, #4
   b822e:	4629      	mov	r1, r5
   b8230:	4630      	mov	r0, r6
   b8232:	f002 f873 	bl	ba31c <_ZN14SequentialFile16getFileFromQueueEb>
   b8236:	4601      	mov	r1, r0
   b8238:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b823c:	2800      	cmp	r0, #0
   b823e:	d052      	beq.n	b82e6 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b8240:	4620      	mov	r0, r4
   b8242:	f7ff fdb9 	bl	b7db8 <_ZN17PublishQueuePosix13readQueueFileEi>
   b8246:	4605      	mov	r5, r0
   b8248:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b824c:	2800      	cmp	r0, #0
   b824e:	d035      	beq.n	b82bc <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b8250:	f002 fa50 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b8254:	ae02      	add	r6, sp, #8
   b8256:	2500      	movs	r5, #0
   b8258:	4b2c      	ldr	r3, [pc, #176]	; (b830c <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b825a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b825e:	4631      	mov	r1, r6
   b8260:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8264:	9302      	str	r3, [sp, #8]
   b8266:	9503      	str	r5, [sp, #12]
   b8268:	f7ff ff9c 	bl	b81a4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b826c:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b8270:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b8274:	9200      	str	r2, [sp, #0]
   b8276:	4926      	ldr	r1, [pc, #152]	; (b8310 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b8278:	4a26      	ldr	r2, [pc, #152]	; (b8314 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b827a:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b827e:	42a8      	cmp	r0, r5
   b8280:	bf08      	it	eq
   b8282:	460a      	moveq	r2, r1
   b8284:	3301      	adds	r3, #1
   b8286:	4924      	ldr	r1, [pc, #144]	; (b8318 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b8288:	4824      	ldr	r0, [pc, #144]	; (b831c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b828a:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b828e:	f7fe f855 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b8292:	f7fe fe1b 	bl	b6ecc <_ZN19BackgroundPublishRK8instanceEv>
   b8296:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b829a:	4b21      	ldr	r3, [pc, #132]	; (b8320 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b829c:	9305      	str	r3, [sp, #20]
   b829e:	e9cd 6500 	strd	r6, r5, [sp]
   b82a2:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b82a4:	4b1f      	ldr	r3, [pc, #124]	; (b8324 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b82a6:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b82a8:	9304      	str	r3, [sp, #16]
   b82aa:	f811 3b01 	ldrb.w	r3, [r1], #1
   b82ae:	3242      	adds	r2, #66	; 0x42
   b82b0:	f7fe ff58 	bl	b7164 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b82b4:	4630      	mov	r0, r6
   b82b6:	f7fc fb03 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   b82ba:	e7a5      	b.n	b8208 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b82bc:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b82c0:	4919      	ldr	r1, [pc, #100]	; (b8328 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b82c2:	4816      	ldr	r0, [pc, #88]	; (b831c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b82c4:	f7fb ff0a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b82c8:	2101      	movs	r1, #1
   b82ca:	4630      	mov	r0, r6
   b82cc:	f002 f826 	bl	ba31c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b82d0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b82d4:	462a      	mov	r2, r5
   b82d6:	4630      	mov	r0, r6
   b82d8:	f001 fe58 	bl	b9f8c <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b82dc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b82e0:	2b00      	cmp	r3, #0
   b82e2:	d1b5      	bne.n	b8250 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b82e4:	e795      	b.n	b8212 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b82e6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b82ea:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b82ee:	429a      	cmp	r2, r3
   b82f0:	d007      	beq.n	b8302 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b82f2:	681b      	ldr	r3, [r3, #0]
   b82f4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b82f8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b82fc:	f7ff fe73 	bl	b7fe6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b8300:	e7ec      	b.n	b82dc <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b8302:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b8306:	e784      	b.n	b8212 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b8308:	000b832d 	.word	0x000b832d
   b830c:	000b86ad 	.word	0x000b86ad
   b8310:	000c0036 	.word	0x000c0036
   b8314:	000c043a 	.word	0x000c043a
   b8318:	000c0057 	.word	0x000c0057
   b831c:	2003e448 	.word	0x2003e448
   b8320:	000b7cf5 	.word	0x000b7cf5
   b8324:	000b7d3b 	.word	0x000b7d3b
   b8328:	000c003a 	.word	0x000c003a

000b832c <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b832c:	b513      	push	{r0, r1, r4, lr}
   b832e:	4604      	mov	r4, r0
   b8330:	f002 fcd4 	bl	bacdc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b8334:	b190      	cbz	r0, b835c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b8336:	f002 f9dd 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b833a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b833e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b8342:	4b0d      	ldr	r3, [pc, #52]	; (b8378 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b8344:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b8348:	9300      	str	r3, [sp, #0]
   b834a:	4669      	mov	r1, sp
   b834c:	2300      	movs	r3, #0
   b834e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8352:	9301      	str	r3, [sp, #4]
   b8354:	f7ff ff26 	bl	b81a4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b8358:	b002      	add	sp, #8
   b835a:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b835c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b8360:	b11b      	cbz	r3, b836a <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b8362:	2301      	movs	r3, #1
   b8364:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b8368:	e7f6      	b.n	b8358 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b836a:	4620      	mov	r0, r4
   b836c:	f7ff fe21 	bl	b7fb2 <_ZN17PublishQueuePosix12getNumEventsEv>
   b8370:	2800      	cmp	r0, #0
   b8372:	d0f6      	beq.n	b8362 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b8374:	e7f0      	b.n	b8358 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b8376:	bf00      	nop
   b8378:	000b81ed 	.word	0x000b81ed

000b837c <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b837c:	b570      	push	{r4, r5, r6, lr}
   b837e:	4605      	mov	r5, r0
   b8380:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b8382:	2000      	movs	r0, #0
   b8384:	f002 fc48 	bl	bac18 <system_thread_get_state>
   b8388:	2801      	cmp	r0, #1
   b838a:	d005      	beq.n	b8398 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b838c:	493e      	ldr	r1, [pc, #248]	; (b8488 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b838e:	483f      	ldr	r0, [pc, #252]	; (b848c <_ZN17PublishQueuePosix5setupEv+0x110>)
   b8390:	f7fd ffc6 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
}
   b8394:	b018      	add	sp, #96	; 0x60
   b8396:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b8398:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b839c:	f002 f95a 	bl	ba654 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b83a0:	4b3b      	ldr	r3, [pc, #236]	; (b8490 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b83a2:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b83a4:	4b3b      	ldr	r3, [pc, #236]	; (b8494 <_ZN17PublishQueuePosix5setupEv+0x118>)
   b83a6:	9307      	str	r3, [sp, #28]
        };
   b83a8:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b83aa:	4b3b      	ldr	r3, [pc, #236]	; (b8498 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b83ac:	9306      	str	r3, [sp, #24]
   b83ae:	a808      	add	r0, sp, #32
   b83b0:	f7fc fd66 	bl	b4e80 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b83b4:	a908      	add	r1, sp, #32
   b83b6:	a80c      	add	r0, sp, #48	; 0x30
   b83b8:	f7fc fd62 	bl	b4e80 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b83bc:	a90c      	add	r1, sp, #48	; 0x30
   b83be:	a810      	add	r0, sp, #64	; 0x40
   b83c0:	f7fc fd5e 	bl	b4e80 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b83c4:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b83c6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b83c8:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b83ca:	f7fb fe64 	bl	b4096 <_Znwj>
   b83ce:	4604      	mov	r4, r0
   b83d0:	b160      	cbz	r0, b83ec <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b83d2:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b83d4:	4601      	mov	r1, r0
   b83d6:	a810      	add	r0, sp, #64	; 0x40
   b83d8:	f7fe fe35 	bl	b7046 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b83dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b83de:	68a2      	ldr	r2, [r4, #8]
   b83e0:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b83e2:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b83e4:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b83e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b83e8:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b83ea:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b83ec:	4b2b      	ldr	r3, [pc, #172]	; (b849c <_ZN17PublishQueuePosix5setupEv+0x120>)
   b83ee:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b83f0:	4b2b      	ldr	r3, [pc, #172]	; (b84a0 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b83f2:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b83f4:	4b2b      	ldr	r3, [pc, #172]	; (b84a4 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b83f6:	9414      	str	r4, [sp, #80]	; 0x50
   b83f8:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b83fa:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b83fc:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b8400:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b8402:	f7fb fe48 	bl	b4096 <_Znwj>
   b8406:	4604      	mov	r4, r0
   b8408:	b1d8      	cbz	r0, b8442 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b840a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b840c:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b840e:	b133      	cbz	r3, b841e <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8410:	2202      	movs	r2, #2
   b8412:	a914      	add	r1, sp, #80	; 0x50
   b8414:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8418:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b841a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b841c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b841e:	4b22      	ldr	r3, [pc, #136]	; (b84a8 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b8420:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b8422:	4a22      	ldr	r2, [pc, #136]	; (b84ac <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b8424:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b8426:	ab01      	add	r3, sp, #4
   b8428:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b842c:	2100      	movs	r1, #0
   b842e:	f002 fbd3 	bl	babd8 <system_subscribe_event>
        if (r) {
   b8432:	b130      	cbz	r0, b8442 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b8434:	4620      	mov	r0, r4
   b8436:	f7fc fa43 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b843a:	2110      	movs	r1, #16
   b843c:	4620      	mov	r0, r4
   b843e:	f7fb fe2e 	bl	b409e <_ZdlPvj>
   b8442:	a814      	add	r0, sp, #80	; 0x50
   b8444:	f7fc fa3c 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   b8448:	a810      	add	r0, sp, #64	; 0x40
   b844a:	f7fc fa39 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   b844e:	a80c      	add	r0, sp, #48	; 0x30
   b8450:	f7fc fa36 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   b8454:	a808      	add	r0, sp, #32
   b8456:	f7fc fa33 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   b845a:	a804      	add	r0, sp, #16
   b845c:	f7fc fa30 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b8460:	f7fe fd34 	bl	b6ecc <_ZN19BackgroundPublishRK8instanceEv>
   b8464:	f7fe fe58 	bl	b7118 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b8468:	1d28      	adds	r0, r5, #4
   b846a:	f001 fed3 	bl	ba214 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b846e:	4628      	mov	r0, r5
   b8470:	f7ff fe32 	bl	b80d8 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b8474:	4b0e      	ldr	r3, [pc, #56]	; (b84b0 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b8476:	9314      	str	r3, [sp, #80]	; 0x50
   b8478:	a914      	add	r1, sp, #80	; 0x50
   b847a:	2300      	movs	r3, #0
   b847c:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b8480:	9315      	str	r3, [sp, #84]	; 0x54
   b8482:	f7ff fe8f 	bl	b81a4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8486:	e785      	b.n	b8394 <_ZN17PublishQueuePosix5setupEv+0x18>
   b8488:	000c0076 	.word	0x000c0076
   b848c:	2003e448 	.word	0x2003e448
   b8490:	000b8141 	.word	0x000b8141
   b8494:	000b48b7 	.word	0x000b48b7
   b8498:	000b48a3 	.word	0x000b48a3
   b849c:	000b487d 	.word	0x000b487d
   b84a0:	000b4fa9 	.word	0x000b4fa9
   b84a4:	000c0002 	.word	0x000c0002
   b84a8:	000b48d3 	.word	0x000b48d3
   b84ac:	000b4855 	.word	0x000b4855
   b84b0:	000b832d 	.word	0x000b832d

000b84b4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b84b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b84b8:	4606      	mov	r6, r0
   b84ba:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b84bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b84be:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b84c0:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b84c2:	1a47      	subs	r7, r0, r1
   b84c4:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b84c8:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b84ca:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b84ce:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b84d0:	d927      	bls.n	b8522 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b84d2:	1b5d      	subs	r5, r3, r5
   b84d4:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b84d6:	6832      	ldr	r2, [r6, #0]
   b84d8:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b84da:	b10c      	cbz	r4, b84e0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b84dc:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b84e0:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b84e2:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b84e4:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b84e6:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b84e8:	eba3 0201 	sub.w	r2, r3, r1
   b84ec:	d913      	bls.n	b8516 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b84ee:	4299      	cmp	r1, r3
   b84f0:	d002      	beq.n	b84f8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b84f2:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b84f4:	f006 fbc0 	bl	bec78 <memmove>
	_M_node = __new_node;
   b84f8:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b84fa:	6823      	ldr	r3, [r4, #0]
   b84fc:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b84fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8502:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b8504:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b8506:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b8508:	59e3      	ldr	r3, [r4, r7]
   b850a:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b850c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8510:	6233      	str	r3, [r6, #32]
    }
   b8512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b8516:	4299      	cmp	r1, r3
   b8518:	d0ee      	beq.n	b84f8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b851a:	1d38      	adds	r0, r7, #4
   b851c:	1a80      	subs	r0, r0, r2
   b851e:	4420      	add	r0, r4
   b8520:	e7e8      	b.n	b84f4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b8522:	f103 0802 	add.w	r8, r3, #2
   b8526:	454b      	cmp	r3, r9
   b8528:	bf2c      	ite	cs
   b852a:	4498      	addcs	r8, r3
   b852c:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b852e:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b8532:	d301      	bcc.n	b8538 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b8534:	f005 fe82 	bl	be23c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8538:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b853c:	f7fb fdab 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8540:	eba8 0505 	sub.w	r5, r8, r5
   b8544:	086d      	lsrs	r5, r5, #1
   b8546:	4682      	mov	sl, r0
   b8548:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b854a:	b10c      	cbz	r4, b8550 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b854c:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b8550:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b8552:	6971      	ldr	r1, [r6, #20]
   b8554:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b8556:	442c      	add	r4, r5
	  if (_Num)
   b8558:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b855a:	4454      	add	r4, sl
   b855c:	d003      	beq.n	b8566 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b855e:	1a52      	subs	r2, r2, r1
   b8560:	4620      	mov	r0, r4
   b8562:	f006 fb89 	bl	bec78 <memmove>
	::operator delete(__p
   b8566:	6871      	ldr	r1, [r6, #4]
   b8568:	6830      	ldr	r0, [r6, #0]
   b856a:	0089      	lsls	r1, r1, #2
   b856c:	f7fb fd97 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b8570:	e9c6 a800 	strd	sl, r8, [r6]
   b8574:	e7c0      	b.n	b84f8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b8578 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8578:	b5f0      	push	{r4, r5, r6, r7, lr}
   b857a:	b085      	sub	sp, #20
   b857c:	4604      	mov	r4, r0
   b857e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b8582:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8586:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8588:	460f      	mov	r7, r1
   b858a:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b858c:	f7ff fbec 	bl	b7d68 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b8590:	4605      	mov	r5, r0
   b8592:	2800      	cmp	r0, #0
   b8594:	d03c      	beq.n	b8610 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b8596:	4b3f      	ldr	r3, [pc, #252]	; (b8694 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b8598:	493f      	ldr	r1, [pc, #252]	; (b8698 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b859a:	4840      	ldr	r0, [pc, #256]	; (b869c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b859c:	2e00      	cmp	r6, #0
   b859e:	bf18      	it	ne
   b85a0:	4633      	movne	r3, r6
   b85a2:	463a      	mov	r2, r7
   b85a4:	f7fd feca 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
   b85a8:	4620      	mov	r0, r4
   b85aa:	f7ff fbd0 	bl	b7d4e <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b85ae:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b85b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b85b6:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b85b8:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b85ba:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b85be:	d029      	beq.n	b8614 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b85c0:	b103      	cbz	r3, b85c4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b85c2:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b85c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b85c8:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b85ca:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b85cc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b85d0:	4628      	mov	r0, r5
   b85d2:	f001 fef3 	bl	ba3bc <_ZNK14SequentialFile11getQueueLenEv>
   b85d6:	9003      	str	r0, [sp, #12]
   b85d8:	4630      	mov	r0, r6
   b85da:	f7ff fcd9 	bl	b7f90 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b85de:	9002      	str	r0, [sp, #8]
   b85e0:	f002 fb7c 	bl	bacdc <spark_cloud_flag_connected>
   b85e4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b85e8:	9000      	str	r0, [sp, #0]
   b85ea:	492d      	ldr	r1, [pc, #180]	; (b86a0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b85ec:	482b      	ldr	r0, [pc, #172]	; (b869c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b85ee:	f7fd fea5 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b85f2:	4628      	mov	r0, r5
   b85f4:	f001 fee2 	bl	ba3bc <_ZNK14SequentialFile11getQueueLenEv>
   b85f8:	2800      	cmp	r0, #0
   b85fa:	d03b      	beq.n	b8674 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b85fc:	4620      	mov	r0, r4
   b85fe:	f7ff fd0b 	bl	b8018 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b8602:	4620      	mov	r0, r4
   b8604:	f7ff fd68 	bl	b80d8 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b8608:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b860a:	f002 f83b 	bl	ba684 <os_mutex_recursive_unlock>
    return true;
   b860e:	2001      	movs	r0, #1
}
   b8610:	b005      	add	sp, #20
   b8612:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b8614:	4630      	mov	r0, r6
   b8616:	f7ff fcbb 	bl	b7f90 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b861a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b861e:	4298      	cmp	r0, r3
   b8620:	d102      	bne.n	b8628 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b8622:	4820      	ldr	r0, [pc, #128]	; (b86a4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b8624:	f005 fe0d 	bl	be242 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b8628:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b862c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b862e:	1a9a      	subs	r2, r3, r2
   b8630:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b8632:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b8636:	2b01      	cmp	r3, #1
   b8638:	d804      	bhi.n	b8644 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b863a:	2200      	movs	r2, #0
   b863c:	2101      	movs	r1, #1
   b863e:	4630      	mov	r0, r6
   b8640:	f7ff ff38 	bl	b84b4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8644:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b8648:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b864c:	f7fb fd23 	bl	b4096 <_Znwj>
   b8650:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b8652:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8656:	b103      	cbz	r3, b865a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b8658:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b865a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b865e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8660:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b8664:	685b      	ldr	r3, [r3, #4]
   b8666:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b866a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b866e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b8672:	e7aa      	b.n	b85ca <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b8674:	4630      	mov	r0, r6
   b8676:	f7ff fc8b 	bl	b7f90 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b867a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b867c:	4298      	cmp	r0, r3
   b867e:	d8bd      	bhi.n	b85fc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b8680:	f002 fb2c 	bl	bacdc <spark_cloud_flag_connected>
   b8684:	2800      	cmp	r0, #0
   b8686:	d0b9      	beq.n	b85fc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b8688:	4907      	ldr	r1, [pc, #28]	; (b86a8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b868a:	4804      	ldr	r0, [pc, #16]	; (b869c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b868c:	f7fd fe56 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
   b8690:	e7b7      	b.n	b8602 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b8692:	bf00      	nop
   b8694:	000c07d9 	.word	0x000c07d9
   b8698:	000c0099 	.word	0x000c0099
   b869c:	2003e448 	.word	0x2003e448
   b86a0:	000c00f1 	.word	0x000c00f1
   b86a4:	000c00c1 	.word	0x000c00c1
   b86a8:	000c011d 	.word	0x000c011d

000b86ac <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b86ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b86ae:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b86b2:	4604      	mov	r4, r0
    if (!publishComplete) {
   b86b4:	2b00      	cmp	r3, #0
   b86b6:	d041      	beq.n	b873c <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b86b8:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b86bc:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b86c0:	2b00      	cmp	r3, #0
   b86c2:	d03d      	beq.n	b8740 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b86c4:	4950      	ldr	r1, [pc, #320]	; (b8808 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b86c6:	4851      	ldr	r0, [pc, #324]	; (b880c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b86c8:	f7fd fe38 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b86cc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b86d0:	b1d3      	cbz	r3, b8708 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b86d2:	1d26      	adds	r6, r4, #4
   b86d4:	2100      	movs	r1, #0
   b86d6:	4630      	mov	r0, r6
   b86d8:	f001 fe20 	bl	ba31c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b86dc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b86e0:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b86e2:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b86e4:	d10d      	bne.n	b8702 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b86e6:	2101      	movs	r1, #1
   b86e8:	4630      	mov	r0, r6
   b86ea:	f001 fe17 	bl	ba31c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b86ee:	2200      	movs	r2, #0
   b86f0:	4629      	mov	r1, r5
   b86f2:	4630      	mov	r0, r6
   b86f4:	f001 fc4a 	bl	b9f8c <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b86f8:	4945      	ldr	r1, [pc, #276]	; (b8810 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b86fa:	4844      	ldr	r0, [pc, #272]	; (b880c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b86fc:	462a      	mov	r2, r5
   b86fe:	f7fd fe1d 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b8702:	2300      	movs	r3, #0
   b8704:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b8708:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b870c:	b110      	cbz	r0, b8714 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b870e:	2143      	movs	r1, #67	; 0x43
   b8710:	f7fb fcc5 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b8714:	2300      	movs	r3, #0
   b8716:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b871a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b871e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b8722:	4b3c      	ldr	r3, [pc, #240]	; (b8814 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b8724:	9300      	str	r3, [sp, #0]
   b8726:	4669      	mov	r1, sp
   b8728:	2300      	movs	r3, #0
   b872a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b872e:	9301      	str	r3, [sp, #4]
   b8730:	f7ff fd38 	bl	b81a4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8734:	f001 ffde 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b8738:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b873c:	b002      	add	sp, #8
   b873e:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b8740:	4935      	ldr	r1, [pc, #212]	; (b8818 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b8742:	4832      	ldr	r0, [pc, #200]	; (b880c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8744:	f7fd fdfa 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b8748:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b874c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b8750:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8754:	b14b      	cbz	r3, b876a <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b8756:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b875a:	b110      	cbz	r0, b8762 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b875c:	2143      	movs	r1, #67	; 0x43
   b875e:	f7fb fc9e 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b8762:	2300      	movs	r3, #0
   b8764:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b8768:	e7db      	b.n	b8722 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b876a:	4620      	mov	r0, r4
   b876c:	f7ff faef 	bl	b7d4e <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b8770:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b8774:	4293      	cmp	r3, r2
   b8776:	d013      	beq.n	b87a0 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b8778:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b877c:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b8780:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b8784:	3b04      	subs	r3, #4
   b8786:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b878a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b878c:	f001 ff7a 	bl	ba684 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b8790:	4922      	ldr	r1, [pc, #136]	; (b881c <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b8792:	481e      	ldr	r0, [pc, #120]	; (b880c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8794:	f7fd fdd2 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b8798:	4620      	mov	r0, r4
   b879a:	f7ff fc3d 	bl	b8018 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b879e:	e7c0      	b.n	b8722 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b87a0:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b87a4:	4628      	mov	r0, r5
   b87a6:	f7ff fbf3 	bl	b7f90 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b87aa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b87ae:	4298      	cmp	r0, r3
   b87b0:	d102      	bne.n	b87b8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b87b2:	481b      	ldr	r0, [pc, #108]	; (b8820 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b87b4:	f005 fd45 	bl	be242 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b87b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b87bc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b87be:	429a      	cmp	r2, r3
   b87c0:	d104      	bne.n	b87cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b87c2:	2201      	movs	r2, #1
   b87c4:	4611      	mov	r1, r2
   b87c6:	4628      	mov	r0, r5
   b87c8:	f7ff fe74 	bl	b84b4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b87cc:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b87d0:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b87d4:	f7fb fc5f 	bl	b4096 <_Znwj>
   b87d8:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b87dc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b87e0:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b87e2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b87e6:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b87ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b87ee:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b87f2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b87f6:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b87fa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b87fe:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b8802:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b8806:	e7c0      	b.n	b878a <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b8808:	000c0130 	.word	0x000c0130
   b880c:	2003e448 	.word	0x2003e448
   b8810:	000c0143 	.word	0x000c0143
   b8814:	000b81ed 	.word	0x000b81ed
   b8818:	000c0153 	.word	0x000c0153
   b881c:	000c0165 	.word	0x000c0165
   b8820:	000c00c1 	.word	0x000c00c1

000b8824 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b8824:	4b01      	ldr	r3, [pc, #4]	; (b882c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b8826:	4a02      	ldr	r2, [pc, #8]	; (b8830 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b8828:	601a      	str	r2, [r3, #0]
}
   b882a:	4770      	bx	lr
   b882c:	2003e448 	.word	0x2003e448
   b8830:	000c018c 	.word	0x000c018c

000b8834 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8834:	b510      	push	{r4, lr}
   b8836:	4b07      	ldr	r3, [pc, #28]	; (b8854 <_ZN17PublishQueuePosixD1Ev+0x20>)
   b8838:	4604      	mov	r4, r0
   b883a:	f840 3bc0 	str.w	r3, [r0], #192
   b883e:	f7fc f83f 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b8842:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b8846:	f7ff fc95 	bl	b8174 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b884a:	1d20      	adds	r0, r4, #4
   b884c:	f001 fc22 	bl	ba094 <_ZN14SequentialFileD1Ev>
}
   b8850:	4620      	mov	r0, r4
   b8852:	bd10      	pop	{r4, pc}
   b8854:	000c01a0 	.word	0x000c01a0

000b8858 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8858:	b510      	push	{r4, lr}
   b885a:	4604      	mov	r4, r0
}
   b885c:	f7ff ffea 	bl	b8834 <_ZN17PublishQueuePosixD1Ev>
   b8860:	4620      	mov	r0, r4
   b8862:	21d0      	movs	r1, #208	; 0xd0
   b8864:	f7fb fc1b 	bl	b409e <_ZdlPvj>
   b8868:	4620      	mov	r0, r4
   b886a:	bd10      	pop	{r4, pc}

000b886c <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b886c:	6001      	str	r1, [r0, #0]
   b886e:	7102      	strb	r2, [r0, #4]
{
}
   b8870:	4770      	bx	lr

000b8872 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b8872:	6800      	ldr	r0, [r0, #0]
   b8874:	6803      	ldr	r3, [r0, #0]
   b8876:	68db      	ldr	r3, [r3, #12]
   b8878:	4718      	bx	r3

000b887a <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b887a:	6800      	ldr	r0, [r0, #0]
   b887c:	6803      	ldr	r3, [r0, #0]
   b887e:	6a1b      	ldr	r3, [r3, #32]
   b8880:	4718      	bx	r3

000b8882 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b8882:	6800      	ldr	r0, [r0, #0]
   b8884:	6803      	ldr	r3, [r0, #0]
   b8886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8888:	4718      	bx	r3

000b888a <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b888a:	7900      	ldrb	r0, [r0, #4]
   b888c:	4770      	bx	lr

000b888e <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b888e:	6800      	ldr	r0, [r0, #0]
   b8890:	6803      	ldr	r3, [r0, #0]
   b8892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8894:	4718      	bx	r3

000b8896 <_ZN10RHDatagram6sendtoEPhhh>:
{
   b8896:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8898:	4605      	mov	r5, r0
   b889a:	460c      	mov	r4, r1
    setHeaderTo(address);
   b889c:	4619      	mov	r1, r3
{
   b889e:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b88a0:	f7ff fff5 	bl	b888e <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b88a4:	6828      	ldr	r0, [r5, #0]
   b88a6:	9a01      	ldr	r2, [sp, #4]
   b88a8:	6803      	ldr	r3, [r0, #0]
   b88aa:	695b      	ldr	r3, [r3, #20]
   b88ac:	4621      	mov	r1, r4
}
   b88ae:	b003      	add	sp, #12
   b88b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b88b4:	4718      	bx	r3

000b88b6 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b88b6:	6800      	ldr	r0, [r0, #0]
   b88b8:	6803      	ldr	r3, [r0, #0]
   b88ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b88bc:	4718      	bx	r3

000b88be <_ZN10RHDatagram14setThisAddressEh>:
{
   b88be:	b538      	push	{r3, r4, r5, lr}
   b88c0:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b88c2:	6800      	ldr	r0, [r0, #0]
   b88c4:	6803      	ldr	r3, [r0, #0]
{
   b88c6:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b88c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b88ca:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b88cc:	4629      	mov	r1, r5
   b88ce:	4620      	mov	r0, r4
   b88d0:	f7ff fff1 	bl	b88b6 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b88d4:	7125      	strb	r5, [r4, #4]
}
   b88d6:	bd38      	pop	{r3, r4, r5, pc}

000b88d8 <_ZN10RHDatagram4initEv>:
{
   b88d8:	b538      	push	{r3, r4, r5, lr}
   b88da:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b88dc:	6800      	ldr	r0, [r0, #0]
   b88de:	6803      	ldr	r3, [r0, #0]
   b88e0:	689b      	ldr	r3, [r3, #8]
   b88e2:	4798      	blx	r3
    if (ret)
   b88e4:	4605      	mov	r5, r0
   b88e6:	b118      	cbz	r0, b88f0 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b88e8:	7921      	ldrb	r1, [r4, #4]
   b88ea:	4620      	mov	r0, r4
   b88ec:	f7ff ffe7 	bl	b88be <_ZN10RHDatagram14setThisAddressEh>
}
   b88f0:	4628      	mov	r0, r5
   b88f2:	bd38      	pop	{r3, r4, r5, pc}

000b88f4 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b88f4:	6800      	ldr	r0, [r0, #0]
   b88f6:	6803      	ldr	r3, [r0, #0]
   b88f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88fa:	4718      	bx	r3

000b88fc <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b88fc:	6800      	ldr	r0, [r0, #0]
   b88fe:	6803      	ldr	r3, [r0, #0]
   b8900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8902:	4718      	bx	r3

000b8904 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b8904:	6800      	ldr	r0, [r0, #0]
   b8906:	6803      	ldr	r3, [r0, #0]
   b8908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b890a:	4718      	bx	r3

000b890c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b890c:	6800      	ldr	r0, [r0, #0]
   b890e:	6803      	ldr	r3, [r0, #0]
   b8910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8912:	4718      	bx	r3

000b8914 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b8914:	6800      	ldr	r0, [r0, #0]
   b8916:	6803      	ldr	r3, [r0, #0]
   b8918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b891a:	4718      	bx	r3

000b891c <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b891c:	6800      	ldr	r0, [r0, #0]
   b891e:	6803      	ldr	r3, [r0, #0]
   b8920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8922:	4718      	bx	r3

000b8924 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b8924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8928:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b892a:	6800      	ldr	r0, [r0, #0]
{
   b892c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b892e:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b8930:	6803      	ldr	r3, [r0, #0]
   b8932:	691b      	ldr	r3, [r3, #16]
{
   b8934:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b8938:	4798      	blx	r3
   b893a:	4605      	mov	r5, r0
   b893c:	b1e8      	cbz	r0, b897a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x56>
    Log.info("Finally from the RHDatagram.cpp file");
   b893e:	4910      	ldr	r1, [pc, #64]	; (b8980 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x5c>)
   b8940:	4810      	ldr	r0, [pc, #64]	; (b8984 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x60>)
   b8942:	f7fb fbcb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	if (from)  *from =  headerFrom();
   b8946:	b11e      	cbz	r6, b8950 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x2c>
   b8948:	4620      	mov	r0, r4
   b894a:	f7ff ffdf 	bl	b890c <_ZN10RHDatagram10headerFromEv>
   b894e:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b8950:	f1b9 0f00 	cmp.w	r9, #0
   b8954:	d004      	beq.n	b8960 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x3c>
   b8956:	4620      	mov	r0, r4
   b8958:	f7ff ffd4 	bl	b8904 <_ZN10RHDatagram8headerToEv>
   b895c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b8960:	f1b8 0f00 	cmp.w	r8, #0
   b8964:	d004      	beq.n	b8970 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4c>
   b8966:	4620      	mov	r0, r4
   b8968:	f7ff ffd4 	bl	b8914 <_ZN10RHDatagram8headerIdEv>
   b896c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b8970:	b11f      	cbz	r7, b897a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x56>
   b8972:	4620      	mov	r0, r4
   b8974:	f7ff ffd2 	bl	b891c <_ZN10RHDatagram11headerFlagsEv>
   b8978:	7038      	strb	r0, [r7, #0]
}
   b897a:	4628      	mov	r0, r5
   b897c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8980:	000c01ac 	.word	0x000c01ac
   b8984:	2003e658 	.word	0x2003e658

000b8988 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b8988:	2001      	movs	r0, #1
   b898a:	4770      	bx	lr

000b898c <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b898c:	7903      	ldrb	r3, [r0, #4]
   b898e:	2b03      	cmp	r3, #3
   b8990:	d0fc      	beq.n	b898c <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b8992:	2001      	movs	r0, #1
   b8994:	4770      	bx	lr

000b8996 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b8996:	2000      	movs	r0, #0
   b8998:	4770      	bx	lr

000b899a <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b899a:	7181      	strb	r1, [r0, #6]
}
   b899c:	4770      	bx	lr

000b899e <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b899e:	7141      	strb	r1, [r0, #5]
}
   b89a0:	4770      	bx	lr

000b89a2 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b89a2:	72c1      	strb	r1, [r0, #11]
}
   b89a4:	4770      	bx	lr

000b89a6 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b89a6:	7301      	strb	r1, [r0, #12]
}
   b89a8:	4770      	bx	lr

000b89aa <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b89aa:	7341      	strb	r1, [r0, #13]
}
   b89ac:	4770      	bx	lr

000b89ae <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b89ae:	7b83      	ldrb	r3, [r0, #14]
   b89b0:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b89b4:	4311      	orrs	r1, r2
   b89b6:	7381      	strb	r1, [r0, #14]
}
   b89b8:	4770      	bx	lr

000b89ba <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b89ba:	79c0      	ldrb	r0, [r0, #7]
}
   b89bc:	4770      	bx	lr

000b89be <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b89be:	7a00      	ldrb	r0, [r0, #8]
}
   b89c0:	4770      	bx	lr

000b89c2 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b89c2:	7a40      	ldrb	r0, [r0, #9]
}
   b89c4:	4770      	bx	lr

000b89c6 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b89c6:	7a80      	ldrb	r0, [r0, #10]
}
   b89c8:	4770      	bx	lr

000b89ca <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b89ca:	8a00      	ldrh	r0, [r0, #16]
}
   b89cc:	b200      	sxth	r0, r0
   b89ce:	4770      	bx	lr

000b89d0 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b89d0:	7900      	ldrb	r0, [r0, #4]
}
   b89d2:	4770      	bx	lr

000b89d4 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b89d4:	7101      	strb	r1, [r0, #4]
}
   b89d6:	4770      	bx	lr

000b89d8 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b89d8:	8a40      	ldrh	r0, [r0, #18]
}
   b89da:	b280      	uxth	r0, r0
   b89dc:	4770      	bx	lr

000b89de <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b89de:	8a80      	ldrh	r0, [r0, #20]
}
   b89e0:	b280      	uxth	r0, r0
   b89e2:	4770      	bx	lr

000b89e4 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b89e4:	8ac0      	ldrh	r0, [r0, #22]
}
   b89e6:	b280      	uxth	r0, r0
   b89e8:	4770      	bx	lr

000b89ea <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b89ea:	b538      	push	{r3, r4, r5, lr}
   b89ec:	4605      	mov	r5, r0
   b89ee:	460c      	mov	r4, r1
    while (!available())
   b89f0:	682b      	ldr	r3, [r5, #0]
   b89f2:	4628      	mov	r0, r5
   b89f4:	68db      	ldr	r3, [r3, #12]
   b89f6:	4798      	blx	r3
   b89f8:	b928      	cbnz	r0, b8a06 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b89fa:	2c00      	cmp	r4, #0
   b89fc:	d0f8      	beq.n	b89f0 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b89fe:	4620      	mov	r0, r4
   b8a00:	f002 fa84 	bl	baf0c <delay>
   b8a04:	e7f4      	b.n	b89f0 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b8a06:	bd38      	pop	{r3, r4, r5, pc}

000b8a08 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b8a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a0a:	4605      	mov	r5, r0
   b8a0c:	460f      	mov	r7, r1
   b8a0e:	4614      	mov	r4, r2
   b8a10:	f001 fe70 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
   b8a14:	4606      	mov	r6, r0
   b8a16:	f001 fe6d 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b8a1a:	1b80      	subs	r0, r0, r6
   b8a1c:	42b8      	cmp	r0, r7
   b8a1e:	d20a      	bcs.n	b8a36 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b8a20:	682b      	ldr	r3, [r5, #0]
   b8a22:	4628      	mov	r0, r5
   b8a24:	68db      	ldr	r3, [r3, #12]
   b8a26:	4798      	blx	r3
   b8a28:	b930      	cbnz	r0, b8a38 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b8a2a:	2c00      	cmp	r4, #0
   b8a2c:	d0f3      	beq.n	b8a16 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b8a2e:	4620      	mov	r0, r4
   b8a30:	f002 fa6c 	bl	baf0c <delay>
   b8a34:	e7ef      	b.n	b8a16 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b8a36:	2000      	movs	r0, #0
}
   b8a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8a3a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b8a3a:	b570      	push	{r4, r5, r6, lr}
   b8a3c:	4604      	mov	r4, r0
   b8a3e:	460e      	mov	r6, r1
   b8a40:	f001 fe58 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
   b8a44:	4605      	mov	r5, r0
   b8a46:	f001 fe55 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b8a4a:	1b40      	subs	r0, r0, r5
   b8a4c:	42b0      	cmp	r0, r6
   b8a4e:	d204      	bcs.n	b8a5a <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b8a50:	7923      	ldrb	r3, [r4, #4]
   b8a52:	2b03      	cmp	r3, #3
   b8a54:	d0f7      	beq.n	b8a46 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b8a56:	2001      	movs	r0, #1
}
   b8a58:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b8a5a:	2000      	movs	r0, #0
   b8a5c:	e7fc      	b.n	b8a58 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b8a5e <_ZN15RHGenericDriver7waitCADEv>:
{
   b8a5e:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b8a60:	69c3      	ldr	r3, [r0, #28]
{
   b8a62:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b8a64:	b1b3      	cbz	r3, b8a94 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b8a66:	f001 fe45 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b8a6a:	2664      	movs	r6, #100	; 0x64
   b8a6c:	4605      	mov	r5, r0
    while (isChannelActive())
   b8a6e:	6823      	ldr	r3, [r4, #0]
   b8a70:	4620      	mov	r0, r4
   b8a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8a74:	4798      	blx	r3
   b8a76:	b168      	cbz	r0, b8a94 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b8a78:	f001 fe3c 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b8a7c:	69e3      	ldr	r3, [r4, #28]
   b8a7e:	1b40      	subs	r0, r0, r5
   b8a80:	4298      	cmp	r0, r3
   b8a82:	d809      	bhi.n	b8a98 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b8a84:	210a      	movs	r1, #10
   b8a86:	2001      	movs	r0, #1
   b8a88:	f004 fc53 	bl	bd332 <_Z6randomii>
   b8a8c:	4370      	muls	r0, r6
   b8a8e:	f002 fa3d 	bl	baf0c <delay>
    while (isChannelActive())
   b8a92:	e7ec      	b.n	b8a6e <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b8a94:	2001      	movs	r0, #1
}
   b8a96:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b8a98:	2000      	movs	r0, #0
   b8a9a:	e7fc      	b.n	b8a96 <_ZN15RHGenericDriver7waitCADEv+0x38>

000b8a9c <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b8a9c:	4a06      	ldr	r2, [pc, #24]	; (b8ab8 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b8a9e:	6002      	str	r2, [r0, #0]
   b8aa0:	21ff      	movs	r1, #255	; 0xff
   b8aa2:	2200      	movs	r2, #0
   b8aa4:	7102      	strb	r2, [r0, #4]
   b8aa6:	7141      	strb	r1, [r0, #5]
   b8aa8:	8242      	strh	r2, [r0, #18]
   b8aaa:	72c1      	strb	r1, [r0, #11]
   b8aac:	8282      	strh	r2, [r0, #20]
   b8aae:	8181      	strh	r1, [r0, #12]
   b8ab0:	7382      	strb	r2, [r0, #14]
   b8ab2:	82c2      	strh	r2, [r0, #22]
   b8ab4:	61c2      	str	r2, [r0, #28]
}
   b8ab6:	4770      	bx	lr
   b8ab8:	000c01dc 	.word	0x000c01dc

000b8abc <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b8abc:	4770      	bx	lr

000b8abe <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b8abe:	4770      	bx	lr

000b8ac0 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b8ac0:	4770      	bx	lr

000b8ac2 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b8ac2:	4770      	bx	lr

000b8ac4 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b8ac4:	4770      	bx	lr

000b8ac6 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b8ac6:	7141      	strb	r1, [r0, #5]
}
   b8ac8:	4770      	bx	lr

000b8aca <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b8aca:	7181      	strb	r1, [r0, #6]
}
   b8acc:	4770      	bx	lr

000b8ace <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b8ace:	7101      	strb	r1, [r0, #4]
}
   b8ad0:	4770      	bx	lr
	...

000b8ad4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b8ad4:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b8ad6:	4d03      	ldr	r5, [pc, #12]	; (b8ae4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b8ad8:	6005      	str	r5, [r0, #0]
   b8ada:	7101      	strb	r1, [r0, #4]
   b8adc:	7142      	strb	r2, [r0, #5]
   b8ade:	7183      	strb	r3, [r0, #6]
}
   b8ae0:	bd30      	pop	{r4, r5, pc}
   b8ae2:	bf00      	nop
   b8ae4:	000c025c 	.word	0x000c025c

000b8ae8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b8ae8:	4770      	bx	lr

000b8aea <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b8aea:	b510      	push	{r4, lr}
  }
   b8aec:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b8aee:	4604      	mov	r4, r0
  }
   b8af0:	f7fb fad5 	bl	b409e <_ZdlPvj>
   b8af4:	4620      	mov	r0, r4
   b8af6:	bd10      	pop	{r4, pc}

000b8af8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b8af8:	b40e      	push	{r1, r2, r3}
   b8afa:	b503      	push	{r0, r1, lr}
   b8afc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b8afe:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b8b00:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b8b04:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b8b06:	f004 fbd8 	bl	bd2ba <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b8b0a:	b002      	add	sp, #8
   b8b0c:	f85d eb04 	ldr.w	lr, [sp], #4
   b8b10:	b003      	add	sp, #12
   b8b12:	4770      	bx	lr

000b8b14 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b8b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8b16:	4604      	mov	r4, r0
   b8b18:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b8b1a:	7922      	ldrb	r2, [r4, #4]
   b8b1c:	68a3      	ldr	r3, [r4, #8]
   b8b1e:	b132      	cbz	r2, b8b2e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b8b20:	b9a3      	cbnz	r3, b8b4c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b8b22:	490b      	ldr	r1, [pc, #44]	; (b8b50 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b8b24:	b002      	add	sp, #8
   b8b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b8b2a:	f004 babd 	b.w	bd0a8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b8b2e:	4a09      	ldr	r2, [pc, #36]	; (b8b54 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b8b30:	7b26      	ldrb	r6, [r4, #12]
   b8b32:	4d09      	ldr	r5, [pc, #36]	; (b8b58 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b8b34:	4909      	ldr	r1, [pc, #36]	; (b8b5c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b8b36:	7b64      	ldrb	r4, [r4, #13]
   b8b38:	2e01      	cmp	r6, #1
   b8b3a:	bf18      	it	ne
   b8b3c:	4629      	movne	r1, r5
   b8b3e:	e9cd 1400 	strd	r1, r4, [sp]
   b8b42:	4907      	ldr	r1, [pc, #28]	; (b8b60 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b8b44:	f7ff ffd8 	bl	b8af8 <_ZN5Print6printfEPKcz>
  }
   b8b48:	b002      	add	sp, #8
   b8b4a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b8b4c:	4a05      	ldr	r2, [pc, #20]	; (b8b64 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b8b4e:	e7ef      	b.n	b8b30 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b8b50:	000c0299 	.word	0x000c0299
   b8b54:	000c07d9 	.word	0x000c07d9
   b8b58:	000c0295 	.word	0x000c0295
   b8b5c:	000c0291 	.word	0x000c0291
   b8b60:	000c02af 	.word	0x000c02af
   b8b64:	000c0288 	.word	0x000c0288

000b8b68 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b8b68:	b510      	push	{r4, lr}
   b8b6a:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b8b6c:	f7ff ffb2 	bl	b8ad4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b8b70:	4b05      	ldr	r3, [pc, #20]	; (b8b88 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b8b72:	6023      	str	r3, [r4, #0]
  {
   b8b74:	4b05      	ldr	r3, [pc, #20]	; (b8b8c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b8b76:	60a3      	str	r3, [r4, #8]
   b8b78:	2301      	movs	r3, #1
   b8b7a:	7323      	strb	r3, [r4, #12]
   b8b7c:	2300      	movs	r3, #0
   b8b7e:	6123      	str	r3, [r4, #16]
   b8b80:	82a3      	strh	r3, [r4, #20]
{
}
   b8b82:	4620      	mov	r0, r4
   b8b84:	bd10      	pop	{r4, pc}
   b8b86:	bf00      	nop
   b8b88:	000c02e8 	.word	0x000c02e8
   b8b8c:	000c02d4 	.word	0x000c02d4

000b8b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b8b90:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b8b92:	4c0b      	ldr	r4, [pc, #44]	; (b8bc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b8b94:	7821      	ldrb	r1, [r4, #0]
   b8b96:	f3bf 8f5b 	dmb	ish
   b8b9a:	f011 0101 	ands.w	r1, r1, #1
   b8b9e:	d10b      	bne.n	b8bb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8ba0:	4620      	mov	r0, r4
   b8ba2:	9101      	str	r1, [sp, #4]
   b8ba4:	f7fb fa8a 	bl	b40bc <__cxa_guard_acquire>
   b8ba8:	9901      	ldr	r1, [sp, #4]
   b8baa:	b128      	cbz	r0, b8bb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8bac:	4805      	ldr	r0, [pc, #20]	; (b8bc4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8bae:	f004 fbd9 	bl	bd364 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8bb2:	4620      	mov	r0, r4
   b8bb4:	f7fb fa87 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b8bb8:	4802      	ldr	r0, [pc, #8]	; (b8bc4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8bba:	b002      	add	sp, #8
   b8bbc:	bd10      	pop	{r4, pc}
   b8bbe:	bf00      	nop
   b8bc0:	2003e450 	.word	0x2003e450
   b8bc4:	2003e454 	.word	0x2003e454

000b8bc8 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b8bc8:	b507      	push	{r0, r1, r2, lr}
   b8bca:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b8bcc:	f7ff ffe0 	bl	b8b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b8bd0:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b8bd2:	b003      	add	sp, #12
   b8bd4:	f85d eb04 	ldr.w	lr, [sp], #4
   b8bd8:	f004 bc7c 	b.w	bd4d4 <_ZN8SPIClass8transferEh>

000b8bdc <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b8bdc:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b8bde:	f7ff ffd7 	bl	b8b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b8be2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8be6:	f004 bc7b 	b.w	bd4e0 <_ZN8SPIClass15attachInterruptEv>

000b8bea <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b8bea:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b8bec:	f7ff ffd0 	bl	b8b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b8bf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8bf4:	f004 bc75 	b.w	bd4e2 <_ZN8SPIClass15detachInterruptEv>

000b8bf8 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b8bf8:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b8bfa:	7903      	ldrb	r3, [r0, #4]
   b8bfc:	2b04      	cmp	r3, #4
   b8bfe:	d020      	beq.n	b8c42 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b8c00:	2b03      	cmp	r3, #3
   b8c02:	d020      	beq.n	b8c46 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b8c04:	2b02      	cmp	r3, #2
   b8c06:	d020      	beq.n	b8c4a <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b8c08:	4a11      	ldr	r2, [pc, #68]	; (b8c50 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b8c0a:	4912      	ldr	r1, [pc, #72]	; (b8c54 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b8c0c:	2b01      	cmp	r3, #1
   b8c0e:	bf18      	it	ne
   b8c10:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b8c12:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b8c14:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b8c16:	3901      	subs	r1, #1
   b8c18:	bf18      	it	ne
   b8c1a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b8c1c:	b133      	cbz	r3, b8c2c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b8c1e:	2b01      	cmp	r3, #1
   b8c20:	d004      	beq.n	b8c2c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b8c22:	2b02      	cmp	r3, #2
   b8c24:	d002      	beq.n	b8c2c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b8c26:	2b03      	cmp	r3, #3
   b8c28:	bf18      	it	ne
   b8c2a:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b8c2c:	2400      	movs	r4, #0
   b8c2e:	7304      	strb	r4, [r0, #12]
   b8c30:	6102      	str	r2, [r0, #16]
   b8c32:	7501      	strb	r1, [r0, #20]
   b8c34:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b8c36:	f7ff ffab 	bl	b8b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b8c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8c3e:	f004 bb9b 	b.w	bd378 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b8c42:	4a05      	ldr	r2, [pc, #20]	; (b8c58 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b8c44:	e7e5      	b.n	b8c12 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b8c46:	4a05      	ldr	r2, [pc, #20]	; (b8c5c <_ZN13RHHardwareSPI5beginEv+0x64>)
   b8c48:	e7e3      	b.n	b8c12 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b8c4a:	4a05      	ldr	r2, [pc, #20]	; (b8c60 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b8c4c:	e7e1      	b.n	b8c12 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b8c4e:	bf00      	nop
   b8c50:	001e8480 	.word	0x001e8480
   b8c54:	000f4240 	.word	0x000f4240
   b8c58:	00f42400 	.word	0x00f42400
   b8c5c:	007a1200 	.word	0x007a1200
   b8c60:	003d0900 	.word	0x003d0900

000b8c64 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b8c64:	b508      	push	{r3, lr}
        instance().end();
   b8c66:	f7ff ff93 	bl	b8b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b8c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8c6e:	f004 bb97 	b.w	bd3a0 <_ZN8SPIClass3endEv>

000b8c72 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b8c72:	b510      	push	{r4, lr}
   b8c74:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b8c76:	f7ff ff8b 	bl	b8b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b8c7a:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b8c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8c82:	f004 bbb9 	b.w	bd3f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b8c86 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b8c86:	b508      	push	{r3, lr}
        instance().endTransaction();
   b8c88:	f7ff ff82 	bl	b8b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b8c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8c90:	f004 bb98 	b.w	bd3c4 <_ZN8SPIClass14endTransactionEv>

000b8c94 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b8c94:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b8c96:	f7ff ff7b 	bl	b8b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b8c9a:	bd08      	pop	{r3, pc}

000b8c9c <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b8c9c:	2300      	movs	r3, #0
   b8c9e:	4802      	ldr	r0, [pc, #8]	; (b8ca8 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b8ca0:	461a      	mov	r2, r3
   b8ca2:	4619      	mov	r1, r3
   b8ca4:	f7ff bf60 	b.w	b8b68 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b8ca8:	2003e45c 	.word	0x2003e45c

000b8cac <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b8cac:	2a01      	cmp	r2, #1
   b8cae:	d105      	bne.n	b8cbc <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b8cb0:	7a00      	ldrb	r0, [r0, #8]
   b8cb2:	780b      	ldrb	r3, [r1, #0]
   b8cb4:	1a1b      	subs	r3, r3, r0
   b8cb6:	4258      	negs	r0, r3
   b8cb8:	4158      	adcs	r0, r3
   b8cba:	4770      	bx	lr
   b8cbc:	2000      	movs	r0, #0
}
   b8cbe:	4770      	bx	lr

000b8cc0 <_ZN6RHMesh5doArpEh>:
{
   b8cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b8cc4:	4c25      	ldr	r4, [pc, #148]	; (b8d5c <_ZN6RHMesh5doArpEh+0x9c>)
   b8cc6:	2301      	movs	r3, #1
{
   b8cc8:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b8cca:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b8ccc:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b8cce:	2300      	movs	r3, #0
{
   b8cd0:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b8cd2:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b8cd4:	9300      	str	r3, [sp, #0]
   b8cd6:	2203      	movs	r2, #3
   b8cd8:	23ff      	movs	r3, #255	; 0xff
   b8cda:	4621      	mov	r1, r4
{
   b8cdc:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b8cde:	f000 fbc1 	bl	b9464 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b8ce2:	b120      	cbz	r0, b8cee <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b8ce4:	2500      	movs	r5, #0
}
   b8ce6:	4628      	mov	r0, r5
   b8ce8:	b006      	add	sp, #24
   b8cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b8cee:	237a      	movs	r3, #122	; 0x7a
   b8cf0:	f88d 3017 	strb.w	r3, [sp, #23]
   b8cf4:	f001 fcfe 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b8cf8:	f106 0904 	add.w	r9, r6, #4
   b8cfc:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b8cfe:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b8d02:	f001 fcf7 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
   b8d06:	1a29      	subs	r1, r5, r0
   b8d08:	2900      	cmp	r1, #0
   b8d0a:	ddeb      	ble.n	b8ce4 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b8d0c:	2200      	movs	r2, #0
   b8d0e:	b289      	uxth	r1, r1
   b8d10:	4648      	mov	r0, r9
   b8d12:	f7ff fdb6 	bl	b8882 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b8d16:	2800      	cmp	r0, #0
   b8d18:	d0f3      	beq.n	b8d02 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b8d1a:	2300      	movs	r3, #0
   b8d1c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8d20:	e9cd 3300 	strd	r3, r3, [sp]
   b8d24:	f10d 0217 	add.w	r2, sp, #23
   b8d28:	4621      	mov	r1, r4
   b8d2a:	4630      	mov	r0, r6
   b8d2c:	f000 fba4 	bl	b9478 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b8d30:	4605      	mov	r5, r0
   b8d32:	2800      	cmp	r0, #0
   b8d34:	d0e3      	beq.n	b8cfe <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b8d36:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b8d3a:	2b01      	cmp	r3, #1
   b8d3c:	d9df      	bls.n	b8cfe <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b8d3e:	f894 a000 	ldrb.w	sl, [r4]
   b8d42:	f1ba 0f02 	cmp.w	sl, #2
   b8d46:	d1da      	bne.n	b8cfe <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b8d48:	4648      	mov	r0, r9
   b8d4a:	f7ff fddf 	bl	b890c <_ZN10RHDatagram10headerFromEv>
   b8d4e:	4653      	mov	r3, sl
   b8d50:	4602      	mov	r2, r0
   b8d52:	4639      	mov	r1, r7
   b8d54:	4630      	mov	r0, r6
   b8d56:	f000 fafd 	bl	b9354 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b8d5a:	e7c4      	b.n	b8ce6 <_ZN6RHMesh5doArpEh+0x26>
   b8d5c:	2003e474 	.word	0x2003e474

000b8d60 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b8d60:	2a01      	cmp	r2, #1
{
   b8d62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8d66:	4607      	mov	r7, r0
   b8d68:	460e      	mov	r6, r1
   b8d6a:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b8d6c:	d93b      	bls.n	b8de6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b8d6e:	794d      	ldrb	r5, [r1, #5]
   b8d70:	2d02      	cmp	r5, #2
   b8d72:	d130      	bne.n	b8dd6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b8d74:	f100 0804 	add.w	r8, r0, #4
   b8d78:	79c9      	ldrb	r1, [r1, #7]
   b8d7a:	9101      	str	r1, [sp, #4]
   b8d7c:	4640      	mov	r0, r8
   b8d7e:	f7ff fdc5 	bl	b890c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b8d82:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b8d84:	462b      	mov	r3, r5
   b8d86:	4602      	mov	r2, r0
   b8d88:	9901      	ldr	r1, [sp, #4]
   b8d8a:	4638      	mov	r0, r7
   b8d8c:	f000 fae2 	bl	b9354 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b8d90:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b8d92:	f106 0308 	add.w	r3, r6, #8
   b8d96:	2400      	movs	r4, #0
   b8d98:	4622      	mov	r2, r4
   b8d9a:	4295      	cmp	r5, r2
   b8d9c:	f104 0401 	add.w	r4, r4, #1
   b8da0:	b2e4      	uxtb	r4, r4
   b8da2:	d904      	bls.n	b8dae <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b8da4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8da8:	7a39      	ldrb	r1, [r7, #8]
   b8daa:	4291      	cmp	r1, r2
   b8dac:	d1f4      	bne.n	b8d98 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b8dae:	f104 0108 	add.w	r1, r4, #8
   b8db2:	440e      	add	r6, r1
	while (i < numRoutes)
   b8db4:	42a5      	cmp	r5, r4
   b8db6:	d916      	bls.n	b8de6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b8db8:	f816 1b01 	ldrb.w	r1, [r6], #1
   b8dbc:	9101      	str	r1, [sp, #4]
   b8dbe:	4640      	mov	r0, r8
   b8dc0:	f7ff fda4 	bl	b890c <_ZN10RHDatagram10headerFromEv>
   b8dc4:	3401      	adds	r4, #1
   b8dc6:	4602      	mov	r2, r0
   b8dc8:	9901      	ldr	r1, [sp, #4]
   b8dca:	2302      	movs	r3, #2
   b8dcc:	4638      	mov	r0, r7
   b8dce:	b2e4      	uxtb	r4, r4
   b8dd0:	f000 fac0 	bl	b9354 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b8dd4:	e7ee      	b.n	b8db4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b8dd6:	2d03      	cmp	r5, #3
   b8dd8:	d105      	bne.n	b8de6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b8dda:	7989      	ldrb	r1, [r1, #6]
}
   b8ddc:	b002      	add	sp, #8
   b8dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b8de2:	f000 baa0 	b.w	b9326 <_ZN8RHRouter13deleteRouteToEh>
}
   b8de6:	b002      	add	sp, #8
   b8de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8dec <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b8dec:	b510      	push	{r4, lr}
   b8dee:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b8df0:	f000 faf0 	bl	b93d4 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b8df4:	4b01      	ldr	r3, [pc, #4]	; (b8dfc <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b8df6:	6023      	str	r3, [r4, #0]
}
   b8df8:	4620      	mov	r0, r4
   b8dfa:	bd10      	pop	{r4, pc}
   b8dfc:	000c031c 	.word	0x000c031c

000b8e00 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b8e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b8e04:	2a79      	cmp	r2, #121	; 0x79
{
   b8e06:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b8e0a:	4606      	mov	r6, r0
   b8e0c:	460f      	mov	r7, r1
   b8e0e:	4614      	mov	r4, r2
   b8e10:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b8e12:	d825      	bhi.n	b8e60 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b8e14:	2bff      	cmp	r3, #255	; 0xff
   b8e16:	d114      	bne.n	b8e42 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b8e18:	f8df 8048 	ldr.w	r8, [pc, #72]	; b8e64 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b8e1c:	4640      	mov	r0, r8
   b8e1e:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b8e20:	4622      	mov	r2, r4
   b8e22:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b8e24:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b8e28:	f005 ff18 	bl	bec5c <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b8e2c:	1c62      	adds	r2, r4, #1
   b8e2e:	f8cd 9020 	str.w	r9, [sp, #32]
   b8e32:	462b      	mov	r3, r5
   b8e34:	4641      	mov	r1, r8
   b8e36:	4630      	mov	r0, r6
   b8e38:	b2d2      	uxtb	r2, r2
}
   b8e3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b8e3e:	f000 bb11 	b.w	b9464 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b8e42:	4619      	mov	r1, r3
   b8e44:	f000 fa2b 	bl	b929e <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b8e48:	2800      	cmp	r0, #0
   b8e4a:	d1e5      	bne.n	b8e18 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b8e4c:	6833      	ldr	r3, [r6, #0]
   b8e4e:	4629      	mov	r1, r5
   b8e50:	689b      	ldr	r3, [r3, #8]
   b8e52:	4630      	mov	r0, r6
   b8e54:	4798      	blx	r3
   b8e56:	2800      	cmp	r0, #0
   b8e58:	d1de      	bne.n	b8e18 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b8e5a:	2002      	movs	r0, #2
}
   b8e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b8e60:	2001      	movs	r0, #1
   b8e62:	e7fb      	b.n	b8e5c <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b8e64:	2003e474 	.word	0x2003e474

000b8e68 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b8e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e6c:	b089      	sub	sp, #36	; 0x24
   b8e6e:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b8e70:	237a      	movs	r3, #122	; 0x7a
   b8e72:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b8e76:	f10d 031f 	add.w	r3, sp, #31
   b8e7a:	9303      	str	r3, [sp, #12]
   b8e7c:	f10d 031e 	add.w	r3, sp, #30
   b8e80:	9302      	str	r3, [sp, #8]
   b8e82:	4e5d      	ldr	r6, [pc, #372]	; (b8ff8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b8e84:	f10d 031d 	add.w	r3, sp, #29
   b8e88:	9301      	str	r3, [sp, #4]
   b8e8a:	ab07      	add	r3, sp, #28
   b8e8c:	9300      	str	r3, [sp, #0]
{     
   b8e8e:	4689      	mov	r9, r1
   b8e90:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b8e92:	f10d 031b 	add.w	r3, sp, #27
   b8e96:	f10d 021a 	add.w	r2, sp, #26
   b8e9a:	4631      	mov	r1, r6
{     
   b8e9c:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b8ea0:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b8ea2:	f000 fae9 	bl	b9478 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b8ea6:	4604      	mov	r4, r0
   b8ea8:	b920      	cbnz	r0, b8eb4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b8eaa:	2400      	movs	r4, #0
}
   b8eac:	4620      	mov	r0, r4
   b8eae:	b009      	add	sp, #36	; 0x24
   b8eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b8eb4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b8eb8:	b373      	cbz	r3, b8f18 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b8eba:	7832      	ldrb	r2, [r6, #0]
   b8ebc:	bb62      	cbnz	r2, b8f18 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b8ebe:	f1b8 0f00 	cmp.w	r8, #0
   b8ec2:	d003      	beq.n	b8ecc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b8ec4:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b8ec8:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b8ecc:	f1bb 0f00 	cmp.w	fp, #0
   b8ed0:	d003      	beq.n	b8eda <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b8ed2:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b8ed6:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b8eda:	f1ba 0f00 	cmp.w	sl, #0
   b8ede:	d003      	beq.n	b8ee8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b8ee0:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b8ee4:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b8ee8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8eea:	b11a      	cbz	r2, b8ef4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b8eec:	9914      	ldr	r1, [sp, #80]	; 0x50
   b8eee:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b8ef2:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b8ef4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b8ef6:	b11a      	cbz	r2, b8f00 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b8ef8:	9915      	ldr	r1, [sp, #84]	; 0x54
   b8efa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b8efe:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b8f00:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b8f02:	493e      	ldr	r1, [pc, #248]	; (b8ffc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b8f04:	3b01      	subs	r3, #1
   b8f06:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b8f08:	429a      	cmp	r2, r3
		*len = msgLen;
   b8f0a:	bf88      	it	hi
   b8f0c:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b8f0e:	783a      	ldrb	r2, [r7, #0]
   b8f10:	4648      	mov	r0, r9
   b8f12:	f005 fea3 	bl	bec5c <memcpy>
	    return true;
   b8f16:	e7c9      	b.n	b8eac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b8f18:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b8f1c:	2aff      	cmp	r2, #255	; 0xff
   b8f1e:	d1c4      	bne.n	b8eaa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b8f20:	2b01      	cmp	r3, #1
   b8f22:	d9c2      	bls.n	b8eaa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b8f24:	7832      	ldrb	r2, [r6, #0]
   b8f26:	2a01      	cmp	r2, #1
   b8f28:	d1bf      	bne.n	b8eaa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b8f2a:	7a2a      	ldrb	r2, [r5, #8]
   b8f2c:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b8f30:	42a2      	cmp	r2, r4
   b8f32:	d0ba      	beq.n	b8eaa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b8f34:	1edf      	subs	r7, r3, #3
   b8f36:	4932      	ldr	r1, [pc, #200]	; (b9000 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b8f38:	b2ff      	uxtb	r7, r7
   b8f3a:	2300      	movs	r3, #0
   b8f3c:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b8f40:	4547      	cmp	r7, r8
   b8f42:	d906      	bls.n	b8f52 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b8f44:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8f48:	4282      	cmp	r2, r0
   b8f4a:	f103 0301 	add.w	r3, r3, #1
   b8f4e:	d1f5      	bne.n	b8f3c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b8f50:	e7ab      	b.n	b8eaa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b8f52:	f105 0904 	add.w	r9, r5, #4
   b8f56:	4648      	mov	r0, r9
   b8f58:	f7ff fcd8 	bl	b890c <_ZN10RHDatagram10headerFromEv>
   b8f5c:	2302      	movs	r3, #2
   b8f5e:	4602      	mov	r2, r0
   b8f60:	4621      	mov	r1, r4
   b8f62:	4628      	mov	r0, r5
   b8f64:	f000 f9f6 	bl	b9354 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b8f68:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b8f6c:	b193      	cbz	r3, b8f94 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b8f6e:	4c22      	ldr	r4, [pc, #136]	; (b8ff8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b8f70:	1ba3      	subs	r3, r4, r6
   b8f72:	b2db      	uxtb	r3, r3
   b8f74:	429f      	cmp	r7, r3
   b8f76:	d90c      	bls.n	b8f92 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b8f78:	78e1      	ldrb	r1, [r4, #3]
   b8f7a:	9105      	str	r1, [sp, #20]
   b8f7c:	4648      	mov	r0, r9
   b8f7e:	f7ff fcc5 	bl	b890c <_ZN10RHDatagram10headerFromEv>
   b8f82:	9905      	ldr	r1, [sp, #20]
   b8f84:	4602      	mov	r2, r0
   b8f86:	2302      	movs	r3, #2
   b8f88:	4628      	mov	r0, r5
   b8f8a:	f000 f9e3 	bl	b9354 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b8f8e:	3401      	adds	r4, #1
   b8f90:	e7ee      	b.n	b8f70 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b8f92:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b8f94:	682b      	ldr	r3, [r5, #0]
   b8f96:	7872      	ldrb	r2, [r6, #1]
   b8f98:	68db      	ldr	r3, [r3, #12]
   b8f9a:	491a      	ldr	r1, [pc, #104]	; (b9004 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b8f9c:	4628      	mov	r0, r5
   b8f9e:	4798      	blx	r3
   b8fa0:	4604      	mov	r4, r0
   b8fa2:	b160      	cbz	r0, b8fbe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b8fa4:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b8fa6:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b8fa8:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b8faa:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b8fae:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b8fb2:	4911      	ldr	r1, [pc, #68]	; (b8ff8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b8fb4:	9400      	str	r4, [sp, #0]
   b8fb6:	4628      	mov	r0, r5
   b8fb8:	f000 fa54 	bl	b9464 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b8fbc:	e776      	b.n	b8eac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b8fbe:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b8fc2:	4543      	cmp	r3, r8
   b8fc4:	f67f af71 	bls.w	b8eaa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b8fc8:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b8fcc:	2b00      	cmp	r3, #0
   b8fce:	f43f af6c 	beq.w	b8eaa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b8fd2:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b8fd6:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8fd8:	4907      	ldr	r1, [pc, #28]	; (b8ff8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b8fda:	443e      	add	r6, r7
		tmpMessageLen++;
   b8fdc:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b8fde:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8fe0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b8fe4:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b8fe6:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8fe8:	9300      	str	r3, [sp, #0]
   b8fea:	4628      	mov	r0, r5
   b8fec:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b8fee:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8ff2:	f000 fa01 	bl	b93f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b8ff6:	e759      	b.n	b8eac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b8ff8:	2003e474 	.word	0x2003e474
   b8ffc:	2003e475 	.word	0x2003e475
   b9000:	2003e477 	.word	0x2003e477
   b9004:	2003e476 	.word	0x2003e476

000b9008 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b9008:	b5f0      	push	{r4, r5, r6, r7, lr}
   b900a:	b085      	sub	sp, #20
   b900c:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b900e:	3004      	adds	r0, #4
{
   b9010:	460e      	mov	r6, r1
   b9012:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b9014:	f7ff fc7a 	bl	b890c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b9018:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b901a:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b901c:	4631      	mov	r1, r6
   b901e:	4628      	mov	r0, r5
   b9020:	f000 f954 	bl	b92cc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b9024:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b9026:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b9028:	d001      	beq.n	b902e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b902a:	2805      	cmp	r0, #5
   b902c:	d11b      	bne.n	b9066 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b902e:	7831      	ldrb	r1, [r6, #0]
   b9030:	4628      	mov	r0, r5
   b9032:	f000 f978 	bl	b9326 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b9036:	7872      	ldrb	r2, [r6, #1]
   b9038:	7a2b      	ldrb	r3, [r5, #8]
   b903a:	429a      	cmp	r2, r3
   b903c:	d013      	beq.n	b9066 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b903e:	4c0b      	ldr	r4, [pc, #44]	; (b906c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b9040:	2303      	movs	r3, #3
   b9042:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b9044:	7833      	ldrb	r3, [r6, #0]
   b9046:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b9048:	7871      	ldrb	r1, [r6, #1]
   b904a:	2302      	movs	r3, #2
   b904c:	463a      	mov	r2, r7
   b904e:	4628      	mov	r0, r5
   b9050:	f000 f980 	bl	b9354 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b9054:	2300      	movs	r3, #0
   b9056:	9300      	str	r3, [sp, #0]
   b9058:	4621      	mov	r1, r4
   b905a:	7873      	ldrb	r3, [r6, #1]
   b905c:	2202      	movs	r2, #2
   b905e:	4628      	mov	r0, r5
   b9060:	f000 fa00 	bl	b9464 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b9064:	4604      	mov	r4, r0
}
   b9066:	4620      	mov	r0, r4
   b9068:	b005      	add	sp, #20
   b906a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b906c:	2003e474 	.word	0x2003e474

000b9070 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b9070:	b510      	push	{r4, lr}
   b9072:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b9074:	f7ff fbfa 	bl	b886c <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b9078:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b907a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b907c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b907e:	2303      	movs	r3, #3
    _retransmissions = 0;
   b9080:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b9082:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b9084:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b9086:	f44f 7280 	mov.w	r2, #256	; 0x100
   b908a:	f104 0011 	add.w	r0, r4, #17
   b908e:	f005 fe0d 	bl	becac <memset>
}
   b9092:	4620      	mov	r0, r4
   b9094:	bd10      	pop	{r4, pc}

000b9096 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b9096:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9098:	4604      	mov	r4, r0
   b909a:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b909c:	f7ff fc2a 	bl	b88f4 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b90a0:	4620      	mov	r0, r4
   b90a2:	2200      	movs	r2, #0
   b90a4:	2180      	movs	r1, #128	; 0x80
   b90a6:	f7ff fc29 	bl	b88fc <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b90aa:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b90ac:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b90ae:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b90b2:	f10d 010f 	add.w	r1, sp, #15
   b90b6:	2201      	movs	r2, #1
   b90b8:	4620      	mov	r0, r4
   b90ba:	f7ff fbec 	bl	b8896 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b90be:	4620      	mov	r0, r4
   b90c0:	f7ff fbdb 	bl	b887a <_ZN10RHDatagram14waitPacketSentEv>
}
   b90c4:	b004      	add	sp, #16
   b90c6:	bd10      	pop	{r4, pc}

000b90c8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b90c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b90cc:	7b05      	ldrb	r5, [r0, #12]
   b90ce:	3501      	adds	r5, #1
   b90d0:	b2ed      	uxtb	r5, r5
{
   b90d2:	b087      	sub	sp, #28
   b90d4:	4604      	mov	r4, r0
   b90d6:	4689      	mov	r9, r1
   b90d8:	4692      	mov	sl, r2
   b90da:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b90dc:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b90de:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b90e0:	7c22      	ldrb	r2, [r4, #16]
   b90e2:	463b      	mov	r3, r7
   b90e4:	429a      	cmp	r2, r3
   b90e6:	f107 0701 	add.w	r7, r7, #1
   b90ea:	b2ff      	uxtb	r7, r7
   b90ec:	d36b      	bcc.n	b91c6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b90ee:	4629      	mov	r1, r5
   b90f0:	4620      	mov	r0, r4
   b90f2:	f7ff fbff 	bl	b88f4 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b90f6:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b90f8:	bf0d      	iteet	eq
   b90fa:	22c0      	moveq	r2, #192	; 0xc0
   b90fc:	2280      	movne	r2, #128	; 0x80
   b90fe:	2140      	movne	r1, #64	; 0x40
   b9100:	2100      	moveq	r1, #0
   b9102:	4620      	mov	r0, r4
   b9104:	f7ff fbfa 	bl	b88fc <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b9108:	4643      	mov	r3, r8
   b910a:	4652      	mov	r2, sl
   b910c:	4649      	mov	r1, r9
   b910e:	4620      	mov	r0, r4
   b9110:	f7ff fbc1 	bl	b8896 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b9114:	4620      	mov	r0, r4
   b9116:	f7ff fbb0 	bl	b887a <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b911a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b911e:	d054      	beq.n	b91ca <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b9120:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b9122:	bf82      	ittt	hi
   b9124:	68a3      	ldrhi	r3, [r4, #8]
   b9126:	3301      	addhi	r3, #1
   b9128:	60a3      	strhi	r3, [r4, #8]
   b912a:	f001 fae3 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b912e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b9132:	4683      	mov	fp, r0
   b9134:	2000      	movs	r0, #0
   b9136:	89e6      	ldrh	r6, [r4, #14]
   b9138:	f004 f8fb 	bl	bd332 <_Z6randomii>
   b913c:	4370      	muls	r0, r6
   b913e:	bf48      	it	mi
   b9140:	30ff      	addmi	r0, #255	; 0xff
   b9142:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b9146:	fa1b f686 	uxtah	r6, fp, r6
   b914a:	f001 fad3 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
   b914e:	1a30      	subs	r0, r6, r0
   b9150:	2800      	cmp	r0, #0
   b9152:	ddc5      	ble.n	b90e0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b9154:	b281      	uxth	r1, r0
   b9156:	2200      	movs	r2, #0
   b9158:	4620      	mov	r0, r4
   b915a:	f7ff fb92 	bl	b8882 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b915e:	2800      	cmp	r0, #0
   b9160:	d0f3      	beq.n	b914a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b9162:	f10d 0317 	add.w	r3, sp, #23
   b9166:	9302      	str	r3, [sp, #8]
   b9168:	f10d 0316 	add.w	r3, sp, #22
   b916c:	9301      	str	r3, [sp, #4]
   b916e:	2200      	movs	r2, #0
   b9170:	f10d 0315 	add.w	r3, sp, #21
   b9174:	9300      	str	r3, [sp, #0]
   b9176:	4611      	mov	r1, r2
   b9178:	ab05      	add	r3, sp, #20
   b917a:	4620      	mov	r0, r4
   b917c:	f7ff fbd2 	bl	b8924 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9180:	2800      	cmp	r0, #0
   b9182:	d0e2      	beq.n	b914a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b9184:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b9188:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b918c:	4542      	cmp	r2, r8
   b918e:	d10e      	bne.n	b91ae <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b9190:	f894 c004 	ldrb.w	ip, [r4, #4]
   b9194:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b9198:	458c      	cmp	ip, r1
   b919a:	d108      	bne.n	b91ae <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b919c:	2b00      	cmp	r3, #0
   b919e:	da08      	bge.n	b91b2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b91a0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b91a4:	42ab      	cmp	r3, r5
   b91a6:	d1d0      	bne.n	b914a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b91a8:	b007      	add	sp, #28
   b91aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b91ae:	2b00      	cmp	r3, #0
   b91b0:	dbcb      	blt.n	b914a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b91b2:	18a1      	adds	r1, r4, r2
   b91b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b91b8:	7c49      	ldrb	r1, [r1, #17]
   b91ba:	4299      	cmp	r1, r3
   b91bc:	d1c5      	bne.n	b914a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b91be:	4620      	mov	r0, r4
   b91c0:	f7ff ff69 	bl	b9096 <_ZN18RHReliableDatagram11acknowledgeEhh>
   b91c4:	e7c1      	b.n	b914a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b91c6:	2000      	movs	r0, #0
   b91c8:	e7ee      	b.n	b91a8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b91ca:	2001      	movs	r0, #1
   b91cc:	e7ec      	b.n	b91a8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	...

000b91d0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b91d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b91d4:	b089      	sub	sp, #36	; 0x24
   b91d6:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b91da:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b91de:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b91e0:	4604      	mov	r4, r0
   b91e2:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b91e4:	f7ff fb45 	bl	b8872 <_ZN10RHDatagram9availableEv>
   b91e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b91ec:	b920      	cbnz	r0, b91f8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b91ee:	2500      	movs	r5, #0
}
   b91f0:	4628      	mov	r0, r5
   b91f2:	b009      	add	sp, #36	; 0x24
   b91f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b91f8:	f10d 031f 	add.w	r3, sp, #31
   b91fc:	9302      	str	r3, [sp, #8]
   b91fe:	f10d 031e 	add.w	r3, sp, #30
   b9202:	9301      	str	r3, [sp, #4]
   b9204:	f10d 031d 	add.w	r3, sp, #29
   b9208:	9300      	str	r3, [sp, #0]
   b920a:	4620      	mov	r0, r4
   b920c:	ab07      	add	r3, sp, #28
   b920e:	f7ff fb89 	bl	b8924 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9212:	4605      	mov	r5, r0
   b9214:	2800      	cmp	r0, #0
   b9216:	d0ea      	beq.n	b91ee <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b9218:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b921c:	2b00      	cmp	r3, #0
   b921e:	dbe6      	blt.n	b91ee <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		Log.info("and from the RHReliableDatagram.cpp file");
   b9220:	4917      	ldr	r1, [pc, #92]	; (b9280 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xb0>)
   b9222:	4818      	ldr	r0, [pc, #96]	; (b9284 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xb4>)
   b9224:	f7fa ff5a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	    if (_to ==_thisAddress)
   b9228:	7922      	ldrb	r2, [r4, #4]
   b922a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b922e:	429a      	cmp	r2, r3
   b9230:	d106      	bne.n	b9240 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x70>
		acknowledge(_id, _from);
   b9232:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b9236:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b923a:	4620      	mov	r0, r4
   b923c:	f7ff ff2b 	bl	b9096 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b9240:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b9244:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b9248:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b924c:	f012 0f40 	tst.w	r2, #64	; 0x40
   b9250:	440c      	add	r4, r1
   b9252:	d002      	beq.n	b925a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   b9254:	7c60      	ldrb	r0, [r4, #17]
   b9256:	4298      	cmp	r0, r3
   b9258:	d0c9      	beq.n	b91ee <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b925a:	b106      	cbz	r6, b925e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8e>
   b925c:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b925e:	f1b9 0f00 	cmp.w	r9, #0
   b9262:	d003      	beq.n	b926c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   b9264:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b9268:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b926c:	f1b8 0f00 	cmp.w	r8, #0
   b9270:	d001      	beq.n	b9276 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa6>
   b9272:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b9276:	b107      	cbz	r7, b927a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xaa>
   b9278:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b927a:	7463      	strb	r3, [r4, #17]
		return true;
   b927c:	e7b8      	b.n	b91f0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>
   b927e:	bf00      	nop
   b9280:	000c032c 	.word	0x000c032c
   b9284:	2003e658 	.word	0x2003e658

000b9288 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b9288:	4770      	bx	lr

000b928a <_ZN8RHRouter4initEv>:
{
   b928a:	b510      	push	{r4, lr}
   b928c:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b928e:	3004      	adds	r0, #4
   b9290:	f7ff fb22 	bl	b88d8 <_ZN10RHDatagram4initEv>
    if (ret)
   b9294:	b110      	cbz	r0, b929c <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b9296:	231e      	movs	r3, #30
   b9298:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b929c:	bd10      	pop	{r4, pc}

000b929e <_ZN8RHRouter10getRouteToEh>:
{
   b929e:	b510      	push	{r4, lr}
   b92a0:	4602      	mov	r2, r0
   b92a2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b92a4:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b92a8:	428c      	cmp	r4, r1
   b92aa:	d108      	bne.n	b92be <_ZN8RHRouter10getRouteToEh+0x20>
   b92ac:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b92b0:	b12c      	cbz	r4, b92be <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b92b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b92b6:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b92ba:	4418      	add	r0, r3
}
   b92bc:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b92be:	3301      	adds	r3, #1
   b92c0:	2b32      	cmp	r3, #50	; 0x32
   b92c2:	f102 0203 	add.w	r2, r2, #3
   b92c6:	d1ed      	bne.n	b92a4 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b92c8:	2000      	movs	r0, #0
   b92ca:	e7f7      	b.n	b92bc <_ZN8RHRouter10getRouteToEh+0x1e>

000b92cc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b92cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b92ce:	780b      	ldrb	r3, [r1, #0]
   b92d0:	2bff      	cmp	r3, #255	; 0xff
{
   b92d2:	4605      	mov	r5, r0
   b92d4:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b92d6:	d006      	beq.n	b92e6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b92d8:	4619      	mov	r1, r3
   b92da:	9201      	str	r2, [sp, #4]
   b92dc:	f7ff ffdf 	bl	b929e <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b92e0:	b158      	cbz	r0, b92fa <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b92e2:	7843      	ldrb	r3, [r0, #1]
   b92e4:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b92e6:	4621      	mov	r1, r4
   b92e8:	1d28      	adds	r0, r5, #4
   b92ea:	f7ff feed 	bl	b90c8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b92ee:	2800      	cmp	r0, #0
   b92f0:	bf14      	ite	ne
   b92f2:	2000      	movne	r0, #0
   b92f4:	2005      	moveq	r0, #5
}
   b92f6:	b003      	add	sp, #12
   b92f8:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b92fa:	2002      	movs	r0, #2
   b92fc:	e7fb      	b.n	b92f6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b92fe <_ZN8RHRouter11deleteRouteEh>:
{
   b92fe:	b510      	push	{r4, lr}
   b9300:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b9304:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b9306:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b930a:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b930e:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b9312:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9316:	4421      	add	r1, r4
   b9318:	4420      	add	r0, r4
   b931a:	f005 fc9f 	bl	bec5c <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b931e:	2300      	movs	r3, #0
   b9320:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b9324:	bd10      	pop	{r4, pc}

000b9326 <_ZN8RHRouter13deleteRouteToEh>:
{
   b9326:	b538      	push	{r3, r4, r5, lr}
   b9328:	460a      	mov	r2, r1
   b932a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b932c:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b9330:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b9334:	b2d9      	uxtb	r1, r3
   b9336:	5d65      	ldrb	r5, [r4, r5]
   b9338:	4295      	cmp	r5, r2
   b933a:	d103      	bne.n	b9344 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b933c:	f7ff ffdf 	bl	b92fe <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b9340:	2001      	movs	r0, #1
}
   b9342:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9344:	3301      	adds	r3, #1
   b9346:	2b32      	cmp	r3, #50	; 0x32
   b9348:	d1f2      	bne.n	b9330 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b934a:	2000      	movs	r0, #0
   b934c:	e7f9      	b.n	b9342 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b934e <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b934e:	2100      	movs	r1, #0
   b9350:	f7ff bfd5 	b.w	b92fe <_ZN8RHRouter11deleteRouteEh>

000b9354 <_ZN8RHRouter10addRouteToEhhh>:
{
   b9354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9356:	4616      	mov	r6, r2
   b9358:	461f      	mov	r7, r3
   b935a:	4604      	mov	r4, r0
   b935c:	460d      	mov	r5, r1
   b935e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b9360:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b9364:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9368:	5c11      	ldrb	r1, [r2, r0]
   b936a:	42a9      	cmp	r1, r5
   b936c:	d105      	bne.n	b937a <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b936e:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b9370:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b9374:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b9378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b937a:	3301      	adds	r3, #1
   b937c:	2b32      	cmp	r3, #50	; 0x32
   b937e:	d1f1      	bne.n	b9364 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b9380:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b9382:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b9386:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b938a:	5c11      	ldrb	r1, [r2, r0]
   b938c:	b919      	cbnz	r1, b9396 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b938e:	4420      	add	r0, r4
   b9390:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b9394:	e7ec      	b.n	b9370 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9396:	3301      	adds	r3, #1
   b9398:	2b32      	cmp	r3, #50	; 0x32
   b939a:	d1f4      	bne.n	b9386 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b939c:	4620      	mov	r0, r4
   b939e:	f7ff ffd6 	bl	b934e <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b93a2:	4620      	mov	r0, r4
   b93a4:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b93a8:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b93ac:	b92a      	cbnz	r2, b93ba <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b93ae:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b93b2:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b93b6:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b93ba:	3003      	adds	r0, #3
   b93bc:	4298      	cmp	r0, r3
   b93be:	d1f3      	bne.n	b93a8 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b93c0:	e7da      	b.n	b9378 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b93c2 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b93c2:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b93c6:	2200      	movs	r2, #0
   b93c8:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b93cc:	3003      	adds	r0, #3
   b93ce:	4298      	cmp	r0, r3
   b93d0:	d1fa      	bne.n	b93c8 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b93d2:	4770      	bx	lr

000b93d4 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b93d4:	b510      	push	{r4, lr}
   b93d6:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b93d8:	3004      	adds	r0, #4
   b93da:	f7ff fe49 	bl	b9070 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b93de:	4b05      	ldr	r3, [pc, #20]	; (b93f4 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b93e0:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b93e2:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b93e6:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b93e8:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b93ec:	f7ff ffe9 	bl	b93c2 <_ZN8RHRouter17clearRoutingTableEv>
}
   b93f0:	4620      	mov	r0, r4
   b93f2:	bd10      	pop	{r4, pc}
   b93f4:	000c0384 	.word	0x000c0384

000b93f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b93f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b93fc:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b93fe:	6840      	ldr	r0, [r0, #4]
{
   b9400:	9101      	str	r1, [sp, #4]
   b9402:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9404:	6803      	ldr	r3, [r0, #0]
{
   b9406:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b940a:	699b      	ldr	r3, [r3, #24]
{
   b940c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b9410:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9412:	4798      	blx	r3
   b9414:	f106 0805 	add.w	r8, r6, #5
   b9418:	4580      	cmp	r8, r0
   b941a:	d81c      	bhi.n	b9456 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b941c:	4d10      	ldr	r5, [pc, #64]	; (b9460 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b941e:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b9420:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b9424:	2300      	movs	r3, #0
   b9426:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b9428:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b942c:	70eb      	strb	r3, [r5, #3]
   b942e:	1c5a      	adds	r2, r3, #1
   b9430:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b9434:	1d68      	adds	r0, r5, #5
   b9436:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b9438:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b943a:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b943e:	f005 fc0d 	bl	bec5c <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9442:	6823      	ldr	r3, [r4, #0]
   b9444:	685b      	ldr	r3, [r3, #4]
   b9446:	fa5f f288 	uxtb.w	r2, r8
   b944a:	4629      	mov	r1, r5
   b944c:	4620      	mov	r0, r4
}
   b944e:	b002      	add	sp, #8
   b9450:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9454:	4718      	bx	r3
}
   b9456:	2001      	movs	r0, #1
   b9458:	b002      	add	sp, #8
   b945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b945e:	bf00      	nop
   b9460:	2003e4ee 	.word	0x2003e4ee

000b9464 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b9464:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b9466:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b946a:	9401      	str	r4, [sp, #4]
   b946c:	7a04      	ldrb	r4, [r0, #8]
   b946e:	9400      	str	r4, [sp, #0]
   b9470:	f7ff ffc2 	bl	b93f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b9474:	b002      	add	sp, #8
   b9476:	bd10      	pop	{r4, pc}

000b9478 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b9478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b947c:	b087      	sub	sp, #28
   b947e:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b9480:	237f      	movs	r3, #127	; 0x7f
   b9482:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9486:	f10d 0317 	add.w	r3, sp, #23
   b948a:	9302      	str	r3, [sp, #8]
   b948c:	4e36      	ldr	r6, [pc, #216]	; (b9568 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xf0>)
   b948e:	f10d 0316 	add.w	r3, sp, #22
   b9492:	9301      	str	r3, [sp, #4]
   b9494:	f10d 0315 	add.w	r3, sp, #21
   b9498:	9300      	str	r3, [sp, #0]
{  
   b949a:	4604      	mov	r4, r0
   b949c:	4689      	mov	r9, r1
   b949e:	4617      	mov	r7, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b94a0:	ab05      	add	r3, sp, #20
   b94a2:	f10d 0213 	add.w	r2, sp, #19
   b94a6:	4631      	mov	r1, r6
   b94a8:	3004      	adds	r0, #4
{  
   b94aa:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b94ae:	f7ff fe8f 	bl	b91d0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b94b2:	4605      	mov	r5, r0
   b94b4:	b908      	cbnz	r0, b94ba <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b94b6:	2500      	movs	r5, #0
   b94b8:	e03e      	b.n	b9538 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xc0>
	Log.info("Saw something in the RHRouter.cpp file");
   b94ba:	492c      	ldr	r1, [pc, #176]	; (b956c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xf4>)
   b94bc:	482c      	ldr	r0, [pc, #176]	; (b9570 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xf8>)
   b94be:	f7fa fe0d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b94c2:	6823      	ldr	r3, [r4, #0]
   b94c4:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b94c8:	681b      	ldr	r3, [r3, #0]
   b94ca:	4631      	mov	r1, r6
   b94cc:	4620      	mov	r0, r4
   b94ce:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b94d0:	7833      	ldrb	r3, [r6, #0]
   b94d2:	7a22      	ldrb	r2, [r4, #8]
   b94d4:	429a      	cmp	r2, r3
   b94d6:	d001      	beq.n	b94dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b94d8:	2bff      	cmp	r3, #255	; 0xff
   b94da:	d131      	bne.n	b9540 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xc8>
	    if (source) *source  = _tmpMessage.header.source;
   b94dc:	f1b8 0f00 	cmp.w	r8, #0
   b94e0:	d003      	beq.n	b94ea <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b94e2:	4b21      	ldr	r3, [pc, #132]	; (b9568 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xf0>)
   b94e4:	785b      	ldrb	r3, [r3, #1]
   b94e6:	f888 3000 	strb.w	r3, [r8]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b94ea:	f1bb 0f00 	cmp.w	fp, #0
   b94ee:	d003      	beq.n	b94f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b94f0:	4b1d      	ldr	r3, [pc, #116]	; (b9568 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xf0>)
   b94f2:	781b      	ldrb	r3, [r3, #0]
   b94f4:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b94f8:	f1ba 0f00 	cmp.w	sl, #0
   b94fc:	d003      	beq.n	b9506 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8e>
   b94fe:	4b1a      	ldr	r3, [pc, #104]	; (b9568 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xf0>)
   b9500:	78db      	ldrb	r3, [r3, #3]
   b9502:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b9506:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b9508:	b11b      	cbz	r3, b9512 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9a>
   b950a:	4b17      	ldr	r3, [pc, #92]	; (b9568 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xf0>)
   b950c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b950e:	791b      	ldrb	r3, [r3, #4]
   b9510:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b9512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9514:	b11b      	cbz	r3, b951e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xa6>
   b9516:	4b14      	ldr	r3, [pc, #80]	; (b9568 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xf0>)
   b9518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b951a:	789b      	ldrb	r3, [r3, #2]
   b951c:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b951e:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b9522:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9524:	4913      	ldr	r1, [pc, #76]	; (b9574 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xfc>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9526:	3b05      	subs	r3, #5
   b9528:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b952a:	429a      	cmp	r2, r3
		*len = msgLen;
   b952c:	bf88      	it	hi
   b952e:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9530:	783a      	ldrb	r2, [r7, #0]
   b9532:	4648      	mov	r0, r9
   b9534:	f005 fb92 	bl	bec5c <memcpy>
}
   b9538:	4628      	mov	r0, r5
   b953a:	b007      	add	sp, #28
   b953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b9540:	78b3      	ldrb	r3, [r6, #2]
   b9542:	1c5a      	adds	r2, r3, #1
   b9544:	70b2      	strb	r2, [r6, #2]
   b9546:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b954a:	429a      	cmp	r2, r3
   b954c:	d9b3      	bls.n	b94b6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x3e>
	    if (_isa_router)
   b954e:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b9552:	2b00      	cmp	r3, #0
   b9554:	d0af      	beq.n	b94b6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x3e>
	        route(&_tmpMessage, tmpMessageLen);
   b9556:	6823      	ldr	r3, [r4, #0]
   b9558:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b955c:	685b      	ldr	r3, [r3, #4]
   b955e:	4631      	mov	r1, r6
   b9560:	4620      	mov	r0, r4
   b9562:	4798      	blx	r3
   b9564:	e7a7      	b.n	b94b6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x3e>
   b9566:	bf00      	nop
   b9568:	2003e4ee 	.word	0x2003e4ee
   b956c:	000c0355 	.word	0x000c0355
   b9570:	2003e658 	.word	0x2003e658
   b9574:	2003e4f3 	.word	0x2003e4f3

000b9578 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b9578:	b510      	push	{r4, lr}
   b957a:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b957c:	6a00      	ldr	r0, [r0, #32]
   b957e:	6803      	ldr	r3, [r0, #0]
   b9580:	68db      	ldr	r3, [r3, #12]
   b9582:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b9584:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b9588:	28ff      	cmp	r0, #255	; 0xff
   b958a:	d002      	beq.n	b9592 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b958c:	2101      	movs	r1, #1
   b958e:	f004 fd47 	bl	be020 <pinMode>

    deselectSlave();
   b9592:	6823      	ldr	r3, [r4, #0]
   b9594:	4620      	mov	r0, r4
   b9596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9598:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b959a:	2064      	movs	r0, #100	; 0x64
   b959c:	f001 fcb6 	bl	baf0c <delay>
#endif
    
    return true;
}
   b95a0:	2001      	movs	r0, #1
   b95a2:	bd10      	pop	{r4, pc}

000b95a4 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b95a4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b95a8:	2100      	movs	r1, #0
   b95aa:	f004 bd4a 	b.w	be042 <digitalWrite>

000b95ae <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b95ae:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b95b2:	2101      	movs	r1, #1
   b95b4:	f004 bd45 	b.w	be042 <digitalWrite>

000b95b8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b95b8:	b570      	push	{r4, r5, r6, lr}
   b95ba:	4604      	mov	r4, r0
   b95bc:	460d      	mov	r5, r1
   b95be:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b95c0:	f7ff fa6c 	bl	b8a9c <_ZN15RHGenericDriverC1Ev>
   b95c4:	4b03      	ldr	r3, [pc, #12]	; (b95d4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b95c6:	6023      	str	r3, [r4, #0]
   b95c8:	6226      	str	r6, [r4, #32]
   b95ca:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b95ce:	4620      	mov	r0, r4
   b95d0:	bd70      	pop	{r4, r5, r6, pc}
   b95d2:	bf00      	nop
   b95d4:	000c0394 	.word	0x000c0394

000b95d8 <_ZN11RHSPIDriver7spiReadEh>:
{
   b95d8:	b538      	push	{r3, r4, r5, lr}
   b95da:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b95dc:	6a00      	ldr	r0, [r0, #32]
   b95de:	6803      	ldr	r3, [r0, #0]
   b95e0:	6a1b      	ldr	r3, [r3, #32]
{
   b95e2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b95e4:	4798      	blx	r3
    selectSlave();
   b95e6:	6823      	ldr	r3, [r4, #0]
   b95e8:	4620      	mov	r0, r4
   b95ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b95ec:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b95ee:	6a20      	ldr	r0, [r4, #32]
   b95f0:	6803      	ldr	r3, [r0, #0]
   b95f2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b95f6:	681b      	ldr	r3, [r3, #0]
   b95f8:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b95fa:	6a20      	ldr	r0, [r4, #32]
   b95fc:	6803      	ldr	r3, [r0, #0]
   b95fe:	2100      	movs	r1, #0
   b9600:	681b      	ldr	r3, [r3, #0]
   b9602:	4798      	blx	r3
    deselectSlave();
   b9604:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9606:	4605      	mov	r5, r0
    deselectSlave();
   b9608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b960a:	4620      	mov	r0, r4
   b960c:	4798      	blx	r3
    _spi.endTransaction();
   b960e:	6a20      	ldr	r0, [r4, #32]
   b9610:	6803      	ldr	r3, [r0, #0]
   b9612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9614:	4798      	blx	r3
}
   b9616:	4628      	mov	r0, r5
   b9618:	bd38      	pop	{r3, r4, r5, pc}

000b961a <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b961a:	b570      	push	{r4, r5, r6, lr}
   b961c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b961e:	6a00      	ldr	r0, [r0, #32]
   b9620:	6803      	ldr	r3, [r0, #0]
   b9622:	6a1b      	ldr	r3, [r3, #32]
{
   b9624:	4616      	mov	r6, r2
   b9626:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b9628:	4798      	blx	r3
    selectSlave();
   b962a:	6823      	ldr	r3, [r4, #0]
   b962c:	4620      	mov	r0, r4
   b962e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9630:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b9632:	6a20      	ldr	r0, [r4, #32]
   b9634:	6803      	ldr	r3, [r0, #0]
   b9636:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b963a:	681b      	ldr	r3, [r3, #0]
   b963c:	4798      	blx	r3
   b963e:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b9640:	6a20      	ldr	r0, [r4, #32]
   b9642:	6803      	ldr	r3, [r0, #0]
   b9644:	4631      	mov	r1, r6
   b9646:	681b      	ldr	r3, [r3, #0]
   b9648:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b964a:	2001      	movs	r0, #1
   b964c:	f001 f84a 	bl	ba6e4 <HAL_Delay_Microseconds>
    deselectSlave();
   b9650:	6823      	ldr	r3, [r4, #0]
   b9652:	4620      	mov	r0, r4
   b9654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9656:	4798      	blx	r3
    _spi.endTransaction();
   b9658:	6a20      	ldr	r0, [r4, #32]
   b965a:	6803      	ldr	r3, [r0, #0]
   b965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b965e:	4798      	blx	r3
}
   b9660:	4628      	mov	r0, r5
   b9662:	bd70      	pop	{r4, r5, r6, pc}

000b9664 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b9664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9666:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9668:	6a00      	ldr	r0, [r0, #32]
{
   b966a:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b966c:	6803      	ldr	r3, [r0, #0]
   b966e:	6a1b      	ldr	r3, [r3, #32]
{
   b9670:	460f      	mov	r7, r1
   b9672:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9674:	4798      	blx	r3
    selectSlave();
   b9676:	6823      	ldr	r3, [r4, #0]
   b9678:	4620      	mov	r0, r4
   b967a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b967c:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b967e:	6a20      	ldr	r0, [r4, #32]
   b9680:	6803      	ldr	r3, [r0, #0]
   b9682:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b9686:	681b      	ldr	r3, [r3, #0]
   b9688:	4798      	blx	r3
   b968a:	442e      	add	r6, r5
   b968c:	4607      	mov	r7, r0
    while (len--)
   b968e:	42b5      	cmp	r5, r6
   b9690:	d007      	beq.n	b96a2 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b9692:	6a20      	ldr	r0, [r4, #32]
   b9694:	6803      	ldr	r3, [r0, #0]
   b9696:	2100      	movs	r1, #0
   b9698:	681b      	ldr	r3, [r3, #0]
   b969a:	4798      	blx	r3
   b969c:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b96a0:	e7f5      	b.n	b968e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b96a2:	6823      	ldr	r3, [r4, #0]
   b96a4:	4620      	mov	r0, r4
   b96a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b96a8:	4798      	blx	r3
    _spi.endTransaction();
   b96aa:	6a20      	ldr	r0, [r4, #32]
   b96ac:	6803      	ldr	r3, [r0, #0]
   b96ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b96b0:	4798      	blx	r3
}
   b96b2:	4638      	mov	r0, r7
   b96b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b96b6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b96b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b96b8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b96ba:	6a00      	ldr	r0, [r0, #32]
{
   b96bc:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b96be:	6803      	ldr	r3, [r0, #0]
   b96c0:	6a1b      	ldr	r3, [r3, #32]
{
   b96c2:	460f      	mov	r7, r1
   b96c4:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b96c6:	4798      	blx	r3
    selectSlave();
   b96c8:	6823      	ldr	r3, [r4, #0]
   b96ca:	4620      	mov	r0, r4
   b96cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b96ce:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b96d0:	6a20      	ldr	r0, [r4, #32]
   b96d2:	6803      	ldr	r3, [r0, #0]
   b96d4:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b96d8:	681b      	ldr	r3, [r3, #0]
   b96da:	4798      	blx	r3
   b96dc:	442e      	add	r6, r5
   b96de:	4607      	mov	r7, r0
    while (len--)
   b96e0:	42b5      	cmp	r5, r6
   b96e2:	d006      	beq.n	b96f2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b96e4:	6a20      	ldr	r0, [r4, #32]
   b96e6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b96ea:	6803      	ldr	r3, [r0, #0]
   b96ec:	681b      	ldr	r3, [r3, #0]
   b96ee:	4798      	blx	r3
    while (len--)
   b96f0:	e7f6      	b.n	b96e0 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b96f2:	6823      	ldr	r3, [r4, #0]
   b96f4:	4620      	mov	r0, r4
   b96f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b96f8:	4798      	blx	r3
    _spi.endTransaction();
   b96fa:	6a20      	ldr	r0, [r4, #32]
   b96fc:	6803      	ldr	r3, [r0, #0]
   b96fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9700:	4798      	blx	r3
}
   b9702:	4638      	mov	r0, r7
   b9704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9706 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b9706:	6a00      	ldr	r0, [r0, #32]
   b9708:	6803      	ldr	r3, [r0, #0]
   b970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b970c:	4718      	bx	r3

000b970e <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b970e:	2001      	movs	r0, #1
   b9710:	4770      	bx	lr

000b9712 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b9712:	20fb      	movs	r0, #251	; 0xfb
   b9714:	4770      	bx	lr

000b9716 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b9716:	4770      	bx	lr

000b9718 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b9718:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b971a:	7903      	ldrb	r3, [r0, #4]
   b971c:	2b05      	cmp	r3, #5
{
   b971e:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b9720:	d010      	beq.n	b9744 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b9722:	6803      	ldr	r3, [r0, #0]
   b9724:	2105      	movs	r1, #5
   b9726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b972a:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b972c:	2207      	movs	r2, #7
   b972e:	2101      	movs	r1, #1
   b9730:	4620      	mov	r0, r4
   b9732:	f7ff ff72 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b9736:	2280      	movs	r2, #128	; 0x80
   b9738:	2140      	movs	r1, #64	; 0x40
   b973a:	4620      	mov	r0, r4
   b973c:	f7ff ff6d 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b9740:	2305      	movs	r3, #5
   b9742:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b9744:	7923      	ldrb	r3, [r4, #4]
   b9746:	2b05      	cmp	r3, #5
   b9748:	d0fc      	beq.n	b9744 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b974a:	7e20      	ldrb	r0, [r4, #24]
}
   b974c:	bd10      	pop	{r4, pc}

000b974e <_ZN7RH_RF95D0Ev>:
   b974e:	b510      	push	{r4, lr}
   b9750:	f44f 7198 	mov.w	r1, #304	; 0x130
   b9754:	4604      	mov	r4, r0
   b9756:	f7fa fca2 	bl	b409e <_ZdlPvj>
   b975a:	4620      	mov	r0, r4
   b975c:	bd10      	pop	{r4, pc}

000b975e <_ZN7RH_RF955sleepEv>:
{
   b975e:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b9760:	7903      	ldrb	r3, [r0, #4]
   b9762:	2b01      	cmp	r3, #1
{
   b9764:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b9766:	d00b      	beq.n	b9780 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b9768:	6803      	ldr	r3, [r0, #0]
   b976a:	2101      	movs	r1, #1
   b976c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9770:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b9772:	2200      	movs	r2, #0
   b9774:	2101      	movs	r1, #1
   b9776:	4620      	mov	r0, r4
   b9778:	f7ff ff4f 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b977c:	2301      	movs	r3, #1
   b977e:	7123      	strb	r3, [r4, #4]
}
   b9780:	2001      	movs	r0, #1
   b9782:	bd10      	pop	{r4, pc}

000b9784 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b9784:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b9786:	b538      	push	{r3, r4, r5, lr}
   b9788:	4605      	mov	r5, r0
   b978a:	460c      	mov	r4, r1
	if (power > 20)
   b978c:	dc14      	bgt.n	b97b8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b978e:	2901      	cmp	r1, #1
   b9790:	dd14      	ble.n	b97bc <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b9792:	2911      	cmp	r1, #17
   b9794:	dd13      	ble.n	b97be <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b9796:	2207      	movs	r2, #7
   b9798:	214d      	movs	r1, #77	; 0x4d
   b979a:	4628      	mov	r0, r5
   b979c:	f7ff ff3d 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b97a0:	3c03      	subs	r4, #3
   b97a2:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b97a4:	1ea2      	subs	r2, r4, #2
   b97a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b97aa:	4628      	mov	r0, r5
   b97ac:	b2d2      	uxtb	r2, r2
}
   b97ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b97b2:	2109      	movs	r1, #9
   b97b4:	f7ff bf31 	b.w	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b97b8:	2414      	movs	r4, #20
   b97ba:	e7ec      	b.n	b9796 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b97bc:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b97be:	2204      	movs	r2, #4
   b97c0:	214d      	movs	r1, #77	; 0x4d
   b97c2:	4628      	mov	r0, r5
   b97c4:	f7ff ff29 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
   b97c8:	e7ec      	b.n	b97a4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b97cc <_ZN7RH_RF954recvEPhS0_>:
{
   b97cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b97ce:	6803      	ldr	r3, [r0, #0]
   b97d0:	68db      	ldr	r3, [r3, #12]
{
   b97d2:	4604      	mov	r4, r0
   b97d4:	460f      	mov	r7, r1
   b97d6:	4615      	mov	r5, r2
    if (!available())
   b97d8:	4798      	blx	r3
   b97da:	4606      	mov	r6, r0
   b97dc:	b1d0      	cbz	r0, b9814 <_ZN7RH_RF954recvEPhS0_+0x48>
    if (buf && len)
   b97de:	b187      	cbz	r7, b9802 <_ZN7RH_RF954recvEPhS0_+0x36>
   b97e0:	b17d      	cbz	r5, b9802 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b97e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b97e6:	782a      	ldrb	r2, [r5, #0]
   b97e8:	3b03      	subs	r3, #3
   b97ea:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b97ec:	bfde      	ittt	le
   b97ee:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b97f2:	3b04      	suble	r3, #4
   b97f4:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b97f6:	782a      	ldrb	r2, [r5, #0]
   b97f8:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b97fc:	4638      	mov	r0, r7
   b97fe:	f005 fa2d 	bl	bec5c <memcpy>
    _rxBufValid = false;
   b9802:	2300      	movs	r3, #0
   b9804:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    Log.info("Received something in the RH_RF95.cpp file");
   b9808:	4903      	ldr	r1, [pc, #12]	; (b9818 <_ZN7RH_RF954recvEPhS0_+0x4c>)
   b980a:	4804      	ldr	r0, [pc, #16]	; (b981c <_ZN7RH_RF954recvEPhS0_+0x50>)
    _bufLen = 0;
   b980c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    Log.info("Received something in the RH_RF95.cpp file");
   b9810:	f7fa fc64 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
}
   b9814:	4630      	mov	r0, r6
   b9816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9818:	000c0414 	.word	0x000c0414
   b981c:	2003e658 	.word	0x2003e658

000b9820 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b9820:	b538      	push	{r3, r4, r5, lr}
   b9822:	4604      	mov	r4, r0
   b9824:	4615      	mov	r5, r2
    _rxBufValid(0)
   b9826:	461a      	mov	r2, r3
   b9828:	f7ff fec6 	bl	b95b8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b982c:	4b09      	ldr	r3, [pc, #36]	; (b9854 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b982e:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b9830:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b9832:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b9834:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b9838:	2201      	movs	r2, #1
    _rxBufValid(0)
   b983a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b983e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b9842:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b9846:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b984a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b984e:	4620      	mov	r0, r4
   b9850:	bd38      	pop	{r3, r4, r5, pc}
   b9852:	bf00      	nop
   b9854:	000c0458 	.word	0x000c0458

000b9858 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b9858:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b985c:	2b03      	cmp	r3, #3
   b985e:	d91b      	bls.n	b9898 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b9860:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b9864:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b9866:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b986a:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b986c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b9870:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b9872:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b9876:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b9878:	7983      	ldrb	r3, [r0, #6]
   b987a:	b933      	cbnz	r3, b988a <_ZN7RH_RF9513validateRxBufEv+0x32>
   b987c:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b987e:	7942      	ldrb	r2, [r0, #5]
   b9880:	429a      	cmp	r2, r3
   b9882:	d002      	beq.n	b988a <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b9884:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b9886:	2bff      	cmp	r3, #255	; 0xff
   b9888:	d106      	bne.n	b9898 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b988a:	8a83      	ldrh	r3, [r0, #20]
   b988c:	3301      	adds	r3, #1
   b988e:	b29b      	uxth	r3, r3
   b9890:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b9892:	2301      	movs	r3, #1
   b9894:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b9898:	4770      	bx	lr
   b989a:	0000      	movs	r0, r0
   b989c:	0000      	movs	r0, r0
	...

000b98a0 <_ZN7RH_RF9512setFrequencyEf>:
{
   b98a0:	b538      	push	{r3, r4, r5, lr}
   b98a2:	4604      	mov	r4, r0
   b98a4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b98a8:	ee10 0a10 	vmov	r0, s0
{
   b98ac:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b98b0:	f004 fe32 	bl	be518 <__aeabi_f2d>
   b98b4:	a317      	add	r3, pc, #92	; (adr r3, b9914 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b98b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b98ba:	f004 fe85 	bl	be5c8 <__aeabi_dmul>
   b98be:	a317      	add	r3, pc, #92	; (adr r3, b991c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b98c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b98c4:	f004 ffaa 	bl	be81c <__aeabi_ddiv>
   b98c8:	f005 f956 	bl	beb78 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b98cc:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b98ce:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b98d0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b98d4:	4620      	mov	r0, r4
   b98d6:	f7ff fea0 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b98da:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b98de:	2107      	movs	r1, #7
   b98e0:	4620      	mov	r0, r4
   b98e2:	f7ff fe9a 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b98e6:	b2ea      	uxtb	r2, r5
   b98e8:	2108      	movs	r1, #8
   b98ea:	4620      	mov	r0, r4
   b98ec:	f7ff fe95 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b98f0:	eddf 7a07 	vldr	s15, [pc, #28]	; b9910 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b98f4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b98f8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b98fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9900:	bfac      	ite	ge
   b9902:	2301      	movge	r3, #1
   b9904:	2300      	movlt	r3, #0
}
   b9906:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b9908:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b990c:	bd38      	pop	{r3, r4, r5, pc}
   b990e:	bf00      	nop
   b9910:	4442c000 	.word	0x4442c000
   b9914:	00000000 	.word	0x00000000
   b9918:	412e8480 	.word	0x412e8480
   b991c:	00000000 	.word	0x00000000
   b9920:	404e8480 	.word	0x404e8480

000b9924 <_ZN7RH_RF9511setModeIdleEv>:
{
   b9924:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b9926:	7903      	ldrb	r3, [r0, #4]
   b9928:	2b02      	cmp	r3, #2
{
   b992a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b992c:	d00b      	beq.n	b9946 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b992e:	6803      	ldr	r3, [r0, #0]
   b9930:	2102      	movs	r1, #2
   b9932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9936:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b9938:	2201      	movs	r2, #1
   b993a:	4611      	mov	r1, r2
   b993c:	4620      	mov	r0, r4
   b993e:	f7ff fe6c 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b9942:	2302      	movs	r3, #2
   b9944:	7123      	strb	r3, [r4, #4]
}
   b9946:	bd10      	pop	{r4, pc}

000b9948 <_ZN7RH_RF9515handleInterruptEv>:
{
   b9948:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b994a:	2112      	movs	r1, #18
{
   b994c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b994e:	f7ff fe43 	bl	b95d8 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9952:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b9954:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9956:	4620      	mov	r0, r4
   b9958:	f7ff fe3e 	bl	b95d8 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b995c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b995e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9960:	2112      	movs	r1, #18
   b9962:	4620      	mov	r0, r4
   b9964:	f7ff fe59 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b9968:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b996a:	2b04      	cmp	r3, #4
   b996c:	d107      	bne.n	b997e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b996e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b9972:	d117      	bne.n	b99a4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b9974:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b9978:	b10b      	cbz	r3, b997e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b997a:	0670      	lsls	r0, r6, #25
   b997c:	d512      	bpl.n	b99a4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b997e:	7923      	ldrb	r3, [r4, #4]
   b9980:	2b04      	cmp	r3, #4
   b9982:	d101      	bne.n	b9988 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b9984:	0669      	lsls	r1, r5, #25
   b9986:	d422      	bmi.n	b99ce <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b9988:	7923      	ldrb	r3, [r4, #4]
   b998a:	2b03      	cmp	r3, #3
   b998c:	d101      	bne.n	b9992 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b998e:	072a      	lsls	r2, r5, #28
   b9990:	d468      	bmi.n	b9a64 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b9992:	7923      	ldrb	r3, [r4, #4]
   b9994:	2b05      	cmp	r3, #5
   b9996:	d10e      	bne.n	b99b6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b9998:	076b      	lsls	r3, r5, #29
   b999a:	d50c      	bpl.n	b99b6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b999c:	f005 0501 	and.w	r5, r5, #1
   b99a0:	7625      	strb	r5, [r4, #24]
   b99a2:	e063      	b.n	b9a6c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b99a4:	8a63      	ldrh	r3, [r4, #18]
   b99a6:	3301      	adds	r3, #1
   b99a8:	b29b      	uxth	r3, r3
   b99aa:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b99ac:	2300      	movs	r3, #0
   b99ae:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b99b2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b99b6:	22ff      	movs	r2, #255	; 0xff
   b99b8:	2112      	movs	r1, #18
   b99ba:	4620      	mov	r0, r4
   b99bc:	f7ff fe2d 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b99c0:	4620      	mov	r0, r4
   b99c2:	22ff      	movs	r2, #255	; 0xff
}
   b99c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b99c8:	2112      	movs	r1, #18
   b99ca:	f7ff be26 	b.w	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b99ce:	2113      	movs	r1, #19
   b99d0:	4620      	mov	r0, r4
   b99d2:	f7ff fe01 	bl	b95d8 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b99d6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b99d8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b99da:	4620      	mov	r0, r4
   b99dc:	f7ff fdfc 	bl	b95d8 <_ZN11RHSPIDriver7spiReadEh>
   b99e0:	210d      	movs	r1, #13
   b99e2:	4602      	mov	r2, r0
   b99e4:	4620      	mov	r0, r4
   b99e6:	f7ff fe18 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b99ea:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b99ee:	462b      	mov	r3, r5
   b99f0:	2100      	movs	r1, #0
   b99f2:	4620      	mov	r0, r4
   b99f4:	f7ff fe36 	bl	b9664 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b99f8:	2119      	movs	r1, #25
	_bufLen = len;
   b99fa:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b99fe:	4620      	mov	r0, r4
   b9a00:	f7ff fdea 	bl	b95d8 <_ZN11RHSPIDriver7spiReadEh>
   b9a04:	b240      	sxtb	r0, r0
   b9a06:	2800      	cmp	r0, #0
   b9a08:	bfb8      	it	lt
   b9a0a:	3003      	addlt	r0, #3
   b9a0c:	1080      	asrs	r0, r0, #2
   b9a0e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b9a12:	211a      	movs	r1, #26
   b9a14:	4620      	mov	r0, r4
   b9a16:	f7ff fddf 	bl	b95d8 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b9a1a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b9a1e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b9a20:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b9a22:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b9a24:	bfa9      	itett	ge
   b9a26:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b9a28:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b9a2a:	b21b      	sxthge	r3, r3
   b9a2c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b9a2e:	bfb2      	itee	lt
   b9a30:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b9a32:	220f      	movge	r2, #15
   b9a34:	fb93 f3f2 	sdivge	r3, r3, r2
   b9a38:	b21b      	sxth	r3, r3
   b9a3a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b9a3c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b9a40:	b16b      	cbz	r3, b9a5e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b9a42:	8a23      	ldrh	r3, [r4, #16]
   b9a44:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b9a46:	b21b      	sxth	r3, r3
   b9a48:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b9a4a:	4620      	mov	r0, r4
   b9a4c:	f7ff ff04 	bl	b9858 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b9a50:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b9a54:	2b00      	cmp	r3, #0
   b9a56:	d0ae      	beq.n	b99b6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b9a58:	f7ff ff64 	bl	b9924 <_ZN7RH_RF9511setModeIdleEv>
   b9a5c:	e7ab      	b.n	b99b6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b9a5e:	8a23      	ldrh	r3, [r4, #16]
   b9a60:	3ba4      	subs	r3, #164	; 0xa4
   b9a62:	e7f0      	b.n	b9a46 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b9a64:	8ae3      	ldrh	r3, [r4, #22]
   b9a66:	3301      	adds	r3, #1
   b9a68:	b29b      	uxth	r3, r3
   b9a6a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b9a6c:	4620      	mov	r0, r4
   b9a6e:	e7f3      	b.n	b9a58 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b9a70 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b9a70:	4b02      	ldr	r3, [pc, #8]	; (b9a7c <_ZN7RH_RF954isr0Ev+0xc>)
   b9a72:	6818      	ldr	r0, [r3, #0]
   b9a74:	b108      	cbz	r0, b9a7a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b9a76:	f7ff bf67 	b.w	b9948 <_ZN7RH_RF9515handleInterruptEv>
}
   b9a7a:	4770      	bx	lr
   b9a7c:	2003e570 	.word	0x2003e570

000b9a80 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b9a80:	4b02      	ldr	r3, [pc, #8]	; (b9a8c <_ZN7RH_RF954isr1Ev+0xc>)
   b9a82:	6858      	ldr	r0, [r3, #4]
   b9a84:	b108      	cbz	r0, b9a8a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b9a86:	f7ff bf5f 	b.w	b9948 <_ZN7RH_RF9515handleInterruptEv>
}
   b9a8a:	4770      	bx	lr
   b9a8c:	2003e570 	.word	0x2003e570

000b9a90 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b9a90:	4b02      	ldr	r3, [pc, #8]	; (b9a9c <_ZN7RH_RF954isr2Ev+0xc>)
   b9a92:	6898      	ldr	r0, [r3, #8]
   b9a94:	b108      	cbz	r0, b9a9a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b9a96:	f7ff bf57 	b.w	b9948 <_ZN7RH_RF9515handleInterruptEv>
}
   b9a9a:	4770      	bx	lr
   b9a9c:	2003e570 	.word	0x2003e570

000b9aa0 <_ZN7RH_RF959setModeRxEv>:
{
   b9aa0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b9aa2:	7903      	ldrb	r3, [r0, #4]
   b9aa4:	2b04      	cmp	r3, #4
{
   b9aa6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b9aa8:	d010      	beq.n	b9acc <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b9aaa:	6803      	ldr	r3, [r0, #0]
   b9aac:	2104      	movs	r1, #4
   b9aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9ab2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b9ab4:	2205      	movs	r2, #5
   b9ab6:	2101      	movs	r1, #1
   b9ab8:	4620      	mov	r0, r4
   b9aba:	f7ff fdae 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b9abe:	2200      	movs	r2, #0
   b9ac0:	2140      	movs	r1, #64	; 0x40
   b9ac2:	4620      	mov	r0, r4
   b9ac4:	f7ff fda9 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b9ac8:	2304      	movs	r3, #4
   b9aca:	7123      	strb	r3, [r4, #4]
}
   b9acc:	bd10      	pop	{r4, pc}

000b9ace <_ZN7RH_RF959availableEv>:
{
   b9ace:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b9ad0:	7903      	ldrb	r3, [r0, #4]
   b9ad2:	2b03      	cmp	r3, #3
{
   b9ad4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b9ad6:	d005      	beq.n	b9ae4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b9ad8:	f7ff ffe2 	bl	b9aa0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b9adc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b9ae0:	b2c0      	uxtb	r0, r0
}
   b9ae2:	bd10      	pop	{r4, pc}
	return false;
   b9ae4:	2000      	movs	r0, #0
   b9ae6:	e7fc      	b.n	b9ae2 <_ZN7RH_RF959availableEv+0x14>

000b9ae8 <_ZN7RH_RF959setModeTxEv>:
{
   b9ae8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b9aea:	7903      	ldrb	r3, [r0, #4]
   b9aec:	2b03      	cmp	r3, #3
{
   b9aee:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b9af0:	d010      	beq.n	b9b14 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b9af2:	6803      	ldr	r3, [r0, #0]
   b9af4:	2103      	movs	r1, #3
   b9af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9afa:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b9afc:	2203      	movs	r2, #3
   b9afe:	2101      	movs	r1, #1
   b9b00:	4620      	mov	r0, r4
   b9b02:	f7ff fd8a 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b9b06:	2240      	movs	r2, #64	; 0x40
   b9b08:	4611      	mov	r1, r2
   b9b0a:	4620      	mov	r0, r4
   b9b0c:	f7ff fd85 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b9b10:	2303      	movs	r3, #3
   b9b12:	7123      	strb	r3, [r4, #4]
}
   b9b14:	bd10      	pop	{r4, pc}

000b9b16 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b9b16:	2afb      	cmp	r2, #251	; 0xfb
{
   b9b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9b1a:	4604      	mov	r4, r0
   b9b1c:	460f      	mov	r7, r1
   b9b1e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b9b20:	d902      	bls.n	b9b28 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b9b22:	2600      	movs	r6, #0
}
   b9b24:	4630      	mov	r0, r6
   b9b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b9b28:	6803      	ldr	r3, [r0, #0]
   b9b2a:	6a1b      	ldr	r3, [r3, #32]
   b9b2c:	4798      	blx	r3
    setModeIdle();
   b9b2e:	4620      	mov	r0, r4
   b9b30:	f7ff fef8 	bl	b9924 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b9b34:	6823      	ldr	r3, [r4, #0]
   b9b36:	4620      	mov	r0, r4
   b9b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9b3a:	4798      	blx	r3
   b9b3c:	4606      	mov	r6, r0
   b9b3e:	2800      	cmp	r0, #0
   b9b40:	d0ef      	beq.n	b9b22 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b9b42:	2200      	movs	r2, #0
   b9b44:	210d      	movs	r1, #13
   b9b46:	4620      	mov	r0, r4
   b9b48:	f7ff fd67 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b9b4c:	7ae2      	ldrb	r2, [r4, #11]
   b9b4e:	2100      	movs	r1, #0
   b9b50:	4620      	mov	r0, r4
   b9b52:	f7ff fd62 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b9b56:	7b22      	ldrb	r2, [r4, #12]
   b9b58:	2100      	movs	r1, #0
   b9b5a:	4620      	mov	r0, r4
   b9b5c:	f7ff fd5d 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b9b60:	7b62      	ldrb	r2, [r4, #13]
   b9b62:	2100      	movs	r1, #0
   b9b64:	4620      	mov	r0, r4
   b9b66:	f7ff fd58 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b9b6a:	7ba2      	ldrb	r2, [r4, #14]
   b9b6c:	2100      	movs	r1, #0
   b9b6e:	4620      	mov	r0, r4
   b9b70:	f7ff fd53 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b9b74:	462b      	mov	r3, r5
   b9b76:	463a      	mov	r2, r7
   b9b78:	2100      	movs	r1, #0
   b9b7a:	4620      	mov	r0, r4
   b9b7c:	f7ff fd9b 	bl	b96b6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b9b80:	1d2a      	adds	r2, r5, #4
   b9b82:	b2d2      	uxtb	r2, r2
   b9b84:	2122      	movs	r1, #34	; 0x22
   b9b86:	4620      	mov	r0, r4
   b9b88:	f7ff fd47 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b9b8c:	4620      	mov	r0, r4
   b9b8e:	f7ff ffab 	bl	b9ae8 <_ZN7RH_RF959setModeTxEv>
    return true;
   b9b92:	e7c7      	b.n	b9b24 <_ZN7RH_RF954sendEPKhh+0xe>

000b9b94 <_ZN7RH_RF9510setTxPowerEab>:
{
   b9b94:	b510      	push	{r4, lr}
   b9b96:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b9b98:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b9b9c:	b172      	cbz	r2, b9bbc <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b9b9e:	f381 0204 	usat	r2, #4, r1
   b9ba2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b9ba6:	b2d2      	uxtb	r2, r2
   b9ba8:	2109      	movs	r1, #9
   b9baa:	f7ff fd36 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9bae:	4620      	mov	r0, r4
   b9bb0:	2204      	movs	r2, #4
}
   b9bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9bb6:	214d      	movs	r1, #77	; 0x4d
   b9bb8:	f7ff bd2f 	b.w	b961a <_ZN11RHSPIDriver8spiWriteEhh>
}
   b9bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9bc0:	f7ff bde0 	b.w	b9784 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b9bc4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b9bc4:	b538      	push	{r3, r4, r5, lr}
   b9bc6:	460c      	mov	r4, r1
   b9bc8:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b9bca:	780a      	ldrb	r2, [r1, #0]
   b9bcc:	211d      	movs	r1, #29
   b9bce:	f7ff fd24 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b9bd2:	7862      	ldrb	r2, [r4, #1]
   b9bd4:	211e      	movs	r1, #30
   b9bd6:	4628      	mov	r0, r5
   b9bd8:	f7ff fd1f 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b9bdc:	78a2      	ldrb	r2, [r4, #2]
   b9bde:	4628      	mov	r0, r5
   b9be0:	2126      	movs	r1, #38	; 0x26
}
   b9be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b9be6:	f7ff bd18 	b.w	b961a <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b9bec <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b9bec:	2905      	cmp	r1, #5
{
   b9bee:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b9bf0:	d80f      	bhi.n	b9c12 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b9bf2:	4b09      	ldr	r3, [pc, #36]	; (b9c18 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b9bf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b9bf8:	185c      	adds	r4, r3, r1
   b9bfa:	5a5a      	ldrh	r2, [r3, r1]
   b9bfc:	78a3      	ldrb	r3, [r4, #2]
   b9bfe:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b9c02:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b9c04:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b9c08:	f7ff ffdc 	bl	b9bc4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b9c0c:	2001      	movs	r0, #1
}
   b9c0e:	b002      	add	sp, #8
   b9c10:	bd10      	pop	{r4, pc}
        return false;
   b9c12:	2000      	movs	r0, #0
   b9c14:	e7fb      	b.n	b9c0e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b9c16:	bf00      	nop
   b9c18:	000c043f 	.word	0x000c043f

000b9c1c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b9c1c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b9c1e:	0a0a      	lsrs	r2, r1, #8
{
   b9c20:	4605      	mov	r5, r0
   b9c22:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b9c24:	2120      	movs	r1, #32
   b9c26:	f7ff fcf8 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b9c2a:	b2e2      	uxtb	r2, r4
   b9c2c:	4628      	mov	r0, r5
   b9c2e:	2121      	movs	r1, #33	; 0x21
}
   b9c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b9c34:	f7ff bcf1 	b.w	b961a <_ZN11RHSPIDriver8spiWriteEhh>

000b9c38 <_ZN7RH_RF954initEv>:
{
   b9c38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9c3a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b9c3c:	f7ff fc9c 	bl	b9578 <_ZN11RHSPIDriver4initEv>
   b9c40:	4606      	mov	r6, r0
   b9c42:	b918      	cbnz	r0, b9c4c <_ZN7RH_RF954initEv+0x14>
	return false;
   b9c44:	2600      	movs	r6, #0
}
   b9c46:	4630      	mov	r0, r6
   b9c48:	b002      	add	sp, #8
   b9c4a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b9c4c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b9c50:	2dff      	cmp	r5, #255	; 0xff
   b9c52:	d054      	beq.n	b9cfe <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b9c54:	4629      	mov	r1, r5
   b9c56:	4620      	mov	r0, r4
   b9c58:	f7ff fd55 	bl	b9706 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b9c5c:	2280      	movs	r2, #128	; 0x80
   b9c5e:	2101      	movs	r1, #1
   b9c60:	4620      	mov	r0, r4
   b9c62:	f7ff fcda 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b9c66:	200a      	movs	r0, #10
   b9c68:	f001 f950 	bl	baf0c <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b9c6c:	2101      	movs	r1, #1
   b9c6e:	4620      	mov	r0, r4
   b9c70:	f7ff fcb2 	bl	b95d8 <_ZN11RHSPIDriver7spiReadEh>
   b9c74:	2880      	cmp	r0, #128	; 0x80
   b9c76:	d1e5      	bne.n	b9c44 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b9c78:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b9c7c:	28ff      	cmp	r0, #255	; 0xff
   b9c7e:	d01c      	beq.n	b9cba <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b9c80:	2100      	movs	r1, #0
   b9c82:	f004 f9cd 	bl	be020 <pinMode>
	if (_myInterruptIndex == 0xff)
   b9c86:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b9c8a:	2bff      	cmp	r3, #255	; 0xff
   b9c8c:	d107      	bne.n	b9c9e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b9c8e:	4a26      	ldr	r2, [pc, #152]	; (b9d28 <_ZN7RH_RF954initEv+0xf0>)
   b9c90:	7813      	ldrb	r3, [r2, #0]
   b9c92:	2b03      	cmp	r3, #3
   b9c94:	d8d6      	bhi.n	b9c44 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b9c96:	1c59      	adds	r1, r3, #1
   b9c98:	7011      	strb	r1, [r2, #0]
   b9c9a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b9c9e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b9ca2:	4b22      	ldr	r3, [pc, #136]	; (b9d2c <_ZN7RH_RF954initEv+0xf4>)
   b9ca4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b9ca8:	bb62      	cbnz	r2, b9d04 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b9caa:	4921      	ldr	r1, [pc, #132]	; (b9d30 <_ZN7RH_RF954initEv+0xf8>)
   b9cac:	9200      	str	r2, [sp, #0]
   b9cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9cb2:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b9cb4:	b2a8      	uxth	r0, r5
   b9cb6:	f001 fe9f 	bl	bb9f8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b9cba:	2200      	movs	r2, #0
   b9cbc:	210e      	movs	r1, #14
   b9cbe:	4620      	mov	r0, r4
   b9cc0:	f7ff fcab 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b9cc4:	2200      	movs	r2, #0
   b9cc6:	210f      	movs	r1, #15
   b9cc8:	4620      	mov	r0, r4
   b9cca:	f7ff fca6 	bl	b961a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b9cce:	4620      	mov	r0, r4
   b9cd0:	f7ff fe28 	bl	b9924 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b9cd4:	2100      	movs	r1, #0
   b9cd6:	4620      	mov	r0, r4
   b9cd8:	f7ff ff88 	bl	b9bec <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b9cdc:	2108      	movs	r1, #8
   b9cde:	4620      	mov	r0, r4
   b9ce0:	f7ff ff9c 	bl	b9c1c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b9ce4:	ed9f 0a13 	vldr	s0, [pc, #76]	; b9d34 <_ZN7RH_RF954initEv+0xfc>
   b9ce8:	4620      	mov	r0, r4
   b9cea:	f7ff fdd9 	bl	b98a0 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b9cee:	2300      	movs	r3, #0
   b9cf0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b9cf4:	210d      	movs	r1, #13
   b9cf6:	4620      	mov	r0, r4
   b9cf8:	f7ff fd44 	bl	b9784 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b9cfc:	e7a3      	b.n	b9c46 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b9cfe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b9d02:	e7ab      	b.n	b9c5c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b9d04:	2a01      	cmp	r2, #1
   b9d06:	f04f 0300 	mov.w	r3, #0
   b9d0a:	d104      	bne.n	b9d16 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b9d0c:	9300      	str	r3, [sp, #0]
   b9d0e:	490a      	ldr	r1, [pc, #40]	; (b9d38 <_ZN7RH_RF954initEv+0x100>)
   b9d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9d14:	e7ce      	b.n	b9cb4 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b9d16:	2a02      	cmp	r2, #2
   b9d18:	d194      	bne.n	b9c44 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b9d1a:	9300      	str	r3, [sp, #0]
   b9d1c:	4907      	ldr	r1, [pc, #28]	; (b9d3c <_ZN7RH_RF954initEv+0x104>)
   b9d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9d22:	2201      	movs	r2, #1
   b9d24:	e7c6      	b.n	b9cb4 <_ZN7RH_RF954initEv+0x7c>
   b9d26:	bf00      	nop
   b9d28:	2003e56d 	.word	0x2003e56d
   b9d2c:	2003e570 	.word	0x2003e570
   b9d30:	000b9a71 	.word	0x000b9a71
   b9d34:	43d90000 	.word	0x43d90000
   b9d38:	000b9a81 	.word	0x000b9a81
   b9d3c:	000b9a91 	.word	0x000b9a91

000b9d40 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   b9d40:	2001      	movs	r0, #1
   b9d42:	4770      	bx	lr

000b9d44 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   b9d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9d46:	4d1f      	ldr	r5, [pc, #124]	; (b9dc4 <_ZN14SequentialFileC1Ev+0x80>)
   b9d48:	4b1f      	ldr	r3, [pc, #124]	; (b9dc8 <_ZN14SequentialFileC1Ev+0x84>)
   b9d4a:	4604      	mov	r4, r0
   b9d4c:	4629      	mov	r1, r5
   b9d4e:	f840 3b04 	str.w	r3, [r0], #4
   b9d52:	f003 fc12 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b9d56:	491d      	ldr	r1, [pc, #116]	; (b9dcc <_ZN14SequentialFileC1Ev+0x88>)
   b9d58:	f104 0014 	add.w	r0, r4, #20
   b9d5c:	f003 fc0d 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b9d60:	4629      	mov	r1, r5
   b9d62:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9d66:	f003 fc08 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b9d6a:	2300      	movs	r3, #0
   b9d6c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b9d70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b9d74:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   b9d78:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   b9d7c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   b9d80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9d84:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b9d86:	2308      	movs	r3, #8
   b9d88:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9d8a:	2020      	movs	r0, #32
   b9d8c:	f7fa f983 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9d90:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b9d92:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9d94:	3d01      	subs	r5, #1
   b9d96:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b9d98:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   b9d9c:	4606      	mov	r6, r0
   b9d9e:	f44f 7000 	mov.w	r0, #512	; 0x200
   b9da2:	f7fa f978 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9da6:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b9daa:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   b9dae:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   b9db2:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b9db4:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b9db6:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   b9db8:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9dba:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   b9dbc:	6667      	str	r7, [r4, #100]	; 0x64

}
   b9dbe:	4620      	mov	r0, r4
   b9dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9dc2:	bf00      	nop
   b9dc4:	000c07d9 	.word	0x000c07d9
   b9dc8:	000c05dc 	.word	0x000c05dc
   b9dcc:	000c04dc 	.word	0x000c04dc

000b9dd0 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b9dd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   b9dd2:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b9dd4:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   b9dd6:	4628      	mov	r0, r5
   b9dd8:	f003 fc2d 	bl	bd636 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   b9ddc:	490e      	ldr	r1, [pc, #56]	; (b9e18 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   b9dde:	4668      	mov	r0, sp
   b9de0:	f003 fbcb 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b9de4:	4669      	mov	r1, sp
   b9de6:	4628      	mov	r0, r5
   b9de8:	f003 fc92 	bl	bd710 <_ZNK6String8endsWithERKS_>
   b9dec:	4606      	mov	r6, r0
   b9dee:	4668      	mov	r0, sp
   b9df0:	f003 fb78 	bl	bd4e4 <_ZN6StringD1Ev>
   b9df4:	b16e      	cbz	r6, b9e12 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   b9df6:	68e3      	ldr	r3, [r4, #12]
   b9df8:	2200      	movs	r2, #0
   b9dfa:	3b01      	subs	r3, #1
   b9dfc:	4629      	mov	r1, r5
   b9dfe:	4668      	mov	r0, sp
   b9e00:	f003 fc9c 	bl	bd73c <_ZNK6String9substringEjj>
   b9e04:	4669      	mov	r1, sp
   b9e06:	4628      	mov	r0, r5
   b9e08:	f003 fc0d 	bl	bd626 <_ZN6StringaSEOS_>
   b9e0c:	4668      	mov	r0, sp
   b9e0e:	f003 fb69 	bl	bd4e4 <_ZN6StringD1Ev>
    }
    return *this; 
};
   b9e12:	4620      	mov	r0, r4
   b9e14:	b004      	add	sp, #16
   b9e16:	bd70      	pop	{r4, r5, r6, pc}
   b9e18:	000c04e1 	.word	0x000c04e1

000b9e1c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   b9e1c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   b9e1e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   b9e20:	4604      	mov	r4, r0
    if (!queueMutex) {
   b9e22:	b913      	cbnz	r3, b9e2a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   b9e24:	303c      	adds	r0, #60	; 0x3c
   b9e26:	f000 fbfd 	bl	ba624 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   b9e2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   b9e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   b9e30:	f000 bc00 	b.w	ba634 <os_mutex_lock>

000b9e34 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   b9e34:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b9e36:	f000 bc05 	b.w	ba644 <os_mutex_unlock>
	...

000b9e3c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   b9e3c:	b510      	push	{r4, lr}
   b9e3e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   b9e40:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   b9e42:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   b9e44:	f000 fdb6 	bl	ba9b4 <stat>
    if (result == 0) {
   b9e48:	b9d0      	cbnz	r0, b9e80 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b9e4a:	9b01      	ldr	r3, [sp, #4]
   b9e4c:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   b9e4e:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b9e50:	d506      	bpl.n	b9e60 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   b9e52:	4915      	ldr	r1, [pc, #84]	; (b9ea8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   b9e54:	4815      	ldr	r0, [pc, #84]	; (b9eac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9e56:	f7fa f941 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        return true;
   b9e5a:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   b9e5c:	b016      	add	sp, #88	; 0x58
   b9e5e:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   b9e60:	4812      	ldr	r0, [pc, #72]	; (b9eac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9e62:	4913      	ldr	r1, [pc, #76]	; (b9eb0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   b9e64:	f7fc fa5c 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   b9e68:	4620      	mov	r0, r4
   b9e6a:	f005 f90d 	bl	bf088 <unlink>
    result = mkdir(path, 0777);
   b9e6e:	f240 11ff 	movw	r1, #511	; 0x1ff
   b9e72:	4620      	mov	r0, r4
   b9e74:	f000 fda6 	bl	ba9c4 <mkdir>
    if (result == 0) {
   b9e78:	b980      	cbnz	r0, b9e9c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   b9e7a:	490e      	ldr	r1, [pc, #56]	; (b9eb4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   b9e7c:	4622      	mov	r2, r4
   b9e7e:	e7e9      	b.n	b9e54 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   b9e80:	f001 f80c 	bl	bae9c <__errno>
   b9e84:	6803      	ldr	r3, [r0, #0]
   b9e86:	2b02      	cmp	r3, #2
   b9e88:	d0f1      	beq.n	b9e6e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   b9e8a:	f001 f807 	bl	bae9c <__errno>
   b9e8e:	490a      	ldr	r1, [pc, #40]	; (b9eb8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   b9e90:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   b9e92:	4806      	ldr	r0, [pc, #24]	; (b9eac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9e94:	f7fc fa44 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b9e98:	2000      	movs	r0, #0
   b9e9a:	e7df      	b.n	b9e5c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   b9e9c:	f000 fffe 	bl	bae9c <__errno>
   b9ea0:	4906      	ldr	r1, [pc, #24]	; (b9ebc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   b9ea2:	6802      	ldr	r2, [r0, #0]
   b9ea4:	e7f5      	b.n	b9e92 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   b9ea6:	bf00      	nop
   b9ea8:	000c04ee 	.word	0x000c04ee
   b9eac:	2003e57c 	.word	0x2003e57c
   b9eb0:	000c050b 	.word	0x000c050b
   b9eb4:	000c053c 	.word	0x000c053c
   b9eb8:	000c0528 	.word	0x000c0528
   b9ebc:	000c054b 	.word	0x000c054b

000b9ec0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   b9ec0:	b538      	push	{r3, r4, r5, lr}
   b9ec2:	4615      	mov	r5, r2
   b9ec4:	4604      	mov	r4, r0
    String result = name;
   b9ec6:	f003 fb58 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   b9eca:	b14d      	cbz	r5, b9ee0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   b9ecc:	782b      	ldrb	r3, [r5, #0]
   b9ece:	b13b      	cbz	r3, b9ee0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b9ed0:	4904      	ldr	r1, [pc, #16]	; (b9ee4 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   b9ed2:	4620      	mov	r0, r4
   b9ed4:	f003 fbd8 	bl	bd688 <_ZN6String6concatEPKc>
   b9ed8:	4629      	mov	r1, r5
   b9eda:	4620      	mov	r0, r4
   b9edc:	f003 fbd4 	bl	bd688 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   b9ee0:	4620      	mov	r0, r4
   b9ee2:	bd38      	pop	{r3, r4, r5, pc}
   b9ee4:	000c08e0 	.word	0x000c08e0

000b9ee8 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   b9ee8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9eea:	4605      	mov	r5, r0
   b9eec:	460e      	mov	r6, r1
   b9eee:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   b9ef0:	6949      	ldr	r1, [r1, #20]
   b9ef2:	4668      	mov	r0, sp
   b9ef4:	f003 fc42 	bl	bd77c <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   b9ef8:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   b9efa:	b904      	cbnz	r4, b9efe <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   b9efc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9efe:	4622      	mov	r2, r4
   b9f00:	4628      	mov	r0, r5
   b9f02:	f7ff ffdd 	bl	b9ec0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   b9f06:	4668      	mov	r0, sp
   b9f08:	f003 faec 	bl	bd4e4 <_ZN6StringD1Ev>
}
   b9f0c:	4628      	mov	r0, r5
   b9f0e:	b004      	add	sp, #16
   b9f10:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9f14 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b9f14:	b570      	push	{r4, r5, r6, lr}
   b9f16:	460c      	mov	r4, r1
   b9f18:	b08e      	sub	sp, #56	; 0x38
    String result;
   b9f1a:	491a      	ldr	r1, [pc, #104]	; (b9f84 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b9f1c:	e9cd 3200 	strd	r3, r2, [sp]
   b9f20:	4605      	mov	r5, r0
    String result;
   b9f22:	f003 fb2a 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   b9f26:	68e0      	ldr	r0, [r4, #12]
   b9f28:	69e1      	ldr	r1, [r4, #28]
   b9f2a:	4401      	add	r1, r0
   b9f2c:	3104      	adds	r1, #4
   b9f2e:	4628      	mov	r0, r5
   b9f30:	f003 faf6 	bl	bd520 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b9f34:	1d21      	adds	r1, r4, #4
   b9f36:	a806      	add	r0, sp, #24
   b9f38:	f003 fb6a 	bl	bd610 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   b9f3c:	4912      	ldr	r1, [pc, #72]	; (b9f88 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   b9f3e:	a802      	add	r0, sp, #8
   b9f40:	f003 fb1b 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b9f44:	a902      	add	r1, sp, #8
   b9f46:	a806      	add	r0, sp, #24
   b9f48:	f003 fbaf 	bl	bd6aa <_ZplRK15StringSumHelperRK6String>
   b9f4c:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9f50:	4606      	mov	r6, r0
   b9f52:	4621      	mov	r1, r4
   b9f54:	a80a      	add	r0, sp, #40	; 0x28
   b9f56:	f7ff ffc7 	bl	b9ee8 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   b9f5a:	a90a      	add	r1, sp, #40	; 0x28
   b9f5c:	4630      	mov	r0, r6
   b9f5e:	f003 fba4 	bl	bd6aa <_ZplRK15StringSumHelperRK6String>
   b9f62:	4601      	mov	r1, r0
   b9f64:	4628      	mov	r0, r5
   b9f66:	f003 fb44 	bl	bd5f2 <_ZN6StringaSERKS_>
   b9f6a:	a80a      	add	r0, sp, #40	; 0x28
   b9f6c:	f003 faba 	bl	bd4e4 <_ZN6StringD1Ev>
   b9f70:	a802      	add	r0, sp, #8
   b9f72:	f003 fab7 	bl	bd4e4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b9f76:	a806      	add	r0, sp, #24
   b9f78:	f003 fab4 	bl	bd4e4 <_ZN6StringD1Ev>
}
   b9f7c:	4628      	mov	r0, r5
   b9f7e:	b00e      	add	sp, #56	; 0x38
   b9f80:	bd70      	pop	{r4, r5, r6, pc}
   b9f82:	bf00      	nop
   b9f84:	000c07d9 	.word	0x000c07d9
   b9f88:	000c04e1 	.word	0x000c04e1

000b9f8c <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b9f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   b9f90:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b9f92:	b08e      	sub	sp, #56	; 0x38
   b9f94:	4605      	mov	r5, r0
   b9f96:	460f      	mov	r7, r1
    if (allExtensions) {
   b9f98:	2a00      	cmp	r2, #0
   b9f9a:	d04a      	beq.n	ba032 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   b9f9c:	6840      	ldr	r0, [r0, #4]
   b9f9e:	f000 fd21 	bl	ba9e4 <opendir>
        if (dir) {
   b9fa2:	4606      	mov	r6, r0
   b9fa4:	2800      	cmp	r0, #0
   b9fa6:	d054      	beq.n	ba052 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   b9fa8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; ba060 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   b9fac:	f8df 90ac 	ldr.w	r9, [pc, #172]	; ba05c <_ZN14SequentialFile13removeFileNumEib+0xd0>
   b9fb0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; ba058 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   b9fb4:	4630      	mov	r0, r6
   b9fb6:	f000 fd1d 	bl	ba9f4 <readdir>
                if (!ent) {
   b9fba:	2800      	cmp	r0, #0
   b9fbc:	d033      	beq.n	ba026 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   b9fbe:	7a82      	ldrb	r2, [r0, #10]
   b9fc0:	2a08      	cmp	r2, #8
   b9fc2:	d1f7      	bne.n	b9fb4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   b9fc4:	f100 040b 	add.w	r4, r0, #11
   b9fc8:	6969      	ldr	r1, [r5, #20]
   b9fca:	aa01      	add	r2, sp, #4
   b9fcc:	4620      	mov	r0, r4
   b9fce:	f000 ff3d 	bl	bae4c <sscanf>
   b9fd2:	2801      	cmp	r0, #1
   b9fd4:	d1ee      	bne.n	b9fb4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   b9fd6:	9b01      	ldr	r3, [sp, #4]
   b9fd8:	42bb      	cmp	r3, r7
   b9fda:	d1eb      	bne.n	b9fb4 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   b9fdc:	1d29      	adds	r1, r5, #4
   b9fde:	a80a      	add	r0, sp, #40	; 0x28
   b9fe0:	f003 fb16 	bl	bd610 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   b9fe4:	4651      	mov	r1, sl
   b9fe6:	a806      	add	r0, sp, #24
   b9fe8:	f003 fac7 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   b9fec:	a906      	add	r1, sp, #24
   b9fee:	a80a      	add	r0, sp, #40	; 0x28
   b9ff0:	f003 fb5b 	bl	bd6aa <_ZplRK15StringSumHelperRK6String>
   b9ff4:	4621      	mov	r1, r4
   b9ff6:	f003 fb64 	bl	bd6c2 <_ZplRK15StringSumHelperPKc>
   b9ffa:	4601      	mov	r1, r0
   b9ffc:	a802      	add	r0, sp, #8
   b9ffe:	f003 fb07 	bl	bd610 <_ZN6StringC1ERKS_>
   ba002:	a806      	add	r0, sp, #24
   ba004:	f003 fa6e 	bl	bd4e4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   ba008:	a80a      	add	r0, sp, #40	; 0x28
   ba00a:	f003 fa6b 	bl	bd4e4 <_ZN6StringD1Ev>
                        unlink(path);
   ba00e:	9802      	ldr	r0, [sp, #8]
   ba010:	f005 f83a 	bl	bf088 <unlink>
                        _log.trace("removed %s", path.c_str());
   ba014:	4640      	mov	r0, r8
   ba016:	9a02      	ldr	r2, [sp, #8]
   ba018:	4649      	mov	r1, r9
   ba01a:	f7fc f98f 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   ba01e:	a802      	add	r0, sp, #8
   ba020:	f003 fa60 	bl	bd4e4 <_ZN6StringD1Ev>
                    continue;
   ba024:	e7c6      	b.n	b9fb4 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   ba026:	4630      	mov	r0, r6
}
   ba028:	b00e      	add	sp, #56	; 0x38
   ba02a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   ba02e:	f000 bce9 	b.w	baa04 <closedir>
        String path = getPathForFileNum(fileNum); 
   ba032:	460a      	mov	r2, r1
   ba034:	4601      	mov	r1, r0
   ba036:	a80a      	add	r0, sp, #40	; 0x28
   ba038:	f7ff ff6c 	bl	b9f14 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   ba03c:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba03e:	f005 f823 	bl	bf088 <unlink>
        _log.trace("removed %s", path.c_str());
   ba042:	4805      	ldr	r0, [pc, #20]	; (ba058 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   ba044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   ba046:	4905      	ldr	r1, [pc, #20]	; (ba05c <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   ba048:	f7fc f978 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   ba04c:	a80a      	add	r0, sp, #40	; 0x28
   ba04e:	f003 fa49 	bl	bd4e4 <_ZN6StringD1Ev>
}
   ba052:	b00e      	add	sp, #56	; 0x38
   ba054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba058:	2003e57c 	.word	0x2003e57c
   ba05c:	000c04e3 	.word	0x000c04e3
   ba060:	000c04e1 	.word	0x000c04e1

000ba064 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba064:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba066:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba068:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba06a:	b183      	cbz	r3, ba08e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba06c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba06e:	6945      	ldr	r5, [r0, #20]
   ba070:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba072:	42ae      	cmp	r6, r5
   ba074:	d906      	bls.n	ba084 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   ba076:	f855 0b04 	ldr.w	r0, [r5], #4
   ba07a:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba07e:	f7fa f80e 	bl	b409e <_ZdlPvj>
   ba082:	e7f6      	b.n	ba072 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   ba084:	6861      	ldr	r1, [r4, #4]
   ba086:	6820      	ldr	r0, [r4, #0]
   ba088:	0089      	lsls	r1, r1, #2
   ba08a:	f7fa f808 	bl	b409e <_ZdlPvj>
    }
   ba08e:	4620      	mov	r0, r4
   ba090:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba094 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   ba094:	b510      	push	{r4, lr}
   ba096:	4b09      	ldr	r3, [pc, #36]	; (ba0bc <_ZN14SequentialFileD1Ev+0x28>)
   ba098:	4604      	mov	r4, r0
   ba09a:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   ba09e:	f7ff ffe1 	bl	ba064 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   ba0a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba0a6:	f003 fa1d 	bl	bd4e4 <_ZN6StringD1Ev>
   ba0aa:	f104 0014 	add.w	r0, r4, #20
   ba0ae:	f003 fa19 	bl	bd4e4 <_ZN6StringD1Ev>
   ba0b2:	1d20      	adds	r0, r4, #4
   ba0b4:	f003 fa16 	bl	bd4e4 <_ZN6StringD1Ev>
}
   ba0b8:	4620      	mov	r0, r4
   ba0ba:	bd10      	pop	{r4, pc}
   ba0bc:	000c05dc 	.word	0x000c05dc

000ba0c0 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   ba0c0:	b510      	push	{r4, lr}
   ba0c2:	4604      	mov	r4, r0
}
   ba0c4:	f7ff ffe6 	bl	ba094 <_ZN14SequentialFileD1Ev>
   ba0c8:	4620      	mov	r0, r4
   ba0ca:	2168      	movs	r1, #104	; 0x68
   ba0cc:	f7f9 ffe7 	bl	b409e <_ZdlPvj>
   ba0d0:	4620      	mov	r0, r4
   ba0d2:	bd10      	pop	{r4, pc}

000ba0d4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba0d4:	68c3      	ldr	r3, [r0, #12]
   ba0d6:	68ca      	ldr	r2, [r1, #12]
   ba0d8:	1a9b      	subs	r3, r3, r2
   ba0da:	109b      	asrs	r3, r3, #2
   ba0dc:	1e5a      	subs	r2, r3, #1
   ba0de:	e9d0 3000 	ldrd	r3, r0, [r0]
   ba0e2:	1a1b      	subs	r3, r3, r0
   ba0e4:	109b      	asrs	r3, r3, #2
   ba0e6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba0ea:	6888      	ldr	r0, [r1, #8]
   ba0ec:	680a      	ldr	r2, [r1, #0]
   ba0ee:	1a80      	subs	r0, r0, r2
      }
   ba0f0:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba0f4:	4770      	bx	lr
	...

000ba0f8 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   ba0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   ba0fc:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   ba0fe:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   ba100:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   ba102:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   ba104:	4604      	mov	r4, r0
   ba106:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   ba108:	d007      	beq.n	ba11a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba10a:	b10b      	cbz	r3, ba110 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   ba10c:	680a      	ldr	r2, [r1, #0]
   ba10e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba110:	69a3      	ldr	r3, [r4, #24]
   ba112:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba114:	61a3      	str	r3, [r4, #24]
      }
   ba116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba11a:	f100 0108 	add.w	r1, r0, #8
   ba11e:	3018      	adds	r0, #24
   ba120:	f7ff ffd8 	bl	ba0d4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   ba124:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba128:	4298      	cmp	r0, r3
   ba12a:	d102      	bne.n	ba132 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   ba12c:	4838      	ldr	r0, [pc, #224]	; (ba210 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   ba12e:	f004 f888 	bl	be242 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba132:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba134:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba136:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba138:	1a11      	subs	r1, r2, r0
   ba13a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba13e:	2901      	cmp	r1, #1
   ba140:	d825      	bhi.n	ba18e <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba142:	6961      	ldr	r1, [r4, #20]
   ba144:	eba2 0801 	sub.w	r8, r2, r1
   ba148:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba14c:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba14e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   ba152:	d936      	bls.n	ba1c2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   ba154:	1b5d      	subs	r5, r3, r5
   ba156:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba158:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   ba15c:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba15e:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   ba160:	eba3 0201 	sub.w	r2, r3, r1
   ba164:	d926      	bls.n	ba1b4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   ba166:	428b      	cmp	r3, r1
   ba168:	d002      	beq.n	ba170 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba16a:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba16c:	f004 fd84 	bl	bec78 <memmove>
	_M_node = __new_node;
   ba170:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   ba172:	682b      	ldr	r3, [r5, #0]
   ba174:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba176:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba17a:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba17c:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   ba180:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba182:	f855 3008 	ldr.w	r3, [r5, r8]
   ba186:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba188:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba18c:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba18e:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba192:	6a65      	ldr	r5, [r4, #36]	; 0x24
   ba194:	f7f9 ff7f 	bl	b4096 <_Znwj>
   ba198:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba19a:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba19c:	b10b      	cbz	r3, ba1a2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   ba19e:	683a      	ldr	r2, [r7, #0]
   ba1a0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba1a4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba1a6:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba1a8:	685b      	ldr	r3, [r3, #4]
   ba1aa:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba1ac:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba1b0:	6222      	str	r2, [r4, #32]
   ba1b2:	e7af      	b.n	ba114 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   ba1b4:	428b      	cmp	r3, r1
   ba1b6:	d0db      	beq.n	ba170 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba1b8:	f108 0004 	add.w	r0, r8, #4
   ba1bc:	1a80      	subs	r0, r0, r2
   ba1be:	4428      	add	r0, r5
   ba1c0:	e7d4      	b.n	ba16c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba1c2:	f103 0902 	add.w	r9, r3, #2
   ba1c6:	2b01      	cmp	r3, #1
   ba1c8:	bf2c      	ite	cs
   ba1ca:	4499      	addcs	r9, r3
   ba1cc:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   ba1d0:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   ba1d4:	d301      	bcc.n	ba1da <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   ba1d6:	f004 f831 	bl	be23c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba1da:	ea4f 0089 	mov.w	r0, r9, lsl #2
   ba1de:	f7f9 ff5a 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   ba1e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba1e4:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba1e6:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   ba1ea:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba1ec:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   ba1ee:	4291      	cmp	r1, r2
   ba1f0:	4682      	mov	sl, r0
   ba1f2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   ba1f6:	d003      	beq.n	ba200 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba1f8:	1a52      	subs	r2, r2, r1
   ba1fa:	4628      	mov	r0, r5
   ba1fc:	f004 fd3c 	bl	bec78 <memmove>
	::operator delete(__p
   ba200:	6861      	ldr	r1, [r4, #4]
   ba202:	6820      	ldr	r0, [r4, #0]
   ba204:	0089      	lsls	r1, r1, #2
   ba206:	f7f9 ff4a 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba20a:	e9c4 a900 	strd	sl, r9, [r4]
   ba20e:	e7af      	b.n	ba170 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   ba210:	000c00c1 	.word	0x000c00c1

000ba214 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   ba214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   ba218:	68c3      	ldr	r3, [r0, #12]
   ba21a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   ba21c:	b086      	sub	sp, #24
   ba21e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   ba220:	d808      	bhi.n	ba234 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   ba222:	4934      	ldr	r1, [pc, #208]	; (ba2f4 <_ZN14SequentialFile7scanDirEv+0xe0>)
   ba224:	4834      	ldr	r0, [pc, #208]	; (ba2f8 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba226:	f7fc f87b 	bl	b6320 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba22a:	2600      	movs	r6, #0
}
   ba22c:	4630      	mov	r0, r6
   ba22e:	b006      	add	sp, #24
   ba230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   ba234:	6840      	ldr	r0, [r0, #4]
   ba236:	f7ff fe01 	bl	b9e3c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   ba23a:	4606      	mov	r6, r0
   ba23c:	2800      	cmp	r0, #0
   ba23e:	d0f4      	beq.n	ba22a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   ba240:	6963      	ldr	r3, [r4, #20]
   ba242:	6862      	ldr	r2, [r4, #4]
   ba244:	492d      	ldr	r1, [pc, #180]	; (ba2fc <_ZN14SequentialFile7scanDirEv+0xe8>)
   ba246:	482c      	ldr	r0, [pc, #176]	; (ba2f8 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba248:	f7fc f878 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   ba24c:	6860      	ldr	r0, [r4, #4]
   ba24e:	f000 fbc9 	bl	ba9e4 <opendir>
    if (!dir) {
   ba252:	4607      	mov	r7, r0
   ba254:	2800      	cmp	r0, #0
   ba256:	d0e8      	beq.n	ba22a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   ba258:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba25a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba300 <_ZN14SequentialFile7scanDirEv+0xec>
   ba25e:	f8df 8098 	ldr.w	r8, [pc, #152]	; ba2f8 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   ba262:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   ba264:	4638      	mov	r0, r7
   ba266:	f000 fbc5 	bl	ba9f4 <readdir>
        if (!ent) {
   ba26a:	4605      	mov	r5, r0
   ba26c:	2800      	cmp	r0, #0
   ba26e:	d039      	beq.n	ba2e4 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   ba270:	7a83      	ldrb	r3, [r0, #10]
   ba272:	2b08      	cmp	r3, #8
   ba274:	d1f6      	bne.n	ba264 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   ba276:	350b      	adds	r5, #11
   ba278:	6961      	ldr	r1, [r4, #20]
   ba27a:	aa01      	add	r2, sp, #4
   ba27c:	4628      	mov	r0, r5
   ba27e:	f000 fde5 	bl	bae4c <sscanf>
   ba282:	2801      	cmp	r0, #1
   ba284:	d1ee      	bne.n	ba264 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   ba286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba288:	b17b      	cbz	r3, ba2aa <_ZN14SequentialFile7scanDirEv+0x96>
   ba28a:	4629      	mov	r1, r5
   ba28c:	a802      	add	r0, sp, #8
   ba28e:	f003 f974 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
   ba292:	f104 0124 	add.w	r1, r4, #36	; 0x24
   ba296:	a802      	add	r0, sp, #8
   ba298:	f003 fa3a 	bl	bd710 <_ZNK6String8endsWithERKS_>
   ba29c:	4682      	mov	sl, r0
   ba29e:	a802      	add	r0, sp, #8
   ba2a0:	f003 f920 	bl	bd4e4 <_ZN6StringD1Ev>
   ba2a4:	f1ba 0f00 	cmp.w	sl, #0
   ba2a8:	d0dc      	beq.n	ba264 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   ba2aa:	6823      	ldr	r3, [r4, #0]
   ba2ac:	4629      	mov	r1, r5
   ba2ae:	689b      	ldr	r3, [r3, #8]
   ba2b0:	4620      	mov	r0, r4
   ba2b2:	4798      	blx	r3
   ba2b4:	2800      	cmp	r0, #0
   ba2b6:	d0d5      	beq.n	ba264 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   ba2b8:	9a01      	ldr	r2, [sp, #4]
   ba2ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba2bc:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   ba2be:	bfb8      	it	lt
   ba2c0:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba2c2:	462b      	mov	r3, r5
   ba2c4:	4649      	mov	r1, r9
   ba2c6:	4640      	mov	r0, r8
   ba2c8:	f7fc f838 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   ba2cc:	4620      	mov	r0, r4
   ba2ce:	f7ff fda5 	bl	b9e1c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   ba2d2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba2d6:	a901      	add	r1, sp, #4
   ba2d8:	f7ff ff0e 	bl	ba0f8 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   ba2dc:	4620      	mov	r0, r4
   ba2de:	f7ff fda9 	bl	b9e34 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   ba2e2:	e7bf      	b.n	ba264 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   ba2e4:	4638      	mov	r0, r7
   ba2e6:	f000 fb8d 	bl	baa04 <closedir>
    scanDirCompleted = true;
   ba2ea:	2301      	movs	r3, #1
   ba2ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   ba2f0:	e79c      	b.n	ba22c <_ZN14SequentialFile7scanDirEv+0x18>
   ba2f2:	bf00      	nop
   ba2f4:	000c0561 	.word	0x000c0561
   ba2f8:	2003e57c 	.word	0x2003e57c
   ba2fc:	000c0576 	.word	0x000c0576
   ba300:	000c0592 	.word	0x000c0592

000ba304 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   ba304:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   ba306:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   ba30a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba30c:	b90b      	cbnz	r3, ba312 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   ba30e:	f7ff ff81 	bl	ba214 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   ba312:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   ba314:	3001      	adds	r0, #1
   ba316:	63a0      	str	r0, [r4, #56]	; 0x38
}
   ba318:	bd10      	pop	{r4, pc}
	...

000ba31c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   ba31c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   ba31e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   ba322:	4604      	mov	r4, r0
   ba324:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   ba326:	b90b      	cbnz	r3, ba32c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   ba328:	f7ff ff74 	bl	ba214 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   ba32c:	4620      	mov	r0, r4
   ba32e:	f7ff fd75 	bl	b9e1c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   ba332:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   ba334:	6da2      	ldr	r2, [r4, #88]	; 0x58
   ba336:	429a      	cmp	r2, r3
   ba338:	d020      	beq.n	ba37c <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   ba33a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   ba33e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   ba340:	b126      	cbz	r6, ba34c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   ba342:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba344:	4293      	cmp	r3, r2
   ba346:	d00c      	beq.n	ba362 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   ba348:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba34a:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   ba34c:	4620      	mov	r0, r4
   ba34e:	f7ff fd71 	bl	b9e34 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   ba352:	b125      	cbz	r5, ba35e <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   ba354:	490a      	ldr	r1, [pc, #40]	; (ba380 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   ba356:	480b      	ldr	r0, [pc, #44]	; (ba384 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   ba358:	462a      	mov	r2, r5
   ba35a:	f7fb ffef 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
}
   ba35e:	4628      	mov	r0, r5
   ba360:	bd70      	pop	{r4, r5, r6, pc}
   ba362:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba366:	f7f9 fe9a 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba36a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba36c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba36e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   ba370:	685b      	ldr	r3, [r3, #4]
   ba372:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba374:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba378:	6522      	str	r2, [r4, #80]	; 0x50
   ba37a:	e7e6      	b.n	ba34a <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   ba37c:	2500      	movs	r5, #0
   ba37e:	e7e5      	b.n	ba34c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   ba380:	000c05a8 	.word	0x000c05a8
   ba384:	2003e57c 	.word	0x2003e57c

000ba388 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   ba388:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   ba38a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   ba38e:	9101      	str	r1, [sp, #4]
   ba390:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba392:	b90b      	cbnz	r3, ba398 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   ba394:	f7ff ff3e 	bl	ba214 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   ba398:	9b01      	ldr	r3, [sp, #4]
   ba39a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba39c:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   ba39e:	bfb8      	it	lt
   ba3a0:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   ba3a2:	4620      	mov	r0, r4
   ba3a4:	f7ff fd3a 	bl	b9e1c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   ba3a8:	a901      	add	r1, sp, #4
   ba3aa:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba3ae:	f7ff fea3 	bl	ba0f8 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   ba3b2:	4620      	mov	r0, r4
   ba3b4:	f7ff fd3e 	bl	b9e34 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba3b8:	b002      	add	sp, #8
   ba3ba:	bd10      	pop	{r4, pc}

000ba3bc <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   ba3bc:	b538      	push	{r3, r4, r5, lr}
   ba3be:	4604      	mov	r4, r0
    queueMutexLock();
   ba3c0:	f7ff fd2c 	bl	b9e1c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba3c4:	f104 0148 	add.w	r1, r4, #72	; 0x48
   ba3c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   ba3cc:	f7ff fe82 	bl	ba0d4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   ba3d0:	4605      	mov	r5, r0
    queueMutexUnlock();
   ba3d2:	4620      	mov	r0, r4
   ba3d4:	f7ff fd2e 	bl	b9e34 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba3d8:	4628      	mov	r0, r5
   ba3da:	bd38      	pop	{r3, r4, r5, pc}

000ba3dc <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   ba3dc:	4b01      	ldr	r3, [pc, #4]	; (ba3e4 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   ba3de:	4a02      	ldr	r2, [pc, #8]	; (ba3e8 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   ba3e0:	601a      	str	r2, [r3, #0]
}
   ba3e2:	4770      	bx	lr
   ba3e4:	2003e57c 	.word	0x2003e57c
   ba3e8:	000c05c5 	.word	0x000c05c5

000ba3ec <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   ba3ec:	4770      	bx	lr

000ba3ee <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   ba3ee:	6803      	ldr	r3, [r0, #0]
   ba3f0:	685b      	ldr	r3, [r3, #4]
   ba3f2:	4718      	bx	r3

000ba3f4 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   ba3f4:	b510      	push	{r4, lr}
    if (lastUpdate) {
   ba3f6:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   ba3f8:	4604      	mov	r4, r0
    if (lastUpdate) {
   ba3fa:	b133      	cbz	r3, ba40a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   ba3fc:	b131      	cbz	r1, ba40c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   ba3fe:	6823      	ldr	r3, [r4, #0]
   ba400:	4620      	mov	r0, r4
   ba402:	689b      	ldr	r3, [r3, #8]
   ba404:	4798      	blx	r3
            lastUpdate = 0;
   ba406:	2300      	movs	r3, #0
   ba408:	61a3      	str	r3, [r4, #24]
        }
    }
}
   ba40a:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   ba40c:	f000 f972 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   ba410:	69a3      	ldr	r3, [r4, #24]
   ba412:	1ac0      	subs	r0, r0, r3
   ba414:	69e3      	ldr	r3, [r4, #28]
   ba416:	4298      	cmp	r0, r3
   ba418:	d2f1      	bcs.n	ba3fe <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   ba41a:	e7f6      	b.n	ba40a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000ba41c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   ba41c:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   ba41e:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   ba420:	4604      	mov	r4, r0
    if (saveDelayMs) {
   ba422:	b11b      	cbz	r3, ba42c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   ba424:	f000 f966 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   ba428:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   ba42a:	bd10      	pop	{r4, pc}
        save();
   ba42c:	6803      	ldr	r3, [r0, #0]
}
   ba42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   ba432:	689b      	ldr	r3, [r3, #8]
   ba434:	4718      	bx	r3

000ba436 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   ba436:	f000 b925 	b.w	ba684 <os_mutex_recursive_unlock>

000ba43a <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   ba43a:	b510      	push	{r4, lr}
   ba43c:	4604      	mov	r4, r0
   ba43e:	3004      	adds	r0, #4
   ba440:	f7fa ff72 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   ba444:	6823      	ldr	r3, [r4, #0]
   ba446:	68e1      	ldr	r1, [r4, #12]
   ba448:	695b      	ldr	r3, [r3, #20]
   ba44a:	4620      	mov	r0, r4
   ba44c:	4798      	blx	r3
   ba44e:	b918      	cbnz	r0, ba458 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   ba450:	6823      	ldr	r3, [r4, #0]
   ba452:	4620      	mov	r0, r4
   ba454:	699b      	ldr	r3, [r3, #24]
   ba456:	4798      	blx	r3
      { _M_device.unlock(); }
   ba458:	6860      	ldr	r0, [r4, #4]
   ba45a:	f7ff ffec 	bl	ba436 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   ba45e:	2001      	movs	r0, #1
   ba460:	bd10      	pop	{r4, pc}
	...

000ba464 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   ba464:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba466:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   ba46a:	4f18      	ldr	r7, [pc, #96]	; (ba4cc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   ba46c:	4e18      	ldr	r6, [pc, #96]	; (ba4d0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   ba46e:	4d19      	ldr	r5, [pc, #100]	; (ba4d4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   ba470:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   ba472:	42a0      	cmp	r0, r4
   ba474:	d00c      	beq.n	ba490 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   ba476:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   ba47a:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   ba47c:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   ba480:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   ba482:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   ba484:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   ba488:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   ba48c:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   ba48e:	e7f0      	b.n	ba472 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   ba490:	f001 0403 	and.w	r4, r1, #3
   ba494:	4404      	add	r4, r0
    k = 0;
   ba496:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   ba498:	42a0      	cmp	r0, r4
   ba49a:	d004      	beq.n	ba4a6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   ba49c:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   ba4a0:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   ba4a4:	e7f8      	b.n	ba498 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   ba4a6:	4809      	ldr	r0, [pc, #36]	; (ba4cc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   ba4a8:	4343      	muls	r3, r0
        k *= 0x1b873593;
   ba4aa:	4809      	ldr	r0, [pc, #36]	; (ba4d0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   ba4ac:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   ba4b0:	404a      	eors	r2, r1
        k *= 0x1b873593;
   ba4b2:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   ba4b4:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   ba4b6:	4b08      	ldr	r3, [pc, #32]	; (ba4d8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   ba4b8:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   ba4bc:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   ba4be:	4b07      	ldr	r3, [pc, #28]	; (ba4dc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   ba4c0:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   ba4c4:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   ba4c6:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   ba4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba4cc:	cc9e2d51 	.word	0xcc9e2d51
   ba4d0:	1b873593 	.word	0x1b873593
   ba4d4:	e6546b64 	.word	0xe6546b64
   ba4d8:	85ebca6b 	.word	0x85ebca6b
   ba4dc:	c2b2ae35 	.word	0xc2b2ae35

000ba4e0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   ba4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba4e2:	4604      	mov	r4, r0
      { _M_device.lock(); }
   ba4e4:	3004      	adds	r0, #4
   ba4e6:	f7fa ff1f 	bl	b5328 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   ba4ea:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   ba4ec:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   ba4ee:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   ba4f0:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   ba4f2:	68a6      	ldr	r6, [r4, #8]
   ba4f4:	4a05      	ldr	r2, [pc, #20]	; (ba50c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   ba4f6:	88f1      	ldrh	r1, [r6, #6]
   ba4f8:	4630      	mov	r0, r6
   ba4fa:	f7ff ffb3 	bl	ba464 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   ba4fe:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   ba500:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   ba502:	6860      	ldr	r0, [r4, #4]
   ba504:	f7ff ff97 	bl	ba436 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   ba508:	4628      	mov	r0, r5
   ba50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba50c:	851c2a3f 	.word	0x851c2a3f

000ba510 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   ba510:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba512:	460d      	mov	r5, r1
   ba514:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   ba516:	f7ff ffe3 	bl	ba4e0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   ba51a:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   ba51c:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   ba51e:	d923      	bls.n	ba568 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   ba520:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   ba522:	6922      	ldr	r2, [r4, #16]
   ba524:	6819      	ldr	r1, [r3, #0]
   ba526:	4291      	cmp	r1, r2
   ba528:	d11f      	bne.n	ba56a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   ba52a:	8899      	ldrh	r1, [r3, #4]
   ba52c:	8aa2      	ldrh	r2, [r4, #20]
   ba52e:	4291      	cmp	r1, r2
   ba530:	d11b      	bne.n	ba56a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   ba532:	88d9      	ldrh	r1, [r3, #6]
   ba534:	b2aa      	uxth	r2, r5
   ba536:	4291      	cmp	r1, r2
   ba538:	d817      	bhi.n	ba56a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   ba53a:	689a      	ldr	r2, [r3, #8]
   ba53c:	4282      	cmp	r2, r0
   ba53e:	d114      	bne.n	ba56a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   ba540:	68e2      	ldr	r2, [r4, #12]
   ba542:	42aa      	cmp	r2, r5
   ba544:	d905      	bls.n	ba552 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   ba546:	2100      	movs	r1, #0
   ba548:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   ba54a:	68e2      	ldr	r2, [r4, #12]
   ba54c:	3501      	adds	r5, #1
   ba54e:	42aa      	cmp	r2, r5
   ba550:	d8fa      	bhi.n	ba548 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   ba552:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   ba556:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   ba558:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   ba55a:	68a5      	ldr	r5, [r4, #8]
   ba55c:	f7ff ffc0 	bl	ba4e0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   ba560:	60a8      	str	r0, [r5, #8]
        isValid = true;
   ba562:	2001      	movs	r0, #1
}
   ba564:	b002      	add	sp, #8
   ba566:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   ba568:	b19d      	cbz	r5, ba592 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   ba56a:	68a1      	ldr	r1, [r4, #8]
   ba56c:	680a      	ldr	r2, [r1, #0]
   ba56e:	b192      	cbz	r2, ba596 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   ba570:	6888      	ldr	r0, [r1, #8]
   ba572:	888b      	ldrh	r3, [r1, #4]
   ba574:	9001      	str	r0, [sp, #4]
   ba576:	88c9      	ldrh	r1, [r1, #6]
   ba578:	4808      	ldr	r0, [pc, #32]	; (ba59c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   ba57a:	9100      	str	r1, [sp, #0]
   ba57c:	4908      	ldr	r1, [pc, #32]	; (ba5a0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   ba57e:	f7fb fedd 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   ba582:	e9cd 5600 	strd	r5, r6, [sp]
   ba586:	8aa3      	ldrh	r3, [r4, #20]
   ba588:	6922      	ldr	r2, [r4, #16]
   ba58a:	4906      	ldr	r1, [pc, #24]	; (ba5a4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   ba58c:	4803      	ldr	r0, [pc, #12]	; (ba59c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   ba58e:	f7fb fed5 	bl	b633c <_ZNK5spark6Logger5traceEPKcz>
   ba592:	2000      	movs	r0, #0
   ba594:	e7e6      	b.n	ba564 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   ba596:	4610      	mov	r0, r2
   ba598:	e7e4      	b.n	ba564 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   ba59a:	bf00      	nop
   ba59c:	2003e658 	.word	0x2003e658
   ba5a0:	000c05e8 	.word	0x000c05e8
   ba5a4:	000c0619 	.word	0x000c0619

000ba5a8 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   ba5a8:	b538      	push	{r3, r4, r5, lr}
   ba5aa:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   ba5ac:	68c2      	ldr	r2, [r0, #12]
   ba5ae:	6880      	ldr	r0, [r0, #8]
   ba5b0:	2100      	movs	r1, #0
   ba5b2:	f004 fb7b 	bl	becac <memset>
    savedDataHeader->magic = savedDataMagic;
   ba5b6:	68a3      	ldr	r3, [r4, #8]
   ba5b8:	6922      	ldr	r2, [r4, #16]
   ba5ba:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   ba5bc:	68a3      	ldr	r3, [r4, #8]
   ba5be:	8aa2      	ldrh	r2, [r4, #20]
   ba5c0:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   ba5c2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   ba5c6:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   ba5c8:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   ba5ca:	68a5      	ldr	r5, [r4, #8]
   ba5cc:	f7ff ff88 	bl	ba4e0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   ba5d0:	60a8      	str	r0, [r5, #8]
}
   ba5d2:	bd38      	pop	{r3, r4, r5, pc}

000ba5d4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   ba5d4:	b508      	push	{r3, lr}
   ba5d6:	4b02      	ldr	r3, [pc, #8]	; (ba5e0 <cellular_signal+0xc>)
   ba5d8:	681b      	ldr	r3, [r3, #0]
   ba5da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba5dc:	9301      	str	r3, [sp, #4]
   ba5de:	bd08      	pop	{r3, pc}
   ba5e0:	00030274 	.word	0x00030274

000ba5e4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   ba5e4:	b508      	push	{r3, lr}
   ba5e6:	4b02      	ldr	r3, [pc, #8]	; (ba5f0 <os_thread_create+0xc>)
   ba5e8:	681b      	ldr	r3, [r3, #0]
   ba5ea:	685b      	ldr	r3, [r3, #4]
   ba5ec:	9301      	str	r3, [sp, #4]
   ba5ee:	bd08      	pop	{r3, pc}
   ba5f0:	00030248 	.word	0x00030248

000ba5f4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   ba5f4:	b508      	push	{r3, lr}
   ba5f6:	4b02      	ldr	r3, [pc, #8]	; (ba600 <os_thread_is_current+0xc>)
   ba5f8:	681b      	ldr	r3, [r3, #0]
   ba5fa:	689b      	ldr	r3, [r3, #8]
   ba5fc:	9301      	str	r3, [sp, #4]
   ba5fe:	bd08      	pop	{r3, pc}
   ba600:	00030248 	.word	0x00030248

000ba604 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   ba604:	b508      	push	{r3, lr}
   ba606:	4b02      	ldr	r3, [pc, #8]	; (ba610 <os_thread_join+0xc>)
   ba608:	681b      	ldr	r3, [r3, #0]
   ba60a:	691b      	ldr	r3, [r3, #16]
   ba60c:	9301      	str	r3, [sp, #4]
   ba60e:	bd08      	pop	{r3, pc}
   ba610:	00030248 	.word	0x00030248

000ba614 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   ba614:	b508      	push	{r3, lr}
   ba616:	4b02      	ldr	r3, [pc, #8]	; (ba620 <os_thread_cleanup+0xc>)
   ba618:	681b      	ldr	r3, [r3, #0]
   ba61a:	695b      	ldr	r3, [r3, #20]
   ba61c:	9301      	str	r3, [sp, #4]
   ba61e:	bd08      	pop	{r3, pc}
   ba620:	00030248 	.word	0x00030248

000ba624 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   ba624:	b508      	push	{r3, lr}
   ba626:	4b02      	ldr	r3, [pc, #8]	; (ba630 <os_mutex_create+0xc>)
   ba628:	681b      	ldr	r3, [r3, #0]
   ba62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba62c:	9301      	str	r3, [sp, #4]
   ba62e:	bd08      	pop	{r3, pc}
   ba630:	00030248 	.word	0x00030248

000ba634 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   ba634:	b508      	push	{r3, lr}
   ba636:	4b02      	ldr	r3, [pc, #8]	; (ba640 <os_mutex_lock+0xc>)
   ba638:	681b      	ldr	r3, [r3, #0]
   ba63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   ba63c:	9301      	str	r3, [sp, #4]
   ba63e:	bd08      	pop	{r3, pc}
   ba640:	00030248 	.word	0x00030248

000ba644 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   ba644:	b508      	push	{r3, lr}
   ba646:	4b02      	ldr	r3, [pc, #8]	; (ba650 <os_mutex_unlock+0xc>)
   ba648:	681b      	ldr	r3, [r3, #0]
   ba64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba64c:	9301      	str	r3, [sp, #4]
   ba64e:	bd08      	pop	{r3, pc}
   ba650:	00030248 	.word	0x00030248

000ba654 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   ba654:	b508      	push	{r3, lr}
   ba656:	4b02      	ldr	r3, [pc, #8]	; (ba660 <os_mutex_recursive_create+0xc>)
   ba658:	681b      	ldr	r3, [r3, #0]
   ba65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba65c:	9301      	str	r3, [sp, #4]
   ba65e:	bd08      	pop	{r3, pc}
   ba660:	00030248 	.word	0x00030248

000ba664 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   ba664:	b508      	push	{r3, lr}
   ba666:	4b02      	ldr	r3, [pc, #8]	; (ba670 <os_mutex_recursive_destroy+0xc>)
   ba668:	681b      	ldr	r3, [r3, #0]
   ba66a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba66c:	9301      	str	r3, [sp, #4]
   ba66e:	bd08      	pop	{r3, pc}
   ba670:	00030248 	.word	0x00030248

000ba674 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   ba674:	b508      	push	{r3, lr}
   ba676:	4b02      	ldr	r3, [pc, #8]	; (ba680 <os_mutex_recursive_lock+0xc>)
   ba678:	681b      	ldr	r3, [r3, #0]
   ba67a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba67c:	9301      	str	r3, [sp, #4]
   ba67e:	bd08      	pop	{r3, pc}
   ba680:	00030248 	.word	0x00030248

000ba684 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   ba684:	b508      	push	{r3, lr}
   ba686:	4b02      	ldr	r3, [pc, #8]	; (ba690 <os_mutex_recursive_unlock+0xc>)
   ba688:	681b      	ldr	r3, [r3, #0]
   ba68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba68c:	9301      	str	r3, [sp, #4]
   ba68e:	bd08      	pop	{r3, pc}
   ba690:	00030248 	.word	0x00030248

000ba694 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   ba694:	b508      	push	{r3, lr}
   ba696:	4b02      	ldr	r3, [pc, #8]	; (ba6a0 <os_thread_exit+0xc>)
   ba698:	681b      	ldr	r3, [r3, #0]
   ba69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   ba69c:	9301      	str	r3, [sp, #4]
   ba69e:	bd08      	pop	{r3, pc}
   ba6a0:	00030248 	.word	0x00030248

000ba6a4 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   ba6a4:	b508      	push	{r3, lr}
   ba6a6:	4b02      	ldr	r3, [pc, #8]	; (ba6b0 <HAL_Core_Runtime_Info+0xc>)
   ba6a8:	681b      	ldr	r3, [r3, #0]
   ba6aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba6ac:	9301      	str	r3, [sp, #4]
   ba6ae:	bd08      	pop	{r3, pc}
   ba6b0:	00030234 	.word	0x00030234

000ba6b4 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   ba6b4:	b508      	push	{r3, lr}
   ba6b6:	4b02      	ldr	r3, [pc, #8]	; (ba6c0 <HAL_Feature_Set+0xc>)
   ba6b8:	681b      	ldr	r3, [r3, #0]
   ba6ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   ba6bc:	9301      	str	r3, [sp, #4]
   ba6be:	bd08      	pop	{r3, pc}
   ba6c0:	00030234 	.word	0x00030234

000ba6c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   ba6c4:	b508      	push	{r3, lr}
   ba6c6:	4b02      	ldr	r3, [pc, #8]	; (ba6d0 <HAL_RNG_GetRandomNumber+0xc>)
   ba6c8:	681b      	ldr	r3, [r3, #0]
   ba6ca:	685b      	ldr	r3, [r3, #4]
   ba6cc:	9301      	str	r3, [sp, #4]
   ba6ce:	bd08      	pop	{r3, pc}
   ba6d0:	00030218 	.word	0x00030218

000ba6d4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   ba6d4:	b508      	push	{r3, lr}
   ba6d6:	4b02      	ldr	r3, [pc, #8]	; (ba6e0 <HAL_Delay_Milliseconds+0xc>)
   ba6d8:	681b      	ldr	r3, [r3, #0]
   ba6da:	689b      	ldr	r3, [r3, #8]
   ba6dc:	9301      	str	r3, [sp, #4]
   ba6de:	bd08      	pop	{r3, pc}
   ba6e0:	00030218 	.word	0x00030218

000ba6e4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   ba6e4:	b508      	push	{r3, lr}
   ba6e6:	4b02      	ldr	r3, [pc, #8]	; (ba6f0 <HAL_Delay_Microseconds+0xc>)
   ba6e8:	681b      	ldr	r3, [r3, #0]
   ba6ea:	68db      	ldr	r3, [r3, #12]
   ba6ec:	9301      	str	r3, [sp, #4]
   ba6ee:	bd08      	pop	{r3, pc}
   ba6f0:	00030218 	.word	0x00030218

000ba6f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   ba6f4:	b508      	push	{r3, lr}
   ba6f6:	4b02      	ldr	r3, [pc, #8]	; (ba700 <HAL_Timer_Get_Milli_Seconds+0xc>)
   ba6f8:	681b      	ldr	r3, [r3, #0]
   ba6fa:	695b      	ldr	r3, [r3, #20]
   ba6fc:	9301      	str	r3, [sp, #4]
   ba6fe:	bd08      	pop	{r3, pc}
   ba700:	00030218 	.word	0x00030218

000ba704 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   ba704:	b508      	push	{r3, lr}
   ba706:	4b02      	ldr	r3, [pc, #8]	; (ba710 <hal_rtc_time_is_valid+0xc>)
   ba708:	681b      	ldr	r3, [r3, #0]
   ba70a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba70c:	9301      	str	r3, [sp, #4]
   ba70e:	bd08      	pop	{r3, pc}
   ba710:	00030218 	.word	0x00030218

000ba714 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   ba714:	b508      	push	{r3, lr}
   ba716:	4b02      	ldr	r3, [pc, #8]	; (ba720 <hal_timer_millis+0xc>)
   ba718:	681b      	ldr	r3, [r3, #0]
   ba71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   ba71c:	9301      	str	r3, [sp, #4]
   ba71e:	bd08      	pop	{r3, pc}
   ba720:	00030218 	.word	0x00030218

000ba724 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   ba724:	b508      	push	{r3, lr}
   ba726:	4b02      	ldr	r3, [pc, #8]	; (ba730 <hal_rtc_get_time+0xc>)
   ba728:	681b      	ldr	r3, [r3, #0]
   ba72a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   ba72c:	9301      	str	r3, [sp, #4]
   ba72e:	bd08      	pop	{r3, pc}
   ba730:	00030218 	.word	0x00030218

000ba734 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   ba734:	b508      	push	{r3, lr}
   ba736:	4b02      	ldr	r3, [pc, #8]	; (ba740 <hal_rtc_set_time+0xc>)
   ba738:	681b      	ldr	r3, [r3, #0]
   ba73a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   ba73c:	9301      	str	r3, [sp, #4]
   ba73e:	bd08      	pop	{r3, pc}
   ba740:	00030218 	.word	0x00030218

000ba744 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   ba744:	b508      	push	{r3, lr}
   ba746:	4b02      	ldr	r3, [pc, #8]	; (ba750 <HAL_Validate_Pin_Function+0xc>)
   ba748:	681b      	ldr	r3, [r3, #0]
   ba74a:	685b      	ldr	r3, [r3, #4]
   ba74c:	9301      	str	r3, [sp, #4]
   ba74e:	bd08      	pop	{r3, pc}
   ba750:	0003022c 	.word	0x0003022c

000ba754 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   ba754:	b508      	push	{r3, lr}
   ba756:	4b02      	ldr	r3, [pc, #8]	; (ba760 <HAL_Pin_Mode+0xc>)
   ba758:	681b      	ldr	r3, [r3, #0]
   ba75a:	689b      	ldr	r3, [r3, #8]
   ba75c:	9301      	str	r3, [sp, #4]
   ba75e:	bd08      	pop	{r3, pc}
   ba760:	0003022c 	.word	0x0003022c

000ba764 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   ba764:	b508      	push	{r3, lr}
   ba766:	4b02      	ldr	r3, [pc, #8]	; (ba770 <HAL_Get_Pin_Mode+0xc>)
   ba768:	681b      	ldr	r3, [r3, #0]
   ba76a:	68db      	ldr	r3, [r3, #12]
   ba76c:	9301      	str	r3, [sp, #4]
   ba76e:	bd08      	pop	{r3, pc}
   ba770:	0003022c 	.word	0x0003022c

000ba774 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   ba774:	b508      	push	{r3, lr}
   ba776:	4b02      	ldr	r3, [pc, #8]	; (ba780 <HAL_GPIO_Write+0xc>)
   ba778:	681b      	ldr	r3, [r3, #0]
   ba77a:	691b      	ldr	r3, [r3, #16]
   ba77c:	9301      	str	r3, [sp, #4]
   ba77e:	bd08      	pop	{r3, pc}
   ba780:	0003022c 	.word	0x0003022c

000ba784 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   ba784:	b508      	push	{r3, lr}
   ba786:	4b02      	ldr	r3, [pc, #8]	; (ba790 <HAL_GPIO_Read+0xc>)
   ba788:	681b      	ldr	r3, [r3, #0]
   ba78a:	695b      	ldr	r3, [r3, #20]
   ba78c:	9301      	str	r3, [sp, #4]
   ba78e:	bd08      	pop	{r3, pc}
   ba790:	0003022c 	.word	0x0003022c

000ba794 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   ba794:	b508      	push	{r3, lr}
   ba796:	4b02      	ldr	r3, [pc, #8]	; (ba7a0 <HAL_Interrupts_Attach+0xc>)
   ba798:	681b      	ldr	r3, [r3, #0]
   ba79a:	699b      	ldr	r3, [r3, #24]
   ba79c:	9301      	str	r3, [sp, #4]
   ba79e:	bd08      	pop	{r3, pc}
   ba7a0:	0003022c 	.word	0x0003022c

000ba7a4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   ba7a4:	b508      	push	{r3, lr}
   ba7a6:	4b02      	ldr	r3, [pc, #8]	; (ba7b0 <HAL_Interrupts_Detach+0xc>)
   ba7a8:	681b      	ldr	r3, [r3, #0]
   ba7aa:	69db      	ldr	r3, [r3, #28]
   ba7ac:	9301      	str	r3, [sp, #4]
   ba7ae:	bd08      	pop	{r3, pc}
   ba7b0:	0003022c 	.word	0x0003022c

000ba7b4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   ba7b4:	b508      	push	{r3, lr}
   ba7b6:	4b02      	ldr	r3, [pc, #8]	; (ba7c0 <hal_adc_read+0xc>)
   ba7b8:	681b      	ldr	r3, [r3, #0]
   ba7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba7bc:	9301      	str	r3, [sp, #4]
   ba7be:	bd08      	pop	{r3, pc}
   ba7c0:	0003022c 	.word	0x0003022c

000ba7c4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   ba7c4:	b508      	push	{r3, lr}
   ba7c6:	4b02      	ldr	r3, [pc, #8]	; (ba7d0 <hal_i2c_begin+0xc>)
   ba7c8:	681b      	ldr	r3, [r3, #0]
   ba7ca:	68db      	ldr	r3, [r3, #12]
   ba7cc:	9301      	str	r3, [sp, #4]
   ba7ce:	bd08      	pop	{r3, pc}
   ba7d0:	00030228 	.word	0x00030228

000ba7d4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   ba7d4:	b508      	push	{r3, lr}
   ba7d6:	4b02      	ldr	r3, [pc, #8]	; (ba7e0 <hal_i2c_begin_transmission+0xc>)
   ba7d8:	681b      	ldr	r3, [r3, #0]
   ba7da:	699b      	ldr	r3, [r3, #24]
   ba7dc:	9301      	str	r3, [sp, #4]
   ba7de:	bd08      	pop	{r3, pc}
   ba7e0:	00030228 	.word	0x00030228

000ba7e4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   ba7e4:	b508      	push	{r3, lr}
   ba7e6:	4b02      	ldr	r3, [pc, #8]	; (ba7f0 <hal_i2c_end_transmission+0xc>)
   ba7e8:	681b      	ldr	r3, [r3, #0]
   ba7ea:	69db      	ldr	r3, [r3, #28]
   ba7ec:	9301      	str	r3, [sp, #4]
   ba7ee:	bd08      	pop	{r3, pc}
   ba7f0:	00030228 	.word	0x00030228

000ba7f4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   ba7f4:	b508      	push	{r3, lr}
   ba7f6:	4b02      	ldr	r3, [pc, #8]	; (ba800 <hal_i2c_write+0xc>)
   ba7f8:	681b      	ldr	r3, [r3, #0]
   ba7fa:	6a1b      	ldr	r3, [r3, #32]
   ba7fc:	9301      	str	r3, [sp, #4]
   ba7fe:	bd08      	pop	{r3, pc}
   ba800:	00030228 	.word	0x00030228

000ba804 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   ba804:	b508      	push	{r3, lr}
   ba806:	4b02      	ldr	r3, [pc, #8]	; (ba810 <hal_i2c_available+0xc>)
   ba808:	681b      	ldr	r3, [r3, #0]
   ba80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba80c:	9301      	str	r3, [sp, #4]
   ba80e:	bd08      	pop	{r3, pc}
   ba810:	00030228 	.word	0x00030228

000ba814 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   ba814:	b508      	push	{r3, lr}
   ba816:	4b02      	ldr	r3, [pc, #8]	; (ba820 <hal_i2c_read+0xc>)
   ba818:	681b      	ldr	r3, [r3, #0]
   ba81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba81c:	9301      	str	r3, [sp, #4]
   ba81e:	bd08      	pop	{r3, pc}
   ba820:	00030228 	.word	0x00030228

000ba824 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   ba824:	b508      	push	{r3, lr}
   ba826:	4b02      	ldr	r3, [pc, #8]	; (ba830 <hal_i2c_peek+0xc>)
   ba828:	681b      	ldr	r3, [r3, #0]
   ba82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba82c:	9301      	str	r3, [sp, #4]
   ba82e:	bd08      	pop	{r3, pc}
   ba830:	00030228 	.word	0x00030228

000ba834 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   ba834:	b508      	push	{r3, lr}
   ba836:	4b02      	ldr	r3, [pc, #8]	; (ba840 <hal_i2c_flush+0xc>)
   ba838:	681b      	ldr	r3, [r3, #0]
   ba83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba83c:	9301      	str	r3, [sp, #4]
   ba83e:	bd08      	pop	{r3, pc}
   ba840:	00030228 	.word	0x00030228

000ba844 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   ba844:	b508      	push	{r3, lr}
   ba846:	4b02      	ldr	r3, [pc, #8]	; (ba850 <hal_i2c_is_enabled+0xc>)
   ba848:	681b      	ldr	r3, [r3, #0]
   ba84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba84c:	9301      	str	r3, [sp, #4]
   ba84e:	bd08      	pop	{r3, pc}
   ba850:	00030228 	.word	0x00030228

000ba854 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   ba854:	b508      	push	{r3, lr}
   ba856:	4b02      	ldr	r3, [pc, #8]	; (ba860 <hal_i2c_init+0xc>)
   ba858:	681b      	ldr	r3, [r3, #0]
   ba85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba85c:	9301      	str	r3, [sp, #4]
   ba85e:	bd08      	pop	{r3, pc}
   ba860:	00030228 	.word	0x00030228

000ba864 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   ba864:	b508      	push	{r3, lr}
   ba866:	4b02      	ldr	r3, [pc, #8]	; (ba870 <hal_i2c_lock+0xc>)
   ba868:	681b      	ldr	r3, [r3, #0]
   ba86a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba86c:	9301      	str	r3, [sp, #4]
   ba86e:	bd08      	pop	{r3, pc}
   ba870:	00030228 	.word	0x00030228

000ba874 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   ba874:	b508      	push	{r3, lr}
   ba876:	4b02      	ldr	r3, [pc, #8]	; (ba880 <hal_i2c_unlock+0xc>)
   ba878:	681b      	ldr	r3, [r3, #0]
   ba87a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba87c:	9301      	str	r3, [sp, #4]
   ba87e:	bd08      	pop	{r3, pc}
   ba880:	00030228 	.word	0x00030228

000ba884 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   ba884:	b508      	push	{r3, lr}
   ba886:	4b02      	ldr	r3, [pc, #8]	; (ba890 <hal_i2c_request_ex+0xc>)
   ba888:	681b      	ldr	r3, [r3, #0]
   ba88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba88c:	9301      	str	r3, [sp, #4]
   ba88e:	bd08      	pop	{r3, pc}
   ba890:	00030228 	.word	0x00030228

000ba894 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   ba894:	b508      	push	{r3, lr}
   ba896:	4b02      	ldr	r3, [pc, #8]	; (ba8a0 <inet_inet_ntop+0xc>)
   ba898:	681b      	ldr	r3, [r3, #0]
   ba89a:	695b      	ldr	r3, [r3, #20]
   ba89c:	9301      	str	r3, [sp, #4]
   ba89e:	bd08      	pop	{r3, pc}
   ba8a0:	00030264 	.word	0x00030264

000ba8a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   ba8a4:	b508      	push	{r3, lr}
   ba8a6:	4b02      	ldr	r3, [pc, #8]	; (ba8b0 <netdb_freeaddrinfo+0xc>)
   ba8a8:	681b      	ldr	r3, [r3, #0]
   ba8aa:	689b      	ldr	r3, [r3, #8]
   ba8ac:	9301      	str	r3, [sp, #4]
   ba8ae:	bd08      	pop	{r3, pc}
   ba8b0:	00030268 	.word	0x00030268

000ba8b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   ba8b4:	b508      	push	{r3, lr}
   ba8b6:	4b02      	ldr	r3, [pc, #8]	; (ba8c0 <netdb_getaddrinfo+0xc>)
   ba8b8:	681b      	ldr	r3, [r3, #0]
   ba8ba:	68db      	ldr	r3, [r3, #12]
   ba8bc:	9301      	str	r3, [sp, #4]
   ba8be:	bd08      	pop	{r3, pc}
   ba8c0:	00030268 	.word	0x00030268

000ba8c4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   ba8c4:	b508      	push	{r3, lr}
   ba8c6:	4b02      	ldr	r3, [pc, #8]	; (ba8d0 <hal_spi_begin+0xc>)
   ba8c8:	681b      	ldr	r3, [r3, #0]
   ba8ca:	681b      	ldr	r3, [r3, #0]
   ba8cc:	9301      	str	r3, [sp, #4]
   ba8ce:	bd08      	pop	{r3, pc}
   ba8d0:	00030230 	.word	0x00030230

000ba8d4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   ba8d4:	b508      	push	{r3, lr}
   ba8d6:	4b02      	ldr	r3, [pc, #8]	; (ba8e0 <hal_spi_end+0xc>)
   ba8d8:	681b      	ldr	r3, [r3, #0]
   ba8da:	685b      	ldr	r3, [r3, #4]
   ba8dc:	9301      	str	r3, [sp, #4]
   ba8de:	bd08      	pop	{r3, pc}
   ba8e0:	00030230 	.word	0x00030230

000ba8e4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   ba8e4:	b508      	push	{r3, lr}
   ba8e6:	4b02      	ldr	r3, [pc, #8]	; (ba8f0 <hal_spi_transfer+0xc>)
   ba8e8:	681b      	ldr	r3, [r3, #0]
   ba8ea:	695b      	ldr	r3, [r3, #20]
   ba8ec:	9301      	str	r3, [sp, #4]
   ba8ee:	bd08      	pop	{r3, pc}
   ba8f0:	00030230 	.word	0x00030230

000ba8f4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   ba8f4:	b508      	push	{r3, lr}
   ba8f6:	4b02      	ldr	r3, [pc, #8]	; (ba900 <hal_spi_init+0xc>)
   ba8f8:	681b      	ldr	r3, [r3, #0]
   ba8fa:	69db      	ldr	r3, [r3, #28]
   ba8fc:	9301      	str	r3, [sp, #4]
   ba8fe:	bd08      	pop	{r3, pc}
   ba900:	00030230 	.word	0x00030230

000ba904 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   ba904:	b508      	push	{r3, lr}
   ba906:	4b02      	ldr	r3, [pc, #8]	; (ba910 <hal_spi_is_enabled+0xc>)
   ba908:	681b      	ldr	r3, [r3, #0]
   ba90a:	6a1b      	ldr	r3, [r3, #32]
   ba90c:	9301      	str	r3, [sp, #4]
   ba90e:	bd08      	pop	{r3, pc}
   ba910:	00030230 	.word	0x00030230

000ba914 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   ba914:	b508      	push	{r3, lr}
   ba916:	4b02      	ldr	r3, [pc, #8]	; (ba920 <hal_spi_info+0xc>)
   ba918:	681b      	ldr	r3, [r3, #0]
   ba91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba91c:	9301      	str	r3, [sp, #4]
   ba91e:	bd08      	pop	{r3, pc}
   ba920:	00030230 	.word	0x00030230

000ba924 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   ba924:	b508      	push	{r3, lr}
   ba926:	4b02      	ldr	r3, [pc, #8]	; (ba930 <hal_spi_set_settings+0xc>)
   ba928:	681b      	ldr	r3, [r3, #0]
   ba92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba92c:	9301      	str	r3, [sp, #4]
   ba92e:	bd08      	pop	{r3, pc}
   ba930:	00030230 	.word	0x00030230

000ba934 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   ba934:	b508      	push	{r3, lr}
   ba936:	4b02      	ldr	r3, [pc, #8]	; (ba940 <hal_spi_acquire+0xc>)
   ba938:	681b      	ldr	r3, [r3, #0]
   ba93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba93c:	9301      	str	r3, [sp, #4]
   ba93e:	bd08      	pop	{r3, pc}
   ba940:	00030230 	.word	0x00030230

000ba944 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   ba944:	b508      	push	{r3, lr}
   ba946:	4b02      	ldr	r3, [pc, #8]	; (ba950 <hal_spi_release+0xc>)
   ba948:	681b      	ldr	r3, [r3, #0]
   ba94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba94c:	9301      	str	r3, [sp, #4]
   ba94e:	bd08      	pop	{r3, pc}
   ba950:	00030230 	.word	0x00030230

000ba954 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   ba954:	b508      	push	{r3, lr}
   ba956:	4b02      	ldr	r3, [pc, #8]	; (ba960 <_open+0xc>)
   ba958:	681b      	ldr	r3, [r3, #0]
   ba95a:	681b      	ldr	r3, [r3, #0]
   ba95c:	9301      	str	r3, [sp, #4]
   ba95e:	bd08      	pop	{r3, pc}
   ba960:	00030284 	.word	0x00030284

000ba964 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   ba964:	b508      	push	{r3, lr}
   ba966:	4b02      	ldr	r3, [pc, #8]	; (ba970 <_write+0xc>)
   ba968:	681b      	ldr	r3, [r3, #0]
   ba96a:	685b      	ldr	r3, [r3, #4]
   ba96c:	9301      	str	r3, [sp, #4]
   ba96e:	bd08      	pop	{r3, pc}
   ba970:	00030284 	.word	0x00030284

000ba974 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   ba974:	b508      	push	{r3, lr}
   ba976:	4b02      	ldr	r3, [pc, #8]	; (ba980 <_read+0xc>)
   ba978:	681b      	ldr	r3, [r3, #0]
   ba97a:	689b      	ldr	r3, [r3, #8]
   ba97c:	9301      	str	r3, [sp, #4]
   ba97e:	bd08      	pop	{r3, pc}
   ba980:	00030284 	.word	0x00030284

000ba984 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   ba984:	b508      	push	{r3, lr}
   ba986:	4b02      	ldr	r3, [pc, #8]	; (ba990 <_close+0xc>)
   ba988:	681b      	ldr	r3, [r3, #0]
   ba98a:	68db      	ldr	r3, [r3, #12]
   ba98c:	9301      	str	r3, [sp, #4]
   ba98e:	bd08      	pop	{r3, pc}
   ba990:	00030284 	.word	0x00030284

000ba994 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   ba994:	b508      	push	{r3, lr}
   ba996:	4b02      	ldr	r3, [pc, #8]	; (ba9a0 <_fstat+0xc>)
   ba998:	681b      	ldr	r3, [r3, #0]
   ba99a:	695b      	ldr	r3, [r3, #20]
   ba99c:	9301      	str	r3, [sp, #4]
   ba99e:	bd08      	pop	{r3, pc}
   ba9a0:	00030284 	.word	0x00030284

000ba9a4 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   ba9a4:	b508      	push	{r3, lr}
   ba9a6:	4b02      	ldr	r3, [pc, #8]	; (ba9b0 <_lseek+0xc>)
   ba9a8:	681b      	ldr	r3, [r3, #0]
   ba9aa:	6a1b      	ldr	r3, [r3, #32]
   ba9ac:	9301      	str	r3, [sp, #4]
   ba9ae:	bd08      	pop	{r3, pc}
   ba9b0:	00030284 	.word	0x00030284

000ba9b4 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   ba9b4:	b508      	push	{r3, lr}
   ba9b6:	4b02      	ldr	r3, [pc, #8]	; (ba9c0 <stat+0xc>)
   ba9b8:	681b      	ldr	r3, [r3, #0]
   ba9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba9bc:	9301      	str	r3, [sp, #4]
   ba9be:	bd08      	pop	{r3, pc}
   ba9c0:	00030284 	.word	0x00030284

000ba9c4 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   ba9c4:	b508      	push	{r3, lr}
   ba9c6:	4b02      	ldr	r3, [pc, #8]	; (ba9d0 <mkdir+0xc>)
   ba9c8:	681b      	ldr	r3, [r3, #0]
   ba9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba9cc:	9301      	str	r3, [sp, #4]
   ba9ce:	bd08      	pop	{r3, pc}
   ba9d0:	00030284 	.word	0x00030284

000ba9d4 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   ba9d4:	b508      	push	{r3, lr}
   ba9d6:	4b02      	ldr	r3, [pc, #8]	; (ba9e0 <_unlink+0xc>)
   ba9d8:	681b      	ldr	r3, [r3, #0]
   ba9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba9dc:	9301      	str	r3, [sp, #4]
   ba9de:	bd08      	pop	{r3, pc}
   ba9e0:	00030284 	.word	0x00030284

000ba9e4 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   ba9e4:	b508      	push	{r3, lr}
   ba9e6:	4b02      	ldr	r3, [pc, #8]	; (ba9f0 <opendir+0xc>)
   ba9e8:	681b      	ldr	r3, [r3, #0]
   ba9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba9ec:	9301      	str	r3, [sp, #4]
   ba9ee:	bd08      	pop	{r3, pc}
   ba9f0:	00030284 	.word	0x00030284

000ba9f4 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   ba9f4:	b508      	push	{r3, lr}
   ba9f6:	4b02      	ldr	r3, [pc, #8]	; (baa00 <readdir+0xc>)
   ba9f8:	681b      	ldr	r3, [r3, #0]
   ba9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba9fc:	9301      	str	r3, [sp, #4]
   ba9fe:	bd08      	pop	{r3, pc}
   baa00:	00030284 	.word	0x00030284

000baa04 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   baa04:	b508      	push	{r3, lr}
   baa06:	4b02      	ldr	r3, [pc, #8]	; (baa10 <closedir+0xc>)
   baa08:	681b      	ldr	r3, [r3, #0]
   baa0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   baa0c:	9301      	str	r3, [sp, #4]
   baa0e:	bd08      	pop	{r3, pc}
   baa10:	00030284 	.word	0x00030284

000baa14 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   baa14:	b508      	push	{r3, lr}
   baa16:	4b02      	ldr	r3, [pc, #8]	; (baa20 <hal_usart_end+0xc>)
   baa18:	681b      	ldr	r3, [r3, #0]
   baa1a:	689b      	ldr	r3, [r3, #8]
   baa1c:	9301      	str	r3, [sp, #4]
   baa1e:	bd08      	pop	{r3, pc}
   baa20:	0003023c 	.word	0x0003023c

000baa24 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   baa24:	b508      	push	{r3, lr}
   baa26:	4b02      	ldr	r3, [pc, #8]	; (baa30 <hal_usart_write+0xc>)
   baa28:	681b      	ldr	r3, [r3, #0]
   baa2a:	68db      	ldr	r3, [r3, #12]
   baa2c:	9301      	str	r3, [sp, #4]
   baa2e:	bd08      	pop	{r3, pc}
   baa30:	0003023c 	.word	0x0003023c

000baa34 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   baa34:	b508      	push	{r3, lr}
   baa36:	4b02      	ldr	r3, [pc, #8]	; (baa40 <hal_usart_available+0xc>)
   baa38:	681b      	ldr	r3, [r3, #0]
   baa3a:	691b      	ldr	r3, [r3, #16]
   baa3c:	9301      	str	r3, [sp, #4]
   baa3e:	bd08      	pop	{r3, pc}
   baa40:	0003023c 	.word	0x0003023c

000baa44 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   baa44:	b508      	push	{r3, lr}
   baa46:	4b02      	ldr	r3, [pc, #8]	; (baa50 <hal_usart_read+0xc>)
   baa48:	681b      	ldr	r3, [r3, #0]
   baa4a:	695b      	ldr	r3, [r3, #20]
   baa4c:	9301      	str	r3, [sp, #4]
   baa4e:	bd08      	pop	{r3, pc}
   baa50:	0003023c 	.word	0x0003023c

000baa54 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   baa54:	b508      	push	{r3, lr}
   baa56:	4b02      	ldr	r3, [pc, #8]	; (baa60 <hal_usart_peek+0xc>)
   baa58:	681b      	ldr	r3, [r3, #0]
   baa5a:	699b      	ldr	r3, [r3, #24]
   baa5c:	9301      	str	r3, [sp, #4]
   baa5e:	bd08      	pop	{r3, pc}
   baa60:	0003023c 	.word	0x0003023c

000baa64 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   baa64:	b508      	push	{r3, lr}
   baa66:	4b02      	ldr	r3, [pc, #8]	; (baa70 <hal_usart_flush+0xc>)
   baa68:	681b      	ldr	r3, [r3, #0]
   baa6a:	69db      	ldr	r3, [r3, #28]
   baa6c:	9301      	str	r3, [sp, #4]
   baa6e:	bd08      	pop	{r3, pc}
   baa70:	0003023c 	.word	0x0003023c

000baa74 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   baa74:	b508      	push	{r3, lr}
   baa76:	4b02      	ldr	r3, [pc, #8]	; (baa80 <hal_usart_is_enabled+0xc>)
   baa78:	681b      	ldr	r3, [r3, #0]
   baa7a:	6a1b      	ldr	r3, [r3, #32]
   baa7c:	9301      	str	r3, [sp, #4]
   baa7e:	bd08      	pop	{r3, pc}
   baa80:	0003023c 	.word	0x0003023c

000baa84 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   baa84:	b508      	push	{r3, lr}
   baa86:	4b02      	ldr	r3, [pc, #8]	; (baa90 <hal_usart_available_data_for_write+0xc>)
   baa88:	681b      	ldr	r3, [r3, #0]
   baa8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   baa8c:	9301      	str	r3, [sp, #4]
   baa8e:	bd08      	pop	{r3, pc}
   baa90:	0003023c 	.word	0x0003023c

000baa94 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   baa94:	b508      	push	{r3, lr}
   baa96:	4b02      	ldr	r3, [pc, #8]	; (baaa0 <hal_usart_begin_config+0xc>)
   baa98:	681b      	ldr	r3, [r3, #0]
   baa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   baa9c:	9301      	str	r3, [sp, #4]
   baa9e:	bd08      	pop	{r3, pc}
   baaa0:	0003023c 	.word	0x0003023c

000baaa4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   baaa4:	b508      	push	{r3, lr}
   baaa6:	4b02      	ldr	r3, [pc, #8]	; (baab0 <hal_usart_init_ex+0xc>)
   baaa8:	681b      	ldr	r3, [r3, #0]
   baaaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baaac:	9301      	str	r3, [sp, #4]
   baaae:	bd08      	pop	{r3, pc}
   baab0:	0003023c 	.word	0x0003023c

000baab4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   baab4:	b508      	push	{r3, lr}
   baab6:	4b02      	ldr	r3, [pc, #8]	; (baac0 <HAL_USB_USART_Init+0xc>)
   baab8:	681b      	ldr	r3, [r3, #0]
   baaba:	681b      	ldr	r3, [r3, #0]
   baabc:	9301      	str	r3, [sp, #4]
   baabe:	bd08      	pop	{r3, pc}
   baac0:	0003024c 	.word	0x0003024c

000baac4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   baac4:	b508      	push	{r3, lr}
   baac6:	4b02      	ldr	r3, [pc, #8]	; (baad0 <HAL_USB_USART_Begin+0xc>)
   baac8:	681b      	ldr	r3, [r3, #0]
   baaca:	685b      	ldr	r3, [r3, #4]
   baacc:	9301      	str	r3, [sp, #4]
   baace:	bd08      	pop	{r3, pc}
   baad0:	0003024c 	.word	0x0003024c

000baad4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   baad4:	b508      	push	{r3, lr}
   baad6:	4b02      	ldr	r3, [pc, #8]	; (baae0 <HAL_USB_USART_End+0xc>)
   baad8:	681b      	ldr	r3, [r3, #0]
   baada:	689b      	ldr	r3, [r3, #8]
   baadc:	9301      	str	r3, [sp, #4]
   baade:	bd08      	pop	{r3, pc}
   baae0:	0003024c 	.word	0x0003024c

000baae4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   baae4:	b508      	push	{r3, lr}
   baae6:	4b02      	ldr	r3, [pc, #8]	; (baaf0 <HAL_USB_USART_Available_Data+0xc>)
   baae8:	681b      	ldr	r3, [r3, #0]
   baaea:	691b      	ldr	r3, [r3, #16]
   baaec:	9301      	str	r3, [sp, #4]
   baaee:	bd08      	pop	{r3, pc}
   baaf0:	0003024c 	.word	0x0003024c

000baaf4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   baaf4:	b508      	push	{r3, lr}
   baaf6:	4b02      	ldr	r3, [pc, #8]	; (bab00 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   baaf8:	681b      	ldr	r3, [r3, #0]
   baafa:	695b      	ldr	r3, [r3, #20]
   baafc:	9301      	str	r3, [sp, #4]
   baafe:	bd08      	pop	{r3, pc}
   bab00:	0003024c 	.word	0x0003024c

000bab04 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bab04:	b508      	push	{r3, lr}
   bab06:	4b02      	ldr	r3, [pc, #8]	; (bab10 <HAL_USB_USART_Receive_Data+0xc>)
   bab08:	681b      	ldr	r3, [r3, #0]
   bab0a:	699b      	ldr	r3, [r3, #24]
   bab0c:	9301      	str	r3, [sp, #4]
   bab0e:	bd08      	pop	{r3, pc}
   bab10:	0003024c 	.word	0x0003024c

000bab14 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bab14:	b508      	push	{r3, lr}
   bab16:	4b02      	ldr	r3, [pc, #8]	; (bab20 <HAL_USB_USART_Send_Data+0xc>)
   bab18:	681b      	ldr	r3, [r3, #0]
   bab1a:	69db      	ldr	r3, [r3, #28]
   bab1c:	9301      	str	r3, [sp, #4]
   bab1e:	bd08      	pop	{r3, pc}
   bab20:	0003024c 	.word	0x0003024c

000bab24 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bab24:	b508      	push	{r3, lr}
   bab26:	4b02      	ldr	r3, [pc, #8]	; (bab30 <HAL_USB_USART_Flush_Data+0xc>)
   bab28:	681b      	ldr	r3, [r3, #0]
   bab2a:	6a1b      	ldr	r3, [r3, #32]
   bab2c:	9301      	str	r3, [sp, #4]
   bab2e:	bd08      	pop	{r3, pc}
   bab30:	0003024c 	.word	0x0003024c

000bab34 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bab34:	b508      	push	{r3, lr}
   bab36:	4b02      	ldr	r3, [pc, #8]	; (bab40 <HAL_USB_USART_Is_Connected+0xc>)
   bab38:	681b      	ldr	r3, [r3, #0]
   bab3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bab3c:	9301      	str	r3, [sp, #4]
   bab3e:	bd08      	pop	{r3, pc}
   bab40:	0003024c 	.word	0x0003024c

000bab44 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bab44:	b508      	push	{r3, lr}
   bab46:	4b02      	ldr	r3, [pc, #8]	; (bab50 <panic_+0xc>)
   bab48:	681b      	ldr	r3, [r3, #0]
   bab4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bab4c:	9301      	str	r3, [sp, #4]
   bab4e:	bd08      	pop	{r3, pc}
   bab50:	00030260 	.word	0x00030260

000bab54 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bab54:	b508      	push	{r3, lr}
   bab56:	4b02      	ldr	r3, [pc, #8]	; (bab60 <log_message+0xc>)
   bab58:	681b      	ldr	r3, [r3, #0]
   bab5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bab5c:	9301      	str	r3, [sp, #4]
   bab5e:	bd08      	pop	{r3, pc}
   bab60:	00030260 	.word	0x00030260

000bab64 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bab64:	b508      	push	{r3, lr}
   bab66:	4b02      	ldr	r3, [pc, #8]	; (bab70 <log_message_v+0xc>)
   bab68:	681b      	ldr	r3, [r3, #0]
   bab6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bab6c:	9301      	str	r3, [sp, #4]
   bab6e:	bd08      	pop	{r3, pc}
   bab70:	00030260 	.word	0x00030260

000bab74 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bab74:	b508      	push	{r3, lr}
   bab76:	4b02      	ldr	r3, [pc, #8]	; (bab80 <log_level_name+0xc>)
   bab78:	681b      	ldr	r3, [r3, #0]
   bab7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bab7c:	9301      	str	r3, [sp, #4]
   bab7e:	bd08      	pop	{r3, pc}
   bab80:	00030260 	.word	0x00030260

000bab84 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bab84:	b508      	push	{r3, lr}
   bab86:	4b02      	ldr	r3, [pc, #8]	; (bab90 <log_set_callbacks+0xc>)
   bab88:	681b      	ldr	r3, [r3, #0]
   bab8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bab8c:	9301      	str	r3, [sp, #4]
   bab8e:	bd08      	pop	{r3, pc}
   bab90:	00030260 	.word	0x00030260

000bab94 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bab94:	b508      	push	{r3, lr}
   bab96:	4b03      	ldr	r3, [pc, #12]	; (baba4 <diag_get_source+0x10>)
   bab98:	681b      	ldr	r3, [r3, #0]
   bab9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bab9e:	9301      	str	r3, [sp, #4]
   baba0:	bd08      	pop	{r3, pc}
   baba2:	0000      	.short	0x0000
   baba4:	00030260 	.word	0x00030260

000baba8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   baba8:	b508      	push	{r3, lr}
   babaa:	4b02      	ldr	r3, [pc, #8]	; (babb4 <system_mode+0xc>)
   babac:	681b      	ldr	r3, [r3, #0]
   babae:	681b      	ldr	r3, [r3, #0]
   babb0:	9301      	str	r3, [sp, #4]
   babb2:	bd08      	pop	{r3, pc}
   babb4:	00030220 	.word	0x00030220

000babb8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   babb8:	b508      	push	{r3, lr}
   babba:	4b02      	ldr	r3, [pc, #8]	; (babc4 <set_system_mode+0xc>)
   babbc:	681b      	ldr	r3, [r3, #0]
   babbe:	685b      	ldr	r3, [r3, #4]
   babc0:	9301      	str	r3, [sp, #4]
   babc2:	bd08      	pop	{r3, pc}
   babc4:	00030220 	.word	0x00030220

000babc8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   babc8:	b508      	push	{r3, lr}
   babca:	4b02      	ldr	r3, [pc, #8]	; (babd4 <system_delay_ms+0xc>)
   babcc:	681b      	ldr	r3, [r3, #0]
   babce:	695b      	ldr	r3, [r3, #20]
   babd0:	9301      	str	r3, [sp, #4]
   babd2:	bd08      	pop	{r3, pc}
   babd4:	00030220 	.word	0x00030220

000babd8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   babd8:	b508      	push	{r3, lr}
   babda:	4b02      	ldr	r3, [pc, #8]	; (babe4 <system_subscribe_event+0xc>)
   babdc:	681b      	ldr	r3, [r3, #0]
   babde:	6a1b      	ldr	r3, [r3, #32]
   babe0:	9301      	str	r3, [sp, #4]
   babe2:	bd08      	pop	{r3, pc}
   babe4:	00030220 	.word	0x00030220

000babe8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   babe8:	b508      	push	{r3, lr}
   babea:	4b02      	ldr	r3, [pc, #8]	; (babf4 <system_thread_set_state+0xc>)
   babec:	681b      	ldr	r3, [r3, #0]
   babee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   babf0:	9301      	str	r3, [sp, #4]
   babf2:	bd08      	pop	{r3, pc}
   babf4:	00030220 	.word	0x00030220

000babf8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   babf8:	b508      	push	{r3, lr}
   babfa:	4b02      	ldr	r3, [pc, #8]	; (bac04 <application_thread_current+0xc>)
   babfc:	681b      	ldr	r3, [r3, #0]
   babfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bac00:	9301      	str	r3, [sp, #4]
   bac02:	bd08      	pop	{r3, pc}
   bac04:	00030220 	.word	0x00030220

000bac08 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bac08:	b508      	push	{r3, lr}
   bac0a:	4b02      	ldr	r3, [pc, #8]	; (bac14 <application_thread_invoke+0xc>)
   bac0c:	681b      	ldr	r3, [r3, #0]
   bac0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bac10:	9301      	str	r3, [sp, #4]
   bac12:	bd08      	pop	{r3, pc}
   bac14:	00030220 	.word	0x00030220

000bac18 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bac18:	b508      	push	{r3, lr}
   bac1a:	4b02      	ldr	r3, [pc, #8]	; (bac24 <system_thread_get_state+0xc>)
   bac1c:	681b      	ldr	r3, [r3, #0]
   bac1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bac20:	9301      	str	r3, [sp, #4]
   bac22:	bd08      	pop	{r3, pc}
   bac24:	00030220 	.word	0x00030220

000bac28 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bac28:	b508      	push	{r3, lr}
   bac2a:	4b02      	ldr	r3, [pc, #8]	; (bac34 <system_notify_time_changed+0xc>)
   bac2c:	681b      	ldr	r3, [r3, #0]
   bac2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bac30:	9301      	str	r3, [sp, #4]
   bac32:	bd08      	pop	{r3, pc}
   bac34:	00030220 	.word	0x00030220

000bac38 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bac38:	b508      	push	{r3, lr}
   bac3a:	4b03      	ldr	r3, [pc, #12]	; (bac48 <system_ctrl_set_app_request_handler+0x10>)
   bac3c:	681b      	ldr	r3, [r3, #0]
   bac3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bac42:	9301      	str	r3, [sp, #4]
   bac44:	bd08      	pop	{r3, pc}
   bac46:	0000      	.short	0x0000
   bac48:	00030220 	.word	0x00030220

000bac4c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bac4c:	b508      	push	{r3, lr}
   bac4e:	4b03      	ldr	r3, [pc, #12]	; (bac5c <system_ctrl_set_result+0x10>)
   bac50:	681b      	ldr	r3, [r3, #0]
   bac52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bac56:	9301      	str	r3, [sp, #4]
   bac58:	bd08      	pop	{r3, pc}
   bac5a:	0000      	.short	0x0000
   bac5c:	00030220 	.word	0x00030220

000bac60 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bac60:	b508      	push	{r3, lr}
   bac62:	4b03      	ldr	r3, [pc, #12]	; (bac70 <system_power_management_set_config+0x10>)
   bac64:	681b      	ldr	r3, [r3, #0]
   bac66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bac6a:	9301      	str	r3, [sp, #4]
   bac6c:	bd08      	pop	{r3, pc}
   bac6e:	0000      	.short	0x0000
   bac70:	00030220 	.word	0x00030220

000bac74 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bac74:	b508      	push	{r3, lr}
   bac76:	4b03      	ldr	r3, [pc, #12]	; (bac84 <system_sleep_ext+0x10>)
   bac78:	681b      	ldr	r3, [r3, #0]
   bac7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bac7e:	9301      	str	r3, [sp, #4]
   bac80:	bd08      	pop	{r3, pc}
   bac82:	0000      	.short	0x0000
   bac84:	00030220 	.word	0x00030220

000bac88 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bac88:	b508      	push	{r3, lr}
   bac8a:	4b03      	ldr	r3, [pc, #12]	; (bac98 <system_reset+0x10>)
   bac8c:	681b      	ldr	r3, [r3, #0]
   bac8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bac92:	9301      	str	r3, [sp, #4]
   bac94:	bd08      	pop	{r3, pc}
   bac96:	0000      	.short	0x0000
   bac98:	00030220 	.word	0x00030220

000bac9c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bac9c:	b508      	push	{r3, lr}
   bac9e:	4b02      	ldr	r3, [pc, #8]	; (baca8 <spark_variable+0xc>)
   baca0:	681b      	ldr	r3, [r3, #0]
   baca2:	681b      	ldr	r3, [r3, #0]
   baca4:	9301      	str	r3, [sp, #4]
   baca6:	bd08      	pop	{r3, pc}
   baca8:	00030244 	.word	0x00030244

000bacac <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bacac:	b508      	push	{r3, lr}
   bacae:	4b02      	ldr	r3, [pc, #8]	; (bacb8 <spark_function+0xc>)
   bacb0:	681b      	ldr	r3, [r3, #0]
   bacb2:	685b      	ldr	r3, [r3, #4]
   bacb4:	9301      	str	r3, [sp, #4]
   bacb6:	bd08      	pop	{r3, pc}
   bacb8:	00030244 	.word	0x00030244

000bacbc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bacbc:	b508      	push	{r3, lr}
   bacbe:	4b02      	ldr	r3, [pc, #8]	; (bacc8 <spark_process+0xc>)
   bacc0:	681b      	ldr	r3, [r3, #0]
   bacc2:	689b      	ldr	r3, [r3, #8]
   bacc4:	9301      	str	r3, [sp, #4]
   bacc6:	bd08      	pop	{r3, pc}
   bacc8:	00030244 	.word	0x00030244

000baccc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   baccc:	b508      	push	{r3, lr}
   bacce:	4b02      	ldr	r3, [pc, #8]	; (bacd8 <spark_cloud_flag_connect+0xc>)
   bacd0:	681b      	ldr	r3, [r3, #0]
   bacd2:	68db      	ldr	r3, [r3, #12]
   bacd4:	9301      	str	r3, [sp, #4]
   bacd6:	bd08      	pop	{r3, pc}
   bacd8:	00030244 	.word	0x00030244

000bacdc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bacdc:	b508      	push	{r3, lr}
   bacde:	4b02      	ldr	r3, [pc, #8]	; (bace8 <spark_cloud_flag_connected+0xc>)
   bace0:	681b      	ldr	r3, [r3, #0]
   bace2:	695b      	ldr	r3, [r3, #20]
   bace4:	9301      	str	r3, [sp, #4]
   bace6:	bd08      	pop	{r3, pc}
   bace8:	00030244 	.word	0x00030244

000bacec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bacec:	b508      	push	{r3, lr}
   bacee:	4b02      	ldr	r3, [pc, #8]	; (bacf8 <spark_send_event+0xc>)
   bacf0:	681b      	ldr	r3, [r3, #0]
   bacf2:	6a1b      	ldr	r3, [r3, #32]
   bacf4:	9301      	str	r3, [sp, #4]
   bacf6:	bd08      	pop	{r3, pc}
   bacf8:	00030244 	.word	0x00030244

000bacfc <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bacfc:	b508      	push	{r3, lr}
   bacfe:	4b02      	ldr	r3, [pc, #8]	; (bad08 <spark_sync_time_pending+0xc>)
   bad00:	681b      	ldr	r3, [r3, #0]
   bad02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bad04:	9301      	str	r3, [sp, #4]
   bad06:	bd08      	pop	{r3, pc}
   bad08:	00030244 	.word	0x00030244

000bad0c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bad0c:	b508      	push	{r3, lr}
   bad0e:	4b02      	ldr	r3, [pc, #8]	; (bad18 <spark_sync_time_last+0xc>)
   bad10:	681b      	ldr	r3, [r3, #0]
   bad12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bad14:	9301      	str	r3, [sp, #4]
   bad16:	bd08      	pop	{r3, pc}
   bad18:	00030244 	.word	0x00030244

000bad1c <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   bad1c:	b508      	push	{r3, lr}
   bad1e:	4b02      	ldr	r3, [pc, #8]	; (bad28 <spark_set_connection_property+0xc>)
   bad20:	681b      	ldr	r3, [r3, #0]
   bad22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bad24:	9301      	str	r3, [sp, #4]
   bad26:	bd08      	pop	{r3, pc}
   bad28:	00030244 	.word	0x00030244

000bad2c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bad2c:	b508      	push	{r3, lr}
   bad2e:	4b02      	ldr	r3, [pc, #8]	; (bad38 <spark_set_random_seed_from_cloud_handler+0xc>)
   bad30:	681b      	ldr	r3, [r3, #0]
   bad32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bad34:	9301      	str	r3, [sp, #4]
   bad36:	bd08      	pop	{r3, pc}
   bad38:	00030244 	.word	0x00030244

000bad3c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bad3c:	b508      	push	{r3, lr}
   bad3e:	4b02      	ldr	r3, [pc, #8]	; (bad48 <spark_cloud_disconnect+0xc>)
   bad40:	681b      	ldr	r3, [r3, #0]
   bad42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bad44:	9301      	str	r3, [sp, #4]
   bad46:	bd08      	pop	{r3, pc}
   bad48:	00030244 	.word	0x00030244

000bad4c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bad4c:	b508      	push	{r3, lr}
   bad4e:	4b02      	ldr	r3, [pc, #8]	; (bad58 <network_connect+0xc>)
   bad50:	681b      	ldr	r3, [r3, #0]
   bad52:	685b      	ldr	r3, [r3, #4]
   bad54:	9301      	str	r3, [sp, #4]
   bad56:	bd08      	pop	{r3, pc}
   bad58:	00030240 	.word	0x00030240

000bad5c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bad5c:	b508      	push	{r3, lr}
   bad5e:	4b02      	ldr	r3, [pc, #8]	; (bad68 <network_connecting+0xc>)
   bad60:	681b      	ldr	r3, [r3, #0]
   bad62:	689b      	ldr	r3, [r3, #8]
   bad64:	9301      	str	r3, [sp, #4]
   bad66:	bd08      	pop	{r3, pc}
   bad68:	00030240 	.word	0x00030240

000bad6c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bad6c:	b508      	push	{r3, lr}
   bad6e:	4b02      	ldr	r3, [pc, #8]	; (bad78 <network_disconnect+0xc>)
   bad70:	681b      	ldr	r3, [r3, #0]
   bad72:	68db      	ldr	r3, [r3, #12]
   bad74:	9301      	str	r3, [sp, #4]
   bad76:	bd08      	pop	{r3, pc}
   bad78:	00030240 	.word	0x00030240

000bad7c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bad7c:	b508      	push	{r3, lr}
   bad7e:	4b02      	ldr	r3, [pc, #8]	; (bad88 <network_ready+0xc>)
   bad80:	681b      	ldr	r3, [r3, #0]
   bad82:	691b      	ldr	r3, [r3, #16]
   bad84:	9301      	str	r3, [sp, #4]
   bad86:	bd08      	pop	{r3, pc}
   bad88:	00030240 	.word	0x00030240

000bad8c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bad8c:	b508      	push	{r3, lr}
   bad8e:	4b02      	ldr	r3, [pc, #8]	; (bad98 <network_on+0xc>)
   bad90:	681b      	ldr	r3, [r3, #0]
   bad92:	695b      	ldr	r3, [r3, #20]
   bad94:	9301      	str	r3, [sp, #4]
   bad96:	bd08      	pop	{r3, pc}
   bad98:	00030240 	.word	0x00030240

000bad9c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bad9c:	b508      	push	{r3, lr}
   bad9e:	4b02      	ldr	r3, [pc, #8]	; (bada8 <network_off+0xc>)
   bada0:	681b      	ldr	r3, [r3, #0]
   bada2:	699b      	ldr	r3, [r3, #24]
   bada4:	9301      	str	r3, [sp, #4]
   bada6:	bd08      	pop	{r3, pc}
   bada8:	00030240 	.word	0x00030240

000badac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   badac:	b508      	push	{r3, lr}
   badae:	4b02      	ldr	r3, [pc, #8]	; (badb8 <network_listen+0xc>)
   badb0:	681b      	ldr	r3, [r3, #0]
   badb2:	69db      	ldr	r3, [r3, #28]
   badb4:	9301      	str	r3, [sp, #4]
   badb6:	bd08      	pop	{r3, pc}
   badb8:	00030240 	.word	0x00030240

000badbc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   badbc:	b508      	push	{r3, lr}
   badbe:	4b02      	ldr	r3, [pc, #8]	; (badc8 <network_listening+0xc>)
   badc0:	681b      	ldr	r3, [r3, #0]
   badc2:	6a1b      	ldr	r3, [r3, #32]
   badc4:	9301      	str	r3, [sp, #4]
   badc6:	bd08      	pop	{r3, pc}
   badc8:	00030240 	.word	0x00030240

000badcc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   badcc:	b508      	push	{r3, lr}
   badce:	4b02      	ldr	r3, [pc, #8]	; (badd8 <network_set_listen_timeout+0xc>)
   badd0:	681b      	ldr	r3, [r3, #0]
   badd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   badd4:	9301      	str	r3, [sp, #4]
   badd6:	bd08      	pop	{r3, pc}
   badd8:	00030240 	.word	0x00030240

000baddc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   baddc:	b508      	push	{r3, lr}
   badde:	4b02      	ldr	r3, [pc, #8]	; (bade8 <network_get_listen_timeout+0xc>)
   bade0:	681b      	ldr	r3, [r3, #0]
   bade2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bade4:	9301      	str	r3, [sp, #4]
   bade6:	bd08      	pop	{r3, pc}
   bade8:	00030240 	.word	0x00030240

000badec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   badec:	b508      	push	{r3, lr}
   badee:	4b02      	ldr	r3, [pc, #8]	; (badf8 <network_is_on+0xc>)
   badf0:	681b      	ldr	r3, [r3, #0]
   badf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   badf4:	9301      	str	r3, [sp, #4]
   badf6:	bd08      	pop	{r3, pc}
   badf8:	00030240 	.word	0x00030240

000badfc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   badfc:	b508      	push	{r3, lr}
   badfe:	4b02      	ldr	r3, [pc, #8]	; (bae08 <network_is_off+0xc>)
   bae00:	681b      	ldr	r3, [r3, #0]
   bae02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bae04:	9301      	str	r3, [sp, #4]
   bae06:	bd08      	pop	{r3, pc}
   bae08:	00030240 	.word	0x00030240

000bae0c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bae0c:	b508      	push	{r3, lr}
   bae0e:	4b02      	ldr	r3, [pc, #8]	; (bae18 <malloc+0xc>)
   bae10:	681b      	ldr	r3, [r3, #0]
   bae12:	681b      	ldr	r3, [r3, #0]
   bae14:	9301      	str	r3, [sp, #4]
   bae16:	bd08      	pop	{r3, pc}
   bae18:	0003021c 	.word	0x0003021c

000bae1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bae1c:	b508      	push	{r3, lr}
   bae1e:	4b02      	ldr	r3, [pc, #8]	; (bae28 <free+0xc>)
   bae20:	681b      	ldr	r3, [r3, #0]
   bae22:	685b      	ldr	r3, [r3, #4]
   bae24:	9301      	str	r3, [sp, #4]
   bae26:	bd08      	pop	{r3, pc}
   bae28:	0003021c 	.word	0x0003021c

000bae2c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bae2c:	b508      	push	{r3, lr}
   bae2e:	4b02      	ldr	r3, [pc, #8]	; (bae38 <realloc+0xc>)
   bae30:	681b      	ldr	r3, [r3, #0]
   bae32:	689b      	ldr	r3, [r3, #8]
   bae34:	9301      	str	r3, [sp, #4]
   bae36:	bd08      	pop	{r3, pc}
   bae38:	0003021c 	.word	0x0003021c

000bae3c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bae3c:	b508      	push	{r3, lr}
   bae3e:	4b02      	ldr	r3, [pc, #8]	; (bae48 <siprintf+0xc>)
   bae40:	681b      	ldr	r3, [r3, #0]
   bae42:	691b      	ldr	r3, [r3, #16]
   bae44:	9301      	str	r3, [sp, #4]
   bae46:	bd08      	pop	{r3, pc}
   bae48:	0003021c 	.word	0x0003021c

000bae4c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bae4c:	b508      	push	{r3, lr}
   bae4e:	4b02      	ldr	r3, [pc, #8]	; (bae58 <sscanf+0xc>)
   bae50:	681b      	ldr	r3, [r3, #0]
   bae52:	695b      	ldr	r3, [r3, #20]
   bae54:	9301      	str	r3, [sp, #4]
   bae56:	bd08      	pop	{r3, pc}
   bae58:	0003021c 	.word	0x0003021c

000bae5c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bae5c:	b508      	push	{r3, lr}
   bae5e:	4b02      	ldr	r3, [pc, #8]	; (bae68 <snprintf+0xc>)
   bae60:	681b      	ldr	r3, [r3, #0]
   bae62:	69db      	ldr	r3, [r3, #28]
   bae64:	9301      	str	r3, [sp, #4]
   bae66:	bd08      	pop	{r3, pc}
   bae68:	0003021c 	.word	0x0003021c

000bae6c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bae6c:	b508      	push	{r3, lr}
   bae6e:	4b02      	ldr	r3, [pc, #8]	; (bae78 <vsnprintf+0xc>)
   bae70:	681b      	ldr	r3, [r3, #0]
   bae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bae74:	9301      	str	r3, [sp, #4]
   bae76:	bd08      	pop	{r3, pc}
   bae78:	0003021c 	.word	0x0003021c

000bae7c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bae7c:	b508      	push	{r3, lr}
   bae7e:	4b02      	ldr	r3, [pc, #8]	; (bae88 <abort+0xc>)
   bae80:	681b      	ldr	r3, [r3, #0]
   bae82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bae84:	9301      	str	r3, [sp, #4]
   bae86:	bd08      	pop	{r3, pc}
   bae88:	0003021c 	.word	0x0003021c

000bae8c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bae8c:	b508      	push	{r3, lr}
   bae8e:	4b02      	ldr	r3, [pc, #8]	; (bae98 <_malloc_r+0xc>)
   bae90:	681b      	ldr	r3, [r3, #0]
   bae92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bae94:	9301      	str	r3, [sp, #4]
   bae96:	bd08      	pop	{r3, pc}
   bae98:	0003021c 	.word	0x0003021c

000bae9c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bae9c:	b508      	push	{r3, lr}
   bae9e:	4b02      	ldr	r3, [pc, #8]	; (baea8 <__errno+0xc>)
   baea0:	681b      	ldr	r3, [r3, #0]
   baea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   baea4:	9301      	str	r3, [sp, #4]
   baea6:	bd08      	pop	{r3, pc}
   baea8:	0003021c 	.word	0x0003021c

000baeac <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   baeac:	b508      	push	{r3, lr}
   baeae:	4b02      	ldr	r3, [pc, #8]	; (baeb8 <__assert_func+0xc>)
   baeb0:	681b      	ldr	r3, [r3, #0]
   baeb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baeb4:	9301      	str	r3, [sp, #4]
   baeb6:	bd08      	pop	{r3, pc}
   baeb8:	0003021c 	.word	0x0003021c

000baebc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   baebc:	b508      	push	{r3, lr}
   baebe:	4b02      	ldr	r3, [pc, #8]	; (baec8 <newlib_impure_ptr_callback+0xc>)
   baec0:	681b      	ldr	r3, [r3, #0]
   baec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   baec4:	9301      	str	r3, [sp, #4]
   baec6:	bd08      	pop	{r3, pc}
   baec8:	0003021c 	.word	0x0003021c

000baecc <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   baecc:	b508      	push	{r3, lr}
   baece:	4b02      	ldr	r3, [pc, #8]	; (baed8 <strftime+0xc>)
   baed0:	681b      	ldr	r3, [r3, #0]
   baed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   baed4:	9301      	str	r3, [sp, #4]
   baed6:	bd08      	pop	{r3, pc}
   baed8:	0003021c 	.word	0x0003021c

000baedc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   baedc:	b508      	push	{r3, lr}
   baede:	4b02      	ldr	r3, [pc, #8]	; (baee8 <localtime_r+0xc>)
   baee0:	681b      	ldr	r3, [r3, #0]
   baee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   baee4:	9301      	str	r3, [sp, #4]
   baee6:	bd08      	pop	{r3, pc}
   baee8:	0003021c 	.word	0x0003021c

000baeec <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   baeec:	b508      	push	{r3, lr}
   baeee:	4b02      	ldr	r3, [pc, #8]	; (baef8 <gmtime_r+0xc>)
   baef0:	681b      	ldr	r3, [r3, #0]
   baef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   baef4:	9301      	str	r3, [sp, #4]
   baef6:	bd08      	pop	{r3, pc}
   baef8:	0003021c 	.word	0x0003021c

000baefc <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   baefc:	b508      	push	{r3, lr}
   baefe:	4b02      	ldr	r3, [pc, #8]	; (baf08 <mktime+0xc>)
   baf00:	681b      	ldr	r3, [r3, #0]
   baf02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   baf04:	9301      	str	r3, [sp, #4]
   baf06:	bd08      	pop	{r3, pc}
   baf08:	0003021c 	.word	0x0003021c

000baf0c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   baf0c:	2100      	movs	r1, #0
   baf0e:	f7ff be5b 	b.w	babc8 <system_delay_ms>

000baf12 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   baf12:	b510      	push	{r4, lr}
      if (_M_empty())
   baf14:	6883      	ldr	r3, [r0, #8]
   baf16:	4604      	mov	r4, r0
   baf18:	b90b      	cbnz	r3, baf1e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   baf1a:	f003 f995 	bl	be248 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   baf1e:	68c3      	ldr	r3, [r0, #12]
   baf20:	4798      	blx	r3
      if (_M_manager)
   baf22:	68a3      	ldr	r3, [r4, #8]
   baf24:	b11b      	cbz	r3, baf2e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   baf26:	2203      	movs	r2, #3
   baf28:	4621      	mov	r1, r4
   baf2a:	4620      	mov	r0, r4
   baf2c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   baf2e:	4620      	mov	r0, r4
   baf30:	2110      	movs	r1, #16
}
   baf32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   baf36:	f7f9 b8b2 	b.w	b409e <_ZdlPvj>

000baf3a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   baf3a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   baf3c:	6843      	ldr	r3, [r0, #4]
   baf3e:	3b01      	subs	r3, #1
    {
   baf40:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   baf42:	6043      	str	r3, [r0, #4]
   baf44:	b963      	cbnz	r3, baf60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   baf46:	6803      	ldr	r3, [r0, #0]
   baf48:	689b      	ldr	r3, [r3, #8]
   baf4a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   baf4c:	68a3      	ldr	r3, [r4, #8]
   baf4e:	3b01      	subs	r3, #1
   baf50:	60a3      	str	r3, [r4, #8]
   baf52:	b92b      	cbnz	r3, baf60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   baf54:	6823      	ldr	r3, [r4, #0]
   baf56:	4620      	mov	r0, r4
   baf58:	68db      	ldr	r3, [r3, #12]
    }
   baf5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   baf5e:	4718      	bx	r3
    }
   baf60:	bd10      	pop	{r4, pc}

000baf62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   baf62:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   baf64:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   baf68:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   baf6a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   baf6e:	42ae      	cmp	r6, r5
   baf70:	d004      	beq.n	baf7c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   baf72:	4628      	mov	r0, r5
   baf74:	f002 fab6 	bl	bd4e4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   baf78:	3510      	adds	r5, #16
   baf7a:	e7f8      	b.n	baf6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   baf7c:	6820      	ldr	r0, [r4, #0]
   baf7e:	f7ff ff4d 	bl	bae1c <free>
    AllocatorT::free(data_);
}
   baf82:	4620      	mov	r0, r4
   baf84:	bd70      	pop	{r4, r5, r6, pc}
	...

000baf88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   baf88:	4802      	ldr	r0, [pc, #8]	; (baf94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   baf8a:	2300      	movs	r3, #0
   baf8c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   baf8e:	f7ff bb61 	b.w	ba654 <os_mutex_recursive_create>
   baf92:	bf00      	nop
   baf94:	2003e580 	.word	0x2003e580

000baf98 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   baf98:	2200      	movs	r2, #0
   baf9a:	6840      	ldr	r0, [r0, #4]
   baf9c:	4611      	mov	r1, r2
   baf9e:	f7ff beed 	b.w	bad7c <network_ready>

000bafa2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bafa2:	2200      	movs	r2, #0
   bafa4:	6840      	ldr	r0, [r0, #4]
   bafa6:	4611      	mov	r1, r2
   bafa8:	f7ff bf08 	b.w	badbc <network_listening>

000bafac <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bafac:	2200      	movs	r2, #0
   bafae:	6840      	ldr	r0, [r0, #4]
   bafb0:	4611      	mov	r1, r2
   bafb2:	f7ff bf13 	b.w	baddc <network_get_listen_timeout>

000bafb6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bafb6:	6840      	ldr	r0, [r0, #4]
   bafb8:	2200      	movs	r2, #0
   bafba:	f7ff bf07 	b.w	badcc <network_set_listen_timeout>

000bafbe <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bafbe:	6840      	ldr	r0, [r0, #4]
   bafc0:	2200      	movs	r2, #0
   bafc2:	f081 0101 	eor.w	r1, r1, #1
   bafc6:	f7ff bef1 	b.w	badac <network_listen>

000bafca <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bafca:	2300      	movs	r3, #0
   bafcc:	6840      	ldr	r0, [r0, #4]
   bafce:	461a      	mov	r2, r3
   bafd0:	4619      	mov	r1, r3
   bafd2:	f7ff bee3 	b.w	bad9c <network_off>

000bafd6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bafd6:	2300      	movs	r3, #0
   bafd8:	6840      	ldr	r0, [r0, #4]
   bafda:	461a      	mov	r2, r3
   bafdc:	4619      	mov	r1, r3
   bafde:	f7ff bed5 	b.w	bad8c <network_on>

000bafe2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bafe2:	2200      	movs	r2, #0
   bafe4:	6840      	ldr	r0, [r0, #4]
   bafe6:	4611      	mov	r1, r2
   bafe8:	f7ff beb8 	b.w	bad5c <network_connecting>

000bafec <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bafec:	6840      	ldr	r0, [r0, #4]
   bafee:	2200      	movs	r2, #0
   baff0:	2102      	movs	r1, #2
   baff2:	f7ff bebb 	b.w	bad6c <network_disconnect>

000baff6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   baff6:	2300      	movs	r3, #0
   baff8:	6840      	ldr	r0, [r0, #4]
   baffa:	461a      	mov	r2, r3
   baffc:	f7ff bea6 	b.w	bad4c <network_connect>

000bb000 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bb000:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bb002:	4b13      	ldr	r3, [pc, #76]	; (bb050 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bb004:	6003      	str	r3, [r0, #0]
   bb006:	2518      	movs	r5, #24
   bb008:	3330      	adds	r3, #48	; 0x30
   bb00a:	b086      	sub	sp, #24
   bb00c:	460e      	mov	r6, r1
   bb00e:	6043      	str	r3, [r0, #4]
   bb010:	462a      	mov	r2, r5
   bb012:	2100      	movs	r1, #0
   bb014:	4604      	mov	r4, r0
   bb016:	3008      	adds	r0, #8
   bb018:	f003 fe48 	bl	becac <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bb01c:	2200      	movs	r2, #0
   bb01e:	6870      	ldr	r0, [r6, #4]
   bb020:	4611      	mov	r1, r2
   bb022:	f7ff feab 	bl	bad7c <network_ready>
   bb026:	b178      	cbz	r0, bb048 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bb028:	2100      	movs	r1, #0
   bb02a:	462a      	mov	r2, r5
   bb02c:	4668      	mov	r0, sp
   bb02e:	f003 fe3d 	bl	becac <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bb032:	4669      	mov	r1, sp
   bb034:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bb036:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bb03a:	f7ff facb 	bl	ba5d4 <cellular_signal>
   bb03e:	b918      	cbnz	r0, bb048 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bb040:	4669      	mov	r1, sp
   bb042:	4620      	mov	r0, r4
   bb044:	f000 f8b8 	bl	bb1b8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bb048:	4620      	mov	r0, r4
   bb04a:	b006      	add	sp, #24
   bb04c:	bd70      	pop	{r4, r5, r6, pc}
   bb04e:	bf00      	nop
   bb050:	000c06b4 	.word	0x000c06b4

000bb054 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bb054:	4b08      	ldr	r3, [pc, #32]	; (bb078 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bb056:	b510      	push	{r4, lr}
   bb058:	2428      	movs	r4, #40	; 0x28
   bb05a:	4622      	mov	r2, r4
   bb05c:	4618      	mov	r0, r3
   bb05e:	2100      	movs	r1, #0
   bb060:	f003 fe24 	bl	becac <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bb064:	4b05      	ldr	r3, [pc, #20]	; (bb07c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bb066:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bb068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb06c:	6042      	str	r2, [r0, #4]
   bb06e:	2204      	movs	r2, #4
   bb070:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bb072:	4a03      	ldr	r2, [pc, #12]	; (bb080 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bb074:	601a      	str	r2, [r3, #0]
   bb076:	bd10      	pop	{r4, pc}
   bb078:	2003e58c 	.word	0x2003e58c
   bb07c:	2003e584 	.word	0x2003e584
   bb080:	000c0678 	.word	0x000c0678

000bb084 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bb084:	4770      	bx	lr

000bb086 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bb086:	7b00      	ldrb	r0, [r0, #12]
   bb088:	4770      	bx	lr

000bb08a <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb08a:	7b03      	ldrb	r3, [r0, #12]
   bb08c:	b14b      	cbz	r3, bb0a2 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bb08e:	6903      	ldr	r3, [r0, #16]
   bb090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb094:	d005      	beq.n	bb0a2 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb096:	6980      	ldr	r0, [r0, #24]
   bb098:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bb09c:	bf18      	it	ne
   bb09e:	2001      	movne	r0, #1
   bb0a0:	4770      	bx	lr
   bb0a2:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bb0a4:	4770      	bx	lr

000bb0a6 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bb0a6:	6803      	ldr	r3, [r0, #0]
   bb0a8:	6a1b      	ldr	r3, [r3, #32]
   bb0aa:	4718      	bx	r3

000bb0ac <_ZNK14CellularSignal7printToER5Print>:
{
   bb0ac:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bb0ae:	6803      	ldr	r3, [r0, #0]
{
   bb0b0:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bb0b2:	691b      	ldr	r3, [r3, #16]
{
   bb0b4:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bb0b6:	4798      	blx	r3
   bb0b8:	2102      	movs	r1, #2
   bb0ba:	4628      	mov	r0, r5
   bb0bc:	f002 f8ee 	bl	bd29c <_ZN5Print5printEfi>
    n += p.print(',');
   bb0c0:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bb0c2:	4604      	mov	r4, r0
    n += p.print(',');
   bb0c4:	4628      	mov	r0, r5
   bb0c6:	f001 fff3 	bl	bd0b0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bb0ca:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bb0cc:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bb0ce:	699b      	ldr	r3, [r3, #24]
   bb0d0:	4630      	mov	r0, r6
   bb0d2:	4798      	blx	r3
   bb0d4:	2102      	movs	r1, #2
   bb0d6:	4628      	mov	r0, r5
   bb0d8:	f002 f8e0 	bl	bd29c <_ZN5Print5printEfi>
}
   bb0dc:	4420      	add	r0, r4
   bb0de:	bd70      	pop	{r4, r5, r6, pc}

000bb0e0 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bb0e0:	f1a0 0004 	sub.w	r0, r0, #4
   bb0e4:	f7ff bfe2 	b.w	bb0ac <_ZNK14CellularSignal7printToER5Print>

000bb0e8 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bb0e8:	b510      	push	{r4, lr}
   bb0ea:	2120      	movs	r1, #32
   bb0ec:	4604      	mov	r4, r0
   bb0ee:	f7f8 ffd6 	bl	b409e <_ZdlPvj>
   bb0f2:	4620      	mov	r0, r4
   bb0f4:	bd10      	pop	{r4, pc}
	...

000bb0f8 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bb0f8:	7b03      	ldrb	r3, [r0, #12]
   bb0fa:	b17b      	cbz	r3, bb11c <_ZNK14CellularSignal11getStrengthEv+0x24>
   bb0fc:	6943      	ldr	r3, [r0, #20]
   bb0fe:	2b00      	cmp	r3, #0
   bb100:	db0c      	blt.n	bb11c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bb102:	ee07 3a90 	vmov	s15, r3
   bb106:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb124 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bb10a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb10e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb112:	eddf 7a05 	vldr	s15, [pc, #20]	; bb128 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bb116:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb11a:	4770      	bx	lr
    return -1.0f;
   bb11c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb120:	4770      	bx	lr
   bb122:	bf00      	nop
   bb124:	477fff00 	.word	0x477fff00
   bb128:	42c80000 	.word	0x42c80000

000bb12c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bb12c:	7b03      	ldrb	r3, [r0, #12]
   bb12e:	b163      	cbz	r3, bb14a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bb130:	6903      	ldr	r3, [r0, #16]
   bb132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb136:	d008      	beq.n	bb14a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bb138:	ee07 3a90 	vmov	s15, r3
   bb13c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb150 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bb140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb144:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb148:	4770      	bx	lr
    return 0.0f;
   bb14a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb154 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bb14e:	4770      	bx	lr
   bb150:	42c80000 	.word	0x42c80000
   bb154:	00000000 	.word	0x00000000

000bb158 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bb158:	7b03      	ldrb	r3, [r0, #12]
   bb15a:	b17b      	cbz	r3, bb17c <_ZNK14CellularSignal10getQualityEv+0x24>
   bb15c:	69c3      	ldr	r3, [r0, #28]
   bb15e:	2b00      	cmp	r3, #0
   bb160:	db0c      	blt.n	bb17c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bb162:	ee07 3a90 	vmov	s15, r3
   bb166:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb184 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bb16a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb16e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb172:	eddf 7a05 	vldr	s15, [pc, #20]	; bb188 <_ZNK14CellularSignal10getQualityEv+0x30>
   bb176:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb17a:	4770      	bx	lr
    return -1.0f;
   bb17c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb180:	4770      	bx	lr
   bb182:	bf00      	nop
   bb184:	477fff00 	.word	0x477fff00
   bb188:	42c80000 	.word	0x42c80000

000bb18c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bb18c:	7b03      	ldrb	r3, [r0, #12]
   bb18e:	b163      	cbz	r3, bb1aa <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bb190:	6983      	ldr	r3, [r0, #24]
   bb192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb196:	d008      	beq.n	bb1aa <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bb198:	ee07 3a90 	vmov	s15, r3
   bb19c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb1b0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bb1a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb1a4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb1a8:	4770      	bx	lr
    return 0.0f;
   bb1aa:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb1b4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bb1ae:	4770      	bx	lr
   bb1b0:	42c80000 	.word	0x42c80000
   bb1b4:	00000000 	.word	0x00000000

000bb1b8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bb1b8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bb1ba:	460d      	mov	r5, r1
   bb1bc:	f100 0408 	add.w	r4, r0, #8
   bb1c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb1c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb1c4:	e895 0003 	ldmia.w	r5, {r0, r1}
   bb1c8:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bb1cc:	2001      	movs	r0, #1
   bb1ce:	bd30      	pop	{r4, r5, pc}

000bb1d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb1d0:	4770      	bx	lr

000bb1d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bb1d2:	2000      	movs	r0, #0
   bb1d4:	4770      	bx	lr

000bb1d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb1d6:	b510      	push	{r4, lr}
   bb1d8:	2110      	movs	r1, #16
   bb1da:	4604      	mov	r4, r0
   bb1dc:	f7f8 ff5f 	bl	b409e <_ZdlPvj>
   bb1e0:	4620      	mov	r0, r4
   bb1e2:	bd10      	pop	{r4, pc}

000bb1e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bb1e4:	b508      	push	{r3, lr}
      { delete this; }
   bb1e6:	f7ff fff6 	bl	bb1d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bb1ea:	bd08      	pop	{r3, pc}

000bb1ec <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bb1ec:	b530      	push	{r4, r5, lr}
        type_(type) {
   bb1ee:	2200      	movs	r2, #0
   bb1f0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bb1f4:	6002      	str	r2, [r0, #0]
   bb1f6:	8084      	strh	r4, [r0, #4]
   bb1f8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bb1fa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb1fc:	680c      	ldr	r4, [r1, #0]
   bb1fe:	8085      	strh	r5, [r0, #4]
   bb200:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bb202:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bb204:	bd30      	pop	{r4, r5, pc}

000bb206 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bb206:	b510      	push	{r4, lr}
   bb208:	4604      	mov	r4, r0
    free((void*)msg_);
   bb20a:	6800      	ldr	r0, [r0, #0]
   bb20c:	f7ff fe06 	bl	bae1c <free>
}
   bb210:	4620      	mov	r0, r4
   bb212:	bd10      	pop	{r4, pc}

000bb214 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bb214:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bb216:	68c4      	ldr	r4, [r0, #12]
   bb218:	b1f4      	cbz	r4, bb258 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bb21a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bb21c:	2b02      	cmp	r3, #2
   bb21e:	d103      	bne.n	bb228 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bb220:	f104 000c 	add.w	r0, r4, #12
   bb224:	f7ff ffef 	bl	bb206 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bb228:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bb22a:	b135      	cbz	r5, bb23a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bb22c:	4628      	mov	r0, r5
   bb22e:	f7f9 fb47 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   bb232:	2110      	movs	r1, #16
   bb234:	4628      	mov	r0, r5
   bb236:	f7f8 ff32 	bl	b409e <_ZdlPvj>
   bb23a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bb23c:	b135      	cbz	r5, bb24c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bb23e:	4628      	mov	r0, r5
   bb240:	f7f9 fb3e 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
   bb244:	2110      	movs	r1, #16
   bb246:	4628      	mov	r0, r5
   bb248:	f7f8 ff29 	bl	b409e <_ZdlPvj>
   bb24c:	4620      	mov	r0, r4
   bb24e:	2114      	movs	r1, #20
   bb250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb254:	f7f8 bf23 	b.w	b409e <_ZdlPvj>
   bb258:	bd38      	pop	{r3, r4, r5, pc}

000bb25a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bb25a:	b510      	push	{r4, lr}
   bb25c:	b088      	sub	sp, #32
   bb25e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bb260:	4668      	mov	r0, sp
   bb262:	f002 f98a 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bb266:	4669      	mov	r1, sp
   bb268:	a804      	add	r0, sp, #16
   bb26a:	f002 f9d1 	bl	bd610 <_ZN6StringC1ERKS_>
   bb26e:	a804      	add	r0, sp, #16
   bb270:	47a0      	blx	r4
   bb272:	4604      	mov	r4, r0
   bb274:	a804      	add	r0, sp, #16
   bb276:	f002 f935 	bl	bd4e4 <_ZN6StringD1Ev>
    String p(param);
   bb27a:	4668      	mov	r0, sp
   bb27c:	f002 f932 	bl	bd4e4 <_ZN6StringD1Ev>
}
   bb280:	4620      	mov	r0, r4
   bb282:	b008      	add	sp, #32
   bb284:	bd10      	pop	{r4, pc}

000bb286 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bb286:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bb288:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bb28a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bb28e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bb290:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bb292:	461a      	mov	r2, r3
   bb294:	4669      	mov	r1, sp
   bb296:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bb298:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bb29c:	f8ad 4000 	strh.w	r4, [sp]
   bb2a0:	f7ff fd04 	bl	bacac <spark_function>
}
   bb2a4:	b004      	add	sp, #16
   bb2a6:	bd10      	pop	{r4, pc}

000bb2a8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bb2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bb2aa:	230c      	movs	r3, #12
   bb2ac:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bb2b0:	6803      	ldr	r3, [r0, #0]
   bb2b2:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bb2b6:	7a03      	ldrb	r3, [r0, #8]
   bb2b8:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bb2bc:	6843      	ldr	r3, [r0, #4]
   bb2be:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bb2c0:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bb2c2:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bb2c4:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb2c8:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bb2ca:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bb2ce:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb2d2:	f7ff fd33 	bl	bad3c <spark_cloud_disconnect>
}
   bb2d6:	b005      	add	sp, #20
   bb2d8:	f85d fb04 	ldr.w	pc, [sp], #4

000bb2dc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb2dc:	680b      	ldr	r3, [r1, #0]
   bb2de:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bb2e0:	684b      	ldr	r3, [r1, #4]
   bb2e2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bb2e4:	b113      	cbz	r3, bb2ec <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bb2e6:	685a      	ldr	r2, [r3, #4]
   bb2e8:	3201      	adds	r2, #1
   bb2ea:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb2ec:	4770      	bx	lr

000bb2ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bb2ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb2f0:	4604      	mov	r4, r0
   bb2f2:	4668      	mov	r0, sp
   bb2f4:	460d      	mov	r5, r1
   bb2f6:	f7ff fff1 	bl	bb2dc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb2fa:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bb2fc:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb2fe:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bb300:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bb302:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bb304:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bb306:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bb308:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bb30a:	f7fa fc49 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bb30e:	b135      	cbz	r5, bb31e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bb310:	1d28      	adds	r0, r5, #4
   bb312:	f7fa fc45 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb316:	2108      	movs	r1, #8
   bb318:	4628      	mov	r0, r5
   bb31a:	f7f8 fec0 	bl	b409e <_ZdlPvj>
        return p;
    }
   bb31e:	4620      	mov	r0, r4
   bb320:	b003      	add	sp, #12
   bb322:	bd30      	pop	{r4, r5, pc}

000bb324 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bb324:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb326:	b510      	push	{r4, lr}
      if (_M_empty())
   bb328:	b90a      	cbnz	r2, bb32e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bb32a:	f002 ff8d 	bl	be248 <_ZSt25__throw_bad_function_callv>
    }
   bb32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb332:	68c3      	ldr	r3, [r0, #12]
   bb334:	4718      	bx	r3

000bb336 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb336:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb338:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bb33a:	f100 0110 	add.w	r1, r0, #16
   bb33e:	f7ff fff1 	bl	bb324 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bb342:	bd08      	pop	{r3, pc}

000bb344 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bb344:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb346:	b510      	push	{r4, lr}
      if (_M_empty())
   bb348:	b90a      	cbnz	r2, bb34e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bb34a:	f002 ff7d 	bl	be248 <_ZSt25__throw_bad_function_callv>
    }
   bb34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb352:	68c3      	ldr	r3, [r0, #12]
   bb354:	4718      	bx	r3

000bb356 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb356:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb358:	6800      	ldr	r0, [r0, #0]
   bb35a:	f100 0110 	add.w	r1, r0, #16
   bb35e:	f7ff fff1 	bl	bb344 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bb362:	bd08      	pop	{r3, pc}

000bb364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bb364:	b538      	push	{r3, r4, r5, lr}
   bb366:	2300      	movs	r3, #0
   bb368:	4604      	mov	r4, r0
   bb36a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb36c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bb36e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb370:	f7f8 fe91 	bl	b4096 <_Znwj>
   bb374:	b128      	cbz	r0, bb382 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bb376:	2301      	movs	r3, #1
   bb378:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bb37c:	4b02      	ldr	r3, [pc, #8]	; (bb388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bb37e:	6003      	str	r3, [r0, #0]
   bb380:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb382:	6020      	str	r0, [r4, #0]
	}
   bb384:	4620      	mov	r0, r4
   bb386:	bd38      	pop	{r3, r4, r5, pc}
   bb388:	000c06f0 	.word	0x000c06f0

000bb38c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bb38c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb38e:	2300      	movs	r3, #0
   bb390:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bb392:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bb394:	4604      	mov	r4, r0
   bb396:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bb398:	b12b      	cbz	r3, bb3a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb39a:	2202      	movs	r2, #2
   bb39c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb39e:	68eb      	ldr	r3, [r5, #12]
   bb3a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bb3a2:	68ab      	ldr	r3, [r5, #8]
   bb3a4:	60a3      	str	r3, [r4, #8]
    }
   bb3a6:	4620      	mov	r0, r4
   bb3a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000bb3ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bb3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb3ae:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bb3b0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bb3b2:	4668      	mov	r0, sp
   bb3b4:	f7ff ff1a 	bl	bb1ec <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bb3b8:	f04f 0302 	mov.w	r3, #2
   bb3bc:	e8d4 2f4f 	ldrexb	r2, [r4]
   bb3c0:	2a00      	cmp	r2, #0
   bb3c2:	d103      	bne.n	bb3cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bb3c4:	e8c4 3f41 	strexb	r1, r3, [r4]
   bb3c8:	2900      	cmp	r1, #0
   bb3ca:	d1f7      	bne.n	bb3bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bb3cc:	d125      	bne.n	bb41a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bb3ce:	f104 050c 	add.w	r5, r4, #12
   bb3d2:	4669      	mov	r1, sp
   bb3d4:	4628      	mov	r0, r5
   bb3d6:	f7ff ff09 	bl	bb1ec <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bb3da:	f3bf 8f5b 	dmb	ish
   bb3de:	2301      	movs	r3, #1
   bb3e0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bb3e2:	2000      	movs	r0, #0
   bb3e4:	f104 0308 	add.w	r3, r4, #8
   bb3e8:	f3bf 8f5b 	dmb	ish
   bb3ec:	e853 6f00 	ldrex	r6, [r3]
   bb3f0:	e843 0200 	strex	r2, r0, [r3]
   bb3f4:	2a00      	cmp	r2, #0
   bb3f6:	d1f9      	bne.n	bb3ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bb3f8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bb3fc:	b16e      	cbz	r6, bb41a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bb3fe:	f7ff fbfb 	bl	babf8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bb402:	b178      	cbz	r0, bb424 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bb404:	4629      	mov	r1, r5
   bb406:	4630      	mov	r0, r6
   bb408:	f7ff ff8c 	bl	bb324 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bb40c:	4630      	mov	r0, r6
   bb40e:	f7f9 fa57 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bb412:	2110      	movs	r1, #16
   bb414:	4630      	mov	r0, r6
   bb416:	f7f8 fe42 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bb41a:	4668      	mov	r0, sp
   bb41c:	f7ff fef3 	bl	bb206 <_ZN8particle5ErrorD1Ev>
    }
   bb420:	b009      	add	sp, #36	; 0x24
   bb422:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb424:	4631      	mov	r1, r6
   bb426:	a802      	add	r0, sp, #8
   bb428:	f7ff ffb0 	bl	bb38c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bb42c:	68e0      	ldr	r0, [r4, #12]
   bb42e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb432:	b108      	cbz	r0, bb438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bb434:	f003 fcd8 	bl	bede8 <strdup>
        type_(type) {
   bb438:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bb43a:	2010      	movs	r0, #16
   bb43c:	f8ad 501c 	strh.w	r5, [sp, #28]
   bb440:	f7f8 fe29 	bl	b4096 <_Znwj>
   bb444:	4605      	mov	r5, r0
   bb446:	b1e8      	cbz	r0, bb484 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bb448:	2700      	movs	r7, #0
   bb44a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb44c:	2018      	movs	r0, #24
   bb44e:	f7f8 fe22 	bl	b4096 <_Znwj>
   bb452:	4604      	mov	r4, r0
   bb454:	b188      	cbz	r0, bb47a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bb456:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bb458:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bb45a:	a802      	add	r0, sp, #8
   bb45c:	f7fb fdf3 	bl	b7046 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb460:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bb462:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb464:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb466:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb468:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb46a:	a906      	add	r1, sp, #24
   bb46c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb46e:	60e3      	str	r3, [r4, #12]
   bb470:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bb474:	9205      	str	r2, [sp, #20]
   bb476:	f7ff feb9 	bl	bb1ec <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bb47a:	4b08      	ldr	r3, [pc, #32]	; (bb49c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bb47c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb47e:	4b08      	ldr	r3, [pc, #32]	; (bb4a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb480:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb482:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bb484:	a806      	add	r0, sp, #24
   bb486:	f7ff febe 	bl	bb206 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bb48a:	a802      	add	r0, sp, #8
   bb48c:	f7f9 fa18 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bb490:	2200      	movs	r2, #0
   bb492:	4629      	mov	r1, r5
   bb494:	4803      	ldr	r0, [pc, #12]	; (bb4a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bb496:	f7ff fbb7 	bl	bac08 <application_thread_invoke>
   bb49a:	e7b7      	b.n	bb40c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bb49c:	000bb337 	.word	0x000bb337
   bb4a0:	000bb5b9 	.word	0x000bb5b9
   bb4a4:	000baf13 	.word	0x000baf13

000bb4a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bb4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb4ac:	b08b      	sub	sp, #44	; 0x2c
   bb4ae:	4605      	mov	r5, r0
   bb4b0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bb4b4:	460f      	mov	r7, r1
   bb4b6:	4690      	mov	r8, r2
   bb4b8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb4ba:	f7ff fc0f 	bl	bacdc <spark_cloud_flag_connected>
   bb4be:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bb4c0:	4683      	mov	fp, r0
   bb4c2:	bb38      	cbnz	r0, bb514 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bb4c4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bb4c8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb4ca:	a905      	add	r1, sp, #20
   bb4cc:	4630      	mov	r0, r6
   bb4ce:	f8ad 3018 	strh.w	r3, [sp, #24]
   bb4d2:	f7ff fe8b 	bl	bb1ec <_ZN8particle5ErrorC1EOS0_>
   bb4d6:	2014      	movs	r0, #20
   bb4d8:	f7f8 fddd 	bl	b4096 <_Znwj>
   bb4dc:	4604      	mov	r4, r0
   bb4de:	b148      	cbz	r0, bb4f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bb4e0:	2302      	movs	r3, #2
   bb4e2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb4e4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bb4e6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb4ea:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bb4ec:	4631      	mov	r1, r6
   bb4ee:	300c      	adds	r0, #12
   bb4f0:	f7ff fe7c 	bl	bb1ec <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb4f4:	4628      	mov	r0, r5
	: __shared_count(__p)
   bb4f6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb4f8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bb4fc:	f7ff ff32 	bl	bb364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb500:	4630      	mov	r0, r6
   bb502:	f7ff fe80 	bl	bb206 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bb506:	a805      	add	r0, sp, #20
   bb508:	f7ff fe7d 	bl	bb206 <_ZN8particle5ErrorD1Ev>
}
   bb50c:	4628      	mov	r0, r5
   bb50e:	b00b      	add	sp, #44	; 0x2c
   bb510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bb514:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bb516:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bb518:	2014      	movs	r0, #20
   bb51a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bb51e:	9307      	str	r3, [sp, #28]
   bb520:	f7f8 fdb9 	bl	b4096 <_Znwj>
   bb524:	4601      	mov	r1, r0
   bb526:	b118      	cbz	r0, bb530 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bb528:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb52c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb52e:	7044      	strb	r4, [r0, #1]
   bb530:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb532:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bb534:	f7ff ff16 	bl	bb364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bb538:	4b1e      	ldr	r3, [pc, #120]	; (bb5b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bb53a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bb53c:	2008      	movs	r0, #8
   bb53e:	f7f8 fdaa 	bl	b4096 <_Znwj>
   bb542:	4604      	mov	r4, r0
   bb544:	b110      	cbz	r0, bb54c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bb546:	a903      	add	r1, sp, #12
   bb548:	f7ff fec8 	bl	bb2dc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bb54c:	9600      	str	r6, [sp, #0]
   bb54e:	fa5f f38a 	uxtb.w	r3, sl
   bb552:	464a      	mov	r2, r9
   bb554:	4641      	mov	r1, r8
   bb556:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bb558:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bb55a:	f7ff fbc7 	bl	bacec <spark_send_event>
   bb55e:	b9b8      	cbnz	r0, bb590 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bb560:	9b03      	ldr	r3, [sp, #12]
   bb562:	785b      	ldrb	r3, [r3, #1]
   bb564:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bb568:	b993      	cbnz	r3, bb590 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bb56a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bb56e:	a905      	add	r1, sp, #20
   bb570:	a803      	add	r0, sp, #12
   bb572:	9205      	str	r2, [sp, #20]
   bb574:	f8ad 3018 	strh.w	r3, [sp, #24]
   bb578:	f7ff ff18 	bl	bb3ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bb57c:	a805      	add	r0, sp, #20
   bb57e:	f7ff fe42 	bl	bb206 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bb582:	a805      	add	r0, sp, #20
   bb584:	9909      	ldr	r1, [sp, #36]	; 0x24
   bb586:	f7ff feb2 	bl	bb2ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bb58a:	a806      	add	r0, sp, #24
   bb58c:	f7fa fb08 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb590:	a903      	add	r1, sp, #12
   bb592:	a805      	add	r0, sp, #20
   bb594:	f7ff fea2 	bl	bb2dc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb598:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bb59a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb59c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bb59e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bb5a0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bb5a2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bb5a4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bb5a6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bb5a8:	f7fa fafa 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb5ac:	a804      	add	r0, sp, #16
   bb5ae:	f7fa faf7 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bb5b2:	e7ab      	b.n	bb50c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bb5b4:	000bb635 	.word	0x000bb635

000bb5b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bb5b8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bb5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb5bc:	4605      	mov	r5, r0
	switch (__op)
   bb5be:	d103      	bne.n	bb5c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bb5c0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bb5c2:	6003      	str	r3, [r0, #0]
      }
   bb5c4:	2000      	movs	r0, #0
   bb5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bb5c8:	2a02      	cmp	r2, #2
   bb5ca:	d010      	beq.n	bb5ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bb5cc:	2a03      	cmp	r2, #3
   bb5ce:	d1f9      	bne.n	bb5c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bb5d0:	6804      	ldr	r4, [r0, #0]
   bb5d2:	2c00      	cmp	r4, #0
   bb5d4:	d0f6      	beq.n	bb5c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bb5d6:	f104 0010 	add.w	r0, r4, #16
   bb5da:	f7ff fe14 	bl	bb206 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bb5de:	4620      	mov	r0, r4
   bb5e0:	f7f9 f96e 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bb5e4:	2118      	movs	r1, #24
   bb5e6:	4620      	mov	r0, r4
   bb5e8:	f7f8 fd59 	bl	b409e <_ZdlPvj>
   bb5ec:	e7ea      	b.n	bb5c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bb5ee:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bb5f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bb5f2:	f7f8 fd50 	bl	b4096 <_Znwj>
   bb5f6:	4604      	mov	r4, r0
   bb5f8:	b150      	cbz	r0, bb610 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bb5fa:	4631      	mov	r1, r6
   bb5fc:	f7ff fec6 	bl	bb38c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bb600:	6930      	ldr	r0, [r6, #16]
   bb602:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb606:	b108      	cbz	r0, bb60c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bb608:	f003 fbee 	bl	bede8 <strdup>
        type_(type) {
   bb60c:	6120      	str	r0, [r4, #16]
   bb60e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bb610:	602c      	str	r4, [r5, #0]
	}
   bb612:	e7d7      	b.n	bb5c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bb614 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bb614:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb616:	2300      	movs	r3, #0
   bb618:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bb61a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bb61c:	4604      	mov	r4, r0
   bb61e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bb620:	b12b      	cbz	r3, bb62e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb622:	2202      	movs	r2, #2
   bb624:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb626:	68eb      	ldr	r3, [r5, #12]
   bb628:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bb62a:	68ab      	ldr	r3, [r5, #8]
   bb62c:	60a3      	str	r3, [r4, #8]
    }
   bb62e:	4620      	mov	r0, r4
   bb630:	bd38      	pop	{r3, r4, r5, pc}
	...

000bb634 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bb634:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb636:	b089      	sub	sp, #36	; 0x24
   bb638:	4604      	mov	r4, r0
   bb63a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bb63c:	a801      	add	r0, sp, #4
   bb63e:	4611      	mov	r1, r2
   bb640:	f7ff fe55 	bl	bb2ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bb644:	b1a4      	cbz	r4, bb670 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bb646:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb648:	b11d      	cbz	r5, bb652 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bb64a:	4628      	mov	r0, r5
   bb64c:	f003 fbcc 	bl	bede8 <strdup>
   bb650:	4605      	mov	r5, r0
   bb652:	a801      	add	r0, sp, #4
   bb654:	a903      	add	r1, sp, #12
        type_(type) {
   bb656:	9503      	str	r5, [sp, #12]
   bb658:	f8ad 4010 	strh.w	r4, [sp, #16]
   bb65c:	f7ff fea6 	bl	bb3ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bb660:	a803      	add	r0, sp, #12
   bb662:	f7ff fdd0 	bl	bb206 <_ZN8particle5ErrorD1Ev>
   bb666:	a802      	add	r0, sp, #8
   bb668:	f7fa fa9a 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb66c:	b009      	add	sp, #36	; 0x24
   bb66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bb670:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bb672:	2301      	movs	r3, #1
   bb674:	e8d5 2f4f 	ldrexb	r2, [r5]
   bb678:	2a00      	cmp	r2, #0
   bb67a:	d103      	bne.n	bb684 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bb67c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bb680:	2900      	cmp	r1, #0
   bb682:	d1f7      	bne.n	bb674 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bb684:	d1ef      	bne.n	bb666 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bb686:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bb688:	f3bf 8f5b 	dmb	ish
   bb68c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bb68e:	1d2b      	adds	r3, r5, #4
   bb690:	f3bf 8f5b 	dmb	ish
   bb694:	e853 6f00 	ldrex	r6, [r3]
   bb698:	e843 4200 	strex	r2, r4, [r3]
   bb69c:	2a00      	cmp	r2, #0
   bb69e:	d1f9      	bne.n	bb694 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bb6a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bb6a4:	2e00      	cmp	r6, #0
   bb6a6:	d0de      	beq.n	bb666 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bb6a8:	4620      	mov	r0, r4
   bb6aa:	f7ff faa5 	bl	babf8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bb6ae:	4607      	mov	r7, r0
   bb6b0:	b160      	cbz	r0, bb6cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bb6b2:	f105 010c 	add.w	r1, r5, #12
   bb6b6:	4630      	mov	r0, r6
   bb6b8:	f7ff fe44 	bl	bb344 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bb6bc:	4630      	mov	r0, r6
   bb6be:	f7f9 f8ff 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bb6c2:	2110      	movs	r1, #16
   bb6c4:	4630      	mov	r0, r6
   bb6c6:	f7f8 fcea 	bl	b409e <_ZdlPvj>
   bb6ca:	e7cc      	b.n	bb666 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb6cc:	4631      	mov	r1, r6
   bb6ce:	a803      	add	r0, sp, #12
   bb6d0:	f7ff ffa0 	bl	bb614 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb6d4:	7b2b      	ldrb	r3, [r5, #12]
   bb6d6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bb6da:	2010      	movs	r0, #16
   bb6dc:	f7f8 fcdb 	bl	b4096 <_Znwj>
   bb6e0:	4605      	mov	r5, r0
   bb6e2:	b1d0      	cbz	r0, bb71a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bb6e4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb6e6:	2014      	movs	r0, #20
   bb6e8:	f7f8 fcd5 	bl	b4096 <_Znwj>
   bb6ec:	4604      	mov	r4, r0
   bb6ee:	b178      	cbz	r0, bb710 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bb6f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bb6f2:	4601      	mov	r1, r0
   bb6f4:	a803      	add	r0, sp, #12
   bb6f6:	f7fb fca6 	bl	b7046 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb6fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb6fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb6fe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb700:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bb702:	9205      	str	r2, [sp, #20]
   bb704:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb706:	60e3      	str	r3, [r4, #12]
   bb708:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bb70c:	9206      	str	r2, [sp, #24]
   bb70e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bb710:	4b06      	ldr	r3, [pc, #24]	; (bb72c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bb712:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb714:	4b06      	ldr	r3, [pc, #24]	; (bb730 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb716:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb718:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bb71a:	a803      	add	r0, sp, #12
   bb71c:	f7f9 f8d0 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bb720:	2200      	movs	r2, #0
   bb722:	4629      	mov	r1, r5
   bb724:	4803      	ldr	r0, [pc, #12]	; (bb734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bb726:	f7ff fa6f 	bl	bac08 <application_thread_invoke>
   bb72a:	e7c7      	b.n	bb6bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bb72c:	000bb357 	.word	0x000bb357
   bb730:	000bb739 	.word	0x000bb739
   bb734:	000baf13 	.word	0x000baf13

000bb738 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bb738:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bb73a:	b570      	push	{r4, r5, r6, lr}
   bb73c:	4604      	mov	r4, r0
	switch (__op)
   bb73e:	d103      	bne.n	bb748 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bb740:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bb742:	6003      	str	r3, [r0, #0]
      }
   bb744:	2000      	movs	r0, #0
   bb746:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bb748:	2a02      	cmp	r2, #2
   bb74a:	d00c      	beq.n	bb766 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bb74c:	2a03      	cmp	r2, #3
   bb74e:	d1f9      	bne.n	bb744 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bb750:	6804      	ldr	r4, [r0, #0]
   bb752:	2c00      	cmp	r4, #0
   bb754:	d0f6      	beq.n	bb744 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bb756:	4620      	mov	r0, r4
   bb758:	f7f9 f8b2 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bb75c:	2114      	movs	r1, #20
   bb75e:	4620      	mov	r0, r4
   bb760:	f7f8 fc9d 	bl	b409e <_ZdlPvj>
   bb764:	e7ee      	b.n	bb744 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bb766:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bb768:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bb76a:	f7f8 fc94 	bl	b4096 <_Znwj>
   bb76e:	4605      	mov	r5, r0
   bb770:	b120      	cbz	r0, bb77c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bb772:	4631      	mov	r1, r6
   bb774:	f7ff ff4e 	bl	bb614 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bb778:	7c33      	ldrb	r3, [r6, #16]
   bb77a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bb77c:	6025      	str	r5, [r4, #0]
	}
   bb77e:	e7e1      	b.n	bb744 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bb780 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb780:	2200      	movs	r2, #0
   bb782:	6840      	ldr	r0, [r0, #4]
   bb784:	4611      	mov	r1, r2
   bb786:	f7ff bb19 	b.w	badbc <network_listening>

000bb78a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb78a:	2200      	movs	r2, #0
   bb78c:	6840      	ldr	r0, [r0, #4]
   bb78e:	4611      	mov	r1, r2
   bb790:	f7ff bb24 	b.w	baddc <network_get_listen_timeout>

000bb794 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb794:	6840      	ldr	r0, [r0, #4]
   bb796:	2200      	movs	r2, #0
   bb798:	f7ff bb18 	b.w	badcc <network_set_listen_timeout>

000bb79c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb79c:	6840      	ldr	r0, [r0, #4]
   bb79e:	2200      	movs	r2, #0
   bb7a0:	f081 0101 	eor.w	r1, r1, #1
   bb7a4:	f7ff bb02 	b.w	badac <network_listen>

000bb7a8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb7a8:	2300      	movs	r3, #0
   bb7aa:	6840      	ldr	r0, [r0, #4]
   bb7ac:	461a      	mov	r2, r3
   bb7ae:	4619      	mov	r1, r3
   bb7b0:	f7ff baf4 	b.w	bad9c <network_off>

000bb7b4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb7b4:	2300      	movs	r3, #0
   bb7b6:	6840      	ldr	r0, [r0, #4]
   bb7b8:	461a      	mov	r2, r3
   bb7ba:	4619      	mov	r1, r3
   bb7bc:	f7ff bae6 	b.w	bad8c <network_on>

000bb7c0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bb7c0:	2200      	movs	r2, #0
   bb7c2:	6840      	ldr	r0, [r0, #4]
   bb7c4:	4611      	mov	r1, r2
   bb7c6:	f7ff bad9 	b.w	bad7c <network_ready>

000bb7ca <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb7ca:	2200      	movs	r2, #0
   bb7cc:	6840      	ldr	r0, [r0, #4]
   bb7ce:	4611      	mov	r1, r2
   bb7d0:	f7ff bac4 	b.w	bad5c <network_connecting>

000bb7d4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb7d4:	6840      	ldr	r0, [r0, #4]
   bb7d6:	2200      	movs	r2, #0
   bb7d8:	2102      	movs	r1, #2
   bb7da:	f7ff bac7 	b.w	bad6c <network_disconnect>

000bb7de <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb7de:	2300      	movs	r3, #0
   bb7e0:	6840      	ldr	r0, [r0, #4]
   bb7e2:	461a      	mov	r2, r3
   bb7e4:	f7ff bab2 	b.w	bad4c <network_connect>

000bb7e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bb7e8:	4b02      	ldr	r3, [pc, #8]	; (bb7f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bb7ea:	2203      	movs	r2, #3
   bb7ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bb7ee:	4a02      	ldr	r2, [pc, #8]	; (bb7f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bb7f0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bb7f2:	4770      	bx	lr
   bb7f4:	2003e5b4 	.word	0x2003e5b4
   bb7f8:	000c070c 	.word	0x000c070c

000bb7fc <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bb7fc:	6800      	ldr	r0, [r0, #0]
   bb7fe:	f000 b8e7 	b.w	bb9d0 <_ZN7TwoWire4lockEv>

000bb802 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bb802:	b510      	push	{r4, lr}
   bb804:	4604      	mov	r4, r0
      lock_(_lock) {
   bb806:	6001      	str	r1, [r0, #0]
   bb808:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bb80a:	b10a      	cbz	r2, bb810 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bb80c:	f7ff fff6 	bl	bb7fc <_ZN9FuelGauge4lockEv>
}
   bb810:	4620      	mov	r0, r4
   bb812:	bd10      	pop	{r4, pc}

000bb814 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bb814:	b513      	push	{r0, r1, r4, lr}
   bb816:	4604      	mov	r4, r0
   bb818:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bb81a:	f002 fca7 	bl	be16c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bb81e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bb820:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bb822:	4620      	mov	r0, r4
   bb824:	f7ff ffed 	bl	bb802 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bb828:	4620      	mov	r0, r4
   bb82a:	b002      	add	sp, #8
   bb82c:	bd10      	pop	{r4, pc}

000bb82e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bb82e:	6800      	ldr	r0, [r0, #0]
   bb830:	f000 b8d7 	b.w	bb9e2 <_ZN7TwoWire6unlockEv>

000bb834 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bb834:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bb838:	4604      	mov	r4, r0
   bb83a:	461d      	mov	r5, r3
   bb83c:	460f      	mov	r7, r1
   bb83e:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bb840:	f7ff ffdc 	bl	bb7fc <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bb844:	2236      	movs	r2, #54	; 0x36
   bb846:	2300      	movs	r3, #0
   bb848:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bb84c:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bb84e:	f04f 0801 	mov.w	r8, #1
   bb852:	230a      	movs	r3, #10
   bb854:	4669      	mov	r1, sp
   bb856:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bb85a:	f000 f89d 	bl	bb998 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bb85e:	6820      	ldr	r0, [r4, #0]
   bb860:	6803      	ldr	r3, [r0, #0]
   bb862:	4639      	mov	r1, r7
   bb864:	689b      	ldr	r3, [r3, #8]
   bb866:	4798      	blx	r3
    i2c_.write(MSB);
   bb868:	6820      	ldr	r0, [r4, #0]
   bb86a:	6803      	ldr	r3, [r0, #0]
   bb86c:	4631      	mov	r1, r6
   bb86e:	689b      	ldr	r3, [r3, #8]
   bb870:	4798      	blx	r3
    i2c_.write(LSB);
   bb872:	6820      	ldr	r0, [r4, #0]
   bb874:	6803      	ldr	r3, [r0, #0]
   bb876:	4629      	mov	r1, r5
   bb878:	689b      	ldr	r3, [r3, #8]
   bb87a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bb87c:	4641      	mov	r1, r8
   bb87e:	6820      	ldr	r0, [r4, #0]
   bb880:	f000 f8a2 	bl	bb9c8 <_ZN7TwoWire15endTransmissionEh>
   bb884:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bb886:	4620      	mov	r0, r4
   bb888:	bf0c      	ite	eq
   bb88a:	2500      	moveq	r5, #0
   bb88c:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bb890:	f7ff ffcd 	bl	bb82e <_ZN9FuelGauge6unlockEv>
}
   bb894:	4628      	mov	r0, r5
   bb896:	b004      	add	sp, #16
   bb898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb89c <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bb89c:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bb89e:	2240      	movs	r2, #64	; 0x40
   bb8a0:	2300      	movs	r3, #0
   bb8a2:	2106      	movs	r1, #6
   bb8a4:	f7ff ffc6 	bl	bb834 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bb8a8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bb8ac:	bd08      	pop	{r3, pc}

000bb8ae <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bb8ae:	4770      	bx	lr

000bb8b0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bb8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb8b2:	4606      	mov	r6, r0
   bb8b4:	4615      	mov	r5, r2
   bb8b6:	460c      	mov	r4, r1
   bb8b8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bb8ba:	42bc      	cmp	r4, r7
   bb8bc:	d006      	beq.n	bb8cc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bb8be:	6833      	ldr	r3, [r6, #0]
   bb8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
   bb8c4:	689b      	ldr	r3, [r3, #8]
   bb8c6:	4630      	mov	r0, r6
   bb8c8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bb8ca:	e7f6      	b.n	bb8ba <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bb8cc:	4628      	mov	r0, r5
   bb8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb8d0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bb8d0:	7c00      	ldrb	r0, [r0, #16]
   bb8d2:	2200      	movs	r2, #0
   bb8d4:	f7fe bf8e 	b.w	ba7f4 <hal_i2c_write>

000bb8d8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bb8d8:	7c00      	ldrb	r0, [r0, #16]
   bb8da:	2100      	movs	r1, #0
   bb8dc:	f7fe bf92 	b.w	ba804 <hal_i2c_available>

000bb8e0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bb8e0:	7c00      	ldrb	r0, [r0, #16]
   bb8e2:	2100      	movs	r1, #0
   bb8e4:	f7fe bf96 	b.w	ba814 <hal_i2c_read>

000bb8e8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bb8e8:	7c00      	ldrb	r0, [r0, #16]
   bb8ea:	2100      	movs	r1, #0
   bb8ec:	f7fe bf9a 	b.w	ba824 <hal_i2c_peek>

000bb8f0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bb8f0:	7c00      	ldrb	r0, [r0, #16]
   bb8f2:	2100      	movs	r1, #0
   bb8f4:	f7fe bf9e 	b.w	ba834 <hal_i2c_flush>

000bb8f8 <_ZN7TwoWireD0Ev>:
   bb8f8:	b510      	push	{r4, lr}
   bb8fa:	2114      	movs	r1, #20
   bb8fc:	4604      	mov	r4, r0
   bb8fe:	f7f8 fbce 	bl	b409e <_ZdlPvj>
   bb902:	4620      	mov	r0, r4
   bb904:	bd10      	pop	{r4, pc}
	...

000bb908 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb908:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bb90a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb90e:	4604      	mov	r4, r0
   bb910:	4608      	mov	r0, r1
   bb912:	2100      	movs	r1, #0
   bb914:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb918:	4b03      	ldr	r3, [pc, #12]	; (bb928 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bb91a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bb91c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bb91e:	4611      	mov	r1, r2
   bb920:	f7fe ff98 	bl	ba854 <hal_i2c_init>
}
   bb924:	4620      	mov	r0, r4
   bb926:	bd10      	pop	{r4, pc}
   bb928:	000c0748 	.word	0x000c0748

000bb92c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bb92c:	2300      	movs	r3, #0
   bb92e:	7c00      	ldrb	r0, [r0, #16]
   bb930:	461a      	mov	r2, r3
   bb932:	4619      	mov	r1, r3
   bb934:	f7fe bf46 	b.w	ba7c4 <hal_i2c_begin>

000bb938 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bb938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb93a:	2200      	movs	r2, #0
   bb93c:	2314      	movs	r3, #20
   bb93e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bb942:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bb946:	780b      	ldrb	r3, [r1, #0]
   bb948:	f88d 3008 	strb.w	r3, [sp, #8]
   bb94c:	684b      	ldr	r3, [r1, #4]
   bb94e:	9303      	str	r3, [sp, #12]
   bb950:	68cb      	ldr	r3, [r1, #12]
   bb952:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bb954:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb956:	7a0b      	ldrb	r3, [r1, #8]
   bb958:	9305      	str	r3, [sp, #20]
   bb95a:	a901      	add	r1, sp, #4
   bb95c:	f7fe ff92 	bl	ba884 <hal_i2c_request_ex>
}
   bb960:	b007      	add	sp, #28
   bb962:	f85d fb04 	ldr.w	pc, [sp], #4

000bb966 <_ZN7TwoWire11requestFromEhjh>:
{
   bb966:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bb968:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bb96a:	f88d 1000 	strb.w	r1, [sp]
   bb96e:	f04f 0164 	mov.w	r1, #100	; 0x64
   bb972:	9103      	str	r1, [sp, #12]
   bb974:	bf18      	it	ne
   bb976:	2301      	movne	r3, #1
   bb978:	4669      	mov	r1, sp
    size_ = size;
   bb97a:	9201      	str	r2, [sp, #4]
   bb97c:	f88d 3008 	strb.w	r3, [sp, #8]
   bb980:	f7ff ffda 	bl	bb938 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bb984:	b005      	add	sp, #20
   bb986:	f85d fb04 	ldr.w	pc, [sp], #4

000bb98a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bb98a:	7c00      	ldrb	r0, [r0, #16]
   bb98c:	2200      	movs	r2, #0
   bb98e:	f7fe bf21 	b.w	ba7d4 <hal_i2c_begin_transmission>

000bb992 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bb992:	b2c9      	uxtb	r1, r1
   bb994:	f7ff bff9 	b.w	bb98a <_ZN7TwoWire17beginTransmissionEh>

000bb998 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bb998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb99a:	2300      	movs	r3, #0
   bb99c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bb9a0:	684a      	ldr	r2, [r1, #4]
   bb9a2:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bb9a4:	2314      	movs	r3, #20
    };
   bb9a6:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bb9a8:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bb9ac:	780b      	ldrb	r3, [r1, #0]
    };
   bb9ae:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb9b0:	7a0a      	ldrb	r2, [r1, #8]
   bb9b2:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bb9b4:	7c00      	ldrb	r0, [r0, #16]
    };
   bb9b6:	f88d 3008 	strb.w	r3, [sp, #8]
   bb9ba:	aa01      	add	r2, sp, #4
   bb9bc:	4619      	mov	r1, r3
   bb9be:	f7fe ff09 	bl	ba7d4 <hal_i2c_begin_transmission>
}
   bb9c2:	b007      	add	sp, #28
   bb9c4:	f85d fb04 	ldr.w	pc, [sp], #4

000bb9c8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb9c8:	7c00      	ldrb	r0, [r0, #16]
   bb9ca:	2200      	movs	r2, #0
   bb9cc:	f7fe bf0a 	b.w	ba7e4 <hal_i2c_end_transmission>

000bb9d0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bb9d0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bb9d2:	2100      	movs	r1, #0
   bb9d4:	7c00      	ldrb	r0, [r0, #16]
   bb9d6:	f7fe ff45 	bl	ba864 <hal_i2c_lock>
}
   bb9da:	fab0 f080 	clz	r0, r0
   bb9de:	0940      	lsrs	r0, r0, #5
   bb9e0:	bd08      	pop	{r3, pc}

000bb9e2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bb9e2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bb9e4:	2100      	movs	r1, #0
   bb9e6:	7c00      	ldrb	r0, [r0, #16]
   bb9e8:	f7fe ff44 	bl	ba874 <hal_i2c_unlock>
}
   bb9ec:	fab0 f080 	clz	r0, r0
   bb9f0:	0940      	lsrs	r0, r0, #5
   bb9f2:	bd08      	pop	{r3, pc}

000bb9f4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bb9f4:	4700      	bx	r0
	...

000bb9f8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bb9f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bb9fc:	2400      	movs	r4, #0
{
   bb9fe:	461d      	mov	r5, r3
   bba00:	460f      	mov	r7, r1
   bba02:	4690      	mov	r8, r2
   bba04:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bba06:	f7fe fecd 	bl	ba7a4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bba0a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bba0c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bba10:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bba14:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bba18:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bba1c:	bfa2      	ittt	ge
   bba1e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bba22:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bba26:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bba28:	4907      	ldr	r1, [pc, #28]	; (bba48 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bba2a:	9400      	str	r4, [sp, #0]
   bba2c:	4643      	mov	r3, r8
   bba2e:	463a      	mov	r2, r7
   bba30:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bba32:	bfa8      	it	ge
   bba34:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bba38:	f7fe feac 	bl	ba794 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bba3c:	fab0 f080 	clz	r0, r0
   bba40:	0940      	lsrs	r0, r0, #5
   bba42:	b004      	add	sp, #16
   bba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bba48:	000bb9f5 	.word	0x000bb9f5

000bba4c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bba4e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bba50:	f7fe fea8 	bl	ba7a4 <HAL_Interrupts_Detach>
   bba54:	4605      	mov	r5, r0
   bba56:	b970      	cbnz	r0, bba76 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bba58:	4f08      	ldr	r7, [pc, #32]	; (bba7c <_Z15detachInterruptt+0x30>)
   bba5a:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bba5e:	b146      	cbz	r6, bba72 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bba60:	4630      	mov	r0, r6
   bba62:	f7f8 ff2d 	bl	b48c0 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bba66:	2110      	movs	r1, #16
   bba68:	4630      	mov	r0, r6
   bba6a:	f7f8 fb18 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bba6e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bba72:	2001      	movs	r0, #1
   bba74:	e000      	b.n	bba78 <_Z15detachInterruptt+0x2c>
        return false;
   bba76:	2000      	movs	r0, #0
    }
    return true;
}
   bba78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bba7a:	bf00      	nop
   bba7c:	2003e5bc 	.word	0x2003e5bc

000bba80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bba80:	4770      	bx	lr

000bba82 <_ZN9IPAddressD0Ev>:
   bba82:	b510      	push	{r4, lr}
   bba84:	2118      	movs	r1, #24
   bba86:	4604      	mov	r4, r0
   bba88:	f7f8 fb09 	bl	b409e <_ZdlPvj>
   bba8c:	4620      	mov	r0, r4
   bba8e:	bd10      	pop	{r4, pc}

000bba90 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bba90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bba92:	7d03      	ldrb	r3, [r0, #20]
   bba94:	2b06      	cmp	r3, #6
{
   bba96:	b08d      	sub	sp, #52	; 0x34
   bba98:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bba9a:	f100 0704 	add.w	r7, r0, #4
   bba9e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bbaa2:	d012      	beq.n	bbaca <_ZNK9IPAddress7printToER5Print+0x3a>
   bbaa4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bbaa8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bbaac:	220a      	movs	r2, #10
   bbaae:	4630      	mov	r0, r6
   bbab0:	f001 fb0d 	bl	bd0ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bbab4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bbab6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bbab8:	d019      	beq.n	bbaee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bbaba:	2c00      	cmp	r4, #0
   bbabc:	d0f4      	beq.n	bbaa8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bbabe:	212e      	movs	r1, #46	; 0x2e
   bbac0:	4630      	mov	r0, r6
   bbac2:	f001 faf5 	bl	bd0b0 <_ZN5Print5printEc>
   bbac6:	4404      	add	r4, r0
   bbac8:	e7ee      	b.n	bbaa8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bbaca:	232f      	movs	r3, #47	; 0x2f
   bbacc:	466a      	mov	r2, sp
   bbace:	4639      	mov	r1, r7
   bbad0:	200a      	movs	r0, #10
		buf[0] = 0;
   bbad2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bbad6:	f7fe fedd 	bl	ba894 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bbada:	4668      	mov	r0, sp
   bbadc:	f003 f9a1 	bl	bee22 <strlen>
   bbae0:	6833      	ldr	r3, [r6, #0]
   bbae2:	4602      	mov	r2, r0
   bbae4:	68db      	ldr	r3, [r3, #12]
   bbae6:	4669      	mov	r1, sp
   bbae8:	4630      	mov	r0, r6
   bbaea:	4798      	blx	r3
   bbaec:	4604      	mov	r4, r0
    }
    return n;
}
   bbaee:	4620      	mov	r0, r4
   bbaf0:	b00d      	add	sp, #52	; 0x34
   bbaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bbaf4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bbaf4:	b510      	push	{r4, lr}
   bbaf6:	4b05      	ldr	r3, [pc, #20]	; (bbb0c <_ZN9IPAddressC1Ev+0x18>)
   bbaf8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bbafa:	2211      	movs	r2, #17
   bbafc:	f840 3b04 	str.w	r3, [r0], #4
   bbb00:	2100      	movs	r1, #0
   bbb02:	f003 f8d3 	bl	becac <memset>
}
   bbb06:	4620      	mov	r0, r4
   bbb08:	bd10      	pop	{r4, pc}
   bbb0a:	bf00      	nop
   bbb0c:	000c0770 	.word	0x000c0770

000bbb10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bbb10:	4603      	mov	r3, r0
   bbb12:	4a07      	ldr	r2, [pc, #28]	; (bbb30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bbb14:	b510      	push	{r4, lr}
   bbb16:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bbb1a:	f101 0210 	add.w	r2, r1, #16
   bbb1e:	f851 4b04 	ldr.w	r4, [r1], #4
   bbb22:	f843 4b04 	str.w	r4, [r3], #4
   bbb26:	4291      	cmp	r1, r2
   bbb28:	d1f9      	bne.n	bbb1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bbb2a:	780a      	ldrb	r2, [r1, #0]
   bbb2c:	701a      	strb	r2, [r3, #0]
}
   bbb2e:	bd10      	pop	{r4, pc}
   bbb30:	000c0770 	.word	0x000c0770

000bbb34 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bbb34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bbb36:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bbb3a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bbb3e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bbb42:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bbb46:	2304      	movs	r3, #4
   bbb48:	6041      	str	r1, [r0, #4]
   bbb4a:	7503      	strb	r3, [r0, #20]
}
   bbb4c:	bd10      	pop	{r4, pc}
	...

000bbb50 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bbb50:	b507      	push	{r0, r1, r2, lr}
   bbb52:	4b06      	ldr	r3, [pc, #24]	; (bbb6c <_ZN9IPAddressC1EPKh+0x1c>)
   bbb54:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bbb56:	78cb      	ldrb	r3, [r1, #3]
   bbb58:	9300      	str	r3, [sp, #0]
   bbb5a:	788b      	ldrb	r3, [r1, #2]
   bbb5c:	784a      	ldrb	r2, [r1, #1]
   bbb5e:	7809      	ldrb	r1, [r1, #0]
   bbb60:	f7ff ffe8 	bl	bbb34 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bbb64:	b003      	add	sp, #12
   bbb66:	f85d fb04 	ldr.w	pc, [sp], #4
   bbb6a:	bf00      	nop
   bbb6c:	000c0770 	.word	0x000c0770

000bbb70 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bbb70:	f100 0310 	add.w	r3, r0, #16
   bbb74:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bbb76:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bbb7a:	2901      	cmp	r1, #1
   bbb7c:	4618      	mov	r0, r3
   bbb7e:	d108      	bne.n	bbb92 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bbb80:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bbb84:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bbb88:	3a01      	subs	r2, #1
   bbb8a:	f103 0310 	add.w	r3, r3, #16
   bbb8e:	d1f2      	bne.n	bbb76 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bbb90:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bbb92:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bbb94:	bf04      	itt	eq
   bbb96:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bbb9a:	1852      	addeq	r2, r2, r1
   bbb9c:	e7f4      	b.n	bbb88 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bbb9e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bbb9e:	b40e      	push	{r1, r2, r3}
   bbba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbba2:	b088      	sub	sp, #32
   bbba4:	af00      	add	r7, sp, #0
   bbba6:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbbaa:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bbbac:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbbb0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bbbb2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbbb4:	462b      	mov	r3, r5
   bbbb6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bbbb8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbbba:	f7ff f957 	bl	bae6c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bbbbe:	280f      	cmp	r0, #15
   bbbc0:	687a      	ldr	r2, [r7, #4]
   bbbc2:	d91a      	bls.n	bbbfa <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bbbc4:	f100 0308 	add.w	r3, r0, #8
   bbbc8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bbbcc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bbbce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbbd2:	1c41      	adds	r1, r0, #1
   bbbd4:	462b      	mov	r3, r5
   bbbd6:	4668      	mov	r0, sp
        va_start(args, fmt);
   bbbd8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbbda:	f7ff f947 	bl	bae6c <vsnprintf>
        if (n > 0) {
   bbbde:	1e02      	subs	r2, r0, #0
   bbbe0:	dd04      	ble.n	bbbec <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bbbe2:	6823      	ldr	r3, [r4, #0]
   bbbe4:	4669      	mov	r1, sp
   bbbe6:	689b      	ldr	r3, [r3, #8]
   bbbe8:	4620      	mov	r0, r4
   bbbea:	4798      	blx	r3
   bbbec:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bbbee:	3720      	adds	r7, #32
   bbbf0:	46bd      	mov	sp, r7
   bbbf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bbbf6:	b003      	add	sp, #12
   bbbf8:	4770      	bx	lr
    } else if (n > 0) {
   bbbfa:	2800      	cmp	r0, #0
   bbbfc:	d0f7      	beq.n	bbbee <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bbbfe:	6823      	ldr	r3, [r4, #0]
   bbc00:	4602      	mov	r2, r0
   bbc02:	689b      	ldr	r3, [r3, #8]
   bbc04:	f107 0110 	add.w	r1, r7, #16
   bbc08:	4620      	mov	r0, r4
   bbc0a:	4798      	blx	r3
}
   bbc0c:	e7ef      	b.n	bbbee <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bbc0e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbc0e:	b538      	push	{r3, r4, r5, lr}
   bbc10:	680b      	ldr	r3, [r1, #0]
   bbc12:	6003      	str	r3, [r0, #0]
   bbc14:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bbc16:	6843      	ldr	r3, [r0, #4]
   bbc18:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbc1a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bbc1c:	d008      	beq.n	bbc30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bbc1e:	b115      	cbz	r5, bbc26 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bbc20:	686b      	ldr	r3, [r5, #4]
   bbc22:	3301      	adds	r3, #1
   bbc24:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bbc26:	6860      	ldr	r0, [r4, #4]
   bbc28:	b108      	cbz	r0, bbc2e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bbc2a:	f7ff f986 	bl	baf3a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bbc2e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbc30:	bd38      	pop	{r3, r4, r5, pc}

000bbc32 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bbc32:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bbc34:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bbc36:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bbc3a:	689b      	ldr	r3, [r3, #8]
   bbc3c:	2201      	movs	r2, #1
   bbc3e:	f10d 0107 	add.w	r1, sp, #7
   bbc42:	4798      	blx	r3
}
   bbc44:	b003      	add	sp, #12
   bbc46:	f85d fb04 	ldr.w	pc, [sp], #4

000bbc4a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bbc4a:	460b      	mov	r3, r1
   bbc4c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bbc4e:	2200      	movs	r2, #0
   bbc50:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bbc52:	e9c0 2200 	strd	r2, r2, [r0]
   bbc56:	4604      	mov	r4, r0
        t_ = t;
   bbc58:	6083      	str	r3, [r0, #8]
    if (t) {
   bbc5a:	b90b      	cbnz	r3, bbc60 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bbc5c:	4620      	mov	r0, r4
   bbc5e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bbc60:	f7ff ffd5 	bl	bbc0e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bbc64:	e7fa      	b.n	bbc5c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bbc66 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bbc66:	6883      	ldr	r3, [r0, #8]
   bbc68:	b1eb      	cbz	r3, bbca6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bbc6a:	781a      	ldrb	r2, [r3, #0]
   bbc6c:	2a03      	cmp	r2, #3
   bbc6e:	d81a      	bhi.n	bbca6 <_ZNK5spark9JSONValue4typeEv+0x40>
   bbc70:	e8df f002 	tbb	[pc, r2]
   bbc74:	1b021704 	.word	0x1b021704
   bbc78:	2005      	movs	r0, #5
   bbc7a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bbc7c:	6802      	ldr	r2, [r0, #0]
   bbc7e:	685b      	ldr	r3, [r3, #4]
   bbc80:	6852      	ldr	r2, [r2, #4]
   bbc82:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bbc84:	282d      	cmp	r0, #45	; 0x2d
   bbc86:	d012      	beq.n	bbcae <_ZNK5spark9JSONValue4typeEv+0x48>
   bbc88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bbc8c:	2b09      	cmp	r3, #9
   bbc8e:	d90e      	bls.n	bbcae <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bbc90:	2874      	cmp	r0, #116	; 0x74
   bbc92:	d00e      	beq.n	bbcb2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bbc94:	2866      	cmp	r0, #102	; 0x66
   bbc96:	d00c      	beq.n	bbcb2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bbc98:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bbc9c:	4258      	negs	r0, r3
   bbc9e:	4158      	adcs	r0, r3
   bbca0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bbca2:	2006      	movs	r0, #6
   bbca4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bbca6:	2000      	movs	r0, #0
   bbca8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bbcaa:	2004      	movs	r0, #4
   bbcac:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bbcae:	2003      	movs	r0, #3
   bbcb0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bbcb2:	2002      	movs	r0, #2
}
   bbcb4:	4770      	bx	lr

000bbcb6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bbcb6:	b510      	push	{r4, lr}
   bbcb8:	4604      	mov	r4, r0
    switch (type()) {
   bbcba:	f7ff ffd4 	bl	bbc66 <_ZNK5spark9JSONValue4typeEv>
   bbcbe:	2802      	cmp	r0, #2
   bbcc0:	d00e      	beq.n	bbce0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bbcc2:	1ec3      	subs	r3, r0, #3
   bbcc4:	b2db      	uxtb	r3, r3
   bbcc6:	2b01      	cmp	r3, #1
   bbcc8:	d814      	bhi.n	bbcf4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bbcca:	6822      	ldr	r2, [r4, #0]
   bbccc:	68a3      	ldr	r3, [r4, #8]
   bbcce:	6850      	ldr	r0, [r2, #4]
   bbcd0:	685b      	ldr	r3, [r3, #4]
}
   bbcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bbcd6:	220a      	movs	r2, #10
   bbcd8:	2100      	movs	r1, #0
   bbcda:	4418      	add	r0, r3
   bbcdc:	f003 b992 	b.w	bf004 <strtol>
        const char* const s = d_->json + t_->start;
   bbce0:	6822      	ldr	r2, [r4, #0]
   bbce2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bbce4:	6852      	ldr	r2, [r2, #4]
   bbce6:	685b      	ldr	r3, [r3, #4]
   bbce8:	5cd0      	ldrb	r0, [r2, r3]
   bbcea:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bbcee:	4258      	negs	r0, r3
   bbcf0:	4158      	adcs	r0, r3
}
   bbcf2:	bd10      	pop	{r4, pc}
    switch (type()) {
   bbcf4:	2000      	movs	r0, #0
   bbcf6:	e7fc      	b.n	bbcf2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bbcf8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bbcf8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bbcfa:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bbcfc:	e9c0 3300 	strd	r3, r3, [r0]
   bbd00:	4604      	mov	r4, r0
        n_(0) {
   bbd02:	480e      	ldr	r0, [pc, #56]	; (bbd3c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bbd04:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bbd08:	b1a9      	cbz	r1, bbd36 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bbd0a:	780b      	ldrb	r3, [r1, #0]
   bbd0c:	2b03      	cmp	r3, #3
   bbd0e:	d006      	beq.n	bbd1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bbd10:	b98b      	cbnz	r3, bbd36 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bbd12:	6813      	ldr	r3, [r2, #0]
   bbd14:	6858      	ldr	r0, [r3, #4]
   bbd16:	684b      	ldr	r3, [r1, #4]
   bbd18:	5cc3      	ldrb	r3, [r0, r3]
   bbd1a:	2b6e      	cmp	r3, #110	; 0x6e
   bbd1c:	d007      	beq.n	bbd2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bbd1e:	6813      	ldr	r3, [r2, #0]
   bbd20:	684d      	ldr	r5, [r1, #4]
   bbd22:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bbd24:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bbd26:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bbd28:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bbd2a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bbd2c:	60e3      	str	r3, [r4, #12]
   bbd2e:	4611      	mov	r1, r2
   bbd30:	4620      	mov	r0, r4
   bbd32:	f7ff ff6c 	bl	bbc0e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bbd36:	4620      	mov	r0, r4
   bbd38:	bd38      	pop	{r3, r4, r5, pc}
   bbd3a:	bf00      	nop
   bbd3c:	000c07d9 	.word	0x000c07d9

000bbd40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bbd40:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bbd42:	2500      	movs	r5, #0
   bbd44:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bbd46:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bbd4a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bbd4e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bbd52:	4604      	mov	r4, r0
   bbd54:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bbd56:	b14b      	cbz	r3, bbd6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bbd58:	781a      	ldrb	r2, [r3, #0]
   bbd5a:	2a01      	cmp	r2, #1
   bbd5c:	d106      	bne.n	bbd6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bbd5e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bbd62:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bbd64:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bbd66:	6143      	str	r3, [r0, #20]
   bbd68:	f7ff ff51 	bl	bbc0e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bbd6c:	4620      	mov	r0, r4
   bbd6e:	bd38      	pop	{r3, r4, r5, pc}

000bbd70 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bbd70:	b510      	push	{r4, lr}
    if (!n_) {
   bbd72:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bbd74:	4604      	mov	r4, r0
    if (!n_) {
   bbd76:	b163      	cbz	r3, bbd92 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bbd78:	6880      	ldr	r0, [r0, #8]
   bbd7a:	60e0      	str	r0, [r4, #12]
    --n_;
   bbd7c:	3b01      	subs	r3, #1
    ++t_;
   bbd7e:	3010      	adds	r0, #16
   bbd80:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bbd82:	6120      	str	r0, [r4, #16]
    --n_;
   bbd84:	6163      	str	r3, [r4, #20]
    if (n_) {
   bbd86:	b113      	cbz	r3, bbd8e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bbd88:	f7ff fef2 	bl	bbb70 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bbd8c:	60a0      	str	r0, [r4, #8]
    return true;
   bbd8e:	2001      	movs	r0, #1
   bbd90:	e000      	b.n	bbd94 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bbd92:	4618      	mov	r0, r3
}
   bbd94:	bd10      	pop	{r4, pc}

000bbd96 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bbd96:	b510      	push	{r4, lr}
    write('}');
   bbd98:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bbd9a:	4604      	mov	r4, r0
    write('}');
   bbd9c:	f7ff ff49 	bl	bbc32 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bbda0:	2301      	movs	r3, #1
   bbda2:	7123      	strb	r3, [r4, #4]
}
   bbda4:	4620      	mov	r0, r4
   bbda6:	bd10      	pop	{r4, pc}

000bbda8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bbda8:	b508      	push	{r3, lr}
    switch (state_) {
   bbdaa:	7903      	ldrb	r3, [r0, #4]
   bbdac:	2b01      	cmp	r3, #1
   bbdae:	d002      	beq.n	bbdb6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bbdb0:	2b02      	cmp	r3, #2
   bbdb2:	d004      	beq.n	bbdbe <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bbdb4:	bd08      	pop	{r3, pc}
        write(',');
   bbdb6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bbdb8:	f7ff ff3b 	bl	bbc32 <_ZN5spark10JSONWriter5writeEc>
}
   bbdbc:	e7fa      	b.n	bbdb4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bbdbe:	213a      	movs	r1, #58	; 0x3a
   bbdc0:	e7fa      	b.n	bbdb8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bbdc2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bbdc2:	b510      	push	{r4, lr}
   bbdc4:	4604      	mov	r4, r0
    writeSeparator();
   bbdc6:	f7ff ffef 	bl	bbda8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bbdca:	4620      	mov	r0, r4
   bbdcc:	217b      	movs	r1, #123	; 0x7b
   bbdce:	f7ff ff30 	bl	bbc32 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bbdd2:	2300      	movs	r3, #0
   bbdd4:	7123      	strb	r3, [r4, #4]
}
   bbdd6:	4620      	mov	r0, r4
   bbdd8:	bd10      	pop	{r4, pc}
	...

000bbddc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bbddc:	b513      	push	{r0, r1, r4, lr}
   bbdde:	4604      	mov	r4, r0
   bbde0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bbde2:	f7ff ffe1 	bl	bbda8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bbde6:	6823      	ldr	r3, [r4, #0]
   bbde8:	9a01      	ldr	r2, [sp, #4]
   bbdea:	68db      	ldr	r3, [r3, #12]
   bbdec:	4903      	ldr	r1, [pc, #12]	; (bbdfc <_ZN5spark10JSONWriter5valueEi+0x20>)
   bbdee:	4620      	mov	r0, r4
   bbdf0:	4798      	blx	r3
    state_ = NEXT;
   bbdf2:	2301      	movs	r3, #1
}
   bbdf4:	4620      	mov	r0, r4
    state_ = NEXT;
   bbdf6:	7123      	strb	r3, [r4, #4]
}
   bbdf8:	b002      	add	sp, #8
   bbdfa:	bd10      	pop	{r4, pc}
   bbdfc:	000bfca3 	.word	0x000bfca3

000bbe00 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bbe00:	b513      	push	{r0, r1, r4, lr}
   bbe02:	4604      	mov	r4, r0
   bbe04:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bbe06:	f7ff ffcf 	bl	bbda8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bbe0a:	6823      	ldr	r3, [r4, #0]
   bbe0c:	9a01      	ldr	r2, [sp, #4]
   bbe0e:	68db      	ldr	r3, [r3, #12]
   bbe10:	4903      	ldr	r1, [pc, #12]	; (bbe20 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bbe12:	4620      	mov	r0, r4
   bbe14:	4798      	blx	r3
    state_ = NEXT;
   bbe16:	2301      	movs	r3, #1
}
   bbe18:	4620      	mov	r0, r4
    state_ = NEXT;
   bbe1a:	7123      	strb	r3, [r4, #4]
}
   bbe1c:	b002      	add	sp, #8
   bbe1e:	bd10      	pop	{r4, pc}
   bbe20:	000bffc6 	.word	0x000bffc6

000bbe24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bbe24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbe28:	460d      	mov	r5, r1
    write('"');
   bbe2a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bbe2c:	4690      	mov	r8, r2
   bbe2e:	4604      	mov	r4, r0
    write('"');
   bbe30:	f7ff feff 	bl	bbc32 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bbe34:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bbedc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bbe38:	44a8      	add	r8, r5
    const char *s = str;
   bbe3a:	462f      	mov	r7, r5
    while (s != end) {
   bbe3c:	4547      	cmp	r7, r8
   bbe3e:	46ba      	mov	sl, r7
   bbe40:	d03d      	beq.n	bbebe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bbe42:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bbe46:	2e22      	cmp	r6, #34	; 0x22
   bbe48:	d006      	beq.n	bbe58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bbe4a:	2e5c      	cmp	r6, #92	; 0x5c
   bbe4c:	d004      	beq.n	bbe58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bbe4e:	4630      	mov	r0, r6
   bbe50:	f002 fefc 	bl	bec4c <isprint>
   bbe54:	2800      	cmp	r0, #0
   bbe56:	d1f1      	bne.n	bbe3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bbe58:	6823      	ldr	r3, [r4, #0]
   bbe5a:	ebaa 0205 	sub.w	r2, sl, r5
   bbe5e:	689b      	ldr	r3, [r3, #8]
   bbe60:	4629      	mov	r1, r5
   bbe62:	4620      	mov	r0, r4
   bbe64:	4798      	blx	r3
            write('\\');
   bbe66:	215c      	movs	r1, #92	; 0x5c
   bbe68:	4620      	mov	r0, r4
   bbe6a:	f7ff fee2 	bl	bbc32 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bbe6e:	2e0d      	cmp	r6, #13
   bbe70:	d80a      	bhi.n	bbe88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bbe72:	2e07      	cmp	r6, #7
   bbe74:	d91c      	bls.n	bbeb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bbe76:	f1a6 0308 	sub.w	r3, r6, #8
   bbe7a:	2b05      	cmp	r3, #5
   bbe7c:	d818      	bhi.n	bbeb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bbe7e:	e8df f003 	tbb	[pc, r3]
   bbe82:	0f0d      	.short	0x0f0d
   bbe84:	15131711 	.word	0x15131711
   bbe88:	2e22      	cmp	r6, #34	; 0x22
   bbe8a:	d001      	beq.n	bbe90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bbe8c:	2e5c      	cmp	r6, #92	; 0x5c
   bbe8e:	d10f      	bne.n	bbeb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bbe90:	4631      	mov	r1, r6
                write('b');
   bbe92:	4620      	mov	r0, r4
   bbe94:	f7ff fecd 	bl	bbc32 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bbe98:	463d      	mov	r5, r7
    while (s != end) {
   bbe9a:	e7cf      	b.n	bbe3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bbe9c:	2162      	movs	r1, #98	; 0x62
   bbe9e:	e7f8      	b.n	bbe92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bbea0:	2174      	movs	r1, #116	; 0x74
   bbea2:	e7f6      	b.n	bbe92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bbea4:	216e      	movs	r1, #110	; 0x6e
   bbea6:	e7f4      	b.n	bbe92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bbea8:	2166      	movs	r1, #102	; 0x66
   bbeaa:	e7f2      	b.n	bbe92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bbeac:	2172      	movs	r1, #114	; 0x72
   bbeae:	e7f0      	b.n	bbe92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bbeb0:	6823      	ldr	r3, [r4, #0]
   bbeb2:	4632      	mov	r2, r6
   bbeb4:	68db      	ldr	r3, [r3, #12]
   bbeb6:	4649      	mov	r1, r9
   bbeb8:	4620      	mov	r0, r4
   bbeba:	4798      	blx	r3
                break;
   bbebc:	e7ec      	b.n	bbe98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bbebe:	42bd      	cmp	r5, r7
   bbec0:	d005      	beq.n	bbece <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bbec2:	6823      	ldr	r3, [r4, #0]
   bbec4:	1b7a      	subs	r2, r7, r5
   bbec6:	689b      	ldr	r3, [r3, #8]
   bbec8:	4629      	mov	r1, r5
   bbeca:	4620      	mov	r0, r4
   bbecc:	4798      	blx	r3
    }
    write('"');
   bbece:	2122      	movs	r1, #34	; 0x22
   bbed0:	4620      	mov	r0, r4
   bbed2:	f7ff feae 	bl	bbc32 <_ZN5spark10JSONWriter5writeEc>
}
   bbed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbeda:	bf00      	nop
   bbedc:	000c077c 	.word	0x000c077c

000bbee0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bbee0:	b513      	push	{r0, r1, r4, lr}
   bbee2:	4604      	mov	r4, r0
   bbee4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbee8:	f7ff ff5e 	bl	bbda8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bbeec:	4620      	mov	r0, r4
   bbeee:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbef2:	f7ff ff97 	bl	bbe24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bbef6:	2302      	movs	r3, #2
}
   bbef8:	4620      	mov	r0, r4
    state_ = VALUE;
   bbefa:	7123      	strb	r3, [r4, #4]
}
   bbefc:	b002      	add	sp, #8
   bbefe:	bd10      	pop	{r4, pc}

000bbf00 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bbf00:	b513      	push	{r0, r1, r4, lr}
   bbf02:	4604      	mov	r4, r0
   bbf04:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbf08:	f7ff ff4e 	bl	bbda8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bbf0c:	4620      	mov	r0, r4
   bbf0e:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbf12:	f7ff ff87 	bl	bbe24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bbf16:	2301      	movs	r3, #1
}
   bbf18:	4620      	mov	r0, r4
    state_ = NEXT;
   bbf1a:	7123      	strb	r3, [r4, #4]
}
   bbf1c:	b002      	add	sp, #8
   bbf1e:	bd10      	pop	{r4, pc}

000bbf20 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bbf20:	6880      	ldr	r0, [r0, #8]
   bbf22:	6803      	ldr	r3, [r0, #0]
   bbf24:	68db      	ldr	r3, [r3, #12]
   bbf26:	4718      	bx	r3

000bbf28 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bbf28:	4770      	bx	lr

000bbf2a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bbf2a:	4608      	mov	r0, r1
   bbf2c:	b111      	cbz	r1, bbf34 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bbf2e:	680b      	ldr	r3, [r1, #0]
   bbf30:	685b      	ldr	r3, [r3, #4]
   bbf32:	4718      	bx	r3
}
   bbf34:	4770      	bx	lr

000bbf36 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bbf36:	4770      	bx	lr

000bbf38 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bbf38:	4770      	bx	lr

000bbf3a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bbf3a:	4770      	bx	lr

000bbf3c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bbf3c:	4770      	bx	lr

000bbf3e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bbf3e:	b538      	push	{r3, r4, r5, lr}
   bbf40:	4604      	mov	r4, r0
   bbf42:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bbf44:	6800      	ldr	r0, [r0, #0]
   bbf46:	212e      	movs	r1, #46	; 0x2e
   bbf48:	f002 ff31 	bl	bedae <strchrnul>
    size = s - category;
   bbf4c:	6823      	ldr	r3, [r4, #0]
   bbf4e:	1ac3      	subs	r3, r0, r3
   bbf50:	602b      	str	r3, [r5, #0]
    if (size) {
   bbf52:	b123      	cbz	r3, bbf5e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bbf54:	7803      	ldrb	r3, [r0, #0]
   bbf56:	b103      	cbz	r3, bbf5a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bbf58:	3001      	adds	r0, #1
   bbf5a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf5c:	6020      	str	r0, [r4, #0]
}
   bbf5e:	4618      	mov	r0, r3
   bbf60:	bd38      	pop	{r3, r4, r5, pc}

000bbf62 <_ZN5spark16JSONStreamWriterD0Ev>:
   bbf62:	b510      	push	{r4, lr}
   bbf64:	210c      	movs	r1, #12
   bbf66:	4604      	mov	r4, r0
   bbf68:	f7f8 f899 	bl	b409e <_ZdlPvj>
   bbf6c:	4620      	mov	r0, r4
   bbf6e:	bd10      	pop	{r4, pc}

000bbf70 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bbf70:	b510      	push	{r4, lr}
   bbf72:	2104      	movs	r1, #4
   bbf74:	4604      	mov	r4, r0
   bbf76:	f7f8 f892 	bl	b409e <_ZdlPvj>
   bbf7a:	4620      	mov	r0, r4
   bbf7c:	bd10      	pop	{r4, pc}

000bbf7e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bbf7e:	b510      	push	{r4, lr}
   bbf80:	2104      	movs	r1, #4
   bbf82:	4604      	mov	r4, r0
   bbf84:	f7f8 f88b 	bl	b409e <_ZdlPvj>
   bbf88:	4620      	mov	r0, r4
   bbf8a:	bd10      	pop	{r4, pc}

000bbf8c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bbf8c:	f7fe bb72 	b.w	ba674 <os_mutex_recursive_lock>

000bbf90 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bbf90:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bbf92:	f002 ff16 	bl	bedc2 <strcmp>
}
   bbf96:	fab0 f080 	clz	r0, r0
   bbf9a:	0940      	lsrs	r0, r0, #5
   bbf9c:	bd08      	pop	{r3, pc}

000bbf9e <__tcf_1>:
   bbf9e:	4770      	bx	lr

000bbfa0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bbfa0:	b510      	push	{r4, lr}
   bbfa2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bbfa4:	f001 ff24 	bl	bddf0 <_Z16_fetch_usbserialv>
   bbfa8:	4284      	cmp	r4, r0
   bbfaa:	d010      	beq.n	bbfce <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bbfac:	f002 f91e 	bl	be1ec <_Z22__fetch_global_Serial1v>
   bbfb0:	4284      	cmp	r4, r0
   bbfb2:	d105      	bne.n	bbfc0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bbfb4:	f002 f91a 	bl	be1ec <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bbfb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bbfbc:	f001 beb1 	b.w	bdd22 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bbfc0:	b12c      	cbz	r4, bbfce <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bbfc2:	6823      	ldr	r3, [r4, #0]
   bbfc4:	4620      	mov	r0, r4
   bbfc6:	685b      	ldr	r3, [r3, #4]
}
   bbfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bbfcc:	4718      	bx	r3
   bbfce:	bd10      	pop	{r4, pc}

000bbfd0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bbfd0:	b513      	push	{r0, r1, r4, lr}
   bbfd2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bbfd4:	4608      	mov	r0, r1
   bbfd6:	9101      	str	r1, [sp, #4]
   bbfd8:	f002 ff23 	bl	bee22 <strlen>
   bbfdc:	9901      	ldr	r1, [sp, #4]
   bbfde:	4602      	mov	r2, r0
   bbfe0:	4620      	mov	r0, r4
}
   bbfe2:	b002      	add	sp, #8
   bbfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bbfe8:	f7ff bf8a 	b.w	bbf00 <_ZN5spark10JSONWriter5valueEPKcj>

000bbfec <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bbfec:	b513      	push	{r0, r1, r4, lr}
   bbfee:	4604      	mov	r4, r0
    write(str, strlen(str));
   bbff0:	4608      	mov	r0, r1
   bbff2:	9101      	str	r1, [sp, #4]
   bbff4:	f002 ff15 	bl	bee22 <strlen>
   bbff8:	6823      	ldr	r3, [r4, #0]
   bbffa:	9901      	ldr	r1, [sp, #4]
   bbffc:	68db      	ldr	r3, [r3, #12]
   bbffe:	4602      	mov	r2, r0
   bc000:	4620      	mov	r0, r4
}
   bc002:	b002      	add	sp, #8
   bc004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bc008:	4718      	bx	r3

000bc00a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bc00a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bc00c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bc00e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bc012:	68db      	ldr	r3, [r3, #12]
   bc014:	2201      	movs	r2, #1
   bc016:	f10d 0107 	add.w	r1, sp, #7
   bc01a:	4798      	blx	r3
}
   bc01c:	b003      	add	sp, #12
   bc01e:	f85d fb04 	ldr.w	pc, [sp], #4

000bc022 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bc022:	b40e      	push	{r1, r2, r3}
   bc024:	b503      	push	{r0, r1, lr}
   bc026:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bc028:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bc02a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bc02e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bc030:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bc032:	f001 f942 	bl	bd2ba <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bc036:	b002      	add	sp, #8
   bc038:	f85d eb04 	ldr.w	lr, [sp], #4
   bc03c:	b003      	add	sp, #12
   bc03e:	4770      	bx	lr

000bc040 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bc040:	680a      	ldr	r2, [r1, #0]
   bc042:	6002      	str	r2, [r0, #0]
   bc044:	684a      	ldr	r2, [r1, #4]
   bc046:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bc048:	2200      	movs	r2, #0
   bc04a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bc04e:	b510      	push	{r4, lr}
   bc050:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc052:	688c      	ldr	r4, [r1, #8]
   bc054:	6084      	str	r4, [r0, #8]
   bc056:	68cc      	ldr	r4, [r1, #12]
   bc058:	60c4      	str	r4, [r0, #12]
   bc05a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc05c:	608a      	str	r2, [r1, #8]
   bc05e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bc060:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc062:	610a      	str	r2, [r1, #16]
   bc064:	bd10      	pop	{r4, pc}
	...

000bc068 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bc06c:	e9d0 8400 	ldrd	r8, r4, [r0]
   bc070:	f04f 0a14 	mov.w	sl, #20
   bc074:	9300      	str	r3, [sp, #0]
   bc076:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bc07a:	4b18      	ldr	r3, [pc, #96]	; (bc0dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc07c:	10a4      	asrs	r4, r4, #2
   bc07e:	4617      	mov	r7, r2
   bc080:	435c      	muls	r4, r3
   bc082:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bc084:	2c00      	cmp	r4, #0
   bc086:	dd21      	ble.n	bc0cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bc088:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bc08a:	fb0a f006 	mul.w	r0, sl, r6
   bc08e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bc092:	463a      	mov	r2, r7
   bc094:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bc098:	5828      	ldr	r0, [r5, r0]
   bc09a:	9101      	str	r1, [sp, #4]
   bc09c:	455f      	cmp	r7, fp
   bc09e:	bf28      	it	cs
   bc0a0:	465a      	movcs	r2, fp
   bc0a2:	f002 fec6 	bl	bee32 <strncmp>
                if (cmp == 0) {
   bc0a6:	2800      	cmp	r0, #0
   bc0a8:	9901      	ldr	r1, [sp, #4]
   bc0aa:	f04f 0301 	mov.w	r3, #1
   bc0ae:	d10b      	bne.n	bc0c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bc0b0:	455f      	cmp	r7, fp
   bc0b2:	d103      	bne.n	bc0bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bc0b4:	9a00      	ldr	r2, [sp, #0]
   bc0b6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc0b8:	4634      	mov	r4, r6
   bc0ba:	e7e3      	b.n	bc084 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bc0bc:	d9fc      	bls.n	bc0b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bc0be:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bc0c0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bc0c4:	3e01      	subs	r6, #1
   bc0c6:	e7f7      	b.n	bc0b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bc0c8:	dbf9      	blt.n	bc0be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bc0ca:	e7f5      	b.n	bc0b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bc0cc:	eba5 0508 	sub.w	r5, r5, r8
}
   bc0d0:	4802      	ldr	r0, [pc, #8]	; (bc0dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc0d2:	10ad      	asrs	r5, r5, #2
   bc0d4:	4368      	muls	r0, r5
   bc0d6:	b003      	add	sp, #12
   bc0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc0dc:	cccccccd 	.word	0xcccccccd

000bc0e0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc0e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bc0e2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bc0e4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc0e6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bc0e8:	b303      	cbz	r3, bc12c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bc0ea:	b1f9      	cbz	r1, bc12c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bc0ec:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bc0ee:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bc0f2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bc0f4:	a903      	add	r1, sp, #12
   bc0f6:	a801      	add	r0, sp, #4
   bc0f8:	f7ff ff21 	bl	bbf3e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bc0fc:	4601      	mov	r1, r0
   bc0fe:	b1a8      	cbz	r0, bc12c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bc100:	f10d 030b 	add.w	r3, sp, #11
   bc104:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bc106:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc10a:	4620      	mov	r0, r4
   bc10c:	f7ff ffac 	bl	bc068 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bc110:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bc114:	b153      	cbz	r3, bc12c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bc116:	6823      	ldr	r3, [r4, #0]
   bc118:	2414      	movs	r4, #20
   bc11a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bc11e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bc120:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bc124:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bc126:	bfa8      	it	ge
   bc128:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bc12a:	e7e3      	b.n	bc0f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bc12c:	4628      	mov	r0, r5
   bc12e:	b004      	add	sp, #16
   bc130:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc134 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bc134:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bc136:	4c09      	ldr	r4, [pc, #36]	; (bc15c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bc138:	7823      	ldrb	r3, [r4, #0]
   bc13a:	f3bf 8f5b 	dmb	ish
   bc13e:	07db      	lsls	r3, r3, #31
   bc140:	d409      	bmi.n	bc156 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc142:	4620      	mov	r0, r4
   bc144:	f7f7 ffba 	bl	b40bc <__cxa_guard_acquire>
   bc148:	b128      	cbz	r0, bc156 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc14a:	4620      	mov	r0, r4
   bc14c:	f7f7 ffbb 	bl	b40c6 <__cxa_guard_release>
   bc150:	4803      	ldr	r0, [pc, #12]	; (bc160 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bc152:	f002 fd57 	bl	bec04 <atexit>
}
   bc156:	4803      	ldr	r0, [pc, #12]	; (bc164 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bc158:	bd10      	pop	{r4, pc}
   bc15a:	bf00      	nop
   bc15c:	2003e650 	.word	0x2003e650
   bc160:	000bbf37 	.word	0x000bbf37
   bc164:	2003de7c 	.word	0x2003de7c

000bc168 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bc168:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bc16a:	4c09      	ldr	r4, [pc, #36]	; (bc190 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bc16c:	7823      	ldrb	r3, [r4, #0]
   bc16e:	f3bf 8f5b 	dmb	ish
   bc172:	07db      	lsls	r3, r3, #31
   bc174:	d409      	bmi.n	bc18a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc176:	4620      	mov	r0, r4
   bc178:	f7f7 ffa0 	bl	b40bc <__cxa_guard_acquire>
   bc17c:	b128      	cbz	r0, bc18a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc17e:	4620      	mov	r0, r4
   bc180:	f7f7 ffa1 	bl	b40c6 <__cxa_guard_release>
   bc184:	4803      	ldr	r0, [pc, #12]	; (bc194 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bc186:	f002 fd3d 	bl	bec04 <atexit>
    return &factory;
}
   bc18a:	4803      	ldr	r0, [pc, #12]	; (bc198 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bc18c:	bd10      	pop	{r4, pc}
   bc18e:	bf00      	nop
   bc190:	2003e654 	.word	0x2003e654
   bc194:	000bbf9f 	.word	0x000bbf9f
   bc198:	2003de80 	.word	0x2003de80

000bc19c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bc19c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bc19e:	2500      	movs	r5, #0
   bc1a0:	4604      	mov	r4, r0
   bc1a2:	e9c0 5500 	strd	r5, r5, [r0]
   bc1a6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc1aa:	6085      	str	r5, [r0, #8]
   bc1ac:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bc1ae:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bc1b2:	f7fe fa4f 	bl	ba654 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bc1b6:	f7ff ffbd 	bl	bc134 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bc1ba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc1bc:	f7ff ffd4 	bl	bc168 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bc1c0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc1c2:	6220      	str	r0, [r4, #32]
}
   bc1c4:	4620      	mov	r0, r4
   bc1c6:	bd38      	pop	{r3, r4, r5, pc}

000bc1c8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bc1c8:	b510      	push	{r4, lr}
    static LogManager mgr;
   bc1ca:	4c0a      	ldr	r4, [pc, #40]	; (bc1f4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bc1cc:	7823      	ldrb	r3, [r4, #0]
   bc1ce:	f3bf 8f5b 	dmb	ish
   bc1d2:	07db      	lsls	r3, r3, #31
   bc1d4:	d40c      	bmi.n	bc1f0 <_ZN5spark10LogManager8instanceEv+0x28>
   bc1d6:	4620      	mov	r0, r4
   bc1d8:	f7f7 ff70 	bl	b40bc <__cxa_guard_acquire>
   bc1dc:	b140      	cbz	r0, bc1f0 <_ZN5spark10LogManager8instanceEv+0x28>
   bc1de:	4806      	ldr	r0, [pc, #24]	; (bc1f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc1e0:	f7ff ffdc 	bl	bc19c <_ZN5spark10LogManagerC1Ev>
   bc1e4:	4620      	mov	r0, r4
   bc1e6:	f7f7 ff6e 	bl	b40c6 <__cxa_guard_release>
   bc1ea:	4804      	ldr	r0, [pc, #16]	; (bc1fc <_ZN5spark10LogManager8instanceEv+0x34>)
   bc1ec:	f002 fd0a 	bl	bec04 <atexit>
    return &mgr;
}
   bc1f0:	4801      	ldr	r0, [pc, #4]	; (bc1f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc1f2:	bd10      	pop	{r4, pc}
   bc1f4:	2003e64c 	.word	0x2003e64c
   bc1f8:	2003e65c 	.word	0x2003e65c
   bc1fc:	000bc6b5 	.word	0x000bc6b5

000bc200 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bc200:	4a02      	ldr	r2, [pc, #8]	; (bc20c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bc202:	4903      	ldr	r1, [pc, #12]	; (bc210 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bc204:	4803      	ldr	r0, [pc, #12]	; (bc214 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bc206:	2300      	movs	r3, #0
   bc208:	f7fe bcbc 	b.w	bab84 <log_set_callbacks>
   bc20c:	000bc499 	.word	0x000bc499
   bc210:	000bc425 	.word	0x000bc425
   bc214:	000bc3a5 	.word	0x000bc3a5

000bc218 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bc218:	2300      	movs	r3, #0
   bc21a:	461a      	mov	r2, r3
   bc21c:	4619      	mov	r1, r3
   bc21e:	4618      	mov	r0, r3
   bc220:	f7fe bcb0 	b.w	bab84 <log_set_callbacks>

000bc224 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bc224:	b570      	push	{r4, r5, r6, lr}
   bc226:	b08a      	sub	sp, #40	; 0x28
   bc228:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bc22a:	4601      	mov	r1, r0
   bc22c:	a804      	add	r0, sp, #16
   bc22e:	f7fb fc2a 	bl	b7a86 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bc232:	4e14      	ldr	r6, [pc, #80]	; (bc284 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bc234:	a804      	add	r0, sp, #16
   bc236:	f7ff fd9b 	bl	bbd70 <_ZN5spark18JSONObjectIterator4nextEv>
   bc23a:	b1e8      	cbz	r0, bc278 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bc23c:	a904      	add	r1, sp, #16
   bc23e:	4668      	mov	r0, sp
   bc240:	f7fb fc32 	bl	b7aa8 <_ZNK5spark18JSONObjectIterator4nameEv>
   bc244:	9802      	ldr	r0, [sp, #8]
   bc246:	4631      	mov	r1, r6
   bc248:	f7ff fea2 	bl	bbf90 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bc24c:	4604      	mov	r4, r0
   bc24e:	b110      	cbz	r0, bc256 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bc250:	1e2c      	subs	r4, r5, #0
   bc252:	bf18      	it	ne
   bc254:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bc256:	a801      	add	r0, sp, #4
   bc258:	f7f9 fca2 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc25c:	2c00      	cmp	r4, #0
   bc25e:	d0e9      	beq.n	bc234 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bc260:	a904      	add	r1, sp, #16
   bc262:	4668      	mov	r0, sp
   bc264:	f7fb fc31 	bl	b7aca <_ZNK5spark18JSONObjectIterator5valueEv>
   bc268:	4668      	mov	r0, sp
   bc26a:	f7ff fd24 	bl	bbcb6 <_ZNK5spark9JSONValue5toIntEv>
   bc26e:	6028      	str	r0, [r5, #0]
   bc270:	a801      	add	r0, sp, #4
   bc272:	f7f9 fc95 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc276:	e7dd      	b.n	bc234 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bc278:	a805      	add	r0, sp, #20
   bc27a:	f7f9 fc91 	bl	b5ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc27e:	b00a      	add	sp, #40	; 0x28
   bc280:	bd70      	pop	{r4, r5, r6, pc}
   bc282:	bf00      	nop
   bc284:	000c0782 	.word	0x000c0782

000bc288 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc288:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc28a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bc28c:	4620      	mov	r0, r4
   bc28e:	4913      	ldr	r1, [pc, #76]	; (bc2dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc290:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bc292:	f002 fd96 	bl	bedc2 <strcmp>
   bc296:	b950      	cbnz	r0, bc2ae <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bc298:	f001 fdaa 	bl	bddf0 <_Z16_fetch_usbserialv>
   bc29c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bc2a0:	f001 fd94 	bl	bddcc <_ZN9USBSerial5beginEl>
}
   bc2a4:	b003      	add	sp, #12
   bc2a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bc2aa:	f001 bda1 	b.w	bddf0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bc2ae:	490c      	ldr	r1, [pc, #48]	; (bc2e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bc2b0:	4620      	mov	r0, r4
   bc2b2:	f002 fd86 	bl	bedc2 <strcmp>
   bc2b6:	b978      	cbnz	r0, bc2d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bc2b8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bc2bc:	a901      	add	r1, sp, #4
   bc2be:	4628      	mov	r0, r5
        int baud = 9600;
   bc2c0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bc2c2:	f7ff ffaf 	bl	bc224 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bc2c6:	f001 ff91 	bl	be1ec <_Z22__fetch_global_Serial1v>
   bc2ca:	9901      	ldr	r1, [sp, #4]
   bc2cc:	f001 fd26 	bl	bdd1c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bc2d0:	f001 ff8c 	bl	be1ec <_Z22__fetch_global_Serial1v>
}
   bc2d4:	b003      	add	sp, #12
   bc2d6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bc2d8:	2000      	movs	r0, #0
   bc2da:	e7fb      	b.n	bc2d4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bc2dc:	000c0787 	.word	0x000c0787
   bc2e0:	000c078e 	.word	0x000c078e

000bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc2e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc2e6:	e9d0 5300 	ldrd	r5, r3, [r0]
   bc2ea:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc2ec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc2ee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc2f2:	42ae      	cmp	r6, r5
   bc2f4:	d005      	beq.n	bc302 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bc2f6:	f105 0008 	add.w	r0, r5, #8
   bc2fa:	f7ff fff3 	bl	bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc2fe:	3514      	adds	r5, #20
   bc300:	e7f7      	b.n	bc2f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bc302:	6820      	ldr	r0, [r4, #0]
   bc304:	f7fe fd8a 	bl	bae1c <free>
}
   bc308:	4620      	mov	r0, r4
   bc30a:	bd70      	pop	{r4, r5, r6, pc}

000bc30c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bc30c:	b510      	push	{r4, lr}
   bc30e:	4604      	mov	r4, r0
   bc310:	300c      	adds	r0, #12
   bc312:	f7ff ffe7 	bl	bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc316:	4620      	mov	r0, r4
   bc318:	f7fe fe23 	bl	baf62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bc31c:	4620      	mov	r0, r4
   bc31e:	bd10      	pop	{r4, pc}

000bc320 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bc320:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bc322:	4b04      	ldr	r3, [pc, #16]	; (bc334 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bc324:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bc326:	f840 3b04 	str.w	r3, [r0], #4
   bc32a:	f7ff ffef 	bl	bc30c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bc32e:	4620      	mov	r0, r4
   bc330:	bd10      	pop	{r4, pc}
   bc332:	bf00      	nop
   bc334:	000bfb44 	.word	0x000bfb44

000bc338 <_ZN5spark16StreamLogHandlerD0Ev>:
   bc338:	b510      	push	{r4, lr}
   bc33a:	4604      	mov	r4, r0
   bc33c:	f7ff fff0 	bl	bc320 <_ZN5spark16StreamLogHandlerD1Ev>
   bc340:	4620      	mov	r0, r4
   bc342:	2124      	movs	r1, #36	; 0x24
   bc344:	f7f7 feab 	bl	b409e <_ZdlPvj>
   bc348:	4620      	mov	r0, r4
   bc34a:	bd10      	pop	{r4, pc}

000bc34c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bc34c:	b510      	push	{r4, lr}
   bc34e:	4b03      	ldr	r3, [pc, #12]	; (bc35c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bc350:	6003      	str	r3, [r0, #0]
   bc352:	4604      	mov	r4, r0
   bc354:	f7ff ffe4 	bl	bc320 <_ZN5spark16StreamLogHandlerD1Ev>
   bc358:	4620      	mov	r0, r4
   bc35a:	bd10      	pop	{r4, pc}
   bc35c:	000c0824 	.word	0x000c0824

000bc360 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bc360:	b510      	push	{r4, lr}
   bc362:	4604      	mov	r4, r0
   bc364:	f7ff fff2 	bl	bc34c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bc368:	4620      	mov	r0, r4
   bc36a:	2124      	movs	r1, #36	; 0x24
   bc36c:	f7f7 fe97 	bl	b409e <_ZdlPvj>
   bc370:	4620      	mov	r0, r4
   bc372:	bd10      	pop	{r4, pc}

000bc374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bc374:	2200      	movs	r2, #0
   bc376:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bc37a:	b510      	push	{r4, lr}
        capacity_(0) {
   bc37c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bc37e:	680c      	ldr	r4, [r1, #0]
   bc380:	6004      	str	r4, [r0, #0]
   bc382:	684c      	ldr	r4, [r1, #4]
   bc384:	6044      	str	r4, [r0, #4]
   bc386:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc388:	600a      	str	r2, [r1, #0]
   bc38a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc38c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc38e:	608a      	str	r2, [r1, #8]
}
   bc390:	bd10      	pop	{r4, pc}

000bc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bc392:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bc394:	6803      	ldr	r3, [r0, #0]
   bc396:	4604      	mov	r4, r0
   bc398:	6818      	ldr	r0, [r3, #0]
   bc39a:	f7fe f973 	bl	ba684 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bc39e:	4620      	mov	r0, r4
   bc3a0:	bd10      	pop	{r4, pc}
	...

000bc3a4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bc3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc3a8:	b087      	sub	sp, #28
   bc3aa:	4680      	mov	r8, r0
   bc3ac:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bc3ae:	4b1c      	ldr	r3, [pc, #112]	; (bc420 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bc3b0:	685b      	ldr	r3, [r3, #4]
   bc3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc3b6:	4689      	mov	r9, r1
   bc3b8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bc3ba:	b96b      	cbnz	r3, bc3d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bc3bc:	f7ff ff04 	bl	bc1c8 <_ZN5spark10LogManager8instanceEv>
   bc3c0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bc3c2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bc3c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc3c8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bc3ca:	f7ff fddf 	bl	bbf8c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bc3ce:	7b23      	ldrb	r3, [r4, #12]
   bc3d0:	b12b      	cbz	r3, bc3de <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bc3d2:	a805      	add	r0, sp, #20
   bc3d4:	f7ff ffdd 	bl	bc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bc3d8:	b007      	add	sp, #28
   bc3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bc3de:	2301      	movs	r3, #1
   bc3e0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bc3e2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bc3e6:	fa5f f989 	uxtb.w	r9, r9
   bc3ea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc3ee:	45aa      	cmp	sl, r5
   bc3f0:	d012      	beq.n	bc418 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bc3f2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bc3f6:	4631      	mov	r1, r6
   bc3f8:	1d38      	adds	r0, r7, #4
   bc3fa:	f7ff fe71 	bl	bc0e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bc3fe:	4581      	cmp	r9, r0
   bc400:	d3f5      	bcc.n	bc3ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bc402:	683b      	ldr	r3, [r7, #0]
   bc404:	9a03      	ldr	r2, [sp, #12]
   bc406:	9200      	str	r2, [sp, #0]
   bc408:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bc40c:	464a      	mov	r2, r9
   bc40e:	4633      	mov	r3, r6
   bc410:	4641      	mov	r1, r8
   bc412:	4638      	mov	r0, r7
   bc414:	47d8      	blx	fp
   bc416:	e7ea      	b.n	bc3ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bc418:	2300      	movs	r3, #0
   bc41a:	7323      	strb	r3, [r4, #12]
   bc41c:	e7d9      	b.n	bc3d2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bc41e:	bf00      	nop
   bc420:	e000ed00 	.word	0xe000ed00

000bc424 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bc424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc428:	469b      	mov	fp, r3
   bc42a:	4b1a      	ldr	r3, [pc, #104]	; (bc494 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bc42c:	685b      	ldr	r3, [r3, #4]
   bc42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc432:	4680      	mov	r8, r0
   bc434:	4689      	mov	r9, r1
   bc436:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bc438:	b96b      	cbnz	r3, bc456 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bc43a:	f7ff fec5 	bl	bc1c8 <_ZN5spark10LogManager8instanceEv>
   bc43e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bc440:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bc444:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc446:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc448:	f7ff fda0 	bl	bbf8c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bc44c:	7b23      	ldrb	r3, [r4, #12]
   bc44e:	b12b      	cbz	r3, bc45c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bc450:	a801      	add	r0, sp, #4
   bc452:	f7ff ff9e 	bl	bc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bc456:	b003      	add	sp, #12
   bc458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bc45c:	2301      	movs	r3, #1
   bc45e:	7323      	strb	r3, [r4, #12]
   bc460:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bc464:	b2f6      	uxtb	r6, r6
   bc466:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc46a:	4555      	cmp	r5, sl
   bc46c:	d00e      	beq.n	bc48c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bc46e:	f855 7b04 	ldr.w	r7, [r5], #4
   bc472:	4659      	mov	r1, fp
   bc474:	1d38      	adds	r0, r7, #4
   bc476:	f7ff fe33 	bl	bc0e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bc47a:	4286      	cmp	r6, r0
   bc47c:	d3f5      	bcc.n	bc46a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bc47e:	683b      	ldr	r3, [r7, #0]
   bc480:	464a      	mov	r2, r9
   bc482:	68db      	ldr	r3, [r3, #12]
   bc484:	4641      	mov	r1, r8
   bc486:	4638      	mov	r0, r7
   bc488:	4798      	blx	r3
   bc48a:	e7ee      	b.n	bc46a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bc48c:	2300      	movs	r3, #0
   bc48e:	7323      	strb	r3, [r4, #12]
   bc490:	e7de      	b.n	bc450 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bc492:	bf00      	nop
   bc494:	e000ed00 	.word	0xe000ed00

000bc498 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bc498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc49c:	4b16      	ldr	r3, [pc, #88]	; (bc4f8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bc49e:	685b      	ldr	r3, [r3, #4]
   bc4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc4a4:	4605      	mov	r5, r0
   bc4a6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bc4a8:	bb1b      	cbnz	r3, bc4f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bc4aa:	f7ff fe8d 	bl	bc1c8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bc4ae:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bc4b2:	4604      	mov	r4, r0
   bc4b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc4b6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc4b8:	f7ff fd68 	bl	bbf8c <_ZN14RecursiveMutex4lockEv.isra.0>
   bc4bc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bc4c0:	2446      	movs	r4, #70	; 0x46
   bc4c2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc4c6:	45b0      	cmp	r8, r6
   bc4c8:	d109      	bne.n	bc4de <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bc4ca:	a801      	add	r0, sp, #4
   bc4cc:	f7ff ff61 	bl	bc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bc4d0:	42a5      	cmp	r5, r4
   bc4d2:	bfb4      	ite	lt
   bc4d4:	2000      	movlt	r0, #0
   bc4d6:	2001      	movge	r0, #1
}
   bc4d8:	b002      	add	sp, #8
   bc4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bc4de:	f856 0b04 	ldr.w	r0, [r6], #4
   bc4e2:	4639      	mov	r1, r7
   bc4e4:	3004      	adds	r0, #4
   bc4e6:	f7ff fdfb 	bl	bc0e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bc4ea:	4284      	cmp	r4, r0
   bc4ec:	bfa8      	it	ge
   bc4ee:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bc4f0:	e7e9      	b.n	bc4c6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bc4f2:	2000      	movs	r0, #0
   bc4f4:	e7f0      	b.n	bc4d8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bc4f6:	bf00      	nop
   bc4f8:	e000ed00 	.word	0xe000ed00

000bc4fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc4fe:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bc502:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc504:	4604      	mov	r4, r0
   bc506:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc508:	db0d      	blt.n	bc526 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bc50a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bc50c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bc50e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bc510:	dd04      	ble.n	bc51c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bc512:	00b9      	lsls	r1, r7, #2
   bc514:	f7fe fc8a 	bl	bae2c <realloc>
            if (!d) {
   bc518:	b918      	cbnz	r0, bc522 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bc51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bc51c:	f7fe fc7e 	bl	bae1c <free>
        T* d = nullptr;
   bc520:	2000      	movs	r0, #0
        data_ = d;
   bc522:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bc524:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bc526:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc528:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bc52a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bc52e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bc530:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bc534:	1d08      	adds	r0, r1, #4
   bc536:	f002 fb9f 	bl	bec78 <memmove>
    new(p) T(std::move(value));
   bc53a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bc53e:	6863      	ldr	r3, [r4, #4]
   bc540:	3301      	adds	r3, #1
   bc542:	6063      	str	r3, [r4, #4]
    return true;
   bc544:	2001      	movs	r0, #1
   bc546:	e7e8      	b.n	bc51a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bc548 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bc548:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bc54a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bc54e:	4604      	mov	r4, r0
   bc550:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc552:	9301      	str	r3, [sp, #4]
   bc554:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bc556:	f7ff fd19 	bl	bbf8c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bc55a:	e9d4 3200 	ldrd	r3, r2, [r4]
   bc55e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bc562:	4293      	cmp	r3, r2
   bc564:	4619      	mov	r1, r3
   bc566:	d00b      	beq.n	bc580 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bc568:	6809      	ldr	r1, [r1, #0]
   bc56a:	42a9      	cmp	r1, r5
   bc56c:	f103 0304 	add.w	r3, r3, #4
   bc570:	d1f7      	bne.n	bc562 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bc572:	a801      	add	r0, sp, #4
   bc574:	f7ff ff0d 	bl	bc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bc578:	2500      	movs	r5, #0
}
   bc57a:	4628      	mov	r0, r5
   bc57c:	b003      	add	sp, #12
   bc57e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bc580:	4629      	mov	r1, r5
   bc582:	4620      	mov	r0, r4
   bc584:	f7ff ffba 	bl	bc4fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bc588:	4605      	mov	r5, r0
   bc58a:	2800      	cmp	r0, #0
   bc58c:	d0f1      	beq.n	bc572 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bc58e:	6863      	ldr	r3, [r4, #4]
   bc590:	2b01      	cmp	r3, #1
   bc592:	d101      	bne.n	bc598 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bc594:	f7ff fe34 	bl	bc200 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc598:	a801      	add	r0, sp, #4
   bc59a:	f7ff fefa 	bl	bc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bc59e:	e7ec      	b.n	bc57a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bc5a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bc5a0:	b570      	push	{r4, r5, r6, lr}
   bc5a2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bc5a4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bc5a8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bc5aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bc5ae:	4282      	cmp	r2, r0
   bc5b0:	d00f      	beq.n	bc5d2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bc5b2:	4601      	mov	r1, r0
            if (*p == value) {
   bc5b4:	681d      	ldr	r5, [r3, #0]
   bc5b6:	f851 6b04 	ldr.w	r6, [r1], #4
   bc5ba:	42ae      	cmp	r6, r5
   bc5bc:	d107      	bne.n	bc5ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bc5be:	1a52      	subs	r2, r2, r1
   bc5c0:	f002 fb5a 	bl	bec78 <memmove>
    --size_;
   bc5c4:	6863      	ldr	r3, [r4, #4]
   bc5c6:	3b01      	subs	r3, #1
   bc5c8:	6063      	str	r3, [r4, #4]
    return true;
   bc5ca:	2001      	movs	r0, #1
}
   bc5cc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bc5ce:	4608      	mov	r0, r1
   bc5d0:	e7ed      	b.n	bc5ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bc5d2:	2000      	movs	r0, #0
   bc5d4:	e7fa      	b.n	bc5cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bc5d6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bc5d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bc5d8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bc5dc:	4604      	mov	r4, r0
   bc5de:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bc5e0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc5e2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bc5e4:	f7ff fcd2 	bl	bbf8c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bc5e8:	a901      	add	r1, sp, #4
   bc5ea:	4620      	mov	r0, r4
   bc5ec:	f7ff ffd8 	bl	bc5a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bc5f0:	b118      	cbz	r0, bc5fa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bc5f2:	6863      	ldr	r3, [r4, #4]
   bc5f4:	b90b      	cbnz	r3, bc5fa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bc5f6:	f7ff fe0f 	bl	bc218 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc5fa:	a803      	add	r0, sp, #12
   bc5fc:	f7ff fec9 	bl	bc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bc600:	b004      	add	sp, #16
   bc602:	bd10      	pop	{r4, pc}

000bc604 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bc604:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bc606:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bc60a:	2318      	movs	r3, #24
   bc60c:	4604      	mov	r4, r0
   bc60e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bc612:	42ae      	cmp	r6, r5
   bc614:	d015      	beq.n	bc642 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bc616:	f105 0110 	add.w	r1, r5, #16
   bc61a:	4620      	mov	r0, r4
   bc61c:	f7ff ffc0 	bl	bc5a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bc620:	6863      	ldr	r3, [r4, #4]
   bc622:	b90b      	cbnz	r3, bc628 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bc624:	f7ff fdf8 	bl	bc218 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bc628:	69e0      	ldr	r0, [r4, #28]
   bc62a:	6929      	ldr	r1, [r5, #16]
   bc62c:	6803      	ldr	r3, [r0, #0]
   bc62e:	68db      	ldr	r3, [r3, #12]
   bc630:	4798      	blx	r3
        if (h.stream) {
   bc632:	6969      	ldr	r1, [r5, #20]
   bc634:	b119      	cbz	r1, bc63e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bc636:	6a20      	ldr	r0, [r4, #32]
   bc638:	6803      	ldr	r3, [r0, #0]
   bc63a:	68db      	ldr	r3, [r3, #12]
   bc63c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bc63e:	3518      	adds	r5, #24
   bc640:	e7e7      	b.n	bc612 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bc642:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bc646:	2618      	movs	r6, #24
   bc648:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc64c:	42ae      	cmp	r6, r5
   bc64e:	d004      	beq.n	bc65a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bc650:	4628      	mov	r0, r5
   bc652:	f000 ff47 	bl	bd4e4 <_ZN6StringD1Ev>
   bc656:	3518      	adds	r5, #24
   bc658:	e7f8      	b.n	bc64c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bc65a:	2300      	movs	r3, #0
   bc65c:	6163      	str	r3, [r4, #20]
}
   bc65e:	bd70      	pop	{r4, r5, r6, pc}

000bc660 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bc660:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc662:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bc664:	f7ff fdd8 	bl	bc218 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc668:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bc66c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc66e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc670:	f7ff fc8c 	bl	bbf8c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bc674:	4620      	mov	r0, r4
   bc676:	f7ff ffc5 	bl	bc604 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bc67a:	a801      	add	r0, sp, #4
   bc67c:	f7ff fe89 	bl	bc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bc680:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bc682:	b108      	cbz	r0, bc688 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bc684:	f7fd ffee 	bl	ba664 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bc688:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bc68c:	2618      	movs	r6, #24
   bc68e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc692:	42ae      	cmp	r6, r5
   bc694:	d004      	beq.n	bc6a0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bc696:	4628      	mov	r0, r5
   bc698:	f000 ff24 	bl	bd4e4 <_ZN6StringD1Ev>
   bc69c:	3518      	adds	r5, #24
   bc69e:	e7f8      	b.n	bc692 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bc6a0:	6920      	ldr	r0, [r4, #16]
   bc6a2:	f7fe fbbb 	bl	bae1c <free>
   bc6a6:	6820      	ldr	r0, [r4, #0]
   bc6a8:	f7fe fbb8 	bl	bae1c <free>
}
   bc6ac:	4620      	mov	r0, r4
   bc6ae:	b002      	add	sp, #8
   bc6b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc6b4 <__tcf_2>:
    static LogManager mgr;
   bc6b4:	4801      	ldr	r0, [pc, #4]	; (bc6bc <__tcf_2+0x8>)
   bc6b6:	f7ff bfd3 	b.w	bc660 <_ZN5spark10LogManagerD1Ev>
   bc6ba:	bf00      	nop
   bc6bc:	2003e65c 	.word	0x2003e65c

000bc6c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bc6c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc6c4:	4604      	mov	r4, r0
   bc6c6:	460d      	mov	r5, r1
   bc6c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc6ca:	d915      	bls.n	bc6f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bc6cc:	4290      	cmp	r0, r2
   bc6ce:	d214      	bcs.n	bc6fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bc6d0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bc6d4:	1a75      	subs	r5, r6, r1
   bc6d6:	f1a1 0714 	sub.w	r7, r1, #20
   bc6da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc6dc:	42b7      	cmp	r7, r6
   bc6de:	d01a      	beq.n	bc716 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bc6e0:	b11c      	cbz	r4, bc6ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bc6e2:	4631      	mov	r1, r6
   bc6e4:	4620      	mov	r0, r4
   bc6e6:	f7ff fcab 	bl	bc040 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bc6ea:	f106 0008 	add.w	r0, r6, #8
   bc6ee:	f7ff fdf9 	bl	bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bc6f2:	3e14      	subs	r6, #20
   bc6f4:	3c14      	subs	r4, #20
   bc6f6:	e7f1      	b.n	bc6dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bc6f8:	d00d      	beq.n	bc716 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bc6fa:	42b5      	cmp	r5, r6
   bc6fc:	d00b      	beq.n	bc716 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bc6fe:	b11c      	cbz	r4, bc708 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bc700:	4629      	mov	r1, r5
   bc702:	4620      	mov	r0, r4
   bc704:	f7ff fc9c 	bl	bc040 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bc708:	f105 0008 	add.w	r0, r5, #8
   bc70c:	f7ff fdea 	bl	bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bc710:	3514      	adds	r5, #20
   bc712:	3414      	adds	r4, #20
   bc714:	e7f1      	b.n	bc6fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bc716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc718 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bc718:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc71c:	4604      	mov	r4, r0
   bc71e:	460d      	mov	r5, r1
   bc720:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc722:	d914      	bls.n	bc74e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bc724:	4290      	cmp	r0, r2
   bc726:	d213      	bcs.n	bc750 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bc728:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bc72c:	1a75      	subs	r5, r6, r1
   bc72e:	f1a1 0710 	sub.w	r7, r1, #16
   bc732:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc734:	42b7      	cmp	r7, r6
   bc736:	d018      	beq.n	bc76a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bc738:	b11c      	cbz	r4, bc742 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bc73a:	4631      	mov	r1, r6
   bc73c:	4620      	mov	r0, r4
   bc73e:	f000 ff4d 	bl	bd5dc <_ZN6StringC1EOS_>
                end->~T();
   bc742:	4630      	mov	r0, r6
   bc744:	f000 fece 	bl	bd4e4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bc748:	3e10      	subs	r6, #16
   bc74a:	3c10      	subs	r4, #16
   bc74c:	e7f2      	b.n	bc734 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bc74e:	d00c      	beq.n	bc76a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bc750:	42b5      	cmp	r5, r6
   bc752:	d00a      	beq.n	bc76a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bc754:	b11c      	cbz	r4, bc75e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bc756:	4629      	mov	r1, r5
   bc758:	4620      	mov	r0, r4
   bc75a:	f000 ff3f 	bl	bd5dc <_ZN6StringC1EOS_>
                p->~T();
   bc75e:	4628      	mov	r0, r5
   bc760:	f000 fec0 	bl	bd4e4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bc764:	3510      	adds	r5, #16
   bc766:	3410      	adds	r4, #16
   bc768:	e7f2      	b.n	bc750 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bc76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc76c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bc76c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bc76e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc770:	4605      	mov	r5, r0
        if (n > 0) {
   bc772:	dd11      	ble.n	bc798 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bc774:	0130      	lsls	r0, r6, #4
   bc776:	f7fe fb49 	bl	bae0c <malloc>
            if (!d) {
   bc77a:	4604      	mov	r4, r0
   bc77c:	b158      	cbz	r0, bc796 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bc77e:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc782:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bc786:	f7ff ffc7 	bl	bc718 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bc78a:	6828      	ldr	r0, [r5, #0]
   bc78c:	f7fe fb46 	bl	bae1c <free>
        data_ = d;
   bc790:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc792:	60ae      	str	r6, [r5, #8]
        return true;
   bc794:	2001      	movs	r0, #1
    }
   bc796:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bc798:	2400      	movs	r4, #0
   bc79a:	e7f6      	b.n	bc78a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bc79c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bc79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc7a0:	4690      	mov	r8, r2
   bc7a2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bc7a4:	2300      	movs	r3, #0
   bc7a6:	9103      	str	r1, [sp, #12]
    return size_;
   bc7a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bc7ac:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bc7ae:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bc7b0:	4299      	cmp	r1, r3
        capacity_(0) {
   bc7b2:	e9c0 3300 	strd	r3, r3, [r0]
   bc7b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bc7ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bc7be:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bc7c2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bc7c4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bc7c6:	dc23      	bgt.n	bc810 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bc7c8:	e9d8 5700 	ldrd	r5, r7, [r8]
   bc7cc:	2314      	movs	r3, #20
   bc7ce:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bc7d2:	42af      	cmp	r7, r5
   bc7d4:	d03b      	beq.n	bc84e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bc7d6:	4629      	mov	r1, r5
   bc7d8:	a80b      	add	r0, sp, #44	; 0x2c
   bc7da:	f000 feff 	bl	bd5dc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bc7de:	a90b      	add	r1, sp, #44	; 0x2c
   bc7e0:	a80f      	add	r0, sp, #60	; 0x3c
   bc7e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bc7e4:	f000 fefa 	bl	bd5dc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc7e8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bc7ec:	4299      	cmp	r1, r3
   bc7ee:	da1b      	bge.n	bc828 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bc7f0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bc7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bc7f4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bc7f8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bc7fc:	4631      	mov	r1, r6
   bc7fe:	f106 0010 	add.w	r0, r6, #16
   bc802:	f7ff ff89 	bl	bc718 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bc806:	b9ee      	cbnz	r6, bc844 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bc808:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc80a:	3301      	adds	r3, #1
   bc80c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bc80e:	e011      	b.n	bc834 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bc810:	a808      	add	r0, sp, #32
   bc812:	f7ff ffab 	bl	bc76c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bc816:	2800      	cmp	r0, #0
   bc818:	d1d6      	bne.n	bc7c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bc81a:	a808      	add	r0, sp, #32
   bc81c:	f7fe fba1 	bl	baf62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bc820:	4620      	mov	r0, r4
   bc822:	b015      	add	sp, #84	; 0x54
   bc824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc828:	3101      	adds	r1, #1
   bc82a:	a808      	add	r0, sp, #32
   bc82c:	f7ff ff9e 	bl	bc76c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bc830:	2800      	cmp	r0, #0
   bc832:	d1dd      	bne.n	bc7f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bc834:	a80f      	add	r0, sp, #60	; 0x3c
   bc836:	f000 fe55 	bl	bd4e4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bc83a:	a80b      	add	r0, sp, #44	; 0x2c
   bc83c:	f000 fe52 	bl	bd4e4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bc840:	3514      	adds	r5, #20
   bc842:	e7c6      	b.n	bc7d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bc844:	a90f      	add	r1, sp, #60	; 0x3c
   bc846:	4630      	mov	r0, r6
   bc848:	f000 fec8 	bl	bd5dc <_ZN6StringC1EOS_>
   bc84c:	e7dc      	b.n	bc808 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bc84e:	2600      	movs	r6, #0
   bc850:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bc854:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bc856:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bc85a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bc85e:	429e      	cmp	r6, r3
   bc860:	da7c      	bge.n	bc95c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bc862:	0133      	lsls	r3, r6, #4
   bc864:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bc866:	9306      	str	r3, [sp, #24]
        if (!category) {
   bc868:	b90b      	cbnz	r3, bc86e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bc86a:	3601      	adds	r6, #1
   bc86c:	e7f5      	b.n	bc85a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bc86e:	2300      	movs	r3, #0
   bc870:	9307      	str	r3, [sp, #28]
   bc872:	fb09 f306 	mul.w	r3, r9, r6
   bc876:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bc878:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bc87a:	a907      	add	r1, sp, #28
   bc87c:	a806      	add	r0, sp, #24
   bc87e:	f7ff fb5e 	bl	bbf3e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bc882:	4682      	mov	sl, r0
   bc884:	2800      	cmp	r0, #0
   bc886:	d0f0      	beq.n	bc86a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bc888:	f04f 0300 	mov.w	r3, #0
   bc88c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc890:	4601      	mov	r1, r0
   bc892:	9a07      	ldr	r2, [sp, #28]
   bc894:	f10d 0317 	add.w	r3, sp, #23
   bc898:	4628      	mov	r0, r5
   bc89a:	f7ff fbe5 	bl	bc068 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc89e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc8a2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc8a4:	2f00      	cmp	r7, #0
   bc8a6:	d14a      	bne.n	bc93e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bc8a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bc8ac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bc8b0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bc8b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bc8b8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bc8bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bc8c0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc8c2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bc8c6:	4293      	cmp	r3, r2
   bc8c8:	db17      	blt.n	bc8fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bc8ca:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bc8ce:	f1ba 0f00 	cmp.w	sl, #0
   bc8d2:	dd30      	ble.n	bc936 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bc8d4:	fb09 f00a 	mul.w	r0, r9, sl
   bc8d8:	f7fe fa98 	bl	bae0c <malloc>
            if (!d) {
   bc8dc:	4683      	mov	fp, r0
   bc8de:	b360      	cbz	r0, bc93a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bc8e0:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc8e4:	fb09 1202 	mla	r2, r9, r2, r1
   bc8e8:	f7ff feea 	bl	bc6c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bc8ec:	6828      	ldr	r0, [r5, #0]
   bc8ee:	f7fe fa95 	bl	bae1c <free>
        data_ = d;
   bc8f2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bc8f6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bc8fa:	682b      	ldr	r3, [r5, #0]
   bc8fc:	9a01      	ldr	r2, [sp, #4]
   bc8fe:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bc902:	686a      	ldr	r2, [r5, #4]
   bc904:	4651      	mov	r1, sl
   bc906:	fb09 3202 	mla	r2, r9, r2, r3
   bc90a:	f10a 0014 	add.w	r0, sl, #20
   bc90e:	f7ff fed7 	bl	bc6c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bc912:	f1ba 0f00 	cmp.w	sl, #0
   bc916:	d003      	beq.n	bc920 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bc918:	a90f      	add	r1, sp, #60	; 0x3c
   bc91a:	4650      	mov	r0, sl
   bc91c:	f7ff fb90 	bl	bc040 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bc920:	686b      	ldr	r3, [r5, #4]
   bc922:	3301      	adds	r3, #1
   bc924:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bc926:	a811      	add	r0, sp, #68	; 0x44
   bc928:	f7ff fcdc 	bl	bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc92c:	b13f      	cbz	r7, bc93e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bc92e:	a80b      	add	r0, sp, #44	; 0x2c
   bc930:	f7ff fcd8 	bl	bc2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc934:	e771      	b.n	bc81a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bc936:	46bb      	mov	fp, r7
   bc938:	e7d8      	b.n	bc8ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc93a:	2701      	movs	r7, #1
   bc93c:	e7f3      	b.n	bc926 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bc93e:	9b01      	ldr	r3, [sp, #4]
   bc940:	682d      	ldr	r5, [r5, #0]
   bc942:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bc946:	9b06      	ldr	r3, [sp, #24]
   bc948:	781b      	ldrb	r3, [r3, #0]
   bc94a:	b92b      	cbnz	r3, bc958 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bc94c:	f8d8 3000 	ldr.w	r3, [r8]
   bc950:	9a02      	ldr	r2, [sp, #8]
   bc952:	4413      	add	r3, r2
   bc954:	7c1b      	ldrb	r3, [r3, #16]
   bc956:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bc958:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bc95a:	e78e      	b.n	bc87a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc95c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bc95e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc960:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc962:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc964:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc966:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bc968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bc96a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc96c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bc96e:	60a2      	str	r2, [r4, #8]
   bc970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bc972:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc974:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc976:	60e2      	str	r2, [r4, #12]
   bc978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bc97a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc97c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc97e:	6122      	str	r2, [r4, #16]
   bc980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bc982:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bc984:	9b03      	ldr	r3, [sp, #12]
   bc986:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bc988:	6162      	str	r2, [r4, #20]
   bc98a:	7623      	strb	r3, [r4, #24]
   bc98c:	e7cf      	b.n	bc92e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bc990 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bc990:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc992:	4604      	mov	r4, r0
   bc994:	b087      	sub	sp, #28
   bc996:	460d      	mov	r5, r1
        filter_(level, filters) {
   bc998:	4626      	mov	r6, r4
        stream_(&stream) {
   bc99a:	4619      	mov	r1, r3
   bc99c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bc99e:	4617      	mov	r7, r2
        stream_(&stream) {
   bc9a0:	f7f9 fa55 	bl	b5e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bc9a4:	4b0b      	ldr	r3, [pc, #44]	; (bc9d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bc9a6:	f846 3b04 	str.w	r3, [r6], #4
   bc9aa:	4669      	mov	r1, sp
   bc9ac:	a803      	add	r0, sp, #12
   bc9ae:	f7f9 fa4e 	bl	b5e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bc9b2:	aa03      	add	r2, sp, #12
   bc9b4:	4639      	mov	r1, r7
   bc9b6:	4630      	mov	r0, r6
   bc9b8:	f7ff fef0 	bl	bc79c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc9bc:	a803      	add	r0, sp, #12
   bc9be:	f7f9 fa05 	bl	b5dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bc9c2:	4668      	mov	r0, sp
   bc9c4:	f7f9 fa02 	bl	b5dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bc9c8:	4b03      	ldr	r3, [pc, #12]	; (bc9d8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bc9ca:	6023      	str	r3, [r4, #0]
}
   bc9cc:	4620      	mov	r0, r4
        stream_(&stream) {
   bc9ce:	6225      	str	r5, [r4, #32]
}
   bc9d0:	b007      	add	sp, #28
   bc9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc9d4:	000bfb44 	.word	0x000bfb44
   bc9d8:	000c080c 	.word	0x000c080c

000bc9dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bc9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc9de:	460f      	mov	r7, r1
   bc9e0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc9e2:	491d      	ldr	r1, [pc, #116]	; (bca58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bc9e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc9e6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bc9e8:	4616      	mov	r6, r2
   bc9ea:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc9ec:	f002 f9e9 	bl	bedc2 <strcmp>
   bc9f0:	b9c0      	cbnz	r0, bca24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bc9f2:	b1a4      	cbz	r4, bca1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bc9f4:	4629      	mov	r1, r5
   bc9f6:	a801      	add	r0, sp, #4
   bc9f8:	f7ff fcbc 	bl	bc374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bc9fc:	4917      	ldr	r1, [pc, #92]	; (bca5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bc9fe:	2024      	movs	r0, #36	; 0x24
   bca00:	f001 fc18 	bl	be234 <_ZnwjRKSt9nothrow_t>
   bca04:	4605      	mov	r5, r0
   bca06:	b130      	cbz	r0, bca16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bca08:	ab01      	add	r3, sp, #4
   bca0a:	4632      	mov	r2, r6
   bca0c:	4621      	mov	r1, r4
   bca0e:	f7ff ffbf 	bl	bc990 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bca12:	4b13      	ldr	r3, [pc, #76]	; (bca60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bca14:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bca16:	a801      	add	r0, sp, #4
   bca18:	f7f9 f9d8 	bl	b5dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bca1c:	462c      	mov	r4, r5
}
   bca1e:	4620      	mov	r0, r4
   bca20:	b005      	add	sp, #20
   bca22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bca24:	490f      	ldr	r1, [pc, #60]	; (bca64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bca26:	4638      	mov	r0, r7
   bca28:	f002 f9cb 	bl	bedc2 <strcmp>
   bca2c:	b990      	cbnz	r0, bca54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bca2e:	2c00      	cmp	r4, #0
   bca30:	d0f5      	beq.n	bca1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bca32:	4629      	mov	r1, r5
   bca34:	a801      	add	r0, sp, #4
   bca36:	f7ff fc9d 	bl	bc374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bca3a:	4908      	ldr	r1, [pc, #32]	; (bca5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bca3c:	2024      	movs	r0, #36	; 0x24
   bca3e:	f001 fbf9 	bl	be234 <_ZnwjRKSt9nothrow_t>
   bca42:	4605      	mov	r5, r0
   bca44:	2800      	cmp	r0, #0
   bca46:	d0e6      	beq.n	bca16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bca48:	ab01      	add	r3, sp, #4
   bca4a:	4632      	mov	r2, r6
   bca4c:	4621      	mov	r1, r4
   bca4e:	f7ff ff9f 	bl	bc990 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bca52:	e7e0      	b.n	bca16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bca54:	2400      	movs	r4, #0
   bca56:	e7e2      	b.n	bca1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bca58:	000c0796 	.word	0x000c0796
   bca5c:	000c0960 	.word	0x000c0960
   bca60:	000c0824 	.word	0x000c0824
   bca64:	000c079a 	.word	0x000c079a

000bca68 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bca68:	4b01      	ldr	r3, [pc, #4]	; (bca70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bca6a:	4a02      	ldr	r2, [pc, #8]	; (bca74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bca6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bca6e:	4770      	bx	lr
   bca70:	2003e658 	.word	0x2003e658
   bca74:	000c07ab 	.word	0x000c07ab

000bca78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bca78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bca7c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bca7e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bca82:	4604      	mov	r4, r0
   bca84:	460e      	mov	r6, r1
   bca86:	4617      	mov	r7, r2
   bca88:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bca8a:	f001 f9b1 	bl	bddf0 <_Z16_fetch_usbserialv>
   bca8e:	4581      	cmp	r9, r0
   bca90:	d04c      	beq.n	bcb2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bca92:	792b      	ldrb	r3, [r5, #4]
   bca94:	0719      	lsls	r1, r3, #28
   bca96:	d504      	bpl.n	bcaa2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bca98:	696a      	ldr	r2, [r5, #20]
   bca9a:	4954      	ldr	r1, [pc, #336]	; (bcbec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bca9c:	4620      	mov	r0, r4
   bca9e:	f7ff fac0 	bl	bc022 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bcaa2:	f1b8 0f00 	cmp.w	r8, #0
   bcaa6:	d00d      	beq.n	bcac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bcaa8:	215b      	movs	r1, #91	; 0x5b
   bcaaa:	4620      	mov	r0, r4
   bcaac:	f7ff faad 	bl	bc00a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bcab0:	4641      	mov	r1, r8
   bcab2:	4620      	mov	r0, r4
   bcab4:	f7ff fa9a 	bl	bbfec <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bcab8:	6823      	ldr	r3, [r4, #0]
   bcaba:	494d      	ldr	r1, [pc, #308]	; (bcbf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bcabc:	68db      	ldr	r3, [r3, #12]
   bcabe:	2202      	movs	r2, #2
   bcac0:	4620      	mov	r0, r4
   bcac2:	4798      	blx	r3
    if (attr.has_file) {
   bcac4:	792b      	ldrb	r3, [r5, #4]
   bcac6:	07da      	lsls	r2, r3, #31
   bcac8:	d523      	bpl.n	bcb12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bcaca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bcace:	212f      	movs	r1, #47	; 0x2f
   bcad0:	4640      	mov	r0, r8
   bcad2:	f002 f9d5 	bl	bee80 <strrchr>
    if (s1) {
   bcad6:	b108      	cbz	r0, bcadc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bcad8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bcadc:	4641      	mov	r1, r8
   bcade:	4620      	mov	r0, r4
   bcae0:	f7ff fa84 	bl	bbfec <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bcae4:	792b      	ldrb	r3, [r5, #4]
   bcae6:	079b      	lsls	r3, r3, #30
   bcae8:	d508      	bpl.n	bcafc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bcaea:	213a      	movs	r1, #58	; 0x3a
   bcaec:	4620      	mov	r0, r4
   bcaee:	f7ff fa8c 	bl	bc00a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bcaf2:	68ea      	ldr	r2, [r5, #12]
   bcaf4:	493f      	ldr	r1, [pc, #252]	; (bcbf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bcaf6:	4620      	mov	r0, r4
   bcaf8:	f7ff fa93 	bl	bc022 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bcafc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bcafe:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bcb00:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bcb04:	68db      	ldr	r3, [r3, #12]
   bcb06:	bf14      	ite	ne
   bcb08:	493b      	ldrne	r1, [pc, #236]	; (bcbf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bcb0a:	493c      	ldreq	r1, [pc, #240]	; (bcbfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bcb0c:	2202      	movs	r2, #2
            write(": ", 2);
   bcb0e:	4620      	mov	r0, r4
   bcb10:	4798      	blx	r3
    if (attr.has_function) {
   bcb12:	792b      	ldrb	r3, [r5, #4]
   bcb14:	0758      	lsls	r0, r3, #29
   bcb16:	d51d      	bpl.n	bcb54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bcb18:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bcb1a:	460b      	mov	r3, r1
   bcb1c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bcb1e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcb22:	b160      	cbz	r0, bcb3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bcb24:	2820      	cmp	r0, #32
   bcb26:	d108      	bne.n	bcb3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bcb28:	4619      	mov	r1, r3
   bcb2a:	e7f7      	b.n	bcb1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bcb2c:	4834      	ldr	r0, [pc, #208]	; (bcc00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bcb2e:	f000 f966 	bl	bcdfe <_ZN5spark12NetworkClass9listeningEv>
   bcb32:	2800      	cmp	r0, #0
   bcb34:	d0ad      	beq.n	bca92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bcb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bcb3a:	2828      	cmp	r0, #40	; 0x28
   bcb3c:	d1ee      	bne.n	bcb1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bcb3e:	6823      	ldr	r3, [r4, #0]
   bcb40:	1a52      	subs	r2, r2, r1
   bcb42:	68db      	ldr	r3, [r3, #12]
   bcb44:	4620      	mov	r0, r4
   bcb46:	4798      	blx	r3
        write("(): ", 4);
   bcb48:	6823      	ldr	r3, [r4, #0]
   bcb4a:	492e      	ldr	r1, [pc, #184]	; (bcc04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bcb4c:	68db      	ldr	r3, [r3, #12]
   bcb4e:	2204      	movs	r2, #4
   bcb50:	4620      	mov	r0, r4
   bcb52:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bcb54:	2100      	movs	r1, #0
   bcb56:	4638      	mov	r0, r7
   bcb58:	f7fe f80c 	bl	bab74 <log_level_name>
   bcb5c:	4601      	mov	r1, r0
    write(s);
   bcb5e:	4620      	mov	r0, r4
   bcb60:	f7ff fa44 	bl	bbfec <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bcb64:	6823      	ldr	r3, [r4, #0]
   bcb66:	4925      	ldr	r1, [pc, #148]	; (bcbfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bcb68:	68db      	ldr	r3, [r3, #12]
   bcb6a:	2202      	movs	r2, #2
   bcb6c:	4620      	mov	r0, r4
   bcb6e:	4798      	blx	r3
    if (msg) {
   bcb70:	b11e      	cbz	r6, bcb7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bcb72:	4631      	mov	r1, r6
   bcb74:	4620      	mov	r0, r4
   bcb76:	f7ff fa39 	bl	bbfec <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bcb7a:	792b      	ldrb	r3, [r5, #4]
   bcb7c:	f013 0f30 	tst.w	r3, #48	; 0x30
   bcb80:	d02c      	beq.n	bcbdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bcb82:	6823      	ldr	r3, [r4, #0]
   bcb84:	4920      	ldr	r1, [pc, #128]	; (bcc08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bcb86:	68db      	ldr	r3, [r3, #12]
   bcb88:	2202      	movs	r2, #2
   bcb8a:	4620      	mov	r0, r4
   bcb8c:	4798      	blx	r3
        if (attr.has_code) {
   bcb8e:	792b      	ldrb	r3, [r5, #4]
   bcb90:	06d9      	lsls	r1, r3, #27
   bcb92:	d50a      	bpl.n	bcbaa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bcb94:	6823      	ldr	r3, [r4, #0]
   bcb96:	491d      	ldr	r1, [pc, #116]	; (bcc0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bcb98:	68db      	ldr	r3, [r3, #12]
   bcb9a:	2207      	movs	r2, #7
   bcb9c:	4620      	mov	r0, r4
   bcb9e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bcba0:	69aa      	ldr	r2, [r5, #24]
   bcba2:	491b      	ldr	r1, [pc, #108]	; (bcc10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bcba4:	4620      	mov	r0, r4
   bcba6:	f7ff fa3c 	bl	bc022 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bcbaa:	792b      	ldrb	r3, [r5, #4]
   bcbac:	069a      	lsls	r2, r3, #26
   bcbae:	d511      	bpl.n	bcbd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bcbb0:	06db      	lsls	r3, r3, #27
   bcbb2:	d505      	bpl.n	bcbc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bcbb4:	6823      	ldr	r3, [r4, #0]
   bcbb6:	4910      	ldr	r1, [pc, #64]	; (bcbf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bcbb8:	68db      	ldr	r3, [r3, #12]
   bcbba:	2202      	movs	r2, #2
   bcbbc:	4620      	mov	r0, r4
   bcbbe:	4798      	blx	r3
            write("details = ", 10);
   bcbc0:	6823      	ldr	r3, [r4, #0]
   bcbc2:	4914      	ldr	r1, [pc, #80]	; (bcc14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bcbc4:	68db      	ldr	r3, [r3, #12]
   bcbc6:	4620      	mov	r0, r4
   bcbc8:	220a      	movs	r2, #10
   bcbca:	4798      	blx	r3
            write(attr.details);
   bcbcc:	69e9      	ldr	r1, [r5, #28]
   bcbce:	4620      	mov	r0, r4
   bcbd0:	f7ff fa0c 	bl	bbfec <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bcbd4:	215d      	movs	r1, #93	; 0x5d
   bcbd6:	4620      	mov	r0, r4
   bcbd8:	f7ff fa17 	bl	bc00a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bcbdc:	6823      	ldr	r3, [r4, #0]
   bcbde:	490e      	ldr	r1, [pc, #56]	; (bcc18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bcbe0:	68db      	ldr	r3, [r3, #12]
   bcbe2:	4620      	mov	r0, r4
   bcbe4:	2202      	movs	r2, #2
}
   bcbe6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bcbea:	4718      	bx	r3
   bcbec:	000c07af 	.word	0x000c07af
   bcbf0:	000c07b6 	.word	0x000c07b6
   bcbf4:	000bfca3 	.word	0x000bfca3
   bcbf8:	000c07b9 	.word	0x000c07b9
   bcbfc:	000c07be 	.word	0x000c07be
   bcc00:	2003e684 	.word	0x2003e684
   bcc04:	000c07bc 	.word	0x000c07bc
   bcc08:	000c07c1 	.word	0x000c07c1
   bcc0c:	000c07c4 	.word	0x000c07c4
   bcc10:	000bf2f5 	.word	0x000bf2f5
   bcc14:	000c07cc 	.word	0x000c07cc
   bcc18:	000c07d7 	.word	0x000c07d7

000bcc1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bcc1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcc20:	b085      	sub	sp, #20
    return stream_;
   bcc22:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bcc26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bcc28:	4605      	mov	r5, r0
   bcc2a:	460f      	mov	r7, r1
   bcc2c:	4690      	mov	r8, r2
   bcc2e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bcc30:	f001 f8de 	bl	bddf0 <_Z16_fetch_usbserialv>
   bcc34:	4581      	cmp	r9, r0
   bcc36:	d105      	bne.n	bcc44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bcc38:	4849      	ldr	r0, [pc, #292]	; (bcd60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bcc3a:	f000 f8e0 	bl	bcdfe <_ZN5spark12NetworkClass9listeningEv>
   bcc3e:	2800      	cmp	r0, #0
   bcc40:	f040 808a 	bne.w	bcd58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bcc44:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bcc46:	4a47      	ldr	r2, [pc, #284]	; (bcd64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bcc48:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bcc4a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bcc4e:	a801      	add	r0, sp, #4
        strm_(stream) {
   bcc50:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bcc52:	f88d 9008 	strb.w	r9, [sp, #8]
   bcc56:	f7ff f8b4 	bl	bbdc2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bcc5a:	4649      	mov	r1, r9
   bcc5c:	4640      	mov	r0, r8
   bcc5e:	f7fd ff89 	bl	bab74 <log_level_name>
    json.name("l", 1).value(s);
   bcc62:	4941      	ldr	r1, [pc, #260]	; (bcd68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bcc64:	4680      	mov	r8, r0
   bcc66:	2201      	movs	r2, #1
   bcc68:	a801      	add	r0, sp, #4
   bcc6a:	f7ff f939 	bl	bbee0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc6e:	4641      	mov	r1, r8
   bcc70:	f7ff f9ae 	bl	bbfd0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bcc74:	b13f      	cbz	r7, bcc86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bcc76:	493d      	ldr	r1, [pc, #244]	; (bcd6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bcc78:	2201      	movs	r2, #1
   bcc7a:	a801      	add	r0, sp, #4
   bcc7c:	f7ff f930 	bl	bbee0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc80:	4639      	mov	r1, r7
   bcc82:	f7ff f9a5 	bl	bbfd0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bcc86:	b13e      	cbz	r6, bcc98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bcc88:	4939      	ldr	r1, [pc, #228]	; (bcd70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bcc8a:	2201      	movs	r2, #1
   bcc8c:	a801      	add	r0, sp, #4
   bcc8e:	f7ff f927 	bl	bbee0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc92:	4631      	mov	r1, r6
   bcc94:	f7ff f99c 	bl	bbfd0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bcc98:	7923      	ldrb	r3, [r4, #4]
   bcc9a:	07df      	lsls	r7, r3, #31
   bcc9c:	d50e      	bpl.n	bccbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bcc9e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bcca0:	212f      	movs	r1, #47	; 0x2f
   bcca2:	4630      	mov	r0, r6
   bcca4:	f002 f8ec 	bl	bee80 <strrchr>
    if (s1) {
   bcca8:	b100      	cbz	r0, bccac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bccaa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bccac:	4931      	ldr	r1, [pc, #196]	; (bcd74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bccae:	2201      	movs	r2, #1
   bccb0:	a801      	add	r0, sp, #4
   bccb2:	f7ff f915 	bl	bbee0 <_ZN5spark10JSONWriter4nameEPKcj>
   bccb6:	4631      	mov	r1, r6
   bccb8:	f7ff f98a 	bl	bbfd0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bccbc:	7923      	ldrb	r3, [r4, #4]
   bccbe:	079e      	lsls	r6, r3, #30
   bccc0:	d507      	bpl.n	bccd2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bccc2:	492d      	ldr	r1, [pc, #180]	; (bcd78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bccc4:	2202      	movs	r2, #2
   bccc6:	a801      	add	r0, sp, #4
   bccc8:	f7ff f90a 	bl	bbee0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcccc:	68e1      	ldr	r1, [r4, #12]
   bccce:	f7ff f885 	bl	bbddc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bccd2:	7923      	ldrb	r3, [r4, #4]
   bccd4:	0758      	lsls	r0, r3, #29
   bccd6:	d514      	bpl.n	bcd02 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bccd8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bccda:	4633      	mov	r3, r6
   bccdc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bccde:	f813 2b01 	ldrb.w	r2, [r3], #1
   bcce2:	b12a      	cbz	r2, bccf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bcce4:	2a20      	cmp	r2, #32
   bcce6:	d101      	bne.n	bccec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bcce8:	461e      	mov	r6, r3
   bccea:	e7f7      	b.n	bccdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bccec:	2a28      	cmp	r2, #40	; 0x28
   bccee:	d1f5      	bne.n	bccdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bccf0:	4922      	ldr	r1, [pc, #136]	; (bcd7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bccf2:	2202      	movs	r2, #2
   bccf4:	a801      	add	r0, sp, #4
   bccf6:	f7ff f8f3 	bl	bbee0 <_ZN5spark10JSONWriter4nameEPKcj>
   bccfa:	1bba      	subs	r2, r7, r6
   bccfc:	4631      	mov	r1, r6
   bccfe:	f7ff f8ff 	bl	bbf00 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bcd02:	7923      	ldrb	r3, [r4, #4]
   bcd04:	0719      	lsls	r1, r3, #28
   bcd06:	d507      	bpl.n	bcd18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bcd08:	491d      	ldr	r1, [pc, #116]	; (bcd80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bcd0a:	2201      	movs	r2, #1
   bcd0c:	a801      	add	r0, sp, #4
   bcd0e:	f7ff f8e7 	bl	bbee0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcd12:	6961      	ldr	r1, [r4, #20]
   bcd14:	f7ff f874 	bl	bbe00 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bcd18:	7923      	ldrb	r3, [r4, #4]
   bcd1a:	06da      	lsls	r2, r3, #27
   bcd1c:	d508      	bpl.n	bcd30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bcd1e:	2204      	movs	r2, #4
   bcd20:	4918      	ldr	r1, [pc, #96]	; (bcd84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bcd22:	eb0d 0002 	add.w	r0, sp, r2
   bcd26:	f7ff f8db 	bl	bbee0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcd2a:	69a1      	ldr	r1, [r4, #24]
   bcd2c:	f7ff f856 	bl	bbddc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bcd30:	7923      	ldrb	r3, [r4, #4]
   bcd32:	069b      	lsls	r3, r3, #26
   bcd34:	d507      	bpl.n	bcd46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bcd36:	4914      	ldr	r1, [pc, #80]	; (bcd88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bcd38:	2206      	movs	r2, #6
   bcd3a:	a801      	add	r0, sp, #4
   bcd3c:	f7ff f8d0 	bl	bbee0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcd40:	69e1      	ldr	r1, [r4, #28]
   bcd42:	f7ff f945 	bl	bbfd0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bcd46:	a801      	add	r0, sp, #4
   bcd48:	f7ff f825 	bl	bbd96 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bcd4c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bcd4e:	490f      	ldr	r1, [pc, #60]	; (bcd8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bcd50:	6803      	ldr	r3, [r0, #0]
   bcd52:	2202      	movs	r2, #2
   bcd54:	68db      	ldr	r3, [r3, #12]
   bcd56:	4798      	blx	r3
}
   bcd58:	b005      	add	sp, #20
   bcd5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcd5e:	bf00      	nop
   bcd60:	2003e684 	.word	0x2003e684
   bcd64:	000c07f4 	.word	0x000c07f4
   bcd68:	000c078c 	.word	0x000c078c
   bcd6c:	000c0038 	.word	0x000c0038
   bcd70:	000c0a81 	.word	0x000c0a81
   bcd74:	000bf3c7 	.word	0x000bf3c7
   bcd78:	000c07da 	.word	0x000c07da
   bcd7c:	000c07dd 	.word	0x000c07dd
   bcd80:	000bf9f7 	.word	0x000bf9f7
   bcd84:	000c07e0 	.word	0x000c07e0
   bcd88:	000c07e5 	.word	0x000c07e5
   bcd8c:	000c07d7 	.word	0x000c07d7

000bcd90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bcd90:	2300      	movs	r3, #0
   bcd92:	6840      	ldr	r0, [r0, #4]
   bcd94:	461a      	mov	r2, r3
   bcd96:	f7fd bfd9 	b.w	bad4c <network_connect>

000bcd9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bcd9a:	6840      	ldr	r0, [r0, #4]
   bcd9c:	2200      	movs	r2, #0
   bcd9e:	2102      	movs	r1, #2
   bcda0:	f7fd bfe4 	b.w	bad6c <network_disconnect>

000bcda4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bcda4:	2200      	movs	r2, #0
   bcda6:	6840      	ldr	r0, [r0, #4]
   bcda8:	4611      	mov	r1, r2
   bcdaa:	f7fd bfd7 	b.w	bad5c <network_connecting>

000bcdae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bcdae:	2200      	movs	r2, #0
   bcdb0:	6840      	ldr	r0, [r0, #4]
   bcdb2:	4611      	mov	r1, r2
   bcdb4:	f7fd bfe2 	b.w	bad7c <network_ready>

000bcdb8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bcdb8:	2300      	movs	r3, #0
   bcdba:	6840      	ldr	r0, [r0, #4]
   bcdbc:	461a      	mov	r2, r3
   bcdbe:	4619      	mov	r1, r3
   bcdc0:	f7fd bfe4 	b.w	bad8c <network_on>

000bcdc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bcdc4:	2300      	movs	r3, #0
   bcdc6:	6840      	ldr	r0, [r0, #4]
   bcdc8:	461a      	mov	r2, r3
   bcdca:	4619      	mov	r1, r3
   bcdcc:	f7fd bfe6 	b.w	bad9c <network_off>

000bcdd0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bcdd0:	6840      	ldr	r0, [r0, #4]
   bcdd2:	2100      	movs	r1, #0
   bcdd4:	f7fe b80a 	b.w	badec <network_is_on>

000bcdd8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bcdd8:	6840      	ldr	r0, [r0, #4]
   bcdda:	2100      	movs	r1, #0
   bcddc:	f7fe b80e 	b.w	badfc <network_is_off>

000bcde0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bcde0:	6840      	ldr	r0, [r0, #4]
   bcde2:	2200      	movs	r2, #0
   bcde4:	f081 0101 	eor.w	r1, r1, #1
   bcde8:	f7fd bfe0 	b.w	badac <network_listen>

000bcdec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bcdec:	6840      	ldr	r0, [r0, #4]
   bcdee:	2200      	movs	r2, #0
   bcdf0:	f7fd bfec 	b.w	badcc <network_set_listen_timeout>

000bcdf4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bcdf4:	2200      	movs	r2, #0
   bcdf6:	6840      	ldr	r0, [r0, #4]
   bcdf8:	4611      	mov	r1, r2
   bcdfa:	f7fd bfef 	b.w	baddc <network_get_listen_timeout>

000bcdfe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bcdfe:	2200      	movs	r2, #0
   bce00:	6840      	ldr	r0, [r0, #4]
   bce02:	4611      	mov	r1, r2
   bce04:	f7fd bfda 	b.w	badbc <network_listening>

000bce08 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bce08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bce0c:	b095      	sub	sp, #84	; 0x54
   bce0e:	4614      	mov	r4, r2
   bce10:	460d      	mov	r5, r1
   bce12:	4607      	mov	r7, r0
    IPAddress addr;
   bce14:	f7fe fe6e 	bl	bbaf4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bce18:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bce1a:	221c      	movs	r2, #28
   bce1c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bce1e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bce20:	f001 ff44 	bl	becac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bce24:	2340      	movs	r3, #64	; 0x40
   bce26:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bce28:	4620      	mov	r0, r4
   bce2a:	466b      	mov	r3, sp
   bce2c:	aa0c      	add	r2, sp, #48	; 0x30
   bce2e:	2100      	movs	r1, #0
   bce30:	f7fd fd40 	bl	ba8b4 <netdb_getaddrinfo>
    if (!r) {
   bce34:	4604      	mov	r4, r0
   bce36:	2800      	cmp	r0, #0
   bce38:	d14b      	bne.n	bced2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bce3a:	4602      	mov	r2, r0
   bce3c:	2101      	movs	r1, #1
   bce3e:	6868      	ldr	r0, [r5, #4]
   bce40:	f7fd ff9c 	bl	bad7c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bce44:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bce46:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bce48:	4622      	mov	r2, r4
   bce4a:	6868      	ldr	r0, [r5, #4]
   bce4c:	f7fd ff96 	bl	bad7c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bce50:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bce52:	4681      	mov	r9, r0
        bool ok = false;
   bce54:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bce56:	2e00      	cmp	r6, #0
   bce58:	d03b      	beq.n	bced2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bce5a:	2900      	cmp	r1, #0
   bce5c:	d139      	bne.n	bced2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bce5e:	6873      	ldr	r3, [r6, #4]
   bce60:	2b02      	cmp	r3, #2
   bce62:	d003      	beq.n	bce6c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bce64:	2b0a      	cmp	r3, #10
   bce66:	d011      	beq.n	bce8c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bce68:	69f6      	ldr	r6, [r6, #28]
   bce6a:	e7f4      	b.n	bce56 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bce6c:	f1b8 0f00 	cmp.w	r8, #0
   bce70:	d0fa      	beq.n	bce68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bce72:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bce74:	a806      	add	r0, sp, #24
   bce76:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bce78:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bce7a:	f7fe fe69 	bl	bbb50 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bce7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bce80:	1d3c      	adds	r4, r7, #4
   bce82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bce84:	682b      	ldr	r3, [r5, #0]
   bce86:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bce88:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bce8a:	e7ed      	b.n	bce68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bce8c:	f1b9 0f00 	cmp.w	r9, #0
   bce90:	d0ea      	beq.n	bce68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bce92:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bce94:	2210      	movs	r2, #16
   bce96:	a801      	add	r0, sp, #4
   bce98:	f001 ff08 	bl	becac <memset>
                    a.v = 6;
   bce9c:	2306      	movs	r3, #6
   bce9e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bcea2:	ad01      	add	r5, sp, #4
   bcea4:	f104 0308 	add.w	r3, r4, #8
   bcea8:	3418      	adds	r4, #24
   bceaa:	6818      	ldr	r0, [r3, #0]
   bceac:	6859      	ldr	r1, [r3, #4]
   bceae:	462a      	mov	r2, r5
   bceb0:	c203      	stmia	r2!, {r0, r1}
   bceb2:	3308      	adds	r3, #8
   bceb4:	42a3      	cmp	r3, r4
   bceb6:	4615      	mov	r5, r2
   bceb8:	d1f7      	bne.n	bceaa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bceba:	a901      	add	r1, sp, #4
   bcebc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bcebe:	ad07      	add	r5, sp, #28
   bcec0:	f7fe fe26 	bl	bbb10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bcec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcec6:	1d3c      	adds	r4, r7, #4
   bcec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bceca:	682b      	ldr	r3, [r5, #0]
   bcecc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bcece:	4649      	mov	r1, r9
   bced0:	e7ca      	b.n	bce68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bced2:	9800      	ldr	r0, [sp, #0]
   bced4:	f7fd fce6 	bl	ba8a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bced8:	4638      	mov	r0, r7
   bceda:	b015      	add	sp, #84	; 0x54
   bcedc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bcee0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bcee0:	4b02      	ldr	r3, [pc, #8]	; (bceec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bcee2:	4a03      	ldr	r2, [pc, #12]	; (bcef0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bcee4:	601a      	str	r2, [r3, #0]
   bcee6:	2200      	movs	r2, #0
   bcee8:	605a      	str	r2, [r3, #4]

} // spark
   bceea:	4770      	bx	lr
   bceec:	2003e684 	.word	0x2003e684
   bcef0:	000c086c 	.word	0x000c086c

000bcef4 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bcef4:	b508      	push	{r3, lr}
            return &Wire1;
   bcef6:	f001 f939 	bl	be16c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bcefa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bcefe:	f7fe bd67 	b.w	bb9d0 <_ZN7TwoWire4lockEv>

000bcf02 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bcf02:	b510      	push	{r4, lr}
   bcf04:	4604      	mov	r4, r0
    lock_(_lock)
   bcf06:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bcf08:	b109      	cbz	r1, bcf0e <_ZN4PMICC1Eb+0xc>
        lock();
   bcf0a:	f7ff fff3 	bl	bcef4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bcf0e:	4620      	mov	r0, r4
   bcf10:	bd10      	pop	{r4, pc}

000bcf12 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bcf12:	b508      	push	{r3, lr}
            return &Wire1;
   bcf14:	f001 f92a 	bl	be16c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bcf18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bcf1c:	f7fe bd61 	b.w	bb9e2 <_ZN7TwoWire6unlockEv>

000bcf20 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bcf20:	b510      	push	{r4, lr}
    if (lock_) {
   bcf22:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bcf24:	4604      	mov	r4, r0
    if (lock_) {
   bcf26:	b10b      	cbz	r3, bcf2c <_ZN4PMICD1Ev+0xc>
        unlock();
   bcf28:	f7ff fff3 	bl	bcf12 <_ZN4PMIC6unlockEv>
}
   bcf2c:	4620      	mov	r0, r4
   bcf2e:	bd10      	pop	{r4, pc}

000bcf30 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bcf30:	b510      	push	{r4, lr}
   bcf32:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bcf34:	6800      	ldr	r0, [r0, #0]
   bcf36:	f7ff ffec 	bl	bcf12 <_ZN4PMIC6unlockEv>
   bcf3a:	4620      	mov	r0, r4
   bcf3c:	bd10      	pop	{r4, pc}

000bcf3e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bcf3e:	b530      	push	{r4, r5, lr}
   bcf40:	b087      	sub	sp, #28
   bcf42:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcf44:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcf46:	f7ff ffd5 	bl	bcef4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bcf4a:	226b      	movs	r2, #107	; 0x6b
   bcf4c:	2300      	movs	r3, #0
   bcf4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bcf52:	2401      	movs	r4, #1
   bcf54:	230a      	movs	r3, #10
   bcf56:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bcf5a:	f001 f907 	bl	be16c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bcf5e:	a902      	add	r1, sp, #8
   bcf60:	f7fe fd1a 	bl	bb998 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bcf64:	f001 f902 	bl	be16c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bcf68:	6803      	ldr	r3, [r0, #0]
   bcf6a:	4629      	mov	r1, r5
   bcf6c:	689b      	ldr	r3, [r3, #8]
   bcf6e:	4798      	blx	r3
            return &Wire1;
   bcf70:	f001 f8fc 	bl	be16c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bcf74:	4621      	mov	r1, r4
   bcf76:	f7fe fd27 	bl	bb9c8 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bcf7a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bcf7c:	f001 f8f6 	bl	be16c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bcf80:	a902      	add	r1, sp, #8
   bcf82:	f7fe fcd9 	bl	bb938 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bcf86:	f001 f8f1 	bl	be16c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bcf8a:	6803      	ldr	r3, [r0, #0]
   bcf8c:	695b      	ldr	r3, [r3, #20]
   bcf8e:	4798      	blx	r3
   bcf90:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bcf92:	a801      	add	r0, sp, #4
   bcf94:	f7ff ffcc 	bl	bcf30 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcf98:	b2e0      	uxtb	r0, r4
   bcf9a:	b007      	add	sp, #28
   bcf9c:	bd30      	pop	{r4, r5, pc}

000bcf9e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bcf9e:	b570      	push	{r4, r5, r6, lr}
   bcfa0:	b086      	sub	sp, #24
   bcfa2:	460d      	mov	r5, r1
   bcfa4:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcfa6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcfa8:	f7ff ffa4 	bl	bcef4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bcfac:	226b      	movs	r2, #107	; 0x6b
   bcfae:	2300      	movs	r3, #0
   bcfb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bcfb4:	2601      	movs	r6, #1
   bcfb6:	230a      	movs	r3, #10
   bcfb8:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bcfbc:	f001 f8d6 	bl	be16c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bcfc0:	a902      	add	r1, sp, #8
   bcfc2:	f7fe fce9 	bl	bb998 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bcfc6:	f001 f8d1 	bl	be16c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bcfca:	6803      	ldr	r3, [r0, #0]
   bcfcc:	4629      	mov	r1, r5
   bcfce:	689b      	ldr	r3, [r3, #8]
   bcfd0:	4798      	blx	r3
            return &Wire1;
   bcfd2:	f001 f8cb 	bl	be16c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bcfd6:	6803      	ldr	r3, [r0, #0]
   bcfd8:	4621      	mov	r1, r4
   bcfda:	689b      	ldr	r3, [r3, #8]
   bcfdc:	4798      	blx	r3
            return &Wire1;
   bcfde:	f001 f8c5 	bl	be16c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bcfe2:	4631      	mov	r1, r6
   bcfe4:	f7fe fcf0 	bl	bb9c8 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bcfe8:	a801      	add	r0, sp, #4
   bcfea:	f7ff ffa1 	bl	bcf30 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcfee:	b006      	add	sp, #24
   bcff0:	bd70      	pop	{r4, r5, r6, pc}

000bcff2 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bcff2:	b513      	push	{r0, r1, r4, lr}
   bcff4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcff6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcff8:	f7ff ff7c 	bl	bcef4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bcffc:	2101      	movs	r1, #1
   bcffe:	4620      	mov	r0, r4
   bd000:	f7ff ff9d 	bl	bcf3e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bd004:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bd008:	2b10      	cmp	r3, #16
   bd00a:	d007      	beq.n	bd01c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bd00c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bd010:	f042 0210 	orr.w	r2, r2, #16
   bd014:	2101      	movs	r1, #1
   bd016:	4620      	mov	r0, r4
   bd018:	f7ff ffc1 	bl	bcf9e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bd01c:	a801      	add	r0, sp, #4
   bd01e:	f7ff ff87 	bl	bcf30 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd022:	2001      	movs	r0, #1
   bd024:	b002      	add	sp, #8
   bd026:	bd10      	pop	{r4, pc}

000bd028 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bd028:	b513      	push	{r0, r1, r4, lr}
   bd02a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd02c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd02e:	f7ff ff61 	bl	bcef4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bd032:	2101      	movs	r1, #1
   bd034:	4620      	mov	r0, r4
   bd036:	f7ff ff82 	bl	bcf3e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bd03a:	f010 0f30 	tst.w	r0, #48	; 0x30
   bd03e:	d005      	beq.n	bd04c <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bd040:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bd044:	2101      	movs	r1, #1
   bd046:	4620      	mov	r0, r4
   bd048:	f7ff ffa9 	bl	bcf9e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bd04c:	a801      	add	r0, sp, #4
   bd04e:	f7ff ff6f 	bl	bcf30 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd052:	2001      	movs	r0, #1
   bd054:	b002      	add	sp, #8
   bd056:	bd10      	pop	{r4, pc}

000bd058 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bd058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd05a:	4606      	mov	r6, r0
   bd05c:	460d      	mov	r5, r1
  size_t n = 0;
   bd05e:	188f      	adds	r7, r1, r2
   bd060:	2400      	movs	r4, #0
  while (size--) {
   bd062:	42bd      	cmp	r5, r7
   bd064:	d00c      	beq.n	bd080 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bd066:	6833      	ldr	r3, [r6, #0]
   bd068:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd06c:	689b      	ldr	r3, [r3, #8]
   bd06e:	4630      	mov	r0, r6
   bd070:	4798      	blx	r3
     if (chunk>=0)
   bd072:	1e03      	subs	r3, r0, #0
   bd074:	db01      	blt.n	bd07a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bd076:	441c      	add	r4, r3
  while (size--) {
   bd078:	e7f3      	b.n	bd062 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bd07a:	2c00      	cmp	r4, #0
   bd07c:	bf08      	it	eq
   bd07e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bd080:	4620      	mov	r0, r4
   bd082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd084 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bd084:	b513      	push	{r0, r1, r4, lr}
   bd086:	4604      	mov	r4, r0
    }
   bd088:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bd08a:	b159      	cbz	r1, bd0a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bd08c:	9101      	str	r1, [sp, #4]
   bd08e:	f001 fec8 	bl	bee22 <strlen>
   bd092:	6823      	ldr	r3, [r4, #0]
   bd094:	9901      	ldr	r1, [sp, #4]
   bd096:	68db      	ldr	r3, [r3, #12]
   bd098:	4602      	mov	r2, r0
   bd09a:	4620      	mov	r0, r4
    }
   bd09c:	b002      	add	sp, #8
   bd09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bd0a2:	4718      	bx	r3
    }
   bd0a4:	b002      	add	sp, #8
   bd0a6:	bd10      	pop	{r4, pc}

000bd0a8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bd0a8:	b508      	push	{r3, lr}
  return write(str);
   bd0aa:	f7ff ffeb 	bl	bd084 <_ZN5Print5writeEPKc>
}
   bd0ae:	bd08      	pop	{r3, pc}

000bd0b0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bd0b0:	6803      	ldr	r3, [r0, #0]
   bd0b2:	689b      	ldr	r3, [r3, #8]
   bd0b4:	4718      	bx	r3

000bd0b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bd0b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bd0b8:	210d      	movs	r1, #13
{
   bd0ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   bd0bc:	f7ff fff8 	bl	bd0b0 <_ZN5Print5printEc>
  n += print('\n');
   bd0c0:	210a      	movs	r1, #10
  size_t n = print('\r');
   bd0c2:	4604      	mov	r4, r0
  n += print('\n');
   bd0c4:	4628      	mov	r0, r5
   bd0c6:	f7ff fff3 	bl	bd0b0 <_ZN5Print5printEc>
  return n;
}
   bd0ca:	4420      	add	r0, r4
   bd0cc:	bd38      	pop	{r3, r4, r5, pc}

000bd0ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bd0ce:	b530      	push	{r4, r5, lr}
   bd0d0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bd0d2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bd0d4:	2a01      	cmp	r2, #1
  *str = '\0';
   bd0d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bd0da:	bf98      	it	ls
   bd0dc:	220a      	movls	r2, #10
   bd0de:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bd0e0:	460d      	mov	r5, r1
   bd0e2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bd0e6:	fb01 5312 	mls	r3, r1, r2, r5
   bd0ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd0ee:	2b09      	cmp	r3, #9
   bd0f0:	bf94      	ite	ls
   bd0f2:	3330      	addls	r3, #48	; 0x30
   bd0f4:	3337      	addhi	r3, #55	; 0x37
   bd0f6:	b2db      	uxtb	r3, r3
  } while(n);
   bd0f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd0fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bd0fe:	d9ef      	bls.n	bd0e0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bd100:	4621      	mov	r1, r4
   bd102:	f7ff ffbf 	bl	bd084 <_ZN5Print5writeEPKc>
}
   bd106:	b00b      	add	sp, #44	; 0x2c
   bd108:	bd30      	pop	{r4, r5, pc}
	...

000bd10c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bd10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd110:	ec55 4b10 	vmov	r4, r5, d0
   bd114:	4606      	mov	r6, r0
   bd116:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bd118:	ee10 2a10 	vmov	r2, s0
   bd11c:	ee10 0a10 	vmov	r0, s0
   bd120:	462b      	mov	r3, r5
   bd122:	4629      	mov	r1, r5
   bd124:	f001 fcea 	bl	beafc <__aeabi_dcmpun>
   bd128:	b140      	cbz	r0, bd13c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bd12a:	4953      	ldr	r1, [pc, #332]	; (bd278 <_ZN5Print10printFloatEdh+0x16c>)
   bd12c:	4630      	mov	r0, r6
   bd12e:	f7ff ffa9 	bl	bd084 <_ZN5Print5writeEPKc>
   bd132:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bd134:	4650      	mov	r0, sl
   bd136:	b003      	add	sp, #12
   bd138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bd13c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bd140:	4b4e      	ldr	r3, [pc, #312]	; (bd27c <_ZN5Print10printFloatEdh+0x170>)
   bd142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd146:	4620      	mov	r0, r4
   bd148:	4649      	mov	r1, r9
   bd14a:	f001 fcd7 	bl	beafc <__aeabi_dcmpun>
   bd14e:	b948      	cbnz	r0, bd164 <_ZN5Print10printFloatEdh+0x58>
   bd150:	4b4a      	ldr	r3, [pc, #296]	; (bd27c <_ZN5Print10printFloatEdh+0x170>)
   bd152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd156:	4620      	mov	r0, r4
   bd158:	4649      	mov	r1, r9
   bd15a:	f001 fcb1 	bl	beac0 <__aeabi_dcmple>
   bd15e:	b908      	cbnz	r0, bd164 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bd160:	4947      	ldr	r1, [pc, #284]	; (bd280 <_ZN5Print10printFloatEdh+0x174>)
   bd162:	e7e3      	b.n	bd12c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bd164:	4b47      	ldr	r3, [pc, #284]	; (bd284 <_ZN5Print10printFloatEdh+0x178>)
   bd166:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd16a:	4620      	mov	r0, r4
   bd16c:	4629      	mov	r1, r5
   bd16e:	f001 fcbb 	bl	beae8 <__aeabi_dcmpgt>
   bd172:	b108      	cbz	r0, bd178 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bd174:	4944      	ldr	r1, [pc, #272]	; (bd288 <_ZN5Print10printFloatEdh+0x17c>)
   bd176:	e7d9      	b.n	bd12c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bd178:	4b44      	ldr	r3, [pc, #272]	; (bd28c <_ZN5Print10printFloatEdh+0x180>)
   bd17a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd17e:	4620      	mov	r0, r4
   bd180:	4629      	mov	r1, r5
   bd182:	f001 fc93 	bl	beaac <__aeabi_dcmplt>
   bd186:	2800      	cmp	r0, #0
   bd188:	d1f4      	bne.n	bd174 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bd18a:	2200      	movs	r2, #0
   bd18c:	2300      	movs	r3, #0
   bd18e:	4620      	mov	r0, r4
   bd190:	4629      	mov	r1, r5
   bd192:	f001 fc8b 	bl	beaac <__aeabi_dcmplt>
   bd196:	b1d0      	cbz	r0, bd1ce <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bd198:	212d      	movs	r1, #45	; 0x2d
   bd19a:	4630      	mov	r0, r6
   bd19c:	f7ff ff88 	bl	bd0b0 <_ZN5Print5printEc>
     number = -number;
   bd1a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bd1a4:	4682      	mov	sl, r0
     number = -number;
   bd1a6:	461d      	mov	r5, r3
  double rounding = 0.5;
   bd1a8:	4939      	ldr	r1, [pc, #228]	; (bd290 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bd1aa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bd298 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bd1ae:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bd1b2:	2000      	movs	r0, #0
    rounding /= 10.0;
   bd1b4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bd1b8:	fa5f f38b 	uxtb.w	r3, fp
   bd1bc:	429f      	cmp	r7, r3
   bd1be:	d908      	bls.n	bd1d2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bd1c0:	4642      	mov	r2, r8
   bd1c2:	464b      	mov	r3, r9
   bd1c4:	f001 fb2a 	bl	be81c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bd1c8:	f10b 0b01 	add.w	fp, fp, #1
   bd1cc:	e7f4      	b.n	bd1b8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bd1ce:	4682      	mov	sl, r0
   bd1d0:	e7ea      	b.n	bd1a8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bd1d2:	4622      	mov	r2, r4
   bd1d4:	462b      	mov	r3, r5
   bd1d6:	f001 f841 	bl	be25c <__adddf3>
   bd1da:	460d      	mov	r5, r1
   bd1dc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bd1de:	f001 fccb 	bl	beb78 <__aeabi_d2uiz>
   bd1e2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bd1e4:	f001 f976 	bl	be4d4 <__aeabi_ui2d>
   bd1e8:	4602      	mov	r2, r0
   bd1ea:	460b      	mov	r3, r1
   bd1ec:	4620      	mov	r0, r4
   bd1ee:	4629      	mov	r1, r5
   bd1f0:	f001 f832 	bl	be258 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bd1f4:	220a      	movs	r2, #10
   bd1f6:	4604      	mov	r4, r0
   bd1f8:	460d      	mov	r5, r1
   bd1fa:	4630      	mov	r0, r6
   bd1fc:	4641      	mov	r1, r8
   bd1fe:	f7ff ff66 	bl	bd0ce <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bd202:	4482      	add	sl, r0
  if (digits > 0) {
   bd204:	2f00      	cmp	r7, #0
   bd206:	d095      	beq.n	bd134 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bd208:	4922      	ldr	r1, [pc, #136]	; (bd294 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bd20a:	f8df 908c 	ldr.w	r9, [pc, #140]	; bd298 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bd20e:	4630      	mov	r0, r6
   bd210:	f7ff ff38 	bl	bd084 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bd214:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bd218:	4482      	add	sl, r0
  while (digits-- > 0)
   bd21a:	2f00      	cmp	r7, #0
   bd21c:	d08a      	beq.n	bd134 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bd21e:	4642      	mov	r2, r8
   bd220:	464b      	mov	r3, r9
   bd222:	4620      	mov	r0, r4
   bd224:	4629      	mov	r1, r5
   bd226:	f001 f9cf 	bl	be5c8 <__aeabi_dmul>
   bd22a:	4604      	mov	r4, r0
   bd22c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bd22e:	f001 fc7b 	bl	beb28 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bd232:	f1b0 0b00 	subs.w	fp, r0, #0
   bd236:	da1c      	bge.n	bd272 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bd238:	212d      	movs	r1, #45	; 0x2d
   bd23a:	4630      	mov	r0, r6
   bd23c:	f7ff ff38 	bl	bd0b0 <_ZN5Print5printEc>
            val = -n;
   bd240:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bd244:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bd246:	220a      	movs	r2, #10
   bd248:	4630      	mov	r0, r6
   bd24a:	9301      	str	r3, [sp, #4]
   bd24c:	f7ff ff3f 	bl	bd0ce <_ZN5Print11printNumberEmh>
   bd250:	9b01      	ldr	r3, [sp, #4]
   bd252:	4418      	add	r0, r3
    n += print(toPrint);
   bd254:	4482      	add	sl, r0
    remainder -= toPrint;
   bd256:	4658      	mov	r0, fp
   bd258:	f001 f94c 	bl	be4f4 <__aeabi_i2d>
   bd25c:	4602      	mov	r2, r0
   bd25e:	460b      	mov	r3, r1
   bd260:	4620      	mov	r0, r4
   bd262:	4629      	mov	r1, r5
   bd264:	f000 fff8 	bl	be258 <__aeabi_dsub>
   bd268:	3f01      	subs	r7, #1
   bd26a:	4604      	mov	r4, r0
   bd26c:	460d      	mov	r5, r1
   bd26e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bd270:	e7d3      	b.n	bd21a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bd272:	4659      	mov	r1, fp
        size_t t = 0;
   bd274:	2300      	movs	r3, #0
   bd276:	e7e6      	b.n	bd246 <_ZN5Print10printFloatEdh+0x13a>
   bd278:	000c08a0 	.word	0x000c08a0
   bd27c:	7fefffff 	.word	0x7fefffff
   bd280:	000c08a4 	.word	0x000c08a4
   bd284:	41efffff 	.word	0x41efffff
   bd288:	000c08a8 	.word	0x000c08a8
   bd28c:	c1efffff 	.word	0xc1efffff
   bd290:	3fe00000 	.word	0x3fe00000
   bd294:	000c08e0 	.word	0x000c08e0
   bd298:	40240000 	.word	0x40240000

000bd29c <_ZN5Print5printEfi>:
{
   bd29c:	b538      	push	{r3, r4, r5, lr}
   bd29e:	4604      	mov	r4, r0
   bd2a0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bd2a4:	b2cd      	uxtb	r5, r1
   bd2a6:	f001 f937 	bl	be518 <__aeabi_f2d>
   bd2aa:	ec41 0b10 	vmov	d0, r0, r1
   bd2ae:	4629      	mov	r1, r5
   bd2b0:	4620      	mov	r0, r4
}
   bd2b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bd2b6:	f7ff bf29 	b.w	bd10c <_ZN5Print10printFloatEdh>

000bd2ba <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bd2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd2be:	b086      	sub	sp, #24
   bd2c0:	af00      	add	r7, sp, #0
   bd2c2:	4605      	mov	r5, r0
   bd2c4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bd2c6:	1d38      	adds	r0, r7, #4
   bd2c8:	2114      	movs	r1, #20
{
   bd2ca:	4614      	mov	r4, r2
    va_copy(args2, args);
   bd2cc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bd2ce:	f7fd fdcd 	bl	bae6c <vsnprintf>

    if (n<bufsize)
   bd2d2:	2813      	cmp	r0, #19
   bd2d4:	d80e      	bhi.n	bd2f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bd2d6:	1d39      	adds	r1, r7, #4
   bd2d8:	4628      	mov	r0, r5
   bd2da:	f7ff fed3 	bl	bd084 <_ZN5Print5writeEPKc>
   bd2de:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bd2e0:	b11e      	cbz	r6, bd2ea <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bd2e2:	4628      	mov	r0, r5
   bd2e4:	f7ff fee7 	bl	bd0b6 <_ZN5Print7printlnEv>
   bd2e8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bd2ea:	4620      	mov	r0, r4
   bd2ec:	3718      	adds	r7, #24
   bd2ee:	46bd      	mov	sp, r7
   bd2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bd2f4:	f100 0308 	add.w	r3, r0, #8
   bd2f8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bd2fc:	46e8      	mov	r8, sp
        char bigger[n+1];
   bd2fe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bd302:	4622      	mov	r2, r4
   bd304:	1c41      	adds	r1, r0, #1
   bd306:	683b      	ldr	r3, [r7, #0]
   bd308:	4668      	mov	r0, sp
   bd30a:	f7fd fdaf 	bl	bae6c <vsnprintf>
  return write(str);
   bd30e:	4669      	mov	r1, sp
   bd310:	4628      	mov	r0, r5
   bd312:	f7ff feb7 	bl	bd084 <_ZN5Print5writeEPKc>
   bd316:	4604      	mov	r4, r0
   bd318:	46c5      	mov	sp, r8
   bd31a:	e7e1      	b.n	bd2e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bd31c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bd31c:	b510      	push	{r4, lr}
  if (0 == max) {
   bd31e:	4604      	mov	r4, r0
   bd320:	b128      	cbz	r0, bd32e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bd322:	f001 fcf9 	bl	bed18 <rand>
   bd326:	fb90 f3f4 	sdiv	r3, r0, r4
   bd32a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bd32e:	4620      	mov	r0, r4
   bd330:	bd10      	pop	{r4, pc}

000bd332 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bd332:	4288      	cmp	r0, r1
{
   bd334:	b510      	push	{r4, lr}
   bd336:	4604      	mov	r4, r0
  if (min >= max) {
   bd338:	da03      	bge.n	bd342 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bd33a:	1a08      	subs	r0, r1, r0
   bd33c:	f7ff ffee 	bl	bd31c <_Z6randomi>
   bd340:	4404      	add	r4, r0
}
   bd342:	4620      	mov	r0, r4
   bd344:	bd10      	pop	{r4, pc}

000bd346 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   bd346:	f001 bcb9 	b.w	becbc <srand>
	...

000bd34c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bd34c:	4b01      	ldr	r3, [pc, #4]	; (bd354 <_GLOBAL__sub_I_RGB+0x8>)
   bd34e:	2200      	movs	r2, #0
   bd350:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bd352:	4770      	bx	lr
   bd354:	2003e68c 	.word	0x2003e68c

000bd358 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bd358:	2100      	movs	r1, #0
   bd35a:	f7fd baf3 	b.w	ba944 <hal_spi_release>

000bd35e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bd35e:	2100      	movs	r1, #0
   bd360:	f7fd bae8 	b.w	ba934 <hal_spi_acquire>

000bd364 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bd364:	b510      	push	{r4, lr}
   bd366:	4604      	mov	r4, r0
   bd368:	4608      	mov	r0, r1
{
    _spi = spi;
   bd36a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bd36c:	f7fd fac2 	bl	ba8f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bd370:	2300      	movs	r3, #0
   bd372:	6063      	str	r3, [r4, #4]
}
   bd374:	4620      	mov	r0, r4
   bd376:	bd10      	pop	{r4, pc}

000bd378 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bd378:	b513      	push	{r0, r1, r4, lr}
   bd37a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bd37c:	7800      	ldrb	r0, [r0, #0]
   bd37e:	f7ff ffee 	bl	bd35e <_ZN8SPIClass4lockEv.isra.0>
   bd382:	b958      	cbnz	r0, bd39c <_ZN8SPIClass5beginEv+0x24>
   bd384:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bd386:	9001      	str	r0, [sp, #4]
   bd388:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bd38c:	f7fd fa9a 	bl	ba8c4 <hal_spi_begin>
        unlock();
   bd390:	9801      	ldr	r0, [sp, #4]
    }
}
   bd392:	b002      	add	sp, #8
   bd394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd398:	f7ff bfde 	b.w	bd358 <_ZN8SPIClass6unlockEv.isra.0>
   bd39c:	b002      	add	sp, #8
   bd39e:	bd10      	pop	{r4, pc}

000bd3a0 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bd3a0:	b513      	push	{r0, r1, r4, lr}
   bd3a2:	4604      	mov	r4, r0
    if (!lock())
   bd3a4:	7800      	ldrb	r0, [r0, #0]
   bd3a6:	f7ff ffda 	bl	bd35e <_ZN8SPIClass4lockEv.isra.0>
   bd3aa:	b948      	cbnz	r0, bd3c0 <_ZN8SPIClass3endEv+0x20>
   bd3ac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bd3ae:	9001      	str	r0, [sp, #4]
   bd3b0:	f7fd fa90 	bl	ba8d4 <hal_spi_end>
        unlock();
   bd3b4:	9801      	ldr	r0, [sp, #4]
    }
}
   bd3b6:	b002      	add	sp, #8
   bd3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd3bc:	f7ff bfcc 	b.w	bd358 <_ZN8SPIClass6unlockEv.isra.0>
   bd3c0:	b002      	add	sp, #8
   bd3c2:	bd10      	pop	{r4, pc}

000bd3c4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bd3c4:	7800      	ldrb	r0, [r0, #0]
   bd3c6:	f7ff bfc7 	b.w	bd358 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bd3cc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bd3cc:	0840      	lsrs	r0, r0, #1
{
   bd3ce:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bd3d0:	6018      	str	r0, [r3, #0]
   bd3d2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bd3d4:	6818      	ldr	r0, [r3, #0]
   bd3d6:	4288      	cmp	r0, r1
   bd3d8:	b2e5      	uxtb	r5, r4
   bd3da:	d906      	bls.n	bd3ea <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bd3dc:	3401      	adds	r4, #1
   bd3de:	2c08      	cmp	r4, #8
   bd3e0:	d002      	beq.n	bd3e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bd3e2:	0840      	lsrs	r0, r0, #1
   bd3e4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bd3e6:	e7f5      	b.n	bd3d4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bd3e8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bd3ea:	4b02      	ldr	r3, [pc, #8]	; (bd3f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bd3ec:	5d5b      	ldrb	r3, [r3, r5]
   bd3ee:	7013      	strb	r3, [r2, #0]
}
   bd3f0:	bd30      	pop	{r4, r5, pc}
   bd3f2:	bf00      	nop
   bd3f4:	000c08ac 	.word	0x000c08ac

000bd3f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bd3f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd3fc:	4606      	mov	r6, r0
   bd3fe:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bd400:	7800      	ldrb	r0, [r0, #0]
{
   bd402:	460c      	mov	r4, r1
    CHECK(lock());
   bd404:	f7ff ffab 	bl	bd35e <_ZN8SPIClass4lockEv.isra.0>
   bd408:	2800      	cmp	r0, #0
   bd40a:	db1b      	blt.n	bd444 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bd40c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bd40e:	2214      	movs	r2, #20
   bd410:	2100      	movs	r1, #0
   bd412:	a809      	add	r0, sp, #36	; 0x24
   bd414:	f001 fc4a 	bl	becac <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bd418:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bd41a:	2200      	movs	r2, #0
   bd41c:	a909      	add	r1, sp, #36	; 0x24
   bd41e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bd420:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bd424:	f7fd fa76 	bl	ba914 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bd428:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bd42c:	b113      	cbz	r3, bd434 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bd42e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bd432:	b155      	cbz	r5, bd44a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bd434:	2700      	movs	r7, #0
   bd436:	46b9      	mov	r9, r7
   bd438:	46b8      	mov	r8, r7
   bd43a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bd43c:	7923      	ldrb	r3, [r4, #4]
   bd43e:	b15d      	cbz	r5, bd458 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bd440:	b1c3      	cbz	r3, bd474 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bd442:	2000      	movs	r0, #0
}
   bd444:	b00f      	add	sp, #60	; 0x3c
   bd446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bd44a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bd44e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bd452:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bd456:	e7f1      	b.n	bd43c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bd458:	2b00      	cmp	r3, #0
   bd45a:	d135      	bne.n	bd4c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bd45c:	68a3      	ldr	r3, [r4, #8]
   bd45e:	4543      	cmp	r3, r8
   bd460:	d108      	bne.n	bd474 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bd462:	f88d 9020 	strb.w	r9, [sp, #32]
   bd466:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd46a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd46e:	89a3      	ldrh	r3, [r4, #12]
   bd470:	429a      	cmp	r2, r3
   bd472:	d0e6      	beq.n	bd442 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bd474:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd476:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bd478:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd47c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bd47e:	ab04      	add	r3, sp, #16
   bd480:	f10d 020f 	add.w	r2, sp, #15
   bd484:	f7ff ffa2 	bl	bd3cc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bd488:	7921      	ldrb	r1, [r4, #4]
   bd48a:	b985      	cbnz	r5, bd4ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bd48c:	b989      	cbnz	r1, bd4b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd48e:	68a3      	ldr	r3, [r4, #8]
   bd490:	4543      	cmp	r3, r8
   bd492:	d30e      	bcc.n	bd4b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bd494:	f88d 9020 	strb.w	r9, [sp, #32]
   bd498:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd49c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd4a0:	89a3      	ldrh	r3, [r4, #12]
   bd4a2:	429a      	cmp	r2, r3
   bd4a4:	d105      	bne.n	bd4b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bd4a6:	9b04      	ldr	r3, [sp, #16]
   bd4a8:	4543      	cmp	r3, r8
   bd4aa:	d102      	bne.n	bd4b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd4ac:	e7c9      	b.n	bd442 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bd4ae:	2900      	cmp	r1, #0
   bd4b0:	d1f9      	bne.n	bd4a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bd4b2:	2300      	movs	r3, #0
   bd4b4:	9301      	str	r3, [sp, #4]
   bd4b6:	7b63      	ldrb	r3, [r4, #13]
   bd4b8:	9300      	str	r3, [sp, #0]
   bd4ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bd4be:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bd4c0:	7830      	ldrb	r0, [r6, #0]
   bd4c2:	f7fd fa2f 	bl	ba924 <hal_spi_set_settings>
   bd4c6:	e7bc      	b.n	bd442 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bd4c8:	e9cd 5500 	strd	r5, r5, [sp]
   bd4cc:	462b      	mov	r3, r5
   bd4ce:	462a      	mov	r2, r5
   bd4d0:	2101      	movs	r1, #1
   bd4d2:	e7f5      	b.n	bd4c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bd4d4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bd4d4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bd4d6:	7800      	ldrb	r0, [r0, #0]
   bd4d8:	f7fd fa04 	bl	ba8e4 <hal_spi_transfer>
}
   bd4dc:	b2c0      	uxtb	r0, r0
   bd4de:	bd08      	pop	{r3, pc}

000bd4e0 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bd4e0:	4770      	bx	lr

000bd4e2 <_ZN8SPIClass15detachInterruptEv>:
   bd4e2:	4770      	bx	lr

000bd4e4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bd4e4:	b510      	push	{r4, lr}
   bd4e6:	4604      	mov	r4, r0
{
	free(buffer);
   bd4e8:	6800      	ldr	r0, [r0, #0]
   bd4ea:	f7fd fc97 	bl	bae1c <free>
}
   bd4ee:	4620      	mov	r0, r4
   bd4f0:	bd10      	pop	{r4, pc}

000bd4f2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bd4f2:	b510      	push	{r4, lr}
   bd4f4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bd4f6:	6800      	ldr	r0, [r0, #0]
   bd4f8:	b108      	cbz	r0, bd4fe <_ZN6String10invalidateEv+0xc>
   bd4fa:	f7fd fc8f 	bl	bae1c <free>
	buffer = NULL;
   bd4fe:	2300      	movs	r3, #0
	capacity = len = 0;
   bd500:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bd504:	6023      	str	r3, [r4, #0]
}
   bd506:	bd10      	pop	{r4, pc}

000bd508 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bd508:	b538      	push	{r3, r4, r5, lr}
   bd50a:	4604      	mov	r4, r0
   bd50c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bd50e:	6800      	ldr	r0, [r0, #0]
   bd510:	3101      	adds	r1, #1
   bd512:	f7fd fc8b 	bl	bae2c <realloc>
	if (newbuffer) {
   bd516:	b110      	cbz	r0, bd51e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bd518:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bd51c:	2001      	movs	r0, #1
	}
	return 0;
}
   bd51e:	bd38      	pop	{r3, r4, r5, pc}

000bd520 <_ZN6String7reserveEj>:
{
   bd520:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bd522:	6803      	ldr	r3, [r0, #0]
{
   bd524:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bd526:	b123      	cbz	r3, bd532 <_ZN6String7reserveEj+0x12>
   bd528:	6843      	ldr	r3, [r0, #4]
   bd52a:	428b      	cmp	r3, r1
   bd52c:	d301      	bcc.n	bd532 <_ZN6String7reserveEj+0x12>
   bd52e:	2001      	movs	r0, #1
}
   bd530:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bd532:	4620      	mov	r0, r4
   bd534:	f7ff ffe8 	bl	bd508 <_ZN6String12changeBufferEj>
   bd538:	2800      	cmp	r0, #0
   bd53a:	d0f9      	beq.n	bd530 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bd53c:	68a3      	ldr	r3, [r4, #8]
   bd53e:	2b00      	cmp	r3, #0
   bd540:	d1f5      	bne.n	bd52e <_ZN6String7reserveEj+0xe>
   bd542:	6822      	ldr	r2, [r4, #0]
   bd544:	7013      	strb	r3, [r2, #0]
   bd546:	e7f2      	b.n	bd52e <_ZN6String7reserveEj+0xe>

000bd548 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bd548:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd54a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bd54c:	4611      	mov	r1, r2
   bd54e:	9201      	str	r2, [sp, #4]
{
   bd550:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bd552:	f7ff ffe5 	bl	bd520 <_ZN6String7reserveEj>
   bd556:	9a01      	ldr	r2, [sp, #4]
   bd558:	b928      	cbnz	r0, bd566 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bd55a:	4620      	mov	r0, r4
   bd55c:	f7ff ffc9 	bl	bd4f2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bd560:	4620      	mov	r0, r4
   bd562:	b003      	add	sp, #12
   bd564:	bd30      	pop	{r4, r5, pc}
	len = length;
   bd566:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bd568:	4629      	mov	r1, r5
   bd56a:	6820      	ldr	r0, [r4, #0]
   bd56c:	f001 fb76 	bl	bec5c <memcpy>
	buffer[len] = 0;
   bd570:	6822      	ldr	r2, [r4, #0]
   bd572:	68a3      	ldr	r3, [r4, #8]
   bd574:	2100      	movs	r1, #0
   bd576:	54d1      	strb	r1, [r2, r3]
	return *this;
   bd578:	e7f2      	b.n	bd560 <_ZN6String4copyEPKcj+0x18>

000bd57a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bd57a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bd57c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bd57e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bd582:	4604      	mov	r4, r0
	len = 0;
   bd584:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd586:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bd588:	b141      	cbz	r1, bd59c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bd58a:	4608      	mov	r0, r1
   bd58c:	9101      	str	r1, [sp, #4]
   bd58e:	f001 fc48 	bl	bee22 <strlen>
   bd592:	9901      	ldr	r1, [sp, #4]
   bd594:	4602      	mov	r2, r0
   bd596:	4620      	mov	r0, r4
   bd598:	f7ff ffd6 	bl	bd548 <_ZN6String4copyEPKcj>
}
   bd59c:	4620      	mov	r0, r4
   bd59e:	b002      	add	sp, #8
   bd5a0:	bd10      	pop	{r4, pc}

000bd5a2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bd5a2:	b538      	push	{r3, r4, r5, lr}
   bd5a4:	4605      	mov	r5, r0
	if (buffer) {
   bd5a6:	6800      	ldr	r0, [r0, #0]
{
   bd5a8:	460c      	mov	r4, r1
	if (buffer) {
   bd5aa:	b168      	cbz	r0, bd5c8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bd5ac:	686a      	ldr	r2, [r5, #4]
   bd5ae:	688b      	ldr	r3, [r1, #8]
   bd5b0:	429a      	cmp	r2, r3
   bd5b2:	d307      	bcc.n	bd5c4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bd5b4:	6809      	ldr	r1, [r1, #0]
   bd5b6:	f001 fc0e 	bl	bedd6 <strcpy>
			len = rhs.len;
   bd5ba:	68a3      	ldr	r3, [r4, #8]
   bd5bc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bd5be:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bd5c0:	60a3      	str	r3, [r4, #8]
}
   bd5c2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bd5c4:	f7fd fc2a 	bl	bae1c <free>
	buffer = rhs.buffer;
   bd5c8:	6823      	ldr	r3, [r4, #0]
   bd5ca:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bd5cc:	6863      	ldr	r3, [r4, #4]
   bd5ce:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bd5d0:	68a3      	ldr	r3, [r4, #8]
   bd5d2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bd5d4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bd5d6:	e9c4 3300 	strd	r3, r3, [r4]
   bd5da:	e7f1      	b.n	bd5c0 <_ZN6String4moveERS_+0x1e>

000bd5dc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bd5dc:	b510      	push	{r4, lr}
	buffer = NULL;
   bd5de:	2300      	movs	r3, #0
	capacity = 0;
   bd5e0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bd5e4:	4604      	mov	r4, r0
	len = 0;
   bd5e6:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd5e8:	7303      	strb	r3, [r0, #12]
	move(rval);
   bd5ea:	f7ff ffda 	bl	bd5a2 <_ZN6String4moveERS_>
}
   bd5ee:	4620      	mov	r0, r4
   bd5f0:	bd10      	pop	{r4, pc}

000bd5f2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bd5f2:	4288      	cmp	r0, r1
{
   bd5f4:	b510      	push	{r4, lr}
   bd5f6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bd5f8:	d005      	beq.n	bd606 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bd5fa:	680b      	ldr	r3, [r1, #0]
   bd5fc:	b12b      	cbz	r3, bd60a <_ZN6StringaSERKS_+0x18>
   bd5fe:	688a      	ldr	r2, [r1, #8]
   bd600:	4619      	mov	r1, r3
   bd602:	f7ff ffa1 	bl	bd548 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd606:	4620      	mov	r0, r4
   bd608:	bd10      	pop	{r4, pc}
	else invalidate();
   bd60a:	f7ff ff72 	bl	bd4f2 <_ZN6String10invalidateEv>
   bd60e:	e7fa      	b.n	bd606 <_ZN6StringaSERKS_+0x14>

000bd610 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bd610:	b510      	push	{r4, lr}
	buffer = NULL;
   bd612:	2300      	movs	r3, #0
String::String(const String &value)
   bd614:	4604      	mov	r4, r0
	capacity = 0;
   bd616:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bd61a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd61c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bd61e:	f7ff ffe8 	bl	bd5f2 <_ZN6StringaSERKS_>
}
   bd622:	4620      	mov	r0, r4
   bd624:	bd10      	pop	{r4, pc}

000bd626 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bd626:	4288      	cmp	r0, r1
{
   bd628:	b510      	push	{r4, lr}
   bd62a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bd62c:	d001      	beq.n	bd632 <_ZN6StringaSEOS_+0xc>
   bd62e:	f7ff ffb8 	bl	bd5a2 <_ZN6String4moveERS_>
	return *this;
}
   bd632:	4620      	mov	r0, r4
   bd634:	bd10      	pop	{r4, pc}

000bd636 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bd636:	b513      	push	{r0, r1, r4, lr}
   bd638:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bd63a:	b159      	cbz	r1, bd654 <_ZN6StringaSEPKc+0x1e>
   bd63c:	4608      	mov	r0, r1
   bd63e:	9101      	str	r1, [sp, #4]
   bd640:	f001 fbef 	bl	bee22 <strlen>
   bd644:	9901      	ldr	r1, [sp, #4]
   bd646:	4602      	mov	r2, r0
   bd648:	4620      	mov	r0, r4
   bd64a:	f7ff ff7d 	bl	bd548 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd64e:	4620      	mov	r0, r4
   bd650:	b002      	add	sp, #8
   bd652:	bd10      	pop	{r4, pc}
	else invalidate();
   bd654:	f7ff ff4d 	bl	bd4f2 <_ZN6String10invalidateEv>
   bd658:	e7f9      	b.n	bd64e <_ZN6StringaSEPKc+0x18>

000bd65a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bd65a:	b570      	push	{r4, r5, r6, lr}
   bd65c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bd65e:	460e      	mov	r6, r1
   bd660:	b909      	cbnz	r1, bd666 <_ZN6String6concatEPKcj+0xc>
   bd662:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bd664:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bd666:	b16a      	cbz	r2, bd684 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bd668:	6884      	ldr	r4, [r0, #8]
   bd66a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bd66c:	4621      	mov	r1, r4
   bd66e:	f7ff ff57 	bl	bd520 <_ZN6String7reserveEj>
   bd672:	2800      	cmp	r0, #0
   bd674:	d0f5      	beq.n	bd662 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bd676:	6828      	ldr	r0, [r5, #0]
   bd678:	68ab      	ldr	r3, [r5, #8]
   bd67a:	4631      	mov	r1, r6
   bd67c:	4418      	add	r0, r3
   bd67e:	f001 fbaa 	bl	bedd6 <strcpy>
	len = newlen;
   bd682:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bd684:	2001      	movs	r0, #1
   bd686:	e7ed      	b.n	bd664 <_ZN6String6concatEPKcj+0xa>

000bd688 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bd688:	b513      	push	{r0, r1, r4, lr}
   bd68a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bd68c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bd68e:	b151      	cbz	r1, bd6a6 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bd690:	9101      	str	r1, [sp, #4]
   bd692:	f001 fbc6 	bl	bee22 <strlen>
   bd696:	9901      	ldr	r1, [sp, #4]
   bd698:	4602      	mov	r2, r0
   bd69a:	4620      	mov	r0, r4
}
   bd69c:	b002      	add	sp, #8
   bd69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bd6a2:	f7ff bfda 	b.w	bd65a <_ZN6String6concatEPKcj>
}
   bd6a6:	b002      	add	sp, #8
   bd6a8:	bd10      	pop	{r4, pc}

000bd6aa <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bd6aa:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bd6ac:	688a      	ldr	r2, [r1, #8]
   bd6ae:	6809      	ldr	r1, [r1, #0]
{
   bd6b0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bd6b2:	f7ff ffd2 	bl	bd65a <_ZN6String6concatEPKcj>
   bd6b6:	b910      	cbnz	r0, bd6be <_ZplRK15StringSumHelperRK6String+0x14>
   bd6b8:	4620      	mov	r0, r4
   bd6ba:	f7ff ff1a 	bl	bd4f2 <_ZN6String10invalidateEv>
	return a;
}
   bd6be:	4620      	mov	r0, r4
   bd6c0:	bd10      	pop	{r4, pc}

000bd6c2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bd6c2:	b513      	push	{r0, r1, r4, lr}
   bd6c4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bd6c6:	b929      	cbnz	r1, bd6d4 <_ZplRK15StringSumHelperPKc+0x12>
   bd6c8:	4620      	mov	r0, r4
   bd6ca:	f7ff ff12 	bl	bd4f2 <_ZN6String10invalidateEv>
	return a;
}
   bd6ce:	4620      	mov	r0, r4
   bd6d0:	b002      	add	sp, #8
   bd6d2:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bd6d4:	4608      	mov	r0, r1
   bd6d6:	9101      	str	r1, [sp, #4]
   bd6d8:	f001 fba3 	bl	bee22 <strlen>
   bd6dc:	9901      	ldr	r1, [sp, #4]
   bd6de:	4602      	mov	r2, r0
   bd6e0:	4620      	mov	r0, r4
   bd6e2:	f7ff ffba 	bl	bd65a <_ZN6String6concatEPKcj>
   bd6e6:	2800      	cmp	r0, #0
   bd6e8:	d0ee      	beq.n	bd6c8 <_ZplRK15StringSumHelperPKc+0x6>
   bd6ea:	e7f0      	b.n	bd6ce <_ZplRK15StringSumHelperPKc+0xc>

000bd6ec <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bd6ec:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bd6ee:	6882      	ldr	r2, [r0, #8]
   bd6f0:	b93a      	cbnz	r2, bd702 <_ZNK6String6equalsEPKc+0x16>
   bd6f2:	b121      	cbz	r1, bd6fe <_ZNK6String6equalsEPKc+0x12>
   bd6f4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bd6f6:	fab0 f080 	clz	r0, r0
   bd6fa:	0940      	lsrs	r0, r0, #5
   bd6fc:	e000      	b.n	bd700 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bd6fe:	2001      	movs	r0, #1
}
   bd700:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bd702:	6800      	ldr	r0, [r0, #0]
   bd704:	b909      	cbnz	r1, bd70a <_ZNK6String6equalsEPKc+0x1e>
   bd706:	7800      	ldrb	r0, [r0, #0]
   bd708:	e7f5      	b.n	bd6f6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bd70a:	f001 fb5a 	bl	bedc2 <strcmp>
   bd70e:	e7f2      	b.n	bd6f6 <_ZNK6String6equalsEPKc+0xa>

000bd710 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bd710:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bd712:	6883      	ldr	r3, [r0, #8]
   bd714:	688a      	ldr	r2, [r1, #8]
   bd716:	4293      	cmp	r3, r2
   bd718:	d30b      	bcc.n	bd732 <_ZNK6String8endsWithERKS_+0x22>
   bd71a:	6800      	ldr	r0, [r0, #0]
   bd71c:	b140      	cbz	r0, bd730 <_ZNK6String8endsWithERKS_+0x20>
   bd71e:	6809      	ldr	r1, [r1, #0]
   bd720:	b149      	cbz	r1, bd736 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bd722:	1a9b      	subs	r3, r3, r2
   bd724:	4418      	add	r0, r3
   bd726:	f001 fb4c 	bl	bedc2 <strcmp>
   bd72a:	fab0 f080 	clz	r0, r0
   bd72e:	0940      	lsrs	r0, r0, #5
}
   bd730:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bd732:	2000      	movs	r0, #0
   bd734:	e7fc      	b.n	bd730 <_ZNK6String8endsWithERKS_+0x20>
   bd736:	4608      	mov	r0, r1
   bd738:	e7fa      	b.n	bd730 <_ZNK6String8endsWithERKS_+0x20>
	...

000bd73c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bd73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bd73e:	429a      	cmp	r2, r3
{
   bd740:	460f      	mov	r7, r1
   bd742:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bd744:	490c      	ldr	r1, [pc, #48]	; (bd778 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bd746:	bf88      	it	hi
   bd748:	4613      	movhi	r3, r2
{
   bd74a:	4614      	mov	r4, r2
   bd74c:	4606      	mov	r6, r0
	if (left > right) {
   bd74e:	bf84      	itt	hi
   bd750:	462c      	movhi	r4, r5
   bd752:	461d      	movhi	r5, r3
	String out;
   bd754:	f7ff ff11 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bd758:	68bb      	ldr	r3, [r7, #8]
   bd75a:	42a3      	cmp	r3, r4
   bd75c:	d30a      	bcc.n	bd774 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bd75e:	6839      	ldr	r1, [r7, #0]
   bd760:	42ab      	cmp	r3, r5
   bd762:	bf94      	ite	ls
   bd764:	ebc4 0203 	rsbls	r2, r4, r3
   bd768:	ebc4 0205 	rsbhi	r2, r4, r5
   bd76c:	4421      	add	r1, r4
   bd76e:	4630      	mov	r0, r6
   bd770:	f7ff feea 	bl	bd548 <_ZN6String4copyEPKcj>
	return out;
}
   bd774:	4630      	mov	r0, r6
   bd776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd778:	000c07d9 	.word	0x000c07d9

000bd77c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bd77c:	b40e      	push	{r1, r2, r3}
   bd77e:	b570      	push	{r4, r5, r6, lr}
   bd780:	b087      	sub	sp, #28
   bd782:	ad0b      	add	r5, sp, #44	; 0x2c
   bd784:	4604      	mov	r4, r0
   bd786:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd78a:	9201      	str	r2, [sp, #4]
   bd78c:	462b      	mov	r3, r5
   bd78e:	2105      	movs	r1, #5
   bd790:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bd792:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd794:	f7fd fb6a 	bl	bae6c <vsnprintf>
    va_end(marker);

    String result;
   bd798:	490b      	ldr	r1, [pc, #44]	; (bd7c8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd79a:	4606      	mov	r6, r0
    String result;
   bd79c:	4620      	mov	r0, r4
   bd79e:	f7ff feec 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bd7a2:	4631      	mov	r1, r6
   bd7a4:	4620      	mov	r0, r4
   bd7a6:	f7ff febb 	bl	bd520 <_ZN6String7reserveEj>
    if (result.buffer) {
   bd7aa:	6820      	ldr	r0, [r4, #0]
   bd7ac:	b130      	cbz	r0, bd7bc <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bd7ae:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bd7b0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bd7b2:	462b      	mov	r3, r5
   bd7b4:	1c71      	adds	r1, r6, #1
   bd7b6:	f7fd fb59 	bl	bae6c <vsnprintf>
        va_end(marker);
        result.len = n;
   bd7ba:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bd7bc:	4620      	mov	r0, r4
   bd7be:	b007      	add	sp, #28
   bd7c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bd7c4:	b003      	add	sp, #12
   bd7c6:	4770      	bx	lr
   bd7c8:	000c07d9 	.word	0x000c07d9

000bd7cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bd7cc:	b510      	push	{r4, lr}
   bd7ce:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bd7d0:	6800      	ldr	r0, [r0, #0]
   bd7d2:	b118      	cbz	r0, bd7dc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bd7d4:	f7fd fb22 	bl	bae1c <free>
            wakeupSource_ = nullptr;
   bd7d8:	2300      	movs	r3, #0
   bd7da:	6023      	str	r3, [r4, #0]
        }
    }
   bd7dc:	bd10      	pop	{r4, pc}

000bd7de <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bd7de:	b538      	push	{r3, r4, r5, lr}
   bd7e0:	460c      	mov	r4, r1
   bd7e2:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bd7e4:	f7ff fff2 	bl	bd7cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bd7e8:	b154      	cbz	r4, bd800 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bd7ea:	8820      	ldrh	r0, [r4, #0]
   bd7ec:	f7fd fb0e 	bl	bae0c <malloc>
   bd7f0:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bd7f2:	b128      	cbz	r0, bd800 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bd7f4:	8822      	ldrh	r2, [r4, #0]
   bd7f6:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bd7f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bd7fc:	f001 ba2e 	b.w	bec5c <memcpy>
    }
   bd800:	bd38      	pop	{r3, r4, r5, pc}

000bd802 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bd802:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bd804:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bd808:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bd80a:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bd80e:	f8c0 3006 	str.w	r3, [r0, #6]
   bd812:	894b      	ldrh	r3, [r1, #10]
   bd814:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bd816:	460c      	mov	r4, r1
   bd818:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bd81a:	f7ff ffd7 	bl	bd7cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bd81e:	6823      	ldr	r3, [r4, #0]
   bd820:	b113      	cbz	r3, bd828 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bd822:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bd824:	2300      	movs	r3, #0
   bd826:	6023      	str	r3, [r4, #0]
    }
   bd828:	bd38      	pop	{r3, r4, r5, pc}

000bd82a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bd82a:	b507      	push	{r0, r1, r2, lr}
   bd82c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bd82e:	2100      	movs	r1, #0
{
   bd830:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bd832:	9100      	str	r1, [sp, #0]
   bd834:	2001      	movs	r0, #1
   bd836:	218c      	movs	r1, #140	; 0x8c
   bd838:	f7fd fa26 	bl	bac88 <system_reset>
}
   bd83c:	b003      	add	sp, #12
   bd83e:	f85d fb04 	ldr.w	pc, [sp], #4

000bd842 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bd842:	4601      	mov	r1, r0
    reset(0, flags);
   bd844:	2000      	movs	r0, #0
   bd846:	f7ff bff0 	b.w	bd82a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bd84a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bd84a:	2000      	movs	r0, #0
   bd84c:	f7ff bff9 	b.w	bd842 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bd850 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bd850:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd852:	4d2b      	ldr	r5, [pc, #172]	; (bd900 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bd854:	7d0b      	ldrb	r3, [r1, #20]
   bd856:	4604      	mov	r4, r0
   bd858:	b08b      	sub	sp, #44	; 0x2c
   bd85a:	4608      	mov	r0, r1
   bd85c:	1daf      	adds	r7, r5, #6
   bd85e:	2b00      	cmp	r3, #0
   bd860:	d036      	beq.n	bd8d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bd862:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bd864:	791b      	ldrb	r3, [r3, #4]
   bd866:	2b00      	cmp	r3, #0
   bd868:	d032      	beq.n	bd8d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bd86a:	4b26      	ldr	r3, [pc, #152]	; (bd904 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bd86c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bd86e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bd870:	a902      	add	r1, sp, #8
   bd872:	3004      	adds	r0, #4
   bd874:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bd878:	f7fd f9fc 	bl	bac74 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bd87c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bd880:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bd884:	b200      	sxth	r0, r0
   bd886:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bd88a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bd88e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bd890:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bd892:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bd894:	4628      	mov	r0, r5
   bd896:	f7ff ffa2 	bl	bd7de <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bd89a:	a802      	add	r0, sp, #8
   bd89c:	f7ff ff96 	bl	bd7cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bd8a0:	2300      	movs	r3, #0
   bd8a2:	6023      	str	r3, [r4, #0]
   bd8a4:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bd8a6:	71a3      	strb	r3, [r4, #6]
   bd8a8:	8123      	strh	r3, [r4, #8]
   bd8aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bd8ae:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bd8b0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bd8b4:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bd8b6:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bd8ba:	f8c4 3006 	str.w	r3, [r4, #6]
   bd8be:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bd8c0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bd8c2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bd8c4:	4620      	mov	r0, r4
   bd8c6:	f7ff ff8a 	bl	bd7de <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bd8ca:	4620      	mov	r0, r4
   bd8cc:	b00b      	add	sp, #44	; 0x2c
   bd8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bd8d0:	2600      	movs	r6, #0
   bd8d2:	2320      	movs	r3, #32
   bd8d4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bd8d8:	4b0b      	ldr	r3, [pc, #44]	; (bd908 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bd8da:	9300      	str	r3, [sp, #0]
   bd8dc:	aa02      	add	r2, sp, #8
   bd8de:	4633      	mov	r3, r6
   bd8e0:	490a      	ldr	r1, [pc, #40]	; (bd90c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bd8e2:	2032      	movs	r0, #50	; 0x32
   bd8e4:	f7fd f936 	bl	bab54 <log_message>
            : wakeupSource_(nullptr),
   bd8e8:	4b06      	ldr	r3, [pc, #24]	; (bd904 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bd8ea:	4805      	ldr	r0, [pc, #20]	; (bd900 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bd8ec:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bd8ee:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bd8f2:	a902      	add	r1, sp, #8
   bd8f4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bd8f8:	f7ff ff83 	bl	bd802 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bd8fc:	e7cd      	b.n	bd89a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bd8fe:	bf00      	nop
   bd900:	2003e69c 	.word	0x2003e69c
   bd904:	ffff0000 	.word	0xffff0000
   bd908:	000c08bb 	.word	0x000c08bb
   bd90c:	000c08b4 	.word	0x000c08b4

000bd910 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bd910:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bd912:	2420      	movs	r4, #32
{
   bd914:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bd916:	4622      	mov	r2, r4
   bd918:	2100      	movs	r1, #0
   bd91a:	4668      	mov	r0, sp
   bd91c:	f001 f9c6 	bl	becac <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bd920:	2100      	movs	r1, #0
   bd922:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bd924:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bd928:	f7fc febc 	bl	ba6a4 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bd92c:	9801      	ldr	r0, [sp, #4]
   bd92e:	b008      	add	sp, #32
   bd930:	bd10      	pop	{r4, pc}
	...

000bd934 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bd934:	4b05      	ldr	r3, [pc, #20]	; (bd94c <_GLOBAL__sub_I_System+0x18>)
   bd936:	2202      	movs	r2, #2
   bd938:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bd93a:	4b05      	ldr	r3, [pc, #20]	; (bd950 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bd93c:	4a05      	ldr	r2, [pc, #20]	; (bd954 <_GLOBAL__sub_I_System+0x20>)
   bd93e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bd940:	2000      	movs	r0, #0
   bd942:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bd946:	f7fd b937 	b.w	babb8 <set_system_mode>
   bd94a:	bf00      	nop
   bd94c:	2003e6a8 	.word	0x2003e6a8
   bd950:	2003e69c 	.word	0x2003e69c
   bd954:	ffff0000 	.word	0xffff0000

000bd958 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bd958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bd95c:	4a15      	ldr	r2, [pc, #84]	; (bd9b4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bd95e:	f8df 8060 	ldr.w	r8, [pc, #96]	; bd9c0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bd962:	e9d2 6300 	ldrd	r6, r3, [r2]
   bd966:	1980      	adds	r0, r0, r6
   bd968:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bd96c:	4b12      	ldr	r3, [pc, #72]	; (bd9b8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bd96e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bd972:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bd976:	1986      	adds	r6, r0, r6
   bd978:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bd97c:	42bb      	cmp	r3, r7
   bd97e:	bf08      	it	eq
   bd980:	42b2      	cmpeq	r2, r6
{
   bd982:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bd984:	d013      	beq.n	bd9ae <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bd986:	a903      	add	r1, sp, #12
   bd988:	4668      	mov	r0, sp
   bd98a:	e9cd 6700 	strd	r6, r7, [sp]
   bd98e:	f7fd faa5 	bl	baedc <localtime_r>
	calendar_time.tm_year += 1900;
   bd992:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd994:	4d09      	ldr	r5, [pc, #36]	; (bd9bc <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bd996:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd99a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bd99c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd99e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd9a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bd9a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd9a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bd9a6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd9aa:	6823      	ldr	r3, [r4, #0]
   bd9ac:	602b      	str	r3, [r5, #0]
    }
}
   bd9ae:	b00c      	add	sp, #48	; 0x30
   bd9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd9b4:	2003e6e0 	.word	0x2003e6e0
   bd9b8:	2003e6d8 	.word	0x2003e6d8
   bd9bc:	2003e6b4 	.word	0x2003e6b4
   bd9c0:	2003e6e8 	.word	0x2003e6e8

000bd9c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bd9c4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd9c6:	2000      	movs	r0, #0
   bd9c8:	f7fd f998 	bl	bacfc <spark_sync_time_pending>
   bd9cc:	b128      	cbz	r0, bd9da <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd9ce:	f7fd f985 	bl	bacdc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd9d2:	f080 0001 	eor.w	r0, r0, #1
   bd9d6:	b2c0      	uxtb	r0, r0
    }
   bd9d8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd9da:	2001      	movs	r0, #1
   bd9dc:	e7fc      	b.n	bd9d8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bd9e0 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bd9e0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bd9e2:	f7ff ffb9 	bl	bd958 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bd9e6:	4b01      	ldr	r3, [pc, #4]	; (bd9ec <_ZN9TimeClass4hourEx+0xc>)
   bd9e8:	6898      	ldr	r0, [r3, #8]
   bd9ea:	bd08      	pop	{r3, pc}
   bd9ec:	2003e6b4 	.word	0x2003e6b4

000bd9f0 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bd9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd9f2:	4602      	mov	r2, r0
   bd9f4:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bd9f6:	4668      	mov	r0, sp
    struct timeval tv = {
   bd9f8:	2100      	movs	r1, #0
    };
   bd9fa:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bd9fe:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bda02:	f7fc fe97 	bl	ba734 <hal_rtc_set_time>
   bda06:	4602      	mov	r2, r0
   bda08:	b910      	cbnz	r0, bda10 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bda0a:	4601      	mov	r1, r0
   bda0c:	f7fd f90c 	bl	bac28 <system_notify_time_changed>
    }
}
   bda10:	b005      	add	sp, #20
   bda12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bda18 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bda18:	b530      	push	{r4, r5, lr}
   bda1a:	b093      	sub	sp, #76	; 0x4c
   bda1c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bda20:	4b19      	ldr	r3, [pc, #100]	; (bda88 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bda22:	4604      	mov	r4, r0
    t += time_zone_cache;
   bda24:	e9d3 1000 	ldrd	r1, r0, [r3]
   bda28:	9b01      	ldr	r3, [sp, #4]
   bda2a:	1852      	adds	r2, r2, r1
   bda2c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bda30:	4816      	ldr	r0, [pc, #88]	; (bda8c <_ZN9TimeClass7timeStrEx+0x74>)
   bda32:	e9d0 1000 	ldrd	r1, r0, [r0]
   bda36:	1852      	adds	r2, r2, r1
   bda38:	eb43 0300 	adc.w	r3, r3, r0
   bda3c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bda40:	2224      	movs	r2, #36	; 0x24
   bda42:	eb0d 0002 	add.w	r0, sp, r2
   bda46:	2100      	movs	r1, #0
   bda48:	f001 f930 	bl	becac <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bda4c:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bda4e:	a909      	add	r1, sp, #36	; 0x24
   bda50:	4668      	mov	r0, sp
   bda52:	f7fd fa43 	bl	baedc <localtime_r>
    char ascstr[26] = {};
   bda56:	2216      	movs	r2, #22
   bda58:	4629      	mov	r1, r5
   bda5a:	a803      	add	r0, sp, #12
   bda5c:	9502      	str	r5, [sp, #8]
   bda5e:	f001 f925 	bl	becac <memset>
    asctime_r(&calendar_time, ascstr);
   bda62:	a902      	add	r1, sp, #8
   bda64:	a809      	add	r0, sp, #36	; 0x24
   bda66:	f001 f8a7 	bl	bebb8 <asctime_r>
    int len = strlen(ascstr);
   bda6a:	a802      	add	r0, sp, #8
   bda6c:	f001 f9d9 	bl	bee22 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bda70:	ab12      	add	r3, sp, #72	; 0x48
   bda72:	4418      	add	r0, r3
    return String(ascstr);
   bda74:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bda76:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bda7a:	4620      	mov	r0, r4
   bda7c:	f7ff fd7d 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bda80:	4620      	mov	r0, r4
   bda82:	b013      	add	sp, #76	; 0x4c
   bda84:	bd30      	pop	{r4, r5, pc}
   bda86:	bf00      	nop
   bda88:	2003e6e0 	.word	0x2003e6e0
   bda8c:	2003e6d8 	.word	0x2003e6d8

000bda90 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bda90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bda94:	b0a4      	sub	sp, #144	; 0x90
   bda96:	4607      	mov	r7, r0
   bda98:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bda9a:	a814      	add	r0, sp, #80	; 0x50
{
   bda9c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bda9e:	223f      	movs	r2, #63	; 0x3f
{
   bdaa0:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bdaa2:	f001 f9da 	bl	bee5a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bdaa6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bdaa8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bdaaa:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bdaae:	f001 f9b8 	bl	bee22 <strlen>
   bdab2:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bdab4:	bb4c      	cbnz	r4, bdb0a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bdab6:	4929      	ldr	r1, [pc, #164]	; (bdb5c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bdab8:	a803      	add	r0, sp, #12
   bdaba:	f001 f98c 	bl	bedd6 <strcpy>
   bdabe:	ac14      	add	r4, sp, #80	; 0x50
{
   bdac0:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bdac2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bdac6:	45b1      	cmp	r9, r6
   bdac8:	d934      	bls.n	bdb34 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bdaca:	7823      	ldrb	r3, [r4, #0]
   bdacc:	2b25      	cmp	r3, #37	; 0x25
   bdace:	f106 0a01 	add.w	sl, r6, #1
   bdad2:	d117      	bne.n	bdb04 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bdad4:	7863      	ldrb	r3, [r4, #1]
   bdad6:	2b7a      	cmp	r3, #122	; 0x7a
   bdad8:	d114      	bne.n	bdb04 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bdada:	a803      	add	r0, sp, #12
   bdadc:	f001 f9a1 	bl	bee22 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bdae0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bdae2:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bdae4:	1830      	adds	r0, r6, r0
   bdae6:	4418      	add	r0, r3
   bdae8:	eba9 0206 	sub.w	r2, r9, r6
   bdaec:	1ca1      	adds	r1, r4, #2
   bdaee:	f001 f8b5 	bl	bec5c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bdaf2:	462a      	mov	r2, r5
   bdaf4:	a903      	add	r1, sp, #12
   bdaf6:	4620      	mov	r0, r4
   bdaf8:	f001 f8b0 	bl	bec5c <memcpy>
            len = strlen(format_str);
   bdafc:	a814      	add	r0, sp, #80	; 0x50
   bdafe:	f001 f990 	bl	bee22 <strlen>
   bdb02:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bdb04:	3401      	adds	r4, #1
   bdb06:	4656      	mov	r6, sl
   bdb08:	e7db      	b.n	bdac2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bdb0a:	233c      	movs	r3, #60	; 0x3c
   bdb0c:	fb94 f2f3 	sdiv	r2, r4, r3
   bdb10:	2a00      	cmp	r2, #0
   bdb12:	bfb8      	it	lt
   bdb14:	4252      	neglt	r2, r2
   bdb16:	fbb2 f1f3 	udiv	r1, r2, r3
   bdb1a:	fb03 2211 	mls	r2, r3, r1, r2
   bdb1e:	9200      	str	r2, [sp, #0]
   bdb20:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bdb24:	4a0e      	ldr	r2, [pc, #56]	; (bdb60 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bdb26:	fb94 f3f3 	sdiv	r3, r4, r3
   bdb2a:	2110      	movs	r1, #16
   bdb2c:	a803      	add	r0, sp, #12
   bdb2e:	f7fd f995 	bl	bae5c <snprintf>
   bdb32:	e7c4      	b.n	bdabe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bdb34:	2100      	movs	r1, #0
   bdb36:	222e      	movs	r2, #46	; 0x2e
   bdb38:	a808      	add	r0, sp, #32
   bdb3a:	9107      	str	r1, [sp, #28]
   bdb3c:	f001 f8b6 	bl	becac <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bdb40:	4643      	mov	r3, r8
   bdb42:	aa14      	add	r2, sp, #80	; 0x50
   bdb44:	2132      	movs	r1, #50	; 0x32
   bdb46:	a807      	add	r0, sp, #28
   bdb48:	f7fd f9c0 	bl	baecc <strftime>
    return String(buf);
   bdb4c:	a907      	add	r1, sp, #28
   bdb4e:	4638      	mov	r0, r7
   bdb50:	f7ff fd13 	bl	bd57a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bdb54:	4638      	mov	r0, r7
   bdb56:	b024      	add	sp, #144	; 0x90
   bdb58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdb5c:	000bfeb7 	.word	0x000bfeb7
   bdb60:	000bfeb9 	.word	0x000bfeb9

000bdb64 <_ZN9TimeClass6formatExPKc>:
{
   bdb64:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdb66:	b08d      	sub	sp, #52	; 0x34
   bdb68:	e9cd 2300 	strd	r2, r3, [sp]
   bdb6c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bdb6e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bdb70:	b915      	cbnz	r5, bdb78 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bdb72:	4b19      	ldr	r3, [pc, #100]	; (bdbd8 <_ZN9TimeClass6formatExPKc+0x74>)
   bdb74:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bdb76:	b12d      	cbz	r5, bdb84 <_ZN9TimeClass6formatExPKc+0x20>
   bdb78:	4b18      	ldr	r3, [pc, #96]	; (bdbdc <_ZN9TimeClass6formatExPKc+0x78>)
   bdb7a:	4628      	mov	r0, r5
   bdb7c:	6819      	ldr	r1, [r3, #0]
   bdb7e:	f001 f920 	bl	bedc2 <strcmp>
   bdb82:	b938      	cbnz	r0, bdb94 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bdb84:	e9dd 2300 	ldrd	r2, r3, [sp]
   bdb88:	4620      	mov	r0, r4
   bdb8a:	f7ff ff45 	bl	bda18 <_ZN9TimeClass7timeStrEx>
}
   bdb8e:	4620      	mov	r0, r4
   bdb90:	b00d      	add	sp, #52	; 0x34
   bdb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bdb94:	4e12      	ldr	r6, [pc, #72]	; (bdbe0 <_ZN9TimeClass6formatExPKc+0x7c>)
   bdb96:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bdb98:	4f12      	ldr	r7, [pc, #72]	; (bdbe4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bdb9a:	e9d6 3200 	ldrd	r3, r2, [r6]
   bdb9e:	185b      	adds	r3, r3, r1
   bdba0:	9901      	ldr	r1, [sp, #4]
   bdba2:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bdba6:	e9d7 0100 	ldrd	r0, r1, [r7]
   bdbaa:	181b      	adds	r3, r3, r0
   bdbac:	eb42 0201 	adc.w	r2, r2, r1
   bdbb0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bdbb4:	2100      	movs	r1, #0
   bdbb6:	2224      	movs	r2, #36	; 0x24
   bdbb8:	a803      	add	r0, sp, #12
   bdbba:	f001 f877 	bl	becac <memset>
    localtime_r(&t, &calendar_time);
   bdbbe:	a903      	add	r1, sp, #12
   bdbc0:	4668      	mov	r0, sp
   bdbc2:	f7fd f98b 	bl	baedc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bdbc6:	6832      	ldr	r2, [r6, #0]
   bdbc8:	683b      	ldr	r3, [r7, #0]
   bdbca:	a903      	add	r1, sp, #12
   bdbcc:	4413      	add	r3, r2
   bdbce:	4620      	mov	r0, r4
   bdbd0:	462a      	mov	r2, r5
   bdbd2:	f7ff ff5d 	bl	bda90 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bdbd6:	e7da      	b.n	bdb8e <_ZN9TimeClass6formatExPKc+0x2a>
   bdbd8:	2003e6b0 	.word	0x2003e6b0
   bdbdc:	2003de84 	.word	0x2003de84
   bdbe0:	2003e6e0 	.word	0x2003e6e0
   bdbe4:	2003e6d8 	.word	0x2003e6d8

000bdbe8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bdbe8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bdbea:	2000      	movs	r0, #0
   bdbec:	f7fc fd8a 	bl	ba704 <hal_rtc_time_is_valid>
    if (rtcstate)
   bdbf0:	4604      	mov	r4, r0
   bdbf2:	b9a0      	cbnz	r0, bdc1e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bdbf4:	f7fc ffd8 	bl	baba8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bdbf8:	2801      	cmp	r0, #1
   bdbfa:	d110      	bne.n	bdc1e <_ZN9TimeClass7isValidEv+0x36>
   bdbfc:	4620      	mov	r0, r4
   bdbfe:	f7fd f80b 	bl	bac18 <system_thread_get_state>
   bdc02:	b960      	cbnz	r0, bdc1e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bdc04:	f7ff fede 	bl	bd9c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bdc08:	b910      	cbnz	r0, bdc10 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bdc0a:	f7fd f857 	bl	bacbc <spark_process>
        while (_while() && !_condition()) {
   bdc0e:	e7f9      	b.n	bdc04 <_ZN9TimeClass7isValidEv+0x1c>
   bdc10:	f7ff fed8 	bl	bd9c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bdc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bdc18:	2000      	movs	r0, #0
   bdc1a:	f7fc bd73 	b.w	ba704 <hal_rtc_time_is_valid>
}
   bdc1e:	4620      	mov	r0, r4
   bdc20:	bd10      	pop	{r4, pc}

000bdc22 <_ZN9TimeClass3nowEv>:
{
   bdc22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bdc24:	f7ff ffe0 	bl	bdbe8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bdc28:	2210      	movs	r2, #16
   bdc2a:	2100      	movs	r1, #0
   bdc2c:	4668      	mov	r0, sp
   bdc2e:	f001 f83d 	bl	becac <memset>
    hal_rtc_get_time(&tv, nullptr);
   bdc32:	2100      	movs	r1, #0
   bdc34:	4668      	mov	r0, sp
   bdc36:	f7fc fd75 	bl	ba724 <hal_rtc_get_time>
}
   bdc3a:	9800      	ldr	r0, [sp, #0]
   bdc3c:	b005      	add	sp, #20
   bdc3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bdc44 <_ZN9TimeClass4hourEv>:
{
   bdc44:	b508      	push	{r3, lr}
	return hour(now());
   bdc46:	f7ff ffec 	bl	bdc22 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bdc4a:	17c1      	asrs	r1, r0, #31
   bdc4c:	f7ff fe84 	bl	bd958 <_ZL22Refresh_UnixTime_Cachex>
}
   bdc50:	4b01      	ldr	r3, [pc, #4]	; (bdc58 <_ZN9TimeClass4hourEv+0x14>)
   bdc52:	6898      	ldr	r0, [r3, #8]
   bdc54:	bd08      	pop	{r3, pc}
   bdc56:	bf00      	nop
   bdc58:	2003e6b4 	.word	0x2003e6b4

000bdc5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bdc5c:	4b02      	ldr	r3, [pc, #8]	; (bdc68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bdc5e:	681a      	ldr	r2, [r3, #0]
   bdc60:	4b02      	ldr	r3, [pc, #8]	; (bdc6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bdc62:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bdc64:	4770      	bx	lr
   bdc66:	bf00      	nop
   bdc68:	2003de84 	.word	0x2003de84
   bdc6c:	2003e6b0 	.word	0x2003e6b0

000bdc70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bdc70:	4770      	bx	lr

000bdc72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bdc72:	7441      	strb	r1, [r0, #17]
}
   bdc74:	4770      	bx	lr

000bdc76 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bdc76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bdc78:	7c00      	ldrb	r0, [r0, #16]
   bdc7a:	f7fc ff03 	bl	baa84 <hal_usart_available_data_for_write>
}
   bdc7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdc82:	bd08      	pop	{r3, pc}

000bdc84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bdc84:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bdc86:	7c00      	ldrb	r0, [r0, #16]
   bdc88:	f7fc fed4 	bl	baa34 <hal_usart_available>
}
   bdc8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdc90:	bd08      	pop	{r3, pc}

000bdc92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bdc92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bdc94:	7c00      	ldrb	r0, [r0, #16]
   bdc96:	f7fc fedd 	bl	baa54 <hal_usart_peek>
}
   bdc9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdc9e:	bd08      	pop	{r3, pc}

000bdca0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bdca0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bdca2:	7c00      	ldrb	r0, [r0, #16]
   bdca4:	f7fc fece 	bl	baa44 <hal_usart_read>
}
   bdca8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdcac:	bd08      	pop	{r3, pc}

000bdcae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bdcae:	7c00      	ldrb	r0, [r0, #16]
   bdcb0:	f7fc bed8 	b.w	baa64 <hal_usart_flush>

000bdcb4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bdcb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdcb6:	7c45      	ldrb	r5, [r0, #17]
{
   bdcb8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdcba:	b12d      	cbz	r5, bdcc8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bdcbc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bdcbe:	b003      	add	sp, #12
   bdcc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bdcc4:	f7fc beae 	b.w	baa24 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdcc8:	7c00      	ldrb	r0, [r0, #16]
   bdcca:	9101      	str	r1, [sp, #4]
   bdccc:	f7fc feda 	bl	baa84 <hal_usart_available_data_for_write>
   bdcd0:	2800      	cmp	r0, #0
   bdcd2:	9901      	ldr	r1, [sp, #4]
   bdcd4:	dcf2      	bgt.n	bdcbc <_ZN11USARTSerial5writeEh+0x8>
}
   bdcd6:	4628      	mov	r0, r5
   bdcd8:	b003      	add	sp, #12
   bdcda:	bd30      	pop	{r4, r5, pc}

000bdcdc <_ZN11USARTSerialD0Ev>:
   bdcdc:	b510      	push	{r4, lr}
   bdcde:	2114      	movs	r1, #20
   bdce0:	4604      	mov	r4, r0
   bdce2:	f7f6 f9dc 	bl	b409e <_ZdlPvj>
   bdce6:	4620      	mov	r0, r4
   bdce8:	bd10      	pop	{r4, pc}
	...

000bdcec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bdcec:	b510      	push	{r4, lr}
   bdcee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdcf2:	4604      	mov	r4, r0
   bdcf4:	4608      	mov	r0, r1
   bdcf6:	4611      	mov	r1, r2
   bdcf8:	2200      	movs	r2, #0
   bdcfa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bdcfe:	4b04      	ldr	r3, [pc, #16]	; (bdd10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bdd00:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bdd02:	2301      	movs	r3, #1
  _serial = serial;
   bdd04:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bdd06:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bdd08:	f7fc fecc 	bl	baaa4 <hal_usart_init_ex>
}
   bdd0c:	4620      	mov	r0, r4
   bdd0e:	bd10      	pop	{r4, pc}
   bdd10:	000c0908 	.word	0x000c0908

000bdd14 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bdd14:	7c00      	ldrb	r0, [r0, #16]
   bdd16:	2300      	movs	r3, #0
   bdd18:	f7fc bebc 	b.w	baa94 <hal_usart_begin_config>

000bdd1c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bdd1c:	2200      	movs	r2, #0
   bdd1e:	f7ff bff9 	b.w	bdd14 <_ZN11USARTSerial5beginEmm>

000bdd22 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bdd22:	7c00      	ldrb	r0, [r0, #16]
   bdd24:	f7fc be76 	b.w	baa14 <hal_usart_end>

000bdd28 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bdd28:	7441      	strb	r1, [r0, #17]
}
   bdd2a:	4770      	bx	lr

000bdd2c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdd2c:	4770      	bx	lr

000bdd2e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bdd2e:	4770      	bx	lr

000bdd30 <_ZN9USBSerial4readEv>:
{
   bdd30:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bdd32:	2100      	movs	r1, #0
   bdd34:	7c00      	ldrb	r0, [r0, #16]
   bdd36:	f7fc fee5 	bl	bab04 <HAL_USB_USART_Receive_Data>
}
   bdd3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdd3e:	bd08      	pop	{r3, pc}

000bdd40 <_ZN9USBSerial4peekEv>:
{
   bdd40:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bdd42:	2101      	movs	r1, #1
   bdd44:	7c00      	ldrb	r0, [r0, #16]
   bdd46:	f7fc fedd 	bl	bab04 <HAL_USB_USART_Receive_Data>
}
   bdd4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdd4e:	bd08      	pop	{r3, pc}

000bdd50 <_ZN9USBSerial17availableForWriteEv>:
{
   bdd50:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bdd52:	7c00      	ldrb	r0, [r0, #16]
   bdd54:	f7fc fece 	bl	baaf4 <HAL_USB_USART_Available_Data_For_Write>
}
   bdd58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdd5c:	bd08      	pop	{r3, pc}

000bdd5e <_ZN9USBSerial9availableEv>:
{
   bdd5e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bdd60:	7c00      	ldrb	r0, [r0, #16]
   bdd62:	f7fc febf 	bl	baae4 <HAL_USB_USART_Available_Data>
}
   bdd66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdd6a:	bd08      	pop	{r3, pc}

000bdd6c <_ZN9USBSerial5writeEh>:
{
   bdd6c:	b513      	push	{r0, r1, r4, lr}
   bdd6e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bdd70:	7c00      	ldrb	r0, [r0, #16]
{
   bdd72:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bdd74:	f7fc febe 	bl	baaf4 <HAL_USB_USART_Available_Data_For_Write>
   bdd78:	2800      	cmp	r0, #0
   bdd7a:	9901      	ldr	r1, [sp, #4]
   bdd7c:	dc01      	bgt.n	bdd82 <_ZN9USBSerial5writeEh+0x16>
   bdd7e:	7c60      	ldrb	r0, [r4, #17]
   bdd80:	b120      	cbz	r0, bdd8c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bdd82:	7c20      	ldrb	r0, [r4, #16]
   bdd84:	f7fc fec6 	bl	bab14 <HAL_USB_USART_Send_Data>
   bdd88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bdd8c:	b002      	add	sp, #8
   bdd8e:	bd10      	pop	{r4, pc}

000bdd90 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bdd90:	7c00      	ldrb	r0, [r0, #16]
   bdd92:	f7fc bec7 	b.w	bab24 <HAL_USB_USART_Flush_Data>

000bdd96 <_ZN9USBSerialD0Ev>:
   bdd96:	b510      	push	{r4, lr}
   bdd98:	2114      	movs	r1, #20
   bdd9a:	4604      	mov	r4, r0
   bdd9c:	f7f6 f97f 	bl	b409e <_ZdlPvj>
   bdda0:	4620      	mov	r0, r4
   bdda2:	bd10      	pop	{r4, pc}

000bdda4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bdda4:	b510      	push	{r4, lr}
   bdda6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bddaa:	4604      	mov	r4, r0
   bddac:	4608      	mov	r0, r1
   bddae:	2100      	movs	r1, #0
   bddb0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bddb4:	4b04      	ldr	r3, [pc, #16]	; (bddc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bddb6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bddb8:	2301      	movs	r3, #1
  _serial = serial;
   bddba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bddbc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bddbe:	4611      	mov	r1, r2
   bddc0:	f7fc fe78 	bl	baab4 <HAL_USB_USART_Init>
}
   bddc4:	4620      	mov	r0, r4
   bddc6:	bd10      	pop	{r4, pc}
   bddc8:	000c0938 	.word	0x000c0938

000bddcc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bddcc:	7c00      	ldrb	r0, [r0, #16]
   bddce:	2200      	movs	r2, #0
   bddd0:	f7fc be78 	b.w	baac4 <HAL_USB_USART_Begin>

000bddd4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bddd4:	7c00      	ldrb	r0, [r0, #16]
   bddd6:	f7fc be7d 	b.w	baad4 <HAL_USB_USART_End>

000bddda <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bddda:	7c00      	ldrb	r0, [r0, #16]
   bdddc:	f7fc beaa 	b.w	bab34 <HAL_USB_USART_Is_Connected>

000bdde0 <_Z19acquireSerialBufferv>:
{
   bdde0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bdde2:	2214      	movs	r2, #20
{
   bdde4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bdde6:	2100      	movs	r1, #0
   bdde8:	f000 ff60 	bl	becac <memset>
}
   bddec:	4620      	mov	r0, r4
   bddee:	bd10      	pop	{r4, pc}

000bddf0 <_Z16_fetch_usbserialv>:
{
   bddf0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bddf2:	4c0f      	ldr	r4, [pc, #60]	; (bde30 <_Z16_fetch_usbserialv+0x40>)
{
   bddf4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bddf6:	a803      	add	r0, sp, #12
   bddf8:	f7ff fff2 	bl	bdde0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bddfc:	7821      	ldrb	r1, [r4, #0]
   bddfe:	f3bf 8f5b 	dmb	ish
   bde02:	f011 0101 	ands.w	r1, r1, #1
   bde06:	d10f      	bne.n	bde28 <_Z16_fetch_usbserialv+0x38>
   bde08:	4620      	mov	r0, r4
   bde0a:	9101      	str	r1, [sp, #4]
   bde0c:	f7f6 f956 	bl	b40bc <__cxa_guard_acquire>
   bde10:	9901      	ldr	r1, [sp, #4]
   bde12:	b148      	cbz	r0, bde28 <_Z16_fetch_usbserialv+0x38>
   bde14:	aa03      	add	r2, sp, #12
   bde16:	4807      	ldr	r0, [pc, #28]	; (bde34 <_Z16_fetch_usbserialv+0x44>)
   bde18:	f7ff ffc4 	bl	bdda4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bde1c:	4620      	mov	r0, r4
   bde1e:	f7f6 f952 	bl	b40c6 <__cxa_guard_release>
   bde22:	4805      	ldr	r0, [pc, #20]	; (bde38 <_Z16_fetch_usbserialv+0x48>)
   bde24:	f000 feee 	bl	bec04 <atexit>
	return _usbserial;
}
   bde28:	4802      	ldr	r0, [pc, #8]	; (bde34 <_Z16_fetch_usbserialv+0x44>)
   bde2a:	b008      	add	sp, #32
   bde2c:	bd10      	pop	{r4, pc}
   bde2e:	bf00      	nop
   bde30:	2003e6f0 	.word	0x2003e6f0
   bde34:	2003e6f4 	.word	0x2003e6f4
   bde38:	000bdd2d 	.word	0x000bdd2d

000bde3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bde3c:	4b01      	ldr	r3, [pc, #4]	; (bde44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bde3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bde40:	4770      	bx	lr
   bde42:	bf00      	nop
   bde44:	2003de8c 	.word	0x2003de8c

000bde48 <serialEventRun>:
{
   bde48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bde4a:	4b0b      	ldr	r3, [pc, #44]	; (bde78 <serialEventRun+0x30>)
   bde4c:	b143      	cbz	r3, bde60 <serialEventRun+0x18>
   bde4e:	f7ff ffcf 	bl	bddf0 <_Z16_fetch_usbserialv>
   bde52:	6803      	ldr	r3, [r0, #0]
   bde54:	691b      	ldr	r3, [r3, #16]
   bde56:	4798      	blx	r3
   bde58:	2800      	cmp	r0, #0
   bde5a:	dd01      	ble.n	bde60 <serialEventRun+0x18>
        serialEvent();
   bde5c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bde60:	4b06      	ldr	r3, [pc, #24]	; (bde7c <serialEventRun+0x34>)
   bde62:	b143      	cbz	r3, bde76 <serialEventRun+0x2e>
   bde64:	f000 f9c2 	bl	be1ec <_Z22__fetch_global_Serial1v>
   bde68:	6803      	ldr	r3, [r0, #0]
   bde6a:	691b      	ldr	r3, [r3, #16]
   bde6c:	4798      	blx	r3
   bde6e:	2800      	cmp	r0, #0
   bde70:	dd01      	ble.n	bde76 <serialEventRun+0x2e>
        serialEvent1();
   bde72:	f3af 8000 	nop.w
}
   bde76:	bd08      	pop	{r3, pc}
	...

000bde80 <_post_loop>:
{
   bde80:	b508      	push	{r3, lr}
	serialEventRun();
   bde82:	f7ff ffe1 	bl	bde48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bde86:	f7fc fc35 	bl	ba6f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bde8a:	4b01      	ldr	r3, [pc, #4]	; (bde90 <_post_loop+0x10>)
   bde8c:	6018      	str	r0, [r3, #0]
}
   bde8e:	bd08      	pop	{r3, pc}
   bde90:	2003e710 	.word	0x2003e710

000bde94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bde94:	4805      	ldr	r0, [pc, #20]	; (bdeac <_Z33system_initialize_user_backup_ramv+0x18>)
   bde96:	4a06      	ldr	r2, [pc, #24]	; (bdeb0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bde98:	4906      	ldr	r1, [pc, #24]	; (bdeb4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bde9a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bde9c:	1a12      	subs	r2, r2, r0
   bde9e:	f000 fedd 	bl	bec5c <memcpy>
    __backup_sram_signature = signature;
   bdea2:	4b05      	ldr	r3, [pc, #20]	; (bdeb8 <_Z33system_initialize_user_backup_ramv+0x24>)
   bdea4:	4a05      	ldr	r2, [pc, #20]	; (bdebc <_Z33system_initialize_user_backup_ramv+0x28>)
   bdea6:	601a      	str	r2, [r3, #0]
}
   bdea8:	bd08      	pop	{r3, pc}
   bdeaa:	bf00      	nop
   bdeac:	2003f400 	.word	0x2003f400
   bdeb0:	2003f404 	.word	0x2003f404
   bdeb4:	000c0bf4 	.word	0x000c0bf4
   bdeb8:	2003f400 	.word	0x2003f400
   bdebc:	9a271c1e 	.word	0x9a271c1e

000bdec0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bdec0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bdec2:	2300      	movs	r3, #0
   bdec4:	9300      	str	r3, [sp, #0]
   bdec6:	461a      	mov	r2, r3
   bdec8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bdecc:	f7fc febe 	bl	bac4c <system_ctrl_set_result>
}
   bded0:	b003      	add	sp, #12
   bded2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bded8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bded8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bdeda:	8843      	ldrh	r3, [r0, #2]
   bdedc:	2b0a      	cmp	r3, #10
   bdede:	d008      	beq.n	bdef2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bdee0:	2b50      	cmp	r3, #80	; 0x50
   bdee2:	d10b      	bne.n	bdefc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bdee4:	4b09      	ldr	r3, [pc, #36]	; (bdf0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bdee6:	681b      	ldr	r3, [r3, #0]
   bdee8:	b14b      	cbz	r3, bdefe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bdeea:	b003      	add	sp, #12
   bdeec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bdef0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bdef2:	f7ff ffe5 	bl	bdec0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bdef6:	b003      	add	sp, #12
   bdef8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bdefc:	2300      	movs	r3, #0
   bdefe:	9300      	str	r3, [sp, #0]
   bdf00:	461a      	mov	r2, r3
   bdf02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bdf06:	f7fc fea1 	bl	bac4c <system_ctrl_set_result>
}
   bdf0a:	e7f4      	b.n	bdef6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bdf0c:	2003e70c 	.word	0x2003e70c

000bdf10 <module_user_init_hook>:
{
   bdf10:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bdf12:	4812      	ldr	r0, [pc, #72]	; (bdf5c <module_user_init_hook+0x4c>)
   bdf14:	2100      	movs	r1, #0
   bdf16:	f7fc ffd1 	bl	baebc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bdf1a:	4b11      	ldr	r3, [pc, #68]	; (bdf60 <module_user_init_hook+0x50>)
   bdf1c:	681a      	ldr	r2, [r3, #0]
   bdf1e:	4b11      	ldr	r3, [pc, #68]	; (bdf64 <module_user_init_hook+0x54>)
   bdf20:	429a      	cmp	r2, r3
   bdf22:	4b11      	ldr	r3, [pc, #68]	; (bdf68 <module_user_init_hook+0x58>)
   bdf24:	bf0c      	ite	eq
   bdf26:	2201      	moveq	r2, #1
   bdf28:	2200      	movne	r2, #0
   bdf2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bdf2c:	d001      	beq.n	bdf32 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bdf2e:	f7ff ffb1 	bl	bde94 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bdf32:	f7fc fbc7 	bl	ba6c4 <HAL_RNG_GetRandomNumber>
   bdf36:	4604      	mov	r4, r0
    srand(seed);
   bdf38:	f000 fec0 	bl	becbc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bdf3c:	4b0b      	ldr	r3, [pc, #44]	; (bdf6c <module_user_init_hook+0x5c>)
   bdf3e:	b113      	cbz	r3, bdf46 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bdf40:	4620      	mov	r0, r4
   bdf42:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bdf46:	2100      	movs	r1, #0
   bdf48:	4808      	ldr	r0, [pc, #32]	; (bdf6c <module_user_init_hook+0x5c>)
   bdf4a:	f7fc feef 	bl	bad2c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bdf4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bdf52:	4807      	ldr	r0, [pc, #28]	; (bdf70 <module_user_init_hook+0x60>)
   bdf54:	2100      	movs	r1, #0
   bdf56:	f7fc be6f 	b.w	bac38 <system_ctrl_set_app_request_handler>
   bdf5a:	bf00      	nop
   bdf5c:	000bde3d 	.word	0x000bde3d
   bdf60:	2003f400 	.word	0x2003f400
   bdf64:	9a271c1e 	.word	0x9a271c1e
   bdf68:	2003e708 	.word	0x2003e708
   bdf6c:	00000000 	.word	0x00000000
   bdf70:	000bded9 	.word	0x000bded9

000bdf74 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bdf74:	b508      	push	{r3, lr}
   bdf76:	4b02      	ldr	r3, [pc, #8]	; (bdf80 <spark_protocol_instance+0xc>)
   bdf78:	681b      	ldr	r3, [r3, #0]
   bdf7a:	681b      	ldr	r3, [r3, #0]
   bdf7c:	9301      	str	r3, [sp, #4]
   bdf7e:	bd08      	pop	{r3, pc}
   bdf80:	0003025c 	.word	0x0003025c

000bdf84 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bdf84:	b508      	push	{r3, lr}
   bdf86:	4b02      	ldr	r3, [pc, #8]	; (bdf90 <spark_protocol_set_product_id+0xc>)
   bdf88:	681b      	ldr	r3, [r3, #0]
   bdf8a:	685b      	ldr	r3, [r3, #4]
   bdf8c:	9301      	str	r3, [sp, #4]
   bdf8e:	bd08      	pop	{r3, pc}
   bdf90:	0003025c 	.word	0x0003025c

000bdf94 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bdf94:	b508      	push	{r3, lr}
   bdf96:	4b02      	ldr	r3, [pc, #8]	; (bdfa0 <spark_protocol_set_product_firmware_version+0xc>)
   bdf98:	681b      	ldr	r3, [r3, #0]
   bdf9a:	689b      	ldr	r3, [r3, #8]
   bdf9c:	9301      	str	r3, [sp, #4]
   bdf9e:	bd08      	pop	{r3, pc}
   bdfa0:	0003025c 	.word	0x0003025c

000bdfa4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bdfa4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bdfa6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bdfa8:	d902      	bls.n	bdfb0 <pinAvailable+0xc>
    return false;
   bdfaa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bdfac:	b002      	add	sp, #8
   bdfae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bdfb0:	f1a0 030b 	sub.w	r3, r0, #11
   bdfb4:	2b02      	cmp	r3, #2
   bdfb6:	d81a      	bhi.n	bdfee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bdfb8:	4c17      	ldr	r4, [pc, #92]	; (be018 <pinAvailable+0x74>)
   bdfba:	7821      	ldrb	r1, [r4, #0]
   bdfbc:	f3bf 8f5b 	dmb	ish
   bdfc0:	f011 0101 	ands.w	r1, r1, #1
   bdfc4:	d10b      	bne.n	bdfde <pinAvailable+0x3a>
   bdfc6:	4620      	mov	r0, r4
   bdfc8:	9101      	str	r1, [sp, #4]
   bdfca:	f7f6 f877 	bl	b40bc <__cxa_guard_acquire>
   bdfce:	9901      	ldr	r1, [sp, #4]
   bdfd0:	b128      	cbz	r0, bdfde <pinAvailable+0x3a>
   bdfd2:	4812      	ldr	r0, [pc, #72]	; (be01c <pinAvailable+0x78>)
   bdfd4:	f7ff f9c6 	bl	bd364 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bdfd8:	4620      	mov	r0, r4
   bdfda:	f7f6 f874 	bl	b40c6 <__cxa_guard_release>
   bdfde:	4b0f      	ldr	r3, [pc, #60]	; (be01c <pinAvailable+0x78>)
   bdfe0:	7818      	ldrb	r0, [r3, #0]
   bdfe2:	f7fc fc8f 	bl	ba904 <hal_spi_is_enabled>
   bdfe6:	2800      	cmp	r0, #0
   bdfe8:	d1df      	bne.n	bdfaa <pinAvailable+0x6>
  return true; // 'pin' is available
   bdfea:	2001      	movs	r0, #1
   bdfec:	e7de      	b.n	bdfac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bdfee:	2801      	cmp	r0, #1
   bdff0:	d809      	bhi.n	be006 <pinAvailable+0x62>
   bdff2:	f000 f897 	bl	be124 <_Z19__fetch_global_Wirev>
   bdff6:	2100      	movs	r1, #0
   bdff8:	7c00      	ldrb	r0, [r0, #16]
   bdffa:	f7fc fc23 	bl	ba844 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bdffe:	f080 0001 	eor.w	r0, r0, #1
   be002:	b2c0      	uxtb	r0, r0
   be004:	e7d2      	b.n	bdfac <pinAvailable+0x8>
   be006:	3809      	subs	r0, #9
   be008:	2801      	cmp	r0, #1
   be00a:	d8ee      	bhi.n	bdfea <pinAvailable+0x46>
   be00c:	f000 f8ee 	bl	be1ec <_Z22__fetch_global_Serial1v>
   be010:	7c00      	ldrb	r0, [r0, #16]
   be012:	f7fc fd2f 	bl	baa74 <hal_usart_is_enabled>
   be016:	e7f2      	b.n	bdffe <pinAvailable+0x5a>
   be018:	2003e450 	.word	0x2003e450
   be01c:	2003e454 	.word	0x2003e454

000be020 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   be020:	2823      	cmp	r0, #35	; 0x23
{
   be022:	b538      	push	{r3, r4, r5, lr}
   be024:	4604      	mov	r4, r0
   be026:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   be028:	d80a      	bhi.n	be040 <pinMode+0x20>
   be02a:	29ff      	cmp	r1, #255	; 0xff
   be02c:	d008      	beq.n	be040 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   be02e:	f7ff ffb9 	bl	bdfa4 <pinAvailable>
   be032:	b128      	cbz	r0, be040 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   be034:	4629      	mov	r1, r5
   be036:	4620      	mov	r0, r4
}
   be038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   be03c:	f7fc bb8a 	b.w	ba754 <HAL_Pin_Mode>
}
   be040:	bd38      	pop	{r3, r4, r5, pc}

000be042 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   be042:	b538      	push	{r3, r4, r5, lr}
   be044:	4604      	mov	r4, r0
   be046:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   be048:	f7fc fb8c 	bl	ba764 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   be04c:	28ff      	cmp	r0, #255	; 0xff
   be04e:	d010      	beq.n	be072 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   be050:	2806      	cmp	r0, #6
   be052:	d804      	bhi.n	be05e <digitalWrite+0x1c>
   be054:	234d      	movs	r3, #77	; 0x4d
   be056:	fa23 f000 	lsr.w	r0, r3, r0
   be05a:	07c3      	lsls	r3, r0, #31
   be05c:	d409      	bmi.n	be072 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   be05e:	4620      	mov	r0, r4
   be060:	f7ff ffa0 	bl	bdfa4 <pinAvailable>
   be064:	b128      	cbz	r0, be072 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   be066:	4629      	mov	r1, r5
   be068:	4620      	mov	r0, r4
}
   be06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   be06e:	f7fc bb81 	b.w	ba774 <HAL_GPIO_Write>
}
   be072:	bd38      	pop	{r3, r4, r5, pc}

000be074 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   be074:	b510      	push	{r4, lr}
   be076:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   be078:	f7fc fb74 	bl	ba764 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   be07c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   be07e:	b2db      	uxtb	r3, r3
   be080:	2b01      	cmp	r3, #1
   be082:	d908      	bls.n	be096 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   be084:	4620      	mov	r0, r4
   be086:	f7ff ff8d 	bl	bdfa4 <pinAvailable>
   be08a:	b120      	cbz	r0, be096 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   be08c:	4620      	mov	r0, r4
}
   be08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   be092:	f7fc bb77 	b.w	ba784 <HAL_GPIO_Read>
}
   be096:	2000      	movs	r0, #0
   be098:	bd10      	pop	{r4, pc}

000be09a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   be09a:	280d      	cmp	r0, #13
{
   be09c:	b510      	push	{r4, lr}
   be09e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   be0a0:	bf9c      	itt	ls
   be0a2:	340e      	addls	r4, #14
   be0a4:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   be0a6:	4620      	mov	r0, r4
   be0a8:	f7ff ff7c 	bl	bdfa4 <pinAvailable>
   be0ac:	b150      	cbz	r0, be0c4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   be0ae:	2103      	movs	r1, #3
   be0b0:	4620      	mov	r0, r4
   be0b2:	f7fc fb47 	bl	ba744 <HAL_Validate_Pin_Function>
   be0b6:	2803      	cmp	r0, #3
   be0b8:	d104      	bne.n	be0c4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   be0ba:	4620      	mov	r0, r4
}
   be0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   be0c0:	f7fc bb78 	b.w	ba7b4 <hal_adc_read>
}
   be0c4:	2000      	movs	r0, #0
   be0c6:	bd10      	pop	{r4, pc}

000be0c8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be0c8:	4770      	bx	lr

000be0ca <__tcf_1>:
   be0ca:	4770      	bx	lr

000be0cc <_Z17acquireWireBufferv>:
{
   be0cc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   be0ce:	2520      	movs	r5, #32
   be0d0:	2314      	movs	r3, #20
{
   be0d2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   be0d4:	6003      	str	r3, [r0, #0]
   be0d6:	6085      	str	r5, [r0, #8]
   be0d8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be0da:	4906      	ldr	r1, [pc, #24]	; (be0f4 <_Z17acquireWireBufferv+0x28>)
   be0dc:	4628      	mov	r0, r5
   be0de:	f000 f8ab 	bl	be238 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be0e2:	4904      	ldr	r1, [pc, #16]	; (be0f4 <_Z17acquireWireBufferv+0x28>)
	};
   be0e4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be0e6:	4628      	mov	r0, r5
   be0e8:	f000 f8a6 	bl	be238 <_ZnajRKSt9nothrow_t>
	};
   be0ec:	60e0      	str	r0, [r4, #12]
}
   be0ee:	4620      	mov	r0, r4
   be0f0:	bd38      	pop	{r3, r4, r5, pc}
   be0f2:	bf00      	nop
   be0f4:	000c0960 	.word	0x000c0960

000be0f8 <_Z18acquireWire1Bufferv>:
   be0f8:	b538      	push	{r3, r4, r5, lr}
   be0fa:	2520      	movs	r5, #32
   be0fc:	2314      	movs	r3, #20
   be0fe:	4604      	mov	r4, r0
   be100:	6003      	str	r3, [r0, #0]
   be102:	6085      	str	r5, [r0, #8]
   be104:	6105      	str	r5, [r0, #16]
   be106:	4906      	ldr	r1, [pc, #24]	; (be120 <_Z18acquireWire1Bufferv+0x28>)
   be108:	4628      	mov	r0, r5
   be10a:	f000 f895 	bl	be238 <_ZnajRKSt9nothrow_t>
   be10e:	4904      	ldr	r1, [pc, #16]	; (be120 <_Z18acquireWire1Bufferv+0x28>)
   be110:	6060      	str	r0, [r4, #4]
   be112:	4628      	mov	r0, r5
   be114:	f000 f890 	bl	be238 <_ZnajRKSt9nothrow_t>
   be118:	60e0      	str	r0, [r4, #12]
   be11a:	4620      	mov	r0, r4
   be11c:	bd38      	pop	{r3, r4, r5, pc}
   be11e:	bf00      	nop
   be120:	000c0960 	.word	0x000c0960

000be124 <_Z19__fetch_global_Wirev>:
{
   be124:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be126:	4d0e      	ldr	r5, [pc, #56]	; (be160 <_Z19__fetch_global_Wirev+0x3c>)
   be128:	7829      	ldrb	r1, [r5, #0]
   be12a:	f3bf 8f5b 	dmb	ish
   be12e:	f011 0401 	ands.w	r4, r1, #1
{
   be132:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be134:	d111      	bne.n	be15a <_Z19__fetch_global_Wirev+0x36>
   be136:	4628      	mov	r0, r5
   be138:	f7f5 ffc0 	bl	b40bc <__cxa_guard_acquire>
   be13c:	b168      	cbz	r0, be15a <_Z19__fetch_global_Wirev+0x36>
   be13e:	a801      	add	r0, sp, #4
   be140:	f7ff ffc4 	bl	be0cc <_Z17acquireWireBufferv>
   be144:	aa01      	add	r2, sp, #4
   be146:	4621      	mov	r1, r4
   be148:	4806      	ldr	r0, [pc, #24]	; (be164 <_Z19__fetch_global_Wirev+0x40>)
   be14a:	f7fd fbdd 	bl	bb908 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be14e:	4628      	mov	r0, r5
   be150:	f7f5 ffb9 	bl	b40c6 <__cxa_guard_release>
   be154:	4804      	ldr	r0, [pc, #16]	; (be168 <_Z19__fetch_global_Wirev+0x44>)
   be156:	f000 fd55 	bl	bec04 <atexit>
	return wire;
}
   be15a:	4802      	ldr	r0, [pc, #8]	; (be164 <_Z19__fetch_global_Wirev+0x40>)
   be15c:	b007      	add	sp, #28
   be15e:	bd30      	pop	{r4, r5, pc}
   be160:	2003e714 	.word	0x2003e714
   be164:	2003e71c 	.word	0x2003e71c
   be168:	000be0c9 	.word	0x000be0c9

000be16c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   be16c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be16e:	4c0e      	ldr	r4, [pc, #56]	; (be1a8 <_Z20__fetch_global_Wire1v+0x3c>)
   be170:	7823      	ldrb	r3, [r4, #0]
   be172:	f3bf 8f5b 	dmb	ish
   be176:	07db      	lsls	r3, r3, #31
{
   be178:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be17a:	d411      	bmi.n	be1a0 <_Z20__fetch_global_Wire1v+0x34>
   be17c:	4620      	mov	r0, r4
   be17e:	f7f5 ff9d 	bl	b40bc <__cxa_guard_acquire>
   be182:	b168      	cbz	r0, be1a0 <_Z20__fetch_global_Wire1v+0x34>
   be184:	a801      	add	r0, sp, #4
   be186:	f7ff ffb7 	bl	be0f8 <_Z18acquireWire1Bufferv>
   be18a:	aa01      	add	r2, sp, #4
   be18c:	2101      	movs	r1, #1
   be18e:	4807      	ldr	r0, [pc, #28]	; (be1ac <_Z20__fetch_global_Wire1v+0x40>)
   be190:	f7fd fbba 	bl	bb908 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be194:	4620      	mov	r0, r4
   be196:	f7f5 ff96 	bl	b40c6 <__cxa_guard_release>
   be19a:	4805      	ldr	r0, [pc, #20]	; (be1b0 <_Z20__fetch_global_Wire1v+0x44>)
   be19c:	f000 fd32 	bl	bec04 <atexit>
	return wire;
}
   be1a0:	4802      	ldr	r0, [pc, #8]	; (be1ac <_Z20__fetch_global_Wire1v+0x40>)
   be1a2:	b006      	add	sp, #24
   be1a4:	bd10      	pop	{r4, pc}
   be1a6:	bf00      	nop
   be1a8:	2003e718 	.word	0x2003e718
   be1ac:	2003e730 	.word	0x2003e730
   be1b0:	000be0cb 	.word	0x000be0cb

000be1b4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be1b4:	4770      	bx	lr
	...

000be1b8 <_Z20acquireSerial1Bufferv>:
{
   be1b8:	b538      	push	{r3, r4, r5, lr}
   be1ba:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   be1bc:	2514      	movs	r5, #20
   be1be:	462a      	mov	r2, r5
   be1c0:	2100      	movs	r1, #0
   be1c2:	f000 fd73 	bl	becac <memset>
   be1c6:	8025      	strh	r5, [r4, #0]
   be1c8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be1ca:	4907      	ldr	r1, [pc, #28]	; (be1e8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   be1cc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be1ce:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   be1d0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be1d2:	f000 f831 	bl	be238 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be1d6:	4904      	ldr	r1, [pc, #16]	; (be1e8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   be1d8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be1da:	4628      	mov	r0, r5
   be1dc:	f000 f82c 	bl	be238 <_ZnajRKSt9nothrow_t>
    };
   be1e0:	60e0      	str	r0, [r4, #12]
}
   be1e2:	4620      	mov	r0, r4
   be1e4:	bd38      	pop	{r3, r4, r5, pc}
   be1e6:	bf00      	nop
   be1e8:	000c0960 	.word	0x000c0960

000be1ec <_Z22__fetch_global_Serial1v>:
{
   be1ec:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be1ee:	4d0e      	ldr	r5, [pc, #56]	; (be228 <_Z22__fetch_global_Serial1v+0x3c>)
   be1f0:	7829      	ldrb	r1, [r5, #0]
   be1f2:	f3bf 8f5b 	dmb	ish
   be1f6:	f011 0401 	ands.w	r4, r1, #1
{
   be1fa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be1fc:	d111      	bne.n	be222 <_Z22__fetch_global_Serial1v+0x36>
   be1fe:	4628      	mov	r0, r5
   be200:	f7f5 ff5c 	bl	b40bc <__cxa_guard_acquire>
   be204:	b168      	cbz	r0, be222 <_Z22__fetch_global_Serial1v+0x36>
   be206:	a801      	add	r0, sp, #4
   be208:	f7ff ffd6 	bl	be1b8 <_Z20acquireSerial1Bufferv>
   be20c:	aa01      	add	r2, sp, #4
   be20e:	4621      	mov	r1, r4
   be210:	4806      	ldr	r0, [pc, #24]	; (be22c <_Z22__fetch_global_Serial1v+0x40>)
   be212:	f7ff fd6b 	bl	bdcec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   be216:	4628      	mov	r0, r5
   be218:	f7f5 ff55 	bl	b40c6 <__cxa_guard_release>
   be21c:	4804      	ldr	r0, [pc, #16]	; (be230 <_Z22__fetch_global_Serial1v+0x44>)
   be21e:	f000 fcf1 	bl	bec04 <atexit>
    return serial1;
}
   be222:	4802      	ldr	r0, [pc, #8]	; (be22c <_Z22__fetch_global_Serial1v+0x40>)
   be224:	b007      	add	sp, #28
   be226:	bd30      	pop	{r4, r5, pc}
   be228:	2003e744 	.word	0x2003e744
   be22c:	2003e748 	.word	0x2003e748
   be230:	000be1b5 	.word	0x000be1b5

000be234 <_ZnwjRKSt9nothrow_t>:
   be234:	f7f5 bf2f 	b.w	b4096 <_Znwj>

000be238 <_ZnajRKSt9nothrow_t>:
   be238:	f7f5 bf2f 	b.w	b409a <_Znaj>

000be23c <_ZSt17__throw_bad_allocv>:
   be23c:	b508      	push	{r3, lr}
   be23e:	f7fc fe1d 	bl	bae7c <abort>

000be242 <_ZSt20__throw_length_errorPKc>:
   be242:	b508      	push	{r3, lr}
   be244:	f7fc fe1a 	bl	bae7c <abort>

000be248 <_ZSt25__throw_bad_function_callv>:
   be248:	b508      	push	{r3, lr}
   be24a:	f7fc fe17 	bl	bae7c <abort>
	...

000be250 <__aeabi_drsub>:
   be250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   be254:	e002      	b.n	be25c <__adddf3>
   be256:	bf00      	nop

000be258 <__aeabi_dsub>:
   be258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000be25c <__adddf3>:
   be25c:	b530      	push	{r4, r5, lr}
   be25e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   be262:	ea4f 0543 	mov.w	r5, r3, lsl #1
   be266:	ea94 0f05 	teq	r4, r5
   be26a:	bf08      	it	eq
   be26c:	ea90 0f02 	teqeq	r0, r2
   be270:	bf1f      	itttt	ne
   be272:	ea54 0c00 	orrsne.w	ip, r4, r0
   be276:	ea55 0c02 	orrsne.w	ip, r5, r2
   be27a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   be27e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be282:	f000 80e2 	beq.w	be44a <__adddf3+0x1ee>
   be286:	ea4f 5454 	mov.w	r4, r4, lsr #21
   be28a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   be28e:	bfb8      	it	lt
   be290:	426d      	neglt	r5, r5
   be292:	dd0c      	ble.n	be2ae <__adddf3+0x52>
   be294:	442c      	add	r4, r5
   be296:	ea80 0202 	eor.w	r2, r0, r2
   be29a:	ea81 0303 	eor.w	r3, r1, r3
   be29e:	ea82 0000 	eor.w	r0, r2, r0
   be2a2:	ea83 0101 	eor.w	r1, r3, r1
   be2a6:	ea80 0202 	eor.w	r2, r0, r2
   be2aa:	ea81 0303 	eor.w	r3, r1, r3
   be2ae:	2d36      	cmp	r5, #54	; 0x36
   be2b0:	bf88      	it	hi
   be2b2:	bd30      	pophi	{r4, r5, pc}
   be2b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be2b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be2bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   be2c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   be2c4:	d002      	beq.n	be2cc <__adddf3+0x70>
   be2c6:	4240      	negs	r0, r0
   be2c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be2cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be2d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be2d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be2d8:	d002      	beq.n	be2e0 <__adddf3+0x84>
   be2da:	4252      	negs	r2, r2
   be2dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be2e0:	ea94 0f05 	teq	r4, r5
   be2e4:	f000 80a7 	beq.w	be436 <__adddf3+0x1da>
   be2e8:	f1a4 0401 	sub.w	r4, r4, #1
   be2ec:	f1d5 0e20 	rsbs	lr, r5, #32
   be2f0:	db0d      	blt.n	be30e <__adddf3+0xb2>
   be2f2:	fa02 fc0e 	lsl.w	ip, r2, lr
   be2f6:	fa22 f205 	lsr.w	r2, r2, r5
   be2fa:	1880      	adds	r0, r0, r2
   be2fc:	f141 0100 	adc.w	r1, r1, #0
   be300:	fa03 f20e 	lsl.w	r2, r3, lr
   be304:	1880      	adds	r0, r0, r2
   be306:	fa43 f305 	asr.w	r3, r3, r5
   be30a:	4159      	adcs	r1, r3
   be30c:	e00e      	b.n	be32c <__adddf3+0xd0>
   be30e:	f1a5 0520 	sub.w	r5, r5, #32
   be312:	f10e 0e20 	add.w	lr, lr, #32
   be316:	2a01      	cmp	r2, #1
   be318:	fa03 fc0e 	lsl.w	ip, r3, lr
   be31c:	bf28      	it	cs
   be31e:	f04c 0c02 	orrcs.w	ip, ip, #2
   be322:	fa43 f305 	asr.w	r3, r3, r5
   be326:	18c0      	adds	r0, r0, r3
   be328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   be32c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be330:	d507      	bpl.n	be342 <__adddf3+0xe6>
   be332:	f04f 0e00 	mov.w	lr, #0
   be336:	f1dc 0c00 	rsbs	ip, ip, #0
   be33a:	eb7e 0000 	sbcs.w	r0, lr, r0
   be33e:	eb6e 0101 	sbc.w	r1, lr, r1
   be342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   be346:	d31b      	bcc.n	be380 <__adddf3+0x124>
   be348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   be34c:	d30c      	bcc.n	be368 <__adddf3+0x10c>
   be34e:	0849      	lsrs	r1, r1, #1
   be350:	ea5f 0030 	movs.w	r0, r0, rrx
   be354:	ea4f 0c3c 	mov.w	ip, ip, rrx
   be358:	f104 0401 	add.w	r4, r4, #1
   be35c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   be360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   be364:	f080 809a 	bcs.w	be49c <__adddf3+0x240>
   be368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   be36c:	bf08      	it	eq
   be36e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be372:	f150 0000 	adcs.w	r0, r0, #0
   be376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be37a:	ea41 0105 	orr.w	r1, r1, r5
   be37e:	bd30      	pop	{r4, r5, pc}
   be380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   be384:	4140      	adcs	r0, r0
   be386:	eb41 0101 	adc.w	r1, r1, r1
   be38a:	3c01      	subs	r4, #1
   be38c:	bf28      	it	cs
   be38e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   be392:	d2e9      	bcs.n	be368 <__adddf3+0x10c>
   be394:	f091 0f00 	teq	r1, #0
   be398:	bf04      	itt	eq
   be39a:	4601      	moveq	r1, r0
   be39c:	2000      	moveq	r0, #0
   be39e:	fab1 f381 	clz	r3, r1
   be3a2:	bf08      	it	eq
   be3a4:	3320      	addeq	r3, #32
   be3a6:	f1a3 030b 	sub.w	r3, r3, #11
   be3aa:	f1b3 0220 	subs.w	r2, r3, #32
   be3ae:	da0c      	bge.n	be3ca <__adddf3+0x16e>
   be3b0:	320c      	adds	r2, #12
   be3b2:	dd08      	ble.n	be3c6 <__adddf3+0x16a>
   be3b4:	f102 0c14 	add.w	ip, r2, #20
   be3b8:	f1c2 020c 	rsb	r2, r2, #12
   be3bc:	fa01 f00c 	lsl.w	r0, r1, ip
   be3c0:	fa21 f102 	lsr.w	r1, r1, r2
   be3c4:	e00c      	b.n	be3e0 <__adddf3+0x184>
   be3c6:	f102 0214 	add.w	r2, r2, #20
   be3ca:	bfd8      	it	le
   be3cc:	f1c2 0c20 	rsble	ip, r2, #32
   be3d0:	fa01 f102 	lsl.w	r1, r1, r2
   be3d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   be3d8:	bfdc      	itt	le
   be3da:	ea41 010c 	orrle.w	r1, r1, ip
   be3de:	4090      	lslle	r0, r2
   be3e0:	1ae4      	subs	r4, r4, r3
   be3e2:	bfa2      	ittt	ge
   be3e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   be3e8:	4329      	orrge	r1, r5
   be3ea:	bd30      	popge	{r4, r5, pc}
   be3ec:	ea6f 0404 	mvn.w	r4, r4
   be3f0:	3c1f      	subs	r4, #31
   be3f2:	da1c      	bge.n	be42e <__adddf3+0x1d2>
   be3f4:	340c      	adds	r4, #12
   be3f6:	dc0e      	bgt.n	be416 <__adddf3+0x1ba>
   be3f8:	f104 0414 	add.w	r4, r4, #20
   be3fc:	f1c4 0220 	rsb	r2, r4, #32
   be400:	fa20 f004 	lsr.w	r0, r0, r4
   be404:	fa01 f302 	lsl.w	r3, r1, r2
   be408:	ea40 0003 	orr.w	r0, r0, r3
   be40c:	fa21 f304 	lsr.w	r3, r1, r4
   be410:	ea45 0103 	orr.w	r1, r5, r3
   be414:	bd30      	pop	{r4, r5, pc}
   be416:	f1c4 040c 	rsb	r4, r4, #12
   be41a:	f1c4 0220 	rsb	r2, r4, #32
   be41e:	fa20 f002 	lsr.w	r0, r0, r2
   be422:	fa01 f304 	lsl.w	r3, r1, r4
   be426:	ea40 0003 	orr.w	r0, r0, r3
   be42a:	4629      	mov	r1, r5
   be42c:	bd30      	pop	{r4, r5, pc}
   be42e:	fa21 f004 	lsr.w	r0, r1, r4
   be432:	4629      	mov	r1, r5
   be434:	bd30      	pop	{r4, r5, pc}
   be436:	f094 0f00 	teq	r4, #0
   be43a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   be43e:	bf06      	itte	eq
   be440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   be444:	3401      	addeq	r4, #1
   be446:	3d01      	subne	r5, #1
   be448:	e74e      	b.n	be2e8 <__adddf3+0x8c>
   be44a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be44e:	bf18      	it	ne
   be450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be454:	d029      	beq.n	be4aa <__adddf3+0x24e>
   be456:	ea94 0f05 	teq	r4, r5
   be45a:	bf08      	it	eq
   be45c:	ea90 0f02 	teqeq	r0, r2
   be460:	d005      	beq.n	be46e <__adddf3+0x212>
   be462:	ea54 0c00 	orrs.w	ip, r4, r0
   be466:	bf04      	itt	eq
   be468:	4619      	moveq	r1, r3
   be46a:	4610      	moveq	r0, r2
   be46c:	bd30      	pop	{r4, r5, pc}
   be46e:	ea91 0f03 	teq	r1, r3
   be472:	bf1e      	ittt	ne
   be474:	2100      	movne	r1, #0
   be476:	2000      	movne	r0, #0
   be478:	bd30      	popne	{r4, r5, pc}
   be47a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   be47e:	d105      	bne.n	be48c <__adddf3+0x230>
   be480:	0040      	lsls	r0, r0, #1
   be482:	4149      	adcs	r1, r1
   be484:	bf28      	it	cs
   be486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   be48a:	bd30      	pop	{r4, r5, pc}
   be48c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   be490:	bf3c      	itt	cc
   be492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   be496:	bd30      	popcc	{r4, r5, pc}
   be498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be49c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   be4a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be4a4:	f04f 0000 	mov.w	r0, #0
   be4a8:	bd30      	pop	{r4, r5, pc}
   be4aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be4ae:	bf1a      	itte	ne
   be4b0:	4619      	movne	r1, r3
   be4b2:	4610      	movne	r0, r2
   be4b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   be4b8:	bf1c      	itt	ne
   be4ba:	460b      	movne	r3, r1
   be4bc:	4602      	movne	r2, r0
   be4be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be4c2:	bf06      	itte	eq
   be4c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   be4c8:	ea91 0f03 	teqeq	r1, r3
   be4cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   be4d0:	bd30      	pop	{r4, r5, pc}
   be4d2:	bf00      	nop

000be4d4 <__aeabi_ui2d>:
   be4d4:	f090 0f00 	teq	r0, #0
   be4d8:	bf04      	itt	eq
   be4da:	2100      	moveq	r1, #0
   be4dc:	4770      	bxeq	lr
   be4de:	b530      	push	{r4, r5, lr}
   be4e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be4e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be4e8:	f04f 0500 	mov.w	r5, #0
   be4ec:	f04f 0100 	mov.w	r1, #0
   be4f0:	e750      	b.n	be394 <__adddf3+0x138>
   be4f2:	bf00      	nop

000be4f4 <__aeabi_i2d>:
   be4f4:	f090 0f00 	teq	r0, #0
   be4f8:	bf04      	itt	eq
   be4fa:	2100      	moveq	r1, #0
   be4fc:	4770      	bxeq	lr
   be4fe:	b530      	push	{r4, r5, lr}
   be500:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be504:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   be50c:	bf48      	it	mi
   be50e:	4240      	negmi	r0, r0
   be510:	f04f 0100 	mov.w	r1, #0
   be514:	e73e      	b.n	be394 <__adddf3+0x138>
   be516:	bf00      	nop

000be518 <__aeabi_f2d>:
   be518:	0042      	lsls	r2, r0, #1
   be51a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   be51e:	ea4f 0131 	mov.w	r1, r1, rrx
   be522:	ea4f 7002 	mov.w	r0, r2, lsl #28
   be526:	bf1f      	itttt	ne
   be528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   be52c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   be530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   be534:	4770      	bxne	lr
   be536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   be53a:	bf08      	it	eq
   be53c:	4770      	bxeq	lr
   be53e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   be542:	bf04      	itt	eq
   be544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   be548:	4770      	bxeq	lr
   be54a:	b530      	push	{r4, r5, lr}
   be54c:	f44f 7460 	mov.w	r4, #896	; 0x380
   be550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be558:	e71c      	b.n	be394 <__adddf3+0x138>
   be55a:	bf00      	nop

000be55c <__aeabi_ul2d>:
   be55c:	ea50 0201 	orrs.w	r2, r0, r1
   be560:	bf08      	it	eq
   be562:	4770      	bxeq	lr
   be564:	b530      	push	{r4, r5, lr}
   be566:	f04f 0500 	mov.w	r5, #0
   be56a:	e00a      	b.n	be582 <__aeabi_l2d+0x16>

000be56c <__aeabi_l2d>:
   be56c:	ea50 0201 	orrs.w	r2, r0, r1
   be570:	bf08      	it	eq
   be572:	4770      	bxeq	lr
   be574:	b530      	push	{r4, r5, lr}
   be576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   be57a:	d502      	bpl.n	be582 <__aeabi_l2d+0x16>
   be57c:	4240      	negs	r0, r0
   be57e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be582:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be586:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be58a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   be58e:	f43f aed8 	beq.w	be342 <__adddf3+0xe6>
   be592:	f04f 0203 	mov.w	r2, #3
   be596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be59a:	bf18      	it	ne
   be59c:	3203      	addne	r2, #3
   be59e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be5a2:	bf18      	it	ne
   be5a4:	3203      	addne	r2, #3
   be5a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   be5aa:	f1c2 0320 	rsb	r3, r2, #32
   be5ae:	fa00 fc03 	lsl.w	ip, r0, r3
   be5b2:	fa20 f002 	lsr.w	r0, r0, r2
   be5b6:	fa01 fe03 	lsl.w	lr, r1, r3
   be5ba:	ea40 000e 	orr.w	r0, r0, lr
   be5be:	fa21 f102 	lsr.w	r1, r1, r2
   be5c2:	4414      	add	r4, r2
   be5c4:	e6bd      	b.n	be342 <__adddf3+0xe6>
   be5c6:	bf00      	nop

000be5c8 <__aeabi_dmul>:
   be5c8:	b570      	push	{r4, r5, r6, lr}
   be5ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be5ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be5d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be5d6:	bf1d      	ittte	ne
   be5d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be5dc:	ea94 0f0c 	teqne	r4, ip
   be5e0:	ea95 0f0c 	teqne	r5, ip
   be5e4:	f000 f8de 	bleq	be7a4 <__aeabi_dmul+0x1dc>
   be5e8:	442c      	add	r4, r5
   be5ea:	ea81 0603 	eor.w	r6, r1, r3
   be5ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   be5f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   be5f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   be5fa:	bf18      	it	ne
   be5fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   be600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be608:	d038      	beq.n	be67c <__aeabi_dmul+0xb4>
   be60a:	fba0 ce02 	umull	ip, lr, r0, r2
   be60e:	f04f 0500 	mov.w	r5, #0
   be612:	fbe1 e502 	umlal	lr, r5, r1, r2
   be616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   be61a:	fbe0 e503 	umlal	lr, r5, r0, r3
   be61e:	f04f 0600 	mov.w	r6, #0
   be622:	fbe1 5603 	umlal	r5, r6, r1, r3
   be626:	f09c 0f00 	teq	ip, #0
   be62a:	bf18      	it	ne
   be62c:	f04e 0e01 	orrne.w	lr, lr, #1
   be630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   be634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   be638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   be63c:	d204      	bcs.n	be648 <__aeabi_dmul+0x80>
   be63e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   be642:	416d      	adcs	r5, r5
   be644:	eb46 0606 	adc.w	r6, r6, r6
   be648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   be64c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   be650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   be654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   be658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   be65c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be660:	bf88      	it	hi
   be662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be666:	d81e      	bhi.n	be6a6 <__aeabi_dmul+0xde>
   be668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   be66c:	bf08      	it	eq
   be66e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   be672:	f150 0000 	adcs.w	r0, r0, #0
   be676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be67a:	bd70      	pop	{r4, r5, r6, pc}
   be67c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   be680:	ea46 0101 	orr.w	r1, r6, r1
   be684:	ea40 0002 	orr.w	r0, r0, r2
   be688:	ea81 0103 	eor.w	r1, r1, r3
   be68c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   be690:	bfc2      	ittt	gt
   be692:	ebd4 050c 	rsbsgt	r5, r4, ip
   be696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be69a:	bd70      	popgt	{r4, r5, r6, pc}
   be69c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be6a0:	f04f 0e00 	mov.w	lr, #0
   be6a4:	3c01      	subs	r4, #1
   be6a6:	f300 80ab 	bgt.w	be800 <__aeabi_dmul+0x238>
   be6aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   be6ae:	bfde      	ittt	le
   be6b0:	2000      	movle	r0, #0
   be6b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   be6b6:	bd70      	pople	{r4, r5, r6, pc}
   be6b8:	f1c4 0400 	rsb	r4, r4, #0
   be6bc:	3c20      	subs	r4, #32
   be6be:	da35      	bge.n	be72c <__aeabi_dmul+0x164>
   be6c0:	340c      	adds	r4, #12
   be6c2:	dc1b      	bgt.n	be6fc <__aeabi_dmul+0x134>
   be6c4:	f104 0414 	add.w	r4, r4, #20
   be6c8:	f1c4 0520 	rsb	r5, r4, #32
   be6cc:	fa00 f305 	lsl.w	r3, r0, r5
   be6d0:	fa20 f004 	lsr.w	r0, r0, r4
   be6d4:	fa01 f205 	lsl.w	r2, r1, r5
   be6d8:	ea40 0002 	orr.w	r0, r0, r2
   be6dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   be6e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be6e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be6e8:	fa21 f604 	lsr.w	r6, r1, r4
   be6ec:	eb42 0106 	adc.w	r1, r2, r6
   be6f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be6f4:	bf08      	it	eq
   be6f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be6fa:	bd70      	pop	{r4, r5, r6, pc}
   be6fc:	f1c4 040c 	rsb	r4, r4, #12
   be700:	f1c4 0520 	rsb	r5, r4, #32
   be704:	fa00 f304 	lsl.w	r3, r0, r4
   be708:	fa20 f005 	lsr.w	r0, r0, r5
   be70c:	fa01 f204 	lsl.w	r2, r1, r4
   be710:	ea40 0002 	orr.w	r0, r0, r2
   be714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be71c:	f141 0100 	adc.w	r1, r1, #0
   be720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be724:	bf08      	it	eq
   be726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be72a:	bd70      	pop	{r4, r5, r6, pc}
   be72c:	f1c4 0520 	rsb	r5, r4, #32
   be730:	fa00 f205 	lsl.w	r2, r0, r5
   be734:	ea4e 0e02 	orr.w	lr, lr, r2
   be738:	fa20 f304 	lsr.w	r3, r0, r4
   be73c:	fa01 f205 	lsl.w	r2, r1, r5
   be740:	ea43 0302 	orr.w	r3, r3, r2
   be744:	fa21 f004 	lsr.w	r0, r1, r4
   be748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be74c:	fa21 f204 	lsr.w	r2, r1, r4
   be750:	ea20 0002 	bic.w	r0, r0, r2
   be754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   be758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be75c:	bf08      	it	eq
   be75e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be762:	bd70      	pop	{r4, r5, r6, pc}
   be764:	f094 0f00 	teq	r4, #0
   be768:	d10f      	bne.n	be78a <__aeabi_dmul+0x1c2>
   be76a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   be76e:	0040      	lsls	r0, r0, #1
   be770:	eb41 0101 	adc.w	r1, r1, r1
   be774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be778:	bf08      	it	eq
   be77a:	3c01      	subeq	r4, #1
   be77c:	d0f7      	beq.n	be76e <__aeabi_dmul+0x1a6>
   be77e:	ea41 0106 	orr.w	r1, r1, r6
   be782:	f095 0f00 	teq	r5, #0
   be786:	bf18      	it	ne
   be788:	4770      	bxne	lr
   be78a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   be78e:	0052      	lsls	r2, r2, #1
   be790:	eb43 0303 	adc.w	r3, r3, r3
   be794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   be798:	bf08      	it	eq
   be79a:	3d01      	subeq	r5, #1
   be79c:	d0f7      	beq.n	be78e <__aeabi_dmul+0x1c6>
   be79e:	ea43 0306 	orr.w	r3, r3, r6
   be7a2:	4770      	bx	lr
   be7a4:	ea94 0f0c 	teq	r4, ip
   be7a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be7ac:	bf18      	it	ne
   be7ae:	ea95 0f0c 	teqne	r5, ip
   be7b2:	d00c      	beq.n	be7ce <__aeabi_dmul+0x206>
   be7b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be7b8:	bf18      	it	ne
   be7ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be7be:	d1d1      	bne.n	be764 <__aeabi_dmul+0x19c>
   be7c0:	ea81 0103 	eor.w	r1, r1, r3
   be7c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be7c8:	f04f 0000 	mov.w	r0, #0
   be7cc:	bd70      	pop	{r4, r5, r6, pc}
   be7ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be7d2:	bf06      	itte	eq
   be7d4:	4610      	moveq	r0, r2
   be7d6:	4619      	moveq	r1, r3
   be7d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be7dc:	d019      	beq.n	be812 <__aeabi_dmul+0x24a>
   be7de:	ea94 0f0c 	teq	r4, ip
   be7e2:	d102      	bne.n	be7ea <__aeabi_dmul+0x222>
   be7e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   be7e8:	d113      	bne.n	be812 <__aeabi_dmul+0x24a>
   be7ea:	ea95 0f0c 	teq	r5, ip
   be7ee:	d105      	bne.n	be7fc <__aeabi_dmul+0x234>
   be7f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   be7f4:	bf1c      	itt	ne
   be7f6:	4610      	movne	r0, r2
   be7f8:	4619      	movne	r1, r3
   be7fa:	d10a      	bne.n	be812 <__aeabi_dmul+0x24a>
   be7fc:	ea81 0103 	eor.w	r1, r1, r3
   be800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be80c:	f04f 0000 	mov.w	r0, #0
   be810:	bd70      	pop	{r4, r5, r6, pc}
   be812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   be81a:	bd70      	pop	{r4, r5, r6, pc}

000be81c <__aeabi_ddiv>:
   be81c:	b570      	push	{r4, r5, r6, lr}
   be81e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be82a:	bf1d      	ittte	ne
   be82c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be830:	ea94 0f0c 	teqne	r4, ip
   be834:	ea95 0f0c 	teqne	r5, ip
   be838:	f000 f8a7 	bleq	be98a <__aeabi_ddiv+0x16e>
   be83c:	eba4 0405 	sub.w	r4, r4, r5
   be840:	ea81 0e03 	eor.w	lr, r1, r3
   be844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be848:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be84c:	f000 8088 	beq.w	be960 <__aeabi_ddiv+0x144>
   be850:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   be858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   be85c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   be860:	ea4f 2202 	mov.w	r2, r2, lsl #8
   be864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   be868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   be86c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   be870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   be874:	429d      	cmp	r5, r3
   be876:	bf08      	it	eq
   be878:	4296      	cmpeq	r6, r2
   be87a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   be87e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   be882:	d202      	bcs.n	be88a <__aeabi_ddiv+0x6e>
   be884:	085b      	lsrs	r3, r3, #1
   be886:	ea4f 0232 	mov.w	r2, r2, rrx
   be88a:	1ab6      	subs	r6, r6, r2
   be88c:	eb65 0503 	sbc.w	r5, r5, r3
   be890:	085b      	lsrs	r3, r3, #1
   be892:	ea4f 0232 	mov.w	r2, r2, rrx
   be896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   be89a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   be89e:	ebb6 0e02 	subs.w	lr, r6, r2
   be8a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   be8a6:	bf22      	ittt	cs
   be8a8:	1ab6      	subcs	r6, r6, r2
   be8aa:	4675      	movcs	r5, lr
   be8ac:	ea40 000c 	orrcs.w	r0, r0, ip
   be8b0:	085b      	lsrs	r3, r3, #1
   be8b2:	ea4f 0232 	mov.w	r2, r2, rrx
   be8b6:	ebb6 0e02 	subs.w	lr, r6, r2
   be8ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   be8be:	bf22      	ittt	cs
   be8c0:	1ab6      	subcs	r6, r6, r2
   be8c2:	4675      	movcs	r5, lr
   be8c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   be8c8:	085b      	lsrs	r3, r3, #1
   be8ca:	ea4f 0232 	mov.w	r2, r2, rrx
   be8ce:	ebb6 0e02 	subs.w	lr, r6, r2
   be8d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   be8d6:	bf22      	ittt	cs
   be8d8:	1ab6      	subcs	r6, r6, r2
   be8da:	4675      	movcs	r5, lr
   be8dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   be8e0:	085b      	lsrs	r3, r3, #1
   be8e2:	ea4f 0232 	mov.w	r2, r2, rrx
   be8e6:	ebb6 0e02 	subs.w	lr, r6, r2
   be8ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   be8ee:	bf22      	ittt	cs
   be8f0:	1ab6      	subcs	r6, r6, r2
   be8f2:	4675      	movcs	r5, lr
   be8f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   be8f8:	ea55 0e06 	orrs.w	lr, r5, r6
   be8fc:	d018      	beq.n	be930 <__aeabi_ddiv+0x114>
   be8fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   be902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   be906:	ea4f 1606 	mov.w	r6, r6, lsl #4
   be90a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   be90e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   be912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   be916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   be91a:	d1c0      	bne.n	be89e <__aeabi_ddiv+0x82>
   be91c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be920:	d10b      	bne.n	be93a <__aeabi_ddiv+0x11e>
   be922:	ea41 0100 	orr.w	r1, r1, r0
   be926:	f04f 0000 	mov.w	r0, #0
   be92a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   be92e:	e7b6      	b.n	be89e <__aeabi_ddiv+0x82>
   be930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be934:	bf04      	itt	eq
   be936:	4301      	orreq	r1, r0
   be938:	2000      	moveq	r0, #0
   be93a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be93e:	bf88      	it	hi
   be940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be944:	f63f aeaf 	bhi.w	be6a6 <__aeabi_dmul+0xde>
   be948:	ebb5 0c03 	subs.w	ip, r5, r3
   be94c:	bf04      	itt	eq
   be94e:	ebb6 0c02 	subseq.w	ip, r6, r2
   be952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be956:	f150 0000 	adcs.w	r0, r0, #0
   be95a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be95e:	bd70      	pop	{r4, r5, r6, pc}
   be960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   be964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   be968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   be96c:	bfc2      	ittt	gt
   be96e:	ebd4 050c 	rsbsgt	r5, r4, ip
   be972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be976:	bd70      	popgt	{r4, r5, r6, pc}
   be978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be97c:	f04f 0e00 	mov.w	lr, #0
   be980:	3c01      	subs	r4, #1
   be982:	e690      	b.n	be6a6 <__aeabi_dmul+0xde>
   be984:	ea45 0e06 	orr.w	lr, r5, r6
   be988:	e68d      	b.n	be6a6 <__aeabi_dmul+0xde>
   be98a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be98e:	ea94 0f0c 	teq	r4, ip
   be992:	bf08      	it	eq
   be994:	ea95 0f0c 	teqeq	r5, ip
   be998:	f43f af3b 	beq.w	be812 <__aeabi_dmul+0x24a>
   be99c:	ea94 0f0c 	teq	r4, ip
   be9a0:	d10a      	bne.n	be9b8 <__aeabi_ddiv+0x19c>
   be9a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be9a6:	f47f af34 	bne.w	be812 <__aeabi_dmul+0x24a>
   be9aa:	ea95 0f0c 	teq	r5, ip
   be9ae:	f47f af25 	bne.w	be7fc <__aeabi_dmul+0x234>
   be9b2:	4610      	mov	r0, r2
   be9b4:	4619      	mov	r1, r3
   be9b6:	e72c      	b.n	be812 <__aeabi_dmul+0x24a>
   be9b8:	ea95 0f0c 	teq	r5, ip
   be9bc:	d106      	bne.n	be9cc <__aeabi_ddiv+0x1b0>
   be9be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be9c2:	f43f aefd 	beq.w	be7c0 <__aeabi_dmul+0x1f8>
   be9c6:	4610      	mov	r0, r2
   be9c8:	4619      	mov	r1, r3
   be9ca:	e722      	b.n	be812 <__aeabi_dmul+0x24a>
   be9cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be9d0:	bf18      	it	ne
   be9d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be9d6:	f47f aec5 	bne.w	be764 <__aeabi_dmul+0x19c>
   be9da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   be9de:	f47f af0d 	bne.w	be7fc <__aeabi_dmul+0x234>
   be9e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   be9e6:	f47f aeeb 	bne.w	be7c0 <__aeabi_dmul+0x1f8>
   be9ea:	e712      	b.n	be812 <__aeabi_dmul+0x24a>

000be9ec <__gedf2>:
   be9ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   be9f0:	e006      	b.n	bea00 <__cmpdf2+0x4>
   be9f2:	bf00      	nop

000be9f4 <__ledf2>:
   be9f4:	f04f 0c01 	mov.w	ip, #1
   be9f8:	e002      	b.n	bea00 <__cmpdf2+0x4>
   be9fa:	bf00      	nop

000be9fc <__cmpdf2>:
   be9fc:	f04f 0c01 	mov.w	ip, #1
   bea00:	f84d cd04 	str.w	ip, [sp, #-4]!
   bea04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bea08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bea0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bea10:	bf18      	it	ne
   bea12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bea16:	d01b      	beq.n	bea50 <__cmpdf2+0x54>
   bea18:	b001      	add	sp, #4
   bea1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bea1e:	bf0c      	ite	eq
   bea20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bea24:	ea91 0f03 	teqne	r1, r3
   bea28:	bf02      	ittt	eq
   bea2a:	ea90 0f02 	teqeq	r0, r2
   bea2e:	2000      	moveq	r0, #0
   bea30:	4770      	bxeq	lr
   bea32:	f110 0f00 	cmn.w	r0, #0
   bea36:	ea91 0f03 	teq	r1, r3
   bea3a:	bf58      	it	pl
   bea3c:	4299      	cmppl	r1, r3
   bea3e:	bf08      	it	eq
   bea40:	4290      	cmpeq	r0, r2
   bea42:	bf2c      	ite	cs
   bea44:	17d8      	asrcs	r0, r3, #31
   bea46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bea4a:	f040 0001 	orr.w	r0, r0, #1
   bea4e:	4770      	bx	lr
   bea50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bea54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bea58:	d102      	bne.n	bea60 <__cmpdf2+0x64>
   bea5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bea5e:	d107      	bne.n	bea70 <__cmpdf2+0x74>
   bea60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bea64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bea68:	d1d6      	bne.n	bea18 <__cmpdf2+0x1c>
   bea6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bea6e:	d0d3      	beq.n	bea18 <__cmpdf2+0x1c>
   bea70:	f85d 0b04 	ldr.w	r0, [sp], #4
   bea74:	4770      	bx	lr
   bea76:	bf00      	nop

000bea78 <__aeabi_cdrcmple>:
   bea78:	4684      	mov	ip, r0
   bea7a:	4610      	mov	r0, r2
   bea7c:	4662      	mov	r2, ip
   bea7e:	468c      	mov	ip, r1
   bea80:	4619      	mov	r1, r3
   bea82:	4663      	mov	r3, ip
   bea84:	e000      	b.n	bea88 <__aeabi_cdcmpeq>
   bea86:	bf00      	nop

000bea88 <__aeabi_cdcmpeq>:
   bea88:	b501      	push	{r0, lr}
   bea8a:	f7ff ffb7 	bl	be9fc <__cmpdf2>
   bea8e:	2800      	cmp	r0, #0
   bea90:	bf48      	it	mi
   bea92:	f110 0f00 	cmnmi.w	r0, #0
   bea96:	bd01      	pop	{r0, pc}

000bea98 <__aeabi_dcmpeq>:
   bea98:	f84d ed08 	str.w	lr, [sp, #-8]!
   bea9c:	f7ff fff4 	bl	bea88 <__aeabi_cdcmpeq>
   beaa0:	bf0c      	ite	eq
   beaa2:	2001      	moveq	r0, #1
   beaa4:	2000      	movne	r0, #0
   beaa6:	f85d fb08 	ldr.w	pc, [sp], #8
   beaaa:	bf00      	nop

000beaac <__aeabi_dcmplt>:
   beaac:	f84d ed08 	str.w	lr, [sp, #-8]!
   beab0:	f7ff ffea 	bl	bea88 <__aeabi_cdcmpeq>
   beab4:	bf34      	ite	cc
   beab6:	2001      	movcc	r0, #1
   beab8:	2000      	movcs	r0, #0
   beaba:	f85d fb08 	ldr.w	pc, [sp], #8
   beabe:	bf00      	nop

000beac0 <__aeabi_dcmple>:
   beac0:	f84d ed08 	str.w	lr, [sp, #-8]!
   beac4:	f7ff ffe0 	bl	bea88 <__aeabi_cdcmpeq>
   beac8:	bf94      	ite	ls
   beaca:	2001      	movls	r0, #1
   beacc:	2000      	movhi	r0, #0
   beace:	f85d fb08 	ldr.w	pc, [sp], #8
   bead2:	bf00      	nop

000bead4 <__aeabi_dcmpge>:
   bead4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bead8:	f7ff ffce 	bl	bea78 <__aeabi_cdrcmple>
   beadc:	bf94      	ite	ls
   beade:	2001      	movls	r0, #1
   beae0:	2000      	movhi	r0, #0
   beae2:	f85d fb08 	ldr.w	pc, [sp], #8
   beae6:	bf00      	nop

000beae8 <__aeabi_dcmpgt>:
   beae8:	f84d ed08 	str.w	lr, [sp, #-8]!
   beaec:	f7ff ffc4 	bl	bea78 <__aeabi_cdrcmple>
   beaf0:	bf34      	ite	cc
   beaf2:	2001      	movcc	r0, #1
   beaf4:	2000      	movcs	r0, #0
   beaf6:	f85d fb08 	ldr.w	pc, [sp], #8
   beafa:	bf00      	nop

000beafc <__aeabi_dcmpun>:
   beafc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   beb00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   beb04:	d102      	bne.n	beb0c <__aeabi_dcmpun+0x10>
   beb06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   beb0a:	d10a      	bne.n	beb22 <__aeabi_dcmpun+0x26>
   beb0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   beb10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   beb14:	d102      	bne.n	beb1c <__aeabi_dcmpun+0x20>
   beb16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   beb1a:	d102      	bne.n	beb22 <__aeabi_dcmpun+0x26>
   beb1c:	f04f 0000 	mov.w	r0, #0
   beb20:	4770      	bx	lr
   beb22:	f04f 0001 	mov.w	r0, #1
   beb26:	4770      	bx	lr

000beb28 <__aeabi_d2iz>:
   beb28:	ea4f 0241 	mov.w	r2, r1, lsl #1
   beb2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   beb30:	d215      	bcs.n	beb5e <__aeabi_d2iz+0x36>
   beb32:	d511      	bpl.n	beb58 <__aeabi_d2iz+0x30>
   beb34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   beb38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   beb3c:	d912      	bls.n	beb64 <__aeabi_d2iz+0x3c>
   beb3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   beb42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   beb46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   beb4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   beb4e:	fa23 f002 	lsr.w	r0, r3, r2
   beb52:	bf18      	it	ne
   beb54:	4240      	negne	r0, r0
   beb56:	4770      	bx	lr
   beb58:	f04f 0000 	mov.w	r0, #0
   beb5c:	4770      	bx	lr
   beb5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   beb62:	d105      	bne.n	beb70 <__aeabi_d2iz+0x48>
   beb64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   beb68:	bf08      	it	eq
   beb6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   beb6e:	4770      	bx	lr
   beb70:	f04f 0000 	mov.w	r0, #0
   beb74:	4770      	bx	lr
   beb76:	bf00      	nop

000beb78 <__aeabi_d2uiz>:
   beb78:	004a      	lsls	r2, r1, #1
   beb7a:	d211      	bcs.n	beba0 <__aeabi_d2uiz+0x28>
   beb7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   beb80:	d211      	bcs.n	beba6 <__aeabi_d2uiz+0x2e>
   beb82:	d50d      	bpl.n	beba0 <__aeabi_d2uiz+0x28>
   beb84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   beb88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   beb8c:	d40e      	bmi.n	bebac <__aeabi_d2uiz+0x34>
   beb8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   beb92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   beb96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   beb9a:	fa23 f002 	lsr.w	r0, r3, r2
   beb9e:	4770      	bx	lr
   beba0:	f04f 0000 	mov.w	r0, #0
   beba4:	4770      	bx	lr
   beba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bebaa:	d102      	bne.n	bebb2 <__aeabi_d2uiz+0x3a>
   bebac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bebb0:	4770      	bx	lr
   bebb2:	f04f 0000 	mov.w	r0, #0
   bebb6:	4770      	bx	lr

000bebb8 <asctime_r>:
   bebb8:	b510      	push	{r4, lr}
   bebba:	460c      	mov	r4, r1
   bebbc:	6941      	ldr	r1, [r0, #20]
   bebbe:	6903      	ldr	r3, [r0, #16]
   bebc0:	6982      	ldr	r2, [r0, #24]
   bebc2:	b086      	sub	sp, #24
   bebc4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bebc8:	9104      	str	r1, [sp, #16]
   bebca:	6801      	ldr	r1, [r0, #0]
   bebcc:	9103      	str	r1, [sp, #12]
   bebce:	6841      	ldr	r1, [r0, #4]
   bebd0:	9102      	str	r1, [sp, #8]
   bebd2:	6881      	ldr	r1, [r0, #8]
   bebd4:	9101      	str	r1, [sp, #4]
   bebd6:	68c1      	ldr	r1, [r0, #12]
   bebd8:	9100      	str	r1, [sp, #0]
   bebda:	4907      	ldr	r1, [pc, #28]	; (bebf8 <asctime_r+0x40>)
   bebdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bebe0:	440b      	add	r3, r1
   bebe2:	4906      	ldr	r1, [pc, #24]	; (bebfc <asctime_r+0x44>)
   bebe4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bebe8:	440a      	add	r2, r1
   bebea:	4620      	mov	r0, r4
   bebec:	4904      	ldr	r1, [pc, #16]	; (bec00 <asctime_r+0x48>)
   bebee:	f7fc f925 	bl	bae3c <siprintf>
   bebf2:	4620      	mov	r0, r4
   bebf4:	b006      	add	sp, #24
   bebf6:	bd10      	pop	{r4, pc}
   bebf8:	000c0996 	.word	0x000c0996
   bebfc:	000c0981 	.word	0x000c0981
   bec00:	000c0961 	.word	0x000c0961

000bec04 <atexit>:
   bec04:	2300      	movs	r3, #0
   bec06:	4601      	mov	r1, r0
   bec08:	461a      	mov	r2, r3
   bec0a:	4618      	mov	r0, r3
   bec0c:	f000 ba70 	b.w	bf0f0 <__register_exitproc>

000bec10 <gmtime>:
   bec10:	b538      	push	{r3, r4, r5, lr}
   bec12:	4b0b      	ldr	r3, [pc, #44]	; (bec40 <gmtime+0x30>)
   bec14:	681d      	ldr	r5, [r3, #0]
   bec16:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bec18:	4604      	mov	r4, r0
   bec1a:	b953      	cbnz	r3, bec32 <gmtime+0x22>
   bec1c:	2024      	movs	r0, #36	; 0x24
   bec1e:	f7fc f8f5 	bl	bae0c <malloc>
   bec22:	4602      	mov	r2, r0
   bec24:	63e8      	str	r0, [r5, #60]	; 0x3c
   bec26:	b920      	cbnz	r0, bec32 <gmtime+0x22>
   bec28:	4b06      	ldr	r3, [pc, #24]	; (bec44 <gmtime+0x34>)
   bec2a:	4807      	ldr	r0, [pc, #28]	; (bec48 <gmtime+0x38>)
   bec2c:	2139      	movs	r1, #57	; 0x39
   bec2e:	f7fc f93d 	bl	baeac <__assert_func>
   bec32:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bec34:	4620      	mov	r0, r4
   bec36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bec3a:	f7fc b957 	b.w	baeec <gmtime_r>
   bec3e:	bf00      	nop
   bec40:	2003de8c 	.word	0x2003de8c
   bec44:	000c09ba 	.word	0x000c09ba
   bec48:	000c09d1 	.word	0x000c09d1

000bec4c <isprint>:
   bec4c:	4b02      	ldr	r3, [pc, #8]	; (bec58 <isprint+0xc>)
   bec4e:	4418      	add	r0, r3
   bec50:	7840      	ldrb	r0, [r0, #1]
   bec52:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bec56:	4770      	bx	lr
   bec58:	000c0a83 	.word	0x000c0a83

000bec5c <memcpy>:
   bec5c:	440a      	add	r2, r1
   bec5e:	4291      	cmp	r1, r2
   bec60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bec64:	d100      	bne.n	bec68 <memcpy+0xc>
   bec66:	4770      	bx	lr
   bec68:	b510      	push	{r4, lr}
   bec6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   bec6e:	f803 4f01 	strb.w	r4, [r3, #1]!
   bec72:	4291      	cmp	r1, r2
   bec74:	d1f9      	bne.n	bec6a <memcpy+0xe>
   bec76:	bd10      	pop	{r4, pc}

000bec78 <memmove>:
   bec78:	4288      	cmp	r0, r1
   bec7a:	b510      	push	{r4, lr}
   bec7c:	eb01 0402 	add.w	r4, r1, r2
   bec80:	d902      	bls.n	bec88 <memmove+0x10>
   bec82:	4284      	cmp	r4, r0
   bec84:	4623      	mov	r3, r4
   bec86:	d807      	bhi.n	bec98 <memmove+0x20>
   bec88:	1e43      	subs	r3, r0, #1
   bec8a:	42a1      	cmp	r1, r4
   bec8c:	d008      	beq.n	beca0 <memmove+0x28>
   bec8e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bec92:	f803 2f01 	strb.w	r2, [r3, #1]!
   bec96:	e7f8      	b.n	bec8a <memmove+0x12>
   bec98:	4402      	add	r2, r0
   bec9a:	4601      	mov	r1, r0
   bec9c:	428a      	cmp	r2, r1
   bec9e:	d100      	bne.n	beca2 <memmove+0x2a>
   beca0:	bd10      	pop	{r4, pc}
   beca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   beca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   becaa:	e7f7      	b.n	bec9c <memmove+0x24>

000becac <memset>:
   becac:	4402      	add	r2, r0
   becae:	4603      	mov	r3, r0
   becb0:	4293      	cmp	r3, r2
   becb2:	d100      	bne.n	becb6 <memset+0xa>
   becb4:	4770      	bx	lr
   becb6:	f803 1b01 	strb.w	r1, [r3], #1
   becba:	e7f9      	b.n	becb0 <memset+0x4>

000becbc <srand>:
   becbc:	b538      	push	{r3, r4, r5, lr}
   becbe:	4b10      	ldr	r3, [pc, #64]	; (bed00 <srand+0x44>)
   becc0:	681d      	ldr	r5, [r3, #0]
   becc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   becc4:	4604      	mov	r4, r0
   becc6:	b9b3      	cbnz	r3, becf6 <srand+0x3a>
   becc8:	2018      	movs	r0, #24
   becca:	f7fc f89f 	bl	bae0c <malloc>
   becce:	4602      	mov	r2, r0
   becd0:	63a8      	str	r0, [r5, #56]	; 0x38
   becd2:	b920      	cbnz	r0, becde <srand+0x22>
   becd4:	4b0b      	ldr	r3, [pc, #44]	; (bed04 <srand+0x48>)
   becd6:	480c      	ldr	r0, [pc, #48]	; (bed08 <srand+0x4c>)
   becd8:	2142      	movs	r1, #66	; 0x42
   becda:	f7fc f8e7 	bl	baeac <__assert_func>
   becde:	490b      	ldr	r1, [pc, #44]	; (bed0c <srand+0x50>)
   bece0:	4b0b      	ldr	r3, [pc, #44]	; (bed10 <srand+0x54>)
   bece2:	e9c0 1300 	strd	r1, r3, [r0]
   bece6:	4b0b      	ldr	r3, [pc, #44]	; (bed14 <srand+0x58>)
   bece8:	6083      	str	r3, [r0, #8]
   becea:	230b      	movs	r3, #11
   becec:	8183      	strh	r3, [r0, #12]
   becee:	2100      	movs	r1, #0
   becf0:	2001      	movs	r0, #1
   becf2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   becf6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   becf8:	2200      	movs	r2, #0
   becfa:	611c      	str	r4, [r3, #16]
   becfc:	615a      	str	r2, [r3, #20]
   becfe:	bd38      	pop	{r3, r4, r5, pc}
   bed00:	2003de8c 	.word	0x2003de8c
   bed04:	000c09ba 	.word	0x000c09ba
   bed08:	000c0a2a 	.word	0x000c0a2a
   bed0c:	abcd330e 	.word	0xabcd330e
   bed10:	e66d1234 	.word	0xe66d1234
   bed14:	0005deec 	.word	0x0005deec

000bed18 <rand>:
   bed18:	4b16      	ldr	r3, [pc, #88]	; (bed74 <rand+0x5c>)
   bed1a:	b510      	push	{r4, lr}
   bed1c:	681c      	ldr	r4, [r3, #0]
   bed1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bed20:	b9b3      	cbnz	r3, bed50 <rand+0x38>
   bed22:	2018      	movs	r0, #24
   bed24:	f7fc f872 	bl	bae0c <malloc>
   bed28:	63a0      	str	r0, [r4, #56]	; 0x38
   bed2a:	b928      	cbnz	r0, bed38 <rand+0x20>
   bed2c:	4602      	mov	r2, r0
   bed2e:	4b12      	ldr	r3, [pc, #72]	; (bed78 <rand+0x60>)
   bed30:	4812      	ldr	r0, [pc, #72]	; (bed7c <rand+0x64>)
   bed32:	214e      	movs	r1, #78	; 0x4e
   bed34:	f7fc f8ba 	bl	baeac <__assert_func>
   bed38:	4a11      	ldr	r2, [pc, #68]	; (bed80 <rand+0x68>)
   bed3a:	4b12      	ldr	r3, [pc, #72]	; (bed84 <rand+0x6c>)
   bed3c:	e9c0 2300 	strd	r2, r3, [r0]
   bed40:	4b11      	ldr	r3, [pc, #68]	; (bed88 <rand+0x70>)
   bed42:	6083      	str	r3, [r0, #8]
   bed44:	230b      	movs	r3, #11
   bed46:	8183      	strh	r3, [r0, #12]
   bed48:	2201      	movs	r2, #1
   bed4a:	2300      	movs	r3, #0
   bed4c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bed50:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bed52:	4a0e      	ldr	r2, [pc, #56]	; (bed8c <rand+0x74>)
   bed54:	6920      	ldr	r0, [r4, #16]
   bed56:	6963      	ldr	r3, [r4, #20]
   bed58:	490d      	ldr	r1, [pc, #52]	; (bed90 <rand+0x78>)
   bed5a:	4342      	muls	r2, r0
   bed5c:	fb01 2203 	mla	r2, r1, r3, r2
   bed60:	fba0 0101 	umull	r0, r1, r0, r1
   bed64:	1c43      	adds	r3, r0, #1
   bed66:	eb42 0001 	adc.w	r0, r2, r1
   bed6a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bed6e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bed72:	bd10      	pop	{r4, pc}
   bed74:	2003de8c 	.word	0x2003de8c
   bed78:	000c09ba 	.word	0x000c09ba
   bed7c:	000c0a2a 	.word	0x000c0a2a
   bed80:	abcd330e 	.word	0xabcd330e
   bed84:	e66d1234 	.word	0xe66d1234
   bed88:	0005deec 	.word	0x0005deec
   bed8c:	5851f42d 	.word	0x5851f42d
   bed90:	4c957f2d 	.word	0x4c957f2d

000bed94 <strchr>:
   bed94:	b2c9      	uxtb	r1, r1
   bed96:	4603      	mov	r3, r0
   bed98:	f810 2b01 	ldrb.w	r2, [r0], #1
   bed9c:	b11a      	cbz	r2, beda6 <strchr+0x12>
   bed9e:	428a      	cmp	r2, r1
   beda0:	d1f9      	bne.n	bed96 <strchr+0x2>
   beda2:	4618      	mov	r0, r3
   beda4:	4770      	bx	lr
   beda6:	2900      	cmp	r1, #0
   beda8:	bf18      	it	ne
   bedaa:	2300      	movne	r3, #0
   bedac:	e7f9      	b.n	beda2 <strchr+0xe>

000bedae <strchrnul>:
   bedae:	b510      	push	{r4, lr}
   bedb0:	4604      	mov	r4, r0
   bedb2:	f7ff ffef 	bl	bed94 <strchr>
   bedb6:	b918      	cbnz	r0, bedc0 <strchrnul+0x12>
   bedb8:	4620      	mov	r0, r4
   bedba:	f000 f832 	bl	bee22 <strlen>
   bedbe:	4420      	add	r0, r4
   bedc0:	bd10      	pop	{r4, pc}

000bedc2 <strcmp>:
   bedc2:	f810 2b01 	ldrb.w	r2, [r0], #1
   bedc6:	f811 3b01 	ldrb.w	r3, [r1], #1
   bedca:	2a01      	cmp	r2, #1
   bedcc:	bf28      	it	cs
   bedce:	429a      	cmpcs	r2, r3
   bedd0:	d0f7      	beq.n	bedc2 <strcmp>
   bedd2:	1ad0      	subs	r0, r2, r3
   bedd4:	4770      	bx	lr

000bedd6 <strcpy>:
   bedd6:	4603      	mov	r3, r0
   bedd8:	f811 2b01 	ldrb.w	r2, [r1], #1
   beddc:	f803 2b01 	strb.w	r2, [r3], #1
   bede0:	2a00      	cmp	r2, #0
   bede2:	d1f9      	bne.n	bedd8 <strcpy+0x2>
   bede4:	4770      	bx	lr
	...

000bede8 <strdup>:
   bede8:	4b02      	ldr	r3, [pc, #8]	; (bedf4 <strdup+0xc>)
   bedea:	4601      	mov	r1, r0
   bedec:	6818      	ldr	r0, [r3, #0]
   bedee:	f000 b803 	b.w	bedf8 <_strdup_r>
   bedf2:	bf00      	nop
   bedf4:	2003de8c 	.word	0x2003de8c

000bedf8 <_strdup_r>:
   bedf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bedfa:	4604      	mov	r4, r0
   bedfc:	4608      	mov	r0, r1
   bedfe:	460d      	mov	r5, r1
   bee00:	f000 f80f 	bl	bee22 <strlen>
   bee04:	1c42      	adds	r2, r0, #1
   bee06:	4611      	mov	r1, r2
   bee08:	4620      	mov	r0, r4
   bee0a:	9201      	str	r2, [sp, #4]
   bee0c:	f7fc f83e 	bl	bae8c <_malloc_r>
   bee10:	4604      	mov	r4, r0
   bee12:	b118      	cbz	r0, bee1c <_strdup_r+0x24>
   bee14:	9a01      	ldr	r2, [sp, #4]
   bee16:	4629      	mov	r1, r5
   bee18:	f7ff ff20 	bl	bec5c <memcpy>
   bee1c:	4620      	mov	r0, r4
   bee1e:	b003      	add	sp, #12
   bee20:	bd30      	pop	{r4, r5, pc}

000bee22 <strlen>:
   bee22:	4603      	mov	r3, r0
   bee24:	f813 2b01 	ldrb.w	r2, [r3], #1
   bee28:	2a00      	cmp	r2, #0
   bee2a:	d1fb      	bne.n	bee24 <strlen+0x2>
   bee2c:	1a18      	subs	r0, r3, r0
   bee2e:	3801      	subs	r0, #1
   bee30:	4770      	bx	lr

000bee32 <strncmp>:
   bee32:	b510      	push	{r4, lr}
   bee34:	b17a      	cbz	r2, bee56 <strncmp+0x24>
   bee36:	4603      	mov	r3, r0
   bee38:	3901      	subs	r1, #1
   bee3a:	1884      	adds	r4, r0, r2
   bee3c:	f813 0b01 	ldrb.w	r0, [r3], #1
   bee40:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bee44:	4290      	cmp	r0, r2
   bee46:	d101      	bne.n	bee4c <strncmp+0x1a>
   bee48:	42a3      	cmp	r3, r4
   bee4a:	d101      	bne.n	bee50 <strncmp+0x1e>
   bee4c:	1a80      	subs	r0, r0, r2
   bee4e:	bd10      	pop	{r4, pc}
   bee50:	2800      	cmp	r0, #0
   bee52:	d1f3      	bne.n	bee3c <strncmp+0xa>
   bee54:	e7fa      	b.n	bee4c <strncmp+0x1a>
   bee56:	4610      	mov	r0, r2
   bee58:	e7f9      	b.n	bee4e <strncmp+0x1c>

000bee5a <strncpy>:
   bee5a:	b510      	push	{r4, lr}
   bee5c:	3901      	subs	r1, #1
   bee5e:	4603      	mov	r3, r0
   bee60:	b132      	cbz	r2, bee70 <strncpy+0x16>
   bee62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bee66:	f803 4b01 	strb.w	r4, [r3], #1
   bee6a:	3a01      	subs	r2, #1
   bee6c:	2c00      	cmp	r4, #0
   bee6e:	d1f7      	bne.n	bee60 <strncpy+0x6>
   bee70:	441a      	add	r2, r3
   bee72:	2100      	movs	r1, #0
   bee74:	4293      	cmp	r3, r2
   bee76:	d100      	bne.n	bee7a <strncpy+0x20>
   bee78:	bd10      	pop	{r4, pc}
   bee7a:	f803 1b01 	strb.w	r1, [r3], #1
   bee7e:	e7f9      	b.n	bee74 <strncpy+0x1a>

000bee80 <strrchr>:
   bee80:	b538      	push	{r3, r4, r5, lr}
   bee82:	4603      	mov	r3, r0
   bee84:	460c      	mov	r4, r1
   bee86:	b969      	cbnz	r1, beea4 <strrchr+0x24>
   bee88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bee8c:	f7ff bf82 	b.w	bed94 <strchr>
   bee90:	1c43      	adds	r3, r0, #1
   bee92:	4605      	mov	r5, r0
   bee94:	4621      	mov	r1, r4
   bee96:	4618      	mov	r0, r3
   bee98:	f7ff ff7c 	bl	bed94 <strchr>
   bee9c:	2800      	cmp	r0, #0
   bee9e:	d1f7      	bne.n	bee90 <strrchr+0x10>
   beea0:	4628      	mov	r0, r5
   beea2:	bd38      	pop	{r3, r4, r5, pc}
   beea4:	2500      	movs	r5, #0
   beea6:	e7f5      	b.n	bee94 <strrchr+0x14>

000beea8 <__strtok_r>:
   beea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   beeaa:	b908      	cbnz	r0, beeb0 <__strtok_r+0x8>
   beeac:	6810      	ldr	r0, [r2, #0]
   beeae:	b188      	cbz	r0, beed4 <__strtok_r+0x2c>
   beeb0:	4604      	mov	r4, r0
   beeb2:	4620      	mov	r0, r4
   beeb4:	f814 5b01 	ldrb.w	r5, [r4], #1
   beeb8:	460f      	mov	r7, r1
   beeba:	f817 6b01 	ldrb.w	r6, [r7], #1
   beebe:	b91e      	cbnz	r6, beec8 <__strtok_r+0x20>
   beec0:	b965      	cbnz	r5, beedc <__strtok_r+0x34>
   beec2:	6015      	str	r5, [r2, #0]
   beec4:	4628      	mov	r0, r5
   beec6:	e005      	b.n	beed4 <__strtok_r+0x2c>
   beec8:	42b5      	cmp	r5, r6
   beeca:	d1f6      	bne.n	beeba <__strtok_r+0x12>
   beecc:	2b00      	cmp	r3, #0
   beece:	d1f0      	bne.n	beeb2 <__strtok_r+0xa>
   beed0:	6014      	str	r4, [r2, #0]
   beed2:	7003      	strb	r3, [r0, #0]
   beed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   beed6:	461c      	mov	r4, r3
   beed8:	e00c      	b.n	beef4 <__strtok_r+0x4c>
   beeda:	b915      	cbnz	r5, beee2 <__strtok_r+0x3a>
   beedc:	f814 3b01 	ldrb.w	r3, [r4], #1
   beee0:	460e      	mov	r6, r1
   beee2:	f816 5b01 	ldrb.w	r5, [r6], #1
   beee6:	42ab      	cmp	r3, r5
   beee8:	d1f7      	bne.n	beeda <__strtok_r+0x32>
   beeea:	2b00      	cmp	r3, #0
   beeec:	d0f3      	beq.n	beed6 <__strtok_r+0x2e>
   beeee:	2300      	movs	r3, #0
   beef0:	f804 3c01 	strb.w	r3, [r4, #-1]
   beef4:	6014      	str	r4, [r2, #0]
   beef6:	e7ed      	b.n	beed4 <__strtok_r+0x2c>

000beef8 <strtok_r>:
   beef8:	2301      	movs	r3, #1
   beefa:	f7ff bfd5 	b.w	beea8 <__strtok_r>
	...

000bef00 <_strtol_l.constprop.0>:
   bef00:	2b01      	cmp	r3, #1
   bef02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bef06:	d001      	beq.n	bef0c <_strtol_l.constprop.0+0xc>
   bef08:	2b24      	cmp	r3, #36	; 0x24
   bef0a:	d906      	bls.n	bef1a <_strtol_l.constprop.0+0x1a>
   bef0c:	f7fb ffc6 	bl	bae9c <__errno>
   bef10:	2316      	movs	r3, #22
   bef12:	6003      	str	r3, [r0, #0]
   bef14:	2000      	movs	r0, #0
   bef16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bef1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bf000 <_strtol_l.constprop.0+0x100>
   bef1e:	460d      	mov	r5, r1
   bef20:	462e      	mov	r6, r5
   bef22:	f815 4b01 	ldrb.w	r4, [r5], #1
   bef26:	f814 700c 	ldrb.w	r7, [r4, ip]
   bef2a:	f017 0708 	ands.w	r7, r7, #8
   bef2e:	d1f7      	bne.n	bef20 <_strtol_l.constprop.0+0x20>
   bef30:	2c2d      	cmp	r4, #45	; 0x2d
   bef32:	d132      	bne.n	bef9a <_strtol_l.constprop.0+0x9a>
   bef34:	782c      	ldrb	r4, [r5, #0]
   bef36:	2701      	movs	r7, #1
   bef38:	1cb5      	adds	r5, r6, #2
   bef3a:	2b00      	cmp	r3, #0
   bef3c:	d05b      	beq.n	beff6 <_strtol_l.constprop.0+0xf6>
   bef3e:	2b10      	cmp	r3, #16
   bef40:	d109      	bne.n	bef56 <_strtol_l.constprop.0+0x56>
   bef42:	2c30      	cmp	r4, #48	; 0x30
   bef44:	d107      	bne.n	bef56 <_strtol_l.constprop.0+0x56>
   bef46:	782c      	ldrb	r4, [r5, #0]
   bef48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bef4c:	2c58      	cmp	r4, #88	; 0x58
   bef4e:	d14d      	bne.n	befec <_strtol_l.constprop.0+0xec>
   bef50:	786c      	ldrb	r4, [r5, #1]
   bef52:	2310      	movs	r3, #16
   bef54:	3502      	adds	r5, #2
   bef56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bef5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bef5e:	f04f 0c00 	mov.w	ip, #0
   bef62:	fbb8 f9f3 	udiv	r9, r8, r3
   bef66:	4666      	mov	r6, ip
   bef68:	fb03 8a19 	mls	sl, r3, r9, r8
   bef6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bef70:	f1be 0f09 	cmp.w	lr, #9
   bef74:	d816      	bhi.n	befa4 <_strtol_l.constprop.0+0xa4>
   bef76:	4674      	mov	r4, lr
   bef78:	42a3      	cmp	r3, r4
   bef7a:	dd24      	ble.n	befc6 <_strtol_l.constprop.0+0xc6>
   bef7c:	f1bc 0f00 	cmp.w	ip, #0
   bef80:	db1e      	blt.n	befc0 <_strtol_l.constprop.0+0xc0>
   bef82:	45b1      	cmp	r9, r6
   bef84:	d31c      	bcc.n	befc0 <_strtol_l.constprop.0+0xc0>
   bef86:	d101      	bne.n	bef8c <_strtol_l.constprop.0+0x8c>
   bef88:	45a2      	cmp	sl, r4
   bef8a:	db19      	blt.n	befc0 <_strtol_l.constprop.0+0xc0>
   bef8c:	fb06 4603 	mla	r6, r6, r3, r4
   bef90:	f04f 0c01 	mov.w	ip, #1
   bef94:	f815 4b01 	ldrb.w	r4, [r5], #1
   bef98:	e7e8      	b.n	bef6c <_strtol_l.constprop.0+0x6c>
   bef9a:	2c2b      	cmp	r4, #43	; 0x2b
   bef9c:	bf04      	itt	eq
   bef9e:	782c      	ldrbeq	r4, [r5, #0]
   befa0:	1cb5      	addeq	r5, r6, #2
   befa2:	e7ca      	b.n	bef3a <_strtol_l.constprop.0+0x3a>
   befa4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   befa8:	f1be 0f19 	cmp.w	lr, #25
   befac:	d801      	bhi.n	befb2 <_strtol_l.constprop.0+0xb2>
   befae:	3c37      	subs	r4, #55	; 0x37
   befb0:	e7e2      	b.n	bef78 <_strtol_l.constprop.0+0x78>
   befb2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   befb6:	f1be 0f19 	cmp.w	lr, #25
   befba:	d804      	bhi.n	befc6 <_strtol_l.constprop.0+0xc6>
   befbc:	3c57      	subs	r4, #87	; 0x57
   befbe:	e7db      	b.n	bef78 <_strtol_l.constprop.0+0x78>
   befc0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   befc4:	e7e6      	b.n	bef94 <_strtol_l.constprop.0+0x94>
   befc6:	f1bc 0f00 	cmp.w	ip, #0
   befca:	da05      	bge.n	befd8 <_strtol_l.constprop.0+0xd8>
   befcc:	2322      	movs	r3, #34	; 0x22
   befce:	6003      	str	r3, [r0, #0]
   befd0:	4646      	mov	r6, r8
   befd2:	b942      	cbnz	r2, befe6 <_strtol_l.constprop.0+0xe6>
   befd4:	4630      	mov	r0, r6
   befd6:	e79e      	b.n	bef16 <_strtol_l.constprop.0+0x16>
   befd8:	b107      	cbz	r7, befdc <_strtol_l.constprop.0+0xdc>
   befda:	4276      	negs	r6, r6
   befdc:	2a00      	cmp	r2, #0
   befde:	d0f9      	beq.n	befd4 <_strtol_l.constprop.0+0xd4>
   befe0:	f1bc 0f00 	cmp.w	ip, #0
   befe4:	d000      	beq.n	befe8 <_strtol_l.constprop.0+0xe8>
   befe6:	1e69      	subs	r1, r5, #1
   befe8:	6011      	str	r1, [r2, #0]
   befea:	e7f3      	b.n	befd4 <_strtol_l.constprop.0+0xd4>
   befec:	2430      	movs	r4, #48	; 0x30
   befee:	2b00      	cmp	r3, #0
   beff0:	d1b1      	bne.n	bef56 <_strtol_l.constprop.0+0x56>
   beff2:	2308      	movs	r3, #8
   beff4:	e7af      	b.n	bef56 <_strtol_l.constprop.0+0x56>
   beff6:	2c30      	cmp	r4, #48	; 0x30
   beff8:	d0a5      	beq.n	bef46 <_strtol_l.constprop.0+0x46>
   beffa:	230a      	movs	r3, #10
   beffc:	e7ab      	b.n	bef56 <_strtol_l.constprop.0+0x56>
   beffe:	bf00      	nop
   bf000:	000c0a84 	.word	0x000c0a84

000bf004 <strtol>:
   bf004:	4613      	mov	r3, r2
   bf006:	460a      	mov	r2, r1
   bf008:	4601      	mov	r1, r0
   bf00a:	4802      	ldr	r0, [pc, #8]	; (bf014 <strtol+0x10>)
   bf00c:	6800      	ldr	r0, [r0, #0]
   bf00e:	f7ff bf77 	b.w	bef00 <_strtol_l.constprop.0>
   bf012:	bf00      	nop
   bf014:	2003de8c 	.word	0x2003de8c

000bf018 <close>:
   bf018:	4b02      	ldr	r3, [pc, #8]	; (bf024 <close+0xc>)
   bf01a:	4601      	mov	r1, r0
   bf01c:	6818      	ldr	r0, [r3, #0]
   bf01e:	f000 b8c9 	b.w	bf1b4 <_close_r>
   bf022:	bf00      	nop
   bf024:	2003de8c 	.word	0x2003de8c

000bf028 <fstat>:
   bf028:	4b02      	ldr	r3, [pc, #8]	; (bf034 <fstat+0xc>)
   bf02a:	460a      	mov	r2, r1
   bf02c:	4601      	mov	r1, r0
   bf02e:	6818      	ldr	r0, [r3, #0]
   bf030:	f000 b8d0 	b.w	bf1d4 <_fstat_r>
   bf034:	2003de8c 	.word	0x2003de8c

000bf038 <lseek>:
   bf038:	4613      	mov	r3, r2
   bf03a:	460a      	mov	r2, r1
   bf03c:	4601      	mov	r1, r0
   bf03e:	4802      	ldr	r0, [pc, #8]	; (bf048 <lseek+0x10>)
   bf040:	6800      	ldr	r0, [r0, #0]
   bf042:	f000 b8dd 	b.w	bf200 <_lseek_r>
   bf046:	bf00      	nop
   bf048:	2003de8c 	.word	0x2003de8c

000bf04c <open>:
   bf04c:	b40e      	push	{r1, r2, r3}
   bf04e:	b503      	push	{r0, r1, lr}
   bf050:	ab03      	add	r3, sp, #12
   bf052:	4601      	mov	r1, r0
   bf054:	4806      	ldr	r0, [pc, #24]	; (bf070 <open+0x24>)
   bf056:	f853 2b04 	ldr.w	r2, [r3], #4
   bf05a:	9301      	str	r3, [sp, #4]
   bf05c:	6800      	ldr	r0, [r0, #0]
   bf05e:	9b04      	ldr	r3, [sp, #16]
   bf060:	f000 f8e0 	bl	bf224 <_open_r>
   bf064:	b002      	add	sp, #8
   bf066:	f85d eb04 	ldr.w	lr, [sp], #4
   bf06a:	b003      	add	sp, #12
   bf06c:	4770      	bx	lr
   bf06e:	bf00      	nop
   bf070:	2003de8c 	.word	0x2003de8c

000bf074 <read>:
   bf074:	4613      	mov	r3, r2
   bf076:	460a      	mov	r2, r1
   bf078:	4601      	mov	r1, r0
   bf07a:	4802      	ldr	r0, [pc, #8]	; (bf084 <read+0x10>)
   bf07c:	6800      	ldr	r0, [r0, #0]
   bf07e:	f000 b8e3 	b.w	bf248 <_read_r>
   bf082:	bf00      	nop
   bf084:	2003de8c 	.word	0x2003de8c

000bf088 <unlink>:
   bf088:	4b02      	ldr	r3, [pc, #8]	; (bf094 <unlink+0xc>)
   bf08a:	4601      	mov	r1, r0
   bf08c:	6818      	ldr	r0, [r3, #0]
   bf08e:	f000 b80d 	b.w	bf0ac <_unlink_r>
   bf092:	bf00      	nop
   bf094:	2003de8c 	.word	0x2003de8c

000bf098 <write>:
   bf098:	4613      	mov	r3, r2
   bf09a:	460a      	mov	r2, r1
   bf09c:	4601      	mov	r1, r0
   bf09e:	4802      	ldr	r0, [pc, #8]	; (bf0a8 <write+0x10>)
   bf0a0:	6800      	ldr	r0, [r0, #0]
   bf0a2:	f000 b813 	b.w	bf0cc <_write_r>
   bf0a6:	bf00      	nop
   bf0a8:	2003de8c 	.word	0x2003de8c

000bf0ac <_unlink_r>:
   bf0ac:	b538      	push	{r3, r4, r5, lr}
   bf0ae:	4d06      	ldr	r5, [pc, #24]	; (bf0c8 <_unlink_r+0x1c>)
   bf0b0:	2300      	movs	r3, #0
   bf0b2:	4604      	mov	r4, r0
   bf0b4:	4608      	mov	r0, r1
   bf0b6:	602b      	str	r3, [r5, #0]
   bf0b8:	f7fb fc8c 	bl	ba9d4 <_unlink>
   bf0bc:	1c43      	adds	r3, r0, #1
   bf0be:	d102      	bne.n	bf0c6 <_unlink_r+0x1a>
   bf0c0:	682b      	ldr	r3, [r5, #0]
   bf0c2:	b103      	cbz	r3, bf0c6 <_unlink_r+0x1a>
   bf0c4:	6023      	str	r3, [r4, #0]
   bf0c6:	bd38      	pop	{r3, r4, r5, pc}
   bf0c8:	2003e7f0 	.word	0x2003e7f0

000bf0cc <_write_r>:
   bf0cc:	b538      	push	{r3, r4, r5, lr}
   bf0ce:	4d07      	ldr	r5, [pc, #28]	; (bf0ec <_write_r+0x20>)
   bf0d0:	4604      	mov	r4, r0
   bf0d2:	4608      	mov	r0, r1
   bf0d4:	4611      	mov	r1, r2
   bf0d6:	2200      	movs	r2, #0
   bf0d8:	602a      	str	r2, [r5, #0]
   bf0da:	461a      	mov	r2, r3
   bf0dc:	f7fb fc42 	bl	ba964 <_write>
   bf0e0:	1c43      	adds	r3, r0, #1
   bf0e2:	d102      	bne.n	bf0ea <_write_r+0x1e>
   bf0e4:	682b      	ldr	r3, [r5, #0]
   bf0e6:	b103      	cbz	r3, bf0ea <_write_r+0x1e>
   bf0e8:	6023      	str	r3, [r4, #0]
   bf0ea:	bd38      	pop	{r3, r4, r5, pc}
   bf0ec:	2003e7f0 	.word	0x2003e7f0

000bf0f0 <__register_exitproc>:
   bf0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf0f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf1b0 <__register_exitproc+0xc0>
   bf0f8:	4606      	mov	r6, r0
   bf0fa:	f8d8 0000 	ldr.w	r0, [r8]
   bf0fe:	461f      	mov	r7, r3
   bf100:	460d      	mov	r5, r1
   bf102:	4691      	mov	r9, r2
   bf104:	f000 f878 	bl	bf1f8 <__retarget_lock_acquire_recursive>
   bf108:	4b25      	ldr	r3, [pc, #148]	; (bf1a0 <__register_exitproc+0xb0>)
   bf10a:	681c      	ldr	r4, [r3, #0]
   bf10c:	b934      	cbnz	r4, bf11c <__register_exitproc+0x2c>
   bf10e:	4c25      	ldr	r4, [pc, #148]	; (bf1a4 <__register_exitproc+0xb4>)
   bf110:	601c      	str	r4, [r3, #0]
   bf112:	4b25      	ldr	r3, [pc, #148]	; (bf1a8 <__register_exitproc+0xb8>)
   bf114:	b113      	cbz	r3, bf11c <__register_exitproc+0x2c>
   bf116:	681b      	ldr	r3, [r3, #0]
   bf118:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf11c:	6863      	ldr	r3, [r4, #4]
   bf11e:	2b1f      	cmp	r3, #31
   bf120:	dd07      	ble.n	bf132 <__register_exitproc+0x42>
   bf122:	f8d8 0000 	ldr.w	r0, [r8]
   bf126:	f000 f869 	bl	bf1fc <__retarget_lock_release_recursive>
   bf12a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf132:	b34e      	cbz	r6, bf188 <__register_exitproc+0x98>
   bf134:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf138:	b988      	cbnz	r0, bf15e <__register_exitproc+0x6e>
   bf13a:	4b1c      	ldr	r3, [pc, #112]	; (bf1ac <__register_exitproc+0xbc>)
   bf13c:	b923      	cbnz	r3, bf148 <__register_exitproc+0x58>
   bf13e:	f8d8 0000 	ldr.w	r0, [r8]
   bf142:	f000 f85a 	bl	bf1fa <__retarget_lock_release>
   bf146:	e7f0      	b.n	bf12a <__register_exitproc+0x3a>
   bf148:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf14c:	f7fb fe5e 	bl	bae0c <malloc>
   bf150:	2800      	cmp	r0, #0
   bf152:	d0f4      	beq.n	bf13e <__register_exitproc+0x4e>
   bf154:	2300      	movs	r3, #0
   bf156:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf15a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf15e:	6863      	ldr	r3, [r4, #4]
   bf160:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf164:	2201      	movs	r2, #1
   bf166:	409a      	lsls	r2, r3
   bf168:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf16c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf170:	4313      	orrs	r3, r2
   bf172:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf176:	2e02      	cmp	r6, #2
   bf178:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf17c:	bf02      	ittt	eq
   bf17e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf182:	4313      	orreq	r3, r2
   bf184:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf188:	6863      	ldr	r3, [r4, #4]
   bf18a:	f8d8 0000 	ldr.w	r0, [r8]
   bf18e:	1c5a      	adds	r2, r3, #1
   bf190:	3302      	adds	r3, #2
   bf192:	6062      	str	r2, [r4, #4]
   bf194:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf198:	f000 f830 	bl	bf1fc <__retarget_lock_release_recursive>
   bf19c:	2000      	movs	r0, #0
   bf19e:	e7c6      	b.n	bf12e <__register_exitproc+0x3e>
   bf1a0:	2003e7e8 	.word	0x2003e7e8
   bf1a4:	2003e75c 	.word	0x2003e75c
   bf1a8:	00000000 	.word	0x00000000
   bf1ac:	000bae0d 	.word	0x000bae0d
   bf1b0:	2003def0 	.word	0x2003def0

000bf1b4 <_close_r>:
   bf1b4:	b538      	push	{r3, r4, r5, lr}
   bf1b6:	4d06      	ldr	r5, [pc, #24]	; (bf1d0 <_close_r+0x1c>)
   bf1b8:	2300      	movs	r3, #0
   bf1ba:	4604      	mov	r4, r0
   bf1bc:	4608      	mov	r0, r1
   bf1be:	602b      	str	r3, [r5, #0]
   bf1c0:	f7fb fbe0 	bl	ba984 <_close>
   bf1c4:	1c43      	adds	r3, r0, #1
   bf1c6:	d102      	bne.n	bf1ce <_close_r+0x1a>
   bf1c8:	682b      	ldr	r3, [r5, #0]
   bf1ca:	b103      	cbz	r3, bf1ce <_close_r+0x1a>
   bf1cc:	6023      	str	r3, [r4, #0]
   bf1ce:	bd38      	pop	{r3, r4, r5, pc}
   bf1d0:	2003e7f0 	.word	0x2003e7f0

000bf1d4 <_fstat_r>:
   bf1d4:	b538      	push	{r3, r4, r5, lr}
   bf1d6:	4d07      	ldr	r5, [pc, #28]	; (bf1f4 <_fstat_r+0x20>)
   bf1d8:	2300      	movs	r3, #0
   bf1da:	4604      	mov	r4, r0
   bf1dc:	4608      	mov	r0, r1
   bf1de:	4611      	mov	r1, r2
   bf1e0:	602b      	str	r3, [r5, #0]
   bf1e2:	f7fb fbd7 	bl	ba994 <_fstat>
   bf1e6:	1c43      	adds	r3, r0, #1
   bf1e8:	d102      	bne.n	bf1f0 <_fstat_r+0x1c>
   bf1ea:	682b      	ldr	r3, [r5, #0]
   bf1ec:	b103      	cbz	r3, bf1f0 <_fstat_r+0x1c>
   bf1ee:	6023      	str	r3, [r4, #0]
   bf1f0:	bd38      	pop	{r3, r4, r5, pc}
   bf1f2:	bf00      	nop
   bf1f4:	2003e7f0 	.word	0x2003e7f0

000bf1f8 <__retarget_lock_acquire_recursive>:
   bf1f8:	4770      	bx	lr

000bf1fa <__retarget_lock_release>:
   bf1fa:	4770      	bx	lr

000bf1fc <__retarget_lock_release_recursive>:
   bf1fc:	4770      	bx	lr
	...

000bf200 <_lseek_r>:
   bf200:	b538      	push	{r3, r4, r5, lr}
   bf202:	4d07      	ldr	r5, [pc, #28]	; (bf220 <_lseek_r+0x20>)
   bf204:	4604      	mov	r4, r0
   bf206:	4608      	mov	r0, r1
   bf208:	4611      	mov	r1, r2
   bf20a:	2200      	movs	r2, #0
   bf20c:	602a      	str	r2, [r5, #0]
   bf20e:	461a      	mov	r2, r3
   bf210:	f7fb fbc8 	bl	ba9a4 <_lseek>
   bf214:	1c43      	adds	r3, r0, #1
   bf216:	d102      	bne.n	bf21e <_lseek_r+0x1e>
   bf218:	682b      	ldr	r3, [r5, #0]
   bf21a:	b103      	cbz	r3, bf21e <_lseek_r+0x1e>
   bf21c:	6023      	str	r3, [r4, #0]
   bf21e:	bd38      	pop	{r3, r4, r5, pc}
   bf220:	2003e7f0 	.word	0x2003e7f0

000bf224 <_open_r>:
   bf224:	b538      	push	{r3, r4, r5, lr}
   bf226:	4d07      	ldr	r5, [pc, #28]	; (bf244 <_open_r+0x20>)
   bf228:	4604      	mov	r4, r0
   bf22a:	4608      	mov	r0, r1
   bf22c:	4611      	mov	r1, r2
   bf22e:	2200      	movs	r2, #0
   bf230:	602a      	str	r2, [r5, #0]
   bf232:	461a      	mov	r2, r3
   bf234:	f7fb fb8e 	bl	ba954 <_open>
   bf238:	1c43      	adds	r3, r0, #1
   bf23a:	d102      	bne.n	bf242 <_open_r+0x1e>
   bf23c:	682b      	ldr	r3, [r5, #0]
   bf23e:	b103      	cbz	r3, bf242 <_open_r+0x1e>
   bf240:	6023      	str	r3, [r4, #0]
   bf242:	bd38      	pop	{r3, r4, r5, pc}
   bf244:	2003e7f0 	.word	0x2003e7f0

000bf248 <_read_r>:
   bf248:	b538      	push	{r3, r4, r5, lr}
   bf24a:	4d07      	ldr	r5, [pc, #28]	; (bf268 <_read_r+0x20>)
   bf24c:	4604      	mov	r4, r0
   bf24e:	4608      	mov	r0, r1
   bf250:	4611      	mov	r1, r2
   bf252:	2200      	movs	r2, #0
   bf254:	602a      	str	r2, [r5, #0]
   bf256:	461a      	mov	r2, r3
   bf258:	f7fb fb8c 	bl	ba974 <_read>
   bf25c:	1c43      	adds	r3, r0, #1
   bf25e:	d102      	bne.n	bf266 <_read_r+0x1e>
   bf260:	682b      	ldr	r3, [r5, #0]
   bf262:	b103      	cbz	r3, bf266 <_read_r+0x1e>
   bf264:	6023      	str	r3, [r4, #0]
   bf266:	bd38      	pop	{r3, r4, r5, pc}
   bf268:	2003e7f0 	.word	0x2003e7f0

000bf26c <dynalib_user>:
   bf26c:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   bf27c:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bf28c:	72697620 6c617574 696e6900 61662074      virtual.init fa
   bf29c:	64656c69 526f4c00 61522041 206f6964     iled.LoRA Radio 
   bf2ac:	74696e69 696c6169 2064657a 4e207361     initialized as N
   bf2bc:	4e65646f 65626d75 666f2072 20692520     odeNumber of %i 
   bf2cc:	20646e61 69766544 44496563 20666f20     and DeviceID of 
   bf2dc:	61206925 6120646e 67616d20 6e206369     %i and a magic n
   bf2ec:	65626d75 666f2072 00692520 69636544     umber of %i.Deci
   bf2fc:	72656870 64206465 20617461 6f706572     phered data repo
   bf30c:	25207472 72662064 6e206d6f 2065646f     rt %d from node 
   bf31c:	53006425 20746e65 70736572 65736e6f     %d.Sent response
   bf32c:	206f7420 65696c63 6d20746e 61737365      to client messa
   bf33c:	25206567 74202c64 20656d69 7325203d     ge %d, time = %s
   bf34c:	646e6120 65726620 6e657571 25207963      and frequency %
   bf35c:	696d2064 6574756e 65520073 6e6f7073     d minutes.Respon
   bf36c:	72206573 69656365 20646576 63637573     se received succ
   bf37c:	66737365 796c6c75 73202d20 65636375     essfully - succe
   bf38c:	72207373 20657461 322e3425 65520066     ss rate %4.2f.Re
   bf39c:	6e6f7073 6e206573 6120746f 6f6e6b63     sponse not ackno
   bf3ac:	64656c77 20646567 7573202d 73656363     wledged - succes
   bf3bc:	61722073 25206574 66322e34 6e655300     s rate %4.2f.Sen
   bf3cc:	65722074 6e6f7073 74206573 6f4e206f     t response to No
   bf3dc:	25206564 74202c64 20656d69 7325203d     de %d, time = %s
   bf3ec:	646e6120 65726620 6e657571 25207963      and frequency %
   bf3fc:	696d2064 6574756e 65520073 6e6f7073     d minutes.Respon
   bf40c:	72206573 69656365 20646576 63637573     se received succ
   bf41c:	66737365 796c6c75 73655200 736e6f70     essfully.Respons
   bf42c:	6f6e2065 63612074 776f6e6b 6764656c     e not acknowledg
   bf43c:	44006465 70696365 65726568 6c612064     ed.Deciphered al
   bf44c:	20747265 6f706572 66207472 206d6f72     ert report from 
   bf45c:	65646f6e 00642520 746e6553 6b636120     node %d.Sent ack
   bf46c:	6c776f6e 6d676465 20746e65 4e206f74     nowledgment to N
   bf47c:	2065646f 202c6425 656d6974 25203d20     ode %d, time = %
   bf48c:	6e612073 72662064 65757165 2079636e     s and frequency 
   bf49c:	6d206425 74756e69 52007365 6f707365     %d minutes.Respo
   bf4ac:	6e69646e 73752067 20676e69 20656874     nding using the 
   bf4bc:	6d207325 61737365 74206567 00657079     %s message type.
   bf4cc:	6d6f7246 646f6e20 64252065 69202f20     From node %d / i
   bf4dc:	64252064 206f7420 77206425 20687469     d %d to %d with 
   bf4ec:	69737372 2064253d 2061202d 6d207325     rssi=%d - a %s m
   bf4fc:	61737365 6f206567 656c2066 6874676e     essage of length
   bf50c:	20642520 25206e69 6f682064 57007370      %d in %d hops.W
   bf51c:	72612065 70752065 69746164 7420676e     e are updating t
   bf52c:	70206568 696c6275 66206873 75716572     he publish frequ
   bf53c:	79636e65 206f7420 6d206925 74756e69     ency to %i minut
   bf54c:	00007365                                es..

000bf550 <_ZTV14LoRA_Functions>:
	...
   bf558:	000b40cd 000b40cf 656d6954 7325203a     .@...@..Time: %s
   bf568:	646e6120 78656e20 76652074 20746e65      and next event 
   bf578:	25207369 7320756c 6e6f6365 61207364     is %lu seconds a
   bf588:	00796177 6d6f7246 20732520 25206f74     way.From %s to %
   bf598:	69772073 69206874 6c61766e 74206469     s with invalid t
   bf5a8:	00656d69 6d6f7246 20732520 25206f74     ime.From %s to %
   bf5b8:	6f662073 75252072 63657320 73646e6f     s for %u seconds
   bf5c8:	6f724600 7325206d 206f7420 53007325     .From %s to %s.S
   bf5d8:	7065656c 726f6620 20692520 6f636573     leep for %i seco
   bf5e8:	2073646e 6c6c6974 78656e20 76652074     nds till next ev
   bf5f8:	20746e65 25207461 69772073 25206874     ent at %s with %
   bf608:	6620696c 20656572 6f6d656d 41007972     li free memory.A
   bf618:	656b6f77 20746120 77207325 20687469     woke at %s with 
   bf628:	20696c25 65657266 6d656d20 0079726f     %li free memory.
   bf638:	65746147 20796177 6c207369 65747369     Gateway is liste
   bf648:	676e696e 726f6620 526f4c20 656d2041     ning for LoRA me
   bf658:	67617373 7b007365 646f6e22 22646965     ssages.{"nodeid"
   bf668:	2c75253a 6f682220 796c7275 75253a22     :%u, "hourly":%u
   bf678:	6422202c 796c6961 75253a22 6162222c     , "daily":%u,"ba
   bf688:	72657474 253a2279 66322e34 656b222c     ttery":%4.2f,"ke
   bf698:	3a223179 22732522 6574222c 3a22706d     y1":"%s","temp":
   bf6a8:	202c6425 73657222 22737465 2c64253a     %d, "resets":%d,
   bf6b8:	73737222 253a2269 22202c64 2267736d     "rssi":%d, "msg"
   bf6c8:	2c64253a 6d697422 61747365 3a22706d     :%d,"timestamp":
   bf6d8:	30756c25 007d3030 64696255 2d73746f     %lu000}.Ubidots-
   bf6e8:	41526f4c 6f6f482d 31762d6b 65654400     LoRA-Hook-v1.Dee
   bf6f8:	6f702070 20726577 6e776f64 76656420     p power down dev
   bf708:	00656369 35545345 2c544445 322e334d     ice.EST5EDT,M3.2
   bf718:	322f302e 3a30303a 4d2c3030 312e3131     .0/2:00:00,M11.1
   bf728:	322f302e 3a30303a 41003030 72657373     .0/2:00:00.Asser
   bf738:	6e6f6974 6c696146 20657275 20637273     tionFailure src 
   bf748:	73202626 3e2d6372 6c6c6163 6b636162     && src->callback
   bf758:	74614700 79617765 61747320 70757472     .Gateway startup
   bf768:	6d6f6320 74656c70 74612065 20732520      complete at %s 
   bf778:	68746977 74616220 79726574 2e342520     with battery %4.
   bf788:	55006632 20726573 74747562 70206e6f     2f.User button p
   bf798:	73736572 202c6465 74736574 646f6d20     ressed, test mod
   bf7a8:	6f4e0065 65737520 75622072 6e6f7474     e.No user button
   bf7b8:	73757020 65642068 68636574 00646574      push detechted.

000bf7c8 <_ZTV8MB85RC64>:
	...
   bf7d0:	000b52d5 000b52e9 000b7b2d 000b7bc3     .R...R..-{...{..
   bf7e0:	000b7c45                                E|..

000bf7e4 <_ZTV13sysStatusData>:
	...
   bf7ec:	000b53f1 000b5361 000b533f 000ba3f5     .S..aS..?S......
   bf7fc:	000ba41d 000ba511 000ba5a9 000b52fd     .............R..
   bf80c:	000b5315                                .S..

000bf810 <_ZTV17currentStatusData>:
	...
   bf818:	000b540b 000b5361 000b533f 000ba3f5     .T..aS..?S......
   bf828:	000ba41d 000ba511 000ba5a9 000b52a9     .............R..
   bf838:	000b52c1 74696e49 7a696c61 20676e69     .R..Initalizing 
   bf848:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   bf858:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   bf868:	666e6f43 00006769                       Config..

000bf870 <BLUE_LED>:
   bf870:	                                         ..

000bf872 <BUTTON_PIN>:
   bf872:	                                         ..

000bf874 <RFM95_CS>:
   bf874:	                                         ..

000bf876 <RFM95_INT>:
   bf876:	                                         ..

000bf878 <TMP36_SENSE_PIN>:
   bf878:	6553000f 6e697474 61762067 7365756c     ..Setting values
   bf888:	726f6620 65687420 646f6e20 75250065      for the node.%u
   bf898:	6e696d20 73657275 73655900 006f4e00      minures.Yes.No.
   bf8a8:	69726556 006e6f7a 6e6b6e55 006e776f     Verizon.Unknown.
   bf8b8:	20746f4e 72616843 676e6967 61684300     Not Charging.Cha
   bf8c8:	64656772 73694400 72616863 676e6967     rged.Discharging
   bf8d8:	75614600 4400746c 6e6f6369 7463656e     .Fault.Diconnect
   bf8e8:	49006465 6974696e 7a696c61 20676e69     ed.Initializing 
   bf8f8:	74726150 656c6369 6e756620 6f697463     Particle functio
   bf908:	6120736e 7620646e 61697261 73656c62     ns and variables
   bf918:	776f4c00 776f5020 4d207265 0065646f     .Low Power Mode.
   bf928:	656c6552 00657361 6e676953 73006c61     Release.Signal.s
   bf938:	65746174 6843664f 61420067 72657474     tateOfChg.Batter
   bf948:	6e6f4379 74786574 70655200 6974726f     yContext.Reporti
   bf958:	4620676e 75716572 79636e65 4d495300     ng Frequency.SIM
   bf968:	72614320 65530064 6f4c2074 6f502077      Card.Set Low Po
   bf978:	00726577 20746553 71657246 636e6575     wer.Set Frequenc
   bf988:	68530079 2074726f 6f706572 6e697472     y.Short reportin
   bf998:	72662067 65757165 2079636e 7265766f     g frequency over
   bf9a8:	6469722d 6c207365 7020776f 7265776f     -rides low power
   bf9b8:	70655200 2074726f 71657266 636e6575     .Report frequenc
   bf9c8:	69772079 62206c6c 65732065 6f742074     y will be set to
   bf9d8:	20692520 756e696d 20736574 6e207461      %i minutes at n
   bf9e8:	20747865 41526f4c 6e6f6320 7463656e     ext LoRA connect
   bf9f8:	6d695400 65790065 6f6e0073 636e4900     .Time.yes.no.Inc
   bfa08:	73616572 20676e69 6f706572 6e697472     reasing reportin
   bfa18:	72662067 65757165 2079636e 31206f74     g frequency to 1
   bfa28:	696d2032 6574756e 73490073 776f4c20     2 minutes.Is Low
   bfa38:	776f5020 4d207265 2065646f 3f746573      Power Mode set?
   bfa48:	00732520 20746553 56206f74 7a697265      %s.Set to Veriz
   bfa58:	53206e6f 53004d49 74207465 6150206f     on SIM.Set to Pa
   bfa68:	63697472 5320656c 49004d49 6874206e     rticle SIM.In th
   bfa78:	69642065 6e6f6373 7463656e 6f726620     e disconnect fro
   bfa88:	6150206d 63697472 6620656c 74636e75     m Particle funct
   bfa98:	006e6f69 6c696146 74206465 6964206f     ion.Failed to di
   bfaa8:	6e6f6373 7463656e 6f726620 6150206d     sconnect from Pa
   bfab8:	63697472 4400656c 6f637369 63656e6e     rticle.Disconnec
   bfac8:	20646574 6d6f7266 72615020 6c636974     ted from Particl
   bfad8:	6e692065 20692520 6f636573 0073646e     e in %i seconds.
   bfae8:	6c696146 74206465 7574206f 6f206e72     Failed to turn o
   bfaf8:	74206666 43206568 756c6c65 2072616c     ff the Cellular 
   bfb08:	65646f6d 7554006d 64656e72 66666f20     modem.Turned off
   bfb18:	65687420 6c656320 616c756c 6f6d2072      the cellular mo
   bfb28:	206d6564 25206e69 65732069 646e6f63     dem in %i second
   bfb38:	00000073                                s...

000bfb3c <_ZTVN5spark10LogHandlerE>:
	...
   bfb4c:	000b40a5 000b5969                       .@..iY..

000bfb54 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bfb5c:	000b59e1 000b5a15 000bca79 000b596b     .Y...Z..y...kY..
   bfb6c:	656e6f4e 46695700 53470069 4d55004d     None.WiFi.GSM.UM
   bfb7c:	43005354 00414d44 0045544c 45454549     TS.CDMA.LTE.IEEE
   bfb8c:	31323038 4c003435 435f4554 4d5f5441     802154.LTE_CAT_M
   bfb9c:	544c0031 41435f45 424e5f54 73250031     1.LTE_CAT_NB1.%s
   bfbac:	253a5320 66302e32 202c2525 32253a51      S:%2.0f%%, Q:%2
   bfbbc:	2566302e 25002025 00432069 65746e49     .0f%% .%i C.Inte
   bfbcc:	6c616e72 6d655420 61726570 65727574     rnal Temperature
   bfbdc:	20736920 00007325 000bf8b0 000bfb6c      is %s......l...
   bfbec:	000bfb71 000bfb76 000bfb7a 000bfb7f     q...v...z.......
   bfbfc:	000bfb84 000bfb88 000bfb93 000bfb9e     ................
   bfc0c:	6c696166 74206465 6572206f 72206461     failed to read r
   bfc1c:	64416765 253d7264 20783230 6e756f63     egAddr=%02x coun
   bfc2c:	75253d74 69616600 2064656c 72206f74     t=%u.failed to r
   bfc3c:	20646165 41676572 3d726464 78323025     ead regAddr=%02x
   bfc4c:	61747320 64253d74 554f4600 69642054      stat=%d.FOUT di
   bfc5c:	6f6e2064 6f672074 47494820 6f6e0048     d not go HIGH.no
   bfc6c:	65642074 74636574 66006465 656c6961     t detected.faile
   bfc7c:	6f742064 69727720 72206574 64416765     d to write regAd
   bfc8c:	253d7264 20783230 74617473 0064253d     dr=%02x stat=%d.
   bfc9c:	57746573 25205444 61770064 64686374     setWDT %d.watchd
   bfcac:	6320676f 7261656c 62206465 75736552     og cleared bResu
   bfcbc:	253d746c 61770064 64686374 7320676f     lt=%d.watchdog s
   bfccc:	66207465 5372756f 3d736365 62206425     et fourSecs=%d b
   bfcdc:	75736552 253d746c 41570064 44484354     Result=%d.WATCHD
   bfcec:	4400474f 5f504545 45574f50 4f445f52     OG.DEEP_POWER_DO
   bfcfc:	43004e57 544e554f 4e574f44 4d49545f     WN.COUNTDOWN_TIM
   bfd0c:	41005245 4d52414c 69616600 6572756c     ER.ALARM.failure
   bfd1c:	206e6920 61647075 61576574 6552656b      in updateWakeRe
   bfd2c:	6e6f7361 00642520 656b6177 61657220     ason %d.wake rea
   bfd3c:	206e6f73 7325203d 69616600 6572756c     son = %s.failure
   bfd4c:	206e6920 43746573 746e756f 6e776f64      in setCountdown
   bfd5c:	656d6954 64252072 69616600 6572756c     Timer %d.failure
   bfd6c:	206e6920 70656564 65776f50 776f4472      in deepPowerDow
   bfd7c:	6425206e 47455200 454c535f 435f5045     n %d.REG_SLEEP_C
   bfd8c:	3d4c5254 32257830 69640078 74276e64     TRL=0x%2x.didn't
   bfd9c:	776f7020 64207265 006e776f 64343025      power down.%04d
   bfdac:	3230252d 30252d64 25206432 3a643230     -%02d-%02d %02d:
   bfdbc:	64323025 3230253a 65670064 63745274     %02d:%02d.getRtc
   bfdcc:	6d547341 00732520 52746573 73416374     AsTm %s.setRtcAs
   bfddc:	25206d54 61660073 72756c69 6e692065     Tm %s.failure in
   bfdec:	74657320 46637452 546d6f72 6425206d      setRtcFromTm %d
   bfdfc:	74657300 43545220 6f726620 6c63206d     .set RTC from cl
   bfe0c:	2064756f 73007325 73207465 65747379     oud %s.set syste
   bfe1c:	6c63206d 206b636f 6d6f7266 43545220     m clock from RTC
   bfe2c:	00732520 6c696166 74206465 6564206f      %s.failed to de
   bfe3c:	74636574 31424120 00353038 2e707061     tect AB1805.app.
   bfe4c:	38316261 00003530                       ab1805..

000bfe54 <_ZTV6AB1805>:
	...
   bfe5c:	000b62ed 000b62ef 000b6965 000b69eb     .b...b..ei...i..
   bfe6c:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   bfe7c:	004b5268                                hRK.

000bfe80 <_ZTV19BackgroundPublishRK>:
	...
   bfe88:	000b6f21 000b6f3d 253a6425 64253a64     !o..=o..%d:%d:%d
   bfe98:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   bfea8:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   bfeb8:	302b2500 253a6433 00753230              .%+03d:%02u.

000bfec4 <_ZTV9LocalTime>:
	...
   bfecc:	000b7271 000b7289                       qr...r..

000bfed4 <_ZTV12LocalTimeHMS>:
	...
   bfedc:	000b721f 000b7223                       .r..#r..

000bfee4 <_ZTV15LocalTimeChange>:
	...
   bfeec:	000b7221 000b7231                       !r..1r..

000bfef4 <_ZTV22LocalTimePosixTimezone>:
	...
   bfefc:	000b7241 000b725d                       Ar..]r..

000bff04 <_ZTV6MB85RC>:
	...
   bff0c:	000b7aed 000b7aef 000b7b2d 000b7bc3     .z...z..-{...{..
   bff1c:	000b7c45 656c6966 3d6d754e 73206425     E|..fileNum=%d s
   bff2c:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   bff3c:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   bff4c:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   bff5c:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   bff6c:	64657470 65766520 6e20746e 20656d61     pted event name 
   bff7c:	6420726f 00617461 64616572 75657551     or data.readQueu
   bff8c:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   bff9c:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   bffac:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   bffbc:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   bffcc:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   bffdc:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   bffec:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   bfffc:	76652064 20746e65 72006425 74657365     d event %d.reset
   c000c:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   c001c:	746e6576 6173202c 66206576 73656c69     vent, save files
   c002c:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   c003c:	72616373 676e6964 726f6320 74707572     scarding corrupt
   c004c:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c005c:	6e696873 73252067 65766520 253d746e     shing %s event=%
   c006c:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c007c:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c008c:	20736920 75716572 64657269 62757000      is required.pub
   c009c:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c00ac:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c00bc:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c00cc:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c00dc:	72656772 61687420 616d206e 69735f78     rger than max_si
   c00ec:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c00fc:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c010c:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c011c:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c012c:	00657565 6c627570 20687369 63637573     eue.publish succ
   c013c:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c014c:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c015c:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c016c:	206f7420 656c6966 66612073 20726574      to files after 
   c017c:	6c627570 20687369 6c696166 00657275     publish failure.
   c018c:	2e707061 71627570 00000000              app.pubq....

000c0198 <_ZTV17PublishQueuePosix>:
	...
   c01a0:	000b8579 000b8835 000b8859 616e6946     y...5...Y...Fina
   c01b0:	20796c6c 6d6f7266 65687420 44485220     lly from the RHD
   c01c0:	67617461 2e6d6172 20707063 656c6966     atagram.cpp file
   c01d0:	00000000                                ....

000c01d4 <_ZTV15RHGenericDriver>:
	...
   c01e4:	000b8989 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c01f4:	000b40a5 000b89eb 000b898d 000b8a3b     .@..........;...
   c0204:	000b8a09 000b8a5f 000b8997 000b899f     ...._...........
   c0214:	000b89a3 000b89a7 000b89ab 000b89af     ................
   c0224:	000b899b 000b89bb 000b89bf 000b89c3     ................
   c0234:	000b89c7 000b89cb 000b89d1 000b89d5     ................
   c0244:	000b8997 000b89d9 000b89df 000b89e5     ................

000c0254 <_ZTV12RHGenericSPI>:
	...
   c025c:	000b40a5 000b8abd 000b8abf 000b40a5     .@...........@..
   c026c:	000b40a5 000b8ac7 000b8acb 000b8acf     .@..............
   c027c:	000b8ac1 000b8ac3 000b8ac5 61666564     ............defa
   c028c:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c029c:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c02ac:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c02bc:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c02cc <_ZTVN8particle11SPISettingsE>:
	...
   c02d4:	000b8b15 000b8ae9 000b8aeb              ............

000c02e0 <_ZTV13RHHardwareSPI>:
	...
   c02e8:	000b8bc9 000b8bdd 000b8beb 000b8bf9     ................
   c02f8:	000b8c65 000b8ac7 000b8acb 000b8acf     e...............
   c0308:	000b8c73 000b8c87 000b8c95              s...........

000c0314 <_ZTV6RHMesh>:
	...
   c031c:	000b8d61 000b9009 000b8cc1 000b8cad     a...............
   c032c:	20646e61 6d6f7266 65687420 52485220     and from the RHR
   c033c:	61696c65 44656c62 67617461 2e6d6172     eliableDatagram.
   c034c:	20707063 656c6966 77615300 6d6f7320     cpp file.Saw som
   c035c:	69687465 6920676e 6874206e 48522065     ething in the RH
   c036c:	74756f52 632e7265 66207070 00656c69     Router.cpp file.

000c037c <_ZTV8RHRouter>:
	...
   c0384:	000b9289 000b92cd                       ........

000c038c <_ZTV11RHSPIDriver>:
	...
   c039c:	000b9579 000b40a5 000b40a5 000b40a5     y....@...@...@..
   c03ac:	000b40a5 000b89eb 000b898d 000b8a3b     .@..........;...
   c03bc:	000b8a09 000b8a5f 000b8997 000b899f     ...._...........
   c03cc:	000b89a3 000b89a7 000b89ab 000b89af     ................
   c03dc:	000b899b 000b89bb 000b89bf 000b89c3     ................
   c03ec:	000b89c7 000b89cb 000b89d1 000b89d5     ................
   c03fc:	000b8997 000b89d9 000b89df 000b89e5     ................
   c040c:	000b95a5 000b95af 65636552 64657669     ........Received
   c041c:	6d6f7320 69687465 6920676e 6874206e      something in th
   c042c:	48522065 3946525f 70632e35 69662070     e RH_RF95.cpp fi
   c043c:	                                         le.

000c043f <_ZL18MODEM_CONFIG_TABLE>:
   c043f:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...
	...

000c0450 <_ZTV7RH_RF95>:
	...
   c0458:	000b9717 000b974f 000b9c39 000b9acf     ....O...9.......
   c0468:	000b97cd 000b9b17 000b9713 000b89eb     ................
   c0478:	000b898d 000b8a3b 000b8a09 000b8a5f     ....;......._...
   c0488:	000b9719 000b899f 000b89a3 000b89a7     ................
   c0498:	000b89ab 000b89af 000b899b 000b89bb     ................
   c04a8:	000b89bf 000b89c3 000b89c7 000b89cb     ................
   c04b8:	000b89d1 000b89d5 000b975f 000b89d9     ........_.......
   c04c8:	000b89df 000b89e5 000b95a5 000b95af     ................
   c04d8:	000b970f 64383025 72002f00 766f6d65     ....%08d./.remov
   c04e8:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c04f8:	20646e61 61207369 72696420 6f746365     and is a directo
   c0508:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c0518:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c0528:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c0538:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c0548:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c0558:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c0568:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c0578:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c0588:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c0598:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c05a8:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c05b8:	74657220 656e7275 64252064 70706100      returned %d.app
   c05c8:	7165732e 656c6966 00000000              .seqfile....

000c05d4 <_ZTV14SequentialFile>:
	...
   c05dc:	000ba095 000ba0c1 000b9d41 3a746f67     ........A...got:
   c05ec:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c05fc:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c060c:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c061c:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c062c:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c063c:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c064c <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c0654:	000ba3ef 000ba43b 000ba3ed 000ba3f5     ....;...........
   c0664:	000ba41d 000ba511 000ba5a9              ............

000c0670 <_ZTVN5spark13CellularClassE>:
	...
   c0678:	000baff7 000bafed 000bafe3 000baf99     ................
   c0688:	000bafd7 000bafcb 000bcdd1 000bcdd9     ................
   c0698:	000bafbf 000bafb7 000bafad 000bafa3     ................
   c06a8:	000bce09                                ....

000c06ac <_ZTV14CellularSignal>:
	...
   c06b4:	000bb085 000bb0e9 000bb087 000bb0f9     ................
   c06c4:	000bb12d 000bb159 000bb18d 000bb0ad     -...Y...........
   c06d4:	000bb08b 000bb0a7 fffffffc 00000000     ................
   c06e4:	000bb0e1                                ....

000c06e8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c06f0:	000bb1d1 000bb1d7 000bb215 000bb1e5     ................
   c0700:	000bb1d3                                ....

000c0704 <_ZTVN5spark13EthernetClassE>:
	...
   c070c:	000bb7df 000bb7d5 000bb7cb 000bb7c1     ................
   c071c:	000bb7b5 000bb7a9 000bcdd1 000bcdd9     ................
   c072c:	000bb79d 000bb795 000bb78b 000bb781     ................
   c073c:	000bce09                                ....

000c0740 <_ZTV7TwoWire>:
	...
   c0748:	000bb8af 000bb8f9 000bb8d1 000bb8b1     ................
   c0758:	000bb8d9 000bb8e1 000bb8e9 000bb8f1     ................

000c0768 <_ZTV9IPAddress>:
	...
   c0770:	000bba91 000bba81 000bba83 34302575     ............u%04
   c0780:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c0790:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c07a0:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c07b0:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c07c0:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   c07d0:	20736c69 0d00203d 6e6c000a 006e6600     ils = ....ln.fn.
   c07e0:	65646f63 74656400 006c6961              code.detail.

000c07ec <_ZTVN5spark16JSONStreamWriterE>:
	...
   c07f4:	000bbf3d 000bbf63 000bbf21 000bbb9f     =...c...!.......

000c0804 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c080c:	000bc321 000bc339 000bca79 000b596b     !...9...y...kY..

000c081c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c0824:	000bc34d 000bc361 000bcc1d 000bbf29     M...a.......)...

000c0834 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c083c:	000bbf3b 000bbf71 000bc9dd 000bbf2b     ;...q.......+...

000c084c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c0854:	000bbf39 000bbf7f 000bc289 000bbfa1     9...............

000c0864 <_ZTVN5spark12NetworkClassE>:
	...
   c086c:	000bcd91 000bcd9b 000bcda5 000bcdaf     ................
   c087c:	000bcdb9 000bcdc5 000bcdd1 000bcdd9     ................
   c088c:	000bcde1 000bcded 000bcdf5 000bcdff     ................
   c089c:	000bce09 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000c08ac <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c08ac:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c08bc:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c08cc:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c08dc:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c08ec:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c08fc:	00000065                                e...

000c0900 <_ZTV11USARTSerial>:
	...
   c0908:	000bdc71 000bdcdd 000bdcb5 000bd059     q...........Y...
   c0918:	000bdc85 000bdca1 000bdc93 000bdcaf     ................
   c0928:	000bdc73 000bdc77                       s...w...

000c0930 <_ZTV9USBSerial>:
	...
   c0938:	000bdd2f 000bdd97 000bdd6d 000bd059     /.......m...Y...
   c0948:	000bdd5f 000bdd31 000bdd41 000bdd91     _...1...A.......
   c0958:	000bdd51 000bdd29                       Q...)...

000c0960 <_ZSt7nothrow>:
   c0960:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c0970:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c0981 <day_name.1>:
   c0981:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c0991:	61536972                                 riSat

000c0996 <mon_name.0>:
   c0996:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c09a6:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c09b6:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c09c6:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c09d6:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c09e6:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c09f6:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c0a06:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c0a16:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c0a26:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c0a36:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c0a46:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c0a56:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c0a66:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c0a76:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c0a83 <_ctype_>:
   c0a83:	20202000 20202020 28282020 20282828     .         ((((( 
   c0a93:	20202020 20202020 20202020 20202020                     
   c0aa3:	10108820 10101010 10101010 10101010      ...............
   c0ab3:	04040410 04040404 10040404 10101010     ................
   c0ac3:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c0ad3:	01010101 01010101 01010101 10101010     ................
   c0ae3:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c0af3:	02020202 02020202 02020202 10101010     ................
   c0b03:	00000020 00000000 00000000 00000000      ...............
	...

000c0b84 <link_const_variable_data_end>:
   c0b84:	000b4805 	.word	0x000b4805
   c0b88:	000b4ff1 	.word	0x000b4ff1
   c0b8c:	000b5845 	.word	0x000b5845
   c0b90:	000b5eb5 	.word	0x000b5eb5
   c0b94:	000b62e1 	.word	0x000b62e1
   c0b98:	000b6e05 	.word	0x000b6e05
   c0b9c:	000b8825 	.word	0x000b8825
   c0ba0:	000b8c9d 	.word	0x000b8c9d
   c0ba4:	000ba3dd 	.word	0x000ba3dd
   c0ba8:	000baf89 	.word	0x000baf89
   c0bac:	000bb055 	.word	0x000bb055
   c0bb0:	000bb7e9 	.word	0x000bb7e9
   c0bb4:	000bca69 	.word	0x000bca69
   c0bb8:	000bcee1 	.word	0x000bcee1
   c0bbc:	000bd34d 	.word	0x000bd34d
   c0bc0:	000bd935 	.word	0x000bd935
   c0bc4:	000bdc5d 	.word	0x000bdc5d

000c0bc8 <link_constructors_end>:
	...
