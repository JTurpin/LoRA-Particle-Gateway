
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000cab0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c0ad0  000c0ad0  00010ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c0af4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003dd00  000c0af8  0002dd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008fc  2003def8  2003def8  0003def8  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c0cec  000c0cec  00030cec  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c0d18  000c0d18  00030d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00285736  00000000  00000000  00030d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002bfab  00000000  00000000  002b6452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00068600  00000000  00000000  002e23fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004c40  00000000  00000000  0034a9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011b10  00000000  00000000  0034f63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ec3a  00000000  00000000  0036114d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00092163  00000000  00000000  003bfd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c98e  00000000  00000000  00451eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000e3bc  00000000  00000000  005be878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a fde5 	bl	bec00 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a fe07 	bl	bec50 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd00 	.word	0x2003dd00
   b404c:	000c0af8 	.word	0x000c0af8
   b4050:	2003def4 	.word	0x2003def4
   b4054:	2003def8 	.word	0x2003def8
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f009 ff27 	bl	bdeb4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c0a8c 	.word	0x000c0a8c
   b4080:	000c0ad0 	.word	0x000c0ad0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b806 	b.w	b5094 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fcb5 	bl	b49f8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f009 bec7 	b.w	bde24 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f006 be8b 	b.w	badb0 <malloc>

000b409a <_Znaj>:
   b409a:	f006 be89 	b.w	badb0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f006 be8f 	b.w	badc0 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f006 fd1c 	bl	baae8 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000ba689 	.word	0x000ba689
   b40b8:	000bf224 	.word	0x000bf224

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b500      	push	{lr}
   b40e0:	b08c      	sub	sp, #48	; 0x30
   b40e2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40e4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40e8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40ec:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ee:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40f2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40f4:	6801      	ldr	r1, [r0, #0]
   b40f6:	aa04      	add	r2, sp, #16
   b40f8:	201e      	movs	r0, #30
    attr.flags = 0;
   b40fa:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40fe:	f006 fd03 	bl	bab08 <log_message_v>
}
   b4102:	b00c      	add	sp, #48	; 0x30
   b4104:	f85d eb04 	ldr.w	lr, [sp], #4
   b4108:	b003      	add	sp, #12
   b410a:	4770      	bx	lr

000b410c <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b410c:	b510      	push	{r4, lr}
    if (!_instance) {
   b410e:	4c06      	ldr	r4, [pc, #24]	; (b4128 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4110:	6823      	ldr	r3, [r4, #0]
   b4112:	b933      	cbnz	r3, b4122 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4114:	2004      	movs	r0, #4
   b4116:	f7ff ffbe 	bl	b4096 <_Znwj>
   b411a:	b108      	cbz	r0, b4120 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b411c:	4b03      	ldr	r3, [pc, #12]	; (b412c <_ZN14LoRA_Functions8instanceEv+0x20>)
   b411e:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4120:	6020      	str	r0, [r4, #0]
}
   b4122:	6820      	ldr	r0, [r4, #0]
   b4124:	bd10      	pop	{r4, pc}
   b4126:	bf00      	nop
   b4128:	2003defc 	.word	0x2003defc
   b412c:	000bf514 	.word	0x000bf514

000b4130 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4130:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4132:	4834      	ldr	r0, [pc, #208]	; (b4204 <_ZN14LoRA_Functions5setupEb+0xd4>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4134:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4136:	f005 f876 	bl	b9226 <_ZN8RHRouter4initEv>
   b413a:	4604      	mov	r4, r0
   b413c:	b930      	cbnz	r0, b414c <_ZN14LoRA_Functions5setupEb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b413e:	4932      	ldr	r1, [pc, #200]	; (b4208 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4140:	4832      	ldr	r0, [pc, #200]	; (b420c <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4142:	f7ff ffcb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
	
	if (manager.thisAddress() > 0) Log.info("LoRA Radio initialized as node %i and with a DeviceID of %i", manager.thisAddress(), sysStatus.get_deviceID());
	else Log.info("LoRA Radio initialized as a gateway with a deviceID of %i", sysStatus.get_deviceID());
	return true;
}
   b4146:	4620      	mov	r0, r4
   b4148:	b002      	add	sp, #8
   b414a:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b414c:	ed9f 0a30 	vldr	s0, [pc, #192]	; b4210 <_ZN14LoRA_Functions5setupEb+0xe0>
   b4150:	4830      	ldr	r0, [pc, #192]	; (b4214 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b4152:	f005 fb61 	bl	b9818 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4156:	2200      	movs	r2, #0
   b4158:	2117      	movs	r1, #23
   b415a:	482e      	ldr	r0, [pc, #184]	; (b4214 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b415c:	f005 fcd6 	bl	b9b0c <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.get_structuresVersion() == 128)) {    	// This will be our indication that the deviceID and nodeID has not yet been set
   b4160:	f001 f93c 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4164:	f001 fa81 	bl	b566a <_ZNK13sysStatusData21get_structuresVersionEv>
   b4168:	2880      	cmp	r0, #128	; 0x80
   b416a:	d022      	beq.n	b41b2 <_ZN14LoRA_Functions5setupEb+0x82>
		randomSeed(sysStatus.get_lastConnection());			// 32-bit number for seed
   b416c:	f001 f936 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4170:	f001 fb38 	bl	b57e4 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4174:	f009 f8b9 	bl	bd2ea <_Z10randomSeedj>
		sysStatus.set_deviceID(random(1,65535));			// 16-bit number for deviceID
   b4178:	f001 f930 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b417c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4180:	4606      	mov	r6, r0
   b4182:	2001      	movs	r0, #1
   b4184:	f009 f8a7 	bl	bd2d6 <_Z6randomii>
   b4188:	b281      	uxth	r1, r0
   b418a:	4630      	mov	r0, r6
   b418c:	f001 fa2b 	bl	b55e6 <_ZN13sysStatusData12set_deviceIDEt>
		if (!gatewayID) sysStatus.set_nodeNumber(random(10,255));		// Random number in - unconfigured - range will trigger a Join request
   b4190:	bb55      	cbnz	r5, b41e8 <_ZN14LoRA_Functions5setupEb+0xb8>
   b4192:	f001 f923 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4196:	21ff      	movs	r1, #255	; 0xff
   b4198:	4605      	mov	r5, r0
   b419a:	200a      	movs	r0, #10
   b419c:	f009 f89b 	bl	bd2d6 <_Z6randomii>
   b41a0:	b281      	uxth	r1, r0
   b41a2:	4628      	mov	r0, r5
		else sysStatus.set_nodeNumber(0);
   b41a4:	f001 fa25 	bl	b55f2 <_ZN13sysStatusData14set_nodeNumberEt>
		sysStatus.set_structuresVersion(128);			// Set the structure to the magic number so we can have a stable deviceID
   b41a8:	f001 f918 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b41ac:	2180      	movs	r1, #128	; 0x80
   b41ae:	f001 fa93 	bl	b56d8 <_ZN13sysStatusData21set_structuresVersionEh>
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
   b41b2:	f001 f913 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b41b6:	f001 f9d5 	bl	b5564 <_ZNK13sysStatusData14get_nodeNumberEv>
   b41ba:	b2c1      	uxtb	r1, r0
   b41bc:	4816      	ldr	r0, [pc, #88]	; (b4218 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b41be:	f004 fb5e 	bl	b887e <_ZN10RHDatagram14setThisAddressEh>
	if (manager.thisAddress() > 0) Log.info("LoRA Radio initialized as node %i and with a DeviceID of %i", manager.thisAddress(), sysStatus.get_deviceID());
   b41c2:	4815      	ldr	r0, [pc, #84]	; (b4218 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b41c4:	f004 fb41 	bl	b884a <_ZN10RHDatagram11thisAddressEv>
   b41c8:	b190      	cbz	r0, b41f0 <_ZN14LoRA_Functions5setupEb+0xc0>
   b41ca:	4813      	ldr	r0, [pc, #76]	; (b4218 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b41cc:	f004 fb3d 	bl	b884a <_ZN10RHDatagram11thisAddressEv>
   b41d0:	9001      	str	r0, [sp, #4]
   b41d2:	f001 f903 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b41d6:	f001 f9c0 	bl	b555a <_ZNK13sysStatusData12get_deviceIDEv>
   b41da:	9a01      	ldr	r2, [sp, #4]
   b41dc:	490f      	ldr	r1, [pc, #60]	; (b421c <_ZN14LoRA_Functions5setupEb+0xec>)
   b41de:	4603      	mov	r3, r0
   b41e0:	480a      	ldr	r0, [pc, #40]	; (b420c <_ZN14LoRA_Functions5setupEb+0xdc>)
   b41e2:	f7ff ff7b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b41e6:	e7ae      	b.n	b4146 <_ZN14LoRA_Functions5setupEb+0x16>
		else sysStatus.set_nodeNumber(0);
   b41e8:	f001 f8f8 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b41ec:	2100      	movs	r1, #0
   b41ee:	e7d9      	b.n	b41a4 <_ZN14LoRA_Functions5setupEb+0x74>
	else Log.info("LoRA Radio initialized as a gateway with a deviceID of %i", sysStatus.get_deviceID());
   b41f0:	f001 f8f4 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b41f4:	f001 f9b1 	bl	b555a <_ZNK13sysStatusData12get_deviceIDEv>
   b41f8:	4909      	ldr	r1, [pc, #36]	; (b4220 <_ZN14LoRA_Functions5setupEb+0xf0>)
   b41fa:	4602      	mov	r2, r0
   b41fc:	4803      	ldr	r0, [pc, #12]	; (b420c <_ZN14LoRA_Functions5setupEb+0xdc>)
   b41fe:	f7ff ff6d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4202:	e7a0      	b.n	b4146 <_ZN14LoRA_Functions5setupEb+0x16>
   b4204:	2003e0b4 	.word	0x2003e0b4
   b4208:	000bf239 	.word	0x000bf239
   b420c:	2003e658 	.word	0x2003e658
   b4210:	4464c000 	.word	0x4464c000
   b4214:	2003df84 	.word	0x2003df84
   b4218:	2003e0b8 	.word	0x2003e0b8
   b421c:	000bf245 	.word	0x000bf245
   b4220:	000bf281 	.word	0x000bf281

000b4224 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4224:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b4226:	4c06      	ldr	r4, [pc, #24]	; (b4240 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b4228:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b422a:	f10d 0203 	add.w	r2, sp, #3
   b422e:	a901      	add	r1, sp, #4
   b4230:	4620      	mov	r0, r4
   b4232:	f005 fa6d 	bl	b9710 <_ZN7RH_RF954recvEPhS0_>
   b4236:	2800      	cmp	r0, #0
   b4238:	d1f7      	bne.n	b422a <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b423a:	b040      	add	sp, #256	; 0x100
   b423c:	bd10      	pop	{r4, pc}
   b423e:	bf00      	nop
   b4240:	2003df84 	.word	0x2003df84

000b4244 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4244:	4801      	ldr	r0, [pc, #4]	; (b424c <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b4246:	f005 ba50 	b.w	b96ea <_ZN7RH_RF955sleepEv>
   b424a:	bf00      	nop
   b424c:	2003df84 	.word	0x2003df84

000b4250 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {
   b4250:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[5] << 8 | buf[6]);
   b4252:	4c24      	ldr	r4, [pc, #144]	; (b42e4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x94>)
   b4254:	f001 f912 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4258:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b425c:	ba49      	rev16	r1, r1
   b425e:	b289      	uxth	r1, r1
   b4260:	f001 f9e5 	bl	b562e <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[7] << 8 | buf[8]);
   b4264:	f001 f90a 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4268:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   b426c:	ba49      	rev16	r1, r1
   b426e:	b289      	uxth	r1, r1
   b4270:	f001 f9e3 	bl	b563a <_ZN17currentStatusData14set_dailyCountEt>
	current.set_stateOfCharge(buf[10]);
   b4274:	f001 f902 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4278:	4605      	mov	r5, r0
   b427a:	7aa0      	ldrb	r0, [r4, #10]
   b427c:	f00a f8fc 	bl	be478 <__aeabi_ui2d>
   b4280:	ec41 0b10 	vmov	d0, r0, r1
   b4284:	4628      	mov	r0, r5
   b4286:	f001 f933 	bl	b54f0 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[11]);
   b428a:	f001 f8f7 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b428e:	7ae1      	ldrb	r1, [r4, #11]
   b4290:	f001 fa2e 	bl	b56f0 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_internalTempC(buf[9]);
   b4294:	f001 f8f2 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4298:	7a61      	ldrb	r1, [r4, #9]
   b429a:	f001 fa23 	bl	b56e4 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_RSSI((buf[14] << 8 | buf[15]) - 65535);
   b429e:	f001 f8ed 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b42a2:	89e1      	ldrh	r1, [r4, #14]
   b42a4:	ba49      	rev16	r1, r1
   b42a6:	3101      	adds	r1, #1
   b42a8:	b289      	uxth	r1, r1
   b42aa:	f001 f9ba 	bl	b5622 <_ZN17currentStatusData8set_RSSIEt>
	current.set_messageNumber(buf[16]);
   b42ae:	f001 f8e5 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b42b2:	7c21      	ldrb	r1, [r4, #16]
   b42b4:	f001 fa22 	bl	b56fc <_ZN17currentStatusData17set_messageNumberEh>
	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b42b8:	f001 f8e0 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b42bc:	f001 f9e9 	bl	b5692 <_ZNK17currentStatusData17get_messageNumberEv>
   b42c0:	9001      	str	r0, [sp, #4]
   b42c2:	f001 f8db 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b42c6:	f001 f95c 	bl	b5582 <_ZNK17currentStatusData14get_nodeNumberEv>
   b42ca:	9a01      	ldr	r2, [sp, #4]
   b42cc:	4906      	ldr	r1, [pc, #24]	; (b42e8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x98>)
   b42ce:	4603      	mov	r3, r0
   b42d0:	4806      	ldr	r0, [pc, #24]	; (b42ec <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x9c>)
   b42d2:	f7ff ff03 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b42d6:	4b06      	ldr	r3, [pc, #24]	; (b42f0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xa0>)
   b42d8:	2204      	movs	r2, #4

	return true;
}
   b42da:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b42dc:	701a      	strb	r2, [r3, #0]
}
   b42de:	b003      	add	sp, #12
   b42e0:	bd30      	pop	{r4, r5, pc}
   b42e2:	bf00      	nop
   b42e4:	2003df08 	.word	0x2003df08
   b42e8:	000bf2bb 	.word	0x000bf2bb
   b42ec:	2003e658 	.word	0x2003e658
   b42f0:	2003def8 	.word	0x2003def8

000b42f4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:

bool LoRA_Functions::acknowledgeDataReportGateway() {
   b42f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static int success = 0;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	attempts++;
   b42f8:	4d4b      	ldr	r5, [pc, #300]	; (b4428 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x134>)
     
	buf[0] = current.get_messageNumber();			 		// Message number
   b42fa:	4c4c      	ldr	r4, [pc, #304]	; (b442c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x138>)
	attempts++;
   b42fc:	682b      	ldr	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() {
   b42fe:	b087      	sub	sp, #28
	attempts++;
   b4300:	3301      	adds	r3, #1
   b4302:	602b      	str	r3, [r5, #0]
	buf[0] = current.get_messageNumber();			 		// Message number
   b4304:	f001 f8ba 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4308:	f001 f9c3 	bl	b5692 <_ZNK17currentStatusData17get_messageNumberEv>
   b430c:	7020      	strb	r0, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b430e:	f009 fc5a 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4312:	1600      	asrs	r0, r0, #24
   b4314:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4316:	f009 fc56 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b431a:	1400      	asrs	r0, r0, #16
   b431c:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b431e:	f009 fc52 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4322:	1200      	asrs	r0, r0, #8
   b4324:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    	// First byte			
   b4326:	f009 fc4e 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b432a:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b432c:	f001 f856 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4330:	f001 f91d 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4334:	0a00      	lsrs	r0, r0, #8
   b4336:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());	
   b4338:	f001 f850 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b433c:	f001 f917 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4340:	71a0      	strb	r0, [r4, #6]
	
	Log.info("Sent response to node %d message %d, time = %s and frequency %d minutes", current.get_nodeNumber(), buf[0], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b4342:	f001 f89b 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4346:	f001 f91c 	bl	b5582 <_ZNK17currentStatusData14get_nodeNumberEv>
   b434a:	7827      	ldrb	r7, [r4, #0]
   b434c:	4606      	mov	r6, r0
   b434e:	f009 fc3a 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4352:	4602      	mov	r2, r0
   b4354:	17c3      	asrs	r3, r0, #31
   b4356:	a802      	add	r0, sp, #8
   b4358:	f009 fb30 	bl	bd9bc <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b435c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   b4360:	f001 f83c 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4364:	f001 f903 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4368:	4632      	mov	r2, r6
   b436a:	4931      	ldr	r1, [pc, #196]	; (b4430 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x13c>)
   b436c:	463b      	mov	r3, r7
   b436e:	e9cd 8000 	strd	r8, r0, [sp]
   b4372:	4830      	ldr	r0, [pc, #192]	; (b4434 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b4374:	f7ff feb2 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4378:	a802      	add	r0, sp, #8
   b437a:	f009 f885 	bl	bd488 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b437e:	4b2e      	ldr	r3, [pc, #184]	; (b4438 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>)
   b4380:	881e      	ldrh	r6, [r3, #0]
   b4382:	2101      	movs	r1, #1
   b4384:	4630      	mov	r0, r6
   b4386:	f009 fe2e 	bl	bdfe6 <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b438a:	f001 f877 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b438e:	f001 f8f8 	bl	b5582 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4392:	2304      	movs	r3, #4
   b4394:	9300      	str	r3, [sp, #0]
   b4396:	4621      	mov	r1, r4
   b4398:	b2c3      	uxtb	r3, r0
   b439a:	2209      	movs	r2, #9
   b439c:	4827      	ldr	r0, [pc, #156]	; (b443c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x148>)
   b439e:	f004 fd07 	bl	b8db0 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b43a2:	4b27      	ldr	r3, [pc, #156]	; (b4440 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x14c>)
   b43a4:	4604      	mov	r4, r0
		success++;
   b43a6:	6818      	ldr	r0, [r3, #0]
	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b43a8:	bb04      	cbnz	r4, b43ec <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xf8>
		success++;
   b43aa:	3001      	adds	r0, #1
   b43ac:	6018      	str	r0, [r3, #0]
		Log.info("Response received successfully - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b43ae:	f00a f873 	bl	be498 <__aeabi_i2d>
   b43b2:	4680      	mov	r8, r0
   b43b4:	6828      	ldr	r0, [r5, #0]
   b43b6:	4689      	mov	r9, r1
   b43b8:	f00a f86e 	bl	be498 <__aeabi_i2d>
   b43bc:	4602      	mov	r2, r0
   b43be:	460b      	mov	r3, r1
   b43c0:	4640      	mov	r0, r8
   b43c2:	4649      	mov	r1, r9
   b43c4:	f00a f9fc 	bl	be7c0 <__aeabi_ddiv>
   b43c8:	4b1e      	ldr	r3, [pc, #120]	; (b4444 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x150>)
   b43ca:	2200      	movs	r2, #0
   b43cc:	f00a f8ce 	bl	be56c <__aeabi_dmul>
   b43d0:	4602      	mov	r2, r0
   b43d2:	460b      	mov	r3, r1
   b43d4:	4817      	ldr	r0, [pc, #92]	; (b4434 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b43d6:	491c      	ldr	r1, [pc, #112]	; (b4448 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x154>)
   b43d8:	f7ff fe80 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b43dc:	4630      	mov	r0, r6
   b43de:	4621      	mov	r1, r4
   b43e0:	f009 fe01 	bl	bdfe6 <digitalWrite>
		return true;
   b43e4:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b43e6:	b007      	add	sp, #28
   b43e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b43ec:	f00a f854 	bl	be498 <__aeabi_i2d>
   b43f0:	4680      	mov	r8, r0
   b43f2:	6828      	ldr	r0, [r5, #0]
   b43f4:	4689      	mov	r9, r1
   b43f6:	f00a f84f 	bl	be498 <__aeabi_i2d>
   b43fa:	4602      	mov	r2, r0
   b43fc:	460b      	mov	r3, r1
   b43fe:	4640      	mov	r0, r8
   b4400:	4649      	mov	r1, r9
   b4402:	f00a f9dd 	bl	be7c0 <__aeabi_ddiv>
   b4406:	4b0f      	ldr	r3, [pc, #60]	; (b4444 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x150>)
   b4408:	2200      	movs	r2, #0
   b440a:	f00a f8af 	bl	be56c <__aeabi_dmul>
   b440e:	4602      	mov	r2, r0
   b4410:	460b      	mov	r3, r1
   b4412:	4808      	ldr	r0, [pc, #32]	; (b4434 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b4414:	490d      	ldr	r1, [pc, #52]	; (b444c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x158>)
   b4416:	f7ff fe61 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b441a:	4630      	mov	r0, r6
   b441c:	2100      	movs	r1, #0
   b441e:	f009 fde2 	bl	bdfe6 <digitalWrite>
	return false;
   b4422:	2000      	movs	r0, #0
   b4424:	e7df      	b.n	b43e6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xf2>
   b4426:	bf00      	nop
   b4428:	2003df04 	.word	0x2003df04
   b442c:	2003df08 	.word	0x2003df08
   b4430:	000bf2e2 	.word	0x000bf2e2
   b4434:	2003e658 	.word	0x2003e658
   b4438:	000bf834 	.word	0x000bf834
   b443c:	2003e0b4 	.word	0x2003e0b4
   b4440:	2003df00 	.word	0x2003df00
   b4444:	40590000 	.word	0x40590000
   b4448:	000bf32a 	.word	0x000bf32a
   b444c:	000bf35e 	.word	0x000bf35e

000b4450 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
	lora_state = JOIN_ACK;			// Prepare to respond

	return true;
}

bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b4450:	b530      	push	{r4, r5, lr}
   b4452:	b089      	sub	sp, #36	; 0x24
	uint16_t newNodeNumber = 0;

	if (current.get_nodeNumber() < 10) {							// Device needs a new node number
   b4454:	f001 f812 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4458:	f001 f893 	bl	b5582 <_ZNK17currentStatusData14get_nodeNumberEv>
   b445c:	2809      	cmp	r0, #9
   b445e:	d860      	bhi.n	b4522 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xd2>
		randomSeed(sysStatus.get_lastHookResponse());
   b4460:	f000 ffbc 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4464:	f001 f9b9 	bl	b57da <_ZNK13sysStatusData20get_lastHookResponseEv>
   b4468:	f008 ff3f 	bl	bd2ea <_Z10randomSeedj>
		newNodeNumber = random(10,255);
   b446c:	21ff      	movs	r1, #255	; 0xff
   b446e:	200a      	movs	r0, #10
   b4470:	f008 ff31 	bl	bd2d6 <_Z6randomii>
   b4474:	b285      	uxth	r5, r0
	}

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = 128;								// Magic number - so you can trust me
   b4476:	4c31      	ldr	r4, [pc, #196]	; (b453c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xec>)
   b4478:	2380      	movs	r3, #128	; 0x80
   b447a:	7023      	strb	r3, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b447c:	f009 fba3 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4480:	1600      	asrs	r0, r0, #24
   b4482:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b4484:	f009 fb9f 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4488:	1400      	asrs	r0, r0, #16
   b448a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b448c:	f009 fb9b 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4490:	1200      	asrs	r0, r0, #8
   b4492:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte		
   b4494:	f009 fb97 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4498:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b449a:	f000 ff9f 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b449e:	f001 f866 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44a2:	0a00      	lsrs	r0, r0, #8
   b44a4:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());	
   b44a6:	f000 ff99 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b44aa:	f001 f860 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[7] = highByte(newNodeNumber);			// New Node Number for device
   b44ae:	0a2b      	lsrs	r3, r5, #8
   b44b0:	71e3      	strb	r3, [r4, #7]
	buf[8] = lowByte(newNodeNumber);	
   b44b2:	7225      	strb	r5, [r4, #8]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());	
   b44b4:	71a0      	strb	r0, [r4, #6]
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b44b6:	f009 fb86 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b44ba:	4602      	mov	r2, r0
   b44bc:	17c3      	asrs	r3, r0, #31
   b44be:	a804      	add	r0, sp, #16
   b44c0:	f009 fa7c 	bl	bd9bc <_ZN9TimeClass7timeStrEx>
   b44c4:	9b04      	ldr	r3, [sp, #16]
   b44c6:	9303      	str	r3, [sp, #12]
	
	Log.info("Sent response to node %d, time = %s and frequency %d minutes", newNodeNumber, Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b44c8:	f000 ff88 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b44cc:	f001 f84f 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44d0:	462a      	mov	r2, r5
   b44d2:	9b03      	ldr	r3, [sp, #12]
   b44d4:	491a      	ldr	r1, [pc, #104]	; (b4540 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf0>)
   b44d6:	9000      	str	r0, [sp, #0]
   b44d8:	481a      	ldr	r0, [pc, #104]	; (b4544 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf4>)
   b44da:	f7ff fdff 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b44de:	a804      	add	r0, sp, #16
   b44e0:	f008 ffd2 	bl	bd488 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b44e4:	4b18      	ldr	r3, [pc, #96]	; (b4548 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf8>)
   b44e6:	881d      	ldrh	r5, [r3, #0]
   b44e8:	2101      	movs	r1, #1
   b44ea:	4628      	mov	r0, r5
   b44ec:	f009 fd7b 	bl	bdfe6 <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b44f0:	f000 ffc4 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b44f4:	f001 f845 	bl	b5582 <_ZNK17currentStatusData14get_nodeNumberEv>
   b44f8:	2302      	movs	r3, #2
   b44fa:	9300      	str	r3, [sp, #0]
   b44fc:	4621      	mov	r1, r4
   b44fe:	b2c3      	uxtb	r3, r0
   b4500:	2209      	movs	r2, #9
   b4502:	4812      	ldr	r0, [pc, #72]	; (b454c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xfc>)
   b4504:	f004 fc54 	bl	b8db0 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4508:	4604      	mov	r4, r0
   b450a:	b960      	cbnz	r0, b4526 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xd6>
		Log.info("Response received successfully");
   b450c:	4910      	ldr	r1, [pc, #64]	; (b4550 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x100>)
   b450e:	480d      	ldr	r0, [pc, #52]	; (b4544 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf4>)
   b4510:	f7ff fde4 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4514:	4628      	mov	r0, r5
   b4516:	4621      	mov	r1, r4
   b4518:	f009 fd65 	bl	bdfe6 <digitalWrite>
		return true;
   b451c:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b451e:	b009      	add	sp, #36	; 0x24
   b4520:	bd30      	pop	{r4, r5, pc}
	uint16_t newNodeNumber = 0;
   b4522:	2500      	movs	r5, #0
   b4524:	e7a7      	b.n	b4476 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x26>
	Log.info("Response not acknowledged");
   b4526:	490b      	ldr	r1, [pc, #44]	; (b4554 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x104>)
   b4528:	4806      	ldr	r0, [pc, #24]	; (b4544 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf4>)
   b452a:	f7ff fdd7 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b452e:	4628      	mov	r0, r5
   b4530:	2100      	movs	r1, #0
   b4532:	f009 fd58 	bl	bdfe6 <digitalWrite>
	return false;
   b4536:	2000      	movs	r0, #0
   b4538:	e7f1      	b.n	b451e <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xce>
   b453a:	bf00      	nop
   b453c:	2003df08 	.word	0x2003df08
   b4540:	000bf38d 	.word	0x000bf38d
   b4544:	2003e658 	.word	0x2003e658
   b4548:	000bf834 	.word	0x000bf834
   b454c:	2003e0b4 	.word	0x2003e0b4
   b4550:	000bf3ca 	.word	0x000bf3ca
   b4554:	000bf3e9 	.word	0x000bf3e9

000b4558 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:


bool LoRA_Functions::decipherAlertReportGateway() {
   b4558:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[0]);
   b455a:	4c12      	ldr	r4, [pc, #72]	; (b45a4 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x4c>)
   b455c:	f000 ff8e 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4560:	7821      	ldrb	r1, [r4, #0]
   b4562:	f001 f8d1 	bl	b5708 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]);
   b4566:	f000 ff89 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b456a:	f8d4 2001 	ldr.w	r2, [r4, #1]
   b456e:	ba12      	rev	r2, r2
   b4570:	17d3      	asrs	r3, r2, #31
   b4572:	f001 f965 	bl	b5840 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI((buf[5] << 8 | buf[6]) - 65535);
   b4576:	f000 ff81 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b457a:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b457e:	ba49      	rev16	r1, r1
   b4580:	3101      	adds	r1, #1
   b4582:	b289      	uxth	r1, r1
   b4584:	f001 f84d 	bl	b5622 <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b4588:	f000 ff78 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b458c:	f000 fff9 	bl	b5582 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4590:	4905      	ldr	r1, [pc, #20]	; (b45a8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x50>)
   b4592:	4602      	mov	r2, r0
   b4594:	4805      	ldr	r0, [pc, #20]	; (b45ac <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b4596:	f7ff fda1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b459a:	4b05      	ldr	r3, [pc, #20]	; (b45b0 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b459c:	2206      	movs	r2, #6
   b459e:	701a      	strb	r2, [r3, #0]

	return true;
}
   b45a0:	2001      	movs	r0, #1
   b45a2:	bd10      	pop	{r4, pc}
   b45a4:	2003df08 	.word	0x2003df08
   b45a8:	000bf403 	.word	0x000bf403
   b45ac:	2003e658 	.word	0x2003e658
   b45b0:	2003def8 	.word	0x2003def8

000b45b4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:

bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b45b4:	b570      	push	{r4, r5, r6, lr}
	// uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = 0;									// Reserved
   b45b6:	4c2f      	ldr	r4, [pc, #188]	; (b4674 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc0>)
   b45b8:	2500      	movs	r5, #0
bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b45ba:	b088      	sub	sp, #32
	buf[0] = 0;									// Reserved
   b45bc:	7025      	strb	r5, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b45be:	f009 fb02 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b45c2:	1600      	asrs	r0, r0, #24
   b45c4:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b45c6:	f009 fafe 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b45ca:	1400      	asrs	r0, r0, #16
   b45cc:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b45ce:	f009 fafa 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b45d2:	1200      	asrs	r0, r0, #8
   b45d4:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte	
   b45d6:	f009 faf6 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b45da:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b45dc:	f000 fefe 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b45e0:	f000 ffc5 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b45e4:	0a00      	lsrs	r0, r0, #8
   b45e6:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());			
   b45e8:	f000 fef8 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b45ec:	f000 ffbf 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
	
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b45f0:	4b21      	ldr	r3, [pc, #132]	; (b4678 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc4>)
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());			
   b45f2:	71a0      	strb	r0, [r4, #6]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b45f4:	881e      	ldrh	r6, [r3, #0]
   b45f6:	2101      	movs	r1, #1
   b45f8:	4630      	mov	r0, r6
   b45fa:	f009 fcf4 	bl	bdfe6 <digitalWrite>

	if (manager.sendtoWait(buf, 7, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b45fe:	f000 ff3d 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4602:	f000 ffbe 	bl	b5582 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4606:	2306      	movs	r3, #6
   b4608:	9300      	str	r3, [sp, #0]
   b460a:	4621      	mov	r1, r4
   b460c:	b2c3      	uxtb	r3, r0
   b460e:	2207      	movs	r2, #7
   b4610:	481a      	ldr	r0, [pc, #104]	; (b467c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc8>)
   b4612:	f004 fbcd 	bl	b8db0 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4616:	4604      	mov	r4, r0
   b4618:	bb10      	cbnz	r0, b4660 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xac>
		Log.info("Sent acknowledgment to Node %d, time = %s and frequency %d minutes", current.get_nodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b461a:	f000 ff2f 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b461e:	f000 ffb0 	bl	b5582 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4622:	4605      	mov	r5, r0
   b4624:	f009 facf 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4628:	4602      	mov	r2, r0
   b462a:	17c3      	asrs	r3, r0, #31
   b462c:	a804      	add	r0, sp, #16
   b462e:	f009 f9c5 	bl	bd9bc <_ZN9TimeClass7timeStrEx>
   b4632:	9b04      	ldr	r3, [sp, #16]
   b4634:	9303      	str	r3, [sp, #12]
   b4636:	f000 fed1 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b463a:	f000 ff98 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b463e:	9b03      	ldr	r3, [sp, #12]
   b4640:	490f      	ldr	r1, [pc, #60]	; (b4680 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xcc>)
   b4642:	9000      	str	r0, [sp, #0]
   b4644:	462a      	mov	r2, r5
   b4646:	480f      	ldr	r0, [pc, #60]	; (b4684 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd0>)
   b4648:	f7ff fd48 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b464c:	a804      	add	r0, sp, #16
   b464e:	f008 ff1b 	bl	bd488 <_ZN6StringD1Ev>
		digitalWrite(BLUE_LED,LOW);
   b4652:	4630      	mov	r0, r6
   b4654:	4621      	mov	r1, r4
   b4656:	f009 fcc6 	bl	bdfe6 <digitalWrite>
		return true;
   b465a:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b465c:	b008      	add	sp, #32
   b465e:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b4660:	4909      	ldr	r1, [pc, #36]	; (b4688 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd4>)
   b4662:	4808      	ldr	r0, [pc, #32]	; (b4684 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd0>)
   b4664:	f7ff fd3a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b4668:	4630      	mov	r0, r6
   b466a:	4629      	mov	r1, r5
   b466c:	f009 fcbb 	bl	bdfe6 <digitalWrite>
	return false;
   b4670:	4628      	mov	r0, r5
   b4672:	e7f3      	b.n	b465c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xa8>
   b4674:	2003df08 	.word	0x2003df08
   b4678:	000bf834 	.word	0x000bf834
   b467c:	2003e0b4 	.word	0x2003e0b4
   b4680:	000bf428 	.word	0x000bf428
   b4684:	2003e658 	.word	0x2003e658
   b4688:	000bf3e9 	.word	0x000bf3e9

000b468c <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv>:
bool LoRA_Functions::respondForLoRAMessageGateway() {
   b468c:	b510      	push	{r4, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b468e:	4c13      	ldr	r4, [pc, #76]	; (b46dc <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x50>)
   b4690:	4b13      	ldr	r3, [pc, #76]	; (b46e0 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x54>)
   b4692:	7822      	ldrb	r2, [r4, #0]
   b4694:	4913      	ldr	r1, [pc, #76]	; (b46e4 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x58>)
   b4696:	4814      	ldr	r0, [pc, #80]	; (b46e8 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x5c>)
   b4698:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b469c:	f7ff fd1e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b46a0:	7823      	ldrb	r3, [r4, #0]
   b46a2:	2b04      	cmp	r3, #4
   b46a4:	d00c      	beq.n	b46c0 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x34>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b46a6:	7823      	ldrb	r3, [r4, #0]
   b46a8:	2b02      	cmp	r3, #2
   b46aa:	d104      	bne.n	b46b6 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x2a>
   b46ac:	f7ff fd2e 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b46b0:	f7ff fece 	bl	b4450 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b46b4:	b950      	cbnz	r0, b46cc <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x40>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b46b6:	7823      	ldrb	r3, [r4, #0]
   b46b8:	2b06      	cmp	r3, #6
   b46ba:	d009      	beq.n	b46d0 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x44>
	return false; 
   b46bc:	2000      	movs	r0, #0
   b46be:	e006      	b.n	b46ce <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x42>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b46c0:	f7ff fd24 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b46c4:	f7ff fe16 	bl	b42f4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b46c8:	2800      	cmp	r0, #0
   b46ca:	d0ec      	beq.n	b46a6 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv+0x1a>
   b46cc:	2001      	movs	r0, #1
}
   b46ce:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b46d0:	f7ff fd1c 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
}
   b46d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b46d8:	f7ff bf6c 	b.w	b45b4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b46dc:	2003def8 	.word	0x2003def8
   b46e0:	2003dd00 	.word	0x2003dd00
   b46e4:	000bf46b 	.word	0x000bf46b
   b46e8:	2003e658 	.word	0x2003e658

000b46ec <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b46ec:	b530      	push	{r4, r5, lr}
   b46ee:	b089      	sub	sp, #36	; 0x24
	uint8_t len = sizeof(buf);
   b46f0:	2379      	movs	r3, #121	; 0x79
   b46f2:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b46f6:	f10d 031f 	add.w	r3, sp, #31
   b46fa:	9303      	str	r3, [sp, #12]
   b46fc:	f10d 031e 	add.w	r3, sp, #30
   b4700:	4c3d      	ldr	r4, [pc, #244]	; (b47f8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x10c>)
   b4702:	9302      	str	r3, [sp, #8]
   b4704:	f10d 031d 	add.w	r3, sp, #29
   b4708:	9301      	str	r3, [sp, #4]
   b470a:	ab07      	add	r3, sp, #28
   b470c:	9300      	str	r3, [sp, #0]
   b470e:	483b      	ldr	r0, [pc, #236]	; (b47fc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x110>)
   b4710:	f10d 031b 	add.w	r3, sp, #27
   b4714:	f10d 021a 	add.w	r2, sp, #26
   b4718:	4621      	mov	r1, r4
   b471a:	f004 fb7d 	bl	b8e18 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b471e:	b910      	cbnz	r0, b4726 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false; 
   b4720:	2000      	movs	r0, #0
}
   b4722:	b009      	add	sp, #36	; 0x24
   b4724:	bd30      	pop	{r4, r5, pc}
		buf[len] = 0;
   b4726:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b472a:	2200      	movs	r2, #0
   b472c:	54e2      	strb	r2, [r4, r3]
		current.set_deviceID(buf[0] << 8 | buf[1]);					// Set the current device ID for reporting
   b472e:	f000 fea5 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4732:	8821      	ldrh	r1, [r4, #0]
   b4734:	ba49      	rev16	r1, r1
   b4736:	b289      	uxth	r1, r1
   b4738:	f000 ff67 	bl	b560a <_ZN17currentStatusData12set_deviceIDEt>
		current.set_nodeNumber(buf[2] << 8 | buf[3]);
   b473c:	f000 fe9e 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4740:	8861      	ldrh	r1, [r4, #2]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4742:	4c2f      	ldr	r4, [pc, #188]	; (b4800 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x114>)
		current.set_nodeNumber(buf[2] << 8 | buf[3]);
   b4744:	ba49      	rev16	r1, r1
   b4746:	b289      	uxth	r1, r1
   b4748:	f000 ff65 	bl	b5616 <_ZN17currentStatusData14set_nodeNumberEt>
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b474c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b4750:	f003 030f 	and.w	r3, r3, #15
   b4754:	7023      	strb	r3, [r4, #0]
		Log.info("From node %d to %d with rssi=%d - a %s message of length %d in %d hops", current.get_nodeNumber(), dest, driver.lastRssi(), loraStateNames[lora_state], len, hops);
   b4756:	f000 fe91 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b475a:	f000 ff12 	bl	b5582 <_ZNK17currentStatusData14get_nodeNumberEv>
   b475e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b4762:	9005      	str	r0, [sp, #20]
   b4764:	4827      	ldr	r0, [pc, #156]	; (b4804 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x118>)
   b4766:	9304      	str	r3, [sp, #16]
   b4768:	f004 f907 	bl	b897a <_ZN15RHGenericDriver8lastRssiEv>
   b476c:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b4770:	9103      	str	r1, [sp, #12]
   b4772:	f89d 101a 	ldrb.w	r1, [sp, #26]
   b4776:	9102      	str	r1, [sp, #8]
   b4778:	7825      	ldrb	r5, [r4, #0]
   b477a:	4923      	ldr	r1, [pc, #140]	; (b4808 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x11c>)
   b477c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
   b4780:	e9cd 0100 	strd	r0, r1, [sp]
   b4784:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b4788:	4920      	ldr	r1, [pc, #128]	; (b480c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x120>)
   b478a:	4821      	ldr	r0, [pc, #132]	; (b4810 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x124>)
   b478c:	f7ff fca6 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4790:	7823      	ldrb	r3, [r4, #0]
   b4792:	2b03      	cmp	r3, #3
   b4794:	d01f      	beq.n	b47d6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xea>
		if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b4796:	7823      	ldrb	r3, [r4, #0]
   b4798:	2b01      	cmp	r3, #1
   b479a:	d123      	bne.n	b47e4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xf8>
   b479c:	f7ff fcb6 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
	lora_state = JOIN_ACK;			// Prepare to respond
   b47a0:	2302      	movs	r3, #2
   b47a2:	7023      	strb	r3, [r4, #0]
		if (frequencyUpdated) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b47a4:	4b1b      	ldr	r3, [pc, #108]	; (b4814 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x128>)
   b47a6:	781a      	ldrb	r2, [r3, #0]
   b47a8:	b182      	cbz	r2, b47cc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xe0>
			frequencyUpdated = false;
   b47aa:	2200      	movs	r2, #0
   b47ac:	701a      	strb	r2, [r3, #0]
			sysStatus.set_frequencyMinutes(updatedFrequencyMins);		// This was the temporary value from the particle function
   b47ae:	f000 fe15 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b47b2:	4b19      	ldr	r3, [pc, #100]	; (b4818 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x12c>)
   b47b4:	8819      	ldrh	r1, [r3, #0]
   b47b6:	f000 ff22 	bl	b55fe <_ZN13sysStatusData20set_frequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b47ba:	f000 fe0f 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b47be:	f000 fed6 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b47c2:	4916      	ldr	r1, [pc, #88]	; (b481c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x130>)
   b47c4:	4602      	mov	r2, r0
   b47c6:	4812      	ldr	r0, [pc, #72]	; (b4810 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x124>)
   b47c8:	f7ff fc88 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondForLoRAMessageGateway()) return true;
   b47cc:	f7ff fc9e 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b47d0:	f7ff ff5c 	bl	b468c <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEv>
   b47d4:	e7a5      	b.n	b4722 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b47d6:	f7ff fc99 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b47da:	f7ff fd39 	bl	b4250 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
   b47de:	2800      	cmp	r0, #0
   b47e0:	d1d9      	bne.n	b4796 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xaa>
   b47e2:	e79d      	b.n	b4720 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b47e4:	2b05      	cmp	r3, #5
   b47e6:	d1dd      	bne.n	b47a4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xb8>
   b47e8:	f7ff fc90 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b47ec:	f7ff feb4 	bl	b4558 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b47f0:	2800      	cmp	r0, #0
   b47f2:	d1d7      	bne.n	b47a4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xb8>
   b47f4:	e794      	b.n	b4720 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
   b47f6:	bf00      	nop
   b47f8:	2003df08 	.word	0x2003df08
   b47fc:	2003e0b4 	.word	0x2003e0b4
   b4800:	2003def8 	.word	0x2003def8
   b4804:	2003df84 	.word	0x2003df84
   b4808:	2003dd00 	.word	0x2003dd00
   b480c:	000bf490 	.word	0x000bf490
   b4810:	2003e658 	.word	0x2003e658
   b4814:	2003e409 	.word	0x2003e409
   b4818:	2003de0c 	.word	0x2003de0c
   b481c:	000bf4d7 	.word	0x000bf4d7

000b4820 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4820:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4822:	4a08      	ldr	r2, [pc, #32]	; (b4844 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b4824:	4c08      	ldr	r4, [pc, #32]	; (b4848 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b4826:	4909      	ldr	r1, [pc, #36]	; (b484c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b4828:	7812      	ldrb	r2, [r2, #0]
   b482a:	7809      	ldrb	r1, [r1, #0]
   b482c:	4b08      	ldr	r3, [pc, #32]	; (b4850 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b482e:	4620      	mov	r0, r4
   b4830:	f004 ffb4 	bl	b979c <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4834:	4621      	mov	r1, r4
   b4836:	4807      	ldr	r0, [pc, #28]	; (b4854 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b4838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b483c:	2200      	movs	r2, #0
   b483e:	f004 baad 	b.w	b8d9c <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4842:	bf00      	nop
   b4844:	000bf83a 	.word	0x000bf83a
   b4848:	2003df84 	.word	0x2003df84
   b484c:	000bf838 	.word	0x000bf838
   b4850:	2003e45c 	.word	0x2003e45c
   b4854:	2003e0b4 	.word	0x2003e0b4

000b4858 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4858:	4b01      	ldr	r3, [pc, #4]	; (b4860 <_Z18outOfMemoryHandleryi+0x8>)
   b485a:	601a      	str	r2, [r3, #0]
}
   b485c:	4770      	bx	lr
   b485e:	bf00      	nop
   b4860:	2003dd78 	.word	0x2003dd78

000b4864 <_Z13userSwitchISRv>:

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b4864:	4b01      	ldr	r3, [pc, #4]	; (b486c <_Z13userSwitchISRv+0x8>)
   b4866:	2201      	movs	r2, #1
   b4868:	701a      	strb	r2, [r3, #0]
}
   b486a:	4770      	bx	lr
   b486c:	2003e3e2 	.word	0x2003e3e2

000b4870 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4870:	b530      	push	{r4, r5, lr}
   b4872:	b085      	sub	sp, #20
   b4874:	4604      	mov	r4, r0
   b4876:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4878:	b160      	cbz	r0, b4894 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b487a:	6840      	ldr	r0, [r0, #4]
   b487c:	b150      	cbz	r0, b4894 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b487e:	6885      	ldr	r5, [r0, #8]
   b4880:	b145      	cbz	r5, b4894 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4882:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4886:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b488a:	68c4      	ldr	r4, [r0, #12]
   b488c:	ab01      	add	r3, sp, #4
   b488e:	466a      	mov	r2, sp
   b4890:	a902      	add	r1, sp, #8
   b4892:	47a0      	blx	r4
    }
   b4894:	b005      	add	sp, #20
   b4896:	bd30      	pop	{r4, r5, pc}

000b4898 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4898:	b530      	push	{r4, r5, lr}
   b489a:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b489c:	6800      	ldr	r0, [r0, #0]
   b489e:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b48a6:	6883      	ldr	r3, [r0, #8]
   b48a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b48ac:	b90b      	cbnz	r3, b48b2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b48ae:	f009 fc9d 	bl	be1ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b48b2:	68c3      	ldr	r3, [r0, #12]
   b48b4:	aa01      	add	r2, sp, #4
   b48b6:	a902      	add	r1, sp, #8
   b48b8:	4798      	blx	r3
      }
   b48ba:	b005      	add	sp, #20
   b48bc:	bd30      	pop	{r4, r5, pc}

000b48be <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b48be:	2a01      	cmp	r2, #1
   b48c0:	d102      	bne.n	b48c8 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b48c2:	6001      	str	r1, [r0, #0]
      }
   b48c4:	2000      	movs	r0, #0
   b48c6:	4770      	bx	lr
	  switch (__op)
   b48c8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b48ca:	bf04      	itt	eq
   b48cc:	680b      	ldreq	r3, [r1, #0]
   b48ce:	6003      	streq	r3, [r0, #0]
	      break;
   b48d0:	e7f8      	b.n	b48c4 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b48d2 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b48d2:	6803      	ldr	r3, [r0, #0]
   b48d4:	6812      	ldr	r2, [r2, #0]
   b48d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b48da:	4718      	bx	r3

000b48dc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b48dc:	b510      	push	{r4, lr}
      if (_M_manager)
   b48de:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b48e0:	4604      	mov	r4, r0
      if (_M_manager)
   b48e2:	b113      	cbz	r3, b48ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b48e4:	2203      	movs	r2, #3
   b48e6:	4601      	mov	r1, r0
   b48e8:	4798      	blx	r3
    }
   b48ea:	4620      	mov	r0, r4
   b48ec:	bd10      	pop	{r4, pc}

000b48ee <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b48ee:	b510      	push	{r4, lr}
            delete callableWrapper;
   b48f0:	4604      	mov	r4, r0
   b48f2:	b138      	cbz	r0, b4904 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b48f4:	f7ff fff2 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   b48f8:	4620      	mov	r0, r4
   b48fa:	2110      	movs	r1, #16
        };
   b48fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4900:	f7ff bbcd 	b.w	b409e <_ZdlPvj>
        };
   b4904:	bd10      	pop	{r4, pc}
	...

000b4908 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4908:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b490a:	f000 fd67 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b490e:	f000 fe2e 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4912:	4604      	mov	r4, r0
   	if (Time.isValid() && !testModeFlag) {
   b4914:	f009 f93a 	bl	bdb8c <_ZN9TimeClass7isValidEv>
   b4918:	b1f0      	cbz	r0, b4958 <_Z21secondsUntilNextEventv+0x50>
   b491a:	4b10      	ldr	r3, [pc, #64]	; (b495c <_Z21secondsUntilNextEventv+0x54>)
   b491c:	781b      	ldrb	r3, [r3, #0]
   b491e:	b9db      	cbnz	r3, b4958 <_Z21secondsUntilNextEventv+0x50>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4920:	f009 f951 	bl	bdbc6 <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4924:	253c      	movs	r5, #60	; 0x3c
   b4926:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4928:	fbb0 f4f5 	udiv	r4, r0, r5
   b492c:	fb04 0015 	mls	r0, r4, r5, r0
   b4930:	1a2c      	subs	r4, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b4932:	2c09      	cmp	r4, #9
   b4934:	d90e      	bls.n	b4954 <_Z21secondsUntilNextEventv+0x4c>
   b4936:	42ac      	cmp	r4, r5
   b4938:	bf28      	it	cs
   b493a:	462c      	movcs	r4, r5
        Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
   b493c:	f000 fd4e 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4940:	f000 fe15 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4944:	4906      	ldr	r1, [pc, #24]	; (b4960 <_Z21secondsUntilNextEventv+0x58>)
   b4946:	4602      	mov	r2, r0
   b4948:	4623      	mov	r3, r4
   b494a:	4806      	ldr	r0, [pc, #24]	; (b4964 <_Z21secondsUntilNextEventv+0x5c>)
   b494c:	f7ff fbc6 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    }
	return secondsToReturn;
}
   b4950:	4620      	mov	r0, r4
   b4952:	bd38      	pop	{r3, r4, r5, pc}
   b4954:	240a      	movs	r4, #10
   b4956:	e7f1      	b.n	b493c <_Z21secondsUntilNextEventv+0x34>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b4958:	240a      	movs	r4, #10
   b495a:	e7f9      	b.n	b4950 <_Z21secondsUntilNextEventv+0x48>
   b495c:	2003e3e1 	.word	0x2003e3e1
   b4960:	000bf51c 	.word	0x000bf51c
   b4964:	2003e658 	.word	0x2003e658

000b4968 <_Z22publishStateTransitionv>:
{
   b4968:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b496a:	4e1c      	ldr	r6, [pc, #112]	; (b49dc <_Z22publishStateTransitionv+0x74>)
   b496c:	4c1c      	ldr	r4, [pc, #112]	; (b49e0 <_Z22publishStateTransitionv+0x78>)
   b496e:	7832      	ldrb	r2, [r6, #0]
   b4970:	4d1c      	ldr	r5, [pc, #112]	; (b49e4 <_Z22publishStateTransitionv+0x7c>)
   b4972:	2a02      	cmp	r2, #2
{
   b4974:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b4976:	d128      	bne.n	b49ca <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4978:	f009 f908 	bl	bdb8c <_ZN9TimeClass7isValidEv>
   b497c:	7832      	ldrb	r2, [r6, #0]
   b497e:	782b      	ldrb	r3, [r5, #0]
   b4980:	b958      	cbnz	r0, b499a <_Z22publishStateTransitionv+0x32>
   b4982:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4986:	9200      	str	r2, [sp, #0]
   b4988:	4a17      	ldr	r2, [pc, #92]	; (b49e8 <_Z22publishStateTransitionv+0x80>)
   b498a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b498e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4992:	a804      	add	r0, sp, #16
   b4994:	f006 fa34 	bl	bae00 <snprintf>
   b4998:	e00f      	b.n	b49ba <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b499a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b499e:	9303      	str	r3, [sp, #12]
   b49a0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b49a4:	f7ff ffb0 	bl	b4908 <_Z21secondsUntilNextEventv>
   b49a8:	9b03      	ldr	r3, [sp, #12]
   b49aa:	4a10      	ldr	r2, [pc, #64]	; (b49ec <_Z22publishStateTransitionv+0x84>)
   b49ac:	e9cd 4000 	strd	r4, r0, [sp]
   b49b0:	f44f 7180 	mov.w	r1, #256	; 0x100
   b49b4:	a804      	add	r0, sp, #16
   b49b6:	f006 fa23 	bl	bae00 <snprintf>
	oldState = state;
   b49ba:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b49bc:	480c      	ldr	r0, [pc, #48]	; (b49f0 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b49be:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b49c0:	a904      	add	r1, sp, #16
   b49c2:	f7ff fb8b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
}
   b49c6:	b044      	add	sp, #272	; 0x110
   b49c8:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b49ca:	782b      	ldrb	r3, [r5, #0]
   b49cc:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b49d0:	9200      	str	r2, [sp, #0]
   b49d2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b49d6:	4a07      	ldr	r2, [pc, #28]	; (b49f4 <_Z22publishStateTransitionv+0x8c>)
   b49d8:	e7d9      	b.n	b498e <_Z22publishStateTransitionv+0x26>
   b49da:	bf00      	nop
   b49dc:	2003e3e0 	.word	0x2003e3e0
   b49e0:	2003dd7c 	.word	0x2003dd7c
   b49e4:	2003e3a9 	.word	0x2003e3a9
   b49e8:	000bf550 	.word	0x000bf550
   b49ec:	000bf570 	.word	0x000bf570
   b49f0:	2003e658 	.word	0x2003e658
   b49f4:	000bf58d 	.word	0x000bf58d

000b49f8 <loop>:
void loop() {
   b49f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b49fc:	4d9a      	ldr	r5, [pc, #616]	; (b4c68 <loop+0x270>)
void loop() {
   b49fe:	ed2d 8b02 	vpush	{d8}
   b4a02:	782b      	ldrb	r3, [r5, #0]
   b4a04:	3b01      	subs	r3, #1
   b4a06:	b0d1      	sub	sp, #324	; 0x144
   b4a08:	2b06      	cmp	r3, #6
   b4a0a:	d817      	bhi.n	b4a3c <loop+0x44>
   b4a0c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4a10:	000701e7 	.word	0x000701e7
   b4a14:	00f10031 	.word	0x00f10031
   b4a18:	01d101aa 	.word	0x01d101aa
   b4a1c:	014c      	.short	0x014c
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4a1e:	4b93      	ldr	r3, [pc, #588]	; (b4c6c <loop+0x274>)
   b4a20:	781b      	ldrb	r3, [r3, #0]
   b4a22:	2b02      	cmp	r3, #2
   b4a24:	d001      	beq.n	b4a2a <loop+0x32>
   b4a26:	f7ff ff9f 	bl	b4968 <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b4a2a:	4b91      	ldr	r3, [pc, #580]	; (b4c70 <loop+0x278>)
   b4a2c:	781a      	ldrb	r2, [r3, #0]
   b4a2e:	b11a      	cbz	r2, b4a38 <loop+0x40>
				nextEventTime = false;
   b4a30:	2200      	movs	r2, #0
   b4a32:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b4a34:	2304      	movs	r3, #4
   b4a36:	e000      	b.n	b4a3a <loop+0x42>
			else state = SLEEPING_STATE;
   b4a38:	2303      	movs	r3, #3
   b4a3a:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b4a3c:	488d      	ldr	r0, [pc, #564]	; (b4c74 <loop+0x27c>)
   b4a3e:	f002 f915 	bl	b6c6c <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b4a42:	f003 fa75 	bl	b7f30 <_ZN17PublishQueuePosix8instanceEv>
   b4a46:	f003 f965 	bl	b7d14 <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b4a4a:	f000 fd17 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4a4e:	f000 fd25 	bl	b549c <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4a52:	f000 fcc3 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4a56:	f000 fce9 	bl	b542c <_ZN13sysStatusData4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b4a5a:	4b87      	ldr	r3, [pc, #540]	; (b4c78 <loop+0x280>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	2b00      	cmp	r3, #0
   b4a60:	f2c0 81f1 	blt.w	b4e46 <loop+0x44e>
}
   b4a64:	b051      	add	sp, #324	; 0x144
   b4a66:	ecbd 8b02 	vpop	{d8}
   b4a6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b4a6e:	f008 bebe 	b.w	bd7ee <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4a72:	4b7e      	ldr	r3, [pc, #504]	; (b4c6c <loop+0x274>)
   b4a74:	781b      	ldrb	r3, [r3, #0]
   b4a76:	2b03      	cmp	r3, #3
   b4a78:	d001      	beq.n	b4a7e <loop+0x86>
   b4a7a:	f7ff ff75 	bl	b4968 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4a7e:	2100      	movs	r1, #0
   b4a80:	487c      	ldr	r0, [pc, #496]	; (b4c74 <loop+0x27c>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4a82:	4c7e      	ldr	r4, [pc, #504]	; (b4c7c <loop+0x284>)
   b4a84:	f001 fd46 	bl	b6514 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b4a88:	f7ff ff3e 	bl	b4908 <_Z21secondsUntilNextEventv>
   b4a8c:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b4a8e:	f009 f89a 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4a92:	19c2      	adds	r2, r0, r7
   b4a94:	17d3      	asrs	r3, r2, #31
   b4a96:	a810      	add	r0, sp, #64	; 0x40
   b4a98:	f008 ff90 	bl	bd9bc <_ZN9TimeClass7timeStrEx>
   b4a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4a9e:	930b      	str	r3, [sp, #44]	; 0x2c
   b4aa0:	f008 ff08 	bl	bd8b4 <_ZN11SystemClass10freeMemoryEv>
   b4aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4aa6:	4976      	ldr	r1, [pc, #472]	; (b4c80 <loop+0x288>)
   b4aa8:	9000      	str	r0, [sp, #0]
   b4aaa:	463a      	mov	r2, r7
   b4aac:	4875      	ldr	r0, [pc, #468]	; (b4c84 <loop+0x28c>)
   b4aae:	f7ff fb15 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4ab2:	a810      	add	r0, sp, #64	; 0x40
   b4ab4:	f008 fce8 	bl	bd488 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b4ab8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4abc:	f006 f9f8 	bl	baeb0 <delay>
   b4ac0:	7d23      	ldrb	r3, [r4, #20]
   b4ac2:	2b00      	cmp	r3, #0
   b4ac4:	d050      	beq.n	b4b68 <loop+0x170>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4ac6:	2302      	movs	r3, #2
   b4ac8:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b4aca:	4b6f      	ldr	r3, [pc, #444]	; (b4c88 <loop+0x290>)
   b4acc:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4ad0:	6823      	ldr	r3, [r4, #0]
   b4ad2:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4ad4:	b1f3      	cbz	r3, b4b14 <loop+0x11c>
            if (start->type == type) {
   b4ad6:	889a      	ldrh	r2, [r3, #4]
   b4ad8:	2a01      	cmp	r2, #1
   b4ada:	d006      	beq.n	b4aea <loop+0xf2>
            start = start->next;
   b4adc:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4ade:	e7f9      	b.n	b4ad4 <loop+0xdc>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4ae0:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4ae2:	b1bb      	cbz	r3, b4b14 <loop+0x11c>
            if (start->type == type) {
   b4ae4:	889a      	ldrh	r2, [r3, #4]
   b4ae6:	2a01      	cmp	r2, #1
   b4ae8:	d1fa      	bne.n	b4ae0 <loop+0xe8>
                if (gpioWakeup->pin == pin) {
   b4aea:	899a      	ldrh	r2, [r3, #12]
   b4aec:	4542      	cmp	r2, r8
   b4aee:	d1f7      	bne.n	b4ae0 <loop+0xe8>
                    gpioWakeup->mode = mode;
   b4af0:	2200      	movs	r2, #0
   b4af2:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4af4:	7d23      	ldrb	r3, [r4, #20]
   b4af6:	2b00      	cmp	r3, #0
   b4af8:	d036      	beq.n	b4b68 <loop+0x170>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4afa:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b4afc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b4b00:	68db      	ldr	r3, [r3, #12]
   b4b02:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b4b06:	b1db      	cbz	r3, b4b40 <loop+0x148>
            if (start->type == type) {
   b4b08:	889a      	ldrh	r2, [r3, #4]
   b4b0a:	2a04      	cmp	r2, #4
   b4b0c:	f000 8196 	beq.w	b4e3c <loop+0x444>
            start = start->next;
   b4b10:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4b12:	e7f8      	b.n	b4b06 <loop+0x10e>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4b14:	495d      	ldr	r1, [pc, #372]	; (b4c8c <loop+0x294>)
   b4b16:	2010      	movs	r0, #16
   b4b18:	f009 fb5e 	bl	be1d8 <_ZnwjRKSt9nothrow_t>
   b4b1c:	4606      	mov	r6, r0
   b4b1e:	2800      	cmp	r0, #0
   b4b20:	f000 818f 	beq.w	b4e42 <loop+0x44a>
   b4b24:	2210      	movs	r2, #16
   b4b26:	2100      	movs	r1, #0
   b4b28:	f00a f892 	bl	bec50 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4b2c:	4b58      	ldr	r3, [pc, #352]	; (b4c90 <loop+0x298>)
   b4b2e:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4b30:	2301      	movs	r3, #1
   b4b32:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4b34:	6923      	ldr	r3, [r4, #16]
   b4b36:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b4b38:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4b3c:	6126      	str	r6, [r4, #16]
   b4b3e:	e7d9      	b.n	b4af4 <loop+0xfc>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4b40:	4952      	ldr	r1, [pc, #328]	; (b4c8c <loop+0x294>)
   b4b42:	2010      	movs	r0, #16
   b4b44:	f009 fb48 	bl	be1d8 <_ZnwjRKSt9nothrow_t>
   b4b48:	4606      	mov	r6, r0
   b4b4a:	2800      	cmp	r0, #0
   b4b4c:	f000 8179 	beq.w	b4e42 <loop+0x44a>
   b4b50:	2210      	movs	r2, #16
   b4b52:	2100      	movs	r1, #0
   b4b54:	f00a f87c 	bl	bec50 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4b58:	4b4d      	ldr	r3, [pc, #308]	; (b4c90 <loop+0x298>)
   b4b5a:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4b5c:	2304      	movs	r3, #4
   b4b5e:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4b60:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4b62:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b4b64:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b4b68:	4944      	ldr	r1, [pc, #272]	; (b4c7c <loop+0x284>)
   b4b6a:	a80d      	add	r0, sp, #52	; 0x34
   b4b6c:	f008 fe42 	bl	bd7f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4b74:	483f      	ldr	r0, [pc, #252]	; (b4c74 <loop+0x27c>)
   b4b76:	f001 fccd 	bl	b6514 <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b4b7a:	2000      	movs	r0, #0
   b4b7c:	f005 fd9c 	bl	ba6b8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4b80:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4b84:	4604      	mov	r4, r0
   b4b86:	2000      	movs	r0, #0
   b4b88:	f005 fd96 	bl	ba6b8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4b8c:	1b00      	subs	r0, r0, r4
   b4b8e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4b92:	42b0      	cmp	r0, r6
   b4b94:	f171 0300 	sbcs.w	r3, r1, #0
   b4b98:	d207      	bcs.n	b4baa <loop+0x1b2>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4b9a:	f009 f8fb 	bl	bdd94 <_Z16_fetch_usbserialv>
   b4b9e:	f009 f8ee 	bl	bdd7e <_ZN9USBSerial11isConnectedEv>
   b4ba2:	b910      	cbnz	r0, b4baa <loop+0x1b2>
            spark_process();
   b4ba4:	f006 f85c 	bl	bac60 <spark_process>
        while (_while() && !_condition()) {
   b4ba8:	e7ed      	b.n	b4b86 <loop+0x18e>
   b4baa:	f009 f8f3 	bl	bdd94 <_Z16_fetch_usbserialv>
   b4bae:	f009 f8e6 	bl	bdd7e <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b4bb2:	2302      	movs	r3, #2
   b4bb4:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b4bb6:	4b2e      	ldr	r3, [pc, #184]	; (b4c70 <loop+0x278>)
   b4bb8:	2201      	movs	r2, #1
   b4bba:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b4bbc:	f009 f803 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4bc0:	19c2      	adds	r2, r0, r7
   b4bc2:	17d3      	asrs	r3, r2, #31
   b4bc4:	a810      	add	r0, sp, #64	; 0x40
   b4bc6:	f008 fef9 	bl	bd9bc <_ZN9TimeClass7timeStrEx>
   b4bca:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4bcc:	920b      	str	r2, [sp, #44]	; 0x2c
   b4bce:	f008 fe71 	bl	bd8b4 <_ZN11SystemClass10freeMemoryEv>
   b4bd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4bd4:	492f      	ldr	r1, [pc, #188]	; (b4c94 <loop+0x29c>)
   b4bd6:	4603      	mov	r3, r0
   b4bd8:	482a      	ldr	r0, [pc, #168]	; (b4c84 <loop+0x28c>)
   b4bda:	f7ff fa7f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4bde:	a810      	add	r0, sp, #64	; 0x40
   b4be0:	f008 fc52 	bl	bd488 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b4be4:	980d      	ldr	r0, [sp, #52]	; 0x34
   b4be6:	2800      	cmp	r0, #0
   b4be8:	f43f af28 	beq.w	b4a3c <loop+0x44>
            free(wakeupSource_);
   b4bec:	f006 f8e8 	bl	badc0 <free>
		} break;
   b4bf0:	e724      	b.n	b4a3c <loop+0x44>
			if (state != oldState) {
   b4bf2:	4b1e      	ldr	r3, [pc, #120]	; (b4c6c <loop+0x274>)
   b4bf4:	781b      	ldrb	r3, [r3, #0]
   b4bf6:	2b04      	cmp	r3, #4
   b4bf8:	d00f      	beq.n	b4c1a <loop+0x222>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b4bfa:	2b07      	cmp	r3, #7
   b4bfc:	d003      	beq.n	b4c06 <loop+0x20e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4bfe:	f005 fd4b 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
   b4c02:	4b25      	ldr	r3, [pc, #148]	; (b4c98 <loop+0x2a0>)
   b4c04:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4c06:	f7ff feaf 	bl	b4968 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b4c0a:	f7ff fa7f 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c0e:	f7ff fb09 	bl	b4224 <_ZN14LoRA_Functions11clearBufferEv>
				Log.info("Gateway is listening for LoRA messages");
   b4c12:	4922      	ldr	r1, [pc, #136]	; (b4c9c <loop+0x2a4>)
   b4c14:	481b      	ldr	r0, [pc, #108]	; (b4c84 <loop+0x28c>)
   b4c16:	f7ff fa61 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) state = REPORTING_STATE; // Received and acknowledged data from a node - report
   b4c1a:	f7ff fa77 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c1e:	f7ff fd65 	bl	b46ec <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b4c22:	b108      	cbz	r0, b4c28 <loop+0x230>
   b4c24:	2307      	movs	r3, #7
   b4c26:	702b      	strb	r3, [r5, #0]
			if (!testModeFlag && ((millis() - startLoRAWindow) > 150000L)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b4c28:	4b1d      	ldr	r3, [pc, #116]	; (b4ca0 <loop+0x2a8>)
   b4c2a:	781b      	ldrb	r3, [r3, #0]
   b4c2c:	2b00      	cmp	r3, #0
   b4c2e:	f47f af05 	bne.w	b4a3c <loop+0x44>
   b4c32:	f005 fd31 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
   b4c36:	4b18      	ldr	r3, [pc, #96]	; (b4c98 <loop+0x2a0>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	1ac0      	subs	r0, r0, r3
   b4c3c:	4b19      	ldr	r3, [pc, #100]	; (b4ca4 <loop+0x2ac>)
   b4c3e:	4298      	cmp	r0, r3
   b4c40:	f67f aefc 	bls.w	b4a3c <loop+0x44>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b4c44:	f7ff fa62 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c48:	f7ff fafc 	bl	b4244 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over
   b4c4c:	f008 ffcc 	bl	bdbe8 <_ZN9TimeClass4hourEv>
   b4c50:	4604      	mov	r4, r0
   b4c52:	f000 fbc3 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4c56:	f000 fdc5 	bl	b57e4 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4c5a:	f008 fe93 	bl	bd984 <_ZN9TimeClass4hourEx>
   b4c5e:	4284      	cmp	r4, r0
   b4c60:	f000 80bb 	beq.w	b4dda <loop+0x3e2>
   b4c64:	2305      	movs	r3, #5
   b4c66:	e6e8      	b.n	b4a3a <loop+0x42>
   b4c68:	2003e3e0 	.word	0x2003e3e0
   b4c6c:	2003e3a9 	.word	0x2003e3a9
   b4c70:	2003e3a8 	.word	0x2003e3a8
   b4c74:	2003e27c 	.word	0x2003e27c
   b4c78:	2003dd78 	.word	0x2003dd78
   b4c7c:	2003e29c 	.word	0x2003e29c
   b4c80:	000bf59b 	.word	0x000bf59b
   b4c84:	2003e658 	.word	0x2003e658
   b4c88:	000bf836 	.word	0x000bf836
   b4c8c:	000c0868 	.word	0x000c0868
   b4c90:	00030010 	.word	0x00030010
   b4c94:	000bf5db 	.word	0x000bf5db
   b4c98:	2003e270 	.word	0x2003e270
   b4c9c:	000bf5fc 	.word	0x000bf5fc
   b4ca0:	2003e3e1 	.word	0x2003e3e1
   b4ca4:	000249f0 	.word	0x000249f0
			if (state != oldState) publishStateTransition();
   b4ca8:	4b69      	ldr	r3, [pc, #420]	; (b4e50 <loop+0x458>)
   b4caa:	781b      	ldrb	r3, [r3, #0]
   b4cac:	2b07      	cmp	r3, #7
   b4cae:	d001      	beq.n	b4cb4 <loop+0x2bc>
   b4cb0:	f7ff fe5a 	bl	b4968 <_Z22publishStateTransitionv>
				current.get_deviceID(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()], current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4cb4:	f000 fbe2 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4cb8:	f000 fc5e 	bl	b5578 <_ZNK17currentStatusData12get_deviceIDEv>
   b4cbc:	900b      	str	r0, [sp, #44]	; 0x2c
   b4cbe:	f000 fbdd 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4cc2:	f000 fc68 	bl	b5596 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4cc6:	4604      	mov	r4, r0
   b4cc8:	f000 fbd8 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4ccc:	f000 fc68 	bl	b55a0 <_ZNK17currentStatusData14get_dailyCountEv>
   b4cd0:	4606      	mov	r6, r0
   b4cd2:	f000 fbd3 	bl	b547c <_ZN17currentStatusData8instanceEv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}", \
   b4cd6:	f000 fbeb 	bl	b54b0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4cda:	eeb0 8a40 	vmov.f32	s16, s0
   b4cde:	eef0 8a60 	vmov.f32	s17, s1
				current.get_deviceID(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()], current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4ce2:	f000 fbcb 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4ce6:	f000 fccf 	bl	b5688 <_ZNK17currentStatusData16get_batteryStateEv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}", \
   b4cea:	4a5a      	ldr	r2, [pc, #360]	; (b4e54 <loop+0x45c>)
   b4cec:	f852 b020 	ldr.w	fp, [r2, r0, lsl #2]
				current.get_deviceID(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()], current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4cf0:	f000 fbc4 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4cf4:	f000 fcc3 	bl	b567e <_ZNK17currentStatusData17get_internalTempCEv>
   b4cf8:	4607      	mov	r7, r0
   b4cfa:	f000 fb6f 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4cfe:	f000 fcb9 	bl	b5674 <_ZNK13sysStatusData14get_resetCountEv>
   b4d02:	4680      	mov	r8, r0
   b4d04:	f000 fbba 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4d08:	f000 fc40 	bl	b558c <_ZNK17currentStatusData8get_RSSIEv>
   b4d0c:	4681      	mov	r9, r0
   b4d0e:	f000 fbb5 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b4d12:	f000 fcbe 	bl	b5692 <_ZNK17currentStatusData17get_messageNumberEv>
   b4d16:	4682      	mov	sl, r0
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}", \
   b4d18:	f008 ff55 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4d1e:	4a4e      	ldr	r2, [pc, #312]	; (b4e58 <loop+0x460>)
   b4d20:	e9cd a008 	strd	sl, r0, [sp, #32]
   b4d24:	e9cd 4600 	strd	r4, r6, [sp]
   b4d28:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4d2c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   b4d30:	e9cd b704 	strd	fp, r7, [sp, #16]
   b4d34:	ed8d 8b02 	vstr	d8, [sp, #8]
   b4d38:	a810      	add	r0, sp, #64	; 0x40
   b4d3a:	f006 f861 	bl	bae00 <snprintf>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   b4d3e:	f003 f8f7 	bl	b7f30 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4d42:	4b46      	ldr	r3, [pc, #280]	; (b4e5c <loop+0x464>)
   b4d44:	4a46      	ldr	r2, [pc, #280]	; (b4e60 <loop+0x468>)
   b4d46:	781b      	ldrb	r3, [r3, #0]
   b4d48:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4d4a:	2100      	movs	r1, #0
   b4d4c:	4313      	orrs	r3, r2
   b4d4e:	6802      	ldr	r2, [r0, #0]
   b4d50:	f88d 1004 	strb.w	r1, [sp, #4]
   b4d54:	f88d 3000 	strb.w	r3, [sp]
   b4d58:	6814      	ldr	r4, [r2, #0]
   b4d5a:	4942      	ldr	r1, [pc, #264]	; (b4e64 <loop+0x46c>)
   b4d5c:	233c      	movs	r3, #60	; 0x3c
   b4d5e:	aa10      	add	r2, sp, #64	; 0x40
   b4d60:	47a0      	blx	r4
   b4d62:	e667      	b.n	b4a34 <loop+0x3c>
			if (state != oldState) {
   b4d64:	4b3a      	ldr	r3, [pc, #232]	; (b4e50 <loop+0x458>)
   b4d66:	781b      	ldrb	r3, [r3, #0]
   b4d68:	2b05      	cmp	r3, #5
   b4d6a:	d00a      	beq.n	b4d82 <loop+0x38a>
				publishStateTransition();  
   b4d6c:	f7ff fdfc 	bl	b4968 <_Z22publishStateTransitionv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d70:	f005 ff86 	bl	bac80 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();
   b4d74:	b908      	cbnz	r0, b4d7a <loop+0x382>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4d76:	f005 ff7b 	bl	bac70 <spark_cloud_flag_connect>
   b4d7a:	f005 fc8d 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b4d7e:	4b3a      	ldr	r3, [pc, #232]	; (b4e68 <loop+0x470>)
   b4d80:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d82:	f005 ff7d 	bl	bac80 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b4d86:	b158      	cbz	r0, b4da0 <loop+0x3a8>
				sysStatus.set_lastConnection(Time.now());
   b4d88:	f000 fb28 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b4d8c:	4604      	mov	r4, r0
   b4d8e:	f008 ff1a 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b4d92:	17c3      	asrs	r3, r0, #31
   b4d94:	4602      	mov	r2, r0
   b4d96:	4620      	mov	r0, r4
   b4d98:	f000 fd4d 	bl	b5836 <_ZN13sysStatusData18set_lastConnectionEx>
				state = DISCONNECTING_STATE;										// Typically, we will disconnect and sleep to save power
   b4d9c:	2306      	movs	r3, #6
   b4d9e:	e64c      	b.n	b4a3a <loop+0x42>
   b4da0:	f005 fc7a 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b4da4:	4b30      	ldr	r3, [pc, #192]	; (b4e68 <loop+0x470>)
   b4da6:	681b      	ldr	r3, [r3, #0]
   b4da8:	1ac0      	subs	r0, r0, r3
   b4daa:	4b30      	ldr	r3, [pc, #192]	; (b4e6c <loop+0x474>)
   b4dac:	4298      	cmp	r0, r3
   b4dae:	d8eb      	bhi.n	b4d88 <loop+0x390>
   b4db0:	e644      	b.n	b4a3c <loop+0x44>
			if (state != oldState) {
   b4db2:	4b27      	ldr	r3, [pc, #156]	; (b4e50 <loop+0x458>)
   b4db4:	4c2e      	ldr	r4, [pc, #184]	; (b4e70 <loop+0x478>)
   b4db6:	781b      	ldrb	r3, [r3, #0]
   b4db8:	2b06      	cmp	r3, #6
   b4dba:	d004      	beq.n	b4dc6 <loop+0x3ce>
				publishStateTransition(); 
   b4dbc:	f7ff fdd4 	bl	b4968 <_Z22publishStateTransitionv>
   b4dc0:	f005 fc6a 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b4dc4:	6020      	str	r0, [r4, #0]
   b4dc6:	f005 fc67 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stayConnectedWindow > 90000) {							// Stay on-line for 90 seconds
   b4dca:	6823      	ldr	r3, [r4, #0]
   b4dcc:	1ac0      	subs	r0, r0, r3
   b4dce:	4b29      	ldr	r3, [pc, #164]	; (b4e74 <loop+0x47c>)
   b4dd0:	4298      	cmp	r0, r3
   b4dd2:	f67f ae33 	bls.w	b4a3c <loop+0x44>
				disconnectFromParticle();
   b4dd6:	f001 f8b9 	bl	b5f4c <_Z22disconnectFromParticlev>
				state = IDLE_STATE;
   b4dda:	2302      	movs	r3, #2
   b4ddc:	e62d      	b.n	b4a3a <loop+0x42>
			static system_tick_t resetTimeout = millis();
   b4dde:	4c26      	ldr	r4, [pc, #152]	; (b4e78 <loop+0x480>)
   b4de0:	4e26      	ldr	r6, [pc, #152]	; (b4e7c <loop+0x484>)
   b4de2:	7823      	ldrb	r3, [r4, #0]
   b4de4:	f3bf 8f5b 	dmb	ish
   b4de8:	f013 0f01 	tst.w	r3, #1
   b4dec:	d109      	bne.n	b4e02 <loop+0x40a>
   b4dee:	4620      	mov	r0, r4
   b4df0:	f7ff f964 	bl	b40bc <__cxa_guard_acquire>
   b4df4:	b128      	cbz	r0, b4e02 <loop+0x40a>
   b4df6:	f005 fc4f 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
   b4dfa:	6030      	str	r0, [r6, #0]
   b4dfc:	4620      	mov	r0, r4
   b4dfe:	f7ff f962 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b4e02:	4b13      	ldr	r3, [pc, #76]	; (b4e50 <loop+0x458>)
   b4e04:	782a      	ldrb	r2, [r5, #0]
   b4e06:	781b      	ldrb	r3, [r3, #0]
   b4e08:	429a      	cmp	r2, r3
   b4e0a:	d001      	beq.n	b4e10 <loop+0x418>
   b4e0c:	f7ff fdac 	bl	b4968 <_Z22publishStateTransitionv>
   b4e10:	f005 fc42 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b4e14:	6833      	ldr	r3, [r6, #0]
   b4e16:	1ac0      	subs	r0, r0, r3
   b4e18:	f247 5330 	movw	r3, #30000	; 0x7530
   b4e1c:	4298      	cmp	r0, r3
   b4e1e:	f67f ae0d 	bls.w	b4a3c <loop+0x44>
				Log.info("Deep power down device");
   b4e22:	4917      	ldr	r1, [pc, #92]	; (b4e80 <loop+0x488>)
   b4e24:	4817      	ldr	r0, [pc, #92]	; (b4e84 <loop+0x48c>)
   b4e26:	f7ff f959 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b4e2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4e2e:	f006 f83f 	bl	baeb0 <delay>
				ab1805.deepPowerDown(); 
   b4e32:	211e      	movs	r1, #30
   b4e34:	4814      	ldr	r0, [pc, #80]	; (b4e88 <loop+0x490>)
   b4e36:	f001 fcc7 	bl	b67c8 <_ZN6AB180513deepPowerDownEi>
   b4e3a:	e5ff      	b.n	b4a3c <loop+0x44>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4e3c:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4e40:	e692      	b.n	b4b68 <loop+0x170>
                valid_ = false;
   b4e42:	7526      	strb	r6, [r4, #20]
                return *this;
   b4e44:	e690      	b.n	b4b68 <loop+0x170>
}
   b4e46:	b051      	add	sp, #324	; 0x144
   b4e48:	ecbd 8b02 	vpop	{d8}
   b4e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4e50:	2003e3a9 	.word	0x2003e3a9
   b4e54:	2003de10 	.word	0x2003de10
   b4e58:	000bf623 	.word	0x000bf623
   b4e5c:	2003e269 	.word	0x2003e269
   b4e60:	2003e268 	.word	0x2003e268
   b4e64:	000bf6a4 	.word	0x000bf6a4
   b4e68:	2003e274 	.word	0x2003e274
   b4e6c:	000493e0 	.word	0x000493e0
   b4e70:	2003e278 	.word	0x2003e278
   b4e74:	00015f90 	.word	0x00015f90
   b4e78:	2003e264 	.word	0x2003e264
   b4e7c:	2003e26c 	.word	0x2003e26c
   b4e80:	000bf6b9 	.word	0x000bf6b9
   b4e84:	2003e658 	.word	0x2003e658
   b4e88:	2003e27c 	.word	0x2003e27c

000b4e8c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4e8c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4e8e:	2300      	movs	r3, #0
   b4e90:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4e92:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4e94:	4604      	mov	r4, r0
   b4e96:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4e98:	b12b      	cbz	r3, b4ea6 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4e9a:	2202      	movs	r2, #2
   b4e9c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4e9e:	68eb      	ldr	r3, [r5, #12]
   b4ea0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4ea2:	68ab      	ldr	r3, [r5, #8]
   b4ea4:	60a3      	str	r3, [r4, #8]
    }
   b4ea6:	4620      	mov	r0, r4
   b4ea8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4eac <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4eb0:	b095      	sub	sp, #84	; 0x54
   b4eb2:	4605      	mov	r5, r0
        };
   b4eb4:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4eb6:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4eb8:	4690      	mov	r8, r2
   b4eba:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4ebc:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4ebe:	f7ff ffe5 	bl	b4e8c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4ec2:	a904      	add	r1, sp, #16
   b4ec4:	a808      	add	r0, sp, #32
   b4ec6:	f7ff ffe1 	bl	b4e8c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4eca:	a908      	add	r1, sp, #32
   b4ecc:	4630      	mov	r0, r6
   b4ece:	f7ff ffdd 	bl	b4e8c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4ed2:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ed6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4ed8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4edc:	f7ff f8db 	bl	b4096 <_Znwj>
   b4ee0:	4604      	mov	r4, r0
   b4ee2:	b1a0      	cbz	r0, b4f0e <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ee4:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4ee8:	ab01      	add	r3, sp, #4
   b4eea:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4eee:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4ef2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4ef6:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4efc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4efe:	60a3      	str	r3, [r4, #8]
   b4f00:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4f06:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4f0a:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4f0c:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4f0e:	4b24      	ldr	r3, [pc, #144]	; (b4fa0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4f10:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4f12:	4b24      	ldr	r3, [pc, #144]	; (b4fa4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4f14:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4f16:	2200      	movs	r2, #0
   b4f18:	2300      	movs	r3, #0
   b4f1a:	f04f 0900 	mov.w	r9, #0
   b4f1e:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4f22:	4b21      	ldr	r3, [pc, #132]	; (b4fa8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4f24:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4f28:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f2a:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4f2c:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4f30:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4f34:	f7ff f8af 	bl	b4096 <_Znwj>
   b4f38:	4604      	mov	r4, r0
   b4f3a:	b1d8      	cbz	r0, b4f74 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4f3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4f3e:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4f42:	b133      	cbz	r3, b4f52 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4f44:	2202      	movs	r2, #2
   b4f46:	a910      	add	r1, sp, #64	; 0x40
   b4f48:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4f4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4f4c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4f4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4f50:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4f52:	4b16      	ldr	r3, [pc, #88]	; (b4fac <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4f54:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4f56:	4a16      	ldr	r2, [pc, #88]	; (b4fb0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4f58:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4f5a:	ab01      	add	r3, sp, #4
   b4f5c:	4640      	mov	r0, r8
   b4f5e:	4639      	mov	r1, r7
   b4f60:	f005 fe0c 	bl	bab7c <system_subscribe_event>
        if (r) {
   b4f64:	b1b0      	cbz	r0, b4f94 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4f66:	4620      	mov	r0, r4
   b4f68:	f7ff fcb8 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4f6c:	2110      	movs	r1, #16
   b4f6e:	4620      	mov	r0, r4
   b4f70:	f7ff f895 	bl	b409e <_ZdlPvj>
   b4f74:	a810      	add	r0, sp, #64	; 0x40
   b4f76:	f7ff fcb1 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   b4f7a:	4630      	mov	r0, r6
   b4f7c:	f7ff fcae 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   b4f80:	a808      	add	r0, sp, #32
   b4f82:	f7ff fcab 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   b4f86:	a804      	add	r0, sp, #16
   b4f88:	f7ff fca8 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
    }
   b4f8c:	4628      	mov	r0, r5
   b4f8e:	b015      	add	sp, #84	; 0x54
   b4f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4f94:	9b02      	ldr	r3, [sp, #8]
   b4f96:	60ab      	str	r3, [r5, #8]
   b4f98:	e9c5 8700 	strd	r8, r7, [r5]
   b4f9c:	e7ea      	b.n	b4f74 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4f9e:	bf00      	nop
   b4fa0:	000b4899 	.word	0x000b4899
   b4fa4:	000b4fb5 	.word	0x000b4fb5
   b4fa8:	000c0002 	.word	0x000c0002
   b4fac:	000b48ef 	.word	0x000b48ef
   b4fb0:	000b4871 	.word	0x000b4871

000b4fb4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4fb4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4fb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4fb8:	4604      	mov	r4, r0
	switch (__op)
   b4fba:	d104      	bne.n	b4fc6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4fbc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4fbe:	6003      	str	r3, [r0, #0]
      }
   b4fc0:	2000      	movs	r0, #0
   b4fc2:	b003      	add	sp, #12
   b4fc4:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4fc6:	2a02      	cmp	r2, #2
   b4fc8:	d00c      	beq.n	b4fe4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4fca:	2a03      	cmp	r2, #3
   b4fcc:	d1f8      	bne.n	b4fc0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4fce:	6804      	ldr	r4, [r0, #0]
   b4fd0:	2c00      	cmp	r4, #0
   b4fd2:	d0f5      	beq.n	b4fc0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4fd4:	4620      	mov	r0, r4
   b4fd6:	f7ff fc81 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4fda:	2110      	movs	r1, #16
   b4fdc:	4620      	mov	r0, r4
   b4fde:	f7ff f85e 	bl	b409e <_ZdlPvj>
   b4fe2:	e7ed      	b.n	b4fc0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4fe4:	6809      	ldr	r1, [r1, #0]
   b4fe6:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4fe8:	2010      	movs	r0, #16
   b4fea:	f7ff f854 	bl	b4096 <_Znwj>
   b4fee:	4605      	mov	r5, r0
   b4ff0:	b110      	cbz	r0, b4ff8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4ff2:	9901      	ldr	r1, [sp, #4]
   b4ff4:	f7ff ff4a 	bl	b4e8c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4ff8:	6025      	str	r5, [r4, #0]
	}
   b4ffa:	e7e1      	b.n	b4fc0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4ffc <_GLOBAL__sub_I___appProductVersion>:
}
   b4ffc:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b4ffe:	4b1d      	ldr	r3, [pc, #116]	; (b5074 <_GLOBAL__sub_I___appProductVersion+0x78>)
   b5000:	2501      	movs	r5, #1
   b5002:	701d      	strb	r5, [r3, #0]
   b5004:	4b1c      	ldr	r3, [pc, #112]	; (b5078 <_GLOBAL__sub_I___appProductVersion+0x7c>)
   b5006:	2208      	movs	r2, #8
   b5008:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b500a:	f008 ff85 	bl	bdf18 <spark_protocol_instance>
   b500e:	2300      	movs	r3, #0
   b5010:	461a      	mov	r2, r3
   b5012:	4619      	mov	r1, r3
   b5014:	f008 ff90 	bl	bdf38 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5018:	f008 ff7e 	bl	bdf18 <spark_protocol_instance>
   b501c:	2300      	movs	r3, #0
   b501e:	461a      	mov	r2, r3
   b5020:	210d      	movs	r1, #13
   b5022:	f008 ff81 	bl	bdf28 <spark_protocol_set_product_id>
        : config_(config) {
   b5026:	4b15      	ldr	r3, [pc, #84]	; (b507c <_GLOBAL__sub_I___appProductVersion+0x80>)
   b5028:	1d1a      	adds	r2, r3, #4
              valid_(true) {
   b502a:	2400      	movs	r4, #0
        : config_(config) {
   b502c:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b502e:	4a14      	ldr	r2, [pc, #80]	; (b5080 <_GLOBAL__sub_I___appProductVersion+0x84>)
   b5030:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5032:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5036:	611c      	str	r4, [r3, #16]
   b5038:	751d      	strb	r5, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b503a:	f009 f845 	bl	be0c8 <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   b503e:	4d11      	ldr	r5, [pc, #68]	; (b5084 <_GLOBAL__sub_I___appProductVersion+0x88>)
   b5040:	4601      	mov	r1, r0
   b5042:	2269      	movs	r2, #105	; 0x69
   b5044:	4810      	ldr	r0, [pc, #64]	; (b5088 <_GLOBAL__sub_I___appProductVersion+0x8c>)
   b5046:	f001 f967 	bl	b6318 <_ZN6AB1805C1ER7TwoWireh>
   b504a:	4628      	mov	r0, r5
   b504c:	490f      	ldr	r1, [pc, #60]	; (b508c <_GLOBAL__sub_I___appProductVersion+0x90>)
   b504e:	f008 fa66 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b5052:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5054:	480e      	ldr	r0, [pc, #56]	; (b5090 <_GLOBAL__sub_I___appProductVersion+0x94>)
    LocalTimeSchedule() {
   b5056:	612c      	str	r4, [r5, #16]
   b5058:	2200      	movs	r2, #0
   b505a:	e9c5 2306 	strd	r2, r3, [r5, #24]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b505e:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   b5062:	2306      	movs	r3, #6
   b5064:	f840 3b04 	str.w	r3, [r0], #4
   b5068:	62ac      	str	r4, [r5, #40]	; 0x28
}
   b506a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b506e:	f002 ba47 	b.w	b7500 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5072:	bf00      	nop
   b5074:	2003e268 	.word	0x2003e268
   b5078:	2003e269 	.word	0x2003e269
   b507c:	2003e29c 	.word	0x2003e29c
   b5080:	00030010 	.word	0x00030010
   b5084:	2003e3b0 	.word	0x2003e3b0
   b5088:	2003e27c 	.word	0x2003e27c
   b508c:	000c06e1 	.word	0x000c06e1
   b5090:	2003e2b8 	.word	0x2003e2b8

000b5094 <setup>:
{
   b5094:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b5096:	2000      	movs	r0, #0
   b5098:	b09f      	sub	sp, #124	; 0x7c
   b509a:	f005 fb0d 	bl	ba6b8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b509e:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b50a2:	4604      	mov	r4, r0
   b50a4:	2000      	movs	r0, #0
   b50a6:	f005 fb07 	bl	ba6b8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b50aa:	1b00      	subs	r0, r0, r4
   b50ac:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b50b0:	42a8      	cmp	r0, r5
   b50b2:	f171 0300 	sbcs.w	r3, r1, #0
   b50b6:	d207      	bcs.n	b50c8 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b50b8:	f008 fe6c 	bl	bdd94 <_Z16_fetch_usbserialv>
   b50bc:	f008 fe5f 	bl	bdd7e <_ZN9USBSerial11isConnectedEv>
   b50c0:	b910      	cbnz	r0, b50c8 <setup+0x34>
            spark_process();
   b50c2:	f005 fdcd 	bl	bac60 <spark_process>
        while (_while() && !_condition()) {
   b50c6:	e7ed      	b.n	b50a4 <setup+0x10>
   b50c8:	f008 fe64 	bl	bdd94 <_Z16_fetch_usbserialv>
   b50cc:	f008 fe57 	bl	bdd7e <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b50d0:	f000 fbd4 	bl	b587c <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b50d4:	f000 fbfe 	bl	b58d4 <_Z18initializePowerCfgv>
		current.setup();
   b50d8:	f000 f9d0 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b50dc:	6803      	ldr	r3, [r0, #0]
   b50de:	681b      	ldr	r3, [r3, #0]
   b50e0:	4798      	blx	r3
  		sysStatus.setup();
   b50e2:	f000 f97b 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b50e6:	6803      	ldr	r3, [r0, #0]
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	4798      	blx	r3
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   b50ec:	f000 fc9a 	bl	b5a24 <_Z18particleInitializev>
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b50f0:	485e      	ldr	r0, [pc, #376]	; (b526c <setup+0x1d8>)
   b50f2:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b50f4:	2101      	movs	r1, #1
   b50f6:	8143      	strh	r3, [r0, #10]
   b50f8:	f001 fe0a 	bl	b6d10 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b50fc:	217c      	movs	r1, #124	; 0x7c
   b50fe:	485b      	ldr	r0, [pc, #364]	; (b526c <setup+0x1d8>)
   b5100:	f001 fa08 	bl	b6514 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5104:	4b5a      	ldr	r3, [pc, #360]	; (b5270 <setup+0x1dc>)
   b5106:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b5108:	4b5a      	ldr	r3, [pc, #360]	; (b5274 <setup+0x1e0>)
   b510a:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b510c:	ad08      	add	r5, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b510e:	4b5a      	ldr	r3, [pc, #360]	; (b5278 <setup+0x1e4>)
   b5110:	930a      	str	r3, [sp, #40]	; 0x28
   b5112:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5116:	2300      	movs	r3, #0
   b5118:	a804      	add	r0, sp, #16
   b511a:	9500      	str	r5, [sp, #0]
   b511c:	f7ff fec6 	bl	b4eac <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5120:	4628      	mov	r0, r5
   b5122:	f7ff fbdb 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5126:	f002 ff03 	bl	b7f30 <_ZN17PublishQueuePosix8instanceEv>
   b512a:	f003 f907 	bl	b833c <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b512e:	f7fe ffed 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b5132:	2101      	movs	r1, #1
   b5134:	f7fe fffc 	bl	b4130 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5138:	f002 fb92 	bl	b7860 <_ZN9LocalTime8instanceEv>
   b513c:	494f      	ldr	r1, [pc, #316]	; (b527c <setup+0x1e8>)
   b513e:	4604      	mov	r4, r0
   b5140:	4628      	mov	r0, r5
   b5142:	f002 fa8f 	bl	b7664 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5146:	a909      	add	r1, sp, #36	; 0x24
   b5148:	f104 0008 	add.w	r0, r4, #8
   b514c:	f008 fa23 	bl	bd596 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b5152:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5154:	a90f      	add	r1, sp, #60	; 0x3c
   b5156:	f104 0020 	add.w	r0, r4, #32
   b515a:	f008 fa1c 	bl	bd596 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b515e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5160:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5162:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5164:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5166:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5168:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b516a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b516c:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b516e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b5170:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5172:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   b5176:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b517a:	4628      	mov	r0, r5
   b517c:	f002 f840 	bl	b7200 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5180:	f008 fd21 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b5184:	4c3e      	ldr	r4, [pc, #248]	; (b5280 <setup+0x1ec>)
   b5186:	17c3      	asrs	r3, r0, #31
   b5188:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   b518c:	4620      	mov	r0, r4
   b518e:	f002 fbdf 	bl	b7950 <_ZN16LocalTimeConvert7convertEv>
  	Log.info("Gateway startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   b5192:	4b3c      	ldr	r3, [pc, #240]	; (b5284 <setup+0x1f0>)
   b5194:	4621      	mov	r1, r4
   b5196:	681a      	ldr	r2, [r3, #0]
   b5198:	4628      	mov	r0, r5
   b519a:	f002 fac3 	bl	b7724 <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b519e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b51a0:	a903      	add	r1, sp, #12
   b51a2:	2003      	movs	r0, #3
   b51a4:	9e08      	ldr	r6, [sp, #32]
    const diag_source* src = nullptr;
   b51a6:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   b51a8:	f005 fcc6 	bl	bab38 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b51ac:	2800      	cmp	r0, #0
   b51ae:	d155      	bne.n	b525c <setup+0x1c8>
        return ret;
    }
    return get(src, val);
   b51b0:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   b51b2:	b10c      	cbz	r4, b51b8 <setup+0x124>
   b51b4:	6923      	ldr	r3, [r4, #16]
   b51b6:	b923      	cbnz	r3, b51c2 <setup+0x12e>
   b51b8:	4a33      	ldr	r2, [pc, #204]	; (b5288 <setup+0x1f4>)
   b51ba:	4934      	ldr	r1, [pc, #208]	; (b528c <setup+0x1f8>)
   b51bc:	200a      	movs	r0, #10
   b51be:	f005 fc93 	bl	baae8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b51c2:	230c      	movs	r3, #12
   b51c4:	9304      	str	r3, [sp, #16]
   b51c6:	ab02      	add	r3, sp, #8
   b51c8:	9305      	str	r3, [sp, #20]
   b51ca:	2304      	movs	r3, #4
   b51cc:	9306      	str	r3, [sp, #24]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b51ce:	6923      	ldr	r3, [r4, #16]
   b51d0:	aa04      	add	r2, sp, #16
   b51d2:	2101      	movs	r1, #1
   b51d4:	4620      	mov	r0, r4
   b51d6:	4798      	blx	r3
        if (r) {
   b51d8:	2800      	cmp	r0, #0
   b51da:	d13f      	bne.n	b525c <setup+0x1c8>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b51dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b51e0:	ee07 3a90 	vmov	s15, r3
   b51e4:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b51e8:	ee17 0a90 	vmov	r0, s15
   b51ec:	f009 f966 	bl	be4bc <__aeabi_f2d>
   b51f0:	4632      	mov	r2, r6
   b51f2:	e9cd 0100 	strd	r0, r1, [sp]
   b51f6:	4926      	ldr	r1, [pc, #152]	; (b5290 <setup+0x1fc>)
   b51f8:	4826      	ldr	r0, [pc, #152]	; (b5294 <setup+0x200>)
   b51fa:	f7fe ff6f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b51fe:	4628      	mov	r0, r5
   b5200:	f008 f942 	bl	bd488 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b5204:	4b24      	ldr	r3, [pc, #144]	; (b5298 <setup+0x204>)
   b5206:	4d25      	ldr	r5, [pc, #148]	; (b529c <setup+0x208>)
   b5208:	881e      	ldrh	r6, [r3, #0]
   b520a:	4630      	mov	r0, r6
   b520c:	f008 ff04 	bl	be018 <digitalRead>
   b5210:	4604      	mov	r4, r0
   b5212:	bb30      	cbnz	r0, b5262 <setup+0x1ce>
		Log.info("User button pressed, test mode");
   b5214:	4922      	ldr	r1, [pc, #136]	; (b52a0 <setup+0x20c>)
   b5216:	481f      	ldr	r0, [pc, #124]	; (b5294 <setup+0x200>)
   b5218:	f7fe ff60 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		testModeFlag = true;
   b521c:	4b21      	ldr	r3, [pc, #132]	; (b52a4 <setup+0x210>)
   b521e:	2101      	movs	r1, #1
   b5220:	7019      	strb	r1, [r3, #0]
		digitalWrite(BLUE_LED,HIGH);
   b5222:	4b21      	ldr	r3, [pc, #132]	; (b52a8 <setup+0x214>)
   b5224:	881f      	ldrh	r7, [r3, #0]
   b5226:	4638      	mov	r0, r7
   b5228:	f008 fedd 	bl	bdfe6 <digitalWrite>
		delay(2000);
   b522c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5230:	f005 fe3e 	bl	baeb0 <delay>
		digitalWrite(BLUE_LED,LOW);
   b5234:	4621      	mov	r1, r4
   b5236:	4638      	mov	r0, r7
   b5238:	f008 fed5 	bl	bdfe6 <digitalWrite>
		state = LoRA_STATE;
   b523c:	2304      	movs	r3, #4
   b523e:	702b      	strb	r3, [r5, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5240:	2200      	movs	r2, #0
   b5242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5246:	4919      	ldr	r1, [pc, #100]	; (b52ac <setup+0x218>)
   b5248:	9200      	str	r2, [sp, #0]
   b524a:	4630      	mov	r0, r6
   b524c:	f006 fba6 	bl	bb99c <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5250:	782b      	ldrb	r3, [r5, #0]
   b5252:	b90b      	cbnz	r3, b5258 <setup+0x1c4>
   b5254:	2302      	movs	r3, #2
   b5256:	702b      	strb	r3, [r5, #0]
}
   b5258:	b01f      	add	sp, #124	; 0x7c
   b525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1.0f;
   b525c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5260:	e7c2      	b.n	b51e8 <setup+0x154>
	else Log.info("No user button push detechted");
   b5262:	4913      	ldr	r1, [pc, #76]	; (b52b0 <setup+0x21c>)
   b5264:	480b      	ldr	r0, [pc, #44]	; (b5294 <setup+0x200>)
   b5266:	f7fe ff39 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b526a:	e7e9      	b.n	b5240 <setup+0x1ac>
   b526c:	2003e27c 	.word	0x2003e27c
   b5270:	000b4859 	.word	0x000b4859
   b5274:	000b48d3 	.word	0x000b48d3
   b5278:	000b48bf 	.word	0x000b48bf
   b527c:	000bf6d0 	.word	0x000bf6d0
   b5280:	2003e2b8 	.word	0x2003e2b8
   b5284:	2003de88 	.word	0x2003de88
   b5288:	000ba689 	.word	0x000ba689
   b528c:	000bf6f7 	.word	0x000bf6f7
   b5290:	000bf71d 	.word	0x000bf71d
   b5294:	2003e658 	.word	0x2003e658
   b5298:	000bf836 	.word	0x000bf836
   b529c:	2003e3e0 	.word	0x2003e3e0
   b52a0:	000bf74f 	.word	0x000bf74f
   b52a4:	2003e3e1 	.word	0x2003e3e1
   b52a8:	000bf834 	.word	0x000bf834
   b52ac:	000b4865 	.word	0x000b4865
   b52b0:	000bf76e 	.word	0x000bf76e

000b52b4 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b52b4:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b52b6:	4b04      	ldr	r3, [pc, #16]	; (b52c8 <_ZN17currentStatusDataD1Ev+0x14>)
   b52b8:	6003      	str	r3, [r0, #0]
   b52ba:	4604      	mov	r4, r0
            if (handle_) {
   b52bc:	6840      	ldr	r0, [r0, #4]
   b52be:	b108      	cbz	r0, b52c4 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b52c0:	f005 f9a2 	bl	ba608 <os_mutex_recursive_destroy>
}
   b52c4:	4620      	mov	r0, r4
   b52c6:	bd10      	pop	{r4, pc}
   b52c8:	000c053c 	.word	0x000c053c

000b52cc <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b52cc:	b510      	push	{r4, lr}
   b52ce:	4604      	mov	r4, r0
}
   b52d0:	f7ff fff0 	bl	b52b4 <_ZN17currentStatusDataD1Ev>
   b52d4:	4620      	mov	r0, r4
   b52d6:	2178      	movs	r1, #120	; 0x78
   b52d8:	f7fe fee1 	bl	b409e <_ZdlPvj>
   b52dc:	4620      	mov	r0, r4
   b52de:	bd10      	pop	{r4, pc}

000b52e0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b52e0:	b510      	push	{r4, lr}
   b52e2:	4b03      	ldr	r3, [pc, #12]	; (b52f0 <_ZN8MB85RC64D1Ev+0x10>)
   b52e4:	6003      	str	r3, [r0, #0]
   b52e6:	4604      	mov	r4, r0
   b52e8:	f002 fbe0 	bl	b7aac <_ZN6MB85RCD1Ev>
   b52ec:	4620      	mov	r0, r4
   b52ee:	bd10      	pop	{r4, pc}
   b52f0:	000bf794 	.word	0x000bf794

000b52f4 <_ZN8MB85RC64D0Ev>:
   b52f4:	b510      	push	{r4, lr}
   b52f6:	4604      	mov	r4, r0
   b52f8:	f7ff fff2 	bl	b52e0 <_ZN8MB85RC64D1Ev>
   b52fc:	4620      	mov	r0, r4
   b52fe:	2110      	movs	r1, #16
   b5300:	f7fe fecd 	bl	b409e <_ZdlPvj>
   b5304:	4620      	mov	r0, r4
   b5306:	bd10      	pop	{r4, pc}

000b5308 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b5308:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b530a:	4b04      	ldr	r3, [pc, #16]	; (b531c <_ZN13sysStatusDataD1Ev+0x14>)
   b530c:	6003      	str	r3, [r0, #0]
   b530e:	4604      	mov	r4, r0
            if (handle_) {
   b5310:	6840      	ldr	r0, [r0, #4]
   b5312:	b108      	cbz	r0, b5318 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5314:	f005 f978 	bl	ba608 <os_mutex_recursive_destroy>
}
   b5318:	4620      	mov	r0, r4
   b531a:	bd10      	pop	{r4, pc}
   b531c:	000c053c 	.word	0x000c053c

000b5320 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5320:	b510      	push	{r4, lr}
   b5322:	4604      	mov	r4, r0
}
   b5324:	f7ff fff0 	bl	b5308 <_ZN13sysStatusDataD1Ev>
   b5328:	4620      	mov	r0, r4
   b532a:	2170      	movs	r1, #112	; 0x70
   b532c:	f7fe feb7 	bl	b409e <_ZdlPvj>
   b5330:	4620      	mov	r0, r4
   b5332:	bd10      	pop	{r4, pc}

000b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b5334:	b510      	push	{r4, lr}
            if (!handle_) {
   b5336:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5338:	4604      	mov	r4, r0
            if (!handle_) {
   b533a:	b90b      	cbnz	r3, b5340 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b533c:	f005 f95c 	bl	ba5f8 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b5340:	6820      	ldr	r0, [r4, #0]
        }
   b5342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5346:	f005 b967 	b.w	ba618 <os_mutex_recursive_lock>

000b534a <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b534a:	b538      	push	{r3, r4, r5, lr}
   b534c:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b534e:	3004      	adds	r0, #4
   b5350:	f7ff fff0 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5354:	6a20      	ldr	r0, [r4, #32]
   b5356:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5358:	6803      	ldr	r3, [r0, #0]
   b535a:	68dd      	ldr	r5, [r3, #12]
   b535c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5360:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5362:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5368:	f005 b95e 	b.w	ba628 <os_mutex_recursive_unlock>

000b536c <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b536c:	b538      	push	{r3, r4, r5, lr}
   b536e:	4604      	mov	r4, r0
   b5370:	3004      	adds	r0, #4
   b5372:	f7ff ffdf 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5376:	6a20      	ldr	r0, [r4, #32]
   b5378:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b537a:	6803      	ldr	r3, [r0, #0]
   b537c:	689d      	ldr	r5, [r3, #8]
   b537e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5382:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5384:	68a2      	ldr	r2, [r4, #8]
   b5386:	6823      	ldr	r3, [r4, #0]
   b5388:	88d1      	ldrh	r1, [r2, #6]
   b538a:	695b      	ldr	r3, [r3, #20]
   b538c:	4620      	mov	r0, r4
   b538e:	4798      	blx	r3
   b5390:	b918      	cbnz	r0, b539a <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5392:	6823      	ldr	r3, [r4, #0]
   b5394:	4620      	mov	r0, r4
   b5396:	699b      	ldr	r3, [r3, #24]
   b5398:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b539a:	6860      	ldr	r0, [r4, #4]
   b539c:	f005 f944 	bl	ba628 <os_mutex_recursive_unlock>
        }
   b53a0:	2001      	movs	r0, #1
   b53a2:	bd38      	pop	{r3, r4, r5, pc}

000b53a4 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b53a4:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b53a8:	6081      	str	r1, [r0, #8]
   b53aa:	4909      	ldr	r1, [pc, #36]	; (b53d0 <_ZN13sysStatusDataC1Ev+0x2c>)
   b53ac:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b53b0:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b53b4:	2101      	movs	r1, #1
   b53b6:	8281      	strh	r1, [r0, #20]
   b53b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b53bc:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b53be:	4905      	ldr	r1, [pc, #20]	; (b53d4 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b53c0:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b53c2:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b53c6:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b53c8:	6182      	str	r2, [r0, #24]
   b53ca:	4a03      	ldr	r2, [pc, #12]	; (b53d8 <_ZN13sysStatusDataC1Ev+0x34>)
   b53cc:	6002      	str	r2, [r0, #0]
};
   b53ce:	4770      	bx	lr
   b53d0:	20a99e73 	.word	0x20a99e73
   b53d4:	2003e3ec 	.word	0x2003e3ec
   b53d8:	000bf7b0 	.word	0x000bf7b0

000b53dc <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b53dc:	b510      	push	{r4, lr}
    if (!_instance) {
   b53de:	4c06      	ldr	r4, [pc, #24]	; (b53f8 <_ZN13sysStatusData8instanceEv+0x1c>)
   b53e0:	6823      	ldr	r3, [r4, #0]
   b53e2:	b93b      	cbnz	r3, b53f4 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b53e4:	2070      	movs	r0, #112	; 0x70
   b53e6:	f7fe fe56 	bl	b4096 <_Znwj>
   b53ea:	4603      	mov	r3, r0
   b53ec:	b108      	cbz	r0, b53f2 <_ZN13sysStatusData8instanceEv+0x16>
   b53ee:	f7ff ffd9 	bl	b53a4 <_ZN13sysStatusDataC1Ev>
   b53f2:	6023      	str	r3, [r4, #0]
}
   b53f4:	6820      	ldr	r0, [r4, #0]
   b53f6:	bd10      	pop	{r4, pc}
   b53f8:	2003e3e4 	.word	0x2003e3e4

000b53fc <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b53fc:	b508      	push	{r3, lr}
    fram.begin();
   b53fe:	6a00      	ldr	r0, [r0, #32]
   b5400:	f002 fb6a 	bl	b7ad8 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5404:	f7ff ffea 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5408:	6803      	ldr	r3, [r0, #0]
   b540a:	685b      	ldr	r3, [r3, #4]
   b540c:	4798      	blx	r3
}
   b540e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setGatewayConfiguration();                             // Here we will fix the settings specific to the node
   b5412:	f005 b89b 	b.w	ba54c <_Z23setGatewayConfigurationv>

000b5416 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5416:	b510      	push	{r4, lr}
    fram.begin();
   b5418:	6a00      	ldr	r0, [r0, #32]
   b541a:	f002 fb5d 	bl	b7ad8 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b541e:	f7ff ffdd 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5422:	6803      	ldr	r3, [r0, #0]
}
   b5424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5428:	685b      	ldr	r3, [r3, #4]
   b542a:	4718      	bx	r3

000b542c <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b542c:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b542e:	f7ff ffd5 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5432:	6803      	ldr	r3, [r0, #0]
}
   b5434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5438:	68db      	ldr	r3, [r3, #12]
   b543a:	2100      	movs	r1, #0
   b543c:	4718      	bx	r3
	...

000b5440 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5440:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5442:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5446:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5448:	6182      	str	r2, [r0, #24]
   b544a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b544e:	6081      	str	r1, [r0, #8]
   b5450:	61c2      	str	r2, [r0, #28]
   b5452:	4907      	ldr	r1, [pc, #28]	; (b5470 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5454:	4a07      	ldr	r2, [pc, #28]	; (b5474 <_ZN17currentStatusDataC1Ev+0x34>)
   b5456:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5458:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b545c:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b545e:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5462:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5464:	2101      	movs	r1, #1
   b5466:	4a04      	ldr	r2, [pc, #16]	; (b5478 <_ZN17currentStatusDataC1Ev+0x38>)
   b5468:	8281      	strh	r1, [r0, #20]
   b546a:	6002      	str	r2, [r0, #0]
};
   b546c:	4770      	bx	lr
   b546e:	bf00      	nop
   b5470:	20a99e73 	.word	0x20a99e73
   b5474:	2003e3ec 	.word	0x2003e3ec
   b5478:	000bf7dc 	.word	0x000bf7dc

000b547c <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b547c:	b510      	push	{r4, lr}
    if (!_instance) {
   b547e:	4c06      	ldr	r4, [pc, #24]	; (b5498 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5480:	6823      	ldr	r3, [r4, #0]
   b5482:	b93b      	cbnz	r3, b5494 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5484:	2078      	movs	r0, #120	; 0x78
   b5486:	f7fe fe06 	bl	b4096 <_Znwj>
   b548a:	4603      	mov	r3, r0
   b548c:	b108      	cbz	r0, b5492 <_ZN17currentStatusData8instanceEv+0x16>
   b548e:	f7ff ffd7 	bl	b5440 <_ZN17currentStatusDataC1Ev>
   b5492:	6023      	str	r3, [r4, #0]
}
   b5494:	6820      	ldr	r0, [r4, #0]
   b5496:	bd10      	pop	{r4, pc}
   b5498:	2003e3e8 	.word	0x2003e3e8

000b549c <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b549c:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b549e:	f7ff ff9d 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b54a2:	6803      	ldr	r3, [r0, #0]
}
   b54a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b54a8:	68db      	ldr	r3, [r3, #12]
   b54aa:	2100      	movs	r1, #0
   b54ac:	4718      	bx	r3
	...

000b54b0 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b54b0:	b510      	push	{r4, lr}
   b54b2:	4604      	mov	r4, r0
   b54b4:	ed2d 8b02 	vpush	{d8}
   b54b8:	3004      	adds	r0, #4
   b54ba:	f7ff ff3b 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b54be:	68e3      	ldr	r3, [r4, #12]
   b54c0:	3b08      	subs	r3, #8
   b54c2:	2b17      	cmp	r3, #23
   b54c4:	d90c      	bls.n	b54e0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b54c6:	68a3      	ldr	r3, [r4, #8]
   b54c8:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b54cc:	6860      	ldr	r0, [r4, #4]
   b54ce:	f005 f8ab 	bl	ba628 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b54d2:	eeb0 0a48 	vmov.f32	s0, s16
   b54d6:	eef0 0a68 	vmov.f32	s1, s17
   b54da:	ecbd 8b02 	vpop	{d8}
   b54de:	bd10      	pop	{r4, pc}
            T result = 0;
   b54e0:	ed9f 8b01 	vldr	d8, [pc, #4]	; b54e8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b54e4:	e7f2      	b.n	b54cc <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b54e6:	bf00      	nop
	...

000b54f0 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b54f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54f2:	4604      	mov	r4, r0
   b54f4:	3004      	adds	r0, #4
   b54f6:	ec57 6b10 	vmov	r6, r7, d0
   b54fa:	f7ff ff1b 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b54fe:	68e3      	ldr	r3, [r4, #12]
   b5500:	3b08      	subs	r3, #8
   b5502:	2b17      	cmp	r3, #23
   b5504:	d912      	bls.n	b552c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5506:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5508:	4630      	mov	r0, r6
   b550a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b550e:	4639      	mov	r1, r7
   b5510:	f009 fa94 	bl	bea3c <__aeabi_dcmpeq>
   b5514:	b950      	cbnz	r0, b552c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5516:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b551a:	4620      	mov	r0, r4
   b551c:	68a5      	ldr	r5, [r4, #8]
   b551e:	f004 ff9b 	bl	ba458 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5522:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5524:	6823      	ldr	r3, [r4, #0]
   b5526:	4620      	mov	r0, r4
   b5528:	691b      	ldr	r3, [r3, #16]
   b552a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b552c:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b552e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5532:	f005 b879 	b.w	ba628 <os_mutex_recursive_unlock>

000b5536 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5536:	b538      	push	{r3, r4, r5, lr}
   b5538:	4604      	mov	r4, r0
   b553a:	3004      	adds	r0, #4
   b553c:	460d      	mov	r5, r1
   b553e:	f7ff fef9 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5542:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5544:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5546:	3b02      	subs	r3, #2
   b5548:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b554a:	bf26      	itte	cs
   b554c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b554e:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5550:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5552:	f005 f869 	bl	ba628 <os_mutex_recursive_unlock>
        }
   b5556:	4628      	mov	r0, r5
   b5558:	bd38      	pop	{r3, r4, r5, pc}

000b555a <_ZNK13sysStatusData12get_deviceIDEv>:
uint16_t sysStatusData::get_deviceID() const {
   b555a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, deviceID));
   b555c:	2110      	movs	r1, #16
   b555e:	f7ff ffea 	bl	b5536 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5562:	bd08      	pop	{r3, pc}

000b5564 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint16_t sysStatusData::get_nodeNumber() const {
   b5564:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, nodeNumber));
   b5566:	2112      	movs	r1, #18
   b5568:	f7ff ffe5 	bl	b5536 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b556c:	bd08      	pop	{r3, pc}

000b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b556e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5570:	2134      	movs	r1, #52	; 0x34
   b5572:	f7ff ffe0 	bl	b5536 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5576:	bd08      	pop	{r3, pc}

000b5578 <_ZNK17currentStatusData12get_deviceIDEv>:
uint16_t currentStatusData::get_deviceID() const {
   b5578:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, deviceID));
   b557a:	2110      	movs	r1, #16
   b557c:	f7ff ffdb 	bl	b5536 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5580:	bd08      	pop	{r3, pc}

000b5582 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint16_t currentStatusData::get_nodeNumber() const {
   b5582:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeNumber));
   b5584:	2112      	movs	r1, #18
   b5586:	f7ff ffd6 	bl	b5536 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b558a:	bd08      	pop	{r3, pc}

000b558c <_ZNK17currentStatusData8get_RSSIEv>:

void currentStatusData::set_lastSampleTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastSampleTime), value);
}

uint16_t currentStatusData::get_RSSI() const {
   b558c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b558e:	2130      	movs	r1, #48	; 0x30
   b5590:	f7ff ffd1 	bl	b5536 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5594:	bd08      	pop	{r3, pc}

000b5596 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b5596:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5598:	2140      	movs	r1, #64	; 0x40
   b559a:	f7ff ffcc 	bl	b5536 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b559e:	bd08      	pop	{r3, pc}

000b55a0 <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b55a0:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b55a2:	2142      	movs	r1, #66	; 0x42
   b55a4:	f7ff ffc7 	bl	b5536 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b55a8:	bd08      	pop	{r3, pc}

000b55aa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b55aa:	b570      	push	{r4, r5, r6, lr}
   b55ac:	4604      	mov	r4, r0
   b55ae:	3004      	adds	r0, #4
   b55b0:	460d      	mov	r5, r1
   b55b2:	4616      	mov	r6, r2
   b55b4:	f7ff febe 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b55b8:	68e3      	ldr	r3, [r4, #12]
   b55ba:	3b02      	subs	r3, #2
   b55bc:	42ab      	cmp	r3, r5
   b55be:	d30d      	bcc.n	b55dc <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b55c0:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b55c2:	5b5a      	ldrh	r2, [r3, r5]
   b55c4:	42b2      	cmp	r2, r6
   b55c6:	d009      	beq.n	b55dc <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b55c8:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b55ca:	4620      	mov	r0, r4
   b55cc:	68a5      	ldr	r5, [r4, #8]
   b55ce:	f004 ff43 	bl	ba458 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b55d2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b55d4:	6823      	ldr	r3, [r4, #0]
   b55d6:	4620      	mov	r0, r4
   b55d8:	691b      	ldr	r3, [r3, #16]
   b55da:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b55dc:	6860      	ldr	r0, [r4, #4]
        }
   b55de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b55e2:	f005 b821 	b.w	ba628 <os_mutex_recursive_unlock>

000b55e6 <_ZN13sysStatusData12set_deviceIDEt>:
void sysStatusData::set_deviceID(uint16_t value) {
   b55e6:	b508      	push	{r3, lr}
   b55e8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, deviceID), value);
   b55ea:	2110      	movs	r1, #16
   b55ec:	f7ff ffdd 	bl	b55aa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b55f0:	bd08      	pop	{r3, pc}

000b55f2 <_ZN13sysStatusData14set_nodeNumberEt>:
void sysStatusData::set_nodeNumber(uint16_t value) {
   b55f2:	b508      	push	{r3, lr}
   b55f4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, nodeNumber), value);
   b55f6:	2112      	movs	r1, #18
   b55f8:	f7ff ffd7 	bl	b55aa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b55fc:	bd08      	pop	{r3, pc}

000b55fe <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b55fe:	b508      	push	{r3, lr}
   b5600:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b5602:	2134      	movs	r1, #52	; 0x34
   b5604:	f7ff ffd1 	bl	b55aa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5608:	bd08      	pop	{r3, pc}

000b560a <_ZN17currentStatusData12set_deviceIDEt>:
void currentStatusData::set_deviceID(uint16_t value) {
   b560a:	b508      	push	{r3, lr}
   b560c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, deviceID), value);
   b560e:	2110      	movs	r1, #16
   b5610:	f7ff ffcb 	bl	b55aa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5614:	bd08      	pop	{r3, pc}

000b5616 <_ZN17currentStatusData14set_nodeNumberEt>:
void currentStatusData::set_nodeNumber(uint16_t value) {
   b5616:	b508      	push	{r3, lr}
   b5618:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, nodeNumber), value);
   b561a:	2112      	movs	r1, #18
   b561c:	f7ff ffc5 	bl	b55aa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5620:	bd08      	pop	{r3, pc}

000b5622 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b5622:	b508      	push	{r3, lr}
   b5624:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b5626:	2130      	movs	r1, #48	; 0x30
   b5628:	f7ff ffbf 	bl	b55aa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b562c:	bd08      	pop	{r3, pc}

000b562e <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b562e:	b508      	push	{r3, lr}
   b5630:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b5632:	2140      	movs	r1, #64	; 0x40
   b5634:	f7ff ffb9 	bl	b55aa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5638:	bd08      	pop	{r3, pc}

000b563a <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b563a:	b508      	push	{r3, lr}
   b563c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b563e:	2142      	movs	r1, #66	; 0x42
   b5640:	f7ff ffb3 	bl	b55aa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5644:	bd08      	pop	{r3, pc}

000b5646 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5646:	b538      	push	{r3, r4, r5, lr}
   b5648:	4604      	mov	r4, r0
   b564a:	3004      	adds	r0, #4
   b564c:	460d      	mov	r5, r1
   b564e:	f7ff fe71 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5652:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5654:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5656:	3b01      	subs	r3, #1
   b5658:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b565a:	bf26      	itte	cs
   b565c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b565e:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5660:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5662:	f004 ffe1 	bl	ba628 <os_mutex_recursive_unlock>
        }
   b5666:	4628      	mov	r0, r5
   b5668:	bd38      	pop	{r3, r4, r5, pc}

000b566a <_ZNK13sysStatusData21get_structuresVersionEv>:
uint8_t sysStatusData::get_structuresVersion() const {
   b566a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, structuresVersion));
   b566c:	2114      	movs	r1, #20
   b566e:	f7ff ffea 	bl	b5646 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5672:	bd08      	pop	{r3, pc}

000b5674 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5674:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5676:	2118      	movs	r1, #24
   b5678:	f7ff ffe5 	bl	b5646 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b567c:	bd08      	pop	{r3, pc}

000b567e <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b567e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5680:	2114      	movs	r1, #20
   b5682:	f7ff ffe0 	bl	b5646 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5686:	bd08      	pop	{r3, pc}

000b5688 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5688:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b568a:	2120      	movs	r1, #32
   b568c:	f7ff ffdb 	bl	b5646 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5690:	bd08      	pop	{r3, pc}

000b5692 <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b5692:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b5694:	2132      	movs	r1, #50	; 0x32
   b5696:	f7ff ffd6 	bl	b5646 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b569a:	bd08      	pop	{r3, pc}

000b569c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b569c:	b570      	push	{r4, r5, r6, lr}
   b569e:	4604      	mov	r4, r0
   b56a0:	3004      	adds	r0, #4
   b56a2:	460d      	mov	r5, r1
   b56a4:	4616      	mov	r6, r2
   b56a6:	f7ff fe45 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b56aa:	68e3      	ldr	r3, [r4, #12]
   b56ac:	3b01      	subs	r3, #1
   b56ae:	42ab      	cmp	r3, r5
   b56b0:	d30d      	bcc.n	b56ce <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b56b2:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b56b4:	5d5a      	ldrb	r2, [r3, r5]
   b56b6:	42b2      	cmp	r2, r6
   b56b8:	d009      	beq.n	b56ce <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b56ba:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b56bc:	4620      	mov	r0, r4
   b56be:	68a5      	ldr	r5, [r4, #8]
   b56c0:	f004 feca 	bl	ba458 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b56c4:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b56c6:	6823      	ldr	r3, [r4, #0]
   b56c8:	4620      	mov	r0, r4
   b56ca:	691b      	ldr	r3, [r3, #16]
   b56cc:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b56ce:	6860      	ldr	r0, [r4, #4]
        }
   b56d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b56d4:	f004 bfa8 	b.w	ba628 <os_mutex_recursive_unlock>

000b56d8 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b56d8:	b508      	push	{r3, lr}
   b56da:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b56dc:	2114      	movs	r1, #20
   b56de:	f7ff ffdd 	bl	b569c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b56e2:	bd08      	pop	{r3, pc}

000b56e4 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b56e4:	b508      	push	{r3, lr}
   b56e6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b56e8:	2114      	movs	r1, #20
   b56ea:	f7ff ffd7 	bl	b569c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b56ee:	bd08      	pop	{r3, pc}

000b56f0 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b56f0:	b508      	push	{r3, lr}
   b56f2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b56f4:	2120      	movs	r1, #32
   b56f6:	f7ff ffd1 	bl	b569c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b56fa:	bd08      	pop	{r3, pc}

000b56fc <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b56fc:	b508      	push	{r3, lr}
   b56fe:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b5700:	2132      	movs	r1, #50	; 0x32
   b5702:	f7ff ffcb 	bl	b569c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5706:	bd08      	pop	{r3, pc}

000b5708 <_ZN17currentStatusData17set_alertCodeNodeEh>:

uint8_t currentStatusData::get_alertCodeNode() const {
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
}

void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5708:	b508      	push	{r3, lr}
   b570a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b570c:	2144      	movs	r1, #68	; 0x44
   b570e:	f7ff ffc5 	bl	b569c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5712:	bd08      	pop	{r3, pc}

000b5714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b5714:	b538      	push	{r3, r4, r5, lr}
   b5716:	4604      	mov	r4, r0
   b5718:	3004      	adds	r0, #4
   b571a:	460d      	mov	r5, r1
   b571c:	f7ff fe0a 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5720:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5722:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5724:	3b01      	subs	r3, #1
   b5726:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5728:	bf26      	itte	cs
   b572a:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b572c:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b572e:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5730:	f004 ff7a 	bl	ba628 <os_mutex_recursive_unlock>
        }
   b5734:	4628      	mov	r0, r5
   b5736:	bd38      	pop	{r3, r4, r5, pc}

000b5738 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b5738:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b573a:	2117      	movs	r1, #23
   b573c:	f7ff ffea 	bl	b5714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5740:	bd08      	pop	{r3, pc}

000b5742 <_ZNK13sysStatusData14get_verizonSIMEv>:
bool sysStatusData::get_verizonSIM() const {
   b5742:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, verizonSIM));
   b5744:	2143      	movs	r1, #67	; 0x43
   b5746:	f7ff ffe5 	bl	b5714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b574a:	bd08      	pop	{r3, pc}

000b574c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b574c:	b570      	push	{r4, r5, r6, lr}
   b574e:	4604      	mov	r4, r0
   b5750:	3004      	adds	r0, #4
   b5752:	460d      	mov	r5, r1
   b5754:	4616      	mov	r6, r2
   b5756:	f7ff fded 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b575a:	68e3      	ldr	r3, [r4, #12]
   b575c:	3b01      	subs	r3, #1
   b575e:	42ab      	cmp	r3, r5
   b5760:	d30d      	bcc.n	b577e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5762:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5764:	5d5a      	ldrb	r2, [r3, r5]
   b5766:	42b2      	cmp	r2, r6
   b5768:	d009      	beq.n	b577e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b576a:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b576c:	4620      	mov	r0, r4
   b576e:	68a5      	ldr	r5, [r4, #8]
   b5770:	f004 fe72 	bl	ba458 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5774:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5776:	6823      	ldr	r3, [r4, #0]
   b5778:	4620      	mov	r0, r4
   b577a:	691b      	ldr	r3, [r3, #16]
   b577c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b577e:	6860      	ldr	r0, [r4, #4]
        }
   b5780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5784:	f004 bf50 	b.w	ba628 <os_mutex_recursive_unlock>

000b5788 <_ZN13sysStatusData16set_lowPowerModeEb>:
void sysStatusData::set_lowPowerMode(bool value) {
   b5788:	b508      	push	{r3, lr}
   b578a:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowPowerMode), value);
   b578c:	2117      	movs	r1, #23
   b578e:	f7ff ffdd 	bl	b574c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5792:	bd08      	pop	{r3, pc}

000b5794 <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b5794:	b508      	push	{r3, lr}
   b5796:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b5798:	2140      	movs	r1, #64	; 0x40
   b579a:	f7ff ffd7 	bl	b574c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b579e:	bd08      	pop	{r3, pc}

000b57a0 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b57a0:	b508      	push	{r3, lr}
   b57a2:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b57a4:	2143      	movs	r1, #67	; 0x43
   b57a6:	f7ff ffd1 	bl	b574c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b57aa:	bd08      	pop	{r3, pc}

000b57ac <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b57ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57ae:	4604      	mov	r4, r0
   b57b0:	3004      	adds	r0, #4
   b57b2:	460d      	mov	r5, r1
   b57b4:	f7ff fdbe 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b57b8:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b57ba:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b57bc:	3b08      	subs	r3, #8
   b57be:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b57c0:	bf23      	ittte	cs
   b57c2:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b57c4:	1949      	addcs	r1, r1, r5
   b57c6:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b57ca:	2600      	movcc	r6, #0
   b57cc:	bf38      	it	cc
   b57ce:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b57d0:	f004 ff2a 	bl	ba628 <os_mutex_recursive_unlock>
        }
   b57d4:	4630      	mov	r0, r6
   b57d6:	4639      	mov	r1, r7
   b57d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b57da <_ZNK13sysStatusData20get_lastHookResponseEv>:
time_t sysStatusData::get_lastHookResponse() const {
   b57da:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastHookResponse));
   b57dc:	2120      	movs	r1, #32
   b57de:	f7ff ffe5 	bl	b57ac <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b57e2:	bd08      	pop	{r3, pc}

000b57e4 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b57e4:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b57e6:	2128      	movs	r1, #40	; 0x28
   b57e8:	f7ff ffe0 	bl	b57ac <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b57ec:	bd08      	pop	{r3, pc}

000b57ee <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b57ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57f0:	4604      	mov	r4, r0
   b57f2:	3004      	adds	r0, #4
   b57f4:	460d      	mov	r5, r1
   b57f6:	461e      	mov	r6, r3
   b57f8:	4617      	mov	r7, r2
   b57fa:	f7ff fd9b 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b57fe:	68e3      	ldr	r3, [r4, #12]
   b5800:	3b08      	subs	r3, #8
   b5802:	42ab      	cmp	r3, r5
   b5804:	d312      	bcc.n	b582c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5806:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5808:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b580a:	5958      	ldr	r0, [r3, r5]
   b580c:	6851      	ldr	r1, [r2, #4]
   b580e:	42b1      	cmp	r1, r6
   b5810:	bf08      	it	eq
   b5812:	42b8      	cmpeq	r0, r7
   b5814:	d00a      	beq.n	b582c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5816:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5818:	4620      	mov	r0, r4
                        *(T *)p = value;
   b581a:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b581c:	68a5      	ldr	r5, [r4, #8]
   b581e:	f004 fe1b 	bl	ba458 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5822:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5824:	6823      	ldr	r3, [r4, #0]
   b5826:	4620      	mov	r0, r4
   b5828:	691b      	ldr	r3, [r3, #16]
   b582a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b582c:	6860      	ldr	r0, [r4, #4]
        }
   b582e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5832:	f004 bef9 	b.w	ba628 <os_mutex_recursive_unlock>

000b5836 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5836:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5838:	2128      	movs	r1, #40	; 0x28
   b583a:	f7ff ffd8 	bl	b57ee <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b583e:	bd08      	pop	{r3, pc}

000b5840 <_ZN17currentStatusData22set_alertTimestampNodeEx>:

time_t currentStatusData::get_alertTimestampNode() const {
    return getValue<time_t>(offsetof(CurrentData, alertTimestampNode));
}

void currentStatusData::set_alertTimestampNode(time_t value) {
   b5840:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b5842:	2148      	movs	r1, #72	; 0x48
   b5844:	f7ff ffd3 	bl	b57ee <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5848:	bd08      	pop	{r3, pc}
	...

000b584c <_GLOBAL__sub_I_fram>:
   b584c:	4b08      	ldr	r3, [pc, #32]	; (b5870 <_GLOBAL__sub_I_fram+0x24>)
   b584e:	2201      	movs	r2, #1

void currentStatusData::logData(const char *msg) {
    Log.info("Current Structure values - %d, %d, %d, %4.2f", currentData.deviceID, currentData.nodeNumber, currentData.internalTempC, currentData.stateOfCharge);
}
   b5850:	b510      	push	{r4, lr}
   b5852:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b5854:	f008 fc38 	bl	be0c8 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5858:	4c06      	ldr	r4, [pc, #24]	; (b5874 <_GLOBAL__sub_I_fram+0x28>)
   b585a:	4601      	mov	r1, r0
   b585c:	2300      	movs	r3, #0
   b585e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5862:	4620      	mov	r0, r4
   b5864:	f002 f92e 	bl	b7ac4 <_ZN6MB85RCC1ER7TwoWireji>
   b5868:	4b03      	ldr	r3, [pc, #12]	; (b5878 <_GLOBAL__sub_I_fram+0x2c>)
   b586a:	6023      	str	r3, [r4, #0]
}
   b586c:	bd10      	pop	{r4, pc}
   b586e:	bf00      	nop
   b5870:	2003e3e3 	.word	0x2003e3e3
   b5874:	2003e3ec 	.word	0x2003e3ec
   b5878:	000bf794 	.word	0x000bf794

000b587c <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b587c:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b587e:	4913      	ldr	r1, [pc, #76]	; (b58cc <_Z18initializePinModesv+0x50>)
   b5880:	4813      	ldr	r0, [pc, #76]	; (b58d0 <_Z18initializePinModesv+0x54>)
   b5882:	f7fe fc2b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5886:	2102      	movs	r1, #2
   b5888:	2004      	movs	r0, #4
   b588a:	f008 fb9b 	bl	bdfc4 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b588e:	2100      	movs	r1, #0
   b5890:	2008      	movs	r0, #8
   b5892:	f008 fb97 	bl	bdfc4 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b5896:	2101      	movs	r1, #1
   b5898:	2007      	movs	r0, #7
   b589a:	f008 fb93 	bl	bdfc4 <pinMode>
    pinMode(INT_PIN, INPUT);
   b589e:	2100      	movs	r1, #0
   b58a0:	2012      	movs	r0, #18
   b58a2:	f008 fb8f 	bl	bdfc4 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b58a6:	2101      	movs	r1, #1
   b58a8:	2011      	movs	r0, #17
   b58aa:	f008 fb8b 	bl	bdfc4 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b58ae:	2101      	movs	r1, #1
   b58b0:	2010      	movs	r0, #16
   b58b2:	f008 fb87 	bl	bdfc4 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b58b6:	2100      	movs	r1, #0
   b58b8:	2010      	movs	r0, #16
   b58ba:	f008 fb94 	bl	bdfe6 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b58be:	2100      	movs	r1, #0
   b58c0:	2011      	movs	r0, #17
   b58c2:	f008 fb90 	bl	bdfe6 <digitalWrite>
    return true;
}
   b58c6:	2001      	movs	r0, #1
   b58c8:	bd08      	pop	{r3, pc}
   b58ca:	bf00      	nop
   b58cc:	000bf800 	.word	0x000bf800
   b58d0:	2003e658 	.word	0x2003e658

000b58d4 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b58d4:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b58d6:	4918      	ldr	r1, [pc, #96]	; (b5938 <_Z18initializePowerCfgv+0x64>)
   b58d8:	4818      	ldr	r0, [pc, #96]	; (b593c <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b58da:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b58dc:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b58de:	f7fe fbfd 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b58e2:	4622      	mov	r2, r4
   b58e4:	2100      	movs	r1, #0
   b58e6:	4668      	mov	r0, sp
   b58e8:	f009 f9b2 	bl	bec50 <memset>
   b58ec:	4622      	mov	r2, r4
   b58ee:	2100      	movs	r1, #0
   b58f0:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b58f4:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b58f8:	f009 f9aa 	bl	bec50 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b58fc:	2100      	movs	r1, #0
   b58fe:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5902:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b5906:	f005 f97d 	bl	bac04 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b590a:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b590e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b5912:	4b0b      	ldr	r3, [pc, #44]	; (b5940 <_Z18initializePowerCfgv+0x6c>)
   b5914:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b5916:	f241 0370 	movw	r3, #4208	; 0x1070
   b591a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b591e:	9b00      	ldr	r3, [sp, #0]
   b5920:	2100      	movs	r1, #0
   b5922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b5926:	4668      	mov	r0, sp
   b5928:	9300      	str	r3, [sp, #0]
   b592a:	f005 f96b 	bl	bac04 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b592e:	3800      	subs	r0, #0
   b5930:	bf18      	it	ne
   b5932:	2001      	movne	r0, #1
   b5934:	b010      	add	sp, #64	; 0x40
   b5936:	bd10      	pop	{r4, pc}
   b5938:	000bf819 	.word	0x000bf819
   b593c:	2003e658 	.word	0x2003e658
   b5940:	03840384 	.word	0x03840384

000b5944 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b5944:	4770      	bx	lr

000b5946 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b5946:	6a00      	ldr	r0, [r0, #32]
   b5948:	6803      	ldr	r3, [r0, #0]
   b594a:	68db      	ldr	r3, [r3, #12]
   b594c:	4718      	bx	r3
	...

000b5950 <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b5950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5952:	4604      	mov	r4, r0
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.get_frequencyMinutes());
   b5954:	f7ff fd42 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5958:	f7ff fe09 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b595c:	4a06      	ldr	r2, [pc, #24]	; (b5978 <_Z15reportFrequencyv+0x28>)
   b595e:	4603      	mov	r3, r0
   b5960:	2110      	movs	r1, #16
   b5962:	4668      	mov	r0, sp
   b5964:	f005 fa4c 	bl	bae00 <snprintf>
    return reportStr;
   b5968:	4669      	mov	r1, sp
   b596a:	4620      	mov	r0, r4
   b596c:	f007 fdd7 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5970:	4620      	mov	r0, r4
   b5972:	b004      	add	sp, #16
   b5974:	bd10      	pop	{r4, pc}
   b5976:	bf00      	nop
   b5978:	000bf83e 	.word	0x000bf83e

000b597c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b597c:	b530      	push	{r4, r5, lr}
   b597e:	b085      	sub	sp, #20
   b5980:	4603      	mov	r3, r0
   b5982:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b5984:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5986:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b5988:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b598a:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b598c:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b598e:	f005 fa0f 	bl	badb0 <malloc>
   b5992:	6028      	str	r0, [r5, #0]
        if (!data) {
   b5994:	b150      	cbz	r0, b59ac <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b5996:	6822      	ldr	r2, [r4, #0]
   b5998:	9900      	ldr	r1, [sp, #0]
   b599a:	f009 f931 	bl	bec00 <memcpy>
        return 0;
   b599e:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b59a0:	4668      	mov	r0, sp
   b59a2:	f007 fd71 	bl	bd488 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b59a6:	4620      	mov	r0, r4
   b59a8:	b005      	add	sp, #20
   b59aa:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b59ac:	4c00      	ldr	r4, [pc, #0]	; (b59b0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b59ae:	e7f7      	b.n	b59a0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b59b0:	fffffefc 	.word	0xfffffefc

000b59b4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b59b4:	2300      	movs	r3, #0
   b59b6:	2204      	movs	r2, #4
   b59b8:	f005 b942 	b.w	bac40 <spark_variable>

000b59bc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b59bc:	4b0a      	ldr	r3, [pc, #40]	; (b59e8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b59be:	b510      	push	{r4, lr}
   b59c0:	4604      	mov	r4, r0
   b59c2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b59c4:	f006 fbd2 	bl	bc16c <_ZN5spark10LogManager8instanceEv>
   b59c8:	4621      	mov	r1, r4
   b59ca:	f006 fdd6 	bl	bc57a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b59ce:	f008 f9e1 	bl	bdd94 <_Z16_fetch_usbserialv>
   b59d2:	f008 f9d1 	bl	bdd78 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b59d6:	4620      	mov	r0, r4
   b59d8:	4b04      	ldr	r3, [pc, #16]	; (b59ec <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b59da:	f840 3b04 	str.w	r3, [r0], #4
   b59de:	f006 fc67 	bl	bc2b0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b59e2:	4620      	mov	r0, r4
   b59e4:	bd10      	pop	{r4, pc}
   b59e6:	bf00      	nop
   b59e8:	000bfb04 	.word	0x000bfb04
   b59ec:	000bfaec 	.word	0x000bfaec

000b59f0 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b59f0:	b510      	push	{r4, lr}
   b59f2:	4604      	mov	r4, r0
    }
   b59f4:	f7ff ffe2 	bl	b59bc <_ZN5spark16SerialLogHandlerD1Ev>
   b59f8:	4620      	mov	r0, r4
   b59fa:	2124      	movs	r1, #36	; 0x24
   b59fc:	f7fe fb4f 	bl	b409e <_ZdlPvj>
   b5a00:	4620      	mov	r0, r4
   b5a02:	bd10      	pop	{r4, pc}

000b5a04 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b5a04:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b5a06:	2301      	movs	r3, #1
   b5a08:	2208      	movs	r2, #8
   b5a0a:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b5a0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5a12:	2300      	movs	r3, #0
   b5a14:	4341      	muls	r1, r0
   b5a16:	466a      	mov	r2, sp
   b5a18:	4618      	mov	r0, r3
   b5a1a:	f005 f951 	bl	bacc0 <spark_set_connection_property>
    }
   b5a1e:	b003      	add	sp, #12
   b5a20:	f85d fb04 	ldr.w	pc, [sp], #4

000b5a24 <_Z18particleInitializev>:
 * @brief Initializes the Particle functions and variables
 * 
 * @details If new particles of functions are defined, they need to be initialized here
 * 
 */
void particleInitialize() {
   b5a24:	b510      	push	{r4, lr}
   b5a26:	b08c      	sub	sp, #48	; 0x30
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5a28:	4b36      	ldr	r3, [pc, #216]	; (b5b04 <_Z18particleInitializev+0xe0>)
   b5a2a:	9304      	str	r3, [sp, #16]
   b5a2c:	4b36      	ldr	r3, [pc, #216]	; (b5b08 <_Z18particleInitializev+0xe4>)
   b5a2e:	9305      	str	r3, [sp, #20]
   b5a30:	4b36      	ldr	r3, [pc, #216]	; (b5b0c <_Z18particleInitializev+0xe8>)
   b5a32:	9306      	str	r3, [sp, #24]
   b5a34:	4b36      	ldr	r3, [pc, #216]	; (b5b10 <_Z18particleInitializev+0xec>)
   b5a36:	9307      	str	r3, [sp, #28]
   b5a38:	4b36      	ldr	r3, [pc, #216]	; (b5b14 <_Z18particleInitializev+0xf0>)
   b5a3a:	9308      	str	r3, [sp, #32]
   b5a3c:	4b36      	ldr	r3, [pc, #216]	; (b5b18 <_Z18particleInitializev+0xf4>)

  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b5a3e:	4937      	ldr	r1, [pc, #220]	; (b5b1c <_Z18particleInitializev+0xf8>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5a40:	9309      	str	r3, [sp, #36]	; 0x24
   b5a42:	2400      	movs	r4, #0
   b5a44:	4b36      	ldr	r3, [pc, #216]	; (b5b20 <_Z18particleInitializev+0xfc>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b5a46:	4837      	ldr	r0, [pc, #220]	; (b5b24 <_Z18particleInitializev+0x100>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5a48:	930a      	str	r3, [sp, #40]	; 0x28
   b5a4a:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b5a4c:	f7fe fb46 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  Particle.variable("Low Power Mode",(sysStatus.get_lowPowerMode()) ? "Yes" : "No");
   b5a50:	f7ff fcc4 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5a54:	f7ff fe70 	bl	b5738 <_ZNK13sysStatusData16get_lowPowerModeEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5a58:	4a33      	ldr	r2, [pc, #204]	; (b5b28 <_Z18particleInitializev+0x104>)
   b5a5a:	4934      	ldr	r1, [pc, #208]	; (b5b2c <_Z18particleInitializev+0x108>)
   b5a5c:	42a0      	cmp	r0, r4
   b5a5e:	bf18      	it	ne
   b5a60:	4611      	movne	r1, r2
   b5a62:	4833      	ldr	r0, [pc, #204]	; (b5b30 <_Z18particleInitializev+0x10c>)
   b5a64:	f7ff ffa6 	bl	b59b4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5a68:	4932      	ldr	r1, [pc, #200]	; (b5b34 <_Z18particleInitializev+0x110>)
   b5a6a:	4833      	ldr	r0, [pc, #204]	; (b5b38 <_Z18particleInitializev+0x114>)
   b5a6c:	f7ff ffa2 	bl	b59b4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5a70:	4932      	ldr	r1, [pc, #200]	; (b5b3c <_Z18particleInitializev+0x118>)
   b5a72:	4833      	ldr	r0, [pc, #204]	; (b5b40 <_Z18particleInitializev+0x11c>)
   b5a74:	f7ff ff9e 	bl	b59b4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
  Particle.variable("Release",currentPointRelease);   
  Particle.variable("Signal", signalStr);
  Particle.variable("stateOfChg", current.get_stateOfCharge());
   b5a78:	f7ff fd00 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b5a7c:	f7ff fd18 	bl	b54b0 <_ZNK17currentStatusData17get_stateOfChargeEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5a80:	4623      	mov	r3, r4
   b5a82:	2209      	movs	r2, #9
   b5a84:	4669      	mov	r1, sp
   b5a86:	482f      	ldr	r0, [pc, #188]	; (b5b44 <_Z18particleInitializev+0x120>)
   b5a88:	ed8d 0b00 	vstr	d0, [sp]
   b5a8c:	f005 f8d8 	bl	bac40 <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.get_batteryState()]);
   b5a90:	f7ff fcf4 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b5a94:	f7ff fdf8 	bl	b5688 <_ZNK17currentStatusData16get_batteryStateEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5a98:	ab0c      	add	r3, sp, #48	; 0x30
   b5a9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b5a9e:	f850 1c20 	ldr.w	r1, [r0, #-32]
   b5aa2:	4829      	ldr	r0, [pc, #164]	; (b5b48 <_Z18particleInitializev+0x124>)
   b5aa4:	f7ff ff86 	bl	b59b4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        extra.size = sizeof(extra);
   b5aa8:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b5aaa:	e9cd 4400 	strd	r4, r4, [sp]
        extra.size = sizeof(extra);
   b5aae:	f8ad 3000 	strh.w	r3, [sp]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5ab2:	4b26      	ldr	r3, [pc, #152]	; (b5b4c <_Z18particleInitializev+0x128>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b5ab4:	4926      	ldr	r1, [pc, #152]	; (b5b50 <_Z18particleInitializev+0x12c>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5ab6:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b5ab8:	2204      	movs	r2, #4
   b5aba:	466b      	mov	r3, sp
   b5abc:	4825      	ldr	r0, [pc, #148]	; (b5b54 <_Z18particleInitializev+0x130>)
   b5abe:	f005 f8bf 	bl	bac40 <spark_variable>
  Particle.variable("Reporting Frequency", reportFrequency);
  Particle.variable("SIM Card", (sysStatus.get_verizonSIM()) ? "Verizon" : "Particle");
   b5ac2:	f7ff fc8b 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5ac6:	f7ff fe3c 	bl	b5742 <_ZNK13sysStatusData14get_verizonSIMEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5aca:	4a23      	ldr	r2, [pc, #140]	; (b5b58 <_Z18particleInitializev+0x134>)
   b5acc:	4923      	ldr	r1, [pc, #140]	; (b5b5c <_Z18particleInitializev+0x138>)
   b5ace:	42a0      	cmp	r0, r4
   b5ad0:	bf18      	it	ne
   b5ad2:	4611      	movne	r1, r2
   b5ad4:	4822      	ldr	r0, [pc, #136]	; (b5b60 <_Z18particleInitializev+0x13c>)
   b5ad6:	f7ff ff6d 	bl	b59b4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b5ada:	4a22      	ldr	r2, [pc, #136]	; (b5b64 <_Z18particleInitializev+0x140>)
   b5adc:	4922      	ldr	r1, [pc, #136]	; (b5b68 <_Z18particleInitializev+0x144>)
   b5ade:	4823      	ldr	r0, [pc, #140]	; (b5b6c <_Z18particleInitializev+0x148>)
   b5ae0:	f005 fba3 	bl	bb22a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5ae4:	4a22      	ldr	r2, [pc, #136]	; (b5b70 <_Z18particleInitializev+0x14c>)
   b5ae6:	4923      	ldr	r1, [pc, #140]	; (b5b74 <_Z18particleInitializev+0x150>)
   b5ae8:	4820      	ldr	r0, [pc, #128]	; (b5b6c <_Z18particleInitializev+0x148>)
   b5aea:	f005 fb9e 	bl	bb22a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5aee:	4a1c      	ldr	r2, [pc, #112]	; (b5b60 <_Z18particleInitializev+0x13c>)
   b5af0:	4921      	ldr	r1, [pc, #132]	; (b5b78 <_Z18particleInitializev+0x154>)
   b5af2:	481e      	ldr	r0, [pc, #120]	; (b5b6c <_Z18particleInitializev+0x148>)
   b5af4:	f005 fb99 	bl	bb22a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  */

  takeMeasurements();                               // Initialize sensor values

  // makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
}
   b5af8:	b00c      	add	sp, #48	; 0x30
   b5afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  takeMeasurements();                               // Initialize sensor values
   b5afe:	f000 bba3 	b.w	b6248 <_Z16takeMeasurementsv>
   b5b02:	bf00      	nop
   b5b04:	000bf858 	.word	0x000bf858
   b5b08:	000bf860 	.word	0x000bf860
   b5b0c:	000bf864 	.word	0x000bf864
   b5b10:	000bf86d 	.word	0x000bf86d
   b5b14:	000bf875 	.word	0x000bf875
   b5b18:	000bf881 	.word	0x000bf881
   b5b1c:	000bf893 	.word	0x000bf893
   b5b20:	000bf887 	.word	0x000bf887
   b5b24:	2003e658 	.word	0x2003e658
   b5b28:	000bf849 	.word	0x000bf849
   b5b2c:	000bf84d 	.word	0x000bf84d
   b5b30:	000bf8c1 	.word	0x000bf8c1
   b5b34:	2003dd70 	.word	0x2003dd70
   b5b38:	000bf8d0 	.word	0x000bf8d0
   b5b3c:	2003de3c 	.word	0x2003de3c
   b5b40:	000bf8d8 	.word	0x000bf8d8
   b5b44:	000bf8df 	.word	0x000bf8df
   b5b48:	000bf8ea 	.word	0x000bf8ea
   b5b4c:	000b597d 	.word	0x000b597d
   b5b50:	000b5951 	.word	0x000b5951
   b5b54:	000bf8f9 	.word	0x000bf8f9
   b5b58:	000bf850 	.word	0x000bf850
   b5b5c:	000bfa5e 	.word	0x000bfa5e
   b5b60:	000bf90d 	.word	0x000bf90d
   b5b64:	000bf916 	.word	0x000bf916
   b5b68:	000b5c41 	.word	0x000b5c41
   b5b6c:	000bb1ff 	.word	0x000bb1ff
   b5b70:	000bf924 	.word	0x000bf924
   b5b74:	000b5ba9 	.word	0x000b5ba9
   b5b78:	000b5d15 	.word	0x000b5d15

000b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5b7c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5b7e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5b80:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5b82:	b17c      	cbz	r4, b5ba4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5b84:	6863      	ldr	r3, [r4, #4]
   b5b86:	3b01      	subs	r3, #1
   b5b88:	6063      	str	r3, [r4, #4]
   b5b8a:	b95b      	cbnz	r3, b5ba4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5b8c:	6823      	ldr	r3, [r4, #0]
   b5b8e:	4620      	mov	r0, r4
   b5b90:	689b      	ldr	r3, [r3, #8]
   b5b92:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5b94:	68a3      	ldr	r3, [r4, #8]
   b5b96:	3b01      	subs	r3, #1
   b5b98:	60a3      	str	r3, [r4, #8]
   b5b9a:	b91b      	cbnz	r3, b5ba4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5b9c:	6823      	ldr	r3, [r4, #0]
   b5b9e:	4620      	mov	r0, r4
   b5ba0:	68db      	ldr	r3, [r3, #12]
   b5ba2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5ba4:	4628      	mov	r0, r5
   b5ba6:	bd38      	pop	{r3, r4, r5, pc}

000b5ba8 <_Z12setFrequency6String>:
 * sets an interim value for reporting frequency which takes effect once sent to a new node.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setFrequency(String command)
{
   b5ba8:	b530      	push	{r4, r5, lr}
   b5baa:	b0c7      	sub	sp, #284	; 0x11c
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b5bac:	6800      	ldr	r0, [r0, #0]
   b5bae:	220a      	movs	r2, #10
   b5bb0:	a903      	add	r1, sp, #12
   b5bb2:	f009 f9f9 	bl	befa8 <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b5bb6:	2878      	cmp	r0, #120	; 0x78
   b5bb8:	d831      	bhi.n	b5c1e <_Z12setFrequency6String+0x76>
  updatedFrequencyMins = tempTime;
   b5bba:	4d1a      	ldr	r5, [pc, #104]	; (b5c24 <_Z12setFrequency6String+0x7c>)
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b5bbc:	280b      	cmp	r0, #11
  updatedFrequencyMins = tempTime;
   b5bbe:	8028      	strh	r0, [r5, #0]
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b5bc0:	dc0d      	bgt.n	b5bde <_Z12setFrequency6String+0x36>
   b5bc2:	f7ff fc0b 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5bc6:	f7ff fdb7 	bl	b5738 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5bca:	b140      	cbz	r0, b5bde <_Z12setFrequency6String+0x36>
    Log.info("Short reporting frequency over-rides low power");
   b5bcc:	4916      	ldr	r1, [pc, #88]	; (b5c28 <_Z12setFrequency6String+0x80>)
   b5bce:	4817      	ldr	r0, [pc, #92]	; (b5c2c <_Z12setFrequency6String+0x84>)
   b5bd0:	f7fe fa84 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_lowPowerMode(false);
   b5bd4:	f7ff fc02 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5bd8:	2100      	movs	r1, #0
   b5bda:	f7ff fdd5 	bl	b5788 <_ZN13sysStatusData16set_lowPowerModeEb>
  }
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b5bde:	4b14      	ldr	r3, [pc, #80]	; (b5c30 <_Z12setFrequency6String+0x88>)
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b5be0:	4a14      	ldr	r2, [pc, #80]	; (b5c34 <_Z12setFrequency6String+0x8c>)
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b5be2:	2401      	movs	r4, #1
   b5be4:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b5be6:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5bea:	882b      	ldrh	r3, [r5, #0]
   b5bec:	a806      	add	r0, sp, #24
   b5bee:	f005 f907 	bl	bae00 <snprintf>
  Log.info(data);
   b5bf2:	480e      	ldr	r0, [pc, #56]	; (b5c2c <_Z12setFrequency6String+0x84>)
   b5bf4:	a906      	add	r1, sp, #24
   b5bf6:	f7fe fa71 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5bfa:	f005 f841 	bl	bac80 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b5bfe:	b160      	cbz	r0, b5c1a <_Z12setFrequency6String+0x72>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5c00:	4b0d      	ldr	r3, [pc, #52]	; (b5c38 <_Z12setFrequency6String+0x90>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5c02:	490e      	ldr	r1, [pc, #56]	; (b5c3c <_Z12setFrequency6String+0x94>)
   b5c04:	781b      	ldrb	r3, [r3, #0]
   b5c06:	f88d 3000 	strb.w	r3, [sp]
   b5c0a:	a804      	add	r0, sp, #16
   b5c0c:	233c      	movs	r3, #60	; 0x3c
   b5c0e:	aa06      	add	r2, sp, #24
   b5c10:	f005 fc1c 	bl	bb44c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5c14:	a805      	add	r0, sp, #20
   b5c16:	f7ff ffb1 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b5c1a:	4620      	mov	r0, r4
   b5c1c:	e000      	b.n	b5c20 <_Z12setFrequency6String+0x78>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b5c1e:	2000      	movs	r0, #0
}
   b5c20:	b047      	add	sp, #284	; 0x11c
   b5c22:	bd30      	pop	{r4, r5, pc}
   b5c24:	2003de0c 	.word	0x2003de0c
   b5c28:	000bf932 	.word	0x000bf932
   b5c2c:	2003e658 	.word	0x2003e658
   b5c30:	2003e409 	.word	0x2003e409
   b5c34:	000bf961 	.word	0x000bf961
   b5c38:	2003e408 	.word	0x2003e408
   b5c3c:	000bf9a1 	.word	0x000bf9a1

000b5c40 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   b5c40:	b510      	push	{r4, lr}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5c42:	492a      	ldr	r1, [pc, #168]	; (b5cec <_Z15setLowPowerMode6String+0xac>)
   b5c44:	b094      	sub	sp, #80	; 0x50
   b5c46:	4604      	mov	r4, r0
   b5c48:	f007 fd22 	bl	bd690 <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b5c4c:	b158      	cbz	r0, b5c66 <_Z15setLowPowerMode6String+0x26>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5c4e:	4620      	mov	r0, r4
   b5c50:	4926      	ldr	r1, [pc, #152]	; (b5cec <_Z15setLowPowerMode6String+0xac>)
   b5c52:	f007 fd1d 	bl	bd690 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   b5c56:	4604      	mov	r4, r0
   b5c58:	b968      	cbnz	r0, b5c76 <_Z15setLowPowerMode6String+0x36>
      sysStatus.set_frequencyMinutes(12);
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.set_lowPowerMode(false);
   b5c5a:	f7ff fbbf 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5c5e:	4621      	mov	r1, r4
   b5c60:	f7ff fd92 	bl	b5788 <_ZN13sysStatusData16set_lowPowerModeEb>
   b5c64:	e01e      	b.n	b5ca4 <_Z15setLowPowerMode6String+0x64>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5c66:	4922      	ldr	r1, [pc, #136]	; (b5cf0 <_Z15setLowPowerMode6String+0xb0>)
   b5c68:	4620      	mov	r0, r4
   b5c6a:	f007 fd11 	bl	bd690 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b5c6e:	2800      	cmp	r0, #0
   b5c70:	d1ed      	bne.n	b5c4e <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   b5c72:	b014      	add	sp, #80	; 0x50
   b5c74:	bd10      	pop	{r4, pc}
    sysStatus.set_lowPowerMode(true);
   b5c76:	f7ff fbb1 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5c7a:	2101      	movs	r1, #1
   b5c7c:	f7ff fd84 	bl	b5788 <_ZN13sysStatusData16set_lowPowerModeEb>
    if (sysStatus.get_frequencyMinutes() < 12 ) {                          // Need to increase reporting frequency to at least 12 mins for low power
   b5c80:	f7ff fbac 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5c84:	f7ff fc73 	bl	b556e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5c88:	280b      	cmp	r0, #11
   b5c8a:	d80b      	bhi.n	b5ca4 <_Z15setLowPowerMode6String+0x64>
      Log.info("Increasing reporting frequency to 12 minutes");
   b5c8c:	4919      	ldr	r1, [pc, #100]	; (b5cf4 <_Z15setLowPowerMode6String+0xb4>)
   b5c8e:	481a      	ldr	r0, [pc, #104]	; (b5cf8 <_Z15setLowPowerMode6String+0xb8>)
   b5c90:	f7fe fa24 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.set_frequencyMinutes(12);
   b5c94:	f7ff fba2 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5c98:	210c      	movs	r1, #12
   b5c9a:	f7ff fcb0 	bl	b55fe <_ZN13sysStatusData20set_frequencyMinutesEt>
      frequencyUpdated = true;
   b5c9e:	4b17      	ldr	r3, [pc, #92]	; (b5cfc <_Z15setLowPowerMode6String+0xbc>)
   b5ca0:	2201      	movs	r2, #1
   b5ca2:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.get_lowPowerMode()) ? "yes" : "no");
   b5ca4:	f7ff fb9a 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5ca8:	f7ff fd46 	bl	b5738 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5cac:	4914      	ldr	r1, [pc, #80]	; (b5d00 <_Z15setLowPowerMode6String+0xc0>)
   b5cae:	4b15      	ldr	r3, [pc, #84]	; (b5d04 <_Z15setLowPowerMode6String+0xc4>)
   b5cb0:	4a15      	ldr	r2, [pc, #84]	; (b5d08 <_Z15setLowPowerMode6String+0xc8>)
   b5cb2:	2800      	cmp	r0, #0
   b5cb4:	bf18      	it	ne
   b5cb6:	460b      	movne	r3, r1
   b5cb8:	2140      	movs	r1, #64	; 0x40
   b5cba:	a804      	add	r0, sp, #16
   b5cbc:	f005 f8a0 	bl	bae00 <snprintf>
  Log.info(data);
   b5cc0:	480d      	ldr	r0, [pc, #52]	; (b5cf8 <_Z15setLowPowerMode6String+0xb8>)
   b5cc2:	a904      	add	r1, sp, #16
   b5cc4:	f7fe fa0a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5cc8:	f004 ffda 	bl	bac80 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b5ccc:	b160      	cbz	r0, b5ce8 <_Z15setLowPowerMode6String+0xa8>
   b5cce:	4b0f      	ldr	r3, [pc, #60]	; (b5d0c <_Z15setLowPowerMode6String+0xcc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5cd0:	490f      	ldr	r1, [pc, #60]	; (b5d10 <_Z15setLowPowerMode6String+0xd0>)
   b5cd2:	781b      	ldrb	r3, [r3, #0]
   b5cd4:	f88d 3000 	strb.w	r3, [sp]
   b5cd8:	a802      	add	r0, sp, #8
   b5cda:	233c      	movs	r3, #60	; 0x3c
   b5cdc:	aa04      	add	r2, sp, #16
   b5cde:	f005 fbb5 	bl	bb44c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5ce2:	a803      	add	r0, sp, #12
   b5ce4:	f7ff ff4a 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b5ce8:	2001      	movs	r0, #1
   b5cea:	e7c2      	b.n	b5c72 <_Z15setLowPowerMode6String+0x32>
   b5cec:	000bfb50 	.word	0x000bfb50
   b5cf0:	000bfe2c 	.word	0x000bfe2c
   b5cf4:	000bf9ad 	.word	0x000bf9ad
   b5cf8:	2003e658 	.word	0x2003e658
   b5cfc:	2003e409 	.word	0x2003e409
   b5d00:	000bf9a6 	.word	0x000bf9a6
   b5d04:	000bf9aa 	.word	0x000bf9aa
   b5d08:	000bf9da 	.word	0x000bf9da
   b5d0c:	2003e408 	.word	0x2003e408
   b5d10:	000bf8cb 	.word	0x000bf8cb

000b5d14 <_Z13setVerizonSIM6String>:
 * 
 * @param command  - 1 for Verizon and 0 for Particle (default)
 * @return int 
 */
int setVerizonSIM(String command)                                   // If we are using a Verizon SIM, we will need to execute "keepAlive" calls in the main loop when not in low power mode
{
   b5d14:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5d16:	491e      	ldr	r1, [pc, #120]	; (b5d90 <_Z13setVerizonSIM6String+0x7c>)
   b5d18:	b085      	sub	sp, #20
   b5d1a:	4605      	mov	r5, r0
   b5d1c:	f007 fcb8 	bl	bd690 <_ZNK6String6equalsEPKc>
  if (command == "1")
   b5d20:	4604      	mov	r4, r0
   b5d22:	b1d8      	cbz	r0, b5d5c <_Z13setVerizonSIM6String+0x48>
  {
    sysStatus.set_verizonSIM(true);
   b5d24:	f7ff fb5a 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5d28:	2101      	movs	r1, #1
   b5d2a:	f7ff fd39 	bl	b57a0 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(60);                                         // send a ping every minute
   b5d2e:	203c      	movs	r0, #60	; 0x3c
   b5d30:	f7ff fe68 	bl	b5a04 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5d34:	f004 ffa4 	bl	bac80 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   b5d38:	b910      	cbnz	r0, b5d40 <_Z13setVerizonSIM6String+0x2c>
  else if (command == "0")
  {
    sysStatus.set_verizonSIM(false);
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
    return 1;
   b5d3a:	2001      	movs	r0, #1
  }
  else return 0;
}
   b5d3c:	b005      	add	sp, #20
   b5d3e:	bd30      	pop	{r4, r5, pc}
   b5d40:	4b14      	ldr	r3, [pc, #80]	; (b5d94 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5d42:	4a15      	ldr	r2, [pc, #84]	; (b5d98 <_Z13setVerizonSIM6String+0x84>)
   b5d44:	781b      	ldrb	r3, [r3, #0]
   b5d46:	f88d 3000 	strb.w	r3, [sp]
   b5d4a:	233c      	movs	r3, #60	; 0x3c
   b5d4c:	a802      	add	r0, sp, #8
   b5d4e:	4913      	ldr	r1, [pc, #76]	; (b5d9c <_Z13setVerizonSIM6String+0x88>)
   b5d50:	f005 fb7c 	bl	bb44c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5d54:	a803      	add	r0, sp, #12
   b5d56:	f7ff ff11 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d5a:	e7ee      	b.n	b5d3a <_Z13setVerizonSIM6String+0x26>
   b5d5c:	4910      	ldr	r1, [pc, #64]	; (b5da0 <_Z13setVerizonSIM6String+0x8c>)
   b5d5e:	4628      	mov	r0, r5
   b5d60:	f007 fc96 	bl	bd690 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b5d64:	2800      	cmp	r0, #0
   b5d66:	d0e9      	beq.n	b5d3c <_Z13setVerizonSIM6String+0x28>
    sysStatus.set_verizonSIM(false);
   b5d68:	f7ff fb38 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   b5d6c:	4621      	mov	r1, r4
   b5d6e:	f7ff fd17 	bl	b57a0 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b5d72:	f240 5064 	movw	r0, #1380	; 0x564
   b5d76:	f7ff fe45 	bl	b5a04 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5d7a:	f004 ff81 	bl	bac80 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   b5d7e:	2800      	cmp	r0, #0
   b5d80:	d0db      	beq.n	b5d3a <_Z13setVerizonSIM6String+0x26>
   b5d82:	4b04      	ldr	r3, [pc, #16]	; (b5d94 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5d84:	4a07      	ldr	r2, [pc, #28]	; (b5da4 <_Z13setVerizonSIM6String+0x90>)
   b5d86:	781b      	ldrb	r3, [r3, #0]
   b5d88:	f88d 3000 	strb.w	r3, [sp]
   b5d8c:	233c      	movs	r3, #60	; 0x3c
   b5d8e:	e7dd      	b.n	b5d4c <_Z13setVerizonSIM6String+0x38>
   b5d90:	000bfb50 	.word	0x000bfb50
   b5d94:	2003e408 	.word	0x2003e408
   b5d98:	000bf9f4 	.word	0x000bf9f4
   b5d9c:	000bf8cb 	.word	0x000bf8cb
   b5da0:	000bfe2c 	.word	0x000bfe2c
   b5da4:	000bfa07 	.word	0x000bfa07

000b5da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5da8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5daa:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5dae:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5db0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5db2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5db6:	42ae      	cmp	r6, r5
   b5db8:	d004      	beq.n	b5dc4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5dba:	4628      	mov	r0, r5
   b5dbc:	f007 fb64 	bl	bd488 <_ZN6StringD1Ev>
   b5dc0:	3514      	adds	r5, #20
   b5dc2:	e7f8      	b.n	b5db6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5dc4:	6820      	ldr	r0, [r4, #0]
   b5dc6:	f004 fffb 	bl	badc0 <free>
    AllocatorT::free(data_);
}
   b5dca:	4620      	mov	r0, r4
   b5dcc:	bd70      	pop	{r4, r5, r6, pc}

000b5dce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5dce:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5dd2:	4604      	mov	r4, r0
   b5dd4:	460d      	mov	r5, r1
   b5dd6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5dd8:	d916      	bls.n	b5e08 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5dda:	4290      	cmp	r0, r2
   b5ddc:	d215      	bcs.n	b5e0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5dde:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5de2:	1a75      	subs	r5, r6, r1
   b5de4:	f1a1 0714 	sub.w	r7, r1, #20
   b5de8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5dea:	42b7      	cmp	r7, r6
   b5dec:	d01c      	beq.n	b5e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5dee:	b12c      	cbz	r4, b5dfc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5df0:	4631      	mov	r1, r6
   b5df2:	4620      	mov	r0, r4
   b5df4:	f007 fbc4 	bl	bd580 <_ZN6StringC1EOS_>
   b5df8:	7c33      	ldrb	r3, [r6, #16]
   b5dfa:	7423      	strb	r3, [r4, #16]
   b5dfc:	4630      	mov	r0, r6
   b5dfe:	f007 fb43 	bl	bd488 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5e02:	3e14      	subs	r6, #20
   b5e04:	3c14      	subs	r4, #20
   b5e06:	e7f0      	b.n	b5dea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5e08:	d00e      	beq.n	b5e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5e0a:	42b5      	cmp	r5, r6
   b5e0c:	d00c      	beq.n	b5e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5e0e:	b12c      	cbz	r4, b5e1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5e10:	4629      	mov	r1, r5
   b5e12:	4620      	mov	r0, r4
   b5e14:	f007 fbb4 	bl	bd580 <_ZN6StringC1EOS_>
   b5e18:	7c2b      	ldrb	r3, [r5, #16]
   b5e1a:	7423      	strb	r3, [r4, #16]
   b5e1c:	4628      	mov	r0, r5
   b5e1e:	f007 fb33 	bl	bd488 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5e22:	3514      	adds	r5, #20
   b5e24:	3414      	adds	r4, #20
   b5e26:	e7f0      	b.n	b5e0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5e2e:	2300      	movs	r3, #0
   b5e30:	e9c0 3300 	strd	r3, r3, [r0]
   b5e34:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5e36:	684f      	ldr	r7, [r1, #4]
   b5e38:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5e3a:	4604      	mov	r4, r0
   b5e3c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5e3e:	dd23      	ble.n	b5e88 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5e40:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5e44:	fb08 f007 	mul.w	r0, r8, r7
   b5e48:	f004 ffb2 	bl	badb0 <malloc>
            if (!d) {
   b5e4c:	4605      	mov	r5, r0
   b5e4e:	b1d8      	cbz	r0, b5e88 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5e50:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5e54:	fb08 1202 	mla	r2, r8, r2, r1
   b5e58:	f7ff ffb9 	bl	b5dce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5e5c:	6820      	ldr	r0, [r4, #0]
   b5e5e:	f004 ffaf 	bl	badc0 <free>
        data_ = d;
   b5e62:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5e64:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5e66:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5e6a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5e6e:	45b8      	cmp	r8, r7
   b5e70:	d008      	beq.n	b5e84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5e72:	4639      	mov	r1, r7
   b5e74:	4628      	mov	r0, r5
   b5e76:	f007 fb9d 	bl	bd5b4 <_ZN6StringC1ERKS_>
   b5e7a:	7c3b      	ldrb	r3, [r7, #16]
   b5e7c:	742b      	strb	r3, [r5, #16]
   b5e7e:	3714      	adds	r7, #20
   b5e80:	3514      	adds	r5, #20
   b5e82:	e7f4      	b.n	b5e6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5e84:	6873      	ldr	r3, [r6, #4]
   b5e86:	6063      	str	r3, [r4, #4]
}
   b5e88:	4620      	mov	r0, r4
   b5e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5e90 <_GLOBAL__sub_I_SystemMode>:
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }

  else return 0;
   b5e90:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b5e92:	4b27      	ldr	r3, [pc, #156]	; (b5f30 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b5e94:	4a27      	ldr	r2, [pc, #156]	; (b5f34 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b5e96:	2501      	movs	r5, #1
   b5e98:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5e9a:	4b27      	ldr	r3, [pc, #156]	; (b5f38 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b5e9c:	2400      	movs	r4, #0
   b5e9e:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b5ea0:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5ea2:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5ea6:	2002      	movs	r0, #2
   b5ea8:	f004 fe58 	bl	bab5c <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b5eac:	4621      	mov	r1, r4
   b5eae:	4628      	mov	r0, r5
   b5eb0:	f004 fe6c 	bl	bab8c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b5eb4:	4629      	mov	r1, r5
   b5eb6:	2004      	movs	r0, #4
   b5eb8:	f004 fbce 	bl	ba658 <HAL_Feature_Set>
        capacity_(0) {
   b5ebc:	e9cd 4400 	strd	r4, r4, [sp]
   b5ec0:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b5ec2:	f007 ff67 	bl	bdd94 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b5ec6:	4c1d      	ldr	r4, [pc, #116]	; (b5f3c <_GLOBAL__sub_I_SystemMode+0xac>)
   b5ec8:	4605      	mov	r5, r0
   b5eca:	4669      	mov	r1, sp
   b5ecc:	a803      	add	r0, sp, #12
   b5ece:	f7ff ffac 	bl	b5e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5ed2:	4626      	mov	r6, r4
        stream_(&stream) {
   b5ed4:	a903      	add	r1, sp, #12
   b5ed6:	a806      	add	r0, sp, #24
   b5ed8:	f7ff ffa7 	bl	b5e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5edc:	4b18      	ldr	r3, [pc, #96]	; (b5f40 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b5ede:	f846 3b04 	str.w	r3, [r6], #4
   b5ee2:	a906      	add	r1, sp, #24
   b5ee4:	a809      	add	r0, sp, #36	; 0x24
   b5ee6:	f7ff ffa0 	bl	b5e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5eea:	aa09      	add	r2, sp, #36	; 0x24
   b5eec:	211e      	movs	r1, #30
   b5eee:	4630      	mov	r0, r6
   b5ef0:	f006 fc26 	bl	bc740 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5ef4:	a809      	add	r0, sp, #36	; 0x24
   b5ef6:	f7ff ff57 	bl	b5da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5efa:	a806      	add	r0, sp, #24
   b5efc:	f7ff ff54 	bl	b5da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5f00:	4b10      	ldr	r3, [pc, #64]	; (b5f44 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b5f02:	6023      	str	r3, [r4, #0]
   b5f04:	6225      	str	r5, [r4, #32]
   b5f06:	a803      	add	r0, sp, #12
   b5f08:	f7ff ff4e 	bl	b5da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5f0c:	4b0e      	ldr	r3, [pc, #56]	; (b5f48 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b5f0e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5f10:	f007 ff40 	bl	bdd94 <_Z16_fetch_usbserialv>
   b5f14:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5f18:	f007 ff2a 	bl	bdd70 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5f1c:	f006 f926 	bl	bc16c <_ZN5spark10LogManager8instanceEv>
   b5f20:	4621      	mov	r1, r4
   b5f22:	f006 fae3 	bl	bc4ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b5f26:	4668      	mov	r0, sp
   b5f28:	f7ff ff3e 	bl	b5da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5f2c:	b00c      	add	sp, #48	; 0x30
   b5f2e:	bd70      	pop	{r4, r5, r6, pc}
   b5f30:	2003e408 	.word	0x2003e408
   b5f34:	ffff0000 	.word	0xffff0000
   b5f38:	2003e3fc 	.word	0x2003e3fc
   b5f3c:	2003e40c 	.word	0x2003e40c
   b5f40:	000bfaec 	.word	0x000bfaec
   b5f44:	000c0714 	.word	0x000c0714
   b5f48:	000bfb04 	.word	0x000bfb04

000b5f4c <_Z22disconnectFromParticlev>:
{
   b5f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5f50:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b5f52:	f007 fe38 	bl	bdbc6 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b5f56:	4943      	ldr	r1, [pc, #268]	; (b6064 <_Z22disconnectFromParticlev+0x118>)
  time_t startTime = Time.now();
   b5f58:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b5f5a:	4843      	ldr	r0, [pc, #268]	; (b6068 <_Z22disconnectFromParticlev+0x11c>)
   b5f5c:	f7fe f8be 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b5f60:	4b42      	ldr	r3, [pc, #264]	; (b606c <_Z22disconnectFromParticlev+0x120>)
   b5f62:	8818      	ldrh	r0, [r3, #0]
   b5f64:	f005 fd44 	bl	bb9f0 <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b5f68:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b5f6a:	a801      	add	r0, sp, #4
   b5f6c:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b5f70:	f8ad 400c 	strh.w	r4, [sp, #12]
   b5f74:	f005 f96a 	bl	bb24c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b5f78:	4620      	mov	r0, r4
   b5f7a:	f004 fb9d 	bl	ba6b8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5f7e:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b5f82:	4604      	mov	r4, r0
   b5f84:	2000      	movs	r0, #0
   b5f86:	f004 fb97 	bl	ba6b8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5f8a:	1b03      	subs	r3, r0, r4
   b5f8c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5f90:	42b3      	cmp	r3, r6
   b5f92:	f171 0300 	sbcs.w	r3, r1, #0
   b5f96:	d205      	bcs.n	b5fa4 <_Z22disconnectFromParticlev+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5f98:	f004 fe72 	bl	bac80 <spark_cloud_flag_connected>
   b5f9c:	b110      	cbz	r0, b5fa4 <_Z22disconnectFromParticlev+0x58>
            spark_process();
   b5f9e:	f004 fe5f 	bl	bac60 <spark_process>
        while (_while() && !_condition()) {
   b5fa2:	e7ef      	b.n	b5f84 <_Z22disconnectFromParticlev+0x38>
   b5fa4:	f004 fe6c 	bl	bac80 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5fa8:	f004 fb76 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5fac:	4f30      	ldr	r7, [pc, #192]	; (b6070 <_Z22disconnectFromParticlev+0x124>)
   b5fae:	6038      	str	r0, [r7, #0]
    		spark_process();
   b5fb0:	f004 fe56 	bl	bac60 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5fb4:	f004 fe64 	bl	bac80 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b5fb8:	4604      	mov	r4, r0
   b5fba:	b140      	cbz	r0, b5fce <_Z22disconnectFromParticlev+0x82>
    Log.info("Failed to disconnect from Particle");
   b5fbc:	492d      	ldr	r1, [pc, #180]	; (b6074 <_Z22disconnectFromParticlev+0x128>)
   b5fbe:	482a      	ldr	r0, [pc, #168]	; (b6068 <_Z22disconnectFromParticlev+0x11c>)
   b5fc0:	f7fe f88c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b5fc4:	2400      	movs	r4, #0
}
   b5fc6:	4620      	mov	r0, r4
   b5fc8:	b005      	add	sp, #20
   b5fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b5fce:	f007 fdfa 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b5fd2:	4929      	ldr	r1, [pc, #164]	; (b6078 <_Z22disconnectFromParticlev+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b5fd4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b607c <_Z22disconnectFromParticlev+0x130>
   b5fd8:	1b42      	subs	r2, r0, r5
   b5fda:	4823      	ldr	r0, [pc, #140]	; (b6068 <_Z22disconnectFromParticlev+0x11c>)
   b5fdc:	f7fe f87e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b5fe0:	f007 fdf1 	bl	bdbc6 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5fe4:	4622      	mov	r2, r4
   b5fe6:	2102      	movs	r1, #2
   b5fe8:	4606      	mov	r6, r0
   b5fea:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b5fee:	f004 fe8f 	bl	bad10 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b5ff2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b5ff6:	4623      	mov	r3, r4
   b5ff8:	4622      	mov	r2, r4
   b5ffa:	4621      	mov	r1, r4
   b5ffc:	f004 fea0 	bl	bad40 <network_off>
        return hal_timer_millis(nullptr);
   b6000:	4620      	mov	r0, r4
   b6002:	f004 fb59 	bl	ba6b8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6006:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b600a:	4605      	mov	r5, r0
   b600c:	2000      	movs	r0, #0
   b600e:	f004 fb53 	bl	ba6b8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6012:	1b43      	subs	r3, r0, r5
   b6014:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6018:	454b      	cmp	r3, r9
   b601a:	f171 0300 	sbcs.w	r3, r1, #0
   b601e:	d206      	bcs.n	b602e <_Z22disconnectFromParticlev+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b6020:	4640      	mov	r0, r8
   b6022:	f006 feab 	bl	bcd7c <_ZN5spark12NetworkClass5isOffEv>
   b6026:	b910      	cbnz	r0, b602e <_Z22disconnectFromParticlev+0xe2>
            spark_process();
   b6028:	f004 fe1a 	bl	bac60 <spark_process>
        while (_while() && !_condition()) {
   b602c:	e7ee      	b.n	b600c <_Z22disconnectFromParticlev+0xc0>
   b602e:	4813      	ldr	r0, [pc, #76]	; (b607c <_Z22disconnectFromParticlev+0x130>)
   b6030:	f006 fea4 	bl	bcd7c <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b6034:	f004 fb30 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b6038:	6038      	str	r0, [r7, #0]
    		spark_process();
   b603a:	f004 fe11 	bl	bac60 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b603e:	480f      	ldr	r0, [pc, #60]	; (b607c <_Z22disconnectFromParticlev+0x130>)
   b6040:	f006 fe98 	bl	bcd74 <_ZN5spark12NetworkClass4isOnEv>
   b6044:	b120      	cbz	r0, b6050 <_Z22disconnectFromParticlev+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b6046:	490e      	ldr	r1, [pc, #56]	; (b6080 <_Z22disconnectFromParticlev+0x134>)
   b6048:	4807      	ldr	r0, [pc, #28]	; (b6068 <_Z22disconnectFromParticlev+0x11c>)
   b604a:	f7fe f847 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b604e:	e7ba      	b.n	b5fc6 <_Z22disconnectFromParticlev+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b6050:	f007 fdb9 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b6054:	490b      	ldr	r1, [pc, #44]	; (b6084 <_Z22disconnectFromParticlev+0x138>)
   b6056:	1b82      	subs	r2, r0, r6
   b6058:	4803      	ldr	r0, [pc, #12]	; (b6068 <_Z22disconnectFromParticlev+0x11c>)
   b605a:	f7fe f83f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b605e:	2401      	movs	r4, #1
   b6060:	e7b1      	b.n	b5fc6 <_Z22disconnectFromParticlev+0x7a>
   b6062:	bf00      	nop
   b6064:	000bfa1b 	.word	0x000bfa1b
   b6068:	2003e658 	.word	0x2003e658
   b606c:	000bf836 	.word	0x000bf836
   b6070:	2003e710 	.word	0x2003e710
   b6074:	000bfa44 	.word	0x000bfa44
   b6078:	000bfa67 	.word	0x000bfa67
   b607c:	2003e584 	.word	0x2003e584
   b6080:	000bfa90 	.word	0x000bfa90
   b6084:	000bfab6 	.word	0x000bfab6

000b6088 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b6088:	ee07 0a90 	vmov	s15, r0
   b608c:	ed9f 7a09 	vldr	s14, [pc, #36]	; b60b4 <_Z17tmp36TemperatureCi+0x2c>
   b6090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6094:	ee67 7a87 	vmul.f32	s15, s15, s14
   b6098:	ed9f 7a07 	vldr	s14, [pc, #28]	; b60b8 <_Z17tmp36TemperatureCi+0x30>
   b609c:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b60a0:	eddf 7a06 	vldr	s15, [pc, #24]	; b60bc <_Z17tmp36TemperatureCi+0x34>
   b60a4:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b60a8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b60ac:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b60b0:	4770      	bx	lr
   b60b2:	bf00      	nop
   b60b4:	454e4000 	.word	0x454e4000
   b60b8:	457ff000 	.word	0x457ff000
   b60bc:	43fa0000 	.word	0x43fa0000

000b60c0 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b60c0:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b60c2:	2101      	movs	r1, #1
   b60c4:	a801      	add	r0, sp, #4
   b60c6:	f006 feee 	bl	bcea6 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b60ca:	f7ff f9d7 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b60ce:	f7ff fad6 	bl	b567e <_ZNK17currentStatusData17get_internalTempCEv>
   b60d2:	f7ff f9d3 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b60d6:	f7ff fad2 	bl	b567e <_ZNK17currentStatusData17get_internalTempCEv>
   b60da:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b60dc:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b60de:	d90d      	bls.n	b60fc <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b60e0:	f006 ff74 	bl	bcfcc <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b60e4:	f7ff f9ca 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b60e8:	2101      	movs	r1, #1
   b60ea:	f7ff fb01 	bl	b56f0 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b60ee:	2400      	movs	r4, #0
  PMIC pmic(true);
   b60f0:	a801      	add	r0, sp, #4
   b60f2:	f006 fee7 	bl	bcec4 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b60f6:	4620      	mov	r0, r4
   b60f8:	b002      	add	sp, #8
   b60fa:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b60fc:	f006 ff4b 	bl	bcf96 <_ZN4PMIC14enableChargingEv>
    return true;
   b6100:	2401      	movs	r4, #1
   b6102:	e7f5      	b.n	b60f0 <_Z16isItSafeToChargev+0x30>

000b6104 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b6104:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6106:	4d19      	ldr	r5, [pc, #100]	; (b616c <_Z17getSignalStrengthv+0x68>)
   b6108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b610a:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b610c:	ac0c      	add	r4, sp, #48	; 0x30
   b610e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6114:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6118:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b611c:	4914      	ldr	r1, [pc, #80]	; (b6170 <_Z17getSignalStrengthv+0x6c>)
   b611e:	a804      	add	r0, sp, #16
   b6120:	f004 ff40 	bl	bafa4 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6124:	a804      	add	r0, sp, #16
   b6126:	f004 ff80 	bl	bb02a <_ZNK14CellularSignal19getAccessTechnologyEv>
   b612a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b612c:	a804      	add	r0, sp, #16
   b612e:	f004 ffb5 	bl	bb09c <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b6132:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b6134:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6138:	f004 ffe0 	bl	bb0fc <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b613c:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b613e:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6142:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b6146:	f008 f9b9 	bl	be4bc <__aeabi_f2d>
   b614a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b614e:	4628      	mov	r0, r5
   b6150:	f008 f9b4 	bl	be4bc <__aeabi_f2d>
   b6154:	e9cd 0100 	strd	r0, r1, [sp]
   b6158:	4a06      	ldr	r2, [pc, #24]	; (b6174 <_Z17getSignalStrengthv+0x70>)
   b615a:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b615e:	4806      	ldr	r0, [pc, #24]	; (b6178 <_Z17getSignalStrengthv+0x74>)
   b6160:	2140      	movs	r1, #64	; 0x40
   b6162:	f004 fe4d 	bl	bae00 <snprintf>
}
   b6166:	b017      	add	sp, #92	; 0x5c
   b6168:	bd30      	pop	{r4, r5, pc}
   b616a:	bf00      	nop
   b616c:	000bfb70 	.word	0x000bfb70
   b6170:	2003e584 	.word	0x2003e584
   b6174:	000bfb52 	.word	0x000bfb52
   b6178:	2003de3c 	.word	0x2003de3c

000b617c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b617c:	b530      	push	{r4, r5, lr}
   b617e:	b085      	sub	sp, #20
   b6180:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6182:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6184:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6186:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6188:	f004 fcd6 	bl	bab38 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b618c:	b990      	cbnz	r0, b61b4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
    return get(src, val);
   b618e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6190:	b10c      	cbz	r4, b6196 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6192:	6923      	ldr	r3, [r4, #16]
   b6194:	b923      	cbnz	r3, b61a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6196:	4a08      	ldr	r2, [pc, #32]	; (b61b8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6198:	4908      	ldr	r1, [pc, #32]	; (b61bc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b619a:	200a      	movs	r0, #10
   b619c:	f004 fca4 	bl	baae8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b61a0:	230c      	movs	r3, #12
   b61a2:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b61a6:	2304      	movs	r3, #4
   b61a8:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b61aa:	aa01      	add	r2, sp, #4
   b61ac:	6923      	ldr	r3, [r4, #16]
   b61ae:	2101      	movs	r1, #1
   b61b0:	4620      	mov	r0, r4
   b61b2:	4798      	blx	r3
}
   b61b4:	b005      	add	sp, #20
   b61b6:	bd30      	pop	{r4, r5, pc}
   b61b8:	000ba689 	.word	0x000ba689
   b61bc:	000bf6f7 	.word	0x000bf6f7

000b61c0 <_Z12batteryStatev>:
bool batteryState() {
   b61c0:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b61c2:	f7ff f95b 	bl	b547c <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b61c6:	a901      	add	r1, sp, #4
   b61c8:	4604      	mov	r4, r0
   b61ca:	2007      	movs	r0, #7
   b61cc:	f7ff ffd6 	bl	b617c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b61d0:	1e01      	subs	r1, r0, #0
        return val;
   b61d2:	bfa8      	it	ge
   b61d4:	9901      	ldrge	r1, [sp, #4]
   b61d6:	4620      	mov	r0, r4
   b61d8:	b2c9      	uxtb	r1, r1
   b61da:	f7ff fa89 	bl	b56f0 <_ZN17currentStatusData16set_batteryStateEh>
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b61de:	4818      	ldr	r0, [pc, #96]	; (b6240 <_Z12batteryStatev+0x80>)
   b61e0:	f005 fb2e 	bl	bb840 <_ZN9FuelGauge10quickStartEv>
  delay(500);
   b61e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b61e8:	f004 fe62 	bl	baeb0 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b61ec:	f7ff f946 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b61f0:	a901      	add	r1, sp, #4
   b61f2:	4604      	mov	r4, r0
   b61f4:	2003      	movs	r0, #3
   b61f6:	f7ff ffc1 	bl	b617c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b61fa:	b9e8      	cbnz	r0, b6238 <_Z12batteryStatev+0x78>
   b61fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6200:	ee07 3a90 	vmov	s15, r3
   b6204:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6208:	ee17 0a90 	vmov	r0, s15
   b620c:	f008 f956 	bl	be4bc <__aeabi_f2d>
   b6210:	ec41 0b10 	vmov	d0, r0, r1
   b6214:	4620      	mov	r0, r4
   b6216:	f7ff f96b 	bl	b54f0 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b621a:	f7ff f92f 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b621e:	f7ff f947 	bl	b54b0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6222:	4b08      	ldr	r3, [pc, #32]	; (b6244 <_Z12batteryStatev+0x84>)
   b6224:	ec51 0b10 	vmov	r0, r1, d0
   b6228:	2200      	movs	r2, #0
   b622a:	f008 fc2f 	bl	bea8c <__aeabi_dcmpgt>
}
   b622e:	3800      	subs	r0, #0
   b6230:	bf18      	it	ne
   b6232:	2001      	movne	r0, #1
   b6234:	b002      	add	sp, #8
   b6236:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6238:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b623c:	e7e4      	b.n	b6208 <_Z12batteryStatev+0x48>
   b623e:	bf00      	nop
   b6240:	2003e430 	.word	0x2003e430
   b6244:	404e0000 	.word	0x404e0000

000b6248 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6248:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b624a:	f7ff f917 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b624e:	4b11      	ldr	r3, [pc, #68]	; (b6294 <_Z16takeMeasurementsv+0x4c>)
   b6250:	4604      	mov	r4, r0
   b6252:	8818      	ldrh	r0, [r3, #0]
   b6254:	f007 fef3 	bl	be03e <analogRead>
   b6258:	f7ff ff16 	bl	b6088 <_Z17tmp36TemperatureCi>
   b625c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6260:	4620      	mov	r0, r4
   b6262:	edcd 7a01 	vstr	s15, [sp, #4]
   b6266:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b626a:	f7ff fa3b 	bl	b56e4 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b626e:	f7ff f905 	bl	b547c <_ZN17currentStatusData8instanceEv>
   b6272:	f7ff fa04 	bl	b567e <_ZNK17currentStatusData17get_internalTempCEv>
   b6276:	4a08      	ldr	r2, [pc, #32]	; (b6298 <_Z16takeMeasurementsv+0x50>)
   b6278:	4603      	mov	r3, r0
   b627a:	2110      	movs	r1, #16
   b627c:	4807      	ldr	r0, [pc, #28]	; (b629c <_Z16takeMeasurementsv+0x54>)
   b627e:	f004 fdbf 	bl	bae00 <snprintf>
    batteryState();
   b6282:	f7ff ff9d 	bl	b61c0 <_Z12batteryStatev>
    isItSafeToCharge();
   b6286:	f7ff ff1b 	bl	b60c0 <_Z16isItSafeToChargev>
    getSignalStrength();
   b628a:	f7ff ff3b 	bl	b6104 <_Z17getSignalStrengthv>
}
   b628e:	2001      	movs	r0, #1
   b6290:	b002      	add	sp, #8
   b6292:	bd10      	pop	{r4, pc}
   b6294:	000bf83c 	.word	0x000bf83c
   b6298:	000bfb6b 	.word	0x000bfb6b
   b629c:	2003de2c 	.word	0x2003de2c

000b62a0 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b62a0:	4801      	ldr	r0, [pc, #4]	; (b62a8 <_GLOBAL__sub_I_batteryContext+0x8>)
   b62a2:	2100      	movs	r1, #0
   b62a4:	f005 ba88 	b.w	bb7b8 <_ZN9FuelGaugeC1Eb>
   b62a8:	2003e430 	.word	0x2003e430

000b62ac <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b62ac:	4770      	bx	lr

000b62ae <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b62ae:	b510      	push	{r4, lr}
}
   b62b0:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b62b2:	4604      	mov	r4, r0
}
   b62b4:	f7fd fef3 	bl	b409e <_ZdlPvj>
   b62b8:	4620      	mov	r0, r4
   b62ba:	bd10      	pop	{r4, pc}

000b62bc <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b62bc:	b510      	push	{r4, lr}
   b62be:	4604      	mov	r4, r0
   b62c0:	b08a      	sub	sp, #40	; 0x28
   b62c2:	4608      	mov	r0, r1
    attr.flags = 0;
   b62c4:	f04f 0c20 	mov.w	ip, #32
   b62c8:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b62ca:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b62ce:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b62d2:	460b      	mov	r3, r1
   b62d4:	aa02      	add	r2, sp, #8
   b62d6:	6821      	ldr	r1, [r4, #0]
   b62d8:	f004 fc16 	bl	bab08 <log_message_v>
}
   b62dc:	b00a      	add	sp, #40	; 0x28
   b62de:	bd10      	pop	{r4, pc}

000b62e0 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b62e0:	b40e      	push	{r1, r2, r3}
   b62e2:	b503      	push	{r0, r1, lr}
   b62e4:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b62e6:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b62e8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b62ec:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b62ee:	f7ff ffe5 	bl	b62bc <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b62f2:	b002      	add	sp, #8
   b62f4:	f85d eb04 	ldr.w	lr, [sp], #4
   b62f8:	b003      	add	sp, #12
   b62fa:	4770      	bx	lr

000b62fc <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b62fc:	b40e      	push	{r1, r2, r3}
   b62fe:	b503      	push	{r0, r1, lr}
   b6300:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6302:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6304:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6308:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b630a:	f7ff ffd7 	bl	b62bc <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b630e:	b002      	add	sp, #8
   b6310:	f85d eb04 	ldr.w	lr, [sp], #4
   b6314:	b003      	add	sp, #12
   b6316:	4770      	bx	lr

000b6318 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6318:	b510      	push	{r4, lr}
   b631a:	7202      	strb	r2, [r0, #8]
   b631c:	22ff      	movs	r2, #255	; 0xff
   b631e:	8142      	strh	r2, [r0, #10]
   b6320:	2200      	movs	r2, #0
   b6322:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b6326:	6142      	str	r2, [r0, #20]
   b6328:	7602      	strb	r2, [r0, #24]
   b632a:	61c2      	str	r2, [r0, #28]
    instance = this;
   b632c:	4a02      	ldr	r2, [pc, #8]	; (b6338 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b632e:	4c03      	ldr	r4, [pc, #12]	; (b633c <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6330:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6332:	e9c0 4100 	strd	r4, r1, [r0]
}
   b6336:	bd10      	pop	{r4, pc}
   b6338:	2003e43c 	.word	0x2003e43c
   b633c:	000bfde8 	.word	0x000bfde8

000b6340 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6344:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6348:	4604      	mov	r4, r0
   b634a:	4689      	mov	r9, r1
   b634c:	4616      	mov	r6, r2
   b634e:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6350:	f1b8 0f00 	cmp.w	r8, #0
   b6354:	d002      	beq.n	b635c <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b6356:	6840      	ldr	r0, [r0, #4]
   b6358:	f005 fb0c 	bl	bb974 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b635c:	7a21      	ldrb	r1, [r4, #8]
   b635e:	6860      	ldr	r0, [r4, #4]
   b6360:	f005 fae5 	bl	bb92e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6364:	6860      	ldr	r0, [r4, #4]
   b6366:	6803      	ldr	r3, [r0, #0]
   b6368:	4649      	mov	r1, r9
   b636a:	689b      	ldr	r3, [r3, #8]
   b636c:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b636e:	6860      	ldr	r0, [r4, #4]
   b6370:	2100      	movs	r1, #0
   b6372:	f005 fafb 	bl	bb96c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6376:	4605      	mov	r5, r0
   b6378:	bb00      	cbnz	r0, b63bc <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b637a:	2301      	movs	r3, #1
   b637c:	7a21      	ldrb	r1, [r4, #8]
   b637e:	6860      	ldr	r0, [r4, #4]
   b6380:	463a      	mov	r2, r7
   b6382:	f005 fac2 	bl	bb90a <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b6386:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6388:	4603      	mov	r3, r0
        if (count == num) {
   b638a:	d109      	bne.n	b63a0 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b638c:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b638e:	42be      	cmp	r6, r7
   b6390:	d01c      	beq.n	b63cc <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6392:	6860      	ldr	r0, [r4, #4]
   b6394:	6803      	ldr	r3, [r0, #0]
   b6396:	695b      	ldr	r3, [r3, #20]
   b6398:	4798      	blx	r3
   b639a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b639e:	e7f6      	b.n	b638e <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b63a0:	490b      	ldr	r1, [pc, #44]	; (b63d0 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b63a2:	480c      	ldr	r0, [pc, #48]	; (b63d4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b63a4:	464a      	mov	r2, r9
   b63a6:	f7ff ff9b 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b63aa:	f1b8 0f00 	cmp.w	r8, #0
   b63ae:	d002      	beq.n	b63b6 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b63b0:	6860      	ldr	r0, [r4, #4]
   b63b2:	f005 fae8 	bl	bb986 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b63b6:	4628      	mov	r0, r5
   b63b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b63bc:	4603      	mov	r3, r0
   b63be:	4906      	ldr	r1, [pc, #24]	; (b63d8 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b63c0:	4804      	ldr	r0, [pc, #16]	; (b63d4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b63c2:	464a      	mov	r2, r9
   b63c4:	f7ff ff8c 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b63c8:	2500      	movs	r5, #0
   b63ca:	e7ee      	b.n	b63aa <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b63cc:	2501      	movs	r5, #1
   b63ce:	e7ec      	b.n	b63aa <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b63d0:	000bfb98 	.word	0x000bfb98
   b63d4:	2003e438 	.word	0x2003e438
   b63d8:	000bfbbd 	.word	0x000bfbbd

000b63dc <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b63dc:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b63de:	9300      	str	r3, [sp, #0]
   b63e0:	2301      	movs	r3, #1
   b63e2:	f7ff ffad 	bl	b6340 <_ZN6AB180513readRegistersEhPhjb>
}
   b63e6:	b003      	add	sp, #12
   b63e8:	f85d fb04 	ldr.w	pc, [sp], #4

000b63ec <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b63ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b63ee:	8943      	ldrh	r3, [r0, #10]
   b63f0:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b63f2:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b63f4:	d010      	beq.n	b6418 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b63f6:	4e19      	ldr	r6, [pc, #100]	; (b645c <_ZN6AB180510detectChipEv+0x70>)
   b63f8:	4d19      	ldr	r5, [pc, #100]	; (b6460 <_ZN6AB180510detectChipEv+0x74>)
   b63fa:	f004 f94d 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b63fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6402:	d209      	bcs.n	b6418 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6404:	8960      	ldrh	r0, [r4, #10]
   b6406:	f007 fe07 	bl	be018 <digitalRead>
   b640a:	2801      	cmp	r0, #1
   b640c:	d004      	beq.n	b6418 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b640e:	4631      	mov	r1, r6
   b6410:	4628      	mov	r0, r5
   b6412:	f7fd fe63 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6416:	e7f0      	b.n	b63fa <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6418:	2301      	movs	r3, #1
   b641a:	f10d 0207 	add.w	r2, sp, #7
   b641e:	2128      	movs	r1, #40	; 0x28
   b6420:	4620      	mov	r0, r4
   b6422:	f7ff ffdb 	bl	b63dc <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6426:	b930      	cbnz	r0, b6436 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6428:	480d      	ldr	r0, [pc, #52]	; (b6460 <_ZN6AB180510detectChipEv+0x74>)
   b642a:	490e      	ldr	r1, [pc, #56]	; (b6464 <_ZN6AB180510detectChipEv+0x78>)
   b642c:	f7fd fe56 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6430:	2000      	movs	r0, #0
}
   b6432:	b002      	add	sp, #8
   b6434:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6436:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b643a:	2b18      	cmp	r3, #24
   b643c:	d1f4      	bne.n	b6428 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b643e:	2301      	movs	r3, #1
   b6440:	f10d 0207 	add.w	r2, sp, #7
   b6444:	2129      	movs	r1, #41	; 0x29
   b6446:	4620      	mov	r0, r4
   b6448:	f7ff ffc8 	bl	b63dc <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b644c:	2800      	cmp	r0, #0
   b644e:	d0eb      	beq.n	b6428 <_ZN6AB180510detectChipEv+0x3c>
   b6450:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6454:	2b05      	cmp	r3, #5
   b6456:	d1e7      	bne.n	b6428 <_ZN6AB180510detectChipEv+0x3c>
   b6458:	e7eb      	b.n	b6432 <_ZN6AB180510detectChipEv+0x46>
   b645a:	bf00      	nop
   b645c:	000bfbe1 	.word	0x000bfbe1
   b6460:	2003e438 	.word	0x2003e438
   b6464:	000bfbf6 	.word	0x000bfbf6

000b6468 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6468:	b507      	push	{r0, r1, r2, lr}
   b646a:	4613      	mov	r3, r2
    uint8_t value = 0;
   b646c:	2200      	movs	r2, #0
   b646e:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6472:	f10d 0207 	add.w	r2, sp, #7
   b6476:	f7ff ffb1 	bl	b63dc <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b647a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b647e:	b003      	add	sp, #12
   b6480:	f85d fb04 	ldr.w	pc, [sp], #4

000b6484 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6488:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b648c:	4604      	mov	r4, r0
   b648e:	460f      	mov	r7, r1
   b6490:	4615      	mov	r5, r2
   b6492:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6494:	f1b8 0f00 	cmp.w	r8, #0
   b6498:	d002      	beq.n	b64a0 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b649a:	6840      	ldr	r0, [r0, #4]
   b649c:	f005 fa6a 	bl	bb974 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b64a0:	7a21      	ldrb	r1, [r4, #8]
   b64a2:	6860      	ldr	r0, [r4, #4]
   b64a4:	f005 fa43 	bl	bb92e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b64a8:	6860      	ldr	r0, [r4, #4]
   b64aa:	6803      	ldr	r3, [r0, #0]
   b64ac:	4639      	mov	r1, r7
   b64ae:	689b      	ldr	r3, [r3, #8]
   b64b0:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b64b2:	442e      	add	r6, r5
   b64b4:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b64b6:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b64b8:	d005      	beq.n	b64c6 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b64ba:	6803      	ldr	r3, [r0, #0]
   b64bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b64c0:	689b      	ldr	r3, [r3, #8]
   b64c2:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b64c4:	e7f6      	b.n	b64b4 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b64c6:	2101      	movs	r1, #1
   b64c8:	f005 fa50 	bl	bb96c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b64cc:	4603      	mov	r3, r0
   b64ce:	b170      	cbz	r0, b64ee <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b64d0:	4908      	ldr	r1, [pc, #32]	; (b64f4 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b64d2:	4809      	ldr	r0, [pc, #36]	; (b64f8 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b64d4:	463a      	mov	r2, r7
   b64d6:	f7ff ff03 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b64da:	2500      	movs	r5, #0
    }

    if (lock) {
   b64dc:	f1b8 0f00 	cmp.w	r8, #0
   b64e0:	d002      	beq.n	b64e8 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b64e2:	6860      	ldr	r0, [r4, #4]
   b64e4:	f005 fa4f 	bl	bb986 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b64e8:	4628      	mov	r0, r5
   b64ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b64ee:	2501      	movs	r5, #1
   b64f0:	e7f4      	b.n	b64dc <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b64f2:	bf00      	nop
   b64f4:	000bfc03 	.word	0x000bfc03
   b64f8:	2003e438 	.word	0x2003e438

000b64fc <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b64fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b64fe:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6502:	9300      	str	r3, [sp, #0]
   b6504:	f10d 020f 	add.w	r2, sp, #15
   b6508:	2301      	movs	r3, #1
   b650a:	f7ff ffbb 	bl	b6484 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b650e:	b005      	add	sp, #20
   b6510:	f85d fb04 	ldr.w	pc, [sp], #4

000b6514 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6516:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6518:	460c      	mov	r4, r1
   b651a:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b651c:	491a      	ldr	r1, [pc, #104]	; (b6588 <_ZN6AB18056setWDTEi+0x74>)
   b651e:	481b      	ldr	r0, [pc, #108]	; (b658c <_ZN6AB18056setWDTEi+0x78>)
   b6520:	f7fd fddc 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6524:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6526:	bfb8      	it	lt
   b6528:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b652a:	b97c      	cbnz	r4, b654c <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b652c:	2301      	movs	r3, #1
   b652e:	4622      	mov	r2, r4
   b6530:	211b      	movs	r1, #27
   b6532:	4628      	mov	r0, r5
   b6534:	f7ff ffe2 	bl	b64fc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6538:	4915      	ldr	r1, [pc, #84]	; (b6590 <_ZN6AB18056setWDTEi+0x7c>)
   b653a:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b653c:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b653e:	4813      	ldr	r0, [pc, #76]	; (b658c <_ZN6AB18056setWDTEi+0x78>)
   b6540:	f7ff fedc 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6544:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6546:	616c      	str	r4, [r5, #20]
}
   b6548:	4630      	mov	r0, r6
   b654a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b654c:	2c03      	cmp	r4, #3
   b654e:	dd19      	ble.n	b6584 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6550:	10a7      	asrs	r7, r4, #2
   b6552:	2f1f      	cmp	r7, #31
   b6554:	bfa8      	it	ge
   b6556:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6558:	00ba      	lsls	r2, r7, #2
   b655a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b655e:	2301      	movs	r3, #1
   b6560:	b2d2      	uxtb	r2, r2
   b6562:	211b      	movs	r1, #27
   b6564:	4628      	mov	r0, r5
   b6566:	f7ff ffc9 	bl	b64fc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b656a:	463a      	mov	r2, r7
   b656c:	4603      	mov	r3, r0
   b656e:	4909      	ldr	r1, [pc, #36]	; (b6594 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6570:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6572:	4806      	ldr	r0, [pc, #24]	; (b658c <_ZN6AB18056setWDTEi+0x78>)
   b6574:	f7ff fec2 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6578:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b657c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b657e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6580:	616f      	str	r7, [r5, #20]
   b6582:	e7e1      	b.n	b6548 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6584:	2701      	movs	r7, #1
   b6586:	e7e7      	b.n	b6558 <_ZN6AB18056setWDTEi+0x44>
   b6588:	000bfc28 	.word	0x000bfc28
   b658c:	2003e438 	.word	0x2003e438
   b6590:	000bfc32 	.word	0x000bfc32
   b6594:	000bfc4e 	.word	0x000bfc4e

000b6598 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6598:	4b06      	ldr	r3, [pc, #24]	; (b65b4 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b659a:	681a      	ldr	r2, [r3, #0]
   b659c:	b14a      	cbz	r2, b65b2 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b659e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b65a2:	430b      	orrs	r3, r1
   b65a4:	d105      	bne.n	b65b2 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b65a6:	68d3      	ldr	r3, [r2, #12]
   b65a8:	b11b      	cbz	r3, b65b2 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b65aa:	2100      	movs	r1, #0
   b65ac:	4610      	mov	r0, r2
   b65ae:	f7ff bfb1 	b.w	b6514 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b65b2:	4770      	bx	lr
   b65b4:	2003e43c 	.word	0x2003e43c

000b65b8 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b65b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b65bc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b65c0:	4605      	mov	r5, r0
   b65c2:	4616      	mov	r6, r2
   b65c4:	461f      	mov	r7, r3
    if (lock) {
   b65c6:	f1b8 0f00 	cmp.w	r8, #0
   b65ca:	d004      	beq.n	b65d6 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b65cc:	6840      	ldr	r0, [r0, #4]
   b65ce:	9101      	str	r1, [sp, #4]
   b65d0:	f005 f9d0 	bl	bb974 <_ZN7TwoWire4lockEv>
   b65d4:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b65d6:	9101      	str	r1, [sp, #4]
   b65d8:	2300      	movs	r3, #0
   b65da:	f10d 020f 	add.w	r2, sp, #15
   b65de:	4628      	mov	r0, r5
   b65e0:	f7ff fefc 	bl	b63dc <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b65e4:	4604      	mov	r4, r0
   b65e6:	b160      	cbz	r0, b6602 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b65e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b65ec:	ea03 0206 	and.w	r2, r3, r6
   b65f0:	433a      	orrs	r2, r7
        if (newValue != value) {
   b65f2:	4293      	cmp	r3, r2
   b65f4:	d005      	beq.n	b6602 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b65f6:	9901      	ldr	r1, [sp, #4]
   b65f8:	2300      	movs	r3, #0
   b65fa:	4628      	mov	r0, r5
   b65fc:	f7ff ff7e 	bl	b64fc <_ZN6AB180513writeRegisterEhhb>
   b6600:	4604      	mov	r4, r0
    if (lock) {
   b6602:	f1b8 0f00 	cmp.w	r8, #0
   b6606:	d002      	beq.n	b660e <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6608:	6868      	ldr	r0, [r5, #4]
   b660a:	f005 f9bc 	bl	bb986 <_ZN7TwoWire6unlockEv>
}
   b660e:	4620      	mov	r0, r4
   b6610:	b004      	add	sp, #16
   b6612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6616 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6616:	b513      	push	{r0, r1, r4, lr}
   b6618:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b661a:	f10d 0207 	add.w	r2, sp, #7
   b661e:	f7ff fedd 	bl	b63dc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b6622:	b128      	cbz	r0, b6630 <_ZN6AB180510isBitClearEhhb+0x1a>
   b6624:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6628:	421c      	tst	r4, r3
   b662a:	bf0c      	ite	eq
   b662c:	2001      	moveq	r0, #1
   b662e:	2000      	movne	r0, #0
}
   b6630:	b002      	add	sp, #8
   b6632:	bd10      	pop	{r4, pc}

000b6634 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6634:	b513      	push	{r0, r1, r4, lr}
   b6636:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6638:	f10d 0207 	add.w	r2, sp, #7
   b663c:	f7ff fece 	bl	b63dc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6640:	b128      	cbz	r0, b664e <_ZN6AB18058isBitSetEhhb+0x1a>
   b6642:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6646:	421c      	tst	r4, r3
   b6648:	bf14      	ite	ne
   b664a:	2001      	movne	r0, #1
   b664c:	2000      	moveq	r0, #0
}
   b664e:	b002      	add	sp, #8
   b6650:	bd10      	pop	{r4, pc}

000b6652 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6652:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6654:	43d2      	mvns	r2, r2
   b6656:	9300      	str	r3, [sp, #0]
   b6658:	b2d2      	uxtb	r2, r2
   b665a:	2300      	movs	r3, #0
   b665c:	f7ff ffac 	bl	b65b8 <_ZN6AB180512maskRegisterEhhhb>
}
   b6660:	b003      	add	sp, #12
   b6662:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6668 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6668:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b666a:	2301      	movs	r3, #1
   b666c:	f10d 0207 	add.w	r2, sp, #7
   b6670:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6672:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6674:	f7ff feb2 	bl	b63dc <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6678:	4605      	mov	r5, r0
   b667a:	b938      	cbnz	r0, b668c <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b667c:	491e      	ldr	r1, [pc, #120]	; (b66f8 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b667e:	481f      	ldr	r0, [pc, #124]	; (b66fc <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6680:	22ad      	movs	r2, #173	; 0xad
   b6682:	f7ff fe2d 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
}
   b6686:	4628      	mov	r0, r5
   b6688:	b003      	add	sp, #12
   b668a:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b668c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6690:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6694:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6698:	d00b      	beq.n	b66b2 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b669a:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b669c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b669e:	210f      	movs	r1, #15
   b66a0:	4620      	mov	r0, r4
   b66a2:	f7ff ffd6 	bl	b6652 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b66a6:	4a16      	ldr	r2, [pc, #88]	; (b6700 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b66a8:	4916      	ldr	r1, [pc, #88]	; (b6704 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b66aa:	4814      	ldr	r0, [pc, #80]	; (b66fc <_ZN6AB180516updateWakeReasonEv+0x94>)
   b66ac:	f7fd fd16 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b66b0:	e7e9      	b.n	b6686 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b66b2:	2208      	movs	r2, #8
   b66b4:	2117      	movs	r1, #23
   b66b6:	4620      	mov	r0, r4
   b66b8:	f7ff ffbc 	bl	b6634 <_ZN6AB18058isBitSetEhhb>
   b66bc:	b118      	cbz	r0, b66c6 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b66be:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b66c0:	4a11      	ldr	r2, [pc, #68]	; (b6708 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b66c2:	61e3      	str	r3, [r4, #28]
   b66c4:	e7f0      	b.n	b66a8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b66c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b66ca:	071a      	lsls	r2, r3, #28
   b66cc:	d509      	bpl.n	b66e2 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b66ce:	2303      	movs	r3, #3
   b66d0:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b66d2:	2208      	movs	r2, #8
   b66d4:	2301      	movs	r3, #1
   b66d6:	210f      	movs	r1, #15
   b66d8:	4620      	mov	r0, r4
   b66da:	f7ff ffba 	bl	b6652 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b66de:	4a0b      	ldr	r2, [pc, #44]	; (b670c <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b66e0:	e7e2      	b.n	b66a8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b66e2:	075b      	lsls	r3, r3, #29
   b66e4:	d5cf      	bpl.n	b6686 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b66e6:	2204      	movs	r2, #4
   b66e8:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b66ea:	2301      	movs	r3, #1
   b66ec:	210f      	movs	r1, #15
   b66ee:	4620      	mov	r0, r4
   b66f0:	f7ff ffaf 	bl	b6652 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b66f4:	4a06      	ldr	r2, [pc, #24]	; (b6710 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b66f6:	e7d7      	b.n	b66a8 <_ZN6AB180516updateWakeReasonEv+0x40>
   b66f8:	000bfca1 	.word	0x000bfca1
   b66fc:	2003e438 	.word	0x2003e438
   b6700:	000bfc72 	.word	0x000bfc72
   b6704:	000bfcc0 	.word	0x000bfcc0
   b6708:	000bfc7b 	.word	0x000bfc7b
   b670c:	000bfc8b 	.word	0x000bfc8b
   b6710:	000bfc9b 	.word	0x000bfc9b

000b6714 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6714:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b6716:	9300      	str	r3, [sp, #0]
   b6718:	4613      	mov	r3, r2
   b671a:	22ff      	movs	r2, #255	; 0xff
   b671c:	f7ff ff4c 	bl	b65b8 <_ZN6AB180512maskRegisterEhhhb>
}
   b6720:	b003      	add	sp, #12
   b6722:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6728 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b672a:	460f      	mov	r7, r1
   b672c:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b672e:	2301      	movs	r3, #1
   b6730:	2200      	movs	r2, #0
   b6732:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6734:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6736:	f7ff fee1 	bl	b64fc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b673a:	4604      	mov	r4, r0
   b673c:	b938      	cbnz	r0, b674e <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b673e:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b6742:	491f      	ldr	r1, [pc, #124]	; (b67c0 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b6744:	481f      	ldr	r0, [pc, #124]	; (b67c4 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b6746:	f7ff fdcb 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
}
   b674a:	4620      	mov	r0, r4
   b674c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b674e:	2301      	movs	r3, #1
   b6750:	2223      	movs	r2, #35	; 0x23
   b6752:	2118      	movs	r1, #24
   b6754:	4628      	mov	r0, r5
   b6756:	f7ff fed1 	bl	b64fc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b675a:	4604      	mov	r4, r0
   b675c:	b910      	cbnz	r0, b6764 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b675e:	f240 229b 	movw	r2, #667	; 0x29b
   b6762:	e7ee      	b.n	b6742 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b6764:	2fff      	cmp	r7, #255	; 0xff
   b6766:	bfa8      	it	ge
   b6768:	27ff      	movge	r7, #255	; 0xff
   b676a:	2f01      	cmp	r7, #1
   b676c:	bfb8      	it	lt
   b676e:	2701      	movlt	r7, #1
   b6770:	2301      	movs	r3, #1
   b6772:	b2fa      	uxtb	r2, r7
   b6774:	2119      	movs	r1, #25
   b6776:	4628      	mov	r0, r5
   b6778:	f7ff fec0 	bl	b64fc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b677c:	4604      	mov	r4, r0
   b677e:	b910      	cbnz	r0, b6786 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6780:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b6784:	e7dd      	b.n	b6742 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b6786:	2301      	movs	r3, #1
   b6788:	2208      	movs	r2, #8
   b678a:	2112      	movs	r1, #18
   b678c:	4628      	mov	r0, r5
   b678e:	f7ff ffc1 	bl	b6714 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6792:	4604      	mov	r4, r0
   b6794:	b910      	cbnz	r0, b679c <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b6796:	f240 22af 	movw	r2, #687	; 0x2af
   b679a:	e7d2      	b.n	b6742 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b679c:	2e00      	cmp	r6, #0
   b679e:	bf14      	ite	ne
   b67a0:	2203      	movne	r2, #3
   b67a2:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b67a4:	2301      	movs	r3, #1
   b67a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b67aa:	2118      	movs	r1, #24
   b67ac:	4628      	mov	r0, r5
   b67ae:	f7ff fea5 	bl	b64fc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b67b2:	4604      	mov	r4, r0
   b67b4:	2800      	cmp	r0, #0
   b67b6:	d1c8      	bne.n	b674a <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b67b8:	f240 22b9 	movw	r2, #697	; 0x2b9
   b67bc:	e7c1      	b.n	b6742 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b67be:	bf00      	nop
   b67c0:	000bfcd1 	.word	0x000bfcd1
   b67c4:	2003e438 	.word	0x2003e438

000b67c8 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b67c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b67cc:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b67ce:	4605      	mov	r5, r0
   b67d0:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b67d2:	484f      	ldr	r0, [pc, #316]	; (b6910 <_ZN6AB180513deepPowerDownEi+0x148>)
   b67d4:	494f      	ldr	r1, [pc, #316]	; (b6914 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b67d6:	f7fd fc81 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b67da:	2100      	movs	r1, #0
   b67dc:	4628      	mov	r0, r5
   b67de:	f7ff fe99 	bl	b6514 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b67e2:	4604      	mov	r4, r0
   b67e4:	b948      	cbnz	r0, b67fa <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b67e6:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b67ea:	494b      	ldr	r1, [pc, #300]	; (b6918 <_ZN6AB180513deepPowerDownEi+0x150>)
   b67ec:	4848      	ldr	r0, [pc, #288]	; (b6910 <_ZN6AB180513deepPowerDownEi+0x148>)
   b67ee:	f7ff fd77 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
}
   b67f2:	4620      	mov	r0, r4
   b67f4:	b003      	add	sp, #12
   b67f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b67fa:	2301      	movs	r3, #1
   b67fc:	461a      	mov	r2, r3
   b67fe:	2130      	movs	r1, #48	; 0x30
   b6800:	4628      	mov	r0, r5
   b6802:	f7ff ff87 	bl	b6714 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6806:	4604      	mov	r4, r0
   b6808:	b910      	cbnz	r0, b6810 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b680a:	f240 2205 	movw	r2, #517	; 0x205
   b680e:	e7ec      	b.n	b67ea <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6810:	2210      	movs	r2, #16
   b6812:	2301      	movs	r3, #1
   b6814:	4611      	mov	r1, r2
   b6816:	4628      	mov	r0, r5
   b6818:	f7ff ff1b 	bl	b6652 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b681c:	4604      	mov	r4, r0
   b681e:	b910      	cbnz	r0, b6826 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6820:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b6824:	e7e1      	b.n	b67ea <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b6826:	2301      	movs	r3, #1
   b6828:	2226      	movs	r2, #38	; 0x26
   b682a:	2113      	movs	r1, #19
   b682c:	4628      	mov	r0, r5
   b682e:	f7ff fe65 	bl	b64fc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6832:	4604      	mov	r4, r0
   b6834:	b910      	cbnz	r0, b683c <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b6836:	f240 2213 	movw	r2, #531	; 0x213
   b683a:	e7d6      	b.n	b67ea <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b683c:	2601      	movs	r6, #1
   b683e:	9600      	str	r6, [sp, #0]
   b6840:	4633      	mov	r3, r6
   b6842:	22fc      	movs	r2, #252	; 0xfc
   b6844:	2111      	movs	r1, #17
   b6846:	4628      	mov	r0, r5
   b6848:	f7ff feb6 	bl	b65b8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b684c:	4604      	mov	r4, r0
   b684e:	b910      	cbnz	r0, b6856 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6850:	f240 221b 	movw	r2, #539	; 0x21b
   b6854:	e7c9      	b.n	b67ea <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b6856:	2200      	movs	r2, #0
   b6858:	4639      	mov	r1, r7
   b685a:	4628      	mov	r0, r5
   b685c:	f7ff ff64 	bl	b6728 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6860:	4604      	mov	r4, r0
   b6862:	b910      	cbnz	r0, b686a <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b6864:	f240 2222 	movw	r2, #546	; 0x222
   b6868:	e7bf      	b.n	b67ea <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b686a:	9600      	str	r6, [sp, #0]
   b686c:	2302      	movs	r3, #2
   b686e:	2277      	movs	r2, #119	; 0x77
   b6870:	2110      	movs	r1, #16
   b6872:	4628      	mov	r0, r5
   b6874:	f7ff fea0 	bl	b65b8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6878:	4604      	mov	r4, r0
   b687a:	b910      	cbnz	r0, b6882 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b687c:	f240 222b 	movw	r2, #555	; 0x22b
   b6880:	e7b3      	b.n	b67ea <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6882:	4633      	mov	r3, r6
   b6884:	2204      	movs	r2, #4
   b6886:	211c      	movs	r1, #28
   b6888:	4628      	mov	r0, r5
   b688a:	f7ff ff43 	bl	b6714 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b688e:	4604      	mov	r4, r0
   b6890:	b910      	cbnz	r0, b6898 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6892:	f240 2232 	movw	r2, #562	; 0x232
   b6896:	e7a8      	b.n	b67ea <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6898:	9600      	str	r6, [sp, #0]
   b689a:	2318      	movs	r3, #24
   b689c:	22e3      	movs	r2, #227	; 0xe3
   b689e:	2111      	movs	r1, #17
   b68a0:	4628      	mov	r0, r5
   b68a2:	f7ff fe89 	bl	b65b8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b68a6:	4604      	mov	r4, r0
   b68a8:	b910      	cbnz	r0, b68b0 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b68aa:	f240 2239 	movw	r2, #569	; 0x239
   b68ae:	e79c      	b.n	b67ea <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b68b0:	4633      	mov	r3, r6
   b68b2:	22c0      	movs	r2, #192	; 0xc0
   b68b4:	2117      	movs	r1, #23
   b68b6:	4628      	mov	r0, r5
   b68b8:	f7ff fe20 	bl	b64fc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b68bc:	4604      	mov	r4, r0
   b68be:	b910      	cbnz	r0, b68c6 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b68c0:	f44f 7210 	mov.w	r2, #576	; 0x240
   b68c4:	e791      	b.n	b67ea <_ZN6AB180513deepPowerDownEi+0x22>
   b68c6:	f003 fee7 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b68ca:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6920 <_ZN6AB180513deepPowerDownEi+0x158>
   b68ce:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6910 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b68d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b68d6:	4606      	mov	r6, r0
   b68d8:	434f      	muls	r7, r1
   b68da:	f003 fedd 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
   b68de:	1b80      	subs	r0, r0, r6
   b68e0:	42b8      	cmp	r0, r7
   b68e2:	d20e      	bcs.n	b6902 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b68e4:	2201      	movs	r2, #1
   b68e6:	2117      	movs	r1, #23
   b68e8:	4628      	mov	r0, r5
   b68ea:	f7ff fdbd 	bl	b6468 <_ZN6AB180512readRegisterEhb>
   b68ee:	4649      	mov	r1, r9
   b68f0:	4602      	mov	r2, r0
   b68f2:	4640      	mov	r0, r8
   b68f4:	f7fd fbf2 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b68f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b68fc:	f004 fad8 	bl	baeb0 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6900:	e7eb      	b.n	b68da <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6902:	4906      	ldr	r1, [pc, #24]	; (b691c <_ZN6AB180513deepPowerDownEi+0x154>)
   b6904:	4802      	ldr	r0, [pc, #8]	; (b6910 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6906:	f7ff fceb 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b690a:	f006 ff70 	bl	bd7ee <_ZN11SystemClass5resetEv>
    return true;
   b690e:	e770      	b.n	b67f2 <_ZN6AB180513deepPowerDownEi+0x2a>
   b6910:	2003e438 	.word	0x2003e438
   b6914:	000bfcfc 	.word	0x000bfcfc
   b6918:	000bfcf1 	.word	0x000bfcf1
   b691c:	000bfd22 	.word	0x000bfd22
   b6920:	000bfd0d 	.word	0x000bfd0d

000b6924 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b6924:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6928:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b692c:	4605      	mov	r5, r0
   b692e:	460c      	mov	r4, r1
   b6930:	4691      	mov	r9, r2
   b6932:	461f      	mov	r7, r3
    if (lock) {
   b6934:	f1ba 0f00 	cmp.w	sl, #0
   b6938:	d002      	beq.n	b6940 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b693a:	6840      	ldr	r0, [r0, #4]
   b693c:	f005 f81a 	bl	bb974 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6940:	b307      	cbz	r7, b6984 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b6942:	2f20      	cmp	r7, #32
   b6944:	463e      	mov	r6, r7
   b6946:	bf28      	it	cs
   b6948:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b694a:	2c7f      	cmp	r4, #127	; 0x7f
   b694c:	d826      	bhi.n	b699c <_ZN6AB18057readRamEjPhjb+0x78>
   b694e:	1933      	adds	r3, r6, r4
   b6950:	2b80      	cmp	r3, #128	; 0x80
   b6952:	d901      	bls.n	b6958 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6954:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6958:	2301      	movs	r3, #1
   b695a:	2204      	movs	r2, #4
   b695c:	213f      	movs	r1, #63	; 0x3f
   b695e:	4628      	mov	r0, r5
   b6960:	f7ff fe77 	bl	b6652 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6964:	2300      	movs	r3, #0
   b6966:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b696a:	9300      	str	r3, [sp, #0]
   b696c:	464a      	mov	r2, r9
   b696e:	4633      	mov	r3, r6
   b6970:	b2c9      	uxtb	r1, r1
   b6972:	4628      	mov	r0, r5
   b6974:	f7ff fce4 	bl	b6340 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6978:	4680      	mov	r8, r0
   b697a:	b128      	cbz	r0, b6988 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b697c:	4434      	add	r4, r6
        dataLen -= count;
   b697e:	1bbf      	subs	r7, r7, r6
        data += count;
   b6980:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6982:	e7dd      	b.n	b6940 <_ZN6AB18057readRamEjPhjb+0x1c>
   b6984:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6988:	f1ba 0f00 	cmp.w	sl, #0
   b698c:	d002      	beq.n	b6994 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b698e:	6868      	ldr	r0, [r5, #4]
   b6990:	f004 fff9 	bl	bb986 <_ZN7TwoWire6unlockEv>
}
   b6994:	4640      	mov	r0, r8
   b6996:	b002      	add	sp, #8
   b6998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b699c:	2301      	movs	r3, #1
   b699e:	2204      	movs	r2, #4
   b69a0:	213f      	movs	r1, #63	; 0x3f
   b69a2:	4628      	mov	r0, r5
   b69a4:	f7ff feb6 	bl	b6714 <_ZN6AB180514setRegisterBitEhhb>
   b69a8:	e7dc      	b.n	b6964 <_ZN6AB18057readRamEjPhjb+0x40>

000b69aa <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b69aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b69ae:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b69b2:	4605      	mov	r5, r0
   b69b4:	460c      	mov	r4, r1
   b69b6:	4691      	mov	r9, r2
   b69b8:	461f      	mov	r7, r3
    if (lock) {
   b69ba:	f1ba 0f00 	cmp.w	sl, #0
   b69be:	d002      	beq.n	b69c6 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b69c0:	6840      	ldr	r0, [r0, #4]
   b69c2:	f004 ffd7 	bl	bb974 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b69c6:	b307      	cbz	r7, b6a0a <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b69c8:	2f1f      	cmp	r7, #31
   b69ca:	463e      	mov	r6, r7
   b69cc:	bf28      	it	cs
   b69ce:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b69d0:	2c7f      	cmp	r4, #127	; 0x7f
   b69d2:	d826      	bhi.n	b6a22 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b69d4:	1933      	adds	r3, r6, r4
   b69d6:	2b80      	cmp	r3, #128	; 0x80
   b69d8:	d901      	bls.n	b69de <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b69da:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b69de:	2301      	movs	r3, #1
   b69e0:	2204      	movs	r2, #4
   b69e2:	213f      	movs	r1, #63	; 0x3f
   b69e4:	4628      	mov	r0, r5
   b69e6:	f7ff fe34 	bl	b6652 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b69ea:	2300      	movs	r3, #0
   b69ec:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b69f0:	9300      	str	r3, [sp, #0]
   b69f2:	464a      	mov	r2, r9
   b69f4:	4633      	mov	r3, r6
   b69f6:	b2c9      	uxtb	r1, r1
   b69f8:	4628      	mov	r0, r5
   b69fa:	f7ff fd43 	bl	b6484 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b69fe:	4680      	mov	r8, r0
   b6a00:	b128      	cbz	r0, b6a0e <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b6a02:	4434      	add	r4, r6
        dataLen -= count;
   b6a04:	1bbf      	subs	r7, r7, r6
        data += count;
   b6a06:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6a08:	e7dd      	b.n	b69c6 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6a0a:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6a0e:	f1ba 0f00 	cmp.w	sl, #0
   b6a12:	d002      	beq.n	b6a1a <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b6a14:	6868      	ldr	r0, [r5, #4]
   b6a16:	f004 ffb6 	bl	bb986 <_ZN7TwoWire6unlockEv>
}
   b6a1a:	4640      	mov	r0, r8
   b6a1c:	b002      	add	sp, #8
   b6a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6a22:	2301      	movs	r3, #1
   b6a24:	2204      	movs	r2, #4
   b6a26:	213f      	movs	r1, #63	; 0x3f
   b6a28:	4628      	mov	r0, r5
   b6a2a:	f7ff fe73 	bl	b6714 <_ZN6AB180514setRegisterBitEhhb>
   b6a2e:	e7dc      	b.n	b69ea <_ZN6AB18058writeRamEjPKhjb+0x40>

000b6a30 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b6a30:	b530      	push	{r4, r5, lr}
   b6a32:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6a34:	680d      	ldr	r5, [r1, #0]
   b6a36:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b6a3a:	9503      	str	r5, [sp, #12]
   b6a3c:	684d      	ldr	r5, [r1, #4]
   b6a3e:	9502      	str	r5, [sp, #8]
   b6a40:	688d      	ldr	r5, [r1, #8]
   b6a42:	9501      	str	r5, [sp, #4]
   b6a44:	68c9      	ldr	r1, [r1, #12]
   b6a46:	9100      	str	r1, [sp, #0]
   b6a48:	3301      	adds	r3, #1
   b6a4a:	4904      	ldr	r1, [pc, #16]	; (b6a5c <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6a4c:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6a50:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6a52:	f006 fe65 	bl	bd720 <_ZN6String6formatEPKcz>
}
   b6a56:	4620      	mov	r0, r4
   b6a58:	b005      	add	sp, #20
   b6a5a:	bd30      	pop	{r4, r5, pc}
   b6a5c:	000bfd34 	.word	0x000bfd34

000b6a60 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6a60:	0903      	lsrs	r3, r0, #4
}
   b6a62:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6a64:	f000 000f 	and.w	r0, r0, #15
}
   b6a68:	fb02 0003 	mla	r0, r2, r3, r0
   b6a6c:	4770      	bx	lr

000b6a6e <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6a6e:	b538      	push	{r3, r4, r5, lr}
   b6a70:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b6a72:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6a74:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b6a76:	f7ff fff3 	bl	b6a60 <_ZN6AB180510bcdToValueEh>
   b6a7a:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6a7c:	7860      	ldrb	r0, [r4, #1]
   b6a7e:	f7ff ffef 	bl	b6a60 <_ZN6AB180510bcdToValueEh>
   b6a82:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6a84:	78a0      	ldrb	r0, [r4, #2]
   b6a86:	f7ff ffeb 	bl	b6a60 <_ZN6AB180510bcdToValueEh>
   b6a8a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6a8c:	78e0      	ldrb	r0, [r4, #3]
   b6a8e:	f7ff ffe7 	bl	b6a60 <_ZN6AB180510bcdToValueEh>
   b6a92:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6a94:	7920      	ldrb	r0, [r4, #4]
   b6a96:	f7ff ffe3 	bl	b6a60 <_ZN6AB180510bcdToValueEh>
   b6a9a:	3801      	subs	r0, #1
   b6a9c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6a9e:	b92d      	cbnz	r5, b6aac <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6aa0:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6aa2:	7828      	ldrb	r0, [r5, #0]
   b6aa4:	f7ff ffdc 	bl	b6a60 <_ZN6AB180510bcdToValueEh>
   b6aa8:	6188      	str	r0, [r1, #24]
}
   b6aaa:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6aac:	7960      	ldrb	r0, [r4, #5]
   b6aae:	f7ff ffd7 	bl	b6a60 <_ZN6AB180510bcdToValueEh>
   b6ab2:	3064      	adds	r0, #100	; 0x64
   b6ab4:	1da5      	adds	r5, r4, #6
   b6ab6:	6148      	str	r0, [r1, #20]
   b6ab8:	e7f3      	b.n	b6aa2 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6abc <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6abc:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6abe:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6ac0:	b088      	sub	sp, #32
   b6ac2:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6ac4:	461a      	mov	r2, r3
   b6ac6:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6ac8:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6aca:	f7ff fda4 	bl	b6616 <_ZN6AB180510isBitClearEhhb>
   b6ace:	b1f0      	cbz	r0, b6b0e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6ad0:	2308      	movs	r3, #8
   b6ad2:	2601      	movs	r6, #1
   b6ad4:	4620      	mov	r0, r4
   b6ad6:	9600      	str	r6, [sp, #0]
   b6ad8:	eb0d 0203 	add.w	r2, sp, r3
   b6adc:	2100      	movs	r1, #0
   b6ade:	f7ff fc2f 	bl	b6340 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b6ae2:	4604      	mov	r4, r0
   b6ae4:	b198      	cbz	r0, b6b0e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b6ae6:	4632      	mov	r2, r6
   b6ae8:	4629      	mov	r1, r5
   b6aea:	f10d 0009 	add.w	r0, sp, #9
   b6aee:	f7ff ffbe 	bl	b6a6e <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b6af2:	a804      	add	r0, sp, #16
   b6af4:	f7ff ff9c 	bl	b6a30 <_ZN6AB180510tmToStringEPK2tm>
   b6af8:	4808      	ldr	r0, [pc, #32]	; (b6b1c <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b6afa:	9a04      	ldr	r2, [sp, #16]
   b6afc:	4908      	ldr	r1, [pc, #32]	; (b6b20 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b6afe:	f7fd faed 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6b02:	a804      	add	r0, sp, #16
   b6b04:	f006 fcc0 	bl	bd488 <_ZN6StringD1Ev>
}
   b6b08:	4620      	mov	r0, r4
   b6b0a:	b008      	add	sp, #32
   b6b0c:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b6b0e:	2224      	movs	r2, #36	; 0x24
   b6b10:	2100      	movs	r1, #0
   b6b12:	4628      	mov	r0, r5
   b6b14:	f008 f89c 	bl	bec50 <memset>
   b6b18:	2400      	movs	r4, #0
   b6b1a:	e7f5      	b.n	b6b08 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b6b1c:	2003e438 	.word	0x2003e438
   b6b20:	000bfd52 	.word	0x000bfd52

000b6b24 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b6b24:	b530      	push	{r4, r5, lr}
   b6b26:	b08b      	sub	sp, #44	; 0x2c
   b6b28:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b6b2a:	a901      	add	r1, sp, #4
   b6b2c:	f7ff ffc6 	bl	b6abc <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b6b30:	4604      	mov	r4, r0
   b6b32:	b120      	cbz	r0, b6b3e <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b6b34:	a801      	add	r0, sp, #4
   b6b36:	f004 f9b3 	bl	baea0 <mktime>
   b6b3a:	e9c5 0100 	strd	r0, r1, [r5]
}
   b6b3e:	4620      	mov	r0, r4
   b6b40:	b00b      	add	sp, #44	; 0x2c
   b6b42:	bd30      	pop	{r4, r5, pc}

000b6b44 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b6b44:	230a      	movs	r3, #10
   b6b46:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b6b4a:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b6b4e:	fb91 f2f3 	sdiv	r2, r1, r3
   b6b52:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b6b56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b6b5a:	b2c0      	uxtb	r0, r0
   b6b5c:	4770      	bx	lr

000b6b5e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6b5e:	b570      	push	{r4, r5, r6, lr}
   b6b60:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b6b62:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6b64:	460c      	mov	r4, r1
   b6b66:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b6b68:	f7ff ffec 	bl	b6b44 <_ZN6AB180510valueToBcdEi>
   b6b6c:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6b6e:	6868      	ldr	r0, [r5, #4]
   b6b70:	f7ff ffe8 	bl	b6b44 <_ZN6AB180510valueToBcdEi>
   b6b74:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b6b76:	68a8      	ldr	r0, [r5, #8]
   b6b78:	f7ff ffe4 	bl	b6b44 <_ZN6AB180510valueToBcdEi>
   b6b7c:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6b7e:	68e8      	ldr	r0, [r5, #12]
   b6b80:	f7ff ffe0 	bl	b6b44 <_ZN6AB180510valueToBcdEi>
   b6b84:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6b86:	6928      	ldr	r0, [r5, #16]
   b6b88:	3001      	adds	r0, #1
   b6b8a:	f7ff ffdb 	bl	b6b44 <_ZN6AB180510valueToBcdEi>
   b6b8e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6b90:	b92e      	cbnz	r6, b6b9e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6b92:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6b94:	69a8      	ldr	r0, [r5, #24]
   b6b96:	f7ff ffd5 	bl	b6b44 <_ZN6AB180510valueToBcdEi>
   b6b9a:	7030      	strb	r0, [r6, #0]
}
   b6b9c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6b9e:	696a      	ldr	r2, [r5, #20]
   b6ba0:	2364      	movs	r3, #100	; 0x64
   b6ba2:	fb92 f0f3 	sdiv	r0, r2, r3
   b6ba6:	fb03 2010 	mls	r0, r3, r0, r2
   b6baa:	f7ff ffcb 	bl	b6b44 <_ZN6AB180510valueToBcdEi>
   b6bae:	1da6      	adds	r6, r4, #6
   b6bb0:	7160      	strb	r0, [r4, #5]
   b6bb2:	e7ef      	b.n	b6b94 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6bb4 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6bb6:	b087      	sub	sp, #28
   b6bb8:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6bba:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6bbc:	4616      	mov	r6, r2
   b6bbe:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6bc0:	f7ff ff36 	bl	b6a30 <_ZN6AB180510tmToStringEPK2tm>
   b6bc4:	481e      	ldr	r0, [pc, #120]	; (b6c40 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6bc6:	9a02      	ldr	r2, [sp, #8]
   b6bc8:	491e      	ldr	r1, [pc, #120]	; (b6c44 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b6bca:	f7fd fa87 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6bce:	a802      	add	r0, sp, #8
   b6bd0:	f006 fc5a 	bl	bd488 <_ZN6StringD1Ev>
    if (lock) {
   b6bd4:	b116      	cbz	r6, b6bdc <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b6bd6:	6868      	ldr	r0, [r5, #4]
   b6bd8:	f004 fecc 	bl	bb974 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b6bdc:	4620      	mov	r0, r4
   b6bde:	2201      	movs	r2, #1
   b6be0:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6be4:	2700      	movs	r7, #0
   b6be6:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b6bea:	f7ff ffb8 	bl	b6b5e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6bee:	2301      	movs	r3, #1
   b6bf0:	461a      	mov	r2, r3
   b6bf2:	2110      	movs	r1, #16
   b6bf4:	4628      	mov	r0, r5
   b6bf6:	f7ff fd8d 	bl	b6714 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b6bfa:	4604      	mov	r4, r0
   b6bfc:	b1e8      	cbz	r0, b6c3a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b6bfe:	2308      	movs	r3, #8
   b6c00:	9700      	str	r7, [sp, #0]
   b6c02:	eb0d 0203 	add.w	r2, sp, r3
   b6c06:	4639      	mov	r1, r7
   b6c08:	4628      	mov	r0, r5
   b6c0a:	f7ff fc3b 	bl	b6484 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b6c0e:	4604      	mov	r4, r0
   b6c10:	b160      	cbz	r0, b6c2c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6c12:	2301      	movs	r3, #1
   b6c14:	461a      	mov	r2, r3
   b6c16:	2110      	movs	r1, #16
   b6c18:	4628      	mov	r0, r5
   b6c1a:	f7ff fd1a 	bl	b6652 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b6c1e:	b116      	cbz	r6, b6c26 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b6c20:	6868      	ldr	r0, [r5, #4]
   b6c22:	f004 feb0 	bl	bb986 <_ZN7TwoWire6unlockEv>
}
   b6c26:	4620      	mov	r0, r4
   b6c28:	b007      	add	sp, #28
   b6c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b6c2c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b6c30:	4905      	ldr	r1, [pc, #20]	; (b6c48 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b6c32:	4803      	ldr	r0, [pc, #12]	; (b6c40 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6c34:	f7ff fb54 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
   b6c38:	e7f1      	b.n	b6c1e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b6c3a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b6c3e:	e7f7      	b.n	b6c30 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b6c40:	2003e438 	.word	0x2003e438
   b6c44:	000bfd60 	.word	0x000bfd60
   b6c48:	000bfd6e 	.word	0x000bfd6e

000b6c4c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6c4c:	b513      	push	{r0, r1, r4, lr}
   b6c4e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b6c50:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6c52:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b6c56:	f007 ffad 	bl	bebb4 <gmtime>
    return setRtcFromTm(tm, lock);
   b6c5a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b6c5e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6c60:	4620      	mov	r0, r4
   b6c62:	f7ff ffa7 	bl	b6bb4 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b6c66:	b002      	add	sp, #8
   b6c68:	bd10      	pop	{r4, pc}
	...

000b6c6c <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6c6e:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6c70:	b089      	sub	sp, #36	; 0x24
   b6c72:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6c74:	bb75      	cbnz	r5, b6cd4 <_ZN6AB18054loopEv+0x68>
   b6c76:	f006 ff89 	bl	bdb8c <_ZN9TimeClass7isValidEv>
   b6c7a:	b358      	cbz	r0, b6cd4 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b6c7c:	2600      	movs	r6, #0
   b6c7e:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6c80:	a904      	add	r1, sp, #16
   b6c82:	4628      	mov	r0, r5
        tm = 0;
   b6c84:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6c88:	f004 f812 	bl	bacb0 <spark_sync_time_last>
   b6c8c:	b310      	cbz	r0, b6cd4 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6c8e:	2501      	movs	r5, #1
   b6c90:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6c92:	f006 ff98 	bl	bdbc6 <_ZN9TimeClass3nowEv>
   b6c96:	17c3      	asrs	r3, r0, #31
   b6c98:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6c9c:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6c9e:	9500      	str	r5, [sp, #0]
   b6ca0:	4620      	mov	r0, r4
   b6ca2:	f7ff ffd3 	bl	b6c4c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b6ca6:	a902      	add	r1, sp, #8
   b6ca8:	4620      	mov	r0, r4
        time = 0;
   b6caa:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6cae:	f7ff ff39 	bl	b6b24 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6cb2:	4b13      	ldr	r3, [pc, #76]	; (b6d00 <_ZN6AB18054loopEv+0x94>)
   b6cb4:	4913      	ldr	r1, [pc, #76]	; (b6d04 <_ZN6AB18054loopEv+0x98>)
   b6cb6:	681b      	ldr	r3, [r3, #0]
   b6cb8:	9300      	str	r3, [sp, #0]
   b6cba:	a804      	add	r0, sp, #16
   b6cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6cc0:	f006 ff22 	bl	bdb08 <_ZN9TimeClass6formatExPKc>
   b6cc4:	4810      	ldr	r0, [pc, #64]	; (b6d08 <_ZN6AB18054loopEv+0x9c>)
   b6cc6:	9a04      	ldr	r2, [sp, #16]
   b6cc8:	4910      	ldr	r1, [pc, #64]	; (b6d0c <_ZN6AB18054loopEv+0xa0>)
   b6cca:	f7fd fa07 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6cce:	a804      	add	r0, sp, #16
   b6cd0:	f006 fbda 	bl	bd488 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6cd4:	6963      	ldr	r3, [r4, #20]
   b6cd6:	b18b      	cbz	r3, b6cfc <_ZN6AB18054loopEv+0x90>
   b6cd8:	f003 fcde 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6cdc:	6923      	ldr	r3, [r4, #16]
   b6cde:	1ac0      	subs	r0, r0, r3
   b6ce0:	6963      	ldr	r3, [r4, #20]
   b6ce2:	4298      	cmp	r0, r3
   b6ce4:	d30a      	bcc.n	b6cfc <_ZN6AB18054loopEv+0x90>
   b6ce6:	f003 fcd7 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b6cea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b6cee:	6120      	str	r0, [r4, #16]
            setWDT();
   b6cf0:	4620      	mov	r0, r4
}
   b6cf2:	b009      	add	sp, #36	; 0x24
   b6cf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6cf8:	f7ff bc0c 	b.w	b6514 <_ZN6AB18056setWDTEi>
}
   b6cfc:	b009      	add	sp, #36	; 0x24
   b6cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6d00:	2003de84 	.word	0x2003de84
   b6d04:	2003e6ac 	.word	0x2003e6ac
   b6d08:	2003e438 	.word	0x2003e438
   b6d0c:	000bfd89 	.word	0x000bfd89

000b6d10 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6d10:	b530      	push	{r4, r5, lr}
   b6d12:	4604      	mov	r4, r0
   b6d14:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b6d16:	b111      	cbz	r1, b6d1e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b6d18:	6840      	ldr	r0, [r0, #4]
   b6d1a:	f004 fdd9 	bl	bb8d0 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b6d1e:	4620      	mov	r0, r4
   b6d20:	f7ff fb64 	bl	b63ec <_ZN6AB180510detectChipEv>
   b6d24:	ad06      	add	r5, sp, #24
   b6d26:	2800      	cmp	r0, #0
   b6d28:	d037      	beq.n	b6d9a <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b6d2a:	4620      	mov	r0, r4
   b6d2c:	f7ff fc9c 	bl	b6668 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b6d30:	2301      	movs	r3, #1
   b6d32:	461a      	mov	r2, r3
   b6d34:	2110      	movs	r1, #16
   b6d36:	4620      	mov	r0, r4
   b6d38:	f7ff fc6d 	bl	b6616 <_ZN6AB180510isBitClearEhhb>
   b6d3c:	b1d8      	cbz	r0, b6d76 <_ZN6AB18055setupEb+0x66>
   b6d3e:	f006 ff25 	bl	bdb8c <_ZN9TimeClass7isValidEv>
   b6d42:	b9c0      	cbnz	r0, b6d76 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b6d44:	a902      	add	r1, sp, #8
   b6d46:	4620      	mov	r0, r4
   b6d48:	f7ff feec 	bl	b6b24 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b6d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6d50:	f006 fe20 	bl	bd994 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6d54:	4b13      	ldr	r3, [pc, #76]	; (b6da4 <_ZN6AB18055setupEb+0x94>)
   b6d56:	4914      	ldr	r1, [pc, #80]	; (b6da8 <_ZN6AB18055setupEb+0x98>)
   b6d58:	681b      	ldr	r3, [r3, #0]
   b6d5a:	9300      	str	r3, [sp, #0]
   b6d5c:	4628      	mov	r0, r5
   b6d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6d62:	f006 fed1 	bl	bdb08 <_ZN9TimeClass6formatExPKc>
   b6d66:	4811      	ldr	r0, [pc, #68]	; (b6dac <_ZN6AB18055setupEb+0x9c>)
   b6d68:	9a06      	ldr	r2, [sp, #24]
   b6d6a:	4911      	ldr	r1, [pc, #68]	; (b6db0 <_ZN6AB18055setupEb+0xa0>)
   b6d6c:	f7fd f9b6 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6d70:	4628      	mov	r0, r5
   b6d72:	f006 fb89 	bl	bd488 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6d76:	4b0f      	ldr	r3, [pc, #60]	; (b6db4 <_ZN6AB18055setupEb+0xa4>)
   b6d78:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b6d7a:	4b0f      	ldr	r3, [pc, #60]	; (b6db8 <_ZN6AB18055setupEb+0xa8>)
   b6d7c:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6d7e:	4b0f      	ldr	r3, [pc, #60]	; (b6dbc <_ZN6AB18055setupEb+0xac>)
   b6d80:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b6d86:	2300      	movs	r3, #0
   b6d88:	a802      	add	r0, sp, #8
   b6d8a:	9500      	str	r5, [sp, #0]
   b6d8c:	f7fe f88e 	bl	b4eac <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6d90:	4628      	mov	r0, r5
   b6d92:	f7fd fda3 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
}
   b6d96:	b00b      	add	sp, #44	; 0x2c
   b6d98:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b6d9a:	4909      	ldr	r1, [pc, #36]	; (b6dc0 <_ZN6AB18055setupEb+0xb0>)
   b6d9c:	4803      	ldr	r0, [pc, #12]	; (b6dac <_ZN6AB18055setupEb+0x9c>)
   b6d9e:	f7ff fa9f 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
   b6da2:	e7e8      	b.n	b6d76 <_ZN6AB18055setupEb+0x66>
   b6da4:	2003de84 	.word	0x2003de84
   b6da8:	2003e6ac 	.word	0x2003e6ac
   b6dac:	2003e438 	.word	0x2003e438
   b6db0:	000bfd9f 	.word	0x000bfd9f
   b6db4:	000b6599 	.word	0x000b6599
   b6db8:	000b48d3 	.word	0x000b48d3
   b6dbc:	000b48bf 	.word	0x000b48bf
   b6dc0:	000bfdbc 	.word	0x000bfdbc

000b6dc4 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6dc4:	4b01      	ldr	r3, [pc, #4]	; (b6dcc <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b6dc6:	4a02      	ldr	r2, [pc, #8]	; (b6dd0 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6dc8:	601a      	str	r2, [r3, #0]
}
   b6dca:	4770      	bx	lr
   b6dcc:	2003e438 	.word	0x2003e438
   b6dd0:	000bfdd4 	.word	0x000bfdd4

000b6dd4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6dd4:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b6dd6:	2301      	movs	r3, #1
   b6dd8:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b6dda:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6ddc:	4604      	mov	r4, r0
        if (th->func) {
   b6dde:	b143      	cbz	r3, b6df2 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6de0:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6de2:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6de4:	2301      	movs	r3, #1
   b6de6:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b6de8:	2000      	movs	r0, #0
    }
   b6dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b6dee:	f003 bc23 	b.w	ba638 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6df2:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b6df4:	2800      	cmp	r0, #0
   b6df6:	d0f5      	beq.n	b6de4 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b6df8:	6883      	ldr	r3, [r0, #8]
   b6dfa:	b90b      	cbnz	r3, b6e00 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b6dfc:	f007 f9f6 	bl	be1ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6e00:	68c3      	ldr	r3, [r0, #12]
   b6e02:	e7ee      	b.n	b6de2 <_ZN6Thread3runEPv+0xe>

000b6e04 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b6e04:	2a01      	cmp	r2, #1
   b6e06:	d102      	bne.n	b6e0e <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6e08:	6001      	str	r1, [r0, #0]
      }
   b6e0a:	2000      	movs	r0, #0
   b6e0c:	4770      	bx	lr
	  switch (__op)
   b6e0e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6e10:	bf04      	itt	eq
   b6e12:	680b      	ldreq	r3, [r1, #0]
   b6e14:	6003      	streq	r3, [r0, #0]
	      break;
   b6e16:	e7f8      	b.n	b6e0a <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b6e18 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b6e18:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b6e1a:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b6e1c:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b6e1e:	b135      	cbz	r5, b6e2e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b6e20:	4628      	mov	r0, r5
   b6e22:	f7fd fd5b 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b6e26:	2110      	movs	r1, #16
   b6e28:	4628      	mov	r0, r5
   b6e2a:	f7fd f938 	bl	b409e <_ZdlPvj>
   b6e2e:	4620      	mov	r0, r4
   b6e30:	2114      	movs	r1, #20
      }
   b6e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b6e36:	f7fd b932 	b.w	b409e <_ZdlPvj>

000b6e3a <_ZN6Thread7disposeEv>:
    void dispose()
   b6e3a:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6e3c:	6803      	ldr	r3, [r0, #0]
   b6e3e:	4604      	mov	r4, r0
        if (!isValid())
   b6e40:	b1ab      	cbz	r3, b6e6e <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b6e42:	6858      	ldr	r0, [r3, #4]
   b6e44:	f003 fba8 	bl	ba598 <os_thread_is_current>
   b6e48:	b988      	cbnz	r0, b6e6e <_ZN6Thread7disposeEv+0x34>
   b6e4a:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b6e4c:	7c5a      	ldrb	r2, [r3, #17]
   b6e4e:	b912      	cbnz	r2, b6e56 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b6e50:	6858      	ldr	r0, [r3, #4]
   b6e52:	f003 fba9 	bl	ba5a8 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b6e56:	6823      	ldr	r3, [r4, #0]
   b6e58:	6858      	ldr	r0, [r3, #4]
   b6e5a:	f003 fbad 	bl	ba5b8 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b6e5e:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b6e60:	2300      	movs	r3, #0
   b6e62:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b6e64:	b118      	cbz	r0, b6e6e <_ZN6Thread7disposeEv+0x34>
    }
   b6e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6e6a:	f7ff bfd5 	b.w	b6e18 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b6e6e:	bd10      	pop	{r4, pc}

000b6e70 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b6e70:	4a05      	ldr	r2, [pc, #20]	; (b6e88 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b6e72:	6002      	str	r2, [r0, #0]
   b6e74:	2200      	movs	r2, #0
   b6e76:	6042      	str	r2, [r0, #4]
   b6e78:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b6e7a:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b6e7e:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b6e82:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b6e86:	4770      	bx	lr
   b6e88:	000bfe14 	.word	0x000bfe14

000b6e8c <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b6e8c:	b510      	push	{r4, lr}
    if (!_instance) {
   b6e8e:	4c07      	ldr	r4, [pc, #28]	; (b6eac <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b6e90:	6823      	ldr	r3, [r4, #0]
   b6e92:	b943      	cbnz	r3, b6ea6 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b6e94:	f240 4064 	movw	r0, #1124	; 0x464
   b6e98:	f7fd f8fd 	bl	b4096 <_Znwj>
   b6e9c:	4603      	mov	r3, r0
   b6e9e:	b108      	cbz	r0, b6ea4 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b6ea0:	f7ff ffe6 	bl	b6e70 <_ZN19BackgroundPublishRKC1Ev>
   b6ea4:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b6ea6:	6820      	ldr	r0, [r4, #0]
   b6ea8:	bd10      	pop	{r4, pc}
   b6eaa:	bf00      	nop
   b6eac:	2003e440 	.word	0x2003e440

000b6eb0 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b6eb0:	b538      	push	{r3, r4, r5, lr}
   b6eb2:	4604      	mov	r4, r0
    if(thread)
   b6eb4:	6840      	ldr	r0, [r0, #4]
   b6eb6:	b190      	cbz	r0, b6ede <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b6eb8:	2302      	movs	r3, #2
   b6eba:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b6ebc:	f7ff ffbd 	bl	b6e3a <_ZN6Thread7disposeEv>
        delete thread;
   b6ec0:	6865      	ldr	r5, [r4, #4]
   b6ec2:	b155      	cbz	r5, b6eda <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b6ec4:	4628      	mov	r0, r5
   b6ec6:	f7ff ffb8 	bl	b6e3a <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b6eca:	6828      	ldr	r0, [r5, #0]
   b6ecc:	b108      	cbz	r0, b6ed2 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b6ece:	f7ff ffa3 	bl	b6e18 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b6ed2:	2104      	movs	r1, #4
   b6ed4:	4628      	mov	r0, r5
   b6ed6:	f7fd f8e2 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b6eda:	2300      	movs	r3, #0
   b6edc:	6063      	str	r3, [r4, #4]
    }
}
   b6ede:	bd38      	pop	{r3, r4, r5, pc}

000b6ee0 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6ee0:	b510      	push	{r4, lr}
   b6ee2:	4b05      	ldr	r3, [pc, #20]	; (b6ef8 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b6ee4:	6003      	str	r3, [r0, #0]
   b6ee6:	4604      	mov	r4, r0
    stop();
   b6ee8:	f7ff ffe2 	bl	b6eb0 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b6eec:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b6ef0:	f7fd fcf4 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
}
   b6ef4:	4620      	mov	r0, r4
   b6ef6:	bd10      	pop	{r4, pc}
   b6ef8:	000bfe14 	.word	0x000bfe14

000b6efc <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6efc:	b510      	push	{r4, lr}
   b6efe:	4604      	mov	r4, r0
}
   b6f00:	f7ff ffee 	bl	b6ee0 <_ZN19BackgroundPublishRKD1Ev>
   b6f04:	4620      	mov	r0, r4
   b6f06:	f240 4164 	movw	r1, #1124	; 0x464
   b6f0a:	f7fd f8c8 	bl	b409e <_ZdlPvj>
   b6f0e:	4620      	mov	r0, r4
   b6f10:	bd10      	pop	{r4, pc}

000b6f12 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b6f12:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6f14:	4604      	mov	r4, r0
   b6f16:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b6f18:	f100 060d 	add.w	r6, r0, #13
   b6f1c:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b6f20:	7b23      	ldrb	r3, [r4, #12]
   b6f22:	b91b      	cbnz	r3, b6f2c <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b6f24:	2001      	movs	r0, #1
   b6f26:	f003 ffc3 	bl	baeb0 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b6f2a:	e7f9      	b.n	b6f20 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b6f2c:	7b23      	ldrb	r3, [r4, #12]
   b6f2e:	2b02      	cmp	r3, #2
   b6f30:	d064      	beq.n	b6ffc <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b6f32:	68a0      	ldr	r0, [r4, #8]
   b6f34:	f003 fb50 	bl	ba5d8 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b6f38:	68a0      	ldr	r0, [r4, #8]
   b6f3a:	f003 fb55 	bl	ba5e8 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6f3e:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6f42:	f88d 3000 	strb.w	r3, [sp]
   b6f46:	463a      	mov	r2, r7
   b6f48:	233c      	movs	r3, #60	; 0x3c
   b6f4a:	4631      	mov	r1, r6
   b6f4c:	a806      	add	r0, sp, #24
   b6f4e:	f004 fa7d 	bl	bb44c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b6f52:	9d06      	ldr	r5, [sp, #24]
   b6f54:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b6f56:	b933      	cbnz	r3, b6f66 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b6f58:	7b23      	ldrb	r3, [r4, #12]
   b6f5a:	2b02      	cmp	r3, #2
   b6f5c:	d003      	beq.n	b6f66 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b6f5e:	2001      	movs	r0, #1
   b6f60:	f003 ffa6 	bl	baeb0 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b6f64:	e7f5      	b.n	b6f52 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b6f66:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b6f6a:	b31b      	cbz	r3, b6fb4 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b6f6c:	2000      	movs	r0, #0
   b6f6e:	f003 fe15 	bl	bab9c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6f72:	b120      	cbz	r0, b6f7e <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b6f74:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b6f76:	b913      	cbnz	r3, b6f7e <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b6f78:	f003 fe72 	bl	bac60 <spark_process>
    }
   b6f7c:	e7fa      	b.n	b6f74 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6f7e:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b6f80:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b6f84:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b6f86:	1e59      	subs	r1, r3, #1
   b6f88:	424b      	negs	r3, r1
   b6f8a:	414b      	adcs	r3, r1
   b6f8c:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b6f90:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b6f94:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b6f98:	b90b      	cbnz	r3, b6f9e <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b6f9a:	f007 f927 	bl	be1ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6f9e:	ab05      	add	r3, sp, #20
   b6fa0:	9300      	str	r3, [sp, #0]
   b6fa2:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b6fa6:	ab04      	add	r3, sp, #16
   b6fa8:	aa03      	add	r2, sp, #12
   b6faa:	f10d 010b 	add.w	r1, sp, #11
   b6fae:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b6fb2:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b6fb4:	68a0      	ldr	r0, [r4, #8]
   b6fb6:	f003 fb0f 	bl	ba5d8 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b6fba:	7b23      	ldrb	r3, [r4, #12]
   b6fbc:	2b02      	cmp	r3, #2
   b6fbe:	d017      	beq.n	b6ff0 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b6fc0:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b6fc4:	2500      	movs	r5, #0
   b6fc6:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b6fca:	b143      	cbz	r3, b6fde <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b6fcc:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b6fd0:	2203      	movs	r2, #3
   b6fd2:	4608      	mov	r0, r1
   b6fd4:	4798      	blx	r3
	    _M_manager = nullptr;
   b6fd6:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b6fda:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b6fde:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b6fe0:	68a0      	ldr	r0, [r4, #8]
   b6fe2:	7323      	strb	r3, [r4, #12]
   b6fe4:	f003 fb00 	bl	ba5e8 <os_mutex_unlock>
   b6fe8:	a807      	add	r0, sp, #28
   b6fea:	f7fe fdc7 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6fee:	e797      	b.n	b6f20 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b6ff0:	68a0      	ldr	r0, [r4, #8]
   b6ff2:	f003 faf9 	bl	ba5e8 <os_mutex_unlock>
   b6ff6:	a807      	add	r0, sp, #28
   b6ff8:	f7fe fdc0 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b6ffc:	b009      	add	sp, #36	; 0x24
   b6ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7000 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b7000:	6800      	ldr	r0, [r0, #0]
   b7002:	f7ff bf86 	b.w	b6f12 <_ZN19BackgroundPublishRK8thread_fEv>

000b7006 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7006:	b513      	push	{r0, r1, r4, lr}
   b7008:	460b      	mov	r3, r1
   b700a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b700c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7010:	466c      	mov	r4, sp
   b7012:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7016:	e893 0003 	ldmia.w	r3, {r0, r1}
   b701a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b701e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7022:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7026:	b002      	add	sp, #8
   b7028:	bd10      	pop	{r4, pc}
	...

000b702c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b702c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7030:	4606      	mov	r6, r0
   b7032:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b7034:	2014      	movs	r0, #20
   b7036:	4926      	ldr	r1, [pc, #152]	; (b70d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b7038:	4617      	mov	r7, r2
   b703a:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b703c:	f007 f8cc 	bl	be1d8 <_ZnwjRKSt9nothrow_t>
   b7040:	4604      	mov	r4, r0
   b7042:	b130      	cbz	r0, b7052 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b7044:	2000      	movs	r0, #0
            exited(false) {
   b7046:	e9c4 0000 	strd	r0, r0, [r4]
   b704a:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b704e:	7420      	strb	r0, [r4, #16]
   b7050:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7052:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b7054:	2c00      	cmp	r4, #0
   b7056:	d031      	beq.n	b70bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b7058:	491d      	ldr	r1, [pc, #116]	; (b70d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b705a:	2010      	movs	r0, #16
   b705c:	f007 f8bc 	bl	be1d8 <_ZnwjRKSt9nothrow_t>
   b7060:	4605      	mov	r5, r0
   b7062:	b168      	cbz	r0, b7080 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b7064:	2300      	movs	r3, #0
   b7066:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7068:	4601      	mov	r1, r0
   b706a:	4638      	mov	r0, r7
   b706c:	f7ff ffcb 	bl	b7006 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7070:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7072:	68aa      	ldr	r2, [r5, #8]
   b7074:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7076:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7078:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b707a:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b707c:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b707e:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b7080:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b7082:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b7084:	b137      	cbz	r7, b7094 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b7086:	4638      	mov	r0, r7
   b7088:	f7fd fc28 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b708c:	2110      	movs	r1, #16
   b708e:	4638      	mov	r0, r7
   b7090:	f7fd f805 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7094:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b7096:	6803      	ldr	r3, [r0, #0]
   b7098:	b183      	cbz	r3, b70bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b709a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b709c:	464a      	mov	r2, r9
   b709e:	e9cd 0300 	strd	r0, r3, [sp]
   b70a2:	4641      	mov	r1, r8
   b70a4:	4b0b      	ldr	r3, [pc, #44]	; (b70d4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b70a6:	3004      	adds	r0, #4
   b70a8:	f003 fa6e 	bl	ba588 <os_thread_create>
   b70ac:	b930      	cbnz	r0, b70bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b70ae:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b70b0:	7c1b      	ldrb	r3, [r3, #16]
   b70b2:	b94b      	cbnz	r3, b70c8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b70b4:	2001      	movs	r0, #1
   b70b6:	f003 fadf 	bl	ba678 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b70ba:	e7f8      	b.n	b70ae <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b70bc:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b70be:	2300      	movs	r3, #0
   b70c0:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b70c2:	b108      	cbz	r0, b70c8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b70c4:	f7ff fea8 	bl	b6e18 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b70c8:	4630      	mov	r0, r6
   b70ca:	b003      	add	sp, #12
   b70cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b70d0:	000c0868 	.word	0x000c0868
   b70d4:	000b6dd5 	.word	0x000b6dd5

000b70d8 <_ZN19BackgroundPublishRK5startEv>:
{
   b70d8:	b530      	push	{r4, r5, lr}
    if(!thread)
   b70da:	6843      	ldr	r3, [r0, #4]
{
   b70dc:	b087      	sub	sp, #28
   b70de:	4604      	mov	r4, r0
    if(!thread)
   b70e0:	b9c3      	cbnz	r3, b7114 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b70e2:	3008      	adds	r0, #8
   b70e4:	f003 fa70 	bl	ba5c8 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b70e8:	4b0b      	ldr	r3, [pc, #44]	; (b7118 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b70ea:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b70ec:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b70ee:	4b0b      	ldr	r3, [pc, #44]	; (b711c <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b70f0:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b70f2:	9304      	str	r3, [sp, #16]
   b70f4:	f7fc ffcf 	bl	b4096 <_Znwj>
   b70f8:	4605      	mov	r5, r0
   b70fa:	b138      	cbz	r0, b710c <_ZN19BackgroundPublishRK5startEv+0x34>
   b70fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7100:	9300      	str	r3, [sp, #0]
   b7102:	4907      	ldr	r1, [pc, #28]	; (b7120 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b7104:	2302      	movs	r3, #2
   b7106:	aa02      	add	r2, sp, #8
   b7108:	f7ff ff90 	bl	b702c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b710c:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b710e:	a802      	add	r0, sp, #8
   b7110:	f7fd fbe4 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
}
   b7114:	b007      	add	sp, #28
   b7116:	bd30      	pop	{r4, r5, pc}
   b7118:	000b7001 	.word	0x000b7001
   b711c:	000b6e05 	.word	0x000b6e05
   b7120:	000bfdf8 	.word	0x000bfdf8

000b7124 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b7124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7128:	4604      	mov	r4, r0
   b712a:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b712c:	6880      	ldr	r0, [r0, #8]
   b712e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7130:	4698      	mov	r8, r3
   b7132:	460d      	mov	r5, r1
   b7134:	4616      	mov	r6, r2
   b7136:	f003 fa4f 	bl	ba5d8 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b713a:	6863      	ldr	r3, [r4, #4]
   b713c:	b11b      	cbz	r3, b7146 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b713e:	7b23      	ldrb	r3, [r4, #12]
   b7140:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b7144:	b133      	cbz	r3, b7154 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b7146:	68a0      	ldr	r0, [r4, #8]
   b7148:	f003 fa4e 	bl	ba5e8 <os_mutex_unlock>
    {
        return false;
   b714c:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b714e:	b005      	add	sp, #20
   b7150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7154:	68a0      	ldr	r0, [r4, #8]
   b7156:	f003 fa47 	bl	ba5e8 <os_mutex_unlock>
    if(!name)
   b715a:	2d00      	cmp	r5, #0
   b715c:	d03d      	beq.n	b71da <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b715e:	2240      	movs	r2, #64	; 0x40
   b7160:	4629      	mov	r1, r5
   b7162:	f104 000d 	add.w	r0, r4, #13
   b7166:	f007 fe4a 	bl	bedfe <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b716a:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b716e:	b38e      	cbz	r6, b71d4 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7170:	f240 4201 	movw	r2, #1025	; 0x401
   b7174:	4631      	mov	r1, r6
   b7176:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b717a:	f007 fe40 	bl	bedfe <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b717e:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b7182:	2300      	movs	r3, #0
   b7184:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b7186:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b7188:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b718c:	b13b      	cbz	r3, b719e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b718e:	2202      	movs	r2, #2
   b7190:	4639      	mov	r1, r7
   b7192:	4668      	mov	r0, sp
   b7194:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7196:	68fb      	ldr	r3, [r7, #12]
   b7198:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b719a:	68bb      	ldr	r3, [r7, #8]
   b719c:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b719e:	4629      	mov	r1, r5
   b71a0:	4668      	mov	r0, sp
   b71a2:	f7ff ff30 	bl	b7006 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b71a6:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b71a8:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b71ac:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b71b0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b71b2:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b71b4:	4668      	mov	r0, sp
   b71b6:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b71ba:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b71be:	9203      	str	r2, [sp, #12]
   b71c0:	f7fd fb8c 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b71c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b71c6:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b71ca:	2001      	movs	r0, #1
    event_flags = flags;
   b71cc:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b71d0:	7320      	strb	r0, [r4, #12]
    return true;
   b71d2:	e7bc      	b.n	b714e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b71d4:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b71d8:	e7d3      	b.n	b7182 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b71da:	4628      	mov	r0, r5
   b71dc:	e7b7      	b.n	b714e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000b71de <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b71de:	4770      	bx	lr

000b71e0 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b71e0:	4770      	bx	lr

000b71e2 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b71e2:	b510      	push	{r4, lr}
}
   b71e4:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b71e6:	4604      	mov	r4, r0
}
   b71e8:	f7fc ff59 	bl	b409e <_ZdlPvj>
   b71ec:	4620      	mov	r0, r4
   b71ee:	bd10      	pop	{r4, pc}

000b71f0 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b71f0:	b510      	push	{r4, lr}
}
   b71f2:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b71f4:	4604      	mov	r4, r0
}
   b71f6:	f7fc ff52 	bl	b409e <_ZdlPvj>
   b71fa:	4620      	mov	r0, r4
   b71fc:	bd10      	pop	{r4, pc}
	...

000b7200 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b7200:	b510      	push	{r4, lr}
   b7202:	4b05      	ldr	r3, [pc, #20]	; (b7218 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b7204:	4604      	mov	r4, r0
   b7206:	f840 3b1c 	str.w	r3, [r0], #28
   b720a:	f006 f93d 	bl	bd488 <_ZN6StringD1Ev>
   b720e:	1d20      	adds	r0, r4, #4
   b7210:	f006 f93a 	bl	bd488 <_ZN6StringD1Ev>
}
   b7214:	4620      	mov	r0, r4
   b7216:	bd10      	pop	{r4, pc}
   b7218:	000bfe88 	.word	0x000bfe88

000b721c <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b721c:	b510      	push	{r4, lr}
   b721e:	4604      	mov	r4, r0
}
   b7220:	f7ff ffee 	bl	b7200 <_ZN22LocalTimePosixTimezoneD1Ev>
   b7224:	4620      	mov	r0, r4
   b7226:	2158      	movs	r1, #88	; 0x58
   b7228:	f7fc ff39 	bl	b409e <_ZdlPvj>
   b722c:	4620      	mov	r0, r4
   b722e:	bd10      	pop	{r4, pc}

000b7230 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b7230:	b510      	push	{r4, lr}
   b7232:	4b04      	ldr	r3, [pc, #16]	; (b7244 <_ZN9LocalTimeD1Ev+0x14>)
   b7234:	4604      	mov	r4, r0
   b7236:	f840 3b04 	str.w	r3, [r0], #4
   b723a:	f7ff ffe1 	bl	b7200 <_ZN22LocalTimePosixTimezoneD1Ev>
   b723e:	4620      	mov	r0, r4
   b7240:	bd10      	pop	{r4, pc}
   b7242:	bf00      	nop
   b7244:	000bfe58 	.word	0x000bfe58

000b7248 <_ZN9LocalTimeD0Ev>:
   b7248:	b510      	push	{r4, lr}
   b724a:	4604      	mov	r4, r0
   b724c:	f7ff fff0 	bl	b7230 <_ZN9LocalTimeD1Ev>
   b7250:	4620      	mov	r0, r4
   b7252:	2160      	movs	r1, #96	; 0x60
   b7254:	f7fc ff23 	bl	b409e <_ZdlPvj>
   b7258:	4620      	mov	r0, r4
   b725a:	bd10      	pop	{r4, pc}

000b725c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b725c:	f020 0302 	bic.w	r3, r0, #2
   b7260:	2b01      	cmp	r3, #1
   b7262:	d003      	beq.n	b726c <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b7264:	1f43      	subs	r3, r0, #5
   b7266:	4258      	negs	r0, r3
   b7268:	4158      	adcs	r0, r3
   b726a:	4770      	bx	lr
   b726c:	4618      	mov	r0, r3
   b726e:	4770      	bx	lr

000b7270 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b7270:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b7274:	7103      	strb	r3, [r0, #4]
   b7276:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b727a:	7143      	strb	r3, [r0, #5]
   b727c:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b7280:	7183      	strb	r3, [r0, #6]
   b7282:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b7286:	71c3      	strb	r3, [r0, #7]
   b7288:	4770      	bx	lr

000b728a <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b728a:	b538      	push	{r3, r4, r5, lr}
   b728c:	4604      	mov	r4, r0
   b728e:	460d      	mov	r5, r1
   b7290:	3004      	adds	r0, #4
   b7292:	3104      	adds	r1, #4
   b7294:	f006 f97f 	bl	bd596 <_ZN6StringaSERKS_>
   b7298:	f105 0114 	add.w	r1, r5, #20
   b729c:	f104 0014 	add.w	r0, r4, #20
   b72a0:	f7ff ffe6 	bl	b7270 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b72a4:	f105 011c 	add.w	r1, r5, #28
   b72a8:	f104 001c 	add.w	r0, r4, #28
   b72ac:	f006 f973 	bl	bd596 <_ZN6StringaSERKS_>
   b72b0:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b72b4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b72b8:	f7ff ffda 	bl	b7270 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b72bc:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b72c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b72c4:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b72c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b72cc:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b72d0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b72d4:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b72d8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b72dc:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b72e0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b72e4:	f7ff ffc4 	bl	b7270 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b72e8:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b72ec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b72f0:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b72f4:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b72f8:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b72fc:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b7300:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b7304:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b7308:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b730c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b7310:	f7ff ffae 	bl	b7270 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b7314:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b7318:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b731c:	bd38      	pop	{r3, r4, r5, pc}

000b731e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b731e:	680b      	ldr	r3, [r1, #0]
   b7320:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7322:	684b      	ldr	r3, [r1, #4]
   b7324:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7326:	b113      	cbz	r3, b732e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b7328:	685a      	ldr	r2, [r3, #4]
   b732a:	3201      	adds	r2, #1
   b732c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b732e:	4770      	bx	lr

000b7330 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b7330:	4a02      	ldr	r2, [pc, #8]	; (b733c <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b7332:	6002      	str	r2, [r0, #0]
   b7334:	684a      	ldr	r2, [r1, #4]
   b7336:	6042      	str	r2, [r0, #4]
   b7338:	4770      	bx	lr
   b733a:	bf00      	nop
   b733c:	000bfe68 	.word	0x000bfe68

000b7340 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b7340:	4a02      	ldr	r2, [pc, #8]	; (b734c <_ZN12LocalTimeHMSC1Ev+0xc>)
   b7342:	6002      	str	r2, [r0, #0]
   b7344:	2200      	movs	r2, #0
   b7346:	6042      	str	r2, [r0, #4]
}
   b7348:	4770      	bx	lr
   b734a:	bf00      	nop
   b734c:	000bfe68 	.word	0x000bfe68

000b7350 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b7350:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b7352:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b7354:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b7356:	8083      	strh	r3, [r0, #4]
   b7358:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b735a:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b735c:	ab05      	add	r3, sp, #20
   b735e:	9300      	str	r3, [sp, #0]
   b7360:	4913      	ldr	r1, [pc, #76]	; (b73b0 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b7362:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b7364:	ab04      	add	r3, sp, #16
   b7366:	aa03      	add	r2, sp, #12
   b7368:	4628      	mov	r0, r5
   b736a:	f003 fd41 	bl	badf0 <sscanf>
   b736e:	2803      	cmp	r0, #3
   b7370:	d107      	bne.n	b7382 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b7372:	9b03      	ldr	r3, [sp, #12]
   b7374:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b7376:	9b04      	ldr	r3, [sp, #16]
   b7378:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b737a:	9b05      	ldr	r3, [sp, #20]
   b737c:	71a3      	strb	r3, [r4, #6]
}
   b737e:	b007      	add	sp, #28
   b7380:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b7382:	490c      	ldr	r1, [pc, #48]	; (b73b4 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b7384:	ab04      	add	r3, sp, #16
   b7386:	aa03      	add	r2, sp, #12
   b7388:	4628      	mov	r0, r5
   b738a:	f003 fd31 	bl	badf0 <sscanf>
   b738e:	2802      	cmp	r0, #2
   b7390:	d104      	bne.n	b739c <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b7392:	9b03      	ldr	r3, [sp, #12]
   b7394:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b7396:	9b04      	ldr	r3, [sp, #16]
   b7398:	7163      	strb	r3, [r4, #5]
   b739a:	e7f0      	b.n	b737e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b739c:	4906      	ldr	r1, [pc, #24]	; (b73b8 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b739e:	aa03      	add	r2, sp, #12
   b73a0:	4628      	mov	r0, r5
   b73a2:	f003 fd25 	bl	badf0 <sscanf>
   b73a6:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b73a8:	bf04      	itt	eq
   b73aa:	9b03      	ldreq	r3, [sp, #12]
   b73ac:	7123      	strbeq	r3, [r4, #4]
}
   b73ae:	e7e6      	b.n	b737e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b73b0:	000bfe1c 	.word	0x000bfe1c
   b73b4:	000bfe1f 	.word	0x000bfe1f
   b73b8:	000bfc2f 	.word	0x000bfc2f

000b73bc <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b73bc:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b73c0:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b73c4:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b73c8:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b73ca:	bfb8      	it	lt
   b73cc:	4808      	ldrlt	r0, [pc, #32]	; (b73f0 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b73ce:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b73d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b73d6:	bfbd      	ittte	lt
   b73d8:	fb00 3002 	mlalt	r0, r0, r2, r3
   b73dc:	1840      	addlt	r0, r0, r1
   b73de:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b73e0:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b73e4:	bfa4      	itt	ge
   b73e6:	fb00 3002 	mlage	r0, r0, r2, r3
   b73ea:	1840      	addge	r0, r0, r1
}
   b73ec:	4770      	bx	lr
   b73ee:	bf00      	nop
   b73f0:	fffff1f0 	.word	0xfffff1f0

000b73f4 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b73f4:	b508      	push	{r3, lr}
   b73f6:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b73fa:	b14b      	cbz	r3, b7410 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b73fc:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b7400:	b943      	cbnz	r3, b7414 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b7402:	302c      	adds	r0, #44	; 0x2c
   b7404:	f7ff ffda 	bl	b73bc <_ZNK12LocalTimeHMS9toSecondsEv>
   b7408:	fab0 f080 	clz	r0, r0
   b740c:	0940      	lsrs	r0, r0, #5
   b740e:	bd08      	pop	{r3, pc}
   b7410:	2001      	movs	r0, #1
   b7412:	e7fc      	b.n	b740e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b7414:	2000      	movs	r0, #0
   b7416:	e7fa      	b.n	b740e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b7418 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b7418:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b741c:	b943      	cbnz	r3, b7430 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b741e:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7422:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b7424:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7428:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b742a:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b742e:	600b      	str	r3, [r1, #0]
}
   b7430:	4770      	bx	lr

000b7432 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b7432:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b7436:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b7438:	b9b3      	cbnz	r3, b7468 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b743a:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b743e:	688c      	ldr	r4, [r1, #8]
   b7440:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b7442:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b7446:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b7448:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b744c:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b744e:	bfb5      	itete	lt
   b7450:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b7452:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b7454:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b7456:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b7458:	bfb5      	itete	lt
   b745a:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b745e:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b7462:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b7464:	189b      	addge	r3, r3, r2
   b7466:	600b      	str	r3, [r1, #0]
}
   b7468:	bd30      	pop	{r4, r5, pc}
	...

000b746c <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b746c:	b508      	push	{r3, lr}
   b746e:	4a05      	ldr	r2, [pc, #20]	; (b7484 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b7470:	6002      	str	r2, [r0, #0]
   b7472:	2200      	movs	r2, #0
   b7474:	4603      	mov	r3, r0
   b7476:	6042      	str	r2, [r0, #4]
   b7478:	3008      	adds	r0, #8
   b747a:	f7ff ff61 	bl	b7340 <_ZN12LocalTimeHMSC1Ev>
}
   b747e:	4618      	mov	r0, r3
   b7480:	bd08      	pop	{r3, pc}
   b7482:	bf00      	nop
   b7484:	000bfe78 	.word	0x000bfe78

000b7488 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b7488:	2300      	movs	r3, #0
   b748a:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b748c:	8183      	strh	r3, [r0, #12]
   b748e:	7383      	strb	r3, [r0, #14]
}
   b7490:	4770      	bx	lr
	...

000b7494 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b7494:	b530      	push	{r4, r5, lr}
   b7496:	4604      	mov	r4, r0
   b7498:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b749a:	460d      	mov	r5, r1
   b749c:	b111      	cbz	r1, b74a4 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b749e:	780b      	ldrb	r3, [r1, #0]
   b74a0:	2b4d      	cmp	r3, #77	; 0x4d
   b74a2:	d005      	beq.n	b74b0 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b74a4:	4620      	mov	r0, r4
}
   b74a6:	b007      	add	sp, #28
   b74a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b74ac:	f7ff bfec 	b.w	b7488 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b74b0:	ab05      	add	r3, sp, #20
   b74b2:	9300      	str	r3, [sp, #0]
   b74b4:	4911      	ldr	r1, [pc, #68]	; (b74fc <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b74b6:	ab04      	add	r3, sp, #16
   b74b8:	aa03      	add	r2, sp, #12
   b74ba:	4628      	mov	r0, r5
   b74bc:	f003 fc98 	bl	badf0 <sscanf>
   b74c0:	2803      	cmp	r0, #3
   b74c2:	d116      	bne.n	b74f2 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b74c4:	9b03      	ldr	r3, [sp, #12]
   b74c6:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b74c8:	9b04      	ldr	r3, [sp, #16]
   b74ca:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b74cc:	9b05      	ldr	r3, [sp, #20]
   b74ce:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b74d0:	212f      	movs	r1, #47	; 0x2f
   b74d2:	4628      	mov	r0, r5
   b74d4:	f007 fc30 	bl	bed38 <strchr>
        if (cp) {
   b74d8:	b140      	cbz	r0, b74ec <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b74da:	1c41      	adds	r1, r0, #1
   b74dc:	f104 0008 	add.w	r0, r4, #8
   b74e0:	f7ff ff36 	bl	b7350 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b74e4:	2301      	movs	r3, #1
   b74e6:	71e3      	strb	r3, [r4, #7]
}
   b74e8:	b007      	add	sp, #28
   b74ea:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b74ec:	81a0      	strh	r0, [r4, #12]
   b74ee:	73a0      	strb	r0, [r4, #14]
}
   b74f0:	e7f8      	b.n	b74e4 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b74f2:	4620      	mov	r0, r4
   b74f4:	f7ff ffc8 	bl	b7488 <_ZN15LocalTimeChange5clearEv>
   b74f8:	e7f6      	b.n	b74e8 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b74fa:	bf00      	nop
   b74fc:	000bfe37 	.word	0x000bfe37

000b7500 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b7500:	4b10      	ldr	r3, [pc, #64]	; (b7544 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b7502:	4911      	ldr	r1, [pc, #68]	; (b7548 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7504:	b510      	push	{r4, lr}
   b7506:	4604      	mov	r4, r0
   b7508:	f840 3b04 	str.w	r3, [r0], #4
   b750c:	f006 f807 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b7510:	f104 0014 	add.w	r0, r4, #20
   b7514:	f7ff ff14 	bl	b7340 <_ZN12LocalTimeHMSC1Ev>
   b7518:	490b      	ldr	r1, [pc, #44]	; (b7548 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b751a:	f104 001c 	add.w	r0, r4, #28
   b751e:	f005 fffe 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b7522:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b7526:	f7ff ff0b 	bl	b7340 <_ZN12LocalTimeHMSC1Ev>
   b752a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b752e:	f7ff ff9d 	bl	b746c <_ZN15LocalTimeChangeC1Ev>
   b7532:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7536:	f7ff ff99 	bl	b746c <_ZN15LocalTimeChangeC1Ev>
   b753a:	2300      	movs	r3, #0
   b753c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b7540:	4620      	mov	r0, r4
   b7542:	bd10      	pop	{r4, pc}
   b7544:	000bfe88 	.word	0x000bfe88
   b7548:	000c06e1 	.word	0x000c06e1

000b754c <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b754c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7550:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b7552:	4608      	mov	r0, r1
   b7554:	f007 fc1a 	bl	bed8c <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b7558:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b755a:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b755c:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b755e:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b7562:	493f      	ldr	r1, [pc, #252]	; (b7660 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b7564:	9801      	ldr	r0, [sp, #4]
   b7566:	aa01      	add	r2, sp, #4
   b7568:	f007 fc98 	bl	bee9c <strtok_r>
   b756c:	4601      	mov	r1, r0
   b756e:	2800      	cmp	r0, #0
   b7570:	d062      	beq.n	b7638 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b7572:	2d01      	cmp	r5, #1
   b7574:	f105 0301 	add.w	r3, r5, #1
   b7578:	d053      	beq.n	b7622 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b757a:	2d02      	cmp	r5, #2
   b757c:	d056      	beq.n	b762c <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b757e:	2d00      	cmp	r5, #0
   b7580:	d146      	bne.n	b7610 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b7582:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b7584:	f892 9000 	ldrb.w	r9, [r2]
   b7588:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b758c:	4615      	mov	r5, r2
   b758e:	4617      	mov	r7, r2
   b7590:	f102 0201 	add.w	r2, r2, #1
   b7594:	d8f6      	bhi.n	b7584 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b7596:	2200      	movs	r2, #0
   b7598:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b759a:	f104 001c 	add.w	r0, r4, #28
   b759e:	f006 f81c 	bl	bd5da <_ZN6StringaSEPKc>
                valid = true;
   b75a2:	2201      	movs	r2, #1
                *cp = save2;
   b75a4:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b75a8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b75ac:	782a      	ldrb	r2, [r5, #0]
   b75ae:	b36a      	cbz	r2, b760c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b75b0:	f897 a000 	ldrb.w	sl, [r7]
   b75b4:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b75b8:	2a3f      	cmp	r2, #63	; 0x3f
   b75ba:	46b9      	mov	r9, r7
   b75bc:	46bb      	mov	fp, r7
   b75be:	f107 0701 	add.w	r7, r7, #1
   b75c2:	d9f5      	bls.n	b75b0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b75c4:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b75c6:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b75ca:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b75ce:	4629      	mov	r1, r5
   b75d0:	4638      	mov	r0, r7
   b75d2:	f7ff febd 	bl	b7350 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b75d6:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b75da:	f1ba 0f00 	cmp.w	sl, #0
   b75de:	d015      	beq.n	b760c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b75e0:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b75e2:	f81b ab01 	ldrb.w	sl, [fp], #1
   b75e6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b75ea:	d8f9      	bhi.n	b75e0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b75ec:	2200      	movs	r2, #0
   b75ee:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b75f0:	4649      	mov	r1, r9
   b75f2:	1d20      	adds	r0, r4, #4
   b75f4:	f005 fff1 	bl	bd5da <_ZN6StringaSEPKc>
                        *cp = save2;
   b75f8:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b75fc:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b7600:	f1ba 0f00 	cmp.w	sl, #0
   b7604:	d006      	beq.n	b7614 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b7606:	4629      	mov	r1, r5
   b7608:	f7ff fea2 	bl	b7350 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b760c:	2501      	movs	r5, #1
   b760e:	e7a8      	b.n	b7562 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b7610:	461d      	mov	r5, r3
   b7612:	e7a6      	b.n	b7562 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b7614:	4639      	mov	r1, r7
   b7616:	f7ff fe2b 	bl	b7270 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b761a:	7e23      	ldrb	r3, [r4, #24]
   b761c:	3b01      	subs	r3, #1
   b761e:	7623      	strb	r3, [r4, #24]
   b7620:	e7f4      	b.n	b760c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b7622:	4640      	mov	r0, r8
   b7624:	f7ff ff36 	bl	b7494 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7628:	2502      	movs	r5, #2
   b762a:	e79a      	b.n	b7562 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b762c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7630:	f7ff ff30 	bl	b7494 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7634:	2503      	movs	r5, #3
   b7636:	e794      	b.n	b7562 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b7638:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b763c:	b143      	cbz	r3, b7650 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b763e:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b7642:	b92a      	cbnz	r2, b7650 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b7644:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7648:	f7ff ff1e 	bl	b7488 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b764c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b7650:	4630      	mov	r0, r6
   b7652:	f003 fbb5 	bl	badc0 <free>

    return valid;
}
   b7656:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b765a:	b003      	add	sp, #12
   b765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7660:	000bfe41 	.word	0x000bfe41

000b7664 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b7664:	b538      	push	{r3, r4, r5, lr}
   b7666:	4b13      	ldr	r3, [pc, #76]	; (b76b4 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b7668:	4604      	mov	r4, r0
   b766a:	460d      	mov	r5, r1
   b766c:	f840 3b04 	str.w	r3, [r0], #4
   b7670:	4911      	ldr	r1, [pc, #68]	; (b76b8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b7672:	f005 ff54 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b7676:	f104 0014 	add.w	r0, r4, #20
   b767a:	f7ff fe61 	bl	b7340 <_ZN12LocalTimeHMSC1Ev>
   b767e:	490e      	ldr	r1, [pc, #56]	; (b76b8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b7680:	f104 001c 	add.w	r0, r4, #28
   b7684:	f005 ff4b 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b7688:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b768c:	f7ff fe58 	bl	b7340 <_ZN12LocalTimeHMSC1Ev>
   b7690:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7694:	f7ff feea 	bl	b746c <_ZN15LocalTimeChangeC1Ev>
   b7698:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b769c:	f7ff fee6 	bl	b746c <_ZN15LocalTimeChangeC1Ev>
   b76a0:	2300      	movs	r3, #0
   b76a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b76a6:	4629      	mov	r1, r5
   b76a8:	4620      	mov	r0, r4
   b76aa:	f7ff ff4f 	bl	b754c <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b76ae:	4620      	mov	r0, r4
   b76b0:	bd38      	pop	{r3, r4, r5, pc}
   b76b2:	bf00      	nop
   b76b4:	000bfe88 	.word	0x000bfe88
   b76b8:	000c06e1 	.word	0x000c06e1

000b76bc <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b76bc:	b510      	push	{r4, lr}
   b76be:	4604      	mov	r4, r0
   b76c0:	b088      	sub	sp, #32
   b76c2:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b76c4:	3068      	adds	r0, #104	; 0x68
   b76c6:	a901      	add	r1, sp, #4
   b76c8:	f007 fa48 	bl	beb5c <asctime_r>
    int len = strlen(ascstr);
   b76cc:	a801      	add	r0, sp, #4
   b76ce:	f007 fb7a 	bl	bedc6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b76d2:	ab08      	add	r3, sp, #32
   b76d4:	4418      	add	r0, r3
   b76d6:	2300      	movs	r3, #0
   b76d8:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b76dc:	a901      	add	r1, sp, #4
   b76de:	4620      	mov	r0, r4
   b76e0:	f005 ff1d 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
}
   b76e4:	4620      	mov	r0, r4
   b76e6:	b008      	add	sp, #32
   b76e8:	bd10      	pop	{r4, pc}
	...

000b76ec <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b76ec:	b538      	push	{r3, r4, r5, lr}
   b76ee:	4604      	mov	r4, r0
    if (config.isZ()) {
   b76f0:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b76f2:	460d      	mov	r5, r1
    if (config.isZ()) {
   b76f4:	f7ff fe7e 	bl	b73f4 <_ZNK22LocalTimePosixTimezone3isZEv>
   b76f8:	b128      	cbz	r0, b7706 <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b76fa:	4909      	ldr	r1, [pc, #36]	; (b7720 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b76fc:	4620      	mov	r0, r4
   b76fe:	f005 ff0e 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b7702:	4620      	mov	r0, r4
   b7704:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b7706:	6828      	ldr	r0, [r5, #0]
   b7708:	f7ff fda8 	bl	b725c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b770c:	b128      	cbz	r0, b771a <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b770e:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b7712:	4620      	mov	r0, r4
   b7714:	f005 ff4e 	bl	bd5b4 <_ZN6StringC1ERKS_>
   b7718:	e7f3      	b.n	b7702 <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b771a:	f105 0120 	add.w	r1, r5, #32
   b771e:	e7f8      	b.n	b7712 <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b7720:	000bfe43 	.word	0x000bfe43

000b7724 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b7724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7728:	4680      	mov	r8, r0
   b772a:	b0a8      	sub	sp, #160	; 0xa0
   b772c:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b772e:	4615      	mov	r5, r2
   b7730:	b12a      	cbz	r2, b773e <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b7732:	4b47      	ldr	r3, [pc, #284]	; (b7850 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b7734:	4610      	mov	r0, r2
   b7736:	6819      	ldr	r1, [r3, #0]
   b7738:	f007 fb15 	bl	bed66 <strcmp>
   b773c:	b938      	cbnz	r0, b774e <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b773e:	4621      	mov	r1, r4
   b7740:	4640      	mov	r0, r8
   b7742:	f7ff ffbb 	bl	b76bc <_ZN16LocalTimeConvert7timeStrEv>
}
   b7746:	4640      	mov	r0, r8
   b7748:	b028      	add	sp, #160	; 0xa0
   b774a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b774e:	4629      	mov	r1, r5
   b7750:	223f      	movs	r2, #63	; 0x3f
   b7752:	a818      	add	r0, sp, #96	; 0x60
   b7754:	f007 fb53 	bl	bedfe <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7758:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b775a:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b775c:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7760:	f007 fb31 	bl	bedc6 <strlen>
    String zoneNameStr = zoneName();
   b7764:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7766:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b7768:	a803      	add	r0, sp, #12
   b776a:	f7ff ffbf 	bl	b76ec <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b776e:	1d20      	adds	r0, r4, #4
   b7770:	f7ff fe40 	bl	b73f4 <_ZNK22LocalTimePosixTimezone3isZEv>
   b7774:	b348      	cbz	r0, b77ca <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b7776:	4937      	ldr	r1, [pc, #220]	; (b7854 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b7778:	a807      	add	r0, sp, #28
   b777a:	f007 fafe 	bl	bed7a <strcpy>
   b777e:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b7780:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b7782:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b7786:	45ba      	cmp	sl, r7
   b7788:	d94c      	bls.n	b7824 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b778a:	7833      	ldrb	r3, [r6, #0]
   b778c:	2b25      	cmp	r3, #37	; 0x25
   b778e:	f107 0901 	add.w	r9, r7, #1
   b7792:	d117      	bne.n	b77c4 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b7794:	7873      	ldrb	r3, [r6, #1]
   b7796:	2b7a      	cmp	r3, #122	; 0x7a
   b7798:	d136      	bne.n	b7808 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b779a:	a807      	add	r0, sp, #28
   b779c:	f007 fb13 	bl	bedc6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b77a0:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b77a2:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b77a4:	1838      	adds	r0, r7, r0
   b77a6:	ebaa 0207 	sub.w	r2, sl, r7
   b77aa:	1cb1      	adds	r1, r6, #2
   b77ac:	4418      	add	r0, r3
   b77ae:	f007 fa27 	bl	bec00 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b77b2:	462a      	mov	r2, r5
   b77b4:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b77b6:	4630      	mov	r0, r6
   b77b8:	f007 fa22 	bl	bec00 <memcpy>
            len = strlen(format_str);
   b77bc:	a818      	add	r0, sp, #96	; 0x60
   b77be:	f007 fb02 	bl	bedc6 <strlen>
   b77c2:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b77c4:	3601      	adds	r6, #1
   b77c6:	464f      	mov	r7, r9
   b77c8:	e7db      	b.n	b7782 <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b77ca:	6820      	ldr	r0, [r4, #0]
   b77cc:	f7ff fd46 	bl	b725c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b77d0:	b1b8      	cbz	r0, b7802 <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b77d2:	f104 0018 	add.w	r0, r4, #24
   b77d6:	f7ff fdf1 	bl	b73bc <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b77da:	223c      	movs	r2, #60	; 0x3c
   b77dc:	fb90 f3f2 	sdiv	r3, r0, r2
   b77e0:	2b00      	cmp	r3, #0
   b77e2:	bfb8      	it	lt
   b77e4:	425b      	neglt	r3, r3
   b77e6:	fbb3 f1f2 	udiv	r1, r3, r2
   b77ea:	fb02 3311 	mls	r3, r2, r1, r3
   b77ee:	9300      	str	r3, [sp, #0]
   b77f0:	4a19      	ldr	r2, [pc, #100]	; (b7858 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b77f2:	4b1a      	ldr	r3, [pc, #104]	; (b785c <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b77f4:	fb90 f3f3 	sdiv	r3, r0, r3
   b77f8:	2110      	movs	r1, #16
   b77fa:	a807      	add	r0, sp, #28
   b77fc:	f003 fb00 	bl	bae00 <snprintf>
   b7800:	e7bd      	b.n	b777e <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b7802:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b7806:	e7e6      	b.n	b77d6 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b7808:	2b5a      	cmp	r3, #90	; 0x5a
   b780a:	d1db      	bne.n	b77c4 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b780c:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b780e:	ab18      	add	r3, sp, #96	; 0x60
   b7810:	1978      	adds	r0, r7, r5
   b7812:	ebaa 0207 	sub.w	r2, sl, r7
   b7816:	1cb1      	adds	r1, r6, #2
   b7818:	4418      	add	r0, r3
   b781a:	f007 f9f1 	bl	bec00 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b781e:	9903      	ldr	r1, [sp, #12]
   b7820:	462a      	mov	r2, r5
   b7822:	e7c8      	b.n	b77b6 <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b7824:	2100      	movs	r1, #0
   b7826:	222e      	movs	r2, #46	; 0x2e
   b7828:	a80c      	add	r0, sp, #48	; 0x30
   b782a:	910b      	str	r1, [sp, #44]	; 0x2c
   b782c:	f007 fa10 	bl	bec50 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b7830:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b7834:	aa18      	add	r2, sp, #96	; 0x60
   b7836:	2132      	movs	r1, #50	; 0x32
   b7838:	a80b      	add	r0, sp, #44	; 0x2c
   b783a:	f003 fb19 	bl	bae70 <strftime>
    return String(buf);    
   b783e:	a90b      	add	r1, sp, #44	; 0x2c
   b7840:	4640      	mov	r0, r8
   b7842:	f005 fe6c 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b7846:	a803      	add	r0, sp, #12
   b7848:	f005 fe1e 	bl	bd488 <_ZN6StringD1Ev>
   b784c:	e77b      	b.n	b7746 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b784e:	bf00      	nop
   b7850:	2003de84 	.word	0x2003de84
   b7854:	000bfe43 	.word	0x000bfe43
   b7858:	000bfe45 	.word	0x000bfe45
   b785c:	fffff1f0 	.word	0xfffff1f0

000b7860 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b7860:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b7862:	4d09      	ldr	r5, [pc, #36]	; (b7888 <_ZN9LocalTime8instanceEv+0x28>)
   b7864:	682b      	ldr	r3, [r5, #0]
   b7866:	b963      	cbnz	r3, b7882 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b7868:	2060      	movs	r0, #96	; 0x60
   b786a:	f7fc fc14 	bl	b4096 <_Znwj>
   b786e:	4604      	mov	r4, r0
   b7870:	b130      	cbz	r0, b7880 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b7872:	4b06      	ldr	r3, [pc, #24]	; (b788c <_ZN9LocalTime8instanceEv+0x2c>)
   b7874:	f840 3b04 	str.w	r3, [r0], #4
   b7878:	f7ff fe42 	bl	b7500 <_ZN22LocalTimePosixTimezoneC1Ev>
   b787c:	2364      	movs	r3, #100	; 0x64
   b787e:	65e3      	str	r3, [r4, #92]	; 0x5c
   b7880:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b7882:	6828      	ldr	r0, [r5, #0]
   b7884:	bd38      	pop	{r3, r4, r5, pc}
   b7886:	bf00      	nop
   b7888:	2003e444 	.word	0x2003e444
   b788c:	000bfe58 	.word	0x000bfe58

000b7890 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b7890:	f003 bb06 	b.w	baea0 <mktime>

000b7894 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b7894:	3901      	subs	r1, #1
   b7896:	290b      	cmp	r1, #11
   b7898:	d815      	bhi.n	b78c6 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b789a:	e8df f001 	tbb	[pc, r1]
   b789e:	0816      	.short	0x0816
   b78a0:	06160616 	.word	0x06160616
   b78a4:	16061616 	.word	0x16061616
   b78a8:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b78aa:	201e      	movs	r0, #30
   b78ac:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b78ae:	0783      	lsls	r3, r0, #30
   b78b0:	d10d      	bne.n	b78ce <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b78b2:	2364      	movs	r3, #100	; 0x64
   b78b4:	fb90 f2f3 	sdiv	r2, r0, r3
   b78b8:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b78bc:	2800      	cmp	r0, #0
   b78be:	bf0c      	ite	eq
   b78c0:	201c      	moveq	r0, #28
   b78c2:	201d      	movne	r0, #29
   b78c4:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b78c6:	2000      	movs	r0, #0
   b78c8:	4770      	bx	lr
            return 31;
   b78ca:	201f      	movs	r0, #31
   b78cc:	4770      	bx	lr
                return 28;
   b78ce:	201c      	movs	r0, #28
}
   b78d0:	4770      	bx	lr

000b78d2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b78d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b78d4:	2301      	movs	r3, #1
   b78d6:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b78d8:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b78dc:	3b01      	subs	r3, #1
   b78de:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b78e0:	2300      	movs	r3, #0
   b78e2:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b78e6:	4606      	mov	r6, r0
   b78e8:	460c      	mov	r4, r1
   b78ea:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b78ec:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b78ee:	4620      	mov	r0, r4
   b78f0:	f7ff ffce 	bl	b7890 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b78f4:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b78f8:	69a2      	ldr	r2, [r4, #24]
   b78fa:	429a      	cmp	r2, r3
   b78fc:	d003      	beq.n	b7906 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b78fe:	68e3      	ldr	r3, [r4, #12]
   b7900:	3301      	adds	r3, #1
   b7902:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b7904:	e7f3      	b.n	b78ee <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b7906:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b790a:	2d01      	cmp	r5, #1
   b790c:	d013      	beq.n	b7936 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b790e:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b7910:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b7912:	3d01      	subs	r5, #1
   b7914:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b7918:	441d      	add	r5, r3
   b791a:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b791c:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b7920:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b7924:	f7ff ffb6 	bl	b7894 <_ZN9LocalTime14lastDayOfMonthEii>
   b7928:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b792a:	bfc4      	itt	gt
   b792c:	3d07      	subgt	r5, #7
   b792e:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b7930:	4620      	mov	r0, r4
   b7932:	f7ff ffad 	bl	b7890 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b7936:	4621      	mov	r1, r4
   b7938:	f106 0008 	add.w	r0, r6, #8
   b793c:	f7ff fd6c 	bl	b7418 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b7940:	4638      	mov	r0, r7
   b7942:	f7ff fd76 	bl	b7432 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b7946:	4620      	mov	r0, r4
}
   b7948:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b794c:	f003 baa8 	b.w	baea0 <mktime>

000b7950 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b7950:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b7952:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b7956:	b085      	sub	sp, #20
   b7958:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b795a:	b92b      	cbnz	r3, b7968 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b795c:	f7ff ff80 	bl	b7860 <_ZN9LocalTime8instanceEv>
   b7960:	1d01      	adds	r1, r0, #4
   b7962:	1d20      	adds	r0, r4, #4
   b7964:	f7ff fc91 	bl	b728a <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b7968:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b796c:	2b00      	cmp	r3, #0
   b796e:	d065      	beq.n	b7a3c <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b7970:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b7974:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b7978:	4639      	mov	r1, r7
   b797a:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b797c:	463e      	mov	r6, r7
   b797e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b7982:	f003 fa7d 	bl	bae80 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b7986:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7988:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b798c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b798e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7992:	6833      	ldr	r3, [r6, #0]
   b7994:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b7996:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b799a:	a802      	add	r0, sp, #8
   b799c:	f7ff fcc8 	bl	b7330 <_ZN12LocalTimeHMSC1ERKS_>
   b79a0:	aa02      	add	r2, sp, #8
   b79a2:	4639      	mov	r1, r7
   b79a4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b79a8:	f7ff ff93 	bl	b78d2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b79ac:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b79b0:	f104 0118 	add.w	r1, r4, #24
   b79b4:	a802      	add	r0, sp, #8
   b79b6:	f7ff fcbb 	bl	b7330 <_ZN12LocalTimeHMSC1ERKS_>
   b79ba:	aa02      	add	r2, sp, #8
   b79bc:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b79c0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b79c4:	f7ff ff85 	bl	b78d2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b79c8:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b79cc:	4286      	cmp	r6, r0
   b79ce:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b79d2:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b79d6:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b79da:	da23      	bge.n	b7a24 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b79dc:	42b2      	cmp	r2, r6
   b79de:	eb73 0505 	sbcs.w	r5, r3, r5
   b79e2:	da19      	bge.n	b7a18 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b79e4:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b79e6:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b79e8:	6820      	ldr	r0, [r4, #0]
   b79ea:	f7ff fc37 	bl	b725c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b79ee:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b79f2:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b79f6:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b79f8:	bb10      	cbnz	r0, b7a40 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b79fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b79fe:	f7ff fcdd 	bl	b73bc <_ZNK12LocalTimeHMS9toSecondsEv>
   b7a02:	1a2d      	subs	r5, r5, r0
   b7a04:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b7a08:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b7a0c:	9901      	ldr	r1, [sp, #4]
   b7a0e:	a802      	add	r0, sp, #8
   b7a10:	f003 fa36 	bl	bae80 <localtime_r>
}
   b7a14:	b005      	add	sp, #20
   b7a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b7a18:	4282      	cmp	r2, r0
   b7a1a:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b7a1c:	bfb4      	ite	lt
   b7a1e:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b7a20:	2302      	movge	r3, #2
   b7a22:	e7e0      	b.n	b79e6 <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b7a24:	4282      	cmp	r2, r0
   b7a26:	eb73 0101 	sbcs.w	r1, r3, r1
   b7a2a:	da01      	bge.n	b7a30 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b7a2c:	2303      	movs	r3, #3
   b7a2e:	e7da      	b.n	b79e6 <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b7a30:	42b2      	cmp	r2, r6
   b7a32:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b7a34:	bfb4      	ite	lt
   b7a36:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b7a38:	2305      	movge	r3, #5
   b7a3a:	e7d4      	b.n	b79e6 <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b7a3c:	2306      	movs	r3, #6
   b7a3e:	e7d2      	b.n	b79e6 <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b7a40:	f104 0018 	add.w	r0, r4, #24
   b7a44:	e7db      	b.n	b79fe <_ZN16LocalTimeConvert7convertEv+0xae>

000b7a46 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7a46:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b7a48:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7a4a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7a4c:	4668      	mov	r0, sp
   b7a4e:	f7ff fc66 	bl	b731e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b7a52:	466a      	mov	r2, sp
   b7a54:	4629      	mov	r1, r5
   b7a56:	4620      	mov	r0, r4
   b7a58:	f004 f944 	bl	bbce4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b7a5c:	a801      	add	r0, sp, #4
   b7a5e:	f7fe f88d 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a62:	4620      	mov	r0, r4
   b7a64:	b003      	add	sp, #12
   b7a66:	bd30      	pop	{r4, r5, pc}

000b7a68 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b7a6a:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7a6c:	4604      	mov	r4, r0
   b7a6e:	4668      	mov	r0, sp
   b7a70:	f7ff fc55 	bl	b731e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b7a74:	466a      	mov	r2, sp
   b7a76:	4629      	mov	r1, r5
   b7a78:	4620      	mov	r0, r4
   b7a7a:	f004 f90f 	bl	bbc9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7a7e:	a801      	add	r0, sp, #4
   b7a80:	f7fe f87c 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a84:	4620      	mov	r0, r4
   b7a86:	b003      	add	sp, #12
   b7a88:	bd30      	pop	{r4, r5, pc}

000b7a8a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7a8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b7a8c:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7a8e:	4604      	mov	r4, r0
   b7a90:	4668      	mov	r0, sp
   b7a92:	f7ff fc44 	bl	b731e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b7a96:	466a      	mov	r2, sp
   b7a98:	4629      	mov	r1, r5
   b7a9a:	4620      	mov	r0, r4
   b7a9c:	f004 f8a7 	bl	bbbee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7aa0:	a801      	add	r0, sp, #4
   b7aa2:	f7fe f86b 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7aa6:	4620      	mov	r0, r4
   b7aa8:	b003      	add	sp, #12
   b7aaa:	bd30      	pop	{r4, r5, pc}

000b7aac <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b7aac:	4770      	bx	lr

000b7aae <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b7aae:	b510      	push	{r4, lr}
}
   b7ab0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b7ab2:	4604      	mov	r4, r0
}
   b7ab4:	f7fc faf3 	bl	b409e <_ZdlPvj>
   b7ab8:	4620      	mov	r0, r4
   b7aba:	bd10      	pop	{r4, pc}

000b7abc <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b7abc:	6803      	ldr	r3, [r0, #0]
   b7abe:	b2c9      	uxtb	r1, r1
   b7ac0:	689b      	ldr	r3, [r3, #8]
   b7ac2:	4718      	bx	r3

000b7ac4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b7ac4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b7ac6:	4d03      	ldr	r5, [pc, #12]	; (b7ad4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b7ac8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b7acc:	e9c0 5100 	strd	r5, r1, [r0]
}
   b7ad0:	bd30      	pop	{r4, r5, pc}
   b7ad2:	bf00      	nop
   b7ad4:	000bfe98 	.word	0x000bfe98

000b7ad8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b7ad8:	6840      	ldr	r0, [r0, #4]
   b7ada:	f003 bef9 	b.w	bb8d0 <_ZN7TwoWire5beginEv>

000b7ade <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b7ade:	b510      	push	{r4, lr}
   b7ae0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b7ae2:	6800      	ldr	r0, [r0, #0]
   b7ae4:	f003 ff4f 	bl	bb986 <_ZN7TwoWire6unlockEv>
   b7ae8:	4620      	mov	r0, r4
   b7aea:	bd10      	pop	{r4, pc}

000b7aec <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b7aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7af0:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b7af2:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7af4:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b7af6:	460d      	mov	r5, r1
   b7af8:	4616      	mov	r6, r2
   b7afa:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b7afc:	f003 ff3a 	bl	bb974 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b7b00:	b1a7      	cbz	r7, b7b2c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7b02:	68e1      	ldr	r1, [r4, #12]
   b7b04:	6860      	ldr	r0, [r4, #4]
   b7b06:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7b0a:	f003 ff14 	bl	bb936 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b7b0e:	0a29      	lsrs	r1, r5, #8
   b7b10:	6860      	ldr	r0, [r4, #4]
   b7b12:	f7ff ffd3 	bl	b7abc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7b16:	4629      	mov	r1, r5
   b7b18:	6860      	ldr	r0, [r4, #4]
   b7b1a:	f7ff ffcf 	bl	b7abc <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b7b1e:	6860      	ldr	r0, [r4, #4]
   b7b20:	2100      	movs	r1, #0
   b7b22:	f003 ff23 	bl	bb96c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b7b26:	b148      	cbz	r0, b7b3c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b7b28:	2400      	movs	r4, #0
   b7b2a:	e000      	b.n	b7b2e <_ZN6MB85RC8readDataEjPhj+0x42>
   b7b2c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b7b2e:	a801      	add	r0, sp, #4
   b7b30:	f7ff ffd5 	bl	b7ade <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b7b34:	4620      	mov	r0, r4
   b7b36:	b003      	add	sp, #12
   b7b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b7b3c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b7b3e:	7b21      	ldrb	r1, [r4, #12]
   b7b40:	6860      	ldr	r0, [r4, #4]
   b7b42:	46b8      	mov	r8, r7
   b7b44:	bf28      	it	cs
   b7b46:	f04f 0820 	movcs.w	r8, #32
   b7b4a:	2301      	movs	r3, #1
   b7b4c:	4642      	mov	r2, r8
   b7b4e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7b52:	f003 feda 	bl	bb90a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b7b56:	f006 fab7 	bl	be0c8 <_Z19__fetch_global_Wirev>
   b7b5a:	6803      	ldr	r3, [r0, #0]
   b7b5c:	691b      	ldr	r3, [r3, #16]
   b7b5e:	4798      	blx	r3
   b7b60:	4540      	cmp	r0, r8
   b7b62:	dbe1      	blt.n	b7b28 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b7b64:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b7b68:	f006 faae 	bl	be0c8 <_Z19__fetch_global_Wirev>
   b7b6c:	6803      	ldr	r3, [r0, #0]
   b7b6e:	695b      	ldr	r3, [r3, #20]
   b7b70:	4798      	blx	r3
   b7b72:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b7b76:	454e      	cmp	r6, r9
   b7b78:	d1f6      	bne.n	b7b68 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b7b7a:	4445      	add	r5, r8
				dataLen--;
   b7b7c:	eba7 0708 	sub.w	r7, r7, r8
   b7b80:	e7be      	b.n	b7b00 <_ZN6MB85RC8readDataEjPhj+0x14>

000b7b82 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7b82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b86:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b7b88:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7b8a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7b8c:	460e      	mov	r6, r1
   b7b8e:	4690      	mov	r8, r2
   b7b90:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b7b92:	f003 feef 	bl	bb974 <_ZN7TwoWire4lockEv>
   b7b96:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b7b9a:	f1b9 0f00 	cmp.w	r9, #0
   b7b9e:	d02a      	beq.n	b7bf6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b7ba0:	b34d      	cbz	r5, b7bf6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7ba2:	68e1      	ldr	r1, [r4, #12]
   b7ba4:	6860      	ldr	r0, [r4, #4]
   b7ba6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7baa:	f003 fec4 	bl	bb936 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b7bae:	0a31      	lsrs	r1, r6, #8
   b7bb0:	6860      	ldr	r0, [r4, #4]
   b7bb2:	f7ff ff83 	bl	b7abc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7bb6:	6860      	ldr	r0, [r4, #4]
   b7bb8:	4631      	mov	r1, r6
   b7bba:	f7ff ff7f 	bl	b7abc <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7bbe:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b7bc2:	4647      	mov	r7, r8
   b7bc4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b7bc8:	6860      	ldr	r0, [r4, #4]
   b7bca:	f817 1b01 	ldrb.w	r1, [r7], #1
   b7bce:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b7bd0:	3d01      	subs	r5, #1
				wire.write(*data);
   b7bd2:	689b      	ldr	r3, [r3, #8]
   b7bd4:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7bd6:	4555      	cmp	r5, sl
   b7bd8:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b7bdc:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7bde:	d001      	beq.n	b7be4 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b7be0:	2d00      	cmp	r5, #0
   b7be2:	d1f1      	bne.n	b7bc8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b7be4:	6860      	ldr	r0, [r4, #4]
   b7be6:	2101      	movs	r1, #1
   b7be8:	f003 fec0 	bl	bb96c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b7bec:	2800      	cmp	r0, #0
   b7bee:	d0d7      	beq.n	b7ba0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b7bf0:	f04f 0900 	mov.w	r9, #0
   b7bf4:	e7d1      	b.n	b7b9a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b7bf6:	a801      	add	r0, sp, #4
   b7bf8:	f7ff ff71 	bl	b7ade <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b7bfc:	4648      	mov	r0, r9
   b7bfe:	b003      	add	sp, #12
   b7c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7c04 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7c08:	b08b      	sub	sp, #44	; 0x2c
   b7c0a:	460e      	mov	r6, r1
   b7c0c:	4615      	mov	r5, r2
   b7c0e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b7c10:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7c12:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7c14:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b7c16:	f003 fead 	bl	bb974 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b7c1a:	42ae      	cmp	r6, r5
   b7c1c:	d229      	bcs.n	b7c72 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b7c1e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b7c20:	4425      	add	r5, r4
			while(numBytes > 0) {
   b7c22:	b18c      	cbz	r4, b7c48 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b7c24:	2c1e      	cmp	r4, #30
   b7c26:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b7c28:	f8d8 3000 	ldr.w	r3, [r8]
   b7c2c:	bf28      	it	cs
   b7c2e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b7c30:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b7c32:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7c36:	aa02      	add	r2, sp, #8
   b7c38:	463b      	mov	r3, r7
   b7c3a:	4631      	mov	r1, r6
   b7c3c:	4640      	mov	r0, r8
				framAddrTo -= count;
   b7c3e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b7c40:	47c8      	blx	r9
				if (!result) {
   b7c42:	b948      	cbnz	r0, b7c58 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7c44:	2400      	movs	r4, #0
   b7c46:	e000      	b.n	b7c4a <_ZN6MB85RC8moveDataEjjj+0x46>
   b7c48:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b7c4a:	a801      	add	r0, sp, #4
   b7c4c:	f7ff ff47 	bl	b7ade <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b7c50:	4620      	mov	r0, r4
   b7c52:	b00b      	add	sp, #44	; 0x2c
   b7c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b7c58:	f8d8 3000 	ldr.w	r3, [r8]
   b7c5c:	aa02      	add	r2, sp, #8
   b7c5e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7c62:	4629      	mov	r1, r5
   b7c64:	463b      	mov	r3, r7
   b7c66:	4640      	mov	r0, r8
   b7c68:	47c8      	blx	r9
				if (!result) {
   b7c6a:	2800      	cmp	r0, #0
   b7c6c:	d0ea      	beq.n	b7c44 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b7c6e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7c70:	e7d7      	b.n	b7c22 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b7c72:	d9e9      	bls.n	b7c48 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b7c74:	2c00      	cmp	r4, #0
   b7c76:	d0e7      	beq.n	b7c48 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b7c78:	f8d8 3000 	ldr.w	r3, [r8]
   b7c7c:	2c1e      	cmp	r4, #30
   b7c7e:	4627      	mov	r7, r4
   b7c80:	bf28      	it	cs
   b7c82:	271e      	movcs	r7, #30
   b7c84:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7c88:	aa02      	add	r2, sp, #8
   b7c8a:	463b      	mov	r3, r7
   b7c8c:	4631      	mov	r1, r6
   b7c8e:	4640      	mov	r0, r8
   b7c90:	47c8      	blx	r9
				if (!result) {
   b7c92:	2800      	cmp	r0, #0
   b7c94:	d0d6      	beq.n	b7c44 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b7c96:	f8d8 3000 	ldr.w	r3, [r8]
   b7c9a:	aa02      	add	r2, sp, #8
   b7c9c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7ca0:	4629      	mov	r1, r5
   b7ca2:	463b      	mov	r3, r7
   b7ca4:	4640      	mov	r0, r8
   b7ca6:	47c8      	blx	r9
				if (!result) {
   b7ca8:	2800      	cmp	r0, #0
   b7caa:	d0cb      	beq.n	b7c44 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b7cac:	443e      	add	r6, r7
				framAddrTo += count;
   b7cae:	443d      	add	r5, r7
				numBytes -= count;
   b7cb0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7cb2:	e7df      	b.n	b7c74 <_ZN6MB85RC8moveDataEjjj+0x70>

000b7cb4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b7cb4:	6803      	ldr	r3, [r0, #0]
   b7cb6:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b7cb8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b7cbc:	2101      	movs	r1, #1
   b7cbe:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b7cc2:	4770      	bx	lr

000b7cc4 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7cc4:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b7cc6:	6842      	ldr	r2, [r0, #4]
   b7cc8:	4603      	mov	r3, r0
   b7cca:	1054      	asrs	r4, r2, #1
   b7ccc:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b7cd0:	07d2      	lsls	r2, r2, #31
   b7cd2:	bf48      	it	mi
   b7cd4:	590a      	ldrmi	r2, [r1, r4]
   b7cd6:	681b      	ldr	r3, [r3, #0]
      }
   b7cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7cdc:	bf48      	it	mi
   b7cde:	58d3      	ldrmi	r3, [r2, r3]
   b7ce0:	4718      	bx	r3

000b7ce2 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b7ce2:	2a01      	cmp	r2, #1
   b7ce4:	d102      	bne.n	b7cec <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7ce6:	6001      	str	r1, [r0, #0]
      }
   b7ce8:	2000      	movs	r0, #0
   b7cea:	4770      	bx	lr
	  switch (__op)
   b7cec:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7cee:	bf04      	itt	eq
   b7cf0:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b7cf4:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b7cf8:	e7f6      	b.n	b7ce8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b7cfa <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b7cfa:	2a01      	cmp	r2, #1
   b7cfc:	d102      	bne.n	b7d04 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7cfe:	6001      	str	r1, [r0, #0]
      }
   b7d00:	2000      	movs	r0, #0
   b7d02:	4770      	bx	lr
	  switch (__op)
   b7d04:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7d06:	bf04      	itt	eq
   b7d08:	680b      	ldreq	r3, [r1, #0]
   b7d0a:	6003      	streq	r3, [r0, #0]
	      break;
   b7d0c:	e7f8      	b.n	b7d00 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b7d0e <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b7d0e:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b7d10:	f002 bc82 	b.w	ba618 <os_mutex_recursive_lock>

000b7d14 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b7d14:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b7d18:	4601      	mov	r1, r0
    if (stateHandler) {
   b7d1a:	b11b      	cbz	r3, b7d24 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7d1c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b7d20:	30c0      	adds	r0, #192	; 0xc0
   b7d22:	4718      	bx	r3
}
   b7d24:	4770      	bx	lr
	...

000b7d28 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b7d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b7d2a:	4d12      	ldr	r5, [pc, #72]	; (b7d74 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b7d2c:	4608      	mov	r0, r1
        eventData = "";
   b7d2e:	2a00      	cmp	r2, #0
   b7d30:	bf18      	it	ne
   b7d32:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b7d34:	460e      	mov	r6, r1
   b7d36:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b7d38:	f007 f845 	bl	bedc6 <strlen>
   b7d3c:	2840      	cmp	r0, #64	; 0x40
   b7d3e:	d816      	bhi.n	b7d6e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b7d40:	4628      	mov	r0, r5
   b7d42:	f007 f840 	bl	bedc6 <strlen>
   b7d46:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b7d4a:	d810      	bhi.n	b7d6e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b7d4c:	3043      	adds	r0, #67	; 0x43
   b7d4e:	f7fc f9a4 	bl	b409a <_Znaj>
    if (event) {
   b7d52:	4604      	mov	r4, r0
   b7d54:	b148      	cbz	r0, b7d6a <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b7d56:	4631      	mov	r1, r6
        event->flags = flags;
   b7d58:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b7d5c:	f007 f80d 	bl	bed7a <strcpy>
        strcpy(event->eventData, eventData);
   b7d60:	4629      	mov	r1, r5
   b7d62:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b7d66:	f007 f808 	bl	bed7a <strcpy>
}
   b7d6a:	4620      	mov	r0, r4
   b7d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b7d6e:	2400      	movs	r4, #0
   b7d70:	e7fb      	b.n	b7d6a <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b7d72:	bf00      	nop
   b7d74:	000c06e1 	.word	0x000c06e1

000b7d78 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b7d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7d7a:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b7d7c:	460a      	mov	r2, r1
   b7d7e:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b7d80:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b7d82:	1d01      	adds	r1, r0, #4
   b7d84:	a808      	add	r0, sp, #32
   b7d86:	f002 f881 	bl	b9e8c <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b7d8a:	9808      	ldr	r0, [sp, #32]
   b7d8c:	2100      	movs	r1, #0
   b7d8e:	f007 f92f 	bl	beff0 <open>
   b7d92:	4605      	mov	r5, r0
   b7d94:	a808      	add	r0, sp, #32
   b7d96:	f005 fb77 	bl	bd488 <_ZN6StringD1Ev>
    if (fd) {
   b7d9a:	2d00      	cmp	r5, #0
   b7d9c:	d060      	beq.n	b7e60 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b7d9e:	a908      	add	r1, sp, #32
   b7da0:	4628      	mov	r0, r5
   b7da2:	f007 f913 	bl	befcc <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b7da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b7da8:	492e      	ldr	r1, [pc, #184]	; (b7e64 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b7daa:	482f      	ldr	r0, [pc, #188]	; (b7e68 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7dac:	4632      	mov	r2, r6
   b7dae:	f7fe faa5 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b7db2:	2200      	movs	r2, #0
   b7db4:	4611      	mov	r1, r2
   b7db6:	4628      	mov	r0, r5
   b7db8:	f007 f910 	bl	befdc <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b7dbc:	2208      	movs	r2, #8
   b7dbe:	a906      	add	r1, sp, #24
   b7dc0:	4628      	mov	r0, r5
   b7dc2:	f007 f929 	bl	bf018 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b7dc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7dc8:	2f4a      	cmp	r7, #74	; 0x4a
   b7dca:	dd39      	ble.n	b7e40 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b7dcc:	4b27      	ldr	r3, [pc, #156]	; (b7e6c <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b7dce:	9a06      	ldr	r2, [sp, #24]
   b7dd0:	429a      	cmp	r2, r3
   b7dd2:	d135      	bne.n	b7e40 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b7dd4:	4b26      	ldr	r3, [pc, #152]	; (b7e70 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b7dd6:	9a07      	ldr	r2, [sp, #28]
   b7dd8:	429a      	cmp	r2, r3
   b7dda:	d131      	bne.n	b7e40 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b7ddc:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b7de0:	4610      	mov	r0, r2
   b7de2:	9205      	str	r2, [sp, #20]
   b7de4:	f7fc f959 	bl	b409a <_Znaj>
            if (result) {
   b7de8:	4604      	mov	r4, r0
   b7dea:	b1c0      	cbz	r0, b7e1e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b7dec:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b7dee:	4601      	mov	r1, r0
   b7df0:	9a05      	ldr	r2, [sp, #20]
   b7df2:	4628      	mov	r0, r5
   b7df4:	f007 f910 	bl	bf018 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b7df8:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b7dfc:	b9ab      	cbnz	r3, b7e2a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b7dfe:	1c63      	adds	r3, r4, #1
   b7e00:	4618      	mov	r0, r3
   b7e02:	9305      	str	r3, [sp, #20]
   b7e04:	f006 ffdf 	bl	bedc6 <strlen>
   b7e08:	283f      	cmp	r0, #63	; 0x3f
   b7e0a:	9b05      	ldr	r3, [sp, #20]
   b7e0c:	d80d      	bhi.n	b7e2a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b7e0e:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b7e12:	9200      	str	r2, [sp, #0]
   b7e14:	4917      	ldr	r1, [pc, #92]	; (b7e74 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b7e16:	4814      	ldr	r0, [pc, #80]	; (b7e68 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7e18:	4632      	mov	r2, r6
   b7e1a:	f7fe fa6f 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b7e1e:	4628      	mov	r0, r5
   b7e20:	f007 f8cc 	bl	befbc <close>
}
   b7e24:	4620      	mov	r0, r4
   b7e26:	b01f      	add	sp, #124	; 0x7c
   b7e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b7e2a:	4913      	ldr	r1, [pc, #76]	; (b7e78 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b7e2c:	480e      	ldr	r0, [pc, #56]	; (b7e68 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7e2e:	4632      	mov	r2, r6
   b7e30:	f7fe fa64 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b7e34:	2143      	movs	r1, #67	; 0x43
   b7e36:	4620      	mov	r0, r4
   b7e38:	f7fc f931 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b7e3c:	2400      	movs	r4, #0
   b7e3e:	e7ee      	b.n	b7e1e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b7e40:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b7e44:	9302      	str	r3, [sp, #8]
   b7e46:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7e4a:	9301      	str	r3, [sp, #4]
   b7e4c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b7e50:	9300      	str	r3, [sp, #0]
   b7e52:	490a      	ldr	r1, [pc, #40]	; (b7e7c <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b7e54:	9b06      	ldr	r3, [sp, #24]
   b7e56:	4804      	ldr	r0, [pc, #16]	; (b7e68 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7e58:	4632      	mov	r2, r6
   b7e5a:	f7fe fa4f 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
   b7e5e:	e7ed      	b.n	b7e3c <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b7e60:	462c      	mov	r4, r5
    return result;
   b7e62:	e7df      	b.n	b7e24 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b7e64:	000bfeac 	.word	0x000bfeac
   b7e68:	2003e448 	.word	0x2003e448
   b7e6c:	31b67663 	.word	0x31b67663
   b7e70:	00410801 	.word	0x00410801
   b7e74:	000bfec0 	.word	0x000bfec0
   b7e78:	000bfee2 	.word	0x000bfee2
   b7e7c:	000bff10 	.word	0x000bff10

000b7e80 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b7e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7e84:	4680      	mov	r8, r0
   b7e86:	4b28      	ldr	r3, [pc, #160]	; (b7f28 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b7e88:	f848 3b04 	str.w	r3, [r8], #4
   b7e8c:	4604      	mov	r4, r0
   b7e8e:	4640      	mov	r0, r8
   b7e90:	f001 ff14 	bl	b9cbc <_ZN14SequentialFileC1Ev>
   b7e94:	2202      	movs	r2, #2
   b7e96:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b7e98:	2500      	movs	r5, #0
   b7e9a:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b7e9e:	2308      	movs	r3, #8
   b7ea0:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b7ea2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b7ea6:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b7eaa:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b7eae:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b7eb2:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7eb4:	2020      	movs	r0, #32
   b7eb6:	f7fc f8ee 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7eba:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b7ebc:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7ebe:	3e01      	subs	r6, #1
   b7ec0:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b7ec2:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b7ec6:	4607      	mov	r7, r0
   b7ec8:	f44f 7000 	mov.w	r0, #512	; 0x200
   b7ecc:	f7fc f8e3 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7ed0:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b7ed4:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b7ed8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7edc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7ee4:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b7ee8:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b7eec:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b7ef0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b7ef4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b7ef8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b7efc:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b7f00:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b7f04:	4909      	ldr	r1, [pc, #36]	; (b7f2c <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b7f06:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b7f0a:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b7f0e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b7f12:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b7f16:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b7f1a:	4640      	mov	r0, r8
   b7f1c:	f001 ff14 	bl	b9d48 <_ZN14SequentialFile11withDirPathEPKc>
}
   b7f20:	4620      	mov	r0, r4
   b7f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7f26:	bf00      	nop
   b7f28:	000c012c 	.word	0x000c012c
   b7f2c:	000bff55 	.word	0x000bff55

000b7f30 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b7f30:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b7f32:	4d06      	ldr	r5, [pc, #24]	; (b7f4c <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b7f34:	682b      	ldr	r3, [r5, #0]
   b7f36:	b93b      	cbnz	r3, b7f48 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b7f38:	20d0      	movs	r0, #208	; 0xd0
   b7f3a:	f7fc f8ac 	bl	b4096 <_Znwj>
   b7f3e:	4604      	mov	r4, r0
   b7f40:	b108      	cbz	r0, b7f46 <_ZN17PublishQueuePosix8instanceEv+0x16>
   b7f42:	f7ff ff9d 	bl	b7e80 <_ZN17PublishQueuePosixC1Ev>
   b7f46:	602c      	str	r4, [r5, #0]
}
   b7f48:	6828      	ldr	r0, [r5, #0]
   b7f4a:	bd38      	pop	{r3, r4, r5, pc}
   b7f4c:	2003e44c 	.word	0x2003e44c

000b7f50 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b7f50:	6942      	ldr	r2, [r0, #20]
   b7f52:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b7f54:	1a9b      	subs	r3, r3, r2
   b7f56:	109b      	asrs	r3, r3, #2
   b7f58:	1e5a      	subs	r2, r3, #1
   b7f5a:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b7f5e:	1a5b      	subs	r3, r3, r1
   b7f60:	109b      	asrs	r3, r3, #2
   b7f62:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b7f66:	6902      	ldr	r2, [r0, #16]
   b7f68:	6880      	ldr	r0, [r0, #8]
   b7f6a:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b7f6c:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b7f70:	4770      	bx	lr

000b7f72 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b7f72:	b538      	push	{r3, r4, r5, lr}
   b7f74:	4605      	mov	r5, r0
   b7f76:	f7ff feca 	bl	b7d0e <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b7f7a:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b7f7e:	f7ff ffe7 	bl	b7f50 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b7f82:	4604      	mov	r4, r0
   b7f84:	b950      	cbnz	r0, b7f9c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b7f86:	1d28      	adds	r0, r5, #4
   b7f88:	f002 f9d4 	bl	ba334 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b7f8c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b7f90:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b7f92:	b11b      	cbz	r3, b7f9c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b7f94:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b7f98:	b903      	cbnz	r3, b7f9c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b7f9a:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b7f9c:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b7f9e:	f002 fb43 	bl	ba628 <os_mutex_recursive_unlock>
}
   b7fa2:	4620      	mov	r0, r4
   b7fa4:	bd38      	pop	{r3, r4, r5, pc}

000b7fa6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b7fa6:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b7fa8:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b7faa:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b7fac:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b7fae:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b7fb0:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b7fb2:	d002      	beq.n	b7fba <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b7fb4:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b7fb6:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b7fb8:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7fba:	68c0      	ldr	r0, [r0, #12]
   b7fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
   b7fc0:	f7fc f86d 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b7fc4:	6963      	ldr	r3, [r4, #20]
   b7fc6:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b7fc8:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b7fca:	685b      	ldr	r3, [r3, #4]
   b7fcc:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7fce:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b7fd2:	6122      	str	r2, [r4, #16]
   b7fd4:	e7ef      	b.n	b7fb6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b7fd8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b7fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fdc:	b085      	sub	sp, #20
   b7fde:	4604      	mov	r4, r0
   b7fe0:	f7ff fe95 	bl	b7d0e <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b7fe4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b808c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b7fe8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b8090 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b7fec:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b8094 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b7ff0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b7ff4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b7ff8:	4293      	cmp	r3, r2
   b7ffa:	d105      	bne.n	b8008 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b7ffc:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b7ffe:	b005      	add	sp, #20
   b8000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8004:	f002 bb10 	b.w	ba628 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b8008:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b800c:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b8010:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b8012:	f7ff ffc8 	bl	b7fa6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b8016:	4640      	mov	r0, r8
   b8018:	f002 f930 	bl	ba27c <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b801c:	2300      	movs	r3, #0
   b801e:	4602      	mov	r2, r0
   b8020:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b8022:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b8024:	4668      	mov	r0, sp
   b8026:	f001 ff31 	bl	b9e8c <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b802a:	9800      	ldr	r0, [sp, #0]
   b802c:	f240 2102 	movw	r1, #514	; 0x202
   b8030:	f006 ffde 	bl	beff0 <open>
   b8034:	4605      	mov	r5, r0
   b8036:	4668      	mov	r0, sp
   b8038:	f005 fa26 	bl	bd488 <_ZN6StringD1Ev>
            if (fd) {
   b803c:	b1c5      	cbz	r5, b8070 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b803e:	2208      	movs	r2, #8
   b8040:	4669      	mov	r1, sp
   b8042:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b8044:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b8048:	f006 fff8 	bl	bf03c <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b804c:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b8050:	f006 feb9 	bl	bedc6 <strlen>
   b8054:	4639      	mov	r1, r7
   b8056:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b805a:	4628      	mov	r0, r5
   b805c:	f006 ffee 	bl	bf03c <write>
                close(fd);
   b8060:	4628      	mov	r0, r5
   b8062:	f006 ffab 	bl	befbc <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b8066:	4808      	ldr	r0, [pc, #32]	; (b8088 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b8068:	4632      	mov	r2, r6
   b806a:	4659      	mov	r1, fp
   b806c:	f7fe f946 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b8070:	4631      	mov	r1, r6
   b8072:	4640      	mov	r0, r8
   b8074:	f002 f944 	bl	ba300 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b8078:	2f00      	cmp	r7, #0
   b807a:	d0b9      	beq.n	b7ff0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b807c:	2143      	movs	r1, #67	; 0x43
   b807e:	4638      	mov	r0, r7
   b8080:	f7fc f80d 	bl	b409e <_ZdlPvj>
   b8084:	e7b2      	b.n	b7fec <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b8086:	bf00      	nop
   b8088:	2003e448 	.word	0x2003e448
   b808c:	31b67663 	.word	0x31b67663
   b8090:	00410801 	.word	0x00410801
   b8094:	000bff63 	.word	0x000bff63

000b8098 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b8098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b809c:	4604      	mov	r4, r0
   b809e:	f7ff fe36 	bl	b7d0e <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b80a2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b80a6:	f7ff ff53 	bl	b7f50 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b80aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b80ac:	4298      	cmp	r0, r3
   b80ae:	d902      	bls.n	b80b6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b80b0:	4620      	mov	r0, r4
   b80b2:	f7ff ff91 	bl	b7fd8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b80b6:	f8df 8044 	ldr.w	r8, [pc, #68]	; b80fc <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b80ba:	4f0f      	ldr	r7, [pc, #60]	; (b80f8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b80bc:	1d26      	adds	r6, r4, #4
   b80be:	4630      	mov	r0, r6
   b80c0:	f002 f938 	bl	ba334 <_ZNK14SequentialFile11getQueueLenEv>
   b80c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b80c6:	4298      	cmp	r0, r3
   b80c8:	dc04      	bgt.n	b80d4 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b80ca:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b80cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b80d0:	f002 baaa 	b.w	ba628 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b80d4:	2101      	movs	r1, #1
   b80d6:	4630      	mov	r0, r6
   b80d8:	f002 f8dc 	bl	ba294 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b80dc:	4605      	mov	r5, r0
   b80de:	2800      	cmp	r0, #0
   b80e0:	d0ed      	beq.n	b80be <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b80e2:	4601      	mov	r1, r0
   b80e4:	2200      	movs	r2, #0
   b80e6:	4630      	mov	r0, r6
   b80e8:	f001 ff0c 	bl	b9f04 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b80ec:	462a      	mov	r2, r5
   b80ee:	4641      	mov	r1, r8
   b80f0:	4638      	mov	r0, r7
   b80f2:	f7fb fff3 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b80f6:	e7e2      	b.n	b80be <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b80f8:	2003e448 	.word	0x2003e448
   b80fc:	000bff80 	.word	0x000bff80

000b8100 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b8100:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b8102:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b8106:	430b      	orrs	r3, r1
   b8108:	d005      	beq.n	b8116 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b810a:	3840      	subs	r0, #64	; 0x40
   b810c:	ea50 0301 	orrs.w	r3, r0, r1
   b8110:	d10b      	bne.n	b812a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b8112:	2a09      	cmp	r2, #9
   b8114:	d109      	bne.n	b812a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b8116:	4905      	ldr	r1, [pc, #20]	; (b812c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b8118:	4805      	ldr	r0, [pc, #20]	; (b8130 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b811a:	f7fe f8ef 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b811e:	f7ff ff07 	bl	b7f30 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b8122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b8126:	f7ff bf57 	b.w	b7fd8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b812a:	bd08      	pop	{r3, pc}
   b812c:	000bff93 	.word	0x000bff93
   b8130:	2003e448 	.word	0x2003e448

000b8134 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b8134:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b8136:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b8138:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b813a:	b183      	cbz	r3, b815e <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b813c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b813e:	6945      	ldr	r5, [r0, #20]
   b8140:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b8142:	42ae      	cmp	r6, r5
   b8144:	d906      	bls.n	b8154 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b8146:	f855 0b04 	ldr.w	r0, [r5], #4
   b814a:	f44f 7100 	mov.w	r1, #512	; 0x200
   b814e:	f7fb ffa6 	bl	b409e <_ZdlPvj>
   b8152:	e7f6      	b.n	b8142 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b8154:	6861      	ldr	r1, [r4, #4]
   b8156:	6820      	ldr	r0, [r4, #0]
   b8158:	0089      	lsls	r1, r1, #2
   b815a:	f7fb ffa0 	bl	b409e <_ZdlPvj>
    }
   b815e:	4620      	mov	r0, r4
   b8160:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8164 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b8164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8166:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b816a:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b816c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b816e:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b8170:	b90a      	cbnz	r2, b8176 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b8172:	07d9      	lsls	r1, r3, #31
   b8174:	d505      	bpl.n	b8182 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8176:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b817a:	4b0a      	ldr	r3, [pc, #40]	; (b81a4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b817c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b817e:	4b0a      	ldr	r3, [pc, #40]	; (b81a8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b8180:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b8182:	4621      	mov	r1, r4
   b8184:	4668      	mov	r0, sp
   b8186:	f7fe ff3e 	bl	b7006 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b818a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b818c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b818e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8190:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8192:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b8194:	4668      	mov	r0, sp
   b8196:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8198:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b819a:	9203      	str	r2, [sp, #12]
   b819c:	f7fc fb9e 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
	}
   b81a0:	b004      	add	sp, #16
   b81a2:	bd10      	pop	{r4, pc}
   b81a4:	000b7cc5 	.word	0x000b7cc5
   b81a8:	000b7ce3 	.word	0x000b7ce3

000b81ac <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b81ac:	b570      	push	{r4, r5, r6, lr}
   b81ae:	b086      	sub	sp, #24
   b81b0:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b81b2:	f002 fd65 	bl	bac80 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b81b6:	b948      	cbnz	r0, b81cc <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b81b8:	4b43      	ldr	r3, [pc, #268]	; (b82c8 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b81ba:	a902      	add	r1, sp, #8
   b81bc:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b81c0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b81c4:	f7ff ffce 	bl	b8164 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b81c8:	b006      	add	sp, #24
   b81ca:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b81cc:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b81d0:	b11d      	cbz	r5, b81da <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b81d2:	2301      	movs	r3, #1
   b81d4:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b81d8:	e7f6      	b.n	b81c8 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b81da:	f002 fa5d 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b81de:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b81e2:	1ac0      	subs	r0, r0, r3
   b81e4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b81e8:	4298      	cmp	r0, r3
   b81ea:	d3ed      	bcc.n	b81c8 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b81ec:	1d26      	adds	r6, r4, #4
   b81ee:	4629      	mov	r1, r5
   b81f0:	4630      	mov	r0, r6
   b81f2:	f002 f84f 	bl	ba294 <_ZN14SequentialFile16getFileFromQueueEb>
   b81f6:	4601      	mov	r1, r0
   b81f8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b81fc:	2800      	cmp	r0, #0
   b81fe:	d052      	beq.n	b82a6 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b8200:	4620      	mov	r0, r4
   b8202:	f7ff fdb9 	bl	b7d78 <_ZN17PublishQueuePosix13readQueueFileEi>
   b8206:	4605      	mov	r5, r0
   b8208:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b820c:	2800      	cmp	r0, #0
   b820e:	d035      	beq.n	b827c <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b8210:	f002 fa42 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b8214:	ae02      	add	r6, sp, #8
   b8216:	2500      	movs	r5, #0
   b8218:	4b2c      	ldr	r3, [pc, #176]	; (b82cc <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b821a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b821e:	4631      	mov	r1, r6
   b8220:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8224:	9302      	str	r3, [sp, #8]
   b8226:	9503      	str	r5, [sp, #12]
   b8228:	f7ff ff9c 	bl	b8164 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b822c:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b8230:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b8234:	9200      	str	r2, [sp, #0]
   b8236:	4926      	ldr	r1, [pc, #152]	; (b82d0 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b8238:	4a26      	ldr	r2, [pc, #152]	; (b82d4 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b823a:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b823e:	42a8      	cmp	r0, r5
   b8240:	bf08      	it	eq
   b8242:	460a      	moveq	r2, r1
   b8244:	3301      	adds	r3, #1
   b8246:	4924      	ldr	r1, [pc, #144]	; (b82d8 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b8248:	4824      	ldr	r0, [pc, #144]	; (b82dc <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b824a:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b824e:	f7fe f855 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b8252:	f7fe fe1b 	bl	b6e8c <_ZN19BackgroundPublishRK8instanceEv>
   b8256:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b825a:	4b21      	ldr	r3, [pc, #132]	; (b82e0 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b825c:	9305      	str	r3, [sp, #20]
   b825e:	e9cd 6500 	strd	r6, r5, [sp]
   b8262:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b8264:	4b1f      	ldr	r3, [pc, #124]	; (b82e4 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8266:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b8268:	9304      	str	r3, [sp, #16]
   b826a:	f811 3b01 	ldrb.w	r3, [r1], #1
   b826e:	3242      	adds	r2, #66	; 0x42
   b8270:	f7fe ff58 	bl	b7124 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b8274:	4630      	mov	r0, r6
   b8276:	f7fc fb31 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   b827a:	e7a5      	b.n	b81c8 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b827c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b8280:	4919      	ldr	r1, [pc, #100]	; (b82e8 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b8282:	4816      	ldr	r0, [pc, #88]	; (b82dc <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b8284:	f7fb ff2a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b8288:	2101      	movs	r1, #1
   b828a:	4630      	mov	r0, r6
   b828c:	f002 f802 	bl	ba294 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b8290:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b8294:	462a      	mov	r2, r5
   b8296:	4630      	mov	r0, r6
   b8298:	f001 fe34 	bl	b9f04 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b829c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b82a0:	2b00      	cmp	r3, #0
   b82a2:	d1b5      	bne.n	b8210 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b82a4:	e795      	b.n	b81d2 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b82a6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b82aa:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b82ae:	429a      	cmp	r2, r3
   b82b0:	d007      	beq.n	b82c2 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b82b2:	681b      	ldr	r3, [r3, #0]
   b82b4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b82b8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b82bc:	f7ff fe73 	bl	b7fa6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b82c0:	e7ec      	b.n	b829c <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b82c2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b82c6:	e784      	b.n	b81d2 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b82c8:	000b82ed 	.word	0x000b82ed
   b82cc:	000b866d 	.word	0x000b866d
   b82d0:	000bffc2 	.word	0x000bffc2
   b82d4:	000c04b4 	.word	0x000c04b4
   b82d8:	000bffe3 	.word	0x000bffe3
   b82dc:	2003e448 	.word	0x2003e448
   b82e0:	000b7cb5 	.word	0x000b7cb5
   b82e4:	000b7cfb 	.word	0x000b7cfb
   b82e8:	000bffc6 	.word	0x000bffc6

000b82ec <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b82ec:	b513      	push	{r0, r1, r4, lr}
   b82ee:	4604      	mov	r4, r0
   b82f0:	f002 fcc6 	bl	bac80 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b82f4:	b190      	cbz	r0, b831c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b82f6:	f002 f9cf 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b82fa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b82fe:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b8302:	4b0d      	ldr	r3, [pc, #52]	; (b8338 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b8304:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b8308:	9300      	str	r3, [sp, #0]
   b830a:	4669      	mov	r1, sp
   b830c:	2300      	movs	r3, #0
   b830e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8312:	9301      	str	r3, [sp, #4]
   b8314:	f7ff ff26 	bl	b8164 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b8318:	b002      	add	sp, #8
   b831a:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b831c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b8320:	b11b      	cbz	r3, b832a <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b8322:	2301      	movs	r3, #1
   b8324:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b8328:	e7f6      	b.n	b8318 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b832a:	4620      	mov	r0, r4
   b832c:	f7ff fe21 	bl	b7f72 <_ZN17PublishQueuePosix12getNumEventsEv>
   b8330:	2800      	cmp	r0, #0
   b8332:	d0f6      	beq.n	b8322 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b8334:	e7f0      	b.n	b8318 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b8336:	bf00      	nop
   b8338:	000b81ad 	.word	0x000b81ad

000b833c <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b833c:	b570      	push	{r4, r5, r6, lr}
   b833e:	4605      	mov	r5, r0
   b8340:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b8342:	2000      	movs	r0, #0
   b8344:	f002 fc3a 	bl	babbc <system_thread_get_state>
   b8348:	2801      	cmp	r0, #1
   b834a:	d005      	beq.n	b8358 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b834c:	493e      	ldr	r1, [pc, #248]	; (b8448 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b834e:	483f      	ldr	r0, [pc, #252]	; (b844c <_ZN17PublishQueuePosix5setupEv+0x110>)
   b8350:	f7fd ffc6 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
}
   b8354:	b018      	add	sp, #96	; 0x60
   b8356:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b8358:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b835c:	f002 f94c 	bl	ba5f8 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8360:	4b3b      	ldr	r3, [pc, #236]	; (b8450 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b8362:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8364:	4b3b      	ldr	r3, [pc, #236]	; (b8454 <_ZN17PublishQueuePosix5setupEv+0x118>)
   b8366:	9307      	str	r3, [sp, #28]
        };
   b8368:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b836a:	4b3b      	ldr	r3, [pc, #236]	; (b8458 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b836c:	9306      	str	r3, [sp, #24]
   b836e:	a808      	add	r0, sp, #32
   b8370:	f7fc fd8c 	bl	b4e8c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b8374:	a908      	add	r1, sp, #32
   b8376:	a80c      	add	r0, sp, #48	; 0x30
   b8378:	f7fc fd88 	bl	b4e8c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b837c:	a90c      	add	r1, sp, #48	; 0x30
   b837e:	a810      	add	r0, sp, #64	; 0x40
   b8380:	f7fc fd84 	bl	b4e8c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b8384:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8386:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b8388:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b838a:	f7fb fe84 	bl	b4096 <_Znwj>
   b838e:	4604      	mov	r4, r0
   b8390:	b160      	cbz	r0, b83ac <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b8392:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8394:	4601      	mov	r1, r0
   b8396:	a810      	add	r0, sp, #64	; 0x40
   b8398:	f7fe fe35 	bl	b7006 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b839c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b839e:	68a2      	ldr	r2, [r4, #8]
   b83a0:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b83a2:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b83a4:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b83a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b83a8:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b83aa:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b83ac:	4b2b      	ldr	r3, [pc, #172]	; (b845c <_ZN17PublishQueuePosix5setupEv+0x120>)
   b83ae:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b83b0:	4b2b      	ldr	r3, [pc, #172]	; (b8460 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b83b2:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b83b4:	4b2b      	ldr	r3, [pc, #172]	; (b8464 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b83b6:	9414      	str	r4, [sp, #80]	; 0x50
   b83b8:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b83ba:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b83bc:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b83c0:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b83c2:	f7fb fe68 	bl	b4096 <_Znwj>
   b83c6:	4604      	mov	r4, r0
   b83c8:	b1d8      	cbz	r0, b8402 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b83ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b83cc:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b83ce:	b133      	cbz	r3, b83de <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b83d0:	2202      	movs	r2, #2
   b83d2:	a914      	add	r1, sp, #80	; 0x50
   b83d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b83d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b83d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b83da:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b83dc:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b83de:	4b22      	ldr	r3, [pc, #136]	; (b8468 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b83e0:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b83e2:	4a22      	ldr	r2, [pc, #136]	; (b846c <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b83e4:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b83e6:	ab01      	add	r3, sp, #4
   b83e8:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b83ec:	2100      	movs	r1, #0
   b83ee:	f002 fbc5 	bl	bab7c <system_subscribe_event>
        if (r) {
   b83f2:	b130      	cbz	r0, b8402 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b83f4:	4620      	mov	r0, r4
   b83f6:	f7fc fa71 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b83fa:	2110      	movs	r1, #16
   b83fc:	4620      	mov	r0, r4
   b83fe:	f7fb fe4e 	bl	b409e <_ZdlPvj>
   b8402:	a814      	add	r0, sp, #80	; 0x50
   b8404:	f7fc fa6a 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   b8408:	a810      	add	r0, sp, #64	; 0x40
   b840a:	f7fc fa67 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   b840e:	a80c      	add	r0, sp, #48	; 0x30
   b8410:	f7fc fa64 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   b8414:	a808      	add	r0, sp, #32
   b8416:	f7fc fa61 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   b841a:	a804      	add	r0, sp, #16
   b841c:	f7fc fa5e 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b8420:	f7fe fd34 	bl	b6e8c <_ZN19BackgroundPublishRK8instanceEv>
   b8424:	f7fe fe58 	bl	b70d8 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b8428:	1d28      	adds	r0, r5, #4
   b842a:	f001 feaf 	bl	ba18c <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b842e:	4628      	mov	r0, r5
   b8430:	f7ff fe32 	bl	b8098 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b8434:	4b0e      	ldr	r3, [pc, #56]	; (b8470 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b8436:	9314      	str	r3, [sp, #80]	; 0x50
   b8438:	a914      	add	r1, sp, #80	; 0x50
   b843a:	2300      	movs	r3, #0
   b843c:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b8440:	9315      	str	r3, [sp, #84]	; 0x54
   b8442:	f7ff fe8f 	bl	b8164 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8446:	e785      	b.n	b8354 <_ZN17PublishQueuePosix5setupEv+0x18>
   b8448:	000c0002 	.word	0x000c0002
   b844c:	2003e448 	.word	0x2003e448
   b8450:	000b8101 	.word	0x000b8101
   b8454:	000b48d3 	.word	0x000b48d3
   b8458:	000b48bf 	.word	0x000b48bf
   b845c:	000b4899 	.word	0x000b4899
   b8460:	000b4fb5 	.word	0x000b4fb5
   b8464:	000c0002 	.word	0x000c0002
   b8468:	000b48ef 	.word	0x000b48ef
   b846c:	000b4871 	.word	0x000b4871
   b8470:	000b82ed 	.word	0x000b82ed

000b8474 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b8474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8478:	4606      	mov	r6, r0
   b847a:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b847c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b847e:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8480:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8482:	1a47      	subs	r7, r0, r1
   b8484:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b8488:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b848a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b848e:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8490:	d927      	bls.n	b84e2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b8492:	1b5d      	subs	r5, r3, r5
   b8494:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8496:	6832      	ldr	r2, [r6, #0]
   b8498:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b849a:	b10c      	cbz	r4, b84a0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b849c:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b84a0:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b84a2:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b84a4:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b84a6:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b84a8:	eba3 0201 	sub.w	r2, r3, r1
   b84ac:	d913      	bls.n	b84d6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b84ae:	4299      	cmp	r1, r3
   b84b0:	d002      	beq.n	b84b8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b84b2:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b84b4:	f006 fbb2 	bl	bec1c <memmove>
	_M_node = __new_node;
   b84b8:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b84ba:	6823      	ldr	r3, [r4, #0]
   b84bc:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b84be:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b84c2:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b84c4:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b84c6:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b84c8:	59e3      	ldr	r3, [r4, r7]
   b84ca:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b84cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b84d0:	6233      	str	r3, [r6, #32]
    }
   b84d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b84d6:	4299      	cmp	r1, r3
   b84d8:	d0ee      	beq.n	b84b8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b84da:	1d38      	adds	r0, r7, #4
   b84dc:	1a80      	subs	r0, r0, r2
   b84de:	4420      	add	r0, r4
   b84e0:	e7e8      	b.n	b84b4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b84e2:	f103 0802 	add.w	r8, r3, #2
   b84e6:	454b      	cmp	r3, r9
   b84e8:	bf2c      	ite	cs
   b84ea:	4498      	addcs	r8, r3
   b84ec:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b84ee:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b84f2:	d301      	bcc.n	b84f8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b84f4:	f005 fe74 	bl	be1e0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b84f8:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b84fc:	f7fb fdcb 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8500:	eba8 0505 	sub.w	r5, r8, r5
   b8504:	086d      	lsrs	r5, r5, #1
   b8506:	4682      	mov	sl, r0
   b8508:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b850a:	b10c      	cbz	r4, b8510 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b850c:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b8510:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b8512:	6971      	ldr	r1, [r6, #20]
   b8514:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b8516:	442c      	add	r4, r5
	  if (_Num)
   b8518:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b851a:	4454      	add	r4, sl
   b851c:	d003      	beq.n	b8526 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b851e:	1a52      	subs	r2, r2, r1
   b8520:	4620      	mov	r0, r4
   b8522:	f006 fb7b 	bl	bec1c <memmove>
	::operator delete(__p
   b8526:	6871      	ldr	r1, [r6, #4]
   b8528:	6830      	ldr	r0, [r6, #0]
   b852a:	0089      	lsls	r1, r1, #2
   b852c:	f7fb fdb7 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b8530:	e9c6 a800 	strd	sl, r8, [r6]
   b8534:	e7c0      	b.n	b84b8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b8538 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8538:	b5f0      	push	{r4, r5, r6, r7, lr}
   b853a:	b085      	sub	sp, #20
   b853c:	4604      	mov	r4, r0
   b853e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b8542:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8546:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8548:	460f      	mov	r7, r1
   b854a:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b854c:	f7ff fbec 	bl	b7d28 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b8550:	4605      	mov	r5, r0
   b8552:	2800      	cmp	r0, #0
   b8554:	d03c      	beq.n	b85d0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b8556:	4b3f      	ldr	r3, [pc, #252]	; (b8654 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b8558:	493f      	ldr	r1, [pc, #252]	; (b8658 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b855a:	4840      	ldr	r0, [pc, #256]	; (b865c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b855c:	2e00      	cmp	r6, #0
   b855e:	bf18      	it	ne
   b8560:	4633      	movne	r3, r6
   b8562:	463a      	mov	r2, r7
   b8564:	f7fd feca 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
   b8568:	4620      	mov	r0, r4
   b856a:	f7ff fbd0 	bl	b7d0e <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b856e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b8572:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b8576:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b8578:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b857a:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b857e:	d029      	beq.n	b85d4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8580:	b103      	cbz	r3, b8584 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b8582:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b8584:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b8588:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b858a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b858c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b8590:	4628      	mov	r0, r5
   b8592:	f001 fecf 	bl	ba334 <_ZNK14SequentialFile11getQueueLenEv>
   b8596:	9003      	str	r0, [sp, #12]
   b8598:	4630      	mov	r0, r6
   b859a:	f7ff fcd9 	bl	b7f50 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b859e:	9002      	str	r0, [sp, #8]
   b85a0:	f002 fb6e 	bl	bac80 <spark_cloud_flag_connected>
   b85a4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b85a8:	9000      	str	r0, [sp, #0]
   b85aa:	492d      	ldr	r1, [pc, #180]	; (b8660 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b85ac:	482b      	ldr	r0, [pc, #172]	; (b865c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b85ae:	f7fd fea5 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b85b2:	4628      	mov	r0, r5
   b85b4:	f001 febe 	bl	ba334 <_ZNK14SequentialFile11getQueueLenEv>
   b85b8:	2800      	cmp	r0, #0
   b85ba:	d03b      	beq.n	b8634 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b85bc:	4620      	mov	r0, r4
   b85be:	f7ff fd0b 	bl	b7fd8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b85c2:	4620      	mov	r0, r4
   b85c4:	f7ff fd68 	bl	b8098 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b85c8:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b85ca:	f002 f82d 	bl	ba628 <os_mutex_recursive_unlock>
    return true;
   b85ce:	2001      	movs	r0, #1
}
   b85d0:	b005      	add	sp, #20
   b85d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b85d4:	4630      	mov	r0, r6
   b85d6:	f7ff fcbb 	bl	b7f50 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b85da:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b85de:	4298      	cmp	r0, r3
   b85e0:	d102      	bne.n	b85e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b85e2:	4820      	ldr	r0, [pc, #128]	; (b8664 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b85e4:	f005 fdff 	bl	be1e6 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b85e8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b85ec:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b85ee:	1a9a      	subs	r2, r3, r2
   b85f0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b85f2:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b85f6:	2b01      	cmp	r3, #1
   b85f8:	d804      	bhi.n	b8604 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b85fa:	2200      	movs	r2, #0
   b85fc:	2101      	movs	r1, #1
   b85fe:	4630      	mov	r0, r6
   b8600:	f7ff ff38 	bl	b8474 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8604:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b8608:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b860c:	f7fb fd43 	bl	b4096 <_Znwj>
   b8610:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b8612:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8616:	b103      	cbz	r3, b861a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b8618:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b861a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b861e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8620:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b8624:	685b      	ldr	r3, [r3, #4]
   b8626:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b862a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b862e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b8632:	e7aa      	b.n	b858a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b8634:	4630      	mov	r0, r6
   b8636:	f7ff fc8b 	bl	b7f50 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b863a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b863c:	4298      	cmp	r0, r3
   b863e:	d8bd      	bhi.n	b85bc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b8640:	f002 fb1e 	bl	bac80 <spark_cloud_flag_connected>
   b8644:	2800      	cmp	r0, #0
   b8646:	d0b9      	beq.n	b85bc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b8648:	4907      	ldr	r1, [pc, #28]	; (b8668 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b864a:	4804      	ldr	r0, [pc, #16]	; (b865c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b864c:	f7fd fe56 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
   b8650:	e7b7      	b.n	b85c2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b8652:	bf00      	nop
   b8654:	000c06e1 	.word	0x000c06e1
   b8658:	000c0025 	.word	0x000c0025
   b865c:	2003e448 	.word	0x2003e448
   b8660:	000c007d 	.word	0x000c007d
   b8664:	000c004d 	.word	0x000c004d
   b8668:	000c00a9 	.word	0x000c00a9

000b866c <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b866c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b866e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b8672:	4604      	mov	r4, r0
    if (!publishComplete) {
   b8674:	2b00      	cmp	r3, #0
   b8676:	d041      	beq.n	b86fc <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b8678:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b867c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b8680:	2b00      	cmp	r3, #0
   b8682:	d03d      	beq.n	b8700 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b8684:	4950      	ldr	r1, [pc, #320]	; (b87c8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b8686:	4851      	ldr	r0, [pc, #324]	; (b87cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8688:	f7fd fe38 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b868c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8690:	b1d3      	cbz	r3, b86c8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b8692:	1d26      	adds	r6, r4, #4
   b8694:	2100      	movs	r1, #0
   b8696:	4630      	mov	r0, r6
   b8698:	f001 fdfc 	bl	ba294 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b869c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b86a0:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b86a2:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b86a4:	d10d      	bne.n	b86c2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b86a6:	2101      	movs	r1, #1
   b86a8:	4630      	mov	r0, r6
   b86aa:	f001 fdf3 	bl	ba294 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b86ae:	2200      	movs	r2, #0
   b86b0:	4629      	mov	r1, r5
   b86b2:	4630      	mov	r0, r6
   b86b4:	f001 fc26 	bl	b9f04 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b86b8:	4945      	ldr	r1, [pc, #276]	; (b87d0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b86ba:	4844      	ldr	r0, [pc, #272]	; (b87cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b86bc:	462a      	mov	r2, r5
   b86be:	f7fd fe1d 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b86c2:	2300      	movs	r3, #0
   b86c4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b86c8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b86cc:	b110      	cbz	r0, b86d4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b86ce:	2143      	movs	r1, #67	; 0x43
   b86d0:	f7fb fce5 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b86d4:	2300      	movs	r3, #0
   b86d6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b86da:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b86de:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b86e2:	4b3c      	ldr	r3, [pc, #240]	; (b87d4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b86e4:	9300      	str	r3, [sp, #0]
   b86e6:	4669      	mov	r1, sp
   b86e8:	2300      	movs	r3, #0
   b86ea:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b86ee:	9301      	str	r3, [sp, #4]
   b86f0:	f7ff fd38 	bl	b8164 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b86f4:	f001 ffd0 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b86f8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b86fc:	b002      	add	sp, #8
   b86fe:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b8700:	4935      	ldr	r1, [pc, #212]	; (b87d8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b8702:	4832      	ldr	r0, [pc, #200]	; (b87cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8704:	f7fd fdfa 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b8708:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b870c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b8710:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8714:	b14b      	cbz	r3, b872a <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b8716:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b871a:	b110      	cbz	r0, b8722 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b871c:	2143      	movs	r1, #67	; 0x43
   b871e:	f7fb fcbe 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b8722:	2300      	movs	r3, #0
   b8724:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b8728:	e7db      	b.n	b86e2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b872a:	4620      	mov	r0, r4
   b872c:	f7ff faef 	bl	b7d0e <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b8730:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b8734:	4293      	cmp	r3, r2
   b8736:	d013      	beq.n	b8760 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b8738:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b873c:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b8740:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b8744:	3b04      	subs	r3, #4
   b8746:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b874a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b874c:	f001 ff6c 	bl	ba628 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b8750:	4922      	ldr	r1, [pc, #136]	; (b87dc <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b8752:	481e      	ldr	r0, [pc, #120]	; (b87cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8754:	f7fd fdd2 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b8758:	4620      	mov	r0, r4
   b875a:	f7ff fc3d 	bl	b7fd8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b875e:	e7c0      	b.n	b86e2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b8760:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b8764:	4628      	mov	r0, r5
   b8766:	f7ff fbf3 	bl	b7f50 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b876a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b876e:	4298      	cmp	r0, r3
   b8770:	d102      	bne.n	b8778 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b8772:	481b      	ldr	r0, [pc, #108]	; (b87e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b8774:	f005 fd37 	bl	be1e6 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b8778:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b877c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b877e:	429a      	cmp	r2, r3
   b8780:	d104      	bne.n	b878c <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b8782:	2201      	movs	r2, #1
   b8784:	4611      	mov	r1, r2
   b8786:	4628      	mov	r0, r5
   b8788:	f7ff fe74 	bl	b8474 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b878c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b8790:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b8794:	f7fb fc7f 	bl	b4096 <_Znwj>
   b8798:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b879c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b87a0:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b87a2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b87a6:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b87aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b87ae:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b87b2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b87b6:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b87ba:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b87be:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b87c2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b87c6:	e7c0      	b.n	b874a <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b87c8:	000c00bc 	.word	0x000c00bc
   b87cc:	2003e448 	.word	0x2003e448
   b87d0:	000c00cf 	.word	0x000c00cf
   b87d4:	000b81ad 	.word	0x000b81ad
   b87d8:	000c00df 	.word	0x000c00df
   b87dc:	000c00f1 	.word	0x000c00f1
   b87e0:	000c004d 	.word	0x000c004d

000b87e4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b87e4:	4b01      	ldr	r3, [pc, #4]	; (b87ec <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b87e6:	4a02      	ldr	r2, [pc, #8]	; (b87f0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b87e8:	601a      	str	r2, [r3, #0]
}
   b87ea:	4770      	bx	lr
   b87ec:	2003e448 	.word	0x2003e448
   b87f0:	000c0118 	.word	0x000c0118

000b87f4 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b87f4:	b510      	push	{r4, lr}
   b87f6:	4b07      	ldr	r3, [pc, #28]	; (b8814 <_ZN17PublishQueuePosixD1Ev+0x20>)
   b87f8:	4604      	mov	r4, r0
   b87fa:	f840 3bc0 	str.w	r3, [r0], #192
   b87fe:	f7fc f86d 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b8802:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b8806:	f7ff fc95 	bl	b8134 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b880a:	1d20      	adds	r0, r4, #4
   b880c:	f001 fbfe 	bl	ba00c <_ZN14SequentialFileD1Ev>
}
   b8810:	4620      	mov	r0, r4
   b8812:	bd10      	pop	{r4, pc}
   b8814:	000c012c 	.word	0x000c012c

000b8818 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8818:	b510      	push	{r4, lr}
   b881a:	4604      	mov	r4, r0
}
   b881c:	f7ff ffea 	bl	b87f4 <_ZN17PublishQueuePosixD1Ev>
   b8820:	4620      	mov	r0, r4
   b8822:	21d0      	movs	r1, #208	; 0xd0
   b8824:	f7fb fc3b 	bl	b409e <_ZdlPvj>
   b8828:	4620      	mov	r0, r4
   b882a:	bd10      	pop	{r4, pc}

000b882c <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b882c:	6001      	str	r1, [r0, #0]
   b882e:	7102      	strb	r2, [r0, #4]
{
}
   b8830:	4770      	bx	lr

000b8832 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b8832:	6800      	ldr	r0, [r0, #0]
   b8834:	6803      	ldr	r3, [r0, #0]
   b8836:	68db      	ldr	r3, [r3, #12]
   b8838:	4718      	bx	r3

000b883a <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b883a:	6800      	ldr	r0, [r0, #0]
   b883c:	6803      	ldr	r3, [r0, #0]
   b883e:	6a1b      	ldr	r3, [r3, #32]
   b8840:	4718      	bx	r3

000b8842 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b8842:	6800      	ldr	r0, [r0, #0]
   b8844:	6803      	ldr	r3, [r0, #0]
   b8846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8848:	4718      	bx	r3

000b884a <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b884a:	7900      	ldrb	r0, [r0, #4]
   b884c:	4770      	bx	lr

000b884e <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b884e:	6800      	ldr	r0, [r0, #0]
   b8850:	6803      	ldr	r3, [r0, #0]
   b8852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8854:	4718      	bx	r3

000b8856 <_ZN10RHDatagram6sendtoEPhhh>:
{
   b8856:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8858:	4605      	mov	r5, r0
   b885a:	460c      	mov	r4, r1
    setHeaderTo(address);
   b885c:	4619      	mov	r1, r3
{
   b885e:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b8860:	f7ff fff5 	bl	b884e <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b8864:	6828      	ldr	r0, [r5, #0]
   b8866:	9a01      	ldr	r2, [sp, #4]
   b8868:	6803      	ldr	r3, [r0, #0]
   b886a:	695b      	ldr	r3, [r3, #20]
   b886c:	4621      	mov	r1, r4
}
   b886e:	b003      	add	sp, #12
   b8870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b8874:	4718      	bx	r3

000b8876 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b8876:	6800      	ldr	r0, [r0, #0]
   b8878:	6803      	ldr	r3, [r0, #0]
   b887a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b887c:	4718      	bx	r3

000b887e <_ZN10RHDatagram14setThisAddressEh>:
{
   b887e:	b538      	push	{r3, r4, r5, lr}
   b8880:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b8882:	6800      	ldr	r0, [r0, #0]
   b8884:	6803      	ldr	r3, [r0, #0]
{
   b8886:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b8888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b888a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b888c:	4629      	mov	r1, r5
   b888e:	4620      	mov	r0, r4
   b8890:	f7ff fff1 	bl	b8876 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b8894:	7125      	strb	r5, [r4, #4]
}
   b8896:	bd38      	pop	{r3, r4, r5, pc}

000b8898 <_ZN10RHDatagram4initEv>:
{
   b8898:	b538      	push	{r3, r4, r5, lr}
   b889a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b889c:	6800      	ldr	r0, [r0, #0]
   b889e:	6803      	ldr	r3, [r0, #0]
   b88a0:	689b      	ldr	r3, [r3, #8]
   b88a2:	4798      	blx	r3
    if (ret)
   b88a4:	4605      	mov	r5, r0
   b88a6:	b118      	cbz	r0, b88b0 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b88a8:	7921      	ldrb	r1, [r4, #4]
   b88aa:	4620      	mov	r0, r4
   b88ac:	f7ff ffe7 	bl	b887e <_ZN10RHDatagram14setThisAddressEh>
}
   b88b0:	4628      	mov	r0, r5
   b88b2:	bd38      	pop	{r3, r4, r5, pc}

000b88b4 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b88b4:	6800      	ldr	r0, [r0, #0]
   b88b6:	6803      	ldr	r3, [r0, #0]
   b88b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88ba:	4718      	bx	r3

000b88bc <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b88bc:	6800      	ldr	r0, [r0, #0]
   b88be:	6803      	ldr	r3, [r0, #0]
   b88c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b88c2:	4718      	bx	r3

000b88c4 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b88c4:	6800      	ldr	r0, [r0, #0]
   b88c6:	6803      	ldr	r3, [r0, #0]
   b88c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b88ca:	4718      	bx	r3

000b88cc <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b88cc:	6800      	ldr	r0, [r0, #0]
   b88ce:	6803      	ldr	r3, [r0, #0]
   b88d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b88d2:	4718      	bx	r3

000b88d4 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b88d4:	6800      	ldr	r0, [r0, #0]
   b88d6:	6803      	ldr	r3, [r0, #0]
   b88d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b88da:	4718      	bx	r3

000b88dc <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b88dc:	6800      	ldr	r0, [r0, #0]
   b88de:	6803      	ldr	r3, [r0, #0]
   b88e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b88e2:	4718      	bx	r3

000b88e4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b88e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b88e8:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b88ea:	6800      	ldr	r0, [r0, #0]
{
   b88ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b88ee:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b88f0:	6803      	ldr	r3, [r0, #0]
   b88f2:	691b      	ldr	r3, [r3, #16]
{
   b88f4:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b88f8:	4798      	blx	r3
   b88fa:	4605      	mov	r5, r0
   b88fc:	b1c8      	cbz	r0, b8932 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b88fe:	b11e      	cbz	r6, b8908 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b8900:	4620      	mov	r0, r4
   b8902:	f7ff ffe3 	bl	b88cc <_ZN10RHDatagram10headerFromEv>
   b8906:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b8908:	f1b9 0f00 	cmp.w	r9, #0
   b890c:	d004      	beq.n	b8918 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b890e:	4620      	mov	r0, r4
   b8910:	f7ff ffd8 	bl	b88c4 <_ZN10RHDatagram8headerToEv>
   b8914:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b8918:	f1b8 0f00 	cmp.w	r8, #0
   b891c:	d004      	beq.n	b8928 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b891e:	4620      	mov	r0, r4
   b8920:	f7ff ffd8 	bl	b88d4 <_ZN10RHDatagram8headerIdEv>
   b8924:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b8928:	b11f      	cbz	r7, b8932 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b892a:	4620      	mov	r0, r4
   b892c:	f7ff ffd6 	bl	b88dc <_ZN10RHDatagram11headerFlagsEv>
   b8930:	7038      	strb	r0, [r7, #0]
}
   b8932:	4628      	mov	r0, r5
   b8934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8938 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b8938:	2001      	movs	r0, #1
   b893a:	4770      	bx	lr

000b893c <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b893c:	7903      	ldrb	r3, [r0, #4]
   b893e:	2b03      	cmp	r3, #3
   b8940:	d0fc      	beq.n	b893c <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b8942:	2001      	movs	r0, #1
   b8944:	4770      	bx	lr

000b8946 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b8946:	2000      	movs	r0, #0
   b8948:	4770      	bx	lr

000b894a <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b894a:	7181      	strb	r1, [r0, #6]
}
   b894c:	4770      	bx	lr

000b894e <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b894e:	7141      	strb	r1, [r0, #5]
}
   b8950:	4770      	bx	lr

000b8952 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b8952:	72c1      	strb	r1, [r0, #11]
}
   b8954:	4770      	bx	lr

000b8956 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b8956:	7301      	strb	r1, [r0, #12]
}
   b8958:	4770      	bx	lr

000b895a <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b895a:	7341      	strb	r1, [r0, #13]
}
   b895c:	4770      	bx	lr

000b895e <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b895e:	7b83      	ldrb	r3, [r0, #14]
   b8960:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b8964:	4311      	orrs	r1, r2
   b8966:	7381      	strb	r1, [r0, #14]
}
   b8968:	4770      	bx	lr

000b896a <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b896a:	79c0      	ldrb	r0, [r0, #7]
}
   b896c:	4770      	bx	lr

000b896e <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b896e:	7a00      	ldrb	r0, [r0, #8]
}
   b8970:	4770      	bx	lr

000b8972 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b8972:	7a40      	ldrb	r0, [r0, #9]
}
   b8974:	4770      	bx	lr

000b8976 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b8976:	7a80      	ldrb	r0, [r0, #10]
}
   b8978:	4770      	bx	lr

000b897a <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b897a:	8a00      	ldrh	r0, [r0, #16]
}
   b897c:	b200      	sxth	r0, r0
   b897e:	4770      	bx	lr

000b8980 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b8980:	7900      	ldrb	r0, [r0, #4]
}
   b8982:	4770      	bx	lr

000b8984 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b8984:	7101      	strb	r1, [r0, #4]
}
   b8986:	4770      	bx	lr

000b8988 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b8988:	8a40      	ldrh	r0, [r0, #18]
}
   b898a:	b280      	uxth	r0, r0
   b898c:	4770      	bx	lr

000b898e <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b898e:	8a80      	ldrh	r0, [r0, #20]
}
   b8990:	b280      	uxth	r0, r0
   b8992:	4770      	bx	lr

000b8994 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b8994:	8ac0      	ldrh	r0, [r0, #22]
}
   b8996:	b280      	uxth	r0, r0
   b8998:	4770      	bx	lr

000b899a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b899a:	b538      	push	{r3, r4, r5, lr}
   b899c:	4605      	mov	r5, r0
   b899e:	460c      	mov	r4, r1
    while (!available())
   b89a0:	682b      	ldr	r3, [r5, #0]
   b89a2:	4628      	mov	r0, r5
   b89a4:	68db      	ldr	r3, [r3, #12]
   b89a6:	4798      	blx	r3
   b89a8:	b928      	cbnz	r0, b89b6 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b89aa:	2c00      	cmp	r4, #0
   b89ac:	d0f8      	beq.n	b89a0 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b89ae:	4620      	mov	r0, r4
   b89b0:	f002 fa7e 	bl	baeb0 <delay>
   b89b4:	e7f4      	b.n	b89a0 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b89b6:	bd38      	pop	{r3, r4, r5, pc}

000b89b8 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b89b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b89ba:	4605      	mov	r5, r0
   b89bc:	460f      	mov	r7, r1
   b89be:	4614      	mov	r4, r2
   b89c0:	f001 fe6a 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
   b89c4:	4606      	mov	r6, r0
   b89c6:	f001 fe67 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b89ca:	1b80      	subs	r0, r0, r6
   b89cc:	42b8      	cmp	r0, r7
   b89ce:	d20a      	bcs.n	b89e6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b89d0:	682b      	ldr	r3, [r5, #0]
   b89d2:	4628      	mov	r0, r5
   b89d4:	68db      	ldr	r3, [r3, #12]
   b89d6:	4798      	blx	r3
   b89d8:	b930      	cbnz	r0, b89e8 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b89da:	2c00      	cmp	r4, #0
   b89dc:	d0f3      	beq.n	b89c6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b89de:	4620      	mov	r0, r4
   b89e0:	f002 fa66 	bl	baeb0 <delay>
   b89e4:	e7ef      	b.n	b89c6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b89e6:	2000      	movs	r0, #0
}
   b89e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b89ea <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b89ea:	b570      	push	{r4, r5, r6, lr}
   b89ec:	4604      	mov	r4, r0
   b89ee:	460e      	mov	r6, r1
   b89f0:	f001 fe52 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
   b89f4:	4605      	mov	r5, r0
   b89f6:	f001 fe4f 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b89fa:	1b40      	subs	r0, r0, r5
   b89fc:	42b0      	cmp	r0, r6
   b89fe:	d204      	bcs.n	b8a0a <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b8a00:	7923      	ldrb	r3, [r4, #4]
   b8a02:	2b03      	cmp	r3, #3
   b8a04:	d0f7      	beq.n	b89f6 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b8a06:	2001      	movs	r0, #1
}
   b8a08:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b8a0a:	2000      	movs	r0, #0
   b8a0c:	e7fc      	b.n	b8a08 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b8a0e <_ZN15RHGenericDriver7waitCADEv>:
{
   b8a0e:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b8a10:	69c3      	ldr	r3, [r0, #28]
{
   b8a12:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b8a14:	b1b3      	cbz	r3, b8a44 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b8a16:	f001 fe3f 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b8a1a:	2664      	movs	r6, #100	; 0x64
   b8a1c:	4605      	mov	r5, r0
    while (isChannelActive())
   b8a1e:	6823      	ldr	r3, [r4, #0]
   b8a20:	4620      	mov	r0, r4
   b8a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8a24:	4798      	blx	r3
   b8a26:	b168      	cbz	r0, b8a44 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b8a28:	f001 fe36 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b8a2c:	69e3      	ldr	r3, [r4, #28]
   b8a2e:	1b40      	subs	r0, r0, r5
   b8a30:	4298      	cmp	r0, r3
   b8a32:	d809      	bhi.n	b8a48 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b8a34:	210a      	movs	r1, #10
   b8a36:	2001      	movs	r0, #1
   b8a38:	f004 fc4d 	bl	bd2d6 <_Z6randomii>
   b8a3c:	4370      	muls	r0, r6
   b8a3e:	f002 fa37 	bl	baeb0 <delay>
    while (isChannelActive())
   b8a42:	e7ec      	b.n	b8a1e <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b8a44:	2001      	movs	r0, #1
}
   b8a46:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b8a48:	2000      	movs	r0, #0
   b8a4a:	e7fc      	b.n	b8a46 <_ZN15RHGenericDriver7waitCADEv+0x38>

000b8a4c <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b8a4c:	4a06      	ldr	r2, [pc, #24]	; (b8a68 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b8a4e:	6002      	str	r2, [r0, #0]
   b8a50:	21ff      	movs	r1, #255	; 0xff
   b8a52:	2200      	movs	r2, #0
   b8a54:	7102      	strb	r2, [r0, #4]
   b8a56:	7141      	strb	r1, [r0, #5]
   b8a58:	8242      	strh	r2, [r0, #18]
   b8a5a:	72c1      	strb	r1, [r0, #11]
   b8a5c:	8282      	strh	r2, [r0, #20]
   b8a5e:	8181      	strh	r1, [r0, #12]
   b8a60:	7382      	strb	r2, [r0, #14]
   b8a62:	82c2      	strh	r2, [r0, #22]
   b8a64:	61c2      	str	r2, [r0, #28]
}
   b8a66:	4770      	bx	lr
   b8a68:	000c0140 	.word	0x000c0140

000b8a6c <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b8a6c:	4770      	bx	lr

000b8a6e <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b8a6e:	4770      	bx	lr

000b8a70 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b8a70:	4770      	bx	lr

000b8a72 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b8a72:	4770      	bx	lr

000b8a74 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b8a74:	4770      	bx	lr

000b8a76 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b8a76:	7141      	strb	r1, [r0, #5]
}
   b8a78:	4770      	bx	lr

000b8a7a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b8a7a:	7181      	strb	r1, [r0, #6]
}
   b8a7c:	4770      	bx	lr

000b8a7e <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b8a7e:	7101      	strb	r1, [r0, #4]
}
   b8a80:	4770      	bx	lr
	...

000b8a84 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b8a84:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b8a86:	4d03      	ldr	r5, [pc, #12]	; (b8a94 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b8a88:	6005      	str	r5, [r0, #0]
   b8a8a:	7101      	strb	r1, [r0, #4]
   b8a8c:	7142      	strb	r2, [r0, #5]
   b8a8e:	7183      	strb	r3, [r0, #6]
}
   b8a90:	bd30      	pop	{r4, r5, pc}
   b8a92:	bf00      	nop
   b8a94:	000c01c0 	.word	0x000c01c0

000b8a98 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b8a98:	4770      	bx	lr

000b8a9a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b8a9a:	b510      	push	{r4, lr}
  }
   b8a9c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b8a9e:	4604      	mov	r4, r0
  }
   b8aa0:	f7fb fafd 	bl	b409e <_ZdlPvj>
   b8aa4:	4620      	mov	r0, r4
   b8aa6:	bd10      	pop	{r4, pc}

000b8aa8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b8aa8:	b40e      	push	{r1, r2, r3}
   b8aaa:	b503      	push	{r0, r1, lr}
   b8aac:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b8aae:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b8ab0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b8ab4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b8ab6:	f004 fbd2 	bl	bd25e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b8aba:	b002      	add	sp, #8
   b8abc:	f85d eb04 	ldr.w	lr, [sp], #4
   b8ac0:	b003      	add	sp, #12
   b8ac2:	4770      	bx	lr

000b8ac4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b8ac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8ac6:	4604      	mov	r4, r0
   b8ac8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b8aca:	7922      	ldrb	r2, [r4, #4]
   b8acc:	68a3      	ldr	r3, [r4, #8]
   b8ace:	b132      	cbz	r2, b8ade <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b8ad0:	b9a3      	cbnz	r3, b8afc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b8ad2:	490b      	ldr	r1, [pc, #44]	; (b8b00 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b8ad4:	b002      	add	sp, #8
   b8ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b8ada:	f004 bab7 	b.w	bd04c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b8ade:	4a09      	ldr	r2, [pc, #36]	; (b8b04 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b8ae0:	7b26      	ldrb	r6, [r4, #12]
   b8ae2:	4d09      	ldr	r5, [pc, #36]	; (b8b08 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b8ae4:	4909      	ldr	r1, [pc, #36]	; (b8b0c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b8ae6:	7b64      	ldrb	r4, [r4, #13]
   b8ae8:	2e01      	cmp	r6, #1
   b8aea:	bf18      	it	ne
   b8aec:	4629      	movne	r1, r5
   b8aee:	e9cd 1400 	strd	r1, r4, [sp]
   b8af2:	4907      	ldr	r1, [pc, #28]	; (b8b10 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b8af4:	f7ff ffd8 	bl	b8aa8 <_ZN5Print6printfEPKcz>
  }
   b8af8:	b002      	add	sp, #8
   b8afa:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b8afc:	4a05      	ldr	r2, [pc, #20]	; (b8b14 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b8afe:	e7ef      	b.n	b8ae0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b8b00:	000c01fd 	.word	0x000c01fd
   b8b04:	000c06e1 	.word	0x000c06e1
   b8b08:	000c01f9 	.word	0x000c01f9
   b8b0c:	000c01f5 	.word	0x000c01f5
   b8b10:	000c0213 	.word	0x000c0213
   b8b14:	000c01ec 	.word	0x000c01ec

000b8b18 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b8b18:	b510      	push	{r4, lr}
   b8b1a:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b8b1c:	f7ff ffb2 	bl	b8a84 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b8b20:	4b05      	ldr	r3, [pc, #20]	; (b8b38 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b8b22:	6023      	str	r3, [r4, #0]
  {
   b8b24:	4b05      	ldr	r3, [pc, #20]	; (b8b3c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b8b26:	60a3      	str	r3, [r4, #8]
   b8b28:	2301      	movs	r3, #1
   b8b2a:	7323      	strb	r3, [r4, #12]
   b8b2c:	2300      	movs	r3, #0
   b8b2e:	6123      	str	r3, [r4, #16]
   b8b30:	82a3      	strh	r3, [r4, #20]
{
}
   b8b32:	4620      	mov	r0, r4
   b8b34:	bd10      	pop	{r4, pc}
   b8b36:	bf00      	nop
   b8b38:	000c024c 	.word	0x000c024c
   b8b3c:	000c0238 	.word	0x000c0238

000b8b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b8b40:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b8b42:	4c0b      	ldr	r4, [pc, #44]	; (b8b70 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b8b44:	7821      	ldrb	r1, [r4, #0]
   b8b46:	f3bf 8f5b 	dmb	ish
   b8b4a:	f011 0101 	ands.w	r1, r1, #1
   b8b4e:	d10b      	bne.n	b8b68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8b50:	4620      	mov	r0, r4
   b8b52:	9101      	str	r1, [sp, #4]
   b8b54:	f7fb fab2 	bl	b40bc <__cxa_guard_acquire>
   b8b58:	9901      	ldr	r1, [sp, #4]
   b8b5a:	b128      	cbz	r0, b8b68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8b5c:	4805      	ldr	r0, [pc, #20]	; (b8b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8b5e:	f004 fbd3 	bl	bd308 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8b62:	4620      	mov	r0, r4
   b8b64:	f7fb faaf 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b8b68:	4802      	ldr	r0, [pc, #8]	; (b8b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8b6a:	b002      	add	sp, #8
   b8b6c:	bd10      	pop	{r4, pc}
   b8b6e:	bf00      	nop
   b8b70:	2003e450 	.word	0x2003e450
   b8b74:	2003e454 	.word	0x2003e454

000b8b78 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b8b78:	b507      	push	{r0, r1, r2, lr}
   b8b7a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b8b7c:	f7ff ffe0 	bl	b8b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b8b80:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b8b82:	b003      	add	sp, #12
   b8b84:	f85d eb04 	ldr.w	lr, [sp], #4
   b8b88:	f004 bc76 	b.w	bd478 <_ZN8SPIClass8transferEh>

000b8b8c <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b8b8c:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b8b8e:	f7ff ffd7 	bl	b8b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b8b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8b96:	f004 bc75 	b.w	bd484 <_ZN8SPIClass15attachInterruptEv>

000b8b9a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b8b9a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b8b9c:	f7ff ffd0 	bl	b8b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b8ba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8ba4:	f004 bc6f 	b.w	bd486 <_ZN8SPIClass15detachInterruptEv>

000b8ba8 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b8ba8:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b8baa:	7903      	ldrb	r3, [r0, #4]
   b8bac:	2b04      	cmp	r3, #4
   b8bae:	d020      	beq.n	b8bf2 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b8bb0:	2b03      	cmp	r3, #3
   b8bb2:	d020      	beq.n	b8bf6 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b8bb4:	2b02      	cmp	r3, #2
   b8bb6:	d020      	beq.n	b8bfa <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b8bb8:	4a11      	ldr	r2, [pc, #68]	; (b8c00 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b8bba:	4912      	ldr	r1, [pc, #72]	; (b8c04 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b8bbc:	2b01      	cmp	r3, #1
   b8bbe:	bf18      	it	ne
   b8bc0:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b8bc2:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b8bc4:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b8bc6:	3901      	subs	r1, #1
   b8bc8:	bf18      	it	ne
   b8bca:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b8bcc:	b133      	cbz	r3, b8bdc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b8bce:	2b01      	cmp	r3, #1
   b8bd0:	d004      	beq.n	b8bdc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b8bd2:	2b02      	cmp	r3, #2
   b8bd4:	d002      	beq.n	b8bdc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b8bd6:	2b03      	cmp	r3, #3
   b8bd8:	bf18      	it	ne
   b8bda:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b8bdc:	2400      	movs	r4, #0
   b8bde:	7304      	strb	r4, [r0, #12]
   b8be0:	6102      	str	r2, [r0, #16]
   b8be2:	7501      	strb	r1, [r0, #20]
   b8be4:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b8be6:	f7ff ffab 	bl	b8b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b8bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8bee:	f004 bb95 	b.w	bd31c <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b8bf2:	4a05      	ldr	r2, [pc, #20]	; (b8c08 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b8bf4:	e7e5      	b.n	b8bc2 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b8bf6:	4a05      	ldr	r2, [pc, #20]	; (b8c0c <_ZN13RHHardwareSPI5beginEv+0x64>)
   b8bf8:	e7e3      	b.n	b8bc2 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b8bfa:	4a05      	ldr	r2, [pc, #20]	; (b8c10 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b8bfc:	e7e1      	b.n	b8bc2 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b8bfe:	bf00      	nop
   b8c00:	001e8480 	.word	0x001e8480
   b8c04:	000f4240 	.word	0x000f4240
   b8c08:	00f42400 	.word	0x00f42400
   b8c0c:	007a1200 	.word	0x007a1200
   b8c10:	003d0900 	.word	0x003d0900

000b8c14 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b8c14:	b508      	push	{r3, lr}
        instance().end();
   b8c16:	f7ff ff93 	bl	b8b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b8c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8c1e:	f004 bb91 	b.w	bd344 <_ZN8SPIClass3endEv>

000b8c22 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b8c22:	b510      	push	{r4, lr}
   b8c24:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b8c26:	f7ff ff8b 	bl	b8b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b8c2a:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b8c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8c32:	f004 bbb3 	b.w	bd39c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b8c36 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b8c36:	b508      	push	{r3, lr}
        instance().endTransaction();
   b8c38:	f7ff ff82 	bl	b8b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b8c3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8c40:	f004 bb92 	b.w	bd368 <_ZN8SPIClass14endTransactionEv>

000b8c44 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b8c44:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b8c46:	f7ff ff7b 	bl	b8b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b8c4a:	bd08      	pop	{r3, pc}

000b8c4c <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b8c4c:	2300      	movs	r3, #0
   b8c4e:	4802      	ldr	r0, [pc, #8]	; (b8c58 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b8c50:	461a      	mov	r2, r3
   b8c52:	4619      	mov	r1, r3
   b8c54:	f7ff bf60 	b.w	b8b18 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b8c58:	2003e45c 	.word	0x2003e45c

000b8c5c <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b8c5c:	2a01      	cmp	r2, #1
   b8c5e:	d105      	bne.n	b8c6c <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b8c60:	7a00      	ldrb	r0, [r0, #8]
   b8c62:	780b      	ldrb	r3, [r1, #0]
   b8c64:	1a1b      	subs	r3, r3, r0
   b8c66:	4258      	negs	r0, r3
   b8c68:	4158      	adcs	r0, r3
   b8c6a:	4770      	bx	lr
   b8c6c:	2000      	movs	r0, #0
}
   b8c6e:	4770      	bx	lr

000b8c70 <_ZN6RHMesh5doArpEh>:
{
   b8c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b8c74:	4c25      	ldr	r4, [pc, #148]	; (b8d0c <_ZN6RHMesh5doArpEh+0x9c>)
   b8c76:	2301      	movs	r3, #1
{
   b8c78:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b8c7a:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b8c7c:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b8c7e:	2300      	movs	r3, #0
{
   b8c80:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b8c82:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b8c84:	9300      	str	r3, [sp, #0]
   b8c86:	2203      	movs	r2, #3
   b8c88:	23ff      	movs	r3, #255	; 0xff
   b8c8a:	4621      	mov	r1, r4
{
   b8c8c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b8c8e:	f000 fbb7 	bl	b9400 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b8c92:	b120      	cbz	r0, b8c9e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b8c94:	2500      	movs	r5, #0
}
   b8c96:	4628      	mov	r0, r5
   b8c98:	b006      	add	sp, #24
   b8c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b8c9e:	237a      	movs	r3, #122	; 0x7a
   b8ca0:	f88d 3017 	strb.w	r3, [sp, #23]
   b8ca4:	f001 fcf8 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b8ca8:	f106 0904 	add.w	r9, r6, #4
   b8cac:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b8cae:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b8cb2:	f001 fcf1 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
   b8cb6:	1a29      	subs	r1, r5, r0
   b8cb8:	2900      	cmp	r1, #0
   b8cba:	ddeb      	ble.n	b8c94 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b8cbc:	2200      	movs	r2, #0
   b8cbe:	b289      	uxth	r1, r1
   b8cc0:	4648      	mov	r0, r9
   b8cc2:	f7ff fdbe 	bl	b8842 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b8cc6:	2800      	cmp	r0, #0
   b8cc8:	d0f3      	beq.n	b8cb2 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b8cca:	2300      	movs	r3, #0
   b8ccc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8cd0:	e9cd 3300 	strd	r3, r3, [sp]
   b8cd4:	f10d 0217 	add.w	r2, sp, #23
   b8cd8:	4621      	mov	r1, r4
   b8cda:	4630      	mov	r0, r6
   b8cdc:	f000 fb9a 	bl	b9414 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b8ce0:	4605      	mov	r5, r0
   b8ce2:	2800      	cmp	r0, #0
   b8ce4:	d0e3      	beq.n	b8cae <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b8ce6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b8cea:	2b01      	cmp	r3, #1
   b8cec:	d9df      	bls.n	b8cae <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b8cee:	f894 a000 	ldrb.w	sl, [r4]
   b8cf2:	f1ba 0f02 	cmp.w	sl, #2
   b8cf6:	d1da      	bne.n	b8cae <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b8cf8:	4648      	mov	r0, r9
   b8cfa:	f7ff fde7 	bl	b88cc <_ZN10RHDatagram10headerFromEv>
   b8cfe:	4653      	mov	r3, sl
   b8d00:	4602      	mov	r2, r0
   b8d02:	4639      	mov	r1, r7
   b8d04:	4630      	mov	r0, r6
   b8d06:	f000 faf3 	bl	b92f0 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b8d0a:	e7c4      	b.n	b8c96 <_ZN6RHMesh5doArpEh+0x26>
   b8d0c:	2003e474 	.word	0x2003e474

000b8d10 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b8d10:	2a01      	cmp	r2, #1
{
   b8d12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8d16:	4607      	mov	r7, r0
   b8d18:	460e      	mov	r6, r1
   b8d1a:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b8d1c:	d93b      	bls.n	b8d96 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b8d1e:	794d      	ldrb	r5, [r1, #5]
   b8d20:	2d02      	cmp	r5, #2
   b8d22:	d130      	bne.n	b8d86 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b8d24:	f100 0804 	add.w	r8, r0, #4
   b8d28:	79c9      	ldrb	r1, [r1, #7]
   b8d2a:	9101      	str	r1, [sp, #4]
   b8d2c:	4640      	mov	r0, r8
   b8d2e:	f7ff fdcd 	bl	b88cc <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b8d32:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b8d34:	462b      	mov	r3, r5
   b8d36:	4602      	mov	r2, r0
   b8d38:	9901      	ldr	r1, [sp, #4]
   b8d3a:	4638      	mov	r0, r7
   b8d3c:	f000 fad8 	bl	b92f0 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b8d40:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b8d42:	f106 0308 	add.w	r3, r6, #8
   b8d46:	2400      	movs	r4, #0
   b8d48:	4622      	mov	r2, r4
   b8d4a:	4295      	cmp	r5, r2
   b8d4c:	f104 0401 	add.w	r4, r4, #1
   b8d50:	b2e4      	uxtb	r4, r4
   b8d52:	d904      	bls.n	b8d5e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b8d54:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8d58:	7a39      	ldrb	r1, [r7, #8]
   b8d5a:	4291      	cmp	r1, r2
   b8d5c:	d1f4      	bne.n	b8d48 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b8d5e:	f104 0108 	add.w	r1, r4, #8
   b8d62:	440e      	add	r6, r1
	while (i < numRoutes)
   b8d64:	42a5      	cmp	r5, r4
   b8d66:	d916      	bls.n	b8d96 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b8d68:	f816 1b01 	ldrb.w	r1, [r6], #1
   b8d6c:	9101      	str	r1, [sp, #4]
   b8d6e:	4640      	mov	r0, r8
   b8d70:	f7ff fdac 	bl	b88cc <_ZN10RHDatagram10headerFromEv>
   b8d74:	3401      	adds	r4, #1
   b8d76:	4602      	mov	r2, r0
   b8d78:	9901      	ldr	r1, [sp, #4]
   b8d7a:	2302      	movs	r3, #2
   b8d7c:	4638      	mov	r0, r7
   b8d7e:	b2e4      	uxtb	r4, r4
   b8d80:	f000 fab6 	bl	b92f0 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b8d84:	e7ee      	b.n	b8d64 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b8d86:	2d03      	cmp	r5, #3
   b8d88:	d105      	bne.n	b8d96 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b8d8a:	7989      	ldrb	r1, [r1, #6]
}
   b8d8c:	b002      	add	sp, #8
   b8d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b8d92:	f000 ba96 	b.w	b92c2 <_ZN8RHRouter13deleteRouteToEh>
}
   b8d96:	b002      	add	sp, #8
   b8d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8d9c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b8d9c:	b510      	push	{r4, lr}
   b8d9e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b8da0:	f000 fae6 	bl	b9370 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b8da4:	4b01      	ldr	r3, [pc, #4]	; (b8dac <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b8da6:	6023      	str	r3, [r4, #0]
}
   b8da8:	4620      	mov	r0, r4
   b8daa:	bd10      	pop	{r4, pc}
   b8dac:	000c0280 	.word	0x000c0280

000b8db0 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b8db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b8db4:	2a79      	cmp	r2, #121	; 0x79
{
   b8db6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b8dba:	4606      	mov	r6, r0
   b8dbc:	460f      	mov	r7, r1
   b8dbe:	4614      	mov	r4, r2
   b8dc0:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b8dc2:	d825      	bhi.n	b8e10 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b8dc4:	2bff      	cmp	r3, #255	; 0xff
   b8dc6:	d114      	bne.n	b8df2 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b8dc8:	f8df 8048 	ldr.w	r8, [pc, #72]	; b8e14 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b8dcc:	4640      	mov	r0, r8
   b8dce:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b8dd0:	4622      	mov	r2, r4
   b8dd2:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b8dd4:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b8dd8:	f005 ff12 	bl	bec00 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b8ddc:	1c62      	adds	r2, r4, #1
   b8dde:	f8cd 9020 	str.w	r9, [sp, #32]
   b8de2:	462b      	mov	r3, r5
   b8de4:	4641      	mov	r1, r8
   b8de6:	4630      	mov	r0, r6
   b8de8:	b2d2      	uxtb	r2, r2
}
   b8dea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b8dee:	f000 bb07 	b.w	b9400 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b8df2:	4619      	mov	r1, r3
   b8df4:	f000 fa21 	bl	b923a <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b8df8:	2800      	cmp	r0, #0
   b8dfa:	d1e5      	bne.n	b8dc8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b8dfc:	6833      	ldr	r3, [r6, #0]
   b8dfe:	4629      	mov	r1, r5
   b8e00:	689b      	ldr	r3, [r3, #8]
   b8e02:	4630      	mov	r0, r6
   b8e04:	4798      	blx	r3
   b8e06:	2800      	cmp	r0, #0
   b8e08:	d1de      	bne.n	b8dc8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b8e0a:	2002      	movs	r0, #2
}
   b8e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b8e10:	2001      	movs	r0, #1
   b8e12:	e7fb      	b.n	b8e0c <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b8e14:	2003e474 	.word	0x2003e474

000b8e18 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b8e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e1c:	b089      	sub	sp, #36	; 0x24
   b8e1e:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b8e20:	237a      	movs	r3, #122	; 0x7a
   b8e22:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b8e26:	f10d 031f 	add.w	r3, sp, #31
   b8e2a:	9303      	str	r3, [sp, #12]
   b8e2c:	f10d 031e 	add.w	r3, sp, #30
   b8e30:	9302      	str	r3, [sp, #8]
   b8e32:	4e5d      	ldr	r6, [pc, #372]	; (b8fa8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b8e34:	f10d 031d 	add.w	r3, sp, #29
   b8e38:	9301      	str	r3, [sp, #4]
   b8e3a:	ab07      	add	r3, sp, #28
   b8e3c:	9300      	str	r3, [sp, #0]
{     
   b8e3e:	4689      	mov	r9, r1
   b8e40:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b8e42:	f10d 031b 	add.w	r3, sp, #27
   b8e46:	f10d 021a 	add.w	r2, sp, #26
   b8e4a:	4631      	mov	r1, r6
{     
   b8e4c:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b8e50:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b8e52:	f000 fadf 	bl	b9414 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b8e56:	4604      	mov	r4, r0
   b8e58:	b920      	cbnz	r0, b8e64 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b8e5a:	2400      	movs	r4, #0
}
   b8e5c:	4620      	mov	r0, r4
   b8e5e:	b009      	add	sp, #36	; 0x24
   b8e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b8e64:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b8e68:	b373      	cbz	r3, b8ec8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b8e6a:	7832      	ldrb	r2, [r6, #0]
   b8e6c:	bb62      	cbnz	r2, b8ec8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b8e6e:	f1b8 0f00 	cmp.w	r8, #0
   b8e72:	d003      	beq.n	b8e7c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b8e74:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b8e78:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b8e7c:	f1bb 0f00 	cmp.w	fp, #0
   b8e80:	d003      	beq.n	b8e8a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b8e82:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b8e86:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b8e8a:	f1ba 0f00 	cmp.w	sl, #0
   b8e8e:	d003      	beq.n	b8e98 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b8e90:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b8e94:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b8e98:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8e9a:	b11a      	cbz	r2, b8ea4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b8e9c:	9914      	ldr	r1, [sp, #80]	; 0x50
   b8e9e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b8ea2:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b8ea4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b8ea6:	b11a      	cbz	r2, b8eb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b8ea8:	9915      	ldr	r1, [sp, #84]	; 0x54
   b8eaa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b8eae:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b8eb0:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b8eb2:	493e      	ldr	r1, [pc, #248]	; (b8fac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b8eb4:	3b01      	subs	r3, #1
   b8eb6:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b8eb8:	429a      	cmp	r2, r3
		*len = msgLen;
   b8eba:	bf88      	it	hi
   b8ebc:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b8ebe:	783a      	ldrb	r2, [r7, #0]
   b8ec0:	4648      	mov	r0, r9
   b8ec2:	f005 fe9d 	bl	bec00 <memcpy>
	    return true;
   b8ec6:	e7c9      	b.n	b8e5c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b8ec8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b8ecc:	2aff      	cmp	r2, #255	; 0xff
   b8ece:	d1c4      	bne.n	b8e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b8ed0:	2b01      	cmp	r3, #1
   b8ed2:	d9c2      	bls.n	b8e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b8ed4:	7832      	ldrb	r2, [r6, #0]
   b8ed6:	2a01      	cmp	r2, #1
   b8ed8:	d1bf      	bne.n	b8e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b8eda:	7a2a      	ldrb	r2, [r5, #8]
   b8edc:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b8ee0:	42a2      	cmp	r2, r4
   b8ee2:	d0ba      	beq.n	b8e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b8ee4:	1edf      	subs	r7, r3, #3
   b8ee6:	4932      	ldr	r1, [pc, #200]	; (b8fb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b8ee8:	b2ff      	uxtb	r7, r7
   b8eea:	2300      	movs	r3, #0
   b8eec:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b8ef0:	4547      	cmp	r7, r8
   b8ef2:	d906      	bls.n	b8f02 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b8ef4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8ef8:	4282      	cmp	r2, r0
   b8efa:	f103 0301 	add.w	r3, r3, #1
   b8efe:	d1f5      	bne.n	b8eec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b8f00:	e7ab      	b.n	b8e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b8f02:	f105 0904 	add.w	r9, r5, #4
   b8f06:	4648      	mov	r0, r9
   b8f08:	f7ff fce0 	bl	b88cc <_ZN10RHDatagram10headerFromEv>
   b8f0c:	2302      	movs	r3, #2
   b8f0e:	4602      	mov	r2, r0
   b8f10:	4621      	mov	r1, r4
   b8f12:	4628      	mov	r0, r5
   b8f14:	f000 f9ec 	bl	b92f0 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b8f18:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b8f1c:	b193      	cbz	r3, b8f44 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b8f1e:	4c22      	ldr	r4, [pc, #136]	; (b8fa8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b8f20:	1ba3      	subs	r3, r4, r6
   b8f22:	b2db      	uxtb	r3, r3
   b8f24:	429f      	cmp	r7, r3
   b8f26:	d90c      	bls.n	b8f42 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b8f28:	78e1      	ldrb	r1, [r4, #3]
   b8f2a:	9105      	str	r1, [sp, #20]
   b8f2c:	4648      	mov	r0, r9
   b8f2e:	f7ff fccd 	bl	b88cc <_ZN10RHDatagram10headerFromEv>
   b8f32:	9905      	ldr	r1, [sp, #20]
   b8f34:	4602      	mov	r2, r0
   b8f36:	2302      	movs	r3, #2
   b8f38:	4628      	mov	r0, r5
   b8f3a:	f000 f9d9 	bl	b92f0 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b8f3e:	3401      	adds	r4, #1
   b8f40:	e7ee      	b.n	b8f20 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b8f42:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b8f44:	682b      	ldr	r3, [r5, #0]
   b8f46:	7872      	ldrb	r2, [r6, #1]
   b8f48:	68db      	ldr	r3, [r3, #12]
   b8f4a:	491a      	ldr	r1, [pc, #104]	; (b8fb4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b8f4c:	4628      	mov	r0, r5
   b8f4e:	4798      	blx	r3
   b8f50:	4604      	mov	r4, r0
   b8f52:	b160      	cbz	r0, b8f6e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b8f54:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b8f56:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b8f58:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b8f5a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b8f5e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b8f62:	4911      	ldr	r1, [pc, #68]	; (b8fa8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b8f64:	9400      	str	r4, [sp, #0]
   b8f66:	4628      	mov	r0, r5
   b8f68:	f000 fa4a 	bl	b9400 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b8f6c:	e776      	b.n	b8e5c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b8f6e:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b8f72:	4543      	cmp	r3, r8
   b8f74:	f67f af71 	bls.w	b8e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b8f78:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b8f7c:	2b00      	cmp	r3, #0
   b8f7e:	f43f af6c 	beq.w	b8e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b8f82:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b8f86:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8f88:	4907      	ldr	r1, [pc, #28]	; (b8fa8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b8f8a:	443e      	add	r6, r7
		tmpMessageLen++;
   b8f8c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b8f8e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8f90:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b8f94:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b8f96:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8f98:	9300      	str	r3, [sp, #0]
   b8f9a:	4628      	mov	r0, r5
   b8f9c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b8f9e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8fa2:	f000 f9f7 	bl	b9394 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b8fa6:	e759      	b.n	b8e5c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b8fa8:	2003e474 	.word	0x2003e474
   b8fac:	2003e475 	.word	0x2003e475
   b8fb0:	2003e477 	.word	0x2003e477
   b8fb4:	2003e476 	.word	0x2003e476

000b8fb8 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b8fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8fba:	b085      	sub	sp, #20
   b8fbc:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b8fbe:	3004      	adds	r0, #4
{
   b8fc0:	460e      	mov	r6, r1
   b8fc2:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b8fc4:	f7ff fc82 	bl	b88cc <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b8fc8:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b8fca:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b8fcc:	4631      	mov	r1, r6
   b8fce:	4628      	mov	r0, r5
   b8fd0:	f000 f94a 	bl	b9268 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b8fd4:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b8fd6:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b8fd8:	d001      	beq.n	b8fde <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b8fda:	2805      	cmp	r0, #5
   b8fdc:	d11b      	bne.n	b9016 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b8fde:	7831      	ldrb	r1, [r6, #0]
   b8fe0:	4628      	mov	r0, r5
   b8fe2:	f000 f96e 	bl	b92c2 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b8fe6:	7872      	ldrb	r2, [r6, #1]
   b8fe8:	7a2b      	ldrb	r3, [r5, #8]
   b8fea:	429a      	cmp	r2, r3
   b8fec:	d013      	beq.n	b9016 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b8fee:	4c0b      	ldr	r4, [pc, #44]	; (b901c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b8ff0:	2303      	movs	r3, #3
   b8ff2:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b8ff4:	7833      	ldrb	r3, [r6, #0]
   b8ff6:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b8ff8:	7871      	ldrb	r1, [r6, #1]
   b8ffa:	2302      	movs	r3, #2
   b8ffc:	463a      	mov	r2, r7
   b8ffe:	4628      	mov	r0, r5
   b9000:	f000 f976 	bl	b92f0 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b9004:	2300      	movs	r3, #0
   b9006:	9300      	str	r3, [sp, #0]
   b9008:	4621      	mov	r1, r4
   b900a:	7873      	ldrb	r3, [r6, #1]
   b900c:	2202      	movs	r2, #2
   b900e:	4628      	mov	r0, r5
   b9010:	f000 f9f6 	bl	b9400 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b9014:	4604      	mov	r4, r0
}
   b9016:	4620      	mov	r0, r4
   b9018:	b005      	add	sp, #20
   b901a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b901c:	2003e474 	.word	0x2003e474

000b9020 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b9020:	b510      	push	{r4, lr}
   b9022:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b9024:	f7ff fc02 	bl	b882c <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b9028:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b902a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b902c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b902e:	2303      	movs	r3, #3
    _retransmissions = 0;
   b9030:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b9032:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b9034:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b9036:	f44f 7280 	mov.w	r2, #256	; 0x100
   b903a:	f104 0011 	add.w	r0, r4, #17
   b903e:	f005 fe07 	bl	bec50 <memset>
}
   b9042:	4620      	mov	r0, r4
   b9044:	bd10      	pop	{r4, pc}

000b9046 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b9046:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9048:	4604      	mov	r4, r0
   b904a:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b904c:	f7ff fc32 	bl	b88b4 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b9050:	4620      	mov	r0, r4
   b9052:	2200      	movs	r2, #0
   b9054:	2180      	movs	r1, #128	; 0x80
   b9056:	f7ff fc31 	bl	b88bc <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b905a:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b905c:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b905e:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b9062:	f10d 010f 	add.w	r1, sp, #15
   b9066:	2201      	movs	r2, #1
   b9068:	4620      	mov	r0, r4
   b906a:	f7ff fbf4 	bl	b8856 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b906e:	4620      	mov	r0, r4
   b9070:	f7ff fbe3 	bl	b883a <_ZN10RHDatagram14waitPacketSentEv>
}
   b9074:	b004      	add	sp, #16
   b9076:	bd10      	pop	{r4, pc}

000b9078 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b9078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b907c:	7b05      	ldrb	r5, [r0, #12]
   b907e:	3501      	adds	r5, #1
   b9080:	b2ed      	uxtb	r5, r5
{
   b9082:	b087      	sub	sp, #28
   b9084:	4604      	mov	r4, r0
   b9086:	4689      	mov	r9, r1
   b9088:	4692      	mov	sl, r2
   b908a:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b908c:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b908e:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b9090:	7c22      	ldrb	r2, [r4, #16]
   b9092:	463b      	mov	r3, r7
   b9094:	429a      	cmp	r2, r3
   b9096:	f107 0701 	add.w	r7, r7, #1
   b909a:	b2ff      	uxtb	r7, r7
   b909c:	d36b      	bcc.n	b9176 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b909e:	4629      	mov	r1, r5
   b90a0:	4620      	mov	r0, r4
   b90a2:	f7ff fc07 	bl	b88b4 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b90a6:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b90a8:	bf0d      	iteet	eq
   b90aa:	22c0      	moveq	r2, #192	; 0xc0
   b90ac:	2280      	movne	r2, #128	; 0x80
   b90ae:	2140      	movne	r1, #64	; 0x40
   b90b0:	2100      	moveq	r1, #0
   b90b2:	4620      	mov	r0, r4
   b90b4:	f7ff fc02 	bl	b88bc <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b90b8:	4643      	mov	r3, r8
   b90ba:	4652      	mov	r2, sl
   b90bc:	4649      	mov	r1, r9
   b90be:	4620      	mov	r0, r4
   b90c0:	f7ff fbc9 	bl	b8856 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b90c4:	4620      	mov	r0, r4
   b90c6:	f7ff fbb8 	bl	b883a <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b90ca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b90ce:	d054      	beq.n	b917a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b90d0:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b90d2:	bf82      	ittt	hi
   b90d4:	68a3      	ldrhi	r3, [r4, #8]
   b90d6:	3301      	addhi	r3, #1
   b90d8:	60a3      	strhi	r3, [r4, #8]
   b90da:	f001 fadd 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b90de:	f44f 7180 	mov.w	r1, #256	; 0x100
   b90e2:	4683      	mov	fp, r0
   b90e4:	2000      	movs	r0, #0
   b90e6:	89e6      	ldrh	r6, [r4, #14]
   b90e8:	f004 f8f5 	bl	bd2d6 <_Z6randomii>
   b90ec:	4370      	muls	r0, r6
   b90ee:	bf48      	it	mi
   b90f0:	30ff      	addmi	r0, #255	; 0xff
   b90f2:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b90f6:	fa1b f686 	uxtah	r6, fp, r6
   b90fa:	f001 facd 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
   b90fe:	1a30      	subs	r0, r6, r0
   b9100:	2800      	cmp	r0, #0
   b9102:	ddc5      	ble.n	b9090 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b9104:	b281      	uxth	r1, r0
   b9106:	2200      	movs	r2, #0
   b9108:	4620      	mov	r0, r4
   b910a:	f7ff fb9a 	bl	b8842 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b910e:	2800      	cmp	r0, #0
   b9110:	d0f3      	beq.n	b90fa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b9112:	f10d 0317 	add.w	r3, sp, #23
   b9116:	9302      	str	r3, [sp, #8]
   b9118:	f10d 0316 	add.w	r3, sp, #22
   b911c:	9301      	str	r3, [sp, #4]
   b911e:	2200      	movs	r2, #0
   b9120:	f10d 0315 	add.w	r3, sp, #21
   b9124:	9300      	str	r3, [sp, #0]
   b9126:	4611      	mov	r1, r2
   b9128:	ab05      	add	r3, sp, #20
   b912a:	4620      	mov	r0, r4
   b912c:	f7ff fbda 	bl	b88e4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9130:	2800      	cmp	r0, #0
   b9132:	d0e2      	beq.n	b90fa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b9134:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b9138:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b913c:	4542      	cmp	r2, r8
   b913e:	d10e      	bne.n	b915e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b9140:	f894 c004 	ldrb.w	ip, [r4, #4]
   b9144:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b9148:	458c      	cmp	ip, r1
   b914a:	d108      	bne.n	b915e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b914c:	2b00      	cmp	r3, #0
   b914e:	da08      	bge.n	b9162 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b9150:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b9154:	42ab      	cmp	r3, r5
   b9156:	d1d0      	bne.n	b90fa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b9158:	b007      	add	sp, #28
   b915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b915e:	2b00      	cmp	r3, #0
   b9160:	dbcb      	blt.n	b90fa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b9162:	18a1      	adds	r1, r4, r2
   b9164:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b9168:	7c49      	ldrb	r1, [r1, #17]
   b916a:	4299      	cmp	r1, r3
   b916c:	d1c5      	bne.n	b90fa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b916e:	4620      	mov	r0, r4
   b9170:	f7ff ff69 	bl	b9046 <_ZN18RHReliableDatagram11acknowledgeEhh>
   b9174:	e7c1      	b.n	b90fa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b9176:	2000      	movs	r0, #0
   b9178:	e7ee      	b.n	b9158 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b917a:	2001      	movs	r0, #1
   b917c:	e7ec      	b.n	b9158 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b917e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b917e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9182:	b089      	sub	sp, #36	; 0x24
   b9184:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b9188:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b918c:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b918e:	4604      	mov	r4, r0
   b9190:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b9192:	f7ff fb4e 	bl	b8832 <_ZN10RHDatagram9availableEv>
   b9196:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b919a:	b920      	cbnz	r0, b91a6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b919c:	2500      	movs	r5, #0
}
   b919e:	4628      	mov	r0, r5
   b91a0:	b009      	add	sp, #36	; 0x24
   b91a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b91a6:	f10d 031f 	add.w	r3, sp, #31
   b91aa:	9302      	str	r3, [sp, #8]
   b91ac:	f10d 031e 	add.w	r3, sp, #30
   b91b0:	9301      	str	r3, [sp, #4]
   b91b2:	f10d 031d 	add.w	r3, sp, #29
   b91b6:	9300      	str	r3, [sp, #0]
   b91b8:	4620      	mov	r0, r4
   b91ba:	ab07      	add	r3, sp, #28
   b91bc:	f7ff fb92 	bl	b88e4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b91c0:	4605      	mov	r5, r0
   b91c2:	2800      	cmp	r0, #0
   b91c4:	d0ea      	beq.n	b919c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b91c6:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b91ca:	2b00      	cmp	r3, #0
   b91cc:	dbe6      	blt.n	b919c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b91ce:	7922      	ldrb	r2, [r4, #4]
   b91d0:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b91d4:	429a      	cmp	r2, r3
   b91d6:	d106      	bne.n	b91e6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b91d8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b91dc:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b91e0:	4620      	mov	r0, r4
   b91e2:	f7ff ff30 	bl	b9046 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b91e6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b91ea:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b91ee:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b91f2:	f012 0f40 	tst.w	r2, #64	; 0x40
   b91f6:	440c      	add	r4, r1
   b91f8:	d002      	beq.n	b9200 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b91fa:	7c60      	ldrb	r0, [r4, #17]
   b91fc:	4298      	cmp	r0, r3
   b91fe:	d0cd      	beq.n	b919c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b9200:	b106      	cbz	r6, b9204 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b9202:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b9204:	f1b9 0f00 	cmp.w	r9, #0
   b9208:	d003      	beq.n	b9212 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b920a:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b920e:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b9212:	f1b8 0f00 	cmp.w	r8, #0
   b9216:	d001      	beq.n	b921c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b9218:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b921c:	b107      	cbz	r7, b9220 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b921e:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b9220:	7463      	strb	r3, [r4, #17]
		return true;
   b9222:	e7bc      	b.n	b919e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b9224 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b9224:	4770      	bx	lr

000b9226 <_ZN8RHRouter4initEv>:
{
   b9226:	b510      	push	{r4, lr}
   b9228:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b922a:	3004      	adds	r0, #4
   b922c:	f7ff fb34 	bl	b8898 <_ZN10RHDatagram4initEv>
    if (ret)
   b9230:	b110      	cbz	r0, b9238 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b9232:	231e      	movs	r3, #30
   b9234:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b9238:	bd10      	pop	{r4, pc}

000b923a <_ZN8RHRouter10getRouteToEh>:
{
   b923a:	b510      	push	{r4, lr}
   b923c:	4602      	mov	r2, r0
   b923e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b9240:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b9244:	428c      	cmp	r4, r1
   b9246:	d108      	bne.n	b925a <_ZN8RHRouter10getRouteToEh+0x20>
   b9248:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b924c:	b12c      	cbz	r4, b925a <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b924e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b9252:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b9256:	4418      	add	r0, r3
}
   b9258:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b925a:	3301      	adds	r3, #1
   b925c:	2b32      	cmp	r3, #50	; 0x32
   b925e:	f102 0203 	add.w	r2, r2, #3
   b9262:	d1ed      	bne.n	b9240 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b9264:	2000      	movs	r0, #0
   b9266:	e7f7      	b.n	b9258 <_ZN8RHRouter10getRouteToEh+0x1e>

000b9268 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b9268:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b926a:	780b      	ldrb	r3, [r1, #0]
   b926c:	2bff      	cmp	r3, #255	; 0xff
{
   b926e:	4605      	mov	r5, r0
   b9270:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b9272:	d006      	beq.n	b9282 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b9274:	4619      	mov	r1, r3
   b9276:	9201      	str	r2, [sp, #4]
   b9278:	f7ff ffdf 	bl	b923a <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b927c:	b158      	cbz	r0, b9296 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b927e:	7843      	ldrb	r3, [r0, #1]
   b9280:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b9282:	4621      	mov	r1, r4
   b9284:	1d28      	adds	r0, r5, #4
   b9286:	f7ff fef7 	bl	b9078 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b928a:	2800      	cmp	r0, #0
   b928c:	bf14      	ite	ne
   b928e:	2000      	movne	r0, #0
   b9290:	2005      	moveq	r0, #5
}
   b9292:	b003      	add	sp, #12
   b9294:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b9296:	2002      	movs	r0, #2
   b9298:	e7fb      	b.n	b9292 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b929a <_ZN8RHRouter11deleteRouteEh>:
{
   b929a:	b510      	push	{r4, lr}
   b929c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b92a0:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b92a2:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b92a6:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b92aa:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b92ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b92b2:	4421      	add	r1, r4
   b92b4:	4420      	add	r0, r4
   b92b6:	f005 fca3 	bl	bec00 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b92ba:	2300      	movs	r3, #0
   b92bc:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b92c0:	bd10      	pop	{r4, pc}

000b92c2 <_ZN8RHRouter13deleteRouteToEh>:
{
   b92c2:	b538      	push	{r3, r4, r5, lr}
   b92c4:	460a      	mov	r2, r1
   b92c6:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b92c8:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b92cc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b92d0:	b2d9      	uxtb	r1, r3
   b92d2:	5d65      	ldrb	r5, [r4, r5]
   b92d4:	4295      	cmp	r5, r2
   b92d6:	d103      	bne.n	b92e0 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b92d8:	f7ff ffdf 	bl	b929a <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b92dc:	2001      	movs	r0, #1
}
   b92de:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b92e0:	3301      	adds	r3, #1
   b92e2:	2b32      	cmp	r3, #50	; 0x32
   b92e4:	d1f2      	bne.n	b92cc <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b92e6:	2000      	movs	r0, #0
   b92e8:	e7f9      	b.n	b92de <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b92ea <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b92ea:	2100      	movs	r1, #0
   b92ec:	f7ff bfd5 	b.w	b929a <_ZN8RHRouter11deleteRouteEh>

000b92f0 <_ZN8RHRouter10addRouteToEhhh>:
{
   b92f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b92f2:	4616      	mov	r6, r2
   b92f4:	461f      	mov	r7, r3
   b92f6:	4604      	mov	r4, r0
   b92f8:	460d      	mov	r5, r1
   b92fa:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b92fc:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b9300:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9304:	5c11      	ldrb	r1, [r2, r0]
   b9306:	42a9      	cmp	r1, r5
   b9308:	d105      	bne.n	b9316 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b930a:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b930c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b9310:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b9314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9316:	3301      	adds	r3, #1
   b9318:	2b32      	cmp	r3, #50	; 0x32
   b931a:	d1f1      	bne.n	b9300 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b931c:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b931e:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b9322:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9326:	5c11      	ldrb	r1, [r2, r0]
   b9328:	b919      	cbnz	r1, b9332 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b932a:	4420      	add	r0, r4
   b932c:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b9330:	e7ec      	b.n	b930c <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9332:	3301      	adds	r3, #1
   b9334:	2b32      	cmp	r3, #50	; 0x32
   b9336:	d1f4      	bne.n	b9322 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b9338:	4620      	mov	r0, r4
   b933a:	f7ff ffd6 	bl	b92ea <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b933e:	4620      	mov	r0, r4
   b9340:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b9344:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b9348:	b92a      	cbnz	r2, b9356 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b934a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b934e:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b9352:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9356:	3003      	adds	r0, #3
   b9358:	4298      	cmp	r0, r3
   b935a:	d1f3      	bne.n	b9344 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b935c:	e7da      	b.n	b9314 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b935e <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b935e:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b9362:	2200      	movs	r2, #0
   b9364:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9368:	3003      	adds	r0, #3
   b936a:	4298      	cmp	r0, r3
   b936c:	d1fa      	bne.n	b9364 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b936e:	4770      	bx	lr

000b9370 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b9370:	b510      	push	{r4, lr}
   b9372:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b9374:	3004      	adds	r0, #4
   b9376:	f7ff fe53 	bl	b9020 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b937a:	4b05      	ldr	r3, [pc, #20]	; (b9390 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b937c:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b937e:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b9382:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b9384:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b9388:	f7ff ffe9 	bl	b935e <_ZN8RHRouter17clearRoutingTableEv>
}
   b938c:	4620      	mov	r0, r4
   b938e:	bd10      	pop	{r4, pc}
   b9390:	000c0298 	.word	0x000c0298

000b9394 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b9394:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b9398:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b939a:	6840      	ldr	r0, [r0, #4]
{
   b939c:	9101      	str	r1, [sp, #4]
   b939e:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b93a0:	6803      	ldr	r3, [r0, #0]
{
   b93a2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b93a6:	699b      	ldr	r3, [r3, #24]
{
   b93a8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b93ac:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b93ae:	4798      	blx	r3
   b93b0:	f106 0805 	add.w	r8, r6, #5
   b93b4:	4580      	cmp	r8, r0
   b93b6:	d81c      	bhi.n	b93f2 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b93b8:	4d10      	ldr	r5, [pc, #64]	; (b93fc <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b93ba:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b93bc:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b93c0:	2300      	movs	r3, #0
   b93c2:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b93c4:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b93c8:	70eb      	strb	r3, [r5, #3]
   b93ca:	1c5a      	adds	r2, r3, #1
   b93cc:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b93d0:	1d68      	adds	r0, r5, #5
   b93d2:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b93d4:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b93d6:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b93da:	f005 fc11 	bl	bec00 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b93de:	6823      	ldr	r3, [r4, #0]
   b93e0:	685b      	ldr	r3, [r3, #4]
   b93e2:	fa5f f288 	uxtb.w	r2, r8
   b93e6:	4629      	mov	r1, r5
   b93e8:	4620      	mov	r0, r4
}
   b93ea:	b002      	add	sp, #8
   b93ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b93f0:	4718      	bx	r3
}
   b93f2:	2001      	movs	r0, #1
   b93f4:	b002      	add	sp, #8
   b93f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b93fa:	bf00      	nop
   b93fc:	2003e4ee 	.word	0x2003e4ee

000b9400 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b9400:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b9402:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b9406:	9401      	str	r4, [sp, #4]
   b9408:	7a04      	ldrb	r4, [r0, #8]
   b940a:	9400      	str	r4, [sp, #0]
   b940c:	f7ff ffc2 	bl	b9394 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b9410:	b002      	add	sp, #8
   b9412:	bd10      	pop	{r4, pc}

000b9414 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b9414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9418:	b087      	sub	sp, #28
   b941a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b941c:	237f      	movs	r3, #127	; 0x7f
   b941e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9422:	f10d 0317 	add.w	r3, sp, #23
   b9426:	9302      	str	r3, [sp, #8]
   b9428:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b94fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b942c:	f10d 0316 	add.w	r3, sp, #22
   b9430:	9301      	str	r3, [sp, #4]
   b9432:	f10d 0315 	add.w	r3, sp, #21
   b9436:	9300      	str	r3, [sp, #0]
{  
   b9438:	4604      	mov	r4, r0
   b943a:	4688      	mov	r8, r1
   b943c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b943e:	ab05      	add	r3, sp, #20
   b9440:	f10d 0213 	add.w	r2, sp, #19
   b9444:	4649      	mov	r1, r9
   b9446:	3004      	adds	r0, #4
{  
   b9448:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b944c:	f7ff fe97 	bl	b917e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b9450:	4605      	mov	r5, r0
   b9452:	b908      	cbnz	r0, b9458 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b9454:	2500      	movs	r5, #0
   b9456:	e038      	b.n	b94ca <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b9458:	6823      	ldr	r3, [r4, #0]
   b945a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b945e:	681b      	ldr	r3, [r3, #0]
   b9460:	4649      	mov	r1, r9
   b9462:	4620      	mov	r0, r4
   b9464:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b9466:	f899 3000 	ldrb.w	r3, [r9]
   b946a:	7a22      	ldrb	r2, [r4, #8]
   b946c:	429a      	cmp	r2, r3
   b946e:	d001      	beq.n	b9474 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b9470:	2bff      	cmp	r3, #255	; 0xff
   b9472:	d12e      	bne.n	b94d2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b9474:	b117      	cbz	r7, b947c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b9476:	4b21      	ldr	r3, [pc, #132]	; (b94fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9478:	785b      	ldrb	r3, [r3, #1]
   b947a:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b947c:	f1bb 0f00 	cmp.w	fp, #0
   b9480:	d003      	beq.n	b948a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b9482:	4b1e      	ldr	r3, [pc, #120]	; (b94fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9484:	781b      	ldrb	r3, [r3, #0]
   b9486:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b948a:	f1ba 0f00 	cmp.w	sl, #0
   b948e:	d003      	beq.n	b9498 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b9490:	4b1a      	ldr	r3, [pc, #104]	; (b94fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9492:	78db      	ldrb	r3, [r3, #3]
   b9494:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b9498:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b949a:	b11b      	cbz	r3, b94a4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b949c:	4b17      	ldr	r3, [pc, #92]	; (b94fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b949e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b94a0:	791b      	ldrb	r3, [r3, #4]
   b94a2:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b94a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b94a6:	b11b      	cbz	r3, b94b0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b94a8:	4b14      	ldr	r3, [pc, #80]	; (b94fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b94aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b94ac:	789b      	ldrb	r3, [r3, #2]
   b94ae:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b94b0:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b94b4:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b94b6:	4912      	ldr	r1, [pc, #72]	; (b9500 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b94b8:	3b05      	subs	r3, #5
   b94ba:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b94bc:	429a      	cmp	r2, r3
		*len = msgLen;
   b94be:	bf88      	it	hi
   b94c0:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b94c2:	7832      	ldrb	r2, [r6, #0]
   b94c4:	4640      	mov	r0, r8
   b94c6:	f005 fb9b 	bl	bec00 <memcpy>
}
   b94ca:	4628      	mov	r0, r5
   b94cc:	b007      	add	sp, #28
   b94ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b94d2:	f899 3002 	ldrb.w	r3, [r9, #2]
   b94d6:	1c5a      	adds	r2, r3, #1
   b94d8:	f889 2002 	strb.w	r2, [r9, #2]
   b94dc:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b94e0:	429a      	cmp	r2, r3
   b94e2:	d9b7      	bls.n	b9454 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b94e4:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b94e8:	2b00      	cmp	r3, #0
   b94ea:	d0b3      	beq.n	b9454 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b94ec:	6823      	ldr	r3, [r4, #0]
   b94ee:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b94f2:	685b      	ldr	r3, [r3, #4]
   b94f4:	4649      	mov	r1, r9
   b94f6:	4620      	mov	r0, r4
   b94f8:	4798      	blx	r3
   b94fa:	e7ab      	b.n	b9454 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b94fc:	2003e4ee 	.word	0x2003e4ee
   b9500:	2003e4f3 	.word	0x2003e4f3

000b9504 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b9504:	b510      	push	{r4, lr}
   b9506:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b9508:	6a00      	ldr	r0, [r0, #32]
   b950a:	6803      	ldr	r3, [r0, #0]
   b950c:	68db      	ldr	r3, [r3, #12]
   b950e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b9510:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b9514:	28ff      	cmp	r0, #255	; 0xff
   b9516:	d002      	beq.n	b951e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b9518:	2101      	movs	r1, #1
   b951a:	f004 fd53 	bl	bdfc4 <pinMode>

    deselectSlave();
   b951e:	6823      	ldr	r3, [r4, #0]
   b9520:	4620      	mov	r0, r4
   b9522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9524:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b9526:	2064      	movs	r0, #100	; 0x64
   b9528:	f001 fcc2 	bl	baeb0 <delay>
#endif
    
    return true;
}
   b952c:	2001      	movs	r0, #1
   b952e:	bd10      	pop	{r4, pc}

000b9530 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b9530:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b9534:	2100      	movs	r1, #0
   b9536:	f004 bd56 	b.w	bdfe6 <digitalWrite>

000b953a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b953a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b953e:	2101      	movs	r1, #1
   b9540:	f004 bd51 	b.w	bdfe6 <digitalWrite>

000b9544 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b9544:	b570      	push	{r4, r5, r6, lr}
   b9546:	4604      	mov	r4, r0
   b9548:	460d      	mov	r5, r1
   b954a:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b954c:	f7ff fa7e 	bl	b8a4c <_ZN15RHGenericDriverC1Ev>
   b9550:	4b03      	ldr	r3, [pc, #12]	; (b9560 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b9552:	6023      	str	r3, [r4, #0]
   b9554:	6226      	str	r6, [r4, #32]
   b9556:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b955a:	4620      	mov	r0, r4
   b955c:	bd70      	pop	{r4, r5, r6, pc}
   b955e:	bf00      	nop
   b9560:	000c02a8 	.word	0x000c02a8

000b9564 <_ZN11RHSPIDriver7spiReadEh>:
{
   b9564:	b538      	push	{r3, r4, r5, lr}
   b9566:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9568:	6a00      	ldr	r0, [r0, #32]
   b956a:	6803      	ldr	r3, [r0, #0]
   b956c:	6a1b      	ldr	r3, [r3, #32]
{
   b956e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b9570:	4798      	blx	r3
    selectSlave();
   b9572:	6823      	ldr	r3, [r4, #0]
   b9574:	4620      	mov	r0, r4
   b9576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9578:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b957a:	6a20      	ldr	r0, [r4, #32]
   b957c:	6803      	ldr	r3, [r0, #0]
   b957e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b9582:	681b      	ldr	r3, [r3, #0]
   b9584:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9586:	6a20      	ldr	r0, [r4, #32]
   b9588:	6803      	ldr	r3, [r0, #0]
   b958a:	2100      	movs	r1, #0
   b958c:	681b      	ldr	r3, [r3, #0]
   b958e:	4798      	blx	r3
    deselectSlave();
   b9590:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9592:	4605      	mov	r5, r0
    deselectSlave();
   b9594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9596:	4620      	mov	r0, r4
   b9598:	4798      	blx	r3
    _spi.endTransaction();
   b959a:	6a20      	ldr	r0, [r4, #32]
   b959c:	6803      	ldr	r3, [r0, #0]
   b959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b95a0:	4798      	blx	r3
}
   b95a2:	4628      	mov	r0, r5
   b95a4:	bd38      	pop	{r3, r4, r5, pc}

000b95a6 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b95a6:	b570      	push	{r4, r5, r6, lr}
   b95a8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b95aa:	6a00      	ldr	r0, [r0, #32]
   b95ac:	6803      	ldr	r3, [r0, #0]
   b95ae:	6a1b      	ldr	r3, [r3, #32]
{
   b95b0:	4616      	mov	r6, r2
   b95b2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b95b4:	4798      	blx	r3
    selectSlave();
   b95b6:	6823      	ldr	r3, [r4, #0]
   b95b8:	4620      	mov	r0, r4
   b95ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b95bc:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b95be:	6a20      	ldr	r0, [r4, #32]
   b95c0:	6803      	ldr	r3, [r0, #0]
   b95c2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b95c6:	681b      	ldr	r3, [r3, #0]
   b95c8:	4798      	blx	r3
   b95ca:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b95cc:	6a20      	ldr	r0, [r4, #32]
   b95ce:	6803      	ldr	r3, [r0, #0]
   b95d0:	4631      	mov	r1, r6
   b95d2:	681b      	ldr	r3, [r3, #0]
   b95d4:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b95d6:	2001      	movs	r0, #1
   b95d8:	f001 f856 	bl	ba688 <HAL_Delay_Microseconds>
    deselectSlave();
   b95dc:	6823      	ldr	r3, [r4, #0]
   b95de:	4620      	mov	r0, r4
   b95e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b95e2:	4798      	blx	r3
    _spi.endTransaction();
   b95e4:	6a20      	ldr	r0, [r4, #32]
   b95e6:	6803      	ldr	r3, [r0, #0]
   b95e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b95ea:	4798      	blx	r3
}
   b95ec:	4628      	mov	r0, r5
   b95ee:	bd70      	pop	{r4, r5, r6, pc}

000b95f0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b95f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b95f2:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b95f4:	6a00      	ldr	r0, [r0, #32]
{
   b95f6:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b95f8:	6803      	ldr	r3, [r0, #0]
   b95fa:	6a1b      	ldr	r3, [r3, #32]
{
   b95fc:	460f      	mov	r7, r1
   b95fe:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9600:	4798      	blx	r3
    selectSlave();
   b9602:	6823      	ldr	r3, [r4, #0]
   b9604:	4620      	mov	r0, r4
   b9606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9608:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b960a:	6a20      	ldr	r0, [r4, #32]
   b960c:	6803      	ldr	r3, [r0, #0]
   b960e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b9612:	681b      	ldr	r3, [r3, #0]
   b9614:	4798      	blx	r3
   b9616:	442e      	add	r6, r5
   b9618:	4607      	mov	r7, r0
    while (len--)
   b961a:	42b5      	cmp	r5, r6
   b961c:	d007      	beq.n	b962e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b961e:	6a20      	ldr	r0, [r4, #32]
   b9620:	6803      	ldr	r3, [r0, #0]
   b9622:	2100      	movs	r1, #0
   b9624:	681b      	ldr	r3, [r3, #0]
   b9626:	4798      	blx	r3
   b9628:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b962c:	e7f5      	b.n	b961a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b962e:	6823      	ldr	r3, [r4, #0]
   b9630:	4620      	mov	r0, r4
   b9632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9634:	4798      	blx	r3
    _spi.endTransaction();
   b9636:	6a20      	ldr	r0, [r4, #32]
   b9638:	6803      	ldr	r3, [r0, #0]
   b963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b963c:	4798      	blx	r3
}
   b963e:	4638      	mov	r0, r7
   b9640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9642 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b9642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9644:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9646:	6a00      	ldr	r0, [r0, #32]
{
   b9648:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b964a:	6803      	ldr	r3, [r0, #0]
   b964c:	6a1b      	ldr	r3, [r3, #32]
{
   b964e:	460f      	mov	r7, r1
   b9650:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9652:	4798      	blx	r3
    selectSlave();
   b9654:	6823      	ldr	r3, [r4, #0]
   b9656:	4620      	mov	r0, r4
   b9658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b965a:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b965c:	6a20      	ldr	r0, [r4, #32]
   b965e:	6803      	ldr	r3, [r0, #0]
   b9660:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b9664:	681b      	ldr	r3, [r3, #0]
   b9666:	4798      	blx	r3
   b9668:	442e      	add	r6, r5
   b966a:	4607      	mov	r7, r0
    while (len--)
   b966c:	42b5      	cmp	r5, r6
   b966e:	d006      	beq.n	b967e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b9670:	6a20      	ldr	r0, [r4, #32]
   b9672:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9676:	6803      	ldr	r3, [r0, #0]
   b9678:	681b      	ldr	r3, [r3, #0]
   b967a:	4798      	blx	r3
    while (len--)
   b967c:	e7f6      	b.n	b966c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b967e:	6823      	ldr	r3, [r4, #0]
   b9680:	4620      	mov	r0, r4
   b9682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9684:	4798      	blx	r3
    _spi.endTransaction();
   b9686:	6a20      	ldr	r0, [r4, #32]
   b9688:	6803      	ldr	r3, [r0, #0]
   b968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b968c:	4798      	blx	r3
}
   b968e:	4638      	mov	r0, r7
   b9690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9692 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b9692:	6a00      	ldr	r0, [r0, #32]
   b9694:	6803      	ldr	r3, [r0, #0]
   b9696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9698:	4718      	bx	r3

000b969a <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b969a:	2001      	movs	r0, #1
   b969c:	4770      	bx	lr

000b969e <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b969e:	20fb      	movs	r0, #251	; 0xfb
   b96a0:	4770      	bx	lr

000b96a2 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b96a2:	4770      	bx	lr

000b96a4 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b96a4:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b96a6:	7903      	ldrb	r3, [r0, #4]
   b96a8:	2b05      	cmp	r3, #5
{
   b96aa:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b96ac:	d010      	beq.n	b96d0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b96ae:	6803      	ldr	r3, [r0, #0]
   b96b0:	2105      	movs	r1, #5
   b96b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b96b6:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b96b8:	2207      	movs	r2, #7
   b96ba:	2101      	movs	r1, #1
   b96bc:	4620      	mov	r0, r4
   b96be:	f7ff ff72 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b96c2:	2280      	movs	r2, #128	; 0x80
   b96c4:	2140      	movs	r1, #64	; 0x40
   b96c6:	4620      	mov	r0, r4
   b96c8:	f7ff ff6d 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b96cc:	2305      	movs	r3, #5
   b96ce:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b96d0:	7923      	ldrb	r3, [r4, #4]
   b96d2:	2b05      	cmp	r3, #5
   b96d4:	d0fc      	beq.n	b96d0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b96d6:	7e20      	ldrb	r0, [r4, #24]
}
   b96d8:	bd10      	pop	{r4, pc}

000b96da <_ZN7RH_RF95D0Ev>:
   b96da:	b510      	push	{r4, lr}
   b96dc:	f44f 7198 	mov.w	r1, #304	; 0x130
   b96e0:	4604      	mov	r4, r0
   b96e2:	f7fa fcdc 	bl	b409e <_ZdlPvj>
   b96e6:	4620      	mov	r0, r4
   b96e8:	bd10      	pop	{r4, pc}

000b96ea <_ZN7RH_RF955sleepEv>:
{
   b96ea:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b96ec:	7903      	ldrb	r3, [r0, #4]
   b96ee:	2b01      	cmp	r3, #1
{
   b96f0:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b96f2:	d00b      	beq.n	b970c <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b96f4:	6803      	ldr	r3, [r0, #0]
   b96f6:	2101      	movs	r1, #1
   b96f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b96fc:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b96fe:	2200      	movs	r2, #0
   b9700:	2101      	movs	r1, #1
   b9702:	4620      	mov	r0, r4
   b9704:	f7ff ff4f 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b9708:	2301      	movs	r3, #1
   b970a:	7123      	strb	r3, [r4, #4]
}
   b970c:	2001      	movs	r0, #1
   b970e:	bd10      	pop	{r4, pc}

000b9710 <_ZN7RH_RF954recvEPhS0_>:
{
   b9710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b9712:	6803      	ldr	r3, [r0, #0]
   b9714:	68db      	ldr	r3, [r3, #12]
{
   b9716:	4604      	mov	r4, r0
   b9718:	460f      	mov	r7, r1
   b971a:	4615      	mov	r5, r2
    if (!available())
   b971c:	4798      	blx	r3
   b971e:	4606      	mov	r6, r0
   b9720:	b1b0      	cbz	r0, b9750 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b9722:	b187      	cbz	r7, b9746 <_ZN7RH_RF954recvEPhS0_+0x36>
   b9724:	b17d      	cbz	r5, b9746 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b9726:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b972a:	782a      	ldrb	r2, [r5, #0]
   b972c:	3b03      	subs	r3, #3
   b972e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b9730:	bfde      	ittt	le
   b9732:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b9736:	3b04      	suble	r3, #4
   b9738:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b973a:	782a      	ldrb	r2, [r5, #0]
   b973c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b9740:	4638      	mov	r0, r7
   b9742:	f005 fa5d 	bl	bec00 <memcpy>
    _rxBufValid = false;
   b9746:	2300      	movs	r3, #0
   b9748:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b974c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b9750:	4630      	mov	r0, r6
   b9752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9754 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b9754:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b9756:	b538      	push	{r3, r4, r5, lr}
   b9758:	4605      	mov	r5, r0
   b975a:	460c      	mov	r4, r1
	if (power > 20)
   b975c:	dc14      	bgt.n	b9788 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b975e:	2901      	cmp	r1, #1
   b9760:	dd14      	ble.n	b978c <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b9762:	2911      	cmp	r1, #17
   b9764:	dd13      	ble.n	b978e <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b9766:	2207      	movs	r2, #7
   b9768:	214d      	movs	r1, #77	; 0x4d
   b976a:	4628      	mov	r0, r5
   b976c:	f7ff ff1b 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b9770:	3c03      	subs	r4, #3
   b9772:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b9774:	1ea2      	subs	r2, r4, #2
   b9776:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b977a:	4628      	mov	r0, r5
   b977c:	b2d2      	uxtb	r2, r2
}
   b977e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b9782:	2109      	movs	r1, #9
   b9784:	f7ff bf0f 	b.w	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b9788:	2414      	movs	r4, #20
   b978a:	e7ec      	b.n	b9766 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b978c:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b978e:	2204      	movs	r2, #4
   b9790:	214d      	movs	r1, #77	; 0x4d
   b9792:	4628      	mov	r0, r5
   b9794:	f7ff ff07 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
   b9798:	e7ec      	b.n	b9774 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b979c <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b979c:	b538      	push	{r3, r4, r5, lr}
   b979e:	4604      	mov	r4, r0
   b97a0:	4615      	mov	r5, r2
    _rxBufValid(0)
   b97a2:	461a      	mov	r2, r3
   b97a4:	f7ff fece 	bl	b9544 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b97a8:	4b09      	ldr	r3, [pc, #36]	; (b97d0 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b97aa:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b97ac:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b97ae:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b97b0:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b97b4:	2201      	movs	r2, #1
    _rxBufValid(0)
   b97b6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b97ba:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b97be:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b97c2:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b97c6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b97ca:	4620      	mov	r0, r4
   b97cc:	bd38      	pop	{r3, r4, r5, pc}
   b97ce:	bf00      	nop
   b97d0:	000c0340 	.word	0x000c0340

000b97d4 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b97d4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b97d8:	2b03      	cmp	r3, #3
   b97da:	d91b      	bls.n	b9814 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b97dc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b97e0:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b97e2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b97e6:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b97e8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b97ec:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b97ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b97f2:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b97f4:	7983      	ldrb	r3, [r0, #6]
   b97f6:	b933      	cbnz	r3, b9806 <_ZN7RH_RF9513validateRxBufEv+0x32>
   b97f8:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b97fa:	7942      	ldrb	r2, [r0, #5]
   b97fc:	429a      	cmp	r2, r3
   b97fe:	d002      	beq.n	b9806 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b9800:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b9802:	2bff      	cmp	r3, #255	; 0xff
   b9804:	d106      	bne.n	b9814 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b9806:	8a83      	ldrh	r3, [r0, #20]
   b9808:	3301      	adds	r3, #1
   b980a:	b29b      	uxth	r3, r3
   b980c:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b980e:	2301      	movs	r3, #1
   b9810:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b9814:	4770      	bx	lr
	...

000b9818 <_ZN7RH_RF9512setFrequencyEf>:
{
   b9818:	b538      	push	{r3, r4, r5, lr}
   b981a:	4604      	mov	r4, r0
   b981c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9820:	ee10 0a10 	vmov	r0, s0
{
   b9824:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9828:	f004 fe48 	bl	be4bc <__aeabi_f2d>
   b982c:	a317      	add	r3, pc, #92	; (adr r3, b988c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b982e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9832:	f004 fe9b 	bl	be56c <__aeabi_dmul>
   b9836:	a317      	add	r3, pc, #92	; (adr r3, b9894 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b9838:	e9d3 2300 	ldrd	r2, r3, [r3]
   b983c:	f004 ffc0 	bl	be7c0 <__aeabi_ddiv>
   b9840:	f005 f96c 	bl	beb1c <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b9844:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9846:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b9848:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b984c:	4620      	mov	r0, r4
   b984e:	f7ff feaa 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b9852:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b9856:	2107      	movs	r1, #7
   b9858:	4620      	mov	r0, r4
   b985a:	f7ff fea4 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b985e:	b2ea      	uxtb	r2, r5
   b9860:	2108      	movs	r1, #8
   b9862:	4620      	mov	r0, r4
   b9864:	f7ff fe9f 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b9868:	eddf 7a07 	vldr	s15, [pc, #28]	; b9888 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b986c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b9870:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b9874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9878:	bfac      	ite	ge
   b987a:	2301      	movge	r3, #1
   b987c:	2300      	movlt	r3, #0
}
   b987e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b9880:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b9884:	bd38      	pop	{r3, r4, r5, pc}
   b9886:	bf00      	nop
   b9888:	4442c000 	.word	0x4442c000
   b988c:	00000000 	.word	0x00000000
   b9890:	412e8480 	.word	0x412e8480
   b9894:	00000000 	.word	0x00000000
   b9898:	404e8480 	.word	0x404e8480

000b989c <_ZN7RH_RF9511setModeIdleEv>:
{
   b989c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b989e:	7903      	ldrb	r3, [r0, #4]
   b98a0:	2b02      	cmp	r3, #2
{
   b98a2:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b98a4:	d00b      	beq.n	b98be <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b98a6:	6803      	ldr	r3, [r0, #0]
   b98a8:	2102      	movs	r1, #2
   b98aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b98ae:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b98b0:	2201      	movs	r2, #1
   b98b2:	4611      	mov	r1, r2
   b98b4:	4620      	mov	r0, r4
   b98b6:	f7ff fe76 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b98ba:	2302      	movs	r3, #2
   b98bc:	7123      	strb	r3, [r4, #4]
}
   b98be:	bd10      	pop	{r4, pc}

000b98c0 <_ZN7RH_RF9515handleInterruptEv>:
{
   b98c0:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b98c2:	2112      	movs	r1, #18
{
   b98c4:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b98c6:	f7ff fe4d 	bl	b9564 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b98ca:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b98cc:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b98ce:	4620      	mov	r0, r4
   b98d0:	f7ff fe48 	bl	b9564 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b98d4:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b98d6:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b98d8:	2112      	movs	r1, #18
   b98da:	4620      	mov	r0, r4
   b98dc:	f7ff fe63 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b98e0:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b98e2:	2b04      	cmp	r3, #4
   b98e4:	d107      	bne.n	b98f6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b98e6:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b98ea:	d117      	bne.n	b991c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b98ec:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b98f0:	b10b      	cbz	r3, b98f6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b98f2:	0670      	lsls	r0, r6, #25
   b98f4:	d512      	bpl.n	b991c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b98f6:	7923      	ldrb	r3, [r4, #4]
   b98f8:	2b04      	cmp	r3, #4
   b98fa:	d101      	bne.n	b9900 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b98fc:	0669      	lsls	r1, r5, #25
   b98fe:	d422      	bmi.n	b9946 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b9900:	7923      	ldrb	r3, [r4, #4]
   b9902:	2b03      	cmp	r3, #3
   b9904:	d101      	bne.n	b990a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b9906:	072a      	lsls	r2, r5, #28
   b9908:	d468      	bmi.n	b99dc <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b990a:	7923      	ldrb	r3, [r4, #4]
   b990c:	2b05      	cmp	r3, #5
   b990e:	d10e      	bne.n	b992e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b9910:	076b      	lsls	r3, r5, #29
   b9912:	d50c      	bpl.n	b992e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b9914:	f005 0501 	and.w	r5, r5, #1
   b9918:	7625      	strb	r5, [r4, #24]
   b991a:	e063      	b.n	b99e4 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b991c:	8a63      	ldrh	r3, [r4, #18]
   b991e:	3301      	adds	r3, #1
   b9920:	b29b      	uxth	r3, r3
   b9922:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b9924:	2300      	movs	r3, #0
   b9926:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b992a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b992e:	22ff      	movs	r2, #255	; 0xff
   b9930:	2112      	movs	r1, #18
   b9932:	4620      	mov	r0, r4
   b9934:	f7ff fe37 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9938:	4620      	mov	r0, r4
   b993a:	22ff      	movs	r2, #255	; 0xff
}
   b993c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9940:	2112      	movs	r1, #18
   b9942:	f7ff be30 	b.w	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b9946:	2113      	movs	r1, #19
   b9948:	4620      	mov	r0, r4
   b994a:	f7ff fe0b 	bl	b9564 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b994e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b9950:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b9952:	4620      	mov	r0, r4
   b9954:	f7ff fe06 	bl	b9564 <_ZN11RHSPIDriver7spiReadEh>
   b9958:	210d      	movs	r1, #13
   b995a:	4602      	mov	r2, r0
   b995c:	4620      	mov	r0, r4
   b995e:	f7ff fe22 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b9962:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b9966:	462b      	mov	r3, r5
   b9968:	2100      	movs	r1, #0
   b996a:	4620      	mov	r0, r4
   b996c:	f7ff fe40 	bl	b95f0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b9970:	2119      	movs	r1, #25
	_bufLen = len;
   b9972:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b9976:	4620      	mov	r0, r4
   b9978:	f7ff fdf4 	bl	b9564 <_ZN11RHSPIDriver7spiReadEh>
   b997c:	b240      	sxtb	r0, r0
   b997e:	2800      	cmp	r0, #0
   b9980:	bfb8      	it	lt
   b9982:	3003      	addlt	r0, #3
   b9984:	1080      	asrs	r0, r0, #2
   b9986:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b998a:	211a      	movs	r1, #26
   b998c:	4620      	mov	r0, r4
   b998e:	f7ff fde9 	bl	b9564 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b9992:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b9996:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b9998:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b999a:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b999c:	bfa9      	itett	ge
   b999e:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b99a0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b99a2:	b21b      	sxthge	r3, r3
   b99a4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b99a6:	bfb2      	itee	lt
   b99a8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b99aa:	220f      	movge	r2, #15
   b99ac:	fb93 f3f2 	sdivge	r3, r3, r2
   b99b0:	b21b      	sxth	r3, r3
   b99b2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b99b4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b99b8:	b16b      	cbz	r3, b99d6 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b99ba:	8a23      	ldrh	r3, [r4, #16]
   b99bc:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b99be:	b21b      	sxth	r3, r3
   b99c0:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b99c2:	4620      	mov	r0, r4
   b99c4:	f7ff ff06 	bl	b97d4 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b99c8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b99cc:	2b00      	cmp	r3, #0
   b99ce:	d0ae      	beq.n	b992e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b99d0:	f7ff ff64 	bl	b989c <_ZN7RH_RF9511setModeIdleEv>
   b99d4:	e7ab      	b.n	b992e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b99d6:	8a23      	ldrh	r3, [r4, #16]
   b99d8:	3ba4      	subs	r3, #164	; 0xa4
   b99da:	e7f0      	b.n	b99be <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b99dc:	8ae3      	ldrh	r3, [r4, #22]
   b99de:	3301      	adds	r3, #1
   b99e0:	b29b      	uxth	r3, r3
   b99e2:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b99e4:	4620      	mov	r0, r4
   b99e6:	e7f3      	b.n	b99d0 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b99e8 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b99e8:	4b02      	ldr	r3, [pc, #8]	; (b99f4 <_ZN7RH_RF954isr0Ev+0xc>)
   b99ea:	6818      	ldr	r0, [r3, #0]
   b99ec:	b108      	cbz	r0, b99f2 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b99ee:	f7ff bf67 	b.w	b98c0 <_ZN7RH_RF9515handleInterruptEv>
}
   b99f2:	4770      	bx	lr
   b99f4:	2003e570 	.word	0x2003e570

000b99f8 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b99f8:	4b02      	ldr	r3, [pc, #8]	; (b9a04 <_ZN7RH_RF954isr1Ev+0xc>)
   b99fa:	6858      	ldr	r0, [r3, #4]
   b99fc:	b108      	cbz	r0, b9a02 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b99fe:	f7ff bf5f 	b.w	b98c0 <_ZN7RH_RF9515handleInterruptEv>
}
   b9a02:	4770      	bx	lr
   b9a04:	2003e570 	.word	0x2003e570

000b9a08 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b9a08:	4b02      	ldr	r3, [pc, #8]	; (b9a14 <_ZN7RH_RF954isr2Ev+0xc>)
   b9a0a:	6898      	ldr	r0, [r3, #8]
   b9a0c:	b108      	cbz	r0, b9a12 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b9a0e:	f7ff bf57 	b.w	b98c0 <_ZN7RH_RF9515handleInterruptEv>
}
   b9a12:	4770      	bx	lr
   b9a14:	2003e570 	.word	0x2003e570

000b9a18 <_ZN7RH_RF959setModeRxEv>:
{
   b9a18:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b9a1a:	7903      	ldrb	r3, [r0, #4]
   b9a1c:	2b04      	cmp	r3, #4
{
   b9a1e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b9a20:	d010      	beq.n	b9a44 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b9a22:	6803      	ldr	r3, [r0, #0]
   b9a24:	2104      	movs	r1, #4
   b9a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9a2a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b9a2c:	2205      	movs	r2, #5
   b9a2e:	2101      	movs	r1, #1
   b9a30:	4620      	mov	r0, r4
   b9a32:	f7ff fdb8 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b9a36:	2200      	movs	r2, #0
   b9a38:	2140      	movs	r1, #64	; 0x40
   b9a3a:	4620      	mov	r0, r4
   b9a3c:	f7ff fdb3 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b9a40:	2304      	movs	r3, #4
   b9a42:	7123      	strb	r3, [r4, #4]
}
   b9a44:	bd10      	pop	{r4, pc}

000b9a46 <_ZN7RH_RF959availableEv>:
{
   b9a46:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b9a48:	7903      	ldrb	r3, [r0, #4]
   b9a4a:	2b03      	cmp	r3, #3
{
   b9a4c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b9a4e:	d005      	beq.n	b9a5c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b9a50:	f7ff ffe2 	bl	b9a18 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b9a54:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b9a58:	b2c0      	uxtb	r0, r0
}
   b9a5a:	bd10      	pop	{r4, pc}
	return false;
   b9a5c:	2000      	movs	r0, #0
   b9a5e:	e7fc      	b.n	b9a5a <_ZN7RH_RF959availableEv+0x14>

000b9a60 <_ZN7RH_RF959setModeTxEv>:
{
   b9a60:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b9a62:	7903      	ldrb	r3, [r0, #4]
   b9a64:	2b03      	cmp	r3, #3
{
   b9a66:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b9a68:	d010      	beq.n	b9a8c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b9a6a:	6803      	ldr	r3, [r0, #0]
   b9a6c:	2103      	movs	r1, #3
   b9a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9a72:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b9a74:	2203      	movs	r2, #3
   b9a76:	2101      	movs	r1, #1
   b9a78:	4620      	mov	r0, r4
   b9a7a:	f7ff fd94 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b9a7e:	2240      	movs	r2, #64	; 0x40
   b9a80:	4611      	mov	r1, r2
   b9a82:	4620      	mov	r0, r4
   b9a84:	f7ff fd8f 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b9a88:	2303      	movs	r3, #3
   b9a8a:	7123      	strb	r3, [r4, #4]
}
   b9a8c:	bd10      	pop	{r4, pc}

000b9a8e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b9a8e:	2afb      	cmp	r2, #251	; 0xfb
{
   b9a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9a92:	4604      	mov	r4, r0
   b9a94:	460f      	mov	r7, r1
   b9a96:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b9a98:	d902      	bls.n	b9aa0 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b9a9a:	2600      	movs	r6, #0
}
   b9a9c:	4630      	mov	r0, r6
   b9a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b9aa0:	6803      	ldr	r3, [r0, #0]
   b9aa2:	6a1b      	ldr	r3, [r3, #32]
   b9aa4:	4798      	blx	r3
    setModeIdle();
   b9aa6:	4620      	mov	r0, r4
   b9aa8:	f7ff fef8 	bl	b989c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b9aac:	6823      	ldr	r3, [r4, #0]
   b9aae:	4620      	mov	r0, r4
   b9ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9ab2:	4798      	blx	r3
   b9ab4:	4606      	mov	r6, r0
   b9ab6:	2800      	cmp	r0, #0
   b9ab8:	d0ef      	beq.n	b9a9a <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b9aba:	2200      	movs	r2, #0
   b9abc:	210d      	movs	r1, #13
   b9abe:	4620      	mov	r0, r4
   b9ac0:	f7ff fd71 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b9ac4:	7ae2      	ldrb	r2, [r4, #11]
   b9ac6:	2100      	movs	r1, #0
   b9ac8:	4620      	mov	r0, r4
   b9aca:	f7ff fd6c 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b9ace:	7b22      	ldrb	r2, [r4, #12]
   b9ad0:	2100      	movs	r1, #0
   b9ad2:	4620      	mov	r0, r4
   b9ad4:	f7ff fd67 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b9ad8:	7b62      	ldrb	r2, [r4, #13]
   b9ada:	2100      	movs	r1, #0
   b9adc:	4620      	mov	r0, r4
   b9ade:	f7ff fd62 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b9ae2:	7ba2      	ldrb	r2, [r4, #14]
   b9ae4:	2100      	movs	r1, #0
   b9ae6:	4620      	mov	r0, r4
   b9ae8:	f7ff fd5d 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b9aec:	462b      	mov	r3, r5
   b9aee:	463a      	mov	r2, r7
   b9af0:	2100      	movs	r1, #0
   b9af2:	4620      	mov	r0, r4
   b9af4:	f7ff fda5 	bl	b9642 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b9af8:	1d2a      	adds	r2, r5, #4
   b9afa:	b2d2      	uxtb	r2, r2
   b9afc:	2122      	movs	r1, #34	; 0x22
   b9afe:	4620      	mov	r0, r4
   b9b00:	f7ff fd51 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b9b04:	4620      	mov	r0, r4
   b9b06:	f7ff ffab 	bl	b9a60 <_ZN7RH_RF959setModeTxEv>
    return true;
   b9b0a:	e7c7      	b.n	b9a9c <_ZN7RH_RF954sendEPKhh+0xe>

000b9b0c <_ZN7RH_RF9510setTxPowerEab>:
{
   b9b0c:	b510      	push	{r4, lr}
   b9b0e:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b9b10:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b9b14:	b172      	cbz	r2, b9b34 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b9b16:	f381 0204 	usat	r2, #4, r1
   b9b1a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b9b1e:	b2d2      	uxtb	r2, r2
   b9b20:	2109      	movs	r1, #9
   b9b22:	f7ff fd40 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9b26:	4620      	mov	r0, r4
   b9b28:	2204      	movs	r2, #4
}
   b9b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9b2e:	214d      	movs	r1, #77	; 0x4d
   b9b30:	f7ff bd39 	b.w	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
}
   b9b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9b38:	f7ff be0c 	b.w	b9754 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b9b3c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b9b3c:	b538      	push	{r3, r4, r5, lr}
   b9b3e:	460c      	mov	r4, r1
   b9b40:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b9b42:	780a      	ldrb	r2, [r1, #0]
   b9b44:	211d      	movs	r1, #29
   b9b46:	f7ff fd2e 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b9b4a:	7862      	ldrb	r2, [r4, #1]
   b9b4c:	211e      	movs	r1, #30
   b9b4e:	4628      	mov	r0, r5
   b9b50:	f7ff fd29 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b9b54:	78a2      	ldrb	r2, [r4, #2]
   b9b56:	4628      	mov	r0, r5
   b9b58:	2126      	movs	r1, #38	; 0x26
}
   b9b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b9b5e:	f7ff bd22 	b.w	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b9b64 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b9b64:	2905      	cmp	r1, #5
{
   b9b66:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b9b68:	d80f      	bhi.n	b9b8a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b9b6a:	4b09      	ldr	r3, [pc, #36]	; (b9b90 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b9b6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b9b70:	185c      	adds	r4, r3, r1
   b9b72:	5a5a      	ldrh	r2, [r3, r1]
   b9b74:	78a3      	ldrb	r3, [r4, #2]
   b9b76:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b9b7a:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b9b7c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b9b80:	f7ff ffdc 	bl	b9b3c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b9b84:	2001      	movs	r0, #1
}
   b9b86:	b002      	add	sp, #8
   b9b88:	bd10      	pop	{r4, pc}
        return false;
   b9b8a:	2000      	movs	r0, #0
   b9b8c:	e7fb      	b.n	b9b86 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b9b8e:	bf00      	nop
   b9b90:	000c0328 	.word	0x000c0328

000b9b94 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b9b94:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b9b96:	0a0a      	lsrs	r2, r1, #8
{
   b9b98:	4605      	mov	r5, r0
   b9b9a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b9b9c:	2120      	movs	r1, #32
   b9b9e:	f7ff fd02 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b9ba2:	b2e2      	uxtb	r2, r4
   b9ba4:	4628      	mov	r0, r5
   b9ba6:	2121      	movs	r1, #33	; 0x21
}
   b9ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b9bac:	f7ff bcfb 	b.w	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>

000b9bb0 <_ZN7RH_RF954initEv>:
{
   b9bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9bb2:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b9bb4:	f7ff fca6 	bl	b9504 <_ZN11RHSPIDriver4initEv>
   b9bb8:	4606      	mov	r6, r0
   b9bba:	b918      	cbnz	r0, b9bc4 <_ZN7RH_RF954initEv+0x14>
	return false;
   b9bbc:	2600      	movs	r6, #0
}
   b9bbe:	4630      	mov	r0, r6
   b9bc0:	b002      	add	sp, #8
   b9bc2:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b9bc4:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b9bc8:	2dff      	cmp	r5, #255	; 0xff
   b9bca:	d054      	beq.n	b9c76 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b9bcc:	4629      	mov	r1, r5
   b9bce:	4620      	mov	r0, r4
   b9bd0:	f7ff fd5f 	bl	b9692 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b9bd4:	2280      	movs	r2, #128	; 0x80
   b9bd6:	2101      	movs	r1, #1
   b9bd8:	4620      	mov	r0, r4
   b9bda:	f7ff fce4 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b9bde:	200a      	movs	r0, #10
   b9be0:	f001 f966 	bl	baeb0 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b9be4:	2101      	movs	r1, #1
   b9be6:	4620      	mov	r0, r4
   b9be8:	f7ff fcbc 	bl	b9564 <_ZN11RHSPIDriver7spiReadEh>
   b9bec:	2880      	cmp	r0, #128	; 0x80
   b9bee:	d1e5      	bne.n	b9bbc <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b9bf0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b9bf4:	28ff      	cmp	r0, #255	; 0xff
   b9bf6:	d01c      	beq.n	b9c32 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b9bf8:	2100      	movs	r1, #0
   b9bfa:	f004 f9e3 	bl	bdfc4 <pinMode>
	if (_myInterruptIndex == 0xff)
   b9bfe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b9c02:	2bff      	cmp	r3, #255	; 0xff
   b9c04:	d107      	bne.n	b9c16 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b9c06:	4a26      	ldr	r2, [pc, #152]	; (b9ca0 <_ZN7RH_RF954initEv+0xf0>)
   b9c08:	7813      	ldrb	r3, [r2, #0]
   b9c0a:	2b03      	cmp	r3, #3
   b9c0c:	d8d6      	bhi.n	b9bbc <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b9c0e:	1c59      	adds	r1, r3, #1
   b9c10:	7011      	strb	r1, [r2, #0]
   b9c12:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b9c16:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b9c1a:	4b22      	ldr	r3, [pc, #136]	; (b9ca4 <_ZN7RH_RF954initEv+0xf4>)
   b9c1c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b9c20:	bb62      	cbnz	r2, b9c7c <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b9c22:	4921      	ldr	r1, [pc, #132]	; (b9ca8 <_ZN7RH_RF954initEv+0xf8>)
   b9c24:	9200      	str	r2, [sp, #0]
   b9c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c2a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b9c2c:	b2a8      	uxth	r0, r5
   b9c2e:	f001 feb5 	bl	bb99c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b9c32:	2200      	movs	r2, #0
   b9c34:	210e      	movs	r1, #14
   b9c36:	4620      	mov	r0, r4
   b9c38:	f7ff fcb5 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b9c3c:	2200      	movs	r2, #0
   b9c3e:	210f      	movs	r1, #15
   b9c40:	4620      	mov	r0, r4
   b9c42:	f7ff fcb0 	bl	b95a6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b9c46:	4620      	mov	r0, r4
   b9c48:	f7ff fe28 	bl	b989c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b9c4c:	2100      	movs	r1, #0
   b9c4e:	4620      	mov	r0, r4
   b9c50:	f7ff ff88 	bl	b9b64 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b9c54:	2108      	movs	r1, #8
   b9c56:	4620      	mov	r0, r4
   b9c58:	f7ff ff9c 	bl	b9b94 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b9c5c:	ed9f 0a13 	vldr	s0, [pc, #76]	; b9cac <_ZN7RH_RF954initEv+0xfc>
   b9c60:	4620      	mov	r0, r4
   b9c62:	f7ff fdd9 	bl	b9818 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b9c66:	2300      	movs	r3, #0
   b9c68:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b9c6c:	210d      	movs	r1, #13
   b9c6e:	4620      	mov	r0, r4
   b9c70:	f7ff fd70 	bl	b9754 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b9c74:	e7a3      	b.n	b9bbe <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b9c76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b9c7a:	e7ab      	b.n	b9bd4 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b9c7c:	2a01      	cmp	r2, #1
   b9c7e:	f04f 0300 	mov.w	r3, #0
   b9c82:	d104      	bne.n	b9c8e <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b9c84:	9300      	str	r3, [sp, #0]
   b9c86:	490a      	ldr	r1, [pc, #40]	; (b9cb0 <_ZN7RH_RF954initEv+0x100>)
   b9c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c8c:	e7ce      	b.n	b9c2c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b9c8e:	2a02      	cmp	r2, #2
   b9c90:	d194      	bne.n	b9bbc <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b9c92:	9300      	str	r3, [sp, #0]
   b9c94:	4907      	ldr	r1, [pc, #28]	; (b9cb4 <_ZN7RH_RF954initEv+0x104>)
   b9c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c9a:	2201      	movs	r2, #1
   b9c9c:	e7c6      	b.n	b9c2c <_ZN7RH_RF954initEv+0x7c>
   b9c9e:	bf00      	nop
   b9ca0:	2003e56d 	.word	0x2003e56d
   b9ca4:	2003e570 	.word	0x2003e570
   b9ca8:	000b99e9 	.word	0x000b99e9
   b9cac:	43d90000 	.word	0x43d90000
   b9cb0:	000b99f9 	.word	0x000b99f9
   b9cb4:	000b9a09 	.word	0x000b9a09

000b9cb8 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   b9cb8:	2001      	movs	r0, #1
   b9cba:	4770      	bx	lr

000b9cbc <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   b9cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9cbe:	4d1f      	ldr	r5, [pc, #124]	; (b9d3c <_ZN14SequentialFileC1Ev+0x80>)
   b9cc0:	4b1f      	ldr	r3, [pc, #124]	; (b9d40 <_ZN14SequentialFileC1Ev+0x84>)
   b9cc2:	4604      	mov	r4, r0
   b9cc4:	4629      	mov	r1, r5
   b9cc6:	f840 3b04 	str.w	r3, [r0], #4
   b9cca:	f003 fc28 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b9cce:	491d      	ldr	r1, [pc, #116]	; (b9d44 <_ZN14SequentialFileC1Ev+0x88>)
   b9cd0:	f104 0014 	add.w	r0, r4, #20
   b9cd4:	f003 fc23 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b9cd8:	4629      	mov	r1, r5
   b9cda:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9cde:	f003 fc1e 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b9ce2:	2300      	movs	r3, #0
   b9ce4:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b9ce8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b9cec:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   b9cf0:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   b9cf4:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   b9cf8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9cfc:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b9cfe:	2308      	movs	r3, #8
   b9d00:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9d02:	2020      	movs	r0, #32
   b9d04:	f7fa f9c7 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9d08:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b9d0a:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9d0c:	3d01      	subs	r5, #1
   b9d0e:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b9d10:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   b9d14:	4606      	mov	r6, r0
   b9d16:	f44f 7000 	mov.w	r0, #512	; 0x200
   b9d1a:	f7fa f9bc 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9d1e:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b9d22:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   b9d26:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   b9d2a:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b9d2c:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b9d2e:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   b9d30:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9d32:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   b9d34:	6667      	str	r7, [r4, #100]	; 0x64

}
   b9d36:	4620      	mov	r0, r4
   b9d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9d3a:	bf00      	nop
   b9d3c:	000c06e1 	.word	0x000c06e1
   b9d40:	000c04c4 	.word	0x000c04c4
   b9d44:	000c03c4 	.word	0x000c03c4

000b9d48 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b9d48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   b9d4a:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b9d4c:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   b9d4e:	4628      	mov	r0, r5
   b9d50:	f003 fc43 	bl	bd5da <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   b9d54:	490e      	ldr	r1, [pc, #56]	; (b9d90 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   b9d56:	4668      	mov	r0, sp
   b9d58:	f003 fbe1 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b9d5c:	4669      	mov	r1, sp
   b9d5e:	4628      	mov	r0, r5
   b9d60:	f003 fca8 	bl	bd6b4 <_ZNK6String8endsWithERKS_>
   b9d64:	4606      	mov	r6, r0
   b9d66:	4668      	mov	r0, sp
   b9d68:	f003 fb8e 	bl	bd488 <_ZN6StringD1Ev>
   b9d6c:	b16e      	cbz	r6, b9d8a <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   b9d6e:	68e3      	ldr	r3, [r4, #12]
   b9d70:	2200      	movs	r2, #0
   b9d72:	3b01      	subs	r3, #1
   b9d74:	4629      	mov	r1, r5
   b9d76:	4668      	mov	r0, sp
   b9d78:	f003 fcb2 	bl	bd6e0 <_ZNK6String9substringEjj>
   b9d7c:	4669      	mov	r1, sp
   b9d7e:	4628      	mov	r0, r5
   b9d80:	f003 fc23 	bl	bd5ca <_ZN6StringaSEOS_>
   b9d84:	4668      	mov	r0, sp
   b9d86:	f003 fb7f 	bl	bd488 <_ZN6StringD1Ev>
    }
    return *this; 
};
   b9d8a:	4620      	mov	r0, r4
   b9d8c:	b004      	add	sp, #16
   b9d8e:	bd70      	pop	{r4, r5, r6, pc}
   b9d90:	000c03c9 	.word	0x000c03c9

000b9d94 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   b9d94:	b510      	push	{r4, lr}
    if (!queueMutex) {
   b9d96:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   b9d98:	4604      	mov	r4, r0
    if (!queueMutex) {
   b9d9a:	b913      	cbnz	r3, b9da2 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   b9d9c:	303c      	adds	r0, #60	; 0x3c
   b9d9e:	f000 fc13 	bl	ba5c8 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   b9da2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   b9da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   b9da8:	f000 bc16 	b.w	ba5d8 <os_mutex_lock>

000b9dac <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   b9dac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b9dae:	f000 bc1b 	b.w	ba5e8 <os_mutex_unlock>
	...

000b9db4 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   b9db4:	b510      	push	{r4, lr}
   b9db6:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   b9db8:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   b9dba:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   b9dbc:	f000 fdcc 	bl	ba958 <stat>
    if (result == 0) {
   b9dc0:	b9d0      	cbnz	r0, b9df8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b9dc2:	9b01      	ldr	r3, [sp, #4]
   b9dc4:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   b9dc6:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b9dc8:	d506      	bpl.n	b9dd8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   b9dca:	4915      	ldr	r1, [pc, #84]	; (b9e20 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   b9dcc:	4815      	ldr	r0, [pc, #84]	; (b9e24 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9dce:	f7fa f985 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        return true;
   b9dd2:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   b9dd4:	b016      	add	sp, #88	; 0x58
   b9dd6:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   b9dd8:	4812      	ldr	r0, [pc, #72]	; (b9e24 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9dda:	4913      	ldr	r1, [pc, #76]	; (b9e28 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   b9ddc:	f7fc fa80 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   b9de0:	4620      	mov	r0, r4
   b9de2:	f005 f923 	bl	bf02c <unlink>
    result = mkdir(path, 0777);
   b9de6:	f240 11ff 	movw	r1, #511	; 0x1ff
   b9dea:	4620      	mov	r0, r4
   b9dec:	f000 fdbc 	bl	ba968 <mkdir>
    if (result == 0) {
   b9df0:	b980      	cbnz	r0, b9e14 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   b9df2:	490e      	ldr	r1, [pc, #56]	; (b9e2c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   b9df4:	4622      	mov	r2, r4
   b9df6:	e7e9      	b.n	b9dcc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   b9df8:	f001 f822 	bl	bae40 <__errno>
   b9dfc:	6803      	ldr	r3, [r0, #0]
   b9dfe:	2b02      	cmp	r3, #2
   b9e00:	d0f1      	beq.n	b9de6 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   b9e02:	f001 f81d 	bl	bae40 <__errno>
   b9e06:	490a      	ldr	r1, [pc, #40]	; (b9e30 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   b9e08:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   b9e0a:	4806      	ldr	r0, [pc, #24]	; (b9e24 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9e0c:	f7fc fa68 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b9e10:	2000      	movs	r0, #0
   b9e12:	e7df      	b.n	b9dd4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   b9e14:	f001 f814 	bl	bae40 <__errno>
   b9e18:	4906      	ldr	r1, [pc, #24]	; (b9e34 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   b9e1a:	6802      	ldr	r2, [r0, #0]
   b9e1c:	e7f5      	b.n	b9e0a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   b9e1e:	bf00      	nop
   b9e20:	000c03d6 	.word	0x000c03d6
   b9e24:	2003e57c 	.word	0x2003e57c
   b9e28:	000c03f3 	.word	0x000c03f3
   b9e2c:	000c0424 	.word	0x000c0424
   b9e30:	000c0410 	.word	0x000c0410
   b9e34:	000c0433 	.word	0x000c0433

000b9e38 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   b9e38:	b538      	push	{r3, r4, r5, lr}
   b9e3a:	4615      	mov	r5, r2
   b9e3c:	4604      	mov	r4, r0
    String result = name;
   b9e3e:	f003 fb6e 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   b9e42:	b14d      	cbz	r5, b9e58 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   b9e44:	782b      	ldrb	r3, [r5, #0]
   b9e46:	b13b      	cbz	r3, b9e58 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b9e48:	4904      	ldr	r1, [pc, #16]	; (b9e5c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   b9e4a:	4620      	mov	r0, r4
   b9e4c:	f003 fbee 	bl	bd62c <_ZN6String6concatEPKc>
   b9e50:	4629      	mov	r1, r5
   b9e52:	4620      	mov	r0, r4
   b9e54:	f003 fbea 	bl	bd62c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   b9e58:	4620      	mov	r0, r4
   b9e5a:	bd38      	pop	{r3, r4, r5, pc}
   b9e5c:	000c07e8 	.word	0x000c07e8

000b9e60 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   b9e60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9e62:	4605      	mov	r5, r0
   b9e64:	460e      	mov	r6, r1
   b9e66:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   b9e68:	6949      	ldr	r1, [r1, #20]
   b9e6a:	4668      	mov	r0, sp
   b9e6c:	f003 fc58 	bl	bd720 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   b9e70:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   b9e72:	b904      	cbnz	r4, b9e76 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   b9e74:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9e76:	4622      	mov	r2, r4
   b9e78:	4628      	mov	r0, r5
   b9e7a:	f7ff ffdd 	bl	b9e38 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   b9e7e:	4668      	mov	r0, sp
   b9e80:	f003 fb02 	bl	bd488 <_ZN6StringD1Ev>
}
   b9e84:	4628      	mov	r0, r5
   b9e86:	b004      	add	sp, #16
   b9e88:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9e8c <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b9e8c:	b570      	push	{r4, r5, r6, lr}
   b9e8e:	460c      	mov	r4, r1
   b9e90:	b08e      	sub	sp, #56	; 0x38
    String result;
   b9e92:	491a      	ldr	r1, [pc, #104]	; (b9efc <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b9e94:	e9cd 3200 	strd	r3, r2, [sp]
   b9e98:	4605      	mov	r5, r0
    String result;
   b9e9a:	f003 fb40 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   b9e9e:	68e0      	ldr	r0, [r4, #12]
   b9ea0:	69e1      	ldr	r1, [r4, #28]
   b9ea2:	4401      	add	r1, r0
   b9ea4:	3104      	adds	r1, #4
   b9ea6:	4628      	mov	r0, r5
   b9ea8:	f003 fb0c 	bl	bd4c4 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b9eac:	1d21      	adds	r1, r4, #4
   b9eae:	a806      	add	r0, sp, #24
   b9eb0:	f003 fb80 	bl	bd5b4 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   b9eb4:	4912      	ldr	r1, [pc, #72]	; (b9f00 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   b9eb6:	a802      	add	r0, sp, #8
   b9eb8:	f003 fb31 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b9ebc:	a902      	add	r1, sp, #8
   b9ebe:	a806      	add	r0, sp, #24
   b9ec0:	f003 fbc5 	bl	bd64e <_ZplRK15StringSumHelperRK6String>
   b9ec4:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9ec8:	4606      	mov	r6, r0
   b9eca:	4621      	mov	r1, r4
   b9ecc:	a80a      	add	r0, sp, #40	; 0x28
   b9ece:	f7ff ffc7 	bl	b9e60 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   b9ed2:	a90a      	add	r1, sp, #40	; 0x28
   b9ed4:	4630      	mov	r0, r6
   b9ed6:	f003 fbba 	bl	bd64e <_ZplRK15StringSumHelperRK6String>
   b9eda:	4601      	mov	r1, r0
   b9edc:	4628      	mov	r0, r5
   b9ede:	f003 fb5a 	bl	bd596 <_ZN6StringaSERKS_>
   b9ee2:	a80a      	add	r0, sp, #40	; 0x28
   b9ee4:	f003 fad0 	bl	bd488 <_ZN6StringD1Ev>
   b9ee8:	a802      	add	r0, sp, #8
   b9eea:	f003 facd 	bl	bd488 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b9eee:	a806      	add	r0, sp, #24
   b9ef0:	f003 faca 	bl	bd488 <_ZN6StringD1Ev>
}
   b9ef4:	4628      	mov	r0, r5
   b9ef6:	b00e      	add	sp, #56	; 0x38
   b9ef8:	bd70      	pop	{r4, r5, r6, pc}
   b9efa:	bf00      	nop
   b9efc:	000c06e1 	.word	0x000c06e1
   b9f00:	000c03c9 	.word	0x000c03c9

000b9f04 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b9f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   b9f08:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b9f0a:	b08e      	sub	sp, #56	; 0x38
   b9f0c:	4605      	mov	r5, r0
   b9f0e:	460f      	mov	r7, r1
    if (allExtensions) {
   b9f10:	2a00      	cmp	r2, #0
   b9f12:	d04a      	beq.n	b9faa <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   b9f14:	6840      	ldr	r0, [r0, #4]
   b9f16:	f000 fd37 	bl	ba988 <opendir>
        if (dir) {
   b9f1a:	4606      	mov	r6, r0
   b9f1c:	2800      	cmp	r0, #0
   b9f1e:	d054      	beq.n	b9fca <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   b9f20:	f8df a0b4 	ldr.w	sl, [pc, #180]	; b9fd8 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   b9f24:	f8df 90ac 	ldr.w	r9, [pc, #172]	; b9fd4 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   b9f28:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9fd0 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   b9f2c:	4630      	mov	r0, r6
   b9f2e:	f000 fd33 	bl	ba998 <readdir>
                if (!ent) {
   b9f32:	2800      	cmp	r0, #0
   b9f34:	d033      	beq.n	b9f9e <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   b9f36:	7a82      	ldrb	r2, [r0, #10]
   b9f38:	2a08      	cmp	r2, #8
   b9f3a:	d1f7      	bne.n	b9f2c <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   b9f3c:	f100 040b 	add.w	r4, r0, #11
   b9f40:	6969      	ldr	r1, [r5, #20]
   b9f42:	aa01      	add	r2, sp, #4
   b9f44:	4620      	mov	r0, r4
   b9f46:	f000 ff53 	bl	badf0 <sscanf>
   b9f4a:	2801      	cmp	r0, #1
   b9f4c:	d1ee      	bne.n	b9f2c <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   b9f4e:	9b01      	ldr	r3, [sp, #4]
   b9f50:	42bb      	cmp	r3, r7
   b9f52:	d1eb      	bne.n	b9f2c <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   b9f54:	1d29      	adds	r1, r5, #4
   b9f56:	a80a      	add	r0, sp, #40	; 0x28
   b9f58:	f003 fb2c 	bl	bd5b4 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   b9f5c:	4651      	mov	r1, sl
   b9f5e:	a806      	add	r0, sp, #24
   b9f60:	f003 fadd 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   b9f64:	a906      	add	r1, sp, #24
   b9f66:	a80a      	add	r0, sp, #40	; 0x28
   b9f68:	f003 fb71 	bl	bd64e <_ZplRK15StringSumHelperRK6String>
   b9f6c:	4621      	mov	r1, r4
   b9f6e:	f003 fb7a 	bl	bd666 <_ZplRK15StringSumHelperPKc>
   b9f72:	4601      	mov	r1, r0
   b9f74:	a802      	add	r0, sp, #8
   b9f76:	f003 fb1d 	bl	bd5b4 <_ZN6StringC1ERKS_>
   b9f7a:	a806      	add	r0, sp, #24
   b9f7c:	f003 fa84 	bl	bd488 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b9f80:	a80a      	add	r0, sp, #40	; 0x28
   b9f82:	f003 fa81 	bl	bd488 <_ZN6StringD1Ev>
                        unlink(path);
   b9f86:	9802      	ldr	r0, [sp, #8]
   b9f88:	f005 f850 	bl	bf02c <unlink>
                        _log.trace("removed %s", path.c_str());
   b9f8c:	4640      	mov	r0, r8
   b9f8e:	9a02      	ldr	r2, [sp, #8]
   b9f90:	4649      	mov	r1, r9
   b9f92:	f7fc f9b3 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   b9f96:	a802      	add	r0, sp, #8
   b9f98:	f003 fa76 	bl	bd488 <_ZN6StringD1Ev>
                    continue;
   b9f9c:	e7c6      	b.n	b9f2c <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   b9f9e:	4630      	mov	r0, r6
}
   b9fa0:	b00e      	add	sp, #56	; 0x38
   b9fa2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   b9fa6:	f000 bcff 	b.w	ba9a8 <closedir>
        String path = getPathForFileNum(fileNum); 
   b9faa:	460a      	mov	r2, r1
   b9fac:	4601      	mov	r1, r0
   b9fae:	a80a      	add	r0, sp, #40	; 0x28
   b9fb0:	f7ff ff6c 	bl	b9e8c <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   b9fb4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b9fb6:	f005 f839 	bl	bf02c <unlink>
        _log.trace("removed %s", path.c_str());
   b9fba:	4805      	ldr	r0, [pc, #20]	; (b9fd0 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   b9fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b9fbe:	4905      	ldr	r1, [pc, #20]	; (b9fd4 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   b9fc0:	f7fc f99c 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   b9fc4:	a80a      	add	r0, sp, #40	; 0x28
   b9fc6:	f003 fa5f 	bl	bd488 <_ZN6StringD1Ev>
}
   b9fca:	b00e      	add	sp, #56	; 0x38
   b9fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9fd0:	2003e57c 	.word	0x2003e57c
   b9fd4:	000c03cb 	.word	0x000c03cb
   b9fd8:	000c03c9 	.word	0x000c03c9

000b9fdc <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b9fdc:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b9fde:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b9fe0:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b9fe2:	b183      	cbz	r3, ba006 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b9fe4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9fe6:	6945      	ldr	r5, [r0, #20]
   b9fe8:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b9fea:	42ae      	cmp	r6, r5
   b9fec:	d906      	bls.n	b9ffc <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   b9fee:	f855 0b04 	ldr.w	r0, [r5], #4
   b9ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
   b9ff6:	f7fa f852 	bl	b409e <_ZdlPvj>
   b9ffa:	e7f6      	b.n	b9fea <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   b9ffc:	6861      	ldr	r1, [r4, #4]
   b9ffe:	6820      	ldr	r0, [r4, #0]
   ba000:	0089      	lsls	r1, r1, #2
   ba002:	f7fa f84c 	bl	b409e <_ZdlPvj>
    }
   ba006:	4620      	mov	r0, r4
   ba008:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba00c <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   ba00c:	b510      	push	{r4, lr}
   ba00e:	4b09      	ldr	r3, [pc, #36]	; (ba034 <_ZN14SequentialFileD1Ev+0x28>)
   ba010:	4604      	mov	r4, r0
   ba012:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   ba016:	f7ff ffe1 	bl	b9fdc <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   ba01a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba01e:	f003 fa33 	bl	bd488 <_ZN6StringD1Ev>
   ba022:	f104 0014 	add.w	r0, r4, #20
   ba026:	f003 fa2f 	bl	bd488 <_ZN6StringD1Ev>
   ba02a:	1d20      	adds	r0, r4, #4
   ba02c:	f003 fa2c 	bl	bd488 <_ZN6StringD1Ev>
}
   ba030:	4620      	mov	r0, r4
   ba032:	bd10      	pop	{r4, pc}
   ba034:	000c04c4 	.word	0x000c04c4

000ba038 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   ba038:	b510      	push	{r4, lr}
   ba03a:	4604      	mov	r4, r0
}
   ba03c:	f7ff ffe6 	bl	ba00c <_ZN14SequentialFileD1Ev>
   ba040:	4620      	mov	r0, r4
   ba042:	2168      	movs	r1, #104	; 0x68
   ba044:	f7fa f82b 	bl	b409e <_ZdlPvj>
   ba048:	4620      	mov	r0, r4
   ba04a:	bd10      	pop	{r4, pc}

000ba04c <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba04c:	68c3      	ldr	r3, [r0, #12]
   ba04e:	68ca      	ldr	r2, [r1, #12]
   ba050:	1a9b      	subs	r3, r3, r2
   ba052:	109b      	asrs	r3, r3, #2
   ba054:	1e5a      	subs	r2, r3, #1
   ba056:	e9d0 3000 	ldrd	r3, r0, [r0]
   ba05a:	1a1b      	subs	r3, r3, r0
   ba05c:	109b      	asrs	r3, r3, #2
   ba05e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba062:	6888      	ldr	r0, [r1, #8]
   ba064:	680a      	ldr	r2, [r1, #0]
   ba066:	1a80      	subs	r0, r0, r2
      }
   ba068:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba06c:	4770      	bx	lr
	...

000ba070 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   ba070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   ba074:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   ba076:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   ba078:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   ba07a:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   ba07c:	4604      	mov	r4, r0
   ba07e:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   ba080:	d007      	beq.n	ba092 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba082:	b10b      	cbz	r3, ba088 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   ba084:	680a      	ldr	r2, [r1, #0]
   ba086:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba088:	69a3      	ldr	r3, [r4, #24]
   ba08a:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba08c:	61a3      	str	r3, [r4, #24]
      }
   ba08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba092:	f100 0108 	add.w	r1, r0, #8
   ba096:	3018      	adds	r0, #24
   ba098:	f7ff ffd8 	bl	ba04c <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   ba09c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba0a0:	4298      	cmp	r0, r3
   ba0a2:	d102      	bne.n	ba0aa <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   ba0a4:	4838      	ldr	r0, [pc, #224]	; (ba188 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   ba0a6:	f004 f89e 	bl	be1e6 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba0aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba0ac:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba0ae:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba0b0:	1a11      	subs	r1, r2, r0
   ba0b2:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba0b6:	2901      	cmp	r1, #1
   ba0b8:	d825      	bhi.n	ba106 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba0ba:	6961      	ldr	r1, [r4, #20]
   ba0bc:	eba2 0801 	sub.w	r8, r2, r1
   ba0c0:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba0c4:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba0c6:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   ba0ca:	d936      	bls.n	ba13a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   ba0cc:	1b5d      	subs	r5, r3, r5
   ba0ce:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba0d0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   ba0d4:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba0d6:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   ba0d8:	eba3 0201 	sub.w	r2, r3, r1
   ba0dc:	d926      	bls.n	ba12c <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   ba0de:	428b      	cmp	r3, r1
   ba0e0:	d002      	beq.n	ba0e8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba0e2:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba0e4:	f004 fd9a 	bl	bec1c <memmove>
	_M_node = __new_node;
   ba0e8:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   ba0ea:	682b      	ldr	r3, [r5, #0]
   ba0ec:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba0ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba0f2:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba0f4:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   ba0f8:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba0fa:	f855 3008 	ldr.w	r3, [r5, r8]
   ba0fe:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba100:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba104:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba106:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba10a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   ba10c:	f7f9 ffc3 	bl	b4096 <_Znwj>
   ba110:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba112:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba114:	b10b      	cbz	r3, ba11a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   ba116:	683a      	ldr	r2, [r7, #0]
   ba118:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba11a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba11c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba11e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba120:	685b      	ldr	r3, [r3, #4]
   ba122:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba124:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba128:	6222      	str	r2, [r4, #32]
   ba12a:	e7af      	b.n	ba08c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   ba12c:	428b      	cmp	r3, r1
   ba12e:	d0db      	beq.n	ba0e8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba130:	f108 0004 	add.w	r0, r8, #4
   ba134:	1a80      	subs	r0, r0, r2
   ba136:	4428      	add	r0, r5
   ba138:	e7d4      	b.n	ba0e4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba13a:	f103 0902 	add.w	r9, r3, #2
   ba13e:	2b01      	cmp	r3, #1
   ba140:	bf2c      	ite	cs
   ba142:	4499      	addcs	r9, r3
   ba144:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   ba148:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   ba14c:	d301      	bcc.n	ba152 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   ba14e:	f004 f847 	bl	be1e0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba152:	ea4f 0089 	mov.w	r0, r9, lsl #2
   ba156:	f7f9 ff9e 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   ba15a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba15c:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba15e:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   ba162:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba164:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   ba166:	4291      	cmp	r1, r2
   ba168:	4682      	mov	sl, r0
   ba16a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   ba16e:	d003      	beq.n	ba178 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba170:	1a52      	subs	r2, r2, r1
   ba172:	4628      	mov	r0, r5
   ba174:	f004 fd52 	bl	bec1c <memmove>
	::operator delete(__p
   ba178:	6861      	ldr	r1, [r4, #4]
   ba17a:	6820      	ldr	r0, [r4, #0]
   ba17c:	0089      	lsls	r1, r1, #2
   ba17e:	f7f9 ff8e 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba182:	e9c4 a900 	strd	sl, r9, [r4]
   ba186:	e7af      	b.n	ba0e8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   ba188:	000c004d 	.word	0x000c004d

000ba18c <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   ba18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   ba190:	68c3      	ldr	r3, [r0, #12]
   ba192:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   ba194:	b086      	sub	sp, #24
   ba196:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   ba198:	d808      	bhi.n	ba1ac <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   ba19a:	4934      	ldr	r1, [pc, #208]	; (ba26c <_ZN14SequentialFile7scanDirEv+0xe0>)
   ba19c:	4834      	ldr	r0, [pc, #208]	; (ba270 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba19e:	f7fc f89f 	bl	b62e0 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba1a2:	2600      	movs	r6, #0
}
   ba1a4:	4630      	mov	r0, r6
   ba1a6:	b006      	add	sp, #24
   ba1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   ba1ac:	6840      	ldr	r0, [r0, #4]
   ba1ae:	f7ff fe01 	bl	b9db4 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   ba1b2:	4606      	mov	r6, r0
   ba1b4:	2800      	cmp	r0, #0
   ba1b6:	d0f4      	beq.n	ba1a2 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   ba1b8:	6963      	ldr	r3, [r4, #20]
   ba1ba:	6862      	ldr	r2, [r4, #4]
   ba1bc:	492d      	ldr	r1, [pc, #180]	; (ba274 <_ZN14SequentialFile7scanDirEv+0xe8>)
   ba1be:	482c      	ldr	r0, [pc, #176]	; (ba270 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba1c0:	f7fc f89c 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   ba1c4:	6860      	ldr	r0, [r4, #4]
   ba1c6:	f000 fbdf 	bl	ba988 <opendir>
    if (!dir) {
   ba1ca:	4607      	mov	r7, r0
   ba1cc:	2800      	cmp	r0, #0
   ba1ce:	d0e8      	beq.n	ba1a2 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   ba1d0:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba1d2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba278 <_ZN14SequentialFile7scanDirEv+0xec>
   ba1d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; ba270 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   ba1da:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   ba1dc:	4638      	mov	r0, r7
   ba1de:	f000 fbdb 	bl	ba998 <readdir>
        if (!ent) {
   ba1e2:	4605      	mov	r5, r0
   ba1e4:	2800      	cmp	r0, #0
   ba1e6:	d039      	beq.n	ba25c <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   ba1e8:	7a83      	ldrb	r3, [r0, #10]
   ba1ea:	2b08      	cmp	r3, #8
   ba1ec:	d1f6      	bne.n	ba1dc <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   ba1ee:	350b      	adds	r5, #11
   ba1f0:	6961      	ldr	r1, [r4, #20]
   ba1f2:	aa01      	add	r2, sp, #4
   ba1f4:	4628      	mov	r0, r5
   ba1f6:	f000 fdfb 	bl	badf0 <sscanf>
   ba1fa:	2801      	cmp	r0, #1
   ba1fc:	d1ee      	bne.n	ba1dc <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   ba1fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba200:	b17b      	cbz	r3, ba222 <_ZN14SequentialFile7scanDirEv+0x96>
   ba202:	4629      	mov	r1, r5
   ba204:	a802      	add	r0, sp, #8
   ba206:	f003 f98a 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
   ba20a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   ba20e:	a802      	add	r0, sp, #8
   ba210:	f003 fa50 	bl	bd6b4 <_ZNK6String8endsWithERKS_>
   ba214:	4682      	mov	sl, r0
   ba216:	a802      	add	r0, sp, #8
   ba218:	f003 f936 	bl	bd488 <_ZN6StringD1Ev>
   ba21c:	f1ba 0f00 	cmp.w	sl, #0
   ba220:	d0dc      	beq.n	ba1dc <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   ba222:	6823      	ldr	r3, [r4, #0]
   ba224:	4629      	mov	r1, r5
   ba226:	689b      	ldr	r3, [r3, #8]
   ba228:	4620      	mov	r0, r4
   ba22a:	4798      	blx	r3
   ba22c:	2800      	cmp	r0, #0
   ba22e:	d0d5      	beq.n	ba1dc <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   ba230:	9a01      	ldr	r2, [sp, #4]
   ba232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba234:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   ba236:	bfb8      	it	lt
   ba238:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba23a:	462b      	mov	r3, r5
   ba23c:	4649      	mov	r1, r9
   ba23e:	4640      	mov	r0, r8
   ba240:	f7fc f85c 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   ba244:	4620      	mov	r0, r4
   ba246:	f7ff fda5 	bl	b9d94 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   ba24a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba24e:	a901      	add	r1, sp, #4
   ba250:	f7ff ff0e 	bl	ba070 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   ba254:	4620      	mov	r0, r4
   ba256:	f7ff fda9 	bl	b9dac <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   ba25a:	e7bf      	b.n	ba1dc <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   ba25c:	4638      	mov	r0, r7
   ba25e:	f000 fba3 	bl	ba9a8 <closedir>
    scanDirCompleted = true;
   ba262:	2301      	movs	r3, #1
   ba264:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   ba268:	e79c      	b.n	ba1a4 <_ZN14SequentialFile7scanDirEv+0x18>
   ba26a:	bf00      	nop
   ba26c:	000c0449 	.word	0x000c0449
   ba270:	2003e57c 	.word	0x2003e57c
   ba274:	000c045e 	.word	0x000c045e
   ba278:	000c047a 	.word	0x000c047a

000ba27c <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   ba27c:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   ba27e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   ba282:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba284:	b90b      	cbnz	r3, ba28a <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   ba286:	f7ff ff81 	bl	ba18c <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   ba28a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   ba28c:	3001      	adds	r0, #1
   ba28e:	63a0      	str	r0, [r4, #56]	; 0x38
}
   ba290:	bd10      	pop	{r4, pc}
	...

000ba294 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   ba294:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   ba296:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   ba29a:	4604      	mov	r4, r0
   ba29c:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   ba29e:	b90b      	cbnz	r3, ba2a4 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   ba2a0:	f7ff ff74 	bl	ba18c <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   ba2a4:	4620      	mov	r0, r4
   ba2a6:	f7ff fd75 	bl	b9d94 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   ba2aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   ba2ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
   ba2ae:	429a      	cmp	r2, r3
   ba2b0:	d020      	beq.n	ba2f4 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   ba2b2:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   ba2b6:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   ba2b8:	b126      	cbz	r6, ba2c4 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   ba2ba:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba2bc:	4293      	cmp	r3, r2
   ba2be:	d00c      	beq.n	ba2da <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   ba2c0:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba2c2:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   ba2c4:	4620      	mov	r0, r4
   ba2c6:	f7ff fd71 	bl	b9dac <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   ba2ca:	b125      	cbz	r5, ba2d6 <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   ba2cc:	490a      	ldr	r1, [pc, #40]	; (ba2f8 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   ba2ce:	480b      	ldr	r0, [pc, #44]	; (ba2fc <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   ba2d0:	462a      	mov	r2, r5
   ba2d2:	f7fc f813 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
}
   ba2d6:	4628      	mov	r0, r5
   ba2d8:	bd70      	pop	{r4, r5, r6, pc}
   ba2da:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba2de:	f7f9 fede 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba2e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba2e4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba2e6:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   ba2e8:	685b      	ldr	r3, [r3, #4]
   ba2ea:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba2ec:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba2f0:	6522      	str	r2, [r4, #80]	; 0x50
   ba2f2:	e7e6      	b.n	ba2c2 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   ba2f4:	2500      	movs	r5, #0
   ba2f6:	e7e5      	b.n	ba2c4 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   ba2f8:	000c0490 	.word	0x000c0490
   ba2fc:	2003e57c 	.word	0x2003e57c

000ba300 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   ba300:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   ba302:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   ba306:	9101      	str	r1, [sp, #4]
   ba308:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba30a:	b90b      	cbnz	r3, ba310 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   ba30c:	f7ff ff3e 	bl	ba18c <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   ba310:	9b01      	ldr	r3, [sp, #4]
   ba312:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba314:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   ba316:	bfb8      	it	lt
   ba318:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   ba31a:	4620      	mov	r0, r4
   ba31c:	f7ff fd3a 	bl	b9d94 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   ba320:	a901      	add	r1, sp, #4
   ba322:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba326:	f7ff fea3 	bl	ba070 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   ba32a:	4620      	mov	r0, r4
   ba32c:	f7ff fd3e 	bl	b9dac <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba330:	b002      	add	sp, #8
   ba332:	bd10      	pop	{r4, pc}

000ba334 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   ba334:	b538      	push	{r3, r4, r5, lr}
   ba336:	4604      	mov	r4, r0
    queueMutexLock();
   ba338:	f7ff fd2c 	bl	b9d94 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba33c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   ba340:	f104 0058 	add.w	r0, r4, #88	; 0x58
   ba344:	f7ff fe82 	bl	ba04c <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   ba348:	4605      	mov	r5, r0
    queueMutexUnlock();
   ba34a:	4620      	mov	r0, r4
   ba34c:	f7ff fd2e 	bl	b9dac <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba350:	4628      	mov	r0, r5
   ba352:	bd38      	pop	{r3, r4, r5, pc}

000ba354 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   ba354:	4b01      	ldr	r3, [pc, #4]	; (ba35c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   ba356:	4a02      	ldr	r2, [pc, #8]	; (ba360 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   ba358:	601a      	str	r2, [r3, #0]
}
   ba35a:	4770      	bx	lr
   ba35c:	2003e57c 	.word	0x2003e57c
   ba360:	000c04ad 	.word	0x000c04ad

000ba364 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   ba364:	4770      	bx	lr

000ba366 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   ba366:	6803      	ldr	r3, [r0, #0]
   ba368:	685b      	ldr	r3, [r3, #4]
   ba36a:	4718      	bx	r3

000ba36c <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   ba36c:	b510      	push	{r4, lr}
    if (lastUpdate) {
   ba36e:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   ba370:	4604      	mov	r4, r0
    if (lastUpdate) {
   ba372:	b133      	cbz	r3, ba382 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   ba374:	b131      	cbz	r1, ba384 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   ba376:	6823      	ldr	r3, [r4, #0]
   ba378:	4620      	mov	r0, r4
   ba37a:	689b      	ldr	r3, [r3, #8]
   ba37c:	4798      	blx	r3
            lastUpdate = 0;
   ba37e:	2300      	movs	r3, #0
   ba380:	61a3      	str	r3, [r4, #24]
        }
    }
}
   ba382:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   ba384:	f000 f988 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   ba388:	69a3      	ldr	r3, [r4, #24]
   ba38a:	1ac0      	subs	r0, r0, r3
   ba38c:	69e3      	ldr	r3, [r4, #28]
   ba38e:	4298      	cmp	r0, r3
   ba390:	d2f1      	bcs.n	ba376 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   ba392:	e7f6      	b.n	ba382 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000ba394 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   ba394:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   ba396:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   ba398:	4604      	mov	r4, r0
    if (saveDelayMs) {
   ba39a:	b11b      	cbz	r3, ba3a4 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   ba39c:	f000 f97c 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   ba3a0:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   ba3a2:	bd10      	pop	{r4, pc}
        save();
   ba3a4:	6803      	ldr	r3, [r0, #0]
}
   ba3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   ba3aa:	689b      	ldr	r3, [r3, #8]
   ba3ac:	4718      	bx	r3

000ba3ae <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   ba3ae:	f000 b93b 	b.w	ba628 <os_mutex_recursive_unlock>

000ba3b2 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   ba3b2:	b510      	push	{r4, lr}
   ba3b4:	4604      	mov	r4, r0
   ba3b6:	3004      	adds	r0, #4
   ba3b8:	f7fa ffbc 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   ba3bc:	6823      	ldr	r3, [r4, #0]
   ba3be:	68e1      	ldr	r1, [r4, #12]
   ba3c0:	695b      	ldr	r3, [r3, #20]
   ba3c2:	4620      	mov	r0, r4
   ba3c4:	4798      	blx	r3
   ba3c6:	b918      	cbnz	r0, ba3d0 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   ba3c8:	6823      	ldr	r3, [r4, #0]
   ba3ca:	4620      	mov	r0, r4
   ba3cc:	699b      	ldr	r3, [r3, #24]
   ba3ce:	4798      	blx	r3
      { _M_device.unlock(); }
   ba3d0:	6860      	ldr	r0, [r4, #4]
   ba3d2:	f7ff ffec 	bl	ba3ae <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   ba3d6:	2001      	movs	r0, #1
   ba3d8:	bd10      	pop	{r4, pc}
	...

000ba3dc <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   ba3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba3de:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   ba3e2:	4f18      	ldr	r7, [pc, #96]	; (ba444 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   ba3e4:	4e18      	ldr	r6, [pc, #96]	; (ba448 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   ba3e6:	4d19      	ldr	r5, [pc, #100]	; (ba44c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   ba3e8:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   ba3ea:	42a0      	cmp	r0, r4
   ba3ec:	d00c      	beq.n	ba408 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   ba3ee:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   ba3f2:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   ba3f4:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   ba3f8:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   ba3fa:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   ba3fc:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   ba400:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   ba404:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   ba406:	e7f0      	b.n	ba3ea <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   ba408:	f001 0403 	and.w	r4, r1, #3
   ba40c:	4404      	add	r4, r0
    k = 0;
   ba40e:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   ba410:	42a0      	cmp	r0, r4
   ba412:	d004      	beq.n	ba41e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   ba414:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   ba418:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   ba41c:	e7f8      	b.n	ba410 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   ba41e:	4809      	ldr	r0, [pc, #36]	; (ba444 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   ba420:	4343      	muls	r3, r0
        k *= 0x1b873593;
   ba422:	4809      	ldr	r0, [pc, #36]	; (ba448 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   ba424:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   ba428:	404a      	eors	r2, r1
        k *= 0x1b873593;
   ba42a:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   ba42c:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   ba42e:	4b08      	ldr	r3, [pc, #32]	; (ba450 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   ba430:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   ba434:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   ba436:	4b07      	ldr	r3, [pc, #28]	; (ba454 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   ba438:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   ba43c:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   ba43e:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   ba442:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba444:	cc9e2d51 	.word	0xcc9e2d51
   ba448:	1b873593 	.word	0x1b873593
   ba44c:	e6546b64 	.word	0xe6546b64
   ba450:	85ebca6b 	.word	0x85ebca6b
   ba454:	c2b2ae35 	.word	0xc2b2ae35

000ba458 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   ba458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba45a:	4604      	mov	r4, r0
      { _M_device.lock(); }
   ba45c:	3004      	adds	r0, #4
   ba45e:	f7fa ff69 	bl	b5334 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   ba462:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   ba464:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   ba466:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   ba468:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   ba46a:	68a6      	ldr	r6, [r4, #8]
   ba46c:	4a05      	ldr	r2, [pc, #20]	; (ba484 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   ba46e:	88f1      	ldrh	r1, [r6, #6]
   ba470:	4630      	mov	r0, r6
   ba472:	f7ff ffb3 	bl	ba3dc <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   ba476:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   ba478:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   ba47a:	6860      	ldr	r0, [r4, #4]
   ba47c:	f7ff ff97 	bl	ba3ae <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   ba480:	4628      	mov	r0, r5
   ba482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba484:	851c2a3f 	.word	0x851c2a3f

000ba488 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   ba488:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba48a:	460d      	mov	r5, r1
   ba48c:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   ba48e:	f7ff ffe3 	bl	ba458 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   ba492:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   ba494:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   ba496:	d923      	bls.n	ba4e0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   ba498:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   ba49a:	6922      	ldr	r2, [r4, #16]
   ba49c:	6819      	ldr	r1, [r3, #0]
   ba49e:	4291      	cmp	r1, r2
   ba4a0:	d11f      	bne.n	ba4e2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   ba4a2:	8899      	ldrh	r1, [r3, #4]
   ba4a4:	8aa2      	ldrh	r2, [r4, #20]
   ba4a6:	4291      	cmp	r1, r2
   ba4a8:	d11b      	bne.n	ba4e2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   ba4aa:	88d9      	ldrh	r1, [r3, #6]
   ba4ac:	b2aa      	uxth	r2, r5
   ba4ae:	4291      	cmp	r1, r2
   ba4b0:	d817      	bhi.n	ba4e2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   ba4b2:	689a      	ldr	r2, [r3, #8]
   ba4b4:	4282      	cmp	r2, r0
   ba4b6:	d114      	bne.n	ba4e2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   ba4b8:	68e2      	ldr	r2, [r4, #12]
   ba4ba:	42aa      	cmp	r2, r5
   ba4bc:	d905      	bls.n	ba4ca <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   ba4be:	2100      	movs	r1, #0
   ba4c0:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   ba4c2:	68e2      	ldr	r2, [r4, #12]
   ba4c4:	3501      	adds	r5, #1
   ba4c6:	42aa      	cmp	r2, r5
   ba4c8:	d8fa      	bhi.n	ba4c0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   ba4ca:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   ba4ce:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   ba4d0:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   ba4d2:	68a5      	ldr	r5, [r4, #8]
   ba4d4:	f7ff ffc0 	bl	ba458 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   ba4d8:	60a8      	str	r0, [r5, #8]
        isValid = true;
   ba4da:	2001      	movs	r0, #1
}
   ba4dc:	b002      	add	sp, #8
   ba4de:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   ba4e0:	b19d      	cbz	r5, ba50a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   ba4e2:	68a1      	ldr	r1, [r4, #8]
   ba4e4:	680a      	ldr	r2, [r1, #0]
   ba4e6:	b192      	cbz	r2, ba50e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   ba4e8:	6888      	ldr	r0, [r1, #8]
   ba4ea:	888b      	ldrh	r3, [r1, #4]
   ba4ec:	9001      	str	r0, [sp, #4]
   ba4ee:	88c9      	ldrh	r1, [r1, #6]
   ba4f0:	4808      	ldr	r0, [pc, #32]	; (ba514 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   ba4f2:	9100      	str	r1, [sp, #0]
   ba4f4:	4908      	ldr	r1, [pc, #32]	; (ba518 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   ba4f6:	f7fb ff01 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   ba4fa:	e9cd 5600 	strd	r5, r6, [sp]
   ba4fe:	8aa3      	ldrh	r3, [r4, #20]
   ba500:	6922      	ldr	r2, [r4, #16]
   ba502:	4906      	ldr	r1, [pc, #24]	; (ba51c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   ba504:	4803      	ldr	r0, [pc, #12]	; (ba514 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   ba506:	f7fb fef9 	bl	b62fc <_ZNK5spark6Logger5traceEPKcz>
   ba50a:	2000      	movs	r0, #0
   ba50c:	e7e6      	b.n	ba4dc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   ba50e:	4610      	mov	r0, r2
   ba510:	e7e4      	b.n	ba4dc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   ba512:	bf00      	nop
   ba514:	2003e658 	.word	0x2003e658
   ba518:	000c04d0 	.word	0x000c04d0
   ba51c:	000c0501 	.word	0x000c0501

000ba520 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   ba520:	b538      	push	{r3, r4, r5, lr}
   ba522:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   ba524:	68c2      	ldr	r2, [r0, #12]
   ba526:	6880      	ldr	r0, [r0, #8]
   ba528:	2100      	movs	r1, #0
   ba52a:	f004 fb91 	bl	bec50 <memset>
    savedDataHeader->magic = savedDataMagic;
   ba52e:	68a3      	ldr	r3, [r4, #8]
   ba530:	6922      	ldr	r2, [r4, #16]
   ba532:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   ba534:	68a3      	ldr	r3, [r4, #8]
   ba536:	8aa2      	ldrh	r2, [r4, #20]
   ba538:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   ba53a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   ba53e:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   ba540:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   ba542:	68a5      	ldr	r5, [r4, #8]
   ba544:	f7ff ff88 	bl	ba458 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   ba548:	60a8      	str	r0, [r5, #8]
}
   ba54a:	bd38      	pop	{r3, r4, r5, pc}

000ba54c <_Z23setGatewayConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setGatewayConfiguration() {
   ba54c:	b508      	push	{r3, lr}
  Log.info("Setting values for the Gateway");
   ba54e:	4908      	ldr	r1, [pc, #32]	; (ba570 <_Z23setGatewayConfigurationv+0x24>)
   ba550:	4808      	ldr	r0, [pc, #32]	; (ba574 <_Z23setGatewayConfigurationv+0x28>)
   ba552:	f7f9 fdc3 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   ba556:	f7fa ff41 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   ba55a:	2101      	movs	r1, #1
   ba55c:	f7fb f91a 	bl	b5794 <_ZN13sysStatusData14set_sensorTypeEb>
  // sysStatus.set_deviceID(32148);
  sysStatus.set_frequencyMinutes(10);
   ba560:	f7fa ff3c 	bl	b53dc <_ZN13sysStatusData8instanceEv>
   ba564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_frequencyMinutes(10);
   ba568:	210a      	movs	r1, #10
   ba56a:	f7fb b848 	b.w	b55fe <_ZN13sysStatusData20set_frequencyMinutesEt>
   ba56e:	bf00      	nop
   ba570:	000c0558 	.word	0x000c0558
   ba574:	2003e658 	.word	0x2003e658

000ba578 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   ba578:	b508      	push	{r3, lr}
   ba57a:	4b02      	ldr	r3, [pc, #8]	; (ba584 <cellular_signal+0xc>)
   ba57c:	681b      	ldr	r3, [r3, #0]
   ba57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba580:	9301      	str	r3, [sp, #4]
   ba582:	bd08      	pop	{r3, pc}
   ba584:	00030274 	.word	0x00030274

000ba588 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   ba588:	b508      	push	{r3, lr}
   ba58a:	4b02      	ldr	r3, [pc, #8]	; (ba594 <os_thread_create+0xc>)
   ba58c:	681b      	ldr	r3, [r3, #0]
   ba58e:	685b      	ldr	r3, [r3, #4]
   ba590:	9301      	str	r3, [sp, #4]
   ba592:	bd08      	pop	{r3, pc}
   ba594:	00030248 	.word	0x00030248

000ba598 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   ba598:	b508      	push	{r3, lr}
   ba59a:	4b02      	ldr	r3, [pc, #8]	; (ba5a4 <os_thread_is_current+0xc>)
   ba59c:	681b      	ldr	r3, [r3, #0]
   ba59e:	689b      	ldr	r3, [r3, #8]
   ba5a0:	9301      	str	r3, [sp, #4]
   ba5a2:	bd08      	pop	{r3, pc}
   ba5a4:	00030248 	.word	0x00030248

000ba5a8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   ba5a8:	b508      	push	{r3, lr}
   ba5aa:	4b02      	ldr	r3, [pc, #8]	; (ba5b4 <os_thread_join+0xc>)
   ba5ac:	681b      	ldr	r3, [r3, #0]
   ba5ae:	691b      	ldr	r3, [r3, #16]
   ba5b0:	9301      	str	r3, [sp, #4]
   ba5b2:	bd08      	pop	{r3, pc}
   ba5b4:	00030248 	.word	0x00030248

000ba5b8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   ba5b8:	b508      	push	{r3, lr}
   ba5ba:	4b02      	ldr	r3, [pc, #8]	; (ba5c4 <os_thread_cleanup+0xc>)
   ba5bc:	681b      	ldr	r3, [r3, #0]
   ba5be:	695b      	ldr	r3, [r3, #20]
   ba5c0:	9301      	str	r3, [sp, #4]
   ba5c2:	bd08      	pop	{r3, pc}
   ba5c4:	00030248 	.word	0x00030248

000ba5c8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   ba5c8:	b508      	push	{r3, lr}
   ba5ca:	4b02      	ldr	r3, [pc, #8]	; (ba5d4 <os_mutex_create+0xc>)
   ba5cc:	681b      	ldr	r3, [r3, #0]
   ba5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba5d0:	9301      	str	r3, [sp, #4]
   ba5d2:	bd08      	pop	{r3, pc}
   ba5d4:	00030248 	.word	0x00030248

000ba5d8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   ba5d8:	b508      	push	{r3, lr}
   ba5da:	4b02      	ldr	r3, [pc, #8]	; (ba5e4 <os_mutex_lock+0xc>)
   ba5dc:	681b      	ldr	r3, [r3, #0]
   ba5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   ba5e0:	9301      	str	r3, [sp, #4]
   ba5e2:	bd08      	pop	{r3, pc}
   ba5e4:	00030248 	.word	0x00030248

000ba5e8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   ba5e8:	b508      	push	{r3, lr}
   ba5ea:	4b02      	ldr	r3, [pc, #8]	; (ba5f4 <os_mutex_unlock+0xc>)
   ba5ec:	681b      	ldr	r3, [r3, #0]
   ba5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba5f0:	9301      	str	r3, [sp, #4]
   ba5f2:	bd08      	pop	{r3, pc}
   ba5f4:	00030248 	.word	0x00030248

000ba5f8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   ba5f8:	b508      	push	{r3, lr}
   ba5fa:	4b02      	ldr	r3, [pc, #8]	; (ba604 <os_mutex_recursive_create+0xc>)
   ba5fc:	681b      	ldr	r3, [r3, #0]
   ba5fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba600:	9301      	str	r3, [sp, #4]
   ba602:	bd08      	pop	{r3, pc}
   ba604:	00030248 	.word	0x00030248

000ba608 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   ba608:	b508      	push	{r3, lr}
   ba60a:	4b02      	ldr	r3, [pc, #8]	; (ba614 <os_mutex_recursive_destroy+0xc>)
   ba60c:	681b      	ldr	r3, [r3, #0]
   ba60e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba610:	9301      	str	r3, [sp, #4]
   ba612:	bd08      	pop	{r3, pc}
   ba614:	00030248 	.word	0x00030248

000ba618 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   ba618:	b508      	push	{r3, lr}
   ba61a:	4b02      	ldr	r3, [pc, #8]	; (ba624 <os_mutex_recursive_lock+0xc>)
   ba61c:	681b      	ldr	r3, [r3, #0]
   ba61e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba620:	9301      	str	r3, [sp, #4]
   ba622:	bd08      	pop	{r3, pc}
   ba624:	00030248 	.word	0x00030248

000ba628 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   ba628:	b508      	push	{r3, lr}
   ba62a:	4b02      	ldr	r3, [pc, #8]	; (ba634 <os_mutex_recursive_unlock+0xc>)
   ba62c:	681b      	ldr	r3, [r3, #0]
   ba62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba630:	9301      	str	r3, [sp, #4]
   ba632:	bd08      	pop	{r3, pc}
   ba634:	00030248 	.word	0x00030248

000ba638 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   ba638:	b508      	push	{r3, lr}
   ba63a:	4b02      	ldr	r3, [pc, #8]	; (ba644 <os_thread_exit+0xc>)
   ba63c:	681b      	ldr	r3, [r3, #0]
   ba63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   ba640:	9301      	str	r3, [sp, #4]
   ba642:	bd08      	pop	{r3, pc}
   ba644:	00030248 	.word	0x00030248

000ba648 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   ba648:	b508      	push	{r3, lr}
   ba64a:	4b02      	ldr	r3, [pc, #8]	; (ba654 <HAL_Core_Runtime_Info+0xc>)
   ba64c:	681b      	ldr	r3, [r3, #0]
   ba64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba650:	9301      	str	r3, [sp, #4]
   ba652:	bd08      	pop	{r3, pc}
   ba654:	00030234 	.word	0x00030234

000ba658 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   ba658:	b508      	push	{r3, lr}
   ba65a:	4b02      	ldr	r3, [pc, #8]	; (ba664 <HAL_Feature_Set+0xc>)
   ba65c:	681b      	ldr	r3, [r3, #0]
   ba65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   ba660:	9301      	str	r3, [sp, #4]
   ba662:	bd08      	pop	{r3, pc}
   ba664:	00030234 	.word	0x00030234

000ba668 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   ba668:	b508      	push	{r3, lr}
   ba66a:	4b02      	ldr	r3, [pc, #8]	; (ba674 <HAL_RNG_GetRandomNumber+0xc>)
   ba66c:	681b      	ldr	r3, [r3, #0]
   ba66e:	685b      	ldr	r3, [r3, #4]
   ba670:	9301      	str	r3, [sp, #4]
   ba672:	bd08      	pop	{r3, pc}
   ba674:	00030218 	.word	0x00030218

000ba678 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   ba678:	b508      	push	{r3, lr}
   ba67a:	4b02      	ldr	r3, [pc, #8]	; (ba684 <HAL_Delay_Milliseconds+0xc>)
   ba67c:	681b      	ldr	r3, [r3, #0]
   ba67e:	689b      	ldr	r3, [r3, #8]
   ba680:	9301      	str	r3, [sp, #4]
   ba682:	bd08      	pop	{r3, pc}
   ba684:	00030218 	.word	0x00030218

000ba688 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   ba688:	b508      	push	{r3, lr}
   ba68a:	4b02      	ldr	r3, [pc, #8]	; (ba694 <HAL_Delay_Microseconds+0xc>)
   ba68c:	681b      	ldr	r3, [r3, #0]
   ba68e:	68db      	ldr	r3, [r3, #12]
   ba690:	9301      	str	r3, [sp, #4]
   ba692:	bd08      	pop	{r3, pc}
   ba694:	00030218 	.word	0x00030218

000ba698 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   ba698:	b508      	push	{r3, lr}
   ba69a:	4b02      	ldr	r3, [pc, #8]	; (ba6a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   ba69c:	681b      	ldr	r3, [r3, #0]
   ba69e:	695b      	ldr	r3, [r3, #20]
   ba6a0:	9301      	str	r3, [sp, #4]
   ba6a2:	bd08      	pop	{r3, pc}
   ba6a4:	00030218 	.word	0x00030218

000ba6a8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   ba6a8:	b508      	push	{r3, lr}
   ba6aa:	4b02      	ldr	r3, [pc, #8]	; (ba6b4 <hal_rtc_time_is_valid+0xc>)
   ba6ac:	681b      	ldr	r3, [r3, #0]
   ba6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba6b0:	9301      	str	r3, [sp, #4]
   ba6b2:	bd08      	pop	{r3, pc}
   ba6b4:	00030218 	.word	0x00030218

000ba6b8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   ba6b8:	b508      	push	{r3, lr}
   ba6ba:	4b02      	ldr	r3, [pc, #8]	; (ba6c4 <hal_timer_millis+0xc>)
   ba6bc:	681b      	ldr	r3, [r3, #0]
   ba6be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   ba6c0:	9301      	str	r3, [sp, #4]
   ba6c2:	bd08      	pop	{r3, pc}
   ba6c4:	00030218 	.word	0x00030218

000ba6c8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   ba6c8:	b508      	push	{r3, lr}
   ba6ca:	4b02      	ldr	r3, [pc, #8]	; (ba6d4 <hal_rtc_get_time+0xc>)
   ba6cc:	681b      	ldr	r3, [r3, #0]
   ba6ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   ba6d0:	9301      	str	r3, [sp, #4]
   ba6d2:	bd08      	pop	{r3, pc}
   ba6d4:	00030218 	.word	0x00030218

000ba6d8 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   ba6d8:	b508      	push	{r3, lr}
   ba6da:	4b02      	ldr	r3, [pc, #8]	; (ba6e4 <hal_rtc_set_time+0xc>)
   ba6dc:	681b      	ldr	r3, [r3, #0]
   ba6de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   ba6e0:	9301      	str	r3, [sp, #4]
   ba6e2:	bd08      	pop	{r3, pc}
   ba6e4:	00030218 	.word	0x00030218

000ba6e8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   ba6e8:	b508      	push	{r3, lr}
   ba6ea:	4b02      	ldr	r3, [pc, #8]	; (ba6f4 <HAL_Validate_Pin_Function+0xc>)
   ba6ec:	681b      	ldr	r3, [r3, #0]
   ba6ee:	685b      	ldr	r3, [r3, #4]
   ba6f0:	9301      	str	r3, [sp, #4]
   ba6f2:	bd08      	pop	{r3, pc}
   ba6f4:	0003022c 	.word	0x0003022c

000ba6f8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   ba6f8:	b508      	push	{r3, lr}
   ba6fa:	4b02      	ldr	r3, [pc, #8]	; (ba704 <HAL_Pin_Mode+0xc>)
   ba6fc:	681b      	ldr	r3, [r3, #0]
   ba6fe:	689b      	ldr	r3, [r3, #8]
   ba700:	9301      	str	r3, [sp, #4]
   ba702:	bd08      	pop	{r3, pc}
   ba704:	0003022c 	.word	0x0003022c

000ba708 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   ba708:	b508      	push	{r3, lr}
   ba70a:	4b02      	ldr	r3, [pc, #8]	; (ba714 <HAL_Get_Pin_Mode+0xc>)
   ba70c:	681b      	ldr	r3, [r3, #0]
   ba70e:	68db      	ldr	r3, [r3, #12]
   ba710:	9301      	str	r3, [sp, #4]
   ba712:	bd08      	pop	{r3, pc}
   ba714:	0003022c 	.word	0x0003022c

000ba718 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   ba718:	b508      	push	{r3, lr}
   ba71a:	4b02      	ldr	r3, [pc, #8]	; (ba724 <HAL_GPIO_Write+0xc>)
   ba71c:	681b      	ldr	r3, [r3, #0]
   ba71e:	691b      	ldr	r3, [r3, #16]
   ba720:	9301      	str	r3, [sp, #4]
   ba722:	bd08      	pop	{r3, pc}
   ba724:	0003022c 	.word	0x0003022c

000ba728 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   ba728:	b508      	push	{r3, lr}
   ba72a:	4b02      	ldr	r3, [pc, #8]	; (ba734 <HAL_GPIO_Read+0xc>)
   ba72c:	681b      	ldr	r3, [r3, #0]
   ba72e:	695b      	ldr	r3, [r3, #20]
   ba730:	9301      	str	r3, [sp, #4]
   ba732:	bd08      	pop	{r3, pc}
   ba734:	0003022c 	.word	0x0003022c

000ba738 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   ba738:	b508      	push	{r3, lr}
   ba73a:	4b02      	ldr	r3, [pc, #8]	; (ba744 <HAL_Interrupts_Attach+0xc>)
   ba73c:	681b      	ldr	r3, [r3, #0]
   ba73e:	699b      	ldr	r3, [r3, #24]
   ba740:	9301      	str	r3, [sp, #4]
   ba742:	bd08      	pop	{r3, pc}
   ba744:	0003022c 	.word	0x0003022c

000ba748 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   ba748:	b508      	push	{r3, lr}
   ba74a:	4b02      	ldr	r3, [pc, #8]	; (ba754 <HAL_Interrupts_Detach+0xc>)
   ba74c:	681b      	ldr	r3, [r3, #0]
   ba74e:	69db      	ldr	r3, [r3, #28]
   ba750:	9301      	str	r3, [sp, #4]
   ba752:	bd08      	pop	{r3, pc}
   ba754:	0003022c 	.word	0x0003022c

000ba758 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   ba758:	b508      	push	{r3, lr}
   ba75a:	4b02      	ldr	r3, [pc, #8]	; (ba764 <hal_adc_read+0xc>)
   ba75c:	681b      	ldr	r3, [r3, #0]
   ba75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba760:	9301      	str	r3, [sp, #4]
   ba762:	bd08      	pop	{r3, pc}
   ba764:	0003022c 	.word	0x0003022c

000ba768 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   ba768:	b508      	push	{r3, lr}
   ba76a:	4b02      	ldr	r3, [pc, #8]	; (ba774 <hal_i2c_begin+0xc>)
   ba76c:	681b      	ldr	r3, [r3, #0]
   ba76e:	68db      	ldr	r3, [r3, #12]
   ba770:	9301      	str	r3, [sp, #4]
   ba772:	bd08      	pop	{r3, pc}
   ba774:	00030228 	.word	0x00030228

000ba778 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   ba778:	b508      	push	{r3, lr}
   ba77a:	4b02      	ldr	r3, [pc, #8]	; (ba784 <hal_i2c_begin_transmission+0xc>)
   ba77c:	681b      	ldr	r3, [r3, #0]
   ba77e:	699b      	ldr	r3, [r3, #24]
   ba780:	9301      	str	r3, [sp, #4]
   ba782:	bd08      	pop	{r3, pc}
   ba784:	00030228 	.word	0x00030228

000ba788 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   ba788:	b508      	push	{r3, lr}
   ba78a:	4b02      	ldr	r3, [pc, #8]	; (ba794 <hal_i2c_end_transmission+0xc>)
   ba78c:	681b      	ldr	r3, [r3, #0]
   ba78e:	69db      	ldr	r3, [r3, #28]
   ba790:	9301      	str	r3, [sp, #4]
   ba792:	bd08      	pop	{r3, pc}
   ba794:	00030228 	.word	0x00030228

000ba798 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   ba798:	b508      	push	{r3, lr}
   ba79a:	4b02      	ldr	r3, [pc, #8]	; (ba7a4 <hal_i2c_write+0xc>)
   ba79c:	681b      	ldr	r3, [r3, #0]
   ba79e:	6a1b      	ldr	r3, [r3, #32]
   ba7a0:	9301      	str	r3, [sp, #4]
   ba7a2:	bd08      	pop	{r3, pc}
   ba7a4:	00030228 	.word	0x00030228

000ba7a8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   ba7a8:	b508      	push	{r3, lr}
   ba7aa:	4b02      	ldr	r3, [pc, #8]	; (ba7b4 <hal_i2c_available+0xc>)
   ba7ac:	681b      	ldr	r3, [r3, #0]
   ba7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba7b0:	9301      	str	r3, [sp, #4]
   ba7b2:	bd08      	pop	{r3, pc}
   ba7b4:	00030228 	.word	0x00030228

000ba7b8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   ba7b8:	b508      	push	{r3, lr}
   ba7ba:	4b02      	ldr	r3, [pc, #8]	; (ba7c4 <hal_i2c_read+0xc>)
   ba7bc:	681b      	ldr	r3, [r3, #0]
   ba7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba7c0:	9301      	str	r3, [sp, #4]
   ba7c2:	bd08      	pop	{r3, pc}
   ba7c4:	00030228 	.word	0x00030228

000ba7c8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   ba7c8:	b508      	push	{r3, lr}
   ba7ca:	4b02      	ldr	r3, [pc, #8]	; (ba7d4 <hal_i2c_peek+0xc>)
   ba7cc:	681b      	ldr	r3, [r3, #0]
   ba7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba7d0:	9301      	str	r3, [sp, #4]
   ba7d2:	bd08      	pop	{r3, pc}
   ba7d4:	00030228 	.word	0x00030228

000ba7d8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   ba7d8:	b508      	push	{r3, lr}
   ba7da:	4b02      	ldr	r3, [pc, #8]	; (ba7e4 <hal_i2c_flush+0xc>)
   ba7dc:	681b      	ldr	r3, [r3, #0]
   ba7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba7e0:	9301      	str	r3, [sp, #4]
   ba7e2:	bd08      	pop	{r3, pc}
   ba7e4:	00030228 	.word	0x00030228

000ba7e8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   ba7e8:	b508      	push	{r3, lr}
   ba7ea:	4b02      	ldr	r3, [pc, #8]	; (ba7f4 <hal_i2c_is_enabled+0xc>)
   ba7ec:	681b      	ldr	r3, [r3, #0]
   ba7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba7f0:	9301      	str	r3, [sp, #4]
   ba7f2:	bd08      	pop	{r3, pc}
   ba7f4:	00030228 	.word	0x00030228

000ba7f8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   ba7f8:	b508      	push	{r3, lr}
   ba7fa:	4b02      	ldr	r3, [pc, #8]	; (ba804 <hal_i2c_init+0xc>)
   ba7fc:	681b      	ldr	r3, [r3, #0]
   ba7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba800:	9301      	str	r3, [sp, #4]
   ba802:	bd08      	pop	{r3, pc}
   ba804:	00030228 	.word	0x00030228

000ba808 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   ba808:	b508      	push	{r3, lr}
   ba80a:	4b02      	ldr	r3, [pc, #8]	; (ba814 <hal_i2c_lock+0xc>)
   ba80c:	681b      	ldr	r3, [r3, #0]
   ba80e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba810:	9301      	str	r3, [sp, #4]
   ba812:	bd08      	pop	{r3, pc}
   ba814:	00030228 	.word	0x00030228

000ba818 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   ba818:	b508      	push	{r3, lr}
   ba81a:	4b02      	ldr	r3, [pc, #8]	; (ba824 <hal_i2c_unlock+0xc>)
   ba81c:	681b      	ldr	r3, [r3, #0]
   ba81e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba820:	9301      	str	r3, [sp, #4]
   ba822:	bd08      	pop	{r3, pc}
   ba824:	00030228 	.word	0x00030228

000ba828 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   ba828:	b508      	push	{r3, lr}
   ba82a:	4b02      	ldr	r3, [pc, #8]	; (ba834 <hal_i2c_request_ex+0xc>)
   ba82c:	681b      	ldr	r3, [r3, #0]
   ba82e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba830:	9301      	str	r3, [sp, #4]
   ba832:	bd08      	pop	{r3, pc}
   ba834:	00030228 	.word	0x00030228

000ba838 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   ba838:	b508      	push	{r3, lr}
   ba83a:	4b02      	ldr	r3, [pc, #8]	; (ba844 <inet_inet_ntop+0xc>)
   ba83c:	681b      	ldr	r3, [r3, #0]
   ba83e:	695b      	ldr	r3, [r3, #20]
   ba840:	9301      	str	r3, [sp, #4]
   ba842:	bd08      	pop	{r3, pc}
   ba844:	00030264 	.word	0x00030264

000ba848 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   ba848:	b508      	push	{r3, lr}
   ba84a:	4b02      	ldr	r3, [pc, #8]	; (ba854 <netdb_freeaddrinfo+0xc>)
   ba84c:	681b      	ldr	r3, [r3, #0]
   ba84e:	689b      	ldr	r3, [r3, #8]
   ba850:	9301      	str	r3, [sp, #4]
   ba852:	bd08      	pop	{r3, pc}
   ba854:	00030268 	.word	0x00030268

000ba858 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   ba858:	b508      	push	{r3, lr}
   ba85a:	4b02      	ldr	r3, [pc, #8]	; (ba864 <netdb_getaddrinfo+0xc>)
   ba85c:	681b      	ldr	r3, [r3, #0]
   ba85e:	68db      	ldr	r3, [r3, #12]
   ba860:	9301      	str	r3, [sp, #4]
   ba862:	bd08      	pop	{r3, pc}
   ba864:	00030268 	.word	0x00030268

000ba868 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   ba868:	b508      	push	{r3, lr}
   ba86a:	4b02      	ldr	r3, [pc, #8]	; (ba874 <hal_spi_begin+0xc>)
   ba86c:	681b      	ldr	r3, [r3, #0]
   ba86e:	681b      	ldr	r3, [r3, #0]
   ba870:	9301      	str	r3, [sp, #4]
   ba872:	bd08      	pop	{r3, pc}
   ba874:	00030230 	.word	0x00030230

000ba878 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   ba878:	b508      	push	{r3, lr}
   ba87a:	4b02      	ldr	r3, [pc, #8]	; (ba884 <hal_spi_end+0xc>)
   ba87c:	681b      	ldr	r3, [r3, #0]
   ba87e:	685b      	ldr	r3, [r3, #4]
   ba880:	9301      	str	r3, [sp, #4]
   ba882:	bd08      	pop	{r3, pc}
   ba884:	00030230 	.word	0x00030230

000ba888 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   ba888:	b508      	push	{r3, lr}
   ba88a:	4b02      	ldr	r3, [pc, #8]	; (ba894 <hal_spi_transfer+0xc>)
   ba88c:	681b      	ldr	r3, [r3, #0]
   ba88e:	695b      	ldr	r3, [r3, #20]
   ba890:	9301      	str	r3, [sp, #4]
   ba892:	bd08      	pop	{r3, pc}
   ba894:	00030230 	.word	0x00030230

000ba898 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   ba898:	b508      	push	{r3, lr}
   ba89a:	4b02      	ldr	r3, [pc, #8]	; (ba8a4 <hal_spi_init+0xc>)
   ba89c:	681b      	ldr	r3, [r3, #0]
   ba89e:	69db      	ldr	r3, [r3, #28]
   ba8a0:	9301      	str	r3, [sp, #4]
   ba8a2:	bd08      	pop	{r3, pc}
   ba8a4:	00030230 	.word	0x00030230

000ba8a8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   ba8a8:	b508      	push	{r3, lr}
   ba8aa:	4b02      	ldr	r3, [pc, #8]	; (ba8b4 <hal_spi_is_enabled+0xc>)
   ba8ac:	681b      	ldr	r3, [r3, #0]
   ba8ae:	6a1b      	ldr	r3, [r3, #32]
   ba8b0:	9301      	str	r3, [sp, #4]
   ba8b2:	bd08      	pop	{r3, pc}
   ba8b4:	00030230 	.word	0x00030230

000ba8b8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   ba8b8:	b508      	push	{r3, lr}
   ba8ba:	4b02      	ldr	r3, [pc, #8]	; (ba8c4 <hal_spi_info+0xc>)
   ba8bc:	681b      	ldr	r3, [r3, #0]
   ba8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba8c0:	9301      	str	r3, [sp, #4]
   ba8c2:	bd08      	pop	{r3, pc}
   ba8c4:	00030230 	.word	0x00030230

000ba8c8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   ba8c8:	b508      	push	{r3, lr}
   ba8ca:	4b02      	ldr	r3, [pc, #8]	; (ba8d4 <hal_spi_set_settings+0xc>)
   ba8cc:	681b      	ldr	r3, [r3, #0]
   ba8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba8d0:	9301      	str	r3, [sp, #4]
   ba8d2:	bd08      	pop	{r3, pc}
   ba8d4:	00030230 	.word	0x00030230

000ba8d8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   ba8d8:	b508      	push	{r3, lr}
   ba8da:	4b02      	ldr	r3, [pc, #8]	; (ba8e4 <hal_spi_acquire+0xc>)
   ba8dc:	681b      	ldr	r3, [r3, #0]
   ba8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba8e0:	9301      	str	r3, [sp, #4]
   ba8e2:	bd08      	pop	{r3, pc}
   ba8e4:	00030230 	.word	0x00030230

000ba8e8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   ba8e8:	b508      	push	{r3, lr}
   ba8ea:	4b02      	ldr	r3, [pc, #8]	; (ba8f4 <hal_spi_release+0xc>)
   ba8ec:	681b      	ldr	r3, [r3, #0]
   ba8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba8f0:	9301      	str	r3, [sp, #4]
   ba8f2:	bd08      	pop	{r3, pc}
   ba8f4:	00030230 	.word	0x00030230

000ba8f8 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   ba8f8:	b508      	push	{r3, lr}
   ba8fa:	4b02      	ldr	r3, [pc, #8]	; (ba904 <_open+0xc>)
   ba8fc:	681b      	ldr	r3, [r3, #0]
   ba8fe:	681b      	ldr	r3, [r3, #0]
   ba900:	9301      	str	r3, [sp, #4]
   ba902:	bd08      	pop	{r3, pc}
   ba904:	00030284 	.word	0x00030284

000ba908 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   ba908:	b508      	push	{r3, lr}
   ba90a:	4b02      	ldr	r3, [pc, #8]	; (ba914 <_write+0xc>)
   ba90c:	681b      	ldr	r3, [r3, #0]
   ba90e:	685b      	ldr	r3, [r3, #4]
   ba910:	9301      	str	r3, [sp, #4]
   ba912:	bd08      	pop	{r3, pc}
   ba914:	00030284 	.word	0x00030284

000ba918 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   ba918:	b508      	push	{r3, lr}
   ba91a:	4b02      	ldr	r3, [pc, #8]	; (ba924 <_read+0xc>)
   ba91c:	681b      	ldr	r3, [r3, #0]
   ba91e:	689b      	ldr	r3, [r3, #8]
   ba920:	9301      	str	r3, [sp, #4]
   ba922:	bd08      	pop	{r3, pc}
   ba924:	00030284 	.word	0x00030284

000ba928 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   ba928:	b508      	push	{r3, lr}
   ba92a:	4b02      	ldr	r3, [pc, #8]	; (ba934 <_close+0xc>)
   ba92c:	681b      	ldr	r3, [r3, #0]
   ba92e:	68db      	ldr	r3, [r3, #12]
   ba930:	9301      	str	r3, [sp, #4]
   ba932:	bd08      	pop	{r3, pc}
   ba934:	00030284 	.word	0x00030284

000ba938 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   ba938:	b508      	push	{r3, lr}
   ba93a:	4b02      	ldr	r3, [pc, #8]	; (ba944 <_fstat+0xc>)
   ba93c:	681b      	ldr	r3, [r3, #0]
   ba93e:	695b      	ldr	r3, [r3, #20]
   ba940:	9301      	str	r3, [sp, #4]
   ba942:	bd08      	pop	{r3, pc}
   ba944:	00030284 	.word	0x00030284

000ba948 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   ba948:	b508      	push	{r3, lr}
   ba94a:	4b02      	ldr	r3, [pc, #8]	; (ba954 <_lseek+0xc>)
   ba94c:	681b      	ldr	r3, [r3, #0]
   ba94e:	6a1b      	ldr	r3, [r3, #32]
   ba950:	9301      	str	r3, [sp, #4]
   ba952:	bd08      	pop	{r3, pc}
   ba954:	00030284 	.word	0x00030284

000ba958 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   ba958:	b508      	push	{r3, lr}
   ba95a:	4b02      	ldr	r3, [pc, #8]	; (ba964 <stat+0xc>)
   ba95c:	681b      	ldr	r3, [r3, #0]
   ba95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba960:	9301      	str	r3, [sp, #4]
   ba962:	bd08      	pop	{r3, pc}
   ba964:	00030284 	.word	0x00030284

000ba968 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   ba968:	b508      	push	{r3, lr}
   ba96a:	4b02      	ldr	r3, [pc, #8]	; (ba974 <mkdir+0xc>)
   ba96c:	681b      	ldr	r3, [r3, #0]
   ba96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba970:	9301      	str	r3, [sp, #4]
   ba972:	bd08      	pop	{r3, pc}
   ba974:	00030284 	.word	0x00030284

000ba978 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   ba978:	b508      	push	{r3, lr}
   ba97a:	4b02      	ldr	r3, [pc, #8]	; (ba984 <_unlink+0xc>)
   ba97c:	681b      	ldr	r3, [r3, #0]
   ba97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba980:	9301      	str	r3, [sp, #4]
   ba982:	bd08      	pop	{r3, pc}
   ba984:	00030284 	.word	0x00030284

000ba988 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   ba988:	b508      	push	{r3, lr}
   ba98a:	4b02      	ldr	r3, [pc, #8]	; (ba994 <opendir+0xc>)
   ba98c:	681b      	ldr	r3, [r3, #0]
   ba98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba990:	9301      	str	r3, [sp, #4]
   ba992:	bd08      	pop	{r3, pc}
   ba994:	00030284 	.word	0x00030284

000ba998 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   ba998:	b508      	push	{r3, lr}
   ba99a:	4b02      	ldr	r3, [pc, #8]	; (ba9a4 <readdir+0xc>)
   ba99c:	681b      	ldr	r3, [r3, #0]
   ba99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba9a0:	9301      	str	r3, [sp, #4]
   ba9a2:	bd08      	pop	{r3, pc}
   ba9a4:	00030284 	.word	0x00030284

000ba9a8 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   ba9a8:	b508      	push	{r3, lr}
   ba9aa:	4b02      	ldr	r3, [pc, #8]	; (ba9b4 <closedir+0xc>)
   ba9ac:	681b      	ldr	r3, [r3, #0]
   ba9ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba9b0:	9301      	str	r3, [sp, #4]
   ba9b2:	bd08      	pop	{r3, pc}
   ba9b4:	00030284 	.word	0x00030284

000ba9b8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   ba9b8:	b508      	push	{r3, lr}
   ba9ba:	4b02      	ldr	r3, [pc, #8]	; (ba9c4 <hal_usart_end+0xc>)
   ba9bc:	681b      	ldr	r3, [r3, #0]
   ba9be:	689b      	ldr	r3, [r3, #8]
   ba9c0:	9301      	str	r3, [sp, #4]
   ba9c2:	bd08      	pop	{r3, pc}
   ba9c4:	0003023c 	.word	0x0003023c

000ba9c8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   ba9c8:	b508      	push	{r3, lr}
   ba9ca:	4b02      	ldr	r3, [pc, #8]	; (ba9d4 <hal_usart_write+0xc>)
   ba9cc:	681b      	ldr	r3, [r3, #0]
   ba9ce:	68db      	ldr	r3, [r3, #12]
   ba9d0:	9301      	str	r3, [sp, #4]
   ba9d2:	bd08      	pop	{r3, pc}
   ba9d4:	0003023c 	.word	0x0003023c

000ba9d8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   ba9d8:	b508      	push	{r3, lr}
   ba9da:	4b02      	ldr	r3, [pc, #8]	; (ba9e4 <hal_usart_available+0xc>)
   ba9dc:	681b      	ldr	r3, [r3, #0]
   ba9de:	691b      	ldr	r3, [r3, #16]
   ba9e0:	9301      	str	r3, [sp, #4]
   ba9e2:	bd08      	pop	{r3, pc}
   ba9e4:	0003023c 	.word	0x0003023c

000ba9e8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   ba9e8:	b508      	push	{r3, lr}
   ba9ea:	4b02      	ldr	r3, [pc, #8]	; (ba9f4 <hal_usart_read+0xc>)
   ba9ec:	681b      	ldr	r3, [r3, #0]
   ba9ee:	695b      	ldr	r3, [r3, #20]
   ba9f0:	9301      	str	r3, [sp, #4]
   ba9f2:	bd08      	pop	{r3, pc}
   ba9f4:	0003023c 	.word	0x0003023c

000ba9f8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   ba9f8:	b508      	push	{r3, lr}
   ba9fa:	4b02      	ldr	r3, [pc, #8]	; (baa04 <hal_usart_peek+0xc>)
   ba9fc:	681b      	ldr	r3, [r3, #0]
   ba9fe:	699b      	ldr	r3, [r3, #24]
   baa00:	9301      	str	r3, [sp, #4]
   baa02:	bd08      	pop	{r3, pc}
   baa04:	0003023c 	.word	0x0003023c

000baa08 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   baa08:	b508      	push	{r3, lr}
   baa0a:	4b02      	ldr	r3, [pc, #8]	; (baa14 <hal_usart_flush+0xc>)
   baa0c:	681b      	ldr	r3, [r3, #0]
   baa0e:	69db      	ldr	r3, [r3, #28]
   baa10:	9301      	str	r3, [sp, #4]
   baa12:	bd08      	pop	{r3, pc}
   baa14:	0003023c 	.word	0x0003023c

000baa18 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   baa18:	b508      	push	{r3, lr}
   baa1a:	4b02      	ldr	r3, [pc, #8]	; (baa24 <hal_usart_is_enabled+0xc>)
   baa1c:	681b      	ldr	r3, [r3, #0]
   baa1e:	6a1b      	ldr	r3, [r3, #32]
   baa20:	9301      	str	r3, [sp, #4]
   baa22:	bd08      	pop	{r3, pc}
   baa24:	0003023c 	.word	0x0003023c

000baa28 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   baa28:	b508      	push	{r3, lr}
   baa2a:	4b02      	ldr	r3, [pc, #8]	; (baa34 <hal_usart_available_data_for_write+0xc>)
   baa2c:	681b      	ldr	r3, [r3, #0]
   baa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   baa30:	9301      	str	r3, [sp, #4]
   baa32:	bd08      	pop	{r3, pc}
   baa34:	0003023c 	.word	0x0003023c

000baa38 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   baa38:	b508      	push	{r3, lr}
   baa3a:	4b02      	ldr	r3, [pc, #8]	; (baa44 <hal_usart_begin_config+0xc>)
   baa3c:	681b      	ldr	r3, [r3, #0]
   baa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   baa40:	9301      	str	r3, [sp, #4]
   baa42:	bd08      	pop	{r3, pc}
   baa44:	0003023c 	.word	0x0003023c

000baa48 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   baa48:	b508      	push	{r3, lr}
   baa4a:	4b02      	ldr	r3, [pc, #8]	; (baa54 <hal_usart_init_ex+0xc>)
   baa4c:	681b      	ldr	r3, [r3, #0]
   baa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baa50:	9301      	str	r3, [sp, #4]
   baa52:	bd08      	pop	{r3, pc}
   baa54:	0003023c 	.word	0x0003023c

000baa58 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   baa58:	b508      	push	{r3, lr}
   baa5a:	4b02      	ldr	r3, [pc, #8]	; (baa64 <HAL_USB_USART_Init+0xc>)
   baa5c:	681b      	ldr	r3, [r3, #0]
   baa5e:	681b      	ldr	r3, [r3, #0]
   baa60:	9301      	str	r3, [sp, #4]
   baa62:	bd08      	pop	{r3, pc}
   baa64:	0003024c 	.word	0x0003024c

000baa68 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   baa68:	b508      	push	{r3, lr}
   baa6a:	4b02      	ldr	r3, [pc, #8]	; (baa74 <HAL_USB_USART_Begin+0xc>)
   baa6c:	681b      	ldr	r3, [r3, #0]
   baa6e:	685b      	ldr	r3, [r3, #4]
   baa70:	9301      	str	r3, [sp, #4]
   baa72:	bd08      	pop	{r3, pc}
   baa74:	0003024c 	.word	0x0003024c

000baa78 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   baa78:	b508      	push	{r3, lr}
   baa7a:	4b02      	ldr	r3, [pc, #8]	; (baa84 <HAL_USB_USART_End+0xc>)
   baa7c:	681b      	ldr	r3, [r3, #0]
   baa7e:	689b      	ldr	r3, [r3, #8]
   baa80:	9301      	str	r3, [sp, #4]
   baa82:	bd08      	pop	{r3, pc}
   baa84:	0003024c 	.word	0x0003024c

000baa88 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   baa88:	b508      	push	{r3, lr}
   baa8a:	4b02      	ldr	r3, [pc, #8]	; (baa94 <HAL_USB_USART_Available_Data+0xc>)
   baa8c:	681b      	ldr	r3, [r3, #0]
   baa8e:	691b      	ldr	r3, [r3, #16]
   baa90:	9301      	str	r3, [sp, #4]
   baa92:	bd08      	pop	{r3, pc}
   baa94:	0003024c 	.word	0x0003024c

000baa98 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   baa98:	b508      	push	{r3, lr}
   baa9a:	4b02      	ldr	r3, [pc, #8]	; (baaa4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   baa9c:	681b      	ldr	r3, [r3, #0]
   baa9e:	695b      	ldr	r3, [r3, #20]
   baaa0:	9301      	str	r3, [sp, #4]
   baaa2:	bd08      	pop	{r3, pc}
   baaa4:	0003024c 	.word	0x0003024c

000baaa8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   baaa8:	b508      	push	{r3, lr}
   baaaa:	4b02      	ldr	r3, [pc, #8]	; (baab4 <HAL_USB_USART_Receive_Data+0xc>)
   baaac:	681b      	ldr	r3, [r3, #0]
   baaae:	699b      	ldr	r3, [r3, #24]
   baab0:	9301      	str	r3, [sp, #4]
   baab2:	bd08      	pop	{r3, pc}
   baab4:	0003024c 	.word	0x0003024c

000baab8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   baab8:	b508      	push	{r3, lr}
   baaba:	4b02      	ldr	r3, [pc, #8]	; (baac4 <HAL_USB_USART_Send_Data+0xc>)
   baabc:	681b      	ldr	r3, [r3, #0]
   baabe:	69db      	ldr	r3, [r3, #28]
   baac0:	9301      	str	r3, [sp, #4]
   baac2:	bd08      	pop	{r3, pc}
   baac4:	0003024c 	.word	0x0003024c

000baac8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   baac8:	b508      	push	{r3, lr}
   baaca:	4b02      	ldr	r3, [pc, #8]	; (baad4 <HAL_USB_USART_Flush_Data+0xc>)
   baacc:	681b      	ldr	r3, [r3, #0]
   baace:	6a1b      	ldr	r3, [r3, #32]
   baad0:	9301      	str	r3, [sp, #4]
   baad2:	bd08      	pop	{r3, pc}
   baad4:	0003024c 	.word	0x0003024c

000baad8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   baad8:	b508      	push	{r3, lr}
   baada:	4b02      	ldr	r3, [pc, #8]	; (baae4 <HAL_USB_USART_Is_Connected+0xc>)
   baadc:	681b      	ldr	r3, [r3, #0]
   baade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   baae0:	9301      	str	r3, [sp, #4]
   baae2:	bd08      	pop	{r3, pc}
   baae4:	0003024c 	.word	0x0003024c

000baae8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   baae8:	b508      	push	{r3, lr}
   baaea:	4b02      	ldr	r3, [pc, #8]	; (baaf4 <panic_+0xc>)
   baaec:	681b      	ldr	r3, [r3, #0]
   baaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   baaf0:	9301      	str	r3, [sp, #4]
   baaf2:	bd08      	pop	{r3, pc}
   baaf4:	00030260 	.word	0x00030260

000baaf8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   baaf8:	b508      	push	{r3, lr}
   baafa:	4b02      	ldr	r3, [pc, #8]	; (bab04 <log_message+0xc>)
   baafc:	681b      	ldr	r3, [r3, #0]
   baafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bab00:	9301      	str	r3, [sp, #4]
   bab02:	bd08      	pop	{r3, pc}
   bab04:	00030260 	.word	0x00030260

000bab08 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bab08:	b508      	push	{r3, lr}
   bab0a:	4b02      	ldr	r3, [pc, #8]	; (bab14 <log_message_v+0xc>)
   bab0c:	681b      	ldr	r3, [r3, #0]
   bab0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bab10:	9301      	str	r3, [sp, #4]
   bab12:	bd08      	pop	{r3, pc}
   bab14:	00030260 	.word	0x00030260

000bab18 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bab18:	b508      	push	{r3, lr}
   bab1a:	4b02      	ldr	r3, [pc, #8]	; (bab24 <log_level_name+0xc>)
   bab1c:	681b      	ldr	r3, [r3, #0]
   bab1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bab20:	9301      	str	r3, [sp, #4]
   bab22:	bd08      	pop	{r3, pc}
   bab24:	00030260 	.word	0x00030260

000bab28 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bab28:	b508      	push	{r3, lr}
   bab2a:	4b02      	ldr	r3, [pc, #8]	; (bab34 <log_set_callbacks+0xc>)
   bab2c:	681b      	ldr	r3, [r3, #0]
   bab2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bab30:	9301      	str	r3, [sp, #4]
   bab32:	bd08      	pop	{r3, pc}
   bab34:	00030260 	.word	0x00030260

000bab38 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bab38:	b508      	push	{r3, lr}
   bab3a:	4b03      	ldr	r3, [pc, #12]	; (bab48 <diag_get_source+0x10>)
   bab3c:	681b      	ldr	r3, [r3, #0]
   bab3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bab42:	9301      	str	r3, [sp, #4]
   bab44:	bd08      	pop	{r3, pc}
   bab46:	0000      	.short	0x0000
   bab48:	00030260 	.word	0x00030260

000bab4c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bab4c:	b508      	push	{r3, lr}
   bab4e:	4b02      	ldr	r3, [pc, #8]	; (bab58 <system_mode+0xc>)
   bab50:	681b      	ldr	r3, [r3, #0]
   bab52:	681b      	ldr	r3, [r3, #0]
   bab54:	9301      	str	r3, [sp, #4]
   bab56:	bd08      	pop	{r3, pc}
   bab58:	00030220 	.word	0x00030220

000bab5c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bab5c:	b508      	push	{r3, lr}
   bab5e:	4b02      	ldr	r3, [pc, #8]	; (bab68 <set_system_mode+0xc>)
   bab60:	681b      	ldr	r3, [r3, #0]
   bab62:	685b      	ldr	r3, [r3, #4]
   bab64:	9301      	str	r3, [sp, #4]
   bab66:	bd08      	pop	{r3, pc}
   bab68:	00030220 	.word	0x00030220

000bab6c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bab6c:	b508      	push	{r3, lr}
   bab6e:	4b02      	ldr	r3, [pc, #8]	; (bab78 <system_delay_ms+0xc>)
   bab70:	681b      	ldr	r3, [r3, #0]
   bab72:	695b      	ldr	r3, [r3, #20]
   bab74:	9301      	str	r3, [sp, #4]
   bab76:	bd08      	pop	{r3, pc}
   bab78:	00030220 	.word	0x00030220

000bab7c <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bab7c:	b508      	push	{r3, lr}
   bab7e:	4b02      	ldr	r3, [pc, #8]	; (bab88 <system_subscribe_event+0xc>)
   bab80:	681b      	ldr	r3, [r3, #0]
   bab82:	6a1b      	ldr	r3, [r3, #32]
   bab84:	9301      	str	r3, [sp, #4]
   bab86:	bd08      	pop	{r3, pc}
   bab88:	00030220 	.word	0x00030220

000bab8c <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bab8c:	b508      	push	{r3, lr}
   bab8e:	4b02      	ldr	r3, [pc, #8]	; (bab98 <system_thread_set_state+0xc>)
   bab90:	681b      	ldr	r3, [r3, #0]
   bab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bab94:	9301      	str	r3, [sp, #4]
   bab96:	bd08      	pop	{r3, pc}
   bab98:	00030220 	.word	0x00030220

000bab9c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bab9c:	b508      	push	{r3, lr}
   bab9e:	4b02      	ldr	r3, [pc, #8]	; (baba8 <application_thread_current+0xc>)
   baba0:	681b      	ldr	r3, [r3, #0]
   baba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   baba4:	9301      	str	r3, [sp, #4]
   baba6:	bd08      	pop	{r3, pc}
   baba8:	00030220 	.word	0x00030220

000babac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   babac:	b508      	push	{r3, lr}
   babae:	4b02      	ldr	r3, [pc, #8]	; (babb8 <application_thread_invoke+0xc>)
   babb0:	681b      	ldr	r3, [r3, #0]
   babb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   babb4:	9301      	str	r3, [sp, #4]
   babb6:	bd08      	pop	{r3, pc}
   babb8:	00030220 	.word	0x00030220

000babbc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   babbc:	b508      	push	{r3, lr}
   babbe:	4b02      	ldr	r3, [pc, #8]	; (babc8 <system_thread_get_state+0xc>)
   babc0:	681b      	ldr	r3, [r3, #0]
   babc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   babc4:	9301      	str	r3, [sp, #4]
   babc6:	bd08      	pop	{r3, pc}
   babc8:	00030220 	.word	0x00030220

000babcc <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   babcc:	b508      	push	{r3, lr}
   babce:	4b02      	ldr	r3, [pc, #8]	; (babd8 <system_notify_time_changed+0xc>)
   babd0:	681b      	ldr	r3, [r3, #0]
   babd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   babd4:	9301      	str	r3, [sp, #4]
   babd6:	bd08      	pop	{r3, pc}
   babd8:	00030220 	.word	0x00030220

000babdc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   babdc:	b508      	push	{r3, lr}
   babde:	4b03      	ldr	r3, [pc, #12]	; (babec <system_ctrl_set_app_request_handler+0x10>)
   babe0:	681b      	ldr	r3, [r3, #0]
   babe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   babe6:	9301      	str	r3, [sp, #4]
   babe8:	bd08      	pop	{r3, pc}
   babea:	0000      	.short	0x0000
   babec:	00030220 	.word	0x00030220

000babf0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   babf0:	b508      	push	{r3, lr}
   babf2:	4b03      	ldr	r3, [pc, #12]	; (bac00 <system_ctrl_set_result+0x10>)
   babf4:	681b      	ldr	r3, [r3, #0]
   babf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   babfa:	9301      	str	r3, [sp, #4]
   babfc:	bd08      	pop	{r3, pc}
   babfe:	0000      	.short	0x0000
   bac00:	00030220 	.word	0x00030220

000bac04 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bac04:	b508      	push	{r3, lr}
   bac06:	4b03      	ldr	r3, [pc, #12]	; (bac14 <system_power_management_set_config+0x10>)
   bac08:	681b      	ldr	r3, [r3, #0]
   bac0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bac0e:	9301      	str	r3, [sp, #4]
   bac10:	bd08      	pop	{r3, pc}
   bac12:	0000      	.short	0x0000
   bac14:	00030220 	.word	0x00030220

000bac18 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bac18:	b508      	push	{r3, lr}
   bac1a:	4b03      	ldr	r3, [pc, #12]	; (bac28 <system_sleep_ext+0x10>)
   bac1c:	681b      	ldr	r3, [r3, #0]
   bac1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bac22:	9301      	str	r3, [sp, #4]
   bac24:	bd08      	pop	{r3, pc}
   bac26:	0000      	.short	0x0000
   bac28:	00030220 	.word	0x00030220

000bac2c <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bac2c:	b508      	push	{r3, lr}
   bac2e:	4b03      	ldr	r3, [pc, #12]	; (bac3c <system_reset+0x10>)
   bac30:	681b      	ldr	r3, [r3, #0]
   bac32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bac36:	9301      	str	r3, [sp, #4]
   bac38:	bd08      	pop	{r3, pc}
   bac3a:	0000      	.short	0x0000
   bac3c:	00030220 	.word	0x00030220

000bac40 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bac40:	b508      	push	{r3, lr}
   bac42:	4b02      	ldr	r3, [pc, #8]	; (bac4c <spark_variable+0xc>)
   bac44:	681b      	ldr	r3, [r3, #0]
   bac46:	681b      	ldr	r3, [r3, #0]
   bac48:	9301      	str	r3, [sp, #4]
   bac4a:	bd08      	pop	{r3, pc}
   bac4c:	00030244 	.word	0x00030244

000bac50 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bac50:	b508      	push	{r3, lr}
   bac52:	4b02      	ldr	r3, [pc, #8]	; (bac5c <spark_function+0xc>)
   bac54:	681b      	ldr	r3, [r3, #0]
   bac56:	685b      	ldr	r3, [r3, #4]
   bac58:	9301      	str	r3, [sp, #4]
   bac5a:	bd08      	pop	{r3, pc}
   bac5c:	00030244 	.word	0x00030244

000bac60 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bac60:	b508      	push	{r3, lr}
   bac62:	4b02      	ldr	r3, [pc, #8]	; (bac6c <spark_process+0xc>)
   bac64:	681b      	ldr	r3, [r3, #0]
   bac66:	689b      	ldr	r3, [r3, #8]
   bac68:	9301      	str	r3, [sp, #4]
   bac6a:	bd08      	pop	{r3, pc}
   bac6c:	00030244 	.word	0x00030244

000bac70 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bac70:	b508      	push	{r3, lr}
   bac72:	4b02      	ldr	r3, [pc, #8]	; (bac7c <spark_cloud_flag_connect+0xc>)
   bac74:	681b      	ldr	r3, [r3, #0]
   bac76:	68db      	ldr	r3, [r3, #12]
   bac78:	9301      	str	r3, [sp, #4]
   bac7a:	bd08      	pop	{r3, pc}
   bac7c:	00030244 	.word	0x00030244

000bac80 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bac80:	b508      	push	{r3, lr}
   bac82:	4b02      	ldr	r3, [pc, #8]	; (bac8c <spark_cloud_flag_connected+0xc>)
   bac84:	681b      	ldr	r3, [r3, #0]
   bac86:	695b      	ldr	r3, [r3, #20]
   bac88:	9301      	str	r3, [sp, #4]
   bac8a:	bd08      	pop	{r3, pc}
   bac8c:	00030244 	.word	0x00030244

000bac90 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bac90:	b508      	push	{r3, lr}
   bac92:	4b02      	ldr	r3, [pc, #8]	; (bac9c <spark_send_event+0xc>)
   bac94:	681b      	ldr	r3, [r3, #0]
   bac96:	6a1b      	ldr	r3, [r3, #32]
   bac98:	9301      	str	r3, [sp, #4]
   bac9a:	bd08      	pop	{r3, pc}
   bac9c:	00030244 	.word	0x00030244

000baca0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   baca0:	b508      	push	{r3, lr}
   baca2:	4b02      	ldr	r3, [pc, #8]	; (bacac <spark_sync_time_pending+0xc>)
   baca4:	681b      	ldr	r3, [r3, #0]
   baca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   baca8:	9301      	str	r3, [sp, #4]
   bacaa:	bd08      	pop	{r3, pc}
   bacac:	00030244 	.word	0x00030244

000bacb0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bacb0:	b508      	push	{r3, lr}
   bacb2:	4b02      	ldr	r3, [pc, #8]	; (bacbc <spark_sync_time_last+0xc>)
   bacb4:	681b      	ldr	r3, [r3, #0]
   bacb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bacb8:	9301      	str	r3, [sp, #4]
   bacba:	bd08      	pop	{r3, pc}
   bacbc:	00030244 	.word	0x00030244

000bacc0 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   bacc0:	b508      	push	{r3, lr}
   bacc2:	4b02      	ldr	r3, [pc, #8]	; (baccc <spark_set_connection_property+0xc>)
   bacc4:	681b      	ldr	r3, [r3, #0]
   bacc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bacc8:	9301      	str	r3, [sp, #4]
   bacca:	bd08      	pop	{r3, pc}
   baccc:	00030244 	.word	0x00030244

000bacd0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bacd0:	b508      	push	{r3, lr}
   bacd2:	4b02      	ldr	r3, [pc, #8]	; (bacdc <spark_set_random_seed_from_cloud_handler+0xc>)
   bacd4:	681b      	ldr	r3, [r3, #0]
   bacd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bacd8:	9301      	str	r3, [sp, #4]
   bacda:	bd08      	pop	{r3, pc}
   bacdc:	00030244 	.word	0x00030244

000bace0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bace0:	b508      	push	{r3, lr}
   bace2:	4b02      	ldr	r3, [pc, #8]	; (bacec <spark_cloud_disconnect+0xc>)
   bace4:	681b      	ldr	r3, [r3, #0]
   bace6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bace8:	9301      	str	r3, [sp, #4]
   bacea:	bd08      	pop	{r3, pc}
   bacec:	00030244 	.word	0x00030244

000bacf0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bacf0:	b508      	push	{r3, lr}
   bacf2:	4b02      	ldr	r3, [pc, #8]	; (bacfc <network_connect+0xc>)
   bacf4:	681b      	ldr	r3, [r3, #0]
   bacf6:	685b      	ldr	r3, [r3, #4]
   bacf8:	9301      	str	r3, [sp, #4]
   bacfa:	bd08      	pop	{r3, pc}
   bacfc:	00030240 	.word	0x00030240

000bad00 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bad00:	b508      	push	{r3, lr}
   bad02:	4b02      	ldr	r3, [pc, #8]	; (bad0c <network_connecting+0xc>)
   bad04:	681b      	ldr	r3, [r3, #0]
   bad06:	689b      	ldr	r3, [r3, #8]
   bad08:	9301      	str	r3, [sp, #4]
   bad0a:	bd08      	pop	{r3, pc}
   bad0c:	00030240 	.word	0x00030240

000bad10 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bad10:	b508      	push	{r3, lr}
   bad12:	4b02      	ldr	r3, [pc, #8]	; (bad1c <network_disconnect+0xc>)
   bad14:	681b      	ldr	r3, [r3, #0]
   bad16:	68db      	ldr	r3, [r3, #12]
   bad18:	9301      	str	r3, [sp, #4]
   bad1a:	bd08      	pop	{r3, pc}
   bad1c:	00030240 	.word	0x00030240

000bad20 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bad20:	b508      	push	{r3, lr}
   bad22:	4b02      	ldr	r3, [pc, #8]	; (bad2c <network_ready+0xc>)
   bad24:	681b      	ldr	r3, [r3, #0]
   bad26:	691b      	ldr	r3, [r3, #16]
   bad28:	9301      	str	r3, [sp, #4]
   bad2a:	bd08      	pop	{r3, pc}
   bad2c:	00030240 	.word	0x00030240

000bad30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bad30:	b508      	push	{r3, lr}
   bad32:	4b02      	ldr	r3, [pc, #8]	; (bad3c <network_on+0xc>)
   bad34:	681b      	ldr	r3, [r3, #0]
   bad36:	695b      	ldr	r3, [r3, #20]
   bad38:	9301      	str	r3, [sp, #4]
   bad3a:	bd08      	pop	{r3, pc}
   bad3c:	00030240 	.word	0x00030240

000bad40 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bad40:	b508      	push	{r3, lr}
   bad42:	4b02      	ldr	r3, [pc, #8]	; (bad4c <network_off+0xc>)
   bad44:	681b      	ldr	r3, [r3, #0]
   bad46:	699b      	ldr	r3, [r3, #24]
   bad48:	9301      	str	r3, [sp, #4]
   bad4a:	bd08      	pop	{r3, pc}
   bad4c:	00030240 	.word	0x00030240

000bad50 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bad50:	b508      	push	{r3, lr}
   bad52:	4b02      	ldr	r3, [pc, #8]	; (bad5c <network_listen+0xc>)
   bad54:	681b      	ldr	r3, [r3, #0]
   bad56:	69db      	ldr	r3, [r3, #28]
   bad58:	9301      	str	r3, [sp, #4]
   bad5a:	bd08      	pop	{r3, pc}
   bad5c:	00030240 	.word	0x00030240

000bad60 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bad60:	b508      	push	{r3, lr}
   bad62:	4b02      	ldr	r3, [pc, #8]	; (bad6c <network_listening+0xc>)
   bad64:	681b      	ldr	r3, [r3, #0]
   bad66:	6a1b      	ldr	r3, [r3, #32]
   bad68:	9301      	str	r3, [sp, #4]
   bad6a:	bd08      	pop	{r3, pc}
   bad6c:	00030240 	.word	0x00030240

000bad70 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bad70:	b508      	push	{r3, lr}
   bad72:	4b02      	ldr	r3, [pc, #8]	; (bad7c <network_set_listen_timeout+0xc>)
   bad74:	681b      	ldr	r3, [r3, #0]
   bad76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bad78:	9301      	str	r3, [sp, #4]
   bad7a:	bd08      	pop	{r3, pc}
   bad7c:	00030240 	.word	0x00030240

000bad80 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bad80:	b508      	push	{r3, lr}
   bad82:	4b02      	ldr	r3, [pc, #8]	; (bad8c <network_get_listen_timeout+0xc>)
   bad84:	681b      	ldr	r3, [r3, #0]
   bad86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bad88:	9301      	str	r3, [sp, #4]
   bad8a:	bd08      	pop	{r3, pc}
   bad8c:	00030240 	.word	0x00030240

000bad90 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bad90:	b508      	push	{r3, lr}
   bad92:	4b02      	ldr	r3, [pc, #8]	; (bad9c <network_is_on+0xc>)
   bad94:	681b      	ldr	r3, [r3, #0]
   bad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bad98:	9301      	str	r3, [sp, #4]
   bad9a:	bd08      	pop	{r3, pc}
   bad9c:	00030240 	.word	0x00030240

000bada0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bada0:	b508      	push	{r3, lr}
   bada2:	4b02      	ldr	r3, [pc, #8]	; (badac <network_is_off+0xc>)
   bada4:	681b      	ldr	r3, [r3, #0]
   bada6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bada8:	9301      	str	r3, [sp, #4]
   badaa:	bd08      	pop	{r3, pc}
   badac:	00030240 	.word	0x00030240

000badb0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   badb0:	b508      	push	{r3, lr}
   badb2:	4b02      	ldr	r3, [pc, #8]	; (badbc <malloc+0xc>)
   badb4:	681b      	ldr	r3, [r3, #0]
   badb6:	681b      	ldr	r3, [r3, #0]
   badb8:	9301      	str	r3, [sp, #4]
   badba:	bd08      	pop	{r3, pc}
   badbc:	0003021c 	.word	0x0003021c

000badc0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   badc0:	b508      	push	{r3, lr}
   badc2:	4b02      	ldr	r3, [pc, #8]	; (badcc <free+0xc>)
   badc4:	681b      	ldr	r3, [r3, #0]
   badc6:	685b      	ldr	r3, [r3, #4]
   badc8:	9301      	str	r3, [sp, #4]
   badca:	bd08      	pop	{r3, pc}
   badcc:	0003021c 	.word	0x0003021c

000badd0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   badd0:	b508      	push	{r3, lr}
   badd2:	4b02      	ldr	r3, [pc, #8]	; (baddc <realloc+0xc>)
   badd4:	681b      	ldr	r3, [r3, #0]
   badd6:	689b      	ldr	r3, [r3, #8]
   badd8:	9301      	str	r3, [sp, #4]
   badda:	bd08      	pop	{r3, pc}
   baddc:	0003021c 	.word	0x0003021c

000bade0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bade0:	b508      	push	{r3, lr}
   bade2:	4b02      	ldr	r3, [pc, #8]	; (badec <siprintf+0xc>)
   bade4:	681b      	ldr	r3, [r3, #0]
   bade6:	691b      	ldr	r3, [r3, #16]
   bade8:	9301      	str	r3, [sp, #4]
   badea:	bd08      	pop	{r3, pc}
   badec:	0003021c 	.word	0x0003021c

000badf0 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   badf0:	b508      	push	{r3, lr}
   badf2:	4b02      	ldr	r3, [pc, #8]	; (badfc <sscanf+0xc>)
   badf4:	681b      	ldr	r3, [r3, #0]
   badf6:	695b      	ldr	r3, [r3, #20]
   badf8:	9301      	str	r3, [sp, #4]
   badfa:	bd08      	pop	{r3, pc}
   badfc:	0003021c 	.word	0x0003021c

000bae00 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bae00:	b508      	push	{r3, lr}
   bae02:	4b02      	ldr	r3, [pc, #8]	; (bae0c <snprintf+0xc>)
   bae04:	681b      	ldr	r3, [r3, #0]
   bae06:	69db      	ldr	r3, [r3, #28]
   bae08:	9301      	str	r3, [sp, #4]
   bae0a:	bd08      	pop	{r3, pc}
   bae0c:	0003021c 	.word	0x0003021c

000bae10 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bae10:	b508      	push	{r3, lr}
   bae12:	4b02      	ldr	r3, [pc, #8]	; (bae1c <vsnprintf+0xc>)
   bae14:	681b      	ldr	r3, [r3, #0]
   bae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bae18:	9301      	str	r3, [sp, #4]
   bae1a:	bd08      	pop	{r3, pc}
   bae1c:	0003021c 	.word	0x0003021c

000bae20 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bae20:	b508      	push	{r3, lr}
   bae22:	4b02      	ldr	r3, [pc, #8]	; (bae2c <abort+0xc>)
   bae24:	681b      	ldr	r3, [r3, #0]
   bae26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bae28:	9301      	str	r3, [sp, #4]
   bae2a:	bd08      	pop	{r3, pc}
   bae2c:	0003021c 	.word	0x0003021c

000bae30 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bae30:	b508      	push	{r3, lr}
   bae32:	4b02      	ldr	r3, [pc, #8]	; (bae3c <_malloc_r+0xc>)
   bae34:	681b      	ldr	r3, [r3, #0]
   bae36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bae38:	9301      	str	r3, [sp, #4]
   bae3a:	bd08      	pop	{r3, pc}
   bae3c:	0003021c 	.word	0x0003021c

000bae40 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bae40:	b508      	push	{r3, lr}
   bae42:	4b02      	ldr	r3, [pc, #8]	; (bae4c <__errno+0xc>)
   bae44:	681b      	ldr	r3, [r3, #0]
   bae46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bae48:	9301      	str	r3, [sp, #4]
   bae4a:	bd08      	pop	{r3, pc}
   bae4c:	0003021c 	.word	0x0003021c

000bae50 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bae50:	b508      	push	{r3, lr}
   bae52:	4b02      	ldr	r3, [pc, #8]	; (bae5c <__assert_func+0xc>)
   bae54:	681b      	ldr	r3, [r3, #0]
   bae56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bae58:	9301      	str	r3, [sp, #4]
   bae5a:	bd08      	pop	{r3, pc}
   bae5c:	0003021c 	.word	0x0003021c

000bae60 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bae60:	b508      	push	{r3, lr}
   bae62:	4b02      	ldr	r3, [pc, #8]	; (bae6c <newlib_impure_ptr_callback+0xc>)
   bae64:	681b      	ldr	r3, [r3, #0]
   bae66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bae68:	9301      	str	r3, [sp, #4]
   bae6a:	bd08      	pop	{r3, pc}
   bae6c:	0003021c 	.word	0x0003021c

000bae70 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bae70:	b508      	push	{r3, lr}
   bae72:	4b02      	ldr	r3, [pc, #8]	; (bae7c <strftime+0xc>)
   bae74:	681b      	ldr	r3, [r3, #0]
   bae76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bae78:	9301      	str	r3, [sp, #4]
   bae7a:	bd08      	pop	{r3, pc}
   bae7c:	0003021c 	.word	0x0003021c

000bae80 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bae80:	b508      	push	{r3, lr}
   bae82:	4b02      	ldr	r3, [pc, #8]	; (bae8c <localtime_r+0xc>)
   bae84:	681b      	ldr	r3, [r3, #0]
   bae86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bae88:	9301      	str	r3, [sp, #4]
   bae8a:	bd08      	pop	{r3, pc}
   bae8c:	0003021c 	.word	0x0003021c

000bae90 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bae90:	b508      	push	{r3, lr}
   bae92:	4b02      	ldr	r3, [pc, #8]	; (bae9c <gmtime_r+0xc>)
   bae94:	681b      	ldr	r3, [r3, #0]
   bae96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bae98:	9301      	str	r3, [sp, #4]
   bae9a:	bd08      	pop	{r3, pc}
   bae9c:	0003021c 	.word	0x0003021c

000baea0 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   baea0:	b508      	push	{r3, lr}
   baea2:	4b02      	ldr	r3, [pc, #8]	; (baeac <mktime+0xc>)
   baea4:	681b      	ldr	r3, [r3, #0]
   baea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   baea8:	9301      	str	r3, [sp, #4]
   baeaa:	bd08      	pop	{r3, pc}
   baeac:	0003021c 	.word	0x0003021c

000baeb0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   baeb0:	2100      	movs	r1, #0
   baeb2:	f7ff be5b 	b.w	bab6c <system_delay_ms>

000baeb6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   baeb6:	b510      	push	{r4, lr}
      if (_M_empty())
   baeb8:	6883      	ldr	r3, [r0, #8]
   baeba:	4604      	mov	r4, r0
   baebc:	b90b      	cbnz	r3, baec2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   baebe:	f003 f995 	bl	be1ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   baec2:	68c3      	ldr	r3, [r0, #12]
   baec4:	4798      	blx	r3
      if (_M_manager)
   baec6:	68a3      	ldr	r3, [r4, #8]
   baec8:	b11b      	cbz	r3, baed2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   baeca:	2203      	movs	r2, #3
   baecc:	4621      	mov	r1, r4
   baece:	4620      	mov	r0, r4
   baed0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   baed2:	4620      	mov	r0, r4
   baed4:	2110      	movs	r1, #16
}
   baed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   baeda:	f7f9 b8e0 	b.w	b409e <_ZdlPvj>

000baede <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   baede:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   baee0:	6843      	ldr	r3, [r0, #4]
   baee2:	3b01      	subs	r3, #1
    {
   baee4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   baee6:	6043      	str	r3, [r0, #4]
   baee8:	b963      	cbnz	r3, baf04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   baeea:	6803      	ldr	r3, [r0, #0]
   baeec:	689b      	ldr	r3, [r3, #8]
   baeee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   baef0:	68a3      	ldr	r3, [r4, #8]
   baef2:	3b01      	subs	r3, #1
   baef4:	60a3      	str	r3, [r4, #8]
   baef6:	b92b      	cbnz	r3, baf04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   baef8:	6823      	ldr	r3, [r4, #0]
   baefa:	4620      	mov	r0, r4
   baefc:	68db      	ldr	r3, [r3, #12]
    }
   baefe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   baf02:	4718      	bx	r3
    }
   baf04:	bd10      	pop	{r4, pc}

000baf06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   baf06:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   baf08:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   baf0c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   baf0e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   baf12:	42ae      	cmp	r6, r5
   baf14:	d004      	beq.n	baf20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   baf16:	4628      	mov	r0, r5
   baf18:	f002 fab6 	bl	bd488 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   baf1c:	3510      	adds	r5, #16
   baf1e:	e7f8      	b.n	baf12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   baf20:	6820      	ldr	r0, [r4, #0]
   baf22:	f7ff ff4d 	bl	badc0 <free>
    AllocatorT::free(data_);
}
   baf26:	4620      	mov	r0, r4
   baf28:	bd70      	pop	{r4, r5, r6, pc}
	...

000baf2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   baf2c:	4802      	ldr	r0, [pc, #8]	; (baf38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   baf2e:	2300      	movs	r3, #0
   baf30:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   baf32:	f7ff bb61 	b.w	ba5f8 <os_mutex_recursive_create>
   baf36:	bf00      	nop
   baf38:	2003e580 	.word	0x2003e580

000baf3c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   baf3c:	2200      	movs	r2, #0
   baf3e:	6840      	ldr	r0, [r0, #4]
   baf40:	4611      	mov	r1, r2
   baf42:	f7ff beed 	b.w	bad20 <network_ready>

000baf46 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   baf46:	2200      	movs	r2, #0
   baf48:	6840      	ldr	r0, [r0, #4]
   baf4a:	4611      	mov	r1, r2
   baf4c:	f7ff bf08 	b.w	bad60 <network_listening>

000baf50 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   baf50:	2200      	movs	r2, #0
   baf52:	6840      	ldr	r0, [r0, #4]
   baf54:	4611      	mov	r1, r2
   baf56:	f7ff bf13 	b.w	bad80 <network_get_listen_timeout>

000baf5a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   baf5a:	6840      	ldr	r0, [r0, #4]
   baf5c:	2200      	movs	r2, #0
   baf5e:	f7ff bf07 	b.w	bad70 <network_set_listen_timeout>

000baf62 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   baf62:	6840      	ldr	r0, [r0, #4]
   baf64:	2200      	movs	r2, #0
   baf66:	f081 0101 	eor.w	r1, r1, #1
   baf6a:	f7ff bef1 	b.w	bad50 <network_listen>

000baf6e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   baf6e:	2300      	movs	r3, #0
   baf70:	6840      	ldr	r0, [r0, #4]
   baf72:	461a      	mov	r2, r3
   baf74:	4619      	mov	r1, r3
   baf76:	f7ff bee3 	b.w	bad40 <network_off>

000baf7a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   baf7a:	2300      	movs	r3, #0
   baf7c:	6840      	ldr	r0, [r0, #4]
   baf7e:	461a      	mov	r2, r3
   baf80:	4619      	mov	r1, r3
   baf82:	f7ff bed5 	b.w	bad30 <network_on>

000baf86 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   baf86:	2200      	movs	r2, #0
   baf88:	6840      	ldr	r0, [r0, #4]
   baf8a:	4611      	mov	r1, r2
   baf8c:	f7ff beb8 	b.w	bad00 <network_connecting>

000baf90 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   baf90:	6840      	ldr	r0, [r0, #4]
   baf92:	2200      	movs	r2, #0
   baf94:	2102      	movs	r1, #2
   baf96:	f7ff bebb 	b.w	bad10 <network_disconnect>

000baf9a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   baf9a:	2300      	movs	r3, #0
   baf9c:	6840      	ldr	r0, [r0, #4]
   baf9e:	461a      	mov	r2, r3
   bafa0:	f7ff bea6 	b.w	bacf0 <network_connect>

000bafa4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bafa4:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bafa6:	4b13      	ldr	r3, [pc, #76]	; (baff4 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bafa8:	6003      	str	r3, [r0, #0]
   bafaa:	2518      	movs	r5, #24
   bafac:	3330      	adds	r3, #48	; 0x30
   bafae:	b086      	sub	sp, #24
   bafb0:	460e      	mov	r6, r1
   bafb2:	6043      	str	r3, [r0, #4]
   bafb4:	462a      	mov	r2, r5
   bafb6:	2100      	movs	r1, #0
   bafb8:	4604      	mov	r4, r0
   bafba:	3008      	adds	r0, #8
   bafbc:	f003 fe48 	bl	bec50 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bafc0:	2200      	movs	r2, #0
   bafc2:	6870      	ldr	r0, [r6, #4]
   bafc4:	4611      	mov	r1, r2
   bafc6:	f7ff feab 	bl	bad20 <network_ready>
   bafca:	b178      	cbz	r0, bafec <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bafcc:	2100      	movs	r1, #0
   bafce:	462a      	mov	r2, r5
   bafd0:	4668      	mov	r0, sp
   bafd2:	f003 fe3d 	bl	bec50 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bafd6:	4669      	mov	r1, sp
   bafd8:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bafda:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bafde:	f7ff facb 	bl	ba578 <cellular_signal>
   bafe2:	b918      	cbnz	r0, bafec <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bafe4:	4669      	mov	r1, sp
   bafe6:	4620      	mov	r0, r4
   bafe8:	f000 f8b8 	bl	bb15c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bafec:	4620      	mov	r0, r4
   bafee:	b006      	add	sp, #24
   baff0:	bd70      	pop	{r4, r5, r6, pc}
   baff2:	bf00      	nop
   baff4:	000c05bc 	.word	0x000c05bc

000baff8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   baff8:	4b08      	ldr	r3, [pc, #32]	; (bb01c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   baffa:	b510      	push	{r4, lr}
   baffc:	2428      	movs	r4, #40	; 0x28
   baffe:	4622      	mov	r2, r4
   bb000:	4618      	mov	r0, r3
   bb002:	2100      	movs	r1, #0
   bb004:	f003 fe24 	bl	bec50 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bb008:	4b05      	ldr	r3, [pc, #20]	; (bb020 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bb00a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bb00c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb010:	6042      	str	r2, [r0, #4]
   bb012:	2204      	movs	r2, #4
   bb014:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bb016:	4a03      	ldr	r2, [pc, #12]	; (bb024 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bb018:	601a      	str	r2, [r3, #0]
   bb01a:	bd10      	pop	{r4, pc}
   bb01c:	2003e58c 	.word	0x2003e58c
   bb020:	2003e584 	.word	0x2003e584
   bb024:	000c0580 	.word	0x000c0580

000bb028 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bb028:	4770      	bx	lr

000bb02a <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bb02a:	7b00      	ldrb	r0, [r0, #12]
   bb02c:	4770      	bx	lr

000bb02e <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb02e:	7b03      	ldrb	r3, [r0, #12]
   bb030:	b14b      	cbz	r3, bb046 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bb032:	6903      	ldr	r3, [r0, #16]
   bb034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb038:	d005      	beq.n	bb046 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb03a:	6980      	ldr	r0, [r0, #24]
   bb03c:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bb040:	bf18      	it	ne
   bb042:	2001      	movne	r0, #1
   bb044:	4770      	bx	lr
   bb046:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bb048:	4770      	bx	lr

000bb04a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bb04a:	6803      	ldr	r3, [r0, #0]
   bb04c:	6a1b      	ldr	r3, [r3, #32]
   bb04e:	4718      	bx	r3

000bb050 <_ZNK14CellularSignal7printToER5Print>:
{
   bb050:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bb052:	6803      	ldr	r3, [r0, #0]
{
   bb054:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bb056:	691b      	ldr	r3, [r3, #16]
{
   bb058:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bb05a:	4798      	blx	r3
   bb05c:	2102      	movs	r1, #2
   bb05e:	4628      	mov	r0, r5
   bb060:	f002 f8ee 	bl	bd240 <_ZN5Print5printEfi>
    n += p.print(',');
   bb064:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bb066:	4604      	mov	r4, r0
    n += p.print(',');
   bb068:	4628      	mov	r0, r5
   bb06a:	f001 fff3 	bl	bd054 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bb06e:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bb070:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bb072:	699b      	ldr	r3, [r3, #24]
   bb074:	4630      	mov	r0, r6
   bb076:	4798      	blx	r3
   bb078:	2102      	movs	r1, #2
   bb07a:	4628      	mov	r0, r5
   bb07c:	f002 f8e0 	bl	bd240 <_ZN5Print5printEfi>
}
   bb080:	4420      	add	r0, r4
   bb082:	bd70      	pop	{r4, r5, r6, pc}

000bb084 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bb084:	f1a0 0004 	sub.w	r0, r0, #4
   bb088:	f7ff bfe2 	b.w	bb050 <_ZNK14CellularSignal7printToER5Print>

000bb08c <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bb08c:	b510      	push	{r4, lr}
   bb08e:	2120      	movs	r1, #32
   bb090:	4604      	mov	r4, r0
   bb092:	f7f9 f804 	bl	b409e <_ZdlPvj>
   bb096:	4620      	mov	r0, r4
   bb098:	bd10      	pop	{r4, pc}
	...

000bb09c <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bb09c:	7b03      	ldrb	r3, [r0, #12]
   bb09e:	b17b      	cbz	r3, bb0c0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bb0a0:	6943      	ldr	r3, [r0, #20]
   bb0a2:	2b00      	cmp	r3, #0
   bb0a4:	db0c      	blt.n	bb0c0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bb0a6:	ee07 3a90 	vmov	s15, r3
   bb0aa:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb0c8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bb0ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb0b2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb0b6:	eddf 7a05 	vldr	s15, [pc, #20]	; bb0cc <_ZNK14CellularSignal11getStrengthEv+0x30>
   bb0ba:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb0be:	4770      	bx	lr
    return -1.0f;
   bb0c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb0c4:	4770      	bx	lr
   bb0c6:	bf00      	nop
   bb0c8:	477fff00 	.word	0x477fff00
   bb0cc:	42c80000 	.word	0x42c80000

000bb0d0 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bb0d0:	7b03      	ldrb	r3, [r0, #12]
   bb0d2:	b163      	cbz	r3, bb0ee <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bb0d4:	6903      	ldr	r3, [r0, #16]
   bb0d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb0da:	d008      	beq.n	bb0ee <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bb0dc:	ee07 3a90 	vmov	s15, r3
   bb0e0:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb0f4 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bb0e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb0e8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb0ec:	4770      	bx	lr
    return 0.0f;
   bb0ee:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb0f8 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bb0f2:	4770      	bx	lr
   bb0f4:	42c80000 	.word	0x42c80000
   bb0f8:	00000000 	.word	0x00000000

000bb0fc <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bb0fc:	7b03      	ldrb	r3, [r0, #12]
   bb0fe:	b17b      	cbz	r3, bb120 <_ZNK14CellularSignal10getQualityEv+0x24>
   bb100:	69c3      	ldr	r3, [r0, #28]
   bb102:	2b00      	cmp	r3, #0
   bb104:	db0c      	blt.n	bb120 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bb106:	ee07 3a90 	vmov	s15, r3
   bb10a:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb128 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bb10e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb112:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb116:	eddf 7a05 	vldr	s15, [pc, #20]	; bb12c <_ZNK14CellularSignal10getQualityEv+0x30>
   bb11a:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb11e:	4770      	bx	lr
    return -1.0f;
   bb120:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb124:	4770      	bx	lr
   bb126:	bf00      	nop
   bb128:	477fff00 	.word	0x477fff00
   bb12c:	42c80000 	.word	0x42c80000

000bb130 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bb130:	7b03      	ldrb	r3, [r0, #12]
   bb132:	b163      	cbz	r3, bb14e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bb134:	6983      	ldr	r3, [r0, #24]
   bb136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb13a:	d008      	beq.n	bb14e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bb13c:	ee07 3a90 	vmov	s15, r3
   bb140:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb154 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bb144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb148:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb14c:	4770      	bx	lr
    return 0.0f;
   bb14e:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb158 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bb152:	4770      	bx	lr
   bb154:	42c80000 	.word	0x42c80000
   bb158:	00000000 	.word	0x00000000

000bb15c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bb15c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bb15e:	460d      	mov	r5, r1
   bb160:	f100 0408 	add.w	r4, r0, #8
   bb164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb168:	e895 0003 	ldmia.w	r5, {r0, r1}
   bb16c:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bb170:	2001      	movs	r0, #1
   bb172:	bd30      	pop	{r4, r5, pc}

000bb174 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb174:	4770      	bx	lr

000bb176 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bb176:	2000      	movs	r0, #0
   bb178:	4770      	bx	lr

000bb17a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb17a:	b510      	push	{r4, lr}
   bb17c:	2110      	movs	r1, #16
   bb17e:	4604      	mov	r4, r0
   bb180:	f7f8 ff8d 	bl	b409e <_ZdlPvj>
   bb184:	4620      	mov	r0, r4
   bb186:	bd10      	pop	{r4, pc}

000bb188 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bb188:	b508      	push	{r3, lr}
      { delete this; }
   bb18a:	f7ff fff6 	bl	bb17a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bb18e:	bd08      	pop	{r3, pc}

000bb190 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bb190:	b530      	push	{r4, r5, lr}
        type_(type) {
   bb192:	2200      	movs	r2, #0
   bb194:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bb198:	6002      	str	r2, [r0, #0]
   bb19a:	8084      	strh	r4, [r0, #4]
   bb19c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bb19e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb1a0:	680c      	ldr	r4, [r1, #0]
   bb1a2:	8085      	strh	r5, [r0, #4]
   bb1a4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bb1a6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bb1a8:	bd30      	pop	{r4, r5, pc}

000bb1aa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bb1aa:	b510      	push	{r4, lr}
   bb1ac:	4604      	mov	r4, r0
    free((void*)msg_);
   bb1ae:	6800      	ldr	r0, [r0, #0]
   bb1b0:	f7ff fe06 	bl	badc0 <free>
}
   bb1b4:	4620      	mov	r0, r4
   bb1b6:	bd10      	pop	{r4, pc}

000bb1b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bb1b8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bb1ba:	68c4      	ldr	r4, [r0, #12]
   bb1bc:	b1f4      	cbz	r4, bb1fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bb1be:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bb1c0:	2b02      	cmp	r3, #2
   bb1c2:	d103      	bne.n	bb1cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bb1c4:	f104 000c 	add.w	r0, r4, #12
   bb1c8:	f7ff ffef 	bl	bb1aa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bb1cc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bb1ce:	b135      	cbz	r5, bb1de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bb1d0:	4628      	mov	r0, r5
   bb1d2:	f7f9 fb83 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   bb1d6:	2110      	movs	r1, #16
   bb1d8:	4628      	mov	r0, r5
   bb1da:	f7f8 ff60 	bl	b409e <_ZdlPvj>
   bb1de:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bb1e0:	b135      	cbz	r5, bb1f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bb1e2:	4628      	mov	r0, r5
   bb1e4:	f7f9 fb7a 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
   bb1e8:	2110      	movs	r1, #16
   bb1ea:	4628      	mov	r0, r5
   bb1ec:	f7f8 ff57 	bl	b409e <_ZdlPvj>
   bb1f0:	4620      	mov	r0, r4
   bb1f2:	2114      	movs	r1, #20
   bb1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb1f8:	f7f8 bf51 	b.w	b409e <_ZdlPvj>
   bb1fc:	bd38      	pop	{r3, r4, r5, pc}

000bb1fe <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bb1fe:	b510      	push	{r4, lr}
   bb200:	b088      	sub	sp, #32
   bb202:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bb204:	4668      	mov	r0, sp
   bb206:	f002 f98a 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bb20a:	4669      	mov	r1, sp
   bb20c:	a804      	add	r0, sp, #16
   bb20e:	f002 f9d1 	bl	bd5b4 <_ZN6StringC1ERKS_>
   bb212:	a804      	add	r0, sp, #16
   bb214:	47a0      	blx	r4
   bb216:	4604      	mov	r4, r0
   bb218:	a804      	add	r0, sp, #16
   bb21a:	f002 f935 	bl	bd488 <_ZN6StringD1Ev>
    String p(param);
   bb21e:	4668      	mov	r0, sp
   bb220:	f002 f932 	bl	bd488 <_ZN6StringD1Ev>
}
   bb224:	4620      	mov	r0, r4
   bb226:	b008      	add	sp, #32
   bb228:	bd10      	pop	{r4, pc}

000bb22a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bb22a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bb22c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bb22e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bb232:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bb234:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bb236:	461a      	mov	r2, r3
   bb238:	4669      	mov	r1, sp
   bb23a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bb23c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bb240:	f8ad 4000 	strh.w	r4, [sp]
   bb244:	f7ff fd04 	bl	bac50 <spark_function>
}
   bb248:	b004      	add	sp, #16
   bb24a:	bd10      	pop	{r4, pc}

000bb24c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bb24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bb24e:	230c      	movs	r3, #12
   bb250:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bb254:	6803      	ldr	r3, [r0, #0]
   bb256:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bb25a:	7a03      	ldrb	r3, [r0, #8]
   bb25c:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bb260:	6843      	ldr	r3, [r0, #4]
   bb262:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bb264:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bb266:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bb268:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb26c:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bb26e:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bb272:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb276:	f7ff fd33 	bl	bace0 <spark_cloud_disconnect>
}
   bb27a:	b005      	add	sp, #20
   bb27c:	f85d fb04 	ldr.w	pc, [sp], #4

000bb280 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb280:	680b      	ldr	r3, [r1, #0]
   bb282:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bb284:	684b      	ldr	r3, [r1, #4]
   bb286:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bb288:	b113      	cbz	r3, bb290 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bb28a:	685a      	ldr	r2, [r3, #4]
   bb28c:	3201      	adds	r2, #1
   bb28e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb290:	4770      	bx	lr

000bb292 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bb292:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb294:	4604      	mov	r4, r0
   bb296:	4668      	mov	r0, sp
   bb298:	460d      	mov	r5, r1
   bb29a:	f7ff fff1 	bl	bb280 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb29e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bb2a0:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb2a2:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bb2a4:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bb2a6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bb2a8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bb2aa:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bb2ac:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bb2ae:	f7fa fc65 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bb2b2:	b135      	cbz	r5, bb2c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bb2b4:	1d28      	adds	r0, r5, #4
   bb2b6:	f7fa fc61 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb2ba:	2108      	movs	r1, #8
   bb2bc:	4628      	mov	r0, r5
   bb2be:	f7f8 feee 	bl	b409e <_ZdlPvj>
        return p;
    }
   bb2c2:	4620      	mov	r0, r4
   bb2c4:	b003      	add	sp, #12
   bb2c6:	bd30      	pop	{r4, r5, pc}

000bb2c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bb2c8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb2ca:	b510      	push	{r4, lr}
      if (_M_empty())
   bb2cc:	b90a      	cbnz	r2, bb2d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bb2ce:	f002 ff8d 	bl	be1ec <_ZSt25__throw_bad_function_callv>
    }
   bb2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb2d6:	68c3      	ldr	r3, [r0, #12]
   bb2d8:	4718      	bx	r3

000bb2da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb2da:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb2dc:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bb2de:	f100 0110 	add.w	r1, r0, #16
   bb2e2:	f7ff fff1 	bl	bb2c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bb2e6:	bd08      	pop	{r3, pc}

000bb2e8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bb2e8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb2ea:	b510      	push	{r4, lr}
      if (_M_empty())
   bb2ec:	b90a      	cbnz	r2, bb2f2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bb2ee:	f002 ff7d 	bl	be1ec <_ZSt25__throw_bad_function_callv>
    }
   bb2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb2f6:	68c3      	ldr	r3, [r0, #12]
   bb2f8:	4718      	bx	r3

000bb2fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb2fa:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb2fc:	6800      	ldr	r0, [r0, #0]
   bb2fe:	f100 0110 	add.w	r1, r0, #16
   bb302:	f7ff fff1 	bl	bb2e8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bb306:	bd08      	pop	{r3, pc}

000bb308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bb308:	b538      	push	{r3, r4, r5, lr}
   bb30a:	2300      	movs	r3, #0
   bb30c:	4604      	mov	r4, r0
   bb30e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb310:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bb312:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb314:	f7f8 febf 	bl	b4096 <_Znwj>
   bb318:	b128      	cbz	r0, bb326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bb31a:	2301      	movs	r3, #1
   bb31c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bb320:	4b02      	ldr	r3, [pc, #8]	; (bb32c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bb322:	6003      	str	r3, [r0, #0]
   bb324:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb326:	6020      	str	r0, [r4, #0]
	}
   bb328:	4620      	mov	r0, r4
   bb32a:	bd38      	pop	{r3, r4, r5, pc}
   bb32c:	000c05f8 	.word	0x000c05f8

000bb330 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bb330:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb332:	2300      	movs	r3, #0
   bb334:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bb336:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bb338:	4604      	mov	r4, r0
   bb33a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bb33c:	b12b      	cbz	r3, bb34a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb33e:	2202      	movs	r2, #2
   bb340:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb342:	68eb      	ldr	r3, [r5, #12]
   bb344:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bb346:	68ab      	ldr	r3, [r5, #8]
   bb348:	60a3      	str	r3, [r4, #8]
    }
   bb34a:	4620      	mov	r0, r4
   bb34c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bb350 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bb350:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb352:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bb354:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bb356:	4668      	mov	r0, sp
   bb358:	f7ff ff1a 	bl	bb190 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bb35c:	f04f 0302 	mov.w	r3, #2
   bb360:	e8d4 2f4f 	ldrexb	r2, [r4]
   bb364:	2a00      	cmp	r2, #0
   bb366:	d103      	bne.n	bb370 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bb368:	e8c4 3f41 	strexb	r1, r3, [r4]
   bb36c:	2900      	cmp	r1, #0
   bb36e:	d1f7      	bne.n	bb360 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bb370:	d125      	bne.n	bb3be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bb372:	f104 050c 	add.w	r5, r4, #12
   bb376:	4669      	mov	r1, sp
   bb378:	4628      	mov	r0, r5
   bb37a:	f7ff ff09 	bl	bb190 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bb37e:	f3bf 8f5b 	dmb	ish
   bb382:	2301      	movs	r3, #1
   bb384:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bb386:	2000      	movs	r0, #0
   bb388:	f104 0308 	add.w	r3, r4, #8
   bb38c:	f3bf 8f5b 	dmb	ish
   bb390:	e853 6f00 	ldrex	r6, [r3]
   bb394:	e843 0200 	strex	r2, r0, [r3]
   bb398:	2a00      	cmp	r2, #0
   bb39a:	d1f9      	bne.n	bb390 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bb39c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bb3a0:	b16e      	cbz	r6, bb3be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bb3a2:	f7ff fbfb 	bl	bab9c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bb3a6:	b178      	cbz	r0, bb3c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bb3a8:	4629      	mov	r1, r5
   bb3aa:	4630      	mov	r0, r6
   bb3ac:	f7ff ff8c 	bl	bb2c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bb3b0:	4630      	mov	r0, r6
   bb3b2:	f7f9 fa93 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bb3b6:	2110      	movs	r1, #16
   bb3b8:	4630      	mov	r0, r6
   bb3ba:	f7f8 fe70 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bb3be:	4668      	mov	r0, sp
   bb3c0:	f7ff fef3 	bl	bb1aa <_ZN8particle5ErrorD1Ev>
    }
   bb3c4:	b009      	add	sp, #36	; 0x24
   bb3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb3c8:	4631      	mov	r1, r6
   bb3ca:	a802      	add	r0, sp, #8
   bb3cc:	f7ff ffb0 	bl	bb330 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bb3d0:	68e0      	ldr	r0, [r4, #12]
   bb3d2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb3d6:	b108      	cbz	r0, bb3dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bb3d8:	f003 fcd8 	bl	bed8c <strdup>
        type_(type) {
   bb3dc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bb3de:	2010      	movs	r0, #16
   bb3e0:	f8ad 501c 	strh.w	r5, [sp, #28]
   bb3e4:	f7f8 fe57 	bl	b4096 <_Znwj>
   bb3e8:	4605      	mov	r5, r0
   bb3ea:	b1e8      	cbz	r0, bb428 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bb3ec:	2700      	movs	r7, #0
   bb3ee:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb3f0:	2018      	movs	r0, #24
   bb3f2:	f7f8 fe50 	bl	b4096 <_Znwj>
   bb3f6:	4604      	mov	r4, r0
   bb3f8:	b188      	cbz	r0, bb41e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bb3fa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bb3fc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bb3fe:	a802      	add	r0, sp, #8
   bb400:	f7fb fe01 	bl	b7006 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb404:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bb406:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb408:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb40a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb40c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb40e:	a906      	add	r1, sp, #24
   bb410:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb412:	60e3      	str	r3, [r4, #12]
   bb414:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bb418:	9205      	str	r2, [sp, #20]
   bb41a:	f7ff feb9 	bl	bb190 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bb41e:	4b08      	ldr	r3, [pc, #32]	; (bb440 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bb420:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb422:	4b08      	ldr	r3, [pc, #32]	; (bb444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb424:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb426:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bb428:	a806      	add	r0, sp, #24
   bb42a:	f7ff febe 	bl	bb1aa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bb42e:	a802      	add	r0, sp, #8
   bb430:	f7f9 fa54 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bb434:	2200      	movs	r2, #0
   bb436:	4629      	mov	r1, r5
   bb438:	4803      	ldr	r0, [pc, #12]	; (bb448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bb43a:	f7ff fbb7 	bl	babac <application_thread_invoke>
   bb43e:	e7b7      	b.n	bb3b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bb440:	000bb2db 	.word	0x000bb2db
   bb444:	000bb55d 	.word	0x000bb55d
   bb448:	000baeb7 	.word	0x000baeb7

000bb44c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bb44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb450:	b08b      	sub	sp, #44	; 0x2c
   bb452:	4605      	mov	r5, r0
   bb454:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bb458:	460f      	mov	r7, r1
   bb45a:	4690      	mov	r8, r2
   bb45c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb45e:	f7ff fc0f 	bl	bac80 <spark_cloud_flag_connected>
   bb462:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bb464:	4683      	mov	fp, r0
   bb466:	bb38      	cbnz	r0, bb4b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bb468:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bb46c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb46e:	a905      	add	r1, sp, #20
   bb470:	4630      	mov	r0, r6
   bb472:	f8ad 3018 	strh.w	r3, [sp, #24]
   bb476:	f7ff fe8b 	bl	bb190 <_ZN8particle5ErrorC1EOS0_>
   bb47a:	2014      	movs	r0, #20
   bb47c:	f7f8 fe0b 	bl	b4096 <_Znwj>
   bb480:	4604      	mov	r4, r0
   bb482:	b148      	cbz	r0, bb498 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bb484:	2302      	movs	r3, #2
   bb486:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb488:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bb48a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb48e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bb490:	4631      	mov	r1, r6
   bb492:	300c      	adds	r0, #12
   bb494:	f7ff fe7c 	bl	bb190 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb498:	4628      	mov	r0, r5
	: __shared_count(__p)
   bb49a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb49c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bb4a0:	f7ff ff32 	bl	bb308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb4a4:	4630      	mov	r0, r6
   bb4a6:	f7ff fe80 	bl	bb1aa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bb4aa:	a805      	add	r0, sp, #20
   bb4ac:	f7ff fe7d 	bl	bb1aa <_ZN8particle5ErrorD1Ev>
}
   bb4b0:	4628      	mov	r0, r5
   bb4b2:	b00b      	add	sp, #44	; 0x2c
   bb4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bb4b8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bb4ba:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bb4bc:	2014      	movs	r0, #20
   bb4be:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bb4c2:	9307      	str	r3, [sp, #28]
   bb4c4:	f7f8 fde7 	bl	b4096 <_Znwj>
   bb4c8:	4601      	mov	r1, r0
   bb4ca:	b118      	cbz	r0, bb4d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bb4cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb4d0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb4d2:	7044      	strb	r4, [r0, #1]
   bb4d4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb4d6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bb4d8:	f7ff ff16 	bl	bb308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bb4dc:	4b1e      	ldr	r3, [pc, #120]	; (bb558 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bb4de:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bb4e0:	2008      	movs	r0, #8
   bb4e2:	f7f8 fdd8 	bl	b4096 <_Znwj>
   bb4e6:	4604      	mov	r4, r0
   bb4e8:	b110      	cbz	r0, bb4f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bb4ea:	a903      	add	r1, sp, #12
   bb4ec:	f7ff fec8 	bl	bb280 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bb4f0:	9600      	str	r6, [sp, #0]
   bb4f2:	fa5f f38a 	uxtb.w	r3, sl
   bb4f6:	464a      	mov	r2, r9
   bb4f8:	4641      	mov	r1, r8
   bb4fa:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bb4fc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bb4fe:	f7ff fbc7 	bl	bac90 <spark_send_event>
   bb502:	b9b8      	cbnz	r0, bb534 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bb504:	9b03      	ldr	r3, [sp, #12]
   bb506:	785b      	ldrb	r3, [r3, #1]
   bb508:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bb50c:	b993      	cbnz	r3, bb534 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bb50e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bb512:	a905      	add	r1, sp, #20
   bb514:	a803      	add	r0, sp, #12
   bb516:	9205      	str	r2, [sp, #20]
   bb518:	f8ad 3018 	strh.w	r3, [sp, #24]
   bb51c:	f7ff ff18 	bl	bb350 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bb520:	a805      	add	r0, sp, #20
   bb522:	f7ff fe42 	bl	bb1aa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bb526:	a805      	add	r0, sp, #20
   bb528:	9909      	ldr	r1, [sp, #36]	; 0x24
   bb52a:	f7ff feb2 	bl	bb292 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bb52e:	a806      	add	r0, sp, #24
   bb530:	f7fa fb24 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb534:	a903      	add	r1, sp, #12
   bb536:	a805      	add	r0, sp, #20
   bb538:	f7ff fea2 	bl	bb280 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb53c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bb53e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb540:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bb542:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bb544:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bb546:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bb548:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bb54a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bb54c:	f7fa fb16 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb550:	a804      	add	r0, sp, #16
   bb552:	f7fa fb13 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bb556:	e7ab      	b.n	bb4b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bb558:	000bb5d9 	.word	0x000bb5d9

000bb55c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bb55c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bb55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb560:	4605      	mov	r5, r0
	switch (__op)
   bb562:	d103      	bne.n	bb56c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bb564:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bb566:	6003      	str	r3, [r0, #0]
      }
   bb568:	2000      	movs	r0, #0
   bb56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bb56c:	2a02      	cmp	r2, #2
   bb56e:	d010      	beq.n	bb592 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bb570:	2a03      	cmp	r2, #3
   bb572:	d1f9      	bne.n	bb568 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bb574:	6804      	ldr	r4, [r0, #0]
   bb576:	2c00      	cmp	r4, #0
   bb578:	d0f6      	beq.n	bb568 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bb57a:	f104 0010 	add.w	r0, r4, #16
   bb57e:	f7ff fe14 	bl	bb1aa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bb582:	4620      	mov	r0, r4
   bb584:	f7f9 f9aa 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bb588:	2118      	movs	r1, #24
   bb58a:	4620      	mov	r0, r4
   bb58c:	f7f8 fd87 	bl	b409e <_ZdlPvj>
   bb590:	e7ea      	b.n	bb568 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bb592:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bb594:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bb596:	f7f8 fd7e 	bl	b4096 <_Znwj>
   bb59a:	4604      	mov	r4, r0
   bb59c:	b150      	cbz	r0, bb5b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bb59e:	4631      	mov	r1, r6
   bb5a0:	f7ff fec6 	bl	bb330 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bb5a4:	6930      	ldr	r0, [r6, #16]
   bb5a6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb5aa:	b108      	cbz	r0, bb5b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bb5ac:	f003 fbee 	bl	bed8c <strdup>
        type_(type) {
   bb5b0:	6120      	str	r0, [r4, #16]
   bb5b2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bb5b4:	602c      	str	r4, [r5, #0]
	}
   bb5b6:	e7d7      	b.n	bb568 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bb5b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bb5b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb5ba:	2300      	movs	r3, #0
   bb5bc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bb5be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bb5c0:	4604      	mov	r4, r0
   bb5c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bb5c4:	b12b      	cbz	r3, bb5d2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb5c6:	2202      	movs	r2, #2
   bb5c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb5ca:	68eb      	ldr	r3, [r5, #12]
   bb5cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bb5ce:	68ab      	ldr	r3, [r5, #8]
   bb5d0:	60a3      	str	r3, [r4, #8]
    }
   bb5d2:	4620      	mov	r0, r4
   bb5d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bb5d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bb5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb5da:	b089      	sub	sp, #36	; 0x24
   bb5dc:	4604      	mov	r4, r0
   bb5de:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bb5e0:	a801      	add	r0, sp, #4
   bb5e2:	4611      	mov	r1, r2
   bb5e4:	f7ff fe55 	bl	bb292 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bb5e8:	b1a4      	cbz	r4, bb614 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bb5ea:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb5ec:	b11d      	cbz	r5, bb5f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bb5ee:	4628      	mov	r0, r5
   bb5f0:	f003 fbcc 	bl	bed8c <strdup>
   bb5f4:	4605      	mov	r5, r0
   bb5f6:	a801      	add	r0, sp, #4
   bb5f8:	a903      	add	r1, sp, #12
        type_(type) {
   bb5fa:	9503      	str	r5, [sp, #12]
   bb5fc:	f8ad 4010 	strh.w	r4, [sp, #16]
   bb600:	f7ff fea6 	bl	bb350 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bb604:	a803      	add	r0, sp, #12
   bb606:	f7ff fdd0 	bl	bb1aa <_ZN8particle5ErrorD1Ev>
   bb60a:	a802      	add	r0, sp, #8
   bb60c:	f7fa fab6 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb610:	b009      	add	sp, #36	; 0x24
   bb612:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bb614:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bb616:	2301      	movs	r3, #1
   bb618:	e8d5 2f4f 	ldrexb	r2, [r5]
   bb61c:	2a00      	cmp	r2, #0
   bb61e:	d103      	bne.n	bb628 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bb620:	e8c5 3f41 	strexb	r1, r3, [r5]
   bb624:	2900      	cmp	r1, #0
   bb626:	d1f7      	bne.n	bb618 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bb628:	d1ef      	bne.n	bb60a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bb62a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bb62c:	f3bf 8f5b 	dmb	ish
   bb630:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bb632:	1d2b      	adds	r3, r5, #4
   bb634:	f3bf 8f5b 	dmb	ish
   bb638:	e853 6f00 	ldrex	r6, [r3]
   bb63c:	e843 4200 	strex	r2, r4, [r3]
   bb640:	2a00      	cmp	r2, #0
   bb642:	d1f9      	bne.n	bb638 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bb644:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bb648:	2e00      	cmp	r6, #0
   bb64a:	d0de      	beq.n	bb60a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bb64c:	4620      	mov	r0, r4
   bb64e:	f7ff faa5 	bl	bab9c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bb652:	4607      	mov	r7, r0
   bb654:	b160      	cbz	r0, bb670 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bb656:	f105 010c 	add.w	r1, r5, #12
   bb65a:	4630      	mov	r0, r6
   bb65c:	f7ff fe44 	bl	bb2e8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bb660:	4630      	mov	r0, r6
   bb662:	f7f9 f93b 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bb666:	2110      	movs	r1, #16
   bb668:	4630      	mov	r0, r6
   bb66a:	f7f8 fd18 	bl	b409e <_ZdlPvj>
   bb66e:	e7cc      	b.n	bb60a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb670:	4631      	mov	r1, r6
   bb672:	a803      	add	r0, sp, #12
   bb674:	f7ff ffa0 	bl	bb5b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb678:	7b2b      	ldrb	r3, [r5, #12]
   bb67a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bb67e:	2010      	movs	r0, #16
   bb680:	f7f8 fd09 	bl	b4096 <_Znwj>
   bb684:	4605      	mov	r5, r0
   bb686:	b1d0      	cbz	r0, bb6be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bb688:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb68a:	2014      	movs	r0, #20
   bb68c:	f7f8 fd03 	bl	b4096 <_Znwj>
   bb690:	4604      	mov	r4, r0
   bb692:	b178      	cbz	r0, bb6b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bb694:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bb696:	4601      	mov	r1, r0
   bb698:	a803      	add	r0, sp, #12
   bb69a:	f7fb fcb4 	bl	b7006 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb69e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb6a0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb6a2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb6a4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bb6a6:	9205      	str	r2, [sp, #20]
   bb6a8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb6aa:	60e3      	str	r3, [r4, #12]
   bb6ac:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bb6b0:	9206      	str	r2, [sp, #24]
   bb6b2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bb6b4:	4b06      	ldr	r3, [pc, #24]	; (bb6d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bb6b6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb6b8:	4b06      	ldr	r3, [pc, #24]	; (bb6d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb6ba:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb6bc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bb6be:	a803      	add	r0, sp, #12
   bb6c0:	f7f9 f90c 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bb6c4:	2200      	movs	r2, #0
   bb6c6:	4629      	mov	r1, r5
   bb6c8:	4803      	ldr	r0, [pc, #12]	; (bb6d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bb6ca:	f7ff fa6f 	bl	babac <application_thread_invoke>
   bb6ce:	e7c7      	b.n	bb660 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bb6d0:	000bb2fb 	.word	0x000bb2fb
   bb6d4:	000bb6dd 	.word	0x000bb6dd
   bb6d8:	000baeb7 	.word	0x000baeb7

000bb6dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bb6dc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bb6de:	b570      	push	{r4, r5, r6, lr}
   bb6e0:	4604      	mov	r4, r0
	switch (__op)
   bb6e2:	d103      	bne.n	bb6ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bb6e4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bb6e6:	6003      	str	r3, [r0, #0]
      }
   bb6e8:	2000      	movs	r0, #0
   bb6ea:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bb6ec:	2a02      	cmp	r2, #2
   bb6ee:	d00c      	beq.n	bb70a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bb6f0:	2a03      	cmp	r2, #3
   bb6f2:	d1f9      	bne.n	bb6e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bb6f4:	6804      	ldr	r4, [r0, #0]
   bb6f6:	2c00      	cmp	r4, #0
   bb6f8:	d0f6      	beq.n	bb6e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bb6fa:	4620      	mov	r0, r4
   bb6fc:	f7f9 f8ee 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bb700:	2114      	movs	r1, #20
   bb702:	4620      	mov	r0, r4
   bb704:	f7f8 fccb 	bl	b409e <_ZdlPvj>
   bb708:	e7ee      	b.n	bb6e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bb70a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bb70c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bb70e:	f7f8 fcc2 	bl	b4096 <_Znwj>
   bb712:	4605      	mov	r5, r0
   bb714:	b120      	cbz	r0, bb720 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bb716:	4631      	mov	r1, r6
   bb718:	f7ff ff4e 	bl	bb5b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bb71c:	7c33      	ldrb	r3, [r6, #16]
   bb71e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bb720:	6025      	str	r5, [r4, #0]
	}
   bb722:	e7e1      	b.n	bb6e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bb724 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb724:	2200      	movs	r2, #0
   bb726:	6840      	ldr	r0, [r0, #4]
   bb728:	4611      	mov	r1, r2
   bb72a:	f7ff bb19 	b.w	bad60 <network_listening>

000bb72e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb72e:	2200      	movs	r2, #0
   bb730:	6840      	ldr	r0, [r0, #4]
   bb732:	4611      	mov	r1, r2
   bb734:	f7ff bb24 	b.w	bad80 <network_get_listen_timeout>

000bb738 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb738:	6840      	ldr	r0, [r0, #4]
   bb73a:	2200      	movs	r2, #0
   bb73c:	f7ff bb18 	b.w	bad70 <network_set_listen_timeout>

000bb740 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb740:	6840      	ldr	r0, [r0, #4]
   bb742:	2200      	movs	r2, #0
   bb744:	f081 0101 	eor.w	r1, r1, #1
   bb748:	f7ff bb02 	b.w	bad50 <network_listen>

000bb74c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb74c:	2300      	movs	r3, #0
   bb74e:	6840      	ldr	r0, [r0, #4]
   bb750:	461a      	mov	r2, r3
   bb752:	4619      	mov	r1, r3
   bb754:	f7ff baf4 	b.w	bad40 <network_off>

000bb758 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb758:	2300      	movs	r3, #0
   bb75a:	6840      	ldr	r0, [r0, #4]
   bb75c:	461a      	mov	r2, r3
   bb75e:	4619      	mov	r1, r3
   bb760:	f7ff bae6 	b.w	bad30 <network_on>

000bb764 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bb764:	2200      	movs	r2, #0
   bb766:	6840      	ldr	r0, [r0, #4]
   bb768:	4611      	mov	r1, r2
   bb76a:	f7ff bad9 	b.w	bad20 <network_ready>

000bb76e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb76e:	2200      	movs	r2, #0
   bb770:	6840      	ldr	r0, [r0, #4]
   bb772:	4611      	mov	r1, r2
   bb774:	f7ff bac4 	b.w	bad00 <network_connecting>

000bb778 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb778:	6840      	ldr	r0, [r0, #4]
   bb77a:	2200      	movs	r2, #0
   bb77c:	2102      	movs	r1, #2
   bb77e:	f7ff bac7 	b.w	bad10 <network_disconnect>

000bb782 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb782:	2300      	movs	r3, #0
   bb784:	6840      	ldr	r0, [r0, #4]
   bb786:	461a      	mov	r2, r3
   bb788:	f7ff bab2 	b.w	bacf0 <network_connect>

000bb78c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bb78c:	4b02      	ldr	r3, [pc, #8]	; (bb798 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bb78e:	2203      	movs	r2, #3
   bb790:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bb792:	4a02      	ldr	r2, [pc, #8]	; (bb79c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bb794:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bb796:	4770      	bx	lr
   bb798:	2003e5b4 	.word	0x2003e5b4
   bb79c:	000c0614 	.word	0x000c0614

000bb7a0 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bb7a0:	6800      	ldr	r0, [r0, #0]
   bb7a2:	f000 b8e7 	b.w	bb974 <_ZN7TwoWire4lockEv>

000bb7a6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bb7a6:	b510      	push	{r4, lr}
   bb7a8:	4604      	mov	r4, r0
      lock_(_lock) {
   bb7aa:	6001      	str	r1, [r0, #0]
   bb7ac:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bb7ae:	b10a      	cbz	r2, bb7b4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bb7b0:	f7ff fff6 	bl	bb7a0 <_ZN9FuelGauge4lockEv>
}
   bb7b4:	4620      	mov	r0, r4
   bb7b6:	bd10      	pop	{r4, pc}

000bb7b8 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bb7b8:	b513      	push	{r0, r1, r4, lr}
   bb7ba:	4604      	mov	r4, r0
   bb7bc:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bb7be:	f002 fca7 	bl	be110 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bb7c2:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bb7c4:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bb7c6:	4620      	mov	r0, r4
   bb7c8:	f7ff ffed 	bl	bb7a6 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bb7cc:	4620      	mov	r0, r4
   bb7ce:	b002      	add	sp, #8
   bb7d0:	bd10      	pop	{r4, pc}

000bb7d2 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bb7d2:	6800      	ldr	r0, [r0, #0]
   bb7d4:	f000 b8d7 	b.w	bb986 <_ZN7TwoWire6unlockEv>

000bb7d8 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bb7d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bb7dc:	4604      	mov	r4, r0
   bb7de:	461d      	mov	r5, r3
   bb7e0:	460f      	mov	r7, r1
   bb7e2:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bb7e4:	f7ff ffdc 	bl	bb7a0 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bb7e8:	2236      	movs	r2, #54	; 0x36
   bb7ea:	2300      	movs	r3, #0
   bb7ec:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bb7f0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bb7f2:	f04f 0801 	mov.w	r8, #1
   bb7f6:	230a      	movs	r3, #10
   bb7f8:	4669      	mov	r1, sp
   bb7fa:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bb7fe:	f000 f89d 	bl	bb93c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bb802:	6820      	ldr	r0, [r4, #0]
   bb804:	6803      	ldr	r3, [r0, #0]
   bb806:	4639      	mov	r1, r7
   bb808:	689b      	ldr	r3, [r3, #8]
   bb80a:	4798      	blx	r3
    i2c_.write(MSB);
   bb80c:	6820      	ldr	r0, [r4, #0]
   bb80e:	6803      	ldr	r3, [r0, #0]
   bb810:	4631      	mov	r1, r6
   bb812:	689b      	ldr	r3, [r3, #8]
   bb814:	4798      	blx	r3
    i2c_.write(LSB);
   bb816:	6820      	ldr	r0, [r4, #0]
   bb818:	6803      	ldr	r3, [r0, #0]
   bb81a:	4629      	mov	r1, r5
   bb81c:	689b      	ldr	r3, [r3, #8]
   bb81e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bb820:	4641      	mov	r1, r8
   bb822:	6820      	ldr	r0, [r4, #0]
   bb824:	f000 f8a2 	bl	bb96c <_ZN7TwoWire15endTransmissionEh>
   bb828:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bb82a:	4620      	mov	r0, r4
   bb82c:	bf0c      	ite	eq
   bb82e:	2500      	moveq	r5, #0
   bb830:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bb834:	f7ff ffcd 	bl	bb7d2 <_ZN9FuelGauge6unlockEv>
}
   bb838:	4628      	mov	r0, r5
   bb83a:	b004      	add	sp, #16
   bb83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb840 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bb840:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bb842:	2240      	movs	r2, #64	; 0x40
   bb844:	2300      	movs	r3, #0
   bb846:	2106      	movs	r1, #6
   bb848:	f7ff ffc6 	bl	bb7d8 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bb84c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bb850:	bd08      	pop	{r3, pc}

000bb852 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bb852:	4770      	bx	lr

000bb854 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bb854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb856:	4606      	mov	r6, r0
   bb858:	4615      	mov	r5, r2
   bb85a:	460c      	mov	r4, r1
   bb85c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bb85e:	42bc      	cmp	r4, r7
   bb860:	d006      	beq.n	bb870 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bb862:	6833      	ldr	r3, [r6, #0]
   bb864:	f814 1b01 	ldrb.w	r1, [r4], #1
   bb868:	689b      	ldr	r3, [r3, #8]
   bb86a:	4630      	mov	r0, r6
   bb86c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bb86e:	e7f6      	b.n	bb85e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bb870:	4628      	mov	r0, r5
   bb872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb874 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bb874:	7c00      	ldrb	r0, [r0, #16]
   bb876:	2200      	movs	r2, #0
   bb878:	f7fe bf8e 	b.w	ba798 <hal_i2c_write>

000bb87c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bb87c:	7c00      	ldrb	r0, [r0, #16]
   bb87e:	2100      	movs	r1, #0
   bb880:	f7fe bf92 	b.w	ba7a8 <hal_i2c_available>

000bb884 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bb884:	7c00      	ldrb	r0, [r0, #16]
   bb886:	2100      	movs	r1, #0
   bb888:	f7fe bf96 	b.w	ba7b8 <hal_i2c_read>

000bb88c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bb88c:	7c00      	ldrb	r0, [r0, #16]
   bb88e:	2100      	movs	r1, #0
   bb890:	f7fe bf9a 	b.w	ba7c8 <hal_i2c_peek>

000bb894 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bb894:	7c00      	ldrb	r0, [r0, #16]
   bb896:	2100      	movs	r1, #0
   bb898:	f7fe bf9e 	b.w	ba7d8 <hal_i2c_flush>

000bb89c <_ZN7TwoWireD0Ev>:
   bb89c:	b510      	push	{r4, lr}
   bb89e:	2114      	movs	r1, #20
   bb8a0:	4604      	mov	r4, r0
   bb8a2:	f7f8 fbfc 	bl	b409e <_ZdlPvj>
   bb8a6:	4620      	mov	r0, r4
   bb8a8:	bd10      	pop	{r4, pc}
	...

000bb8ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb8ac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bb8ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb8b2:	4604      	mov	r4, r0
   bb8b4:	4608      	mov	r0, r1
   bb8b6:	2100      	movs	r1, #0
   bb8b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb8bc:	4b03      	ldr	r3, [pc, #12]	; (bb8cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bb8be:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bb8c0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bb8c2:	4611      	mov	r1, r2
   bb8c4:	f7fe ff98 	bl	ba7f8 <hal_i2c_init>
}
   bb8c8:	4620      	mov	r0, r4
   bb8ca:	bd10      	pop	{r4, pc}
   bb8cc:	000c0650 	.word	0x000c0650

000bb8d0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bb8d0:	2300      	movs	r3, #0
   bb8d2:	7c00      	ldrb	r0, [r0, #16]
   bb8d4:	461a      	mov	r2, r3
   bb8d6:	4619      	mov	r1, r3
   bb8d8:	f7fe bf46 	b.w	ba768 <hal_i2c_begin>

000bb8dc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bb8dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb8de:	2200      	movs	r2, #0
   bb8e0:	2314      	movs	r3, #20
   bb8e2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bb8e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bb8ea:	780b      	ldrb	r3, [r1, #0]
   bb8ec:	f88d 3008 	strb.w	r3, [sp, #8]
   bb8f0:	684b      	ldr	r3, [r1, #4]
   bb8f2:	9303      	str	r3, [sp, #12]
   bb8f4:	68cb      	ldr	r3, [r1, #12]
   bb8f6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bb8f8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb8fa:	7a0b      	ldrb	r3, [r1, #8]
   bb8fc:	9305      	str	r3, [sp, #20]
   bb8fe:	a901      	add	r1, sp, #4
   bb900:	f7fe ff92 	bl	ba828 <hal_i2c_request_ex>
}
   bb904:	b007      	add	sp, #28
   bb906:	f85d fb04 	ldr.w	pc, [sp], #4

000bb90a <_ZN7TwoWire11requestFromEhjh>:
{
   bb90a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bb90c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bb90e:	f88d 1000 	strb.w	r1, [sp]
   bb912:	f04f 0164 	mov.w	r1, #100	; 0x64
   bb916:	9103      	str	r1, [sp, #12]
   bb918:	bf18      	it	ne
   bb91a:	2301      	movne	r3, #1
   bb91c:	4669      	mov	r1, sp
    size_ = size;
   bb91e:	9201      	str	r2, [sp, #4]
   bb920:	f88d 3008 	strb.w	r3, [sp, #8]
   bb924:	f7ff ffda 	bl	bb8dc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bb928:	b005      	add	sp, #20
   bb92a:	f85d fb04 	ldr.w	pc, [sp], #4

000bb92e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bb92e:	7c00      	ldrb	r0, [r0, #16]
   bb930:	2200      	movs	r2, #0
   bb932:	f7fe bf21 	b.w	ba778 <hal_i2c_begin_transmission>

000bb936 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bb936:	b2c9      	uxtb	r1, r1
   bb938:	f7ff bff9 	b.w	bb92e <_ZN7TwoWire17beginTransmissionEh>

000bb93c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bb93c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb93e:	2300      	movs	r3, #0
   bb940:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bb944:	684a      	ldr	r2, [r1, #4]
   bb946:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bb948:	2314      	movs	r3, #20
    };
   bb94a:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bb94c:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bb950:	780b      	ldrb	r3, [r1, #0]
    };
   bb952:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb954:	7a0a      	ldrb	r2, [r1, #8]
   bb956:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bb958:	7c00      	ldrb	r0, [r0, #16]
    };
   bb95a:	f88d 3008 	strb.w	r3, [sp, #8]
   bb95e:	aa01      	add	r2, sp, #4
   bb960:	4619      	mov	r1, r3
   bb962:	f7fe ff09 	bl	ba778 <hal_i2c_begin_transmission>
}
   bb966:	b007      	add	sp, #28
   bb968:	f85d fb04 	ldr.w	pc, [sp], #4

000bb96c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb96c:	7c00      	ldrb	r0, [r0, #16]
   bb96e:	2200      	movs	r2, #0
   bb970:	f7fe bf0a 	b.w	ba788 <hal_i2c_end_transmission>

000bb974 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bb974:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bb976:	2100      	movs	r1, #0
   bb978:	7c00      	ldrb	r0, [r0, #16]
   bb97a:	f7fe ff45 	bl	ba808 <hal_i2c_lock>
}
   bb97e:	fab0 f080 	clz	r0, r0
   bb982:	0940      	lsrs	r0, r0, #5
   bb984:	bd08      	pop	{r3, pc}

000bb986 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bb986:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bb988:	2100      	movs	r1, #0
   bb98a:	7c00      	ldrb	r0, [r0, #16]
   bb98c:	f7fe ff44 	bl	ba818 <hal_i2c_unlock>
}
   bb990:	fab0 f080 	clz	r0, r0
   bb994:	0940      	lsrs	r0, r0, #5
   bb996:	bd08      	pop	{r3, pc}

000bb998 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bb998:	4700      	bx	r0
	...

000bb99c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bb99c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bb9a0:	2400      	movs	r4, #0
{
   bb9a2:	461d      	mov	r5, r3
   bb9a4:	460f      	mov	r7, r1
   bb9a6:	4690      	mov	r8, r2
   bb9a8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bb9aa:	f7fe fecd 	bl	ba748 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bb9ae:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bb9b0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bb9b4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bb9b8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bb9bc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bb9c0:	bfa2      	ittt	ge
   bb9c2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bb9c6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bb9ca:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bb9cc:	4907      	ldr	r1, [pc, #28]	; (bb9ec <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bb9ce:	9400      	str	r4, [sp, #0]
   bb9d0:	4643      	mov	r3, r8
   bb9d2:	463a      	mov	r2, r7
   bb9d4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bb9d6:	bfa8      	it	ge
   bb9d8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bb9dc:	f7fe feac 	bl	ba738 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bb9e0:	fab0 f080 	clz	r0, r0
   bb9e4:	0940      	lsrs	r0, r0, #5
   bb9e6:	b004      	add	sp, #16
   bb9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb9ec:	000bb999 	.word	0x000bb999

000bb9f0 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bb9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb9f2:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bb9f4:	f7fe fea8 	bl	ba748 <HAL_Interrupts_Detach>
   bb9f8:	4605      	mov	r5, r0
   bb9fa:	b970      	cbnz	r0, bba1a <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bb9fc:	4f08      	ldr	r7, [pc, #32]	; (bba20 <_Z15detachInterruptt+0x30>)
   bb9fe:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bba02:	b146      	cbz	r6, bba16 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bba04:	4630      	mov	r0, r6
   bba06:	f7f8 ff69 	bl	b48dc <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bba0a:	2110      	movs	r1, #16
   bba0c:	4630      	mov	r0, r6
   bba0e:	f7f8 fb46 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bba12:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bba16:	2001      	movs	r0, #1
   bba18:	e000      	b.n	bba1c <_Z15detachInterruptt+0x2c>
        return false;
   bba1a:	2000      	movs	r0, #0
    }
    return true;
}
   bba1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bba1e:	bf00      	nop
   bba20:	2003e5bc 	.word	0x2003e5bc

000bba24 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bba24:	4770      	bx	lr

000bba26 <_ZN9IPAddressD0Ev>:
   bba26:	b510      	push	{r4, lr}
   bba28:	2118      	movs	r1, #24
   bba2a:	4604      	mov	r4, r0
   bba2c:	f7f8 fb37 	bl	b409e <_ZdlPvj>
   bba30:	4620      	mov	r0, r4
   bba32:	bd10      	pop	{r4, pc}

000bba34 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bba34:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bba36:	7d03      	ldrb	r3, [r0, #20]
   bba38:	2b06      	cmp	r3, #6
{
   bba3a:	b08d      	sub	sp, #52	; 0x34
   bba3c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bba3e:	f100 0704 	add.w	r7, r0, #4
   bba42:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bba46:	d012      	beq.n	bba6e <_ZNK9IPAddress7printToER5Print+0x3a>
   bba48:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bba4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bba50:	220a      	movs	r2, #10
   bba52:	4630      	mov	r0, r6
   bba54:	f001 fb0d 	bl	bd072 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bba58:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bba5a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bba5c:	d019      	beq.n	bba92 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bba5e:	2c00      	cmp	r4, #0
   bba60:	d0f4      	beq.n	bba4c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bba62:	212e      	movs	r1, #46	; 0x2e
   bba64:	4630      	mov	r0, r6
   bba66:	f001 faf5 	bl	bd054 <_ZN5Print5printEc>
   bba6a:	4404      	add	r4, r0
   bba6c:	e7ee      	b.n	bba4c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bba6e:	232f      	movs	r3, #47	; 0x2f
   bba70:	466a      	mov	r2, sp
   bba72:	4639      	mov	r1, r7
   bba74:	200a      	movs	r0, #10
		buf[0] = 0;
   bba76:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bba7a:	f7fe fedd 	bl	ba838 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bba7e:	4668      	mov	r0, sp
   bba80:	f003 f9a1 	bl	bedc6 <strlen>
   bba84:	6833      	ldr	r3, [r6, #0]
   bba86:	4602      	mov	r2, r0
   bba88:	68db      	ldr	r3, [r3, #12]
   bba8a:	4669      	mov	r1, sp
   bba8c:	4630      	mov	r0, r6
   bba8e:	4798      	blx	r3
   bba90:	4604      	mov	r4, r0
    }
    return n;
}
   bba92:	4620      	mov	r0, r4
   bba94:	b00d      	add	sp, #52	; 0x34
   bba96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bba98 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bba98:	b510      	push	{r4, lr}
   bba9a:	4b05      	ldr	r3, [pc, #20]	; (bbab0 <_ZN9IPAddressC1Ev+0x18>)
   bba9c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bba9e:	2211      	movs	r2, #17
   bbaa0:	f840 3b04 	str.w	r3, [r0], #4
   bbaa4:	2100      	movs	r1, #0
   bbaa6:	f003 f8d3 	bl	bec50 <memset>
}
   bbaaa:	4620      	mov	r0, r4
   bbaac:	bd10      	pop	{r4, pc}
   bbaae:	bf00      	nop
   bbab0:	000c0678 	.word	0x000c0678

000bbab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bbab4:	4603      	mov	r3, r0
   bbab6:	4a07      	ldr	r2, [pc, #28]	; (bbad4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bbab8:	b510      	push	{r4, lr}
   bbaba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bbabe:	f101 0210 	add.w	r2, r1, #16
   bbac2:	f851 4b04 	ldr.w	r4, [r1], #4
   bbac6:	f843 4b04 	str.w	r4, [r3], #4
   bbaca:	4291      	cmp	r1, r2
   bbacc:	d1f9      	bne.n	bbac2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bbace:	780a      	ldrb	r2, [r1, #0]
   bbad0:	701a      	strb	r2, [r3, #0]
}
   bbad2:	bd10      	pop	{r4, pc}
   bbad4:	000c0678 	.word	0x000c0678

000bbad8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bbad8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bbada:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bbade:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bbae2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bbae6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bbaea:	2304      	movs	r3, #4
   bbaec:	6041      	str	r1, [r0, #4]
   bbaee:	7503      	strb	r3, [r0, #20]
}
   bbaf0:	bd10      	pop	{r4, pc}
	...

000bbaf4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bbaf4:	b507      	push	{r0, r1, r2, lr}
   bbaf6:	4b06      	ldr	r3, [pc, #24]	; (bbb10 <_ZN9IPAddressC1EPKh+0x1c>)
   bbaf8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bbafa:	78cb      	ldrb	r3, [r1, #3]
   bbafc:	9300      	str	r3, [sp, #0]
   bbafe:	788b      	ldrb	r3, [r1, #2]
   bbb00:	784a      	ldrb	r2, [r1, #1]
   bbb02:	7809      	ldrb	r1, [r1, #0]
   bbb04:	f7ff ffe8 	bl	bbad8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bbb08:	b003      	add	sp, #12
   bbb0a:	f85d fb04 	ldr.w	pc, [sp], #4
   bbb0e:	bf00      	nop
   bbb10:	000c0678 	.word	0x000c0678

000bbb14 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bbb14:	f100 0310 	add.w	r3, r0, #16
   bbb18:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bbb1a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bbb1e:	2901      	cmp	r1, #1
   bbb20:	4618      	mov	r0, r3
   bbb22:	d108      	bne.n	bbb36 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bbb24:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bbb28:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bbb2c:	3a01      	subs	r2, #1
   bbb2e:	f103 0310 	add.w	r3, r3, #16
   bbb32:	d1f2      	bne.n	bbb1a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bbb34:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bbb36:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bbb38:	bf04      	itt	eq
   bbb3a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bbb3e:	1852      	addeq	r2, r2, r1
   bbb40:	e7f4      	b.n	bbb2c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bbb42 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bbb42:	b40e      	push	{r1, r2, r3}
   bbb44:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbb46:	b088      	sub	sp, #32
   bbb48:	af00      	add	r7, sp, #0
   bbb4a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbb4e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bbb50:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbb54:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bbb56:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbb58:	462b      	mov	r3, r5
   bbb5a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bbb5c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbb5e:	f7ff f957 	bl	bae10 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bbb62:	280f      	cmp	r0, #15
   bbb64:	687a      	ldr	r2, [r7, #4]
   bbb66:	d91a      	bls.n	bbb9e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bbb68:	f100 0308 	add.w	r3, r0, #8
   bbb6c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bbb70:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bbb72:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbb76:	1c41      	adds	r1, r0, #1
   bbb78:	462b      	mov	r3, r5
   bbb7a:	4668      	mov	r0, sp
        va_start(args, fmt);
   bbb7c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbb7e:	f7ff f947 	bl	bae10 <vsnprintf>
        if (n > 0) {
   bbb82:	1e02      	subs	r2, r0, #0
   bbb84:	dd04      	ble.n	bbb90 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bbb86:	6823      	ldr	r3, [r4, #0]
   bbb88:	4669      	mov	r1, sp
   bbb8a:	689b      	ldr	r3, [r3, #8]
   bbb8c:	4620      	mov	r0, r4
   bbb8e:	4798      	blx	r3
   bbb90:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bbb92:	3720      	adds	r7, #32
   bbb94:	46bd      	mov	sp, r7
   bbb96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bbb9a:	b003      	add	sp, #12
   bbb9c:	4770      	bx	lr
    } else if (n > 0) {
   bbb9e:	2800      	cmp	r0, #0
   bbba0:	d0f7      	beq.n	bbb92 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bbba2:	6823      	ldr	r3, [r4, #0]
   bbba4:	4602      	mov	r2, r0
   bbba6:	689b      	ldr	r3, [r3, #8]
   bbba8:	f107 0110 	add.w	r1, r7, #16
   bbbac:	4620      	mov	r0, r4
   bbbae:	4798      	blx	r3
}
   bbbb0:	e7ef      	b.n	bbb92 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bbbb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbbb2:	b538      	push	{r3, r4, r5, lr}
   bbbb4:	680b      	ldr	r3, [r1, #0]
   bbbb6:	6003      	str	r3, [r0, #0]
   bbbb8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bbbba:	6843      	ldr	r3, [r0, #4]
   bbbbc:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbbbe:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bbbc0:	d008      	beq.n	bbbd4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bbbc2:	b115      	cbz	r5, bbbca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bbbc4:	686b      	ldr	r3, [r5, #4]
   bbbc6:	3301      	adds	r3, #1
   bbbc8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bbbca:	6860      	ldr	r0, [r4, #4]
   bbbcc:	b108      	cbz	r0, bbbd2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bbbce:	f7ff f986 	bl	baede <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bbbd2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbbd4:	bd38      	pop	{r3, r4, r5, pc}

000bbbd6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bbbd6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bbbd8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bbbda:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bbbde:	689b      	ldr	r3, [r3, #8]
   bbbe0:	2201      	movs	r2, #1
   bbbe2:	f10d 0107 	add.w	r1, sp, #7
   bbbe6:	4798      	blx	r3
}
   bbbe8:	b003      	add	sp, #12
   bbbea:	f85d fb04 	ldr.w	pc, [sp], #4

000bbbee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bbbee:	460b      	mov	r3, r1
   bbbf0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bbbf2:	2200      	movs	r2, #0
   bbbf4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bbbf6:	e9c0 2200 	strd	r2, r2, [r0]
   bbbfa:	4604      	mov	r4, r0
        t_ = t;
   bbbfc:	6083      	str	r3, [r0, #8]
    if (t) {
   bbbfe:	b90b      	cbnz	r3, bbc04 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bbc00:	4620      	mov	r0, r4
   bbc02:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bbc04:	f7ff ffd5 	bl	bbbb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bbc08:	e7fa      	b.n	bbc00 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bbc0a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bbc0a:	6883      	ldr	r3, [r0, #8]
   bbc0c:	b1eb      	cbz	r3, bbc4a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bbc0e:	781a      	ldrb	r2, [r3, #0]
   bbc10:	2a03      	cmp	r2, #3
   bbc12:	d81a      	bhi.n	bbc4a <_ZNK5spark9JSONValue4typeEv+0x40>
   bbc14:	e8df f002 	tbb	[pc, r2]
   bbc18:	1b021704 	.word	0x1b021704
   bbc1c:	2005      	movs	r0, #5
   bbc1e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bbc20:	6802      	ldr	r2, [r0, #0]
   bbc22:	685b      	ldr	r3, [r3, #4]
   bbc24:	6852      	ldr	r2, [r2, #4]
   bbc26:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bbc28:	282d      	cmp	r0, #45	; 0x2d
   bbc2a:	d012      	beq.n	bbc52 <_ZNK5spark9JSONValue4typeEv+0x48>
   bbc2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bbc30:	2b09      	cmp	r3, #9
   bbc32:	d90e      	bls.n	bbc52 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bbc34:	2874      	cmp	r0, #116	; 0x74
   bbc36:	d00e      	beq.n	bbc56 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bbc38:	2866      	cmp	r0, #102	; 0x66
   bbc3a:	d00c      	beq.n	bbc56 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bbc3c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bbc40:	4258      	negs	r0, r3
   bbc42:	4158      	adcs	r0, r3
   bbc44:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bbc46:	2006      	movs	r0, #6
   bbc48:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bbc4a:	2000      	movs	r0, #0
   bbc4c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bbc4e:	2004      	movs	r0, #4
   bbc50:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bbc52:	2003      	movs	r0, #3
   bbc54:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bbc56:	2002      	movs	r0, #2
}
   bbc58:	4770      	bx	lr

000bbc5a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bbc5a:	b510      	push	{r4, lr}
   bbc5c:	4604      	mov	r4, r0
    switch (type()) {
   bbc5e:	f7ff ffd4 	bl	bbc0a <_ZNK5spark9JSONValue4typeEv>
   bbc62:	2802      	cmp	r0, #2
   bbc64:	d00e      	beq.n	bbc84 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bbc66:	1ec3      	subs	r3, r0, #3
   bbc68:	b2db      	uxtb	r3, r3
   bbc6a:	2b01      	cmp	r3, #1
   bbc6c:	d814      	bhi.n	bbc98 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bbc6e:	6822      	ldr	r2, [r4, #0]
   bbc70:	68a3      	ldr	r3, [r4, #8]
   bbc72:	6850      	ldr	r0, [r2, #4]
   bbc74:	685b      	ldr	r3, [r3, #4]
}
   bbc76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bbc7a:	220a      	movs	r2, #10
   bbc7c:	2100      	movs	r1, #0
   bbc7e:	4418      	add	r0, r3
   bbc80:	f003 b992 	b.w	befa8 <strtol>
        const char* const s = d_->json + t_->start;
   bbc84:	6822      	ldr	r2, [r4, #0]
   bbc86:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bbc88:	6852      	ldr	r2, [r2, #4]
   bbc8a:	685b      	ldr	r3, [r3, #4]
   bbc8c:	5cd0      	ldrb	r0, [r2, r3]
   bbc8e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bbc92:	4258      	negs	r0, r3
   bbc94:	4158      	adcs	r0, r3
}
   bbc96:	bd10      	pop	{r4, pc}
    switch (type()) {
   bbc98:	2000      	movs	r0, #0
   bbc9a:	e7fc      	b.n	bbc96 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bbc9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bbc9c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bbc9e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bbca0:	e9c0 3300 	strd	r3, r3, [r0]
   bbca4:	4604      	mov	r4, r0
        n_(0) {
   bbca6:	480e      	ldr	r0, [pc, #56]	; (bbce0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bbca8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bbcac:	b1a9      	cbz	r1, bbcda <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bbcae:	780b      	ldrb	r3, [r1, #0]
   bbcb0:	2b03      	cmp	r3, #3
   bbcb2:	d006      	beq.n	bbcc2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bbcb4:	b98b      	cbnz	r3, bbcda <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bbcb6:	6813      	ldr	r3, [r2, #0]
   bbcb8:	6858      	ldr	r0, [r3, #4]
   bbcba:	684b      	ldr	r3, [r1, #4]
   bbcbc:	5cc3      	ldrb	r3, [r0, r3]
   bbcbe:	2b6e      	cmp	r3, #110	; 0x6e
   bbcc0:	d007      	beq.n	bbcd2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bbcc2:	6813      	ldr	r3, [r2, #0]
   bbcc4:	684d      	ldr	r5, [r1, #4]
   bbcc6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bbcc8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bbcca:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bbccc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bbcce:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bbcd0:	60e3      	str	r3, [r4, #12]
   bbcd2:	4611      	mov	r1, r2
   bbcd4:	4620      	mov	r0, r4
   bbcd6:	f7ff ff6c 	bl	bbbb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bbcda:	4620      	mov	r0, r4
   bbcdc:	bd38      	pop	{r3, r4, r5, pc}
   bbcde:	bf00      	nop
   bbce0:	000c06e1 	.word	0x000c06e1

000bbce4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bbce4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bbce6:	2500      	movs	r5, #0
   bbce8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bbcea:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bbcee:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bbcf2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bbcf6:	4604      	mov	r4, r0
   bbcf8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bbcfa:	b14b      	cbz	r3, bbd10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bbcfc:	781a      	ldrb	r2, [r3, #0]
   bbcfe:	2a01      	cmp	r2, #1
   bbd00:	d106      	bne.n	bbd10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bbd02:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bbd06:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bbd08:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bbd0a:	6143      	str	r3, [r0, #20]
   bbd0c:	f7ff ff51 	bl	bbbb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bbd10:	4620      	mov	r0, r4
   bbd12:	bd38      	pop	{r3, r4, r5, pc}

000bbd14 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bbd14:	b510      	push	{r4, lr}
    if (!n_) {
   bbd16:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bbd18:	4604      	mov	r4, r0
    if (!n_) {
   bbd1a:	b163      	cbz	r3, bbd36 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bbd1c:	6880      	ldr	r0, [r0, #8]
   bbd1e:	60e0      	str	r0, [r4, #12]
    --n_;
   bbd20:	3b01      	subs	r3, #1
    ++t_;
   bbd22:	3010      	adds	r0, #16
   bbd24:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bbd26:	6120      	str	r0, [r4, #16]
    --n_;
   bbd28:	6163      	str	r3, [r4, #20]
    if (n_) {
   bbd2a:	b113      	cbz	r3, bbd32 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bbd2c:	f7ff fef2 	bl	bbb14 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bbd30:	60a0      	str	r0, [r4, #8]
    return true;
   bbd32:	2001      	movs	r0, #1
   bbd34:	e000      	b.n	bbd38 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bbd36:	4618      	mov	r0, r3
}
   bbd38:	bd10      	pop	{r4, pc}

000bbd3a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bbd3a:	b510      	push	{r4, lr}
    write('}');
   bbd3c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bbd3e:	4604      	mov	r4, r0
    write('}');
   bbd40:	f7ff ff49 	bl	bbbd6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bbd44:	2301      	movs	r3, #1
   bbd46:	7123      	strb	r3, [r4, #4]
}
   bbd48:	4620      	mov	r0, r4
   bbd4a:	bd10      	pop	{r4, pc}

000bbd4c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bbd4c:	b508      	push	{r3, lr}
    switch (state_) {
   bbd4e:	7903      	ldrb	r3, [r0, #4]
   bbd50:	2b01      	cmp	r3, #1
   bbd52:	d002      	beq.n	bbd5a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bbd54:	2b02      	cmp	r3, #2
   bbd56:	d004      	beq.n	bbd62 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bbd58:	bd08      	pop	{r3, pc}
        write(',');
   bbd5a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bbd5c:	f7ff ff3b 	bl	bbbd6 <_ZN5spark10JSONWriter5writeEc>
}
   bbd60:	e7fa      	b.n	bbd58 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bbd62:	213a      	movs	r1, #58	; 0x3a
   bbd64:	e7fa      	b.n	bbd5c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bbd66 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bbd66:	b510      	push	{r4, lr}
   bbd68:	4604      	mov	r4, r0
    writeSeparator();
   bbd6a:	f7ff ffef 	bl	bbd4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bbd6e:	4620      	mov	r0, r4
   bbd70:	217b      	movs	r1, #123	; 0x7b
   bbd72:	f7ff ff30 	bl	bbbd6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bbd76:	2300      	movs	r3, #0
   bbd78:	7123      	strb	r3, [r4, #4]
}
   bbd7a:	4620      	mov	r0, r4
   bbd7c:	bd10      	pop	{r4, pc}
	...

000bbd80 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bbd80:	b513      	push	{r0, r1, r4, lr}
   bbd82:	4604      	mov	r4, r0
   bbd84:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bbd86:	f7ff ffe1 	bl	bbd4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bbd8a:	6823      	ldr	r3, [r4, #0]
   bbd8c:	9a01      	ldr	r2, [sp, #4]
   bbd8e:	68db      	ldr	r3, [r3, #12]
   bbd90:	4903      	ldr	r1, [pc, #12]	; (bbda0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bbd92:	4620      	mov	r0, r4
   bbd94:	4798      	blx	r3
    state_ = NEXT;
   bbd96:	2301      	movs	r3, #1
}
   bbd98:	4620      	mov	r0, r4
    state_ = NEXT;
   bbd9a:	7123      	strb	r3, [r4, #4]
}
   bbd9c:	b002      	add	sp, #8
   bbd9e:	bd10      	pop	{r4, pc}
   bbda0:	000bfc2f 	.word	0x000bfc2f

000bbda4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bbda4:	b513      	push	{r0, r1, r4, lr}
   bbda6:	4604      	mov	r4, r0
   bbda8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bbdaa:	f7ff ffcf 	bl	bbd4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bbdae:	6823      	ldr	r3, [r4, #0]
   bbdb0:	9a01      	ldr	r2, [sp, #4]
   bbdb2:	68db      	ldr	r3, [r3, #12]
   bbdb4:	4903      	ldr	r1, [pc, #12]	; (bbdc4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bbdb6:	4620      	mov	r0, r4
   bbdb8:	4798      	blx	r3
    state_ = NEXT;
   bbdba:	2301      	movs	r3, #1
}
   bbdbc:	4620      	mov	r0, r4
    state_ = NEXT;
   bbdbe:	7123      	strb	r3, [r4, #4]
}
   bbdc0:	b002      	add	sp, #8
   bbdc2:	bd10      	pop	{r4, pc}
   bbdc4:	000bff52 	.word	0x000bff52

000bbdc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bbdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbdcc:	460d      	mov	r5, r1
    write('"');
   bbdce:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bbdd0:	4690      	mov	r8, r2
   bbdd2:	4604      	mov	r4, r0
    write('"');
   bbdd4:	f7ff feff 	bl	bbbd6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bbdd8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bbe80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bbddc:	44a8      	add	r8, r5
    const char *s = str;
   bbdde:	462f      	mov	r7, r5
    while (s != end) {
   bbde0:	4547      	cmp	r7, r8
   bbde2:	46ba      	mov	sl, r7
   bbde4:	d03d      	beq.n	bbe62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bbde6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bbdea:	2e22      	cmp	r6, #34	; 0x22
   bbdec:	d006      	beq.n	bbdfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bbdee:	2e5c      	cmp	r6, #92	; 0x5c
   bbdf0:	d004      	beq.n	bbdfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bbdf2:	4630      	mov	r0, r6
   bbdf4:	f002 fefc 	bl	bebf0 <isprint>
   bbdf8:	2800      	cmp	r0, #0
   bbdfa:	d1f1      	bne.n	bbde0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bbdfc:	6823      	ldr	r3, [r4, #0]
   bbdfe:	ebaa 0205 	sub.w	r2, sl, r5
   bbe02:	689b      	ldr	r3, [r3, #8]
   bbe04:	4629      	mov	r1, r5
   bbe06:	4620      	mov	r0, r4
   bbe08:	4798      	blx	r3
            write('\\');
   bbe0a:	215c      	movs	r1, #92	; 0x5c
   bbe0c:	4620      	mov	r0, r4
   bbe0e:	f7ff fee2 	bl	bbbd6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bbe12:	2e0d      	cmp	r6, #13
   bbe14:	d80a      	bhi.n	bbe2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bbe16:	2e07      	cmp	r6, #7
   bbe18:	d91c      	bls.n	bbe54 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bbe1a:	f1a6 0308 	sub.w	r3, r6, #8
   bbe1e:	2b05      	cmp	r3, #5
   bbe20:	d818      	bhi.n	bbe54 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bbe22:	e8df f003 	tbb	[pc, r3]
   bbe26:	0f0d      	.short	0x0f0d
   bbe28:	15131711 	.word	0x15131711
   bbe2c:	2e22      	cmp	r6, #34	; 0x22
   bbe2e:	d001      	beq.n	bbe34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bbe30:	2e5c      	cmp	r6, #92	; 0x5c
   bbe32:	d10f      	bne.n	bbe54 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bbe34:	4631      	mov	r1, r6
                write('b');
   bbe36:	4620      	mov	r0, r4
   bbe38:	f7ff fecd 	bl	bbbd6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bbe3c:	463d      	mov	r5, r7
    while (s != end) {
   bbe3e:	e7cf      	b.n	bbde0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bbe40:	2162      	movs	r1, #98	; 0x62
   bbe42:	e7f8      	b.n	bbe36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bbe44:	2174      	movs	r1, #116	; 0x74
   bbe46:	e7f6      	b.n	bbe36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bbe48:	216e      	movs	r1, #110	; 0x6e
   bbe4a:	e7f4      	b.n	bbe36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bbe4c:	2166      	movs	r1, #102	; 0x66
   bbe4e:	e7f2      	b.n	bbe36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bbe50:	2172      	movs	r1, #114	; 0x72
   bbe52:	e7f0      	b.n	bbe36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bbe54:	6823      	ldr	r3, [r4, #0]
   bbe56:	4632      	mov	r2, r6
   bbe58:	68db      	ldr	r3, [r3, #12]
   bbe5a:	4649      	mov	r1, r9
   bbe5c:	4620      	mov	r0, r4
   bbe5e:	4798      	blx	r3
                break;
   bbe60:	e7ec      	b.n	bbe3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bbe62:	42bd      	cmp	r5, r7
   bbe64:	d005      	beq.n	bbe72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bbe66:	6823      	ldr	r3, [r4, #0]
   bbe68:	1b7a      	subs	r2, r7, r5
   bbe6a:	689b      	ldr	r3, [r3, #8]
   bbe6c:	4629      	mov	r1, r5
   bbe6e:	4620      	mov	r0, r4
   bbe70:	4798      	blx	r3
    }
    write('"');
   bbe72:	2122      	movs	r1, #34	; 0x22
   bbe74:	4620      	mov	r0, r4
   bbe76:	f7ff feae 	bl	bbbd6 <_ZN5spark10JSONWriter5writeEc>
}
   bbe7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbe7e:	bf00      	nop
   bbe80:	000c0684 	.word	0x000c0684

000bbe84 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bbe84:	b513      	push	{r0, r1, r4, lr}
   bbe86:	4604      	mov	r4, r0
   bbe88:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbe8c:	f7ff ff5e 	bl	bbd4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bbe90:	4620      	mov	r0, r4
   bbe92:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbe96:	f7ff ff97 	bl	bbdc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bbe9a:	2302      	movs	r3, #2
}
   bbe9c:	4620      	mov	r0, r4
    state_ = VALUE;
   bbe9e:	7123      	strb	r3, [r4, #4]
}
   bbea0:	b002      	add	sp, #8
   bbea2:	bd10      	pop	{r4, pc}

000bbea4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bbea4:	b513      	push	{r0, r1, r4, lr}
   bbea6:	4604      	mov	r4, r0
   bbea8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbeac:	f7ff ff4e 	bl	bbd4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bbeb0:	4620      	mov	r0, r4
   bbeb2:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbeb6:	f7ff ff87 	bl	bbdc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bbeba:	2301      	movs	r3, #1
}
   bbebc:	4620      	mov	r0, r4
    state_ = NEXT;
   bbebe:	7123      	strb	r3, [r4, #4]
}
   bbec0:	b002      	add	sp, #8
   bbec2:	bd10      	pop	{r4, pc}

000bbec4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bbec4:	6880      	ldr	r0, [r0, #8]
   bbec6:	6803      	ldr	r3, [r0, #0]
   bbec8:	68db      	ldr	r3, [r3, #12]
   bbeca:	4718      	bx	r3

000bbecc <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bbecc:	4770      	bx	lr

000bbece <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bbece:	4608      	mov	r0, r1
   bbed0:	b111      	cbz	r1, bbed8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bbed2:	680b      	ldr	r3, [r1, #0]
   bbed4:	685b      	ldr	r3, [r3, #4]
   bbed6:	4718      	bx	r3
}
   bbed8:	4770      	bx	lr

000bbeda <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bbeda:	4770      	bx	lr

000bbedc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bbedc:	4770      	bx	lr

000bbede <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bbede:	4770      	bx	lr

000bbee0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bbee0:	4770      	bx	lr

000bbee2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bbee2:	b538      	push	{r3, r4, r5, lr}
   bbee4:	4604      	mov	r4, r0
   bbee6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bbee8:	6800      	ldr	r0, [r0, #0]
   bbeea:	212e      	movs	r1, #46	; 0x2e
   bbeec:	f002 ff31 	bl	bed52 <strchrnul>
    size = s - category;
   bbef0:	6823      	ldr	r3, [r4, #0]
   bbef2:	1ac3      	subs	r3, r0, r3
   bbef4:	602b      	str	r3, [r5, #0]
    if (size) {
   bbef6:	b123      	cbz	r3, bbf02 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bbef8:	7803      	ldrb	r3, [r0, #0]
   bbefa:	b103      	cbz	r3, bbefe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bbefc:	3001      	adds	r0, #1
   bbefe:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf00:	6020      	str	r0, [r4, #0]
}
   bbf02:	4618      	mov	r0, r3
   bbf04:	bd38      	pop	{r3, r4, r5, pc}

000bbf06 <_ZN5spark16JSONStreamWriterD0Ev>:
   bbf06:	b510      	push	{r4, lr}
   bbf08:	210c      	movs	r1, #12
   bbf0a:	4604      	mov	r4, r0
   bbf0c:	f7f8 f8c7 	bl	b409e <_ZdlPvj>
   bbf10:	4620      	mov	r0, r4
   bbf12:	bd10      	pop	{r4, pc}

000bbf14 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bbf14:	b510      	push	{r4, lr}
   bbf16:	2104      	movs	r1, #4
   bbf18:	4604      	mov	r4, r0
   bbf1a:	f7f8 f8c0 	bl	b409e <_ZdlPvj>
   bbf1e:	4620      	mov	r0, r4
   bbf20:	bd10      	pop	{r4, pc}

000bbf22 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bbf22:	b510      	push	{r4, lr}
   bbf24:	2104      	movs	r1, #4
   bbf26:	4604      	mov	r4, r0
   bbf28:	f7f8 f8b9 	bl	b409e <_ZdlPvj>
   bbf2c:	4620      	mov	r0, r4
   bbf2e:	bd10      	pop	{r4, pc}

000bbf30 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bbf30:	f7fe bb72 	b.w	ba618 <os_mutex_recursive_lock>

000bbf34 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bbf34:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bbf36:	f002 ff16 	bl	bed66 <strcmp>
}
   bbf3a:	fab0 f080 	clz	r0, r0
   bbf3e:	0940      	lsrs	r0, r0, #5
   bbf40:	bd08      	pop	{r3, pc}

000bbf42 <__tcf_1>:
   bbf42:	4770      	bx	lr

000bbf44 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bbf44:	b510      	push	{r4, lr}
   bbf46:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bbf48:	f001 ff24 	bl	bdd94 <_Z16_fetch_usbserialv>
   bbf4c:	4284      	cmp	r4, r0
   bbf4e:	d010      	beq.n	bbf72 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bbf50:	f002 f91e 	bl	be190 <_Z22__fetch_global_Serial1v>
   bbf54:	4284      	cmp	r4, r0
   bbf56:	d105      	bne.n	bbf64 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bbf58:	f002 f91a 	bl	be190 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bbf5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bbf60:	f001 beb1 	b.w	bdcc6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bbf64:	b12c      	cbz	r4, bbf72 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bbf66:	6823      	ldr	r3, [r4, #0]
   bbf68:	4620      	mov	r0, r4
   bbf6a:	685b      	ldr	r3, [r3, #4]
}
   bbf6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bbf70:	4718      	bx	r3
   bbf72:	bd10      	pop	{r4, pc}

000bbf74 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bbf74:	b513      	push	{r0, r1, r4, lr}
   bbf76:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bbf78:	4608      	mov	r0, r1
   bbf7a:	9101      	str	r1, [sp, #4]
   bbf7c:	f002 ff23 	bl	bedc6 <strlen>
   bbf80:	9901      	ldr	r1, [sp, #4]
   bbf82:	4602      	mov	r2, r0
   bbf84:	4620      	mov	r0, r4
}
   bbf86:	b002      	add	sp, #8
   bbf88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bbf8c:	f7ff bf8a 	b.w	bbea4 <_ZN5spark10JSONWriter5valueEPKcj>

000bbf90 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bbf90:	b513      	push	{r0, r1, r4, lr}
   bbf92:	4604      	mov	r4, r0
    write(str, strlen(str));
   bbf94:	4608      	mov	r0, r1
   bbf96:	9101      	str	r1, [sp, #4]
   bbf98:	f002 ff15 	bl	bedc6 <strlen>
   bbf9c:	6823      	ldr	r3, [r4, #0]
   bbf9e:	9901      	ldr	r1, [sp, #4]
   bbfa0:	68db      	ldr	r3, [r3, #12]
   bbfa2:	4602      	mov	r2, r0
   bbfa4:	4620      	mov	r0, r4
}
   bbfa6:	b002      	add	sp, #8
   bbfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bbfac:	4718      	bx	r3

000bbfae <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bbfae:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bbfb0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bbfb2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bbfb6:	68db      	ldr	r3, [r3, #12]
   bbfb8:	2201      	movs	r2, #1
   bbfba:	f10d 0107 	add.w	r1, sp, #7
   bbfbe:	4798      	blx	r3
}
   bbfc0:	b003      	add	sp, #12
   bbfc2:	f85d fb04 	ldr.w	pc, [sp], #4

000bbfc6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bbfc6:	b40e      	push	{r1, r2, r3}
   bbfc8:	b503      	push	{r0, r1, lr}
   bbfca:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bbfcc:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bbfce:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bbfd2:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bbfd4:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bbfd6:	f001 f942 	bl	bd25e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bbfda:	b002      	add	sp, #8
   bbfdc:	f85d eb04 	ldr.w	lr, [sp], #4
   bbfe0:	b003      	add	sp, #12
   bbfe2:	4770      	bx	lr

000bbfe4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bbfe4:	680a      	ldr	r2, [r1, #0]
   bbfe6:	6002      	str	r2, [r0, #0]
   bbfe8:	684a      	ldr	r2, [r1, #4]
   bbfea:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bbfec:	2200      	movs	r2, #0
   bbfee:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bbff2:	b510      	push	{r4, lr}
   bbff4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bbff6:	688c      	ldr	r4, [r1, #8]
   bbff8:	6084      	str	r4, [r0, #8]
   bbffa:	68cc      	ldr	r4, [r1, #12]
   bbffc:	60c4      	str	r4, [r0, #12]
   bbffe:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc000:	608a      	str	r2, [r1, #8]
   bc002:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bc004:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc006:	610a      	str	r2, [r1, #16]
   bc008:	bd10      	pop	{r4, pc}
	...

000bc00c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bc010:	e9d0 8400 	ldrd	r8, r4, [r0]
   bc014:	f04f 0a14 	mov.w	sl, #20
   bc018:	9300      	str	r3, [sp, #0]
   bc01a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bc01e:	4b18      	ldr	r3, [pc, #96]	; (bc080 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc020:	10a4      	asrs	r4, r4, #2
   bc022:	4617      	mov	r7, r2
   bc024:	435c      	muls	r4, r3
   bc026:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bc028:	2c00      	cmp	r4, #0
   bc02a:	dd21      	ble.n	bc070 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bc02c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bc02e:	fb0a f006 	mul.w	r0, sl, r6
   bc032:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bc036:	463a      	mov	r2, r7
   bc038:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bc03c:	5828      	ldr	r0, [r5, r0]
   bc03e:	9101      	str	r1, [sp, #4]
   bc040:	455f      	cmp	r7, fp
   bc042:	bf28      	it	cs
   bc044:	465a      	movcs	r2, fp
   bc046:	f002 fec6 	bl	bedd6 <strncmp>
                if (cmp == 0) {
   bc04a:	2800      	cmp	r0, #0
   bc04c:	9901      	ldr	r1, [sp, #4]
   bc04e:	f04f 0301 	mov.w	r3, #1
   bc052:	d10b      	bne.n	bc06c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bc054:	455f      	cmp	r7, fp
   bc056:	d103      	bne.n	bc060 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bc058:	9a00      	ldr	r2, [sp, #0]
   bc05a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc05c:	4634      	mov	r4, r6
   bc05e:	e7e3      	b.n	bc028 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bc060:	d9fc      	bls.n	bc05c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bc062:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bc064:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bc068:	3e01      	subs	r6, #1
   bc06a:	e7f7      	b.n	bc05c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bc06c:	dbf9      	blt.n	bc062 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bc06e:	e7f5      	b.n	bc05c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bc070:	eba5 0508 	sub.w	r5, r5, r8
}
   bc074:	4802      	ldr	r0, [pc, #8]	; (bc080 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc076:	10ad      	asrs	r5, r5, #2
   bc078:	4368      	muls	r0, r5
   bc07a:	b003      	add	sp, #12
   bc07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc080:	cccccccd 	.word	0xcccccccd

000bc084 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bc086:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bc088:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc08a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bc08c:	b303      	cbz	r3, bc0d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bc08e:	b1f9      	cbz	r1, bc0d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bc090:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bc092:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bc096:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bc098:	a903      	add	r1, sp, #12
   bc09a:	a801      	add	r0, sp, #4
   bc09c:	f7ff ff21 	bl	bbee2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bc0a0:	4601      	mov	r1, r0
   bc0a2:	b1a8      	cbz	r0, bc0d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bc0a4:	f10d 030b 	add.w	r3, sp, #11
   bc0a8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bc0aa:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc0ae:	4620      	mov	r0, r4
   bc0b0:	f7ff ffac 	bl	bc00c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bc0b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bc0b8:	b153      	cbz	r3, bc0d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bc0ba:	6823      	ldr	r3, [r4, #0]
   bc0bc:	2414      	movs	r4, #20
   bc0be:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bc0c2:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bc0c4:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bc0c8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bc0ca:	bfa8      	it	ge
   bc0cc:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bc0ce:	e7e3      	b.n	bc098 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bc0d0:	4628      	mov	r0, r5
   bc0d2:	b004      	add	sp, #16
   bc0d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc0d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bc0d8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bc0da:	4c09      	ldr	r4, [pc, #36]	; (bc100 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bc0dc:	7823      	ldrb	r3, [r4, #0]
   bc0de:	f3bf 8f5b 	dmb	ish
   bc0e2:	07db      	lsls	r3, r3, #31
   bc0e4:	d409      	bmi.n	bc0fa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc0e6:	4620      	mov	r0, r4
   bc0e8:	f7f7 ffe8 	bl	b40bc <__cxa_guard_acquire>
   bc0ec:	b128      	cbz	r0, bc0fa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc0ee:	4620      	mov	r0, r4
   bc0f0:	f7f7 ffe9 	bl	b40c6 <__cxa_guard_release>
   bc0f4:	4803      	ldr	r0, [pc, #12]	; (bc104 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bc0f6:	f002 fd57 	bl	beba8 <atexit>
}
   bc0fa:	4803      	ldr	r0, [pc, #12]	; (bc108 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bc0fc:	bd10      	pop	{r4, pc}
   bc0fe:	bf00      	nop
   bc100:	2003e650 	.word	0x2003e650
   bc104:	000bbedb 	.word	0x000bbedb
   bc108:	2003de7c 	.word	0x2003de7c

000bc10c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bc10c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bc10e:	4c09      	ldr	r4, [pc, #36]	; (bc134 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bc110:	7823      	ldrb	r3, [r4, #0]
   bc112:	f3bf 8f5b 	dmb	ish
   bc116:	07db      	lsls	r3, r3, #31
   bc118:	d409      	bmi.n	bc12e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc11a:	4620      	mov	r0, r4
   bc11c:	f7f7 ffce 	bl	b40bc <__cxa_guard_acquire>
   bc120:	b128      	cbz	r0, bc12e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc122:	4620      	mov	r0, r4
   bc124:	f7f7 ffcf 	bl	b40c6 <__cxa_guard_release>
   bc128:	4803      	ldr	r0, [pc, #12]	; (bc138 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bc12a:	f002 fd3d 	bl	beba8 <atexit>
    return &factory;
}
   bc12e:	4803      	ldr	r0, [pc, #12]	; (bc13c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bc130:	bd10      	pop	{r4, pc}
   bc132:	bf00      	nop
   bc134:	2003e654 	.word	0x2003e654
   bc138:	000bbf43 	.word	0x000bbf43
   bc13c:	2003de80 	.word	0x2003de80

000bc140 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bc140:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bc142:	2500      	movs	r5, #0
   bc144:	4604      	mov	r4, r0
   bc146:	e9c0 5500 	strd	r5, r5, [r0]
   bc14a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc14e:	6085      	str	r5, [r0, #8]
   bc150:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bc152:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bc156:	f7fe fa4f 	bl	ba5f8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bc15a:	f7ff ffbd 	bl	bc0d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bc15e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc160:	f7ff ffd4 	bl	bc10c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bc164:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc166:	6220      	str	r0, [r4, #32]
}
   bc168:	4620      	mov	r0, r4
   bc16a:	bd38      	pop	{r3, r4, r5, pc}

000bc16c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bc16c:	b510      	push	{r4, lr}
    static LogManager mgr;
   bc16e:	4c0a      	ldr	r4, [pc, #40]	; (bc198 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bc170:	7823      	ldrb	r3, [r4, #0]
   bc172:	f3bf 8f5b 	dmb	ish
   bc176:	07db      	lsls	r3, r3, #31
   bc178:	d40c      	bmi.n	bc194 <_ZN5spark10LogManager8instanceEv+0x28>
   bc17a:	4620      	mov	r0, r4
   bc17c:	f7f7 ff9e 	bl	b40bc <__cxa_guard_acquire>
   bc180:	b140      	cbz	r0, bc194 <_ZN5spark10LogManager8instanceEv+0x28>
   bc182:	4806      	ldr	r0, [pc, #24]	; (bc19c <_ZN5spark10LogManager8instanceEv+0x30>)
   bc184:	f7ff ffdc 	bl	bc140 <_ZN5spark10LogManagerC1Ev>
   bc188:	4620      	mov	r0, r4
   bc18a:	f7f7 ff9c 	bl	b40c6 <__cxa_guard_release>
   bc18e:	4804      	ldr	r0, [pc, #16]	; (bc1a0 <_ZN5spark10LogManager8instanceEv+0x34>)
   bc190:	f002 fd0a 	bl	beba8 <atexit>
    return &mgr;
}
   bc194:	4801      	ldr	r0, [pc, #4]	; (bc19c <_ZN5spark10LogManager8instanceEv+0x30>)
   bc196:	bd10      	pop	{r4, pc}
   bc198:	2003e64c 	.word	0x2003e64c
   bc19c:	2003e65c 	.word	0x2003e65c
   bc1a0:	000bc659 	.word	0x000bc659

000bc1a4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bc1a4:	4a02      	ldr	r2, [pc, #8]	; (bc1b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bc1a6:	4903      	ldr	r1, [pc, #12]	; (bc1b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bc1a8:	4803      	ldr	r0, [pc, #12]	; (bc1b8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bc1aa:	2300      	movs	r3, #0
   bc1ac:	f7fe bcbc 	b.w	bab28 <log_set_callbacks>
   bc1b0:	000bc43d 	.word	0x000bc43d
   bc1b4:	000bc3c9 	.word	0x000bc3c9
   bc1b8:	000bc349 	.word	0x000bc349

000bc1bc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bc1bc:	2300      	movs	r3, #0
   bc1be:	461a      	mov	r2, r3
   bc1c0:	4619      	mov	r1, r3
   bc1c2:	4618      	mov	r0, r3
   bc1c4:	f7fe bcb0 	b.w	bab28 <log_set_callbacks>

000bc1c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bc1c8:	b570      	push	{r4, r5, r6, lr}
   bc1ca:	b08a      	sub	sp, #40	; 0x28
   bc1cc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bc1ce:	4601      	mov	r1, r0
   bc1d0:	a804      	add	r0, sp, #16
   bc1d2:	f7fb fc38 	bl	b7a46 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bc1d6:	4e14      	ldr	r6, [pc, #80]	; (bc228 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bc1d8:	a804      	add	r0, sp, #16
   bc1da:	f7ff fd9b 	bl	bbd14 <_ZN5spark18JSONObjectIterator4nextEv>
   bc1de:	b1e8      	cbz	r0, bc21c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bc1e0:	a904      	add	r1, sp, #16
   bc1e2:	4668      	mov	r0, sp
   bc1e4:	f7fb fc40 	bl	b7a68 <_ZNK5spark18JSONObjectIterator4nameEv>
   bc1e8:	9802      	ldr	r0, [sp, #8]
   bc1ea:	4631      	mov	r1, r6
   bc1ec:	f7ff fea2 	bl	bbf34 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bc1f0:	4604      	mov	r4, r0
   bc1f2:	b110      	cbz	r0, bc1fa <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bc1f4:	1e2c      	subs	r4, r5, #0
   bc1f6:	bf18      	it	ne
   bc1f8:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bc1fa:	a801      	add	r0, sp, #4
   bc1fc:	f7f9 fcbe 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc200:	2c00      	cmp	r4, #0
   bc202:	d0e9      	beq.n	bc1d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bc204:	a904      	add	r1, sp, #16
   bc206:	4668      	mov	r0, sp
   bc208:	f7fb fc3f 	bl	b7a8a <_ZNK5spark18JSONObjectIterator5valueEv>
   bc20c:	4668      	mov	r0, sp
   bc20e:	f7ff fd24 	bl	bbc5a <_ZNK5spark9JSONValue5toIntEv>
   bc212:	6028      	str	r0, [r5, #0]
   bc214:	a801      	add	r0, sp, #4
   bc216:	f7f9 fcb1 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc21a:	e7dd      	b.n	bc1d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bc21c:	a805      	add	r0, sp, #20
   bc21e:	f7f9 fcad 	bl	b5b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc222:	b00a      	add	sp, #40	; 0x28
   bc224:	bd70      	pop	{r4, r5, r6, pc}
   bc226:	bf00      	nop
   bc228:	000c068a 	.word	0x000c068a

000bc22c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc22e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bc230:	4620      	mov	r0, r4
   bc232:	4913      	ldr	r1, [pc, #76]	; (bc280 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc234:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bc236:	f002 fd96 	bl	bed66 <strcmp>
   bc23a:	b950      	cbnz	r0, bc252 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bc23c:	f001 fdaa 	bl	bdd94 <_Z16_fetch_usbserialv>
   bc240:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bc244:	f001 fd94 	bl	bdd70 <_ZN9USBSerial5beginEl>
}
   bc248:	b003      	add	sp, #12
   bc24a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bc24e:	f001 bda1 	b.w	bdd94 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bc252:	490c      	ldr	r1, [pc, #48]	; (bc284 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bc254:	4620      	mov	r0, r4
   bc256:	f002 fd86 	bl	bed66 <strcmp>
   bc25a:	b978      	cbnz	r0, bc27c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bc25c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bc260:	a901      	add	r1, sp, #4
   bc262:	4628      	mov	r0, r5
        int baud = 9600;
   bc264:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bc266:	f7ff ffaf 	bl	bc1c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bc26a:	f001 ff91 	bl	be190 <_Z22__fetch_global_Serial1v>
   bc26e:	9901      	ldr	r1, [sp, #4]
   bc270:	f001 fd26 	bl	bdcc0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bc274:	f001 ff8c 	bl	be190 <_Z22__fetch_global_Serial1v>
}
   bc278:	b003      	add	sp, #12
   bc27a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bc27c:	2000      	movs	r0, #0
   bc27e:	e7fb      	b.n	bc278 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bc280:	000c068f 	.word	0x000c068f
   bc284:	000c0696 	.word	0x000c0696

000bc288 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc288:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc28a:	e9d0 5300 	ldrd	r5, r3, [r0]
   bc28e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc290:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc292:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc296:	42ae      	cmp	r6, r5
   bc298:	d005      	beq.n	bc2a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bc29a:	f105 0008 	add.w	r0, r5, #8
   bc29e:	f7ff fff3 	bl	bc288 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc2a2:	3514      	adds	r5, #20
   bc2a4:	e7f7      	b.n	bc296 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bc2a6:	6820      	ldr	r0, [r4, #0]
   bc2a8:	f7fe fd8a 	bl	badc0 <free>
}
   bc2ac:	4620      	mov	r0, r4
   bc2ae:	bd70      	pop	{r4, r5, r6, pc}

000bc2b0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bc2b0:	b510      	push	{r4, lr}
   bc2b2:	4604      	mov	r4, r0
   bc2b4:	300c      	adds	r0, #12
   bc2b6:	f7ff ffe7 	bl	bc288 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc2ba:	4620      	mov	r0, r4
   bc2bc:	f7fe fe23 	bl	baf06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bc2c0:	4620      	mov	r0, r4
   bc2c2:	bd10      	pop	{r4, pc}

000bc2c4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bc2c4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bc2c6:	4b04      	ldr	r3, [pc, #16]	; (bc2d8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bc2c8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bc2ca:	f840 3b04 	str.w	r3, [r0], #4
   bc2ce:	f7ff ffef 	bl	bc2b0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bc2d2:	4620      	mov	r0, r4
   bc2d4:	bd10      	pop	{r4, pc}
   bc2d6:	bf00      	nop
   bc2d8:	000bfaec 	.word	0x000bfaec

000bc2dc <_ZN5spark16StreamLogHandlerD0Ev>:
   bc2dc:	b510      	push	{r4, lr}
   bc2de:	4604      	mov	r4, r0
   bc2e0:	f7ff fff0 	bl	bc2c4 <_ZN5spark16StreamLogHandlerD1Ev>
   bc2e4:	4620      	mov	r0, r4
   bc2e6:	2124      	movs	r1, #36	; 0x24
   bc2e8:	f7f7 fed9 	bl	b409e <_ZdlPvj>
   bc2ec:	4620      	mov	r0, r4
   bc2ee:	bd10      	pop	{r4, pc}

000bc2f0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bc2f0:	b510      	push	{r4, lr}
   bc2f2:	4b03      	ldr	r3, [pc, #12]	; (bc300 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bc2f4:	6003      	str	r3, [r0, #0]
   bc2f6:	4604      	mov	r4, r0
   bc2f8:	f7ff ffe4 	bl	bc2c4 <_ZN5spark16StreamLogHandlerD1Ev>
   bc2fc:	4620      	mov	r0, r4
   bc2fe:	bd10      	pop	{r4, pc}
   bc300:	000c072c 	.word	0x000c072c

000bc304 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bc304:	b510      	push	{r4, lr}
   bc306:	4604      	mov	r4, r0
   bc308:	f7ff fff2 	bl	bc2f0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bc30c:	4620      	mov	r0, r4
   bc30e:	2124      	movs	r1, #36	; 0x24
   bc310:	f7f7 fec5 	bl	b409e <_ZdlPvj>
   bc314:	4620      	mov	r0, r4
   bc316:	bd10      	pop	{r4, pc}

000bc318 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bc318:	2200      	movs	r2, #0
   bc31a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bc31e:	b510      	push	{r4, lr}
        capacity_(0) {
   bc320:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bc322:	680c      	ldr	r4, [r1, #0]
   bc324:	6004      	str	r4, [r0, #0]
   bc326:	684c      	ldr	r4, [r1, #4]
   bc328:	6044      	str	r4, [r0, #4]
   bc32a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc32c:	600a      	str	r2, [r1, #0]
   bc32e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc330:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc332:	608a      	str	r2, [r1, #8]
}
   bc334:	bd10      	pop	{r4, pc}

000bc336 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bc336:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bc338:	6803      	ldr	r3, [r0, #0]
   bc33a:	4604      	mov	r4, r0
   bc33c:	6818      	ldr	r0, [r3, #0]
   bc33e:	f7fe f973 	bl	ba628 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bc342:	4620      	mov	r0, r4
   bc344:	bd10      	pop	{r4, pc}
	...

000bc348 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bc348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc34c:	b087      	sub	sp, #28
   bc34e:	4680      	mov	r8, r0
   bc350:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bc352:	4b1c      	ldr	r3, [pc, #112]	; (bc3c4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bc354:	685b      	ldr	r3, [r3, #4]
   bc356:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc35a:	4689      	mov	r9, r1
   bc35c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bc35e:	b96b      	cbnz	r3, bc37c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bc360:	f7ff ff04 	bl	bc16c <_ZN5spark10LogManager8instanceEv>
   bc364:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bc366:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bc36a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc36c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bc36e:	f7ff fddf 	bl	bbf30 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bc372:	7b23      	ldrb	r3, [r4, #12]
   bc374:	b12b      	cbz	r3, bc382 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bc376:	a805      	add	r0, sp, #20
   bc378:	f7ff ffdd 	bl	bc336 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bc37c:	b007      	add	sp, #28
   bc37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bc382:	2301      	movs	r3, #1
   bc384:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bc386:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bc38a:	fa5f f989 	uxtb.w	r9, r9
   bc38e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc392:	45aa      	cmp	sl, r5
   bc394:	d012      	beq.n	bc3bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bc396:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bc39a:	4631      	mov	r1, r6
   bc39c:	1d38      	adds	r0, r7, #4
   bc39e:	f7ff fe71 	bl	bc084 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bc3a2:	4581      	cmp	r9, r0
   bc3a4:	d3f5      	bcc.n	bc392 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bc3a6:	683b      	ldr	r3, [r7, #0]
   bc3a8:	9a03      	ldr	r2, [sp, #12]
   bc3aa:	9200      	str	r2, [sp, #0]
   bc3ac:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bc3b0:	464a      	mov	r2, r9
   bc3b2:	4633      	mov	r3, r6
   bc3b4:	4641      	mov	r1, r8
   bc3b6:	4638      	mov	r0, r7
   bc3b8:	47d8      	blx	fp
   bc3ba:	e7ea      	b.n	bc392 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bc3bc:	2300      	movs	r3, #0
   bc3be:	7323      	strb	r3, [r4, #12]
   bc3c0:	e7d9      	b.n	bc376 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bc3c2:	bf00      	nop
   bc3c4:	e000ed00 	.word	0xe000ed00

000bc3c8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bc3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc3cc:	469b      	mov	fp, r3
   bc3ce:	4b1a      	ldr	r3, [pc, #104]	; (bc438 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bc3d0:	685b      	ldr	r3, [r3, #4]
   bc3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc3d6:	4680      	mov	r8, r0
   bc3d8:	4689      	mov	r9, r1
   bc3da:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bc3dc:	b96b      	cbnz	r3, bc3fa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bc3de:	f7ff fec5 	bl	bc16c <_ZN5spark10LogManager8instanceEv>
   bc3e2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bc3e4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bc3e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc3ea:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc3ec:	f7ff fda0 	bl	bbf30 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bc3f0:	7b23      	ldrb	r3, [r4, #12]
   bc3f2:	b12b      	cbz	r3, bc400 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bc3f4:	a801      	add	r0, sp, #4
   bc3f6:	f7ff ff9e 	bl	bc336 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bc3fa:	b003      	add	sp, #12
   bc3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bc400:	2301      	movs	r3, #1
   bc402:	7323      	strb	r3, [r4, #12]
   bc404:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bc408:	b2f6      	uxtb	r6, r6
   bc40a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc40e:	4555      	cmp	r5, sl
   bc410:	d00e      	beq.n	bc430 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bc412:	f855 7b04 	ldr.w	r7, [r5], #4
   bc416:	4659      	mov	r1, fp
   bc418:	1d38      	adds	r0, r7, #4
   bc41a:	f7ff fe33 	bl	bc084 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bc41e:	4286      	cmp	r6, r0
   bc420:	d3f5      	bcc.n	bc40e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bc422:	683b      	ldr	r3, [r7, #0]
   bc424:	464a      	mov	r2, r9
   bc426:	68db      	ldr	r3, [r3, #12]
   bc428:	4641      	mov	r1, r8
   bc42a:	4638      	mov	r0, r7
   bc42c:	4798      	blx	r3
   bc42e:	e7ee      	b.n	bc40e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bc430:	2300      	movs	r3, #0
   bc432:	7323      	strb	r3, [r4, #12]
   bc434:	e7de      	b.n	bc3f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bc436:	bf00      	nop
   bc438:	e000ed00 	.word	0xe000ed00

000bc43c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bc43c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc440:	4b16      	ldr	r3, [pc, #88]	; (bc49c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bc442:	685b      	ldr	r3, [r3, #4]
   bc444:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc448:	4605      	mov	r5, r0
   bc44a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bc44c:	bb1b      	cbnz	r3, bc496 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bc44e:	f7ff fe8d 	bl	bc16c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bc452:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bc456:	4604      	mov	r4, r0
   bc458:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc45a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc45c:	f7ff fd68 	bl	bbf30 <_ZN14RecursiveMutex4lockEv.isra.0>
   bc460:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bc464:	2446      	movs	r4, #70	; 0x46
   bc466:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc46a:	45b0      	cmp	r8, r6
   bc46c:	d109      	bne.n	bc482 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bc46e:	a801      	add	r0, sp, #4
   bc470:	f7ff ff61 	bl	bc336 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bc474:	42a5      	cmp	r5, r4
   bc476:	bfb4      	ite	lt
   bc478:	2000      	movlt	r0, #0
   bc47a:	2001      	movge	r0, #1
}
   bc47c:	b002      	add	sp, #8
   bc47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bc482:	f856 0b04 	ldr.w	r0, [r6], #4
   bc486:	4639      	mov	r1, r7
   bc488:	3004      	adds	r0, #4
   bc48a:	f7ff fdfb 	bl	bc084 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bc48e:	4284      	cmp	r4, r0
   bc490:	bfa8      	it	ge
   bc492:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bc494:	e7e9      	b.n	bc46a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bc496:	2000      	movs	r0, #0
   bc498:	e7f0      	b.n	bc47c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bc49a:	bf00      	nop
   bc49c:	e000ed00 	.word	0xe000ed00

000bc4a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc4a2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bc4a6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc4a8:	4604      	mov	r4, r0
   bc4aa:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc4ac:	db0d      	blt.n	bc4ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bc4ae:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bc4b0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bc4b2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bc4b4:	dd04      	ble.n	bc4c0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bc4b6:	00b9      	lsls	r1, r7, #2
   bc4b8:	f7fe fc8a 	bl	badd0 <realloc>
            if (!d) {
   bc4bc:	b918      	cbnz	r0, bc4c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bc4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bc4c0:	f7fe fc7e 	bl	badc0 <free>
        T* d = nullptr;
   bc4c4:	2000      	movs	r0, #0
        data_ = d;
   bc4c6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bc4c8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bc4ca:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc4cc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bc4ce:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bc4d2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bc4d4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bc4d8:	1d08      	adds	r0, r1, #4
   bc4da:	f002 fb9f 	bl	bec1c <memmove>
    new(p) T(std::move(value));
   bc4de:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bc4e2:	6863      	ldr	r3, [r4, #4]
   bc4e4:	3301      	adds	r3, #1
   bc4e6:	6063      	str	r3, [r4, #4]
    return true;
   bc4e8:	2001      	movs	r0, #1
   bc4ea:	e7e8      	b.n	bc4be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bc4ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bc4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bc4ee:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bc4f2:	4604      	mov	r4, r0
   bc4f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc4f6:	9301      	str	r3, [sp, #4]
   bc4f8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bc4fa:	f7ff fd19 	bl	bbf30 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bc4fe:	e9d4 3200 	ldrd	r3, r2, [r4]
   bc502:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bc506:	4293      	cmp	r3, r2
   bc508:	4619      	mov	r1, r3
   bc50a:	d00b      	beq.n	bc524 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bc50c:	6809      	ldr	r1, [r1, #0]
   bc50e:	42a9      	cmp	r1, r5
   bc510:	f103 0304 	add.w	r3, r3, #4
   bc514:	d1f7      	bne.n	bc506 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bc516:	a801      	add	r0, sp, #4
   bc518:	f7ff ff0d 	bl	bc336 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bc51c:	2500      	movs	r5, #0
}
   bc51e:	4628      	mov	r0, r5
   bc520:	b003      	add	sp, #12
   bc522:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bc524:	4629      	mov	r1, r5
   bc526:	4620      	mov	r0, r4
   bc528:	f7ff ffba 	bl	bc4a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bc52c:	4605      	mov	r5, r0
   bc52e:	2800      	cmp	r0, #0
   bc530:	d0f1      	beq.n	bc516 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bc532:	6863      	ldr	r3, [r4, #4]
   bc534:	2b01      	cmp	r3, #1
   bc536:	d101      	bne.n	bc53c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bc538:	f7ff fe34 	bl	bc1a4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc53c:	a801      	add	r0, sp, #4
   bc53e:	f7ff fefa 	bl	bc336 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bc542:	e7ec      	b.n	bc51e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bc544 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bc544:	b570      	push	{r4, r5, r6, lr}
   bc546:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bc548:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bc54c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bc54e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bc552:	4282      	cmp	r2, r0
   bc554:	d00f      	beq.n	bc576 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bc556:	4601      	mov	r1, r0
            if (*p == value) {
   bc558:	681d      	ldr	r5, [r3, #0]
   bc55a:	f851 6b04 	ldr.w	r6, [r1], #4
   bc55e:	42ae      	cmp	r6, r5
   bc560:	d107      	bne.n	bc572 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bc562:	1a52      	subs	r2, r2, r1
   bc564:	f002 fb5a 	bl	bec1c <memmove>
    --size_;
   bc568:	6863      	ldr	r3, [r4, #4]
   bc56a:	3b01      	subs	r3, #1
   bc56c:	6063      	str	r3, [r4, #4]
    return true;
   bc56e:	2001      	movs	r0, #1
}
   bc570:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bc572:	4608      	mov	r0, r1
   bc574:	e7ed      	b.n	bc552 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bc576:	2000      	movs	r0, #0
   bc578:	e7fa      	b.n	bc570 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bc57a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bc57a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bc57c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bc580:	4604      	mov	r4, r0
   bc582:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bc584:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc586:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bc588:	f7ff fcd2 	bl	bbf30 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bc58c:	a901      	add	r1, sp, #4
   bc58e:	4620      	mov	r0, r4
   bc590:	f7ff ffd8 	bl	bc544 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bc594:	b118      	cbz	r0, bc59e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bc596:	6863      	ldr	r3, [r4, #4]
   bc598:	b90b      	cbnz	r3, bc59e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bc59a:	f7ff fe0f 	bl	bc1bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc59e:	a803      	add	r0, sp, #12
   bc5a0:	f7ff fec9 	bl	bc336 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bc5a4:	b004      	add	sp, #16
   bc5a6:	bd10      	pop	{r4, pc}

000bc5a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bc5a8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bc5aa:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bc5ae:	2318      	movs	r3, #24
   bc5b0:	4604      	mov	r4, r0
   bc5b2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bc5b6:	42ae      	cmp	r6, r5
   bc5b8:	d015      	beq.n	bc5e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bc5ba:	f105 0110 	add.w	r1, r5, #16
   bc5be:	4620      	mov	r0, r4
   bc5c0:	f7ff ffc0 	bl	bc544 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bc5c4:	6863      	ldr	r3, [r4, #4]
   bc5c6:	b90b      	cbnz	r3, bc5cc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bc5c8:	f7ff fdf8 	bl	bc1bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bc5cc:	69e0      	ldr	r0, [r4, #28]
   bc5ce:	6929      	ldr	r1, [r5, #16]
   bc5d0:	6803      	ldr	r3, [r0, #0]
   bc5d2:	68db      	ldr	r3, [r3, #12]
   bc5d4:	4798      	blx	r3
        if (h.stream) {
   bc5d6:	6969      	ldr	r1, [r5, #20]
   bc5d8:	b119      	cbz	r1, bc5e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bc5da:	6a20      	ldr	r0, [r4, #32]
   bc5dc:	6803      	ldr	r3, [r0, #0]
   bc5de:	68db      	ldr	r3, [r3, #12]
   bc5e0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bc5e2:	3518      	adds	r5, #24
   bc5e4:	e7e7      	b.n	bc5b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bc5e6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bc5ea:	2618      	movs	r6, #24
   bc5ec:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc5f0:	42ae      	cmp	r6, r5
   bc5f2:	d004      	beq.n	bc5fe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bc5f4:	4628      	mov	r0, r5
   bc5f6:	f000 ff47 	bl	bd488 <_ZN6StringD1Ev>
   bc5fa:	3518      	adds	r5, #24
   bc5fc:	e7f8      	b.n	bc5f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bc5fe:	2300      	movs	r3, #0
   bc600:	6163      	str	r3, [r4, #20]
}
   bc602:	bd70      	pop	{r4, r5, r6, pc}

000bc604 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bc604:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc606:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bc608:	f7ff fdd8 	bl	bc1bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc60c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bc610:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc612:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc614:	f7ff fc8c 	bl	bbf30 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bc618:	4620      	mov	r0, r4
   bc61a:	f7ff ffc5 	bl	bc5a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bc61e:	a801      	add	r0, sp, #4
   bc620:	f7ff fe89 	bl	bc336 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bc624:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bc626:	b108      	cbz	r0, bc62c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bc628:	f7fd ffee 	bl	ba608 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bc62c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bc630:	2618      	movs	r6, #24
   bc632:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc636:	42ae      	cmp	r6, r5
   bc638:	d004      	beq.n	bc644 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bc63a:	4628      	mov	r0, r5
   bc63c:	f000 ff24 	bl	bd488 <_ZN6StringD1Ev>
   bc640:	3518      	adds	r5, #24
   bc642:	e7f8      	b.n	bc636 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bc644:	6920      	ldr	r0, [r4, #16]
   bc646:	f7fe fbbb 	bl	badc0 <free>
   bc64a:	6820      	ldr	r0, [r4, #0]
   bc64c:	f7fe fbb8 	bl	badc0 <free>
}
   bc650:	4620      	mov	r0, r4
   bc652:	b002      	add	sp, #8
   bc654:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc658 <__tcf_2>:
    static LogManager mgr;
   bc658:	4801      	ldr	r0, [pc, #4]	; (bc660 <__tcf_2+0x8>)
   bc65a:	f7ff bfd3 	b.w	bc604 <_ZN5spark10LogManagerD1Ev>
   bc65e:	bf00      	nop
   bc660:	2003e65c 	.word	0x2003e65c

000bc664 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bc664:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc668:	4604      	mov	r4, r0
   bc66a:	460d      	mov	r5, r1
   bc66c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc66e:	d915      	bls.n	bc69c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bc670:	4290      	cmp	r0, r2
   bc672:	d214      	bcs.n	bc69e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bc674:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bc678:	1a75      	subs	r5, r6, r1
   bc67a:	f1a1 0714 	sub.w	r7, r1, #20
   bc67e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc680:	42b7      	cmp	r7, r6
   bc682:	d01a      	beq.n	bc6ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bc684:	b11c      	cbz	r4, bc68e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bc686:	4631      	mov	r1, r6
   bc688:	4620      	mov	r0, r4
   bc68a:	f7ff fcab 	bl	bbfe4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bc68e:	f106 0008 	add.w	r0, r6, #8
   bc692:	f7ff fdf9 	bl	bc288 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bc696:	3e14      	subs	r6, #20
   bc698:	3c14      	subs	r4, #20
   bc69a:	e7f1      	b.n	bc680 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bc69c:	d00d      	beq.n	bc6ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bc69e:	42b5      	cmp	r5, r6
   bc6a0:	d00b      	beq.n	bc6ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bc6a2:	b11c      	cbz	r4, bc6ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bc6a4:	4629      	mov	r1, r5
   bc6a6:	4620      	mov	r0, r4
   bc6a8:	f7ff fc9c 	bl	bbfe4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bc6ac:	f105 0008 	add.w	r0, r5, #8
   bc6b0:	f7ff fdea 	bl	bc288 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bc6b4:	3514      	adds	r5, #20
   bc6b6:	3414      	adds	r4, #20
   bc6b8:	e7f1      	b.n	bc69e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bc6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc6bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bc6bc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc6c0:	4604      	mov	r4, r0
   bc6c2:	460d      	mov	r5, r1
   bc6c4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc6c6:	d914      	bls.n	bc6f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bc6c8:	4290      	cmp	r0, r2
   bc6ca:	d213      	bcs.n	bc6f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bc6cc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bc6d0:	1a75      	subs	r5, r6, r1
   bc6d2:	f1a1 0710 	sub.w	r7, r1, #16
   bc6d6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc6d8:	42b7      	cmp	r7, r6
   bc6da:	d018      	beq.n	bc70e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bc6dc:	b11c      	cbz	r4, bc6e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bc6de:	4631      	mov	r1, r6
   bc6e0:	4620      	mov	r0, r4
   bc6e2:	f000 ff4d 	bl	bd580 <_ZN6StringC1EOS_>
                end->~T();
   bc6e6:	4630      	mov	r0, r6
   bc6e8:	f000 fece 	bl	bd488 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bc6ec:	3e10      	subs	r6, #16
   bc6ee:	3c10      	subs	r4, #16
   bc6f0:	e7f2      	b.n	bc6d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bc6f2:	d00c      	beq.n	bc70e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bc6f4:	42b5      	cmp	r5, r6
   bc6f6:	d00a      	beq.n	bc70e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bc6f8:	b11c      	cbz	r4, bc702 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bc6fa:	4629      	mov	r1, r5
   bc6fc:	4620      	mov	r0, r4
   bc6fe:	f000 ff3f 	bl	bd580 <_ZN6StringC1EOS_>
                p->~T();
   bc702:	4628      	mov	r0, r5
   bc704:	f000 fec0 	bl	bd488 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bc708:	3510      	adds	r5, #16
   bc70a:	3410      	adds	r4, #16
   bc70c:	e7f2      	b.n	bc6f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bc70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc710 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bc710:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bc712:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc714:	4605      	mov	r5, r0
        if (n > 0) {
   bc716:	dd11      	ble.n	bc73c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bc718:	0130      	lsls	r0, r6, #4
   bc71a:	f7fe fb49 	bl	badb0 <malloc>
            if (!d) {
   bc71e:	4604      	mov	r4, r0
   bc720:	b158      	cbz	r0, bc73a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bc722:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc726:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bc72a:	f7ff ffc7 	bl	bc6bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bc72e:	6828      	ldr	r0, [r5, #0]
   bc730:	f7fe fb46 	bl	badc0 <free>
        data_ = d;
   bc734:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc736:	60ae      	str	r6, [r5, #8]
        return true;
   bc738:	2001      	movs	r0, #1
    }
   bc73a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bc73c:	2400      	movs	r4, #0
   bc73e:	e7f6      	b.n	bc72e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bc740 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bc740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc744:	4690      	mov	r8, r2
   bc746:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bc748:	2300      	movs	r3, #0
   bc74a:	9103      	str	r1, [sp, #12]
    return size_;
   bc74c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bc750:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bc752:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bc754:	4299      	cmp	r1, r3
        capacity_(0) {
   bc756:	e9c0 3300 	strd	r3, r3, [r0]
   bc75a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bc75e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bc762:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bc766:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bc768:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bc76a:	dc23      	bgt.n	bc7b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bc76c:	e9d8 5700 	ldrd	r5, r7, [r8]
   bc770:	2314      	movs	r3, #20
   bc772:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bc776:	42af      	cmp	r7, r5
   bc778:	d03b      	beq.n	bc7f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bc77a:	4629      	mov	r1, r5
   bc77c:	a80b      	add	r0, sp, #44	; 0x2c
   bc77e:	f000 feff 	bl	bd580 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bc782:	a90b      	add	r1, sp, #44	; 0x2c
   bc784:	a80f      	add	r0, sp, #60	; 0x3c
   bc786:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bc788:	f000 fefa 	bl	bd580 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc78c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bc790:	4299      	cmp	r1, r3
   bc792:	da1b      	bge.n	bc7cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bc794:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bc796:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bc798:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bc79c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bc7a0:	4631      	mov	r1, r6
   bc7a2:	f106 0010 	add.w	r0, r6, #16
   bc7a6:	f7ff ff89 	bl	bc6bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bc7aa:	b9ee      	cbnz	r6, bc7e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bc7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc7ae:	3301      	adds	r3, #1
   bc7b0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bc7b2:	e011      	b.n	bc7d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bc7b4:	a808      	add	r0, sp, #32
   bc7b6:	f7ff ffab 	bl	bc710 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bc7ba:	2800      	cmp	r0, #0
   bc7bc:	d1d6      	bne.n	bc76c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bc7be:	a808      	add	r0, sp, #32
   bc7c0:	f7fe fba1 	bl	baf06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bc7c4:	4620      	mov	r0, r4
   bc7c6:	b015      	add	sp, #84	; 0x54
   bc7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc7cc:	3101      	adds	r1, #1
   bc7ce:	a808      	add	r0, sp, #32
   bc7d0:	f7ff ff9e 	bl	bc710 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bc7d4:	2800      	cmp	r0, #0
   bc7d6:	d1dd      	bne.n	bc794 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bc7d8:	a80f      	add	r0, sp, #60	; 0x3c
   bc7da:	f000 fe55 	bl	bd488 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bc7de:	a80b      	add	r0, sp, #44	; 0x2c
   bc7e0:	f000 fe52 	bl	bd488 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bc7e4:	3514      	adds	r5, #20
   bc7e6:	e7c6      	b.n	bc776 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bc7e8:	a90f      	add	r1, sp, #60	; 0x3c
   bc7ea:	4630      	mov	r0, r6
   bc7ec:	f000 fec8 	bl	bd580 <_ZN6StringC1EOS_>
   bc7f0:	e7dc      	b.n	bc7ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bc7f2:	2600      	movs	r6, #0
   bc7f4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bc7f8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bc7fa:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bc7fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bc802:	429e      	cmp	r6, r3
   bc804:	da7c      	bge.n	bc900 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bc806:	0133      	lsls	r3, r6, #4
   bc808:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bc80a:	9306      	str	r3, [sp, #24]
        if (!category) {
   bc80c:	b90b      	cbnz	r3, bc812 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bc80e:	3601      	adds	r6, #1
   bc810:	e7f5      	b.n	bc7fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bc812:	2300      	movs	r3, #0
   bc814:	9307      	str	r3, [sp, #28]
   bc816:	fb09 f306 	mul.w	r3, r9, r6
   bc81a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bc81c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bc81e:	a907      	add	r1, sp, #28
   bc820:	a806      	add	r0, sp, #24
   bc822:	f7ff fb5e 	bl	bbee2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bc826:	4682      	mov	sl, r0
   bc828:	2800      	cmp	r0, #0
   bc82a:	d0f0      	beq.n	bc80e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bc82c:	f04f 0300 	mov.w	r3, #0
   bc830:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc834:	4601      	mov	r1, r0
   bc836:	9a07      	ldr	r2, [sp, #28]
   bc838:	f10d 0317 	add.w	r3, sp, #23
   bc83c:	4628      	mov	r0, r5
   bc83e:	f7ff fbe5 	bl	bc00c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc842:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc846:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc848:	2f00      	cmp	r7, #0
   bc84a:	d14a      	bne.n	bc8e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bc84c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bc850:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bc854:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bc858:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bc85c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bc860:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bc864:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc866:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bc86a:	4293      	cmp	r3, r2
   bc86c:	db17      	blt.n	bc89e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bc86e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bc872:	f1ba 0f00 	cmp.w	sl, #0
   bc876:	dd30      	ble.n	bc8da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bc878:	fb09 f00a 	mul.w	r0, r9, sl
   bc87c:	f7fe fa98 	bl	badb0 <malloc>
            if (!d) {
   bc880:	4683      	mov	fp, r0
   bc882:	b360      	cbz	r0, bc8de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bc884:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc888:	fb09 1202 	mla	r2, r9, r2, r1
   bc88c:	f7ff feea 	bl	bc664 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bc890:	6828      	ldr	r0, [r5, #0]
   bc892:	f7fe fa95 	bl	badc0 <free>
        data_ = d;
   bc896:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bc89a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bc89e:	682b      	ldr	r3, [r5, #0]
   bc8a0:	9a01      	ldr	r2, [sp, #4]
   bc8a2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bc8a6:	686a      	ldr	r2, [r5, #4]
   bc8a8:	4651      	mov	r1, sl
   bc8aa:	fb09 3202 	mla	r2, r9, r2, r3
   bc8ae:	f10a 0014 	add.w	r0, sl, #20
   bc8b2:	f7ff fed7 	bl	bc664 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bc8b6:	f1ba 0f00 	cmp.w	sl, #0
   bc8ba:	d003      	beq.n	bc8c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bc8bc:	a90f      	add	r1, sp, #60	; 0x3c
   bc8be:	4650      	mov	r0, sl
   bc8c0:	f7ff fb90 	bl	bbfe4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bc8c4:	686b      	ldr	r3, [r5, #4]
   bc8c6:	3301      	adds	r3, #1
   bc8c8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bc8ca:	a811      	add	r0, sp, #68	; 0x44
   bc8cc:	f7ff fcdc 	bl	bc288 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc8d0:	b13f      	cbz	r7, bc8e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bc8d2:	a80b      	add	r0, sp, #44	; 0x2c
   bc8d4:	f7ff fcd8 	bl	bc288 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc8d8:	e771      	b.n	bc7be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bc8da:	46bb      	mov	fp, r7
   bc8dc:	e7d8      	b.n	bc890 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc8de:	2701      	movs	r7, #1
   bc8e0:	e7f3      	b.n	bc8ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bc8e2:	9b01      	ldr	r3, [sp, #4]
   bc8e4:	682d      	ldr	r5, [r5, #0]
   bc8e6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bc8ea:	9b06      	ldr	r3, [sp, #24]
   bc8ec:	781b      	ldrb	r3, [r3, #0]
   bc8ee:	b92b      	cbnz	r3, bc8fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bc8f0:	f8d8 3000 	ldr.w	r3, [r8]
   bc8f4:	9a02      	ldr	r2, [sp, #8]
   bc8f6:	4413      	add	r3, r2
   bc8f8:	7c1b      	ldrb	r3, [r3, #16]
   bc8fa:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bc8fc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bc8fe:	e78e      	b.n	bc81e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc900:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bc902:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc904:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc906:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc908:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc90a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bc90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bc90e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc910:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bc912:	60a2      	str	r2, [r4, #8]
   bc914:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bc916:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc918:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc91a:	60e2      	str	r2, [r4, #12]
   bc91c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bc91e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc920:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc922:	6122      	str	r2, [r4, #16]
   bc924:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bc926:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bc928:	9b03      	ldr	r3, [sp, #12]
   bc92a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bc92c:	6162      	str	r2, [r4, #20]
   bc92e:	7623      	strb	r3, [r4, #24]
   bc930:	e7cf      	b.n	bc8d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bc934 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bc934:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc936:	4604      	mov	r4, r0
   bc938:	b087      	sub	sp, #28
   bc93a:	460d      	mov	r5, r1
        filter_(level, filters) {
   bc93c:	4626      	mov	r6, r4
        stream_(&stream) {
   bc93e:	4619      	mov	r1, r3
   bc940:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bc942:	4617      	mov	r7, r2
        stream_(&stream) {
   bc944:	f7f9 fa71 	bl	b5e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bc948:	4b0b      	ldr	r3, [pc, #44]	; (bc978 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bc94a:	f846 3b04 	str.w	r3, [r6], #4
   bc94e:	4669      	mov	r1, sp
   bc950:	a803      	add	r0, sp, #12
   bc952:	f7f9 fa6a 	bl	b5e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bc956:	aa03      	add	r2, sp, #12
   bc958:	4639      	mov	r1, r7
   bc95a:	4630      	mov	r0, r6
   bc95c:	f7ff fef0 	bl	bc740 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc960:	a803      	add	r0, sp, #12
   bc962:	f7f9 fa21 	bl	b5da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bc966:	4668      	mov	r0, sp
   bc968:	f7f9 fa1e 	bl	b5da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bc96c:	4b03      	ldr	r3, [pc, #12]	; (bc97c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bc96e:	6023      	str	r3, [r4, #0]
}
   bc970:	4620      	mov	r0, r4
        stream_(&stream) {
   bc972:	6225      	str	r5, [r4, #32]
}
   bc974:	b007      	add	sp, #28
   bc976:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc978:	000bfaec 	.word	0x000bfaec
   bc97c:	000c0714 	.word	0x000c0714

000bc980 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bc980:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc982:	460f      	mov	r7, r1
   bc984:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc986:	491d      	ldr	r1, [pc, #116]	; (bc9fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bc988:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc98a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bc98c:	4616      	mov	r6, r2
   bc98e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc990:	f002 f9e9 	bl	bed66 <strcmp>
   bc994:	b9c0      	cbnz	r0, bc9c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bc996:	b1a4      	cbz	r4, bc9c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bc998:	4629      	mov	r1, r5
   bc99a:	a801      	add	r0, sp, #4
   bc99c:	f7ff fcbc 	bl	bc318 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bc9a0:	4917      	ldr	r1, [pc, #92]	; (bca00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bc9a2:	2024      	movs	r0, #36	; 0x24
   bc9a4:	f001 fc18 	bl	be1d8 <_ZnwjRKSt9nothrow_t>
   bc9a8:	4605      	mov	r5, r0
   bc9aa:	b130      	cbz	r0, bc9ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bc9ac:	ab01      	add	r3, sp, #4
   bc9ae:	4632      	mov	r2, r6
   bc9b0:	4621      	mov	r1, r4
   bc9b2:	f7ff ffbf 	bl	bc934 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc9b6:	4b13      	ldr	r3, [pc, #76]	; (bca04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bc9b8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bc9ba:	a801      	add	r0, sp, #4
   bc9bc:	f7f9 f9f4 	bl	b5da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bc9c0:	462c      	mov	r4, r5
}
   bc9c2:	4620      	mov	r0, r4
   bc9c4:	b005      	add	sp, #20
   bc9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bc9c8:	490f      	ldr	r1, [pc, #60]	; (bca08 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bc9ca:	4638      	mov	r0, r7
   bc9cc:	f002 f9cb 	bl	bed66 <strcmp>
   bc9d0:	b990      	cbnz	r0, bc9f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bc9d2:	2c00      	cmp	r4, #0
   bc9d4:	d0f5      	beq.n	bc9c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bc9d6:	4629      	mov	r1, r5
   bc9d8:	a801      	add	r0, sp, #4
   bc9da:	f7ff fc9d 	bl	bc318 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bc9de:	4908      	ldr	r1, [pc, #32]	; (bca00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bc9e0:	2024      	movs	r0, #36	; 0x24
   bc9e2:	f001 fbf9 	bl	be1d8 <_ZnwjRKSt9nothrow_t>
   bc9e6:	4605      	mov	r5, r0
   bc9e8:	2800      	cmp	r0, #0
   bc9ea:	d0e6      	beq.n	bc9ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bc9ec:	ab01      	add	r3, sp, #4
   bc9ee:	4632      	mov	r2, r6
   bc9f0:	4621      	mov	r1, r4
   bc9f2:	f7ff ff9f 	bl	bc934 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc9f6:	e7e0      	b.n	bc9ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bc9f8:	2400      	movs	r4, #0
   bc9fa:	e7e2      	b.n	bc9c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bc9fc:	000c069e 	.word	0x000c069e
   bca00:	000c0868 	.word	0x000c0868
   bca04:	000c072c 	.word	0x000c072c
   bca08:	000c06a2 	.word	0x000c06a2

000bca0c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bca0c:	4b01      	ldr	r3, [pc, #4]	; (bca14 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bca0e:	4a02      	ldr	r2, [pc, #8]	; (bca18 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bca10:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bca12:	4770      	bx	lr
   bca14:	2003e658 	.word	0x2003e658
   bca18:	000c06b3 	.word	0x000c06b3

000bca1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bca1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bca20:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bca22:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bca26:	4604      	mov	r4, r0
   bca28:	460e      	mov	r6, r1
   bca2a:	4617      	mov	r7, r2
   bca2c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bca2e:	f001 f9b1 	bl	bdd94 <_Z16_fetch_usbserialv>
   bca32:	4581      	cmp	r9, r0
   bca34:	d04c      	beq.n	bcad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bca36:	792b      	ldrb	r3, [r5, #4]
   bca38:	0719      	lsls	r1, r3, #28
   bca3a:	d504      	bpl.n	bca46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bca3c:	696a      	ldr	r2, [r5, #20]
   bca3e:	4954      	ldr	r1, [pc, #336]	; (bcb90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bca40:	4620      	mov	r0, r4
   bca42:	f7ff fac0 	bl	bbfc6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bca46:	f1b8 0f00 	cmp.w	r8, #0
   bca4a:	d00d      	beq.n	bca68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bca4c:	215b      	movs	r1, #91	; 0x5b
   bca4e:	4620      	mov	r0, r4
   bca50:	f7ff faad 	bl	bbfae <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bca54:	4641      	mov	r1, r8
   bca56:	4620      	mov	r0, r4
   bca58:	f7ff fa9a 	bl	bbf90 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bca5c:	6823      	ldr	r3, [r4, #0]
   bca5e:	494d      	ldr	r1, [pc, #308]	; (bcb94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bca60:	68db      	ldr	r3, [r3, #12]
   bca62:	2202      	movs	r2, #2
   bca64:	4620      	mov	r0, r4
   bca66:	4798      	blx	r3
    if (attr.has_file) {
   bca68:	792b      	ldrb	r3, [r5, #4]
   bca6a:	07da      	lsls	r2, r3, #31
   bca6c:	d523      	bpl.n	bcab6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bca6e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bca72:	212f      	movs	r1, #47	; 0x2f
   bca74:	4640      	mov	r0, r8
   bca76:	f002 f9d5 	bl	bee24 <strrchr>
    if (s1) {
   bca7a:	b108      	cbz	r0, bca80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bca7c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bca80:	4641      	mov	r1, r8
   bca82:	4620      	mov	r0, r4
   bca84:	f7ff fa84 	bl	bbf90 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bca88:	792b      	ldrb	r3, [r5, #4]
   bca8a:	079b      	lsls	r3, r3, #30
   bca8c:	d508      	bpl.n	bcaa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bca8e:	213a      	movs	r1, #58	; 0x3a
   bca90:	4620      	mov	r0, r4
   bca92:	f7ff fa8c 	bl	bbfae <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bca96:	68ea      	ldr	r2, [r5, #12]
   bca98:	493f      	ldr	r1, [pc, #252]	; (bcb98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bca9a:	4620      	mov	r0, r4
   bca9c:	f7ff fa93 	bl	bbfc6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bcaa0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bcaa2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bcaa4:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bcaa8:	68db      	ldr	r3, [r3, #12]
   bcaaa:	bf14      	ite	ne
   bcaac:	493b      	ldrne	r1, [pc, #236]	; (bcb9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bcaae:	493c      	ldreq	r1, [pc, #240]	; (bcba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bcab0:	2202      	movs	r2, #2
            write(": ", 2);
   bcab2:	4620      	mov	r0, r4
   bcab4:	4798      	blx	r3
    if (attr.has_function) {
   bcab6:	792b      	ldrb	r3, [r5, #4]
   bcab8:	0758      	lsls	r0, r3, #29
   bcaba:	d51d      	bpl.n	bcaf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bcabc:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bcabe:	460b      	mov	r3, r1
   bcac0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bcac2:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcac6:	b160      	cbz	r0, bcae2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bcac8:	2820      	cmp	r0, #32
   bcaca:	d108      	bne.n	bcade <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bcacc:	4619      	mov	r1, r3
   bcace:	e7f7      	b.n	bcac0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bcad0:	4834      	ldr	r0, [pc, #208]	; (bcba4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bcad2:	f000 f966 	bl	bcda2 <_ZN5spark12NetworkClass9listeningEv>
   bcad6:	2800      	cmp	r0, #0
   bcad8:	d0ad      	beq.n	bca36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bcada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bcade:	2828      	cmp	r0, #40	; 0x28
   bcae0:	d1ee      	bne.n	bcac0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bcae2:	6823      	ldr	r3, [r4, #0]
   bcae4:	1a52      	subs	r2, r2, r1
   bcae6:	68db      	ldr	r3, [r3, #12]
   bcae8:	4620      	mov	r0, r4
   bcaea:	4798      	blx	r3
        write("(): ", 4);
   bcaec:	6823      	ldr	r3, [r4, #0]
   bcaee:	492e      	ldr	r1, [pc, #184]	; (bcba8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bcaf0:	68db      	ldr	r3, [r3, #12]
   bcaf2:	2204      	movs	r2, #4
   bcaf4:	4620      	mov	r0, r4
   bcaf6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bcaf8:	2100      	movs	r1, #0
   bcafa:	4638      	mov	r0, r7
   bcafc:	f7fe f80c 	bl	bab18 <log_level_name>
   bcb00:	4601      	mov	r1, r0
    write(s);
   bcb02:	4620      	mov	r0, r4
   bcb04:	f7ff fa44 	bl	bbf90 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bcb08:	6823      	ldr	r3, [r4, #0]
   bcb0a:	4925      	ldr	r1, [pc, #148]	; (bcba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bcb0c:	68db      	ldr	r3, [r3, #12]
   bcb0e:	2202      	movs	r2, #2
   bcb10:	4620      	mov	r0, r4
   bcb12:	4798      	blx	r3
    if (msg) {
   bcb14:	b11e      	cbz	r6, bcb1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bcb16:	4631      	mov	r1, r6
   bcb18:	4620      	mov	r0, r4
   bcb1a:	f7ff fa39 	bl	bbf90 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bcb1e:	792b      	ldrb	r3, [r5, #4]
   bcb20:	f013 0f30 	tst.w	r3, #48	; 0x30
   bcb24:	d02c      	beq.n	bcb80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bcb26:	6823      	ldr	r3, [r4, #0]
   bcb28:	4920      	ldr	r1, [pc, #128]	; (bcbac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bcb2a:	68db      	ldr	r3, [r3, #12]
   bcb2c:	2202      	movs	r2, #2
   bcb2e:	4620      	mov	r0, r4
   bcb30:	4798      	blx	r3
        if (attr.has_code) {
   bcb32:	792b      	ldrb	r3, [r5, #4]
   bcb34:	06d9      	lsls	r1, r3, #27
   bcb36:	d50a      	bpl.n	bcb4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bcb38:	6823      	ldr	r3, [r4, #0]
   bcb3a:	491d      	ldr	r1, [pc, #116]	; (bcbb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bcb3c:	68db      	ldr	r3, [r3, #12]
   bcb3e:	2207      	movs	r2, #7
   bcb40:	4620      	mov	r0, r4
   bcb42:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bcb44:	69aa      	ldr	r2, [r5, #24]
   bcb46:	491b      	ldr	r1, [pc, #108]	; (bcbb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bcb48:	4620      	mov	r0, r4
   bcb4a:	f7ff fa3c 	bl	bbfc6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bcb4e:	792b      	ldrb	r3, [r5, #4]
   bcb50:	069a      	lsls	r2, r3, #26
   bcb52:	d511      	bpl.n	bcb78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bcb54:	06db      	lsls	r3, r3, #27
   bcb56:	d505      	bpl.n	bcb64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bcb58:	6823      	ldr	r3, [r4, #0]
   bcb5a:	4910      	ldr	r1, [pc, #64]	; (bcb9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bcb5c:	68db      	ldr	r3, [r3, #12]
   bcb5e:	2202      	movs	r2, #2
   bcb60:	4620      	mov	r0, r4
   bcb62:	4798      	blx	r3
            write("details = ", 10);
   bcb64:	6823      	ldr	r3, [r4, #0]
   bcb66:	4914      	ldr	r1, [pc, #80]	; (bcbb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bcb68:	68db      	ldr	r3, [r3, #12]
   bcb6a:	4620      	mov	r0, r4
   bcb6c:	220a      	movs	r2, #10
   bcb6e:	4798      	blx	r3
            write(attr.details);
   bcb70:	69e9      	ldr	r1, [r5, #28]
   bcb72:	4620      	mov	r0, r4
   bcb74:	f7ff fa0c 	bl	bbf90 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bcb78:	215d      	movs	r1, #93	; 0x5d
   bcb7a:	4620      	mov	r0, r4
   bcb7c:	f7ff fa17 	bl	bbfae <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bcb80:	6823      	ldr	r3, [r4, #0]
   bcb82:	490e      	ldr	r1, [pc, #56]	; (bcbbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bcb84:	68db      	ldr	r3, [r3, #12]
   bcb86:	4620      	mov	r0, r4
   bcb88:	2202      	movs	r2, #2
}
   bcb8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bcb8e:	4718      	bx	r3
   bcb90:	000c06b7 	.word	0x000c06b7
   bcb94:	000c06be 	.word	0x000c06be
   bcb98:	000bfc2f 	.word	0x000bfc2f
   bcb9c:	000c06c1 	.word	0x000c06c1
   bcba0:	000c06c6 	.word	0x000c06c6
   bcba4:	2003e684 	.word	0x2003e684
   bcba8:	000c06c4 	.word	0x000c06c4
   bcbac:	000c06c9 	.word	0x000c06c9
   bcbb0:	000c06cc 	.word	0x000c06cc
   bcbb4:	000bf27e 	.word	0x000bf27e
   bcbb8:	000c06d4 	.word	0x000c06d4
   bcbbc:	000c06df 	.word	0x000c06df

000bcbc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bcbc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcbc4:	b085      	sub	sp, #20
    return stream_;
   bcbc6:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bcbca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bcbcc:	4605      	mov	r5, r0
   bcbce:	460f      	mov	r7, r1
   bcbd0:	4690      	mov	r8, r2
   bcbd2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bcbd4:	f001 f8de 	bl	bdd94 <_Z16_fetch_usbserialv>
   bcbd8:	4581      	cmp	r9, r0
   bcbda:	d105      	bne.n	bcbe8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bcbdc:	4849      	ldr	r0, [pc, #292]	; (bcd04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bcbde:	f000 f8e0 	bl	bcda2 <_ZN5spark12NetworkClass9listeningEv>
   bcbe2:	2800      	cmp	r0, #0
   bcbe4:	f040 808a 	bne.w	bccfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bcbe8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bcbea:	4a47      	ldr	r2, [pc, #284]	; (bcd08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bcbec:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bcbee:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bcbf2:	a801      	add	r0, sp, #4
        strm_(stream) {
   bcbf4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bcbf6:	f88d 9008 	strb.w	r9, [sp, #8]
   bcbfa:	f7ff f8b4 	bl	bbd66 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bcbfe:	4649      	mov	r1, r9
   bcc00:	4640      	mov	r0, r8
   bcc02:	f7fd ff89 	bl	bab18 <log_level_name>
    json.name("l", 1).value(s);
   bcc06:	4941      	ldr	r1, [pc, #260]	; (bcd0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bcc08:	4680      	mov	r8, r0
   bcc0a:	2201      	movs	r2, #1
   bcc0c:	a801      	add	r0, sp, #4
   bcc0e:	f7ff f939 	bl	bbe84 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc12:	4641      	mov	r1, r8
   bcc14:	f7ff f9ae 	bl	bbf74 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bcc18:	b13f      	cbz	r7, bcc2a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bcc1a:	493d      	ldr	r1, [pc, #244]	; (bcd10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bcc1c:	2201      	movs	r2, #1
   bcc1e:	a801      	add	r0, sp, #4
   bcc20:	f7ff f930 	bl	bbe84 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc24:	4639      	mov	r1, r7
   bcc26:	f7ff f9a5 	bl	bbf74 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bcc2a:	b13e      	cbz	r6, bcc3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bcc2c:	4939      	ldr	r1, [pc, #228]	; (bcd14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bcc2e:	2201      	movs	r2, #1
   bcc30:	a801      	add	r0, sp, #4
   bcc32:	f7ff f927 	bl	bbe84 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc36:	4631      	mov	r1, r6
   bcc38:	f7ff f99c 	bl	bbf74 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bcc3c:	7923      	ldrb	r3, [r4, #4]
   bcc3e:	07df      	lsls	r7, r3, #31
   bcc40:	d50e      	bpl.n	bcc60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bcc42:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bcc44:	212f      	movs	r1, #47	; 0x2f
   bcc46:	4630      	mov	r0, r6
   bcc48:	f002 f8ec 	bl	bee24 <strrchr>
    if (s1) {
   bcc4c:	b100      	cbz	r0, bcc50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bcc4e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bcc50:	4931      	ldr	r1, [pc, #196]	; (bcd18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bcc52:	2201      	movs	r2, #1
   bcc54:	a801      	add	r0, sp, #4
   bcc56:	f7ff f915 	bl	bbe84 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc5a:	4631      	mov	r1, r6
   bcc5c:	f7ff f98a 	bl	bbf74 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bcc60:	7923      	ldrb	r3, [r4, #4]
   bcc62:	079e      	lsls	r6, r3, #30
   bcc64:	d507      	bpl.n	bcc76 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bcc66:	492d      	ldr	r1, [pc, #180]	; (bcd1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bcc68:	2202      	movs	r2, #2
   bcc6a:	a801      	add	r0, sp, #4
   bcc6c:	f7ff f90a 	bl	bbe84 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc70:	68e1      	ldr	r1, [r4, #12]
   bcc72:	f7ff f885 	bl	bbd80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bcc76:	7923      	ldrb	r3, [r4, #4]
   bcc78:	0758      	lsls	r0, r3, #29
   bcc7a:	d514      	bpl.n	bcca6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bcc7c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bcc7e:	4633      	mov	r3, r6
   bcc80:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bcc82:	f813 2b01 	ldrb.w	r2, [r3], #1
   bcc86:	b12a      	cbz	r2, bcc94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bcc88:	2a20      	cmp	r2, #32
   bcc8a:	d101      	bne.n	bcc90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bcc8c:	461e      	mov	r6, r3
   bcc8e:	e7f7      	b.n	bcc80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bcc90:	2a28      	cmp	r2, #40	; 0x28
   bcc92:	d1f5      	bne.n	bcc80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bcc94:	4922      	ldr	r1, [pc, #136]	; (bcd20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bcc96:	2202      	movs	r2, #2
   bcc98:	a801      	add	r0, sp, #4
   bcc9a:	f7ff f8f3 	bl	bbe84 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc9e:	1bba      	subs	r2, r7, r6
   bcca0:	4631      	mov	r1, r6
   bcca2:	f7ff f8ff 	bl	bbea4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bcca6:	7923      	ldrb	r3, [r4, #4]
   bcca8:	0719      	lsls	r1, r3, #28
   bccaa:	d507      	bpl.n	bccbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bccac:	491d      	ldr	r1, [pc, #116]	; (bcd24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bccae:	2201      	movs	r2, #1
   bccb0:	a801      	add	r0, sp, #4
   bccb2:	f7ff f8e7 	bl	bbe84 <_ZN5spark10JSONWriter4nameEPKcj>
   bccb6:	6961      	ldr	r1, [r4, #20]
   bccb8:	f7ff f874 	bl	bbda4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bccbc:	7923      	ldrb	r3, [r4, #4]
   bccbe:	06da      	lsls	r2, r3, #27
   bccc0:	d508      	bpl.n	bccd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bccc2:	2204      	movs	r2, #4
   bccc4:	4918      	ldr	r1, [pc, #96]	; (bcd28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bccc6:	eb0d 0002 	add.w	r0, sp, r2
   bccca:	f7ff f8db 	bl	bbe84 <_ZN5spark10JSONWriter4nameEPKcj>
   bccce:	69a1      	ldr	r1, [r4, #24]
   bccd0:	f7ff f856 	bl	bbd80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bccd4:	7923      	ldrb	r3, [r4, #4]
   bccd6:	069b      	lsls	r3, r3, #26
   bccd8:	d507      	bpl.n	bccea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bccda:	4914      	ldr	r1, [pc, #80]	; (bcd2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bccdc:	2206      	movs	r2, #6
   bccde:	a801      	add	r0, sp, #4
   bcce0:	f7ff f8d0 	bl	bbe84 <_ZN5spark10JSONWriter4nameEPKcj>
   bcce4:	69e1      	ldr	r1, [r4, #28]
   bcce6:	f7ff f945 	bl	bbf74 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bccea:	a801      	add	r0, sp, #4
   bccec:	f7ff f825 	bl	bbd3a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bccf0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bccf2:	490f      	ldr	r1, [pc, #60]	; (bcd30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bccf4:	6803      	ldr	r3, [r0, #0]
   bccf6:	2202      	movs	r2, #2
   bccf8:	68db      	ldr	r3, [r3, #12]
   bccfa:	4798      	blx	r3
}
   bccfc:	b005      	add	sp, #20
   bccfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcd02:	bf00      	nop
   bcd04:	2003e684 	.word	0x2003e684
   bcd08:	000c06fc 	.word	0x000c06fc
   bcd0c:	000c0694 	.word	0x000c0694
   bcd10:	000bffc4 	.word	0x000bffc4
   bcd14:	000c0989 	.word	0x000c0989
   bcd18:	000bf38b 	.word	0x000bf38b
   bcd1c:	000c06e2 	.word	0x000c06e2
   bcd20:	000c06e5 	.word	0x000c06e5
   bcd24:	000bf99f 	.word	0x000bf99f
   bcd28:	000c06e8 	.word	0x000c06e8
   bcd2c:	000c06ed 	.word	0x000c06ed
   bcd30:	000c06df 	.word	0x000c06df

000bcd34 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bcd34:	2300      	movs	r3, #0
   bcd36:	6840      	ldr	r0, [r0, #4]
   bcd38:	461a      	mov	r2, r3
   bcd3a:	f7fd bfd9 	b.w	bacf0 <network_connect>

000bcd3e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bcd3e:	6840      	ldr	r0, [r0, #4]
   bcd40:	2200      	movs	r2, #0
   bcd42:	2102      	movs	r1, #2
   bcd44:	f7fd bfe4 	b.w	bad10 <network_disconnect>

000bcd48 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bcd48:	2200      	movs	r2, #0
   bcd4a:	6840      	ldr	r0, [r0, #4]
   bcd4c:	4611      	mov	r1, r2
   bcd4e:	f7fd bfd7 	b.w	bad00 <network_connecting>

000bcd52 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bcd52:	2200      	movs	r2, #0
   bcd54:	6840      	ldr	r0, [r0, #4]
   bcd56:	4611      	mov	r1, r2
   bcd58:	f7fd bfe2 	b.w	bad20 <network_ready>

000bcd5c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bcd5c:	2300      	movs	r3, #0
   bcd5e:	6840      	ldr	r0, [r0, #4]
   bcd60:	461a      	mov	r2, r3
   bcd62:	4619      	mov	r1, r3
   bcd64:	f7fd bfe4 	b.w	bad30 <network_on>

000bcd68 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bcd68:	2300      	movs	r3, #0
   bcd6a:	6840      	ldr	r0, [r0, #4]
   bcd6c:	461a      	mov	r2, r3
   bcd6e:	4619      	mov	r1, r3
   bcd70:	f7fd bfe6 	b.w	bad40 <network_off>

000bcd74 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bcd74:	6840      	ldr	r0, [r0, #4]
   bcd76:	2100      	movs	r1, #0
   bcd78:	f7fe b80a 	b.w	bad90 <network_is_on>

000bcd7c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bcd7c:	6840      	ldr	r0, [r0, #4]
   bcd7e:	2100      	movs	r1, #0
   bcd80:	f7fe b80e 	b.w	bada0 <network_is_off>

000bcd84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bcd84:	6840      	ldr	r0, [r0, #4]
   bcd86:	2200      	movs	r2, #0
   bcd88:	f081 0101 	eor.w	r1, r1, #1
   bcd8c:	f7fd bfe0 	b.w	bad50 <network_listen>

000bcd90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bcd90:	6840      	ldr	r0, [r0, #4]
   bcd92:	2200      	movs	r2, #0
   bcd94:	f7fd bfec 	b.w	bad70 <network_set_listen_timeout>

000bcd98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bcd98:	2200      	movs	r2, #0
   bcd9a:	6840      	ldr	r0, [r0, #4]
   bcd9c:	4611      	mov	r1, r2
   bcd9e:	f7fd bfef 	b.w	bad80 <network_get_listen_timeout>

000bcda2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bcda2:	2200      	movs	r2, #0
   bcda4:	6840      	ldr	r0, [r0, #4]
   bcda6:	4611      	mov	r1, r2
   bcda8:	f7fd bfda 	b.w	bad60 <network_listening>

000bcdac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bcdac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcdb0:	b095      	sub	sp, #84	; 0x54
   bcdb2:	4614      	mov	r4, r2
   bcdb4:	460d      	mov	r5, r1
   bcdb6:	4607      	mov	r7, r0
    IPAddress addr;
   bcdb8:	f7fe fe6e 	bl	bba98 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bcdbc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bcdbe:	221c      	movs	r2, #28
   bcdc0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bcdc2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bcdc4:	f001 ff44 	bl	bec50 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bcdc8:	2340      	movs	r3, #64	; 0x40
   bcdca:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bcdcc:	4620      	mov	r0, r4
   bcdce:	466b      	mov	r3, sp
   bcdd0:	aa0c      	add	r2, sp, #48	; 0x30
   bcdd2:	2100      	movs	r1, #0
   bcdd4:	f7fd fd40 	bl	ba858 <netdb_getaddrinfo>
    if (!r) {
   bcdd8:	4604      	mov	r4, r0
   bcdda:	2800      	cmp	r0, #0
   bcddc:	d14b      	bne.n	bce76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcdde:	4602      	mov	r2, r0
   bcde0:	2101      	movs	r1, #1
   bcde2:	6868      	ldr	r0, [r5, #4]
   bcde4:	f7fd ff9c 	bl	bad20 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcde8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcdea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcdec:	4622      	mov	r2, r4
   bcdee:	6868      	ldr	r0, [r5, #4]
   bcdf0:	f7fd ff96 	bl	bad20 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcdf4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcdf6:	4681      	mov	r9, r0
        bool ok = false;
   bcdf8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcdfa:	2e00      	cmp	r6, #0
   bcdfc:	d03b      	beq.n	bce76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bcdfe:	2900      	cmp	r1, #0
   bce00:	d139      	bne.n	bce76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bce02:	6873      	ldr	r3, [r6, #4]
   bce04:	2b02      	cmp	r3, #2
   bce06:	d003      	beq.n	bce10 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bce08:	2b0a      	cmp	r3, #10
   bce0a:	d011      	beq.n	bce30 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bce0c:	69f6      	ldr	r6, [r6, #28]
   bce0e:	e7f4      	b.n	bcdfa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bce10:	f1b8 0f00 	cmp.w	r8, #0
   bce14:	d0fa      	beq.n	bce0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bce16:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bce18:	a806      	add	r0, sp, #24
   bce1a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bce1c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bce1e:	f7fe fe69 	bl	bbaf4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bce22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bce24:	1d3c      	adds	r4, r7, #4
   bce26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bce28:	682b      	ldr	r3, [r5, #0]
   bce2a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bce2c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bce2e:	e7ed      	b.n	bce0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bce30:	f1b9 0f00 	cmp.w	r9, #0
   bce34:	d0ea      	beq.n	bce0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bce36:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bce38:	2210      	movs	r2, #16
   bce3a:	a801      	add	r0, sp, #4
   bce3c:	f001 ff08 	bl	bec50 <memset>
                    a.v = 6;
   bce40:	2306      	movs	r3, #6
   bce42:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bce46:	ad01      	add	r5, sp, #4
   bce48:	f104 0308 	add.w	r3, r4, #8
   bce4c:	3418      	adds	r4, #24
   bce4e:	6818      	ldr	r0, [r3, #0]
   bce50:	6859      	ldr	r1, [r3, #4]
   bce52:	462a      	mov	r2, r5
   bce54:	c203      	stmia	r2!, {r0, r1}
   bce56:	3308      	adds	r3, #8
   bce58:	42a3      	cmp	r3, r4
   bce5a:	4615      	mov	r5, r2
   bce5c:	d1f7      	bne.n	bce4e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bce5e:	a901      	add	r1, sp, #4
   bce60:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bce62:	ad07      	add	r5, sp, #28
   bce64:	f7fe fe26 	bl	bbab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bce68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bce6a:	1d3c      	adds	r4, r7, #4
   bce6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bce6e:	682b      	ldr	r3, [r5, #0]
   bce70:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bce72:	4649      	mov	r1, r9
   bce74:	e7ca      	b.n	bce0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bce76:	9800      	ldr	r0, [sp, #0]
   bce78:	f7fd fce6 	bl	ba848 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bce7c:	4638      	mov	r0, r7
   bce7e:	b015      	add	sp, #84	; 0x54
   bce80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bce84 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bce84:	4b02      	ldr	r3, [pc, #8]	; (bce90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bce86:	4a03      	ldr	r2, [pc, #12]	; (bce94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bce88:	601a      	str	r2, [r3, #0]
   bce8a:	2200      	movs	r2, #0
   bce8c:	605a      	str	r2, [r3, #4]

} // spark
   bce8e:	4770      	bx	lr
   bce90:	2003e684 	.word	0x2003e684
   bce94:	000c0774 	.word	0x000c0774

000bce98 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bce98:	b508      	push	{r3, lr}
            return &Wire1;
   bce9a:	f001 f939 	bl	be110 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bce9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bcea2:	f7fe bd67 	b.w	bb974 <_ZN7TwoWire4lockEv>

000bcea6 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bcea6:	b510      	push	{r4, lr}
   bcea8:	4604      	mov	r4, r0
    lock_(_lock)
   bceaa:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bceac:	b109      	cbz	r1, bceb2 <_ZN4PMICC1Eb+0xc>
        lock();
   bceae:	f7ff fff3 	bl	bce98 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bceb2:	4620      	mov	r0, r4
   bceb4:	bd10      	pop	{r4, pc}

000bceb6 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bceb6:	b508      	push	{r3, lr}
            return &Wire1;
   bceb8:	f001 f92a 	bl	be110 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bcebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bcec0:	f7fe bd61 	b.w	bb986 <_ZN7TwoWire6unlockEv>

000bcec4 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bcec4:	b510      	push	{r4, lr}
    if (lock_) {
   bcec6:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bcec8:	4604      	mov	r4, r0
    if (lock_) {
   bceca:	b10b      	cbz	r3, bced0 <_ZN4PMICD1Ev+0xc>
        unlock();
   bcecc:	f7ff fff3 	bl	bceb6 <_ZN4PMIC6unlockEv>
}
   bced0:	4620      	mov	r0, r4
   bced2:	bd10      	pop	{r4, pc}

000bced4 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bced4:	b510      	push	{r4, lr}
   bced6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bced8:	6800      	ldr	r0, [r0, #0]
   bceda:	f7ff ffec 	bl	bceb6 <_ZN4PMIC6unlockEv>
   bcede:	4620      	mov	r0, r4
   bcee0:	bd10      	pop	{r4, pc}

000bcee2 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bcee2:	b530      	push	{r4, r5, lr}
   bcee4:	b087      	sub	sp, #28
   bcee6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcee8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bceea:	f7ff ffd5 	bl	bce98 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bceee:	226b      	movs	r2, #107	; 0x6b
   bcef0:	2300      	movs	r3, #0
   bcef2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bcef6:	2401      	movs	r4, #1
   bcef8:	230a      	movs	r3, #10
   bcefa:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bcefe:	f001 f907 	bl	be110 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bcf02:	a902      	add	r1, sp, #8
   bcf04:	f7fe fd1a 	bl	bb93c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bcf08:	f001 f902 	bl	be110 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bcf0c:	6803      	ldr	r3, [r0, #0]
   bcf0e:	4629      	mov	r1, r5
   bcf10:	689b      	ldr	r3, [r3, #8]
   bcf12:	4798      	blx	r3
            return &Wire1;
   bcf14:	f001 f8fc 	bl	be110 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bcf18:	4621      	mov	r1, r4
   bcf1a:	f7fe fd27 	bl	bb96c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bcf1e:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bcf20:	f001 f8f6 	bl	be110 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bcf24:	a902      	add	r1, sp, #8
   bcf26:	f7fe fcd9 	bl	bb8dc <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bcf2a:	f001 f8f1 	bl	be110 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bcf2e:	6803      	ldr	r3, [r0, #0]
   bcf30:	695b      	ldr	r3, [r3, #20]
   bcf32:	4798      	blx	r3
   bcf34:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bcf36:	a801      	add	r0, sp, #4
   bcf38:	f7ff ffcc 	bl	bced4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcf3c:	b2e0      	uxtb	r0, r4
   bcf3e:	b007      	add	sp, #28
   bcf40:	bd30      	pop	{r4, r5, pc}

000bcf42 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bcf42:	b570      	push	{r4, r5, r6, lr}
   bcf44:	b086      	sub	sp, #24
   bcf46:	460d      	mov	r5, r1
   bcf48:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcf4a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcf4c:	f7ff ffa4 	bl	bce98 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bcf50:	226b      	movs	r2, #107	; 0x6b
   bcf52:	2300      	movs	r3, #0
   bcf54:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bcf58:	2601      	movs	r6, #1
   bcf5a:	230a      	movs	r3, #10
   bcf5c:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bcf60:	f001 f8d6 	bl	be110 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bcf64:	a902      	add	r1, sp, #8
   bcf66:	f7fe fce9 	bl	bb93c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bcf6a:	f001 f8d1 	bl	be110 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bcf6e:	6803      	ldr	r3, [r0, #0]
   bcf70:	4629      	mov	r1, r5
   bcf72:	689b      	ldr	r3, [r3, #8]
   bcf74:	4798      	blx	r3
            return &Wire1;
   bcf76:	f001 f8cb 	bl	be110 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bcf7a:	6803      	ldr	r3, [r0, #0]
   bcf7c:	4621      	mov	r1, r4
   bcf7e:	689b      	ldr	r3, [r3, #8]
   bcf80:	4798      	blx	r3
            return &Wire1;
   bcf82:	f001 f8c5 	bl	be110 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bcf86:	4631      	mov	r1, r6
   bcf88:	f7fe fcf0 	bl	bb96c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bcf8c:	a801      	add	r0, sp, #4
   bcf8e:	f7ff ffa1 	bl	bced4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcf92:	b006      	add	sp, #24
   bcf94:	bd70      	pop	{r4, r5, r6, pc}

000bcf96 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bcf96:	b513      	push	{r0, r1, r4, lr}
   bcf98:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcf9a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcf9c:	f7ff ff7c 	bl	bce98 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bcfa0:	2101      	movs	r1, #1
   bcfa2:	4620      	mov	r0, r4
   bcfa4:	f7ff ff9d 	bl	bcee2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bcfa8:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bcfac:	2b10      	cmp	r3, #16
   bcfae:	d007      	beq.n	bcfc0 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bcfb0:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bcfb4:	f042 0210 	orr.w	r2, r2, #16
   bcfb8:	2101      	movs	r1, #1
   bcfba:	4620      	mov	r0, r4
   bcfbc:	f7ff ffc1 	bl	bcf42 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bcfc0:	a801      	add	r0, sp, #4
   bcfc2:	f7ff ff87 	bl	bced4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcfc6:	2001      	movs	r0, #1
   bcfc8:	b002      	add	sp, #8
   bcfca:	bd10      	pop	{r4, pc}

000bcfcc <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bcfcc:	b513      	push	{r0, r1, r4, lr}
   bcfce:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcfd0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcfd2:	f7ff ff61 	bl	bce98 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bcfd6:	2101      	movs	r1, #1
   bcfd8:	4620      	mov	r0, r4
   bcfda:	f7ff ff82 	bl	bcee2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bcfde:	f010 0f30 	tst.w	r0, #48	; 0x30
   bcfe2:	d005      	beq.n	bcff0 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bcfe4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bcfe8:	2101      	movs	r1, #1
   bcfea:	4620      	mov	r0, r4
   bcfec:	f7ff ffa9 	bl	bcf42 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bcff0:	a801      	add	r0, sp, #4
   bcff2:	f7ff ff6f 	bl	bced4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcff6:	2001      	movs	r0, #1
   bcff8:	b002      	add	sp, #8
   bcffa:	bd10      	pop	{r4, pc}

000bcffc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bcffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcffe:	4606      	mov	r6, r0
   bd000:	460d      	mov	r5, r1
  size_t n = 0;
   bd002:	188f      	adds	r7, r1, r2
   bd004:	2400      	movs	r4, #0
  while (size--) {
   bd006:	42bd      	cmp	r5, r7
   bd008:	d00c      	beq.n	bd024 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bd00a:	6833      	ldr	r3, [r6, #0]
   bd00c:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd010:	689b      	ldr	r3, [r3, #8]
   bd012:	4630      	mov	r0, r6
   bd014:	4798      	blx	r3
     if (chunk>=0)
   bd016:	1e03      	subs	r3, r0, #0
   bd018:	db01      	blt.n	bd01e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bd01a:	441c      	add	r4, r3
  while (size--) {
   bd01c:	e7f3      	b.n	bd006 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bd01e:	2c00      	cmp	r4, #0
   bd020:	bf08      	it	eq
   bd022:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bd024:	4620      	mov	r0, r4
   bd026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd028 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bd028:	b513      	push	{r0, r1, r4, lr}
   bd02a:	4604      	mov	r4, r0
    }
   bd02c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bd02e:	b159      	cbz	r1, bd048 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bd030:	9101      	str	r1, [sp, #4]
   bd032:	f001 fec8 	bl	bedc6 <strlen>
   bd036:	6823      	ldr	r3, [r4, #0]
   bd038:	9901      	ldr	r1, [sp, #4]
   bd03a:	68db      	ldr	r3, [r3, #12]
   bd03c:	4602      	mov	r2, r0
   bd03e:	4620      	mov	r0, r4
    }
   bd040:	b002      	add	sp, #8
   bd042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bd046:	4718      	bx	r3
    }
   bd048:	b002      	add	sp, #8
   bd04a:	bd10      	pop	{r4, pc}

000bd04c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bd04c:	b508      	push	{r3, lr}
  return write(str);
   bd04e:	f7ff ffeb 	bl	bd028 <_ZN5Print5writeEPKc>
}
   bd052:	bd08      	pop	{r3, pc}

000bd054 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bd054:	6803      	ldr	r3, [r0, #0]
   bd056:	689b      	ldr	r3, [r3, #8]
   bd058:	4718      	bx	r3

000bd05a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bd05a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bd05c:	210d      	movs	r1, #13
{
   bd05e:	4605      	mov	r5, r0
  size_t n = print('\r');
   bd060:	f7ff fff8 	bl	bd054 <_ZN5Print5printEc>
  n += print('\n');
   bd064:	210a      	movs	r1, #10
  size_t n = print('\r');
   bd066:	4604      	mov	r4, r0
  n += print('\n');
   bd068:	4628      	mov	r0, r5
   bd06a:	f7ff fff3 	bl	bd054 <_ZN5Print5printEc>
  return n;
}
   bd06e:	4420      	add	r0, r4
   bd070:	bd38      	pop	{r3, r4, r5, pc}

000bd072 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bd072:	b530      	push	{r4, r5, lr}
   bd074:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bd076:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bd078:	2a01      	cmp	r2, #1
  *str = '\0';
   bd07a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bd07e:	bf98      	it	ls
   bd080:	220a      	movls	r2, #10
   bd082:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bd084:	460d      	mov	r5, r1
   bd086:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bd08a:	fb01 5312 	mls	r3, r1, r2, r5
   bd08e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd092:	2b09      	cmp	r3, #9
   bd094:	bf94      	ite	ls
   bd096:	3330      	addls	r3, #48	; 0x30
   bd098:	3337      	addhi	r3, #55	; 0x37
   bd09a:	b2db      	uxtb	r3, r3
  } while(n);
   bd09c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd09e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bd0a2:	d9ef      	bls.n	bd084 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bd0a4:	4621      	mov	r1, r4
   bd0a6:	f7ff ffbf 	bl	bd028 <_ZN5Print5writeEPKc>
}
   bd0aa:	b00b      	add	sp, #44	; 0x2c
   bd0ac:	bd30      	pop	{r4, r5, pc}
	...

000bd0b0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bd0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd0b4:	ec55 4b10 	vmov	r4, r5, d0
   bd0b8:	4606      	mov	r6, r0
   bd0ba:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bd0bc:	ee10 2a10 	vmov	r2, s0
   bd0c0:	ee10 0a10 	vmov	r0, s0
   bd0c4:	462b      	mov	r3, r5
   bd0c6:	4629      	mov	r1, r5
   bd0c8:	f001 fcea 	bl	beaa0 <__aeabi_dcmpun>
   bd0cc:	b140      	cbz	r0, bd0e0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bd0ce:	4953      	ldr	r1, [pc, #332]	; (bd21c <_ZN5Print10printFloatEdh+0x16c>)
   bd0d0:	4630      	mov	r0, r6
   bd0d2:	f7ff ffa9 	bl	bd028 <_ZN5Print5writeEPKc>
   bd0d6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bd0d8:	4650      	mov	r0, sl
   bd0da:	b003      	add	sp, #12
   bd0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bd0e0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bd0e4:	4b4e      	ldr	r3, [pc, #312]	; (bd220 <_ZN5Print10printFloatEdh+0x170>)
   bd0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd0ea:	4620      	mov	r0, r4
   bd0ec:	4649      	mov	r1, r9
   bd0ee:	f001 fcd7 	bl	beaa0 <__aeabi_dcmpun>
   bd0f2:	b948      	cbnz	r0, bd108 <_ZN5Print10printFloatEdh+0x58>
   bd0f4:	4b4a      	ldr	r3, [pc, #296]	; (bd220 <_ZN5Print10printFloatEdh+0x170>)
   bd0f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd0fa:	4620      	mov	r0, r4
   bd0fc:	4649      	mov	r1, r9
   bd0fe:	f001 fcb1 	bl	bea64 <__aeabi_dcmple>
   bd102:	b908      	cbnz	r0, bd108 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bd104:	4947      	ldr	r1, [pc, #284]	; (bd224 <_ZN5Print10printFloatEdh+0x174>)
   bd106:	e7e3      	b.n	bd0d0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bd108:	4b47      	ldr	r3, [pc, #284]	; (bd228 <_ZN5Print10printFloatEdh+0x178>)
   bd10a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd10e:	4620      	mov	r0, r4
   bd110:	4629      	mov	r1, r5
   bd112:	f001 fcbb 	bl	bea8c <__aeabi_dcmpgt>
   bd116:	b108      	cbz	r0, bd11c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bd118:	4944      	ldr	r1, [pc, #272]	; (bd22c <_ZN5Print10printFloatEdh+0x17c>)
   bd11a:	e7d9      	b.n	bd0d0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bd11c:	4b44      	ldr	r3, [pc, #272]	; (bd230 <_ZN5Print10printFloatEdh+0x180>)
   bd11e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd122:	4620      	mov	r0, r4
   bd124:	4629      	mov	r1, r5
   bd126:	f001 fc93 	bl	bea50 <__aeabi_dcmplt>
   bd12a:	2800      	cmp	r0, #0
   bd12c:	d1f4      	bne.n	bd118 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bd12e:	2200      	movs	r2, #0
   bd130:	2300      	movs	r3, #0
   bd132:	4620      	mov	r0, r4
   bd134:	4629      	mov	r1, r5
   bd136:	f001 fc8b 	bl	bea50 <__aeabi_dcmplt>
   bd13a:	b1d0      	cbz	r0, bd172 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bd13c:	212d      	movs	r1, #45	; 0x2d
   bd13e:	4630      	mov	r0, r6
   bd140:	f7ff ff88 	bl	bd054 <_ZN5Print5printEc>
     number = -number;
   bd144:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bd148:	4682      	mov	sl, r0
     number = -number;
   bd14a:	461d      	mov	r5, r3
  double rounding = 0.5;
   bd14c:	4939      	ldr	r1, [pc, #228]	; (bd234 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bd14e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bd23c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bd152:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bd156:	2000      	movs	r0, #0
    rounding /= 10.0;
   bd158:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bd15c:	fa5f f38b 	uxtb.w	r3, fp
   bd160:	429f      	cmp	r7, r3
   bd162:	d908      	bls.n	bd176 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bd164:	4642      	mov	r2, r8
   bd166:	464b      	mov	r3, r9
   bd168:	f001 fb2a 	bl	be7c0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bd16c:	f10b 0b01 	add.w	fp, fp, #1
   bd170:	e7f4      	b.n	bd15c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bd172:	4682      	mov	sl, r0
   bd174:	e7ea      	b.n	bd14c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bd176:	4622      	mov	r2, r4
   bd178:	462b      	mov	r3, r5
   bd17a:	f001 f841 	bl	be200 <__adddf3>
   bd17e:	460d      	mov	r5, r1
   bd180:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bd182:	f001 fccb 	bl	beb1c <__aeabi_d2uiz>
   bd186:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bd188:	f001 f976 	bl	be478 <__aeabi_ui2d>
   bd18c:	4602      	mov	r2, r0
   bd18e:	460b      	mov	r3, r1
   bd190:	4620      	mov	r0, r4
   bd192:	4629      	mov	r1, r5
   bd194:	f001 f832 	bl	be1fc <__aeabi_dsub>
        return printNumber(val, base) + t;
   bd198:	220a      	movs	r2, #10
   bd19a:	4604      	mov	r4, r0
   bd19c:	460d      	mov	r5, r1
   bd19e:	4630      	mov	r0, r6
   bd1a0:	4641      	mov	r1, r8
   bd1a2:	f7ff ff66 	bl	bd072 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bd1a6:	4482      	add	sl, r0
  if (digits > 0) {
   bd1a8:	2f00      	cmp	r7, #0
   bd1aa:	d095      	beq.n	bd0d8 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bd1ac:	4922      	ldr	r1, [pc, #136]	; (bd238 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bd1ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; bd23c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bd1b2:	4630      	mov	r0, r6
   bd1b4:	f7ff ff38 	bl	bd028 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bd1b8:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bd1bc:	4482      	add	sl, r0
  while (digits-- > 0)
   bd1be:	2f00      	cmp	r7, #0
   bd1c0:	d08a      	beq.n	bd0d8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bd1c2:	4642      	mov	r2, r8
   bd1c4:	464b      	mov	r3, r9
   bd1c6:	4620      	mov	r0, r4
   bd1c8:	4629      	mov	r1, r5
   bd1ca:	f001 f9cf 	bl	be56c <__aeabi_dmul>
   bd1ce:	4604      	mov	r4, r0
   bd1d0:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bd1d2:	f001 fc7b 	bl	beacc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bd1d6:	f1b0 0b00 	subs.w	fp, r0, #0
   bd1da:	da1c      	bge.n	bd216 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bd1dc:	212d      	movs	r1, #45	; 0x2d
   bd1de:	4630      	mov	r0, r6
   bd1e0:	f7ff ff38 	bl	bd054 <_ZN5Print5printEc>
            val = -n;
   bd1e4:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bd1e8:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bd1ea:	220a      	movs	r2, #10
   bd1ec:	4630      	mov	r0, r6
   bd1ee:	9301      	str	r3, [sp, #4]
   bd1f0:	f7ff ff3f 	bl	bd072 <_ZN5Print11printNumberEmh>
   bd1f4:	9b01      	ldr	r3, [sp, #4]
   bd1f6:	4418      	add	r0, r3
    n += print(toPrint);
   bd1f8:	4482      	add	sl, r0
    remainder -= toPrint;
   bd1fa:	4658      	mov	r0, fp
   bd1fc:	f001 f94c 	bl	be498 <__aeabi_i2d>
   bd200:	4602      	mov	r2, r0
   bd202:	460b      	mov	r3, r1
   bd204:	4620      	mov	r0, r4
   bd206:	4629      	mov	r1, r5
   bd208:	f000 fff8 	bl	be1fc <__aeabi_dsub>
   bd20c:	3f01      	subs	r7, #1
   bd20e:	4604      	mov	r4, r0
   bd210:	460d      	mov	r5, r1
   bd212:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bd214:	e7d3      	b.n	bd1be <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bd216:	4659      	mov	r1, fp
        size_t t = 0;
   bd218:	2300      	movs	r3, #0
   bd21a:	e7e6      	b.n	bd1ea <_ZN5Print10printFloatEdh+0x13a>
   bd21c:	000c07a8 	.word	0x000c07a8
   bd220:	7fefffff 	.word	0x7fefffff
   bd224:	000c07ac 	.word	0x000c07ac
   bd228:	41efffff 	.word	0x41efffff
   bd22c:	000c07b0 	.word	0x000c07b0
   bd230:	c1efffff 	.word	0xc1efffff
   bd234:	3fe00000 	.word	0x3fe00000
   bd238:	000c07e8 	.word	0x000c07e8
   bd23c:	40240000 	.word	0x40240000

000bd240 <_ZN5Print5printEfi>:
{
   bd240:	b538      	push	{r3, r4, r5, lr}
   bd242:	4604      	mov	r4, r0
   bd244:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bd248:	b2cd      	uxtb	r5, r1
   bd24a:	f001 f937 	bl	be4bc <__aeabi_f2d>
   bd24e:	ec41 0b10 	vmov	d0, r0, r1
   bd252:	4629      	mov	r1, r5
   bd254:	4620      	mov	r0, r4
}
   bd256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bd25a:	f7ff bf29 	b.w	bd0b0 <_ZN5Print10printFloatEdh>

000bd25e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bd25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd262:	b086      	sub	sp, #24
   bd264:	af00      	add	r7, sp, #0
   bd266:	4605      	mov	r5, r0
   bd268:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bd26a:	1d38      	adds	r0, r7, #4
   bd26c:	2114      	movs	r1, #20
{
   bd26e:	4614      	mov	r4, r2
    va_copy(args2, args);
   bd270:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bd272:	f7fd fdcd 	bl	bae10 <vsnprintf>

    if (n<bufsize)
   bd276:	2813      	cmp	r0, #19
   bd278:	d80e      	bhi.n	bd298 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bd27a:	1d39      	adds	r1, r7, #4
   bd27c:	4628      	mov	r0, r5
   bd27e:	f7ff fed3 	bl	bd028 <_ZN5Print5writeEPKc>
   bd282:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bd284:	b11e      	cbz	r6, bd28e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bd286:	4628      	mov	r0, r5
   bd288:	f7ff fee7 	bl	bd05a <_ZN5Print7printlnEv>
   bd28c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bd28e:	4620      	mov	r0, r4
   bd290:	3718      	adds	r7, #24
   bd292:	46bd      	mov	sp, r7
   bd294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bd298:	f100 0308 	add.w	r3, r0, #8
   bd29c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bd2a0:	46e8      	mov	r8, sp
        char bigger[n+1];
   bd2a2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bd2a6:	4622      	mov	r2, r4
   bd2a8:	1c41      	adds	r1, r0, #1
   bd2aa:	683b      	ldr	r3, [r7, #0]
   bd2ac:	4668      	mov	r0, sp
   bd2ae:	f7fd fdaf 	bl	bae10 <vsnprintf>
  return write(str);
   bd2b2:	4669      	mov	r1, sp
   bd2b4:	4628      	mov	r0, r5
   bd2b6:	f7ff feb7 	bl	bd028 <_ZN5Print5writeEPKc>
   bd2ba:	4604      	mov	r4, r0
   bd2bc:	46c5      	mov	sp, r8
   bd2be:	e7e1      	b.n	bd284 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bd2c0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bd2c0:	b510      	push	{r4, lr}
  if (0 == max) {
   bd2c2:	4604      	mov	r4, r0
   bd2c4:	b128      	cbz	r0, bd2d2 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bd2c6:	f001 fcf9 	bl	becbc <rand>
   bd2ca:	fb90 f3f4 	sdiv	r3, r0, r4
   bd2ce:	fb03 0414 	mls	r4, r3, r4, r0
}
   bd2d2:	4620      	mov	r0, r4
   bd2d4:	bd10      	pop	{r4, pc}

000bd2d6 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bd2d6:	4288      	cmp	r0, r1
{
   bd2d8:	b510      	push	{r4, lr}
   bd2da:	4604      	mov	r4, r0
  if (min >= max) {
   bd2dc:	da03      	bge.n	bd2e6 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bd2de:	1a08      	subs	r0, r1, r0
   bd2e0:	f7ff ffee 	bl	bd2c0 <_Z6randomi>
   bd2e4:	4404      	add	r4, r0
}
   bd2e6:	4620      	mov	r0, r4
   bd2e8:	bd10      	pop	{r4, pc}

000bd2ea <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   bd2ea:	f001 bcb9 	b.w	bec60 <srand>
	...

000bd2f0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bd2f0:	4b01      	ldr	r3, [pc, #4]	; (bd2f8 <_GLOBAL__sub_I_RGB+0x8>)
   bd2f2:	2200      	movs	r2, #0
   bd2f4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bd2f6:	4770      	bx	lr
   bd2f8:	2003e68c 	.word	0x2003e68c

000bd2fc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bd2fc:	2100      	movs	r1, #0
   bd2fe:	f7fd baf3 	b.w	ba8e8 <hal_spi_release>

000bd302 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bd302:	2100      	movs	r1, #0
   bd304:	f7fd bae8 	b.w	ba8d8 <hal_spi_acquire>

000bd308 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bd308:	b510      	push	{r4, lr}
   bd30a:	4604      	mov	r4, r0
   bd30c:	4608      	mov	r0, r1
{
    _spi = spi;
   bd30e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bd310:	f7fd fac2 	bl	ba898 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bd314:	2300      	movs	r3, #0
   bd316:	6063      	str	r3, [r4, #4]
}
   bd318:	4620      	mov	r0, r4
   bd31a:	bd10      	pop	{r4, pc}

000bd31c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bd31c:	b513      	push	{r0, r1, r4, lr}
   bd31e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bd320:	7800      	ldrb	r0, [r0, #0]
   bd322:	f7ff ffee 	bl	bd302 <_ZN8SPIClass4lockEv.isra.0>
   bd326:	b958      	cbnz	r0, bd340 <_ZN8SPIClass5beginEv+0x24>
   bd328:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bd32a:	9001      	str	r0, [sp, #4]
   bd32c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bd330:	f7fd fa9a 	bl	ba868 <hal_spi_begin>
        unlock();
   bd334:	9801      	ldr	r0, [sp, #4]
    }
}
   bd336:	b002      	add	sp, #8
   bd338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd33c:	f7ff bfde 	b.w	bd2fc <_ZN8SPIClass6unlockEv.isra.0>
   bd340:	b002      	add	sp, #8
   bd342:	bd10      	pop	{r4, pc}

000bd344 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bd344:	b513      	push	{r0, r1, r4, lr}
   bd346:	4604      	mov	r4, r0
    if (!lock())
   bd348:	7800      	ldrb	r0, [r0, #0]
   bd34a:	f7ff ffda 	bl	bd302 <_ZN8SPIClass4lockEv.isra.0>
   bd34e:	b948      	cbnz	r0, bd364 <_ZN8SPIClass3endEv+0x20>
   bd350:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bd352:	9001      	str	r0, [sp, #4]
   bd354:	f7fd fa90 	bl	ba878 <hal_spi_end>
        unlock();
   bd358:	9801      	ldr	r0, [sp, #4]
    }
}
   bd35a:	b002      	add	sp, #8
   bd35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd360:	f7ff bfcc 	b.w	bd2fc <_ZN8SPIClass6unlockEv.isra.0>
   bd364:	b002      	add	sp, #8
   bd366:	bd10      	pop	{r4, pc}

000bd368 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bd368:	7800      	ldrb	r0, [r0, #0]
   bd36a:	f7ff bfc7 	b.w	bd2fc <_ZN8SPIClass6unlockEv.isra.0>
	...

000bd370 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bd370:	0840      	lsrs	r0, r0, #1
{
   bd372:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bd374:	6018      	str	r0, [r3, #0]
   bd376:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bd378:	6818      	ldr	r0, [r3, #0]
   bd37a:	4288      	cmp	r0, r1
   bd37c:	b2e5      	uxtb	r5, r4
   bd37e:	d906      	bls.n	bd38e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bd380:	3401      	adds	r4, #1
   bd382:	2c08      	cmp	r4, #8
   bd384:	d002      	beq.n	bd38c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bd386:	0840      	lsrs	r0, r0, #1
   bd388:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bd38a:	e7f5      	b.n	bd378 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bd38c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bd38e:	4b02      	ldr	r3, [pc, #8]	; (bd398 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bd390:	5d5b      	ldrb	r3, [r3, r5]
   bd392:	7013      	strb	r3, [r2, #0]
}
   bd394:	bd30      	pop	{r4, r5, pc}
   bd396:	bf00      	nop
   bd398:	000c07b4 	.word	0x000c07b4

000bd39c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bd39c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd3a0:	4606      	mov	r6, r0
   bd3a2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bd3a4:	7800      	ldrb	r0, [r0, #0]
{
   bd3a6:	460c      	mov	r4, r1
    CHECK(lock());
   bd3a8:	f7ff ffab 	bl	bd302 <_ZN8SPIClass4lockEv.isra.0>
   bd3ac:	2800      	cmp	r0, #0
   bd3ae:	db1b      	blt.n	bd3e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bd3b0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bd3b2:	2214      	movs	r2, #20
   bd3b4:	2100      	movs	r1, #0
   bd3b6:	a809      	add	r0, sp, #36	; 0x24
   bd3b8:	f001 fc4a 	bl	bec50 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bd3bc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bd3be:	2200      	movs	r2, #0
   bd3c0:	a909      	add	r1, sp, #36	; 0x24
   bd3c2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bd3c4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bd3c8:	f7fd fa76 	bl	ba8b8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bd3cc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bd3d0:	b113      	cbz	r3, bd3d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bd3d2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bd3d6:	b155      	cbz	r5, bd3ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bd3d8:	2700      	movs	r7, #0
   bd3da:	46b9      	mov	r9, r7
   bd3dc:	46b8      	mov	r8, r7
   bd3de:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bd3e0:	7923      	ldrb	r3, [r4, #4]
   bd3e2:	b15d      	cbz	r5, bd3fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bd3e4:	b1c3      	cbz	r3, bd418 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bd3e6:	2000      	movs	r0, #0
}
   bd3e8:	b00f      	add	sp, #60	; 0x3c
   bd3ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bd3ee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bd3f2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bd3f6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bd3fa:	e7f1      	b.n	bd3e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bd3fc:	2b00      	cmp	r3, #0
   bd3fe:	d135      	bne.n	bd46c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bd400:	68a3      	ldr	r3, [r4, #8]
   bd402:	4543      	cmp	r3, r8
   bd404:	d108      	bne.n	bd418 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bd406:	f88d 9020 	strb.w	r9, [sp, #32]
   bd40a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd40e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd412:	89a3      	ldrh	r3, [r4, #12]
   bd414:	429a      	cmp	r2, r3
   bd416:	d0e6      	beq.n	bd3e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bd418:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd41a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bd41c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd420:	980a      	ldr	r0, [sp, #40]	; 0x28
   bd422:	ab04      	add	r3, sp, #16
   bd424:	f10d 020f 	add.w	r2, sp, #15
   bd428:	f7ff ffa2 	bl	bd370 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bd42c:	7921      	ldrb	r1, [r4, #4]
   bd42e:	b985      	cbnz	r5, bd452 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bd430:	b989      	cbnz	r1, bd456 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd432:	68a3      	ldr	r3, [r4, #8]
   bd434:	4543      	cmp	r3, r8
   bd436:	d30e      	bcc.n	bd456 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bd438:	f88d 9020 	strb.w	r9, [sp, #32]
   bd43c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd440:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd444:	89a3      	ldrh	r3, [r4, #12]
   bd446:	429a      	cmp	r2, r3
   bd448:	d105      	bne.n	bd456 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bd44a:	9b04      	ldr	r3, [sp, #16]
   bd44c:	4543      	cmp	r3, r8
   bd44e:	d102      	bne.n	bd456 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd450:	e7c9      	b.n	bd3e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bd452:	2900      	cmp	r1, #0
   bd454:	d1f9      	bne.n	bd44a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bd456:	2300      	movs	r3, #0
   bd458:	9301      	str	r3, [sp, #4]
   bd45a:	7b63      	ldrb	r3, [r4, #13]
   bd45c:	9300      	str	r3, [sp, #0]
   bd45e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bd462:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bd464:	7830      	ldrb	r0, [r6, #0]
   bd466:	f7fd fa2f 	bl	ba8c8 <hal_spi_set_settings>
   bd46a:	e7bc      	b.n	bd3e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bd46c:	e9cd 5500 	strd	r5, r5, [sp]
   bd470:	462b      	mov	r3, r5
   bd472:	462a      	mov	r2, r5
   bd474:	2101      	movs	r1, #1
   bd476:	e7f5      	b.n	bd464 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bd478 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bd478:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bd47a:	7800      	ldrb	r0, [r0, #0]
   bd47c:	f7fd fa04 	bl	ba888 <hal_spi_transfer>
}
   bd480:	b2c0      	uxtb	r0, r0
   bd482:	bd08      	pop	{r3, pc}

000bd484 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bd484:	4770      	bx	lr

000bd486 <_ZN8SPIClass15detachInterruptEv>:
   bd486:	4770      	bx	lr

000bd488 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bd488:	b510      	push	{r4, lr}
   bd48a:	4604      	mov	r4, r0
{
	free(buffer);
   bd48c:	6800      	ldr	r0, [r0, #0]
   bd48e:	f7fd fc97 	bl	badc0 <free>
}
   bd492:	4620      	mov	r0, r4
   bd494:	bd10      	pop	{r4, pc}

000bd496 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bd496:	b510      	push	{r4, lr}
   bd498:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bd49a:	6800      	ldr	r0, [r0, #0]
   bd49c:	b108      	cbz	r0, bd4a2 <_ZN6String10invalidateEv+0xc>
   bd49e:	f7fd fc8f 	bl	badc0 <free>
	buffer = NULL;
   bd4a2:	2300      	movs	r3, #0
	capacity = len = 0;
   bd4a4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bd4a8:	6023      	str	r3, [r4, #0]
}
   bd4aa:	bd10      	pop	{r4, pc}

000bd4ac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bd4ac:	b538      	push	{r3, r4, r5, lr}
   bd4ae:	4604      	mov	r4, r0
   bd4b0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bd4b2:	6800      	ldr	r0, [r0, #0]
   bd4b4:	3101      	adds	r1, #1
   bd4b6:	f7fd fc8b 	bl	badd0 <realloc>
	if (newbuffer) {
   bd4ba:	b110      	cbz	r0, bd4c2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bd4bc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bd4c0:	2001      	movs	r0, #1
	}
	return 0;
}
   bd4c2:	bd38      	pop	{r3, r4, r5, pc}

000bd4c4 <_ZN6String7reserveEj>:
{
   bd4c4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bd4c6:	6803      	ldr	r3, [r0, #0]
{
   bd4c8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bd4ca:	b123      	cbz	r3, bd4d6 <_ZN6String7reserveEj+0x12>
   bd4cc:	6843      	ldr	r3, [r0, #4]
   bd4ce:	428b      	cmp	r3, r1
   bd4d0:	d301      	bcc.n	bd4d6 <_ZN6String7reserveEj+0x12>
   bd4d2:	2001      	movs	r0, #1
}
   bd4d4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bd4d6:	4620      	mov	r0, r4
   bd4d8:	f7ff ffe8 	bl	bd4ac <_ZN6String12changeBufferEj>
   bd4dc:	2800      	cmp	r0, #0
   bd4de:	d0f9      	beq.n	bd4d4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bd4e0:	68a3      	ldr	r3, [r4, #8]
   bd4e2:	2b00      	cmp	r3, #0
   bd4e4:	d1f5      	bne.n	bd4d2 <_ZN6String7reserveEj+0xe>
   bd4e6:	6822      	ldr	r2, [r4, #0]
   bd4e8:	7013      	strb	r3, [r2, #0]
   bd4ea:	e7f2      	b.n	bd4d2 <_ZN6String7reserveEj+0xe>

000bd4ec <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bd4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd4ee:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bd4f0:	4611      	mov	r1, r2
   bd4f2:	9201      	str	r2, [sp, #4]
{
   bd4f4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bd4f6:	f7ff ffe5 	bl	bd4c4 <_ZN6String7reserveEj>
   bd4fa:	9a01      	ldr	r2, [sp, #4]
   bd4fc:	b928      	cbnz	r0, bd50a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bd4fe:	4620      	mov	r0, r4
   bd500:	f7ff ffc9 	bl	bd496 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bd504:	4620      	mov	r0, r4
   bd506:	b003      	add	sp, #12
   bd508:	bd30      	pop	{r4, r5, pc}
	len = length;
   bd50a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bd50c:	4629      	mov	r1, r5
   bd50e:	6820      	ldr	r0, [r4, #0]
   bd510:	f001 fb76 	bl	bec00 <memcpy>
	buffer[len] = 0;
   bd514:	6822      	ldr	r2, [r4, #0]
   bd516:	68a3      	ldr	r3, [r4, #8]
   bd518:	2100      	movs	r1, #0
   bd51a:	54d1      	strb	r1, [r2, r3]
	return *this;
   bd51c:	e7f2      	b.n	bd504 <_ZN6String4copyEPKcj+0x18>

000bd51e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bd51e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bd520:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bd522:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bd526:	4604      	mov	r4, r0
	len = 0;
   bd528:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd52a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bd52c:	b141      	cbz	r1, bd540 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bd52e:	4608      	mov	r0, r1
   bd530:	9101      	str	r1, [sp, #4]
   bd532:	f001 fc48 	bl	bedc6 <strlen>
   bd536:	9901      	ldr	r1, [sp, #4]
   bd538:	4602      	mov	r2, r0
   bd53a:	4620      	mov	r0, r4
   bd53c:	f7ff ffd6 	bl	bd4ec <_ZN6String4copyEPKcj>
}
   bd540:	4620      	mov	r0, r4
   bd542:	b002      	add	sp, #8
   bd544:	bd10      	pop	{r4, pc}

000bd546 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bd546:	b538      	push	{r3, r4, r5, lr}
   bd548:	4605      	mov	r5, r0
	if (buffer) {
   bd54a:	6800      	ldr	r0, [r0, #0]
{
   bd54c:	460c      	mov	r4, r1
	if (buffer) {
   bd54e:	b168      	cbz	r0, bd56c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bd550:	686a      	ldr	r2, [r5, #4]
   bd552:	688b      	ldr	r3, [r1, #8]
   bd554:	429a      	cmp	r2, r3
   bd556:	d307      	bcc.n	bd568 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bd558:	6809      	ldr	r1, [r1, #0]
   bd55a:	f001 fc0e 	bl	bed7a <strcpy>
			len = rhs.len;
   bd55e:	68a3      	ldr	r3, [r4, #8]
   bd560:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bd562:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bd564:	60a3      	str	r3, [r4, #8]
}
   bd566:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bd568:	f7fd fc2a 	bl	badc0 <free>
	buffer = rhs.buffer;
   bd56c:	6823      	ldr	r3, [r4, #0]
   bd56e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bd570:	6863      	ldr	r3, [r4, #4]
   bd572:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bd574:	68a3      	ldr	r3, [r4, #8]
   bd576:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bd578:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bd57a:	e9c4 3300 	strd	r3, r3, [r4]
   bd57e:	e7f1      	b.n	bd564 <_ZN6String4moveERS_+0x1e>

000bd580 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bd580:	b510      	push	{r4, lr}
	buffer = NULL;
   bd582:	2300      	movs	r3, #0
	capacity = 0;
   bd584:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bd588:	4604      	mov	r4, r0
	len = 0;
   bd58a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd58c:	7303      	strb	r3, [r0, #12]
	move(rval);
   bd58e:	f7ff ffda 	bl	bd546 <_ZN6String4moveERS_>
}
   bd592:	4620      	mov	r0, r4
   bd594:	bd10      	pop	{r4, pc}

000bd596 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bd596:	4288      	cmp	r0, r1
{
   bd598:	b510      	push	{r4, lr}
   bd59a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bd59c:	d005      	beq.n	bd5aa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bd59e:	680b      	ldr	r3, [r1, #0]
   bd5a0:	b12b      	cbz	r3, bd5ae <_ZN6StringaSERKS_+0x18>
   bd5a2:	688a      	ldr	r2, [r1, #8]
   bd5a4:	4619      	mov	r1, r3
   bd5a6:	f7ff ffa1 	bl	bd4ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd5aa:	4620      	mov	r0, r4
   bd5ac:	bd10      	pop	{r4, pc}
	else invalidate();
   bd5ae:	f7ff ff72 	bl	bd496 <_ZN6String10invalidateEv>
   bd5b2:	e7fa      	b.n	bd5aa <_ZN6StringaSERKS_+0x14>

000bd5b4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bd5b4:	b510      	push	{r4, lr}
	buffer = NULL;
   bd5b6:	2300      	movs	r3, #0
String::String(const String &value)
   bd5b8:	4604      	mov	r4, r0
	capacity = 0;
   bd5ba:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bd5be:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd5c0:	7303      	strb	r3, [r0, #12]
	*this = value;
   bd5c2:	f7ff ffe8 	bl	bd596 <_ZN6StringaSERKS_>
}
   bd5c6:	4620      	mov	r0, r4
   bd5c8:	bd10      	pop	{r4, pc}

000bd5ca <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bd5ca:	4288      	cmp	r0, r1
{
   bd5cc:	b510      	push	{r4, lr}
   bd5ce:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bd5d0:	d001      	beq.n	bd5d6 <_ZN6StringaSEOS_+0xc>
   bd5d2:	f7ff ffb8 	bl	bd546 <_ZN6String4moveERS_>
	return *this;
}
   bd5d6:	4620      	mov	r0, r4
   bd5d8:	bd10      	pop	{r4, pc}

000bd5da <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bd5da:	b513      	push	{r0, r1, r4, lr}
   bd5dc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bd5de:	b159      	cbz	r1, bd5f8 <_ZN6StringaSEPKc+0x1e>
   bd5e0:	4608      	mov	r0, r1
   bd5e2:	9101      	str	r1, [sp, #4]
   bd5e4:	f001 fbef 	bl	bedc6 <strlen>
   bd5e8:	9901      	ldr	r1, [sp, #4]
   bd5ea:	4602      	mov	r2, r0
   bd5ec:	4620      	mov	r0, r4
   bd5ee:	f7ff ff7d 	bl	bd4ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd5f2:	4620      	mov	r0, r4
   bd5f4:	b002      	add	sp, #8
   bd5f6:	bd10      	pop	{r4, pc}
	else invalidate();
   bd5f8:	f7ff ff4d 	bl	bd496 <_ZN6String10invalidateEv>
   bd5fc:	e7f9      	b.n	bd5f2 <_ZN6StringaSEPKc+0x18>

000bd5fe <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bd5fe:	b570      	push	{r4, r5, r6, lr}
   bd600:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bd602:	460e      	mov	r6, r1
   bd604:	b909      	cbnz	r1, bd60a <_ZN6String6concatEPKcj+0xc>
   bd606:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bd608:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bd60a:	b16a      	cbz	r2, bd628 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bd60c:	6884      	ldr	r4, [r0, #8]
   bd60e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bd610:	4621      	mov	r1, r4
   bd612:	f7ff ff57 	bl	bd4c4 <_ZN6String7reserveEj>
   bd616:	2800      	cmp	r0, #0
   bd618:	d0f5      	beq.n	bd606 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bd61a:	6828      	ldr	r0, [r5, #0]
   bd61c:	68ab      	ldr	r3, [r5, #8]
   bd61e:	4631      	mov	r1, r6
   bd620:	4418      	add	r0, r3
   bd622:	f001 fbaa 	bl	bed7a <strcpy>
	len = newlen;
   bd626:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bd628:	2001      	movs	r0, #1
   bd62a:	e7ed      	b.n	bd608 <_ZN6String6concatEPKcj+0xa>

000bd62c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bd62c:	b513      	push	{r0, r1, r4, lr}
   bd62e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bd630:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bd632:	b151      	cbz	r1, bd64a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bd634:	9101      	str	r1, [sp, #4]
   bd636:	f001 fbc6 	bl	bedc6 <strlen>
   bd63a:	9901      	ldr	r1, [sp, #4]
   bd63c:	4602      	mov	r2, r0
   bd63e:	4620      	mov	r0, r4
}
   bd640:	b002      	add	sp, #8
   bd642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bd646:	f7ff bfda 	b.w	bd5fe <_ZN6String6concatEPKcj>
}
   bd64a:	b002      	add	sp, #8
   bd64c:	bd10      	pop	{r4, pc}

000bd64e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bd64e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bd650:	688a      	ldr	r2, [r1, #8]
   bd652:	6809      	ldr	r1, [r1, #0]
{
   bd654:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bd656:	f7ff ffd2 	bl	bd5fe <_ZN6String6concatEPKcj>
   bd65a:	b910      	cbnz	r0, bd662 <_ZplRK15StringSumHelperRK6String+0x14>
   bd65c:	4620      	mov	r0, r4
   bd65e:	f7ff ff1a 	bl	bd496 <_ZN6String10invalidateEv>
	return a;
}
   bd662:	4620      	mov	r0, r4
   bd664:	bd10      	pop	{r4, pc}

000bd666 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bd666:	b513      	push	{r0, r1, r4, lr}
   bd668:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bd66a:	b929      	cbnz	r1, bd678 <_ZplRK15StringSumHelperPKc+0x12>
   bd66c:	4620      	mov	r0, r4
   bd66e:	f7ff ff12 	bl	bd496 <_ZN6String10invalidateEv>
	return a;
}
   bd672:	4620      	mov	r0, r4
   bd674:	b002      	add	sp, #8
   bd676:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bd678:	4608      	mov	r0, r1
   bd67a:	9101      	str	r1, [sp, #4]
   bd67c:	f001 fba3 	bl	bedc6 <strlen>
   bd680:	9901      	ldr	r1, [sp, #4]
   bd682:	4602      	mov	r2, r0
   bd684:	4620      	mov	r0, r4
   bd686:	f7ff ffba 	bl	bd5fe <_ZN6String6concatEPKcj>
   bd68a:	2800      	cmp	r0, #0
   bd68c:	d0ee      	beq.n	bd66c <_ZplRK15StringSumHelperPKc+0x6>
   bd68e:	e7f0      	b.n	bd672 <_ZplRK15StringSumHelperPKc+0xc>

000bd690 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bd690:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bd692:	6882      	ldr	r2, [r0, #8]
   bd694:	b93a      	cbnz	r2, bd6a6 <_ZNK6String6equalsEPKc+0x16>
   bd696:	b121      	cbz	r1, bd6a2 <_ZNK6String6equalsEPKc+0x12>
   bd698:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bd69a:	fab0 f080 	clz	r0, r0
   bd69e:	0940      	lsrs	r0, r0, #5
   bd6a0:	e000      	b.n	bd6a4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bd6a2:	2001      	movs	r0, #1
}
   bd6a4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bd6a6:	6800      	ldr	r0, [r0, #0]
   bd6a8:	b909      	cbnz	r1, bd6ae <_ZNK6String6equalsEPKc+0x1e>
   bd6aa:	7800      	ldrb	r0, [r0, #0]
   bd6ac:	e7f5      	b.n	bd69a <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bd6ae:	f001 fb5a 	bl	bed66 <strcmp>
   bd6b2:	e7f2      	b.n	bd69a <_ZNK6String6equalsEPKc+0xa>

000bd6b4 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bd6b4:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bd6b6:	6883      	ldr	r3, [r0, #8]
   bd6b8:	688a      	ldr	r2, [r1, #8]
   bd6ba:	4293      	cmp	r3, r2
   bd6bc:	d30b      	bcc.n	bd6d6 <_ZNK6String8endsWithERKS_+0x22>
   bd6be:	6800      	ldr	r0, [r0, #0]
   bd6c0:	b140      	cbz	r0, bd6d4 <_ZNK6String8endsWithERKS_+0x20>
   bd6c2:	6809      	ldr	r1, [r1, #0]
   bd6c4:	b149      	cbz	r1, bd6da <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bd6c6:	1a9b      	subs	r3, r3, r2
   bd6c8:	4418      	add	r0, r3
   bd6ca:	f001 fb4c 	bl	bed66 <strcmp>
   bd6ce:	fab0 f080 	clz	r0, r0
   bd6d2:	0940      	lsrs	r0, r0, #5
}
   bd6d4:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bd6d6:	2000      	movs	r0, #0
   bd6d8:	e7fc      	b.n	bd6d4 <_ZNK6String8endsWithERKS_+0x20>
   bd6da:	4608      	mov	r0, r1
   bd6dc:	e7fa      	b.n	bd6d4 <_ZNK6String8endsWithERKS_+0x20>
	...

000bd6e0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bd6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bd6e2:	429a      	cmp	r2, r3
{
   bd6e4:	460f      	mov	r7, r1
   bd6e6:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bd6e8:	490c      	ldr	r1, [pc, #48]	; (bd71c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bd6ea:	bf88      	it	hi
   bd6ec:	4613      	movhi	r3, r2
{
   bd6ee:	4614      	mov	r4, r2
   bd6f0:	4606      	mov	r6, r0
	if (left > right) {
   bd6f2:	bf84      	itt	hi
   bd6f4:	462c      	movhi	r4, r5
   bd6f6:	461d      	movhi	r5, r3
	String out;
   bd6f8:	f7ff ff11 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bd6fc:	68bb      	ldr	r3, [r7, #8]
   bd6fe:	42a3      	cmp	r3, r4
   bd700:	d30a      	bcc.n	bd718 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bd702:	6839      	ldr	r1, [r7, #0]
   bd704:	42ab      	cmp	r3, r5
   bd706:	bf94      	ite	ls
   bd708:	ebc4 0203 	rsbls	r2, r4, r3
   bd70c:	ebc4 0205 	rsbhi	r2, r4, r5
   bd710:	4421      	add	r1, r4
   bd712:	4630      	mov	r0, r6
   bd714:	f7ff feea 	bl	bd4ec <_ZN6String4copyEPKcj>
	return out;
}
   bd718:	4630      	mov	r0, r6
   bd71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd71c:	000c06e1 	.word	0x000c06e1

000bd720 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bd720:	b40e      	push	{r1, r2, r3}
   bd722:	b570      	push	{r4, r5, r6, lr}
   bd724:	b087      	sub	sp, #28
   bd726:	ad0b      	add	r5, sp, #44	; 0x2c
   bd728:	4604      	mov	r4, r0
   bd72a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd72e:	9201      	str	r2, [sp, #4]
   bd730:	462b      	mov	r3, r5
   bd732:	2105      	movs	r1, #5
   bd734:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bd736:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd738:	f7fd fb6a 	bl	bae10 <vsnprintf>
    va_end(marker);

    String result;
   bd73c:	490b      	ldr	r1, [pc, #44]	; (bd76c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd73e:	4606      	mov	r6, r0
    String result;
   bd740:	4620      	mov	r0, r4
   bd742:	f7ff feec 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bd746:	4631      	mov	r1, r6
   bd748:	4620      	mov	r0, r4
   bd74a:	f7ff febb 	bl	bd4c4 <_ZN6String7reserveEj>
    if (result.buffer) {
   bd74e:	6820      	ldr	r0, [r4, #0]
   bd750:	b130      	cbz	r0, bd760 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bd752:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bd754:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bd756:	462b      	mov	r3, r5
   bd758:	1c71      	adds	r1, r6, #1
   bd75a:	f7fd fb59 	bl	bae10 <vsnprintf>
        va_end(marker);
        result.len = n;
   bd75e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bd760:	4620      	mov	r0, r4
   bd762:	b007      	add	sp, #28
   bd764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bd768:	b003      	add	sp, #12
   bd76a:	4770      	bx	lr
   bd76c:	000c06e1 	.word	0x000c06e1

000bd770 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bd770:	b510      	push	{r4, lr}
   bd772:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bd774:	6800      	ldr	r0, [r0, #0]
   bd776:	b118      	cbz	r0, bd780 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bd778:	f7fd fb22 	bl	badc0 <free>
            wakeupSource_ = nullptr;
   bd77c:	2300      	movs	r3, #0
   bd77e:	6023      	str	r3, [r4, #0]
        }
    }
   bd780:	bd10      	pop	{r4, pc}

000bd782 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bd782:	b538      	push	{r3, r4, r5, lr}
   bd784:	460c      	mov	r4, r1
   bd786:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bd788:	f7ff fff2 	bl	bd770 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bd78c:	b154      	cbz	r4, bd7a4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bd78e:	8820      	ldrh	r0, [r4, #0]
   bd790:	f7fd fb0e 	bl	badb0 <malloc>
   bd794:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bd796:	b128      	cbz	r0, bd7a4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bd798:	8822      	ldrh	r2, [r4, #0]
   bd79a:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bd79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bd7a0:	f001 ba2e 	b.w	bec00 <memcpy>
    }
   bd7a4:	bd38      	pop	{r3, r4, r5, pc}

000bd7a6 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bd7a6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bd7a8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bd7ac:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bd7ae:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bd7b2:	f8c0 3006 	str.w	r3, [r0, #6]
   bd7b6:	894b      	ldrh	r3, [r1, #10]
   bd7b8:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bd7ba:	460c      	mov	r4, r1
   bd7bc:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bd7be:	f7ff ffd7 	bl	bd770 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bd7c2:	6823      	ldr	r3, [r4, #0]
   bd7c4:	b113      	cbz	r3, bd7cc <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bd7c6:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bd7c8:	2300      	movs	r3, #0
   bd7ca:	6023      	str	r3, [r4, #0]
    }
   bd7cc:	bd38      	pop	{r3, r4, r5, pc}

000bd7ce <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bd7ce:	b507      	push	{r0, r1, r2, lr}
   bd7d0:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bd7d2:	2100      	movs	r1, #0
{
   bd7d4:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bd7d6:	9100      	str	r1, [sp, #0]
   bd7d8:	2001      	movs	r0, #1
   bd7da:	218c      	movs	r1, #140	; 0x8c
   bd7dc:	f7fd fa26 	bl	bac2c <system_reset>
}
   bd7e0:	b003      	add	sp, #12
   bd7e2:	f85d fb04 	ldr.w	pc, [sp], #4

000bd7e6 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bd7e6:	4601      	mov	r1, r0
    reset(0, flags);
   bd7e8:	2000      	movs	r0, #0
   bd7ea:	f7ff bff0 	b.w	bd7ce <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bd7ee <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bd7ee:	2000      	movs	r0, #0
   bd7f0:	f7ff bff9 	b.w	bd7e6 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bd7f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bd7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd7f6:	4d2b      	ldr	r5, [pc, #172]	; (bd8a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bd7f8:	7d0b      	ldrb	r3, [r1, #20]
   bd7fa:	4604      	mov	r4, r0
   bd7fc:	b08b      	sub	sp, #44	; 0x2c
   bd7fe:	4608      	mov	r0, r1
   bd800:	1daf      	adds	r7, r5, #6
   bd802:	2b00      	cmp	r3, #0
   bd804:	d036      	beq.n	bd874 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bd806:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bd808:	791b      	ldrb	r3, [r3, #4]
   bd80a:	2b00      	cmp	r3, #0
   bd80c:	d032      	beq.n	bd874 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bd80e:	4b26      	ldr	r3, [pc, #152]	; (bd8a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bd810:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bd812:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bd814:	a902      	add	r1, sp, #8
   bd816:	3004      	adds	r0, #4
   bd818:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bd81c:	f7fd f9fc 	bl	bac18 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bd820:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bd824:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bd828:	b200      	sxth	r0, r0
   bd82a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bd82e:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bd832:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bd834:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bd836:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bd838:	4628      	mov	r0, r5
   bd83a:	f7ff ffa2 	bl	bd782 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bd83e:	a802      	add	r0, sp, #8
   bd840:	f7ff ff96 	bl	bd770 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bd844:	2300      	movs	r3, #0
   bd846:	6023      	str	r3, [r4, #0]
   bd848:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bd84a:	71a3      	strb	r3, [r4, #6]
   bd84c:	8123      	strh	r3, [r4, #8]
   bd84e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bd852:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bd854:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bd858:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bd85a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bd85e:	f8c4 3006 	str.w	r3, [r4, #6]
   bd862:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bd864:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bd866:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bd868:	4620      	mov	r0, r4
   bd86a:	f7ff ff8a 	bl	bd782 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bd86e:	4620      	mov	r0, r4
   bd870:	b00b      	add	sp, #44	; 0x2c
   bd872:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bd874:	2600      	movs	r6, #0
   bd876:	2320      	movs	r3, #32
   bd878:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bd87c:	4b0b      	ldr	r3, [pc, #44]	; (bd8ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bd87e:	9300      	str	r3, [sp, #0]
   bd880:	aa02      	add	r2, sp, #8
   bd882:	4633      	mov	r3, r6
   bd884:	490a      	ldr	r1, [pc, #40]	; (bd8b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bd886:	2032      	movs	r0, #50	; 0x32
   bd888:	f7fd f936 	bl	baaf8 <log_message>
            : wakeupSource_(nullptr),
   bd88c:	4b06      	ldr	r3, [pc, #24]	; (bd8a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bd88e:	4805      	ldr	r0, [pc, #20]	; (bd8a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bd890:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bd892:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bd896:	a902      	add	r1, sp, #8
   bd898:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bd89c:	f7ff ff83 	bl	bd7a6 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bd8a0:	e7cd      	b.n	bd83e <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bd8a2:	bf00      	nop
   bd8a4:	2003e69c 	.word	0x2003e69c
   bd8a8:	ffff0000 	.word	0xffff0000
   bd8ac:	000c07c3 	.word	0x000c07c3
   bd8b0:	000c07bc 	.word	0x000c07bc

000bd8b4 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bd8b4:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bd8b6:	2420      	movs	r4, #32
{
   bd8b8:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bd8ba:	4622      	mov	r2, r4
   bd8bc:	2100      	movs	r1, #0
   bd8be:	4668      	mov	r0, sp
   bd8c0:	f001 f9c6 	bl	bec50 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bd8c4:	2100      	movs	r1, #0
   bd8c6:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bd8c8:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bd8cc:	f7fc febc 	bl	ba648 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bd8d0:	9801      	ldr	r0, [sp, #4]
   bd8d2:	b008      	add	sp, #32
   bd8d4:	bd10      	pop	{r4, pc}
	...

000bd8d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bd8d8:	4b05      	ldr	r3, [pc, #20]	; (bd8f0 <_GLOBAL__sub_I_System+0x18>)
   bd8da:	2202      	movs	r2, #2
   bd8dc:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bd8de:	4b05      	ldr	r3, [pc, #20]	; (bd8f4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bd8e0:	4a05      	ldr	r2, [pc, #20]	; (bd8f8 <_GLOBAL__sub_I_System+0x20>)
   bd8e2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bd8e4:	2000      	movs	r0, #0
   bd8e6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bd8ea:	f7fd b937 	b.w	bab5c <set_system_mode>
   bd8ee:	bf00      	nop
   bd8f0:	2003e6a8 	.word	0x2003e6a8
   bd8f4:	2003e69c 	.word	0x2003e69c
   bd8f8:	ffff0000 	.word	0xffff0000

000bd8fc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bd8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bd900:	4a15      	ldr	r2, [pc, #84]	; (bd958 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bd902:	f8df 8060 	ldr.w	r8, [pc, #96]	; bd964 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bd906:	e9d2 6300 	ldrd	r6, r3, [r2]
   bd90a:	1980      	adds	r0, r0, r6
   bd90c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bd910:	4b12      	ldr	r3, [pc, #72]	; (bd95c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bd912:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bd916:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bd91a:	1986      	adds	r6, r0, r6
   bd91c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bd920:	42bb      	cmp	r3, r7
   bd922:	bf08      	it	eq
   bd924:	42b2      	cmpeq	r2, r6
{
   bd926:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bd928:	d013      	beq.n	bd952 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bd92a:	a903      	add	r1, sp, #12
   bd92c:	4668      	mov	r0, sp
   bd92e:	e9cd 6700 	strd	r6, r7, [sp]
   bd932:	f7fd faa5 	bl	bae80 <localtime_r>
	calendar_time.tm_year += 1900;
   bd936:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd938:	4d09      	ldr	r5, [pc, #36]	; (bd960 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bd93a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd93e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bd940:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bd946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bd94a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd94e:	6823      	ldr	r3, [r4, #0]
   bd950:	602b      	str	r3, [r5, #0]
    }
}
   bd952:	b00c      	add	sp, #48	; 0x30
   bd954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd958:	2003e6e0 	.word	0x2003e6e0
   bd95c:	2003e6d8 	.word	0x2003e6d8
   bd960:	2003e6b4 	.word	0x2003e6b4
   bd964:	2003e6e8 	.word	0x2003e6e8

000bd968 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bd968:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd96a:	2000      	movs	r0, #0
   bd96c:	f7fd f998 	bl	baca0 <spark_sync_time_pending>
   bd970:	b128      	cbz	r0, bd97e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd972:	f7fd f985 	bl	bac80 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd976:	f080 0001 	eor.w	r0, r0, #1
   bd97a:	b2c0      	uxtb	r0, r0
    }
   bd97c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd97e:	2001      	movs	r0, #1
   bd980:	e7fc      	b.n	bd97c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bd984 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bd984:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bd986:	f7ff ffb9 	bl	bd8fc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bd98a:	4b01      	ldr	r3, [pc, #4]	; (bd990 <_ZN9TimeClass4hourEx+0xc>)
   bd98c:	6898      	ldr	r0, [r3, #8]
   bd98e:	bd08      	pop	{r3, pc}
   bd990:	2003e6b4 	.word	0x2003e6b4

000bd994 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bd994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd996:	4602      	mov	r2, r0
   bd998:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bd99a:	4668      	mov	r0, sp
    struct timeval tv = {
   bd99c:	2100      	movs	r1, #0
    };
   bd99e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bd9a2:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bd9a6:	f7fc fe97 	bl	ba6d8 <hal_rtc_set_time>
   bd9aa:	4602      	mov	r2, r0
   bd9ac:	b910      	cbnz	r0, bd9b4 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bd9ae:	4601      	mov	r1, r0
   bd9b0:	f7fd f90c 	bl	babcc <system_notify_time_changed>
    }
}
   bd9b4:	b005      	add	sp, #20
   bd9b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd9bc <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bd9bc:	b530      	push	{r4, r5, lr}
   bd9be:	b093      	sub	sp, #76	; 0x4c
   bd9c0:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bd9c4:	4b19      	ldr	r3, [pc, #100]	; (bda2c <_ZN9TimeClass7timeStrEx+0x70>)
{
   bd9c6:	4604      	mov	r4, r0
    t += time_zone_cache;
   bd9c8:	e9d3 1000 	ldrd	r1, r0, [r3]
   bd9cc:	9b01      	ldr	r3, [sp, #4]
   bd9ce:	1852      	adds	r2, r2, r1
   bd9d0:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bd9d4:	4816      	ldr	r0, [pc, #88]	; (bda30 <_ZN9TimeClass7timeStrEx+0x74>)
   bd9d6:	e9d0 1000 	ldrd	r1, r0, [r0]
   bd9da:	1852      	adds	r2, r2, r1
   bd9dc:	eb43 0300 	adc.w	r3, r3, r0
   bd9e0:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bd9e4:	2224      	movs	r2, #36	; 0x24
   bd9e6:	eb0d 0002 	add.w	r0, sp, r2
   bd9ea:	2100      	movs	r1, #0
   bd9ec:	f001 f930 	bl	bec50 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bd9f0:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bd9f2:	a909      	add	r1, sp, #36	; 0x24
   bd9f4:	4668      	mov	r0, sp
   bd9f6:	f7fd fa43 	bl	bae80 <localtime_r>
    char ascstr[26] = {};
   bd9fa:	2216      	movs	r2, #22
   bd9fc:	4629      	mov	r1, r5
   bd9fe:	a803      	add	r0, sp, #12
   bda00:	9502      	str	r5, [sp, #8]
   bda02:	f001 f925 	bl	bec50 <memset>
    asctime_r(&calendar_time, ascstr);
   bda06:	a902      	add	r1, sp, #8
   bda08:	a809      	add	r0, sp, #36	; 0x24
   bda0a:	f001 f8a7 	bl	beb5c <asctime_r>
    int len = strlen(ascstr);
   bda0e:	a802      	add	r0, sp, #8
   bda10:	f001 f9d9 	bl	bedc6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bda14:	ab12      	add	r3, sp, #72	; 0x48
   bda16:	4418      	add	r0, r3
    return String(ascstr);
   bda18:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bda1a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bda1e:	4620      	mov	r0, r4
   bda20:	f7ff fd7d 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
}
   bda24:	4620      	mov	r0, r4
   bda26:	b013      	add	sp, #76	; 0x4c
   bda28:	bd30      	pop	{r4, r5, pc}
   bda2a:	bf00      	nop
   bda2c:	2003e6e0 	.word	0x2003e6e0
   bda30:	2003e6d8 	.word	0x2003e6d8

000bda34 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bda34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bda38:	b0a4      	sub	sp, #144	; 0x90
   bda3a:	4607      	mov	r7, r0
   bda3c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bda3e:	a814      	add	r0, sp, #80	; 0x50
{
   bda40:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bda42:	223f      	movs	r2, #63	; 0x3f
{
   bda44:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bda46:	f001 f9da 	bl	bedfe <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bda4a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bda4c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bda4e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bda52:	f001 f9b8 	bl	bedc6 <strlen>
   bda56:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bda58:	bb4c      	cbnz	r4, bdaae <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bda5a:	4929      	ldr	r1, [pc, #164]	; (bdb00 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bda5c:	a803      	add	r0, sp, #12
   bda5e:	f001 f98c 	bl	bed7a <strcpy>
   bda62:	ac14      	add	r4, sp, #80	; 0x50
{
   bda64:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bda66:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bda6a:	45b1      	cmp	r9, r6
   bda6c:	d934      	bls.n	bdad8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bda6e:	7823      	ldrb	r3, [r4, #0]
   bda70:	2b25      	cmp	r3, #37	; 0x25
   bda72:	f106 0a01 	add.w	sl, r6, #1
   bda76:	d117      	bne.n	bdaa8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bda78:	7863      	ldrb	r3, [r4, #1]
   bda7a:	2b7a      	cmp	r3, #122	; 0x7a
   bda7c:	d114      	bne.n	bdaa8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bda7e:	a803      	add	r0, sp, #12
   bda80:	f001 f9a1 	bl	bedc6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bda84:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bda86:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bda88:	1830      	adds	r0, r6, r0
   bda8a:	4418      	add	r0, r3
   bda8c:	eba9 0206 	sub.w	r2, r9, r6
   bda90:	1ca1      	adds	r1, r4, #2
   bda92:	f001 f8b5 	bl	bec00 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bda96:	462a      	mov	r2, r5
   bda98:	a903      	add	r1, sp, #12
   bda9a:	4620      	mov	r0, r4
   bda9c:	f001 f8b0 	bl	bec00 <memcpy>
            len = strlen(format_str);
   bdaa0:	a814      	add	r0, sp, #80	; 0x50
   bdaa2:	f001 f990 	bl	bedc6 <strlen>
   bdaa6:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bdaa8:	3401      	adds	r4, #1
   bdaaa:	4656      	mov	r6, sl
   bdaac:	e7db      	b.n	bda66 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bdaae:	233c      	movs	r3, #60	; 0x3c
   bdab0:	fb94 f2f3 	sdiv	r2, r4, r3
   bdab4:	2a00      	cmp	r2, #0
   bdab6:	bfb8      	it	lt
   bdab8:	4252      	neglt	r2, r2
   bdaba:	fbb2 f1f3 	udiv	r1, r2, r3
   bdabe:	fb03 2211 	mls	r2, r3, r1, r2
   bdac2:	9200      	str	r2, [sp, #0]
   bdac4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bdac8:	4a0e      	ldr	r2, [pc, #56]	; (bdb04 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bdaca:	fb94 f3f3 	sdiv	r3, r4, r3
   bdace:	2110      	movs	r1, #16
   bdad0:	a803      	add	r0, sp, #12
   bdad2:	f7fd f995 	bl	bae00 <snprintf>
   bdad6:	e7c4      	b.n	bda62 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bdad8:	2100      	movs	r1, #0
   bdada:	222e      	movs	r2, #46	; 0x2e
   bdadc:	a808      	add	r0, sp, #32
   bdade:	9107      	str	r1, [sp, #28]
   bdae0:	f001 f8b6 	bl	bec50 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bdae4:	4643      	mov	r3, r8
   bdae6:	aa14      	add	r2, sp, #80	; 0x50
   bdae8:	2132      	movs	r1, #50	; 0x32
   bdaea:	a807      	add	r0, sp, #28
   bdaec:	f7fd f9c0 	bl	bae70 <strftime>
    return String(buf);
   bdaf0:	a907      	add	r1, sp, #28
   bdaf2:	4638      	mov	r0, r7
   bdaf4:	f7ff fd13 	bl	bd51e <_ZN6StringC1EPK19__FlashStringHelper>
}
   bdaf8:	4638      	mov	r0, r7
   bdafa:	b024      	add	sp, #144	; 0x90
   bdafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdb00:	000bfe43 	.word	0x000bfe43
   bdb04:	000bfe45 	.word	0x000bfe45

000bdb08 <_ZN9TimeClass6formatExPKc>:
{
   bdb08:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdb0a:	b08d      	sub	sp, #52	; 0x34
   bdb0c:	e9cd 2300 	strd	r2, r3, [sp]
   bdb10:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bdb12:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bdb14:	b915      	cbnz	r5, bdb1c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bdb16:	4b19      	ldr	r3, [pc, #100]	; (bdb7c <_ZN9TimeClass6formatExPKc+0x74>)
   bdb18:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bdb1a:	b12d      	cbz	r5, bdb28 <_ZN9TimeClass6formatExPKc+0x20>
   bdb1c:	4b18      	ldr	r3, [pc, #96]	; (bdb80 <_ZN9TimeClass6formatExPKc+0x78>)
   bdb1e:	4628      	mov	r0, r5
   bdb20:	6819      	ldr	r1, [r3, #0]
   bdb22:	f001 f920 	bl	bed66 <strcmp>
   bdb26:	b938      	cbnz	r0, bdb38 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bdb28:	e9dd 2300 	ldrd	r2, r3, [sp]
   bdb2c:	4620      	mov	r0, r4
   bdb2e:	f7ff ff45 	bl	bd9bc <_ZN9TimeClass7timeStrEx>
}
   bdb32:	4620      	mov	r0, r4
   bdb34:	b00d      	add	sp, #52	; 0x34
   bdb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bdb38:	4e12      	ldr	r6, [pc, #72]	; (bdb84 <_ZN9TimeClass6formatExPKc+0x7c>)
   bdb3a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bdb3c:	4f12      	ldr	r7, [pc, #72]	; (bdb88 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bdb3e:	e9d6 3200 	ldrd	r3, r2, [r6]
   bdb42:	185b      	adds	r3, r3, r1
   bdb44:	9901      	ldr	r1, [sp, #4]
   bdb46:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bdb4a:	e9d7 0100 	ldrd	r0, r1, [r7]
   bdb4e:	181b      	adds	r3, r3, r0
   bdb50:	eb42 0201 	adc.w	r2, r2, r1
   bdb54:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bdb58:	2100      	movs	r1, #0
   bdb5a:	2224      	movs	r2, #36	; 0x24
   bdb5c:	a803      	add	r0, sp, #12
   bdb5e:	f001 f877 	bl	bec50 <memset>
    localtime_r(&t, &calendar_time);
   bdb62:	a903      	add	r1, sp, #12
   bdb64:	4668      	mov	r0, sp
   bdb66:	f7fd f98b 	bl	bae80 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bdb6a:	6832      	ldr	r2, [r6, #0]
   bdb6c:	683b      	ldr	r3, [r7, #0]
   bdb6e:	a903      	add	r1, sp, #12
   bdb70:	4413      	add	r3, r2
   bdb72:	4620      	mov	r0, r4
   bdb74:	462a      	mov	r2, r5
   bdb76:	f7ff ff5d 	bl	bda34 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bdb7a:	e7da      	b.n	bdb32 <_ZN9TimeClass6formatExPKc+0x2a>
   bdb7c:	2003e6b0 	.word	0x2003e6b0
   bdb80:	2003de84 	.word	0x2003de84
   bdb84:	2003e6e0 	.word	0x2003e6e0
   bdb88:	2003e6d8 	.word	0x2003e6d8

000bdb8c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bdb8c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bdb8e:	2000      	movs	r0, #0
   bdb90:	f7fc fd8a 	bl	ba6a8 <hal_rtc_time_is_valid>
    if (rtcstate)
   bdb94:	4604      	mov	r4, r0
   bdb96:	b9a0      	cbnz	r0, bdbc2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bdb98:	f7fc ffd8 	bl	bab4c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bdb9c:	2801      	cmp	r0, #1
   bdb9e:	d110      	bne.n	bdbc2 <_ZN9TimeClass7isValidEv+0x36>
   bdba0:	4620      	mov	r0, r4
   bdba2:	f7fd f80b 	bl	babbc <system_thread_get_state>
   bdba6:	b960      	cbnz	r0, bdbc2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bdba8:	f7ff fede 	bl	bd968 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bdbac:	b910      	cbnz	r0, bdbb4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bdbae:	f7fd f857 	bl	bac60 <spark_process>
        while (_while() && !_condition()) {
   bdbb2:	e7f9      	b.n	bdba8 <_ZN9TimeClass7isValidEv+0x1c>
   bdbb4:	f7ff fed8 	bl	bd968 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bdbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bdbbc:	2000      	movs	r0, #0
   bdbbe:	f7fc bd73 	b.w	ba6a8 <hal_rtc_time_is_valid>
}
   bdbc2:	4620      	mov	r0, r4
   bdbc4:	bd10      	pop	{r4, pc}

000bdbc6 <_ZN9TimeClass3nowEv>:
{
   bdbc6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bdbc8:	f7ff ffe0 	bl	bdb8c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bdbcc:	2210      	movs	r2, #16
   bdbce:	2100      	movs	r1, #0
   bdbd0:	4668      	mov	r0, sp
   bdbd2:	f001 f83d 	bl	bec50 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bdbd6:	2100      	movs	r1, #0
   bdbd8:	4668      	mov	r0, sp
   bdbda:	f7fc fd75 	bl	ba6c8 <hal_rtc_get_time>
}
   bdbde:	9800      	ldr	r0, [sp, #0]
   bdbe0:	b005      	add	sp, #20
   bdbe2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bdbe8 <_ZN9TimeClass4hourEv>:
{
   bdbe8:	b508      	push	{r3, lr}
	return hour(now());
   bdbea:	f7ff ffec 	bl	bdbc6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bdbee:	17c1      	asrs	r1, r0, #31
   bdbf0:	f7ff fe84 	bl	bd8fc <_ZL22Refresh_UnixTime_Cachex>
}
   bdbf4:	4b01      	ldr	r3, [pc, #4]	; (bdbfc <_ZN9TimeClass4hourEv+0x14>)
   bdbf6:	6898      	ldr	r0, [r3, #8]
   bdbf8:	bd08      	pop	{r3, pc}
   bdbfa:	bf00      	nop
   bdbfc:	2003e6b4 	.word	0x2003e6b4

000bdc00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bdc00:	4b02      	ldr	r3, [pc, #8]	; (bdc0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bdc02:	681a      	ldr	r2, [r3, #0]
   bdc04:	4b02      	ldr	r3, [pc, #8]	; (bdc10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bdc06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bdc08:	4770      	bx	lr
   bdc0a:	bf00      	nop
   bdc0c:	2003de84 	.word	0x2003de84
   bdc10:	2003e6b0 	.word	0x2003e6b0

000bdc14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bdc14:	4770      	bx	lr

000bdc16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bdc16:	7441      	strb	r1, [r0, #17]
}
   bdc18:	4770      	bx	lr

000bdc1a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bdc1a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bdc1c:	7c00      	ldrb	r0, [r0, #16]
   bdc1e:	f7fc ff03 	bl	baa28 <hal_usart_available_data_for_write>
}
   bdc22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdc26:	bd08      	pop	{r3, pc}

000bdc28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bdc28:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bdc2a:	7c00      	ldrb	r0, [r0, #16]
   bdc2c:	f7fc fed4 	bl	ba9d8 <hal_usart_available>
}
   bdc30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdc34:	bd08      	pop	{r3, pc}

000bdc36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bdc36:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bdc38:	7c00      	ldrb	r0, [r0, #16]
   bdc3a:	f7fc fedd 	bl	ba9f8 <hal_usart_peek>
}
   bdc3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdc42:	bd08      	pop	{r3, pc}

000bdc44 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bdc44:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bdc46:	7c00      	ldrb	r0, [r0, #16]
   bdc48:	f7fc fece 	bl	ba9e8 <hal_usart_read>
}
   bdc4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdc50:	bd08      	pop	{r3, pc}

000bdc52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bdc52:	7c00      	ldrb	r0, [r0, #16]
   bdc54:	f7fc bed8 	b.w	baa08 <hal_usart_flush>

000bdc58 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bdc58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdc5a:	7c45      	ldrb	r5, [r0, #17]
{
   bdc5c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdc5e:	b12d      	cbz	r5, bdc6c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bdc60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bdc62:	b003      	add	sp, #12
   bdc64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bdc68:	f7fc beae 	b.w	ba9c8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdc6c:	7c00      	ldrb	r0, [r0, #16]
   bdc6e:	9101      	str	r1, [sp, #4]
   bdc70:	f7fc feda 	bl	baa28 <hal_usart_available_data_for_write>
   bdc74:	2800      	cmp	r0, #0
   bdc76:	9901      	ldr	r1, [sp, #4]
   bdc78:	dcf2      	bgt.n	bdc60 <_ZN11USARTSerial5writeEh+0x8>
}
   bdc7a:	4628      	mov	r0, r5
   bdc7c:	b003      	add	sp, #12
   bdc7e:	bd30      	pop	{r4, r5, pc}

000bdc80 <_ZN11USARTSerialD0Ev>:
   bdc80:	b510      	push	{r4, lr}
   bdc82:	2114      	movs	r1, #20
   bdc84:	4604      	mov	r4, r0
   bdc86:	f7f6 fa0a 	bl	b409e <_ZdlPvj>
   bdc8a:	4620      	mov	r0, r4
   bdc8c:	bd10      	pop	{r4, pc}
	...

000bdc90 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bdc90:	b510      	push	{r4, lr}
   bdc92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdc96:	4604      	mov	r4, r0
   bdc98:	4608      	mov	r0, r1
   bdc9a:	4611      	mov	r1, r2
   bdc9c:	2200      	movs	r2, #0
   bdc9e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bdca2:	4b04      	ldr	r3, [pc, #16]	; (bdcb4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bdca4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bdca6:	2301      	movs	r3, #1
  _serial = serial;
   bdca8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bdcaa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bdcac:	f7fc fecc 	bl	baa48 <hal_usart_init_ex>
}
   bdcb0:	4620      	mov	r0, r4
   bdcb2:	bd10      	pop	{r4, pc}
   bdcb4:	000c0810 	.word	0x000c0810

000bdcb8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bdcb8:	7c00      	ldrb	r0, [r0, #16]
   bdcba:	2300      	movs	r3, #0
   bdcbc:	f7fc bebc 	b.w	baa38 <hal_usart_begin_config>

000bdcc0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bdcc0:	2200      	movs	r2, #0
   bdcc2:	f7ff bff9 	b.w	bdcb8 <_ZN11USARTSerial5beginEmm>

000bdcc6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bdcc6:	7c00      	ldrb	r0, [r0, #16]
   bdcc8:	f7fc be76 	b.w	ba9b8 <hal_usart_end>

000bdccc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bdccc:	7441      	strb	r1, [r0, #17]
}
   bdcce:	4770      	bx	lr

000bdcd0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdcd0:	4770      	bx	lr

000bdcd2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bdcd2:	4770      	bx	lr

000bdcd4 <_ZN9USBSerial4readEv>:
{
   bdcd4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bdcd6:	2100      	movs	r1, #0
   bdcd8:	7c00      	ldrb	r0, [r0, #16]
   bdcda:	f7fc fee5 	bl	baaa8 <HAL_USB_USART_Receive_Data>
}
   bdcde:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdce2:	bd08      	pop	{r3, pc}

000bdce4 <_ZN9USBSerial4peekEv>:
{
   bdce4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bdce6:	2101      	movs	r1, #1
   bdce8:	7c00      	ldrb	r0, [r0, #16]
   bdcea:	f7fc fedd 	bl	baaa8 <HAL_USB_USART_Receive_Data>
}
   bdcee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdcf2:	bd08      	pop	{r3, pc}

000bdcf4 <_ZN9USBSerial17availableForWriteEv>:
{
   bdcf4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bdcf6:	7c00      	ldrb	r0, [r0, #16]
   bdcf8:	f7fc fece 	bl	baa98 <HAL_USB_USART_Available_Data_For_Write>
}
   bdcfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdd00:	bd08      	pop	{r3, pc}

000bdd02 <_ZN9USBSerial9availableEv>:
{
   bdd02:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bdd04:	7c00      	ldrb	r0, [r0, #16]
   bdd06:	f7fc febf 	bl	baa88 <HAL_USB_USART_Available_Data>
}
   bdd0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdd0e:	bd08      	pop	{r3, pc}

000bdd10 <_ZN9USBSerial5writeEh>:
{
   bdd10:	b513      	push	{r0, r1, r4, lr}
   bdd12:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bdd14:	7c00      	ldrb	r0, [r0, #16]
{
   bdd16:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bdd18:	f7fc febe 	bl	baa98 <HAL_USB_USART_Available_Data_For_Write>
   bdd1c:	2800      	cmp	r0, #0
   bdd1e:	9901      	ldr	r1, [sp, #4]
   bdd20:	dc01      	bgt.n	bdd26 <_ZN9USBSerial5writeEh+0x16>
   bdd22:	7c60      	ldrb	r0, [r4, #17]
   bdd24:	b120      	cbz	r0, bdd30 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bdd26:	7c20      	ldrb	r0, [r4, #16]
   bdd28:	f7fc fec6 	bl	baab8 <HAL_USB_USART_Send_Data>
   bdd2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bdd30:	b002      	add	sp, #8
   bdd32:	bd10      	pop	{r4, pc}

000bdd34 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bdd34:	7c00      	ldrb	r0, [r0, #16]
   bdd36:	f7fc bec7 	b.w	baac8 <HAL_USB_USART_Flush_Data>

000bdd3a <_ZN9USBSerialD0Ev>:
   bdd3a:	b510      	push	{r4, lr}
   bdd3c:	2114      	movs	r1, #20
   bdd3e:	4604      	mov	r4, r0
   bdd40:	f7f6 f9ad 	bl	b409e <_ZdlPvj>
   bdd44:	4620      	mov	r0, r4
   bdd46:	bd10      	pop	{r4, pc}

000bdd48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bdd48:	b510      	push	{r4, lr}
   bdd4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdd4e:	4604      	mov	r4, r0
   bdd50:	4608      	mov	r0, r1
   bdd52:	2100      	movs	r1, #0
   bdd54:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bdd58:	4b04      	ldr	r3, [pc, #16]	; (bdd6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bdd5a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bdd5c:	2301      	movs	r3, #1
  _serial = serial;
   bdd5e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bdd60:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bdd62:	4611      	mov	r1, r2
   bdd64:	f7fc fe78 	bl	baa58 <HAL_USB_USART_Init>
}
   bdd68:	4620      	mov	r0, r4
   bdd6a:	bd10      	pop	{r4, pc}
   bdd6c:	000c0840 	.word	0x000c0840

000bdd70 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bdd70:	7c00      	ldrb	r0, [r0, #16]
   bdd72:	2200      	movs	r2, #0
   bdd74:	f7fc be78 	b.w	baa68 <HAL_USB_USART_Begin>

000bdd78 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bdd78:	7c00      	ldrb	r0, [r0, #16]
   bdd7a:	f7fc be7d 	b.w	baa78 <HAL_USB_USART_End>

000bdd7e <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bdd7e:	7c00      	ldrb	r0, [r0, #16]
   bdd80:	f7fc beaa 	b.w	baad8 <HAL_USB_USART_Is_Connected>

000bdd84 <_Z19acquireSerialBufferv>:
{
   bdd84:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bdd86:	2214      	movs	r2, #20
{
   bdd88:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bdd8a:	2100      	movs	r1, #0
   bdd8c:	f000 ff60 	bl	bec50 <memset>
}
   bdd90:	4620      	mov	r0, r4
   bdd92:	bd10      	pop	{r4, pc}

000bdd94 <_Z16_fetch_usbserialv>:
{
   bdd94:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdd96:	4c0f      	ldr	r4, [pc, #60]	; (bddd4 <_Z16_fetch_usbserialv+0x40>)
{
   bdd98:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bdd9a:	a803      	add	r0, sp, #12
   bdd9c:	f7ff fff2 	bl	bdd84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdda0:	7821      	ldrb	r1, [r4, #0]
   bdda2:	f3bf 8f5b 	dmb	ish
   bdda6:	f011 0101 	ands.w	r1, r1, #1
   bddaa:	d10f      	bne.n	bddcc <_Z16_fetch_usbserialv+0x38>
   bddac:	4620      	mov	r0, r4
   bddae:	9101      	str	r1, [sp, #4]
   bddb0:	f7f6 f984 	bl	b40bc <__cxa_guard_acquire>
   bddb4:	9901      	ldr	r1, [sp, #4]
   bddb6:	b148      	cbz	r0, bddcc <_Z16_fetch_usbserialv+0x38>
   bddb8:	aa03      	add	r2, sp, #12
   bddba:	4807      	ldr	r0, [pc, #28]	; (bddd8 <_Z16_fetch_usbserialv+0x44>)
   bddbc:	f7ff ffc4 	bl	bdd48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bddc0:	4620      	mov	r0, r4
   bddc2:	f7f6 f980 	bl	b40c6 <__cxa_guard_release>
   bddc6:	4805      	ldr	r0, [pc, #20]	; (bdddc <_Z16_fetch_usbserialv+0x48>)
   bddc8:	f000 feee 	bl	beba8 <atexit>
	return _usbserial;
}
   bddcc:	4802      	ldr	r0, [pc, #8]	; (bddd8 <_Z16_fetch_usbserialv+0x44>)
   bddce:	b008      	add	sp, #32
   bddd0:	bd10      	pop	{r4, pc}
   bddd2:	bf00      	nop
   bddd4:	2003e6f0 	.word	0x2003e6f0
   bddd8:	2003e6f4 	.word	0x2003e6f4
   bdddc:	000bdcd1 	.word	0x000bdcd1

000bdde0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bdde0:	4b01      	ldr	r3, [pc, #4]	; (bdde8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bdde2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bdde4:	4770      	bx	lr
   bdde6:	bf00      	nop
   bdde8:	2003de8c 	.word	0x2003de8c

000bddec <serialEventRun>:
{
   bddec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bddee:	4b0b      	ldr	r3, [pc, #44]	; (bde1c <serialEventRun+0x30>)
   bddf0:	b143      	cbz	r3, bde04 <serialEventRun+0x18>
   bddf2:	f7ff ffcf 	bl	bdd94 <_Z16_fetch_usbserialv>
   bddf6:	6803      	ldr	r3, [r0, #0]
   bddf8:	691b      	ldr	r3, [r3, #16]
   bddfa:	4798      	blx	r3
   bddfc:	2800      	cmp	r0, #0
   bddfe:	dd01      	ble.n	bde04 <serialEventRun+0x18>
        serialEvent();
   bde00:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bde04:	4b06      	ldr	r3, [pc, #24]	; (bde20 <serialEventRun+0x34>)
   bde06:	b143      	cbz	r3, bde1a <serialEventRun+0x2e>
   bde08:	f000 f9c2 	bl	be190 <_Z22__fetch_global_Serial1v>
   bde0c:	6803      	ldr	r3, [r0, #0]
   bde0e:	691b      	ldr	r3, [r3, #16]
   bde10:	4798      	blx	r3
   bde12:	2800      	cmp	r0, #0
   bde14:	dd01      	ble.n	bde1a <serialEventRun+0x2e>
        serialEvent1();
   bde16:	f3af 8000 	nop.w
}
   bde1a:	bd08      	pop	{r3, pc}
	...

000bde24 <_post_loop>:
{
   bde24:	b508      	push	{r3, lr}
	serialEventRun();
   bde26:	f7ff ffe1 	bl	bddec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bde2a:	f7fc fc35 	bl	ba698 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bde2e:	4b01      	ldr	r3, [pc, #4]	; (bde34 <_post_loop+0x10>)
   bde30:	6018      	str	r0, [r3, #0]
}
   bde32:	bd08      	pop	{r3, pc}
   bde34:	2003e710 	.word	0x2003e710

000bde38 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bde38:	4805      	ldr	r0, [pc, #20]	; (bde50 <_Z33system_initialize_user_backup_ramv+0x18>)
   bde3a:	4a06      	ldr	r2, [pc, #24]	; (bde54 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bde3c:	4906      	ldr	r1, [pc, #24]	; (bde58 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bde3e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bde40:	1a12      	subs	r2, r2, r0
   bde42:	f000 fedd 	bl	bec00 <memcpy>
    __backup_sram_signature = signature;
   bde46:	4b05      	ldr	r3, [pc, #20]	; (bde5c <_Z33system_initialize_user_backup_ramv+0x24>)
   bde48:	4a05      	ldr	r2, [pc, #20]	; (bde60 <_Z33system_initialize_user_backup_ramv+0x28>)
   bde4a:	601a      	str	r2, [r3, #0]
}
   bde4c:	bd08      	pop	{r3, pc}
   bde4e:	bf00      	nop
   bde50:	2003f400 	.word	0x2003f400
   bde54:	2003f404 	.word	0x2003f404
   bde58:	000c0af4 	.word	0x000c0af4
   bde5c:	2003f400 	.word	0x2003f400
   bde60:	9a271c1e 	.word	0x9a271c1e

000bde64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bde64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bde66:	2300      	movs	r3, #0
   bde68:	9300      	str	r3, [sp, #0]
   bde6a:	461a      	mov	r2, r3
   bde6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bde70:	f7fc febe 	bl	babf0 <system_ctrl_set_result>
}
   bde74:	b003      	add	sp, #12
   bde76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bde7c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bde7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bde7e:	8843      	ldrh	r3, [r0, #2]
   bde80:	2b0a      	cmp	r3, #10
   bde82:	d008      	beq.n	bde96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bde84:	2b50      	cmp	r3, #80	; 0x50
   bde86:	d10b      	bne.n	bdea0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bde88:	4b09      	ldr	r3, [pc, #36]	; (bdeb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bde8a:	681b      	ldr	r3, [r3, #0]
   bde8c:	b14b      	cbz	r3, bdea2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bde8e:	b003      	add	sp, #12
   bde90:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bde94:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bde96:	f7ff ffe5 	bl	bde64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bde9a:	b003      	add	sp, #12
   bde9c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bdea0:	2300      	movs	r3, #0
   bdea2:	9300      	str	r3, [sp, #0]
   bdea4:	461a      	mov	r2, r3
   bdea6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bdeaa:	f7fc fea1 	bl	babf0 <system_ctrl_set_result>
}
   bdeae:	e7f4      	b.n	bde9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bdeb0:	2003e70c 	.word	0x2003e70c

000bdeb4 <module_user_init_hook>:
{
   bdeb4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bdeb6:	4812      	ldr	r0, [pc, #72]	; (bdf00 <module_user_init_hook+0x4c>)
   bdeb8:	2100      	movs	r1, #0
   bdeba:	f7fc ffd1 	bl	bae60 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bdebe:	4b11      	ldr	r3, [pc, #68]	; (bdf04 <module_user_init_hook+0x50>)
   bdec0:	681a      	ldr	r2, [r3, #0]
   bdec2:	4b11      	ldr	r3, [pc, #68]	; (bdf08 <module_user_init_hook+0x54>)
   bdec4:	429a      	cmp	r2, r3
   bdec6:	4b11      	ldr	r3, [pc, #68]	; (bdf0c <module_user_init_hook+0x58>)
   bdec8:	bf0c      	ite	eq
   bdeca:	2201      	moveq	r2, #1
   bdecc:	2200      	movne	r2, #0
   bdece:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bded0:	d001      	beq.n	bded6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bded2:	f7ff ffb1 	bl	bde38 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bded6:	f7fc fbc7 	bl	ba668 <HAL_RNG_GetRandomNumber>
   bdeda:	4604      	mov	r4, r0
    srand(seed);
   bdedc:	f000 fec0 	bl	bec60 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bdee0:	4b0b      	ldr	r3, [pc, #44]	; (bdf10 <module_user_init_hook+0x5c>)
   bdee2:	b113      	cbz	r3, bdeea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bdee4:	4620      	mov	r0, r4
   bdee6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bdeea:	2100      	movs	r1, #0
   bdeec:	4808      	ldr	r0, [pc, #32]	; (bdf10 <module_user_init_hook+0x5c>)
   bdeee:	f7fc feef 	bl	bacd0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bdef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bdef6:	4807      	ldr	r0, [pc, #28]	; (bdf14 <module_user_init_hook+0x60>)
   bdef8:	2100      	movs	r1, #0
   bdefa:	f7fc be6f 	b.w	babdc <system_ctrl_set_app_request_handler>
   bdefe:	bf00      	nop
   bdf00:	000bdde1 	.word	0x000bdde1
   bdf04:	2003f400 	.word	0x2003f400
   bdf08:	9a271c1e 	.word	0x9a271c1e
   bdf0c:	2003e708 	.word	0x2003e708
   bdf10:	00000000 	.word	0x00000000
   bdf14:	000bde7d 	.word	0x000bde7d

000bdf18 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bdf18:	b508      	push	{r3, lr}
   bdf1a:	4b02      	ldr	r3, [pc, #8]	; (bdf24 <spark_protocol_instance+0xc>)
   bdf1c:	681b      	ldr	r3, [r3, #0]
   bdf1e:	681b      	ldr	r3, [r3, #0]
   bdf20:	9301      	str	r3, [sp, #4]
   bdf22:	bd08      	pop	{r3, pc}
   bdf24:	0003025c 	.word	0x0003025c

000bdf28 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bdf28:	b508      	push	{r3, lr}
   bdf2a:	4b02      	ldr	r3, [pc, #8]	; (bdf34 <spark_protocol_set_product_id+0xc>)
   bdf2c:	681b      	ldr	r3, [r3, #0]
   bdf2e:	685b      	ldr	r3, [r3, #4]
   bdf30:	9301      	str	r3, [sp, #4]
   bdf32:	bd08      	pop	{r3, pc}
   bdf34:	0003025c 	.word	0x0003025c

000bdf38 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bdf38:	b508      	push	{r3, lr}
   bdf3a:	4b02      	ldr	r3, [pc, #8]	; (bdf44 <spark_protocol_set_product_firmware_version+0xc>)
   bdf3c:	681b      	ldr	r3, [r3, #0]
   bdf3e:	689b      	ldr	r3, [r3, #8]
   bdf40:	9301      	str	r3, [sp, #4]
   bdf42:	bd08      	pop	{r3, pc}
   bdf44:	0003025c 	.word	0x0003025c

000bdf48 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bdf48:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bdf4a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bdf4c:	d902      	bls.n	bdf54 <pinAvailable+0xc>
    return false;
   bdf4e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bdf50:	b002      	add	sp, #8
   bdf52:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bdf54:	f1a0 030b 	sub.w	r3, r0, #11
   bdf58:	2b02      	cmp	r3, #2
   bdf5a:	d81a      	bhi.n	bdf92 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bdf5c:	4c17      	ldr	r4, [pc, #92]	; (bdfbc <pinAvailable+0x74>)
   bdf5e:	7821      	ldrb	r1, [r4, #0]
   bdf60:	f3bf 8f5b 	dmb	ish
   bdf64:	f011 0101 	ands.w	r1, r1, #1
   bdf68:	d10b      	bne.n	bdf82 <pinAvailable+0x3a>
   bdf6a:	4620      	mov	r0, r4
   bdf6c:	9101      	str	r1, [sp, #4]
   bdf6e:	f7f6 f8a5 	bl	b40bc <__cxa_guard_acquire>
   bdf72:	9901      	ldr	r1, [sp, #4]
   bdf74:	b128      	cbz	r0, bdf82 <pinAvailable+0x3a>
   bdf76:	4812      	ldr	r0, [pc, #72]	; (bdfc0 <pinAvailable+0x78>)
   bdf78:	f7ff f9c6 	bl	bd308 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bdf7c:	4620      	mov	r0, r4
   bdf7e:	f7f6 f8a2 	bl	b40c6 <__cxa_guard_release>
   bdf82:	4b0f      	ldr	r3, [pc, #60]	; (bdfc0 <pinAvailable+0x78>)
   bdf84:	7818      	ldrb	r0, [r3, #0]
   bdf86:	f7fc fc8f 	bl	ba8a8 <hal_spi_is_enabled>
   bdf8a:	2800      	cmp	r0, #0
   bdf8c:	d1df      	bne.n	bdf4e <pinAvailable+0x6>
  return true; // 'pin' is available
   bdf8e:	2001      	movs	r0, #1
   bdf90:	e7de      	b.n	bdf50 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bdf92:	2801      	cmp	r0, #1
   bdf94:	d809      	bhi.n	bdfaa <pinAvailable+0x62>
   bdf96:	f000 f897 	bl	be0c8 <_Z19__fetch_global_Wirev>
   bdf9a:	2100      	movs	r1, #0
   bdf9c:	7c00      	ldrb	r0, [r0, #16]
   bdf9e:	f7fc fc23 	bl	ba7e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bdfa2:	f080 0001 	eor.w	r0, r0, #1
   bdfa6:	b2c0      	uxtb	r0, r0
   bdfa8:	e7d2      	b.n	bdf50 <pinAvailable+0x8>
   bdfaa:	3809      	subs	r0, #9
   bdfac:	2801      	cmp	r0, #1
   bdfae:	d8ee      	bhi.n	bdf8e <pinAvailable+0x46>
   bdfb0:	f000 f8ee 	bl	be190 <_Z22__fetch_global_Serial1v>
   bdfb4:	7c00      	ldrb	r0, [r0, #16]
   bdfb6:	f7fc fd2f 	bl	baa18 <hal_usart_is_enabled>
   bdfba:	e7f2      	b.n	bdfa2 <pinAvailable+0x5a>
   bdfbc:	2003e450 	.word	0x2003e450
   bdfc0:	2003e454 	.word	0x2003e454

000bdfc4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdfc4:	2823      	cmp	r0, #35	; 0x23
{
   bdfc6:	b538      	push	{r3, r4, r5, lr}
   bdfc8:	4604      	mov	r4, r0
   bdfca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdfcc:	d80a      	bhi.n	bdfe4 <pinMode+0x20>
   bdfce:	29ff      	cmp	r1, #255	; 0xff
   bdfd0:	d008      	beq.n	bdfe4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bdfd2:	f7ff ffb9 	bl	bdf48 <pinAvailable>
   bdfd6:	b128      	cbz	r0, bdfe4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bdfd8:	4629      	mov	r1, r5
   bdfda:	4620      	mov	r0, r4
}
   bdfdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bdfe0:	f7fc bb8a 	b.w	ba6f8 <HAL_Pin_Mode>
}
   bdfe4:	bd38      	pop	{r3, r4, r5, pc}

000bdfe6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bdfe6:	b538      	push	{r3, r4, r5, lr}
   bdfe8:	4604      	mov	r4, r0
   bdfea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bdfec:	f7fc fb8c 	bl	ba708 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bdff0:	28ff      	cmp	r0, #255	; 0xff
   bdff2:	d010      	beq.n	be016 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bdff4:	2806      	cmp	r0, #6
   bdff6:	d804      	bhi.n	be002 <digitalWrite+0x1c>
   bdff8:	234d      	movs	r3, #77	; 0x4d
   bdffa:	fa23 f000 	lsr.w	r0, r3, r0
   bdffe:	07c3      	lsls	r3, r0, #31
   be000:	d409      	bmi.n	be016 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   be002:	4620      	mov	r0, r4
   be004:	f7ff ffa0 	bl	bdf48 <pinAvailable>
   be008:	b128      	cbz	r0, be016 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   be00a:	4629      	mov	r1, r5
   be00c:	4620      	mov	r0, r4
}
   be00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   be012:	f7fc bb81 	b.w	ba718 <HAL_GPIO_Write>
}
   be016:	bd38      	pop	{r3, r4, r5, pc}

000be018 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   be018:	b510      	push	{r4, lr}
   be01a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   be01c:	f7fc fb74 	bl	ba708 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   be020:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   be022:	b2db      	uxtb	r3, r3
   be024:	2b01      	cmp	r3, #1
   be026:	d908      	bls.n	be03a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   be028:	4620      	mov	r0, r4
   be02a:	f7ff ff8d 	bl	bdf48 <pinAvailable>
   be02e:	b120      	cbz	r0, be03a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   be030:	4620      	mov	r0, r4
}
   be032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   be036:	f7fc bb77 	b.w	ba728 <HAL_GPIO_Read>
}
   be03a:	2000      	movs	r0, #0
   be03c:	bd10      	pop	{r4, pc}

000be03e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   be03e:	280d      	cmp	r0, #13
{
   be040:	b510      	push	{r4, lr}
   be042:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   be044:	bf9c      	itt	ls
   be046:	340e      	addls	r4, #14
   be048:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   be04a:	4620      	mov	r0, r4
   be04c:	f7ff ff7c 	bl	bdf48 <pinAvailable>
   be050:	b150      	cbz	r0, be068 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   be052:	2103      	movs	r1, #3
   be054:	4620      	mov	r0, r4
   be056:	f7fc fb47 	bl	ba6e8 <HAL_Validate_Pin_Function>
   be05a:	2803      	cmp	r0, #3
   be05c:	d104      	bne.n	be068 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   be05e:	4620      	mov	r0, r4
}
   be060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   be064:	f7fc bb78 	b.w	ba758 <hal_adc_read>
}
   be068:	2000      	movs	r0, #0
   be06a:	bd10      	pop	{r4, pc}

000be06c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be06c:	4770      	bx	lr

000be06e <__tcf_1>:
   be06e:	4770      	bx	lr

000be070 <_Z17acquireWireBufferv>:
{
   be070:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   be072:	2520      	movs	r5, #32
   be074:	2314      	movs	r3, #20
{
   be076:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   be078:	6003      	str	r3, [r0, #0]
   be07a:	6085      	str	r5, [r0, #8]
   be07c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be07e:	4906      	ldr	r1, [pc, #24]	; (be098 <_Z17acquireWireBufferv+0x28>)
   be080:	4628      	mov	r0, r5
   be082:	f000 f8ab 	bl	be1dc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be086:	4904      	ldr	r1, [pc, #16]	; (be098 <_Z17acquireWireBufferv+0x28>)
	};
   be088:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be08a:	4628      	mov	r0, r5
   be08c:	f000 f8a6 	bl	be1dc <_ZnajRKSt9nothrow_t>
	};
   be090:	60e0      	str	r0, [r4, #12]
}
   be092:	4620      	mov	r0, r4
   be094:	bd38      	pop	{r3, r4, r5, pc}
   be096:	bf00      	nop
   be098:	000c0868 	.word	0x000c0868

000be09c <_Z18acquireWire1Bufferv>:
   be09c:	b538      	push	{r3, r4, r5, lr}
   be09e:	2520      	movs	r5, #32
   be0a0:	2314      	movs	r3, #20
   be0a2:	4604      	mov	r4, r0
   be0a4:	6003      	str	r3, [r0, #0]
   be0a6:	6085      	str	r5, [r0, #8]
   be0a8:	6105      	str	r5, [r0, #16]
   be0aa:	4906      	ldr	r1, [pc, #24]	; (be0c4 <_Z18acquireWire1Bufferv+0x28>)
   be0ac:	4628      	mov	r0, r5
   be0ae:	f000 f895 	bl	be1dc <_ZnajRKSt9nothrow_t>
   be0b2:	4904      	ldr	r1, [pc, #16]	; (be0c4 <_Z18acquireWire1Bufferv+0x28>)
   be0b4:	6060      	str	r0, [r4, #4]
   be0b6:	4628      	mov	r0, r5
   be0b8:	f000 f890 	bl	be1dc <_ZnajRKSt9nothrow_t>
   be0bc:	60e0      	str	r0, [r4, #12]
   be0be:	4620      	mov	r0, r4
   be0c0:	bd38      	pop	{r3, r4, r5, pc}
   be0c2:	bf00      	nop
   be0c4:	000c0868 	.word	0x000c0868

000be0c8 <_Z19__fetch_global_Wirev>:
{
   be0c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be0ca:	4d0e      	ldr	r5, [pc, #56]	; (be104 <_Z19__fetch_global_Wirev+0x3c>)
   be0cc:	7829      	ldrb	r1, [r5, #0]
   be0ce:	f3bf 8f5b 	dmb	ish
   be0d2:	f011 0401 	ands.w	r4, r1, #1
{
   be0d6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be0d8:	d111      	bne.n	be0fe <_Z19__fetch_global_Wirev+0x36>
   be0da:	4628      	mov	r0, r5
   be0dc:	f7f5 ffee 	bl	b40bc <__cxa_guard_acquire>
   be0e0:	b168      	cbz	r0, be0fe <_Z19__fetch_global_Wirev+0x36>
   be0e2:	a801      	add	r0, sp, #4
   be0e4:	f7ff ffc4 	bl	be070 <_Z17acquireWireBufferv>
   be0e8:	aa01      	add	r2, sp, #4
   be0ea:	4621      	mov	r1, r4
   be0ec:	4806      	ldr	r0, [pc, #24]	; (be108 <_Z19__fetch_global_Wirev+0x40>)
   be0ee:	f7fd fbdd 	bl	bb8ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be0f2:	4628      	mov	r0, r5
   be0f4:	f7f5 ffe7 	bl	b40c6 <__cxa_guard_release>
   be0f8:	4804      	ldr	r0, [pc, #16]	; (be10c <_Z19__fetch_global_Wirev+0x44>)
   be0fa:	f000 fd55 	bl	beba8 <atexit>
	return wire;
}
   be0fe:	4802      	ldr	r0, [pc, #8]	; (be108 <_Z19__fetch_global_Wirev+0x40>)
   be100:	b007      	add	sp, #28
   be102:	bd30      	pop	{r4, r5, pc}
   be104:	2003e714 	.word	0x2003e714
   be108:	2003e71c 	.word	0x2003e71c
   be10c:	000be06d 	.word	0x000be06d

000be110 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   be110:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be112:	4c0e      	ldr	r4, [pc, #56]	; (be14c <_Z20__fetch_global_Wire1v+0x3c>)
   be114:	7823      	ldrb	r3, [r4, #0]
   be116:	f3bf 8f5b 	dmb	ish
   be11a:	07db      	lsls	r3, r3, #31
{
   be11c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be11e:	d411      	bmi.n	be144 <_Z20__fetch_global_Wire1v+0x34>
   be120:	4620      	mov	r0, r4
   be122:	f7f5 ffcb 	bl	b40bc <__cxa_guard_acquire>
   be126:	b168      	cbz	r0, be144 <_Z20__fetch_global_Wire1v+0x34>
   be128:	a801      	add	r0, sp, #4
   be12a:	f7ff ffb7 	bl	be09c <_Z18acquireWire1Bufferv>
   be12e:	aa01      	add	r2, sp, #4
   be130:	2101      	movs	r1, #1
   be132:	4807      	ldr	r0, [pc, #28]	; (be150 <_Z20__fetch_global_Wire1v+0x40>)
   be134:	f7fd fbba 	bl	bb8ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be138:	4620      	mov	r0, r4
   be13a:	f7f5 ffc4 	bl	b40c6 <__cxa_guard_release>
   be13e:	4805      	ldr	r0, [pc, #20]	; (be154 <_Z20__fetch_global_Wire1v+0x44>)
   be140:	f000 fd32 	bl	beba8 <atexit>
	return wire;
}
   be144:	4802      	ldr	r0, [pc, #8]	; (be150 <_Z20__fetch_global_Wire1v+0x40>)
   be146:	b006      	add	sp, #24
   be148:	bd10      	pop	{r4, pc}
   be14a:	bf00      	nop
   be14c:	2003e718 	.word	0x2003e718
   be150:	2003e730 	.word	0x2003e730
   be154:	000be06f 	.word	0x000be06f

000be158 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be158:	4770      	bx	lr
	...

000be15c <_Z20acquireSerial1Bufferv>:
{
   be15c:	b538      	push	{r3, r4, r5, lr}
   be15e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   be160:	2514      	movs	r5, #20
   be162:	462a      	mov	r2, r5
   be164:	2100      	movs	r1, #0
   be166:	f000 fd73 	bl	bec50 <memset>
   be16a:	8025      	strh	r5, [r4, #0]
   be16c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be16e:	4907      	ldr	r1, [pc, #28]	; (be18c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   be170:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be172:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   be174:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be176:	f000 f831 	bl	be1dc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be17a:	4904      	ldr	r1, [pc, #16]	; (be18c <_Z20acquireSerial1Bufferv+0x30>)
    };
   be17c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be17e:	4628      	mov	r0, r5
   be180:	f000 f82c 	bl	be1dc <_ZnajRKSt9nothrow_t>
    };
   be184:	60e0      	str	r0, [r4, #12]
}
   be186:	4620      	mov	r0, r4
   be188:	bd38      	pop	{r3, r4, r5, pc}
   be18a:	bf00      	nop
   be18c:	000c0868 	.word	0x000c0868

000be190 <_Z22__fetch_global_Serial1v>:
{
   be190:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be192:	4d0e      	ldr	r5, [pc, #56]	; (be1cc <_Z22__fetch_global_Serial1v+0x3c>)
   be194:	7829      	ldrb	r1, [r5, #0]
   be196:	f3bf 8f5b 	dmb	ish
   be19a:	f011 0401 	ands.w	r4, r1, #1
{
   be19e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be1a0:	d111      	bne.n	be1c6 <_Z22__fetch_global_Serial1v+0x36>
   be1a2:	4628      	mov	r0, r5
   be1a4:	f7f5 ff8a 	bl	b40bc <__cxa_guard_acquire>
   be1a8:	b168      	cbz	r0, be1c6 <_Z22__fetch_global_Serial1v+0x36>
   be1aa:	a801      	add	r0, sp, #4
   be1ac:	f7ff ffd6 	bl	be15c <_Z20acquireSerial1Bufferv>
   be1b0:	aa01      	add	r2, sp, #4
   be1b2:	4621      	mov	r1, r4
   be1b4:	4806      	ldr	r0, [pc, #24]	; (be1d0 <_Z22__fetch_global_Serial1v+0x40>)
   be1b6:	f7ff fd6b 	bl	bdc90 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   be1ba:	4628      	mov	r0, r5
   be1bc:	f7f5 ff83 	bl	b40c6 <__cxa_guard_release>
   be1c0:	4804      	ldr	r0, [pc, #16]	; (be1d4 <_Z22__fetch_global_Serial1v+0x44>)
   be1c2:	f000 fcf1 	bl	beba8 <atexit>
    return serial1;
}
   be1c6:	4802      	ldr	r0, [pc, #8]	; (be1d0 <_Z22__fetch_global_Serial1v+0x40>)
   be1c8:	b007      	add	sp, #28
   be1ca:	bd30      	pop	{r4, r5, pc}
   be1cc:	2003e744 	.word	0x2003e744
   be1d0:	2003e748 	.word	0x2003e748
   be1d4:	000be159 	.word	0x000be159

000be1d8 <_ZnwjRKSt9nothrow_t>:
   be1d8:	f7f5 bf5d 	b.w	b4096 <_Znwj>

000be1dc <_ZnajRKSt9nothrow_t>:
   be1dc:	f7f5 bf5d 	b.w	b409a <_Znaj>

000be1e0 <_ZSt17__throw_bad_allocv>:
   be1e0:	b508      	push	{r3, lr}
   be1e2:	f7fc fe1d 	bl	bae20 <abort>

000be1e6 <_ZSt20__throw_length_errorPKc>:
   be1e6:	b508      	push	{r3, lr}
   be1e8:	f7fc fe1a 	bl	bae20 <abort>

000be1ec <_ZSt25__throw_bad_function_callv>:
   be1ec:	b508      	push	{r3, lr}
   be1ee:	f7fc fe17 	bl	bae20 <abort>
	...

000be1f4 <__aeabi_drsub>:
   be1f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   be1f8:	e002      	b.n	be200 <__adddf3>
   be1fa:	bf00      	nop

000be1fc <__aeabi_dsub>:
   be1fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000be200 <__adddf3>:
   be200:	b530      	push	{r4, r5, lr}
   be202:	ea4f 0441 	mov.w	r4, r1, lsl #1
   be206:	ea4f 0543 	mov.w	r5, r3, lsl #1
   be20a:	ea94 0f05 	teq	r4, r5
   be20e:	bf08      	it	eq
   be210:	ea90 0f02 	teqeq	r0, r2
   be214:	bf1f      	itttt	ne
   be216:	ea54 0c00 	orrsne.w	ip, r4, r0
   be21a:	ea55 0c02 	orrsne.w	ip, r5, r2
   be21e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   be222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be226:	f000 80e2 	beq.w	be3ee <__adddf3+0x1ee>
   be22a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   be22e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   be232:	bfb8      	it	lt
   be234:	426d      	neglt	r5, r5
   be236:	dd0c      	ble.n	be252 <__adddf3+0x52>
   be238:	442c      	add	r4, r5
   be23a:	ea80 0202 	eor.w	r2, r0, r2
   be23e:	ea81 0303 	eor.w	r3, r1, r3
   be242:	ea82 0000 	eor.w	r0, r2, r0
   be246:	ea83 0101 	eor.w	r1, r3, r1
   be24a:	ea80 0202 	eor.w	r2, r0, r2
   be24e:	ea81 0303 	eor.w	r3, r1, r3
   be252:	2d36      	cmp	r5, #54	; 0x36
   be254:	bf88      	it	hi
   be256:	bd30      	pophi	{r4, r5, pc}
   be258:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be25c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be260:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   be264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   be268:	d002      	beq.n	be270 <__adddf3+0x70>
   be26a:	4240      	negs	r0, r0
   be26c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be270:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be274:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be27c:	d002      	beq.n	be284 <__adddf3+0x84>
   be27e:	4252      	negs	r2, r2
   be280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be284:	ea94 0f05 	teq	r4, r5
   be288:	f000 80a7 	beq.w	be3da <__adddf3+0x1da>
   be28c:	f1a4 0401 	sub.w	r4, r4, #1
   be290:	f1d5 0e20 	rsbs	lr, r5, #32
   be294:	db0d      	blt.n	be2b2 <__adddf3+0xb2>
   be296:	fa02 fc0e 	lsl.w	ip, r2, lr
   be29a:	fa22 f205 	lsr.w	r2, r2, r5
   be29e:	1880      	adds	r0, r0, r2
   be2a0:	f141 0100 	adc.w	r1, r1, #0
   be2a4:	fa03 f20e 	lsl.w	r2, r3, lr
   be2a8:	1880      	adds	r0, r0, r2
   be2aa:	fa43 f305 	asr.w	r3, r3, r5
   be2ae:	4159      	adcs	r1, r3
   be2b0:	e00e      	b.n	be2d0 <__adddf3+0xd0>
   be2b2:	f1a5 0520 	sub.w	r5, r5, #32
   be2b6:	f10e 0e20 	add.w	lr, lr, #32
   be2ba:	2a01      	cmp	r2, #1
   be2bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   be2c0:	bf28      	it	cs
   be2c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   be2c6:	fa43 f305 	asr.w	r3, r3, r5
   be2ca:	18c0      	adds	r0, r0, r3
   be2cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   be2d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be2d4:	d507      	bpl.n	be2e6 <__adddf3+0xe6>
   be2d6:	f04f 0e00 	mov.w	lr, #0
   be2da:	f1dc 0c00 	rsbs	ip, ip, #0
   be2de:	eb7e 0000 	sbcs.w	r0, lr, r0
   be2e2:	eb6e 0101 	sbc.w	r1, lr, r1
   be2e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   be2ea:	d31b      	bcc.n	be324 <__adddf3+0x124>
   be2ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   be2f0:	d30c      	bcc.n	be30c <__adddf3+0x10c>
   be2f2:	0849      	lsrs	r1, r1, #1
   be2f4:	ea5f 0030 	movs.w	r0, r0, rrx
   be2f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   be2fc:	f104 0401 	add.w	r4, r4, #1
   be300:	ea4f 5244 	mov.w	r2, r4, lsl #21
   be304:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   be308:	f080 809a 	bcs.w	be440 <__adddf3+0x240>
   be30c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   be310:	bf08      	it	eq
   be312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be316:	f150 0000 	adcs.w	r0, r0, #0
   be31a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be31e:	ea41 0105 	orr.w	r1, r1, r5
   be322:	bd30      	pop	{r4, r5, pc}
   be324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   be328:	4140      	adcs	r0, r0
   be32a:	eb41 0101 	adc.w	r1, r1, r1
   be32e:	3c01      	subs	r4, #1
   be330:	bf28      	it	cs
   be332:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   be336:	d2e9      	bcs.n	be30c <__adddf3+0x10c>
   be338:	f091 0f00 	teq	r1, #0
   be33c:	bf04      	itt	eq
   be33e:	4601      	moveq	r1, r0
   be340:	2000      	moveq	r0, #0
   be342:	fab1 f381 	clz	r3, r1
   be346:	bf08      	it	eq
   be348:	3320      	addeq	r3, #32
   be34a:	f1a3 030b 	sub.w	r3, r3, #11
   be34e:	f1b3 0220 	subs.w	r2, r3, #32
   be352:	da0c      	bge.n	be36e <__adddf3+0x16e>
   be354:	320c      	adds	r2, #12
   be356:	dd08      	ble.n	be36a <__adddf3+0x16a>
   be358:	f102 0c14 	add.w	ip, r2, #20
   be35c:	f1c2 020c 	rsb	r2, r2, #12
   be360:	fa01 f00c 	lsl.w	r0, r1, ip
   be364:	fa21 f102 	lsr.w	r1, r1, r2
   be368:	e00c      	b.n	be384 <__adddf3+0x184>
   be36a:	f102 0214 	add.w	r2, r2, #20
   be36e:	bfd8      	it	le
   be370:	f1c2 0c20 	rsble	ip, r2, #32
   be374:	fa01 f102 	lsl.w	r1, r1, r2
   be378:	fa20 fc0c 	lsr.w	ip, r0, ip
   be37c:	bfdc      	itt	le
   be37e:	ea41 010c 	orrle.w	r1, r1, ip
   be382:	4090      	lslle	r0, r2
   be384:	1ae4      	subs	r4, r4, r3
   be386:	bfa2      	ittt	ge
   be388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   be38c:	4329      	orrge	r1, r5
   be38e:	bd30      	popge	{r4, r5, pc}
   be390:	ea6f 0404 	mvn.w	r4, r4
   be394:	3c1f      	subs	r4, #31
   be396:	da1c      	bge.n	be3d2 <__adddf3+0x1d2>
   be398:	340c      	adds	r4, #12
   be39a:	dc0e      	bgt.n	be3ba <__adddf3+0x1ba>
   be39c:	f104 0414 	add.w	r4, r4, #20
   be3a0:	f1c4 0220 	rsb	r2, r4, #32
   be3a4:	fa20 f004 	lsr.w	r0, r0, r4
   be3a8:	fa01 f302 	lsl.w	r3, r1, r2
   be3ac:	ea40 0003 	orr.w	r0, r0, r3
   be3b0:	fa21 f304 	lsr.w	r3, r1, r4
   be3b4:	ea45 0103 	orr.w	r1, r5, r3
   be3b8:	bd30      	pop	{r4, r5, pc}
   be3ba:	f1c4 040c 	rsb	r4, r4, #12
   be3be:	f1c4 0220 	rsb	r2, r4, #32
   be3c2:	fa20 f002 	lsr.w	r0, r0, r2
   be3c6:	fa01 f304 	lsl.w	r3, r1, r4
   be3ca:	ea40 0003 	orr.w	r0, r0, r3
   be3ce:	4629      	mov	r1, r5
   be3d0:	bd30      	pop	{r4, r5, pc}
   be3d2:	fa21 f004 	lsr.w	r0, r1, r4
   be3d6:	4629      	mov	r1, r5
   be3d8:	bd30      	pop	{r4, r5, pc}
   be3da:	f094 0f00 	teq	r4, #0
   be3de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   be3e2:	bf06      	itte	eq
   be3e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   be3e8:	3401      	addeq	r4, #1
   be3ea:	3d01      	subne	r5, #1
   be3ec:	e74e      	b.n	be28c <__adddf3+0x8c>
   be3ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be3f2:	bf18      	it	ne
   be3f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be3f8:	d029      	beq.n	be44e <__adddf3+0x24e>
   be3fa:	ea94 0f05 	teq	r4, r5
   be3fe:	bf08      	it	eq
   be400:	ea90 0f02 	teqeq	r0, r2
   be404:	d005      	beq.n	be412 <__adddf3+0x212>
   be406:	ea54 0c00 	orrs.w	ip, r4, r0
   be40a:	bf04      	itt	eq
   be40c:	4619      	moveq	r1, r3
   be40e:	4610      	moveq	r0, r2
   be410:	bd30      	pop	{r4, r5, pc}
   be412:	ea91 0f03 	teq	r1, r3
   be416:	bf1e      	ittt	ne
   be418:	2100      	movne	r1, #0
   be41a:	2000      	movne	r0, #0
   be41c:	bd30      	popne	{r4, r5, pc}
   be41e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   be422:	d105      	bne.n	be430 <__adddf3+0x230>
   be424:	0040      	lsls	r0, r0, #1
   be426:	4149      	adcs	r1, r1
   be428:	bf28      	it	cs
   be42a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   be42e:	bd30      	pop	{r4, r5, pc}
   be430:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   be434:	bf3c      	itt	cc
   be436:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   be43a:	bd30      	popcc	{r4, r5, pc}
   be43c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be440:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   be444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be448:	f04f 0000 	mov.w	r0, #0
   be44c:	bd30      	pop	{r4, r5, pc}
   be44e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be452:	bf1a      	itte	ne
   be454:	4619      	movne	r1, r3
   be456:	4610      	movne	r0, r2
   be458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   be45c:	bf1c      	itt	ne
   be45e:	460b      	movne	r3, r1
   be460:	4602      	movne	r2, r0
   be462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be466:	bf06      	itte	eq
   be468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   be46c:	ea91 0f03 	teqeq	r1, r3
   be470:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   be474:	bd30      	pop	{r4, r5, pc}
   be476:	bf00      	nop

000be478 <__aeabi_ui2d>:
   be478:	f090 0f00 	teq	r0, #0
   be47c:	bf04      	itt	eq
   be47e:	2100      	moveq	r1, #0
   be480:	4770      	bxeq	lr
   be482:	b530      	push	{r4, r5, lr}
   be484:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be488:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be48c:	f04f 0500 	mov.w	r5, #0
   be490:	f04f 0100 	mov.w	r1, #0
   be494:	e750      	b.n	be338 <__adddf3+0x138>
   be496:	bf00      	nop

000be498 <__aeabi_i2d>:
   be498:	f090 0f00 	teq	r0, #0
   be49c:	bf04      	itt	eq
   be49e:	2100      	moveq	r1, #0
   be4a0:	4770      	bxeq	lr
   be4a2:	b530      	push	{r4, r5, lr}
   be4a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be4a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be4ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   be4b0:	bf48      	it	mi
   be4b2:	4240      	negmi	r0, r0
   be4b4:	f04f 0100 	mov.w	r1, #0
   be4b8:	e73e      	b.n	be338 <__adddf3+0x138>
   be4ba:	bf00      	nop

000be4bc <__aeabi_f2d>:
   be4bc:	0042      	lsls	r2, r0, #1
   be4be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   be4c2:	ea4f 0131 	mov.w	r1, r1, rrx
   be4c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   be4ca:	bf1f      	itttt	ne
   be4cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   be4d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   be4d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   be4d8:	4770      	bxne	lr
   be4da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   be4de:	bf08      	it	eq
   be4e0:	4770      	bxeq	lr
   be4e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   be4e6:	bf04      	itt	eq
   be4e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   be4ec:	4770      	bxeq	lr
   be4ee:	b530      	push	{r4, r5, lr}
   be4f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   be4f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be4f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be4fc:	e71c      	b.n	be338 <__adddf3+0x138>
   be4fe:	bf00      	nop

000be500 <__aeabi_ul2d>:
   be500:	ea50 0201 	orrs.w	r2, r0, r1
   be504:	bf08      	it	eq
   be506:	4770      	bxeq	lr
   be508:	b530      	push	{r4, r5, lr}
   be50a:	f04f 0500 	mov.w	r5, #0
   be50e:	e00a      	b.n	be526 <__aeabi_l2d+0x16>

000be510 <__aeabi_l2d>:
   be510:	ea50 0201 	orrs.w	r2, r0, r1
   be514:	bf08      	it	eq
   be516:	4770      	bxeq	lr
   be518:	b530      	push	{r4, r5, lr}
   be51a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   be51e:	d502      	bpl.n	be526 <__aeabi_l2d+0x16>
   be520:	4240      	negs	r0, r0
   be522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be526:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be52a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be52e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   be532:	f43f aed8 	beq.w	be2e6 <__adddf3+0xe6>
   be536:	f04f 0203 	mov.w	r2, #3
   be53a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be53e:	bf18      	it	ne
   be540:	3203      	addne	r2, #3
   be542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be546:	bf18      	it	ne
   be548:	3203      	addne	r2, #3
   be54a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   be54e:	f1c2 0320 	rsb	r3, r2, #32
   be552:	fa00 fc03 	lsl.w	ip, r0, r3
   be556:	fa20 f002 	lsr.w	r0, r0, r2
   be55a:	fa01 fe03 	lsl.w	lr, r1, r3
   be55e:	ea40 000e 	orr.w	r0, r0, lr
   be562:	fa21 f102 	lsr.w	r1, r1, r2
   be566:	4414      	add	r4, r2
   be568:	e6bd      	b.n	be2e6 <__adddf3+0xe6>
   be56a:	bf00      	nop

000be56c <__aeabi_dmul>:
   be56c:	b570      	push	{r4, r5, r6, lr}
   be56e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be57a:	bf1d      	ittte	ne
   be57c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be580:	ea94 0f0c 	teqne	r4, ip
   be584:	ea95 0f0c 	teqne	r5, ip
   be588:	f000 f8de 	bleq	be748 <__aeabi_dmul+0x1dc>
   be58c:	442c      	add	r4, r5
   be58e:	ea81 0603 	eor.w	r6, r1, r3
   be592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   be596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   be59a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   be59e:	bf18      	it	ne
   be5a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   be5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be5a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be5ac:	d038      	beq.n	be620 <__aeabi_dmul+0xb4>
   be5ae:	fba0 ce02 	umull	ip, lr, r0, r2
   be5b2:	f04f 0500 	mov.w	r5, #0
   be5b6:	fbe1 e502 	umlal	lr, r5, r1, r2
   be5ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   be5be:	fbe0 e503 	umlal	lr, r5, r0, r3
   be5c2:	f04f 0600 	mov.w	r6, #0
   be5c6:	fbe1 5603 	umlal	r5, r6, r1, r3
   be5ca:	f09c 0f00 	teq	ip, #0
   be5ce:	bf18      	it	ne
   be5d0:	f04e 0e01 	orrne.w	lr, lr, #1
   be5d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   be5d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   be5dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   be5e0:	d204      	bcs.n	be5ec <__aeabi_dmul+0x80>
   be5e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   be5e6:	416d      	adcs	r5, r5
   be5e8:	eb46 0606 	adc.w	r6, r6, r6
   be5ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   be5f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   be5f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   be5f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   be5fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   be600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be604:	bf88      	it	hi
   be606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be60a:	d81e      	bhi.n	be64a <__aeabi_dmul+0xde>
   be60c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   be610:	bf08      	it	eq
   be612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   be616:	f150 0000 	adcs.w	r0, r0, #0
   be61a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be61e:	bd70      	pop	{r4, r5, r6, pc}
   be620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   be624:	ea46 0101 	orr.w	r1, r6, r1
   be628:	ea40 0002 	orr.w	r0, r0, r2
   be62c:	ea81 0103 	eor.w	r1, r1, r3
   be630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   be634:	bfc2      	ittt	gt
   be636:	ebd4 050c 	rsbsgt	r5, r4, ip
   be63a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be63e:	bd70      	popgt	{r4, r5, r6, pc}
   be640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be644:	f04f 0e00 	mov.w	lr, #0
   be648:	3c01      	subs	r4, #1
   be64a:	f300 80ab 	bgt.w	be7a4 <__aeabi_dmul+0x238>
   be64e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   be652:	bfde      	ittt	le
   be654:	2000      	movle	r0, #0
   be656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   be65a:	bd70      	pople	{r4, r5, r6, pc}
   be65c:	f1c4 0400 	rsb	r4, r4, #0
   be660:	3c20      	subs	r4, #32
   be662:	da35      	bge.n	be6d0 <__aeabi_dmul+0x164>
   be664:	340c      	adds	r4, #12
   be666:	dc1b      	bgt.n	be6a0 <__aeabi_dmul+0x134>
   be668:	f104 0414 	add.w	r4, r4, #20
   be66c:	f1c4 0520 	rsb	r5, r4, #32
   be670:	fa00 f305 	lsl.w	r3, r0, r5
   be674:	fa20 f004 	lsr.w	r0, r0, r4
   be678:	fa01 f205 	lsl.w	r2, r1, r5
   be67c:	ea40 0002 	orr.w	r0, r0, r2
   be680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   be684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be68c:	fa21 f604 	lsr.w	r6, r1, r4
   be690:	eb42 0106 	adc.w	r1, r2, r6
   be694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be698:	bf08      	it	eq
   be69a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be69e:	bd70      	pop	{r4, r5, r6, pc}
   be6a0:	f1c4 040c 	rsb	r4, r4, #12
   be6a4:	f1c4 0520 	rsb	r5, r4, #32
   be6a8:	fa00 f304 	lsl.w	r3, r0, r4
   be6ac:	fa20 f005 	lsr.w	r0, r0, r5
   be6b0:	fa01 f204 	lsl.w	r2, r1, r4
   be6b4:	ea40 0002 	orr.w	r0, r0, r2
   be6b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be6bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be6c0:	f141 0100 	adc.w	r1, r1, #0
   be6c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be6c8:	bf08      	it	eq
   be6ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be6ce:	bd70      	pop	{r4, r5, r6, pc}
   be6d0:	f1c4 0520 	rsb	r5, r4, #32
   be6d4:	fa00 f205 	lsl.w	r2, r0, r5
   be6d8:	ea4e 0e02 	orr.w	lr, lr, r2
   be6dc:	fa20 f304 	lsr.w	r3, r0, r4
   be6e0:	fa01 f205 	lsl.w	r2, r1, r5
   be6e4:	ea43 0302 	orr.w	r3, r3, r2
   be6e8:	fa21 f004 	lsr.w	r0, r1, r4
   be6ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be6f0:	fa21 f204 	lsr.w	r2, r1, r4
   be6f4:	ea20 0002 	bic.w	r0, r0, r2
   be6f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   be6fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be700:	bf08      	it	eq
   be702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be706:	bd70      	pop	{r4, r5, r6, pc}
   be708:	f094 0f00 	teq	r4, #0
   be70c:	d10f      	bne.n	be72e <__aeabi_dmul+0x1c2>
   be70e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   be712:	0040      	lsls	r0, r0, #1
   be714:	eb41 0101 	adc.w	r1, r1, r1
   be718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be71c:	bf08      	it	eq
   be71e:	3c01      	subeq	r4, #1
   be720:	d0f7      	beq.n	be712 <__aeabi_dmul+0x1a6>
   be722:	ea41 0106 	orr.w	r1, r1, r6
   be726:	f095 0f00 	teq	r5, #0
   be72a:	bf18      	it	ne
   be72c:	4770      	bxne	lr
   be72e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   be732:	0052      	lsls	r2, r2, #1
   be734:	eb43 0303 	adc.w	r3, r3, r3
   be738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   be73c:	bf08      	it	eq
   be73e:	3d01      	subeq	r5, #1
   be740:	d0f7      	beq.n	be732 <__aeabi_dmul+0x1c6>
   be742:	ea43 0306 	orr.w	r3, r3, r6
   be746:	4770      	bx	lr
   be748:	ea94 0f0c 	teq	r4, ip
   be74c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be750:	bf18      	it	ne
   be752:	ea95 0f0c 	teqne	r5, ip
   be756:	d00c      	beq.n	be772 <__aeabi_dmul+0x206>
   be758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be75c:	bf18      	it	ne
   be75e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be762:	d1d1      	bne.n	be708 <__aeabi_dmul+0x19c>
   be764:	ea81 0103 	eor.w	r1, r1, r3
   be768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be76c:	f04f 0000 	mov.w	r0, #0
   be770:	bd70      	pop	{r4, r5, r6, pc}
   be772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be776:	bf06      	itte	eq
   be778:	4610      	moveq	r0, r2
   be77a:	4619      	moveq	r1, r3
   be77c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be780:	d019      	beq.n	be7b6 <__aeabi_dmul+0x24a>
   be782:	ea94 0f0c 	teq	r4, ip
   be786:	d102      	bne.n	be78e <__aeabi_dmul+0x222>
   be788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   be78c:	d113      	bne.n	be7b6 <__aeabi_dmul+0x24a>
   be78e:	ea95 0f0c 	teq	r5, ip
   be792:	d105      	bne.n	be7a0 <__aeabi_dmul+0x234>
   be794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   be798:	bf1c      	itt	ne
   be79a:	4610      	movne	r0, r2
   be79c:	4619      	movne	r1, r3
   be79e:	d10a      	bne.n	be7b6 <__aeabi_dmul+0x24a>
   be7a0:	ea81 0103 	eor.w	r1, r1, r3
   be7a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be7a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be7ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be7b0:	f04f 0000 	mov.w	r0, #0
   be7b4:	bd70      	pop	{r4, r5, r6, pc}
   be7b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be7ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   be7be:	bd70      	pop	{r4, r5, r6, pc}

000be7c0 <__aeabi_ddiv>:
   be7c0:	b570      	push	{r4, r5, r6, lr}
   be7c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be7c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be7ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be7ce:	bf1d      	ittte	ne
   be7d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be7d4:	ea94 0f0c 	teqne	r4, ip
   be7d8:	ea95 0f0c 	teqne	r5, ip
   be7dc:	f000 f8a7 	bleq	be92e <__aeabi_ddiv+0x16e>
   be7e0:	eba4 0405 	sub.w	r4, r4, r5
   be7e4:	ea81 0e03 	eor.w	lr, r1, r3
   be7e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be7ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be7f0:	f000 8088 	beq.w	be904 <__aeabi_ddiv+0x144>
   be7f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be7f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   be7fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   be800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   be804:	ea4f 2202 	mov.w	r2, r2, lsl #8
   be808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   be80c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   be810:	ea4f 2600 	mov.w	r6, r0, lsl #8
   be814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   be818:	429d      	cmp	r5, r3
   be81a:	bf08      	it	eq
   be81c:	4296      	cmpeq	r6, r2
   be81e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   be822:	f504 7440 	add.w	r4, r4, #768	; 0x300
   be826:	d202      	bcs.n	be82e <__aeabi_ddiv+0x6e>
   be828:	085b      	lsrs	r3, r3, #1
   be82a:	ea4f 0232 	mov.w	r2, r2, rrx
   be82e:	1ab6      	subs	r6, r6, r2
   be830:	eb65 0503 	sbc.w	r5, r5, r3
   be834:	085b      	lsrs	r3, r3, #1
   be836:	ea4f 0232 	mov.w	r2, r2, rrx
   be83a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   be83e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   be842:	ebb6 0e02 	subs.w	lr, r6, r2
   be846:	eb75 0e03 	sbcs.w	lr, r5, r3
   be84a:	bf22      	ittt	cs
   be84c:	1ab6      	subcs	r6, r6, r2
   be84e:	4675      	movcs	r5, lr
   be850:	ea40 000c 	orrcs.w	r0, r0, ip
   be854:	085b      	lsrs	r3, r3, #1
   be856:	ea4f 0232 	mov.w	r2, r2, rrx
   be85a:	ebb6 0e02 	subs.w	lr, r6, r2
   be85e:	eb75 0e03 	sbcs.w	lr, r5, r3
   be862:	bf22      	ittt	cs
   be864:	1ab6      	subcs	r6, r6, r2
   be866:	4675      	movcs	r5, lr
   be868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   be86c:	085b      	lsrs	r3, r3, #1
   be86e:	ea4f 0232 	mov.w	r2, r2, rrx
   be872:	ebb6 0e02 	subs.w	lr, r6, r2
   be876:	eb75 0e03 	sbcs.w	lr, r5, r3
   be87a:	bf22      	ittt	cs
   be87c:	1ab6      	subcs	r6, r6, r2
   be87e:	4675      	movcs	r5, lr
   be880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   be884:	085b      	lsrs	r3, r3, #1
   be886:	ea4f 0232 	mov.w	r2, r2, rrx
   be88a:	ebb6 0e02 	subs.w	lr, r6, r2
   be88e:	eb75 0e03 	sbcs.w	lr, r5, r3
   be892:	bf22      	ittt	cs
   be894:	1ab6      	subcs	r6, r6, r2
   be896:	4675      	movcs	r5, lr
   be898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   be89c:	ea55 0e06 	orrs.w	lr, r5, r6
   be8a0:	d018      	beq.n	be8d4 <__aeabi_ddiv+0x114>
   be8a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   be8a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   be8aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   be8ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   be8b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   be8b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   be8ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   be8be:	d1c0      	bne.n	be842 <__aeabi_ddiv+0x82>
   be8c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be8c4:	d10b      	bne.n	be8de <__aeabi_ddiv+0x11e>
   be8c6:	ea41 0100 	orr.w	r1, r1, r0
   be8ca:	f04f 0000 	mov.w	r0, #0
   be8ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   be8d2:	e7b6      	b.n	be842 <__aeabi_ddiv+0x82>
   be8d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be8d8:	bf04      	itt	eq
   be8da:	4301      	orreq	r1, r0
   be8dc:	2000      	moveq	r0, #0
   be8de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be8e2:	bf88      	it	hi
   be8e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be8e8:	f63f aeaf 	bhi.w	be64a <__aeabi_dmul+0xde>
   be8ec:	ebb5 0c03 	subs.w	ip, r5, r3
   be8f0:	bf04      	itt	eq
   be8f2:	ebb6 0c02 	subseq.w	ip, r6, r2
   be8f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be8fa:	f150 0000 	adcs.w	r0, r0, #0
   be8fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be902:	bd70      	pop	{r4, r5, r6, pc}
   be904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   be908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   be90c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   be910:	bfc2      	ittt	gt
   be912:	ebd4 050c 	rsbsgt	r5, r4, ip
   be916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be91a:	bd70      	popgt	{r4, r5, r6, pc}
   be91c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be920:	f04f 0e00 	mov.w	lr, #0
   be924:	3c01      	subs	r4, #1
   be926:	e690      	b.n	be64a <__aeabi_dmul+0xde>
   be928:	ea45 0e06 	orr.w	lr, r5, r6
   be92c:	e68d      	b.n	be64a <__aeabi_dmul+0xde>
   be92e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be932:	ea94 0f0c 	teq	r4, ip
   be936:	bf08      	it	eq
   be938:	ea95 0f0c 	teqeq	r5, ip
   be93c:	f43f af3b 	beq.w	be7b6 <__aeabi_dmul+0x24a>
   be940:	ea94 0f0c 	teq	r4, ip
   be944:	d10a      	bne.n	be95c <__aeabi_ddiv+0x19c>
   be946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be94a:	f47f af34 	bne.w	be7b6 <__aeabi_dmul+0x24a>
   be94e:	ea95 0f0c 	teq	r5, ip
   be952:	f47f af25 	bne.w	be7a0 <__aeabi_dmul+0x234>
   be956:	4610      	mov	r0, r2
   be958:	4619      	mov	r1, r3
   be95a:	e72c      	b.n	be7b6 <__aeabi_dmul+0x24a>
   be95c:	ea95 0f0c 	teq	r5, ip
   be960:	d106      	bne.n	be970 <__aeabi_ddiv+0x1b0>
   be962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be966:	f43f aefd 	beq.w	be764 <__aeabi_dmul+0x1f8>
   be96a:	4610      	mov	r0, r2
   be96c:	4619      	mov	r1, r3
   be96e:	e722      	b.n	be7b6 <__aeabi_dmul+0x24a>
   be970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be974:	bf18      	it	ne
   be976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be97a:	f47f aec5 	bne.w	be708 <__aeabi_dmul+0x19c>
   be97e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   be982:	f47f af0d 	bne.w	be7a0 <__aeabi_dmul+0x234>
   be986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   be98a:	f47f aeeb 	bne.w	be764 <__aeabi_dmul+0x1f8>
   be98e:	e712      	b.n	be7b6 <__aeabi_dmul+0x24a>

000be990 <__gedf2>:
   be990:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   be994:	e006      	b.n	be9a4 <__cmpdf2+0x4>
   be996:	bf00      	nop

000be998 <__ledf2>:
   be998:	f04f 0c01 	mov.w	ip, #1
   be99c:	e002      	b.n	be9a4 <__cmpdf2+0x4>
   be99e:	bf00      	nop

000be9a0 <__cmpdf2>:
   be9a0:	f04f 0c01 	mov.w	ip, #1
   be9a4:	f84d cd04 	str.w	ip, [sp, #-4]!
   be9a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be9ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be9b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be9b4:	bf18      	it	ne
   be9b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   be9ba:	d01b      	beq.n	be9f4 <__cmpdf2+0x54>
   be9bc:	b001      	add	sp, #4
   be9be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   be9c2:	bf0c      	ite	eq
   be9c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   be9c8:	ea91 0f03 	teqne	r1, r3
   be9cc:	bf02      	ittt	eq
   be9ce:	ea90 0f02 	teqeq	r0, r2
   be9d2:	2000      	moveq	r0, #0
   be9d4:	4770      	bxeq	lr
   be9d6:	f110 0f00 	cmn.w	r0, #0
   be9da:	ea91 0f03 	teq	r1, r3
   be9de:	bf58      	it	pl
   be9e0:	4299      	cmppl	r1, r3
   be9e2:	bf08      	it	eq
   be9e4:	4290      	cmpeq	r0, r2
   be9e6:	bf2c      	ite	cs
   be9e8:	17d8      	asrcs	r0, r3, #31
   be9ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   be9ee:	f040 0001 	orr.w	r0, r0, #1
   be9f2:	4770      	bx	lr
   be9f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be9f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be9fc:	d102      	bne.n	bea04 <__cmpdf2+0x64>
   be9fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bea02:	d107      	bne.n	bea14 <__cmpdf2+0x74>
   bea04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bea08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bea0c:	d1d6      	bne.n	be9bc <__cmpdf2+0x1c>
   bea0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bea12:	d0d3      	beq.n	be9bc <__cmpdf2+0x1c>
   bea14:	f85d 0b04 	ldr.w	r0, [sp], #4
   bea18:	4770      	bx	lr
   bea1a:	bf00      	nop

000bea1c <__aeabi_cdrcmple>:
   bea1c:	4684      	mov	ip, r0
   bea1e:	4610      	mov	r0, r2
   bea20:	4662      	mov	r2, ip
   bea22:	468c      	mov	ip, r1
   bea24:	4619      	mov	r1, r3
   bea26:	4663      	mov	r3, ip
   bea28:	e000      	b.n	bea2c <__aeabi_cdcmpeq>
   bea2a:	bf00      	nop

000bea2c <__aeabi_cdcmpeq>:
   bea2c:	b501      	push	{r0, lr}
   bea2e:	f7ff ffb7 	bl	be9a0 <__cmpdf2>
   bea32:	2800      	cmp	r0, #0
   bea34:	bf48      	it	mi
   bea36:	f110 0f00 	cmnmi.w	r0, #0
   bea3a:	bd01      	pop	{r0, pc}

000bea3c <__aeabi_dcmpeq>:
   bea3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bea40:	f7ff fff4 	bl	bea2c <__aeabi_cdcmpeq>
   bea44:	bf0c      	ite	eq
   bea46:	2001      	moveq	r0, #1
   bea48:	2000      	movne	r0, #0
   bea4a:	f85d fb08 	ldr.w	pc, [sp], #8
   bea4e:	bf00      	nop

000bea50 <__aeabi_dcmplt>:
   bea50:	f84d ed08 	str.w	lr, [sp, #-8]!
   bea54:	f7ff ffea 	bl	bea2c <__aeabi_cdcmpeq>
   bea58:	bf34      	ite	cc
   bea5a:	2001      	movcc	r0, #1
   bea5c:	2000      	movcs	r0, #0
   bea5e:	f85d fb08 	ldr.w	pc, [sp], #8
   bea62:	bf00      	nop

000bea64 <__aeabi_dcmple>:
   bea64:	f84d ed08 	str.w	lr, [sp, #-8]!
   bea68:	f7ff ffe0 	bl	bea2c <__aeabi_cdcmpeq>
   bea6c:	bf94      	ite	ls
   bea6e:	2001      	movls	r0, #1
   bea70:	2000      	movhi	r0, #0
   bea72:	f85d fb08 	ldr.w	pc, [sp], #8
   bea76:	bf00      	nop

000bea78 <__aeabi_dcmpge>:
   bea78:	f84d ed08 	str.w	lr, [sp, #-8]!
   bea7c:	f7ff ffce 	bl	bea1c <__aeabi_cdrcmple>
   bea80:	bf94      	ite	ls
   bea82:	2001      	movls	r0, #1
   bea84:	2000      	movhi	r0, #0
   bea86:	f85d fb08 	ldr.w	pc, [sp], #8
   bea8a:	bf00      	nop

000bea8c <__aeabi_dcmpgt>:
   bea8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bea90:	f7ff ffc4 	bl	bea1c <__aeabi_cdrcmple>
   bea94:	bf34      	ite	cc
   bea96:	2001      	movcc	r0, #1
   bea98:	2000      	movcs	r0, #0
   bea9a:	f85d fb08 	ldr.w	pc, [sp], #8
   bea9e:	bf00      	nop

000beaa0 <__aeabi_dcmpun>:
   beaa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   beaa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   beaa8:	d102      	bne.n	beab0 <__aeabi_dcmpun+0x10>
   beaaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   beaae:	d10a      	bne.n	beac6 <__aeabi_dcmpun+0x26>
   beab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   beab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   beab8:	d102      	bne.n	beac0 <__aeabi_dcmpun+0x20>
   beaba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   beabe:	d102      	bne.n	beac6 <__aeabi_dcmpun+0x26>
   beac0:	f04f 0000 	mov.w	r0, #0
   beac4:	4770      	bx	lr
   beac6:	f04f 0001 	mov.w	r0, #1
   beaca:	4770      	bx	lr

000beacc <__aeabi_d2iz>:
   beacc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bead0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bead4:	d215      	bcs.n	beb02 <__aeabi_d2iz+0x36>
   bead6:	d511      	bpl.n	beafc <__aeabi_d2iz+0x30>
   bead8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   beadc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   beae0:	d912      	bls.n	beb08 <__aeabi_d2iz+0x3c>
   beae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   beae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   beaea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   beaee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   beaf2:	fa23 f002 	lsr.w	r0, r3, r2
   beaf6:	bf18      	it	ne
   beaf8:	4240      	negne	r0, r0
   beafa:	4770      	bx	lr
   beafc:	f04f 0000 	mov.w	r0, #0
   beb00:	4770      	bx	lr
   beb02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   beb06:	d105      	bne.n	beb14 <__aeabi_d2iz+0x48>
   beb08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   beb0c:	bf08      	it	eq
   beb0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   beb12:	4770      	bx	lr
   beb14:	f04f 0000 	mov.w	r0, #0
   beb18:	4770      	bx	lr
   beb1a:	bf00      	nop

000beb1c <__aeabi_d2uiz>:
   beb1c:	004a      	lsls	r2, r1, #1
   beb1e:	d211      	bcs.n	beb44 <__aeabi_d2uiz+0x28>
   beb20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   beb24:	d211      	bcs.n	beb4a <__aeabi_d2uiz+0x2e>
   beb26:	d50d      	bpl.n	beb44 <__aeabi_d2uiz+0x28>
   beb28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   beb2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   beb30:	d40e      	bmi.n	beb50 <__aeabi_d2uiz+0x34>
   beb32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   beb36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   beb3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   beb3e:	fa23 f002 	lsr.w	r0, r3, r2
   beb42:	4770      	bx	lr
   beb44:	f04f 0000 	mov.w	r0, #0
   beb48:	4770      	bx	lr
   beb4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   beb4e:	d102      	bne.n	beb56 <__aeabi_d2uiz+0x3a>
   beb50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   beb54:	4770      	bx	lr
   beb56:	f04f 0000 	mov.w	r0, #0
   beb5a:	4770      	bx	lr

000beb5c <asctime_r>:
   beb5c:	b510      	push	{r4, lr}
   beb5e:	460c      	mov	r4, r1
   beb60:	6941      	ldr	r1, [r0, #20]
   beb62:	6903      	ldr	r3, [r0, #16]
   beb64:	6982      	ldr	r2, [r0, #24]
   beb66:	b086      	sub	sp, #24
   beb68:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   beb6c:	9104      	str	r1, [sp, #16]
   beb6e:	6801      	ldr	r1, [r0, #0]
   beb70:	9103      	str	r1, [sp, #12]
   beb72:	6841      	ldr	r1, [r0, #4]
   beb74:	9102      	str	r1, [sp, #8]
   beb76:	6881      	ldr	r1, [r0, #8]
   beb78:	9101      	str	r1, [sp, #4]
   beb7a:	68c1      	ldr	r1, [r0, #12]
   beb7c:	9100      	str	r1, [sp, #0]
   beb7e:	4907      	ldr	r1, [pc, #28]	; (beb9c <asctime_r+0x40>)
   beb80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   beb84:	440b      	add	r3, r1
   beb86:	4906      	ldr	r1, [pc, #24]	; (beba0 <asctime_r+0x44>)
   beb88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   beb8c:	440a      	add	r2, r1
   beb8e:	4620      	mov	r0, r4
   beb90:	4904      	ldr	r1, [pc, #16]	; (beba4 <asctime_r+0x48>)
   beb92:	f7fc f925 	bl	bade0 <siprintf>
   beb96:	4620      	mov	r0, r4
   beb98:	b006      	add	sp, #24
   beb9a:	bd10      	pop	{r4, pc}
   beb9c:	000c089e 	.word	0x000c089e
   beba0:	000c0889 	.word	0x000c0889
   beba4:	000c0869 	.word	0x000c0869

000beba8 <atexit>:
   beba8:	2300      	movs	r3, #0
   bebaa:	4601      	mov	r1, r0
   bebac:	461a      	mov	r2, r3
   bebae:	4618      	mov	r0, r3
   bebb0:	f000 ba70 	b.w	bf094 <__register_exitproc>

000bebb4 <gmtime>:
   bebb4:	b538      	push	{r3, r4, r5, lr}
   bebb6:	4b0b      	ldr	r3, [pc, #44]	; (bebe4 <gmtime+0x30>)
   bebb8:	681d      	ldr	r5, [r3, #0]
   bebba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bebbc:	4604      	mov	r4, r0
   bebbe:	b953      	cbnz	r3, bebd6 <gmtime+0x22>
   bebc0:	2024      	movs	r0, #36	; 0x24
   bebc2:	f7fc f8f5 	bl	badb0 <malloc>
   bebc6:	4602      	mov	r2, r0
   bebc8:	63e8      	str	r0, [r5, #60]	; 0x3c
   bebca:	b920      	cbnz	r0, bebd6 <gmtime+0x22>
   bebcc:	4b06      	ldr	r3, [pc, #24]	; (bebe8 <gmtime+0x34>)
   bebce:	4807      	ldr	r0, [pc, #28]	; (bebec <gmtime+0x38>)
   bebd0:	2139      	movs	r1, #57	; 0x39
   bebd2:	f7fc f93d 	bl	bae50 <__assert_func>
   bebd6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bebd8:	4620      	mov	r0, r4
   bebda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bebde:	f7fc b957 	b.w	bae90 <gmtime_r>
   bebe2:	bf00      	nop
   bebe4:	2003de8c 	.word	0x2003de8c
   bebe8:	000c08c2 	.word	0x000c08c2
   bebec:	000c08d9 	.word	0x000c08d9

000bebf0 <isprint>:
   bebf0:	4b02      	ldr	r3, [pc, #8]	; (bebfc <isprint+0xc>)
   bebf2:	4418      	add	r0, r3
   bebf4:	7840      	ldrb	r0, [r0, #1]
   bebf6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bebfa:	4770      	bx	lr
   bebfc:	000c098b 	.word	0x000c098b

000bec00 <memcpy>:
   bec00:	440a      	add	r2, r1
   bec02:	4291      	cmp	r1, r2
   bec04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bec08:	d100      	bne.n	bec0c <memcpy+0xc>
   bec0a:	4770      	bx	lr
   bec0c:	b510      	push	{r4, lr}
   bec0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bec12:	f803 4f01 	strb.w	r4, [r3, #1]!
   bec16:	4291      	cmp	r1, r2
   bec18:	d1f9      	bne.n	bec0e <memcpy+0xe>
   bec1a:	bd10      	pop	{r4, pc}

000bec1c <memmove>:
   bec1c:	4288      	cmp	r0, r1
   bec1e:	b510      	push	{r4, lr}
   bec20:	eb01 0402 	add.w	r4, r1, r2
   bec24:	d902      	bls.n	bec2c <memmove+0x10>
   bec26:	4284      	cmp	r4, r0
   bec28:	4623      	mov	r3, r4
   bec2a:	d807      	bhi.n	bec3c <memmove+0x20>
   bec2c:	1e43      	subs	r3, r0, #1
   bec2e:	42a1      	cmp	r1, r4
   bec30:	d008      	beq.n	bec44 <memmove+0x28>
   bec32:	f811 2b01 	ldrb.w	r2, [r1], #1
   bec36:	f803 2f01 	strb.w	r2, [r3, #1]!
   bec3a:	e7f8      	b.n	bec2e <memmove+0x12>
   bec3c:	4402      	add	r2, r0
   bec3e:	4601      	mov	r1, r0
   bec40:	428a      	cmp	r2, r1
   bec42:	d100      	bne.n	bec46 <memmove+0x2a>
   bec44:	bd10      	pop	{r4, pc}
   bec46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bec4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bec4e:	e7f7      	b.n	bec40 <memmove+0x24>

000bec50 <memset>:
   bec50:	4402      	add	r2, r0
   bec52:	4603      	mov	r3, r0
   bec54:	4293      	cmp	r3, r2
   bec56:	d100      	bne.n	bec5a <memset+0xa>
   bec58:	4770      	bx	lr
   bec5a:	f803 1b01 	strb.w	r1, [r3], #1
   bec5e:	e7f9      	b.n	bec54 <memset+0x4>

000bec60 <srand>:
   bec60:	b538      	push	{r3, r4, r5, lr}
   bec62:	4b10      	ldr	r3, [pc, #64]	; (beca4 <srand+0x44>)
   bec64:	681d      	ldr	r5, [r3, #0]
   bec66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bec68:	4604      	mov	r4, r0
   bec6a:	b9b3      	cbnz	r3, bec9a <srand+0x3a>
   bec6c:	2018      	movs	r0, #24
   bec6e:	f7fc f89f 	bl	badb0 <malloc>
   bec72:	4602      	mov	r2, r0
   bec74:	63a8      	str	r0, [r5, #56]	; 0x38
   bec76:	b920      	cbnz	r0, bec82 <srand+0x22>
   bec78:	4b0b      	ldr	r3, [pc, #44]	; (beca8 <srand+0x48>)
   bec7a:	480c      	ldr	r0, [pc, #48]	; (becac <srand+0x4c>)
   bec7c:	2142      	movs	r1, #66	; 0x42
   bec7e:	f7fc f8e7 	bl	bae50 <__assert_func>
   bec82:	490b      	ldr	r1, [pc, #44]	; (becb0 <srand+0x50>)
   bec84:	4b0b      	ldr	r3, [pc, #44]	; (becb4 <srand+0x54>)
   bec86:	e9c0 1300 	strd	r1, r3, [r0]
   bec8a:	4b0b      	ldr	r3, [pc, #44]	; (becb8 <srand+0x58>)
   bec8c:	6083      	str	r3, [r0, #8]
   bec8e:	230b      	movs	r3, #11
   bec90:	8183      	strh	r3, [r0, #12]
   bec92:	2100      	movs	r1, #0
   bec94:	2001      	movs	r0, #1
   bec96:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bec9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bec9c:	2200      	movs	r2, #0
   bec9e:	611c      	str	r4, [r3, #16]
   beca0:	615a      	str	r2, [r3, #20]
   beca2:	bd38      	pop	{r3, r4, r5, pc}
   beca4:	2003de8c 	.word	0x2003de8c
   beca8:	000c08c2 	.word	0x000c08c2
   becac:	000c0932 	.word	0x000c0932
   becb0:	abcd330e 	.word	0xabcd330e
   becb4:	e66d1234 	.word	0xe66d1234
   becb8:	0005deec 	.word	0x0005deec

000becbc <rand>:
   becbc:	4b16      	ldr	r3, [pc, #88]	; (bed18 <rand+0x5c>)
   becbe:	b510      	push	{r4, lr}
   becc0:	681c      	ldr	r4, [r3, #0]
   becc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   becc4:	b9b3      	cbnz	r3, becf4 <rand+0x38>
   becc6:	2018      	movs	r0, #24
   becc8:	f7fc f872 	bl	badb0 <malloc>
   beccc:	63a0      	str	r0, [r4, #56]	; 0x38
   becce:	b928      	cbnz	r0, becdc <rand+0x20>
   becd0:	4602      	mov	r2, r0
   becd2:	4b12      	ldr	r3, [pc, #72]	; (bed1c <rand+0x60>)
   becd4:	4812      	ldr	r0, [pc, #72]	; (bed20 <rand+0x64>)
   becd6:	214e      	movs	r1, #78	; 0x4e
   becd8:	f7fc f8ba 	bl	bae50 <__assert_func>
   becdc:	4a11      	ldr	r2, [pc, #68]	; (bed24 <rand+0x68>)
   becde:	4b12      	ldr	r3, [pc, #72]	; (bed28 <rand+0x6c>)
   bece0:	e9c0 2300 	strd	r2, r3, [r0]
   bece4:	4b11      	ldr	r3, [pc, #68]	; (bed2c <rand+0x70>)
   bece6:	6083      	str	r3, [r0, #8]
   bece8:	230b      	movs	r3, #11
   becea:	8183      	strh	r3, [r0, #12]
   becec:	2201      	movs	r2, #1
   becee:	2300      	movs	r3, #0
   becf0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   becf4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   becf6:	4a0e      	ldr	r2, [pc, #56]	; (bed30 <rand+0x74>)
   becf8:	6920      	ldr	r0, [r4, #16]
   becfa:	6963      	ldr	r3, [r4, #20]
   becfc:	490d      	ldr	r1, [pc, #52]	; (bed34 <rand+0x78>)
   becfe:	4342      	muls	r2, r0
   bed00:	fb01 2203 	mla	r2, r1, r3, r2
   bed04:	fba0 0101 	umull	r0, r1, r0, r1
   bed08:	1c43      	adds	r3, r0, #1
   bed0a:	eb42 0001 	adc.w	r0, r2, r1
   bed0e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bed12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bed16:	bd10      	pop	{r4, pc}
   bed18:	2003de8c 	.word	0x2003de8c
   bed1c:	000c08c2 	.word	0x000c08c2
   bed20:	000c0932 	.word	0x000c0932
   bed24:	abcd330e 	.word	0xabcd330e
   bed28:	e66d1234 	.word	0xe66d1234
   bed2c:	0005deec 	.word	0x0005deec
   bed30:	5851f42d 	.word	0x5851f42d
   bed34:	4c957f2d 	.word	0x4c957f2d

000bed38 <strchr>:
   bed38:	b2c9      	uxtb	r1, r1
   bed3a:	4603      	mov	r3, r0
   bed3c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bed40:	b11a      	cbz	r2, bed4a <strchr+0x12>
   bed42:	428a      	cmp	r2, r1
   bed44:	d1f9      	bne.n	bed3a <strchr+0x2>
   bed46:	4618      	mov	r0, r3
   bed48:	4770      	bx	lr
   bed4a:	2900      	cmp	r1, #0
   bed4c:	bf18      	it	ne
   bed4e:	2300      	movne	r3, #0
   bed50:	e7f9      	b.n	bed46 <strchr+0xe>

000bed52 <strchrnul>:
   bed52:	b510      	push	{r4, lr}
   bed54:	4604      	mov	r4, r0
   bed56:	f7ff ffef 	bl	bed38 <strchr>
   bed5a:	b918      	cbnz	r0, bed64 <strchrnul+0x12>
   bed5c:	4620      	mov	r0, r4
   bed5e:	f000 f832 	bl	bedc6 <strlen>
   bed62:	4420      	add	r0, r4
   bed64:	bd10      	pop	{r4, pc}

000bed66 <strcmp>:
   bed66:	f810 2b01 	ldrb.w	r2, [r0], #1
   bed6a:	f811 3b01 	ldrb.w	r3, [r1], #1
   bed6e:	2a01      	cmp	r2, #1
   bed70:	bf28      	it	cs
   bed72:	429a      	cmpcs	r2, r3
   bed74:	d0f7      	beq.n	bed66 <strcmp>
   bed76:	1ad0      	subs	r0, r2, r3
   bed78:	4770      	bx	lr

000bed7a <strcpy>:
   bed7a:	4603      	mov	r3, r0
   bed7c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bed80:	f803 2b01 	strb.w	r2, [r3], #1
   bed84:	2a00      	cmp	r2, #0
   bed86:	d1f9      	bne.n	bed7c <strcpy+0x2>
   bed88:	4770      	bx	lr
	...

000bed8c <strdup>:
   bed8c:	4b02      	ldr	r3, [pc, #8]	; (bed98 <strdup+0xc>)
   bed8e:	4601      	mov	r1, r0
   bed90:	6818      	ldr	r0, [r3, #0]
   bed92:	f000 b803 	b.w	bed9c <_strdup_r>
   bed96:	bf00      	nop
   bed98:	2003de8c 	.word	0x2003de8c

000bed9c <_strdup_r>:
   bed9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bed9e:	4604      	mov	r4, r0
   beda0:	4608      	mov	r0, r1
   beda2:	460d      	mov	r5, r1
   beda4:	f000 f80f 	bl	bedc6 <strlen>
   beda8:	1c42      	adds	r2, r0, #1
   bedaa:	4611      	mov	r1, r2
   bedac:	4620      	mov	r0, r4
   bedae:	9201      	str	r2, [sp, #4]
   bedb0:	f7fc f83e 	bl	bae30 <_malloc_r>
   bedb4:	4604      	mov	r4, r0
   bedb6:	b118      	cbz	r0, bedc0 <_strdup_r+0x24>
   bedb8:	9a01      	ldr	r2, [sp, #4]
   bedba:	4629      	mov	r1, r5
   bedbc:	f7ff ff20 	bl	bec00 <memcpy>
   bedc0:	4620      	mov	r0, r4
   bedc2:	b003      	add	sp, #12
   bedc4:	bd30      	pop	{r4, r5, pc}

000bedc6 <strlen>:
   bedc6:	4603      	mov	r3, r0
   bedc8:	f813 2b01 	ldrb.w	r2, [r3], #1
   bedcc:	2a00      	cmp	r2, #0
   bedce:	d1fb      	bne.n	bedc8 <strlen+0x2>
   bedd0:	1a18      	subs	r0, r3, r0
   bedd2:	3801      	subs	r0, #1
   bedd4:	4770      	bx	lr

000bedd6 <strncmp>:
   bedd6:	b510      	push	{r4, lr}
   bedd8:	b17a      	cbz	r2, bedfa <strncmp+0x24>
   bedda:	4603      	mov	r3, r0
   beddc:	3901      	subs	r1, #1
   bedde:	1884      	adds	r4, r0, r2
   bede0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bede4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bede8:	4290      	cmp	r0, r2
   bedea:	d101      	bne.n	bedf0 <strncmp+0x1a>
   bedec:	42a3      	cmp	r3, r4
   bedee:	d101      	bne.n	bedf4 <strncmp+0x1e>
   bedf0:	1a80      	subs	r0, r0, r2
   bedf2:	bd10      	pop	{r4, pc}
   bedf4:	2800      	cmp	r0, #0
   bedf6:	d1f3      	bne.n	bede0 <strncmp+0xa>
   bedf8:	e7fa      	b.n	bedf0 <strncmp+0x1a>
   bedfa:	4610      	mov	r0, r2
   bedfc:	e7f9      	b.n	bedf2 <strncmp+0x1c>

000bedfe <strncpy>:
   bedfe:	b510      	push	{r4, lr}
   bee00:	3901      	subs	r1, #1
   bee02:	4603      	mov	r3, r0
   bee04:	b132      	cbz	r2, bee14 <strncpy+0x16>
   bee06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bee0a:	f803 4b01 	strb.w	r4, [r3], #1
   bee0e:	3a01      	subs	r2, #1
   bee10:	2c00      	cmp	r4, #0
   bee12:	d1f7      	bne.n	bee04 <strncpy+0x6>
   bee14:	441a      	add	r2, r3
   bee16:	2100      	movs	r1, #0
   bee18:	4293      	cmp	r3, r2
   bee1a:	d100      	bne.n	bee1e <strncpy+0x20>
   bee1c:	bd10      	pop	{r4, pc}
   bee1e:	f803 1b01 	strb.w	r1, [r3], #1
   bee22:	e7f9      	b.n	bee18 <strncpy+0x1a>

000bee24 <strrchr>:
   bee24:	b538      	push	{r3, r4, r5, lr}
   bee26:	4603      	mov	r3, r0
   bee28:	460c      	mov	r4, r1
   bee2a:	b969      	cbnz	r1, bee48 <strrchr+0x24>
   bee2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bee30:	f7ff bf82 	b.w	bed38 <strchr>
   bee34:	1c43      	adds	r3, r0, #1
   bee36:	4605      	mov	r5, r0
   bee38:	4621      	mov	r1, r4
   bee3a:	4618      	mov	r0, r3
   bee3c:	f7ff ff7c 	bl	bed38 <strchr>
   bee40:	2800      	cmp	r0, #0
   bee42:	d1f7      	bne.n	bee34 <strrchr+0x10>
   bee44:	4628      	mov	r0, r5
   bee46:	bd38      	pop	{r3, r4, r5, pc}
   bee48:	2500      	movs	r5, #0
   bee4a:	e7f5      	b.n	bee38 <strrchr+0x14>

000bee4c <__strtok_r>:
   bee4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bee4e:	b908      	cbnz	r0, bee54 <__strtok_r+0x8>
   bee50:	6810      	ldr	r0, [r2, #0]
   bee52:	b188      	cbz	r0, bee78 <__strtok_r+0x2c>
   bee54:	4604      	mov	r4, r0
   bee56:	4620      	mov	r0, r4
   bee58:	f814 5b01 	ldrb.w	r5, [r4], #1
   bee5c:	460f      	mov	r7, r1
   bee5e:	f817 6b01 	ldrb.w	r6, [r7], #1
   bee62:	b91e      	cbnz	r6, bee6c <__strtok_r+0x20>
   bee64:	b965      	cbnz	r5, bee80 <__strtok_r+0x34>
   bee66:	6015      	str	r5, [r2, #0]
   bee68:	4628      	mov	r0, r5
   bee6a:	e005      	b.n	bee78 <__strtok_r+0x2c>
   bee6c:	42b5      	cmp	r5, r6
   bee6e:	d1f6      	bne.n	bee5e <__strtok_r+0x12>
   bee70:	2b00      	cmp	r3, #0
   bee72:	d1f0      	bne.n	bee56 <__strtok_r+0xa>
   bee74:	6014      	str	r4, [r2, #0]
   bee76:	7003      	strb	r3, [r0, #0]
   bee78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bee7a:	461c      	mov	r4, r3
   bee7c:	e00c      	b.n	bee98 <__strtok_r+0x4c>
   bee7e:	b915      	cbnz	r5, bee86 <__strtok_r+0x3a>
   bee80:	f814 3b01 	ldrb.w	r3, [r4], #1
   bee84:	460e      	mov	r6, r1
   bee86:	f816 5b01 	ldrb.w	r5, [r6], #1
   bee8a:	42ab      	cmp	r3, r5
   bee8c:	d1f7      	bne.n	bee7e <__strtok_r+0x32>
   bee8e:	2b00      	cmp	r3, #0
   bee90:	d0f3      	beq.n	bee7a <__strtok_r+0x2e>
   bee92:	2300      	movs	r3, #0
   bee94:	f804 3c01 	strb.w	r3, [r4, #-1]
   bee98:	6014      	str	r4, [r2, #0]
   bee9a:	e7ed      	b.n	bee78 <__strtok_r+0x2c>

000bee9c <strtok_r>:
   bee9c:	2301      	movs	r3, #1
   bee9e:	f7ff bfd5 	b.w	bee4c <__strtok_r>
	...

000beea4 <_strtol_l.constprop.0>:
   beea4:	2b01      	cmp	r3, #1
   beea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   beeaa:	d001      	beq.n	beeb0 <_strtol_l.constprop.0+0xc>
   beeac:	2b24      	cmp	r3, #36	; 0x24
   beeae:	d906      	bls.n	beebe <_strtol_l.constprop.0+0x1a>
   beeb0:	f7fb ffc6 	bl	bae40 <__errno>
   beeb4:	2316      	movs	r3, #22
   beeb6:	6003      	str	r3, [r0, #0]
   beeb8:	2000      	movs	r0, #0
   beeba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   beebe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; befa4 <_strtol_l.constprop.0+0x100>
   beec2:	460d      	mov	r5, r1
   beec4:	462e      	mov	r6, r5
   beec6:	f815 4b01 	ldrb.w	r4, [r5], #1
   beeca:	f814 700c 	ldrb.w	r7, [r4, ip]
   beece:	f017 0708 	ands.w	r7, r7, #8
   beed2:	d1f7      	bne.n	beec4 <_strtol_l.constprop.0+0x20>
   beed4:	2c2d      	cmp	r4, #45	; 0x2d
   beed6:	d132      	bne.n	bef3e <_strtol_l.constprop.0+0x9a>
   beed8:	782c      	ldrb	r4, [r5, #0]
   beeda:	2701      	movs	r7, #1
   beedc:	1cb5      	adds	r5, r6, #2
   beede:	2b00      	cmp	r3, #0
   beee0:	d05b      	beq.n	bef9a <_strtol_l.constprop.0+0xf6>
   beee2:	2b10      	cmp	r3, #16
   beee4:	d109      	bne.n	beefa <_strtol_l.constprop.0+0x56>
   beee6:	2c30      	cmp	r4, #48	; 0x30
   beee8:	d107      	bne.n	beefa <_strtol_l.constprop.0+0x56>
   beeea:	782c      	ldrb	r4, [r5, #0]
   beeec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   beef0:	2c58      	cmp	r4, #88	; 0x58
   beef2:	d14d      	bne.n	bef90 <_strtol_l.constprop.0+0xec>
   beef4:	786c      	ldrb	r4, [r5, #1]
   beef6:	2310      	movs	r3, #16
   beef8:	3502      	adds	r5, #2
   beefa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   beefe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bef02:	f04f 0c00 	mov.w	ip, #0
   bef06:	fbb8 f9f3 	udiv	r9, r8, r3
   bef0a:	4666      	mov	r6, ip
   bef0c:	fb03 8a19 	mls	sl, r3, r9, r8
   bef10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bef14:	f1be 0f09 	cmp.w	lr, #9
   bef18:	d816      	bhi.n	bef48 <_strtol_l.constprop.0+0xa4>
   bef1a:	4674      	mov	r4, lr
   bef1c:	42a3      	cmp	r3, r4
   bef1e:	dd24      	ble.n	bef6a <_strtol_l.constprop.0+0xc6>
   bef20:	f1bc 0f00 	cmp.w	ip, #0
   bef24:	db1e      	blt.n	bef64 <_strtol_l.constprop.0+0xc0>
   bef26:	45b1      	cmp	r9, r6
   bef28:	d31c      	bcc.n	bef64 <_strtol_l.constprop.0+0xc0>
   bef2a:	d101      	bne.n	bef30 <_strtol_l.constprop.0+0x8c>
   bef2c:	45a2      	cmp	sl, r4
   bef2e:	db19      	blt.n	bef64 <_strtol_l.constprop.0+0xc0>
   bef30:	fb06 4603 	mla	r6, r6, r3, r4
   bef34:	f04f 0c01 	mov.w	ip, #1
   bef38:	f815 4b01 	ldrb.w	r4, [r5], #1
   bef3c:	e7e8      	b.n	bef10 <_strtol_l.constprop.0+0x6c>
   bef3e:	2c2b      	cmp	r4, #43	; 0x2b
   bef40:	bf04      	itt	eq
   bef42:	782c      	ldrbeq	r4, [r5, #0]
   bef44:	1cb5      	addeq	r5, r6, #2
   bef46:	e7ca      	b.n	beede <_strtol_l.constprop.0+0x3a>
   bef48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bef4c:	f1be 0f19 	cmp.w	lr, #25
   bef50:	d801      	bhi.n	bef56 <_strtol_l.constprop.0+0xb2>
   bef52:	3c37      	subs	r4, #55	; 0x37
   bef54:	e7e2      	b.n	bef1c <_strtol_l.constprop.0+0x78>
   bef56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bef5a:	f1be 0f19 	cmp.w	lr, #25
   bef5e:	d804      	bhi.n	bef6a <_strtol_l.constprop.0+0xc6>
   bef60:	3c57      	subs	r4, #87	; 0x57
   bef62:	e7db      	b.n	bef1c <_strtol_l.constprop.0+0x78>
   bef64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bef68:	e7e6      	b.n	bef38 <_strtol_l.constprop.0+0x94>
   bef6a:	f1bc 0f00 	cmp.w	ip, #0
   bef6e:	da05      	bge.n	bef7c <_strtol_l.constprop.0+0xd8>
   bef70:	2322      	movs	r3, #34	; 0x22
   bef72:	6003      	str	r3, [r0, #0]
   bef74:	4646      	mov	r6, r8
   bef76:	b942      	cbnz	r2, bef8a <_strtol_l.constprop.0+0xe6>
   bef78:	4630      	mov	r0, r6
   bef7a:	e79e      	b.n	beeba <_strtol_l.constprop.0+0x16>
   bef7c:	b107      	cbz	r7, bef80 <_strtol_l.constprop.0+0xdc>
   bef7e:	4276      	negs	r6, r6
   bef80:	2a00      	cmp	r2, #0
   bef82:	d0f9      	beq.n	bef78 <_strtol_l.constprop.0+0xd4>
   bef84:	f1bc 0f00 	cmp.w	ip, #0
   bef88:	d000      	beq.n	bef8c <_strtol_l.constprop.0+0xe8>
   bef8a:	1e69      	subs	r1, r5, #1
   bef8c:	6011      	str	r1, [r2, #0]
   bef8e:	e7f3      	b.n	bef78 <_strtol_l.constprop.0+0xd4>
   bef90:	2430      	movs	r4, #48	; 0x30
   bef92:	2b00      	cmp	r3, #0
   bef94:	d1b1      	bne.n	beefa <_strtol_l.constprop.0+0x56>
   bef96:	2308      	movs	r3, #8
   bef98:	e7af      	b.n	beefa <_strtol_l.constprop.0+0x56>
   bef9a:	2c30      	cmp	r4, #48	; 0x30
   bef9c:	d0a5      	beq.n	beeea <_strtol_l.constprop.0+0x46>
   bef9e:	230a      	movs	r3, #10
   befa0:	e7ab      	b.n	beefa <_strtol_l.constprop.0+0x56>
   befa2:	bf00      	nop
   befa4:	000c098c 	.word	0x000c098c

000befa8 <strtol>:
   befa8:	4613      	mov	r3, r2
   befaa:	460a      	mov	r2, r1
   befac:	4601      	mov	r1, r0
   befae:	4802      	ldr	r0, [pc, #8]	; (befb8 <strtol+0x10>)
   befb0:	6800      	ldr	r0, [r0, #0]
   befb2:	f7ff bf77 	b.w	beea4 <_strtol_l.constprop.0>
   befb6:	bf00      	nop
   befb8:	2003de8c 	.word	0x2003de8c

000befbc <close>:
   befbc:	4b02      	ldr	r3, [pc, #8]	; (befc8 <close+0xc>)
   befbe:	4601      	mov	r1, r0
   befc0:	6818      	ldr	r0, [r3, #0]
   befc2:	f000 b8c9 	b.w	bf158 <_close_r>
   befc6:	bf00      	nop
   befc8:	2003de8c 	.word	0x2003de8c

000befcc <fstat>:
   befcc:	4b02      	ldr	r3, [pc, #8]	; (befd8 <fstat+0xc>)
   befce:	460a      	mov	r2, r1
   befd0:	4601      	mov	r1, r0
   befd2:	6818      	ldr	r0, [r3, #0]
   befd4:	f000 b8d0 	b.w	bf178 <_fstat_r>
   befd8:	2003de8c 	.word	0x2003de8c

000befdc <lseek>:
   befdc:	4613      	mov	r3, r2
   befde:	460a      	mov	r2, r1
   befe0:	4601      	mov	r1, r0
   befe2:	4802      	ldr	r0, [pc, #8]	; (befec <lseek+0x10>)
   befe4:	6800      	ldr	r0, [r0, #0]
   befe6:	f000 b8dd 	b.w	bf1a4 <_lseek_r>
   befea:	bf00      	nop
   befec:	2003de8c 	.word	0x2003de8c

000beff0 <open>:
   beff0:	b40e      	push	{r1, r2, r3}
   beff2:	b503      	push	{r0, r1, lr}
   beff4:	ab03      	add	r3, sp, #12
   beff6:	4601      	mov	r1, r0
   beff8:	4806      	ldr	r0, [pc, #24]	; (bf014 <open+0x24>)
   beffa:	f853 2b04 	ldr.w	r2, [r3], #4
   beffe:	9301      	str	r3, [sp, #4]
   bf000:	6800      	ldr	r0, [r0, #0]
   bf002:	9b04      	ldr	r3, [sp, #16]
   bf004:	f000 f8e0 	bl	bf1c8 <_open_r>
   bf008:	b002      	add	sp, #8
   bf00a:	f85d eb04 	ldr.w	lr, [sp], #4
   bf00e:	b003      	add	sp, #12
   bf010:	4770      	bx	lr
   bf012:	bf00      	nop
   bf014:	2003de8c 	.word	0x2003de8c

000bf018 <read>:
   bf018:	4613      	mov	r3, r2
   bf01a:	460a      	mov	r2, r1
   bf01c:	4601      	mov	r1, r0
   bf01e:	4802      	ldr	r0, [pc, #8]	; (bf028 <read+0x10>)
   bf020:	6800      	ldr	r0, [r0, #0]
   bf022:	f000 b8e3 	b.w	bf1ec <_read_r>
   bf026:	bf00      	nop
   bf028:	2003de8c 	.word	0x2003de8c

000bf02c <unlink>:
   bf02c:	4b02      	ldr	r3, [pc, #8]	; (bf038 <unlink+0xc>)
   bf02e:	4601      	mov	r1, r0
   bf030:	6818      	ldr	r0, [r3, #0]
   bf032:	f000 b80d 	b.w	bf050 <_unlink_r>
   bf036:	bf00      	nop
   bf038:	2003de8c 	.word	0x2003de8c

000bf03c <write>:
   bf03c:	4613      	mov	r3, r2
   bf03e:	460a      	mov	r2, r1
   bf040:	4601      	mov	r1, r0
   bf042:	4802      	ldr	r0, [pc, #8]	; (bf04c <write+0x10>)
   bf044:	6800      	ldr	r0, [r0, #0]
   bf046:	f000 b813 	b.w	bf070 <_write_r>
   bf04a:	bf00      	nop
   bf04c:	2003de8c 	.word	0x2003de8c

000bf050 <_unlink_r>:
   bf050:	b538      	push	{r3, r4, r5, lr}
   bf052:	4d06      	ldr	r5, [pc, #24]	; (bf06c <_unlink_r+0x1c>)
   bf054:	2300      	movs	r3, #0
   bf056:	4604      	mov	r4, r0
   bf058:	4608      	mov	r0, r1
   bf05a:	602b      	str	r3, [r5, #0]
   bf05c:	f7fb fc8c 	bl	ba978 <_unlink>
   bf060:	1c43      	adds	r3, r0, #1
   bf062:	d102      	bne.n	bf06a <_unlink_r+0x1a>
   bf064:	682b      	ldr	r3, [r5, #0]
   bf066:	b103      	cbz	r3, bf06a <_unlink_r+0x1a>
   bf068:	6023      	str	r3, [r4, #0]
   bf06a:	bd38      	pop	{r3, r4, r5, pc}
   bf06c:	2003e7f0 	.word	0x2003e7f0

000bf070 <_write_r>:
   bf070:	b538      	push	{r3, r4, r5, lr}
   bf072:	4d07      	ldr	r5, [pc, #28]	; (bf090 <_write_r+0x20>)
   bf074:	4604      	mov	r4, r0
   bf076:	4608      	mov	r0, r1
   bf078:	4611      	mov	r1, r2
   bf07a:	2200      	movs	r2, #0
   bf07c:	602a      	str	r2, [r5, #0]
   bf07e:	461a      	mov	r2, r3
   bf080:	f7fb fc42 	bl	ba908 <_write>
   bf084:	1c43      	adds	r3, r0, #1
   bf086:	d102      	bne.n	bf08e <_write_r+0x1e>
   bf088:	682b      	ldr	r3, [r5, #0]
   bf08a:	b103      	cbz	r3, bf08e <_write_r+0x1e>
   bf08c:	6023      	str	r3, [r4, #0]
   bf08e:	bd38      	pop	{r3, r4, r5, pc}
   bf090:	2003e7f0 	.word	0x2003e7f0

000bf094 <__register_exitproc>:
   bf094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf098:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf154 <__register_exitproc+0xc0>
   bf09c:	4606      	mov	r6, r0
   bf09e:	f8d8 0000 	ldr.w	r0, [r8]
   bf0a2:	461f      	mov	r7, r3
   bf0a4:	460d      	mov	r5, r1
   bf0a6:	4691      	mov	r9, r2
   bf0a8:	f000 f878 	bl	bf19c <__retarget_lock_acquire_recursive>
   bf0ac:	4b25      	ldr	r3, [pc, #148]	; (bf144 <__register_exitproc+0xb0>)
   bf0ae:	681c      	ldr	r4, [r3, #0]
   bf0b0:	b934      	cbnz	r4, bf0c0 <__register_exitproc+0x2c>
   bf0b2:	4c25      	ldr	r4, [pc, #148]	; (bf148 <__register_exitproc+0xb4>)
   bf0b4:	601c      	str	r4, [r3, #0]
   bf0b6:	4b25      	ldr	r3, [pc, #148]	; (bf14c <__register_exitproc+0xb8>)
   bf0b8:	b113      	cbz	r3, bf0c0 <__register_exitproc+0x2c>
   bf0ba:	681b      	ldr	r3, [r3, #0]
   bf0bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf0c0:	6863      	ldr	r3, [r4, #4]
   bf0c2:	2b1f      	cmp	r3, #31
   bf0c4:	dd07      	ble.n	bf0d6 <__register_exitproc+0x42>
   bf0c6:	f8d8 0000 	ldr.w	r0, [r8]
   bf0ca:	f000 f869 	bl	bf1a0 <__retarget_lock_release_recursive>
   bf0ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf0d6:	b34e      	cbz	r6, bf12c <__register_exitproc+0x98>
   bf0d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf0dc:	b988      	cbnz	r0, bf102 <__register_exitproc+0x6e>
   bf0de:	4b1c      	ldr	r3, [pc, #112]	; (bf150 <__register_exitproc+0xbc>)
   bf0e0:	b923      	cbnz	r3, bf0ec <__register_exitproc+0x58>
   bf0e2:	f8d8 0000 	ldr.w	r0, [r8]
   bf0e6:	f000 f85a 	bl	bf19e <__retarget_lock_release>
   bf0ea:	e7f0      	b.n	bf0ce <__register_exitproc+0x3a>
   bf0ec:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf0f0:	f7fb fe5e 	bl	badb0 <malloc>
   bf0f4:	2800      	cmp	r0, #0
   bf0f6:	d0f4      	beq.n	bf0e2 <__register_exitproc+0x4e>
   bf0f8:	2300      	movs	r3, #0
   bf0fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf0fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf102:	6863      	ldr	r3, [r4, #4]
   bf104:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf108:	2201      	movs	r2, #1
   bf10a:	409a      	lsls	r2, r3
   bf10c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf110:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf114:	4313      	orrs	r3, r2
   bf116:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf11a:	2e02      	cmp	r6, #2
   bf11c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf120:	bf02      	ittt	eq
   bf122:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf126:	4313      	orreq	r3, r2
   bf128:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf12c:	6863      	ldr	r3, [r4, #4]
   bf12e:	f8d8 0000 	ldr.w	r0, [r8]
   bf132:	1c5a      	adds	r2, r3, #1
   bf134:	3302      	adds	r3, #2
   bf136:	6062      	str	r2, [r4, #4]
   bf138:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf13c:	f000 f830 	bl	bf1a0 <__retarget_lock_release_recursive>
   bf140:	2000      	movs	r0, #0
   bf142:	e7c6      	b.n	bf0d2 <__register_exitproc+0x3e>
   bf144:	2003e7e8 	.word	0x2003e7e8
   bf148:	2003e75c 	.word	0x2003e75c
   bf14c:	00000000 	.word	0x00000000
   bf150:	000badb1 	.word	0x000badb1
   bf154:	2003def0 	.word	0x2003def0

000bf158 <_close_r>:
   bf158:	b538      	push	{r3, r4, r5, lr}
   bf15a:	4d06      	ldr	r5, [pc, #24]	; (bf174 <_close_r+0x1c>)
   bf15c:	2300      	movs	r3, #0
   bf15e:	4604      	mov	r4, r0
   bf160:	4608      	mov	r0, r1
   bf162:	602b      	str	r3, [r5, #0]
   bf164:	f7fb fbe0 	bl	ba928 <_close>
   bf168:	1c43      	adds	r3, r0, #1
   bf16a:	d102      	bne.n	bf172 <_close_r+0x1a>
   bf16c:	682b      	ldr	r3, [r5, #0]
   bf16e:	b103      	cbz	r3, bf172 <_close_r+0x1a>
   bf170:	6023      	str	r3, [r4, #0]
   bf172:	bd38      	pop	{r3, r4, r5, pc}
   bf174:	2003e7f0 	.word	0x2003e7f0

000bf178 <_fstat_r>:
   bf178:	b538      	push	{r3, r4, r5, lr}
   bf17a:	4d07      	ldr	r5, [pc, #28]	; (bf198 <_fstat_r+0x20>)
   bf17c:	2300      	movs	r3, #0
   bf17e:	4604      	mov	r4, r0
   bf180:	4608      	mov	r0, r1
   bf182:	4611      	mov	r1, r2
   bf184:	602b      	str	r3, [r5, #0]
   bf186:	f7fb fbd7 	bl	ba938 <_fstat>
   bf18a:	1c43      	adds	r3, r0, #1
   bf18c:	d102      	bne.n	bf194 <_fstat_r+0x1c>
   bf18e:	682b      	ldr	r3, [r5, #0]
   bf190:	b103      	cbz	r3, bf194 <_fstat_r+0x1c>
   bf192:	6023      	str	r3, [r4, #0]
   bf194:	bd38      	pop	{r3, r4, r5, pc}
   bf196:	bf00      	nop
   bf198:	2003e7f0 	.word	0x2003e7f0

000bf19c <__retarget_lock_acquire_recursive>:
   bf19c:	4770      	bx	lr

000bf19e <__retarget_lock_release>:
   bf19e:	4770      	bx	lr

000bf1a0 <__retarget_lock_release_recursive>:
   bf1a0:	4770      	bx	lr
	...

000bf1a4 <_lseek_r>:
   bf1a4:	b538      	push	{r3, r4, r5, lr}
   bf1a6:	4d07      	ldr	r5, [pc, #28]	; (bf1c4 <_lseek_r+0x20>)
   bf1a8:	4604      	mov	r4, r0
   bf1aa:	4608      	mov	r0, r1
   bf1ac:	4611      	mov	r1, r2
   bf1ae:	2200      	movs	r2, #0
   bf1b0:	602a      	str	r2, [r5, #0]
   bf1b2:	461a      	mov	r2, r3
   bf1b4:	f7fb fbc8 	bl	ba948 <_lseek>
   bf1b8:	1c43      	adds	r3, r0, #1
   bf1ba:	d102      	bne.n	bf1c2 <_lseek_r+0x1e>
   bf1bc:	682b      	ldr	r3, [r5, #0]
   bf1be:	b103      	cbz	r3, bf1c2 <_lseek_r+0x1e>
   bf1c0:	6023      	str	r3, [r4, #0]
   bf1c2:	bd38      	pop	{r3, r4, r5, pc}
   bf1c4:	2003e7f0 	.word	0x2003e7f0

000bf1c8 <_open_r>:
   bf1c8:	b538      	push	{r3, r4, r5, lr}
   bf1ca:	4d07      	ldr	r5, [pc, #28]	; (bf1e8 <_open_r+0x20>)
   bf1cc:	4604      	mov	r4, r0
   bf1ce:	4608      	mov	r0, r1
   bf1d0:	4611      	mov	r1, r2
   bf1d2:	2200      	movs	r2, #0
   bf1d4:	602a      	str	r2, [r5, #0]
   bf1d6:	461a      	mov	r2, r3
   bf1d8:	f7fb fb8e 	bl	ba8f8 <_open>
   bf1dc:	1c43      	adds	r3, r0, #1
   bf1de:	d102      	bne.n	bf1e6 <_open_r+0x1e>
   bf1e0:	682b      	ldr	r3, [r5, #0]
   bf1e2:	b103      	cbz	r3, bf1e6 <_open_r+0x1e>
   bf1e4:	6023      	str	r3, [r4, #0]
   bf1e6:	bd38      	pop	{r3, r4, r5, pc}
   bf1e8:	2003e7f0 	.word	0x2003e7f0

000bf1ec <_read_r>:
   bf1ec:	b538      	push	{r3, r4, r5, lr}
   bf1ee:	4d07      	ldr	r5, [pc, #28]	; (bf20c <_read_r+0x20>)
   bf1f0:	4604      	mov	r4, r0
   bf1f2:	4608      	mov	r0, r1
   bf1f4:	4611      	mov	r1, r2
   bf1f6:	2200      	movs	r2, #0
   bf1f8:	602a      	str	r2, [r5, #0]
   bf1fa:	461a      	mov	r2, r3
   bf1fc:	f7fb fb8c 	bl	ba918 <_read>
   bf200:	1c43      	adds	r3, r0, #1
   bf202:	d102      	bne.n	bf20a <_read_r+0x1e>
   bf204:	682b      	ldr	r3, [r5, #0]
   bf206:	b103      	cbz	r3, bf20a <_read_r+0x1e>
   bf208:	6023      	str	r3, [r4, #0]
   bf20a:	bd38      	pop	{r3, r4, r5, pc}
   bf20c:	2003e7f0 	.word	0x2003e7f0

000bf210 <dynalib_user>:
   bf210:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   bf220:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bf230:	72697620 6c617574 696e6900 61662074      virtual.init fa
   bf240:	64656c69 526f4c00 61522041 206f6964     iled.LoRA Radio 
   bf250:	74696e69 696c6169 2064657a 6e207361     initialized as n
   bf260:	2065646f 61206925 7720646e 20687469     ode %i and with 
   bf270:	65442061 65636976 6f204449 69252066     a DeviceID of %i
   bf280:	526f4c00 61522041 206f6964 74696e69     .LoRA Radio init
   bf290:	696c6169 2064657a 61207361 74616720     ialized as a gat
   bf2a0:	79617765 74697720 20612068 69766564     eway with a devi
   bf2b0:	44496563 20666f20 44006925 70696365     ceID of %i.Decip
   bf2c0:	65726568 61642064 72206174 726f7065     hered data repor
   bf2d0:	64252074 6f726620 6f6e206d 25206564     t %d from node %
   bf2e0:	65530064 7220746e 6f707365 2065736e     d.Sent response 
   bf2f0:	6e206f74 2065646f 6d206425 61737365     to node %d messa
   bf300:	25206567 74202c64 20656d69 7325203d     ge %d, time = %s
   bf310:	646e6120 65726620 6e657571 25207963      and frequency %
   bf320:	696d2064 6574756e 65520073 6e6f7073     d minutes.Respon
   bf330:	72206573 69656365 20646576 63637573     se received succ
   bf340:	66737365 796c6c75 73202d20 65636375     essfully - succe
   bf350:	72207373 20657461 322e3425 65520066     ss rate %4.2f.Re
   bf360:	6e6f7073 6e206573 6120746f 6f6e6b63     sponse not ackno
   bf370:	64656c77 20646567 7573202d 73656363     wledged - succes
   bf380:	61722073 25206574 66322e34 6e655300     s rate %4.2f.Sen
   bf390:	65722074 6e6f7073 74206573 6f6e206f     t response to no
   bf3a0:	25206564 74202c64 20656d69 7325203d     de %d, time = %s
   bf3b0:	646e6120 65726620 6e657571 25207963      and frequency %
   bf3c0:	696d2064 6574756e 65520073 6e6f7073     d minutes.Respon
   bf3d0:	72206573 69656365 20646576 63637573     se received succ
   bf3e0:	66737365 796c6c75 73655200 736e6f70     essfully.Respons
   bf3f0:	6f6e2065 63612074 776f6e6b 6764656c     e not acknowledg
   bf400:	44006465 70696365 65726568 6c612064     ed.Deciphered al
   bf410:	20747265 6f706572 66207472 206d6f72     ert report from 
   bf420:	65646f6e 00642520 746e6553 6b636120     node %d.Sent ack
   bf430:	6c776f6e 6d676465 20746e65 4e206f74     nowledgment to N
   bf440:	2065646f 202c6425 656d6974 25203d20     ode %d, time = %
   bf450:	6e612073 72662064 65757165 2079636e     s and frequency 
   bf460:	6d206425 74756e69 52007365 6f707365     %d minutes.Respo
   bf470:	6e69646e 73752067 20676e69 20656874     nding using the 
   bf480:	6d207325 61737365 74206567 00657079     %s message type.
   bf490:	6d6f7246 646f6e20 64252065 206f7420     From node %d to 
   bf4a0:	77206425 20687469 69737372 2064253d     %d with rssi=%d 
   bf4b0:	2061202d 6d207325 61737365 6f206567     - a %s message o
   bf4c0:	656c2066 6874676e 20642520 25206e69     f length %d in %
   bf4d0:	6f682064 57007370 72612065 70752065     d hops.We are up
   bf4e0:	69746164 7420676e 70206568 696c6275     dating the publi
   bf4f0:	66206873 75716572 79636e65 206f7420     sh frequency to 
   bf500:	6d206925 74756e69 00007365              %i minutes..

000bf50c <_ZTV14LoRA_Functions>:
	...
   bf514:	000b40cd 000b40cf 6f706552 66207472     .@...@..Report f
   bf524:	75716572 79636e65 20642520 736e696d     requency %d mins
   bf534:	656e202c 65207478 746e6576 206e6920     , next event in 
   bf544:	20756c25 6f636573 0073646e 6d6f7246     %lu seconds.From
   bf554:	20732520 25206f74 69772073 69206874      %s to %s with i
   bf564:	6c61766e 74206469 00656d69 6d6f7246     nvalid time.From
   bf574:	20732520 25206f74 6f662073 75252072      %s to %s for %u
   bf584:	63657320 73646e6f 6f724600 7325206d      seconds.From %s
   bf594:	206f7420 53007325 7065656c 726f6620      to %s.Sleep for
   bf5a4:	20692520 6f636573 2073646e 6c6c6974      %i seconds till
   bf5b4:	78656e20 76652074 20746e65 25207461      next event at %
   bf5c4:	69772073 25206874 6620696c 20656572     s with %li free 
   bf5d4:	6f6d656d 41007972 656b6f77 20746120     memory.Awoke at 
   bf5e4:	77207325 20687469 20696c25 65657266     %s with %li free
   bf5f4:	6d656d20 0079726f 65746147 20796177      memory.Gateway 
   bf604:	6c207369 65747369 676e696e 726f6620     is listening for
   bf614:	526f4c20 656d2041 67617373 7b007365      LoRA messages.{
   bf624:	646f6e22 22646965 2c75253a 6f682220     "nodeid":%u, "ho
   bf634:	796c7275 75253a22 6422202c 796c6961     urly":%u, "daily
   bf644:	75253a22 6162222c 72657474 253a2279     ":%u,"battery":%
   bf654:	66322e34 656b222c 3a223179 22732522     4.2f,"key1":"%s"
   bf664:	6574222c 3a22706d 202c6425 73657222     ,"temp":%d, "res
   bf674:	22737465 2c64253a 73737222 253a2269     ets":%d,"rssi":%
   bf684:	22202c64 2267736d 2c64253a 6d697422     d, "msg":%d,"tim
   bf694:	61747365 3a22706d 30756c25 007d3030     estamp":%lu000}.
   bf6a4:	64696255 2d73746f 41526f4c 6f6f482d     Ubidots-LoRA-Hoo
   bf6b4:	31762d6b 65654400 6f702070 20726577     k-v1.Deep power 
   bf6c4:	6e776f64 76656420 00656369 35545345     down device.EST5
   bf6d4:	2c544445 322e334d 322f302e 3a30303a     EDT,M3.2.0/2:00:
   bf6e4:	4d2c3030 312e3131 322f302e 3a30303a     00,M11.1.0/2:00:
   bf6f4:	41003030 72657373 6e6f6974 6c696146     00.AssertionFail
   bf704:	20657275 20637273 73202626 3e2d6372     ure src && src->
   bf714:	6c6c6163 6b636162 74614700 79617765     callback.Gateway
   bf724:	61747320 70757472 6d6f6320 74656c70      startup complet
   bf734:	74612065 20732520 68746977 74616220     e at %s with bat
   bf744:	79726574 2e342520 55006632 20726573     tery %4.2f.User 
   bf754:	74747562 70206e6f 73736572 202c6465     button pressed, 
   bf764:	74736574 646f6d20 6f4e0065 65737520     test mode.No use
   bf774:	75622072 6e6f7474 73757020 65642068     r button push de
   bf784:	68636574 00646574                       techted.

000bf78c <_ZTV8MB85RC64>:
	...
   bf794:	000b52e1 000b52f5 000b7aed 000b7b83     .R...R...z...{..
   bf7a4:	000b7c05                                .|..

000bf7a8 <_ZTV13sysStatusData>:
	...
   bf7b0:	000b53fd 000b536d 000b534b 000ba36d     .S..mS..KS..m...
   bf7c0:	000ba395 000ba489 000ba521 000b5309     ........!....S..
   bf7d0:	000b5321                                !S..

000bf7d4 <_ZTV17currentStatusData>:
	...
   bf7dc:	000b5417 000b536d 000b534b 000ba36d     .T..mS..KS..m...
   bf7ec:	000ba395 000ba489 000ba521 000b52b5     ........!....R..
   bf7fc:	000b52cd 74696e49 7a696c61 20676e69     .R..Initalizing 
   bf80c:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   bf81c:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   bf82c:	666e6f43 00006769                       Config..

000bf834 <BLUE_LED>:
   bf834:	                                         ..

000bf836 <BUTTON_PIN>:
   bf836:	                                         ..

000bf838 <RFM95_CS>:
   bf838:	                                         ..

000bf83a <RFM95_INT>:
   bf83a:	                                         ..

000bf83c <TMP36_SENSE_PIN>:
   bf83c:	7525000f 6e696d20 73657275 73655900     ..%u minures.Yes
   bf84c:	006f4e00 69726556 006e6f7a 6e6b6e55     .No.Verizon.Unkn
   bf85c:	006e776f 20746f4e 72616843 676e6967     own.Not Charging
   bf86c:	61684300 64656772 73694400 72616863     .Charged.Dischar
   bf87c:	676e6967 75614600 4400746c 6e6f6369     ging.Fault.Dicon
   bf88c:	7463656e 49006465 6974696e 7a696c61     nected.Initializ
   bf89c:	20676e69 74726150 656c6369 6e756620     ing Particle fun
   bf8ac:	6f697463 6120736e 7620646e 61697261     ctions and varia
   bf8bc:	73656c62 776f4c00 776f5020 4d207265     bles.Low Power M
   bf8cc:	0065646f 656c6552 00657361 6e676953     ode.Release.Sign
   bf8dc:	73006c61 65746174 6843664f 61420067     al.stateOfChg.Ba
   bf8ec:	72657474 6e6f4379 74786574 70655200     tteryContext.Rep
   bf8fc:	6974726f 4620676e 75716572 79636e65     orting Frequency
   bf90c:	4d495300 72614320 65530064 6f4c2074     .SIM Card.Set Lo
   bf91c:	6f502077 00726577 20746553 71657246     w Power.Set Freq
   bf92c:	636e6575 68530079 2074726f 6f706572     uency.Short repo
   bf93c:	6e697472 72662067 65757165 2079636e     rting frequency 
   bf94c:	7265766f 6469722d 6c207365 7020776f     over-rides low p
   bf95c:	7265776f 70655200 2074726f 71657266     ower.Report freq
   bf96c:	636e6575 69772079 62206c6c 65732065     uency will be se
   bf97c:	6f742074 20692520 756e696d 20736574     t to %i minutes 
   bf98c:	6e207461 20747865 41526f4c 6e6f6320     at next LoRA con
   bf99c:	7463656e 6d695400 65790065 6f6e0073     nect.Time.yes.no
   bf9ac:	636e4900 73616572 20676e69 6f706572     .Increasing repo
   bf9bc:	6e697472 72662067 65757165 2079636e     rting frequency 
   bf9cc:	31206f74 696d2032 6574756e 73490073     to 12 minutes.Is
   bf9dc:	776f4c20 776f5020 4d207265 2065646f      Low Power Mode 
   bf9ec:	3f746573 00732520 20746553 56206f74     set? %s.Set to V
   bf9fc:	7a697265 53206e6f 53004d49 74207465     erizon SIM.Set t
   bfa0c:	6150206f 63697472 5320656c 49004d49     o Particle SIM.I
   bfa1c:	6874206e 69642065 6e6f6373 7463656e     n the disconnect
   bfa2c:	6f726620 6150206d 63697472 6620656c      from Particle f
   bfa3c:	74636e75 006e6f69 6c696146 74206465     unction.Failed t
   bfa4c:	6964206f 6e6f6373 7463656e 6f726620     o disconnect fro
   bfa5c:	6150206d 63697472 4400656c 6f637369     m Particle.Disco
   bfa6c:	63656e6e 20646574 6d6f7266 72615020     nnected from Par
   bfa7c:	6c636974 6e692065 20692520 6f636573     ticle in %i seco
   bfa8c:	0073646e 6c696146 74206465 7574206f     nds.Failed to tu
   bfa9c:	6f206e72 74206666 43206568 756c6c65     rn off the Cellu
   bfaac:	2072616c 65646f6d 7554006d 64656e72     lar modem.Turned
   bfabc:	66666f20 65687420 6c656320 616c756c      off the cellula
   bfacc:	6f6d2072 206d6564 25206e69 65732069     r modem in %i se
   bfadc:	646e6f63 00000073                       conds...

000bfae4 <_ZTVN5spark10LogHandlerE>:
	...
   bfaf4:	000b40a5 000b5945                       .@..EY..

000bfafc <_ZTVN5spark16SerialLogHandlerE>:
	...
   bfb04:	000b59bd 000b59f1 000bca1d 000b5947     .Y...Y......GY..
   bfb14:	656e6f4e 46695700 53470069 4d55004d     None.WiFi.GSM.UM
   bfb24:	43005354 00414d44 0045544c 45454549     TS.CDMA.LTE.IEEE
   bfb34:	31323038 4c003435 435f4554 4d5f5441     802154.LTE_CAT_M
   bfb44:	544c0031 41435f45 424e5f54 73250031     1.LTE_CAT_NB1.%s
   bfb54:	253a5320 66302e32 202c2525 32253a51      S:%2.0f%%, Q:%2
   bfb64:	2566302e 25002025 00432069 000bf858     .0f%% .%i C.X...
   bfb74:	000bfb14 000bfb19 000bfb1e 000bfb22     ............"...
   bfb84:	000bfb27 000bfb2c 000bfb30 000bfb3b     '...,...0...;...
   bfb94:	000bfb46 6c696166 74206465 6572206f     F...failed to re
   bfba4:	72206461 64416765 253d7264 20783230     ad regAddr=%02x 
   bfbb4:	6e756f63 75253d74 69616600 2064656c     count=%u.failed 
   bfbc4:	72206f74 20646165 41676572 3d726464     to read regAddr=
   bfbd4:	78323025 61747320 64253d74 554f4600     %02x stat=%d.FOU
   bfbe4:	69642054 6f6e2064 6f672074 47494820     T did not go HIG
   bfbf4:	6f6e0048 65642074 74636574 66006465     H.not detected.f
   bfc04:	656c6961 6f742064 69727720 72206574     ailed to write r
   bfc14:	64416765 253d7264 20783230 74617473     egAddr=%02x stat
   bfc24:	0064253d 57746573 25205444 61770064     =%d.setWDT %d.wa
   bfc34:	64686374 6320676f 7261656c 62206465     tchdog cleared b
   bfc44:	75736552 253d746c 61770064 64686374     Result=%d.watchd
   bfc54:	7320676f 66207465 5372756f 3d736365     og set fourSecs=
   bfc64:	62206425 75736552 253d746c 41570064     %d bResult=%d.WA
   bfc74:	44484354 4400474f 5f504545 45574f50     TCHDOG.DEEP_POWE
   bfc84:	4f445f52 43004e57 544e554f 4e574f44     R_DOWN.COUNTDOWN
   bfc94:	4d49545f 41005245 4d52414c 69616600     _TIMER.ALARM.fai
   bfca4:	6572756c 206e6920 61647075 61576574     lure in updateWa
   bfcb4:	6552656b 6e6f7361 00642520 656b6177     keReason %d.wake
   bfcc4:	61657220 206e6f73 7325203d 69616600      reason = %s.fai
   bfcd4:	6572756c 206e6920 43746573 746e756f     lure in setCount
   bfce4:	6e776f64 656d6954 64252072 69616600     downTimer %d.fai
   bfcf4:	6572756c 206e6920 70656564 65776f50     lure in deepPowe
   bfd04:	776f4472 6425206e 47455200 454c535f     rDown %d.REG_SLE
   bfd14:	435f5045 3d4c5254 32257830 69640078     EP_CTRL=0x%2x.di
   bfd24:	74276e64 776f7020 64207265 006e776f     dn't power down.
   bfd34:	64343025 3230252d 30252d64 25206432     %04d-%02d-%02d %
   bfd44:	3a643230 64323025 3230253a 65670064     02d:%02d:%02d.ge
   bfd54:	63745274 6d547341 00732520 52746573     tRtcAsTm %s.setR
   bfd64:	73416374 25206d54 61660073 72756c69     tcAsTm %s.failur
   bfd74:	6e692065 74657320 46637452 546d6f72     e in setRtcFromT
   bfd84:	6425206d 74657300 43545220 6f726620     m %d.set RTC fro
   bfd94:	6c63206d 2064756f 73007325 73207465     m cloud %s.set s
   bfda4:	65747379 6c63206d 206b636f 6d6f7266     ystem clock from
   bfdb4:	43545220 00732520 6c696166 74206465      RTC %s.failed t
   bfdc4:	6564206f 74636574 31424120 00353038     o detect AB1805.
   bfdd4:	2e707061 38316261 00003530              app.ab1805..

000bfde0 <_ZTV6AB1805>:
	...
   bfde8:	000b62ad 000b62af 000b6925 000b69ab     .b...b..%i...i..
   bfdf8:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   bfe08:	004b5268                                hRK.

000bfe0c <_ZTV19BackgroundPublishRK>:
	...
   bfe14:	000b6ee1 000b6efd 253a6425 64253a64     .n...n..%d:%d:%d
   bfe24:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   bfe34:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   bfe44:	302b2500 253a6433 00753230              .%+03d:%02u.

000bfe50 <_ZTV9LocalTime>:
	...
   bfe58:	000b7231 000b7249                       1r..Ir..

000bfe60 <_ZTV12LocalTimeHMS>:
	...
   bfe68:	000b71df 000b71e3                       .q...q..

000bfe70 <_ZTV15LocalTimeChange>:
	...
   bfe78:	000b71e1 000b71f1                       .q...q..

000bfe80 <_ZTV22LocalTimePosixTimezone>:
	...
   bfe88:	000b7201 000b721d                       .r...r..

000bfe90 <_ZTV6MB85RC>:
	...
   bfe98:	000b7aad 000b7aaf 000b7aed 000b7b83     .z...z...z...{..
   bfea8:	000b7c05 656c6966 3d6d754e 73206425     .|..fileNum=%d s
   bfeb8:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   bfec8:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   bfed8:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   bfee8:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   bfef8:	64657470 65766520 6e20746e 20656d61     pted event name 
   bff08:	6420726f 00617461 64616572 75657551     or data.readQueu
   bff18:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   bff28:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   bff38:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   bff48:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   bff58:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   bff68:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   bff78:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   bff88:	76652064 20746e65 72006425 74657365     d event %d.reset
   bff98:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   bffa8:	746e6576 6173202c 66206576 73656c69     vent, save files
   bffb8:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   bffc8:	72616373 676e6964 726f6320 74707572     scarding corrupt
   bffd8:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   bffe8:	6e696873 73252067 65766520 253d746e     shing %s event=%
   bfff8:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c0008:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c0018:	20736920 75716572 64657269 62757000      is required.pub
   c0028:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c0038:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c0048:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c0058:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c0068:	72656772 61687420 616d206e 69735f78     rger than max_si
   c0078:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c0088:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c0098:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c00a8:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c00b8:	00657565 6c627570 20687369 63637573     eue.publish succ
   c00c8:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c00d8:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c00e8:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c00f8:	206f7420 656c6966 66612073 20726574      to files after 
   c0108:	6c627570 20687369 6c696166 00657275     publish failure.
   c0118:	2e707061 71627570 00000000              app.pubq....

000c0124 <_ZTV17PublishQueuePosix>:
	...
   c012c:	000b8539 000b87f5 000b8819              9...........

000c0138 <_ZTV15RHGenericDriver>:
	...
   c0148:	000b8939 000b40a5 000b40a5 000b40a5     9....@...@...@..
   c0158:	000b40a5 000b899b 000b893d 000b89eb     .@......=.......
   c0168:	000b89b9 000b8a0f 000b8947 000b894f     ........G...O...
   c0178:	000b8953 000b8957 000b895b 000b895f     S...W...[..._...
   c0188:	000b894b 000b896b 000b896f 000b8973     K...k...o...s...
   c0198:	000b8977 000b897b 000b8981 000b8985     w...{...........
   c01a8:	000b8947 000b8989 000b898f 000b8995     G...............

000c01b8 <_ZTV12RHGenericSPI>:
	...
   c01c0:	000b40a5 000b8a6d 000b8a6f 000b40a5     .@..m...o....@..
   c01d0:	000b40a5 000b8a77 000b8a7b 000b8a7f     .@..w...{.......
   c01e0:	000b8a71 000b8a73 000b8a75 61666564     q...s...u...defa
   c01f0:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c0200:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c0210:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c0220:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c0230 <_ZTVN8particle11SPISettingsE>:
	...
   c0238:	000b8ac5 000b8a99 000b8a9b              ............

000c0244 <_ZTV13RHHardwareSPI>:
	...
   c024c:	000b8b79 000b8b8d 000b8b9b 000b8ba9     y...............
   c025c:	000b8c15 000b8a77 000b8a7b 000b8a7f     ....w...{.......
   c026c:	000b8c23 000b8c37 000b8c45              #...7...E...

000c0278 <_ZTV6RHMesh>:
	...
   c0280:	000b8d11 000b8fb9 000b8c71 000b8c5d     ........q...]...

000c0290 <_ZTV8RHRouter>:
	...
   c0298:	000b9225 000b9269                       %...i...

000c02a0 <_ZTV11RHSPIDriver>:
	...
   c02b0:	000b9505 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c02c0:	000b40a5 000b899b 000b893d 000b89eb     .@......=.......
   c02d0:	000b89b9 000b8a0f 000b8947 000b894f     ........G...O...
   c02e0:	000b8953 000b8957 000b895b 000b895f     S...W...[..._...
   c02f0:	000b894b 000b896b 000b896f 000b8973     K...k...o...s...
   c0300:	000b8977 000b897b 000b8981 000b8985     w...{...........
   c0310:	000b8947 000b8989 000b898f 000b8995     G...............
   c0320:	000b9531 000b953b                       1...;...

000c0328 <_ZL18MODEM_CONFIG_TABLE>:
   c0328:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c0338 <_ZTV7RH_RF95>:
	...
   c0340:	000b96a3 000b96db 000b9bb1 000b9a47     ............G...
   c0350:	000b9711 000b9a8f 000b969f 000b899b     ................
   c0360:	000b893d 000b89eb 000b89b9 000b8a0f     =...............
   c0370:	000b96a5 000b894f 000b8953 000b8957     ....O...S...W...
   c0380:	000b895b 000b895f 000b894b 000b896b     [..._...K...k...
   c0390:	000b896f 000b8973 000b8977 000b897b     o...s...w...{...
   c03a0:	000b8981 000b8985 000b96eb 000b8989     ................
   c03b0:	000b898f 000b8995 000b9531 000b953b     ........1...;...
   c03c0:	000b969b 64383025 72002f00 766f6d65     ....%08d./.remov
   c03d0:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c03e0:	20646e61 61207369 72696420 6f746365     and is a directo
   c03f0:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c0400:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c0410:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c0420:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c0430:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c0440:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c0450:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c0460:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c0470:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c0480:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c0490:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c04a0:	74657220 656e7275 64252064 70706100      returned %d.app
   c04b0:	7165732e 656c6966 00000000              .seqfile....

000c04bc <_ZTV14SequentialFile>:
	...
   c04c4:	000ba00d 000ba039 000b9cb9 3a746f67     ....9.......got:
   c04d4:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c04e4:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c04f4:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c0504:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c0514:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c0524:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c0534 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c053c:	000ba367 000ba3b3 000ba365 000ba36d     g.......e...m...
   c054c:	000ba395 000ba489 000ba521 74746553     ........!...Sett
   c055c:	20676e69 756c6176 66207365 7420726f     ing values for t
   c056c:	47206568 77657461 00007961              he Gateway..

000c0578 <_ZTVN5spark13CellularClassE>:
	...
   c0580:	000baf9b 000baf91 000baf87 000baf3d     ............=...
   c0590:	000baf7b 000baf6f 000bcd75 000bcd7d     {...o...u...}...
   c05a0:	000baf63 000baf5b 000baf51 000baf47     c...[...Q...G...
   c05b0:	000bcdad                                ....

000c05b4 <_ZTV14CellularSignal>:
	...
   c05bc:	000bb029 000bb08d 000bb02b 000bb09d     ).......+.......
   c05cc:	000bb0d1 000bb0fd 000bb131 000bb051     ........1...Q...
   c05dc:	000bb02f 000bb04b fffffffc 00000000     /...K...........
   c05ec:	000bb085                                ....

000c05f0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c05f8:	000bb175 000bb17b 000bb1b9 000bb189     u...{...........
   c0608:	000bb177                                w...

000c060c <_ZTVN5spark13EthernetClassE>:
	...
   c0614:	000bb783 000bb779 000bb76f 000bb765     ....y...o...e...
   c0624:	000bb759 000bb74d 000bcd75 000bcd7d     Y...M...u...}...
   c0634:	000bb741 000bb739 000bb72f 000bb725     A...9.../...%...
   c0644:	000bcdad                                ....

000c0648 <_ZTV7TwoWire>:
	...
   c0650:	000bb853 000bb89d 000bb875 000bb855     S.......u...U...
   c0660:	000bb87d 000bb885 000bb88d 000bb895     }...............

000c0670 <_ZTV9IPAddress>:
	...
   c0678:	000bba35 000bba25 000bba27 34302575     5...%...'...u%04
   c0688:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c0698:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c06a8:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c06b8:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c06c8:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   c06d8:	20736c69 0d00203d 6e6c000a 006e6600     ils = ....ln.fn.
   c06e8:	65646f63 74656400 006c6961              code.detail.

000c06f4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c06fc:	000bbee1 000bbf07 000bbec5 000bbb43     ............C...

000c070c <_ZTVN5spark16StreamLogHandlerE>:
	...
   c0714:	000bc2c5 000bc2dd 000bca1d 000b5947     ............GY..

000c0724 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c072c:	000bc2f1 000bc305 000bcbc1 000bbecd     ................

000c073c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c0744:	000bbedf 000bbf15 000bc981 000bbecf     ................

000c0754 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c075c:	000bbedd 000bbf23 000bc22d 000bbf45     ....#...-...E...

000c076c <_ZTVN5spark12NetworkClassE>:
	...
   c0774:	000bcd35 000bcd3f 000bcd49 000bcd53     5...?...I...S...
   c0784:	000bcd5d 000bcd69 000bcd75 000bcd7d     ]...i...u...}...
   c0794:	000bcd85 000bcd91 000bcd99 000bcda3     ................
   c07a4:	000bcdad 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000c07b4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c07b4:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c07c4:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c07d4:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c07e4:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c07f4:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c0804:	00000065                                e...

000c0808 <_ZTV11USARTSerial>:
	...
   c0810:	000bdc15 000bdc81 000bdc59 000bcffd     ........Y.......
   c0820:	000bdc29 000bdc45 000bdc37 000bdc53     )...E...7...S...
   c0830:	000bdc17 000bdc1b                       ........

000c0838 <_ZTV9USBSerial>:
	...
   c0840:	000bdcd3 000bdd3b 000bdd11 000bcffd     ....;...........
   c0850:	000bdd03 000bdcd5 000bdce5 000bdd35     ............5...
   c0860:	000bdcf5 000bdccd                       ........

000c0868 <_ZSt7nothrow>:
   c0868:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c0878:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c0889 <day_name.1>:
   c0889:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c0899:	61536972                                 riSat

000c089e <mon_name.0>:
   c089e:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c08ae:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c08be:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c08ce:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c08de:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c08ee:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c08fe:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c090e:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c091e:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c092e:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c093e:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c094e:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c095e:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c096e:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c097e:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c098b <_ctype_>:
   c098b:	20202000 20202020 28282020 20282828     .         ((((( 
   c099b:	20202020 20202020 20202020 20202020                     
   c09ab:	10108820 10101010 10101010 10101010      ...............
   c09bb:	04040410 04040404 10040404 10101010     ................
   c09cb:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c09db:	01010101 01010101 01010101 10101010     ................
   c09eb:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c09fb:	02020202 02020202 02020202 10101010     ................
   c0a0b:	00000020 00000000 00000000 00000000      ...............
	...

000c0a8c <link_const_variable_data_end>:
   c0a8c:	000b4821 	.word	0x000b4821
   c0a90:	000b4ffd 	.word	0x000b4ffd
   c0a94:	000b584d 	.word	0x000b584d
   c0a98:	000b5e91 	.word	0x000b5e91
   c0a9c:	000b62a1 	.word	0x000b62a1
   c0aa0:	000b6dc5 	.word	0x000b6dc5
   c0aa4:	000b87e5 	.word	0x000b87e5
   c0aa8:	000b8c4d 	.word	0x000b8c4d
   c0aac:	000ba355 	.word	0x000ba355
   c0ab0:	000baf2d 	.word	0x000baf2d
   c0ab4:	000baff9 	.word	0x000baff9
   c0ab8:	000bb78d 	.word	0x000bb78d
   c0abc:	000bca0d 	.word	0x000bca0d
   c0ac0:	000bce85 	.word	0x000bce85
   c0ac4:	000bd2f1 	.word	0x000bd2f1
   c0ac8:	000bd8d9 	.word	0x000bd8d9
   c0acc:	000bdc01 	.word	0x000bdc01
