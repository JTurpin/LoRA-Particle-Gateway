
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d480  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c14a0  000c14a0  000114a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c14c4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003dcf8  000c14c8  0002dcf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000904  2003def0  2003def0  0003def0  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c16bc  000c16bc  000316bc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c16e8  000c16e8  000316e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0028e151  00000000  00000000  000316ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c1b6  00000000  00000000  002bf83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00069161  00000000  00000000  002eb9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004d10  00000000  00000000  00354b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011c70  00000000  00000000  00359864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ec47  00000000  00000000  0036b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0009299b  00000000  00000000  003ca11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cfdc  00000000  00000000  0045cab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000e64c  00000000  00000000  005c9a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00b f997 	bl	bf364 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00b f9b9 	bl	bf3b4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dcf8 	.word	0x2003dcf8
   b404c:	000c14c8 	.word	0x000c14c8
   b4050:	2003deec 	.word	0x2003deec
   b4054:	2003def0 	.word	0x2003def0
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00a fad9 	bl	be618 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1450 	.word	0x000c1450
   b4080:	000c1494 	.word	0x000c1494

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b9b8 	b.w	b53f8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fe45 	bl	b4d18 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00a ba79 	b.w	be588 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f007 ba3f 	b.w	bb518 <malloc>

000b409a <_Znaj>:
   b409a:	f007 ba3d 	b.w	bb518 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f007 ba43 	b.w	bb528 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f007 f8c0 	bl	bb230 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000badd1 	.word	0x000badd1
   b40b8:	000bf988 	.word	0x000bf988

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b500      	push	{lr}
   b40e0:	b08c      	sub	sp, #48	; 0x30
   b40e2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40e4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40e8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40ec:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ee:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40f2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40f4:	6801      	ldr	r1, [r0, #0]
   b40f6:	aa04      	add	r2, sp, #16
   b40f8:	201e      	movs	r0, #30
    attr.flags = 0;
   b40fa:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40fe:	f007 f8a7 	bl	bb250 <log_message_v>
}
   b4102:	b00c      	add	sp, #48	; 0x30
   b4104:	f85d eb04 	ldr.w	lr, [sp], #4
   b4108:	b003      	add	sp, #12
   b410a:	4770      	bx	lr

000b410c <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b410c:	b510      	push	{r4, lr}
    if (!_instance) {
   b410e:	4c06      	ldr	r4, [pc, #24]	; (b4128 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4110:	6823      	ldr	r3, [r4, #0]
   b4112:	b933      	cbnz	r3, b4122 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4114:	2004      	movs	r0, #4
   b4116:	f7ff ffbe 	bl	b4096 <_Znwj>
   b411a:	b108      	cbz	r0, b4120 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b411c:	4b03      	ldr	r3, [pc, #12]	; (b412c <_ZN14LoRA_Functions8instanceEv+0x20>)
   b411e:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4120:	6020      	str	r0, [r4, #0]
}
   b4122:	6820      	ldr	r0, [r4, #0]
   b4124:	bd10      	pop	{r4, pc}
   b4126:	bf00      	nop
   b4128:	2003def4 	.word	0x2003def4
   b412c:	000bfdcc 	.word	0x000bfdcc

000b4130 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4130:	b530      	push	{r4, r5, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4132:	4831      	ldr	r0, [pc, #196]	; (b41f8 <_ZN14LoRA_Functions5setupEb+0xc8>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4134:	b087      	sub	sp, #28
   b4136:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4138:	f005 fbc7 	bl	b98ca <_ZN8RHRouter4initEv>
   b413c:	4604      	mov	r4, r0
   b413e:	b930      	cbnz	r0, b414e <_ZN14LoRA_Functions5setupEb+0x1e>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b4140:	492e      	ldr	r1, [pc, #184]	; (b41fc <_ZN14LoRA_Functions5setupEb+0xcc>)
   b4142:	482f      	ldr	r0, [pc, #188]	; (b4200 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4144:	f7ff ffca 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_nodeNumber(11);
		manager.setThisAddress(11);
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
	}
	return true;
}
   b4148:	4620      	mov	r0, r4
   b414a:	b007      	add	sp, #28
   b414c:	bd30      	pop	{r4, r5, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b414e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; b4204 <_ZN14LoRA_Functions5setupEb+0xd4>
   b4152:	482d      	ldr	r0, [pc, #180]	; (b4208 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4154:	f005 feb4 	bl	b9ec0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4158:	482b      	ldr	r0, [pc, #172]	; (b4208 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b415a:	2200      	movs	r2, #0
   b415c:	2117      	movs	r1, #23
   b415e:	f006 f829 	bl	ba1b4 <_ZN7RH_RF9510setTxPowerEab>
	if (gatewayID == true) {
   b4162:	b18d      	cbz	r5, b4188 <_ZN14LoRA_Functions5setupEb+0x58>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b4164:	f001 fb68 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4168:	2100      	movs	r1, #0
   b416a:	f001 fcfa 	bl	b5b62 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b416e:	a802      	add	r0, sp, #8
   b4170:	f007 f932 	bl	bb3d8 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b4174:	9a02      	ldr	r2, [sp, #8]
   b4176:	4925      	ldr	r1, [pc, #148]	; (b420c <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4178:	4821      	ldr	r0, [pc, #132]	; (b4200 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b417a:	f7ff ffaf 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b417e:	a802      	add	r0, sp, #8
   b4180:	f009 fd34 	bl	bdbec <_ZN6StringD1Ev>
   b4184:	462c      	mov	r4, r5
   b4186:	e7df      	b.n	b4148 <_ZN14LoRA_Functions5setupEb+0x18>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b4188:	f001 fb56 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b418c:	f001 fc99 	bl	b5ac2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4190:	b1f0      	cbz	r0, b41d0 <_ZN14LoRA_Functions5setupEb+0xa0>
   b4192:	f001 fb51 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4196:	f001 fc94 	bl	b5ac2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b419a:	280a      	cmp	r0, #10
   b419c:	d818      	bhi.n	b41d0 <_ZN14LoRA_Functions5setupEb+0xa0>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b419e:	f001 fb4b 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b41a2:	f001 fc8e 	bl	b5ac2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b41a6:	4601      	mov	r1, r0
   b41a8:	4819      	ldr	r0, [pc, #100]	; (b4210 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41aa:	f004 feba 	bl	b8f22 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b41ae:	4818      	ldr	r0, [pc, #96]	; (b4210 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41b0:	f004 fe9d 	bl	b8eee <_ZN10RHDatagram11thisAddressEv>
   b41b4:	9001      	str	r0, [sp, #4]
   b41b6:	a802      	add	r0, sp, #8
   b41b8:	f007 f90e 	bl	bb3d8 <spark_deviceID>
   b41bc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b41c0:	4914      	ldr	r1, [pc, #80]	; (b4214 <_ZN14LoRA_Functions5setupEb+0xe4>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b41c2:	480f      	ldr	r0, [pc, #60]	; (b4200 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b41c4:	f7ff ff8a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b41c8:	a802      	add	r0, sp, #8
   b41ca:	f009 fd0f 	bl	bdbec <_ZN6StringD1Ev>
   b41ce:	e7bb      	b.n	b4148 <_ZN14LoRA_Functions5setupEb+0x18>
		sysStatus.set_nodeNumber(11);
   b41d0:	f001 fb32 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b41d4:	210b      	movs	r1, #11
   b41d6:	f001 fcc4 	bl	b5b62 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b41da:	210b      	movs	r1, #11
   b41dc:	480c      	ldr	r0, [pc, #48]	; (b4210 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41de:	f004 fea0 	bl	b8f22 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b41e2:	480b      	ldr	r0, [pc, #44]	; (b4210 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41e4:	f004 fe83 	bl	b8eee <_ZN10RHDatagram11thisAddressEv>
   b41e8:	9001      	str	r0, [sp, #4]
   b41ea:	a802      	add	r0, sp, #8
   b41ec:	f007 f8f4 	bl	bb3d8 <spark_deviceID>
   b41f0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b41f4:	4908      	ldr	r1, [pc, #32]	; (b4218 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b41f6:	e7e4      	b.n	b41c2 <_ZN14LoRA_Functions5setupEb+0x92>
   b41f8:	2003e0ac 	.word	0x2003e0ac
   b41fc:	000bf99d 	.word	0x000bf99d
   b4200:	2003e654 	.word	0x2003e654
   b4204:	4464c000 	.word	0x4464c000
   b4208:	2003df7c 	.word	0x2003df7c
   b420c:	000bf9a9 	.word	0x000bf9a9
   b4210:	2003e0b0 	.word	0x2003e0b0
   b4214:	000bf9e3 	.word	0x000bf9e3
   b4218:	000bfa1a 	.word	0x000bfa1a

000b421c <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b421c:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b421e:	4c06      	ldr	r4, [pc, #24]	; (b4238 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b4220:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b4222:	f10d 0203 	add.w	r2, sp, #3
   b4226:	a901      	add	r1, sp, #4
   b4228:	4620      	mov	r0, r4
   b422a:	f005 fdc3 	bl	b9db4 <_ZN7RH_RF954recvEPhS0_>
   b422e:	2800      	cmp	r0, #0
   b4230:	d1f7      	bne.n	b4222 <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b4232:	b040      	add	sp, #256	; 0x100
   b4234:	bd10      	pop	{r4, pc}
   b4236:	bf00      	nop
   b4238:	2003df7c 	.word	0x2003df7c

000b423c <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b423c:	4801      	ldr	r0, [pc, #4]	; (b4244 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b423e:	f005 bda6 	b.w	b9d8e <_ZN7RH_RF955sleepEv>
   b4242:	bf00      	nop
   b4244:	2003df7c 	.word	0x2003df7c

000b4248 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {
   b4248:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[3] << 8 | buf[4]);
   b424a:	4c27      	ldr	r4, [pc, #156]	; (b42e8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xa0>)
   b424c:	f001 fb44 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4250:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b4254:	ba49      	rev16	r1, r1
   b4256:	b289      	uxth	r1, r1
   b4258:	f001 fd20 	bl	b5c9c <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[5] << 8 | buf[6]);
   b425c:	f001 fb3c 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4260:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b4264:	ba49      	rev16	r1, r1
   b4266:	b289      	uxth	r1, r1
   b4268:	f001 fd1e 	bl	b5ca8 <_ZN17currentStatusData14set_dailyCountEt>
	current.set_internalTempC(buf[7]);
   b426c:	f001 fb34 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4270:	79e1      	ldrb	r1, [r4, #7]
   b4272:	f001 fc8e 	bl	b5b92 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[8]);
   b4276:	f001 fb2f 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b427a:	4605      	mov	r5, r0
   b427c:	7a20      	ldrb	r0, [r4, #8]
   b427e:	f00a fcad 	bl	bebdc <__aeabi_ui2d>
   b4282:	ec41 0b10 	vmov	d0, r0, r1
   b4286:	4628      	mov	r0, r5
   b4288:	f001 fb62 	bl	b5950 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[9]);
   b428c:	f001 fb24 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4290:	7a61      	ldrb	r1, [r4, #9]
   b4292:	f001 fc84 	bl	b5b9e <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[10]);
   b4296:	f001 fb1f 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b429a:	7aa1      	ldrb	r1, [r4, #10]
   b429c:	f001 fc85 	bl	b5baa <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageNumber(buf[11]);
   b42a0:	f001 fb1a 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b42a4:	7ae1      	ldrb	r1, [r4, #11]
   b42a6:	f001 fc86 	bl	b5bb6 <_ZN17currentStatusData17set_messageNumberEh>
	current.set_RSSI(driver.lastRssi());
   b42aa:	f001 fb15 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b42ae:	4604      	mov	r4, r0
   b42b0:	480e      	ldr	r0, [pc, #56]	; (b42ec <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xa4>)
   b42b2:	f004 feb4 	bl	b901e <_ZN15RHGenericDriver8lastRssiEv>
   b42b6:	b281      	uxth	r1, r0
   b42b8:	4620      	mov	r0, r4
   b42ba:	f001 fce9 	bl	b5c90 <_ZN17currentStatusData8set_RSSIEt>

	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b42be:	f001 fb0b 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b42c2:	f001 fc1c 	bl	b5afe <_ZNK17currentStatusData17get_messageNumberEv>
   b42c6:	9001      	str	r0, [sp, #4]
   b42c8:	f001 fb06 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b42cc:	f001 fc03 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b42d0:	9a01      	ldr	r2, [sp, #4]
   b42d2:	4907      	ldr	r1, [pc, #28]	; (b42f0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xa8>)
   b42d4:	4603      	mov	r3, r0
   b42d6:	4807      	ldr	r0, [pc, #28]	; (b42f4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xac>)
   b42d8:	f7ff ff00 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b42dc:	4b06      	ldr	r3, [pc, #24]	; (b42f8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb0>)
   b42de:	2204      	movs	r2, #4

	return true;
}
   b42e0:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b42e2:	701a      	strb	r2, [r3, #0]
}
   b42e4:	b003      	add	sp, #12
   b42e6:	bd30      	pop	{r4, r5, pc}
   b42e8:	2003df00 	.word	0x2003df00
   b42ec:	2003df7c 	.word	0x2003df7c
   b42f0:	000bfa61 	.word	0x000bfa61
   b42f4:	2003e654 	.word	0x2003e654
   b42f8:	2003def0 	.word	0x2003def0

000b42fc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:

bool LoRA_Functions::acknowledgeDataReportGateway() {
   b42fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}


	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	attempts++;
   b4300:	4d4b      	ldr	r5, [pc, #300]	; (b4430 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x134>)
     
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4302:	4c4c      	ldr	r4, [pc, #304]	; (b4434 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x138>)
	attempts++;
   b4304:	682b      	ldr	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() {
   b4306:	b087      	sub	sp, #28
	attempts++;
   b4308:	3301      	adds	r3, #1
   b430a:	602b      	str	r3, [r5, #0]
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b430c:	f00a f80d 	bl	be32a <_ZN9TimeClass3nowEv>
   b4310:	1600      	asrs	r0, r0, #24
   b4312:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4314:	f00a f809 	bl	be32a <_ZN9TimeClass3nowEv>
   b4318:	1400      	asrs	r0, r0, #16
   b431a:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b431c:	f00a f805 	bl	be32a <_ZN9TimeClass3nowEv>
   b4320:	1200      	asrs	r0, r0, #8
   b4322:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b4324:	f00a f801 	bl	be32a <_ZN9TimeClass3nowEv>
   b4328:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b432a:	f001 fa85 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b432e:	f001 fc77 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4332:	0a00      	lsrs	r0, r0, #8
   b4334:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4336:	f001 fa7f 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b433a:	f001 fc71 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b433e:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_messageNumber();			 // Message number
   b4340:	f001 faca 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4344:	f001 fbdb 	bl	b5afe <_ZNK17currentStatusData17get_messageNumberEv>
   b4348:	7220      	strb	r0, [r4, #8]
	
	Log.info("Sent response to node %d message %d, time = %s and frequency %d minutes", current.get_nodeNumber(), buf[0], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b434a:	f001 fac5 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b434e:	f001 fbc2 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4352:	7827      	ldrb	r7, [r4, #0]
   b4354:	4606      	mov	r6, r0
   b4356:	f009 ffe8 	bl	be32a <_ZN9TimeClass3nowEv>
   b435a:	4602      	mov	r2, r0
   b435c:	17c3      	asrs	r3, r0, #31
   b435e:	a802      	add	r0, sp, #8
   b4360:	f009 fede 	bl	be120 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4364:	f8dd 8008 	ldr.w	r8, [sp, #8]
   b4368:	f001 fa66 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b436c:	f001 fc58 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4370:	4632      	mov	r2, r6
   b4372:	4931      	ldr	r1, [pc, #196]	; (b4438 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x13c>)
   b4374:	463b      	mov	r3, r7
   b4376:	e9cd 8000 	strd	r8, r0, [sp]
   b437a:	4830      	ldr	r0, [pc, #192]	; (b443c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b437c:	f7ff feae 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4380:	a802      	add	r0, sp, #8
   b4382:	f009 fc33 	bl	bdbec <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4386:	4b2e      	ldr	r3, [pc, #184]	; (b4440 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>)
   b4388:	881e      	ldrh	r6, [r3, #0]
   b438a:	2101      	movs	r1, #1
   b438c:	4630      	mov	r0, r6
   b438e:	f00a f9dc 	bl	be74a <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4392:	f001 faa1 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4396:	f001 fb9e 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b439a:	2204      	movs	r2, #4
   b439c:	4603      	mov	r3, r0
   b439e:	9200      	str	r2, [sp, #0]
   b43a0:	4621      	mov	r1, r4
   b43a2:	4828      	ldr	r0, [pc, #160]	; (b4444 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x148>)
   b43a4:	2209      	movs	r2, #9
   b43a6:	f005 f855 	bl	b9454 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b43aa:	4b27      	ldr	r3, [pc, #156]	; (b4448 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x14c>)
   b43ac:	4604      	mov	r4, r0
		success++;
   b43ae:	6818      	ldr	r0, [r3, #0]
	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b43b0:	bb04      	cbnz	r4, b43f4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xf8>
		success++;
   b43b2:	3001      	adds	r0, #1
   b43b4:	6018      	str	r0, [r3, #0]
		Log.info("Response received successfully - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b43b6:	f00a fc21 	bl	bebfc <__aeabi_i2d>
   b43ba:	4680      	mov	r8, r0
   b43bc:	6828      	ldr	r0, [r5, #0]
   b43be:	4689      	mov	r9, r1
   b43c0:	f00a fc1c 	bl	bebfc <__aeabi_i2d>
   b43c4:	4602      	mov	r2, r0
   b43c6:	460b      	mov	r3, r1
   b43c8:	4640      	mov	r0, r8
   b43ca:	4649      	mov	r1, r9
   b43cc:	f00a fdaa 	bl	bef24 <__aeabi_ddiv>
   b43d0:	4b1e      	ldr	r3, [pc, #120]	; (b444c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x150>)
   b43d2:	2200      	movs	r2, #0
   b43d4:	f00a fc7c 	bl	becd0 <__aeabi_dmul>
   b43d8:	4602      	mov	r2, r0
   b43da:	460b      	mov	r3, r1
   b43dc:	4817      	ldr	r0, [pc, #92]	; (b443c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b43de:	491c      	ldr	r1, [pc, #112]	; (b4450 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x154>)
   b43e0:	f7ff fe7c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b43e4:	4630      	mov	r0, r6
   b43e6:	4621      	mov	r1, r4
   b43e8:	f00a f9af 	bl	be74a <digitalWrite>
		return true;
   b43ec:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b43ee:	b007      	add	sp, #28
   b43f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b43f4:	f00a fc02 	bl	bebfc <__aeabi_i2d>
   b43f8:	4680      	mov	r8, r0
   b43fa:	6828      	ldr	r0, [r5, #0]
   b43fc:	4689      	mov	r9, r1
   b43fe:	f00a fbfd 	bl	bebfc <__aeabi_i2d>
   b4402:	4602      	mov	r2, r0
   b4404:	460b      	mov	r3, r1
   b4406:	4640      	mov	r0, r8
   b4408:	4649      	mov	r1, r9
   b440a:	f00a fd8b 	bl	bef24 <__aeabi_ddiv>
   b440e:	4b0f      	ldr	r3, [pc, #60]	; (b444c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x150>)
   b4410:	2200      	movs	r2, #0
   b4412:	f00a fc5d 	bl	becd0 <__aeabi_dmul>
   b4416:	4602      	mov	r2, r0
   b4418:	460b      	mov	r3, r1
   b441a:	4808      	ldr	r0, [pc, #32]	; (b443c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b441c:	490d      	ldr	r1, [pc, #52]	; (b4454 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x158>)
   b441e:	f7ff fe5d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b4422:	4630      	mov	r0, r6
   b4424:	2100      	movs	r1, #0
   b4426:	f00a f990 	bl	be74a <digitalWrite>
	return false;
   b442a:	2000      	movs	r0, #0
   b442c:	e7df      	b.n	b43ee <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xf2>
   b442e:	bf00      	nop
   b4430:	2003defc 	.word	0x2003defc
   b4434:	2003df00 	.word	0x2003df00
   b4438:	000bfa88 	.word	0x000bfa88
   b443c:	2003e654 	.word	0x2003e654
   b4440:	000c01f4 	.word	0x000c01f4
   b4444:	2003e0ac 	.word	0x2003e0ac
   b4448:	2003def8 	.word	0x2003def8
   b444c:	40590000 	.word	0x40590000
   b4450:	000bfad0 	.word	0x000bfad0
   b4454:	000bfb04 	.word	0x000bfb04

000b4458 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
	Log.info("DeviceID is %s",LoRA_Functions::instance().findDeviceID(1).c_str());

	return true;
}

bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b4458:	b530      	push	{r4, r5, lr}
   b445a:	b089      	sub	sp, #36	; 0x24

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b445c:	f001 f9ec 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4460:	f001 fbd9 	bl	b5c16 <_ZNK13sysStatusData15get_magicNumberEv>
   b4464:	4c35      	ldr	r4, [pc, #212]	; (b453c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xe4>)
   b4466:	0a00      	lsrs	r0, r0, #8
   b4468:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b446a:	f001 f9e5 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b446e:	f001 fbd2 	bl	b5c16 <_ZNK13sysStatusData15get_magicNumberEv>
   b4472:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b4474:	f009 ff59 	bl	be32a <_ZN9TimeClass3nowEv>
   b4478:	1600      	asrs	r0, r0, #24
   b447a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b447c:	f009 ff55 	bl	be32a <_ZN9TimeClass3nowEv>
   b4480:	1400      	asrs	r0, r0, #16
   b4482:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b4484:	f009 ff51 	bl	be32a <_ZN9TimeClass3nowEv>
   b4488:	1200      	asrs	r0, r0, #8
   b448a:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b448c:	f009 ff4d 	bl	be32a <_ZN9TimeClass3nowEv>
   b4490:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b4492:	f001 f9d1 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4496:	f001 fbc3 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b449a:	0a00      	lsrs	r0, r0, #8
   b449c:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b449e:	f001 f9cb 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b44a2:	f001 fbbd 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44a6:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_nodeNumber();
   b44a8:	f001 fa16 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b44ac:	f001 fb13 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b44b0:	7220      	strb	r0, [r4, #8]
	
	Log.info("Sent response to node %d, time = %s and frequency %d minutes", current.get_tempNodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b44b2:	f001 fa11 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b44b6:	f001 fb13 	bl	b5ae0 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b44ba:	4605      	mov	r5, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b44bc:	f009 ff35 	bl	be32a <_ZN9TimeClass3nowEv>
   b44c0:	4602      	mov	r2, r0
   b44c2:	17c3      	asrs	r3, r0, #31
   b44c4:	a804      	add	r0, sp, #16
   b44c6:	f009 fe2b 	bl	be120 <_ZN9TimeClass7timeStrEx>
   b44ca:	9b04      	ldr	r3, [sp, #16]
   b44cc:	9303      	str	r3, [sp, #12]
   b44ce:	f001 f9b3 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b44d2:	f001 fba5 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44d6:	462a      	mov	r2, r5
   b44d8:	9b03      	ldr	r3, [sp, #12]
   b44da:	4919      	ldr	r1, [pc, #100]	; (b4540 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xe8>)
   b44dc:	9000      	str	r0, [sp, #0]
   b44de:	4819      	ldr	r0, [pc, #100]	; (b4544 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xec>)
   b44e0:	f7ff fdfc 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b44e4:	a804      	add	r0, sp, #16
   b44e6:	f009 fb81 	bl	bdbec <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b44ea:	4b17      	ldr	r3, [pc, #92]	; (b4548 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf0>)
   b44ec:	881d      	ldrh	r5, [r3, #0]
   b44ee:	2101      	movs	r1, #1
   b44f0:	4628      	mov	r0, r5
   b44f2:	f00a f92a 	bl	be74a <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_tempNodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b44f6:	f001 f9ef 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b44fa:	f001 faf1 	bl	b5ae0 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b44fe:	2202      	movs	r2, #2
   b4500:	4603      	mov	r3, r0
   b4502:	9200      	str	r2, [sp, #0]
   b4504:	4621      	mov	r1, r4
   b4506:	4811      	ldr	r0, [pc, #68]	; (b454c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf4>)
   b4508:	2209      	movs	r2, #9
   b450a:	f004 ffa3 	bl	b9454 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b450e:	4604      	mov	r4, r0
   b4510:	b950      	cbnz	r0, b4528 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xd0>
		Log.info("Response received successfully");
   b4512:	490f      	ldr	r1, [pc, #60]	; (b4550 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf8>)
   b4514:	480b      	ldr	r0, [pc, #44]	; (b4544 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xec>)
   b4516:	f7ff fde1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b451a:	4628      	mov	r0, r5
   b451c:	4621      	mov	r1, r4
   b451e:	f00a f914 	bl	be74a <digitalWrite>
		return true;
   b4522:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b4524:	b009      	add	sp, #36	; 0x24
   b4526:	bd30      	pop	{r4, r5, pc}
	Log.info("Response not acknowledged");
   b4528:	490a      	ldr	r1, [pc, #40]	; (b4554 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xfc>)
   b452a:	4806      	ldr	r0, [pc, #24]	; (b4544 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xec>)
   b452c:	f7ff fdd6 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b4530:	4628      	mov	r0, r5
   b4532:	2100      	movs	r1, #0
   b4534:	f00a f909 	bl	be74a <digitalWrite>
	return false;
   b4538:	2000      	movs	r0, #0
   b453a:	e7f3      	b.n	b4524 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xcc>
   b453c:	2003df00 	.word	0x2003df00
   b4540:	000bfb33 	.word	0x000bfb33
   b4544:	2003e654 	.word	0x2003e654
   b4548:	000c01f4 	.word	0x000c01f4
   b454c:	2003e0ac 	.word	0x2003e0ac
   b4550:	000bfb70 	.word	0x000bfb70
   b4554:	000bfb8f 	.word	0x000bfb8f

000b4558 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:


bool LoRA_Functions::decipherAlertReportGateway() {
   b4558:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[2]);
   b455a:	f001 f9bd 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b455e:	4b13      	ldr	r3, [pc, #76]	; (b45ac <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b4560:	7899      	ldrb	r1, [r3, #2]
   b4562:	f001 fb2e 	bl	b5bc2 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b4566:	f001 f9b7 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b456a:	4604      	mov	r4, r0
   b456c:	f009 fedd 	bl	be32a <_ZN9TimeClass3nowEv>
   b4570:	17c3      	asrs	r3, r0, #31
   b4572:	4602      	mov	r2, r0
   b4574:	4620      	mov	r0, r4
   b4576:	f001 fc3d 	bl	b5df4 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI(driver.lastRssi() );
   b457a:	f001 f9ad 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b457e:	4604      	mov	r4, r0
   b4580:	480b      	ldr	r0, [pc, #44]	; (b45b0 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b4582:	f004 fd4c 	bl	b901e <_ZN15RHGenericDriver8lastRssiEv>
   b4586:	b281      	uxth	r1, r0
   b4588:	4620      	mov	r0, r4
   b458a:	f001 fb81 	bl	b5c90 <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b458e:	f001 f9a3 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4592:	f001 faa0 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4596:	4907      	ldr	r1, [pc, #28]	; (b45b4 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x5c>)
   b4598:	4602      	mov	r2, r0
   b459a:	4807      	ldr	r0, [pc, #28]	; (b45b8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x60>)
   b459c:	f7ff fd9e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b45a0:	4b06      	ldr	r3, [pc, #24]	; (b45bc <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x64>)
   b45a2:	2206      	movs	r2, #6
   b45a4:	701a      	strb	r2, [r3, #0]

	return true;
}
   b45a6:	2001      	movs	r0, #1
   b45a8:	bd10      	pop	{r4, pc}
   b45aa:	bf00      	nop
   b45ac:	2003df00 	.word	0x2003df00
   b45b0:	2003df7c 	.word	0x2003df7c
   b45b4:	000bfba9 	.word	0x000bfba9
   b45b8:	2003e654 	.word	0x2003e654
   b45bc:	2003def0 	.word	0x2003def0

000b45c0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:

bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b45c0:	b570      	push	{r4, r5, r6, lr}
   b45c2:	b088      	sub	sp, #32
	// uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	buf[0] = highByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b45c4:	f001 f938 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b45c8:	f001 fb25 	bl	b5c16 <_ZNK13sysStatusData15get_magicNumberEv>
   b45cc:	4c32      	ldr	r4, [pc, #200]	; (b4698 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd8>)
   b45ce:	0a00      	lsrs	r0, r0, #8
   b45d0:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b45d2:	f001 f931 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b45d6:	f001 fb1e 	bl	b5c16 <_ZNK13sysStatusData15get_magicNumberEv>
   b45da:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  				// Fourth byte - current time
   b45dc:	f009 fea5 	bl	be32a <_ZN9TimeClass3nowEv>
   b45e0:	1600      	asrs	r0, r0, #24
   b45e2:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));					// Third byte
   b45e4:	f009 fea1 	bl	be32a <_ZN9TimeClass3nowEv>
   b45e8:	1400      	asrs	r0, r0, #16
   b45ea:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));					// Second byte
   b45ec:	f009 fe9d 	bl	be32a <_ZN9TimeClass3nowEv>
   b45f0:	1200      	asrs	r0, r0, #8
   b45f2:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    				// First byte	
   b45f4:	f009 fe99 	bl	be32a <_ZN9TimeClass3nowEv>
   b45f8:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());		// Frequency of reports - for Gateways
   b45fa:	f001 f91d 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b45fe:	f001 fb0f 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4602:	0a00      	lsrs	r0, r0, #8
   b4604:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b4606:	f001 f917 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b460a:	f001 fb09 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[8] = 0;													// Send a zero for the alertcode to reset it
	
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b460e:	4b23      	ldr	r3, [pc, #140]	; (b469c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xdc>)
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b4610:	71e0      	strb	r0, [r4, #7]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4612:	881e      	ldrh	r6, [r3, #0]
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b4614:	2500      	movs	r5, #0
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4616:	2101      	movs	r1, #1
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b4618:	7225      	strb	r5, [r4, #8]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b461a:	4630      	mov	r0, r6
   b461c:	f00a f895 	bl	be74a <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b4620:	f001 f95a 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4624:	f001 fa57 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4628:	2206      	movs	r2, #6
   b462a:	4603      	mov	r3, r0
   b462c:	9200      	str	r2, [sp, #0]
   b462e:	4621      	mov	r1, r4
   b4630:	481b      	ldr	r0, [pc, #108]	; (b46a0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe0>)
   b4632:	2209      	movs	r2, #9
   b4634:	f004 ff0e 	bl	b9454 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4638:	4604      	mov	r4, r0
   b463a:	bb10      	cbnz	r0, b4682 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc2>
		Log.info("Sent acknowledgment to Node %d, time = %s and frequency %d minutes", current.get_nodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b463c:	f001 f94c 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4640:	f001 fa49 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4644:	4605      	mov	r5, r0
   b4646:	f009 fe70 	bl	be32a <_ZN9TimeClass3nowEv>
   b464a:	4602      	mov	r2, r0
   b464c:	17c3      	asrs	r3, r0, #31
   b464e:	a804      	add	r0, sp, #16
   b4650:	f009 fd66 	bl	be120 <_ZN9TimeClass7timeStrEx>
   b4654:	9b04      	ldr	r3, [sp, #16]
   b4656:	9303      	str	r3, [sp, #12]
   b4658:	f001 f8ee 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b465c:	f001 fae0 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4660:	9b03      	ldr	r3, [sp, #12]
   b4662:	4910      	ldr	r1, [pc, #64]	; (b46a4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe4>)
   b4664:	9000      	str	r0, [sp, #0]
   b4666:	462a      	mov	r2, r5
   b4668:	480f      	ldr	r0, [pc, #60]	; (b46a8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b466a:	f7ff fd37 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b466e:	a804      	add	r0, sp, #16
   b4670:	f009 fabc 	bl	bdbec <_ZN6StringD1Ev>
		digitalWrite(BLUE_LED,LOW);
   b4674:	4630      	mov	r0, r6
   b4676:	4621      	mov	r1, r4
   b4678:	f00a f867 	bl	be74a <digitalWrite>
		return true;
   b467c:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b467e:	b008      	add	sp, #32
   b4680:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b4682:	490a      	ldr	r1, [pc, #40]	; (b46ac <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xec>)
   b4684:	4808      	ldr	r0, [pc, #32]	; (b46a8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b4686:	f7ff fd29 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b468a:	4630      	mov	r0, r6
   b468c:	4629      	mov	r1, r5
   b468e:	f00a f85c 	bl	be74a <digitalWrite>
	return false;
   b4692:	4628      	mov	r0, r5
   b4694:	e7f3      	b.n	b467e <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xbe>
   b4696:	bf00      	nop
   b4698:	2003df00 	.word	0x2003df00
   b469c:	000c01f4 	.word	0x000c01f4
   b46a0:	2003e0ac 	.word	0x2003e0ac
   b46a4:	000bfbce 	.word	0x000bfbce
   b46a8:	2003e654 	.word	0x2003e654
   b46ac:	000bfb8f 	.word	0x000bfb8f

000b46b0 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>:
bool LoRA_Functions::respondToLoRAMessageGateway() {
   b46b0:	b510      	push	{r4, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b46b2:	4c13      	ldr	r4, [pc, #76]	; (b4700 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x50>)
   b46b4:	4b13      	ldr	r3, [pc, #76]	; (b4704 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x54>)
   b46b6:	7822      	ldrb	r2, [r4, #0]
   b46b8:	4913      	ldr	r1, [pc, #76]	; (b4708 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x58>)
   b46ba:	4814      	ldr	r0, [pc, #80]	; (b470c <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x5c>)
   b46bc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b46c0:	f7ff fd0c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b46c4:	7823      	ldrb	r3, [r4, #0]
   b46c6:	2b04      	cmp	r3, #4
   b46c8:	d00c      	beq.n	b46e4 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x34>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b46ca:	7823      	ldrb	r3, [r4, #0]
   b46cc:	2b02      	cmp	r3, #2
   b46ce:	d104      	bne.n	b46da <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x2a>
   b46d0:	f7ff fd1c 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b46d4:	f7ff fec0 	bl	b4458 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b46d8:	b950      	cbnz	r0, b46f0 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x40>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b46da:	7823      	ldrb	r3, [r4, #0]
   b46dc:	2b06      	cmp	r3, #6
   b46de:	d009      	beq.n	b46f4 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x44>
	return false; 
   b46e0:	2000      	movs	r0, #0
   b46e2:	e006      	b.n	b46f2 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x42>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b46e4:	f7ff fd12 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b46e8:	f7ff fe08 	bl	b42fc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b46ec:	2800      	cmp	r0, #0
   b46ee:	d0ec      	beq.n	b46ca <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x1a>
   b46f0:	2001      	movs	r0, #1
}
   b46f2:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b46f4:	f7ff fd0a 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
}
   b46f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b46fc:	f7ff bf60 	b.w	b45c0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b4700:	2003def0 	.word	0x2003def0
   b4704:	2003dcf8 	.word	0x2003dcf8
   b4708:	000bfc11 	.word	0x000bfc11
   b470c:	2003e654 	.word	0x2003e654

000b4710 <_ZN14LoRA_Functions14findNodeNumberEPKc>:


uint8_t LoRA_Functions::findNodeNumber(const char* deviceID) {
   b4710:	b530      	push	{r4, r5, lr}
   b4712:	b085      	sub	sp, #20
   b4714:	460c      	mov	r4, r1

	if (strncmp(deviceID,nodeID.get_deviceID_1(),24) == 0) {
   b4716:	f001 f95d 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b471a:	4601      	mov	r1, r0
   b471c:	4668      	mov	r0, sp
   b471e:	f001 f97d 	bl	b5a1c <_ZNK10nodeIDData14get_deviceID_1Ev>
   b4722:	9900      	ldr	r1, [sp, #0]
   b4724:	2218      	movs	r2, #24
   b4726:	4620      	mov	r0, r4
   b4728:	f00a ff07 	bl	bf53a <strncmp>
   b472c:	4605      	mov	r5, r0
   b472e:	4668      	mov	r0, sp
   b4730:	f009 fa5c 	bl	bdbec <_ZN6StringD1Ev>
   b4734:	b9ad      	cbnz	r5, b4762 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x52>
		Log.info("deviceID on file - retreiving nodeID number %d", nodeID.get_nodeNumber_1());
   b4736:	f001 f94d 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b473a:	f001 f9e5 	bl	b5b08 <_ZNK10nodeIDData16get_nodeNumber_1Ev>
   b473e:	495d      	ldr	r1, [pc, #372]	; (b48b4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a4>)
   b4740:	4602      	mov	r2, r0
   b4742:	485d      	ldr	r0, [pc, #372]	; (b48b8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b4744:	f7ff fcca 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	else {
		if (nodeID.get_lastConnection_1() == 0) {
			Log.info("deviceID not on file - saving as nodeID number %d", nodeID.get_nodeNumber_1());
			nodeID.set_nodeNumber_1(1);
			nodeID.set_deviceID_1(deviceID);
			nodeID.set_lastConnection_1(Time.now());
   b4748:	f001 f944 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b474c:	4604      	mov	r4, r0
   b474e:	f009 fdec 	bl	be32a <_ZN9TimeClass3nowEv>
   b4752:	4602      	mov	r2, r0
   b4754:	17c3      	asrs	r3, r0, #31
   b4756:	4620      	mov	r0, r4
   b4758:	f001 fb51 	bl	b5dfe <_ZN10nodeIDData20set_lastConnection_1Ex>
			return 1;
   b475c:	2001      	movs	r0, #1
			nodeID.set_lastConnection_3(Time.now());
			return 3;
		}	
	}
	return 0;
}
   b475e:	b005      	add	sp, #20
   b4760:	bd30      	pop	{r4, r5, pc}
	else if (strncmp(deviceID,nodeID.get_deviceID_2(),24) == 0) {
   b4762:	f001 f937 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4766:	4601      	mov	r1, r0
   b4768:	4668      	mov	r0, sp
   b476a:	f001 f96d 	bl	b5a48 <_ZNK10nodeIDData14get_deviceID_2Ev>
   b476e:	9900      	ldr	r1, [sp, #0]
   b4770:	2218      	movs	r2, #24
   b4772:	4620      	mov	r0, r4
   b4774:	f00a fee1 	bl	bf53a <strncmp>
   b4778:	4605      	mov	r5, r0
   b477a:	4668      	mov	r0, sp
   b477c:	f009 fa36 	bl	bdbec <_ZN6StringD1Ev>
   b4780:	b9a5      	cbnz	r5, b47ac <_ZN14LoRA_Functions14findNodeNumberEPKc+0x9c>
		Log.info("deviceID on file - retreiving nodeID number %d", nodeID.get_nodeNumber_2());
   b4782:	f001 f927 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4786:	f001 f9c4 	bl	b5b12 <_ZNK10nodeIDData16get_nodeNumber_2Ev>
   b478a:	494a      	ldr	r1, [pc, #296]	; (b48b4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a4>)
   b478c:	4602      	mov	r2, r0
   b478e:	484a      	ldr	r0, [pc, #296]	; (b48b8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b4790:	f7ff fca4 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		nodeID.set_lastConnection_1(Time.now());
   b4794:	f001 f91e 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4798:	4604      	mov	r4, r0
   b479a:	f009 fdc6 	bl	be32a <_ZN9TimeClass3nowEv>
   b479e:	4602      	mov	r2, r0
   b47a0:	17c3      	asrs	r3, r0, #31
   b47a2:	4620      	mov	r0, r4
   b47a4:	f001 fb2b 	bl	b5dfe <_ZN10nodeIDData20set_lastConnection_1Ex>
			return 2;
   b47a8:	2002      	movs	r0, #2
   b47aa:	e7d8      	b.n	b475e <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4e>
	else if (strncmp(deviceID,nodeID.get_deviceID_3(),24) == 0) {		
   b47ac:	f001 f912 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b47b0:	4601      	mov	r1, r0
   b47b2:	4668      	mov	r0, sp
   b47b4:	f001 f95e 	bl	b5a74 <_ZNK10nodeIDData14get_deviceID_3Ev>
   b47b8:	9900      	ldr	r1, [sp, #0]
   b47ba:	2218      	movs	r2, #24
   b47bc:	4620      	mov	r0, r4
   b47be:	f00a febc 	bl	bf53a <strncmp>
   b47c2:	4605      	mov	r5, r0
   b47c4:	4668      	mov	r0, sp
   b47c6:	f009 fa11 	bl	bdbec <_ZN6StringD1Ev>
   b47ca:	b9a5      	cbnz	r5, b47f6 <_ZN14LoRA_Functions14findNodeNumberEPKc+0xe6>
		Log.info("deviceID on file - retreiving nodeID number %d", nodeID.get_nodeNumber_3());
   b47cc:	f001 f902 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b47d0:	f001 f9a4 	bl	b5b1c <_ZNK10nodeIDData16get_nodeNumber_3Ev>
   b47d4:	4937      	ldr	r1, [pc, #220]	; (b48b4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a4>)
   b47d6:	4602      	mov	r2, r0
   b47d8:	4837      	ldr	r0, [pc, #220]	; (b48b8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b47da:	f7ff fc7f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		nodeID.set_lastConnection_1(Time.now());
   b47de:	f001 f8f9 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b47e2:	4604      	mov	r4, r0
   b47e4:	f009 fda1 	bl	be32a <_ZN9TimeClass3nowEv>
   b47e8:	4602      	mov	r2, r0
   b47ea:	17c3      	asrs	r3, r0, #31
   b47ec:	4620      	mov	r0, r4
   b47ee:	f001 fb06 	bl	b5dfe <_ZN10nodeIDData20set_lastConnection_1Ex>
			return 3;
   b47f2:	2003      	movs	r0, #3
   b47f4:	e7b3      	b.n	b475e <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4e>
		if (nodeID.get_lastConnection_1() == 0) {
   b47f6:	f001 f8ed 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b47fa:	f001 fac3 	bl	b5d84 <_ZNK10nodeIDData20get_lastConnection_1Ev>
   b47fe:	ea50 0301 	orrs.w	r3, r0, r1
   b4802:	d113      	bne.n	b482c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x11c>
			Log.info("deviceID not on file - saving as nodeID number %d", nodeID.get_nodeNumber_1());
   b4804:	f001 f8e6 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4808:	f001 f97e 	bl	b5b08 <_ZNK10nodeIDData16get_nodeNumber_1Ev>
   b480c:	492b      	ldr	r1, [pc, #172]	; (b48bc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1ac>)
   b480e:	4602      	mov	r2, r0
   b4810:	4829      	ldr	r0, [pc, #164]	; (b48b8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b4812:	f7ff fc63 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			nodeID.set_nodeNumber_1(1);
   b4816:	f001 f8dd 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b481a:	2101      	movs	r1, #1
   b481c:	f001 f9d7 	bl	b5bce <_ZN10nodeIDData16set_nodeNumber_1Eh>
			nodeID.set_deviceID_1(deviceID);
   b4820:	f001 f8d8 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4824:	4621      	mov	r1, r4
   b4826:	f001 f909 	bl	b5a3c <_ZN10nodeIDData14set_deviceID_1EPKc>
   b482a:	e78d      	b.n	b4748 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x38>
		else if (nodeID.get_lastConnection_2() == 0) {
   b482c:	f001 f8d2 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4830:	f001 faad 	bl	b5d8e <_ZNK10nodeIDData20get_lastConnection_2Ev>
   b4834:	ea50 0301 	orrs.w	r3, r0, r1
   b4838:	d11d      	bne.n	b4876 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x166>
			Log.info("deviceID not on file - saving as nodeID number %d", nodeID.get_nodeNumber_2());
   b483a:	f001 f8cb 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b483e:	f001 f968 	bl	b5b12 <_ZNK10nodeIDData16get_nodeNumber_2Ev>
   b4842:	491e      	ldr	r1, [pc, #120]	; (b48bc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1ac>)
   b4844:	4602      	mov	r2, r0
   b4846:	481c      	ldr	r0, [pc, #112]	; (b48b8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b4848:	f7ff fc48 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			nodeID.set_nodeNumber_2(2);
   b484c:	f001 f8c2 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4850:	2102      	movs	r1, #2
   b4852:	f001 f9c2 	bl	b5bda <_ZN10nodeIDData16set_nodeNumber_2Eh>
			nodeID.set_deviceID_2(deviceID);
   b4856:	f001 f8bd 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b485a:	4621      	mov	r1, r4
   b485c:	f001 f904 	bl	b5a68 <_ZN10nodeIDData14set_deviceID_2EPKc>
			nodeID.set_lastConnection_2(Time.now());
   b4860:	f001 f8b8 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4864:	4604      	mov	r4, r0
   b4866:	f009 fd60 	bl	be32a <_ZN9TimeClass3nowEv>
   b486a:	4602      	mov	r2, r0
   b486c:	17c3      	asrs	r3, r0, #31
   b486e:	4620      	mov	r0, r4
   b4870:	f001 faca 	bl	b5e08 <_ZN10nodeIDData20set_lastConnection_2Ex>
   b4874:	e798      	b.n	b47a8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x98>
			Log.info("deviceID not on file - saving as nodeID number %d", nodeID.get_nodeNumber_3());
   b4876:	f001 f8ad 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b487a:	f001 f94f 	bl	b5b1c <_ZNK10nodeIDData16get_nodeNumber_3Ev>
   b487e:	490f      	ldr	r1, [pc, #60]	; (b48bc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1ac>)
   b4880:	4602      	mov	r2, r0
   b4882:	480d      	ldr	r0, [pc, #52]	; (b48b8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b4884:	f7ff fc2a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			nodeID.set_nodeNumber_3(3);
   b4888:	f001 f8a4 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b488c:	2103      	movs	r1, #3
   b488e:	f001 f9aa 	bl	b5be6 <_ZN10nodeIDData16set_nodeNumber_3Eh>
			nodeID.set_deviceID_3(deviceID);
   b4892:	f001 f89f 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4896:	4621      	mov	r1, r4
   b4898:	f001 f8fc 	bl	b5a94 <_ZN10nodeIDData14set_deviceID_3EPKc>
			nodeID.set_lastConnection_3(Time.now());
   b489c:	f001 f89a 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b48a0:	4604      	mov	r4, r0
   b48a2:	f009 fd42 	bl	be32a <_ZN9TimeClass3nowEv>
   b48a6:	4602      	mov	r2, r0
   b48a8:	17c3      	asrs	r3, r0, #31
   b48aa:	4620      	mov	r0, r4
   b48ac:	f001 fab1 	bl	b5e12 <_ZN10nodeIDData20set_lastConnection_3Ex>
   b48b0:	e79f      	b.n	b47f2 <_ZN14LoRA_Functions14findNodeNumberEPKc+0xe2>
   b48b2:	bf00      	nop
   b48b4:	000bfc36 	.word	0x000bfc36
   b48b8:	2003e654 	.word	0x2003e654
   b48bc:	000bfc65 	.word	0x000bfc65

000b48c0 <_ZN14LoRA_Functions12findDeviceIDEh>:

String LoRA_Functions::findDeviceID(uint8_t nodeNumber) {
   b48c0:	b538      	push	{r3, r4, r5, lr}
   b48c2:	4615      	mov	r5, r2
   b48c4:	4604      	mov	r4, r0
	if (nodeNumber == nodeID.get_nodeNumber_1()) return nodeID.get_deviceID_1();
   b48c6:	f001 f885 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b48ca:	f001 f91d 	bl	b5b08 <_ZNK10nodeIDData16get_nodeNumber_1Ev>
   b48ce:	42a8      	cmp	r0, r5
   b48d0:	d107      	bne.n	b48e2 <_ZN14LoRA_Functions12findDeviceIDEh+0x22>
   b48d2:	f001 f87f 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b48d6:	4601      	mov	r1, r0
   b48d8:	4620      	mov	r0, r4
   b48da:	f001 f89f 	bl	b5a1c <_ZNK10nodeIDData14get_deviceID_1Ev>
	else if (nodeNumber == nodeID.get_nodeNumber_2()) return nodeID.get_deviceID_2();
	else if (nodeNumber == nodeID.get_nodeNumber_3()) return nodeID.get_deviceID_3();
	else return "null";
   b48de:	4620      	mov	r0, r4
   b48e0:	bd38      	pop	{r3, r4, r5, pc}
	else if (nodeNumber == nodeID.get_nodeNumber_2()) return nodeID.get_deviceID_2();
   b48e2:	f001 f877 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b48e6:	f001 f914 	bl	b5b12 <_ZNK10nodeIDData16get_nodeNumber_2Ev>
   b48ea:	42a8      	cmp	r0, r5
   b48ec:	d106      	bne.n	b48fc <_ZN14LoRA_Functions12findDeviceIDEh+0x3c>
   b48ee:	f001 f871 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b48f2:	4601      	mov	r1, r0
   b48f4:	4620      	mov	r0, r4
   b48f6:	f001 f8a7 	bl	b5a48 <_ZNK10nodeIDData14get_deviceID_2Ev>
   b48fa:	e7f0      	b.n	b48de <_ZN14LoRA_Functions12findDeviceIDEh+0x1e>
	else if (nodeNumber == nodeID.get_nodeNumber_3()) return nodeID.get_deviceID_3();
   b48fc:	f001 f86a 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4900:	f001 f90c 	bl	b5b1c <_ZNK10nodeIDData16get_nodeNumber_3Ev>
   b4904:	42a8      	cmp	r0, r5
   b4906:	d106      	bne.n	b4916 <_ZN14LoRA_Functions12findDeviceIDEh+0x56>
   b4908:	f001 f864 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b490c:	4601      	mov	r1, r0
   b490e:	4620      	mov	r0, r4
   b4910:	f001 f8b0 	bl	b5a74 <_ZNK10nodeIDData14get_deviceID_3Ev>
   b4914:	e7e3      	b.n	b48de <_ZN14LoRA_Functions12findDeviceIDEh+0x1e>
	else return "null";
   b4916:	4902      	ldr	r1, [pc, #8]	; (b4920 <_ZN14LoRA_Functions12findDeviceIDEh+0x60>)
   b4918:	4620      	mov	r0, r4
   b491a:	f009 f9b2 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   b491e:	e7de      	b.n	b48de <_ZN14LoRA_Functions12findDeviceIDEh+0x1e>
   b4920:	000bfc97 	.word	0x000bfc97

000b4924 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4924:	b5f0      	push	{r4, r5, r6, r7, lr}
	lora_state = JOIN_ACK;			// Prepare to respond
   b4926:	4b2e      	ldr	r3, [pc, #184]	; (b49e0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xbc>)
   b4928:	2202      	movs	r2, #2
   b492a:	701a      	strb	r2, [r3, #0]
bool LoRA_Functions::decipherJoinRequestGateway() {
   b492c:	b091      	sub	sp, #68	; 0x44
		nodeDeviceID[i] = buf[i+2];
   b492e:	4b2d      	ldr	r3, [pc, #180]	; (b49e4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc0>)
   b4930:	ac09      	add	r4, sp, #36	; 0x24
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4932:	4606      	mov	r6, r0
		nodeDeviceID[i] = buf[i+2];
   b4934:	f103 0218 	add.w	r2, r3, #24
   b4938:	4627      	mov	r7, r4
   b493a:	6818      	ldr	r0, [r3, #0]
   b493c:	6859      	ldr	r1, [r3, #4]
   b493e:	4625      	mov	r5, r4
   b4940:	c503      	stmia	r5!, {r0, r1}
   b4942:	3308      	adds	r3, #8
   b4944:	4293      	cmp	r3, r2
   b4946:	462c      	mov	r4, r5
   b4948:	d1f7      	bne.n	b493a <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x16>
   b494a:	781b      	ldrb	r3, [r3, #0]
   b494c:	702b      	strb	r3, [r5, #0]
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b494e:	f000 ffc3 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4952:	4604      	mov	r4, r0
   b4954:	f000 ffc0 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4958:	f001 f8bd 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b495c:	4601      	mov	r1, r0
   b495e:	4620      	mov	r0, r4
   b4960:	f001 f911 	bl	b5b86 <_ZN17currentStatusData18set_tempNodeNumberEh>
	if (current.get_nodeNumber() > 10) {							// An unconfigured node
   b4964:	f000 ffb8 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4968:	f001 f8b5 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b496c:	280a      	cmp	r0, #10
   b496e:	d92c      	bls.n	b49ca <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xa6>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID));		// Look up the new node number
   b4970:	f000 ffb2 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4974:	4639      	mov	r1, r7
   b4976:	4604      	mov	r4, r0
   b4978:	4630      	mov	r0, r6
   b497a:	f7ff fec9 	bl	b4710 <_ZN14LoRA_Functions14findNodeNumberEPKc>
   b497e:	4601      	mov	r1, r0
   b4980:	4620      	mov	r0, r4
   b4982:	f001 f8fa 	bl	b5b7a <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Received from deviceID of %s an unconfigured will change from %d to %d",  nodeDeviceID, current.get_tempNodeNumber(), current.get_nodeNumber());
   b4986:	f000 ffa7 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b498a:	f001 f8a9 	bl	b5ae0 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b498e:	9003      	str	r0, [sp, #12]
   b4990:	f000 ffa2 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4994:	f001 f89f 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4998:	9b03      	ldr	r3, [sp, #12]
   b499a:	9000      	str	r0, [sp, #0]
   b499c:	4912      	ldr	r1, [pc, #72]	; (b49e8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc4>)
   b499e:	4813      	ldr	r0, [pc, #76]	; (b49ec <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc8>)
   b49a0:	463a      	mov	r2, r7
   b49a2:	f7ff fb9b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	Log.info("DeviceID is %s",LoRA_Functions::instance().findDeviceID(1).c_str());
   b49a6:	f7ff fbb1 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b49aa:	2201      	movs	r2, #1
   b49ac:	4601      	mov	r1, r0
   b49ae:	a805      	add	r0, sp, #20
   b49b0:	f7ff ff86 	bl	b48c0 <_ZN14LoRA_Functions12findDeviceIDEh>
   b49b4:	9a05      	ldr	r2, [sp, #20]
   b49b6:	490e      	ldr	r1, [pc, #56]	; (b49f0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xcc>)
   b49b8:	480c      	ldr	r0, [pc, #48]	; (b49ec <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc8>)
   b49ba:	f7ff fb8f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b49be:	a805      	add	r0, sp, #20
   b49c0:	f009 f914 	bl	bdbec <_ZN6StringD1Ev>
}
   b49c4:	2001      	movs	r0, #1
   b49c6:	b011      	add	sp, #68	; 0x44
   b49c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else Log.info("Join request from node %d - setting clock", current.get_nodeNumber());
   b49ca:	f000 ff85 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b49ce:	f001 f882 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b49d2:	4908      	ldr	r1, [pc, #32]	; (b49f4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd0>)
   b49d4:	4602      	mov	r2, r0
   b49d6:	4805      	ldr	r0, [pc, #20]	; (b49ec <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc8>)
   b49d8:	f7ff fb80 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b49dc:	e7e3      	b.n	b49a6 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x82>
   b49de:	bf00      	nop
   b49e0:	2003def0 	.word	0x2003def0
   b49e4:	2003df02 	.word	0x2003df02
   b49e8:	000bfc9c 	.word	0x000bfc9c
   b49ec:	2003e654 	.word	0x2003e654
   b49f0:	000bfd0d 	.word	0x000bfd0d
   b49f4:	000bfce3 	.word	0x000bfce3

000b49f8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b49f8:	b530      	push	{r4, r5, lr}
   b49fa:	b089      	sub	sp, #36	; 0x24
	uint8_t len = sizeof(buf);
   b49fc:	2379      	movs	r3, #121	; 0x79
   b49fe:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b4a02:	f10d 031f 	add.w	r3, sp, #31
   b4a06:	9303      	str	r3, [sp, #12]
   b4a08:	f10d 031e 	add.w	r3, sp, #30
   b4a0c:	4d3f      	ldr	r5, [pc, #252]	; (b4b0c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x114>)
   b4a0e:	9302      	str	r3, [sp, #8]
   b4a10:	f10d 031d 	add.w	r3, sp, #29
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	ab07      	add	r3, sp, #28
   b4a18:	9300      	str	r3, [sp, #0]
   b4a1a:	483d      	ldr	r0, [pc, #244]	; (b4b10 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x118>)
   b4a1c:	f10d 031b 	add.w	r3, sp, #27
   b4a20:	f10d 021a 	add.w	r2, sp, #26
   b4a24:	4629      	mov	r1, r5
   b4a26:	f004 fd49 	bl	b94bc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b4a2a:	b910      	cbnz	r0, b4a32 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false; 
   b4a2c:	2000      	movs	r0, #0
}
   b4a2e:	b009      	add	sp, #36	; 0x24
   b4a30:	bd30      	pop	{r4, r5, pc}
		buf[len] = 0;
   b4a32:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b4a36:	2400      	movs	r4, #0
   b4a38:	54ec      	strb	r4, [r5, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b4a3a:	882d      	ldrh	r5, [r5, #0]
   b4a3c:	f000 fefc 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4a40:	f001 f8e9 	bl	b5c16 <_ZNK13sysStatusData15get_magicNumberEv>
   b4a44:	ba6d      	rev16	r5, r5
   b4a46:	b2ad      	uxth	r5, r5
   b4a48:	42a8      	cmp	r0, r5
   b4a4a:	d004      	beq.n	b4a56 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x5e>
			Log.info("Message did not match the Magic Number - Ignoring");
   b4a4c:	4931      	ldr	r1, [pc, #196]	; (b4b14 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x11c>)
   b4a4e:	4832      	ldr	r0, [pc, #200]	; (b4b18 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x120>)
   b4a50:	f7ff fb44 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b4a54:	e7ea      	b.n	b4a2c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		current.set_nodeNumber(from);
   b4a56:	f000 ff3f 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4a5a:	f89d 101b 	ldrb.w	r1, [sp, #27]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4a5e:	4c2f      	ldr	r4, [pc, #188]	; (b4b1c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x124>)
		current.set_nodeNumber(from);
   b4a60:	f001 f88b 	bl	b5b7a <_ZN17currentStatusData14set_nodeNumberEh>
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4a64:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b4a68:	f003 030f 	and.w	r3, r3, #15
   b4a6c:	7023      	strb	r3, [r4, #0]
		Log.info("From node %d with rssi=%d - a %s message of length %d in %d hops", current.get_nodeNumber(), driver.lastRssi(), loraStateNames[lora_state], len, hops);
   b4a6e:	f000 ff33 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4a72:	f001 f830 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4a76:	9005      	str	r0, [sp, #20]
   b4a78:	4829      	ldr	r0, [pc, #164]	; (b4b20 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x128>)
   b4a7a:	f004 fad0 	bl	b901e <_ZN15RHGenericDriver8lastRssiEv>
   b4a7e:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b4a82:	9102      	str	r1, [sp, #8]
   b4a84:	f89d 101a 	ldrb.w	r1, [sp, #26]
   b4a88:	9101      	str	r1, [sp, #4]
   b4a8a:	4603      	mov	r3, r0
   b4a8c:	4925      	ldr	r1, [pc, #148]	; (b4b24 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x12c>)
   b4a8e:	7820      	ldrb	r0, [r4, #0]
   b4a90:	9a05      	ldr	r2, [sp, #20]
   b4a92:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4a96:	9100      	str	r1, [sp, #0]
   b4a98:	481f      	ldr	r0, [pc, #124]	; (b4b18 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x120>)
   b4a9a:	4923      	ldr	r1, [pc, #140]	; (b4b28 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x130>)
   b4a9c:	f7ff fb1e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4aa0:	7823      	ldrb	r3, [r4, #0]
   b4aa2:	2b03      	cmp	r3, #3
   b4aa4:	d02a      	beq.n	b4afc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x104>
		if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b4aa6:	7823      	ldrb	r3, [r4, #0]
   b4aa8:	2b01      	cmp	r3, #1
   b4aaa:	d105      	bne.n	b4ab8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xc0>
   b4aac:	f7ff fb2e 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4ab0:	f7ff ff38 	bl	b4924 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b4ab4:	2800      	cmp	r0, #0
   b4ab6:	d0b9      	beq.n	b4a2c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4ab8:	7823      	ldrb	r3, [r4, #0]
   b4aba:	2b05      	cmp	r3, #5
   b4abc:	d105      	bne.n	b4aca <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xd2>
   b4abe:	f7ff fb25 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4ac2:	f7ff fd49 	bl	b4558 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b4ac6:	2800      	cmp	r0, #0
   b4ac8:	d0b0      	beq.n	b4a2c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (frequencyUpdated) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b4aca:	4b18      	ldr	r3, [pc, #96]	; (b4b2c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4acc:	781a      	ldrb	r2, [r3, #0]
   b4ace:	b182      	cbz	r2, b4af2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xfa>
			frequencyUpdated = false;
   b4ad0:	2200      	movs	r2, #0
   b4ad2:	701a      	strb	r2, [r3, #0]
			sysStatus.set_frequencyMinutes(updatedFrequencyMins);		// This was the temporary value from the particle function
   b4ad4:	f000 feb0 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4ad8:	4b15      	ldr	r3, [pc, #84]	; (b4b30 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x138>)
   b4ada:	8819      	ldrh	r1, [r3, #0]
   b4adc:	f001 f8d2 	bl	b5c84 <_ZN13sysStatusData20set_frequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b4ae0:	f000 feaa 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4ae4:	f001 f89c 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4ae8:	4912      	ldr	r1, [pc, #72]	; (b4b34 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4aea:	4602      	mov	r2, r0
   b4aec:	480a      	ldr	r0, [pc, #40]	; (b4b18 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x120>)
   b4aee:	f7ff faf5 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondToLoRAMessageGateway()) return true;
   b4af2:	f7ff fb0b 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4af6:	f7ff fddb 	bl	b46b0 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>
   b4afa:	e798      	b.n	b4a2e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4afc:	f7ff fb06 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4b00:	f7ff fba2 	bl	b4248 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
   b4b04:	2800      	cmp	r0, #0
   b4b06:	d1ce      	bne.n	b4aa6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xae>
   b4b08:	e790      	b.n	b4a2c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
   b4b0a:	bf00      	nop
   b4b0c:	2003df00 	.word	0x2003df00
   b4b10:	2003e0ac 	.word	0x2003e0ac
   b4b14:	000bfd1c 	.word	0x000bfd1c
   b4b18:	2003e654 	.word	0x2003e654
   b4b1c:	2003def0 	.word	0x2003def0
   b4b20:	2003df7c 	.word	0x2003df7c
   b4b24:	2003dcf8 	.word	0x2003dcf8
   b4b28:	000bfd4e 	.word	0x000bfd4e
   b4b2c:	2003e405 	.word	0x2003e405
   b4b30:	2003de04 	.word	0x2003de04
   b4b34:	000bfd8f 	.word	0x000bfd8f

000b4b38 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
   b4b38:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4b3a:	4a08      	ldr	r2, [pc, #32]	; (b4b5c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b4b3c:	4c08      	ldr	r4, [pc, #32]	; (b4b60 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b4b3e:	4909      	ldr	r1, [pc, #36]	; (b4b64 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b4b40:	7812      	ldrb	r2, [r2, #0]
   b4b42:	7809      	ldrb	r1, [r1, #0]
   b4b44:	4b08      	ldr	r3, [pc, #32]	; (b4b68 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b4b46:	4620      	mov	r0, r4
   b4b48:	f005 f97a 	bl	b9e40 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4b4c:	4621      	mov	r1, r4
   b4b4e:	4807      	ldr	r0, [pc, #28]	; (b4b6c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
   b4b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4b54:	2200      	movs	r2, #0
   b4b56:	f004 bc73 	b.w	b9440 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4b5a:	bf00      	nop
   b4b5c:	000c01fa 	.word	0x000c01fa
   b4b60:	2003df7c 	.word	0x2003df7c
   b4b64:	000c01f8 	.word	0x000c01f8
   b4b68:	2003e458 	.word	0x2003e458
   b4b6c:	2003e0ac 	.word	0x2003e0ac

000b4b70 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4b70:	4b01      	ldr	r3, [pc, #4]	; (b4b78 <_Z18outOfMemoryHandleryi+0x8>)
   b4b72:	601a      	str	r2, [r3, #0]
}
   b4b74:	4770      	bx	lr
   b4b76:	bf00      	nop
   b4b78:	2003dd70 	.word	0x2003dd70

000b4b7c <_Z13userSwitchISRv>:

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b4b7c:	4b01      	ldr	r3, [pc, #4]	; (b4b84 <_Z13userSwitchISRv+0x8>)
   b4b7e:	2201      	movs	r2, #1
   b4b80:	701a      	strb	r2, [r3, #0]
}
   b4b82:	4770      	bx	lr
   b4b84:	2003e3da 	.word	0x2003e3da

000b4b88 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4b88:	b530      	push	{r4, r5, lr}
   b4b8a:	b085      	sub	sp, #20
   b4b8c:	4604      	mov	r4, r0
   b4b8e:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4b90:	b160      	cbz	r0, b4bac <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b4b92:	6840      	ldr	r0, [r0, #4]
   b4b94:	b150      	cbz	r0, b4bac <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4b96:	6885      	ldr	r5, [r0, #8]
   b4b98:	b145      	cbz	r5, b4bac <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4b9a:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4b9e:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4ba2:	68c4      	ldr	r4, [r0, #12]
   b4ba4:	ab01      	add	r3, sp, #4
   b4ba6:	466a      	mov	r2, sp
   b4ba8:	a902      	add	r1, sp, #8
   b4baa:	47a0      	blx	r4
    }
   b4bac:	b005      	add	sp, #20
   b4bae:	bd30      	pop	{r4, r5, pc}

000b4bb0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4bb0:	b530      	push	{r4, r5, lr}
   b4bb2:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4bb4:	6800      	ldr	r0, [r0, #0]
   b4bb6:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4bbe:	6883      	ldr	r3, [r0, #8]
   b4bc0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4bc4:	b90b      	cbnz	r3, b4bca <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b4bc6:	f009 fec3 	bl	be950 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4bca:	68c3      	ldr	r3, [r0, #12]
   b4bcc:	aa01      	add	r2, sp, #4
   b4bce:	a902      	add	r1, sp, #8
   b4bd0:	4798      	blx	r3
      }
   b4bd2:	b005      	add	sp, #20
   b4bd4:	bd30      	pop	{r4, r5, pc}

000b4bd6 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4bd6:	2a01      	cmp	r2, #1
   b4bd8:	d102      	bne.n	b4be0 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4bda:	6001      	str	r1, [r0, #0]
      }
   b4bdc:	2000      	movs	r0, #0
   b4bde:	4770      	bx	lr
	  switch (__op)
   b4be0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4be2:	bf04      	itt	eq
   b4be4:	680b      	ldreq	r3, [r1, #0]
   b4be6:	6003      	streq	r3, [r0, #0]
	      break;
   b4be8:	e7f8      	b.n	b4bdc <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4bea <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4bea:	6803      	ldr	r3, [r0, #0]
   b4bec:	6812      	ldr	r2, [r2, #0]
   b4bee:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4bf2:	4718      	bx	r3

000b4bf4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4bf4:	b510      	push	{r4, lr}
      if (_M_manager)
   b4bf6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4bf8:	4604      	mov	r4, r0
      if (_M_manager)
   b4bfa:	b113      	cbz	r3, b4c02 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4bfc:	2203      	movs	r2, #3
   b4bfe:	4601      	mov	r1, r0
   b4c00:	4798      	blx	r3
    }
   b4c02:	4620      	mov	r0, r4
   b4c04:	bd10      	pop	{r4, pc}

000b4c06 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4c06:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4c08:	4604      	mov	r4, r0
   b4c0a:	b138      	cbz	r0, b4c1c <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4c0c:	f7ff fff2 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   b4c10:	4620      	mov	r0, r4
   b4c12:	2110      	movs	r1, #16
        };
   b4c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4c18:	f7ff ba41 	b.w	b409e <_ZdlPvj>
        };
   b4c1c:	bd10      	pop	{r4, pc}

000b4c1e <_ZN6AB18058isRTCSetEv>:
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b4c1e:	2301      	movs	r3, #1
   b4c20:	461a      	mov	r2, r3
   b4c22:	2110      	movs	r1, #16
   b4c24:	f002 b849 	b.w	b6cba <_ZN6AB180510isBitClearEhhb>

000b4c28 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4c28:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4c2a:	f000 fe05 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4c2e:	f000 fff7 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4c32:	4604      	mov	r4, r0
   	if (Time.isValid() && !testModeFlag) {
   b4c34:	f009 fb5c 	bl	be2f0 <_ZN9TimeClass7isValidEv>
   b4c38:	b1f0      	cbz	r0, b4c78 <_Z21secondsUntilNextEventv+0x50>
   b4c3a:	4b10      	ldr	r3, [pc, #64]	; (b4c7c <_Z21secondsUntilNextEventv+0x54>)
   b4c3c:	781b      	ldrb	r3, [r3, #0]
   b4c3e:	b9db      	cbnz	r3, b4c78 <_Z21secondsUntilNextEventv+0x50>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4c40:	f009 fb73 	bl	be32a <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4c44:	253c      	movs	r5, #60	; 0x3c
   b4c46:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4c48:	fbb0 f4f5 	udiv	r4, r0, r5
   b4c4c:	fb04 0015 	mls	r0, r4, r5, r0
   b4c50:	1a2c      	subs	r4, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b4c52:	2c09      	cmp	r4, #9
   b4c54:	d90e      	bls.n	b4c74 <_Z21secondsUntilNextEventv+0x4c>
   b4c56:	42ac      	cmp	r4, r5
   b4c58:	bf28      	it	cs
   b4c5a:	462c      	movcs	r4, r5
        Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
   b4c5c:	f000 fdec 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4c60:	f000 ffde 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4c64:	4906      	ldr	r1, [pc, #24]	; (b4c80 <_Z21secondsUntilNextEventv+0x58>)
   b4c66:	4602      	mov	r2, r0
   b4c68:	4623      	mov	r3, r4
   b4c6a:	4806      	ldr	r0, [pc, #24]	; (b4c84 <_Z21secondsUntilNextEventv+0x5c>)
   b4c6c:	f7ff fa36 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    }
	return secondsToReturn;
}
   b4c70:	4620      	mov	r0, r4
   b4c72:	bd38      	pop	{r3, r4, r5, pc}
   b4c74:	240a      	movs	r4, #10
   b4c76:	e7f1      	b.n	b4c5c <_Z21secondsUntilNextEventv+0x34>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b4c78:	240a      	movs	r4, #10
   b4c7a:	e7f9      	b.n	b4c70 <_Z21secondsUntilNextEventv+0x48>
   b4c7c:	2003e3d9 	.word	0x2003e3d9
   b4c80:	000bfdd4 	.word	0x000bfdd4
   b4c84:	2003e654 	.word	0x2003e654

000b4c88 <_Z22publishStateTransitionv>:
{
   b4c88:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4c8a:	4e1c      	ldr	r6, [pc, #112]	; (b4cfc <_Z22publishStateTransitionv+0x74>)
   b4c8c:	4c1c      	ldr	r4, [pc, #112]	; (b4d00 <_Z22publishStateTransitionv+0x78>)
   b4c8e:	7832      	ldrb	r2, [r6, #0]
   b4c90:	4d1c      	ldr	r5, [pc, #112]	; (b4d04 <_Z22publishStateTransitionv+0x7c>)
   b4c92:	2a02      	cmp	r2, #2
{
   b4c94:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b4c96:	d128      	bne.n	b4cea <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4c98:	f009 fb2a 	bl	be2f0 <_ZN9TimeClass7isValidEv>
   b4c9c:	7832      	ldrb	r2, [r6, #0]
   b4c9e:	782b      	ldrb	r3, [r5, #0]
   b4ca0:	b958      	cbnz	r0, b4cba <_Z22publishStateTransitionv+0x32>
   b4ca2:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4ca6:	9200      	str	r2, [sp, #0]
   b4ca8:	4a17      	ldr	r2, [pc, #92]	; (b4d08 <_Z22publishStateTransitionv+0x80>)
   b4caa:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4cae:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4cb2:	a804      	add	r0, sp, #16
   b4cb4:	f006 fc58 	bl	bb568 <snprintf>
   b4cb8:	e00f      	b.n	b4cda <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b4cba:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4cbe:	9303      	str	r3, [sp, #12]
   b4cc0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b4cc4:	f7ff ffb0 	bl	b4c28 <_Z21secondsUntilNextEventv>
   b4cc8:	9b03      	ldr	r3, [sp, #12]
   b4cca:	4a10      	ldr	r2, [pc, #64]	; (b4d0c <_Z22publishStateTransitionv+0x84>)
   b4ccc:	e9cd 4000 	strd	r4, r0, [sp]
   b4cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4cd4:	a804      	add	r0, sp, #16
   b4cd6:	f006 fc47 	bl	bb568 <snprintf>
	oldState = state;
   b4cda:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4cdc:	480c      	ldr	r0, [pc, #48]	; (b4d10 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b4cde:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4ce0:	a904      	add	r1, sp, #16
   b4ce2:	f7ff f9fb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
}
   b4ce6:	b044      	add	sp, #272	; 0x110
   b4ce8:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4cea:	782b      	ldrb	r3, [r5, #0]
   b4cec:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4cf0:	9200      	str	r2, [sp, #0]
   b4cf2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4cf6:	4a07      	ldr	r2, [pc, #28]	; (b4d14 <_Z22publishStateTransitionv+0x8c>)
   b4cf8:	e7d9      	b.n	b4cae <_Z22publishStateTransitionv+0x26>
   b4cfa:	bf00      	nop
   b4cfc:	2003e3d8 	.word	0x2003e3d8
   b4d00:	2003dd74 	.word	0x2003dd74
   b4d04:	2003e3a1 	.word	0x2003e3a1
   b4d08:	000bfe08 	.word	0x000bfe08
   b4d0c:	000bfe28 	.word	0x000bfe28
   b4d10:	2003e654 	.word	0x2003e654
   b4d14:	000bfe45 	.word	0x000bfe45

000b4d18 <loop>:
void loop() {
   b4d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b4d1c:	4d9c      	ldr	r5, [pc, #624]	; (b4f90 <loop+0x278>)
void loop() {
   b4d1e:	ed2d 8b02 	vpush	{d8}
   b4d22:	782b      	ldrb	r3, [r5, #0]
   b4d24:	3b01      	subs	r3, #1
   b4d26:	b0d1      	sub	sp, #324	; 0x144
   b4d28:	2b06      	cmp	r3, #6
   b4d2a:	d817      	bhi.n	b4d5c <loop+0x44>
   b4d2c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4d30:	00070208 	.word	0x00070208
   b4d34:	00f50035 	.word	0x00f50035
   b4d38:	01eb01be 	.word	0x01eb01be
   b4d3c:	0150      	.short	0x0150
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4d3e:	4b95      	ldr	r3, [pc, #596]	; (b4f94 <loop+0x27c>)
   b4d40:	781b      	ldrb	r3, [r3, #0]
   b4d42:	2b02      	cmp	r3, #2
   b4d44:	d001      	beq.n	b4d4a <loop+0x32>
   b4d46:	f7ff ff9f 	bl	b4c88 <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b4d4a:	4b93      	ldr	r3, [pc, #588]	; (b4f98 <loop+0x280>)
   b4d4c:	781a      	ldrb	r2, [r3, #0]
   b4d4e:	b11a      	cbz	r2, b4d58 <loop+0x40>
				nextEventTime = false;
   b4d50:	2200      	movs	r2, #0
   b4d52:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b4d54:	2304      	movs	r3, #4
   b4d56:	e000      	b.n	b4d5a <loop+0x42>
			else state = SLEEPING_STATE;
   b4d58:	2303      	movs	r3, #3
   b4d5a:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b4d5c:	488f      	ldr	r0, [pc, #572]	; (b4f9c <loop+0x284>)
   b4d5e:	f002 fad7 	bl	b7310 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b4d62:	f003 fc37 	bl	b85d4 <_ZN17PublishQueuePosix8instanceEv>
   b4d66:	f003 fb27 	bl	b83b8 <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b4d6a:	f000 fdb5 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4d6e:	f000 fdc3 	bl	b58f8 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4d72:	f000 fd61 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4d76:	f000 fd87 	bl	b5888 <_ZN13sysStatusData4loopEv>
	nodeID.loop();
   b4d7a:	f000 fe2b 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b4d7e:	f000 fe44 	bl	b5a0a <_ZN10nodeIDData4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b4d82:	4b87      	ldr	r3, [pc, #540]	; (b4fa0 <loop+0x288>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	2b00      	cmp	r3, #0
   b4d88:	f2c0 820e 	blt.w	b51a8 <loop+0x490>
}
   b4d8c:	b051      	add	sp, #324	; 0x144
   b4d8e:	ecbd 8b02 	vpop	{d8}
   b4d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b4d96:	f009 b8dc 	b.w	bdf52 <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4d9a:	4b7e      	ldr	r3, [pc, #504]	; (b4f94 <loop+0x27c>)
   b4d9c:	781b      	ldrb	r3, [r3, #0]
   b4d9e:	2b03      	cmp	r3, #3
   b4da0:	d001      	beq.n	b4da6 <loop+0x8e>
   b4da2:	f7ff ff71 	bl	b4c88 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4da6:	2100      	movs	r1, #0
   b4da8:	487c      	ldr	r0, [pc, #496]	; (b4f9c <loop+0x284>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4daa:	4c7e      	ldr	r4, [pc, #504]	; (b4fa4 <loop+0x28c>)
   b4dac:	f001 ff04 	bl	b6bb8 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b4db0:	f7ff ff3a 	bl	b4c28 <_Z21secondsUntilNextEventv>
   b4db4:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b4db6:	f009 fab8 	bl	be32a <_ZN9TimeClass3nowEv>
   b4dba:	19c2      	adds	r2, r0, r7
   b4dbc:	17d3      	asrs	r3, r2, #31
   b4dbe:	a810      	add	r0, sp, #64	; 0x40
   b4dc0:	f009 f9ae 	bl	be120 <_ZN9TimeClass7timeStrEx>
   b4dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4dc6:	930b      	str	r3, [sp, #44]	; 0x2c
   b4dc8:	f009 f926 	bl	be018 <_ZN11SystemClass10freeMemoryEv>
   b4dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4dce:	4976      	ldr	r1, [pc, #472]	; (b4fa8 <loop+0x290>)
   b4dd0:	9000      	str	r0, [sp, #0]
   b4dd2:	463a      	mov	r2, r7
   b4dd4:	4875      	ldr	r0, [pc, #468]	; (b4fac <loop+0x294>)
   b4dd6:	f7ff f981 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4dda:	a810      	add	r0, sp, #64	; 0x40
   b4ddc:	f008 ff06 	bl	bdbec <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b4de0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4de4:	f006 fc18 	bl	bb618 <delay>
   b4de8:	7d23      	ldrb	r3, [r4, #20]
   b4dea:	2b00      	cmp	r3, #0
   b4dec:	d050      	beq.n	b4e90 <loop+0x178>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4dee:	2302      	movs	r3, #2
   b4df0:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b4df2:	4b6f      	ldr	r3, [pc, #444]	; (b4fb0 <loop+0x298>)
   b4df4:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4df8:	6823      	ldr	r3, [r4, #0]
   b4dfa:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4dfc:	b1f3      	cbz	r3, b4e3c <loop+0x124>
            if (start->type == type) {
   b4dfe:	889a      	ldrh	r2, [r3, #4]
   b4e00:	2a01      	cmp	r2, #1
   b4e02:	d006      	beq.n	b4e12 <loop+0xfa>
            start = start->next;
   b4e04:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4e06:	e7f9      	b.n	b4dfc <loop+0xe4>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4e08:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4e0a:	b1bb      	cbz	r3, b4e3c <loop+0x124>
            if (start->type == type) {
   b4e0c:	889a      	ldrh	r2, [r3, #4]
   b4e0e:	2a01      	cmp	r2, #1
   b4e10:	d1fa      	bne.n	b4e08 <loop+0xf0>
                if (gpioWakeup->pin == pin) {
   b4e12:	899a      	ldrh	r2, [r3, #12]
   b4e14:	4542      	cmp	r2, r8
   b4e16:	d1f7      	bne.n	b4e08 <loop+0xf0>
                    gpioWakeup->mode = mode;
   b4e18:	2200      	movs	r2, #0
   b4e1a:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4e1c:	7d23      	ldrb	r3, [r4, #20]
   b4e1e:	2b00      	cmp	r3, #0
   b4e20:	d036      	beq.n	b4e90 <loop+0x178>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4e22:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b4e24:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b4e28:	68db      	ldr	r3, [r3, #12]
   b4e2a:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b4e2e:	b1db      	cbz	r3, b4e68 <loop+0x150>
            if (start->type == type) {
   b4e30:	889a      	ldrh	r2, [r3, #4]
   b4e32:	2a04      	cmp	r2, #4
   b4e34:	f000 81b3 	beq.w	b519e <loop+0x486>
            start = start->next;
   b4e38:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4e3a:	e7f8      	b.n	b4e2e <loop+0x116>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4e3c:	495d      	ldr	r1, [pc, #372]	; (b4fb4 <loop+0x29c>)
   b4e3e:	2010      	movs	r0, #16
   b4e40:	f009 fd7c 	bl	be93c <_ZnwjRKSt9nothrow_t>
   b4e44:	4606      	mov	r6, r0
   b4e46:	2800      	cmp	r0, #0
   b4e48:	f000 81ac 	beq.w	b51a4 <loop+0x48c>
   b4e4c:	2210      	movs	r2, #16
   b4e4e:	2100      	movs	r1, #0
   b4e50:	f00a fab0 	bl	bf3b4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4e54:	4b58      	ldr	r3, [pc, #352]	; (b4fb8 <loop+0x2a0>)
   b4e56:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4e58:	2301      	movs	r3, #1
   b4e5a:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4e5c:	6923      	ldr	r3, [r4, #16]
   b4e5e:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b4e60:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4e64:	6126      	str	r6, [r4, #16]
   b4e66:	e7d9      	b.n	b4e1c <loop+0x104>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4e68:	4952      	ldr	r1, [pc, #328]	; (b4fb4 <loop+0x29c>)
   b4e6a:	2010      	movs	r0, #16
   b4e6c:	f009 fd66 	bl	be93c <_ZnwjRKSt9nothrow_t>
   b4e70:	4606      	mov	r6, r0
   b4e72:	2800      	cmp	r0, #0
   b4e74:	f000 8196 	beq.w	b51a4 <loop+0x48c>
   b4e78:	2210      	movs	r2, #16
   b4e7a:	2100      	movs	r1, #0
   b4e7c:	f00a fa9a 	bl	bf3b4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4e80:	4b4d      	ldr	r3, [pc, #308]	; (b4fb8 <loop+0x2a0>)
   b4e82:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4e84:	2304      	movs	r3, #4
   b4e86:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4e88:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4e8a:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b4e8c:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b4e90:	4944      	ldr	r1, [pc, #272]	; (b4fa4 <loop+0x28c>)
   b4e92:	a80c      	add	r0, sp, #48	; 0x30
   b4e94:	f009 f860 	bl	bdf58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4e9c:	483f      	ldr	r0, [pc, #252]	; (b4f9c <loop+0x284>)
   b4e9e:	f001 fe8b 	bl	b6bb8 <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b4ea2:	2000      	movs	r0, #0
   b4ea4:	f005 ffac 	bl	bae00 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4ea8:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4eac:	4604      	mov	r4, r0
   b4eae:	2000      	movs	r0, #0
   b4eb0:	f005 ffa6 	bl	bae00 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4eb4:	1b00      	subs	r0, r0, r4
   b4eb6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4eba:	42b0      	cmp	r0, r6
   b4ebc:	f171 0300 	sbcs.w	r3, r1, #0
   b4ec0:	d207      	bcs.n	b4ed2 <loop+0x1ba>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4ec2:	f009 fb19 	bl	be4f8 <_Z16_fetch_usbserialv>
   b4ec6:	f009 fb0c 	bl	be4e2 <_ZN9USBSerial11isConnectedEv>
   b4eca:	b910      	cbnz	r0, b4ed2 <loop+0x1ba>
            spark_process();
   b4ecc:	f006 fa6c 	bl	bb3a8 <spark_process>
        while (_while() && !_condition()) {
   b4ed0:	e7ed      	b.n	b4eae <loop+0x196>
   b4ed2:	f009 fb11 	bl	be4f8 <_Z16_fetch_usbserialv>
   b4ed6:	f009 fb04 	bl	be4e2 <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b4eda:	2302      	movs	r3, #2
   b4edc:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b4ede:	4b2e      	ldr	r3, [pc, #184]	; (b4f98 <loop+0x280>)
   b4ee0:	2201      	movs	r2, #1
   b4ee2:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b4ee4:	f009 fa21 	bl	be32a <_ZN9TimeClass3nowEv>
   b4ee8:	19c2      	adds	r2, r0, r7
   b4eea:	17d3      	asrs	r3, r2, #31
   b4eec:	a810      	add	r0, sp, #64	; 0x40
   b4eee:	f009 f917 	bl	be120 <_ZN9TimeClass7timeStrEx>
   b4ef2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4ef4:	920b      	str	r2, [sp, #44]	; 0x2c
   b4ef6:	f009 f88f 	bl	be018 <_ZN11SystemClass10freeMemoryEv>
   b4efa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4efc:	492f      	ldr	r1, [pc, #188]	; (b4fbc <loop+0x2a4>)
   b4efe:	4603      	mov	r3, r0
   b4f00:	482a      	ldr	r0, [pc, #168]	; (b4fac <loop+0x294>)
   b4f02:	f7ff f8eb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4f06:	a810      	add	r0, sp, #64	; 0x40
   b4f08:	f008 fe70 	bl	bdbec <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b4f0c:	980c      	ldr	r0, [sp, #48]	; 0x30
   b4f0e:	2800      	cmp	r0, #0
   b4f10:	f43f af24 	beq.w	b4d5c <loop+0x44>
            free(wakeupSource_);
   b4f14:	f006 fb08 	bl	bb528 <free>
		} break;
   b4f18:	e720      	b.n	b4d5c <loop+0x44>
			if (state != oldState) {
   b4f1a:	4b1e      	ldr	r3, [pc, #120]	; (b4f94 <loop+0x27c>)
   b4f1c:	781b      	ldrb	r3, [r3, #0]
   b4f1e:	2b04      	cmp	r3, #4
   b4f20:	d00f      	beq.n	b4f42 <loop+0x22a>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b4f22:	2b07      	cmp	r3, #7
   b4f24:	d003      	beq.n	b4f2e <loop+0x216>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4f26:	f005 ff5b 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
   b4f2a:	4b25      	ldr	r3, [pc, #148]	; (b4fc0 <loop+0x2a8>)
   b4f2c:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4f2e:	f7ff feab 	bl	b4c88 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b4f32:	f7ff f8eb 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4f36:	f7ff f971 	bl	b421c <_ZN14LoRA_Functions11clearBufferEv>
				Log.info("Gateway is listening for LoRA messages");
   b4f3a:	4922      	ldr	r1, [pc, #136]	; (b4fc4 <loop+0x2ac>)
   b4f3c:	481b      	ldr	r0, [pc, #108]	; (b4fac <loop+0x294>)
   b4f3e:	f7ff f8cd 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) state = REPORTING_STATE; // Received and acknowledged data from a node - report
   b4f42:	f7ff f8e3 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4f46:	f7ff fd57 	bl	b49f8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b4f4a:	b108      	cbz	r0, b4f50 <loop+0x238>
   b4f4c:	2307      	movs	r3, #7
   b4f4e:	702b      	strb	r3, [r5, #0]
			if (!testModeFlag && ((millis() - startLoRAWindow) > 150000L)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b4f50:	4b1d      	ldr	r3, [pc, #116]	; (b4fc8 <loop+0x2b0>)
   b4f52:	781b      	ldrb	r3, [r3, #0]
   b4f54:	2b00      	cmp	r3, #0
   b4f56:	f47f af01 	bne.w	b4d5c <loop+0x44>
   b4f5a:	f005 ff41 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
   b4f5e:	4b18      	ldr	r3, [pc, #96]	; (b4fc0 <loop+0x2a8>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	1ac0      	subs	r0, r0, r3
   b4f64:	4b19      	ldr	r3, [pc, #100]	; (b4fcc <loop+0x2b4>)
   b4f66:	4298      	cmp	r0, r3
   b4f68:	f67f aef8 	bls.w	b4d5c <loop+0x44>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b4f6c:	f7ff f8ce 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4f70:	f7ff f964 	bl	b423c <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over
   b4f74:	f009 f9ea 	bl	be34c <_ZN9TimeClass4hourEv>
   b4f78:	4604      	mov	r4, r0
   b4f7a:	f000 fc5d 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b4f7e:	f000 fefc 	bl	b5d7a <_ZNK13sysStatusData18get_lastConnectionEv>
   b4f82:	f009 f8b1 	bl	be0e8 <_ZN9TimeClass4hourEx>
   b4f86:	4284      	cmp	r4, r0
   b4f88:	f000 80d8 	beq.w	b513c <loop+0x424>
   b4f8c:	2305      	movs	r3, #5
   b4f8e:	e6e4      	b.n	b4d5a <loop+0x42>
   b4f90:	2003e3d8 	.word	0x2003e3d8
   b4f94:	2003e3a1 	.word	0x2003e3a1
   b4f98:	2003e3a0 	.word	0x2003e3a0
   b4f9c:	2003e274 	.word	0x2003e274
   b4fa0:	2003dd70 	.word	0x2003dd70
   b4fa4:	2003e294 	.word	0x2003e294
   b4fa8:	000bfe53 	.word	0x000bfe53
   b4fac:	2003e654 	.word	0x2003e654
   b4fb0:	000c01f6 	.word	0x000c01f6
   b4fb4:	000c122c 	.word	0x000c122c
   b4fb8:	00030010 	.word	0x00030010
   b4fbc:	000bfe93 	.word	0x000bfe93
   b4fc0:	2003e268 	.word	0x2003e268
   b4fc4:	000bfeb4 	.word	0x000bfeb4
   b4fc8:	2003e3d9 	.word	0x2003e3d9
   b4fcc:	000249f0 	.word	0x000249f0
			if (state != oldState) publishStateTransition();
   b4fd0:	4b78      	ldr	r3, [pc, #480]	; (b51b4 <loop+0x49c>)
   b4fd2:	781b      	ldrb	r3, [r3, #0]
   b4fd4:	2b07      	cmp	r3, #7
   b4fd6:	d001      	beq.n	b4fdc <loop+0x2c4>
   b4fd8:	f7ff fe56 	bl	b4c88 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();
   b4fdc:	f000 fc7c 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4fe0:	f000 fd79 	bl	b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fe4:	900b      	str	r0, [sp, #44]	; 0x2c
			LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4fe6:	f7ff f891 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4fea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4fec:	4601      	mov	r1, r0
   b4fee:	a80c      	add	r0, sp, #48	; 0x30
   b4ff0:	f7ff fc66 	bl	b48c0 <_ZN14LoRA_Functions12findDeviceIDEh>
   b4ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4ff6:	930b      	str	r3, [sp, #44]	; 0x2c
   b4ff8:	f000 fc6e 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b4ffc:	f000 fe1a 	bl	b5c34 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5000:	4604      	mov	r4, r0
   b5002:	f000 fc69 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b5006:	f000 fe1a 	bl	b5c3e <_ZNK17currentStatusData14get_dailyCountEv>
   b500a:	4606      	mov	r6, r0
   b500c:	f000 fc64 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
  			snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5010:	f000 fc7e 	bl	b5910 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5014:	eeb0 8a40 	vmov.f32	s16, s0
   b5018:	eef0 8a60 	vmov.f32	s17, s1
			LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b501c:	f000 fc5c 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b5020:	f000 fd68 	bl	b5af4 <_ZNK17currentStatusData16get_batteryStateEv>
  			snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5024:	4a64      	ldr	r2, [pc, #400]	; (b51b8 <loop+0x4a0>)
   b5026:	f852 b020 	ldr.w	fp, [r2, r0, lsl #2]
			current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b502a:	f000 fc55 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b502e:	f000 fd5c 	bl	b5aea <_ZNK17currentStatusData17get_internalTempCEv>
   b5032:	4607      	mov	r7, r0
   b5034:	f000 fc00 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b5038:	f000 fd48 	bl	b5acc <_ZNK13sysStatusData14get_resetCountEv>
   b503c:	4680      	mov	r8, r0
   b503e:	f000 fc4b 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b5042:	f000 fdf2 	bl	b5c2a <_ZNK17currentStatusData8get_RSSIEv>
   b5046:	4681      	mov	r9, r0
   b5048:	f000 fc46 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b504c:	f000 fd57 	bl	b5afe <_ZNK17currentStatusData17get_messageNumberEv>
   b5050:	4682      	mov	sl, r0
  			snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5052:	f009 f96a 	bl	be32a <_ZN9TimeClass3nowEv>
   b5056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b5058:	4a58      	ldr	r2, [pc, #352]	; (b51bc <loop+0x4a4>)
   b505a:	e9cd a008 	strd	sl, r0, [sp, #32]
   b505e:	e9cd 4600 	strd	r4, r6, [sp]
   b5062:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5066:	e9cd 8906 	strd	r8, r9, [sp, #24]
   b506a:	e9cd b704 	strd	fp, r7, [sp, #16]
   b506e:	ed8d 8b02 	vstr	d8, [sp, #8]
   b5072:	a810      	add	r0, sp, #64	; 0x40
   b5074:	f006 fa78 	bl	bb568 <snprintf>
			LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5078:	a80c      	add	r0, sp, #48	; 0x30
   b507a:	f008 fdb7 	bl	bdbec <_ZN6StringD1Ev>
			Log.info(data);
   b507e:	a910      	add	r1, sp, #64	; 0x40
   b5080:	484f      	ldr	r0, [pc, #316]	; (b51c0 <loop+0x4a8>)
   b5082:	f7ff f82b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   b5086:	f003 faa5 	bl	b85d4 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b508a:	4b4e      	ldr	r3, [pc, #312]	; (b51c4 <loop+0x4ac>)
   b508c:	4a4e      	ldr	r2, [pc, #312]	; (b51c8 <loop+0x4b0>)
   b508e:	781b      	ldrb	r3, [r3, #0]
   b5090:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b5092:	2100      	movs	r1, #0
   b5094:	4313      	orrs	r3, r2
   b5096:	6802      	ldr	r2, [r0, #0]
   b5098:	f88d 1004 	strb.w	r1, [sp, #4]
   b509c:	f88d 3000 	strb.w	r3, [sp]
   b50a0:	6814      	ldr	r4, [r2, #0]
   b50a2:	494a      	ldr	r1, [pc, #296]	; (b51cc <loop+0x4b4>)
   b50a4:	233c      	movs	r3, #60	; 0x3c
   b50a6:	aa10      	add	r2, sp, #64	; 0x40
   b50a8:	47a0      	blx	r4
   b50aa:	e653      	b.n	b4d54 <loop+0x3c>
			if (state != oldState) {
   b50ac:	4b41      	ldr	r3, [pc, #260]	; (b51b4 <loop+0x49c>)
   b50ae:	781b      	ldrb	r3, [r3, #0]
   b50b0:	2b05      	cmp	r3, #5
   b50b2:	d00a      	beq.n	b50ca <loop+0x3b2>
				publishStateTransition();  
   b50b4:	f7ff fde8 	bl	b4c88 <_Z22publishStateTransitionv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b50b8:	f006 f986 	bl	bb3c8 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();
   b50bc:	b908      	cbnz	r0, b50c2 <loop+0x3aa>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b50be:	f006 f97b 	bl	bb3b8 <spark_cloud_flag_connect>
   b50c2:	f005 fe8d 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b50c6:	4b42      	ldr	r3, [pc, #264]	; (b51d0 <loop+0x4b8>)
   b50c8:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b50ca:	f006 f97d 	bl	bb3c8 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b50ce:	b188      	cbz	r0, b50f4 <loop+0x3dc>
				sysStatus.set_lastConnection(Time.now());
   b50d0:	f000 fbb2 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b50d4:	4604      	mov	r4, r0
   b50d6:	f009 f928 	bl	be32a <_ZN9TimeClass3nowEv>
   b50da:	4602      	mov	r2, r0
   b50dc:	17c3      	asrs	r3, r0, #31
   b50de:	4620      	mov	r0, r4
   b50e0:	f000 fe7e 	bl	b5de0 <_ZN13sysStatusData18set_lastConnectionEx>
   b50e4:	f006 f970 	bl	bb3c8 <spark_cloud_flag_connected>
        if (!connected()) {
   b50e8:	b110      	cbz	r0, b50f0 <loop+0x3d8>
        return spark_sync_time(NULL);
   b50ea:	2000      	movs	r0, #0
   b50ec:	f006 f984 	bl	bb3f8 <spark_sync_time>
				state = DISCONNECTING_STATE;											// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b50f0:	2306      	movs	r3, #6
   b50f2:	e632      	b.n	b4d5a <loop+0x42>
   b50f4:	f005 fe74 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b50f8:	4b35      	ldr	r3, [pc, #212]	; (b51d0 <loop+0x4b8>)
   b50fa:	681b      	ldr	r3, [r3, #0]
   b50fc:	1ac0      	subs	r0, r0, r3
   b50fe:	4b35      	ldr	r3, [pc, #212]	; (b51d4 <loop+0x4bc>)
   b5100:	4298      	cmp	r0, r3
   b5102:	d8e5      	bhi.n	b50d0 <loop+0x3b8>
   b5104:	e62a      	b.n	b4d5c <loop+0x44>
			if (state != oldState) {
   b5106:	4b2b      	ldr	r3, [pc, #172]	; (b51b4 <loop+0x49c>)
   b5108:	4c33      	ldr	r4, [pc, #204]	; (b51d8 <loop+0x4c0>)
   b510a:	781b      	ldrb	r3, [r3, #0]
   b510c:	2b06      	cmp	r3, #6
   b510e:	d004      	beq.n	b511a <loop+0x402>
				publishStateTransition(); 
   b5110:	f7ff fdba 	bl	b4c88 <_Z22publishStateTransitionv>
   b5114:	f005 fe64 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b5118:	6020      	str	r0, [r4, #0]
   b511a:	f005 fe61 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b511e:	6823      	ldr	r3, [r4, #0]
   b5120:	1ac0      	subs	r0, r0, r3
   b5122:	4b2e      	ldr	r3, [pc, #184]	; (b51dc <loop+0x4c4>)
   b5124:	4298      	cmp	r0, r3
   b5126:	f67f ae19 	bls.w	b4d5c <loop+0x44>
   b512a:	f003 fa53 	bl	b85d4 <_ZN17PublishQueuePosix8instanceEv>
   b512e:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b5132:	2b00      	cmp	r3, #0
   b5134:	f43f ae12 	beq.w	b4d5c <loop+0x44>
				disconnectFromParticle();
   b5138:	f001 fa5a 	bl	b65f0 <_Z22disconnectFromParticlev>
				state = IDLE_STATE;
   b513c:	2302      	movs	r3, #2
   b513e:	e60c      	b.n	b4d5a <loop+0x42>
			static system_tick_t resetTimeout = millis();
   b5140:	4c27      	ldr	r4, [pc, #156]	; (b51e0 <loop+0x4c8>)
   b5142:	4e28      	ldr	r6, [pc, #160]	; (b51e4 <loop+0x4cc>)
   b5144:	7823      	ldrb	r3, [r4, #0]
   b5146:	f3bf 8f5b 	dmb	ish
   b514a:	f013 0f01 	tst.w	r3, #1
   b514e:	d109      	bne.n	b5164 <loop+0x44c>
   b5150:	4620      	mov	r0, r4
   b5152:	f7fe ffb3 	bl	b40bc <__cxa_guard_acquire>
   b5156:	b128      	cbz	r0, b5164 <loop+0x44c>
   b5158:	f005 fe42 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
   b515c:	6030      	str	r0, [r6, #0]
   b515e:	4620      	mov	r0, r4
   b5160:	f7fe ffb1 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b5164:	4b13      	ldr	r3, [pc, #76]	; (b51b4 <loop+0x49c>)
   b5166:	782a      	ldrb	r2, [r5, #0]
   b5168:	781b      	ldrb	r3, [r3, #0]
   b516a:	429a      	cmp	r2, r3
   b516c:	d001      	beq.n	b5172 <loop+0x45a>
   b516e:	f7ff fd8b 	bl	b4c88 <_Z22publishStateTransitionv>
   b5172:	f005 fe35 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b5176:	6833      	ldr	r3, [r6, #0]
   b5178:	1ac0      	subs	r0, r0, r3
   b517a:	f247 5330 	movw	r3, #30000	; 0x7530
   b517e:	4298      	cmp	r0, r3
   b5180:	f67f adec 	bls.w	b4d5c <loop+0x44>
				Log.info("Deep power down device");
   b5184:	4918      	ldr	r1, [pc, #96]	; (b51e8 <loop+0x4d0>)
   b5186:	480e      	ldr	r0, [pc, #56]	; (b51c0 <loop+0x4a8>)
   b5188:	f7fe ffa8 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b518c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5190:	f006 fa42 	bl	bb618 <delay>
				ab1805.deepPowerDown(); 
   b5194:	211e      	movs	r1, #30
   b5196:	4815      	ldr	r0, [pc, #84]	; (b51ec <loop+0x4d4>)
   b5198:	f001 fe68 	bl	b6e6c <_ZN6AB180513deepPowerDownEi>
   b519c:	e5de      	b.n	b4d5c <loop+0x44>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b519e:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b51a2:	e675      	b.n	b4e90 <loop+0x178>
                valid_ = false;
   b51a4:	7526      	strb	r6, [r4, #20]
                return *this;
   b51a6:	e673      	b.n	b4e90 <loop+0x178>
}
   b51a8:	b051      	add	sp, #324	; 0x144
   b51aa:	ecbd 8b02 	vpop	{d8}
   b51ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b51b2:	bf00      	nop
   b51b4:	2003e3a1 	.word	0x2003e3a1
   b51b8:	2003de08 	.word	0x2003de08
   b51bc:	000bfedb 	.word	0x000bfedb
   b51c0:	2003e654 	.word	0x2003e654
   b51c4:	2003e261 	.word	0x2003e261
   b51c8:	2003e260 	.word	0x2003e260
   b51cc:	000bff60 	.word	0x000bff60
   b51d0:	2003e26c 	.word	0x2003e26c
   b51d4:	000493e0 	.word	0x000493e0
   b51d8:	2003e270 	.word	0x2003e270
   b51dc:	00015f90 	.word	0x00015f90
   b51e0:	2003e25c 	.word	0x2003e25c
   b51e4:	2003e264 	.word	0x2003e264
   b51e8:	000bff75 	.word	0x000bff75
   b51ec:	2003e274 	.word	0x2003e274

000b51f0 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b51f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b51f2:	2300      	movs	r3, #0
   b51f4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b51f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b51f8:	4604      	mov	r4, r0
   b51fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b51fc:	b12b      	cbz	r3, b520a <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b51fe:	2202      	movs	r2, #2
   b5200:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5202:	68eb      	ldr	r3, [r5, #12]
   b5204:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5206:	68ab      	ldr	r3, [r5, #8]
   b5208:	60a3      	str	r3, [r4, #8]
    }
   b520a:	4620      	mov	r0, r4
   b520c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5210 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b5210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5214:	b095      	sub	sp, #84	; 0x54
   b5216:	4605      	mov	r5, r0
        };
   b5218:	991c      	ldr	r1, [sp, #112]	; 0x70
   b521a:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b521c:	4690      	mov	r8, r2
   b521e:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5220:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b5222:	f7ff ffe5 	bl	b51f0 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5226:	a904      	add	r1, sp, #16
   b5228:	a808      	add	r0, sp, #32
   b522a:	f7ff ffe1 	bl	b51f0 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b522e:	a908      	add	r1, sp, #32
   b5230:	4630      	mov	r0, r6
   b5232:	f7ff ffdd 	bl	b51f0 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b5236:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b523a:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b523c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5240:	f7fe ff29 	bl	b4096 <_Znwj>
   b5244:	4604      	mov	r4, r0
   b5246:	b1a0      	cbz	r0, b5272 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5248:	e896 0003 	ldmia.w	r6, {r0, r1}
   b524c:	ab01      	add	r3, sp, #4
   b524e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5252:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5256:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b525a:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b525e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b5260:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5262:	60a3      	str	r3, [r4, #8]
   b5264:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b526a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b526e:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b5270:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b5272:	4b24      	ldr	r3, [pc, #144]	; (b5304 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b5274:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b5276:	4b24      	ldr	r3, [pc, #144]	; (b5308 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b5278:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b527a:	2200      	movs	r2, #0
   b527c:	2300      	movs	r3, #0
   b527e:	f04f 0900 	mov.w	r9, #0
   b5282:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b5286:	4b21      	ldr	r3, [pc, #132]	; (b530c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b5288:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b528c:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b528e:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b5290:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b5294:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5298:	f7fe fefd 	bl	b4096 <_Znwj>
   b529c:	4604      	mov	r4, r0
   b529e:	b1d8      	cbz	r0, b52d8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b52a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b52a2:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b52a6:	b133      	cbz	r3, b52b6 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b52a8:	2202      	movs	r2, #2
   b52aa:	a910      	add	r1, sp, #64	; 0x40
   b52ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b52ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b52b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b52b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b52b4:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b52b6:	4b16      	ldr	r3, [pc, #88]	; (b5310 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b52b8:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b52ba:	4a16      	ldr	r2, [pc, #88]	; (b5314 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b52bc:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b52be:	ab01      	add	r3, sp, #4
   b52c0:	4640      	mov	r0, r8
   b52c2:	4639      	mov	r1, r7
   b52c4:	f005 fffe 	bl	bb2c4 <system_subscribe_event>
        if (r) {
   b52c8:	b1b0      	cbz	r0, b52f8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b52ca:	4620      	mov	r0, r4
   b52cc:	f7ff fc92 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b52d0:	2110      	movs	r1, #16
   b52d2:	4620      	mov	r0, r4
   b52d4:	f7fe fee3 	bl	b409e <_ZdlPvj>
   b52d8:	a810      	add	r0, sp, #64	; 0x40
   b52da:	f7ff fc8b 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   b52de:	4630      	mov	r0, r6
   b52e0:	f7ff fc88 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   b52e4:	a808      	add	r0, sp, #32
   b52e6:	f7ff fc85 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   b52ea:	a804      	add	r0, sp, #16
   b52ec:	f7ff fc82 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
    }
   b52f0:	4628      	mov	r0, r5
   b52f2:	b015      	add	sp, #84	; 0x54
   b52f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b52f8:	9b02      	ldr	r3, [sp, #8]
   b52fa:	60ab      	str	r3, [r5, #8]
   b52fc:	e9c5 8700 	strd	r8, r7, [r5]
   b5300:	e7ea      	b.n	b52d8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b5302:	bf00      	nop
   b5304:	000b4bb1 	.word	0x000b4bb1
   b5308:	000b5319 	.word	0x000b5319
   b530c:	000c0002 	.word	0x000c0002
   b5310:	000b4c07 	.word	0x000b4c07
   b5314:	000b4b89 	.word	0x000b4b89

000b5318 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b5318:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b531a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b531c:	4604      	mov	r4, r0
	switch (__op)
   b531e:	d104      	bne.n	b532a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b5320:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5322:	6003      	str	r3, [r0, #0]
      }
   b5324:	2000      	movs	r0, #0
   b5326:	b003      	add	sp, #12
   b5328:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b532a:	2a02      	cmp	r2, #2
   b532c:	d00c      	beq.n	b5348 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b532e:	2a03      	cmp	r2, #3
   b5330:	d1f8      	bne.n	b5324 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5332:	6804      	ldr	r4, [r0, #0]
   b5334:	2c00      	cmp	r4, #0
   b5336:	d0f5      	beq.n	b5324 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5338:	4620      	mov	r0, r4
   b533a:	f7ff fc5b 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b533e:	2110      	movs	r1, #16
   b5340:	4620      	mov	r0, r4
   b5342:	f7fe feac 	bl	b409e <_ZdlPvj>
   b5346:	e7ed      	b.n	b5324 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b5348:	6809      	ldr	r1, [r1, #0]
   b534a:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b534c:	2010      	movs	r0, #16
   b534e:	f7fe fea2 	bl	b4096 <_Znwj>
   b5352:	4605      	mov	r5, r0
   b5354:	b110      	cbz	r0, b535c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5356:	9901      	ldr	r1, [sp, #4]
   b5358:	f7ff ff4a 	bl	b51f0 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b535c:	6025      	str	r5, [r4, #0]
	}
   b535e:	e7e1      	b.n	b5324 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b5360 <_GLOBAL__sub_I___appProductVersion>:
}
   b5360:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b5362:	4b1d      	ldr	r3, [pc, #116]	; (b53d8 <_GLOBAL__sub_I___appProductVersion+0x78>)
   b5364:	2501      	movs	r5, #1
   b5366:	701d      	strb	r5, [r3, #0]
   b5368:	4b1c      	ldr	r3, [pc, #112]	; (b53dc <_GLOBAL__sub_I___appProductVersion+0x7c>)
   b536a:	2208      	movs	r2, #8
   b536c:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b536e:	f009 f985 	bl	be67c <spark_protocol_instance>
   b5372:	2300      	movs	r3, #0
   b5374:	461a      	mov	r2, r3
   b5376:	4619      	mov	r1, r3
   b5378:	f009 f990 	bl	be69c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b537c:	f009 f97e 	bl	be67c <spark_protocol_instance>
   b5380:	2300      	movs	r3, #0
   b5382:	461a      	mov	r2, r3
   b5384:	210d      	movs	r1, #13
   b5386:	f009 f981 	bl	be68c <spark_protocol_set_product_id>
        : config_(config) {
   b538a:	4b15      	ldr	r3, [pc, #84]	; (b53e0 <_GLOBAL__sub_I___appProductVersion+0x80>)
   b538c:	1d1a      	adds	r2, r3, #4
              valid_(true) {
   b538e:	2400      	movs	r4, #0
        : config_(config) {
   b5390:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b5392:	4a14      	ldr	r2, [pc, #80]	; (b53e4 <_GLOBAL__sub_I___appProductVersion+0x84>)
   b5394:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5396:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b539a:	611c      	str	r4, [r3, #16]
   b539c:	751d      	strb	r5, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b539e:	f009 fa45 	bl	be82c <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   b53a2:	4d11      	ldr	r5, [pc, #68]	; (b53e8 <_GLOBAL__sub_I___appProductVersion+0x88>)
   b53a4:	4601      	mov	r1, r0
   b53a6:	2269      	movs	r2, #105	; 0x69
   b53a8:	4810      	ldr	r0, [pc, #64]	; (b53ec <_GLOBAL__sub_I___appProductVersion+0x8c>)
   b53aa:	f001 fb07 	bl	b69bc <_ZN6AB1805C1ER7TwoWireh>
   b53ae:	4628      	mov	r0, r5
   b53b0:	490f      	ldr	r1, [pc, #60]	; (b53f0 <_GLOBAL__sub_I___appProductVersion+0x90>)
   b53b2:	f008 fc66 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   b53b6:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b53b8:	480e      	ldr	r0, [pc, #56]	; (b53f4 <_GLOBAL__sub_I___appProductVersion+0x94>)
    LocalTimeSchedule() {
   b53ba:	612c      	str	r4, [r5, #16]
   b53bc:	2200      	movs	r2, #0
   b53be:	e9c5 2306 	strd	r2, r3, [r5, #24]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b53c2:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   b53c6:	2306      	movs	r3, #6
   b53c8:	f840 3b04 	str.w	r3, [r0], #4
   b53cc:	62ac      	str	r4, [r5, #40]	; 0x28
}
   b53ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b53d2:	f002 bbe7 	b.w	b7ba4 <_ZN22LocalTimePosixTimezoneC1Ev>
   b53d6:	bf00      	nop
   b53d8:	2003e260 	.word	0x2003e260
   b53dc:	2003e261 	.word	0x2003e261
   b53e0:	2003e294 	.word	0x2003e294
   b53e4:	00030010 	.word	0x00030010
   b53e8:	2003e3a8 	.word	0x2003e3a8
   b53ec:	2003e274 	.word	0x2003e274
   b53f0:	000c10a4 	.word	0x000c10a4
   b53f4:	2003e2b0 	.word	0x2003e2b0

000b53f8 <setup>:
{
   b53f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        return hal_timer_millis(nullptr);
   b53fc:	2000      	movs	r0, #0
   b53fe:	b0a0      	sub	sp, #128	; 0x80
   b5400:	f005 fcfe 	bl	bae00 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5404:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5408:	4604      	mov	r4, r0
   b540a:	2000      	movs	r0, #0
   b540c:	f005 fcf8 	bl	bae00 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5410:	1b00      	subs	r0, r0, r4
   b5412:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5416:	42a8      	cmp	r0, r5
   b5418:	f171 0300 	sbcs.w	r3, r1, #0
   b541c:	d207      	bcs.n	b542e <setup+0x36>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b541e:	f009 f86b 	bl	be4f8 <_Z16_fetch_usbserialv>
   b5422:	f009 f85e 	bl	be4e2 <_ZN9USBSerial11isConnectedEv>
   b5426:	b910      	cbnz	r0, b542e <setup+0x36>
            spark_process();
   b5428:	f005 ffbe 	bl	bb3a8 <spark_process>
        while (_while() && !_condition()) {
   b542c:	e7ed      	b.n	b540a <setup+0x12>
   b542e:	f009 f863 	bl	be4f8 <_Z16_fetch_usbserialv>
   b5432:	f009 f856 	bl	be4e2 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b5436:	f000 fd73 	bl	b5f20 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b543a:	f000 fd9d 	bl	b5f78 <_Z18initializePowerCfgv>
		current.setup();
   b543e:	f000 fa4b 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b5442:	6803      	ldr	r3, [r0, #0]
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5444:	4e8d      	ldr	r6, [pc, #564]	; (b567c <setup+0x284>)
   b5446:	681b      	ldr	r3, [r3, #0]
	Log.info("RTC initialized, time is %s and RTC %s set", Time.timeStr(Time.now()).c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5448:	f8df 8288 	ldr.w	r8, [pc, #648]	; b56d4 <setup+0x2dc>
   b544c:	4f8c      	ldr	r7, [pc, #560]	; (b5680 <setup+0x288>)
		current.setup();
   b544e:	4798      	blx	r3
  		sysStatus.setup();
   b5450:	f000 f9f2 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b5454:	6803      	ldr	r3, [r0, #0]
   b5456:	681b      	ldr	r3, [r3, #0]
   b5458:	4798      	blx	r3
		nodeID.setup();
   b545a:	f000 fabb 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b545e:	6803      	ldr	r3, [r0, #0]
   b5460:	681b      	ldr	r3, [r3, #0]
   b5462:	4798      	blx	r3
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   b5464:	f000 fe30 	bl	b60c8 <_Z18particleInitializev>
	resetEverything();		// This is a test function
   b5468:	f000 fcd8 	bl	b5e1c <_Z15resetEverythingv>
   b546c:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b546e:	2101      	movs	r1, #1
   b5470:	4630      	mov	r0, r6
   b5472:	8173      	strh	r3, [r6, #10]
   b5474:	f001 ff9e 	bl	b73b4 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b5478:	217c      	movs	r1, #124	; 0x7c
   b547a:	4630      	mov	r0, r6
   b547c:	f001 fb9c 	bl	b6bb8 <_ZN6AB18056setWDTEi>
	Log.info("RTC initialized, time is %s and RTC %s set", Time.timeStr(Time.now()).c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5480:	f008 ff53 	bl	be32a <_ZN9TimeClass3nowEv>
   b5484:	ac0a      	add	r4, sp, #40	; 0x28
   b5486:	17c3      	asrs	r3, r0, #31
   b5488:	4602      	mov	r2, r0
   b548a:	4620      	mov	r0, r4
   b548c:	f008 fe48 	bl	be120 <_ZN9TimeClass7timeStrEx>
   b5490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5492:	9203      	str	r2, [sp, #12]
   b5494:	4630      	mov	r0, r6
   b5496:	f7ff fbc2 	bl	b4c1e <_ZN6AB18058isRTCSetEv>
   b549a:	497a      	ldr	r1, [pc, #488]	; (b5684 <setup+0x28c>)
   b549c:	9a03      	ldr	r2, [sp, #12]
   b549e:	2800      	cmp	r0, #0
   b54a0:	bf14      	ite	ne
   b54a2:	4643      	movne	r3, r8
   b54a4:	463b      	moveq	r3, r7
   b54a6:	4878      	ldr	r0, [pc, #480]	; (b5688 <setup+0x290>)
   b54a8:	f7fe fe18 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b54ac:	4620      	mov	r0, r4
   b54ae:	f008 fb9d 	bl	bdbec <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b54b2:	4b76      	ldr	r3, [pc, #472]	; (b568c <setup+0x294>)
   b54b4:	930a      	str	r3, [sp, #40]	; 0x28
	    _M_invoker = &_My_handler::_M_invoke;
   b54b6:	4b76      	ldr	r3, [pc, #472]	; (b5690 <setup+0x298>)
   b54b8:	930d      	str	r3, [sp, #52]	; 0x34
	    _M_manager = &_My_handler::_M_manager;
   b54ba:	4b76      	ldr	r3, [pc, #472]	; (b5694 <setup+0x29c>)
   b54bc:	930c      	str	r3, [sp, #48]	; 0x30
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b54be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b54c2:	2300      	movs	r3, #0
   b54c4:	a806      	add	r0, sp, #24
   b54c6:	9400      	str	r4, [sp, #0]
   b54c8:	f7ff fea2 	bl	b5210 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b54cc:	4620      	mov	r0, r4
   b54ce:	f7ff fb91 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b54d2:	f003 f87f 	bl	b85d4 <_ZN17PublishQueuePosix8instanceEv>
   b54d6:	f003 fa83 	bl	b89e0 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b54da:	f7fe fe17 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b54de:	2101      	movs	r1, #1
   b54e0:	f7fe fe26 	bl	b4130 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b54e4:	f002 fd0e 	bl	b7f04 <_ZN9LocalTime8instanceEv>
   b54e8:	496b      	ldr	r1, [pc, #428]	; (b5698 <setup+0x2a0>)
   b54ea:	4605      	mov	r5, r0
   b54ec:	4620      	mov	r0, r4
   b54ee:	f002 fc0b 	bl	b7d08 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b54f2:	a90b      	add	r1, sp, #44	; 0x2c
   b54f4:	f105 0008 	add.w	r0, r5, #8
   b54f8:	f008 fbff 	bl	bdcfa <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b54fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b54fe:	61eb      	str	r3, [r5, #28]
class LocalTimePosixTimezone {
   b5500:	a911      	add	r1, sp, #68	; 0x44
   b5502:	f105 0020 	add.w	r0, r5, #32
   b5506:	f008 fbf8 	bl	bdcfa <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b550a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b550c:	636b      	str	r3, [r5, #52]	; 0x34
class LocalTimeChange {
   b550e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5510:	63eb      	str	r3, [r5, #60]	; 0x3c
class LocalTimeHMS {
   b5512:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5514:	646b      	str	r3, [r5, #68]	; 0x44
class LocalTimeChange {
   b5516:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b5518:	64eb      	str	r3, [r5, #76]	; 0x4c
class LocalTimeHMS {
   b551a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   b551c:	656b      	str	r3, [r5, #84]	; 0x54
class LocalTimePosixTimezone {
   b551e:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
   b5522:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
   b5526:	4620      	mov	r0, r4
   b5528:	f002 f9bc 	bl	b78a4 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b552c:	f008 fefd 	bl	be32a <_ZN9TimeClass3nowEv>
   b5530:	4b5a      	ldr	r3, [pc, #360]	; (b569c <setup+0x2a4>)
   b5532:	17c2      	asrs	r2, r0, #31
   b5534:	e9c3 0218 	strd	r0, r2, [r3, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   b5538:	4618      	mov	r0, r3
   b553a:	f002 fd5b 	bl	b7ff4 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b553e:	f008 fed7 	bl	be2f0 <_ZN9TimeClass7isValidEv>
   b5542:	2800      	cmp	r0, #0
   b5544:	d07e      	beq.n	b5644 <setup+0x24c>
		Log.info("LocalTime initialized, time is %s and RTC %s set", Time.timeStr(Time.now()).c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5546:	f008 fef0 	bl	be32a <_ZN9TimeClass3nowEv>
   b554a:	17c3      	asrs	r3, r0, #31
   b554c:	4602      	mov	r2, r0
   b554e:	4620      	mov	r0, r4
   b5550:	f008 fde6 	bl	be120 <_ZN9TimeClass7timeStrEx>
   b5554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5556:	9203      	str	r2, [sp, #12]
   b5558:	4630      	mov	r0, r6
   b555a:	f7ff fb60 	bl	b4c1e <_ZN6AB18058isRTCSetEv>
   b555e:	9a03      	ldr	r2, [sp, #12]
   b5560:	494f      	ldr	r1, [pc, #316]	; (b56a0 <setup+0x2a8>)
   b5562:	2800      	cmp	r0, #0
   b5564:	bf14      	ite	ne
   b5566:	4643      	movne	r3, r8
   b5568:	463b      	moveq	r3, r7
	else Log.info("LocalTime not initialized, time is %s and RTC %s set", Time.timeStr(Time.now()).c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b556a:	4847      	ldr	r0, [pc, #284]	; (b5688 <setup+0x290>)
   b556c:	f7fe fdb6 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b5570:	4620      	mov	r0, r4
   b5572:	f008 fb3b 	bl	bdbec <_ZN6StringD1Ev>
  	Log.info("Gateway startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   b5576:	4b4b      	ldr	r3, [pc, #300]	; (b56a4 <setup+0x2ac>)
   b5578:	4948      	ldr	r1, [pc, #288]	; (b569c <setup+0x2a4>)
   b557a:	681a      	ldr	r2, [r3, #0]
   b557c:	4620      	mov	r0, r4
   b557e:	f002 fc23 	bl	b7dc8 <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b5582:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5584:	a905      	add	r1, sp, #20
   b5586:	2003      	movs	r0, #3
   b5588:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    const diag_source* src = nullptr;
   b558a:	9205      	str	r2, [sp, #20]
    const int ret = diag_get_source(id, &src, nullptr);
   b558c:	f005 fe78 	bl	bb280 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b5590:	2800      	cmp	r0, #0
   b5592:	d16a      	bne.n	b566a <setup+0x272>
        return ret;
    }
    return get(src, val);
   b5594:	9d05      	ldr	r5, [sp, #20]
    SPARK_ASSERT(src && src->callback);
   b5596:	b10d      	cbz	r5, b559c <setup+0x1a4>
   b5598:	692b      	ldr	r3, [r5, #16]
   b559a:	b923      	cbnz	r3, b55a6 <setup+0x1ae>
   b559c:	4a42      	ldr	r2, [pc, #264]	; (b56a8 <setup+0x2b0>)
   b559e:	4943      	ldr	r1, [pc, #268]	; (b56ac <setup+0x2b4>)
   b55a0:	200a      	movs	r0, #10
   b55a2:	f005 fe45 	bl	bb230 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b55a6:	230c      	movs	r3, #12
   b55a8:	9306      	str	r3, [sp, #24]
   b55aa:	ab04      	add	r3, sp, #16
   b55ac:	9307      	str	r3, [sp, #28]
   b55ae:	2304      	movs	r3, #4
   b55b0:	9308      	str	r3, [sp, #32]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b55b2:	692b      	ldr	r3, [r5, #16]
   b55b4:	aa06      	add	r2, sp, #24
   b55b6:	2101      	movs	r1, #1
   b55b8:	4628      	mov	r0, r5
   b55ba:	4798      	blx	r3
        if (r) {
   b55bc:	2800      	cmp	r0, #0
   b55be:	d154      	bne.n	b566a <setup+0x272>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b55c0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   b55c4:	ee07 3a90 	vmov	s15, r3
   b55c8:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b55cc:	ee17 0a90 	vmov	r0, s15
   b55d0:	f009 fb26 	bl	bec20 <__aeabi_f2d>
   b55d4:	4632      	mov	r2, r6
   b55d6:	e9cd 0100 	strd	r0, r1, [sp]
   b55da:	4935      	ldr	r1, [pc, #212]	; (b56b0 <setup+0x2b8>)
   b55dc:	482a      	ldr	r0, [pc, #168]	; (b5688 <setup+0x290>)
   b55de:	4d35      	ldr	r5, [pc, #212]	; (b56b4 <setup+0x2bc>)
   b55e0:	f7fe fd7c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b55e4:	4620      	mov	r0, r4
   b55e6:	f008 fb01 	bl	bdbec <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b55ea:	4b33      	ldr	r3, [pc, #204]	; (b56b8 <setup+0x2c0>)
   b55ec:	881e      	ldrh	r6, [r3, #0]
   b55ee:	4630      	mov	r0, r6
   b55f0:	f009 f8c4 	bl	be77c <digitalRead>
   b55f4:	4604      	mov	r4, r0
   b55f6:	2800      	cmp	r0, #0
   b55f8:	d13a      	bne.n	b5670 <setup+0x278>
		Log.info("User button pressed, test mode");
   b55fa:	4930      	ldr	r1, [pc, #192]	; (b56bc <setup+0x2c4>)
   b55fc:	4822      	ldr	r0, [pc, #136]	; (b5688 <setup+0x290>)
   b55fe:	f7fe fd6d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		testModeFlag = true;
   b5602:	4b2f      	ldr	r3, [pc, #188]	; (b56c0 <setup+0x2c8>)
   b5604:	2101      	movs	r1, #1
   b5606:	7019      	strb	r1, [r3, #0]
		digitalWrite(BLUE_LED,HIGH);
   b5608:	4b2e      	ldr	r3, [pc, #184]	; (b56c4 <setup+0x2cc>)
   b560a:	881f      	ldrh	r7, [r3, #0]
   b560c:	4638      	mov	r0, r7
   b560e:	f009 f89c 	bl	be74a <digitalWrite>
		delay(2000);
   b5612:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5616:	f005 ffff 	bl	bb618 <delay>
		digitalWrite(BLUE_LED,LOW);
   b561a:	4621      	mov	r1, r4
   b561c:	4638      	mov	r0, r7
   b561e:	f009 f894 	bl	be74a <digitalWrite>
		state = LoRA_STATE;
   b5622:	2304      	movs	r3, #4
   b5624:	702b      	strb	r3, [r5, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5626:	2200      	movs	r2, #0
   b5628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b562c:	4926      	ldr	r1, [pc, #152]	; (b56c8 <setup+0x2d0>)
   b562e:	9200      	str	r2, [sp, #0]
   b5630:	4630      	mov	r0, r6
   b5632:	f006 fd67 	bl	bc104 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5636:	782b      	ldrb	r3, [r5, #0]
   b5638:	b90b      	cbnz	r3, b563e <setup+0x246>
   b563a:	2302      	movs	r3, #2
   b563c:	702b      	strb	r3, [r5, #0]
}
   b563e:	b020      	add	sp, #128	; 0x80
   b5640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else Log.info("LocalTime not initialized, time is %s and RTC %s set", Time.timeStr(Time.now()).c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5644:	f008 fe71 	bl	be32a <_ZN9TimeClass3nowEv>
   b5648:	17c3      	asrs	r3, r0, #31
   b564a:	4602      	mov	r2, r0
   b564c:	4620      	mov	r0, r4
   b564e:	f008 fd67 	bl	be120 <_ZN9TimeClass7timeStrEx>
   b5652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5654:	9203      	str	r2, [sp, #12]
   b5656:	4630      	mov	r0, r6
   b5658:	f7ff fae1 	bl	b4c1e <_ZN6AB18058isRTCSetEv>
   b565c:	9a03      	ldr	r2, [sp, #12]
   b565e:	491b      	ldr	r1, [pc, #108]	; (b56cc <setup+0x2d4>)
   b5660:	2800      	cmp	r0, #0
   b5662:	bf14      	ite	ne
   b5664:	4643      	movne	r3, r8
   b5666:	463b      	moveq	r3, r7
   b5668:	e77f      	b.n	b556a <setup+0x172>
            return -1.0f;
   b566a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b566e:	e7ad      	b.n	b55cc <setup+0x1d4>
	else Log.info("No user button push detechted");
   b5670:	4917      	ldr	r1, [pc, #92]	; (b56d0 <setup+0x2d8>)
   b5672:	4805      	ldr	r0, [pc, #20]	; (b5688 <setup+0x290>)
   b5674:	f7fe fd32 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b5678:	e7d5      	b.n	b5626 <setup+0x22e>
   b567a:	bf00      	nop
   b567c:	2003e274 	.word	0x2003e274
   b5680:	000bff8f 	.word	0x000bff8f
   b5684:	000bff96 	.word	0x000bff96
   b5688:	2003e654 	.word	0x2003e654
   b568c:	000b4b71 	.word	0x000b4b71
   b5690:	000b4beb 	.word	0x000b4beb
   b5694:	000b4bd7 	.word	0x000b4bd7
   b5698:	000bffc1 	.word	0x000bffc1
   b569c:	2003e2b0 	.word	0x2003e2b0
   b56a0:	000bffe8 	.word	0x000bffe8
   b56a4:	2003de80 	.word	0x2003de80
   b56a8:	000badd1 	.word	0x000badd1
   b56ac:	000c004e 	.word	0x000c004e
   b56b0:	000c0074 	.word	0x000c0074
   b56b4:	2003e3d8 	.word	0x2003e3d8
   b56b8:	000c01f6 	.word	0x000c01f6
   b56bc:	000c00a6 	.word	0x000c00a6
   b56c0:	2003e3d9 	.word	0x2003e3d9
   b56c4:	000c01f4 	.word	0x000c01f4
   b56c8:	000b4b7d 	.word	0x000b4b7d
   b56cc:	000c0019 	.word	0x000c0019
   b56d0:	000c00c5 	.word	0x000c00c5
   b56d4:	000bff8c 	.word	0x000bff8c

000b56d8 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b56d8:	b510      	push	{r4, lr}
   b56da:	4b03      	ldr	r3, [pc, #12]	; (b56e8 <_ZN8MB85RC64D1Ev+0x10>)
   b56dc:	6003      	str	r3, [r0, #0]
   b56de:	4604      	mov	r4, r0
   b56e0:	f002 fd36 	bl	b8150 <_ZN6MB85RCD1Ev>
   b56e4:	4620      	mov	r0, r4
   b56e6:	bd10      	pop	{r4, pc}
   b56e8:	000c0128 	.word	0x000c0128

000b56ec <_ZN8MB85RC64D0Ev>:
   b56ec:	b510      	push	{r4, lr}
   b56ee:	4604      	mov	r4, r0
   b56f0:	f7ff fff2 	bl	b56d8 <_ZN8MB85RC64D1Ev>
   b56f4:	4620      	mov	r0, r4
   b56f6:	2110      	movs	r1, #16
   b56f8:	f7fe fcd1 	bl	b409e <_ZdlPvj>
   b56fc:	4620      	mov	r0, r4
   b56fe:	bd10      	pop	{r4, pc}

000b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5700:	b510      	push	{r4, lr}
            if (!handle_) {
   b5702:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5704:	4604      	mov	r4, r0
            if (!handle_) {
   b5706:	b90b      	cbnz	r3, b570c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5708:	f005 fb1a 	bl	bad40 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b570c:	6820      	ldr	r0, [r4, #0]
        }
   b570e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5712:	f005 bb25 	b.w	bad60 <os_mutex_recursive_lock>

000b5716 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5716:	b538      	push	{r3, r4, r5, lr}
   b5718:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b571a:	3004      	adds	r0, #4
   b571c:	f7ff fff0 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5720:	6a20      	ldr	r0, [r4, #32]
   b5722:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5724:	6803      	ldr	r3, [r0, #0]
   b5726:	68dd      	ldr	r5, [r3, #12]
   b5728:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b572c:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b572e:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5734:	f005 bb1c 	b.w	bad70 <os_mutex_recursive_unlock>

000b5738 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5738:	b538      	push	{r3, r4, r5, lr}
   b573a:	4604      	mov	r4, r0
   b573c:	3004      	adds	r0, #4
   b573e:	f7ff ffdf 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5742:	6a20      	ldr	r0, [r4, #32]
   b5744:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5746:	6803      	ldr	r3, [r0, #0]
   b5748:	689d      	ldr	r5, [r3, #8]
   b574a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b574e:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5750:	68a2      	ldr	r2, [r4, #8]
   b5752:	6823      	ldr	r3, [r4, #0]
   b5754:	88d1      	ldrh	r1, [r2, #6]
   b5756:	695b      	ldr	r3, [r3, #20]
   b5758:	4620      	mov	r0, r4
   b575a:	4798      	blx	r3
   b575c:	b918      	cbnz	r0, b5766 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b575e:	6823      	ldr	r3, [r4, #0]
   b5760:	4620      	mov	r0, r4
   b5762:	699b      	ldr	r3, [r3, #24]
   b5764:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5766:	6860      	ldr	r0, [r4, #4]
   b5768:	f005 fb02 	bl	bad70 <os_mutex_recursive_unlock>
        }
   b576c:	2001      	movs	r0, #1
   b576e:	bd38      	pop	{r3, r4, r5, pc}

000b5770 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5770:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5772:	4b04      	ldr	r3, [pc, #16]	; (b5784 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b5774:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b5776:	4604      	mov	r4, r0
            if (handle_) {
   b5778:	6840      	ldr	r0, [r0, #4]
   b577a:	b108      	cbz	r0, b5780 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b577c:	f005 fae8 	bl	bad50 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5780:	4620      	mov	r0, r4
   b5782:	bd10      	pop	{r4, pc}
   b5784:	000c0efc 	.word	0x000c0efc

000b5788 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b5788:	b510      	push	{r4, lr}
   b578a:	4b03      	ldr	r3, [pc, #12]	; (b5798 <_ZN13sysStatusDataD1Ev+0x10>)
   b578c:	6003      	str	r3, [r0, #0]
   b578e:	4604      	mov	r4, r0
   b5790:	f7ff ffee 	bl	b5770 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5794:	4620      	mov	r0, r4
   b5796:	bd10      	pop	{r4, pc}
   b5798:	000c0170 	.word	0x000c0170

000b579c <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b579c:	b510      	push	{r4, lr}
   b579e:	4604      	mov	r4, r0
}
   b57a0:	f7ff fff2 	bl	b5788 <_ZN13sysStatusDataD1Ev>
   b57a4:	4620      	mov	r0, r4
   b57a6:	2168      	movs	r1, #104	; 0x68
   b57a8:	f7fe fc79 	bl	b409e <_ZdlPvj>
   b57ac:	4620      	mov	r0, r4
   b57ae:	bd10      	pop	{r4, pc}

000b57b0 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b57b0:	b510      	push	{r4, lr}
   b57b2:	4b03      	ldr	r3, [pc, #12]	; (b57c0 <_ZN17currentStatusDataD1Ev+0x10>)
   b57b4:	6003      	str	r3, [r0, #0]
   b57b6:	4604      	mov	r4, r0
   b57b8:	f7ff ffda 	bl	b5770 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b57bc:	4620      	mov	r0, r4
   b57be:	bd10      	pop	{r4, pc}
   b57c0:	000c019c 	.word	0x000c019c

000b57c4 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b57c4:	b510      	push	{r4, lr}
   b57c6:	4604      	mov	r4, r0
}
   b57c8:	f7ff fff2 	bl	b57b0 <_ZN17currentStatusDataD1Ev>
   b57cc:	4620      	mov	r0, r4
   b57ce:	2178      	movs	r1, #120	; 0x78
   b57d0:	f7fe fc65 	bl	b409e <_ZdlPvj>
   b57d4:	4620      	mov	r0, r4
   b57d6:	bd10      	pop	{r4, pc}

000b57d8 <_ZN10nodeIDDataD1Ev>:

nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {

};

nodeIDData::~nodeIDData() {
   b57d8:	b510      	push	{r4, lr}
   b57da:	4b03      	ldr	r3, [pc, #12]	; (b57e8 <_ZN10nodeIDDataD1Ev+0x10>)
   b57dc:	6003      	str	r3, [r0, #0]
   b57de:	4604      	mov	r4, r0
   b57e0:	f7ff ffc6 	bl	b5770 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b57e4:	4620      	mov	r0, r4
   b57e6:	bd10      	pop	{r4, pc}
   b57e8:	000c0144 	.word	0x000c0144

000b57ec <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b57ec:	b510      	push	{r4, lr}
   b57ee:	4604      	mov	r4, r0
}
   b57f0:	f7ff fff2 	bl	b57d8 <_ZN10nodeIDDataD1Ev>
   b57f4:	4620      	mov	r0, r4
   b57f6:	21b0      	movs	r1, #176	; 0xb0
   b57f8:	f7fe fc51 	bl	b409e <_ZdlPvj>
   b57fc:	4620      	mov	r0, r4
   b57fe:	bd10      	pop	{r4, pc}

000b5800 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5800:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5804:	6081      	str	r1, [r0, #8]
   b5806:	4909      	ldr	r1, [pc, #36]	; (b582c <_ZN13sysStatusDataC1Ev+0x2c>)
   b5808:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b580c:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5810:	2101      	movs	r1, #1
   b5812:	8281      	strh	r1, [r0, #20]
   b5814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5818:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b581a:	4905      	ldr	r1, [pc, #20]	; (b5830 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b581c:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b581e:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5822:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5824:	6182      	str	r2, [r0, #24]
   b5826:	4a03      	ldr	r2, [pc, #12]	; (b5834 <_ZN13sysStatusDataC1Ev+0x34>)
   b5828:	6002      	str	r2, [r0, #0]
};
   b582a:	4770      	bx	lr
   b582c:	20a99e74 	.word	0x20a99e74
   b5830:	2003e3e8 	.word	0x2003e3e8
   b5834:	000c0170 	.word	0x000c0170

000b5838 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5838:	b510      	push	{r4, lr}
    if (!_instance) {
   b583a:	4c06      	ldr	r4, [pc, #24]	; (b5854 <_ZN13sysStatusData8instanceEv+0x1c>)
   b583c:	6823      	ldr	r3, [r4, #0]
   b583e:	b93b      	cbnz	r3, b5850 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5840:	2068      	movs	r0, #104	; 0x68
   b5842:	f7fe fc28 	bl	b4096 <_Znwj>
   b5846:	4603      	mov	r3, r0
   b5848:	b108      	cbz	r0, b584e <_ZN13sysStatusData8instanceEv+0x16>
   b584a:	f7ff ffd9 	bl	b5800 <_ZN13sysStatusDataC1Ev>
   b584e:	6023      	str	r3, [r4, #0]
}
   b5850:	6820      	ldr	r0, [r4, #0]
   b5852:	bd10      	pop	{r4, pc}
   b5854:	2003e3e0 	.word	0x2003e3e0

000b5858 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5858:	b508      	push	{r3, lr}
    fram.begin();
   b585a:	6a00      	ldr	r0, [r0, #32]
   b585c:	f002 fc8e 	bl	b817c <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5860:	f7ff ffea 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b5864:	6803      	ldr	r3, [r0, #0]
   b5866:	685b      	ldr	r3, [r3, #4]
   b5868:	4798      	blx	r3
}
   b586a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setGatewayConfiguration();                             // Here we will fix the settings specific to the node
   b586e:	f005 ba11 	b.w	bac94 <_Z23setGatewayConfigurationv>

000b5872 <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b5872:	b510      	push	{r4, lr}
    fram.begin();
   b5874:	6a00      	ldr	r0, [r0, #32]
   b5876:	f002 fc81 	bl	b817c <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b587a:	f7ff ffdd 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b587e:	6803      	ldr	r3, [r0, #0]
}
   b5880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5884:	685b      	ldr	r3, [r3, #4]
   b5886:	4718      	bx	r3

000b5888 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5888:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b588a:	f7ff ffd5 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b588e:	6803      	ldr	r3, [r0, #0]
}
   b5890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5894:	68db      	ldr	r3, [r3, #12]
   b5896:	2100      	movs	r1, #0
   b5898:	4718      	bx	r3
	...

000b589c <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b589c:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b589e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b58a2:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b58a4:	6182      	str	r2, [r0, #24]
   b58a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b58aa:	6081      	str	r1, [r0, #8]
   b58ac:	61c2      	str	r2, [r0, #28]
   b58ae:	4907      	ldr	r1, [pc, #28]	; (b58cc <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b58b0:	4a07      	ldr	r2, [pc, #28]	; (b58d0 <_ZN17currentStatusDataC1Ev+0x34>)
   b58b2:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b58b4:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b58b8:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b58ba:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b58be:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b58c0:	2101      	movs	r1, #1
   b58c2:	4a04      	ldr	r2, [pc, #16]	; (b58d4 <_ZN17currentStatusDataC1Ev+0x38>)
   b58c4:	8281      	strh	r1, [r0, #20]
   b58c6:	6002      	str	r2, [r0, #0]
};
   b58c8:	4770      	bx	lr
   b58ca:	bf00      	nop
   b58cc:	20a99e74 	.word	0x20a99e74
   b58d0:	2003e3e8 	.word	0x2003e3e8
   b58d4:	000c019c 	.word	0x000c019c

000b58d8 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b58d8:	b510      	push	{r4, lr}
    if (!_instance) {
   b58da:	4c06      	ldr	r4, [pc, #24]	; (b58f4 <_ZN17currentStatusData8instanceEv+0x1c>)
   b58dc:	6823      	ldr	r3, [r4, #0]
   b58de:	b93b      	cbnz	r3, b58f0 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b58e0:	2078      	movs	r0, #120	; 0x78
   b58e2:	f7fe fbd8 	bl	b4096 <_Znwj>
   b58e6:	4603      	mov	r3, r0
   b58e8:	b108      	cbz	r0, b58ee <_ZN17currentStatusData8instanceEv+0x16>
   b58ea:	f7ff ffd7 	bl	b589c <_ZN17currentStatusDataC1Ev>
   b58ee:	6023      	str	r3, [r4, #0]
}
   b58f0:	6820      	ldr	r0, [r4, #0]
   b58f2:	bd10      	pop	{r4, pc}
   b58f4:	2003e3e4 	.word	0x2003e3e4

000b58f8 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b58f8:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b58fa:	f7ff ff9d 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b58fe:	6803      	ldr	r3, [r0, #0]
}
   b5900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5904:	68db      	ldr	r3, [r3, #12]
   b5906:	2100      	movs	r1, #0
   b5908:	4718      	bx	r3
   b590a:	0000      	movs	r0, r0
   b590c:	0000      	movs	r0, r0
	...

000b5910 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b5910:	b510      	push	{r4, lr}
   b5912:	4604      	mov	r4, r0
   b5914:	ed2d 8b02 	vpush	{d8}
   b5918:	3004      	adds	r0, #4
   b591a:	f7ff fef1 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b591e:	68e3      	ldr	r3, [r4, #12]
   b5920:	3b08      	subs	r3, #8
   b5922:	2b17      	cmp	r3, #23
   b5924:	d90c      	bls.n	b5940 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5926:	68a3      	ldr	r3, [r4, #8]
   b5928:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b592c:	6860      	ldr	r0, [r4, #4]
   b592e:	f005 fa1f 	bl	bad70 <os_mutex_recursive_unlock>
}
   b5932:	eeb0 0a48 	vmov.f32	s0, s16
   b5936:	eef0 0a68 	vmov.f32	s1, s17
   b593a:	ecbd 8b02 	vpop	{d8}
   b593e:	bd10      	pop	{r4, pc}
            T result = 0;
   b5940:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5948 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5944:	e7f2      	b.n	b592c <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5946:	bf00      	nop
	...

000b5950 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b5950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5952:	4604      	mov	r4, r0
   b5954:	3004      	adds	r0, #4
   b5956:	ec57 6b10 	vmov	r6, r7, d0
   b595a:	f7ff fed1 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b595e:	68e3      	ldr	r3, [r4, #12]
   b5960:	3b08      	subs	r3, #8
   b5962:	2b17      	cmp	r3, #23
   b5964:	d912      	bls.n	b598c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5966:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5968:	4630      	mov	r0, r6
   b596a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b596e:	4639      	mov	r1, r7
   b5970:	f009 fc16 	bl	bf1a0 <__aeabi_dcmpeq>
   b5974:	b950      	cbnz	r0, b598c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5976:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b597a:	4620      	mov	r0, r4
   b597c:	68a5      	ldr	r5, [r4, #8]
   b597e:	f005 f8d9 	bl	bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5982:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5984:	6823      	ldr	r3, [r4, #0]
   b5986:	4620      	mov	r0, r4
   b5988:	691b      	ldr	r3, [r3, #16]
   b598a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b598c:	6860      	ldr	r0, [r4, #4]
}
   b598e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5992:	f005 b9ed 	b.w	bad70 <os_mutex_recursive_unlock>
	...

000b5998 <_ZN10nodeIDDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5998:	2200      	movs	r2, #0
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b599a:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b599e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b59a0:	6182      	str	r2, [r0, #24]
   b59a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b59a6:	6081      	str	r1, [r0, #8]
   b59a8:	61c2      	str	r2, [r0, #28]
   b59aa:	4907      	ldr	r1, [pc, #28]	; (b59c8 <_ZN10nodeIDDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b59ac:	4a07      	ldr	r2, [pc, #28]	; (b59cc <_ZN10nodeIDDataC1Ev+0x34>)
   b59ae:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b59b0:	f04f 0c88 	mov.w	ip, #136	; 0x88
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b59b4:	2296      	movs	r2, #150	; 0x96
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b59b6:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b59ba:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b59bc:	2101      	movs	r1, #1
   b59be:	4a04      	ldr	r2, [pc, #16]	; (b59d0 <_ZN10nodeIDDataC1Ev+0x38>)
   b59c0:	8281      	strh	r1, [r0, #20]
   b59c2:	6002      	str	r2, [r0, #0]
};
   b59c4:	4770      	bx	lr
   b59c6:	bf00      	nop
   b59c8:	20a99e74 	.word	0x20a99e74
   b59cc:	2003e3e8 	.word	0x2003e3e8
   b59d0:	000c0144 	.word	0x000c0144

000b59d4 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b59d4:	b510      	push	{r4, lr}
    if (!_instance) {
   b59d6:	4c06      	ldr	r4, [pc, #24]	; (b59f0 <_ZN10nodeIDData8instanceEv+0x1c>)
   b59d8:	6823      	ldr	r3, [r4, #0]
   b59da:	b93b      	cbnz	r3, b59ec <_ZN10nodeIDData8instanceEv+0x18>
        _instance = new nodeIDData();
   b59dc:	20b0      	movs	r0, #176	; 0xb0
   b59de:	f7fe fb5a 	bl	b4096 <_Znwj>
   b59e2:	4603      	mov	r3, r0
   b59e4:	b108      	cbz	r0, b59ea <_ZN10nodeIDData8instanceEv+0x16>
   b59e6:	f7ff ffd7 	bl	b5998 <_ZN10nodeIDDataC1Ev>
   b59ea:	6023      	str	r3, [r4, #0]
}
   b59ec:	6820      	ldr	r0, [r4, #0]
   b59ee:	bd10      	pop	{r4, pc}
   b59f0:	2003e3dc 	.word	0x2003e3dc

000b59f4 <_ZN10nodeIDData5setupEv>:

void nodeIDData::setup() {
   b59f4:	b510      	push	{r4, lr}
    fram.begin();
   b59f6:	6a00      	ldr	r0, [r0, #32]
   b59f8:	f002 fbc0 	bl	b817c <_ZN6MB85RC5beginEv>
    nodeID.load();
   b59fc:	f7ff ffea 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5a00:	6803      	ldr	r3, [r0, #0]
}
   b5a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.load();
   b5a06:	685b      	ldr	r3, [r3, #4]
   b5a08:	4718      	bx	r3

000b5a0a <_ZN10nodeIDData4loopEv>:

void nodeIDData::loop() {
   b5a0a:	b510      	push	{r4, lr}
    nodeID.flush(false);
   b5a0c:	f7ff ffe2 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5a10:	6803      	ldr	r3, [r0, #0]
}
   b5a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.flush(false);
   b5a16:	68db      	ldr	r3, [r3, #12]
   b5a18:	2100      	movs	r1, #0
   b5a1a:	4718      	bx	r3

000b5a1c <_ZNK10nodeIDData14get_deviceID_1Ev>:

void nodeIDData::set_nodeNumber_1(uint8_t value) {
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_1), value);
}

String nodeIDData::get_deviceID_1() const {
   b5a1c:	b538      	push	{r3, r4, r5, lr}
   b5a1e:	4604      	mov	r4, r0
   b5a20:	460d      	mov	r5, r1
	String result;
   b5a22:	4905      	ldr	r1, [pc, #20]	; (b5a38 <_ZNK10nodeIDData14get_deviceID_1Ev+0x1c>)
   b5a24:	f008 f92d 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, deviceID_1), sizeof(NodeData::deviceID_1), result);
   b5a28:	4623      	mov	r3, r4
   b5a2a:	2219      	movs	r2, #25
   b5a2c:	2110      	movs	r1, #16
   b5a2e:	4628      	mov	r0, r5
   b5a30:	f005 f827 	bl	baa82 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5a34:	4620      	mov	r0, r4
   b5a36:	bd38      	pop	{r3, r4, r5, pc}
   b5a38:	000c10a4 	.word	0x000c10a4

000b5a3c <_ZN10nodeIDData14set_deviceID_1EPKc>:

bool nodeIDData::set_deviceID_1(const char *str) {
   b5a3c:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, deviceID_1), sizeof(NodeData::deviceID_1), str);
   b5a3e:	2219      	movs	r2, #25
   b5a40:	2110      	movs	r1, #16
   b5a42:	f005 b88f 	b.w	bab64 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>
	...

000b5a48 <_ZNK10nodeIDData14get_deviceID_2Ev>:

void nodeIDData::set_nodeNumber_2(uint8_t value) {
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_2), value);
}

String nodeIDData::get_deviceID_2() const {
   b5a48:	b538      	push	{r3, r4, r5, lr}
   b5a4a:	4604      	mov	r4, r0
   b5a4c:	460d      	mov	r5, r1
	String result;
   b5a4e:	4905      	ldr	r1, [pc, #20]	; (b5a64 <_ZNK10nodeIDData14get_deviceID_2Ev+0x1c>)
   b5a50:	f008 f917 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, deviceID_2), sizeof(NodeData::deviceID_2), result);
   b5a54:	4623      	mov	r3, r4
   b5a56:	2219      	movs	r2, #25
   b5a58:	2138      	movs	r1, #56	; 0x38
   b5a5a:	4628      	mov	r0, r5
   b5a5c:	f005 f811 	bl	baa82 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5a60:	4620      	mov	r0, r4
   b5a62:	bd38      	pop	{r3, r4, r5, pc}
   b5a64:	000c10a4 	.word	0x000c10a4

000b5a68 <_ZN10nodeIDData14set_deviceID_2EPKc>:

bool nodeIDData::set_deviceID_2(const char *str) {
   b5a68:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, deviceID_2), sizeof(NodeData::deviceID_2), str);
   b5a6a:	2219      	movs	r2, #25
   b5a6c:	2138      	movs	r1, #56	; 0x38
   b5a6e:	f005 b879 	b.w	bab64 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>
	...

000b5a74 <_ZNK10nodeIDData14get_deviceID_3Ev>:

void nodeIDData::set_nodeNumber_3(uint8_t value) {
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_3), value);
}

String nodeIDData::get_deviceID_3() const {
   b5a74:	b538      	push	{r3, r4, r5, lr}
   b5a76:	4604      	mov	r4, r0
   b5a78:	460d      	mov	r5, r1
	String result;
   b5a7a:	4905      	ldr	r1, [pc, #20]	; (b5a90 <_ZNK10nodeIDData14get_deviceID_3Ev+0x1c>)
   b5a7c:	f008 f901 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, deviceID_3), sizeof(NodeData::deviceID_3), result);
   b5a80:	4623      	mov	r3, r4
   b5a82:	2219      	movs	r2, #25
   b5a84:	2160      	movs	r1, #96	; 0x60
   b5a86:	4628      	mov	r0, r5
   b5a88:	f004 fffb 	bl	baa82 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5a8c:	4620      	mov	r0, r4
   b5a8e:	bd38      	pop	{r3, r4, r5, pc}
   b5a90:	000c10a4 	.word	0x000c10a4

000b5a94 <_ZN10nodeIDData14set_deviceID_3EPKc>:

bool nodeIDData::set_deviceID_3(const char *str) {
   b5a94:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, deviceID_3), sizeof(NodeData::deviceID_3), str);
   b5a96:	2219      	movs	r2, #25
   b5a98:	2160      	movs	r1, #96	; 0x60
   b5a9a:	f005 b863 	b.w	bab64 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5a9e:	b538      	push	{r3, r4, r5, lr}
   b5aa0:	4604      	mov	r4, r0
   b5aa2:	3004      	adds	r0, #4
   b5aa4:	460d      	mov	r5, r1
   b5aa6:	f7ff fe2b 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5aaa:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5aac:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5aae:	3b01      	subs	r3, #1
   b5ab0:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5ab2:	bf26      	itte	cs
   b5ab4:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5ab6:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5ab8:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5aba:	f005 f959 	bl	bad70 <os_mutex_recursive_unlock>
        }
   b5abe:	4628      	mov	r0, r5
   b5ac0:	bd38      	pop	{r3, r4, r5, pc}

000b5ac2 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5ac2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5ac4:	2110      	movs	r1, #16
   b5ac6:	f7ff ffea 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5aca:	bd08      	pop	{r3, pc}

000b5acc <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5acc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5ace:	2117      	movs	r1, #23
   b5ad0:	f7ff ffe5 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ad4:	bd08      	pop	{r3, pc}

000b5ad6 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b5ad6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b5ad8:	2110      	movs	r1, #16
   b5ada:	f7ff ffe0 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ade:	bd08      	pop	{r3, pc}

000b5ae0 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b5ae0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b5ae2:	2111      	movs	r1, #17
   b5ae4:	f7ff ffdb 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ae8:	bd08      	pop	{r3, pc}

000b5aea <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5aea:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5aec:	2112      	movs	r1, #18
   b5aee:	f7ff ffd6 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5af2:	bd08      	pop	{r3, pc}

000b5af4 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5af4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5af6:	2120      	movs	r1, #32
   b5af8:	f7ff ffd1 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5afc:	bd08      	pop	{r3, pc}

000b5afe <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b5afe:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b5b00:	2134      	movs	r1, #52	; 0x34
   b5b02:	f7ff ffcc 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5b06:	bd08      	pop	{r3, pc}

000b5b08 <_ZNK10nodeIDData16get_nodeNumber_1Ev>:
uint8_t nodeIDData::get_nodeNumber_1() const {
   b5b08:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, nodeNumber_1));
   b5b0a:	2129      	movs	r1, #41	; 0x29
   b5b0c:	f7ff ffc7 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5b10:	bd08      	pop	{r3, pc}

000b5b12 <_ZNK10nodeIDData16get_nodeNumber_2Ev>:
uint8_t nodeIDData::get_nodeNumber_2() const {
   b5b12:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, nodeNumber_2));
   b5b14:	2151      	movs	r1, #81	; 0x51
   b5b16:	f7ff ffc2 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5b1a:	bd08      	pop	{r3, pc}

000b5b1c <_ZNK10nodeIDData16get_nodeNumber_3Ev>:
uint8_t nodeIDData::get_nodeNumber_3() const {
   b5b1c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, nodeNumber_3));
   b5b1e:	2179      	movs	r1, #121	; 0x79
   b5b20:	f7ff ffbd 	bl	b5a9e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5b24:	bd08      	pop	{r3, pc}

000b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5b26:	b570      	push	{r4, r5, r6, lr}
   b5b28:	4604      	mov	r4, r0
   b5b2a:	3004      	adds	r0, #4
   b5b2c:	460d      	mov	r5, r1
   b5b2e:	4616      	mov	r6, r2
   b5b30:	f7ff fde6 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b34:	68e3      	ldr	r3, [r4, #12]
   b5b36:	3b01      	subs	r3, #1
   b5b38:	42ab      	cmp	r3, r5
   b5b3a:	d30d      	bcc.n	b5b58 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5b3c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5b3e:	5d5a      	ldrb	r2, [r3, r5]
   b5b40:	42b2      	cmp	r2, r6
   b5b42:	d009      	beq.n	b5b58 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5b44:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5b46:	4620      	mov	r0, r4
   b5b48:	68a5      	ldr	r5, [r4, #8]
   b5b4a:	f004 fff3 	bl	bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5b4e:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5b50:	6823      	ldr	r3, [r4, #0]
   b5b52:	4620      	mov	r0, r4
   b5b54:	691b      	ldr	r3, [r3, #16]
   b5b56:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5b58:	6860      	ldr	r0, [r4, #4]
        }
   b5b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5b5e:	f005 b907 	b.w	bad70 <os_mutex_recursive_unlock>

000b5b62 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b5b62:	b508      	push	{r3, lr}
   b5b64:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b5b66:	2110      	movs	r1, #16
   b5b68:	f7ff ffdd 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b6c:	bd08      	pop	{r3, pc}

000b5b6e <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5b6e:	b508      	push	{r3, lr}
   b5b70:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5b72:	2117      	movs	r1, #23
   b5b74:	f7ff ffd7 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b78:	bd08      	pop	{r3, pc}

000b5b7a <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b5b7a:	b508      	push	{r3, lr}
   b5b7c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b5b7e:	2110      	movs	r1, #16
   b5b80:	f7ff ffd1 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b84:	bd08      	pop	{r3, pc}

000b5b86 <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b5b86:	b508      	push	{r3, lr}
   b5b88:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b5b8a:	2111      	movs	r1, #17
   b5b8c:	f7ff ffcb 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b90:	bd08      	pop	{r3, pc}

000b5b92 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5b92:	b508      	push	{r3, lr}
   b5b94:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5b96:	2112      	movs	r1, #18
   b5b98:	f7ff ffc5 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b9c:	bd08      	pop	{r3, pc}

000b5b9e <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5b9e:	b508      	push	{r3, lr}
   b5ba0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5ba2:	2120      	movs	r1, #32
   b5ba4:	f7ff ffbf 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ba8:	bd08      	pop	{r3, pc}

000b5baa <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b5baa:	b508      	push	{r3, lr}
   b5bac:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b5bae:	2130      	movs	r1, #48	; 0x30
   b5bb0:	f7ff ffb9 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5bb4:	bd08      	pop	{r3, pc}

000b5bb6 <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b5bb6:	b508      	push	{r3, lr}
   b5bb8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b5bba:	2134      	movs	r1, #52	; 0x34
   b5bbc:	f7ff ffb3 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5bc0:	bd08      	pop	{r3, pc}

000b5bc2 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5bc2:	b508      	push	{r3, lr}
   b5bc4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b5bc6:	2144      	movs	r1, #68	; 0x44
   b5bc8:	f7ff ffad 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5bcc:	bd08      	pop	{r3, pc}

000b5bce <_ZN10nodeIDData16set_nodeNumber_1Eh>:
void nodeIDData::set_nodeNumber_1(uint8_t value) {
   b5bce:	b508      	push	{r3, lr}
   b5bd0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_1), value);
   b5bd2:	2129      	movs	r1, #41	; 0x29
   b5bd4:	f7ff ffa7 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5bd8:	bd08      	pop	{r3, pc}

000b5bda <_ZN10nodeIDData16set_nodeNumber_2Eh>:
void nodeIDData::set_nodeNumber_2(uint8_t value) {
   b5bda:	b508      	push	{r3, lr}
   b5bdc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_2), value);
   b5bde:	2151      	movs	r1, #81	; 0x51
   b5be0:	f7ff ffa1 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5be4:	bd08      	pop	{r3, pc}

000b5be6 <_ZN10nodeIDData16set_nodeNumber_3Eh>:
void nodeIDData::set_nodeNumber_3(uint8_t value) {
   b5be6:	b508      	push	{r3, lr}
   b5be8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_3), value);
   b5bea:	2179      	movs	r1, #121	; 0x79
   b5bec:	f7ff ff9b 	bl	b5b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5bf0:	bd08      	pop	{r3, pc}

000b5bf2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5bf2:	b538      	push	{r3, r4, r5, lr}
   b5bf4:	4604      	mov	r4, r0
   b5bf6:	3004      	adds	r0, #4
   b5bf8:	460d      	mov	r5, r1
   b5bfa:	f7ff fd81 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5bfe:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5c00:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c02:	3b02      	subs	r3, #2
   b5c04:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5c06:	bf26      	itte	cs
   b5c08:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5c0a:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5c0c:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5c0e:	f005 f8af 	bl	bad70 <os_mutex_recursive_unlock>
        }
   b5c12:	4628      	mov	r0, r5
   b5c14:	bd38      	pop	{r3, r4, r5, pc}

000b5c16 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b5c16:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b5c18:	2112      	movs	r1, #18
   b5c1a:	f7ff ffea 	bl	b5bf2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5c1e:	bd08      	pop	{r3, pc}

000b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b5c20:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5c22:	212a      	movs	r1, #42	; 0x2a
   b5c24:	f7ff ffe5 	bl	b5bf2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5c28:	bd08      	pop	{r3, pc}

000b5c2a <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b5c2a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b5c2c:	2132      	movs	r1, #50	; 0x32
   b5c2e:	f7ff ffe0 	bl	b5bf2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5c32:	bd08      	pop	{r3, pc}

000b5c34 <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b5c34:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5c36:	2140      	movs	r1, #64	; 0x40
   b5c38:	f7ff ffdb 	bl	b5bf2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5c3c:	bd08      	pop	{r3, pc}

000b5c3e <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b5c3e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b5c40:	2142      	movs	r1, #66	; 0x42
   b5c42:	f7ff ffd6 	bl	b5bf2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5c46:	bd08      	pop	{r3, pc}

000b5c48 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5c48:	b570      	push	{r4, r5, r6, lr}
   b5c4a:	4604      	mov	r4, r0
   b5c4c:	3004      	adds	r0, #4
   b5c4e:	460d      	mov	r5, r1
   b5c50:	4616      	mov	r6, r2
   b5c52:	f7ff fd55 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c56:	68e3      	ldr	r3, [r4, #12]
   b5c58:	3b02      	subs	r3, #2
   b5c5a:	42ab      	cmp	r3, r5
   b5c5c:	d30d      	bcc.n	b5c7a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5c5e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5c60:	5b5a      	ldrh	r2, [r3, r5]
   b5c62:	42b2      	cmp	r2, r6
   b5c64:	d009      	beq.n	b5c7a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b5c66:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5c68:	4620      	mov	r0, r4
   b5c6a:	68a5      	ldr	r5, [r4, #8]
   b5c6c:	f004 ff62 	bl	bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5c70:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5c72:	6823      	ldr	r3, [r4, #0]
   b5c74:	4620      	mov	r0, r4
   b5c76:	691b      	ldr	r3, [r3, #16]
   b5c78:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5c7a:	6860      	ldr	r0, [r4, #4]
        }
   b5c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5c80:	f005 b876 	b.w	bad70 <os_mutex_recursive_unlock>

000b5c84 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b5c84:	b508      	push	{r3, lr}
   b5c86:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b5c88:	212a      	movs	r1, #42	; 0x2a
   b5c8a:	f7ff ffdd 	bl	b5c48 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5c8e:	bd08      	pop	{r3, pc}

000b5c90 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b5c90:	b508      	push	{r3, lr}
   b5c92:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b5c94:	2132      	movs	r1, #50	; 0x32
   b5c96:	f7ff ffd7 	bl	b5c48 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5c9a:	bd08      	pop	{r3, pc}

000b5c9c <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b5ca0:	2140      	movs	r1, #64	; 0x40
   b5ca2:	f7ff ffd1 	bl	b5c48 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5ca6:	bd08      	pop	{r3, pc}

000b5ca8 <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b5ca8:	b508      	push	{r3, lr}
   b5caa:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5cac:	2142      	movs	r1, #66	; 0x42
   b5cae:	f7ff ffcb 	bl	b5c48 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5cb2:	bd08      	pop	{r3, pc}

000b5cb4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b5cb4:	b538      	push	{r3, r4, r5, lr}
   b5cb6:	4604      	mov	r4, r0
   b5cb8:	3004      	adds	r0, #4
   b5cba:	460d      	mov	r5, r1
   b5cbc:	f7ff fd20 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5cc0:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5cc2:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5cc4:	3b01      	subs	r3, #1
   b5cc6:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5cc8:	bf26      	itte	cs
   b5cca:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5ccc:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5cce:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5cd0:	f005 f84e 	bl	bad70 <os_mutex_recursive_unlock>
        }
   b5cd4:	4628      	mov	r0, r5
   b5cd6:	bd38      	pop	{r3, r4, r5, pc}

000b5cd8 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b5cd8:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b5cda:	2116      	movs	r1, #22
   b5cdc:	f7ff ffea 	bl	b5cb4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5ce0:	bd08      	pop	{r3, pc}

000b5ce2 <_ZNK13sysStatusData14get_verizonSIMEv>:
bool sysStatusData::get_verizonSIM() const {
   b5ce2:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, verizonSIM));
   b5ce4:	213b      	movs	r1, #59	; 0x3b
   b5ce6:	f7ff ffe5 	bl	b5cb4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5cea:	bd08      	pop	{r3, pc}

000b5cec <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5cec:	b570      	push	{r4, r5, r6, lr}
   b5cee:	4604      	mov	r4, r0
   b5cf0:	3004      	adds	r0, #4
   b5cf2:	460d      	mov	r5, r1
   b5cf4:	4616      	mov	r6, r2
   b5cf6:	f7ff fd03 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5cfa:	68e3      	ldr	r3, [r4, #12]
   b5cfc:	3b01      	subs	r3, #1
   b5cfe:	42ab      	cmp	r3, r5
   b5d00:	d30d      	bcc.n	b5d1e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5d02:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5d04:	5d5a      	ldrb	r2, [r3, r5]
   b5d06:	42b2      	cmp	r2, r6
   b5d08:	d009      	beq.n	b5d1e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b5d0a:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	68a5      	ldr	r5, [r4, #8]
   b5d10:	f004 ff10 	bl	bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5d14:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5d16:	6823      	ldr	r3, [r4, #0]
   b5d18:	4620      	mov	r0, r4
   b5d1a:	691b      	ldr	r3, [r3, #16]
   b5d1c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5d1e:	6860      	ldr	r0, [r4, #4]
        }
   b5d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5d24:	f005 b824 	b.w	bad70 <os_mutex_recursive_unlock>

000b5d28 <_ZN13sysStatusData16set_lowPowerModeEb>:
void sysStatusData::set_lowPowerMode(bool value) {
   b5d28:	b508      	push	{r3, lr}
   b5d2a:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowPowerMode), value);
   b5d2c:	2116      	movs	r1, #22
   b5d2e:	f7ff ffdd 	bl	b5cec <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5d32:	bd08      	pop	{r3, pc}

000b5d34 <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b5d34:	b508      	push	{r3, lr}
   b5d36:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b5d38:	2138      	movs	r1, #56	; 0x38
   b5d3a:	f7ff ffd7 	bl	b5cec <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5d3e:	bd08      	pop	{r3, pc}

000b5d40 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b5d40:	b508      	push	{r3, lr}
   b5d42:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b5d44:	213b      	movs	r1, #59	; 0x3b
   b5d46:	f7ff ffd1 	bl	b5cec <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5d4a:	bd08      	pop	{r3, pc}

000b5d4c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b5d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d4e:	4604      	mov	r4, r0
   b5d50:	3004      	adds	r0, #4
   b5d52:	460d      	mov	r5, r1
   b5d54:	f7ff fcd4 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d58:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5d5a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d5c:	3b08      	subs	r3, #8
   b5d5e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5d60:	bf23      	ittte	cs
   b5d62:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5d64:	1949      	addcs	r1, r1, r5
   b5d66:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b5d6a:	2600      	movcc	r6, #0
   b5d6c:	bf38      	it	cc
   b5d6e:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5d70:	f004 fffe 	bl	bad70 <os_mutex_recursive_unlock>
        }
   b5d74:	4630      	mov	r0, r6
   b5d76:	4639      	mov	r1, r7
   b5d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d7a <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b5d7a:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b5d7c:	2120      	movs	r1, #32
   b5d7e:	f7ff ffe5 	bl	b5d4c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5d82:	bd08      	pop	{r3, pc}

000b5d84 <_ZNK10nodeIDData20get_lastConnection_1Ev>:
time_t nodeIDData::get_lastConnection_1() const {
   b5d84:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(NodeData, lastConnection_1));
   b5d86:	2130      	movs	r1, #48	; 0x30
   b5d88:	f7ff ffe0 	bl	b5d4c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5d8c:	bd08      	pop	{r3, pc}

000b5d8e <_ZNK10nodeIDData20get_lastConnection_2Ev>:
time_t nodeIDData::get_lastConnection_2() const {
   b5d8e:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(NodeData, lastConnection_2));
   b5d90:	2158      	movs	r1, #88	; 0x58
   b5d92:	f7ff ffdb 	bl	b5d4c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5d96:	bd08      	pop	{r3, pc}

000b5d98 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d9a:	4604      	mov	r4, r0
   b5d9c:	3004      	adds	r0, #4
   b5d9e:	460d      	mov	r5, r1
   b5da0:	461e      	mov	r6, r3
   b5da2:	4617      	mov	r7, r2
   b5da4:	f7ff fcac 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5da8:	68e3      	ldr	r3, [r4, #12]
   b5daa:	3b08      	subs	r3, #8
   b5dac:	42ab      	cmp	r3, r5
   b5dae:	d312      	bcc.n	b5dd6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5db0:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5db2:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5db4:	5958      	ldr	r0, [r3, r5]
   b5db6:	6851      	ldr	r1, [r2, #4]
   b5db8:	42b1      	cmp	r1, r6
   b5dba:	bf08      	it	eq
   b5dbc:	42b8      	cmpeq	r0, r7
   b5dbe:	d00a      	beq.n	b5dd6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5dc0:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5dc2:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5dc4:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b5dc6:	68a5      	ldr	r5, [r4, #8]
   b5dc8:	f004 feb4 	bl	bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5dcc:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5dce:	6823      	ldr	r3, [r4, #0]
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	691b      	ldr	r3, [r3, #16]
   b5dd4:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5dd6:	6860      	ldr	r0, [r4, #4]
        }
   b5dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5ddc:	f004 bfc8 	b.w	bad70 <os_mutex_recursive_unlock>

000b5de0 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5de0:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5de2:	2120      	movs	r1, #32
   b5de4:	f7ff ffd8 	bl	b5d98 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5de8:	bd08      	pop	{r3, pc}

000b5dea <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5dea:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5dec:	2138      	movs	r1, #56	; 0x38
   b5dee:	f7ff ffd3 	bl	b5d98 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5df2:	bd08      	pop	{r3, pc}

000b5df4 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b5df4:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b5df6:	2148      	movs	r1, #72	; 0x48
   b5df8:	f7ff ffce 	bl	b5d98 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5dfc:	bd08      	pop	{r3, pc}

000b5dfe <_ZN10nodeIDData20set_lastConnection_1Ex>:
void nodeIDData::set_lastConnection_1(time_t value) {
   b5dfe:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(NodeData, lastConnection_1), value);
   b5e00:	2130      	movs	r1, #48	; 0x30
   b5e02:	f7ff ffc9 	bl	b5d98 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5e06:	bd08      	pop	{r3, pc}

000b5e08 <_ZN10nodeIDData20set_lastConnection_2Ex>:
void nodeIDData::set_lastConnection_2(time_t value) {
   b5e08:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(NodeData, lastConnection_2), value);
   b5e0a:	2158      	movs	r1, #88	; 0x58
   b5e0c:	f7ff ffc4 	bl	b5d98 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5e10:	bd08      	pop	{r3, pc}

000b5e12 <_ZN10nodeIDData20set_lastConnection_3Ex>:

time_t nodeIDData::get_lastConnection_3() const {
    return getValue<time_t>(offsetof(NodeData, lastConnection_3));
}

void nodeIDData::set_lastConnection_3(time_t value) {
   b5e12:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(NodeData, lastConnection_3), value);
   b5e14:	2180      	movs	r1, #128	; 0x80
   b5e16:	f7ff ffbf 	bl	b5d98 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5e1a:	bd08      	pop	{r3, pc}

000b5e1c <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b5e1c:	b570      	push	{r4, r5, r6, lr}
  Log.info("A new day - resetting everything");
   b5e1e:	4d31      	ldr	r5, [pc, #196]	; (b5ee4 <_Z15resetEverythingv+0xc8>)
   b5e20:	4931      	ldr	r1, [pc, #196]	; (b5ee8 <_Z15resetEverythingv+0xcc>)
   b5e22:	4628      	mov	r0, r5
   b5e24:	f7fe f95a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b5e28:	f7ff fd56 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b5e2c:	2100      	movs	r1, #0
   b5e2e:	f7ff ff3b 	bl	b5ca8 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5e32:	f7ff fd51 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b5e36:	2100      	movs	r1, #0
   b5e38:	f7ff ff30 	bl	b5c9c <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b5e3c:	f7ff fd4c 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b5e40:	4604      	mov	r4, r0
   b5e42:	f008 fa72 	bl	be32a <_ZN9TimeClass3nowEv>
   b5e46:	4602      	mov	r2, r0
   b5e48:	17c3      	asrs	r3, r0, #31
   b5e4a:	4620      	mov	r0, r4
   b5e4c:	f7ff ffcd 	bl	b5dea <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_alertCodeNode(0);
   b5e50:	f7ff fd42 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b5e54:	2100      	movs	r1, #0
   b5e56:	f7ff feb4 	bl	b5bc2 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(Time.now());
   b5e5a:	f7ff fd3d 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b5e5e:	4604      	mov	r4, r0
   b5e60:	f008 fa63 	bl	be32a <_ZN9TimeClass3nowEv>
   b5e64:	4602      	mov	r2, r0
   b5e66:	17c3      	asrs	r3, r0, #31
   b5e68:	4620      	mov	r0, r4
   b5e6a:	f7ff ffc3 	bl	b5df4 <_ZN17currentStatusData22set_alertTimestampNodeEx>
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b5e6e:	f7ff fce3 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b5e72:	2100      	movs	r1, #0
   b5e74:	f7ff fe7b 	bl	b5b6e <_ZN13sysStatusData14set_resetCountEh>
  Log.info("clearing the nodeID data");
   b5e78:	491c      	ldr	r1, [pc, #112]	; (b5eec <_Z15resetEverythingv+0xd0>)
   b5e7a:	4628      	mov	r0, r5
   b5e7c:	f7fe f92e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  nodeID.set_nodeNumber_1(1);
   b5e80:	f7ff fda8 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5e84:	2101      	movs	r1, #1
   b5e86:	f7ff fea2 	bl	b5bce <_ZN10nodeIDData16set_nodeNumber_1Eh>
  nodeID.set_deviceID_1(0);
   b5e8a:	f7ff fda3 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5e8e:	2100      	movs	r1, #0
   b5e90:	f7ff fdd4 	bl	b5a3c <_ZN10nodeIDData14set_deviceID_1EPKc>
  nodeID.set_lastConnection_1(0);
   b5e94:	f7ff fd9e 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5e98:	2200      	movs	r2, #0
   b5e9a:	2300      	movs	r3, #0
   b5e9c:	f7ff ffaf 	bl	b5dfe <_ZN10nodeIDData20set_lastConnection_1Ex>
  nodeID.set_nodeNumber_2(2);
   b5ea0:	f7ff fd98 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5ea4:	2102      	movs	r1, #2
   b5ea6:	f7ff fe98 	bl	b5bda <_ZN10nodeIDData16set_nodeNumber_2Eh>
  nodeID.set_deviceID_2(0);
   b5eaa:	f7ff fd93 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5eae:	2100      	movs	r1, #0
   b5eb0:	f7ff fdda 	bl	b5a68 <_ZN10nodeIDData14set_deviceID_2EPKc>
  nodeID.set_lastConnection_2(0);
   b5eb4:	f7ff fd8e 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5eb8:	2200      	movs	r2, #0
   b5eba:	2300      	movs	r3, #0
   b5ebc:	f7ff ffa4 	bl	b5e08 <_ZN10nodeIDData20set_lastConnection_2Ex>
  nodeID.set_nodeNumber_3(3);
   b5ec0:	f7ff fd88 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5ec4:	2103      	movs	r1, #3
   b5ec6:	f7ff fe8e 	bl	b5be6 <_ZN10nodeIDData16set_nodeNumber_3Eh>
  nodeID.set_deviceID_3(0);
   b5eca:	f7ff fd83 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
   b5ece:	2100      	movs	r1, #0
   b5ed0:	f7ff fde0 	bl	b5a94 <_ZN10nodeIDData14set_deviceID_3EPKc>
  nodeID.set_lastConnection_3(0);
   b5ed4:	f7ff fd7e 	bl	b59d4 <_ZN10nodeIDData8instanceEv>
}
   b5ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  nodeID.set_lastConnection_3(0);
   b5edc:	2200      	movs	r2, #0
   b5ede:	2300      	movs	r3, #0
   b5ee0:	f7ff bf97 	b.w	b5e12 <_ZN10nodeIDData20set_lastConnection_3Ex>
   b5ee4:	2003e654 	.word	0x2003e654
   b5ee8:	000c00e3 	.word	0x000c00e3
   b5eec:	000c0104 	.word	0x000c0104

000b5ef0 <_GLOBAL__sub_I_fram>:
   b5ef0:	4b08      	ldr	r3, [pc, #32]	; (b5f14 <_GLOBAL__sub_I_fram+0x24>)
   b5ef2:	2201      	movs	r2, #1
}
   b5ef4:	b510      	push	{r4, lr}
   b5ef6:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b5ef8:	f008 fc98 	bl	be82c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5efc:	4c06      	ldr	r4, [pc, #24]	; (b5f18 <_GLOBAL__sub_I_fram+0x28>)
   b5efe:	4601      	mov	r1, r0
   b5f00:	2300      	movs	r3, #0
   b5f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5f06:	4620      	mov	r0, r4
   b5f08:	f002 f92e 	bl	b8168 <_ZN6MB85RCC1ER7TwoWireji>
   b5f0c:	4b03      	ldr	r3, [pc, #12]	; (b5f1c <_GLOBAL__sub_I_fram+0x2c>)
   b5f0e:	6023      	str	r3, [r4, #0]
}
   b5f10:	bd10      	pop	{r4, pc}
   b5f12:	bf00      	nop
   b5f14:	2003e3db 	.word	0x2003e3db
   b5f18:	2003e3e8 	.word	0x2003e3e8
   b5f1c:	000c0128 	.word	0x000c0128

000b5f20 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b5f20:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b5f22:	4913      	ldr	r1, [pc, #76]	; (b5f70 <_Z18initializePinModesv+0x50>)
   b5f24:	4813      	ldr	r0, [pc, #76]	; (b5f74 <_Z18initializePinModesv+0x54>)
   b5f26:	f7fe f8d9 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5f2a:	2102      	movs	r1, #2
   b5f2c:	2004      	movs	r0, #4
   b5f2e:	f008 fbfb 	bl	be728 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b5f32:	2100      	movs	r1, #0
   b5f34:	2008      	movs	r0, #8
   b5f36:	f008 fbf7 	bl	be728 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b5f3a:	2101      	movs	r1, #1
   b5f3c:	2007      	movs	r0, #7
   b5f3e:	f008 fbf3 	bl	be728 <pinMode>
    pinMode(INT_PIN, INPUT);
   b5f42:	2100      	movs	r1, #0
   b5f44:	2012      	movs	r0, #18
   b5f46:	f008 fbef 	bl	be728 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b5f4a:	2101      	movs	r1, #1
   b5f4c:	2011      	movs	r0, #17
   b5f4e:	f008 fbeb 	bl	be728 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b5f52:	2101      	movs	r1, #1
   b5f54:	2010      	movs	r0, #16
   b5f56:	f008 fbe7 	bl	be728 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b5f5a:	2100      	movs	r1, #0
   b5f5c:	2010      	movs	r0, #16
   b5f5e:	f008 fbf4 	bl	be74a <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b5f62:	2100      	movs	r1, #0
   b5f64:	2011      	movs	r0, #17
   b5f66:	f008 fbf0 	bl	be74a <digitalWrite>
    return true;
}
   b5f6a:	2001      	movs	r0, #1
   b5f6c:	bd08      	pop	{r3, pc}
   b5f6e:	bf00      	nop
   b5f70:	000c01c0 	.word	0x000c01c0
   b5f74:	2003e654 	.word	0x2003e654

000b5f78 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b5f78:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5f7a:	4918      	ldr	r1, [pc, #96]	; (b5fdc <_Z18initializePowerCfgv+0x64>)
   b5f7c:	4818      	ldr	r0, [pc, #96]	; (b5fe0 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b5f7e:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b5f80:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b5f82:	f7fe f8ab 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b5f86:	4622      	mov	r2, r4
   b5f88:	2100      	movs	r1, #0
   b5f8a:	4668      	mov	r0, sp
   b5f8c:	f009 fa12 	bl	bf3b4 <memset>
   b5f90:	4622      	mov	r2, r4
   b5f92:	2100      	movs	r1, #0
   b5f94:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5f98:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b5f9c:	f009 fa0a 	bl	bf3b4 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b5fa0:	2100      	movs	r1, #0
   b5fa2:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5fa6:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b5faa:	f005 f9cf 	bl	bb34c <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b5fae:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b5fb2:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b5fb6:	4b0b      	ldr	r3, [pc, #44]	; (b5fe4 <_Z18initializePowerCfgv+0x6c>)
   b5fb8:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b5fba:	f241 0370 	movw	r3, #4208	; 0x1070
   b5fbe:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b5fc2:	9b00      	ldr	r3, [sp, #0]
   b5fc4:	2100      	movs	r1, #0
   b5fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b5fca:	4668      	mov	r0, sp
   b5fcc:	9300      	str	r3, [sp, #0]
   b5fce:	f005 f9bd 	bl	bb34c <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b5fd2:	3800      	subs	r0, #0
   b5fd4:	bf18      	it	ne
   b5fd6:	2001      	movne	r0, #1
   b5fd8:	b010      	add	sp, #64	; 0x40
   b5fda:	bd10      	pop	{r4, pc}
   b5fdc:	000c01d9 	.word	0x000c01d9
   b5fe0:	2003e654 	.word	0x2003e654
   b5fe4:	03840384 	.word	0x03840384

000b5fe8 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b5fe8:	4770      	bx	lr

000b5fea <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b5fea:	6a00      	ldr	r0, [r0, #32]
   b5fec:	6803      	ldr	r3, [r0, #0]
   b5fee:	68db      	ldr	r3, [r3, #12]
   b5ff0:	4718      	bx	r3
	...

000b5ff4 <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b5ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5ff6:	4604      	mov	r4, r0
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.get_frequencyMinutes());
   b5ff8:	f7ff fc1e 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b5ffc:	f7ff fe10 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6000:	4a06      	ldr	r2, [pc, #24]	; (b601c <_Z15reportFrequencyv+0x28>)
   b6002:	4603      	mov	r3, r0
   b6004:	2110      	movs	r1, #16
   b6006:	4668      	mov	r0, sp
   b6008:	f005 faae 	bl	bb568 <snprintf>
    return reportStr;
   b600c:	4669      	mov	r1, sp
   b600e:	4620      	mov	r0, r4
   b6010:	f007 fe37 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b6014:	4620      	mov	r0, r4
   b6016:	b004      	add	sp, #16
   b6018:	bd10      	pop	{r4, pc}
   b601a:	bf00      	nop
   b601c:	000c01fe 	.word	0x000c01fe

000b6020 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6020:	b530      	push	{r4, r5, lr}
   b6022:	b085      	sub	sp, #20
   b6024:	4603      	mov	r3, r0
   b6026:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b6028:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b602a:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b602c:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b602e:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b6030:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b6032:	f005 fa71 	bl	bb518 <malloc>
   b6036:	6028      	str	r0, [r5, #0]
        if (!data) {
   b6038:	b150      	cbz	r0, b6050 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b603a:	6822      	ldr	r2, [r4, #0]
   b603c:	9900      	ldr	r1, [sp, #0]
   b603e:	f009 f991 	bl	bf364 <memcpy>
        return 0;
   b6042:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b6044:	4668      	mov	r0, sp
   b6046:	f007 fdd1 	bl	bdbec <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b604a:	4620      	mov	r0, r4
   b604c:	b005      	add	sp, #20
   b604e:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b6050:	4c00      	ldr	r4, [pc, #0]	; (b6054 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b6052:	e7f7      	b.n	b6044 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b6054:	fffffefc 	.word	0xfffffefc

000b6058 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b6058:	2300      	movs	r3, #0
   b605a:	2204      	movs	r2, #4
   b605c:	f005 b994 	b.w	bb388 <spark_variable>

000b6060 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b6060:	4b0a      	ldr	r3, [pc, #40]	; (b608c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b6062:	b510      	push	{r4, lr}
   b6064:	4604      	mov	r4, r0
   b6066:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6068:	f006 fc34 	bl	bc8d4 <_ZN5spark10LogManager8instanceEv>
   b606c:	4621      	mov	r1, r4
   b606e:	f006 fe38 	bl	bcce2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b6072:	f008 fa41 	bl	be4f8 <_Z16_fetch_usbserialv>
   b6076:	f008 fa31 	bl	be4dc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b607a:	4620      	mov	r0, r4
   b607c:	4b04      	ldr	r3, [pc, #16]	; (b6090 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b607e:	f840 3b04 	str.w	r3, [r0], #4
   b6082:	f006 fcc9 	bl	bca18 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b6086:	4620      	mov	r0, r4
   b6088:	bd10      	pop	{r4, pc}
   b608a:	bf00      	nop
   b608c:	000c04c4 	.word	0x000c04c4
   b6090:	000c04ac 	.word	0x000c04ac

000b6094 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6094:	b510      	push	{r4, lr}
   b6096:	4604      	mov	r4, r0
    }
   b6098:	f7ff ffe2 	bl	b6060 <_ZN5spark16SerialLogHandlerD1Ev>
   b609c:	4620      	mov	r0, r4
   b609e:	2124      	movs	r1, #36	; 0x24
   b60a0:	f7fd fffd 	bl	b409e <_ZdlPvj>
   b60a4:	4620      	mov	r0, r4
   b60a6:	bd10      	pop	{r4, pc}

000b60a8 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b60a8:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b60aa:	2301      	movs	r3, #1
   b60ac:	2208      	movs	r2, #8
   b60ae:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b60b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b60b6:	2300      	movs	r3, #0
   b60b8:	4341      	muls	r1, r0
   b60ba:	466a      	mov	r2, sp
   b60bc:	4618      	mov	r0, r3
   b60be:	f005 f9b3 	bl	bb428 <spark_set_connection_property>
    }
   b60c2:	b003      	add	sp, #12
   b60c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b60c8 <_Z18particleInitializev>:
 * @brief Initializes the Particle functions and variables
 * 
 * @details If new particles of functions are defined, they need to be initialized here
 * 
 */
void particleInitialize() {
   b60c8:	b510      	push	{r4, lr}
   b60ca:	b08c      	sub	sp, #48	; 0x30
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b60cc:	4b36      	ldr	r3, [pc, #216]	; (b61a8 <_Z18particleInitializev+0xe0>)
   b60ce:	9304      	str	r3, [sp, #16]
   b60d0:	4b36      	ldr	r3, [pc, #216]	; (b61ac <_Z18particleInitializev+0xe4>)
   b60d2:	9305      	str	r3, [sp, #20]
   b60d4:	4b36      	ldr	r3, [pc, #216]	; (b61b0 <_Z18particleInitializev+0xe8>)
   b60d6:	9306      	str	r3, [sp, #24]
   b60d8:	4b36      	ldr	r3, [pc, #216]	; (b61b4 <_Z18particleInitializev+0xec>)
   b60da:	9307      	str	r3, [sp, #28]
   b60dc:	4b36      	ldr	r3, [pc, #216]	; (b61b8 <_Z18particleInitializev+0xf0>)
   b60de:	9308      	str	r3, [sp, #32]
   b60e0:	4b36      	ldr	r3, [pc, #216]	; (b61bc <_Z18particleInitializev+0xf4>)

  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b60e2:	4937      	ldr	r1, [pc, #220]	; (b61c0 <_Z18particleInitializev+0xf8>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b60e4:	9309      	str	r3, [sp, #36]	; 0x24
   b60e6:	2400      	movs	r4, #0
   b60e8:	4b36      	ldr	r3, [pc, #216]	; (b61c4 <_Z18particleInitializev+0xfc>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b60ea:	4837      	ldr	r0, [pc, #220]	; (b61c8 <_Z18particleInitializev+0x100>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b60ec:	930a      	str	r3, [sp, #40]	; 0x28
   b60ee:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b60f0:	f7fd fff4 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  Particle.variable("Low Power Mode",(sysStatus.get_lowPowerMode()) ? "Yes" : "No");
   b60f4:	f7ff fba0 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b60f8:	f7ff fdee 	bl	b5cd8 <_ZNK13sysStatusData16get_lowPowerModeEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b60fc:	4a33      	ldr	r2, [pc, #204]	; (b61cc <_Z18particleInitializev+0x104>)
   b60fe:	4934      	ldr	r1, [pc, #208]	; (b61d0 <_Z18particleInitializev+0x108>)
   b6100:	42a0      	cmp	r0, r4
   b6102:	bf18      	it	ne
   b6104:	4611      	movne	r1, r2
   b6106:	4833      	ldr	r0, [pc, #204]	; (b61d4 <_Z18particleInitializev+0x10c>)
   b6108:	f7ff ffa6 	bl	b6058 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b610c:	4932      	ldr	r1, [pc, #200]	; (b61d8 <_Z18particleInitializev+0x110>)
   b610e:	4833      	ldr	r0, [pc, #204]	; (b61dc <_Z18particleInitializev+0x114>)
   b6110:	f7ff ffa2 	bl	b6058 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b6114:	4932      	ldr	r1, [pc, #200]	; (b61e0 <_Z18particleInitializev+0x118>)
   b6116:	4833      	ldr	r0, [pc, #204]	; (b61e4 <_Z18particleInitializev+0x11c>)
   b6118:	f7ff ff9e 	bl	b6058 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
  Particle.variable("Release",currentPointRelease);   
  Particle.variable("Signal", signalStr);
  Particle.variable("stateOfChg", current.get_stateOfCharge());
   b611c:	f7ff fbdc 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b6120:	f7ff fbf6 	bl	b5910 <_ZNK17currentStatusData17get_stateOfChargeEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b6124:	4623      	mov	r3, r4
   b6126:	2209      	movs	r2, #9
   b6128:	4669      	mov	r1, sp
   b612a:	482f      	ldr	r0, [pc, #188]	; (b61e8 <_Z18particleInitializev+0x120>)
   b612c:	ed8d 0b00 	vstr	d0, [sp]
   b6130:	f005 f92a 	bl	bb388 <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.get_batteryState()]);
   b6134:	f7ff fbd0 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b6138:	f7ff fcdc 	bl	b5af4 <_ZNK17currentStatusData16get_batteryStateEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b613c:	ab0c      	add	r3, sp, #48	; 0x30
   b613e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b6142:	f850 1c20 	ldr.w	r1, [r0, #-32]
   b6146:	4829      	ldr	r0, [pc, #164]	; (b61ec <_Z18particleInitializev+0x124>)
   b6148:	f7ff ff86 	bl	b6058 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        extra.size = sizeof(extra);
   b614c:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b614e:	e9cd 4400 	strd	r4, r4, [sp]
        extra.size = sizeof(extra);
   b6152:	f8ad 3000 	strh.w	r3, [sp]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6156:	4b26      	ldr	r3, [pc, #152]	; (b61f0 <_Z18particleInitializev+0x128>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b6158:	4926      	ldr	r1, [pc, #152]	; (b61f4 <_Z18particleInitializev+0x12c>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b615a:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b615c:	2204      	movs	r2, #4
   b615e:	466b      	mov	r3, sp
   b6160:	4825      	ldr	r0, [pc, #148]	; (b61f8 <_Z18particleInitializev+0x130>)
   b6162:	f005 f911 	bl	bb388 <spark_variable>
  Particle.variable("Reporting Frequency", reportFrequency);
  Particle.variable("SIM Card", (sysStatus.get_verizonSIM()) ? "Verizon" : "Particle");
   b6166:	f7ff fb67 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b616a:	f7ff fdba 	bl	b5ce2 <_ZNK13sysStatusData14get_verizonSIMEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b616e:	4a23      	ldr	r2, [pc, #140]	; (b61fc <_Z18particleInitializev+0x134>)
   b6170:	4923      	ldr	r1, [pc, #140]	; (b6200 <_Z18particleInitializev+0x138>)
   b6172:	42a0      	cmp	r0, r4
   b6174:	bf18      	it	ne
   b6176:	4611      	movne	r1, r2
   b6178:	4822      	ldr	r0, [pc, #136]	; (b6204 <_Z18particleInitializev+0x13c>)
   b617a:	f7ff ff6d 	bl	b6058 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b617e:	4a22      	ldr	r2, [pc, #136]	; (b6208 <_Z18particleInitializev+0x140>)
   b6180:	4922      	ldr	r1, [pc, #136]	; (b620c <_Z18particleInitializev+0x144>)
   b6182:	4823      	ldr	r0, [pc, #140]	; (b6210 <_Z18particleInitializev+0x148>)
   b6184:	f005 fc05 	bl	bb992 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b6188:	4a22      	ldr	r2, [pc, #136]	; (b6214 <_Z18particleInitializev+0x14c>)
   b618a:	4923      	ldr	r1, [pc, #140]	; (b6218 <_Z18particleInitializev+0x150>)
   b618c:	4820      	ldr	r0, [pc, #128]	; (b6210 <_Z18particleInitializev+0x148>)
   b618e:	f005 fc00 	bl	bb992 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b6192:	4a1c      	ldr	r2, [pc, #112]	; (b6204 <_Z18particleInitializev+0x13c>)
   b6194:	4921      	ldr	r1, [pc, #132]	; (b621c <_Z18particleInitializev+0x154>)
   b6196:	481e      	ldr	r0, [pc, #120]	; (b6210 <_Z18particleInitializev+0x148>)
   b6198:	f005 fbfb 	bl	bb992 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  */

  takeMeasurements();                               // Initialize sensor values

  // makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
}
   b619c:	b00c      	add	sp, #48	; 0x30
   b619e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  takeMeasurements();                               // Initialize sensor values
   b61a2:	f000 bba3 	b.w	b68ec <_Z16takeMeasurementsv>
   b61a6:	bf00      	nop
   b61a8:	000c0218 	.word	0x000c0218
   b61ac:	000c0220 	.word	0x000c0220
   b61b0:	000c0224 	.word	0x000c0224
   b61b4:	000c022d 	.word	0x000c022d
   b61b8:	000c0235 	.word	0x000c0235
   b61bc:	000c0241 	.word	0x000c0241
   b61c0:	000c0253 	.word	0x000c0253
   b61c4:	000c0247 	.word	0x000c0247
   b61c8:	2003e654 	.word	0x2003e654
   b61cc:	000c0209 	.word	0x000c0209
   b61d0:	000c020d 	.word	0x000c020d
   b61d4:	000c0281 	.word	0x000c0281
   b61d8:	2003dd68 	.word	0x2003dd68
   b61dc:	000c0290 	.word	0x000c0290
   b61e0:	2003de34 	.word	0x2003de34
   b61e4:	000c0298 	.word	0x000c0298
   b61e8:	000c029f 	.word	0x000c029f
   b61ec:	000c02aa 	.word	0x000c02aa
   b61f0:	000b6021 	.word	0x000b6021
   b61f4:	000b5ff5 	.word	0x000b5ff5
   b61f8:	000c02b9 	.word	0x000c02b9
   b61fc:	000c0210 	.word	0x000c0210
   b6200:	000c041e 	.word	0x000c041e
   b6204:	000c02cd 	.word	0x000c02cd
   b6208:	000c02d6 	.word	0x000c02d6
   b620c:	000b62e5 	.word	0x000b62e5
   b6210:	000bb967 	.word	0x000bb967
   b6214:	000c02e4 	.word	0x000c02e4
   b6218:	000b624d 	.word	0x000b624d
   b621c:	000b63b9 	.word	0x000b63b9

000b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b6220:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b6222:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b6224:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b6226:	b17c      	cbz	r4, b6248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b6228:	6863      	ldr	r3, [r4, #4]
   b622a:	3b01      	subs	r3, #1
   b622c:	6063      	str	r3, [r4, #4]
   b622e:	b95b      	cbnz	r3, b6248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b6230:	6823      	ldr	r3, [r4, #0]
   b6232:	4620      	mov	r0, r4
   b6234:	689b      	ldr	r3, [r3, #8]
   b6236:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6238:	68a3      	ldr	r3, [r4, #8]
   b623a:	3b01      	subs	r3, #1
   b623c:	60a3      	str	r3, [r4, #8]
   b623e:	b91b      	cbnz	r3, b6248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b6240:	6823      	ldr	r3, [r4, #0]
   b6242:	4620      	mov	r0, r4
   b6244:	68db      	ldr	r3, [r3, #12]
   b6246:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b6248:	4628      	mov	r0, r5
   b624a:	bd38      	pop	{r3, r4, r5, pc}

000b624c <_Z12setFrequency6String>:
 * sets an interim value for reporting frequency which takes effect once sent to a new node.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setFrequency(String command)
{
   b624c:	b530      	push	{r4, r5, lr}
   b624e:	b0c7      	sub	sp, #284	; 0x11c
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b6250:	6800      	ldr	r0, [r0, #0]
   b6252:	220a      	movs	r2, #10
   b6254:	a903      	add	r1, sp, #12
   b6256:	f009 fa59 	bl	bf70c <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b625a:	2878      	cmp	r0, #120	; 0x78
   b625c:	d831      	bhi.n	b62c2 <_Z12setFrequency6String+0x76>
  updatedFrequencyMins = tempTime;
   b625e:	4d1a      	ldr	r5, [pc, #104]	; (b62c8 <_Z12setFrequency6String+0x7c>)
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b6260:	280b      	cmp	r0, #11
  updatedFrequencyMins = tempTime;
   b6262:	8028      	strh	r0, [r5, #0]
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b6264:	dc0d      	bgt.n	b6282 <_Z12setFrequency6String+0x36>
   b6266:	f7ff fae7 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b626a:	f7ff fd35 	bl	b5cd8 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b626e:	b140      	cbz	r0, b6282 <_Z12setFrequency6String+0x36>
    Log.info("Short reporting frequency over-rides low power");
   b6270:	4916      	ldr	r1, [pc, #88]	; (b62cc <_Z12setFrequency6String+0x80>)
   b6272:	4817      	ldr	r0, [pc, #92]	; (b62d0 <_Z12setFrequency6String+0x84>)
   b6274:	f7fd ff32 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_lowPowerMode(false);
   b6278:	f7ff fade 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b627c:	2100      	movs	r1, #0
   b627e:	f7ff fd53 	bl	b5d28 <_ZN13sysStatusData16set_lowPowerModeEb>
  }
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b6282:	4b14      	ldr	r3, [pc, #80]	; (b62d4 <_Z12setFrequency6String+0x88>)
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b6284:	4a14      	ldr	r2, [pc, #80]	; (b62d8 <_Z12setFrequency6String+0x8c>)
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b6286:	2401      	movs	r4, #1
   b6288:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b628a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b628e:	882b      	ldrh	r3, [r5, #0]
   b6290:	a806      	add	r0, sp, #24
   b6292:	f005 f969 	bl	bb568 <snprintf>
  Log.info(data);
   b6296:	480e      	ldr	r0, [pc, #56]	; (b62d0 <_Z12setFrequency6String+0x84>)
   b6298:	a906      	add	r1, sp, #24
   b629a:	f7fd ff1f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b629e:	f005 f893 	bl	bb3c8 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b62a2:	b160      	cbz	r0, b62be <_Z12setFrequency6String+0x72>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b62a4:	4b0d      	ldr	r3, [pc, #52]	; (b62dc <_Z12setFrequency6String+0x90>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b62a6:	490e      	ldr	r1, [pc, #56]	; (b62e0 <_Z12setFrequency6String+0x94>)
   b62a8:	781b      	ldrb	r3, [r3, #0]
   b62aa:	f88d 3000 	strb.w	r3, [sp]
   b62ae:	a804      	add	r0, sp, #16
   b62b0:	233c      	movs	r3, #60	; 0x3c
   b62b2:	aa06      	add	r2, sp, #24
   b62b4:	f005 fc7e 	bl	bbbb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b62b8:	a805      	add	r0, sp, #20
   b62ba:	f7ff ffb1 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b62be:	4620      	mov	r0, r4
   b62c0:	e000      	b.n	b62c4 <_Z12setFrequency6String+0x78>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b62c2:	2000      	movs	r0, #0
}
   b62c4:	b047      	add	sp, #284	; 0x11c
   b62c6:	bd30      	pop	{r4, r5, pc}
   b62c8:	2003de04 	.word	0x2003de04
   b62cc:	000c02f2 	.word	0x000c02f2
   b62d0:	2003e654 	.word	0x2003e654
   b62d4:	2003e405 	.word	0x2003e405
   b62d8:	000c0321 	.word	0x000c0321
   b62dc:	2003e404 	.word	0x2003e404
   b62e0:	000c0361 	.word	0x000c0361

000b62e4 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   b62e4:	b510      	push	{r4, lr}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b62e6:	492a      	ldr	r1, [pc, #168]	; (b6390 <_Z15setLowPowerMode6String+0xac>)
   b62e8:	b094      	sub	sp, #80	; 0x50
   b62ea:	4604      	mov	r4, r0
   b62ec:	f007 fd82 	bl	bddf4 <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b62f0:	b158      	cbz	r0, b630a <_Z15setLowPowerMode6String+0x26>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b62f2:	4620      	mov	r0, r4
   b62f4:	4926      	ldr	r1, [pc, #152]	; (b6390 <_Z15setLowPowerMode6String+0xac>)
   b62f6:	f007 fd7d 	bl	bddf4 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   b62fa:	4604      	mov	r4, r0
   b62fc:	b968      	cbnz	r0, b631a <_Z15setLowPowerMode6String+0x36>
      sysStatus.set_frequencyMinutes(12);
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.set_lowPowerMode(false);
   b62fe:	f7ff fa9b 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b6302:	4621      	mov	r1, r4
   b6304:	f7ff fd10 	bl	b5d28 <_ZN13sysStatusData16set_lowPowerModeEb>
   b6308:	e01e      	b.n	b6348 <_Z15setLowPowerMode6String+0x64>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b630a:	4922      	ldr	r1, [pc, #136]	; (b6394 <_Z15setLowPowerMode6String+0xb0>)
   b630c:	4620      	mov	r0, r4
   b630e:	f007 fd71 	bl	bddf4 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b6312:	2800      	cmp	r0, #0
   b6314:	d1ed      	bne.n	b62f2 <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   b6316:	b014      	add	sp, #80	; 0x50
   b6318:	bd10      	pop	{r4, pc}
    sysStatus.set_lowPowerMode(true);
   b631a:	f7ff fa8d 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b631e:	2101      	movs	r1, #1
   b6320:	f7ff fd02 	bl	b5d28 <_ZN13sysStatusData16set_lowPowerModeEb>
    if (sysStatus.get_frequencyMinutes() < 12 ) {                          // Need to increase reporting frequency to at least 12 mins for low power
   b6324:	f7ff fa88 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b6328:	f7ff fc7a 	bl	b5c20 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b632c:	280b      	cmp	r0, #11
   b632e:	d80b      	bhi.n	b6348 <_Z15setLowPowerMode6String+0x64>
      Log.info("Increasing reporting frequency to 12 minutes");
   b6330:	4919      	ldr	r1, [pc, #100]	; (b6398 <_Z15setLowPowerMode6String+0xb4>)
   b6332:	481a      	ldr	r0, [pc, #104]	; (b639c <_Z15setLowPowerMode6String+0xb8>)
   b6334:	f7fd fed2 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.set_frequencyMinutes(12);
   b6338:	f7ff fa7e 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b633c:	210c      	movs	r1, #12
   b633e:	f7ff fca1 	bl	b5c84 <_ZN13sysStatusData20set_frequencyMinutesEt>
      frequencyUpdated = true;
   b6342:	4b17      	ldr	r3, [pc, #92]	; (b63a0 <_Z15setLowPowerMode6String+0xbc>)
   b6344:	2201      	movs	r2, #1
   b6346:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.get_lowPowerMode()) ? "yes" : "no");
   b6348:	f7ff fa76 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b634c:	f7ff fcc4 	bl	b5cd8 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b6350:	4914      	ldr	r1, [pc, #80]	; (b63a4 <_Z15setLowPowerMode6String+0xc0>)
   b6352:	4b15      	ldr	r3, [pc, #84]	; (b63a8 <_Z15setLowPowerMode6String+0xc4>)
   b6354:	4a15      	ldr	r2, [pc, #84]	; (b63ac <_Z15setLowPowerMode6String+0xc8>)
   b6356:	2800      	cmp	r0, #0
   b6358:	bf18      	it	ne
   b635a:	460b      	movne	r3, r1
   b635c:	2140      	movs	r1, #64	; 0x40
   b635e:	a804      	add	r0, sp, #16
   b6360:	f005 f902 	bl	bb568 <snprintf>
  Log.info(data);
   b6364:	480d      	ldr	r0, [pc, #52]	; (b639c <_Z15setLowPowerMode6String+0xb8>)
   b6366:	a904      	add	r1, sp, #16
   b6368:	f7fd feb8 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b636c:	f005 f82c 	bl	bb3c8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b6370:	b160      	cbz	r0, b638c <_Z15setLowPowerMode6String+0xa8>
   b6372:	4b0f      	ldr	r3, [pc, #60]	; (b63b0 <_Z15setLowPowerMode6String+0xcc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6374:	490f      	ldr	r1, [pc, #60]	; (b63b4 <_Z15setLowPowerMode6String+0xd0>)
   b6376:	781b      	ldrb	r3, [r3, #0]
   b6378:	f88d 3000 	strb.w	r3, [sp]
   b637c:	a802      	add	r0, sp, #8
   b637e:	233c      	movs	r3, #60	; 0x3c
   b6380:	aa04      	add	r2, sp, #16
   b6382:	f005 fc17 	bl	bbbb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6386:	a803      	add	r0, sp, #12
   b6388:	f7ff ff4a 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b638c:	2001      	movs	r0, #1
   b638e:	e7c2      	b.n	b6316 <_Z15setLowPowerMode6String+0x32>
   b6390:	000c0510 	.word	0x000c0510
   b6394:	000c07ec 	.word	0x000c07ec
   b6398:	000c036d 	.word	0x000c036d
   b639c:	2003e654 	.word	0x2003e654
   b63a0:	2003e405 	.word	0x2003e405
   b63a4:	000c0366 	.word	0x000c0366
   b63a8:	000c036a 	.word	0x000c036a
   b63ac:	000c039a 	.word	0x000c039a
   b63b0:	2003e404 	.word	0x2003e404
   b63b4:	000c028b 	.word	0x000c028b

000b63b8 <_Z13setVerizonSIM6String>:
 * 
 * @param command  - 1 for Verizon and 0 for Particle (default)
 * @return int 
 */
int setVerizonSIM(String command)                                   // If we are using a Verizon SIM, we will need to execute "keepAlive" calls in the main loop when not in low power mode
{
   b63b8:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b63ba:	491e      	ldr	r1, [pc, #120]	; (b6434 <_Z13setVerizonSIM6String+0x7c>)
   b63bc:	b085      	sub	sp, #20
   b63be:	4605      	mov	r5, r0
   b63c0:	f007 fd18 	bl	bddf4 <_ZNK6String6equalsEPKc>
  if (command == "1")
   b63c4:	4604      	mov	r4, r0
   b63c6:	b1d8      	cbz	r0, b6400 <_Z13setVerizonSIM6String+0x48>
  {
    sysStatus.set_verizonSIM(true);
   b63c8:	f7ff fa36 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b63cc:	2101      	movs	r1, #1
   b63ce:	f7ff fcb7 	bl	b5d40 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(60);                                         // send a ping every minute
   b63d2:	203c      	movs	r0, #60	; 0x3c
   b63d4:	f7ff fe68 	bl	b60a8 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b63d8:	f004 fff6 	bl	bb3c8 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   b63dc:	b910      	cbnz	r0, b63e4 <_Z13setVerizonSIM6String+0x2c>
  else if (command == "0")
  {
    sysStatus.set_verizonSIM(false);
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
    return 1;
   b63de:	2001      	movs	r0, #1
  }
  else return 0;
}
   b63e0:	b005      	add	sp, #20
   b63e2:	bd30      	pop	{r4, r5, pc}
   b63e4:	4b14      	ldr	r3, [pc, #80]	; (b6438 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b63e6:	4a15      	ldr	r2, [pc, #84]	; (b643c <_Z13setVerizonSIM6String+0x84>)
   b63e8:	781b      	ldrb	r3, [r3, #0]
   b63ea:	f88d 3000 	strb.w	r3, [sp]
   b63ee:	233c      	movs	r3, #60	; 0x3c
   b63f0:	a802      	add	r0, sp, #8
   b63f2:	4913      	ldr	r1, [pc, #76]	; (b6440 <_Z13setVerizonSIM6String+0x88>)
   b63f4:	f005 fbde 	bl	bbbb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b63f8:	a803      	add	r0, sp, #12
   b63fa:	f7ff ff11 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b63fe:	e7ee      	b.n	b63de <_Z13setVerizonSIM6String+0x26>
   b6400:	4910      	ldr	r1, [pc, #64]	; (b6444 <_Z13setVerizonSIM6String+0x8c>)
   b6402:	4628      	mov	r0, r5
   b6404:	f007 fcf6 	bl	bddf4 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b6408:	2800      	cmp	r0, #0
   b640a:	d0e9      	beq.n	b63e0 <_Z13setVerizonSIM6String+0x28>
    sysStatus.set_verizonSIM(false);
   b640c:	f7ff fa14 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   b6410:	4621      	mov	r1, r4
   b6412:	f7ff fc95 	bl	b5d40 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b6416:	f240 5064 	movw	r0, #1380	; 0x564
   b641a:	f7ff fe45 	bl	b60a8 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b641e:	f004 ffd3 	bl	bb3c8 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   b6422:	2800      	cmp	r0, #0
   b6424:	d0db      	beq.n	b63de <_Z13setVerizonSIM6String+0x26>
   b6426:	4b04      	ldr	r3, [pc, #16]	; (b6438 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6428:	4a07      	ldr	r2, [pc, #28]	; (b6448 <_Z13setVerizonSIM6String+0x90>)
   b642a:	781b      	ldrb	r3, [r3, #0]
   b642c:	f88d 3000 	strb.w	r3, [sp]
   b6430:	233c      	movs	r3, #60	; 0x3c
   b6432:	e7dd      	b.n	b63f0 <_Z13setVerizonSIM6String+0x38>
   b6434:	000c0510 	.word	0x000c0510
   b6438:	2003e404 	.word	0x2003e404
   b643c:	000c03b4 	.word	0x000c03b4
   b6440:	000c028b 	.word	0x000c028b
   b6444:	000c07ec 	.word	0x000c07ec
   b6448:	000c03c7 	.word	0x000c03c7

000b644c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b644c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b644e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6452:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6454:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6456:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b645a:	42ae      	cmp	r6, r5
   b645c:	d004      	beq.n	b6468 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b645e:	4628      	mov	r0, r5
   b6460:	f007 fbc4 	bl	bdbec <_ZN6StringD1Ev>
   b6464:	3514      	adds	r5, #20
   b6466:	e7f8      	b.n	b645a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6468:	6820      	ldr	r0, [r4, #0]
   b646a:	f005 f85d 	bl	bb528 <free>
    AllocatorT::free(data_);
}
   b646e:	4620      	mov	r0, r4
   b6470:	bd70      	pop	{r4, r5, r6, pc}

000b6472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6472:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6476:	4604      	mov	r4, r0
   b6478:	460d      	mov	r5, r1
   b647a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b647c:	d916      	bls.n	b64ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b647e:	4290      	cmp	r0, r2
   b6480:	d215      	bcs.n	b64ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6482:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6486:	1a75      	subs	r5, r6, r1
   b6488:	f1a1 0714 	sub.w	r7, r1, #20
   b648c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b648e:	42b7      	cmp	r7, r6
   b6490:	d01c      	beq.n	b64cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6492:	b12c      	cbz	r4, b64a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6494:	4631      	mov	r1, r6
   b6496:	4620      	mov	r0, r4
   b6498:	f007 fc24 	bl	bdce4 <_ZN6StringC1EOS_>
   b649c:	7c33      	ldrb	r3, [r6, #16]
   b649e:	7423      	strb	r3, [r4, #16]
   b64a0:	4630      	mov	r0, r6
   b64a2:	f007 fba3 	bl	bdbec <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b64a6:	3e14      	subs	r6, #20
   b64a8:	3c14      	subs	r4, #20
   b64aa:	e7f0      	b.n	b648e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b64ac:	d00e      	beq.n	b64cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b64ae:	42b5      	cmp	r5, r6
   b64b0:	d00c      	beq.n	b64cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b64b2:	b12c      	cbz	r4, b64c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b64b4:	4629      	mov	r1, r5
   b64b6:	4620      	mov	r0, r4
   b64b8:	f007 fc14 	bl	bdce4 <_ZN6StringC1EOS_>
   b64bc:	7c2b      	ldrb	r3, [r5, #16]
   b64be:	7423      	strb	r3, [r4, #16]
   b64c0:	4628      	mov	r0, r5
   b64c2:	f007 fb93 	bl	bdbec <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b64c6:	3514      	adds	r5, #20
   b64c8:	3414      	adds	r4, #20
   b64ca:	e7f0      	b.n	b64ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b64cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b64ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b64ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b64d2:	2300      	movs	r3, #0
   b64d4:	e9c0 3300 	strd	r3, r3, [r0]
   b64d8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b64da:	684f      	ldr	r7, [r1, #4]
   b64dc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b64de:	4604      	mov	r4, r0
   b64e0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b64e2:	dd23      	ble.n	b652c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b64e4:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b64e8:	fb08 f007 	mul.w	r0, r8, r7
   b64ec:	f005 f814 	bl	bb518 <malloc>
            if (!d) {
   b64f0:	4605      	mov	r5, r0
   b64f2:	b1d8      	cbz	r0, b652c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b64f4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b64f8:	fb08 1202 	mla	r2, r8, r2, r1
   b64fc:	f7ff ffb9 	bl	b6472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6500:	6820      	ldr	r0, [r4, #0]
   b6502:	f005 f811 	bl	bb528 <free>
        data_ = d;
   b6506:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6508:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b650a:	e9d6 7300 	ldrd	r7, r3, [r6]
   b650e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b6512:	45b8      	cmp	r8, r7
   b6514:	d008      	beq.n	b6528 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b6516:	4639      	mov	r1, r7
   b6518:	4628      	mov	r0, r5
   b651a:	f007 fbfd 	bl	bdd18 <_ZN6StringC1ERKS_>
   b651e:	7c3b      	ldrb	r3, [r7, #16]
   b6520:	742b      	strb	r3, [r5, #16]
   b6522:	3714      	adds	r7, #20
   b6524:	3514      	adds	r5, #20
   b6526:	e7f4      	b.n	b6512 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b6528:	6873      	ldr	r3, [r6, #4]
   b652a:	6063      	str	r3, [r4, #4]
}
   b652c:	4620      	mov	r0, r4
   b652e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b6534 <_GLOBAL__sub_I_SystemMode>:
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }

  else return 0;
   b6534:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b6536:	4b27      	ldr	r3, [pc, #156]	; (b65d4 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b6538:	4a27      	ldr	r2, [pc, #156]	; (b65d8 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b653a:	2501      	movs	r5, #1
   b653c:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b653e:	4b27      	ldr	r3, [pc, #156]	; (b65dc <_GLOBAL__sub_I_SystemMode+0xa8>)
   b6540:	2400      	movs	r4, #0
   b6542:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b6544:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6546:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b654a:	2002      	movs	r0, #2
   b654c:	f004 feaa 	bl	bb2a4 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b6550:	4621      	mov	r1, r4
   b6552:	4628      	mov	r0, r5
   b6554:	f004 febe 	bl	bb2d4 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b6558:	4629      	mov	r1, r5
   b655a:	2004      	movs	r0, #4
   b655c:	f004 fc20 	bl	bada0 <HAL_Feature_Set>
        capacity_(0) {
   b6560:	e9cd 4400 	strd	r4, r4, [sp]
   b6564:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b6566:	f007 ffc7 	bl	be4f8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b656a:	4c1d      	ldr	r4, [pc, #116]	; (b65e0 <_GLOBAL__sub_I_SystemMode+0xac>)
   b656c:	4605      	mov	r5, r0
   b656e:	4669      	mov	r1, sp
   b6570:	a803      	add	r0, sp, #12
   b6572:	f7ff ffac 	bl	b64ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6576:	4626      	mov	r6, r4
        stream_(&stream) {
   b6578:	a903      	add	r1, sp, #12
   b657a:	a806      	add	r0, sp, #24
   b657c:	f7ff ffa7 	bl	b64ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6580:	4b18      	ldr	r3, [pc, #96]	; (b65e4 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b6582:	f846 3b04 	str.w	r3, [r6], #4
   b6586:	a906      	add	r1, sp, #24
   b6588:	a809      	add	r0, sp, #36	; 0x24
   b658a:	f7ff ffa0 	bl	b64ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b658e:	aa09      	add	r2, sp, #36	; 0x24
   b6590:	211e      	movs	r1, #30
   b6592:	4630      	mov	r0, r6
   b6594:	f006 fc88 	bl	bcea8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6598:	a809      	add	r0, sp, #36	; 0x24
   b659a:	f7ff ff57 	bl	b644c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b659e:	a806      	add	r0, sp, #24
   b65a0:	f7ff ff54 	bl	b644c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b65a4:	4b10      	ldr	r3, [pc, #64]	; (b65e8 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b65a6:	6023      	str	r3, [r4, #0]
   b65a8:	6225      	str	r5, [r4, #32]
   b65aa:	a803      	add	r0, sp, #12
   b65ac:	f7ff ff4e 	bl	b644c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b65b0:	4b0e      	ldr	r3, [pc, #56]	; (b65ec <_GLOBAL__sub_I_SystemMode+0xb8>)
   b65b2:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b65b4:	f007 ffa0 	bl	be4f8 <_Z16_fetch_usbserialv>
   b65b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b65bc:	f007 ff8a 	bl	be4d4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b65c0:	f006 f988 	bl	bc8d4 <_ZN5spark10LogManager8instanceEv>
   b65c4:	4621      	mov	r1, r4
   b65c6:	f006 fb45 	bl	bcc54 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b65ca:	4668      	mov	r0, sp
   b65cc:	f7ff ff3e 	bl	b644c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b65d0:	b00c      	add	sp, #48	; 0x30
   b65d2:	bd70      	pop	{r4, r5, r6, pc}
   b65d4:	2003e404 	.word	0x2003e404
   b65d8:	ffff0000 	.word	0xffff0000
   b65dc:	2003e3f8 	.word	0x2003e3f8
   b65e0:	2003e408 	.word	0x2003e408
   b65e4:	000c04ac 	.word	0x000c04ac
   b65e8:	000c10d8 	.word	0x000c10d8
   b65ec:	000c04c4 	.word	0x000c04c4

000b65f0 <_Z22disconnectFromParticlev>:
{
   b65f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b65f4:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b65f6:	f007 fe98 	bl	be32a <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b65fa:	4943      	ldr	r1, [pc, #268]	; (b6708 <_Z22disconnectFromParticlev+0x118>)
  time_t startTime = Time.now();
   b65fc:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b65fe:	4843      	ldr	r0, [pc, #268]	; (b670c <_Z22disconnectFromParticlev+0x11c>)
   b6600:	f7fd fd6c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b6604:	4b42      	ldr	r3, [pc, #264]	; (b6710 <_Z22disconnectFromParticlev+0x120>)
   b6606:	8818      	ldrh	r0, [r3, #0]
   b6608:	f005 fda6 	bl	bc158 <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b660c:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b660e:	a801      	add	r0, sp, #4
   b6610:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b6614:	f8ad 400c 	strh.w	r4, [sp, #12]
   b6618:	f005 f9cc 	bl	bb9b4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b661c:	4620      	mov	r0, r4
   b661e:	f004 fbef 	bl	bae00 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6622:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b6626:	4604      	mov	r4, r0
   b6628:	2000      	movs	r0, #0
   b662a:	f004 fbe9 	bl	bae00 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b662e:	1b03      	subs	r3, r0, r4
   b6630:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6634:	42b3      	cmp	r3, r6
   b6636:	f171 0300 	sbcs.w	r3, r1, #0
   b663a:	d205      	bcs.n	b6648 <_Z22disconnectFromParticlev+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b663c:	f004 fec4 	bl	bb3c8 <spark_cloud_flag_connected>
   b6640:	b110      	cbz	r0, b6648 <_Z22disconnectFromParticlev+0x58>
            spark_process();
   b6642:	f004 feb1 	bl	bb3a8 <spark_process>
        while (_while() && !_condition()) {
   b6646:	e7ef      	b.n	b6628 <_Z22disconnectFromParticlev+0x38>
   b6648:	f004 febe 	bl	bb3c8 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b664c:	f004 fbc8 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6650:	4f30      	ldr	r7, [pc, #192]	; (b6714 <_Z22disconnectFromParticlev+0x124>)
   b6652:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6654:	f004 fea8 	bl	bb3a8 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6658:	f004 feb6 	bl	bb3c8 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b665c:	4604      	mov	r4, r0
   b665e:	b140      	cbz	r0, b6672 <_Z22disconnectFromParticlev+0x82>
    Log.info("Failed to disconnect from Particle");
   b6660:	492d      	ldr	r1, [pc, #180]	; (b6718 <_Z22disconnectFromParticlev+0x128>)
   b6662:	482a      	ldr	r0, [pc, #168]	; (b670c <_Z22disconnectFromParticlev+0x11c>)
   b6664:	f7fd fd3a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b6668:	2400      	movs	r4, #0
}
   b666a:	4620      	mov	r0, r4
   b666c:	b005      	add	sp, #20
   b666e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b6672:	f007 fe5a 	bl	be32a <_ZN9TimeClass3nowEv>
   b6676:	4929      	ldr	r1, [pc, #164]	; (b671c <_Z22disconnectFromParticlev+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b6678:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b6720 <_Z22disconnectFromParticlev+0x130>
   b667c:	1b42      	subs	r2, r0, r5
   b667e:	4823      	ldr	r0, [pc, #140]	; (b670c <_Z22disconnectFromParticlev+0x11c>)
   b6680:	f7fd fd2c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b6684:	f007 fe51 	bl	be32a <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6688:	4622      	mov	r2, r4
   b668a:	2102      	movs	r1, #2
   b668c:	4606      	mov	r6, r0
   b668e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6692:	f004 fef1 	bl	bb478 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b6696:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b669a:	4623      	mov	r3, r4
   b669c:	4622      	mov	r2, r4
   b669e:	4621      	mov	r1, r4
   b66a0:	f004 ff02 	bl	bb4a8 <network_off>
        return hal_timer_millis(nullptr);
   b66a4:	4620      	mov	r0, r4
   b66a6:	f004 fbab 	bl	bae00 <hal_timer_millis>
        while (_while() && !_condition()) {
   b66aa:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b66ae:	4605      	mov	r5, r0
   b66b0:	2000      	movs	r0, #0
   b66b2:	f004 fba5 	bl	bae00 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b66b6:	1b43      	subs	r3, r0, r5
   b66b8:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b66bc:	454b      	cmp	r3, r9
   b66be:	f171 0300 	sbcs.w	r3, r1, #0
   b66c2:	d206      	bcs.n	b66d2 <_Z22disconnectFromParticlev+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b66c4:	4640      	mov	r0, r8
   b66c6:	f006 ff0d 	bl	bd4e4 <_ZN5spark12NetworkClass5isOffEv>
   b66ca:	b910      	cbnz	r0, b66d2 <_Z22disconnectFromParticlev+0xe2>
            spark_process();
   b66cc:	f004 fe6c 	bl	bb3a8 <spark_process>
        while (_while() && !_condition()) {
   b66d0:	e7ee      	b.n	b66b0 <_Z22disconnectFromParticlev+0xc0>
   b66d2:	4813      	ldr	r0, [pc, #76]	; (b6720 <_Z22disconnectFromParticlev+0x130>)
   b66d4:	f006 ff06 	bl	bd4e4 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b66d8:	f004 fb82 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b66dc:	6038      	str	r0, [r7, #0]
    		spark_process();
   b66de:	f004 fe63 	bl	bb3a8 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b66e2:	480f      	ldr	r0, [pc, #60]	; (b6720 <_Z22disconnectFromParticlev+0x130>)
   b66e4:	f006 fefa 	bl	bd4dc <_ZN5spark12NetworkClass4isOnEv>
   b66e8:	b120      	cbz	r0, b66f4 <_Z22disconnectFromParticlev+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b66ea:	490e      	ldr	r1, [pc, #56]	; (b6724 <_Z22disconnectFromParticlev+0x134>)
   b66ec:	4807      	ldr	r0, [pc, #28]	; (b670c <_Z22disconnectFromParticlev+0x11c>)
   b66ee:	f7fd fcf5 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b66f2:	e7ba      	b.n	b666a <_Z22disconnectFromParticlev+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b66f4:	f007 fe19 	bl	be32a <_ZN9TimeClass3nowEv>
   b66f8:	490b      	ldr	r1, [pc, #44]	; (b6728 <_Z22disconnectFromParticlev+0x138>)
   b66fa:	1b82      	subs	r2, r0, r6
   b66fc:	4803      	ldr	r0, [pc, #12]	; (b670c <_Z22disconnectFromParticlev+0x11c>)
   b66fe:	f7fd fced 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b6702:	2401      	movs	r4, #1
   b6704:	e7b1      	b.n	b666a <_Z22disconnectFromParticlev+0x7a>
   b6706:	bf00      	nop
   b6708:	000c03db 	.word	0x000c03db
   b670c:	2003e654 	.word	0x2003e654
   b6710:	000c01f6 	.word	0x000c01f6
   b6714:	2003e710 	.word	0x2003e710
   b6718:	000c0404 	.word	0x000c0404
   b671c:	000c0427 	.word	0x000c0427
   b6720:	2003e580 	.word	0x2003e580
   b6724:	000c0450 	.word	0x000c0450
   b6728:	000c0476 	.word	0x000c0476

000b672c <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b672c:	ee07 0a90 	vmov	s15, r0
   b6730:	ed9f 7a09 	vldr	s14, [pc, #36]	; b6758 <_Z17tmp36TemperatureCi+0x2c>
   b6734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6738:	ee67 7a87 	vmul.f32	s15, s15, s14
   b673c:	ed9f 7a07 	vldr	s14, [pc, #28]	; b675c <_Z17tmp36TemperatureCi+0x30>
   b6740:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b6744:	eddf 7a06 	vldr	s15, [pc, #24]	; b6760 <_Z17tmp36TemperatureCi+0x34>
   b6748:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b674c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6750:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6754:	4770      	bx	lr
   b6756:	bf00      	nop
   b6758:	454e4000 	.word	0x454e4000
   b675c:	457ff000 	.word	0x457ff000
   b6760:	43fa0000 	.word	0x43fa0000

000b6764 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b6764:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b6766:	2101      	movs	r1, #1
   b6768:	a801      	add	r0, sp, #4
   b676a:	f006 ff50 	bl	bd60e <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b676e:	f7ff f8b3 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b6772:	f7ff f9ba 	bl	b5aea <_ZNK17currentStatusData17get_internalTempCEv>
   b6776:	f7ff f8af 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b677a:	f7ff f9b6 	bl	b5aea <_ZNK17currentStatusData17get_internalTempCEv>
   b677e:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6780:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6782:	d90d      	bls.n	b67a0 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6784:	f006 ffd6 	bl	bd734 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b6788:	f7ff f8a6 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b678c:	2101      	movs	r1, #1
   b678e:	f7ff fa06 	bl	b5b9e <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b6792:	2400      	movs	r4, #0
  PMIC pmic(true);
   b6794:	a801      	add	r0, sp, #4
   b6796:	f006 ff49 	bl	bd62c <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b679a:	4620      	mov	r0, r4
   b679c:	b002      	add	sp, #8
   b679e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b67a0:	f006 ffad 	bl	bd6fe <_ZN4PMIC14enableChargingEv>
    return true;
   b67a4:	2401      	movs	r4, #1
   b67a6:	e7f5      	b.n	b6794 <_Z16isItSafeToChargev+0x30>

000b67a8 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b67a8:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b67aa:	4d19      	ldr	r5, [pc, #100]	; (b6810 <_Z17getSignalStrengthv+0x68>)
   b67ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b67ae:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b67b0:	ac0c      	add	r4, sp, #48	; 0x30
   b67b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67b8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b67bc:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b67c0:	4914      	ldr	r1, [pc, #80]	; (b6814 <_Z17getSignalStrengthv+0x6c>)
   b67c2:	a804      	add	r0, sp, #16
   b67c4:	f004 ffa2 	bl	bb70c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b67c8:	a804      	add	r0, sp, #16
   b67ca:	f004 ffe2 	bl	bb792 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b67ce:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b67d0:	a804      	add	r0, sp, #16
   b67d2:	f005 f817 	bl	bb804 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b67d6:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b67d8:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b67dc:	f005 f842 	bl	bb864 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b67e0:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b67e2:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b67e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b67ea:	f008 fa19 	bl	bec20 <__aeabi_f2d>
   b67ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b67f2:	4628      	mov	r0, r5
   b67f4:	f008 fa14 	bl	bec20 <__aeabi_f2d>
   b67f8:	e9cd 0100 	strd	r0, r1, [sp]
   b67fc:	4a06      	ldr	r2, [pc, #24]	; (b6818 <_Z17getSignalStrengthv+0x70>)
   b67fe:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6802:	4806      	ldr	r0, [pc, #24]	; (b681c <_Z17getSignalStrengthv+0x74>)
   b6804:	2140      	movs	r1, #64	; 0x40
   b6806:	f004 feaf 	bl	bb568 <snprintf>
}
   b680a:	b017      	add	sp, #92	; 0x5c
   b680c:	bd30      	pop	{r4, r5, pc}
   b680e:	bf00      	nop
   b6810:	000c0530 	.word	0x000c0530
   b6814:	2003e580 	.word	0x2003e580
   b6818:	000c0512 	.word	0x000c0512
   b681c:	2003de34 	.word	0x2003de34

000b6820 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6820:	b530      	push	{r4, r5, lr}
   b6822:	b085      	sub	sp, #20
   b6824:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6826:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6828:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b682a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b682c:	f004 fd28 	bl	bb280 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6830:	b990      	cbnz	r0, b6858 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
    return get(src, val);
   b6832:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6834:	b10c      	cbz	r4, b683a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6836:	6923      	ldr	r3, [r4, #16]
   b6838:	b923      	cbnz	r3, b6844 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b683a:	4a08      	ldr	r2, [pc, #32]	; (b685c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b683c:	4908      	ldr	r1, [pc, #32]	; (b6860 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b683e:	200a      	movs	r0, #10
   b6840:	f004 fcf6 	bl	bb230 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6844:	230c      	movs	r3, #12
   b6846:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b684a:	2304      	movs	r3, #4
   b684c:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b684e:	aa01      	add	r2, sp, #4
   b6850:	6923      	ldr	r3, [r4, #16]
   b6852:	2101      	movs	r1, #1
   b6854:	4620      	mov	r0, r4
   b6856:	4798      	blx	r3
}
   b6858:	b005      	add	sp, #20
   b685a:	bd30      	pop	{r4, r5, pc}
   b685c:	000badd1 	.word	0x000badd1
   b6860:	000c004e 	.word	0x000c004e

000b6864 <_Z12batteryStatev>:
bool batteryState() {
   b6864:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6866:	f7ff f837 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b686a:	a901      	add	r1, sp, #4
   b686c:	4604      	mov	r4, r0
   b686e:	2007      	movs	r0, #7
   b6870:	f7ff ffd6 	bl	b6820 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6874:	1e01      	subs	r1, r0, #0
        return val;
   b6876:	bfa8      	it	ge
   b6878:	9901      	ldrge	r1, [sp, #4]
   b687a:	4620      	mov	r0, r4
   b687c:	b2c9      	uxtb	r1, r1
   b687e:	f7ff f98e 	bl	b5b9e <_ZN17currentStatusData16set_batteryStateEh>
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b6882:	4818      	ldr	r0, [pc, #96]	; (b68e4 <_Z12batteryStatev+0x80>)
   b6884:	f005 fb90 	bl	bbfa8 <_ZN9FuelGauge10quickStartEv>
  delay(500);
   b6888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b688c:	f004 fec4 	bl	bb618 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b6890:	f7ff f822 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b6894:	a901      	add	r1, sp, #4
   b6896:	4604      	mov	r4, r0
   b6898:	2003      	movs	r0, #3
   b689a:	f7ff ffc1 	bl	b6820 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b689e:	b9e8      	cbnz	r0, b68dc <_Z12batteryStatev+0x78>
   b68a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b68a4:	ee07 3a90 	vmov	s15, r3
   b68a8:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b68ac:	ee17 0a90 	vmov	r0, s15
   b68b0:	f008 f9b6 	bl	bec20 <__aeabi_f2d>
   b68b4:	ec41 0b10 	vmov	d0, r0, r1
   b68b8:	4620      	mov	r0, r4
   b68ba:	f7ff f849 	bl	b5950 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b68be:	f7ff f80b 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b68c2:	f7ff f825 	bl	b5910 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b68c6:	4b08      	ldr	r3, [pc, #32]	; (b68e8 <_Z12batteryStatev+0x84>)
   b68c8:	ec51 0b10 	vmov	r0, r1, d0
   b68cc:	2200      	movs	r2, #0
   b68ce:	f008 fc8f 	bl	bf1f0 <__aeabi_dcmpgt>
}
   b68d2:	3800      	subs	r0, #0
   b68d4:	bf18      	it	ne
   b68d6:	2001      	movne	r0, #1
   b68d8:	b002      	add	sp, #8
   b68da:	bd10      	pop	{r4, pc}
            return -1.0f;
   b68dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b68e0:	e7e4      	b.n	b68ac <_Z12batteryStatev+0x48>
   b68e2:	bf00      	nop
   b68e4:	2003e42c 	.word	0x2003e42c
   b68e8:	404e0000 	.word	0x404e0000

000b68ec <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b68ec:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b68ee:	f7fe fff3 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b68f2:	4b11      	ldr	r3, [pc, #68]	; (b6938 <_Z16takeMeasurementsv+0x4c>)
   b68f4:	4604      	mov	r4, r0
   b68f6:	8818      	ldrh	r0, [r3, #0]
   b68f8:	f007 ff53 	bl	be7a2 <analogRead>
   b68fc:	f7ff ff16 	bl	b672c <_Z17tmp36TemperatureCi>
   b6900:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6904:	4620      	mov	r0, r4
   b6906:	edcd 7a01 	vstr	s15, [sp, #4]
   b690a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b690e:	f7ff f940 	bl	b5b92 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6912:	f7fe ffe1 	bl	b58d8 <_ZN17currentStatusData8instanceEv>
   b6916:	f7ff f8e8 	bl	b5aea <_ZNK17currentStatusData17get_internalTempCEv>
   b691a:	4a08      	ldr	r2, [pc, #32]	; (b693c <_Z16takeMeasurementsv+0x50>)
   b691c:	4603      	mov	r3, r0
   b691e:	2110      	movs	r1, #16
   b6920:	4807      	ldr	r0, [pc, #28]	; (b6940 <_Z16takeMeasurementsv+0x54>)
   b6922:	f004 fe21 	bl	bb568 <snprintf>
    batteryState();
   b6926:	f7ff ff9d 	bl	b6864 <_Z12batteryStatev>
    isItSafeToCharge();
   b692a:	f7ff ff1b 	bl	b6764 <_Z16isItSafeToChargev>
    getSignalStrength();
   b692e:	f7ff ff3b 	bl	b67a8 <_Z17getSignalStrengthv>
}
   b6932:	2001      	movs	r0, #1
   b6934:	b002      	add	sp, #8
   b6936:	bd10      	pop	{r4, pc}
   b6938:	000c01fc 	.word	0x000c01fc
   b693c:	000c052b 	.word	0x000c052b
   b6940:	2003de24 	.word	0x2003de24

000b6944 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6944:	4801      	ldr	r0, [pc, #4]	; (b694c <_GLOBAL__sub_I_batteryContext+0x8>)
   b6946:	2100      	movs	r1, #0
   b6948:	f005 baea 	b.w	bbf20 <_ZN9FuelGaugeC1Eb>
   b694c:	2003e42c 	.word	0x2003e42c

000b6950 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6950:	4770      	bx	lr

000b6952 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6952:	b510      	push	{r4, lr}
}
   b6954:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b6956:	4604      	mov	r4, r0
}
   b6958:	f7fd fba1 	bl	b409e <_ZdlPvj>
   b695c:	4620      	mov	r0, r4
   b695e:	bd10      	pop	{r4, pc}

000b6960 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6960:	b510      	push	{r4, lr}
   b6962:	4604      	mov	r4, r0
   b6964:	b08a      	sub	sp, #40	; 0x28
   b6966:	4608      	mov	r0, r1
    attr.flags = 0;
   b6968:	f04f 0c20 	mov.w	ip, #32
   b696c:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b696e:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6972:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6976:	460b      	mov	r3, r1
   b6978:	aa02      	add	r2, sp, #8
   b697a:	6821      	ldr	r1, [r4, #0]
   b697c:	f004 fc68 	bl	bb250 <log_message_v>
}
   b6980:	b00a      	add	sp, #40	; 0x28
   b6982:	bd10      	pop	{r4, pc}

000b6984 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6984:	b40e      	push	{r1, r2, r3}
   b6986:	b503      	push	{r0, r1, lr}
   b6988:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b698a:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b698c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6990:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6992:	f7ff ffe5 	bl	b6960 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6996:	b002      	add	sp, #8
   b6998:	f85d eb04 	ldr.w	lr, [sp], #4
   b699c:	b003      	add	sp, #12
   b699e:	4770      	bx	lr

000b69a0 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b69a0:	b40e      	push	{r1, r2, r3}
   b69a2:	b503      	push	{r0, r1, lr}
   b69a4:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b69a6:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b69a8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b69ac:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b69ae:	f7ff ffd7 	bl	b6960 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b69b2:	b002      	add	sp, #8
   b69b4:	f85d eb04 	ldr.w	lr, [sp], #4
   b69b8:	b003      	add	sp, #12
   b69ba:	4770      	bx	lr

000b69bc <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b69bc:	b510      	push	{r4, lr}
   b69be:	7202      	strb	r2, [r0, #8]
   b69c0:	22ff      	movs	r2, #255	; 0xff
   b69c2:	8142      	strh	r2, [r0, #10]
   b69c4:	2200      	movs	r2, #0
   b69c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b69ca:	6142      	str	r2, [r0, #20]
   b69cc:	7602      	strb	r2, [r0, #24]
   b69ce:	61c2      	str	r2, [r0, #28]
    instance = this;
   b69d0:	4a02      	ldr	r2, [pc, #8]	; (b69dc <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b69d2:	4c03      	ldr	r4, [pc, #12]	; (b69e0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b69d4:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b69d6:	e9c0 4100 	strd	r4, r1, [r0]
}
   b69da:	bd10      	pop	{r4, pc}
   b69dc:	2003e438 	.word	0x2003e438
   b69e0:	000c07a8 	.word	0x000c07a8

000b69e4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b69e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b69e8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b69ec:	4604      	mov	r4, r0
   b69ee:	4689      	mov	r9, r1
   b69f0:	4616      	mov	r6, r2
   b69f2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b69f4:	f1b8 0f00 	cmp.w	r8, #0
   b69f8:	d002      	beq.n	b6a00 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b69fa:	6840      	ldr	r0, [r0, #4]
   b69fc:	f005 fb6e 	bl	bc0dc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6a00:	7a21      	ldrb	r1, [r4, #8]
   b6a02:	6860      	ldr	r0, [r4, #4]
   b6a04:	f005 fb47 	bl	bc096 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6a08:	6860      	ldr	r0, [r4, #4]
   b6a0a:	6803      	ldr	r3, [r0, #0]
   b6a0c:	4649      	mov	r1, r9
   b6a0e:	689b      	ldr	r3, [r3, #8]
   b6a10:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6a12:	6860      	ldr	r0, [r4, #4]
   b6a14:	2100      	movs	r1, #0
   b6a16:	f005 fb5d 	bl	bc0d4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6a1a:	4605      	mov	r5, r0
   b6a1c:	bb00      	cbnz	r0, b6a60 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6a1e:	2301      	movs	r3, #1
   b6a20:	7a21      	ldrb	r1, [r4, #8]
   b6a22:	6860      	ldr	r0, [r4, #4]
   b6a24:	463a      	mov	r2, r7
   b6a26:	f005 fb24 	bl	bc072 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b6a2a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6a2c:	4603      	mov	r3, r0
        if (count == num) {
   b6a2e:	d109      	bne.n	b6a44 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6a30:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6a32:	42be      	cmp	r6, r7
   b6a34:	d01c      	beq.n	b6a70 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6a36:	6860      	ldr	r0, [r4, #4]
   b6a38:	6803      	ldr	r3, [r0, #0]
   b6a3a:	695b      	ldr	r3, [r3, #20]
   b6a3c:	4798      	blx	r3
   b6a3e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6a42:	e7f6      	b.n	b6a32 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6a44:	490b      	ldr	r1, [pc, #44]	; (b6a74 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b6a46:	480c      	ldr	r0, [pc, #48]	; (b6a78 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6a48:	464a      	mov	r2, r9
   b6a4a:	f7ff ff9b 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6a4e:	f1b8 0f00 	cmp.w	r8, #0
   b6a52:	d002      	beq.n	b6a5a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6a54:	6860      	ldr	r0, [r4, #4]
   b6a56:	f005 fb4a 	bl	bc0ee <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b6a5a:	4628      	mov	r0, r5
   b6a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6a60:	4603      	mov	r3, r0
   b6a62:	4906      	ldr	r1, [pc, #24]	; (b6a7c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6a64:	4804      	ldr	r0, [pc, #16]	; (b6a78 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6a66:	464a      	mov	r2, r9
   b6a68:	f7ff ff8c 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6a6c:	2500      	movs	r5, #0
   b6a6e:	e7ee      	b.n	b6a4e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6a70:	2501      	movs	r5, #1
   b6a72:	e7ec      	b.n	b6a4e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6a74:	000c0558 	.word	0x000c0558
   b6a78:	2003e434 	.word	0x2003e434
   b6a7c:	000c057d 	.word	0x000c057d

000b6a80 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6a80:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6a82:	9300      	str	r3, [sp, #0]
   b6a84:	2301      	movs	r3, #1
   b6a86:	f7ff ffad 	bl	b69e4 <_ZN6AB180513readRegistersEhPhjb>
}
   b6a8a:	b003      	add	sp, #12
   b6a8c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a90 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6a90:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6a92:	8943      	ldrh	r3, [r0, #10]
   b6a94:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b6a96:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b6a98:	d010      	beq.n	b6abc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6a9a:	4e19      	ldr	r6, [pc, #100]	; (b6b00 <_ZN6AB180510detectChipEv+0x70>)
   b6a9c:	4d19      	ldr	r5, [pc, #100]	; (b6b04 <_ZN6AB180510detectChipEv+0x74>)
   b6a9e:	f004 f99f 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b6aa2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6aa6:	d209      	bcs.n	b6abc <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6aa8:	8960      	ldrh	r0, [r4, #10]
   b6aaa:	f007 fe67 	bl	be77c <digitalRead>
   b6aae:	2801      	cmp	r0, #1
   b6ab0:	d004      	beq.n	b6abc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6ab2:	4631      	mov	r1, r6
   b6ab4:	4628      	mov	r0, r5
   b6ab6:	f7fd fb11 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6aba:	e7f0      	b.n	b6a9e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6abc:	2301      	movs	r3, #1
   b6abe:	f10d 0207 	add.w	r2, sp, #7
   b6ac2:	2128      	movs	r1, #40	; 0x28
   b6ac4:	4620      	mov	r0, r4
   b6ac6:	f7ff ffdb 	bl	b6a80 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6aca:	b930      	cbnz	r0, b6ada <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6acc:	480d      	ldr	r0, [pc, #52]	; (b6b04 <_ZN6AB180510detectChipEv+0x74>)
   b6ace:	490e      	ldr	r1, [pc, #56]	; (b6b08 <_ZN6AB180510detectChipEv+0x78>)
   b6ad0:	f7fd fb04 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6ad4:	2000      	movs	r0, #0
}
   b6ad6:	b002      	add	sp, #8
   b6ad8:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6ada:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6ade:	2b18      	cmp	r3, #24
   b6ae0:	d1f4      	bne.n	b6acc <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6ae2:	2301      	movs	r3, #1
   b6ae4:	f10d 0207 	add.w	r2, sp, #7
   b6ae8:	2129      	movs	r1, #41	; 0x29
   b6aea:	4620      	mov	r0, r4
   b6aec:	f7ff ffc8 	bl	b6a80 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6af0:	2800      	cmp	r0, #0
   b6af2:	d0eb      	beq.n	b6acc <_ZN6AB180510detectChipEv+0x3c>
   b6af4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6af8:	2b05      	cmp	r3, #5
   b6afa:	d1e7      	bne.n	b6acc <_ZN6AB180510detectChipEv+0x3c>
   b6afc:	e7eb      	b.n	b6ad6 <_ZN6AB180510detectChipEv+0x46>
   b6afe:	bf00      	nop
   b6b00:	000c05a1 	.word	0x000c05a1
   b6b04:	2003e434 	.word	0x2003e434
   b6b08:	000c05b6 	.word	0x000c05b6

000b6b0c <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6b0c:	b507      	push	{r0, r1, r2, lr}
   b6b0e:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6b10:	2200      	movs	r2, #0
   b6b12:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6b16:	f10d 0207 	add.w	r2, sp, #7
   b6b1a:	f7ff ffb1 	bl	b6a80 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6b1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6b22:	b003      	add	sp, #12
   b6b24:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b28 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b2c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6b30:	4604      	mov	r4, r0
   b6b32:	460f      	mov	r7, r1
   b6b34:	4615      	mov	r5, r2
   b6b36:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6b38:	f1b8 0f00 	cmp.w	r8, #0
   b6b3c:	d002      	beq.n	b6b44 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b6b3e:	6840      	ldr	r0, [r0, #4]
   b6b40:	f005 facc 	bl	bc0dc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6b44:	7a21      	ldrb	r1, [r4, #8]
   b6b46:	6860      	ldr	r0, [r4, #4]
   b6b48:	f005 faa5 	bl	bc096 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6b4c:	6860      	ldr	r0, [r4, #4]
   b6b4e:	6803      	ldr	r3, [r0, #0]
   b6b50:	4639      	mov	r1, r7
   b6b52:	689b      	ldr	r3, [r3, #8]
   b6b54:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6b56:	442e      	add	r6, r5
   b6b58:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b6b5a:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6b5c:	d005      	beq.n	b6b6a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b6b5e:	6803      	ldr	r3, [r0, #0]
   b6b60:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6b64:	689b      	ldr	r3, [r3, #8]
   b6b66:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6b68:	e7f6      	b.n	b6b58 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6b6a:	2101      	movs	r1, #1
   b6b6c:	f005 fab2 	bl	bc0d4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6b70:	4603      	mov	r3, r0
   b6b72:	b170      	cbz	r0, b6b92 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6b74:	4908      	ldr	r1, [pc, #32]	; (b6b98 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6b76:	4809      	ldr	r0, [pc, #36]	; (b6b9c <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6b78:	463a      	mov	r2, r7
   b6b7a:	f7ff ff03 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6b7e:	2500      	movs	r5, #0
    }

    if (lock) {
   b6b80:	f1b8 0f00 	cmp.w	r8, #0
   b6b84:	d002      	beq.n	b6b8c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6b86:	6860      	ldr	r0, [r4, #4]
   b6b88:	f005 fab1 	bl	bc0ee <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6b8c:	4628      	mov	r0, r5
   b6b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6b92:	2501      	movs	r5, #1
   b6b94:	e7f4      	b.n	b6b80 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6b96:	bf00      	nop
   b6b98:	000c05c3 	.word	0x000c05c3
   b6b9c:	2003e434 	.word	0x2003e434

000b6ba0 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6ba2:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6ba6:	9300      	str	r3, [sp, #0]
   b6ba8:	f10d 020f 	add.w	r2, sp, #15
   b6bac:	2301      	movs	r3, #1
   b6bae:	f7ff ffbb 	bl	b6b28 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b6bb2:	b005      	add	sp, #20
   b6bb4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6bb8 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6bba:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6bbc:	460c      	mov	r4, r1
   b6bbe:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b6bc0:	491a      	ldr	r1, [pc, #104]	; (b6c2c <_ZN6AB18056setWDTEi+0x74>)
   b6bc2:	481b      	ldr	r0, [pc, #108]	; (b6c30 <_ZN6AB18056setWDTEi+0x78>)
   b6bc4:	f7fd fa8a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6bc8:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6bca:	bfb8      	it	lt
   b6bcc:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b6bce:	b97c      	cbnz	r4, b6bf0 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b6bd0:	2301      	movs	r3, #1
   b6bd2:	4622      	mov	r2, r4
   b6bd4:	211b      	movs	r1, #27
   b6bd6:	4628      	mov	r0, r5
   b6bd8:	f7ff ffe2 	bl	b6ba0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6bdc:	4915      	ldr	r1, [pc, #84]	; (b6c34 <_ZN6AB18056setWDTEi+0x7c>)
   b6bde:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b6be0:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6be2:	4813      	ldr	r0, [pc, #76]	; (b6c30 <_ZN6AB18056setWDTEi+0x78>)
   b6be4:	f7ff fedc 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6be8:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6bea:	616c      	str	r4, [r5, #20]
}
   b6bec:	4630      	mov	r0, r6
   b6bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6bf0:	2c03      	cmp	r4, #3
   b6bf2:	dd19      	ble.n	b6c28 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6bf4:	10a7      	asrs	r7, r4, #2
   b6bf6:	2f1f      	cmp	r7, #31
   b6bf8:	bfa8      	it	ge
   b6bfa:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6bfc:	00ba      	lsls	r2, r7, #2
   b6bfe:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6c02:	2301      	movs	r3, #1
   b6c04:	b2d2      	uxtb	r2, r2
   b6c06:	211b      	movs	r1, #27
   b6c08:	4628      	mov	r0, r5
   b6c0a:	f7ff ffc9 	bl	b6ba0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6c0e:	463a      	mov	r2, r7
   b6c10:	4603      	mov	r3, r0
   b6c12:	4909      	ldr	r1, [pc, #36]	; (b6c38 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6c14:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6c16:	4806      	ldr	r0, [pc, #24]	; (b6c30 <_ZN6AB18056setWDTEi+0x78>)
   b6c18:	f7ff fec2 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6c1c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6c20:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6c22:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6c24:	616f      	str	r7, [r5, #20]
   b6c26:	e7e1      	b.n	b6bec <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6c28:	2701      	movs	r7, #1
   b6c2a:	e7e7      	b.n	b6bfc <_ZN6AB18056setWDTEi+0x44>
   b6c2c:	000c05e8 	.word	0x000c05e8
   b6c30:	2003e434 	.word	0x2003e434
   b6c34:	000c05f2 	.word	0x000c05f2
   b6c38:	000c060e 	.word	0x000c060e

000b6c3c <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6c3c:	4b06      	ldr	r3, [pc, #24]	; (b6c58 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6c3e:	681a      	ldr	r2, [r3, #0]
   b6c40:	b14a      	cbz	r2, b6c56 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6c42:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6c46:	430b      	orrs	r3, r1
   b6c48:	d105      	bne.n	b6c56 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b6c4a:	68d3      	ldr	r3, [r2, #12]
   b6c4c:	b11b      	cbz	r3, b6c56 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6c4e:	2100      	movs	r1, #0
   b6c50:	4610      	mov	r0, r2
   b6c52:	f7ff bfb1 	b.w	b6bb8 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6c56:	4770      	bx	lr
   b6c58:	2003e438 	.word	0x2003e438

000b6c5c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6c5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6c60:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6c64:	4605      	mov	r5, r0
   b6c66:	4616      	mov	r6, r2
   b6c68:	461f      	mov	r7, r3
    if (lock) {
   b6c6a:	f1b8 0f00 	cmp.w	r8, #0
   b6c6e:	d004      	beq.n	b6c7a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6c70:	6840      	ldr	r0, [r0, #4]
   b6c72:	9101      	str	r1, [sp, #4]
   b6c74:	f005 fa32 	bl	bc0dc <_ZN7TwoWire4lockEv>
   b6c78:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6c7a:	9101      	str	r1, [sp, #4]
   b6c7c:	2300      	movs	r3, #0
   b6c7e:	f10d 020f 	add.w	r2, sp, #15
   b6c82:	4628      	mov	r0, r5
   b6c84:	f7ff fefc 	bl	b6a80 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6c88:	4604      	mov	r4, r0
   b6c8a:	b160      	cbz	r0, b6ca6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6c8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6c90:	ea03 0206 	and.w	r2, r3, r6
   b6c94:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6c96:	4293      	cmp	r3, r2
   b6c98:	d005      	beq.n	b6ca6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6c9a:	9901      	ldr	r1, [sp, #4]
   b6c9c:	2300      	movs	r3, #0
   b6c9e:	4628      	mov	r0, r5
   b6ca0:	f7ff ff7e 	bl	b6ba0 <_ZN6AB180513writeRegisterEhhb>
   b6ca4:	4604      	mov	r4, r0
    if (lock) {
   b6ca6:	f1b8 0f00 	cmp.w	r8, #0
   b6caa:	d002      	beq.n	b6cb2 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6cac:	6868      	ldr	r0, [r5, #4]
   b6cae:	f005 fa1e 	bl	bc0ee <_ZN7TwoWire6unlockEv>
}
   b6cb2:	4620      	mov	r0, r4
   b6cb4:	b004      	add	sp, #16
   b6cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6cba <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6cba:	b513      	push	{r0, r1, r4, lr}
   b6cbc:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6cbe:	f10d 0207 	add.w	r2, sp, #7
   b6cc2:	f7ff fedd 	bl	b6a80 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b6cc6:	b128      	cbz	r0, b6cd4 <_ZN6AB180510isBitClearEhhb+0x1a>
   b6cc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6ccc:	421c      	tst	r4, r3
   b6cce:	bf0c      	ite	eq
   b6cd0:	2001      	moveq	r0, #1
   b6cd2:	2000      	movne	r0, #0
}
   b6cd4:	b002      	add	sp, #8
   b6cd6:	bd10      	pop	{r4, pc}

000b6cd8 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6cd8:	b513      	push	{r0, r1, r4, lr}
   b6cda:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6cdc:	f10d 0207 	add.w	r2, sp, #7
   b6ce0:	f7ff fece 	bl	b6a80 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6ce4:	b128      	cbz	r0, b6cf2 <_ZN6AB18058isBitSetEhhb+0x1a>
   b6ce6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6cea:	421c      	tst	r4, r3
   b6cec:	bf14      	ite	ne
   b6cee:	2001      	movne	r0, #1
   b6cf0:	2000      	moveq	r0, #0
}
   b6cf2:	b002      	add	sp, #8
   b6cf4:	bd10      	pop	{r4, pc}

000b6cf6 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6cf6:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6cf8:	43d2      	mvns	r2, r2
   b6cfa:	9300      	str	r3, [sp, #0]
   b6cfc:	b2d2      	uxtb	r2, r2
   b6cfe:	2300      	movs	r3, #0
   b6d00:	f7ff ffac 	bl	b6c5c <_ZN6AB180512maskRegisterEhhhb>
}
   b6d04:	b003      	add	sp, #12
   b6d06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6d0c <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6d0e:	2301      	movs	r3, #1
   b6d10:	f10d 0207 	add.w	r2, sp, #7
   b6d14:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6d16:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6d18:	f7ff feb2 	bl	b6a80 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6d1c:	4605      	mov	r5, r0
   b6d1e:	b938      	cbnz	r0, b6d30 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6d20:	491e      	ldr	r1, [pc, #120]	; (b6d9c <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6d22:	481f      	ldr	r0, [pc, #124]	; (b6da0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6d24:	22ad      	movs	r2, #173	; 0xad
   b6d26:	f7ff fe2d 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
}
   b6d2a:	4628      	mov	r0, r5
   b6d2c:	b003      	add	sp, #12
   b6d2e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6d30:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6d34:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6d38:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6d3c:	d00b      	beq.n	b6d56 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6d3e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6d40:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6d42:	210f      	movs	r1, #15
   b6d44:	4620      	mov	r0, r4
   b6d46:	f7ff ffd6 	bl	b6cf6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b6d4a:	4a16      	ldr	r2, [pc, #88]	; (b6da4 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6d4c:	4916      	ldr	r1, [pc, #88]	; (b6da8 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6d4e:	4814      	ldr	r0, [pc, #80]	; (b6da0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6d50:	f7fd f9c4 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6d54:	e7e9      	b.n	b6d2a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b6d56:	2208      	movs	r2, #8
   b6d58:	2117      	movs	r1, #23
   b6d5a:	4620      	mov	r0, r4
   b6d5c:	f7ff ffbc 	bl	b6cd8 <_ZN6AB18058isBitSetEhhb>
   b6d60:	b118      	cbz	r0, b6d6a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6d62:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6d64:	4a11      	ldr	r2, [pc, #68]	; (b6dac <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6d66:	61e3      	str	r3, [r4, #28]
   b6d68:	e7f0      	b.n	b6d4c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b6d6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6d6e:	071a      	lsls	r2, r3, #28
   b6d70:	d509      	bpl.n	b6d86 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6d72:	2303      	movs	r3, #3
   b6d74:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6d76:	2208      	movs	r2, #8
   b6d78:	2301      	movs	r3, #1
   b6d7a:	210f      	movs	r1, #15
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	f7ff ffba 	bl	b6cf6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6d82:	4a0b      	ldr	r2, [pc, #44]	; (b6db0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6d84:	e7e2      	b.n	b6d4c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6d86:	075b      	lsls	r3, r3, #29
   b6d88:	d5cf      	bpl.n	b6d2a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b6d8a:	2204      	movs	r2, #4
   b6d8c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b6d8e:	2301      	movs	r3, #1
   b6d90:	210f      	movs	r1, #15
   b6d92:	4620      	mov	r0, r4
   b6d94:	f7ff ffaf 	bl	b6cf6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6d98:	4a06      	ldr	r2, [pc, #24]	; (b6db4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b6d9a:	e7d7      	b.n	b6d4c <_ZN6AB180516updateWakeReasonEv+0x40>
   b6d9c:	000c0661 	.word	0x000c0661
   b6da0:	2003e434 	.word	0x2003e434
   b6da4:	000c0632 	.word	0x000c0632
   b6da8:	000c0680 	.word	0x000c0680
   b6dac:	000c063b 	.word	0x000c063b
   b6db0:	000c064b 	.word	0x000c064b
   b6db4:	000c065b 	.word	0x000c065b

000b6db8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6db8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b6dba:	9300      	str	r3, [sp, #0]
   b6dbc:	4613      	mov	r3, r2
   b6dbe:	22ff      	movs	r2, #255	; 0xff
   b6dc0:	f7ff ff4c 	bl	b6c5c <_ZN6AB180512maskRegisterEhhhb>
}
   b6dc4:	b003      	add	sp, #12
   b6dc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6dcc <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6dce:	460f      	mov	r7, r1
   b6dd0:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6dd2:	2301      	movs	r3, #1
   b6dd4:	2200      	movs	r2, #0
   b6dd6:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6dd8:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6dda:	f7ff fee1 	bl	b6ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6dde:	4604      	mov	r4, r0
   b6de0:	b938      	cbnz	r0, b6df2 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b6de2:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b6de6:	491f      	ldr	r1, [pc, #124]	; (b6e64 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b6de8:	481f      	ldr	r0, [pc, #124]	; (b6e68 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b6dea:	f7ff fdcb 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
}
   b6dee:	4620      	mov	r0, r4
   b6df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6df2:	2301      	movs	r3, #1
   b6df4:	2223      	movs	r2, #35	; 0x23
   b6df6:	2118      	movs	r1, #24
   b6df8:	4628      	mov	r0, r5
   b6dfa:	f7ff fed1 	bl	b6ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6dfe:	4604      	mov	r4, r0
   b6e00:	b910      	cbnz	r0, b6e08 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6e02:	f240 229b 	movw	r2, #667	; 0x29b
   b6e06:	e7ee      	b.n	b6de6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b6e08:	2fff      	cmp	r7, #255	; 0xff
   b6e0a:	bfa8      	it	ge
   b6e0c:	27ff      	movge	r7, #255	; 0xff
   b6e0e:	2f01      	cmp	r7, #1
   b6e10:	bfb8      	it	lt
   b6e12:	2701      	movlt	r7, #1
   b6e14:	2301      	movs	r3, #1
   b6e16:	b2fa      	uxtb	r2, r7
   b6e18:	2119      	movs	r1, #25
   b6e1a:	4628      	mov	r0, r5
   b6e1c:	f7ff fec0 	bl	b6ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6e20:	4604      	mov	r4, r0
   b6e22:	b910      	cbnz	r0, b6e2a <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6e24:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b6e28:	e7dd      	b.n	b6de6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b6e2a:	2301      	movs	r3, #1
   b6e2c:	2208      	movs	r2, #8
   b6e2e:	2112      	movs	r1, #18
   b6e30:	4628      	mov	r0, r5
   b6e32:	f7ff ffc1 	bl	b6db8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6e36:	4604      	mov	r4, r0
   b6e38:	b910      	cbnz	r0, b6e40 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b6e3a:	f240 22af 	movw	r2, #687	; 0x2af
   b6e3e:	e7d2      	b.n	b6de6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6e40:	2e00      	cmp	r6, #0
   b6e42:	bf14      	ite	ne
   b6e44:	2203      	movne	r2, #3
   b6e46:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b6e48:	2301      	movs	r3, #1
   b6e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b6e4e:	2118      	movs	r1, #24
   b6e50:	4628      	mov	r0, r5
   b6e52:	f7ff fea5 	bl	b6ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6e56:	4604      	mov	r4, r0
   b6e58:	2800      	cmp	r0, #0
   b6e5a:	d1c8      	bne.n	b6dee <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b6e5c:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6e60:	e7c1      	b.n	b6de6 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6e62:	bf00      	nop
   b6e64:	000c0691 	.word	0x000c0691
   b6e68:	2003e434 	.word	0x2003e434

000b6e6c <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b6e70:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b6e72:	4605      	mov	r5, r0
   b6e74:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6e76:	484f      	ldr	r0, [pc, #316]	; (b6fb4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6e78:	494f      	ldr	r1, [pc, #316]	; (b6fb8 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b6e7a:	f7fd f92f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b6e7e:	2100      	movs	r1, #0
   b6e80:	4628      	mov	r0, r5
   b6e82:	f7ff fe99 	bl	b6bb8 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6e86:	4604      	mov	r4, r0
   b6e88:	b948      	cbnz	r0, b6e9e <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b6e8a:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b6e8e:	494b      	ldr	r1, [pc, #300]	; (b6fbc <_ZN6AB180513deepPowerDownEi+0x150>)
   b6e90:	4848      	ldr	r0, [pc, #288]	; (b6fb4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6e92:	f7ff fd77 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
}
   b6e96:	4620      	mov	r0, r4
   b6e98:	b003      	add	sp, #12
   b6e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b6e9e:	2301      	movs	r3, #1
   b6ea0:	461a      	mov	r2, r3
   b6ea2:	2130      	movs	r1, #48	; 0x30
   b6ea4:	4628      	mov	r0, r5
   b6ea6:	f7ff ff87 	bl	b6db8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6eaa:	4604      	mov	r4, r0
   b6eac:	b910      	cbnz	r0, b6eb4 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b6eae:	f240 2205 	movw	r2, #517	; 0x205
   b6eb2:	e7ec      	b.n	b6e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6eb4:	2210      	movs	r2, #16
   b6eb6:	2301      	movs	r3, #1
   b6eb8:	4611      	mov	r1, r2
   b6eba:	4628      	mov	r0, r5
   b6ebc:	f7ff ff1b 	bl	b6cf6 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b6ec0:	4604      	mov	r4, r0
   b6ec2:	b910      	cbnz	r0, b6eca <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6ec4:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b6ec8:	e7e1      	b.n	b6e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b6eca:	2301      	movs	r3, #1
   b6ecc:	2226      	movs	r2, #38	; 0x26
   b6ece:	2113      	movs	r1, #19
   b6ed0:	4628      	mov	r0, r5
   b6ed2:	f7ff fe65 	bl	b6ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6ed6:	4604      	mov	r4, r0
   b6ed8:	b910      	cbnz	r0, b6ee0 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b6eda:	f240 2213 	movw	r2, #531	; 0x213
   b6ede:	e7d6      	b.n	b6e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b6ee0:	2601      	movs	r6, #1
   b6ee2:	9600      	str	r6, [sp, #0]
   b6ee4:	4633      	mov	r3, r6
   b6ee6:	22fc      	movs	r2, #252	; 0xfc
   b6ee8:	2111      	movs	r1, #17
   b6eea:	4628      	mov	r0, r5
   b6eec:	f7ff feb6 	bl	b6c5c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6ef0:	4604      	mov	r4, r0
   b6ef2:	b910      	cbnz	r0, b6efa <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6ef4:	f240 221b 	movw	r2, #539	; 0x21b
   b6ef8:	e7c9      	b.n	b6e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b6efa:	2200      	movs	r2, #0
   b6efc:	4639      	mov	r1, r7
   b6efe:	4628      	mov	r0, r5
   b6f00:	f7ff ff64 	bl	b6dcc <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6f04:	4604      	mov	r4, r0
   b6f06:	b910      	cbnz	r0, b6f0e <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b6f08:	f240 2222 	movw	r2, #546	; 0x222
   b6f0c:	e7bf      	b.n	b6e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b6f0e:	9600      	str	r6, [sp, #0]
   b6f10:	2302      	movs	r3, #2
   b6f12:	2277      	movs	r2, #119	; 0x77
   b6f14:	2110      	movs	r1, #16
   b6f16:	4628      	mov	r0, r5
   b6f18:	f7ff fea0 	bl	b6c5c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6f1c:	4604      	mov	r4, r0
   b6f1e:	b910      	cbnz	r0, b6f26 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6f20:	f240 222b 	movw	r2, #555	; 0x22b
   b6f24:	e7b3      	b.n	b6e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6f26:	4633      	mov	r3, r6
   b6f28:	2204      	movs	r2, #4
   b6f2a:	211c      	movs	r1, #28
   b6f2c:	4628      	mov	r0, r5
   b6f2e:	f7ff ff43 	bl	b6db8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6f32:	4604      	mov	r4, r0
   b6f34:	b910      	cbnz	r0, b6f3c <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6f36:	f240 2232 	movw	r2, #562	; 0x232
   b6f3a:	e7a8      	b.n	b6e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6f3c:	9600      	str	r6, [sp, #0]
   b6f3e:	2318      	movs	r3, #24
   b6f40:	22e3      	movs	r2, #227	; 0xe3
   b6f42:	2111      	movs	r1, #17
   b6f44:	4628      	mov	r0, r5
   b6f46:	f7ff fe89 	bl	b6c5c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6f4a:	4604      	mov	r4, r0
   b6f4c:	b910      	cbnz	r0, b6f54 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b6f4e:	f240 2239 	movw	r2, #569	; 0x239
   b6f52:	e79c      	b.n	b6e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6f54:	4633      	mov	r3, r6
   b6f56:	22c0      	movs	r2, #192	; 0xc0
   b6f58:	2117      	movs	r1, #23
   b6f5a:	4628      	mov	r0, r5
   b6f5c:	f7ff fe20 	bl	b6ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6f60:	4604      	mov	r4, r0
   b6f62:	b910      	cbnz	r0, b6f6a <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6f64:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6f68:	e791      	b.n	b6e8e <_ZN6AB180513deepPowerDownEi+0x22>
   b6f6a:	f003 ff39 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6f6e:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6fc4 <_ZN6AB180513deepPowerDownEi+0x158>
   b6f72:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6fb4 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6f76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6f7a:	4606      	mov	r6, r0
   b6f7c:	434f      	muls	r7, r1
   b6f7e:	f003 ff2f 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
   b6f82:	1b80      	subs	r0, r0, r6
   b6f84:	42b8      	cmp	r0, r7
   b6f86:	d20e      	bcs.n	b6fa6 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6f88:	2201      	movs	r2, #1
   b6f8a:	2117      	movs	r1, #23
   b6f8c:	4628      	mov	r0, r5
   b6f8e:	f7ff fdbd 	bl	b6b0c <_ZN6AB180512readRegisterEhb>
   b6f92:	4649      	mov	r1, r9
   b6f94:	4602      	mov	r2, r0
   b6f96:	4640      	mov	r0, r8
   b6f98:	f7fd f8a0 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6fa0:	f004 fb3a 	bl	bb618 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6fa4:	e7eb      	b.n	b6f7e <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6fa6:	4906      	ldr	r1, [pc, #24]	; (b6fc0 <_ZN6AB180513deepPowerDownEi+0x154>)
   b6fa8:	4802      	ldr	r0, [pc, #8]	; (b6fb4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6faa:	f7ff fceb 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b6fae:	f006 ffd0 	bl	bdf52 <_ZN11SystemClass5resetEv>
    return true;
   b6fb2:	e770      	b.n	b6e96 <_ZN6AB180513deepPowerDownEi+0x2a>
   b6fb4:	2003e434 	.word	0x2003e434
   b6fb8:	000c06bc 	.word	0x000c06bc
   b6fbc:	000c06b1 	.word	0x000c06b1
   b6fc0:	000c06e2 	.word	0x000c06e2
   b6fc4:	000c06cd 	.word	0x000c06cd

000b6fc8 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b6fc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6fcc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6fd0:	4605      	mov	r5, r0
   b6fd2:	460c      	mov	r4, r1
   b6fd4:	4691      	mov	r9, r2
   b6fd6:	461f      	mov	r7, r3
    if (lock) {
   b6fd8:	f1ba 0f00 	cmp.w	sl, #0
   b6fdc:	d002      	beq.n	b6fe4 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6fde:	6840      	ldr	r0, [r0, #4]
   b6fe0:	f005 f87c 	bl	bc0dc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6fe4:	b307      	cbz	r7, b7028 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b6fe6:	2f20      	cmp	r7, #32
   b6fe8:	463e      	mov	r6, r7
   b6fea:	bf28      	it	cs
   b6fec:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6fee:	2c7f      	cmp	r4, #127	; 0x7f
   b6ff0:	d826      	bhi.n	b7040 <_ZN6AB18057readRamEjPhjb+0x78>
   b6ff2:	1933      	adds	r3, r6, r4
   b6ff4:	2b80      	cmp	r3, #128	; 0x80
   b6ff6:	d901      	bls.n	b6ffc <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6ff8:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6ffc:	2301      	movs	r3, #1
   b6ffe:	2204      	movs	r2, #4
   b7000:	213f      	movs	r1, #63	; 0x3f
   b7002:	4628      	mov	r0, r5
   b7004:	f7ff fe77 	bl	b6cf6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7008:	2300      	movs	r3, #0
   b700a:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b700e:	9300      	str	r3, [sp, #0]
   b7010:	464a      	mov	r2, r9
   b7012:	4633      	mov	r3, r6
   b7014:	b2c9      	uxtb	r1, r1
   b7016:	4628      	mov	r0, r5
   b7018:	f7ff fce4 	bl	b69e4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b701c:	4680      	mov	r8, r0
   b701e:	b128      	cbz	r0, b702c <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b7020:	4434      	add	r4, r6
        dataLen -= count;
   b7022:	1bbf      	subs	r7, r7, r6
        data += count;
   b7024:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7026:	e7dd      	b.n	b6fe4 <_ZN6AB18057readRamEjPhjb+0x1c>
   b7028:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b702c:	f1ba 0f00 	cmp.w	sl, #0
   b7030:	d002      	beq.n	b7038 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b7032:	6868      	ldr	r0, [r5, #4]
   b7034:	f005 f85b 	bl	bc0ee <_ZN7TwoWire6unlockEv>
}
   b7038:	4640      	mov	r0, r8
   b703a:	b002      	add	sp, #8
   b703c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7040:	2301      	movs	r3, #1
   b7042:	2204      	movs	r2, #4
   b7044:	213f      	movs	r1, #63	; 0x3f
   b7046:	4628      	mov	r0, r5
   b7048:	f7ff feb6 	bl	b6db8 <_ZN6AB180514setRegisterBitEhhb>
   b704c:	e7dc      	b.n	b7008 <_ZN6AB18057readRamEjPhjb+0x40>

000b704e <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b704e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7052:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7056:	4605      	mov	r5, r0
   b7058:	460c      	mov	r4, r1
   b705a:	4691      	mov	r9, r2
   b705c:	461f      	mov	r7, r3
    if (lock) {
   b705e:	f1ba 0f00 	cmp.w	sl, #0
   b7062:	d002      	beq.n	b706a <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b7064:	6840      	ldr	r0, [r0, #4]
   b7066:	f005 f839 	bl	bc0dc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b706a:	b307      	cbz	r7, b70ae <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b706c:	2f1f      	cmp	r7, #31
   b706e:	463e      	mov	r6, r7
   b7070:	bf28      	it	cs
   b7072:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7074:	2c7f      	cmp	r4, #127	; 0x7f
   b7076:	d826      	bhi.n	b70c6 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b7078:	1933      	adds	r3, r6, r4
   b707a:	2b80      	cmp	r3, #128	; 0x80
   b707c:	d901      	bls.n	b7082 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b707e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7082:	2301      	movs	r3, #1
   b7084:	2204      	movs	r2, #4
   b7086:	213f      	movs	r1, #63	; 0x3f
   b7088:	4628      	mov	r0, r5
   b708a:	f7ff fe34 	bl	b6cf6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b708e:	2300      	movs	r3, #0
   b7090:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b7094:	9300      	str	r3, [sp, #0]
   b7096:	464a      	mov	r2, r9
   b7098:	4633      	mov	r3, r6
   b709a:	b2c9      	uxtb	r1, r1
   b709c:	4628      	mov	r0, r5
   b709e:	f7ff fd43 	bl	b6b28 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b70a2:	4680      	mov	r8, r0
   b70a4:	b128      	cbz	r0, b70b2 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b70a6:	4434      	add	r4, r6
        dataLen -= count;
   b70a8:	1bbf      	subs	r7, r7, r6
        data += count;
   b70aa:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b70ac:	e7dd      	b.n	b706a <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b70ae:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b70b2:	f1ba 0f00 	cmp.w	sl, #0
   b70b6:	d002      	beq.n	b70be <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b70b8:	6868      	ldr	r0, [r5, #4]
   b70ba:	f005 f818 	bl	bc0ee <_ZN7TwoWire6unlockEv>
}
   b70be:	4640      	mov	r0, r8
   b70c0:	b002      	add	sp, #8
   b70c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b70c6:	2301      	movs	r3, #1
   b70c8:	2204      	movs	r2, #4
   b70ca:	213f      	movs	r1, #63	; 0x3f
   b70cc:	4628      	mov	r0, r5
   b70ce:	f7ff fe73 	bl	b6db8 <_ZN6AB180514setRegisterBitEhhb>
   b70d2:	e7dc      	b.n	b708e <_ZN6AB18058writeRamEjPKhjb+0x40>

000b70d4 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b70d4:	b530      	push	{r4, r5, lr}
   b70d6:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b70d8:	680d      	ldr	r5, [r1, #0]
   b70da:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b70de:	9503      	str	r5, [sp, #12]
   b70e0:	684d      	ldr	r5, [r1, #4]
   b70e2:	9502      	str	r5, [sp, #8]
   b70e4:	688d      	ldr	r5, [r1, #8]
   b70e6:	9501      	str	r5, [sp, #4]
   b70e8:	68c9      	ldr	r1, [r1, #12]
   b70ea:	9100      	str	r1, [sp, #0]
   b70ec:	3301      	adds	r3, #1
   b70ee:	4904      	ldr	r1, [pc, #16]	; (b7100 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b70f0:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b70f4:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b70f6:	f006 fec5 	bl	bde84 <_ZN6String6formatEPKcz>
}
   b70fa:	4620      	mov	r0, r4
   b70fc:	b005      	add	sp, #20
   b70fe:	bd30      	pop	{r4, r5, pc}
   b7100:	000c06f4 	.word	0x000c06f4

000b7104 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b7104:	0903      	lsrs	r3, r0, #4
}
   b7106:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b7108:	f000 000f 	and.w	r0, r0, #15
}
   b710c:	fb02 0003 	mla	r0, r2, r3, r0
   b7110:	4770      	bx	lr

000b7112 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7112:	b538      	push	{r3, r4, r5, lr}
   b7114:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b7116:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7118:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b711a:	f7ff fff3 	bl	b7104 <_ZN6AB180510bcdToValueEh>
   b711e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b7120:	7860      	ldrb	r0, [r4, #1]
   b7122:	f7ff ffef 	bl	b7104 <_ZN6AB180510bcdToValueEh>
   b7126:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b7128:	78a0      	ldrb	r0, [r4, #2]
   b712a:	f7ff ffeb 	bl	b7104 <_ZN6AB180510bcdToValueEh>
   b712e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b7130:	78e0      	ldrb	r0, [r4, #3]
   b7132:	f7ff ffe7 	bl	b7104 <_ZN6AB180510bcdToValueEh>
   b7136:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7138:	7920      	ldrb	r0, [r4, #4]
   b713a:	f7ff ffe3 	bl	b7104 <_ZN6AB180510bcdToValueEh>
   b713e:	3801      	subs	r0, #1
   b7140:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b7142:	b92d      	cbnz	r5, b7150 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7144:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b7146:	7828      	ldrb	r0, [r5, #0]
   b7148:	f7ff ffdc 	bl	b7104 <_ZN6AB180510bcdToValueEh>
   b714c:	6188      	str	r0, [r1, #24]
}
   b714e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7150:	7960      	ldrb	r0, [r4, #5]
   b7152:	f7ff ffd7 	bl	b7104 <_ZN6AB180510bcdToValueEh>
   b7156:	3064      	adds	r0, #100	; 0x64
   b7158:	1da5      	adds	r5, r4, #6
   b715a:	6148      	str	r0, [r1, #20]
   b715c:	e7f3      	b.n	b7146 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7160 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7160:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7162:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7164:	b088      	sub	sp, #32
   b7166:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7168:	461a      	mov	r2, r3
   b716a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b716c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b716e:	f7ff fda4 	bl	b6cba <_ZN6AB180510isBitClearEhhb>
   b7172:	b1f0      	cbz	r0, b71b2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b7174:	2308      	movs	r3, #8
   b7176:	2601      	movs	r6, #1
   b7178:	4620      	mov	r0, r4
   b717a:	9600      	str	r6, [sp, #0]
   b717c:	eb0d 0203 	add.w	r2, sp, r3
   b7180:	2100      	movs	r1, #0
   b7182:	f7ff fc2f 	bl	b69e4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b7186:	4604      	mov	r4, r0
   b7188:	b198      	cbz	r0, b71b2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b718a:	4632      	mov	r2, r6
   b718c:	4629      	mov	r1, r5
   b718e:	f10d 0009 	add.w	r0, sp, #9
   b7192:	f7ff ffbe 	bl	b7112 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b7196:	a804      	add	r0, sp, #16
   b7198:	f7ff ff9c 	bl	b70d4 <_ZN6AB180510tmToStringEPK2tm>
   b719c:	4808      	ldr	r0, [pc, #32]	; (b71c0 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b719e:	9a04      	ldr	r2, [sp, #16]
   b71a0:	4908      	ldr	r1, [pc, #32]	; (b71c4 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b71a2:	f7fc ff9b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b71a6:	a804      	add	r0, sp, #16
   b71a8:	f006 fd20 	bl	bdbec <_ZN6StringD1Ev>
}
   b71ac:	4620      	mov	r0, r4
   b71ae:	b008      	add	sp, #32
   b71b0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b71b2:	2224      	movs	r2, #36	; 0x24
   b71b4:	2100      	movs	r1, #0
   b71b6:	4628      	mov	r0, r5
   b71b8:	f008 f8fc 	bl	bf3b4 <memset>
   b71bc:	2400      	movs	r4, #0
   b71be:	e7f5      	b.n	b71ac <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b71c0:	2003e434 	.word	0x2003e434
   b71c4:	000c0712 	.word	0x000c0712

000b71c8 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b71c8:	b530      	push	{r4, r5, lr}
   b71ca:	b08b      	sub	sp, #44	; 0x2c
   b71cc:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b71ce:	a901      	add	r1, sp, #4
   b71d0:	f7ff ffc6 	bl	b7160 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b71d4:	4604      	mov	r4, r0
   b71d6:	b120      	cbz	r0, b71e2 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b71d8:	a801      	add	r0, sp, #4
   b71da:	f004 fa15 	bl	bb608 <mktime>
   b71de:	e9c5 0100 	strd	r0, r1, [r5]
}
   b71e2:	4620      	mov	r0, r4
   b71e4:	b00b      	add	sp, #44	; 0x2c
   b71e6:	bd30      	pop	{r4, r5, pc}

000b71e8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b71e8:	230a      	movs	r3, #10
   b71ea:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b71ee:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b71f2:	fb91 f2f3 	sdiv	r2, r1, r3
   b71f6:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b71fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b71fe:	b2c0      	uxtb	r0, r0
   b7200:	4770      	bx	lr

000b7202 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b7202:	b570      	push	{r4, r5, r6, lr}
   b7204:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b7206:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b7208:	460c      	mov	r4, r1
   b720a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b720c:	f7ff ffec 	bl	b71e8 <_ZN6AB180510valueToBcdEi>
   b7210:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b7212:	6868      	ldr	r0, [r5, #4]
   b7214:	f7ff ffe8 	bl	b71e8 <_ZN6AB180510valueToBcdEi>
   b7218:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b721a:	68a8      	ldr	r0, [r5, #8]
   b721c:	f7ff ffe4 	bl	b71e8 <_ZN6AB180510valueToBcdEi>
   b7220:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b7222:	68e8      	ldr	r0, [r5, #12]
   b7224:	f7ff ffe0 	bl	b71e8 <_ZN6AB180510valueToBcdEi>
   b7228:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b722a:	6928      	ldr	r0, [r5, #16]
   b722c:	3001      	adds	r0, #1
   b722e:	f7ff ffdb 	bl	b71e8 <_ZN6AB180510valueToBcdEi>
   b7232:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b7234:	b92e      	cbnz	r6, b7242 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b7236:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b7238:	69a8      	ldr	r0, [r5, #24]
   b723a:	f7ff ffd5 	bl	b71e8 <_ZN6AB180510valueToBcdEi>
   b723e:	7030      	strb	r0, [r6, #0]
}
   b7240:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b7242:	696a      	ldr	r2, [r5, #20]
   b7244:	2364      	movs	r3, #100	; 0x64
   b7246:	fb92 f0f3 	sdiv	r0, r2, r3
   b724a:	fb03 2010 	mls	r0, r3, r0, r2
   b724e:	f7ff ffcb 	bl	b71e8 <_ZN6AB180510valueToBcdEi>
   b7252:	1da6      	adds	r6, r4, #6
   b7254:	7160      	strb	r0, [r4, #5]
   b7256:	e7ef      	b.n	b7238 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b7258 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7258:	b5f0      	push	{r4, r5, r6, r7, lr}
   b725a:	b087      	sub	sp, #28
   b725c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b725e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7260:	4616      	mov	r6, r2
   b7262:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7264:	f7ff ff36 	bl	b70d4 <_ZN6AB180510tmToStringEPK2tm>
   b7268:	481e      	ldr	r0, [pc, #120]	; (b72e4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b726a:	9a02      	ldr	r2, [sp, #8]
   b726c:	491e      	ldr	r1, [pc, #120]	; (b72e8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b726e:	f7fc ff35 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b7272:	a802      	add	r0, sp, #8
   b7274:	f006 fcba 	bl	bdbec <_ZN6StringD1Ev>
    if (lock) {
   b7278:	b116      	cbz	r6, b7280 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b727a:	6868      	ldr	r0, [r5, #4]
   b727c:	f004 ff2e 	bl	bc0dc <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7280:	4620      	mov	r0, r4
   b7282:	2201      	movs	r2, #1
   b7284:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b7288:	2700      	movs	r7, #0
   b728a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b728e:	f7ff ffb8 	bl	b7202 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b7292:	2301      	movs	r3, #1
   b7294:	461a      	mov	r2, r3
   b7296:	2110      	movs	r1, #16
   b7298:	4628      	mov	r0, r5
   b729a:	f7ff fd8d 	bl	b6db8 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b729e:	4604      	mov	r4, r0
   b72a0:	b1e8      	cbz	r0, b72de <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b72a2:	2308      	movs	r3, #8
   b72a4:	9700      	str	r7, [sp, #0]
   b72a6:	eb0d 0203 	add.w	r2, sp, r3
   b72aa:	4639      	mov	r1, r7
   b72ac:	4628      	mov	r0, r5
   b72ae:	f7ff fc3b 	bl	b6b28 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b72b2:	4604      	mov	r4, r0
   b72b4:	b160      	cbz	r0, b72d0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b72b6:	2301      	movs	r3, #1
   b72b8:	461a      	mov	r2, r3
   b72ba:	2110      	movs	r1, #16
   b72bc:	4628      	mov	r0, r5
   b72be:	f7ff fd1a 	bl	b6cf6 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b72c2:	b116      	cbz	r6, b72ca <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b72c4:	6868      	ldr	r0, [r5, #4]
   b72c6:	f004 ff12 	bl	bc0ee <_ZN7TwoWire6unlockEv>
}
   b72ca:	4620      	mov	r0, r4
   b72cc:	b007      	add	sp, #28
   b72ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b72d0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b72d4:	4905      	ldr	r1, [pc, #20]	; (b72ec <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b72d6:	4803      	ldr	r0, [pc, #12]	; (b72e4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b72d8:	f7ff fb54 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
   b72dc:	e7f1      	b.n	b72c2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b72de:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b72e2:	e7f7      	b.n	b72d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b72e4:	2003e434 	.word	0x2003e434
   b72e8:	000c0720 	.word	0x000c0720
   b72ec:	000c072e 	.word	0x000c072e

000b72f0 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b72f0:	b513      	push	{r0, r1, r4, lr}
   b72f2:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b72f4:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b72f6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b72fa:	f008 f80d 	bl	bf318 <gmtime>
    return setRtcFromTm(tm, lock);
   b72fe:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b7302:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b7304:	4620      	mov	r0, r4
   b7306:	f7ff ffa7 	bl	b7258 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b730a:	b002      	add	sp, #8
   b730c:	bd10      	pop	{r4, pc}
	...

000b7310 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b7310:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b7312:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b7314:	b089      	sub	sp, #36	; 0x24
   b7316:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b7318:	bb75      	cbnz	r5, b7378 <_ZN6AB18054loopEv+0x68>
   b731a:	f006 ffe9 	bl	be2f0 <_ZN9TimeClass7isValidEv>
   b731e:	b358      	cbz	r0, b7378 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b7320:	2600      	movs	r6, #0
   b7322:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b7324:	a904      	add	r1, sp, #16
   b7326:	4628      	mov	r0, r5
        tm = 0;
   b7328:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b732c:	f004 f874 	bl	bb418 <spark_sync_time_last>
   b7330:	b310      	cbz	r0, b7378 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b7332:	2501      	movs	r5, #1
   b7334:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b7336:	f006 fff8 	bl	be32a <_ZN9TimeClass3nowEv>
   b733a:	17c3      	asrs	r3, r0, #31
   b733c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b7340:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b7342:	9500      	str	r5, [sp, #0]
   b7344:	4620      	mov	r0, r4
   b7346:	f7ff ffd3 	bl	b72f0 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b734a:	a902      	add	r1, sp, #8
   b734c:	4620      	mov	r0, r4
        time = 0;
   b734e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b7352:	f7ff ff39 	bl	b71c8 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b7356:	4b13      	ldr	r3, [pc, #76]	; (b73a4 <_ZN6AB18054loopEv+0x94>)
   b7358:	4913      	ldr	r1, [pc, #76]	; (b73a8 <_ZN6AB18054loopEv+0x98>)
   b735a:	681b      	ldr	r3, [r3, #0]
   b735c:	9300      	str	r3, [sp, #0]
   b735e:	a804      	add	r0, sp, #16
   b7360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7364:	f006 ff82 	bl	be26c <_ZN9TimeClass6formatExPKc>
   b7368:	4810      	ldr	r0, [pc, #64]	; (b73ac <_ZN6AB18054loopEv+0x9c>)
   b736a:	9a04      	ldr	r2, [sp, #16]
   b736c:	4910      	ldr	r1, [pc, #64]	; (b73b0 <_ZN6AB18054loopEv+0xa0>)
   b736e:	f7fc feb5 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b7372:	a804      	add	r0, sp, #16
   b7374:	f006 fc3a 	bl	bdbec <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b7378:	6963      	ldr	r3, [r4, #20]
   b737a:	b18b      	cbz	r3, b73a0 <_ZN6AB18054loopEv+0x90>
   b737c:	f003 fd30 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b7380:	6923      	ldr	r3, [r4, #16]
   b7382:	1ac0      	subs	r0, r0, r3
   b7384:	6963      	ldr	r3, [r4, #20]
   b7386:	4298      	cmp	r0, r3
   b7388:	d30a      	bcc.n	b73a0 <_ZN6AB18054loopEv+0x90>
   b738a:	f003 fd29 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b738e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b7392:	6120      	str	r0, [r4, #16]
            setWDT();
   b7394:	4620      	mov	r0, r4
}
   b7396:	b009      	add	sp, #36	; 0x24
   b7398:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b739c:	f7ff bc0c 	b.w	b6bb8 <_ZN6AB18056setWDTEi>
}
   b73a0:	b009      	add	sp, #36	; 0x24
   b73a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b73a4:	2003de7c 	.word	0x2003de7c
   b73a8:	2003e6a8 	.word	0x2003e6a8
   b73ac:	2003e434 	.word	0x2003e434
   b73b0:	000c0749 	.word	0x000c0749

000b73b4 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b73b4:	b530      	push	{r4, r5, lr}
   b73b6:	4604      	mov	r4, r0
   b73b8:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b73ba:	b111      	cbz	r1, b73c2 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b73bc:	6840      	ldr	r0, [r0, #4]
   b73be:	f004 fe3b 	bl	bc038 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b73c2:	4620      	mov	r0, r4
   b73c4:	f7ff fb64 	bl	b6a90 <_ZN6AB180510detectChipEv>
   b73c8:	ad06      	add	r5, sp, #24
   b73ca:	2800      	cmp	r0, #0
   b73cc:	d037      	beq.n	b743e <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b73ce:	4620      	mov	r0, r4
   b73d0:	f7ff fc9c 	bl	b6d0c <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b73d4:	2301      	movs	r3, #1
   b73d6:	461a      	mov	r2, r3
   b73d8:	2110      	movs	r1, #16
   b73da:	4620      	mov	r0, r4
   b73dc:	f7ff fc6d 	bl	b6cba <_ZN6AB180510isBitClearEhhb>
   b73e0:	b1d8      	cbz	r0, b741a <_ZN6AB18055setupEb+0x66>
   b73e2:	f006 ff85 	bl	be2f0 <_ZN9TimeClass7isValidEv>
   b73e6:	b9c0      	cbnz	r0, b741a <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b73e8:	a902      	add	r1, sp, #8
   b73ea:	4620      	mov	r0, r4
   b73ec:	f7ff feec 	bl	b71c8 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b73f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b73f4:	f006 fe80 	bl	be0f8 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b73f8:	4b13      	ldr	r3, [pc, #76]	; (b7448 <_ZN6AB18055setupEb+0x94>)
   b73fa:	4914      	ldr	r1, [pc, #80]	; (b744c <_ZN6AB18055setupEb+0x98>)
   b73fc:	681b      	ldr	r3, [r3, #0]
   b73fe:	9300      	str	r3, [sp, #0]
   b7400:	4628      	mov	r0, r5
   b7402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7406:	f006 ff31 	bl	be26c <_ZN9TimeClass6formatExPKc>
   b740a:	4811      	ldr	r0, [pc, #68]	; (b7450 <_ZN6AB18055setupEb+0x9c>)
   b740c:	9a06      	ldr	r2, [sp, #24]
   b740e:	4911      	ldr	r1, [pc, #68]	; (b7454 <_ZN6AB18055setupEb+0xa0>)
   b7410:	f7fc fe64 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b7414:	4628      	mov	r0, r5
   b7416:	f006 fbe9 	bl	bdbec <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b741a:	4b0f      	ldr	r3, [pc, #60]	; (b7458 <_ZN6AB18055setupEb+0xa4>)
   b741c:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b741e:	4b0f      	ldr	r3, [pc, #60]	; (b745c <_ZN6AB18055setupEb+0xa8>)
   b7420:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b7422:	4b0f      	ldr	r3, [pc, #60]	; (b7460 <_ZN6AB18055setupEb+0xac>)
   b7424:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b7426:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b742a:	2300      	movs	r3, #0
   b742c:	a802      	add	r0, sp, #8
   b742e:	9500      	str	r5, [sp, #0]
   b7430:	f7fd feee 	bl	b5210 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b7434:	4628      	mov	r0, r5
   b7436:	f7fd fbdd 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
}
   b743a:	b00b      	add	sp, #44	; 0x2c
   b743c:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b743e:	4909      	ldr	r1, [pc, #36]	; (b7464 <_ZN6AB18055setupEb+0xb0>)
   b7440:	4803      	ldr	r0, [pc, #12]	; (b7450 <_ZN6AB18055setupEb+0x9c>)
   b7442:	f7ff fa9f 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
   b7446:	e7e8      	b.n	b741a <_ZN6AB18055setupEb+0x66>
   b7448:	2003de7c 	.word	0x2003de7c
   b744c:	2003e6a8 	.word	0x2003e6a8
   b7450:	2003e434 	.word	0x2003e434
   b7454:	000c075f 	.word	0x000c075f
   b7458:	000b6c3d 	.word	0x000b6c3d
   b745c:	000b4beb 	.word	0x000b4beb
   b7460:	000b4bd7 	.word	0x000b4bd7
   b7464:	000c077c 	.word	0x000c077c

000b7468 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b7468:	4b01      	ldr	r3, [pc, #4]	; (b7470 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b746a:	4a02      	ldr	r2, [pc, #8]	; (b7474 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b746c:	601a      	str	r2, [r3, #0]
}
   b746e:	4770      	bx	lr
   b7470:	2003e434 	.word	0x2003e434
   b7474:	000c0794 	.word	0x000c0794

000b7478 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b7478:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b747a:	2301      	movs	r3, #1
   b747c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b747e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b7480:	4604      	mov	r4, r0
        if (th->func) {
   b7482:	b143      	cbz	r3, b7496 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b7484:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7486:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b7488:	2301      	movs	r3, #1
   b748a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b748c:	2000      	movs	r0, #0
    }
   b748e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b7492:	f003 bc75 	b.w	bad80 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7496:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b7498:	2800      	cmp	r0, #0
   b749a:	d0f5      	beq.n	b7488 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b749c:	6883      	ldr	r3, [r0, #8]
   b749e:	b90b      	cbnz	r3, b74a4 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b74a0:	f007 fa56 	bl	be950 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b74a4:	68c3      	ldr	r3, [r0, #12]
   b74a6:	e7ee      	b.n	b7486 <_ZN6Thread3runEPv+0xe>

000b74a8 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b74a8:	2a01      	cmp	r2, #1
   b74aa:	d102      	bne.n	b74b2 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b74ac:	6001      	str	r1, [r0, #0]
      }
   b74ae:	2000      	movs	r0, #0
   b74b0:	4770      	bx	lr
	  switch (__op)
   b74b2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b74b4:	bf04      	itt	eq
   b74b6:	680b      	ldreq	r3, [r1, #0]
   b74b8:	6003      	streq	r3, [r0, #0]
	      break;
   b74ba:	e7f8      	b.n	b74ae <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b74bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b74bc:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b74be:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b74c0:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b74c2:	b135      	cbz	r5, b74d2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b74c4:	4628      	mov	r0, r5
   b74c6:	f7fd fb95 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b74ca:	2110      	movs	r1, #16
   b74cc:	4628      	mov	r0, r5
   b74ce:	f7fc fde6 	bl	b409e <_ZdlPvj>
   b74d2:	4620      	mov	r0, r4
   b74d4:	2114      	movs	r1, #20
      }
   b74d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b74da:	f7fc bde0 	b.w	b409e <_ZdlPvj>

000b74de <_ZN6Thread7disposeEv>:
    void dispose()
   b74de:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b74e0:	6803      	ldr	r3, [r0, #0]
   b74e2:	4604      	mov	r4, r0
        if (!isValid())
   b74e4:	b1ab      	cbz	r3, b7512 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b74e6:	6858      	ldr	r0, [r3, #4]
   b74e8:	f003 fbfa 	bl	bace0 <os_thread_is_current>
   b74ec:	b988      	cbnz	r0, b7512 <_ZN6Thread7disposeEv+0x34>
   b74ee:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b74f0:	7c5a      	ldrb	r2, [r3, #17]
   b74f2:	b912      	cbnz	r2, b74fa <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b74f4:	6858      	ldr	r0, [r3, #4]
   b74f6:	f003 fbfb 	bl	bacf0 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b74fa:	6823      	ldr	r3, [r4, #0]
   b74fc:	6858      	ldr	r0, [r3, #4]
   b74fe:	f003 fbff 	bl	bad00 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b7502:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b7504:	2300      	movs	r3, #0
   b7506:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b7508:	b118      	cbz	r0, b7512 <_ZN6Thread7disposeEv+0x34>
    }
   b750a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b750e:	f7ff bfd5 	b.w	b74bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7512:	bd10      	pop	{r4, pc}

000b7514 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b7514:	4a05      	ldr	r2, [pc, #20]	; (b752c <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b7516:	6002      	str	r2, [r0, #0]
   b7518:	2200      	movs	r2, #0
   b751a:	6042      	str	r2, [r0, #4]
   b751c:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b751e:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b7522:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b7526:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b752a:	4770      	bx	lr
   b752c:	000c07d4 	.word	0x000c07d4

000b7530 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b7530:	b510      	push	{r4, lr}
    if (!_instance) {
   b7532:	4c07      	ldr	r4, [pc, #28]	; (b7550 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b7534:	6823      	ldr	r3, [r4, #0]
   b7536:	b943      	cbnz	r3, b754a <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b7538:	f240 4064 	movw	r0, #1124	; 0x464
   b753c:	f7fc fdab 	bl	b4096 <_Znwj>
   b7540:	4603      	mov	r3, r0
   b7542:	b108      	cbz	r0, b7548 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b7544:	f7ff ffe6 	bl	b7514 <_ZN19BackgroundPublishRKC1Ev>
   b7548:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b754a:	6820      	ldr	r0, [r4, #0]
   b754c:	bd10      	pop	{r4, pc}
   b754e:	bf00      	nop
   b7550:	2003e43c 	.word	0x2003e43c

000b7554 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b7554:	b538      	push	{r3, r4, r5, lr}
   b7556:	4604      	mov	r4, r0
    if(thread)
   b7558:	6840      	ldr	r0, [r0, #4]
   b755a:	b190      	cbz	r0, b7582 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b755c:	2302      	movs	r3, #2
   b755e:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b7560:	f7ff ffbd 	bl	b74de <_ZN6Thread7disposeEv>
        delete thread;
   b7564:	6865      	ldr	r5, [r4, #4]
   b7566:	b155      	cbz	r5, b757e <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b7568:	4628      	mov	r0, r5
   b756a:	f7ff ffb8 	bl	b74de <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b756e:	6828      	ldr	r0, [r5, #0]
   b7570:	b108      	cbz	r0, b7576 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b7572:	f7ff ffa3 	bl	b74bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7576:	2104      	movs	r1, #4
   b7578:	4628      	mov	r0, r5
   b757a:	f7fc fd90 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b757e:	2300      	movs	r3, #0
   b7580:	6063      	str	r3, [r4, #4]
    }
}
   b7582:	bd38      	pop	{r3, r4, r5, pc}

000b7584 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7584:	b510      	push	{r4, lr}
   b7586:	4b05      	ldr	r3, [pc, #20]	; (b759c <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b7588:	6003      	str	r3, [r0, #0]
   b758a:	4604      	mov	r4, r0
    stop();
   b758c:	f7ff ffe2 	bl	b7554 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b7590:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7594:	f7fd fb2e 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
}
   b7598:	4620      	mov	r0, r4
   b759a:	bd10      	pop	{r4, pc}
   b759c:	000c07d4 	.word	0x000c07d4

000b75a0 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b75a0:	b510      	push	{r4, lr}
   b75a2:	4604      	mov	r4, r0
}
   b75a4:	f7ff ffee 	bl	b7584 <_ZN19BackgroundPublishRKD1Ev>
   b75a8:	4620      	mov	r0, r4
   b75aa:	f240 4164 	movw	r1, #1124	; 0x464
   b75ae:	f7fc fd76 	bl	b409e <_ZdlPvj>
   b75b2:	4620      	mov	r0, r4
   b75b4:	bd10      	pop	{r4, pc}

000b75b6 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b75b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b75b8:	4604      	mov	r4, r0
   b75ba:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b75bc:	f100 060d 	add.w	r6, r0, #13
   b75c0:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b75c4:	7b23      	ldrb	r3, [r4, #12]
   b75c6:	b91b      	cbnz	r3, b75d0 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b75c8:	2001      	movs	r0, #1
   b75ca:	f004 f825 	bl	bb618 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b75ce:	e7f9      	b.n	b75c4 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b75d0:	7b23      	ldrb	r3, [r4, #12]
   b75d2:	2b02      	cmp	r3, #2
   b75d4:	d064      	beq.n	b76a0 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b75d6:	68a0      	ldr	r0, [r4, #8]
   b75d8:	f003 fba2 	bl	bad20 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b75dc:	68a0      	ldr	r0, [r4, #8]
   b75de:	f003 fba7 	bl	bad30 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b75e2:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b75e6:	f88d 3000 	strb.w	r3, [sp]
   b75ea:	463a      	mov	r2, r7
   b75ec:	233c      	movs	r3, #60	; 0x3c
   b75ee:	4631      	mov	r1, r6
   b75f0:	a806      	add	r0, sp, #24
   b75f2:	f004 fadf 	bl	bbbb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b75f6:	9d06      	ldr	r5, [sp, #24]
   b75f8:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b75fa:	b933      	cbnz	r3, b760a <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b75fc:	7b23      	ldrb	r3, [r4, #12]
   b75fe:	2b02      	cmp	r3, #2
   b7600:	d003      	beq.n	b760a <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b7602:	2001      	movs	r0, #1
   b7604:	f004 f808 	bl	bb618 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b7608:	e7f5      	b.n	b75f6 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b760a:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b760e:	b31b      	cbz	r3, b7658 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b7610:	2000      	movs	r0, #0
   b7612:	f003 fe67 	bl	bb2e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7616:	b120      	cbz	r0, b7622 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b7618:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b761a:	b913      	cbnz	r3, b7622 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b761c:	f003 fec4 	bl	bb3a8 <spark_process>
    }
   b7620:	e7fa      	b.n	b7618 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7622:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b7624:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b7628:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b762a:	1e59      	subs	r1, r3, #1
   b762c:	424b      	negs	r3, r1
   b762e:	414b      	adcs	r3, r1
   b7630:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b7634:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b7638:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b763c:	b90b      	cbnz	r3, b7642 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b763e:	f007 f987 	bl	be950 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7642:	ab05      	add	r3, sp, #20
   b7644:	9300      	str	r3, [sp, #0]
   b7646:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b764a:	ab04      	add	r3, sp, #16
   b764c:	aa03      	add	r2, sp, #12
   b764e:	f10d 010b 	add.w	r1, sp, #11
   b7652:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7656:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b7658:	68a0      	ldr	r0, [r4, #8]
   b765a:	f003 fb61 	bl	bad20 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b765e:	7b23      	ldrb	r3, [r4, #12]
   b7660:	2b02      	cmp	r3, #2
   b7662:	d017      	beq.n	b7694 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b7664:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b7668:	2500      	movs	r5, #0
   b766a:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b766e:	b143      	cbz	r3, b7682 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b7670:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7674:	2203      	movs	r2, #3
   b7676:	4608      	mov	r0, r1
   b7678:	4798      	blx	r3
	    _M_manager = nullptr;
   b767a:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b767e:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b7682:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b7684:	68a0      	ldr	r0, [r4, #8]
   b7686:	7323      	strb	r3, [r4, #12]
   b7688:	f003 fb52 	bl	bad30 <os_mutex_unlock>
   b768c:	a807      	add	r0, sp, #28
   b768e:	f7fe fdc7 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7692:	e797      	b.n	b75c4 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b7694:	68a0      	ldr	r0, [r4, #8]
   b7696:	f003 fb4b 	bl	bad30 <os_mutex_unlock>
   b769a:	a807      	add	r0, sp, #28
   b769c:	f7fe fdc0 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b76a0:	b009      	add	sp, #36	; 0x24
   b76a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b76a4 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b76a4:	6800      	ldr	r0, [r0, #0]
   b76a6:	f7ff bf86 	b.w	b75b6 <_ZN19BackgroundPublishRK8thread_fEv>

000b76aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b76aa:	b513      	push	{r0, r1, r4, lr}
   b76ac:	460b      	mov	r3, r1
   b76ae:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b76b0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b76b4:	466c      	mov	r4, sp
   b76b6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b76ba:	e893 0003 	ldmia.w	r3, {r0, r1}
   b76be:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b76c2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b76c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b76ca:	b002      	add	sp, #8
   b76cc:	bd10      	pop	{r4, pc}
	...

000b76d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b76d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b76d4:	4606      	mov	r6, r0
   b76d6:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b76d8:	2014      	movs	r0, #20
   b76da:	4926      	ldr	r1, [pc, #152]	; (b7774 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b76dc:	4617      	mov	r7, r2
   b76de:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b76e0:	f007 f92c 	bl	be93c <_ZnwjRKSt9nothrow_t>
   b76e4:	4604      	mov	r4, r0
   b76e6:	b130      	cbz	r0, b76f6 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b76e8:	2000      	movs	r0, #0
            exited(false) {
   b76ea:	e9c4 0000 	strd	r0, r0, [r4]
   b76ee:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b76f2:	7420      	strb	r0, [r4, #16]
   b76f4:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b76f6:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b76f8:	2c00      	cmp	r4, #0
   b76fa:	d031      	beq.n	b7760 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b76fc:	491d      	ldr	r1, [pc, #116]	; (b7774 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b76fe:	2010      	movs	r0, #16
   b7700:	f007 f91c 	bl	be93c <_ZnwjRKSt9nothrow_t>
   b7704:	4605      	mov	r5, r0
   b7706:	b168      	cbz	r0, b7724 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b7708:	2300      	movs	r3, #0
   b770a:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b770c:	4601      	mov	r1, r0
   b770e:	4638      	mov	r0, r7
   b7710:	f7ff ffcb 	bl	b76aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7714:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7716:	68aa      	ldr	r2, [r5, #8]
   b7718:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b771a:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b771c:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b771e:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7720:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7722:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b7724:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b7726:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b7728:	b137      	cbz	r7, b7738 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b772a:	4638      	mov	r0, r7
   b772c:	f7fd fa62 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7730:	2110      	movs	r1, #16
   b7732:	4638      	mov	r0, r7
   b7734:	f7fc fcb3 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7738:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b773a:	6803      	ldr	r3, [r0, #0]
   b773c:	b183      	cbz	r3, b7760 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b773e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7740:	464a      	mov	r2, r9
   b7742:	e9cd 0300 	strd	r0, r3, [sp]
   b7746:	4641      	mov	r1, r8
   b7748:	4b0b      	ldr	r3, [pc, #44]	; (b7778 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b774a:	3004      	adds	r0, #4
   b774c:	f003 fac0 	bl	bacd0 <os_thread_create>
   b7750:	b930      	cbnz	r0, b7760 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b7752:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b7754:	7c1b      	ldrb	r3, [r3, #16]
   b7756:	b94b      	cbnz	r3, b776c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b7758:	2001      	movs	r0, #1
   b775a:	f003 fb31 	bl	badc0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b775e:	e7f8      	b.n	b7752 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b7760:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b7762:	2300      	movs	r3, #0
   b7764:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b7766:	b108      	cbz	r0, b776c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b7768:	f7ff fea8 	bl	b74bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b776c:	4630      	mov	r0, r6
   b776e:	b003      	add	sp, #12
   b7770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7774:	000c122c 	.word	0x000c122c
   b7778:	000b7479 	.word	0x000b7479

000b777c <_ZN19BackgroundPublishRK5startEv>:
{
   b777c:	b530      	push	{r4, r5, lr}
    if(!thread)
   b777e:	6843      	ldr	r3, [r0, #4]
{
   b7780:	b087      	sub	sp, #28
   b7782:	4604      	mov	r4, r0
    if(!thread)
   b7784:	b9c3      	cbnz	r3, b77b8 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b7786:	3008      	adds	r0, #8
   b7788:	f003 fac2 	bl	bad10 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b778c:	4b0b      	ldr	r3, [pc, #44]	; (b77bc <_ZN19BackgroundPublishRK5startEv+0x40>)
   b778e:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b7790:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b7792:	4b0b      	ldr	r3, [pc, #44]	; (b77c0 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7794:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7796:	9304      	str	r3, [sp, #16]
   b7798:	f7fc fc7d 	bl	b4096 <_Znwj>
   b779c:	4605      	mov	r5, r0
   b779e:	b138      	cbz	r0, b77b0 <_ZN19BackgroundPublishRK5startEv+0x34>
   b77a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b77a4:	9300      	str	r3, [sp, #0]
   b77a6:	4907      	ldr	r1, [pc, #28]	; (b77c4 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b77a8:	2302      	movs	r3, #2
   b77aa:	aa02      	add	r2, sp, #8
   b77ac:	f7ff ff90 	bl	b76d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b77b0:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b77b2:	a802      	add	r0, sp, #8
   b77b4:	f7fd fa1e 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
}
   b77b8:	b007      	add	sp, #28
   b77ba:	bd30      	pop	{r4, r5, pc}
   b77bc:	000b76a5 	.word	0x000b76a5
   b77c0:	000b74a9 	.word	0x000b74a9
   b77c4:	000c07b8 	.word	0x000c07b8

000b77c8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b77c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b77cc:	4604      	mov	r4, r0
   b77ce:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b77d0:	6880      	ldr	r0, [r0, #8]
   b77d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b77d4:	4698      	mov	r8, r3
   b77d6:	460d      	mov	r5, r1
   b77d8:	4616      	mov	r6, r2
   b77da:	f003 faa1 	bl	bad20 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b77de:	6863      	ldr	r3, [r4, #4]
   b77e0:	b11b      	cbz	r3, b77ea <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b77e2:	7b23      	ldrb	r3, [r4, #12]
   b77e4:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b77e8:	b133      	cbz	r3, b77f8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b77ea:	68a0      	ldr	r0, [r4, #8]
   b77ec:	f003 faa0 	bl	bad30 <os_mutex_unlock>
    {
        return false;
   b77f0:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b77f2:	b005      	add	sp, #20
   b77f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b77f8:	68a0      	ldr	r0, [r4, #8]
   b77fa:	f003 fa99 	bl	bad30 <os_mutex_unlock>
    if(!name)
   b77fe:	2d00      	cmp	r5, #0
   b7800:	d03d      	beq.n	b787e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b7802:	2240      	movs	r2, #64	; 0x40
   b7804:	4629      	mov	r1, r5
   b7806:	f104 000d 	add.w	r0, r4, #13
   b780a:	f007 feaa 	bl	bf562 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b780e:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b7812:	b38e      	cbz	r6, b7878 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7814:	f240 4201 	movw	r2, #1025	; 0x401
   b7818:	4631      	mov	r1, r6
   b781a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b781e:	f007 fea0 	bl	bf562 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b7822:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b7826:	2300      	movs	r3, #0
   b7828:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b782a:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b782c:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b7830:	b13b      	cbz	r3, b7842 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7832:	2202      	movs	r2, #2
   b7834:	4639      	mov	r1, r7
   b7836:	4668      	mov	r0, sp
   b7838:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b783a:	68fb      	ldr	r3, [r7, #12]
   b783c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b783e:	68bb      	ldr	r3, [r7, #8]
   b7840:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7842:	4629      	mov	r1, r5
   b7844:	4668      	mov	r0, sp
   b7846:	f7ff ff30 	bl	b76aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b784a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b784c:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b7850:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7854:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7856:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7858:	4668      	mov	r0, sp
   b785a:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b785e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b7862:	9203      	str	r2, [sp, #12]
   b7864:	f7fd f9c6 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b7868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b786a:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b786e:	2001      	movs	r0, #1
    event_flags = flags;
   b7870:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7874:	7320      	strb	r0, [r4, #12]
    return true;
   b7876:	e7bc      	b.n	b77f2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b7878:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b787c:	e7d3      	b.n	b7826 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b787e:	4628      	mov	r0, r5
   b7880:	e7b7      	b.n	b77f2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000b7882 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b7882:	4770      	bx	lr

000b7884 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b7884:	4770      	bx	lr

000b7886 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b7886:	b510      	push	{r4, lr}
}
   b7888:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b788a:	4604      	mov	r4, r0
}
   b788c:	f7fc fc07 	bl	b409e <_ZdlPvj>
   b7890:	4620      	mov	r0, r4
   b7892:	bd10      	pop	{r4, pc}

000b7894 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b7894:	b510      	push	{r4, lr}
}
   b7896:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b7898:	4604      	mov	r4, r0
}
   b789a:	f7fc fc00 	bl	b409e <_ZdlPvj>
   b789e:	4620      	mov	r0, r4
   b78a0:	bd10      	pop	{r4, pc}
	...

000b78a4 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b78a4:	b510      	push	{r4, lr}
   b78a6:	4b05      	ldr	r3, [pc, #20]	; (b78bc <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b78a8:	4604      	mov	r4, r0
   b78aa:	f840 3b1c 	str.w	r3, [r0], #28
   b78ae:	f006 f99d 	bl	bdbec <_ZN6StringD1Ev>
   b78b2:	1d20      	adds	r0, r4, #4
   b78b4:	f006 f99a 	bl	bdbec <_ZN6StringD1Ev>
}
   b78b8:	4620      	mov	r0, r4
   b78ba:	bd10      	pop	{r4, pc}
   b78bc:	000c0848 	.word	0x000c0848

000b78c0 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b78c0:	b510      	push	{r4, lr}
   b78c2:	4604      	mov	r4, r0
}
   b78c4:	f7ff ffee 	bl	b78a4 <_ZN22LocalTimePosixTimezoneD1Ev>
   b78c8:	4620      	mov	r0, r4
   b78ca:	2158      	movs	r1, #88	; 0x58
   b78cc:	f7fc fbe7 	bl	b409e <_ZdlPvj>
   b78d0:	4620      	mov	r0, r4
   b78d2:	bd10      	pop	{r4, pc}

000b78d4 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b78d4:	b510      	push	{r4, lr}
   b78d6:	4b04      	ldr	r3, [pc, #16]	; (b78e8 <_ZN9LocalTimeD1Ev+0x14>)
   b78d8:	4604      	mov	r4, r0
   b78da:	f840 3b04 	str.w	r3, [r0], #4
   b78de:	f7ff ffe1 	bl	b78a4 <_ZN22LocalTimePosixTimezoneD1Ev>
   b78e2:	4620      	mov	r0, r4
   b78e4:	bd10      	pop	{r4, pc}
   b78e6:	bf00      	nop
   b78e8:	000c0818 	.word	0x000c0818

000b78ec <_ZN9LocalTimeD0Ev>:
   b78ec:	b510      	push	{r4, lr}
   b78ee:	4604      	mov	r4, r0
   b78f0:	f7ff fff0 	bl	b78d4 <_ZN9LocalTimeD1Ev>
   b78f4:	4620      	mov	r0, r4
   b78f6:	2160      	movs	r1, #96	; 0x60
   b78f8:	f7fc fbd1 	bl	b409e <_ZdlPvj>
   b78fc:	4620      	mov	r0, r4
   b78fe:	bd10      	pop	{r4, pc}

000b7900 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b7900:	f020 0302 	bic.w	r3, r0, #2
   b7904:	2b01      	cmp	r3, #1
   b7906:	d003      	beq.n	b7910 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b7908:	1f43      	subs	r3, r0, #5
   b790a:	4258      	negs	r0, r3
   b790c:	4158      	adcs	r0, r3
   b790e:	4770      	bx	lr
   b7910:	4618      	mov	r0, r3
   b7912:	4770      	bx	lr

000b7914 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b7914:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b7918:	7103      	strb	r3, [r0, #4]
   b791a:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b791e:	7143      	strb	r3, [r0, #5]
   b7920:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b7924:	7183      	strb	r3, [r0, #6]
   b7926:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b792a:	71c3      	strb	r3, [r0, #7]
   b792c:	4770      	bx	lr

000b792e <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b792e:	b538      	push	{r3, r4, r5, lr}
   b7930:	4604      	mov	r4, r0
   b7932:	460d      	mov	r5, r1
   b7934:	3004      	adds	r0, #4
   b7936:	3104      	adds	r1, #4
   b7938:	f006 f9df 	bl	bdcfa <_ZN6StringaSERKS_>
   b793c:	f105 0114 	add.w	r1, r5, #20
   b7940:	f104 0014 	add.w	r0, r4, #20
   b7944:	f7ff ffe6 	bl	b7914 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b7948:	f105 011c 	add.w	r1, r5, #28
   b794c:	f104 001c 	add.w	r0, r4, #28
   b7950:	f006 f9d3 	bl	bdcfa <_ZN6StringaSERKS_>
   b7954:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b7958:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b795c:	f7ff ffda 	bl	b7914 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b7960:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b7964:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b7968:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b796c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b7970:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b7974:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b7978:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b797c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b7980:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b7984:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7988:	f7ff ffc4 	bl	b7914 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b798c:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b7990:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b7994:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b7998:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b799c:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b79a0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b79a4:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b79a8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b79ac:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b79b0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b79b4:	f7ff ffae 	bl	b7914 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b79b8:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b79bc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b79c0:	bd38      	pop	{r3, r4, r5, pc}

000b79c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b79c2:	680b      	ldr	r3, [r1, #0]
   b79c4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b79c6:	684b      	ldr	r3, [r1, #4]
   b79c8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b79ca:	b113      	cbz	r3, b79d2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b79cc:	685a      	ldr	r2, [r3, #4]
   b79ce:	3201      	adds	r2, #1
   b79d0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b79d2:	4770      	bx	lr

000b79d4 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b79d4:	4a02      	ldr	r2, [pc, #8]	; (b79e0 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b79d6:	6002      	str	r2, [r0, #0]
   b79d8:	684a      	ldr	r2, [r1, #4]
   b79da:	6042      	str	r2, [r0, #4]
   b79dc:	4770      	bx	lr
   b79de:	bf00      	nop
   b79e0:	000c0828 	.word	0x000c0828

000b79e4 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b79e4:	4a02      	ldr	r2, [pc, #8]	; (b79f0 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b79e6:	6002      	str	r2, [r0, #0]
   b79e8:	2200      	movs	r2, #0
   b79ea:	6042      	str	r2, [r0, #4]
}
   b79ec:	4770      	bx	lr
   b79ee:	bf00      	nop
   b79f0:	000c0828 	.word	0x000c0828

000b79f4 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b79f4:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b79f6:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b79f8:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b79fa:	8083      	strh	r3, [r0, #4]
   b79fc:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b79fe:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b7a00:	ab05      	add	r3, sp, #20
   b7a02:	9300      	str	r3, [sp, #0]
   b7a04:	4913      	ldr	r1, [pc, #76]	; (b7a54 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b7a06:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b7a08:	ab04      	add	r3, sp, #16
   b7a0a:	aa03      	add	r2, sp, #12
   b7a0c:	4628      	mov	r0, r5
   b7a0e:	f003 fda3 	bl	bb558 <sscanf>
   b7a12:	2803      	cmp	r0, #3
   b7a14:	d107      	bne.n	b7a26 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b7a16:	9b03      	ldr	r3, [sp, #12]
   b7a18:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b7a1a:	9b04      	ldr	r3, [sp, #16]
   b7a1c:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b7a1e:	9b05      	ldr	r3, [sp, #20]
   b7a20:	71a3      	strb	r3, [r4, #6]
}
   b7a22:	b007      	add	sp, #28
   b7a24:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b7a26:	490c      	ldr	r1, [pc, #48]	; (b7a58 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b7a28:	ab04      	add	r3, sp, #16
   b7a2a:	aa03      	add	r2, sp, #12
   b7a2c:	4628      	mov	r0, r5
   b7a2e:	f003 fd93 	bl	bb558 <sscanf>
   b7a32:	2802      	cmp	r0, #2
   b7a34:	d104      	bne.n	b7a40 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b7a36:	9b03      	ldr	r3, [sp, #12]
   b7a38:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b7a3a:	9b04      	ldr	r3, [sp, #16]
   b7a3c:	7163      	strb	r3, [r4, #5]
   b7a3e:	e7f0      	b.n	b7a22 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b7a40:	4906      	ldr	r1, [pc, #24]	; (b7a5c <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b7a42:	aa03      	add	r2, sp, #12
   b7a44:	4628      	mov	r0, r5
   b7a46:	f003 fd87 	bl	bb558 <sscanf>
   b7a4a:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b7a4c:	bf04      	itt	eq
   b7a4e:	9b03      	ldreq	r3, [sp, #12]
   b7a50:	7123      	strbeq	r3, [r4, #4]
}
   b7a52:	e7e6      	b.n	b7a22 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b7a54:	000c07dc 	.word	0x000c07dc
   b7a58:	000c07df 	.word	0x000c07df
   b7a5c:	000c05ef 	.word	0x000c05ef

000b7a60 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b7a60:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b7a64:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7a68:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b7a6c:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b7a6e:	bfb8      	it	lt
   b7a70:	4808      	ldrlt	r0, [pc, #32]	; (b7a94 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b7a72:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b7a76:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b7a7a:	bfbd      	ittte	lt
   b7a7c:	fb00 3002 	mlalt	r0, r0, r2, r3
   b7a80:	1840      	addlt	r0, r0, r1
   b7a82:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b7a84:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b7a88:	bfa4      	itt	ge
   b7a8a:	fb00 3002 	mlage	r0, r0, r2, r3
   b7a8e:	1840      	addge	r0, r0, r1
}
   b7a90:	4770      	bx	lr
   b7a92:	bf00      	nop
   b7a94:	fffff1f0 	.word	0xfffff1f0

000b7a98 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b7a98:	b508      	push	{r3, lr}
   b7a9a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b7a9e:	b14b      	cbz	r3, b7ab4 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b7aa0:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b7aa4:	b943      	cbnz	r3, b7ab8 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b7aa6:	302c      	adds	r0, #44	; 0x2c
   b7aa8:	f7ff ffda 	bl	b7a60 <_ZNK12LocalTimeHMS9toSecondsEv>
   b7aac:	fab0 f080 	clz	r0, r0
   b7ab0:	0940      	lsrs	r0, r0, #5
   b7ab2:	bd08      	pop	{r3, pc}
   b7ab4:	2001      	movs	r0, #1
   b7ab6:	e7fc      	b.n	b7ab2 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b7ab8:	2000      	movs	r0, #0
   b7aba:	e7fa      	b.n	b7ab2 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b7abc <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b7abc:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b7ac0:	b943      	cbnz	r3, b7ad4 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b7ac2:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7ac6:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b7ac8:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7acc:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b7ace:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b7ad2:	600b      	str	r3, [r1, #0]
}
   b7ad4:	4770      	bx	lr

000b7ad6 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b7ad6:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b7ada:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b7adc:	b9b3      	cbnz	r3, b7b0c <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b7ade:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b7ae2:	688c      	ldr	r4, [r1, #8]
   b7ae4:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b7ae6:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b7aea:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b7aec:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b7af0:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b7af2:	bfb5      	itete	lt
   b7af4:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b7af6:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b7af8:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b7afa:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b7afc:	bfb5      	itete	lt
   b7afe:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b7b02:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b7b06:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b7b08:	189b      	addge	r3, r3, r2
   b7b0a:	600b      	str	r3, [r1, #0]
}
   b7b0c:	bd30      	pop	{r4, r5, pc}
	...

000b7b10 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b7b10:	b508      	push	{r3, lr}
   b7b12:	4a05      	ldr	r2, [pc, #20]	; (b7b28 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b7b14:	6002      	str	r2, [r0, #0]
   b7b16:	2200      	movs	r2, #0
   b7b18:	4603      	mov	r3, r0
   b7b1a:	6042      	str	r2, [r0, #4]
   b7b1c:	3008      	adds	r0, #8
   b7b1e:	f7ff ff61 	bl	b79e4 <_ZN12LocalTimeHMSC1Ev>
}
   b7b22:	4618      	mov	r0, r3
   b7b24:	bd08      	pop	{r3, pc}
   b7b26:	bf00      	nop
   b7b28:	000c0838 	.word	0x000c0838

000b7b2c <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b7b2c:	2300      	movs	r3, #0
   b7b2e:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b7b30:	8183      	strh	r3, [r0, #12]
   b7b32:	7383      	strb	r3, [r0, #14]
}
   b7b34:	4770      	bx	lr
	...

000b7b38 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b7b38:	b530      	push	{r4, r5, lr}
   b7b3a:	4604      	mov	r4, r0
   b7b3c:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b7b3e:	460d      	mov	r5, r1
   b7b40:	b111      	cbz	r1, b7b48 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b7b42:	780b      	ldrb	r3, [r1, #0]
   b7b44:	2b4d      	cmp	r3, #77	; 0x4d
   b7b46:	d005      	beq.n	b7b54 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b7b48:	4620      	mov	r0, r4
}
   b7b4a:	b007      	add	sp, #28
   b7b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b7b50:	f7ff bfec 	b.w	b7b2c <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b7b54:	ab05      	add	r3, sp, #20
   b7b56:	9300      	str	r3, [sp, #0]
   b7b58:	4911      	ldr	r1, [pc, #68]	; (b7ba0 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b7b5a:	ab04      	add	r3, sp, #16
   b7b5c:	aa03      	add	r2, sp, #12
   b7b5e:	4628      	mov	r0, r5
   b7b60:	f003 fcfa 	bl	bb558 <sscanf>
   b7b64:	2803      	cmp	r0, #3
   b7b66:	d116      	bne.n	b7b96 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b7b68:	9b03      	ldr	r3, [sp, #12]
   b7b6a:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b7b6c:	9b04      	ldr	r3, [sp, #16]
   b7b6e:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b7b70:	9b05      	ldr	r3, [sp, #20]
   b7b72:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b7b74:	212f      	movs	r1, #47	; 0x2f
   b7b76:	4628      	mov	r0, r5
   b7b78:	f007 fc90 	bl	bf49c <strchr>
        if (cp) {
   b7b7c:	b140      	cbz	r0, b7b90 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b7b7e:	1c41      	adds	r1, r0, #1
   b7b80:	f104 0008 	add.w	r0, r4, #8
   b7b84:	f7ff ff36 	bl	b79f4 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b7b88:	2301      	movs	r3, #1
   b7b8a:	71e3      	strb	r3, [r4, #7]
}
   b7b8c:	b007      	add	sp, #28
   b7b8e:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b7b90:	81a0      	strh	r0, [r4, #12]
   b7b92:	73a0      	strb	r0, [r4, #14]
}
   b7b94:	e7f8      	b.n	b7b88 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b7b96:	4620      	mov	r0, r4
   b7b98:	f7ff ffc8 	bl	b7b2c <_ZN15LocalTimeChange5clearEv>
   b7b9c:	e7f6      	b.n	b7b8c <_ZN15LocalTimeChange5parseEPKc+0x54>
   b7b9e:	bf00      	nop
   b7ba0:	000c07f7 	.word	0x000c07f7

000b7ba4 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b7ba4:	4b10      	ldr	r3, [pc, #64]	; (b7be8 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b7ba6:	4911      	ldr	r1, [pc, #68]	; (b7bec <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7ba8:	b510      	push	{r4, lr}
   b7baa:	4604      	mov	r4, r0
   b7bac:	f840 3b04 	str.w	r3, [r0], #4
   b7bb0:	f006 f867 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7bb4:	f104 0014 	add.w	r0, r4, #20
   b7bb8:	f7ff ff14 	bl	b79e4 <_ZN12LocalTimeHMSC1Ev>
   b7bbc:	490b      	ldr	r1, [pc, #44]	; (b7bec <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7bbe:	f104 001c 	add.w	r0, r4, #28
   b7bc2:	f006 f85e 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7bc6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b7bca:	f7ff ff0b 	bl	b79e4 <_ZN12LocalTimeHMSC1Ev>
   b7bce:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7bd2:	f7ff ff9d 	bl	b7b10 <_ZN15LocalTimeChangeC1Ev>
   b7bd6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7bda:	f7ff ff99 	bl	b7b10 <_ZN15LocalTimeChangeC1Ev>
   b7bde:	2300      	movs	r3, #0
   b7be0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b7be4:	4620      	mov	r0, r4
   b7be6:	bd10      	pop	{r4, pc}
   b7be8:	000c0848 	.word	0x000c0848
   b7bec:	000c10a4 	.word	0x000c10a4

000b7bf0 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b7bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7bf4:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b7bf6:	4608      	mov	r0, r1
   b7bf8:	f007 fc7a 	bl	bf4f0 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b7bfc:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b7bfe:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b7c00:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b7c02:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b7c06:	493f      	ldr	r1, [pc, #252]	; (b7d04 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b7c08:	9801      	ldr	r0, [sp, #4]
   b7c0a:	aa01      	add	r2, sp, #4
   b7c0c:	f007 fcf8 	bl	bf600 <strtok_r>
   b7c10:	4601      	mov	r1, r0
   b7c12:	2800      	cmp	r0, #0
   b7c14:	d062      	beq.n	b7cdc <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b7c16:	2d01      	cmp	r5, #1
   b7c18:	f105 0301 	add.w	r3, r5, #1
   b7c1c:	d053      	beq.n	b7cc6 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b7c1e:	2d02      	cmp	r5, #2
   b7c20:	d056      	beq.n	b7cd0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b7c22:	2d00      	cmp	r5, #0
   b7c24:	d146      	bne.n	b7cb4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b7c26:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b7c28:	f892 9000 	ldrb.w	r9, [r2]
   b7c2c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b7c30:	4615      	mov	r5, r2
   b7c32:	4617      	mov	r7, r2
   b7c34:	f102 0201 	add.w	r2, r2, #1
   b7c38:	d8f6      	bhi.n	b7c28 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b7c3a:	2200      	movs	r2, #0
   b7c3c:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b7c3e:	f104 001c 	add.w	r0, r4, #28
   b7c42:	f006 f87c 	bl	bdd3e <_ZN6StringaSEPKc>
                valid = true;
   b7c46:	2201      	movs	r2, #1
                *cp = save2;
   b7c48:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b7c4c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b7c50:	782a      	ldrb	r2, [r5, #0]
   b7c52:	b36a      	cbz	r2, b7cb0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b7c54:	f897 a000 	ldrb.w	sl, [r7]
   b7c58:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b7c5c:	2a3f      	cmp	r2, #63	; 0x3f
   b7c5e:	46b9      	mov	r9, r7
   b7c60:	46bb      	mov	fp, r7
   b7c62:	f107 0701 	add.w	r7, r7, #1
   b7c66:	d9f5      	bls.n	b7c54 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b7c68:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b7c6a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b7c6e:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b7c72:	4629      	mov	r1, r5
   b7c74:	4638      	mov	r0, r7
   b7c76:	f7ff febd 	bl	b79f4 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b7c7a:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b7c7e:	f1ba 0f00 	cmp.w	sl, #0
   b7c82:	d015      	beq.n	b7cb0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b7c84:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b7c86:	f81b ab01 	ldrb.w	sl, [fp], #1
   b7c8a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b7c8e:	d8f9      	bhi.n	b7c84 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b7c90:	2200      	movs	r2, #0
   b7c92:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b7c94:	4649      	mov	r1, r9
   b7c96:	1d20      	adds	r0, r4, #4
   b7c98:	f006 f851 	bl	bdd3e <_ZN6StringaSEPKc>
                        *cp = save2;
   b7c9c:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b7ca0:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b7ca4:	f1ba 0f00 	cmp.w	sl, #0
   b7ca8:	d006      	beq.n	b7cb8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b7caa:	4629      	mov	r1, r5
   b7cac:	f7ff fea2 	bl	b79f4 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b7cb0:	2501      	movs	r5, #1
   b7cb2:	e7a8      	b.n	b7c06 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b7cb4:	461d      	mov	r5, r3
   b7cb6:	e7a6      	b.n	b7c06 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b7cb8:	4639      	mov	r1, r7
   b7cba:	f7ff fe2b 	bl	b7914 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b7cbe:	7e23      	ldrb	r3, [r4, #24]
   b7cc0:	3b01      	subs	r3, #1
   b7cc2:	7623      	strb	r3, [r4, #24]
   b7cc4:	e7f4      	b.n	b7cb0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b7cc6:	4640      	mov	r0, r8
   b7cc8:	f7ff ff36 	bl	b7b38 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7ccc:	2502      	movs	r5, #2
   b7cce:	e79a      	b.n	b7c06 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b7cd0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7cd4:	f7ff ff30 	bl	b7b38 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7cd8:	2503      	movs	r5, #3
   b7cda:	e794      	b.n	b7c06 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b7cdc:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b7ce0:	b143      	cbz	r3, b7cf4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b7ce2:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b7ce6:	b92a      	cbnz	r2, b7cf4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b7ce8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7cec:	f7ff ff1e 	bl	b7b2c <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b7cf0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b7cf4:	4630      	mov	r0, r6
   b7cf6:	f003 fc17 	bl	bb528 <free>

    return valid;
}
   b7cfa:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b7cfe:	b003      	add	sp, #12
   b7d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7d04:	000c0801 	.word	0x000c0801

000b7d08 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b7d08:	b538      	push	{r3, r4, r5, lr}
   b7d0a:	4b13      	ldr	r3, [pc, #76]	; (b7d58 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b7d0c:	4604      	mov	r4, r0
   b7d0e:	460d      	mov	r5, r1
   b7d10:	f840 3b04 	str.w	r3, [r0], #4
   b7d14:	4911      	ldr	r1, [pc, #68]	; (b7d5c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b7d16:	f005 ffb4 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7d1a:	f104 0014 	add.w	r0, r4, #20
   b7d1e:	f7ff fe61 	bl	b79e4 <_ZN12LocalTimeHMSC1Ev>
   b7d22:	490e      	ldr	r1, [pc, #56]	; (b7d5c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b7d24:	f104 001c 	add.w	r0, r4, #28
   b7d28:	f005 ffab 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7d2c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b7d30:	f7ff fe58 	bl	b79e4 <_ZN12LocalTimeHMSC1Ev>
   b7d34:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7d38:	f7ff feea 	bl	b7b10 <_ZN15LocalTimeChangeC1Ev>
   b7d3c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7d40:	f7ff fee6 	bl	b7b10 <_ZN15LocalTimeChangeC1Ev>
   b7d44:	2300      	movs	r3, #0
   b7d46:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b7d4a:	4629      	mov	r1, r5
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	f7ff ff4f 	bl	b7bf0 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b7d52:	4620      	mov	r0, r4
   b7d54:	bd38      	pop	{r3, r4, r5, pc}
   b7d56:	bf00      	nop
   b7d58:	000c0848 	.word	0x000c0848
   b7d5c:	000c10a4 	.word	0x000c10a4

000b7d60 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b7d60:	b510      	push	{r4, lr}
   b7d62:	4604      	mov	r4, r0
   b7d64:	b088      	sub	sp, #32
   b7d66:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b7d68:	3068      	adds	r0, #104	; 0x68
   b7d6a:	a901      	add	r1, sp, #4
   b7d6c:	f007 faa8 	bl	bf2c0 <asctime_r>
    int len = strlen(ascstr);
   b7d70:	a801      	add	r0, sp, #4
   b7d72:	f007 fbda 	bl	bf52a <strlen>
    ascstr[len-1] = 0; // remove final newline
   b7d76:	ab08      	add	r3, sp, #32
   b7d78:	4418      	add	r0, r3
   b7d7a:	2300      	movs	r3, #0
   b7d7c:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b7d80:	a901      	add	r1, sp, #4
   b7d82:	4620      	mov	r0, r4
   b7d84:	f005 ff7d 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7d88:	4620      	mov	r0, r4
   b7d8a:	b008      	add	sp, #32
   b7d8c:	bd10      	pop	{r4, pc}
	...

000b7d90 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b7d90:	b538      	push	{r3, r4, r5, lr}
   b7d92:	4604      	mov	r4, r0
    if (config.isZ()) {
   b7d94:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b7d96:	460d      	mov	r5, r1
    if (config.isZ()) {
   b7d98:	f7ff fe7e 	bl	b7a98 <_ZNK22LocalTimePosixTimezone3isZEv>
   b7d9c:	b128      	cbz	r0, b7daa <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b7d9e:	4909      	ldr	r1, [pc, #36]	; (b7dc4 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b7da0:	4620      	mov	r0, r4
   b7da2:	f005 ff6e 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b7da6:	4620      	mov	r0, r4
   b7da8:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b7daa:	6828      	ldr	r0, [r5, #0]
   b7dac:	f7ff fda8 	bl	b7900 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b7db0:	b128      	cbz	r0, b7dbe <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b7db2:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b7db6:	4620      	mov	r0, r4
   b7db8:	f005 ffae 	bl	bdd18 <_ZN6StringC1ERKS_>
   b7dbc:	e7f3      	b.n	b7da6 <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b7dbe:	f105 0120 	add.w	r1, r5, #32
   b7dc2:	e7f8      	b.n	b7db6 <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b7dc4:	000c0803 	.word	0x000c0803

000b7dc8 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b7dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7dcc:	4680      	mov	r8, r0
   b7dce:	b0a8      	sub	sp, #160	; 0xa0
   b7dd0:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b7dd2:	4615      	mov	r5, r2
   b7dd4:	b12a      	cbz	r2, b7de2 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b7dd6:	4b47      	ldr	r3, [pc, #284]	; (b7ef4 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b7dd8:	4610      	mov	r0, r2
   b7dda:	6819      	ldr	r1, [r3, #0]
   b7ddc:	f007 fb75 	bl	bf4ca <strcmp>
   b7de0:	b938      	cbnz	r0, b7df2 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b7de2:	4621      	mov	r1, r4
   b7de4:	4640      	mov	r0, r8
   b7de6:	f7ff ffbb 	bl	b7d60 <_ZN16LocalTimeConvert7timeStrEv>
}
   b7dea:	4640      	mov	r0, r8
   b7dec:	b028      	add	sp, #160	; 0xa0
   b7dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b7df2:	4629      	mov	r1, r5
   b7df4:	223f      	movs	r2, #63	; 0x3f
   b7df6:	a818      	add	r0, sp, #96	; 0x60
   b7df8:	f007 fbb3 	bl	bf562 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7dfc:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7dfe:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7e00:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7e04:	f007 fb91 	bl	bf52a <strlen>
    String zoneNameStr = zoneName();
   b7e08:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7e0a:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b7e0c:	a803      	add	r0, sp, #12
   b7e0e:	f7ff ffbf 	bl	b7d90 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b7e12:	1d20      	adds	r0, r4, #4
   b7e14:	f7ff fe40 	bl	b7a98 <_ZNK22LocalTimePosixTimezone3isZEv>
   b7e18:	b348      	cbz	r0, b7e6e <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b7e1a:	4937      	ldr	r1, [pc, #220]	; (b7ef8 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b7e1c:	a807      	add	r0, sp, #28
   b7e1e:	f007 fb5e 	bl	bf4de <strcpy>
   b7e22:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b7e24:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b7e26:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b7e2a:	45ba      	cmp	sl, r7
   b7e2c:	d94c      	bls.n	b7ec8 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b7e2e:	7833      	ldrb	r3, [r6, #0]
   b7e30:	2b25      	cmp	r3, #37	; 0x25
   b7e32:	f107 0901 	add.w	r9, r7, #1
   b7e36:	d117      	bne.n	b7e68 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b7e38:	7873      	ldrb	r3, [r6, #1]
   b7e3a:	2b7a      	cmp	r3, #122	; 0x7a
   b7e3c:	d136      	bne.n	b7eac <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b7e3e:	a807      	add	r0, sp, #28
   b7e40:	f007 fb73 	bl	bf52a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7e44:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b7e46:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7e48:	1838      	adds	r0, r7, r0
   b7e4a:	ebaa 0207 	sub.w	r2, sl, r7
   b7e4e:	1cb1      	adds	r1, r6, #2
   b7e50:	4418      	add	r0, r3
   b7e52:	f007 fa87 	bl	bf364 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b7e56:	462a      	mov	r2, r5
   b7e58:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b7e5a:	4630      	mov	r0, r6
   b7e5c:	f007 fa82 	bl	bf364 <memcpy>
            len = strlen(format_str);
   b7e60:	a818      	add	r0, sp, #96	; 0x60
   b7e62:	f007 fb62 	bl	bf52a <strlen>
   b7e66:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b7e68:	3601      	adds	r6, #1
   b7e6a:	464f      	mov	r7, r9
   b7e6c:	e7db      	b.n	b7e26 <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b7e6e:	6820      	ldr	r0, [r4, #0]
   b7e70:	f7ff fd46 	bl	b7900 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b7e74:	b1b8      	cbz	r0, b7ea6 <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b7e76:	f104 0018 	add.w	r0, r4, #24
   b7e7a:	f7ff fdf1 	bl	b7a60 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b7e7e:	223c      	movs	r2, #60	; 0x3c
   b7e80:	fb90 f3f2 	sdiv	r3, r0, r2
   b7e84:	2b00      	cmp	r3, #0
   b7e86:	bfb8      	it	lt
   b7e88:	425b      	neglt	r3, r3
   b7e8a:	fbb3 f1f2 	udiv	r1, r3, r2
   b7e8e:	fb02 3311 	mls	r3, r2, r1, r3
   b7e92:	9300      	str	r3, [sp, #0]
   b7e94:	4a19      	ldr	r2, [pc, #100]	; (b7efc <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b7e96:	4b1a      	ldr	r3, [pc, #104]	; (b7f00 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b7e98:	fb90 f3f3 	sdiv	r3, r0, r3
   b7e9c:	2110      	movs	r1, #16
   b7e9e:	a807      	add	r0, sp, #28
   b7ea0:	f003 fb62 	bl	bb568 <snprintf>
   b7ea4:	e7bd      	b.n	b7e22 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b7ea6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b7eaa:	e7e6      	b.n	b7e7a <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b7eac:	2b5a      	cmp	r3, #90	; 0x5a
   b7eae:	d1db      	bne.n	b7e68 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b7eb0:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7eb2:	ab18      	add	r3, sp, #96	; 0x60
   b7eb4:	1978      	adds	r0, r7, r5
   b7eb6:	ebaa 0207 	sub.w	r2, sl, r7
   b7eba:	1cb1      	adds	r1, r6, #2
   b7ebc:	4418      	add	r0, r3
   b7ebe:	f007 fa51 	bl	bf364 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b7ec2:	9903      	ldr	r1, [sp, #12]
   b7ec4:	462a      	mov	r2, r5
   b7ec6:	e7c8      	b.n	b7e5a <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b7ec8:	2100      	movs	r1, #0
   b7eca:	222e      	movs	r2, #46	; 0x2e
   b7ecc:	a80c      	add	r0, sp, #48	; 0x30
   b7ece:	910b      	str	r1, [sp, #44]	; 0x2c
   b7ed0:	f007 fa70 	bl	bf3b4 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b7ed4:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b7ed8:	aa18      	add	r2, sp, #96	; 0x60
   b7eda:	2132      	movs	r1, #50	; 0x32
   b7edc:	a80b      	add	r0, sp, #44	; 0x2c
   b7ede:	f003 fb7b 	bl	bb5d8 <strftime>
    return String(buf);    
   b7ee2:	a90b      	add	r1, sp, #44	; 0x2c
   b7ee4:	4640      	mov	r0, r8
   b7ee6:	f005 fecc 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b7eea:	a803      	add	r0, sp, #12
   b7eec:	f005 fe7e 	bl	bdbec <_ZN6StringD1Ev>
   b7ef0:	e77b      	b.n	b7dea <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b7ef2:	bf00      	nop
   b7ef4:	2003de7c 	.word	0x2003de7c
   b7ef8:	000c0803 	.word	0x000c0803
   b7efc:	000c0805 	.word	0x000c0805
   b7f00:	fffff1f0 	.word	0xfffff1f0

000b7f04 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b7f04:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b7f06:	4d09      	ldr	r5, [pc, #36]	; (b7f2c <_ZN9LocalTime8instanceEv+0x28>)
   b7f08:	682b      	ldr	r3, [r5, #0]
   b7f0a:	b963      	cbnz	r3, b7f26 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b7f0c:	2060      	movs	r0, #96	; 0x60
   b7f0e:	f7fc f8c2 	bl	b4096 <_Znwj>
   b7f12:	4604      	mov	r4, r0
   b7f14:	b130      	cbz	r0, b7f24 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b7f16:	4b06      	ldr	r3, [pc, #24]	; (b7f30 <_ZN9LocalTime8instanceEv+0x2c>)
   b7f18:	f840 3b04 	str.w	r3, [r0], #4
   b7f1c:	f7ff fe42 	bl	b7ba4 <_ZN22LocalTimePosixTimezoneC1Ev>
   b7f20:	2364      	movs	r3, #100	; 0x64
   b7f22:	65e3      	str	r3, [r4, #92]	; 0x5c
   b7f24:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b7f26:	6828      	ldr	r0, [r5, #0]
   b7f28:	bd38      	pop	{r3, r4, r5, pc}
   b7f2a:	bf00      	nop
   b7f2c:	2003e440 	.word	0x2003e440
   b7f30:	000c0818 	.word	0x000c0818

000b7f34 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b7f34:	f003 bb68 	b.w	bb608 <mktime>

000b7f38 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b7f38:	3901      	subs	r1, #1
   b7f3a:	290b      	cmp	r1, #11
   b7f3c:	d815      	bhi.n	b7f6a <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b7f3e:	e8df f001 	tbb	[pc, r1]
   b7f42:	0816      	.short	0x0816
   b7f44:	06160616 	.word	0x06160616
   b7f48:	16061616 	.word	0x16061616
   b7f4c:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b7f4e:	201e      	movs	r0, #30
   b7f50:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b7f52:	0783      	lsls	r3, r0, #30
   b7f54:	d10d      	bne.n	b7f72 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b7f56:	2364      	movs	r3, #100	; 0x64
   b7f58:	fb90 f2f3 	sdiv	r2, r0, r3
   b7f5c:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b7f60:	2800      	cmp	r0, #0
   b7f62:	bf0c      	ite	eq
   b7f64:	201c      	moveq	r0, #28
   b7f66:	201d      	movne	r0, #29
   b7f68:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b7f6a:	2000      	movs	r0, #0
   b7f6c:	4770      	bx	lr
            return 31;
   b7f6e:	201f      	movs	r0, #31
   b7f70:	4770      	bx	lr
                return 28;
   b7f72:	201c      	movs	r0, #28
}
   b7f74:	4770      	bx	lr

000b7f76 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b7f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b7f78:	2301      	movs	r3, #1
   b7f7a:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b7f7c:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7f80:	3b01      	subs	r3, #1
   b7f82:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b7f84:	2300      	movs	r3, #0
   b7f86:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b7f8a:	4606      	mov	r6, r0
   b7f8c:	460c      	mov	r4, r1
   b7f8e:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b7f90:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b7f92:	4620      	mov	r0, r4
   b7f94:	f7ff ffce 	bl	b7f34 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b7f98:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b7f9c:	69a2      	ldr	r2, [r4, #24]
   b7f9e:	429a      	cmp	r2, r3
   b7fa0:	d003      	beq.n	b7faa <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b7fa2:	68e3      	ldr	r3, [r4, #12]
   b7fa4:	3301      	adds	r3, #1
   b7fa6:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b7fa8:	e7f3      	b.n	b7f92 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b7faa:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b7fae:	2d01      	cmp	r5, #1
   b7fb0:	d013      	beq.n	b7fda <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b7fb2:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b7fb4:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b7fb6:	3d01      	subs	r5, #1
   b7fb8:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b7fbc:	441d      	add	r5, r3
   b7fbe:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b7fc0:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b7fc4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b7fc8:	f7ff ffb6 	bl	b7f38 <_ZN9LocalTime14lastDayOfMonthEii>
   b7fcc:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b7fce:	bfc4      	itt	gt
   b7fd0:	3d07      	subgt	r5, #7
   b7fd2:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b7fd4:	4620      	mov	r0, r4
   b7fd6:	f7ff ffad 	bl	b7f34 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b7fda:	4621      	mov	r1, r4
   b7fdc:	f106 0008 	add.w	r0, r6, #8
   b7fe0:	f7ff fd6c 	bl	b7abc <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b7fe4:	4638      	mov	r0, r7
   b7fe6:	f7ff fd76 	bl	b7ad6 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b7fea:	4620      	mov	r0, r4
}
   b7fec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b7ff0:	f003 bb0a 	b.w	bb608 <mktime>

000b7ff4 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b7ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b7ff6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b7ffa:	b085      	sub	sp, #20
   b7ffc:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b7ffe:	b92b      	cbnz	r3, b800c <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b8000:	f7ff ff80 	bl	b7f04 <_ZN9LocalTime8instanceEv>
   b8004:	1d01      	adds	r1, r0, #4
   b8006:	1d20      	adds	r0, r4, #4
   b8008:	f7ff fc91 	bl	b792e <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b800c:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b8010:	2b00      	cmp	r3, #0
   b8012:	d065      	beq.n	b80e0 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b8014:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b8018:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b801c:	4639      	mov	r1, r7
   b801e:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b8020:	463e      	mov	r6, r7
   b8022:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b8026:	f003 fadf 	bl	bb5e8 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b802a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b802c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b8030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8032:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8036:	6833      	ldr	r3, [r6, #0]
   b8038:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b803a:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b803e:	a802      	add	r0, sp, #8
   b8040:	f7ff fcc8 	bl	b79d4 <_ZN12LocalTimeHMSC1ERKS_>
   b8044:	aa02      	add	r2, sp, #8
   b8046:	4639      	mov	r1, r7
   b8048:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b804c:	f7ff ff93 	bl	b7f76 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b8050:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b8054:	f104 0118 	add.w	r1, r4, #24
   b8058:	a802      	add	r0, sp, #8
   b805a:	f7ff fcbb 	bl	b79d4 <_ZN12LocalTimeHMSC1ERKS_>
   b805e:	aa02      	add	r2, sp, #8
   b8060:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b8064:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b8068:	f7ff ff85 	bl	b7f76 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b806c:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b8070:	4286      	cmp	r6, r0
   b8072:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b8076:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b807a:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b807e:	da23      	bge.n	b80c8 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b8080:	42b2      	cmp	r2, r6
   b8082:	eb73 0505 	sbcs.w	r5, r3, r5
   b8086:	da19      	bge.n	b80bc <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b8088:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b808a:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b808c:	6820      	ldr	r0, [r4, #0]
   b808e:	f7ff fc37 	bl	b7900 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b8092:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b8096:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b809a:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b809c:	bb10      	cbnz	r0, b80e4 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b809e:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b80a2:	f7ff fcdd 	bl	b7a60 <_ZNK12LocalTimeHMS9toSecondsEv>
   b80a6:	1a2d      	subs	r5, r5, r0
   b80a8:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b80ac:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b80b0:	9901      	ldr	r1, [sp, #4]
   b80b2:	a802      	add	r0, sp, #8
   b80b4:	f003 fa98 	bl	bb5e8 <localtime_r>
}
   b80b8:	b005      	add	sp, #20
   b80ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b80bc:	4282      	cmp	r2, r0
   b80be:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b80c0:	bfb4      	ite	lt
   b80c2:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b80c4:	2302      	movge	r3, #2
   b80c6:	e7e0      	b.n	b808a <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b80c8:	4282      	cmp	r2, r0
   b80ca:	eb73 0101 	sbcs.w	r1, r3, r1
   b80ce:	da01      	bge.n	b80d4 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b80d0:	2303      	movs	r3, #3
   b80d2:	e7da      	b.n	b808a <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b80d4:	42b2      	cmp	r2, r6
   b80d6:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b80d8:	bfb4      	ite	lt
   b80da:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b80dc:	2305      	movge	r3, #5
   b80de:	e7d4      	b.n	b808a <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b80e0:	2306      	movs	r3, #6
   b80e2:	e7d2      	b.n	b808a <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b80e4:	f104 0018 	add.w	r0, r4, #24
   b80e8:	e7db      	b.n	b80a2 <_ZN16LocalTimeConvert7convertEv+0xae>

000b80ea <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b80ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b80ec:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b80ee:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b80f0:	4668      	mov	r0, sp
   b80f2:	f7ff fc66 	bl	b79c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b80f6:	466a      	mov	r2, sp
   b80f8:	4629      	mov	r1, r5
   b80fa:	4620      	mov	r0, r4
   b80fc:	f004 f9a6 	bl	bc44c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8100:	a801      	add	r0, sp, #4
   b8102:	f7fe f88d 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8106:	4620      	mov	r0, r4
   b8108:	b003      	add	sp, #12
   b810a:	bd30      	pop	{r4, r5, pc}

000b810c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b810c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b810e:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8110:	4604      	mov	r4, r0
   b8112:	4668      	mov	r0, sp
   b8114:	f7ff fc55 	bl	b79c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b8118:	466a      	mov	r2, sp
   b811a:	4629      	mov	r1, r5
   b811c:	4620      	mov	r0, r4
   b811e:	f004 f971 	bl	bc404 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8122:	a801      	add	r0, sp, #4
   b8124:	f7fe f87c 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8128:	4620      	mov	r0, r4
   b812a:	b003      	add	sp, #12
   b812c:	bd30      	pop	{r4, r5, pc}

000b812e <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b812e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8130:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8132:	4604      	mov	r4, r0
   b8134:	4668      	mov	r0, sp
   b8136:	f7ff fc44 	bl	b79c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b813a:	466a      	mov	r2, sp
   b813c:	4629      	mov	r1, r5
   b813e:	4620      	mov	r0, r4
   b8140:	f004 f909 	bl	bc356 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8144:	a801      	add	r0, sp, #4
   b8146:	f7fe f86b 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b814a:	4620      	mov	r0, r4
   b814c:	b003      	add	sp, #12
   b814e:	bd30      	pop	{r4, r5, pc}

000b8150 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b8150:	4770      	bx	lr

000b8152 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b8152:	b510      	push	{r4, lr}
}
   b8154:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b8156:	4604      	mov	r4, r0
}
   b8158:	f7fb ffa1 	bl	b409e <_ZdlPvj>
   b815c:	4620      	mov	r0, r4
   b815e:	bd10      	pop	{r4, pc}

000b8160 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b8160:	6803      	ldr	r3, [r0, #0]
   b8162:	b2c9      	uxtb	r1, r1
   b8164:	689b      	ldr	r3, [r3, #8]
   b8166:	4718      	bx	r3

000b8168 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b8168:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b816a:	4d03      	ldr	r5, [pc, #12]	; (b8178 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b816c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b8170:	e9c0 5100 	strd	r5, r1, [r0]
}
   b8174:	bd30      	pop	{r4, r5, pc}
   b8176:	bf00      	nop
   b8178:	000c0858 	.word	0x000c0858

000b817c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b817c:	6840      	ldr	r0, [r0, #4]
   b817e:	f003 bf5b 	b.w	bc038 <_ZN7TwoWire5beginEv>

000b8182 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b8182:	b510      	push	{r4, lr}
   b8184:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b8186:	6800      	ldr	r0, [r0, #0]
   b8188:	f003 ffb1 	bl	bc0ee <_ZN7TwoWire6unlockEv>
   b818c:	4620      	mov	r0, r4
   b818e:	bd10      	pop	{r4, pc}

000b8190 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b8190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8194:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b8196:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8198:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b819a:	460d      	mov	r5, r1
   b819c:	4616      	mov	r6, r2
   b819e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b81a0:	f003 ff9c 	bl	bc0dc <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b81a4:	b1a7      	cbz	r7, b81d0 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b81a6:	68e1      	ldr	r1, [r4, #12]
   b81a8:	6860      	ldr	r0, [r4, #4]
   b81aa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b81ae:	f003 ff76 	bl	bc09e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b81b2:	0a29      	lsrs	r1, r5, #8
   b81b4:	6860      	ldr	r0, [r4, #4]
   b81b6:	f7ff ffd3 	bl	b8160 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b81ba:	4629      	mov	r1, r5
   b81bc:	6860      	ldr	r0, [r4, #4]
   b81be:	f7ff ffcf 	bl	b8160 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b81c2:	6860      	ldr	r0, [r4, #4]
   b81c4:	2100      	movs	r1, #0
   b81c6:	f003 ff85 	bl	bc0d4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b81ca:	b148      	cbz	r0, b81e0 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b81cc:	2400      	movs	r4, #0
   b81ce:	e000      	b.n	b81d2 <_ZN6MB85RC8readDataEjPhj+0x42>
   b81d0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b81d2:	a801      	add	r0, sp, #4
   b81d4:	f7ff ffd5 	bl	b8182 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b81d8:	4620      	mov	r0, r4
   b81da:	b003      	add	sp, #12
   b81dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b81e0:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b81e2:	7b21      	ldrb	r1, [r4, #12]
   b81e4:	6860      	ldr	r0, [r4, #4]
   b81e6:	46b8      	mov	r8, r7
   b81e8:	bf28      	it	cs
   b81ea:	f04f 0820 	movcs.w	r8, #32
   b81ee:	2301      	movs	r3, #1
   b81f0:	4642      	mov	r2, r8
   b81f2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b81f6:	f003 ff3c 	bl	bc072 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b81fa:	f006 fb17 	bl	be82c <_Z19__fetch_global_Wirev>
   b81fe:	6803      	ldr	r3, [r0, #0]
   b8200:	691b      	ldr	r3, [r3, #16]
   b8202:	4798      	blx	r3
   b8204:	4540      	cmp	r0, r8
   b8206:	dbe1      	blt.n	b81cc <_ZN6MB85RC8readDataEjPhj+0x3c>
   b8208:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b820c:	f006 fb0e 	bl	be82c <_Z19__fetch_global_Wirev>
   b8210:	6803      	ldr	r3, [r0, #0]
   b8212:	695b      	ldr	r3, [r3, #20]
   b8214:	4798      	blx	r3
   b8216:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b821a:	454e      	cmp	r6, r9
   b821c:	d1f6      	bne.n	b820c <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b821e:	4445      	add	r5, r8
				dataLen--;
   b8220:	eba7 0708 	sub.w	r7, r7, r8
   b8224:	e7be      	b.n	b81a4 <_ZN6MB85RC8readDataEjPhj+0x14>

000b8226 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b8226:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b822a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b822c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b822e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b8230:	460e      	mov	r6, r1
   b8232:	4690      	mov	r8, r2
   b8234:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b8236:	f003 ff51 	bl	bc0dc <_ZN7TwoWire4lockEv>
   b823a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b823e:	f1b9 0f00 	cmp.w	r9, #0
   b8242:	d02a      	beq.n	b829a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b8244:	b34d      	cbz	r5, b829a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b8246:	68e1      	ldr	r1, [r4, #12]
   b8248:	6860      	ldr	r0, [r4, #4]
   b824a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b824e:	f003 ff26 	bl	bc09e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b8252:	0a31      	lsrs	r1, r6, #8
   b8254:	6860      	ldr	r0, [r4, #4]
   b8256:	f7ff ff83 	bl	b8160 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b825a:	6860      	ldr	r0, [r4, #4]
   b825c:	4631      	mov	r1, r6
   b825e:	f7ff ff7f 	bl	b8160 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b8262:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b8266:	4647      	mov	r7, r8
   b8268:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b826c:	6860      	ldr	r0, [r4, #4]
   b826e:	f817 1b01 	ldrb.w	r1, [r7], #1
   b8272:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b8274:	3d01      	subs	r5, #1
				wire.write(*data);
   b8276:	689b      	ldr	r3, [r3, #8]
   b8278:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b827a:	4555      	cmp	r5, sl
   b827c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b8280:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b8282:	d001      	beq.n	b8288 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b8284:	2d00      	cmp	r5, #0
   b8286:	d1f1      	bne.n	b826c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b8288:	6860      	ldr	r0, [r4, #4]
   b828a:	2101      	movs	r1, #1
   b828c:	f003 ff22 	bl	bc0d4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b8290:	2800      	cmp	r0, #0
   b8292:	d0d7      	beq.n	b8244 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b8294:	f04f 0900 	mov.w	r9, #0
   b8298:	e7d1      	b.n	b823e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b829a:	a801      	add	r0, sp, #4
   b829c:	f7ff ff71 	bl	b8182 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b82a0:	4648      	mov	r0, r9
   b82a2:	b003      	add	sp, #12
   b82a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b82a8 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b82a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b82ac:	b08b      	sub	sp, #44	; 0x2c
   b82ae:	460e      	mov	r6, r1
   b82b0:	4615      	mov	r5, r2
   b82b2:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b82b4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b82b6:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b82b8:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b82ba:	f003 ff0f 	bl	bc0dc <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b82be:	42ae      	cmp	r6, r5
   b82c0:	d229      	bcs.n	b8316 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b82c2:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b82c4:	4425      	add	r5, r4
			while(numBytes > 0) {
   b82c6:	b18c      	cbz	r4, b82ec <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b82c8:	2c1e      	cmp	r4, #30
   b82ca:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b82cc:	f8d8 3000 	ldr.w	r3, [r8]
   b82d0:	bf28      	it	cs
   b82d2:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b82d4:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b82d6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b82da:	aa02      	add	r2, sp, #8
   b82dc:	463b      	mov	r3, r7
   b82de:	4631      	mov	r1, r6
   b82e0:	4640      	mov	r0, r8
				framAddrTo -= count;
   b82e2:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b82e4:	47c8      	blx	r9
				if (!result) {
   b82e6:	b948      	cbnz	r0, b82fc <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b82e8:	2400      	movs	r4, #0
   b82ea:	e000      	b.n	b82ee <_ZN6MB85RC8moveDataEjjj+0x46>
   b82ec:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b82ee:	a801      	add	r0, sp, #4
   b82f0:	f7ff ff47 	bl	b8182 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b82f4:	4620      	mov	r0, r4
   b82f6:	b00b      	add	sp, #44	; 0x2c
   b82f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b82fc:	f8d8 3000 	ldr.w	r3, [r8]
   b8300:	aa02      	add	r2, sp, #8
   b8302:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b8306:	4629      	mov	r1, r5
   b8308:	463b      	mov	r3, r7
   b830a:	4640      	mov	r0, r8
   b830c:	47c8      	blx	r9
				if (!result) {
   b830e:	2800      	cmp	r0, #0
   b8310:	d0ea      	beq.n	b82e8 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b8312:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b8314:	e7d7      	b.n	b82c6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b8316:	d9e9      	bls.n	b82ec <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b8318:	2c00      	cmp	r4, #0
   b831a:	d0e7      	beq.n	b82ec <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b831c:	f8d8 3000 	ldr.w	r3, [r8]
   b8320:	2c1e      	cmp	r4, #30
   b8322:	4627      	mov	r7, r4
   b8324:	bf28      	it	cs
   b8326:	271e      	movcs	r7, #30
   b8328:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b832c:	aa02      	add	r2, sp, #8
   b832e:	463b      	mov	r3, r7
   b8330:	4631      	mov	r1, r6
   b8332:	4640      	mov	r0, r8
   b8334:	47c8      	blx	r9
				if (!result) {
   b8336:	2800      	cmp	r0, #0
   b8338:	d0d6      	beq.n	b82e8 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b833a:	f8d8 3000 	ldr.w	r3, [r8]
   b833e:	aa02      	add	r2, sp, #8
   b8340:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b8344:	4629      	mov	r1, r5
   b8346:	463b      	mov	r3, r7
   b8348:	4640      	mov	r0, r8
   b834a:	47c8      	blx	r9
				if (!result) {
   b834c:	2800      	cmp	r0, #0
   b834e:	d0cb      	beq.n	b82e8 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b8350:	443e      	add	r6, r7
				framAddrTo += count;
   b8352:	443d      	add	r5, r7
				numBytes -= count;
   b8354:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b8356:	e7df      	b.n	b8318 <_ZN6MB85RC8moveDataEjjj+0x70>

000b8358 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b8358:	6803      	ldr	r3, [r0, #0]
   b835a:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b835c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b8360:	2101      	movs	r1, #1
   b8362:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b8366:	4770      	bx	lr

000b8368 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8368:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b836a:	6842      	ldr	r2, [r0, #4]
   b836c:	4603      	mov	r3, r0
   b836e:	1054      	asrs	r4, r2, #1
   b8370:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b8374:	07d2      	lsls	r2, r2, #31
   b8376:	bf48      	it	mi
   b8378:	590a      	ldrmi	r2, [r1, r4]
   b837a:	681b      	ldr	r3, [r3, #0]
      }
   b837c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8380:	bf48      	it	mi
   b8382:	58d3      	ldrmi	r3, [r2, r3]
   b8384:	4718      	bx	r3

000b8386 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b8386:	2a01      	cmp	r2, #1
   b8388:	d102      	bne.n	b8390 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b838a:	6001      	str	r1, [r0, #0]
      }
   b838c:	2000      	movs	r0, #0
   b838e:	4770      	bx	lr
	  switch (__op)
   b8390:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b8392:	bf04      	itt	eq
   b8394:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b8398:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b839c:	e7f6      	b.n	b838c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b839e <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b839e:	2a01      	cmp	r2, #1
   b83a0:	d102      	bne.n	b83a8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b83a2:	6001      	str	r1, [r0, #0]
      }
   b83a4:	2000      	movs	r0, #0
   b83a6:	4770      	bx	lr
	  switch (__op)
   b83a8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b83aa:	bf04      	itt	eq
   b83ac:	680b      	ldreq	r3, [r1, #0]
   b83ae:	6003      	streq	r3, [r0, #0]
	      break;
   b83b0:	e7f8      	b.n	b83a4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b83b2 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b83b2:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b83b4:	f002 bcd4 	b.w	bad60 <os_mutex_recursive_lock>

000b83b8 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b83b8:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b83bc:	4601      	mov	r1, r0
    if (stateHandler) {
   b83be:	b11b      	cbz	r3, b83c8 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b83c0:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b83c4:	30c0      	adds	r0, #192	; 0xc0
   b83c6:	4718      	bx	r3
}
   b83c8:	4770      	bx	lr
	...

000b83cc <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b83cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b83ce:	4d12      	ldr	r5, [pc, #72]	; (b8418 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b83d0:	4608      	mov	r0, r1
        eventData = "";
   b83d2:	2a00      	cmp	r2, #0
   b83d4:	bf18      	it	ne
   b83d6:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b83d8:	460e      	mov	r6, r1
   b83da:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b83dc:	f007 f8a5 	bl	bf52a <strlen>
   b83e0:	2840      	cmp	r0, #64	; 0x40
   b83e2:	d816      	bhi.n	b8412 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b83e4:	4628      	mov	r0, r5
   b83e6:	f007 f8a0 	bl	bf52a <strlen>
   b83ea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b83ee:	d810      	bhi.n	b8412 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b83f0:	3043      	adds	r0, #67	; 0x43
   b83f2:	f7fb fe52 	bl	b409a <_Znaj>
    if (event) {
   b83f6:	4604      	mov	r4, r0
   b83f8:	b148      	cbz	r0, b840e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b83fa:	4631      	mov	r1, r6
        event->flags = flags;
   b83fc:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b8400:	f007 f86d 	bl	bf4de <strcpy>
        strcpy(event->eventData, eventData);
   b8404:	4629      	mov	r1, r5
   b8406:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b840a:	f007 f868 	bl	bf4de <strcpy>
}
   b840e:	4620      	mov	r0, r4
   b8410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b8412:	2400      	movs	r4, #0
   b8414:	e7fb      	b.n	b840e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b8416:	bf00      	nop
   b8418:	000c10a4 	.word	0x000c10a4

000b841c <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b841c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b841e:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b8420:	460a      	mov	r2, r1
   b8422:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b8424:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b8426:	1d01      	adds	r1, r0, #4
   b8428:	a808      	add	r0, sp, #32
   b842a:	f002 f883 	bl	ba534 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b842e:	9808      	ldr	r0, [sp, #32]
   b8430:	2100      	movs	r1, #0
   b8432:	f007 f98f 	bl	bf754 <open>
   b8436:	4605      	mov	r5, r0
   b8438:	a808      	add	r0, sp, #32
   b843a:	f005 fbd7 	bl	bdbec <_ZN6StringD1Ev>
    if (fd) {
   b843e:	2d00      	cmp	r5, #0
   b8440:	d060      	beq.n	b8504 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b8442:	a908      	add	r1, sp, #32
   b8444:	4628      	mov	r0, r5
   b8446:	f007 f973 	bl	bf730 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b844a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b844c:	492e      	ldr	r1, [pc, #184]	; (b8508 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b844e:	482f      	ldr	r0, [pc, #188]	; (b850c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8450:	4632      	mov	r2, r6
   b8452:	f7fe faa5 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b8456:	2200      	movs	r2, #0
   b8458:	4611      	mov	r1, r2
   b845a:	4628      	mov	r0, r5
   b845c:	f007 f970 	bl	bf740 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b8460:	2208      	movs	r2, #8
   b8462:	a906      	add	r1, sp, #24
   b8464:	4628      	mov	r0, r5
   b8466:	f007 f989 	bl	bf77c <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b846a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b846c:	2f4a      	cmp	r7, #74	; 0x4a
   b846e:	dd39      	ble.n	b84e4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b8470:	4b27      	ldr	r3, [pc, #156]	; (b8510 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b8472:	9a06      	ldr	r2, [sp, #24]
   b8474:	429a      	cmp	r2, r3
   b8476:	d135      	bne.n	b84e4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b8478:	4b26      	ldr	r3, [pc, #152]	; (b8514 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b847a:	9a07      	ldr	r2, [sp, #28]
   b847c:	429a      	cmp	r2, r3
   b847e:	d131      	bne.n	b84e4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b8480:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b8484:	4610      	mov	r0, r2
   b8486:	9205      	str	r2, [sp, #20]
   b8488:	f7fb fe07 	bl	b409a <_Znaj>
            if (result) {
   b848c:	4604      	mov	r4, r0
   b848e:	b1c0      	cbz	r0, b84c2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b8490:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b8492:	4601      	mov	r1, r0
   b8494:	9a05      	ldr	r2, [sp, #20]
   b8496:	4628      	mov	r0, r5
   b8498:	f007 f970 	bl	bf77c <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b849c:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b84a0:	b9ab      	cbnz	r3, b84ce <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b84a2:	1c63      	adds	r3, r4, #1
   b84a4:	4618      	mov	r0, r3
   b84a6:	9305      	str	r3, [sp, #20]
   b84a8:	f007 f83f 	bl	bf52a <strlen>
   b84ac:	283f      	cmp	r0, #63	; 0x3f
   b84ae:	9b05      	ldr	r3, [sp, #20]
   b84b0:	d80d      	bhi.n	b84ce <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b84b2:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b84b6:	9200      	str	r2, [sp, #0]
   b84b8:	4917      	ldr	r1, [pc, #92]	; (b8518 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b84ba:	4814      	ldr	r0, [pc, #80]	; (b850c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b84bc:	4632      	mov	r2, r6
   b84be:	f7fe fa6f 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b84c2:	4628      	mov	r0, r5
   b84c4:	f007 f92c 	bl	bf720 <close>
}
   b84c8:	4620      	mov	r0, r4
   b84ca:	b01f      	add	sp, #124	; 0x7c
   b84cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b84ce:	4913      	ldr	r1, [pc, #76]	; (b851c <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b84d0:	480e      	ldr	r0, [pc, #56]	; (b850c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b84d2:	4632      	mov	r2, r6
   b84d4:	f7fe fa64 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b84d8:	2143      	movs	r1, #67	; 0x43
   b84da:	4620      	mov	r0, r4
   b84dc:	f7fb fddf 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b84e0:	2400      	movs	r4, #0
   b84e2:	e7ee      	b.n	b84c2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b84e4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b84e8:	9302      	str	r3, [sp, #8]
   b84ea:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b84ee:	9301      	str	r3, [sp, #4]
   b84f0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b84f4:	9300      	str	r3, [sp, #0]
   b84f6:	490a      	ldr	r1, [pc, #40]	; (b8520 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b84f8:	9b06      	ldr	r3, [sp, #24]
   b84fa:	4804      	ldr	r0, [pc, #16]	; (b850c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b84fc:	4632      	mov	r2, r6
   b84fe:	f7fe fa4f 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
   b8502:	e7ed      	b.n	b84e0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b8504:	462c      	mov	r4, r5
    return result;
   b8506:	e7df      	b.n	b84c8 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b8508:	000c086c 	.word	0x000c086c
   b850c:	2003e444 	.word	0x2003e444
   b8510:	31b67663 	.word	0x31b67663
   b8514:	00410801 	.word	0x00410801
   b8518:	000c0880 	.word	0x000c0880
   b851c:	000c08a2 	.word	0x000c08a2
   b8520:	000c08d0 	.word	0x000c08d0

000b8524 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b8524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8528:	4680      	mov	r8, r0
   b852a:	4b28      	ldr	r3, [pc, #160]	; (b85cc <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b852c:	f848 3b04 	str.w	r3, [r8], #4
   b8530:	4604      	mov	r4, r0
   b8532:	4640      	mov	r0, r8
   b8534:	f001 ff16 	bl	ba364 <_ZN14SequentialFileC1Ev>
   b8538:	2202      	movs	r2, #2
   b853a:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b853c:	2500      	movs	r5, #0
   b853e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b8542:	2308      	movs	r3, #8
   b8544:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b8546:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b854a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b854e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b8552:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b8556:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8558:	2020      	movs	r0, #32
   b855a:	f7fb fd9c 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b855e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b8560:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b8562:	3e01      	subs	r6, #1
   b8564:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b8566:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b856a:	4607      	mov	r7, r0
   b856c:	f44f 7000 	mov.w	r0, #512	; 0x200
   b8570:	f7fb fd91 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8574:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b8578:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b857c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8580:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b8584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8588:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b858c:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b8590:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b8594:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b8598:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b859c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b85a0:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b85a4:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b85a8:	4909      	ldr	r1, [pc, #36]	; (b85d0 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b85aa:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b85ae:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b85b2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b85b6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b85ba:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b85be:	4640      	mov	r0, r8
   b85c0:	f001 ff16 	bl	ba3f0 <_ZN14SequentialFile11withDirPathEPKc>
}
   b85c4:	4620      	mov	r0, r4
   b85c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b85ca:	bf00      	nop
   b85cc:	000c0aec 	.word	0x000c0aec
   b85d0:	000c0915 	.word	0x000c0915

000b85d4 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b85d4:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b85d6:	4d06      	ldr	r5, [pc, #24]	; (b85f0 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b85d8:	682b      	ldr	r3, [r5, #0]
   b85da:	b93b      	cbnz	r3, b85ec <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b85dc:	20d0      	movs	r0, #208	; 0xd0
   b85de:	f7fb fd5a 	bl	b4096 <_Znwj>
   b85e2:	4604      	mov	r4, r0
   b85e4:	b108      	cbz	r0, b85ea <_ZN17PublishQueuePosix8instanceEv+0x16>
   b85e6:	f7ff ff9d 	bl	b8524 <_ZN17PublishQueuePosixC1Ev>
   b85ea:	602c      	str	r4, [r5, #0]
}
   b85ec:	6828      	ldr	r0, [r5, #0]
   b85ee:	bd38      	pop	{r3, r4, r5, pc}
   b85f0:	2003e448 	.word	0x2003e448

000b85f4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b85f4:	6942      	ldr	r2, [r0, #20]
   b85f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b85f8:	1a9b      	subs	r3, r3, r2
   b85fa:	109b      	asrs	r3, r3, #2
   b85fc:	1e5a      	subs	r2, r3, #1
   b85fe:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b8602:	1a5b      	subs	r3, r3, r1
   b8604:	109b      	asrs	r3, r3, #2
   b8606:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b860a:	6902      	ldr	r2, [r0, #16]
   b860c:	6880      	ldr	r0, [r0, #8]
   b860e:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b8610:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b8614:	4770      	bx	lr

000b8616 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b8616:	b538      	push	{r3, r4, r5, lr}
   b8618:	4605      	mov	r5, r0
   b861a:	f7ff feca 	bl	b83b2 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b861e:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b8622:	f7ff ffe7 	bl	b85f4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b8626:	4604      	mov	r4, r0
   b8628:	b950      	cbnz	r0, b8640 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b862a:	1d28      	adds	r0, r5, #4
   b862c:	f002 f9d6 	bl	ba9dc <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b8630:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b8634:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b8636:	b11b      	cbz	r3, b8640 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b8638:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b863c:	b903      	cbnz	r3, b8640 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b863e:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b8640:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b8642:	f002 fb95 	bl	bad70 <os_mutex_recursive_unlock>
}
   b8646:	4620      	mov	r0, r4
   b8648:	bd38      	pop	{r3, r4, r5, pc}

000b864a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b864a:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b864c:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b864e:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b8650:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b8652:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b8654:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b8656:	d002      	beq.n	b865e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b8658:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b865a:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b865c:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b865e:	68c0      	ldr	r0, [r0, #12]
   b8660:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8664:	f7fb fd1b 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b8668:	6963      	ldr	r3, [r4, #20]
   b866a:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b866c:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b866e:	685b      	ldr	r3, [r3, #4]
   b8670:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8672:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8676:	6122      	str	r2, [r4, #16]
   b8678:	e7ef      	b.n	b865a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b867c <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8680:	b085      	sub	sp, #20
   b8682:	4604      	mov	r4, r0
   b8684:	f7ff fe95 	bl	b83b2 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b8688:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8730 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b868c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b8734 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b8690:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b8738 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b8694:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b8698:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b869c:	4293      	cmp	r3, r2
   b869e:	d105      	bne.n	b86ac <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b86a0:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b86a2:	b005      	add	sp, #20
   b86a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b86a8:	f002 bb62 	b.w	bad70 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b86ac:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b86b0:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b86b4:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b86b6:	f7ff ffc8 	bl	b864a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b86ba:	4640      	mov	r0, r8
   b86bc:	f002 f932 	bl	ba924 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b86c0:	2300      	movs	r3, #0
   b86c2:	4602      	mov	r2, r0
   b86c4:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b86c6:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b86c8:	4668      	mov	r0, sp
   b86ca:	f001 ff33 	bl	ba534 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b86ce:	9800      	ldr	r0, [sp, #0]
   b86d0:	f240 2102 	movw	r1, #514	; 0x202
   b86d4:	f007 f83e 	bl	bf754 <open>
   b86d8:	4605      	mov	r5, r0
   b86da:	4668      	mov	r0, sp
   b86dc:	f005 fa86 	bl	bdbec <_ZN6StringD1Ev>
            if (fd) {
   b86e0:	b1c5      	cbz	r5, b8714 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b86e2:	2208      	movs	r2, #8
   b86e4:	4669      	mov	r1, sp
   b86e6:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b86e8:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b86ec:	f007 f858 	bl	bf7a0 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b86f0:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b86f4:	f006 ff19 	bl	bf52a <strlen>
   b86f8:	4639      	mov	r1, r7
   b86fa:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b86fe:	4628      	mov	r0, r5
   b8700:	f007 f84e 	bl	bf7a0 <write>
                close(fd);
   b8704:	4628      	mov	r0, r5
   b8706:	f007 f80b 	bl	bf720 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b870a:	4808      	ldr	r0, [pc, #32]	; (b872c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b870c:	4632      	mov	r2, r6
   b870e:	4659      	mov	r1, fp
   b8710:	f7fe f946 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b8714:	4631      	mov	r1, r6
   b8716:	4640      	mov	r0, r8
   b8718:	f002 f946 	bl	ba9a8 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b871c:	2f00      	cmp	r7, #0
   b871e:	d0b9      	beq.n	b8694 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b8720:	2143      	movs	r1, #67	; 0x43
   b8722:	4638      	mov	r0, r7
   b8724:	f7fb fcbb 	bl	b409e <_ZdlPvj>
   b8728:	e7b2      	b.n	b8690 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b872a:	bf00      	nop
   b872c:	2003e444 	.word	0x2003e444
   b8730:	31b67663 	.word	0x31b67663
   b8734:	00410801 	.word	0x00410801
   b8738:	000c0923 	.word	0x000c0923

000b873c <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b873c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8740:	4604      	mov	r4, r0
   b8742:	f7ff fe36 	bl	b83b2 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b8746:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b874a:	f7ff ff53 	bl	b85f4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b874e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b8750:	4298      	cmp	r0, r3
   b8752:	d902      	bls.n	b875a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b8754:	4620      	mov	r0, r4
   b8756:	f7ff ff91 	bl	b867c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b875a:	f8df 8044 	ldr.w	r8, [pc, #68]	; b87a0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b875e:	4f0f      	ldr	r7, [pc, #60]	; (b879c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b8760:	1d26      	adds	r6, r4, #4
   b8762:	4630      	mov	r0, r6
   b8764:	f002 f93a 	bl	ba9dc <_ZNK14SequentialFile11getQueueLenEv>
   b8768:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b876a:	4298      	cmp	r0, r3
   b876c:	dc04      	bgt.n	b8778 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b876e:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b8770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8774:	f002 bafc 	b.w	bad70 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b8778:	2101      	movs	r1, #1
   b877a:	4630      	mov	r0, r6
   b877c:	f002 f8de 	bl	ba93c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b8780:	4605      	mov	r5, r0
   b8782:	2800      	cmp	r0, #0
   b8784:	d0ed      	beq.n	b8762 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b8786:	4601      	mov	r1, r0
   b8788:	2200      	movs	r2, #0
   b878a:	4630      	mov	r0, r6
   b878c:	f001 ff0e 	bl	ba5ac <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b8790:	462a      	mov	r2, r5
   b8792:	4641      	mov	r1, r8
   b8794:	4638      	mov	r0, r7
   b8796:	f7fb fca1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b879a:	e7e2      	b.n	b8762 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b879c:	2003e444 	.word	0x2003e444
   b87a0:	000c0940 	.word	0x000c0940

000b87a4 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b87a4:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b87a6:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b87aa:	430b      	orrs	r3, r1
   b87ac:	d005      	beq.n	b87ba <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b87ae:	3840      	subs	r0, #64	; 0x40
   b87b0:	ea50 0301 	orrs.w	r3, r0, r1
   b87b4:	d10b      	bne.n	b87ce <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b87b6:	2a09      	cmp	r2, #9
   b87b8:	d109      	bne.n	b87ce <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b87ba:	4905      	ldr	r1, [pc, #20]	; (b87d0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b87bc:	4805      	ldr	r0, [pc, #20]	; (b87d4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b87be:	f7fe f8ef 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b87c2:	f7ff ff07 	bl	b85d4 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b87c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b87ca:	f7ff bf57 	b.w	b867c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b87ce:	bd08      	pop	{r3, pc}
   b87d0:	000c0953 	.word	0x000c0953
   b87d4:	2003e444 	.word	0x2003e444

000b87d8 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b87d8:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b87da:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b87dc:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b87de:	b183      	cbz	r3, b8802 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b87e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b87e2:	6945      	ldr	r5, [r0, #20]
   b87e4:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b87e6:	42ae      	cmp	r6, r5
   b87e8:	d906      	bls.n	b87f8 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b87ea:	f855 0b04 	ldr.w	r0, [r5], #4
   b87ee:	f44f 7100 	mov.w	r1, #512	; 0x200
   b87f2:	f7fb fc54 	bl	b409e <_ZdlPvj>
   b87f6:	e7f6      	b.n	b87e6 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b87f8:	6861      	ldr	r1, [r4, #4]
   b87fa:	6820      	ldr	r0, [r4, #0]
   b87fc:	0089      	lsls	r1, r1, #2
   b87fe:	f7fb fc4e 	bl	b409e <_ZdlPvj>
    }
   b8802:	4620      	mov	r0, r4
   b8804:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8808 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b8808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b880a:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b880e:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b8810:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8812:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b8814:	b90a      	cbnz	r2, b881a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b8816:	07d9      	lsls	r1, r3, #31
   b8818:	d505      	bpl.n	b8826 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b881a:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b881e:	4b0a      	ldr	r3, [pc, #40]	; (b8848 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b8820:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8822:	4b0a      	ldr	r3, [pc, #40]	; (b884c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b8824:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b8826:	4621      	mov	r1, r4
   b8828:	4668      	mov	r0, sp
   b882a:	f7fe ff3e 	bl	b76aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b882e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8830:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8832:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8834:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8836:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b8838:	4668      	mov	r0, sp
   b883a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b883c:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b883e:	9203      	str	r2, [sp, #12]
   b8840:	f7fc f9d8 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
	}
   b8844:	b004      	add	sp, #16
   b8846:	bd10      	pop	{r4, pc}
   b8848:	000b8369 	.word	0x000b8369
   b884c:	000b8387 	.word	0x000b8387

000b8850 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b8850:	b570      	push	{r4, r5, r6, lr}
   b8852:	b086      	sub	sp, #24
   b8854:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8856:	f002 fdb7 	bl	bb3c8 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b885a:	b948      	cbnz	r0, b8870 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b885c:	4b43      	ldr	r3, [pc, #268]	; (b896c <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b885e:	a902      	add	r1, sp, #8
   b8860:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b8864:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8868:	f7ff ffce 	bl	b8808 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b886c:	b006      	add	sp, #24
   b886e:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b8870:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b8874:	b11d      	cbz	r5, b887e <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b8876:	2301      	movs	r3, #1
   b8878:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b887c:	e7f6      	b.n	b886c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b887e:	f002 faaf 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b8882:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8886:	1ac0      	subs	r0, r0, r3
   b8888:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b888c:	4298      	cmp	r0, r3
   b888e:	d3ed      	bcc.n	b886c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b8890:	1d26      	adds	r6, r4, #4
   b8892:	4629      	mov	r1, r5
   b8894:	4630      	mov	r0, r6
   b8896:	f002 f851 	bl	ba93c <_ZN14SequentialFile16getFileFromQueueEb>
   b889a:	4601      	mov	r1, r0
   b889c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b88a0:	2800      	cmp	r0, #0
   b88a2:	d052      	beq.n	b894a <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b88a4:	4620      	mov	r0, r4
   b88a6:	f7ff fdb9 	bl	b841c <_ZN17PublishQueuePosix13readQueueFileEi>
   b88aa:	4605      	mov	r5, r0
   b88ac:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b88b0:	2800      	cmp	r0, #0
   b88b2:	d035      	beq.n	b8920 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b88b4:	f002 fa94 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b88b8:	ae02      	add	r6, sp, #8
   b88ba:	2500      	movs	r5, #0
   b88bc:	4b2c      	ldr	r3, [pc, #176]	; (b8970 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b88be:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b88c2:	4631      	mov	r1, r6
   b88c4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b88c8:	9302      	str	r3, [sp, #8]
   b88ca:	9503      	str	r5, [sp, #12]
   b88cc:	f7ff ff9c 	bl	b8808 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b88d0:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b88d4:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b88d8:	9200      	str	r2, [sp, #0]
   b88da:	4926      	ldr	r1, [pc, #152]	; (b8974 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b88dc:	4a26      	ldr	r2, [pc, #152]	; (b8978 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b88de:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b88e2:	42a8      	cmp	r0, r5
   b88e4:	bf08      	it	eq
   b88e6:	460a      	moveq	r2, r1
   b88e8:	3301      	adds	r3, #1
   b88ea:	4924      	ldr	r1, [pc, #144]	; (b897c <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b88ec:	4824      	ldr	r0, [pc, #144]	; (b8980 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b88ee:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b88f2:	f7fe f855 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b88f6:	f7fe fe1b 	bl	b7530 <_ZN19BackgroundPublishRK8instanceEv>
   b88fa:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b88fe:	4b21      	ldr	r3, [pc, #132]	; (b8984 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b8900:	9305      	str	r3, [sp, #20]
   b8902:	e9cd 6500 	strd	r6, r5, [sp]
   b8906:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b8908:	4b1f      	ldr	r3, [pc, #124]	; (b8988 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b890a:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b890c:	9304      	str	r3, [sp, #16]
   b890e:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8912:	3242      	adds	r2, #66	; 0x42
   b8914:	f7fe ff58 	bl	b77c8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b8918:	4630      	mov	r0, r6
   b891a:	f7fc f96b 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   b891e:	e7a5      	b.n	b886c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b8920:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b8924:	4919      	ldr	r1, [pc, #100]	; (b898c <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b8926:	4816      	ldr	r0, [pc, #88]	; (b8980 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b8928:	f7fb fbd8 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b892c:	2101      	movs	r1, #1
   b892e:	4630      	mov	r0, r6
   b8930:	f002 f804 	bl	ba93c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b8934:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b8938:	462a      	mov	r2, r5
   b893a:	4630      	mov	r0, r6
   b893c:	f001 fe36 	bl	ba5ac <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b8940:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b8944:	2b00      	cmp	r3, #0
   b8946:	d1b5      	bne.n	b88b4 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b8948:	e795      	b.n	b8876 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b894a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b894e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b8952:	429a      	cmp	r2, r3
   b8954:	d007      	beq.n	b8966 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b8956:	681b      	ldr	r3, [r3, #0]
   b8958:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b895c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b8960:	f7ff fe73 	bl	b864a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b8964:	e7ec      	b.n	b8940 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b8966:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b896a:	e784      	b.n	b8876 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b896c:	000b8991 	.word	0x000b8991
   b8970:	000b8d11 	.word	0x000b8d11
   b8974:	000c0982 	.word	0x000c0982
   b8978:	000c0e74 	.word	0x000c0e74
   b897c:	000c09a3 	.word	0x000c09a3
   b8980:	2003e444 	.word	0x2003e444
   b8984:	000b8359 	.word	0x000b8359
   b8988:	000b839f 	.word	0x000b839f
   b898c:	000c0986 	.word	0x000c0986

000b8990 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b8990:	b513      	push	{r0, r1, r4, lr}
   b8992:	4604      	mov	r4, r0
   b8994:	f002 fd18 	bl	bb3c8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b8998:	b190      	cbz	r0, b89c0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b899a:	f002 fa21 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b899e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b89a2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b89a6:	4b0d      	ldr	r3, [pc, #52]	; (b89dc <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b89a8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b89ac:	9300      	str	r3, [sp, #0]
   b89ae:	4669      	mov	r1, sp
   b89b0:	2300      	movs	r3, #0
   b89b2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b89b6:	9301      	str	r3, [sp, #4]
   b89b8:	f7ff ff26 	bl	b8808 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b89bc:	b002      	add	sp, #8
   b89be:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b89c0:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b89c4:	b11b      	cbz	r3, b89ce <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b89c6:	2301      	movs	r3, #1
   b89c8:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b89cc:	e7f6      	b.n	b89bc <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b89ce:	4620      	mov	r0, r4
   b89d0:	f7ff fe21 	bl	b8616 <_ZN17PublishQueuePosix12getNumEventsEv>
   b89d4:	2800      	cmp	r0, #0
   b89d6:	d0f6      	beq.n	b89c6 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b89d8:	e7f0      	b.n	b89bc <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b89da:	bf00      	nop
   b89dc:	000b8851 	.word	0x000b8851

000b89e0 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b89e0:	b570      	push	{r4, r5, r6, lr}
   b89e2:	4605      	mov	r5, r0
   b89e4:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b89e6:	2000      	movs	r0, #0
   b89e8:	f002 fc8c 	bl	bb304 <system_thread_get_state>
   b89ec:	2801      	cmp	r0, #1
   b89ee:	d005      	beq.n	b89fc <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b89f0:	493e      	ldr	r1, [pc, #248]	; (b8aec <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b89f2:	483f      	ldr	r0, [pc, #252]	; (b8af0 <_ZN17PublishQueuePosix5setupEv+0x110>)
   b89f4:	f7fd ffc6 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
}
   b89f8:	b018      	add	sp, #96	; 0x60
   b89fa:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b89fc:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b8a00:	f002 f99e 	bl	bad40 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8a04:	4b3b      	ldr	r3, [pc, #236]	; (b8af4 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b8a06:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8a08:	4b3b      	ldr	r3, [pc, #236]	; (b8af8 <_ZN17PublishQueuePosix5setupEv+0x118>)
   b8a0a:	9307      	str	r3, [sp, #28]
        };
   b8a0c:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b8a0e:	4b3b      	ldr	r3, [pc, #236]	; (b8afc <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b8a10:	9306      	str	r3, [sp, #24]
   b8a12:	a808      	add	r0, sp, #32
   b8a14:	f7fc fbec 	bl	b51f0 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b8a18:	a908      	add	r1, sp, #32
   b8a1a:	a80c      	add	r0, sp, #48	; 0x30
   b8a1c:	f7fc fbe8 	bl	b51f0 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b8a20:	a90c      	add	r1, sp, #48	; 0x30
   b8a22:	a810      	add	r0, sp, #64	; 0x40
   b8a24:	f7fc fbe4 	bl	b51f0 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b8a28:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a2a:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b8a2c:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a2e:	f7fb fb32 	bl	b4096 <_Znwj>
   b8a32:	4604      	mov	r4, r0
   b8a34:	b160      	cbz	r0, b8a50 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b8a36:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8a38:	4601      	mov	r1, r0
   b8a3a:	a810      	add	r0, sp, #64	; 0x40
   b8a3c:	f7fe fe35 	bl	b76aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b8a42:	68a2      	ldr	r2, [r4, #8]
   b8a44:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b8a46:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8a48:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b8a4c:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8a4e:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b8a50:	4b2b      	ldr	r3, [pc, #172]	; (b8b00 <_ZN17PublishQueuePosix5setupEv+0x120>)
   b8a52:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b8a54:	4b2b      	ldr	r3, [pc, #172]	; (b8b04 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b8a56:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b8a58:	4b2b      	ldr	r3, [pc, #172]	; (b8b08 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a5a:	9414      	str	r4, [sp, #80]	; 0x50
   b8a5c:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b8a5e:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b8a60:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b8a64:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b8a66:	f7fb fb16 	bl	b4096 <_Znwj>
   b8a6a:	4604      	mov	r4, r0
   b8a6c:	b1d8      	cbz	r0, b8aa6 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b8a6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b8a70:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b8a72:	b133      	cbz	r3, b8a82 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8a74:	2202      	movs	r2, #2
   b8a76:	a914      	add	r1, sp, #80	; 0x50
   b8a78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8a7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8a7c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8a7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b8a80:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b8a82:	4b22      	ldr	r3, [pc, #136]	; (b8b0c <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b8a84:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b8a86:	4a22      	ldr	r2, [pc, #136]	; (b8b10 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b8a88:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b8a8a:	ab01      	add	r3, sp, #4
   b8a8c:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b8a90:	2100      	movs	r1, #0
   b8a92:	f002 fc17 	bl	bb2c4 <system_subscribe_event>
        if (r) {
   b8a96:	b130      	cbz	r0, b8aa6 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b8a98:	4620      	mov	r0, r4
   b8a9a:	f7fc f8ab 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b8a9e:	2110      	movs	r1, #16
   b8aa0:	4620      	mov	r0, r4
   b8aa2:	f7fb fafc 	bl	b409e <_ZdlPvj>
   b8aa6:	a814      	add	r0, sp, #80	; 0x50
   b8aa8:	f7fc f8a4 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   b8aac:	a810      	add	r0, sp, #64	; 0x40
   b8aae:	f7fc f8a1 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   b8ab2:	a80c      	add	r0, sp, #48	; 0x30
   b8ab4:	f7fc f89e 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   b8ab8:	a808      	add	r0, sp, #32
   b8aba:	f7fc f89b 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   b8abe:	a804      	add	r0, sp, #16
   b8ac0:	f7fc f898 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b8ac4:	f7fe fd34 	bl	b7530 <_ZN19BackgroundPublishRK8instanceEv>
   b8ac8:	f7fe fe58 	bl	b777c <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b8acc:	1d28      	adds	r0, r5, #4
   b8ace:	f001 feb1 	bl	ba834 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b8ad2:	4628      	mov	r0, r5
   b8ad4:	f7ff fe32 	bl	b873c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b8ad8:	4b0e      	ldr	r3, [pc, #56]	; (b8b14 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b8ada:	9314      	str	r3, [sp, #80]	; 0x50
   b8adc:	a914      	add	r1, sp, #80	; 0x50
   b8ade:	2300      	movs	r3, #0
   b8ae0:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b8ae4:	9315      	str	r3, [sp, #84]	; 0x54
   b8ae6:	f7ff fe8f 	bl	b8808 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8aea:	e785      	b.n	b89f8 <_ZN17PublishQueuePosix5setupEv+0x18>
   b8aec:	000c09c2 	.word	0x000c09c2
   b8af0:	2003e444 	.word	0x2003e444
   b8af4:	000b87a5 	.word	0x000b87a5
   b8af8:	000b4beb 	.word	0x000b4beb
   b8afc:	000b4bd7 	.word	0x000b4bd7
   b8b00:	000b4bb1 	.word	0x000b4bb1
   b8b04:	000b5319 	.word	0x000b5319
   b8b08:	000c0002 	.word	0x000c0002
   b8b0c:	000b4c07 	.word	0x000b4c07
   b8b10:	000b4b89 	.word	0x000b4b89
   b8b14:	000b8991 	.word	0x000b8991

000b8b18 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b8b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b1c:	4606      	mov	r6, r0
   b8b1e:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8b20:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8b22:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8b24:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8b26:	1a47      	subs	r7, r0, r1
   b8b28:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b8b2c:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8b2e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b8b32:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8b34:	d927      	bls.n	b8b86 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b8b36:	1b5d      	subs	r5, r3, r5
   b8b38:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8b3a:	6832      	ldr	r2, [r6, #0]
   b8b3c:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b8b3e:	b10c      	cbz	r4, b8b44 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b8b40:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b8b44:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8b46:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b8b48:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b8b4a:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b8b4c:	eba3 0201 	sub.w	r2, r3, r1
   b8b50:	d913      	bls.n	b8b7a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b8b52:	4299      	cmp	r1, r3
   b8b54:	d002      	beq.n	b8b5c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8b56:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8b58:	f006 fc12 	bl	bf380 <memmove>
	_M_node = __new_node;
   b8b5c:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b8b5e:	6823      	ldr	r3, [r4, #0]
   b8b60:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8b62:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8b66:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b8b68:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b8b6a:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b8b6c:	59e3      	ldr	r3, [r4, r7]
   b8b6e:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8b70:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8b74:	6233      	str	r3, [r6, #32]
    }
   b8b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b8b7a:	4299      	cmp	r1, r3
   b8b7c:	d0ee      	beq.n	b8b5c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8b7e:	1d38      	adds	r0, r7, #4
   b8b80:	1a80      	subs	r0, r0, r2
   b8b82:	4420      	add	r0, r4
   b8b84:	e7e8      	b.n	b8b58 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b8b86:	f103 0802 	add.w	r8, r3, #2
   b8b8a:	454b      	cmp	r3, r9
   b8b8c:	bf2c      	ite	cs
   b8b8e:	4498      	addcs	r8, r3
   b8b90:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b8b92:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b8b96:	d301      	bcc.n	b8b9c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b8b98:	f005 fed4 	bl	be944 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8b9c:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b8ba0:	f7fb fa79 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8ba4:	eba8 0505 	sub.w	r5, r8, r5
   b8ba8:	086d      	lsrs	r5, r5, #1
   b8baa:	4682      	mov	sl, r0
   b8bac:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b8bae:	b10c      	cbz	r4, b8bb4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b8bb0:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b8bb4:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b8bb6:	6971      	ldr	r1, [r6, #20]
   b8bb8:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b8bba:	442c      	add	r4, r5
	  if (_Num)
   b8bbc:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8bbe:	4454      	add	r4, sl
   b8bc0:	d003      	beq.n	b8bca <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8bc2:	1a52      	subs	r2, r2, r1
   b8bc4:	4620      	mov	r0, r4
   b8bc6:	f006 fbdb 	bl	bf380 <memmove>
	::operator delete(__p
   b8bca:	6871      	ldr	r1, [r6, #4]
   b8bcc:	6830      	ldr	r0, [r6, #0]
   b8bce:	0089      	lsls	r1, r1, #2
   b8bd0:	f7fb fa65 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b8bd4:	e9c6 a800 	strd	sl, r8, [r6]
   b8bd8:	e7c0      	b.n	b8b5c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b8bdc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8bde:	b085      	sub	sp, #20
   b8be0:	4604      	mov	r4, r0
   b8be2:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b8be6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8bea:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8bec:	460f      	mov	r7, r1
   b8bee:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8bf0:	f7ff fbec 	bl	b83cc <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b8bf4:	4605      	mov	r5, r0
   b8bf6:	2800      	cmp	r0, #0
   b8bf8:	d03c      	beq.n	b8c74 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b8bfa:	4b3f      	ldr	r3, [pc, #252]	; (b8cf8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b8bfc:	493f      	ldr	r1, [pc, #252]	; (b8cfc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b8bfe:	4840      	ldr	r0, [pc, #256]	; (b8d00 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8c00:	2e00      	cmp	r6, #0
   b8c02:	bf18      	it	ne
   b8c04:	4633      	movne	r3, r6
   b8c06:	463a      	mov	r2, r7
   b8c08:	f7fd feca 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
   b8c0c:	4620      	mov	r0, r4
   b8c0e:	f7ff fbd0 	bl	b83b2 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b8c12:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b8c16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b8c1a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b8c1c:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b8c1e:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b8c22:	d029      	beq.n	b8c78 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8c24:	b103      	cbz	r3, b8c28 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b8c26:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b8c28:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b8c2c:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b8c2e:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b8c30:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b8c34:	4628      	mov	r0, r5
   b8c36:	f001 fed1 	bl	ba9dc <_ZNK14SequentialFile11getQueueLenEv>
   b8c3a:	9003      	str	r0, [sp, #12]
   b8c3c:	4630      	mov	r0, r6
   b8c3e:	f7ff fcd9 	bl	b85f4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8c42:	9002      	str	r0, [sp, #8]
   b8c44:	f002 fbc0 	bl	bb3c8 <spark_cloud_flag_connected>
   b8c48:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b8c4c:	9000      	str	r0, [sp, #0]
   b8c4e:	492d      	ldr	r1, [pc, #180]	; (b8d04 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b8c50:	482b      	ldr	r0, [pc, #172]	; (b8d00 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8c52:	f7fd fea5 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b8c56:	4628      	mov	r0, r5
   b8c58:	f001 fec0 	bl	ba9dc <_ZNK14SequentialFile11getQueueLenEv>
   b8c5c:	2800      	cmp	r0, #0
   b8c5e:	d03b      	beq.n	b8cd8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b8c60:	4620      	mov	r0, r4
   b8c62:	f7ff fd0b 	bl	b867c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b8c66:	4620      	mov	r0, r4
   b8c68:	f7ff fd68 	bl	b873c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b8c6c:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b8c6e:	f002 f87f 	bl	bad70 <os_mutex_recursive_unlock>
    return true;
   b8c72:	2001      	movs	r0, #1
}
   b8c74:	b005      	add	sp, #20
   b8c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b8c78:	4630      	mov	r0, r6
   b8c7a:	f7ff fcbb 	bl	b85f4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8c7e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8c82:	4298      	cmp	r0, r3
   b8c84:	d102      	bne.n	b8c8c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b8c86:	4820      	ldr	r0, [pc, #128]	; (b8d08 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b8c88:	f005 fe5f 	bl	be94a <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b8c8c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8c90:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b8c92:	1a9a      	subs	r2, r3, r2
   b8c94:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b8c96:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b8c9a:	2b01      	cmp	r3, #1
   b8c9c:	d804      	bhi.n	b8ca8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b8c9e:	2200      	movs	r2, #0
   b8ca0:	2101      	movs	r1, #1
   b8ca2:	4630      	mov	r0, r6
   b8ca4:	f7ff ff38 	bl	b8b18 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8ca8:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b8cac:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b8cb0:	f7fb f9f1 	bl	b4096 <_Znwj>
   b8cb4:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b8cb6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8cba:	b103      	cbz	r3, b8cbe <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b8cbc:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b8cbe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8cc2:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8cc4:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b8cc8:	685b      	ldr	r3, [r3, #4]
   b8cca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8cce:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8cd2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b8cd6:	e7aa      	b.n	b8c2e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b8cd8:	4630      	mov	r0, r6
   b8cda:	f7ff fc8b 	bl	b85f4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8cde:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b8ce0:	4298      	cmp	r0, r3
   b8ce2:	d8bd      	bhi.n	b8c60 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b8ce4:	f002 fb70 	bl	bb3c8 <spark_cloud_flag_connected>
   b8ce8:	2800      	cmp	r0, #0
   b8cea:	d0b9      	beq.n	b8c60 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b8cec:	4907      	ldr	r1, [pc, #28]	; (b8d0c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b8cee:	4804      	ldr	r0, [pc, #16]	; (b8d00 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8cf0:	f7fd fe56 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
   b8cf4:	e7b7      	b.n	b8c66 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b8cf6:	bf00      	nop
   b8cf8:	000c10a4 	.word	0x000c10a4
   b8cfc:	000c09e5 	.word	0x000c09e5
   b8d00:	2003e444 	.word	0x2003e444
   b8d04:	000c0a3d 	.word	0x000c0a3d
   b8d08:	000c0a0d 	.word	0x000c0a0d
   b8d0c:	000c0a69 	.word	0x000c0a69

000b8d10 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b8d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b8d12:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b8d16:	4604      	mov	r4, r0
    if (!publishComplete) {
   b8d18:	2b00      	cmp	r3, #0
   b8d1a:	d041      	beq.n	b8da0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b8d1c:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b8d20:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b8d24:	2b00      	cmp	r3, #0
   b8d26:	d03d      	beq.n	b8da4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b8d28:	4950      	ldr	r1, [pc, #320]	; (b8e6c <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b8d2a:	4851      	ldr	r0, [pc, #324]	; (b8e70 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8d2c:	f7fd fe38 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b8d30:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8d34:	b1d3      	cbz	r3, b8d6c <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b8d36:	1d26      	adds	r6, r4, #4
   b8d38:	2100      	movs	r1, #0
   b8d3a:	4630      	mov	r0, r6
   b8d3c:	f001 fdfe 	bl	ba93c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b8d40:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8d44:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b8d46:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b8d48:	d10d      	bne.n	b8d66 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b8d4a:	2101      	movs	r1, #1
   b8d4c:	4630      	mov	r0, r6
   b8d4e:	f001 fdf5 	bl	ba93c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b8d52:	2200      	movs	r2, #0
   b8d54:	4629      	mov	r1, r5
   b8d56:	4630      	mov	r0, r6
   b8d58:	f001 fc28 	bl	ba5ac <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b8d5c:	4945      	ldr	r1, [pc, #276]	; (b8e74 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b8d5e:	4844      	ldr	r0, [pc, #272]	; (b8e70 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8d60:	462a      	mov	r2, r5
   b8d62:	f7fd fe1d 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b8d66:	2300      	movs	r3, #0
   b8d68:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b8d6c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b8d70:	b110      	cbz	r0, b8d78 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b8d72:	2143      	movs	r1, #67	; 0x43
   b8d74:	f7fb f993 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b8d78:	2300      	movs	r3, #0
   b8d7a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b8d7e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8d82:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b8d86:	4b3c      	ldr	r3, [pc, #240]	; (b8e78 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b8d88:	9300      	str	r3, [sp, #0]
   b8d8a:	4669      	mov	r1, sp
   b8d8c:	2300      	movs	r3, #0
   b8d8e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8d92:	9301      	str	r3, [sp, #4]
   b8d94:	f7ff fd38 	bl	b8808 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8d98:	f002 f822 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b8d9c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b8da0:	b002      	add	sp, #8
   b8da2:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b8da4:	4935      	ldr	r1, [pc, #212]	; (b8e7c <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b8da6:	4832      	ldr	r0, [pc, #200]	; (b8e70 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8da8:	f7fd fdfa 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b8dac:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8db0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b8db4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8db8:	b14b      	cbz	r3, b8dce <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b8dba:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b8dbe:	b110      	cbz	r0, b8dc6 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b8dc0:	2143      	movs	r1, #67	; 0x43
   b8dc2:	f7fb f96c 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b8dc6:	2300      	movs	r3, #0
   b8dc8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b8dcc:	e7db      	b.n	b8d86 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b8dce:	4620      	mov	r0, r4
   b8dd0:	f7ff faef 	bl	b83b2 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b8dd4:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b8dd8:	4293      	cmp	r3, r2
   b8dda:	d013      	beq.n	b8e04 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b8ddc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b8de0:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b8de4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b8de8:	3b04      	subs	r3, #4
   b8dea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b8dee:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b8df0:	f001 ffbe 	bl	bad70 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b8df4:	4922      	ldr	r1, [pc, #136]	; (b8e80 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b8df6:	481e      	ldr	r0, [pc, #120]	; (b8e70 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8df8:	f7fd fdd2 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b8dfc:	4620      	mov	r0, r4
   b8dfe:	f7ff fc3d 	bl	b867c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b8e02:	e7c0      	b.n	b8d86 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b8e04:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b8e08:	4628      	mov	r0, r5
   b8e0a:	f7ff fbf3 	bl	b85f4 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8e0e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8e12:	4298      	cmp	r0, r3
   b8e14:	d102      	bne.n	b8e1c <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b8e16:	481b      	ldr	r0, [pc, #108]	; (b8e84 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b8e18:	f005 fd97 	bl	be94a <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b8e1c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b8e20:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b8e22:	429a      	cmp	r2, r3
   b8e24:	d104      	bne.n	b8e30 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b8e26:	2201      	movs	r2, #1
   b8e28:	4611      	mov	r1, r2
   b8e2a:	4628      	mov	r0, r5
   b8e2c:	f7ff fe74 	bl	b8b18 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8e30:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b8e34:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b8e38:	f7fb f92d 	bl	b4096 <_Znwj>
   b8e3c:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b8e40:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b8e44:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b8e46:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b8e4a:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b8e4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8e52:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8e56:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b8e5a:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b8e5e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8e62:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b8e66:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b8e6a:	e7c0      	b.n	b8dee <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b8e6c:	000c0a7c 	.word	0x000c0a7c
   b8e70:	2003e444 	.word	0x2003e444
   b8e74:	000c0a8f 	.word	0x000c0a8f
   b8e78:	000b8851 	.word	0x000b8851
   b8e7c:	000c0a9f 	.word	0x000c0a9f
   b8e80:	000c0ab1 	.word	0x000c0ab1
   b8e84:	000c0a0d 	.word	0x000c0a0d

000b8e88 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b8e88:	4b01      	ldr	r3, [pc, #4]	; (b8e90 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b8e8a:	4a02      	ldr	r2, [pc, #8]	; (b8e94 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b8e8c:	601a      	str	r2, [r3, #0]
}
   b8e8e:	4770      	bx	lr
   b8e90:	2003e444 	.word	0x2003e444
   b8e94:	000c0ad8 	.word	0x000c0ad8

000b8e98 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8e98:	b510      	push	{r4, lr}
   b8e9a:	4b07      	ldr	r3, [pc, #28]	; (b8eb8 <_ZN17PublishQueuePosixD1Ev+0x20>)
   b8e9c:	4604      	mov	r4, r0
   b8e9e:	f840 3bc0 	str.w	r3, [r0], #192
   b8ea2:	f7fb fea7 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b8ea6:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b8eaa:	f7ff fc95 	bl	b87d8 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b8eae:	1d20      	adds	r0, r4, #4
   b8eb0:	f001 fc00 	bl	ba6b4 <_ZN14SequentialFileD1Ev>
}
   b8eb4:	4620      	mov	r0, r4
   b8eb6:	bd10      	pop	{r4, pc}
   b8eb8:	000c0aec 	.word	0x000c0aec

000b8ebc <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8ebc:	b510      	push	{r4, lr}
   b8ebe:	4604      	mov	r4, r0
}
   b8ec0:	f7ff ffea 	bl	b8e98 <_ZN17PublishQueuePosixD1Ev>
   b8ec4:	4620      	mov	r0, r4
   b8ec6:	21d0      	movs	r1, #208	; 0xd0
   b8ec8:	f7fb f8e9 	bl	b409e <_ZdlPvj>
   b8ecc:	4620      	mov	r0, r4
   b8ece:	bd10      	pop	{r4, pc}

000b8ed0 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b8ed0:	6001      	str	r1, [r0, #0]
   b8ed2:	7102      	strb	r2, [r0, #4]
{
}
   b8ed4:	4770      	bx	lr

000b8ed6 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b8ed6:	6800      	ldr	r0, [r0, #0]
   b8ed8:	6803      	ldr	r3, [r0, #0]
   b8eda:	68db      	ldr	r3, [r3, #12]
   b8edc:	4718      	bx	r3

000b8ede <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b8ede:	6800      	ldr	r0, [r0, #0]
   b8ee0:	6803      	ldr	r3, [r0, #0]
   b8ee2:	6a1b      	ldr	r3, [r3, #32]
   b8ee4:	4718      	bx	r3

000b8ee6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b8ee6:	6800      	ldr	r0, [r0, #0]
   b8ee8:	6803      	ldr	r3, [r0, #0]
   b8eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8eec:	4718      	bx	r3

000b8eee <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b8eee:	7900      	ldrb	r0, [r0, #4]
   b8ef0:	4770      	bx	lr

000b8ef2 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b8ef2:	6800      	ldr	r0, [r0, #0]
   b8ef4:	6803      	ldr	r3, [r0, #0]
   b8ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8ef8:	4718      	bx	r3

000b8efa <_ZN10RHDatagram6sendtoEPhhh>:
{
   b8efa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8efc:	4605      	mov	r5, r0
   b8efe:	460c      	mov	r4, r1
    setHeaderTo(address);
   b8f00:	4619      	mov	r1, r3
{
   b8f02:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b8f04:	f7ff fff5 	bl	b8ef2 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b8f08:	6828      	ldr	r0, [r5, #0]
   b8f0a:	9a01      	ldr	r2, [sp, #4]
   b8f0c:	6803      	ldr	r3, [r0, #0]
   b8f0e:	695b      	ldr	r3, [r3, #20]
   b8f10:	4621      	mov	r1, r4
}
   b8f12:	b003      	add	sp, #12
   b8f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b8f18:	4718      	bx	r3

000b8f1a <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b8f1a:	6800      	ldr	r0, [r0, #0]
   b8f1c:	6803      	ldr	r3, [r0, #0]
   b8f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8f20:	4718      	bx	r3

000b8f22 <_ZN10RHDatagram14setThisAddressEh>:
{
   b8f22:	b538      	push	{r3, r4, r5, lr}
   b8f24:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b8f26:	6800      	ldr	r0, [r0, #0]
   b8f28:	6803      	ldr	r3, [r0, #0]
{
   b8f2a:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b8f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8f2e:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b8f30:	4629      	mov	r1, r5
   b8f32:	4620      	mov	r0, r4
   b8f34:	f7ff fff1 	bl	b8f1a <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b8f38:	7125      	strb	r5, [r4, #4]
}
   b8f3a:	bd38      	pop	{r3, r4, r5, pc}

000b8f3c <_ZN10RHDatagram4initEv>:
{
   b8f3c:	b538      	push	{r3, r4, r5, lr}
   b8f3e:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b8f40:	6800      	ldr	r0, [r0, #0]
   b8f42:	6803      	ldr	r3, [r0, #0]
   b8f44:	689b      	ldr	r3, [r3, #8]
   b8f46:	4798      	blx	r3
    if (ret)
   b8f48:	4605      	mov	r5, r0
   b8f4a:	b118      	cbz	r0, b8f54 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b8f4c:	7921      	ldrb	r1, [r4, #4]
   b8f4e:	4620      	mov	r0, r4
   b8f50:	f7ff ffe7 	bl	b8f22 <_ZN10RHDatagram14setThisAddressEh>
}
   b8f54:	4628      	mov	r0, r5
   b8f56:	bd38      	pop	{r3, r4, r5, pc}

000b8f58 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b8f58:	6800      	ldr	r0, [r0, #0]
   b8f5a:	6803      	ldr	r3, [r0, #0]
   b8f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8f5e:	4718      	bx	r3

000b8f60 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b8f60:	6800      	ldr	r0, [r0, #0]
   b8f62:	6803      	ldr	r3, [r0, #0]
   b8f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8f66:	4718      	bx	r3

000b8f68 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b8f68:	6800      	ldr	r0, [r0, #0]
   b8f6a:	6803      	ldr	r3, [r0, #0]
   b8f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8f6e:	4718      	bx	r3

000b8f70 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b8f70:	6800      	ldr	r0, [r0, #0]
   b8f72:	6803      	ldr	r3, [r0, #0]
   b8f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8f76:	4718      	bx	r3

000b8f78 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b8f78:	6800      	ldr	r0, [r0, #0]
   b8f7a:	6803      	ldr	r3, [r0, #0]
   b8f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8f7e:	4718      	bx	r3

000b8f80 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b8f80:	6800      	ldr	r0, [r0, #0]
   b8f82:	6803      	ldr	r3, [r0, #0]
   b8f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8f86:	4718      	bx	r3

000b8f88 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b8f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f8c:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b8f8e:	6800      	ldr	r0, [r0, #0]
{
   b8f90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b8f92:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b8f94:	6803      	ldr	r3, [r0, #0]
   b8f96:	691b      	ldr	r3, [r3, #16]
{
   b8f98:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b8f9c:	4798      	blx	r3
   b8f9e:	4605      	mov	r5, r0
   b8fa0:	b1c8      	cbz	r0, b8fd6 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b8fa2:	b11e      	cbz	r6, b8fac <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b8fa4:	4620      	mov	r0, r4
   b8fa6:	f7ff ffe3 	bl	b8f70 <_ZN10RHDatagram10headerFromEv>
   b8faa:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b8fac:	f1b9 0f00 	cmp.w	r9, #0
   b8fb0:	d004      	beq.n	b8fbc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b8fb2:	4620      	mov	r0, r4
   b8fb4:	f7ff ffd8 	bl	b8f68 <_ZN10RHDatagram8headerToEv>
   b8fb8:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b8fbc:	f1b8 0f00 	cmp.w	r8, #0
   b8fc0:	d004      	beq.n	b8fcc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b8fc2:	4620      	mov	r0, r4
   b8fc4:	f7ff ffd8 	bl	b8f78 <_ZN10RHDatagram8headerIdEv>
   b8fc8:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b8fcc:	b11f      	cbz	r7, b8fd6 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b8fce:	4620      	mov	r0, r4
   b8fd0:	f7ff ffd6 	bl	b8f80 <_ZN10RHDatagram11headerFlagsEv>
   b8fd4:	7038      	strb	r0, [r7, #0]
}
   b8fd6:	4628      	mov	r0, r5
   b8fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8fdc <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b8fdc:	2001      	movs	r0, #1
   b8fde:	4770      	bx	lr

000b8fe0 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b8fe0:	7903      	ldrb	r3, [r0, #4]
   b8fe2:	2b03      	cmp	r3, #3
   b8fe4:	d0fc      	beq.n	b8fe0 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b8fe6:	2001      	movs	r0, #1
   b8fe8:	4770      	bx	lr

000b8fea <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b8fea:	2000      	movs	r0, #0
   b8fec:	4770      	bx	lr

000b8fee <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b8fee:	7181      	strb	r1, [r0, #6]
}
   b8ff0:	4770      	bx	lr

000b8ff2 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b8ff2:	7141      	strb	r1, [r0, #5]
}
   b8ff4:	4770      	bx	lr

000b8ff6 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b8ff6:	72c1      	strb	r1, [r0, #11]
}
   b8ff8:	4770      	bx	lr

000b8ffa <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b8ffa:	7301      	strb	r1, [r0, #12]
}
   b8ffc:	4770      	bx	lr

000b8ffe <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b8ffe:	7341      	strb	r1, [r0, #13]
}
   b9000:	4770      	bx	lr

000b9002 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b9002:	7b83      	ldrb	r3, [r0, #14]
   b9004:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b9008:	4311      	orrs	r1, r2
   b900a:	7381      	strb	r1, [r0, #14]
}
   b900c:	4770      	bx	lr

000b900e <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b900e:	79c0      	ldrb	r0, [r0, #7]
}
   b9010:	4770      	bx	lr

000b9012 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b9012:	7a00      	ldrb	r0, [r0, #8]
}
   b9014:	4770      	bx	lr

000b9016 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b9016:	7a40      	ldrb	r0, [r0, #9]
}
   b9018:	4770      	bx	lr

000b901a <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b901a:	7a80      	ldrb	r0, [r0, #10]
}
   b901c:	4770      	bx	lr

000b901e <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b901e:	8a00      	ldrh	r0, [r0, #16]
}
   b9020:	b200      	sxth	r0, r0
   b9022:	4770      	bx	lr

000b9024 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b9024:	7900      	ldrb	r0, [r0, #4]
}
   b9026:	4770      	bx	lr

000b9028 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b9028:	7101      	strb	r1, [r0, #4]
}
   b902a:	4770      	bx	lr

000b902c <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b902c:	8a40      	ldrh	r0, [r0, #18]
}
   b902e:	b280      	uxth	r0, r0
   b9030:	4770      	bx	lr

000b9032 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b9032:	8a80      	ldrh	r0, [r0, #20]
}
   b9034:	b280      	uxth	r0, r0
   b9036:	4770      	bx	lr

000b9038 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b9038:	8ac0      	ldrh	r0, [r0, #22]
}
   b903a:	b280      	uxth	r0, r0
   b903c:	4770      	bx	lr

000b903e <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b903e:	b538      	push	{r3, r4, r5, lr}
   b9040:	4605      	mov	r5, r0
   b9042:	460c      	mov	r4, r1
    while (!available())
   b9044:	682b      	ldr	r3, [r5, #0]
   b9046:	4628      	mov	r0, r5
   b9048:	68db      	ldr	r3, [r3, #12]
   b904a:	4798      	blx	r3
   b904c:	b928      	cbnz	r0, b905a <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b904e:	2c00      	cmp	r4, #0
   b9050:	d0f8      	beq.n	b9044 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b9052:	4620      	mov	r0, r4
   b9054:	f002 fae0 	bl	bb618 <delay>
   b9058:	e7f4      	b.n	b9044 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b905a:	bd38      	pop	{r3, r4, r5, pc}

000b905c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b905e:	4605      	mov	r5, r0
   b9060:	460f      	mov	r7, r1
   b9062:	4614      	mov	r4, r2
   b9064:	f001 febc 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
   b9068:	4606      	mov	r6, r0
   b906a:	f001 feb9 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b906e:	1b80      	subs	r0, r0, r6
   b9070:	42b8      	cmp	r0, r7
   b9072:	d20a      	bcs.n	b908a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b9074:	682b      	ldr	r3, [r5, #0]
   b9076:	4628      	mov	r0, r5
   b9078:	68db      	ldr	r3, [r3, #12]
   b907a:	4798      	blx	r3
   b907c:	b930      	cbnz	r0, b908c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b907e:	2c00      	cmp	r4, #0
   b9080:	d0f3      	beq.n	b906a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b9082:	4620      	mov	r0, r4
   b9084:	f002 fac8 	bl	bb618 <delay>
   b9088:	e7ef      	b.n	b906a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b908a:	2000      	movs	r0, #0
}
   b908c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b908e <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b908e:	b570      	push	{r4, r5, r6, lr}
   b9090:	4604      	mov	r4, r0
   b9092:	460e      	mov	r6, r1
   b9094:	f001 fea4 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
   b9098:	4605      	mov	r5, r0
   b909a:	f001 fea1 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b909e:	1b40      	subs	r0, r0, r5
   b90a0:	42b0      	cmp	r0, r6
   b90a2:	d204      	bcs.n	b90ae <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b90a4:	7923      	ldrb	r3, [r4, #4]
   b90a6:	2b03      	cmp	r3, #3
   b90a8:	d0f7      	beq.n	b909a <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b90aa:	2001      	movs	r0, #1
}
   b90ac:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b90ae:	2000      	movs	r0, #0
   b90b0:	e7fc      	b.n	b90ac <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b90b2 <_ZN15RHGenericDriver7waitCADEv>:
{
   b90b2:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b90b4:	69c3      	ldr	r3, [r0, #28]
{
   b90b6:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b90b8:	b1b3      	cbz	r3, b90e8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b90ba:	f001 fe91 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b90be:	2664      	movs	r6, #100	; 0x64
   b90c0:	4605      	mov	r5, r0
    while (isChannelActive())
   b90c2:	6823      	ldr	r3, [r4, #0]
   b90c4:	4620      	mov	r0, r4
   b90c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b90c8:	4798      	blx	r3
   b90ca:	b168      	cbz	r0, b90e8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b90cc:	f001 fe88 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b90d0:	69e3      	ldr	r3, [r4, #28]
   b90d2:	1b40      	subs	r0, r0, r5
   b90d4:	4298      	cmp	r0, r3
   b90d6:	d809      	bhi.n	b90ec <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b90d8:	210a      	movs	r1, #10
   b90da:	2001      	movs	r0, #1
   b90dc:	f004 fcaf 	bl	bda3e <_Z6randomii>
   b90e0:	4370      	muls	r0, r6
   b90e2:	f002 fa99 	bl	bb618 <delay>
    while (isChannelActive())
   b90e6:	e7ec      	b.n	b90c2 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b90e8:	2001      	movs	r0, #1
}
   b90ea:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b90ec:	2000      	movs	r0, #0
   b90ee:	e7fc      	b.n	b90ea <_ZN15RHGenericDriver7waitCADEv+0x38>

000b90f0 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b90f0:	4a06      	ldr	r2, [pc, #24]	; (b910c <_ZN15RHGenericDriverC1Ev+0x1c>)
   b90f2:	6002      	str	r2, [r0, #0]
   b90f4:	21ff      	movs	r1, #255	; 0xff
   b90f6:	2200      	movs	r2, #0
   b90f8:	7102      	strb	r2, [r0, #4]
   b90fa:	7141      	strb	r1, [r0, #5]
   b90fc:	8242      	strh	r2, [r0, #18]
   b90fe:	72c1      	strb	r1, [r0, #11]
   b9100:	8282      	strh	r2, [r0, #20]
   b9102:	8181      	strh	r1, [r0, #12]
   b9104:	7382      	strb	r2, [r0, #14]
   b9106:	82c2      	strh	r2, [r0, #22]
   b9108:	61c2      	str	r2, [r0, #28]
}
   b910a:	4770      	bx	lr
   b910c:	000c0b00 	.word	0x000c0b00

000b9110 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b9110:	4770      	bx	lr

000b9112 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b9112:	4770      	bx	lr

000b9114 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b9114:	4770      	bx	lr

000b9116 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b9116:	4770      	bx	lr

000b9118 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b9118:	4770      	bx	lr

000b911a <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b911a:	7141      	strb	r1, [r0, #5]
}
   b911c:	4770      	bx	lr

000b911e <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b911e:	7181      	strb	r1, [r0, #6]
}
   b9120:	4770      	bx	lr

000b9122 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b9122:	7101      	strb	r1, [r0, #4]
}
   b9124:	4770      	bx	lr
	...

000b9128 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b9128:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b912a:	4d03      	ldr	r5, [pc, #12]	; (b9138 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b912c:	6005      	str	r5, [r0, #0]
   b912e:	7101      	strb	r1, [r0, #4]
   b9130:	7142      	strb	r2, [r0, #5]
   b9132:	7183      	strb	r3, [r0, #6]
}
   b9134:	bd30      	pop	{r4, r5, pc}
   b9136:	bf00      	nop
   b9138:	000c0b80 	.word	0x000c0b80

000b913c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b913c:	4770      	bx	lr

000b913e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b913e:	b510      	push	{r4, lr}
  }
   b9140:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b9142:	4604      	mov	r4, r0
  }
   b9144:	f7fa ffab 	bl	b409e <_ZdlPvj>
   b9148:	4620      	mov	r0, r4
   b914a:	bd10      	pop	{r4, pc}

000b914c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b914c:	b40e      	push	{r1, r2, r3}
   b914e:	b503      	push	{r0, r1, lr}
   b9150:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b9152:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b9154:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b9158:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b915a:	f004 fc34 	bl	bd9c6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b915e:	b002      	add	sp, #8
   b9160:	f85d eb04 	ldr.w	lr, [sp], #4
   b9164:	b003      	add	sp, #12
   b9166:	4770      	bx	lr

000b9168 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b9168:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b916a:	4604      	mov	r4, r0
   b916c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b916e:	7922      	ldrb	r2, [r4, #4]
   b9170:	68a3      	ldr	r3, [r4, #8]
   b9172:	b132      	cbz	r2, b9182 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b9174:	b9a3      	cbnz	r3, b91a0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b9176:	490b      	ldr	r1, [pc, #44]	; (b91a4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b9178:	b002      	add	sp, #8
   b917a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b917e:	f004 bb19 	b.w	bd7b4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b9182:	4a09      	ldr	r2, [pc, #36]	; (b91a8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b9184:	7b26      	ldrb	r6, [r4, #12]
   b9186:	4d09      	ldr	r5, [pc, #36]	; (b91ac <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b9188:	4909      	ldr	r1, [pc, #36]	; (b91b0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b918a:	7b64      	ldrb	r4, [r4, #13]
   b918c:	2e01      	cmp	r6, #1
   b918e:	bf18      	it	ne
   b9190:	4629      	movne	r1, r5
   b9192:	e9cd 1400 	strd	r1, r4, [sp]
   b9196:	4907      	ldr	r1, [pc, #28]	; (b91b4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b9198:	f7ff ffd8 	bl	b914c <_ZN5Print6printfEPKcz>
  }
   b919c:	b002      	add	sp, #8
   b919e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b91a0:	4a05      	ldr	r2, [pc, #20]	; (b91b8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b91a2:	e7ef      	b.n	b9184 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b91a4:	000c0bbd 	.word	0x000c0bbd
   b91a8:	000c10a4 	.word	0x000c10a4
   b91ac:	000c0bb9 	.word	0x000c0bb9
   b91b0:	000c0bb5 	.word	0x000c0bb5
   b91b4:	000c0bd3 	.word	0x000c0bd3
   b91b8:	000c0bac 	.word	0x000c0bac

000b91bc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b91bc:	b510      	push	{r4, lr}
   b91be:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b91c0:	f7ff ffb2 	bl	b9128 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b91c4:	4b05      	ldr	r3, [pc, #20]	; (b91dc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b91c6:	6023      	str	r3, [r4, #0]
  {
   b91c8:	4b05      	ldr	r3, [pc, #20]	; (b91e0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b91ca:	60a3      	str	r3, [r4, #8]
   b91cc:	2301      	movs	r3, #1
   b91ce:	7323      	strb	r3, [r4, #12]
   b91d0:	2300      	movs	r3, #0
   b91d2:	6123      	str	r3, [r4, #16]
   b91d4:	82a3      	strh	r3, [r4, #20]
{
}
   b91d6:	4620      	mov	r0, r4
   b91d8:	bd10      	pop	{r4, pc}
   b91da:	bf00      	nop
   b91dc:	000c0c0c 	.word	0x000c0c0c
   b91e0:	000c0bf8 	.word	0x000c0bf8

000b91e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b91e4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b91e6:	4c0b      	ldr	r4, [pc, #44]	; (b9214 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b91e8:	7821      	ldrb	r1, [r4, #0]
   b91ea:	f3bf 8f5b 	dmb	ish
   b91ee:	f011 0101 	ands.w	r1, r1, #1
   b91f2:	d10b      	bne.n	b920c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b91f4:	4620      	mov	r0, r4
   b91f6:	9101      	str	r1, [sp, #4]
   b91f8:	f7fa ff60 	bl	b40bc <__cxa_guard_acquire>
   b91fc:	9901      	ldr	r1, [sp, #4]
   b91fe:	b128      	cbz	r0, b920c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9200:	4805      	ldr	r0, [pc, #20]	; (b9218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9202:	f004 fc33 	bl	bda6c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9206:	4620      	mov	r0, r4
   b9208:	f7fa ff5d 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b920c:	4802      	ldr	r0, [pc, #8]	; (b9218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b920e:	b002      	add	sp, #8
   b9210:	bd10      	pop	{r4, pc}
   b9212:	bf00      	nop
   b9214:	2003e44c 	.word	0x2003e44c
   b9218:	2003e450 	.word	0x2003e450

000b921c <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b921c:	b507      	push	{r0, r1, r2, lr}
   b921e:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b9220:	f7ff ffe0 	bl	b91e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b9224:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b9226:	b003      	add	sp, #12
   b9228:	f85d eb04 	ldr.w	lr, [sp], #4
   b922c:	f004 bcd6 	b.w	bdbdc <_ZN8SPIClass8transferEh>

000b9230 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b9230:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b9232:	f7ff ffd7 	bl	b91e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b9236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b923a:	f004 bcd5 	b.w	bdbe8 <_ZN8SPIClass15attachInterruptEv>

000b923e <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b923e:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b9240:	f7ff ffd0 	bl	b91e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b9244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9248:	f004 bccf 	b.w	bdbea <_ZN8SPIClass15detachInterruptEv>

000b924c <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b924c:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b924e:	7903      	ldrb	r3, [r0, #4]
   b9250:	2b04      	cmp	r3, #4
   b9252:	d020      	beq.n	b9296 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b9254:	2b03      	cmp	r3, #3
   b9256:	d020      	beq.n	b929a <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b9258:	2b02      	cmp	r3, #2
   b925a:	d020      	beq.n	b929e <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b925c:	4a11      	ldr	r2, [pc, #68]	; (b92a4 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b925e:	4912      	ldr	r1, [pc, #72]	; (b92a8 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b9260:	2b01      	cmp	r3, #1
   b9262:	bf18      	it	ne
   b9264:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b9266:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b9268:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b926a:	3901      	subs	r1, #1
   b926c:	bf18      	it	ne
   b926e:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b9270:	b133      	cbz	r3, b9280 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b9272:	2b01      	cmp	r3, #1
   b9274:	d004      	beq.n	b9280 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b9276:	2b02      	cmp	r3, #2
   b9278:	d002      	beq.n	b9280 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b927a:	2b03      	cmp	r3, #3
   b927c:	bf18      	it	ne
   b927e:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b9280:	2400      	movs	r4, #0
   b9282:	7304      	strb	r4, [r0, #12]
   b9284:	6102      	str	r2, [r0, #16]
   b9286:	7501      	strb	r1, [r0, #20]
   b9288:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b928a:	f7ff ffab 	bl	b91e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b928e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9292:	f004 bbf5 	b.w	bda80 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b9296:	4a05      	ldr	r2, [pc, #20]	; (b92ac <_ZN13RHHardwareSPI5beginEv+0x60>)
   b9298:	e7e5      	b.n	b9266 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b929a:	4a05      	ldr	r2, [pc, #20]	; (b92b0 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b929c:	e7e3      	b.n	b9266 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b929e:	4a05      	ldr	r2, [pc, #20]	; (b92b4 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b92a0:	e7e1      	b.n	b9266 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b92a2:	bf00      	nop
   b92a4:	001e8480 	.word	0x001e8480
   b92a8:	000f4240 	.word	0x000f4240
   b92ac:	00f42400 	.word	0x00f42400
   b92b0:	007a1200 	.word	0x007a1200
   b92b4:	003d0900 	.word	0x003d0900

000b92b8 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b92b8:	b508      	push	{r3, lr}
        instance().end();
   b92ba:	f7ff ff93 	bl	b91e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b92be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b92c2:	f004 bbf1 	b.w	bdaa8 <_ZN8SPIClass3endEv>

000b92c6 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b92c6:	b510      	push	{r4, lr}
   b92c8:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b92ca:	f7ff ff8b 	bl	b91e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b92ce:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b92d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b92d6:	f004 bc13 	b.w	bdb00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b92da <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b92da:	b508      	push	{r3, lr}
        instance().endTransaction();
   b92dc:	f7ff ff82 	bl	b91e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b92e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b92e4:	f004 bbf2 	b.w	bdacc <_ZN8SPIClass14endTransactionEv>

000b92e8 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b92e8:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b92ea:	f7ff ff7b 	bl	b91e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b92ee:	bd08      	pop	{r3, pc}

000b92f0 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b92f0:	2300      	movs	r3, #0
   b92f2:	4802      	ldr	r0, [pc, #8]	; (b92fc <_GLOBAL__sub_I_hardware_spi+0xc>)
   b92f4:	461a      	mov	r2, r3
   b92f6:	4619      	mov	r1, r3
   b92f8:	f7ff bf60 	b.w	b91bc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b92fc:	2003e458 	.word	0x2003e458

000b9300 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b9300:	2a01      	cmp	r2, #1
   b9302:	d105      	bne.n	b9310 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b9304:	7a00      	ldrb	r0, [r0, #8]
   b9306:	780b      	ldrb	r3, [r1, #0]
   b9308:	1a1b      	subs	r3, r3, r0
   b930a:	4258      	negs	r0, r3
   b930c:	4158      	adcs	r0, r3
   b930e:	4770      	bx	lr
   b9310:	2000      	movs	r0, #0
}
   b9312:	4770      	bx	lr

000b9314 <_ZN6RHMesh5doArpEh>:
{
   b9314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b9318:	4c25      	ldr	r4, [pc, #148]	; (b93b0 <_ZN6RHMesh5doArpEh+0x9c>)
   b931a:	2301      	movs	r3, #1
{
   b931c:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b931e:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b9320:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9322:	2300      	movs	r3, #0
{
   b9324:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b9326:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9328:	9300      	str	r3, [sp, #0]
   b932a:	2203      	movs	r2, #3
   b932c:	23ff      	movs	r3, #255	; 0xff
   b932e:	4621      	mov	r1, r4
{
   b9330:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9332:	f000 fbb7 	bl	b9aa4 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b9336:	b120      	cbz	r0, b9342 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b9338:	2500      	movs	r5, #0
}
   b933a:	4628      	mov	r0, r5
   b933c:	b006      	add	sp, #24
   b933e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b9342:	237a      	movs	r3, #122	; 0x7a
   b9344:	f88d 3017 	strb.w	r3, [sp, #23]
   b9348:	f001 fd4a 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b934c:	f106 0904 	add.w	r9, r6, #4
   b9350:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b9352:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b9356:	f001 fd43 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
   b935a:	1a29      	subs	r1, r5, r0
   b935c:	2900      	cmp	r1, #0
   b935e:	ddeb      	ble.n	b9338 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b9360:	2200      	movs	r2, #0
   b9362:	b289      	uxth	r1, r1
   b9364:	4648      	mov	r0, r9
   b9366:	f7ff fdbe 	bl	b8ee6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b936a:	2800      	cmp	r0, #0
   b936c:	d0f3      	beq.n	b9356 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b936e:	2300      	movs	r3, #0
   b9370:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b9374:	e9cd 3300 	strd	r3, r3, [sp]
   b9378:	f10d 0217 	add.w	r2, sp, #23
   b937c:	4621      	mov	r1, r4
   b937e:	4630      	mov	r0, r6
   b9380:	f000 fb9a 	bl	b9ab8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b9384:	4605      	mov	r5, r0
   b9386:	2800      	cmp	r0, #0
   b9388:	d0e3      	beq.n	b9352 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b938a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b938e:	2b01      	cmp	r3, #1
   b9390:	d9df      	bls.n	b9352 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b9392:	f894 a000 	ldrb.w	sl, [r4]
   b9396:	f1ba 0f02 	cmp.w	sl, #2
   b939a:	d1da      	bne.n	b9352 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b939c:	4648      	mov	r0, r9
   b939e:	f7ff fde7 	bl	b8f70 <_ZN10RHDatagram10headerFromEv>
   b93a2:	4653      	mov	r3, sl
   b93a4:	4602      	mov	r2, r0
   b93a6:	4639      	mov	r1, r7
   b93a8:	4630      	mov	r0, r6
   b93aa:	f000 faf3 	bl	b9994 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b93ae:	e7c4      	b.n	b933a <_ZN6RHMesh5doArpEh+0x26>
   b93b0:	2003e470 	.word	0x2003e470

000b93b4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b93b4:	2a01      	cmp	r2, #1
{
   b93b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b93ba:	4607      	mov	r7, r0
   b93bc:	460e      	mov	r6, r1
   b93be:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b93c0:	d93b      	bls.n	b943a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b93c2:	794d      	ldrb	r5, [r1, #5]
   b93c4:	2d02      	cmp	r5, #2
   b93c6:	d130      	bne.n	b942a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b93c8:	f100 0804 	add.w	r8, r0, #4
   b93cc:	79c9      	ldrb	r1, [r1, #7]
   b93ce:	9101      	str	r1, [sp, #4]
   b93d0:	4640      	mov	r0, r8
   b93d2:	f7ff fdcd 	bl	b8f70 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b93d6:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b93d8:	462b      	mov	r3, r5
   b93da:	4602      	mov	r2, r0
   b93dc:	9901      	ldr	r1, [sp, #4]
   b93de:	4638      	mov	r0, r7
   b93e0:	f000 fad8 	bl	b9994 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b93e4:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b93e6:	f106 0308 	add.w	r3, r6, #8
   b93ea:	2400      	movs	r4, #0
   b93ec:	4622      	mov	r2, r4
   b93ee:	4295      	cmp	r5, r2
   b93f0:	f104 0401 	add.w	r4, r4, #1
   b93f4:	b2e4      	uxtb	r4, r4
   b93f6:	d904      	bls.n	b9402 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b93f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b93fc:	7a39      	ldrb	r1, [r7, #8]
   b93fe:	4291      	cmp	r1, r2
   b9400:	d1f4      	bne.n	b93ec <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b9402:	f104 0108 	add.w	r1, r4, #8
   b9406:	440e      	add	r6, r1
	while (i < numRoutes)
   b9408:	42a5      	cmp	r5, r4
   b940a:	d916      	bls.n	b943a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b940c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b9410:	9101      	str	r1, [sp, #4]
   b9412:	4640      	mov	r0, r8
   b9414:	f7ff fdac 	bl	b8f70 <_ZN10RHDatagram10headerFromEv>
   b9418:	3401      	adds	r4, #1
   b941a:	4602      	mov	r2, r0
   b941c:	9901      	ldr	r1, [sp, #4]
   b941e:	2302      	movs	r3, #2
   b9420:	4638      	mov	r0, r7
   b9422:	b2e4      	uxtb	r4, r4
   b9424:	f000 fab6 	bl	b9994 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b9428:	e7ee      	b.n	b9408 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b942a:	2d03      	cmp	r5, #3
   b942c:	d105      	bne.n	b943a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b942e:	7989      	ldrb	r1, [r1, #6]
}
   b9430:	b002      	add	sp, #8
   b9432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b9436:	f000 ba96 	b.w	b9966 <_ZN8RHRouter13deleteRouteToEh>
}
   b943a:	b002      	add	sp, #8
   b943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9440 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b9440:	b510      	push	{r4, lr}
   b9442:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b9444:	f000 fae6 	bl	b9a14 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b9448:	4b01      	ldr	r3, [pc, #4]	; (b9450 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b944a:	6023      	str	r3, [r4, #0]
}
   b944c:	4620      	mov	r0, r4
   b944e:	bd10      	pop	{r4, pc}
   b9450:	000c0c40 	.word	0x000c0c40

000b9454 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b9454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b9458:	2a79      	cmp	r2, #121	; 0x79
{
   b945a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b945e:	4606      	mov	r6, r0
   b9460:	460f      	mov	r7, r1
   b9462:	4614      	mov	r4, r2
   b9464:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b9466:	d825      	bhi.n	b94b4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b9468:	2bff      	cmp	r3, #255	; 0xff
   b946a:	d114      	bne.n	b9496 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b946c:	f8df 8048 	ldr.w	r8, [pc, #72]	; b94b8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b9470:	4640      	mov	r0, r8
   b9472:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b9474:	4622      	mov	r2, r4
   b9476:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b9478:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b947c:	f005 ff72 	bl	bf364 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b9480:	1c62      	adds	r2, r4, #1
   b9482:	f8cd 9020 	str.w	r9, [sp, #32]
   b9486:	462b      	mov	r3, r5
   b9488:	4641      	mov	r1, r8
   b948a:	4630      	mov	r0, r6
   b948c:	b2d2      	uxtb	r2, r2
}
   b948e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b9492:	f000 bb07 	b.w	b9aa4 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b9496:	4619      	mov	r1, r3
   b9498:	f000 fa21 	bl	b98de <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b949c:	2800      	cmp	r0, #0
   b949e:	d1e5      	bne.n	b946c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b94a0:	6833      	ldr	r3, [r6, #0]
   b94a2:	4629      	mov	r1, r5
   b94a4:	689b      	ldr	r3, [r3, #8]
   b94a6:	4630      	mov	r0, r6
   b94a8:	4798      	blx	r3
   b94aa:	2800      	cmp	r0, #0
   b94ac:	d1de      	bne.n	b946c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b94ae:	2002      	movs	r0, #2
}
   b94b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b94b4:	2001      	movs	r0, #1
   b94b6:	e7fb      	b.n	b94b0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b94b8:	2003e470 	.word	0x2003e470

000b94bc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b94bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b94c0:	b089      	sub	sp, #36	; 0x24
   b94c2:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b94c4:	237a      	movs	r3, #122	; 0x7a
   b94c6:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b94ca:	f10d 031f 	add.w	r3, sp, #31
   b94ce:	9303      	str	r3, [sp, #12]
   b94d0:	f10d 031e 	add.w	r3, sp, #30
   b94d4:	9302      	str	r3, [sp, #8]
   b94d6:	4e5d      	ldr	r6, [pc, #372]	; (b964c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b94d8:	f10d 031d 	add.w	r3, sp, #29
   b94dc:	9301      	str	r3, [sp, #4]
   b94de:	ab07      	add	r3, sp, #28
   b94e0:	9300      	str	r3, [sp, #0]
{     
   b94e2:	4689      	mov	r9, r1
   b94e4:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b94e6:	f10d 031b 	add.w	r3, sp, #27
   b94ea:	f10d 021a 	add.w	r2, sp, #26
   b94ee:	4631      	mov	r1, r6
{     
   b94f0:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b94f4:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b94f6:	f000 fadf 	bl	b9ab8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b94fa:	4604      	mov	r4, r0
   b94fc:	b920      	cbnz	r0, b9508 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b94fe:	2400      	movs	r4, #0
}
   b9500:	4620      	mov	r0, r4
   b9502:	b009      	add	sp, #36	; 0x24
   b9504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b9508:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b950c:	b373      	cbz	r3, b956c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b950e:	7832      	ldrb	r2, [r6, #0]
   b9510:	bb62      	cbnz	r2, b956c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b9512:	f1b8 0f00 	cmp.w	r8, #0
   b9516:	d003      	beq.n	b9520 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b9518:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b951c:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b9520:	f1bb 0f00 	cmp.w	fp, #0
   b9524:	d003      	beq.n	b952e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b9526:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b952a:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b952e:	f1ba 0f00 	cmp.w	sl, #0
   b9532:	d003      	beq.n	b953c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b9534:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b9538:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b953c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b953e:	b11a      	cbz	r2, b9548 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b9540:	9914      	ldr	r1, [sp, #80]	; 0x50
   b9542:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b9546:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b9548:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b954a:	b11a      	cbz	r2, b9554 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b954c:	9915      	ldr	r1, [sp, #84]	; 0x54
   b954e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b9552:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b9554:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b9556:	493e      	ldr	r1, [pc, #248]	; (b9650 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b9558:	3b01      	subs	r3, #1
   b955a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b955c:	429a      	cmp	r2, r3
		*len = msgLen;
   b955e:	bf88      	it	hi
   b9560:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b9562:	783a      	ldrb	r2, [r7, #0]
   b9564:	4648      	mov	r0, r9
   b9566:	f005 fefd 	bl	bf364 <memcpy>
	    return true;
   b956a:	e7c9      	b.n	b9500 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b956c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b9570:	2aff      	cmp	r2, #255	; 0xff
   b9572:	d1c4      	bne.n	b94fe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b9574:	2b01      	cmp	r3, #1
   b9576:	d9c2      	bls.n	b94fe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b9578:	7832      	ldrb	r2, [r6, #0]
   b957a:	2a01      	cmp	r2, #1
   b957c:	d1bf      	bne.n	b94fe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b957e:	7a2a      	ldrb	r2, [r5, #8]
   b9580:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b9584:	42a2      	cmp	r2, r4
   b9586:	d0ba      	beq.n	b94fe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b9588:	1edf      	subs	r7, r3, #3
   b958a:	4932      	ldr	r1, [pc, #200]	; (b9654 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b958c:	b2ff      	uxtb	r7, r7
   b958e:	2300      	movs	r3, #0
   b9590:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b9594:	4547      	cmp	r7, r8
   b9596:	d906      	bls.n	b95a6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b9598:	f811 0b01 	ldrb.w	r0, [r1], #1
   b959c:	4282      	cmp	r2, r0
   b959e:	f103 0301 	add.w	r3, r3, #1
   b95a2:	d1f5      	bne.n	b9590 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b95a4:	e7ab      	b.n	b94fe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b95a6:	f105 0904 	add.w	r9, r5, #4
   b95aa:	4648      	mov	r0, r9
   b95ac:	f7ff fce0 	bl	b8f70 <_ZN10RHDatagram10headerFromEv>
   b95b0:	2302      	movs	r3, #2
   b95b2:	4602      	mov	r2, r0
   b95b4:	4621      	mov	r1, r4
   b95b6:	4628      	mov	r0, r5
   b95b8:	f000 f9ec 	bl	b9994 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b95bc:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b95c0:	b193      	cbz	r3, b95e8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b95c2:	4c22      	ldr	r4, [pc, #136]	; (b964c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b95c4:	1ba3      	subs	r3, r4, r6
   b95c6:	b2db      	uxtb	r3, r3
   b95c8:	429f      	cmp	r7, r3
   b95ca:	d90c      	bls.n	b95e6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b95cc:	78e1      	ldrb	r1, [r4, #3]
   b95ce:	9105      	str	r1, [sp, #20]
   b95d0:	4648      	mov	r0, r9
   b95d2:	f7ff fccd 	bl	b8f70 <_ZN10RHDatagram10headerFromEv>
   b95d6:	9905      	ldr	r1, [sp, #20]
   b95d8:	4602      	mov	r2, r0
   b95da:	2302      	movs	r3, #2
   b95dc:	4628      	mov	r0, r5
   b95de:	f000 f9d9 	bl	b9994 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b95e2:	3401      	adds	r4, #1
   b95e4:	e7ee      	b.n	b95c4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b95e6:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b95e8:	682b      	ldr	r3, [r5, #0]
   b95ea:	7872      	ldrb	r2, [r6, #1]
   b95ec:	68db      	ldr	r3, [r3, #12]
   b95ee:	491a      	ldr	r1, [pc, #104]	; (b9658 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b95f0:	4628      	mov	r0, r5
   b95f2:	4798      	blx	r3
   b95f4:	4604      	mov	r4, r0
   b95f6:	b160      	cbz	r0, b9612 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b95f8:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b95fa:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b95fc:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b95fe:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b9602:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b9606:	4911      	ldr	r1, [pc, #68]	; (b964c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b9608:	9400      	str	r4, [sp, #0]
   b960a:	4628      	mov	r0, r5
   b960c:	f000 fa4a 	bl	b9aa4 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b9610:	e776      	b.n	b9500 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b9612:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b9616:	4543      	cmp	r3, r8
   b9618:	f67f af71 	bls.w	b94fe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b961c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b9620:	2b00      	cmp	r3, #0
   b9622:	f43f af6c 	beq.w	b94fe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b9626:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b962a:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b962c:	4907      	ldr	r1, [pc, #28]	; (b964c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b962e:	443e      	add	r6, r7
		tmpMessageLen++;
   b9630:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b9632:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9634:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b9638:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b963a:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b963c:	9300      	str	r3, [sp, #0]
   b963e:	4628      	mov	r0, r5
   b9640:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b9642:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9646:	f000 f9f7 	bl	b9a38 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b964a:	e759      	b.n	b9500 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b964c:	2003e470 	.word	0x2003e470
   b9650:	2003e471 	.word	0x2003e471
   b9654:	2003e473 	.word	0x2003e473
   b9658:	2003e472 	.word	0x2003e472

000b965c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b965c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b965e:	b085      	sub	sp, #20
   b9660:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b9662:	3004      	adds	r0, #4
{
   b9664:	460e      	mov	r6, r1
   b9666:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b9668:	f7ff fc82 	bl	b8f70 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b966c:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b966e:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b9670:	4631      	mov	r1, r6
   b9672:	4628      	mov	r0, r5
   b9674:	f000 f94a 	bl	b990c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b9678:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b967a:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b967c:	d001      	beq.n	b9682 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b967e:	2805      	cmp	r0, #5
   b9680:	d11b      	bne.n	b96ba <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b9682:	7831      	ldrb	r1, [r6, #0]
   b9684:	4628      	mov	r0, r5
   b9686:	f000 f96e 	bl	b9966 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b968a:	7872      	ldrb	r2, [r6, #1]
   b968c:	7a2b      	ldrb	r3, [r5, #8]
   b968e:	429a      	cmp	r2, r3
   b9690:	d013      	beq.n	b96ba <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b9692:	4c0b      	ldr	r4, [pc, #44]	; (b96c0 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b9694:	2303      	movs	r3, #3
   b9696:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b9698:	7833      	ldrb	r3, [r6, #0]
   b969a:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b969c:	7871      	ldrb	r1, [r6, #1]
   b969e:	2302      	movs	r3, #2
   b96a0:	463a      	mov	r2, r7
   b96a2:	4628      	mov	r0, r5
   b96a4:	f000 f976 	bl	b9994 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b96a8:	2300      	movs	r3, #0
   b96aa:	9300      	str	r3, [sp, #0]
   b96ac:	4621      	mov	r1, r4
   b96ae:	7873      	ldrb	r3, [r6, #1]
   b96b0:	2202      	movs	r2, #2
   b96b2:	4628      	mov	r0, r5
   b96b4:	f000 f9f6 	bl	b9aa4 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b96b8:	4604      	mov	r4, r0
}
   b96ba:	4620      	mov	r0, r4
   b96bc:	b005      	add	sp, #20
   b96be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b96c0:	2003e470 	.word	0x2003e470

000b96c4 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b96c4:	b510      	push	{r4, lr}
   b96c6:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b96c8:	f7ff fc02 	bl	b8ed0 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b96cc:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b96ce:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b96d0:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b96d2:	2303      	movs	r3, #3
    _retransmissions = 0;
   b96d4:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b96d6:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b96d8:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b96da:	f44f 7280 	mov.w	r2, #256	; 0x100
   b96de:	f104 0011 	add.w	r0, r4, #17
   b96e2:	f005 fe67 	bl	bf3b4 <memset>
}
   b96e6:	4620      	mov	r0, r4
   b96e8:	bd10      	pop	{r4, pc}

000b96ea <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b96ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b96ec:	4604      	mov	r4, r0
   b96ee:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b96f0:	f7ff fc32 	bl	b8f58 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b96f4:	4620      	mov	r0, r4
   b96f6:	2200      	movs	r2, #0
   b96f8:	2180      	movs	r1, #128	; 0x80
   b96fa:	f7ff fc31 	bl	b8f60 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b96fe:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b9700:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b9702:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b9706:	f10d 010f 	add.w	r1, sp, #15
   b970a:	2201      	movs	r2, #1
   b970c:	4620      	mov	r0, r4
   b970e:	f7ff fbf4 	bl	b8efa <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b9712:	4620      	mov	r0, r4
   b9714:	f7ff fbe3 	bl	b8ede <_ZN10RHDatagram14waitPacketSentEv>
}
   b9718:	b004      	add	sp, #16
   b971a:	bd10      	pop	{r4, pc}

000b971c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b9720:	7b05      	ldrb	r5, [r0, #12]
   b9722:	3501      	adds	r5, #1
   b9724:	b2ed      	uxtb	r5, r5
{
   b9726:	b087      	sub	sp, #28
   b9728:	4604      	mov	r4, r0
   b972a:	4689      	mov	r9, r1
   b972c:	4692      	mov	sl, r2
   b972e:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b9730:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b9732:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b9734:	7c22      	ldrb	r2, [r4, #16]
   b9736:	463b      	mov	r3, r7
   b9738:	429a      	cmp	r2, r3
   b973a:	f107 0701 	add.w	r7, r7, #1
   b973e:	b2ff      	uxtb	r7, r7
   b9740:	d36b      	bcc.n	b981a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b9742:	4629      	mov	r1, r5
   b9744:	4620      	mov	r0, r4
   b9746:	f7ff fc07 	bl	b8f58 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b974a:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b974c:	bf0d      	iteet	eq
   b974e:	22c0      	moveq	r2, #192	; 0xc0
   b9750:	2280      	movne	r2, #128	; 0x80
   b9752:	2140      	movne	r1, #64	; 0x40
   b9754:	2100      	moveq	r1, #0
   b9756:	4620      	mov	r0, r4
   b9758:	f7ff fc02 	bl	b8f60 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b975c:	4643      	mov	r3, r8
   b975e:	4652      	mov	r2, sl
   b9760:	4649      	mov	r1, r9
   b9762:	4620      	mov	r0, r4
   b9764:	f7ff fbc9 	bl	b8efa <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b9768:	4620      	mov	r0, r4
   b976a:	f7ff fbb8 	bl	b8ede <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b976e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b9772:	d054      	beq.n	b981e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b9774:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b9776:	bf82      	ittt	hi
   b9778:	68a3      	ldrhi	r3, [r4, #8]
   b977a:	3301      	addhi	r3, #1
   b977c:	60a3      	strhi	r3, [r4, #8]
   b977e:	f001 fb2f 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b9782:	f44f 7180 	mov.w	r1, #256	; 0x100
   b9786:	4683      	mov	fp, r0
   b9788:	2000      	movs	r0, #0
   b978a:	89e6      	ldrh	r6, [r4, #14]
   b978c:	f004 f957 	bl	bda3e <_Z6randomii>
   b9790:	4370      	muls	r0, r6
   b9792:	bf48      	it	mi
   b9794:	30ff      	addmi	r0, #255	; 0xff
   b9796:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b979a:	fa1b f686 	uxtah	r6, fp, r6
   b979e:	f001 fb1f 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
   b97a2:	1a30      	subs	r0, r6, r0
   b97a4:	2800      	cmp	r0, #0
   b97a6:	ddc5      	ble.n	b9734 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b97a8:	b281      	uxth	r1, r0
   b97aa:	2200      	movs	r2, #0
   b97ac:	4620      	mov	r0, r4
   b97ae:	f7ff fb9a 	bl	b8ee6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b97b2:	2800      	cmp	r0, #0
   b97b4:	d0f3      	beq.n	b979e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b97b6:	f10d 0317 	add.w	r3, sp, #23
   b97ba:	9302      	str	r3, [sp, #8]
   b97bc:	f10d 0316 	add.w	r3, sp, #22
   b97c0:	9301      	str	r3, [sp, #4]
   b97c2:	2200      	movs	r2, #0
   b97c4:	f10d 0315 	add.w	r3, sp, #21
   b97c8:	9300      	str	r3, [sp, #0]
   b97ca:	4611      	mov	r1, r2
   b97cc:	ab05      	add	r3, sp, #20
   b97ce:	4620      	mov	r0, r4
   b97d0:	f7ff fbda 	bl	b8f88 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b97d4:	2800      	cmp	r0, #0
   b97d6:	d0e2      	beq.n	b979e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b97d8:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b97dc:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b97e0:	4542      	cmp	r2, r8
   b97e2:	d10e      	bne.n	b9802 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b97e4:	f894 c004 	ldrb.w	ip, [r4, #4]
   b97e8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b97ec:	458c      	cmp	ip, r1
   b97ee:	d108      	bne.n	b9802 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b97f0:	2b00      	cmp	r3, #0
   b97f2:	da08      	bge.n	b9806 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b97f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b97f8:	42ab      	cmp	r3, r5
   b97fa:	d1d0      	bne.n	b979e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b97fc:	b007      	add	sp, #28
   b97fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b9802:	2b00      	cmp	r3, #0
   b9804:	dbcb      	blt.n	b979e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b9806:	18a1      	adds	r1, r4, r2
   b9808:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b980c:	7c49      	ldrb	r1, [r1, #17]
   b980e:	4299      	cmp	r1, r3
   b9810:	d1c5      	bne.n	b979e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b9812:	4620      	mov	r0, r4
   b9814:	f7ff ff69 	bl	b96ea <_ZN18RHReliableDatagram11acknowledgeEhh>
   b9818:	e7c1      	b.n	b979e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b981a:	2000      	movs	r0, #0
   b981c:	e7ee      	b.n	b97fc <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b981e:	2001      	movs	r0, #1
   b9820:	e7ec      	b.n	b97fc <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b9822 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b9822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9826:	b089      	sub	sp, #36	; 0x24
   b9828:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b982c:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b9830:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b9832:	4604      	mov	r4, r0
   b9834:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b9836:	f7ff fb4e 	bl	b8ed6 <_ZN10RHDatagram9availableEv>
   b983a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b983e:	b920      	cbnz	r0, b984a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b9840:	2500      	movs	r5, #0
}
   b9842:	4628      	mov	r0, r5
   b9844:	b009      	add	sp, #36	; 0x24
   b9846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b984a:	f10d 031f 	add.w	r3, sp, #31
   b984e:	9302      	str	r3, [sp, #8]
   b9850:	f10d 031e 	add.w	r3, sp, #30
   b9854:	9301      	str	r3, [sp, #4]
   b9856:	f10d 031d 	add.w	r3, sp, #29
   b985a:	9300      	str	r3, [sp, #0]
   b985c:	4620      	mov	r0, r4
   b985e:	ab07      	add	r3, sp, #28
   b9860:	f7ff fb92 	bl	b8f88 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9864:	4605      	mov	r5, r0
   b9866:	2800      	cmp	r0, #0
   b9868:	d0ea      	beq.n	b9840 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b986a:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b986e:	2b00      	cmp	r3, #0
   b9870:	dbe6      	blt.n	b9840 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b9872:	7922      	ldrb	r2, [r4, #4]
   b9874:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9878:	429a      	cmp	r2, r3
   b987a:	d106      	bne.n	b988a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b987c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b9880:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b9884:	4620      	mov	r0, r4
   b9886:	f7ff ff30 	bl	b96ea <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b988a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b988e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b9892:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b9896:	f012 0f40 	tst.w	r2, #64	; 0x40
   b989a:	440c      	add	r4, r1
   b989c:	d002      	beq.n	b98a4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b989e:	7c60      	ldrb	r0, [r4, #17]
   b98a0:	4298      	cmp	r0, r3
   b98a2:	d0cd      	beq.n	b9840 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b98a4:	b106      	cbz	r6, b98a8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b98a6:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b98a8:	f1b9 0f00 	cmp.w	r9, #0
   b98ac:	d003      	beq.n	b98b6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b98ae:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b98b2:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b98b6:	f1b8 0f00 	cmp.w	r8, #0
   b98ba:	d001      	beq.n	b98c0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b98bc:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b98c0:	b107      	cbz	r7, b98c4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b98c2:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b98c4:	7463      	strb	r3, [r4, #17]
		return true;
   b98c6:	e7bc      	b.n	b9842 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b98c8 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b98c8:	4770      	bx	lr

000b98ca <_ZN8RHRouter4initEv>:
{
   b98ca:	b510      	push	{r4, lr}
   b98cc:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b98ce:	3004      	adds	r0, #4
   b98d0:	f7ff fb34 	bl	b8f3c <_ZN10RHDatagram4initEv>
    if (ret)
   b98d4:	b110      	cbz	r0, b98dc <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b98d6:	231e      	movs	r3, #30
   b98d8:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b98dc:	bd10      	pop	{r4, pc}

000b98de <_ZN8RHRouter10getRouteToEh>:
{
   b98de:	b510      	push	{r4, lr}
   b98e0:	4602      	mov	r2, r0
   b98e2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b98e4:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b98e8:	428c      	cmp	r4, r1
   b98ea:	d108      	bne.n	b98fe <_ZN8RHRouter10getRouteToEh+0x20>
   b98ec:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b98f0:	b12c      	cbz	r4, b98fe <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b98f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b98f6:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b98fa:	4418      	add	r0, r3
}
   b98fc:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b98fe:	3301      	adds	r3, #1
   b9900:	2b32      	cmp	r3, #50	; 0x32
   b9902:	f102 0203 	add.w	r2, r2, #3
   b9906:	d1ed      	bne.n	b98e4 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b9908:	2000      	movs	r0, #0
   b990a:	e7f7      	b.n	b98fc <_ZN8RHRouter10getRouteToEh+0x1e>

000b990c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b990c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b990e:	780b      	ldrb	r3, [r1, #0]
   b9910:	2bff      	cmp	r3, #255	; 0xff
{
   b9912:	4605      	mov	r5, r0
   b9914:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b9916:	d006      	beq.n	b9926 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b9918:	4619      	mov	r1, r3
   b991a:	9201      	str	r2, [sp, #4]
   b991c:	f7ff ffdf 	bl	b98de <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b9920:	b158      	cbz	r0, b993a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b9922:	7843      	ldrb	r3, [r0, #1]
   b9924:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b9926:	4621      	mov	r1, r4
   b9928:	1d28      	adds	r0, r5, #4
   b992a:	f7ff fef7 	bl	b971c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b992e:	2800      	cmp	r0, #0
   b9930:	bf14      	ite	ne
   b9932:	2000      	movne	r0, #0
   b9934:	2005      	moveq	r0, #5
}
   b9936:	b003      	add	sp, #12
   b9938:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b993a:	2002      	movs	r0, #2
   b993c:	e7fb      	b.n	b9936 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b993e <_ZN8RHRouter11deleteRouteEh>:
{
   b993e:	b510      	push	{r4, lr}
   b9940:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b9944:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b9946:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b994a:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b994e:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b9952:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9956:	4421      	add	r1, r4
   b9958:	4420      	add	r0, r4
   b995a:	f005 fd03 	bl	bf364 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b995e:	2300      	movs	r3, #0
   b9960:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b9964:	bd10      	pop	{r4, pc}

000b9966 <_ZN8RHRouter13deleteRouteToEh>:
{
   b9966:	b538      	push	{r3, r4, r5, lr}
   b9968:	460a      	mov	r2, r1
   b996a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b996c:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b9970:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b9974:	b2d9      	uxtb	r1, r3
   b9976:	5d65      	ldrb	r5, [r4, r5]
   b9978:	4295      	cmp	r5, r2
   b997a:	d103      	bne.n	b9984 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b997c:	f7ff ffdf 	bl	b993e <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b9980:	2001      	movs	r0, #1
}
   b9982:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9984:	3301      	adds	r3, #1
   b9986:	2b32      	cmp	r3, #50	; 0x32
   b9988:	d1f2      	bne.n	b9970 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b998a:	2000      	movs	r0, #0
   b998c:	e7f9      	b.n	b9982 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b998e <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b998e:	2100      	movs	r1, #0
   b9990:	f7ff bfd5 	b.w	b993e <_ZN8RHRouter11deleteRouteEh>

000b9994 <_ZN8RHRouter10addRouteToEhhh>:
{
   b9994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9996:	4616      	mov	r6, r2
   b9998:	461f      	mov	r7, r3
   b999a:	4604      	mov	r4, r0
   b999c:	460d      	mov	r5, r1
   b999e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b99a0:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b99a4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b99a8:	5c11      	ldrb	r1, [r2, r0]
   b99aa:	42a9      	cmp	r1, r5
   b99ac:	d105      	bne.n	b99ba <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b99ae:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b99b0:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b99b4:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b99b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b99ba:	3301      	adds	r3, #1
   b99bc:	2b32      	cmp	r3, #50	; 0x32
   b99be:	d1f1      	bne.n	b99a4 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b99c0:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b99c2:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b99c6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b99ca:	5c11      	ldrb	r1, [r2, r0]
   b99cc:	b919      	cbnz	r1, b99d6 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b99ce:	4420      	add	r0, r4
   b99d0:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b99d4:	e7ec      	b.n	b99b0 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b99d6:	3301      	adds	r3, #1
   b99d8:	2b32      	cmp	r3, #50	; 0x32
   b99da:	d1f4      	bne.n	b99c6 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b99dc:	4620      	mov	r0, r4
   b99de:	f7ff ffd6 	bl	b998e <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b99e2:	4620      	mov	r0, r4
   b99e4:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b99e8:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b99ec:	b92a      	cbnz	r2, b99fa <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b99ee:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b99f2:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b99f6:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b99fa:	3003      	adds	r0, #3
   b99fc:	4298      	cmp	r0, r3
   b99fe:	d1f3      	bne.n	b99e8 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b9a00:	e7da      	b.n	b99b8 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b9a02 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9a02:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b9a06:	2200      	movs	r2, #0
   b9a08:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9a0c:	3003      	adds	r0, #3
   b9a0e:	4298      	cmp	r0, r3
   b9a10:	d1fa      	bne.n	b9a08 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b9a12:	4770      	bx	lr

000b9a14 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b9a14:	b510      	push	{r4, lr}
   b9a16:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b9a18:	3004      	adds	r0, #4
   b9a1a:	f7ff fe53 	bl	b96c4 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b9a1e:	4b05      	ldr	r3, [pc, #20]	; (b9a34 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b9a20:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b9a22:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b9a26:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b9a28:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b9a2c:	f7ff ffe9 	bl	b9a02 <_ZN8RHRouter17clearRoutingTableEv>
}
   b9a30:	4620      	mov	r0, r4
   b9a32:	bd10      	pop	{r4, pc}
   b9a34:	000c0c58 	.word	0x000c0c58

000b9a38 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b9a38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b9a3c:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9a3e:	6840      	ldr	r0, [r0, #4]
{
   b9a40:	9101      	str	r1, [sp, #4]
   b9a42:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9a44:	6803      	ldr	r3, [r0, #0]
{
   b9a46:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9a4a:	699b      	ldr	r3, [r3, #24]
{
   b9a4c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b9a50:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9a52:	4798      	blx	r3
   b9a54:	f106 0805 	add.w	r8, r6, #5
   b9a58:	4580      	cmp	r8, r0
   b9a5a:	d81c      	bhi.n	b9a96 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b9a5c:	4d10      	ldr	r5, [pc, #64]	; (b9aa0 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b9a5e:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b9a60:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b9a64:	2300      	movs	r3, #0
   b9a66:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b9a68:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b9a6c:	70eb      	strb	r3, [r5, #3]
   b9a6e:	1c5a      	adds	r2, r3, #1
   b9a70:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b9a74:	1d68      	adds	r0, r5, #5
   b9a76:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b9a78:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b9a7a:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b9a7e:	f005 fc71 	bl	bf364 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9a82:	6823      	ldr	r3, [r4, #0]
   b9a84:	685b      	ldr	r3, [r3, #4]
   b9a86:	fa5f f288 	uxtb.w	r2, r8
   b9a8a:	4629      	mov	r1, r5
   b9a8c:	4620      	mov	r0, r4
}
   b9a8e:	b002      	add	sp, #8
   b9a90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9a94:	4718      	bx	r3
}
   b9a96:	2001      	movs	r0, #1
   b9a98:	b002      	add	sp, #8
   b9a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9a9e:	bf00      	nop
   b9aa0:	2003e4ea 	.word	0x2003e4ea

000b9aa4 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b9aa4:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b9aa6:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b9aaa:	9401      	str	r4, [sp, #4]
   b9aac:	7a04      	ldrb	r4, [r0, #8]
   b9aae:	9400      	str	r4, [sp, #0]
   b9ab0:	f7ff ffc2 	bl	b9a38 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b9ab4:	b002      	add	sp, #8
   b9ab6:	bd10      	pop	{r4, pc}

000b9ab8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b9ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9abc:	b087      	sub	sp, #28
   b9abe:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b9ac0:	237f      	movs	r3, #127	; 0x7f
   b9ac2:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9ac6:	f10d 0317 	add.w	r3, sp, #23
   b9aca:	9302      	str	r3, [sp, #8]
   b9acc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b9ba0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b9ad0:	f10d 0316 	add.w	r3, sp, #22
   b9ad4:	9301      	str	r3, [sp, #4]
   b9ad6:	f10d 0315 	add.w	r3, sp, #21
   b9ada:	9300      	str	r3, [sp, #0]
{  
   b9adc:	4604      	mov	r4, r0
   b9ade:	4688      	mov	r8, r1
   b9ae0:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9ae2:	ab05      	add	r3, sp, #20
   b9ae4:	f10d 0213 	add.w	r2, sp, #19
   b9ae8:	4649      	mov	r1, r9
   b9aea:	3004      	adds	r0, #4
{  
   b9aec:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9af0:	f7ff fe97 	bl	b9822 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b9af4:	4605      	mov	r5, r0
   b9af6:	b908      	cbnz	r0, b9afc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b9af8:	2500      	movs	r5, #0
   b9afa:	e038      	b.n	b9b6e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b9afc:	6823      	ldr	r3, [r4, #0]
   b9afe:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b9b02:	681b      	ldr	r3, [r3, #0]
   b9b04:	4649      	mov	r1, r9
   b9b06:	4620      	mov	r0, r4
   b9b08:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b9b0a:	f899 3000 	ldrb.w	r3, [r9]
   b9b0e:	7a22      	ldrb	r2, [r4, #8]
   b9b10:	429a      	cmp	r2, r3
   b9b12:	d001      	beq.n	b9b18 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b9b14:	2bff      	cmp	r3, #255	; 0xff
   b9b16:	d12e      	bne.n	b9b76 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b9b18:	b117      	cbz	r7, b9b20 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b9b1a:	4b21      	ldr	r3, [pc, #132]	; (b9ba0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9b1c:	785b      	ldrb	r3, [r3, #1]
   b9b1e:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b9b20:	f1bb 0f00 	cmp.w	fp, #0
   b9b24:	d003      	beq.n	b9b2e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b9b26:	4b1e      	ldr	r3, [pc, #120]	; (b9ba0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9b28:	781b      	ldrb	r3, [r3, #0]
   b9b2a:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b9b2e:	f1ba 0f00 	cmp.w	sl, #0
   b9b32:	d003      	beq.n	b9b3c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b9b34:	4b1a      	ldr	r3, [pc, #104]	; (b9ba0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9b36:	78db      	ldrb	r3, [r3, #3]
   b9b38:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b9b3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b9b3e:	b11b      	cbz	r3, b9b48 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b9b40:	4b17      	ldr	r3, [pc, #92]	; (b9ba0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9b42:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9b44:	791b      	ldrb	r3, [r3, #4]
   b9b46:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b9b48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9b4a:	b11b      	cbz	r3, b9b54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b9b4c:	4b14      	ldr	r3, [pc, #80]	; (b9ba0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9b4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9b50:	789b      	ldrb	r3, [r3, #2]
   b9b52:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9b54:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b9b58:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9b5a:	4912      	ldr	r1, [pc, #72]	; (b9ba4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9b5c:	3b05      	subs	r3, #5
   b9b5e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b9b60:	429a      	cmp	r2, r3
		*len = msgLen;
   b9b62:	bf88      	it	hi
   b9b64:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9b66:	7832      	ldrb	r2, [r6, #0]
   b9b68:	4640      	mov	r0, r8
   b9b6a:	f005 fbfb 	bl	bf364 <memcpy>
}
   b9b6e:	4628      	mov	r0, r5
   b9b70:	b007      	add	sp, #28
   b9b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b9b76:	f899 3002 	ldrb.w	r3, [r9, #2]
   b9b7a:	1c5a      	adds	r2, r3, #1
   b9b7c:	f889 2002 	strb.w	r2, [r9, #2]
   b9b80:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b9b84:	429a      	cmp	r2, r3
   b9b86:	d9b7      	bls.n	b9af8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b9b88:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b9b8c:	2b00      	cmp	r3, #0
   b9b8e:	d0b3      	beq.n	b9af8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b9b90:	6823      	ldr	r3, [r4, #0]
   b9b92:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b9b96:	685b      	ldr	r3, [r3, #4]
   b9b98:	4649      	mov	r1, r9
   b9b9a:	4620      	mov	r0, r4
   b9b9c:	4798      	blx	r3
   b9b9e:	e7ab      	b.n	b9af8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b9ba0:	2003e4ea 	.word	0x2003e4ea
   b9ba4:	2003e4ef 	.word	0x2003e4ef

000b9ba8 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b9ba8:	b510      	push	{r4, lr}
   b9baa:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b9bac:	6a00      	ldr	r0, [r0, #32]
   b9bae:	6803      	ldr	r3, [r0, #0]
   b9bb0:	68db      	ldr	r3, [r3, #12]
   b9bb2:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b9bb4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b9bb8:	28ff      	cmp	r0, #255	; 0xff
   b9bba:	d002      	beq.n	b9bc2 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b9bbc:	2101      	movs	r1, #1
   b9bbe:	f004 fdb3 	bl	be728 <pinMode>

    deselectSlave();
   b9bc2:	6823      	ldr	r3, [r4, #0]
   b9bc4:	4620      	mov	r0, r4
   b9bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9bc8:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b9bca:	2064      	movs	r0, #100	; 0x64
   b9bcc:	f001 fd24 	bl	bb618 <delay>
#endif
    
    return true;
}
   b9bd0:	2001      	movs	r0, #1
   b9bd2:	bd10      	pop	{r4, pc}

000b9bd4 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b9bd4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b9bd8:	2100      	movs	r1, #0
   b9bda:	f004 bdb6 	b.w	be74a <digitalWrite>

000b9bde <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b9bde:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b9be2:	2101      	movs	r1, #1
   b9be4:	f004 bdb1 	b.w	be74a <digitalWrite>

000b9be8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b9be8:	b570      	push	{r4, r5, r6, lr}
   b9bea:	4604      	mov	r4, r0
   b9bec:	460d      	mov	r5, r1
   b9bee:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b9bf0:	f7ff fa7e 	bl	b90f0 <_ZN15RHGenericDriverC1Ev>
   b9bf4:	4b03      	ldr	r3, [pc, #12]	; (b9c04 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b9bf6:	6023      	str	r3, [r4, #0]
   b9bf8:	6226      	str	r6, [r4, #32]
   b9bfa:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b9bfe:	4620      	mov	r0, r4
   b9c00:	bd70      	pop	{r4, r5, r6, pc}
   b9c02:	bf00      	nop
   b9c04:	000c0c68 	.word	0x000c0c68

000b9c08 <_ZN11RHSPIDriver7spiReadEh>:
{
   b9c08:	b538      	push	{r3, r4, r5, lr}
   b9c0a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9c0c:	6a00      	ldr	r0, [r0, #32]
   b9c0e:	6803      	ldr	r3, [r0, #0]
   b9c10:	6a1b      	ldr	r3, [r3, #32]
{
   b9c12:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b9c14:	4798      	blx	r3
    selectSlave();
   b9c16:	6823      	ldr	r3, [r4, #0]
   b9c18:	4620      	mov	r0, r4
   b9c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9c1c:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b9c1e:	6a20      	ldr	r0, [r4, #32]
   b9c20:	6803      	ldr	r3, [r0, #0]
   b9c22:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b9c26:	681b      	ldr	r3, [r3, #0]
   b9c28:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9c2a:	6a20      	ldr	r0, [r4, #32]
   b9c2c:	6803      	ldr	r3, [r0, #0]
   b9c2e:	2100      	movs	r1, #0
   b9c30:	681b      	ldr	r3, [r3, #0]
   b9c32:	4798      	blx	r3
    deselectSlave();
   b9c34:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9c36:	4605      	mov	r5, r0
    deselectSlave();
   b9c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9c3a:	4620      	mov	r0, r4
   b9c3c:	4798      	blx	r3
    _spi.endTransaction();
   b9c3e:	6a20      	ldr	r0, [r4, #32]
   b9c40:	6803      	ldr	r3, [r0, #0]
   b9c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9c44:	4798      	blx	r3
}
   b9c46:	4628      	mov	r0, r5
   b9c48:	bd38      	pop	{r3, r4, r5, pc}

000b9c4a <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b9c4a:	b570      	push	{r4, r5, r6, lr}
   b9c4c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9c4e:	6a00      	ldr	r0, [r0, #32]
   b9c50:	6803      	ldr	r3, [r0, #0]
   b9c52:	6a1b      	ldr	r3, [r3, #32]
{
   b9c54:	4616      	mov	r6, r2
   b9c56:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b9c58:	4798      	blx	r3
    selectSlave();
   b9c5a:	6823      	ldr	r3, [r4, #0]
   b9c5c:	4620      	mov	r0, r4
   b9c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9c60:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b9c62:	6a20      	ldr	r0, [r4, #32]
   b9c64:	6803      	ldr	r3, [r0, #0]
   b9c66:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b9c6a:	681b      	ldr	r3, [r3, #0]
   b9c6c:	4798      	blx	r3
   b9c6e:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b9c70:	6a20      	ldr	r0, [r4, #32]
   b9c72:	6803      	ldr	r3, [r0, #0]
   b9c74:	4631      	mov	r1, r6
   b9c76:	681b      	ldr	r3, [r3, #0]
   b9c78:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b9c7a:	2001      	movs	r0, #1
   b9c7c:	f001 f8a8 	bl	badd0 <HAL_Delay_Microseconds>
    deselectSlave();
   b9c80:	6823      	ldr	r3, [r4, #0]
   b9c82:	4620      	mov	r0, r4
   b9c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9c86:	4798      	blx	r3
    _spi.endTransaction();
   b9c88:	6a20      	ldr	r0, [r4, #32]
   b9c8a:	6803      	ldr	r3, [r0, #0]
   b9c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9c8e:	4798      	blx	r3
}
   b9c90:	4628      	mov	r0, r5
   b9c92:	bd70      	pop	{r4, r5, r6, pc}

000b9c94 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b9c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9c96:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9c98:	6a00      	ldr	r0, [r0, #32]
{
   b9c9a:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b9c9c:	6803      	ldr	r3, [r0, #0]
   b9c9e:	6a1b      	ldr	r3, [r3, #32]
{
   b9ca0:	460f      	mov	r7, r1
   b9ca2:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9ca4:	4798      	blx	r3
    selectSlave();
   b9ca6:	6823      	ldr	r3, [r4, #0]
   b9ca8:	4620      	mov	r0, r4
   b9caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9cac:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b9cae:	6a20      	ldr	r0, [r4, #32]
   b9cb0:	6803      	ldr	r3, [r0, #0]
   b9cb2:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b9cb6:	681b      	ldr	r3, [r3, #0]
   b9cb8:	4798      	blx	r3
   b9cba:	442e      	add	r6, r5
   b9cbc:	4607      	mov	r7, r0
    while (len--)
   b9cbe:	42b5      	cmp	r5, r6
   b9cc0:	d007      	beq.n	b9cd2 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b9cc2:	6a20      	ldr	r0, [r4, #32]
   b9cc4:	6803      	ldr	r3, [r0, #0]
   b9cc6:	2100      	movs	r1, #0
   b9cc8:	681b      	ldr	r3, [r3, #0]
   b9cca:	4798      	blx	r3
   b9ccc:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b9cd0:	e7f5      	b.n	b9cbe <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b9cd2:	6823      	ldr	r3, [r4, #0]
   b9cd4:	4620      	mov	r0, r4
   b9cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9cd8:	4798      	blx	r3
    _spi.endTransaction();
   b9cda:	6a20      	ldr	r0, [r4, #32]
   b9cdc:	6803      	ldr	r3, [r0, #0]
   b9cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9ce0:	4798      	blx	r3
}
   b9ce2:	4638      	mov	r0, r7
   b9ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9ce6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b9ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ce8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9cea:	6a00      	ldr	r0, [r0, #32]
{
   b9cec:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b9cee:	6803      	ldr	r3, [r0, #0]
   b9cf0:	6a1b      	ldr	r3, [r3, #32]
{
   b9cf2:	460f      	mov	r7, r1
   b9cf4:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9cf6:	4798      	blx	r3
    selectSlave();
   b9cf8:	6823      	ldr	r3, [r4, #0]
   b9cfa:	4620      	mov	r0, r4
   b9cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9cfe:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b9d00:	6a20      	ldr	r0, [r4, #32]
   b9d02:	6803      	ldr	r3, [r0, #0]
   b9d04:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b9d08:	681b      	ldr	r3, [r3, #0]
   b9d0a:	4798      	blx	r3
   b9d0c:	442e      	add	r6, r5
   b9d0e:	4607      	mov	r7, r0
    while (len--)
   b9d10:	42b5      	cmp	r5, r6
   b9d12:	d006      	beq.n	b9d22 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b9d14:	6a20      	ldr	r0, [r4, #32]
   b9d16:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9d1a:	6803      	ldr	r3, [r0, #0]
   b9d1c:	681b      	ldr	r3, [r3, #0]
   b9d1e:	4798      	blx	r3
    while (len--)
   b9d20:	e7f6      	b.n	b9d10 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b9d22:	6823      	ldr	r3, [r4, #0]
   b9d24:	4620      	mov	r0, r4
   b9d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9d28:	4798      	blx	r3
    _spi.endTransaction();
   b9d2a:	6a20      	ldr	r0, [r4, #32]
   b9d2c:	6803      	ldr	r3, [r0, #0]
   b9d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9d30:	4798      	blx	r3
}
   b9d32:	4638      	mov	r0, r7
   b9d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9d36 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b9d36:	6a00      	ldr	r0, [r0, #32]
   b9d38:	6803      	ldr	r3, [r0, #0]
   b9d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9d3c:	4718      	bx	r3

000b9d3e <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b9d3e:	2001      	movs	r0, #1
   b9d40:	4770      	bx	lr

000b9d42 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b9d42:	20fb      	movs	r0, #251	; 0xfb
   b9d44:	4770      	bx	lr

000b9d46 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b9d46:	4770      	bx	lr

000b9d48 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b9d48:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b9d4a:	7903      	ldrb	r3, [r0, #4]
   b9d4c:	2b05      	cmp	r3, #5
{
   b9d4e:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b9d50:	d010      	beq.n	b9d74 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b9d52:	6803      	ldr	r3, [r0, #0]
   b9d54:	2105      	movs	r1, #5
   b9d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9d5a:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b9d5c:	2207      	movs	r2, #7
   b9d5e:	2101      	movs	r1, #1
   b9d60:	4620      	mov	r0, r4
   b9d62:	f7ff ff72 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b9d66:	2280      	movs	r2, #128	; 0x80
   b9d68:	2140      	movs	r1, #64	; 0x40
   b9d6a:	4620      	mov	r0, r4
   b9d6c:	f7ff ff6d 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b9d70:	2305      	movs	r3, #5
   b9d72:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b9d74:	7923      	ldrb	r3, [r4, #4]
   b9d76:	2b05      	cmp	r3, #5
   b9d78:	d0fc      	beq.n	b9d74 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b9d7a:	7e20      	ldrb	r0, [r4, #24]
}
   b9d7c:	bd10      	pop	{r4, pc}

000b9d7e <_ZN7RH_RF95D0Ev>:
   b9d7e:	b510      	push	{r4, lr}
   b9d80:	f44f 7198 	mov.w	r1, #304	; 0x130
   b9d84:	4604      	mov	r4, r0
   b9d86:	f7fa f98a 	bl	b409e <_ZdlPvj>
   b9d8a:	4620      	mov	r0, r4
   b9d8c:	bd10      	pop	{r4, pc}

000b9d8e <_ZN7RH_RF955sleepEv>:
{
   b9d8e:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b9d90:	7903      	ldrb	r3, [r0, #4]
   b9d92:	2b01      	cmp	r3, #1
{
   b9d94:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b9d96:	d00b      	beq.n	b9db0 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b9d98:	6803      	ldr	r3, [r0, #0]
   b9d9a:	2101      	movs	r1, #1
   b9d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9da0:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b9da2:	2200      	movs	r2, #0
   b9da4:	2101      	movs	r1, #1
   b9da6:	4620      	mov	r0, r4
   b9da8:	f7ff ff4f 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b9dac:	2301      	movs	r3, #1
   b9dae:	7123      	strb	r3, [r4, #4]
}
   b9db0:	2001      	movs	r0, #1
   b9db2:	bd10      	pop	{r4, pc}

000b9db4 <_ZN7RH_RF954recvEPhS0_>:
{
   b9db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b9db6:	6803      	ldr	r3, [r0, #0]
   b9db8:	68db      	ldr	r3, [r3, #12]
{
   b9dba:	4604      	mov	r4, r0
   b9dbc:	460f      	mov	r7, r1
   b9dbe:	4615      	mov	r5, r2
    if (!available())
   b9dc0:	4798      	blx	r3
   b9dc2:	4606      	mov	r6, r0
   b9dc4:	b1b0      	cbz	r0, b9df4 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b9dc6:	b187      	cbz	r7, b9dea <_ZN7RH_RF954recvEPhS0_+0x36>
   b9dc8:	b17d      	cbz	r5, b9dea <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b9dca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b9dce:	782a      	ldrb	r2, [r5, #0]
   b9dd0:	3b03      	subs	r3, #3
   b9dd2:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b9dd4:	bfde      	ittt	le
   b9dd6:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b9dda:	3b04      	suble	r3, #4
   b9ddc:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b9dde:	782a      	ldrb	r2, [r5, #0]
   b9de0:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b9de4:	4638      	mov	r0, r7
   b9de6:	f005 fabd 	bl	bf364 <memcpy>
    _rxBufValid = false;
   b9dea:	2300      	movs	r3, #0
   b9dec:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b9df0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b9df4:	4630      	mov	r0, r6
   b9df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9df8 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b9df8:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b9dfa:	b538      	push	{r3, r4, r5, lr}
   b9dfc:	4605      	mov	r5, r0
   b9dfe:	460c      	mov	r4, r1
	if (power > 20)
   b9e00:	dc14      	bgt.n	b9e2c <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b9e02:	2901      	cmp	r1, #1
   b9e04:	dd14      	ble.n	b9e30 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b9e06:	2911      	cmp	r1, #17
   b9e08:	dd13      	ble.n	b9e32 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b9e0a:	2207      	movs	r2, #7
   b9e0c:	214d      	movs	r1, #77	; 0x4d
   b9e0e:	4628      	mov	r0, r5
   b9e10:	f7ff ff1b 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b9e14:	3c03      	subs	r4, #3
   b9e16:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b9e18:	1ea2      	subs	r2, r4, #2
   b9e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b9e1e:	4628      	mov	r0, r5
   b9e20:	b2d2      	uxtb	r2, r2
}
   b9e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b9e26:	2109      	movs	r1, #9
   b9e28:	f7ff bf0f 	b.w	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b9e2c:	2414      	movs	r4, #20
   b9e2e:	e7ec      	b.n	b9e0a <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b9e30:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9e32:	2204      	movs	r2, #4
   b9e34:	214d      	movs	r1, #77	; 0x4d
   b9e36:	4628      	mov	r0, r5
   b9e38:	f7ff ff07 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
   b9e3c:	e7ec      	b.n	b9e18 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b9e40 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b9e40:	b538      	push	{r3, r4, r5, lr}
   b9e42:	4604      	mov	r4, r0
   b9e44:	4615      	mov	r5, r2
    _rxBufValid(0)
   b9e46:	461a      	mov	r2, r3
   b9e48:	f7ff fece 	bl	b9be8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b9e4c:	4b09      	ldr	r3, [pc, #36]	; (b9e74 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b9e4e:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b9e50:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b9e52:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b9e54:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b9e58:	2201      	movs	r2, #1
    _rxBufValid(0)
   b9e5a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b9e5e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b9e62:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b9e66:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b9e6a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b9e6e:	4620      	mov	r0, r4
   b9e70:	bd38      	pop	{r3, r4, r5, pc}
   b9e72:	bf00      	nop
   b9e74:	000c0d00 	.word	0x000c0d00

000b9e78 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b9e78:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b9e7c:	2b03      	cmp	r3, #3
   b9e7e:	d91b      	bls.n	b9eb8 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b9e80:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b9e84:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b9e86:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b9e8a:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b9e8c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b9e90:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b9e92:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b9e96:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b9e98:	7983      	ldrb	r3, [r0, #6]
   b9e9a:	b933      	cbnz	r3, b9eaa <_ZN7RH_RF9513validateRxBufEv+0x32>
   b9e9c:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b9e9e:	7942      	ldrb	r2, [r0, #5]
   b9ea0:	429a      	cmp	r2, r3
   b9ea2:	d002      	beq.n	b9eaa <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b9ea4:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b9ea6:	2bff      	cmp	r3, #255	; 0xff
   b9ea8:	d106      	bne.n	b9eb8 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b9eaa:	8a83      	ldrh	r3, [r0, #20]
   b9eac:	3301      	adds	r3, #1
   b9eae:	b29b      	uxth	r3, r3
   b9eb0:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b9eb2:	2301      	movs	r3, #1
   b9eb4:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b9eb8:	4770      	bx	lr
   b9eba:	0000      	movs	r0, r0
   b9ebc:	0000      	movs	r0, r0
	...

000b9ec0 <_ZN7RH_RF9512setFrequencyEf>:
{
   b9ec0:	b538      	push	{r3, r4, r5, lr}
   b9ec2:	4604      	mov	r4, r0
   b9ec4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9ec8:	ee10 0a10 	vmov	r0, s0
{
   b9ecc:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9ed0:	f004 fea6 	bl	bec20 <__aeabi_f2d>
   b9ed4:	a317      	add	r3, pc, #92	; (adr r3, b9f34 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b9ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9eda:	f004 fef9 	bl	becd0 <__aeabi_dmul>
   b9ede:	a317      	add	r3, pc, #92	; (adr r3, b9f3c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b9ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ee4:	f005 f81e 	bl	bef24 <__aeabi_ddiv>
   b9ee8:	f005 f9ca 	bl	bf280 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b9eec:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9eee:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b9ef0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b9ef4:	4620      	mov	r0, r4
   b9ef6:	f7ff fea8 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b9efa:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b9efe:	2107      	movs	r1, #7
   b9f00:	4620      	mov	r0, r4
   b9f02:	f7ff fea2 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b9f06:	b2ea      	uxtb	r2, r5
   b9f08:	2108      	movs	r1, #8
   b9f0a:	4620      	mov	r0, r4
   b9f0c:	f7ff fe9d 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b9f10:	eddf 7a07 	vldr	s15, [pc, #28]	; b9f30 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b9f14:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b9f18:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b9f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9f20:	bfac      	ite	ge
   b9f22:	2301      	movge	r3, #1
   b9f24:	2300      	movlt	r3, #0
}
   b9f26:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b9f28:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b9f2c:	bd38      	pop	{r3, r4, r5, pc}
   b9f2e:	bf00      	nop
   b9f30:	4442c000 	.word	0x4442c000
   b9f34:	00000000 	.word	0x00000000
   b9f38:	412e8480 	.word	0x412e8480
   b9f3c:	00000000 	.word	0x00000000
   b9f40:	404e8480 	.word	0x404e8480

000b9f44 <_ZN7RH_RF9511setModeIdleEv>:
{
   b9f44:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b9f46:	7903      	ldrb	r3, [r0, #4]
   b9f48:	2b02      	cmp	r3, #2
{
   b9f4a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b9f4c:	d00b      	beq.n	b9f66 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b9f4e:	6803      	ldr	r3, [r0, #0]
   b9f50:	2102      	movs	r1, #2
   b9f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9f56:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b9f58:	2201      	movs	r2, #1
   b9f5a:	4611      	mov	r1, r2
   b9f5c:	4620      	mov	r0, r4
   b9f5e:	f7ff fe74 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b9f62:	2302      	movs	r3, #2
   b9f64:	7123      	strb	r3, [r4, #4]
}
   b9f66:	bd10      	pop	{r4, pc}

000b9f68 <_ZN7RH_RF9515handleInterruptEv>:
{
   b9f68:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b9f6a:	2112      	movs	r1, #18
{
   b9f6c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b9f6e:	f7ff fe4b 	bl	b9c08 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9f72:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b9f74:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9f76:	4620      	mov	r0, r4
   b9f78:	f7ff fe46 	bl	b9c08 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9f7c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9f7e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9f80:	2112      	movs	r1, #18
   b9f82:	4620      	mov	r0, r4
   b9f84:	f7ff fe61 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b9f88:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b9f8a:	2b04      	cmp	r3, #4
   b9f8c:	d107      	bne.n	b9f9e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b9f8e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b9f92:	d117      	bne.n	b9fc4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b9f94:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b9f98:	b10b      	cbz	r3, b9f9e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b9f9a:	0670      	lsls	r0, r6, #25
   b9f9c:	d512      	bpl.n	b9fc4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b9f9e:	7923      	ldrb	r3, [r4, #4]
   b9fa0:	2b04      	cmp	r3, #4
   b9fa2:	d101      	bne.n	b9fa8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b9fa4:	0669      	lsls	r1, r5, #25
   b9fa6:	d422      	bmi.n	b9fee <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b9fa8:	7923      	ldrb	r3, [r4, #4]
   b9faa:	2b03      	cmp	r3, #3
   b9fac:	d101      	bne.n	b9fb2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b9fae:	072a      	lsls	r2, r5, #28
   b9fb0:	d468      	bmi.n	ba084 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b9fb2:	7923      	ldrb	r3, [r4, #4]
   b9fb4:	2b05      	cmp	r3, #5
   b9fb6:	d10e      	bne.n	b9fd6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b9fb8:	076b      	lsls	r3, r5, #29
   b9fba:	d50c      	bpl.n	b9fd6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b9fbc:	f005 0501 	and.w	r5, r5, #1
   b9fc0:	7625      	strb	r5, [r4, #24]
   b9fc2:	e063      	b.n	ba08c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b9fc4:	8a63      	ldrh	r3, [r4, #18]
   b9fc6:	3301      	adds	r3, #1
   b9fc8:	b29b      	uxth	r3, r3
   b9fca:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b9fcc:	2300      	movs	r3, #0
   b9fce:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b9fd2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9fd6:	22ff      	movs	r2, #255	; 0xff
   b9fd8:	2112      	movs	r1, #18
   b9fda:	4620      	mov	r0, r4
   b9fdc:	f7ff fe35 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9fe0:	4620      	mov	r0, r4
   b9fe2:	22ff      	movs	r2, #255	; 0xff
}
   b9fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9fe8:	2112      	movs	r1, #18
   b9fea:	f7ff be2e 	b.w	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b9fee:	2113      	movs	r1, #19
   b9ff0:	4620      	mov	r0, r4
   b9ff2:	f7ff fe09 	bl	b9c08 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b9ff6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b9ff8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b9ffa:	4620      	mov	r0, r4
   b9ffc:	f7ff fe04 	bl	b9c08 <_ZN11RHSPIDriver7spiReadEh>
   ba000:	210d      	movs	r1, #13
   ba002:	4602      	mov	r2, r0
   ba004:	4620      	mov	r0, r4
   ba006:	f7ff fe20 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   ba00a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   ba00e:	462b      	mov	r3, r5
   ba010:	2100      	movs	r1, #0
   ba012:	4620      	mov	r0, r4
   ba014:	f7ff fe3e 	bl	b9c94 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   ba018:	2119      	movs	r1, #25
	_bufLen = len;
   ba01a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   ba01e:	4620      	mov	r0, r4
   ba020:	f7ff fdf2 	bl	b9c08 <_ZN11RHSPIDriver7spiReadEh>
   ba024:	b240      	sxtb	r0, r0
   ba026:	2800      	cmp	r0, #0
   ba028:	bfb8      	it	lt
   ba02a:	3003      	addlt	r0, #3
   ba02c:	1080      	asrs	r0, r0, #2
   ba02e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   ba032:	211a      	movs	r1, #26
   ba034:	4620      	mov	r0, r4
   ba036:	f7ff fde7 	bl	b9c08 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   ba03a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   ba03e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   ba040:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   ba042:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   ba044:	bfa9      	itett	ge
   ba046:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   ba048:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   ba04a:	b21b      	sxthge	r3, r3
   ba04c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   ba04e:	bfb2      	itee	lt
   ba050:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   ba052:	220f      	movge	r2, #15
   ba054:	fb93 f3f2 	sdivge	r3, r3, r2
   ba058:	b21b      	sxth	r3, r3
   ba05a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   ba05c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   ba060:	b16b      	cbz	r3, ba07e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   ba062:	8a23      	ldrh	r3, [r4, #16]
   ba064:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   ba066:	b21b      	sxth	r3, r3
   ba068:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   ba06a:	4620      	mov	r0, r4
   ba06c:	f7ff ff04 	bl	b9e78 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   ba070:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   ba074:	2b00      	cmp	r3, #0
   ba076:	d0ae      	beq.n	b9fd6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   ba078:	f7ff ff64 	bl	b9f44 <_ZN7RH_RF9511setModeIdleEv>
   ba07c:	e7ab      	b.n	b9fd6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   ba07e:	8a23      	ldrh	r3, [r4, #16]
   ba080:	3ba4      	subs	r3, #164	; 0xa4
   ba082:	e7f0      	b.n	ba066 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   ba084:	8ae3      	ldrh	r3, [r4, #22]
   ba086:	3301      	adds	r3, #1
   ba088:	b29b      	uxth	r3, r3
   ba08a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   ba08c:	4620      	mov	r0, r4
   ba08e:	e7f3      	b.n	ba078 <_ZN7RH_RF9515handleInterruptEv+0x110>

000ba090 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   ba090:	4b02      	ldr	r3, [pc, #8]	; (ba09c <_ZN7RH_RF954isr0Ev+0xc>)
   ba092:	6818      	ldr	r0, [r3, #0]
   ba094:	b108      	cbz	r0, ba09a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   ba096:	f7ff bf67 	b.w	b9f68 <_ZN7RH_RF9515handleInterruptEv>
}
   ba09a:	4770      	bx	lr
   ba09c:	2003e56c 	.word	0x2003e56c

000ba0a0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   ba0a0:	4b02      	ldr	r3, [pc, #8]	; (ba0ac <_ZN7RH_RF954isr1Ev+0xc>)
   ba0a2:	6858      	ldr	r0, [r3, #4]
   ba0a4:	b108      	cbz	r0, ba0aa <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   ba0a6:	f7ff bf5f 	b.w	b9f68 <_ZN7RH_RF9515handleInterruptEv>
}
   ba0aa:	4770      	bx	lr
   ba0ac:	2003e56c 	.word	0x2003e56c

000ba0b0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   ba0b0:	4b02      	ldr	r3, [pc, #8]	; (ba0bc <_ZN7RH_RF954isr2Ev+0xc>)
   ba0b2:	6898      	ldr	r0, [r3, #8]
   ba0b4:	b108      	cbz	r0, ba0ba <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   ba0b6:	f7ff bf57 	b.w	b9f68 <_ZN7RH_RF9515handleInterruptEv>
}
   ba0ba:	4770      	bx	lr
   ba0bc:	2003e56c 	.word	0x2003e56c

000ba0c0 <_ZN7RH_RF959setModeRxEv>:
{
   ba0c0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   ba0c2:	7903      	ldrb	r3, [r0, #4]
   ba0c4:	2b04      	cmp	r3, #4
{
   ba0c6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   ba0c8:	d010      	beq.n	ba0ec <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   ba0ca:	6803      	ldr	r3, [r0, #0]
   ba0cc:	2104      	movs	r1, #4
   ba0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba0d2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   ba0d4:	2205      	movs	r2, #5
   ba0d6:	2101      	movs	r1, #1
   ba0d8:	4620      	mov	r0, r4
   ba0da:	f7ff fdb6 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   ba0de:	2200      	movs	r2, #0
   ba0e0:	2140      	movs	r1, #64	; 0x40
   ba0e2:	4620      	mov	r0, r4
   ba0e4:	f7ff fdb1 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   ba0e8:	2304      	movs	r3, #4
   ba0ea:	7123      	strb	r3, [r4, #4]
}
   ba0ec:	bd10      	pop	{r4, pc}

000ba0ee <_ZN7RH_RF959availableEv>:
{
   ba0ee:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   ba0f0:	7903      	ldrb	r3, [r0, #4]
   ba0f2:	2b03      	cmp	r3, #3
{
   ba0f4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   ba0f6:	d005      	beq.n	ba104 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   ba0f8:	f7ff ffe2 	bl	ba0c0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   ba0fc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   ba100:	b2c0      	uxtb	r0, r0
}
   ba102:	bd10      	pop	{r4, pc}
	return false;
   ba104:	2000      	movs	r0, #0
   ba106:	e7fc      	b.n	ba102 <_ZN7RH_RF959availableEv+0x14>

000ba108 <_ZN7RH_RF959setModeTxEv>:
{
   ba108:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   ba10a:	7903      	ldrb	r3, [r0, #4]
   ba10c:	2b03      	cmp	r3, #3
{
   ba10e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   ba110:	d010      	beq.n	ba134 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   ba112:	6803      	ldr	r3, [r0, #0]
   ba114:	2103      	movs	r1, #3
   ba116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba11a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   ba11c:	2203      	movs	r2, #3
   ba11e:	2101      	movs	r1, #1
   ba120:	4620      	mov	r0, r4
   ba122:	f7ff fd92 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   ba126:	2240      	movs	r2, #64	; 0x40
   ba128:	4611      	mov	r1, r2
   ba12a:	4620      	mov	r0, r4
   ba12c:	f7ff fd8d 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   ba130:	2303      	movs	r3, #3
   ba132:	7123      	strb	r3, [r4, #4]
}
   ba134:	bd10      	pop	{r4, pc}

000ba136 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   ba136:	2afb      	cmp	r2, #251	; 0xfb
{
   ba138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba13a:	4604      	mov	r4, r0
   ba13c:	460f      	mov	r7, r1
   ba13e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   ba140:	d902      	bls.n	ba148 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   ba142:	2600      	movs	r6, #0
}
   ba144:	4630      	mov	r0, r6
   ba146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   ba148:	6803      	ldr	r3, [r0, #0]
   ba14a:	6a1b      	ldr	r3, [r3, #32]
   ba14c:	4798      	blx	r3
    setModeIdle();
   ba14e:	4620      	mov	r0, r4
   ba150:	f7ff fef8 	bl	b9f44 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   ba154:	6823      	ldr	r3, [r4, #0]
   ba156:	4620      	mov	r0, r4
   ba158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba15a:	4798      	blx	r3
   ba15c:	4606      	mov	r6, r0
   ba15e:	2800      	cmp	r0, #0
   ba160:	d0ef      	beq.n	ba142 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   ba162:	2200      	movs	r2, #0
   ba164:	210d      	movs	r1, #13
   ba166:	4620      	mov	r0, r4
   ba168:	f7ff fd6f 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   ba16c:	7ae2      	ldrb	r2, [r4, #11]
   ba16e:	2100      	movs	r1, #0
   ba170:	4620      	mov	r0, r4
   ba172:	f7ff fd6a 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   ba176:	7b22      	ldrb	r2, [r4, #12]
   ba178:	2100      	movs	r1, #0
   ba17a:	4620      	mov	r0, r4
   ba17c:	f7ff fd65 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   ba180:	7b62      	ldrb	r2, [r4, #13]
   ba182:	2100      	movs	r1, #0
   ba184:	4620      	mov	r0, r4
   ba186:	f7ff fd60 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   ba18a:	7ba2      	ldrb	r2, [r4, #14]
   ba18c:	2100      	movs	r1, #0
   ba18e:	4620      	mov	r0, r4
   ba190:	f7ff fd5b 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   ba194:	462b      	mov	r3, r5
   ba196:	463a      	mov	r2, r7
   ba198:	2100      	movs	r1, #0
   ba19a:	4620      	mov	r0, r4
   ba19c:	f7ff fda3 	bl	b9ce6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   ba1a0:	1d2a      	adds	r2, r5, #4
   ba1a2:	b2d2      	uxtb	r2, r2
   ba1a4:	2122      	movs	r1, #34	; 0x22
   ba1a6:	4620      	mov	r0, r4
   ba1a8:	f7ff fd4f 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   ba1ac:	4620      	mov	r0, r4
   ba1ae:	f7ff ffab 	bl	ba108 <_ZN7RH_RF959setModeTxEv>
    return true;
   ba1b2:	e7c7      	b.n	ba144 <_ZN7RH_RF954sendEPKhh+0xe>

000ba1b4 <_ZN7RH_RF9510setTxPowerEab>:
{
   ba1b4:	b510      	push	{r4, lr}
   ba1b6:	4604      	mov	r4, r0
    _useRFO = useRFO;
   ba1b8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   ba1bc:	b172      	cbz	r2, ba1dc <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   ba1be:	f381 0204 	usat	r2, #4, r1
   ba1c2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   ba1c6:	b2d2      	uxtb	r2, r2
   ba1c8:	2109      	movs	r1, #9
   ba1ca:	f7ff fd3e 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   ba1ce:	4620      	mov	r0, r4
   ba1d0:	2204      	movs	r2, #4
}
   ba1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   ba1d6:	214d      	movs	r1, #77	; 0x4d
   ba1d8:	f7ff bd37 	b.w	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
}
   ba1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba1e0:	f7ff be0a 	b.w	b9df8 <_ZN7RH_RF9510setTxPowerEab.part.0>

000ba1e4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   ba1e4:	b538      	push	{r3, r4, r5, lr}
   ba1e6:	460c      	mov	r4, r1
   ba1e8:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   ba1ea:	780a      	ldrb	r2, [r1, #0]
   ba1ec:	211d      	movs	r1, #29
   ba1ee:	f7ff fd2c 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   ba1f2:	7862      	ldrb	r2, [r4, #1]
   ba1f4:	211e      	movs	r1, #30
   ba1f6:	4628      	mov	r0, r5
   ba1f8:	f7ff fd27 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   ba1fc:	78a2      	ldrb	r2, [r4, #2]
   ba1fe:	4628      	mov	r0, r5
   ba200:	2126      	movs	r1, #38	; 0x26
}
   ba202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   ba206:	f7ff bd20 	b.w	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
	...

000ba20c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   ba20c:	2905      	cmp	r1, #5
{
   ba20e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   ba210:	d80f      	bhi.n	ba232 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   ba212:	4b09      	ldr	r3, [pc, #36]	; (ba238 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   ba214:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   ba218:	185c      	adds	r4, r3, r1
   ba21a:	5a5a      	ldrh	r2, [r3, r1]
   ba21c:	78a3      	ldrb	r3, [r4, #2]
   ba21e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   ba222:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   ba224:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   ba228:	f7ff ffdc 	bl	ba1e4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   ba22c:	2001      	movs	r0, #1
}
   ba22e:	b002      	add	sp, #8
   ba230:	bd10      	pop	{r4, pc}
        return false;
   ba232:	2000      	movs	r0, #0
   ba234:	e7fb      	b.n	ba22e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   ba236:	bf00      	nop
   ba238:	000c0ce8 	.word	0x000c0ce8

000ba23c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   ba23c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   ba23e:	0a0a      	lsrs	r2, r1, #8
{
   ba240:	4605      	mov	r5, r0
   ba242:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   ba244:	2120      	movs	r1, #32
   ba246:	f7ff fd00 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   ba24a:	b2e2      	uxtb	r2, r4
   ba24c:	4628      	mov	r0, r5
   ba24e:	2121      	movs	r1, #33	; 0x21
}
   ba250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   ba254:	f7ff bcf9 	b.w	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>

000ba258 <_ZN7RH_RF954initEv>:
{
   ba258:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba25a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   ba25c:	f7ff fca4 	bl	b9ba8 <_ZN11RHSPIDriver4initEv>
   ba260:	4606      	mov	r6, r0
   ba262:	b918      	cbnz	r0, ba26c <_ZN7RH_RF954initEv+0x14>
	return false;
   ba264:	2600      	movs	r6, #0
}
   ba266:	4630      	mov	r0, r6
   ba268:	b002      	add	sp, #8
   ba26a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   ba26c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   ba270:	2dff      	cmp	r5, #255	; 0xff
   ba272:	d054      	beq.n	ba31e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   ba274:	4629      	mov	r1, r5
   ba276:	4620      	mov	r0, r4
   ba278:	f7ff fd5d 	bl	b9d36 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   ba27c:	2280      	movs	r2, #128	; 0x80
   ba27e:	2101      	movs	r1, #1
   ba280:	4620      	mov	r0, r4
   ba282:	f7ff fce2 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   ba286:	200a      	movs	r0, #10
   ba288:	f001 f9c6 	bl	bb618 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   ba28c:	2101      	movs	r1, #1
   ba28e:	4620      	mov	r0, r4
   ba290:	f7ff fcba 	bl	b9c08 <_ZN11RHSPIDriver7spiReadEh>
   ba294:	2880      	cmp	r0, #128	; 0x80
   ba296:	d1e5      	bne.n	ba264 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   ba298:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   ba29c:	28ff      	cmp	r0, #255	; 0xff
   ba29e:	d01c      	beq.n	ba2da <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   ba2a0:	2100      	movs	r1, #0
   ba2a2:	f004 fa41 	bl	be728 <pinMode>
	if (_myInterruptIndex == 0xff)
   ba2a6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   ba2aa:	2bff      	cmp	r3, #255	; 0xff
   ba2ac:	d107      	bne.n	ba2be <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   ba2ae:	4a26      	ldr	r2, [pc, #152]	; (ba348 <_ZN7RH_RF954initEv+0xf0>)
   ba2b0:	7813      	ldrb	r3, [r2, #0]
   ba2b2:	2b03      	cmp	r3, #3
   ba2b4:	d8d6      	bhi.n	ba264 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   ba2b6:	1c59      	adds	r1, r3, #1
   ba2b8:	7011      	strb	r1, [r2, #0]
   ba2ba:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   ba2be:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   ba2c2:	4b22      	ldr	r3, [pc, #136]	; (ba34c <_ZN7RH_RF954initEv+0xf4>)
   ba2c4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   ba2c8:	bb62      	cbnz	r2, ba324 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   ba2ca:	4921      	ldr	r1, [pc, #132]	; (ba350 <_ZN7RH_RF954initEv+0xf8>)
   ba2cc:	9200      	str	r2, [sp, #0]
   ba2ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba2d2:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   ba2d4:	b2a8      	uxth	r0, r5
   ba2d6:	f001 ff15 	bl	bc104 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   ba2da:	2200      	movs	r2, #0
   ba2dc:	210e      	movs	r1, #14
   ba2de:	4620      	mov	r0, r4
   ba2e0:	f7ff fcb3 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   ba2e4:	2200      	movs	r2, #0
   ba2e6:	210f      	movs	r1, #15
   ba2e8:	4620      	mov	r0, r4
   ba2ea:	f7ff fcae 	bl	b9c4a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   ba2ee:	4620      	mov	r0, r4
   ba2f0:	f7ff fe28 	bl	b9f44 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   ba2f4:	2100      	movs	r1, #0
   ba2f6:	4620      	mov	r0, r4
   ba2f8:	f7ff ff88 	bl	ba20c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   ba2fc:	2108      	movs	r1, #8
   ba2fe:	4620      	mov	r0, r4
   ba300:	f7ff ff9c 	bl	ba23c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   ba304:	ed9f 0a13 	vldr	s0, [pc, #76]	; ba354 <_ZN7RH_RF954initEv+0xfc>
   ba308:	4620      	mov	r0, r4
   ba30a:	f7ff fdd9 	bl	b9ec0 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   ba30e:	2300      	movs	r3, #0
   ba310:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   ba314:	210d      	movs	r1, #13
   ba316:	4620      	mov	r0, r4
   ba318:	f7ff fd6e 	bl	b9df8 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   ba31c:	e7a3      	b.n	ba266 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   ba31e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   ba322:	e7ab      	b.n	ba27c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   ba324:	2a01      	cmp	r2, #1
   ba326:	f04f 0300 	mov.w	r3, #0
   ba32a:	d104      	bne.n	ba336 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   ba32c:	9300      	str	r3, [sp, #0]
   ba32e:	490a      	ldr	r1, [pc, #40]	; (ba358 <_ZN7RH_RF954initEv+0x100>)
   ba330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba334:	e7ce      	b.n	ba2d4 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   ba336:	2a02      	cmp	r2, #2
   ba338:	d194      	bne.n	ba264 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   ba33a:	9300      	str	r3, [sp, #0]
   ba33c:	4907      	ldr	r1, [pc, #28]	; (ba35c <_ZN7RH_RF954initEv+0x104>)
   ba33e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba342:	2201      	movs	r2, #1
   ba344:	e7c6      	b.n	ba2d4 <_ZN7RH_RF954initEv+0x7c>
   ba346:	bf00      	nop
   ba348:	2003e569 	.word	0x2003e569
   ba34c:	2003e56c 	.word	0x2003e56c
   ba350:	000ba091 	.word	0x000ba091
   ba354:	43d90000 	.word	0x43d90000
   ba358:	000ba0a1 	.word	0x000ba0a1
   ba35c:	000ba0b1 	.word	0x000ba0b1

000ba360 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   ba360:	2001      	movs	r0, #1
   ba362:	4770      	bx	lr

000ba364 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   ba364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba366:	4d1f      	ldr	r5, [pc, #124]	; (ba3e4 <_ZN14SequentialFileC1Ev+0x80>)
   ba368:	4b1f      	ldr	r3, [pc, #124]	; (ba3e8 <_ZN14SequentialFileC1Ev+0x84>)
   ba36a:	4604      	mov	r4, r0
   ba36c:	4629      	mov	r1, r5
   ba36e:	f840 3b04 	str.w	r3, [r0], #4
   ba372:	f003 fc86 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   ba376:	491d      	ldr	r1, [pc, #116]	; (ba3ec <_ZN14SequentialFileC1Ev+0x88>)
   ba378:	f104 0014 	add.w	r0, r4, #20
   ba37c:	f003 fc81 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   ba380:	4629      	mov	r1, r5
   ba382:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba386:	f003 fc7c 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   ba38a:	2300      	movs	r3, #0
   ba38c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba390:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   ba394:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   ba398:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   ba39c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   ba3a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba3a4:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba3a6:	2308      	movs	r3, #8
   ba3a8:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba3aa:	2020      	movs	r0, #32
   ba3ac:	f7f9 fe73 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba3b0:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba3b2:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba3b4:	3d01      	subs	r5, #1
   ba3b6:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba3b8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   ba3bc:	4606      	mov	r6, r0
   ba3be:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba3c2:	f7f9 fe68 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba3c6:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba3ca:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   ba3ce:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   ba3d2:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba3d4:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba3d6:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   ba3d8:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba3da:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   ba3dc:	6667      	str	r7, [r4, #100]	; 0x64

}
   ba3de:	4620      	mov	r0, r4
   ba3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba3e2:	bf00      	nop
   ba3e4:	000c10a4 	.word	0x000c10a4
   ba3e8:	000c0e84 	.word	0x000c0e84
   ba3ec:	000c0d84 	.word	0x000c0d84

000ba3f0 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   ba3f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   ba3f2:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   ba3f4:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   ba3f6:	4628      	mov	r0, r5
   ba3f8:	f003 fca1 	bl	bdd3e <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   ba3fc:	490e      	ldr	r1, [pc, #56]	; (ba438 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   ba3fe:	4668      	mov	r0, sp
   ba400:	f003 fc3f 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   ba404:	4669      	mov	r1, sp
   ba406:	4628      	mov	r0, r5
   ba408:	f003 fd06 	bl	bde18 <_ZNK6String8endsWithERKS_>
   ba40c:	4606      	mov	r6, r0
   ba40e:	4668      	mov	r0, sp
   ba410:	f003 fbec 	bl	bdbec <_ZN6StringD1Ev>
   ba414:	b16e      	cbz	r6, ba432 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   ba416:	68e3      	ldr	r3, [r4, #12]
   ba418:	2200      	movs	r2, #0
   ba41a:	3b01      	subs	r3, #1
   ba41c:	4629      	mov	r1, r5
   ba41e:	4668      	mov	r0, sp
   ba420:	f003 fd10 	bl	bde44 <_ZNK6String9substringEjj>
   ba424:	4669      	mov	r1, sp
   ba426:	4628      	mov	r0, r5
   ba428:	f003 fc81 	bl	bdd2e <_ZN6StringaSEOS_>
   ba42c:	4668      	mov	r0, sp
   ba42e:	f003 fbdd 	bl	bdbec <_ZN6StringD1Ev>
    }
    return *this; 
};
   ba432:	4620      	mov	r0, r4
   ba434:	b004      	add	sp, #16
   ba436:	bd70      	pop	{r4, r5, r6, pc}
   ba438:	000c0d89 	.word	0x000c0d89

000ba43c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   ba43c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   ba43e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   ba440:	4604      	mov	r4, r0
    if (!queueMutex) {
   ba442:	b913      	cbnz	r3, ba44a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   ba444:	303c      	adds	r0, #60	; 0x3c
   ba446:	f000 fc63 	bl	bad10 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   ba44a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   ba44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   ba450:	f000 bc66 	b.w	bad20 <os_mutex_lock>

000ba454 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   ba454:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   ba456:	f000 bc6b 	b.w	bad30 <os_mutex_unlock>
	...

000ba45c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   ba45c:	b510      	push	{r4, lr}
   ba45e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   ba460:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   ba462:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   ba464:	f000 fe1c 	bl	bb0a0 <stat>
    if (result == 0) {
   ba468:	b9d0      	cbnz	r0, ba4a0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   ba46a:	9b01      	ldr	r3, [sp, #4]
   ba46c:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   ba46e:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   ba470:	d506      	bpl.n	ba480 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   ba472:	4915      	ldr	r1, [pc, #84]	; (ba4c8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   ba474:	4815      	ldr	r0, [pc, #84]	; (ba4cc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba476:	f7f9 fe31 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        return true;
   ba47a:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   ba47c:	b016      	add	sp, #88	; 0x58
   ba47e:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   ba480:	4812      	ldr	r0, [pc, #72]	; (ba4cc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba482:	4913      	ldr	r1, [pc, #76]	; (ba4d0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   ba484:	f7fc fa7e 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   ba488:	4620      	mov	r0, r4
   ba48a:	f005 f981 	bl	bf790 <unlink>
    result = mkdir(path, 0777);
   ba48e:	f240 11ff 	movw	r1, #511	; 0x1ff
   ba492:	4620      	mov	r0, r4
   ba494:	f000 fe0c 	bl	bb0b0 <mkdir>
    if (result == 0) {
   ba498:	b980      	cbnz	r0, ba4bc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   ba49a:	490e      	ldr	r1, [pc, #56]	; (ba4d4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   ba49c:	4622      	mov	r2, r4
   ba49e:	e7e9      	b.n	ba474 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   ba4a0:	f001 f882 	bl	bb5a8 <__errno>
   ba4a4:	6803      	ldr	r3, [r0, #0]
   ba4a6:	2b02      	cmp	r3, #2
   ba4a8:	d0f1      	beq.n	ba48e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   ba4aa:	f001 f87d 	bl	bb5a8 <__errno>
   ba4ae:	490a      	ldr	r1, [pc, #40]	; (ba4d8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   ba4b0:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   ba4b2:	4806      	ldr	r0, [pc, #24]	; (ba4cc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba4b4:	f7fc fa66 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba4b8:	2000      	movs	r0, #0
   ba4ba:	e7df      	b.n	ba47c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   ba4bc:	f001 f874 	bl	bb5a8 <__errno>
   ba4c0:	4906      	ldr	r1, [pc, #24]	; (ba4dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   ba4c2:	6802      	ldr	r2, [r0, #0]
   ba4c4:	e7f5      	b.n	ba4b2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   ba4c6:	bf00      	nop
   ba4c8:	000c0d96 	.word	0x000c0d96
   ba4cc:	2003e578 	.word	0x2003e578
   ba4d0:	000c0db3 	.word	0x000c0db3
   ba4d4:	000c0de4 	.word	0x000c0de4
   ba4d8:	000c0dd0 	.word	0x000c0dd0
   ba4dc:	000c0df3 	.word	0x000c0df3

000ba4e0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   ba4e0:	b538      	push	{r3, r4, r5, lr}
   ba4e2:	4615      	mov	r5, r2
   ba4e4:	4604      	mov	r4, r0
    String result = name;
   ba4e6:	f003 fbcc 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   ba4ea:	b14d      	cbz	r5, ba500 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   ba4ec:	782b      	ldrb	r3, [r5, #0]
   ba4ee:	b13b      	cbz	r3, ba500 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   ba4f0:	4904      	ldr	r1, [pc, #16]	; (ba504 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   ba4f2:	4620      	mov	r0, r4
   ba4f4:	f003 fc4c 	bl	bdd90 <_ZN6String6concatEPKc>
   ba4f8:	4629      	mov	r1, r5
   ba4fa:	4620      	mov	r0, r4
   ba4fc:	f003 fc48 	bl	bdd90 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   ba500:	4620      	mov	r0, r4
   ba502:	bd38      	pop	{r3, r4, r5, pc}
   ba504:	000c11ac 	.word	0x000c11ac

000ba508 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   ba508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba50a:	4605      	mov	r5, r0
   ba50c:	460e      	mov	r6, r1
   ba50e:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   ba510:	6949      	ldr	r1, [r1, #20]
   ba512:	4668      	mov	r0, sp
   ba514:	f003 fcb6 	bl	bde84 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   ba518:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   ba51a:	b904      	cbnz	r4, ba51e <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   ba51c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba51e:	4622      	mov	r2, r4
   ba520:	4628      	mov	r0, r5
   ba522:	f7ff ffdd 	bl	ba4e0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   ba526:	4668      	mov	r0, sp
   ba528:	f003 fb60 	bl	bdbec <_ZN6StringD1Ev>
}
   ba52c:	4628      	mov	r0, r5
   ba52e:	b004      	add	sp, #16
   ba530:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba534 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   ba534:	b570      	push	{r4, r5, r6, lr}
   ba536:	460c      	mov	r4, r1
   ba538:	b08e      	sub	sp, #56	; 0x38
    String result;
   ba53a:	491a      	ldr	r1, [pc, #104]	; (ba5a4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   ba53c:	e9cd 3200 	strd	r3, r2, [sp]
   ba540:	4605      	mov	r5, r0
    String result;
   ba542:	f003 fb9e 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   ba546:	68e0      	ldr	r0, [r4, #12]
   ba548:	69e1      	ldr	r1, [r4, #28]
   ba54a:	4401      	add	r1, r0
   ba54c:	3104      	adds	r1, #4
   ba54e:	4628      	mov	r0, r5
   ba550:	f003 fb6a 	bl	bdc28 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   ba554:	1d21      	adds	r1, r4, #4
   ba556:	a806      	add	r0, sp, #24
   ba558:	f003 fbde 	bl	bdd18 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   ba55c:	4912      	ldr	r1, [pc, #72]	; (ba5a8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   ba55e:	a802      	add	r0, sp, #8
   ba560:	f003 fb8f 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   ba564:	a902      	add	r1, sp, #8
   ba566:	a806      	add	r0, sp, #24
   ba568:	f003 fc23 	bl	bddb2 <_ZplRK15StringSumHelperRK6String>
   ba56c:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba570:	4606      	mov	r6, r0
   ba572:	4621      	mov	r1, r4
   ba574:	a80a      	add	r0, sp, #40	; 0x28
   ba576:	f7ff ffc7 	bl	ba508 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   ba57a:	a90a      	add	r1, sp, #40	; 0x28
   ba57c:	4630      	mov	r0, r6
   ba57e:	f003 fc18 	bl	bddb2 <_ZplRK15StringSumHelperRK6String>
   ba582:	4601      	mov	r1, r0
   ba584:	4628      	mov	r0, r5
   ba586:	f003 fbb8 	bl	bdcfa <_ZN6StringaSERKS_>
   ba58a:	a80a      	add	r0, sp, #40	; 0x28
   ba58c:	f003 fb2e 	bl	bdbec <_ZN6StringD1Ev>
   ba590:	a802      	add	r0, sp, #8
   ba592:	f003 fb2b 	bl	bdbec <_ZN6StringD1Ev>
class StringSumHelper : public String
   ba596:	a806      	add	r0, sp, #24
   ba598:	f003 fb28 	bl	bdbec <_ZN6StringD1Ev>
}
   ba59c:	4628      	mov	r0, r5
   ba59e:	b00e      	add	sp, #56	; 0x38
   ba5a0:	bd70      	pop	{r4, r5, r6, pc}
   ba5a2:	bf00      	nop
   ba5a4:	000c10a4 	.word	0x000c10a4
   ba5a8:	000c0d89 	.word	0x000c0d89

000ba5ac <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   ba5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   ba5b0:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   ba5b2:	b08e      	sub	sp, #56	; 0x38
   ba5b4:	4605      	mov	r5, r0
   ba5b6:	460f      	mov	r7, r1
    if (allExtensions) {
   ba5b8:	2a00      	cmp	r2, #0
   ba5ba:	d04a      	beq.n	ba652 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   ba5bc:	6840      	ldr	r0, [r0, #4]
   ba5be:	f000 fd87 	bl	bb0d0 <opendir>
        if (dir) {
   ba5c2:	4606      	mov	r6, r0
   ba5c4:	2800      	cmp	r0, #0
   ba5c6:	d054      	beq.n	ba672 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   ba5c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; ba680 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   ba5cc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; ba67c <_ZN14SequentialFile13removeFileNumEib+0xd0>
   ba5d0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; ba678 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   ba5d4:	4630      	mov	r0, r6
   ba5d6:	f000 fd83 	bl	bb0e0 <readdir>
                if (!ent) {
   ba5da:	2800      	cmp	r0, #0
   ba5dc:	d033      	beq.n	ba646 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   ba5de:	7a82      	ldrb	r2, [r0, #10]
   ba5e0:	2a08      	cmp	r2, #8
   ba5e2:	d1f7      	bne.n	ba5d4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   ba5e4:	f100 040b 	add.w	r4, r0, #11
   ba5e8:	6969      	ldr	r1, [r5, #20]
   ba5ea:	aa01      	add	r2, sp, #4
   ba5ec:	4620      	mov	r0, r4
   ba5ee:	f000 ffb3 	bl	bb558 <sscanf>
   ba5f2:	2801      	cmp	r0, #1
   ba5f4:	d1ee      	bne.n	ba5d4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   ba5f6:	9b01      	ldr	r3, [sp, #4]
   ba5f8:	42bb      	cmp	r3, r7
   ba5fa:	d1eb      	bne.n	ba5d4 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   ba5fc:	1d29      	adds	r1, r5, #4
   ba5fe:	a80a      	add	r0, sp, #40	; 0x28
   ba600:	f003 fb8a 	bl	bdd18 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   ba604:	4651      	mov	r1, sl
   ba606:	a806      	add	r0, sp, #24
   ba608:	f003 fb3b 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   ba60c:	a906      	add	r1, sp, #24
   ba60e:	a80a      	add	r0, sp, #40	; 0x28
   ba610:	f003 fbcf 	bl	bddb2 <_ZplRK15StringSumHelperRK6String>
   ba614:	4621      	mov	r1, r4
   ba616:	f003 fbd8 	bl	bddca <_ZplRK15StringSumHelperPKc>
   ba61a:	4601      	mov	r1, r0
   ba61c:	a802      	add	r0, sp, #8
   ba61e:	f003 fb7b 	bl	bdd18 <_ZN6StringC1ERKS_>
   ba622:	a806      	add	r0, sp, #24
   ba624:	f003 fae2 	bl	bdbec <_ZN6StringD1Ev>
class StringSumHelper : public String
   ba628:	a80a      	add	r0, sp, #40	; 0x28
   ba62a:	f003 fadf 	bl	bdbec <_ZN6StringD1Ev>
                        unlink(path);
   ba62e:	9802      	ldr	r0, [sp, #8]
   ba630:	f005 f8ae 	bl	bf790 <unlink>
                        _log.trace("removed %s", path.c_str());
   ba634:	4640      	mov	r0, r8
   ba636:	9a02      	ldr	r2, [sp, #8]
   ba638:	4649      	mov	r1, r9
   ba63a:	f7fc f9b1 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   ba63e:	a802      	add	r0, sp, #8
   ba640:	f003 fad4 	bl	bdbec <_ZN6StringD1Ev>
                    continue;
   ba644:	e7c6      	b.n	ba5d4 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   ba646:	4630      	mov	r0, r6
}
   ba648:	b00e      	add	sp, #56	; 0x38
   ba64a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   ba64e:	f000 bd4f 	b.w	bb0f0 <closedir>
        String path = getPathForFileNum(fileNum); 
   ba652:	460a      	mov	r2, r1
   ba654:	4601      	mov	r1, r0
   ba656:	a80a      	add	r0, sp, #40	; 0x28
   ba658:	f7ff ff6c 	bl	ba534 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   ba65c:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba65e:	f005 f897 	bl	bf790 <unlink>
        _log.trace("removed %s", path.c_str());
   ba662:	4805      	ldr	r0, [pc, #20]	; (ba678 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   ba664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   ba666:	4905      	ldr	r1, [pc, #20]	; (ba67c <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   ba668:	f7fc f99a 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   ba66c:	a80a      	add	r0, sp, #40	; 0x28
   ba66e:	f003 fabd 	bl	bdbec <_ZN6StringD1Ev>
}
   ba672:	b00e      	add	sp, #56	; 0x38
   ba674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba678:	2003e578 	.word	0x2003e578
   ba67c:	000c0d8b 	.word	0x000c0d8b
   ba680:	000c0d89 	.word	0x000c0d89

000ba684 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba684:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba686:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba688:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba68a:	b183      	cbz	r3, ba6ae <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba68c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba68e:	6945      	ldr	r5, [r0, #20]
   ba690:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba692:	42ae      	cmp	r6, r5
   ba694:	d906      	bls.n	ba6a4 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   ba696:	f855 0b04 	ldr.w	r0, [r5], #4
   ba69a:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba69e:	f7f9 fcfe 	bl	b409e <_ZdlPvj>
   ba6a2:	e7f6      	b.n	ba692 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   ba6a4:	6861      	ldr	r1, [r4, #4]
   ba6a6:	6820      	ldr	r0, [r4, #0]
   ba6a8:	0089      	lsls	r1, r1, #2
   ba6aa:	f7f9 fcf8 	bl	b409e <_ZdlPvj>
    }
   ba6ae:	4620      	mov	r0, r4
   ba6b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba6b4 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   ba6b4:	b510      	push	{r4, lr}
   ba6b6:	4b09      	ldr	r3, [pc, #36]	; (ba6dc <_ZN14SequentialFileD1Ev+0x28>)
   ba6b8:	4604      	mov	r4, r0
   ba6ba:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   ba6be:	f7ff ffe1 	bl	ba684 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   ba6c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba6c6:	f003 fa91 	bl	bdbec <_ZN6StringD1Ev>
   ba6ca:	f104 0014 	add.w	r0, r4, #20
   ba6ce:	f003 fa8d 	bl	bdbec <_ZN6StringD1Ev>
   ba6d2:	1d20      	adds	r0, r4, #4
   ba6d4:	f003 fa8a 	bl	bdbec <_ZN6StringD1Ev>
}
   ba6d8:	4620      	mov	r0, r4
   ba6da:	bd10      	pop	{r4, pc}
   ba6dc:	000c0e84 	.word	0x000c0e84

000ba6e0 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   ba6e0:	b510      	push	{r4, lr}
   ba6e2:	4604      	mov	r4, r0
}
   ba6e4:	f7ff ffe6 	bl	ba6b4 <_ZN14SequentialFileD1Ev>
   ba6e8:	4620      	mov	r0, r4
   ba6ea:	2168      	movs	r1, #104	; 0x68
   ba6ec:	f7f9 fcd7 	bl	b409e <_ZdlPvj>
   ba6f0:	4620      	mov	r0, r4
   ba6f2:	bd10      	pop	{r4, pc}

000ba6f4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba6f4:	68c3      	ldr	r3, [r0, #12]
   ba6f6:	68ca      	ldr	r2, [r1, #12]
   ba6f8:	1a9b      	subs	r3, r3, r2
   ba6fa:	109b      	asrs	r3, r3, #2
   ba6fc:	1e5a      	subs	r2, r3, #1
   ba6fe:	e9d0 3000 	ldrd	r3, r0, [r0]
   ba702:	1a1b      	subs	r3, r3, r0
   ba704:	109b      	asrs	r3, r3, #2
   ba706:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba70a:	6888      	ldr	r0, [r1, #8]
   ba70c:	680a      	ldr	r2, [r1, #0]
   ba70e:	1a80      	subs	r0, r0, r2
      }
   ba710:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba714:	4770      	bx	lr
	...

000ba718 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   ba718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   ba71c:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   ba71e:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   ba720:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   ba722:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   ba724:	4604      	mov	r4, r0
   ba726:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   ba728:	d007      	beq.n	ba73a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba72a:	b10b      	cbz	r3, ba730 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   ba72c:	680a      	ldr	r2, [r1, #0]
   ba72e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba730:	69a3      	ldr	r3, [r4, #24]
   ba732:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba734:	61a3      	str	r3, [r4, #24]
      }
   ba736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba73a:	f100 0108 	add.w	r1, r0, #8
   ba73e:	3018      	adds	r0, #24
   ba740:	f7ff ffd8 	bl	ba6f4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   ba744:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba748:	4298      	cmp	r0, r3
   ba74a:	d102      	bne.n	ba752 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   ba74c:	4838      	ldr	r0, [pc, #224]	; (ba830 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   ba74e:	f004 f8fc 	bl	be94a <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba752:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba754:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba756:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba758:	1a11      	subs	r1, r2, r0
   ba75a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba75e:	2901      	cmp	r1, #1
   ba760:	d825      	bhi.n	ba7ae <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba762:	6961      	ldr	r1, [r4, #20]
   ba764:	eba2 0801 	sub.w	r8, r2, r1
   ba768:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba76c:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba76e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   ba772:	d936      	bls.n	ba7e2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   ba774:	1b5d      	subs	r5, r3, r5
   ba776:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba778:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   ba77c:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba77e:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   ba780:	eba3 0201 	sub.w	r2, r3, r1
   ba784:	d926      	bls.n	ba7d4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   ba786:	428b      	cmp	r3, r1
   ba788:	d002      	beq.n	ba790 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba78a:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba78c:	f004 fdf8 	bl	bf380 <memmove>
	_M_node = __new_node;
   ba790:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   ba792:	682b      	ldr	r3, [r5, #0]
   ba794:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba796:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba79a:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba79c:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   ba7a0:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba7a2:	f855 3008 	ldr.w	r3, [r5, r8]
   ba7a6:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba7a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba7ac:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba7ae:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba7b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   ba7b4:	f7f9 fc6f 	bl	b4096 <_Znwj>
   ba7b8:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba7ba:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba7bc:	b10b      	cbz	r3, ba7c2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   ba7be:	683a      	ldr	r2, [r7, #0]
   ba7c0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba7c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba7c4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba7c6:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba7c8:	685b      	ldr	r3, [r3, #4]
   ba7ca:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba7cc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba7d0:	6222      	str	r2, [r4, #32]
   ba7d2:	e7af      	b.n	ba734 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   ba7d4:	428b      	cmp	r3, r1
   ba7d6:	d0db      	beq.n	ba790 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba7d8:	f108 0004 	add.w	r0, r8, #4
   ba7dc:	1a80      	subs	r0, r0, r2
   ba7de:	4428      	add	r0, r5
   ba7e0:	e7d4      	b.n	ba78c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba7e2:	f103 0902 	add.w	r9, r3, #2
   ba7e6:	2b01      	cmp	r3, #1
   ba7e8:	bf2c      	ite	cs
   ba7ea:	4499      	addcs	r9, r3
   ba7ec:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   ba7f0:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   ba7f4:	d301      	bcc.n	ba7fa <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   ba7f6:	f004 f8a5 	bl	be944 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba7fa:	ea4f 0089 	mov.w	r0, r9, lsl #2
   ba7fe:	f7f9 fc4a 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   ba802:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba804:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba806:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   ba80a:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba80c:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   ba80e:	4291      	cmp	r1, r2
   ba810:	4682      	mov	sl, r0
   ba812:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   ba816:	d003      	beq.n	ba820 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba818:	1a52      	subs	r2, r2, r1
   ba81a:	4628      	mov	r0, r5
   ba81c:	f004 fdb0 	bl	bf380 <memmove>
	::operator delete(__p
   ba820:	6861      	ldr	r1, [r4, #4]
   ba822:	6820      	ldr	r0, [r4, #0]
   ba824:	0089      	lsls	r1, r1, #2
   ba826:	f7f9 fc3a 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba82a:	e9c4 a900 	strd	sl, r9, [r4]
   ba82e:	e7af      	b.n	ba790 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   ba830:	000c0a0d 	.word	0x000c0a0d

000ba834 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   ba834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   ba838:	68c3      	ldr	r3, [r0, #12]
   ba83a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   ba83c:	b086      	sub	sp, #24
   ba83e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   ba840:	d808      	bhi.n	ba854 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   ba842:	4934      	ldr	r1, [pc, #208]	; (ba914 <_ZN14SequentialFile7scanDirEv+0xe0>)
   ba844:	4834      	ldr	r0, [pc, #208]	; (ba918 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba846:	f7fc f89d 	bl	b6984 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba84a:	2600      	movs	r6, #0
}
   ba84c:	4630      	mov	r0, r6
   ba84e:	b006      	add	sp, #24
   ba850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   ba854:	6840      	ldr	r0, [r0, #4]
   ba856:	f7ff fe01 	bl	ba45c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   ba85a:	4606      	mov	r6, r0
   ba85c:	2800      	cmp	r0, #0
   ba85e:	d0f4      	beq.n	ba84a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   ba860:	6963      	ldr	r3, [r4, #20]
   ba862:	6862      	ldr	r2, [r4, #4]
   ba864:	492d      	ldr	r1, [pc, #180]	; (ba91c <_ZN14SequentialFile7scanDirEv+0xe8>)
   ba866:	482c      	ldr	r0, [pc, #176]	; (ba918 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba868:	f7fc f89a 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   ba86c:	6860      	ldr	r0, [r4, #4]
   ba86e:	f000 fc2f 	bl	bb0d0 <opendir>
    if (!dir) {
   ba872:	4607      	mov	r7, r0
   ba874:	2800      	cmp	r0, #0
   ba876:	d0e8      	beq.n	ba84a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   ba878:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba87a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba920 <_ZN14SequentialFile7scanDirEv+0xec>
   ba87e:	f8df 8098 	ldr.w	r8, [pc, #152]	; ba918 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   ba882:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   ba884:	4638      	mov	r0, r7
   ba886:	f000 fc2b 	bl	bb0e0 <readdir>
        if (!ent) {
   ba88a:	4605      	mov	r5, r0
   ba88c:	2800      	cmp	r0, #0
   ba88e:	d039      	beq.n	ba904 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   ba890:	7a83      	ldrb	r3, [r0, #10]
   ba892:	2b08      	cmp	r3, #8
   ba894:	d1f6      	bne.n	ba884 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   ba896:	350b      	adds	r5, #11
   ba898:	6961      	ldr	r1, [r4, #20]
   ba89a:	aa01      	add	r2, sp, #4
   ba89c:	4628      	mov	r0, r5
   ba89e:	f000 fe5b 	bl	bb558 <sscanf>
   ba8a2:	2801      	cmp	r0, #1
   ba8a4:	d1ee      	bne.n	ba884 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   ba8a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba8a8:	b17b      	cbz	r3, ba8ca <_ZN14SequentialFile7scanDirEv+0x96>
   ba8aa:	4629      	mov	r1, r5
   ba8ac:	a802      	add	r0, sp, #8
   ba8ae:	f003 f9e8 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
   ba8b2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   ba8b6:	a802      	add	r0, sp, #8
   ba8b8:	f003 faae 	bl	bde18 <_ZNK6String8endsWithERKS_>
   ba8bc:	4682      	mov	sl, r0
   ba8be:	a802      	add	r0, sp, #8
   ba8c0:	f003 f994 	bl	bdbec <_ZN6StringD1Ev>
   ba8c4:	f1ba 0f00 	cmp.w	sl, #0
   ba8c8:	d0dc      	beq.n	ba884 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   ba8ca:	6823      	ldr	r3, [r4, #0]
   ba8cc:	4629      	mov	r1, r5
   ba8ce:	689b      	ldr	r3, [r3, #8]
   ba8d0:	4620      	mov	r0, r4
   ba8d2:	4798      	blx	r3
   ba8d4:	2800      	cmp	r0, #0
   ba8d6:	d0d5      	beq.n	ba884 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   ba8d8:	9a01      	ldr	r2, [sp, #4]
   ba8da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba8dc:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   ba8de:	bfb8      	it	lt
   ba8e0:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba8e2:	462b      	mov	r3, r5
   ba8e4:	4649      	mov	r1, r9
   ba8e6:	4640      	mov	r0, r8
   ba8e8:	f7fc f85a 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   ba8ec:	4620      	mov	r0, r4
   ba8ee:	f7ff fda5 	bl	ba43c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   ba8f2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba8f6:	a901      	add	r1, sp, #4
   ba8f8:	f7ff ff0e 	bl	ba718 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   ba8fc:	4620      	mov	r0, r4
   ba8fe:	f7ff fda9 	bl	ba454 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   ba902:	e7bf      	b.n	ba884 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   ba904:	4638      	mov	r0, r7
   ba906:	f000 fbf3 	bl	bb0f0 <closedir>
    scanDirCompleted = true;
   ba90a:	2301      	movs	r3, #1
   ba90c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   ba910:	e79c      	b.n	ba84c <_ZN14SequentialFile7scanDirEv+0x18>
   ba912:	bf00      	nop
   ba914:	000c0e09 	.word	0x000c0e09
   ba918:	2003e578 	.word	0x2003e578
   ba91c:	000c0e1e 	.word	0x000c0e1e
   ba920:	000c0e3a 	.word	0x000c0e3a

000ba924 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   ba924:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   ba926:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   ba92a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba92c:	b90b      	cbnz	r3, ba932 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   ba92e:	f7ff ff81 	bl	ba834 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   ba932:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   ba934:	3001      	adds	r0, #1
   ba936:	63a0      	str	r0, [r4, #56]	; 0x38
}
   ba938:	bd10      	pop	{r4, pc}
	...

000ba93c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   ba93c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   ba93e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   ba942:	4604      	mov	r4, r0
   ba944:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   ba946:	b90b      	cbnz	r3, ba94c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   ba948:	f7ff ff74 	bl	ba834 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   ba94c:	4620      	mov	r0, r4
   ba94e:	f7ff fd75 	bl	ba43c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   ba952:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   ba954:	6da2      	ldr	r2, [r4, #88]	; 0x58
   ba956:	429a      	cmp	r2, r3
   ba958:	d020      	beq.n	ba99c <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   ba95a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   ba95e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   ba960:	b126      	cbz	r6, ba96c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   ba962:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba964:	4293      	cmp	r3, r2
   ba966:	d00c      	beq.n	ba982 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   ba968:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba96a:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   ba96c:	4620      	mov	r0, r4
   ba96e:	f7ff fd71 	bl	ba454 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   ba972:	b125      	cbz	r5, ba97e <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   ba974:	490a      	ldr	r1, [pc, #40]	; (ba9a0 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   ba976:	480b      	ldr	r0, [pc, #44]	; (ba9a4 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   ba978:	462a      	mov	r2, r5
   ba97a:	f7fc f811 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
}
   ba97e:	4628      	mov	r0, r5
   ba980:	bd70      	pop	{r4, r5, r6, pc}
   ba982:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba986:	f7f9 fb8a 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba98a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba98c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba98e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   ba990:	685b      	ldr	r3, [r3, #4]
   ba992:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba994:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba998:	6522      	str	r2, [r4, #80]	; 0x50
   ba99a:	e7e6      	b.n	ba96a <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   ba99c:	2500      	movs	r5, #0
   ba99e:	e7e5      	b.n	ba96c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   ba9a0:	000c0e50 	.word	0x000c0e50
   ba9a4:	2003e578 	.word	0x2003e578

000ba9a8 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   ba9a8:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   ba9aa:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   ba9ae:	9101      	str	r1, [sp, #4]
   ba9b0:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba9b2:	b90b      	cbnz	r3, ba9b8 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   ba9b4:	f7ff ff3e 	bl	ba834 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   ba9b8:	9b01      	ldr	r3, [sp, #4]
   ba9ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba9bc:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   ba9be:	bfb8      	it	lt
   ba9c0:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   ba9c2:	4620      	mov	r0, r4
   ba9c4:	f7ff fd3a 	bl	ba43c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   ba9c8:	a901      	add	r1, sp, #4
   ba9ca:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba9ce:	f7ff fea3 	bl	ba718 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   ba9d2:	4620      	mov	r0, r4
   ba9d4:	f7ff fd3e 	bl	ba454 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba9d8:	b002      	add	sp, #8
   ba9da:	bd10      	pop	{r4, pc}

000ba9dc <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   ba9dc:	b538      	push	{r3, r4, r5, lr}
   ba9de:	4604      	mov	r4, r0
    queueMutexLock();
   ba9e0:	f7ff fd2c 	bl	ba43c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba9e4:	f104 0148 	add.w	r1, r4, #72	; 0x48
   ba9e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   ba9ec:	f7ff fe82 	bl	ba6f4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   ba9f0:	4605      	mov	r5, r0
    queueMutexUnlock();
   ba9f2:	4620      	mov	r0, r4
   ba9f4:	f7ff fd2e 	bl	ba454 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba9f8:	4628      	mov	r0, r5
   ba9fa:	bd38      	pop	{r3, r4, r5, pc}

000ba9fc <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   ba9fc:	4b01      	ldr	r3, [pc, #4]	; (baa04 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   ba9fe:	4a02      	ldr	r2, [pc, #8]	; (baa08 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   baa00:	601a      	str	r2, [r3, #0]
}
   baa02:	4770      	bx	lr
   baa04:	2003e578 	.word	0x2003e578
   baa08:	000c0e6d 	.word	0x000c0e6d

000baa0c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   baa0c:	4770      	bx	lr

000baa0e <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   baa0e:	6803      	ldr	r3, [r0, #0]
   baa10:	685b      	ldr	r3, [r3, #4]
   baa12:	4718      	bx	r3

000baa14 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   baa14:	b510      	push	{r4, lr}
    if (lastUpdate) {
   baa16:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   baa18:	4604      	mov	r4, r0
    if (lastUpdate) {
   baa1a:	b133      	cbz	r3, baa2a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   baa1c:	b131      	cbz	r1, baa2c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   baa1e:	6823      	ldr	r3, [r4, #0]
   baa20:	4620      	mov	r0, r4
   baa22:	689b      	ldr	r3, [r3, #8]
   baa24:	4798      	blx	r3
            lastUpdate = 0;
   baa26:	2300      	movs	r3, #0
   baa28:	61a3      	str	r3, [r4, #24]
        }
    }
}
   baa2a:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   baa2c:	f000 f9d8 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   baa30:	69a3      	ldr	r3, [r4, #24]
   baa32:	1ac0      	subs	r0, r0, r3
   baa34:	69e3      	ldr	r3, [r4, #28]
   baa36:	4298      	cmp	r0, r3
   baa38:	d2f1      	bcs.n	baa1e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   baa3a:	e7f6      	b.n	baa2a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000baa3c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   baa3c:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   baa3e:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   baa40:	4604      	mov	r4, r0
    if (saveDelayMs) {
   baa42:	b11b      	cbz	r3, baa4c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   baa44:	f000 f9cc 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   baa48:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   baa4a:	bd10      	pop	{r4, pc}
        save();
   baa4c:	6803      	ldr	r3, [r0, #0]
}
   baa4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   baa52:	689b      	ldr	r3, [r3, #8]
   baa54:	4718      	bx	r3

000baa56 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   baa56:	f000 b98b 	b.w	bad70 <os_mutex_recursive_unlock>

000baa5a <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   baa5a:	b510      	push	{r4, lr}
   baa5c:	4604      	mov	r4, r0
   baa5e:	3004      	adds	r0, #4
   baa60:	f7fa fe4e 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   baa64:	6823      	ldr	r3, [r4, #0]
   baa66:	68e1      	ldr	r1, [r4, #12]
   baa68:	695b      	ldr	r3, [r3, #20]
   baa6a:	4620      	mov	r0, r4
   baa6c:	4798      	blx	r3
   baa6e:	b918      	cbnz	r0, baa78 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   baa70:	6823      	ldr	r3, [r4, #0]
   baa72:	4620      	mov	r0, r4
   baa74:	699b      	ldr	r3, [r3, #24]
   baa76:	4798      	blx	r3
      { _M_device.unlock(); }
   baa78:	6860      	ldr	r0, [r4, #4]
   baa7a:	f7ff ffec 	bl	baa56 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   baa7e:	2001      	movs	r0, #1
   baa80:	bd10      	pop	{r4, pc}

000baa82 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   baa82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baa84:	4605      	mov	r5, r0
      { _M_device.lock(); }
   baa86:	3004      	adds	r0, #4
   baa88:	4614      	mov	r4, r2
   baa8a:	460e      	mov	r6, r1
   baa8c:	461f      	mov	r7, r3
   baa8e:	f7fa fe37 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   baa92:	68ea      	ldr	r2, [r5, #12]
   baa94:	f1c4 0401 	rsb	r4, r4, #1
   baa98:	4414      	add	r4, r2
   baa9a:	42b4      	cmp	r4, r6
   baa9c:	d30a      	bcc.n	baab4 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   baa9e:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   baaa0:	4638      	mov	r0, r7
   baaa2:	4431      	add	r1, r6
   baaa4:	f003 f94b 	bl	bdd3e <_ZN6StringaSEPKc>
            result = true;
   baaa8:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   baaaa:	6868      	ldr	r0, [r5, #4]
   baaac:	f7ff ffd3 	bl	baa56 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   baab0:	4620      	mov	r0, r4
   baab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   baab4:	2400      	movs	r4, #0
   baab6:	e7f8      	b.n	baaaa <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>

000baab8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   baab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   baaba:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   baabe:	4f18      	ldr	r7, [pc, #96]	; (bab20 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   baac0:	4e18      	ldr	r6, [pc, #96]	; (bab24 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   baac2:	4d19      	ldr	r5, [pc, #100]	; (bab28 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   baac4:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   baac6:	42a0      	cmp	r0, r4
   baac8:	d00c      	beq.n	baae4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   baaca:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   baace:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   baad0:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   baad4:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   baad6:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   baad8:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   baadc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   baae0:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   baae2:	e7f0      	b.n	baac6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   baae4:	f001 0403 	and.w	r4, r1, #3
   baae8:	4404      	add	r4, r0
    k = 0;
   baaea:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   baaec:	42a0      	cmp	r0, r4
   baaee:	d004      	beq.n	baafa <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   baaf0:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   baaf4:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   baaf8:	e7f8      	b.n	baaec <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   baafa:	4809      	ldr	r0, [pc, #36]	; (bab20 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   baafc:	4343      	muls	r3, r0
        k *= 0x1b873593;
   baafe:	4809      	ldr	r0, [pc, #36]	; (bab24 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bab00:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bab04:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bab06:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bab08:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bab0a:	4b08      	ldr	r3, [pc, #32]	; (bab2c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bab0c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bab10:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bab12:	4b07      	ldr	r3, [pc, #28]	; (bab30 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bab14:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bab18:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bab1a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bab1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bab20:	cc9e2d51 	.word	0xcc9e2d51
   bab24:	1b873593 	.word	0x1b873593
   bab28:	e6546b64 	.word	0xe6546b64
   bab2c:	85ebca6b 	.word	0x85ebca6b
   bab30:	c2b2ae35 	.word	0xc2b2ae35

000bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bab36:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bab38:	3004      	adds	r0, #4
   bab3a:	f7fa fde1 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bab3e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bab40:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bab42:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bab44:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bab46:	68a6      	ldr	r6, [r4, #8]
   bab48:	4a05      	ldr	r2, [pc, #20]	; (bab60 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bab4a:	88f1      	ldrh	r1, [r6, #6]
   bab4c:	4630      	mov	r0, r6
   bab4e:	f7ff ffb3 	bl	baab8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bab52:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bab54:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bab56:	6860      	ldr	r0, [r4, #4]
   bab58:	f7ff ff7d 	bl	baa56 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bab5c:	4628      	mov	r0, r5
   bab5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bab60:	851c2a3f 	.word	0x851c2a3f

000bab64 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bab64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bab68:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bab6a:	3004      	adds	r0, #4
   bab6c:	4690      	mov	r8, r2
   bab6e:	460d      	mov	r5, r1
   bab70:	461f      	mov	r7, r3
   bab72:	f7fa fdc5 	bl	b5700 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bab76:	68e2      	ldr	r2, [r4, #12]
   bab78:	f1c8 0301 	rsb	r3, r8, #1
   bab7c:	4413      	add	r3, r2
   bab7e:	42ab      	cmp	r3, r5
   bab80:	d31f      	bcc.n	babc2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   bab82:	4638      	mov	r0, r7
   bab84:	f004 fcd1 	bl	bf52a <strlen>
   bab88:	4540      	cmp	r0, r8
   bab8a:	d21a      	bcs.n	babc2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   bab8c:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bab8e:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bab90:	4629      	mov	r1, r5
   bab92:	4638      	mov	r0, r7
   bab94:	f004 fc99 	bl	bf4ca <strcmp>
   bab98:	b188      	cbz	r0, babbe <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   bab9a:	4642      	mov	r2, r8
   bab9c:	2100      	movs	r1, #0
   bab9e:	4628      	mov	r0, r5
   baba0:	f004 fc08 	bl	bf3b4 <memset>
                strcpy(p, value);
   baba4:	4639      	mov	r1, r7
   baba6:	4628      	mov	r0, r5
   baba8:	f004 fc99 	bl	bf4de <strcpy>
                savedDataHeader->hash = getHash();
   babac:	4620      	mov	r0, r4
   babae:	68a5      	ldr	r5, [r4, #8]
   babb0:	f7ff ffc0 	bl	bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   babb4:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   babb6:	6823      	ldr	r3, [r4, #0]
   babb8:	4620      	mov	r0, r4
   babba:	691b      	ldr	r3, [r3, #16]
   babbc:	4798      	blx	r3
            result = true;
   babbe:	2501      	movs	r5, #1
   babc0:	e000      	b.n	babc4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   babc2:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   babc4:	6860      	ldr	r0, [r4, #4]
   babc6:	f7ff ff46 	bl	baa56 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   babca:	4628      	mov	r0, r5
   babcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000babd0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   babd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   babd2:	460d      	mov	r5, r1
   babd4:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   babd6:	f7ff ffad 	bl	bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   babda:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   babdc:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   babde:	d923      	bls.n	bac28 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   babe0:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   babe2:	6922      	ldr	r2, [r4, #16]
   babe4:	6819      	ldr	r1, [r3, #0]
   babe6:	4291      	cmp	r1, r2
   babe8:	d11f      	bne.n	bac2a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   babea:	8899      	ldrh	r1, [r3, #4]
   babec:	8aa2      	ldrh	r2, [r4, #20]
   babee:	4291      	cmp	r1, r2
   babf0:	d11b      	bne.n	bac2a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   babf2:	88d9      	ldrh	r1, [r3, #6]
   babf4:	b2aa      	uxth	r2, r5
   babf6:	4291      	cmp	r1, r2
   babf8:	d817      	bhi.n	bac2a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   babfa:	689a      	ldr	r2, [r3, #8]
   babfc:	4282      	cmp	r2, r0
   babfe:	d114      	bne.n	bac2a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   bac00:	68e2      	ldr	r2, [r4, #12]
   bac02:	42aa      	cmp	r2, r5
   bac04:	d905      	bls.n	bac12 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   bac06:	2100      	movs	r1, #0
   bac08:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bac0a:	68e2      	ldr	r2, [r4, #12]
   bac0c:	3501      	adds	r5, #1
   bac0e:	42aa      	cmp	r2, r5
   bac10:	d8fa      	bhi.n	bac08 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bac12:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bac16:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bac18:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bac1a:	68a5      	ldr	r5, [r4, #8]
   bac1c:	f7ff ff8a 	bl	bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bac20:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bac22:	2001      	movs	r0, #1
}
   bac24:	b002      	add	sp, #8
   bac26:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bac28:	b19d      	cbz	r5, bac52 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   bac2a:	68a1      	ldr	r1, [r4, #8]
   bac2c:	680a      	ldr	r2, [r1, #0]
   bac2e:	b192      	cbz	r2, bac56 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bac30:	6888      	ldr	r0, [r1, #8]
   bac32:	888b      	ldrh	r3, [r1, #4]
   bac34:	9001      	str	r0, [sp, #4]
   bac36:	88c9      	ldrh	r1, [r1, #6]
   bac38:	4808      	ldr	r0, [pc, #32]	; (bac5c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bac3a:	9100      	str	r1, [sp, #0]
   bac3c:	4908      	ldr	r1, [pc, #32]	; (bac60 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   bac3e:	f7fb feaf 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bac42:	e9cd 5600 	strd	r5, r6, [sp]
   bac46:	8aa3      	ldrh	r3, [r4, #20]
   bac48:	6922      	ldr	r2, [r4, #16]
   bac4a:	4906      	ldr	r1, [pc, #24]	; (bac64 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   bac4c:	4803      	ldr	r0, [pc, #12]	; (bac5c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bac4e:	f7fb fea7 	bl	b69a0 <_ZNK5spark6Logger5traceEPKcz>
   bac52:	2000      	movs	r0, #0
   bac54:	e7e6      	b.n	bac24 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bac56:	4610      	mov	r0, r2
   bac58:	e7e4      	b.n	bac24 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bac5a:	bf00      	nop
   bac5c:	2003e654 	.word	0x2003e654
   bac60:	000c0e90 	.word	0x000c0e90
   bac64:	000c0ec1 	.word	0x000c0ec1

000bac68 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bac68:	b538      	push	{r3, r4, r5, lr}
   bac6a:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bac6c:	68c2      	ldr	r2, [r0, #12]
   bac6e:	6880      	ldr	r0, [r0, #8]
   bac70:	2100      	movs	r1, #0
   bac72:	f004 fb9f 	bl	bf3b4 <memset>
    savedDataHeader->magic = savedDataMagic;
   bac76:	68a3      	ldr	r3, [r4, #8]
   bac78:	6922      	ldr	r2, [r4, #16]
   bac7a:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bac7c:	68a3      	ldr	r3, [r4, #8]
   bac7e:	8aa2      	ldrh	r2, [r4, #20]
   bac80:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bac82:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bac86:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bac88:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bac8a:	68a5      	ldr	r5, [r4, #8]
   bac8c:	f7ff ff52 	bl	bab34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bac90:	60a8      	str	r0, [r5, #8]
}
   bac92:	bd38      	pop	{r3, r4, r5, pc}

000bac94 <_Z23setGatewayConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setGatewayConfiguration() {
   bac94:	b508      	push	{r3, lr}
  Log.info("Setting values for the Gateway");
   bac96:	4908      	ldr	r1, [pc, #32]	; (bacb8 <_Z23setGatewayConfigurationv+0x24>)
   bac98:	4808      	ldr	r0, [pc, #32]	; (bacbc <_Z23setGatewayConfigurationv+0x28>)
   bac9a:	f7f9 fa1f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   bac9e:	f7fa fdcb 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   baca2:	2101      	movs	r1, #1
   baca4:	f7fb f846 	bl	b5d34 <_ZN13sysStatusData14set_sensorTypeEb>
  // sysStatus.set_deviceID(32148);
  sysStatus.set_frequencyMinutes(10);
   baca8:	f7fa fdc6 	bl	b5838 <_ZN13sysStatusData8instanceEv>
   bacac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_frequencyMinutes(10);
   bacb0:	210a      	movs	r1, #10
   bacb2:	f7fa bfe7 	b.w	b5c84 <_ZN13sysStatusData20set_frequencyMinutesEt>
   bacb6:	bf00      	nop
   bacb8:	000c0f18 	.word	0x000c0f18
   bacbc:	2003e654 	.word	0x2003e654

000bacc0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bacc0:	b508      	push	{r3, lr}
   bacc2:	4b02      	ldr	r3, [pc, #8]	; (baccc <cellular_signal+0xc>)
   bacc4:	681b      	ldr	r3, [r3, #0]
   bacc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bacc8:	9301      	str	r3, [sp, #4]
   bacca:	bd08      	pop	{r3, pc}
   baccc:	00030274 	.word	0x00030274

000bacd0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bacd0:	b508      	push	{r3, lr}
   bacd2:	4b02      	ldr	r3, [pc, #8]	; (bacdc <os_thread_create+0xc>)
   bacd4:	681b      	ldr	r3, [r3, #0]
   bacd6:	685b      	ldr	r3, [r3, #4]
   bacd8:	9301      	str	r3, [sp, #4]
   bacda:	bd08      	pop	{r3, pc}
   bacdc:	00030248 	.word	0x00030248

000bace0 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bace0:	b508      	push	{r3, lr}
   bace2:	4b02      	ldr	r3, [pc, #8]	; (bacec <os_thread_is_current+0xc>)
   bace4:	681b      	ldr	r3, [r3, #0]
   bace6:	689b      	ldr	r3, [r3, #8]
   bace8:	9301      	str	r3, [sp, #4]
   bacea:	bd08      	pop	{r3, pc}
   bacec:	00030248 	.word	0x00030248

000bacf0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bacf0:	b508      	push	{r3, lr}
   bacf2:	4b02      	ldr	r3, [pc, #8]	; (bacfc <os_thread_join+0xc>)
   bacf4:	681b      	ldr	r3, [r3, #0]
   bacf6:	691b      	ldr	r3, [r3, #16]
   bacf8:	9301      	str	r3, [sp, #4]
   bacfa:	bd08      	pop	{r3, pc}
   bacfc:	00030248 	.word	0x00030248

000bad00 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bad00:	b508      	push	{r3, lr}
   bad02:	4b02      	ldr	r3, [pc, #8]	; (bad0c <os_thread_cleanup+0xc>)
   bad04:	681b      	ldr	r3, [r3, #0]
   bad06:	695b      	ldr	r3, [r3, #20]
   bad08:	9301      	str	r3, [sp, #4]
   bad0a:	bd08      	pop	{r3, pc}
   bad0c:	00030248 	.word	0x00030248

000bad10 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bad10:	b508      	push	{r3, lr}
   bad12:	4b02      	ldr	r3, [pc, #8]	; (bad1c <os_mutex_create+0xc>)
   bad14:	681b      	ldr	r3, [r3, #0]
   bad16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bad18:	9301      	str	r3, [sp, #4]
   bad1a:	bd08      	pop	{r3, pc}
   bad1c:	00030248 	.word	0x00030248

000bad20 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bad20:	b508      	push	{r3, lr}
   bad22:	4b02      	ldr	r3, [pc, #8]	; (bad2c <os_mutex_lock+0xc>)
   bad24:	681b      	ldr	r3, [r3, #0]
   bad26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bad28:	9301      	str	r3, [sp, #4]
   bad2a:	bd08      	pop	{r3, pc}
   bad2c:	00030248 	.word	0x00030248

000bad30 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bad30:	b508      	push	{r3, lr}
   bad32:	4b02      	ldr	r3, [pc, #8]	; (bad3c <os_mutex_unlock+0xc>)
   bad34:	681b      	ldr	r3, [r3, #0]
   bad36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bad38:	9301      	str	r3, [sp, #4]
   bad3a:	bd08      	pop	{r3, pc}
   bad3c:	00030248 	.word	0x00030248

000bad40 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bad40:	b508      	push	{r3, lr}
   bad42:	4b02      	ldr	r3, [pc, #8]	; (bad4c <os_mutex_recursive_create+0xc>)
   bad44:	681b      	ldr	r3, [r3, #0]
   bad46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bad48:	9301      	str	r3, [sp, #4]
   bad4a:	bd08      	pop	{r3, pc}
   bad4c:	00030248 	.word	0x00030248

000bad50 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bad50:	b508      	push	{r3, lr}
   bad52:	4b02      	ldr	r3, [pc, #8]	; (bad5c <os_mutex_recursive_destroy+0xc>)
   bad54:	681b      	ldr	r3, [r3, #0]
   bad56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bad58:	9301      	str	r3, [sp, #4]
   bad5a:	bd08      	pop	{r3, pc}
   bad5c:	00030248 	.word	0x00030248

000bad60 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bad60:	b508      	push	{r3, lr}
   bad62:	4b02      	ldr	r3, [pc, #8]	; (bad6c <os_mutex_recursive_lock+0xc>)
   bad64:	681b      	ldr	r3, [r3, #0]
   bad66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bad68:	9301      	str	r3, [sp, #4]
   bad6a:	bd08      	pop	{r3, pc}
   bad6c:	00030248 	.word	0x00030248

000bad70 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bad70:	b508      	push	{r3, lr}
   bad72:	4b02      	ldr	r3, [pc, #8]	; (bad7c <os_mutex_recursive_unlock+0xc>)
   bad74:	681b      	ldr	r3, [r3, #0]
   bad76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bad78:	9301      	str	r3, [sp, #4]
   bad7a:	bd08      	pop	{r3, pc}
   bad7c:	00030248 	.word	0x00030248

000bad80 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bad80:	b508      	push	{r3, lr}
   bad82:	4b02      	ldr	r3, [pc, #8]	; (bad8c <os_thread_exit+0xc>)
   bad84:	681b      	ldr	r3, [r3, #0]
   bad86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bad88:	9301      	str	r3, [sp, #4]
   bad8a:	bd08      	pop	{r3, pc}
   bad8c:	00030248 	.word	0x00030248

000bad90 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bad90:	b508      	push	{r3, lr}
   bad92:	4b02      	ldr	r3, [pc, #8]	; (bad9c <HAL_Core_Runtime_Info+0xc>)
   bad94:	681b      	ldr	r3, [r3, #0]
   bad96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bad98:	9301      	str	r3, [sp, #4]
   bad9a:	bd08      	pop	{r3, pc}
   bad9c:	00030234 	.word	0x00030234

000bada0 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bada0:	b508      	push	{r3, lr}
   bada2:	4b02      	ldr	r3, [pc, #8]	; (badac <HAL_Feature_Set+0xc>)
   bada4:	681b      	ldr	r3, [r3, #0]
   bada6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bada8:	9301      	str	r3, [sp, #4]
   badaa:	bd08      	pop	{r3, pc}
   badac:	00030234 	.word	0x00030234

000badb0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   badb0:	b508      	push	{r3, lr}
   badb2:	4b02      	ldr	r3, [pc, #8]	; (badbc <HAL_RNG_GetRandomNumber+0xc>)
   badb4:	681b      	ldr	r3, [r3, #0]
   badb6:	685b      	ldr	r3, [r3, #4]
   badb8:	9301      	str	r3, [sp, #4]
   badba:	bd08      	pop	{r3, pc}
   badbc:	00030218 	.word	0x00030218

000badc0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   badc0:	b508      	push	{r3, lr}
   badc2:	4b02      	ldr	r3, [pc, #8]	; (badcc <HAL_Delay_Milliseconds+0xc>)
   badc4:	681b      	ldr	r3, [r3, #0]
   badc6:	689b      	ldr	r3, [r3, #8]
   badc8:	9301      	str	r3, [sp, #4]
   badca:	bd08      	pop	{r3, pc}
   badcc:	00030218 	.word	0x00030218

000badd0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   badd0:	b508      	push	{r3, lr}
   badd2:	4b02      	ldr	r3, [pc, #8]	; (baddc <HAL_Delay_Microseconds+0xc>)
   badd4:	681b      	ldr	r3, [r3, #0]
   badd6:	68db      	ldr	r3, [r3, #12]
   badd8:	9301      	str	r3, [sp, #4]
   badda:	bd08      	pop	{r3, pc}
   baddc:	00030218 	.word	0x00030218

000bade0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bade0:	b508      	push	{r3, lr}
   bade2:	4b02      	ldr	r3, [pc, #8]	; (badec <HAL_Timer_Get_Milli_Seconds+0xc>)
   bade4:	681b      	ldr	r3, [r3, #0]
   bade6:	695b      	ldr	r3, [r3, #20]
   bade8:	9301      	str	r3, [sp, #4]
   badea:	bd08      	pop	{r3, pc}
   badec:	00030218 	.word	0x00030218

000badf0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   badf0:	b508      	push	{r3, lr}
   badf2:	4b02      	ldr	r3, [pc, #8]	; (badfc <hal_rtc_time_is_valid+0xc>)
   badf4:	681b      	ldr	r3, [r3, #0]
   badf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   badf8:	9301      	str	r3, [sp, #4]
   badfa:	bd08      	pop	{r3, pc}
   badfc:	00030218 	.word	0x00030218

000bae00 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bae00:	b508      	push	{r3, lr}
   bae02:	4b02      	ldr	r3, [pc, #8]	; (bae0c <hal_timer_millis+0xc>)
   bae04:	681b      	ldr	r3, [r3, #0]
   bae06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bae08:	9301      	str	r3, [sp, #4]
   bae0a:	bd08      	pop	{r3, pc}
   bae0c:	00030218 	.word	0x00030218

000bae10 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bae10:	b508      	push	{r3, lr}
   bae12:	4b02      	ldr	r3, [pc, #8]	; (bae1c <hal_rtc_get_time+0xc>)
   bae14:	681b      	ldr	r3, [r3, #0]
   bae16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bae18:	9301      	str	r3, [sp, #4]
   bae1a:	bd08      	pop	{r3, pc}
   bae1c:	00030218 	.word	0x00030218

000bae20 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bae20:	b508      	push	{r3, lr}
   bae22:	4b02      	ldr	r3, [pc, #8]	; (bae2c <hal_rtc_set_time+0xc>)
   bae24:	681b      	ldr	r3, [r3, #0]
   bae26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bae28:	9301      	str	r3, [sp, #4]
   bae2a:	bd08      	pop	{r3, pc}
   bae2c:	00030218 	.word	0x00030218

000bae30 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bae30:	b508      	push	{r3, lr}
   bae32:	4b02      	ldr	r3, [pc, #8]	; (bae3c <HAL_Validate_Pin_Function+0xc>)
   bae34:	681b      	ldr	r3, [r3, #0]
   bae36:	685b      	ldr	r3, [r3, #4]
   bae38:	9301      	str	r3, [sp, #4]
   bae3a:	bd08      	pop	{r3, pc}
   bae3c:	0003022c 	.word	0x0003022c

000bae40 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bae40:	b508      	push	{r3, lr}
   bae42:	4b02      	ldr	r3, [pc, #8]	; (bae4c <HAL_Pin_Mode+0xc>)
   bae44:	681b      	ldr	r3, [r3, #0]
   bae46:	689b      	ldr	r3, [r3, #8]
   bae48:	9301      	str	r3, [sp, #4]
   bae4a:	bd08      	pop	{r3, pc}
   bae4c:	0003022c 	.word	0x0003022c

000bae50 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bae50:	b508      	push	{r3, lr}
   bae52:	4b02      	ldr	r3, [pc, #8]	; (bae5c <HAL_Get_Pin_Mode+0xc>)
   bae54:	681b      	ldr	r3, [r3, #0]
   bae56:	68db      	ldr	r3, [r3, #12]
   bae58:	9301      	str	r3, [sp, #4]
   bae5a:	bd08      	pop	{r3, pc}
   bae5c:	0003022c 	.word	0x0003022c

000bae60 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bae60:	b508      	push	{r3, lr}
   bae62:	4b02      	ldr	r3, [pc, #8]	; (bae6c <HAL_GPIO_Write+0xc>)
   bae64:	681b      	ldr	r3, [r3, #0]
   bae66:	691b      	ldr	r3, [r3, #16]
   bae68:	9301      	str	r3, [sp, #4]
   bae6a:	bd08      	pop	{r3, pc}
   bae6c:	0003022c 	.word	0x0003022c

000bae70 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bae70:	b508      	push	{r3, lr}
   bae72:	4b02      	ldr	r3, [pc, #8]	; (bae7c <HAL_GPIO_Read+0xc>)
   bae74:	681b      	ldr	r3, [r3, #0]
   bae76:	695b      	ldr	r3, [r3, #20]
   bae78:	9301      	str	r3, [sp, #4]
   bae7a:	bd08      	pop	{r3, pc}
   bae7c:	0003022c 	.word	0x0003022c

000bae80 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bae80:	b508      	push	{r3, lr}
   bae82:	4b02      	ldr	r3, [pc, #8]	; (bae8c <HAL_Interrupts_Attach+0xc>)
   bae84:	681b      	ldr	r3, [r3, #0]
   bae86:	699b      	ldr	r3, [r3, #24]
   bae88:	9301      	str	r3, [sp, #4]
   bae8a:	bd08      	pop	{r3, pc}
   bae8c:	0003022c 	.word	0x0003022c

000bae90 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bae90:	b508      	push	{r3, lr}
   bae92:	4b02      	ldr	r3, [pc, #8]	; (bae9c <HAL_Interrupts_Detach+0xc>)
   bae94:	681b      	ldr	r3, [r3, #0]
   bae96:	69db      	ldr	r3, [r3, #28]
   bae98:	9301      	str	r3, [sp, #4]
   bae9a:	bd08      	pop	{r3, pc}
   bae9c:	0003022c 	.word	0x0003022c

000baea0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   baea0:	b508      	push	{r3, lr}
   baea2:	4b02      	ldr	r3, [pc, #8]	; (baeac <hal_adc_read+0xc>)
   baea4:	681b      	ldr	r3, [r3, #0]
   baea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   baea8:	9301      	str	r3, [sp, #4]
   baeaa:	bd08      	pop	{r3, pc}
   baeac:	0003022c 	.word	0x0003022c

000baeb0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   baeb0:	b508      	push	{r3, lr}
   baeb2:	4b02      	ldr	r3, [pc, #8]	; (baebc <hal_i2c_begin+0xc>)
   baeb4:	681b      	ldr	r3, [r3, #0]
   baeb6:	68db      	ldr	r3, [r3, #12]
   baeb8:	9301      	str	r3, [sp, #4]
   baeba:	bd08      	pop	{r3, pc}
   baebc:	00030228 	.word	0x00030228

000baec0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   baec0:	b508      	push	{r3, lr}
   baec2:	4b02      	ldr	r3, [pc, #8]	; (baecc <hal_i2c_begin_transmission+0xc>)
   baec4:	681b      	ldr	r3, [r3, #0]
   baec6:	699b      	ldr	r3, [r3, #24]
   baec8:	9301      	str	r3, [sp, #4]
   baeca:	bd08      	pop	{r3, pc}
   baecc:	00030228 	.word	0x00030228

000baed0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   baed0:	b508      	push	{r3, lr}
   baed2:	4b02      	ldr	r3, [pc, #8]	; (baedc <hal_i2c_end_transmission+0xc>)
   baed4:	681b      	ldr	r3, [r3, #0]
   baed6:	69db      	ldr	r3, [r3, #28]
   baed8:	9301      	str	r3, [sp, #4]
   baeda:	bd08      	pop	{r3, pc}
   baedc:	00030228 	.word	0x00030228

000baee0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   baee0:	b508      	push	{r3, lr}
   baee2:	4b02      	ldr	r3, [pc, #8]	; (baeec <hal_i2c_write+0xc>)
   baee4:	681b      	ldr	r3, [r3, #0]
   baee6:	6a1b      	ldr	r3, [r3, #32]
   baee8:	9301      	str	r3, [sp, #4]
   baeea:	bd08      	pop	{r3, pc}
   baeec:	00030228 	.word	0x00030228

000baef0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   baef0:	b508      	push	{r3, lr}
   baef2:	4b02      	ldr	r3, [pc, #8]	; (baefc <hal_i2c_available+0xc>)
   baef4:	681b      	ldr	r3, [r3, #0]
   baef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baef8:	9301      	str	r3, [sp, #4]
   baefa:	bd08      	pop	{r3, pc}
   baefc:	00030228 	.word	0x00030228

000baf00 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   baf00:	b508      	push	{r3, lr}
   baf02:	4b02      	ldr	r3, [pc, #8]	; (baf0c <hal_i2c_read+0xc>)
   baf04:	681b      	ldr	r3, [r3, #0]
   baf06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   baf08:	9301      	str	r3, [sp, #4]
   baf0a:	bd08      	pop	{r3, pc}
   baf0c:	00030228 	.word	0x00030228

000baf10 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   baf10:	b508      	push	{r3, lr}
   baf12:	4b02      	ldr	r3, [pc, #8]	; (baf1c <hal_i2c_peek+0xc>)
   baf14:	681b      	ldr	r3, [r3, #0]
   baf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   baf18:	9301      	str	r3, [sp, #4]
   baf1a:	bd08      	pop	{r3, pc}
   baf1c:	00030228 	.word	0x00030228

000baf20 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   baf20:	b508      	push	{r3, lr}
   baf22:	4b02      	ldr	r3, [pc, #8]	; (baf2c <hal_i2c_flush+0xc>)
   baf24:	681b      	ldr	r3, [r3, #0]
   baf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   baf28:	9301      	str	r3, [sp, #4]
   baf2a:	bd08      	pop	{r3, pc}
   baf2c:	00030228 	.word	0x00030228

000baf30 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   baf30:	b508      	push	{r3, lr}
   baf32:	4b02      	ldr	r3, [pc, #8]	; (baf3c <hal_i2c_is_enabled+0xc>)
   baf34:	681b      	ldr	r3, [r3, #0]
   baf36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   baf38:	9301      	str	r3, [sp, #4]
   baf3a:	bd08      	pop	{r3, pc}
   baf3c:	00030228 	.word	0x00030228

000baf40 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   baf40:	b508      	push	{r3, lr}
   baf42:	4b02      	ldr	r3, [pc, #8]	; (baf4c <hal_i2c_init+0xc>)
   baf44:	681b      	ldr	r3, [r3, #0]
   baf46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baf48:	9301      	str	r3, [sp, #4]
   baf4a:	bd08      	pop	{r3, pc}
   baf4c:	00030228 	.word	0x00030228

000baf50 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   baf50:	b508      	push	{r3, lr}
   baf52:	4b02      	ldr	r3, [pc, #8]	; (baf5c <hal_i2c_lock+0xc>)
   baf54:	681b      	ldr	r3, [r3, #0]
   baf56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   baf58:	9301      	str	r3, [sp, #4]
   baf5a:	bd08      	pop	{r3, pc}
   baf5c:	00030228 	.word	0x00030228

000baf60 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   baf60:	b508      	push	{r3, lr}
   baf62:	4b02      	ldr	r3, [pc, #8]	; (baf6c <hal_i2c_unlock+0xc>)
   baf64:	681b      	ldr	r3, [r3, #0]
   baf66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   baf68:	9301      	str	r3, [sp, #4]
   baf6a:	bd08      	pop	{r3, pc}
   baf6c:	00030228 	.word	0x00030228

000baf70 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   baf70:	b508      	push	{r3, lr}
   baf72:	4b02      	ldr	r3, [pc, #8]	; (baf7c <hal_i2c_request_ex+0xc>)
   baf74:	681b      	ldr	r3, [r3, #0]
   baf76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   baf78:	9301      	str	r3, [sp, #4]
   baf7a:	bd08      	pop	{r3, pc}
   baf7c:	00030228 	.word	0x00030228

000baf80 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   baf80:	b508      	push	{r3, lr}
   baf82:	4b02      	ldr	r3, [pc, #8]	; (baf8c <inet_inet_ntop+0xc>)
   baf84:	681b      	ldr	r3, [r3, #0]
   baf86:	695b      	ldr	r3, [r3, #20]
   baf88:	9301      	str	r3, [sp, #4]
   baf8a:	bd08      	pop	{r3, pc}
   baf8c:	00030264 	.word	0x00030264

000baf90 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   baf90:	b508      	push	{r3, lr}
   baf92:	4b02      	ldr	r3, [pc, #8]	; (baf9c <netdb_freeaddrinfo+0xc>)
   baf94:	681b      	ldr	r3, [r3, #0]
   baf96:	689b      	ldr	r3, [r3, #8]
   baf98:	9301      	str	r3, [sp, #4]
   baf9a:	bd08      	pop	{r3, pc}
   baf9c:	00030268 	.word	0x00030268

000bafa0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bafa0:	b508      	push	{r3, lr}
   bafa2:	4b02      	ldr	r3, [pc, #8]	; (bafac <netdb_getaddrinfo+0xc>)
   bafa4:	681b      	ldr	r3, [r3, #0]
   bafa6:	68db      	ldr	r3, [r3, #12]
   bafa8:	9301      	str	r3, [sp, #4]
   bafaa:	bd08      	pop	{r3, pc}
   bafac:	00030268 	.word	0x00030268

000bafb0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bafb0:	b508      	push	{r3, lr}
   bafb2:	4b02      	ldr	r3, [pc, #8]	; (bafbc <hal_spi_begin+0xc>)
   bafb4:	681b      	ldr	r3, [r3, #0]
   bafb6:	681b      	ldr	r3, [r3, #0]
   bafb8:	9301      	str	r3, [sp, #4]
   bafba:	bd08      	pop	{r3, pc}
   bafbc:	00030230 	.word	0x00030230

000bafc0 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bafc0:	b508      	push	{r3, lr}
   bafc2:	4b02      	ldr	r3, [pc, #8]	; (bafcc <hal_spi_end+0xc>)
   bafc4:	681b      	ldr	r3, [r3, #0]
   bafc6:	685b      	ldr	r3, [r3, #4]
   bafc8:	9301      	str	r3, [sp, #4]
   bafca:	bd08      	pop	{r3, pc}
   bafcc:	00030230 	.word	0x00030230

000bafd0 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bafd0:	b508      	push	{r3, lr}
   bafd2:	4b02      	ldr	r3, [pc, #8]	; (bafdc <hal_spi_transfer+0xc>)
   bafd4:	681b      	ldr	r3, [r3, #0]
   bafd6:	695b      	ldr	r3, [r3, #20]
   bafd8:	9301      	str	r3, [sp, #4]
   bafda:	bd08      	pop	{r3, pc}
   bafdc:	00030230 	.word	0x00030230

000bafe0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bafe0:	b508      	push	{r3, lr}
   bafe2:	4b02      	ldr	r3, [pc, #8]	; (bafec <hal_spi_init+0xc>)
   bafe4:	681b      	ldr	r3, [r3, #0]
   bafe6:	69db      	ldr	r3, [r3, #28]
   bafe8:	9301      	str	r3, [sp, #4]
   bafea:	bd08      	pop	{r3, pc}
   bafec:	00030230 	.word	0x00030230

000baff0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   baff0:	b508      	push	{r3, lr}
   baff2:	4b02      	ldr	r3, [pc, #8]	; (baffc <hal_spi_is_enabled+0xc>)
   baff4:	681b      	ldr	r3, [r3, #0]
   baff6:	6a1b      	ldr	r3, [r3, #32]
   baff8:	9301      	str	r3, [sp, #4]
   baffa:	bd08      	pop	{r3, pc}
   baffc:	00030230 	.word	0x00030230

000bb000 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bb000:	b508      	push	{r3, lr}
   bb002:	4b02      	ldr	r3, [pc, #8]	; (bb00c <hal_spi_info+0xc>)
   bb004:	681b      	ldr	r3, [r3, #0]
   bb006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb008:	9301      	str	r3, [sp, #4]
   bb00a:	bd08      	pop	{r3, pc}
   bb00c:	00030230 	.word	0x00030230

000bb010 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bb010:	b508      	push	{r3, lr}
   bb012:	4b02      	ldr	r3, [pc, #8]	; (bb01c <hal_spi_set_settings+0xc>)
   bb014:	681b      	ldr	r3, [r3, #0]
   bb016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb018:	9301      	str	r3, [sp, #4]
   bb01a:	bd08      	pop	{r3, pc}
   bb01c:	00030230 	.word	0x00030230

000bb020 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bb020:	b508      	push	{r3, lr}
   bb022:	4b02      	ldr	r3, [pc, #8]	; (bb02c <hal_spi_acquire+0xc>)
   bb024:	681b      	ldr	r3, [r3, #0]
   bb026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb028:	9301      	str	r3, [sp, #4]
   bb02a:	bd08      	pop	{r3, pc}
   bb02c:	00030230 	.word	0x00030230

000bb030 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bb030:	b508      	push	{r3, lr}
   bb032:	4b02      	ldr	r3, [pc, #8]	; (bb03c <hal_spi_release+0xc>)
   bb034:	681b      	ldr	r3, [r3, #0]
   bb036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb038:	9301      	str	r3, [sp, #4]
   bb03a:	bd08      	pop	{r3, pc}
   bb03c:	00030230 	.word	0x00030230

000bb040 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bb040:	b508      	push	{r3, lr}
   bb042:	4b02      	ldr	r3, [pc, #8]	; (bb04c <_open+0xc>)
   bb044:	681b      	ldr	r3, [r3, #0]
   bb046:	681b      	ldr	r3, [r3, #0]
   bb048:	9301      	str	r3, [sp, #4]
   bb04a:	bd08      	pop	{r3, pc}
   bb04c:	00030284 	.word	0x00030284

000bb050 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bb050:	b508      	push	{r3, lr}
   bb052:	4b02      	ldr	r3, [pc, #8]	; (bb05c <_write+0xc>)
   bb054:	681b      	ldr	r3, [r3, #0]
   bb056:	685b      	ldr	r3, [r3, #4]
   bb058:	9301      	str	r3, [sp, #4]
   bb05a:	bd08      	pop	{r3, pc}
   bb05c:	00030284 	.word	0x00030284

000bb060 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bb060:	b508      	push	{r3, lr}
   bb062:	4b02      	ldr	r3, [pc, #8]	; (bb06c <_read+0xc>)
   bb064:	681b      	ldr	r3, [r3, #0]
   bb066:	689b      	ldr	r3, [r3, #8]
   bb068:	9301      	str	r3, [sp, #4]
   bb06a:	bd08      	pop	{r3, pc}
   bb06c:	00030284 	.word	0x00030284

000bb070 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bb070:	b508      	push	{r3, lr}
   bb072:	4b02      	ldr	r3, [pc, #8]	; (bb07c <_close+0xc>)
   bb074:	681b      	ldr	r3, [r3, #0]
   bb076:	68db      	ldr	r3, [r3, #12]
   bb078:	9301      	str	r3, [sp, #4]
   bb07a:	bd08      	pop	{r3, pc}
   bb07c:	00030284 	.word	0x00030284

000bb080 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bb080:	b508      	push	{r3, lr}
   bb082:	4b02      	ldr	r3, [pc, #8]	; (bb08c <_fstat+0xc>)
   bb084:	681b      	ldr	r3, [r3, #0]
   bb086:	695b      	ldr	r3, [r3, #20]
   bb088:	9301      	str	r3, [sp, #4]
   bb08a:	bd08      	pop	{r3, pc}
   bb08c:	00030284 	.word	0x00030284

000bb090 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bb090:	b508      	push	{r3, lr}
   bb092:	4b02      	ldr	r3, [pc, #8]	; (bb09c <_lseek+0xc>)
   bb094:	681b      	ldr	r3, [r3, #0]
   bb096:	6a1b      	ldr	r3, [r3, #32]
   bb098:	9301      	str	r3, [sp, #4]
   bb09a:	bd08      	pop	{r3, pc}
   bb09c:	00030284 	.word	0x00030284

000bb0a0 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bb0a0:	b508      	push	{r3, lr}
   bb0a2:	4b02      	ldr	r3, [pc, #8]	; (bb0ac <stat+0xc>)
   bb0a4:	681b      	ldr	r3, [r3, #0]
   bb0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb0a8:	9301      	str	r3, [sp, #4]
   bb0aa:	bd08      	pop	{r3, pc}
   bb0ac:	00030284 	.word	0x00030284

000bb0b0 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bb0b0:	b508      	push	{r3, lr}
   bb0b2:	4b02      	ldr	r3, [pc, #8]	; (bb0bc <mkdir+0xc>)
   bb0b4:	681b      	ldr	r3, [r3, #0]
   bb0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb0b8:	9301      	str	r3, [sp, #4]
   bb0ba:	bd08      	pop	{r3, pc}
   bb0bc:	00030284 	.word	0x00030284

000bb0c0 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bb0c0:	b508      	push	{r3, lr}
   bb0c2:	4b02      	ldr	r3, [pc, #8]	; (bb0cc <_unlink+0xc>)
   bb0c4:	681b      	ldr	r3, [r3, #0]
   bb0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb0c8:	9301      	str	r3, [sp, #4]
   bb0ca:	bd08      	pop	{r3, pc}
   bb0cc:	00030284 	.word	0x00030284

000bb0d0 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bb0d0:	b508      	push	{r3, lr}
   bb0d2:	4b02      	ldr	r3, [pc, #8]	; (bb0dc <opendir+0xc>)
   bb0d4:	681b      	ldr	r3, [r3, #0]
   bb0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb0d8:	9301      	str	r3, [sp, #4]
   bb0da:	bd08      	pop	{r3, pc}
   bb0dc:	00030284 	.word	0x00030284

000bb0e0 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bb0e0:	b508      	push	{r3, lr}
   bb0e2:	4b02      	ldr	r3, [pc, #8]	; (bb0ec <readdir+0xc>)
   bb0e4:	681b      	ldr	r3, [r3, #0]
   bb0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb0e8:	9301      	str	r3, [sp, #4]
   bb0ea:	bd08      	pop	{r3, pc}
   bb0ec:	00030284 	.word	0x00030284

000bb0f0 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bb0f0:	b508      	push	{r3, lr}
   bb0f2:	4b02      	ldr	r3, [pc, #8]	; (bb0fc <closedir+0xc>)
   bb0f4:	681b      	ldr	r3, [r3, #0]
   bb0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb0f8:	9301      	str	r3, [sp, #4]
   bb0fa:	bd08      	pop	{r3, pc}
   bb0fc:	00030284 	.word	0x00030284

000bb100 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bb100:	b508      	push	{r3, lr}
   bb102:	4b02      	ldr	r3, [pc, #8]	; (bb10c <hal_usart_end+0xc>)
   bb104:	681b      	ldr	r3, [r3, #0]
   bb106:	689b      	ldr	r3, [r3, #8]
   bb108:	9301      	str	r3, [sp, #4]
   bb10a:	bd08      	pop	{r3, pc}
   bb10c:	0003023c 	.word	0x0003023c

000bb110 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bb110:	b508      	push	{r3, lr}
   bb112:	4b02      	ldr	r3, [pc, #8]	; (bb11c <hal_usart_write+0xc>)
   bb114:	681b      	ldr	r3, [r3, #0]
   bb116:	68db      	ldr	r3, [r3, #12]
   bb118:	9301      	str	r3, [sp, #4]
   bb11a:	bd08      	pop	{r3, pc}
   bb11c:	0003023c 	.word	0x0003023c

000bb120 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bb120:	b508      	push	{r3, lr}
   bb122:	4b02      	ldr	r3, [pc, #8]	; (bb12c <hal_usart_available+0xc>)
   bb124:	681b      	ldr	r3, [r3, #0]
   bb126:	691b      	ldr	r3, [r3, #16]
   bb128:	9301      	str	r3, [sp, #4]
   bb12a:	bd08      	pop	{r3, pc}
   bb12c:	0003023c 	.word	0x0003023c

000bb130 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bb130:	b508      	push	{r3, lr}
   bb132:	4b02      	ldr	r3, [pc, #8]	; (bb13c <hal_usart_read+0xc>)
   bb134:	681b      	ldr	r3, [r3, #0]
   bb136:	695b      	ldr	r3, [r3, #20]
   bb138:	9301      	str	r3, [sp, #4]
   bb13a:	bd08      	pop	{r3, pc}
   bb13c:	0003023c 	.word	0x0003023c

000bb140 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bb140:	b508      	push	{r3, lr}
   bb142:	4b02      	ldr	r3, [pc, #8]	; (bb14c <hal_usart_peek+0xc>)
   bb144:	681b      	ldr	r3, [r3, #0]
   bb146:	699b      	ldr	r3, [r3, #24]
   bb148:	9301      	str	r3, [sp, #4]
   bb14a:	bd08      	pop	{r3, pc}
   bb14c:	0003023c 	.word	0x0003023c

000bb150 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bb150:	b508      	push	{r3, lr}
   bb152:	4b02      	ldr	r3, [pc, #8]	; (bb15c <hal_usart_flush+0xc>)
   bb154:	681b      	ldr	r3, [r3, #0]
   bb156:	69db      	ldr	r3, [r3, #28]
   bb158:	9301      	str	r3, [sp, #4]
   bb15a:	bd08      	pop	{r3, pc}
   bb15c:	0003023c 	.word	0x0003023c

000bb160 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bb160:	b508      	push	{r3, lr}
   bb162:	4b02      	ldr	r3, [pc, #8]	; (bb16c <hal_usart_is_enabled+0xc>)
   bb164:	681b      	ldr	r3, [r3, #0]
   bb166:	6a1b      	ldr	r3, [r3, #32]
   bb168:	9301      	str	r3, [sp, #4]
   bb16a:	bd08      	pop	{r3, pc}
   bb16c:	0003023c 	.word	0x0003023c

000bb170 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bb170:	b508      	push	{r3, lr}
   bb172:	4b02      	ldr	r3, [pc, #8]	; (bb17c <hal_usart_available_data_for_write+0xc>)
   bb174:	681b      	ldr	r3, [r3, #0]
   bb176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb178:	9301      	str	r3, [sp, #4]
   bb17a:	bd08      	pop	{r3, pc}
   bb17c:	0003023c 	.word	0x0003023c

000bb180 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bb180:	b508      	push	{r3, lr}
   bb182:	4b02      	ldr	r3, [pc, #8]	; (bb18c <hal_usart_begin_config+0xc>)
   bb184:	681b      	ldr	r3, [r3, #0]
   bb186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb188:	9301      	str	r3, [sp, #4]
   bb18a:	bd08      	pop	{r3, pc}
   bb18c:	0003023c 	.word	0x0003023c

000bb190 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bb190:	b508      	push	{r3, lr}
   bb192:	4b02      	ldr	r3, [pc, #8]	; (bb19c <hal_usart_init_ex+0xc>)
   bb194:	681b      	ldr	r3, [r3, #0]
   bb196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb198:	9301      	str	r3, [sp, #4]
   bb19a:	bd08      	pop	{r3, pc}
   bb19c:	0003023c 	.word	0x0003023c

000bb1a0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bb1a0:	b508      	push	{r3, lr}
   bb1a2:	4b02      	ldr	r3, [pc, #8]	; (bb1ac <HAL_USB_USART_Init+0xc>)
   bb1a4:	681b      	ldr	r3, [r3, #0]
   bb1a6:	681b      	ldr	r3, [r3, #0]
   bb1a8:	9301      	str	r3, [sp, #4]
   bb1aa:	bd08      	pop	{r3, pc}
   bb1ac:	0003024c 	.word	0x0003024c

000bb1b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bb1b0:	b508      	push	{r3, lr}
   bb1b2:	4b02      	ldr	r3, [pc, #8]	; (bb1bc <HAL_USB_USART_Begin+0xc>)
   bb1b4:	681b      	ldr	r3, [r3, #0]
   bb1b6:	685b      	ldr	r3, [r3, #4]
   bb1b8:	9301      	str	r3, [sp, #4]
   bb1ba:	bd08      	pop	{r3, pc}
   bb1bc:	0003024c 	.word	0x0003024c

000bb1c0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bb1c0:	b508      	push	{r3, lr}
   bb1c2:	4b02      	ldr	r3, [pc, #8]	; (bb1cc <HAL_USB_USART_End+0xc>)
   bb1c4:	681b      	ldr	r3, [r3, #0]
   bb1c6:	689b      	ldr	r3, [r3, #8]
   bb1c8:	9301      	str	r3, [sp, #4]
   bb1ca:	bd08      	pop	{r3, pc}
   bb1cc:	0003024c 	.word	0x0003024c

000bb1d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bb1d0:	b508      	push	{r3, lr}
   bb1d2:	4b02      	ldr	r3, [pc, #8]	; (bb1dc <HAL_USB_USART_Available_Data+0xc>)
   bb1d4:	681b      	ldr	r3, [r3, #0]
   bb1d6:	691b      	ldr	r3, [r3, #16]
   bb1d8:	9301      	str	r3, [sp, #4]
   bb1da:	bd08      	pop	{r3, pc}
   bb1dc:	0003024c 	.word	0x0003024c

000bb1e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bb1e0:	b508      	push	{r3, lr}
   bb1e2:	4b02      	ldr	r3, [pc, #8]	; (bb1ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bb1e4:	681b      	ldr	r3, [r3, #0]
   bb1e6:	695b      	ldr	r3, [r3, #20]
   bb1e8:	9301      	str	r3, [sp, #4]
   bb1ea:	bd08      	pop	{r3, pc}
   bb1ec:	0003024c 	.word	0x0003024c

000bb1f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bb1f0:	b508      	push	{r3, lr}
   bb1f2:	4b02      	ldr	r3, [pc, #8]	; (bb1fc <HAL_USB_USART_Receive_Data+0xc>)
   bb1f4:	681b      	ldr	r3, [r3, #0]
   bb1f6:	699b      	ldr	r3, [r3, #24]
   bb1f8:	9301      	str	r3, [sp, #4]
   bb1fa:	bd08      	pop	{r3, pc}
   bb1fc:	0003024c 	.word	0x0003024c

000bb200 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bb200:	b508      	push	{r3, lr}
   bb202:	4b02      	ldr	r3, [pc, #8]	; (bb20c <HAL_USB_USART_Send_Data+0xc>)
   bb204:	681b      	ldr	r3, [r3, #0]
   bb206:	69db      	ldr	r3, [r3, #28]
   bb208:	9301      	str	r3, [sp, #4]
   bb20a:	bd08      	pop	{r3, pc}
   bb20c:	0003024c 	.word	0x0003024c

000bb210 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bb210:	b508      	push	{r3, lr}
   bb212:	4b02      	ldr	r3, [pc, #8]	; (bb21c <HAL_USB_USART_Flush_Data+0xc>)
   bb214:	681b      	ldr	r3, [r3, #0]
   bb216:	6a1b      	ldr	r3, [r3, #32]
   bb218:	9301      	str	r3, [sp, #4]
   bb21a:	bd08      	pop	{r3, pc}
   bb21c:	0003024c 	.word	0x0003024c

000bb220 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bb220:	b508      	push	{r3, lr}
   bb222:	4b02      	ldr	r3, [pc, #8]	; (bb22c <HAL_USB_USART_Is_Connected+0xc>)
   bb224:	681b      	ldr	r3, [r3, #0]
   bb226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb228:	9301      	str	r3, [sp, #4]
   bb22a:	bd08      	pop	{r3, pc}
   bb22c:	0003024c 	.word	0x0003024c

000bb230 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bb230:	b508      	push	{r3, lr}
   bb232:	4b02      	ldr	r3, [pc, #8]	; (bb23c <panic_+0xc>)
   bb234:	681b      	ldr	r3, [r3, #0]
   bb236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb238:	9301      	str	r3, [sp, #4]
   bb23a:	bd08      	pop	{r3, pc}
   bb23c:	00030260 	.word	0x00030260

000bb240 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bb240:	b508      	push	{r3, lr}
   bb242:	4b02      	ldr	r3, [pc, #8]	; (bb24c <log_message+0xc>)
   bb244:	681b      	ldr	r3, [r3, #0]
   bb246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bb248:	9301      	str	r3, [sp, #4]
   bb24a:	bd08      	pop	{r3, pc}
   bb24c:	00030260 	.word	0x00030260

000bb250 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bb250:	b508      	push	{r3, lr}
   bb252:	4b02      	ldr	r3, [pc, #8]	; (bb25c <log_message_v+0xc>)
   bb254:	681b      	ldr	r3, [r3, #0]
   bb256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb258:	9301      	str	r3, [sp, #4]
   bb25a:	bd08      	pop	{r3, pc}
   bb25c:	00030260 	.word	0x00030260

000bb260 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bb260:	b508      	push	{r3, lr}
   bb262:	4b02      	ldr	r3, [pc, #8]	; (bb26c <log_level_name+0xc>)
   bb264:	681b      	ldr	r3, [r3, #0]
   bb266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bb268:	9301      	str	r3, [sp, #4]
   bb26a:	bd08      	pop	{r3, pc}
   bb26c:	00030260 	.word	0x00030260

000bb270 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bb270:	b508      	push	{r3, lr}
   bb272:	4b02      	ldr	r3, [pc, #8]	; (bb27c <log_set_callbacks+0xc>)
   bb274:	681b      	ldr	r3, [r3, #0]
   bb276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bb278:	9301      	str	r3, [sp, #4]
   bb27a:	bd08      	pop	{r3, pc}
   bb27c:	00030260 	.word	0x00030260

000bb280 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bb280:	b508      	push	{r3, lr}
   bb282:	4b03      	ldr	r3, [pc, #12]	; (bb290 <diag_get_source+0x10>)
   bb284:	681b      	ldr	r3, [r3, #0]
   bb286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bb28a:	9301      	str	r3, [sp, #4]
   bb28c:	bd08      	pop	{r3, pc}
   bb28e:	0000      	.short	0x0000
   bb290:	00030260 	.word	0x00030260

000bb294 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bb294:	b508      	push	{r3, lr}
   bb296:	4b02      	ldr	r3, [pc, #8]	; (bb2a0 <system_mode+0xc>)
   bb298:	681b      	ldr	r3, [r3, #0]
   bb29a:	681b      	ldr	r3, [r3, #0]
   bb29c:	9301      	str	r3, [sp, #4]
   bb29e:	bd08      	pop	{r3, pc}
   bb2a0:	00030220 	.word	0x00030220

000bb2a4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bb2a4:	b508      	push	{r3, lr}
   bb2a6:	4b02      	ldr	r3, [pc, #8]	; (bb2b0 <set_system_mode+0xc>)
   bb2a8:	681b      	ldr	r3, [r3, #0]
   bb2aa:	685b      	ldr	r3, [r3, #4]
   bb2ac:	9301      	str	r3, [sp, #4]
   bb2ae:	bd08      	pop	{r3, pc}
   bb2b0:	00030220 	.word	0x00030220

000bb2b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bb2b4:	b508      	push	{r3, lr}
   bb2b6:	4b02      	ldr	r3, [pc, #8]	; (bb2c0 <system_delay_ms+0xc>)
   bb2b8:	681b      	ldr	r3, [r3, #0]
   bb2ba:	695b      	ldr	r3, [r3, #20]
   bb2bc:	9301      	str	r3, [sp, #4]
   bb2be:	bd08      	pop	{r3, pc}
   bb2c0:	00030220 	.word	0x00030220

000bb2c4 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bb2c4:	b508      	push	{r3, lr}
   bb2c6:	4b02      	ldr	r3, [pc, #8]	; (bb2d0 <system_subscribe_event+0xc>)
   bb2c8:	681b      	ldr	r3, [r3, #0]
   bb2ca:	6a1b      	ldr	r3, [r3, #32]
   bb2cc:	9301      	str	r3, [sp, #4]
   bb2ce:	bd08      	pop	{r3, pc}
   bb2d0:	00030220 	.word	0x00030220

000bb2d4 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bb2d4:	b508      	push	{r3, lr}
   bb2d6:	4b02      	ldr	r3, [pc, #8]	; (bb2e0 <system_thread_set_state+0xc>)
   bb2d8:	681b      	ldr	r3, [r3, #0]
   bb2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb2dc:	9301      	str	r3, [sp, #4]
   bb2de:	bd08      	pop	{r3, pc}
   bb2e0:	00030220 	.word	0x00030220

000bb2e4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bb2e4:	b508      	push	{r3, lr}
   bb2e6:	4b02      	ldr	r3, [pc, #8]	; (bb2f0 <application_thread_current+0xc>)
   bb2e8:	681b      	ldr	r3, [r3, #0]
   bb2ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb2ec:	9301      	str	r3, [sp, #4]
   bb2ee:	bd08      	pop	{r3, pc}
   bb2f0:	00030220 	.word	0x00030220

000bb2f4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bb2f4:	b508      	push	{r3, lr}
   bb2f6:	4b02      	ldr	r3, [pc, #8]	; (bb300 <application_thread_invoke+0xc>)
   bb2f8:	681b      	ldr	r3, [r3, #0]
   bb2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb2fc:	9301      	str	r3, [sp, #4]
   bb2fe:	bd08      	pop	{r3, pc}
   bb300:	00030220 	.word	0x00030220

000bb304 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bb304:	b508      	push	{r3, lr}
   bb306:	4b02      	ldr	r3, [pc, #8]	; (bb310 <system_thread_get_state+0xc>)
   bb308:	681b      	ldr	r3, [r3, #0]
   bb30a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bb30c:	9301      	str	r3, [sp, #4]
   bb30e:	bd08      	pop	{r3, pc}
   bb310:	00030220 	.word	0x00030220

000bb314 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bb314:	b508      	push	{r3, lr}
   bb316:	4b02      	ldr	r3, [pc, #8]	; (bb320 <system_notify_time_changed+0xc>)
   bb318:	681b      	ldr	r3, [r3, #0]
   bb31a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bb31c:	9301      	str	r3, [sp, #4]
   bb31e:	bd08      	pop	{r3, pc}
   bb320:	00030220 	.word	0x00030220

000bb324 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bb324:	b508      	push	{r3, lr}
   bb326:	4b03      	ldr	r3, [pc, #12]	; (bb334 <system_ctrl_set_app_request_handler+0x10>)
   bb328:	681b      	ldr	r3, [r3, #0]
   bb32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bb32e:	9301      	str	r3, [sp, #4]
   bb330:	bd08      	pop	{r3, pc}
   bb332:	0000      	.short	0x0000
   bb334:	00030220 	.word	0x00030220

000bb338 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bb338:	b508      	push	{r3, lr}
   bb33a:	4b03      	ldr	r3, [pc, #12]	; (bb348 <system_ctrl_set_result+0x10>)
   bb33c:	681b      	ldr	r3, [r3, #0]
   bb33e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bb342:	9301      	str	r3, [sp, #4]
   bb344:	bd08      	pop	{r3, pc}
   bb346:	0000      	.short	0x0000
   bb348:	00030220 	.word	0x00030220

000bb34c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bb34c:	b508      	push	{r3, lr}
   bb34e:	4b03      	ldr	r3, [pc, #12]	; (bb35c <system_power_management_set_config+0x10>)
   bb350:	681b      	ldr	r3, [r3, #0]
   bb352:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bb356:	9301      	str	r3, [sp, #4]
   bb358:	bd08      	pop	{r3, pc}
   bb35a:	0000      	.short	0x0000
   bb35c:	00030220 	.word	0x00030220

000bb360 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bb360:	b508      	push	{r3, lr}
   bb362:	4b03      	ldr	r3, [pc, #12]	; (bb370 <system_sleep_ext+0x10>)
   bb364:	681b      	ldr	r3, [r3, #0]
   bb366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bb36a:	9301      	str	r3, [sp, #4]
   bb36c:	bd08      	pop	{r3, pc}
   bb36e:	0000      	.short	0x0000
   bb370:	00030220 	.word	0x00030220

000bb374 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bb374:	b508      	push	{r3, lr}
   bb376:	4b03      	ldr	r3, [pc, #12]	; (bb384 <system_reset+0x10>)
   bb378:	681b      	ldr	r3, [r3, #0]
   bb37a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bb37e:	9301      	str	r3, [sp, #4]
   bb380:	bd08      	pop	{r3, pc}
   bb382:	0000      	.short	0x0000
   bb384:	00030220 	.word	0x00030220

000bb388 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bb388:	b508      	push	{r3, lr}
   bb38a:	4b02      	ldr	r3, [pc, #8]	; (bb394 <spark_variable+0xc>)
   bb38c:	681b      	ldr	r3, [r3, #0]
   bb38e:	681b      	ldr	r3, [r3, #0]
   bb390:	9301      	str	r3, [sp, #4]
   bb392:	bd08      	pop	{r3, pc}
   bb394:	00030244 	.word	0x00030244

000bb398 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bb398:	b508      	push	{r3, lr}
   bb39a:	4b02      	ldr	r3, [pc, #8]	; (bb3a4 <spark_function+0xc>)
   bb39c:	681b      	ldr	r3, [r3, #0]
   bb39e:	685b      	ldr	r3, [r3, #4]
   bb3a0:	9301      	str	r3, [sp, #4]
   bb3a2:	bd08      	pop	{r3, pc}
   bb3a4:	00030244 	.word	0x00030244

000bb3a8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bb3a8:	b508      	push	{r3, lr}
   bb3aa:	4b02      	ldr	r3, [pc, #8]	; (bb3b4 <spark_process+0xc>)
   bb3ac:	681b      	ldr	r3, [r3, #0]
   bb3ae:	689b      	ldr	r3, [r3, #8]
   bb3b0:	9301      	str	r3, [sp, #4]
   bb3b2:	bd08      	pop	{r3, pc}
   bb3b4:	00030244 	.word	0x00030244

000bb3b8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bb3b8:	b508      	push	{r3, lr}
   bb3ba:	4b02      	ldr	r3, [pc, #8]	; (bb3c4 <spark_cloud_flag_connect+0xc>)
   bb3bc:	681b      	ldr	r3, [r3, #0]
   bb3be:	68db      	ldr	r3, [r3, #12]
   bb3c0:	9301      	str	r3, [sp, #4]
   bb3c2:	bd08      	pop	{r3, pc}
   bb3c4:	00030244 	.word	0x00030244

000bb3c8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bb3c8:	b508      	push	{r3, lr}
   bb3ca:	4b02      	ldr	r3, [pc, #8]	; (bb3d4 <spark_cloud_flag_connected+0xc>)
   bb3cc:	681b      	ldr	r3, [r3, #0]
   bb3ce:	695b      	ldr	r3, [r3, #20]
   bb3d0:	9301      	str	r3, [sp, #4]
   bb3d2:	bd08      	pop	{r3, pc}
   bb3d4:	00030244 	.word	0x00030244

000bb3d8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bb3d8:	b508      	push	{r3, lr}
   bb3da:	4b02      	ldr	r3, [pc, #8]	; (bb3e4 <spark_deviceID+0xc>)
   bb3dc:	681b      	ldr	r3, [r3, #0]
   bb3de:	69db      	ldr	r3, [r3, #28]
   bb3e0:	9301      	str	r3, [sp, #4]
   bb3e2:	bd08      	pop	{r3, pc}
   bb3e4:	00030244 	.word	0x00030244

000bb3e8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bb3e8:	b508      	push	{r3, lr}
   bb3ea:	4b02      	ldr	r3, [pc, #8]	; (bb3f4 <spark_send_event+0xc>)
   bb3ec:	681b      	ldr	r3, [r3, #0]
   bb3ee:	6a1b      	ldr	r3, [r3, #32]
   bb3f0:	9301      	str	r3, [sp, #4]
   bb3f2:	bd08      	pop	{r3, pc}
   bb3f4:	00030244 	.word	0x00030244

000bb3f8 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bb3f8:	b508      	push	{r3, lr}
   bb3fa:	4b02      	ldr	r3, [pc, #8]	; (bb404 <spark_sync_time+0xc>)
   bb3fc:	681b      	ldr	r3, [r3, #0]
   bb3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb400:	9301      	str	r3, [sp, #4]
   bb402:	bd08      	pop	{r3, pc}
   bb404:	00030244 	.word	0x00030244

000bb408 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bb408:	b508      	push	{r3, lr}
   bb40a:	4b02      	ldr	r3, [pc, #8]	; (bb414 <spark_sync_time_pending+0xc>)
   bb40c:	681b      	ldr	r3, [r3, #0]
   bb40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb410:	9301      	str	r3, [sp, #4]
   bb412:	bd08      	pop	{r3, pc}
   bb414:	00030244 	.word	0x00030244

000bb418 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bb418:	b508      	push	{r3, lr}
   bb41a:	4b02      	ldr	r3, [pc, #8]	; (bb424 <spark_sync_time_last+0xc>)
   bb41c:	681b      	ldr	r3, [r3, #0]
   bb41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb420:	9301      	str	r3, [sp, #4]
   bb422:	bd08      	pop	{r3, pc}
   bb424:	00030244 	.word	0x00030244

000bb428 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   bb428:	b508      	push	{r3, lr}
   bb42a:	4b02      	ldr	r3, [pc, #8]	; (bb434 <spark_set_connection_property+0xc>)
   bb42c:	681b      	ldr	r3, [r3, #0]
   bb42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bb430:	9301      	str	r3, [sp, #4]
   bb432:	bd08      	pop	{r3, pc}
   bb434:	00030244 	.word	0x00030244

000bb438 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bb438:	b508      	push	{r3, lr}
   bb43a:	4b02      	ldr	r3, [pc, #8]	; (bb444 <spark_set_random_seed_from_cloud_handler+0xc>)
   bb43c:	681b      	ldr	r3, [r3, #0]
   bb43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb440:	9301      	str	r3, [sp, #4]
   bb442:	bd08      	pop	{r3, pc}
   bb444:	00030244 	.word	0x00030244

000bb448 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bb448:	b508      	push	{r3, lr}
   bb44a:	4b02      	ldr	r3, [pc, #8]	; (bb454 <spark_cloud_disconnect+0xc>)
   bb44c:	681b      	ldr	r3, [r3, #0]
   bb44e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb450:	9301      	str	r3, [sp, #4]
   bb452:	bd08      	pop	{r3, pc}
   bb454:	00030244 	.word	0x00030244

000bb458 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bb458:	b508      	push	{r3, lr}
   bb45a:	4b02      	ldr	r3, [pc, #8]	; (bb464 <network_connect+0xc>)
   bb45c:	681b      	ldr	r3, [r3, #0]
   bb45e:	685b      	ldr	r3, [r3, #4]
   bb460:	9301      	str	r3, [sp, #4]
   bb462:	bd08      	pop	{r3, pc}
   bb464:	00030240 	.word	0x00030240

000bb468 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bb468:	b508      	push	{r3, lr}
   bb46a:	4b02      	ldr	r3, [pc, #8]	; (bb474 <network_connecting+0xc>)
   bb46c:	681b      	ldr	r3, [r3, #0]
   bb46e:	689b      	ldr	r3, [r3, #8]
   bb470:	9301      	str	r3, [sp, #4]
   bb472:	bd08      	pop	{r3, pc}
   bb474:	00030240 	.word	0x00030240

000bb478 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bb478:	b508      	push	{r3, lr}
   bb47a:	4b02      	ldr	r3, [pc, #8]	; (bb484 <network_disconnect+0xc>)
   bb47c:	681b      	ldr	r3, [r3, #0]
   bb47e:	68db      	ldr	r3, [r3, #12]
   bb480:	9301      	str	r3, [sp, #4]
   bb482:	bd08      	pop	{r3, pc}
   bb484:	00030240 	.word	0x00030240

000bb488 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bb488:	b508      	push	{r3, lr}
   bb48a:	4b02      	ldr	r3, [pc, #8]	; (bb494 <network_ready+0xc>)
   bb48c:	681b      	ldr	r3, [r3, #0]
   bb48e:	691b      	ldr	r3, [r3, #16]
   bb490:	9301      	str	r3, [sp, #4]
   bb492:	bd08      	pop	{r3, pc}
   bb494:	00030240 	.word	0x00030240

000bb498 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bb498:	b508      	push	{r3, lr}
   bb49a:	4b02      	ldr	r3, [pc, #8]	; (bb4a4 <network_on+0xc>)
   bb49c:	681b      	ldr	r3, [r3, #0]
   bb49e:	695b      	ldr	r3, [r3, #20]
   bb4a0:	9301      	str	r3, [sp, #4]
   bb4a2:	bd08      	pop	{r3, pc}
   bb4a4:	00030240 	.word	0x00030240

000bb4a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bb4a8:	b508      	push	{r3, lr}
   bb4aa:	4b02      	ldr	r3, [pc, #8]	; (bb4b4 <network_off+0xc>)
   bb4ac:	681b      	ldr	r3, [r3, #0]
   bb4ae:	699b      	ldr	r3, [r3, #24]
   bb4b0:	9301      	str	r3, [sp, #4]
   bb4b2:	bd08      	pop	{r3, pc}
   bb4b4:	00030240 	.word	0x00030240

000bb4b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bb4b8:	b508      	push	{r3, lr}
   bb4ba:	4b02      	ldr	r3, [pc, #8]	; (bb4c4 <network_listen+0xc>)
   bb4bc:	681b      	ldr	r3, [r3, #0]
   bb4be:	69db      	ldr	r3, [r3, #28]
   bb4c0:	9301      	str	r3, [sp, #4]
   bb4c2:	bd08      	pop	{r3, pc}
   bb4c4:	00030240 	.word	0x00030240

000bb4c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bb4c8:	b508      	push	{r3, lr}
   bb4ca:	4b02      	ldr	r3, [pc, #8]	; (bb4d4 <network_listening+0xc>)
   bb4cc:	681b      	ldr	r3, [r3, #0]
   bb4ce:	6a1b      	ldr	r3, [r3, #32]
   bb4d0:	9301      	str	r3, [sp, #4]
   bb4d2:	bd08      	pop	{r3, pc}
   bb4d4:	00030240 	.word	0x00030240

000bb4d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bb4d8:	b508      	push	{r3, lr}
   bb4da:	4b02      	ldr	r3, [pc, #8]	; (bb4e4 <network_set_listen_timeout+0xc>)
   bb4dc:	681b      	ldr	r3, [r3, #0]
   bb4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb4e0:	9301      	str	r3, [sp, #4]
   bb4e2:	bd08      	pop	{r3, pc}
   bb4e4:	00030240 	.word	0x00030240

000bb4e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bb4e8:	b508      	push	{r3, lr}
   bb4ea:	4b02      	ldr	r3, [pc, #8]	; (bb4f4 <network_get_listen_timeout+0xc>)
   bb4ec:	681b      	ldr	r3, [r3, #0]
   bb4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb4f0:	9301      	str	r3, [sp, #4]
   bb4f2:	bd08      	pop	{r3, pc}
   bb4f4:	00030240 	.word	0x00030240

000bb4f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bb4f8:	b508      	push	{r3, lr}
   bb4fa:	4b02      	ldr	r3, [pc, #8]	; (bb504 <network_is_on+0xc>)
   bb4fc:	681b      	ldr	r3, [r3, #0]
   bb4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb500:	9301      	str	r3, [sp, #4]
   bb502:	bd08      	pop	{r3, pc}
   bb504:	00030240 	.word	0x00030240

000bb508 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bb508:	b508      	push	{r3, lr}
   bb50a:	4b02      	ldr	r3, [pc, #8]	; (bb514 <network_is_off+0xc>)
   bb50c:	681b      	ldr	r3, [r3, #0]
   bb50e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb510:	9301      	str	r3, [sp, #4]
   bb512:	bd08      	pop	{r3, pc}
   bb514:	00030240 	.word	0x00030240

000bb518 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bb518:	b508      	push	{r3, lr}
   bb51a:	4b02      	ldr	r3, [pc, #8]	; (bb524 <malloc+0xc>)
   bb51c:	681b      	ldr	r3, [r3, #0]
   bb51e:	681b      	ldr	r3, [r3, #0]
   bb520:	9301      	str	r3, [sp, #4]
   bb522:	bd08      	pop	{r3, pc}
   bb524:	0003021c 	.word	0x0003021c

000bb528 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bb528:	b508      	push	{r3, lr}
   bb52a:	4b02      	ldr	r3, [pc, #8]	; (bb534 <free+0xc>)
   bb52c:	681b      	ldr	r3, [r3, #0]
   bb52e:	685b      	ldr	r3, [r3, #4]
   bb530:	9301      	str	r3, [sp, #4]
   bb532:	bd08      	pop	{r3, pc}
   bb534:	0003021c 	.word	0x0003021c

000bb538 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bb538:	b508      	push	{r3, lr}
   bb53a:	4b02      	ldr	r3, [pc, #8]	; (bb544 <realloc+0xc>)
   bb53c:	681b      	ldr	r3, [r3, #0]
   bb53e:	689b      	ldr	r3, [r3, #8]
   bb540:	9301      	str	r3, [sp, #4]
   bb542:	bd08      	pop	{r3, pc}
   bb544:	0003021c 	.word	0x0003021c

000bb548 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bb548:	b508      	push	{r3, lr}
   bb54a:	4b02      	ldr	r3, [pc, #8]	; (bb554 <siprintf+0xc>)
   bb54c:	681b      	ldr	r3, [r3, #0]
   bb54e:	691b      	ldr	r3, [r3, #16]
   bb550:	9301      	str	r3, [sp, #4]
   bb552:	bd08      	pop	{r3, pc}
   bb554:	0003021c 	.word	0x0003021c

000bb558 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bb558:	b508      	push	{r3, lr}
   bb55a:	4b02      	ldr	r3, [pc, #8]	; (bb564 <sscanf+0xc>)
   bb55c:	681b      	ldr	r3, [r3, #0]
   bb55e:	695b      	ldr	r3, [r3, #20]
   bb560:	9301      	str	r3, [sp, #4]
   bb562:	bd08      	pop	{r3, pc}
   bb564:	0003021c 	.word	0x0003021c

000bb568 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bb568:	b508      	push	{r3, lr}
   bb56a:	4b02      	ldr	r3, [pc, #8]	; (bb574 <snprintf+0xc>)
   bb56c:	681b      	ldr	r3, [r3, #0]
   bb56e:	69db      	ldr	r3, [r3, #28]
   bb570:	9301      	str	r3, [sp, #4]
   bb572:	bd08      	pop	{r3, pc}
   bb574:	0003021c 	.word	0x0003021c

000bb578 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bb578:	b508      	push	{r3, lr}
   bb57a:	4b02      	ldr	r3, [pc, #8]	; (bb584 <vsnprintf+0xc>)
   bb57c:	681b      	ldr	r3, [r3, #0]
   bb57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb580:	9301      	str	r3, [sp, #4]
   bb582:	bd08      	pop	{r3, pc}
   bb584:	0003021c 	.word	0x0003021c

000bb588 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bb588:	b508      	push	{r3, lr}
   bb58a:	4b02      	ldr	r3, [pc, #8]	; (bb594 <abort+0xc>)
   bb58c:	681b      	ldr	r3, [r3, #0]
   bb58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb590:	9301      	str	r3, [sp, #4]
   bb592:	bd08      	pop	{r3, pc}
   bb594:	0003021c 	.word	0x0003021c

000bb598 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bb598:	b508      	push	{r3, lr}
   bb59a:	4b02      	ldr	r3, [pc, #8]	; (bb5a4 <_malloc_r+0xc>)
   bb59c:	681b      	ldr	r3, [r3, #0]
   bb59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb5a0:	9301      	str	r3, [sp, #4]
   bb5a2:	bd08      	pop	{r3, pc}
   bb5a4:	0003021c 	.word	0x0003021c

000bb5a8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bb5a8:	b508      	push	{r3, lr}
   bb5aa:	4b02      	ldr	r3, [pc, #8]	; (bb5b4 <__errno+0xc>)
   bb5ac:	681b      	ldr	r3, [r3, #0]
   bb5ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb5b0:	9301      	str	r3, [sp, #4]
   bb5b2:	bd08      	pop	{r3, pc}
   bb5b4:	0003021c 	.word	0x0003021c

000bb5b8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bb5b8:	b508      	push	{r3, lr}
   bb5ba:	4b02      	ldr	r3, [pc, #8]	; (bb5c4 <__assert_func+0xc>)
   bb5bc:	681b      	ldr	r3, [r3, #0]
   bb5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb5c0:	9301      	str	r3, [sp, #4]
   bb5c2:	bd08      	pop	{r3, pc}
   bb5c4:	0003021c 	.word	0x0003021c

000bb5c8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bb5c8:	b508      	push	{r3, lr}
   bb5ca:	4b02      	ldr	r3, [pc, #8]	; (bb5d4 <newlib_impure_ptr_callback+0xc>)
   bb5cc:	681b      	ldr	r3, [r3, #0]
   bb5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb5d0:	9301      	str	r3, [sp, #4]
   bb5d2:	bd08      	pop	{r3, pc}
   bb5d4:	0003021c 	.word	0x0003021c

000bb5d8 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bb5d8:	b508      	push	{r3, lr}
   bb5da:	4b02      	ldr	r3, [pc, #8]	; (bb5e4 <strftime+0xc>)
   bb5dc:	681b      	ldr	r3, [r3, #0]
   bb5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bb5e0:	9301      	str	r3, [sp, #4]
   bb5e2:	bd08      	pop	{r3, pc}
   bb5e4:	0003021c 	.word	0x0003021c

000bb5e8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bb5e8:	b508      	push	{r3, lr}
   bb5ea:	4b02      	ldr	r3, [pc, #8]	; (bb5f4 <localtime_r+0xc>)
   bb5ec:	681b      	ldr	r3, [r3, #0]
   bb5ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb5f0:	9301      	str	r3, [sp, #4]
   bb5f2:	bd08      	pop	{r3, pc}
   bb5f4:	0003021c 	.word	0x0003021c

000bb5f8 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bb5f8:	b508      	push	{r3, lr}
   bb5fa:	4b02      	ldr	r3, [pc, #8]	; (bb604 <gmtime_r+0xc>)
   bb5fc:	681b      	ldr	r3, [r3, #0]
   bb5fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bb600:	9301      	str	r3, [sp, #4]
   bb602:	bd08      	pop	{r3, pc}
   bb604:	0003021c 	.word	0x0003021c

000bb608 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bb608:	b508      	push	{r3, lr}
   bb60a:	4b02      	ldr	r3, [pc, #8]	; (bb614 <mktime+0xc>)
   bb60c:	681b      	ldr	r3, [r3, #0]
   bb60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb610:	9301      	str	r3, [sp, #4]
   bb612:	bd08      	pop	{r3, pc}
   bb614:	0003021c 	.word	0x0003021c

000bb618 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bb618:	2100      	movs	r1, #0
   bb61a:	f7ff be4b 	b.w	bb2b4 <system_delay_ms>

000bb61e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bb61e:	b510      	push	{r4, lr}
      if (_M_empty())
   bb620:	6883      	ldr	r3, [r0, #8]
   bb622:	4604      	mov	r4, r0
   bb624:	b90b      	cbnz	r3, bb62a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bb626:	f003 f993 	bl	be950 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb62a:	68c3      	ldr	r3, [r0, #12]
   bb62c:	4798      	blx	r3
      if (_M_manager)
   bb62e:	68a3      	ldr	r3, [r4, #8]
   bb630:	b11b      	cbz	r3, bb63a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bb632:	2203      	movs	r2, #3
   bb634:	4621      	mov	r1, r4
   bb636:	4620      	mov	r0, r4
   bb638:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bb63a:	4620      	mov	r0, r4
   bb63c:	2110      	movs	r1, #16
}
   bb63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bb642:	f7f8 bd2c 	b.w	b409e <_ZdlPvj>

000bb646 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bb646:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bb648:	6843      	ldr	r3, [r0, #4]
   bb64a:	3b01      	subs	r3, #1
    {
   bb64c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bb64e:	6043      	str	r3, [r0, #4]
   bb650:	b963      	cbnz	r3, bb66c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bb652:	6803      	ldr	r3, [r0, #0]
   bb654:	689b      	ldr	r3, [r3, #8]
   bb656:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bb658:	68a3      	ldr	r3, [r4, #8]
   bb65a:	3b01      	subs	r3, #1
   bb65c:	60a3      	str	r3, [r4, #8]
   bb65e:	b92b      	cbnz	r3, bb66c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bb660:	6823      	ldr	r3, [r4, #0]
   bb662:	4620      	mov	r0, r4
   bb664:	68db      	ldr	r3, [r3, #12]
    }
   bb666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bb66a:	4718      	bx	r3
    }
   bb66c:	bd10      	pop	{r4, pc}

000bb66e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb66e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb670:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb674:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb676:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bb67a:	42ae      	cmp	r6, r5
   bb67c:	d004      	beq.n	bb688 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bb67e:	4628      	mov	r0, r5
   bb680:	f002 fab4 	bl	bdbec <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bb684:	3510      	adds	r5, #16
   bb686:	e7f8      	b.n	bb67a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bb688:	6820      	ldr	r0, [r4, #0]
   bb68a:	f7ff ff4d 	bl	bb528 <free>
    AllocatorT::free(data_);
}
   bb68e:	4620      	mov	r0, r4
   bb690:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb694 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bb694:	4802      	ldr	r0, [pc, #8]	; (bb6a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bb696:	2300      	movs	r3, #0
   bb698:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bb69a:	f7ff bb51 	b.w	bad40 <os_mutex_recursive_create>
   bb69e:	bf00      	nop
   bb6a0:	2003e57c 	.word	0x2003e57c

000bb6a4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bb6a4:	2200      	movs	r2, #0
   bb6a6:	6840      	ldr	r0, [r0, #4]
   bb6a8:	4611      	mov	r1, r2
   bb6aa:	f7ff beed 	b.w	bb488 <network_ready>

000bb6ae <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bb6ae:	2200      	movs	r2, #0
   bb6b0:	6840      	ldr	r0, [r0, #4]
   bb6b2:	4611      	mov	r1, r2
   bb6b4:	f7ff bf08 	b.w	bb4c8 <network_listening>

000bb6b8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb6b8:	2200      	movs	r2, #0
   bb6ba:	6840      	ldr	r0, [r0, #4]
   bb6bc:	4611      	mov	r1, r2
   bb6be:	f7ff bf13 	b.w	bb4e8 <network_get_listen_timeout>

000bb6c2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb6c2:	6840      	ldr	r0, [r0, #4]
   bb6c4:	2200      	movs	r2, #0
   bb6c6:	f7ff bf07 	b.w	bb4d8 <network_set_listen_timeout>

000bb6ca <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb6ca:	6840      	ldr	r0, [r0, #4]
   bb6cc:	2200      	movs	r2, #0
   bb6ce:	f081 0101 	eor.w	r1, r1, #1
   bb6d2:	f7ff bef1 	b.w	bb4b8 <network_listen>

000bb6d6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb6d6:	2300      	movs	r3, #0
   bb6d8:	6840      	ldr	r0, [r0, #4]
   bb6da:	461a      	mov	r2, r3
   bb6dc:	4619      	mov	r1, r3
   bb6de:	f7ff bee3 	b.w	bb4a8 <network_off>

000bb6e2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb6e2:	2300      	movs	r3, #0
   bb6e4:	6840      	ldr	r0, [r0, #4]
   bb6e6:	461a      	mov	r2, r3
   bb6e8:	4619      	mov	r1, r3
   bb6ea:	f7ff bed5 	b.w	bb498 <network_on>

000bb6ee <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb6ee:	2200      	movs	r2, #0
   bb6f0:	6840      	ldr	r0, [r0, #4]
   bb6f2:	4611      	mov	r1, r2
   bb6f4:	f7ff beb8 	b.w	bb468 <network_connecting>

000bb6f8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb6f8:	6840      	ldr	r0, [r0, #4]
   bb6fa:	2200      	movs	r2, #0
   bb6fc:	2102      	movs	r1, #2
   bb6fe:	f7ff bebb 	b.w	bb478 <network_disconnect>

000bb702 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb702:	2300      	movs	r3, #0
   bb704:	6840      	ldr	r0, [r0, #4]
   bb706:	461a      	mov	r2, r3
   bb708:	f7ff bea6 	b.w	bb458 <network_connect>

000bb70c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bb70c:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bb70e:	4b13      	ldr	r3, [pc, #76]	; (bb75c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bb710:	6003      	str	r3, [r0, #0]
   bb712:	2518      	movs	r5, #24
   bb714:	3330      	adds	r3, #48	; 0x30
   bb716:	b086      	sub	sp, #24
   bb718:	460e      	mov	r6, r1
   bb71a:	6043      	str	r3, [r0, #4]
   bb71c:	462a      	mov	r2, r5
   bb71e:	2100      	movs	r1, #0
   bb720:	4604      	mov	r4, r0
   bb722:	3008      	adds	r0, #8
   bb724:	f003 fe46 	bl	bf3b4 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bb728:	2200      	movs	r2, #0
   bb72a:	6870      	ldr	r0, [r6, #4]
   bb72c:	4611      	mov	r1, r2
   bb72e:	f7ff feab 	bl	bb488 <network_ready>
   bb732:	b178      	cbz	r0, bb754 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bb734:	2100      	movs	r1, #0
   bb736:	462a      	mov	r2, r5
   bb738:	4668      	mov	r0, sp
   bb73a:	f003 fe3b 	bl	bf3b4 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bb73e:	4669      	mov	r1, sp
   bb740:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bb742:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bb746:	f7ff fabb 	bl	bacc0 <cellular_signal>
   bb74a:	b918      	cbnz	r0, bb754 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bb74c:	4669      	mov	r1, sp
   bb74e:	4620      	mov	r0, r4
   bb750:	f000 f8b8 	bl	bb8c4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bb754:	4620      	mov	r0, r4
   bb756:	b006      	add	sp, #24
   bb758:	bd70      	pop	{r4, r5, r6, pc}
   bb75a:	bf00      	nop
   bb75c:	000c0f7c 	.word	0x000c0f7c

000bb760 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bb760:	4b08      	ldr	r3, [pc, #32]	; (bb784 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bb762:	b510      	push	{r4, lr}
   bb764:	2428      	movs	r4, #40	; 0x28
   bb766:	4622      	mov	r2, r4
   bb768:	4618      	mov	r0, r3
   bb76a:	2100      	movs	r1, #0
   bb76c:	f003 fe22 	bl	bf3b4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bb770:	4b05      	ldr	r3, [pc, #20]	; (bb788 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bb772:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bb774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb778:	6042      	str	r2, [r0, #4]
   bb77a:	2204      	movs	r2, #4
   bb77c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bb77e:	4a03      	ldr	r2, [pc, #12]	; (bb78c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bb780:	601a      	str	r2, [r3, #0]
   bb782:	bd10      	pop	{r4, pc}
   bb784:	2003e588 	.word	0x2003e588
   bb788:	2003e580 	.word	0x2003e580
   bb78c:	000c0f40 	.word	0x000c0f40

000bb790 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bb790:	4770      	bx	lr

000bb792 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bb792:	7b00      	ldrb	r0, [r0, #12]
   bb794:	4770      	bx	lr

000bb796 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb796:	7b03      	ldrb	r3, [r0, #12]
   bb798:	b14b      	cbz	r3, bb7ae <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bb79a:	6903      	ldr	r3, [r0, #16]
   bb79c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb7a0:	d005      	beq.n	bb7ae <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb7a2:	6980      	ldr	r0, [r0, #24]
   bb7a4:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bb7a8:	bf18      	it	ne
   bb7aa:	2001      	movne	r0, #1
   bb7ac:	4770      	bx	lr
   bb7ae:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bb7b0:	4770      	bx	lr

000bb7b2 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bb7b2:	6803      	ldr	r3, [r0, #0]
   bb7b4:	6a1b      	ldr	r3, [r3, #32]
   bb7b6:	4718      	bx	r3

000bb7b8 <_ZNK14CellularSignal7printToER5Print>:
{
   bb7b8:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bb7ba:	6803      	ldr	r3, [r0, #0]
{
   bb7bc:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bb7be:	691b      	ldr	r3, [r3, #16]
{
   bb7c0:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bb7c2:	4798      	blx	r3
   bb7c4:	2102      	movs	r1, #2
   bb7c6:	4628      	mov	r0, r5
   bb7c8:	f002 f8ee 	bl	bd9a8 <_ZN5Print5printEfi>
    n += p.print(',');
   bb7cc:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bb7ce:	4604      	mov	r4, r0
    n += p.print(',');
   bb7d0:	4628      	mov	r0, r5
   bb7d2:	f001 fff3 	bl	bd7bc <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bb7d6:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bb7d8:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bb7da:	699b      	ldr	r3, [r3, #24]
   bb7dc:	4630      	mov	r0, r6
   bb7de:	4798      	blx	r3
   bb7e0:	2102      	movs	r1, #2
   bb7e2:	4628      	mov	r0, r5
   bb7e4:	f002 f8e0 	bl	bd9a8 <_ZN5Print5printEfi>
}
   bb7e8:	4420      	add	r0, r4
   bb7ea:	bd70      	pop	{r4, r5, r6, pc}

000bb7ec <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bb7ec:	f1a0 0004 	sub.w	r0, r0, #4
   bb7f0:	f7ff bfe2 	b.w	bb7b8 <_ZNK14CellularSignal7printToER5Print>

000bb7f4 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bb7f4:	b510      	push	{r4, lr}
   bb7f6:	2120      	movs	r1, #32
   bb7f8:	4604      	mov	r4, r0
   bb7fa:	f7f8 fc50 	bl	b409e <_ZdlPvj>
   bb7fe:	4620      	mov	r0, r4
   bb800:	bd10      	pop	{r4, pc}
	...

000bb804 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bb804:	7b03      	ldrb	r3, [r0, #12]
   bb806:	b17b      	cbz	r3, bb828 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bb808:	6943      	ldr	r3, [r0, #20]
   bb80a:	2b00      	cmp	r3, #0
   bb80c:	db0c      	blt.n	bb828 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bb80e:	ee07 3a90 	vmov	s15, r3
   bb812:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb830 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bb816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb81a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb81e:	eddf 7a05 	vldr	s15, [pc, #20]	; bb834 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bb822:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb826:	4770      	bx	lr
    return -1.0f;
   bb828:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb82c:	4770      	bx	lr
   bb82e:	bf00      	nop
   bb830:	477fff00 	.word	0x477fff00
   bb834:	42c80000 	.word	0x42c80000

000bb838 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bb838:	7b03      	ldrb	r3, [r0, #12]
   bb83a:	b163      	cbz	r3, bb856 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bb83c:	6903      	ldr	r3, [r0, #16]
   bb83e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb842:	d008      	beq.n	bb856 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bb844:	ee07 3a90 	vmov	s15, r3
   bb848:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb85c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bb84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb850:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb854:	4770      	bx	lr
    return 0.0f;
   bb856:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb860 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bb85a:	4770      	bx	lr
   bb85c:	42c80000 	.word	0x42c80000
   bb860:	00000000 	.word	0x00000000

000bb864 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bb864:	7b03      	ldrb	r3, [r0, #12]
   bb866:	b17b      	cbz	r3, bb888 <_ZNK14CellularSignal10getQualityEv+0x24>
   bb868:	69c3      	ldr	r3, [r0, #28]
   bb86a:	2b00      	cmp	r3, #0
   bb86c:	db0c      	blt.n	bb888 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bb86e:	ee07 3a90 	vmov	s15, r3
   bb872:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb890 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bb876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb87a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb87e:	eddf 7a05 	vldr	s15, [pc, #20]	; bb894 <_ZNK14CellularSignal10getQualityEv+0x30>
   bb882:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb886:	4770      	bx	lr
    return -1.0f;
   bb888:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb88c:	4770      	bx	lr
   bb88e:	bf00      	nop
   bb890:	477fff00 	.word	0x477fff00
   bb894:	42c80000 	.word	0x42c80000

000bb898 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bb898:	7b03      	ldrb	r3, [r0, #12]
   bb89a:	b163      	cbz	r3, bb8b6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bb89c:	6983      	ldr	r3, [r0, #24]
   bb89e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb8a2:	d008      	beq.n	bb8b6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bb8a4:	ee07 3a90 	vmov	s15, r3
   bb8a8:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb8bc <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bb8ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb8b0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb8b4:	4770      	bx	lr
    return 0.0f;
   bb8b6:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb8c0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bb8ba:	4770      	bx	lr
   bb8bc:	42c80000 	.word	0x42c80000
   bb8c0:	00000000 	.word	0x00000000

000bb8c4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bb8c4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bb8c6:	460d      	mov	r5, r1
   bb8c8:	f100 0408 	add.w	r4, r0, #8
   bb8cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb8ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb8d0:	e895 0003 	ldmia.w	r5, {r0, r1}
   bb8d4:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bb8d8:	2001      	movs	r0, #1
   bb8da:	bd30      	pop	{r4, r5, pc}

000bb8dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb8dc:	4770      	bx	lr

000bb8de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bb8de:	2000      	movs	r0, #0
   bb8e0:	4770      	bx	lr

000bb8e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb8e2:	b510      	push	{r4, lr}
   bb8e4:	2110      	movs	r1, #16
   bb8e6:	4604      	mov	r4, r0
   bb8e8:	f7f8 fbd9 	bl	b409e <_ZdlPvj>
   bb8ec:	4620      	mov	r0, r4
   bb8ee:	bd10      	pop	{r4, pc}

000bb8f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bb8f0:	b508      	push	{r3, lr}
      { delete this; }
   bb8f2:	f7ff fff6 	bl	bb8e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bb8f6:	bd08      	pop	{r3, pc}

000bb8f8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bb8f8:	b530      	push	{r4, r5, lr}
        type_(type) {
   bb8fa:	2200      	movs	r2, #0
   bb8fc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bb900:	6002      	str	r2, [r0, #0]
   bb902:	8084      	strh	r4, [r0, #4]
   bb904:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bb906:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb908:	680c      	ldr	r4, [r1, #0]
   bb90a:	8085      	strh	r5, [r0, #4]
   bb90c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bb90e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bb910:	bd30      	pop	{r4, r5, pc}

000bb912 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bb912:	b510      	push	{r4, lr}
   bb914:	4604      	mov	r4, r0
    free((void*)msg_);
   bb916:	6800      	ldr	r0, [r0, #0]
   bb918:	f7ff fe06 	bl	bb528 <free>
}
   bb91c:	4620      	mov	r0, r4
   bb91e:	bd10      	pop	{r4, pc}

000bb920 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bb920:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bb922:	68c4      	ldr	r4, [r0, #12]
   bb924:	b1f4      	cbz	r4, bb964 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bb926:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bb928:	2b02      	cmp	r3, #2
   bb92a:	d103      	bne.n	bb934 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bb92c:	f104 000c 	add.w	r0, r4, #12
   bb930:	f7ff ffef 	bl	bb912 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bb934:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bb936:	b135      	cbz	r5, bb946 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bb938:	4628      	mov	r0, r5
   bb93a:	f7f9 f95b 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   bb93e:	2110      	movs	r1, #16
   bb940:	4628      	mov	r0, r5
   bb942:	f7f8 fbac 	bl	b409e <_ZdlPvj>
   bb946:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bb948:	b135      	cbz	r5, bb958 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bb94a:	4628      	mov	r0, r5
   bb94c:	f7f9 f952 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
   bb950:	2110      	movs	r1, #16
   bb952:	4628      	mov	r0, r5
   bb954:	f7f8 fba3 	bl	b409e <_ZdlPvj>
   bb958:	4620      	mov	r0, r4
   bb95a:	2114      	movs	r1, #20
   bb95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb960:	f7f8 bb9d 	b.w	b409e <_ZdlPvj>
   bb964:	bd38      	pop	{r3, r4, r5, pc}

000bb966 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bb966:	b510      	push	{r4, lr}
   bb968:	b088      	sub	sp, #32
   bb96a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bb96c:	4668      	mov	r0, sp
   bb96e:	f002 f988 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bb972:	4669      	mov	r1, sp
   bb974:	a804      	add	r0, sp, #16
   bb976:	f002 f9cf 	bl	bdd18 <_ZN6StringC1ERKS_>
   bb97a:	a804      	add	r0, sp, #16
   bb97c:	47a0      	blx	r4
   bb97e:	4604      	mov	r4, r0
   bb980:	a804      	add	r0, sp, #16
   bb982:	f002 f933 	bl	bdbec <_ZN6StringD1Ev>
    String p(param);
   bb986:	4668      	mov	r0, sp
   bb988:	f002 f930 	bl	bdbec <_ZN6StringD1Ev>
}
   bb98c:	4620      	mov	r0, r4
   bb98e:	b008      	add	sp, #32
   bb990:	bd10      	pop	{r4, pc}

000bb992 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bb992:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bb994:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bb996:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bb99a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bb99c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bb99e:	461a      	mov	r2, r3
   bb9a0:	4669      	mov	r1, sp
   bb9a2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bb9a4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bb9a8:	f8ad 4000 	strh.w	r4, [sp]
   bb9ac:	f7ff fcf4 	bl	bb398 <spark_function>
}
   bb9b0:	b004      	add	sp, #16
   bb9b2:	bd10      	pop	{r4, pc}

000bb9b4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bb9b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bb9b6:	230c      	movs	r3, #12
   bb9b8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bb9bc:	6803      	ldr	r3, [r0, #0]
   bb9be:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bb9c2:	7a03      	ldrb	r3, [r0, #8]
   bb9c4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bb9c8:	6843      	ldr	r3, [r0, #4]
   bb9ca:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bb9cc:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bb9ce:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bb9d0:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb9d4:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bb9d6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bb9da:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb9de:	f7ff fd33 	bl	bb448 <spark_cloud_disconnect>
}
   bb9e2:	b005      	add	sp, #20
   bb9e4:	f85d fb04 	ldr.w	pc, [sp], #4

000bb9e8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb9e8:	680b      	ldr	r3, [r1, #0]
   bb9ea:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bb9ec:	684b      	ldr	r3, [r1, #4]
   bb9ee:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bb9f0:	b113      	cbz	r3, bb9f8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bb9f2:	685a      	ldr	r2, [r3, #4]
   bb9f4:	3201      	adds	r2, #1
   bb9f6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb9f8:	4770      	bx	lr

000bb9fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bb9fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb9fc:	4604      	mov	r4, r0
   bb9fe:	4668      	mov	r0, sp
   bba00:	460d      	mov	r5, r1
   bba02:	f7ff fff1 	bl	bb9e8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bba06:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bba08:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bba0a:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bba0c:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bba0e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bba10:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bba12:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bba14:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bba16:	f7fa fc03 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bba1a:	b135      	cbz	r5, bba2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bba1c:	1d28      	adds	r0, r5, #4
   bba1e:	f7fa fbff 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bba22:	2108      	movs	r1, #8
   bba24:	4628      	mov	r0, r5
   bba26:	f7f8 fb3a 	bl	b409e <_ZdlPvj>
        return p;
    }
   bba2a:	4620      	mov	r0, r4
   bba2c:	b003      	add	sp, #12
   bba2e:	bd30      	pop	{r4, r5, pc}

000bba30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bba30:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bba32:	b510      	push	{r4, lr}
      if (_M_empty())
   bba34:	b90a      	cbnz	r2, bba3a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bba36:	f002 ff8b 	bl	be950 <_ZSt25__throw_bad_function_callv>
    }
   bba3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bba3e:	68c3      	ldr	r3, [r0, #12]
   bba40:	4718      	bx	r3

000bba42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bba42:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bba44:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bba46:	f100 0110 	add.w	r1, r0, #16
   bba4a:	f7ff fff1 	bl	bba30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bba4e:	bd08      	pop	{r3, pc}

000bba50 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bba50:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bba52:	b510      	push	{r4, lr}
      if (_M_empty())
   bba54:	b90a      	cbnz	r2, bba5a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bba56:	f002 ff7b 	bl	be950 <_ZSt25__throw_bad_function_callv>
    }
   bba5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bba5e:	68c3      	ldr	r3, [r0, #12]
   bba60:	4718      	bx	r3

000bba62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bba62:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bba64:	6800      	ldr	r0, [r0, #0]
   bba66:	f100 0110 	add.w	r1, r0, #16
   bba6a:	f7ff fff1 	bl	bba50 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bba6e:	bd08      	pop	{r3, pc}

000bba70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bba70:	b538      	push	{r3, r4, r5, lr}
   bba72:	2300      	movs	r3, #0
   bba74:	4604      	mov	r4, r0
   bba76:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bba78:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bba7a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bba7c:	f7f8 fb0b 	bl	b4096 <_Znwj>
   bba80:	b128      	cbz	r0, bba8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bba82:	2301      	movs	r3, #1
   bba84:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bba88:	4b02      	ldr	r3, [pc, #8]	; (bba94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bba8a:	6003      	str	r3, [r0, #0]
   bba8c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bba8e:	6020      	str	r0, [r4, #0]
	}
   bba90:	4620      	mov	r0, r4
   bba92:	bd38      	pop	{r3, r4, r5, pc}
   bba94:	000c0fb8 	.word	0x000c0fb8

000bba98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bba98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bba9a:	2300      	movs	r3, #0
   bba9c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bba9e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bbaa0:	4604      	mov	r4, r0
   bbaa2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bbaa4:	b12b      	cbz	r3, bbab2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbaa6:	2202      	movs	r2, #2
   bbaa8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbaaa:	68eb      	ldr	r3, [r5, #12]
   bbaac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bbaae:	68ab      	ldr	r3, [r5, #8]
   bbab0:	60a3      	str	r3, [r4, #8]
    }
   bbab2:	4620      	mov	r0, r4
   bbab4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bbab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bbab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbaba:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bbabc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bbabe:	4668      	mov	r0, sp
   bbac0:	f7ff ff1a 	bl	bb8f8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bbac4:	f04f 0302 	mov.w	r3, #2
   bbac8:	e8d4 2f4f 	ldrexb	r2, [r4]
   bbacc:	2a00      	cmp	r2, #0
   bbace:	d103      	bne.n	bbad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bbad0:	e8c4 3f41 	strexb	r1, r3, [r4]
   bbad4:	2900      	cmp	r1, #0
   bbad6:	d1f7      	bne.n	bbac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bbad8:	d125      	bne.n	bbb26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bbada:	f104 050c 	add.w	r5, r4, #12
   bbade:	4669      	mov	r1, sp
   bbae0:	4628      	mov	r0, r5
   bbae2:	f7ff ff09 	bl	bb8f8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bbae6:	f3bf 8f5b 	dmb	ish
   bbaea:	2301      	movs	r3, #1
   bbaec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bbaee:	2000      	movs	r0, #0
   bbaf0:	f104 0308 	add.w	r3, r4, #8
   bbaf4:	f3bf 8f5b 	dmb	ish
   bbaf8:	e853 6f00 	ldrex	r6, [r3]
   bbafc:	e843 0200 	strex	r2, r0, [r3]
   bbb00:	2a00      	cmp	r2, #0
   bbb02:	d1f9      	bne.n	bbaf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bbb04:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bbb08:	b16e      	cbz	r6, bbb26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bbb0a:	f7ff fbeb 	bl	bb2e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bbb0e:	b178      	cbz	r0, bbb30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bbb10:	4629      	mov	r1, r5
   bbb12:	4630      	mov	r0, r6
   bbb14:	f7ff ff8c 	bl	bba30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bbb18:	4630      	mov	r0, r6
   bbb1a:	f7f9 f86b 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bbb1e:	2110      	movs	r1, #16
   bbb20:	4630      	mov	r0, r6
   bbb22:	f7f8 fabc 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bbb26:	4668      	mov	r0, sp
   bbb28:	f7ff fef3 	bl	bb912 <_ZN8particle5ErrorD1Ev>
    }
   bbb2c:	b009      	add	sp, #36	; 0x24
   bbb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bbb30:	4631      	mov	r1, r6
   bbb32:	a802      	add	r0, sp, #8
   bbb34:	f7ff ffb0 	bl	bba98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bbb38:	68e0      	ldr	r0, [r4, #12]
   bbb3a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbb3e:	b108      	cbz	r0, bbb44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bbb40:	f003 fcd6 	bl	bf4f0 <strdup>
        type_(type) {
   bbb44:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bbb46:	2010      	movs	r0, #16
   bbb48:	f8ad 501c 	strh.w	r5, [sp, #28]
   bbb4c:	f7f8 faa3 	bl	b4096 <_Znwj>
   bbb50:	4605      	mov	r5, r0
   bbb52:	b1e8      	cbz	r0, bbb90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bbb54:	2700      	movs	r7, #0
   bbb56:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbb58:	2018      	movs	r0, #24
   bbb5a:	f7f8 fa9c 	bl	b4096 <_Znwj>
   bbb5e:	4604      	mov	r4, r0
   bbb60:	b188      	cbz	r0, bbb86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bbb62:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bbb64:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bbb66:	a802      	add	r0, sp, #8
   bbb68:	f7fb fd9f 	bl	b76aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbb6c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bbb6e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbb70:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbb72:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bbb74:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bbb76:	a906      	add	r1, sp, #24
   bbb78:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbb7a:	60e3      	str	r3, [r4, #12]
   bbb7c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bbb80:	9205      	str	r2, [sp, #20]
   bbb82:	f7ff feb9 	bl	bb8f8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bbb86:	4b08      	ldr	r3, [pc, #32]	; (bbba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bbb88:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bbb8a:	4b08      	ldr	r3, [pc, #32]	; (bbbac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbb8c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bbb8e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bbb90:	a806      	add	r0, sp, #24
   bbb92:	f7ff febe 	bl	bb912 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bbb96:	a802      	add	r0, sp, #8
   bbb98:	f7f9 f82c 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bbb9c:	2200      	movs	r2, #0
   bbb9e:	4629      	mov	r1, r5
   bbba0:	4803      	ldr	r0, [pc, #12]	; (bbbb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bbba2:	f7ff fba7 	bl	bb2f4 <application_thread_invoke>
   bbba6:	e7b7      	b.n	bbb18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bbba8:	000bba43 	.word	0x000bba43
   bbbac:	000bbcc5 	.word	0x000bbcc5
   bbbb0:	000bb61f 	.word	0x000bb61f

000bbbb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bbbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbbb8:	b08b      	sub	sp, #44	; 0x2c
   bbbba:	4605      	mov	r5, r0
   bbbbc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bbbc0:	460f      	mov	r7, r1
   bbbc2:	4690      	mov	r8, r2
   bbbc4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bbbc6:	f7ff fbff 	bl	bb3c8 <spark_cloud_flag_connected>
   bbbca:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bbbcc:	4683      	mov	fp, r0
   bbbce:	bb38      	cbnz	r0, bbc20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bbbd0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bbbd4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bbbd6:	a905      	add	r1, sp, #20
   bbbd8:	4630      	mov	r0, r6
   bbbda:	f8ad 3018 	strh.w	r3, [sp, #24]
   bbbde:	f7ff fe8b 	bl	bb8f8 <_ZN8particle5ErrorC1EOS0_>
   bbbe2:	2014      	movs	r0, #20
   bbbe4:	f7f8 fa57 	bl	b4096 <_Znwj>
   bbbe8:	4604      	mov	r4, r0
   bbbea:	b148      	cbz	r0, bbc00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bbbec:	2302      	movs	r3, #2
   bbbee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbbf0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bbbf2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbbf6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bbbf8:	4631      	mov	r1, r6
   bbbfa:	300c      	adds	r0, #12
   bbbfc:	f7ff fe7c 	bl	bb8f8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbc00:	4628      	mov	r0, r5
	: __shared_count(__p)
   bbc02:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbc04:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bbc08:	f7ff ff32 	bl	bba70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bbc0c:	4630      	mov	r0, r6
   bbc0e:	f7ff fe80 	bl	bb912 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bbc12:	a805      	add	r0, sp, #20
   bbc14:	f7ff fe7d 	bl	bb912 <_ZN8particle5ErrorD1Ev>
}
   bbc18:	4628      	mov	r0, r5
   bbc1a:	b00b      	add	sp, #44	; 0x2c
   bbc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bbc20:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bbc22:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bbc24:	2014      	movs	r0, #20
   bbc26:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bbc2a:	9307      	str	r3, [sp, #28]
   bbc2c:	f7f8 fa33 	bl	b4096 <_Znwj>
   bbc30:	4601      	mov	r1, r0
   bbc32:	b118      	cbz	r0, bbc3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bbc34:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbc38:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbc3a:	7044      	strb	r4, [r0, #1]
   bbc3c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbc3e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bbc40:	f7ff ff16 	bl	bba70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bbc44:	4b1e      	ldr	r3, [pc, #120]	; (bbcc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bbc46:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bbc48:	2008      	movs	r0, #8
   bbc4a:	f7f8 fa24 	bl	b4096 <_Znwj>
   bbc4e:	4604      	mov	r4, r0
   bbc50:	b110      	cbz	r0, bbc58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bbc52:	a903      	add	r1, sp, #12
   bbc54:	f7ff fec8 	bl	bb9e8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bbc58:	9600      	str	r6, [sp, #0]
   bbc5a:	fa5f f38a 	uxtb.w	r3, sl
   bbc5e:	464a      	mov	r2, r9
   bbc60:	4641      	mov	r1, r8
   bbc62:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bbc64:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bbc66:	f7ff fbbf 	bl	bb3e8 <spark_send_event>
   bbc6a:	b9b8      	cbnz	r0, bbc9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bbc6c:	9b03      	ldr	r3, [sp, #12]
   bbc6e:	785b      	ldrb	r3, [r3, #1]
   bbc70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bbc74:	b993      	cbnz	r3, bbc9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bbc76:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bbc7a:	a905      	add	r1, sp, #20
   bbc7c:	a803      	add	r0, sp, #12
   bbc7e:	9205      	str	r2, [sp, #20]
   bbc80:	f8ad 3018 	strh.w	r3, [sp, #24]
   bbc84:	f7ff ff18 	bl	bbab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bbc88:	a805      	add	r0, sp, #20
   bbc8a:	f7ff fe42 	bl	bb912 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bbc8e:	a805      	add	r0, sp, #20
   bbc90:	9909      	ldr	r1, [sp, #36]	; 0x24
   bbc92:	f7ff feb2 	bl	bb9fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bbc96:	a806      	add	r0, sp, #24
   bbc98:	f7fa fac2 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbc9c:	a903      	add	r1, sp, #12
   bbc9e:	a805      	add	r0, sp, #20
   bbca0:	f7ff fea2 	bl	bb9e8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbca4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bbca6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbca8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bbcaa:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bbcac:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bbcae:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bbcb0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bbcb2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bbcb4:	f7fa fab4 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbcb8:	a804      	add	r0, sp, #16
   bbcba:	f7fa fab1 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bbcbe:	e7ab      	b.n	bbc18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bbcc0:	000bbd41 	.word	0x000bbd41

000bbcc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bbcc4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bbcc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbcc8:	4605      	mov	r5, r0
	switch (__op)
   bbcca:	d103      	bne.n	bbcd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bbccc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bbcce:	6003      	str	r3, [r0, #0]
      }
   bbcd0:	2000      	movs	r0, #0
   bbcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bbcd4:	2a02      	cmp	r2, #2
   bbcd6:	d010      	beq.n	bbcfa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bbcd8:	2a03      	cmp	r2, #3
   bbcda:	d1f9      	bne.n	bbcd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bbcdc:	6804      	ldr	r4, [r0, #0]
   bbcde:	2c00      	cmp	r4, #0
   bbce0:	d0f6      	beq.n	bbcd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bbce2:	f104 0010 	add.w	r0, r4, #16
   bbce6:	f7ff fe14 	bl	bb912 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bbcea:	4620      	mov	r0, r4
   bbcec:	f7f8 ff82 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bbcf0:	2118      	movs	r1, #24
   bbcf2:	4620      	mov	r0, r4
   bbcf4:	f7f8 f9d3 	bl	b409e <_ZdlPvj>
   bbcf8:	e7ea      	b.n	bbcd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bbcfa:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bbcfc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bbcfe:	f7f8 f9ca 	bl	b4096 <_Znwj>
   bbd02:	4604      	mov	r4, r0
   bbd04:	b150      	cbz	r0, bbd1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bbd06:	4631      	mov	r1, r6
   bbd08:	f7ff fec6 	bl	bba98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bbd0c:	6930      	ldr	r0, [r6, #16]
   bbd0e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbd12:	b108      	cbz	r0, bbd18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bbd14:	f003 fbec 	bl	bf4f0 <strdup>
        type_(type) {
   bbd18:	6120      	str	r0, [r4, #16]
   bbd1a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bbd1c:	602c      	str	r4, [r5, #0]
	}
   bbd1e:	e7d7      	b.n	bbcd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bbd20 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bbd20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bbd22:	2300      	movs	r3, #0
   bbd24:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bbd26:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bbd28:	4604      	mov	r4, r0
   bbd2a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bbd2c:	b12b      	cbz	r3, bbd3a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbd2e:	2202      	movs	r2, #2
   bbd30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbd32:	68eb      	ldr	r3, [r5, #12]
   bbd34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bbd36:	68ab      	ldr	r3, [r5, #8]
   bbd38:	60a3      	str	r3, [r4, #8]
    }
   bbd3a:	4620      	mov	r0, r4
   bbd3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bbd40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bbd40:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbd42:	b089      	sub	sp, #36	; 0x24
   bbd44:	4604      	mov	r4, r0
   bbd46:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bbd48:	a801      	add	r0, sp, #4
   bbd4a:	4611      	mov	r1, r2
   bbd4c:	f7ff fe55 	bl	bb9fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bbd50:	b1a4      	cbz	r4, bbd7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bbd52:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbd54:	b11d      	cbz	r5, bbd5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bbd56:	4628      	mov	r0, r5
   bbd58:	f003 fbca 	bl	bf4f0 <strdup>
   bbd5c:	4605      	mov	r5, r0
   bbd5e:	a801      	add	r0, sp, #4
   bbd60:	a903      	add	r1, sp, #12
        type_(type) {
   bbd62:	9503      	str	r5, [sp, #12]
   bbd64:	f8ad 4010 	strh.w	r4, [sp, #16]
   bbd68:	f7ff fea6 	bl	bbab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bbd6c:	a803      	add	r0, sp, #12
   bbd6e:	f7ff fdd0 	bl	bb912 <_ZN8particle5ErrorD1Ev>
   bbd72:	a802      	add	r0, sp, #8
   bbd74:	f7fa fa54 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbd78:	b009      	add	sp, #36	; 0x24
   bbd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bbd7c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bbd7e:	2301      	movs	r3, #1
   bbd80:	e8d5 2f4f 	ldrexb	r2, [r5]
   bbd84:	2a00      	cmp	r2, #0
   bbd86:	d103      	bne.n	bbd90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bbd88:	e8c5 3f41 	strexb	r1, r3, [r5]
   bbd8c:	2900      	cmp	r1, #0
   bbd8e:	d1f7      	bne.n	bbd80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bbd90:	d1ef      	bne.n	bbd72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bbd92:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bbd94:	f3bf 8f5b 	dmb	ish
   bbd98:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bbd9a:	1d2b      	adds	r3, r5, #4
   bbd9c:	f3bf 8f5b 	dmb	ish
   bbda0:	e853 6f00 	ldrex	r6, [r3]
   bbda4:	e843 4200 	strex	r2, r4, [r3]
   bbda8:	2a00      	cmp	r2, #0
   bbdaa:	d1f9      	bne.n	bbda0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bbdac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bbdb0:	2e00      	cmp	r6, #0
   bbdb2:	d0de      	beq.n	bbd72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bbdb4:	4620      	mov	r0, r4
   bbdb6:	f7ff fa95 	bl	bb2e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bbdba:	4607      	mov	r7, r0
   bbdbc:	b160      	cbz	r0, bbdd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bbdbe:	f105 010c 	add.w	r1, r5, #12
   bbdc2:	4630      	mov	r0, r6
   bbdc4:	f7ff fe44 	bl	bba50 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bbdc8:	4630      	mov	r0, r6
   bbdca:	f7f8 ff13 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bbdce:	2110      	movs	r1, #16
   bbdd0:	4630      	mov	r0, r6
   bbdd2:	f7f8 f964 	bl	b409e <_ZdlPvj>
   bbdd6:	e7cc      	b.n	bbd72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bbdd8:	4631      	mov	r1, r6
   bbdda:	a803      	add	r0, sp, #12
   bbddc:	f7ff ffa0 	bl	bbd20 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bbde0:	7b2b      	ldrb	r3, [r5, #12]
   bbde2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bbde6:	2010      	movs	r0, #16
   bbde8:	f7f8 f955 	bl	b4096 <_Znwj>
   bbdec:	4605      	mov	r5, r0
   bbdee:	b1d0      	cbz	r0, bbe26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bbdf0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbdf2:	2014      	movs	r0, #20
   bbdf4:	f7f8 f94f 	bl	b4096 <_Znwj>
   bbdf8:	4604      	mov	r4, r0
   bbdfa:	b178      	cbz	r0, bbe1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bbdfc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bbdfe:	4601      	mov	r1, r0
   bbe00:	a803      	add	r0, sp, #12
   bbe02:	f7fb fc52 	bl	b76aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbe06:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bbe08:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbe0a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbe0c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bbe0e:	9205      	str	r2, [sp, #20]
   bbe10:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbe12:	60e3      	str	r3, [r4, #12]
   bbe14:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bbe18:	9206      	str	r2, [sp, #24]
   bbe1a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bbe1c:	4b06      	ldr	r3, [pc, #24]	; (bbe38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bbe1e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bbe20:	4b06      	ldr	r3, [pc, #24]	; (bbe3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbe22:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bbe24:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bbe26:	a803      	add	r0, sp, #12
   bbe28:	f7f8 fee4 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bbe2c:	2200      	movs	r2, #0
   bbe2e:	4629      	mov	r1, r5
   bbe30:	4803      	ldr	r0, [pc, #12]	; (bbe40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bbe32:	f7ff fa5f 	bl	bb2f4 <application_thread_invoke>
   bbe36:	e7c7      	b.n	bbdc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bbe38:	000bba63 	.word	0x000bba63
   bbe3c:	000bbe45 	.word	0x000bbe45
   bbe40:	000bb61f 	.word	0x000bb61f

000bbe44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bbe44:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bbe46:	b570      	push	{r4, r5, r6, lr}
   bbe48:	4604      	mov	r4, r0
	switch (__op)
   bbe4a:	d103      	bne.n	bbe54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bbe4c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bbe4e:	6003      	str	r3, [r0, #0]
      }
   bbe50:	2000      	movs	r0, #0
   bbe52:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bbe54:	2a02      	cmp	r2, #2
   bbe56:	d00c      	beq.n	bbe72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bbe58:	2a03      	cmp	r2, #3
   bbe5a:	d1f9      	bne.n	bbe50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bbe5c:	6804      	ldr	r4, [r0, #0]
   bbe5e:	2c00      	cmp	r4, #0
   bbe60:	d0f6      	beq.n	bbe50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bbe62:	4620      	mov	r0, r4
   bbe64:	f7f8 fec6 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bbe68:	2114      	movs	r1, #20
   bbe6a:	4620      	mov	r0, r4
   bbe6c:	f7f8 f917 	bl	b409e <_ZdlPvj>
   bbe70:	e7ee      	b.n	bbe50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bbe72:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bbe74:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bbe76:	f7f8 f90e 	bl	b4096 <_Znwj>
   bbe7a:	4605      	mov	r5, r0
   bbe7c:	b120      	cbz	r0, bbe88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bbe7e:	4631      	mov	r1, r6
   bbe80:	f7ff ff4e 	bl	bbd20 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bbe84:	7c33      	ldrb	r3, [r6, #16]
   bbe86:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bbe88:	6025      	str	r5, [r4, #0]
	}
   bbe8a:	e7e1      	b.n	bbe50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bbe8c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bbe8c:	2200      	movs	r2, #0
   bbe8e:	6840      	ldr	r0, [r0, #4]
   bbe90:	4611      	mov	r1, r2
   bbe92:	f7ff bb19 	b.w	bb4c8 <network_listening>

000bbe96 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bbe96:	2200      	movs	r2, #0
   bbe98:	6840      	ldr	r0, [r0, #4]
   bbe9a:	4611      	mov	r1, r2
   bbe9c:	f7ff bb24 	b.w	bb4e8 <network_get_listen_timeout>

000bbea0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bbea0:	6840      	ldr	r0, [r0, #4]
   bbea2:	2200      	movs	r2, #0
   bbea4:	f7ff bb18 	b.w	bb4d8 <network_set_listen_timeout>

000bbea8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bbea8:	6840      	ldr	r0, [r0, #4]
   bbeaa:	2200      	movs	r2, #0
   bbeac:	f081 0101 	eor.w	r1, r1, #1
   bbeb0:	f7ff bb02 	b.w	bb4b8 <network_listen>

000bbeb4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bbeb4:	2300      	movs	r3, #0
   bbeb6:	6840      	ldr	r0, [r0, #4]
   bbeb8:	461a      	mov	r2, r3
   bbeba:	4619      	mov	r1, r3
   bbebc:	f7ff baf4 	b.w	bb4a8 <network_off>

000bbec0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bbec0:	2300      	movs	r3, #0
   bbec2:	6840      	ldr	r0, [r0, #4]
   bbec4:	461a      	mov	r2, r3
   bbec6:	4619      	mov	r1, r3
   bbec8:	f7ff bae6 	b.w	bb498 <network_on>

000bbecc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bbecc:	2200      	movs	r2, #0
   bbece:	6840      	ldr	r0, [r0, #4]
   bbed0:	4611      	mov	r1, r2
   bbed2:	f7ff bad9 	b.w	bb488 <network_ready>

000bbed6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bbed6:	2200      	movs	r2, #0
   bbed8:	6840      	ldr	r0, [r0, #4]
   bbeda:	4611      	mov	r1, r2
   bbedc:	f7ff bac4 	b.w	bb468 <network_connecting>

000bbee0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bbee0:	6840      	ldr	r0, [r0, #4]
   bbee2:	2200      	movs	r2, #0
   bbee4:	2102      	movs	r1, #2
   bbee6:	f7ff bac7 	b.w	bb478 <network_disconnect>

000bbeea <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bbeea:	2300      	movs	r3, #0
   bbeec:	6840      	ldr	r0, [r0, #4]
   bbeee:	461a      	mov	r2, r3
   bbef0:	f7ff bab2 	b.w	bb458 <network_connect>

000bbef4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bbef4:	4b02      	ldr	r3, [pc, #8]	; (bbf00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bbef6:	2203      	movs	r2, #3
   bbef8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bbefa:	4a02      	ldr	r2, [pc, #8]	; (bbf04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bbefc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bbefe:	4770      	bx	lr
   bbf00:	2003e5b0 	.word	0x2003e5b0
   bbf04:	000c0fd4 	.word	0x000c0fd4

000bbf08 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bbf08:	6800      	ldr	r0, [r0, #0]
   bbf0a:	f000 b8e7 	b.w	bc0dc <_ZN7TwoWire4lockEv>

000bbf0e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bbf0e:	b510      	push	{r4, lr}
   bbf10:	4604      	mov	r4, r0
      lock_(_lock) {
   bbf12:	6001      	str	r1, [r0, #0]
   bbf14:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bbf16:	b10a      	cbz	r2, bbf1c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bbf18:	f7ff fff6 	bl	bbf08 <_ZN9FuelGauge4lockEv>
}
   bbf1c:	4620      	mov	r0, r4
   bbf1e:	bd10      	pop	{r4, pc}

000bbf20 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bbf20:	b513      	push	{r0, r1, r4, lr}
   bbf22:	4604      	mov	r4, r0
   bbf24:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bbf26:	f002 fca5 	bl	be874 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bbf2a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bbf2c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bbf2e:	4620      	mov	r0, r4
   bbf30:	f7ff ffed 	bl	bbf0e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bbf34:	4620      	mov	r0, r4
   bbf36:	b002      	add	sp, #8
   bbf38:	bd10      	pop	{r4, pc}

000bbf3a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bbf3a:	6800      	ldr	r0, [r0, #0]
   bbf3c:	f000 b8d7 	b.w	bc0ee <_ZN7TwoWire6unlockEv>

000bbf40 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bbf40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bbf44:	4604      	mov	r4, r0
   bbf46:	461d      	mov	r5, r3
   bbf48:	460f      	mov	r7, r1
   bbf4a:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bbf4c:	f7ff ffdc 	bl	bbf08 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bbf50:	2236      	movs	r2, #54	; 0x36
   bbf52:	2300      	movs	r3, #0
   bbf54:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bbf58:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bbf5a:	f04f 0801 	mov.w	r8, #1
   bbf5e:	230a      	movs	r3, #10
   bbf60:	4669      	mov	r1, sp
   bbf62:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bbf66:	f000 f89d 	bl	bc0a4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bbf6a:	6820      	ldr	r0, [r4, #0]
   bbf6c:	6803      	ldr	r3, [r0, #0]
   bbf6e:	4639      	mov	r1, r7
   bbf70:	689b      	ldr	r3, [r3, #8]
   bbf72:	4798      	blx	r3
    i2c_.write(MSB);
   bbf74:	6820      	ldr	r0, [r4, #0]
   bbf76:	6803      	ldr	r3, [r0, #0]
   bbf78:	4631      	mov	r1, r6
   bbf7a:	689b      	ldr	r3, [r3, #8]
   bbf7c:	4798      	blx	r3
    i2c_.write(LSB);
   bbf7e:	6820      	ldr	r0, [r4, #0]
   bbf80:	6803      	ldr	r3, [r0, #0]
   bbf82:	4629      	mov	r1, r5
   bbf84:	689b      	ldr	r3, [r3, #8]
   bbf86:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bbf88:	4641      	mov	r1, r8
   bbf8a:	6820      	ldr	r0, [r4, #0]
   bbf8c:	f000 f8a2 	bl	bc0d4 <_ZN7TwoWire15endTransmissionEh>
   bbf90:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bbf92:	4620      	mov	r0, r4
   bbf94:	bf0c      	ite	eq
   bbf96:	2500      	moveq	r5, #0
   bbf98:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bbf9c:	f7ff ffcd 	bl	bbf3a <_ZN9FuelGauge6unlockEv>
}
   bbfa0:	4628      	mov	r0, r5
   bbfa2:	b004      	add	sp, #16
   bbfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbfa8 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bbfa8:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bbfaa:	2240      	movs	r2, #64	; 0x40
   bbfac:	2300      	movs	r3, #0
   bbfae:	2106      	movs	r1, #6
   bbfb0:	f7ff ffc6 	bl	bbf40 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bbfb4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bbfb8:	bd08      	pop	{r3, pc}

000bbfba <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bbfba:	4770      	bx	lr

000bbfbc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bbfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbfbe:	4606      	mov	r6, r0
   bbfc0:	4615      	mov	r5, r2
   bbfc2:	460c      	mov	r4, r1
   bbfc4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bbfc6:	42bc      	cmp	r4, r7
   bbfc8:	d006      	beq.n	bbfd8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bbfca:	6833      	ldr	r3, [r6, #0]
   bbfcc:	f814 1b01 	ldrb.w	r1, [r4], #1
   bbfd0:	689b      	ldr	r3, [r3, #8]
   bbfd2:	4630      	mov	r0, r6
   bbfd4:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bbfd6:	e7f6      	b.n	bbfc6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bbfd8:	4628      	mov	r0, r5
   bbfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbfdc <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bbfdc:	7c00      	ldrb	r0, [r0, #16]
   bbfde:	2200      	movs	r2, #0
   bbfe0:	f7fe bf7e 	b.w	baee0 <hal_i2c_write>

000bbfe4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bbfe4:	7c00      	ldrb	r0, [r0, #16]
   bbfe6:	2100      	movs	r1, #0
   bbfe8:	f7fe bf82 	b.w	baef0 <hal_i2c_available>

000bbfec <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bbfec:	7c00      	ldrb	r0, [r0, #16]
   bbfee:	2100      	movs	r1, #0
   bbff0:	f7fe bf86 	b.w	baf00 <hal_i2c_read>

000bbff4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bbff4:	7c00      	ldrb	r0, [r0, #16]
   bbff6:	2100      	movs	r1, #0
   bbff8:	f7fe bf8a 	b.w	baf10 <hal_i2c_peek>

000bbffc <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bbffc:	7c00      	ldrb	r0, [r0, #16]
   bbffe:	2100      	movs	r1, #0
   bc000:	f7fe bf8e 	b.w	baf20 <hal_i2c_flush>

000bc004 <_ZN7TwoWireD0Ev>:
   bc004:	b510      	push	{r4, lr}
   bc006:	2114      	movs	r1, #20
   bc008:	4604      	mov	r4, r0
   bc00a:	f7f8 f848 	bl	b409e <_ZdlPvj>
   bc00e:	4620      	mov	r0, r4
   bc010:	bd10      	pop	{r4, pc}
	...

000bc014 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bc014:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bc016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc01a:	4604      	mov	r4, r0
   bc01c:	4608      	mov	r0, r1
   bc01e:	2100      	movs	r1, #0
   bc020:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc024:	4b03      	ldr	r3, [pc, #12]	; (bc034 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bc026:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bc028:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bc02a:	4611      	mov	r1, r2
   bc02c:	f7fe ff88 	bl	baf40 <hal_i2c_init>
}
   bc030:	4620      	mov	r0, r4
   bc032:	bd10      	pop	{r4, pc}
   bc034:	000c1010 	.word	0x000c1010

000bc038 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bc038:	2300      	movs	r3, #0
   bc03a:	7c00      	ldrb	r0, [r0, #16]
   bc03c:	461a      	mov	r2, r3
   bc03e:	4619      	mov	r1, r3
   bc040:	f7fe bf36 	b.w	baeb0 <hal_i2c_begin>

000bc044 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bc044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bc046:	2200      	movs	r2, #0
   bc048:	2314      	movs	r3, #20
   bc04a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bc04e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bc052:	780b      	ldrb	r3, [r1, #0]
   bc054:	f88d 3008 	strb.w	r3, [sp, #8]
   bc058:	684b      	ldr	r3, [r1, #4]
   bc05a:	9303      	str	r3, [sp, #12]
   bc05c:	68cb      	ldr	r3, [r1, #12]
   bc05e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bc060:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bc062:	7a0b      	ldrb	r3, [r1, #8]
   bc064:	9305      	str	r3, [sp, #20]
   bc066:	a901      	add	r1, sp, #4
   bc068:	f7fe ff82 	bl	baf70 <hal_i2c_request_ex>
}
   bc06c:	b007      	add	sp, #28
   bc06e:	f85d fb04 	ldr.w	pc, [sp], #4

000bc072 <_ZN7TwoWire11requestFromEhjh>:
{
   bc072:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bc074:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bc076:	f88d 1000 	strb.w	r1, [sp]
   bc07a:	f04f 0164 	mov.w	r1, #100	; 0x64
   bc07e:	9103      	str	r1, [sp, #12]
   bc080:	bf18      	it	ne
   bc082:	2301      	movne	r3, #1
   bc084:	4669      	mov	r1, sp
    size_ = size;
   bc086:	9201      	str	r2, [sp, #4]
   bc088:	f88d 3008 	strb.w	r3, [sp, #8]
   bc08c:	f7ff ffda 	bl	bc044 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bc090:	b005      	add	sp, #20
   bc092:	f85d fb04 	ldr.w	pc, [sp], #4

000bc096 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bc096:	7c00      	ldrb	r0, [r0, #16]
   bc098:	2200      	movs	r2, #0
   bc09a:	f7fe bf11 	b.w	baec0 <hal_i2c_begin_transmission>

000bc09e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bc09e:	b2c9      	uxtb	r1, r1
   bc0a0:	f7ff bff9 	b.w	bc096 <_ZN7TwoWire17beginTransmissionEh>

000bc0a4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bc0a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bc0a6:	2300      	movs	r3, #0
   bc0a8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bc0ac:	684a      	ldr	r2, [r1, #4]
   bc0ae:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bc0b0:	2314      	movs	r3, #20
    };
   bc0b2:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bc0b4:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bc0b8:	780b      	ldrb	r3, [r1, #0]
    };
   bc0ba:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bc0bc:	7a0a      	ldrb	r2, [r1, #8]
   bc0be:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bc0c0:	7c00      	ldrb	r0, [r0, #16]
    };
   bc0c2:	f88d 3008 	strb.w	r3, [sp, #8]
   bc0c6:	aa01      	add	r2, sp, #4
   bc0c8:	4619      	mov	r1, r3
   bc0ca:	f7fe fef9 	bl	baec0 <hal_i2c_begin_transmission>
}
   bc0ce:	b007      	add	sp, #28
   bc0d0:	f85d fb04 	ldr.w	pc, [sp], #4

000bc0d4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bc0d4:	7c00      	ldrb	r0, [r0, #16]
   bc0d6:	2200      	movs	r2, #0
   bc0d8:	f7fe befa 	b.w	baed0 <hal_i2c_end_transmission>

000bc0dc <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bc0dc:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bc0de:	2100      	movs	r1, #0
   bc0e0:	7c00      	ldrb	r0, [r0, #16]
   bc0e2:	f7fe ff35 	bl	baf50 <hal_i2c_lock>
}
   bc0e6:	fab0 f080 	clz	r0, r0
   bc0ea:	0940      	lsrs	r0, r0, #5
   bc0ec:	bd08      	pop	{r3, pc}

000bc0ee <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bc0ee:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bc0f0:	2100      	movs	r1, #0
   bc0f2:	7c00      	ldrb	r0, [r0, #16]
   bc0f4:	f7fe ff34 	bl	baf60 <hal_i2c_unlock>
}
   bc0f8:	fab0 f080 	clz	r0, r0
   bc0fc:	0940      	lsrs	r0, r0, #5
   bc0fe:	bd08      	pop	{r3, pc}

000bc100 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bc100:	4700      	bx	r0
	...

000bc104 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bc104:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bc108:	2400      	movs	r4, #0
{
   bc10a:	461d      	mov	r5, r3
   bc10c:	460f      	mov	r7, r1
   bc10e:	4690      	mov	r8, r2
   bc110:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bc112:	f7fe febd 	bl	bae90 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bc116:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc118:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bc11c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc120:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bc124:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bc128:	bfa2      	ittt	ge
   bc12a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bc12e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bc132:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc134:	4907      	ldr	r1, [pc, #28]	; (bc154 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bc136:	9400      	str	r4, [sp, #0]
   bc138:	4643      	mov	r3, r8
   bc13a:	463a      	mov	r2, r7
   bc13c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bc13e:	bfa8      	it	ge
   bc140:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc144:	f7fe fe9c 	bl	bae80 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bc148:	fab0 f080 	clz	r0, r0
   bc14c:	0940      	lsrs	r0, r0, #5
   bc14e:	b004      	add	sp, #16
   bc150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc154:	000bc101 	.word	0x000bc101

000bc158 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bc158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc15a:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bc15c:	f7fe fe98 	bl	bae90 <HAL_Interrupts_Detach>
   bc160:	4605      	mov	r5, r0
   bc162:	b970      	cbnz	r0, bc182 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bc164:	4f08      	ldr	r7, [pc, #32]	; (bc188 <_Z15detachInterruptt+0x30>)
   bc166:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bc16a:	b146      	cbz	r6, bc17e <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bc16c:	4630      	mov	r0, r6
   bc16e:	f7f8 fd41 	bl	b4bf4 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bc172:	2110      	movs	r1, #16
   bc174:	4630      	mov	r0, r6
   bc176:	f7f7 ff92 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bc17a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bc17e:	2001      	movs	r0, #1
   bc180:	e000      	b.n	bc184 <_Z15detachInterruptt+0x2c>
        return false;
   bc182:	2000      	movs	r0, #0
    }
    return true;
}
   bc184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc186:	bf00      	nop
   bc188:	2003e5b8 	.word	0x2003e5b8

000bc18c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bc18c:	4770      	bx	lr

000bc18e <_ZN9IPAddressD0Ev>:
   bc18e:	b510      	push	{r4, lr}
   bc190:	2118      	movs	r1, #24
   bc192:	4604      	mov	r4, r0
   bc194:	f7f7 ff83 	bl	b409e <_ZdlPvj>
   bc198:	4620      	mov	r0, r4
   bc19a:	bd10      	pop	{r4, pc}

000bc19c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc19c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc19e:	7d03      	ldrb	r3, [r0, #20]
   bc1a0:	2b06      	cmp	r3, #6
{
   bc1a2:	b08d      	sub	sp, #52	; 0x34
   bc1a4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc1a6:	f100 0704 	add.w	r7, r0, #4
   bc1aa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc1ae:	d012      	beq.n	bc1d6 <_ZNK9IPAddress7printToER5Print+0x3a>
   bc1b0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc1b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc1b8:	220a      	movs	r2, #10
   bc1ba:	4630      	mov	r0, r6
   bc1bc:	f001 fb0d 	bl	bd7da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc1c0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc1c2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc1c4:	d019      	beq.n	bc1fa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc1c6:	2c00      	cmp	r4, #0
   bc1c8:	d0f4      	beq.n	bc1b4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc1ca:	212e      	movs	r1, #46	; 0x2e
   bc1cc:	4630      	mov	r0, r6
   bc1ce:	f001 faf5 	bl	bd7bc <_ZN5Print5printEc>
   bc1d2:	4404      	add	r4, r0
   bc1d4:	e7ee      	b.n	bc1b4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc1d6:	232f      	movs	r3, #47	; 0x2f
   bc1d8:	466a      	mov	r2, sp
   bc1da:	4639      	mov	r1, r7
   bc1dc:	200a      	movs	r0, #10
		buf[0] = 0;
   bc1de:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc1e2:	f7fe fecd 	bl	baf80 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc1e6:	4668      	mov	r0, sp
   bc1e8:	f003 f99f 	bl	bf52a <strlen>
   bc1ec:	6833      	ldr	r3, [r6, #0]
   bc1ee:	4602      	mov	r2, r0
   bc1f0:	68db      	ldr	r3, [r3, #12]
   bc1f2:	4669      	mov	r1, sp
   bc1f4:	4630      	mov	r0, r6
   bc1f6:	4798      	blx	r3
   bc1f8:	4604      	mov	r4, r0
    }
    return n;
}
   bc1fa:	4620      	mov	r0, r4
   bc1fc:	b00d      	add	sp, #52	; 0x34
   bc1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc200 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc200:	b510      	push	{r4, lr}
   bc202:	4b05      	ldr	r3, [pc, #20]	; (bc218 <_ZN9IPAddressC1Ev+0x18>)
   bc204:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bc206:	2211      	movs	r2, #17
   bc208:	f840 3b04 	str.w	r3, [r0], #4
   bc20c:	2100      	movs	r1, #0
   bc20e:	f003 f8d1 	bl	bf3b4 <memset>
}
   bc212:	4620      	mov	r0, r4
   bc214:	bd10      	pop	{r4, pc}
   bc216:	bf00      	nop
   bc218:	000c1038 	.word	0x000c1038

000bc21c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc21c:	4603      	mov	r3, r0
   bc21e:	4a07      	ldr	r2, [pc, #28]	; (bc23c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc220:	b510      	push	{r4, lr}
   bc222:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc226:	f101 0210 	add.w	r2, r1, #16
   bc22a:	f851 4b04 	ldr.w	r4, [r1], #4
   bc22e:	f843 4b04 	str.w	r4, [r3], #4
   bc232:	4291      	cmp	r1, r2
   bc234:	d1f9      	bne.n	bc22a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc236:	780a      	ldrb	r2, [r1, #0]
   bc238:	701a      	strb	r2, [r3, #0]
}
   bc23a:	bd10      	pop	{r4, pc}
   bc23c:	000c1038 	.word	0x000c1038

000bc240 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc240:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc242:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc246:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc24a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc24e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc252:	2304      	movs	r3, #4
   bc254:	6041      	str	r1, [r0, #4]
   bc256:	7503      	strb	r3, [r0, #20]
}
   bc258:	bd10      	pop	{r4, pc}
	...

000bc25c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc25c:	b507      	push	{r0, r1, r2, lr}
   bc25e:	4b06      	ldr	r3, [pc, #24]	; (bc278 <_ZN9IPAddressC1EPKh+0x1c>)
   bc260:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc262:	78cb      	ldrb	r3, [r1, #3]
   bc264:	9300      	str	r3, [sp, #0]
   bc266:	788b      	ldrb	r3, [r1, #2]
   bc268:	784a      	ldrb	r2, [r1, #1]
   bc26a:	7809      	ldrb	r1, [r1, #0]
   bc26c:	f7ff ffe8 	bl	bc240 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc270:	b003      	add	sp, #12
   bc272:	f85d fb04 	ldr.w	pc, [sp], #4
   bc276:	bf00      	nop
   bc278:	000c1038 	.word	0x000c1038

000bc27c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bc27c:	f100 0310 	add.w	r3, r0, #16
   bc280:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bc282:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bc286:	2901      	cmp	r1, #1
   bc288:	4618      	mov	r0, r3
   bc28a:	d108      	bne.n	bc29e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bc28c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bc290:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bc294:	3a01      	subs	r2, #1
   bc296:	f103 0310 	add.w	r3, r3, #16
   bc29a:	d1f2      	bne.n	bc282 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bc29c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bc29e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bc2a0:	bf04      	itt	eq
   bc2a2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bc2a6:	1852      	addeq	r2, r2, r1
   bc2a8:	e7f4      	b.n	bc294 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bc2aa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bc2aa:	b40e      	push	{r1, r2, r3}
   bc2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc2ae:	b088      	sub	sp, #32
   bc2b0:	af00      	add	r7, sp, #0
   bc2b2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc2b6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bc2b8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc2bc:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bc2be:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc2c0:	462b      	mov	r3, r5
   bc2c2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bc2c4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc2c6:	f7ff f957 	bl	bb578 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bc2ca:	280f      	cmp	r0, #15
   bc2cc:	687a      	ldr	r2, [r7, #4]
   bc2ce:	d91a      	bls.n	bc306 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bc2d0:	f100 0308 	add.w	r3, r0, #8
   bc2d4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bc2d8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bc2da:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc2de:	1c41      	adds	r1, r0, #1
   bc2e0:	462b      	mov	r3, r5
   bc2e2:	4668      	mov	r0, sp
        va_start(args, fmt);
   bc2e4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc2e6:	f7ff f947 	bl	bb578 <vsnprintf>
        if (n > 0) {
   bc2ea:	1e02      	subs	r2, r0, #0
   bc2ec:	dd04      	ble.n	bc2f8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bc2ee:	6823      	ldr	r3, [r4, #0]
   bc2f0:	4669      	mov	r1, sp
   bc2f2:	689b      	ldr	r3, [r3, #8]
   bc2f4:	4620      	mov	r0, r4
   bc2f6:	4798      	blx	r3
   bc2f8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bc2fa:	3720      	adds	r7, #32
   bc2fc:	46bd      	mov	sp, r7
   bc2fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bc302:	b003      	add	sp, #12
   bc304:	4770      	bx	lr
    } else if (n > 0) {
   bc306:	2800      	cmp	r0, #0
   bc308:	d0f7      	beq.n	bc2fa <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bc30a:	6823      	ldr	r3, [r4, #0]
   bc30c:	4602      	mov	r2, r0
   bc30e:	689b      	ldr	r3, [r3, #8]
   bc310:	f107 0110 	add.w	r1, r7, #16
   bc314:	4620      	mov	r0, r4
   bc316:	4798      	blx	r3
}
   bc318:	e7ef      	b.n	bc2fa <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bc31a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc31a:	b538      	push	{r3, r4, r5, lr}
   bc31c:	680b      	ldr	r3, [r1, #0]
   bc31e:	6003      	str	r3, [r0, #0]
   bc320:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bc322:	6843      	ldr	r3, [r0, #4]
   bc324:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc326:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bc328:	d008      	beq.n	bc33c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bc32a:	b115      	cbz	r5, bc332 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bc32c:	686b      	ldr	r3, [r5, #4]
   bc32e:	3301      	adds	r3, #1
   bc330:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bc332:	6860      	ldr	r0, [r4, #4]
   bc334:	b108      	cbz	r0, bc33a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bc336:	f7ff f986 	bl	bb646 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bc33a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc33c:	bd38      	pop	{r3, r4, r5, pc}

000bc33e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bc33e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bc340:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bc342:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bc346:	689b      	ldr	r3, [r3, #8]
   bc348:	2201      	movs	r2, #1
   bc34a:	f10d 0107 	add.w	r1, sp, #7
   bc34e:	4798      	blx	r3
}
   bc350:	b003      	add	sp, #12
   bc352:	f85d fb04 	ldr.w	pc, [sp], #4

000bc356 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc356:	460b      	mov	r3, r1
   bc358:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bc35a:	2200      	movs	r2, #0
   bc35c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bc35e:	e9c0 2200 	strd	r2, r2, [r0]
   bc362:	4604      	mov	r4, r0
        t_ = t;
   bc364:	6083      	str	r3, [r0, #8]
    if (t) {
   bc366:	b90b      	cbnz	r3, bc36c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bc368:	4620      	mov	r0, r4
   bc36a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bc36c:	f7ff ffd5 	bl	bc31a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bc370:	e7fa      	b.n	bc368 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bc372 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bc372:	6883      	ldr	r3, [r0, #8]
   bc374:	b1eb      	cbz	r3, bc3b2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bc376:	781a      	ldrb	r2, [r3, #0]
   bc378:	2a03      	cmp	r2, #3
   bc37a:	d81a      	bhi.n	bc3b2 <_ZNK5spark9JSONValue4typeEv+0x40>
   bc37c:	e8df f002 	tbb	[pc, r2]
   bc380:	1b021704 	.word	0x1b021704
   bc384:	2005      	movs	r0, #5
   bc386:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bc388:	6802      	ldr	r2, [r0, #0]
   bc38a:	685b      	ldr	r3, [r3, #4]
   bc38c:	6852      	ldr	r2, [r2, #4]
   bc38e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bc390:	282d      	cmp	r0, #45	; 0x2d
   bc392:	d012      	beq.n	bc3ba <_ZNK5spark9JSONValue4typeEv+0x48>
   bc394:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc398:	2b09      	cmp	r3, #9
   bc39a:	d90e      	bls.n	bc3ba <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bc39c:	2874      	cmp	r0, #116	; 0x74
   bc39e:	d00e      	beq.n	bc3be <_ZNK5spark9JSONValue4typeEv+0x4c>
   bc3a0:	2866      	cmp	r0, #102	; 0x66
   bc3a2:	d00c      	beq.n	bc3be <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bc3a4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bc3a8:	4258      	negs	r0, r3
   bc3aa:	4158      	adcs	r0, r3
   bc3ac:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bc3ae:	2006      	movs	r0, #6
   bc3b0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bc3b2:	2000      	movs	r0, #0
   bc3b4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bc3b6:	2004      	movs	r0, #4
   bc3b8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bc3ba:	2003      	movs	r0, #3
   bc3bc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bc3be:	2002      	movs	r0, #2
}
   bc3c0:	4770      	bx	lr

000bc3c2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bc3c2:	b510      	push	{r4, lr}
   bc3c4:	4604      	mov	r4, r0
    switch (type()) {
   bc3c6:	f7ff ffd4 	bl	bc372 <_ZNK5spark9JSONValue4typeEv>
   bc3ca:	2802      	cmp	r0, #2
   bc3cc:	d00e      	beq.n	bc3ec <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bc3ce:	1ec3      	subs	r3, r0, #3
   bc3d0:	b2db      	uxtb	r3, r3
   bc3d2:	2b01      	cmp	r3, #1
   bc3d4:	d814      	bhi.n	bc400 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bc3d6:	6822      	ldr	r2, [r4, #0]
   bc3d8:	68a3      	ldr	r3, [r4, #8]
   bc3da:	6850      	ldr	r0, [r2, #4]
   bc3dc:	685b      	ldr	r3, [r3, #4]
}
   bc3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bc3e2:	220a      	movs	r2, #10
   bc3e4:	2100      	movs	r1, #0
   bc3e6:	4418      	add	r0, r3
   bc3e8:	f003 b990 	b.w	bf70c <strtol>
        const char* const s = d_->json + t_->start;
   bc3ec:	6822      	ldr	r2, [r4, #0]
   bc3ee:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bc3f0:	6852      	ldr	r2, [r2, #4]
   bc3f2:	685b      	ldr	r3, [r3, #4]
   bc3f4:	5cd0      	ldrb	r0, [r2, r3]
   bc3f6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bc3fa:	4258      	negs	r0, r3
   bc3fc:	4158      	adcs	r0, r3
}
   bc3fe:	bd10      	pop	{r4, pc}
    switch (type()) {
   bc400:	2000      	movs	r0, #0
   bc402:	e7fc      	b.n	bc3fe <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bc404 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc404:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bc406:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bc408:	e9c0 3300 	strd	r3, r3, [r0]
   bc40c:	4604      	mov	r4, r0
        n_(0) {
   bc40e:	480e      	ldr	r0, [pc, #56]	; (bc448 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bc410:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bc414:	b1a9      	cbz	r1, bc442 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bc416:	780b      	ldrb	r3, [r1, #0]
   bc418:	2b03      	cmp	r3, #3
   bc41a:	d006      	beq.n	bc42a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bc41c:	b98b      	cbnz	r3, bc442 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bc41e:	6813      	ldr	r3, [r2, #0]
   bc420:	6858      	ldr	r0, [r3, #4]
   bc422:	684b      	ldr	r3, [r1, #4]
   bc424:	5cc3      	ldrb	r3, [r0, r3]
   bc426:	2b6e      	cmp	r3, #110	; 0x6e
   bc428:	d007      	beq.n	bc43a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bc42a:	6813      	ldr	r3, [r2, #0]
   bc42c:	684d      	ldr	r5, [r1, #4]
   bc42e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bc430:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bc432:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bc434:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bc436:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bc438:	60e3      	str	r3, [r4, #12]
   bc43a:	4611      	mov	r1, r2
   bc43c:	4620      	mov	r0, r4
   bc43e:	f7ff ff6c 	bl	bc31a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bc442:	4620      	mov	r0, r4
   bc444:	bd38      	pop	{r3, r4, r5, pc}
   bc446:	bf00      	nop
   bc448:	000c10a4 	.word	0x000c10a4

000bc44c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc44c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bc44e:	2500      	movs	r5, #0
   bc450:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bc452:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bc456:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bc45a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc45e:	4604      	mov	r4, r0
   bc460:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bc462:	b14b      	cbz	r3, bc478 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bc464:	781a      	ldrb	r2, [r3, #0]
   bc466:	2a01      	cmp	r2, #1
   bc468:	d106      	bne.n	bc478 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bc46a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bc46e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bc470:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bc472:	6143      	str	r3, [r0, #20]
   bc474:	f7ff ff51 	bl	bc31a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bc478:	4620      	mov	r0, r4
   bc47a:	bd38      	pop	{r3, r4, r5, pc}

000bc47c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bc47c:	b510      	push	{r4, lr}
    if (!n_) {
   bc47e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bc480:	4604      	mov	r4, r0
    if (!n_) {
   bc482:	b163      	cbz	r3, bc49e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bc484:	6880      	ldr	r0, [r0, #8]
   bc486:	60e0      	str	r0, [r4, #12]
    --n_;
   bc488:	3b01      	subs	r3, #1
    ++t_;
   bc48a:	3010      	adds	r0, #16
   bc48c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bc48e:	6120      	str	r0, [r4, #16]
    --n_;
   bc490:	6163      	str	r3, [r4, #20]
    if (n_) {
   bc492:	b113      	cbz	r3, bc49a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bc494:	f7ff fef2 	bl	bc27c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bc498:	60a0      	str	r0, [r4, #8]
    return true;
   bc49a:	2001      	movs	r0, #1
   bc49c:	e000      	b.n	bc4a0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bc49e:	4618      	mov	r0, r3
}
   bc4a0:	bd10      	pop	{r4, pc}

000bc4a2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bc4a2:	b510      	push	{r4, lr}
    write('}');
   bc4a4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bc4a6:	4604      	mov	r4, r0
    write('}');
   bc4a8:	f7ff ff49 	bl	bc33e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bc4ac:	2301      	movs	r3, #1
   bc4ae:	7123      	strb	r3, [r4, #4]
}
   bc4b0:	4620      	mov	r0, r4
   bc4b2:	bd10      	pop	{r4, pc}

000bc4b4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bc4b4:	b508      	push	{r3, lr}
    switch (state_) {
   bc4b6:	7903      	ldrb	r3, [r0, #4]
   bc4b8:	2b01      	cmp	r3, #1
   bc4ba:	d002      	beq.n	bc4c2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bc4bc:	2b02      	cmp	r3, #2
   bc4be:	d004      	beq.n	bc4ca <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bc4c0:	bd08      	pop	{r3, pc}
        write(',');
   bc4c2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bc4c4:	f7ff ff3b 	bl	bc33e <_ZN5spark10JSONWriter5writeEc>
}
   bc4c8:	e7fa      	b.n	bc4c0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bc4ca:	213a      	movs	r1, #58	; 0x3a
   bc4cc:	e7fa      	b.n	bc4c4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bc4ce <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bc4ce:	b510      	push	{r4, lr}
   bc4d0:	4604      	mov	r4, r0
    writeSeparator();
   bc4d2:	f7ff ffef 	bl	bc4b4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bc4d6:	4620      	mov	r0, r4
   bc4d8:	217b      	movs	r1, #123	; 0x7b
   bc4da:	f7ff ff30 	bl	bc33e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bc4de:	2300      	movs	r3, #0
   bc4e0:	7123      	strb	r3, [r4, #4]
}
   bc4e2:	4620      	mov	r0, r4
   bc4e4:	bd10      	pop	{r4, pc}
	...

000bc4e8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bc4e8:	b513      	push	{r0, r1, r4, lr}
   bc4ea:	4604      	mov	r4, r0
   bc4ec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bc4ee:	f7ff ffe1 	bl	bc4b4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bc4f2:	6823      	ldr	r3, [r4, #0]
   bc4f4:	9a01      	ldr	r2, [sp, #4]
   bc4f6:	68db      	ldr	r3, [r3, #12]
   bc4f8:	4903      	ldr	r1, [pc, #12]	; (bc508 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bc4fa:	4620      	mov	r0, r4
   bc4fc:	4798      	blx	r3
    state_ = NEXT;
   bc4fe:	2301      	movs	r3, #1
}
   bc500:	4620      	mov	r0, r4
    state_ = NEXT;
   bc502:	7123      	strb	r3, [r4, #4]
}
   bc504:	b002      	add	sp, #8
   bc506:	bd10      	pop	{r4, pc}
   bc508:	000c05ef 	.word	0x000c05ef

000bc50c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bc50c:	b513      	push	{r0, r1, r4, lr}
   bc50e:	4604      	mov	r4, r0
   bc510:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bc512:	f7ff ffcf 	bl	bc4b4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bc516:	6823      	ldr	r3, [r4, #0]
   bc518:	9a01      	ldr	r2, [sp, #4]
   bc51a:	68db      	ldr	r3, [r3, #12]
   bc51c:	4903      	ldr	r1, [pc, #12]	; (bc52c <_ZN5spark10JSONWriter5valueEj+0x20>)
   bc51e:	4620      	mov	r0, r4
   bc520:	4798      	blx	r3
    state_ = NEXT;
   bc522:	2301      	movs	r3, #1
}
   bc524:	4620      	mov	r0, r4
    state_ = NEXT;
   bc526:	7123      	strb	r3, [r4, #4]
}
   bc528:	b002      	add	sp, #8
   bc52a:	bd10      	pop	{r4, pc}
   bc52c:	000c0912 	.word	0x000c0912

000bc530 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bc530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc534:	460d      	mov	r5, r1
    write('"');
   bc536:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bc538:	4690      	mov	r8, r2
   bc53a:	4604      	mov	r4, r0
    write('"');
   bc53c:	f7ff feff 	bl	bc33e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bc540:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc5e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bc544:	44a8      	add	r8, r5
    const char *s = str;
   bc546:	462f      	mov	r7, r5
    while (s != end) {
   bc548:	4547      	cmp	r7, r8
   bc54a:	46ba      	mov	sl, r7
   bc54c:	d03d      	beq.n	bc5ca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bc54e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bc552:	2e22      	cmp	r6, #34	; 0x22
   bc554:	d006      	beq.n	bc564 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bc556:	2e5c      	cmp	r6, #92	; 0x5c
   bc558:	d004      	beq.n	bc564 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bc55a:	4630      	mov	r0, r6
   bc55c:	f002 fefa 	bl	bf354 <isprint>
   bc560:	2800      	cmp	r0, #0
   bc562:	d1f1      	bne.n	bc548 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bc564:	6823      	ldr	r3, [r4, #0]
   bc566:	ebaa 0205 	sub.w	r2, sl, r5
   bc56a:	689b      	ldr	r3, [r3, #8]
   bc56c:	4629      	mov	r1, r5
   bc56e:	4620      	mov	r0, r4
   bc570:	4798      	blx	r3
            write('\\');
   bc572:	215c      	movs	r1, #92	; 0x5c
   bc574:	4620      	mov	r0, r4
   bc576:	f7ff fee2 	bl	bc33e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bc57a:	2e0d      	cmp	r6, #13
   bc57c:	d80a      	bhi.n	bc594 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bc57e:	2e07      	cmp	r6, #7
   bc580:	d91c      	bls.n	bc5bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bc582:	f1a6 0308 	sub.w	r3, r6, #8
   bc586:	2b05      	cmp	r3, #5
   bc588:	d818      	bhi.n	bc5bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bc58a:	e8df f003 	tbb	[pc, r3]
   bc58e:	0f0d      	.short	0x0f0d
   bc590:	15131711 	.word	0x15131711
   bc594:	2e22      	cmp	r6, #34	; 0x22
   bc596:	d001      	beq.n	bc59c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bc598:	2e5c      	cmp	r6, #92	; 0x5c
   bc59a:	d10f      	bne.n	bc5bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bc59c:	4631      	mov	r1, r6
                write('b');
   bc59e:	4620      	mov	r0, r4
   bc5a0:	f7ff fecd 	bl	bc33e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bc5a4:	463d      	mov	r5, r7
    while (s != end) {
   bc5a6:	e7cf      	b.n	bc548 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bc5a8:	2162      	movs	r1, #98	; 0x62
   bc5aa:	e7f8      	b.n	bc59e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bc5ac:	2174      	movs	r1, #116	; 0x74
   bc5ae:	e7f6      	b.n	bc59e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bc5b0:	216e      	movs	r1, #110	; 0x6e
   bc5b2:	e7f4      	b.n	bc59e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bc5b4:	2166      	movs	r1, #102	; 0x66
   bc5b6:	e7f2      	b.n	bc59e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bc5b8:	2172      	movs	r1, #114	; 0x72
   bc5ba:	e7f0      	b.n	bc59e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bc5bc:	6823      	ldr	r3, [r4, #0]
   bc5be:	4632      	mov	r2, r6
   bc5c0:	68db      	ldr	r3, [r3, #12]
   bc5c2:	4649      	mov	r1, r9
   bc5c4:	4620      	mov	r0, r4
   bc5c6:	4798      	blx	r3
                break;
   bc5c8:	e7ec      	b.n	bc5a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bc5ca:	42bd      	cmp	r5, r7
   bc5cc:	d005      	beq.n	bc5da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bc5ce:	6823      	ldr	r3, [r4, #0]
   bc5d0:	1b7a      	subs	r2, r7, r5
   bc5d2:	689b      	ldr	r3, [r3, #8]
   bc5d4:	4629      	mov	r1, r5
   bc5d6:	4620      	mov	r0, r4
   bc5d8:	4798      	blx	r3
    }
    write('"');
   bc5da:	2122      	movs	r1, #34	; 0x22
   bc5dc:	4620      	mov	r0, r4
   bc5de:	f7ff feae 	bl	bc33e <_ZN5spark10JSONWriter5writeEc>
}
   bc5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc5e6:	bf00      	nop
   bc5e8:	000c1044 	.word	0x000c1044

000bc5ec <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bc5ec:	b513      	push	{r0, r1, r4, lr}
   bc5ee:	4604      	mov	r4, r0
   bc5f0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bc5f4:	f7ff ff5e 	bl	bc4b4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bc5f8:	4620      	mov	r0, r4
   bc5fa:	e9dd 2100 	ldrd	r2, r1, [sp]
   bc5fe:	f7ff ff97 	bl	bc530 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bc602:	2302      	movs	r3, #2
}
   bc604:	4620      	mov	r0, r4
    state_ = VALUE;
   bc606:	7123      	strb	r3, [r4, #4]
}
   bc608:	b002      	add	sp, #8
   bc60a:	bd10      	pop	{r4, pc}

000bc60c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bc60c:	b513      	push	{r0, r1, r4, lr}
   bc60e:	4604      	mov	r4, r0
   bc610:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bc614:	f7ff ff4e 	bl	bc4b4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bc618:	4620      	mov	r0, r4
   bc61a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bc61e:	f7ff ff87 	bl	bc530 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bc622:	2301      	movs	r3, #1
}
   bc624:	4620      	mov	r0, r4
    state_ = NEXT;
   bc626:	7123      	strb	r3, [r4, #4]
}
   bc628:	b002      	add	sp, #8
   bc62a:	bd10      	pop	{r4, pc}

000bc62c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bc62c:	6880      	ldr	r0, [r0, #8]
   bc62e:	6803      	ldr	r3, [r0, #0]
   bc630:	68db      	ldr	r3, [r3, #12]
   bc632:	4718      	bx	r3

000bc634 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bc634:	4770      	bx	lr

000bc636 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bc636:	4608      	mov	r0, r1
   bc638:	b111      	cbz	r1, bc640 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bc63a:	680b      	ldr	r3, [r1, #0]
   bc63c:	685b      	ldr	r3, [r3, #4]
   bc63e:	4718      	bx	r3
}
   bc640:	4770      	bx	lr

000bc642 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bc642:	4770      	bx	lr

000bc644 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bc644:	4770      	bx	lr

000bc646 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bc646:	4770      	bx	lr

000bc648 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bc648:	4770      	bx	lr

000bc64a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bc64a:	b538      	push	{r3, r4, r5, lr}
   bc64c:	4604      	mov	r4, r0
   bc64e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bc650:	6800      	ldr	r0, [r0, #0]
   bc652:	212e      	movs	r1, #46	; 0x2e
   bc654:	f002 ff2f 	bl	bf4b6 <strchrnul>
    size = s - category;
   bc658:	6823      	ldr	r3, [r4, #0]
   bc65a:	1ac3      	subs	r3, r0, r3
   bc65c:	602b      	str	r3, [r5, #0]
    if (size) {
   bc65e:	b123      	cbz	r3, bc66a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bc660:	7803      	ldrb	r3, [r0, #0]
   bc662:	b103      	cbz	r3, bc666 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bc664:	3001      	adds	r0, #1
   bc666:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc668:	6020      	str	r0, [r4, #0]
}
   bc66a:	4618      	mov	r0, r3
   bc66c:	bd38      	pop	{r3, r4, r5, pc}

000bc66e <_ZN5spark16JSONStreamWriterD0Ev>:
   bc66e:	b510      	push	{r4, lr}
   bc670:	210c      	movs	r1, #12
   bc672:	4604      	mov	r4, r0
   bc674:	f7f7 fd13 	bl	b409e <_ZdlPvj>
   bc678:	4620      	mov	r0, r4
   bc67a:	bd10      	pop	{r4, pc}

000bc67c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bc67c:	b510      	push	{r4, lr}
   bc67e:	2104      	movs	r1, #4
   bc680:	4604      	mov	r4, r0
   bc682:	f7f7 fd0c 	bl	b409e <_ZdlPvj>
   bc686:	4620      	mov	r0, r4
   bc688:	bd10      	pop	{r4, pc}

000bc68a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bc68a:	b510      	push	{r4, lr}
   bc68c:	2104      	movs	r1, #4
   bc68e:	4604      	mov	r4, r0
   bc690:	f7f7 fd05 	bl	b409e <_ZdlPvj>
   bc694:	4620      	mov	r0, r4
   bc696:	bd10      	pop	{r4, pc}

000bc698 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bc698:	f7fe bb62 	b.w	bad60 <os_mutex_recursive_lock>

000bc69c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bc69c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bc69e:	f002 ff14 	bl	bf4ca <strcmp>
}
   bc6a2:	fab0 f080 	clz	r0, r0
   bc6a6:	0940      	lsrs	r0, r0, #5
   bc6a8:	bd08      	pop	{r3, pc}

000bc6aa <__tcf_1>:
   bc6aa:	4770      	bx	lr

000bc6ac <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bc6ac:	b510      	push	{r4, lr}
   bc6ae:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bc6b0:	f001 ff22 	bl	be4f8 <_Z16_fetch_usbserialv>
   bc6b4:	4284      	cmp	r4, r0
   bc6b6:	d010      	beq.n	bc6da <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bc6b8:	f002 f91c 	bl	be8f4 <_Z22__fetch_global_Serial1v>
   bc6bc:	4284      	cmp	r4, r0
   bc6be:	d105      	bne.n	bc6cc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bc6c0:	f002 f918 	bl	be8f4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bc6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bc6c8:	f001 beaf 	b.w	be42a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bc6cc:	b12c      	cbz	r4, bc6da <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bc6ce:	6823      	ldr	r3, [r4, #0]
   bc6d0:	4620      	mov	r0, r4
   bc6d2:	685b      	ldr	r3, [r3, #4]
}
   bc6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bc6d8:	4718      	bx	r3
   bc6da:	bd10      	pop	{r4, pc}

000bc6dc <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bc6dc:	b513      	push	{r0, r1, r4, lr}
   bc6de:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bc6e0:	4608      	mov	r0, r1
   bc6e2:	9101      	str	r1, [sp, #4]
   bc6e4:	f002 ff21 	bl	bf52a <strlen>
   bc6e8:	9901      	ldr	r1, [sp, #4]
   bc6ea:	4602      	mov	r2, r0
   bc6ec:	4620      	mov	r0, r4
}
   bc6ee:	b002      	add	sp, #8
   bc6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bc6f4:	f7ff bf8a 	b.w	bc60c <_ZN5spark10JSONWriter5valueEPKcj>

000bc6f8 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bc6f8:	b513      	push	{r0, r1, r4, lr}
   bc6fa:	4604      	mov	r4, r0
    write(str, strlen(str));
   bc6fc:	4608      	mov	r0, r1
   bc6fe:	9101      	str	r1, [sp, #4]
   bc700:	f002 ff13 	bl	bf52a <strlen>
   bc704:	6823      	ldr	r3, [r4, #0]
   bc706:	9901      	ldr	r1, [sp, #4]
   bc708:	68db      	ldr	r3, [r3, #12]
   bc70a:	4602      	mov	r2, r0
   bc70c:	4620      	mov	r0, r4
}
   bc70e:	b002      	add	sp, #8
   bc710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bc714:	4718      	bx	r3

000bc716 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bc716:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bc718:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bc71a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bc71e:	68db      	ldr	r3, [r3, #12]
   bc720:	2201      	movs	r2, #1
   bc722:	f10d 0107 	add.w	r1, sp, #7
   bc726:	4798      	blx	r3
}
   bc728:	b003      	add	sp, #12
   bc72a:	f85d fb04 	ldr.w	pc, [sp], #4

000bc72e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bc72e:	b40e      	push	{r1, r2, r3}
   bc730:	b503      	push	{r0, r1, lr}
   bc732:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bc734:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bc736:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bc73a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bc73c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bc73e:	f001 f942 	bl	bd9c6 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bc742:	b002      	add	sp, #8
   bc744:	f85d eb04 	ldr.w	lr, [sp], #4
   bc748:	b003      	add	sp, #12
   bc74a:	4770      	bx	lr

000bc74c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bc74c:	680a      	ldr	r2, [r1, #0]
   bc74e:	6002      	str	r2, [r0, #0]
   bc750:	684a      	ldr	r2, [r1, #4]
   bc752:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bc754:	2200      	movs	r2, #0
   bc756:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bc75a:	b510      	push	{r4, lr}
   bc75c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc75e:	688c      	ldr	r4, [r1, #8]
   bc760:	6084      	str	r4, [r0, #8]
   bc762:	68cc      	ldr	r4, [r1, #12]
   bc764:	60c4      	str	r4, [r0, #12]
   bc766:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc768:	608a      	str	r2, [r1, #8]
   bc76a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bc76c:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc76e:	610a      	str	r2, [r1, #16]
   bc770:	bd10      	pop	{r4, pc}
	...

000bc774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bc778:	e9d0 8400 	ldrd	r8, r4, [r0]
   bc77c:	f04f 0a14 	mov.w	sl, #20
   bc780:	9300      	str	r3, [sp, #0]
   bc782:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bc786:	4b18      	ldr	r3, [pc, #96]	; (bc7e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc788:	10a4      	asrs	r4, r4, #2
   bc78a:	4617      	mov	r7, r2
   bc78c:	435c      	muls	r4, r3
   bc78e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bc790:	2c00      	cmp	r4, #0
   bc792:	dd21      	ble.n	bc7d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bc794:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bc796:	fb0a f006 	mul.w	r0, sl, r6
   bc79a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bc79e:	463a      	mov	r2, r7
   bc7a0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bc7a4:	5828      	ldr	r0, [r5, r0]
   bc7a6:	9101      	str	r1, [sp, #4]
   bc7a8:	455f      	cmp	r7, fp
   bc7aa:	bf28      	it	cs
   bc7ac:	465a      	movcs	r2, fp
   bc7ae:	f002 fec4 	bl	bf53a <strncmp>
                if (cmp == 0) {
   bc7b2:	2800      	cmp	r0, #0
   bc7b4:	9901      	ldr	r1, [sp, #4]
   bc7b6:	f04f 0301 	mov.w	r3, #1
   bc7ba:	d10b      	bne.n	bc7d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bc7bc:	455f      	cmp	r7, fp
   bc7be:	d103      	bne.n	bc7c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bc7c0:	9a00      	ldr	r2, [sp, #0]
   bc7c2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc7c4:	4634      	mov	r4, r6
   bc7c6:	e7e3      	b.n	bc790 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bc7c8:	d9fc      	bls.n	bc7c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bc7ca:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bc7cc:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bc7d0:	3e01      	subs	r6, #1
   bc7d2:	e7f7      	b.n	bc7c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bc7d4:	dbf9      	blt.n	bc7ca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bc7d6:	e7f5      	b.n	bc7c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bc7d8:	eba5 0508 	sub.w	r5, r5, r8
}
   bc7dc:	4802      	ldr	r0, [pc, #8]	; (bc7e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc7de:	10ad      	asrs	r5, r5, #2
   bc7e0:	4368      	muls	r0, r5
   bc7e2:	b003      	add	sp, #12
   bc7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc7e8:	cccccccd 	.word	0xcccccccd

000bc7ec <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc7ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bc7ee:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bc7f0:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc7f2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bc7f4:	b303      	cbz	r3, bc838 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bc7f6:	b1f9      	cbz	r1, bc838 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bc7f8:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bc7fa:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bc7fe:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bc800:	a903      	add	r1, sp, #12
   bc802:	a801      	add	r0, sp, #4
   bc804:	f7ff ff21 	bl	bc64a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bc808:	4601      	mov	r1, r0
   bc80a:	b1a8      	cbz	r0, bc838 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bc80c:	f10d 030b 	add.w	r3, sp, #11
   bc810:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bc812:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc816:	4620      	mov	r0, r4
   bc818:	f7ff ffac 	bl	bc774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bc81c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bc820:	b153      	cbz	r3, bc838 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bc822:	6823      	ldr	r3, [r4, #0]
   bc824:	2414      	movs	r4, #20
   bc826:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bc82a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bc82c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bc830:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bc832:	bfa8      	it	ge
   bc834:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bc836:	e7e3      	b.n	bc800 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bc838:	4628      	mov	r0, r5
   bc83a:	b004      	add	sp, #16
   bc83c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc840 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bc840:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bc842:	4c09      	ldr	r4, [pc, #36]	; (bc868 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bc844:	7823      	ldrb	r3, [r4, #0]
   bc846:	f3bf 8f5b 	dmb	ish
   bc84a:	07db      	lsls	r3, r3, #31
   bc84c:	d409      	bmi.n	bc862 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc84e:	4620      	mov	r0, r4
   bc850:	f7f7 fc34 	bl	b40bc <__cxa_guard_acquire>
   bc854:	b128      	cbz	r0, bc862 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc856:	4620      	mov	r0, r4
   bc858:	f7f7 fc35 	bl	b40c6 <__cxa_guard_release>
   bc85c:	4803      	ldr	r0, [pc, #12]	; (bc86c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bc85e:	f002 fd55 	bl	bf30c <atexit>
}
   bc862:	4803      	ldr	r0, [pc, #12]	; (bc870 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bc864:	bd10      	pop	{r4, pc}
   bc866:	bf00      	nop
   bc868:	2003e64c 	.word	0x2003e64c
   bc86c:	000bc643 	.word	0x000bc643
   bc870:	2003de74 	.word	0x2003de74

000bc874 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bc874:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bc876:	4c09      	ldr	r4, [pc, #36]	; (bc89c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bc878:	7823      	ldrb	r3, [r4, #0]
   bc87a:	f3bf 8f5b 	dmb	ish
   bc87e:	07db      	lsls	r3, r3, #31
   bc880:	d409      	bmi.n	bc896 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc882:	4620      	mov	r0, r4
   bc884:	f7f7 fc1a 	bl	b40bc <__cxa_guard_acquire>
   bc888:	b128      	cbz	r0, bc896 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc88a:	4620      	mov	r0, r4
   bc88c:	f7f7 fc1b 	bl	b40c6 <__cxa_guard_release>
   bc890:	4803      	ldr	r0, [pc, #12]	; (bc8a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bc892:	f002 fd3b 	bl	bf30c <atexit>
    return &factory;
}
   bc896:	4803      	ldr	r0, [pc, #12]	; (bc8a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bc898:	bd10      	pop	{r4, pc}
   bc89a:	bf00      	nop
   bc89c:	2003e650 	.word	0x2003e650
   bc8a0:	000bc6ab 	.word	0x000bc6ab
   bc8a4:	2003de78 	.word	0x2003de78

000bc8a8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bc8a8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bc8aa:	2500      	movs	r5, #0
   bc8ac:	4604      	mov	r4, r0
   bc8ae:	e9c0 5500 	strd	r5, r5, [r0]
   bc8b2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc8b6:	6085      	str	r5, [r0, #8]
   bc8b8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bc8ba:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bc8be:	f7fe fa3f 	bl	bad40 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bc8c2:	f7ff ffbd 	bl	bc840 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bc8c6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc8c8:	f7ff ffd4 	bl	bc874 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bc8cc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc8ce:	6220      	str	r0, [r4, #32]
}
   bc8d0:	4620      	mov	r0, r4
   bc8d2:	bd38      	pop	{r3, r4, r5, pc}

000bc8d4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bc8d4:	b510      	push	{r4, lr}
    static LogManager mgr;
   bc8d6:	4c0a      	ldr	r4, [pc, #40]	; (bc900 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bc8d8:	7823      	ldrb	r3, [r4, #0]
   bc8da:	f3bf 8f5b 	dmb	ish
   bc8de:	07db      	lsls	r3, r3, #31
   bc8e0:	d40c      	bmi.n	bc8fc <_ZN5spark10LogManager8instanceEv+0x28>
   bc8e2:	4620      	mov	r0, r4
   bc8e4:	f7f7 fbea 	bl	b40bc <__cxa_guard_acquire>
   bc8e8:	b140      	cbz	r0, bc8fc <_ZN5spark10LogManager8instanceEv+0x28>
   bc8ea:	4806      	ldr	r0, [pc, #24]	; (bc904 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc8ec:	f7ff ffdc 	bl	bc8a8 <_ZN5spark10LogManagerC1Ev>
   bc8f0:	4620      	mov	r0, r4
   bc8f2:	f7f7 fbe8 	bl	b40c6 <__cxa_guard_release>
   bc8f6:	4804      	ldr	r0, [pc, #16]	; (bc908 <_ZN5spark10LogManager8instanceEv+0x34>)
   bc8f8:	f002 fd08 	bl	bf30c <atexit>
    return &mgr;
}
   bc8fc:	4801      	ldr	r0, [pc, #4]	; (bc904 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc8fe:	bd10      	pop	{r4, pc}
   bc900:	2003e648 	.word	0x2003e648
   bc904:	2003e658 	.word	0x2003e658
   bc908:	000bcdc1 	.word	0x000bcdc1

000bc90c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bc90c:	4a02      	ldr	r2, [pc, #8]	; (bc918 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bc90e:	4903      	ldr	r1, [pc, #12]	; (bc91c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bc910:	4803      	ldr	r0, [pc, #12]	; (bc920 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bc912:	2300      	movs	r3, #0
   bc914:	f7fe bcac 	b.w	bb270 <log_set_callbacks>
   bc918:	000bcba5 	.word	0x000bcba5
   bc91c:	000bcb31 	.word	0x000bcb31
   bc920:	000bcab1 	.word	0x000bcab1

000bc924 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bc924:	2300      	movs	r3, #0
   bc926:	461a      	mov	r2, r3
   bc928:	4619      	mov	r1, r3
   bc92a:	4618      	mov	r0, r3
   bc92c:	f7fe bca0 	b.w	bb270 <log_set_callbacks>

000bc930 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bc930:	b570      	push	{r4, r5, r6, lr}
   bc932:	b08a      	sub	sp, #40	; 0x28
   bc934:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bc936:	4601      	mov	r1, r0
   bc938:	a804      	add	r0, sp, #16
   bc93a:	f7fb fbd6 	bl	b80ea <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bc93e:	4e14      	ldr	r6, [pc, #80]	; (bc990 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bc940:	a804      	add	r0, sp, #16
   bc942:	f7ff fd9b 	bl	bc47c <_ZN5spark18JSONObjectIterator4nextEv>
   bc946:	b1e8      	cbz	r0, bc984 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bc948:	a904      	add	r1, sp, #16
   bc94a:	4668      	mov	r0, sp
   bc94c:	f7fb fbde 	bl	b810c <_ZNK5spark18JSONObjectIterator4nameEv>
   bc950:	9802      	ldr	r0, [sp, #8]
   bc952:	4631      	mov	r1, r6
   bc954:	f7ff fea2 	bl	bc69c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bc958:	4604      	mov	r4, r0
   bc95a:	b110      	cbz	r0, bc962 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bc95c:	1e2c      	subs	r4, r5, #0
   bc95e:	bf18      	it	ne
   bc960:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bc962:	a801      	add	r0, sp, #4
   bc964:	f7f9 fc5c 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc968:	2c00      	cmp	r4, #0
   bc96a:	d0e9      	beq.n	bc940 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bc96c:	a904      	add	r1, sp, #16
   bc96e:	4668      	mov	r0, sp
   bc970:	f7fb fbdd 	bl	b812e <_ZNK5spark18JSONObjectIterator5valueEv>
   bc974:	4668      	mov	r0, sp
   bc976:	f7ff fd24 	bl	bc3c2 <_ZNK5spark9JSONValue5toIntEv>
   bc97a:	6028      	str	r0, [r5, #0]
   bc97c:	a801      	add	r0, sp, #4
   bc97e:	f7f9 fc4f 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc982:	e7dd      	b.n	bc940 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bc984:	a805      	add	r0, sp, #20
   bc986:	f7f9 fc4b 	bl	b6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc98a:	b00a      	add	sp, #40	; 0x28
   bc98c:	bd70      	pop	{r4, r5, r6, pc}
   bc98e:	bf00      	nop
   bc990:	000c104a 	.word	0x000c104a

000bc994 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc994:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc996:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bc998:	4620      	mov	r0, r4
   bc99a:	4913      	ldr	r1, [pc, #76]	; (bc9e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc99c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bc99e:	f002 fd94 	bl	bf4ca <strcmp>
   bc9a2:	b950      	cbnz	r0, bc9ba <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bc9a4:	f001 fda8 	bl	be4f8 <_Z16_fetch_usbserialv>
   bc9a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bc9ac:	f001 fd92 	bl	be4d4 <_ZN9USBSerial5beginEl>
}
   bc9b0:	b003      	add	sp, #12
   bc9b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bc9b6:	f001 bd9f 	b.w	be4f8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bc9ba:	490c      	ldr	r1, [pc, #48]	; (bc9ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bc9bc:	4620      	mov	r0, r4
   bc9be:	f002 fd84 	bl	bf4ca <strcmp>
   bc9c2:	b978      	cbnz	r0, bc9e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bc9c4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bc9c8:	a901      	add	r1, sp, #4
   bc9ca:	4628      	mov	r0, r5
        int baud = 9600;
   bc9cc:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bc9ce:	f7ff ffaf 	bl	bc930 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bc9d2:	f001 ff8f 	bl	be8f4 <_Z22__fetch_global_Serial1v>
   bc9d6:	9901      	ldr	r1, [sp, #4]
   bc9d8:	f001 fd24 	bl	be424 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bc9dc:	f001 ff8a 	bl	be8f4 <_Z22__fetch_global_Serial1v>
}
   bc9e0:	b003      	add	sp, #12
   bc9e2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bc9e4:	2000      	movs	r0, #0
   bc9e6:	e7fb      	b.n	bc9e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bc9e8:	000c104f 	.word	0x000c104f
   bc9ec:	000c1056 	.word	0x000c1056

000bc9f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc9f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc9f2:	e9d0 5300 	ldrd	r5, r3, [r0]
   bc9f6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc9f8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc9fa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc9fe:	42ae      	cmp	r6, r5
   bca00:	d005      	beq.n	bca0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bca02:	f105 0008 	add.w	r0, r5, #8
   bca06:	f7ff fff3 	bl	bc9f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bca0a:	3514      	adds	r5, #20
   bca0c:	e7f7      	b.n	bc9fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bca0e:	6820      	ldr	r0, [r4, #0]
   bca10:	f7fe fd8a 	bl	bb528 <free>
}
   bca14:	4620      	mov	r0, r4
   bca16:	bd70      	pop	{r4, r5, r6, pc}

000bca18 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bca18:	b510      	push	{r4, lr}
   bca1a:	4604      	mov	r4, r0
   bca1c:	300c      	adds	r0, #12
   bca1e:	f7ff ffe7 	bl	bc9f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bca22:	4620      	mov	r0, r4
   bca24:	f7fe fe23 	bl	bb66e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bca28:	4620      	mov	r0, r4
   bca2a:	bd10      	pop	{r4, pc}

000bca2c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bca2c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bca2e:	4b04      	ldr	r3, [pc, #16]	; (bca40 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bca30:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bca32:	f840 3b04 	str.w	r3, [r0], #4
   bca36:	f7ff ffef 	bl	bca18 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bca3a:	4620      	mov	r0, r4
   bca3c:	bd10      	pop	{r4, pc}
   bca3e:	bf00      	nop
   bca40:	000c04ac 	.word	0x000c04ac

000bca44 <_ZN5spark16StreamLogHandlerD0Ev>:
   bca44:	b510      	push	{r4, lr}
   bca46:	4604      	mov	r4, r0
   bca48:	f7ff fff0 	bl	bca2c <_ZN5spark16StreamLogHandlerD1Ev>
   bca4c:	4620      	mov	r0, r4
   bca4e:	2124      	movs	r1, #36	; 0x24
   bca50:	f7f7 fb25 	bl	b409e <_ZdlPvj>
   bca54:	4620      	mov	r0, r4
   bca56:	bd10      	pop	{r4, pc}

000bca58 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bca58:	b510      	push	{r4, lr}
   bca5a:	4b03      	ldr	r3, [pc, #12]	; (bca68 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bca5c:	6003      	str	r3, [r0, #0]
   bca5e:	4604      	mov	r4, r0
   bca60:	f7ff ffe4 	bl	bca2c <_ZN5spark16StreamLogHandlerD1Ev>
   bca64:	4620      	mov	r0, r4
   bca66:	bd10      	pop	{r4, pc}
   bca68:	000c10f0 	.word	0x000c10f0

000bca6c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bca6c:	b510      	push	{r4, lr}
   bca6e:	4604      	mov	r4, r0
   bca70:	f7ff fff2 	bl	bca58 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bca74:	4620      	mov	r0, r4
   bca76:	2124      	movs	r1, #36	; 0x24
   bca78:	f7f7 fb11 	bl	b409e <_ZdlPvj>
   bca7c:	4620      	mov	r0, r4
   bca7e:	bd10      	pop	{r4, pc}

000bca80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bca80:	2200      	movs	r2, #0
   bca82:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bca86:	b510      	push	{r4, lr}
        capacity_(0) {
   bca88:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bca8a:	680c      	ldr	r4, [r1, #0]
   bca8c:	6004      	str	r4, [r0, #0]
   bca8e:	684c      	ldr	r4, [r1, #4]
   bca90:	6044      	str	r4, [r0, #4]
   bca92:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bca94:	600a      	str	r2, [r1, #0]
   bca96:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bca98:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bca9a:	608a      	str	r2, [r1, #8]
}
   bca9c:	bd10      	pop	{r4, pc}

000bca9e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bca9e:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bcaa0:	6803      	ldr	r3, [r0, #0]
   bcaa2:	4604      	mov	r4, r0
   bcaa4:	6818      	ldr	r0, [r3, #0]
   bcaa6:	f7fe f963 	bl	bad70 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bcaaa:	4620      	mov	r0, r4
   bcaac:	bd10      	pop	{r4, pc}
	...

000bcab0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bcab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcab4:	b087      	sub	sp, #28
   bcab6:	4680      	mov	r8, r0
   bcab8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bcaba:	4b1c      	ldr	r3, [pc, #112]	; (bcb2c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bcabc:	685b      	ldr	r3, [r3, #4]
   bcabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bcac2:	4689      	mov	r9, r1
   bcac4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bcac6:	b96b      	cbnz	r3, bcae4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bcac8:	f7ff ff04 	bl	bc8d4 <_ZN5spark10LogManager8instanceEv>
   bcacc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bcace:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bcad2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcad4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bcad6:	f7ff fddf 	bl	bc698 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bcada:	7b23      	ldrb	r3, [r4, #12]
   bcadc:	b12b      	cbz	r3, bcaea <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bcade:	a805      	add	r0, sp, #20
   bcae0:	f7ff ffdd 	bl	bca9e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bcae4:	b007      	add	sp, #28
   bcae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bcaea:	2301      	movs	r3, #1
   bcaec:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bcaee:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bcaf2:	fa5f f989 	uxtb.w	r9, r9
   bcaf6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bcafa:	45aa      	cmp	sl, r5
   bcafc:	d012      	beq.n	bcb24 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bcafe:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bcb02:	4631      	mov	r1, r6
   bcb04:	1d38      	adds	r0, r7, #4
   bcb06:	f7ff fe71 	bl	bc7ec <_ZNK5spark6detail9LogFilter5levelEPKc>
   bcb0a:	4581      	cmp	r9, r0
   bcb0c:	d3f5      	bcc.n	bcafa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bcb0e:	683b      	ldr	r3, [r7, #0]
   bcb10:	9a03      	ldr	r2, [sp, #12]
   bcb12:	9200      	str	r2, [sp, #0]
   bcb14:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bcb18:	464a      	mov	r2, r9
   bcb1a:	4633      	mov	r3, r6
   bcb1c:	4641      	mov	r1, r8
   bcb1e:	4638      	mov	r0, r7
   bcb20:	47d8      	blx	fp
   bcb22:	e7ea      	b.n	bcafa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bcb24:	2300      	movs	r3, #0
   bcb26:	7323      	strb	r3, [r4, #12]
   bcb28:	e7d9      	b.n	bcade <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bcb2a:	bf00      	nop
   bcb2c:	e000ed00 	.word	0xe000ed00

000bcb30 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bcb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcb34:	469b      	mov	fp, r3
   bcb36:	4b1a      	ldr	r3, [pc, #104]	; (bcba0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bcb38:	685b      	ldr	r3, [r3, #4]
   bcb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bcb3e:	4680      	mov	r8, r0
   bcb40:	4689      	mov	r9, r1
   bcb42:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bcb44:	b96b      	cbnz	r3, bcb62 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bcb46:	f7ff fec5 	bl	bc8d4 <_ZN5spark10LogManager8instanceEv>
   bcb4a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bcb4c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bcb50:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcb52:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bcb54:	f7ff fda0 	bl	bc698 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bcb58:	7b23      	ldrb	r3, [r4, #12]
   bcb5a:	b12b      	cbz	r3, bcb68 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bcb5c:	a801      	add	r0, sp, #4
   bcb5e:	f7ff ff9e 	bl	bca9e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bcb62:	b003      	add	sp, #12
   bcb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bcb68:	2301      	movs	r3, #1
   bcb6a:	7323      	strb	r3, [r4, #12]
   bcb6c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bcb70:	b2f6      	uxtb	r6, r6
   bcb72:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bcb76:	4555      	cmp	r5, sl
   bcb78:	d00e      	beq.n	bcb98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bcb7a:	f855 7b04 	ldr.w	r7, [r5], #4
   bcb7e:	4659      	mov	r1, fp
   bcb80:	1d38      	adds	r0, r7, #4
   bcb82:	f7ff fe33 	bl	bc7ec <_ZNK5spark6detail9LogFilter5levelEPKc>
   bcb86:	4286      	cmp	r6, r0
   bcb88:	d3f5      	bcc.n	bcb76 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bcb8a:	683b      	ldr	r3, [r7, #0]
   bcb8c:	464a      	mov	r2, r9
   bcb8e:	68db      	ldr	r3, [r3, #12]
   bcb90:	4641      	mov	r1, r8
   bcb92:	4638      	mov	r0, r7
   bcb94:	4798      	blx	r3
   bcb96:	e7ee      	b.n	bcb76 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bcb98:	2300      	movs	r3, #0
   bcb9a:	7323      	strb	r3, [r4, #12]
   bcb9c:	e7de      	b.n	bcb5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bcb9e:	bf00      	nop
   bcba0:	e000ed00 	.word	0xe000ed00

000bcba4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bcba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bcba8:	4b16      	ldr	r3, [pc, #88]	; (bcc04 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bcbaa:	685b      	ldr	r3, [r3, #4]
   bcbac:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bcbb0:	4605      	mov	r5, r0
   bcbb2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bcbb4:	bb1b      	cbnz	r3, bcbfe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bcbb6:	f7ff fe8d 	bl	bc8d4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bcbba:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bcbbe:	4604      	mov	r4, r0
   bcbc0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcbc2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bcbc4:	f7ff fd68 	bl	bc698 <_ZN14RecursiveMutex4lockEv.isra.0>
   bcbc8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bcbcc:	2446      	movs	r4, #70	; 0x46
   bcbce:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bcbd2:	45b0      	cmp	r8, r6
   bcbd4:	d109      	bne.n	bcbea <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bcbd6:	a801      	add	r0, sp, #4
   bcbd8:	f7ff ff61 	bl	bca9e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bcbdc:	42a5      	cmp	r5, r4
   bcbde:	bfb4      	ite	lt
   bcbe0:	2000      	movlt	r0, #0
   bcbe2:	2001      	movge	r0, #1
}
   bcbe4:	b002      	add	sp, #8
   bcbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bcbea:	f856 0b04 	ldr.w	r0, [r6], #4
   bcbee:	4639      	mov	r1, r7
   bcbf0:	3004      	adds	r0, #4
   bcbf2:	f7ff fdfb 	bl	bc7ec <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bcbf6:	4284      	cmp	r4, r0
   bcbf8:	bfa8      	it	ge
   bcbfa:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bcbfc:	e7e9      	b.n	bcbd2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bcbfe:	2000      	movs	r0, #0
   bcc00:	e7f0      	b.n	bcbe4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bcc02:	bf00      	nop
   bcc04:	e000ed00 	.word	0xe000ed00

000bcc08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bcc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcc0a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bcc0e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bcc10:	4604      	mov	r4, r0
   bcc12:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcc14:	db0d      	blt.n	bcc32 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bcc16:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bcc18:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bcc1a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bcc1c:	dd04      	ble.n	bcc28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bcc1e:	00b9      	lsls	r1, r7, #2
   bcc20:	f7fe fc8a 	bl	bb538 <realloc>
            if (!d) {
   bcc24:	b918      	cbnz	r0, bcc2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bcc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bcc28:	f7fe fc7e 	bl	bb528 <free>
        T* d = nullptr;
   bcc2c:	2000      	movs	r0, #0
        data_ = d;
   bcc2e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bcc30:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bcc32:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bcc34:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bcc36:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bcc3a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bcc3c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bcc40:	1d08      	adds	r0, r1, #4
   bcc42:	f002 fb9d 	bl	bf380 <memmove>
    new(p) T(std::move(value));
   bcc46:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bcc4a:	6863      	ldr	r3, [r4, #4]
   bcc4c:	3301      	adds	r3, #1
   bcc4e:	6063      	str	r3, [r4, #4]
    return true;
   bcc50:	2001      	movs	r0, #1
   bcc52:	e7e8      	b.n	bcc26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bcc54 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bcc54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bcc56:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bcc5a:	4604      	mov	r4, r0
   bcc5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcc5e:	9301      	str	r3, [sp, #4]
   bcc60:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bcc62:	f7ff fd19 	bl	bc698 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bcc66:	e9d4 3200 	ldrd	r3, r2, [r4]
   bcc6a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bcc6e:	4293      	cmp	r3, r2
   bcc70:	4619      	mov	r1, r3
   bcc72:	d00b      	beq.n	bcc8c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bcc74:	6809      	ldr	r1, [r1, #0]
   bcc76:	42a9      	cmp	r1, r5
   bcc78:	f103 0304 	add.w	r3, r3, #4
   bcc7c:	d1f7      	bne.n	bcc6e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bcc7e:	a801      	add	r0, sp, #4
   bcc80:	f7ff ff0d 	bl	bca9e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bcc84:	2500      	movs	r5, #0
}
   bcc86:	4628      	mov	r0, r5
   bcc88:	b003      	add	sp, #12
   bcc8a:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bcc8c:	4629      	mov	r1, r5
   bcc8e:	4620      	mov	r0, r4
   bcc90:	f7ff ffba 	bl	bcc08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bcc94:	4605      	mov	r5, r0
   bcc96:	2800      	cmp	r0, #0
   bcc98:	d0f1      	beq.n	bcc7e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bcc9a:	6863      	ldr	r3, [r4, #4]
   bcc9c:	2b01      	cmp	r3, #1
   bcc9e:	d101      	bne.n	bcca4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bcca0:	f7ff fe34 	bl	bc90c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bcca4:	a801      	add	r0, sp, #4
   bcca6:	f7ff fefa 	bl	bca9e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bccaa:	e7ec      	b.n	bcc86 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bccac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bccac:	b570      	push	{r4, r5, r6, lr}
   bccae:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bccb0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bccb4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bccb6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bccba:	4282      	cmp	r2, r0
   bccbc:	d00f      	beq.n	bccde <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bccbe:	4601      	mov	r1, r0
            if (*p == value) {
   bccc0:	681d      	ldr	r5, [r3, #0]
   bccc2:	f851 6b04 	ldr.w	r6, [r1], #4
   bccc6:	42ae      	cmp	r6, r5
   bccc8:	d107      	bne.n	bccda <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bccca:	1a52      	subs	r2, r2, r1
   bcccc:	f002 fb58 	bl	bf380 <memmove>
    --size_;
   bccd0:	6863      	ldr	r3, [r4, #4]
   bccd2:	3b01      	subs	r3, #1
   bccd4:	6063      	str	r3, [r4, #4]
    return true;
   bccd6:	2001      	movs	r0, #1
}
   bccd8:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bccda:	4608      	mov	r0, r1
   bccdc:	e7ed      	b.n	bccba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bccde:	2000      	movs	r0, #0
   bcce0:	e7fa      	b.n	bccd8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bcce2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bcce2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bcce4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bcce8:	4604      	mov	r4, r0
   bccea:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bccec:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bccee:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bccf0:	f7ff fcd2 	bl	bc698 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bccf4:	a901      	add	r1, sp, #4
   bccf6:	4620      	mov	r0, r4
   bccf8:	f7ff ffd8 	bl	bccac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bccfc:	b118      	cbz	r0, bcd06 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bccfe:	6863      	ldr	r3, [r4, #4]
   bcd00:	b90b      	cbnz	r3, bcd06 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bcd02:	f7ff fe0f 	bl	bc924 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bcd06:	a803      	add	r0, sp, #12
   bcd08:	f7ff fec9 	bl	bca9e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bcd0c:	b004      	add	sp, #16
   bcd0e:	bd10      	pop	{r4, pc}

000bcd10 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bcd10:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bcd12:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bcd16:	2318      	movs	r3, #24
   bcd18:	4604      	mov	r4, r0
   bcd1a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bcd1e:	42ae      	cmp	r6, r5
   bcd20:	d015      	beq.n	bcd4e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bcd22:	f105 0110 	add.w	r1, r5, #16
   bcd26:	4620      	mov	r0, r4
   bcd28:	f7ff ffc0 	bl	bccac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bcd2c:	6863      	ldr	r3, [r4, #4]
   bcd2e:	b90b      	cbnz	r3, bcd34 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bcd30:	f7ff fdf8 	bl	bc924 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bcd34:	69e0      	ldr	r0, [r4, #28]
   bcd36:	6929      	ldr	r1, [r5, #16]
   bcd38:	6803      	ldr	r3, [r0, #0]
   bcd3a:	68db      	ldr	r3, [r3, #12]
   bcd3c:	4798      	blx	r3
        if (h.stream) {
   bcd3e:	6969      	ldr	r1, [r5, #20]
   bcd40:	b119      	cbz	r1, bcd4a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bcd42:	6a20      	ldr	r0, [r4, #32]
   bcd44:	6803      	ldr	r3, [r0, #0]
   bcd46:	68db      	ldr	r3, [r3, #12]
   bcd48:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bcd4a:	3518      	adds	r5, #24
   bcd4c:	e7e7      	b.n	bcd1e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bcd4e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bcd52:	2618      	movs	r6, #24
   bcd54:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bcd58:	42ae      	cmp	r6, r5
   bcd5a:	d004      	beq.n	bcd66 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bcd5c:	4628      	mov	r0, r5
   bcd5e:	f000 ff45 	bl	bdbec <_ZN6StringD1Ev>
   bcd62:	3518      	adds	r5, #24
   bcd64:	e7f8      	b.n	bcd58 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bcd66:	2300      	movs	r3, #0
   bcd68:	6163      	str	r3, [r4, #20]
}
   bcd6a:	bd70      	pop	{r4, r5, r6, pc}

000bcd6c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bcd6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bcd6e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bcd70:	f7ff fdd8 	bl	bc924 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bcd74:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bcd78:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcd7a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bcd7c:	f7ff fc8c 	bl	bc698 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bcd80:	4620      	mov	r0, r4
   bcd82:	f7ff ffc5 	bl	bcd10 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bcd86:	a801      	add	r0, sp, #4
   bcd88:	f7ff fe89 	bl	bca9e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bcd8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bcd8e:	b108      	cbz	r0, bcd94 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bcd90:	f7fd ffde 	bl	bad50 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bcd94:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bcd98:	2618      	movs	r6, #24
   bcd9a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bcd9e:	42ae      	cmp	r6, r5
   bcda0:	d004      	beq.n	bcdac <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bcda2:	4628      	mov	r0, r5
   bcda4:	f000 ff22 	bl	bdbec <_ZN6StringD1Ev>
   bcda8:	3518      	adds	r5, #24
   bcdaa:	e7f8      	b.n	bcd9e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bcdac:	6920      	ldr	r0, [r4, #16]
   bcdae:	f7fe fbbb 	bl	bb528 <free>
   bcdb2:	6820      	ldr	r0, [r4, #0]
   bcdb4:	f7fe fbb8 	bl	bb528 <free>
}
   bcdb8:	4620      	mov	r0, r4
   bcdba:	b002      	add	sp, #8
   bcdbc:	bd70      	pop	{r4, r5, r6, pc}
	...

000bcdc0 <__tcf_2>:
    static LogManager mgr;
   bcdc0:	4801      	ldr	r0, [pc, #4]	; (bcdc8 <__tcf_2+0x8>)
   bcdc2:	f7ff bfd3 	b.w	bcd6c <_ZN5spark10LogManagerD1Ev>
   bcdc6:	bf00      	nop
   bcdc8:	2003e658 	.word	0x2003e658

000bcdcc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bcdcc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bcdce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcdd0:	4604      	mov	r4, r0
   bcdd2:	460d      	mov	r5, r1
   bcdd4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bcdd6:	d915      	bls.n	bce04 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bcdd8:	4290      	cmp	r0, r2
   bcdda:	d214      	bcs.n	bce06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bcddc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bcde0:	1a75      	subs	r5, r6, r1
   bcde2:	f1a1 0714 	sub.w	r7, r1, #20
   bcde6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bcde8:	42b7      	cmp	r7, r6
   bcdea:	d01a      	beq.n	bce22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bcdec:	b11c      	cbz	r4, bcdf6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bcdee:	4631      	mov	r1, r6
   bcdf0:	4620      	mov	r0, r4
   bcdf2:	f7ff fcab 	bl	bc74c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bcdf6:	f106 0008 	add.w	r0, r6, #8
   bcdfa:	f7ff fdf9 	bl	bc9f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bcdfe:	3e14      	subs	r6, #20
   bce00:	3c14      	subs	r4, #20
   bce02:	e7f1      	b.n	bcde8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bce04:	d00d      	beq.n	bce22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bce06:	42b5      	cmp	r5, r6
   bce08:	d00b      	beq.n	bce22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bce0a:	b11c      	cbz	r4, bce14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bce0c:	4629      	mov	r1, r5
   bce0e:	4620      	mov	r0, r4
   bce10:	f7ff fc9c 	bl	bc74c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bce14:	f105 0008 	add.w	r0, r5, #8
   bce18:	f7ff fdea 	bl	bc9f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bce1c:	3514      	adds	r5, #20
   bce1e:	3414      	adds	r4, #20
   bce20:	e7f1      	b.n	bce06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bce22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bce24 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bce24:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bce26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bce28:	4604      	mov	r4, r0
   bce2a:	460d      	mov	r5, r1
   bce2c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bce2e:	d914      	bls.n	bce5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bce30:	4290      	cmp	r0, r2
   bce32:	d213      	bcs.n	bce5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bce34:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bce38:	1a75      	subs	r5, r6, r1
   bce3a:	f1a1 0710 	sub.w	r7, r1, #16
   bce3e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bce40:	42b7      	cmp	r7, r6
   bce42:	d018      	beq.n	bce76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bce44:	b11c      	cbz	r4, bce4e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bce46:	4631      	mov	r1, r6
   bce48:	4620      	mov	r0, r4
   bce4a:	f000 ff4b 	bl	bdce4 <_ZN6StringC1EOS_>
                end->~T();
   bce4e:	4630      	mov	r0, r6
   bce50:	f000 fecc 	bl	bdbec <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bce54:	3e10      	subs	r6, #16
   bce56:	3c10      	subs	r4, #16
   bce58:	e7f2      	b.n	bce40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bce5a:	d00c      	beq.n	bce76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bce5c:	42b5      	cmp	r5, r6
   bce5e:	d00a      	beq.n	bce76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bce60:	b11c      	cbz	r4, bce6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bce62:	4629      	mov	r1, r5
   bce64:	4620      	mov	r0, r4
   bce66:	f000 ff3d 	bl	bdce4 <_ZN6StringC1EOS_>
                p->~T();
   bce6a:	4628      	mov	r0, r5
   bce6c:	f000 febe 	bl	bdbec <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bce70:	3510      	adds	r5, #16
   bce72:	3410      	adds	r4, #16
   bce74:	e7f2      	b.n	bce5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bce76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bce78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bce78:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bce7a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bce7c:	4605      	mov	r5, r0
        if (n > 0) {
   bce7e:	dd11      	ble.n	bcea4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bce80:	0130      	lsls	r0, r6, #4
   bce82:	f7fe fb49 	bl	bb518 <malloc>
            if (!d) {
   bce86:	4604      	mov	r4, r0
   bce88:	b158      	cbz	r0, bcea2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bce8a:	e9d5 1200 	ldrd	r1, r2, [r5]
   bce8e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bce92:	f7ff ffc7 	bl	bce24 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bce96:	6828      	ldr	r0, [r5, #0]
   bce98:	f7fe fb46 	bl	bb528 <free>
        data_ = d;
   bce9c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bce9e:	60ae      	str	r6, [r5, #8]
        return true;
   bcea0:	2001      	movs	r0, #1
    }
   bcea2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bcea4:	2400      	movs	r4, #0
   bcea6:	e7f6      	b.n	bce96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bcea8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bcea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bceac:	4690      	mov	r8, r2
   bceae:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bceb0:	2300      	movs	r3, #0
   bceb2:	9103      	str	r1, [sp, #12]
    return size_;
   bceb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bceb8:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bceba:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bcebc:	4299      	cmp	r1, r3
        capacity_(0) {
   bcebe:	e9c0 3300 	strd	r3, r3, [r0]
   bcec2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bcec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bceca:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bcece:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bced0:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bced2:	dc23      	bgt.n	bcf1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bced4:	e9d8 5700 	ldrd	r5, r7, [r8]
   bced8:	2314      	movs	r3, #20
   bceda:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bcede:	42af      	cmp	r7, r5
   bcee0:	d03b      	beq.n	bcf5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bcee2:	4629      	mov	r1, r5
   bcee4:	a80b      	add	r0, sp, #44	; 0x2c
   bcee6:	f000 fefd 	bl	bdce4 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bceea:	a90b      	add	r1, sp, #44	; 0x2c
   bceec:	a80f      	add	r0, sp, #60	; 0x3c
   bceee:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bcef0:	f000 fef8 	bl	bdce4 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcef4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bcef8:	4299      	cmp	r1, r3
   bcefa:	da1b      	bge.n	bcf34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bcefc:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bcefe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bcf00:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bcf04:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bcf08:	4631      	mov	r1, r6
   bcf0a:	f106 0010 	add.w	r0, r6, #16
   bcf0e:	f7ff ff89 	bl	bce24 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bcf12:	b9ee      	cbnz	r6, bcf50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bcf14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bcf16:	3301      	adds	r3, #1
   bcf18:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bcf1a:	e011      	b.n	bcf40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bcf1c:	a808      	add	r0, sp, #32
   bcf1e:	f7ff ffab 	bl	bce78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bcf22:	2800      	cmp	r0, #0
   bcf24:	d1d6      	bne.n	bced4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bcf26:	a808      	add	r0, sp, #32
   bcf28:	f7fe fba1 	bl	bb66e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bcf2c:	4620      	mov	r0, r4
   bcf2e:	b015      	add	sp, #84	; 0x54
   bcf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcf34:	3101      	adds	r1, #1
   bcf36:	a808      	add	r0, sp, #32
   bcf38:	f7ff ff9e 	bl	bce78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bcf3c:	2800      	cmp	r0, #0
   bcf3e:	d1dd      	bne.n	bcefc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bcf40:	a80f      	add	r0, sp, #60	; 0x3c
   bcf42:	f000 fe53 	bl	bdbec <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bcf46:	a80b      	add	r0, sp, #44	; 0x2c
   bcf48:	f000 fe50 	bl	bdbec <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bcf4c:	3514      	adds	r5, #20
   bcf4e:	e7c6      	b.n	bcede <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bcf50:	a90f      	add	r1, sp, #60	; 0x3c
   bcf52:	4630      	mov	r0, r6
   bcf54:	f000 fec6 	bl	bdce4 <_ZN6StringC1EOS_>
   bcf58:	e7dc      	b.n	bcf14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bcf5a:	2600      	movs	r6, #0
   bcf5c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bcf60:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bcf62:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bcf66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bcf6a:	429e      	cmp	r6, r3
   bcf6c:	da7c      	bge.n	bd068 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bcf6e:	0133      	lsls	r3, r6, #4
   bcf70:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bcf72:	9306      	str	r3, [sp, #24]
        if (!category) {
   bcf74:	b90b      	cbnz	r3, bcf7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bcf76:	3601      	adds	r6, #1
   bcf78:	e7f5      	b.n	bcf66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bcf7a:	2300      	movs	r3, #0
   bcf7c:	9307      	str	r3, [sp, #28]
   bcf7e:	fb09 f306 	mul.w	r3, r9, r6
   bcf82:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bcf84:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bcf86:	a907      	add	r1, sp, #28
   bcf88:	a806      	add	r0, sp, #24
   bcf8a:	f7ff fb5e 	bl	bc64a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bcf8e:	4682      	mov	sl, r0
   bcf90:	2800      	cmp	r0, #0
   bcf92:	d0f0      	beq.n	bcf76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bcf94:	f04f 0300 	mov.w	r3, #0
   bcf98:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bcf9c:	4601      	mov	r1, r0
   bcf9e:	9a07      	ldr	r2, [sp, #28]
   bcfa0:	f10d 0317 	add.w	r3, sp, #23
   bcfa4:	4628      	mov	r0, r5
   bcfa6:	f7ff fbe5 	bl	bc774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bcfaa:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bcfae:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bcfb0:	2f00      	cmp	r7, #0
   bcfb2:	d14a      	bne.n	bd04a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bcfb4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bcfb8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bcfbc:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bcfc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bcfc4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bcfc8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bcfcc:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcfce:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bcfd2:	4293      	cmp	r3, r2
   bcfd4:	db17      	blt.n	bd006 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bcfd6:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bcfda:	f1ba 0f00 	cmp.w	sl, #0
   bcfde:	dd30      	ble.n	bd042 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bcfe0:	fb09 f00a 	mul.w	r0, r9, sl
   bcfe4:	f7fe fa98 	bl	bb518 <malloc>
            if (!d) {
   bcfe8:	4683      	mov	fp, r0
   bcfea:	b360      	cbz	r0, bd046 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bcfec:	e9d5 1200 	ldrd	r1, r2, [r5]
   bcff0:	fb09 1202 	mla	r2, r9, r2, r1
   bcff4:	f7ff feea 	bl	bcdcc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bcff8:	6828      	ldr	r0, [r5, #0]
   bcffa:	f7fe fa95 	bl	bb528 <free>
        data_ = d;
   bcffe:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bd002:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bd006:	682b      	ldr	r3, [r5, #0]
   bd008:	9a01      	ldr	r2, [sp, #4]
   bd00a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bd00e:	686a      	ldr	r2, [r5, #4]
   bd010:	4651      	mov	r1, sl
   bd012:	fb09 3202 	mla	r2, r9, r2, r3
   bd016:	f10a 0014 	add.w	r0, sl, #20
   bd01a:	f7ff fed7 	bl	bcdcc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bd01e:	f1ba 0f00 	cmp.w	sl, #0
   bd022:	d003      	beq.n	bd02c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bd024:	a90f      	add	r1, sp, #60	; 0x3c
   bd026:	4650      	mov	r0, sl
   bd028:	f7ff fb90 	bl	bc74c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bd02c:	686b      	ldr	r3, [r5, #4]
   bd02e:	3301      	adds	r3, #1
   bd030:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bd032:	a811      	add	r0, sp, #68	; 0x44
   bd034:	f7ff fcdc 	bl	bc9f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bd038:	b13f      	cbz	r7, bd04a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bd03a:	a80b      	add	r0, sp, #44	; 0x2c
   bd03c:	f7ff fcd8 	bl	bc9f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bd040:	e771      	b.n	bcf26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bd042:	46bb      	mov	fp, r7
   bd044:	e7d8      	b.n	bcff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bd046:	2701      	movs	r7, #1
   bd048:	e7f3      	b.n	bd032 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bd04a:	9b01      	ldr	r3, [sp, #4]
   bd04c:	682d      	ldr	r5, [r5, #0]
   bd04e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bd052:	9b06      	ldr	r3, [sp, #24]
   bd054:	781b      	ldrb	r3, [r3, #0]
   bd056:	b92b      	cbnz	r3, bd064 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bd058:	f8d8 3000 	ldr.w	r3, [r8]
   bd05c:	9a02      	ldr	r2, [sp, #8]
   bd05e:	4413      	add	r3, r2
   bd060:	7c1b      	ldrb	r3, [r3, #16]
   bd062:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bd064:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bd066:	e78e      	b.n	bcf86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd068:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bd06a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd06c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd06e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd070:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd072:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bd074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bd076:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd078:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bd07a:	60a2      	str	r2, [r4, #8]
   bd07c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bd07e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd080:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd082:	60e2      	str	r2, [r4, #12]
   bd084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bd086:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd088:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd08a:	6122      	str	r2, [r4, #16]
   bd08c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bd08e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bd090:	9b03      	ldr	r3, [sp, #12]
   bd092:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bd094:	6162      	str	r2, [r4, #20]
   bd096:	7623      	strb	r3, [r4, #24]
   bd098:	e7cf      	b.n	bd03a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bd09c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bd09c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd09e:	4604      	mov	r4, r0
   bd0a0:	b087      	sub	sp, #28
   bd0a2:	460d      	mov	r5, r1
        filter_(level, filters) {
   bd0a4:	4626      	mov	r6, r4
        stream_(&stream) {
   bd0a6:	4619      	mov	r1, r3
   bd0a8:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bd0aa:	4617      	mov	r7, r2
        stream_(&stream) {
   bd0ac:	f7f9 fa0f 	bl	b64ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bd0b0:	4b0b      	ldr	r3, [pc, #44]	; (bd0e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bd0b2:	f846 3b04 	str.w	r3, [r6], #4
   bd0b6:	4669      	mov	r1, sp
   bd0b8:	a803      	add	r0, sp, #12
   bd0ba:	f7f9 fa08 	bl	b64ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bd0be:	aa03      	add	r2, sp, #12
   bd0c0:	4639      	mov	r1, r7
   bd0c2:	4630      	mov	r0, r6
   bd0c4:	f7ff fef0 	bl	bcea8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd0c8:	a803      	add	r0, sp, #12
   bd0ca:	f7f9 f9bf 	bl	b644c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bd0ce:	4668      	mov	r0, sp
   bd0d0:	f7f9 f9bc 	bl	b644c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bd0d4:	4b03      	ldr	r3, [pc, #12]	; (bd0e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bd0d6:	6023      	str	r3, [r4, #0]
}
   bd0d8:	4620      	mov	r0, r4
        stream_(&stream) {
   bd0da:	6225      	str	r5, [r4, #32]
}
   bd0dc:	b007      	add	sp, #28
   bd0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd0e0:	000c04ac 	.word	0x000c04ac
   bd0e4:	000c10d8 	.word	0x000c10d8

000bd0e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bd0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd0ea:	460f      	mov	r7, r1
   bd0ec:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bd0ee:	491d      	ldr	r1, [pc, #116]	; (bd164 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bd0f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bd0f2:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bd0f4:	4616      	mov	r6, r2
   bd0f6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bd0f8:	f002 f9e7 	bl	bf4ca <strcmp>
   bd0fc:	b9c0      	cbnz	r0, bd130 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bd0fe:	b1a4      	cbz	r4, bd12a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bd100:	4629      	mov	r1, r5
   bd102:	a801      	add	r0, sp, #4
   bd104:	f7ff fcbc 	bl	bca80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bd108:	4917      	ldr	r1, [pc, #92]	; (bd168 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bd10a:	2024      	movs	r0, #36	; 0x24
   bd10c:	f001 fc16 	bl	be93c <_ZnwjRKSt9nothrow_t>
   bd110:	4605      	mov	r5, r0
   bd112:	b130      	cbz	r0, bd122 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bd114:	ab01      	add	r3, sp, #4
   bd116:	4632      	mov	r2, r6
   bd118:	4621      	mov	r1, r4
   bd11a:	f7ff ffbf 	bl	bd09c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd11e:	4b13      	ldr	r3, [pc, #76]	; (bd16c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bd120:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bd122:	a801      	add	r0, sp, #4
   bd124:	f7f9 f992 	bl	b644c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bd128:	462c      	mov	r4, r5
}
   bd12a:	4620      	mov	r0, r4
   bd12c:	b005      	add	sp, #20
   bd12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bd130:	490f      	ldr	r1, [pc, #60]	; (bd170 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bd132:	4638      	mov	r0, r7
   bd134:	f002 f9c9 	bl	bf4ca <strcmp>
   bd138:	b990      	cbnz	r0, bd160 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bd13a:	2c00      	cmp	r4, #0
   bd13c:	d0f5      	beq.n	bd12a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bd13e:	4629      	mov	r1, r5
   bd140:	a801      	add	r0, sp, #4
   bd142:	f7ff fc9d 	bl	bca80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bd146:	4908      	ldr	r1, [pc, #32]	; (bd168 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bd148:	2024      	movs	r0, #36	; 0x24
   bd14a:	f001 fbf7 	bl	be93c <_ZnwjRKSt9nothrow_t>
   bd14e:	4605      	mov	r5, r0
   bd150:	2800      	cmp	r0, #0
   bd152:	d0e6      	beq.n	bd122 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bd154:	ab01      	add	r3, sp, #4
   bd156:	4632      	mov	r2, r6
   bd158:	4621      	mov	r1, r4
   bd15a:	f7ff ff9f 	bl	bd09c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd15e:	e7e0      	b.n	bd122 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bd160:	2400      	movs	r4, #0
   bd162:	e7e2      	b.n	bd12a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bd164:	000c105e 	.word	0x000c105e
   bd168:	000c122c 	.word	0x000c122c
   bd16c:	000c10f0 	.word	0x000c10f0
   bd170:	000c1062 	.word	0x000c1062

000bd174 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bd174:	4b01      	ldr	r3, [pc, #4]	; (bd17c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bd176:	4a02      	ldr	r2, [pc, #8]	; (bd180 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bd178:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bd17a:	4770      	bx	lr
   bd17c:	2003e654 	.word	0x2003e654
   bd180:	000c1073 	.word	0x000c1073

000bd184 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd188:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bd18a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd18e:	4604      	mov	r4, r0
   bd190:	460e      	mov	r6, r1
   bd192:	4617      	mov	r7, r2
   bd194:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bd196:	f001 f9af 	bl	be4f8 <_Z16_fetch_usbserialv>
   bd19a:	4581      	cmp	r9, r0
   bd19c:	d04c      	beq.n	bd238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bd19e:	792b      	ldrb	r3, [r5, #4]
   bd1a0:	0719      	lsls	r1, r3, #28
   bd1a2:	d504      	bpl.n	bd1ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bd1a4:	696a      	ldr	r2, [r5, #20]
   bd1a6:	4954      	ldr	r1, [pc, #336]	; (bd2f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bd1a8:	4620      	mov	r0, r4
   bd1aa:	f7ff fac0 	bl	bc72e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bd1ae:	f1b8 0f00 	cmp.w	r8, #0
   bd1b2:	d00d      	beq.n	bd1d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bd1b4:	215b      	movs	r1, #91	; 0x5b
   bd1b6:	4620      	mov	r0, r4
   bd1b8:	f7ff faad 	bl	bc716 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bd1bc:	4641      	mov	r1, r8
   bd1be:	4620      	mov	r0, r4
   bd1c0:	f7ff fa9a 	bl	bc6f8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bd1c4:	6823      	ldr	r3, [r4, #0]
   bd1c6:	494d      	ldr	r1, [pc, #308]	; (bd2fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bd1c8:	68db      	ldr	r3, [r3, #12]
   bd1ca:	2202      	movs	r2, #2
   bd1cc:	4620      	mov	r0, r4
   bd1ce:	4798      	blx	r3
    if (attr.has_file) {
   bd1d0:	792b      	ldrb	r3, [r5, #4]
   bd1d2:	07da      	lsls	r2, r3, #31
   bd1d4:	d523      	bpl.n	bd21e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bd1d6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bd1da:	212f      	movs	r1, #47	; 0x2f
   bd1dc:	4640      	mov	r0, r8
   bd1de:	f002 f9d3 	bl	bf588 <strrchr>
    if (s1) {
   bd1e2:	b108      	cbz	r0, bd1e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bd1e4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bd1e8:	4641      	mov	r1, r8
   bd1ea:	4620      	mov	r0, r4
   bd1ec:	f7ff fa84 	bl	bc6f8 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bd1f0:	792b      	ldrb	r3, [r5, #4]
   bd1f2:	079b      	lsls	r3, r3, #30
   bd1f4:	d508      	bpl.n	bd208 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bd1f6:	213a      	movs	r1, #58	; 0x3a
   bd1f8:	4620      	mov	r0, r4
   bd1fa:	f7ff fa8c 	bl	bc716 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bd1fe:	68ea      	ldr	r2, [r5, #12]
   bd200:	493f      	ldr	r1, [pc, #252]	; (bd300 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bd202:	4620      	mov	r0, r4
   bd204:	f7ff fa93 	bl	bc72e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bd208:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bd20a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bd20c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bd210:	68db      	ldr	r3, [r3, #12]
   bd212:	bf14      	ite	ne
   bd214:	493b      	ldrne	r1, [pc, #236]	; (bd304 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bd216:	493c      	ldreq	r1, [pc, #240]	; (bd308 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bd218:	2202      	movs	r2, #2
            write(": ", 2);
   bd21a:	4620      	mov	r0, r4
   bd21c:	4798      	blx	r3
    if (attr.has_function) {
   bd21e:	792b      	ldrb	r3, [r5, #4]
   bd220:	0758      	lsls	r0, r3, #29
   bd222:	d51d      	bpl.n	bd260 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bd224:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bd226:	460b      	mov	r3, r1
   bd228:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bd22a:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd22e:	b160      	cbz	r0, bd24a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bd230:	2820      	cmp	r0, #32
   bd232:	d108      	bne.n	bd246 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bd234:	4619      	mov	r1, r3
   bd236:	e7f7      	b.n	bd228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bd238:	4834      	ldr	r0, [pc, #208]	; (bd30c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bd23a:	f000 f966 	bl	bd50a <_ZN5spark12NetworkClass9listeningEv>
   bd23e:	2800      	cmp	r0, #0
   bd240:	d0ad      	beq.n	bd19e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bd242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bd246:	2828      	cmp	r0, #40	; 0x28
   bd248:	d1ee      	bne.n	bd228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bd24a:	6823      	ldr	r3, [r4, #0]
   bd24c:	1a52      	subs	r2, r2, r1
   bd24e:	68db      	ldr	r3, [r3, #12]
   bd250:	4620      	mov	r0, r4
   bd252:	4798      	blx	r3
        write("(): ", 4);
   bd254:	6823      	ldr	r3, [r4, #0]
   bd256:	492e      	ldr	r1, [pc, #184]	; (bd310 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bd258:	68db      	ldr	r3, [r3, #12]
   bd25a:	2204      	movs	r2, #4
   bd25c:	4620      	mov	r0, r4
   bd25e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bd260:	2100      	movs	r1, #0
   bd262:	4638      	mov	r0, r7
   bd264:	f7fd fffc 	bl	bb260 <log_level_name>
   bd268:	4601      	mov	r1, r0
    write(s);
   bd26a:	4620      	mov	r0, r4
   bd26c:	f7ff fa44 	bl	bc6f8 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bd270:	6823      	ldr	r3, [r4, #0]
   bd272:	4925      	ldr	r1, [pc, #148]	; (bd308 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bd274:	68db      	ldr	r3, [r3, #12]
   bd276:	2202      	movs	r2, #2
   bd278:	4620      	mov	r0, r4
   bd27a:	4798      	blx	r3
    if (msg) {
   bd27c:	b11e      	cbz	r6, bd286 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bd27e:	4631      	mov	r1, r6
   bd280:	4620      	mov	r0, r4
   bd282:	f7ff fa39 	bl	bc6f8 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bd286:	792b      	ldrb	r3, [r5, #4]
   bd288:	f013 0f30 	tst.w	r3, #48	; 0x30
   bd28c:	d02c      	beq.n	bd2e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bd28e:	6823      	ldr	r3, [r4, #0]
   bd290:	4920      	ldr	r1, [pc, #128]	; (bd314 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bd292:	68db      	ldr	r3, [r3, #12]
   bd294:	2202      	movs	r2, #2
   bd296:	4620      	mov	r0, r4
   bd298:	4798      	blx	r3
        if (attr.has_code) {
   bd29a:	792b      	ldrb	r3, [r5, #4]
   bd29c:	06d9      	lsls	r1, r3, #27
   bd29e:	d50a      	bpl.n	bd2b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bd2a0:	6823      	ldr	r3, [r4, #0]
   bd2a2:	491d      	ldr	r1, [pc, #116]	; (bd318 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bd2a4:	68db      	ldr	r3, [r3, #12]
   bd2a6:	2207      	movs	r2, #7
   bd2a8:	4620      	mov	r0, r4
   bd2aa:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bd2ac:	69aa      	ldr	r2, [r5, #24]
   bd2ae:	491b      	ldr	r1, [pc, #108]	; (bd31c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bd2b0:	4620      	mov	r0, r4
   bd2b2:	f7ff fa3c 	bl	bc72e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bd2b6:	792b      	ldrb	r3, [r5, #4]
   bd2b8:	069a      	lsls	r2, r3, #26
   bd2ba:	d511      	bpl.n	bd2e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bd2bc:	06db      	lsls	r3, r3, #27
   bd2be:	d505      	bpl.n	bd2cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bd2c0:	6823      	ldr	r3, [r4, #0]
   bd2c2:	4910      	ldr	r1, [pc, #64]	; (bd304 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bd2c4:	68db      	ldr	r3, [r3, #12]
   bd2c6:	2202      	movs	r2, #2
   bd2c8:	4620      	mov	r0, r4
   bd2ca:	4798      	blx	r3
            write("details = ", 10);
   bd2cc:	6823      	ldr	r3, [r4, #0]
   bd2ce:	4914      	ldr	r1, [pc, #80]	; (bd320 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bd2d0:	68db      	ldr	r3, [r3, #12]
   bd2d2:	4620      	mov	r0, r4
   bd2d4:	220a      	movs	r2, #10
   bd2d6:	4798      	blx	r3
            write(attr.details);
   bd2d8:	69e9      	ldr	r1, [r5, #28]
   bd2da:	4620      	mov	r0, r4
   bd2dc:	f7ff fa0c 	bl	bc6f8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bd2e0:	215d      	movs	r1, #93	; 0x5d
   bd2e2:	4620      	mov	r0, r4
   bd2e4:	f7ff fa17 	bl	bc716 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bd2e8:	6823      	ldr	r3, [r4, #0]
   bd2ea:	490e      	ldr	r1, [pc, #56]	; (bd324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bd2ec:	68db      	ldr	r3, [r3, #12]
   bd2ee:	4620      	mov	r0, r4
   bd2f0:	2202      	movs	r2, #2
}
   bd2f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bd2f6:	4718      	bx	r3
   bd2f8:	000c1077 	.word	0x000c1077
   bd2fc:	000c107e 	.word	0x000c107e
   bd300:	000c05ef 	.word	0x000c05ef
   bd304:	000c1081 	.word	0x000c1081
   bd308:	000c1086 	.word	0x000c1086
   bd30c:	2003e680 	.word	0x2003e680
   bd310:	000c1084 	.word	0x000c1084
   bd314:	000c1089 	.word	0x000c1089
   bd318:	000c108c 	.word	0x000c108c
   bd31c:	000c1094 	.word	0x000c1094
   bd320:	000c1097 	.word	0x000c1097
   bd324:	000c10a2 	.word	0x000c10a2

000bd328 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd32c:	b085      	sub	sp, #20
    return stream_;
   bd32e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bd332:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bd334:	4605      	mov	r5, r0
   bd336:	460f      	mov	r7, r1
   bd338:	4690      	mov	r8, r2
   bd33a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bd33c:	f001 f8dc 	bl	be4f8 <_Z16_fetch_usbserialv>
   bd340:	4581      	cmp	r9, r0
   bd342:	d105      	bne.n	bd350 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bd344:	4849      	ldr	r0, [pc, #292]	; (bd46c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bd346:	f000 f8e0 	bl	bd50a <_ZN5spark12NetworkClass9listeningEv>
   bd34a:	2800      	cmp	r0, #0
   bd34c:	f040 808a 	bne.w	bd464 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bd350:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bd352:	4a47      	ldr	r2, [pc, #284]	; (bd470 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bd354:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bd356:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bd35a:	a801      	add	r0, sp, #4
        strm_(stream) {
   bd35c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bd35e:	f88d 9008 	strb.w	r9, [sp, #8]
   bd362:	f7ff f8b4 	bl	bc4ce <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bd366:	4649      	mov	r1, r9
   bd368:	4640      	mov	r0, r8
   bd36a:	f7fd ff79 	bl	bb260 <log_level_name>
    json.name("l", 1).value(s);
   bd36e:	4941      	ldr	r1, [pc, #260]	; (bd474 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bd370:	4680      	mov	r8, r0
   bd372:	2201      	movs	r2, #1
   bd374:	a801      	add	r0, sp, #4
   bd376:	f7ff f939 	bl	bc5ec <_ZN5spark10JSONWriter4nameEPKcj>
   bd37a:	4641      	mov	r1, r8
   bd37c:	f7ff f9ae 	bl	bc6dc <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bd380:	b13f      	cbz	r7, bd392 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bd382:	493d      	ldr	r1, [pc, #244]	; (bd478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bd384:	2201      	movs	r2, #1
   bd386:	a801      	add	r0, sp, #4
   bd388:	f7ff f930 	bl	bc5ec <_ZN5spark10JSONWriter4nameEPKcj>
   bd38c:	4639      	mov	r1, r7
   bd38e:	f7ff f9a5 	bl	bc6dc <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bd392:	b13e      	cbz	r6, bd3a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bd394:	4939      	ldr	r1, [pc, #228]	; (bd47c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bd396:	2201      	movs	r2, #1
   bd398:	a801      	add	r0, sp, #4
   bd39a:	f7ff f927 	bl	bc5ec <_ZN5spark10JSONWriter4nameEPKcj>
   bd39e:	4631      	mov	r1, r6
   bd3a0:	f7ff f99c 	bl	bc6dc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bd3a4:	7923      	ldrb	r3, [r4, #4]
   bd3a6:	07df      	lsls	r7, r3, #31
   bd3a8:	d50e      	bpl.n	bd3c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bd3aa:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bd3ac:	212f      	movs	r1, #47	; 0x2f
   bd3ae:	4630      	mov	r0, r6
   bd3b0:	f002 f8ea 	bl	bf588 <strrchr>
    if (s1) {
   bd3b4:	b100      	cbz	r0, bd3b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bd3b6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bd3b8:	4931      	ldr	r1, [pc, #196]	; (bd480 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bd3ba:	2201      	movs	r2, #1
   bd3bc:	a801      	add	r0, sp, #4
   bd3be:	f7ff f915 	bl	bc5ec <_ZN5spark10JSONWriter4nameEPKcj>
   bd3c2:	4631      	mov	r1, r6
   bd3c4:	f7ff f98a 	bl	bc6dc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bd3c8:	7923      	ldrb	r3, [r4, #4]
   bd3ca:	079e      	lsls	r6, r3, #30
   bd3cc:	d507      	bpl.n	bd3de <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bd3ce:	492d      	ldr	r1, [pc, #180]	; (bd484 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bd3d0:	2202      	movs	r2, #2
   bd3d2:	a801      	add	r0, sp, #4
   bd3d4:	f7ff f90a 	bl	bc5ec <_ZN5spark10JSONWriter4nameEPKcj>
   bd3d8:	68e1      	ldr	r1, [r4, #12]
   bd3da:	f7ff f885 	bl	bc4e8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bd3de:	7923      	ldrb	r3, [r4, #4]
   bd3e0:	0758      	lsls	r0, r3, #29
   bd3e2:	d514      	bpl.n	bd40e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bd3e4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bd3e6:	4633      	mov	r3, r6
   bd3e8:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bd3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd3ee:	b12a      	cbz	r2, bd3fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bd3f0:	2a20      	cmp	r2, #32
   bd3f2:	d101      	bne.n	bd3f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bd3f4:	461e      	mov	r6, r3
   bd3f6:	e7f7      	b.n	bd3e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bd3f8:	2a28      	cmp	r2, #40	; 0x28
   bd3fa:	d1f5      	bne.n	bd3e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bd3fc:	4922      	ldr	r1, [pc, #136]	; (bd488 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bd3fe:	2202      	movs	r2, #2
   bd400:	a801      	add	r0, sp, #4
   bd402:	f7ff f8f3 	bl	bc5ec <_ZN5spark10JSONWriter4nameEPKcj>
   bd406:	1bba      	subs	r2, r7, r6
   bd408:	4631      	mov	r1, r6
   bd40a:	f7ff f8ff 	bl	bc60c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bd40e:	7923      	ldrb	r3, [r4, #4]
   bd410:	0719      	lsls	r1, r3, #28
   bd412:	d507      	bpl.n	bd424 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bd414:	491d      	ldr	r1, [pc, #116]	; (bd48c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bd416:	2201      	movs	r2, #1
   bd418:	a801      	add	r0, sp, #4
   bd41a:	f7ff f8e7 	bl	bc5ec <_ZN5spark10JSONWriter4nameEPKcj>
   bd41e:	6961      	ldr	r1, [r4, #20]
   bd420:	f7ff f874 	bl	bc50c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bd424:	7923      	ldrb	r3, [r4, #4]
   bd426:	06da      	lsls	r2, r3, #27
   bd428:	d508      	bpl.n	bd43c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bd42a:	2204      	movs	r2, #4
   bd42c:	4918      	ldr	r1, [pc, #96]	; (bd490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bd42e:	eb0d 0002 	add.w	r0, sp, r2
   bd432:	f7ff f8db 	bl	bc5ec <_ZN5spark10JSONWriter4nameEPKcj>
   bd436:	69a1      	ldr	r1, [r4, #24]
   bd438:	f7ff f856 	bl	bc4e8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bd43c:	7923      	ldrb	r3, [r4, #4]
   bd43e:	069b      	lsls	r3, r3, #26
   bd440:	d507      	bpl.n	bd452 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bd442:	4914      	ldr	r1, [pc, #80]	; (bd494 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bd444:	2206      	movs	r2, #6
   bd446:	a801      	add	r0, sp, #4
   bd448:	f7ff f8d0 	bl	bc5ec <_ZN5spark10JSONWriter4nameEPKcj>
   bd44c:	69e1      	ldr	r1, [r4, #28]
   bd44e:	f7ff f945 	bl	bc6dc <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bd452:	a801      	add	r0, sp, #4
   bd454:	f7ff f825 	bl	bc4a2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bd458:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bd45a:	490f      	ldr	r1, [pc, #60]	; (bd498 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bd45c:	6803      	ldr	r3, [r0, #0]
   bd45e:	2202      	movs	r2, #2
   bd460:	68db      	ldr	r3, [r3, #12]
   bd462:	4798      	blx	r3
}
   bd464:	b005      	add	sp, #20
   bd466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd46a:	bf00      	nop
   bd46c:	2003e680 	.word	0x2003e680
   bd470:	000c10c0 	.word	0x000c10c0
   bd474:	000c1054 	.word	0x000c1054
   bd478:	000c0984 	.word	0x000c0984
   bd47c:	000c134d 	.word	0x000c134d
   bd480:	000bfb31 	.word	0x000bfb31
   bd484:	000c10a5 	.word	0x000c10a5
   bd488:	000c10a8 	.word	0x000c10a8
   bd48c:	000c035f 	.word	0x000c035f
   bd490:	000c10ab 	.word	0x000c10ab
   bd494:	000c10b0 	.word	0x000c10b0
   bd498:	000c10a2 	.word	0x000c10a2

000bd49c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bd49c:	2300      	movs	r3, #0
   bd49e:	6840      	ldr	r0, [r0, #4]
   bd4a0:	461a      	mov	r2, r3
   bd4a2:	f7fd bfd9 	b.w	bb458 <network_connect>

000bd4a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bd4a6:	6840      	ldr	r0, [r0, #4]
   bd4a8:	2200      	movs	r2, #0
   bd4aa:	2102      	movs	r1, #2
   bd4ac:	f7fd bfe4 	b.w	bb478 <network_disconnect>

000bd4b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bd4b0:	2200      	movs	r2, #0
   bd4b2:	6840      	ldr	r0, [r0, #4]
   bd4b4:	4611      	mov	r1, r2
   bd4b6:	f7fd bfd7 	b.w	bb468 <network_connecting>

000bd4ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bd4ba:	2200      	movs	r2, #0
   bd4bc:	6840      	ldr	r0, [r0, #4]
   bd4be:	4611      	mov	r1, r2
   bd4c0:	f7fd bfe2 	b.w	bb488 <network_ready>

000bd4c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bd4c4:	2300      	movs	r3, #0
   bd4c6:	6840      	ldr	r0, [r0, #4]
   bd4c8:	461a      	mov	r2, r3
   bd4ca:	4619      	mov	r1, r3
   bd4cc:	f7fd bfe4 	b.w	bb498 <network_on>

000bd4d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bd4d0:	2300      	movs	r3, #0
   bd4d2:	6840      	ldr	r0, [r0, #4]
   bd4d4:	461a      	mov	r2, r3
   bd4d6:	4619      	mov	r1, r3
   bd4d8:	f7fd bfe6 	b.w	bb4a8 <network_off>

000bd4dc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bd4dc:	6840      	ldr	r0, [r0, #4]
   bd4de:	2100      	movs	r1, #0
   bd4e0:	f7fe b80a 	b.w	bb4f8 <network_is_on>

000bd4e4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bd4e4:	6840      	ldr	r0, [r0, #4]
   bd4e6:	2100      	movs	r1, #0
   bd4e8:	f7fe b80e 	b.w	bb508 <network_is_off>

000bd4ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bd4ec:	6840      	ldr	r0, [r0, #4]
   bd4ee:	2200      	movs	r2, #0
   bd4f0:	f081 0101 	eor.w	r1, r1, #1
   bd4f4:	f7fd bfe0 	b.w	bb4b8 <network_listen>

000bd4f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bd4f8:	6840      	ldr	r0, [r0, #4]
   bd4fa:	2200      	movs	r2, #0
   bd4fc:	f7fd bfec 	b.w	bb4d8 <network_set_listen_timeout>

000bd500 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bd500:	2200      	movs	r2, #0
   bd502:	6840      	ldr	r0, [r0, #4]
   bd504:	4611      	mov	r1, r2
   bd506:	f7fd bfef 	b.w	bb4e8 <network_get_listen_timeout>

000bd50a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bd50a:	2200      	movs	r2, #0
   bd50c:	6840      	ldr	r0, [r0, #4]
   bd50e:	4611      	mov	r1, r2
   bd510:	f7fd bfda 	b.w	bb4c8 <network_listening>

000bd514 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bd514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd518:	b095      	sub	sp, #84	; 0x54
   bd51a:	4614      	mov	r4, r2
   bd51c:	460d      	mov	r5, r1
   bd51e:	4607      	mov	r7, r0
    IPAddress addr;
   bd520:	f7fe fe6e 	bl	bc200 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bd524:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bd526:	221c      	movs	r2, #28
   bd528:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bd52a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bd52c:	f001 ff42 	bl	bf3b4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bd530:	2340      	movs	r3, #64	; 0x40
   bd532:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bd534:	4620      	mov	r0, r4
   bd536:	466b      	mov	r3, sp
   bd538:	aa0c      	add	r2, sp, #48	; 0x30
   bd53a:	2100      	movs	r1, #0
   bd53c:	f7fd fd30 	bl	bafa0 <netdb_getaddrinfo>
    if (!r) {
   bd540:	4604      	mov	r4, r0
   bd542:	2800      	cmp	r0, #0
   bd544:	d14b      	bne.n	bd5de <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd546:	4602      	mov	r2, r0
   bd548:	2101      	movs	r1, #1
   bd54a:	6868      	ldr	r0, [r5, #4]
   bd54c:	f7fd ff9c 	bl	bb488 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd550:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd552:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd554:	4622      	mov	r2, r4
   bd556:	6868      	ldr	r0, [r5, #4]
   bd558:	f7fd ff96 	bl	bb488 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd55c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd55e:	4681      	mov	r9, r0
        bool ok = false;
   bd560:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd562:	2e00      	cmp	r6, #0
   bd564:	d03b      	beq.n	bd5de <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bd566:	2900      	cmp	r1, #0
   bd568:	d139      	bne.n	bd5de <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bd56a:	6873      	ldr	r3, [r6, #4]
   bd56c:	2b02      	cmp	r3, #2
   bd56e:	d003      	beq.n	bd578 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bd570:	2b0a      	cmp	r3, #10
   bd572:	d011      	beq.n	bd598 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd574:	69f6      	ldr	r6, [r6, #28]
   bd576:	e7f4      	b.n	bd562 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bd578:	f1b8 0f00 	cmp.w	r8, #0
   bd57c:	d0fa      	beq.n	bd574 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bd57e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bd580:	a806      	add	r0, sp, #24
   bd582:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bd584:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bd586:	f7fe fe69 	bl	bc25c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bd58a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd58c:	1d3c      	adds	r4, r7, #4
   bd58e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd590:	682b      	ldr	r3, [r5, #0]
   bd592:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd594:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bd596:	e7ed      	b.n	bd574 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bd598:	f1b9 0f00 	cmp.w	r9, #0
   bd59c:	d0ea      	beq.n	bd574 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bd59e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bd5a0:	2210      	movs	r2, #16
   bd5a2:	a801      	add	r0, sp, #4
   bd5a4:	f001 ff06 	bl	bf3b4 <memset>
                    a.v = 6;
   bd5a8:	2306      	movs	r3, #6
   bd5aa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bd5ae:	ad01      	add	r5, sp, #4
   bd5b0:	f104 0308 	add.w	r3, r4, #8
   bd5b4:	3418      	adds	r4, #24
   bd5b6:	6818      	ldr	r0, [r3, #0]
   bd5b8:	6859      	ldr	r1, [r3, #4]
   bd5ba:	462a      	mov	r2, r5
   bd5bc:	c203      	stmia	r2!, {r0, r1}
   bd5be:	3308      	adds	r3, #8
   bd5c0:	42a3      	cmp	r3, r4
   bd5c2:	4615      	mov	r5, r2
   bd5c4:	d1f7      	bne.n	bd5b6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bd5c6:	a901      	add	r1, sp, #4
   bd5c8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bd5ca:	ad07      	add	r5, sp, #28
   bd5cc:	f7fe fe26 	bl	bc21c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bd5d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd5d2:	1d3c      	adds	r4, r7, #4
   bd5d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd5d6:	682b      	ldr	r3, [r5, #0]
   bd5d8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd5da:	4649      	mov	r1, r9
   bd5dc:	e7ca      	b.n	bd574 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bd5de:	9800      	ldr	r0, [sp, #0]
   bd5e0:	f7fd fcd6 	bl	baf90 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bd5e4:	4638      	mov	r0, r7
   bd5e6:	b015      	add	sp, #84	; 0x54
   bd5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bd5ec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bd5ec:	4b02      	ldr	r3, [pc, #8]	; (bd5f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bd5ee:	4a03      	ldr	r2, [pc, #12]	; (bd5fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bd5f0:	601a      	str	r2, [r3, #0]
   bd5f2:	2200      	movs	r2, #0
   bd5f4:	605a      	str	r2, [r3, #4]

} // spark
   bd5f6:	4770      	bx	lr
   bd5f8:	2003e680 	.word	0x2003e680
   bd5fc:	000c1138 	.word	0x000c1138

000bd600 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bd600:	b508      	push	{r3, lr}
            return &Wire1;
   bd602:	f001 f937 	bl	be874 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bd606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bd60a:	f7fe bd67 	b.w	bc0dc <_ZN7TwoWire4lockEv>

000bd60e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bd60e:	b510      	push	{r4, lr}
   bd610:	4604      	mov	r4, r0
    lock_(_lock)
   bd612:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bd614:	b109      	cbz	r1, bd61a <_ZN4PMICC1Eb+0xc>
        lock();
   bd616:	f7ff fff3 	bl	bd600 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bd61a:	4620      	mov	r0, r4
   bd61c:	bd10      	pop	{r4, pc}

000bd61e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bd61e:	b508      	push	{r3, lr}
            return &Wire1;
   bd620:	f001 f928 	bl	be874 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bd624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bd628:	f7fe bd61 	b.w	bc0ee <_ZN7TwoWire6unlockEv>

000bd62c <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bd62c:	b510      	push	{r4, lr}
    if (lock_) {
   bd62e:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bd630:	4604      	mov	r4, r0
    if (lock_) {
   bd632:	b10b      	cbz	r3, bd638 <_ZN4PMICD1Ev+0xc>
        unlock();
   bd634:	f7ff fff3 	bl	bd61e <_ZN4PMIC6unlockEv>
}
   bd638:	4620      	mov	r0, r4
   bd63a:	bd10      	pop	{r4, pc}

000bd63c <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bd63c:	b510      	push	{r4, lr}
   bd63e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bd640:	6800      	ldr	r0, [r0, #0]
   bd642:	f7ff ffec 	bl	bd61e <_ZN4PMIC6unlockEv>
   bd646:	4620      	mov	r0, r4
   bd648:	bd10      	pop	{r4, pc}

000bd64a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bd64a:	b530      	push	{r4, r5, lr}
   bd64c:	b087      	sub	sp, #28
   bd64e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd650:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd652:	f7ff ffd5 	bl	bd600 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd656:	226b      	movs	r2, #107	; 0x6b
   bd658:	2300      	movs	r3, #0
   bd65a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bd65e:	2401      	movs	r4, #1
   bd660:	230a      	movs	r3, #10
   bd662:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bd666:	f001 f905 	bl	be874 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bd66a:	a902      	add	r1, sp, #8
   bd66c:	f7fe fd1a 	bl	bc0a4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bd670:	f001 f900 	bl	be874 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bd674:	6803      	ldr	r3, [r0, #0]
   bd676:	4629      	mov	r1, r5
   bd678:	689b      	ldr	r3, [r3, #8]
   bd67a:	4798      	blx	r3
            return &Wire1;
   bd67c:	f001 f8fa 	bl	be874 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bd680:	4621      	mov	r1, r4
   bd682:	f7fe fd27 	bl	bc0d4 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bd686:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bd688:	f001 f8f4 	bl	be874 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bd68c:	a902      	add	r1, sp, #8
   bd68e:	f7fe fcd9 	bl	bc044 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bd692:	f001 f8ef 	bl	be874 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bd696:	6803      	ldr	r3, [r0, #0]
   bd698:	695b      	ldr	r3, [r3, #20]
   bd69a:	4798      	blx	r3
   bd69c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bd69e:	a801      	add	r0, sp, #4
   bd6a0:	f7ff ffcc 	bl	bd63c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd6a4:	b2e0      	uxtb	r0, r4
   bd6a6:	b007      	add	sp, #28
   bd6a8:	bd30      	pop	{r4, r5, pc}

000bd6aa <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bd6aa:	b570      	push	{r4, r5, r6, lr}
   bd6ac:	b086      	sub	sp, #24
   bd6ae:	460d      	mov	r5, r1
   bd6b0:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd6b2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd6b4:	f7ff ffa4 	bl	bd600 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd6b8:	226b      	movs	r2, #107	; 0x6b
   bd6ba:	2300      	movs	r3, #0
   bd6bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bd6c0:	2601      	movs	r6, #1
   bd6c2:	230a      	movs	r3, #10
   bd6c4:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bd6c8:	f001 f8d4 	bl	be874 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bd6cc:	a902      	add	r1, sp, #8
   bd6ce:	f7fe fce9 	bl	bc0a4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bd6d2:	f001 f8cf 	bl	be874 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bd6d6:	6803      	ldr	r3, [r0, #0]
   bd6d8:	4629      	mov	r1, r5
   bd6da:	689b      	ldr	r3, [r3, #8]
   bd6dc:	4798      	blx	r3
            return &Wire1;
   bd6de:	f001 f8c9 	bl	be874 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bd6e2:	6803      	ldr	r3, [r0, #0]
   bd6e4:	4621      	mov	r1, r4
   bd6e6:	689b      	ldr	r3, [r3, #8]
   bd6e8:	4798      	blx	r3
            return &Wire1;
   bd6ea:	f001 f8c3 	bl	be874 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bd6ee:	4631      	mov	r1, r6
   bd6f0:	f7fe fcf0 	bl	bc0d4 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bd6f4:	a801      	add	r0, sp, #4
   bd6f6:	f7ff ffa1 	bl	bd63c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd6fa:	b006      	add	sp, #24
   bd6fc:	bd70      	pop	{r4, r5, r6, pc}

000bd6fe <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bd6fe:	b513      	push	{r0, r1, r4, lr}
   bd700:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd702:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd704:	f7ff ff7c 	bl	bd600 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bd708:	2101      	movs	r1, #1
   bd70a:	4620      	mov	r0, r4
   bd70c:	f7ff ff9d 	bl	bd64a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bd710:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bd714:	2b10      	cmp	r3, #16
   bd716:	d007      	beq.n	bd728 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bd718:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bd71c:	f042 0210 	orr.w	r2, r2, #16
   bd720:	2101      	movs	r1, #1
   bd722:	4620      	mov	r0, r4
   bd724:	f7ff ffc1 	bl	bd6aa <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bd728:	a801      	add	r0, sp, #4
   bd72a:	f7ff ff87 	bl	bd63c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd72e:	2001      	movs	r0, #1
   bd730:	b002      	add	sp, #8
   bd732:	bd10      	pop	{r4, pc}

000bd734 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bd734:	b513      	push	{r0, r1, r4, lr}
   bd736:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd738:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd73a:	f7ff ff61 	bl	bd600 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bd73e:	2101      	movs	r1, #1
   bd740:	4620      	mov	r0, r4
   bd742:	f7ff ff82 	bl	bd64a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bd746:	f010 0f30 	tst.w	r0, #48	; 0x30
   bd74a:	d005      	beq.n	bd758 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bd74c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bd750:	2101      	movs	r1, #1
   bd752:	4620      	mov	r0, r4
   bd754:	f7ff ffa9 	bl	bd6aa <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bd758:	a801      	add	r0, sp, #4
   bd75a:	f7ff ff6f 	bl	bd63c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd75e:	2001      	movs	r0, #1
   bd760:	b002      	add	sp, #8
   bd762:	bd10      	pop	{r4, pc}

000bd764 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bd764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd766:	4606      	mov	r6, r0
   bd768:	460d      	mov	r5, r1
  size_t n = 0;
   bd76a:	188f      	adds	r7, r1, r2
   bd76c:	2400      	movs	r4, #0
  while (size--) {
   bd76e:	42bd      	cmp	r5, r7
   bd770:	d00c      	beq.n	bd78c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bd772:	6833      	ldr	r3, [r6, #0]
   bd774:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd778:	689b      	ldr	r3, [r3, #8]
   bd77a:	4630      	mov	r0, r6
   bd77c:	4798      	blx	r3
     if (chunk>=0)
   bd77e:	1e03      	subs	r3, r0, #0
   bd780:	db01      	blt.n	bd786 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bd782:	441c      	add	r4, r3
  while (size--) {
   bd784:	e7f3      	b.n	bd76e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bd786:	2c00      	cmp	r4, #0
   bd788:	bf08      	it	eq
   bd78a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bd78c:	4620      	mov	r0, r4
   bd78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd790 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bd790:	b513      	push	{r0, r1, r4, lr}
   bd792:	4604      	mov	r4, r0
    }
   bd794:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bd796:	b159      	cbz	r1, bd7b0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bd798:	9101      	str	r1, [sp, #4]
   bd79a:	f001 fec6 	bl	bf52a <strlen>
   bd79e:	6823      	ldr	r3, [r4, #0]
   bd7a0:	9901      	ldr	r1, [sp, #4]
   bd7a2:	68db      	ldr	r3, [r3, #12]
   bd7a4:	4602      	mov	r2, r0
   bd7a6:	4620      	mov	r0, r4
    }
   bd7a8:	b002      	add	sp, #8
   bd7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bd7ae:	4718      	bx	r3
    }
   bd7b0:	b002      	add	sp, #8
   bd7b2:	bd10      	pop	{r4, pc}

000bd7b4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bd7b4:	b508      	push	{r3, lr}
  return write(str);
   bd7b6:	f7ff ffeb 	bl	bd790 <_ZN5Print5writeEPKc>
}
   bd7ba:	bd08      	pop	{r3, pc}

000bd7bc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bd7bc:	6803      	ldr	r3, [r0, #0]
   bd7be:	689b      	ldr	r3, [r3, #8]
   bd7c0:	4718      	bx	r3

000bd7c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bd7c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bd7c4:	210d      	movs	r1, #13
{
   bd7c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   bd7c8:	f7ff fff8 	bl	bd7bc <_ZN5Print5printEc>
  n += print('\n');
   bd7cc:	210a      	movs	r1, #10
  size_t n = print('\r');
   bd7ce:	4604      	mov	r4, r0
  n += print('\n');
   bd7d0:	4628      	mov	r0, r5
   bd7d2:	f7ff fff3 	bl	bd7bc <_ZN5Print5printEc>
  return n;
}
   bd7d6:	4420      	add	r0, r4
   bd7d8:	bd38      	pop	{r3, r4, r5, pc}

000bd7da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bd7da:	b530      	push	{r4, r5, lr}
   bd7dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bd7de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bd7e0:	2a01      	cmp	r2, #1
  *str = '\0';
   bd7e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bd7e6:	bf98      	it	ls
   bd7e8:	220a      	movls	r2, #10
   bd7ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bd7ec:	460d      	mov	r5, r1
   bd7ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bd7f2:	fb01 5312 	mls	r3, r1, r2, r5
   bd7f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd7fa:	2b09      	cmp	r3, #9
   bd7fc:	bf94      	ite	ls
   bd7fe:	3330      	addls	r3, #48	; 0x30
   bd800:	3337      	addhi	r3, #55	; 0x37
   bd802:	b2db      	uxtb	r3, r3
  } while(n);
   bd804:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd806:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bd80a:	d9ef      	bls.n	bd7ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bd80c:	4621      	mov	r1, r4
   bd80e:	f7ff ffbf 	bl	bd790 <_ZN5Print5writeEPKc>
}
   bd812:	b00b      	add	sp, #44	; 0x2c
   bd814:	bd30      	pop	{r4, r5, pc}
	...

000bd818 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bd818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd81c:	ec55 4b10 	vmov	r4, r5, d0
   bd820:	4606      	mov	r6, r0
   bd822:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bd824:	ee10 2a10 	vmov	r2, s0
   bd828:	ee10 0a10 	vmov	r0, s0
   bd82c:	462b      	mov	r3, r5
   bd82e:	4629      	mov	r1, r5
   bd830:	f001 fce8 	bl	bf204 <__aeabi_dcmpun>
   bd834:	b140      	cbz	r0, bd848 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bd836:	4953      	ldr	r1, [pc, #332]	; (bd984 <_ZN5Print10printFloatEdh+0x16c>)
   bd838:	4630      	mov	r0, r6
   bd83a:	f7ff ffa9 	bl	bd790 <_ZN5Print5writeEPKc>
   bd83e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bd840:	4650      	mov	r0, sl
   bd842:	b003      	add	sp, #12
   bd844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bd848:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bd84c:	4b4e      	ldr	r3, [pc, #312]	; (bd988 <_ZN5Print10printFloatEdh+0x170>)
   bd84e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd852:	4620      	mov	r0, r4
   bd854:	4649      	mov	r1, r9
   bd856:	f001 fcd5 	bl	bf204 <__aeabi_dcmpun>
   bd85a:	b948      	cbnz	r0, bd870 <_ZN5Print10printFloatEdh+0x58>
   bd85c:	4b4a      	ldr	r3, [pc, #296]	; (bd988 <_ZN5Print10printFloatEdh+0x170>)
   bd85e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd862:	4620      	mov	r0, r4
   bd864:	4649      	mov	r1, r9
   bd866:	f001 fcaf 	bl	bf1c8 <__aeabi_dcmple>
   bd86a:	b908      	cbnz	r0, bd870 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bd86c:	4947      	ldr	r1, [pc, #284]	; (bd98c <_ZN5Print10printFloatEdh+0x174>)
   bd86e:	e7e3      	b.n	bd838 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bd870:	4b47      	ldr	r3, [pc, #284]	; (bd990 <_ZN5Print10printFloatEdh+0x178>)
   bd872:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd876:	4620      	mov	r0, r4
   bd878:	4629      	mov	r1, r5
   bd87a:	f001 fcb9 	bl	bf1f0 <__aeabi_dcmpgt>
   bd87e:	b108      	cbz	r0, bd884 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bd880:	4944      	ldr	r1, [pc, #272]	; (bd994 <_ZN5Print10printFloatEdh+0x17c>)
   bd882:	e7d9      	b.n	bd838 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bd884:	4b44      	ldr	r3, [pc, #272]	; (bd998 <_ZN5Print10printFloatEdh+0x180>)
   bd886:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd88a:	4620      	mov	r0, r4
   bd88c:	4629      	mov	r1, r5
   bd88e:	f001 fc91 	bl	bf1b4 <__aeabi_dcmplt>
   bd892:	2800      	cmp	r0, #0
   bd894:	d1f4      	bne.n	bd880 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bd896:	2200      	movs	r2, #0
   bd898:	2300      	movs	r3, #0
   bd89a:	4620      	mov	r0, r4
   bd89c:	4629      	mov	r1, r5
   bd89e:	f001 fc89 	bl	bf1b4 <__aeabi_dcmplt>
   bd8a2:	b1d0      	cbz	r0, bd8da <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bd8a4:	212d      	movs	r1, #45	; 0x2d
   bd8a6:	4630      	mov	r0, r6
   bd8a8:	f7ff ff88 	bl	bd7bc <_ZN5Print5printEc>
     number = -number;
   bd8ac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bd8b0:	4682      	mov	sl, r0
     number = -number;
   bd8b2:	461d      	mov	r5, r3
  double rounding = 0.5;
   bd8b4:	4939      	ldr	r1, [pc, #228]	; (bd99c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bd8b6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bd9a4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bd8ba:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bd8be:	2000      	movs	r0, #0
    rounding /= 10.0;
   bd8c0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bd8c4:	fa5f f38b 	uxtb.w	r3, fp
   bd8c8:	429f      	cmp	r7, r3
   bd8ca:	d908      	bls.n	bd8de <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bd8cc:	4642      	mov	r2, r8
   bd8ce:	464b      	mov	r3, r9
   bd8d0:	f001 fb28 	bl	bef24 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bd8d4:	f10b 0b01 	add.w	fp, fp, #1
   bd8d8:	e7f4      	b.n	bd8c4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bd8da:	4682      	mov	sl, r0
   bd8dc:	e7ea      	b.n	bd8b4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bd8de:	4622      	mov	r2, r4
   bd8e0:	462b      	mov	r3, r5
   bd8e2:	f001 f83f 	bl	be964 <__adddf3>
   bd8e6:	460d      	mov	r5, r1
   bd8e8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bd8ea:	f001 fcc9 	bl	bf280 <__aeabi_d2uiz>
   bd8ee:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bd8f0:	f001 f974 	bl	bebdc <__aeabi_ui2d>
   bd8f4:	4602      	mov	r2, r0
   bd8f6:	460b      	mov	r3, r1
   bd8f8:	4620      	mov	r0, r4
   bd8fa:	4629      	mov	r1, r5
   bd8fc:	f001 f830 	bl	be960 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bd900:	220a      	movs	r2, #10
   bd902:	4604      	mov	r4, r0
   bd904:	460d      	mov	r5, r1
   bd906:	4630      	mov	r0, r6
   bd908:	4641      	mov	r1, r8
   bd90a:	f7ff ff66 	bl	bd7da <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bd90e:	4482      	add	sl, r0
  if (digits > 0) {
   bd910:	2f00      	cmp	r7, #0
   bd912:	d095      	beq.n	bd840 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bd914:	4922      	ldr	r1, [pc, #136]	; (bd9a0 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bd916:	f8df 908c 	ldr.w	r9, [pc, #140]	; bd9a4 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bd91a:	4630      	mov	r0, r6
   bd91c:	f7ff ff38 	bl	bd790 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bd920:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bd924:	4482      	add	sl, r0
  while (digits-- > 0)
   bd926:	2f00      	cmp	r7, #0
   bd928:	d08a      	beq.n	bd840 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bd92a:	4642      	mov	r2, r8
   bd92c:	464b      	mov	r3, r9
   bd92e:	4620      	mov	r0, r4
   bd930:	4629      	mov	r1, r5
   bd932:	f001 f9cd 	bl	becd0 <__aeabi_dmul>
   bd936:	4604      	mov	r4, r0
   bd938:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bd93a:	f001 fc79 	bl	bf230 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bd93e:	f1b0 0b00 	subs.w	fp, r0, #0
   bd942:	da1c      	bge.n	bd97e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bd944:	212d      	movs	r1, #45	; 0x2d
   bd946:	4630      	mov	r0, r6
   bd948:	f7ff ff38 	bl	bd7bc <_ZN5Print5printEc>
            val = -n;
   bd94c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bd950:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bd952:	220a      	movs	r2, #10
   bd954:	4630      	mov	r0, r6
   bd956:	9301      	str	r3, [sp, #4]
   bd958:	f7ff ff3f 	bl	bd7da <_ZN5Print11printNumberEmh>
   bd95c:	9b01      	ldr	r3, [sp, #4]
   bd95e:	4418      	add	r0, r3
    n += print(toPrint);
   bd960:	4482      	add	sl, r0
    remainder -= toPrint;
   bd962:	4658      	mov	r0, fp
   bd964:	f001 f94a 	bl	bebfc <__aeabi_i2d>
   bd968:	4602      	mov	r2, r0
   bd96a:	460b      	mov	r3, r1
   bd96c:	4620      	mov	r0, r4
   bd96e:	4629      	mov	r1, r5
   bd970:	f000 fff6 	bl	be960 <__aeabi_dsub>
   bd974:	3f01      	subs	r7, #1
   bd976:	4604      	mov	r4, r0
   bd978:	460d      	mov	r5, r1
   bd97a:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bd97c:	e7d3      	b.n	bd926 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bd97e:	4659      	mov	r1, fp
        size_t t = 0;
   bd980:	2300      	movs	r3, #0
   bd982:	e7e6      	b.n	bd952 <_ZN5Print10printFloatEdh+0x13a>
   bd984:	000c116c 	.word	0x000c116c
   bd988:	7fefffff 	.word	0x7fefffff
   bd98c:	000c1170 	.word	0x000c1170
   bd990:	41efffff 	.word	0x41efffff
   bd994:	000c1174 	.word	0x000c1174
   bd998:	c1efffff 	.word	0xc1efffff
   bd99c:	3fe00000 	.word	0x3fe00000
   bd9a0:	000c11ac 	.word	0x000c11ac
   bd9a4:	40240000 	.word	0x40240000

000bd9a8 <_ZN5Print5printEfi>:
{
   bd9a8:	b538      	push	{r3, r4, r5, lr}
   bd9aa:	4604      	mov	r4, r0
   bd9ac:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bd9b0:	b2cd      	uxtb	r5, r1
   bd9b2:	f001 f935 	bl	bec20 <__aeabi_f2d>
   bd9b6:	ec41 0b10 	vmov	d0, r0, r1
   bd9ba:	4629      	mov	r1, r5
   bd9bc:	4620      	mov	r0, r4
}
   bd9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bd9c2:	f7ff bf29 	b.w	bd818 <_ZN5Print10printFloatEdh>

000bd9c6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bd9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd9ca:	b086      	sub	sp, #24
   bd9cc:	af00      	add	r7, sp, #0
   bd9ce:	4605      	mov	r5, r0
   bd9d0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bd9d2:	1d38      	adds	r0, r7, #4
   bd9d4:	2114      	movs	r1, #20
{
   bd9d6:	4614      	mov	r4, r2
    va_copy(args2, args);
   bd9d8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bd9da:	f7fd fdcd 	bl	bb578 <vsnprintf>

    if (n<bufsize)
   bd9de:	2813      	cmp	r0, #19
   bd9e0:	d80e      	bhi.n	bda00 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bd9e2:	1d39      	adds	r1, r7, #4
   bd9e4:	4628      	mov	r0, r5
   bd9e6:	f7ff fed3 	bl	bd790 <_ZN5Print5writeEPKc>
   bd9ea:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bd9ec:	b11e      	cbz	r6, bd9f6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bd9ee:	4628      	mov	r0, r5
   bd9f0:	f7ff fee7 	bl	bd7c2 <_ZN5Print7printlnEv>
   bd9f4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bd9f6:	4620      	mov	r0, r4
   bd9f8:	3718      	adds	r7, #24
   bd9fa:	46bd      	mov	sp, r7
   bd9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bda00:	f100 0308 	add.w	r3, r0, #8
   bda04:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bda08:	46e8      	mov	r8, sp
        char bigger[n+1];
   bda0a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bda0e:	4622      	mov	r2, r4
   bda10:	1c41      	adds	r1, r0, #1
   bda12:	683b      	ldr	r3, [r7, #0]
   bda14:	4668      	mov	r0, sp
   bda16:	f7fd fdaf 	bl	bb578 <vsnprintf>
  return write(str);
   bda1a:	4669      	mov	r1, sp
   bda1c:	4628      	mov	r0, r5
   bda1e:	f7ff feb7 	bl	bd790 <_ZN5Print5writeEPKc>
   bda22:	4604      	mov	r4, r0
   bda24:	46c5      	mov	sp, r8
   bda26:	e7e1      	b.n	bd9ec <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bda28 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bda28:	b510      	push	{r4, lr}
  if (0 == max) {
   bda2a:	4604      	mov	r4, r0
   bda2c:	b128      	cbz	r0, bda3a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bda2e:	f001 fcf7 	bl	bf420 <rand>
   bda32:	fb90 f3f4 	sdiv	r3, r0, r4
   bda36:	fb03 0414 	mls	r4, r3, r4, r0
}
   bda3a:	4620      	mov	r0, r4
   bda3c:	bd10      	pop	{r4, pc}

000bda3e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bda3e:	4288      	cmp	r0, r1
{
   bda40:	b510      	push	{r4, lr}
   bda42:	4604      	mov	r4, r0
  if (min >= max) {
   bda44:	da03      	bge.n	bda4e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bda46:	1a08      	subs	r0, r1, r0
   bda48:	f7ff ffee 	bl	bda28 <_Z6randomi>
   bda4c:	4404      	add	r4, r0
}
   bda4e:	4620      	mov	r0, r4
   bda50:	bd10      	pop	{r4, pc}
	...

000bda54 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bda54:	4b01      	ldr	r3, [pc, #4]	; (bda5c <_GLOBAL__sub_I_RGB+0x8>)
   bda56:	2200      	movs	r2, #0
   bda58:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bda5a:	4770      	bx	lr
   bda5c:	2003e688 	.word	0x2003e688

000bda60 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bda60:	2100      	movs	r1, #0
   bda62:	f7fd bae5 	b.w	bb030 <hal_spi_release>

000bda66 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bda66:	2100      	movs	r1, #0
   bda68:	f7fd bada 	b.w	bb020 <hal_spi_acquire>

000bda6c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bda6c:	b510      	push	{r4, lr}
   bda6e:	4604      	mov	r4, r0
   bda70:	4608      	mov	r0, r1
{
    _spi = spi;
   bda72:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bda74:	f7fd fab4 	bl	bafe0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bda78:	2300      	movs	r3, #0
   bda7a:	6063      	str	r3, [r4, #4]
}
   bda7c:	4620      	mov	r0, r4
   bda7e:	bd10      	pop	{r4, pc}

000bda80 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bda80:	b513      	push	{r0, r1, r4, lr}
   bda82:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bda84:	7800      	ldrb	r0, [r0, #0]
   bda86:	f7ff ffee 	bl	bda66 <_ZN8SPIClass4lockEv.isra.0>
   bda8a:	b958      	cbnz	r0, bdaa4 <_ZN8SPIClass5beginEv+0x24>
   bda8c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bda8e:	9001      	str	r0, [sp, #4]
   bda90:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bda94:	f7fd fa8c 	bl	bafb0 <hal_spi_begin>
        unlock();
   bda98:	9801      	ldr	r0, [sp, #4]
    }
}
   bda9a:	b002      	add	sp, #8
   bda9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bdaa0:	f7ff bfde 	b.w	bda60 <_ZN8SPIClass6unlockEv.isra.0>
   bdaa4:	b002      	add	sp, #8
   bdaa6:	bd10      	pop	{r4, pc}

000bdaa8 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bdaa8:	b513      	push	{r0, r1, r4, lr}
   bdaaa:	4604      	mov	r4, r0
    if (!lock())
   bdaac:	7800      	ldrb	r0, [r0, #0]
   bdaae:	f7ff ffda 	bl	bda66 <_ZN8SPIClass4lockEv.isra.0>
   bdab2:	b948      	cbnz	r0, bdac8 <_ZN8SPIClass3endEv+0x20>
   bdab4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bdab6:	9001      	str	r0, [sp, #4]
   bdab8:	f7fd fa82 	bl	bafc0 <hal_spi_end>
        unlock();
   bdabc:	9801      	ldr	r0, [sp, #4]
    }
}
   bdabe:	b002      	add	sp, #8
   bdac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bdac4:	f7ff bfcc 	b.w	bda60 <_ZN8SPIClass6unlockEv.isra.0>
   bdac8:	b002      	add	sp, #8
   bdaca:	bd10      	pop	{r4, pc}

000bdacc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bdacc:	7800      	ldrb	r0, [r0, #0]
   bdace:	f7ff bfc7 	b.w	bda60 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bdad4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bdad4:	0840      	lsrs	r0, r0, #1
{
   bdad6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bdad8:	6018      	str	r0, [r3, #0]
   bdada:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bdadc:	6818      	ldr	r0, [r3, #0]
   bdade:	4288      	cmp	r0, r1
   bdae0:	b2e5      	uxtb	r5, r4
   bdae2:	d906      	bls.n	bdaf2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bdae4:	3401      	adds	r4, #1
   bdae6:	2c08      	cmp	r4, #8
   bdae8:	d002      	beq.n	bdaf0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bdaea:	0840      	lsrs	r0, r0, #1
   bdaec:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bdaee:	e7f5      	b.n	bdadc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bdaf0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bdaf2:	4b02      	ldr	r3, [pc, #8]	; (bdafc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bdaf4:	5d5b      	ldrb	r3, [r3, r5]
   bdaf6:	7013      	strb	r3, [r2, #0]
}
   bdaf8:	bd30      	pop	{r4, r5, pc}
   bdafa:	bf00      	nop
   bdafc:	000c1178 	.word	0x000c1178

000bdb00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bdb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bdb04:	4606      	mov	r6, r0
   bdb06:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bdb08:	7800      	ldrb	r0, [r0, #0]
{
   bdb0a:	460c      	mov	r4, r1
    CHECK(lock());
   bdb0c:	f7ff ffab 	bl	bda66 <_ZN8SPIClass4lockEv.isra.0>
   bdb10:	2800      	cmp	r0, #0
   bdb12:	db1b      	blt.n	bdb4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bdb14:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bdb16:	2214      	movs	r2, #20
   bdb18:	2100      	movs	r1, #0
   bdb1a:	a809      	add	r0, sp, #36	; 0x24
   bdb1c:	f001 fc4a 	bl	bf3b4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bdb20:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bdb22:	2200      	movs	r2, #0
   bdb24:	a909      	add	r1, sp, #36	; 0x24
   bdb26:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bdb28:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bdb2c:	f7fd fa68 	bl	bb000 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bdb30:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bdb34:	b113      	cbz	r3, bdb3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bdb36:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bdb3a:	b155      	cbz	r5, bdb52 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bdb3c:	2700      	movs	r7, #0
   bdb3e:	46b9      	mov	r9, r7
   bdb40:	46b8      	mov	r8, r7
   bdb42:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bdb44:	7923      	ldrb	r3, [r4, #4]
   bdb46:	b15d      	cbz	r5, bdb60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bdb48:	b1c3      	cbz	r3, bdb7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bdb4a:	2000      	movs	r0, #0
}
   bdb4c:	b00f      	add	sp, #60	; 0x3c
   bdb4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bdb52:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bdb56:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bdb5a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bdb5e:	e7f1      	b.n	bdb44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bdb60:	2b00      	cmp	r3, #0
   bdb62:	d135      	bne.n	bdbd0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bdb64:	68a3      	ldr	r3, [r4, #8]
   bdb66:	4543      	cmp	r3, r8
   bdb68:	d108      	bne.n	bdb7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bdb6a:	f88d 9020 	strb.w	r9, [sp, #32]
   bdb6e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bdb72:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bdb76:	89a3      	ldrh	r3, [r4, #12]
   bdb78:	429a      	cmp	r2, r3
   bdb7a:	d0e6      	beq.n	bdb4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bdb7c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bdb7e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bdb80:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bdb84:	980a      	ldr	r0, [sp, #40]	; 0x28
   bdb86:	ab04      	add	r3, sp, #16
   bdb88:	f10d 020f 	add.w	r2, sp, #15
   bdb8c:	f7ff ffa2 	bl	bdad4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bdb90:	7921      	ldrb	r1, [r4, #4]
   bdb92:	b985      	cbnz	r5, bdbb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bdb94:	b989      	cbnz	r1, bdbba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bdb96:	68a3      	ldr	r3, [r4, #8]
   bdb98:	4543      	cmp	r3, r8
   bdb9a:	d30e      	bcc.n	bdbba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bdb9c:	f88d 9020 	strb.w	r9, [sp, #32]
   bdba0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bdba4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bdba8:	89a3      	ldrh	r3, [r4, #12]
   bdbaa:	429a      	cmp	r2, r3
   bdbac:	d105      	bne.n	bdbba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bdbae:	9b04      	ldr	r3, [sp, #16]
   bdbb0:	4543      	cmp	r3, r8
   bdbb2:	d102      	bne.n	bdbba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bdbb4:	e7c9      	b.n	bdb4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bdbb6:	2900      	cmp	r1, #0
   bdbb8:	d1f9      	bne.n	bdbae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bdbba:	2300      	movs	r3, #0
   bdbbc:	9301      	str	r3, [sp, #4]
   bdbbe:	7b63      	ldrb	r3, [r4, #13]
   bdbc0:	9300      	str	r3, [sp, #0]
   bdbc2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bdbc6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bdbc8:	7830      	ldrb	r0, [r6, #0]
   bdbca:	f7fd fa21 	bl	bb010 <hal_spi_set_settings>
   bdbce:	e7bc      	b.n	bdb4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bdbd0:	e9cd 5500 	strd	r5, r5, [sp]
   bdbd4:	462b      	mov	r3, r5
   bdbd6:	462a      	mov	r2, r5
   bdbd8:	2101      	movs	r1, #1
   bdbda:	e7f5      	b.n	bdbc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bdbdc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bdbdc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bdbde:	7800      	ldrb	r0, [r0, #0]
   bdbe0:	f7fd f9f6 	bl	bafd0 <hal_spi_transfer>
}
   bdbe4:	b2c0      	uxtb	r0, r0
   bdbe6:	bd08      	pop	{r3, pc}

000bdbe8 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bdbe8:	4770      	bx	lr

000bdbea <_ZN8SPIClass15detachInterruptEv>:
   bdbea:	4770      	bx	lr

000bdbec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bdbec:	b510      	push	{r4, lr}
   bdbee:	4604      	mov	r4, r0
{
	free(buffer);
   bdbf0:	6800      	ldr	r0, [r0, #0]
   bdbf2:	f7fd fc99 	bl	bb528 <free>
}
   bdbf6:	4620      	mov	r0, r4
   bdbf8:	bd10      	pop	{r4, pc}

000bdbfa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bdbfa:	b510      	push	{r4, lr}
   bdbfc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bdbfe:	6800      	ldr	r0, [r0, #0]
   bdc00:	b108      	cbz	r0, bdc06 <_ZN6String10invalidateEv+0xc>
   bdc02:	f7fd fc91 	bl	bb528 <free>
	buffer = NULL;
   bdc06:	2300      	movs	r3, #0
	capacity = len = 0;
   bdc08:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bdc0c:	6023      	str	r3, [r4, #0]
}
   bdc0e:	bd10      	pop	{r4, pc}

000bdc10 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bdc10:	b538      	push	{r3, r4, r5, lr}
   bdc12:	4604      	mov	r4, r0
   bdc14:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bdc16:	6800      	ldr	r0, [r0, #0]
   bdc18:	3101      	adds	r1, #1
   bdc1a:	f7fd fc8d 	bl	bb538 <realloc>
	if (newbuffer) {
   bdc1e:	b110      	cbz	r0, bdc26 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bdc20:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bdc24:	2001      	movs	r0, #1
	}
	return 0;
}
   bdc26:	bd38      	pop	{r3, r4, r5, pc}

000bdc28 <_ZN6String7reserveEj>:
{
   bdc28:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bdc2a:	6803      	ldr	r3, [r0, #0]
{
   bdc2c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bdc2e:	b123      	cbz	r3, bdc3a <_ZN6String7reserveEj+0x12>
   bdc30:	6843      	ldr	r3, [r0, #4]
   bdc32:	428b      	cmp	r3, r1
   bdc34:	d301      	bcc.n	bdc3a <_ZN6String7reserveEj+0x12>
   bdc36:	2001      	movs	r0, #1
}
   bdc38:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bdc3a:	4620      	mov	r0, r4
   bdc3c:	f7ff ffe8 	bl	bdc10 <_ZN6String12changeBufferEj>
   bdc40:	2800      	cmp	r0, #0
   bdc42:	d0f9      	beq.n	bdc38 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bdc44:	68a3      	ldr	r3, [r4, #8]
   bdc46:	2b00      	cmp	r3, #0
   bdc48:	d1f5      	bne.n	bdc36 <_ZN6String7reserveEj+0xe>
   bdc4a:	6822      	ldr	r2, [r4, #0]
   bdc4c:	7013      	strb	r3, [r2, #0]
   bdc4e:	e7f2      	b.n	bdc36 <_ZN6String7reserveEj+0xe>

000bdc50 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bdc50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdc52:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bdc54:	4611      	mov	r1, r2
   bdc56:	9201      	str	r2, [sp, #4]
{
   bdc58:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bdc5a:	f7ff ffe5 	bl	bdc28 <_ZN6String7reserveEj>
   bdc5e:	9a01      	ldr	r2, [sp, #4]
   bdc60:	b928      	cbnz	r0, bdc6e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bdc62:	4620      	mov	r0, r4
   bdc64:	f7ff ffc9 	bl	bdbfa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bdc68:	4620      	mov	r0, r4
   bdc6a:	b003      	add	sp, #12
   bdc6c:	bd30      	pop	{r4, r5, pc}
	len = length;
   bdc6e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bdc70:	4629      	mov	r1, r5
   bdc72:	6820      	ldr	r0, [r4, #0]
   bdc74:	f001 fb76 	bl	bf364 <memcpy>
	buffer[len] = 0;
   bdc78:	6822      	ldr	r2, [r4, #0]
   bdc7a:	68a3      	ldr	r3, [r4, #8]
   bdc7c:	2100      	movs	r1, #0
   bdc7e:	54d1      	strb	r1, [r2, r3]
	return *this;
   bdc80:	e7f2      	b.n	bdc68 <_ZN6String4copyEPKcj+0x18>

000bdc82 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bdc82:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bdc84:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bdc86:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bdc8a:	4604      	mov	r4, r0
	len = 0;
   bdc8c:	6083      	str	r3, [r0, #8]
	flags = 0;
   bdc8e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bdc90:	b141      	cbz	r1, bdca4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bdc92:	4608      	mov	r0, r1
   bdc94:	9101      	str	r1, [sp, #4]
   bdc96:	f001 fc48 	bl	bf52a <strlen>
   bdc9a:	9901      	ldr	r1, [sp, #4]
   bdc9c:	4602      	mov	r2, r0
   bdc9e:	4620      	mov	r0, r4
   bdca0:	f7ff ffd6 	bl	bdc50 <_ZN6String4copyEPKcj>
}
   bdca4:	4620      	mov	r0, r4
   bdca6:	b002      	add	sp, #8
   bdca8:	bd10      	pop	{r4, pc}

000bdcaa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bdcaa:	b538      	push	{r3, r4, r5, lr}
   bdcac:	4605      	mov	r5, r0
	if (buffer) {
   bdcae:	6800      	ldr	r0, [r0, #0]
{
   bdcb0:	460c      	mov	r4, r1
	if (buffer) {
   bdcb2:	b168      	cbz	r0, bdcd0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bdcb4:	686a      	ldr	r2, [r5, #4]
   bdcb6:	688b      	ldr	r3, [r1, #8]
   bdcb8:	429a      	cmp	r2, r3
   bdcba:	d307      	bcc.n	bdccc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bdcbc:	6809      	ldr	r1, [r1, #0]
   bdcbe:	f001 fc0e 	bl	bf4de <strcpy>
			len = rhs.len;
   bdcc2:	68a3      	ldr	r3, [r4, #8]
   bdcc4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bdcc6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bdcc8:	60a3      	str	r3, [r4, #8]
}
   bdcca:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bdccc:	f7fd fc2c 	bl	bb528 <free>
	buffer = rhs.buffer;
   bdcd0:	6823      	ldr	r3, [r4, #0]
   bdcd2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bdcd4:	6863      	ldr	r3, [r4, #4]
   bdcd6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bdcd8:	68a3      	ldr	r3, [r4, #8]
   bdcda:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bdcdc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bdcde:	e9c4 3300 	strd	r3, r3, [r4]
   bdce2:	e7f1      	b.n	bdcc8 <_ZN6String4moveERS_+0x1e>

000bdce4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bdce4:	b510      	push	{r4, lr}
	buffer = NULL;
   bdce6:	2300      	movs	r3, #0
	capacity = 0;
   bdce8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bdcec:	4604      	mov	r4, r0
	len = 0;
   bdcee:	6083      	str	r3, [r0, #8]
	flags = 0;
   bdcf0:	7303      	strb	r3, [r0, #12]
	move(rval);
   bdcf2:	f7ff ffda 	bl	bdcaa <_ZN6String4moveERS_>
}
   bdcf6:	4620      	mov	r0, r4
   bdcf8:	bd10      	pop	{r4, pc}

000bdcfa <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bdcfa:	4288      	cmp	r0, r1
{
   bdcfc:	b510      	push	{r4, lr}
   bdcfe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bdd00:	d005      	beq.n	bdd0e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bdd02:	680b      	ldr	r3, [r1, #0]
   bdd04:	b12b      	cbz	r3, bdd12 <_ZN6StringaSERKS_+0x18>
   bdd06:	688a      	ldr	r2, [r1, #8]
   bdd08:	4619      	mov	r1, r3
   bdd0a:	f7ff ffa1 	bl	bdc50 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bdd0e:	4620      	mov	r0, r4
   bdd10:	bd10      	pop	{r4, pc}
	else invalidate();
   bdd12:	f7ff ff72 	bl	bdbfa <_ZN6String10invalidateEv>
   bdd16:	e7fa      	b.n	bdd0e <_ZN6StringaSERKS_+0x14>

000bdd18 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bdd18:	b510      	push	{r4, lr}
	buffer = NULL;
   bdd1a:	2300      	movs	r3, #0
String::String(const String &value)
   bdd1c:	4604      	mov	r4, r0
	capacity = 0;
   bdd1e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bdd22:	6083      	str	r3, [r0, #8]
	flags = 0;
   bdd24:	7303      	strb	r3, [r0, #12]
	*this = value;
   bdd26:	f7ff ffe8 	bl	bdcfa <_ZN6StringaSERKS_>
}
   bdd2a:	4620      	mov	r0, r4
   bdd2c:	bd10      	pop	{r4, pc}

000bdd2e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bdd2e:	4288      	cmp	r0, r1
{
   bdd30:	b510      	push	{r4, lr}
   bdd32:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bdd34:	d001      	beq.n	bdd3a <_ZN6StringaSEOS_+0xc>
   bdd36:	f7ff ffb8 	bl	bdcaa <_ZN6String4moveERS_>
	return *this;
}
   bdd3a:	4620      	mov	r0, r4
   bdd3c:	bd10      	pop	{r4, pc}

000bdd3e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bdd3e:	b513      	push	{r0, r1, r4, lr}
   bdd40:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bdd42:	b159      	cbz	r1, bdd5c <_ZN6StringaSEPKc+0x1e>
   bdd44:	4608      	mov	r0, r1
   bdd46:	9101      	str	r1, [sp, #4]
   bdd48:	f001 fbef 	bl	bf52a <strlen>
   bdd4c:	9901      	ldr	r1, [sp, #4]
   bdd4e:	4602      	mov	r2, r0
   bdd50:	4620      	mov	r0, r4
   bdd52:	f7ff ff7d 	bl	bdc50 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bdd56:	4620      	mov	r0, r4
   bdd58:	b002      	add	sp, #8
   bdd5a:	bd10      	pop	{r4, pc}
	else invalidate();
   bdd5c:	f7ff ff4d 	bl	bdbfa <_ZN6String10invalidateEv>
   bdd60:	e7f9      	b.n	bdd56 <_ZN6StringaSEPKc+0x18>

000bdd62 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bdd62:	b570      	push	{r4, r5, r6, lr}
   bdd64:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bdd66:	460e      	mov	r6, r1
   bdd68:	b909      	cbnz	r1, bdd6e <_ZN6String6concatEPKcj+0xc>
   bdd6a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bdd6c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bdd6e:	b16a      	cbz	r2, bdd8c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bdd70:	6884      	ldr	r4, [r0, #8]
   bdd72:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bdd74:	4621      	mov	r1, r4
   bdd76:	f7ff ff57 	bl	bdc28 <_ZN6String7reserveEj>
   bdd7a:	2800      	cmp	r0, #0
   bdd7c:	d0f5      	beq.n	bdd6a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bdd7e:	6828      	ldr	r0, [r5, #0]
   bdd80:	68ab      	ldr	r3, [r5, #8]
   bdd82:	4631      	mov	r1, r6
   bdd84:	4418      	add	r0, r3
   bdd86:	f001 fbaa 	bl	bf4de <strcpy>
	len = newlen;
   bdd8a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bdd8c:	2001      	movs	r0, #1
   bdd8e:	e7ed      	b.n	bdd6c <_ZN6String6concatEPKcj+0xa>

000bdd90 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bdd90:	b513      	push	{r0, r1, r4, lr}
   bdd92:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bdd94:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bdd96:	b151      	cbz	r1, bddae <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bdd98:	9101      	str	r1, [sp, #4]
   bdd9a:	f001 fbc6 	bl	bf52a <strlen>
   bdd9e:	9901      	ldr	r1, [sp, #4]
   bdda0:	4602      	mov	r2, r0
   bdda2:	4620      	mov	r0, r4
}
   bdda4:	b002      	add	sp, #8
   bdda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bddaa:	f7ff bfda 	b.w	bdd62 <_ZN6String6concatEPKcj>
}
   bddae:	b002      	add	sp, #8
   bddb0:	bd10      	pop	{r4, pc}

000bddb2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bddb2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bddb4:	688a      	ldr	r2, [r1, #8]
   bddb6:	6809      	ldr	r1, [r1, #0]
{
   bddb8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bddba:	f7ff ffd2 	bl	bdd62 <_ZN6String6concatEPKcj>
   bddbe:	b910      	cbnz	r0, bddc6 <_ZplRK15StringSumHelperRK6String+0x14>
   bddc0:	4620      	mov	r0, r4
   bddc2:	f7ff ff1a 	bl	bdbfa <_ZN6String10invalidateEv>
	return a;
}
   bddc6:	4620      	mov	r0, r4
   bddc8:	bd10      	pop	{r4, pc}

000bddca <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bddca:	b513      	push	{r0, r1, r4, lr}
   bddcc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bddce:	b929      	cbnz	r1, bdddc <_ZplRK15StringSumHelperPKc+0x12>
   bddd0:	4620      	mov	r0, r4
   bddd2:	f7ff ff12 	bl	bdbfa <_ZN6String10invalidateEv>
	return a;
}
   bddd6:	4620      	mov	r0, r4
   bddd8:	b002      	add	sp, #8
   bddda:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bdddc:	4608      	mov	r0, r1
   bddde:	9101      	str	r1, [sp, #4]
   bdde0:	f001 fba3 	bl	bf52a <strlen>
   bdde4:	9901      	ldr	r1, [sp, #4]
   bdde6:	4602      	mov	r2, r0
   bdde8:	4620      	mov	r0, r4
   bddea:	f7ff ffba 	bl	bdd62 <_ZN6String6concatEPKcj>
   bddee:	2800      	cmp	r0, #0
   bddf0:	d0ee      	beq.n	bddd0 <_ZplRK15StringSumHelperPKc+0x6>
   bddf2:	e7f0      	b.n	bddd6 <_ZplRK15StringSumHelperPKc+0xc>

000bddf4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bddf4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bddf6:	6882      	ldr	r2, [r0, #8]
   bddf8:	b93a      	cbnz	r2, bde0a <_ZNK6String6equalsEPKc+0x16>
   bddfa:	b121      	cbz	r1, bde06 <_ZNK6String6equalsEPKc+0x12>
   bddfc:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bddfe:	fab0 f080 	clz	r0, r0
   bde02:	0940      	lsrs	r0, r0, #5
   bde04:	e000      	b.n	bde08 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bde06:	2001      	movs	r0, #1
}
   bde08:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bde0a:	6800      	ldr	r0, [r0, #0]
   bde0c:	b909      	cbnz	r1, bde12 <_ZNK6String6equalsEPKc+0x1e>
   bde0e:	7800      	ldrb	r0, [r0, #0]
   bde10:	e7f5      	b.n	bddfe <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bde12:	f001 fb5a 	bl	bf4ca <strcmp>
   bde16:	e7f2      	b.n	bddfe <_ZNK6String6equalsEPKc+0xa>

000bde18 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bde18:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bde1a:	6883      	ldr	r3, [r0, #8]
   bde1c:	688a      	ldr	r2, [r1, #8]
   bde1e:	4293      	cmp	r3, r2
   bde20:	d30b      	bcc.n	bde3a <_ZNK6String8endsWithERKS_+0x22>
   bde22:	6800      	ldr	r0, [r0, #0]
   bde24:	b140      	cbz	r0, bde38 <_ZNK6String8endsWithERKS_+0x20>
   bde26:	6809      	ldr	r1, [r1, #0]
   bde28:	b149      	cbz	r1, bde3e <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bde2a:	1a9b      	subs	r3, r3, r2
   bde2c:	4418      	add	r0, r3
   bde2e:	f001 fb4c 	bl	bf4ca <strcmp>
   bde32:	fab0 f080 	clz	r0, r0
   bde36:	0940      	lsrs	r0, r0, #5
}
   bde38:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bde3a:	2000      	movs	r0, #0
   bde3c:	e7fc      	b.n	bde38 <_ZNK6String8endsWithERKS_+0x20>
   bde3e:	4608      	mov	r0, r1
   bde40:	e7fa      	b.n	bde38 <_ZNK6String8endsWithERKS_+0x20>
	...

000bde44 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bde44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bde46:	429a      	cmp	r2, r3
{
   bde48:	460f      	mov	r7, r1
   bde4a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bde4c:	490c      	ldr	r1, [pc, #48]	; (bde80 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bde4e:	bf88      	it	hi
   bde50:	4613      	movhi	r3, r2
{
   bde52:	4614      	mov	r4, r2
   bde54:	4606      	mov	r6, r0
	if (left > right) {
   bde56:	bf84      	itt	hi
   bde58:	462c      	movhi	r4, r5
   bde5a:	461d      	movhi	r5, r3
	String out;
   bde5c:	f7ff ff11 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bde60:	68bb      	ldr	r3, [r7, #8]
   bde62:	42a3      	cmp	r3, r4
   bde64:	d30a      	bcc.n	bde7c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bde66:	6839      	ldr	r1, [r7, #0]
   bde68:	42ab      	cmp	r3, r5
   bde6a:	bf94      	ite	ls
   bde6c:	ebc4 0203 	rsbls	r2, r4, r3
   bde70:	ebc4 0205 	rsbhi	r2, r4, r5
   bde74:	4421      	add	r1, r4
   bde76:	4630      	mov	r0, r6
   bde78:	f7ff feea 	bl	bdc50 <_ZN6String4copyEPKcj>
	return out;
}
   bde7c:	4630      	mov	r0, r6
   bde7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bde80:	000c10a4 	.word	0x000c10a4

000bde84 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bde84:	b40e      	push	{r1, r2, r3}
   bde86:	b570      	push	{r4, r5, r6, lr}
   bde88:	b087      	sub	sp, #28
   bde8a:	ad0b      	add	r5, sp, #44	; 0x2c
   bde8c:	4604      	mov	r4, r0
   bde8e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bde92:	9201      	str	r2, [sp, #4]
   bde94:	462b      	mov	r3, r5
   bde96:	2105      	movs	r1, #5
   bde98:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bde9a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bde9c:	f7fd fb6c 	bl	bb578 <vsnprintf>
    va_end(marker);

    String result;
   bdea0:	490b      	ldr	r1, [pc, #44]	; (bded0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bdea2:	4606      	mov	r6, r0
    String result;
   bdea4:	4620      	mov	r0, r4
   bdea6:	f7ff feec 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bdeaa:	4631      	mov	r1, r6
   bdeac:	4620      	mov	r0, r4
   bdeae:	f7ff febb 	bl	bdc28 <_ZN6String7reserveEj>
    if (result.buffer) {
   bdeb2:	6820      	ldr	r0, [r4, #0]
   bdeb4:	b130      	cbz	r0, bdec4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bdeb6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bdeb8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bdeba:	462b      	mov	r3, r5
   bdebc:	1c71      	adds	r1, r6, #1
   bdebe:	f7fd fb5b 	bl	bb578 <vsnprintf>
        va_end(marker);
        result.len = n;
   bdec2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bdec4:	4620      	mov	r0, r4
   bdec6:	b007      	add	sp, #28
   bdec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bdecc:	b003      	add	sp, #12
   bdece:	4770      	bx	lr
   bded0:	000c10a4 	.word	0x000c10a4

000bded4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bded4:	b510      	push	{r4, lr}
   bded6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bded8:	6800      	ldr	r0, [r0, #0]
   bdeda:	b118      	cbz	r0, bdee4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bdedc:	f7fd fb24 	bl	bb528 <free>
            wakeupSource_ = nullptr;
   bdee0:	2300      	movs	r3, #0
   bdee2:	6023      	str	r3, [r4, #0]
        }
    }
   bdee4:	bd10      	pop	{r4, pc}

000bdee6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bdee6:	b538      	push	{r3, r4, r5, lr}
   bdee8:	460c      	mov	r4, r1
   bdeea:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bdeec:	f7ff fff2 	bl	bded4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bdef0:	b154      	cbz	r4, bdf08 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bdef2:	8820      	ldrh	r0, [r4, #0]
   bdef4:	f7fd fb10 	bl	bb518 <malloc>
   bdef8:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bdefa:	b128      	cbz	r0, bdf08 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bdefc:	8822      	ldrh	r2, [r4, #0]
   bdefe:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bdf00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bdf04:	f001 ba2e 	b.w	bf364 <memcpy>
    }
   bdf08:	bd38      	pop	{r3, r4, r5, pc}

000bdf0a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bdf0a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bdf0c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bdf10:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bdf12:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bdf16:	f8c0 3006 	str.w	r3, [r0, #6]
   bdf1a:	894b      	ldrh	r3, [r1, #10]
   bdf1c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bdf1e:	460c      	mov	r4, r1
   bdf20:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bdf22:	f7ff ffd7 	bl	bded4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bdf26:	6823      	ldr	r3, [r4, #0]
   bdf28:	b113      	cbz	r3, bdf30 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bdf2a:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bdf2c:	2300      	movs	r3, #0
   bdf2e:	6023      	str	r3, [r4, #0]
    }
   bdf30:	bd38      	pop	{r3, r4, r5, pc}

000bdf32 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bdf32:	b507      	push	{r0, r1, r2, lr}
   bdf34:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bdf36:	2100      	movs	r1, #0
{
   bdf38:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bdf3a:	9100      	str	r1, [sp, #0]
   bdf3c:	2001      	movs	r0, #1
   bdf3e:	218c      	movs	r1, #140	; 0x8c
   bdf40:	f7fd fa18 	bl	bb374 <system_reset>
}
   bdf44:	b003      	add	sp, #12
   bdf46:	f85d fb04 	ldr.w	pc, [sp], #4

000bdf4a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bdf4a:	4601      	mov	r1, r0
    reset(0, flags);
   bdf4c:	2000      	movs	r0, #0
   bdf4e:	f7ff bff0 	b.w	bdf32 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bdf52 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bdf52:	2000      	movs	r0, #0
   bdf54:	f7ff bff9 	b.w	bdf4a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bdf58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bdf58:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdf5a:	4d2b      	ldr	r5, [pc, #172]	; (be008 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bdf5c:	7d0b      	ldrb	r3, [r1, #20]
   bdf5e:	4604      	mov	r4, r0
   bdf60:	b08b      	sub	sp, #44	; 0x2c
   bdf62:	4608      	mov	r0, r1
   bdf64:	1daf      	adds	r7, r5, #6
   bdf66:	2b00      	cmp	r3, #0
   bdf68:	d036      	beq.n	bdfd8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bdf6a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bdf6c:	791b      	ldrb	r3, [r3, #4]
   bdf6e:	2b00      	cmp	r3, #0
   bdf70:	d032      	beq.n	bdfd8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bdf72:	4b26      	ldr	r3, [pc, #152]	; (be00c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bdf74:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bdf76:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bdf78:	a902      	add	r1, sp, #8
   bdf7a:	3004      	adds	r0, #4
   bdf7c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bdf80:	f7fd f9ee 	bl	bb360 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bdf84:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bdf88:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bdf8c:	b200      	sxth	r0, r0
   bdf8e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bdf92:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bdf96:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bdf98:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bdf9a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bdf9c:	4628      	mov	r0, r5
   bdf9e:	f7ff ffa2 	bl	bdee6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bdfa2:	a802      	add	r0, sp, #8
   bdfa4:	f7ff ff96 	bl	bded4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bdfa8:	2300      	movs	r3, #0
   bdfaa:	6023      	str	r3, [r4, #0]
   bdfac:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bdfae:	71a3      	strb	r3, [r4, #6]
   bdfb0:	8123      	strh	r3, [r4, #8]
   bdfb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdfb6:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bdfb8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bdfbc:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bdfbe:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bdfc2:	f8c4 3006 	str.w	r3, [r4, #6]
   bdfc6:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bdfc8:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bdfca:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bdfcc:	4620      	mov	r0, r4
   bdfce:	f7ff ff8a 	bl	bdee6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bdfd2:	4620      	mov	r0, r4
   bdfd4:	b00b      	add	sp, #44	; 0x2c
   bdfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bdfd8:	2600      	movs	r6, #0
   bdfda:	2320      	movs	r3, #32
   bdfdc:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bdfe0:	4b0b      	ldr	r3, [pc, #44]	; (be010 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bdfe2:	9300      	str	r3, [sp, #0]
   bdfe4:	aa02      	add	r2, sp, #8
   bdfe6:	4633      	mov	r3, r6
   bdfe8:	490a      	ldr	r1, [pc, #40]	; (be014 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bdfea:	2032      	movs	r0, #50	; 0x32
   bdfec:	f7fd f928 	bl	bb240 <log_message>
            : wakeupSource_(nullptr),
   bdff0:	4b06      	ldr	r3, [pc, #24]	; (be00c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bdff2:	4805      	ldr	r0, [pc, #20]	; (be008 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bdff4:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bdff6:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bdffa:	a902      	add	r1, sp, #8
   bdffc:	e9cd 2303 	strd	r2, r3, [sp, #12]
   be000:	f7ff ff83 	bl	bdf0a <_ZN17SystemSleepResultaSEOS_.isra.0>
   be004:	e7cd      	b.n	bdfa2 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   be006:	bf00      	nop
   be008:	2003e698 	.word	0x2003e698
   be00c:	ffff0000 	.word	0xffff0000
   be010:	000c1187 	.word	0x000c1187
   be014:	000c1180 	.word	0x000c1180

000be018 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   be018:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   be01a:	2420      	movs	r4, #32
{
   be01c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   be01e:	4622      	mov	r2, r4
   be020:	2100      	movs	r1, #0
   be022:	4668      	mov	r0, sp
   be024:	f001 f9c6 	bl	bf3b4 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   be028:	2100      	movs	r1, #0
   be02a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   be02c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   be030:	f7fc feae 	bl	bad90 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   be034:	9801      	ldr	r0, [sp, #4]
   be036:	b008      	add	sp, #32
   be038:	bd10      	pop	{r4, pc}
	...

000be03c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   be03c:	4b05      	ldr	r3, [pc, #20]	; (be054 <_GLOBAL__sub_I_System+0x18>)
   be03e:	2202      	movs	r2, #2
   be040:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   be042:	4b05      	ldr	r3, [pc, #20]	; (be058 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   be044:	4a05      	ldr	r2, [pc, #20]	; (be05c <_GLOBAL__sub_I_System+0x20>)
   be046:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   be048:	2000      	movs	r0, #0
   be04a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   be04e:	f7fd b929 	b.w	bb2a4 <set_system_mode>
   be052:	bf00      	nop
   be054:	2003e6a4 	.word	0x2003e6a4
   be058:	2003e698 	.word	0x2003e698
   be05c:	ffff0000 	.word	0xffff0000

000be060 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   be060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   be064:	4a15      	ldr	r2, [pc, #84]	; (be0bc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   be066:	f8df 8060 	ldr.w	r8, [pc, #96]	; be0c8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   be06a:	e9d2 6300 	ldrd	r6, r3, [r2]
   be06e:	1980      	adds	r0, r0, r6
   be070:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   be074:	4b12      	ldr	r3, [pc, #72]	; (be0c0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   be076:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   be07a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   be07e:	1986      	adds	r6, r0, r6
   be080:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   be084:	42bb      	cmp	r3, r7
   be086:	bf08      	it	eq
   be088:	42b2      	cmpeq	r2, r6
{
   be08a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   be08c:	d013      	beq.n	be0b6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   be08e:	a903      	add	r1, sp, #12
   be090:	4668      	mov	r0, sp
   be092:	e9cd 6700 	strd	r6, r7, [sp]
   be096:	f7fd faa7 	bl	bb5e8 <localtime_r>
	calendar_time.tm_year += 1900;
   be09a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   be09c:	4d09      	ldr	r5, [pc, #36]	; (be0c4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   be09e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   be0a2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   be0a4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   be0a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be0a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   be0aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be0ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   be0ae:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   be0b2:	6823      	ldr	r3, [r4, #0]
   be0b4:	602b      	str	r3, [r5, #0]
    }
}
   be0b6:	b00c      	add	sp, #48	; 0x30
   be0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be0bc:	2003e6e0 	.word	0x2003e6e0
   be0c0:	2003e6d8 	.word	0x2003e6d8
   be0c4:	2003e6b0 	.word	0x2003e6b0
   be0c8:	2003e6e8 	.word	0x2003e6e8

000be0cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   be0cc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   be0ce:	2000      	movs	r0, #0
   be0d0:	f7fd f99a 	bl	bb408 <spark_sync_time_pending>
   be0d4:	b128      	cbz	r0, be0e2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   be0d6:	f7fd f977 	bl	bb3c8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   be0da:	f080 0001 	eor.w	r0, r0, #1
   be0de:	b2c0      	uxtb	r0, r0
    }
   be0e0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   be0e2:	2001      	movs	r0, #1
   be0e4:	e7fc      	b.n	be0e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000be0e8 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   be0e8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   be0ea:	f7ff ffb9 	bl	be060 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   be0ee:	4b01      	ldr	r3, [pc, #4]	; (be0f4 <_ZN9TimeClass4hourEx+0xc>)
   be0f0:	6898      	ldr	r0, [r3, #8]
   be0f2:	bd08      	pop	{r3, pc}
   be0f4:	2003e6b0 	.word	0x2003e6b0

000be0f8 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   be0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   be0fa:	4602      	mov	r2, r0
   be0fc:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   be0fe:	4668      	mov	r0, sp
    struct timeval tv = {
   be100:	2100      	movs	r1, #0
    };
   be102:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   be106:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   be10a:	f7fc fe89 	bl	bae20 <hal_rtc_set_time>
   be10e:	4602      	mov	r2, r0
   be110:	b910      	cbnz	r0, be118 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   be112:	4601      	mov	r1, r0
   be114:	f7fd f8fe 	bl	bb314 <system_notify_time_changed>
    }
}
   be118:	b005      	add	sp, #20
   be11a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be120 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   be120:	b530      	push	{r4, r5, lr}
   be122:	b093      	sub	sp, #76	; 0x4c
   be124:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   be128:	4b19      	ldr	r3, [pc, #100]	; (be190 <_ZN9TimeClass7timeStrEx+0x70>)
{
   be12a:	4604      	mov	r4, r0
    t += time_zone_cache;
   be12c:	e9d3 1000 	ldrd	r1, r0, [r3]
   be130:	9b01      	ldr	r3, [sp, #4]
   be132:	1852      	adds	r2, r2, r1
   be134:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   be138:	4816      	ldr	r0, [pc, #88]	; (be194 <_ZN9TimeClass7timeStrEx+0x74>)
   be13a:	e9d0 1000 	ldrd	r1, r0, [r0]
   be13e:	1852      	adds	r2, r2, r1
   be140:	eb43 0300 	adc.w	r3, r3, r0
   be144:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   be148:	2224      	movs	r2, #36	; 0x24
   be14a:	eb0d 0002 	add.w	r0, sp, r2
   be14e:	2100      	movs	r1, #0
   be150:	f001 f930 	bl	bf3b4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   be154:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   be156:	a909      	add	r1, sp, #36	; 0x24
   be158:	4668      	mov	r0, sp
   be15a:	f7fd fa45 	bl	bb5e8 <localtime_r>
    char ascstr[26] = {};
   be15e:	2216      	movs	r2, #22
   be160:	4629      	mov	r1, r5
   be162:	a803      	add	r0, sp, #12
   be164:	9502      	str	r5, [sp, #8]
   be166:	f001 f925 	bl	bf3b4 <memset>
    asctime_r(&calendar_time, ascstr);
   be16a:	a902      	add	r1, sp, #8
   be16c:	a809      	add	r0, sp, #36	; 0x24
   be16e:	f001 f8a7 	bl	bf2c0 <asctime_r>
    int len = strlen(ascstr);
   be172:	a802      	add	r0, sp, #8
   be174:	f001 f9d9 	bl	bf52a <strlen>
    ascstr[len-1] = 0; // remove final newline
   be178:	ab12      	add	r3, sp, #72	; 0x48
   be17a:	4418      	add	r0, r3
    return String(ascstr);
   be17c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   be17e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   be182:	4620      	mov	r0, r4
   be184:	f7ff fd7d 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
}
   be188:	4620      	mov	r0, r4
   be18a:	b013      	add	sp, #76	; 0x4c
   be18c:	bd30      	pop	{r4, r5, pc}
   be18e:	bf00      	nop
   be190:	2003e6e0 	.word	0x2003e6e0
   be194:	2003e6d8 	.word	0x2003e6d8

000be198 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   be198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be19c:	b0a4      	sub	sp, #144	; 0x90
   be19e:	4607      	mov	r7, r0
   be1a0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be1a2:	a814      	add	r0, sp, #80	; 0x50
{
   be1a4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be1a6:	223f      	movs	r2, #63	; 0x3f
{
   be1a8:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be1aa:	f001 f9da 	bl	bf562 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   be1ae:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   be1b0:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   be1b2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   be1b6:	f001 f9b8 	bl	bf52a <strlen>
   be1ba:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   be1bc:	bb4c      	cbnz	r4, be212 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   be1be:	4929      	ldr	r1, [pc, #164]	; (be264 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   be1c0:	a803      	add	r0, sp, #12
   be1c2:	f001 f98c 	bl	bf4de <strcpy>
   be1c6:	ac14      	add	r4, sp, #80	; 0x50
{
   be1c8:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   be1ca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   be1ce:	45b1      	cmp	r9, r6
   be1d0:	d934      	bls.n	be23c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   be1d2:	7823      	ldrb	r3, [r4, #0]
   be1d4:	2b25      	cmp	r3, #37	; 0x25
   be1d6:	f106 0a01 	add.w	sl, r6, #1
   be1da:	d117      	bne.n	be20c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   be1dc:	7863      	ldrb	r3, [r4, #1]
   be1de:	2b7a      	cmp	r3, #122	; 0x7a
   be1e0:	d114      	bne.n	be20c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   be1e2:	a803      	add	r0, sp, #12
   be1e4:	f001 f9a1 	bl	bf52a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   be1e8:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   be1ea:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   be1ec:	1830      	adds	r0, r6, r0
   be1ee:	4418      	add	r0, r3
   be1f0:	eba9 0206 	sub.w	r2, r9, r6
   be1f4:	1ca1      	adds	r1, r4, #2
   be1f6:	f001 f8b5 	bl	bf364 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   be1fa:	462a      	mov	r2, r5
   be1fc:	a903      	add	r1, sp, #12
   be1fe:	4620      	mov	r0, r4
   be200:	f001 f8b0 	bl	bf364 <memcpy>
            len = strlen(format_str);
   be204:	a814      	add	r0, sp, #80	; 0x50
   be206:	f001 f990 	bl	bf52a <strlen>
   be20a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   be20c:	3401      	adds	r4, #1
   be20e:	4656      	mov	r6, sl
   be210:	e7db      	b.n	be1ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   be212:	233c      	movs	r3, #60	; 0x3c
   be214:	fb94 f2f3 	sdiv	r2, r4, r3
   be218:	2a00      	cmp	r2, #0
   be21a:	bfb8      	it	lt
   be21c:	4252      	neglt	r2, r2
   be21e:	fbb2 f1f3 	udiv	r1, r2, r3
   be222:	fb03 2211 	mls	r2, r3, r1, r2
   be226:	9200      	str	r2, [sp, #0]
   be228:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   be22c:	4a0e      	ldr	r2, [pc, #56]	; (be268 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   be22e:	fb94 f3f3 	sdiv	r3, r4, r3
   be232:	2110      	movs	r1, #16
   be234:	a803      	add	r0, sp, #12
   be236:	f7fd f997 	bl	bb568 <snprintf>
   be23a:	e7c4      	b.n	be1c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   be23c:	2100      	movs	r1, #0
   be23e:	222e      	movs	r2, #46	; 0x2e
   be240:	a808      	add	r0, sp, #32
   be242:	9107      	str	r1, [sp, #28]
   be244:	f001 f8b6 	bl	bf3b4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   be248:	4643      	mov	r3, r8
   be24a:	aa14      	add	r2, sp, #80	; 0x50
   be24c:	2132      	movs	r1, #50	; 0x32
   be24e:	a807      	add	r0, sp, #28
   be250:	f7fd f9c2 	bl	bb5d8 <strftime>
    return String(buf);
   be254:	a907      	add	r1, sp, #28
   be256:	4638      	mov	r0, r7
   be258:	f7ff fd13 	bl	bdc82 <_ZN6StringC1EPK19__FlashStringHelper>
}
   be25c:	4638      	mov	r0, r7
   be25e:	b024      	add	sp, #144	; 0x90
   be260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be264:	000c0803 	.word	0x000c0803
   be268:	000c0805 	.word	0x000c0805

000be26c <_ZN9TimeClass6formatExPKc>:
{
   be26c:	b5f0      	push	{r4, r5, r6, r7, lr}
   be26e:	b08d      	sub	sp, #52	; 0x34
   be270:	e9cd 2300 	strd	r2, r3, [sp]
   be274:	9d12      	ldr	r5, [sp, #72]	; 0x48
   be276:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   be278:	b915      	cbnz	r5, be280 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   be27a:	4b19      	ldr	r3, [pc, #100]	; (be2e0 <_ZN9TimeClass6formatExPKc+0x74>)
   be27c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   be27e:	b12d      	cbz	r5, be28c <_ZN9TimeClass6formatExPKc+0x20>
   be280:	4b18      	ldr	r3, [pc, #96]	; (be2e4 <_ZN9TimeClass6formatExPKc+0x78>)
   be282:	4628      	mov	r0, r5
   be284:	6819      	ldr	r1, [r3, #0]
   be286:	f001 f920 	bl	bf4ca <strcmp>
   be28a:	b938      	cbnz	r0, be29c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   be28c:	e9dd 2300 	ldrd	r2, r3, [sp]
   be290:	4620      	mov	r0, r4
   be292:	f7ff ff45 	bl	be120 <_ZN9TimeClass7timeStrEx>
}
   be296:	4620      	mov	r0, r4
   be298:	b00d      	add	sp, #52	; 0x34
   be29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   be29c:	4e12      	ldr	r6, [pc, #72]	; (be2e8 <_ZN9TimeClass6formatExPKc+0x7c>)
   be29e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   be2a0:	4f12      	ldr	r7, [pc, #72]	; (be2ec <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   be2a2:	e9d6 3200 	ldrd	r3, r2, [r6]
   be2a6:	185b      	adds	r3, r3, r1
   be2a8:	9901      	ldr	r1, [sp, #4]
   be2aa:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   be2ae:	e9d7 0100 	ldrd	r0, r1, [r7]
   be2b2:	181b      	adds	r3, r3, r0
   be2b4:	eb42 0201 	adc.w	r2, r2, r1
   be2b8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   be2bc:	2100      	movs	r1, #0
   be2be:	2224      	movs	r2, #36	; 0x24
   be2c0:	a803      	add	r0, sp, #12
   be2c2:	f001 f877 	bl	bf3b4 <memset>
    localtime_r(&t, &calendar_time);
   be2c6:	a903      	add	r1, sp, #12
   be2c8:	4668      	mov	r0, sp
   be2ca:	f7fd f98d 	bl	bb5e8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   be2ce:	6832      	ldr	r2, [r6, #0]
   be2d0:	683b      	ldr	r3, [r7, #0]
   be2d2:	a903      	add	r1, sp, #12
   be2d4:	4413      	add	r3, r2
   be2d6:	4620      	mov	r0, r4
   be2d8:	462a      	mov	r2, r5
   be2da:	f7ff ff5d 	bl	be198 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   be2de:	e7da      	b.n	be296 <_ZN9TimeClass6formatExPKc+0x2a>
   be2e0:	2003e6ac 	.word	0x2003e6ac
   be2e4:	2003de7c 	.word	0x2003de7c
   be2e8:	2003e6e0 	.word	0x2003e6e0
   be2ec:	2003e6d8 	.word	0x2003e6d8

000be2f0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   be2f0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   be2f2:	2000      	movs	r0, #0
   be2f4:	f7fc fd7c 	bl	badf0 <hal_rtc_time_is_valid>
    if (rtcstate)
   be2f8:	4604      	mov	r4, r0
   be2fa:	b9a0      	cbnz	r0, be326 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   be2fc:	f7fc ffca 	bl	bb294 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   be300:	2801      	cmp	r0, #1
   be302:	d110      	bne.n	be326 <_ZN9TimeClass7isValidEv+0x36>
   be304:	4620      	mov	r0, r4
   be306:	f7fc fffd 	bl	bb304 <system_thread_get_state>
   be30a:	b960      	cbnz	r0, be326 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   be30c:	f7ff fede 	bl	be0cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   be310:	b910      	cbnz	r0, be318 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   be312:	f7fd f849 	bl	bb3a8 <spark_process>
        while (_while() && !_condition()) {
   be316:	e7f9      	b.n	be30c <_ZN9TimeClass7isValidEv+0x1c>
   be318:	f7ff fed8 	bl	be0cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   be31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   be320:	2000      	movs	r0, #0
   be322:	f7fc bd65 	b.w	badf0 <hal_rtc_time_is_valid>
}
   be326:	4620      	mov	r0, r4
   be328:	bd10      	pop	{r4, pc}

000be32a <_ZN9TimeClass3nowEv>:
{
   be32a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   be32c:	f7ff ffe0 	bl	be2f0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   be330:	2210      	movs	r2, #16
   be332:	2100      	movs	r1, #0
   be334:	4668      	mov	r0, sp
   be336:	f001 f83d 	bl	bf3b4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   be33a:	2100      	movs	r1, #0
   be33c:	4668      	mov	r0, sp
   be33e:	f7fc fd67 	bl	bae10 <hal_rtc_get_time>
}
   be342:	9800      	ldr	r0, [sp, #0]
   be344:	b005      	add	sp, #20
   be346:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be34c <_ZN9TimeClass4hourEv>:
{
   be34c:	b508      	push	{r3, lr}
	return hour(now());
   be34e:	f7ff ffec 	bl	be32a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   be352:	17c1      	asrs	r1, r0, #31
   be354:	f7ff fe84 	bl	be060 <_ZL22Refresh_UnixTime_Cachex>
}
   be358:	4b01      	ldr	r3, [pc, #4]	; (be360 <_ZN9TimeClass4hourEv+0x14>)
   be35a:	6898      	ldr	r0, [r3, #8]
   be35c:	bd08      	pop	{r3, pc}
   be35e:	bf00      	nop
   be360:	2003e6b0 	.word	0x2003e6b0

000be364 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   be364:	4b02      	ldr	r3, [pc, #8]	; (be370 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   be366:	681a      	ldr	r2, [r3, #0]
   be368:	4b02      	ldr	r3, [pc, #8]	; (be374 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   be36a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   be36c:	4770      	bx	lr
   be36e:	bf00      	nop
   be370:	2003de7c 	.word	0x2003de7c
   be374:	2003e6ac 	.word	0x2003e6ac

000be378 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   be378:	4770      	bx	lr

000be37a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   be37a:	7441      	strb	r1, [r0, #17]
}
   be37c:	4770      	bx	lr

000be37e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   be37e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   be380:	7c00      	ldrb	r0, [r0, #16]
   be382:	f7fc fef5 	bl	bb170 <hal_usart_available_data_for_write>
}
   be386:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be38a:	bd08      	pop	{r3, pc}

000be38c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   be38c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   be38e:	7c00      	ldrb	r0, [r0, #16]
   be390:	f7fc fec6 	bl	bb120 <hal_usart_available>
}
   be394:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be398:	bd08      	pop	{r3, pc}

000be39a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   be39a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   be39c:	7c00      	ldrb	r0, [r0, #16]
   be39e:	f7fc fecf 	bl	bb140 <hal_usart_peek>
}
   be3a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be3a6:	bd08      	pop	{r3, pc}

000be3a8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   be3a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   be3aa:	7c00      	ldrb	r0, [r0, #16]
   be3ac:	f7fc fec0 	bl	bb130 <hal_usart_read>
}
   be3b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be3b4:	bd08      	pop	{r3, pc}

000be3b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   be3b6:	7c00      	ldrb	r0, [r0, #16]
   be3b8:	f7fc beca 	b.w	bb150 <hal_usart_flush>

000be3bc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   be3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be3be:	7c45      	ldrb	r5, [r0, #17]
{
   be3c0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be3c2:	b12d      	cbz	r5, be3d0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   be3c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   be3c6:	b003      	add	sp, #12
   be3c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   be3cc:	f7fc bea0 	b.w	bb110 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be3d0:	7c00      	ldrb	r0, [r0, #16]
   be3d2:	9101      	str	r1, [sp, #4]
   be3d4:	f7fc fecc 	bl	bb170 <hal_usart_available_data_for_write>
   be3d8:	2800      	cmp	r0, #0
   be3da:	9901      	ldr	r1, [sp, #4]
   be3dc:	dcf2      	bgt.n	be3c4 <_ZN11USARTSerial5writeEh+0x8>
}
   be3de:	4628      	mov	r0, r5
   be3e0:	b003      	add	sp, #12
   be3e2:	bd30      	pop	{r4, r5, pc}

000be3e4 <_ZN11USARTSerialD0Ev>:
   be3e4:	b510      	push	{r4, lr}
   be3e6:	2114      	movs	r1, #20
   be3e8:	4604      	mov	r4, r0
   be3ea:	f7f5 fe58 	bl	b409e <_ZdlPvj>
   be3ee:	4620      	mov	r0, r4
   be3f0:	bd10      	pop	{r4, pc}
	...

000be3f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   be3f4:	b510      	push	{r4, lr}
   be3f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   be3fa:	4604      	mov	r4, r0
   be3fc:	4608      	mov	r0, r1
   be3fe:	4611      	mov	r1, r2
   be400:	2200      	movs	r2, #0
   be402:	e9c4 2301 	strd	r2, r3, [r4, #4]
   be406:	4b04      	ldr	r3, [pc, #16]	; (be418 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   be408:	6023      	str	r3, [r4, #0]
  _blocking = true;
   be40a:	2301      	movs	r3, #1
  _serial = serial;
   be40c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   be40e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   be410:	f7fc febe 	bl	bb190 <hal_usart_init_ex>
}
   be414:	4620      	mov	r0, r4
   be416:	bd10      	pop	{r4, pc}
   be418:	000c11d4 	.word	0x000c11d4

000be41c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   be41c:	7c00      	ldrb	r0, [r0, #16]
   be41e:	2300      	movs	r3, #0
   be420:	f7fc beae 	b.w	bb180 <hal_usart_begin_config>

000be424 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   be424:	2200      	movs	r2, #0
   be426:	f7ff bff9 	b.w	be41c <_ZN11USARTSerial5beginEmm>

000be42a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   be42a:	7c00      	ldrb	r0, [r0, #16]
   be42c:	f7fc be68 	b.w	bb100 <hal_usart_end>

000be430 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   be430:	7441      	strb	r1, [r0, #17]
}
   be432:	4770      	bx	lr

000be434 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be434:	4770      	bx	lr

000be436 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   be436:	4770      	bx	lr

000be438 <_ZN9USBSerial4readEv>:
{
   be438:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   be43a:	2100      	movs	r1, #0
   be43c:	7c00      	ldrb	r0, [r0, #16]
   be43e:	f7fc fed7 	bl	bb1f0 <HAL_USB_USART_Receive_Data>
}
   be442:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be446:	bd08      	pop	{r3, pc}

000be448 <_ZN9USBSerial4peekEv>:
{
   be448:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   be44a:	2101      	movs	r1, #1
   be44c:	7c00      	ldrb	r0, [r0, #16]
   be44e:	f7fc fecf 	bl	bb1f0 <HAL_USB_USART_Receive_Data>
}
   be452:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be456:	bd08      	pop	{r3, pc}

000be458 <_ZN9USBSerial17availableForWriteEv>:
{
   be458:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   be45a:	7c00      	ldrb	r0, [r0, #16]
   be45c:	f7fc fec0 	bl	bb1e0 <HAL_USB_USART_Available_Data_For_Write>
}
   be460:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be464:	bd08      	pop	{r3, pc}

000be466 <_ZN9USBSerial9availableEv>:
{
   be466:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   be468:	7c00      	ldrb	r0, [r0, #16]
   be46a:	f7fc feb1 	bl	bb1d0 <HAL_USB_USART_Available_Data>
}
   be46e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be472:	bd08      	pop	{r3, pc}

000be474 <_ZN9USBSerial5writeEh>:
{
   be474:	b513      	push	{r0, r1, r4, lr}
   be476:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   be478:	7c00      	ldrb	r0, [r0, #16]
{
   be47a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   be47c:	f7fc feb0 	bl	bb1e0 <HAL_USB_USART_Available_Data_For_Write>
   be480:	2800      	cmp	r0, #0
   be482:	9901      	ldr	r1, [sp, #4]
   be484:	dc01      	bgt.n	be48a <_ZN9USBSerial5writeEh+0x16>
   be486:	7c60      	ldrb	r0, [r4, #17]
   be488:	b120      	cbz	r0, be494 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   be48a:	7c20      	ldrb	r0, [r4, #16]
   be48c:	f7fc feb8 	bl	bb200 <HAL_USB_USART_Send_Data>
   be490:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   be494:	b002      	add	sp, #8
   be496:	bd10      	pop	{r4, pc}

000be498 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   be498:	7c00      	ldrb	r0, [r0, #16]
   be49a:	f7fc beb9 	b.w	bb210 <HAL_USB_USART_Flush_Data>

000be49e <_ZN9USBSerialD0Ev>:
   be49e:	b510      	push	{r4, lr}
   be4a0:	2114      	movs	r1, #20
   be4a2:	4604      	mov	r4, r0
   be4a4:	f7f5 fdfb 	bl	b409e <_ZdlPvj>
   be4a8:	4620      	mov	r0, r4
   be4aa:	bd10      	pop	{r4, pc}

000be4ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   be4ac:	b510      	push	{r4, lr}
   be4ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   be4b2:	4604      	mov	r4, r0
   be4b4:	4608      	mov	r0, r1
   be4b6:	2100      	movs	r1, #0
   be4b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   be4bc:	4b04      	ldr	r3, [pc, #16]	; (be4d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   be4be:	6023      	str	r3, [r4, #0]
  _blocking = true;
   be4c0:	2301      	movs	r3, #1
  _serial = serial;
   be4c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   be4c4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   be4c6:	4611      	mov	r1, r2
   be4c8:	f7fc fe6a 	bl	bb1a0 <HAL_USB_USART_Init>
}
   be4cc:	4620      	mov	r0, r4
   be4ce:	bd10      	pop	{r4, pc}
   be4d0:	000c1204 	.word	0x000c1204

000be4d4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   be4d4:	7c00      	ldrb	r0, [r0, #16]
   be4d6:	2200      	movs	r2, #0
   be4d8:	f7fc be6a 	b.w	bb1b0 <HAL_USB_USART_Begin>

000be4dc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   be4dc:	7c00      	ldrb	r0, [r0, #16]
   be4de:	f7fc be6f 	b.w	bb1c0 <HAL_USB_USART_End>

000be4e2 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   be4e2:	7c00      	ldrb	r0, [r0, #16]
   be4e4:	f7fc be9c 	b.w	bb220 <HAL_USB_USART_Is_Connected>

000be4e8 <_Z19acquireSerialBufferv>:
{
   be4e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   be4ea:	2214      	movs	r2, #20
{
   be4ec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   be4ee:	2100      	movs	r1, #0
   be4f0:	f000 ff60 	bl	bf3b4 <memset>
}
   be4f4:	4620      	mov	r0, r4
   be4f6:	bd10      	pop	{r4, pc}

000be4f8 <_Z16_fetch_usbserialv>:
{
   be4f8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be4fa:	4c0f      	ldr	r4, [pc, #60]	; (be538 <_Z16_fetch_usbserialv+0x40>)
{
   be4fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   be4fe:	a803      	add	r0, sp, #12
   be500:	f7ff fff2 	bl	be4e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be504:	7821      	ldrb	r1, [r4, #0]
   be506:	f3bf 8f5b 	dmb	ish
   be50a:	f011 0101 	ands.w	r1, r1, #1
   be50e:	d10f      	bne.n	be530 <_Z16_fetch_usbserialv+0x38>
   be510:	4620      	mov	r0, r4
   be512:	9101      	str	r1, [sp, #4]
   be514:	f7f5 fdd2 	bl	b40bc <__cxa_guard_acquire>
   be518:	9901      	ldr	r1, [sp, #4]
   be51a:	b148      	cbz	r0, be530 <_Z16_fetch_usbserialv+0x38>
   be51c:	aa03      	add	r2, sp, #12
   be51e:	4807      	ldr	r0, [pc, #28]	; (be53c <_Z16_fetch_usbserialv+0x44>)
   be520:	f7ff ffc4 	bl	be4ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   be524:	4620      	mov	r0, r4
   be526:	f7f5 fdce 	bl	b40c6 <__cxa_guard_release>
   be52a:	4805      	ldr	r0, [pc, #20]	; (be540 <_Z16_fetch_usbserialv+0x48>)
   be52c:	f000 feee 	bl	bf30c <atexit>
	return _usbserial;
}
   be530:	4802      	ldr	r0, [pc, #8]	; (be53c <_Z16_fetch_usbserialv+0x44>)
   be532:	b008      	add	sp, #32
   be534:	bd10      	pop	{r4, pc}
   be536:	bf00      	nop
   be538:	2003e6f0 	.word	0x2003e6f0
   be53c:	2003e6f4 	.word	0x2003e6f4
   be540:	000be435 	.word	0x000be435

000be544 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   be544:	4b01      	ldr	r3, [pc, #4]	; (be54c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   be546:	6018      	str	r0, [r3, #0]
    }, nullptr);
   be548:	4770      	bx	lr
   be54a:	bf00      	nop
   be54c:	2003de84 	.word	0x2003de84

000be550 <serialEventRun>:
{
   be550:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   be552:	4b0b      	ldr	r3, [pc, #44]	; (be580 <serialEventRun+0x30>)
   be554:	b143      	cbz	r3, be568 <serialEventRun+0x18>
   be556:	f7ff ffcf 	bl	be4f8 <_Z16_fetch_usbserialv>
   be55a:	6803      	ldr	r3, [r0, #0]
   be55c:	691b      	ldr	r3, [r3, #16]
   be55e:	4798      	blx	r3
   be560:	2800      	cmp	r0, #0
   be562:	dd01      	ble.n	be568 <serialEventRun+0x18>
        serialEvent();
   be564:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   be568:	4b06      	ldr	r3, [pc, #24]	; (be584 <serialEventRun+0x34>)
   be56a:	b143      	cbz	r3, be57e <serialEventRun+0x2e>
   be56c:	f000 f9c2 	bl	be8f4 <_Z22__fetch_global_Serial1v>
   be570:	6803      	ldr	r3, [r0, #0]
   be572:	691b      	ldr	r3, [r3, #16]
   be574:	4798      	blx	r3
   be576:	2800      	cmp	r0, #0
   be578:	dd01      	ble.n	be57e <serialEventRun+0x2e>
        serialEvent1();
   be57a:	f3af 8000 	nop.w
}
   be57e:	bd08      	pop	{r3, pc}
	...

000be588 <_post_loop>:
{
   be588:	b508      	push	{r3, lr}
	serialEventRun();
   be58a:	f7ff ffe1 	bl	be550 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   be58e:	f7fc fc27 	bl	bade0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   be592:	4b01      	ldr	r3, [pc, #4]	; (be598 <_post_loop+0x10>)
   be594:	6018      	str	r0, [r3, #0]
}
   be596:	bd08      	pop	{r3, pc}
   be598:	2003e710 	.word	0x2003e710

000be59c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   be59c:	4805      	ldr	r0, [pc, #20]	; (be5b4 <_Z33system_initialize_user_backup_ramv+0x18>)
   be59e:	4a06      	ldr	r2, [pc, #24]	; (be5b8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   be5a0:	4906      	ldr	r1, [pc, #24]	; (be5bc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   be5a2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   be5a4:	1a12      	subs	r2, r2, r0
   be5a6:	f000 fedd 	bl	bf364 <memcpy>
    __backup_sram_signature = signature;
   be5aa:	4b05      	ldr	r3, [pc, #20]	; (be5c0 <_Z33system_initialize_user_backup_ramv+0x24>)
   be5ac:	4a05      	ldr	r2, [pc, #20]	; (be5c4 <_Z33system_initialize_user_backup_ramv+0x28>)
   be5ae:	601a      	str	r2, [r3, #0]
}
   be5b0:	bd08      	pop	{r3, pc}
   be5b2:	bf00      	nop
   be5b4:	2003f400 	.word	0x2003f400
   be5b8:	2003f404 	.word	0x2003f404
   be5bc:	000c14c4 	.word	0x000c14c4
   be5c0:	2003f400 	.word	0x2003f400
   be5c4:	9a271c1e 	.word	0x9a271c1e

000be5c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   be5c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   be5ca:	2300      	movs	r3, #0
   be5cc:	9300      	str	r3, [sp, #0]
   be5ce:	461a      	mov	r2, r3
   be5d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   be5d4:	f7fc feb0 	bl	bb338 <system_ctrl_set_result>
}
   be5d8:	b003      	add	sp, #12
   be5da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be5e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   be5e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   be5e2:	8843      	ldrh	r3, [r0, #2]
   be5e4:	2b0a      	cmp	r3, #10
   be5e6:	d008      	beq.n	be5fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   be5e8:	2b50      	cmp	r3, #80	; 0x50
   be5ea:	d10b      	bne.n	be604 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   be5ec:	4b09      	ldr	r3, [pc, #36]	; (be614 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   be5ee:	681b      	ldr	r3, [r3, #0]
   be5f0:	b14b      	cbz	r3, be606 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   be5f2:	b003      	add	sp, #12
   be5f4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   be5f8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   be5fa:	f7ff ffe5 	bl	be5c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   be5fe:	b003      	add	sp, #12
   be600:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   be604:	2300      	movs	r3, #0
   be606:	9300      	str	r3, [sp, #0]
   be608:	461a      	mov	r2, r3
   be60a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   be60e:	f7fc fe93 	bl	bb338 <system_ctrl_set_result>
}
   be612:	e7f4      	b.n	be5fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   be614:	2003e70c 	.word	0x2003e70c

000be618 <module_user_init_hook>:
{
   be618:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   be61a:	4812      	ldr	r0, [pc, #72]	; (be664 <module_user_init_hook+0x4c>)
   be61c:	2100      	movs	r1, #0
   be61e:	f7fc ffd3 	bl	bb5c8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   be622:	4b11      	ldr	r3, [pc, #68]	; (be668 <module_user_init_hook+0x50>)
   be624:	681a      	ldr	r2, [r3, #0]
   be626:	4b11      	ldr	r3, [pc, #68]	; (be66c <module_user_init_hook+0x54>)
   be628:	429a      	cmp	r2, r3
   be62a:	4b11      	ldr	r3, [pc, #68]	; (be670 <module_user_init_hook+0x58>)
   be62c:	bf0c      	ite	eq
   be62e:	2201      	moveq	r2, #1
   be630:	2200      	movne	r2, #0
   be632:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   be634:	d001      	beq.n	be63a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   be636:	f7ff ffb1 	bl	be59c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   be63a:	f7fc fbb9 	bl	badb0 <HAL_RNG_GetRandomNumber>
   be63e:	4604      	mov	r4, r0
    srand(seed);
   be640:	f000 fec0 	bl	bf3c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   be644:	4b0b      	ldr	r3, [pc, #44]	; (be674 <module_user_init_hook+0x5c>)
   be646:	b113      	cbz	r3, be64e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   be648:	4620      	mov	r0, r4
   be64a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   be64e:	2100      	movs	r1, #0
   be650:	4808      	ldr	r0, [pc, #32]	; (be674 <module_user_init_hook+0x5c>)
   be652:	f7fc fef1 	bl	bb438 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   be656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   be65a:	4807      	ldr	r0, [pc, #28]	; (be678 <module_user_init_hook+0x60>)
   be65c:	2100      	movs	r1, #0
   be65e:	f7fc be61 	b.w	bb324 <system_ctrl_set_app_request_handler>
   be662:	bf00      	nop
   be664:	000be545 	.word	0x000be545
   be668:	2003f400 	.word	0x2003f400
   be66c:	9a271c1e 	.word	0x9a271c1e
   be670:	2003e708 	.word	0x2003e708
   be674:	00000000 	.word	0x00000000
   be678:	000be5e1 	.word	0x000be5e1

000be67c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   be67c:	b508      	push	{r3, lr}
   be67e:	4b02      	ldr	r3, [pc, #8]	; (be688 <spark_protocol_instance+0xc>)
   be680:	681b      	ldr	r3, [r3, #0]
   be682:	681b      	ldr	r3, [r3, #0]
   be684:	9301      	str	r3, [sp, #4]
   be686:	bd08      	pop	{r3, pc}
   be688:	0003025c 	.word	0x0003025c

000be68c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   be68c:	b508      	push	{r3, lr}
   be68e:	4b02      	ldr	r3, [pc, #8]	; (be698 <spark_protocol_set_product_id+0xc>)
   be690:	681b      	ldr	r3, [r3, #0]
   be692:	685b      	ldr	r3, [r3, #4]
   be694:	9301      	str	r3, [sp, #4]
   be696:	bd08      	pop	{r3, pc}
   be698:	0003025c 	.word	0x0003025c

000be69c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   be69c:	b508      	push	{r3, lr}
   be69e:	4b02      	ldr	r3, [pc, #8]	; (be6a8 <spark_protocol_set_product_firmware_version+0xc>)
   be6a0:	681b      	ldr	r3, [r3, #0]
   be6a2:	689b      	ldr	r3, [r3, #8]
   be6a4:	9301      	str	r3, [sp, #4]
   be6a6:	bd08      	pop	{r3, pc}
   be6a8:	0003025c 	.word	0x0003025c

000be6ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   be6ac:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   be6ae:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   be6b0:	d902      	bls.n	be6b8 <pinAvailable+0xc>
    return false;
   be6b2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   be6b4:	b002      	add	sp, #8
   be6b6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   be6b8:	f1a0 030b 	sub.w	r3, r0, #11
   be6bc:	2b02      	cmp	r3, #2
   be6be:	d81a      	bhi.n	be6f6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   be6c0:	4c17      	ldr	r4, [pc, #92]	; (be720 <pinAvailable+0x74>)
   be6c2:	7821      	ldrb	r1, [r4, #0]
   be6c4:	f3bf 8f5b 	dmb	ish
   be6c8:	f011 0101 	ands.w	r1, r1, #1
   be6cc:	d10b      	bne.n	be6e6 <pinAvailable+0x3a>
   be6ce:	4620      	mov	r0, r4
   be6d0:	9101      	str	r1, [sp, #4]
   be6d2:	f7f5 fcf3 	bl	b40bc <__cxa_guard_acquire>
   be6d6:	9901      	ldr	r1, [sp, #4]
   be6d8:	b128      	cbz	r0, be6e6 <pinAvailable+0x3a>
   be6da:	4812      	ldr	r0, [pc, #72]	; (be724 <pinAvailable+0x78>)
   be6dc:	f7ff f9c6 	bl	bda6c <_ZN8SPIClassC1E19hal_spi_interface_t>
   be6e0:	4620      	mov	r0, r4
   be6e2:	f7f5 fcf0 	bl	b40c6 <__cxa_guard_release>
   be6e6:	4b0f      	ldr	r3, [pc, #60]	; (be724 <pinAvailable+0x78>)
   be6e8:	7818      	ldrb	r0, [r3, #0]
   be6ea:	f7fc fc81 	bl	baff0 <hal_spi_is_enabled>
   be6ee:	2800      	cmp	r0, #0
   be6f0:	d1df      	bne.n	be6b2 <pinAvailable+0x6>
  return true; // 'pin' is available
   be6f2:	2001      	movs	r0, #1
   be6f4:	e7de      	b.n	be6b4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   be6f6:	2801      	cmp	r0, #1
   be6f8:	d809      	bhi.n	be70e <pinAvailable+0x62>
   be6fa:	f000 f897 	bl	be82c <_Z19__fetch_global_Wirev>
   be6fe:	2100      	movs	r1, #0
   be700:	7c00      	ldrb	r0, [r0, #16]
   be702:	f7fc fc15 	bl	baf30 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   be706:	f080 0001 	eor.w	r0, r0, #1
   be70a:	b2c0      	uxtb	r0, r0
   be70c:	e7d2      	b.n	be6b4 <pinAvailable+0x8>
   be70e:	3809      	subs	r0, #9
   be710:	2801      	cmp	r0, #1
   be712:	d8ee      	bhi.n	be6f2 <pinAvailable+0x46>
   be714:	f000 f8ee 	bl	be8f4 <_Z22__fetch_global_Serial1v>
   be718:	7c00      	ldrb	r0, [r0, #16]
   be71a:	f7fc fd21 	bl	bb160 <hal_usart_is_enabled>
   be71e:	e7f2      	b.n	be706 <pinAvailable+0x5a>
   be720:	2003e44c 	.word	0x2003e44c
   be724:	2003e450 	.word	0x2003e450

000be728 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   be728:	2823      	cmp	r0, #35	; 0x23
{
   be72a:	b538      	push	{r3, r4, r5, lr}
   be72c:	4604      	mov	r4, r0
   be72e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   be730:	d80a      	bhi.n	be748 <pinMode+0x20>
   be732:	29ff      	cmp	r1, #255	; 0xff
   be734:	d008      	beq.n	be748 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   be736:	f7ff ffb9 	bl	be6ac <pinAvailable>
   be73a:	b128      	cbz	r0, be748 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   be73c:	4629      	mov	r1, r5
   be73e:	4620      	mov	r0, r4
}
   be740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   be744:	f7fc bb7c 	b.w	bae40 <HAL_Pin_Mode>
}
   be748:	bd38      	pop	{r3, r4, r5, pc}

000be74a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   be74a:	b538      	push	{r3, r4, r5, lr}
   be74c:	4604      	mov	r4, r0
   be74e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   be750:	f7fc fb7e 	bl	bae50 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   be754:	28ff      	cmp	r0, #255	; 0xff
   be756:	d010      	beq.n	be77a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   be758:	2806      	cmp	r0, #6
   be75a:	d804      	bhi.n	be766 <digitalWrite+0x1c>
   be75c:	234d      	movs	r3, #77	; 0x4d
   be75e:	fa23 f000 	lsr.w	r0, r3, r0
   be762:	07c3      	lsls	r3, r0, #31
   be764:	d409      	bmi.n	be77a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   be766:	4620      	mov	r0, r4
   be768:	f7ff ffa0 	bl	be6ac <pinAvailable>
   be76c:	b128      	cbz	r0, be77a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   be76e:	4629      	mov	r1, r5
   be770:	4620      	mov	r0, r4
}
   be772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   be776:	f7fc bb73 	b.w	bae60 <HAL_GPIO_Write>
}
   be77a:	bd38      	pop	{r3, r4, r5, pc}

000be77c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   be77c:	b510      	push	{r4, lr}
   be77e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   be780:	f7fc fb66 	bl	bae50 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   be784:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   be786:	b2db      	uxtb	r3, r3
   be788:	2b01      	cmp	r3, #1
   be78a:	d908      	bls.n	be79e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   be78c:	4620      	mov	r0, r4
   be78e:	f7ff ff8d 	bl	be6ac <pinAvailable>
   be792:	b120      	cbz	r0, be79e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   be794:	4620      	mov	r0, r4
}
   be796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   be79a:	f7fc bb69 	b.w	bae70 <HAL_GPIO_Read>
}
   be79e:	2000      	movs	r0, #0
   be7a0:	bd10      	pop	{r4, pc}

000be7a2 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   be7a2:	280d      	cmp	r0, #13
{
   be7a4:	b510      	push	{r4, lr}
   be7a6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   be7a8:	bf9c      	itt	ls
   be7aa:	340e      	addls	r4, #14
   be7ac:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   be7ae:	4620      	mov	r0, r4
   be7b0:	f7ff ff7c 	bl	be6ac <pinAvailable>
   be7b4:	b150      	cbz	r0, be7cc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   be7b6:	2103      	movs	r1, #3
   be7b8:	4620      	mov	r0, r4
   be7ba:	f7fc fb39 	bl	bae30 <HAL_Validate_Pin_Function>
   be7be:	2803      	cmp	r0, #3
   be7c0:	d104      	bne.n	be7cc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   be7c2:	4620      	mov	r0, r4
}
   be7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   be7c8:	f7fc bb6a 	b.w	baea0 <hal_adc_read>
}
   be7cc:	2000      	movs	r0, #0
   be7ce:	bd10      	pop	{r4, pc}

000be7d0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be7d0:	4770      	bx	lr

000be7d2 <__tcf_1>:
   be7d2:	4770      	bx	lr

000be7d4 <_Z17acquireWireBufferv>:
{
   be7d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   be7d6:	2520      	movs	r5, #32
   be7d8:	2314      	movs	r3, #20
{
   be7da:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   be7dc:	6003      	str	r3, [r0, #0]
   be7de:	6085      	str	r5, [r0, #8]
   be7e0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be7e2:	4906      	ldr	r1, [pc, #24]	; (be7fc <_Z17acquireWireBufferv+0x28>)
   be7e4:	4628      	mov	r0, r5
   be7e6:	f000 f8ab 	bl	be940 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be7ea:	4904      	ldr	r1, [pc, #16]	; (be7fc <_Z17acquireWireBufferv+0x28>)
	};
   be7ec:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be7ee:	4628      	mov	r0, r5
   be7f0:	f000 f8a6 	bl	be940 <_ZnajRKSt9nothrow_t>
	};
   be7f4:	60e0      	str	r0, [r4, #12]
}
   be7f6:	4620      	mov	r0, r4
   be7f8:	bd38      	pop	{r3, r4, r5, pc}
   be7fa:	bf00      	nop
   be7fc:	000c122c 	.word	0x000c122c

000be800 <_Z18acquireWire1Bufferv>:
   be800:	b538      	push	{r3, r4, r5, lr}
   be802:	2520      	movs	r5, #32
   be804:	2314      	movs	r3, #20
   be806:	4604      	mov	r4, r0
   be808:	6003      	str	r3, [r0, #0]
   be80a:	6085      	str	r5, [r0, #8]
   be80c:	6105      	str	r5, [r0, #16]
   be80e:	4906      	ldr	r1, [pc, #24]	; (be828 <_Z18acquireWire1Bufferv+0x28>)
   be810:	4628      	mov	r0, r5
   be812:	f000 f895 	bl	be940 <_ZnajRKSt9nothrow_t>
   be816:	4904      	ldr	r1, [pc, #16]	; (be828 <_Z18acquireWire1Bufferv+0x28>)
   be818:	6060      	str	r0, [r4, #4]
   be81a:	4628      	mov	r0, r5
   be81c:	f000 f890 	bl	be940 <_ZnajRKSt9nothrow_t>
   be820:	60e0      	str	r0, [r4, #12]
   be822:	4620      	mov	r0, r4
   be824:	bd38      	pop	{r3, r4, r5, pc}
   be826:	bf00      	nop
   be828:	000c122c 	.word	0x000c122c

000be82c <_Z19__fetch_global_Wirev>:
{
   be82c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be82e:	4d0e      	ldr	r5, [pc, #56]	; (be868 <_Z19__fetch_global_Wirev+0x3c>)
   be830:	7829      	ldrb	r1, [r5, #0]
   be832:	f3bf 8f5b 	dmb	ish
   be836:	f011 0401 	ands.w	r4, r1, #1
{
   be83a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be83c:	d111      	bne.n	be862 <_Z19__fetch_global_Wirev+0x36>
   be83e:	4628      	mov	r0, r5
   be840:	f7f5 fc3c 	bl	b40bc <__cxa_guard_acquire>
   be844:	b168      	cbz	r0, be862 <_Z19__fetch_global_Wirev+0x36>
   be846:	a801      	add	r0, sp, #4
   be848:	f7ff ffc4 	bl	be7d4 <_Z17acquireWireBufferv>
   be84c:	aa01      	add	r2, sp, #4
   be84e:	4621      	mov	r1, r4
   be850:	4806      	ldr	r0, [pc, #24]	; (be86c <_Z19__fetch_global_Wirev+0x40>)
   be852:	f7fd fbdf 	bl	bc014 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be856:	4628      	mov	r0, r5
   be858:	f7f5 fc35 	bl	b40c6 <__cxa_guard_release>
   be85c:	4804      	ldr	r0, [pc, #16]	; (be870 <_Z19__fetch_global_Wirev+0x44>)
   be85e:	f000 fd55 	bl	bf30c <atexit>
	return wire;
}
   be862:	4802      	ldr	r0, [pc, #8]	; (be86c <_Z19__fetch_global_Wirev+0x40>)
   be864:	b007      	add	sp, #28
   be866:	bd30      	pop	{r4, r5, pc}
   be868:	2003e714 	.word	0x2003e714
   be86c:	2003e71c 	.word	0x2003e71c
   be870:	000be7d1 	.word	0x000be7d1

000be874 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   be874:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be876:	4c0e      	ldr	r4, [pc, #56]	; (be8b0 <_Z20__fetch_global_Wire1v+0x3c>)
   be878:	7823      	ldrb	r3, [r4, #0]
   be87a:	f3bf 8f5b 	dmb	ish
   be87e:	07db      	lsls	r3, r3, #31
{
   be880:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be882:	d411      	bmi.n	be8a8 <_Z20__fetch_global_Wire1v+0x34>
   be884:	4620      	mov	r0, r4
   be886:	f7f5 fc19 	bl	b40bc <__cxa_guard_acquire>
   be88a:	b168      	cbz	r0, be8a8 <_Z20__fetch_global_Wire1v+0x34>
   be88c:	a801      	add	r0, sp, #4
   be88e:	f7ff ffb7 	bl	be800 <_Z18acquireWire1Bufferv>
   be892:	aa01      	add	r2, sp, #4
   be894:	2101      	movs	r1, #1
   be896:	4807      	ldr	r0, [pc, #28]	; (be8b4 <_Z20__fetch_global_Wire1v+0x40>)
   be898:	f7fd fbbc 	bl	bc014 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be89c:	4620      	mov	r0, r4
   be89e:	f7f5 fc12 	bl	b40c6 <__cxa_guard_release>
   be8a2:	4805      	ldr	r0, [pc, #20]	; (be8b8 <_Z20__fetch_global_Wire1v+0x44>)
   be8a4:	f000 fd32 	bl	bf30c <atexit>
	return wire;
}
   be8a8:	4802      	ldr	r0, [pc, #8]	; (be8b4 <_Z20__fetch_global_Wire1v+0x40>)
   be8aa:	b006      	add	sp, #24
   be8ac:	bd10      	pop	{r4, pc}
   be8ae:	bf00      	nop
   be8b0:	2003e718 	.word	0x2003e718
   be8b4:	2003e730 	.word	0x2003e730
   be8b8:	000be7d3 	.word	0x000be7d3

000be8bc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be8bc:	4770      	bx	lr
	...

000be8c0 <_Z20acquireSerial1Bufferv>:
{
   be8c0:	b538      	push	{r3, r4, r5, lr}
   be8c2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   be8c4:	2514      	movs	r5, #20
   be8c6:	462a      	mov	r2, r5
   be8c8:	2100      	movs	r1, #0
   be8ca:	f000 fd73 	bl	bf3b4 <memset>
   be8ce:	8025      	strh	r5, [r4, #0]
   be8d0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be8d2:	4907      	ldr	r1, [pc, #28]	; (be8f0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   be8d4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be8d6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   be8d8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be8da:	f000 f831 	bl	be940 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be8de:	4904      	ldr	r1, [pc, #16]	; (be8f0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   be8e0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be8e2:	4628      	mov	r0, r5
   be8e4:	f000 f82c 	bl	be940 <_ZnajRKSt9nothrow_t>
    };
   be8e8:	60e0      	str	r0, [r4, #12]
}
   be8ea:	4620      	mov	r0, r4
   be8ec:	bd38      	pop	{r3, r4, r5, pc}
   be8ee:	bf00      	nop
   be8f0:	000c122c 	.word	0x000c122c

000be8f4 <_Z22__fetch_global_Serial1v>:
{
   be8f4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be8f6:	4d0e      	ldr	r5, [pc, #56]	; (be930 <_Z22__fetch_global_Serial1v+0x3c>)
   be8f8:	7829      	ldrb	r1, [r5, #0]
   be8fa:	f3bf 8f5b 	dmb	ish
   be8fe:	f011 0401 	ands.w	r4, r1, #1
{
   be902:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be904:	d111      	bne.n	be92a <_Z22__fetch_global_Serial1v+0x36>
   be906:	4628      	mov	r0, r5
   be908:	f7f5 fbd8 	bl	b40bc <__cxa_guard_acquire>
   be90c:	b168      	cbz	r0, be92a <_Z22__fetch_global_Serial1v+0x36>
   be90e:	a801      	add	r0, sp, #4
   be910:	f7ff ffd6 	bl	be8c0 <_Z20acquireSerial1Bufferv>
   be914:	aa01      	add	r2, sp, #4
   be916:	4621      	mov	r1, r4
   be918:	4806      	ldr	r0, [pc, #24]	; (be934 <_Z22__fetch_global_Serial1v+0x40>)
   be91a:	f7ff fd6b 	bl	be3f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   be91e:	4628      	mov	r0, r5
   be920:	f7f5 fbd1 	bl	b40c6 <__cxa_guard_release>
   be924:	4804      	ldr	r0, [pc, #16]	; (be938 <_Z22__fetch_global_Serial1v+0x44>)
   be926:	f000 fcf1 	bl	bf30c <atexit>
    return serial1;
}
   be92a:	4802      	ldr	r0, [pc, #8]	; (be934 <_Z22__fetch_global_Serial1v+0x40>)
   be92c:	b007      	add	sp, #28
   be92e:	bd30      	pop	{r4, r5, pc}
   be930:	2003e744 	.word	0x2003e744
   be934:	2003e748 	.word	0x2003e748
   be938:	000be8bd 	.word	0x000be8bd

000be93c <_ZnwjRKSt9nothrow_t>:
   be93c:	f7f5 bbab 	b.w	b4096 <_Znwj>

000be940 <_ZnajRKSt9nothrow_t>:
   be940:	f7f5 bbab 	b.w	b409a <_Znaj>

000be944 <_ZSt17__throw_bad_allocv>:
   be944:	b508      	push	{r3, lr}
   be946:	f7fc fe1f 	bl	bb588 <abort>

000be94a <_ZSt20__throw_length_errorPKc>:
   be94a:	b508      	push	{r3, lr}
   be94c:	f7fc fe1c 	bl	bb588 <abort>

000be950 <_ZSt25__throw_bad_function_callv>:
   be950:	b508      	push	{r3, lr}
   be952:	f7fc fe19 	bl	bb588 <abort>
	...

000be958 <__aeabi_drsub>:
   be958:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   be95c:	e002      	b.n	be964 <__adddf3>
   be95e:	bf00      	nop

000be960 <__aeabi_dsub>:
   be960:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000be964 <__adddf3>:
   be964:	b530      	push	{r4, r5, lr}
   be966:	ea4f 0441 	mov.w	r4, r1, lsl #1
   be96a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   be96e:	ea94 0f05 	teq	r4, r5
   be972:	bf08      	it	eq
   be974:	ea90 0f02 	teqeq	r0, r2
   be978:	bf1f      	itttt	ne
   be97a:	ea54 0c00 	orrsne.w	ip, r4, r0
   be97e:	ea55 0c02 	orrsne.w	ip, r5, r2
   be982:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   be986:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be98a:	f000 80e2 	beq.w	beb52 <__adddf3+0x1ee>
   be98e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   be992:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   be996:	bfb8      	it	lt
   be998:	426d      	neglt	r5, r5
   be99a:	dd0c      	ble.n	be9b6 <__adddf3+0x52>
   be99c:	442c      	add	r4, r5
   be99e:	ea80 0202 	eor.w	r2, r0, r2
   be9a2:	ea81 0303 	eor.w	r3, r1, r3
   be9a6:	ea82 0000 	eor.w	r0, r2, r0
   be9aa:	ea83 0101 	eor.w	r1, r3, r1
   be9ae:	ea80 0202 	eor.w	r2, r0, r2
   be9b2:	ea81 0303 	eor.w	r3, r1, r3
   be9b6:	2d36      	cmp	r5, #54	; 0x36
   be9b8:	bf88      	it	hi
   be9ba:	bd30      	pophi	{r4, r5, pc}
   be9bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be9c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be9c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   be9c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   be9cc:	d002      	beq.n	be9d4 <__adddf3+0x70>
   be9ce:	4240      	negs	r0, r0
   be9d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be9d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be9d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be9dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be9e0:	d002      	beq.n	be9e8 <__adddf3+0x84>
   be9e2:	4252      	negs	r2, r2
   be9e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be9e8:	ea94 0f05 	teq	r4, r5
   be9ec:	f000 80a7 	beq.w	beb3e <__adddf3+0x1da>
   be9f0:	f1a4 0401 	sub.w	r4, r4, #1
   be9f4:	f1d5 0e20 	rsbs	lr, r5, #32
   be9f8:	db0d      	blt.n	bea16 <__adddf3+0xb2>
   be9fa:	fa02 fc0e 	lsl.w	ip, r2, lr
   be9fe:	fa22 f205 	lsr.w	r2, r2, r5
   bea02:	1880      	adds	r0, r0, r2
   bea04:	f141 0100 	adc.w	r1, r1, #0
   bea08:	fa03 f20e 	lsl.w	r2, r3, lr
   bea0c:	1880      	adds	r0, r0, r2
   bea0e:	fa43 f305 	asr.w	r3, r3, r5
   bea12:	4159      	adcs	r1, r3
   bea14:	e00e      	b.n	bea34 <__adddf3+0xd0>
   bea16:	f1a5 0520 	sub.w	r5, r5, #32
   bea1a:	f10e 0e20 	add.w	lr, lr, #32
   bea1e:	2a01      	cmp	r2, #1
   bea20:	fa03 fc0e 	lsl.w	ip, r3, lr
   bea24:	bf28      	it	cs
   bea26:	f04c 0c02 	orrcs.w	ip, ip, #2
   bea2a:	fa43 f305 	asr.w	r3, r3, r5
   bea2e:	18c0      	adds	r0, r0, r3
   bea30:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bea34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bea38:	d507      	bpl.n	bea4a <__adddf3+0xe6>
   bea3a:	f04f 0e00 	mov.w	lr, #0
   bea3e:	f1dc 0c00 	rsbs	ip, ip, #0
   bea42:	eb7e 0000 	sbcs.w	r0, lr, r0
   bea46:	eb6e 0101 	sbc.w	r1, lr, r1
   bea4a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bea4e:	d31b      	bcc.n	bea88 <__adddf3+0x124>
   bea50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bea54:	d30c      	bcc.n	bea70 <__adddf3+0x10c>
   bea56:	0849      	lsrs	r1, r1, #1
   bea58:	ea5f 0030 	movs.w	r0, r0, rrx
   bea5c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bea60:	f104 0401 	add.w	r4, r4, #1
   bea64:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bea68:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bea6c:	f080 809a 	bcs.w	beba4 <__adddf3+0x240>
   bea70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bea74:	bf08      	it	eq
   bea76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bea7a:	f150 0000 	adcs.w	r0, r0, #0
   bea7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bea82:	ea41 0105 	orr.w	r1, r1, r5
   bea86:	bd30      	pop	{r4, r5, pc}
   bea88:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bea8c:	4140      	adcs	r0, r0
   bea8e:	eb41 0101 	adc.w	r1, r1, r1
   bea92:	3c01      	subs	r4, #1
   bea94:	bf28      	it	cs
   bea96:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bea9a:	d2e9      	bcs.n	bea70 <__adddf3+0x10c>
   bea9c:	f091 0f00 	teq	r1, #0
   beaa0:	bf04      	itt	eq
   beaa2:	4601      	moveq	r1, r0
   beaa4:	2000      	moveq	r0, #0
   beaa6:	fab1 f381 	clz	r3, r1
   beaaa:	bf08      	it	eq
   beaac:	3320      	addeq	r3, #32
   beaae:	f1a3 030b 	sub.w	r3, r3, #11
   beab2:	f1b3 0220 	subs.w	r2, r3, #32
   beab6:	da0c      	bge.n	bead2 <__adddf3+0x16e>
   beab8:	320c      	adds	r2, #12
   beaba:	dd08      	ble.n	beace <__adddf3+0x16a>
   beabc:	f102 0c14 	add.w	ip, r2, #20
   beac0:	f1c2 020c 	rsb	r2, r2, #12
   beac4:	fa01 f00c 	lsl.w	r0, r1, ip
   beac8:	fa21 f102 	lsr.w	r1, r1, r2
   beacc:	e00c      	b.n	beae8 <__adddf3+0x184>
   beace:	f102 0214 	add.w	r2, r2, #20
   bead2:	bfd8      	it	le
   bead4:	f1c2 0c20 	rsble	ip, r2, #32
   bead8:	fa01 f102 	lsl.w	r1, r1, r2
   beadc:	fa20 fc0c 	lsr.w	ip, r0, ip
   beae0:	bfdc      	itt	le
   beae2:	ea41 010c 	orrle.w	r1, r1, ip
   beae6:	4090      	lslle	r0, r2
   beae8:	1ae4      	subs	r4, r4, r3
   beaea:	bfa2      	ittt	ge
   beaec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   beaf0:	4329      	orrge	r1, r5
   beaf2:	bd30      	popge	{r4, r5, pc}
   beaf4:	ea6f 0404 	mvn.w	r4, r4
   beaf8:	3c1f      	subs	r4, #31
   beafa:	da1c      	bge.n	beb36 <__adddf3+0x1d2>
   beafc:	340c      	adds	r4, #12
   beafe:	dc0e      	bgt.n	beb1e <__adddf3+0x1ba>
   beb00:	f104 0414 	add.w	r4, r4, #20
   beb04:	f1c4 0220 	rsb	r2, r4, #32
   beb08:	fa20 f004 	lsr.w	r0, r0, r4
   beb0c:	fa01 f302 	lsl.w	r3, r1, r2
   beb10:	ea40 0003 	orr.w	r0, r0, r3
   beb14:	fa21 f304 	lsr.w	r3, r1, r4
   beb18:	ea45 0103 	orr.w	r1, r5, r3
   beb1c:	bd30      	pop	{r4, r5, pc}
   beb1e:	f1c4 040c 	rsb	r4, r4, #12
   beb22:	f1c4 0220 	rsb	r2, r4, #32
   beb26:	fa20 f002 	lsr.w	r0, r0, r2
   beb2a:	fa01 f304 	lsl.w	r3, r1, r4
   beb2e:	ea40 0003 	orr.w	r0, r0, r3
   beb32:	4629      	mov	r1, r5
   beb34:	bd30      	pop	{r4, r5, pc}
   beb36:	fa21 f004 	lsr.w	r0, r1, r4
   beb3a:	4629      	mov	r1, r5
   beb3c:	bd30      	pop	{r4, r5, pc}
   beb3e:	f094 0f00 	teq	r4, #0
   beb42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   beb46:	bf06      	itte	eq
   beb48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   beb4c:	3401      	addeq	r4, #1
   beb4e:	3d01      	subne	r5, #1
   beb50:	e74e      	b.n	be9f0 <__adddf3+0x8c>
   beb52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   beb56:	bf18      	it	ne
   beb58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   beb5c:	d029      	beq.n	bebb2 <__adddf3+0x24e>
   beb5e:	ea94 0f05 	teq	r4, r5
   beb62:	bf08      	it	eq
   beb64:	ea90 0f02 	teqeq	r0, r2
   beb68:	d005      	beq.n	beb76 <__adddf3+0x212>
   beb6a:	ea54 0c00 	orrs.w	ip, r4, r0
   beb6e:	bf04      	itt	eq
   beb70:	4619      	moveq	r1, r3
   beb72:	4610      	moveq	r0, r2
   beb74:	bd30      	pop	{r4, r5, pc}
   beb76:	ea91 0f03 	teq	r1, r3
   beb7a:	bf1e      	ittt	ne
   beb7c:	2100      	movne	r1, #0
   beb7e:	2000      	movne	r0, #0
   beb80:	bd30      	popne	{r4, r5, pc}
   beb82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   beb86:	d105      	bne.n	beb94 <__adddf3+0x230>
   beb88:	0040      	lsls	r0, r0, #1
   beb8a:	4149      	adcs	r1, r1
   beb8c:	bf28      	it	cs
   beb8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   beb92:	bd30      	pop	{r4, r5, pc}
   beb94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   beb98:	bf3c      	itt	cc
   beb9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   beb9e:	bd30      	popcc	{r4, r5, pc}
   beba0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   beba4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   beba8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bebac:	f04f 0000 	mov.w	r0, #0
   bebb0:	bd30      	pop	{r4, r5, pc}
   bebb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bebb6:	bf1a      	itte	ne
   bebb8:	4619      	movne	r1, r3
   bebba:	4610      	movne	r0, r2
   bebbc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bebc0:	bf1c      	itt	ne
   bebc2:	460b      	movne	r3, r1
   bebc4:	4602      	movne	r2, r0
   bebc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bebca:	bf06      	itte	eq
   bebcc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bebd0:	ea91 0f03 	teqeq	r1, r3
   bebd4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bebd8:	bd30      	pop	{r4, r5, pc}
   bebda:	bf00      	nop

000bebdc <__aeabi_ui2d>:
   bebdc:	f090 0f00 	teq	r0, #0
   bebe0:	bf04      	itt	eq
   bebe2:	2100      	moveq	r1, #0
   bebe4:	4770      	bxeq	lr
   bebe6:	b530      	push	{r4, r5, lr}
   bebe8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bebec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bebf0:	f04f 0500 	mov.w	r5, #0
   bebf4:	f04f 0100 	mov.w	r1, #0
   bebf8:	e750      	b.n	bea9c <__adddf3+0x138>
   bebfa:	bf00      	nop

000bebfc <__aeabi_i2d>:
   bebfc:	f090 0f00 	teq	r0, #0
   bec00:	bf04      	itt	eq
   bec02:	2100      	moveq	r1, #0
   bec04:	4770      	bxeq	lr
   bec06:	b530      	push	{r4, r5, lr}
   bec08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bec0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bec10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bec14:	bf48      	it	mi
   bec16:	4240      	negmi	r0, r0
   bec18:	f04f 0100 	mov.w	r1, #0
   bec1c:	e73e      	b.n	bea9c <__adddf3+0x138>
   bec1e:	bf00      	nop

000bec20 <__aeabi_f2d>:
   bec20:	0042      	lsls	r2, r0, #1
   bec22:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bec26:	ea4f 0131 	mov.w	r1, r1, rrx
   bec2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bec2e:	bf1f      	itttt	ne
   bec30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bec34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bec38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bec3c:	4770      	bxne	lr
   bec3e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bec42:	bf08      	it	eq
   bec44:	4770      	bxeq	lr
   bec46:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bec4a:	bf04      	itt	eq
   bec4c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bec50:	4770      	bxeq	lr
   bec52:	b530      	push	{r4, r5, lr}
   bec54:	f44f 7460 	mov.w	r4, #896	; 0x380
   bec58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bec5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bec60:	e71c      	b.n	bea9c <__adddf3+0x138>
   bec62:	bf00      	nop

000bec64 <__aeabi_ul2d>:
   bec64:	ea50 0201 	orrs.w	r2, r0, r1
   bec68:	bf08      	it	eq
   bec6a:	4770      	bxeq	lr
   bec6c:	b530      	push	{r4, r5, lr}
   bec6e:	f04f 0500 	mov.w	r5, #0
   bec72:	e00a      	b.n	bec8a <__aeabi_l2d+0x16>

000bec74 <__aeabi_l2d>:
   bec74:	ea50 0201 	orrs.w	r2, r0, r1
   bec78:	bf08      	it	eq
   bec7a:	4770      	bxeq	lr
   bec7c:	b530      	push	{r4, r5, lr}
   bec7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bec82:	d502      	bpl.n	bec8a <__aeabi_l2d+0x16>
   bec84:	4240      	negs	r0, r0
   bec86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bec8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bec8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bec92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bec96:	f43f aed8 	beq.w	bea4a <__adddf3+0xe6>
   bec9a:	f04f 0203 	mov.w	r2, #3
   bec9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   beca2:	bf18      	it	ne
   beca4:	3203      	addne	r2, #3
   beca6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   becaa:	bf18      	it	ne
   becac:	3203      	addne	r2, #3
   becae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   becb2:	f1c2 0320 	rsb	r3, r2, #32
   becb6:	fa00 fc03 	lsl.w	ip, r0, r3
   becba:	fa20 f002 	lsr.w	r0, r0, r2
   becbe:	fa01 fe03 	lsl.w	lr, r1, r3
   becc2:	ea40 000e 	orr.w	r0, r0, lr
   becc6:	fa21 f102 	lsr.w	r1, r1, r2
   becca:	4414      	add	r4, r2
   beccc:	e6bd      	b.n	bea4a <__adddf3+0xe6>
   becce:	bf00      	nop

000becd0 <__aeabi_dmul>:
   becd0:	b570      	push	{r4, r5, r6, lr}
   becd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   becd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   becda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   becde:	bf1d      	ittte	ne
   bece0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bece4:	ea94 0f0c 	teqne	r4, ip
   bece8:	ea95 0f0c 	teqne	r5, ip
   becec:	f000 f8de 	bleq	beeac <__aeabi_dmul+0x1dc>
   becf0:	442c      	add	r4, r5
   becf2:	ea81 0603 	eor.w	r6, r1, r3
   becf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   becfa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   becfe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bed02:	bf18      	it	ne
   bed04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bed08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bed0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bed10:	d038      	beq.n	bed84 <__aeabi_dmul+0xb4>
   bed12:	fba0 ce02 	umull	ip, lr, r0, r2
   bed16:	f04f 0500 	mov.w	r5, #0
   bed1a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bed1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bed22:	fbe0 e503 	umlal	lr, r5, r0, r3
   bed26:	f04f 0600 	mov.w	r6, #0
   bed2a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bed2e:	f09c 0f00 	teq	ip, #0
   bed32:	bf18      	it	ne
   bed34:	f04e 0e01 	orrne.w	lr, lr, #1
   bed38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bed3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bed40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bed44:	d204      	bcs.n	bed50 <__aeabi_dmul+0x80>
   bed46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bed4a:	416d      	adcs	r5, r5
   bed4c:	eb46 0606 	adc.w	r6, r6, r6
   bed50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bed54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bed58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bed5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bed60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bed64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bed68:	bf88      	it	hi
   bed6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bed6e:	d81e      	bhi.n	bedae <__aeabi_dmul+0xde>
   bed70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bed74:	bf08      	it	eq
   bed76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bed7a:	f150 0000 	adcs.w	r0, r0, #0
   bed7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bed82:	bd70      	pop	{r4, r5, r6, pc}
   bed84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bed88:	ea46 0101 	orr.w	r1, r6, r1
   bed8c:	ea40 0002 	orr.w	r0, r0, r2
   bed90:	ea81 0103 	eor.w	r1, r1, r3
   bed94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bed98:	bfc2      	ittt	gt
   bed9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bed9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   beda2:	bd70      	popgt	{r4, r5, r6, pc}
   beda4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   beda8:	f04f 0e00 	mov.w	lr, #0
   bedac:	3c01      	subs	r4, #1
   bedae:	f300 80ab 	bgt.w	bef08 <__aeabi_dmul+0x238>
   bedb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bedb6:	bfde      	ittt	le
   bedb8:	2000      	movle	r0, #0
   bedba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bedbe:	bd70      	pople	{r4, r5, r6, pc}
   bedc0:	f1c4 0400 	rsb	r4, r4, #0
   bedc4:	3c20      	subs	r4, #32
   bedc6:	da35      	bge.n	bee34 <__aeabi_dmul+0x164>
   bedc8:	340c      	adds	r4, #12
   bedca:	dc1b      	bgt.n	bee04 <__aeabi_dmul+0x134>
   bedcc:	f104 0414 	add.w	r4, r4, #20
   bedd0:	f1c4 0520 	rsb	r5, r4, #32
   bedd4:	fa00 f305 	lsl.w	r3, r0, r5
   bedd8:	fa20 f004 	lsr.w	r0, r0, r4
   beddc:	fa01 f205 	lsl.w	r2, r1, r5
   bede0:	ea40 0002 	orr.w	r0, r0, r2
   bede4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bede8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bedec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bedf0:	fa21 f604 	lsr.w	r6, r1, r4
   bedf4:	eb42 0106 	adc.w	r1, r2, r6
   bedf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bedfc:	bf08      	it	eq
   bedfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bee02:	bd70      	pop	{r4, r5, r6, pc}
   bee04:	f1c4 040c 	rsb	r4, r4, #12
   bee08:	f1c4 0520 	rsb	r5, r4, #32
   bee0c:	fa00 f304 	lsl.w	r3, r0, r4
   bee10:	fa20 f005 	lsr.w	r0, r0, r5
   bee14:	fa01 f204 	lsl.w	r2, r1, r4
   bee18:	ea40 0002 	orr.w	r0, r0, r2
   bee1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bee20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bee24:	f141 0100 	adc.w	r1, r1, #0
   bee28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bee2c:	bf08      	it	eq
   bee2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bee32:	bd70      	pop	{r4, r5, r6, pc}
   bee34:	f1c4 0520 	rsb	r5, r4, #32
   bee38:	fa00 f205 	lsl.w	r2, r0, r5
   bee3c:	ea4e 0e02 	orr.w	lr, lr, r2
   bee40:	fa20 f304 	lsr.w	r3, r0, r4
   bee44:	fa01 f205 	lsl.w	r2, r1, r5
   bee48:	ea43 0302 	orr.w	r3, r3, r2
   bee4c:	fa21 f004 	lsr.w	r0, r1, r4
   bee50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bee54:	fa21 f204 	lsr.w	r2, r1, r4
   bee58:	ea20 0002 	bic.w	r0, r0, r2
   bee5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bee60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bee64:	bf08      	it	eq
   bee66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bee6a:	bd70      	pop	{r4, r5, r6, pc}
   bee6c:	f094 0f00 	teq	r4, #0
   bee70:	d10f      	bne.n	bee92 <__aeabi_dmul+0x1c2>
   bee72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bee76:	0040      	lsls	r0, r0, #1
   bee78:	eb41 0101 	adc.w	r1, r1, r1
   bee7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bee80:	bf08      	it	eq
   bee82:	3c01      	subeq	r4, #1
   bee84:	d0f7      	beq.n	bee76 <__aeabi_dmul+0x1a6>
   bee86:	ea41 0106 	orr.w	r1, r1, r6
   bee8a:	f095 0f00 	teq	r5, #0
   bee8e:	bf18      	it	ne
   bee90:	4770      	bxne	lr
   bee92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bee96:	0052      	lsls	r2, r2, #1
   bee98:	eb43 0303 	adc.w	r3, r3, r3
   bee9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   beea0:	bf08      	it	eq
   beea2:	3d01      	subeq	r5, #1
   beea4:	d0f7      	beq.n	bee96 <__aeabi_dmul+0x1c6>
   beea6:	ea43 0306 	orr.w	r3, r3, r6
   beeaa:	4770      	bx	lr
   beeac:	ea94 0f0c 	teq	r4, ip
   beeb0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   beeb4:	bf18      	it	ne
   beeb6:	ea95 0f0c 	teqne	r5, ip
   beeba:	d00c      	beq.n	beed6 <__aeabi_dmul+0x206>
   beebc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   beec0:	bf18      	it	ne
   beec2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   beec6:	d1d1      	bne.n	bee6c <__aeabi_dmul+0x19c>
   beec8:	ea81 0103 	eor.w	r1, r1, r3
   beecc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   beed0:	f04f 0000 	mov.w	r0, #0
   beed4:	bd70      	pop	{r4, r5, r6, pc}
   beed6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   beeda:	bf06      	itte	eq
   beedc:	4610      	moveq	r0, r2
   beede:	4619      	moveq	r1, r3
   beee0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   beee4:	d019      	beq.n	bef1a <__aeabi_dmul+0x24a>
   beee6:	ea94 0f0c 	teq	r4, ip
   beeea:	d102      	bne.n	beef2 <__aeabi_dmul+0x222>
   beeec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   beef0:	d113      	bne.n	bef1a <__aeabi_dmul+0x24a>
   beef2:	ea95 0f0c 	teq	r5, ip
   beef6:	d105      	bne.n	bef04 <__aeabi_dmul+0x234>
   beef8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   beefc:	bf1c      	itt	ne
   beefe:	4610      	movne	r0, r2
   bef00:	4619      	movne	r1, r3
   bef02:	d10a      	bne.n	bef1a <__aeabi_dmul+0x24a>
   bef04:	ea81 0103 	eor.w	r1, r1, r3
   bef08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bef0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bef10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bef14:	f04f 0000 	mov.w	r0, #0
   bef18:	bd70      	pop	{r4, r5, r6, pc}
   bef1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bef1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bef22:	bd70      	pop	{r4, r5, r6, pc}

000bef24 <__aeabi_ddiv>:
   bef24:	b570      	push	{r4, r5, r6, lr}
   bef26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bef2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bef2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bef32:	bf1d      	ittte	ne
   bef34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bef38:	ea94 0f0c 	teqne	r4, ip
   bef3c:	ea95 0f0c 	teqne	r5, ip
   bef40:	f000 f8a7 	bleq	bf092 <__aeabi_ddiv+0x16e>
   bef44:	eba4 0405 	sub.w	r4, r4, r5
   bef48:	ea81 0e03 	eor.w	lr, r1, r3
   bef4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bef50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bef54:	f000 8088 	beq.w	bf068 <__aeabi_ddiv+0x144>
   bef58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bef5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bef60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bef64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bef68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bef6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bef70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bef74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bef78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bef7c:	429d      	cmp	r5, r3
   bef7e:	bf08      	it	eq
   bef80:	4296      	cmpeq	r6, r2
   bef82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bef86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bef8a:	d202      	bcs.n	bef92 <__aeabi_ddiv+0x6e>
   bef8c:	085b      	lsrs	r3, r3, #1
   bef8e:	ea4f 0232 	mov.w	r2, r2, rrx
   bef92:	1ab6      	subs	r6, r6, r2
   bef94:	eb65 0503 	sbc.w	r5, r5, r3
   bef98:	085b      	lsrs	r3, r3, #1
   bef9a:	ea4f 0232 	mov.w	r2, r2, rrx
   bef9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   befa2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   befa6:	ebb6 0e02 	subs.w	lr, r6, r2
   befaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   befae:	bf22      	ittt	cs
   befb0:	1ab6      	subcs	r6, r6, r2
   befb2:	4675      	movcs	r5, lr
   befb4:	ea40 000c 	orrcs.w	r0, r0, ip
   befb8:	085b      	lsrs	r3, r3, #1
   befba:	ea4f 0232 	mov.w	r2, r2, rrx
   befbe:	ebb6 0e02 	subs.w	lr, r6, r2
   befc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   befc6:	bf22      	ittt	cs
   befc8:	1ab6      	subcs	r6, r6, r2
   befca:	4675      	movcs	r5, lr
   befcc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   befd0:	085b      	lsrs	r3, r3, #1
   befd2:	ea4f 0232 	mov.w	r2, r2, rrx
   befd6:	ebb6 0e02 	subs.w	lr, r6, r2
   befda:	eb75 0e03 	sbcs.w	lr, r5, r3
   befde:	bf22      	ittt	cs
   befe0:	1ab6      	subcs	r6, r6, r2
   befe2:	4675      	movcs	r5, lr
   befe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   befe8:	085b      	lsrs	r3, r3, #1
   befea:	ea4f 0232 	mov.w	r2, r2, rrx
   befee:	ebb6 0e02 	subs.w	lr, r6, r2
   beff2:	eb75 0e03 	sbcs.w	lr, r5, r3
   beff6:	bf22      	ittt	cs
   beff8:	1ab6      	subcs	r6, r6, r2
   beffa:	4675      	movcs	r5, lr
   beffc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bf000:	ea55 0e06 	orrs.w	lr, r5, r6
   bf004:	d018      	beq.n	bf038 <__aeabi_ddiv+0x114>
   bf006:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bf00a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bf00e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bf012:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bf016:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bf01a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bf01e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bf022:	d1c0      	bne.n	befa6 <__aeabi_ddiv+0x82>
   bf024:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bf028:	d10b      	bne.n	bf042 <__aeabi_ddiv+0x11e>
   bf02a:	ea41 0100 	orr.w	r1, r1, r0
   bf02e:	f04f 0000 	mov.w	r0, #0
   bf032:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bf036:	e7b6      	b.n	befa6 <__aeabi_ddiv+0x82>
   bf038:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bf03c:	bf04      	itt	eq
   bf03e:	4301      	orreq	r1, r0
   bf040:	2000      	moveq	r0, #0
   bf042:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bf046:	bf88      	it	hi
   bf048:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bf04c:	f63f aeaf 	bhi.w	bedae <__aeabi_dmul+0xde>
   bf050:	ebb5 0c03 	subs.w	ip, r5, r3
   bf054:	bf04      	itt	eq
   bf056:	ebb6 0c02 	subseq.w	ip, r6, r2
   bf05a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bf05e:	f150 0000 	adcs.w	r0, r0, #0
   bf062:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bf066:	bd70      	pop	{r4, r5, r6, pc}
   bf068:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bf06c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bf070:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bf074:	bfc2      	ittt	gt
   bf076:	ebd4 050c 	rsbsgt	r5, r4, ip
   bf07a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bf07e:	bd70      	popgt	{r4, r5, r6, pc}
   bf080:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bf084:	f04f 0e00 	mov.w	lr, #0
   bf088:	3c01      	subs	r4, #1
   bf08a:	e690      	b.n	bedae <__aeabi_dmul+0xde>
   bf08c:	ea45 0e06 	orr.w	lr, r5, r6
   bf090:	e68d      	b.n	bedae <__aeabi_dmul+0xde>
   bf092:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bf096:	ea94 0f0c 	teq	r4, ip
   bf09a:	bf08      	it	eq
   bf09c:	ea95 0f0c 	teqeq	r5, ip
   bf0a0:	f43f af3b 	beq.w	bef1a <__aeabi_dmul+0x24a>
   bf0a4:	ea94 0f0c 	teq	r4, ip
   bf0a8:	d10a      	bne.n	bf0c0 <__aeabi_ddiv+0x19c>
   bf0aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bf0ae:	f47f af34 	bne.w	bef1a <__aeabi_dmul+0x24a>
   bf0b2:	ea95 0f0c 	teq	r5, ip
   bf0b6:	f47f af25 	bne.w	bef04 <__aeabi_dmul+0x234>
   bf0ba:	4610      	mov	r0, r2
   bf0bc:	4619      	mov	r1, r3
   bf0be:	e72c      	b.n	bef1a <__aeabi_dmul+0x24a>
   bf0c0:	ea95 0f0c 	teq	r5, ip
   bf0c4:	d106      	bne.n	bf0d4 <__aeabi_ddiv+0x1b0>
   bf0c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bf0ca:	f43f aefd 	beq.w	beec8 <__aeabi_dmul+0x1f8>
   bf0ce:	4610      	mov	r0, r2
   bf0d0:	4619      	mov	r1, r3
   bf0d2:	e722      	b.n	bef1a <__aeabi_dmul+0x24a>
   bf0d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bf0d8:	bf18      	it	ne
   bf0da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bf0de:	f47f aec5 	bne.w	bee6c <__aeabi_dmul+0x19c>
   bf0e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bf0e6:	f47f af0d 	bne.w	bef04 <__aeabi_dmul+0x234>
   bf0ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bf0ee:	f47f aeeb 	bne.w	beec8 <__aeabi_dmul+0x1f8>
   bf0f2:	e712      	b.n	bef1a <__aeabi_dmul+0x24a>

000bf0f4 <__gedf2>:
   bf0f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf0f8:	e006      	b.n	bf108 <__cmpdf2+0x4>
   bf0fa:	bf00      	nop

000bf0fc <__ledf2>:
   bf0fc:	f04f 0c01 	mov.w	ip, #1
   bf100:	e002      	b.n	bf108 <__cmpdf2+0x4>
   bf102:	bf00      	nop

000bf104 <__cmpdf2>:
   bf104:	f04f 0c01 	mov.w	ip, #1
   bf108:	f84d cd04 	str.w	ip, [sp, #-4]!
   bf10c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf110:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf114:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf118:	bf18      	it	ne
   bf11a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bf11e:	d01b      	beq.n	bf158 <__cmpdf2+0x54>
   bf120:	b001      	add	sp, #4
   bf122:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bf126:	bf0c      	ite	eq
   bf128:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bf12c:	ea91 0f03 	teqne	r1, r3
   bf130:	bf02      	ittt	eq
   bf132:	ea90 0f02 	teqeq	r0, r2
   bf136:	2000      	moveq	r0, #0
   bf138:	4770      	bxeq	lr
   bf13a:	f110 0f00 	cmn.w	r0, #0
   bf13e:	ea91 0f03 	teq	r1, r3
   bf142:	bf58      	it	pl
   bf144:	4299      	cmppl	r1, r3
   bf146:	bf08      	it	eq
   bf148:	4290      	cmpeq	r0, r2
   bf14a:	bf2c      	ite	cs
   bf14c:	17d8      	asrcs	r0, r3, #31
   bf14e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bf152:	f040 0001 	orr.w	r0, r0, #1
   bf156:	4770      	bx	lr
   bf158:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf15c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf160:	d102      	bne.n	bf168 <__cmpdf2+0x64>
   bf162:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bf166:	d107      	bne.n	bf178 <__cmpdf2+0x74>
   bf168:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf16c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf170:	d1d6      	bne.n	bf120 <__cmpdf2+0x1c>
   bf172:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bf176:	d0d3      	beq.n	bf120 <__cmpdf2+0x1c>
   bf178:	f85d 0b04 	ldr.w	r0, [sp], #4
   bf17c:	4770      	bx	lr
   bf17e:	bf00      	nop

000bf180 <__aeabi_cdrcmple>:
   bf180:	4684      	mov	ip, r0
   bf182:	4610      	mov	r0, r2
   bf184:	4662      	mov	r2, ip
   bf186:	468c      	mov	ip, r1
   bf188:	4619      	mov	r1, r3
   bf18a:	4663      	mov	r3, ip
   bf18c:	e000      	b.n	bf190 <__aeabi_cdcmpeq>
   bf18e:	bf00      	nop

000bf190 <__aeabi_cdcmpeq>:
   bf190:	b501      	push	{r0, lr}
   bf192:	f7ff ffb7 	bl	bf104 <__cmpdf2>
   bf196:	2800      	cmp	r0, #0
   bf198:	bf48      	it	mi
   bf19a:	f110 0f00 	cmnmi.w	r0, #0
   bf19e:	bd01      	pop	{r0, pc}

000bf1a0 <__aeabi_dcmpeq>:
   bf1a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf1a4:	f7ff fff4 	bl	bf190 <__aeabi_cdcmpeq>
   bf1a8:	bf0c      	ite	eq
   bf1aa:	2001      	moveq	r0, #1
   bf1ac:	2000      	movne	r0, #0
   bf1ae:	f85d fb08 	ldr.w	pc, [sp], #8
   bf1b2:	bf00      	nop

000bf1b4 <__aeabi_dcmplt>:
   bf1b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf1b8:	f7ff ffea 	bl	bf190 <__aeabi_cdcmpeq>
   bf1bc:	bf34      	ite	cc
   bf1be:	2001      	movcc	r0, #1
   bf1c0:	2000      	movcs	r0, #0
   bf1c2:	f85d fb08 	ldr.w	pc, [sp], #8
   bf1c6:	bf00      	nop

000bf1c8 <__aeabi_dcmple>:
   bf1c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf1cc:	f7ff ffe0 	bl	bf190 <__aeabi_cdcmpeq>
   bf1d0:	bf94      	ite	ls
   bf1d2:	2001      	movls	r0, #1
   bf1d4:	2000      	movhi	r0, #0
   bf1d6:	f85d fb08 	ldr.w	pc, [sp], #8
   bf1da:	bf00      	nop

000bf1dc <__aeabi_dcmpge>:
   bf1dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf1e0:	f7ff ffce 	bl	bf180 <__aeabi_cdrcmple>
   bf1e4:	bf94      	ite	ls
   bf1e6:	2001      	movls	r0, #1
   bf1e8:	2000      	movhi	r0, #0
   bf1ea:	f85d fb08 	ldr.w	pc, [sp], #8
   bf1ee:	bf00      	nop

000bf1f0 <__aeabi_dcmpgt>:
   bf1f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf1f4:	f7ff ffc4 	bl	bf180 <__aeabi_cdrcmple>
   bf1f8:	bf34      	ite	cc
   bf1fa:	2001      	movcc	r0, #1
   bf1fc:	2000      	movcs	r0, #0
   bf1fe:	f85d fb08 	ldr.w	pc, [sp], #8
   bf202:	bf00      	nop

000bf204 <__aeabi_dcmpun>:
   bf204:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf20c:	d102      	bne.n	bf214 <__aeabi_dcmpun+0x10>
   bf20e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bf212:	d10a      	bne.n	bf22a <__aeabi_dcmpun+0x26>
   bf214:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf218:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf21c:	d102      	bne.n	bf224 <__aeabi_dcmpun+0x20>
   bf21e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bf222:	d102      	bne.n	bf22a <__aeabi_dcmpun+0x26>
   bf224:	f04f 0000 	mov.w	r0, #0
   bf228:	4770      	bx	lr
   bf22a:	f04f 0001 	mov.w	r0, #1
   bf22e:	4770      	bx	lr

000bf230 <__aeabi_d2iz>:
   bf230:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bf234:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bf238:	d215      	bcs.n	bf266 <__aeabi_d2iz+0x36>
   bf23a:	d511      	bpl.n	bf260 <__aeabi_d2iz+0x30>
   bf23c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bf240:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bf244:	d912      	bls.n	bf26c <__aeabi_d2iz+0x3c>
   bf246:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bf24a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bf24e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bf252:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bf256:	fa23 f002 	lsr.w	r0, r3, r2
   bf25a:	bf18      	it	ne
   bf25c:	4240      	negne	r0, r0
   bf25e:	4770      	bx	lr
   bf260:	f04f 0000 	mov.w	r0, #0
   bf264:	4770      	bx	lr
   bf266:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bf26a:	d105      	bne.n	bf278 <__aeabi_d2iz+0x48>
   bf26c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bf270:	bf08      	it	eq
   bf272:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bf276:	4770      	bx	lr
   bf278:	f04f 0000 	mov.w	r0, #0
   bf27c:	4770      	bx	lr
   bf27e:	bf00      	nop

000bf280 <__aeabi_d2uiz>:
   bf280:	004a      	lsls	r2, r1, #1
   bf282:	d211      	bcs.n	bf2a8 <__aeabi_d2uiz+0x28>
   bf284:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bf288:	d211      	bcs.n	bf2ae <__aeabi_d2uiz+0x2e>
   bf28a:	d50d      	bpl.n	bf2a8 <__aeabi_d2uiz+0x28>
   bf28c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bf290:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bf294:	d40e      	bmi.n	bf2b4 <__aeabi_d2uiz+0x34>
   bf296:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bf29a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bf29e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bf2a2:	fa23 f002 	lsr.w	r0, r3, r2
   bf2a6:	4770      	bx	lr
   bf2a8:	f04f 0000 	mov.w	r0, #0
   bf2ac:	4770      	bx	lr
   bf2ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bf2b2:	d102      	bne.n	bf2ba <__aeabi_d2uiz+0x3a>
   bf2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf2b8:	4770      	bx	lr
   bf2ba:	f04f 0000 	mov.w	r0, #0
   bf2be:	4770      	bx	lr

000bf2c0 <asctime_r>:
   bf2c0:	b510      	push	{r4, lr}
   bf2c2:	460c      	mov	r4, r1
   bf2c4:	6941      	ldr	r1, [r0, #20]
   bf2c6:	6903      	ldr	r3, [r0, #16]
   bf2c8:	6982      	ldr	r2, [r0, #24]
   bf2ca:	b086      	sub	sp, #24
   bf2cc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bf2d0:	9104      	str	r1, [sp, #16]
   bf2d2:	6801      	ldr	r1, [r0, #0]
   bf2d4:	9103      	str	r1, [sp, #12]
   bf2d6:	6841      	ldr	r1, [r0, #4]
   bf2d8:	9102      	str	r1, [sp, #8]
   bf2da:	6881      	ldr	r1, [r0, #8]
   bf2dc:	9101      	str	r1, [sp, #4]
   bf2de:	68c1      	ldr	r1, [r0, #12]
   bf2e0:	9100      	str	r1, [sp, #0]
   bf2e2:	4907      	ldr	r1, [pc, #28]	; (bf300 <asctime_r+0x40>)
   bf2e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bf2e8:	440b      	add	r3, r1
   bf2ea:	4906      	ldr	r1, [pc, #24]	; (bf304 <asctime_r+0x44>)
   bf2ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bf2f0:	440a      	add	r2, r1
   bf2f2:	4620      	mov	r0, r4
   bf2f4:	4904      	ldr	r1, [pc, #16]	; (bf308 <asctime_r+0x48>)
   bf2f6:	f7fc f927 	bl	bb548 <siprintf>
   bf2fa:	4620      	mov	r0, r4
   bf2fc:	b006      	add	sp, #24
   bf2fe:	bd10      	pop	{r4, pc}
   bf300:	000c1262 	.word	0x000c1262
   bf304:	000c124d 	.word	0x000c124d
   bf308:	000c122d 	.word	0x000c122d

000bf30c <atexit>:
   bf30c:	2300      	movs	r3, #0
   bf30e:	4601      	mov	r1, r0
   bf310:	461a      	mov	r2, r3
   bf312:	4618      	mov	r0, r3
   bf314:	f000 ba70 	b.w	bf7f8 <__register_exitproc>

000bf318 <gmtime>:
   bf318:	b538      	push	{r3, r4, r5, lr}
   bf31a:	4b0b      	ldr	r3, [pc, #44]	; (bf348 <gmtime+0x30>)
   bf31c:	681d      	ldr	r5, [r3, #0]
   bf31e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bf320:	4604      	mov	r4, r0
   bf322:	b953      	cbnz	r3, bf33a <gmtime+0x22>
   bf324:	2024      	movs	r0, #36	; 0x24
   bf326:	f7fc f8f7 	bl	bb518 <malloc>
   bf32a:	4602      	mov	r2, r0
   bf32c:	63e8      	str	r0, [r5, #60]	; 0x3c
   bf32e:	b920      	cbnz	r0, bf33a <gmtime+0x22>
   bf330:	4b06      	ldr	r3, [pc, #24]	; (bf34c <gmtime+0x34>)
   bf332:	4807      	ldr	r0, [pc, #28]	; (bf350 <gmtime+0x38>)
   bf334:	2139      	movs	r1, #57	; 0x39
   bf336:	f7fc f93f 	bl	bb5b8 <__assert_func>
   bf33a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bf33c:	4620      	mov	r0, r4
   bf33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf342:	f7fc b959 	b.w	bb5f8 <gmtime_r>
   bf346:	bf00      	nop
   bf348:	2003de84 	.word	0x2003de84
   bf34c:	000c1286 	.word	0x000c1286
   bf350:	000c129d 	.word	0x000c129d

000bf354 <isprint>:
   bf354:	4b02      	ldr	r3, [pc, #8]	; (bf360 <isprint+0xc>)
   bf356:	4418      	add	r0, r3
   bf358:	7840      	ldrb	r0, [r0, #1]
   bf35a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bf35e:	4770      	bx	lr
   bf360:	000c134f 	.word	0x000c134f

000bf364 <memcpy>:
   bf364:	440a      	add	r2, r1
   bf366:	4291      	cmp	r1, r2
   bf368:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bf36c:	d100      	bne.n	bf370 <memcpy+0xc>
   bf36e:	4770      	bx	lr
   bf370:	b510      	push	{r4, lr}
   bf372:	f811 4b01 	ldrb.w	r4, [r1], #1
   bf376:	f803 4f01 	strb.w	r4, [r3, #1]!
   bf37a:	4291      	cmp	r1, r2
   bf37c:	d1f9      	bne.n	bf372 <memcpy+0xe>
   bf37e:	bd10      	pop	{r4, pc}

000bf380 <memmove>:
   bf380:	4288      	cmp	r0, r1
   bf382:	b510      	push	{r4, lr}
   bf384:	eb01 0402 	add.w	r4, r1, r2
   bf388:	d902      	bls.n	bf390 <memmove+0x10>
   bf38a:	4284      	cmp	r4, r0
   bf38c:	4623      	mov	r3, r4
   bf38e:	d807      	bhi.n	bf3a0 <memmove+0x20>
   bf390:	1e43      	subs	r3, r0, #1
   bf392:	42a1      	cmp	r1, r4
   bf394:	d008      	beq.n	bf3a8 <memmove+0x28>
   bf396:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf39a:	f803 2f01 	strb.w	r2, [r3, #1]!
   bf39e:	e7f8      	b.n	bf392 <memmove+0x12>
   bf3a0:	4402      	add	r2, r0
   bf3a2:	4601      	mov	r1, r0
   bf3a4:	428a      	cmp	r2, r1
   bf3a6:	d100      	bne.n	bf3aa <memmove+0x2a>
   bf3a8:	bd10      	pop	{r4, pc}
   bf3aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bf3ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bf3b2:	e7f7      	b.n	bf3a4 <memmove+0x24>

000bf3b4 <memset>:
   bf3b4:	4402      	add	r2, r0
   bf3b6:	4603      	mov	r3, r0
   bf3b8:	4293      	cmp	r3, r2
   bf3ba:	d100      	bne.n	bf3be <memset+0xa>
   bf3bc:	4770      	bx	lr
   bf3be:	f803 1b01 	strb.w	r1, [r3], #1
   bf3c2:	e7f9      	b.n	bf3b8 <memset+0x4>

000bf3c4 <srand>:
   bf3c4:	b538      	push	{r3, r4, r5, lr}
   bf3c6:	4b10      	ldr	r3, [pc, #64]	; (bf408 <srand+0x44>)
   bf3c8:	681d      	ldr	r5, [r3, #0]
   bf3ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bf3cc:	4604      	mov	r4, r0
   bf3ce:	b9b3      	cbnz	r3, bf3fe <srand+0x3a>
   bf3d0:	2018      	movs	r0, #24
   bf3d2:	f7fc f8a1 	bl	bb518 <malloc>
   bf3d6:	4602      	mov	r2, r0
   bf3d8:	63a8      	str	r0, [r5, #56]	; 0x38
   bf3da:	b920      	cbnz	r0, bf3e6 <srand+0x22>
   bf3dc:	4b0b      	ldr	r3, [pc, #44]	; (bf40c <srand+0x48>)
   bf3de:	480c      	ldr	r0, [pc, #48]	; (bf410 <srand+0x4c>)
   bf3e0:	2142      	movs	r1, #66	; 0x42
   bf3e2:	f7fc f8e9 	bl	bb5b8 <__assert_func>
   bf3e6:	490b      	ldr	r1, [pc, #44]	; (bf414 <srand+0x50>)
   bf3e8:	4b0b      	ldr	r3, [pc, #44]	; (bf418 <srand+0x54>)
   bf3ea:	e9c0 1300 	strd	r1, r3, [r0]
   bf3ee:	4b0b      	ldr	r3, [pc, #44]	; (bf41c <srand+0x58>)
   bf3f0:	6083      	str	r3, [r0, #8]
   bf3f2:	230b      	movs	r3, #11
   bf3f4:	8183      	strh	r3, [r0, #12]
   bf3f6:	2100      	movs	r1, #0
   bf3f8:	2001      	movs	r0, #1
   bf3fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bf3fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bf400:	2200      	movs	r2, #0
   bf402:	611c      	str	r4, [r3, #16]
   bf404:	615a      	str	r2, [r3, #20]
   bf406:	bd38      	pop	{r3, r4, r5, pc}
   bf408:	2003de84 	.word	0x2003de84
   bf40c:	000c1286 	.word	0x000c1286
   bf410:	000c12f6 	.word	0x000c12f6
   bf414:	abcd330e 	.word	0xabcd330e
   bf418:	e66d1234 	.word	0xe66d1234
   bf41c:	0005deec 	.word	0x0005deec

000bf420 <rand>:
   bf420:	4b16      	ldr	r3, [pc, #88]	; (bf47c <rand+0x5c>)
   bf422:	b510      	push	{r4, lr}
   bf424:	681c      	ldr	r4, [r3, #0]
   bf426:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bf428:	b9b3      	cbnz	r3, bf458 <rand+0x38>
   bf42a:	2018      	movs	r0, #24
   bf42c:	f7fc f874 	bl	bb518 <malloc>
   bf430:	63a0      	str	r0, [r4, #56]	; 0x38
   bf432:	b928      	cbnz	r0, bf440 <rand+0x20>
   bf434:	4602      	mov	r2, r0
   bf436:	4b12      	ldr	r3, [pc, #72]	; (bf480 <rand+0x60>)
   bf438:	4812      	ldr	r0, [pc, #72]	; (bf484 <rand+0x64>)
   bf43a:	214e      	movs	r1, #78	; 0x4e
   bf43c:	f7fc f8bc 	bl	bb5b8 <__assert_func>
   bf440:	4a11      	ldr	r2, [pc, #68]	; (bf488 <rand+0x68>)
   bf442:	4b12      	ldr	r3, [pc, #72]	; (bf48c <rand+0x6c>)
   bf444:	e9c0 2300 	strd	r2, r3, [r0]
   bf448:	4b11      	ldr	r3, [pc, #68]	; (bf490 <rand+0x70>)
   bf44a:	6083      	str	r3, [r0, #8]
   bf44c:	230b      	movs	r3, #11
   bf44e:	8183      	strh	r3, [r0, #12]
   bf450:	2201      	movs	r2, #1
   bf452:	2300      	movs	r3, #0
   bf454:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bf458:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bf45a:	4a0e      	ldr	r2, [pc, #56]	; (bf494 <rand+0x74>)
   bf45c:	6920      	ldr	r0, [r4, #16]
   bf45e:	6963      	ldr	r3, [r4, #20]
   bf460:	490d      	ldr	r1, [pc, #52]	; (bf498 <rand+0x78>)
   bf462:	4342      	muls	r2, r0
   bf464:	fb01 2203 	mla	r2, r1, r3, r2
   bf468:	fba0 0101 	umull	r0, r1, r0, r1
   bf46c:	1c43      	adds	r3, r0, #1
   bf46e:	eb42 0001 	adc.w	r0, r2, r1
   bf472:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bf476:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bf47a:	bd10      	pop	{r4, pc}
   bf47c:	2003de84 	.word	0x2003de84
   bf480:	000c1286 	.word	0x000c1286
   bf484:	000c12f6 	.word	0x000c12f6
   bf488:	abcd330e 	.word	0xabcd330e
   bf48c:	e66d1234 	.word	0xe66d1234
   bf490:	0005deec 	.word	0x0005deec
   bf494:	5851f42d 	.word	0x5851f42d
   bf498:	4c957f2d 	.word	0x4c957f2d

000bf49c <strchr>:
   bf49c:	b2c9      	uxtb	r1, r1
   bf49e:	4603      	mov	r3, r0
   bf4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   bf4a4:	b11a      	cbz	r2, bf4ae <strchr+0x12>
   bf4a6:	428a      	cmp	r2, r1
   bf4a8:	d1f9      	bne.n	bf49e <strchr+0x2>
   bf4aa:	4618      	mov	r0, r3
   bf4ac:	4770      	bx	lr
   bf4ae:	2900      	cmp	r1, #0
   bf4b0:	bf18      	it	ne
   bf4b2:	2300      	movne	r3, #0
   bf4b4:	e7f9      	b.n	bf4aa <strchr+0xe>

000bf4b6 <strchrnul>:
   bf4b6:	b510      	push	{r4, lr}
   bf4b8:	4604      	mov	r4, r0
   bf4ba:	f7ff ffef 	bl	bf49c <strchr>
   bf4be:	b918      	cbnz	r0, bf4c8 <strchrnul+0x12>
   bf4c0:	4620      	mov	r0, r4
   bf4c2:	f000 f832 	bl	bf52a <strlen>
   bf4c6:	4420      	add	r0, r4
   bf4c8:	bd10      	pop	{r4, pc}

000bf4ca <strcmp>:
   bf4ca:	f810 2b01 	ldrb.w	r2, [r0], #1
   bf4ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   bf4d2:	2a01      	cmp	r2, #1
   bf4d4:	bf28      	it	cs
   bf4d6:	429a      	cmpcs	r2, r3
   bf4d8:	d0f7      	beq.n	bf4ca <strcmp>
   bf4da:	1ad0      	subs	r0, r2, r3
   bf4dc:	4770      	bx	lr

000bf4de <strcpy>:
   bf4de:	4603      	mov	r3, r0
   bf4e0:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf4e4:	f803 2b01 	strb.w	r2, [r3], #1
   bf4e8:	2a00      	cmp	r2, #0
   bf4ea:	d1f9      	bne.n	bf4e0 <strcpy+0x2>
   bf4ec:	4770      	bx	lr
	...

000bf4f0 <strdup>:
   bf4f0:	4b02      	ldr	r3, [pc, #8]	; (bf4fc <strdup+0xc>)
   bf4f2:	4601      	mov	r1, r0
   bf4f4:	6818      	ldr	r0, [r3, #0]
   bf4f6:	f000 b803 	b.w	bf500 <_strdup_r>
   bf4fa:	bf00      	nop
   bf4fc:	2003de84 	.word	0x2003de84

000bf500 <_strdup_r>:
   bf500:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf502:	4604      	mov	r4, r0
   bf504:	4608      	mov	r0, r1
   bf506:	460d      	mov	r5, r1
   bf508:	f000 f80f 	bl	bf52a <strlen>
   bf50c:	1c42      	adds	r2, r0, #1
   bf50e:	4611      	mov	r1, r2
   bf510:	4620      	mov	r0, r4
   bf512:	9201      	str	r2, [sp, #4]
   bf514:	f7fc f840 	bl	bb598 <_malloc_r>
   bf518:	4604      	mov	r4, r0
   bf51a:	b118      	cbz	r0, bf524 <_strdup_r+0x24>
   bf51c:	9a01      	ldr	r2, [sp, #4]
   bf51e:	4629      	mov	r1, r5
   bf520:	f7ff ff20 	bl	bf364 <memcpy>
   bf524:	4620      	mov	r0, r4
   bf526:	b003      	add	sp, #12
   bf528:	bd30      	pop	{r4, r5, pc}

000bf52a <strlen>:
   bf52a:	4603      	mov	r3, r0
   bf52c:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf530:	2a00      	cmp	r2, #0
   bf532:	d1fb      	bne.n	bf52c <strlen+0x2>
   bf534:	1a18      	subs	r0, r3, r0
   bf536:	3801      	subs	r0, #1
   bf538:	4770      	bx	lr

000bf53a <strncmp>:
   bf53a:	b510      	push	{r4, lr}
   bf53c:	b17a      	cbz	r2, bf55e <strncmp+0x24>
   bf53e:	4603      	mov	r3, r0
   bf540:	3901      	subs	r1, #1
   bf542:	1884      	adds	r4, r0, r2
   bf544:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf548:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bf54c:	4290      	cmp	r0, r2
   bf54e:	d101      	bne.n	bf554 <strncmp+0x1a>
   bf550:	42a3      	cmp	r3, r4
   bf552:	d101      	bne.n	bf558 <strncmp+0x1e>
   bf554:	1a80      	subs	r0, r0, r2
   bf556:	bd10      	pop	{r4, pc}
   bf558:	2800      	cmp	r0, #0
   bf55a:	d1f3      	bne.n	bf544 <strncmp+0xa>
   bf55c:	e7fa      	b.n	bf554 <strncmp+0x1a>
   bf55e:	4610      	mov	r0, r2
   bf560:	e7f9      	b.n	bf556 <strncmp+0x1c>

000bf562 <strncpy>:
   bf562:	b510      	push	{r4, lr}
   bf564:	3901      	subs	r1, #1
   bf566:	4603      	mov	r3, r0
   bf568:	b132      	cbz	r2, bf578 <strncpy+0x16>
   bf56a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bf56e:	f803 4b01 	strb.w	r4, [r3], #1
   bf572:	3a01      	subs	r2, #1
   bf574:	2c00      	cmp	r4, #0
   bf576:	d1f7      	bne.n	bf568 <strncpy+0x6>
   bf578:	441a      	add	r2, r3
   bf57a:	2100      	movs	r1, #0
   bf57c:	4293      	cmp	r3, r2
   bf57e:	d100      	bne.n	bf582 <strncpy+0x20>
   bf580:	bd10      	pop	{r4, pc}
   bf582:	f803 1b01 	strb.w	r1, [r3], #1
   bf586:	e7f9      	b.n	bf57c <strncpy+0x1a>

000bf588 <strrchr>:
   bf588:	b538      	push	{r3, r4, r5, lr}
   bf58a:	4603      	mov	r3, r0
   bf58c:	460c      	mov	r4, r1
   bf58e:	b969      	cbnz	r1, bf5ac <strrchr+0x24>
   bf590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf594:	f7ff bf82 	b.w	bf49c <strchr>
   bf598:	1c43      	adds	r3, r0, #1
   bf59a:	4605      	mov	r5, r0
   bf59c:	4621      	mov	r1, r4
   bf59e:	4618      	mov	r0, r3
   bf5a0:	f7ff ff7c 	bl	bf49c <strchr>
   bf5a4:	2800      	cmp	r0, #0
   bf5a6:	d1f7      	bne.n	bf598 <strrchr+0x10>
   bf5a8:	4628      	mov	r0, r5
   bf5aa:	bd38      	pop	{r3, r4, r5, pc}
   bf5ac:	2500      	movs	r5, #0
   bf5ae:	e7f5      	b.n	bf59c <strrchr+0x14>

000bf5b0 <__strtok_r>:
   bf5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf5b2:	b908      	cbnz	r0, bf5b8 <__strtok_r+0x8>
   bf5b4:	6810      	ldr	r0, [r2, #0]
   bf5b6:	b188      	cbz	r0, bf5dc <__strtok_r+0x2c>
   bf5b8:	4604      	mov	r4, r0
   bf5ba:	4620      	mov	r0, r4
   bf5bc:	f814 5b01 	ldrb.w	r5, [r4], #1
   bf5c0:	460f      	mov	r7, r1
   bf5c2:	f817 6b01 	ldrb.w	r6, [r7], #1
   bf5c6:	b91e      	cbnz	r6, bf5d0 <__strtok_r+0x20>
   bf5c8:	b965      	cbnz	r5, bf5e4 <__strtok_r+0x34>
   bf5ca:	6015      	str	r5, [r2, #0]
   bf5cc:	4628      	mov	r0, r5
   bf5ce:	e005      	b.n	bf5dc <__strtok_r+0x2c>
   bf5d0:	42b5      	cmp	r5, r6
   bf5d2:	d1f6      	bne.n	bf5c2 <__strtok_r+0x12>
   bf5d4:	2b00      	cmp	r3, #0
   bf5d6:	d1f0      	bne.n	bf5ba <__strtok_r+0xa>
   bf5d8:	6014      	str	r4, [r2, #0]
   bf5da:	7003      	strb	r3, [r0, #0]
   bf5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf5de:	461c      	mov	r4, r3
   bf5e0:	e00c      	b.n	bf5fc <__strtok_r+0x4c>
   bf5e2:	b915      	cbnz	r5, bf5ea <__strtok_r+0x3a>
   bf5e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bf5e8:	460e      	mov	r6, r1
   bf5ea:	f816 5b01 	ldrb.w	r5, [r6], #1
   bf5ee:	42ab      	cmp	r3, r5
   bf5f0:	d1f7      	bne.n	bf5e2 <__strtok_r+0x32>
   bf5f2:	2b00      	cmp	r3, #0
   bf5f4:	d0f3      	beq.n	bf5de <__strtok_r+0x2e>
   bf5f6:	2300      	movs	r3, #0
   bf5f8:	f804 3c01 	strb.w	r3, [r4, #-1]
   bf5fc:	6014      	str	r4, [r2, #0]
   bf5fe:	e7ed      	b.n	bf5dc <__strtok_r+0x2c>

000bf600 <strtok_r>:
   bf600:	2301      	movs	r3, #1
   bf602:	f7ff bfd5 	b.w	bf5b0 <__strtok_r>
	...

000bf608 <_strtol_l.constprop.0>:
   bf608:	2b01      	cmp	r3, #1
   bf60a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf60e:	d001      	beq.n	bf614 <_strtol_l.constprop.0+0xc>
   bf610:	2b24      	cmp	r3, #36	; 0x24
   bf612:	d906      	bls.n	bf622 <_strtol_l.constprop.0+0x1a>
   bf614:	f7fb ffc8 	bl	bb5a8 <__errno>
   bf618:	2316      	movs	r3, #22
   bf61a:	6003      	str	r3, [r0, #0]
   bf61c:	2000      	movs	r0, #0
   bf61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf622:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bf708 <_strtol_l.constprop.0+0x100>
   bf626:	460d      	mov	r5, r1
   bf628:	462e      	mov	r6, r5
   bf62a:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf62e:	f814 700c 	ldrb.w	r7, [r4, ip]
   bf632:	f017 0708 	ands.w	r7, r7, #8
   bf636:	d1f7      	bne.n	bf628 <_strtol_l.constprop.0+0x20>
   bf638:	2c2d      	cmp	r4, #45	; 0x2d
   bf63a:	d132      	bne.n	bf6a2 <_strtol_l.constprop.0+0x9a>
   bf63c:	782c      	ldrb	r4, [r5, #0]
   bf63e:	2701      	movs	r7, #1
   bf640:	1cb5      	adds	r5, r6, #2
   bf642:	2b00      	cmp	r3, #0
   bf644:	d05b      	beq.n	bf6fe <_strtol_l.constprop.0+0xf6>
   bf646:	2b10      	cmp	r3, #16
   bf648:	d109      	bne.n	bf65e <_strtol_l.constprop.0+0x56>
   bf64a:	2c30      	cmp	r4, #48	; 0x30
   bf64c:	d107      	bne.n	bf65e <_strtol_l.constprop.0+0x56>
   bf64e:	782c      	ldrb	r4, [r5, #0]
   bf650:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bf654:	2c58      	cmp	r4, #88	; 0x58
   bf656:	d14d      	bne.n	bf6f4 <_strtol_l.constprop.0+0xec>
   bf658:	786c      	ldrb	r4, [r5, #1]
   bf65a:	2310      	movs	r3, #16
   bf65c:	3502      	adds	r5, #2
   bf65e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bf662:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf666:	f04f 0c00 	mov.w	ip, #0
   bf66a:	fbb8 f9f3 	udiv	r9, r8, r3
   bf66e:	4666      	mov	r6, ip
   bf670:	fb03 8a19 	mls	sl, r3, r9, r8
   bf674:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bf678:	f1be 0f09 	cmp.w	lr, #9
   bf67c:	d816      	bhi.n	bf6ac <_strtol_l.constprop.0+0xa4>
   bf67e:	4674      	mov	r4, lr
   bf680:	42a3      	cmp	r3, r4
   bf682:	dd24      	ble.n	bf6ce <_strtol_l.constprop.0+0xc6>
   bf684:	f1bc 0f00 	cmp.w	ip, #0
   bf688:	db1e      	blt.n	bf6c8 <_strtol_l.constprop.0+0xc0>
   bf68a:	45b1      	cmp	r9, r6
   bf68c:	d31c      	bcc.n	bf6c8 <_strtol_l.constprop.0+0xc0>
   bf68e:	d101      	bne.n	bf694 <_strtol_l.constprop.0+0x8c>
   bf690:	45a2      	cmp	sl, r4
   bf692:	db19      	blt.n	bf6c8 <_strtol_l.constprop.0+0xc0>
   bf694:	fb06 4603 	mla	r6, r6, r3, r4
   bf698:	f04f 0c01 	mov.w	ip, #1
   bf69c:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf6a0:	e7e8      	b.n	bf674 <_strtol_l.constprop.0+0x6c>
   bf6a2:	2c2b      	cmp	r4, #43	; 0x2b
   bf6a4:	bf04      	itt	eq
   bf6a6:	782c      	ldrbeq	r4, [r5, #0]
   bf6a8:	1cb5      	addeq	r5, r6, #2
   bf6aa:	e7ca      	b.n	bf642 <_strtol_l.constprop.0+0x3a>
   bf6ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bf6b0:	f1be 0f19 	cmp.w	lr, #25
   bf6b4:	d801      	bhi.n	bf6ba <_strtol_l.constprop.0+0xb2>
   bf6b6:	3c37      	subs	r4, #55	; 0x37
   bf6b8:	e7e2      	b.n	bf680 <_strtol_l.constprop.0+0x78>
   bf6ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bf6be:	f1be 0f19 	cmp.w	lr, #25
   bf6c2:	d804      	bhi.n	bf6ce <_strtol_l.constprop.0+0xc6>
   bf6c4:	3c57      	subs	r4, #87	; 0x57
   bf6c6:	e7db      	b.n	bf680 <_strtol_l.constprop.0+0x78>
   bf6c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf6cc:	e7e6      	b.n	bf69c <_strtol_l.constprop.0+0x94>
   bf6ce:	f1bc 0f00 	cmp.w	ip, #0
   bf6d2:	da05      	bge.n	bf6e0 <_strtol_l.constprop.0+0xd8>
   bf6d4:	2322      	movs	r3, #34	; 0x22
   bf6d6:	6003      	str	r3, [r0, #0]
   bf6d8:	4646      	mov	r6, r8
   bf6da:	b942      	cbnz	r2, bf6ee <_strtol_l.constprop.0+0xe6>
   bf6dc:	4630      	mov	r0, r6
   bf6de:	e79e      	b.n	bf61e <_strtol_l.constprop.0+0x16>
   bf6e0:	b107      	cbz	r7, bf6e4 <_strtol_l.constprop.0+0xdc>
   bf6e2:	4276      	negs	r6, r6
   bf6e4:	2a00      	cmp	r2, #0
   bf6e6:	d0f9      	beq.n	bf6dc <_strtol_l.constprop.0+0xd4>
   bf6e8:	f1bc 0f00 	cmp.w	ip, #0
   bf6ec:	d000      	beq.n	bf6f0 <_strtol_l.constprop.0+0xe8>
   bf6ee:	1e69      	subs	r1, r5, #1
   bf6f0:	6011      	str	r1, [r2, #0]
   bf6f2:	e7f3      	b.n	bf6dc <_strtol_l.constprop.0+0xd4>
   bf6f4:	2430      	movs	r4, #48	; 0x30
   bf6f6:	2b00      	cmp	r3, #0
   bf6f8:	d1b1      	bne.n	bf65e <_strtol_l.constprop.0+0x56>
   bf6fa:	2308      	movs	r3, #8
   bf6fc:	e7af      	b.n	bf65e <_strtol_l.constprop.0+0x56>
   bf6fe:	2c30      	cmp	r4, #48	; 0x30
   bf700:	d0a5      	beq.n	bf64e <_strtol_l.constprop.0+0x46>
   bf702:	230a      	movs	r3, #10
   bf704:	e7ab      	b.n	bf65e <_strtol_l.constprop.0+0x56>
   bf706:	bf00      	nop
   bf708:	000c1350 	.word	0x000c1350

000bf70c <strtol>:
   bf70c:	4613      	mov	r3, r2
   bf70e:	460a      	mov	r2, r1
   bf710:	4601      	mov	r1, r0
   bf712:	4802      	ldr	r0, [pc, #8]	; (bf71c <strtol+0x10>)
   bf714:	6800      	ldr	r0, [r0, #0]
   bf716:	f7ff bf77 	b.w	bf608 <_strtol_l.constprop.0>
   bf71a:	bf00      	nop
   bf71c:	2003de84 	.word	0x2003de84

000bf720 <close>:
   bf720:	4b02      	ldr	r3, [pc, #8]	; (bf72c <close+0xc>)
   bf722:	4601      	mov	r1, r0
   bf724:	6818      	ldr	r0, [r3, #0]
   bf726:	f000 b8c9 	b.w	bf8bc <_close_r>
   bf72a:	bf00      	nop
   bf72c:	2003de84 	.word	0x2003de84

000bf730 <fstat>:
   bf730:	4b02      	ldr	r3, [pc, #8]	; (bf73c <fstat+0xc>)
   bf732:	460a      	mov	r2, r1
   bf734:	4601      	mov	r1, r0
   bf736:	6818      	ldr	r0, [r3, #0]
   bf738:	f000 b8d0 	b.w	bf8dc <_fstat_r>
   bf73c:	2003de84 	.word	0x2003de84

000bf740 <lseek>:
   bf740:	4613      	mov	r3, r2
   bf742:	460a      	mov	r2, r1
   bf744:	4601      	mov	r1, r0
   bf746:	4802      	ldr	r0, [pc, #8]	; (bf750 <lseek+0x10>)
   bf748:	6800      	ldr	r0, [r0, #0]
   bf74a:	f000 b8dd 	b.w	bf908 <_lseek_r>
   bf74e:	bf00      	nop
   bf750:	2003de84 	.word	0x2003de84

000bf754 <open>:
   bf754:	b40e      	push	{r1, r2, r3}
   bf756:	b503      	push	{r0, r1, lr}
   bf758:	ab03      	add	r3, sp, #12
   bf75a:	4601      	mov	r1, r0
   bf75c:	4806      	ldr	r0, [pc, #24]	; (bf778 <open+0x24>)
   bf75e:	f853 2b04 	ldr.w	r2, [r3], #4
   bf762:	9301      	str	r3, [sp, #4]
   bf764:	6800      	ldr	r0, [r0, #0]
   bf766:	9b04      	ldr	r3, [sp, #16]
   bf768:	f000 f8e0 	bl	bf92c <_open_r>
   bf76c:	b002      	add	sp, #8
   bf76e:	f85d eb04 	ldr.w	lr, [sp], #4
   bf772:	b003      	add	sp, #12
   bf774:	4770      	bx	lr
   bf776:	bf00      	nop
   bf778:	2003de84 	.word	0x2003de84

000bf77c <read>:
   bf77c:	4613      	mov	r3, r2
   bf77e:	460a      	mov	r2, r1
   bf780:	4601      	mov	r1, r0
   bf782:	4802      	ldr	r0, [pc, #8]	; (bf78c <read+0x10>)
   bf784:	6800      	ldr	r0, [r0, #0]
   bf786:	f000 b8e3 	b.w	bf950 <_read_r>
   bf78a:	bf00      	nop
   bf78c:	2003de84 	.word	0x2003de84

000bf790 <unlink>:
   bf790:	4b02      	ldr	r3, [pc, #8]	; (bf79c <unlink+0xc>)
   bf792:	4601      	mov	r1, r0
   bf794:	6818      	ldr	r0, [r3, #0]
   bf796:	f000 b80d 	b.w	bf7b4 <_unlink_r>
   bf79a:	bf00      	nop
   bf79c:	2003de84 	.word	0x2003de84

000bf7a0 <write>:
   bf7a0:	4613      	mov	r3, r2
   bf7a2:	460a      	mov	r2, r1
   bf7a4:	4601      	mov	r1, r0
   bf7a6:	4802      	ldr	r0, [pc, #8]	; (bf7b0 <write+0x10>)
   bf7a8:	6800      	ldr	r0, [r0, #0]
   bf7aa:	f000 b813 	b.w	bf7d4 <_write_r>
   bf7ae:	bf00      	nop
   bf7b0:	2003de84 	.word	0x2003de84

000bf7b4 <_unlink_r>:
   bf7b4:	b538      	push	{r3, r4, r5, lr}
   bf7b6:	4d06      	ldr	r5, [pc, #24]	; (bf7d0 <_unlink_r+0x1c>)
   bf7b8:	2300      	movs	r3, #0
   bf7ba:	4604      	mov	r4, r0
   bf7bc:	4608      	mov	r0, r1
   bf7be:	602b      	str	r3, [r5, #0]
   bf7c0:	f7fb fc7e 	bl	bb0c0 <_unlink>
   bf7c4:	1c43      	adds	r3, r0, #1
   bf7c6:	d102      	bne.n	bf7ce <_unlink_r+0x1a>
   bf7c8:	682b      	ldr	r3, [r5, #0]
   bf7ca:	b103      	cbz	r3, bf7ce <_unlink_r+0x1a>
   bf7cc:	6023      	str	r3, [r4, #0]
   bf7ce:	bd38      	pop	{r3, r4, r5, pc}
   bf7d0:	2003e7f0 	.word	0x2003e7f0

000bf7d4 <_write_r>:
   bf7d4:	b538      	push	{r3, r4, r5, lr}
   bf7d6:	4d07      	ldr	r5, [pc, #28]	; (bf7f4 <_write_r+0x20>)
   bf7d8:	4604      	mov	r4, r0
   bf7da:	4608      	mov	r0, r1
   bf7dc:	4611      	mov	r1, r2
   bf7de:	2200      	movs	r2, #0
   bf7e0:	602a      	str	r2, [r5, #0]
   bf7e2:	461a      	mov	r2, r3
   bf7e4:	f7fb fc34 	bl	bb050 <_write>
   bf7e8:	1c43      	adds	r3, r0, #1
   bf7ea:	d102      	bne.n	bf7f2 <_write_r+0x1e>
   bf7ec:	682b      	ldr	r3, [r5, #0]
   bf7ee:	b103      	cbz	r3, bf7f2 <_write_r+0x1e>
   bf7f0:	6023      	str	r3, [r4, #0]
   bf7f2:	bd38      	pop	{r3, r4, r5, pc}
   bf7f4:	2003e7f0 	.word	0x2003e7f0

000bf7f8 <__register_exitproc>:
   bf7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf7fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf8b8 <__register_exitproc+0xc0>
   bf800:	4606      	mov	r6, r0
   bf802:	f8d8 0000 	ldr.w	r0, [r8]
   bf806:	461f      	mov	r7, r3
   bf808:	460d      	mov	r5, r1
   bf80a:	4691      	mov	r9, r2
   bf80c:	f000 f878 	bl	bf900 <__retarget_lock_acquire_recursive>
   bf810:	4b25      	ldr	r3, [pc, #148]	; (bf8a8 <__register_exitproc+0xb0>)
   bf812:	681c      	ldr	r4, [r3, #0]
   bf814:	b934      	cbnz	r4, bf824 <__register_exitproc+0x2c>
   bf816:	4c25      	ldr	r4, [pc, #148]	; (bf8ac <__register_exitproc+0xb4>)
   bf818:	601c      	str	r4, [r3, #0]
   bf81a:	4b25      	ldr	r3, [pc, #148]	; (bf8b0 <__register_exitproc+0xb8>)
   bf81c:	b113      	cbz	r3, bf824 <__register_exitproc+0x2c>
   bf81e:	681b      	ldr	r3, [r3, #0]
   bf820:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf824:	6863      	ldr	r3, [r4, #4]
   bf826:	2b1f      	cmp	r3, #31
   bf828:	dd07      	ble.n	bf83a <__register_exitproc+0x42>
   bf82a:	f8d8 0000 	ldr.w	r0, [r8]
   bf82e:	f000 f869 	bl	bf904 <__retarget_lock_release_recursive>
   bf832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf83a:	b34e      	cbz	r6, bf890 <__register_exitproc+0x98>
   bf83c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf840:	b988      	cbnz	r0, bf866 <__register_exitproc+0x6e>
   bf842:	4b1c      	ldr	r3, [pc, #112]	; (bf8b4 <__register_exitproc+0xbc>)
   bf844:	b923      	cbnz	r3, bf850 <__register_exitproc+0x58>
   bf846:	f8d8 0000 	ldr.w	r0, [r8]
   bf84a:	f000 f85a 	bl	bf902 <__retarget_lock_release>
   bf84e:	e7f0      	b.n	bf832 <__register_exitproc+0x3a>
   bf850:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf854:	f7fb fe60 	bl	bb518 <malloc>
   bf858:	2800      	cmp	r0, #0
   bf85a:	d0f4      	beq.n	bf846 <__register_exitproc+0x4e>
   bf85c:	2300      	movs	r3, #0
   bf85e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf862:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf866:	6863      	ldr	r3, [r4, #4]
   bf868:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf86c:	2201      	movs	r2, #1
   bf86e:	409a      	lsls	r2, r3
   bf870:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf874:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf878:	4313      	orrs	r3, r2
   bf87a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf87e:	2e02      	cmp	r6, #2
   bf880:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf884:	bf02      	ittt	eq
   bf886:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf88a:	4313      	orreq	r3, r2
   bf88c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf890:	6863      	ldr	r3, [r4, #4]
   bf892:	f8d8 0000 	ldr.w	r0, [r8]
   bf896:	1c5a      	adds	r2, r3, #1
   bf898:	3302      	adds	r3, #2
   bf89a:	6062      	str	r2, [r4, #4]
   bf89c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf8a0:	f000 f830 	bl	bf904 <__retarget_lock_release_recursive>
   bf8a4:	2000      	movs	r0, #0
   bf8a6:	e7c6      	b.n	bf836 <__register_exitproc+0x3e>
   bf8a8:	2003e7e8 	.word	0x2003e7e8
   bf8ac:	2003e75c 	.word	0x2003e75c
   bf8b0:	00000000 	.word	0x00000000
   bf8b4:	000bb519 	.word	0x000bb519
   bf8b8:	2003dee8 	.word	0x2003dee8

000bf8bc <_close_r>:
   bf8bc:	b538      	push	{r3, r4, r5, lr}
   bf8be:	4d06      	ldr	r5, [pc, #24]	; (bf8d8 <_close_r+0x1c>)
   bf8c0:	2300      	movs	r3, #0
   bf8c2:	4604      	mov	r4, r0
   bf8c4:	4608      	mov	r0, r1
   bf8c6:	602b      	str	r3, [r5, #0]
   bf8c8:	f7fb fbd2 	bl	bb070 <_close>
   bf8cc:	1c43      	adds	r3, r0, #1
   bf8ce:	d102      	bne.n	bf8d6 <_close_r+0x1a>
   bf8d0:	682b      	ldr	r3, [r5, #0]
   bf8d2:	b103      	cbz	r3, bf8d6 <_close_r+0x1a>
   bf8d4:	6023      	str	r3, [r4, #0]
   bf8d6:	bd38      	pop	{r3, r4, r5, pc}
   bf8d8:	2003e7f0 	.word	0x2003e7f0

000bf8dc <_fstat_r>:
   bf8dc:	b538      	push	{r3, r4, r5, lr}
   bf8de:	4d07      	ldr	r5, [pc, #28]	; (bf8fc <_fstat_r+0x20>)
   bf8e0:	2300      	movs	r3, #0
   bf8e2:	4604      	mov	r4, r0
   bf8e4:	4608      	mov	r0, r1
   bf8e6:	4611      	mov	r1, r2
   bf8e8:	602b      	str	r3, [r5, #0]
   bf8ea:	f7fb fbc9 	bl	bb080 <_fstat>
   bf8ee:	1c43      	adds	r3, r0, #1
   bf8f0:	d102      	bne.n	bf8f8 <_fstat_r+0x1c>
   bf8f2:	682b      	ldr	r3, [r5, #0]
   bf8f4:	b103      	cbz	r3, bf8f8 <_fstat_r+0x1c>
   bf8f6:	6023      	str	r3, [r4, #0]
   bf8f8:	bd38      	pop	{r3, r4, r5, pc}
   bf8fa:	bf00      	nop
   bf8fc:	2003e7f0 	.word	0x2003e7f0

000bf900 <__retarget_lock_acquire_recursive>:
   bf900:	4770      	bx	lr

000bf902 <__retarget_lock_release>:
   bf902:	4770      	bx	lr

000bf904 <__retarget_lock_release_recursive>:
   bf904:	4770      	bx	lr
	...

000bf908 <_lseek_r>:
   bf908:	b538      	push	{r3, r4, r5, lr}
   bf90a:	4d07      	ldr	r5, [pc, #28]	; (bf928 <_lseek_r+0x20>)
   bf90c:	4604      	mov	r4, r0
   bf90e:	4608      	mov	r0, r1
   bf910:	4611      	mov	r1, r2
   bf912:	2200      	movs	r2, #0
   bf914:	602a      	str	r2, [r5, #0]
   bf916:	461a      	mov	r2, r3
   bf918:	f7fb fbba 	bl	bb090 <_lseek>
   bf91c:	1c43      	adds	r3, r0, #1
   bf91e:	d102      	bne.n	bf926 <_lseek_r+0x1e>
   bf920:	682b      	ldr	r3, [r5, #0]
   bf922:	b103      	cbz	r3, bf926 <_lseek_r+0x1e>
   bf924:	6023      	str	r3, [r4, #0]
   bf926:	bd38      	pop	{r3, r4, r5, pc}
   bf928:	2003e7f0 	.word	0x2003e7f0

000bf92c <_open_r>:
   bf92c:	b538      	push	{r3, r4, r5, lr}
   bf92e:	4d07      	ldr	r5, [pc, #28]	; (bf94c <_open_r+0x20>)
   bf930:	4604      	mov	r4, r0
   bf932:	4608      	mov	r0, r1
   bf934:	4611      	mov	r1, r2
   bf936:	2200      	movs	r2, #0
   bf938:	602a      	str	r2, [r5, #0]
   bf93a:	461a      	mov	r2, r3
   bf93c:	f7fb fb80 	bl	bb040 <_open>
   bf940:	1c43      	adds	r3, r0, #1
   bf942:	d102      	bne.n	bf94a <_open_r+0x1e>
   bf944:	682b      	ldr	r3, [r5, #0]
   bf946:	b103      	cbz	r3, bf94a <_open_r+0x1e>
   bf948:	6023      	str	r3, [r4, #0]
   bf94a:	bd38      	pop	{r3, r4, r5, pc}
   bf94c:	2003e7f0 	.word	0x2003e7f0

000bf950 <_read_r>:
   bf950:	b538      	push	{r3, r4, r5, lr}
   bf952:	4d07      	ldr	r5, [pc, #28]	; (bf970 <_read_r+0x20>)
   bf954:	4604      	mov	r4, r0
   bf956:	4608      	mov	r0, r1
   bf958:	4611      	mov	r1, r2
   bf95a:	2200      	movs	r2, #0
   bf95c:	602a      	str	r2, [r5, #0]
   bf95e:	461a      	mov	r2, r3
   bf960:	f7fb fb7e 	bl	bb060 <_read>
   bf964:	1c43      	adds	r3, r0, #1
   bf966:	d102      	bne.n	bf96e <_read_r+0x1e>
   bf968:	682b      	ldr	r3, [r5, #0]
   bf96a:	b103      	cbz	r3, bf96e <_read_r+0x1e>
   bf96c:	6023      	str	r3, [r4, #0]
   bf96e:	bd38      	pop	{r3, r4, r5, pc}
   bf970:	2003e7f0 	.word	0x2003e7f0

000bf974 <dynalib_user>:
   bf974:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   bf984:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bf994:	72697620 6c617574 696e6900 61662074      virtual.init fa
   bf9a4:	64656c69 526f4c00 61522041 206f6964     iled.LoRA Radio 
   bf9b4:	74696e69 696c6169 2064657a 61207361     initialized as a
   bf9c4:	74616720 79617765 74697720 20612068      gateway with a 
   bf9d4:	69766564 44496563 20666f20 4c007325     deviceID of %s.L
   bf9e4:	2041526f 69646152 6e69206f 61697469     oRA Radio initia
   bf9f4:	657a696c 73612064 646f6e20 69252065     lized as node %i
   bfa04:	646e6120 64206120 63697665 20444965      and a deviceID 
   bfa14:	2520666f 6f4c0073 52204152 6f696461     of %s.LoRA Radio
   bfa24:	696e6920 6c616974 64657a69 20736120      initialized as 
   bfa34:	75206e61 6e6f636e 75676966 20646572     an unconfigured 
   bfa44:	65646f6e 20692520 20646e61 65642061     node %i and a de
   bfa54:	65636976 6f204449 73252066 63654400     viceID of %s.Dec
   bfa64:	65687069 20646572 61746164 70657220     iphered data rep
   bfa74:	2074726f 66206425 206d6f72 65646f6e     ort %d from node
   bfa84:	00642520 746e6553 73657220 736e6f70      %d.Sent respons
   bfa94:	6f742065 646f6e20 64252065 73656d20     e to node %d mes
   bfaa4:	65676173 2c642520 6d697420 203d2065     sage %d, time = 
   bfab4:	61207325 6620646e 75716572 79636e65     %s and frequency
   bfac4:	20642520 756e696d 00736574 70736552      %d minutes.Resp
   bfad4:	65736e6f 63657220 65766965 75732064     onse received su
   bfae4:	73656363 6c756673 2d20796c 63757320     ccessfully - suc
   bfaf4:	73736563 74617220 34252065 0066322e     cess rate %4.2f.
   bfb04:	70736552 65736e6f 746f6e20 6b636120     Response not ack
   bfb14:	6c776f6e 65676465 202d2064 63637573     nowledged - succ
   bfb24:	20737365 65746172 2e342520 53006632     ess rate %4.2f.S
   bfb34:	20746e65 70736572 65736e6f 206f7420     ent response to 
   bfb44:	65646f6e 2c642520 6d697420 203d2065     node %d, time = 
   bfb54:	61207325 6620646e 75716572 79636e65     %s and frequency
   bfb64:	20642520 756e696d 00736574 70736552      %d minutes.Resp
   bfb74:	65736e6f 63657220 65766965 75732064     onse received su
   bfb84:	73656363 6c756673 5200796c 6f707365     ccessfully.Respo
   bfb94:	2065736e 20746f6e 6e6b6361 656c776f     nse not acknowle
   bfba4:	64656764 63654400 65687069 20646572     dged.Deciphered 
   bfbb4:	72656c61 65722074 74726f70 6f726620     alert report fro
   bfbc4:	6f6e206d 25206564 65530064 6120746e     m node %d.Sent a
   bfbd4:	6f6e6b63 64656c77 6e656d67 6f742074     cknowledgment to
   bfbe4:	646f4e20 64252065 6974202c 3d20656d      Node %d, time =
   bfbf4:	20732520 20646e61 71657266 636e6575      %s and frequenc
   bfc04:	64252079 6e696d20 73657475 73655200     y %d minutes.Res
   bfc14:	646e6f70 20676e69 6e697375 68742067     ponding using th
   bfc24:	73252065 73656d20 65676173 70797420     e %s message typ
   bfc34:	65640065 65636976 6f204449 6966206e     e.deviceID on fi
   bfc44:	2d20656c 74657220 76696572 20676e69     le - retreiving 
   bfc54:	65646f6e 6e204449 65626d75 64252072     nodeID number %d
   bfc64:	76656400 49656369 6f6e2044 6e6f2074     .deviceID not on
   bfc74:	6c696620 202d2065 69766173 6120676e      file - saving a
   bfc84:	6f6e2073 44496564 6d756e20 20726562     s nodeID number 
   bfc94:	6e006425 006c6c75 65636552 64657669     %d.null.Received
   bfca4:	6f726620 6564206d 65636976 6f204449      from deviceID o
   bfcb4:	73252066 206e6120 6f636e75 6769666e     f %s an unconfig
   bfcc4:	64657275 6c697720 6863206c 65676e61     ured will change
   bfcd4:	6f726620 6425206d 206f7420 4a006425      from %d to %d.J
   bfce4:	206e696f 75716572 20747365 6d6f7266     oin request from
   bfcf4:	646f6e20 64252065 73202d20 69747465      node %d - setti
   bfd04:	6320676e 6b636f6c 76654400 49656369     ng clock.DeviceI
   bfd14:	73692044 00732520 7373654d 20656761     D is %s.Message 
   bfd24:	20646964 20746f6e 6374616d 68742068     did not match th
   bfd34:	614d2065 20636967 626d754e 2d207265     e Magic Number -
   bfd44:	6e674920 6e69726f 72460067 6e206d6f      Ignoring.From n
   bfd54:	2065646f 77206425 20687469 69737372     ode %d with rssi
   bfd64:	2064253d 2061202d 6d207325 61737365     =%d - a %s messa
   bfd74:	6f206567 656c2066 6874676e 20642520     ge of length %d 
   bfd84:	25206e69 6f682064 57007370 72612065     in %d hops.We ar
   bfd94:	70752065 69746164 7420676e 70206568     e updating the p
   bfda4:	696c6275 66206873 75716572 79636e65     ublish frequency
   bfdb4:	206f7420 6d206925 74756e69 00007365      to %i minutes..

000bfdc4 <_ZTV14LoRA_Functions>:
	...
   bfdcc:	000b40cd 000b40cf 6f706552 66207472     .@...@..Report f
   bfddc:	75716572 79636e65 20642520 736e696d     requency %d mins
   bfdec:	656e202c 65207478 746e6576 206e6920     , next event in 
   bfdfc:	20756c25 6f636573 0073646e 6d6f7246     %lu seconds.From
   bfe0c:	20732520 25206f74 69772073 69206874      %s to %s with i
   bfe1c:	6c61766e 74206469 00656d69 6d6f7246     nvalid time.From
   bfe2c:	20732520 25206f74 6f662073 75252072      %s to %s for %u
   bfe3c:	63657320 73646e6f 6f724600 7325206d      seconds.From %s
   bfe4c:	206f7420 53007325 7065656c 726f6620      to %s.Sleep for
   bfe5c:	20692520 6f636573 2073646e 6c6c6974      %i seconds till
   bfe6c:	78656e20 76652074 20746e65 25207461      next event at %
   bfe7c:	69772073 25206874 6620696c 20656572     s with %li free 
   bfe8c:	6f6d656d 41007972 656b6f77 20746120     memory.Awoke at 
   bfe9c:	77207325 20687469 20696c25 65657266     %s with %li free
   bfeac:	6d656d20 0079726f 65746147 20796177      memory.Gateway 
   bfebc:	6c207369 65747369 676e696e 726f6620     is listening for
   bfecc:	526f4c20 656d2041 67617373 7b007365      LoRA messages.{
   bfedc:	76656422 69656369 223a2264 2c227325     "deviceid":"%s",
   bfeec:	6f682220 796c7275 75253a22 6422202c      "hourly":%u, "d
   bfefc:	796c6961 75253a22 6162222c 72657474     aily":%u,"batter
   bff0c:	253a2279 66322e34 656b222c 3a223179     y":%4.2f,"key1":
   bff1c:	22732522 6574222c 3a22706d 202c6425     "%s","temp":%d, 
   bff2c:	73657222 22737465 2c64253a 73737222     "resets":%d,"rss
   bff3c:	253a2269 22202c64 2267736d 2c64253a     i":%d, "msg":%d,
   bff4c:	6d697422 61747365 3a22706d 30756c25     "timestamp":%lu0
   bff5c:	007d3030 64696255 2d73746f 41526f4c     00}.Ubidots-LoRA
   bff6c:	6f6f482d 31762d6b 65654400 6f702070     -Hook-v1.Deep po
   bff7c:	20726577 6e776f64 76656420 00656369     wer down device.
   bff8c:	69007369 6f6e2073 54520074 6e692043     is.is not.RTC in
   bff9c:	61697469 657a696c 74202c64 20656d69     itialized, time 
   bffac:	25207369 6e612073 54522064 73252043     is %s and RTC %s
   bffbc:	74657320 54534500 54444535 2e334d2c      set.EST5EDT,M3.
   bffcc:	2f302e32 30303a32 2c30303a 2e31314d     2.0/2:00:00,M11.
   bffdc:	2f302e31 30303a32 0030303a 61636f4c     1.0/2:00:00.Loca
   bffec:	6d69546c 6e692065 61697469 657a696c     lTime initialize
   bfffc:	74202c64 20656d69 25207369 6e612073     d, time is %s an
   c000c:	54522064 73252043 74657320 636f4c00     d RTC %s set.Loc
   c001c:	69546c61 6e20656d 6920746f 6974696e     alTime not initi
   c002c:	7a696c61 202c6465 656d6974 20736920     alized, time is 
   c003c:	61207325 5220646e 25204354 65732073     %s and RTC %s se
   c004c:	73410074 74726573 466e6f69 756c6961     t.AssertionFailu
   c005c:	73206572 26206372 72732026 633e2d63     re src && src->c
   c006c:	626c6c61 006b6361 65746147 20796177     allback.Gateway 
   c007c:	72617473 20707574 706d6f63 6574656c     startup complete
   c008c:	20746120 77207325 20687469 74746162      at %s with batt
   c009c:	20797265 322e3425 73550066 62207265     ery %4.2f.User b
   c00ac:	6f747475 7270206e 65737365 74202c64     utton pressed, t
   c00bc:	20747365 65646f6d 206f4e00 72657375     est mode.No user
   c00cc:	74756220 206e6f74 68737570 74656420      button push det
   c00dc:	74686365 41006465 77656e20 79616420     echted.A new day
   c00ec:	72202d20 74657365 676e6974 65766520      - resetting eve
   c00fc:	68747972 00676e69 61656c63 676e6972     rything.clearing
   c010c:	65687420 646f6e20 20444965 61746164      the nodeID data
   c011c:	00000000                                ....

000c0120 <_ZTV8MB85RC64>:
	...
   c0128:	000b56d9 000b56ed 000b8191 000b8227     .V...V......'...
   c0138:	000b82a9                                ....

000c013c <_ZTV10nodeIDData>:
	...
   c0144:	000b59f5 000b5739 000b5717 000baa15     .Y..9W...W......
   c0154:	000baa3d 000babd1 000bac69 000b57d9     =.......i....W..
   c0164:	000b57ed                                .W..

000c0168 <_ZTV13sysStatusData>:
	...
   c0170:	000b5859 000b5739 000b5717 000baa15     YX..9W...W......
   c0180:	000baa3d 000babd1 000bac69 000b5789     =.......i....W..
   c0190:	000b579d                                .W..

000c0194 <_ZTV17currentStatusData>:
	...
   c019c:	000b5873 000b5739 000b5717 000baa15     sX..9W...W......
   c01ac:	000baa3d 000babd1 000bac69 000b57b1     =.......i....W..
   c01bc:	000b57c5 74696e49 7a696c61 20676e69     .W..Initalizing 
   c01cc:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   c01dc:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   c01ec:	666e6f43 00006769                       Config..

000c01f4 <BLUE_LED>:
   c01f4:	                                         ..

000c01f6 <BUTTON_PIN>:
   c01f6:	                                         ..

000c01f8 <RFM95_CS>:
   c01f8:	                                         ..

000c01fa <RFM95_INT>:
   c01fa:	                                         ..

000c01fc <TMP36_SENSE_PIN>:
   c01fc:	7525000f 6e696d20 73657275 73655900     ..%u minures.Yes
   c020c:	006f4e00 69726556 006e6f7a 6e6b6e55     .No.Verizon.Unkn
   c021c:	006e776f 20746f4e 72616843 676e6967     own.Not Charging
   c022c:	61684300 64656772 73694400 72616863     .Charged.Dischar
   c023c:	676e6967 75614600 4400746c 6e6f6369     ging.Fault.Dicon
   c024c:	7463656e 49006465 6974696e 7a696c61     nected.Initializ
   c025c:	20676e69 74726150 656c6369 6e756620     ing Particle fun
   c026c:	6f697463 6120736e 7620646e 61697261     ctions and varia
   c027c:	73656c62 776f4c00 776f5020 4d207265     bles.Low Power M
   c028c:	0065646f 656c6552 00657361 6e676953     ode.Release.Sign
   c029c:	73006c61 65746174 6843664f 61420067     al.stateOfChg.Ba
   c02ac:	72657474 6e6f4379 74786574 70655200     tteryContext.Rep
   c02bc:	6974726f 4620676e 75716572 79636e65     orting Frequency
   c02cc:	4d495300 72614320 65530064 6f4c2074     .SIM Card.Set Lo
   c02dc:	6f502077 00726577 20746553 71657246     w Power.Set Freq
   c02ec:	636e6575 68530079 2074726f 6f706572     uency.Short repo
   c02fc:	6e697472 72662067 65757165 2079636e     rting frequency 
   c030c:	7265766f 6469722d 6c207365 7020776f     over-rides low p
   c031c:	7265776f 70655200 2074726f 71657266     ower.Report freq
   c032c:	636e6575 69772079 62206c6c 65732065     uency will be se
   c033c:	6f742074 20692520 756e696d 20736574     t to %i minutes 
   c034c:	6e207461 20747865 41526f4c 6e6f6320     at next LoRA con
   c035c:	7463656e 6d695400 65790065 6f6e0073     nect.Time.yes.no
   c036c:	636e4900 73616572 20676e69 6f706572     .Increasing repo
   c037c:	6e697472 72662067 65757165 2079636e     rting frequency 
   c038c:	31206f74 696d2032 6574756e 73490073     to 12 minutes.Is
   c039c:	776f4c20 776f5020 4d207265 2065646f      Low Power Mode 
   c03ac:	3f746573 00732520 20746553 56206f74     set? %s.Set to V
   c03bc:	7a697265 53206e6f 53004d49 74207465     erizon SIM.Set t
   c03cc:	6150206f 63697472 5320656c 49004d49     o Particle SIM.I
   c03dc:	6874206e 69642065 6e6f6373 7463656e     n the disconnect
   c03ec:	6f726620 6150206d 63697472 6620656c      from Particle f
   c03fc:	74636e75 006e6f69 6c696146 74206465     unction.Failed t
   c040c:	6964206f 6e6f6373 7463656e 6f726620     o disconnect fro
   c041c:	6150206d 63697472 4400656c 6f637369     m Particle.Disco
   c042c:	63656e6e 20646574 6d6f7266 72615020     nnected from Par
   c043c:	6c636974 6e692065 20692520 6f636573     ticle in %i seco
   c044c:	0073646e 6c696146 74206465 7574206f     nds.Failed to tu
   c045c:	6f206e72 74206666 43206568 756c6c65     rn off the Cellu
   c046c:	2072616c 65646f6d 7554006d 64656e72     lar modem.Turned
   c047c:	66666f20 65687420 6c656320 616c756c      off the cellula
   c048c:	6f6d2072 206d6564 25206e69 65732069     r modem in %i se
   c049c:	646e6f63 00000073                       conds...

000c04a4 <_ZTVN5spark10LogHandlerE>:
	...
   c04b4:	000b40a5 000b5fe9                       .@..._..

000c04bc <_ZTVN5spark16SerialLogHandlerE>:
	...
   c04c4:	000b6061 000b6095 000bd185 000b5feb     a`...`......._..
   c04d4:	656e6f4e 46695700 53470069 4d55004d     None.WiFi.GSM.UM
   c04e4:	43005354 00414d44 0045544c 45454549     TS.CDMA.LTE.IEEE
   c04f4:	31323038 4c003435 435f4554 4d5f5441     802154.LTE_CAT_M
   c0504:	544c0031 41435f45 424e5f54 73250031     1.LTE_CAT_NB1.%s
   c0514:	253a5320 66302e32 202c2525 32253a51      S:%2.0f%%, Q:%2
   c0524:	2566302e 25002025 00432069 000c0218     .0f%% .%i C.....
   c0534:	000c04d4 000c04d9 000c04de 000c04e2     ................
   c0544:	000c04e7 000c04ec 000c04f0 000c04fb     ................
   c0554:	000c0506 6c696166 74206465 6572206f     ....failed to re
   c0564:	72206461 64416765 253d7264 20783230     ad regAddr=%02x 
   c0574:	6e756f63 75253d74 69616600 2064656c     count=%u.failed 
   c0584:	72206f74 20646165 41676572 3d726464     to read regAddr=
   c0594:	78323025 61747320 64253d74 554f4600     %02x stat=%d.FOU
   c05a4:	69642054 6f6e2064 6f672074 47494820     T did not go HIG
   c05b4:	6f6e0048 65642074 74636574 66006465     H.not detected.f
   c05c4:	656c6961 6f742064 69727720 72206574     ailed to write r
   c05d4:	64416765 253d7264 20783230 74617473     egAddr=%02x stat
   c05e4:	0064253d 57746573 25205444 61770064     =%d.setWDT %d.wa
   c05f4:	64686374 6320676f 7261656c 62206465     tchdog cleared b
   c0604:	75736552 253d746c 61770064 64686374     Result=%d.watchd
   c0614:	7320676f 66207465 5372756f 3d736365     og set fourSecs=
   c0624:	62206425 75736552 253d746c 41570064     %d bResult=%d.WA
   c0634:	44484354 4400474f 5f504545 45574f50     TCHDOG.DEEP_POWE
   c0644:	4f445f52 43004e57 544e554f 4e574f44     R_DOWN.COUNTDOWN
   c0654:	4d49545f 41005245 4d52414c 69616600     _TIMER.ALARM.fai
   c0664:	6572756c 206e6920 61647075 61576574     lure in updateWa
   c0674:	6552656b 6e6f7361 00642520 656b6177     keReason %d.wake
   c0684:	61657220 206e6f73 7325203d 69616600      reason = %s.fai
   c0694:	6572756c 206e6920 43746573 746e756f     lure in setCount
   c06a4:	6e776f64 656d6954 64252072 69616600     downTimer %d.fai
   c06b4:	6572756c 206e6920 70656564 65776f50     lure in deepPowe
   c06c4:	776f4472 6425206e 47455200 454c535f     rDown %d.REG_SLE
   c06d4:	435f5045 3d4c5254 32257830 69640078     EP_CTRL=0x%2x.di
   c06e4:	74276e64 776f7020 64207265 006e776f     dn't power down.
   c06f4:	64343025 3230252d 30252d64 25206432     %04d-%02d-%02d %
   c0704:	3a643230 64323025 3230253a 65670064     02d:%02d:%02d.ge
   c0714:	63745274 6d547341 00732520 52746573     tRtcAsTm %s.setR
   c0724:	73416374 25206d54 61660073 72756c69     tcAsTm %s.failur
   c0734:	6e692065 74657320 46637452 546d6f72     e in setRtcFromT
   c0744:	6425206d 74657300 43545220 6f726620     m %d.set RTC fro
   c0754:	6c63206d 2064756f 73007325 73207465     m cloud %s.set s
   c0764:	65747379 6c63206d 206b636f 6d6f7266     ystem clock from
   c0774:	43545220 00732520 6c696166 74206465      RTC %s.failed t
   c0784:	6564206f 74636574 31424120 00353038     o detect AB1805.
   c0794:	2e707061 38316261 00003530              app.ab1805..

000c07a0 <_ZTV6AB1805>:
	...
   c07a8:	000b6951 000b6953 000b6fc9 000b704f     Qi..Si...o..Op..
   c07b8:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   c07c8:	004b5268                                hRK.

000c07cc <_ZTV19BackgroundPublishRK>:
	...
   c07d4:	000b7585 000b75a1 253a6425 64253a64     .u...u..%d:%d:%d
   c07e4:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   c07f4:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   c0804:	302b2500 253a6433 00753230              .%+03d:%02u.

000c0810 <_ZTV9LocalTime>:
	...
   c0818:	000b78d5 000b78ed                       .x...x..

000c0820 <_ZTV12LocalTimeHMS>:
	...
   c0828:	000b7883 000b7887                       .x...x..

000c0830 <_ZTV15LocalTimeChange>:
	...
   c0838:	000b7885 000b7895                       .x...x..

000c0840 <_ZTV22LocalTimePosixTimezone>:
	...
   c0848:	000b78a5 000b78c1                       .x...x..

000c0850 <_ZTV6MB85RC>:
	...
   c0858:	000b8151 000b8153 000b8191 000b8227     Q...S.......'...
   c0868:	000b82a9 656c6966 3d6d754e 73206425     ....fileNum=%d s
   c0878:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   c0888:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   c0898:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   c08a8:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   c08b8:	64657470 65766520 6e20746e 20656d61     pted event name 
   c08c8:	6420726f 00617461 64616572 75657551     or data.readQueu
   c08d8:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   c08e8:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   c08f8:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   c0908:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   c0918:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   c0928:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   c0938:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   c0948:	76652064 20746e65 72006425 74657365     d event %d.reset
   c0958:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   c0968:	746e6576 6173202c 66206576 73656c69     vent, save files
   c0978:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   c0988:	72616373 676e6964 726f6320 74707572     scarding corrupt
   c0998:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c09a8:	6e696873 73252067 65766520 253d746e     shing %s event=%
   c09b8:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c09c8:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c09d8:	20736920 75716572 64657269 62757000      is required.pub
   c09e8:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c09f8:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c0a08:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c0a18:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c0a28:	72656772 61687420 616d206e 69735f78     rger than max_si
   c0a38:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c0a48:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c0a58:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c0a68:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c0a78:	00657565 6c627570 20687369 63637573     eue.publish succ
   c0a88:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c0a98:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c0aa8:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c0ab8:	206f7420 656c6966 66612073 20726574      to files after 
   c0ac8:	6c627570 20687369 6c696166 00657275     publish failure.
   c0ad8:	2e707061 71627570 00000000              app.pubq....

000c0ae4 <_ZTV17PublishQueuePosix>:
	...
   c0aec:	000b8bdd 000b8e99 000b8ebd              ............

000c0af8 <_ZTV15RHGenericDriver>:
	...
   c0b08:	000b8fdd 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c0b18:	000b40a5 000b903f 000b8fe1 000b908f     .@..?...........
   c0b28:	000b905d 000b90b3 000b8feb 000b8ff3     ]...............
   c0b38:	000b8ff7 000b8ffb 000b8fff 000b9003     ................
   c0b48:	000b8fef 000b900f 000b9013 000b9017     ................
   c0b58:	000b901b 000b901f 000b9025 000b9029     ........%...)...
   c0b68:	000b8feb 000b902d 000b9033 000b9039     ....-...3...9...

000c0b78 <_ZTV12RHGenericSPI>:
	...
   c0b80:	000b40a5 000b9111 000b9113 000b40a5     .@...........@..
   c0b90:	000b40a5 000b911b 000b911f 000b9123     .@..........#...
   c0ba0:	000b9115 000b9117 000b9119 61666564     ............defa
   c0bb0:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c0bc0:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c0bd0:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c0be0:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c0bf0 <_ZTVN8particle11SPISettingsE>:
	...
   c0bf8:	000b9169 000b913d 000b913f              i...=...?...

000c0c04 <_ZTV13RHHardwareSPI>:
	...
   c0c0c:	000b921d 000b9231 000b923f 000b924d     ....1...?...M...
   c0c1c:	000b92b9 000b911b 000b911f 000b9123     ............#...
   c0c2c:	000b92c7 000b92db 000b92e9              ............

000c0c38 <_ZTV6RHMesh>:
	...
   c0c40:	000b93b5 000b965d 000b9315 000b9301     ....]...........

000c0c50 <_ZTV8RHRouter>:
	...
   c0c58:	000b98c9 000b990d                       ........

000c0c60 <_ZTV11RHSPIDriver>:
	...
   c0c70:	000b9ba9 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c0c80:	000b40a5 000b903f 000b8fe1 000b908f     .@..?...........
   c0c90:	000b905d 000b90b3 000b8feb 000b8ff3     ]...............
   c0ca0:	000b8ff7 000b8ffb 000b8fff 000b9003     ................
   c0cb0:	000b8fef 000b900f 000b9013 000b9017     ................
   c0cc0:	000b901b 000b901f 000b9025 000b9029     ........%...)...
   c0cd0:	000b8feb 000b902d 000b9033 000b9039     ....-...3...9...
   c0ce0:	000b9bd5 000b9bdf                       ........

000c0ce8 <_ZL18MODEM_CONFIG_TABLE>:
   c0ce8:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c0cf8 <_ZTV7RH_RF95>:
	...
   c0d00:	000b9d47 000b9d7f 000ba259 000ba0ef     G.......Y.......
   c0d10:	000b9db5 000ba137 000b9d43 000b903f     ....7...C...?...
   c0d20:	000b8fe1 000b908f 000b905d 000b90b3     ........].......
   c0d30:	000b9d49 000b8ff3 000b8ff7 000b8ffb     I...............
   c0d40:	000b8fff 000b9003 000b8fef 000b900f     ................
   c0d50:	000b9013 000b9017 000b901b 000b901f     ................
   c0d60:	000b9025 000b9029 000b9d8f 000b902d     %...).......-...
   c0d70:	000b9033 000b9039 000b9bd5 000b9bdf     3...9...........
   c0d80:	000b9d3f 64383025 72002f00 766f6d65     ?...%08d./.remov
   c0d90:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c0da0:	20646e61 61207369 72696420 6f746365     and is a directo
   c0db0:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c0dc0:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c0dd0:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c0de0:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c0df0:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c0e00:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c0e10:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c0e20:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c0e30:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c0e40:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c0e50:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c0e60:	74657220 656e7275 64252064 70706100      returned %d.app
   c0e70:	7165732e 656c6966 00000000              .seqfile....

000c0e7c <_ZTV14SequentialFile>:
	...
   c0e84:	000ba6b5 000ba6e1 000ba361 3a746f67     ........a...got:
   c0e94:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c0ea4:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c0eb4:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c0ec4:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c0ed4:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c0ee4:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c0ef4 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c0efc:	000baa0f 000baa5b 000baa0d 000baa15     ....[...........
   c0f0c:	000baa3d 000babd1 000bac69 74746553     =.......i...Sett
   c0f1c:	20676e69 756c6176 66207365 7420726f     ing values for t
   c0f2c:	47206568 77657461 00007961              he Gateway..

000c0f38 <_ZTVN5spark13CellularClassE>:
	...
   c0f40:	000bb703 000bb6f9 000bb6ef 000bb6a5     ................
   c0f50:	000bb6e3 000bb6d7 000bd4dd 000bd4e5     ................
   c0f60:	000bb6cb 000bb6c3 000bb6b9 000bb6af     ................
   c0f70:	000bd515                                ....

000c0f74 <_ZTV14CellularSignal>:
	...
   c0f7c:	000bb791 000bb7f5 000bb793 000bb805     ................
   c0f8c:	000bb839 000bb865 000bb899 000bb7b9     9...e...........
   c0f9c:	000bb797 000bb7b3 fffffffc 00000000     ................
   c0fac:	000bb7ed                                ....

000c0fb0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0fb8:	000bb8dd 000bb8e3 000bb921 000bb8f1     ........!.......
   c0fc8:	000bb8df                                ....

000c0fcc <_ZTVN5spark13EthernetClassE>:
	...
   c0fd4:	000bbeeb 000bbee1 000bbed7 000bbecd     ................
   c0fe4:	000bbec1 000bbeb5 000bd4dd 000bd4e5     ................
   c0ff4:	000bbea9 000bbea1 000bbe97 000bbe8d     ................
   c1004:	000bd515                                ....

000c1008 <_ZTV7TwoWire>:
	...
   c1010:	000bbfbb 000bc005 000bbfdd 000bbfbd     ................
   c1020:	000bbfe5 000bbfed 000bbff5 000bbffd     ................

000c1030 <_ZTV9IPAddress>:
	...
   c1038:	000bc19d 000bc18d 000bc18f 34302575     ............u%04
   c1048:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c1058:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c1068:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c1078:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c1088:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   c1098:	69617465 3d20736c 0a0d0020 006e6c00     etails = ....ln.
   c10a8:	63006e66 0065646f 61746564 00006c69     fn.code.detail..

000c10b8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c10c0:	000bc649 000bc66f 000bc62d 000bc2ab     I...o...-.......

000c10d0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c10d8:	000bca2d 000bca45 000bd185 000b5feb     -...E........_..

000c10e8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c10f0:	000bca59 000bca6d 000bd329 000bc635     Y...m...)...5...

000c1100 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c1108:	000bc647 000bc67d 000bd0e9 000bc637     G...}.......7...

000c1118 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c1120:	000bc645 000bc68b 000bc995 000bc6ad     E...............

000c1130 <_ZTVN5spark12NetworkClassE>:
	...
   c1138:	000bd49d 000bd4a7 000bd4b1 000bd4bb     ................
   c1148:	000bd4c5 000bd4d1 000bd4dd 000bd4e5     ................
   c1158:	000bd4ed 000bd4f9 000bd501 000bd50b     ................
   c1168:	000bd515 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000c1178 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c1178:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c1188:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c1198:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c11a8:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c11b8:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c11c8:	00000065                                e...

000c11cc <_ZTV11USARTSerial>:
	...
   c11d4:	000be379 000be3e5 000be3bd 000bd765     y...........e...
   c11e4:	000be38d 000be3a9 000be39b 000be3b7     ................
   c11f4:	000be37b 000be37f                       {.......

000c11fc <_ZTV9USBSerial>:
	...
   c1204:	000be437 000be49f 000be475 000bd765     7.......u...e...
   c1214:	000be467 000be439 000be449 000be499     g...9...I.......
   c1224:	000be459 000be431                       Y...1...

000c122c <_ZSt7nothrow>:
   c122c:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c123c:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c124d <day_name.1>:
   c124d:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c125d:	61536972                                 riSat

000c1262 <mon_name.0>:
   c1262:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c1272:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c1282:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c1292:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c12a2:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c12b2:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c12c2:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c12d2:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c12e2:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c12f2:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c1302:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c1312:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c1322:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c1332:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c1342:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c134f <_ctype_>:
   c134f:	20202000 20202020 28282020 20282828     .         ((((( 
   c135f:	20202020 20202020 20202020 20202020                     
   c136f:	10108820 10101010 10101010 10101010      ...............
   c137f:	04040410 04040404 10040404 10101010     ................
   c138f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c139f:	01010101 01010101 01010101 10101010     ................
   c13af:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c13bf:	02020202 02020202 02020202 10101010     ................
   c13cf:	00000020 00000000 00000000 00000000      ...............
	...

000c1450 <link_const_variable_data_end>:
   c1450:	000b4b39 	.word	0x000b4b39
   c1454:	000b5361 	.word	0x000b5361
   c1458:	000b5ef1 	.word	0x000b5ef1
   c145c:	000b6535 	.word	0x000b6535
   c1460:	000b6945 	.word	0x000b6945
   c1464:	000b7469 	.word	0x000b7469
   c1468:	000b8e89 	.word	0x000b8e89
   c146c:	000b92f1 	.word	0x000b92f1
   c1470:	000ba9fd 	.word	0x000ba9fd
   c1474:	000bb695 	.word	0x000bb695
   c1478:	000bb761 	.word	0x000bb761
   c147c:	000bbef5 	.word	0x000bbef5
   c1480:	000bd175 	.word	0x000bd175
   c1484:	000bd5ed 	.word	0x000bd5ed
   c1488:	000bda55 	.word	0x000bda55
   c148c:	000be03d 	.word	0x000be03d
   c1490:	000be365 	.word	0x000be365

000c1494 <link_constructors_end>:
	...
