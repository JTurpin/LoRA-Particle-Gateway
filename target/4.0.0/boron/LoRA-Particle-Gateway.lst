
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d950  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1970  000c1970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c1994  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003dd24  000c1998  0002dd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008cc  2003df28  2003df28  0003df28  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c1b98  000c1b98  00031b98  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c1bc4  000c1bc4  00031bc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0028e0d0  00000000  00000000  00031bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c1ea  00000000  00000000  002bfc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000690be  00000000  00000000  002ebe82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004d60  00000000  00000000  00354f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011c90  00000000  00000000  00359ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ec47  00000000  00000000  0036b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00092be5  00000000  00000000  003ca577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d4b4  00000000  00000000  0045d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000e744  00000000  00000000  005ca610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00b fba1 	bl	bf778 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00b fbc3 	bl	bf7c8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd24 	.word	0x2003dd24
   b404c:	000c1998 	.word	0x000c1998
   b4050:	2003df24 	.word	0x2003df24
   b4054:	2003df28 	.word	0x2003df28
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00a fce3 	bl	bea2c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1924 	.word	0x000c1924
   b4080:	000c1968 	.word	0x000c1968

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b8dc 	b.w	b5240 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f9d9 	bl	b5440 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00a bc83 	b.w	be99c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f007 bc41 	b.w	bb91c <malloc>

000b409a <_Znaj>:
   b409a:	f007 bc3f 	b.w	bb91c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f007 bc45 	b.w	bb92c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f007 fac2 	bl	bb634 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bb1d5 	.word	0x000bb1d5
   b40b8:	000bfd9c 	.word	0x000bfd9c

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b500      	push	{lr}
   b40e0:	b08c      	sub	sp, #48	; 0x30
   b40e2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40e4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40e8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40ec:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ee:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40f2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40f4:	6801      	ldr	r1, [r0, #0]
   b40f6:	aa04      	add	r2, sp, #16
   b40f8:	201e      	movs	r0, #30
    attr.flags = 0;
   b40fa:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40fe:	f007 faa9 	bl	bb654 <log_message_v>
}
   b4102:	b00c      	add	sp, #48	; 0x30
   b4104:	f85d eb04 	ldr.w	lr, [sp], #4
   b4108:	b003      	add	sp, #12
   b410a:	4770      	bx	lr

000b410c <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b410c:	b510      	push	{r4, lr}
    if (!_instance) {
   b410e:	4c06      	ldr	r4, [pc, #24]	; (b4128 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4110:	6823      	ldr	r3, [r4, #0]
   b4112:	b933      	cbnz	r3, b4122 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4114:	2004      	movs	r0, #4
   b4116:	f7ff ffbe 	bl	b4096 <_Znwj>
   b411a:	b108      	cbz	r0, b4120 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b411c:	4b03      	ldr	r3, [pc, #12]	; (b412c <_ZN14LoRA_Functions8instanceEv+0x20>)
   b411e:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4120:	6020      	str	r0, [r4, #0]
}
   b4122:	6820      	ldr	r0, [r4, #0]
   b4124:	bd10      	pop	{r4, pc}
   b4126:	bf00      	nop
   b4128:	2003df2c 	.word	0x2003df2c
   b412c:	000c02d0 	.word	0x000c02d0

000b4130 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4130:	b530      	push	{r4, r5, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4132:	4831      	ldr	r0, [pc, #196]	; (b41f8 <_ZN14LoRA_Functions5setupEb+0xc8>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4134:	b087      	sub	sp, #28
   b4136:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4138:	f005 fde1 	bl	b9cfe <_ZN8RHRouter4initEv>
   b413c:	4604      	mov	r4, r0
   b413e:	b930      	cbnz	r0, b414e <_ZN14LoRA_Functions5setupEb+0x1e>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b4140:	492e      	ldr	r1, [pc, #184]	; (b41fc <_ZN14LoRA_Functions5setupEb+0xcc>)
   b4142:	482f      	ldr	r0, [pc, #188]	; (b4200 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4144:	f7ff ffca 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_nodeNumber(11);
		manager.setThisAddress(11);
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
	}
	return true;
}
   b4148:	4620      	mov	r0, r4
   b414a:	b007      	add	sp, #28
   b414c:	bd30      	pop	{r4, r5, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b414e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; b4204 <_ZN14LoRA_Functions5setupEb+0xd4>
   b4152:	482d      	ldr	r0, [pc, #180]	; (b4208 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4154:	f006 f8cc 	bl	ba2f0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4158:	482b      	ldr	r0, [pc, #172]	; (b4208 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b415a:	2200      	movs	r2, #0
   b415c:	2117      	movs	r1, #23
   b415e:	f006 fa41 	bl	ba5e4 <_ZN7RH_RF9510setTxPowerEab>
	if (gatewayID == true) {
   b4162:	b18d      	cbz	r5, b4188 <_ZN14LoRA_Functions5setupEb+0x58>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b4164:	f001 fcd6 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4168:	2100      	movs	r1, #0
   b416a:	f001 fe98 	bl	b5e9e <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b416e:	a802      	add	r0, sp, #8
   b4170:	f007 fb34 	bl	bb7dc <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b4174:	9a02      	ldr	r2, [sp, #8]
   b4176:	4925      	ldr	r1, [pc, #148]	; (b420c <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4178:	4821      	ldr	r0, [pc, #132]	; (b4200 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b417a:	f7ff ffaf 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b417e:	a802      	add	r0, sp, #8
   b4180:	f009 ff36 	bl	bdff0 <_ZN6StringD1Ev>
   b4184:	462c      	mov	r4, r5
   b4186:	e7df      	b.n	b4148 <_ZN14LoRA_Functions5setupEb+0x18>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b4188:	f001 fcc4 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b418c:	f001 fe05 	bl	b5d9a <_ZNK13sysStatusData14get_nodeNumberEv>
   b4190:	b1f0      	cbz	r0, b41d0 <_ZN14LoRA_Functions5setupEb+0xa0>
   b4192:	f001 fcbf 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4196:	f001 fe00 	bl	b5d9a <_ZNK13sysStatusData14get_nodeNumberEv>
   b419a:	280a      	cmp	r0, #10
   b419c:	d818      	bhi.n	b41d0 <_ZN14LoRA_Functions5setupEb+0xa0>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b419e:	f001 fcb9 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b41a2:	f001 fdfa 	bl	b5d9a <_ZNK13sysStatusData14get_nodeNumberEv>
   b41a6:	4601      	mov	r1, r0
   b41a8:	4819      	ldr	r0, [pc, #100]	; (b4210 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41aa:	f005 f8d4 	bl	b9356 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b41ae:	4818      	ldr	r0, [pc, #96]	; (b4210 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41b0:	f005 f8b7 	bl	b9322 <_ZN10RHDatagram11thisAddressEv>
   b41b4:	9001      	str	r0, [sp, #4]
   b41b6:	a802      	add	r0, sp, #8
   b41b8:	f007 fb10 	bl	bb7dc <spark_deviceID>
   b41bc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b41c0:	4914      	ldr	r1, [pc, #80]	; (b4214 <_ZN14LoRA_Functions5setupEb+0xe4>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b41c2:	480f      	ldr	r0, [pc, #60]	; (b4200 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b41c4:	f7ff ff8a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b41c8:	a802      	add	r0, sp, #8
   b41ca:	f009 ff11 	bl	bdff0 <_ZN6StringD1Ev>
   b41ce:	e7bb      	b.n	b4148 <_ZN14LoRA_Functions5setupEb+0x18>
		sysStatus.set_nodeNumber(11);
   b41d0:	f001 fca0 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b41d4:	210b      	movs	r1, #11
   b41d6:	f001 fe62 	bl	b5e9e <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b41da:	210b      	movs	r1, #11
   b41dc:	480c      	ldr	r0, [pc, #48]	; (b4210 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41de:	f005 f8ba 	bl	b9356 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b41e2:	480b      	ldr	r0, [pc, #44]	; (b4210 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41e4:	f005 f89d 	bl	b9322 <_ZN10RHDatagram11thisAddressEv>
   b41e8:	9001      	str	r0, [sp, #4]
   b41ea:	a802      	add	r0, sp, #8
   b41ec:	f007 faf6 	bl	bb7dc <spark_deviceID>
   b41f0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b41f4:	4908      	ldr	r1, [pc, #32]	; (b4218 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b41f6:	e7e4      	b.n	b41c2 <_ZN14LoRA_Functions5setupEb+0x92>
   b41f8:	2003e0e4 	.word	0x2003e0e4
   b41fc:	000bfdb1 	.word	0x000bfdb1
   b4200:	2003e658 	.word	0x2003e658
   b4204:	4464c000 	.word	0x4464c000
   b4208:	2003dfb4 	.word	0x2003dfb4
   b420c:	000bfdbd 	.word	0x000bfdbd
   b4210:	2003e0e8 	.word	0x2003e0e8
   b4214:	000bfdf7 	.word	0x000bfdf7
   b4218:	000bfe2e 	.word	0x000bfe2e

000b421c <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b421c:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b421e:	4c06      	ldr	r4, [pc, #24]	; (b4238 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b4220:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b4222:	f10d 0203 	add.w	r2, sp, #3
   b4226:	a901      	add	r1, sp, #4
   b4228:	4620      	mov	r0, r4
   b422a:	f005 ffdd 	bl	ba1e8 <_ZN7RH_RF954recvEPhS0_>
   b422e:	2800      	cmp	r0, #0
   b4230:	d1f7      	bne.n	b4222 <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b4232:	b040      	add	sp, #256	; 0x100
   b4234:	bd10      	pop	{r4, pc}
   b4236:	bf00      	nop
   b4238:	2003dfb4 	.word	0x2003dfb4

000b423c <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b423c:	4801      	ldr	r0, [pc, #4]	; (b4244 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b423e:	f005 bfc0 	b.w	ba1c2 <_ZN7RH_RF955sleepEv>
   b4242:	bf00      	nop
   b4244:	2003dfb4 	.word	0x2003dfb4

000b4248 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {
   b4248:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[3] << 8 | buf[4]);
   b424a:	4c2a      	ldr	r4, [pc, #168]	; (b42f4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xac>)
   b424c:	f001 fcb2 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4250:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b4254:	ba49      	rev16	r1, r1
   b4256:	b289      	uxth	r1, r1
   b4258:	f001 fef9 	bl	b604e <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[5] << 8 | buf[6]);
   b425c:	f001 fcaa 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4260:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b4264:	ba49      	rev16	r1, r1
   b4266:	b289      	uxth	r1, r1
   b4268:	f001 fef7 	bl	b605a <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[7]);
   b426c:	f001 fca2 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4270:	79e1      	ldrb	r1, [r4, #7]
   b4272:	f001 fe5c 	bl	b5f2e <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[8]);
   b4276:	f001 fc9d 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b427a:	7a21      	ldrb	r1, [r4, #8]
   b427c:	f001 fe39 	bl	b5ef2 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[9]);
   b4280:	f001 fc98 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4284:	4605      	mov	r5, r0
   b4286:	7a60      	ldrb	r0, [r4, #9]
   b4288:	f00a feb2 	bl	beff0 <__aeabi_ui2d>
   b428c:	ec41 0b10 	vmov	d0, r0, r1
   b4290:	4628      	mov	r0, r5
   b4292:	f001 fcc9 	bl	b5c28 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[10]);
   b4296:	f001 fc8d 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b429a:	7aa1      	ldrb	r1, [r4, #10]
   b429c:	f001 fe2f 	bl	b5efe <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[11]);
   b42a0:	f001 fc88 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b42a4:	7ae1      	ldrb	r1, [r4, #11]
   b42a6:	f001 fe30 	bl	b5f0a <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageNumber(buf[12]);
   b42aa:	f001 fc83 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b42ae:	7b21      	ldrb	r1, [r4, #12]
   b42b0:	f001 fe31 	bl	b5f16 <_ZN17currentStatusData17set_messageNumberEh>
	current.set_RSSI(driver.lastRssi());
   b42b4:	f001 fc7e 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b42b8:	4604      	mov	r4, r0
   b42ba:	480f      	ldr	r0, [pc, #60]	; (b42f8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb0>)
   b42bc:	f005 f8c9 	bl	b9452 <_ZN15RHGenericDriver8lastRssiEv>
   b42c0:	b281      	uxth	r1, r0
   b42c2:	4620      	mov	r0, r4
   b42c4:	f001 febd 	bl	b6042 <_ZN17currentStatusData8set_RSSIEt>

	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b42c8:	f001 fc74 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b42cc:	f001 fd9c 	bl	b5e08 <_ZNK17currentStatusData17get_messageNumberEv>
   b42d0:	9001      	str	r0, [sp, #4]
   b42d2:	f001 fc6f 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b42d6:	f001 fd7e 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b42da:	9a01      	ldr	r2, [sp, #4]
   b42dc:	4907      	ldr	r1, [pc, #28]	; (b42fc <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb4>)
   b42de:	4603      	mov	r3, r0
   b42e0:	4807      	ldr	r0, [pc, #28]	; (b4300 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb8>)
   b42e2:	f7ff fefb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b42e6:	4b07      	ldr	r3, [pc, #28]	; (b4304 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xbc>)
   b42e8:	2204      	movs	r2, #4

	return true;
}
   b42ea:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b42ec:	701a      	strb	r2, [r3, #0]
}
   b42ee:	b003      	add	sp, #12
   b42f0:	bd30      	pop	{r4, r5, pc}
   b42f2:	bf00      	nop
   b42f4:	2003df38 	.word	0x2003df38
   b42f8:	2003dfb4 	.word	0x2003dfb4
   b42fc:	000bfe75 	.word	0x000bfe75
   b4300:	2003e658 	.word	0x2003e658
   b4304:	2003df28 	.word	0x2003df28

000b4308 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:

bool LoRA_Functions::acknowledgeDataReportGateway() {
   b4308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}


	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	attempts++;
   b430c:	4e7d      	ldr	r6, [pc, #500]	; (b4504 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1fc>)
     
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b430e:	4c7e      	ldr	r4, [pc, #504]	; (b4508 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x200>)
	attempts++;
   b4310:	6833      	ldr	r3, [r6, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() {
   b4312:	b089      	sub	sp, #36	; 0x24
	attempts++;
   b4314:	3301      	adds	r3, #1
   b4316:	6033      	str	r3, [r6, #0]
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4318:	f00a fa11 	bl	be73e <_ZN9TimeClass3nowEv>
   b431c:	1600      	asrs	r0, r0, #24
   b431e:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4320:	f00a fa0d 	bl	be73e <_ZN9TimeClass3nowEv>
   b4324:	1400      	asrs	r0, r0, #16
   b4326:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b4328:	f00a fa09 	bl	be73e <_ZN9TimeClass3nowEv>
   b432c:	1200      	asrs	r0, r0, #8
   b432e:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b4330:	f00a fa05 	bl	be73e <_ZN9TimeClass3nowEv>
   b4334:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b4336:	f001 fbed 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b433a:	f001 fe39 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b433e:	0a00      	lsrs	r0, r0, #8
   b4340:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4342:	f001 fbe7 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4346:	f001 fe33 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b434a:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_openHours();
   b434c:	f001 fc32 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4350:	f001 ff33 	bl	b61ba <_ZNK17currentStatusData13get_openHoursEv>
	// Next we will check to make sure that node number is properly configured in the nodeID object
	buf[9] = 0;										// Default is that there is no alert code
   b4354:	2300      	movs	r3, #0
   b4356:	7263      	strb	r3, [r4, #9]
	buf[8] = current.get_openHours();
   b4358:	7220      	strb	r0, [r4, #8]
	switch (current.get_nodeNumber()) {
   b435a:	f001 fc2b 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b435e:	f001 fd3a 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4362:	2802      	cmp	r0, #2
   b4364:	4605      	mov	r5, r0
   b4366:	f000 808e 	beq.w	b4486 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x17e>
   b436a:	2803      	cmp	r0, #3
   b436c:	f000 80a4 	beq.w	b44b8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b0>
   b4370:	2801      	cmp	r0, #1
   b4372:	f040 80a8 	bne.w	b44c6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1be>
		case 1:
			if (strncmp(nodeID.get_deviceID_1(),"000000000000000000000000",24) == 0) {					// This means that the node is not configured in the Gateway's table of nodes and deviceIDs
   b4376:	f001 fc99 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b437a:	4601      	mov	r1, r0
   b437c:	a804      	add	r0, sp, #16
   b437e:	f001 fcb9 	bl	b5cf4 <_ZNK10nodeIDData14get_deviceID_1Ev>
   b4382:	4962      	ldr	r1, [pc, #392]	; (b450c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x204>)
   b4384:	9804      	ldr	r0, [sp, #16]
   b4386:	2218      	movs	r2, #24
   b4388:	f00b fae1 	bl	bf94e <strncmp>
   b438c:	4607      	mov	r7, r0
   b438e:	a804      	add	r0, sp, #16
   b4390:	f009 fe2e 	bl	bdff0 <_ZN6StringD1Ev>
   b4394:	b927      	cbnz	r7, b43a0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x98>
			Log.info("Node 1 deviceID not set - setting alert");
   b4396:	495e      	ldr	r1, [pc, #376]	; (b4510 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x208>)
   b4398:	485e      	ldr	r0, [pc, #376]	; (b4514 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x20c>)
   b439a:	f7ff fe9f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				buf[9] = 1;											// Sets Alert Code 1 to force a Join Request Message
   b439e:	7265      	strb	r5, [r4, #9]
		default: 
			Log.info("Node number not configured - setting alert");
			buf[9] = 1;
			break;
	}
	current.set_alertCodeNode(buf[9]);								// Store as this will impact reporting
   b43a0:	f001 fc08 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b43a4:	7a61      	ldrb	r1, [r4, #9]
   b43a6:	f001 fdbc 	bl	b5f22 <_ZN17currentStatusData17set_alertCodeNodeEh>
	if (buf[9] > 0) current.set_alertTimestampNode(Time.now());
   b43aa:	7a63      	ldrb	r3, [r4, #9]
   b43ac:	b14b      	cbz	r3, b43c2 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xba>
   b43ae:	f001 fc01 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b43b2:	4605      	mov	r5, r0
   b43b4:	f00a f9c3 	bl	be73e <_ZN9TimeClass3nowEv>
   b43b8:	4602      	mov	r2, r0
   b43ba:	17c3      	asrs	r3, r0, #31
   b43bc:	4628      	mov	r0, r5
   b43be:	f001 fed1 	bl	b6164 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	buf[10] = current.get_messageNumber();			 // Message number
   b43c2:	f001 fbf7 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b43c6:	f001 fd1f 	bl	b5e08 <_ZNK17currentStatusData17get_messageNumberEv>
	
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b43ca:	4d53      	ldr	r5, [pc, #332]	; (b4518 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x210>)
   b43cc:	7a62      	ldrb	r2, [r4, #9]
   b43ce:	4b53      	ldr	r3, [pc, #332]	; (b451c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x214>)
	buf[10] = current.get_messageNumber();			 // Message number
   b43d0:	72a0      	strb	r0, [r4, #10]
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b43d2:	2a00      	cmp	r2, #0
   b43d4:	bf08      	it	eq
   b43d6:	461d      	moveq	r5, r3
   b43d8:	f001 fbec 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b43dc:	f001 fcfb 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b43e0:	7aa4      	ldrb	r4, [r4, #10]
   b43e2:	4607      	mov	r7, r0
   b43e4:	f00a f9ab 	bl	be73e <_ZN9TimeClass3nowEv>
   b43e8:	4602      	mov	r2, r0
   b43ea:	17c3      	asrs	r3, r0, #31
   b43ec:	a804      	add	r0, sp, #16
   b43ee:	f00a f8a1 	bl	be534 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b43f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b43f6:	f001 fb8d 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b43fa:	f001 fdd9 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b43fe:	462a      	mov	r2, r5
   b4400:	4947      	ldr	r1, [pc, #284]	; (b4520 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x218>)
   b4402:	9400      	str	r4, [sp, #0]
   b4404:	463b      	mov	r3, r7
   b4406:	e9cd 8001 	strd	r8, r0, [sp, #4]
   b440a:	4842      	ldr	r0, [pc, #264]	; (b4514 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x20c>)
   b440c:	f7ff fe66 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4410:	a804      	add	r0, sp, #16
   b4412:	f009 fded 	bl	bdff0 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4416:	4b43      	ldr	r3, [pc, #268]	; (b4524 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x21c>)
   b4418:	881d      	ldrh	r5, [r3, #0]
   b441a:	2101      	movs	r1, #1
   b441c:	4628      	mov	r0, r5
   b441e:	f00a fb9e 	bl	beb5e <digitalWrite>

	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4422:	f001 fbc7 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4426:	f001 fcd6 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b442a:	2204      	movs	r2, #4
   b442c:	4603      	mov	r3, r0
   b442e:	9200      	str	r2, [sp, #0]
   b4430:	4935      	ldr	r1, [pc, #212]	; (b4508 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x200>)
   b4432:	483d      	ldr	r0, [pc, #244]	; (b4528 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x220>)
   b4434:	220b      	movs	r2, #11
   b4436:	f005 fa27 	bl	b9888 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b443a:	4b3c      	ldr	r3, [pc, #240]	; (b452c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x224>)
   b443c:	4604      	mov	r4, r0
		success++;
   b443e:	6818      	ldr	r0, [r3, #0]
	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4440:	2c00      	cmp	r4, #0
   b4442:	d142      	bne.n	b44ca <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c2>
		success++;
   b4444:	3001      	adds	r0, #1
   b4446:	6018      	str	r0, [r3, #0]
		Log.info("Response received successfully - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b4448:	f00a fde2 	bl	bf010 <__aeabi_i2d>
   b444c:	4680      	mov	r8, r0
   b444e:	6830      	ldr	r0, [r6, #0]
   b4450:	4689      	mov	r9, r1
   b4452:	f00a fddd 	bl	bf010 <__aeabi_i2d>
   b4456:	4602      	mov	r2, r0
   b4458:	460b      	mov	r3, r1
   b445a:	4640      	mov	r0, r8
   b445c:	4649      	mov	r1, r9
   b445e:	f00a ff6b 	bl	bf338 <__aeabi_ddiv>
   b4462:	4b33      	ldr	r3, [pc, #204]	; (b4530 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x228>)
   b4464:	2200      	movs	r2, #0
   b4466:	f00a fe3d 	bl	bf0e4 <__aeabi_dmul>
   b446a:	4602      	mov	r2, r0
   b446c:	460b      	mov	r3, r1
   b446e:	4829      	ldr	r0, [pc, #164]	; (b4514 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x20c>)
   b4470:	4930      	ldr	r1, [pc, #192]	; (b4534 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x22c>)
   b4472:	f7ff fe33 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4476:	4628      	mov	r0, r5
   b4478:	4621      	mov	r1, r4
   b447a:	f00a fb70 	bl	beb5e <digitalWrite>
		return true;
   b447e:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b4480:	b009      	add	sp, #36	; 0x24
   b4482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (strncmp(nodeID.get_deviceID_2(),"000000000000000000000000",24) == 0) {					// This means that the node is not configured in the Gateway's table of nodes and deviceIDs
   b4486:	f001 fc11 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b448a:	4601      	mov	r1, r0
   b448c:	a804      	add	r0, sp, #16
   b448e:	f001 fc47 	bl	b5d20 <_ZNK10nodeIDData14get_deviceID_2Ev>
   b4492:	491e      	ldr	r1, [pc, #120]	; (b450c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x204>)
   b4494:	9804      	ldr	r0, [sp, #16]
   b4496:	2218      	movs	r2, #24
   b4498:	f00b fa59 	bl	bf94e <strncmp>
   b449c:	4605      	mov	r5, r0
   b449e:	a804      	add	r0, sp, #16
   b44a0:	f009 fda6 	bl	bdff0 <_ZN6StringD1Ev>
   b44a4:	2d00      	cmp	r5, #0
   b44a6:	f47f af7b 	bne.w	b43a0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x98>
				Log.info("Node 2 deviceID not set - setting alert");
   b44aa:	4923      	ldr	r1, [pc, #140]	; (b4538 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x230>)
			Log.info("Node number not configured - setting alert");
   b44ac:	4819      	ldr	r0, [pc, #100]	; (b4514 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x20c>)
   b44ae:	f7ff fe15 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			buf[9] = 1;
   b44b2:	2301      	movs	r3, #1
   b44b4:	7263      	strb	r3, [r4, #9]
			break;
   b44b6:	e773      	b.n	b43a0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x98>
			if (strncmp(nodeID.get_deviceID_3(),"000000000000000000000000",24) == 0) {					// This means that the node is not configured in the Gateway's table of nodes and deviceIDs
   b44b8:	f001 fbf8 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b44bc:	4601      	mov	r1, r0
   b44be:	a804      	add	r0, sp, #16
   b44c0:	f001 fc44 	bl	b5d4c <_ZNK10nodeIDData14get_deviceID_3Ev>
   b44c4:	e7e5      	b.n	b4492 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x18a>
			Log.info("Node number not configured - setting alert");
   b44c6:	491d      	ldr	r1, [pc, #116]	; (b453c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x234>)
   b44c8:	e7f0      	b.n	b44ac <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1a4>
	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b44ca:	f00a fda1 	bl	bf010 <__aeabi_i2d>
   b44ce:	4680      	mov	r8, r0
   b44d0:	6830      	ldr	r0, [r6, #0]
   b44d2:	4689      	mov	r9, r1
   b44d4:	f00a fd9c 	bl	bf010 <__aeabi_i2d>
   b44d8:	4602      	mov	r2, r0
   b44da:	460b      	mov	r3, r1
   b44dc:	4640      	mov	r0, r8
   b44de:	4649      	mov	r1, r9
   b44e0:	f00a ff2a 	bl	bf338 <__aeabi_ddiv>
   b44e4:	4b12      	ldr	r3, [pc, #72]	; (b4530 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x228>)
   b44e6:	2200      	movs	r2, #0
   b44e8:	f00a fdfc 	bl	bf0e4 <__aeabi_dmul>
   b44ec:	4602      	mov	r2, r0
   b44ee:	460b      	mov	r3, r1
   b44f0:	4808      	ldr	r0, [pc, #32]	; (b4514 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x20c>)
   b44f2:	4913      	ldr	r1, [pc, #76]	; (b4540 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x238>)
   b44f4:	f7ff fdf2 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b44f8:	4628      	mov	r0, r5
   b44fa:	2100      	movs	r1, #0
   b44fc:	f00a fb2f 	bl	beb5e <digitalWrite>
	return false;
   b4500:	2000      	movs	r0, #0
   b4502:	e7bd      	b.n	b4480 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x178>
   b4504:	2003df34 	.word	0x2003df34
   b4508:	2003df38 	.word	0x2003df38
   b450c:	000bfeab 	.word	0x000bfeab
   b4510:	000bfec4 	.word	0x000bfec4
   b4514:	2003e658 	.word	0x2003e658
   b4518:	000bfe9c 	.word	0x000bfe9c
   b451c:	000c1579 	.word	0x000c1579
   b4520:	000bff3f 	.word	0x000bff3f
   b4524:	000c06e4 	.word	0x000c06e4
   b4528:	2003e0e4 	.word	0x2003e0e4
   b452c:	2003df30 	.word	0x2003df30
   b4530:	40590000 	.word	0x40590000
   b4534:	000bff89 	.word	0x000bff89
   b4538:	000bfeec 	.word	0x000bfeec
   b453c:	000bff14 	.word	0x000bff14
   b4540:	000bffbd 	.word	0x000bffbd

000b4544 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
		Log.info("Join request from deviceID %s with node %d - setting clock and setting sensorType to %d", LoRA_Functions::instance().findDeviceID(1).c_str(), current.get_nodeNumber(), buf[27]);
	}
	return true;
}

bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b4544:	b570      	push	{r4, r5, r6, lr}
   b4546:	b086      	sub	sp, #24

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b4548:	f001 fae4 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b454c:	f001 fd2b 	bl	b5fa6 <_ZNK13sysStatusData15get_magicNumberEv>
   b4550:	4c48      	ldr	r4, [pc, #288]	; (b4674 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x130>)
   b4552:	0a00      	lsrs	r0, r0, #8
   b4554:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b4556:	f001 fadd 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b455a:	f001 fd24 	bl	b5fa6 <_ZNK13sysStatusData15get_magicNumberEv>
   b455e:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b4560:	f00a f8ed 	bl	be73e <_ZN9TimeClass3nowEv>
   b4564:	1600      	asrs	r0, r0, #24
   b4566:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b4568:	f00a f8e9 	bl	be73e <_ZN9TimeClass3nowEv>
   b456c:	1400      	asrs	r0, r0, #16
   b456e:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b4570:	f00a f8e5 	bl	be73e <_ZN9TimeClass3nowEv>
   b4574:	1200      	asrs	r0, r0, #8
   b4576:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b4578:	f00a f8e1 	bl	be73e <_ZN9TimeClass3nowEv>
   b457c:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b457e:	f001 fac9 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4582:	f001 fd15 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4586:	0a00      	lsrs	r0, r0, #8
   b4588:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b458a:	f001 fac3 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b458e:	f001 fd0f 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4592:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_nodeNumber();
   b4594:	f001 fb0e 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4598:	f001 fc1d 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b459c:	7220      	strb	r0, [r4, #8]
	switch (current.get_nodeNumber()) {								// Will need to find a better way to do this as the node capacity grows
   b459e:	f001 fb09 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b45a2:	f001 fc18 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b45a6:	2802      	cmp	r0, #2
   b45a8:	d04f      	beq.n	b464a <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x106>
   b45aa:	2803      	cmp	r0, #3
   b45ac:	d052      	beq.n	b4654 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x110>
   b45ae:	2801      	cmp	r0, #1
   b45b0:	d104      	bne.n	b45bc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x78>
		case 1:
			buf[9] = nodeID.get_sensorType_1();
   b45b2:	f001 fb7b 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b45b6:	f001 fc3b 	bl	b5e30 <_ZNK10nodeIDData16get_sensorType_1Ev>
			break;
		case 2:
			buf[9] = nodeID.get_sensorType_2();
			break;
		case 3:
			buf[9] = nodeID.get_sensorType_3();
   b45ba:	7260      	strb	r0, [r4, #9]
			break;
	}
	
	Log.info("Sent response to sensorType %d node %d, time = %s and frequency %d minutes",  buf[9], current.get_tempNodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b45bc:	7a65      	ldrb	r5, [r4, #9]
   b45be:	f001 faf9 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b45c2:	f001 fc0d 	bl	b5de0 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b45c6:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b45c8:	f00a f8b9 	bl	be73e <_ZN9TimeClass3nowEv>
   b45cc:	4602      	mov	r2, r0
   b45ce:	17c3      	asrs	r3, r0, #31
   b45d0:	a802      	add	r0, sp, #8
   b45d2:	f009 ffaf 	bl	be534 <_ZN9TimeClass7timeStrEx>
   b45d6:	9e02      	ldr	r6, [sp, #8]
   b45d8:	f001 fa9c 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b45dc:	f001 fce8 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b45e0:	462a      	mov	r2, r5
   b45e2:	4623      	mov	r3, r4
   b45e4:	4924      	ldr	r1, [pc, #144]	; (b4678 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x134>)
   b45e6:	e9cd 6000 	strd	r6, r0, [sp]
   b45ea:	4824      	ldr	r0, [pc, #144]	; (b467c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x138>)
   b45ec:	f7ff fd76 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b45f0:	a802      	add	r0, sp, #8
   b45f2:	f009 fcfd 	bl	bdff0 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b45f6:	4b22      	ldr	r3, [pc, #136]	; (b4680 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x13c>)
   b45f8:	881d      	ldrh	r5, [r3, #0]
   b45fa:	2101      	movs	r1, #1
   b45fc:	4628      	mov	r0, r5
   b45fe:	f00a faae 	bl	beb5e <digitalWrite>

	if (manager.sendtoWait(buf, 10, current.get_tempNodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b4602:	f001 fad7 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4606:	f001 fbeb 	bl	b5de0 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b460a:	2202      	movs	r2, #2
   b460c:	4603      	mov	r3, r0
   b460e:	9200      	str	r2, [sp, #0]
   b4610:	4918      	ldr	r1, [pc, #96]	; (b4674 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x130>)
   b4612:	481c      	ldr	r0, [pc, #112]	; (b4684 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x140>)
   b4614:	220a      	movs	r2, #10
   b4616:	f005 f937 	bl	b9888 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b461a:	4604      	mov	r4, r0
   b461c:	b9f8      	cbnz	r0, b465e <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x11a>
		Log.info("Response received successfully");
   b461e:	491a      	ldr	r1, [pc, #104]	; (b4688 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x144>)
   b4620:	4816      	ldr	r0, [pc, #88]	; (b467c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x138>)
   b4622:	f7ff fd5b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b4626:	f001 fac5 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b462a:	4606      	mov	r6, r0
   b462c:	f001 fac2 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4630:	f001 fbd1 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4634:	4601      	mov	r1, r0
   b4636:	4630      	mov	r0, r6
   b4638:	f001 fc55 	bl	b5ee6 <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b463c:	4628      	mov	r0, r5
   b463e:	4621      	mov	r1, r4
   b4640:	f00a fa8d 	bl	beb5e <digitalWrite>
		return true;
   b4644:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");							// Acknowledgement not received - this needs more attention as node is in undefined state
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b4646:	b006      	add	sp, #24
   b4648:	bd70      	pop	{r4, r5, r6, pc}
			buf[9] = nodeID.get_sensorType_2();
   b464a:	f001 fb2f 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b464e:	f001 fbf9 	bl	b5e44 <_ZNK10nodeIDData16get_sensorType_2Ev>
   b4652:	e7b2      	b.n	b45ba <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x76>
			buf[9] = nodeID.get_sensorType_3();
   b4654:	f001 fb2a 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4658:	f001 fbfe 	bl	b5e58 <_ZNK10nodeIDData16get_sensorType_3Ev>
   b465c:	e7ad      	b.n	b45ba <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x76>
	Log.info("Response not acknowledged");							// Acknowledgement not received - this needs more attention as node is in undefined state
   b465e:	490b      	ldr	r1, [pc, #44]	; (b468c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x148>)
   b4660:	4806      	ldr	r0, [pc, #24]	; (b467c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x138>)
   b4662:	f7ff fd3b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b4666:	4628      	mov	r0, r5
   b4668:	2100      	movs	r1, #0
   b466a:	f00a fa78 	bl	beb5e <digitalWrite>
	return false;
   b466e:	2000      	movs	r0, #0
   b4670:	e7e9      	b.n	b4646 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x102>
   b4672:	bf00      	nop
   b4674:	2003df38 	.word	0x2003df38
   b4678:	000bffec 	.word	0x000bffec
   b467c:	2003e658 	.word	0x2003e658
   b4680:	000c06e4 	.word	0x000c06e4
   b4684:	2003e0e4 	.word	0x2003e0e4
   b4688:	000c0037 	.word	0x000c0037
   b468c:	000c0056 	.word	0x000c0056

000b4690 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:


bool LoRA_Functions::decipherAlertReportGateway() {
   b4690:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[2]);
   b4692:	f001 fa8f 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4696:	4b13      	ldr	r3, [pc, #76]	; (b46e4 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b4698:	7899      	ldrb	r1, [r3, #2]
   b469a:	f001 fc42 	bl	b5f22 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b469e:	f001 fa89 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b46a2:	4604      	mov	r4, r0
   b46a4:	f00a f84b 	bl	be73e <_ZN9TimeClass3nowEv>
   b46a8:	17c3      	asrs	r3, r0, #31
   b46aa:	4602      	mov	r2, r0
   b46ac:	4620      	mov	r0, r4
   b46ae:	f001 fd59 	bl	b6164 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI(driver.lastRssi() );
   b46b2:	f001 fa7f 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b46b6:	4604      	mov	r4, r0
   b46b8:	480b      	ldr	r0, [pc, #44]	; (b46e8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b46ba:	f004 feca 	bl	b9452 <_ZN15RHGenericDriver8lastRssiEv>
   b46be:	b281      	uxth	r1, r0
   b46c0:	4620      	mov	r0, r4
   b46c2:	f001 fcbe 	bl	b6042 <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b46c6:	f001 fa75 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b46ca:	f001 fb84 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b46ce:	4907      	ldr	r1, [pc, #28]	; (b46ec <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x5c>)
   b46d0:	4602      	mov	r2, r0
   b46d2:	4807      	ldr	r0, [pc, #28]	; (b46f0 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x60>)
   b46d4:	f7ff fd02 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b46d8:	4b06      	ldr	r3, [pc, #24]	; (b46f4 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x64>)
   b46da:	2206      	movs	r2, #6
   b46dc:	701a      	strb	r2, [r3, #0]

	return true;
}
   b46de:	2001      	movs	r0, #1
   b46e0:	bd10      	pop	{r4, pc}
   b46e2:	bf00      	nop
   b46e4:	2003df38 	.word	0x2003df38
   b46e8:	2003dfb4 	.word	0x2003dfb4
   b46ec:	000c0070 	.word	0x000c0070
   b46f0:	2003e658 	.word	0x2003e658
   b46f4:	2003df28 	.word	0x2003df28

000b46f8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:

bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b46f8:	b570      	push	{r4, r5, r6, lr}
   b46fa:	b088      	sub	sp, #32
	// uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	buf[0] = highByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b46fc:	f001 fa0a 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4700:	f001 fc51 	bl	b5fa6 <_ZNK13sysStatusData15get_magicNumberEv>
   b4704:	4c32      	ldr	r4, [pc, #200]	; (b47d0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd8>)
   b4706:	0a00      	lsrs	r0, r0, #8
   b4708:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b470a:	f001 fa03 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b470e:	f001 fc4a 	bl	b5fa6 <_ZNK13sysStatusData15get_magicNumberEv>
   b4712:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  				// Fourth byte - current time
   b4714:	f00a f813 	bl	be73e <_ZN9TimeClass3nowEv>
   b4718:	1600      	asrs	r0, r0, #24
   b471a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));					// Third byte
   b471c:	f00a f80f 	bl	be73e <_ZN9TimeClass3nowEv>
   b4720:	1400      	asrs	r0, r0, #16
   b4722:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));					// Second byte
   b4724:	f00a f80b 	bl	be73e <_ZN9TimeClass3nowEv>
   b4728:	1200      	asrs	r0, r0, #8
   b472a:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    				// First byte	
   b472c:	f00a f807 	bl	be73e <_ZN9TimeClass3nowEv>
   b4730:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());		// Frequency of reports - for Gateways
   b4732:	f001 f9ef 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4736:	f001 fc3b 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b473a:	0a00      	lsrs	r0, r0, #8
   b473c:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b473e:	f001 f9e9 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4742:	f001 fc35 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[8] = 0;													// Send a zero for the alertcode to reset it
	
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4746:	4b23      	ldr	r3, [pc, #140]	; (b47d4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xdc>)
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b4748:	71e0      	strb	r0, [r4, #7]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b474a:	881e      	ldrh	r6, [r3, #0]
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b474c:	2500      	movs	r5, #0
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b474e:	2101      	movs	r1, #1
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b4750:	7225      	strb	r5, [r4, #8]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4752:	4630      	mov	r0, r6
   b4754:	f00a fa03 	bl	beb5e <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b4758:	f001 fa2c 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b475c:	f001 fb3b 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4760:	2206      	movs	r2, #6
   b4762:	4603      	mov	r3, r0
   b4764:	9200      	str	r2, [sp, #0]
   b4766:	4621      	mov	r1, r4
   b4768:	481b      	ldr	r0, [pc, #108]	; (b47d8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe0>)
   b476a:	2209      	movs	r2, #9
   b476c:	f005 f88c 	bl	b9888 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4770:	4604      	mov	r4, r0
   b4772:	bb10      	cbnz	r0, b47ba <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc2>
		Log.info("Sent acknowledgment to Node %d, time = %s and frequency %d minutes", current.get_nodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b4774:	f001 fa1e 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4778:	f001 fb2d 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b477c:	4605      	mov	r5, r0
   b477e:	f009 ffde 	bl	be73e <_ZN9TimeClass3nowEv>
   b4782:	4602      	mov	r2, r0
   b4784:	17c3      	asrs	r3, r0, #31
   b4786:	a804      	add	r0, sp, #16
   b4788:	f009 fed4 	bl	be534 <_ZN9TimeClass7timeStrEx>
   b478c:	9b04      	ldr	r3, [sp, #16]
   b478e:	9303      	str	r3, [sp, #12]
   b4790:	f001 f9c0 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4794:	f001 fc0c 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4798:	9b03      	ldr	r3, [sp, #12]
   b479a:	4910      	ldr	r1, [pc, #64]	; (b47dc <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe4>)
   b479c:	9000      	str	r0, [sp, #0]
   b479e:	462a      	mov	r2, r5
   b47a0:	480f      	ldr	r0, [pc, #60]	; (b47e0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b47a2:	f7ff fc9b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b47a6:	a804      	add	r0, sp, #16
   b47a8:	f009 fc22 	bl	bdff0 <_ZN6StringD1Ev>
		digitalWrite(BLUE_LED,LOW);
   b47ac:	4630      	mov	r0, r6
   b47ae:	4621      	mov	r1, r4
   b47b0:	f00a f9d5 	bl	beb5e <digitalWrite>
		return true;
   b47b4:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b47b6:	b008      	add	sp, #32
   b47b8:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b47ba:	490a      	ldr	r1, [pc, #40]	; (b47e4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xec>)
   b47bc:	4808      	ldr	r0, [pc, #32]	; (b47e0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b47be:	f7ff fc8d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b47c2:	4630      	mov	r0, r6
   b47c4:	4629      	mov	r1, r5
   b47c6:	f00a f9ca 	bl	beb5e <digitalWrite>
	return false;
   b47ca:	4628      	mov	r0, r5
   b47cc:	e7f3      	b.n	b47b6 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xbe>
   b47ce:	bf00      	nop
   b47d0:	2003df38 	.word	0x2003df38
   b47d4:	000c06e4 	.word	0x000c06e4
   b47d8:	2003e0e4 	.word	0x2003e0e4
   b47dc:	000c0095 	.word	0x000c0095
   b47e0:	2003e658 	.word	0x2003e658
   b47e4:	000c0056 	.word	0x000c0056

000b47e8 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>:
bool LoRA_Functions::respondToLoRAMessageGateway() {
   b47e8:	b510      	push	{r4, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b47ea:	4c13      	ldr	r4, [pc, #76]	; (b4838 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x50>)
   b47ec:	4b13      	ldr	r3, [pc, #76]	; (b483c <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x54>)
   b47ee:	7822      	ldrb	r2, [r4, #0]
   b47f0:	4913      	ldr	r1, [pc, #76]	; (b4840 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x58>)
   b47f2:	4814      	ldr	r0, [pc, #80]	; (b4844 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x5c>)
   b47f4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b47f8:	f7ff fc70 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b47fc:	7823      	ldrb	r3, [r4, #0]
   b47fe:	2b04      	cmp	r3, #4
   b4800:	d00c      	beq.n	b481c <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x34>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b4802:	7823      	ldrb	r3, [r4, #0]
   b4804:	2b02      	cmp	r3, #2
   b4806:	d104      	bne.n	b4812 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x2a>
   b4808:	f7ff fc80 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b480c:	f7ff fe9a 	bl	b4544 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b4810:	b950      	cbnz	r0, b4828 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x40>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4812:	7823      	ldrb	r3, [r4, #0]
   b4814:	2b06      	cmp	r3, #6
   b4816:	d009      	beq.n	b482c <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x44>
	return false; 
   b4818:	2000      	movs	r0, #0
   b481a:	e006      	b.n	b482a <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x42>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b481c:	f7ff fc76 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4820:	f7ff fd72 	bl	b4308 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b4824:	2800      	cmp	r0, #0
   b4826:	d0ec      	beq.n	b4802 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x1a>
   b4828:	2001      	movs	r0, #1
}
   b482a:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b482c:	f7ff fc6e 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
}
   b4830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4834:	f7ff bf60 	b.w	b46f8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b4838:	2003df28 	.word	0x2003df28
   b483c:	2003dd24 	.word	0x2003dd24
   b4840:	000c00d8 	.word	0x000c00d8
   b4844:	2003e658 	.word	0x2003e658

000b4848 <_ZN14LoRA_Functions14findNodeNumberEPKc>:


uint8_t LoRA_Functions::findNodeNumber(const char* deviceID) {
   b4848:	b530      	push	{r4, r5, lr}
   b484a:	b085      	sub	sp, #20
   b484c:	460c      	mov	r4, r1

	if (strncmp(deviceID,nodeID.get_deviceID_1(),24) == 0) {
   b484e:	f001 fa2d 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4852:	4601      	mov	r1, r0
   b4854:	4668      	mov	r0, sp
   b4856:	f001 fa4d 	bl	b5cf4 <_ZNK10nodeIDData14get_deviceID_1Ev>
   b485a:	9900      	ldr	r1, [sp, #0]
   b485c:	2218      	movs	r2, #24
   b485e:	4620      	mov	r0, r4
   b4860:	f00b f875 	bl	bf94e <strncmp>
   b4864:	4605      	mov	r5, r0
   b4866:	4668      	mov	r0, sp
   b4868:	f009 fbc2 	bl	bdff0 <_ZN6StringD1Ev>
   b486c:	b9ad      	cbnz	r5, b489a <_ZN14LoRA_Functions14findNodeNumberEPKc+0x52>
		Log.info("deviceID on file - retreiving nodeID number %d", nodeID.get_nodeNumber_1());
   b486e:	f001 fa1d 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4872:	f001 fad8 	bl	b5e26 <_ZNK10nodeIDData16get_nodeNumber_1Ev>
   b4876:	495d      	ldr	r1, [pc, #372]	; (b49ec <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a4>)
   b4878:	4602      	mov	r2, r0
   b487a:	485d      	ldr	r0, [pc, #372]	; (b49f0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b487c:	f7ff fc2e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	else {
		if (nodeID.get_lastConnection_1() == 0) {
			Log.info("deviceID not on file - saving as nodeID number %d", nodeID.get_nodeNumber_1());
			nodeID.set_nodeNumber_1(1);
			nodeID.set_deviceID_1(deviceID);
			nodeID.set_lastConnection_1(Time.now());
   b4880:	f001 fa14 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4884:	4604      	mov	r4, r0
   b4886:	f009 ff5a 	bl	be73e <_ZN9TimeClass3nowEv>
   b488a:	4602      	mov	r2, r0
   b488c:	17c3      	asrs	r3, r0, #31
   b488e:	4620      	mov	r0, r4
   b4890:	f001 fc6d 	bl	b616e <_ZN10nodeIDData20set_lastConnection_1Ex>
			return 1;
   b4894:	2001      	movs	r0, #1
			nodeID.set_lastConnection_3(Time.now());
			return 3;
		}	
	}
	return 0;
}
   b4896:	b005      	add	sp, #20
   b4898:	bd30      	pop	{r4, r5, pc}
	else if (strncmp(deviceID,nodeID.get_deviceID_2(),24) == 0) {
   b489a:	f001 fa07 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b489e:	4601      	mov	r1, r0
   b48a0:	4668      	mov	r0, sp
   b48a2:	f001 fa3d 	bl	b5d20 <_ZNK10nodeIDData14get_deviceID_2Ev>
   b48a6:	9900      	ldr	r1, [sp, #0]
   b48a8:	2218      	movs	r2, #24
   b48aa:	4620      	mov	r0, r4
   b48ac:	f00b f84f 	bl	bf94e <strncmp>
   b48b0:	4605      	mov	r5, r0
   b48b2:	4668      	mov	r0, sp
   b48b4:	f009 fb9c 	bl	bdff0 <_ZN6StringD1Ev>
   b48b8:	b9a5      	cbnz	r5, b48e4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x9c>
		Log.info("deviceID on file - retreiving nodeID number %d", nodeID.get_nodeNumber_2());
   b48ba:	f001 f9f7 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b48be:	f001 fabc 	bl	b5e3a <_ZNK10nodeIDData16get_nodeNumber_2Ev>
   b48c2:	494a      	ldr	r1, [pc, #296]	; (b49ec <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a4>)
   b48c4:	4602      	mov	r2, r0
   b48c6:	484a      	ldr	r0, [pc, #296]	; (b49f0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b48c8:	f7ff fc08 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		nodeID.set_lastConnection_1(Time.now());
   b48cc:	f001 f9ee 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b48d0:	4604      	mov	r4, r0
   b48d2:	f009 ff34 	bl	be73e <_ZN9TimeClass3nowEv>
   b48d6:	4602      	mov	r2, r0
   b48d8:	17c3      	asrs	r3, r0, #31
   b48da:	4620      	mov	r0, r4
   b48dc:	f001 fc47 	bl	b616e <_ZN10nodeIDData20set_lastConnection_1Ex>
			return 2;
   b48e0:	2002      	movs	r0, #2
   b48e2:	e7d8      	b.n	b4896 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4e>
	else if (strncmp(deviceID,nodeID.get_deviceID_3(),24) == 0) {		
   b48e4:	f001 f9e2 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b48e8:	4601      	mov	r1, r0
   b48ea:	4668      	mov	r0, sp
   b48ec:	f001 fa2e 	bl	b5d4c <_ZNK10nodeIDData14get_deviceID_3Ev>
   b48f0:	9900      	ldr	r1, [sp, #0]
   b48f2:	2218      	movs	r2, #24
   b48f4:	4620      	mov	r0, r4
   b48f6:	f00b f82a 	bl	bf94e <strncmp>
   b48fa:	4605      	mov	r5, r0
   b48fc:	4668      	mov	r0, sp
   b48fe:	f009 fb77 	bl	bdff0 <_ZN6StringD1Ev>
   b4902:	b9a5      	cbnz	r5, b492e <_ZN14LoRA_Functions14findNodeNumberEPKc+0xe6>
		Log.info("deviceID on file - retreiving nodeID number %d", nodeID.get_nodeNumber_3());
   b4904:	f001 f9d2 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4908:	f001 faa1 	bl	b5e4e <_ZNK10nodeIDData16get_nodeNumber_3Ev>
   b490c:	4937      	ldr	r1, [pc, #220]	; (b49ec <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a4>)
   b490e:	4602      	mov	r2, r0
   b4910:	4837      	ldr	r0, [pc, #220]	; (b49f0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b4912:	f7ff fbe3 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		nodeID.set_lastConnection_1(Time.now());
   b4916:	f001 f9c9 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b491a:	4604      	mov	r4, r0
   b491c:	f009 ff0f 	bl	be73e <_ZN9TimeClass3nowEv>
   b4920:	4602      	mov	r2, r0
   b4922:	17c3      	asrs	r3, r0, #31
   b4924:	4620      	mov	r0, r4
   b4926:	f001 fc22 	bl	b616e <_ZN10nodeIDData20set_lastConnection_1Ex>
			return 3;
   b492a:	2003      	movs	r0, #3
   b492c:	e7b3      	b.n	b4896 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4e>
		if (nodeID.get_lastConnection_1() == 0) {
   b492e:	f001 f9bd 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4932:	f001 fbb4 	bl	b609e <_ZNK10nodeIDData20get_lastConnection_1Ev>
   b4936:	ea50 0301 	orrs.w	r3, r0, r1
   b493a:	d113      	bne.n	b4964 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x11c>
			Log.info("deviceID not on file - saving as nodeID number %d", nodeID.get_nodeNumber_1());
   b493c:	f001 f9b6 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4940:	f001 fa71 	bl	b5e26 <_ZNK10nodeIDData16get_nodeNumber_1Ev>
   b4944:	492b      	ldr	r1, [pc, #172]	; (b49f4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1ac>)
   b4946:	4602      	mov	r2, r0
   b4948:	4829      	ldr	r0, [pc, #164]	; (b49f0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b494a:	f7ff fbc7 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			nodeID.set_nodeNumber_1(1);
   b494e:	f001 f9ad 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4952:	2101      	movs	r1, #1
   b4954:	f001 faf1 	bl	b5f3a <_ZN10nodeIDData16set_nodeNumber_1Eh>
			nodeID.set_deviceID_1(deviceID);
   b4958:	f001 f9a8 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b495c:	4621      	mov	r1, r4
   b495e:	f001 f9d9 	bl	b5d14 <_ZN10nodeIDData14set_deviceID_1EPKc>
   b4962:	e78d      	b.n	b4880 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x38>
		else if (nodeID.get_lastConnection_2() == 0) {
   b4964:	f001 f9a2 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4968:	f001 fb9e 	bl	b60a8 <_ZNK10nodeIDData20get_lastConnection_2Ev>
   b496c:	ea50 0301 	orrs.w	r3, r0, r1
   b4970:	d11d      	bne.n	b49ae <_ZN14LoRA_Functions14findNodeNumberEPKc+0x166>
			Log.info("deviceID not on file - saving as nodeID number %d", nodeID.get_nodeNumber_2());
   b4972:	f001 f99b 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4976:	f001 fa60 	bl	b5e3a <_ZNK10nodeIDData16get_nodeNumber_2Ev>
   b497a:	491e      	ldr	r1, [pc, #120]	; (b49f4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1ac>)
   b497c:	4602      	mov	r2, r0
   b497e:	481c      	ldr	r0, [pc, #112]	; (b49f0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b4980:	f7ff fbac 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			nodeID.set_nodeNumber_2(2);
   b4984:	f001 f992 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4988:	2102      	movs	r1, #2
   b498a:	f001 fae2 	bl	b5f52 <_ZN10nodeIDData16set_nodeNumber_2Eh>
			nodeID.set_deviceID_2(deviceID);
   b498e:	f001 f98d 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4992:	4621      	mov	r1, r4
   b4994:	f001 f9d4 	bl	b5d40 <_ZN10nodeIDData14set_deviceID_2EPKc>
			nodeID.set_lastConnection_2(Time.now());
   b4998:	f001 f988 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b499c:	4604      	mov	r4, r0
   b499e:	f009 fece 	bl	be73e <_ZN9TimeClass3nowEv>
   b49a2:	4602      	mov	r2, r0
   b49a4:	17c3      	asrs	r3, r0, #31
   b49a6:	4620      	mov	r0, r4
   b49a8:	f001 fbe6 	bl	b6178 <_ZN10nodeIDData20set_lastConnection_2Ex>
   b49ac:	e798      	b.n	b48e0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x98>
			Log.info("deviceID not on file - saving as nodeID number %d", nodeID.get_nodeNumber_3());
   b49ae:	f001 f97d 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b49b2:	f001 fa4c 	bl	b5e4e <_ZNK10nodeIDData16get_nodeNumber_3Ev>
   b49b6:	490f      	ldr	r1, [pc, #60]	; (b49f4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1ac>)
   b49b8:	4602      	mov	r2, r0
   b49ba:	480d      	ldr	r0, [pc, #52]	; (b49f0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a8>)
   b49bc:	f7ff fb8e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			nodeID.set_nodeNumber_3(3);
   b49c0:	f001 f974 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b49c4:	2103      	movs	r1, #3
   b49c6:	f001 fad0 	bl	b5f6a <_ZN10nodeIDData16set_nodeNumber_3Eh>
			nodeID.set_deviceID_3(deviceID);
   b49ca:	f001 f96f 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b49ce:	4621      	mov	r1, r4
   b49d0:	f001 f9cc 	bl	b5d6c <_ZN10nodeIDData14set_deviceID_3EPKc>
			nodeID.set_lastConnection_3(Time.now());
   b49d4:	f001 f96a 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b49d8:	4604      	mov	r4, r0
   b49da:	f009 feb0 	bl	be73e <_ZN9TimeClass3nowEv>
   b49de:	4602      	mov	r2, r0
   b49e0:	17c3      	asrs	r3, r0, #31
   b49e2:	4620      	mov	r0, r4
   b49e4:	f001 fbcd 	bl	b6182 <_ZN10nodeIDData20set_lastConnection_3Ex>
   b49e8:	e79f      	b.n	b492a <_ZN14LoRA_Functions14findNodeNumberEPKc+0xe2>
   b49ea:	bf00      	nop
   b49ec:	000c00fd 	.word	0x000c00fd
   b49f0:	2003e658 	.word	0x2003e658
   b49f4:	000c012c 	.word	0x000c012c

000b49f8 <_ZN14LoRA_Functions12findDeviceIDEh>:

String LoRA_Functions::findDeviceID(uint8_t nodeNumber) {
   b49f8:	b538      	push	{r3, r4, r5, lr}
   b49fa:	4615      	mov	r5, r2
   b49fc:	4604      	mov	r4, r0
	if (nodeNumber == nodeID.get_nodeNumber_1()) return nodeID.get_deviceID_1();
   b49fe:	f001 f955 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4a02:	f001 fa10 	bl	b5e26 <_ZNK10nodeIDData16get_nodeNumber_1Ev>
   b4a06:	42a8      	cmp	r0, r5
   b4a08:	d107      	bne.n	b4a1a <_ZN14LoRA_Functions12findDeviceIDEh+0x22>
   b4a0a:	f001 f94f 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4a0e:	4601      	mov	r1, r0
   b4a10:	4620      	mov	r0, r4
   b4a12:	f001 f96f 	bl	b5cf4 <_ZNK10nodeIDData14get_deviceID_1Ev>
	else if (nodeNumber == nodeID.get_nodeNumber_2()) return nodeID.get_deviceID_2();
	else if (nodeNumber == nodeID.get_nodeNumber_3()) return nodeID.get_deviceID_3();
	else return "null";
   b4a16:	4620      	mov	r0, r4
   b4a18:	bd38      	pop	{r3, r4, r5, pc}
	else if (nodeNumber == nodeID.get_nodeNumber_2()) return nodeID.get_deviceID_2();
   b4a1a:	f001 f947 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4a1e:	f001 fa0c 	bl	b5e3a <_ZNK10nodeIDData16get_nodeNumber_2Ev>
   b4a22:	42a8      	cmp	r0, r5
   b4a24:	d106      	bne.n	b4a34 <_ZN14LoRA_Functions12findDeviceIDEh+0x3c>
   b4a26:	f001 f941 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4a2a:	4601      	mov	r1, r0
   b4a2c:	4620      	mov	r0, r4
   b4a2e:	f001 f977 	bl	b5d20 <_ZNK10nodeIDData14get_deviceID_2Ev>
   b4a32:	e7f0      	b.n	b4a16 <_ZN14LoRA_Functions12findDeviceIDEh+0x1e>
	else if (nodeNumber == nodeID.get_nodeNumber_3()) return nodeID.get_deviceID_3();
   b4a34:	f001 f93a 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4a38:	f001 fa09 	bl	b5e4e <_ZNK10nodeIDData16get_nodeNumber_3Ev>
   b4a3c:	42a8      	cmp	r0, r5
   b4a3e:	d106      	bne.n	b4a4e <_ZN14LoRA_Functions12findDeviceIDEh+0x56>
   b4a40:	f001 f934 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4a44:	4601      	mov	r1, r0
   b4a46:	4620      	mov	r0, r4
   b4a48:	f001 f980 	bl	b5d4c <_ZNK10nodeIDData14get_deviceID_3Ev>
   b4a4c:	e7e3      	b.n	b4a16 <_ZN14LoRA_Functions12findDeviceIDEh+0x1e>
	else return "null";
   b4a4e:	4902      	ldr	r1, [pc, #8]	; (b4a58 <_ZN14LoRA_Functions12findDeviceIDEh+0x60>)
   b4a50:	4620      	mov	r0, r4
   b4a52:	f009 fb18 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a56:	e7de      	b.n	b4a16 <_ZN14LoRA_Functions12findDeviceIDEh+0x1e>
   b4a58:	000c015e 	.word	0x000c015e

000b4a5c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lora_state = JOIN_ACK;			// Prepare to respond
   b4a5e:	4b3c      	ldr	r3, [pc, #240]	; (b4b50 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xf4>)
   b4a60:	2202      	movs	r2, #2
   b4a62:	701a      	strb	r2, [r3, #0]
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4a64:	b091      	sub	sp, #68	; 0x44
		nodeDeviceID[i] = buf[i+2];
   b4a66:	4b3b      	ldr	r3, [pc, #236]	; (b4b54 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xf8>)
   b4a68:	ac09      	add	r4, sp, #36	; 0x24
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4a6a:	4606      	mov	r6, r0
		nodeDeviceID[i] = buf[i+2];
   b4a6c:	f103 0218 	add.w	r2, r3, #24
   b4a70:	4627      	mov	r7, r4
   b4a72:	6818      	ldr	r0, [r3, #0]
   b4a74:	6859      	ldr	r1, [r3, #4]
   b4a76:	4625      	mov	r5, r4
   b4a78:	c503      	stmia	r5!, {r0, r1}
   b4a7a:	3308      	adds	r3, #8
   b4a7c:	4293      	cmp	r3, r2
   b4a7e:	462c      	mov	r4, r5
   b4a80:	d1f7      	bne.n	b4a72 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x16>
   b4a82:	781b      	ldrb	r3, [r3, #0]
   b4a84:	702b      	strb	r3, [r5, #0]
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4a86:	f001 f895 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4a8a:	4604      	mov	r4, r0
   b4a8c:	f001 f892 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4a90:	f001 f9a1 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4a94:	4601      	mov	r1, r0
   b4a96:	4620      	mov	r0, r4
   b4a98:	f001 fa25 	bl	b5ee6 <_ZN17currentStatusData18set_tempNodeNumberEh>
	if (current.get_nodeNumber() > 10) {							// An unconfigured node
   b4a9c:	f001 f88a 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4aa0:	f001 f999 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4aa4:	280a      	cmp	r0, #10
   b4aa6:	d91d      	bls.n	b4ae4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x88>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID));		// Look up the new node number
   b4aa8:	f001 f884 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4aac:	4639      	mov	r1, r7
   b4aae:	4604      	mov	r4, r0
   b4ab0:	4630      	mov	r0, r6
   b4ab2:	f7ff fec9 	bl	b4848 <_ZN14LoRA_Functions14findNodeNumberEPKc>
   b4ab6:	4601      	mov	r1, r0
   b4ab8:	4620      	mov	r0, r4
   b4aba:	f001 fa0e 	bl	b5eda <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Received from deviceID of %s will change node number from %d to %d",  nodeDeviceID, current.get_tempNodeNumber(), current.get_nodeNumber());
   b4abe:	f001 f879 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4ac2:	f001 f98d 	bl	b5de0 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4ac6:	9003      	str	r0, [sp, #12]
   b4ac8:	f001 f874 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4acc:	f001 f983 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4ad0:	9b03      	ldr	r3, [sp, #12]
   b4ad2:	9000      	str	r0, [sp, #0]
   b4ad4:	4920      	ldr	r1, [pc, #128]	; (b4b58 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xfc>)
   b4ad6:	4821      	ldr	r0, [pc, #132]	; (b4b5c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x100>)
   b4ad8:	463a      	mov	r2, r7
   b4ada:	f7ff faff 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
}
   b4ade:	2001      	movs	r0, #1
   b4ae0:	b011      	add	sp, #68	; 0x44
   b4ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (current.get_nodeNumber()) {								// Will need to find a better way to do this as the node capacity grows
   b4ae4:	f001 f866 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4ae8:	f001 f975 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4aec:	2802      	cmp	r0, #2
   b4aee:	4c1c      	ldr	r4, [pc, #112]	; (b4b60 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x104>)
   b4af0:	d021      	beq.n	b4b36 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xda>
   b4af2:	2803      	cmp	r0, #3
   b4af4:	d025      	beq.n	b4b42 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xe6>
   b4af6:	2801      	cmp	r0, #1
   b4af8:	d104      	bne.n	b4b04 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xa8>
			nodeID.set_sensorType_1(buf[27]);
   b4afa:	f001 f8d7 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4afe:	7ee1      	ldrb	r1, [r4, #27]
   b4b00:	f001 fa21 	bl	b5f46 <_ZN10nodeIDData16set_sensorType_1Eh>
		Log.info("Join request from deviceID %s with node %d - setting clock and setting sensorType to %d", LoRA_Functions::instance().findDeviceID(1).c_str(), current.get_nodeNumber(), buf[27]);
   b4b04:	f7ff fb02 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4b08:	2201      	movs	r2, #1
   b4b0a:	4601      	mov	r1, r0
   b4b0c:	a805      	add	r0, sp, #20
   b4b0e:	f7ff ff73 	bl	b49f8 <_ZN14LoRA_Functions12findDeviceIDEh>
   b4b12:	9a05      	ldr	r2, [sp, #20]
   b4b14:	9203      	str	r2, [sp, #12]
   b4b16:	f001 f84d 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4b1a:	f001 f95c 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4b1e:	7ee1      	ldrb	r1, [r4, #27]
   b4b20:	9100      	str	r1, [sp, #0]
   b4b22:	4603      	mov	r3, r0
   b4b24:	9a03      	ldr	r2, [sp, #12]
   b4b26:	490f      	ldr	r1, [pc, #60]	; (b4b64 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x108>)
   b4b28:	480c      	ldr	r0, [pc, #48]	; (b4b5c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x100>)
   b4b2a:	f7ff fad7 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4b2e:	a805      	add	r0, sp, #20
   b4b30:	f009 fa5e 	bl	bdff0 <_ZN6StringD1Ev>
   b4b34:	e7d3      	b.n	b4ade <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x82>
			nodeID.set_sensorType_2(buf[27]);
   b4b36:	f001 f8b9 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4b3a:	7ee1      	ldrb	r1, [r4, #27]
   b4b3c:	f001 fa0f 	bl	b5f5e <_ZN10nodeIDData16set_sensorType_2Eh>
			break;
   b4b40:	e7e0      	b.n	b4b04 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xa8>
			nodeID.set_sensorType_3(buf[27]);
   b4b42:	f001 f8b3 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b4b46:	7ee1      	ldrb	r1, [r4, #27]
   b4b48:	f001 fa15 	bl	b5f76 <_ZN10nodeIDData16set_sensorType_3Eh>
			break;
   b4b4c:	e7da      	b.n	b4b04 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xa8>
   b4b4e:	bf00      	nop
   b4b50:	2003df28 	.word	0x2003df28
   b4b54:	2003df3a 	.word	0x2003df3a
   b4b58:	000c0163 	.word	0x000c0163
   b4b5c:	2003e658 	.word	0x2003e658
   b4b60:	2003df38 	.word	0x2003df38
   b4b64:	000c01a6 	.word	0x000c01a6

000b4b68 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b4b68:	b570      	push	{r4, r5, r6, lr}
   b4b6a:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b4b6c:	2379      	movs	r3, #121	; 0x79
   b4b6e:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b4b72:	f10d 031f 	add.w	r3, sp, #31
   b4b76:	9303      	str	r3, [sp, #12]
   b4b78:	f10d 031e 	add.w	r3, sp, #30
   b4b7c:	4e44      	ldr	r6, [pc, #272]	; (b4c90 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x128>)
   b4b7e:	9302      	str	r3, [sp, #8]
   b4b80:	f10d 031d 	add.w	r3, sp, #29
   b4b84:	9301      	str	r3, [sp, #4]
   b4b86:	ab07      	add	r3, sp, #28
   b4b88:	9300      	str	r3, [sp, #0]
   b4b8a:	4842      	ldr	r0, [pc, #264]	; (b4c94 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x12c>)
   b4b8c:	f10d 031b 	add.w	r3, sp, #27
   b4b90:	f10d 021a 	add.w	r2, sp, #26
   b4b94:	4631      	mov	r1, r6
   b4b96:	f004 feab 	bl	b98f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b4b9a:	b910      	cbnz	r0, b4ba2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false; 
   b4b9c:	2000      	movs	r0, #0
}
   b4b9e:	b008      	add	sp, #32
   b4ba0:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4ba2:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b4ba6:	2400      	movs	r4, #0
   b4ba8:	54f4      	strb	r4, [r6, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b4baa:	8835      	ldrh	r5, [r6, #0]
   b4bac:	f000 ffb2 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4bb0:	f001 f9f9 	bl	b5fa6 <_ZNK13sysStatusData15get_magicNumberEv>
   b4bb4:	ba6d      	rev16	r5, r5
   b4bb6:	b2ad      	uxth	r5, r5
   b4bb8:	42a8      	cmp	r0, r5
   b4bba:	d00e      	beq.n	b4bda <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x72>
			Log.info("Message magic number of %d did not match the Magic Number in memory %d - Ignoring", (buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b4bbc:	8832      	ldrh	r2, [r6, #0]
   b4bbe:	ba52      	rev16	r2, r2
   b4bc0:	b292      	uxth	r2, r2
   b4bc2:	9205      	str	r2, [sp, #20]
   b4bc4:	f000 ffa6 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4bc8:	f001 f9ed 	bl	b5fa6 <_ZNK13sysStatusData15get_magicNumberEv>
   b4bcc:	9a05      	ldr	r2, [sp, #20]
   b4bce:	4932      	ldr	r1, [pc, #200]	; (b4c98 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x130>)
   b4bd0:	4603      	mov	r3, r0
   b4bd2:	4832      	ldr	r0, [pc, #200]	; (b4c9c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4bd4:	f7ff fa82 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b4bd8:	e7e0      	b.n	b4b9c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		current.set_nodeNumber(from);
   b4bda:	f000 ffeb 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4bde:	f89d 101b 	ldrb.w	r1, [sp, #27]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4be2:	4c2f      	ldr	r4, [pc, #188]	; (b4ca0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x138>)
		current.set_nodeNumber(from);
   b4be4:	f001 f979 	bl	b5eda <_ZN17currentStatusData14set_nodeNumberEh>
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4be8:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b4bec:	f003 030f 	and.w	r3, r3, #15
   b4bf0:	7023      	strb	r3, [r4, #0]
		Log.info("From node %d with rssi=%d - a %s message of length %d in %d hops", current.get_nodeNumber(), driver.lastRssi(), loraStateNames[lora_state], len, hops);
   b4bf2:	f000 ffdf 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4bf6:	f001 f8ee 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4bfa:	9005      	str	r0, [sp, #20]
   b4bfc:	4829      	ldr	r0, [pc, #164]	; (b4ca4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4bfe:	f004 fc28 	bl	b9452 <_ZN15RHGenericDriver8lastRssiEv>
   b4c02:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b4c06:	9102      	str	r1, [sp, #8]
   b4c08:	f89d 101a 	ldrb.w	r1, [sp, #26]
   b4c0c:	9101      	str	r1, [sp, #4]
   b4c0e:	4603      	mov	r3, r0
   b4c10:	4925      	ldr	r1, [pc, #148]	; (b4ca8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b4c12:	7820      	ldrb	r0, [r4, #0]
   b4c14:	9a05      	ldr	r2, [sp, #20]
   b4c16:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4c1a:	9100      	str	r1, [sp, #0]
   b4c1c:	481f      	ldr	r0, [pc, #124]	; (b4c9c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4c1e:	4923      	ldr	r1, [pc, #140]	; (b4cac <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x144>)
   b4c20:	f7ff fa5c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4c24:	7823      	ldrb	r3, [r4, #0]
   b4c26:	2b03      	cmp	r3, #3
   b4c28:	d02a      	beq.n	b4c80 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x118>
		if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b4c2a:	7823      	ldrb	r3, [r4, #0]
   b4c2c:	2b01      	cmp	r3, #1
   b4c2e:	d105      	bne.n	b4c3c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xd4>
   b4c30:	f7ff fa6c 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c34:	f7ff ff12 	bl	b4a5c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b4c38:	2800      	cmp	r0, #0
   b4c3a:	d0af      	beq.n	b4b9c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4c3c:	7823      	ldrb	r3, [r4, #0]
   b4c3e:	2b05      	cmp	r3, #5
   b4c40:	d105      	bne.n	b4c4e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xe6>
   b4c42:	f7ff fa63 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c46:	f7ff fd23 	bl	b4690 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b4c4a:	2800      	cmp	r0, #0
   b4c4c:	d0a6      	beq.n	b4b9c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (frequencyUpdated) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b4c4e:	4b18      	ldr	r3, [pc, #96]	; (b4cb0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4c50:	781a      	ldrb	r2, [r3, #0]
   b4c52:	b182      	cbz	r2, b4c76 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x10e>
			frequencyUpdated = false;
   b4c54:	2200      	movs	r2, #0
   b4c56:	701a      	strb	r2, [r3, #0]
			sysStatus.set_frequencyMinutes(updatedFrequencyMins);		// This was the temporary value from the particle function
   b4c58:	f000 ff5c 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4c5c:	4b15      	ldr	r3, [pc, #84]	; (b4cb4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x14c>)
   b4c5e:	8819      	ldrh	r1, [r3, #0]
   b4c60:	f001 f9e3 	bl	b602a <_ZN13sysStatusData20set_frequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b4c64:	f000 ff56 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4c68:	f001 f9a2 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4c6c:	4912      	ldr	r1, [pc, #72]	; (b4cb8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x150>)
   b4c6e:	4602      	mov	r2, r0
   b4c70:	480a      	ldr	r0, [pc, #40]	; (b4c9c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4c72:	f7ff fa33 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondToLoRAMessageGateway()) return true;
   b4c76:	f7ff fa49 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c7a:	f7ff fdb5 	bl	b47e8 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>
   b4c7e:	e78e      	b.n	b4b9e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4c80:	f7ff fa44 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4c84:	f7ff fae0 	bl	b4248 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
   b4c88:	2800      	cmp	r0, #0
   b4c8a:	d1ce      	bne.n	b4c2a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xc2>
   b4c8c:	e786      	b.n	b4b9c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
   b4c8e:	bf00      	nop
   b4c90:	2003df38 	.word	0x2003df38
   b4c94:	2003e0e4 	.word	0x2003e0e4
   b4c98:	000c01fe 	.word	0x000c01fe
   b4c9c:	2003e658 	.word	0x2003e658
   b4ca0:	2003df28 	.word	0x2003df28
   b4ca4:	2003dfb4 	.word	0x2003dfb4
   b4ca8:	2003dd24 	.word	0x2003dd24
   b4cac:	000c0250 	.word	0x000c0250
   b4cb0:	2003e409 	.word	0x2003e409
   b4cb4:	2003de40 	.word	0x2003de40
   b4cb8:	000c0291 	.word	0x000c0291

000b4cbc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
   b4cbc:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4cbe:	4a08      	ldr	r2, [pc, #32]	; (b4ce0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b4cc0:	4c08      	ldr	r4, [pc, #32]	; (b4ce4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b4cc2:	4909      	ldr	r1, [pc, #36]	; (b4ce8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b4cc4:	7812      	ldrb	r2, [r2, #0]
   b4cc6:	7809      	ldrb	r1, [r1, #0]
   b4cc8:	4b08      	ldr	r3, [pc, #32]	; (b4cec <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b4cca:	4620      	mov	r0, r4
   b4ccc:	f005 fad2 	bl	ba274 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4cd0:	4621      	mov	r1, r4
   b4cd2:	4807      	ldr	r0, [pc, #28]	; (b4cf0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
   b4cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4cd8:	2200      	movs	r2, #0
   b4cda:	f004 bdcb 	b.w	b9874 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4cde:	bf00      	nop
   b4ce0:	000c06ea 	.word	0x000c06ea
   b4ce4:	2003dfb4 	.word	0x2003dfb4
   b4ce8:	000c06e8 	.word	0x000c06e8
   b4cec:	2003e45c 	.word	0x2003e45c
   b4cf0:	2003e0e4 	.word	0x2003e0e4

000b4cf4 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4cf4:	4b01      	ldr	r3, [pc, #4]	; (b4cfc <_Z18outOfMemoryHandleryi+0x8>)
   b4cf6:	601a      	str	r2, [r3, #0]
}
   b4cf8:	4770      	bx	lr
   b4cfa:	bf00      	nop
   b4cfc:	2003dd9c 	.word	0x2003dd9c

000b4d00 <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b4d00:	4b01      	ldr	r3, [pc, #4]	; (b4d08 <_Z13userSwitchISRv+0x8>)
   b4d02:	2201      	movs	r2, #1
   b4d04:	701a      	strb	r2, [r3, #0]
}
   b4d06:	4770      	bx	lr
   b4d08:	2003e3dc 	.word	0x2003e3dc

000b4d0c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4d0c:	b530      	push	{r4, r5, lr}
   b4d0e:	b085      	sub	sp, #20
   b4d10:	4604      	mov	r4, r0
   b4d12:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4d14:	b160      	cbz	r0, b4d30 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b4d16:	6840      	ldr	r0, [r0, #4]
   b4d18:	b150      	cbz	r0, b4d30 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4d1a:	6885      	ldr	r5, [r0, #8]
   b4d1c:	b145      	cbz	r5, b4d30 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4d1e:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4d22:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4d26:	68c4      	ldr	r4, [r0, #12]
   b4d28:	ab01      	add	r3, sp, #4
   b4d2a:	466a      	mov	r2, sp
   b4d2c:	a902      	add	r1, sp, #8
   b4d2e:	47a0      	blx	r4
    }
   b4d30:	b005      	add	sp, #20
   b4d32:	bd30      	pop	{r4, r5, pc}

000b4d34 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4d34:	b530      	push	{r4, r5, lr}
   b4d36:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4d38:	6800      	ldr	r0, [r0, #0]
   b4d3a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4d42:	6883      	ldr	r3, [r0, #8]
   b4d44:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4d48:	b90b      	cbnz	r3, b4d4e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b4d4a:	f00a f80b 	bl	bed64 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4d4e:	68c3      	ldr	r3, [r0, #12]
   b4d50:	aa01      	add	r2, sp, #4
   b4d52:	a902      	add	r1, sp, #8
   b4d54:	4798      	blx	r3
      }
   b4d56:	b005      	add	sp, #20
   b4d58:	bd30      	pop	{r4, r5, pc}

000b4d5a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4d5a:	2a01      	cmp	r2, #1
   b4d5c:	d102      	bne.n	b4d64 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4d5e:	6001      	str	r1, [r0, #0]
      }
   b4d60:	2000      	movs	r0, #0
   b4d62:	4770      	bx	lr
	  switch (__op)
   b4d64:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4d66:	bf04      	itt	eq
   b4d68:	680b      	ldreq	r3, [r1, #0]
   b4d6a:	6003      	streq	r3, [r0, #0]
	      break;
   b4d6c:	e7f8      	b.n	b4d60 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4d6e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4d6e:	6803      	ldr	r3, [r0, #0]
   b4d70:	6812      	ldr	r2, [r2, #0]
   b4d72:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4d76:	4718      	bx	r3

000b4d78 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b4d78:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4d7a:	2000      	movs	r0, #0
   b4d7c:	f006 fd46 	bl	bb80c <spark_sync_time_pending>
   b4d80:	b128      	cbz	r0, b4d8e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d82:	f006 fd23 	bl	bb7cc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4d86:	f080 0001 	eor.w	r0, r0, #1
   b4d8a:	b2c0      	uxtb	r0, r0
    }
   b4d8c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4d8e:	2001      	movs	r0, #1
   b4d90:	e7fc      	b.n	b4d8c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b4d92 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4d92:	b510      	push	{r4, lr}
      if (_M_manager)
   b4d94:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4d96:	4604      	mov	r4, r0
      if (_M_manager)
   b4d98:	b113      	cbz	r3, b4da0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d9a:	2203      	movs	r2, #3
   b4d9c:	4601      	mov	r1, r0
   b4d9e:	4798      	blx	r3
    }
   b4da0:	4620      	mov	r0, r4
   b4da2:	bd10      	pop	{r4, pc}

000b4da4 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4da4:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4da6:	4604      	mov	r4, r0
   b4da8:	b138      	cbz	r0, b4dba <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4daa:	f7ff fff2 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   b4dae:	4620      	mov	r0, r4
   b4db0:	2110      	movs	r1, #16
        };
   b4db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4db6:	f7ff b972 	b.w	b409e <_ZdlPvj>
        };
   b4dba:	bd10      	pop	{r4, pc}

000b4dbc <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4dbc:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4dbe:	f000 fea9 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4dc2:	f001 f8f5 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4dc6:	4604      	mov	r4, r0
   	if (Time.isValid() && !testModeFlag) {
   b4dc8:	f009 fc9c 	bl	be704 <_ZN9TimeClass7isValidEv>
   b4dcc:	b1f0      	cbz	r0, b4e0c <_Z21secondsUntilNextEventv+0x50>
   b4dce:	4b10      	ldr	r3, [pc, #64]	; (b4e10 <_Z21secondsUntilNextEventv+0x54>)
   b4dd0:	781b      	ldrb	r3, [r3, #0]
   b4dd2:	b9db      	cbnz	r3, b4e0c <_Z21secondsUntilNextEventv+0x50>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4dd4:	f009 fcb3 	bl	be73e <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4dd8:	253c      	movs	r5, #60	; 0x3c
   b4dda:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4ddc:	fbb0 f4f5 	udiv	r4, r0, r5
   b4de0:	fb04 0015 	mls	r0, r4, r5, r0
   b4de4:	1a2c      	subs	r4, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b4de6:	2c09      	cmp	r4, #9
   b4de8:	d90e      	bls.n	b4e08 <_Z21secondsUntilNextEventv+0x4c>
   b4dea:	42ac      	cmp	r4, r5
   b4dec:	bf28      	it	cs
   b4dee:	462c      	movcs	r4, r5
        Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
   b4df0:	f000 fe90 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4df4:	f001 f8dc 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4df8:	4906      	ldr	r1, [pc, #24]	; (b4e14 <_Z21secondsUntilNextEventv+0x58>)
   b4dfa:	4602      	mov	r2, r0
   b4dfc:	4623      	mov	r3, r4
   b4dfe:	4806      	ldr	r0, [pc, #24]	; (b4e18 <_Z21secondsUntilNextEventv+0x5c>)
   b4e00:	f7ff f96c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    }
	return secondsToReturn;
}
   b4e04:	4620      	mov	r0, r4
   b4e06:	bd38      	pop	{r3, r4, r5, pc}
   b4e08:	240a      	movs	r4, #10
   b4e0a:	e7f1      	b.n	b4df0 <_Z21secondsUntilNextEventv+0x34>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b4e0c:	240a      	movs	r4, #10
   b4e0e:	e7f9      	b.n	b4e04 <_Z21secondsUntilNextEventv+0x48>
   b4e10:	2003e3db 	.word	0x2003e3db
   b4e14:	000c02d8 	.word	0x000c02d8
   b4e18:	2003e658 	.word	0x2003e658

000b4e1c <_Z22publishStateTransitionv>:
{
   b4e1c:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4e1e:	4e1c      	ldr	r6, [pc, #112]	; (b4e90 <_Z22publishStateTransitionv+0x74>)
   b4e20:	4c1c      	ldr	r4, [pc, #112]	; (b4e94 <_Z22publishStateTransitionv+0x78>)
   b4e22:	7832      	ldrb	r2, [r6, #0]
   b4e24:	4d1c      	ldr	r5, [pc, #112]	; (b4e98 <_Z22publishStateTransitionv+0x7c>)
   b4e26:	2a02      	cmp	r2, #2
{
   b4e28:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b4e2a:	d128      	bne.n	b4e7e <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4e2c:	f009 fc6a 	bl	be704 <_ZN9TimeClass7isValidEv>
   b4e30:	7832      	ldrb	r2, [r6, #0]
   b4e32:	782b      	ldrb	r3, [r5, #0]
   b4e34:	b958      	cbnz	r0, b4e4e <_Z22publishStateTransitionv+0x32>
   b4e36:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4e3a:	9200      	str	r2, [sp, #0]
   b4e3c:	4a17      	ldr	r2, [pc, #92]	; (b4e9c <_Z22publishStateTransitionv+0x80>)
   b4e3e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4e42:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4e46:	a804      	add	r0, sp, #16
   b4e48:	f006 fd90 	bl	bb96c <snprintf>
   b4e4c:	e00f      	b.n	b4e6e <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b4e4e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4e52:	9303      	str	r3, [sp, #12]
   b4e54:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b4e58:	f7ff ffb0 	bl	b4dbc <_Z21secondsUntilNextEventv>
   b4e5c:	9b03      	ldr	r3, [sp, #12]
   b4e5e:	4a10      	ldr	r2, [pc, #64]	; (b4ea0 <_Z22publishStateTransitionv+0x84>)
   b4e60:	e9cd 4000 	strd	r4, r0, [sp]
   b4e64:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4e68:	a804      	add	r0, sp, #16
   b4e6a:	f006 fd7f 	bl	bb96c <snprintf>
	oldState = state;
   b4e6e:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4e70:	480c      	ldr	r0, [pc, #48]	; (b4ea4 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b4e72:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4e74:	a904      	add	r1, sp, #16
   b4e76:	f7ff f931 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
}
   b4e7a:	b044      	add	sp, #272	; 0x110
   b4e7c:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4e7e:	782b      	ldrb	r3, [r5, #0]
   b4e80:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4e84:	9200      	str	r2, [sp, #0]
   b4e86:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4e8a:	4a07      	ldr	r2, [pc, #28]	; (b4ea8 <_Z22publishStateTransitionv+0x8c>)
   b4e8c:	e7d9      	b.n	b4e42 <_Z22publishStateTransitionv+0x26>
   b4e8e:	bf00      	nop
   b4e90:	2003e3da 	.word	0x2003e3da
   b4e94:	2003dda0 	.word	0x2003dda0
   b4e98:	2003e3d9 	.word	0x2003e3d9
   b4e9c:	000c030c 	.word	0x000c030c
   b4ea0:	000c032c 	.word	0x000c032c
   b4ea4:	2003e658 	.word	0x2003e658
   b4ea8:	000c0349 	.word	0x000c0349

000b4eac <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b4eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4eb0:	ed2d 8b02 	vpush	{d8}
	char data[256];                             						// Store the date in this character array - not global

	if (nodeNumber > 0) {												// Webhook for a node
   b4eb4:	4604      	mov	r4, r0
void publishWebhook(uint8_t nodeNumber) {
   b4eb6:	b0d3      	sub	sp, #332	; 0x14c
	if (nodeNumber > 0) {												// Webhook for a node
   b4eb8:	2800      	cmp	r0, #0
   b4eba:	d06c      	beq.n	b4f96 <_Z14publishWebhookh+0xea>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4ebc:	f7ff f926 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4ec0:	4622      	mov	r2, r4
   b4ec2:	4601      	mov	r1, r0
   b4ec4:	a80e      	add	r0, sp, #56	; 0x38
   b4ec6:	f7ff fd97 	bl	b49f8 <_ZN14LoRA_Functions12findDeviceIDEh>
   b4eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b4ecc:	930d      	str	r3, [sp, #52]	; 0x34
   b4ece:	f000 fe71 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4ed2:	f001 f87c 	bl	b5fce <_ZNK17currentStatusData15get_hourlyCountEv>
   b4ed6:	4604      	mov	r4, r0
   b4ed8:	f000 fe6c 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4edc:	f001 f87c 	bl	b5fd8 <_ZNK17currentStatusData14get_dailyCountEv>
   b4ee0:	4605      	mov	r5, r0
   b4ee2:	f000 fe67 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4ee6:	f000 ff99 	bl	b5e1c <_ZNK17currentStatusData14get_sensorTypeEv>
   b4eea:	4606      	mov	r6, r0
   b4eec:	f000 fe62 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4ef0:	f000 fe7a 	bl	b5be8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4ef4:	eeb0 8a40 	vmov.f32	s16, s0
   b4ef8:	eef0 8a60 	vmov.f32	s17, s1
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4efc:	f000 fe5a 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4f00:	f000 ff78 	bl	b5df4 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4f04:	4a4e      	ldr	r2, [pc, #312]	; (b5040 <_Z14publishWebhookh+0x194>)
   b4f06:	f852 b020 	ldr.w	fp, [r2, r0, lsl #2]
		current.get_internalTempC(), current.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4f0a:	f000 fe53 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4f0e:	f000 ff6c 	bl	b5dea <_ZNK17currentStatusData17get_internalTempCEv>
   b4f12:	4607      	mov	r7, r0
   b4f14:	f000 fe4e 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4f18:	f000 ff71 	bl	b5dfe <_ZNK17currentStatusData14get_resetCountEv>
   b4f1c:	4680      	mov	r8, r0
   b4f1e:	f000 fe49 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4f22:	f001 f84f 	bl	b5fc4 <_ZNK17currentStatusData8get_RSSIEv>
   b4f26:	4681      	mov	r9, r0
   b4f28:	f000 fe44 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4f2c:	f000 ff6c 	bl	b5e08 <_ZNK17currentStatusData17get_messageNumberEv>
   b4f30:	4682      	mov	sl, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4f32:	f009 fc04 	bl	be73e <_ZN9TimeClass3nowEv>
   b4f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4f38:	4a42      	ldr	r2, [pc, #264]	; (b5044 <_Z14publishWebhookh+0x198>)
   b4f3a:	9400      	str	r4, [sp, #0]
   b4f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4f40:	e9cd a00a 	strd	sl, r0, [sp, #40]	; 0x28
   b4f44:	e9cd 8908 	strd	r8, r9, [sp, #32]
   b4f48:	e9cd b706 	strd	fp, r7, [sp, #24]
   b4f4c:	ed8d 8b04 	vstr	d8, [sp, #16]
   b4f50:	e9cd 5601 	strd	r5, r6, [sp, #4]
   b4f54:	a812      	add	r0, sp, #72	; 0x48
   b4f56:	f006 fd09 	bl	bb96c <snprintf>
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4f5a:	a80e      	add	r0, sp, #56	; 0x38
   b4f5c:	f009 f848 	bl	bdff0 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b4f60:	f003 fd52 	bl	b8a08 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4f64:	4b38      	ldr	r3, [pc, #224]	; (b5048 <_Z14publishWebhookh+0x19c>)
   b4f66:	4a39      	ldr	r2, [pc, #228]	; (b504c <_Z14publishWebhookh+0x1a0>)
   b4f68:	781b      	ldrb	r3, [r3, #0]
   b4f6a:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4f6c:	2100      	movs	r1, #0
   b4f6e:	4313      	orrs	r3, r2
   b4f70:	6802      	ldr	r2, [r0, #0]
   b4f72:	f88d 1004 	strb.w	r1, [sp, #4]
   b4f76:	f88d 3000 	strb.w	r3, [sp]
   b4f7a:	4935      	ldr	r1, [pc, #212]	; (b5050 <_Z14publishWebhookh+0x1a4>)
   b4f7c:	6814      	ldr	r4, [r2, #0]
   b4f7e:	233c      	movs	r3, #60	; 0x3c
   b4f80:	aa12      	add	r2, sp, #72	; 0x48
   b4f82:	47a0      	blx	r4
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}

	Log.info(data);
   b4f84:	4833      	ldr	r0, [pc, #204]	; (b5054 <_Z14publishWebhookh+0x1a8>)
   b4f86:	a912      	add	r1, sp, #72	; 0x48
   b4f88:	f7ff f8a8 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>



	return;
}
   b4f8c:	b053      	add	sp, #332	; 0x14c
   b4f8e:	ecbd 8b02 	vpop	{d8}
   b4f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return spark_deviceID();
   b4f96:	a80e      	add	r0, sp, #56	; 0x38
   b4f98:	f006 fc20 	bl	bb7dc <spark_deviceID>
   b4f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b4f9e:	930d      	str	r3, [sp, #52]	; 0x34
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4fa0:	f000 fdb8 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4fa4:	f000 ff12 	bl	b5dcc <_ZNK13sysStatusData14get_sensorTypeEv>
   b4fa8:	4605      	mov	r5, r0
   b4faa:	f000 fe03 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4fae:	f000 fe1b 	bl	b5be8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4fb2:	eeb0 8a40 	vmov.f32	s16, s0
   b4fb6:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4fba:	f000 fdfb 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4fbe:	f000 ff19 	bl	b5df4 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4fc2:	4a1f      	ldr	r2, [pc, #124]	; (b5040 <_Z14publishWebhookh+0x194>)
   b4fc4:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
   b4fc8:	f000 fdf4 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b4fcc:	f000 ff0d 	bl	b5dea <_ZNK17currentStatusData17get_internalTempCEv>
   b4fd0:	4606      	mov	r6, r0
   b4fd2:	f000 fd9f 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4fd6:	f000 fee5 	bl	b5da4 <_ZNK13sysStatusData14get_resetCountEv>
   b4fda:	4607      	mov	r7, r0
   b4fdc:	f000 fd9a 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4fe0:	f000 ffeb 	bl	b5fba <_ZNK13sysStatusData8get_RSSIEv>
   b4fe4:	4680      	mov	r8, r0
   b4fe6:	f000 fd95 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b4fea:	f000 fee0 	bl	b5dae <_ZNK13sysStatusData16get_messageCountEv>
   b4fee:	4681      	mov	r9, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4ff0:	f009 fba5 	bl	be73e <_ZN9TimeClass3nowEv>
   b4ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4ff6:	4a13      	ldr	r2, [pc, #76]	; (b5044 <_Z14publishWebhookh+0x198>)
   b4ff8:	9400      	str	r4, [sp, #0]
   b4ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4ffe:	e9cd 900a 	strd	r9, r0, [sp, #40]	; 0x28
   b5002:	e9cd 4501 	strd	r4, r5, [sp, #4]
   b5006:	e9cd 7808 	strd	r7, r8, [sp, #32]
   b500a:	e9cd a606 	strd	sl, r6, [sp, #24]
   b500e:	ed8d 8b04 	vstr	d8, [sp, #16]
   b5012:	a812      	add	r0, sp, #72	; 0x48
   b5014:	f006 fcaa 	bl	bb96c <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5018:	a80e      	add	r0, sp, #56	; 0x38
   b501a:	f008 ffe9 	bl	bdff0 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b501e:	f003 fcf3 	bl	b8a08 <_ZN17PublishQueuePosix8instanceEv>
   b5022:	4b09      	ldr	r3, [pc, #36]	; (b5048 <_Z14publishWebhookh+0x19c>)
   b5024:	4a09      	ldr	r2, [pc, #36]	; (b504c <_Z14publishWebhookh+0x1a0>)
   b5026:	781b      	ldrb	r3, [r3, #0]
   b5028:	7812      	ldrb	r2, [r2, #0]
   b502a:	490b      	ldr	r1, [pc, #44]	; (b5058 <_Z14publishWebhookh+0x1ac>)
   b502c:	4313      	orrs	r3, r2
   b502e:	6802      	ldr	r2, [r0, #0]
   b5030:	f88d 3000 	strb.w	r3, [sp]
   b5034:	f88d 4004 	strb.w	r4, [sp, #4]
   b5038:	6814      	ldr	r4, [r2, #0]
   b503a:	233c      	movs	r3, #60	; 0x3c
   b503c:	aa12      	add	r2, sp, #72	; 0x48
   b503e:	e7a0      	b.n	b4f82 <_Z14publishWebhookh+0xd6>
   b5040:	2003de44 	.word	0x2003de44
   b5044:	000c0357 	.word	0x000c0357
   b5048:	2003e298 	.word	0x2003e298
   b504c:	2003e299 	.word	0x2003e299
   b5050:	000c03ee 	.word	0x000c03ee
   b5054:	2003e658 	.word	0x2003e658
   b5058:	000c0403 	.word	0x000c0403

000b505c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b505c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b505e:	2300      	movs	r3, #0
   b5060:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5062:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5064:	4604      	mov	r4, r0
   b5066:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5068:	b12b      	cbz	r3, b5076 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b506a:	2202      	movs	r2, #2
   b506c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b506e:	68eb      	ldr	r3, [r5, #12]
   b5070:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5072:	68ab      	ldr	r3, [r5, #8]
   b5074:	60a3      	str	r3, [r4, #8]
    }
   b5076:	4620      	mov	r0, r4
   b5078:	bd38      	pop	{r3, r4, r5, pc}
	...

000b507c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b507c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5080:	b095      	sub	sp, #84	; 0x54
   b5082:	4605      	mov	r5, r0
        };
   b5084:	991c      	ldr	r1, [sp, #112]	; 0x70
   b5086:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b5088:	4690      	mov	r8, r2
   b508a:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b508c:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b508e:	f7ff ffe5 	bl	b505c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5092:	a904      	add	r1, sp, #16
   b5094:	a808      	add	r0, sp, #32
   b5096:	f7ff ffe1 	bl	b505c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b509a:	a908      	add	r1, sp, #32
   b509c:	4630      	mov	r0, r6
   b509e:	f7ff ffdd 	bl	b505c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b50a2:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b50a6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b50a8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b50ac:	f7fe fff3 	bl	b4096 <_Znwj>
   b50b0:	4604      	mov	r4, r0
   b50b2:	b1a0      	cbz	r0, b50de <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b50b4:	e896 0003 	ldmia.w	r6, {r0, r1}
   b50b8:	ab01      	add	r3, sp, #4
   b50ba:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b50be:	e894 0003 	ldmia.w	r4, {r0, r1}
   b50c2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b50c6:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b50ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b50cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b50ce:	60a3      	str	r3, [r4, #8]
   b50d0:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b50d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b50d6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b50da:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b50dc:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b50de:	4b24      	ldr	r3, [pc, #144]	; (b5170 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b50e0:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b50e2:	4b24      	ldr	r3, [pc, #144]	; (b5174 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b50e4:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b50e6:	2200      	movs	r2, #0
   b50e8:	2300      	movs	r3, #0
   b50ea:	f04f 0900 	mov.w	r9, #0
   b50ee:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b50f2:	4b21      	ldr	r3, [pc, #132]	; (b5178 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b50f4:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b50f8:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b50fa:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b50fc:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b5100:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5104:	f7fe ffc7 	bl	b4096 <_Znwj>
   b5108:	4604      	mov	r4, r0
   b510a:	b1d8      	cbz	r0, b5144 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b510c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b510e:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b5112:	b133      	cbz	r3, b5122 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5114:	2202      	movs	r2, #2
   b5116:	a910      	add	r1, sp, #64	; 0x40
   b5118:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b511a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b511c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b511e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5120:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b5122:	4b16      	ldr	r3, [pc, #88]	; (b517c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b5124:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5126:	4a16      	ldr	r2, [pc, #88]	; (b5180 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b5128:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b512a:	ab01      	add	r3, sp, #4
   b512c:	4640      	mov	r0, r8
   b512e:	4639      	mov	r1, r7
   b5130:	f006 faca 	bl	bb6c8 <system_subscribe_event>
        if (r) {
   b5134:	b1b0      	cbz	r0, b5164 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b5136:	4620      	mov	r0, r4
   b5138:	f7ff fe2b 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b513c:	2110      	movs	r1, #16
   b513e:	4620      	mov	r0, r4
   b5140:	f7fe ffad 	bl	b409e <_ZdlPvj>
   b5144:	a810      	add	r0, sp, #64	; 0x40
   b5146:	f7ff fe24 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   b514a:	4630      	mov	r0, r6
   b514c:	f7ff fe21 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   b5150:	a808      	add	r0, sp, #32
   b5152:	f7ff fe1e 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   b5156:	a804      	add	r0, sp, #16
   b5158:	f7ff fe1b 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
    }
   b515c:	4628      	mov	r0, r5
   b515e:	b015      	add	sp, #84	; 0x54
   b5160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b5164:	9b02      	ldr	r3, [sp, #8]
   b5166:	60ab      	str	r3, [r5, #8]
   b5168:	e9c5 8700 	strd	r8, r7, [r5]
   b516c:	e7ea      	b.n	b5144 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b516e:	bf00      	nop
   b5170:	000b4d35 	.word	0x000b4d35
   b5174:	000b5185 	.word	0x000b5185
   b5178:	000c0002 	.word	0x000c0002
   b517c:	000b4da5 	.word	0x000b4da5
   b5180:	000b4d0d 	.word	0x000b4d0d

000b5184 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b5184:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5186:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5188:	4604      	mov	r4, r0
	switch (__op)
   b518a:	d104      	bne.n	b5196 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b518c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b518e:	6003      	str	r3, [r0, #0]
      }
   b5190:	2000      	movs	r0, #0
   b5192:	b003      	add	sp, #12
   b5194:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b5196:	2a02      	cmp	r2, #2
   b5198:	d00c      	beq.n	b51b4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b519a:	2a03      	cmp	r2, #3
   b519c:	d1f8      	bne.n	b5190 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b519e:	6804      	ldr	r4, [r0, #0]
   b51a0:	2c00      	cmp	r4, #0
   b51a2:	d0f5      	beq.n	b5190 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b51a4:	4620      	mov	r0, r4
   b51a6:	f7ff fdf4 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b51aa:	2110      	movs	r1, #16
   b51ac:	4620      	mov	r0, r4
   b51ae:	f7fe ff76 	bl	b409e <_ZdlPvj>
   b51b2:	e7ed      	b.n	b5190 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b51b4:	6809      	ldr	r1, [r1, #0]
   b51b6:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b51b8:	2010      	movs	r0, #16
   b51ba:	f7fe ff6c 	bl	b4096 <_Znwj>
   b51be:	4605      	mov	r5, r0
   b51c0:	b110      	cbz	r0, b51c8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b51c2:	9901      	ldr	r1, [sp, #4]
   b51c4:	f7ff ff4a 	bl	b505c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b51c8:	6025      	str	r5, [r4, #0]
	}
   b51ca:	e7e1      	b.n	b5190 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b51cc <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b51cc:	4b16      	ldr	r3, [pc, #88]	; (b5228 <_GLOBAL__sub_I___appProductVersion+0x5c>)
}
   b51ce:	b510      	push	{r4, lr}
   b51d0:	2401      	movs	r4, #1
   b51d2:	701c      	strb	r4, [r3, #0]
   b51d4:	4b15      	ldr	r3, [pc, #84]	; (b522c <_GLOBAL__sub_I___appProductVersion+0x60>)
   b51d6:	2208      	movs	r2, #8
   b51d8:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b51da:	f009 fc59 	bl	bea90 <spark_protocol_instance>
   b51de:	2300      	movs	r3, #0
   b51e0:	461a      	mov	r2, r3
   b51e2:	4619      	mov	r1, r3
   b51e4:	f009 fc64 	bl	beab0 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b51e8:	f009 fc52 	bl	bea90 <spark_protocol_instance>
   b51ec:	2300      	movs	r3, #0
   b51ee:	461a      	mov	r2, r3
   b51f0:	210d      	movs	r1, #13
   b51f2:	f009 fc55 	bl	beaa0 <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b51f6:	4b0e      	ldr	r3, [pc, #56]	; (b5230 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b51f8:	1d1a      	adds	r2, r3, #4
   b51fa:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b51fc:	4a0d      	ldr	r2, [pc, #52]	; (b5234 <_GLOBAL__sub_I___appProductVersion+0x68>)
   b51fe:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5200:	2200      	movs	r2, #0
   b5202:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b5206:	611a      	str	r2, [r3, #16]
   b5208:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b520a:	f009 fd19 	bl	bec40 <_Z19__fetch_global_Wirev>
   b520e:	2269      	movs	r2, #105	; 0x69
   b5210:	4601      	mov	r1, r0
   b5212:	4809      	ldr	r0, [pc, #36]	; (b5238 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b5214:	f001 fdaa 	bl	b6d6c <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5218:	4808      	ldr	r0, [pc, #32]	; (b523c <_GLOBAL__sub_I___appProductVersion+0x70>)
   b521a:	2306      	movs	r3, #6
   b521c:	f840 3b04 	str.w	r3, [r0], #4
}
   b5220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5224:	f002 bea8 	b.w	b7f78 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5228:	2003e298 	.word	0x2003e298
   b522c:	2003e299 	.word	0x2003e299
   b5230:	2003e2cc 	.word	0x2003e2cc
   b5234:	00030010 	.word	0x00030010
   b5238:	2003e2ac 	.word	0x2003e2ac
   b523c:	2003e2e8 	.word	0x2003e2e8

000b5240 <setup>:
{
   b5240:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b5242:	2000      	movs	r0, #0
   b5244:	b09d      	sub	sp, #116	; 0x74
   b5246:	f005 ffdd 	bl	bb204 <hal_timer_millis>
        while (_while() && !_condition()) {
   b524a:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b524e:	4604      	mov	r4, r0
   b5250:	2000      	movs	r0, #0
   b5252:	f005 ffd7 	bl	bb204 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5256:	1b00      	subs	r0, r0, r4
   b5258:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b525c:	42a8      	cmp	r0, r5
   b525e:	f171 0300 	sbcs.w	r3, r1, #0
   b5262:	d207      	bcs.n	b5274 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5264:	f009 fb52 	bl	be90c <_Z16_fetch_usbserialv>
   b5268:	f009 fb45 	bl	be8f6 <_ZN9USBSerial11isConnectedEv>
   b526c:	b910      	cbnz	r0, b5274 <setup+0x34>
            spark_process();
   b526e:	f006 fa9d 	bl	bb7ac <spark_process>
        while (_while() && !_condition()) {
   b5272:	e7ed      	b.n	b5250 <setup+0x10>
   b5274:	f009 fb4a 	bl	be90c <_Z16_fetch_usbserialv>
   b5278:	f009 fb3d 	bl	be8f6 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b527c:	f000 ffe4 	bl	b6248 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b5280:	f001 f80e 	bl	b62a0 <_Z18initializePowerCfgv>
		current.setup();
   b5284:	f000 fc96 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b5288:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b528a:	4e5a      	ldr	r6, [pc, #360]	; (b53f4 <setup+0x1b4>)
   b528c:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b528e:	4f5a      	ldr	r7, [pc, #360]	; (b53f8 <setup+0x1b8>)
   b5290:	4798      	blx	r3
  		sysStatus.setup();
   b5292:	f000 fc3f 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5296:	6803      	ldr	r3, [r0, #0]
   b5298:	681b      	ldr	r3, [r3, #0]
   b529a:	4798      	blx	r3
		nodeID.setup();
   b529c:	f000 fd06 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b52a0:	6803      	ldr	r3, [r0, #0]
   b52a2:	681b      	ldr	r3, [r3, #0]
   b52a4:	4798      	blx	r3
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   b52a6:	f001 f8e7 	bl	b6478 <_Z18particleInitializev>
   b52aa:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b52ac:	2101      	movs	r1, #1
   b52ae:	4630      	mov	r0, r6
   b52b0:	8173      	strh	r3, [r6, #10]
   b52b2:	f002 fa57 	bl	b7764 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b52b6:	217c      	movs	r1, #124	; 0x7c
   b52b8:	4630      	mov	r0, r6
   b52ba:	f001 fe55 	bl	b6f68 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b52be:	4b4f      	ldr	r3, [pc, #316]	; (b53fc <setup+0x1bc>)
   b52c0:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b52c2:	4b4f      	ldr	r3, [pc, #316]	; (b5400 <setup+0x1c0>)
   b52c4:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b52c6:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b52c8:	4b4e      	ldr	r3, [pc, #312]	; (b5404 <setup+0x1c4>)
   b52ca:	9308      	str	r3, [sp, #32]
   b52cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b52d0:	2300      	movs	r3, #0
   b52d2:	a802      	add	r0, sp, #8
   b52d4:	9500      	str	r5, [sp, #0]
   b52d6:	f7ff fed1 	bl	b507c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b52da:	4628      	mov	r0, r5
   b52dc:	f7ff fd59 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b52e0:	f003 fb92 	bl	b8a08 <_ZN17PublishQueuePosix8instanceEv>
   b52e4:	f003 fd96 	bl	b8e14 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b52e8:	f7fe ff10 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b52ec:	2101      	movs	r1, #1
   b52ee:	f7fe ff1f 	bl	b4130 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b52f2:	f003 f821 	bl	b8338 <_ZN9LocalTime8instanceEv>
   b52f6:	4944      	ldr	r1, [pc, #272]	; (b5408 <setup+0x1c8>)
   b52f8:	4604      	mov	r4, r0
   b52fa:	4628      	mov	r0, r5
   b52fc:	f002 feee 	bl	b80dc <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5300:	a907      	add	r1, sp, #28
   b5302:	f104 0008 	add.w	r0, r4, #8
   b5306:	f008 fefa 	bl	be0fe <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b530a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b530c:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b530e:	a90d      	add	r1, sp, #52	; 0x34
   b5310:	f104 0020 	add.w	r0, r4, #32
   b5314:	f008 fef3 	bl	be0fe <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5318:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b531a:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b531c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b531e:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5320:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5322:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5324:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5326:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5328:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b532a:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b532c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b5330:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5334:	4628      	mov	r0, r5
   b5336:	f002 fc8d 	bl	b7c54 <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b533a:	f009 fa00 	bl	be73e <_ZN9TimeClass3nowEv>
   b533e:	17c3      	asrs	r3, r0, #31
   b5340:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5344:	4638      	mov	r0, r7
   b5346:	f003 f86f 	bl	b8428 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b534a:	f009 f9db 	bl	be704 <_ZN9TimeClass7isValidEv>
   b534e:	4c2f      	ldr	r4, [pc, #188]	; (b540c <setup+0x1cc>)
   b5350:	2800      	cmp	r0, #0
   b5352:	d043      	beq.n	b53dc <setup+0x19c>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5354:	4639      	mov	r1, r7
   b5356:	4a2e      	ldr	r2, [pc, #184]	; (b5410 <setup+0x1d0>)
   b5358:	4628      	mov	r0, r5
   b535a:	f002 ff4f 	bl	b81fc <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b535e:	2301      	movs	r3, #1
   b5360:	461a      	mov	r2, r3
   b5362:	2110      	movs	r1, #16
   b5364:	4630      	mov	r0, r6
   b5366:	9f06      	ldr	r7, [sp, #24]
   b5368:	f001 fe7f 	bl	b706a <_ZN6AB180510isBitClearEhhb>
   b536c:	4929      	ldr	r1, [pc, #164]	; (b5414 <setup+0x1d4>)
   b536e:	4b2a      	ldr	r3, [pc, #168]	; (b5418 <setup+0x1d8>)
   b5370:	463a      	mov	r2, r7
   b5372:	2800      	cmp	r0, #0
   b5374:	bf18      	it	ne
   b5376:	460b      	movne	r3, r1
   b5378:	4828      	ldr	r0, [pc, #160]	; (b541c <setup+0x1dc>)
   b537a:	4929      	ldr	r1, [pc, #164]	; (b5420 <setup+0x1e0>)
   b537c:	f7fe feae 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b5380:	4628      	mov	r0, r5
   b5382:	f008 fe35 	bl	bdff0 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b5386:	4b27      	ldr	r3, [pc, #156]	; (b5424 <setup+0x1e4>)
   b5388:	881e      	ldrh	r6, [r3, #0]
   b538a:	4630      	mov	r0, r6
   b538c:	f009 fc00 	bl	beb90 <digitalRead>
   b5390:	4605      	mov	r5, r0
   b5392:	bb50      	cbnz	r0, b53ea <setup+0x1aa>
		Log.info("User button pressed, test mode");
   b5394:	4924      	ldr	r1, [pc, #144]	; (b5428 <setup+0x1e8>)
   b5396:	4821      	ldr	r0, [pc, #132]	; (b541c <setup+0x1dc>)
   b5398:	f7fe fea0 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		testModeFlag = true;
   b539c:	4b23      	ldr	r3, [pc, #140]	; (b542c <setup+0x1ec>)
   b539e:	2101      	movs	r1, #1
   b53a0:	7019      	strb	r1, [r3, #0]
		digitalWrite(BLUE_LED,HIGH);
   b53a2:	4b23      	ldr	r3, [pc, #140]	; (b5430 <setup+0x1f0>)
   b53a4:	881f      	ldrh	r7, [r3, #0]
   b53a6:	4638      	mov	r0, r7
   b53a8:	f009 fbd9 	bl	beb5e <digitalWrite>
		delay(2000);
   b53ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b53b0:	f006 fb34 	bl	bba1c <delay>
		digitalWrite(BLUE_LED,LOW);
   b53b4:	4629      	mov	r1, r5
   b53b6:	4638      	mov	r0, r7
   b53b8:	f009 fbd1 	bl	beb5e <digitalWrite>
		state = LoRA_STATE;
   b53bc:	2304      	movs	r3, #4
   b53be:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b53c0:	2200      	movs	r2, #0
   b53c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b53c6:	491b      	ldr	r1, [pc, #108]	; (b5434 <setup+0x1f4>)
   b53c8:	9200      	str	r2, [sp, #0]
   b53ca:	4630      	mov	r0, r6
   b53cc:	f007 f89c 	bl	bc508 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b53d0:	7823      	ldrb	r3, [r4, #0]
   b53d2:	b90b      	cbnz	r3, b53d8 <setup+0x198>
   b53d4:	2302      	movs	r3, #2
   b53d6:	7023      	strb	r3, [r4, #0]
}
   b53d8:	b01d      	add	sp, #116	; 0x74
   b53da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b53dc:	4916      	ldr	r1, [pc, #88]	; (b5438 <setup+0x1f8>)
   b53de:	480f      	ldr	r0, [pc, #60]	; (b541c <setup+0x1dc>)
   b53e0:	f7fe fe7c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b53e4:	2305      	movs	r3, #5
   b53e6:	7023      	strb	r3, [r4, #0]
   b53e8:	e7cd      	b.n	b5386 <setup+0x146>
	else Log.info("No user button push detechted");
   b53ea:	4914      	ldr	r1, [pc, #80]	; (b543c <setup+0x1fc>)
   b53ec:	480b      	ldr	r0, [pc, #44]	; (b541c <setup+0x1dc>)
   b53ee:	f7fe fe75 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b53f2:	e7e5      	b.n	b53c0 <setup+0x180>
   b53f4:	2003e2ac 	.word	0x2003e2ac
   b53f8:	2003e2e8 	.word	0x2003e2e8
   b53fc:	000b4cf5 	.word	0x000b4cf5
   b5400:	000b4d6f 	.word	0x000b4d6f
   b5404:	000b4d5b 	.word	0x000b4d5b
   b5408:	000c0425 	.word	0x000c0425
   b540c:	2003e3da 	.word	0x2003e3da
   b5410:	000c044c 	.word	0x000c044c
   b5414:	000c041b 	.word	0x000c041b
   b5418:	000c041e 	.word	0x000c041e
   b541c:	2003e658 	.word	0x2003e658
   b5420:	000c0457 	.word	0x000c0457
   b5424:	000c06e6 	.word	0x000c06e6
   b5428:	000c04c6 	.word	0x000c04c6
   b542c:	2003e3db 	.word	0x2003e3db
   b5430:	000c06e4 	.word	0x000c06e4
   b5434:	000b4d01 	.word	0x000b4d01
   b5438:	000c0488 	.word	0x000c0488
   b543c:	000c04e5 	.word	0x000c04e5

000b5440 <loop>:
void loop() {
   b5440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (state) {
   b5444:	4d7d      	ldr	r5, [pc, #500]	; (b563c <loop+0x1fc>)
   b5446:	782b      	ldrb	r3, [r5, #0]
   b5448:	3b01      	subs	r3, #1
void loop() {
   b544a:	b090      	sub	sp, #64	; 0x40
   b544c:	2b06      	cmp	r3, #6
   b544e:	d817      	bhi.n	b5480 <loop+0x40>
   b5450:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5454:	00070250 	.word	0x00070250
   b5458:	010c0033 	.word	0x010c0033
   b545c:	023301bf 	.word	0x023301bf
   b5460:	01a6      	.short	0x01a6
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5462:	4b77      	ldr	r3, [pc, #476]	; (b5640 <loop+0x200>)
   b5464:	781b      	ldrb	r3, [r3, #0]
   b5466:	2b02      	cmp	r3, #2
   b5468:	d001      	beq.n	b546e <loop+0x2e>
   b546a:	f7ff fcd7 	bl	b4e1c <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b546e:	4b75      	ldr	r3, [pc, #468]	; (b5644 <loop+0x204>)
   b5470:	781a      	ldrb	r2, [r3, #0]
   b5472:	b11a      	cbz	r2, b547c <loop+0x3c>
				nextEventTime = false;
   b5474:	2200      	movs	r2, #0
   b5476:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b5478:	2304      	movs	r3, #4
   b547a:	e000      	b.n	b547e <loop+0x3e>
			else state = SLEEPING_STATE;
   b547c:	2303      	movs	r3, #3
   b547e:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b5480:	4871      	ldr	r0, [pc, #452]	; (b5648 <loop+0x208>)
   b5482:	f002 f91d 	bl	b76c0 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b5486:	f003 fabf 	bl	b8a08 <_ZN17PublishQueuePosix8instanceEv>
   b548a:	f003 f9af 	bl	b87ec <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b548e:	f000 fb91 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b5492:	f000 fb9f 	bl	b5bd4 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b5496:	f000 fb3d 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b549a:	f000 fb63 	bl	b5b64 <_ZN13sysStatusData4loopEv>
	nodeID.loop();
   b549e:	f000 fc05 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b54a2:	f000 fc1e 	bl	b5ce2 <_ZN10nodeIDData4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b54a6:	4b69      	ldr	r3, [pc, #420]	; (b564c <loop+0x20c>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	2b00      	cmp	r3, #0
   b54ac:	f2c0 8256 	blt.w	b595c <loop+0x51c>
}
   b54b0:	b010      	add	sp, #64	; 0x40
   b54b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		System.reset();
   b54b6:	f008 bf4e 	b.w	be356 <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b54ba:	4b61      	ldr	r3, [pc, #388]	; (b5640 <loop+0x200>)
   b54bc:	781b      	ldrb	r3, [r3, #0]
   b54be:	2b03      	cmp	r3, #3
   b54c0:	d001      	beq.n	b54c6 <loop+0x86>
   b54c2:	f7ff fcab 	bl	b4e1c <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b54c6:	2100      	movs	r1, #0
   b54c8:	485f      	ldr	r0, [pc, #380]	; (b5648 <loop+0x208>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b54ca:	4c61      	ldr	r4, [pc, #388]	; (b5650 <loop+0x210>)
   b54cc:	f001 fd4c 	bl	b6f68 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b54d0:	f7ff fc74 	bl	b4dbc <_Z21secondsUntilNextEventv>
   b54d4:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b54d6:	f009 f932 	bl	be73e <_ZN9TimeClass3nowEv>
   b54da:	19c2      	adds	r2, r0, r7
   b54dc:	17d3      	asrs	r3, r2, #31
   b54de:	a808      	add	r0, sp, #32
   b54e0:	f009 f828 	bl	be534 <_ZN9TimeClass7timeStrEx>
   b54e4:	9b08      	ldr	r3, [sp, #32]
   b54e6:	9302      	str	r3, [sp, #8]
   b54e8:	f008 ff98 	bl	be41c <_ZN11SystemClass10freeMemoryEv>
   b54ec:	9b02      	ldr	r3, [sp, #8]
   b54ee:	4959      	ldr	r1, [pc, #356]	; (b5654 <loop+0x214>)
   b54f0:	9000      	str	r0, [sp, #0]
   b54f2:	463a      	mov	r2, r7
   b54f4:	4858      	ldr	r0, [pc, #352]	; (b5658 <loop+0x218>)
   b54f6:	f7fe fdf1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b54fa:	a808      	add	r0, sp, #32
   b54fc:	f008 fd78 	bl	bdff0 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b5500:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5504:	f006 fa8a 	bl	bba1c <delay>
   b5508:	7d23      	ldrb	r3, [r4, #20]
   b550a:	2b00      	cmp	r3, #0
   b550c:	d050      	beq.n	b55b0 <loop+0x170>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b550e:	2302      	movs	r3, #2
   b5510:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b5512:	4b52      	ldr	r3, [pc, #328]	; (b565c <loop+0x21c>)
   b5514:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5518:	6823      	ldr	r3, [r4, #0]
   b551a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b551c:	b1f3      	cbz	r3, b555c <loop+0x11c>
            if (start->type == type) {
   b551e:	889a      	ldrh	r2, [r3, #4]
   b5520:	2a01      	cmp	r2, #1
   b5522:	d006      	beq.n	b5532 <loop+0xf2>
            start = start->next;
   b5524:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5526:	e7f9      	b.n	b551c <loop+0xdc>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5528:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b552a:	b1bb      	cbz	r3, b555c <loop+0x11c>
            if (start->type == type) {
   b552c:	889a      	ldrh	r2, [r3, #4]
   b552e:	2a01      	cmp	r2, #1
   b5530:	d1fa      	bne.n	b5528 <loop+0xe8>
                if (gpioWakeup->pin == pin) {
   b5532:	899a      	ldrh	r2, [r3, #12]
   b5534:	4542      	cmp	r2, r8
   b5536:	d1f7      	bne.n	b5528 <loop+0xe8>
                    gpioWakeup->mode = mode;
   b5538:	2200      	movs	r2, #0
   b553a:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b553c:	7d23      	ldrb	r3, [r4, #20]
   b553e:	2b00      	cmp	r3, #0
   b5540:	d036      	beq.n	b55b0 <loop+0x170>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5542:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b5544:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b5548:	68db      	ldr	r3, [r3, #12]
   b554a:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b554e:	b1db      	cbz	r3, b5588 <loop+0x148>
            if (start->type == type) {
   b5550:	889a      	ldrh	r2, [r3, #4]
   b5552:	2a04      	cmp	r2, #4
   b5554:	f000 81fd 	beq.w	b5952 <loop+0x512>
            start = start->next;
   b5558:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b555a:	e7f8      	b.n	b554e <loop+0x10e>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b555c:	4940      	ldr	r1, [pc, #256]	; (b5660 <loop+0x220>)
   b555e:	2010      	movs	r0, #16
   b5560:	f009 fbf6 	bl	bed50 <_ZnwjRKSt9nothrow_t>
   b5564:	4606      	mov	r6, r0
   b5566:	2800      	cmp	r0, #0
   b5568:	f000 81f6 	beq.w	b5958 <loop+0x518>
   b556c:	2210      	movs	r2, #16
   b556e:	2100      	movs	r1, #0
   b5570:	f00a f92a 	bl	bf7c8 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5574:	4b3b      	ldr	r3, [pc, #236]	; (b5664 <loop+0x224>)
   b5576:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5578:	2301      	movs	r3, #1
   b557a:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b557c:	6923      	ldr	r3, [r4, #16]
   b557e:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b5580:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5584:	6126      	str	r6, [r4, #16]
   b5586:	e7d9      	b.n	b553c <loop+0xfc>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5588:	4935      	ldr	r1, [pc, #212]	; (b5660 <loop+0x220>)
   b558a:	2010      	movs	r0, #16
   b558c:	f009 fbe0 	bl	bed50 <_ZnwjRKSt9nothrow_t>
   b5590:	4606      	mov	r6, r0
   b5592:	2800      	cmp	r0, #0
   b5594:	f000 81e0 	beq.w	b5958 <loop+0x518>
   b5598:	2210      	movs	r2, #16
   b559a:	2100      	movs	r1, #0
   b559c:	f00a f914 	bl	bf7c8 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b55a0:	4b30      	ldr	r3, [pc, #192]	; (b5664 <loop+0x224>)
   b55a2:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b55a4:	2304      	movs	r3, #4
   b55a6:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b55a8:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b55aa:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b55ac:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b55b0:	4927      	ldr	r1, [pc, #156]	; (b5650 <loop+0x210>)
   b55b2:	a805      	add	r0, sp, #20
   b55b4:	f008 fed2 	bl	be35c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b55b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b55bc:	4822      	ldr	r0, [pc, #136]	; (b5648 <loop+0x208>)
   b55be:	f001 fcd3 	bl	b6f68 <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b55c2:	2000      	movs	r0, #0
   b55c4:	f005 fe1e 	bl	bb204 <hal_timer_millis>
        while (_while() && !_condition()) {
   b55c8:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b55cc:	4604      	mov	r4, r0
   b55ce:	2000      	movs	r0, #0
   b55d0:	f005 fe18 	bl	bb204 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b55d4:	1b00      	subs	r0, r0, r4
   b55d6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b55da:	42b0      	cmp	r0, r6
   b55dc:	f171 0300 	sbcs.w	r3, r1, #0
   b55e0:	d207      	bcs.n	b55f2 <loop+0x1b2>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b55e2:	f009 f993 	bl	be90c <_Z16_fetch_usbserialv>
   b55e6:	f009 f986 	bl	be8f6 <_ZN9USBSerial11isConnectedEv>
   b55ea:	b910      	cbnz	r0, b55f2 <loop+0x1b2>
            spark_process();
   b55ec:	f006 f8de 	bl	bb7ac <spark_process>
        while (_while() && !_condition()) {
   b55f0:	e7ed      	b.n	b55ce <loop+0x18e>
   b55f2:	f009 f98b 	bl	be90c <_Z16_fetch_usbserialv>
   b55f6:	f009 f97e 	bl	be8f6 <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b55fa:	2302      	movs	r3, #2
   b55fc:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b55fe:	4b11      	ldr	r3, [pc, #68]	; (b5644 <loop+0x204>)
   b5600:	2201      	movs	r2, #1
   b5602:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b5604:	f009 f89b 	bl	be73e <_ZN9TimeClass3nowEv>
   b5608:	19c2      	adds	r2, r0, r7
   b560a:	17d3      	asrs	r3, r2, #31
   b560c:	a808      	add	r0, sp, #32
   b560e:	f008 ff91 	bl	be534 <_ZN9TimeClass7timeStrEx>
   b5612:	9a08      	ldr	r2, [sp, #32]
   b5614:	9202      	str	r2, [sp, #8]
   b5616:	f008 ff01 	bl	be41c <_ZN11SystemClass10freeMemoryEv>
   b561a:	9a02      	ldr	r2, [sp, #8]
   b561c:	4912      	ldr	r1, [pc, #72]	; (b5668 <loop+0x228>)
   b561e:	4603      	mov	r3, r0
   b5620:	480d      	ldr	r0, [pc, #52]	; (b5658 <loop+0x218>)
   b5622:	f7fe fd5b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b5626:	a808      	add	r0, sp, #32
   b5628:	f008 fce2 	bl	bdff0 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b562c:	9805      	ldr	r0, [sp, #20]
   b562e:	2800      	cmp	r0, #0
   b5630:	f43f af26 	beq.w	b5480 <loop+0x40>
            free(wakeupSource_);
   b5634:	f006 f97a 	bl	bb92c <free>
		} break;
   b5638:	e722      	b.n	b5480 <loop+0x40>
   b563a:	bf00      	nop
   b563c:	2003e3da 	.word	0x2003e3da
   b5640:	2003e3d9 	.word	0x2003e3d9
   b5644:	2003e3d8 	.word	0x2003e3d8
   b5648:	2003e2ac 	.word	0x2003e2ac
   b564c:	2003dd9c 	.word	0x2003dd9c
   b5650:	2003e2cc 	.word	0x2003e2cc
   b5654:	000c050f 	.word	0x000c050f
   b5658:	2003e658 	.word	0x2003e658
   b565c:	000c06e6 	.word	0x000c06e6
   b5660:	000c1700 	.word	0x000c1700
   b5664:	00030010 	.word	0x00030010
   b5668:	000c054f 	.word	0x000c054f
			if (state != oldState) {
   b566c:	4bbd      	ldr	r3, [pc, #756]	; (b5964 <loop+0x524>)
   b566e:	781b      	ldrb	r3, [r3, #0]
   b5670:	2b04      	cmp	r3, #4
   b5672:	d062      	beq.n	b573a <loop+0x2fa>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5674:	2b07      	cmp	r3, #7
   b5676:	d003      	beq.n	b5680 <loop+0x240>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5678:	f005 fdb4 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
   b567c:	4bba      	ldr	r3, [pc, #744]	; (b5968 <loop+0x528>)
   b567e:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5680:	f7ff fbcc 	bl	b4e1c <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b5684:	f7fe fd42 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b5688:	f7fe fdc8 	bl	b421c <_ZN14LoRA_Functions11clearBufferEv>
   b568c:	f009 f857 	bl	be73e <_ZN9TimeClass3nowEv>
   b5690:	4cb6      	ldr	r4, [pc, #728]	; (b596c <loop+0x52c>)
   b5692:	17c3      	asrs	r3, r0, #31
   b5694:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5698:	4620      	mov	r0, r4
   b569a:	f002 fec5 	bl	b8428 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b569e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b56a2:	a805      	add	r0, sp, #20
   b56a4:	f002 fd52 	bl	b814c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b56a8:	f99d 6018 	ldrsb.w	r6, [sp, #24]
   b56ac:	f000 fa32 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b56b0:	f000 fb82 	bl	b5db8 <_ZNK13sysStatusData12get_openTimeEv>
   b56b4:	4286      	cmp	r6, r0
   b56b6:	db6d      	blt.n	b5794 <loop+0x354>
   b56b8:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b56bc:	a808      	add	r0, sp, #32
   b56be:	f002 fd45 	bl	b814c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b56c2:	f99d 6024 	ldrsb.w	r6, [sp, #36]	; 0x24
   b56c6:	f000 fa25 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b56ca:	f000 fb7a 	bl	b5dc2 <_ZNK13sysStatusData13get_closeTimeEv>
   b56ce:	4286      	cmp	r6, r0
   b56d0:	a808      	add	r0, sp, #32
   b56d2:	bfac      	ite	ge
   b56d4:	2600      	movge	r6, #0
   b56d6:	2601      	movlt	r6, #1
   b56d8:	f002 faab 	bl	b7c32 <_ZN12LocalTimeHMSD1Ev>
   b56dc:	a805      	add	r0, sp, #20
   b56de:	f002 faa8 	bl	b7c32 <_ZN12LocalTimeHMSD1Ev>
   b56e2:	2e00      	cmp	r6, #0
   b56e4:	d058      	beq.n	b5798 <loop+0x358>
   b56e6:	f000 fa65 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b56ea:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b56ec:	f000 fd8e 	bl	b620c <_ZN17currentStatusData13set_openHoursEb>
				Log.info("Gateway is listening for LoRA messages and the park is %s (%d / %d / %d)", (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b56f0:	f000 fa60 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b56f4:	f000 fd61 	bl	b61ba <_ZNK17currentStatusData13get_openHoursEv>
   b56f8:	4b9d      	ldr	r3, [pc, #628]	; (b5970 <loop+0x530>)
   b56fa:	4a9e      	ldr	r2, [pc, #632]	; (b5974 <loop+0x534>)
   b56fc:	499e      	ldr	r1, [pc, #632]	; (b5978 <loop+0x538>)
   b56fe:	2800      	cmp	r0, #0
   b5700:	bf08      	it	eq
   b5702:	461a      	moveq	r2, r3
   b5704:	a808      	add	r0, sp, #32
   b5706:	9203      	str	r2, [sp, #12]
   b5708:	f002 fd20 	bl	b814c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b570c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b5710:	9302      	str	r3, [sp, #8]
   b5712:	f000 f9ff 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5716:	f000 fb4f 	bl	b5db8 <_ZNK13sysStatusData12get_openTimeEv>
   b571a:	4604      	mov	r4, r0
   b571c:	f000 f9fa 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5720:	f000 fb4f 	bl	b5dc2 <_ZNK13sysStatusData13get_closeTimeEv>
   b5724:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5728:	e9cd 4000 	strd	r4, r0, [sp]
   b572c:	4993      	ldr	r1, [pc, #588]	; (b597c <loop+0x53c>)
   b572e:	4894      	ldr	r0, [pc, #592]	; (b5980 <loop+0x540>)
   b5730:	f7fe fcd4 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b5734:	a808      	add	r0, sp, #32
   b5736:	f002 fa7c 	bl	b7c32 <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway() && current.get_alertCodeNode() != 1) state = REPORTING_STATE; 			// Received and acknowledged data from a node - report unless there is Alert Code 1 (Unconfigured Node)
   b573a:	f7fe fce7 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b573e:	f7ff fa13 	bl	b4b68 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b5742:	b138      	cbz	r0, b5754 <loop+0x314>
   b5744:	f000 fa36 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b5748:	f000 fb63 	bl	b5e12 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b574c:	2801      	cmp	r0, #1
   b574e:	bf1c      	itt	ne
   b5750:	2307      	movne	r3, #7
   b5752:	702b      	strbne	r3, [r5, #0]
			if (!testModeFlag && ((millis() - startLoRAWindow) > 150000L)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5754:	4b8b      	ldr	r3, [pc, #556]	; (b5984 <loop+0x544>)
   b5756:	781b      	ldrb	r3, [r3, #0]
   b5758:	2b00      	cmp	r3, #0
   b575a:	f47f ae91 	bne.w	b5480 <loop+0x40>
   b575e:	f005 fd41 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
   b5762:	4b81      	ldr	r3, [pc, #516]	; (b5968 <loop+0x528>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	1ac0      	subs	r0, r0, r3
   b5768:	4b87      	ldr	r3, [pc, #540]	; (b5988 <loop+0x548>)
   b576a:	4298      	cmp	r0, r3
   b576c:	f67f ae88 	bls.w	b5480 <loop+0x40>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b5770:	f7fe fccc 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b5774:	f7fe fd62 	bl	b423c <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over
   b5778:	f008 fff2 	bl	be760 <_ZN9TimeClass4hourEv>
   b577c:	4604      	mov	r4, r0
   b577e:	f000 f9c9 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5782:	f000 fc87 	bl	b6094 <_ZNK13sysStatusData18get_lastConnectionEv>
   b5786:	f008 feb1 	bl	be4ec <_ZN9TimeClass4hourEx>
   b578a:	4284      	cmp	r4, r0
   b578c:	f000 80b0 	beq.w	b58f0 <loop+0x4b0>
   b5790:	2305      	movs	r3, #5
   b5792:	e674      	b.n	b547e <loop+0x3e>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b5794:	2600      	movs	r6, #0
   b5796:	e7a1      	b.n	b56dc <loop+0x29c>
				else current.set_openHours(false);
   b5798:	f000 fa0c 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b579c:	4631      	mov	r1, r6
   b579e:	e7a5      	b.n	b56ec <loop+0x2ac>
			if (state != oldState) publishStateTransition();
   b57a0:	4b70      	ldr	r3, [pc, #448]	; (b5964 <loop+0x524>)
   b57a2:	781b      	ldrb	r3, [r3, #0]
   b57a4:	2b07      	cmp	r3, #7
   b57a6:	d001      	beq.n	b57ac <loop+0x36c>
   b57a8:	f7ff fb38 	bl	b4e1c <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b57ac:	f000 fa02 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b57b0:	f000 fb11 	bl	b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>
			publishWebhook(nodeNumber);
   b57b4:	f7ff fb7a 	bl	b4eac <_Z14publishWebhookh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b57b8:	f000 f9ac 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b57bc:	4604      	mov	r4, r0
   b57be:	f000 f9a9 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b57c2:	f000 faf4 	bl	b5dae <_ZNK13sysStatusData16get_messageCountEv>
   b57c6:	3001      	adds	r0, #1
   b57c8:	b2c1      	uxtb	r1, r0
   b57ca:	4620      	mov	r0, r4
   b57cc:	f000 fb73 	bl	b5eb6 <_ZN13sysStatusData16set_messageCountEh>
   b57d0:	e652      	b.n	b5478 <loop+0x38>
			if (state != oldState) {
   b57d2:	4b64      	ldr	r3, [pc, #400]	; (b5964 <loop+0x524>)
   b57d4:	4c6d      	ldr	r4, [pc, #436]	; (b598c <loop+0x54c>)
   b57d6:	781b      	ldrb	r3, [r3, #0]
   b57d8:	2b05      	cmp	r3, #5
   b57da:	d025      	beq.n	b5828 <loop+0x3e8>
				publishStateTransition();  
   b57dc:	f7ff fb1e 	bl	b4e1c <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b57e0:	f000 f998 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b57e4:	f000 fc56 	bl	b6094 <_ZNK13sysStatusData18get_lastConnectionEv>
   b57e8:	f008 fe88 	bl	be4fc <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b57ec:	4962      	ldr	r1, [pc, #392]	; (b5978 <loop+0x538>)
   b57ee:	4606      	mov	r6, r0
   b57f0:	a808      	add	r0, sp, #32
   b57f2:	f002 fcc8 	bl	b8186 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b57f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   b57fa:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b57fe:	d005      	beq.n	b580c <loop+0x3cc>
					resetEverything();
   b5800:	f000 fc86 	bl	b6110 <_Z15resetEverythingv>
					Log.info("New Day - Resetting everything");
   b5804:	4962      	ldr	r1, [pc, #392]	; (b5990 <loop+0x550>)
   b5806:	485e      	ldr	r0, [pc, #376]	; (b5980 <loop+0x540>)
   b5808:	f7fe fc68 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b580c:	f000 f982 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5810:	f000 fac3 	bl	b5d9a <_ZNK13sysStatusData14get_nodeNumberEv>
   b5814:	f7ff fb4a 	bl	b4eac <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5818:	f005 ffd8 	bl	bb7cc <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b581c:	b908      	cbnz	r0, b5822 <loop+0x3e2>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b581e:	f005 ffcd 	bl	bb7bc <spark_cloud_flag_connect>
   b5822:	f005 fcdf 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b5826:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5828:	f005 ffd0 	bl	bb7cc <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b582c:	b338      	cbz	r0, b587e <loop+0x43e>
				sysStatus.set_lastConnection(Time.now());
   b582e:	f000 f971 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5832:	4606      	mov	r6, r0
   b5834:	f008 ff83 	bl	be73e <_ZN9TimeClass3nowEv>
   b5838:	4602      	mov	r2, r0
   b583a:	17c3      	asrs	r3, r0, #31
   b583c:	4630      	mov	r0, r6
   b583e:	f000 fc5c 	bl	b60fa <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b5842:	f000 f967 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5846:	4606      	mov	r6, r0
   b5848:	f005 fccc 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
   b584c:	6821      	ldr	r1, [r4, #0]
   b584e:	1a41      	subs	r1, r0, r1
   b5850:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5854:	fbb1 f1f0 	udiv	r1, r1, r0
   b5858:	4630      	mov	r0, r6
   b585a:	b289      	uxth	r1, r1
   b585c:	f000 fbdf 	bl	b601e <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b5860:	f005 ffb4 	bl	bb7cc <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b5864:	b338      	cbz	r0, b58b6 <loop+0x476>
   b5866:	f005 ffb1 	bl	bb7cc <spark_cloud_flag_connected>
        if (!connected()) {
   b586a:	b110      	cbz	r0, b5872 <loop+0x432>
        return spark_sync_time(NULL);
   b586c:	2000      	movs	r0, #0
   b586e:	f005 ffc5 	bl	bb7fc <spark_sync_time>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b5872:	f7ff fa81 	bl	b4d78 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b5876:	b950      	cbnz	r0, b588e <loop+0x44e>
            spark_process();
   b5878:	f005 ff98 	bl	bb7ac <spark_process>
        while (_while() && !_condition()) {
   b587c:	e7f9      	b.n	b5872 <loop+0x432>
   b587e:	f005 fcb1 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b5882:	6823      	ldr	r3, [r4, #0]
   b5884:	1ac0      	subs	r0, r0, r3
   b5886:	4b43      	ldr	r3, [pc, #268]	; (b5994 <loop+0x554>)
   b5888:	4298      	cmp	r0, r3
   b588a:	d8d0      	bhi.n	b582e <loop+0x3ee>
   b588c:	e5f8      	b.n	b5480 <loop+0x40>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b588e:	f7ff fa73 	bl	b4d78 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b5892:	4941      	ldr	r1, [pc, #260]	; (b5998 <loop+0x558>)
   b5894:	a808      	add	r0, sp, #32
   b5896:	f006 f93b 	bl	bbb10 <_ZN5spark13CellularClass4RSSIEv>
					sysStatus.set_RSSI(sig.getStrength());
   b589a:	f000 f93b 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b589e:	4604      	mov	r4, r0
   b58a0:	a808      	add	r0, sp, #32
   b58a2:	f006 f9b1 	bl	bbc08 <_ZNK14CellularSignal11getStrengthEv>
   b58a6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
   b58aa:	4620      	mov	r0, r4
   b58ac:	ee10 3a10 	vmov	r3, s0
   b58b0:	b299      	uxth	r1, r3
   b58b2:	f000 fbc0 	bl	b6036 <_ZN13sysStatusData8set_RSSIEt>
				state = DISCONNECTING_STATE;											// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b58b6:	2306      	movs	r3, #6
   b58b8:	e5e1      	b.n	b547e <loop+0x3e>
			if (state != oldState) {
   b58ba:	4b2a      	ldr	r3, [pc, #168]	; (b5964 <loop+0x524>)
   b58bc:	4c37      	ldr	r4, [pc, #220]	; (b599c <loop+0x55c>)
   b58be:	781b      	ldrb	r3, [r3, #0]
   b58c0:	2b06      	cmp	r3, #6
   b58c2:	d004      	beq.n	b58ce <loop+0x48e>
				publishStateTransition(); 
   b58c4:	f7ff faaa 	bl	b4e1c <_Z22publishStateTransitionv>
   b58c8:	f005 fc8c 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b58cc:	6020      	str	r0, [r4, #0]
   b58ce:	f005 fc89 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b58d2:	6823      	ldr	r3, [r4, #0]
   b58d4:	1ac0      	subs	r0, r0, r3
   b58d6:	4b32      	ldr	r3, [pc, #200]	; (b59a0 <loop+0x560>)
   b58d8:	4298      	cmp	r0, r3
   b58da:	f67f add1 	bls.w	b5480 <loop+0x40>
   b58de:	f003 f893 	bl	b8a08 <_ZN17PublishQueuePosix8instanceEv>
   b58e2:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b58e6:	2b00      	cmp	r3, #0
   b58e8:	f43f adca 	beq.w	b5480 <loop+0x40>
				disconnectFromParticle();
   b58ec:	f001 f858 	bl	b69a0 <_Z22disconnectFromParticlev>
				state = IDLE_STATE;
   b58f0:	2302      	movs	r3, #2
   b58f2:	e5c4      	b.n	b547e <loop+0x3e>
			static system_tick_t resetTimeout = millis();
   b58f4:	4c2b      	ldr	r4, [pc, #172]	; (b59a4 <loop+0x564>)
   b58f6:	4e2c      	ldr	r6, [pc, #176]	; (b59a8 <loop+0x568>)
   b58f8:	7823      	ldrb	r3, [r4, #0]
   b58fa:	f3bf 8f5b 	dmb	ish
   b58fe:	f013 0f01 	tst.w	r3, #1
   b5902:	d109      	bne.n	b5918 <loop+0x4d8>
   b5904:	4620      	mov	r0, r4
   b5906:	f7fe fbd9 	bl	b40bc <__cxa_guard_acquire>
   b590a:	b128      	cbz	r0, b5918 <loop+0x4d8>
   b590c:	f005 fc6a 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
   b5910:	6030      	str	r0, [r6, #0]
   b5912:	4620      	mov	r0, r4
   b5914:	f7fe fbd7 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b5918:	4b12      	ldr	r3, [pc, #72]	; (b5964 <loop+0x524>)
   b591a:	782a      	ldrb	r2, [r5, #0]
   b591c:	781b      	ldrb	r3, [r3, #0]
   b591e:	429a      	cmp	r2, r3
   b5920:	d001      	beq.n	b5926 <loop+0x4e6>
   b5922:	f7ff fa7b 	bl	b4e1c <_Z22publishStateTransitionv>
   b5926:	f005 fc5d 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b592a:	6833      	ldr	r3, [r6, #0]
   b592c:	1ac0      	subs	r0, r0, r3
   b592e:	f247 5330 	movw	r3, #30000	; 0x7530
   b5932:	4298      	cmp	r0, r3
   b5934:	f67f ada4 	bls.w	b5480 <loop+0x40>
				Log.info("Deep power down device");
   b5938:	491c      	ldr	r1, [pc, #112]	; (b59ac <loop+0x56c>)
   b593a:	4811      	ldr	r0, [pc, #68]	; (b5980 <loop+0x540>)
   b593c:	f7fe fbce 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b5940:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5944:	f006 f86a 	bl	bba1c <delay>
				ab1805.deepPowerDown(); 
   b5948:	211e      	movs	r1, #30
   b594a:	4819      	ldr	r0, [pc, #100]	; (b59b0 <loop+0x570>)
   b594c:	f001 fc66 	bl	b721c <_ZN6AB180513deepPowerDownEi>
   b5950:	e596      	b.n	b5480 <loop+0x40>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b5952:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b5956:	e62b      	b.n	b55b0 <loop+0x170>
                valid_ = false;
   b5958:	7526      	strb	r6, [r4, #20]
                return *this;
   b595a:	e629      	b.n	b55b0 <loop+0x170>
}
   b595c:	b010      	add	sp, #64	; 0x40
   b595e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5962:	bf00      	nop
   b5964:	2003e3d9 	.word	0x2003e3d9
   b5968:	2003e2a0 	.word	0x2003e2a0
   b596c:	2003e2e8 	.word	0x2003e2e8
   b5970:	000c0508 	.word	0x000c0508
   b5974:	000c0503 	.word	0x000c0503
   b5978:	2003e350 	.word	0x2003e350
   b597c:	000c0570 	.word	0x000c0570
   b5980:	2003e658 	.word	0x2003e658
   b5984:	2003e3db 	.word	0x2003e3db
   b5988:	000249f0 	.word	0x000249f0
   b598c:	2003e2a4 	.word	0x2003e2a4
   b5990:	000c05b9 	.word	0x000c05b9
   b5994:	000927c0 	.word	0x000927c0
   b5998:	2003e584 	.word	0x2003e584
   b599c:	2003e2a8 	.word	0x2003e2a8
   b59a0:	00015f90 	.word	0x00015f90
   b59a4:	2003e294 	.word	0x2003e294
   b59a8:	2003e29c 	.word	0x2003e29c
   b59ac:	000c05d8 	.word	0x000c05d8
   b59b0:	2003e2ac 	.word	0x2003e2ac

000b59b4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b59b4:	b510      	push	{r4, lr}
   b59b6:	4b03      	ldr	r3, [pc, #12]	; (b59c4 <_ZN8MB85RC64D1Ev+0x10>)
   b59b8:	6003      	str	r3, [r0, #0]
   b59ba:	4604      	mov	r4, r0
   b59bc:	f002 fde2 	bl	b8584 <_ZN6MB85RCD1Ev>
   b59c0:	4620      	mov	r0, r4
   b59c2:	bd10      	pop	{r4, pc}
   b59c4:	000c0618 	.word	0x000c0618

000b59c8 <_ZN8MB85RC64D0Ev>:
   b59c8:	b510      	push	{r4, lr}
   b59ca:	4604      	mov	r4, r0
   b59cc:	f7ff fff2 	bl	b59b4 <_ZN8MB85RC64D1Ev>
   b59d0:	4620      	mov	r0, r4
   b59d2:	2110      	movs	r1, #16
   b59d4:	f7fe fb63 	bl	b409e <_ZdlPvj>
   b59d8:	4620      	mov	r0, r4
   b59da:	bd10      	pop	{r4, pc}

000b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b59dc:	b510      	push	{r4, lr}
            if (!handle_) {
   b59de:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b59e0:	4604      	mov	r4, r0
            if (!handle_) {
   b59e2:	b90b      	cbnz	r3, b59e8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b59e4:	f005 fbae 	bl	bb144 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b59e8:	6820      	ldr	r0, [r4, #0]
        }
   b59ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b59ee:	f005 bbb9 	b.w	bb164 <os_mutex_recursive_lock>

000b59f2 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b59f2:	b538      	push	{r3, r4, r5, lr}
   b59f4:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b59f6:	3004      	adds	r0, #4
   b59f8:	f7ff fff0 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b59fc:	6a20      	ldr	r0, [r4, #32]
   b59fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5a00:	6803      	ldr	r3, [r0, #0]
   b5a02:	68dd      	ldr	r5, [r3, #12]
   b5a04:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5a08:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5a0a:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5a10:	f005 bbb0 	b.w	bb174 <os_mutex_recursive_unlock>

000b5a14 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5a14:	b538      	push	{r3, r4, r5, lr}
   b5a16:	4604      	mov	r4, r0
   b5a18:	3004      	adds	r0, #4
   b5a1a:	f7ff ffdf 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5a1e:	6a20      	ldr	r0, [r4, #32]
   b5a20:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5a22:	6803      	ldr	r3, [r0, #0]
   b5a24:	689d      	ldr	r5, [r3, #8]
   b5a26:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5a2a:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5a2c:	68a2      	ldr	r2, [r4, #8]
   b5a2e:	6823      	ldr	r3, [r4, #0]
   b5a30:	88d1      	ldrh	r1, [r2, #6]
   b5a32:	695b      	ldr	r3, [r3, #20]
   b5a34:	4620      	mov	r0, r4
   b5a36:	4798      	blx	r3
   b5a38:	b918      	cbnz	r0, b5a42 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5a3a:	6823      	ldr	r3, [r4, #0]
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	699b      	ldr	r3, [r3, #24]
   b5a40:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5a42:	6860      	ldr	r0, [r4, #4]
   b5a44:	f005 fb96 	bl	bb174 <os_mutex_recursive_unlock>
        }
   b5a48:	2001      	movs	r0, #1
   b5a4a:	bd38      	pop	{r3, r4, r5, pc}

000b5a4c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5a4c:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5a4e:	4b04      	ldr	r3, [pc, #16]	; (b5a60 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b5a50:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b5a52:	4604      	mov	r4, r0
            if (handle_) {
   b5a54:	6840      	ldr	r0, [r0, #4]
   b5a56:	b108      	cbz	r0, b5a5c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5a58:	f005 fb7c 	bl	bb154 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	bd10      	pop	{r4, pc}
   b5a60:	000c13f4 	.word	0x000c13f4

000b5a64 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b5a64:	b510      	push	{r4, lr}
   b5a66:	4b03      	ldr	r3, [pc, #12]	; (b5a74 <_ZN13sysStatusDataD1Ev+0x10>)
   b5a68:	6003      	str	r3, [r0, #0]
   b5a6a:	4604      	mov	r4, r0
   b5a6c:	f7ff ffee 	bl	b5a4c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5a70:	4620      	mov	r0, r4
   b5a72:	bd10      	pop	{r4, pc}
   b5a74:	000c0660 	.word	0x000c0660

000b5a78 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5a78:	b510      	push	{r4, lr}
   b5a7a:	4604      	mov	r4, r0
}
   b5a7c:	f7ff fff2 	bl	b5a64 <_ZN13sysStatusDataD1Ev>
   b5a80:	4620      	mov	r0, r4
   b5a82:	2168      	movs	r1, #104	; 0x68
   b5a84:	f7fe fb0b 	bl	b409e <_ZdlPvj>
   b5a88:	4620      	mov	r0, r4
   b5a8a:	bd10      	pop	{r4, pc}

000b5a8c <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5a8c:	b510      	push	{r4, lr}
   b5a8e:	4b03      	ldr	r3, [pc, #12]	; (b5a9c <_ZN17currentStatusDataD1Ev+0x10>)
   b5a90:	6003      	str	r3, [r0, #0]
   b5a92:	4604      	mov	r4, r0
   b5a94:	f7ff ffda 	bl	b5a4c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5a98:	4620      	mov	r0, r4
   b5a9a:	bd10      	pop	{r4, pc}
   b5a9c:	000c068c 	.word	0x000c068c

000b5aa0 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5aa0:	b510      	push	{r4, lr}
   b5aa2:	4604      	mov	r4, r0
}
   b5aa4:	f7ff fff2 	bl	b5a8c <_ZN17currentStatusDataD1Ev>
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	2170      	movs	r1, #112	; 0x70
   b5aac:	f7fe faf7 	bl	b409e <_ZdlPvj>
   b5ab0:	4620      	mov	r0, r4
   b5ab2:	bd10      	pop	{r4, pc}

000b5ab4 <_ZN10nodeIDDataD1Ev>:

nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {

};

nodeIDData::~nodeIDData() {
   b5ab4:	b510      	push	{r4, lr}
   b5ab6:	4b03      	ldr	r3, [pc, #12]	; (b5ac4 <_ZN10nodeIDDataD1Ev+0x10>)
   b5ab8:	6003      	str	r3, [r0, #0]
   b5aba:	4604      	mov	r4, r0
   b5abc:	f7ff ffc6 	bl	b5a4c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5ac0:	4620      	mov	r0, r4
   b5ac2:	bd10      	pop	{r4, pc}
   b5ac4:	000c0634 	.word	0x000c0634

000b5ac8 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b5ac8:	b510      	push	{r4, lr}
   b5aca:	4604      	mov	r4, r0
}
   b5acc:	f7ff fff2 	bl	b5ab4 <_ZN10nodeIDDataD1Ev>
   b5ad0:	4620      	mov	r0, r4
   b5ad2:	21b0      	movs	r1, #176	; 0xb0
   b5ad4:	f7fe fae3 	bl	b409e <_ZdlPvj>
   b5ad8:	4620      	mov	r0, r4
   b5ada:	bd10      	pop	{r4, pc}

000b5adc <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5adc:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ae0:	6081      	str	r1, [r0, #8]
   b5ae2:	4909      	ldr	r1, [pc, #36]	; (b5b08 <_ZN13sysStatusDataC1Ev+0x2c>)
   b5ae4:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b5ae8:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5aec:	2101      	movs	r1, #1
   b5aee:	8281      	strh	r1, [r0, #20]
   b5af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5af4:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5af6:	4905      	ldr	r1, [pc, #20]	; (b5b0c <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5af8:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5afa:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5afe:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b00:	6182      	str	r2, [r0, #24]
   b5b02:	4a03      	ldr	r2, [pc, #12]	; (b5b10 <_ZN13sysStatusDataC1Ev+0x34>)
   b5b04:	6002      	str	r2, [r0, #0]
};
   b5b06:	4770      	bx	lr
   b5b08:	20a99e75 	.word	0x20a99e75
   b5b0c:	2003e3ec 	.word	0x2003e3ec
   b5b10:	000c0660 	.word	0x000c0660

000b5b14 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5b14:	b510      	push	{r4, lr}
    if (!_instance) {
   b5b16:	4c06      	ldr	r4, [pc, #24]	; (b5b30 <_ZN13sysStatusData8instanceEv+0x1c>)
   b5b18:	6823      	ldr	r3, [r4, #0]
   b5b1a:	b93b      	cbnz	r3, b5b2c <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5b1c:	2068      	movs	r0, #104	; 0x68
   b5b1e:	f7fe faba 	bl	b4096 <_Znwj>
   b5b22:	4603      	mov	r3, r0
   b5b24:	b108      	cbz	r0, b5b2a <_ZN13sysStatusData8instanceEv+0x16>
   b5b26:	f7ff ffd9 	bl	b5adc <_ZN13sysStatusDataC1Ev>
   b5b2a:	6023      	str	r3, [r4, #0]
}
   b5b2c:	6820      	ldr	r0, [r4, #0]
   b5b2e:	bd10      	pop	{r4, pc}
   b5b30:	2003e3e4 	.word	0x2003e3e4

000b5b34 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5b34:	b508      	push	{r3, lr}
    fram.begin();
   b5b36:	6a00      	ldr	r0, [r0, #32]
   b5b38:	f002 fd3a 	bl	b85b0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5b3c:	f7ff ffea 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5b40:	6803      	ldr	r3, [r0, #0]
   b5b42:	685b      	ldr	r3, [r3, #4]
   b5b44:	4798      	blx	r3
}
   b5b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setGatewayConfiguration();                             // Here we will fix the settings specific to the node
   b5b4a:	f000 bbe1 	b.w	b6310 <_Z23setGatewayConfigurationv>

000b5b4e <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b5b4e:	b510      	push	{r4, lr}
    fram.begin();
   b5b50:	6a00      	ldr	r0, [r0, #32]
   b5b52:	f002 fd2d 	bl	b85b0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5b56:	f7ff ffdd 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5b5a:	6803      	ldr	r3, [r0, #0]
}
   b5b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5b60:	685b      	ldr	r3, [r3, #4]
   b5b62:	4718      	bx	r3

000b5b64 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5b64:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5b66:	f7ff ffd5 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5b6a:	6803      	ldr	r3, [r0, #0]
}
   b5b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5b70:	68db      	ldr	r3, [r3, #12]
   b5b72:	2100      	movs	r1, #0
   b5b74:	4718      	bx	r3
	...

000b5b78 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5b78:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5b7a:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5b7e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b80:	6182      	str	r2, [r0, #24]
   b5b82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5b86:	6081      	str	r1, [r0, #8]
   b5b88:	61c2      	str	r2, [r0, #28]
   b5b8a:	4907      	ldr	r1, [pc, #28]	; (b5ba8 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5b8c:	4a07      	ldr	r2, [pc, #28]	; (b5bac <_ZN17currentStatusDataC1Ev+0x34>)
   b5b8e:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b90:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5b94:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b96:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5b9a:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b9c:	2101      	movs	r1, #1
   b5b9e:	4a04      	ldr	r2, [pc, #16]	; (b5bb0 <_ZN17currentStatusDataC1Ev+0x38>)
   b5ba0:	8281      	strh	r1, [r0, #20]
   b5ba2:	6002      	str	r2, [r0, #0]
};
   b5ba4:	4770      	bx	lr
   b5ba6:	bf00      	nop
   b5ba8:	20a99e74 	.word	0x20a99e74
   b5bac:	2003e3ec 	.word	0x2003e3ec
   b5bb0:	000c068c 	.word	0x000c068c

000b5bb4 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5bb4:	b510      	push	{r4, lr}
    if (!_instance) {
   b5bb6:	4c06      	ldr	r4, [pc, #24]	; (b5bd0 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5bb8:	6823      	ldr	r3, [r4, #0]
   b5bba:	b93b      	cbnz	r3, b5bcc <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5bbc:	2070      	movs	r0, #112	; 0x70
   b5bbe:	f7fe fa6a 	bl	b4096 <_Znwj>
   b5bc2:	4603      	mov	r3, r0
   b5bc4:	b108      	cbz	r0, b5bca <_ZN17currentStatusData8instanceEv+0x16>
   b5bc6:	f7ff ffd7 	bl	b5b78 <_ZN17currentStatusDataC1Ev>
   b5bca:	6023      	str	r3, [r4, #0]
}
   b5bcc:	6820      	ldr	r0, [r4, #0]
   b5bce:	bd10      	pop	{r4, pc}
   b5bd0:	2003e3e8 	.word	0x2003e3e8

000b5bd4 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b5bd4:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5bd6:	f7ff ff9d 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b5bda:	6803      	ldr	r3, [r0, #0]
}
   b5bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5be0:	68db      	ldr	r3, [r3, #12]
   b5be2:	2100      	movs	r1, #0
   b5be4:	4718      	bx	r3
	...

000b5be8 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b5be8:	b510      	push	{r4, lr}
   b5bea:	4604      	mov	r4, r0
   b5bec:	ed2d 8b02 	vpush	{d8}
   b5bf0:	3004      	adds	r0, #4
   b5bf2:	f7ff fef3 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5bf6:	68e3      	ldr	r3, [r4, #12]
   b5bf8:	3b08      	subs	r3, #8
   b5bfa:	2b17      	cmp	r3, #23
   b5bfc:	d90c      	bls.n	b5c18 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5bfe:	68a3      	ldr	r3, [r4, #8]
   b5c00:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5c04:	6860      	ldr	r0, [r4, #4]
   b5c06:	f005 fab5 	bl	bb174 <os_mutex_recursive_unlock>
}
   b5c0a:	eeb0 0a48 	vmov.f32	s0, s16
   b5c0e:	eef0 0a68 	vmov.f32	s1, s17
   b5c12:	ecbd 8b02 	vpop	{d8}
   b5c16:	bd10      	pop	{r4, pc}
            T result = 0;
   b5c18:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5c20 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5c1c:	e7f2      	b.n	b5c04 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5c1e:	bf00      	nop
	...

000b5c28 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b5c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c2a:	4604      	mov	r4, r0
   b5c2c:	3004      	adds	r0, #4
   b5c2e:	ec57 6b10 	vmov	r6, r7, d0
   b5c32:	f7ff fed3 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c36:	68e3      	ldr	r3, [r4, #12]
   b5c38:	3b08      	subs	r3, #8
   b5c3a:	2b17      	cmp	r3, #23
   b5c3c:	d912      	bls.n	b5c64 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5c3e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5c40:	4630      	mov	r0, r6
   b5c42:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5c46:	4639      	mov	r1, r7
   b5c48:	f009 fcb4 	bl	bf5b4 <__aeabi_dcmpeq>
   b5c4c:	b950      	cbnz	r0, b5c64 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5c4e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b5c52:	4620      	mov	r0, r4
   b5c54:	68a5      	ldr	r5, [r4, #8]
   b5c56:	f005 f985 	bl	baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5c5a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5c5c:	6823      	ldr	r3, [r4, #0]
   b5c5e:	4620      	mov	r0, r4
   b5c60:	691b      	ldr	r3, [r3, #16]
   b5c62:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5c64:	6860      	ldr	r0, [r4, #4]
}
   b5c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5c6a:	f005 ba83 	b.w	bb174 <os_mutex_recursive_unlock>
	...

000b5c70 <_ZN10nodeIDDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5c70:	2200      	movs	r2, #0
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b5c72:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5c76:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5c78:	6182      	str	r2, [r0, #24]
   b5c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5c7e:	6081      	str	r1, [r0, #8]
   b5c80:	61c2      	str	r2, [r0, #28]
   b5c82:	4907      	ldr	r1, [pc, #28]	; (b5ca0 <_ZN10nodeIDDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5c84:	4a07      	ldr	r2, [pc, #28]	; (b5ca4 <_ZN10nodeIDDataC1Ev+0x34>)
   b5c86:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5c88:	f04f 0c88 	mov.w	ip, #136	; 0x88
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5c8c:	2296      	movs	r2, #150	; 0x96
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5c8e:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5c92:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5c94:	2101      	movs	r1, #1
   b5c96:	4a04      	ldr	r2, [pc, #16]	; (b5ca8 <_ZN10nodeIDDataC1Ev+0x38>)
   b5c98:	8281      	strh	r1, [r0, #20]
   b5c9a:	6002      	str	r2, [r0, #0]
};
   b5c9c:	4770      	bx	lr
   b5c9e:	bf00      	nop
   b5ca0:	20a99e74 	.word	0x20a99e74
   b5ca4:	2003e3ec 	.word	0x2003e3ec
   b5ca8:	000c0634 	.word	0x000c0634

000b5cac <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b5cac:	b510      	push	{r4, lr}
    if (!_instance) {
   b5cae:	4c06      	ldr	r4, [pc, #24]	; (b5cc8 <_ZN10nodeIDData8instanceEv+0x1c>)
   b5cb0:	6823      	ldr	r3, [r4, #0]
   b5cb2:	b93b      	cbnz	r3, b5cc4 <_ZN10nodeIDData8instanceEv+0x18>
        _instance = new nodeIDData();
   b5cb4:	20b0      	movs	r0, #176	; 0xb0
   b5cb6:	f7fe f9ee 	bl	b4096 <_Znwj>
   b5cba:	4603      	mov	r3, r0
   b5cbc:	b108      	cbz	r0, b5cc2 <_ZN10nodeIDData8instanceEv+0x16>
   b5cbe:	f7ff ffd7 	bl	b5c70 <_ZN10nodeIDDataC1Ev>
   b5cc2:	6023      	str	r3, [r4, #0]
}
   b5cc4:	6820      	ldr	r0, [r4, #0]
   b5cc6:	bd10      	pop	{r4, pc}
   b5cc8:	2003e3e0 	.word	0x2003e3e0

000b5ccc <_ZN10nodeIDData5setupEv>:

void nodeIDData::setup() {
   b5ccc:	b510      	push	{r4, lr}
    fram.begin();
   b5cce:	6a00      	ldr	r0, [r0, #32]
   b5cd0:	f002 fc6e 	bl	b85b0 <_ZN6MB85RC5beginEv>
    nodeID.load();
   b5cd4:	f7ff ffea 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b5cd8:	6803      	ldr	r3, [r0, #0]
}
   b5cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.load();
   b5cde:	685b      	ldr	r3, [r3, #4]
   b5ce0:	4718      	bx	r3

000b5ce2 <_ZN10nodeIDData4loopEv>:

void nodeIDData::loop() {
   b5ce2:	b510      	push	{r4, lr}
    nodeID.flush(false);
   b5ce4:	f7ff ffe2 	bl	b5cac <_ZN10nodeIDData8instanceEv>
   b5ce8:	6803      	ldr	r3, [r0, #0]
}
   b5cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.flush(false);
   b5cee:	68db      	ldr	r3, [r3, #12]
   b5cf0:	2100      	movs	r1, #0
   b5cf2:	4718      	bx	r3

000b5cf4 <_ZNK10nodeIDData14get_deviceID_1Ev>:

String nodeIDData::get_deviceID_1() const {
   b5cf4:	b538      	push	{r3, r4, r5, lr}
   b5cf6:	4604      	mov	r4, r0
   b5cf8:	460d      	mov	r5, r1
	String result;
   b5cfa:	4905      	ldr	r1, [pc, #20]	; (b5d10 <_ZNK10nodeIDData14get_deviceID_1Ev+0x1c>)
   b5cfc:	f008 f9c3 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, deviceID_1), sizeof(NodeData::deviceID_1), result);
   b5d00:	4623      	mov	r3, r4
   b5d02:	2219      	movs	r2, #25
   b5d04:	2110      	movs	r1, #16
   b5d06:	4628      	mov	r0, r5
   b5d08:	f005 f8d3 	bl	baeb2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	bd38      	pop	{r3, r4, r5, pc}
   b5d10:	000c1579 	.word	0x000c1579

000b5d14 <_ZN10nodeIDData14set_deviceID_1EPKc>:

bool nodeIDData::set_deviceID_1(const char *str) {
   b5d14:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, deviceID_1), sizeof(NodeData::deviceID_1), str);
   b5d16:	2219      	movs	r2, #25
   b5d18:	2110      	movs	r1, #16
   b5d1a:	f005 b93b 	b.w	baf94 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>
	...

000b5d20 <_ZNK10nodeIDData14get_deviceID_2Ev>:

void nodeIDData::set_lastConnection_1(time_t value) {
    setValue<time_t>(offsetof(NodeData, lastConnection_1), value);
}

String nodeIDData::get_deviceID_2() const {
   b5d20:	b538      	push	{r3, r4, r5, lr}
   b5d22:	4604      	mov	r4, r0
   b5d24:	460d      	mov	r5, r1
	String result;
   b5d26:	4905      	ldr	r1, [pc, #20]	; (b5d3c <_ZNK10nodeIDData14get_deviceID_2Ev+0x1c>)
   b5d28:	f008 f9ad 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, deviceID_2), sizeof(NodeData::deviceID_2), result);
   b5d2c:	4623      	mov	r3, r4
   b5d2e:	2219      	movs	r2, #25
   b5d30:	2138      	movs	r1, #56	; 0x38
   b5d32:	4628      	mov	r0, r5
   b5d34:	f005 f8bd 	bl	baeb2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5d38:	4620      	mov	r0, r4
   b5d3a:	bd38      	pop	{r3, r4, r5, pc}
   b5d3c:	000c1579 	.word	0x000c1579

000b5d40 <_ZN10nodeIDData14set_deviceID_2EPKc>:

bool nodeIDData::set_deviceID_2(const char *str) {
   b5d40:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, deviceID_2), sizeof(NodeData::deviceID_2), str);
   b5d42:	2219      	movs	r2, #25
   b5d44:	2138      	movs	r1, #56	; 0x38
   b5d46:	f005 b925 	b.w	baf94 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>
	...

000b5d4c <_ZNK10nodeIDData14get_deviceID_3Ev>:

void nodeIDData::set_lastConnection_2(time_t value) {
    setValue<time_t>(offsetof(NodeData, lastConnection_2), value);
}

String nodeIDData::get_deviceID_3() const {
   b5d4c:	b538      	push	{r3, r4, r5, lr}
   b5d4e:	4604      	mov	r4, r0
   b5d50:	460d      	mov	r5, r1
	String result;
   b5d52:	4905      	ldr	r1, [pc, #20]	; (b5d68 <_ZNK10nodeIDData14get_deviceID_3Ev+0x1c>)
   b5d54:	f008 f997 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, deviceID_3), sizeof(NodeData::deviceID_3), result);
   b5d58:	4623      	mov	r3, r4
   b5d5a:	2219      	movs	r2, #25
   b5d5c:	2160      	movs	r1, #96	; 0x60
   b5d5e:	4628      	mov	r0, r5
   b5d60:	f005 f8a7 	bl	baeb2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5d64:	4620      	mov	r0, r4
   b5d66:	bd38      	pop	{r3, r4, r5, pc}
   b5d68:	000c1579 	.word	0x000c1579

000b5d6c <_ZN10nodeIDData14set_deviceID_3EPKc>:

bool nodeIDData::set_deviceID_3(const char *str) {
   b5d6c:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, deviceID_3), sizeof(NodeData::deviceID_3), str);
   b5d6e:	2219      	movs	r2, #25
   b5d70:	2160      	movs	r1, #96	; 0x60
   b5d72:	f005 b90f 	b.w	baf94 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5d76:	b538      	push	{r3, r4, r5, lr}
   b5d78:	4604      	mov	r4, r0
   b5d7a:	3004      	adds	r0, #4
   b5d7c:	460d      	mov	r5, r1
   b5d7e:	f7ff fe2d 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d82:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5d84:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d86:	3b01      	subs	r3, #1
   b5d88:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5d8a:	bf26      	itte	cs
   b5d8c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5d8e:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5d90:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5d92:	f005 f9ef 	bl	bb174 <os_mutex_recursive_unlock>
        }
   b5d96:	4628      	mov	r0, r5
   b5d98:	bd38      	pop	{r3, r4, r5, pc}

000b5d9a <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5d9a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5d9c:	2110      	movs	r1, #16
   b5d9e:	f7ff ffea 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5da2:	bd08      	pop	{r3, pc}

000b5da4 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5da4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5da6:	2115      	movs	r1, #21
   b5da8:	f7ff ffe5 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5dac:	bd08      	pop	{r3, pc}

000b5dae <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b5dae:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b5db0:	2116      	movs	r1, #22
   b5db2:	f7ff ffe0 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5db6:	bd08      	pop	{r3, pc}

000b5db8 <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b5db8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b5dba:	2138      	movs	r1, #56	; 0x38
   b5dbc:	f7ff ffdb 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5dc0:	bd08      	pop	{r3, pc}

000b5dc2 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b5dc2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b5dc4:	2139      	movs	r1, #57	; 0x39
   b5dc6:	f7ff ffd6 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5dca:	bd08      	pop	{r3, pc}

000b5dcc <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b5dcc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b5dce:	213b      	movs	r1, #59	; 0x3b
   b5dd0:	f7ff ffd1 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5dd4:	bd08      	pop	{r3, pc}

000b5dd6 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b5dd6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b5dd8:	2110      	movs	r1, #16
   b5dda:	f7ff ffcc 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5dde:	bd08      	pop	{r3, pc}

000b5de0 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b5de0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b5de2:	2111      	movs	r1, #17
   b5de4:	f7ff ffc7 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5de8:	bd08      	pop	{r3, pc}

000b5dea <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5dea:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5dec:	2112      	movs	r1, #18
   b5dee:	f7ff ffc2 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5df2:	bd08      	pop	{r3, pc}

000b5df4 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5df4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5df6:	2120      	movs	r1, #32
   b5df8:	f7ff ffbd 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5dfc:	bd08      	pop	{r3, pc}

000b5dfe <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b5dfe:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b5e00:	2121      	movs	r1, #33	; 0x21
   b5e02:	f7ff ffb8 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e06:	bd08      	pop	{r3, pc}

000b5e08 <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b5e08:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b5e0a:	2124      	movs	r1, #36	; 0x24
   b5e0c:	f7ff ffb3 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e10:	bd08      	pop	{r3, pc}

000b5e12 <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b5e12:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b5e14:	2134      	movs	r1, #52	; 0x34
   b5e16:	f7ff ffae 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e1a:	bd08      	pop	{r3, pc}

000b5e1c <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b5e1c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b5e1e:	2141      	movs	r1, #65	; 0x41
   b5e20:	f7ff ffa9 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e24:	bd08      	pop	{r3, pc}

000b5e26 <_ZNK10nodeIDData16get_nodeNumber_1Ev>:
uint8_t nodeIDData::get_nodeNumber_1() const {
   b5e26:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, nodeNumber_1));
   b5e28:	2129      	movs	r1, #41	; 0x29
   b5e2a:	f7ff ffa4 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e2e:	bd08      	pop	{r3, pc}

000b5e30 <_ZNK10nodeIDData16get_sensorType_1Ev>:
uint8_t nodeIDData::get_sensorType_1() const {
   b5e30:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, sensorType_1));
   b5e32:	212a      	movs	r1, #42	; 0x2a
   b5e34:	f7ff ff9f 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e38:	bd08      	pop	{r3, pc}

000b5e3a <_ZNK10nodeIDData16get_nodeNumber_2Ev>:
uint8_t nodeIDData::get_nodeNumber_2() const {
   b5e3a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, nodeNumber_2));
   b5e3c:	2151      	movs	r1, #81	; 0x51
   b5e3e:	f7ff ff9a 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e42:	bd08      	pop	{r3, pc}

000b5e44 <_ZNK10nodeIDData16get_sensorType_2Ev>:
uint8_t nodeIDData::get_sensorType_2() const {
   b5e44:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, sensorType_2));
   b5e46:	2152      	movs	r1, #82	; 0x52
   b5e48:	f7ff ff95 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e4c:	bd08      	pop	{r3, pc}

000b5e4e <_ZNK10nodeIDData16get_nodeNumber_3Ev>:
}

uint8_t nodeIDData::get_nodeNumber_3() const {
   b5e4e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, nodeNumber_3));
   b5e50:	2179      	movs	r1, #121	; 0x79
   b5e52:	f7ff ff90 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e56:	bd08      	pop	{r3, pc}

000b5e58 <_ZNK10nodeIDData16get_sensorType_3Ev>:

void nodeIDData::set_nodeNumber_3(uint8_t value) {
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_3), value);
}

uint8_t nodeIDData::get_sensorType_3() const {
   b5e58:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, sensorType_3));
   b5e5a:	217a      	movs	r1, #122	; 0x7a
   b5e5c:	f7ff ff8b 	bl	b5d76 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5e60:	bd08      	pop	{r3, pc}

000b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5e62:	b570      	push	{r4, r5, r6, lr}
   b5e64:	4604      	mov	r4, r0
   b5e66:	3004      	adds	r0, #4
   b5e68:	460d      	mov	r5, r1
   b5e6a:	4616      	mov	r6, r2
   b5e6c:	f7ff fdb6 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e70:	68e3      	ldr	r3, [r4, #12]
   b5e72:	3b01      	subs	r3, #1
   b5e74:	42ab      	cmp	r3, r5
   b5e76:	d30d      	bcc.n	b5e94 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5e78:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5e7a:	5d5a      	ldrb	r2, [r3, r5]
   b5e7c:	42b2      	cmp	r2, r6
   b5e7e:	d009      	beq.n	b5e94 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5e80:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5e82:	4620      	mov	r0, r4
   b5e84:	68a5      	ldr	r5, [r4, #8]
   b5e86:	f005 f86d 	bl	baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5e8a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5e8c:	6823      	ldr	r3, [r4, #0]
   b5e8e:	4620      	mov	r0, r4
   b5e90:	691b      	ldr	r3, [r3, #16]
   b5e92:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5e94:	6860      	ldr	r0, [r4, #4]
        }
   b5e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5e9a:	f005 b96b 	b.w	bb174 <os_mutex_recursive_unlock>

000b5e9e <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b5e9e:	b508      	push	{r3, lr}
   b5ea0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b5ea2:	2110      	movs	r1, #16
   b5ea4:	f7ff ffdd 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ea8:	bd08      	pop	{r3, pc}

000b5eaa <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5eaa:	b508      	push	{r3, lr}
   b5eac:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5eae:	2115      	movs	r1, #21
   b5eb0:	f7ff ffd7 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5eb4:	bd08      	pop	{r3, pc}

000b5eb6 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b5eb6:	b508      	push	{r3, lr}
   b5eb8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b5eba:	2116      	movs	r1, #22
   b5ebc:	f7ff ffd1 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ec0:	bd08      	pop	{r3, pc}

000b5ec2 <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b5ec2:	b508      	push	{r3, lr}
   b5ec4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b5ec6:	2138      	movs	r1, #56	; 0x38
   b5ec8:	f7ff ffcb 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ecc:	bd08      	pop	{r3, pc}

000b5ece <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b5ece:	b508      	push	{r3, lr}
   b5ed0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b5ed2:	2139      	movs	r1, #57	; 0x39
   b5ed4:	f7ff ffc5 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ed8:	bd08      	pop	{r3, pc}

000b5eda <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b5eda:	b508      	push	{r3, lr}
   b5edc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b5ede:	2110      	movs	r1, #16
   b5ee0:	f7ff ffbf 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ee4:	bd08      	pop	{r3, pc}

000b5ee6 <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b5ee6:	b508      	push	{r3, lr}
   b5ee8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b5eea:	2111      	movs	r1, #17
   b5eec:	f7ff ffb9 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ef0:	bd08      	pop	{r3, pc}

000b5ef2 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5ef2:	b508      	push	{r3, lr}
   b5ef4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5ef6:	2112      	movs	r1, #18
   b5ef8:	f7ff ffb3 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5efc:	bd08      	pop	{r3, pc}

000b5efe <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5efe:	b508      	push	{r3, lr}
   b5f00:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5f02:	2120      	movs	r1, #32
   b5f04:	f7ff ffad 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f08:	bd08      	pop	{r3, pc}

000b5f0a <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b5f0a:	b508      	push	{r3, lr}
   b5f0c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b5f0e:	2121      	movs	r1, #33	; 0x21
   b5f10:	f7ff ffa7 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f14:	bd08      	pop	{r3, pc}

000b5f16 <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b5f16:	b508      	push	{r3, lr}
   b5f18:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b5f1a:	2124      	movs	r1, #36	; 0x24
   b5f1c:	f7ff ffa1 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f20:	bd08      	pop	{r3, pc}

000b5f22 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5f22:	b508      	push	{r3, lr}
   b5f24:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b5f26:	2134      	movs	r1, #52	; 0x34
   b5f28:	f7ff ff9b 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f2c:	bd08      	pop	{r3, pc}

000b5f2e <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b5f2e:	b508      	push	{r3, lr}
   b5f30:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b5f32:	2141      	movs	r1, #65	; 0x41
   b5f34:	f7ff ff95 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f38:	bd08      	pop	{r3, pc}

000b5f3a <_ZN10nodeIDData16set_nodeNumber_1Eh>:
void nodeIDData::set_nodeNumber_1(uint8_t value) {
   b5f3a:	b508      	push	{r3, lr}
   b5f3c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_1), value);
   b5f3e:	2129      	movs	r1, #41	; 0x29
   b5f40:	f7ff ff8f 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f44:	bd08      	pop	{r3, pc}

000b5f46 <_ZN10nodeIDData16set_sensorType_1Eh>:
void nodeIDData::set_sensorType_1(uint8_t value) {
   b5f46:	b508      	push	{r3, lr}
   b5f48:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, sensorType_1), value);
   b5f4a:	212a      	movs	r1, #42	; 0x2a
   b5f4c:	f7ff ff89 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f50:	bd08      	pop	{r3, pc}

000b5f52 <_ZN10nodeIDData16set_nodeNumber_2Eh>:
void nodeIDData::set_nodeNumber_2(uint8_t value) {
   b5f52:	b508      	push	{r3, lr}
   b5f54:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_2), value);
   b5f56:	2151      	movs	r1, #81	; 0x51
   b5f58:	f7ff ff83 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f5c:	bd08      	pop	{r3, pc}

000b5f5e <_ZN10nodeIDData16set_sensorType_2Eh>:
void nodeIDData::set_sensorType_2(uint8_t value) {
   b5f5e:	b508      	push	{r3, lr}
   b5f60:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, sensorType_2), value);
   b5f62:	2152      	movs	r1, #82	; 0x52
   b5f64:	f7ff ff7d 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f68:	bd08      	pop	{r3, pc}

000b5f6a <_ZN10nodeIDData16set_nodeNumber_3Eh>:
void nodeIDData::set_nodeNumber_3(uint8_t value) {
   b5f6a:	b508      	push	{r3, lr}
   b5f6c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_3), value);
   b5f6e:	2179      	movs	r1, #121	; 0x79
   b5f70:	f7ff ff77 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f74:	bd08      	pop	{r3, pc}

000b5f76 <_ZN10nodeIDData16set_sensorType_3Eh>:

void nodeIDData::set_sensorType_3(uint8_t value) {
   b5f76:	b508      	push	{r3, lr}
   b5f78:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, sensorType_3), value);
   b5f7a:	217a      	movs	r1, #122	; 0x7a
   b5f7c:	f7ff ff71 	bl	b5e62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5f80:	bd08      	pop	{r3, pc}

000b5f82 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5f82:	b538      	push	{r3, r4, r5, lr}
   b5f84:	4604      	mov	r4, r0
   b5f86:	3004      	adds	r0, #4
   b5f88:	460d      	mov	r5, r1
   b5f8a:	f7ff fd27 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f8e:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5f90:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f92:	3b02      	subs	r3, #2
   b5f94:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5f96:	bf26      	itte	cs
   b5f98:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5f9a:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5f9c:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5f9e:	f005 f8e9 	bl	bb174 <os_mutex_recursive_unlock>
        }
   b5fa2:	4628      	mov	r0, r5
   b5fa4:	bd38      	pop	{r3, r4, r5, pc}

000b5fa6 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b5fa6:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b5fa8:	2112      	movs	r1, #18
   b5faa:	f7ff ffea 	bl	b5f82 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5fae:	bd08      	pop	{r3, pc}

000b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b5fb0:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5fb2:	212a      	movs	r1, #42	; 0x2a
   b5fb4:	f7ff ffe5 	bl	b5f82 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5fb8:	bd08      	pop	{r3, pc}

000b5fba <_ZNK13sysStatusData8get_RSSIEv>:
uint16_t sysStatusData::get_RSSI() const {
   b5fba:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,RSSI));
   b5fbc:	213c      	movs	r1, #60	; 0x3c
   b5fbe:	f7ff ffe0 	bl	b5f82 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5fc2:	bd08      	pop	{r3, pc}

000b5fc4 <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b5fc4:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b5fc6:	2122      	movs	r1, #34	; 0x22
   b5fc8:	f7ff ffdb 	bl	b5f82 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5fcc:	bd08      	pop	{r3, pc}

000b5fce <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b5fce:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5fd0:	2130      	movs	r1, #48	; 0x30
   b5fd2:	f7ff ffd6 	bl	b5f82 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5fd6:	bd08      	pop	{r3, pc}

000b5fd8 <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b5fd8:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b5fda:	2132      	movs	r1, #50	; 0x32
   b5fdc:	f7ff ffd1 	bl	b5f82 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5fe0:	bd08      	pop	{r3, pc}

000b5fe2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5fe2:	b570      	push	{r4, r5, r6, lr}
   b5fe4:	4604      	mov	r4, r0
   b5fe6:	3004      	adds	r0, #4
   b5fe8:	460d      	mov	r5, r1
   b5fea:	4616      	mov	r6, r2
   b5fec:	f7ff fcf6 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ff0:	68e3      	ldr	r3, [r4, #12]
   b5ff2:	3b02      	subs	r3, #2
   b5ff4:	42ab      	cmp	r3, r5
   b5ff6:	d30d      	bcc.n	b6014 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5ff8:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5ffa:	5b5a      	ldrh	r2, [r3, r5]
   b5ffc:	42b2      	cmp	r2, r6
   b5ffe:	d009      	beq.n	b6014 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b6000:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6002:	4620      	mov	r0, r4
   b6004:	68a5      	ldr	r5, [r4, #8]
   b6006:	f004 ffad 	bl	baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b600a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b600c:	6823      	ldr	r3, [r4, #0]
   b600e:	4620      	mov	r0, r4
   b6010:	691b      	ldr	r3, [r3, #16]
   b6012:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6014:	6860      	ldr	r0, [r4, #4]
        }
   b6016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b601a:	f005 b8ab 	b.w	bb174 <os_mutex_recursive_unlock>

000b601e <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b601e:	b508      	push	{r3, lr}
   b6020:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b6022:	2128      	movs	r1, #40	; 0x28
   b6024:	f7ff ffdd 	bl	b5fe2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6028:	bd08      	pop	{r3, pc}

000b602a <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b602a:	b508      	push	{r3, lr}
   b602c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b602e:	212a      	movs	r1, #42	; 0x2a
   b6030:	f7ff ffd7 	bl	b5fe2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6034:	bd08      	pop	{r3, pc}

000b6036 <_ZN13sysStatusData8set_RSSIEt>:
void sysStatusData::set_RSSI(uint16_t value) {
   b6036:	b508      	push	{r3, lr}
   b6038:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, RSSI), value);
   b603a:	213c      	movs	r1, #60	; 0x3c
   b603c:	f7ff ffd1 	bl	b5fe2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6040:	bd08      	pop	{r3, pc}

000b6042 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b6042:	b508      	push	{r3, lr}
   b6044:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b6046:	2122      	movs	r1, #34	; 0x22
   b6048:	f7ff ffcb 	bl	b5fe2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b604c:	bd08      	pop	{r3, pc}

000b604e <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b604e:	b508      	push	{r3, lr}
   b6050:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b6052:	2130      	movs	r1, #48	; 0x30
   b6054:	f7ff ffc5 	bl	b5fe2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6058:	bd08      	pop	{r3, pc}

000b605a <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b605a:	b508      	push	{r3, lr}
   b605c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b605e:	2132      	movs	r1, #50	; 0x32
   b6060:	f7ff ffbf 	bl	b5fe2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6064:	bd08      	pop	{r3, pc}

000b6066 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b6066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6068:	4604      	mov	r4, r0
   b606a:	3004      	adds	r0, #4
   b606c:	460d      	mov	r5, r1
   b606e:	f7ff fcb5 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6072:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6074:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6076:	3b08      	subs	r3, #8
   b6078:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b607a:	bf23      	ittte	cs
   b607c:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b607e:	1949      	addcs	r1, r1, r5
   b6080:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b6084:	2600      	movcc	r6, #0
   b6086:	bf38      	it	cc
   b6088:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b608a:	f005 f873 	bl	bb174 <os_mutex_recursive_unlock>
        }
   b608e:	4630      	mov	r0, r6
   b6090:	4639      	mov	r1, r7
   b6092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6094 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b6094:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b6096:	2120      	movs	r1, #32
   b6098:	f7ff ffe5 	bl	b6066 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b609c:	bd08      	pop	{r3, pc}

000b609e <_ZNK10nodeIDData20get_lastConnection_1Ev>:
time_t nodeIDData::get_lastConnection_1() const {
   b609e:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(NodeData, lastConnection_1));
   b60a0:	2130      	movs	r1, #48	; 0x30
   b60a2:	f7ff ffe0 	bl	b6066 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b60a6:	bd08      	pop	{r3, pc}

000b60a8 <_ZNK10nodeIDData20get_lastConnection_2Ev>:
time_t nodeIDData::get_lastConnection_2() const {
   b60a8:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(NodeData, lastConnection_2));
   b60aa:	2158      	movs	r1, #88	; 0x58
   b60ac:	f7ff ffdb 	bl	b6066 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b60b0:	bd08      	pop	{r3, pc}

000b60b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b60b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60b4:	4604      	mov	r4, r0
   b60b6:	3004      	adds	r0, #4
   b60b8:	460d      	mov	r5, r1
   b60ba:	461e      	mov	r6, r3
   b60bc:	4617      	mov	r7, r2
   b60be:	f7ff fc8d 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b60c2:	68e3      	ldr	r3, [r4, #12]
   b60c4:	3b08      	subs	r3, #8
   b60c6:	42ab      	cmp	r3, r5
   b60c8:	d312      	bcc.n	b60f0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b60ca:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b60cc:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b60ce:	5958      	ldr	r0, [r3, r5]
   b60d0:	6851      	ldr	r1, [r2, #4]
   b60d2:	42b1      	cmp	r1, r6
   b60d4:	bf08      	it	eq
   b60d6:	42b8      	cmpeq	r0, r7
   b60d8:	d00a      	beq.n	b60f0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b60da:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b60dc:	4620      	mov	r0, r4
                        *(T *)p = value;
   b60de:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b60e0:	68a5      	ldr	r5, [r4, #8]
   b60e2:	f004 ff3f 	bl	baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b60e6:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b60e8:	6823      	ldr	r3, [r4, #0]
   b60ea:	4620      	mov	r0, r4
   b60ec:	691b      	ldr	r3, [r3, #16]
   b60ee:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b60f0:	6860      	ldr	r0, [r4, #4]
        }
   b60f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b60f6:	f005 b83d 	b.w	bb174 <os_mutex_recursive_unlock>

000b60fa <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b60fa:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b60fc:	2120      	movs	r1, #32
   b60fe:	f7ff ffd8 	bl	b60b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6102:	bd08      	pop	{r3, pc}

000b6104 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b6104:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b6106:	2128      	movs	r1, #40	; 0x28
   b6108:	f7ff ffd3 	bl	b60b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b610c:	bd08      	pop	{r3, pc}
	...

000b6110 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b6110:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b6112:	4912      	ldr	r1, [pc, #72]	; (b615c <_Z15resetEverythingv+0x4c>)
   b6114:	4812      	ldr	r0, [pc, #72]	; (b6160 <_Z15resetEverythingv+0x50>)
   b6116:	f7fd ffe1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b611a:	f7ff fd4b 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b611e:	2100      	movs	r1, #0
   b6120:	f7ff ff9b 	bl	b605a <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b6124:	f7ff fd46 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b6128:	2100      	movs	r1, #0
   b612a:	f7ff ff90 	bl	b604e <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b612e:	f7ff fd41 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b6132:	4604      	mov	r4, r0
   b6134:	f008 fb03 	bl	be73e <_ZN9TimeClass3nowEv>
   b6138:	4602      	mov	r2, r0
   b613a:	17c3      	asrs	r3, r0, #31
   b613c:	4620      	mov	r0, r4
   b613e:	f7ff ffe1 	bl	b6104 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6142:	f7ff fce7 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b6146:	2100      	movs	r1, #0
   b6148:	f7ff feaf 	bl	b5eaa <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b614c:	f7ff fce2 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
}
   b6150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b6154:	2100      	movs	r1, #0
   b6156:	f7ff beae 	b.w	b5eb6 <_ZN13sysStatusData16set_messageCountEh>
   b615a:	bf00      	nop
   b615c:	000c05ef 	.word	0x000c05ef
   b6160:	2003e658 	.word	0x2003e658

000b6164 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b6164:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b6166:	2138      	movs	r1, #56	; 0x38
   b6168:	f7ff ffa3 	bl	b60b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b616c:	bd08      	pop	{r3, pc}

000b616e <_ZN10nodeIDData20set_lastConnection_1Ex>:
void nodeIDData::set_lastConnection_1(time_t value) {
   b616e:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(NodeData, lastConnection_1), value);
   b6170:	2130      	movs	r1, #48	; 0x30
   b6172:	f7ff ff9e 	bl	b60b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6176:	bd08      	pop	{r3, pc}

000b6178 <_ZN10nodeIDData20set_lastConnection_2Ex>:
void nodeIDData::set_lastConnection_2(time_t value) {
   b6178:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(NodeData, lastConnection_2), value);
   b617a:	2158      	movs	r1, #88	; 0x58
   b617c:	f7ff ff99 	bl	b60b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6180:	bd08      	pop	{r3, pc}

000b6182 <_ZN10nodeIDData20set_lastConnection_3Ex>:

time_t nodeIDData::get_lastConnection_3() const {
    return getValue<time_t>(offsetof(NodeData, lastConnection_3));
}

void nodeIDData::set_lastConnection_3(time_t value) {
   b6182:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(NodeData, lastConnection_3), value);
   b6184:	2180      	movs	r1, #128	; 0x80
   b6186:	f7ff ff94 	bl	b60b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b618a:	bd08      	pop	{r3, pc}

000b618c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b618c:	b538      	push	{r3, r4, r5, lr}
   b618e:	4604      	mov	r4, r0
   b6190:	3004      	adds	r0, #4
   b6192:	460d      	mov	r5, r1
   b6194:	f7ff fc22 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6198:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b619a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b619c:	3b01      	subs	r3, #1
   b619e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b61a0:	bf26      	itte	cs
   b61a2:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b61a4:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b61a6:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b61a8:	f004 ffe4 	bl	bb174 <os_mutex_recursive_unlock>
        }
   b61ac:	4628      	mov	r0, r5
   b61ae:	bd38      	pop	{r3, r4, r5, pc}

000b61b0 <_ZNK13sysStatusData14get_verizonSIMEv>:
bool sysStatusData::get_verizonSIM() const {
   b61b0:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, verizonSIM));
   b61b2:	213a      	movs	r1, #58	; 0x3a
   b61b4:	f7ff ffea 	bl	b618c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b61b8:	bd08      	pop	{r3, pc}

000b61ba <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b61ba:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b61bc:	2140      	movs	r1, #64	; 0x40
   b61be:	f7ff ffe5 	bl	b618c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b61c2:	bd08      	pop	{r3, pc}

000b61c4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b61c4:	b570      	push	{r4, r5, r6, lr}
   b61c6:	4604      	mov	r4, r0
   b61c8:	3004      	adds	r0, #4
   b61ca:	460d      	mov	r5, r1
   b61cc:	4616      	mov	r6, r2
   b61ce:	f7ff fc05 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b61d2:	68e3      	ldr	r3, [r4, #12]
   b61d4:	3b01      	subs	r3, #1
   b61d6:	42ab      	cmp	r3, r5
   b61d8:	d30d      	bcc.n	b61f6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b61da:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b61dc:	5d5a      	ldrb	r2, [r3, r5]
   b61de:	42b2      	cmp	r2, r6
   b61e0:	d009      	beq.n	b61f6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b61e2:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b61e4:	4620      	mov	r0, r4
   b61e6:	68a5      	ldr	r5, [r4, #8]
   b61e8:	f004 febc 	bl	baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b61ec:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b61ee:	6823      	ldr	r3, [r4, #0]
   b61f0:	4620      	mov	r0, r4
   b61f2:	691b      	ldr	r3, [r3, #16]
   b61f4:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b61f6:	6860      	ldr	r0, [r4, #4]
        }
   b61f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b61fc:	f004 bfba 	b.w	bb174 <os_mutex_recursive_unlock>

000b6200 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b6200:	b508      	push	{r3, lr}
   b6202:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b6204:	213a      	movs	r1, #58	; 0x3a
   b6206:	f7ff ffdd 	bl	b61c4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b620a:	bd08      	pop	{r3, pc}

000b620c <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b620c:	b508      	push	{r3, lr}
   b620e:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b6210:	2140      	movs	r1, #64	; 0x40
   b6212:	f7ff ffd7 	bl	b61c4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6216:	bd08      	pop	{r3, pc}

000b6218 <_GLOBAL__sub_I_fram>:
   b6218:	4b08      	ldr	r3, [pc, #32]	; (b623c <_GLOBAL__sub_I_fram+0x24>)
   b621a:	2201      	movs	r2, #1
}
   b621c:	b510      	push	{r4, lr}
   b621e:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b6220:	f008 fd0e 	bl	bec40 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6224:	4c06      	ldr	r4, [pc, #24]	; (b6240 <_GLOBAL__sub_I_fram+0x28>)
   b6226:	4601      	mov	r1, r0
   b6228:	2300      	movs	r3, #0
   b622a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b622e:	4620      	mov	r0, r4
   b6230:	f002 f9b4 	bl	b859c <_ZN6MB85RCC1ER7TwoWireji>
   b6234:	4b03      	ldr	r3, [pc, #12]	; (b6244 <_GLOBAL__sub_I_fram+0x2c>)
   b6236:	6023      	str	r3, [r4, #0]
}
   b6238:	bd10      	pop	{r4, pc}
   b623a:	bf00      	nop
   b623c:	2003e3dd 	.word	0x2003e3dd
   b6240:	2003e3ec 	.word	0x2003e3ec
   b6244:	000c0618 	.word	0x000c0618

000b6248 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b6248:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b624a:	4913      	ldr	r1, [pc, #76]	; (b6298 <_Z18initializePinModesv+0x50>)
   b624c:	4813      	ldr	r0, [pc, #76]	; (b629c <_Z18initializePinModesv+0x54>)
   b624e:	f7fd ff45 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b6252:	2102      	movs	r1, #2
   b6254:	2004      	movs	r0, #4
   b6256:	f008 fc71 	bl	beb3c <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b625a:	2100      	movs	r1, #0
   b625c:	2008      	movs	r0, #8
   b625e:	f008 fc6d 	bl	beb3c <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b6262:	2101      	movs	r1, #1
   b6264:	2007      	movs	r0, #7
   b6266:	f008 fc69 	bl	beb3c <pinMode>
    pinMode(INT_PIN, INPUT);
   b626a:	2100      	movs	r1, #0
   b626c:	2012      	movs	r0, #18
   b626e:	f008 fc65 	bl	beb3c <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b6272:	2101      	movs	r1, #1
   b6274:	2011      	movs	r0, #17
   b6276:	f008 fc61 	bl	beb3c <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b627a:	2101      	movs	r1, #1
   b627c:	2010      	movs	r0, #16
   b627e:	f008 fc5d 	bl	beb3c <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b6282:	2100      	movs	r1, #0
   b6284:	2010      	movs	r0, #16
   b6286:	f008 fc6a 	bl	beb5e <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b628a:	2100      	movs	r1, #0
   b628c:	2011      	movs	r0, #17
   b628e:	f008 fc66 	bl	beb5e <digitalWrite>
    return true;
}
   b6292:	2001      	movs	r0, #1
   b6294:	bd08      	pop	{r3, pc}
   b6296:	bf00      	nop
   b6298:	000c06b0 	.word	0x000c06b0
   b629c:	2003e658 	.word	0x2003e658

000b62a0 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b62a0:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b62a2:	4918      	ldr	r1, [pc, #96]	; (b6304 <_Z18initializePowerCfgv+0x64>)
   b62a4:	4818      	ldr	r0, [pc, #96]	; (b6308 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b62a6:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b62a8:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b62aa:	f7fd ff17 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b62ae:	4622      	mov	r2, r4
   b62b0:	2100      	movs	r1, #0
   b62b2:	4668      	mov	r0, sp
   b62b4:	f009 fa88 	bl	bf7c8 <memset>
   b62b8:	4622      	mov	r2, r4
   b62ba:	2100      	movs	r1, #0
   b62bc:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b62c0:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b62c4:	f009 fa80 	bl	bf7c8 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b62c8:	2100      	movs	r1, #0
   b62ca:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b62ce:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b62d2:	f005 fa3d 	bl	bb750 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b62d6:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b62da:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b62de:	4b0b      	ldr	r3, [pc, #44]	; (b630c <_Z18initializePowerCfgv+0x6c>)
   b62e0:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b62e2:	f241 0370 	movw	r3, #4208	; 0x1070
   b62e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b62ea:	9b00      	ldr	r3, [sp, #0]
   b62ec:	2100      	movs	r1, #0
   b62ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b62f2:	4668      	mov	r0, sp
   b62f4:	9300      	str	r3, [sp, #0]
   b62f6:	f005 fa2b 	bl	bb750 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b62fa:	3800      	subs	r0, #0
   b62fc:	bf18      	it	ne
   b62fe:	2001      	movne	r0, #1
   b6300:	b010      	add	sp, #64	; 0x40
   b6302:	bd10      	pop	{r4, pc}
   b6304:	000c06c9 	.word	0x000c06c9
   b6308:	2003e658 	.word	0x2003e658
   b630c:	03840384 	.word	0x03840384

000b6310 <_Z23setGatewayConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setGatewayConfiguration() {
   b6310:	b508      	push	{r3, lr}
  Log.info("Setting values for the Gateway");
   b6312:	4905      	ldr	r1, [pc, #20]	; (b6328 <_Z23setGatewayConfigurationv+0x18>)
   b6314:	4805      	ldr	r0, [pc, #20]	; (b632c <_Z23setGatewayConfigurationv+0x1c>)
   b6316:	f7fd fee1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_frequencyMinutes(10);
   b631a:	f7ff fbfb 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b631e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_frequencyMinutes(10);
   b6322:	210a      	movs	r1, #10
   b6324:	f7ff be81 	b.w	b602a <_ZN13sysStatusData20set_frequencyMinutesEt>
   b6328:	000c06ee 	.word	0x000c06ee
   b632c:	2003e658 	.word	0x2003e658

000b6330 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6330:	4770      	bx	lr

000b6332 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b6332:	6a00      	ldr	r0, [r0, #32]
   b6334:	6803      	ldr	r3, [r0, #0]
   b6336:	68db      	ldr	r3, [r3, #12]
   b6338:	4718      	bx	r3
	...

000b633c <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b633c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b633e:	4604      	mov	r4, r0
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.get_frequencyMinutes());
   b6340:	f7ff fbe8 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b6344:	f7ff fe34 	bl	b5fb0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6348:	4a06      	ldr	r2, [pc, #24]	; (b6364 <_Z15reportFrequencyv+0x28>)
   b634a:	4603      	mov	r3, r0
   b634c:	2110      	movs	r1, #16
   b634e:	4668      	mov	r0, sp
   b6350:	f005 fb0c 	bl	bb96c <snprintf>
    return reportStr;
   b6354:	4669      	mov	r1, sp
   b6356:	4620      	mov	r0, r4
   b6358:	f007 fe95 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b635c:	4620      	mov	r0, r4
   b635e:	b004      	add	sp, #16
   b6360:	bd10      	pop	{r4, pc}
   b6362:	bf00      	nop
   b6364:	000c070d 	.word	0x000c070d

000b6368 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6368:	b530      	push	{r4, r5, lr}
   b636a:	b085      	sub	sp, #20
   b636c:	4603      	mov	r3, r0
   b636e:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b6370:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6372:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b6374:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b6376:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b6378:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b637a:	f005 facf 	bl	bb91c <malloc>
   b637e:	6028      	str	r0, [r5, #0]
        if (!data) {
   b6380:	b150      	cbz	r0, b6398 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b6382:	6822      	ldr	r2, [r4, #0]
   b6384:	9900      	ldr	r1, [sp, #0]
   b6386:	f009 f9f7 	bl	bf778 <memcpy>
        return 0;
   b638a:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b638c:	4668      	mov	r0, sp
   b638e:	f007 fe2f 	bl	bdff0 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6392:	4620      	mov	r0, r4
   b6394:	b005      	add	sp, #20
   b6396:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b6398:	4c00      	ldr	r4, [pc, #0]	; (b639c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b639a:	e7f7      	b.n	b638c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b639c:	fffffefc 	.word	0xfffffefc

000b63a0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b63a0:	2300      	movs	r3, #0
   b63a2:	2204      	movs	r2, #4
   b63a4:	f005 b9f2 	b.w	bb78c <spark_variable>

000b63a8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b63a8:	4b0a      	ldr	r3, [pc, #40]	; (b63d4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b63aa:	b510      	push	{r4, lr}
   b63ac:	4604      	mov	r4, r0
   b63ae:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b63b0:	f006 fc92 	bl	bccd8 <_ZN5spark10LogManager8instanceEv>
   b63b4:	4621      	mov	r1, r4
   b63b6:	f006 fe96 	bl	bd0e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b63ba:	f008 faa7 	bl	be90c <_Z16_fetch_usbserialv>
   b63be:	f008 fa97 	bl	be8f0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b63c2:	4620      	mov	r0, r4
   b63c4:	4b04      	ldr	r3, [pc, #16]	; (b63d8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b63c6:	f840 3b04 	str.w	r3, [r0], #4
   b63ca:	f006 fd27 	bl	bce1c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b63ce:	4620      	mov	r0, r4
   b63d0:	bd10      	pop	{r4, pc}
   b63d2:	bf00      	nop
   b63d4:	000c0994 	.word	0x000c0994
   b63d8:	000c097c 	.word	0x000c097c

000b63dc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b63dc:	b510      	push	{r4, lr}
   b63de:	4604      	mov	r4, r0
    }
   b63e0:	f7ff ffe2 	bl	b63a8 <_ZN5spark16SerialLogHandlerD1Ev>
   b63e4:	4620      	mov	r0, r4
   b63e6:	2124      	movs	r1, #36	; 0x24
   b63e8:	f7fd fe59 	bl	b409e <_ZdlPvj>
   b63ec:	4620      	mov	r0, r4
   b63ee:	bd10      	pop	{r4, pc}

000b63f0 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b63f0:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b63f2:	2301      	movs	r3, #1
   b63f4:	2208      	movs	r2, #8
   b63f6:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b63fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b63fe:	2300      	movs	r3, #0
   b6400:	4341      	muls	r1, r0
   b6402:	466a      	mov	r2, sp
   b6404:	4618      	mov	r0, r3
   b6406:	f005 fa11 	bl	bb82c <spark_set_connection_property>
    }
   b640a:	b003      	add	sp, #12
   b640c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6410 <_Z20makeUpStringMessagesv>:
  * @details Looks at all the system setting values and creates the appropriate strings.  Note that this 
  * is a little inefficient but it cleans up a fair bit of code.
  * 
  */

void makeUpStringMessages() {
   b6410:	b510      	push	{r4, lr}

  if (sysStatus.get_openTime() == 0 && sysStatus.get_closeTime() == 24) {                         // Special case for 24 hour operations
   b6412:	f7ff fb7f 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b6416:	f7ff fccf 	bl	b5db8 <_ZNK13sysStatusData12get_openTimeEv>
   b641a:	b978      	cbnz	r0, b643c <_Z20makeUpStringMessagesv+0x2c>
   b641c:	f7ff fb7a 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b6420:	f7ff fccf 	bl	b5dc2 <_ZNK13sysStatusData13get_closeTimeEv>
   b6424:	2818      	cmp	r0, #24
   b6426:	d109      	bne.n	b643c <_Z20makeUpStringMessagesv+0x2c>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   b6428:	490f      	ldr	r1, [pc, #60]	; (b6468 <_Z20makeUpStringMessagesv+0x58>)
   b642a:	4810      	ldr	r0, [pc, #64]	; (b646c <_Z20makeUpStringMessagesv+0x5c>)
   b642c:	f009 fa61 	bl	bf8f2 <strcpy>
    snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.get_openTime());           // Open and Close Times
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.get_closeTime());
  }

  return;
}
   b6430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   b6434:	490c      	ldr	r1, [pc, #48]	; (b6468 <_Z20makeUpStringMessagesv+0x58>)
   b6436:	480e      	ldr	r0, [pc, #56]	; (b6470 <_Z20makeUpStringMessagesv+0x60>)
   b6438:	f009 ba5b 	b.w	bf8f2 <strcpy>
    snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.get_openTime());           // Open and Close Times
   b643c:	f7ff fb6a 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b6440:	f7ff fcba 	bl	b5db8 <_ZNK13sysStatusData12get_openTimeEv>
   b6444:	4a0b      	ldr	r2, [pc, #44]	; (b6474 <_Z20makeUpStringMessagesv+0x64>)
   b6446:	4603      	mov	r3, r0
   b6448:	2108      	movs	r1, #8
   b644a:	4808      	ldr	r0, [pc, #32]	; (b646c <_Z20makeUpStringMessagesv+0x5c>)
   b644c:	f005 fa8e 	bl	bb96c <snprintf>
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.get_closeTime());
   b6450:	f7ff fb60 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b6454:	f7ff fcb5 	bl	b5dc2 <_ZNK13sysStatusData13get_closeTimeEv>
}
   b6458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.get_closeTime());
   b645c:	4603      	mov	r3, r0
   b645e:	4a05      	ldr	r2, [pc, #20]	; (b6474 <_Z20makeUpStringMessagesv+0x64>)
   b6460:	4803      	ldr	r0, [pc, #12]	; (b6470 <_Z20makeUpStringMessagesv+0x60>)
   b6462:	2108      	movs	r1, #8
   b6464:	f005 ba82 	b.w	bb96c <snprintf>
   b6468:	000c0718 	.word	0x000c0718
   b646c:	2003de38 	.word	0x2003de38
   b6470:	2003de30 	.word	0x2003de30
   b6474:	000c071b 	.word	0x000c071b

000b6478 <_Z18particleInitializev>:
void particleInitialize() {
   b6478:	b510      	push	{r4, lr}
   b647a:	b08c      	sub	sp, #48	; 0x30
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b647c:	4b37      	ldr	r3, [pc, #220]	; (b655c <_Z18particleInitializev+0xe4>)
   b647e:	9304      	str	r3, [sp, #16]
   b6480:	4b37      	ldr	r3, [pc, #220]	; (b6560 <_Z18particleInitializev+0xe8>)
   b6482:	9305      	str	r3, [sp, #20]
   b6484:	4b37      	ldr	r3, [pc, #220]	; (b6564 <_Z18particleInitializev+0xec>)
   b6486:	9306      	str	r3, [sp, #24]
   b6488:	4b37      	ldr	r3, [pc, #220]	; (b6568 <_Z18particleInitializev+0xf0>)
   b648a:	9307      	str	r3, [sp, #28]
   b648c:	4b37      	ldr	r3, [pc, #220]	; (b656c <_Z18particleInitializev+0xf4>)
   b648e:	9308      	str	r3, [sp, #32]
   b6490:	4b37      	ldr	r3, [pc, #220]	; (b6570 <_Z18particleInitializev+0xf8>)
   b6492:	9309      	str	r3, [sp, #36]	; 0x24
   b6494:	2400      	movs	r4, #0
   b6496:	4b37      	ldr	r3, [pc, #220]	; (b6574 <_Z18particleInitializev+0xfc>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6498:	4937      	ldr	r1, [pc, #220]	; (b6578 <_Z18particleInitializev+0x100>)
   b649a:	4838      	ldr	r0, [pc, #224]	; (b657c <_Z18particleInitializev+0x104>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b649c:	930a      	str	r3, [sp, #40]	; 0x28
   b649e:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b64a0:	f7fd fe1c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        return _variable(name, std::forward<ArgsT>(args)...);
   b64a4:	4936      	ldr	r1, [pc, #216]	; (b6580 <_Z18particleInitializev+0x108>)
   b64a6:	4837      	ldr	r0, [pc, #220]	; (b6584 <_Z18particleInitializev+0x10c>)
   b64a8:	f7ff ff7a 	bl	b63a0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b64ac:	4936      	ldr	r1, [pc, #216]	; (b6588 <_Z18particleInitializev+0x110>)
   b64ae:	4837      	ldr	r0, [pc, #220]	; (b658c <_Z18particleInitializev+0x114>)
   b64b0:	f7ff ff76 	bl	b63a0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
  Particle.variable("stateOfChg", current.get_stateOfCharge());
   b64b4:	f7ff fb7e 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b64b8:	f7ff fb96 	bl	b5be8 <_ZNK17currentStatusData17get_stateOfChargeEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b64bc:	4623      	mov	r3, r4
   b64be:	2209      	movs	r2, #9
   b64c0:	4669      	mov	r1, sp
   b64c2:	4833      	ldr	r0, [pc, #204]	; (b6590 <_Z18particleInitializev+0x118>)
   b64c4:	ed8d 0b00 	vstr	d0, [sp]
   b64c8:	f005 f960 	bl	bb78c <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.get_batteryState()]);
   b64cc:	f7ff fb72 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b64d0:	f7ff fc90 	bl	b5df4 <_ZNK17currentStatusData16get_batteryStateEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b64d4:	ab0c      	add	r3, sp, #48	; 0x30
   b64d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b64da:	f850 1c20 	ldr.w	r1, [r0, #-32]
   b64de:	482d      	ldr	r0, [pc, #180]	; (b6594 <_Z18particleInitializev+0x11c>)
   b64e0:	f7ff ff5e 	bl	b63a0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        extra.size = sizeof(extra);
   b64e4:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b64e6:	e9cd 4400 	strd	r4, r4, [sp]
        extra.size = sizeof(extra);
   b64ea:	f8ad 3000 	strh.w	r3, [sp]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b64ee:	4b2a      	ldr	r3, [pc, #168]	; (b6598 <_Z18particleInitializev+0x120>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b64f0:	492a      	ldr	r1, [pc, #168]	; (b659c <_Z18particleInitializev+0x124>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b64f2:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b64f4:	2204      	movs	r2, #4
   b64f6:	466b      	mov	r3, sp
   b64f8:	4829      	ldr	r0, [pc, #164]	; (b65a0 <_Z18particleInitializev+0x128>)
   b64fa:	f005 f947 	bl	bb78c <spark_variable>
  Particle.variable("SIM Card", (sysStatus.get_verizonSIM()) ? "Verizon" : "Particle");
   b64fe:	f7ff fb09 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b6502:	f7ff fe55 	bl	b61b0 <_ZNK13sysStatusData14get_verizonSIMEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b6506:	4a27      	ldr	r2, [pc, #156]	; (b65a4 <_Z18particleInitializev+0x12c>)
   b6508:	4927      	ldr	r1, [pc, #156]	; (b65a8 <_Z18particleInitializev+0x130>)
   b650a:	42a0      	cmp	r0, r4
   b650c:	bf18      	it	ne
   b650e:	4611      	movne	r1, r2
   b6510:	4826      	ldr	r0, [pc, #152]	; (b65ac <_Z18particleInitializev+0x134>)
   b6512:	f7ff ff45 	bl	b63a0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b6516:	4926      	ldr	r1, [pc, #152]	; (b65b0 <_Z18particleInitializev+0x138>)
   b6518:	4826      	ldr	r0, [pc, #152]	; (b65b4 <_Z18particleInitializev+0x13c>)
   b651a:	f7ff ff41 	bl	b63a0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b651e:	4926      	ldr	r1, [pc, #152]	; (b65b8 <_Z18particleInitializev+0x140>)
   b6520:	4826      	ldr	r0, [pc, #152]	; (b65bc <_Z18particleInitializev+0x144>)
   b6522:	f7ff ff3d 	bl	b63a0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b6526:	4a26      	ldr	r2, [pc, #152]	; (b65c0 <_Z18particleInitializev+0x148>)
   b6528:	4926      	ldr	r1, [pc, #152]	; (b65c4 <_Z18particleInitializev+0x14c>)
   b652a:	4827      	ldr	r0, [pc, #156]	; (b65c8 <_Z18particleInitializev+0x150>)
   b652c:	f005 fc33 	bl	bbd96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b6530:	4a26      	ldr	r2, [pc, #152]	; (b65cc <_Z18particleInitializev+0x154>)
   b6532:	4927      	ldr	r1, [pc, #156]	; (b65d0 <_Z18particleInitializev+0x158>)
   b6534:	4824      	ldr	r0, [pc, #144]	; (b65c8 <_Z18particleInitializev+0x150>)
   b6536:	f005 fc2e 	bl	bbd96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b653a:	4a26      	ldr	r2, [pc, #152]	; (b65d4 <_Z18particleInitializev+0x15c>)
   b653c:	4926      	ldr	r1, [pc, #152]	; (b65d8 <_Z18particleInitializev+0x160>)
   b653e:	4822      	ldr	r0, [pc, #136]	; (b65c8 <_Z18particleInitializev+0x150>)
   b6540:	f005 fc29 	bl	bbd96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b6544:	4a19      	ldr	r2, [pc, #100]	; (b65ac <_Z18particleInitializev+0x134>)
   b6546:	4925      	ldr	r1, [pc, #148]	; (b65dc <_Z18particleInitializev+0x164>)
   b6548:	481f      	ldr	r0, [pc, #124]	; (b65c8 <_Z18particleInitializev+0x150>)
   b654a:	f005 fc24 	bl	bbd96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  takeMeasurements();                               // Initialize sensor values
   b654e:	f000 fba5 	bl	b6c9c <_Z16takeMeasurementsv>
}
   b6552:	b00c      	add	sp, #48	; 0x30
   b6554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
   b6558:	f7ff bf5a 	b.w	b6410 <_Z20makeUpStringMessagesv>
   b655c:	000c0729 	.word	0x000c0729
   b6560:	000c0731 	.word	0x000c0731
   b6564:	000c0735 	.word	0x000c0735
   b6568:	000c073e 	.word	0x000c073e
   b656c:	000c0746 	.word	0x000c0746
   b6570:	000c0752 	.word	0x000c0752
   b6574:	000c0758 	.word	0x000c0758
   b6578:	000c0764 	.word	0x000c0764
   b657c:	2003e658 	.word	0x2003e658
   b6580:	2003dd94 	.word	0x2003dd94
   b6584:	000c0792 	.word	0x000c0792
   b6588:	2003de70 	.word	0x2003de70
   b658c:	000c079a 	.word	0x000c079a
   b6590:	000c07a1 	.word	0x000c07a1
   b6594:	000c07ac 	.word	0x000c07ac
   b6598:	000b6369 	.word	0x000b6369
   b659c:	000b633d 	.word	0x000b633d
   b65a0:	000c07bb 	.word	0x000c07bb
   b65a4:	000c0721 	.word	0x000c0721
   b65a8:	000c08f0 	.word	0x000c08f0
   b65ac:	000c07cf 	.word	0x000c07cf
   b65b0:	2003de38 	.word	0x2003de38
   b65b4:	000c07d8 	.word	0x000c07d8
   b65b8:	2003de30 	.word	0x2003de30
   b65bc:	000c07e2 	.word	0x000c07e2
   b65c0:	000c07ed 	.word	0x000c07ed
   b65c4:	000b660d 	.word	0x000b660d
   b65c8:	000bbd6b 	.word	0x000bbd6b
   b65cc:	000c07fb 	.word	0x000c07fb
   b65d0:	000b6681 	.word	0x000b6681
   b65d4:	000c0809 	.word	0x000c0809
   b65d8:	000b66f5 	.word	0x000b66f5
   b65dc:	000b6769 	.word	0x000b6769

000b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b65e0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b65e2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b65e4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b65e6:	b17c      	cbz	r4, b6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b65e8:	6863      	ldr	r3, [r4, #4]
   b65ea:	3b01      	subs	r3, #1
   b65ec:	6063      	str	r3, [r4, #4]
   b65ee:	b95b      	cbnz	r3, b6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b65f0:	6823      	ldr	r3, [r4, #0]
   b65f2:	4620      	mov	r0, r4
   b65f4:	689b      	ldr	r3, [r3, #8]
   b65f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b65f8:	68a3      	ldr	r3, [r4, #8]
   b65fa:	3b01      	subs	r3, #1
   b65fc:	60a3      	str	r3, [r4, #8]
   b65fe:	b91b      	cbnz	r3, b6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b6600:	6823      	ldr	r3, [r4, #0]
   b6602:	4620      	mov	r0, r4
   b6604:	68db      	ldr	r3, [r3, #12]
   b6606:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b6608:	4628      	mov	r0, r5
   b660a:	bd38      	pop	{r3, r4, r5, pc}

000b660c <_Z12setFrequency6String>:
{
   b660c:	b510      	push	{r4, lr}
   b660e:	b0c6      	sub	sp, #280	; 0x118
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b6610:	6800      	ldr	r0, [r0, #0]
   b6612:	220a      	movs	r2, #10
   b6614:	a903      	add	r1, sp, #12
   b6616:	f009 fa83 	bl	bfb20 <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b661a:	2878      	cmp	r0, #120	; 0x78
   b661c:	d821      	bhi.n	b6662 <_Z12setFrequency6String+0x56>
  updatedFrequencyMins = tempTime;
   b661e:	4b12      	ldr	r3, [pc, #72]	; (b6668 <_Z12setFrequency6String+0x5c>)
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b6620:	4a12      	ldr	r2, [pc, #72]	; (b666c <_Z12setFrequency6String+0x60>)
  updatedFrequencyMins = tempTime;
   b6622:	8018      	strh	r0, [r3, #0]
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b6624:	4b12      	ldr	r3, [pc, #72]	; (b6670 <_Z12setFrequency6String+0x64>)
   b6626:	2401      	movs	r4, #1
   b6628:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b662a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b662e:	4603      	mov	r3, r0
   b6630:	a806      	add	r0, sp, #24
   b6632:	f005 f99b 	bl	bb96c <snprintf>
  Log.info(data);
   b6636:	480f      	ldr	r0, [pc, #60]	; (b6674 <_Z12setFrequency6String+0x68>)
   b6638:	a906      	add	r1, sp, #24
   b663a:	f7fd fd4f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b663e:	f005 f8c5 	bl	bb7cc <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b6642:	b160      	cbz	r0, b665e <_Z12setFrequency6String+0x52>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6644:	4b0c      	ldr	r3, [pc, #48]	; (b6678 <_Z12setFrequency6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6646:	490d      	ldr	r1, [pc, #52]	; (b667c <_Z12setFrequency6String+0x70>)
   b6648:	781b      	ldrb	r3, [r3, #0]
   b664a:	f88d 3000 	strb.w	r3, [sp]
   b664e:	a804      	add	r0, sp, #16
   b6650:	233c      	movs	r3, #60	; 0x3c
   b6652:	aa06      	add	r2, sp, #24
   b6654:	f005 fcb0 	bl	bbfb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b6658:	a805      	add	r0, sp, #20
   b665a:	f7ff ffc1 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b665e:	4620      	mov	r0, r4
   b6660:	e000      	b.n	b6664 <_Z12setFrequency6String+0x58>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6662:	2000      	movs	r0, #0
}
   b6664:	b046      	add	sp, #280	; 0x118
   b6666:	bd10      	pop	{r4, pc}
   b6668:	2003de40 	.word	0x2003de40
   b666c:	000c0818 	.word	0x000c0818
   b6670:	2003e409 	.word	0x2003e409
   b6674:	2003e658 	.word	0x2003e658
   b6678:	2003e408 	.word	0x2003e408
   b667c:	000c0804 	.word	0x000c0804

000b6680 <_Z11setOpenTime6String>:
{
   b6680:	b510      	push	{r4, lr}
   b6682:	b096      	sub	sp, #88	; 0x58
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
   b6684:	6800      	ldr	r0, [r0, #0]
   b6686:	220a      	movs	r2, #10
   b6688:	a903      	add	r1, sp, #12
   b668a:	f009 fa49 	bl	bfb20 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   b668e:	2817      	cmp	r0, #23
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
   b6690:	4604      	mov	r4, r0
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   b6692:	d824      	bhi.n	b66de <_Z11setOpenTime6String+0x5e>
  sysStatus.set_openTime(tempTime);
   b6694:	f7ff fa3e 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b6698:	b2e1      	uxtb	r1, r4
   b669a:	f7ff fc12 	bl	b5ec2 <_ZN13sysStatusData12set_openTimeEh>
  snprintf(data, sizeof(data), "Wake time set to %i",sysStatus.get_openTime());
   b669e:	f7ff fa39 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b66a2:	f7ff fb89 	bl	b5db8 <_ZNK13sysStatusData12get_openTimeEv>
   b66a6:	4a0f      	ldr	r2, [pc, #60]	; (b66e4 <_Z11setOpenTime6String+0x64>)
   b66a8:	4603      	mov	r3, r0
   b66aa:	2140      	movs	r1, #64	; 0x40
   b66ac:	a806      	add	r0, sp, #24
   b66ae:	f005 f95d 	bl	bb96c <snprintf>
  Log.info(data);
   b66b2:	480d      	ldr	r0, [pc, #52]	; (b66e8 <_Z11setOpenTime6String+0x68>)
   b66b4:	a906      	add	r1, sp, #24
   b66b6:	f7fd fd11 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b66ba:	f005 f887 	bl	bb7cc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b66be:	b160      	cbz	r0, b66da <_Z11setOpenTime6String+0x5a>
   b66c0:	4b0a      	ldr	r3, [pc, #40]	; (b66ec <_Z11setOpenTime6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b66c2:	490b      	ldr	r1, [pc, #44]	; (b66f0 <_Z11setOpenTime6String+0x70>)
   b66c4:	781b      	ldrb	r3, [r3, #0]
   b66c6:	f88d 3000 	strb.w	r3, [sp]
   b66ca:	a804      	add	r0, sp, #16
   b66cc:	233c      	movs	r3, #60	; 0x3c
   b66ce:	aa06      	add	r2, sp, #24
   b66d0:	f005 fc72 	bl	bbfb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b66d4:	a805      	add	r0, sp, #20
   b66d6:	f7ff ff83 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b66da:	2001      	movs	r0, #1
   b66dc:	e000      	b.n	b66e0 <_Z11setOpenTime6String+0x60>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   b66de:	2000      	movs	r0, #0
}
   b66e0:	b016      	add	sp, #88	; 0x58
   b66e2:	bd10      	pop	{r4, pc}
   b66e4:	000c0858 	.word	0x000c0858
   b66e8:	2003e658 	.word	0x2003e658
   b66ec:	2003e408 	.word	0x2003e408
   b66f0:	000c0804 	.word	0x000c0804

000b66f4 <_Z12setCloseTime6String>:
{
   b66f4:	b510      	push	{r4, lr}
   b66f6:	b096      	sub	sp, #88	; 0x58
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b66f8:	6800      	ldr	r0, [r0, #0]
   b66fa:	220a      	movs	r2, #10
   b66fc:	a903      	add	r1, sp, #12
   b66fe:	f009 fa0f 	bl	bfb20 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6702:	2818      	cmp	r0, #24
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b6704:	4604      	mov	r4, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6706:	d824      	bhi.n	b6752 <_Z12setCloseTime6String+0x5e>
  sysStatus.set_closeTime(tempTime);
   b6708:	f7ff fa04 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b670c:	b2e1      	uxtb	r1, r4
   b670e:	f7ff fbde 	bl	b5ece <_ZN13sysStatusData13set_closeTimeEh>
  snprintf(data, sizeof(data), "Sleep time set to %i",sysStatus.get_closeTime());
   b6712:	f7ff f9ff 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b6716:	f7ff fb54 	bl	b5dc2 <_ZNK13sysStatusData13get_closeTimeEv>
   b671a:	4a0f      	ldr	r2, [pc, #60]	; (b6758 <_Z12setCloseTime6String+0x64>)
   b671c:	4603      	mov	r3, r0
   b671e:	2140      	movs	r1, #64	; 0x40
   b6720:	a806      	add	r0, sp, #24
   b6722:	f005 f923 	bl	bb96c <snprintf>
  Log.info(data);
   b6726:	480d      	ldr	r0, [pc, #52]	; (b675c <_Z12setCloseTime6String+0x68>)
   b6728:	a906      	add	r1, sp, #24
   b672a:	f7fd fcd7 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b672e:	f005 f84d 	bl	bb7cc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b6732:	b160      	cbz	r0, b674e <_Z12setCloseTime6String+0x5a>
   b6734:	4b0a      	ldr	r3, [pc, #40]	; (b6760 <_Z12setCloseTime6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6736:	490b      	ldr	r1, [pc, #44]	; (b6764 <_Z12setCloseTime6String+0x70>)
   b6738:	781b      	ldrb	r3, [r3, #0]
   b673a:	f88d 3000 	strb.w	r3, [sp]
   b673e:	a804      	add	r0, sp, #16
   b6740:	233c      	movs	r3, #60	; 0x3c
   b6742:	aa06      	add	r2, sp, #24
   b6744:	f005 fc38 	bl	bbfb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6748:	a805      	add	r0, sp, #20
   b674a:	f7ff ff49 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b674e:	2001      	movs	r0, #1
   b6750:	e000      	b.n	b6754 <_Z12setCloseTime6String+0x60>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6752:	2000      	movs	r0, #0
}
   b6754:	b016      	add	sp, #88	; 0x58
   b6756:	bd10      	pop	{r4, pc}
   b6758:	000c086c 	.word	0x000c086c
   b675c:	2003e658 	.word	0x2003e658
   b6760:	2003e408 	.word	0x2003e408
   b6764:	000c0804 	.word	0x000c0804

000b6768 <_Z13setVerizonSIM6String>:
{
   b6768:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b676a:	491e      	ldr	r1, [pc, #120]	; (b67e4 <_Z13setVerizonSIM6String+0x7c>)
   b676c:	b085      	sub	sp, #20
   b676e:	4605      	mov	r5, r0
   b6770:	f007 fd42 	bl	be1f8 <_ZNK6String6equalsEPKc>
  if (command == "1")
   b6774:	4604      	mov	r4, r0
   b6776:	b1d8      	cbz	r0, b67b0 <_Z13setVerizonSIM6String+0x48>
    sysStatus.set_verizonSIM(true);
   b6778:	f7ff f9cc 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b677c:	2101      	movs	r1, #1
   b677e:	f7ff fd3f 	bl	b6200 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(60);                                         // send a ping every minute
   b6782:	203c      	movs	r0, #60	; 0x3c
   b6784:	f7ff fe34 	bl	b63f0 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6788:	f005 f820 	bl	bb7cc <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   b678c:	b910      	cbnz	r0, b6794 <_Z13setVerizonSIM6String+0x2c>
    return 1;
   b678e:	2001      	movs	r0, #1
}
   b6790:	b005      	add	sp, #20
   b6792:	bd30      	pop	{r4, r5, pc}
   b6794:	4b14      	ldr	r3, [pc, #80]	; (b67e8 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6796:	4a15      	ldr	r2, [pc, #84]	; (b67ec <_Z13setVerizonSIM6String+0x84>)
   b6798:	781b      	ldrb	r3, [r3, #0]
   b679a:	f88d 3000 	strb.w	r3, [sp]
   b679e:	233c      	movs	r3, #60	; 0x3c
   b67a0:	a802      	add	r0, sp, #8
   b67a2:	4913      	ldr	r1, [pc, #76]	; (b67f0 <_Z13setVerizonSIM6String+0x88>)
   b67a4:	f005 fc08 	bl	bbfb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b67a8:	a803      	add	r0, sp, #12
   b67aa:	f7ff ff19 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67ae:	e7ee      	b.n	b678e <_Z13setVerizonSIM6String+0x26>
   b67b0:	4910      	ldr	r1, [pc, #64]	; (b67f4 <_Z13setVerizonSIM6String+0x8c>)
   b67b2:	4628      	mov	r0, r5
   b67b4:	f007 fd20 	bl	be1f8 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b67b8:	2800      	cmp	r0, #0
   b67ba:	d0e9      	beq.n	b6790 <_Z13setVerizonSIM6String+0x28>
    sysStatus.set_verizonSIM(false);
   b67bc:	f7ff f9aa 	bl	b5b14 <_ZN13sysStatusData8instanceEv>
   b67c0:	4621      	mov	r1, r4
   b67c2:	f7ff fd1d 	bl	b6200 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b67c6:	f240 5064 	movw	r0, #1380	; 0x564
   b67ca:	f7ff fe11 	bl	b63f0 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b67ce:	f004 fffd 	bl	bb7cc <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   b67d2:	2800      	cmp	r0, #0
   b67d4:	d0db      	beq.n	b678e <_Z13setVerizonSIM6String+0x26>
   b67d6:	4b04      	ldr	r3, [pc, #16]	; (b67e8 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b67d8:	4a07      	ldr	r2, [pc, #28]	; (b67f8 <_Z13setVerizonSIM6String+0x90>)
   b67da:	781b      	ldrb	r3, [r3, #0]
   b67dc:	f88d 3000 	strb.w	r3, [sp]
   b67e0:	233c      	movs	r3, #60	; 0x3c
   b67e2:	e7dd      	b.n	b67a0 <_Z13setVerizonSIM6String+0x38>
   b67e4:	000c09e0 	.word	0x000c09e0
   b67e8:	2003e408 	.word	0x2003e408
   b67ec:	000c0881 	.word	0x000c0881
   b67f0:	000c0894 	.word	0x000c0894
   b67f4:	000bfec2 	.word	0x000bfec2
   b67f8:	000c0899 	.word	0x000c0899

000b67fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b67fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b67fe:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6802:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6804:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6806:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b680a:	42ae      	cmp	r6, r5
   b680c:	d004      	beq.n	b6818 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b680e:	4628      	mov	r0, r5
   b6810:	f007 fbee 	bl	bdff0 <_ZN6StringD1Ev>
   b6814:	3514      	adds	r5, #20
   b6816:	e7f8      	b.n	b680a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6818:	6820      	ldr	r0, [r4, #0]
   b681a:	f005 f887 	bl	bb92c <free>
    AllocatorT::free(data_);
}
   b681e:	4620      	mov	r0, r4
   b6820:	bd70      	pop	{r4, r5, r6, pc}

000b6822 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6822:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6826:	4604      	mov	r4, r0
   b6828:	460d      	mov	r5, r1
   b682a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b682c:	d916      	bls.n	b685c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b682e:	4290      	cmp	r0, r2
   b6830:	d215      	bcs.n	b685e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6832:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6836:	1a75      	subs	r5, r6, r1
   b6838:	f1a1 0714 	sub.w	r7, r1, #20
   b683c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b683e:	42b7      	cmp	r7, r6
   b6840:	d01c      	beq.n	b687c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6842:	b12c      	cbz	r4, b6850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6844:	4631      	mov	r1, r6
   b6846:	4620      	mov	r0, r4
   b6848:	f007 fc4e 	bl	be0e8 <_ZN6StringC1EOS_>
   b684c:	7c33      	ldrb	r3, [r6, #16]
   b684e:	7423      	strb	r3, [r4, #16]
   b6850:	4630      	mov	r0, r6
   b6852:	f007 fbcd 	bl	bdff0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6856:	3e14      	subs	r6, #20
   b6858:	3c14      	subs	r4, #20
   b685a:	e7f0      	b.n	b683e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b685c:	d00e      	beq.n	b687c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b685e:	42b5      	cmp	r5, r6
   b6860:	d00c      	beq.n	b687c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b6862:	b12c      	cbz	r4, b6870 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b6864:	4629      	mov	r1, r5
   b6866:	4620      	mov	r0, r4
   b6868:	f007 fc3e 	bl	be0e8 <_ZN6StringC1EOS_>
   b686c:	7c2b      	ldrb	r3, [r5, #16]
   b686e:	7423      	strb	r3, [r4, #16]
   b6870:	4628      	mov	r0, r5
   b6872:	f007 fbbd 	bl	bdff0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6876:	3514      	adds	r5, #20
   b6878:	3414      	adds	r4, #20
   b687a:	e7f0      	b.n	b685e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b687c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b687e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b687e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6882:	2300      	movs	r3, #0
   b6884:	e9c0 3300 	strd	r3, r3, [r0]
   b6888:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b688a:	684f      	ldr	r7, [r1, #4]
   b688c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b688e:	4604      	mov	r4, r0
   b6890:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6892:	dd23      	ble.n	b68dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6894:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b6898:	fb08 f007 	mul.w	r0, r8, r7
   b689c:	f005 f83e 	bl	bb91c <malloc>
            if (!d) {
   b68a0:	4605      	mov	r5, r0
   b68a2:	b1d8      	cbz	r0, b68dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b68a4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b68a8:	fb08 1202 	mla	r2, r8, r2, r1
   b68ac:	f7ff ffb9 	bl	b6822 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b68b0:	6820      	ldr	r0, [r4, #0]
   b68b2:	f005 f83b 	bl	bb92c <free>
        data_ = d;
   b68b6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b68b8:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b68ba:	e9d6 7300 	ldrd	r7, r3, [r6]
   b68be:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b68c2:	45b8      	cmp	r8, r7
   b68c4:	d008      	beq.n	b68d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b68c6:	4639      	mov	r1, r7
   b68c8:	4628      	mov	r0, r5
   b68ca:	f007 fc27 	bl	be11c <_ZN6StringC1ERKS_>
   b68ce:	7c3b      	ldrb	r3, [r7, #16]
   b68d0:	742b      	strb	r3, [r5, #16]
   b68d2:	3714      	adds	r7, #20
   b68d4:	3514      	adds	r5, #20
   b68d6:	e7f4      	b.n	b68c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b68d8:	6873      	ldr	r3, [r6, #4]
   b68da:	6063      	str	r3, [r4, #4]
}
   b68dc:	4620      	mov	r0, r4
   b68de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b68e4 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b68e4:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b68e6:	4b27      	ldr	r3, [pc, #156]	; (b6984 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b68e8:	4a27      	ldr	r2, [pc, #156]	; (b6988 <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b68ea:	2501      	movs	r5, #1
   b68ec:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b68ee:	4b27      	ldr	r3, [pc, #156]	; (b698c <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b68f0:	2400      	movs	r4, #0
   b68f2:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b68f4:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b68f6:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b68fa:	2002      	movs	r0, #2
   b68fc:	f004 fed4 	bl	bb6a8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b6900:	4621      	mov	r1, r4
   b6902:	4628      	mov	r0, r5
   b6904:	f004 fee8 	bl	bb6d8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b6908:	4629      	mov	r1, r5
   b690a:	2004      	movs	r0, #4
   b690c:	f004 fc4a 	bl	bb1a4 <HAL_Feature_Set>
        capacity_(0) {
   b6910:	e9cd 4400 	strd	r4, r4, [sp]
   b6914:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b6916:	f007 fff9 	bl	be90c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b691a:	4c1d      	ldr	r4, [pc, #116]	; (b6990 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b691c:	4605      	mov	r5, r0
   b691e:	4669      	mov	r1, sp
   b6920:	a803      	add	r0, sp, #12
   b6922:	f7ff ffac 	bl	b687e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6926:	4626      	mov	r6, r4
        stream_(&stream) {
   b6928:	a903      	add	r1, sp, #12
   b692a:	a806      	add	r0, sp, #24
   b692c:	f7ff ffa7 	bl	b687e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6930:	4b18      	ldr	r3, [pc, #96]	; (b6994 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b6932:	f846 3b04 	str.w	r3, [r6], #4
   b6936:	a906      	add	r1, sp, #24
   b6938:	a809      	add	r0, sp, #36	; 0x24
   b693a:	f7ff ffa0 	bl	b687e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b693e:	aa09      	add	r2, sp, #36	; 0x24
   b6940:	211e      	movs	r1, #30
   b6942:	4630      	mov	r0, r6
   b6944:	f006 fcb2 	bl	bd2ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6948:	a809      	add	r0, sp, #36	; 0x24
   b694a:	f7ff ff57 	bl	b67fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b694e:	a806      	add	r0, sp, #24
   b6950:	f7ff ff54 	bl	b67fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6954:	4b10      	ldr	r3, [pc, #64]	; (b6998 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b6956:	6023      	str	r3, [r4, #0]
   b6958:	6225      	str	r5, [r4, #32]
   b695a:	a803      	add	r0, sp, #12
   b695c:	f7ff ff4e 	bl	b67fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6960:	4b0e      	ldr	r3, [pc, #56]	; (b699c <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b6962:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b6964:	f007 ffd2 	bl	be90c <_Z16_fetch_usbserialv>
   b6968:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b696c:	f007 ffbc 	bl	be8e8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b6970:	f006 f9b2 	bl	bccd8 <_ZN5spark10LogManager8instanceEv>
   b6974:	4621      	mov	r1, r4
   b6976:	f006 fb6f 	bl	bd058 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b697a:	4668      	mov	r0, sp
   b697c:	f7ff ff3e 	bl	b67fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6980:	b00c      	add	sp, #48	; 0x30
   b6982:	bd70      	pop	{r4, r5, r6, pc}
   b6984:	2003e408 	.word	0x2003e408
   b6988:	ffff0000 	.word	0xffff0000
   b698c:	2003e3fc 	.word	0x2003e3fc
   b6990:	2003e40c 	.word	0x2003e40c
   b6994:	000c097c 	.word	0x000c097c
   b6998:	000c15ac 	.word	0x000c15ac
   b699c:	000c0994 	.word	0x000c0994

000b69a0 <_Z22disconnectFromParticlev>:
{
   b69a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b69a4:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b69a6:	f007 feca 	bl	be73e <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b69aa:	4943      	ldr	r1, [pc, #268]	; (b6ab8 <_Z22disconnectFromParticlev+0x118>)
  time_t startTime = Time.now();
   b69ac:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b69ae:	4843      	ldr	r0, [pc, #268]	; (b6abc <_Z22disconnectFromParticlev+0x11c>)
   b69b0:	f7fd fb94 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b69b4:	4b42      	ldr	r3, [pc, #264]	; (b6ac0 <_Z22disconnectFromParticlev+0x120>)
   b69b6:	8818      	ldrh	r0, [r3, #0]
   b69b8:	f005 fdd0 	bl	bc55c <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b69bc:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b69be:	a801      	add	r0, sp, #4
   b69c0:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b69c4:	f8ad 400c 	strh.w	r4, [sp, #12]
   b69c8:	f005 f9f6 	bl	bbdb8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b69cc:	4620      	mov	r0, r4
   b69ce:	f004 fc19 	bl	bb204 <hal_timer_millis>
        while (_while() && !_condition()) {
   b69d2:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b69d6:	4604      	mov	r4, r0
   b69d8:	2000      	movs	r0, #0
   b69da:	f004 fc13 	bl	bb204 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b69de:	1b03      	subs	r3, r0, r4
   b69e0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b69e4:	42b3      	cmp	r3, r6
   b69e6:	f171 0300 	sbcs.w	r3, r1, #0
   b69ea:	d205      	bcs.n	b69f8 <_Z22disconnectFromParticlev+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b69ec:	f004 feee 	bl	bb7cc <spark_cloud_flag_connected>
   b69f0:	b110      	cbz	r0, b69f8 <_Z22disconnectFromParticlev+0x58>
            spark_process();
   b69f2:	f004 fedb 	bl	bb7ac <spark_process>
        while (_while() && !_condition()) {
   b69f6:	e7ef      	b.n	b69d8 <_Z22disconnectFromParticlev+0x38>
   b69f8:	f004 fee8 	bl	bb7cc <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b69fc:	f004 fbf2 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6a00:	4f30      	ldr	r7, [pc, #192]	; (b6ac4 <_Z22disconnectFromParticlev+0x124>)
   b6a02:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6a04:	f004 fed2 	bl	bb7ac <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6a08:	f004 fee0 	bl	bb7cc <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b6a0c:	4604      	mov	r4, r0
   b6a0e:	b140      	cbz	r0, b6a22 <_Z22disconnectFromParticlev+0x82>
    Log.info("Failed to disconnect from Particle");
   b6a10:	492d      	ldr	r1, [pc, #180]	; (b6ac8 <_Z22disconnectFromParticlev+0x128>)
   b6a12:	482a      	ldr	r0, [pc, #168]	; (b6abc <_Z22disconnectFromParticlev+0x11c>)
   b6a14:	f7fd fb62 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b6a18:	2400      	movs	r4, #0
   b6a1a:	4620      	mov	r0, r4
   b6a1c:	b005      	add	sp, #20
   b6a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b6a22:	f007 fe8c 	bl	be73e <_ZN9TimeClass3nowEv>
   b6a26:	4929      	ldr	r1, [pc, #164]	; (b6acc <_Z22disconnectFromParticlev+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b6a28:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b6ad0 <_Z22disconnectFromParticlev+0x130>
   b6a2c:	1b42      	subs	r2, r0, r5
   b6a2e:	4823      	ldr	r0, [pc, #140]	; (b6abc <_Z22disconnectFromParticlev+0x11c>)
   b6a30:	f7fd fb54 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b6a34:	f007 fe83 	bl	be73e <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6a38:	4622      	mov	r2, r4
   b6a3a:	2102      	movs	r1, #2
   b6a3c:	4606      	mov	r6, r0
   b6a3e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6a42:	f004 ff1b 	bl	bb87c <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b6a46:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6a4a:	4623      	mov	r3, r4
   b6a4c:	4622      	mov	r2, r4
   b6a4e:	4621      	mov	r1, r4
   b6a50:	f004 ff2c 	bl	bb8ac <network_off>
        return hal_timer_millis(nullptr);
   b6a54:	4620      	mov	r0, r4
   b6a56:	f004 fbd5 	bl	bb204 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6a5a:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b6a5e:	4605      	mov	r5, r0
   b6a60:	2000      	movs	r0, #0
   b6a62:	f004 fbcf 	bl	bb204 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6a66:	1b43      	subs	r3, r0, r5
   b6a68:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6a6c:	454b      	cmp	r3, r9
   b6a6e:	f171 0300 	sbcs.w	r3, r1, #0
   b6a72:	d206      	bcs.n	b6a82 <_Z22disconnectFromParticlev+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b6a74:	4640      	mov	r0, r8
   b6a76:	f006 ff37 	bl	bd8e8 <_ZN5spark12NetworkClass5isOffEv>
   b6a7a:	b910      	cbnz	r0, b6a82 <_Z22disconnectFromParticlev+0xe2>
            spark_process();
   b6a7c:	f004 fe96 	bl	bb7ac <spark_process>
        while (_while() && !_condition()) {
   b6a80:	e7ee      	b.n	b6a60 <_Z22disconnectFromParticlev+0xc0>
   b6a82:	4813      	ldr	r0, [pc, #76]	; (b6ad0 <_Z22disconnectFromParticlev+0x130>)
   b6a84:	f006 ff30 	bl	bd8e8 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b6a88:	f004 fbac 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b6a8c:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6a8e:	f004 fe8d 	bl	bb7ac <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b6a92:	480f      	ldr	r0, [pc, #60]	; (b6ad0 <_Z22disconnectFromParticlev+0x130>)
   b6a94:	f006 ff24 	bl	bd8e0 <_ZN5spark12NetworkClass4isOnEv>
   b6a98:	b120      	cbz	r0, b6aa4 <_Z22disconnectFromParticlev+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b6a9a:	490e      	ldr	r1, [pc, #56]	; (b6ad4 <_Z22disconnectFromParticlev+0x134>)
   b6a9c:	4807      	ldr	r0, [pc, #28]	; (b6abc <_Z22disconnectFromParticlev+0x11c>)
   b6a9e:	f7fd fb1d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b6aa2:	e7ba      	b.n	b6a1a <_Z22disconnectFromParticlev+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b6aa4:	f007 fe4b 	bl	be73e <_ZN9TimeClass3nowEv>
   b6aa8:	490b      	ldr	r1, [pc, #44]	; (b6ad8 <_Z22disconnectFromParticlev+0x138>)
   b6aaa:	1b82      	subs	r2, r0, r6
   b6aac:	4803      	ldr	r0, [pc, #12]	; (b6abc <_Z22disconnectFromParticlev+0x11c>)
   b6aae:	f7fd fb15 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b6ab2:	2401      	movs	r4, #1
   b6ab4:	e7b1      	b.n	b6a1a <_Z22disconnectFromParticlev+0x7a>
   b6ab6:	bf00      	nop
   b6ab8:	000c08ad 	.word	0x000c08ad
   b6abc:	2003e658 	.word	0x2003e658
   b6ac0:	000c06e6 	.word	0x000c06e6
   b6ac4:	2003e710 	.word	0x2003e710
   b6ac8:	000c08d6 	.word	0x000c08d6
   b6acc:	000c08f9 	.word	0x000c08f9
   b6ad0:	2003e584 	.word	0x2003e584
   b6ad4:	000c0922 	.word	0x000c0922
   b6ad8:	000c0948 	.word	0x000c0948

000b6adc <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b6adc:	ee07 0a90 	vmov	s15, r0
   b6ae0:	ed9f 7a09 	vldr	s14, [pc, #36]	; b6b08 <_Z17tmp36TemperatureCi+0x2c>
   b6ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
   b6aec:	ed9f 7a07 	vldr	s14, [pc, #28]	; b6b0c <_Z17tmp36TemperatureCi+0x30>
   b6af0:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b6af4:	eddf 7a06 	vldr	s15, [pc, #24]	; b6b10 <_Z17tmp36TemperatureCi+0x34>
   b6af8:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b6afc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6b00:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6b04:	4770      	bx	lr
   b6b06:	bf00      	nop
   b6b08:	454e4000 	.word	0x454e4000
   b6b0c:	457ff000 	.word	0x457ff000
   b6b10:	43fa0000 	.word	0x43fa0000

000b6b14 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b6b14:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b6b16:	2101      	movs	r1, #1
   b6b18:	a801      	add	r0, sp, #4
   b6b1a:	f006 ff7a 	bl	bda12 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6b1e:	f7ff f849 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b6b22:	f7ff f962 	bl	b5dea <_ZNK17currentStatusData17get_internalTempCEv>
   b6b26:	f7ff f845 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b6b2a:	f7ff f95e 	bl	b5dea <_ZNK17currentStatusData17get_internalTempCEv>
   b6b2e:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6b30:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6b32:	d90d      	bls.n	b6b50 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6b34:	f007 f800 	bl	bdb38 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b6b38:	f7ff f83c 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b6b3c:	2101      	movs	r1, #1
   b6b3e:	f7ff f9de 	bl	b5efe <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b6b42:	2400      	movs	r4, #0
  PMIC pmic(true);
   b6b44:	a801      	add	r0, sp, #4
   b6b46:	f006 ff73 	bl	bda30 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	b002      	add	sp, #8
   b6b4e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b6b50:	f006 ffd7 	bl	bdb02 <_ZN4PMIC14enableChargingEv>
    return true;
   b6b54:	2401      	movs	r4, #1
   b6b56:	e7f5      	b.n	b6b44 <_Z16isItSafeToChargev+0x30>

000b6b58 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b6b58:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6b5a:	4d19      	ldr	r5, [pc, #100]	; (b6bc0 <_Z17getSignalStrengthv+0x68>)
   b6b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b6b5e:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6b60:	ac0c      	add	r4, sp, #48	; 0x30
   b6b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b68:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6b6c:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6b70:	4914      	ldr	r1, [pc, #80]	; (b6bc4 <_Z17getSignalStrengthv+0x6c>)
   b6b72:	a804      	add	r0, sp, #16
   b6b74:	f004 ffcc 	bl	bbb10 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6b78:	a804      	add	r0, sp, #16
   b6b7a:	f005 f80c 	bl	bbb96 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6b7e:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6b80:	a804      	add	r0, sp, #16
   b6b82:	f005 f841 	bl	bbc08 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b6b86:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b6b88:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6b8c:	f005 f86c 	bl	bbc68 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6b90:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b6b92:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6b96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b6b9a:	f008 fa4b 	bl	bf034 <__aeabi_f2d>
   b6b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6ba2:	4628      	mov	r0, r5
   b6ba4:	f008 fa46 	bl	bf034 <__aeabi_f2d>
   b6ba8:	e9cd 0100 	strd	r0, r1, [sp]
   b6bac:	4a06      	ldr	r2, [pc, #24]	; (b6bc8 <_Z17getSignalStrengthv+0x70>)
   b6bae:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6bb2:	4806      	ldr	r0, [pc, #24]	; (b6bcc <_Z17getSignalStrengthv+0x74>)
   b6bb4:	2140      	movs	r1, #64	; 0x40
   b6bb6:	f004 fed9 	bl	bb96c <snprintf>
}
   b6bba:	b017      	add	sp, #92	; 0x5c
   b6bbc:	bd30      	pop	{r4, r5, pc}
   b6bbe:	bf00      	nop
   b6bc0:	000c0a28 	.word	0x000c0a28
   b6bc4:	2003e584 	.word	0x2003e584
   b6bc8:	000c09e2 	.word	0x000c09e2
   b6bcc:	2003de70 	.word	0x2003de70

000b6bd0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6bd0:	b530      	push	{r4, r5, lr}
   b6bd2:	b085      	sub	sp, #20
   b6bd4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6bd6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6bd8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6bda:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6bdc:	f004 fd52 	bl	bb684 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6be0:	b990      	cbnz	r0, b6c08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b6be2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6be4:	b10c      	cbz	r4, b6bea <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6be6:	6923      	ldr	r3, [r4, #16]
   b6be8:	b923      	cbnz	r3, b6bf4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6bea:	4a08      	ldr	r2, [pc, #32]	; (b6c0c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6bec:	4908      	ldr	r1, [pc, #32]	; (b6c10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6bee:	200a      	movs	r0, #10
   b6bf0:	f004 fd20 	bl	bb634 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6bf4:	230c      	movs	r3, #12
   b6bf6:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b6bfa:	2304      	movs	r3, #4
   b6bfc:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b6bfe:	aa01      	add	r2, sp, #4
   b6c00:	6923      	ldr	r3, [r4, #16]
   b6c02:	2101      	movs	r1, #1
   b6c04:	4620      	mov	r0, r4
   b6c06:	4798      	blx	r3
}
   b6c08:	b005      	add	sp, #20
   b6c0a:	bd30      	pop	{r4, r5, pc}
   b6c0c:	000bb1d5 	.word	0x000bb1d5
   b6c10:	000c09fb 	.word	0x000c09fb

000b6c14 <_Z12batteryStatev>:
bool batteryState() {
   b6c14:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6c16:	f7fe ffcd 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b6c1a:	a901      	add	r1, sp, #4
   b6c1c:	4604      	mov	r4, r0
   b6c1e:	2007      	movs	r0, #7
   b6c20:	f7ff ffd6 	bl	b6bd0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6c24:	1e01      	subs	r1, r0, #0
        return val;
   b6c26:	bfa8      	it	ge
   b6c28:	9901      	ldrge	r1, [sp, #4]
   b6c2a:	4620      	mov	r0, r4
   b6c2c:	b2c9      	uxtb	r1, r1
   b6c2e:	f7ff f966 	bl	b5efe <_ZN17currentStatusData16set_batteryStateEh>
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b6c32:	4818      	ldr	r0, [pc, #96]	; (b6c94 <_Z12batteryStatev+0x80>)
   b6c34:	f005 fbba 	bl	bc3ac <_ZN9FuelGauge10quickStartEv>
  delay(500);
   b6c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6c3c:	f004 feee 	bl	bba1c <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b6c40:	f7fe ffb8 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b6c44:	a901      	add	r1, sp, #4
   b6c46:	4604      	mov	r4, r0
   b6c48:	2003      	movs	r0, #3
   b6c4a:	f7ff ffc1 	bl	b6bd0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6c4e:	b9e8      	cbnz	r0, b6c8c <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b6c50:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6c54:	ee07 3a90 	vmov	s15, r3
   b6c58:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6c5c:	ee17 0a90 	vmov	r0, s15
   b6c60:	f008 f9e8 	bl	bf034 <__aeabi_f2d>
   b6c64:	ec41 0b10 	vmov	d0, r0, r1
   b6c68:	4620      	mov	r0, r4
   b6c6a:	f7fe ffdd 	bl	b5c28 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b6c6e:	f7fe ffa1 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b6c72:	f7fe ffb9 	bl	b5be8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6c76:	4b08      	ldr	r3, [pc, #32]	; (b6c98 <_Z12batteryStatev+0x84>)
   b6c78:	ec51 0b10 	vmov	r0, r1, d0
   b6c7c:	2200      	movs	r2, #0
   b6c7e:	f008 fcc1 	bl	bf604 <__aeabi_dcmpgt>
}
   b6c82:	3800      	subs	r0, #0
   b6c84:	bf18      	it	ne
   b6c86:	2001      	movne	r0, #1
   b6c88:	b002      	add	sp, #8
   b6c8a:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6c8c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6c90:	e7e4      	b.n	b6c5c <_Z12batteryStatev+0x48>
   b6c92:	bf00      	nop
   b6c94:	2003e430 	.word	0x2003e430
   b6c98:	404e0000 	.word	0x404e0000

000b6c9c <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6c9c:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6c9e:	f7fe ff89 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b6ca2:	4b11      	ldr	r3, [pc, #68]	; (b6ce8 <_Z16takeMeasurementsv+0x4c>)
   b6ca4:	4604      	mov	r4, r0
   b6ca6:	8818      	ldrh	r0, [r3, #0]
   b6ca8:	f007 ff85 	bl	bebb6 <analogRead>
   b6cac:	f7ff ff16 	bl	b6adc <_Z17tmp36TemperatureCi>
   b6cb0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6cb4:	4620      	mov	r0, r4
   b6cb6:	edcd 7a01 	vstr	s15, [sp, #4]
   b6cba:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b6cbe:	f7ff f918 	bl	b5ef2 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6cc2:	f7fe ff77 	bl	b5bb4 <_ZN17currentStatusData8instanceEv>
   b6cc6:	f7ff f890 	bl	b5dea <_ZNK17currentStatusData17get_internalTempCEv>
   b6cca:	4a08      	ldr	r2, [pc, #32]	; (b6cec <_Z16takeMeasurementsv+0x50>)
   b6ccc:	4603      	mov	r3, r0
   b6cce:	2110      	movs	r1, #16
   b6cd0:	4807      	ldr	r0, [pc, #28]	; (b6cf0 <_Z16takeMeasurementsv+0x54>)
   b6cd2:	f004 fe4b 	bl	bb96c <snprintf>
    batteryState();
   b6cd6:	f7ff ff9d 	bl	b6c14 <_Z12batteryStatev>
    isItSafeToCharge();
   b6cda:	f7ff ff1b 	bl	b6b14 <_Z16isItSafeToChargev>
    getSignalStrength();
   b6cde:	f7ff ff3b 	bl	b6b58 <_Z17getSignalStrengthv>
}
   b6ce2:	2001      	movs	r0, #1
   b6ce4:	b002      	add	sp, #8
   b6ce6:	bd10      	pop	{r4, pc}
   b6ce8:	000c06ec 	.word	0x000c06ec
   b6cec:	000c0a21 	.word	0x000c0a21
   b6cf0:	2003de60 	.word	0x2003de60

000b6cf4 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6cf4:	4801      	ldr	r0, [pc, #4]	; (b6cfc <_GLOBAL__sub_I_batteryContext+0x8>)
   b6cf6:	2100      	movs	r1, #0
   b6cf8:	f005 bb14 	b.w	bc324 <_ZN9FuelGaugeC1Eb>
   b6cfc:	2003e430 	.word	0x2003e430

000b6d00 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6d00:	4770      	bx	lr

000b6d02 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6d02:	b510      	push	{r4, lr}
}
   b6d04:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b6d06:	4604      	mov	r4, r0
}
   b6d08:	f7fd f9c9 	bl	b409e <_ZdlPvj>
   b6d0c:	4620      	mov	r0, r4
   b6d0e:	bd10      	pop	{r4, pc}

000b6d10 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6d10:	b510      	push	{r4, lr}
   b6d12:	4604      	mov	r4, r0
   b6d14:	b08a      	sub	sp, #40	; 0x28
   b6d16:	4608      	mov	r0, r1
    attr.flags = 0;
   b6d18:	f04f 0c20 	mov.w	ip, #32
   b6d1c:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6d1e:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6d22:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6d26:	460b      	mov	r3, r1
   b6d28:	aa02      	add	r2, sp, #8
   b6d2a:	6821      	ldr	r1, [r4, #0]
   b6d2c:	f004 fc92 	bl	bb654 <log_message_v>
}
   b6d30:	b00a      	add	sp, #40	; 0x28
   b6d32:	bd10      	pop	{r4, pc}

000b6d34 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6d34:	b40e      	push	{r1, r2, r3}
   b6d36:	b503      	push	{r0, r1, lr}
   b6d38:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6d3a:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6d3c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6d40:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6d42:	f7ff ffe5 	bl	b6d10 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6d46:	b002      	add	sp, #8
   b6d48:	f85d eb04 	ldr.w	lr, [sp], #4
   b6d4c:	b003      	add	sp, #12
   b6d4e:	4770      	bx	lr

000b6d50 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6d50:	b40e      	push	{r1, r2, r3}
   b6d52:	b503      	push	{r0, r1, lr}
   b6d54:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6d56:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6d58:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6d5c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6d5e:	f7ff ffd7 	bl	b6d10 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6d62:	b002      	add	sp, #8
   b6d64:	f85d eb04 	ldr.w	lr, [sp], #4
   b6d68:	b003      	add	sp, #12
   b6d6a:	4770      	bx	lr

000b6d6c <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6d6c:	b510      	push	{r4, lr}
   b6d6e:	7202      	strb	r2, [r0, #8]
   b6d70:	22ff      	movs	r2, #255	; 0xff
   b6d72:	8142      	strh	r2, [r0, #10]
   b6d74:	2200      	movs	r2, #0
   b6d76:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b6d7a:	6142      	str	r2, [r0, #20]
   b6d7c:	7602      	strb	r2, [r0, #24]
   b6d7e:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6d80:	4a02      	ldr	r2, [pc, #8]	; (b6d8c <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6d82:	4c03      	ldr	r4, [pc, #12]	; (b6d90 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6d84:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6d86:	e9c0 4100 	strd	r4, r1, [r0]
}
   b6d8a:	bd10      	pop	{r4, pc}
   b6d8c:	2003e43c 	.word	0x2003e43c
   b6d90:	000c0ca0 	.word	0x000c0ca0

000b6d94 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6d98:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6d9c:	4604      	mov	r4, r0
   b6d9e:	4689      	mov	r9, r1
   b6da0:	4616      	mov	r6, r2
   b6da2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6da4:	f1b8 0f00 	cmp.w	r8, #0
   b6da8:	d002      	beq.n	b6db0 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b6daa:	6840      	ldr	r0, [r0, #4]
   b6dac:	f005 fb98 	bl	bc4e0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6db0:	7a21      	ldrb	r1, [r4, #8]
   b6db2:	6860      	ldr	r0, [r4, #4]
   b6db4:	f005 fb71 	bl	bc49a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6db8:	6860      	ldr	r0, [r4, #4]
   b6dba:	6803      	ldr	r3, [r0, #0]
   b6dbc:	4649      	mov	r1, r9
   b6dbe:	689b      	ldr	r3, [r3, #8]
   b6dc0:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6dc2:	6860      	ldr	r0, [r4, #4]
   b6dc4:	2100      	movs	r1, #0
   b6dc6:	f005 fb87 	bl	bc4d8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6dca:	4605      	mov	r5, r0
   b6dcc:	bb00      	cbnz	r0, b6e10 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6dce:	2301      	movs	r3, #1
   b6dd0:	7a21      	ldrb	r1, [r4, #8]
   b6dd2:	6860      	ldr	r0, [r4, #4]
   b6dd4:	463a      	mov	r2, r7
   b6dd6:	f005 fb4e 	bl	bc476 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b6dda:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6ddc:	4603      	mov	r3, r0
        if (count == num) {
   b6dde:	d109      	bne.n	b6df4 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6de0:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6de2:	42be      	cmp	r6, r7
   b6de4:	d01c      	beq.n	b6e20 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6de6:	6860      	ldr	r0, [r4, #4]
   b6de8:	6803      	ldr	r3, [r0, #0]
   b6dea:	695b      	ldr	r3, [r3, #20]
   b6dec:	4798      	blx	r3
   b6dee:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6df2:	e7f6      	b.n	b6de2 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6df4:	490b      	ldr	r1, [pc, #44]	; (b6e24 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b6df6:	480c      	ldr	r0, [pc, #48]	; (b6e28 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6df8:	464a      	mov	r2, r9
   b6dfa:	f7ff ff9b 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6dfe:	f1b8 0f00 	cmp.w	r8, #0
   b6e02:	d002      	beq.n	b6e0a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6e04:	6860      	ldr	r0, [r4, #4]
   b6e06:	f005 fb74 	bl	bc4f2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b6e0a:	4628      	mov	r0, r5
   b6e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6e10:	4603      	mov	r3, r0
   b6e12:	4906      	ldr	r1, [pc, #24]	; (b6e2c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6e14:	4804      	ldr	r0, [pc, #16]	; (b6e28 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6e16:	464a      	mov	r2, r9
   b6e18:	f7ff ff8c 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6e1c:	2500      	movs	r5, #0
   b6e1e:	e7ee      	b.n	b6dfe <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6e20:	2501      	movs	r5, #1
   b6e22:	e7ec      	b.n	b6dfe <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6e24:	000c0a50 	.word	0x000c0a50
   b6e28:	2003e438 	.word	0x2003e438
   b6e2c:	000c0a75 	.word	0x000c0a75

000b6e30 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6e30:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6e32:	9300      	str	r3, [sp, #0]
   b6e34:	2301      	movs	r3, #1
   b6e36:	f7ff ffad 	bl	b6d94 <_ZN6AB180513readRegistersEhPhjb>
}
   b6e3a:	b003      	add	sp, #12
   b6e3c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e40 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6e42:	8943      	ldrh	r3, [r0, #10]
   b6e44:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b6e46:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b6e48:	d010      	beq.n	b6e6c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6e4a:	4e19      	ldr	r6, [pc, #100]	; (b6eb0 <_ZN6AB180510detectChipEv+0x70>)
   b6e4c:	4d19      	ldr	r5, [pc, #100]	; (b6eb4 <_ZN6AB180510detectChipEv+0x74>)
   b6e4e:	f004 f9c9 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b6e52:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6e56:	d209      	bcs.n	b6e6c <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6e58:	8960      	ldrh	r0, [r4, #10]
   b6e5a:	f007 fe99 	bl	beb90 <digitalRead>
   b6e5e:	2801      	cmp	r0, #1
   b6e60:	d004      	beq.n	b6e6c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6e62:	4631      	mov	r1, r6
   b6e64:	4628      	mov	r0, r5
   b6e66:	f7fd f939 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6e6a:	e7f0      	b.n	b6e4e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6e6c:	2301      	movs	r3, #1
   b6e6e:	f10d 0207 	add.w	r2, sp, #7
   b6e72:	2128      	movs	r1, #40	; 0x28
   b6e74:	4620      	mov	r0, r4
   b6e76:	f7ff ffdb 	bl	b6e30 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6e7a:	b930      	cbnz	r0, b6e8a <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6e7c:	480d      	ldr	r0, [pc, #52]	; (b6eb4 <_ZN6AB180510detectChipEv+0x74>)
   b6e7e:	490e      	ldr	r1, [pc, #56]	; (b6eb8 <_ZN6AB180510detectChipEv+0x78>)
   b6e80:	f7fd f92c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6e84:	2000      	movs	r0, #0
}
   b6e86:	b002      	add	sp, #8
   b6e88:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6e8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6e8e:	2b18      	cmp	r3, #24
   b6e90:	d1f4      	bne.n	b6e7c <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6e92:	2301      	movs	r3, #1
   b6e94:	f10d 0207 	add.w	r2, sp, #7
   b6e98:	2129      	movs	r1, #41	; 0x29
   b6e9a:	4620      	mov	r0, r4
   b6e9c:	f7ff ffc8 	bl	b6e30 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6ea0:	2800      	cmp	r0, #0
   b6ea2:	d0eb      	beq.n	b6e7c <_ZN6AB180510detectChipEv+0x3c>
   b6ea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6ea8:	2b05      	cmp	r3, #5
   b6eaa:	d1e7      	bne.n	b6e7c <_ZN6AB180510detectChipEv+0x3c>
   b6eac:	e7eb      	b.n	b6e86 <_ZN6AB180510detectChipEv+0x46>
   b6eae:	bf00      	nop
   b6eb0:	000c0a99 	.word	0x000c0a99
   b6eb4:	2003e438 	.word	0x2003e438
   b6eb8:	000c0aae 	.word	0x000c0aae

000b6ebc <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6ebc:	b507      	push	{r0, r1, r2, lr}
   b6ebe:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6ec0:	2200      	movs	r2, #0
   b6ec2:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6ec6:	f10d 0207 	add.w	r2, sp, #7
   b6eca:	f7ff ffb1 	bl	b6e30 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6ece:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6ed2:	b003      	add	sp, #12
   b6ed4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ed8 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6edc:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6ee0:	4604      	mov	r4, r0
   b6ee2:	460f      	mov	r7, r1
   b6ee4:	4615      	mov	r5, r2
   b6ee6:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6ee8:	f1b8 0f00 	cmp.w	r8, #0
   b6eec:	d002      	beq.n	b6ef4 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b6eee:	6840      	ldr	r0, [r0, #4]
   b6ef0:	f005 faf6 	bl	bc4e0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6ef4:	7a21      	ldrb	r1, [r4, #8]
   b6ef6:	6860      	ldr	r0, [r4, #4]
   b6ef8:	f005 facf 	bl	bc49a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6efc:	6860      	ldr	r0, [r4, #4]
   b6efe:	6803      	ldr	r3, [r0, #0]
   b6f00:	4639      	mov	r1, r7
   b6f02:	689b      	ldr	r3, [r3, #8]
   b6f04:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6f06:	442e      	add	r6, r5
   b6f08:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b6f0a:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6f0c:	d005      	beq.n	b6f1a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b6f0e:	6803      	ldr	r3, [r0, #0]
   b6f10:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6f14:	689b      	ldr	r3, [r3, #8]
   b6f16:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6f18:	e7f6      	b.n	b6f08 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6f1a:	2101      	movs	r1, #1
   b6f1c:	f005 fadc 	bl	bc4d8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6f20:	4603      	mov	r3, r0
   b6f22:	b170      	cbz	r0, b6f42 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6f24:	4908      	ldr	r1, [pc, #32]	; (b6f48 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6f26:	4809      	ldr	r0, [pc, #36]	; (b6f4c <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6f28:	463a      	mov	r2, r7
   b6f2a:	f7ff ff03 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6f2e:	2500      	movs	r5, #0
    }

    if (lock) {
   b6f30:	f1b8 0f00 	cmp.w	r8, #0
   b6f34:	d002      	beq.n	b6f3c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6f36:	6860      	ldr	r0, [r4, #4]
   b6f38:	f005 fadb 	bl	bc4f2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6f3c:	4628      	mov	r0, r5
   b6f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6f42:	2501      	movs	r5, #1
   b6f44:	e7f4      	b.n	b6f30 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6f46:	bf00      	nop
   b6f48:	000c0abb 	.word	0x000c0abb
   b6f4c:	2003e438 	.word	0x2003e438

000b6f50 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6f52:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6f56:	9300      	str	r3, [sp, #0]
   b6f58:	f10d 020f 	add.w	r2, sp, #15
   b6f5c:	2301      	movs	r3, #1
   b6f5e:	f7ff ffbb 	bl	b6ed8 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b6f62:	b005      	add	sp, #20
   b6f64:	f85d fb04 	ldr.w	pc, [sp], #4

000b6f68 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6f6a:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6f6c:	460c      	mov	r4, r1
   b6f6e:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b6f70:	491a      	ldr	r1, [pc, #104]	; (b6fdc <_ZN6AB18056setWDTEi+0x74>)
   b6f72:	481b      	ldr	r0, [pc, #108]	; (b6fe0 <_ZN6AB18056setWDTEi+0x78>)
   b6f74:	f7fd f8b2 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6f78:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6f7a:	bfb8      	it	lt
   b6f7c:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b6f7e:	b97c      	cbnz	r4, b6fa0 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b6f80:	2301      	movs	r3, #1
   b6f82:	4622      	mov	r2, r4
   b6f84:	211b      	movs	r1, #27
   b6f86:	4628      	mov	r0, r5
   b6f88:	f7ff ffe2 	bl	b6f50 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6f8c:	4915      	ldr	r1, [pc, #84]	; (b6fe4 <_ZN6AB18056setWDTEi+0x7c>)
   b6f8e:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b6f90:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6f92:	4813      	ldr	r0, [pc, #76]	; (b6fe0 <_ZN6AB18056setWDTEi+0x78>)
   b6f94:	f7ff fedc 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6f98:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6f9a:	616c      	str	r4, [r5, #20]
}
   b6f9c:	4630      	mov	r0, r6
   b6f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6fa0:	2c03      	cmp	r4, #3
   b6fa2:	dd19      	ble.n	b6fd8 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6fa4:	10a7      	asrs	r7, r4, #2
   b6fa6:	2f1f      	cmp	r7, #31
   b6fa8:	bfa8      	it	ge
   b6faa:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6fac:	00ba      	lsls	r2, r7, #2
   b6fae:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6fb2:	2301      	movs	r3, #1
   b6fb4:	b2d2      	uxtb	r2, r2
   b6fb6:	211b      	movs	r1, #27
   b6fb8:	4628      	mov	r0, r5
   b6fba:	f7ff ffc9 	bl	b6f50 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6fbe:	463a      	mov	r2, r7
   b6fc0:	4603      	mov	r3, r0
   b6fc2:	4909      	ldr	r1, [pc, #36]	; (b6fe8 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6fc4:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6fc6:	4806      	ldr	r0, [pc, #24]	; (b6fe0 <_ZN6AB18056setWDTEi+0x78>)
   b6fc8:	f7ff fec2 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6fcc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6fd0:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6fd2:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6fd4:	616f      	str	r7, [r5, #20]
   b6fd6:	e7e1      	b.n	b6f9c <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6fd8:	2701      	movs	r7, #1
   b6fda:	e7e7      	b.n	b6fac <_ZN6AB18056setWDTEi+0x44>
   b6fdc:	000c0ae0 	.word	0x000c0ae0
   b6fe0:	2003e438 	.word	0x2003e438
   b6fe4:	000c0aea 	.word	0x000c0aea
   b6fe8:	000c0b06 	.word	0x000c0b06

000b6fec <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6fec:	4b06      	ldr	r3, [pc, #24]	; (b7008 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6fee:	681a      	ldr	r2, [r3, #0]
   b6ff0:	b14a      	cbz	r2, b7006 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6ff2:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6ff6:	430b      	orrs	r3, r1
   b6ff8:	d105      	bne.n	b7006 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b6ffa:	68d3      	ldr	r3, [r2, #12]
   b6ffc:	b11b      	cbz	r3, b7006 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6ffe:	2100      	movs	r1, #0
   b7000:	4610      	mov	r0, r2
   b7002:	f7ff bfb1 	b.w	b6f68 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b7006:	4770      	bx	lr
   b7008:	2003e43c 	.word	0x2003e43c

000b700c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b700c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7010:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7014:	4605      	mov	r5, r0
   b7016:	4616      	mov	r6, r2
   b7018:	461f      	mov	r7, r3
    if (lock) {
   b701a:	f1b8 0f00 	cmp.w	r8, #0
   b701e:	d004      	beq.n	b702a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b7020:	6840      	ldr	r0, [r0, #4]
   b7022:	9101      	str	r1, [sp, #4]
   b7024:	f005 fa5c 	bl	bc4e0 <_ZN7TwoWire4lockEv>
   b7028:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b702a:	9101      	str	r1, [sp, #4]
   b702c:	2300      	movs	r3, #0
   b702e:	f10d 020f 	add.w	r2, sp, #15
   b7032:	4628      	mov	r0, r5
   b7034:	f7ff fefc 	bl	b6e30 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b7038:	4604      	mov	r4, r0
   b703a:	b160      	cbz	r0, b7056 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b703c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b7040:	ea03 0206 	and.w	r2, r3, r6
   b7044:	433a      	orrs	r2, r7
        if (newValue != value) {
   b7046:	4293      	cmp	r3, r2
   b7048:	d005      	beq.n	b7056 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b704a:	9901      	ldr	r1, [sp, #4]
   b704c:	2300      	movs	r3, #0
   b704e:	4628      	mov	r0, r5
   b7050:	f7ff ff7e 	bl	b6f50 <_ZN6AB180513writeRegisterEhhb>
   b7054:	4604      	mov	r4, r0
    if (lock) {
   b7056:	f1b8 0f00 	cmp.w	r8, #0
   b705a:	d002      	beq.n	b7062 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b705c:	6868      	ldr	r0, [r5, #4]
   b705e:	f005 fa48 	bl	bc4f2 <_ZN7TwoWire6unlockEv>
}
   b7062:	4620      	mov	r0, r4
   b7064:	b004      	add	sp, #16
   b7066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b706a <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b706a:	b513      	push	{r0, r1, r4, lr}
   b706c:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b706e:	f10d 0207 	add.w	r2, sp, #7
   b7072:	f7ff fedd 	bl	b6e30 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b7076:	b128      	cbz	r0, b7084 <_ZN6AB180510isBitClearEhhb+0x1a>
   b7078:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b707c:	421c      	tst	r4, r3
   b707e:	bf0c      	ite	eq
   b7080:	2001      	moveq	r0, #1
   b7082:	2000      	movne	r0, #0
}
   b7084:	b002      	add	sp, #8
   b7086:	bd10      	pop	{r4, pc}

000b7088 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7088:	b513      	push	{r0, r1, r4, lr}
   b708a:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b708c:	f10d 0207 	add.w	r2, sp, #7
   b7090:	f7ff fece 	bl	b6e30 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b7094:	b128      	cbz	r0, b70a2 <_ZN6AB18058isBitSetEhhb+0x1a>
   b7096:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b709a:	421c      	tst	r4, r3
   b709c:	bf14      	ite	ne
   b709e:	2001      	movne	r0, #1
   b70a0:	2000      	moveq	r0, #0
}
   b70a2:	b002      	add	sp, #8
   b70a4:	bd10      	pop	{r4, pc}

000b70a6 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b70a6:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b70a8:	43d2      	mvns	r2, r2
   b70aa:	9300      	str	r3, [sp, #0]
   b70ac:	b2d2      	uxtb	r2, r2
   b70ae:	2300      	movs	r3, #0
   b70b0:	f7ff ffac 	bl	b700c <_ZN6AB180512maskRegisterEhhhb>
}
   b70b4:	b003      	add	sp, #12
   b70b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b70bc <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b70bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b70be:	2301      	movs	r3, #1
   b70c0:	f10d 0207 	add.w	r2, sp, #7
   b70c4:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b70c6:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b70c8:	f7ff feb2 	bl	b6e30 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b70cc:	4605      	mov	r5, r0
   b70ce:	b938      	cbnz	r0, b70e0 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b70d0:	491e      	ldr	r1, [pc, #120]	; (b714c <_ZN6AB180516updateWakeReasonEv+0x90>)
   b70d2:	481f      	ldr	r0, [pc, #124]	; (b7150 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b70d4:	22ad      	movs	r2, #173	; 0xad
   b70d6:	f7ff fe2d 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
}
   b70da:	4628      	mov	r0, r5
   b70dc:	b003      	add	sp, #12
   b70de:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b70e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b70e4:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b70e8:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b70ec:	d00b      	beq.n	b7106 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b70ee:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b70f0:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b70f2:	210f      	movs	r1, #15
   b70f4:	4620      	mov	r0, r4
   b70f6:	f7ff ffd6 	bl	b70a6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b70fa:	4a16      	ldr	r2, [pc, #88]	; (b7154 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b70fc:	4916      	ldr	r1, [pc, #88]	; (b7158 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b70fe:	4814      	ldr	r0, [pc, #80]	; (b7150 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7100:	f7fc ffec 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b7104:	e7e9      	b.n	b70da <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b7106:	2208      	movs	r2, #8
   b7108:	2117      	movs	r1, #23
   b710a:	4620      	mov	r0, r4
   b710c:	f7ff ffbc 	bl	b7088 <_ZN6AB18058isBitSetEhhb>
   b7110:	b118      	cbz	r0, b711a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7112:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7114:	4a11      	ldr	r2, [pc, #68]	; (b715c <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7116:	61e3      	str	r3, [r4, #28]
   b7118:	e7f0      	b.n	b70fc <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b711a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b711e:	071a      	lsls	r2, r3, #28
   b7120:	d509      	bpl.n	b7136 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b7122:	2303      	movs	r3, #3
   b7124:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b7126:	2208      	movs	r2, #8
   b7128:	2301      	movs	r3, #1
   b712a:	210f      	movs	r1, #15
   b712c:	4620      	mov	r0, r4
   b712e:	f7ff ffba 	bl	b70a6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b7132:	4a0b      	ldr	r2, [pc, #44]	; (b7160 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7134:	e7e2      	b.n	b70fc <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b7136:	075b      	lsls	r3, r3, #29
   b7138:	d5cf      	bpl.n	b70da <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b713a:	2204      	movs	r2, #4
   b713c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b713e:	2301      	movs	r3, #1
   b7140:	210f      	movs	r1, #15
   b7142:	4620      	mov	r0, r4
   b7144:	f7ff ffaf 	bl	b70a6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b7148:	4a06      	ldr	r2, [pc, #24]	; (b7164 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b714a:	e7d7      	b.n	b70fc <_ZN6AB180516updateWakeReasonEv+0x40>
   b714c:	000c0b59 	.word	0x000c0b59
   b7150:	2003e438 	.word	0x2003e438
   b7154:	000c0b2a 	.word	0x000c0b2a
   b7158:	000c0b78 	.word	0x000c0b78
   b715c:	000c0b33 	.word	0x000c0b33
   b7160:	000c0b43 	.word	0x000c0b43
   b7164:	000c0b53 	.word	0x000c0b53

000b7168 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7168:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b716a:	9300      	str	r3, [sp, #0]
   b716c:	4613      	mov	r3, r2
   b716e:	22ff      	movs	r2, #255	; 0xff
   b7170:	f7ff ff4c 	bl	b700c <_ZN6AB180512maskRegisterEhhhb>
}
   b7174:	b003      	add	sp, #12
   b7176:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b717c <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b717e:	460f      	mov	r7, r1
   b7180:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7182:	2301      	movs	r3, #1
   b7184:	2200      	movs	r2, #0
   b7186:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7188:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b718a:	f7ff fee1 	bl	b6f50 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b718e:	4604      	mov	r4, r0
   b7190:	b938      	cbnz	r0, b71a2 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b7192:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b7196:	491f      	ldr	r1, [pc, #124]	; (b7214 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b7198:	481f      	ldr	r0, [pc, #124]	; (b7218 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b719a:	f7ff fdcb 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
}
   b719e:	4620      	mov	r0, r4
   b71a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b71a2:	2301      	movs	r3, #1
   b71a4:	2223      	movs	r2, #35	; 0x23
   b71a6:	2118      	movs	r1, #24
   b71a8:	4628      	mov	r0, r5
   b71aa:	f7ff fed1 	bl	b6f50 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b71ae:	4604      	mov	r4, r0
   b71b0:	b910      	cbnz	r0, b71b8 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b71b2:	f240 229b 	movw	r2, #667	; 0x29b
   b71b6:	e7ee      	b.n	b7196 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b71b8:	2fff      	cmp	r7, #255	; 0xff
   b71ba:	bfa8      	it	ge
   b71bc:	27ff      	movge	r7, #255	; 0xff
   b71be:	2f01      	cmp	r7, #1
   b71c0:	bfb8      	it	lt
   b71c2:	2701      	movlt	r7, #1
   b71c4:	2301      	movs	r3, #1
   b71c6:	b2fa      	uxtb	r2, r7
   b71c8:	2119      	movs	r1, #25
   b71ca:	4628      	mov	r0, r5
   b71cc:	f7ff fec0 	bl	b6f50 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b71d0:	4604      	mov	r4, r0
   b71d2:	b910      	cbnz	r0, b71da <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b71d4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b71d8:	e7dd      	b.n	b7196 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b71da:	2301      	movs	r3, #1
   b71dc:	2208      	movs	r2, #8
   b71de:	2112      	movs	r1, #18
   b71e0:	4628      	mov	r0, r5
   b71e2:	f7ff ffc1 	bl	b7168 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b71e6:	4604      	mov	r4, r0
   b71e8:	b910      	cbnz	r0, b71f0 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b71ea:	f240 22af 	movw	r2, #687	; 0x2af
   b71ee:	e7d2      	b.n	b7196 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b71f0:	2e00      	cmp	r6, #0
   b71f2:	bf14      	ite	ne
   b71f4:	2203      	movne	r2, #3
   b71f6:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b71f8:	2301      	movs	r3, #1
   b71fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b71fe:	2118      	movs	r1, #24
   b7200:	4628      	mov	r0, r5
   b7202:	f7ff fea5 	bl	b6f50 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7206:	4604      	mov	r4, r0
   b7208:	2800      	cmp	r0, #0
   b720a:	d1c8      	bne.n	b719e <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b720c:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7210:	e7c1      	b.n	b7196 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7212:	bf00      	nop
   b7214:	000c0b89 	.word	0x000c0b89
   b7218:	2003e438 	.word	0x2003e438

000b721c <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b721c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7220:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7222:	4605      	mov	r5, r0
   b7224:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b7226:	484f      	ldr	r0, [pc, #316]	; (b7364 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7228:	494f      	ldr	r1, [pc, #316]	; (b7368 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b722a:	f7fc ff57 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b722e:	2100      	movs	r1, #0
   b7230:	4628      	mov	r0, r5
   b7232:	f7ff fe99 	bl	b6f68 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b7236:	4604      	mov	r4, r0
   b7238:	b948      	cbnz	r0, b724e <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b723a:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b723e:	494b      	ldr	r1, [pc, #300]	; (b736c <_ZN6AB180513deepPowerDownEi+0x150>)
   b7240:	4848      	ldr	r0, [pc, #288]	; (b7364 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7242:	f7ff fd77 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
}
   b7246:	4620      	mov	r0, r4
   b7248:	b003      	add	sp, #12
   b724a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b724e:	2301      	movs	r3, #1
   b7250:	461a      	mov	r2, r3
   b7252:	2130      	movs	r1, #48	; 0x30
   b7254:	4628      	mov	r0, r5
   b7256:	f7ff ff87 	bl	b7168 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b725a:	4604      	mov	r4, r0
   b725c:	b910      	cbnz	r0, b7264 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b725e:	f240 2205 	movw	r2, #517	; 0x205
   b7262:	e7ec      	b.n	b723e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b7264:	2210      	movs	r2, #16
   b7266:	2301      	movs	r3, #1
   b7268:	4611      	mov	r1, r2
   b726a:	4628      	mov	r0, r5
   b726c:	f7ff ff1b 	bl	b70a6 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b7270:	4604      	mov	r4, r0
   b7272:	b910      	cbnz	r0, b727a <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b7274:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b7278:	e7e1      	b.n	b723e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b727a:	2301      	movs	r3, #1
   b727c:	2226      	movs	r2, #38	; 0x26
   b727e:	2113      	movs	r1, #19
   b7280:	4628      	mov	r0, r5
   b7282:	f7ff fe65 	bl	b6f50 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7286:	4604      	mov	r4, r0
   b7288:	b910      	cbnz	r0, b7290 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b728a:	f240 2213 	movw	r2, #531	; 0x213
   b728e:	e7d6      	b.n	b723e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b7290:	2601      	movs	r6, #1
   b7292:	9600      	str	r6, [sp, #0]
   b7294:	4633      	mov	r3, r6
   b7296:	22fc      	movs	r2, #252	; 0xfc
   b7298:	2111      	movs	r1, #17
   b729a:	4628      	mov	r0, r5
   b729c:	f7ff feb6 	bl	b700c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b72a0:	4604      	mov	r4, r0
   b72a2:	b910      	cbnz	r0, b72aa <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b72a4:	f240 221b 	movw	r2, #539	; 0x21b
   b72a8:	e7c9      	b.n	b723e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b72aa:	2200      	movs	r2, #0
   b72ac:	4639      	mov	r1, r7
   b72ae:	4628      	mov	r0, r5
   b72b0:	f7ff ff64 	bl	b717c <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b72b4:	4604      	mov	r4, r0
   b72b6:	b910      	cbnz	r0, b72be <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b72b8:	f240 2222 	movw	r2, #546	; 0x222
   b72bc:	e7bf      	b.n	b723e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b72be:	9600      	str	r6, [sp, #0]
   b72c0:	2302      	movs	r3, #2
   b72c2:	2277      	movs	r2, #119	; 0x77
   b72c4:	2110      	movs	r1, #16
   b72c6:	4628      	mov	r0, r5
   b72c8:	f7ff fea0 	bl	b700c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b72cc:	4604      	mov	r4, r0
   b72ce:	b910      	cbnz	r0, b72d6 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b72d0:	f240 222b 	movw	r2, #555	; 0x22b
   b72d4:	e7b3      	b.n	b723e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b72d6:	4633      	mov	r3, r6
   b72d8:	2204      	movs	r2, #4
   b72da:	211c      	movs	r1, #28
   b72dc:	4628      	mov	r0, r5
   b72de:	f7ff ff43 	bl	b7168 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b72e2:	4604      	mov	r4, r0
   b72e4:	b910      	cbnz	r0, b72ec <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b72e6:	f240 2232 	movw	r2, #562	; 0x232
   b72ea:	e7a8      	b.n	b723e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b72ec:	9600      	str	r6, [sp, #0]
   b72ee:	2318      	movs	r3, #24
   b72f0:	22e3      	movs	r2, #227	; 0xe3
   b72f2:	2111      	movs	r1, #17
   b72f4:	4628      	mov	r0, r5
   b72f6:	f7ff fe89 	bl	b700c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b72fa:	4604      	mov	r4, r0
   b72fc:	b910      	cbnz	r0, b7304 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b72fe:	f240 2239 	movw	r2, #569	; 0x239
   b7302:	e79c      	b.n	b723e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b7304:	4633      	mov	r3, r6
   b7306:	22c0      	movs	r2, #192	; 0xc0
   b7308:	2117      	movs	r1, #23
   b730a:	4628      	mov	r0, r5
   b730c:	f7ff fe20 	bl	b6f50 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7310:	4604      	mov	r4, r0
   b7312:	b910      	cbnz	r0, b731a <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b7314:	f44f 7210 	mov.w	r2, #576	; 0x240
   b7318:	e791      	b.n	b723e <_ZN6AB180513deepPowerDownEi+0x22>
   b731a:	f003 ff63 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b731e:	f8df 9054 	ldr.w	r9, [pc, #84]	; b7374 <_ZN6AB180513deepPowerDownEi+0x158>
   b7322:	f8df 8040 	ldr.w	r8, [pc, #64]	; b7364 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7326:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b732a:	4606      	mov	r6, r0
   b732c:	434f      	muls	r7, r1
   b732e:	f003 ff59 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
   b7332:	1b80      	subs	r0, r0, r6
   b7334:	42b8      	cmp	r0, r7
   b7336:	d20e      	bcs.n	b7356 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7338:	2201      	movs	r2, #1
   b733a:	2117      	movs	r1, #23
   b733c:	4628      	mov	r0, r5
   b733e:	f7ff fdbd 	bl	b6ebc <_ZN6AB180512readRegisterEhb>
   b7342:	4649      	mov	r1, r9
   b7344:	4602      	mov	r2, r0
   b7346:	4640      	mov	r0, r8
   b7348:	f7fc fec8 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b734c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7350:	f004 fb64 	bl	bba1c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7354:	e7eb      	b.n	b732e <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b7356:	4906      	ldr	r1, [pc, #24]	; (b7370 <_ZN6AB180513deepPowerDownEi+0x154>)
   b7358:	4802      	ldr	r0, [pc, #8]	; (b7364 <_ZN6AB180513deepPowerDownEi+0x148>)
   b735a:	f7ff fceb 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b735e:	f006 fffa 	bl	be356 <_ZN11SystemClass5resetEv>
    return true;
   b7362:	e770      	b.n	b7246 <_ZN6AB180513deepPowerDownEi+0x2a>
   b7364:	2003e438 	.word	0x2003e438
   b7368:	000c0bb4 	.word	0x000c0bb4
   b736c:	000c0ba9 	.word	0x000c0ba9
   b7370:	000c0bda 	.word	0x000c0bda
   b7374:	000c0bc5 	.word	0x000c0bc5

000b7378 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b7378:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b737c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7380:	4605      	mov	r5, r0
   b7382:	460c      	mov	r4, r1
   b7384:	4691      	mov	r9, r2
   b7386:	461f      	mov	r7, r3
    if (lock) {
   b7388:	f1ba 0f00 	cmp.w	sl, #0
   b738c:	d002      	beq.n	b7394 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b738e:	6840      	ldr	r0, [r0, #4]
   b7390:	f005 f8a6 	bl	bc4e0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7394:	b307      	cbz	r7, b73d8 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b7396:	2f20      	cmp	r7, #32
   b7398:	463e      	mov	r6, r7
   b739a:	bf28      	it	cs
   b739c:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b739e:	2c7f      	cmp	r4, #127	; 0x7f
   b73a0:	d826      	bhi.n	b73f0 <_ZN6AB18057readRamEjPhjb+0x78>
   b73a2:	1933      	adds	r3, r6, r4
   b73a4:	2b80      	cmp	r3, #128	; 0x80
   b73a6:	d901      	bls.n	b73ac <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b73a8:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b73ac:	2301      	movs	r3, #1
   b73ae:	2204      	movs	r2, #4
   b73b0:	213f      	movs	r1, #63	; 0x3f
   b73b2:	4628      	mov	r0, r5
   b73b4:	f7ff fe77 	bl	b70a6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b73b8:	2300      	movs	r3, #0
   b73ba:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b73be:	9300      	str	r3, [sp, #0]
   b73c0:	464a      	mov	r2, r9
   b73c2:	4633      	mov	r3, r6
   b73c4:	b2c9      	uxtb	r1, r1
   b73c6:	4628      	mov	r0, r5
   b73c8:	f7ff fce4 	bl	b6d94 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b73cc:	4680      	mov	r8, r0
   b73ce:	b128      	cbz	r0, b73dc <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b73d0:	4434      	add	r4, r6
        dataLen -= count;
   b73d2:	1bbf      	subs	r7, r7, r6
        data += count;
   b73d4:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b73d6:	e7dd      	b.n	b7394 <_ZN6AB18057readRamEjPhjb+0x1c>
   b73d8:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b73dc:	f1ba 0f00 	cmp.w	sl, #0
   b73e0:	d002      	beq.n	b73e8 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b73e2:	6868      	ldr	r0, [r5, #4]
   b73e4:	f005 f885 	bl	bc4f2 <_ZN7TwoWire6unlockEv>
}
   b73e8:	4640      	mov	r0, r8
   b73ea:	b002      	add	sp, #8
   b73ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b73f0:	2301      	movs	r3, #1
   b73f2:	2204      	movs	r2, #4
   b73f4:	213f      	movs	r1, #63	; 0x3f
   b73f6:	4628      	mov	r0, r5
   b73f8:	f7ff feb6 	bl	b7168 <_ZN6AB180514setRegisterBitEhhb>
   b73fc:	e7dc      	b.n	b73b8 <_ZN6AB18057readRamEjPhjb+0x40>

000b73fe <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b73fe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7402:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7406:	4605      	mov	r5, r0
   b7408:	460c      	mov	r4, r1
   b740a:	4691      	mov	r9, r2
   b740c:	461f      	mov	r7, r3
    if (lock) {
   b740e:	f1ba 0f00 	cmp.w	sl, #0
   b7412:	d002      	beq.n	b741a <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b7414:	6840      	ldr	r0, [r0, #4]
   b7416:	f005 f863 	bl	bc4e0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b741a:	b307      	cbz	r7, b745e <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b741c:	2f1f      	cmp	r7, #31
   b741e:	463e      	mov	r6, r7
   b7420:	bf28      	it	cs
   b7422:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7424:	2c7f      	cmp	r4, #127	; 0x7f
   b7426:	d826      	bhi.n	b7476 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b7428:	1933      	adds	r3, r6, r4
   b742a:	2b80      	cmp	r3, #128	; 0x80
   b742c:	d901      	bls.n	b7432 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b742e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7432:	2301      	movs	r3, #1
   b7434:	2204      	movs	r2, #4
   b7436:	213f      	movs	r1, #63	; 0x3f
   b7438:	4628      	mov	r0, r5
   b743a:	f7ff fe34 	bl	b70a6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b743e:	2300      	movs	r3, #0
   b7440:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b7444:	9300      	str	r3, [sp, #0]
   b7446:	464a      	mov	r2, r9
   b7448:	4633      	mov	r3, r6
   b744a:	b2c9      	uxtb	r1, r1
   b744c:	4628      	mov	r0, r5
   b744e:	f7ff fd43 	bl	b6ed8 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b7452:	4680      	mov	r8, r0
   b7454:	b128      	cbz	r0, b7462 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b7456:	4434      	add	r4, r6
        dataLen -= count;
   b7458:	1bbf      	subs	r7, r7, r6
        data += count;
   b745a:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b745c:	e7dd      	b.n	b741a <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b745e:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b7462:	f1ba 0f00 	cmp.w	sl, #0
   b7466:	d002      	beq.n	b746e <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b7468:	6868      	ldr	r0, [r5, #4]
   b746a:	f005 f842 	bl	bc4f2 <_ZN7TwoWire6unlockEv>
}
   b746e:	4640      	mov	r0, r8
   b7470:	b002      	add	sp, #8
   b7472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7476:	2301      	movs	r3, #1
   b7478:	2204      	movs	r2, #4
   b747a:	213f      	movs	r1, #63	; 0x3f
   b747c:	4628      	mov	r0, r5
   b747e:	f7ff fe73 	bl	b7168 <_ZN6AB180514setRegisterBitEhhb>
   b7482:	e7dc      	b.n	b743e <_ZN6AB18058writeRamEjPKhjb+0x40>

000b7484 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b7484:	b530      	push	{r4, r5, lr}
   b7486:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b7488:	680d      	ldr	r5, [r1, #0]
   b748a:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b748e:	9503      	str	r5, [sp, #12]
   b7490:	684d      	ldr	r5, [r1, #4]
   b7492:	9502      	str	r5, [sp, #8]
   b7494:	688d      	ldr	r5, [r1, #8]
   b7496:	9501      	str	r5, [sp, #4]
   b7498:	68c9      	ldr	r1, [r1, #12]
   b749a:	9100      	str	r1, [sp, #0]
   b749c:	3301      	adds	r3, #1
   b749e:	4904      	ldr	r1, [pc, #16]	; (b74b0 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b74a0:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b74a4:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b74a6:	f006 feef 	bl	be288 <_ZN6String6formatEPKcz>
}
   b74aa:	4620      	mov	r0, r4
   b74ac:	b005      	add	sp, #20
   b74ae:	bd30      	pop	{r4, r5, pc}
   b74b0:	000c0bec 	.word	0x000c0bec

000b74b4 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b74b4:	0903      	lsrs	r3, r0, #4
}
   b74b6:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b74b8:	f000 000f 	and.w	r0, r0, #15
}
   b74bc:	fb02 0003 	mla	r0, r2, r3, r0
   b74c0:	4770      	bx	lr

000b74c2 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b74c2:	b538      	push	{r3, r4, r5, lr}
   b74c4:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b74c6:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b74c8:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b74ca:	f7ff fff3 	bl	b74b4 <_ZN6AB180510bcdToValueEh>
   b74ce:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b74d0:	7860      	ldrb	r0, [r4, #1]
   b74d2:	f7ff ffef 	bl	b74b4 <_ZN6AB180510bcdToValueEh>
   b74d6:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b74d8:	78a0      	ldrb	r0, [r4, #2]
   b74da:	f7ff ffeb 	bl	b74b4 <_ZN6AB180510bcdToValueEh>
   b74de:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b74e0:	78e0      	ldrb	r0, [r4, #3]
   b74e2:	f7ff ffe7 	bl	b74b4 <_ZN6AB180510bcdToValueEh>
   b74e6:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b74e8:	7920      	ldrb	r0, [r4, #4]
   b74ea:	f7ff ffe3 	bl	b74b4 <_ZN6AB180510bcdToValueEh>
   b74ee:	3801      	subs	r0, #1
   b74f0:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b74f2:	b92d      	cbnz	r5, b7500 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b74f4:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b74f6:	7828      	ldrb	r0, [r5, #0]
   b74f8:	f7ff ffdc 	bl	b74b4 <_ZN6AB180510bcdToValueEh>
   b74fc:	6188      	str	r0, [r1, #24]
}
   b74fe:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7500:	7960      	ldrb	r0, [r4, #5]
   b7502:	f7ff ffd7 	bl	b74b4 <_ZN6AB180510bcdToValueEh>
   b7506:	3064      	adds	r0, #100	; 0x64
   b7508:	1da5      	adds	r5, r4, #6
   b750a:	6148      	str	r0, [r1, #20]
   b750c:	e7f3      	b.n	b74f6 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7510 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7510:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7512:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7514:	b088      	sub	sp, #32
   b7516:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7518:	461a      	mov	r2, r3
   b751a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b751c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b751e:	f7ff fda4 	bl	b706a <_ZN6AB180510isBitClearEhhb>
   b7522:	b1f0      	cbz	r0, b7562 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b7524:	2308      	movs	r3, #8
   b7526:	2601      	movs	r6, #1
   b7528:	4620      	mov	r0, r4
   b752a:	9600      	str	r6, [sp, #0]
   b752c:	eb0d 0203 	add.w	r2, sp, r3
   b7530:	2100      	movs	r1, #0
   b7532:	f7ff fc2f 	bl	b6d94 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b7536:	4604      	mov	r4, r0
   b7538:	b198      	cbz	r0, b7562 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b753a:	4632      	mov	r2, r6
   b753c:	4629      	mov	r1, r5
   b753e:	f10d 0009 	add.w	r0, sp, #9
   b7542:	f7ff ffbe 	bl	b74c2 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b7546:	a804      	add	r0, sp, #16
   b7548:	f7ff ff9c 	bl	b7484 <_ZN6AB180510tmToStringEPK2tm>
   b754c:	4808      	ldr	r0, [pc, #32]	; (b7570 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b754e:	9a04      	ldr	r2, [sp, #16]
   b7550:	4908      	ldr	r1, [pc, #32]	; (b7574 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b7552:	f7fc fdc3 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b7556:	a804      	add	r0, sp, #16
   b7558:	f006 fd4a 	bl	bdff0 <_ZN6StringD1Ev>
}
   b755c:	4620      	mov	r0, r4
   b755e:	b008      	add	sp, #32
   b7560:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b7562:	2224      	movs	r2, #36	; 0x24
   b7564:	2100      	movs	r1, #0
   b7566:	4628      	mov	r0, r5
   b7568:	f008 f92e 	bl	bf7c8 <memset>
   b756c:	2400      	movs	r4, #0
   b756e:	e7f5      	b.n	b755c <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b7570:	2003e438 	.word	0x2003e438
   b7574:	000c0c0a 	.word	0x000c0c0a

000b7578 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b7578:	b530      	push	{r4, r5, lr}
   b757a:	b08b      	sub	sp, #44	; 0x2c
   b757c:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b757e:	a901      	add	r1, sp, #4
   b7580:	f7ff ffc6 	bl	b7510 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b7584:	4604      	mov	r4, r0
   b7586:	b120      	cbz	r0, b7592 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b7588:	a801      	add	r0, sp, #4
   b758a:	f004 fa3f 	bl	bba0c <mktime>
   b758e:	e9c5 0100 	strd	r0, r1, [r5]
}
   b7592:	4620      	mov	r0, r4
   b7594:	b00b      	add	sp, #44	; 0x2c
   b7596:	bd30      	pop	{r4, r5, pc}

000b7598 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b7598:	230a      	movs	r3, #10
   b759a:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b759e:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b75a2:	fb91 f2f3 	sdiv	r2, r1, r3
   b75a6:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b75aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b75ae:	b2c0      	uxtb	r0, r0
   b75b0:	4770      	bx	lr

000b75b2 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b75b2:	b570      	push	{r4, r5, r6, lr}
   b75b4:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b75b6:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b75b8:	460c      	mov	r4, r1
   b75ba:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b75bc:	f7ff ffec 	bl	b7598 <_ZN6AB180510valueToBcdEi>
   b75c0:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b75c2:	6868      	ldr	r0, [r5, #4]
   b75c4:	f7ff ffe8 	bl	b7598 <_ZN6AB180510valueToBcdEi>
   b75c8:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b75ca:	68a8      	ldr	r0, [r5, #8]
   b75cc:	f7ff ffe4 	bl	b7598 <_ZN6AB180510valueToBcdEi>
   b75d0:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b75d2:	68e8      	ldr	r0, [r5, #12]
   b75d4:	f7ff ffe0 	bl	b7598 <_ZN6AB180510valueToBcdEi>
   b75d8:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b75da:	6928      	ldr	r0, [r5, #16]
   b75dc:	3001      	adds	r0, #1
   b75de:	f7ff ffdb 	bl	b7598 <_ZN6AB180510valueToBcdEi>
   b75e2:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b75e4:	b92e      	cbnz	r6, b75f2 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b75e6:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b75e8:	69a8      	ldr	r0, [r5, #24]
   b75ea:	f7ff ffd5 	bl	b7598 <_ZN6AB180510valueToBcdEi>
   b75ee:	7030      	strb	r0, [r6, #0]
}
   b75f0:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b75f2:	696a      	ldr	r2, [r5, #20]
   b75f4:	2364      	movs	r3, #100	; 0x64
   b75f6:	fb92 f0f3 	sdiv	r0, r2, r3
   b75fa:	fb03 2010 	mls	r0, r3, r0, r2
   b75fe:	f7ff ffcb 	bl	b7598 <_ZN6AB180510valueToBcdEi>
   b7602:	1da6      	adds	r6, r4, #6
   b7604:	7160      	strb	r0, [r4, #5]
   b7606:	e7ef      	b.n	b75e8 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b7608 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7608:	b5f0      	push	{r4, r5, r6, r7, lr}
   b760a:	b087      	sub	sp, #28
   b760c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b760e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7610:	4616      	mov	r6, r2
   b7612:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7614:	f7ff ff36 	bl	b7484 <_ZN6AB180510tmToStringEPK2tm>
   b7618:	481e      	ldr	r0, [pc, #120]	; (b7694 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b761a:	9a02      	ldr	r2, [sp, #8]
   b761c:	491e      	ldr	r1, [pc, #120]	; (b7698 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b761e:	f7fc fd5d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b7622:	a802      	add	r0, sp, #8
   b7624:	f006 fce4 	bl	bdff0 <_ZN6StringD1Ev>
    if (lock) {
   b7628:	b116      	cbz	r6, b7630 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b762a:	6868      	ldr	r0, [r5, #4]
   b762c:	f004 ff58 	bl	bc4e0 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7630:	4620      	mov	r0, r4
   b7632:	2201      	movs	r2, #1
   b7634:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b7638:	2700      	movs	r7, #0
   b763a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b763e:	f7ff ffb8 	bl	b75b2 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b7642:	2301      	movs	r3, #1
   b7644:	461a      	mov	r2, r3
   b7646:	2110      	movs	r1, #16
   b7648:	4628      	mov	r0, r5
   b764a:	f7ff fd8d 	bl	b7168 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b764e:	4604      	mov	r4, r0
   b7650:	b1e8      	cbz	r0, b768e <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b7652:	2308      	movs	r3, #8
   b7654:	9700      	str	r7, [sp, #0]
   b7656:	eb0d 0203 	add.w	r2, sp, r3
   b765a:	4639      	mov	r1, r7
   b765c:	4628      	mov	r0, r5
   b765e:	f7ff fc3b 	bl	b6ed8 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b7662:	4604      	mov	r4, r0
   b7664:	b160      	cbz	r0, b7680 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b7666:	2301      	movs	r3, #1
   b7668:	461a      	mov	r2, r3
   b766a:	2110      	movs	r1, #16
   b766c:	4628      	mov	r0, r5
   b766e:	f7ff fd1a 	bl	b70a6 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b7672:	b116      	cbz	r6, b767a <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b7674:	6868      	ldr	r0, [r5, #4]
   b7676:	f004 ff3c 	bl	bc4f2 <_ZN7TwoWire6unlockEv>
}
   b767a:	4620      	mov	r0, r4
   b767c:	b007      	add	sp, #28
   b767e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b7680:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b7684:	4905      	ldr	r1, [pc, #20]	; (b769c <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b7686:	4803      	ldr	r0, [pc, #12]	; (b7694 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b7688:	f7ff fb54 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
   b768c:	e7f1      	b.n	b7672 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b768e:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b7692:	e7f7      	b.n	b7684 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b7694:	2003e438 	.word	0x2003e438
   b7698:	000c0c18 	.word	0x000c0c18
   b769c:	000c0c26 	.word	0x000c0c26

000b76a0 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b76a0:	b513      	push	{r0, r1, r4, lr}
   b76a2:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b76a4:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b76a6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b76aa:	f008 f83f 	bl	bf72c <gmtime>
    return setRtcFromTm(tm, lock);
   b76ae:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b76b2:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b76b4:	4620      	mov	r0, r4
   b76b6:	f7ff ffa7 	bl	b7608 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b76ba:	b002      	add	sp, #8
   b76bc:	bd10      	pop	{r4, pc}
	...

000b76c0 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b76c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b76c2:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b76c4:	b089      	sub	sp, #36	; 0x24
   b76c6:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b76c8:	bb75      	cbnz	r5, b7728 <_ZN6AB18054loopEv+0x68>
   b76ca:	f007 f81b 	bl	be704 <_ZN9TimeClass7isValidEv>
   b76ce:	b358      	cbz	r0, b7728 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b76d0:	2600      	movs	r6, #0
   b76d2:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b76d4:	a904      	add	r1, sp, #16
   b76d6:	4628      	mov	r0, r5
        tm = 0;
   b76d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b76dc:	f004 f89e 	bl	bb81c <spark_sync_time_last>
   b76e0:	b310      	cbz	r0, b7728 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b76e2:	2501      	movs	r5, #1
   b76e4:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b76e6:	f007 f82a 	bl	be73e <_ZN9TimeClass3nowEv>
   b76ea:	17c3      	asrs	r3, r0, #31
   b76ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b76f0:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b76f2:	9500      	str	r5, [sp, #0]
   b76f4:	4620      	mov	r0, r4
   b76f6:	f7ff ffd3 	bl	b76a0 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b76fa:	a902      	add	r1, sp, #8
   b76fc:	4620      	mov	r0, r4
        time = 0;
   b76fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b7702:	f7ff ff39 	bl	b7578 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b7706:	4b13      	ldr	r3, [pc, #76]	; (b7754 <_ZN6AB18054loopEv+0x94>)
   b7708:	4913      	ldr	r1, [pc, #76]	; (b7758 <_ZN6AB18054loopEv+0x98>)
   b770a:	681b      	ldr	r3, [r3, #0]
   b770c:	9300      	str	r3, [sp, #0]
   b770e:	a804      	add	r0, sp, #16
   b7710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7714:	f006 ffb4 	bl	be680 <_ZN9TimeClass6formatExPKc>
   b7718:	4810      	ldr	r0, [pc, #64]	; (b775c <_ZN6AB18054loopEv+0x9c>)
   b771a:	9a04      	ldr	r2, [sp, #16]
   b771c:	4910      	ldr	r1, [pc, #64]	; (b7760 <_ZN6AB18054loopEv+0xa0>)
   b771e:	f7fc fcdd 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b7722:	a804      	add	r0, sp, #16
   b7724:	f006 fc64 	bl	bdff0 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b7728:	6963      	ldr	r3, [r4, #20]
   b772a:	b18b      	cbz	r3, b7750 <_ZN6AB18054loopEv+0x90>
   b772c:	f003 fd5a 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b7730:	6923      	ldr	r3, [r4, #16]
   b7732:	1ac0      	subs	r0, r0, r3
   b7734:	6963      	ldr	r3, [r4, #20]
   b7736:	4298      	cmp	r0, r3
   b7738:	d30a      	bcc.n	b7750 <_ZN6AB18054loopEv+0x90>
   b773a:	f003 fd53 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b773e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b7742:	6120      	str	r0, [r4, #16]
            setWDT();
   b7744:	4620      	mov	r0, r4
}
   b7746:	b009      	add	sp, #36	; 0x24
   b7748:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b774c:	f7ff bc0c 	b.w	b6f68 <_ZN6AB18056setWDTEi>
}
   b7750:	b009      	add	sp, #36	; 0x24
   b7752:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7754:	2003deb8 	.word	0x2003deb8
   b7758:	2003e6ac 	.word	0x2003e6ac
   b775c:	2003e438 	.word	0x2003e438
   b7760:	000c0c41 	.word	0x000c0c41

000b7764 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b7764:	b530      	push	{r4, r5, lr}
   b7766:	4604      	mov	r4, r0
   b7768:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b776a:	b111      	cbz	r1, b7772 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b776c:	6840      	ldr	r0, [r0, #4]
   b776e:	f004 fe65 	bl	bc43c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b7772:	4620      	mov	r0, r4
   b7774:	f7ff fb64 	bl	b6e40 <_ZN6AB180510detectChipEv>
   b7778:	ad06      	add	r5, sp, #24
   b777a:	2800      	cmp	r0, #0
   b777c:	d037      	beq.n	b77ee <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b777e:	4620      	mov	r0, r4
   b7780:	f7ff fc9c 	bl	b70bc <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b7784:	2301      	movs	r3, #1
   b7786:	461a      	mov	r2, r3
   b7788:	2110      	movs	r1, #16
   b778a:	4620      	mov	r0, r4
   b778c:	f7ff fc6d 	bl	b706a <_ZN6AB180510isBitClearEhhb>
   b7790:	b1d8      	cbz	r0, b77ca <_ZN6AB18055setupEb+0x66>
   b7792:	f006 ffb7 	bl	be704 <_ZN9TimeClass7isValidEv>
   b7796:	b9c0      	cbnz	r0, b77ca <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b7798:	a902      	add	r1, sp, #8
   b779a:	4620      	mov	r0, r4
   b779c:	f7ff feec 	bl	b7578 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b77a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b77a4:	f006 feb2 	bl	be50c <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b77a8:	4b13      	ldr	r3, [pc, #76]	; (b77f8 <_ZN6AB18055setupEb+0x94>)
   b77aa:	4914      	ldr	r1, [pc, #80]	; (b77fc <_ZN6AB18055setupEb+0x98>)
   b77ac:	681b      	ldr	r3, [r3, #0]
   b77ae:	9300      	str	r3, [sp, #0]
   b77b0:	4628      	mov	r0, r5
   b77b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b77b6:	f006 ff63 	bl	be680 <_ZN9TimeClass6formatExPKc>
   b77ba:	4811      	ldr	r0, [pc, #68]	; (b7800 <_ZN6AB18055setupEb+0x9c>)
   b77bc:	9a06      	ldr	r2, [sp, #24]
   b77be:	4911      	ldr	r1, [pc, #68]	; (b7804 <_ZN6AB18055setupEb+0xa0>)
   b77c0:	f7fc fc8c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b77c4:	4628      	mov	r0, r5
   b77c6:	f006 fc13 	bl	bdff0 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b77ca:	4b0f      	ldr	r3, [pc, #60]	; (b7808 <_ZN6AB18055setupEb+0xa4>)
   b77cc:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b77ce:	4b0f      	ldr	r3, [pc, #60]	; (b780c <_ZN6AB18055setupEb+0xa8>)
   b77d0:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b77d2:	4b0f      	ldr	r3, [pc, #60]	; (b7810 <_ZN6AB18055setupEb+0xac>)
   b77d4:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b77d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b77da:	2300      	movs	r3, #0
   b77dc:	a802      	add	r0, sp, #8
   b77de:	9500      	str	r5, [sp, #0]
   b77e0:	f7fd fc4c 	bl	b507c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b77e4:	4628      	mov	r0, r5
   b77e6:	f7fd fad4 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
}
   b77ea:	b00b      	add	sp, #44	; 0x2c
   b77ec:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b77ee:	4909      	ldr	r1, [pc, #36]	; (b7814 <_ZN6AB18055setupEb+0xb0>)
   b77f0:	4803      	ldr	r0, [pc, #12]	; (b7800 <_ZN6AB18055setupEb+0x9c>)
   b77f2:	f7ff fa9f 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
   b77f6:	e7e8      	b.n	b77ca <_ZN6AB18055setupEb+0x66>
   b77f8:	2003deb8 	.word	0x2003deb8
   b77fc:	2003e6ac 	.word	0x2003e6ac
   b7800:	2003e438 	.word	0x2003e438
   b7804:	000c0c57 	.word	0x000c0c57
   b7808:	000b6fed 	.word	0x000b6fed
   b780c:	000b4d6f 	.word	0x000b4d6f
   b7810:	000b4d5b 	.word	0x000b4d5b
   b7814:	000c0c74 	.word	0x000c0c74

000b7818 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b7818:	4b01      	ldr	r3, [pc, #4]	; (b7820 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b781a:	4a02      	ldr	r2, [pc, #8]	; (b7824 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b781c:	601a      	str	r2, [r3, #0]
}
   b781e:	4770      	bx	lr
   b7820:	2003e438 	.word	0x2003e438
   b7824:	000c0c8c 	.word	0x000c0c8c

000b7828 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b7828:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b782a:	2301      	movs	r3, #1
   b782c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b782e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b7830:	4604      	mov	r4, r0
        if (th->func) {
   b7832:	b143      	cbz	r3, b7846 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b7834:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7836:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b7838:	2301      	movs	r3, #1
   b783a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b783c:	2000      	movs	r0, #0
    }
   b783e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b7842:	f003 bc9f 	b.w	bb184 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7846:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b7848:	2800      	cmp	r0, #0
   b784a:	d0f5      	beq.n	b7838 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b784c:	6883      	ldr	r3, [r0, #8]
   b784e:	b90b      	cbnz	r3, b7854 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b7850:	f007 fa88 	bl	bed64 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7854:	68c3      	ldr	r3, [r0, #12]
   b7856:	e7ee      	b.n	b7836 <_ZN6Thread3runEPv+0xe>

000b7858 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b7858:	2a01      	cmp	r2, #1
   b785a:	d102      	bne.n	b7862 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b785c:	6001      	str	r1, [r0, #0]
      }
   b785e:	2000      	movs	r0, #0
   b7860:	4770      	bx	lr
	  switch (__op)
   b7862:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7864:	bf04      	itt	eq
   b7866:	680b      	ldreq	r3, [r1, #0]
   b7868:	6003      	streq	r3, [r0, #0]
	      break;
   b786a:	e7f8      	b.n	b785e <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b786c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b786c:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b786e:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b7870:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b7872:	b135      	cbz	r5, b7882 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b7874:	4628      	mov	r0, r5
   b7876:	f7fd fa8c 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b787a:	2110      	movs	r1, #16
   b787c:	4628      	mov	r0, r5
   b787e:	f7fc fc0e 	bl	b409e <_ZdlPvj>
   b7882:	4620      	mov	r0, r4
   b7884:	2114      	movs	r1, #20
      }
   b7886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b788a:	f7fc bc08 	b.w	b409e <_ZdlPvj>

000b788e <_ZN6Thread7disposeEv>:
    void dispose()
   b788e:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7890:	6803      	ldr	r3, [r0, #0]
   b7892:	4604      	mov	r4, r0
        if (!isValid())
   b7894:	b1ab      	cbz	r3, b78c2 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b7896:	6858      	ldr	r0, [r3, #4]
   b7898:	f003 fc24 	bl	bb0e4 <os_thread_is_current>
   b789c:	b988      	cbnz	r0, b78c2 <_ZN6Thread7disposeEv+0x34>
   b789e:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b78a0:	7c5a      	ldrb	r2, [r3, #17]
   b78a2:	b912      	cbnz	r2, b78aa <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b78a4:	6858      	ldr	r0, [r3, #4]
   b78a6:	f003 fc25 	bl	bb0f4 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b78aa:	6823      	ldr	r3, [r4, #0]
   b78ac:	6858      	ldr	r0, [r3, #4]
   b78ae:	f003 fc29 	bl	bb104 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b78b2:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b78b4:	2300      	movs	r3, #0
   b78b6:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b78b8:	b118      	cbz	r0, b78c2 <_ZN6Thread7disposeEv+0x34>
    }
   b78ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b78be:	f7ff bfd5 	b.w	b786c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b78c2:	bd10      	pop	{r4, pc}

000b78c4 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b78c4:	4a05      	ldr	r2, [pc, #20]	; (b78dc <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b78c6:	6002      	str	r2, [r0, #0]
   b78c8:	2200      	movs	r2, #0
   b78ca:	6042      	str	r2, [r0, #4]
   b78cc:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b78ce:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b78d2:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b78d6:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b78da:	4770      	bx	lr
   b78dc:	000c0ccc 	.word	0x000c0ccc

000b78e0 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b78e0:	b510      	push	{r4, lr}
    if (!_instance) {
   b78e2:	4c07      	ldr	r4, [pc, #28]	; (b7900 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b78e4:	6823      	ldr	r3, [r4, #0]
   b78e6:	b943      	cbnz	r3, b78fa <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b78e8:	f240 4064 	movw	r0, #1124	; 0x464
   b78ec:	f7fc fbd3 	bl	b4096 <_Znwj>
   b78f0:	4603      	mov	r3, r0
   b78f2:	b108      	cbz	r0, b78f8 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b78f4:	f7ff ffe6 	bl	b78c4 <_ZN19BackgroundPublishRKC1Ev>
   b78f8:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b78fa:	6820      	ldr	r0, [r4, #0]
   b78fc:	bd10      	pop	{r4, pc}
   b78fe:	bf00      	nop
   b7900:	2003e440 	.word	0x2003e440

000b7904 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b7904:	b538      	push	{r3, r4, r5, lr}
   b7906:	4604      	mov	r4, r0
    if(thread)
   b7908:	6840      	ldr	r0, [r0, #4]
   b790a:	b190      	cbz	r0, b7932 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b790c:	2302      	movs	r3, #2
   b790e:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b7910:	f7ff ffbd 	bl	b788e <_ZN6Thread7disposeEv>
        delete thread;
   b7914:	6865      	ldr	r5, [r4, #4]
   b7916:	b155      	cbz	r5, b792e <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b7918:	4628      	mov	r0, r5
   b791a:	f7ff ffb8 	bl	b788e <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b791e:	6828      	ldr	r0, [r5, #0]
   b7920:	b108      	cbz	r0, b7926 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b7922:	f7ff ffa3 	bl	b786c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7926:	2104      	movs	r1, #4
   b7928:	4628      	mov	r0, r5
   b792a:	f7fc fbb8 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b792e:	2300      	movs	r3, #0
   b7930:	6063      	str	r3, [r4, #4]
    }
}
   b7932:	bd38      	pop	{r3, r4, r5, pc}

000b7934 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7934:	b510      	push	{r4, lr}
   b7936:	4b05      	ldr	r3, [pc, #20]	; (b794c <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b7938:	6003      	str	r3, [r0, #0]
   b793a:	4604      	mov	r4, r0
    stop();
   b793c:	f7ff ffe2 	bl	b7904 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b7940:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7944:	f7fd fa25 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
}
   b7948:	4620      	mov	r0, r4
   b794a:	bd10      	pop	{r4, pc}
   b794c:	000c0ccc 	.word	0x000c0ccc

000b7950 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7950:	b510      	push	{r4, lr}
   b7952:	4604      	mov	r4, r0
}
   b7954:	f7ff ffee 	bl	b7934 <_ZN19BackgroundPublishRKD1Ev>
   b7958:	4620      	mov	r0, r4
   b795a:	f240 4164 	movw	r1, #1124	; 0x464
   b795e:	f7fc fb9e 	bl	b409e <_ZdlPvj>
   b7962:	4620      	mov	r0, r4
   b7964:	bd10      	pop	{r4, pc}

000b7966 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b7966:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7968:	4604      	mov	r4, r0
   b796a:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b796c:	f100 060d 	add.w	r6, r0, #13
   b7970:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b7974:	7b23      	ldrb	r3, [r4, #12]
   b7976:	b91b      	cbnz	r3, b7980 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b7978:	2001      	movs	r0, #1
   b797a:	f004 f84f 	bl	bba1c <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b797e:	e7f9      	b.n	b7974 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b7980:	7b23      	ldrb	r3, [r4, #12]
   b7982:	2b02      	cmp	r3, #2
   b7984:	d064      	beq.n	b7a50 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b7986:	68a0      	ldr	r0, [r4, #8]
   b7988:	f003 fbcc 	bl	bb124 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b798c:	68a0      	ldr	r0, [r4, #8]
   b798e:	f003 fbd1 	bl	bb134 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b7992:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b7996:	f88d 3000 	strb.w	r3, [sp]
   b799a:	463a      	mov	r2, r7
   b799c:	233c      	movs	r3, #60	; 0x3c
   b799e:	4631      	mov	r1, r6
   b79a0:	a806      	add	r0, sp, #24
   b79a2:	f004 fb09 	bl	bbfb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b79a6:	9d06      	ldr	r5, [sp, #24]
   b79a8:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b79aa:	b933      	cbnz	r3, b79ba <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b79ac:	7b23      	ldrb	r3, [r4, #12]
   b79ae:	2b02      	cmp	r3, #2
   b79b0:	d003      	beq.n	b79ba <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b79b2:	2001      	movs	r0, #1
   b79b4:	f004 f832 	bl	bba1c <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b79b8:	e7f5      	b.n	b79a6 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b79ba:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b79be:	b31b      	cbz	r3, b7a08 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b79c0:	2000      	movs	r0, #0
   b79c2:	f003 fe91 	bl	bb6e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b79c6:	b120      	cbz	r0, b79d2 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b79c8:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b79ca:	b913      	cbnz	r3, b79d2 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b79cc:	f003 feee 	bl	bb7ac <spark_process>
    }
   b79d0:	e7fa      	b.n	b79c8 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b79d2:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b79d4:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b79d8:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b79da:	1e59      	subs	r1, r3, #1
   b79dc:	424b      	negs	r3, r1
   b79de:	414b      	adcs	r3, r1
   b79e0:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b79e4:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b79e8:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b79ec:	b90b      	cbnz	r3, b79f2 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b79ee:	f007 f9b9 	bl	bed64 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b79f2:	ab05      	add	r3, sp, #20
   b79f4:	9300      	str	r3, [sp, #0]
   b79f6:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b79fa:	ab04      	add	r3, sp, #16
   b79fc:	aa03      	add	r2, sp, #12
   b79fe:	f10d 010b 	add.w	r1, sp, #11
   b7a02:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7a06:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b7a08:	68a0      	ldr	r0, [r4, #8]
   b7a0a:	f003 fb8b 	bl	bb124 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b7a0e:	7b23      	ldrb	r3, [r4, #12]
   b7a10:	2b02      	cmp	r3, #2
   b7a12:	d017      	beq.n	b7a44 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b7a14:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b7a18:	2500      	movs	r5, #0
   b7a1a:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b7a1e:	b143      	cbz	r3, b7a32 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b7a20:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7a24:	2203      	movs	r2, #3
   b7a26:	4608      	mov	r0, r1
   b7a28:	4798      	blx	r3
	    _M_manager = nullptr;
   b7a2a:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b7a2e:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b7a32:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b7a34:	68a0      	ldr	r0, [r4, #8]
   b7a36:	7323      	strb	r3, [r4, #12]
   b7a38:	f003 fb7c 	bl	bb134 <os_mutex_unlock>
   b7a3c:	a807      	add	r0, sp, #28
   b7a3e:	f7fe fdcf 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a42:	e797      	b.n	b7974 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b7a44:	68a0      	ldr	r0, [r4, #8]
   b7a46:	f003 fb75 	bl	bb134 <os_mutex_unlock>
   b7a4a:	a807      	add	r0, sp, #28
   b7a4c:	f7fe fdc8 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b7a50:	b009      	add	sp, #36	; 0x24
   b7a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a54 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b7a54:	6800      	ldr	r0, [r0, #0]
   b7a56:	f7ff bf86 	b.w	b7966 <_ZN19BackgroundPublishRK8thread_fEv>

000b7a5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7a5a:	b513      	push	{r0, r1, r4, lr}
   b7a5c:	460b      	mov	r3, r1
   b7a5e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a60:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7a64:	466c      	mov	r4, sp
   b7a66:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7a6a:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7a6e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7a72:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7a76:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7a7a:	b002      	add	sp, #8
   b7a7c:	bd10      	pop	{r4, pc}
	...

000b7a80 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b7a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7a84:	4606      	mov	r6, r0
   b7a86:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b7a88:	2014      	movs	r0, #20
   b7a8a:	4926      	ldr	r1, [pc, #152]	; (b7b24 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b7a8c:	4617      	mov	r7, r2
   b7a8e:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b7a90:	f007 f95e 	bl	bed50 <_ZnwjRKSt9nothrow_t>
   b7a94:	4604      	mov	r4, r0
   b7a96:	b130      	cbz	r0, b7aa6 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b7a98:	2000      	movs	r0, #0
            exited(false) {
   b7a9a:	e9c4 0000 	strd	r0, r0, [r4]
   b7a9e:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b7aa2:	7420      	strb	r0, [r4, #16]
   b7aa4:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7aa6:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b7aa8:	2c00      	cmp	r4, #0
   b7aaa:	d031      	beq.n	b7b10 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b7aac:	491d      	ldr	r1, [pc, #116]	; (b7b24 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b7aae:	2010      	movs	r0, #16
   b7ab0:	f007 f94e 	bl	bed50 <_ZnwjRKSt9nothrow_t>
   b7ab4:	4605      	mov	r5, r0
   b7ab6:	b168      	cbz	r0, b7ad4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b7ab8:	2300      	movs	r3, #0
   b7aba:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7abc:	4601      	mov	r1, r0
   b7abe:	4638      	mov	r0, r7
   b7ac0:	f7ff ffcb 	bl	b7a5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ac4:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7ac6:	68aa      	ldr	r2, [r5, #8]
   b7ac8:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7aca:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7acc:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ace:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ad0:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7ad2:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b7ad4:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b7ad6:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b7ad8:	b137      	cbz	r7, b7ae8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b7ada:	4638      	mov	r0, r7
   b7adc:	f7fd f959 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7ae0:	2110      	movs	r1, #16
   b7ae2:	4638      	mov	r0, r7
   b7ae4:	f7fc fadb 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7ae8:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b7aea:	6803      	ldr	r3, [r0, #0]
   b7aec:	b183      	cbz	r3, b7b10 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b7aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7af0:	464a      	mov	r2, r9
   b7af2:	e9cd 0300 	strd	r0, r3, [sp]
   b7af6:	4641      	mov	r1, r8
   b7af8:	4b0b      	ldr	r3, [pc, #44]	; (b7b28 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b7afa:	3004      	adds	r0, #4
   b7afc:	f003 faea 	bl	bb0d4 <os_thread_create>
   b7b00:	b930      	cbnz	r0, b7b10 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b7b02:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b7b04:	7c1b      	ldrb	r3, [r3, #16]
   b7b06:	b94b      	cbnz	r3, b7b1c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b7b08:	2001      	movs	r0, #1
   b7b0a:	f003 fb5b 	bl	bb1c4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b7b0e:	e7f8      	b.n	b7b02 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b7b10:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b7b12:	2300      	movs	r3, #0
   b7b14:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b7b16:	b108      	cbz	r0, b7b1c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b7b18:	f7ff fea8 	bl	b786c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b7b1c:	4630      	mov	r0, r6
   b7b1e:	b003      	add	sp, #12
   b7b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7b24:	000c1700 	.word	0x000c1700
   b7b28:	000b7829 	.word	0x000b7829

000b7b2c <_ZN19BackgroundPublishRK5startEv>:
{
   b7b2c:	b530      	push	{r4, r5, lr}
    if(!thread)
   b7b2e:	6843      	ldr	r3, [r0, #4]
{
   b7b30:	b087      	sub	sp, #28
   b7b32:	4604      	mov	r4, r0
    if(!thread)
   b7b34:	b9c3      	cbnz	r3, b7b68 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b7b36:	3008      	adds	r0, #8
   b7b38:	f003 faec 	bl	bb114 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b7b3c:	4b0b      	ldr	r3, [pc, #44]	; (b7b6c <_ZN19BackgroundPublishRK5startEv+0x40>)
   b7b3e:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b7b40:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b7b42:	4b0b      	ldr	r3, [pc, #44]	; (b7b70 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7b44:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7b46:	9304      	str	r3, [sp, #16]
   b7b48:	f7fc faa5 	bl	b4096 <_Znwj>
   b7b4c:	4605      	mov	r5, r0
   b7b4e:	b138      	cbz	r0, b7b60 <_ZN19BackgroundPublishRK5startEv+0x34>
   b7b50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7b54:	9300      	str	r3, [sp, #0]
   b7b56:	4907      	ldr	r1, [pc, #28]	; (b7b74 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b7b58:	2302      	movs	r3, #2
   b7b5a:	aa02      	add	r2, sp, #8
   b7b5c:	f7ff ff90 	bl	b7a80 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b7b60:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b7b62:	a802      	add	r0, sp, #8
   b7b64:	f7fd f915 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
}
   b7b68:	b007      	add	sp, #28
   b7b6a:	bd30      	pop	{r4, r5, pc}
   b7b6c:	000b7a55 	.word	0x000b7a55
   b7b70:	000b7859 	.word	0x000b7859
   b7b74:	000c0cb0 	.word	0x000c0cb0

000b7b78 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b7b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7b7c:	4604      	mov	r4, r0
   b7b7e:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b7b80:	6880      	ldr	r0, [r0, #8]
   b7b82:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7b84:	4698      	mov	r8, r3
   b7b86:	460d      	mov	r5, r1
   b7b88:	4616      	mov	r6, r2
   b7b8a:	f003 facb 	bl	bb124 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b7b8e:	6863      	ldr	r3, [r4, #4]
   b7b90:	b11b      	cbz	r3, b7b9a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b7b92:	7b23      	ldrb	r3, [r4, #12]
   b7b94:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b7b98:	b133      	cbz	r3, b7ba8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b7b9a:	68a0      	ldr	r0, [r4, #8]
   b7b9c:	f003 faca 	bl	bb134 <os_mutex_unlock>
    {
        return false;
   b7ba0:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b7ba2:	b005      	add	sp, #20
   b7ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7ba8:	68a0      	ldr	r0, [r4, #8]
   b7baa:	f003 fac3 	bl	bb134 <os_mutex_unlock>
    if(!name)
   b7bae:	2d00      	cmp	r5, #0
   b7bb0:	d03d      	beq.n	b7c2e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b7bb2:	2240      	movs	r2, #64	; 0x40
   b7bb4:	4629      	mov	r1, r5
   b7bb6:	f104 000d 	add.w	r0, r4, #13
   b7bba:	f007 fedc 	bl	bf976 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b7bbe:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b7bc2:	b38e      	cbz	r6, b7c28 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7bc4:	f240 4201 	movw	r2, #1025	; 0x401
   b7bc8:	4631      	mov	r1, r6
   b7bca:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b7bce:	f007 fed2 	bl	bf976 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b7bd2:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b7bd6:	2300      	movs	r3, #0
   b7bd8:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b7bda:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b7bdc:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b7be0:	b13b      	cbz	r3, b7bf2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7be2:	2202      	movs	r2, #2
   b7be4:	4639      	mov	r1, r7
   b7be6:	4668      	mov	r0, sp
   b7be8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7bea:	68fb      	ldr	r3, [r7, #12]
   b7bec:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b7bee:	68bb      	ldr	r3, [r7, #8]
   b7bf0:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7bf2:	4629      	mov	r1, r5
   b7bf4:	4668      	mov	r0, sp
   b7bf6:	f7ff ff30 	bl	b7a5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7bfa:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7bfc:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b7c00:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7c04:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7c06:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7c08:	4668      	mov	r0, sp
   b7c0a:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b7c0e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b7c12:	9203      	str	r2, [sp, #12]
   b7c14:	f7fd f8bd 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b7c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7c1a:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7c1e:	2001      	movs	r0, #1
    event_flags = flags;
   b7c20:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7c24:	7320      	strb	r0, [r4, #12]
    return true;
   b7c26:	e7bc      	b.n	b7ba2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b7c28:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b7c2c:	e7d3      	b.n	b7bd6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b7c2e:	4628      	mov	r0, r5
   b7c30:	e7b7      	b.n	b7ba2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000b7c32 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b7c32:	4770      	bx	lr

000b7c34 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b7c34:	4770      	bx	lr

000b7c36 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b7c36:	b510      	push	{r4, lr}
}
   b7c38:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b7c3a:	4604      	mov	r4, r0
}
   b7c3c:	f7fc fa2f 	bl	b409e <_ZdlPvj>
   b7c40:	4620      	mov	r0, r4
   b7c42:	bd10      	pop	{r4, pc}

000b7c44 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b7c44:	b510      	push	{r4, lr}
}
   b7c46:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b7c48:	4604      	mov	r4, r0
}
   b7c4a:	f7fc fa28 	bl	b409e <_ZdlPvj>
   b7c4e:	4620      	mov	r0, r4
   b7c50:	bd10      	pop	{r4, pc}
	...

000b7c54 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b7c54:	b510      	push	{r4, lr}
   b7c56:	4b05      	ldr	r3, [pc, #20]	; (b7c6c <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b7c58:	4604      	mov	r4, r0
   b7c5a:	f840 3b1c 	str.w	r3, [r0], #28
   b7c5e:	f006 f9c7 	bl	bdff0 <_ZN6StringD1Ev>
   b7c62:	1d20      	adds	r0, r4, #4
   b7c64:	f006 f9c4 	bl	bdff0 <_ZN6StringD1Ev>
}
   b7c68:	4620      	mov	r0, r4
   b7c6a:	bd10      	pop	{r4, pc}
   b7c6c:	000c0d40 	.word	0x000c0d40

000b7c70 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b7c70:	b510      	push	{r4, lr}
   b7c72:	4604      	mov	r4, r0
}
   b7c74:	f7ff ffee 	bl	b7c54 <_ZN22LocalTimePosixTimezoneD1Ev>
   b7c78:	4620      	mov	r0, r4
   b7c7a:	2158      	movs	r1, #88	; 0x58
   b7c7c:	f7fc fa0f 	bl	b409e <_ZdlPvj>
   b7c80:	4620      	mov	r0, r4
   b7c82:	bd10      	pop	{r4, pc}

000b7c84 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b7c84:	b510      	push	{r4, lr}
   b7c86:	4b04      	ldr	r3, [pc, #16]	; (b7c98 <_ZN9LocalTimeD1Ev+0x14>)
   b7c88:	4604      	mov	r4, r0
   b7c8a:	f840 3b04 	str.w	r3, [r0], #4
   b7c8e:	f7ff ffe1 	bl	b7c54 <_ZN22LocalTimePosixTimezoneD1Ev>
   b7c92:	4620      	mov	r0, r4
   b7c94:	bd10      	pop	{r4, pc}
   b7c96:	bf00      	nop
   b7c98:	000c0d10 	.word	0x000c0d10

000b7c9c <_ZN9LocalTimeD0Ev>:
   b7c9c:	b510      	push	{r4, lr}
   b7c9e:	4604      	mov	r4, r0
   b7ca0:	f7ff fff0 	bl	b7c84 <_ZN9LocalTimeD1Ev>
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	2160      	movs	r1, #96	; 0x60
   b7ca8:	f7fc f9f9 	bl	b409e <_ZdlPvj>
   b7cac:	4620      	mov	r0, r4
   b7cae:	bd10      	pop	{r4, pc}

000b7cb0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b7cb0:	f020 0302 	bic.w	r3, r0, #2
   b7cb4:	2b01      	cmp	r3, #1
   b7cb6:	d003      	beq.n	b7cc0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b7cb8:	1f43      	subs	r3, r0, #5
   b7cba:	4258      	negs	r0, r3
   b7cbc:	4158      	adcs	r0, r3
   b7cbe:	4770      	bx	lr
   b7cc0:	4618      	mov	r0, r3
   b7cc2:	4770      	bx	lr

000b7cc4 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b7cc4:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b7cc8:	7103      	strb	r3, [r0, #4]
   b7cca:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b7cce:	7143      	strb	r3, [r0, #5]
   b7cd0:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b7cd4:	7183      	strb	r3, [r0, #6]
   b7cd6:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b7cda:	71c3      	strb	r3, [r0, #7]
   b7cdc:	4770      	bx	lr

000b7cde <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b7cde:	b538      	push	{r3, r4, r5, lr}
   b7ce0:	4604      	mov	r4, r0
   b7ce2:	460d      	mov	r5, r1
   b7ce4:	3004      	adds	r0, #4
   b7ce6:	3104      	adds	r1, #4
   b7ce8:	f006 fa09 	bl	be0fe <_ZN6StringaSERKS_>
   b7cec:	f105 0114 	add.w	r1, r5, #20
   b7cf0:	f104 0014 	add.w	r0, r4, #20
   b7cf4:	f7ff ffe6 	bl	b7cc4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b7cf8:	f105 011c 	add.w	r1, r5, #28
   b7cfc:	f104 001c 	add.w	r0, r4, #28
   b7d00:	f006 f9fd 	bl	be0fe <_ZN6StringaSERKS_>
   b7d04:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b7d08:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b7d0c:	f7ff ffda 	bl	b7cc4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b7d10:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b7d14:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b7d18:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b7d1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b7d20:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b7d24:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b7d28:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b7d2c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b7d30:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b7d34:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7d38:	f7ff ffc4 	bl	b7cc4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b7d3c:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b7d40:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b7d44:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b7d48:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b7d4c:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b7d50:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b7d54:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b7d58:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b7d5c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b7d60:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b7d64:	f7ff ffae 	bl	b7cc4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b7d68:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b7d6c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b7d70:	bd38      	pop	{r3, r4, r5, pc}

000b7d72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7d72:	680b      	ldr	r3, [r1, #0]
   b7d74:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7d76:	684b      	ldr	r3, [r1, #4]
   b7d78:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7d7a:	b113      	cbz	r3, b7d82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b7d7c:	685a      	ldr	r2, [r3, #4]
   b7d7e:	3201      	adds	r2, #1
   b7d80:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7d82:	4770      	bx	lr

000b7d84 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b7d84:	4a02      	ldr	r2, [pc, #8]	; (b7d90 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b7d86:	6002      	str	r2, [r0, #0]
   b7d88:	684a      	ldr	r2, [r1, #4]
   b7d8a:	6042      	str	r2, [r0, #4]
   b7d8c:	4770      	bx	lr
   b7d8e:	bf00      	nop
   b7d90:	000c0d20 	.word	0x000c0d20

000b7d94 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b7d94:	694a      	ldr	r2, [r1, #20]
   b7d96:	6803      	ldr	r3, [r0, #0]
   b7d98:	f362 0316 	bfi	r3, r2, #0, #23
   b7d9c:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b7d9e:	690b      	ldr	r3, [r1, #16]
   b7da0:	1c5a      	adds	r2, r3, #1
   b7da2:	8843      	ldrh	r3, [r0, #2]
   b7da4:	f362 13ca 	bfi	r3, r2, #7, #4
   b7da8:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b7daa:	68ca      	ldr	r2, [r1, #12]
   b7dac:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b7db0:	f362 03c7 	bfi	r3, r2, #3, #5
   b7db4:	70c3      	strb	r3, [r0, #3]
}
   b7db6:	4770      	bx	lr

000b7db8 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b7db8:	4a02      	ldr	r2, [pc, #8]	; (b7dc4 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b7dba:	6002      	str	r2, [r0, #0]
   b7dbc:	2200      	movs	r2, #0
   b7dbe:	6042      	str	r2, [r0, #4]
}
   b7dc0:	4770      	bx	lr
   b7dc2:	bf00      	nop
   b7dc4:	000c0d20 	.word	0x000c0d20

000b7dc8 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b7dc8:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b7dca:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b7dcc:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b7dce:	8083      	strh	r3, [r0, #4]
   b7dd0:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b7dd2:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b7dd4:	ab05      	add	r3, sp, #20
   b7dd6:	9300      	str	r3, [sp, #0]
   b7dd8:	4913      	ldr	r1, [pc, #76]	; (b7e28 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b7dda:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b7ddc:	ab04      	add	r3, sp, #16
   b7dde:	aa03      	add	r2, sp, #12
   b7de0:	4628      	mov	r0, r5
   b7de2:	f003 fdbb 	bl	bb95c <sscanf>
   b7de6:	2803      	cmp	r0, #3
   b7de8:	d107      	bne.n	b7dfa <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b7dea:	9b03      	ldr	r3, [sp, #12]
   b7dec:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b7dee:	9b04      	ldr	r3, [sp, #16]
   b7df0:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b7df2:	9b05      	ldr	r3, [sp, #20]
   b7df4:	71a3      	strb	r3, [r4, #6]
}
   b7df6:	b007      	add	sp, #28
   b7df8:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b7dfa:	490c      	ldr	r1, [pc, #48]	; (b7e2c <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b7dfc:	ab04      	add	r3, sp, #16
   b7dfe:	aa03      	add	r2, sp, #12
   b7e00:	4628      	mov	r0, r5
   b7e02:	f003 fdab 	bl	bb95c <sscanf>
   b7e06:	2802      	cmp	r0, #2
   b7e08:	d104      	bne.n	b7e14 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b7e0a:	9b03      	ldr	r3, [sp, #12]
   b7e0c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b7e0e:	9b04      	ldr	r3, [sp, #16]
   b7e10:	7163      	strb	r3, [r4, #5]
   b7e12:	e7f0      	b.n	b7df6 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b7e14:	4906      	ldr	r1, [pc, #24]	; (b7e30 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b7e16:	aa03      	add	r2, sp, #12
   b7e18:	4628      	mov	r0, r5
   b7e1a:	f003 fd9f 	bl	bb95c <sscanf>
   b7e1e:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b7e20:	bf04      	itt	eq
   b7e22:	9b03      	ldreq	r3, [sp, #12]
   b7e24:	7123      	strbeq	r3, [r4, #4]
}
   b7e26:	e7e6      	b.n	b7df6 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b7e28:	000c0cd4 	.word	0x000c0cd4
   b7e2c:	000c0cd7 	.word	0x000c0cd7
   b7e30:	000c0ae7 	.word	0x000c0ae7

000b7e34 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b7e34:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b7e38:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7e3c:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b7e40:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b7e42:	bfb8      	it	lt
   b7e44:	4808      	ldrlt	r0, [pc, #32]	; (b7e68 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b7e46:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b7e4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b7e4e:	bfbd      	ittte	lt
   b7e50:	fb00 3002 	mlalt	r0, r0, r2, r3
   b7e54:	1840      	addlt	r0, r0, r1
   b7e56:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b7e58:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b7e5c:	bfa4      	itt	ge
   b7e5e:	fb00 3002 	mlage	r0, r0, r2, r3
   b7e62:	1840      	addge	r0, r0, r1
}
   b7e64:	4770      	bx	lr
   b7e66:	bf00      	nop
   b7e68:	fffff1f0 	.word	0xfffff1f0

000b7e6c <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b7e6c:	b508      	push	{r3, lr}
   b7e6e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b7e72:	b14b      	cbz	r3, b7e88 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b7e74:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b7e78:	b943      	cbnz	r3, b7e8c <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b7e7a:	302c      	adds	r0, #44	; 0x2c
   b7e7c:	f7ff ffda 	bl	b7e34 <_ZNK12LocalTimeHMS9toSecondsEv>
   b7e80:	fab0 f080 	clz	r0, r0
   b7e84:	0940      	lsrs	r0, r0, #5
   b7e86:	bd08      	pop	{r3, pc}
   b7e88:	2001      	movs	r0, #1
   b7e8a:	e7fc      	b.n	b7e86 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b7e8c:	2000      	movs	r0, #0
   b7e8e:	e7fa      	b.n	b7e86 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b7e90 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b7e90:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b7e94:	b943      	cbnz	r3, b7ea8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b7e96:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7e9a:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b7e9c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7ea0:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b7ea2:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b7ea6:	600b      	str	r3, [r1, #0]
}
   b7ea8:	4770      	bx	lr

000b7eaa <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b7eaa:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b7eae:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b7eb0:	b9b3      	cbnz	r3, b7ee0 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b7eb2:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b7eb6:	688c      	ldr	r4, [r1, #8]
   b7eb8:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b7eba:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b7ebe:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b7ec0:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b7ec4:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b7ec6:	bfb5      	itete	lt
   b7ec8:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b7eca:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b7ecc:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b7ece:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b7ed0:	bfb5      	itete	lt
   b7ed2:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b7ed6:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b7eda:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b7edc:	189b      	addge	r3, r3, r2
   b7ede:	600b      	str	r3, [r1, #0]
}
   b7ee0:	bd30      	pop	{r4, r5, pc}
	...

000b7ee4 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b7ee4:	b508      	push	{r3, lr}
   b7ee6:	4a05      	ldr	r2, [pc, #20]	; (b7efc <_ZN15LocalTimeChangeC1Ev+0x18>)
   b7ee8:	6002      	str	r2, [r0, #0]
   b7eea:	2200      	movs	r2, #0
   b7eec:	4603      	mov	r3, r0
   b7eee:	6042      	str	r2, [r0, #4]
   b7ef0:	3008      	adds	r0, #8
   b7ef2:	f7ff ff61 	bl	b7db8 <_ZN12LocalTimeHMSC1Ev>
}
   b7ef6:	4618      	mov	r0, r3
   b7ef8:	bd08      	pop	{r3, pc}
   b7efa:	bf00      	nop
   b7efc:	000c0d30 	.word	0x000c0d30

000b7f00 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b7f00:	2300      	movs	r3, #0
   b7f02:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b7f04:	8183      	strh	r3, [r0, #12]
   b7f06:	7383      	strb	r3, [r0, #14]
}
   b7f08:	4770      	bx	lr
	...

000b7f0c <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b7f0c:	b530      	push	{r4, r5, lr}
   b7f0e:	4604      	mov	r4, r0
   b7f10:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b7f12:	460d      	mov	r5, r1
   b7f14:	b111      	cbz	r1, b7f1c <_ZN15LocalTimeChange5parseEPKc+0x10>
   b7f16:	780b      	ldrb	r3, [r1, #0]
   b7f18:	2b4d      	cmp	r3, #77	; 0x4d
   b7f1a:	d005      	beq.n	b7f28 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b7f1c:	4620      	mov	r0, r4
}
   b7f1e:	b007      	add	sp, #28
   b7f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b7f24:	f7ff bfec 	b.w	b7f00 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b7f28:	ab05      	add	r3, sp, #20
   b7f2a:	9300      	str	r3, [sp, #0]
   b7f2c:	4911      	ldr	r1, [pc, #68]	; (b7f74 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b7f2e:	ab04      	add	r3, sp, #16
   b7f30:	aa03      	add	r2, sp, #12
   b7f32:	4628      	mov	r0, r5
   b7f34:	f003 fd12 	bl	bb95c <sscanf>
   b7f38:	2803      	cmp	r0, #3
   b7f3a:	d116      	bne.n	b7f6a <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b7f3c:	9b03      	ldr	r3, [sp, #12]
   b7f3e:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b7f40:	9b04      	ldr	r3, [sp, #16]
   b7f42:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b7f44:	9b05      	ldr	r3, [sp, #20]
   b7f46:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b7f48:	212f      	movs	r1, #47	; 0x2f
   b7f4a:	4628      	mov	r0, r5
   b7f4c:	f007 fcb0 	bl	bf8b0 <strchr>
        if (cp) {
   b7f50:	b140      	cbz	r0, b7f64 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b7f52:	1c41      	adds	r1, r0, #1
   b7f54:	f104 0008 	add.w	r0, r4, #8
   b7f58:	f7ff ff36 	bl	b7dc8 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b7f5c:	2301      	movs	r3, #1
   b7f5e:	71e3      	strb	r3, [r4, #7]
}
   b7f60:	b007      	add	sp, #28
   b7f62:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b7f64:	81a0      	strh	r0, [r4, #12]
   b7f66:	73a0      	strb	r0, [r4, #14]
}
   b7f68:	e7f8      	b.n	b7f5c <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b7f6a:	4620      	mov	r0, r4
   b7f6c:	f7ff ffc8 	bl	b7f00 <_ZN15LocalTimeChange5clearEv>
   b7f70:	e7f6      	b.n	b7f60 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b7f72:	bf00      	nop
   b7f74:	000c0cef 	.word	0x000c0cef

000b7f78 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b7f78:	4b10      	ldr	r3, [pc, #64]	; (b7fbc <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b7f7a:	4911      	ldr	r1, [pc, #68]	; (b7fc0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7f7c:	b510      	push	{r4, lr}
   b7f7e:	4604      	mov	r4, r0
   b7f80:	f840 3b04 	str.w	r3, [r0], #4
   b7f84:	f006 f87f 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   b7f88:	f104 0014 	add.w	r0, r4, #20
   b7f8c:	f7ff ff14 	bl	b7db8 <_ZN12LocalTimeHMSC1Ev>
   b7f90:	490b      	ldr	r1, [pc, #44]	; (b7fc0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7f92:	f104 001c 	add.w	r0, r4, #28
   b7f96:	f006 f876 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   b7f9a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b7f9e:	f7ff ff0b 	bl	b7db8 <_ZN12LocalTimeHMSC1Ev>
   b7fa2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7fa6:	f7ff ff9d 	bl	b7ee4 <_ZN15LocalTimeChangeC1Ev>
   b7faa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7fae:	f7ff ff99 	bl	b7ee4 <_ZN15LocalTimeChangeC1Ev>
   b7fb2:	2300      	movs	r3, #0
   b7fb4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b7fb8:	4620      	mov	r0, r4
   b7fba:	bd10      	pop	{r4, pc}
   b7fbc:	000c0d40 	.word	0x000c0d40
   b7fc0:	000c1579 	.word	0x000c1579

000b7fc4 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b7fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fc8:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b7fca:	4608      	mov	r0, r1
   b7fcc:	f007 fc9a 	bl	bf904 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b7fd0:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b7fd2:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b7fd4:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b7fd6:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b7fda:	493f      	ldr	r1, [pc, #252]	; (b80d8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b7fdc:	9801      	ldr	r0, [sp, #4]
   b7fde:	aa01      	add	r2, sp, #4
   b7fe0:	f007 fd18 	bl	bfa14 <strtok_r>
   b7fe4:	4601      	mov	r1, r0
   b7fe6:	2800      	cmp	r0, #0
   b7fe8:	d062      	beq.n	b80b0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b7fea:	2d01      	cmp	r5, #1
   b7fec:	f105 0301 	add.w	r3, r5, #1
   b7ff0:	d053      	beq.n	b809a <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b7ff2:	2d02      	cmp	r5, #2
   b7ff4:	d056      	beq.n	b80a4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b7ff6:	2d00      	cmp	r5, #0
   b7ff8:	d146      	bne.n	b8088 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b7ffa:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b7ffc:	f892 9000 	ldrb.w	r9, [r2]
   b8000:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b8004:	4615      	mov	r5, r2
   b8006:	4617      	mov	r7, r2
   b8008:	f102 0201 	add.w	r2, r2, #1
   b800c:	d8f6      	bhi.n	b7ffc <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b800e:	2200      	movs	r2, #0
   b8010:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b8012:	f104 001c 	add.w	r0, r4, #28
   b8016:	f006 f894 	bl	be142 <_ZN6StringaSEPKc>
                valid = true;
   b801a:	2201      	movs	r2, #1
                *cp = save2;
   b801c:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b8020:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b8024:	782a      	ldrb	r2, [r5, #0]
   b8026:	b36a      	cbz	r2, b8084 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b8028:	f897 a000 	ldrb.w	sl, [r7]
   b802c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b8030:	2a3f      	cmp	r2, #63	; 0x3f
   b8032:	46b9      	mov	r9, r7
   b8034:	46bb      	mov	fp, r7
   b8036:	f107 0701 	add.w	r7, r7, #1
   b803a:	d9f5      	bls.n	b8028 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b803c:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b803e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b8042:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b8046:	4629      	mov	r1, r5
   b8048:	4638      	mov	r0, r7
   b804a:	f7ff febd 	bl	b7dc8 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b804e:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b8052:	f1ba 0f00 	cmp.w	sl, #0
   b8056:	d015      	beq.n	b8084 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b8058:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b805a:	f81b ab01 	ldrb.w	sl, [fp], #1
   b805e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b8062:	d8f9      	bhi.n	b8058 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b8064:	2200      	movs	r2, #0
   b8066:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b8068:	4649      	mov	r1, r9
   b806a:	1d20      	adds	r0, r4, #4
   b806c:	f006 f869 	bl	be142 <_ZN6StringaSEPKc>
                        *cp = save2;
   b8070:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b8074:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b8078:	f1ba 0f00 	cmp.w	sl, #0
   b807c:	d006      	beq.n	b808c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b807e:	4629      	mov	r1, r5
   b8080:	f7ff fea2 	bl	b7dc8 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b8084:	2501      	movs	r5, #1
   b8086:	e7a8      	b.n	b7fda <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b8088:	461d      	mov	r5, r3
   b808a:	e7a6      	b.n	b7fda <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b808c:	4639      	mov	r1, r7
   b808e:	f7ff fe19 	bl	b7cc4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b8092:	7e23      	ldrb	r3, [r4, #24]
   b8094:	3b01      	subs	r3, #1
   b8096:	7623      	strb	r3, [r4, #24]
   b8098:	e7f4      	b.n	b8084 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b809a:	4640      	mov	r0, r8
   b809c:	f7ff ff36 	bl	b7f0c <_ZN15LocalTimeChange5parseEPKc>
                break;
   b80a0:	2502      	movs	r5, #2
   b80a2:	e79a      	b.n	b7fda <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b80a4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b80a8:	f7ff ff30 	bl	b7f0c <_ZN15LocalTimeChange5parseEPKc>
                break;
   b80ac:	2503      	movs	r5, #3
   b80ae:	e794      	b.n	b7fda <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b80b0:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b80b4:	b143      	cbz	r3, b80c8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b80b6:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b80ba:	b92a      	cbnz	r2, b80c8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b80bc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b80c0:	f7ff ff1e 	bl	b7f00 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b80c4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b80c8:	4630      	mov	r0, r6
   b80ca:	f003 fc2f 	bl	bb92c <free>

    return valid;
}
   b80ce:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b80d2:	b003      	add	sp, #12
   b80d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b80d8:	000c0cf9 	.word	0x000c0cf9

000b80dc <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b80dc:	b538      	push	{r3, r4, r5, lr}
   b80de:	4b13      	ldr	r3, [pc, #76]	; (b812c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b80e0:	4604      	mov	r4, r0
   b80e2:	460d      	mov	r5, r1
   b80e4:	f840 3b04 	str.w	r3, [r0], #4
   b80e8:	4911      	ldr	r1, [pc, #68]	; (b8130 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b80ea:	f005 ffcc 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   b80ee:	f104 0014 	add.w	r0, r4, #20
   b80f2:	f7ff fe61 	bl	b7db8 <_ZN12LocalTimeHMSC1Ev>
   b80f6:	490e      	ldr	r1, [pc, #56]	; (b8130 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b80f8:	f104 001c 	add.w	r0, r4, #28
   b80fc:	f005 ffc3 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   b8100:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8104:	f7ff fe58 	bl	b7db8 <_ZN12LocalTimeHMSC1Ev>
   b8108:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b810c:	f7ff feea 	bl	b7ee4 <_ZN15LocalTimeChangeC1Ev>
   b8110:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8114:	f7ff fee6 	bl	b7ee4 <_ZN15LocalTimeChangeC1Ev>
   b8118:	2300      	movs	r3, #0
   b811a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b811e:	4629      	mov	r1, r5
   b8120:	4620      	mov	r0, r4
   b8122:	f7ff ff4f 	bl	b7fc4 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b8126:	4620      	mov	r0, r4
   b8128:	bd38      	pop	{r3, r4, r5, pc}
   b812a:	bf00      	nop
   b812c:	000c0d40 	.word	0x000c0d40
   b8130:	000c1579 	.word	0x000c1579

000b8134 <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b8134:	b508      	push	{r3, lr}
   b8136:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b8138:	f7ff fe3e 	bl	b7db8 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b813c:	688a      	ldr	r2, [r1, #8]
   b813e:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b8140:	684a      	ldr	r2, [r1, #4]
   b8142:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b8144:	680a      	ldr	r2, [r1, #0]
   b8146:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b8148:	4618      	mov	r0, r3
   b814a:	bd08      	pop	{r3, pc}

000b814c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b814c:	b513      	push	{r0, r1, r4, lr}
   b814e:	4b07      	ldr	r3, [pc, #28]	; (b816c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b8150:	6003      	str	r3, [r0, #0]
   b8152:	2300      	movs	r3, #0
   b8154:	6043      	str	r3, [r0, #4]
   b8156:	4604      	mov	r4, r0
    *this = value.hms();
   b8158:	4668      	mov	r0, sp
   b815a:	f7ff ffeb 	bl	b8134 <_ZNK14LocalTimeValue3hmsEv>
   b815e:	4620      	mov	r0, r4
   b8160:	4669      	mov	r1, sp
   b8162:	f7ff fdaf 	bl	b7cc4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b8166:	b002      	add	sp, #8
   b8168:	bd10      	pop	{r4, pc}
   b816a:	bf00      	nop
   b816c:	000c0d20 	.word	0x000c0d20

000b8170 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b8170:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b8172:	2300      	movs	r3, #0
   b8174:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b8176:	a801      	add	r0, sp, #4
   b8178:	9301      	str	r3, [sp, #4]
   b817a:	f7ff fe0b 	bl	b7d94 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b817e:	9801      	ldr	r0, [sp, #4]
   b8180:	b003      	add	sp, #12
   b8182:	f85d fb04 	ldr.w	pc, [sp], #4

000b8186 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b8186:	b510      	push	{r4, lr}
   b8188:	4604      	mov	r4, r0
    *this = value.ymd();
   b818a:	4608      	mov	r0, r1
   b818c:	f7ff fff0 	bl	b8170 <_ZNK14LocalTimeValue3ymdEv>
   b8190:	6020      	str	r0, [r4, #0]
}
   b8192:	bd10      	pop	{r4, pc}

000b8194 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b8194:	b510      	push	{r4, lr}
   b8196:	4604      	mov	r4, r0
   b8198:	b088      	sub	sp, #32
   b819a:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b819c:	3068      	adds	r0, #104	; 0x68
   b819e:	a901      	add	r1, sp, #4
   b81a0:	f007 fa98 	bl	bf6d4 <asctime_r>
    int len = strlen(ascstr);
   b81a4:	a801      	add	r0, sp, #4
   b81a6:	f007 fbca 	bl	bf93e <strlen>
    ascstr[len-1] = 0; // remove final newline
   b81aa:	ab08      	add	r3, sp, #32
   b81ac:	4418      	add	r0, r3
   b81ae:	2300      	movs	r3, #0
   b81b0:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b81b4:	a901      	add	r1, sp, #4
   b81b6:	4620      	mov	r0, r4
   b81b8:	f005 ff65 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b81bc:	4620      	mov	r0, r4
   b81be:	b008      	add	sp, #32
   b81c0:	bd10      	pop	{r4, pc}
	...

000b81c4 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b81c4:	b538      	push	{r3, r4, r5, lr}
   b81c6:	4604      	mov	r4, r0
    if (config.isZ()) {
   b81c8:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b81ca:	460d      	mov	r5, r1
    if (config.isZ()) {
   b81cc:	f7ff fe4e 	bl	b7e6c <_ZNK22LocalTimePosixTimezone3isZEv>
   b81d0:	b128      	cbz	r0, b81de <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b81d2:	4909      	ldr	r1, [pc, #36]	; (b81f8 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b81d4:	4620      	mov	r0, r4
   b81d6:	f005 ff56 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b81da:	4620      	mov	r0, r4
   b81dc:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b81de:	6828      	ldr	r0, [r5, #0]
   b81e0:	f7ff fd66 	bl	b7cb0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b81e4:	b128      	cbz	r0, b81f2 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b81e6:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b81ea:	4620      	mov	r0, r4
   b81ec:	f005 ff96 	bl	be11c <_ZN6StringC1ERKS_>
   b81f0:	e7f3      	b.n	b81da <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b81f2:	f105 0120 	add.w	r1, r5, #32
   b81f6:	e7f8      	b.n	b81ea <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b81f8:	000c0cfb 	.word	0x000c0cfb

000b81fc <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b81fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8200:	4680      	mov	r8, r0
   b8202:	b0a8      	sub	sp, #160	; 0xa0
   b8204:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b8206:	4615      	mov	r5, r2
   b8208:	b12a      	cbz	r2, b8216 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b820a:	4b47      	ldr	r3, [pc, #284]	; (b8328 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b820c:	4610      	mov	r0, r2
   b820e:	6819      	ldr	r1, [r3, #0]
   b8210:	f007 fb65 	bl	bf8de <strcmp>
   b8214:	b938      	cbnz	r0, b8226 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b8216:	4621      	mov	r1, r4
   b8218:	4640      	mov	r0, r8
   b821a:	f7ff ffbb 	bl	b8194 <_ZN16LocalTimeConvert7timeStrEv>
}
   b821e:	4640      	mov	r0, r8
   b8220:	b028      	add	sp, #160	; 0xa0
   b8222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b8226:	4629      	mov	r1, r5
   b8228:	223f      	movs	r2, #63	; 0x3f
   b822a:	a818      	add	r0, sp, #96	; 0x60
   b822c:	f007 fba3 	bl	bf976 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b8230:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8232:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b8234:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8238:	f007 fb81 	bl	bf93e <strlen>
    String zoneNameStr = zoneName();
   b823c:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b823e:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b8240:	a803      	add	r0, sp, #12
   b8242:	f7ff ffbf 	bl	b81c4 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b8246:	1d20      	adds	r0, r4, #4
   b8248:	f7ff fe10 	bl	b7e6c <_ZNK22LocalTimePosixTimezone3isZEv>
   b824c:	b348      	cbz	r0, b82a2 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b824e:	4937      	ldr	r1, [pc, #220]	; (b832c <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b8250:	a807      	add	r0, sp, #28
   b8252:	f007 fb4e 	bl	bf8f2 <strcpy>
   b8256:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b8258:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b825a:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b825e:	45ba      	cmp	sl, r7
   b8260:	d94c      	bls.n	b82fc <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b8262:	7833      	ldrb	r3, [r6, #0]
   b8264:	2b25      	cmp	r3, #37	; 0x25
   b8266:	f107 0901 	add.w	r9, r7, #1
   b826a:	d117      	bne.n	b829c <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b826c:	7873      	ldrb	r3, [r6, #1]
   b826e:	2b7a      	cmp	r3, #122	; 0x7a
   b8270:	d136      	bne.n	b82e0 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b8272:	a807      	add	r0, sp, #28
   b8274:	f007 fb63 	bl	bf93e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8278:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b827a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b827c:	1838      	adds	r0, r7, r0
   b827e:	ebaa 0207 	sub.w	r2, sl, r7
   b8282:	1cb1      	adds	r1, r6, #2
   b8284:	4418      	add	r0, r3
   b8286:	f007 fa77 	bl	bf778 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b828a:	462a      	mov	r2, r5
   b828c:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b828e:	4630      	mov	r0, r6
   b8290:	f007 fa72 	bl	bf778 <memcpy>
            len = strlen(format_str);
   b8294:	a818      	add	r0, sp, #96	; 0x60
   b8296:	f007 fb52 	bl	bf93e <strlen>
   b829a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b829c:	3601      	adds	r6, #1
   b829e:	464f      	mov	r7, r9
   b82a0:	e7db      	b.n	b825a <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b82a2:	6820      	ldr	r0, [r4, #0]
   b82a4:	f7ff fd04 	bl	b7cb0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b82a8:	b1b8      	cbz	r0, b82da <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b82aa:	f104 0018 	add.w	r0, r4, #24
   b82ae:	f7ff fdc1 	bl	b7e34 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b82b2:	223c      	movs	r2, #60	; 0x3c
   b82b4:	fb90 f3f2 	sdiv	r3, r0, r2
   b82b8:	2b00      	cmp	r3, #0
   b82ba:	bfb8      	it	lt
   b82bc:	425b      	neglt	r3, r3
   b82be:	fbb3 f1f2 	udiv	r1, r3, r2
   b82c2:	fb02 3311 	mls	r3, r2, r1, r3
   b82c6:	9300      	str	r3, [sp, #0]
   b82c8:	4a19      	ldr	r2, [pc, #100]	; (b8330 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b82ca:	4b1a      	ldr	r3, [pc, #104]	; (b8334 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b82cc:	fb90 f3f3 	sdiv	r3, r0, r3
   b82d0:	2110      	movs	r1, #16
   b82d2:	a807      	add	r0, sp, #28
   b82d4:	f003 fb4a 	bl	bb96c <snprintf>
   b82d8:	e7bd      	b.n	b8256 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b82da:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b82de:	e7e6      	b.n	b82ae <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b82e0:	2b5a      	cmp	r3, #90	; 0x5a
   b82e2:	d1db      	bne.n	b829c <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b82e4:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b82e6:	ab18      	add	r3, sp, #96	; 0x60
   b82e8:	1978      	adds	r0, r7, r5
   b82ea:	ebaa 0207 	sub.w	r2, sl, r7
   b82ee:	1cb1      	adds	r1, r6, #2
   b82f0:	4418      	add	r0, r3
   b82f2:	f007 fa41 	bl	bf778 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b82f6:	9903      	ldr	r1, [sp, #12]
   b82f8:	462a      	mov	r2, r5
   b82fa:	e7c8      	b.n	b828e <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b82fc:	2100      	movs	r1, #0
   b82fe:	222e      	movs	r2, #46	; 0x2e
   b8300:	a80c      	add	r0, sp, #48	; 0x30
   b8302:	910b      	str	r1, [sp, #44]	; 0x2c
   b8304:	f007 fa60 	bl	bf7c8 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b8308:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b830c:	aa18      	add	r2, sp, #96	; 0x60
   b830e:	2132      	movs	r1, #50	; 0x32
   b8310:	a80b      	add	r0, sp, #44	; 0x2c
   b8312:	f003 fb63 	bl	bb9dc <strftime>
    return String(buf);    
   b8316:	a90b      	add	r1, sp, #44	; 0x2c
   b8318:	4640      	mov	r0, r8
   b831a:	f005 feb4 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b831e:	a803      	add	r0, sp, #12
   b8320:	f005 fe66 	bl	bdff0 <_ZN6StringD1Ev>
   b8324:	e77b      	b.n	b821e <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b8326:	bf00      	nop
   b8328:	2003deb8 	.word	0x2003deb8
   b832c:	000c0cfb 	.word	0x000c0cfb
   b8330:	000c0cfd 	.word	0x000c0cfd
   b8334:	fffff1f0 	.word	0xfffff1f0

000b8338 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b8338:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b833a:	4d09      	ldr	r5, [pc, #36]	; (b8360 <_ZN9LocalTime8instanceEv+0x28>)
   b833c:	682b      	ldr	r3, [r5, #0]
   b833e:	b963      	cbnz	r3, b835a <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b8340:	2060      	movs	r0, #96	; 0x60
   b8342:	f7fb fea8 	bl	b4096 <_Znwj>
   b8346:	4604      	mov	r4, r0
   b8348:	b130      	cbz	r0, b8358 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b834a:	4b06      	ldr	r3, [pc, #24]	; (b8364 <_ZN9LocalTime8instanceEv+0x2c>)
   b834c:	f840 3b04 	str.w	r3, [r0], #4
   b8350:	f7ff fe12 	bl	b7f78 <_ZN22LocalTimePosixTimezoneC1Ev>
   b8354:	2364      	movs	r3, #100	; 0x64
   b8356:	65e3      	str	r3, [r4, #92]	; 0x5c
   b8358:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b835a:	6828      	ldr	r0, [r5, #0]
   b835c:	bd38      	pop	{r3, r4, r5, pc}
   b835e:	bf00      	nop
   b8360:	2003e444 	.word	0x2003e444
   b8364:	000c0d10 	.word	0x000c0d10

000b8368 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b8368:	f003 bb50 	b.w	bba0c <mktime>

000b836c <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b836c:	3901      	subs	r1, #1
   b836e:	290b      	cmp	r1, #11
   b8370:	d815      	bhi.n	b839e <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b8372:	e8df f001 	tbb	[pc, r1]
   b8376:	0816      	.short	0x0816
   b8378:	06160616 	.word	0x06160616
   b837c:	16061616 	.word	0x16061616
   b8380:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b8382:	201e      	movs	r0, #30
   b8384:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b8386:	0783      	lsls	r3, r0, #30
   b8388:	d10d      	bne.n	b83a6 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b838a:	2364      	movs	r3, #100	; 0x64
   b838c:	fb90 f2f3 	sdiv	r2, r0, r3
   b8390:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b8394:	2800      	cmp	r0, #0
   b8396:	bf0c      	ite	eq
   b8398:	201c      	moveq	r0, #28
   b839a:	201d      	movne	r0, #29
   b839c:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b839e:	2000      	movs	r0, #0
   b83a0:	4770      	bx	lr
            return 31;
   b83a2:	201f      	movs	r0, #31
   b83a4:	4770      	bx	lr
                return 28;
   b83a6:	201c      	movs	r0, #28
}
   b83a8:	4770      	bx	lr

000b83aa <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b83aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b83ac:	2301      	movs	r3, #1
   b83ae:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b83b0:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b83b4:	3b01      	subs	r3, #1
   b83b6:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b83b8:	2300      	movs	r3, #0
   b83ba:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b83be:	4606      	mov	r6, r0
   b83c0:	460c      	mov	r4, r1
   b83c2:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b83c4:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b83c6:	4620      	mov	r0, r4
   b83c8:	f7ff ffce 	bl	b8368 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b83cc:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b83d0:	69a2      	ldr	r2, [r4, #24]
   b83d2:	429a      	cmp	r2, r3
   b83d4:	d003      	beq.n	b83de <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b83d6:	68e3      	ldr	r3, [r4, #12]
   b83d8:	3301      	adds	r3, #1
   b83da:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b83dc:	e7f3      	b.n	b83c6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b83de:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b83e2:	2d01      	cmp	r5, #1
   b83e4:	d013      	beq.n	b840e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b83e6:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b83e8:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b83ea:	3d01      	subs	r5, #1
   b83ec:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b83f0:	441d      	add	r5, r3
   b83f2:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b83f4:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b83f8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b83fc:	f7ff ffb6 	bl	b836c <_ZN9LocalTime14lastDayOfMonthEii>
   b8400:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b8402:	bfc4      	itt	gt
   b8404:	3d07      	subgt	r5, #7
   b8406:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b8408:	4620      	mov	r0, r4
   b840a:	f7ff ffad 	bl	b8368 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b840e:	4621      	mov	r1, r4
   b8410:	f106 0008 	add.w	r0, r6, #8
   b8414:	f7ff fd3c 	bl	b7e90 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b8418:	4638      	mov	r0, r7
   b841a:	f7ff fd46 	bl	b7eaa <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b841e:	4620      	mov	r0, r4
}
   b8420:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b8424:	f003 baf2 	b.w	bba0c <mktime>

000b8428 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b8428:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b842a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b842e:	b085      	sub	sp, #20
   b8430:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b8432:	b92b      	cbnz	r3, b8440 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b8434:	f7ff ff80 	bl	b8338 <_ZN9LocalTime8instanceEv>
   b8438:	1d01      	adds	r1, r0, #4
   b843a:	1d20      	adds	r0, r4, #4
   b843c:	f7ff fc4f 	bl	b7cde <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b8440:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b8444:	2b00      	cmp	r3, #0
   b8446:	d065      	beq.n	b8514 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b8448:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b844c:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b8450:	4639      	mov	r1, r7
   b8452:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b8454:	463e      	mov	r6, r7
   b8456:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b845a:	f003 fac7 	bl	bb9ec <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b845e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8460:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b8464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8466:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b846a:	6833      	ldr	r3, [r6, #0]
   b846c:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b846e:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b8472:	a802      	add	r0, sp, #8
   b8474:	f7ff fc86 	bl	b7d84 <_ZN12LocalTimeHMSC1ERKS_>
   b8478:	aa02      	add	r2, sp, #8
   b847a:	4639      	mov	r1, r7
   b847c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b8480:	f7ff ff93 	bl	b83aa <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b8484:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b8488:	f104 0118 	add.w	r1, r4, #24
   b848c:	a802      	add	r0, sp, #8
   b848e:	f7ff fc79 	bl	b7d84 <_ZN12LocalTimeHMSC1ERKS_>
   b8492:	aa02      	add	r2, sp, #8
   b8494:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b8498:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b849c:	f7ff ff85 	bl	b83aa <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b84a0:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b84a4:	4286      	cmp	r6, r0
   b84a6:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b84aa:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b84ae:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b84b2:	da23      	bge.n	b84fc <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b84b4:	42b2      	cmp	r2, r6
   b84b6:	eb73 0505 	sbcs.w	r5, r3, r5
   b84ba:	da19      	bge.n	b84f0 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b84bc:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b84be:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b84c0:	6820      	ldr	r0, [r4, #0]
   b84c2:	f7ff fbf5 	bl	b7cb0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b84c6:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b84ca:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b84ce:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b84d0:	bb10      	cbnz	r0, b8518 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b84d2:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b84d6:	f7ff fcad 	bl	b7e34 <_ZNK12LocalTimeHMS9toSecondsEv>
   b84da:	1a2d      	subs	r5, r5, r0
   b84dc:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b84e0:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b84e4:	9901      	ldr	r1, [sp, #4]
   b84e6:	a802      	add	r0, sp, #8
   b84e8:	f003 fa80 	bl	bb9ec <localtime_r>
}
   b84ec:	b005      	add	sp, #20
   b84ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b84f0:	4282      	cmp	r2, r0
   b84f2:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b84f4:	bfb4      	ite	lt
   b84f6:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b84f8:	2302      	movge	r3, #2
   b84fa:	e7e0      	b.n	b84be <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b84fc:	4282      	cmp	r2, r0
   b84fe:	eb73 0101 	sbcs.w	r1, r3, r1
   b8502:	da01      	bge.n	b8508 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b8504:	2303      	movs	r3, #3
   b8506:	e7da      	b.n	b84be <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b8508:	42b2      	cmp	r2, r6
   b850a:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b850c:	bfb4      	ite	lt
   b850e:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b8510:	2305      	movge	r3, #5
   b8512:	e7d4      	b.n	b84be <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b8514:	2306      	movs	r3, #6
   b8516:	e7d2      	b.n	b84be <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b8518:	f104 0018 	add.w	r0, r4, #24
   b851c:	e7db      	b.n	b84d6 <_ZN16LocalTimeConvert7convertEv+0xae>

000b851e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b851e:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b8520:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8522:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8524:	4668      	mov	r0, sp
   b8526:	f7ff fc24 	bl	b7d72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b852a:	466a      	mov	r2, sp
   b852c:	4629      	mov	r1, r5
   b852e:	4620      	mov	r0, r4
   b8530:	f004 f98e 	bl	bc850 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8534:	a801      	add	r0, sp, #4
   b8536:	f7fe f853 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b853a:	4620      	mov	r0, r4
   b853c:	b003      	add	sp, #12
   b853e:	bd30      	pop	{r4, r5, pc}

000b8540 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8540:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8542:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8544:	4604      	mov	r4, r0
   b8546:	4668      	mov	r0, sp
   b8548:	f7ff fc13 	bl	b7d72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b854c:	466a      	mov	r2, sp
   b854e:	4629      	mov	r1, r5
   b8550:	4620      	mov	r0, r4
   b8552:	f004 f959 	bl	bc808 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8556:	a801      	add	r0, sp, #4
   b8558:	f7fe f842 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b855c:	4620      	mov	r0, r4
   b855e:	b003      	add	sp, #12
   b8560:	bd30      	pop	{r4, r5, pc}

000b8562 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8562:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8564:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8566:	4604      	mov	r4, r0
   b8568:	4668      	mov	r0, sp
   b856a:	f7ff fc02 	bl	b7d72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b856e:	466a      	mov	r2, sp
   b8570:	4629      	mov	r1, r5
   b8572:	4620      	mov	r0, r4
   b8574:	f004 f8f1 	bl	bc75a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8578:	a801      	add	r0, sp, #4
   b857a:	f7fe f831 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b857e:	4620      	mov	r0, r4
   b8580:	b003      	add	sp, #12
   b8582:	bd30      	pop	{r4, r5, pc}

000b8584 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b8584:	4770      	bx	lr

000b8586 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b8586:	b510      	push	{r4, lr}
}
   b8588:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b858a:	4604      	mov	r4, r0
}
   b858c:	f7fb fd87 	bl	b409e <_ZdlPvj>
   b8590:	4620      	mov	r0, r4
   b8592:	bd10      	pop	{r4, pc}

000b8594 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b8594:	6803      	ldr	r3, [r0, #0]
   b8596:	b2c9      	uxtb	r1, r1
   b8598:	689b      	ldr	r3, [r3, #8]
   b859a:	4718      	bx	r3

000b859c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b859c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b859e:	4d03      	ldr	r5, [pc, #12]	; (b85ac <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b85a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b85a4:	e9c0 5100 	strd	r5, r1, [r0]
}
   b85a8:	bd30      	pop	{r4, r5, pc}
   b85aa:	bf00      	nop
   b85ac:	000c0d50 	.word	0x000c0d50

000b85b0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b85b0:	6840      	ldr	r0, [r0, #4]
   b85b2:	f003 bf43 	b.w	bc43c <_ZN7TwoWire5beginEv>

000b85b6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b85b6:	b510      	push	{r4, lr}
   b85b8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b85ba:	6800      	ldr	r0, [r0, #0]
   b85bc:	f003 ff99 	bl	bc4f2 <_ZN7TwoWire6unlockEv>
   b85c0:	4620      	mov	r0, r4
   b85c2:	bd10      	pop	{r4, pc}

000b85c4 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b85c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b85c8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b85ca:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b85cc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b85ce:	460d      	mov	r5, r1
   b85d0:	4616      	mov	r6, r2
   b85d2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b85d4:	f003 ff84 	bl	bc4e0 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b85d8:	b1a7      	cbz	r7, b8604 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b85da:	68e1      	ldr	r1, [r4, #12]
   b85dc:	6860      	ldr	r0, [r4, #4]
   b85de:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b85e2:	f003 ff5e 	bl	bc4a2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b85e6:	0a29      	lsrs	r1, r5, #8
   b85e8:	6860      	ldr	r0, [r4, #4]
   b85ea:	f7ff ffd3 	bl	b8594 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b85ee:	4629      	mov	r1, r5
   b85f0:	6860      	ldr	r0, [r4, #4]
   b85f2:	f7ff ffcf 	bl	b8594 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b85f6:	6860      	ldr	r0, [r4, #4]
   b85f8:	2100      	movs	r1, #0
   b85fa:	f003 ff6d 	bl	bc4d8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b85fe:	b148      	cbz	r0, b8614 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b8600:	2400      	movs	r4, #0
   b8602:	e000      	b.n	b8606 <_ZN6MB85RC8readDataEjPhj+0x42>
   b8604:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b8606:	a801      	add	r0, sp, #4
   b8608:	f7ff ffd5 	bl	b85b6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b860c:	4620      	mov	r0, r4
   b860e:	b003      	add	sp, #12
   b8610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b8614:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b8616:	7b21      	ldrb	r1, [r4, #12]
   b8618:	6860      	ldr	r0, [r4, #4]
   b861a:	46b8      	mov	r8, r7
   b861c:	bf28      	it	cs
   b861e:	f04f 0820 	movcs.w	r8, #32
   b8622:	2301      	movs	r3, #1
   b8624:	4642      	mov	r2, r8
   b8626:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b862a:	f003 ff24 	bl	bc476 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b862e:	f006 fb07 	bl	bec40 <_Z19__fetch_global_Wirev>
   b8632:	6803      	ldr	r3, [r0, #0]
   b8634:	691b      	ldr	r3, [r3, #16]
   b8636:	4798      	blx	r3
   b8638:	4540      	cmp	r0, r8
   b863a:	dbe1      	blt.n	b8600 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b863c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b8640:	f006 fafe 	bl	bec40 <_Z19__fetch_global_Wirev>
   b8644:	6803      	ldr	r3, [r0, #0]
   b8646:	695b      	ldr	r3, [r3, #20]
   b8648:	4798      	blx	r3
   b864a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b864e:	454e      	cmp	r6, r9
   b8650:	d1f6      	bne.n	b8640 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b8652:	4445      	add	r5, r8
				dataLen--;
   b8654:	eba7 0708 	sub.w	r7, r7, r8
   b8658:	e7be      	b.n	b85d8 <_ZN6MB85RC8readDataEjPhj+0x14>

000b865a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b865a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b865e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b8660:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8662:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b8664:	460e      	mov	r6, r1
   b8666:	4690      	mov	r8, r2
   b8668:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b866a:	f003 ff39 	bl	bc4e0 <_ZN7TwoWire4lockEv>
   b866e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b8672:	f1b9 0f00 	cmp.w	r9, #0
   b8676:	d02a      	beq.n	b86ce <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b8678:	b34d      	cbz	r5, b86ce <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b867a:	68e1      	ldr	r1, [r4, #12]
   b867c:	6860      	ldr	r0, [r4, #4]
   b867e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b8682:	f003 ff0e 	bl	bc4a2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b8686:	0a31      	lsrs	r1, r6, #8
   b8688:	6860      	ldr	r0, [r4, #4]
   b868a:	f7ff ff83 	bl	b8594 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b868e:	6860      	ldr	r0, [r4, #4]
   b8690:	4631      	mov	r1, r6
   b8692:	f7ff ff7f 	bl	b8594 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b8696:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b869a:	4647      	mov	r7, r8
   b869c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b86a0:	6860      	ldr	r0, [r4, #4]
   b86a2:	f817 1b01 	ldrb.w	r1, [r7], #1
   b86a6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b86a8:	3d01      	subs	r5, #1
				wire.write(*data);
   b86aa:	689b      	ldr	r3, [r3, #8]
   b86ac:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b86ae:	4555      	cmp	r5, sl
   b86b0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b86b4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b86b6:	d001      	beq.n	b86bc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b86b8:	2d00      	cmp	r5, #0
   b86ba:	d1f1      	bne.n	b86a0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b86bc:	6860      	ldr	r0, [r4, #4]
   b86be:	2101      	movs	r1, #1
   b86c0:	f003 ff0a 	bl	bc4d8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b86c4:	2800      	cmp	r0, #0
   b86c6:	d0d7      	beq.n	b8678 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b86c8:	f04f 0900 	mov.w	r9, #0
   b86cc:	e7d1      	b.n	b8672 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b86ce:	a801      	add	r0, sp, #4
   b86d0:	f7ff ff71 	bl	b85b6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b86d4:	4648      	mov	r0, r9
   b86d6:	b003      	add	sp, #12
   b86d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b86dc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b86dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b86e0:	b08b      	sub	sp, #44	; 0x2c
   b86e2:	460e      	mov	r6, r1
   b86e4:	4615      	mov	r5, r2
   b86e6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b86e8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b86ea:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b86ec:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b86ee:	f003 fef7 	bl	bc4e0 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b86f2:	42ae      	cmp	r6, r5
   b86f4:	d229      	bcs.n	b874a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b86f6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b86f8:	4425      	add	r5, r4
			while(numBytes > 0) {
   b86fa:	b18c      	cbz	r4, b8720 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b86fc:	2c1e      	cmp	r4, #30
   b86fe:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b8700:	f8d8 3000 	ldr.w	r3, [r8]
   b8704:	bf28      	it	cs
   b8706:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b8708:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b870a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b870e:	aa02      	add	r2, sp, #8
   b8710:	463b      	mov	r3, r7
   b8712:	4631      	mov	r1, r6
   b8714:	4640      	mov	r0, r8
				framAddrTo -= count;
   b8716:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b8718:	47c8      	blx	r9
				if (!result) {
   b871a:	b948      	cbnz	r0, b8730 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b871c:	2400      	movs	r4, #0
   b871e:	e000      	b.n	b8722 <_ZN6MB85RC8moveDataEjjj+0x46>
   b8720:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b8722:	a801      	add	r0, sp, #4
   b8724:	f7ff ff47 	bl	b85b6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b8728:	4620      	mov	r0, r4
   b872a:	b00b      	add	sp, #44	; 0x2c
   b872c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b8730:	f8d8 3000 	ldr.w	r3, [r8]
   b8734:	aa02      	add	r2, sp, #8
   b8736:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b873a:	4629      	mov	r1, r5
   b873c:	463b      	mov	r3, r7
   b873e:	4640      	mov	r0, r8
   b8740:	47c8      	blx	r9
				if (!result) {
   b8742:	2800      	cmp	r0, #0
   b8744:	d0ea      	beq.n	b871c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b8746:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b8748:	e7d7      	b.n	b86fa <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b874a:	d9e9      	bls.n	b8720 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b874c:	2c00      	cmp	r4, #0
   b874e:	d0e7      	beq.n	b8720 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b8750:	f8d8 3000 	ldr.w	r3, [r8]
   b8754:	2c1e      	cmp	r4, #30
   b8756:	4627      	mov	r7, r4
   b8758:	bf28      	it	cs
   b875a:	271e      	movcs	r7, #30
   b875c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b8760:	aa02      	add	r2, sp, #8
   b8762:	463b      	mov	r3, r7
   b8764:	4631      	mov	r1, r6
   b8766:	4640      	mov	r0, r8
   b8768:	47c8      	blx	r9
				if (!result) {
   b876a:	2800      	cmp	r0, #0
   b876c:	d0d6      	beq.n	b871c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b876e:	f8d8 3000 	ldr.w	r3, [r8]
   b8772:	aa02      	add	r2, sp, #8
   b8774:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b8778:	4629      	mov	r1, r5
   b877a:	463b      	mov	r3, r7
   b877c:	4640      	mov	r0, r8
   b877e:	47c8      	blx	r9
				if (!result) {
   b8780:	2800      	cmp	r0, #0
   b8782:	d0cb      	beq.n	b871c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b8784:	443e      	add	r6, r7
				framAddrTo += count;
   b8786:	443d      	add	r5, r7
				numBytes -= count;
   b8788:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b878a:	e7df      	b.n	b874c <_ZN6MB85RC8moveDataEjjj+0x70>

000b878c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b878c:	6803      	ldr	r3, [r0, #0]
   b878e:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b8790:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b8794:	2101      	movs	r1, #1
   b8796:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b879a:	4770      	bx	lr

000b879c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b879c:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b879e:	6842      	ldr	r2, [r0, #4]
   b87a0:	4603      	mov	r3, r0
   b87a2:	1054      	asrs	r4, r2, #1
   b87a4:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b87a8:	07d2      	lsls	r2, r2, #31
   b87aa:	bf48      	it	mi
   b87ac:	590a      	ldrmi	r2, [r1, r4]
   b87ae:	681b      	ldr	r3, [r3, #0]
      }
   b87b0:	f85d 4b04 	ldr.w	r4, [sp], #4
   b87b4:	bf48      	it	mi
   b87b6:	58d3      	ldrmi	r3, [r2, r3]
   b87b8:	4718      	bx	r3

000b87ba <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b87ba:	2a01      	cmp	r2, #1
   b87bc:	d102      	bne.n	b87c4 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b87be:	6001      	str	r1, [r0, #0]
      }
   b87c0:	2000      	movs	r0, #0
   b87c2:	4770      	bx	lr
	  switch (__op)
   b87c4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b87c6:	bf04      	itt	eq
   b87c8:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b87cc:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b87d0:	e7f6      	b.n	b87c0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b87d2 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b87d2:	2a01      	cmp	r2, #1
   b87d4:	d102      	bne.n	b87dc <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b87d6:	6001      	str	r1, [r0, #0]
      }
   b87d8:	2000      	movs	r0, #0
   b87da:	4770      	bx	lr
	  switch (__op)
   b87dc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b87de:	bf04      	itt	eq
   b87e0:	680b      	ldreq	r3, [r1, #0]
   b87e2:	6003      	streq	r3, [r0, #0]
	      break;
   b87e4:	e7f8      	b.n	b87d8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b87e6 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b87e6:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b87e8:	f002 bcbc 	b.w	bb164 <os_mutex_recursive_lock>

000b87ec <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b87ec:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b87f0:	4601      	mov	r1, r0
    if (stateHandler) {
   b87f2:	b11b      	cbz	r3, b87fc <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b87f4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b87f8:	30c0      	adds	r0, #192	; 0xc0
   b87fa:	4718      	bx	r3
}
   b87fc:	4770      	bx	lr
	...

000b8800 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b8800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b8802:	4d12      	ldr	r5, [pc, #72]	; (b884c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b8804:	4608      	mov	r0, r1
        eventData = "";
   b8806:	2a00      	cmp	r2, #0
   b8808:	bf18      	it	ne
   b880a:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b880c:	460e      	mov	r6, r1
   b880e:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b8810:	f007 f895 	bl	bf93e <strlen>
   b8814:	2840      	cmp	r0, #64	; 0x40
   b8816:	d816      	bhi.n	b8846 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b8818:	4628      	mov	r0, r5
   b881a:	f007 f890 	bl	bf93e <strlen>
   b881e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b8822:	d810      	bhi.n	b8846 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b8824:	3043      	adds	r0, #67	; 0x43
   b8826:	f7fb fc38 	bl	b409a <_Znaj>
    if (event) {
   b882a:	4604      	mov	r4, r0
   b882c:	b148      	cbz	r0, b8842 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b882e:	4631      	mov	r1, r6
        event->flags = flags;
   b8830:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b8834:	f007 f85d 	bl	bf8f2 <strcpy>
        strcpy(event->eventData, eventData);
   b8838:	4629      	mov	r1, r5
   b883a:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b883e:	f007 f858 	bl	bf8f2 <strcpy>
}
   b8842:	4620      	mov	r0, r4
   b8844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b8846:	2400      	movs	r4, #0
   b8848:	e7fb      	b.n	b8842 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b884a:	bf00      	nop
   b884c:	000c1579 	.word	0x000c1579

000b8850 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b8850:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8852:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b8854:	460a      	mov	r2, r1
   b8856:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b8858:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b885a:	1d01      	adds	r1, r0, #4
   b885c:	a808      	add	r0, sp, #32
   b885e:	f002 f881 	bl	ba964 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b8862:	9808      	ldr	r0, [sp, #32]
   b8864:	2100      	movs	r1, #0
   b8866:	f007 f97f 	bl	bfb68 <open>
   b886a:	4605      	mov	r5, r0
   b886c:	a808      	add	r0, sp, #32
   b886e:	f005 fbbf 	bl	bdff0 <_ZN6StringD1Ev>
    if (fd) {
   b8872:	2d00      	cmp	r5, #0
   b8874:	d060      	beq.n	b8938 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b8876:	a908      	add	r1, sp, #32
   b8878:	4628      	mov	r0, r5
   b887a:	f007 f963 	bl	bfb44 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b887e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8880:	492e      	ldr	r1, [pc, #184]	; (b893c <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b8882:	482f      	ldr	r0, [pc, #188]	; (b8940 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8884:	4632      	mov	r2, r6
   b8886:	f7fe fa63 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b888a:	2200      	movs	r2, #0
   b888c:	4611      	mov	r1, r2
   b888e:	4628      	mov	r0, r5
   b8890:	f007 f960 	bl	bfb54 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b8894:	2208      	movs	r2, #8
   b8896:	a906      	add	r1, sp, #24
   b8898:	4628      	mov	r0, r5
   b889a:	f007 f979 	bl	bfb90 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b889e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b88a0:	2f4a      	cmp	r7, #74	; 0x4a
   b88a2:	dd39      	ble.n	b8918 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b88a4:	4b27      	ldr	r3, [pc, #156]	; (b8944 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b88a6:	9a06      	ldr	r2, [sp, #24]
   b88a8:	429a      	cmp	r2, r3
   b88aa:	d135      	bne.n	b8918 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b88ac:	4b26      	ldr	r3, [pc, #152]	; (b8948 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b88ae:	9a07      	ldr	r2, [sp, #28]
   b88b0:	429a      	cmp	r2, r3
   b88b2:	d131      	bne.n	b8918 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b88b4:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b88b8:	4610      	mov	r0, r2
   b88ba:	9205      	str	r2, [sp, #20]
   b88bc:	f7fb fbed 	bl	b409a <_Znaj>
            if (result) {
   b88c0:	4604      	mov	r4, r0
   b88c2:	b1c0      	cbz	r0, b88f6 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b88c4:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b88c6:	4601      	mov	r1, r0
   b88c8:	9a05      	ldr	r2, [sp, #20]
   b88ca:	4628      	mov	r0, r5
   b88cc:	f007 f960 	bl	bfb90 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b88d0:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b88d4:	b9ab      	cbnz	r3, b8902 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b88d6:	1c63      	adds	r3, r4, #1
   b88d8:	4618      	mov	r0, r3
   b88da:	9305      	str	r3, [sp, #20]
   b88dc:	f007 f82f 	bl	bf93e <strlen>
   b88e0:	283f      	cmp	r0, #63	; 0x3f
   b88e2:	9b05      	ldr	r3, [sp, #20]
   b88e4:	d80d      	bhi.n	b8902 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b88e6:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b88ea:	9200      	str	r2, [sp, #0]
   b88ec:	4917      	ldr	r1, [pc, #92]	; (b894c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b88ee:	4814      	ldr	r0, [pc, #80]	; (b8940 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b88f0:	4632      	mov	r2, r6
   b88f2:	f7fe fa2d 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b88f6:	4628      	mov	r0, r5
   b88f8:	f007 f91c 	bl	bfb34 <close>
}
   b88fc:	4620      	mov	r0, r4
   b88fe:	b01f      	add	sp, #124	; 0x7c
   b8900:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b8902:	4913      	ldr	r1, [pc, #76]	; (b8950 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b8904:	480e      	ldr	r0, [pc, #56]	; (b8940 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8906:	4632      	mov	r2, r6
   b8908:	f7fe fa22 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b890c:	2143      	movs	r1, #67	; 0x43
   b890e:	4620      	mov	r0, r4
   b8910:	f7fb fbc5 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b8914:	2400      	movs	r4, #0
   b8916:	e7ee      	b.n	b88f6 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b8918:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b891c:	9302      	str	r3, [sp, #8]
   b891e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b8922:	9301      	str	r3, [sp, #4]
   b8924:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b8928:	9300      	str	r3, [sp, #0]
   b892a:	490a      	ldr	r1, [pc, #40]	; (b8954 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b892c:	9b06      	ldr	r3, [sp, #24]
   b892e:	4804      	ldr	r0, [pc, #16]	; (b8940 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8930:	4632      	mov	r2, r6
   b8932:	f7fe fa0d 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
   b8936:	e7ed      	b.n	b8914 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b8938:	462c      	mov	r4, r5
    return result;
   b893a:	e7df      	b.n	b88fc <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b893c:	000c0d64 	.word	0x000c0d64
   b8940:	2003e448 	.word	0x2003e448
   b8944:	31b67663 	.word	0x31b67663
   b8948:	00410801 	.word	0x00410801
   b894c:	000c0d78 	.word	0x000c0d78
   b8950:	000c0d9a 	.word	0x000c0d9a
   b8954:	000c0dc8 	.word	0x000c0dc8

000b8958 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b8958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b895c:	4680      	mov	r8, r0
   b895e:	4b28      	ldr	r3, [pc, #160]	; (b8a00 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b8960:	f848 3b04 	str.w	r3, [r8], #4
   b8964:	4604      	mov	r4, r0
   b8966:	4640      	mov	r0, r8
   b8968:	f001 ff14 	bl	ba794 <_ZN14SequentialFileC1Ev>
   b896c:	2202      	movs	r2, #2
   b896e:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b8970:	2500      	movs	r5, #0
   b8972:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b8976:	2308      	movs	r3, #8
   b8978:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b897a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b897e:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b8982:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b8986:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b898a:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b898c:	2020      	movs	r0, #32
   b898e:	f7fb fb82 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b8992:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b8994:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b8996:	3e01      	subs	r6, #1
   b8998:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b899a:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b899e:	4607      	mov	r7, r0
   b89a0:	f44f 7000 	mov.w	r0, #512	; 0x200
   b89a4:	f7fb fb77 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b89a8:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b89ac:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b89b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b89b4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b89b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b89bc:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b89c0:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b89c4:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b89c8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b89cc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b89d0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b89d4:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b89d8:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b89dc:	4909      	ldr	r1, [pc, #36]	; (b8a04 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b89de:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b89e2:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b89e6:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b89ea:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b89ee:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b89f2:	4640      	mov	r0, r8
   b89f4:	f001 ff14 	bl	ba820 <_ZN14SequentialFile11withDirPathEPKc>
}
   b89f8:	4620      	mov	r0, r4
   b89fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b89fe:	bf00      	nop
   b8a00:	000c0fe4 	.word	0x000c0fe4
   b8a04:	000c0e0d 	.word	0x000c0e0d

000b8a08 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b8a08:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b8a0a:	4d06      	ldr	r5, [pc, #24]	; (b8a24 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b8a0c:	682b      	ldr	r3, [r5, #0]
   b8a0e:	b93b      	cbnz	r3, b8a20 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b8a10:	20d0      	movs	r0, #208	; 0xd0
   b8a12:	f7fb fb40 	bl	b4096 <_Znwj>
   b8a16:	4604      	mov	r4, r0
   b8a18:	b108      	cbz	r0, b8a1e <_ZN17PublishQueuePosix8instanceEv+0x16>
   b8a1a:	f7ff ff9d 	bl	b8958 <_ZN17PublishQueuePosixC1Ev>
   b8a1e:	602c      	str	r4, [r5, #0]
}
   b8a20:	6828      	ldr	r0, [r5, #0]
   b8a22:	bd38      	pop	{r3, r4, r5, pc}
   b8a24:	2003e44c 	.word	0x2003e44c

000b8a28 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b8a28:	6942      	ldr	r2, [r0, #20]
   b8a2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b8a2c:	1a9b      	subs	r3, r3, r2
   b8a2e:	109b      	asrs	r3, r3, #2
   b8a30:	1e5a      	subs	r2, r3, #1
   b8a32:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b8a36:	1a5b      	subs	r3, r3, r1
   b8a38:	109b      	asrs	r3, r3, #2
   b8a3a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b8a3e:	6902      	ldr	r2, [r0, #16]
   b8a40:	6880      	ldr	r0, [r0, #8]
   b8a42:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b8a44:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b8a48:	4770      	bx	lr

000b8a4a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b8a4a:	b538      	push	{r3, r4, r5, lr}
   b8a4c:	4605      	mov	r5, r0
   b8a4e:	f7ff feca 	bl	b87e6 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b8a52:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b8a56:	f7ff ffe7 	bl	b8a28 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b8a5a:	4604      	mov	r4, r0
   b8a5c:	b950      	cbnz	r0, b8a74 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b8a5e:	1d28      	adds	r0, r5, #4
   b8a60:	f002 f9d4 	bl	bae0c <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b8a64:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b8a68:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b8a6a:	b11b      	cbz	r3, b8a74 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b8a6c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b8a70:	b903      	cbnz	r3, b8a74 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b8a72:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b8a74:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b8a76:	f002 fb7d 	bl	bb174 <os_mutex_recursive_unlock>
}
   b8a7a:	4620      	mov	r0, r4
   b8a7c:	bd38      	pop	{r3, r4, r5, pc}

000b8a7e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b8a7e:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b8a80:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b8a82:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b8a84:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b8a86:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b8a88:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b8a8a:	d002      	beq.n	b8a92 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b8a8c:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b8a8e:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b8a90:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b8a92:	68c0      	ldr	r0, [r0, #12]
   b8a94:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8a98:	f7fb fb01 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b8a9c:	6963      	ldr	r3, [r4, #20]
   b8a9e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8aa0:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b8aa2:	685b      	ldr	r3, [r3, #4]
   b8aa4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8aa6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8aaa:	6122      	str	r2, [r4, #16]
   b8aac:	e7ef      	b.n	b8a8e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b8ab0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b8ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ab4:	b085      	sub	sp, #20
   b8ab6:	4604      	mov	r4, r0
   b8ab8:	f7ff fe95 	bl	b87e6 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b8abc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8b64 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b8ac0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b8b68 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b8ac4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b8b6c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b8ac8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b8acc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b8ad0:	4293      	cmp	r3, r2
   b8ad2:	d105      	bne.n	b8ae0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b8ad4:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b8ad6:	b005      	add	sp, #20
   b8ad8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8adc:	f002 bb4a 	b.w	bb174 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b8ae0:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b8ae4:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b8ae8:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b8aea:	f7ff ffc8 	bl	b8a7e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b8aee:	4640      	mov	r0, r8
   b8af0:	f002 f930 	bl	bad54 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b8af4:	2300      	movs	r3, #0
   b8af6:	4602      	mov	r2, r0
   b8af8:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b8afa:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b8afc:	4668      	mov	r0, sp
   b8afe:	f001 ff31 	bl	ba964 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b8b02:	9800      	ldr	r0, [sp, #0]
   b8b04:	f240 2102 	movw	r1, #514	; 0x202
   b8b08:	f007 f82e 	bl	bfb68 <open>
   b8b0c:	4605      	mov	r5, r0
   b8b0e:	4668      	mov	r0, sp
   b8b10:	f005 fa6e 	bl	bdff0 <_ZN6StringD1Ev>
            if (fd) {
   b8b14:	b1c5      	cbz	r5, b8b48 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b8b16:	2208      	movs	r2, #8
   b8b18:	4669      	mov	r1, sp
   b8b1a:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b8b1c:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b8b20:	f007 f848 	bl	bfbb4 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b8b24:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b8b28:	f006 ff09 	bl	bf93e <strlen>
   b8b2c:	4639      	mov	r1, r7
   b8b2e:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b8b32:	4628      	mov	r0, r5
   b8b34:	f007 f83e 	bl	bfbb4 <write>
                close(fd);
   b8b38:	4628      	mov	r0, r5
   b8b3a:	f006 fffb 	bl	bfb34 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b8b3e:	4808      	ldr	r0, [pc, #32]	; (b8b60 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b8b40:	4632      	mov	r2, r6
   b8b42:	4659      	mov	r1, fp
   b8b44:	f7fe f904 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b8b48:	4631      	mov	r1, r6
   b8b4a:	4640      	mov	r0, r8
   b8b4c:	f002 f944 	bl	badd8 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b8b50:	2f00      	cmp	r7, #0
   b8b52:	d0b9      	beq.n	b8ac8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b8b54:	2143      	movs	r1, #67	; 0x43
   b8b56:	4638      	mov	r0, r7
   b8b58:	f7fb faa1 	bl	b409e <_ZdlPvj>
   b8b5c:	e7b2      	b.n	b8ac4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b8b5e:	bf00      	nop
   b8b60:	2003e448 	.word	0x2003e448
   b8b64:	31b67663 	.word	0x31b67663
   b8b68:	00410801 	.word	0x00410801
   b8b6c:	000c0e1b 	.word	0x000c0e1b

000b8b70 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b8b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8b74:	4604      	mov	r4, r0
   b8b76:	f7ff fe36 	bl	b87e6 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b8b7a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b8b7e:	f7ff ff53 	bl	b8a28 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8b82:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b8b84:	4298      	cmp	r0, r3
   b8b86:	d902      	bls.n	b8b8e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b8b88:	4620      	mov	r0, r4
   b8b8a:	f7ff ff91 	bl	b8ab0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b8b8e:	f8df 8044 	ldr.w	r8, [pc, #68]	; b8bd4 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b8b92:	4f0f      	ldr	r7, [pc, #60]	; (b8bd0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b8b94:	1d26      	adds	r6, r4, #4
   b8b96:	4630      	mov	r0, r6
   b8b98:	f002 f938 	bl	bae0c <_ZNK14SequentialFile11getQueueLenEv>
   b8b9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b8b9e:	4298      	cmp	r0, r3
   b8ba0:	dc04      	bgt.n	b8bac <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b8ba2:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b8ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8ba8:	f002 bae4 	b.w	bb174 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b8bac:	2101      	movs	r1, #1
   b8bae:	4630      	mov	r0, r6
   b8bb0:	f002 f8dc 	bl	bad6c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b8bb4:	4605      	mov	r5, r0
   b8bb6:	2800      	cmp	r0, #0
   b8bb8:	d0ed      	beq.n	b8b96 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b8bba:	4601      	mov	r1, r0
   b8bbc:	2200      	movs	r2, #0
   b8bbe:	4630      	mov	r0, r6
   b8bc0:	f001 ff0c 	bl	ba9dc <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b8bc4:	462a      	mov	r2, r5
   b8bc6:	4641      	mov	r1, r8
   b8bc8:	4638      	mov	r0, r7
   b8bca:	f7fb fa87 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b8bce:	e7e2      	b.n	b8b96 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b8bd0:	2003e448 	.word	0x2003e448
   b8bd4:	000c0e38 	.word	0x000c0e38

000b8bd8 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b8bd8:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b8bda:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b8bde:	430b      	orrs	r3, r1
   b8be0:	d005      	beq.n	b8bee <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b8be2:	3840      	subs	r0, #64	; 0x40
   b8be4:	ea50 0301 	orrs.w	r3, r0, r1
   b8be8:	d10b      	bne.n	b8c02 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b8bea:	2a09      	cmp	r2, #9
   b8bec:	d109      	bne.n	b8c02 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b8bee:	4905      	ldr	r1, [pc, #20]	; (b8c04 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b8bf0:	4805      	ldr	r0, [pc, #20]	; (b8c08 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b8bf2:	f7fe f8ad 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b8bf6:	f7ff ff07 	bl	b8a08 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b8bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b8bfe:	f7ff bf57 	b.w	b8ab0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b8c02:	bd08      	pop	{r3, pc}
   b8c04:	000c0e4b 	.word	0x000c0e4b
   b8c08:	2003e448 	.word	0x2003e448

000b8c0c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b8c0c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b8c0e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b8c10:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b8c12:	b183      	cbz	r3, b8c36 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b8c14:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b8c16:	6945      	ldr	r5, [r0, #20]
   b8c18:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b8c1a:	42ae      	cmp	r6, r5
   b8c1c:	d906      	bls.n	b8c2c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b8c1e:	f855 0b04 	ldr.w	r0, [r5], #4
   b8c22:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8c26:	f7fb fa3a 	bl	b409e <_ZdlPvj>
   b8c2a:	e7f6      	b.n	b8c1a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b8c2c:	6861      	ldr	r1, [r4, #4]
   b8c2e:	6820      	ldr	r0, [r4, #0]
   b8c30:	0089      	lsls	r1, r1, #2
   b8c32:	f7fb fa34 	bl	b409e <_ZdlPvj>
    }
   b8c36:	4620      	mov	r0, r4
   b8c38:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8c3c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b8c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8c3e:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b8c42:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b8c44:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8c46:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b8c48:	b90a      	cbnz	r2, b8c4e <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b8c4a:	07d9      	lsls	r1, r3, #31
   b8c4c:	d505      	bpl.n	b8c5a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8c4e:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b8c52:	4b0a      	ldr	r3, [pc, #40]	; (b8c7c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b8c54:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8c56:	4b0a      	ldr	r3, [pc, #40]	; (b8c80 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b8c58:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b8c5a:	4621      	mov	r1, r4
   b8c5c:	4668      	mov	r0, sp
   b8c5e:	f7fe fefc 	bl	b7a5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c62:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8c64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c66:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c68:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8c6a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b8c6c:	4668      	mov	r0, sp
   b8c6e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c70:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8c72:	9203      	str	r2, [sp, #12]
   b8c74:	f7fc f88d 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
	}
   b8c78:	b004      	add	sp, #16
   b8c7a:	bd10      	pop	{r4, pc}
   b8c7c:	000b879d 	.word	0x000b879d
   b8c80:	000b87bb 	.word	0x000b87bb

000b8c84 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b8c84:	b570      	push	{r4, r5, r6, lr}
   b8c86:	b086      	sub	sp, #24
   b8c88:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8c8a:	f002 fd9f 	bl	bb7cc <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b8c8e:	b948      	cbnz	r0, b8ca4 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b8c90:	4b43      	ldr	r3, [pc, #268]	; (b8da0 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b8c92:	a902      	add	r1, sp, #8
   b8c94:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b8c98:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8c9c:	f7ff ffce 	bl	b8c3c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b8ca0:	b006      	add	sp, #24
   b8ca2:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b8ca4:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b8ca8:	b11d      	cbz	r5, b8cb2 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b8caa:	2301      	movs	r3, #1
   b8cac:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b8cb0:	e7f6      	b.n	b8ca0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b8cb2:	f002 fa97 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b8cb6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8cba:	1ac0      	subs	r0, r0, r3
   b8cbc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8cc0:	4298      	cmp	r0, r3
   b8cc2:	d3ed      	bcc.n	b8ca0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b8cc4:	1d26      	adds	r6, r4, #4
   b8cc6:	4629      	mov	r1, r5
   b8cc8:	4630      	mov	r0, r6
   b8cca:	f002 f84f 	bl	bad6c <_ZN14SequentialFile16getFileFromQueueEb>
   b8cce:	4601      	mov	r1, r0
   b8cd0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b8cd4:	2800      	cmp	r0, #0
   b8cd6:	d052      	beq.n	b8d7e <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b8cd8:	4620      	mov	r0, r4
   b8cda:	f7ff fdb9 	bl	b8850 <_ZN17PublishQueuePosix13readQueueFileEi>
   b8cde:	4605      	mov	r5, r0
   b8ce0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b8ce4:	2800      	cmp	r0, #0
   b8ce6:	d035      	beq.n	b8d54 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b8ce8:	f002 fa7c 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b8cec:	ae02      	add	r6, sp, #8
   b8cee:	2500      	movs	r5, #0
   b8cf0:	4b2c      	ldr	r3, [pc, #176]	; (b8da4 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b8cf2:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b8cf6:	4631      	mov	r1, r6
   b8cf8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8cfc:	9302      	str	r3, [sp, #8]
   b8cfe:	9503      	str	r5, [sp, #12]
   b8d00:	f7ff ff9c 	bl	b8c3c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8d04:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b8d08:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b8d0c:	9200      	str	r2, [sp, #0]
   b8d0e:	4926      	ldr	r1, [pc, #152]	; (b8da8 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b8d10:	4a26      	ldr	r2, [pc, #152]	; (b8dac <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b8d12:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8d16:	42a8      	cmp	r0, r5
   b8d18:	bf08      	it	eq
   b8d1a:	460a      	moveq	r2, r1
   b8d1c:	3301      	adds	r3, #1
   b8d1e:	4924      	ldr	r1, [pc, #144]	; (b8db0 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b8d20:	4824      	ldr	r0, [pc, #144]	; (b8db4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b8d22:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8d26:	f7fe f813 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b8d2a:	f7fe fdd9 	bl	b78e0 <_ZN19BackgroundPublishRK8instanceEv>
   b8d2e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b8d32:	4b21      	ldr	r3, [pc, #132]	; (b8db8 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b8d34:	9305      	str	r3, [sp, #20]
   b8d36:	e9cd 6500 	strd	r6, r5, [sp]
   b8d3a:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b8d3c:	4b1f      	ldr	r3, [pc, #124]	; (b8dbc <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8d3e:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b8d40:	9304      	str	r3, [sp, #16]
   b8d42:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8d46:	3242      	adds	r2, #66	; 0x42
   b8d48:	f7fe ff16 	bl	b7b78 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b8d4c:	4630      	mov	r0, r6
   b8d4e:	f7fc f820 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   b8d52:	e7a5      	b.n	b8ca0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b8d54:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b8d58:	4919      	ldr	r1, [pc, #100]	; (b8dc0 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b8d5a:	4816      	ldr	r0, [pc, #88]	; (b8db4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b8d5c:	f7fb f9be 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b8d60:	2101      	movs	r1, #1
   b8d62:	4630      	mov	r0, r6
   b8d64:	f002 f802 	bl	bad6c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b8d68:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b8d6c:	462a      	mov	r2, r5
   b8d6e:	4630      	mov	r0, r6
   b8d70:	f001 fe34 	bl	ba9dc <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b8d74:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b8d78:	2b00      	cmp	r3, #0
   b8d7a:	d1b5      	bne.n	b8ce8 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b8d7c:	e795      	b.n	b8caa <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b8d7e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b8d82:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b8d86:	429a      	cmp	r2, r3
   b8d88:	d007      	beq.n	b8d9a <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b8d8a:	681b      	ldr	r3, [r3, #0]
   b8d8c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b8d90:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b8d94:	f7ff fe73 	bl	b8a7e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b8d98:	e7ec      	b.n	b8d74 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b8d9a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b8d9e:	e784      	b.n	b8caa <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b8da0:	000b8dc5 	.word	0x000b8dc5
   b8da4:	000b9145 	.word	0x000b9145
   b8da8:	000c0e7a 	.word	0x000c0e7a
   b8dac:	000c136c 	.word	0x000c136c
   b8db0:	000c0e9b 	.word	0x000c0e9b
   b8db4:	2003e448 	.word	0x2003e448
   b8db8:	000b878d 	.word	0x000b878d
   b8dbc:	000b87d3 	.word	0x000b87d3
   b8dc0:	000c0e7e 	.word	0x000c0e7e

000b8dc4 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b8dc4:	b513      	push	{r0, r1, r4, lr}
   b8dc6:	4604      	mov	r4, r0
   b8dc8:	f002 fd00 	bl	bb7cc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b8dcc:	b190      	cbz	r0, b8df4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b8dce:	f002 fa09 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b8dd2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8dd6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b8dda:	4b0d      	ldr	r3, [pc, #52]	; (b8e10 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b8ddc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b8de0:	9300      	str	r3, [sp, #0]
   b8de2:	4669      	mov	r1, sp
   b8de4:	2300      	movs	r3, #0
   b8de6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8dea:	9301      	str	r3, [sp, #4]
   b8dec:	f7ff ff26 	bl	b8c3c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b8df0:	b002      	add	sp, #8
   b8df2:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b8df4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b8df8:	b11b      	cbz	r3, b8e02 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b8dfa:	2301      	movs	r3, #1
   b8dfc:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b8e00:	e7f6      	b.n	b8df0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b8e02:	4620      	mov	r0, r4
   b8e04:	f7ff fe21 	bl	b8a4a <_ZN17PublishQueuePosix12getNumEventsEv>
   b8e08:	2800      	cmp	r0, #0
   b8e0a:	d0f6      	beq.n	b8dfa <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b8e0c:	e7f0      	b.n	b8df0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b8e0e:	bf00      	nop
   b8e10:	000b8c85 	.word	0x000b8c85

000b8e14 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b8e14:	b570      	push	{r4, r5, r6, lr}
   b8e16:	4605      	mov	r5, r0
   b8e18:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b8e1a:	2000      	movs	r0, #0
   b8e1c:	f002 fc74 	bl	bb708 <system_thread_get_state>
   b8e20:	2801      	cmp	r0, #1
   b8e22:	d005      	beq.n	b8e30 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b8e24:	493e      	ldr	r1, [pc, #248]	; (b8f20 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b8e26:	483f      	ldr	r0, [pc, #252]	; (b8f24 <_ZN17PublishQueuePosix5setupEv+0x110>)
   b8e28:	f7fd ff84 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
}
   b8e2c:	b018      	add	sp, #96	; 0x60
   b8e2e:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b8e30:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b8e34:	f002 f986 	bl	bb144 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8e38:	4b3b      	ldr	r3, [pc, #236]	; (b8f28 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b8e3a:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8e3c:	4b3b      	ldr	r3, [pc, #236]	; (b8f2c <_ZN17PublishQueuePosix5setupEv+0x118>)
   b8e3e:	9307      	str	r3, [sp, #28]
        };
   b8e40:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b8e42:	4b3b      	ldr	r3, [pc, #236]	; (b8f30 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b8e44:	9306      	str	r3, [sp, #24]
   b8e46:	a808      	add	r0, sp, #32
   b8e48:	f7fc f908 	bl	b505c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b8e4c:	a908      	add	r1, sp, #32
   b8e4e:	a80c      	add	r0, sp, #48	; 0x30
   b8e50:	f7fc f904 	bl	b505c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b8e54:	a90c      	add	r1, sp, #48	; 0x30
   b8e56:	a810      	add	r0, sp, #64	; 0x40
   b8e58:	f7fc f900 	bl	b505c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b8e5c:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e5e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b8e60:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e62:	f7fb f918 	bl	b4096 <_Znwj>
   b8e66:	4604      	mov	r4, r0
   b8e68:	b160      	cbz	r0, b8e84 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b8e6a:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8e6c:	4601      	mov	r1, r0
   b8e6e:	a810      	add	r0, sp, #64	; 0x40
   b8e70:	f7fe fdf3 	bl	b7a5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e74:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b8e76:	68a2      	ldr	r2, [r4, #8]
   b8e78:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b8e7a:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8e7c:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b8e80:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8e82:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b8e84:	4b2b      	ldr	r3, [pc, #172]	; (b8f34 <_ZN17PublishQueuePosix5setupEv+0x120>)
   b8e86:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b8e88:	4b2b      	ldr	r3, [pc, #172]	; (b8f38 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b8e8a:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b8e8c:	4b2b      	ldr	r3, [pc, #172]	; (b8f3c <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e8e:	9414      	str	r4, [sp, #80]	; 0x50
   b8e90:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b8e92:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b8e94:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b8e98:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b8e9a:	f7fb f8fc 	bl	b4096 <_Znwj>
   b8e9e:	4604      	mov	r4, r0
   b8ea0:	b1d8      	cbz	r0, b8eda <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b8ea2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b8ea4:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b8ea6:	b133      	cbz	r3, b8eb6 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8ea8:	2202      	movs	r2, #2
   b8eaa:	a914      	add	r1, sp, #80	; 0x50
   b8eac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8eae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8eb0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8eb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b8eb4:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b8eb6:	4b22      	ldr	r3, [pc, #136]	; (b8f40 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b8eb8:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b8eba:	4a22      	ldr	r2, [pc, #136]	; (b8f44 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b8ebc:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b8ebe:	ab01      	add	r3, sp, #4
   b8ec0:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b8ec4:	2100      	movs	r1, #0
   b8ec6:	f002 fbff 	bl	bb6c8 <system_subscribe_event>
        if (r) {
   b8eca:	b130      	cbz	r0, b8eda <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b8ecc:	4620      	mov	r0, r4
   b8ece:	f7fb ff60 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b8ed2:	2110      	movs	r1, #16
   b8ed4:	4620      	mov	r0, r4
   b8ed6:	f7fb f8e2 	bl	b409e <_ZdlPvj>
   b8eda:	a814      	add	r0, sp, #80	; 0x50
   b8edc:	f7fb ff59 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   b8ee0:	a810      	add	r0, sp, #64	; 0x40
   b8ee2:	f7fb ff56 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   b8ee6:	a80c      	add	r0, sp, #48	; 0x30
   b8ee8:	f7fb ff53 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   b8eec:	a808      	add	r0, sp, #32
   b8eee:	f7fb ff50 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   b8ef2:	a804      	add	r0, sp, #16
   b8ef4:	f7fb ff4d 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b8ef8:	f7fe fcf2 	bl	b78e0 <_ZN19BackgroundPublishRK8instanceEv>
   b8efc:	f7fe fe16 	bl	b7b2c <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b8f00:	1d28      	adds	r0, r5, #4
   b8f02:	f001 feaf 	bl	bac64 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b8f06:	4628      	mov	r0, r5
   b8f08:	f7ff fe32 	bl	b8b70 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b8f0c:	4b0e      	ldr	r3, [pc, #56]	; (b8f48 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b8f0e:	9314      	str	r3, [sp, #80]	; 0x50
   b8f10:	a914      	add	r1, sp, #80	; 0x50
   b8f12:	2300      	movs	r3, #0
   b8f14:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b8f18:	9315      	str	r3, [sp, #84]	; 0x54
   b8f1a:	f7ff fe8f 	bl	b8c3c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8f1e:	e785      	b.n	b8e2c <_ZN17PublishQueuePosix5setupEv+0x18>
   b8f20:	000c0eba 	.word	0x000c0eba
   b8f24:	2003e448 	.word	0x2003e448
   b8f28:	000b8bd9 	.word	0x000b8bd9
   b8f2c:	000b4d6f 	.word	0x000b4d6f
   b8f30:	000b4d5b 	.word	0x000b4d5b
   b8f34:	000b4d35 	.word	0x000b4d35
   b8f38:	000b5185 	.word	0x000b5185
   b8f3c:	000c0002 	.word	0x000c0002
   b8f40:	000b4da5 	.word	0x000b4da5
   b8f44:	000b4d0d 	.word	0x000b4d0d
   b8f48:	000b8dc5 	.word	0x000b8dc5

000b8f4c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b8f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8f50:	4606      	mov	r6, r0
   b8f52:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8f54:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8f56:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8f58:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8f5a:	1a47      	subs	r7, r0, r1
   b8f5c:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b8f60:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8f62:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b8f66:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8f68:	d927      	bls.n	b8fba <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b8f6a:	1b5d      	subs	r5, r3, r5
   b8f6c:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8f6e:	6832      	ldr	r2, [r6, #0]
   b8f70:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b8f72:	b10c      	cbz	r4, b8f78 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b8f74:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b8f78:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8f7a:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b8f7c:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b8f7e:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b8f80:	eba3 0201 	sub.w	r2, r3, r1
   b8f84:	d913      	bls.n	b8fae <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b8f86:	4299      	cmp	r1, r3
   b8f88:	d002      	beq.n	b8f90 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8f8a:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8f8c:	f006 fc02 	bl	bf794 <memmove>
	_M_node = __new_node;
   b8f90:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b8f92:	6823      	ldr	r3, [r4, #0]
   b8f94:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8f96:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8f9a:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b8f9c:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b8f9e:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b8fa0:	59e3      	ldr	r3, [r4, r7]
   b8fa2:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8fa4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8fa8:	6233      	str	r3, [r6, #32]
    }
   b8faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b8fae:	4299      	cmp	r1, r3
   b8fb0:	d0ee      	beq.n	b8f90 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8fb2:	1d38      	adds	r0, r7, #4
   b8fb4:	1a80      	subs	r0, r0, r2
   b8fb6:	4420      	add	r0, r4
   b8fb8:	e7e8      	b.n	b8f8c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b8fba:	f103 0802 	add.w	r8, r3, #2
   b8fbe:	454b      	cmp	r3, r9
   b8fc0:	bf2c      	ite	cs
   b8fc2:	4498      	addcs	r8, r3
   b8fc4:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b8fc6:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b8fca:	d301      	bcc.n	b8fd0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b8fcc:	f005 fec4 	bl	bed58 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8fd0:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b8fd4:	f7fb f85f 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8fd8:	eba8 0505 	sub.w	r5, r8, r5
   b8fdc:	086d      	lsrs	r5, r5, #1
   b8fde:	4682      	mov	sl, r0
   b8fe0:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b8fe2:	b10c      	cbz	r4, b8fe8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b8fe4:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b8fe8:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b8fea:	6971      	ldr	r1, [r6, #20]
   b8fec:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b8fee:	442c      	add	r4, r5
	  if (_Num)
   b8ff0:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8ff2:	4454      	add	r4, sl
   b8ff4:	d003      	beq.n	b8ffe <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8ff6:	1a52      	subs	r2, r2, r1
   b8ff8:	4620      	mov	r0, r4
   b8ffa:	f006 fbcb 	bl	bf794 <memmove>
	::operator delete(__p
   b8ffe:	6871      	ldr	r1, [r6, #4]
   b9000:	6830      	ldr	r0, [r6, #0]
   b9002:	0089      	lsls	r1, r1, #2
   b9004:	f7fb f84b 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b9008:	e9c6 a800 	strd	sl, r8, [r6]
   b900c:	e7c0      	b.n	b8f90 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b9010 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9010:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9012:	b085      	sub	sp, #20
   b9014:	4604      	mov	r4, r0
   b9016:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b901a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b901e:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9020:	460f      	mov	r7, r1
   b9022:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b9024:	f7ff fbec 	bl	b8800 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b9028:	4605      	mov	r5, r0
   b902a:	2800      	cmp	r0, #0
   b902c:	d03c      	beq.n	b90a8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b902e:	4b3f      	ldr	r3, [pc, #252]	; (b912c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b9030:	493f      	ldr	r1, [pc, #252]	; (b9130 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b9032:	4840      	ldr	r0, [pc, #256]	; (b9134 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9034:	2e00      	cmp	r6, #0
   b9036:	bf18      	it	ne
   b9038:	4633      	movne	r3, r6
   b903a:	463a      	mov	r2, r7
   b903c:	f7fd fe88 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
   b9040:	4620      	mov	r0, r4
   b9042:	f7ff fbd0 	bl	b87e6 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b9046:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b904a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b904e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b9050:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b9052:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b9056:	d029      	beq.n	b90ac <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9058:	b103      	cbz	r3, b905c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b905a:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b905c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b9060:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b9062:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b9064:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b9068:	4628      	mov	r0, r5
   b906a:	f001 fecf 	bl	bae0c <_ZNK14SequentialFile11getQueueLenEv>
   b906e:	9003      	str	r0, [sp, #12]
   b9070:	4630      	mov	r0, r6
   b9072:	f7ff fcd9 	bl	b8a28 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9076:	9002      	str	r0, [sp, #8]
   b9078:	f002 fba8 	bl	bb7cc <spark_cloud_flag_connected>
   b907c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b9080:	9000      	str	r0, [sp, #0]
   b9082:	492d      	ldr	r1, [pc, #180]	; (b9138 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b9084:	482b      	ldr	r0, [pc, #172]	; (b9134 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9086:	f7fd fe63 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b908a:	4628      	mov	r0, r5
   b908c:	f001 febe 	bl	bae0c <_ZNK14SequentialFile11getQueueLenEv>
   b9090:	2800      	cmp	r0, #0
   b9092:	d03b      	beq.n	b910c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b9094:	4620      	mov	r0, r4
   b9096:	f7ff fd0b 	bl	b8ab0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b909a:	4620      	mov	r0, r4
   b909c:	f7ff fd68 	bl	b8b70 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b90a0:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b90a2:	f002 f867 	bl	bb174 <os_mutex_recursive_unlock>
    return true;
   b90a6:	2001      	movs	r0, #1
}
   b90a8:	b005      	add	sp, #20
   b90aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b90ac:	4630      	mov	r0, r6
   b90ae:	f7ff fcbb 	bl	b8a28 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b90b2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b90b6:	4298      	cmp	r0, r3
   b90b8:	d102      	bne.n	b90c0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b90ba:	4820      	ldr	r0, [pc, #128]	; (b913c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b90bc:	f005 fe4f 	bl	bed5e <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b90c0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b90c4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b90c6:	1a9a      	subs	r2, r3, r2
   b90c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b90ca:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b90ce:	2b01      	cmp	r3, #1
   b90d0:	d804      	bhi.n	b90dc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b90d2:	2200      	movs	r2, #0
   b90d4:	2101      	movs	r1, #1
   b90d6:	4630      	mov	r0, r6
   b90d8:	f7ff ff38 	bl	b8f4c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b90dc:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b90e0:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b90e4:	f7fa ffd7 	bl	b4096 <_Znwj>
   b90e8:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b90ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b90ee:	b103      	cbz	r3, b90f2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b90f0:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b90f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b90f6:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b90f8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b90fc:	685b      	ldr	r3, [r3, #4]
   b90fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9102:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9106:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b910a:	e7aa      	b.n	b9062 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b910c:	4630      	mov	r0, r6
   b910e:	f7ff fc8b 	bl	b8a28 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9112:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b9114:	4298      	cmp	r0, r3
   b9116:	d8bd      	bhi.n	b9094 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b9118:	f002 fb58 	bl	bb7cc <spark_cloud_flag_connected>
   b911c:	2800      	cmp	r0, #0
   b911e:	d0b9      	beq.n	b9094 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b9120:	4907      	ldr	r1, [pc, #28]	; (b9140 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b9122:	4804      	ldr	r0, [pc, #16]	; (b9134 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9124:	f7fd fe14 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
   b9128:	e7b7      	b.n	b909a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b912a:	bf00      	nop
   b912c:	000c1579 	.word	0x000c1579
   b9130:	000c0edd 	.word	0x000c0edd
   b9134:	2003e448 	.word	0x2003e448
   b9138:	000c0f35 	.word	0x000c0f35
   b913c:	000c0f05 	.word	0x000c0f05
   b9140:	000c0f61 	.word	0x000c0f61

000b9144 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b9144:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b9146:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b914a:	4604      	mov	r4, r0
    if (!publishComplete) {
   b914c:	2b00      	cmp	r3, #0
   b914e:	d041      	beq.n	b91d4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b9150:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b9154:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b9158:	2b00      	cmp	r3, #0
   b915a:	d03d      	beq.n	b91d8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b915c:	4950      	ldr	r1, [pc, #320]	; (b92a0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b915e:	4851      	ldr	r0, [pc, #324]	; (b92a4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9160:	f7fd fdf6 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b9164:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9168:	b1d3      	cbz	r3, b91a0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b916a:	1d26      	adds	r6, r4, #4
   b916c:	2100      	movs	r1, #0
   b916e:	4630      	mov	r0, r6
   b9170:	f001 fdfc 	bl	bad6c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b9174:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9178:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b917a:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b917c:	d10d      	bne.n	b919a <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b917e:	2101      	movs	r1, #1
   b9180:	4630      	mov	r0, r6
   b9182:	f001 fdf3 	bl	bad6c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b9186:	2200      	movs	r2, #0
   b9188:	4629      	mov	r1, r5
   b918a:	4630      	mov	r0, r6
   b918c:	f001 fc26 	bl	ba9dc <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b9190:	4945      	ldr	r1, [pc, #276]	; (b92a8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b9192:	4844      	ldr	r0, [pc, #272]	; (b92a4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9194:	462a      	mov	r2, r5
   b9196:	f7fd fddb 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b919a:	2300      	movs	r3, #0
   b919c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b91a0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b91a4:	b110      	cbz	r0, b91ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b91a6:	2143      	movs	r1, #67	; 0x43
   b91a8:	f7fa ff79 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b91ac:	2300      	movs	r3, #0
   b91ae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b91b2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b91b6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b91ba:	4b3c      	ldr	r3, [pc, #240]	; (b92ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b91bc:	9300      	str	r3, [sp, #0]
   b91be:	4669      	mov	r1, sp
   b91c0:	2300      	movs	r3, #0
   b91c2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b91c6:	9301      	str	r3, [sp, #4]
   b91c8:	f7ff fd38 	bl	b8c3c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b91cc:	f002 f80a 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b91d0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b91d4:	b002      	add	sp, #8
   b91d6:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b91d8:	4935      	ldr	r1, [pc, #212]	; (b92b0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b91da:	4832      	ldr	r0, [pc, #200]	; (b92a4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b91dc:	f7fd fdb8 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b91e0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b91e4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b91e8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b91ec:	b14b      	cbz	r3, b9202 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b91ee:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b91f2:	b110      	cbz	r0, b91fa <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b91f4:	2143      	movs	r1, #67	; 0x43
   b91f6:	f7fa ff52 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b91fa:	2300      	movs	r3, #0
   b91fc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b9200:	e7db      	b.n	b91ba <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b9202:	4620      	mov	r0, r4
   b9204:	f7ff faef 	bl	b87e6 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b9208:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b920c:	4293      	cmp	r3, r2
   b920e:	d013      	beq.n	b9238 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b9210:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b9214:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b9218:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b921c:	3b04      	subs	r3, #4
   b921e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b9222:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b9224:	f001 ffa6 	bl	bb174 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b9228:	4922      	ldr	r1, [pc, #136]	; (b92b4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b922a:	481e      	ldr	r0, [pc, #120]	; (b92a4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b922c:	f7fd fd90 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b9230:	4620      	mov	r0, r4
   b9232:	f7ff fc3d 	bl	b8ab0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b9236:	e7c0      	b.n	b91ba <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b9238:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b923c:	4628      	mov	r0, r5
   b923e:	f7ff fbf3 	bl	b8a28 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9242:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b9246:	4298      	cmp	r0, r3
   b9248:	d102      	bne.n	b9250 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b924a:	481b      	ldr	r0, [pc, #108]	; (b92b8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b924c:	f005 fd87 	bl	bed5e <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b9250:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b9254:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b9256:	429a      	cmp	r2, r3
   b9258:	d104      	bne.n	b9264 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b925a:	2201      	movs	r2, #1
   b925c:	4611      	mov	r1, r2
   b925e:	4628      	mov	r0, r5
   b9260:	f7ff fe74 	bl	b8f4c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9264:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b9268:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b926c:	f7fa ff13 	bl	b4096 <_Znwj>
   b9270:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b9274:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b9278:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b927a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b927e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b9282:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9286:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b928a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b928e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b9292:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9296:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b929a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b929e:	e7c0      	b.n	b9222 <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b92a0:	000c0f74 	.word	0x000c0f74
   b92a4:	2003e448 	.word	0x2003e448
   b92a8:	000c0f87 	.word	0x000c0f87
   b92ac:	000b8c85 	.word	0x000b8c85
   b92b0:	000c0f97 	.word	0x000c0f97
   b92b4:	000c0fa9 	.word	0x000c0fa9
   b92b8:	000c0f05 	.word	0x000c0f05

000b92bc <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b92bc:	4b01      	ldr	r3, [pc, #4]	; (b92c4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b92be:	4a02      	ldr	r2, [pc, #8]	; (b92c8 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b92c0:	601a      	str	r2, [r3, #0]
}
   b92c2:	4770      	bx	lr
   b92c4:	2003e448 	.word	0x2003e448
   b92c8:	000c0fd0 	.word	0x000c0fd0

000b92cc <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b92cc:	b510      	push	{r4, lr}
   b92ce:	4b07      	ldr	r3, [pc, #28]	; (b92ec <_ZN17PublishQueuePosixD1Ev+0x20>)
   b92d0:	4604      	mov	r4, r0
   b92d2:	f840 3bc0 	str.w	r3, [r0], #192
   b92d6:	f7fb fd5c 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b92da:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b92de:	f7ff fc95 	bl	b8c0c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b92e2:	1d20      	adds	r0, r4, #4
   b92e4:	f001 fbfe 	bl	baae4 <_ZN14SequentialFileD1Ev>
}
   b92e8:	4620      	mov	r0, r4
   b92ea:	bd10      	pop	{r4, pc}
   b92ec:	000c0fe4 	.word	0x000c0fe4

000b92f0 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b92f0:	b510      	push	{r4, lr}
   b92f2:	4604      	mov	r4, r0
}
   b92f4:	f7ff ffea 	bl	b92cc <_ZN17PublishQueuePosixD1Ev>
   b92f8:	4620      	mov	r0, r4
   b92fa:	21d0      	movs	r1, #208	; 0xd0
   b92fc:	f7fa fecf 	bl	b409e <_ZdlPvj>
   b9300:	4620      	mov	r0, r4
   b9302:	bd10      	pop	{r4, pc}

000b9304 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b9304:	6001      	str	r1, [r0, #0]
   b9306:	7102      	strb	r2, [r0, #4]
{
}
   b9308:	4770      	bx	lr

000b930a <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b930a:	6800      	ldr	r0, [r0, #0]
   b930c:	6803      	ldr	r3, [r0, #0]
   b930e:	68db      	ldr	r3, [r3, #12]
   b9310:	4718      	bx	r3

000b9312 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b9312:	6800      	ldr	r0, [r0, #0]
   b9314:	6803      	ldr	r3, [r0, #0]
   b9316:	6a1b      	ldr	r3, [r3, #32]
   b9318:	4718      	bx	r3

000b931a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b931a:	6800      	ldr	r0, [r0, #0]
   b931c:	6803      	ldr	r3, [r0, #0]
   b931e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9320:	4718      	bx	r3

000b9322 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b9322:	7900      	ldrb	r0, [r0, #4]
   b9324:	4770      	bx	lr

000b9326 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b9326:	6800      	ldr	r0, [r0, #0]
   b9328:	6803      	ldr	r3, [r0, #0]
   b932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b932c:	4718      	bx	r3

000b932e <_ZN10RHDatagram6sendtoEPhhh>:
{
   b932e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9330:	4605      	mov	r5, r0
   b9332:	460c      	mov	r4, r1
    setHeaderTo(address);
   b9334:	4619      	mov	r1, r3
{
   b9336:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b9338:	f7ff fff5 	bl	b9326 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b933c:	6828      	ldr	r0, [r5, #0]
   b933e:	9a01      	ldr	r2, [sp, #4]
   b9340:	6803      	ldr	r3, [r0, #0]
   b9342:	695b      	ldr	r3, [r3, #20]
   b9344:	4621      	mov	r1, r4
}
   b9346:	b003      	add	sp, #12
   b9348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b934c:	4718      	bx	r3

000b934e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b934e:	6800      	ldr	r0, [r0, #0]
   b9350:	6803      	ldr	r3, [r0, #0]
   b9352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9354:	4718      	bx	r3

000b9356 <_ZN10RHDatagram14setThisAddressEh>:
{
   b9356:	b538      	push	{r3, r4, r5, lr}
   b9358:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b935a:	6800      	ldr	r0, [r0, #0]
   b935c:	6803      	ldr	r3, [r0, #0]
{
   b935e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b9360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9362:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b9364:	4629      	mov	r1, r5
   b9366:	4620      	mov	r0, r4
   b9368:	f7ff fff1 	bl	b934e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b936c:	7125      	strb	r5, [r4, #4]
}
   b936e:	bd38      	pop	{r3, r4, r5, pc}

000b9370 <_ZN10RHDatagram4initEv>:
{
   b9370:	b538      	push	{r3, r4, r5, lr}
   b9372:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b9374:	6800      	ldr	r0, [r0, #0]
   b9376:	6803      	ldr	r3, [r0, #0]
   b9378:	689b      	ldr	r3, [r3, #8]
   b937a:	4798      	blx	r3
    if (ret)
   b937c:	4605      	mov	r5, r0
   b937e:	b118      	cbz	r0, b9388 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b9380:	7921      	ldrb	r1, [r4, #4]
   b9382:	4620      	mov	r0, r4
   b9384:	f7ff ffe7 	bl	b9356 <_ZN10RHDatagram14setThisAddressEh>
}
   b9388:	4628      	mov	r0, r5
   b938a:	bd38      	pop	{r3, r4, r5, pc}

000b938c <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b938c:	6800      	ldr	r0, [r0, #0]
   b938e:	6803      	ldr	r3, [r0, #0]
   b9390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9392:	4718      	bx	r3

000b9394 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b9394:	6800      	ldr	r0, [r0, #0]
   b9396:	6803      	ldr	r3, [r0, #0]
   b9398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b939a:	4718      	bx	r3

000b939c <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b939c:	6800      	ldr	r0, [r0, #0]
   b939e:	6803      	ldr	r3, [r0, #0]
   b93a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b93a2:	4718      	bx	r3

000b93a4 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b93a4:	6800      	ldr	r0, [r0, #0]
   b93a6:	6803      	ldr	r3, [r0, #0]
   b93a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b93aa:	4718      	bx	r3

000b93ac <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b93ac:	6800      	ldr	r0, [r0, #0]
   b93ae:	6803      	ldr	r3, [r0, #0]
   b93b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b93b2:	4718      	bx	r3

000b93b4 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b93b4:	6800      	ldr	r0, [r0, #0]
   b93b6:	6803      	ldr	r3, [r0, #0]
   b93b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b93ba:	4718      	bx	r3

000b93bc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b93bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b93c0:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b93c2:	6800      	ldr	r0, [r0, #0]
{
   b93c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b93c6:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b93c8:	6803      	ldr	r3, [r0, #0]
   b93ca:	691b      	ldr	r3, [r3, #16]
{
   b93cc:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b93d0:	4798      	blx	r3
   b93d2:	4605      	mov	r5, r0
   b93d4:	b1c8      	cbz	r0, b940a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b93d6:	b11e      	cbz	r6, b93e0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b93d8:	4620      	mov	r0, r4
   b93da:	f7ff ffe3 	bl	b93a4 <_ZN10RHDatagram10headerFromEv>
   b93de:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b93e0:	f1b9 0f00 	cmp.w	r9, #0
   b93e4:	d004      	beq.n	b93f0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b93e6:	4620      	mov	r0, r4
   b93e8:	f7ff ffd8 	bl	b939c <_ZN10RHDatagram8headerToEv>
   b93ec:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b93f0:	f1b8 0f00 	cmp.w	r8, #0
   b93f4:	d004      	beq.n	b9400 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b93f6:	4620      	mov	r0, r4
   b93f8:	f7ff ffd8 	bl	b93ac <_ZN10RHDatagram8headerIdEv>
   b93fc:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b9400:	b11f      	cbz	r7, b940a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b9402:	4620      	mov	r0, r4
   b9404:	f7ff ffd6 	bl	b93b4 <_ZN10RHDatagram11headerFlagsEv>
   b9408:	7038      	strb	r0, [r7, #0]
}
   b940a:	4628      	mov	r0, r5
   b940c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9410 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b9410:	2001      	movs	r0, #1
   b9412:	4770      	bx	lr

000b9414 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b9414:	7903      	ldrb	r3, [r0, #4]
   b9416:	2b03      	cmp	r3, #3
   b9418:	d0fc      	beq.n	b9414 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b941a:	2001      	movs	r0, #1
   b941c:	4770      	bx	lr

000b941e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b941e:	2000      	movs	r0, #0
   b9420:	4770      	bx	lr

000b9422 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b9422:	7181      	strb	r1, [r0, #6]
}
   b9424:	4770      	bx	lr

000b9426 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b9426:	7141      	strb	r1, [r0, #5]
}
   b9428:	4770      	bx	lr

000b942a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b942a:	72c1      	strb	r1, [r0, #11]
}
   b942c:	4770      	bx	lr

000b942e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b942e:	7301      	strb	r1, [r0, #12]
}
   b9430:	4770      	bx	lr

000b9432 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b9432:	7341      	strb	r1, [r0, #13]
}
   b9434:	4770      	bx	lr

000b9436 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b9436:	7b83      	ldrb	r3, [r0, #14]
   b9438:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b943c:	4311      	orrs	r1, r2
   b943e:	7381      	strb	r1, [r0, #14]
}
   b9440:	4770      	bx	lr

000b9442 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b9442:	79c0      	ldrb	r0, [r0, #7]
}
   b9444:	4770      	bx	lr

000b9446 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b9446:	7a00      	ldrb	r0, [r0, #8]
}
   b9448:	4770      	bx	lr

000b944a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b944a:	7a40      	ldrb	r0, [r0, #9]
}
   b944c:	4770      	bx	lr

000b944e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b944e:	7a80      	ldrb	r0, [r0, #10]
}
   b9450:	4770      	bx	lr

000b9452 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b9452:	8a00      	ldrh	r0, [r0, #16]
}
   b9454:	b200      	sxth	r0, r0
   b9456:	4770      	bx	lr

000b9458 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b9458:	7900      	ldrb	r0, [r0, #4]
}
   b945a:	4770      	bx	lr

000b945c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b945c:	7101      	strb	r1, [r0, #4]
}
   b945e:	4770      	bx	lr

000b9460 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b9460:	8a40      	ldrh	r0, [r0, #18]
}
   b9462:	b280      	uxth	r0, r0
   b9464:	4770      	bx	lr

000b9466 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b9466:	8a80      	ldrh	r0, [r0, #20]
}
   b9468:	b280      	uxth	r0, r0
   b946a:	4770      	bx	lr

000b946c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b946c:	8ac0      	ldrh	r0, [r0, #22]
}
   b946e:	b280      	uxth	r0, r0
   b9470:	4770      	bx	lr

000b9472 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b9472:	b538      	push	{r3, r4, r5, lr}
   b9474:	4605      	mov	r5, r0
   b9476:	460c      	mov	r4, r1
    while (!available())
   b9478:	682b      	ldr	r3, [r5, #0]
   b947a:	4628      	mov	r0, r5
   b947c:	68db      	ldr	r3, [r3, #12]
   b947e:	4798      	blx	r3
   b9480:	b928      	cbnz	r0, b948e <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b9482:	2c00      	cmp	r4, #0
   b9484:	d0f8      	beq.n	b9478 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b9486:	4620      	mov	r0, r4
   b9488:	f002 fac8 	bl	bba1c <delay>
   b948c:	e7f4      	b.n	b9478 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b948e:	bd38      	pop	{r3, r4, r5, pc}

000b9490 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b9490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9492:	4605      	mov	r5, r0
   b9494:	460f      	mov	r7, r1
   b9496:	4614      	mov	r4, r2
   b9498:	f001 fea4 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
   b949c:	4606      	mov	r6, r0
   b949e:	f001 fea1 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b94a2:	1b80      	subs	r0, r0, r6
   b94a4:	42b8      	cmp	r0, r7
   b94a6:	d20a      	bcs.n	b94be <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b94a8:	682b      	ldr	r3, [r5, #0]
   b94aa:	4628      	mov	r0, r5
   b94ac:	68db      	ldr	r3, [r3, #12]
   b94ae:	4798      	blx	r3
   b94b0:	b930      	cbnz	r0, b94c0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b94b2:	2c00      	cmp	r4, #0
   b94b4:	d0f3      	beq.n	b949e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b94b6:	4620      	mov	r0, r4
   b94b8:	f002 fab0 	bl	bba1c <delay>
   b94bc:	e7ef      	b.n	b949e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b94be:	2000      	movs	r0, #0
}
   b94c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b94c2 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b94c2:	b570      	push	{r4, r5, r6, lr}
   b94c4:	4604      	mov	r4, r0
   b94c6:	460e      	mov	r6, r1
   b94c8:	f001 fe8c 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
   b94cc:	4605      	mov	r5, r0
   b94ce:	f001 fe89 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b94d2:	1b40      	subs	r0, r0, r5
   b94d4:	42b0      	cmp	r0, r6
   b94d6:	d204      	bcs.n	b94e2 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b94d8:	7923      	ldrb	r3, [r4, #4]
   b94da:	2b03      	cmp	r3, #3
   b94dc:	d0f7      	beq.n	b94ce <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b94de:	2001      	movs	r0, #1
}
   b94e0:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b94e2:	2000      	movs	r0, #0
   b94e4:	e7fc      	b.n	b94e0 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b94e6 <_ZN15RHGenericDriver7waitCADEv>:
{
   b94e6:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b94e8:	69c3      	ldr	r3, [r0, #28]
{
   b94ea:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b94ec:	b1b3      	cbz	r3, b951c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b94ee:	f001 fe79 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b94f2:	2664      	movs	r6, #100	; 0x64
   b94f4:	4605      	mov	r5, r0
    while (isChannelActive())
   b94f6:	6823      	ldr	r3, [r4, #0]
   b94f8:	4620      	mov	r0, r4
   b94fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b94fc:	4798      	blx	r3
   b94fe:	b168      	cbz	r0, b951c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b9500:	f001 fe70 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b9504:	69e3      	ldr	r3, [r4, #28]
   b9506:	1b40      	subs	r0, r0, r5
   b9508:	4298      	cmp	r0, r3
   b950a:	d809      	bhi.n	b9520 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b950c:	210a      	movs	r1, #10
   b950e:	2001      	movs	r0, #1
   b9510:	f004 fc97 	bl	bde42 <_Z6randomii>
   b9514:	4370      	muls	r0, r6
   b9516:	f002 fa81 	bl	bba1c <delay>
    while (isChannelActive())
   b951a:	e7ec      	b.n	b94f6 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b951c:	2001      	movs	r0, #1
}
   b951e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b9520:	2000      	movs	r0, #0
   b9522:	e7fc      	b.n	b951e <_ZN15RHGenericDriver7waitCADEv+0x38>

000b9524 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b9524:	4a06      	ldr	r2, [pc, #24]	; (b9540 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b9526:	6002      	str	r2, [r0, #0]
   b9528:	21ff      	movs	r1, #255	; 0xff
   b952a:	2200      	movs	r2, #0
   b952c:	7102      	strb	r2, [r0, #4]
   b952e:	7141      	strb	r1, [r0, #5]
   b9530:	8242      	strh	r2, [r0, #18]
   b9532:	72c1      	strb	r1, [r0, #11]
   b9534:	8282      	strh	r2, [r0, #20]
   b9536:	8181      	strh	r1, [r0, #12]
   b9538:	7382      	strb	r2, [r0, #14]
   b953a:	82c2      	strh	r2, [r0, #22]
   b953c:	61c2      	str	r2, [r0, #28]
}
   b953e:	4770      	bx	lr
   b9540:	000c0ff8 	.word	0x000c0ff8

000b9544 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b9544:	4770      	bx	lr

000b9546 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b9546:	4770      	bx	lr

000b9548 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b9548:	4770      	bx	lr

000b954a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b954a:	4770      	bx	lr

000b954c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b954c:	4770      	bx	lr

000b954e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b954e:	7141      	strb	r1, [r0, #5]
}
   b9550:	4770      	bx	lr

000b9552 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b9552:	7181      	strb	r1, [r0, #6]
}
   b9554:	4770      	bx	lr

000b9556 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b9556:	7101      	strb	r1, [r0, #4]
}
   b9558:	4770      	bx	lr
	...

000b955c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b955c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b955e:	4d03      	ldr	r5, [pc, #12]	; (b956c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b9560:	6005      	str	r5, [r0, #0]
   b9562:	7101      	strb	r1, [r0, #4]
   b9564:	7142      	strb	r2, [r0, #5]
   b9566:	7183      	strb	r3, [r0, #6]
}
   b9568:	bd30      	pop	{r4, r5, pc}
   b956a:	bf00      	nop
   b956c:	000c1078 	.word	0x000c1078

000b9570 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b9570:	4770      	bx	lr

000b9572 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b9572:	b510      	push	{r4, lr}
  }
   b9574:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b9576:	4604      	mov	r4, r0
  }
   b9578:	f7fa fd91 	bl	b409e <_ZdlPvj>
   b957c:	4620      	mov	r0, r4
   b957e:	bd10      	pop	{r4, pc}

000b9580 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b9580:	b40e      	push	{r1, r2, r3}
   b9582:	b503      	push	{r0, r1, lr}
   b9584:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b9586:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b9588:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b958c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b958e:	f004 fc1c 	bl	bddca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b9592:	b002      	add	sp, #8
   b9594:	f85d eb04 	ldr.w	lr, [sp], #4
   b9598:	b003      	add	sp, #12
   b959a:	4770      	bx	lr

000b959c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b959c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b959e:	4604      	mov	r4, r0
   b95a0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b95a2:	7922      	ldrb	r2, [r4, #4]
   b95a4:	68a3      	ldr	r3, [r4, #8]
   b95a6:	b132      	cbz	r2, b95b6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b95a8:	b9a3      	cbnz	r3, b95d4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b95aa:	490b      	ldr	r1, [pc, #44]	; (b95d8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b95ac:	b002      	add	sp, #8
   b95ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b95b2:	f004 bb01 	b.w	bdbb8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b95b6:	4a09      	ldr	r2, [pc, #36]	; (b95dc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b95b8:	7b26      	ldrb	r6, [r4, #12]
   b95ba:	4d09      	ldr	r5, [pc, #36]	; (b95e0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b95bc:	4909      	ldr	r1, [pc, #36]	; (b95e4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b95be:	7b64      	ldrb	r4, [r4, #13]
   b95c0:	2e01      	cmp	r6, #1
   b95c2:	bf18      	it	ne
   b95c4:	4629      	movne	r1, r5
   b95c6:	e9cd 1400 	strd	r1, r4, [sp]
   b95ca:	4907      	ldr	r1, [pc, #28]	; (b95e8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b95cc:	f7ff ffd8 	bl	b9580 <_ZN5Print6printfEPKcz>
  }
   b95d0:	b002      	add	sp, #8
   b95d2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b95d4:	4a05      	ldr	r2, [pc, #20]	; (b95ec <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b95d6:	e7ef      	b.n	b95b8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b95d8:	000c10b5 	.word	0x000c10b5
   b95dc:	000c1579 	.word	0x000c1579
   b95e0:	000c10b1 	.word	0x000c10b1
   b95e4:	000c10ad 	.word	0x000c10ad
   b95e8:	000c10cb 	.word	0x000c10cb
   b95ec:	000c10a4 	.word	0x000c10a4

000b95f0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b95f0:	b510      	push	{r4, lr}
   b95f2:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b95f4:	f7ff ffb2 	bl	b955c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b95f8:	4b05      	ldr	r3, [pc, #20]	; (b9610 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b95fa:	6023      	str	r3, [r4, #0]
  {
   b95fc:	4b05      	ldr	r3, [pc, #20]	; (b9614 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b95fe:	60a3      	str	r3, [r4, #8]
   b9600:	2301      	movs	r3, #1
   b9602:	7323      	strb	r3, [r4, #12]
   b9604:	2300      	movs	r3, #0
   b9606:	6123      	str	r3, [r4, #16]
   b9608:	82a3      	strh	r3, [r4, #20]
{
}
   b960a:	4620      	mov	r0, r4
   b960c:	bd10      	pop	{r4, pc}
   b960e:	bf00      	nop
   b9610:	000c1104 	.word	0x000c1104
   b9614:	000c10f0 	.word	0x000c10f0

000b9618 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b9618:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b961a:	4c0b      	ldr	r4, [pc, #44]	; (b9648 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b961c:	7821      	ldrb	r1, [r4, #0]
   b961e:	f3bf 8f5b 	dmb	ish
   b9622:	f011 0101 	ands.w	r1, r1, #1
   b9626:	d10b      	bne.n	b9640 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9628:	4620      	mov	r0, r4
   b962a:	9101      	str	r1, [sp, #4]
   b962c:	f7fa fd46 	bl	b40bc <__cxa_guard_acquire>
   b9630:	9901      	ldr	r1, [sp, #4]
   b9632:	b128      	cbz	r0, b9640 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9634:	4805      	ldr	r0, [pc, #20]	; (b964c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9636:	f004 fc1b 	bl	bde70 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b963a:	4620      	mov	r0, r4
   b963c:	f7fa fd43 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b9640:	4802      	ldr	r0, [pc, #8]	; (b964c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9642:	b002      	add	sp, #8
   b9644:	bd10      	pop	{r4, pc}
   b9646:	bf00      	nop
   b9648:	2003e450 	.word	0x2003e450
   b964c:	2003e454 	.word	0x2003e454

000b9650 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b9650:	b507      	push	{r0, r1, r2, lr}
   b9652:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b9654:	f7ff ffe0 	bl	b9618 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b9658:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b965a:	b003      	add	sp, #12
   b965c:	f85d eb04 	ldr.w	lr, [sp], #4
   b9660:	f004 bcbe 	b.w	bdfe0 <_ZN8SPIClass8transferEh>

000b9664 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b9664:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b9666:	f7ff ffd7 	bl	b9618 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b966a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b966e:	f004 bcbd 	b.w	bdfec <_ZN8SPIClass15attachInterruptEv>

000b9672 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b9672:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b9674:	f7ff ffd0 	bl	b9618 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b9678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b967c:	f004 bcb7 	b.w	bdfee <_ZN8SPIClass15detachInterruptEv>

000b9680 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b9680:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b9682:	7903      	ldrb	r3, [r0, #4]
   b9684:	2b04      	cmp	r3, #4
   b9686:	d020      	beq.n	b96ca <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b9688:	2b03      	cmp	r3, #3
   b968a:	d020      	beq.n	b96ce <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b968c:	2b02      	cmp	r3, #2
   b968e:	d020      	beq.n	b96d2 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b9690:	4a11      	ldr	r2, [pc, #68]	; (b96d8 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b9692:	4912      	ldr	r1, [pc, #72]	; (b96dc <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b9694:	2b01      	cmp	r3, #1
   b9696:	bf18      	it	ne
   b9698:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b969a:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b969c:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b969e:	3901      	subs	r1, #1
   b96a0:	bf18      	it	ne
   b96a2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b96a4:	b133      	cbz	r3, b96b4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b96a6:	2b01      	cmp	r3, #1
   b96a8:	d004      	beq.n	b96b4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b96aa:	2b02      	cmp	r3, #2
   b96ac:	d002      	beq.n	b96b4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b96ae:	2b03      	cmp	r3, #3
   b96b0:	bf18      	it	ne
   b96b2:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b96b4:	2400      	movs	r4, #0
   b96b6:	7304      	strb	r4, [r0, #12]
   b96b8:	6102      	str	r2, [r0, #16]
   b96ba:	7501      	strb	r1, [r0, #20]
   b96bc:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b96be:	f7ff ffab 	bl	b9618 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b96c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b96c6:	f004 bbdd 	b.w	bde84 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b96ca:	4a05      	ldr	r2, [pc, #20]	; (b96e0 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b96cc:	e7e5      	b.n	b969a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b96ce:	4a05      	ldr	r2, [pc, #20]	; (b96e4 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b96d0:	e7e3      	b.n	b969a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b96d2:	4a05      	ldr	r2, [pc, #20]	; (b96e8 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b96d4:	e7e1      	b.n	b969a <_ZN13RHHardwareSPI5beginEv+0x1a>
   b96d6:	bf00      	nop
   b96d8:	001e8480 	.word	0x001e8480
   b96dc:	000f4240 	.word	0x000f4240
   b96e0:	00f42400 	.word	0x00f42400
   b96e4:	007a1200 	.word	0x007a1200
   b96e8:	003d0900 	.word	0x003d0900

000b96ec <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b96ec:	b508      	push	{r3, lr}
        instance().end();
   b96ee:	f7ff ff93 	bl	b9618 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b96f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b96f6:	f004 bbd9 	b.w	bdeac <_ZN8SPIClass3endEv>

000b96fa <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b96fa:	b510      	push	{r4, lr}
   b96fc:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b96fe:	f7ff ff8b 	bl	b9618 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b9702:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b9706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b970a:	f004 bbfb 	b.w	bdf04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b970e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b970e:	b508      	push	{r3, lr}
        instance().endTransaction();
   b9710:	f7ff ff82 	bl	b9618 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b9714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9718:	f004 bbda 	b.w	bded0 <_ZN8SPIClass14endTransactionEv>

000b971c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b971c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b971e:	f7ff ff7b 	bl	b9618 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b9722:	bd08      	pop	{r3, pc}

000b9724 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b9724:	2300      	movs	r3, #0
   b9726:	4802      	ldr	r0, [pc, #8]	; (b9730 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b9728:	461a      	mov	r2, r3
   b972a:	4619      	mov	r1, r3
   b972c:	f7ff bf60 	b.w	b95f0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b9730:	2003e45c 	.word	0x2003e45c

000b9734 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b9734:	2a01      	cmp	r2, #1
   b9736:	d105      	bne.n	b9744 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b9738:	7a00      	ldrb	r0, [r0, #8]
   b973a:	780b      	ldrb	r3, [r1, #0]
   b973c:	1a1b      	subs	r3, r3, r0
   b973e:	4258      	negs	r0, r3
   b9740:	4158      	adcs	r0, r3
   b9742:	4770      	bx	lr
   b9744:	2000      	movs	r0, #0
}
   b9746:	4770      	bx	lr

000b9748 <_ZN6RHMesh5doArpEh>:
{
   b9748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b974c:	4c25      	ldr	r4, [pc, #148]	; (b97e4 <_ZN6RHMesh5doArpEh+0x9c>)
   b974e:	2301      	movs	r3, #1
{
   b9750:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b9752:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b9754:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9756:	2300      	movs	r3, #0
{
   b9758:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b975a:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b975c:	9300      	str	r3, [sp, #0]
   b975e:	2203      	movs	r2, #3
   b9760:	23ff      	movs	r3, #255	; 0xff
   b9762:	4621      	mov	r1, r4
{
   b9764:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9766:	f000 fbb7 	bl	b9ed8 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b976a:	b120      	cbz	r0, b9776 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b976c:	2500      	movs	r5, #0
}
   b976e:	4628      	mov	r0, r5
   b9770:	b006      	add	sp, #24
   b9772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b9776:	237a      	movs	r3, #122	; 0x7a
   b9778:	f88d 3017 	strb.w	r3, [sp, #23]
   b977c:	f001 fd32 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b9780:	f106 0904 	add.w	r9, r6, #4
   b9784:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b9786:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b978a:	f001 fd2b 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
   b978e:	1a29      	subs	r1, r5, r0
   b9790:	2900      	cmp	r1, #0
   b9792:	ddeb      	ble.n	b976c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b9794:	2200      	movs	r2, #0
   b9796:	b289      	uxth	r1, r1
   b9798:	4648      	mov	r0, r9
   b979a:	f7ff fdbe 	bl	b931a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b979e:	2800      	cmp	r0, #0
   b97a0:	d0f3      	beq.n	b978a <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b97a2:	2300      	movs	r3, #0
   b97a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b97a8:	e9cd 3300 	strd	r3, r3, [sp]
   b97ac:	f10d 0217 	add.w	r2, sp, #23
   b97b0:	4621      	mov	r1, r4
   b97b2:	4630      	mov	r0, r6
   b97b4:	f000 fb9a 	bl	b9eec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b97b8:	4605      	mov	r5, r0
   b97ba:	2800      	cmp	r0, #0
   b97bc:	d0e3      	beq.n	b9786 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b97be:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b97c2:	2b01      	cmp	r3, #1
   b97c4:	d9df      	bls.n	b9786 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b97c6:	f894 a000 	ldrb.w	sl, [r4]
   b97ca:	f1ba 0f02 	cmp.w	sl, #2
   b97ce:	d1da      	bne.n	b9786 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b97d0:	4648      	mov	r0, r9
   b97d2:	f7ff fde7 	bl	b93a4 <_ZN10RHDatagram10headerFromEv>
   b97d6:	4653      	mov	r3, sl
   b97d8:	4602      	mov	r2, r0
   b97da:	4639      	mov	r1, r7
   b97dc:	4630      	mov	r0, r6
   b97de:	f000 faf3 	bl	b9dc8 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b97e2:	e7c4      	b.n	b976e <_ZN6RHMesh5doArpEh+0x26>
   b97e4:	2003e474 	.word	0x2003e474

000b97e8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b97e8:	2a01      	cmp	r2, #1
{
   b97ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b97ee:	4607      	mov	r7, r0
   b97f0:	460e      	mov	r6, r1
   b97f2:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b97f4:	d93b      	bls.n	b986e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b97f6:	794d      	ldrb	r5, [r1, #5]
   b97f8:	2d02      	cmp	r5, #2
   b97fa:	d130      	bne.n	b985e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b97fc:	f100 0804 	add.w	r8, r0, #4
   b9800:	79c9      	ldrb	r1, [r1, #7]
   b9802:	9101      	str	r1, [sp, #4]
   b9804:	4640      	mov	r0, r8
   b9806:	f7ff fdcd 	bl	b93a4 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b980a:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b980c:	462b      	mov	r3, r5
   b980e:	4602      	mov	r2, r0
   b9810:	9901      	ldr	r1, [sp, #4]
   b9812:	4638      	mov	r0, r7
   b9814:	f000 fad8 	bl	b9dc8 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b9818:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b981a:	f106 0308 	add.w	r3, r6, #8
   b981e:	2400      	movs	r4, #0
   b9820:	4622      	mov	r2, r4
   b9822:	4295      	cmp	r5, r2
   b9824:	f104 0401 	add.w	r4, r4, #1
   b9828:	b2e4      	uxtb	r4, r4
   b982a:	d904      	bls.n	b9836 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b982c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9830:	7a39      	ldrb	r1, [r7, #8]
   b9832:	4291      	cmp	r1, r2
   b9834:	d1f4      	bne.n	b9820 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b9836:	f104 0108 	add.w	r1, r4, #8
   b983a:	440e      	add	r6, r1
	while (i < numRoutes)
   b983c:	42a5      	cmp	r5, r4
   b983e:	d916      	bls.n	b986e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b9840:	f816 1b01 	ldrb.w	r1, [r6], #1
   b9844:	9101      	str	r1, [sp, #4]
   b9846:	4640      	mov	r0, r8
   b9848:	f7ff fdac 	bl	b93a4 <_ZN10RHDatagram10headerFromEv>
   b984c:	3401      	adds	r4, #1
   b984e:	4602      	mov	r2, r0
   b9850:	9901      	ldr	r1, [sp, #4]
   b9852:	2302      	movs	r3, #2
   b9854:	4638      	mov	r0, r7
   b9856:	b2e4      	uxtb	r4, r4
   b9858:	f000 fab6 	bl	b9dc8 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b985c:	e7ee      	b.n	b983c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b985e:	2d03      	cmp	r5, #3
   b9860:	d105      	bne.n	b986e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b9862:	7989      	ldrb	r1, [r1, #6]
}
   b9864:	b002      	add	sp, #8
   b9866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b986a:	f000 ba96 	b.w	b9d9a <_ZN8RHRouter13deleteRouteToEh>
}
   b986e:	b002      	add	sp, #8
   b9870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9874 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b9874:	b510      	push	{r4, lr}
   b9876:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b9878:	f000 fae6 	bl	b9e48 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b987c:	4b01      	ldr	r3, [pc, #4]	; (b9884 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b987e:	6023      	str	r3, [r4, #0]
}
   b9880:	4620      	mov	r0, r4
   b9882:	bd10      	pop	{r4, pc}
   b9884:	000c1138 	.word	0x000c1138

000b9888 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b9888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b988c:	2a79      	cmp	r2, #121	; 0x79
{
   b988e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b9892:	4606      	mov	r6, r0
   b9894:	460f      	mov	r7, r1
   b9896:	4614      	mov	r4, r2
   b9898:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b989a:	d825      	bhi.n	b98e8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b989c:	2bff      	cmp	r3, #255	; 0xff
   b989e:	d114      	bne.n	b98ca <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b98a0:	f8df 8048 	ldr.w	r8, [pc, #72]	; b98ec <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b98a4:	4640      	mov	r0, r8
   b98a6:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b98a8:	4622      	mov	r2, r4
   b98aa:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b98ac:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b98b0:	f005 ff62 	bl	bf778 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b98b4:	1c62      	adds	r2, r4, #1
   b98b6:	f8cd 9020 	str.w	r9, [sp, #32]
   b98ba:	462b      	mov	r3, r5
   b98bc:	4641      	mov	r1, r8
   b98be:	4630      	mov	r0, r6
   b98c0:	b2d2      	uxtb	r2, r2
}
   b98c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b98c6:	f000 bb07 	b.w	b9ed8 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b98ca:	4619      	mov	r1, r3
   b98cc:	f000 fa21 	bl	b9d12 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b98d0:	2800      	cmp	r0, #0
   b98d2:	d1e5      	bne.n	b98a0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b98d4:	6833      	ldr	r3, [r6, #0]
   b98d6:	4629      	mov	r1, r5
   b98d8:	689b      	ldr	r3, [r3, #8]
   b98da:	4630      	mov	r0, r6
   b98dc:	4798      	blx	r3
   b98de:	2800      	cmp	r0, #0
   b98e0:	d1de      	bne.n	b98a0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b98e2:	2002      	movs	r0, #2
}
   b98e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b98e8:	2001      	movs	r0, #1
   b98ea:	e7fb      	b.n	b98e4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b98ec:	2003e474 	.word	0x2003e474

000b98f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b98f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98f4:	b089      	sub	sp, #36	; 0x24
   b98f6:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b98f8:	237a      	movs	r3, #122	; 0x7a
   b98fa:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b98fe:	f10d 031f 	add.w	r3, sp, #31
   b9902:	9303      	str	r3, [sp, #12]
   b9904:	f10d 031e 	add.w	r3, sp, #30
   b9908:	9302      	str	r3, [sp, #8]
   b990a:	4e5d      	ldr	r6, [pc, #372]	; (b9a80 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b990c:	f10d 031d 	add.w	r3, sp, #29
   b9910:	9301      	str	r3, [sp, #4]
   b9912:	ab07      	add	r3, sp, #28
   b9914:	9300      	str	r3, [sp, #0]
{     
   b9916:	4689      	mov	r9, r1
   b9918:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b991a:	f10d 031b 	add.w	r3, sp, #27
   b991e:	f10d 021a 	add.w	r2, sp, #26
   b9922:	4631      	mov	r1, r6
{     
   b9924:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b9928:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b992a:	f000 fadf 	bl	b9eec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b992e:	4604      	mov	r4, r0
   b9930:	b920      	cbnz	r0, b993c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b9932:	2400      	movs	r4, #0
}
   b9934:	4620      	mov	r0, r4
   b9936:	b009      	add	sp, #36	; 0x24
   b9938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b993c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b9940:	b373      	cbz	r3, b99a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b9942:	7832      	ldrb	r2, [r6, #0]
   b9944:	bb62      	cbnz	r2, b99a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b9946:	f1b8 0f00 	cmp.w	r8, #0
   b994a:	d003      	beq.n	b9954 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b994c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b9950:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b9954:	f1bb 0f00 	cmp.w	fp, #0
   b9958:	d003      	beq.n	b9962 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b995a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b995e:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b9962:	f1ba 0f00 	cmp.w	sl, #0
   b9966:	d003      	beq.n	b9970 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b9968:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b996c:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b9970:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9972:	b11a      	cbz	r2, b997c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b9974:	9914      	ldr	r1, [sp, #80]	; 0x50
   b9976:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b997a:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b997c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b997e:	b11a      	cbz	r2, b9988 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b9980:	9915      	ldr	r1, [sp, #84]	; 0x54
   b9982:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b9986:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b9988:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b998a:	493e      	ldr	r1, [pc, #248]	; (b9a84 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b998c:	3b01      	subs	r3, #1
   b998e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b9990:	429a      	cmp	r2, r3
		*len = msgLen;
   b9992:	bf88      	it	hi
   b9994:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b9996:	783a      	ldrb	r2, [r7, #0]
   b9998:	4648      	mov	r0, r9
   b999a:	f005 feed 	bl	bf778 <memcpy>
	    return true;
   b999e:	e7c9      	b.n	b9934 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b99a0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b99a4:	2aff      	cmp	r2, #255	; 0xff
   b99a6:	d1c4      	bne.n	b9932 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b99a8:	2b01      	cmp	r3, #1
   b99aa:	d9c2      	bls.n	b9932 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b99ac:	7832      	ldrb	r2, [r6, #0]
   b99ae:	2a01      	cmp	r2, #1
   b99b0:	d1bf      	bne.n	b9932 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b99b2:	7a2a      	ldrb	r2, [r5, #8]
   b99b4:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b99b8:	42a2      	cmp	r2, r4
   b99ba:	d0ba      	beq.n	b9932 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b99bc:	1edf      	subs	r7, r3, #3
   b99be:	4932      	ldr	r1, [pc, #200]	; (b9a88 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b99c0:	b2ff      	uxtb	r7, r7
   b99c2:	2300      	movs	r3, #0
   b99c4:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b99c8:	4547      	cmp	r7, r8
   b99ca:	d906      	bls.n	b99da <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b99cc:	f811 0b01 	ldrb.w	r0, [r1], #1
   b99d0:	4282      	cmp	r2, r0
   b99d2:	f103 0301 	add.w	r3, r3, #1
   b99d6:	d1f5      	bne.n	b99c4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b99d8:	e7ab      	b.n	b9932 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b99da:	f105 0904 	add.w	r9, r5, #4
   b99de:	4648      	mov	r0, r9
   b99e0:	f7ff fce0 	bl	b93a4 <_ZN10RHDatagram10headerFromEv>
   b99e4:	2302      	movs	r3, #2
   b99e6:	4602      	mov	r2, r0
   b99e8:	4621      	mov	r1, r4
   b99ea:	4628      	mov	r0, r5
   b99ec:	f000 f9ec 	bl	b9dc8 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b99f0:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b99f4:	b193      	cbz	r3, b9a1c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b99f6:	4c22      	ldr	r4, [pc, #136]	; (b9a80 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b99f8:	1ba3      	subs	r3, r4, r6
   b99fa:	b2db      	uxtb	r3, r3
   b99fc:	429f      	cmp	r7, r3
   b99fe:	d90c      	bls.n	b9a1a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b9a00:	78e1      	ldrb	r1, [r4, #3]
   b9a02:	9105      	str	r1, [sp, #20]
   b9a04:	4648      	mov	r0, r9
   b9a06:	f7ff fccd 	bl	b93a4 <_ZN10RHDatagram10headerFromEv>
   b9a0a:	9905      	ldr	r1, [sp, #20]
   b9a0c:	4602      	mov	r2, r0
   b9a0e:	2302      	movs	r3, #2
   b9a10:	4628      	mov	r0, r5
   b9a12:	f000 f9d9 	bl	b9dc8 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b9a16:	3401      	adds	r4, #1
   b9a18:	e7ee      	b.n	b99f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b9a1a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b9a1c:	682b      	ldr	r3, [r5, #0]
   b9a1e:	7872      	ldrb	r2, [r6, #1]
   b9a20:	68db      	ldr	r3, [r3, #12]
   b9a22:	491a      	ldr	r1, [pc, #104]	; (b9a8c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b9a24:	4628      	mov	r0, r5
   b9a26:	4798      	blx	r3
   b9a28:	4604      	mov	r4, r0
   b9a2a:	b160      	cbz	r0, b9a46 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b9a2c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b9a2e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b9a30:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b9a32:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b9a36:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b9a3a:	4911      	ldr	r1, [pc, #68]	; (b9a80 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b9a3c:	9400      	str	r4, [sp, #0]
   b9a3e:	4628      	mov	r0, r5
   b9a40:	f000 fa4a 	bl	b9ed8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b9a44:	e776      	b.n	b9934 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b9a46:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b9a4a:	4543      	cmp	r3, r8
   b9a4c:	f67f af71 	bls.w	b9932 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b9a50:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b9a54:	2b00      	cmp	r3, #0
   b9a56:	f43f af6c 	beq.w	b9932 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b9a5a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b9a5e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9a60:	4907      	ldr	r1, [pc, #28]	; (b9a80 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b9a62:	443e      	add	r6, r7
		tmpMessageLen++;
   b9a64:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b9a66:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9a68:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b9a6c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b9a6e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9a70:	9300      	str	r3, [sp, #0]
   b9a72:	4628      	mov	r0, r5
   b9a74:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b9a76:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9a7a:	f000 f9f7 	bl	b9e6c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b9a7e:	e759      	b.n	b9934 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b9a80:	2003e474 	.word	0x2003e474
   b9a84:	2003e475 	.word	0x2003e475
   b9a88:	2003e477 	.word	0x2003e477
   b9a8c:	2003e476 	.word	0x2003e476

000b9a90 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b9a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9a92:	b085      	sub	sp, #20
   b9a94:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b9a96:	3004      	adds	r0, #4
{
   b9a98:	460e      	mov	r6, r1
   b9a9a:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b9a9c:	f7ff fc82 	bl	b93a4 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b9aa0:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b9aa2:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b9aa4:	4631      	mov	r1, r6
   b9aa6:	4628      	mov	r0, r5
   b9aa8:	f000 f94a 	bl	b9d40 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b9aac:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b9aae:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b9ab0:	d001      	beq.n	b9ab6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b9ab2:	2805      	cmp	r0, #5
   b9ab4:	d11b      	bne.n	b9aee <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b9ab6:	7831      	ldrb	r1, [r6, #0]
   b9ab8:	4628      	mov	r0, r5
   b9aba:	f000 f96e 	bl	b9d9a <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b9abe:	7872      	ldrb	r2, [r6, #1]
   b9ac0:	7a2b      	ldrb	r3, [r5, #8]
   b9ac2:	429a      	cmp	r2, r3
   b9ac4:	d013      	beq.n	b9aee <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b9ac6:	4c0b      	ldr	r4, [pc, #44]	; (b9af4 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b9ac8:	2303      	movs	r3, #3
   b9aca:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b9acc:	7833      	ldrb	r3, [r6, #0]
   b9ace:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b9ad0:	7871      	ldrb	r1, [r6, #1]
   b9ad2:	2302      	movs	r3, #2
   b9ad4:	463a      	mov	r2, r7
   b9ad6:	4628      	mov	r0, r5
   b9ad8:	f000 f976 	bl	b9dc8 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b9adc:	2300      	movs	r3, #0
   b9ade:	9300      	str	r3, [sp, #0]
   b9ae0:	4621      	mov	r1, r4
   b9ae2:	7873      	ldrb	r3, [r6, #1]
   b9ae4:	2202      	movs	r2, #2
   b9ae6:	4628      	mov	r0, r5
   b9ae8:	f000 f9f6 	bl	b9ed8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b9aec:	4604      	mov	r4, r0
}
   b9aee:	4620      	mov	r0, r4
   b9af0:	b005      	add	sp, #20
   b9af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9af4:	2003e474 	.word	0x2003e474

000b9af8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b9af8:	b510      	push	{r4, lr}
   b9afa:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b9afc:	f7ff fc02 	bl	b9304 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b9b00:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b9b02:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b9b04:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b9b06:	2303      	movs	r3, #3
    _retransmissions = 0;
   b9b08:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b9b0a:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b9b0c:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b9b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
   b9b12:	f104 0011 	add.w	r0, r4, #17
   b9b16:	f005 fe57 	bl	bf7c8 <memset>
}
   b9b1a:	4620      	mov	r0, r4
   b9b1c:	bd10      	pop	{r4, pc}

000b9b1e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b9b1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9b20:	4604      	mov	r4, r0
   b9b22:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b9b24:	f7ff fc32 	bl	b938c <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b9b28:	4620      	mov	r0, r4
   b9b2a:	2200      	movs	r2, #0
   b9b2c:	2180      	movs	r1, #128	; 0x80
   b9b2e:	f7ff fc31 	bl	b9394 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b9b32:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b9b34:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b9b36:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b9b3a:	f10d 010f 	add.w	r1, sp, #15
   b9b3e:	2201      	movs	r2, #1
   b9b40:	4620      	mov	r0, r4
   b9b42:	f7ff fbf4 	bl	b932e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b9b46:	4620      	mov	r0, r4
   b9b48:	f7ff fbe3 	bl	b9312 <_ZN10RHDatagram14waitPacketSentEv>
}
   b9b4c:	b004      	add	sp, #16
   b9b4e:	bd10      	pop	{r4, pc}

000b9b50 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b9b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b9b54:	7b05      	ldrb	r5, [r0, #12]
   b9b56:	3501      	adds	r5, #1
   b9b58:	b2ed      	uxtb	r5, r5
{
   b9b5a:	b087      	sub	sp, #28
   b9b5c:	4604      	mov	r4, r0
   b9b5e:	4689      	mov	r9, r1
   b9b60:	4692      	mov	sl, r2
   b9b62:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b9b64:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b9b66:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b9b68:	7c22      	ldrb	r2, [r4, #16]
   b9b6a:	463b      	mov	r3, r7
   b9b6c:	429a      	cmp	r2, r3
   b9b6e:	f107 0701 	add.w	r7, r7, #1
   b9b72:	b2ff      	uxtb	r7, r7
   b9b74:	d36b      	bcc.n	b9c4e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b9b76:	4629      	mov	r1, r5
   b9b78:	4620      	mov	r0, r4
   b9b7a:	f7ff fc07 	bl	b938c <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b9b7e:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b9b80:	bf0d      	iteet	eq
   b9b82:	22c0      	moveq	r2, #192	; 0xc0
   b9b84:	2280      	movne	r2, #128	; 0x80
   b9b86:	2140      	movne	r1, #64	; 0x40
   b9b88:	2100      	moveq	r1, #0
   b9b8a:	4620      	mov	r0, r4
   b9b8c:	f7ff fc02 	bl	b9394 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b9b90:	4643      	mov	r3, r8
   b9b92:	4652      	mov	r2, sl
   b9b94:	4649      	mov	r1, r9
   b9b96:	4620      	mov	r0, r4
   b9b98:	f7ff fbc9 	bl	b932e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b9b9c:	4620      	mov	r0, r4
   b9b9e:	f7ff fbb8 	bl	b9312 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b9ba2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b9ba6:	d054      	beq.n	b9c52 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b9ba8:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b9baa:	bf82      	ittt	hi
   b9bac:	68a3      	ldrhi	r3, [r4, #8]
   b9bae:	3301      	addhi	r3, #1
   b9bb0:	60a3      	strhi	r3, [r4, #8]
   b9bb2:	f001 fb17 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b9bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
   b9bba:	4683      	mov	fp, r0
   b9bbc:	2000      	movs	r0, #0
   b9bbe:	89e6      	ldrh	r6, [r4, #14]
   b9bc0:	f004 f93f 	bl	bde42 <_Z6randomii>
   b9bc4:	4370      	muls	r0, r6
   b9bc6:	bf48      	it	mi
   b9bc8:	30ff      	addmi	r0, #255	; 0xff
   b9bca:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b9bce:	fa1b f686 	uxtah	r6, fp, r6
   b9bd2:	f001 fb07 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
   b9bd6:	1a30      	subs	r0, r6, r0
   b9bd8:	2800      	cmp	r0, #0
   b9bda:	ddc5      	ble.n	b9b68 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b9bdc:	b281      	uxth	r1, r0
   b9bde:	2200      	movs	r2, #0
   b9be0:	4620      	mov	r0, r4
   b9be2:	f7ff fb9a 	bl	b931a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b9be6:	2800      	cmp	r0, #0
   b9be8:	d0f3      	beq.n	b9bd2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b9bea:	f10d 0317 	add.w	r3, sp, #23
   b9bee:	9302      	str	r3, [sp, #8]
   b9bf0:	f10d 0316 	add.w	r3, sp, #22
   b9bf4:	9301      	str	r3, [sp, #4]
   b9bf6:	2200      	movs	r2, #0
   b9bf8:	f10d 0315 	add.w	r3, sp, #21
   b9bfc:	9300      	str	r3, [sp, #0]
   b9bfe:	4611      	mov	r1, r2
   b9c00:	ab05      	add	r3, sp, #20
   b9c02:	4620      	mov	r0, r4
   b9c04:	f7ff fbda 	bl	b93bc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9c08:	2800      	cmp	r0, #0
   b9c0a:	d0e2      	beq.n	b9bd2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b9c0c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b9c10:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b9c14:	4542      	cmp	r2, r8
   b9c16:	d10e      	bne.n	b9c36 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b9c18:	f894 c004 	ldrb.w	ip, [r4, #4]
   b9c1c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b9c20:	458c      	cmp	ip, r1
   b9c22:	d108      	bne.n	b9c36 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b9c24:	2b00      	cmp	r3, #0
   b9c26:	da08      	bge.n	b9c3a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b9c28:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b9c2c:	42ab      	cmp	r3, r5
   b9c2e:	d1d0      	bne.n	b9bd2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b9c30:	b007      	add	sp, #28
   b9c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b9c36:	2b00      	cmp	r3, #0
   b9c38:	dbcb      	blt.n	b9bd2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b9c3a:	18a1      	adds	r1, r4, r2
   b9c3c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b9c40:	7c49      	ldrb	r1, [r1, #17]
   b9c42:	4299      	cmp	r1, r3
   b9c44:	d1c5      	bne.n	b9bd2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b9c46:	4620      	mov	r0, r4
   b9c48:	f7ff ff69 	bl	b9b1e <_ZN18RHReliableDatagram11acknowledgeEhh>
   b9c4c:	e7c1      	b.n	b9bd2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b9c4e:	2000      	movs	r0, #0
   b9c50:	e7ee      	b.n	b9c30 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b9c52:	2001      	movs	r0, #1
   b9c54:	e7ec      	b.n	b9c30 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b9c56 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b9c56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9c5a:	b089      	sub	sp, #36	; 0x24
   b9c5c:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b9c60:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b9c64:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b9c66:	4604      	mov	r4, r0
   b9c68:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b9c6a:	f7ff fb4e 	bl	b930a <_ZN10RHDatagram9availableEv>
   b9c6e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b9c72:	b920      	cbnz	r0, b9c7e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b9c74:	2500      	movs	r5, #0
}
   b9c76:	4628      	mov	r0, r5
   b9c78:	b009      	add	sp, #36	; 0x24
   b9c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b9c7e:	f10d 031f 	add.w	r3, sp, #31
   b9c82:	9302      	str	r3, [sp, #8]
   b9c84:	f10d 031e 	add.w	r3, sp, #30
   b9c88:	9301      	str	r3, [sp, #4]
   b9c8a:	f10d 031d 	add.w	r3, sp, #29
   b9c8e:	9300      	str	r3, [sp, #0]
   b9c90:	4620      	mov	r0, r4
   b9c92:	ab07      	add	r3, sp, #28
   b9c94:	f7ff fb92 	bl	b93bc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9c98:	4605      	mov	r5, r0
   b9c9a:	2800      	cmp	r0, #0
   b9c9c:	d0ea      	beq.n	b9c74 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b9c9e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b9ca2:	2b00      	cmp	r3, #0
   b9ca4:	dbe6      	blt.n	b9c74 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b9ca6:	7922      	ldrb	r2, [r4, #4]
   b9ca8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9cac:	429a      	cmp	r2, r3
   b9cae:	d106      	bne.n	b9cbe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b9cb0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b9cb4:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b9cb8:	4620      	mov	r0, r4
   b9cba:	f7ff ff30 	bl	b9b1e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b9cbe:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b9cc2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b9cc6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b9cca:	f012 0f40 	tst.w	r2, #64	; 0x40
   b9cce:	440c      	add	r4, r1
   b9cd0:	d002      	beq.n	b9cd8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b9cd2:	7c60      	ldrb	r0, [r4, #17]
   b9cd4:	4298      	cmp	r0, r3
   b9cd6:	d0cd      	beq.n	b9c74 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b9cd8:	b106      	cbz	r6, b9cdc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b9cda:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b9cdc:	f1b9 0f00 	cmp.w	r9, #0
   b9ce0:	d003      	beq.n	b9cea <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b9ce2:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b9ce6:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b9cea:	f1b8 0f00 	cmp.w	r8, #0
   b9cee:	d001      	beq.n	b9cf4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b9cf0:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b9cf4:	b107      	cbz	r7, b9cf8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b9cf6:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b9cf8:	7463      	strb	r3, [r4, #17]
		return true;
   b9cfa:	e7bc      	b.n	b9c76 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b9cfc <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b9cfc:	4770      	bx	lr

000b9cfe <_ZN8RHRouter4initEv>:
{
   b9cfe:	b510      	push	{r4, lr}
   b9d00:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b9d02:	3004      	adds	r0, #4
   b9d04:	f7ff fb34 	bl	b9370 <_ZN10RHDatagram4initEv>
    if (ret)
   b9d08:	b110      	cbz	r0, b9d10 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b9d0a:	231e      	movs	r3, #30
   b9d0c:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b9d10:	bd10      	pop	{r4, pc}

000b9d12 <_ZN8RHRouter10getRouteToEh>:
{
   b9d12:	b510      	push	{r4, lr}
   b9d14:	4602      	mov	r2, r0
   b9d16:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b9d18:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b9d1c:	428c      	cmp	r4, r1
   b9d1e:	d108      	bne.n	b9d32 <_ZN8RHRouter10getRouteToEh+0x20>
   b9d20:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b9d24:	b12c      	cbz	r4, b9d32 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b9d26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b9d2a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b9d2e:	4418      	add	r0, r3
}
   b9d30:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9d32:	3301      	adds	r3, #1
   b9d34:	2b32      	cmp	r3, #50	; 0x32
   b9d36:	f102 0203 	add.w	r2, r2, #3
   b9d3a:	d1ed      	bne.n	b9d18 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b9d3c:	2000      	movs	r0, #0
   b9d3e:	e7f7      	b.n	b9d30 <_ZN8RHRouter10getRouteToEh+0x1e>

000b9d40 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b9d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b9d42:	780b      	ldrb	r3, [r1, #0]
   b9d44:	2bff      	cmp	r3, #255	; 0xff
{
   b9d46:	4605      	mov	r5, r0
   b9d48:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b9d4a:	d006      	beq.n	b9d5a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b9d4c:	4619      	mov	r1, r3
   b9d4e:	9201      	str	r2, [sp, #4]
   b9d50:	f7ff ffdf 	bl	b9d12 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b9d54:	b158      	cbz	r0, b9d6e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b9d56:	7843      	ldrb	r3, [r0, #1]
   b9d58:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b9d5a:	4621      	mov	r1, r4
   b9d5c:	1d28      	adds	r0, r5, #4
   b9d5e:	f7ff fef7 	bl	b9b50 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b9d62:	2800      	cmp	r0, #0
   b9d64:	bf14      	ite	ne
   b9d66:	2000      	movne	r0, #0
   b9d68:	2005      	moveq	r0, #5
}
   b9d6a:	b003      	add	sp, #12
   b9d6c:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b9d6e:	2002      	movs	r0, #2
   b9d70:	e7fb      	b.n	b9d6a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b9d72 <_ZN8RHRouter11deleteRouteEh>:
{
   b9d72:	b510      	push	{r4, lr}
   b9d74:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b9d78:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b9d7a:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b9d7e:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b9d82:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b9d86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9d8a:	4421      	add	r1, r4
   b9d8c:	4420      	add	r0, r4
   b9d8e:	f005 fcf3 	bl	bf778 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b9d92:	2300      	movs	r3, #0
   b9d94:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b9d98:	bd10      	pop	{r4, pc}

000b9d9a <_ZN8RHRouter13deleteRouteToEh>:
{
   b9d9a:	b538      	push	{r3, r4, r5, lr}
   b9d9c:	460a      	mov	r2, r1
   b9d9e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b9da0:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b9da4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b9da8:	b2d9      	uxtb	r1, r3
   b9daa:	5d65      	ldrb	r5, [r4, r5]
   b9dac:	4295      	cmp	r5, r2
   b9dae:	d103      	bne.n	b9db8 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b9db0:	f7ff ffdf 	bl	b9d72 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b9db4:	2001      	movs	r0, #1
}
   b9db6:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9db8:	3301      	adds	r3, #1
   b9dba:	2b32      	cmp	r3, #50	; 0x32
   b9dbc:	d1f2      	bne.n	b9da4 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b9dbe:	2000      	movs	r0, #0
   b9dc0:	e7f9      	b.n	b9db6 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b9dc2 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b9dc2:	2100      	movs	r1, #0
   b9dc4:	f7ff bfd5 	b.w	b9d72 <_ZN8RHRouter11deleteRouteEh>

000b9dc8 <_ZN8RHRouter10addRouteToEhhh>:
{
   b9dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9dca:	4616      	mov	r6, r2
   b9dcc:	461f      	mov	r7, r3
   b9dce:	4604      	mov	r4, r0
   b9dd0:	460d      	mov	r5, r1
   b9dd2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b9dd4:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b9dd8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9ddc:	5c11      	ldrb	r1, [r2, r0]
   b9dde:	42a9      	cmp	r1, r5
   b9de0:	d105      	bne.n	b9dee <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b9de2:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b9de4:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b9de8:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b9dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9dee:	3301      	adds	r3, #1
   b9df0:	2b32      	cmp	r3, #50	; 0x32
   b9df2:	d1f1      	bne.n	b9dd8 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b9df4:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b9df6:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b9dfa:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9dfe:	5c11      	ldrb	r1, [r2, r0]
   b9e00:	b919      	cbnz	r1, b9e0a <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b9e02:	4420      	add	r0, r4
   b9e04:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b9e08:	e7ec      	b.n	b9de4 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9e0a:	3301      	adds	r3, #1
   b9e0c:	2b32      	cmp	r3, #50	; 0x32
   b9e0e:	d1f4      	bne.n	b9dfa <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b9e10:	4620      	mov	r0, r4
   b9e12:	f7ff ffd6 	bl	b9dc2 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9e16:	4620      	mov	r0, r4
   b9e18:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b9e1c:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b9e20:	b92a      	cbnz	r2, b9e2e <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b9e22:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b9e26:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b9e2a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9e2e:	3003      	adds	r0, #3
   b9e30:	4298      	cmp	r0, r3
   b9e32:	d1f3      	bne.n	b9e1c <_ZN8RHRouter10addRouteToEhhh+0x54>
   b9e34:	e7da      	b.n	b9dec <_ZN8RHRouter10addRouteToEhhh+0x24>

000b9e36 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9e36:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b9e3a:	2200      	movs	r2, #0
   b9e3c:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9e40:	3003      	adds	r0, #3
   b9e42:	4298      	cmp	r0, r3
   b9e44:	d1fa      	bne.n	b9e3c <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b9e46:	4770      	bx	lr

000b9e48 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b9e48:	b510      	push	{r4, lr}
   b9e4a:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b9e4c:	3004      	adds	r0, #4
   b9e4e:	f7ff fe53 	bl	b9af8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b9e52:	4b05      	ldr	r3, [pc, #20]	; (b9e68 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b9e54:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b9e56:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b9e5a:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b9e5c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b9e60:	f7ff ffe9 	bl	b9e36 <_ZN8RHRouter17clearRoutingTableEv>
}
   b9e64:	4620      	mov	r0, r4
   b9e66:	bd10      	pop	{r4, pc}
   b9e68:	000c1150 	.word	0x000c1150

000b9e6c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b9e6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b9e70:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9e72:	6840      	ldr	r0, [r0, #4]
{
   b9e74:	9101      	str	r1, [sp, #4]
   b9e76:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9e78:	6803      	ldr	r3, [r0, #0]
{
   b9e7a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9e7e:	699b      	ldr	r3, [r3, #24]
{
   b9e80:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b9e84:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9e86:	4798      	blx	r3
   b9e88:	f106 0805 	add.w	r8, r6, #5
   b9e8c:	4580      	cmp	r8, r0
   b9e8e:	d81c      	bhi.n	b9eca <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b9e90:	4d10      	ldr	r5, [pc, #64]	; (b9ed4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b9e92:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b9e94:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b9e98:	2300      	movs	r3, #0
   b9e9a:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b9e9c:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b9ea0:	70eb      	strb	r3, [r5, #3]
   b9ea2:	1c5a      	adds	r2, r3, #1
   b9ea4:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b9ea8:	1d68      	adds	r0, r5, #5
   b9eaa:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b9eac:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b9eae:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b9eb2:	f005 fc61 	bl	bf778 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9eb6:	6823      	ldr	r3, [r4, #0]
   b9eb8:	685b      	ldr	r3, [r3, #4]
   b9eba:	fa5f f288 	uxtb.w	r2, r8
   b9ebe:	4629      	mov	r1, r5
   b9ec0:	4620      	mov	r0, r4
}
   b9ec2:	b002      	add	sp, #8
   b9ec4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9ec8:	4718      	bx	r3
}
   b9eca:	2001      	movs	r0, #1
   b9ecc:	b002      	add	sp, #8
   b9ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9ed2:	bf00      	nop
   b9ed4:	2003e4ee 	.word	0x2003e4ee

000b9ed8 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b9ed8:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b9eda:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b9ede:	9401      	str	r4, [sp, #4]
   b9ee0:	7a04      	ldrb	r4, [r0, #8]
   b9ee2:	9400      	str	r4, [sp, #0]
   b9ee4:	f7ff ffc2 	bl	b9e6c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b9ee8:	b002      	add	sp, #8
   b9eea:	bd10      	pop	{r4, pc}

000b9eec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b9eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ef0:	b087      	sub	sp, #28
   b9ef2:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b9ef4:	237f      	movs	r3, #127	; 0x7f
   b9ef6:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9efa:	f10d 0317 	add.w	r3, sp, #23
   b9efe:	9302      	str	r3, [sp, #8]
   b9f00:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b9fd4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b9f04:	f10d 0316 	add.w	r3, sp, #22
   b9f08:	9301      	str	r3, [sp, #4]
   b9f0a:	f10d 0315 	add.w	r3, sp, #21
   b9f0e:	9300      	str	r3, [sp, #0]
{  
   b9f10:	4604      	mov	r4, r0
   b9f12:	4688      	mov	r8, r1
   b9f14:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9f16:	ab05      	add	r3, sp, #20
   b9f18:	f10d 0213 	add.w	r2, sp, #19
   b9f1c:	4649      	mov	r1, r9
   b9f1e:	3004      	adds	r0, #4
{  
   b9f20:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9f24:	f7ff fe97 	bl	b9c56 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b9f28:	4605      	mov	r5, r0
   b9f2a:	b908      	cbnz	r0, b9f30 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b9f2c:	2500      	movs	r5, #0
   b9f2e:	e038      	b.n	b9fa2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b9f30:	6823      	ldr	r3, [r4, #0]
   b9f32:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b9f36:	681b      	ldr	r3, [r3, #0]
   b9f38:	4649      	mov	r1, r9
   b9f3a:	4620      	mov	r0, r4
   b9f3c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b9f3e:	f899 3000 	ldrb.w	r3, [r9]
   b9f42:	7a22      	ldrb	r2, [r4, #8]
   b9f44:	429a      	cmp	r2, r3
   b9f46:	d001      	beq.n	b9f4c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b9f48:	2bff      	cmp	r3, #255	; 0xff
   b9f4a:	d12e      	bne.n	b9faa <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b9f4c:	b117      	cbz	r7, b9f54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b9f4e:	4b21      	ldr	r3, [pc, #132]	; (b9fd4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9f50:	785b      	ldrb	r3, [r3, #1]
   b9f52:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b9f54:	f1bb 0f00 	cmp.w	fp, #0
   b9f58:	d003      	beq.n	b9f62 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b9f5a:	4b1e      	ldr	r3, [pc, #120]	; (b9fd4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9f5c:	781b      	ldrb	r3, [r3, #0]
   b9f5e:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b9f62:	f1ba 0f00 	cmp.w	sl, #0
   b9f66:	d003      	beq.n	b9f70 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b9f68:	4b1a      	ldr	r3, [pc, #104]	; (b9fd4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9f6a:	78db      	ldrb	r3, [r3, #3]
   b9f6c:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b9f70:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b9f72:	b11b      	cbz	r3, b9f7c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b9f74:	4b17      	ldr	r3, [pc, #92]	; (b9fd4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9f76:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9f78:	791b      	ldrb	r3, [r3, #4]
   b9f7a:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b9f7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9f7e:	b11b      	cbz	r3, b9f88 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b9f80:	4b14      	ldr	r3, [pc, #80]	; (b9fd4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9f82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9f84:	789b      	ldrb	r3, [r3, #2]
   b9f86:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9f88:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b9f8c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9f8e:	4912      	ldr	r1, [pc, #72]	; (b9fd8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9f90:	3b05      	subs	r3, #5
   b9f92:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b9f94:	429a      	cmp	r2, r3
		*len = msgLen;
   b9f96:	bf88      	it	hi
   b9f98:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9f9a:	7832      	ldrb	r2, [r6, #0]
   b9f9c:	4640      	mov	r0, r8
   b9f9e:	f005 fbeb 	bl	bf778 <memcpy>
}
   b9fa2:	4628      	mov	r0, r5
   b9fa4:	b007      	add	sp, #28
   b9fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b9faa:	f899 3002 	ldrb.w	r3, [r9, #2]
   b9fae:	1c5a      	adds	r2, r3, #1
   b9fb0:	f889 2002 	strb.w	r2, [r9, #2]
   b9fb4:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b9fb8:	429a      	cmp	r2, r3
   b9fba:	d9b7      	bls.n	b9f2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b9fbc:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b9fc0:	2b00      	cmp	r3, #0
   b9fc2:	d0b3      	beq.n	b9f2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b9fc4:	6823      	ldr	r3, [r4, #0]
   b9fc6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b9fca:	685b      	ldr	r3, [r3, #4]
   b9fcc:	4649      	mov	r1, r9
   b9fce:	4620      	mov	r0, r4
   b9fd0:	4798      	blx	r3
   b9fd2:	e7ab      	b.n	b9f2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b9fd4:	2003e4ee 	.word	0x2003e4ee
   b9fd8:	2003e4f3 	.word	0x2003e4f3

000b9fdc <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b9fdc:	b510      	push	{r4, lr}
   b9fde:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b9fe0:	6a00      	ldr	r0, [r0, #32]
   b9fe2:	6803      	ldr	r3, [r0, #0]
   b9fe4:	68db      	ldr	r3, [r3, #12]
   b9fe6:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b9fe8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b9fec:	28ff      	cmp	r0, #255	; 0xff
   b9fee:	d002      	beq.n	b9ff6 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b9ff0:	2101      	movs	r1, #1
   b9ff2:	f004 fda3 	bl	beb3c <pinMode>

    deselectSlave();
   b9ff6:	6823      	ldr	r3, [r4, #0]
   b9ff8:	4620      	mov	r0, r4
   b9ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9ffc:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b9ffe:	2064      	movs	r0, #100	; 0x64
   ba000:	f001 fd0c 	bl	bba1c <delay>
#endif
    
    return true;
}
   ba004:	2001      	movs	r0, #1
   ba006:	bd10      	pop	{r4, pc}

000ba008 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   ba008:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   ba00c:	2100      	movs	r1, #0
   ba00e:	f004 bda6 	b.w	beb5e <digitalWrite>

000ba012 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   ba012:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   ba016:	2101      	movs	r1, #1
   ba018:	f004 bda1 	b.w	beb5e <digitalWrite>

000ba01c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   ba01c:	b570      	push	{r4, r5, r6, lr}
   ba01e:	4604      	mov	r4, r0
   ba020:	460d      	mov	r5, r1
   ba022:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   ba024:	f7ff fa7e 	bl	b9524 <_ZN15RHGenericDriverC1Ev>
   ba028:	4b03      	ldr	r3, [pc, #12]	; (ba038 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   ba02a:	6023      	str	r3, [r4, #0]
   ba02c:	6226      	str	r6, [r4, #32]
   ba02e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   ba032:	4620      	mov	r0, r4
   ba034:	bd70      	pop	{r4, r5, r6, pc}
   ba036:	bf00      	nop
   ba038:	000c1160 	.word	0x000c1160

000ba03c <_ZN11RHSPIDriver7spiReadEh>:
{
   ba03c:	b538      	push	{r3, r4, r5, lr}
   ba03e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   ba040:	6a00      	ldr	r0, [r0, #32]
   ba042:	6803      	ldr	r3, [r0, #0]
   ba044:	6a1b      	ldr	r3, [r3, #32]
{
   ba046:	460d      	mov	r5, r1
    _spi.beginTransaction();
   ba048:	4798      	blx	r3
    selectSlave();
   ba04a:	6823      	ldr	r3, [r4, #0]
   ba04c:	4620      	mov	r0, r4
   ba04e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   ba050:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   ba052:	6a20      	ldr	r0, [r4, #32]
   ba054:	6803      	ldr	r3, [r0, #0]
   ba056:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   ba05a:	681b      	ldr	r3, [r3, #0]
   ba05c:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   ba05e:	6a20      	ldr	r0, [r4, #32]
   ba060:	6803      	ldr	r3, [r0, #0]
   ba062:	2100      	movs	r1, #0
   ba064:	681b      	ldr	r3, [r3, #0]
   ba066:	4798      	blx	r3
    deselectSlave();
   ba068:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   ba06a:	4605      	mov	r5, r0
    deselectSlave();
   ba06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   ba06e:	4620      	mov	r0, r4
   ba070:	4798      	blx	r3
    _spi.endTransaction();
   ba072:	6a20      	ldr	r0, [r4, #32]
   ba074:	6803      	ldr	r3, [r0, #0]
   ba076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba078:	4798      	blx	r3
}
   ba07a:	4628      	mov	r0, r5
   ba07c:	bd38      	pop	{r3, r4, r5, pc}

000ba07e <_ZN11RHSPIDriver8spiWriteEhh>:
{
   ba07e:	b570      	push	{r4, r5, r6, lr}
   ba080:	4604      	mov	r4, r0
    _spi.beginTransaction();
   ba082:	6a00      	ldr	r0, [r0, #32]
   ba084:	6803      	ldr	r3, [r0, #0]
   ba086:	6a1b      	ldr	r3, [r3, #32]
{
   ba088:	4616      	mov	r6, r2
   ba08a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   ba08c:	4798      	blx	r3
    selectSlave();
   ba08e:	6823      	ldr	r3, [r4, #0]
   ba090:	4620      	mov	r0, r4
   ba092:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   ba094:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   ba096:	6a20      	ldr	r0, [r4, #32]
   ba098:	6803      	ldr	r3, [r0, #0]
   ba09a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   ba09e:	681b      	ldr	r3, [r3, #0]
   ba0a0:	4798      	blx	r3
   ba0a2:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   ba0a4:	6a20      	ldr	r0, [r4, #32]
   ba0a6:	6803      	ldr	r3, [r0, #0]
   ba0a8:	4631      	mov	r1, r6
   ba0aa:	681b      	ldr	r3, [r3, #0]
   ba0ac:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   ba0ae:	2001      	movs	r0, #1
   ba0b0:	f001 f890 	bl	bb1d4 <HAL_Delay_Microseconds>
    deselectSlave();
   ba0b4:	6823      	ldr	r3, [r4, #0]
   ba0b6:	4620      	mov	r0, r4
   ba0b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   ba0ba:	4798      	blx	r3
    _spi.endTransaction();
   ba0bc:	6a20      	ldr	r0, [r4, #32]
   ba0be:	6803      	ldr	r3, [r0, #0]
   ba0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba0c2:	4798      	blx	r3
}
   ba0c4:	4628      	mov	r0, r5
   ba0c6:	bd70      	pop	{r4, r5, r6, pc}

000ba0c8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   ba0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba0ca:	4604      	mov	r4, r0
    _spi.beginTransaction();
   ba0cc:	6a00      	ldr	r0, [r0, #32]
{
   ba0ce:	461e      	mov	r6, r3
    _spi.beginTransaction();
   ba0d0:	6803      	ldr	r3, [r0, #0]
   ba0d2:	6a1b      	ldr	r3, [r3, #32]
{
   ba0d4:	460f      	mov	r7, r1
   ba0d6:	4615      	mov	r5, r2
    _spi.beginTransaction();
   ba0d8:	4798      	blx	r3
    selectSlave();
   ba0da:	6823      	ldr	r3, [r4, #0]
   ba0dc:	4620      	mov	r0, r4
   ba0de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   ba0e0:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   ba0e2:	6a20      	ldr	r0, [r4, #32]
   ba0e4:	6803      	ldr	r3, [r0, #0]
   ba0e6:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   ba0ea:	681b      	ldr	r3, [r3, #0]
   ba0ec:	4798      	blx	r3
   ba0ee:	442e      	add	r6, r5
   ba0f0:	4607      	mov	r7, r0
    while (len--)
   ba0f2:	42b5      	cmp	r5, r6
   ba0f4:	d007      	beq.n	ba106 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   ba0f6:	6a20      	ldr	r0, [r4, #32]
   ba0f8:	6803      	ldr	r3, [r0, #0]
   ba0fa:	2100      	movs	r1, #0
   ba0fc:	681b      	ldr	r3, [r3, #0]
   ba0fe:	4798      	blx	r3
   ba100:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   ba104:	e7f5      	b.n	ba0f2 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   ba106:	6823      	ldr	r3, [r4, #0]
   ba108:	4620      	mov	r0, r4
   ba10a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   ba10c:	4798      	blx	r3
    _spi.endTransaction();
   ba10e:	6a20      	ldr	r0, [r4, #32]
   ba110:	6803      	ldr	r3, [r0, #0]
   ba112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba114:	4798      	blx	r3
}
   ba116:	4638      	mov	r0, r7
   ba118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba11a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   ba11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba11c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   ba11e:	6a00      	ldr	r0, [r0, #32]
{
   ba120:	461e      	mov	r6, r3
    _spi.beginTransaction();
   ba122:	6803      	ldr	r3, [r0, #0]
   ba124:	6a1b      	ldr	r3, [r3, #32]
{
   ba126:	460f      	mov	r7, r1
   ba128:	4615      	mov	r5, r2
    _spi.beginTransaction();
   ba12a:	4798      	blx	r3
    selectSlave();
   ba12c:	6823      	ldr	r3, [r4, #0]
   ba12e:	4620      	mov	r0, r4
   ba130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   ba132:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   ba134:	6a20      	ldr	r0, [r4, #32]
   ba136:	6803      	ldr	r3, [r0, #0]
   ba138:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   ba13c:	681b      	ldr	r3, [r3, #0]
   ba13e:	4798      	blx	r3
   ba140:	442e      	add	r6, r5
   ba142:	4607      	mov	r7, r0
    while (len--)
   ba144:	42b5      	cmp	r5, r6
   ba146:	d006      	beq.n	ba156 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   ba148:	6a20      	ldr	r0, [r4, #32]
   ba14a:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba14e:	6803      	ldr	r3, [r0, #0]
   ba150:	681b      	ldr	r3, [r3, #0]
   ba152:	4798      	blx	r3
    while (len--)
   ba154:	e7f6      	b.n	ba144 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   ba156:	6823      	ldr	r3, [r4, #0]
   ba158:	4620      	mov	r0, r4
   ba15a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   ba15c:	4798      	blx	r3
    _spi.endTransaction();
   ba15e:	6a20      	ldr	r0, [r4, #32]
   ba160:	6803      	ldr	r3, [r0, #0]
   ba162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba164:	4798      	blx	r3
}
   ba166:	4638      	mov	r0, r7
   ba168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba16a <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   ba16a:	6a00      	ldr	r0, [r0, #32]
   ba16c:	6803      	ldr	r3, [r0, #0]
   ba16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba170:	4718      	bx	r3

000ba172 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   ba172:	2001      	movs	r0, #1
   ba174:	4770      	bx	lr

000ba176 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   ba176:	20fb      	movs	r0, #251	; 0xfb
   ba178:	4770      	bx	lr

000ba17a <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   ba17a:	4770      	bx	lr

000ba17c <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   ba17c:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   ba17e:	7903      	ldrb	r3, [r0, #4]
   ba180:	2b05      	cmp	r3, #5
{
   ba182:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   ba184:	d010      	beq.n	ba1a8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   ba186:	6803      	ldr	r3, [r0, #0]
   ba188:	2105      	movs	r1, #5
   ba18a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba18e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   ba190:	2207      	movs	r2, #7
   ba192:	2101      	movs	r1, #1
   ba194:	4620      	mov	r0, r4
   ba196:	f7ff ff72 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   ba19a:	2280      	movs	r2, #128	; 0x80
   ba19c:	2140      	movs	r1, #64	; 0x40
   ba19e:	4620      	mov	r0, r4
   ba1a0:	f7ff ff6d 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   ba1a4:	2305      	movs	r3, #5
   ba1a6:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   ba1a8:	7923      	ldrb	r3, [r4, #4]
   ba1aa:	2b05      	cmp	r3, #5
   ba1ac:	d0fc      	beq.n	ba1a8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   ba1ae:	7e20      	ldrb	r0, [r4, #24]
}
   ba1b0:	bd10      	pop	{r4, pc}

000ba1b2 <_ZN7RH_RF95D0Ev>:
   ba1b2:	b510      	push	{r4, lr}
   ba1b4:	f44f 7198 	mov.w	r1, #304	; 0x130
   ba1b8:	4604      	mov	r4, r0
   ba1ba:	f7f9 ff70 	bl	b409e <_ZdlPvj>
   ba1be:	4620      	mov	r0, r4
   ba1c0:	bd10      	pop	{r4, pc}

000ba1c2 <_ZN7RH_RF955sleepEv>:
{
   ba1c2:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   ba1c4:	7903      	ldrb	r3, [r0, #4]
   ba1c6:	2b01      	cmp	r3, #1
{
   ba1c8:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   ba1ca:	d00b      	beq.n	ba1e4 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   ba1cc:	6803      	ldr	r3, [r0, #0]
   ba1ce:	2101      	movs	r1, #1
   ba1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba1d4:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   ba1d6:	2200      	movs	r2, #0
   ba1d8:	2101      	movs	r1, #1
   ba1da:	4620      	mov	r0, r4
   ba1dc:	f7ff ff4f 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   ba1e0:	2301      	movs	r3, #1
   ba1e2:	7123      	strb	r3, [r4, #4]
}
   ba1e4:	2001      	movs	r0, #1
   ba1e6:	bd10      	pop	{r4, pc}

000ba1e8 <_ZN7RH_RF954recvEPhS0_>:
{
   ba1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   ba1ea:	6803      	ldr	r3, [r0, #0]
   ba1ec:	68db      	ldr	r3, [r3, #12]
{
   ba1ee:	4604      	mov	r4, r0
   ba1f0:	460f      	mov	r7, r1
   ba1f2:	4615      	mov	r5, r2
    if (!available())
   ba1f4:	4798      	blx	r3
   ba1f6:	4606      	mov	r6, r0
   ba1f8:	b1b0      	cbz	r0, ba228 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   ba1fa:	b187      	cbz	r7, ba21e <_ZN7RH_RF954recvEPhS0_+0x36>
   ba1fc:	b17d      	cbz	r5, ba21e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   ba1fe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   ba202:	782a      	ldrb	r2, [r5, #0]
   ba204:	3b03      	subs	r3, #3
   ba206:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   ba208:	bfde      	ittt	le
   ba20a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   ba20e:	3b04      	suble	r3, #4
   ba210:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   ba212:	782a      	ldrb	r2, [r5, #0]
   ba214:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   ba218:	4638      	mov	r0, r7
   ba21a:	f005 faad 	bl	bf778 <memcpy>
    _rxBufValid = false;
   ba21e:	2300      	movs	r3, #0
   ba220:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   ba224:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   ba228:	4630      	mov	r0, r6
   ba22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba22c <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   ba22c:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   ba22e:	b538      	push	{r3, r4, r5, lr}
   ba230:	4605      	mov	r5, r0
   ba232:	460c      	mov	r4, r1
	if (power > 20)
   ba234:	dc14      	bgt.n	ba260 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   ba236:	2901      	cmp	r1, #1
   ba238:	dd14      	ble.n	ba264 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   ba23a:	2911      	cmp	r1, #17
   ba23c:	dd13      	ble.n	ba266 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   ba23e:	2207      	movs	r2, #7
   ba240:	214d      	movs	r1, #77	; 0x4d
   ba242:	4628      	mov	r0, r5
   ba244:	f7ff ff1b 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   ba248:	3c03      	subs	r4, #3
   ba24a:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   ba24c:	1ea2      	subs	r2, r4, #2
   ba24e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   ba252:	4628      	mov	r0, r5
   ba254:	b2d2      	uxtb	r2, r2
}
   ba256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   ba25a:	2109      	movs	r1, #9
   ba25c:	f7ff bf0f 	b.w	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   ba260:	2414      	movs	r4, #20
   ba262:	e7ec      	b.n	ba23e <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   ba264:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   ba266:	2204      	movs	r2, #4
   ba268:	214d      	movs	r1, #77	; 0x4d
   ba26a:	4628      	mov	r0, r5
   ba26c:	f7ff ff07 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
   ba270:	e7ec      	b.n	ba24c <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000ba274 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   ba274:	b538      	push	{r3, r4, r5, lr}
   ba276:	4604      	mov	r4, r0
   ba278:	4615      	mov	r5, r2
    _rxBufValid(0)
   ba27a:	461a      	mov	r2, r3
   ba27c:	f7ff fece 	bl	ba01c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   ba280:	4b09      	ldr	r3, [pc, #36]	; (ba2a8 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   ba282:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   ba284:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   ba286:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   ba288:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   ba28c:	2201      	movs	r2, #1
    _rxBufValid(0)
   ba28e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   ba292:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   ba296:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   ba29a:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   ba29e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   ba2a2:	4620      	mov	r0, r4
   ba2a4:	bd38      	pop	{r3, r4, r5, pc}
   ba2a6:	bf00      	nop
   ba2a8:	000c11f8 	.word	0x000c11f8

000ba2ac <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   ba2ac:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   ba2b0:	2b03      	cmp	r3, #3
   ba2b2:	d91b      	bls.n	ba2ec <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   ba2b4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   ba2b8:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   ba2ba:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   ba2be:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   ba2c0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   ba2c4:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   ba2c6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   ba2ca:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   ba2cc:	7983      	ldrb	r3, [r0, #6]
   ba2ce:	b933      	cbnz	r3, ba2de <_ZN7RH_RF9513validateRxBufEv+0x32>
   ba2d0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   ba2d2:	7942      	ldrb	r2, [r0, #5]
   ba2d4:	429a      	cmp	r2, r3
   ba2d6:	d002      	beq.n	ba2de <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   ba2d8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   ba2da:	2bff      	cmp	r3, #255	; 0xff
   ba2dc:	d106      	bne.n	ba2ec <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   ba2de:	8a83      	ldrh	r3, [r0, #20]
   ba2e0:	3301      	adds	r3, #1
   ba2e2:	b29b      	uxth	r3, r3
   ba2e4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   ba2e6:	2301      	movs	r3, #1
   ba2e8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   ba2ec:	4770      	bx	lr
	...

000ba2f0 <_ZN7RH_RF9512setFrequencyEf>:
{
   ba2f0:	b538      	push	{r3, r4, r5, lr}
   ba2f2:	4604      	mov	r4, r0
   ba2f4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   ba2f8:	ee10 0a10 	vmov	r0, s0
{
   ba2fc:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   ba300:	f004 fe98 	bl	bf034 <__aeabi_f2d>
   ba304:	a317      	add	r3, pc, #92	; (adr r3, ba364 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   ba306:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba30a:	f004 feeb 	bl	bf0e4 <__aeabi_dmul>
   ba30e:	a317      	add	r3, pc, #92	; (adr r3, ba36c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   ba310:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba314:	f005 f810 	bl	bf338 <__aeabi_ddiv>
   ba318:	f005 f9bc 	bl	bf694 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   ba31c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   ba31e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   ba320:	f3c0 4207 	ubfx	r2, r0, #16, #8
   ba324:	4620      	mov	r0, r4
   ba326:	f7ff feaa 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   ba32a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   ba32e:	2107      	movs	r1, #7
   ba330:	4620      	mov	r0, r4
   ba332:	f7ff fea4 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   ba336:	b2ea      	uxtb	r2, r5
   ba338:	2108      	movs	r1, #8
   ba33a:	4620      	mov	r0, r4
   ba33c:	f7ff fe9f 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   ba340:	eddf 7a07 	vldr	s15, [pc, #28]	; ba360 <_ZN7RH_RF9512setFrequencyEf+0x70>
   ba344:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   ba348:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   ba34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba350:	bfac      	ite	ge
   ba352:	2301      	movge	r3, #1
   ba354:	2300      	movlt	r3, #0
}
   ba356:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   ba358:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   ba35c:	bd38      	pop	{r3, r4, r5, pc}
   ba35e:	bf00      	nop
   ba360:	4442c000 	.word	0x4442c000
   ba364:	00000000 	.word	0x00000000
   ba368:	412e8480 	.word	0x412e8480
   ba36c:	00000000 	.word	0x00000000
   ba370:	404e8480 	.word	0x404e8480

000ba374 <_ZN7RH_RF9511setModeIdleEv>:
{
   ba374:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   ba376:	7903      	ldrb	r3, [r0, #4]
   ba378:	2b02      	cmp	r3, #2
{
   ba37a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   ba37c:	d00b      	beq.n	ba396 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   ba37e:	6803      	ldr	r3, [r0, #0]
   ba380:	2102      	movs	r1, #2
   ba382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba386:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   ba388:	2201      	movs	r2, #1
   ba38a:	4611      	mov	r1, r2
   ba38c:	4620      	mov	r0, r4
   ba38e:	f7ff fe76 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   ba392:	2302      	movs	r3, #2
   ba394:	7123      	strb	r3, [r4, #4]
}
   ba396:	bd10      	pop	{r4, pc}

000ba398 <_ZN7RH_RF9515handleInterruptEv>:
{
   ba398:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   ba39a:	2112      	movs	r1, #18
{
   ba39c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   ba39e:	f7ff fe4d 	bl	ba03c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   ba3a2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   ba3a4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   ba3a6:	4620      	mov	r0, r4
   ba3a8:	f7ff fe48 	bl	ba03c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba3ac:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   ba3ae:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba3b0:	2112      	movs	r1, #18
   ba3b2:	4620      	mov	r0, r4
   ba3b4:	f7ff fe63 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   ba3b8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   ba3ba:	2b04      	cmp	r3, #4
   ba3bc:	d107      	bne.n	ba3ce <_ZN7RH_RF9515handleInterruptEv+0x36>
   ba3be:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   ba3c2:	d117      	bne.n	ba3f4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   ba3c4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   ba3c8:	b10b      	cbz	r3, ba3ce <_ZN7RH_RF9515handleInterruptEv+0x36>
   ba3ca:	0670      	lsls	r0, r6, #25
   ba3cc:	d512      	bpl.n	ba3f4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   ba3ce:	7923      	ldrb	r3, [r4, #4]
   ba3d0:	2b04      	cmp	r3, #4
   ba3d2:	d101      	bne.n	ba3d8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   ba3d4:	0669      	lsls	r1, r5, #25
   ba3d6:	d422      	bmi.n	ba41e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   ba3d8:	7923      	ldrb	r3, [r4, #4]
   ba3da:	2b03      	cmp	r3, #3
   ba3dc:	d101      	bne.n	ba3e2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   ba3de:	072a      	lsls	r2, r5, #28
   ba3e0:	d468      	bmi.n	ba4b4 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   ba3e2:	7923      	ldrb	r3, [r4, #4]
   ba3e4:	2b05      	cmp	r3, #5
   ba3e6:	d10e      	bne.n	ba406 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   ba3e8:	076b      	lsls	r3, r5, #29
   ba3ea:	d50c      	bpl.n	ba406 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   ba3ec:	f005 0501 	and.w	r5, r5, #1
   ba3f0:	7625      	strb	r5, [r4, #24]
   ba3f2:	e063      	b.n	ba4bc <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   ba3f4:	8a63      	ldrh	r3, [r4, #18]
   ba3f6:	3301      	adds	r3, #1
   ba3f8:	b29b      	uxth	r3, r3
   ba3fa:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   ba3fc:	2300      	movs	r3, #0
   ba3fe:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   ba402:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba406:	22ff      	movs	r2, #255	; 0xff
   ba408:	2112      	movs	r1, #18
   ba40a:	4620      	mov	r0, r4
   ba40c:	f7ff fe37 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba410:	4620      	mov	r0, r4
   ba412:	22ff      	movs	r2, #255	; 0xff
}
   ba414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba418:	2112      	movs	r1, #18
   ba41a:	f7ff be30 	b.w	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   ba41e:	2113      	movs	r1, #19
   ba420:	4620      	mov	r0, r4
   ba422:	f7ff fe0b 	bl	ba03c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   ba426:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   ba428:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   ba42a:	4620      	mov	r0, r4
   ba42c:	f7ff fe06 	bl	ba03c <_ZN11RHSPIDriver7spiReadEh>
   ba430:	210d      	movs	r1, #13
   ba432:	4602      	mov	r2, r0
   ba434:	4620      	mov	r0, r4
   ba436:	f7ff fe22 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   ba43a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   ba43e:	462b      	mov	r3, r5
   ba440:	2100      	movs	r1, #0
   ba442:	4620      	mov	r0, r4
   ba444:	f7ff fe40 	bl	ba0c8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   ba448:	2119      	movs	r1, #25
	_bufLen = len;
   ba44a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   ba44e:	4620      	mov	r0, r4
   ba450:	f7ff fdf4 	bl	ba03c <_ZN11RHSPIDriver7spiReadEh>
   ba454:	b240      	sxtb	r0, r0
   ba456:	2800      	cmp	r0, #0
   ba458:	bfb8      	it	lt
   ba45a:	3003      	addlt	r0, #3
   ba45c:	1080      	asrs	r0, r0, #2
   ba45e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   ba462:	211a      	movs	r1, #26
   ba464:	4620      	mov	r0, r4
   ba466:	f7ff fde9 	bl	ba03c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   ba46a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   ba46e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   ba470:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   ba472:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   ba474:	bfa9      	itett	ge
   ba476:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   ba478:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   ba47a:	b21b      	sxthge	r3, r3
   ba47c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   ba47e:	bfb2      	itee	lt
   ba480:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   ba482:	220f      	movge	r2, #15
   ba484:	fb93 f3f2 	sdivge	r3, r3, r2
   ba488:	b21b      	sxth	r3, r3
   ba48a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   ba48c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   ba490:	b16b      	cbz	r3, ba4ae <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   ba492:	8a23      	ldrh	r3, [r4, #16]
   ba494:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   ba496:	b21b      	sxth	r3, r3
   ba498:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   ba49a:	4620      	mov	r0, r4
   ba49c:	f7ff ff06 	bl	ba2ac <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   ba4a0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   ba4a4:	2b00      	cmp	r3, #0
   ba4a6:	d0ae      	beq.n	ba406 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   ba4a8:	f7ff ff64 	bl	ba374 <_ZN7RH_RF9511setModeIdleEv>
   ba4ac:	e7ab      	b.n	ba406 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   ba4ae:	8a23      	ldrh	r3, [r4, #16]
   ba4b0:	3ba4      	subs	r3, #164	; 0xa4
   ba4b2:	e7f0      	b.n	ba496 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   ba4b4:	8ae3      	ldrh	r3, [r4, #22]
   ba4b6:	3301      	adds	r3, #1
   ba4b8:	b29b      	uxth	r3, r3
   ba4ba:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   ba4bc:	4620      	mov	r0, r4
   ba4be:	e7f3      	b.n	ba4a8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000ba4c0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   ba4c0:	4b02      	ldr	r3, [pc, #8]	; (ba4cc <_ZN7RH_RF954isr0Ev+0xc>)
   ba4c2:	6818      	ldr	r0, [r3, #0]
   ba4c4:	b108      	cbz	r0, ba4ca <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   ba4c6:	f7ff bf67 	b.w	ba398 <_ZN7RH_RF9515handleInterruptEv>
}
   ba4ca:	4770      	bx	lr
   ba4cc:	2003e570 	.word	0x2003e570

000ba4d0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   ba4d0:	4b02      	ldr	r3, [pc, #8]	; (ba4dc <_ZN7RH_RF954isr1Ev+0xc>)
   ba4d2:	6858      	ldr	r0, [r3, #4]
   ba4d4:	b108      	cbz	r0, ba4da <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   ba4d6:	f7ff bf5f 	b.w	ba398 <_ZN7RH_RF9515handleInterruptEv>
}
   ba4da:	4770      	bx	lr
   ba4dc:	2003e570 	.word	0x2003e570

000ba4e0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   ba4e0:	4b02      	ldr	r3, [pc, #8]	; (ba4ec <_ZN7RH_RF954isr2Ev+0xc>)
   ba4e2:	6898      	ldr	r0, [r3, #8]
   ba4e4:	b108      	cbz	r0, ba4ea <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   ba4e6:	f7ff bf57 	b.w	ba398 <_ZN7RH_RF9515handleInterruptEv>
}
   ba4ea:	4770      	bx	lr
   ba4ec:	2003e570 	.word	0x2003e570

000ba4f0 <_ZN7RH_RF959setModeRxEv>:
{
   ba4f0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   ba4f2:	7903      	ldrb	r3, [r0, #4]
   ba4f4:	2b04      	cmp	r3, #4
{
   ba4f6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   ba4f8:	d010      	beq.n	ba51c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   ba4fa:	6803      	ldr	r3, [r0, #0]
   ba4fc:	2104      	movs	r1, #4
   ba4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba502:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   ba504:	2205      	movs	r2, #5
   ba506:	2101      	movs	r1, #1
   ba508:	4620      	mov	r0, r4
   ba50a:	f7ff fdb8 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   ba50e:	2200      	movs	r2, #0
   ba510:	2140      	movs	r1, #64	; 0x40
   ba512:	4620      	mov	r0, r4
   ba514:	f7ff fdb3 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   ba518:	2304      	movs	r3, #4
   ba51a:	7123      	strb	r3, [r4, #4]
}
   ba51c:	bd10      	pop	{r4, pc}

000ba51e <_ZN7RH_RF959availableEv>:
{
   ba51e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   ba520:	7903      	ldrb	r3, [r0, #4]
   ba522:	2b03      	cmp	r3, #3
{
   ba524:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   ba526:	d005      	beq.n	ba534 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   ba528:	f7ff ffe2 	bl	ba4f0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   ba52c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   ba530:	b2c0      	uxtb	r0, r0
}
   ba532:	bd10      	pop	{r4, pc}
	return false;
   ba534:	2000      	movs	r0, #0
   ba536:	e7fc      	b.n	ba532 <_ZN7RH_RF959availableEv+0x14>

000ba538 <_ZN7RH_RF959setModeTxEv>:
{
   ba538:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   ba53a:	7903      	ldrb	r3, [r0, #4]
   ba53c:	2b03      	cmp	r3, #3
{
   ba53e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   ba540:	d010      	beq.n	ba564 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   ba542:	6803      	ldr	r3, [r0, #0]
   ba544:	2103      	movs	r1, #3
   ba546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba54a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   ba54c:	2203      	movs	r2, #3
   ba54e:	2101      	movs	r1, #1
   ba550:	4620      	mov	r0, r4
   ba552:	f7ff fd94 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   ba556:	2240      	movs	r2, #64	; 0x40
   ba558:	4611      	mov	r1, r2
   ba55a:	4620      	mov	r0, r4
   ba55c:	f7ff fd8f 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   ba560:	2303      	movs	r3, #3
   ba562:	7123      	strb	r3, [r4, #4]
}
   ba564:	bd10      	pop	{r4, pc}

000ba566 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   ba566:	2afb      	cmp	r2, #251	; 0xfb
{
   ba568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba56a:	4604      	mov	r4, r0
   ba56c:	460f      	mov	r7, r1
   ba56e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   ba570:	d902      	bls.n	ba578 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   ba572:	2600      	movs	r6, #0
}
   ba574:	4630      	mov	r0, r6
   ba576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   ba578:	6803      	ldr	r3, [r0, #0]
   ba57a:	6a1b      	ldr	r3, [r3, #32]
   ba57c:	4798      	blx	r3
    setModeIdle();
   ba57e:	4620      	mov	r0, r4
   ba580:	f7ff fef8 	bl	ba374 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   ba584:	6823      	ldr	r3, [r4, #0]
   ba586:	4620      	mov	r0, r4
   ba588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba58a:	4798      	blx	r3
   ba58c:	4606      	mov	r6, r0
   ba58e:	2800      	cmp	r0, #0
   ba590:	d0ef      	beq.n	ba572 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   ba592:	2200      	movs	r2, #0
   ba594:	210d      	movs	r1, #13
   ba596:	4620      	mov	r0, r4
   ba598:	f7ff fd71 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   ba59c:	7ae2      	ldrb	r2, [r4, #11]
   ba59e:	2100      	movs	r1, #0
   ba5a0:	4620      	mov	r0, r4
   ba5a2:	f7ff fd6c 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   ba5a6:	7b22      	ldrb	r2, [r4, #12]
   ba5a8:	2100      	movs	r1, #0
   ba5aa:	4620      	mov	r0, r4
   ba5ac:	f7ff fd67 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   ba5b0:	7b62      	ldrb	r2, [r4, #13]
   ba5b2:	2100      	movs	r1, #0
   ba5b4:	4620      	mov	r0, r4
   ba5b6:	f7ff fd62 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   ba5ba:	7ba2      	ldrb	r2, [r4, #14]
   ba5bc:	2100      	movs	r1, #0
   ba5be:	4620      	mov	r0, r4
   ba5c0:	f7ff fd5d 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   ba5c4:	462b      	mov	r3, r5
   ba5c6:	463a      	mov	r2, r7
   ba5c8:	2100      	movs	r1, #0
   ba5ca:	4620      	mov	r0, r4
   ba5cc:	f7ff fda5 	bl	ba11a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   ba5d0:	1d2a      	adds	r2, r5, #4
   ba5d2:	b2d2      	uxtb	r2, r2
   ba5d4:	2122      	movs	r1, #34	; 0x22
   ba5d6:	4620      	mov	r0, r4
   ba5d8:	f7ff fd51 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   ba5dc:	4620      	mov	r0, r4
   ba5de:	f7ff ffab 	bl	ba538 <_ZN7RH_RF959setModeTxEv>
    return true;
   ba5e2:	e7c7      	b.n	ba574 <_ZN7RH_RF954sendEPKhh+0xe>

000ba5e4 <_ZN7RH_RF9510setTxPowerEab>:
{
   ba5e4:	b510      	push	{r4, lr}
   ba5e6:	4604      	mov	r4, r0
    _useRFO = useRFO;
   ba5e8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   ba5ec:	b172      	cbz	r2, ba60c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   ba5ee:	f381 0204 	usat	r2, #4, r1
   ba5f2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   ba5f6:	b2d2      	uxtb	r2, r2
   ba5f8:	2109      	movs	r1, #9
   ba5fa:	f7ff fd40 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   ba5fe:	4620      	mov	r0, r4
   ba600:	2204      	movs	r2, #4
}
   ba602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   ba606:	214d      	movs	r1, #77	; 0x4d
   ba608:	f7ff bd39 	b.w	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
}
   ba60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba610:	f7ff be0c 	b.w	ba22c <_ZN7RH_RF9510setTxPowerEab.part.0>

000ba614 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   ba614:	b538      	push	{r3, r4, r5, lr}
   ba616:	460c      	mov	r4, r1
   ba618:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   ba61a:	780a      	ldrb	r2, [r1, #0]
   ba61c:	211d      	movs	r1, #29
   ba61e:	f7ff fd2e 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   ba622:	7862      	ldrb	r2, [r4, #1]
   ba624:	211e      	movs	r1, #30
   ba626:	4628      	mov	r0, r5
   ba628:	f7ff fd29 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   ba62c:	78a2      	ldrb	r2, [r4, #2]
   ba62e:	4628      	mov	r0, r5
   ba630:	2126      	movs	r1, #38	; 0x26
}
   ba632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   ba636:	f7ff bd22 	b.w	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
	...

000ba63c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   ba63c:	2905      	cmp	r1, #5
{
   ba63e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   ba640:	d80f      	bhi.n	ba662 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   ba642:	4b09      	ldr	r3, [pc, #36]	; (ba668 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   ba644:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   ba648:	185c      	adds	r4, r3, r1
   ba64a:	5a5a      	ldrh	r2, [r3, r1]
   ba64c:	78a3      	ldrb	r3, [r4, #2]
   ba64e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   ba652:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   ba654:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   ba658:	f7ff ffdc 	bl	ba614 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   ba65c:	2001      	movs	r0, #1
}
   ba65e:	b002      	add	sp, #8
   ba660:	bd10      	pop	{r4, pc}
        return false;
   ba662:	2000      	movs	r0, #0
   ba664:	e7fb      	b.n	ba65e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   ba666:	bf00      	nop
   ba668:	000c11e0 	.word	0x000c11e0

000ba66c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   ba66c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   ba66e:	0a0a      	lsrs	r2, r1, #8
{
   ba670:	4605      	mov	r5, r0
   ba672:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   ba674:	2120      	movs	r1, #32
   ba676:	f7ff fd02 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   ba67a:	b2e2      	uxtb	r2, r4
   ba67c:	4628      	mov	r0, r5
   ba67e:	2121      	movs	r1, #33	; 0x21
}
   ba680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   ba684:	f7ff bcfb 	b.w	ba07e <_ZN11RHSPIDriver8spiWriteEhh>

000ba688 <_ZN7RH_RF954initEv>:
{
   ba688:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba68a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   ba68c:	f7ff fca6 	bl	b9fdc <_ZN11RHSPIDriver4initEv>
   ba690:	4606      	mov	r6, r0
   ba692:	b918      	cbnz	r0, ba69c <_ZN7RH_RF954initEv+0x14>
	return false;
   ba694:	2600      	movs	r6, #0
}
   ba696:	4630      	mov	r0, r6
   ba698:	b002      	add	sp, #8
   ba69a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   ba69c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   ba6a0:	2dff      	cmp	r5, #255	; 0xff
   ba6a2:	d054      	beq.n	ba74e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   ba6a4:	4629      	mov	r1, r5
   ba6a6:	4620      	mov	r0, r4
   ba6a8:	f7ff fd5f 	bl	ba16a <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   ba6ac:	2280      	movs	r2, #128	; 0x80
   ba6ae:	2101      	movs	r1, #1
   ba6b0:	4620      	mov	r0, r4
   ba6b2:	f7ff fce4 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   ba6b6:	200a      	movs	r0, #10
   ba6b8:	f001 f9b0 	bl	bba1c <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   ba6bc:	2101      	movs	r1, #1
   ba6be:	4620      	mov	r0, r4
   ba6c0:	f7ff fcbc 	bl	ba03c <_ZN11RHSPIDriver7spiReadEh>
   ba6c4:	2880      	cmp	r0, #128	; 0x80
   ba6c6:	d1e5      	bne.n	ba694 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   ba6c8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   ba6cc:	28ff      	cmp	r0, #255	; 0xff
   ba6ce:	d01c      	beq.n	ba70a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   ba6d0:	2100      	movs	r1, #0
   ba6d2:	f004 fa33 	bl	beb3c <pinMode>
	if (_myInterruptIndex == 0xff)
   ba6d6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   ba6da:	2bff      	cmp	r3, #255	; 0xff
   ba6dc:	d107      	bne.n	ba6ee <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   ba6de:	4a26      	ldr	r2, [pc, #152]	; (ba778 <_ZN7RH_RF954initEv+0xf0>)
   ba6e0:	7813      	ldrb	r3, [r2, #0]
   ba6e2:	2b03      	cmp	r3, #3
   ba6e4:	d8d6      	bhi.n	ba694 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   ba6e6:	1c59      	adds	r1, r3, #1
   ba6e8:	7011      	strb	r1, [r2, #0]
   ba6ea:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   ba6ee:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   ba6f2:	4b22      	ldr	r3, [pc, #136]	; (ba77c <_ZN7RH_RF954initEv+0xf4>)
   ba6f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   ba6f8:	bb62      	cbnz	r2, ba754 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   ba6fa:	4921      	ldr	r1, [pc, #132]	; (ba780 <_ZN7RH_RF954initEv+0xf8>)
   ba6fc:	9200      	str	r2, [sp, #0]
   ba6fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba702:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   ba704:	b2a8      	uxth	r0, r5
   ba706:	f001 feff 	bl	bc508 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   ba70a:	2200      	movs	r2, #0
   ba70c:	210e      	movs	r1, #14
   ba70e:	4620      	mov	r0, r4
   ba710:	f7ff fcb5 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   ba714:	2200      	movs	r2, #0
   ba716:	210f      	movs	r1, #15
   ba718:	4620      	mov	r0, r4
   ba71a:	f7ff fcb0 	bl	ba07e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   ba71e:	4620      	mov	r0, r4
   ba720:	f7ff fe28 	bl	ba374 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   ba724:	2100      	movs	r1, #0
   ba726:	4620      	mov	r0, r4
   ba728:	f7ff ff88 	bl	ba63c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   ba72c:	2108      	movs	r1, #8
   ba72e:	4620      	mov	r0, r4
   ba730:	f7ff ff9c 	bl	ba66c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   ba734:	ed9f 0a13 	vldr	s0, [pc, #76]	; ba784 <_ZN7RH_RF954initEv+0xfc>
   ba738:	4620      	mov	r0, r4
   ba73a:	f7ff fdd9 	bl	ba2f0 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   ba73e:	2300      	movs	r3, #0
   ba740:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   ba744:	210d      	movs	r1, #13
   ba746:	4620      	mov	r0, r4
   ba748:	f7ff fd70 	bl	ba22c <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   ba74c:	e7a3      	b.n	ba696 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   ba74e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   ba752:	e7ab      	b.n	ba6ac <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   ba754:	2a01      	cmp	r2, #1
   ba756:	f04f 0300 	mov.w	r3, #0
   ba75a:	d104      	bne.n	ba766 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   ba75c:	9300      	str	r3, [sp, #0]
   ba75e:	490a      	ldr	r1, [pc, #40]	; (ba788 <_ZN7RH_RF954initEv+0x100>)
   ba760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba764:	e7ce      	b.n	ba704 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   ba766:	2a02      	cmp	r2, #2
   ba768:	d194      	bne.n	ba694 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   ba76a:	9300      	str	r3, [sp, #0]
   ba76c:	4907      	ldr	r1, [pc, #28]	; (ba78c <_ZN7RH_RF954initEv+0x104>)
   ba76e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba772:	2201      	movs	r2, #1
   ba774:	e7c6      	b.n	ba704 <_ZN7RH_RF954initEv+0x7c>
   ba776:	bf00      	nop
   ba778:	2003e56d 	.word	0x2003e56d
   ba77c:	2003e570 	.word	0x2003e570
   ba780:	000ba4c1 	.word	0x000ba4c1
   ba784:	43d90000 	.word	0x43d90000
   ba788:	000ba4d1 	.word	0x000ba4d1
   ba78c:	000ba4e1 	.word	0x000ba4e1

000ba790 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   ba790:	2001      	movs	r0, #1
   ba792:	4770      	bx	lr

000ba794 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   ba794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba796:	4d1f      	ldr	r5, [pc, #124]	; (ba814 <_ZN14SequentialFileC1Ev+0x80>)
   ba798:	4b1f      	ldr	r3, [pc, #124]	; (ba818 <_ZN14SequentialFileC1Ev+0x84>)
   ba79a:	4604      	mov	r4, r0
   ba79c:	4629      	mov	r1, r5
   ba79e:	f840 3b04 	str.w	r3, [r0], #4
   ba7a2:	f003 fc70 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   ba7a6:	491d      	ldr	r1, [pc, #116]	; (ba81c <_ZN14SequentialFileC1Ev+0x88>)
   ba7a8:	f104 0014 	add.w	r0, r4, #20
   ba7ac:	f003 fc6b 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   ba7b0:	4629      	mov	r1, r5
   ba7b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba7b6:	f003 fc66 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   ba7ba:	2300      	movs	r3, #0
   ba7bc:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba7c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   ba7c4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   ba7c8:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   ba7cc:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   ba7d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba7d4:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba7d6:	2308      	movs	r3, #8
   ba7d8:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba7da:	2020      	movs	r0, #32
   ba7dc:	f7f9 fc5b 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba7e0:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba7e2:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba7e4:	3d01      	subs	r5, #1
   ba7e6:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba7e8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   ba7ec:	4606      	mov	r6, r0
   ba7ee:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba7f2:	f7f9 fc50 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba7f6:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba7fa:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   ba7fe:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   ba802:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba804:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba806:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   ba808:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba80a:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   ba80c:	6667      	str	r7, [r4, #100]	; 0x64

}
   ba80e:	4620      	mov	r0, r4
   ba810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba812:	bf00      	nop
   ba814:	000c1579 	.word	0x000c1579
   ba818:	000c137c 	.word	0x000c137c
   ba81c:	000c127c 	.word	0x000c127c

000ba820 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   ba820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   ba822:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   ba824:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   ba826:	4628      	mov	r0, r5
   ba828:	f003 fc8b 	bl	be142 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   ba82c:	490e      	ldr	r1, [pc, #56]	; (ba868 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   ba82e:	4668      	mov	r0, sp
   ba830:	f003 fc29 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   ba834:	4669      	mov	r1, sp
   ba836:	4628      	mov	r0, r5
   ba838:	f003 fcf0 	bl	be21c <_ZNK6String8endsWithERKS_>
   ba83c:	4606      	mov	r6, r0
   ba83e:	4668      	mov	r0, sp
   ba840:	f003 fbd6 	bl	bdff0 <_ZN6StringD1Ev>
   ba844:	b16e      	cbz	r6, ba862 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   ba846:	68e3      	ldr	r3, [r4, #12]
   ba848:	2200      	movs	r2, #0
   ba84a:	3b01      	subs	r3, #1
   ba84c:	4629      	mov	r1, r5
   ba84e:	4668      	mov	r0, sp
   ba850:	f003 fcfa 	bl	be248 <_ZNK6String9substringEjj>
   ba854:	4669      	mov	r1, sp
   ba856:	4628      	mov	r0, r5
   ba858:	f003 fc6b 	bl	be132 <_ZN6StringaSEOS_>
   ba85c:	4668      	mov	r0, sp
   ba85e:	f003 fbc7 	bl	bdff0 <_ZN6StringD1Ev>
    }
    return *this; 
};
   ba862:	4620      	mov	r0, r4
   ba864:	b004      	add	sp, #16
   ba866:	bd70      	pop	{r4, r5, r6, pc}
   ba868:	000c1281 	.word	0x000c1281

000ba86c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   ba86c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   ba86e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   ba870:	4604      	mov	r4, r0
    if (!queueMutex) {
   ba872:	b913      	cbnz	r3, ba87a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   ba874:	303c      	adds	r0, #60	; 0x3c
   ba876:	f000 fc4d 	bl	bb114 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   ba87a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   ba87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   ba880:	f000 bc50 	b.w	bb124 <os_mutex_lock>

000ba884 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   ba884:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   ba886:	f000 bc55 	b.w	bb134 <os_mutex_unlock>
	...

000ba88c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   ba88c:	b510      	push	{r4, lr}
   ba88e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   ba890:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   ba892:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   ba894:	f000 fe06 	bl	bb4a4 <stat>
    if (result == 0) {
   ba898:	b9d0      	cbnz	r0, ba8d0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   ba89a:	9b01      	ldr	r3, [sp, #4]
   ba89c:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   ba89e:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   ba8a0:	d506      	bpl.n	ba8b0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   ba8a2:	4915      	ldr	r1, [pc, #84]	; (ba8f8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   ba8a4:	4815      	ldr	r0, [pc, #84]	; (ba8fc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba8a6:	f7f9 fc19 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        return true;
   ba8aa:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   ba8ac:	b016      	add	sp, #88	; 0x58
   ba8ae:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   ba8b0:	4812      	ldr	r0, [pc, #72]	; (ba8fc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba8b2:	4913      	ldr	r1, [pc, #76]	; (ba900 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   ba8b4:	f7fc fa3e 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   ba8b8:	4620      	mov	r0, r4
   ba8ba:	f005 f973 	bl	bfba4 <unlink>
    result = mkdir(path, 0777);
   ba8be:	f240 11ff 	movw	r1, #511	; 0x1ff
   ba8c2:	4620      	mov	r0, r4
   ba8c4:	f000 fdf6 	bl	bb4b4 <mkdir>
    if (result == 0) {
   ba8c8:	b980      	cbnz	r0, ba8ec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   ba8ca:	490e      	ldr	r1, [pc, #56]	; (ba904 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   ba8cc:	4622      	mov	r2, r4
   ba8ce:	e7e9      	b.n	ba8a4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   ba8d0:	f001 f86c 	bl	bb9ac <__errno>
   ba8d4:	6803      	ldr	r3, [r0, #0]
   ba8d6:	2b02      	cmp	r3, #2
   ba8d8:	d0f1      	beq.n	ba8be <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   ba8da:	f001 f867 	bl	bb9ac <__errno>
   ba8de:	490a      	ldr	r1, [pc, #40]	; (ba908 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   ba8e0:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   ba8e2:	4806      	ldr	r0, [pc, #24]	; (ba8fc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba8e4:	f7fc fa26 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba8e8:	2000      	movs	r0, #0
   ba8ea:	e7df      	b.n	ba8ac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   ba8ec:	f001 f85e 	bl	bb9ac <__errno>
   ba8f0:	4906      	ldr	r1, [pc, #24]	; (ba90c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   ba8f2:	6802      	ldr	r2, [r0, #0]
   ba8f4:	e7f5      	b.n	ba8e2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   ba8f6:	bf00      	nop
   ba8f8:	000c128e 	.word	0x000c128e
   ba8fc:	2003e57c 	.word	0x2003e57c
   ba900:	000c12ab 	.word	0x000c12ab
   ba904:	000c12dc 	.word	0x000c12dc
   ba908:	000c12c8 	.word	0x000c12c8
   ba90c:	000c12eb 	.word	0x000c12eb

000ba910 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   ba910:	b538      	push	{r3, r4, r5, lr}
   ba912:	4615      	mov	r5, r2
   ba914:	4604      	mov	r4, r0
    String result = name;
   ba916:	f003 fbb6 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   ba91a:	b14d      	cbz	r5, ba930 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   ba91c:	782b      	ldrb	r3, [r5, #0]
   ba91e:	b13b      	cbz	r3, ba930 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   ba920:	4904      	ldr	r1, [pc, #16]	; (ba934 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   ba922:	4620      	mov	r0, r4
   ba924:	f003 fc36 	bl	be194 <_ZN6String6concatEPKc>
   ba928:	4629      	mov	r1, r5
   ba92a:	4620      	mov	r0, r4
   ba92c:	f003 fc32 	bl	be194 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   ba930:	4620      	mov	r0, r4
   ba932:	bd38      	pop	{r3, r4, r5, pc}
   ba934:	000c1680 	.word	0x000c1680

000ba938 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   ba938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba93a:	4605      	mov	r5, r0
   ba93c:	460e      	mov	r6, r1
   ba93e:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   ba940:	6949      	ldr	r1, [r1, #20]
   ba942:	4668      	mov	r0, sp
   ba944:	f003 fca0 	bl	be288 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   ba948:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   ba94a:	b904      	cbnz	r4, ba94e <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   ba94c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba94e:	4622      	mov	r2, r4
   ba950:	4628      	mov	r0, r5
   ba952:	f7ff ffdd 	bl	ba910 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   ba956:	4668      	mov	r0, sp
   ba958:	f003 fb4a 	bl	bdff0 <_ZN6StringD1Ev>
}
   ba95c:	4628      	mov	r0, r5
   ba95e:	b004      	add	sp, #16
   ba960:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba964 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   ba964:	b570      	push	{r4, r5, r6, lr}
   ba966:	460c      	mov	r4, r1
   ba968:	b08e      	sub	sp, #56	; 0x38
    String result;
   ba96a:	491a      	ldr	r1, [pc, #104]	; (ba9d4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   ba96c:	e9cd 3200 	strd	r3, r2, [sp]
   ba970:	4605      	mov	r5, r0
    String result;
   ba972:	f003 fb88 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   ba976:	68e0      	ldr	r0, [r4, #12]
   ba978:	69e1      	ldr	r1, [r4, #28]
   ba97a:	4401      	add	r1, r0
   ba97c:	3104      	adds	r1, #4
   ba97e:	4628      	mov	r0, r5
   ba980:	f003 fb54 	bl	be02c <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   ba984:	1d21      	adds	r1, r4, #4
   ba986:	a806      	add	r0, sp, #24
   ba988:	f003 fbc8 	bl	be11c <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   ba98c:	4912      	ldr	r1, [pc, #72]	; (ba9d8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   ba98e:	a802      	add	r0, sp, #8
   ba990:	f003 fb79 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   ba994:	a902      	add	r1, sp, #8
   ba996:	a806      	add	r0, sp, #24
   ba998:	f003 fc0d 	bl	be1b6 <_ZplRK15StringSumHelperRK6String>
   ba99c:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba9a0:	4606      	mov	r6, r0
   ba9a2:	4621      	mov	r1, r4
   ba9a4:	a80a      	add	r0, sp, #40	; 0x28
   ba9a6:	f7ff ffc7 	bl	ba938 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   ba9aa:	a90a      	add	r1, sp, #40	; 0x28
   ba9ac:	4630      	mov	r0, r6
   ba9ae:	f003 fc02 	bl	be1b6 <_ZplRK15StringSumHelperRK6String>
   ba9b2:	4601      	mov	r1, r0
   ba9b4:	4628      	mov	r0, r5
   ba9b6:	f003 fba2 	bl	be0fe <_ZN6StringaSERKS_>
   ba9ba:	a80a      	add	r0, sp, #40	; 0x28
   ba9bc:	f003 fb18 	bl	bdff0 <_ZN6StringD1Ev>
   ba9c0:	a802      	add	r0, sp, #8
   ba9c2:	f003 fb15 	bl	bdff0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   ba9c6:	a806      	add	r0, sp, #24
   ba9c8:	f003 fb12 	bl	bdff0 <_ZN6StringD1Ev>
}
   ba9cc:	4628      	mov	r0, r5
   ba9ce:	b00e      	add	sp, #56	; 0x38
   ba9d0:	bd70      	pop	{r4, r5, r6, pc}
   ba9d2:	bf00      	nop
   ba9d4:	000c1579 	.word	0x000c1579
   ba9d8:	000c1281 	.word	0x000c1281

000ba9dc <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   ba9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   ba9e0:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   ba9e2:	b08e      	sub	sp, #56	; 0x38
   ba9e4:	4605      	mov	r5, r0
   ba9e6:	460f      	mov	r7, r1
    if (allExtensions) {
   ba9e8:	2a00      	cmp	r2, #0
   ba9ea:	d04a      	beq.n	baa82 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   ba9ec:	6840      	ldr	r0, [r0, #4]
   ba9ee:	f000 fd71 	bl	bb4d4 <opendir>
        if (dir) {
   ba9f2:	4606      	mov	r6, r0
   ba9f4:	2800      	cmp	r0, #0
   ba9f6:	d054      	beq.n	baaa2 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   ba9f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; baab0 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   ba9fc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; baaac <_ZN14SequentialFile13removeFileNumEib+0xd0>
   baa00:	f8df 80a4 	ldr.w	r8, [pc, #164]	; baaa8 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   baa04:	4630      	mov	r0, r6
   baa06:	f000 fd6d 	bl	bb4e4 <readdir>
                if (!ent) {
   baa0a:	2800      	cmp	r0, #0
   baa0c:	d033      	beq.n	baa76 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   baa0e:	7a82      	ldrb	r2, [r0, #10]
   baa10:	2a08      	cmp	r2, #8
   baa12:	d1f7      	bne.n	baa04 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   baa14:	f100 040b 	add.w	r4, r0, #11
   baa18:	6969      	ldr	r1, [r5, #20]
   baa1a:	aa01      	add	r2, sp, #4
   baa1c:	4620      	mov	r0, r4
   baa1e:	f000 ff9d 	bl	bb95c <sscanf>
   baa22:	2801      	cmp	r0, #1
   baa24:	d1ee      	bne.n	baa04 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   baa26:	9b01      	ldr	r3, [sp, #4]
   baa28:	42bb      	cmp	r3, r7
   baa2a:	d1eb      	bne.n	baa04 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   baa2c:	1d29      	adds	r1, r5, #4
   baa2e:	a80a      	add	r0, sp, #40	; 0x28
   baa30:	f003 fb74 	bl	be11c <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   baa34:	4651      	mov	r1, sl
   baa36:	a806      	add	r0, sp, #24
   baa38:	f003 fb25 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   baa3c:	a906      	add	r1, sp, #24
   baa3e:	a80a      	add	r0, sp, #40	; 0x28
   baa40:	f003 fbb9 	bl	be1b6 <_ZplRK15StringSumHelperRK6String>
   baa44:	4621      	mov	r1, r4
   baa46:	f003 fbc2 	bl	be1ce <_ZplRK15StringSumHelperPKc>
   baa4a:	4601      	mov	r1, r0
   baa4c:	a802      	add	r0, sp, #8
   baa4e:	f003 fb65 	bl	be11c <_ZN6StringC1ERKS_>
   baa52:	a806      	add	r0, sp, #24
   baa54:	f003 facc 	bl	bdff0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   baa58:	a80a      	add	r0, sp, #40	; 0x28
   baa5a:	f003 fac9 	bl	bdff0 <_ZN6StringD1Ev>
                        unlink(path);
   baa5e:	9802      	ldr	r0, [sp, #8]
   baa60:	f005 f8a0 	bl	bfba4 <unlink>
                        _log.trace("removed %s", path.c_str());
   baa64:	4640      	mov	r0, r8
   baa66:	9a02      	ldr	r2, [sp, #8]
   baa68:	4649      	mov	r1, r9
   baa6a:	f7fc f971 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   baa6e:	a802      	add	r0, sp, #8
   baa70:	f003 fabe 	bl	bdff0 <_ZN6StringD1Ev>
                    continue;
   baa74:	e7c6      	b.n	baa04 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   baa76:	4630      	mov	r0, r6
}
   baa78:	b00e      	add	sp, #56	; 0x38
   baa7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   baa7e:	f000 bd39 	b.w	bb4f4 <closedir>
        String path = getPathForFileNum(fileNum); 
   baa82:	460a      	mov	r2, r1
   baa84:	4601      	mov	r1, r0
   baa86:	a80a      	add	r0, sp, #40	; 0x28
   baa88:	f7ff ff6c 	bl	ba964 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   baa8c:	980a      	ldr	r0, [sp, #40]	; 0x28
   baa8e:	f005 f889 	bl	bfba4 <unlink>
        _log.trace("removed %s", path.c_str());
   baa92:	4805      	ldr	r0, [pc, #20]	; (baaa8 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   baa94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   baa96:	4905      	ldr	r1, [pc, #20]	; (baaac <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   baa98:	f7fc f95a 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   baa9c:	a80a      	add	r0, sp, #40	; 0x28
   baa9e:	f003 faa7 	bl	bdff0 <_ZN6StringD1Ev>
}
   baaa2:	b00e      	add	sp, #56	; 0x38
   baaa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   baaa8:	2003e57c 	.word	0x2003e57c
   baaac:	000c1283 	.word	0x000c1283
   baab0:	000c1281 	.word	0x000c1281

000baab4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   baab4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   baab6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   baab8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   baaba:	b183      	cbz	r3, baade <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   baabc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   baabe:	6945      	ldr	r5, [r0, #20]
   baac0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   baac2:	42ae      	cmp	r6, r5
   baac4:	d906      	bls.n	baad4 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   baac6:	f855 0b04 	ldr.w	r0, [r5], #4
   baaca:	f44f 7100 	mov.w	r1, #512	; 0x200
   baace:	f7f9 fae6 	bl	b409e <_ZdlPvj>
   baad2:	e7f6      	b.n	baac2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   baad4:	6861      	ldr	r1, [r4, #4]
   baad6:	6820      	ldr	r0, [r4, #0]
   baad8:	0089      	lsls	r1, r1, #2
   baada:	f7f9 fae0 	bl	b409e <_ZdlPvj>
    }
   baade:	4620      	mov	r0, r4
   baae0:	bd70      	pop	{r4, r5, r6, pc}
	...

000baae4 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   baae4:	b510      	push	{r4, lr}
   baae6:	4b09      	ldr	r3, [pc, #36]	; (bab0c <_ZN14SequentialFileD1Ev+0x28>)
   baae8:	4604      	mov	r4, r0
   baaea:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   baaee:	f7ff ffe1 	bl	baab4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   baaf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   baaf6:	f003 fa7b 	bl	bdff0 <_ZN6StringD1Ev>
   baafa:	f104 0014 	add.w	r0, r4, #20
   baafe:	f003 fa77 	bl	bdff0 <_ZN6StringD1Ev>
   bab02:	1d20      	adds	r0, r4, #4
   bab04:	f003 fa74 	bl	bdff0 <_ZN6StringD1Ev>
}
   bab08:	4620      	mov	r0, r4
   bab0a:	bd10      	pop	{r4, pc}
   bab0c:	000c137c 	.word	0x000c137c

000bab10 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bab10:	b510      	push	{r4, lr}
   bab12:	4604      	mov	r4, r0
}
   bab14:	f7ff ffe6 	bl	baae4 <_ZN14SequentialFileD1Ev>
   bab18:	4620      	mov	r0, r4
   bab1a:	2168      	movs	r1, #104	; 0x68
   bab1c:	f7f9 fabf 	bl	b409e <_ZdlPvj>
   bab20:	4620      	mov	r0, r4
   bab22:	bd10      	pop	{r4, pc}

000bab24 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bab24:	68c3      	ldr	r3, [r0, #12]
   bab26:	68ca      	ldr	r2, [r1, #12]
   bab28:	1a9b      	subs	r3, r3, r2
   bab2a:	109b      	asrs	r3, r3, #2
   bab2c:	1e5a      	subs	r2, r3, #1
   bab2e:	e9d0 3000 	ldrd	r3, r0, [r0]
   bab32:	1a1b      	subs	r3, r3, r0
   bab34:	109b      	asrs	r3, r3, #2
   bab36:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bab3a:	6888      	ldr	r0, [r1, #8]
   bab3c:	680a      	ldr	r2, [r1, #0]
   bab3e:	1a80      	subs	r0, r0, r2
      }
   bab40:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bab44:	4770      	bx	lr
	...

000bab48 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bab48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bab4c:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bab4e:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bab50:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bab52:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bab54:	4604      	mov	r4, r0
   bab56:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bab58:	d007      	beq.n	bab6a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bab5a:	b10b      	cbz	r3, bab60 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bab5c:	680a      	ldr	r2, [r1, #0]
   bab5e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bab60:	69a3      	ldr	r3, [r4, #24]
   bab62:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bab64:	61a3      	str	r3, [r4, #24]
      }
   bab66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bab6a:	f100 0108 	add.w	r1, r0, #8
   bab6e:	3018      	adds	r0, #24
   bab70:	f7ff ffd8 	bl	bab24 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bab74:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bab78:	4298      	cmp	r0, r3
   bab7a:	d102      	bne.n	bab82 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bab7c:	4838      	ldr	r0, [pc, #224]	; (bac60 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bab7e:	f004 f8ee 	bl	bed5e <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bab82:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bab84:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bab86:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bab88:	1a11      	subs	r1, r2, r0
   bab8a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bab8e:	2901      	cmp	r1, #1
   bab90:	d825      	bhi.n	babde <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bab92:	6961      	ldr	r1, [r4, #20]
   bab94:	eba2 0801 	sub.w	r8, r2, r1
   bab98:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bab9c:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bab9e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   baba2:	d936      	bls.n	bac12 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   baba4:	1b5d      	subs	r5, r3, r5
   baba6:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   baba8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   babac:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   babae:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   babb0:	eba3 0201 	sub.w	r2, r3, r1
   babb4:	d926      	bls.n	bac04 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   babb6:	428b      	cmp	r3, r1
   babb8:	d002      	beq.n	babc0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   babba:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   babbc:	f004 fdea 	bl	bf794 <memmove>
	_M_node = __new_node;
   babc0:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   babc2:	682b      	ldr	r3, [r5, #0]
   babc4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   babc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   babca:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   babcc:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   babd0:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   babd2:	f855 3008 	ldr.w	r3, [r5, r8]
   babd6:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   babd8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   babdc:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   babde:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   babe2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   babe4:	f7f9 fa57 	bl	b4096 <_Znwj>
   babe8:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   babea:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   babec:	b10b      	cbz	r3, babf2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   babee:	683a      	ldr	r2, [r7, #0]
   babf0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   babf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   babf4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   babf6:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   babf8:	685b      	ldr	r3, [r3, #4]
   babfa:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   babfc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bac00:	6222      	str	r2, [r4, #32]
   bac02:	e7af      	b.n	bab64 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bac04:	428b      	cmp	r3, r1
   bac06:	d0db      	beq.n	babc0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bac08:	f108 0004 	add.w	r0, r8, #4
   bac0c:	1a80      	subs	r0, r0, r2
   bac0e:	4428      	add	r0, r5
   bac10:	e7d4      	b.n	babbc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bac12:	f103 0902 	add.w	r9, r3, #2
   bac16:	2b01      	cmp	r3, #1
   bac18:	bf2c      	ite	cs
   bac1a:	4499      	addcs	r9, r3
   bac1c:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bac20:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bac24:	d301      	bcc.n	bac2a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bac26:	f004 f897 	bl	bed58 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bac2a:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bac2e:	f7f9 fa32 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bac32:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bac34:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bac36:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bac3a:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bac3c:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bac3e:	4291      	cmp	r1, r2
   bac40:	4682      	mov	sl, r0
   bac42:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bac46:	d003      	beq.n	bac50 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bac48:	1a52      	subs	r2, r2, r1
   bac4a:	4628      	mov	r0, r5
   bac4c:	f004 fda2 	bl	bf794 <memmove>
	::operator delete(__p
   bac50:	6861      	ldr	r1, [r4, #4]
   bac52:	6820      	ldr	r0, [r4, #0]
   bac54:	0089      	lsls	r1, r1, #2
   bac56:	f7f9 fa22 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bac5a:	e9c4 a900 	strd	sl, r9, [r4]
   bac5e:	e7af      	b.n	babc0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bac60:	000c0f05 	.word	0x000c0f05

000bac64 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bac64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bac68:	68c3      	ldr	r3, [r0, #12]
   bac6a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bac6c:	b086      	sub	sp, #24
   bac6e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bac70:	d808      	bhi.n	bac84 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bac72:	4934      	ldr	r1, [pc, #208]	; (bad44 <_ZN14SequentialFile7scanDirEv+0xe0>)
   bac74:	4834      	ldr	r0, [pc, #208]	; (bad48 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bac76:	f7fc f85d 	bl	b6d34 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bac7a:	2600      	movs	r6, #0
}
   bac7c:	4630      	mov	r0, r6
   bac7e:	b006      	add	sp, #24
   bac80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bac84:	6840      	ldr	r0, [r0, #4]
   bac86:	f7ff fe01 	bl	ba88c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bac8a:	4606      	mov	r6, r0
   bac8c:	2800      	cmp	r0, #0
   bac8e:	d0f4      	beq.n	bac7a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bac90:	6963      	ldr	r3, [r4, #20]
   bac92:	6862      	ldr	r2, [r4, #4]
   bac94:	492d      	ldr	r1, [pc, #180]	; (bad4c <_ZN14SequentialFile7scanDirEv+0xe8>)
   bac96:	482c      	ldr	r0, [pc, #176]	; (bad48 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bac98:	f7fc f85a 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bac9c:	6860      	ldr	r0, [r4, #4]
   bac9e:	f000 fc19 	bl	bb4d4 <opendir>
    if (!dir) {
   baca2:	4607      	mov	r7, r0
   baca4:	2800      	cmp	r0, #0
   baca6:	d0e8      	beq.n	bac7a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   baca8:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bacaa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bad50 <_ZN14SequentialFile7scanDirEv+0xec>
   bacae:	f8df 8098 	ldr.w	r8, [pc, #152]	; bad48 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bacb2:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bacb4:	4638      	mov	r0, r7
   bacb6:	f000 fc15 	bl	bb4e4 <readdir>
        if (!ent) {
   bacba:	4605      	mov	r5, r0
   bacbc:	2800      	cmp	r0, #0
   bacbe:	d039      	beq.n	bad34 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bacc0:	7a83      	ldrb	r3, [r0, #10]
   bacc2:	2b08      	cmp	r3, #8
   bacc4:	d1f6      	bne.n	bacb4 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bacc6:	350b      	adds	r5, #11
   bacc8:	6961      	ldr	r1, [r4, #20]
   bacca:	aa01      	add	r2, sp, #4
   baccc:	4628      	mov	r0, r5
   bacce:	f000 fe45 	bl	bb95c <sscanf>
   bacd2:	2801      	cmp	r0, #1
   bacd4:	d1ee      	bne.n	bacb4 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bacd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bacd8:	b17b      	cbz	r3, bacfa <_ZN14SequentialFile7scanDirEv+0x96>
   bacda:	4629      	mov	r1, r5
   bacdc:	a802      	add	r0, sp, #8
   bacde:	f003 f9d2 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
   bace2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bace6:	a802      	add	r0, sp, #8
   bace8:	f003 fa98 	bl	be21c <_ZNK6String8endsWithERKS_>
   bacec:	4682      	mov	sl, r0
   bacee:	a802      	add	r0, sp, #8
   bacf0:	f003 f97e 	bl	bdff0 <_ZN6StringD1Ev>
   bacf4:	f1ba 0f00 	cmp.w	sl, #0
   bacf8:	d0dc      	beq.n	bacb4 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bacfa:	6823      	ldr	r3, [r4, #0]
   bacfc:	4629      	mov	r1, r5
   bacfe:	689b      	ldr	r3, [r3, #8]
   bad00:	4620      	mov	r0, r4
   bad02:	4798      	blx	r3
   bad04:	2800      	cmp	r0, #0
   bad06:	d0d5      	beq.n	bacb4 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bad08:	9a01      	ldr	r2, [sp, #4]
   bad0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bad0c:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bad0e:	bfb8      	it	lt
   bad10:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bad12:	462b      	mov	r3, r5
   bad14:	4649      	mov	r1, r9
   bad16:	4640      	mov	r0, r8
   bad18:	f7fc f81a 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bad1c:	4620      	mov	r0, r4
   bad1e:	f7ff fda5 	bl	ba86c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bad22:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bad26:	a901      	add	r1, sp, #4
   bad28:	f7ff ff0e 	bl	bab48 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bad2c:	4620      	mov	r0, r4
   bad2e:	f7ff fda9 	bl	ba884 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bad32:	e7bf      	b.n	bacb4 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bad34:	4638      	mov	r0, r7
   bad36:	f000 fbdd 	bl	bb4f4 <closedir>
    scanDirCompleted = true;
   bad3a:	2301      	movs	r3, #1
   bad3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bad40:	e79c      	b.n	bac7c <_ZN14SequentialFile7scanDirEv+0x18>
   bad42:	bf00      	nop
   bad44:	000c1301 	.word	0x000c1301
   bad48:	2003e57c 	.word	0x2003e57c
   bad4c:	000c1316 	.word	0x000c1316
   bad50:	000c1332 	.word	0x000c1332

000bad54 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bad54:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bad56:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bad5a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bad5c:	b90b      	cbnz	r3, bad62 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bad5e:	f7ff ff81 	bl	bac64 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bad62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bad64:	3001      	adds	r0, #1
   bad66:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bad68:	bd10      	pop	{r4, pc}
	...

000bad6c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bad6c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bad6e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bad72:	4604      	mov	r4, r0
   bad74:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bad76:	b90b      	cbnz	r3, bad7c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bad78:	f7ff ff74 	bl	bac64 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bad7c:	4620      	mov	r0, r4
   bad7e:	f7ff fd75 	bl	ba86c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bad82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bad84:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bad86:	429a      	cmp	r2, r3
   bad88:	d020      	beq.n	badcc <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bad8a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bad8e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bad90:	b126      	cbz	r6, bad9c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bad92:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bad94:	4293      	cmp	r3, r2
   bad96:	d00c      	beq.n	badb2 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bad98:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bad9a:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bad9c:	4620      	mov	r0, r4
   bad9e:	f7ff fd71 	bl	ba884 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bada2:	b125      	cbz	r5, badae <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bada4:	490a      	ldr	r1, [pc, #40]	; (badd0 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bada6:	480b      	ldr	r0, [pc, #44]	; (badd4 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bada8:	462a      	mov	r2, r5
   badaa:	f7fb ffd1 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
}
   badae:	4628      	mov	r0, r5
   badb0:	bd70      	pop	{r4, r5, r6, pc}
   badb2:	f44f 7100 	mov.w	r1, #512	; 0x200
   badb6:	f7f9 f972 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   badba:	6d63      	ldr	r3, [r4, #84]	; 0x54
   badbc:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   badbe:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   badc0:	685b      	ldr	r3, [r3, #4]
   badc2:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   badc4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   badc8:	6522      	str	r2, [r4, #80]	; 0x50
   badca:	e7e6      	b.n	bad9a <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   badcc:	2500      	movs	r5, #0
   badce:	e7e5      	b.n	bad9c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   badd0:	000c1348 	.word	0x000c1348
   badd4:	2003e57c 	.word	0x2003e57c

000badd8 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   badd8:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   badda:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   badde:	9101      	str	r1, [sp, #4]
   bade0:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bade2:	b90b      	cbnz	r3, bade8 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bade4:	f7ff ff3e 	bl	bac64 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bade8:	9b01      	ldr	r3, [sp, #4]
   badea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   badec:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   badee:	bfb8      	it	lt
   badf0:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   badf2:	4620      	mov	r0, r4
   badf4:	f7ff fd3a 	bl	ba86c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   badf8:	a901      	add	r1, sp, #4
   badfa:	f104 0040 	add.w	r0, r4, #64	; 0x40
   badfe:	f7ff fea3 	bl	bab48 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bae02:	4620      	mov	r0, r4
   bae04:	f7ff fd3e 	bl	ba884 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bae08:	b002      	add	sp, #8
   bae0a:	bd10      	pop	{r4, pc}

000bae0c <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bae0c:	b538      	push	{r3, r4, r5, lr}
   bae0e:	4604      	mov	r4, r0
    queueMutexLock();
   bae10:	f7ff fd2c 	bl	ba86c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bae14:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bae18:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bae1c:	f7ff fe82 	bl	bab24 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bae20:	4605      	mov	r5, r0
    queueMutexUnlock();
   bae22:	4620      	mov	r0, r4
   bae24:	f7ff fd2e 	bl	ba884 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bae28:	4628      	mov	r0, r5
   bae2a:	bd38      	pop	{r3, r4, r5, pc}

000bae2c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bae2c:	4b01      	ldr	r3, [pc, #4]	; (bae34 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bae2e:	4a02      	ldr	r2, [pc, #8]	; (bae38 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bae30:	601a      	str	r2, [r3, #0]
}
   bae32:	4770      	bx	lr
   bae34:	2003e57c 	.word	0x2003e57c
   bae38:	000c1365 	.word	0x000c1365

000bae3c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   bae3c:	4770      	bx	lr

000bae3e <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bae3e:	6803      	ldr	r3, [r0, #0]
   bae40:	685b      	ldr	r3, [r3, #4]
   bae42:	4718      	bx	r3

000bae44 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bae44:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bae46:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bae48:	4604      	mov	r4, r0
    if (lastUpdate) {
   bae4a:	b133      	cbz	r3, bae5a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bae4c:	b131      	cbz	r1, bae5c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bae4e:	6823      	ldr	r3, [r4, #0]
   bae50:	4620      	mov	r0, r4
   bae52:	689b      	ldr	r3, [r3, #8]
   bae54:	4798      	blx	r3
            lastUpdate = 0;
   bae56:	2300      	movs	r3, #0
   bae58:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bae5a:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bae5c:	f000 f9c2 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bae60:	69a3      	ldr	r3, [r4, #24]
   bae62:	1ac0      	subs	r0, r0, r3
   bae64:	69e3      	ldr	r3, [r4, #28]
   bae66:	4298      	cmp	r0, r3
   bae68:	d2f1      	bcs.n	bae4e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bae6a:	e7f6      	b.n	bae5a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bae6c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bae6c:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bae6e:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bae70:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bae72:	b11b      	cbz	r3, bae7c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bae74:	f000 f9b6 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bae78:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bae7a:	bd10      	pop	{r4, pc}
        save();
   bae7c:	6803      	ldr	r3, [r0, #0]
}
   bae7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bae82:	689b      	ldr	r3, [r3, #8]
   bae84:	4718      	bx	r3

000bae86 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   bae86:	f000 b975 	b.w	bb174 <os_mutex_recursive_unlock>

000bae8a <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bae8a:	b510      	push	{r4, lr}
   bae8c:	4604      	mov	r4, r0
   bae8e:	3004      	adds	r0, #4
   bae90:	f7fa fda4 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bae94:	6823      	ldr	r3, [r4, #0]
   bae96:	68e1      	ldr	r1, [r4, #12]
   bae98:	695b      	ldr	r3, [r3, #20]
   bae9a:	4620      	mov	r0, r4
   bae9c:	4798      	blx	r3
   bae9e:	b918      	cbnz	r0, baea8 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   baea0:	6823      	ldr	r3, [r4, #0]
   baea2:	4620      	mov	r0, r4
   baea4:	699b      	ldr	r3, [r3, #24]
   baea6:	4798      	blx	r3
      { _M_device.unlock(); }
   baea8:	6860      	ldr	r0, [r4, #4]
   baeaa:	f7ff ffec 	bl	bae86 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   baeae:	2001      	movs	r0, #1
   baeb0:	bd10      	pop	{r4, pc}

000baeb2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   baeb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baeb4:	4605      	mov	r5, r0
      { _M_device.lock(); }
   baeb6:	3004      	adds	r0, #4
   baeb8:	4614      	mov	r4, r2
   baeba:	460e      	mov	r6, r1
   baebc:	461f      	mov	r7, r3
   baebe:	f7fa fd8d 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   baec2:	68ea      	ldr	r2, [r5, #12]
   baec4:	f1c4 0401 	rsb	r4, r4, #1
   baec8:	4414      	add	r4, r2
   baeca:	42b4      	cmp	r4, r6
   baecc:	d30a      	bcc.n	baee4 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   baece:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   baed0:	4638      	mov	r0, r7
   baed2:	4431      	add	r1, r6
   baed4:	f003 f935 	bl	be142 <_ZN6StringaSEPKc>
            result = true;
   baed8:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   baeda:	6868      	ldr	r0, [r5, #4]
   baedc:	f7ff ffd3 	bl	bae86 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   baee0:	4620      	mov	r0, r4
   baee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   baee4:	2400      	movs	r4, #0
   baee6:	e7f8      	b.n	baeda <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>

000baee8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   baee8:	b5f0      	push	{r4, r5, r6, r7, lr}
   baeea:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   baeee:	4f18      	ldr	r7, [pc, #96]	; (baf50 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   baef0:	4e18      	ldr	r6, [pc, #96]	; (baf54 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   baef2:	4d19      	ldr	r5, [pc, #100]	; (baf58 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   baef4:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   baef6:	42a0      	cmp	r0, r4
   baef8:	d00c      	beq.n	baf14 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   baefa:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   baefe:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   baf00:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   baf04:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   baf06:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   baf08:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   baf0c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   baf10:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   baf12:	e7f0      	b.n	baef6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   baf14:	f001 0403 	and.w	r4, r1, #3
   baf18:	4404      	add	r4, r0
    k = 0;
   baf1a:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   baf1c:	42a0      	cmp	r0, r4
   baf1e:	d004      	beq.n	baf2a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   baf20:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   baf24:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   baf28:	e7f8      	b.n	baf1c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   baf2a:	4809      	ldr	r0, [pc, #36]	; (baf50 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   baf2c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   baf2e:	4809      	ldr	r0, [pc, #36]	; (baf54 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   baf30:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   baf34:	404a      	eors	r2, r1
        k *= 0x1b873593;
   baf36:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   baf38:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   baf3a:	4b08      	ldr	r3, [pc, #32]	; (baf5c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   baf3c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   baf40:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   baf42:	4b07      	ldr	r3, [pc, #28]	; (baf60 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   baf44:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   baf48:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   baf4a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   baf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   baf50:	cc9e2d51 	.word	0xcc9e2d51
   baf54:	1b873593 	.word	0x1b873593
   baf58:	e6546b64 	.word	0xe6546b64
   baf5c:	85ebca6b 	.word	0x85ebca6b
   baf60:	c2b2ae35 	.word	0xc2b2ae35

000baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   baf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baf66:	4604      	mov	r4, r0
      { _M_device.lock(); }
   baf68:	3004      	adds	r0, #4
   baf6a:	f7fa fd37 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   baf6e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   baf70:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   baf72:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   baf74:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   baf76:	68a6      	ldr	r6, [r4, #8]
   baf78:	4a05      	ldr	r2, [pc, #20]	; (baf90 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   baf7a:	88f1      	ldrh	r1, [r6, #6]
   baf7c:	4630      	mov	r0, r6
   baf7e:	f7ff ffb3 	bl	baee8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   baf82:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   baf84:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   baf86:	6860      	ldr	r0, [r4, #4]
   baf88:	f7ff ff7d 	bl	bae86 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   baf8c:	4628      	mov	r0, r5
   baf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   baf90:	851c2a3f 	.word	0x851c2a3f

000baf94 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   baf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baf98:	4604      	mov	r4, r0
      { _M_device.lock(); }
   baf9a:	3004      	adds	r0, #4
   baf9c:	4690      	mov	r8, r2
   baf9e:	460d      	mov	r5, r1
   bafa0:	461f      	mov	r7, r3
   bafa2:	f7fa fd1b 	bl	b59dc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bafa6:	68e2      	ldr	r2, [r4, #12]
   bafa8:	f1c8 0301 	rsb	r3, r8, #1
   bafac:	4413      	add	r3, r2
   bafae:	42ab      	cmp	r3, r5
   bafb0:	d31f      	bcc.n	baff2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   bafb2:	4638      	mov	r0, r7
   bafb4:	f004 fcc3 	bl	bf93e <strlen>
   bafb8:	4540      	cmp	r0, r8
   bafba:	d21a      	bcs.n	baff2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   bafbc:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bafbe:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bafc0:	4629      	mov	r1, r5
   bafc2:	4638      	mov	r0, r7
   bafc4:	f004 fc8b 	bl	bf8de <strcmp>
   bafc8:	b188      	cbz	r0, bafee <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   bafca:	4642      	mov	r2, r8
   bafcc:	2100      	movs	r1, #0
   bafce:	4628      	mov	r0, r5
   bafd0:	f004 fbfa 	bl	bf7c8 <memset>
                strcpy(p, value);
   bafd4:	4639      	mov	r1, r7
   bafd6:	4628      	mov	r0, r5
   bafd8:	f004 fc8b 	bl	bf8f2 <strcpy>
                savedDataHeader->hash = getHash();
   bafdc:	4620      	mov	r0, r4
   bafde:	68a5      	ldr	r5, [r4, #8]
   bafe0:	f7ff ffc0 	bl	baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bafe4:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   bafe6:	6823      	ldr	r3, [r4, #0]
   bafe8:	4620      	mov	r0, r4
   bafea:	691b      	ldr	r3, [r3, #16]
   bafec:	4798      	blx	r3
            result = true;
   bafee:	2501      	movs	r5, #1
   baff0:	e000      	b.n	baff4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   baff2:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   baff4:	6860      	ldr	r0, [r4, #4]
   baff6:	f7ff ff46 	bl	bae86 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   baffa:	4628      	mov	r0, r5
   baffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb000 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bb000:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb002:	460d      	mov	r5, r1
   bb004:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   bb006:	f7ff ffad 	bl	baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   bb00a:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   bb00c:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   bb00e:	d923      	bls.n	bb058 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   bb010:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bb012:	6922      	ldr	r2, [r4, #16]
   bb014:	6819      	ldr	r1, [r3, #0]
   bb016:	4291      	cmp	r1, r2
   bb018:	d11f      	bne.n	bb05a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   bb01a:	8899      	ldrh	r1, [r3, #4]
   bb01c:	8aa2      	ldrh	r2, [r4, #20]
   bb01e:	4291      	cmp	r1, r2
   bb020:	d11b      	bne.n	bb05a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   bb022:	88d9      	ldrh	r1, [r3, #6]
   bb024:	b2aa      	uxth	r2, r5
   bb026:	4291      	cmp	r1, r2
   bb028:	d817      	bhi.n	bb05a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bb02a:	689a      	ldr	r2, [r3, #8]
   bb02c:	4282      	cmp	r2, r0
   bb02e:	d114      	bne.n	bb05a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   bb030:	68e2      	ldr	r2, [r4, #12]
   bb032:	42aa      	cmp	r2, r5
   bb034:	d905      	bls.n	bb042 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   bb036:	2100      	movs	r1, #0
   bb038:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bb03a:	68e2      	ldr	r2, [r4, #12]
   bb03c:	3501      	adds	r5, #1
   bb03e:	42aa      	cmp	r2, r5
   bb040:	d8fa      	bhi.n	bb038 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bb042:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bb046:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bb048:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bb04a:	68a5      	ldr	r5, [r4, #8]
   bb04c:	f7ff ff8a 	bl	baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bb050:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bb052:	2001      	movs	r0, #1
}
   bb054:	b002      	add	sp, #8
   bb056:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bb058:	b19d      	cbz	r5, bb082 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   bb05a:	68a1      	ldr	r1, [r4, #8]
   bb05c:	680a      	ldr	r2, [r1, #0]
   bb05e:	b192      	cbz	r2, bb086 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bb060:	6888      	ldr	r0, [r1, #8]
   bb062:	888b      	ldrh	r3, [r1, #4]
   bb064:	9001      	str	r0, [sp, #4]
   bb066:	88c9      	ldrh	r1, [r1, #6]
   bb068:	4808      	ldr	r0, [pc, #32]	; (bb08c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bb06a:	9100      	str	r1, [sp, #0]
   bb06c:	4908      	ldr	r1, [pc, #32]	; (bb090 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   bb06e:	f7fb fe6f 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bb072:	e9cd 5600 	strd	r5, r6, [sp]
   bb076:	8aa3      	ldrh	r3, [r4, #20]
   bb078:	6922      	ldr	r2, [r4, #16]
   bb07a:	4906      	ldr	r1, [pc, #24]	; (bb094 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   bb07c:	4803      	ldr	r0, [pc, #12]	; (bb08c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bb07e:	f7fb fe67 	bl	b6d50 <_ZNK5spark6Logger5traceEPKcz>
   bb082:	2000      	movs	r0, #0
   bb084:	e7e6      	b.n	bb054 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bb086:	4610      	mov	r0, r2
   bb088:	e7e4      	b.n	bb054 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bb08a:	bf00      	nop
   bb08c:	2003e658 	.word	0x2003e658
   bb090:	000c1388 	.word	0x000c1388
   bb094:	000c13b9 	.word	0x000c13b9

000bb098 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bb098:	b538      	push	{r3, r4, r5, lr}
   bb09a:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bb09c:	68c2      	ldr	r2, [r0, #12]
   bb09e:	6880      	ldr	r0, [r0, #8]
   bb0a0:	2100      	movs	r1, #0
   bb0a2:	f004 fb91 	bl	bf7c8 <memset>
    savedDataHeader->magic = savedDataMagic;
   bb0a6:	68a3      	ldr	r3, [r4, #8]
   bb0a8:	6922      	ldr	r2, [r4, #16]
   bb0aa:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bb0ac:	68a3      	ldr	r3, [r4, #8]
   bb0ae:	8aa2      	ldrh	r2, [r4, #20]
   bb0b0:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bb0b2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bb0b6:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bb0b8:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bb0ba:	68a5      	ldr	r5, [r4, #8]
   bb0bc:	f7ff ff52 	bl	baf64 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bb0c0:	60a8      	str	r0, [r5, #8]
}
   bb0c2:	bd38      	pop	{r3, r4, r5, pc}

000bb0c4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bb0c4:	b508      	push	{r3, lr}
   bb0c6:	4b02      	ldr	r3, [pc, #8]	; (bb0d0 <cellular_signal+0xc>)
   bb0c8:	681b      	ldr	r3, [r3, #0]
   bb0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb0cc:	9301      	str	r3, [sp, #4]
   bb0ce:	bd08      	pop	{r3, pc}
   bb0d0:	00030274 	.word	0x00030274

000bb0d4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bb0d4:	b508      	push	{r3, lr}
   bb0d6:	4b02      	ldr	r3, [pc, #8]	; (bb0e0 <os_thread_create+0xc>)
   bb0d8:	681b      	ldr	r3, [r3, #0]
   bb0da:	685b      	ldr	r3, [r3, #4]
   bb0dc:	9301      	str	r3, [sp, #4]
   bb0de:	bd08      	pop	{r3, pc}
   bb0e0:	00030248 	.word	0x00030248

000bb0e4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bb0e4:	b508      	push	{r3, lr}
   bb0e6:	4b02      	ldr	r3, [pc, #8]	; (bb0f0 <os_thread_is_current+0xc>)
   bb0e8:	681b      	ldr	r3, [r3, #0]
   bb0ea:	689b      	ldr	r3, [r3, #8]
   bb0ec:	9301      	str	r3, [sp, #4]
   bb0ee:	bd08      	pop	{r3, pc}
   bb0f0:	00030248 	.word	0x00030248

000bb0f4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bb0f4:	b508      	push	{r3, lr}
   bb0f6:	4b02      	ldr	r3, [pc, #8]	; (bb100 <os_thread_join+0xc>)
   bb0f8:	681b      	ldr	r3, [r3, #0]
   bb0fa:	691b      	ldr	r3, [r3, #16]
   bb0fc:	9301      	str	r3, [sp, #4]
   bb0fe:	bd08      	pop	{r3, pc}
   bb100:	00030248 	.word	0x00030248

000bb104 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bb104:	b508      	push	{r3, lr}
   bb106:	4b02      	ldr	r3, [pc, #8]	; (bb110 <os_thread_cleanup+0xc>)
   bb108:	681b      	ldr	r3, [r3, #0]
   bb10a:	695b      	ldr	r3, [r3, #20]
   bb10c:	9301      	str	r3, [sp, #4]
   bb10e:	bd08      	pop	{r3, pc}
   bb110:	00030248 	.word	0x00030248

000bb114 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bb114:	b508      	push	{r3, lr}
   bb116:	4b02      	ldr	r3, [pc, #8]	; (bb120 <os_mutex_create+0xc>)
   bb118:	681b      	ldr	r3, [r3, #0]
   bb11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb11c:	9301      	str	r3, [sp, #4]
   bb11e:	bd08      	pop	{r3, pc}
   bb120:	00030248 	.word	0x00030248

000bb124 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bb124:	b508      	push	{r3, lr}
   bb126:	4b02      	ldr	r3, [pc, #8]	; (bb130 <os_mutex_lock+0xc>)
   bb128:	681b      	ldr	r3, [r3, #0]
   bb12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bb12c:	9301      	str	r3, [sp, #4]
   bb12e:	bd08      	pop	{r3, pc}
   bb130:	00030248 	.word	0x00030248

000bb134 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bb134:	b508      	push	{r3, lr}
   bb136:	4b02      	ldr	r3, [pc, #8]	; (bb140 <os_mutex_unlock+0xc>)
   bb138:	681b      	ldr	r3, [r3, #0]
   bb13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb13c:	9301      	str	r3, [sp, #4]
   bb13e:	bd08      	pop	{r3, pc}
   bb140:	00030248 	.word	0x00030248

000bb144 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bb144:	b508      	push	{r3, lr}
   bb146:	4b02      	ldr	r3, [pc, #8]	; (bb150 <os_mutex_recursive_create+0xc>)
   bb148:	681b      	ldr	r3, [r3, #0]
   bb14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb14c:	9301      	str	r3, [sp, #4]
   bb14e:	bd08      	pop	{r3, pc}
   bb150:	00030248 	.word	0x00030248

000bb154 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bb154:	b508      	push	{r3, lr}
   bb156:	4b02      	ldr	r3, [pc, #8]	; (bb160 <os_mutex_recursive_destroy+0xc>)
   bb158:	681b      	ldr	r3, [r3, #0]
   bb15a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bb15c:	9301      	str	r3, [sp, #4]
   bb15e:	bd08      	pop	{r3, pc}
   bb160:	00030248 	.word	0x00030248

000bb164 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bb164:	b508      	push	{r3, lr}
   bb166:	4b02      	ldr	r3, [pc, #8]	; (bb170 <os_mutex_recursive_lock+0xc>)
   bb168:	681b      	ldr	r3, [r3, #0]
   bb16a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb16c:	9301      	str	r3, [sp, #4]
   bb16e:	bd08      	pop	{r3, pc}
   bb170:	00030248 	.word	0x00030248

000bb174 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bb174:	b508      	push	{r3, lr}
   bb176:	4b02      	ldr	r3, [pc, #8]	; (bb180 <os_mutex_recursive_unlock+0xc>)
   bb178:	681b      	ldr	r3, [r3, #0]
   bb17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb17c:	9301      	str	r3, [sp, #4]
   bb17e:	bd08      	pop	{r3, pc}
   bb180:	00030248 	.word	0x00030248

000bb184 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bb184:	b508      	push	{r3, lr}
   bb186:	4b02      	ldr	r3, [pc, #8]	; (bb190 <os_thread_exit+0xc>)
   bb188:	681b      	ldr	r3, [r3, #0]
   bb18a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bb18c:	9301      	str	r3, [sp, #4]
   bb18e:	bd08      	pop	{r3, pc}
   bb190:	00030248 	.word	0x00030248

000bb194 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bb194:	b508      	push	{r3, lr}
   bb196:	4b02      	ldr	r3, [pc, #8]	; (bb1a0 <HAL_Core_Runtime_Info+0xc>)
   bb198:	681b      	ldr	r3, [r3, #0]
   bb19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb19c:	9301      	str	r3, [sp, #4]
   bb19e:	bd08      	pop	{r3, pc}
   bb1a0:	00030234 	.word	0x00030234

000bb1a4 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bb1a4:	b508      	push	{r3, lr}
   bb1a6:	4b02      	ldr	r3, [pc, #8]	; (bb1b0 <HAL_Feature_Set+0xc>)
   bb1a8:	681b      	ldr	r3, [r3, #0]
   bb1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bb1ac:	9301      	str	r3, [sp, #4]
   bb1ae:	bd08      	pop	{r3, pc}
   bb1b0:	00030234 	.word	0x00030234

000bb1b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bb1b4:	b508      	push	{r3, lr}
   bb1b6:	4b02      	ldr	r3, [pc, #8]	; (bb1c0 <HAL_RNG_GetRandomNumber+0xc>)
   bb1b8:	681b      	ldr	r3, [r3, #0]
   bb1ba:	685b      	ldr	r3, [r3, #4]
   bb1bc:	9301      	str	r3, [sp, #4]
   bb1be:	bd08      	pop	{r3, pc}
   bb1c0:	00030218 	.word	0x00030218

000bb1c4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bb1c4:	b508      	push	{r3, lr}
   bb1c6:	4b02      	ldr	r3, [pc, #8]	; (bb1d0 <HAL_Delay_Milliseconds+0xc>)
   bb1c8:	681b      	ldr	r3, [r3, #0]
   bb1ca:	689b      	ldr	r3, [r3, #8]
   bb1cc:	9301      	str	r3, [sp, #4]
   bb1ce:	bd08      	pop	{r3, pc}
   bb1d0:	00030218 	.word	0x00030218

000bb1d4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bb1d4:	b508      	push	{r3, lr}
   bb1d6:	4b02      	ldr	r3, [pc, #8]	; (bb1e0 <HAL_Delay_Microseconds+0xc>)
   bb1d8:	681b      	ldr	r3, [r3, #0]
   bb1da:	68db      	ldr	r3, [r3, #12]
   bb1dc:	9301      	str	r3, [sp, #4]
   bb1de:	bd08      	pop	{r3, pc}
   bb1e0:	00030218 	.word	0x00030218

000bb1e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bb1e4:	b508      	push	{r3, lr}
   bb1e6:	4b02      	ldr	r3, [pc, #8]	; (bb1f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bb1e8:	681b      	ldr	r3, [r3, #0]
   bb1ea:	695b      	ldr	r3, [r3, #20]
   bb1ec:	9301      	str	r3, [sp, #4]
   bb1ee:	bd08      	pop	{r3, pc}
   bb1f0:	00030218 	.word	0x00030218

000bb1f4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bb1f4:	b508      	push	{r3, lr}
   bb1f6:	4b02      	ldr	r3, [pc, #8]	; (bb200 <hal_rtc_time_is_valid+0xc>)
   bb1f8:	681b      	ldr	r3, [r3, #0]
   bb1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bb1fc:	9301      	str	r3, [sp, #4]
   bb1fe:	bd08      	pop	{r3, pc}
   bb200:	00030218 	.word	0x00030218

000bb204 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bb204:	b508      	push	{r3, lr}
   bb206:	4b02      	ldr	r3, [pc, #8]	; (bb210 <hal_timer_millis+0xc>)
   bb208:	681b      	ldr	r3, [r3, #0]
   bb20a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bb20c:	9301      	str	r3, [sp, #4]
   bb20e:	bd08      	pop	{r3, pc}
   bb210:	00030218 	.word	0x00030218

000bb214 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bb214:	b508      	push	{r3, lr}
   bb216:	4b02      	ldr	r3, [pc, #8]	; (bb220 <hal_rtc_get_time+0xc>)
   bb218:	681b      	ldr	r3, [r3, #0]
   bb21a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bb21c:	9301      	str	r3, [sp, #4]
   bb21e:	bd08      	pop	{r3, pc}
   bb220:	00030218 	.word	0x00030218

000bb224 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bb224:	b508      	push	{r3, lr}
   bb226:	4b02      	ldr	r3, [pc, #8]	; (bb230 <hal_rtc_set_time+0xc>)
   bb228:	681b      	ldr	r3, [r3, #0]
   bb22a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bb22c:	9301      	str	r3, [sp, #4]
   bb22e:	bd08      	pop	{r3, pc}
   bb230:	00030218 	.word	0x00030218

000bb234 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bb234:	b508      	push	{r3, lr}
   bb236:	4b02      	ldr	r3, [pc, #8]	; (bb240 <HAL_Validate_Pin_Function+0xc>)
   bb238:	681b      	ldr	r3, [r3, #0]
   bb23a:	685b      	ldr	r3, [r3, #4]
   bb23c:	9301      	str	r3, [sp, #4]
   bb23e:	bd08      	pop	{r3, pc}
   bb240:	0003022c 	.word	0x0003022c

000bb244 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bb244:	b508      	push	{r3, lr}
   bb246:	4b02      	ldr	r3, [pc, #8]	; (bb250 <HAL_Pin_Mode+0xc>)
   bb248:	681b      	ldr	r3, [r3, #0]
   bb24a:	689b      	ldr	r3, [r3, #8]
   bb24c:	9301      	str	r3, [sp, #4]
   bb24e:	bd08      	pop	{r3, pc}
   bb250:	0003022c 	.word	0x0003022c

000bb254 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bb254:	b508      	push	{r3, lr}
   bb256:	4b02      	ldr	r3, [pc, #8]	; (bb260 <HAL_Get_Pin_Mode+0xc>)
   bb258:	681b      	ldr	r3, [r3, #0]
   bb25a:	68db      	ldr	r3, [r3, #12]
   bb25c:	9301      	str	r3, [sp, #4]
   bb25e:	bd08      	pop	{r3, pc}
   bb260:	0003022c 	.word	0x0003022c

000bb264 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bb264:	b508      	push	{r3, lr}
   bb266:	4b02      	ldr	r3, [pc, #8]	; (bb270 <HAL_GPIO_Write+0xc>)
   bb268:	681b      	ldr	r3, [r3, #0]
   bb26a:	691b      	ldr	r3, [r3, #16]
   bb26c:	9301      	str	r3, [sp, #4]
   bb26e:	bd08      	pop	{r3, pc}
   bb270:	0003022c 	.word	0x0003022c

000bb274 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bb274:	b508      	push	{r3, lr}
   bb276:	4b02      	ldr	r3, [pc, #8]	; (bb280 <HAL_GPIO_Read+0xc>)
   bb278:	681b      	ldr	r3, [r3, #0]
   bb27a:	695b      	ldr	r3, [r3, #20]
   bb27c:	9301      	str	r3, [sp, #4]
   bb27e:	bd08      	pop	{r3, pc}
   bb280:	0003022c 	.word	0x0003022c

000bb284 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bb284:	b508      	push	{r3, lr}
   bb286:	4b02      	ldr	r3, [pc, #8]	; (bb290 <HAL_Interrupts_Attach+0xc>)
   bb288:	681b      	ldr	r3, [r3, #0]
   bb28a:	699b      	ldr	r3, [r3, #24]
   bb28c:	9301      	str	r3, [sp, #4]
   bb28e:	bd08      	pop	{r3, pc}
   bb290:	0003022c 	.word	0x0003022c

000bb294 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bb294:	b508      	push	{r3, lr}
   bb296:	4b02      	ldr	r3, [pc, #8]	; (bb2a0 <HAL_Interrupts_Detach+0xc>)
   bb298:	681b      	ldr	r3, [r3, #0]
   bb29a:	69db      	ldr	r3, [r3, #28]
   bb29c:	9301      	str	r3, [sp, #4]
   bb29e:	bd08      	pop	{r3, pc}
   bb2a0:	0003022c 	.word	0x0003022c

000bb2a4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bb2a4:	b508      	push	{r3, lr}
   bb2a6:	4b02      	ldr	r3, [pc, #8]	; (bb2b0 <hal_adc_read+0xc>)
   bb2a8:	681b      	ldr	r3, [r3, #0]
   bb2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb2ac:	9301      	str	r3, [sp, #4]
   bb2ae:	bd08      	pop	{r3, pc}
   bb2b0:	0003022c 	.word	0x0003022c

000bb2b4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bb2b4:	b508      	push	{r3, lr}
   bb2b6:	4b02      	ldr	r3, [pc, #8]	; (bb2c0 <hal_i2c_begin+0xc>)
   bb2b8:	681b      	ldr	r3, [r3, #0]
   bb2ba:	68db      	ldr	r3, [r3, #12]
   bb2bc:	9301      	str	r3, [sp, #4]
   bb2be:	bd08      	pop	{r3, pc}
   bb2c0:	00030228 	.word	0x00030228

000bb2c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bb2c4:	b508      	push	{r3, lr}
   bb2c6:	4b02      	ldr	r3, [pc, #8]	; (bb2d0 <hal_i2c_begin_transmission+0xc>)
   bb2c8:	681b      	ldr	r3, [r3, #0]
   bb2ca:	699b      	ldr	r3, [r3, #24]
   bb2cc:	9301      	str	r3, [sp, #4]
   bb2ce:	bd08      	pop	{r3, pc}
   bb2d0:	00030228 	.word	0x00030228

000bb2d4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bb2d4:	b508      	push	{r3, lr}
   bb2d6:	4b02      	ldr	r3, [pc, #8]	; (bb2e0 <hal_i2c_end_transmission+0xc>)
   bb2d8:	681b      	ldr	r3, [r3, #0]
   bb2da:	69db      	ldr	r3, [r3, #28]
   bb2dc:	9301      	str	r3, [sp, #4]
   bb2de:	bd08      	pop	{r3, pc}
   bb2e0:	00030228 	.word	0x00030228

000bb2e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bb2e4:	b508      	push	{r3, lr}
   bb2e6:	4b02      	ldr	r3, [pc, #8]	; (bb2f0 <hal_i2c_write+0xc>)
   bb2e8:	681b      	ldr	r3, [r3, #0]
   bb2ea:	6a1b      	ldr	r3, [r3, #32]
   bb2ec:	9301      	str	r3, [sp, #4]
   bb2ee:	bd08      	pop	{r3, pc}
   bb2f0:	00030228 	.word	0x00030228

000bb2f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bb2f4:	b508      	push	{r3, lr}
   bb2f6:	4b02      	ldr	r3, [pc, #8]	; (bb300 <hal_i2c_available+0xc>)
   bb2f8:	681b      	ldr	r3, [r3, #0]
   bb2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb2fc:	9301      	str	r3, [sp, #4]
   bb2fe:	bd08      	pop	{r3, pc}
   bb300:	00030228 	.word	0x00030228

000bb304 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bb304:	b508      	push	{r3, lr}
   bb306:	4b02      	ldr	r3, [pc, #8]	; (bb310 <hal_i2c_read+0xc>)
   bb308:	681b      	ldr	r3, [r3, #0]
   bb30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb30c:	9301      	str	r3, [sp, #4]
   bb30e:	bd08      	pop	{r3, pc}
   bb310:	00030228 	.word	0x00030228

000bb314 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bb314:	b508      	push	{r3, lr}
   bb316:	4b02      	ldr	r3, [pc, #8]	; (bb320 <hal_i2c_peek+0xc>)
   bb318:	681b      	ldr	r3, [r3, #0]
   bb31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb31c:	9301      	str	r3, [sp, #4]
   bb31e:	bd08      	pop	{r3, pc}
   bb320:	00030228 	.word	0x00030228

000bb324 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bb324:	b508      	push	{r3, lr}
   bb326:	4b02      	ldr	r3, [pc, #8]	; (bb330 <hal_i2c_flush+0xc>)
   bb328:	681b      	ldr	r3, [r3, #0]
   bb32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb32c:	9301      	str	r3, [sp, #4]
   bb32e:	bd08      	pop	{r3, pc}
   bb330:	00030228 	.word	0x00030228

000bb334 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bb334:	b508      	push	{r3, lr}
   bb336:	4b02      	ldr	r3, [pc, #8]	; (bb340 <hal_i2c_is_enabled+0xc>)
   bb338:	681b      	ldr	r3, [r3, #0]
   bb33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb33c:	9301      	str	r3, [sp, #4]
   bb33e:	bd08      	pop	{r3, pc}
   bb340:	00030228 	.word	0x00030228

000bb344 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bb344:	b508      	push	{r3, lr}
   bb346:	4b02      	ldr	r3, [pc, #8]	; (bb350 <hal_i2c_init+0xc>)
   bb348:	681b      	ldr	r3, [r3, #0]
   bb34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb34c:	9301      	str	r3, [sp, #4]
   bb34e:	bd08      	pop	{r3, pc}
   bb350:	00030228 	.word	0x00030228

000bb354 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bb354:	b508      	push	{r3, lr}
   bb356:	4b02      	ldr	r3, [pc, #8]	; (bb360 <hal_i2c_lock+0xc>)
   bb358:	681b      	ldr	r3, [r3, #0]
   bb35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bb35c:	9301      	str	r3, [sp, #4]
   bb35e:	bd08      	pop	{r3, pc}
   bb360:	00030228 	.word	0x00030228

000bb364 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bb364:	b508      	push	{r3, lr}
   bb366:	4b02      	ldr	r3, [pc, #8]	; (bb370 <hal_i2c_unlock+0xc>)
   bb368:	681b      	ldr	r3, [r3, #0]
   bb36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb36c:	9301      	str	r3, [sp, #4]
   bb36e:	bd08      	pop	{r3, pc}
   bb370:	00030228 	.word	0x00030228

000bb374 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bb374:	b508      	push	{r3, lr}
   bb376:	4b02      	ldr	r3, [pc, #8]	; (bb380 <hal_i2c_request_ex+0xc>)
   bb378:	681b      	ldr	r3, [r3, #0]
   bb37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bb37c:	9301      	str	r3, [sp, #4]
   bb37e:	bd08      	pop	{r3, pc}
   bb380:	00030228 	.word	0x00030228

000bb384 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bb384:	b508      	push	{r3, lr}
   bb386:	4b02      	ldr	r3, [pc, #8]	; (bb390 <inet_inet_ntop+0xc>)
   bb388:	681b      	ldr	r3, [r3, #0]
   bb38a:	695b      	ldr	r3, [r3, #20]
   bb38c:	9301      	str	r3, [sp, #4]
   bb38e:	bd08      	pop	{r3, pc}
   bb390:	00030264 	.word	0x00030264

000bb394 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bb394:	b508      	push	{r3, lr}
   bb396:	4b02      	ldr	r3, [pc, #8]	; (bb3a0 <netdb_freeaddrinfo+0xc>)
   bb398:	681b      	ldr	r3, [r3, #0]
   bb39a:	689b      	ldr	r3, [r3, #8]
   bb39c:	9301      	str	r3, [sp, #4]
   bb39e:	bd08      	pop	{r3, pc}
   bb3a0:	00030268 	.word	0x00030268

000bb3a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bb3a4:	b508      	push	{r3, lr}
   bb3a6:	4b02      	ldr	r3, [pc, #8]	; (bb3b0 <netdb_getaddrinfo+0xc>)
   bb3a8:	681b      	ldr	r3, [r3, #0]
   bb3aa:	68db      	ldr	r3, [r3, #12]
   bb3ac:	9301      	str	r3, [sp, #4]
   bb3ae:	bd08      	pop	{r3, pc}
   bb3b0:	00030268 	.word	0x00030268

000bb3b4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bb3b4:	b508      	push	{r3, lr}
   bb3b6:	4b02      	ldr	r3, [pc, #8]	; (bb3c0 <hal_spi_begin+0xc>)
   bb3b8:	681b      	ldr	r3, [r3, #0]
   bb3ba:	681b      	ldr	r3, [r3, #0]
   bb3bc:	9301      	str	r3, [sp, #4]
   bb3be:	bd08      	pop	{r3, pc}
   bb3c0:	00030230 	.word	0x00030230

000bb3c4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bb3c4:	b508      	push	{r3, lr}
   bb3c6:	4b02      	ldr	r3, [pc, #8]	; (bb3d0 <hal_spi_end+0xc>)
   bb3c8:	681b      	ldr	r3, [r3, #0]
   bb3ca:	685b      	ldr	r3, [r3, #4]
   bb3cc:	9301      	str	r3, [sp, #4]
   bb3ce:	bd08      	pop	{r3, pc}
   bb3d0:	00030230 	.word	0x00030230

000bb3d4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bb3d4:	b508      	push	{r3, lr}
   bb3d6:	4b02      	ldr	r3, [pc, #8]	; (bb3e0 <hal_spi_transfer+0xc>)
   bb3d8:	681b      	ldr	r3, [r3, #0]
   bb3da:	695b      	ldr	r3, [r3, #20]
   bb3dc:	9301      	str	r3, [sp, #4]
   bb3de:	bd08      	pop	{r3, pc}
   bb3e0:	00030230 	.word	0x00030230

000bb3e4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bb3e4:	b508      	push	{r3, lr}
   bb3e6:	4b02      	ldr	r3, [pc, #8]	; (bb3f0 <hal_spi_init+0xc>)
   bb3e8:	681b      	ldr	r3, [r3, #0]
   bb3ea:	69db      	ldr	r3, [r3, #28]
   bb3ec:	9301      	str	r3, [sp, #4]
   bb3ee:	bd08      	pop	{r3, pc}
   bb3f0:	00030230 	.word	0x00030230

000bb3f4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bb3f4:	b508      	push	{r3, lr}
   bb3f6:	4b02      	ldr	r3, [pc, #8]	; (bb400 <hal_spi_is_enabled+0xc>)
   bb3f8:	681b      	ldr	r3, [r3, #0]
   bb3fa:	6a1b      	ldr	r3, [r3, #32]
   bb3fc:	9301      	str	r3, [sp, #4]
   bb3fe:	bd08      	pop	{r3, pc}
   bb400:	00030230 	.word	0x00030230

000bb404 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bb404:	b508      	push	{r3, lr}
   bb406:	4b02      	ldr	r3, [pc, #8]	; (bb410 <hal_spi_info+0xc>)
   bb408:	681b      	ldr	r3, [r3, #0]
   bb40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb40c:	9301      	str	r3, [sp, #4]
   bb40e:	bd08      	pop	{r3, pc}
   bb410:	00030230 	.word	0x00030230

000bb414 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bb414:	b508      	push	{r3, lr}
   bb416:	4b02      	ldr	r3, [pc, #8]	; (bb420 <hal_spi_set_settings+0xc>)
   bb418:	681b      	ldr	r3, [r3, #0]
   bb41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb41c:	9301      	str	r3, [sp, #4]
   bb41e:	bd08      	pop	{r3, pc}
   bb420:	00030230 	.word	0x00030230

000bb424 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bb424:	b508      	push	{r3, lr}
   bb426:	4b02      	ldr	r3, [pc, #8]	; (bb430 <hal_spi_acquire+0xc>)
   bb428:	681b      	ldr	r3, [r3, #0]
   bb42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb42c:	9301      	str	r3, [sp, #4]
   bb42e:	bd08      	pop	{r3, pc}
   bb430:	00030230 	.word	0x00030230

000bb434 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bb434:	b508      	push	{r3, lr}
   bb436:	4b02      	ldr	r3, [pc, #8]	; (bb440 <hal_spi_release+0xc>)
   bb438:	681b      	ldr	r3, [r3, #0]
   bb43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb43c:	9301      	str	r3, [sp, #4]
   bb43e:	bd08      	pop	{r3, pc}
   bb440:	00030230 	.word	0x00030230

000bb444 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bb444:	b508      	push	{r3, lr}
   bb446:	4b02      	ldr	r3, [pc, #8]	; (bb450 <_open+0xc>)
   bb448:	681b      	ldr	r3, [r3, #0]
   bb44a:	681b      	ldr	r3, [r3, #0]
   bb44c:	9301      	str	r3, [sp, #4]
   bb44e:	bd08      	pop	{r3, pc}
   bb450:	00030284 	.word	0x00030284

000bb454 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bb454:	b508      	push	{r3, lr}
   bb456:	4b02      	ldr	r3, [pc, #8]	; (bb460 <_write+0xc>)
   bb458:	681b      	ldr	r3, [r3, #0]
   bb45a:	685b      	ldr	r3, [r3, #4]
   bb45c:	9301      	str	r3, [sp, #4]
   bb45e:	bd08      	pop	{r3, pc}
   bb460:	00030284 	.word	0x00030284

000bb464 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bb464:	b508      	push	{r3, lr}
   bb466:	4b02      	ldr	r3, [pc, #8]	; (bb470 <_read+0xc>)
   bb468:	681b      	ldr	r3, [r3, #0]
   bb46a:	689b      	ldr	r3, [r3, #8]
   bb46c:	9301      	str	r3, [sp, #4]
   bb46e:	bd08      	pop	{r3, pc}
   bb470:	00030284 	.word	0x00030284

000bb474 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bb474:	b508      	push	{r3, lr}
   bb476:	4b02      	ldr	r3, [pc, #8]	; (bb480 <_close+0xc>)
   bb478:	681b      	ldr	r3, [r3, #0]
   bb47a:	68db      	ldr	r3, [r3, #12]
   bb47c:	9301      	str	r3, [sp, #4]
   bb47e:	bd08      	pop	{r3, pc}
   bb480:	00030284 	.word	0x00030284

000bb484 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bb484:	b508      	push	{r3, lr}
   bb486:	4b02      	ldr	r3, [pc, #8]	; (bb490 <_fstat+0xc>)
   bb488:	681b      	ldr	r3, [r3, #0]
   bb48a:	695b      	ldr	r3, [r3, #20]
   bb48c:	9301      	str	r3, [sp, #4]
   bb48e:	bd08      	pop	{r3, pc}
   bb490:	00030284 	.word	0x00030284

000bb494 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bb494:	b508      	push	{r3, lr}
   bb496:	4b02      	ldr	r3, [pc, #8]	; (bb4a0 <_lseek+0xc>)
   bb498:	681b      	ldr	r3, [r3, #0]
   bb49a:	6a1b      	ldr	r3, [r3, #32]
   bb49c:	9301      	str	r3, [sp, #4]
   bb49e:	bd08      	pop	{r3, pc}
   bb4a0:	00030284 	.word	0x00030284

000bb4a4 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bb4a4:	b508      	push	{r3, lr}
   bb4a6:	4b02      	ldr	r3, [pc, #8]	; (bb4b0 <stat+0xc>)
   bb4a8:	681b      	ldr	r3, [r3, #0]
   bb4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb4ac:	9301      	str	r3, [sp, #4]
   bb4ae:	bd08      	pop	{r3, pc}
   bb4b0:	00030284 	.word	0x00030284

000bb4b4 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bb4b4:	b508      	push	{r3, lr}
   bb4b6:	4b02      	ldr	r3, [pc, #8]	; (bb4c0 <mkdir+0xc>)
   bb4b8:	681b      	ldr	r3, [r3, #0]
   bb4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb4bc:	9301      	str	r3, [sp, #4]
   bb4be:	bd08      	pop	{r3, pc}
   bb4c0:	00030284 	.word	0x00030284

000bb4c4 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bb4c4:	b508      	push	{r3, lr}
   bb4c6:	4b02      	ldr	r3, [pc, #8]	; (bb4d0 <_unlink+0xc>)
   bb4c8:	681b      	ldr	r3, [r3, #0]
   bb4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb4cc:	9301      	str	r3, [sp, #4]
   bb4ce:	bd08      	pop	{r3, pc}
   bb4d0:	00030284 	.word	0x00030284

000bb4d4 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bb4d4:	b508      	push	{r3, lr}
   bb4d6:	4b02      	ldr	r3, [pc, #8]	; (bb4e0 <opendir+0xc>)
   bb4d8:	681b      	ldr	r3, [r3, #0]
   bb4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb4dc:	9301      	str	r3, [sp, #4]
   bb4de:	bd08      	pop	{r3, pc}
   bb4e0:	00030284 	.word	0x00030284

000bb4e4 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bb4e4:	b508      	push	{r3, lr}
   bb4e6:	4b02      	ldr	r3, [pc, #8]	; (bb4f0 <readdir+0xc>)
   bb4e8:	681b      	ldr	r3, [r3, #0]
   bb4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb4ec:	9301      	str	r3, [sp, #4]
   bb4ee:	bd08      	pop	{r3, pc}
   bb4f0:	00030284 	.word	0x00030284

000bb4f4 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bb4f4:	b508      	push	{r3, lr}
   bb4f6:	4b02      	ldr	r3, [pc, #8]	; (bb500 <closedir+0xc>)
   bb4f8:	681b      	ldr	r3, [r3, #0]
   bb4fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb4fc:	9301      	str	r3, [sp, #4]
   bb4fe:	bd08      	pop	{r3, pc}
   bb500:	00030284 	.word	0x00030284

000bb504 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bb504:	b508      	push	{r3, lr}
   bb506:	4b02      	ldr	r3, [pc, #8]	; (bb510 <hal_usart_end+0xc>)
   bb508:	681b      	ldr	r3, [r3, #0]
   bb50a:	689b      	ldr	r3, [r3, #8]
   bb50c:	9301      	str	r3, [sp, #4]
   bb50e:	bd08      	pop	{r3, pc}
   bb510:	0003023c 	.word	0x0003023c

000bb514 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bb514:	b508      	push	{r3, lr}
   bb516:	4b02      	ldr	r3, [pc, #8]	; (bb520 <hal_usart_write+0xc>)
   bb518:	681b      	ldr	r3, [r3, #0]
   bb51a:	68db      	ldr	r3, [r3, #12]
   bb51c:	9301      	str	r3, [sp, #4]
   bb51e:	bd08      	pop	{r3, pc}
   bb520:	0003023c 	.word	0x0003023c

000bb524 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bb524:	b508      	push	{r3, lr}
   bb526:	4b02      	ldr	r3, [pc, #8]	; (bb530 <hal_usart_available+0xc>)
   bb528:	681b      	ldr	r3, [r3, #0]
   bb52a:	691b      	ldr	r3, [r3, #16]
   bb52c:	9301      	str	r3, [sp, #4]
   bb52e:	bd08      	pop	{r3, pc}
   bb530:	0003023c 	.word	0x0003023c

000bb534 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bb534:	b508      	push	{r3, lr}
   bb536:	4b02      	ldr	r3, [pc, #8]	; (bb540 <hal_usart_read+0xc>)
   bb538:	681b      	ldr	r3, [r3, #0]
   bb53a:	695b      	ldr	r3, [r3, #20]
   bb53c:	9301      	str	r3, [sp, #4]
   bb53e:	bd08      	pop	{r3, pc}
   bb540:	0003023c 	.word	0x0003023c

000bb544 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bb544:	b508      	push	{r3, lr}
   bb546:	4b02      	ldr	r3, [pc, #8]	; (bb550 <hal_usart_peek+0xc>)
   bb548:	681b      	ldr	r3, [r3, #0]
   bb54a:	699b      	ldr	r3, [r3, #24]
   bb54c:	9301      	str	r3, [sp, #4]
   bb54e:	bd08      	pop	{r3, pc}
   bb550:	0003023c 	.word	0x0003023c

000bb554 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bb554:	b508      	push	{r3, lr}
   bb556:	4b02      	ldr	r3, [pc, #8]	; (bb560 <hal_usart_flush+0xc>)
   bb558:	681b      	ldr	r3, [r3, #0]
   bb55a:	69db      	ldr	r3, [r3, #28]
   bb55c:	9301      	str	r3, [sp, #4]
   bb55e:	bd08      	pop	{r3, pc}
   bb560:	0003023c 	.word	0x0003023c

000bb564 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bb564:	b508      	push	{r3, lr}
   bb566:	4b02      	ldr	r3, [pc, #8]	; (bb570 <hal_usart_is_enabled+0xc>)
   bb568:	681b      	ldr	r3, [r3, #0]
   bb56a:	6a1b      	ldr	r3, [r3, #32]
   bb56c:	9301      	str	r3, [sp, #4]
   bb56e:	bd08      	pop	{r3, pc}
   bb570:	0003023c 	.word	0x0003023c

000bb574 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bb574:	b508      	push	{r3, lr}
   bb576:	4b02      	ldr	r3, [pc, #8]	; (bb580 <hal_usart_available_data_for_write+0xc>)
   bb578:	681b      	ldr	r3, [r3, #0]
   bb57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb57c:	9301      	str	r3, [sp, #4]
   bb57e:	bd08      	pop	{r3, pc}
   bb580:	0003023c 	.word	0x0003023c

000bb584 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bb584:	b508      	push	{r3, lr}
   bb586:	4b02      	ldr	r3, [pc, #8]	; (bb590 <hal_usart_begin_config+0xc>)
   bb588:	681b      	ldr	r3, [r3, #0]
   bb58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb58c:	9301      	str	r3, [sp, #4]
   bb58e:	bd08      	pop	{r3, pc}
   bb590:	0003023c 	.word	0x0003023c

000bb594 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bb594:	b508      	push	{r3, lr}
   bb596:	4b02      	ldr	r3, [pc, #8]	; (bb5a0 <hal_usart_init_ex+0xc>)
   bb598:	681b      	ldr	r3, [r3, #0]
   bb59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb59c:	9301      	str	r3, [sp, #4]
   bb59e:	bd08      	pop	{r3, pc}
   bb5a0:	0003023c 	.word	0x0003023c

000bb5a4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bb5a4:	b508      	push	{r3, lr}
   bb5a6:	4b02      	ldr	r3, [pc, #8]	; (bb5b0 <HAL_USB_USART_Init+0xc>)
   bb5a8:	681b      	ldr	r3, [r3, #0]
   bb5aa:	681b      	ldr	r3, [r3, #0]
   bb5ac:	9301      	str	r3, [sp, #4]
   bb5ae:	bd08      	pop	{r3, pc}
   bb5b0:	0003024c 	.word	0x0003024c

000bb5b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bb5b4:	b508      	push	{r3, lr}
   bb5b6:	4b02      	ldr	r3, [pc, #8]	; (bb5c0 <HAL_USB_USART_Begin+0xc>)
   bb5b8:	681b      	ldr	r3, [r3, #0]
   bb5ba:	685b      	ldr	r3, [r3, #4]
   bb5bc:	9301      	str	r3, [sp, #4]
   bb5be:	bd08      	pop	{r3, pc}
   bb5c0:	0003024c 	.word	0x0003024c

000bb5c4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bb5c4:	b508      	push	{r3, lr}
   bb5c6:	4b02      	ldr	r3, [pc, #8]	; (bb5d0 <HAL_USB_USART_End+0xc>)
   bb5c8:	681b      	ldr	r3, [r3, #0]
   bb5ca:	689b      	ldr	r3, [r3, #8]
   bb5cc:	9301      	str	r3, [sp, #4]
   bb5ce:	bd08      	pop	{r3, pc}
   bb5d0:	0003024c 	.word	0x0003024c

000bb5d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bb5d4:	b508      	push	{r3, lr}
   bb5d6:	4b02      	ldr	r3, [pc, #8]	; (bb5e0 <HAL_USB_USART_Available_Data+0xc>)
   bb5d8:	681b      	ldr	r3, [r3, #0]
   bb5da:	691b      	ldr	r3, [r3, #16]
   bb5dc:	9301      	str	r3, [sp, #4]
   bb5de:	bd08      	pop	{r3, pc}
   bb5e0:	0003024c 	.word	0x0003024c

000bb5e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bb5e4:	b508      	push	{r3, lr}
   bb5e6:	4b02      	ldr	r3, [pc, #8]	; (bb5f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bb5e8:	681b      	ldr	r3, [r3, #0]
   bb5ea:	695b      	ldr	r3, [r3, #20]
   bb5ec:	9301      	str	r3, [sp, #4]
   bb5ee:	bd08      	pop	{r3, pc}
   bb5f0:	0003024c 	.word	0x0003024c

000bb5f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bb5f4:	b508      	push	{r3, lr}
   bb5f6:	4b02      	ldr	r3, [pc, #8]	; (bb600 <HAL_USB_USART_Receive_Data+0xc>)
   bb5f8:	681b      	ldr	r3, [r3, #0]
   bb5fa:	699b      	ldr	r3, [r3, #24]
   bb5fc:	9301      	str	r3, [sp, #4]
   bb5fe:	bd08      	pop	{r3, pc}
   bb600:	0003024c 	.word	0x0003024c

000bb604 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bb604:	b508      	push	{r3, lr}
   bb606:	4b02      	ldr	r3, [pc, #8]	; (bb610 <HAL_USB_USART_Send_Data+0xc>)
   bb608:	681b      	ldr	r3, [r3, #0]
   bb60a:	69db      	ldr	r3, [r3, #28]
   bb60c:	9301      	str	r3, [sp, #4]
   bb60e:	bd08      	pop	{r3, pc}
   bb610:	0003024c 	.word	0x0003024c

000bb614 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bb614:	b508      	push	{r3, lr}
   bb616:	4b02      	ldr	r3, [pc, #8]	; (bb620 <HAL_USB_USART_Flush_Data+0xc>)
   bb618:	681b      	ldr	r3, [r3, #0]
   bb61a:	6a1b      	ldr	r3, [r3, #32]
   bb61c:	9301      	str	r3, [sp, #4]
   bb61e:	bd08      	pop	{r3, pc}
   bb620:	0003024c 	.word	0x0003024c

000bb624 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bb624:	b508      	push	{r3, lr}
   bb626:	4b02      	ldr	r3, [pc, #8]	; (bb630 <HAL_USB_USART_Is_Connected+0xc>)
   bb628:	681b      	ldr	r3, [r3, #0]
   bb62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb62c:	9301      	str	r3, [sp, #4]
   bb62e:	bd08      	pop	{r3, pc}
   bb630:	0003024c 	.word	0x0003024c

000bb634 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bb634:	b508      	push	{r3, lr}
   bb636:	4b02      	ldr	r3, [pc, #8]	; (bb640 <panic_+0xc>)
   bb638:	681b      	ldr	r3, [r3, #0]
   bb63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb63c:	9301      	str	r3, [sp, #4]
   bb63e:	bd08      	pop	{r3, pc}
   bb640:	00030260 	.word	0x00030260

000bb644 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bb644:	b508      	push	{r3, lr}
   bb646:	4b02      	ldr	r3, [pc, #8]	; (bb650 <log_message+0xc>)
   bb648:	681b      	ldr	r3, [r3, #0]
   bb64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bb64c:	9301      	str	r3, [sp, #4]
   bb64e:	bd08      	pop	{r3, pc}
   bb650:	00030260 	.word	0x00030260

000bb654 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bb654:	b508      	push	{r3, lr}
   bb656:	4b02      	ldr	r3, [pc, #8]	; (bb660 <log_message_v+0xc>)
   bb658:	681b      	ldr	r3, [r3, #0]
   bb65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb65c:	9301      	str	r3, [sp, #4]
   bb65e:	bd08      	pop	{r3, pc}
   bb660:	00030260 	.word	0x00030260

000bb664 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bb664:	b508      	push	{r3, lr}
   bb666:	4b02      	ldr	r3, [pc, #8]	; (bb670 <log_level_name+0xc>)
   bb668:	681b      	ldr	r3, [r3, #0]
   bb66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bb66c:	9301      	str	r3, [sp, #4]
   bb66e:	bd08      	pop	{r3, pc}
   bb670:	00030260 	.word	0x00030260

000bb674 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bb674:	b508      	push	{r3, lr}
   bb676:	4b02      	ldr	r3, [pc, #8]	; (bb680 <log_set_callbacks+0xc>)
   bb678:	681b      	ldr	r3, [r3, #0]
   bb67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bb67c:	9301      	str	r3, [sp, #4]
   bb67e:	bd08      	pop	{r3, pc}
   bb680:	00030260 	.word	0x00030260

000bb684 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bb684:	b508      	push	{r3, lr}
   bb686:	4b03      	ldr	r3, [pc, #12]	; (bb694 <diag_get_source+0x10>)
   bb688:	681b      	ldr	r3, [r3, #0]
   bb68a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bb68e:	9301      	str	r3, [sp, #4]
   bb690:	bd08      	pop	{r3, pc}
   bb692:	0000      	.short	0x0000
   bb694:	00030260 	.word	0x00030260

000bb698 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bb698:	b508      	push	{r3, lr}
   bb69a:	4b02      	ldr	r3, [pc, #8]	; (bb6a4 <system_mode+0xc>)
   bb69c:	681b      	ldr	r3, [r3, #0]
   bb69e:	681b      	ldr	r3, [r3, #0]
   bb6a0:	9301      	str	r3, [sp, #4]
   bb6a2:	bd08      	pop	{r3, pc}
   bb6a4:	00030220 	.word	0x00030220

000bb6a8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bb6a8:	b508      	push	{r3, lr}
   bb6aa:	4b02      	ldr	r3, [pc, #8]	; (bb6b4 <set_system_mode+0xc>)
   bb6ac:	681b      	ldr	r3, [r3, #0]
   bb6ae:	685b      	ldr	r3, [r3, #4]
   bb6b0:	9301      	str	r3, [sp, #4]
   bb6b2:	bd08      	pop	{r3, pc}
   bb6b4:	00030220 	.word	0x00030220

000bb6b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bb6b8:	b508      	push	{r3, lr}
   bb6ba:	4b02      	ldr	r3, [pc, #8]	; (bb6c4 <system_delay_ms+0xc>)
   bb6bc:	681b      	ldr	r3, [r3, #0]
   bb6be:	695b      	ldr	r3, [r3, #20]
   bb6c0:	9301      	str	r3, [sp, #4]
   bb6c2:	bd08      	pop	{r3, pc}
   bb6c4:	00030220 	.word	0x00030220

000bb6c8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bb6c8:	b508      	push	{r3, lr}
   bb6ca:	4b02      	ldr	r3, [pc, #8]	; (bb6d4 <system_subscribe_event+0xc>)
   bb6cc:	681b      	ldr	r3, [r3, #0]
   bb6ce:	6a1b      	ldr	r3, [r3, #32]
   bb6d0:	9301      	str	r3, [sp, #4]
   bb6d2:	bd08      	pop	{r3, pc}
   bb6d4:	00030220 	.word	0x00030220

000bb6d8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bb6d8:	b508      	push	{r3, lr}
   bb6da:	4b02      	ldr	r3, [pc, #8]	; (bb6e4 <system_thread_set_state+0xc>)
   bb6dc:	681b      	ldr	r3, [r3, #0]
   bb6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb6e0:	9301      	str	r3, [sp, #4]
   bb6e2:	bd08      	pop	{r3, pc}
   bb6e4:	00030220 	.word	0x00030220

000bb6e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bb6e8:	b508      	push	{r3, lr}
   bb6ea:	4b02      	ldr	r3, [pc, #8]	; (bb6f4 <application_thread_current+0xc>)
   bb6ec:	681b      	ldr	r3, [r3, #0]
   bb6ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb6f0:	9301      	str	r3, [sp, #4]
   bb6f2:	bd08      	pop	{r3, pc}
   bb6f4:	00030220 	.word	0x00030220

000bb6f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bb6f8:	b508      	push	{r3, lr}
   bb6fa:	4b02      	ldr	r3, [pc, #8]	; (bb704 <application_thread_invoke+0xc>)
   bb6fc:	681b      	ldr	r3, [r3, #0]
   bb6fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb700:	9301      	str	r3, [sp, #4]
   bb702:	bd08      	pop	{r3, pc}
   bb704:	00030220 	.word	0x00030220

000bb708 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bb708:	b508      	push	{r3, lr}
   bb70a:	4b02      	ldr	r3, [pc, #8]	; (bb714 <system_thread_get_state+0xc>)
   bb70c:	681b      	ldr	r3, [r3, #0]
   bb70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bb710:	9301      	str	r3, [sp, #4]
   bb712:	bd08      	pop	{r3, pc}
   bb714:	00030220 	.word	0x00030220

000bb718 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bb718:	b508      	push	{r3, lr}
   bb71a:	4b02      	ldr	r3, [pc, #8]	; (bb724 <system_notify_time_changed+0xc>)
   bb71c:	681b      	ldr	r3, [r3, #0]
   bb71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bb720:	9301      	str	r3, [sp, #4]
   bb722:	bd08      	pop	{r3, pc}
   bb724:	00030220 	.word	0x00030220

000bb728 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bb728:	b508      	push	{r3, lr}
   bb72a:	4b03      	ldr	r3, [pc, #12]	; (bb738 <system_ctrl_set_app_request_handler+0x10>)
   bb72c:	681b      	ldr	r3, [r3, #0]
   bb72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bb732:	9301      	str	r3, [sp, #4]
   bb734:	bd08      	pop	{r3, pc}
   bb736:	0000      	.short	0x0000
   bb738:	00030220 	.word	0x00030220

000bb73c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bb73c:	b508      	push	{r3, lr}
   bb73e:	4b03      	ldr	r3, [pc, #12]	; (bb74c <system_ctrl_set_result+0x10>)
   bb740:	681b      	ldr	r3, [r3, #0]
   bb742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bb746:	9301      	str	r3, [sp, #4]
   bb748:	bd08      	pop	{r3, pc}
   bb74a:	0000      	.short	0x0000
   bb74c:	00030220 	.word	0x00030220

000bb750 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bb750:	b508      	push	{r3, lr}
   bb752:	4b03      	ldr	r3, [pc, #12]	; (bb760 <system_power_management_set_config+0x10>)
   bb754:	681b      	ldr	r3, [r3, #0]
   bb756:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bb75a:	9301      	str	r3, [sp, #4]
   bb75c:	bd08      	pop	{r3, pc}
   bb75e:	0000      	.short	0x0000
   bb760:	00030220 	.word	0x00030220

000bb764 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bb764:	b508      	push	{r3, lr}
   bb766:	4b03      	ldr	r3, [pc, #12]	; (bb774 <system_sleep_ext+0x10>)
   bb768:	681b      	ldr	r3, [r3, #0]
   bb76a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bb76e:	9301      	str	r3, [sp, #4]
   bb770:	bd08      	pop	{r3, pc}
   bb772:	0000      	.short	0x0000
   bb774:	00030220 	.word	0x00030220

000bb778 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bb778:	b508      	push	{r3, lr}
   bb77a:	4b03      	ldr	r3, [pc, #12]	; (bb788 <system_reset+0x10>)
   bb77c:	681b      	ldr	r3, [r3, #0]
   bb77e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bb782:	9301      	str	r3, [sp, #4]
   bb784:	bd08      	pop	{r3, pc}
   bb786:	0000      	.short	0x0000
   bb788:	00030220 	.word	0x00030220

000bb78c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bb78c:	b508      	push	{r3, lr}
   bb78e:	4b02      	ldr	r3, [pc, #8]	; (bb798 <spark_variable+0xc>)
   bb790:	681b      	ldr	r3, [r3, #0]
   bb792:	681b      	ldr	r3, [r3, #0]
   bb794:	9301      	str	r3, [sp, #4]
   bb796:	bd08      	pop	{r3, pc}
   bb798:	00030244 	.word	0x00030244

000bb79c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bb79c:	b508      	push	{r3, lr}
   bb79e:	4b02      	ldr	r3, [pc, #8]	; (bb7a8 <spark_function+0xc>)
   bb7a0:	681b      	ldr	r3, [r3, #0]
   bb7a2:	685b      	ldr	r3, [r3, #4]
   bb7a4:	9301      	str	r3, [sp, #4]
   bb7a6:	bd08      	pop	{r3, pc}
   bb7a8:	00030244 	.word	0x00030244

000bb7ac <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bb7ac:	b508      	push	{r3, lr}
   bb7ae:	4b02      	ldr	r3, [pc, #8]	; (bb7b8 <spark_process+0xc>)
   bb7b0:	681b      	ldr	r3, [r3, #0]
   bb7b2:	689b      	ldr	r3, [r3, #8]
   bb7b4:	9301      	str	r3, [sp, #4]
   bb7b6:	bd08      	pop	{r3, pc}
   bb7b8:	00030244 	.word	0x00030244

000bb7bc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bb7bc:	b508      	push	{r3, lr}
   bb7be:	4b02      	ldr	r3, [pc, #8]	; (bb7c8 <spark_cloud_flag_connect+0xc>)
   bb7c0:	681b      	ldr	r3, [r3, #0]
   bb7c2:	68db      	ldr	r3, [r3, #12]
   bb7c4:	9301      	str	r3, [sp, #4]
   bb7c6:	bd08      	pop	{r3, pc}
   bb7c8:	00030244 	.word	0x00030244

000bb7cc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bb7cc:	b508      	push	{r3, lr}
   bb7ce:	4b02      	ldr	r3, [pc, #8]	; (bb7d8 <spark_cloud_flag_connected+0xc>)
   bb7d0:	681b      	ldr	r3, [r3, #0]
   bb7d2:	695b      	ldr	r3, [r3, #20]
   bb7d4:	9301      	str	r3, [sp, #4]
   bb7d6:	bd08      	pop	{r3, pc}
   bb7d8:	00030244 	.word	0x00030244

000bb7dc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bb7dc:	b508      	push	{r3, lr}
   bb7de:	4b02      	ldr	r3, [pc, #8]	; (bb7e8 <spark_deviceID+0xc>)
   bb7e0:	681b      	ldr	r3, [r3, #0]
   bb7e2:	69db      	ldr	r3, [r3, #28]
   bb7e4:	9301      	str	r3, [sp, #4]
   bb7e6:	bd08      	pop	{r3, pc}
   bb7e8:	00030244 	.word	0x00030244

000bb7ec <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bb7ec:	b508      	push	{r3, lr}
   bb7ee:	4b02      	ldr	r3, [pc, #8]	; (bb7f8 <spark_send_event+0xc>)
   bb7f0:	681b      	ldr	r3, [r3, #0]
   bb7f2:	6a1b      	ldr	r3, [r3, #32]
   bb7f4:	9301      	str	r3, [sp, #4]
   bb7f6:	bd08      	pop	{r3, pc}
   bb7f8:	00030244 	.word	0x00030244

000bb7fc <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bb7fc:	b508      	push	{r3, lr}
   bb7fe:	4b02      	ldr	r3, [pc, #8]	; (bb808 <spark_sync_time+0xc>)
   bb800:	681b      	ldr	r3, [r3, #0]
   bb802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb804:	9301      	str	r3, [sp, #4]
   bb806:	bd08      	pop	{r3, pc}
   bb808:	00030244 	.word	0x00030244

000bb80c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bb80c:	b508      	push	{r3, lr}
   bb80e:	4b02      	ldr	r3, [pc, #8]	; (bb818 <spark_sync_time_pending+0xc>)
   bb810:	681b      	ldr	r3, [r3, #0]
   bb812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb814:	9301      	str	r3, [sp, #4]
   bb816:	bd08      	pop	{r3, pc}
   bb818:	00030244 	.word	0x00030244

000bb81c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bb81c:	b508      	push	{r3, lr}
   bb81e:	4b02      	ldr	r3, [pc, #8]	; (bb828 <spark_sync_time_last+0xc>)
   bb820:	681b      	ldr	r3, [r3, #0]
   bb822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb824:	9301      	str	r3, [sp, #4]
   bb826:	bd08      	pop	{r3, pc}
   bb828:	00030244 	.word	0x00030244

000bb82c <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   bb82c:	b508      	push	{r3, lr}
   bb82e:	4b02      	ldr	r3, [pc, #8]	; (bb838 <spark_set_connection_property+0xc>)
   bb830:	681b      	ldr	r3, [r3, #0]
   bb832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bb834:	9301      	str	r3, [sp, #4]
   bb836:	bd08      	pop	{r3, pc}
   bb838:	00030244 	.word	0x00030244

000bb83c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bb83c:	b508      	push	{r3, lr}
   bb83e:	4b02      	ldr	r3, [pc, #8]	; (bb848 <spark_set_random_seed_from_cloud_handler+0xc>)
   bb840:	681b      	ldr	r3, [r3, #0]
   bb842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb844:	9301      	str	r3, [sp, #4]
   bb846:	bd08      	pop	{r3, pc}
   bb848:	00030244 	.word	0x00030244

000bb84c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bb84c:	b508      	push	{r3, lr}
   bb84e:	4b02      	ldr	r3, [pc, #8]	; (bb858 <spark_cloud_disconnect+0xc>)
   bb850:	681b      	ldr	r3, [r3, #0]
   bb852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb854:	9301      	str	r3, [sp, #4]
   bb856:	bd08      	pop	{r3, pc}
   bb858:	00030244 	.word	0x00030244

000bb85c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bb85c:	b508      	push	{r3, lr}
   bb85e:	4b02      	ldr	r3, [pc, #8]	; (bb868 <network_connect+0xc>)
   bb860:	681b      	ldr	r3, [r3, #0]
   bb862:	685b      	ldr	r3, [r3, #4]
   bb864:	9301      	str	r3, [sp, #4]
   bb866:	bd08      	pop	{r3, pc}
   bb868:	00030240 	.word	0x00030240

000bb86c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bb86c:	b508      	push	{r3, lr}
   bb86e:	4b02      	ldr	r3, [pc, #8]	; (bb878 <network_connecting+0xc>)
   bb870:	681b      	ldr	r3, [r3, #0]
   bb872:	689b      	ldr	r3, [r3, #8]
   bb874:	9301      	str	r3, [sp, #4]
   bb876:	bd08      	pop	{r3, pc}
   bb878:	00030240 	.word	0x00030240

000bb87c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bb87c:	b508      	push	{r3, lr}
   bb87e:	4b02      	ldr	r3, [pc, #8]	; (bb888 <network_disconnect+0xc>)
   bb880:	681b      	ldr	r3, [r3, #0]
   bb882:	68db      	ldr	r3, [r3, #12]
   bb884:	9301      	str	r3, [sp, #4]
   bb886:	bd08      	pop	{r3, pc}
   bb888:	00030240 	.word	0x00030240

000bb88c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bb88c:	b508      	push	{r3, lr}
   bb88e:	4b02      	ldr	r3, [pc, #8]	; (bb898 <network_ready+0xc>)
   bb890:	681b      	ldr	r3, [r3, #0]
   bb892:	691b      	ldr	r3, [r3, #16]
   bb894:	9301      	str	r3, [sp, #4]
   bb896:	bd08      	pop	{r3, pc}
   bb898:	00030240 	.word	0x00030240

000bb89c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bb89c:	b508      	push	{r3, lr}
   bb89e:	4b02      	ldr	r3, [pc, #8]	; (bb8a8 <network_on+0xc>)
   bb8a0:	681b      	ldr	r3, [r3, #0]
   bb8a2:	695b      	ldr	r3, [r3, #20]
   bb8a4:	9301      	str	r3, [sp, #4]
   bb8a6:	bd08      	pop	{r3, pc}
   bb8a8:	00030240 	.word	0x00030240

000bb8ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bb8ac:	b508      	push	{r3, lr}
   bb8ae:	4b02      	ldr	r3, [pc, #8]	; (bb8b8 <network_off+0xc>)
   bb8b0:	681b      	ldr	r3, [r3, #0]
   bb8b2:	699b      	ldr	r3, [r3, #24]
   bb8b4:	9301      	str	r3, [sp, #4]
   bb8b6:	bd08      	pop	{r3, pc}
   bb8b8:	00030240 	.word	0x00030240

000bb8bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bb8bc:	b508      	push	{r3, lr}
   bb8be:	4b02      	ldr	r3, [pc, #8]	; (bb8c8 <network_listen+0xc>)
   bb8c0:	681b      	ldr	r3, [r3, #0]
   bb8c2:	69db      	ldr	r3, [r3, #28]
   bb8c4:	9301      	str	r3, [sp, #4]
   bb8c6:	bd08      	pop	{r3, pc}
   bb8c8:	00030240 	.word	0x00030240

000bb8cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bb8cc:	b508      	push	{r3, lr}
   bb8ce:	4b02      	ldr	r3, [pc, #8]	; (bb8d8 <network_listening+0xc>)
   bb8d0:	681b      	ldr	r3, [r3, #0]
   bb8d2:	6a1b      	ldr	r3, [r3, #32]
   bb8d4:	9301      	str	r3, [sp, #4]
   bb8d6:	bd08      	pop	{r3, pc}
   bb8d8:	00030240 	.word	0x00030240

000bb8dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bb8dc:	b508      	push	{r3, lr}
   bb8de:	4b02      	ldr	r3, [pc, #8]	; (bb8e8 <network_set_listen_timeout+0xc>)
   bb8e0:	681b      	ldr	r3, [r3, #0]
   bb8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb8e4:	9301      	str	r3, [sp, #4]
   bb8e6:	bd08      	pop	{r3, pc}
   bb8e8:	00030240 	.word	0x00030240

000bb8ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bb8ec:	b508      	push	{r3, lr}
   bb8ee:	4b02      	ldr	r3, [pc, #8]	; (bb8f8 <network_get_listen_timeout+0xc>)
   bb8f0:	681b      	ldr	r3, [r3, #0]
   bb8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb8f4:	9301      	str	r3, [sp, #4]
   bb8f6:	bd08      	pop	{r3, pc}
   bb8f8:	00030240 	.word	0x00030240

000bb8fc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bb8fc:	b508      	push	{r3, lr}
   bb8fe:	4b02      	ldr	r3, [pc, #8]	; (bb908 <network_is_on+0xc>)
   bb900:	681b      	ldr	r3, [r3, #0]
   bb902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb904:	9301      	str	r3, [sp, #4]
   bb906:	bd08      	pop	{r3, pc}
   bb908:	00030240 	.word	0x00030240

000bb90c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bb90c:	b508      	push	{r3, lr}
   bb90e:	4b02      	ldr	r3, [pc, #8]	; (bb918 <network_is_off+0xc>)
   bb910:	681b      	ldr	r3, [r3, #0]
   bb912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb914:	9301      	str	r3, [sp, #4]
   bb916:	bd08      	pop	{r3, pc}
   bb918:	00030240 	.word	0x00030240

000bb91c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bb91c:	b508      	push	{r3, lr}
   bb91e:	4b02      	ldr	r3, [pc, #8]	; (bb928 <malloc+0xc>)
   bb920:	681b      	ldr	r3, [r3, #0]
   bb922:	681b      	ldr	r3, [r3, #0]
   bb924:	9301      	str	r3, [sp, #4]
   bb926:	bd08      	pop	{r3, pc}
   bb928:	0003021c 	.word	0x0003021c

000bb92c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bb92c:	b508      	push	{r3, lr}
   bb92e:	4b02      	ldr	r3, [pc, #8]	; (bb938 <free+0xc>)
   bb930:	681b      	ldr	r3, [r3, #0]
   bb932:	685b      	ldr	r3, [r3, #4]
   bb934:	9301      	str	r3, [sp, #4]
   bb936:	bd08      	pop	{r3, pc}
   bb938:	0003021c 	.word	0x0003021c

000bb93c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bb93c:	b508      	push	{r3, lr}
   bb93e:	4b02      	ldr	r3, [pc, #8]	; (bb948 <realloc+0xc>)
   bb940:	681b      	ldr	r3, [r3, #0]
   bb942:	689b      	ldr	r3, [r3, #8]
   bb944:	9301      	str	r3, [sp, #4]
   bb946:	bd08      	pop	{r3, pc}
   bb948:	0003021c 	.word	0x0003021c

000bb94c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bb94c:	b508      	push	{r3, lr}
   bb94e:	4b02      	ldr	r3, [pc, #8]	; (bb958 <siprintf+0xc>)
   bb950:	681b      	ldr	r3, [r3, #0]
   bb952:	691b      	ldr	r3, [r3, #16]
   bb954:	9301      	str	r3, [sp, #4]
   bb956:	bd08      	pop	{r3, pc}
   bb958:	0003021c 	.word	0x0003021c

000bb95c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bb95c:	b508      	push	{r3, lr}
   bb95e:	4b02      	ldr	r3, [pc, #8]	; (bb968 <sscanf+0xc>)
   bb960:	681b      	ldr	r3, [r3, #0]
   bb962:	695b      	ldr	r3, [r3, #20]
   bb964:	9301      	str	r3, [sp, #4]
   bb966:	bd08      	pop	{r3, pc}
   bb968:	0003021c 	.word	0x0003021c

000bb96c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bb96c:	b508      	push	{r3, lr}
   bb96e:	4b02      	ldr	r3, [pc, #8]	; (bb978 <snprintf+0xc>)
   bb970:	681b      	ldr	r3, [r3, #0]
   bb972:	69db      	ldr	r3, [r3, #28]
   bb974:	9301      	str	r3, [sp, #4]
   bb976:	bd08      	pop	{r3, pc}
   bb978:	0003021c 	.word	0x0003021c

000bb97c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bb97c:	b508      	push	{r3, lr}
   bb97e:	4b02      	ldr	r3, [pc, #8]	; (bb988 <vsnprintf+0xc>)
   bb980:	681b      	ldr	r3, [r3, #0]
   bb982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb984:	9301      	str	r3, [sp, #4]
   bb986:	bd08      	pop	{r3, pc}
   bb988:	0003021c 	.word	0x0003021c

000bb98c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bb98c:	b508      	push	{r3, lr}
   bb98e:	4b02      	ldr	r3, [pc, #8]	; (bb998 <abort+0xc>)
   bb990:	681b      	ldr	r3, [r3, #0]
   bb992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb994:	9301      	str	r3, [sp, #4]
   bb996:	bd08      	pop	{r3, pc}
   bb998:	0003021c 	.word	0x0003021c

000bb99c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bb99c:	b508      	push	{r3, lr}
   bb99e:	4b02      	ldr	r3, [pc, #8]	; (bb9a8 <_malloc_r+0xc>)
   bb9a0:	681b      	ldr	r3, [r3, #0]
   bb9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb9a4:	9301      	str	r3, [sp, #4]
   bb9a6:	bd08      	pop	{r3, pc}
   bb9a8:	0003021c 	.word	0x0003021c

000bb9ac <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bb9ac:	b508      	push	{r3, lr}
   bb9ae:	4b02      	ldr	r3, [pc, #8]	; (bb9b8 <__errno+0xc>)
   bb9b0:	681b      	ldr	r3, [r3, #0]
   bb9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb9b4:	9301      	str	r3, [sp, #4]
   bb9b6:	bd08      	pop	{r3, pc}
   bb9b8:	0003021c 	.word	0x0003021c

000bb9bc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bb9bc:	b508      	push	{r3, lr}
   bb9be:	4b02      	ldr	r3, [pc, #8]	; (bb9c8 <__assert_func+0xc>)
   bb9c0:	681b      	ldr	r3, [r3, #0]
   bb9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb9c4:	9301      	str	r3, [sp, #4]
   bb9c6:	bd08      	pop	{r3, pc}
   bb9c8:	0003021c 	.word	0x0003021c

000bb9cc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bb9cc:	b508      	push	{r3, lr}
   bb9ce:	4b02      	ldr	r3, [pc, #8]	; (bb9d8 <newlib_impure_ptr_callback+0xc>)
   bb9d0:	681b      	ldr	r3, [r3, #0]
   bb9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb9d4:	9301      	str	r3, [sp, #4]
   bb9d6:	bd08      	pop	{r3, pc}
   bb9d8:	0003021c 	.word	0x0003021c

000bb9dc <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bb9dc:	b508      	push	{r3, lr}
   bb9de:	4b02      	ldr	r3, [pc, #8]	; (bb9e8 <strftime+0xc>)
   bb9e0:	681b      	ldr	r3, [r3, #0]
   bb9e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bb9e4:	9301      	str	r3, [sp, #4]
   bb9e6:	bd08      	pop	{r3, pc}
   bb9e8:	0003021c 	.word	0x0003021c

000bb9ec <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bb9ec:	b508      	push	{r3, lr}
   bb9ee:	4b02      	ldr	r3, [pc, #8]	; (bb9f8 <localtime_r+0xc>)
   bb9f0:	681b      	ldr	r3, [r3, #0]
   bb9f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb9f4:	9301      	str	r3, [sp, #4]
   bb9f6:	bd08      	pop	{r3, pc}
   bb9f8:	0003021c 	.word	0x0003021c

000bb9fc <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bb9fc:	b508      	push	{r3, lr}
   bb9fe:	4b02      	ldr	r3, [pc, #8]	; (bba08 <gmtime_r+0xc>)
   bba00:	681b      	ldr	r3, [r3, #0]
   bba02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bba04:	9301      	str	r3, [sp, #4]
   bba06:	bd08      	pop	{r3, pc}
   bba08:	0003021c 	.word	0x0003021c

000bba0c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bba0c:	b508      	push	{r3, lr}
   bba0e:	4b02      	ldr	r3, [pc, #8]	; (bba18 <mktime+0xc>)
   bba10:	681b      	ldr	r3, [r3, #0]
   bba12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bba14:	9301      	str	r3, [sp, #4]
   bba16:	bd08      	pop	{r3, pc}
   bba18:	0003021c 	.word	0x0003021c

000bba1c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bba1c:	2100      	movs	r1, #0
   bba1e:	f7ff be4b 	b.w	bb6b8 <system_delay_ms>

000bba22 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bba22:	b510      	push	{r4, lr}
      if (_M_empty())
   bba24:	6883      	ldr	r3, [r0, #8]
   bba26:	4604      	mov	r4, r0
   bba28:	b90b      	cbnz	r3, bba2e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bba2a:	f003 f99b 	bl	bed64 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bba2e:	68c3      	ldr	r3, [r0, #12]
   bba30:	4798      	blx	r3
      if (_M_manager)
   bba32:	68a3      	ldr	r3, [r4, #8]
   bba34:	b11b      	cbz	r3, bba3e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bba36:	2203      	movs	r2, #3
   bba38:	4621      	mov	r1, r4
   bba3a:	4620      	mov	r0, r4
   bba3c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bba3e:	4620      	mov	r0, r4
   bba40:	2110      	movs	r1, #16
}
   bba42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bba46:	f7f8 bb2a 	b.w	b409e <_ZdlPvj>

000bba4a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bba4a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bba4c:	6843      	ldr	r3, [r0, #4]
   bba4e:	3b01      	subs	r3, #1
    {
   bba50:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bba52:	6043      	str	r3, [r0, #4]
   bba54:	b963      	cbnz	r3, bba70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bba56:	6803      	ldr	r3, [r0, #0]
   bba58:	689b      	ldr	r3, [r3, #8]
   bba5a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bba5c:	68a3      	ldr	r3, [r4, #8]
   bba5e:	3b01      	subs	r3, #1
   bba60:	60a3      	str	r3, [r4, #8]
   bba62:	b92b      	cbnz	r3, bba70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bba64:	6823      	ldr	r3, [r4, #0]
   bba66:	4620      	mov	r0, r4
   bba68:	68db      	ldr	r3, [r3, #12]
    }
   bba6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bba6e:	4718      	bx	r3
    }
   bba70:	bd10      	pop	{r4, pc}

000bba72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bba72:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bba74:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bba78:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bba7a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bba7e:	42ae      	cmp	r6, r5
   bba80:	d004      	beq.n	bba8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bba82:	4628      	mov	r0, r5
   bba84:	f002 fab4 	bl	bdff0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bba88:	3510      	adds	r5, #16
   bba8a:	e7f8      	b.n	bba7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bba8c:	6820      	ldr	r0, [r4, #0]
   bba8e:	f7ff ff4d 	bl	bb92c <free>
    AllocatorT::free(data_);
}
   bba92:	4620      	mov	r0, r4
   bba94:	bd70      	pop	{r4, r5, r6, pc}
	...

000bba98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bba98:	4802      	ldr	r0, [pc, #8]	; (bbaa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bba9a:	2300      	movs	r3, #0
   bba9c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bba9e:	f7ff bb51 	b.w	bb144 <os_mutex_recursive_create>
   bbaa2:	bf00      	nop
   bbaa4:	2003e580 	.word	0x2003e580

000bbaa8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bbaa8:	2200      	movs	r2, #0
   bbaaa:	6840      	ldr	r0, [r0, #4]
   bbaac:	4611      	mov	r1, r2
   bbaae:	f7ff beed 	b.w	bb88c <network_ready>

000bbab2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bbab2:	2200      	movs	r2, #0
   bbab4:	6840      	ldr	r0, [r0, #4]
   bbab6:	4611      	mov	r1, r2
   bbab8:	f7ff bf08 	b.w	bb8cc <network_listening>

000bbabc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bbabc:	2200      	movs	r2, #0
   bbabe:	6840      	ldr	r0, [r0, #4]
   bbac0:	4611      	mov	r1, r2
   bbac2:	f7ff bf13 	b.w	bb8ec <network_get_listen_timeout>

000bbac6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bbac6:	6840      	ldr	r0, [r0, #4]
   bbac8:	2200      	movs	r2, #0
   bbaca:	f7ff bf07 	b.w	bb8dc <network_set_listen_timeout>

000bbace <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bbace:	6840      	ldr	r0, [r0, #4]
   bbad0:	2200      	movs	r2, #0
   bbad2:	f081 0101 	eor.w	r1, r1, #1
   bbad6:	f7ff bef1 	b.w	bb8bc <network_listen>

000bbada <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bbada:	2300      	movs	r3, #0
   bbadc:	6840      	ldr	r0, [r0, #4]
   bbade:	461a      	mov	r2, r3
   bbae0:	4619      	mov	r1, r3
   bbae2:	f7ff bee3 	b.w	bb8ac <network_off>

000bbae6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bbae6:	2300      	movs	r3, #0
   bbae8:	6840      	ldr	r0, [r0, #4]
   bbaea:	461a      	mov	r2, r3
   bbaec:	4619      	mov	r1, r3
   bbaee:	f7ff bed5 	b.w	bb89c <network_on>

000bbaf2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bbaf2:	2200      	movs	r2, #0
   bbaf4:	6840      	ldr	r0, [r0, #4]
   bbaf6:	4611      	mov	r1, r2
   bbaf8:	f7ff beb8 	b.w	bb86c <network_connecting>

000bbafc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bbafc:	6840      	ldr	r0, [r0, #4]
   bbafe:	2200      	movs	r2, #0
   bbb00:	2102      	movs	r1, #2
   bbb02:	f7ff bebb 	b.w	bb87c <network_disconnect>

000bbb06 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bbb06:	2300      	movs	r3, #0
   bbb08:	6840      	ldr	r0, [r0, #4]
   bbb0a:	461a      	mov	r2, r3
   bbb0c:	f7ff bea6 	b.w	bb85c <network_connect>

000bbb10 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bbb10:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bbb12:	4b13      	ldr	r3, [pc, #76]	; (bbb60 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bbb14:	6003      	str	r3, [r0, #0]
   bbb16:	2518      	movs	r5, #24
   bbb18:	3330      	adds	r3, #48	; 0x30
   bbb1a:	b086      	sub	sp, #24
   bbb1c:	460e      	mov	r6, r1
   bbb1e:	6043      	str	r3, [r0, #4]
   bbb20:	462a      	mov	r2, r5
   bbb22:	2100      	movs	r1, #0
   bbb24:	4604      	mov	r4, r0
   bbb26:	3008      	adds	r0, #8
   bbb28:	f003 fe4e 	bl	bf7c8 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bbb2c:	2200      	movs	r2, #0
   bbb2e:	6870      	ldr	r0, [r6, #4]
   bbb30:	4611      	mov	r1, r2
   bbb32:	f7ff feab 	bl	bb88c <network_ready>
   bbb36:	b178      	cbz	r0, bbb58 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bbb38:	2100      	movs	r1, #0
   bbb3a:	462a      	mov	r2, r5
   bbb3c:	4668      	mov	r0, sp
   bbb3e:	f003 fe43 	bl	bf7c8 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bbb42:	4669      	mov	r1, sp
   bbb44:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bbb46:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bbb4a:	f7ff fabb 	bl	bb0c4 <cellular_signal>
   bbb4e:	b918      	cbnz	r0, bbb58 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bbb50:	4669      	mov	r1, sp
   bbb52:	4620      	mov	r0, r4
   bbb54:	f000 f8b8 	bl	bbcc8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bbb58:	4620      	mov	r0, r4
   bbb5a:	b006      	add	sp, #24
   bbb5c:	bd70      	pop	{r4, r5, r6, pc}
   bbb5e:	bf00      	nop
   bbb60:	000c1454 	.word	0x000c1454

000bbb64 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bbb64:	4b08      	ldr	r3, [pc, #32]	; (bbb88 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bbb66:	b510      	push	{r4, lr}
   bbb68:	2428      	movs	r4, #40	; 0x28
   bbb6a:	4622      	mov	r2, r4
   bbb6c:	4618      	mov	r0, r3
   bbb6e:	2100      	movs	r1, #0
   bbb70:	f003 fe2a 	bl	bf7c8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bbb74:	4b05      	ldr	r3, [pc, #20]	; (bbb8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bbb76:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bbb78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbb7c:	6042      	str	r2, [r0, #4]
   bbb7e:	2204      	movs	r2, #4
   bbb80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bbb82:	4a03      	ldr	r2, [pc, #12]	; (bbb90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bbb84:	601a      	str	r2, [r3, #0]
   bbb86:	bd10      	pop	{r4, pc}
   bbb88:	2003e58c 	.word	0x2003e58c
   bbb8c:	2003e584 	.word	0x2003e584
   bbb90:	000c1418 	.word	0x000c1418

000bbb94 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bbb94:	4770      	bx	lr

000bbb96 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bbb96:	7b00      	ldrb	r0, [r0, #12]
   bbb98:	4770      	bx	lr

000bbb9a <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bbb9a:	7b03      	ldrb	r3, [r0, #12]
   bbb9c:	b14b      	cbz	r3, bbbb2 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bbb9e:	6903      	ldr	r3, [r0, #16]
   bbba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bbba4:	d005      	beq.n	bbbb2 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bbba6:	6980      	ldr	r0, [r0, #24]
   bbba8:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bbbac:	bf18      	it	ne
   bbbae:	2001      	movne	r0, #1
   bbbb0:	4770      	bx	lr
   bbbb2:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bbbb4:	4770      	bx	lr

000bbbb6 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bbbb6:	6803      	ldr	r3, [r0, #0]
   bbbb8:	6a1b      	ldr	r3, [r3, #32]
   bbbba:	4718      	bx	r3

000bbbbc <_ZNK14CellularSignal7printToER5Print>:
{
   bbbbc:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bbbbe:	6803      	ldr	r3, [r0, #0]
{
   bbbc0:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bbbc2:	691b      	ldr	r3, [r3, #16]
{
   bbbc4:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bbbc6:	4798      	blx	r3
   bbbc8:	2102      	movs	r1, #2
   bbbca:	4628      	mov	r0, r5
   bbbcc:	f002 f8ee 	bl	bddac <_ZN5Print5printEfi>
    n += p.print(',');
   bbbd0:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bbbd2:	4604      	mov	r4, r0
    n += p.print(',');
   bbbd4:	4628      	mov	r0, r5
   bbbd6:	f001 fff3 	bl	bdbc0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bbbda:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bbbdc:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bbbde:	699b      	ldr	r3, [r3, #24]
   bbbe0:	4630      	mov	r0, r6
   bbbe2:	4798      	blx	r3
   bbbe4:	2102      	movs	r1, #2
   bbbe6:	4628      	mov	r0, r5
   bbbe8:	f002 f8e0 	bl	bddac <_ZN5Print5printEfi>
}
   bbbec:	4420      	add	r0, r4
   bbbee:	bd70      	pop	{r4, r5, r6, pc}

000bbbf0 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bbbf0:	f1a0 0004 	sub.w	r0, r0, #4
   bbbf4:	f7ff bfe2 	b.w	bbbbc <_ZNK14CellularSignal7printToER5Print>

000bbbf8 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bbbf8:	b510      	push	{r4, lr}
   bbbfa:	2120      	movs	r1, #32
   bbbfc:	4604      	mov	r4, r0
   bbbfe:	f7f8 fa4e 	bl	b409e <_ZdlPvj>
   bbc02:	4620      	mov	r0, r4
   bbc04:	bd10      	pop	{r4, pc}
	...

000bbc08 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bbc08:	7b03      	ldrb	r3, [r0, #12]
   bbc0a:	b17b      	cbz	r3, bbc2c <_ZNK14CellularSignal11getStrengthEv+0x24>
   bbc0c:	6943      	ldr	r3, [r0, #20]
   bbc0e:	2b00      	cmp	r3, #0
   bbc10:	db0c      	blt.n	bbc2c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bbc12:	ee07 3a90 	vmov	s15, r3
   bbc16:	ed9f 7a07 	vldr	s14, [pc, #28]	; bbc34 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bbc1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bbc1e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bbc22:	eddf 7a05 	vldr	s15, [pc, #20]	; bbc38 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bbc26:	ee20 0a27 	vmul.f32	s0, s0, s15
   bbc2a:	4770      	bx	lr
    return -1.0f;
   bbc2c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bbc30:	4770      	bx	lr
   bbc32:	bf00      	nop
   bbc34:	477fff00 	.word	0x477fff00
   bbc38:	42c80000 	.word	0x42c80000

000bbc3c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bbc3c:	7b03      	ldrb	r3, [r0, #12]
   bbc3e:	b163      	cbz	r3, bbc5a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bbc40:	6903      	ldr	r3, [r0, #16]
   bbc42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bbc46:	d008      	beq.n	bbc5a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bbc48:	ee07 3a90 	vmov	s15, r3
   bbc4c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bbc60 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bbc50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bbc54:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bbc58:	4770      	bx	lr
    return 0.0f;
   bbc5a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bbc64 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bbc5e:	4770      	bx	lr
   bbc60:	42c80000 	.word	0x42c80000
   bbc64:	00000000 	.word	0x00000000

000bbc68 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bbc68:	7b03      	ldrb	r3, [r0, #12]
   bbc6a:	b17b      	cbz	r3, bbc8c <_ZNK14CellularSignal10getQualityEv+0x24>
   bbc6c:	69c3      	ldr	r3, [r0, #28]
   bbc6e:	2b00      	cmp	r3, #0
   bbc70:	db0c      	blt.n	bbc8c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bbc72:	ee07 3a90 	vmov	s15, r3
   bbc76:	ed9f 7a07 	vldr	s14, [pc, #28]	; bbc94 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bbc7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bbc7e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bbc82:	eddf 7a05 	vldr	s15, [pc, #20]	; bbc98 <_ZNK14CellularSignal10getQualityEv+0x30>
   bbc86:	ee20 0a27 	vmul.f32	s0, s0, s15
   bbc8a:	4770      	bx	lr
    return -1.0f;
   bbc8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bbc90:	4770      	bx	lr
   bbc92:	bf00      	nop
   bbc94:	477fff00 	.word	0x477fff00
   bbc98:	42c80000 	.word	0x42c80000

000bbc9c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bbc9c:	7b03      	ldrb	r3, [r0, #12]
   bbc9e:	b163      	cbz	r3, bbcba <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bbca0:	6983      	ldr	r3, [r0, #24]
   bbca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bbca6:	d008      	beq.n	bbcba <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bbca8:	ee07 3a90 	vmov	s15, r3
   bbcac:	ed9f 7a04 	vldr	s14, [pc, #16]	; bbcc0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bbcb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bbcb4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bbcb8:	4770      	bx	lr
    return 0.0f;
   bbcba:	ed9f 0a02 	vldr	s0, [pc, #8]	; bbcc4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bbcbe:	4770      	bx	lr
   bbcc0:	42c80000 	.word	0x42c80000
   bbcc4:	00000000 	.word	0x00000000

000bbcc8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bbcc8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bbcca:	460d      	mov	r5, r1
   bbccc:	f100 0408 	add.w	r4, r0, #8
   bbcd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bbcd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbcd4:	e895 0003 	ldmia.w	r5, {r0, r1}
   bbcd8:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bbcdc:	2001      	movs	r0, #1
   bbcde:	bd30      	pop	{r4, r5, pc}

000bbce0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbce0:	4770      	bx	lr

000bbce2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bbce2:	2000      	movs	r0, #0
   bbce4:	4770      	bx	lr

000bbce6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbce6:	b510      	push	{r4, lr}
   bbce8:	2110      	movs	r1, #16
   bbcea:	4604      	mov	r4, r0
   bbcec:	f7f8 f9d7 	bl	b409e <_ZdlPvj>
   bbcf0:	4620      	mov	r0, r4
   bbcf2:	bd10      	pop	{r4, pc}

000bbcf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bbcf4:	b508      	push	{r3, lr}
      { delete this; }
   bbcf6:	f7ff fff6 	bl	bbce6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bbcfa:	bd08      	pop	{r3, pc}

000bbcfc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bbcfc:	b530      	push	{r4, r5, lr}
        type_(type) {
   bbcfe:	2200      	movs	r2, #0
   bbd00:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bbd04:	6002      	str	r2, [r0, #0]
   bbd06:	8084      	strh	r4, [r0, #4]
   bbd08:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bbd0a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbd0c:	680c      	ldr	r4, [r1, #0]
   bbd0e:	8085      	strh	r5, [r0, #4]
   bbd10:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbd12:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bbd14:	bd30      	pop	{r4, r5, pc}

000bbd16 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bbd16:	b510      	push	{r4, lr}
   bbd18:	4604      	mov	r4, r0
    free((void*)msg_);
   bbd1a:	6800      	ldr	r0, [r0, #0]
   bbd1c:	f7ff fe06 	bl	bb92c <free>
}
   bbd20:	4620      	mov	r0, r4
   bbd22:	bd10      	pop	{r4, pc}

000bbd24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bbd24:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bbd26:	68c4      	ldr	r4, [r0, #12]
   bbd28:	b1f4      	cbz	r4, bbd68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bbd2a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bbd2c:	2b02      	cmp	r3, #2
   bbd2e:	d103      	bne.n	bbd38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bbd30:	f104 000c 	add.w	r0, r4, #12
   bbd34:	f7ff ffef 	bl	bbd16 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bbd38:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bbd3a:	b135      	cbz	r5, bbd4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bbd3c:	4628      	mov	r0, r5
   bbd3e:	f7f9 f828 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   bbd42:	2110      	movs	r1, #16
   bbd44:	4628      	mov	r0, r5
   bbd46:	f7f8 f9aa 	bl	b409e <_ZdlPvj>
   bbd4a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bbd4c:	b135      	cbz	r5, bbd5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bbd4e:	4628      	mov	r0, r5
   bbd50:	f7f9 f81f 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
   bbd54:	2110      	movs	r1, #16
   bbd56:	4628      	mov	r0, r5
   bbd58:	f7f8 f9a1 	bl	b409e <_ZdlPvj>
   bbd5c:	4620      	mov	r0, r4
   bbd5e:	2114      	movs	r1, #20
   bbd60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbd64:	f7f8 b99b 	b.w	b409e <_ZdlPvj>
   bbd68:	bd38      	pop	{r3, r4, r5, pc}

000bbd6a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bbd6a:	b510      	push	{r4, lr}
   bbd6c:	b088      	sub	sp, #32
   bbd6e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bbd70:	4668      	mov	r0, sp
   bbd72:	f002 f988 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bbd76:	4669      	mov	r1, sp
   bbd78:	a804      	add	r0, sp, #16
   bbd7a:	f002 f9cf 	bl	be11c <_ZN6StringC1ERKS_>
   bbd7e:	a804      	add	r0, sp, #16
   bbd80:	47a0      	blx	r4
   bbd82:	4604      	mov	r4, r0
   bbd84:	a804      	add	r0, sp, #16
   bbd86:	f002 f933 	bl	bdff0 <_ZN6StringD1Ev>
    String p(param);
   bbd8a:	4668      	mov	r0, sp
   bbd8c:	f002 f930 	bl	bdff0 <_ZN6StringD1Ev>
}
   bbd90:	4620      	mov	r0, r4
   bbd92:	b008      	add	sp, #32
   bbd94:	bd10      	pop	{r4, pc}

000bbd96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bbd96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bbd98:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bbd9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bbd9e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bbda0:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bbda2:	461a      	mov	r2, r3
   bbda4:	4669      	mov	r1, sp
   bbda6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bbda8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bbdac:	f8ad 4000 	strh.w	r4, [sp]
   bbdb0:	f7ff fcf4 	bl	bb79c <spark_function>
}
   bbdb4:	b004      	add	sp, #16
   bbdb6:	bd10      	pop	{r4, pc}

000bbdb8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bbdb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bbdba:	230c      	movs	r3, #12
   bbdbc:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bbdc0:	6803      	ldr	r3, [r0, #0]
   bbdc2:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bbdc6:	7a03      	ldrb	r3, [r0, #8]
   bbdc8:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bbdcc:	6843      	ldr	r3, [r0, #4]
   bbdce:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bbdd0:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bbdd2:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bbdd4:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bbdd8:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bbdda:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bbdde:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bbde2:	f7ff fd33 	bl	bb84c <spark_cloud_disconnect>
}
   bbde6:	b005      	add	sp, #20
   bbde8:	f85d fb04 	ldr.w	pc, [sp], #4

000bbdec <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbdec:	680b      	ldr	r3, [r1, #0]
   bbdee:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bbdf0:	684b      	ldr	r3, [r1, #4]
   bbdf2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bbdf4:	b113      	cbz	r3, bbdfc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bbdf6:	685a      	ldr	r2, [r3, #4]
   bbdf8:	3201      	adds	r2, #1
   bbdfa:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbdfc:	4770      	bx	lr

000bbdfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bbdfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbe00:	4604      	mov	r4, r0
   bbe02:	4668      	mov	r0, sp
   bbe04:	460d      	mov	r5, r1
   bbe06:	f7ff fff1 	bl	bbdec <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbe0a:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bbe0c:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbe0e:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bbe10:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bbe12:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bbe14:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bbe16:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bbe18:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bbe1a:	f7fa fbe1 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bbe1e:	b135      	cbz	r5, bbe2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bbe20:	1d28      	adds	r0, r5, #4
   bbe22:	f7fa fbdd 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbe26:	2108      	movs	r1, #8
   bbe28:	4628      	mov	r0, r5
   bbe2a:	f7f8 f938 	bl	b409e <_ZdlPvj>
        return p;
    }
   bbe2e:	4620      	mov	r0, r4
   bbe30:	b003      	add	sp, #12
   bbe32:	bd30      	pop	{r4, r5, pc}

000bbe34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bbe34:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbe36:	b510      	push	{r4, lr}
      if (_M_empty())
   bbe38:	b90a      	cbnz	r2, bbe3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bbe3a:	f002 ff93 	bl	bed64 <_ZSt25__throw_bad_function_callv>
    }
   bbe3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbe42:	68c3      	ldr	r3, [r0, #12]
   bbe44:	4718      	bx	r3

000bbe46 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbe46:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbe48:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bbe4a:	f100 0110 	add.w	r1, r0, #16
   bbe4e:	f7ff fff1 	bl	bbe34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bbe52:	bd08      	pop	{r3, pc}

000bbe54 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bbe54:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbe56:	b510      	push	{r4, lr}
      if (_M_empty())
   bbe58:	b90a      	cbnz	r2, bbe5e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bbe5a:	f002 ff83 	bl	bed64 <_ZSt25__throw_bad_function_callv>
    }
   bbe5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbe62:	68c3      	ldr	r3, [r0, #12]
   bbe64:	4718      	bx	r3

000bbe66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbe66:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbe68:	6800      	ldr	r0, [r0, #0]
   bbe6a:	f100 0110 	add.w	r1, r0, #16
   bbe6e:	f7ff fff1 	bl	bbe54 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bbe72:	bd08      	pop	{r3, pc}

000bbe74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bbe74:	b538      	push	{r3, r4, r5, lr}
   bbe76:	2300      	movs	r3, #0
   bbe78:	4604      	mov	r4, r0
   bbe7a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbe7c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bbe7e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbe80:	f7f8 f909 	bl	b4096 <_Znwj>
   bbe84:	b128      	cbz	r0, bbe92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bbe86:	2301      	movs	r3, #1
   bbe88:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bbe8c:	4b02      	ldr	r3, [pc, #8]	; (bbe98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bbe8e:	6003      	str	r3, [r0, #0]
   bbe90:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbe92:	6020      	str	r0, [r4, #0]
	}
   bbe94:	4620      	mov	r0, r4
   bbe96:	bd38      	pop	{r3, r4, r5, pc}
   bbe98:	000c1490 	.word	0x000c1490

000bbe9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bbe9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bbe9e:	2300      	movs	r3, #0
   bbea0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bbea2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bbea4:	4604      	mov	r4, r0
   bbea6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bbea8:	b12b      	cbz	r3, bbeb6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbeaa:	2202      	movs	r2, #2
   bbeac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbeae:	68eb      	ldr	r3, [r5, #12]
   bbeb0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bbeb2:	68ab      	ldr	r3, [r5, #8]
   bbeb4:	60a3      	str	r3, [r4, #8]
    }
   bbeb6:	4620      	mov	r0, r4
   bbeb8:	bd38      	pop	{r3, r4, r5, pc}
	...

000bbebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bbebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbebe:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bbec0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bbec2:	4668      	mov	r0, sp
   bbec4:	f7ff ff1a 	bl	bbcfc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bbec8:	f04f 0302 	mov.w	r3, #2
   bbecc:	e8d4 2f4f 	ldrexb	r2, [r4]
   bbed0:	2a00      	cmp	r2, #0
   bbed2:	d103      	bne.n	bbedc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bbed4:	e8c4 3f41 	strexb	r1, r3, [r4]
   bbed8:	2900      	cmp	r1, #0
   bbeda:	d1f7      	bne.n	bbecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bbedc:	d125      	bne.n	bbf2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bbede:	f104 050c 	add.w	r5, r4, #12
   bbee2:	4669      	mov	r1, sp
   bbee4:	4628      	mov	r0, r5
   bbee6:	f7ff ff09 	bl	bbcfc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bbeea:	f3bf 8f5b 	dmb	ish
   bbeee:	2301      	movs	r3, #1
   bbef0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bbef2:	2000      	movs	r0, #0
   bbef4:	f104 0308 	add.w	r3, r4, #8
   bbef8:	f3bf 8f5b 	dmb	ish
   bbefc:	e853 6f00 	ldrex	r6, [r3]
   bbf00:	e843 0200 	strex	r2, r0, [r3]
   bbf04:	2a00      	cmp	r2, #0
   bbf06:	d1f9      	bne.n	bbefc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bbf08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bbf0c:	b16e      	cbz	r6, bbf2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bbf0e:	f7ff fbeb 	bl	bb6e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bbf12:	b178      	cbz	r0, bbf34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bbf14:	4629      	mov	r1, r5
   bbf16:	4630      	mov	r0, r6
   bbf18:	f7ff ff8c 	bl	bbe34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bbf1c:	4630      	mov	r0, r6
   bbf1e:	f7f8 ff38 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bbf22:	2110      	movs	r1, #16
   bbf24:	4630      	mov	r0, r6
   bbf26:	f7f8 f8ba 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bbf2a:	4668      	mov	r0, sp
   bbf2c:	f7ff fef3 	bl	bbd16 <_ZN8particle5ErrorD1Ev>
    }
   bbf30:	b009      	add	sp, #36	; 0x24
   bbf32:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bbf34:	4631      	mov	r1, r6
   bbf36:	a802      	add	r0, sp, #8
   bbf38:	f7ff ffb0 	bl	bbe9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bbf3c:	68e0      	ldr	r0, [r4, #12]
   bbf3e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbf42:	b108      	cbz	r0, bbf48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bbf44:	f003 fcde 	bl	bf904 <strdup>
        type_(type) {
   bbf48:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bbf4a:	2010      	movs	r0, #16
   bbf4c:	f8ad 501c 	strh.w	r5, [sp, #28]
   bbf50:	f7f8 f8a1 	bl	b4096 <_Znwj>
   bbf54:	4605      	mov	r5, r0
   bbf56:	b1e8      	cbz	r0, bbf94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bbf58:	2700      	movs	r7, #0
   bbf5a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbf5c:	2018      	movs	r0, #24
   bbf5e:	f7f8 f89a 	bl	b4096 <_Znwj>
   bbf62:	4604      	mov	r4, r0
   bbf64:	b188      	cbz	r0, bbf8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bbf66:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bbf68:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bbf6a:	a802      	add	r0, sp, #8
   bbf6c:	f7fb fd75 	bl	b7a5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbf70:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bbf72:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf74:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbf76:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bbf78:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bbf7a:	a906      	add	r1, sp, #24
   bbf7c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf7e:	60e3      	str	r3, [r4, #12]
   bbf80:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bbf84:	9205      	str	r2, [sp, #20]
   bbf86:	f7ff feb9 	bl	bbcfc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bbf8a:	4b08      	ldr	r3, [pc, #32]	; (bbfac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bbf8c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bbf8e:	4b08      	ldr	r3, [pc, #32]	; (bbfb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbf90:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bbf92:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bbf94:	a806      	add	r0, sp, #24
   bbf96:	f7ff febe 	bl	bbd16 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bbf9a:	a802      	add	r0, sp, #8
   bbf9c:	f7f8 fef9 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bbfa0:	2200      	movs	r2, #0
   bbfa2:	4629      	mov	r1, r5
   bbfa4:	4803      	ldr	r0, [pc, #12]	; (bbfb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bbfa6:	f7ff fba7 	bl	bb6f8 <application_thread_invoke>
   bbfaa:	e7b7      	b.n	bbf1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bbfac:	000bbe47 	.word	0x000bbe47
   bbfb0:	000bc0c9 	.word	0x000bc0c9
   bbfb4:	000bba23 	.word	0x000bba23

000bbfb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bbfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbfbc:	b08b      	sub	sp, #44	; 0x2c
   bbfbe:	4605      	mov	r5, r0
   bbfc0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bbfc4:	460f      	mov	r7, r1
   bbfc6:	4690      	mov	r8, r2
   bbfc8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bbfca:	f7ff fbff 	bl	bb7cc <spark_cloud_flag_connected>
   bbfce:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bbfd0:	4683      	mov	fp, r0
   bbfd2:	bb38      	cbnz	r0, bc024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bbfd4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bbfd8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bbfda:	a905      	add	r1, sp, #20
   bbfdc:	4630      	mov	r0, r6
   bbfde:	f8ad 3018 	strh.w	r3, [sp, #24]
   bbfe2:	f7ff fe8b 	bl	bbcfc <_ZN8particle5ErrorC1EOS0_>
   bbfe6:	2014      	movs	r0, #20
   bbfe8:	f7f8 f855 	bl	b4096 <_Znwj>
   bbfec:	4604      	mov	r4, r0
   bbfee:	b148      	cbz	r0, bc004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bbff0:	2302      	movs	r3, #2
   bbff2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbff4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bbff6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbffa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bbffc:	4631      	mov	r1, r6
   bbffe:	300c      	adds	r0, #12
   bc000:	f7ff fe7c 	bl	bbcfc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc004:	4628      	mov	r0, r5
	: __shared_count(__p)
   bc006:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc008:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bc00c:	f7ff ff32 	bl	bbe74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc010:	4630      	mov	r0, r6
   bc012:	f7ff fe80 	bl	bbd16 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bc016:	a805      	add	r0, sp, #20
   bc018:	f7ff fe7d 	bl	bbd16 <_ZN8particle5ErrorD1Ev>
}
   bc01c:	4628      	mov	r0, r5
   bc01e:	b00b      	add	sp, #44	; 0x2c
   bc020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bc024:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bc026:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bc028:	2014      	movs	r0, #20
   bc02a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bc02e:	9307      	str	r3, [sp, #28]
   bc030:	f7f8 f831 	bl	b4096 <_Znwj>
   bc034:	4601      	mov	r1, r0
   bc036:	b118      	cbz	r0, bc040 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc038:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc03c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc03e:	7044      	strb	r4, [r0, #1]
   bc040:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc042:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bc044:	f7ff ff16 	bl	bbe74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bc048:	4b1e      	ldr	r3, [pc, #120]	; (bc0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bc04a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bc04c:	2008      	movs	r0, #8
   bc04e:	f7f8 f822 	bl	b4096 <_Znwj>
   bc052:	4604      	mov	r4, r0
   bc054:	b110      	cbz	r0, bc05c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bc056:	a903      	add	r1, sp, #12
   bc058:	f7ff fec8 	bl	bbdec <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc05c:	9600      	str	r6, [sp, #0]
   bc05e:	fa5f f38a 	uxtb.w	r3, sl
   bc062:	464a      	mov	r2, r9
   bc064:	4641      	mov	r1, r8
   bc066:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bc068:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc06a:	f7ff fbbf 	bl	bb7ec <spark_send_event>
   bc06e:	b9b8      	cbnz	r0, bc0a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bc070:	9b03      	ldr	r3, [sp, #12]
   bc072:	785b      	ldrb	r3, [r3, #1]
   bc074:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bc078:	b993      	cbnz	r3, bc0a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bc07a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bc07e:	a905      	add	r1, sp, #20
   bc080:	a803      	add	r0, sp, #12
   bc082:	9205      	str	r2, [sp, #20]
   bc084:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc088:	f7ff ff18 	bl	bbebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc08c:	a805      	add	r0, sp, #20
   bc08e:	f7ff fe42 	bl	bbd16 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bc092:	a805      	add	r0, sp, #20
   bc094:	9909      	ldr	r1, [sp, #36]	; 0x24
   bc096:	f7ff feb2 	bl	bbdfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bc09a:	a806      	add	r0, sp, #24
   bc09c:	f7fa faa0 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc0a0:	a903      	add	r1, sp, #12
   bc0a2:	a805      	add	r0, sp, #20
   bc0a4:	f7ff fea2 	bl	bbdec <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc0a8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc0aa:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc0ac:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bc0ae:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bc0b0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc0b2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bc0b4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bc0b6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bc0b8:	f7fa fa92 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc0bc:	a804      	add	r0, sp, #16
   bc0be:	f7fa fa8f 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bc0c2:	e7ab      	b.n	bc01c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bc0c4:	000bc145 	.word	0x000bc145

000bc0c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bc0c8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc0cc:	4605      	mov	r5, r0
	switch (__op)
   bc0ce:	d103      	bne.n	bc0d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc0d0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc0d2:	6003      	str	r3, [r0, #0]
      }
   bc0d4:	2000      	movs	r0, #0
   bc0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bc0d8:	2a02      	cmp	r2, #2
   bc0da:	d010      	beq.n	bc0fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bc0dc:	2a03      	cmp	r2, #3
   bc0de:	d1f9      	bne.n	bc0d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc0e0:	6804      	ldr	r4, [r0, #0]
   bc0e2:	2c00      	cmp	r4, #0
   bc0e4:	d0f6      	beq.n	bc0d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bc0e6:	f104 0010 	add.w	r0, r4, #16
   bc0ea:	f7ff fe14 	bl	bbd16 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc0ee:	4620      	mov	r0, r4
   bc0f0:	f7f8 fe4f 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc0f4:	2118      	movs	r1, #24
   bc0f6:	4620      	mov	r0, r4
   bc0f8:	f7f7 ffd1 	bl	b409e <_ZdlPvj>
   bc0fc:	e7ea      	b.n	bc0d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc0fe:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bc100:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc102:	f7f7 ffc8 	bl	b4096 <_Znwj>
   bc106:	4604      	mov	r4, r0
   bc108:	b150      	cbz	r0, bc120 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bc10a:	4631      	mov	r1, r6
   bc10c:	f7ff fec6 	bl	bbe9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc110:	6930      	ldr	r0, [r6, #16]
   bc112:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc116:	b108      	cbz	r0, bc11c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bc118:	f003 fbf4 	bl	bf904 <strdup>
        type_(type) {
   bc11c:	6120      	str	r0, [r4, #16]
   bc11e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bc120:	602c      	str	r4, [r5, #0]
	}
   bc122:	e7d7      	b.n	bc0d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bc124 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bc124:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc126:	2300      	movs	r3, #0
   bc128:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc12a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc12c:	4604      	mov	r4, r0
   bc12e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc130:	b12b      	cbz	r3, bc13e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc132:	2202      	movs	r2, #2
   bc134:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc136:	68eb      	ldr	r3, [r5, #12]
   bc138:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc13a:	68ab      	ldr	r3, [r5, #8]
   bc13c:	60a3      	str	r3, [r4, #8]
    }
   bc13e:	4620      	mov	r0, r4
   bc140:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc144 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bc144:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc146:	b089      	sub	sp, #36	; 0x24
   bc148:	4604      	mov	r4, r0
   bc14a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bc14c:	a801      	add	r0, sp, #4
   bc14e:	4611      	mov	r1, r2
   bc150:	f7ff fe55 	bl	bbdfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bc154:	b1a4      	cbz	r4, bc180 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bc156:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc158:	b11d      	cbz	r5, bc162 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bc15a:	4628      	mov	r0, r5
   bc15c:	f003 fbd2 	bl	bf904 <strdup>
   bc160:	4605      	mov	r5, r0
   bc162:	a801      	add	r0, sp, #4
   bc164:	a903      	add	r1, sp, #12
        type_(type) {
   bc166:	9503      	str	r5, [sp, #12]
   bc168:	f8ad 4010 	strh.w	r4, [sp, #16]
   bc16c:	f7ff fea6 	bl	bbebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc170:	a803      	add	r0, sp, #12
   bc172:	f7ff fdd0 	bl	bbd16 <_ZN8particle5ErrorD1Ev>
   bc176:	a802      	add	r0, sp, #8
   bc178:	f7fa fa32 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc17c:	b009      	add	sp, #36	; 0x24
   bc17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bc180:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc182:	2301      	movs	r3, #1
   bc184:	e8d5 2f4f 	ldrexb	r2, [r5]
   bc188:	2a00      	cmp	r2, #0
   bc18a:	d103      	bne.n	bc194 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bc18c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bc190:	2900      	cmp	r1, #0
   bc192:	d1f7      	bne.n	bc184 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bc194:	d1ef      	bne.n	bc176 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bc196:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bc198:	f3bf 8f5b 	dmb	ish
   bc19c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc19e:	1d2b      	adds	r3, r5, #4
   bc1a0:	f3bf 8f5b 	dmb	ish
   bc1a4:	e853 6f00 	ldrex	r6, [r3]
   bc1a8:	e843 4200 	strex	r2, r4, [r3]
   bc1ac:	2a00      	cmp	r2, #0
   bc1ae:	d1f9      	bne.n	bc1a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bc1b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc1b4:	2e00      	cmp	r6, #0
   bc1b6:	d0de      	beq.n	bc176 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bc1b8:	4620      	mov	r0, r4
   bc1ba:	f7ff fa95 	bl	bb6e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc1be:	4607      	mov	r7, r0
   bc1c0:	b160      	cbz	r0, bc1dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc1c2:	f105 010c 	add.w	r1, r5, #12
   bc1c6:	4630      	mov	r0, r6
   bc1c8:	f7ff fe44 	bl	bbe54 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bc1cc:	4630      	mov	r0, r6
   bc1ce:	f7f8 fde0 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc1d2:	2110      	movs	r1, #16
   bc1d4:	4630      	mov	r0, r6
   bc1d6:	f7f7 ff62 	bl	b409e <_ZdlPvj>
   bc1da:	e7cc      	b.n	bc176 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc1dc:	4631      	mov	r1, r6
   bc1de:	a803      	add	r0, sp, #12
   bc1e0:	f7ff ffa0 	bl	bc124 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc1e4:	7b2b      	ldrb	r3, [r5, #12]
   bc1e6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc1ea:	2010      	movs	r0, #16
   bc1ec:	f7f7 ff53 	bl	b4096 <_Znwj>
   bc1f0:	4605      	mov	r5, r0
   bc1f2:	b1d0      	cbz	r0, bc22a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bc1f4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc1f6:	2014      	movs	r0, #20
   bc1f8:	f7f7 ff4d 	bl	b4096 <_Znwj>
   bc1fc:	4604      	mov	r4, r0
   bc1fe:	b178      	cbz	r0, bc220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bc200:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc202:	4601      	mov	r1, r0
   bc204:	a803      	add	r0, sp, #12
   bc206:	f7fb fc28 	bl	b7a5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc20a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc20c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc20e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc210:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bc212:	9205      	str	r2, [sp, #20]
   bc214:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc216:	60e3      	str	r3, [r4, #12]
   bc218:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bc21c:	9206      	str	r2, [sp, #24]
   bc21e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bc220:	4b06      	ldr	r3, [pc, #24]	; (bc23c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bc222:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc224:	4b06      	ldr	r3, [pc, #24]	; (bc240 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc226:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc228:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bc22a:	a803      	add	r0, sp, #12
   bc22c:	f7f8 fdb1 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc230:	2200      	movs	r2, #0
   bc232:	4629      	mov	r1, r5
   bc234:	4803      	ldr	r0, [pc, #12]	; (bc244 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bc236:	f7ff fa5f 	bl	bb6f8 <application_thread_invoke>
   bc23a:	e7c7      	b.n	bc1cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bc23c:	000bbe67 	.word	0x000bbe67
   bc240:	000bc249 	.word	0x000bc249
   bc244:	000bba23 	.word	0x000bba23

000bc248 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bc248:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc24a:	b570      	push	{r4, r5, r6, lr}
   bc24c:	4604      	mov	r4, r0
	switch (__op)
   bc24e:	d103      	bne.n	bc258 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc250:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc252:	6003      	str	r3, [r0, #0]
      }
   bc254:	2000      	movs	r0, #0
   bc256:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bc258:	2a02      	cmp	r2, #2
   bc25a:	d00c      	beq.n	bc276 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bc25c:	2a03      	cmp	r2, #3
   bc25e:	d1f9      	bne.n	bc254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc260:	6804      	ldr	r4, [r0, #0]
   bc262:	2c00      	cmp	r4, #0
   bc264:	d0f6      	beq.n	bc254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bc266:	4620      	mov	r0, r4
   bc268:	f7f8 fd93 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc26c:	2114      	movs	r1, #20
   bc26e:	4620      	mov	r0, r4
   bc270:	f7f7 ff15 	bl	b409e <_ZdlPvj>
   bc274:	e7ee      	b.n	bc254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc276:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bc278:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc27a:	f7f7 ff0c 	bl	b4096 <_Znwj>
   bc27e:	4605      	mov	r5, r0
   bc280:	b120      	cbz	r0, bc28c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bc282:	4631      	mov	r1, r6
   bc284:	f7ff ff4e 	bl	bc124 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bc288:	7c33      	ldrb	r3, [r6, #16]
   bc28a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bc28c:	6025      	str	r5, [r4, #0]
	}
   bc28e:	e7e1      	b.n	bc254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bc290 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bc290:	2200      	movs	r2, #0
   bc292:	6840      	ldr	r0, [r0, #4]
   bc294:	4611      	mov	r1, r2
   bc296:	f7ff bb19 	b.w	bb8cc <network_listening>

000bc29a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc29a:	2200      	movs	r2, #0
   bc29c:	6840      	ldr	r0, [r0, #4]
   bc29e:	4611      	mov	r1, r2
   bc2a0:	f7ff bb24 	b.w	bb8ec <network_get_listen_timeout>

000bc2a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc2a4:	6840      	ldr	r0, [r0, #4]
   bc2a6:	2200      	movs	r2, #0
   bc2a8:	f7ff bb18 	b.w	bb8dc <network_set_listen_timeout>

000bc2ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc2ac:	6840      	ldr	r0, [r0, #4]
   bc2ae:	2200      	movs	r2, #0
   bc2b0:	f081 0101 	eor.w	r1, r1, #1
   bc2b4:	f7ff bb02 	b.w	bb8bc <network_listen>

000bc2b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc2b8:	2300      	movs	r3, #0
   bc2ba:	6840      	ldr	r0, [r0, #4]
   bc2bc:	461a      	mov	r2, r3
   bc2be:	4619      	mov	r1, r3
   bc2c0:	f7ff baf4 	b.w	bb8ac <network_off>

000bc2c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc2c4:	2300      	movs	r3, #0
   bc2c6:	6840      	ldr	r0, [r0, #4]
   bc2c8:	461a      	mov	r2, r3
   bc2ca:	4619      	mov	r1, r3
   bc2cc:	f7ff bae6 	b.w	bb89c <network_on>

000bc2d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bc2d0:	2200      	movs	r2, #0
   bc2d2:	6840      	ldr	r0, [r0, #4]
   bc2d4:	4611      	mov	r1, r2
   bc2d6:	f7ff bad9 	b.w	bb88c <network_ready>

000bc2da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc2da:	2200      	movs	r2, #0
   bc2dc:	6840      	ldr	r0, [r0, #4]
   bc2de:	4611      	mov	r1, r2
   bc2e0:	f7ff bac4 	b.w	bb86c <network_connecting>

000bc2e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc2e4:	6840      	ldr	r0, [r0, #4]
   bc2e6:	2200      	movs	r2, #0
   bc2e8:	2102      	movs	r1, #2
   bc2ea:	f7ff bac7 	b.w	bb87c <network_disconnect>

000bc2ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc2ee:	2300      	movs	r3, #0
   bc2f0:	6840      	ldr	r0, [r0, #4]
   bc2f2:	461a      	mov	r2, r3
   bc2f4:	f7ff bab2 	b.w	bb85c <network_connect>

000bc2f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bc2f8:	4b02      	ldr	r3, [pc, #8]	; (bc304 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bc2fa:	2203      	movs	r2, #3
   bc2fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bc2fe:	4a02      	ldr	r2, [pc, #8]	; (bc308 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bc300:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bc302:	4770      	bx	lr
   bc304:	2003e5b4 	.word	0x2003e5b4
   bc308:	000c14ac 	.word	0x000c14ac

000bc30c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bc30c:	6800      	ldr	r0, [r0, #0]
   bc30e:	f000 b8e7 	b.w	bc4e0 <_ZN7TwoWire4lockEv>

000bc312 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bc312:	b510      	push	{r4, lr}
   bc314:	4604      	mov	r4, r0
      lock_(_lock) {
   bc316:	6001      	str	r1, [r0, #0]
   bc318:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bc31a:	b10a      	cbz	r2, bc320 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bc31c:	f7ff fff6 	bl	bc30c <_ZN9FuelGauge4lockEv>
}
   bc320:	4620      	mov	r0, r4
   bc322:	bd10      	pop	{r4, pc}

000bc324 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bc324:	b513      	push	{r0, r1, r4, lr}
   bc326:	4604      	mov	r4, r0
   bc328:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bc32a:	f002 fcad 	bl	bec88 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bc32e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bc330:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bc332:	4620      	mov	r0, r4
   bc334:	f7ff ffed 	bl	bc312 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bc338:	4620      	mov	r0, r4
   bc33a:	b002      	add	sp, #8
   bc33c:	bd10      	pop	{r4, pc}

000bc33e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bc33e:	6800      	ldr	r0, [r0, #0]
   bc340:	f000 b8d7 	b.w	bc4f2 <_ZN7TwoWire6unlockEv>

000bc344 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bc344:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bc348:	4604      	mov	r4, r0
   bc34a:	461d      	mov	r5, r3
   bc34c:	460f      	mov	r7, r1
   bc34e:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bc350:	f7ff ffdc 	bl	bc30c <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bc354:	2236      	movs	r2, #54	; 0x36
   bc356:	2300      	movs	r3, #0
   bc358:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bc35c:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bc35e:	f04f 0801 	mov.w	r8, #1
   bc362:	230a      	movs	r3, #10
   bc364:	4669      	mov	r1, sp
   bc366:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bc36a:	f000 f89d 	bl	bc4a8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bc36e:	6820      	ldr	r0, [r4, #0]
   bc370:	6803      	ldr	r3, [r0, #0]
   bc372:	4639      	mov	r1, r7
   bc374:	689b      	ldr	r3, [r3, #8]
   bc376:	4798      	blx	r3
    i2c_.write(MSB);
   bc378:	6820      	ldr	r0, [r4, #0]
   bc37a:	6803      	ldr	r3, [r0, #0]
   bc37c:	4631      	mov	r1, r6
   bc37e:	689b      	ldr	r3, [r3, #8]
   bc380:	4798      	blx	r3
    i2c_.write(LSB);
   bc382:	6820      	ldr	r0, [r4, #0]
   bc384:	6803      	ldr	r3, [r0, #0]
   bc386:	4629      	mov	r1, r5
   bc388:	689b      	ldr	r3, [r3, #8]
   bc38a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bc38c:	4641      	mov	r1, r8
   bc38e:	6820      	ldr	r0, [r4, #0]
   bc390:	f000 f8a2 	bl	bc4d8 <_ZN7TwoWire15endTransmissionEh>
   bc394:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bc396:	4620      	mov	r0, r4
   bc398:	bf0c      	ite	eq
   bc39a:	2500      	moveq	r5, #0
   bc39c:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bc3a0:	f7ff ffcd 	bl	bc33e <_ZN9FuelGauge6unlockEv>
}
   bc3a4:	4628      	mov	r0, r5
   bc3a6:	b004      	add	sp, #16
   bc3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc3ac <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bc3ac:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bc3ae:	2240      	movs	r2, #64	; 0x40
   bc3b0:	2300      	movs	r3, #0
   bc3b2:	2106      	movs	r1, #6
   bc3b4:	f7ff ffc6 	bl	bc344 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bc3b8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bc3bc:	bd08      	pop	{r3, pc}

000bc3be <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bc3be:	4770      	bx	lr

000bc3c0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bc3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc3c2:	4606      	mov	r6, r0
   bc3c4:	4615      	mov	r5, r2
   bc3c6:	460c      	mov	r4, r1
   bc3c8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bc3ca:	42bc      	cmp	r4, r7
   bc3cc:	d006      	beq.n	bc3dc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bc3ce:	6833      	ldr	r3, [r6, #0]
   bc3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
   bc3d4:	689b      	ldr	r3, [r3, #8]
   bc3d6:	4630      	mov	r0, r6
   bc3d8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bc3da:	e7f6      	b.n	bc3ca <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bc3dc:	4628      	mov	r0, r5
   bc3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc3e0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bc3e0:	7c00      	ldrb	r0, [r0, #16]
   bc3e2:	2200      	movs	r2, #0
   bc3e4:	f7fe bf7e 	b.w	bb2e4 <hal_i2c_write>

000bc3e8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bc3e8:	7c00      	ldrb	r0, [r0, #16]
   bc3ea:	2100      	movs	r1, #0
   bc3ec:	f7fe bf82 	b.w	bb2f4 <hal_i2c_available>

000bc3f0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bc3f0:	7c00      	ldrb	r0, [r0, #16]
   bc3f2:	2100      	movs	r1, #0
   bc3f4:	f7fe bf86 	b.w	bb304 <hal_i2c_read>

000bc3f8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bc3f8:	7c00      	ldrb	r0, [r0, #16]
   bc3fa:	2100      	movs	r1, #0
   bc3fc:	f7fe bf8a 	b.w	bb314 <hal_i2c_peek>

000bc400 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bc400:	7c00      	ldrb	r0, [r0, #16]
   bc402:	2100      	movs	r1, #0
   bc404:	f7fe bf8e 	b.w	bb324 <hal_i2c_flush>

000bc408 <_ZN7TwoWireD0Ev>:
   bc408:	b510      	push	{r4, lr}
   bc40a:	2114      	movs	r1, #20
   bc40c:	4604      	mov	r4, r0
   bc40e:	f7f7 fe46 	bl	b409e <_ZdlPvj>
   bc412:	4620      	mov	r0, r4
   bc414:	bd10      	pop	{r4, pc}
	...

000bc418 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bc418:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bc41a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc41e:	4604      	mov	r4, r0
   bc420:	4608      	mov	r0, r1
   bc422:	2100      	movs	r1, #0
   bc424:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc428:	4b03      	ldr	r3, [pc, #12]	; (bc438 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bc42a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bc42c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bc42e:	4611      	mov	r1, r2
   bc430:	f7fe ff88 	bl	bb344 <hal_i2c_init>
}
   bc434:	4620      	mov	r0, r4
   bc436:	bd10      	pop	{r4, pc}
   bc438:	000c14e8 	.word	0x000c14e8

000bc43c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bc43c:	2300      	movs	r3, #0
   bc43e:	7c00      	ldrb	r0, [r0, #16]
   bc440:	461a      	mov	r2, r3
   bc442:	4619      	mov	r1, r3
   bc444:	f7fe bf36 	b.w	bb2b4 <hal_i2c_begin>

000bc448 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bc448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bc44a:	2200      	movs	r2, #0
   bc44c:	2314      	movs	r3, #20
   bc44e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bc452:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bc456:	780b      	ldrb	r3, [r1, #0]
   bc458:	f88d 3008 	strb.w	r3, [sp, #8]
   bc45c:	684b      	ldr	r3, [r1, #4]
   bc45e:	9303      	str	r3, [sp, #12]
   bc460:	68cb      	ldr	r3, [r1, #12]
   bc462:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bc464:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bc466:	7a0b      	ldrb	r3, [r1, #8]
   bc468:	9305      	str	r3, [sp, #20]
   bc46a:	a901      	add	r1, sp, #4
   bc46c:	f7fe ff82 	bl	bb374 <hal_i2c_request_ex>
}
   bc470:	b007      	add	sp, #28
   bc472:	f85d fb04 	ldr.w	pc, [sp], #4

000bc476 <_ZN7TwoWire11requestFromEhjh>:
{
   bc476:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bc478:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bc47a:	f88d 1000 	strb.w	r1, [sp]
   bc47e:	f04f 0164 	mov.w	r1, #100	; 0x64
   bc482:	9103      	str	r1, [sp, #12]
   bc484:	bf18      	it	ne
   bc486:	2301      	movne	r3, #1
   bc488:	4669      	mov	r1, sp
    size_ = size;
   bc48a:	9201      	str	r2, [sp, #4]
   bc48c:	f88d 3008 	strb.w	r3, [sp, #8]
   bc490:	f7ff ffda 	bl	bc448 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bc494:	b005      	add	sp, #20
   bc496:	f85d fb04 	ldr.w	pc, [sp], #4

000bc49a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bc49a:	7c00      	ldrb	r0, [r0, #16]
   bc49c:	2200      	movs	r2, #0
   bc49e:	f7fe bf11 	b.w	bb2c4 <hal_i2c_begin_transmission>

000bc4a2 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bc4a2:	b2c9      	uxtb	r1, r1
   bc4a4:	f7ff bff9 	b.w	bc49a <_ZN7TwoWire17beginTransmissionEh>

000bc4a8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bc4a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bc4aa:	2300      	movs	r3, #0
   bc4ac:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bc4b0:	684a      	ldr	r2, [r1, #4]
   bc4b2:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bc4b4:	2314      	movs	r3, #20
    };
   bc4b6:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bc4b8:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bc4bc:	780b      	ldrb	r3, [r1, #0]
    };
   bc4be:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bc4c0:	7a0a      	ldrb	r2, [r1, #8]
   bc4c2:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bc4c4:	7c00      	ldrb	r0, [r0, #16]
    };
   bc4c6:	f88d 3008 	strb.w	r3, [sp, #8]
   bc4ca:	aa01      	add	r2, sp, #4
   bc4cc:	4619      	mov	r1, r3
   bc4ce:	f7fe fef9 	bl	bb2c4 <hal_i2c_begin_transmission>
}
   bc4d2:	b007      	add	sp, #28
   bc4d4:	f85d fb04 	ldr.w	pc, [sp], #4

000bc4d8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bc4d8:	7c00      	ldrb	r0, [r0, #16]
   bc4da:	2200      	movs	r2, #0
   bc4dc:	f7fe befa 	b.w	bb2d4 <hal_i2c_end_transmission>

000bc4e0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bc4e0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bc4e2:	2100      	movs	r1, #0
   bc4e4:	7c00      	ldrb	r0, [r0, #16]
   bc4e6:	f7fe ff35 	bl	bb354 <hal_i2c_lock>
}
   bc4ea:	fab0 f080 	clz	r0, r0
   bc4ee:	0940      	lsrs	r0, r0, #5
   bc4f0:	bd08      	pop	{r3, pc}

000bc4f2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bc4f2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bc4f4:	2100      	movs	r1, #0
   bc4f6:	7c00      	ldrb	r0, [r0, #16]
   bc4f8:	f7fe ff34 	bl	bb364 <hal_i2c_unlock>
}
   bc4fc:	fab0 f080 	clz	r0, r0
   bc500:	0940      	lsrs	r0, r0, #5
   bc502:	bd08      	pop	{r3, pc}

000bc504 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bc504:	4700      	bx	r0
	...

000bc508 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bc508:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bc50c:	2400      	movs	r4, #0
{
   bc50e:	461d      	mov	r5, r3
   bc510:	460f      	mov	r7, r1
   bc512:	4690      	mov	r8, r2
   bc514:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bc516:	f7fe febd 	bl	bb294 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bc51a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc51c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bc520:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc524:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bc528:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bc52c:	bfa2      	ittt	ge
   bc52e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bc532:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bc536:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc538:	4907      	ldr	r1, [pc, #28]	; (bc558 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bc53a:	9400      	str	r4, [sp, #0]
   bc53c:	4643      	mov	r3, r8
   bc53e:	463a      	mov	r2, r7
   bc540:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bc542:	bfa8      	it	ge
   bc544:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc548:	f7fe fe9c 	bl	bb284 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bc54c:	fab0 f080 	clz	r0, r0
   bc550:	0940      	lsrs	r0, r0, #5
   bc552:	b004      	add	sp, #16
   bc554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc558:	000bc505 	.word	0x000bc505

000bc55c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bc55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc55e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bc560:	f7fe fe98 	bl	bb294 <HAL_Interrupts_Detach>
   bc564:	4605      	mov	r5, r0
   bc566:	b970      	cbnz	r0, bc586 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bc568:	4f08      	ldr	r7, [pc, #32]	; (bc58c <_Z15detachInterruptt+0x30>)
   bc56a:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bc56e:	b146      	cbz	r6, bc582 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bc570:	4630      	mov	r0, r6
   bc572:	f7f8 fc0e 	bl	b4d92 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bc576:	2110      	movs	r1, #16
   bc578:	4630      	mov	r0, r6
   bc57a:	f7f7 fd90 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bc57e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bc582:	2001      	movs	r0, #1
   bc584:	e000      	b.n	bc588 <_Z15detachInterruptt+0x2c>
        return false;
   bc586:	2000      	movs	r0, #0
    }
    return true;
}
   bc588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc58a:	bf00      	nop
   bc58c:	2003e5bc 	.word	0x2003e5bc

000bc590 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bc590:	4770      	bx	lr

000bc592 <_ZN9IPAddressD0Ev>:
   bc592:	b510      	push	{r4, lr}
   bc594:	2118      	movs	r1, #24
   bc596:	4604      	mov	r4, r0
   bc598:	f7f7 fd81 	bl	b409e <_ZdlPvj>
   bc59c:	4620      	mov	r0, r4
   bc59e:	bd10      	pop	{r4, pc}

000bc5a0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc5a2:	7d03      	ldrb	r3, [r0, #20]
   bc5a4:	2b06      	cmp	r3, #6
{
   bc5a6:	b08d      	sub	sp, #52	; 0x34
   bc5a8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc5aa:	f100 0704 	add.w	r7, r0, #4
   bc5ae:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc5b2:	d012      	beq.n	bc5da <_ZNK9IPAddress7printToER5Print+0x3a>
   bc5b4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc5b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc5bc:	220a      	movs	r2, #10
   bc5be:	4630      	mov	r0, r6
   bc5c0:	f001 fb0d 	bl	bdbde <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc5c4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc5c6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc5c8:	d019      	beq.n	bc5fe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc5ca:	2c00      	cmp	r4, #0
   bc5cc:	d0f4      	beq.n	bc5b8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc5ce:	212e      	movs	r1, #46	; 0x2e
   bc5d0:	4630      	mov	r0, r6
   bc5d2:	f001 faf5 	bl	bdbc0 <_ZN5Print5printEc>
   bc5d6:	4404      	add	r4, r0
   bc5d8:	e7ee      	b.n	bc5b8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc5da:	232f      	movs	r3, #47	; 0x2f
   bc5dc:	466a      	mov	r2, sp
   bc5de:	4639      	mov	r1, r7
   bc5e0:	200a      	movs	r0, #10
		buf[0] = 0;
   bc5e2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc5e6:	f7fe fecd 	bl	bb384 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc5ea:	4668      	mov	r0, sp
   bc5ec:	f003 f9a7 	bl	bf93e <strlen>
   bc5f0:	6833      	ldr	r3, [r6, #0]
   bc5f2:	4602      	mov	r2, r0
   bc5f4:	68db      	ldr	r3, [r3, #12]
   bc5f6:	4669      	mov	r1, sp
   bc5f8:	4630      	mov	r0, r6
   bc5fa:	4798      	blx	r3
   bc5fc:	4604      	mov	r4, r0
    }
    return n;
}
   bc5fe:	4620      	mov	r0, r4
   bc600:	b00d      	add	sp, #52	; 0x34
   bc602:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc604 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc604:	b510      	push	{r4, lr}
   bc606:	4b05      	ldr	r3, [pc, #20]	; (bc61c <_ZN9IPAddressC1Ev+0x18>)
   bc608:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bc60a:	2211      	movs	r2, #17
   bc60c:	f840 3b04 	str.w	r3, [r0], #4
   bc610:	2100      	movs	r1, #0
   bc612:	f003 f8d9 	bl	bf7c8 <memset>
}
   bc616:	4620      	mov	r0, r4
   bc618:	bd10      	pop	{r4, pc}
   bc61a:	bf00      	nop
   bc61c:	000c1510 	.word	0x000c1510

000bc620 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc620:	4603      	mov	r3, r0
   bc622:	4a07      	ldr	r2, [pc, #28]	; (bc640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc624:	b510      	push	{r4, lr}
   bc626:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc62a:	f101 0210 	add.w	r2, r1, #16
   bc62e:	f851 4b04 	ldr.w	r4, [r1], #4
   bc632:	f843 4b04 	str.w	r4, [r3], #4
   bc636:	4291      	cmp	r1, r2
   bc638:	d1f9      	bne.n	bc62e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc63a:	780a      	ldrb	r2, [r1, #0]
   bc63c:	701a      	strb	r2, [r3, #0]
}
   bc63e:	bd10      	pop	{r4, pc}
   bc640:	000c1510 	.word	0x000c1510

000bc644 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc644:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc646:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc64a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc64e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc652:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc656:	2304      	movs	r3, #4
   bc658:	6041      	str	r1, [r0, #4]
   bc65a:	7503      	strb	r3, [r0, #20]
}
   bc65c:	bd10      	pop	{r4, pc}
	...

000bc660 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc660:	b507      	push	{r0, r1, r2, lr}
   bc662:	4b06      	ldr	r3, [pc, #24]	; (bc67c <_ZN9IPAddressC1EPKh+0x1c>)
   bc664:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc666:	78cb      	ldrb	r3, [r1, #3]
   bc668:	9300      	str	r3, [sp, #0]
   bc66a:	788b      	ldrb	r3, [r1, #2]
   bc66c:	784a      	ldrb	r2, [r1, #1]
   bc66e:	7809      	ldrb	r1, [r1, #0]
   bc670:	f7ff ffe8 	bl	bc644 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc674:	b003      	add	sp, #12
   bc676:	f85d fb04 	ldr.w	pc, [sp], #4
   bc67a:	bf00      	nop
   bc67c:	000c1510 	.word	0x000c1510

000bc680 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bc680:	f100 0310 	add.w	r3, r0, #16
   bc684:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bc686:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bc68a:	2901      	cmp	r1, #1
   bc68c:	4618      	mov	r0, r3
   bc68e:	d108      	bne.n	bc6a2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bc690:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bc694:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bc698:	3a01      	subs	r2, #1
   bc69a:	f103 0310 	add.w	r3, r3, #16
   bc69e:	d1f2      	bne.n	bc686 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bc6a0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bc6a2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bc6a4:	bf04      	itt	eq
   bc6a6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bc6aa:	1852      	addeq	r2, r2, r1
   bc6ac:	e7f4      	b.n	bc698 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bc6ae <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bc6ae:	b40e      	push	{r1, r2, r3}
   bc6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc6b2:	b088      	sub	sp, #32
   bc6b4:	af00      	add	r7, sp, #0
   bc6b6:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc6ba:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bc6bc:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc6c0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bc6c2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc6c4:	462b      	mov	r3, r5
   bc6c6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bc6c8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc6ca:	f7ff f957 	bl	bb97c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bc6ce:	280f      	cmp	r0, #15
   bc6d0:	687a      	ldr	r2, [r7, #4]
   bc6d2:	d91a      	bls.n	bc70a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bc6d4:	f100 0308 	add.w	r3, r0, #8
   bc6d8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bc6dc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bc6de:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc6e2:	1c41      	adds	r1, r0, #1
   bc6e4:	462b      	mov	r3, r5
   bc6e6:	4668      	mov	r0, sp
        va_start(args, fmt);
   bc6e8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc6ea:	f7ff f947 	bl	bb97c <vsnprintf>
        if (n > 0) {
   bc6ee:	1e02      	subs	r2, r0, #0
   bc6f0:	dd04      	ble.n	bc6fc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bc6f2:	6823      	ldr	r3, [r4, #0]
   bc6f4:	4669      	mov	r1, sp
   bc6f6:	689b      	ldr	r3, [r3, #8]
   bc6f8:	4620      	mov	r0, r4
   bc6fa:	4798      	blx	r3
   bc6fc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bc6fe:	3720      	adds	r7, #32
   bc700:	46bd      	mov	sp, r7
   bc702:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bc706:	b003      	add	sp, #12
   bc708:	4770      	bx	lr
    } else if (n > 0) {
   bc70a:	2800      	cmp	r0, #0
   bc70c:	d0f7      	beq.n	bc6fe <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bc70e:	6823      	ldr	r3, [r4, #0]
   bc710:	4602      	mov	r2, r0
   bc712:	689b      	ldr	r3, [r3, #8]
   bc714:	f107 0110 	add.w	r1, r7, #16
   bc718:	4620      	mov	r0, r4
   bc71a:	4798      	blx	r3
}
   bc71c:	e7ef      	b.n	bc6fe <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bc71e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc71e:	b538      	push	{r3, r4, r5, lr}
   bc720:	680b      	ldr	r3, [r1, #0]
   bc722:	6003      	str	r3, [r0, #0]
   bc724:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bc726:	6843      	ldr	r3, [r0, #4]
   bc728:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc72a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bc72c:	d008      	beq.n	bc740 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bc72e:	b115      	cbz	r5, bc736 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bc730:	686b      	ldr	r3, [r5, #4]
   bc732:	3301      	adds	r3, #1
   bc734:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bc736:	6860      	ldr	r0, [r4, #4]
   bc738:	b108      	cbz	r0, bc73e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bc73a:	f7ff f986 	bl	bba4a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bc73e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc740:	bd38      	pop	{r3, r4, r5, pc}

000bc742 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bc742:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bc744:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bc746:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bc74a:	689b      	ldr	r3, [r3, #8]
   bc74c:	2201      	movs	r2, #1
   bc74e:	f10d 0107 	add.w	r1, sp, #7
   bc752:	4798      	blx	r3
}
   bc754:	b003      	add	sp, #12
   bc756:	f85d fb04 	ldr.w	pc, [sp], #4

000bc75a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc75a:	460b      	mov	r3, r1
   bc75c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bc75e:	2200      	movs	r2, #0
   bc760:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bc762:	e9c0 2200 	strd	r2, r2, [r0]
   bc766:	4604      	mov	r4, r0
        t_ = t;
   bc768:	6083      	str	r3, [r0, #8]
    if (t) {
   bc76a:	b90b      	cbnz	r3, bc770 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bc76c:	4620      	mov	r0, r4
   bc76e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bc770:	f7ff ffd5 	bl	bc71e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bc774:	e7fa      	b.n	bc76c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bc776 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bc776:	6883      	ldr	r3, [r0, #8]
   bc778:	b1eb      	cbz	r3, bc7b6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bc77a:	781a      	ldrb	r2, [r3, #0]
   bc77c:	2a03      	cmp	r2, #3
   bc77e:	d81a      	bhi.n	bc7b6 <_ZNK5spark9JSONValue4typeEv+0x40>
   bc780:	e8df f002 	tbb	[pc, r2]
   bc784:	1b021704 	.word	0x1b021704
   bc788:	2005      	movs	r0, #5
   bc78a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bc78c:	6802      	ldr	r2, [r0, #0]
   bc78e:	685b      	ldr	r3, [r3, #4]
   bc790:	6852      	ldr	r2, [r2, #4]
   bc792:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bc794:	282d      	cmp	r0, #45	; 0x2d
   bc796:	d012      	beq.n	bc7be <_ZNK5spark9JSONValue4typeEv+0x48>
   bc798:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc79c:	2b09      	cmp	r3, #9
   bc79e:	d90e      	bls.n	bc7be <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bc7a0:	2874      	cmp	r0, #116	; 0x74
   bc7a2:	d00e      	beq.n	bc7c2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bc7a4:	2866      	cmp	r0, #102	; 0x66
   bc7a6:	d00c      	beq.n	bc7c2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bc7a8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bc7ac:	4258      	negs	r0, r3
   bc7ae:	4158      	adcs	r0, r3
   bc7b0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bc7b2:	2006      	movs	r0, #6
   bc7b4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bc7b6:	2000      	movs	r0, #0
   bc7b8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bc7ba:	2004      	movs	r0, #4
   bc7bc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bc7be:	2003      	movs	r0, #3
   bc7c0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bc7c2:	2002      	movs	r0, #2
}
   bc7c4:	4770      	bx	lr

000bc7c6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bc7c6:	b510      	push	{r4, lr}
   bc7c8:	4604      	mov	r4, r0
    switch (type()) {
   bc7ca:	f7ff ffd4 	bl	bc776 <_ZNK5spark9JSONValue4typeEv>
   bc7ce:	2802      	cmp	r0, #2
   bc7d0:	d00e      	beq.n	bc7f0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bc7d2:	1ec3      	subs	r3, r0, #3
   bc7d4:	b2db      	uxtb	r3, r3
   bc7d6:	2b01      	cmp	r3, #1
   bc7d8:	d814      	bhi.n	bc804 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bc7da:	6822      	ldr	r2, [r4, #0]
   bc7dc:	68a3      	ldr	r3, [r4, #8]
   bc7de:	6850      	ldr	r0, [r2, #4]
   bc7e0:	685b      	ldr	r3, [r3, #4]
}
   bc7e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bc7e6:	220a      	movs	r2, #10
   bc7e8:	2100      	movs	r1, #0
   bc7ea:	4418      	add	r0, r3
   bc7ec:	f003 b998 	b.w	bfb20 <strtol>
        const char* const s = d_->json + t_->start;
   bc7f0:	6822      	ldr	r2, [r4, #0]
   bc7f2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bc7f4:	6852      	ldr	r2, [r2, #4]
   bc7f6:	685b      	ldr	r3, [r3, #4]
   bc7f8:	5cd0      	ldrb	r0, [r2, r3]
   bc7fa:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bc7fe:	4258      	negs	r0, r3
   bc800:	4158      	adcs	r0, r3
}
   bc802:	bd10      	pop	{r4, pc}
    switch (type()) {
   bc804:	2000      	movs	r0, #0
   bc806:	e7fc      	b.n	bc802 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bc808 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc808:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bc80a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bc80c:	e9c0 3300 	strd	r3, r3, [r0]
   bc810:	4604      	mov	r4, r0
        n_(0) {
   bc812:	480e      	ldr	r0, [pc, #56]	; (bc84c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bc814:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bc818:	b1a9      	cbz	r1, bc846 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bc81a:	780b      	ldrb	r3, [r1, #0]
   bc81c:	2b03      	cmp	r3, #3
   bc81e:	d006      	beq.n	bc82e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bc820:	b98b      	cbnz	r3, bc846 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bc822:	6813      	ldr	r3, [r2, #0]
   bc824:	6858      	ldr	r0, [r3, #4]
   bc826:	684b      	ldr	r3, [r1, #4]
   bc828:	5cc3      	ldrb	r3, [r0, r3]
   bc82a:	2b6e      	cmp	r3, #110	; 0x6e
   bc82c:	d007      	beq.n	bc83e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bc82e:	6813      	ldr	r3, [r2, #0]
   bc830:	684d      	ldr	r5, [r1, #4]
   bc832:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bc834:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bc836:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bc838:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bc83a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bc83c:	60e3      	str	r3, [r4, #12]
   bc83e:	4611      	mov	r1, r2
   bc840:	4620      	mov	r0, r4
   bc842:	f7ff ff6c 	bl	bc71e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bc846:	4620      	mov	r0, r4
   bc848:	bd38      	pop	{r3, r4, r5, pc}
   bc84a:	bf00      	nop
   bc84c:	000c1579 	.word	0x000c1579

000bc850 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc850:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bc852:	2500      	movs	r5, #0
   bc854:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bc856:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bc85a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bc85e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc862:	4604      	mov	r4, r0
   bc864:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bc866:	b14b      	cbz	r3, bc87c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bc868:	781a      	ldrb	r2, [r3, #0]
   bc86a:	2a01      	cmp	r2, #1
   bc86c:	d106      	bne.n	bc87c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bc86e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bc872:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bc874:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bc876:	6143      	str	r3, [r0, #20]
   bc878:	f7ff ff51 	bl	bc71e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bc87c:	4620      	mov	r0, r4
   bc87e:	bd38      	pop	{r3, r4, r5, pc}

000bc880 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bc880:	b510      	push	{r4, lr}
    if (!n_) {
   bc882:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bc884:	4604      	mov	r4, r0
    if (!n_) {
   bc886:	b163      	cbz	r3, bc8a2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bc888:	6880      	ldr	r0, [r0, #8]
   bc88a:	60e0      	str	r0, [r4, #12]
    --n_;
   bc88c:	3b01      	subs	r3, #1
    ++t_;
   bc88e:	3010      	adds	r0, #16
   bc890:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bc892:	6120      	str	r0, [r4, #16]
    --n_;
   bc894:	6163      	str	r3, [r4, #20]
    if (n_) {
   bc896:	b113      	cbz	r3, bc89e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bc898:	f7ff fef2 	bl	bc680 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bc89c:	60a0      	str	r0, [r4, #8]
    return true;
   bc89e:	2001      	movs	r0, #1
   bc8a0:	e000      	b.n	bc8a4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bc8a2:	4618      	mov	r0, r3
}
   bc8a4:	bd10      	pop	{r4, pc}

000bc8a6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bc8a6:	b510      	push	{r4, lr}
    write('}');
   bc8a8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bc8aa:	4604      	mov	r4, r0
    write('}');
   bc8ac:	f7ff ff49 	bl	bc742 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bc8b0:	2301      	movs	r3, #1
   bc8b2:	7123      	strb	r3, [r4, #4]
}
   bc8b4:	4620      	mov	r0, r4
   bc8b6:	bd10      	pop	{r4, pc}

000bc8b8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bc8b8:	b508      	push	{r3, lr}
    switch (state_) {
   bc8ba:	7903      	ldrb	r3, [r0, #4]
   bc8bc:	2b01      	cmp	r3, #1
   bc8be:	d002      	beq.n	bc8c6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bc8c0:	2b02      	cmp	r3, #2
   bc8c2:	d004      	beq.n	bc8ce <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bc8c4:	bd08      	pop	{r3, pc}
        write(',');
   bc8c6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bc8c8:	f7ff ff3b 	bl	bc742 <_ZN5spark10JSONWriter5writeEc>
}
   bc8cc:	e7fa      	b.n	bc8c4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bc8ce:	213a      	movs	r1, #58	; 0x3a
   bc8d0:	e7fa      	b.n	bc8c8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bc8d2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bc8d2:	b510      	push	{r4, lr}
   bc8d4:	4604      	mov	r4, r0
    writeSeparator();
   bc8d6:	f7ff ffef 	bl	bc8b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bc8da:	4620      	mov	r0, r4
   bc8dc:	217b      	movs	r1, #123	; 0x7b
   bc8de:	f7ff ff30 	bl	bc742 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bc8e2:	2300      	movs	r3, #0
   bc8e4:	7123      	strb	r3, [r4, #4]
}
   bc8e6:	4620      	mov	r0, r4
   bc8e8:	bd10      	pop	{r4, pc}
	...

000bc8ec <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bc8ec:	b513      	push	{r0, r1, r4, lr}
   bc8ee:	4604      	mov	r4, r0
   bc8f0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bc8f2:	f7ff ffe1 	bl	bc8b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bc8f6:	6823      	ldr	r3, [r4, #0]
   bc8f8:	9a01      	ldr	r2, [sp, #4]
   bc8fa:	68db      	ldr	r3, [r3, #12]
   bc8fc:	4903      	ldr	r1, [pc, #12]	; (bc90c <_ZN5spark10JSONWriter5valueEi+0x20>)
   bc8fe:	4620      	mov	r0, r4
   bc900:	4798      	blx	r3
    state_ = NEXT;
   bc902:	2301      	movs	r3, #1
}
   bc904:	4620      	mov	r0, r4
    state_ = NEXT;
   bc906:	7123      	strb	r3, [r4, #4]
}
   bc908:	b002      	add	sp, #8
   bc90a:	bd10      	pop	{r4, pc}
   bc90c:	000c0ae7 	.word	0x000c0ae7

000bc910 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bc910:	b513      	push	{r0, r1, r4, lr}
   bc912:	4604      	mov	r4, r0
   bc914:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bc916:	f7ff ffcf 	bl	bc8b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bc91a:	6823      	ldr	r3, [r4, #0]
   bc91c:	9a01      	ldr	r2, [sp, #4]
   bc91e:	68db      	ldr	r3, [r3, #12]
   bc920:	4903      	ldr	r1, [pc, #12]	; (bc930 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bc922:	4620      	mov	r0, r4
   bc924:	4798      	blx	r3
    state_ = NEXT;
   bc926:	2301      	movs	r3, #1
}
   bc928:	4620      	mov	r0, r4
    state_ = NEXT;
   bc92a:	7123      	strb	r3, [r4, #4]
}
   bc92c:	b002      	add	sp, #8
   bc92e:	bd10      	pop	{r4, pc}
   bc930:	000c0e0a 	.word	0x000c0e0a

000bc934 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bc934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc938:	460d      	mov	r5, r1
    write('"');
   bc93a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bc93c:	4690      	mov	r8, r2
   bc93e:	4604      	mov	r4, r0
    write('"');
   bc940:	f7ff feff 	bl	bc742 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bc944:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc9ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bc948:	44a8      	add	r8, r5
    const char *s = str;
   bc94a:	462f      	mov	r7, r5
    while (s != end) {
   bc94c:	4547      	cmp	r7, r8
   bc94e:	46ba      	mov	sl, r7
   bc950:	d03d      	beq.n	bc9ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bc952:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bc956:	2e22      	cmp	r6, #34	; 0x22
   bc958:	d006      	beq.n	bc968 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bc95a:	2e5c      	cmp	r6, #92	; 0x5c
   bc95c:	d004      	beq.n	bc968 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bc95e:	4630      	mov	r0, r6
   bc960:	f002 ff02 	bl	bf768 <isprint>
   bc964:	2800      	cmp	r0, #0
   bc966:	d1f1      	bne.n	bc94c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bc968:	6823      	ldr	r3, [r4, #0]
   bc96a:	ebaa 0205 	sub.w	r2, sl, r5
   bc96e:	689b      	ldr	r3, [r3, #8]
   bc970:	4629      	mov	r1, r5
   bc972:	4620      	mov	r0, r4
   bc974:	4798      	blx	r3
            write('\\');
   bc976:	215c      	movs	r1, #92	; 0x5c
   bc978:	4620      	mov	r0, r4
   bc97a:	f7ff fee2 	bl	bc742 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bc97e:	2e0d      	cmp	r6, #13
   bc980:	d80a      	bhi.n	bc998 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bc982:	2e07      	cmp	r6, #7
   bc984:	d91c      	bls.n	bc9c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bc986:	f1a6 0308 	sub.w	r3, r6, #8
   bc98a:	2b05      	cmp	r3, #5
   bc98c:	d818      	bhi.n	bc9c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bc98e:	e8df f003 	tbb	[pc, r3]
   bc992:	0f0d      	.short	0x0f0d
   bc994:	15131711 	.word	0x15131711
   bc998:	2e22      	cmp	r6, #34	; 0x22
   bc99a:	d001      	beq.n	bc9a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bc99c:	2e5c      	cmp	r6, #92	; 0x5c
   bc99e:	d10f      	bne.n	bc9c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bc9a0:	4631      	mov	r1, r6
                write('b');
   bc9a2:	4620      	mov	r0, r4
   bc9a4:	f7ff fecd 	bl	bc742 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bc9a8:	463d      	mov	r5, r7
    while (s != end) {
   bc9aa:	e7cf      	b.n	bc94c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bc9ac:	2162      	movs	r1, #98	; 0x62
   bc9ae:	e7f8      	b.n	bc9a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bc9b0:	2174      	movs	r1, #116	; 0x74
   bc9b2:	e7f6      	b.n	bc9a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bc9b4:	216e      	movs	r1, #110	; 0x6e
   bc9b6:	e7f4      	b.n	bc9a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bc9b8:	2166      	movs	r1, #102	; 0x66
   bc9ba:	e7f2      	b.n	bc9a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bc9bc:	2172      	movs	r1, #114	; 0x72
   bc9be:	e7f0      	b.n	bc9a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bc9c0:	6823      	ldr	r3, [r4, #0]
   bc9c2:	4632      	mov	r2, r6
   bc9c4:	68db      	ldr	r3, [r3, #12]
   bc9c6:	4649      	mov	r1, r9
   bc9c8:	4620      	mov	r0, r4
   bc9ca:	4798      	blx	r3
                break;
   bc9cc:	e7ec      	b.n	bc9a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bc9ce:	42bd      	cmp	r5, r7
   bc9d0:	d005      	beq.n	bc9de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bc9d2:	6823      	ldr	r3, [r4, #0]
   bc9d4:	1b7a      	subs	r2, r7, r5
   bc9d6:	689b      	ldr	r3, [r3, #8]
   bc9d8:	4629      	mov	r1, r5
   bc9da:	4620      	mov	r0, r4
   bc9dc:	4798      	blx	r3
    }
    write('"');
   bc9de:	2122      	movs	r1, #34	; 0x22
   bc9e0:	4620      	mov	r0, r4
   bc9e2:	f7ff feae 	bl	bc742 <_ZN5spark10JSONWriter5writeEc>
}
   bc9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc9ea:	bf00      	nop
   bc9ec:	000c151c 	.word	0x000c151c

000bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bc9f0:	b513      	push	{r0, r1, r4, lr}
   bc9f2:	4604      	mov	r4, r0
   bc9f4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bc9f8:	f7ff ff5e 	bl	bc8b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bc9fc:	4620      	mov	r0, r4
   bc9fe:	e9dd 2100 	ldrd	r2, r1, [sp]
   bca02:	f7ff ff97 	bl	bc934 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bca06:	2302      	movs	r3, #2
}
   bca08:	4620      	mov	r0, r4
    state_ = VALUE;
   bca0a:	7123      	strb	r3, [r4, #4]
}
   bca0c:	b002      	add	sp, #8
   bca0e:	bd10      	pop	{r4, pc}

000bca10 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bca10:	b513      	push	{r0, r1, r4, lr}
   bca12:	4604      	mov	r4, r0
   bca14:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bca18:	f7ff ff4e 	bl	bc8b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bca1c:	4620      	mov	r0, r4
   bca1e:	e9dd 2100 	ldrd	r2, r1, [sp]
   bca22:	f7ff ff87 	bl	bc934 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bca26:	2301      	movs	r3, #1
}
   bca28:	4620      	mov	r0, r4
    state_ = NEXT;
   bca2a:	7123      	strb	r3, [r4, #4]
}
   bca2c:	b002      	add	sp, #8
   bca2e:	bd10      	pop	{r4, pc}

000bca30 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bca30:	6880      	ldr	r0, [r0, #8]
   bca32:	6803      	ldr	r3, [r0, #0]
   bca34:	68db      	ldr	r3, [r3, #12]
   bca36:	4718      	bx	r3

000bca38 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bca38:	4770      	bx	lr

000bca3a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bca3a:	4608      	mov	r0, r1
   bca3c:	b111      	cbz	r1, bca44 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bca3e:	680b      	ldr	r3, [r1, #0]
   bca40:	685b      	ldr	r3, [r3, #4]
   bca42:	4718      	bx	r3
}
   bca44:	4770      	bx	lr

000bca46 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bca46:	4770      	bx	lr

000bca48 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bca48:	4770      	bx	lr

000bca4a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bca4a:	4770      	bx	lr

000bca4c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bca4c:	4770      	bx	lr

000bca4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bca4e:	b538      	push	{r3, r4, r5, lr}
   bca50:	4604      	mov	r4, r0
   bca52:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bca54:	6800      	ldr	r0, [r0, #0]
   bca56:	212e      	movs	r1, #46	; 0x2e
   bca58:	f002 ff37 	bl	bf8ca <strchrnul>
    size = s - category;
   bca5c:	6823      	ldr	r3, [r4, #0]
   bca5e:	1ac3      	subs	r3, r0, r3
   bca60:	602b      	str	r3, [r5, #0]
    if (size) {
   bca62:	b123      	cbz	r3, bca6e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bca64:	7803      	ldrb	r3, [r0, #0]
   bca66:	b103      	cbz	r3, bca6a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bca68:	3001      	adds	r0, #1
   bca6a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bca6c:	6020      	str	r0, [r4, #0]
}
   bca6e:	4618      	mov	r0, r3
   bca70:	bd38      	pop	{r3, r4, r5, pc}

000bca72 <_ZN5spark16JSONStreamWriterD0Ev>:
   bca72:	b510      	push	{r4, lr}
   bca74:	210c      	movs	r1, #12
   bca76:	4604      	mov	r4, r0
   bca78:	f7f7 fb11 	bl	b409e <_ZdlPvj>
   bca7c:	4620      	mov	r0, r4
   bca7e:	bd10      	pop	{r4, pc}

000bca80 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bca80:	b510      	push	{r4, lr}
   bca82:	2104      	movs	r1, #4
   bca84:	4604      	mov	r4, r0
   bca86:	f7f7 fb0a 	bl	b409e <_ZdlPvj>
   bca8a:	4620      	mov	r0, r4
   bca8c:	bd10      	pop	{r4, pc}

000bca8e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bca8e:	b510      	push	{r4, lr}
   bca90:	2104      	movs	r1, #4
   bca92:	4604      	mov	r4, r0
   bca94:	f7f7 fb03 	bl	b409e <_ZdlPvj>
   bca98:	4620      	mov	r0, r4
   bca9a:	bd10      	pop	{r4, pc}

000bca9c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bca9c:	f7fe bb62 	b.w	bb164 <os_mutex_recursive_lock>

000bcaa0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bcaa0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bcaa2:	f002 ff1c 	bl	bf8de <strcmp>
}
   bcaa6:	fab0 f080 	clz	r0, r0
   bcaaa:	0940      	lsrs	r0, r0, #5
   bcaac:	bd08      	pop	{r3, pc}

000bcaae <__tcf_1>:
   bcaae:	4770      	bx	lr

000bcab0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bcab0:	b510      	push	{r4, lr}
   bcab2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bcab4:	f001 ff2a 	bl	be90c <_Z16_fetch_usbserialv>
   bcab8:	4284      	cmp	r4, r0
   bcaba:	d010      	beq.n	bcade <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bcabc:	f002 f924 	bl	bed08 <_Z22__fetch_global_Serial1v>
   bcac0:	4284      	cmp	r4, r0
   bcac2:	d105      	bne.n	bcad0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bcac4:	f002 f920 	bl	bed08 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bcac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bcacc:	f001 beb7 	b.w	be83e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bcad0:	b12c      	cbz	r4, bcade <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bcad2:	6823      	ldr	r3, [r4, #0]
   bcad4:	4620      	mov	r0, r4
   bcad6:	685b      	ldr	r3, [r3, #4]
}
   bcad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bcadc:	4718      	bx	r3
   bcade:	bd10      	pop	{r4, pc}

000bcae0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bcae0:	b513      	push	{r0, r1, r4, lr}
   bcae2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bcae4:	4608      	mov	r0, r1
   bcae6:	9101      	str	r1, [sp, #4]
   bcae8:	f002 ff29 	bl	bf93e <strlen>
   bcaec:	9901      	ldr	r1, [sp, #4]
   bcaee:	4602      	mov	r2, r0
   bcaf0:	4620      	mov	r0, r4
}
   bcaf2:	b002      	add	sp, #8
   bcaf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bcaf8:	f7ff bf8a 	b.w	bca10 <_ZN5spark10JSONWriter5valueEPKcj>

000bcafc <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bcafc:	b513      	push	{r0, r1, r4, lr}
   bcafe:	4604      	mov	r4, r0
    write(str, strlen(str));
   bcb00:	4608      	mov	r0, r1
   bcb02:	9101      	str	r1, [sp, #4]
   bcb04:	f002 ff1b 	bl	bf93e <strlen>
   bcb08:	6823      	ldr	r3, [r4, #0]
   bcb0a:	9901      	ldr	r1, [sp, #4]
   bcb0c:	68db      	ldr	r3, [r3, #12]
   bcb0e:	4602      	mov	r2, r0
   bcb10:	4620      	mov	r0, r4
}
   bcb12:	b002      	add	sp, #8
   bcb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bcb18:	4718      	bx	r3

000bcb1a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bcb1a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bcb1c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bcb1e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bcb22:	68db      	ldr	r3, [r3, #12]
   bcb24:	2201      	movs	r2, #1
   bcb26:	f10d 0107 	add.w	r1, sp, #7
   bcb2a:	4798      	blx	r3
}
   bcb2c:	b003      	add	sp, #12
   bcb2e:	f85d fb04 	ldr.w	pc, [sp], #4

000bcb32 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bcb32:	b40e      	push	{r1, r2, r3}
   bcb34:	b503      	push	{r0, r1, lr}
   bcb36:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bcb38:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bcb3a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bcb3e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bcb40:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bcb42:	f001 f942 	bl	bddca <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bcb46:	b002      	add	sp, #8
   bcb48:	f85d eb04 	ldr.w	lr, [sp], #4
   bcb4c:	b003      	add	sp, #12
   bcb4e:	4770      	bx	lr

000bcb50 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bcb50:	680a      	ldr	r2, [r1, #0]
   bcb52:	6002      	str	r2, [r0, #0]
   bcb54:	684a      	ldr	r2, [r1, #4]
   bcb56:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bcb58:	2200      	movs	r2, #0
   bcb5a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bcb5e:	b510      	push	{r4, lr}
   bcb60:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bcb62:	688c      	ldr	r4, [r1, #8]
   bcb64:	6084      	str	r4, [r0, #8]
   bcb66:	68cc      	ldr	r4, [r1, #12]
   bcb68:	60c4      	str	r4, [r0, #12]
   bcb6a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bcb6c:	608a      	str	r2, [r1, #8]
   bcb6e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bcb70:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bcb72:	610a      	str	r2, [r1, #16]
   bcb74:	bd10      	pop	{r4, pc}
	...

000bcb78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bcb78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bcb7c:	e9d0 8400 	ldrd	r8, r4, [r0]
   bcb80:	f04f 0a14 	mov.w	sl, #20
   bcb84:	9300      	str	r3, [sp, #0]
   bcb86:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bcb8a:	4b18      	ldr	r3, [pc, #96]	; (bcbec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bcb8c:	10a4      	asrs	r4, r4, #2
   bcb8e:	4617      	mov	r7, r2
   bcb90:	435c      	muls	r4, r3
   bcb92:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bcb94:	2c00      	cmp	r4, #0
   bcb96:	dd21      	ble.n	bcbdc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bcb98:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bcb9a:	fb0a f006 	mul.w	r0, sl, r6
   bcb9e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bcba2:	463a      	mov	r2, r7
   bcba4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bcba8:	5828      	ldr	r0, [r5, r0]
   bcbaa:	9101      	str	r1, [sp, #4]
   bcbac:	455f      	cmp	r7, fp
   bcbae:	bf28      	it	cs
   bcbb0:	465a      	movcs	r2, fp
   bcbb2:	f002 fecc 	bl	bf94e <strncmp>
                if (cmp == 0) {
   bcbb6:	2800      	cmp	r0, #0
   bcbb8:	9901      	ldr	r1, [sp, #4]
   bcbba:	f04f 0301 	mov.w	r3, #1
   bcbbe:	d10b      	bne.n	bcbd8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bcbc0:	455f      	cmp	r7, fp
   bcbc2:	d103      	bne.n	bcbcc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bcbc4:	9a00      	ldr	r2, [sp, #0]
   bcbc6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bcbc8:	4634      	mov	r4, r6
   bcbca:	e7e3      	b.n	bcb94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bcbcc:	d9fc      	bls.n	bcbc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bcbce:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bcbd0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bcbd4:	3e01      	subs	r6, #1
   bcbd6:	e7f7      	b.n	bcbc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bcbd8:	dbf9      	blt.n	bcbce <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bcbda:	e7f5      	b.n	bcbc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bcbdc:	eba5 0508 	sub.w	r5, r5, r8
}
   bcbe0:	4802      	ldr	r0, [pc, #8]	; (bcbec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bcbe2:	10ad      	asrs	r5, r5, #2
   bcbe4:	4368      	muls	r0, r5
   bcbe6:	b003      	add	sp, #12
   bcbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcbec:	cccccccd 	.word	0xcccccccd

000bcbf0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bcbf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bcbf2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bcbf4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bcbf6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bcbf8:	b303      	cbz	r3, bcc3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bcbfa:	b1f9      	cbz	r1, bcc3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bcbfc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bcbfe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bcc02:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bcc04:	a903      	add	r1, sp, #12
   bcc06:	a801      	add	r0, sp, #4
   bcc08:	f7ff ff21 	bl	bca4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bcc0c:	4601      	mov	r1, r0
   bcc0e:	b1a8      	cbz	r0, bcc3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bcc10:	f10d 030b 	add.w	r3, sp, #11
   bcc14:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bcc16:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bcc1a:	4620      	mov	r0, r4
   bcc1c:	f7ff ffac 	bl	bcb78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bcc20:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bcc24:	b153      	cbz	r3, bcc3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bcc26:	6823      	ldr	r3, [r4, #0]
   bcc28:	2414      	movs	r4, #20
   bcc2a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bcc2e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bcc30:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bcc34:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bcc36:	bfa8      	it	ge
   bcc38:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bcc3a:	e7e3      	b.n	bcc04 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bcc3c:	4628      	mov	r0, r5
   bcc3e:	b004      	add	sp, #16
   bcc40:	bd70      	pop	{r4, r5, r6, pc}
	...

000bcc44 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bcc44:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bcc46:	4c09      	ldr	r4, [pc, #36]	; (bcc6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bcc48:	7823      	ldrb	r3, [r4, #0]
   bcc4a:	f3bf 8f5b 	dmb	ish
   bcc4e:	07db      	lsls	r3, r3, #31
   bcc50:	d409      	bmi.n	bcc66 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bcc52:	4620      	mov	r0, r4
   bcc54:	f7f7 fa32 	bl	b40bc <__cxa_guard_acquire>
   bcc58:	b128      	cbz	r0, bcc66 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bcc5a:	4620      	mov	r0, r4
   bcc5c:	f7f7 fa33 	bl	b40c6 <__cxa_guard_release>
   bcc60:	4803      	ldr	r0, [pc, #12]	; (bcc70 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bcc62:	f002 fd5d 	bl	bf720 <atexit>
}
   bcc66:	4803      	ldr	r0, [pc, #12]	; (bcc74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bcc68:	bd10      	pop	{r4, pc}
   bcc6a:	bf00      	nop
   bcc6c:	2003e650 	.word	0x2003e650
   bcc70:	000bca47 	.word	0x000bca47
   bcc74:	2003deb0 	.word	0x2003deb0

000bcc78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bcc78:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bcc7a:	4c09      	ldr	r4, [pc, #36]	; (bcca0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bcc7c:	7823      	ldrb	r3, [r4, #0]
   bcc7e:	f3bf 8f5b 	dmb	ish
   bcc82:	07db      	lsls	r3, r3, #31
   bcc84:	d409      	bmi.n	bcc9a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bcc86:	4620      	mov	r0, r4
   bcc88:	f7f7 fa18 	bl	b40bc <__cxa_guard_acquire>
   bcc8c:	b128      	cbz	r0, bcc9a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bcc8e:	4620      	mov	r0, r4
   bcc90:	f7f7 fa19 	bl	b40c6 <__cxa_guard_release>
   bcc94:	4803      	ldr	r0, [pc, #12]	; (bcca4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bcc96:	f002 fd43 	bl	bf720 <atexit>
    return &factory;
}
   bcc9a:	4803      	ldr	r0, [pc, #12]	; (bcca8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bcc9c:	bd10      	pop	{r4, pc}
   bcc9e:	bf00      	nop
   bcca0:	2003e654 	.word	0x2003e654
   bcca4:	000bcaaf 	.word	0x000bcaaf
   bcca8:	2003deb4 	.word	0x2003deb4

000bccac <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bccac:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bccae:	2500      	movs	r5, #0
   bccb0:	4604      	mov	r4, r0
   bccb2:	e9c0 5500 	strd	r5, r5, [r0]
   bccb6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bccba:	6085      	str	r5, [r0, #8]
   bccbc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bccbe:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bccc2:	f7fe fa3f 	bl	bb144 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bccc6:	f7ff ffbd 	bl	bcc44 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bccca:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bcccc:	f7ff ffd4 	bl	bcc78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bccd0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bccd2:	6220      	str	r0, [r4, #32]
}
   bccd4:	4620      	mov	r0, r4
   bccd6:	bd38      	pop	{r3, r4, r5, pc}

000bccd8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bccd8:	b510      	push	{r4, lr}
    static LogManager mgr;
   bccda:	4c0a      	ldr	r4, [pc, #40]	; (bcd04 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bccdc:	7823      	ldrb	r3, [r4, #0]
   bccde:	f3bf 8f5b 	dmb	ish
   bcce2:	07db      	lsls	r3, r3, #31
   bcce4:	d40c      	bmi.n	bcd00 <_ZN5spark10LogManager8instanceEv+0x28>
   bcce6:	4620      	mov	r0, r4
   bcce8:	f7f7 f9e8 	bl	b40bc <__cxa_guard_acquire>
   bccec:	b140      	cbz	r0, bcd00 <_ZN5spark10LogManager8instanceEv+0x28>
   bccee:	4806      	ldr	r0, [pc, #24]	; (bcd08 <_ZN5spark10LogManager8instanceEv+0x30>)
   bccf0:	f7ff ffdc 	bl	bccac <_ZN5spark10LogManagerC1Ev>
   bccf4:	4620      	mov	r0, r4
   bccf6:	f7f7 f9e6 	bl	b40c6 <__cxa_guard_release>
   bccfa:	4804      	ldr	r0, [pc, #16]	; (bcd0c <_ZN5spark10LogManager8instanceEv+0x34>)
   bccfc:	f002 fd10 	bl	bf720 <atexit>
    return &mgr;
}
   bcd00:	4801      	ldr	r0, [pc, #4]	; (bcd08 <_ZN5spark10LogManager8instanceEv+0x30>)
   bcd02:	bd10      	pop	{r4, pc}
   bcd04:	2003e64c 	.word	0x2003e64c
   bcd08:	2003e65c 	.word	0x2003e65c
   bcd0c:	000bd1c5 	.word	0x000bd1c5

000bcd10 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bcd10:	4a02      	ldr	r2, [pc, #8]	; (bcd1c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bcd12:	4903      	ldr	r1, [pc, #12]	; (bcd20 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bcd14:	4803      	ldr	r0, [pc, #12]	; (bcd24 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bcd16:	2300      	movs	r3, #0
   bcd18:	f7fe bcac 	b.w	bb674 <log_set_callbacks>
   bcd1c:	000bcfa9 	.word	0x000bcfa9
   bcd20:	000bcf35 	.word	0x000bcf35
   bcd24:	000bceb5 	.word	0x000bceb5

000bcd28 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bcd28:	2300      	movs	r3, #0
   bcd2a:	461a      	mov	r2, r3
   bcd2c:	4619      	mov	r1, r3
   bcd2e:	4618      	mov	r0, r3
   bcd30:	f7fe bca0 	b.w	bb674 <log_set_callbacks>

000bcd34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bcd34:	b570      	push	{r4, r5, r6, lr}
   bcd36:	b08a      	sub	sp, #40	; 0x28
   bcd38:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bcd3a:	4601      	mov	r1, r0
   bcd3c:	a804      	add	r0, sp, #16
   bcd3e:	f7fb fbee 	bl	b851e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bcd42:	4e14      	ldr	r6, [pc, #80]	; (bcd94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bcd44:	a804      	add	r0, sp, #16
   bcd46:	f7ff fd9b 	bl	bc880 <_ZN5spark18JSONObjectIterator4nextEv>
   bcd4a:	b1e8      	cbz	r0, bcd88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bcd4c:	a904      	add	r1, sp, #16
   bcd4e:	4668      	mov	r0, sp
   bcd50:	f7fb fbf6 	bl	b8540 <_ZNK5spark18JSONObjectIterator4nameEv>
   bcd54:	9802      	ldr	r0, [sp, #8]
   bcd56:	4631      	mov	r1, r6
   bcd58:	f7ff fea2 	bl	bcaa0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bcd5c:	4604      	mov	r4, r0
   bcd5e:	b110      	cbz	r0, bcd66 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bcd60:	1e2c      	subs	r4, r5, #0
   bcd62:	bf18      	it	ne
   bcd64:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bcd66:	a801      	add	r0, sp, #4
   bcd68:	f7f9 fc3a 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcd6c:	2c00      	cmp	r4, #0
   bcd6e:	d0e9      	beq.n	bcd44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bcd70:	a904      	add	r1, sp, #16
   bcd72:	4668      	mov	r0, sp
   bcd74:	f7fb fbf5 	bl	b8562 <_ZNK5spark18JSONObjectIterator5valueEv>
   bcd78:	4668      	mov	r0, sp
   bcd7a:	f7ff fd24 	bl	bc7c6 <_ZNK5spark9JSONValue5toIntEv>
   bcd7e:	6028      	str	r0, [r5, #0]
   bcd80:	a801      	add	r0, sp, #4
   bcd82:	f7f9 fc2d 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcd86:	e7dd      	b.n	bcd44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bcd88:	a805      	add	r0, sp, #20
   bcd8a:	f7f9 fc29 	bl	b65e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bcd8e:	b00a      	add	sp, #40	; 0x28
   bcd90:	bd70      	pop	{r4, r5, r6, pc}
   bcd92:	bf00      	nop
   bcd94:	000c1522 	.word	0x000c1522

000bcd98 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bcd98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcd9a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bcd9c:	4620      	mov	r0, r4
   bcd9e:	4913      	ldr	r1, [pc, #76]	; (bcdec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bcda0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bcda2:	f002 fd9c 	bl	bf8de <strcmp>
   bcda6:	b950      	cbnz	r0, bcdbe <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bcda8:	f001 fdb0 	bl	be90c <_Z16_fetch_usbserialv>
   bcdac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bcdb0:	f001 fd9a 	bl	be8e8 <_ZN9USBSerial5beginEl>
}
   bcdb4:	b003      	add	sp, #12
   bcdb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bcdba:	f001 bda7 	b.w	be90c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bcdbe:	490c      	ldr	r1, [pc, #48]	; (bcdf0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bcdc0:	4620      	mov	r0, r4
   bcdc2:	f002 fd8c 	bl	bf8de <strcmp>
   bcdc6:	b978      	cbnz	r0, bcde8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bcdc8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bcdcc:	a901      	add	r1, sp, #4
   bcdce:	4628      	mov	r0, r5
        int baud = 9600;
   bcdd0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bcdd2:	f7ff ffaf 	bl	bcd34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bcdd6:	f001 ff97 	bl	bed08 <_Z22__fetch_global_Serial1v>
   bcdda:	9901      	ldr	r1, [sp, #4]
   bcddc:	f001 fd2c 	bl	be838 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bcde0:	f001 ff92 	bl	bed08 <_Z22__fetch_global_Serial1v>
}
   bcde4:	b003      	add	sp, #12
   bcde6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bcde8:	2000      	movs	r0, #0
   bcdea:	e7fb      	b.n	bcde4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bcdec:	000c1527 	.word	0x000c1527
   bcdf0:	000c152e 	.word	0x000c152e

000bcdf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bcdf4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bcdf6:	e9d0 5300 	ldrd	r5, r3, [r0]
   bcdfa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bcdfc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bcdfe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bce02:	42ae      	cmp	r6, r5
   bce04:	d005      	beq.n	bce12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bce06:	f105 0008 	add.w	r0, r5, #8
   bce0a:	f7ff fff3 	bl	bcdf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bce0e:	3514      	adds	r5, #20
   bce10:	e7f7      	b.n	bce02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bce12:	6820      	ldr	r0, [r4, #0]
   bce14:	f7fe fd8a 	bl	bb92c <free>
}
   bce18:	4620      	mov	r0, r4
   bce1a:	bd70      	pop	{r4, r5, r6, pc}

000bce1c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bce1c:	b510      	push	{r4, lr}
   bce1e:	4604      	mov	r4, r0
   bce20:	300c      	adds	r0, #12
   bce22:	f7ff ffe7 	bl	bcdf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bce26:	4620      	mov	r0, r4
   bce28:	f7fe fe23 	bl	bba72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bce2c:	4620      	mov	r0, r4
   bce2e:	bd10      	pop	{r4, pc}

000bce30 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bce30:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bce32:	4b04      	ldr	r3, [pc, #16]	; (bce44 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bce34:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bce36:	f840 3b04 	str.w	r3, [r0], #4
   bce3a:	f7ff ffef 	bl	bce1c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bce3e:	4620      	mov	r0, r4
   bce40:	bd10      	pop	{r4, pc}
   bce42:	bf00      	nop
   bce44:	000c097c 	.word	0x000c097c

000bce48 <_ZN5spark16StreamLogHandlerD0Ev>:
   bce48:	b510      	push	{r4, lr}
   bce4a:	4604      	mov	r4, r0
   bce4c:	f7ff fff0 	bl	bce30 <_ZN5spark16StreamLogHandlerD1Ev>
   bce50:	4620      	mov	r0, r4
   bce52:	2124      	movs	r1, #36	; 0x24
   bce54:	f7f7 f923 	bl	b409e <_ZdlPvj>
   bce58:	4620      	mov	r0, r4
   bce5a:	bd10      	pop	{r4, pc}

000bce5c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bce5c:	b510      	push	{r4, lr}
   bce5e:	4b03      	ldr	r3, [pc, #12]	; (bce6c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bce60:	6003      	str	r3, [r0, #0]
   bce62:	4604      	mov	r4, r0
   bce64:	f7ff ffe4 	bl	bce30 <_ZN5spark16StreamLogHandlerD1Ev>
   bce68:	4620      	mov	r0, r4
   bce6a:	bd10      	pop	{r4, pc}
   bce6c:	000c15c4 	.word	0x000c15c4

000bce70 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bce70:	b510      	push	{r4, lr}
   bce72:	4604      	mov	r4, r0
   bce74:	f7ff fff2 	bl	bce5c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bce78:	4620      	mov	r0, r4
   bce7a:	2124      	movs	r1, #36	; 0x24
   bce7c:	f7f7 f90f 	bl	b409e <_ZdlPvj>
   bce80:	4620      	mov	r0, r4
   bce82:	bd10      	pop	{r4, pc}

000bce84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bce84:	2200      	movs	r2, #0
   bce86:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bce8a:	b510      	push	{r4, lr}
        capacity_(0) {
   bce8c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bce8e:	680c      	ldr	r4, [r1, #0]
   bce90:	6004      	str	r4, [r0, #0]
   bce92:	684c      	ldr	r4, [r1, #4]
   bce94:	6044      	str	r4, [r0, #4]
   bce96:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bce98:	600a      	str	r2, [r1, #0]
   bce9a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bce9c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bce9e:	608a      	str	r2, [r1, #8]
}
   bcea0:	bd10      	pop	{r4, pc}

000bcea2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bcea2:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bcea4:	6803      	ldr	r3, [r0, #0]
   bcea6:	4604      	mov	r4, r0
   bcea8:	6818      	ldr	r0, [r3, #0]
   bceaa:	f7fe f963 	bl	bb174 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bceae:	4620      	mov	r0, r4
   bceb0:	bd10      	pop	{r4, pc}
	...

000bceb4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bceb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bceb8:	b087      	sub	sp, #28
   bceba:	4680      	mov	r8, r0
   bcebc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bcebe:	4b1c      	ldr	r3, [pc, #112]	; (bcf30 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bcec0:	685b      	ldr	r3, [r3, #4]
   bcec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bcec6:	4689      	mov	r9, r1
   bcec8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bceca:	b96b      	cbnz	r3, bcee8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bcecc:	f7ff ff04 	bl	bccd8 <_ZN5spark10LogManager8instanceEv>
   bced0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bced2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bced6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bced8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bceda:	f7ff fddf 	bl	bca9c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bcede:	7b23      	ldrb	r3, [r4, #12]
   bcee0:	b12b      	cbz	r3, bceee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bcee2:	a805      	add	r0, sp, #20
   bcee4:	f7ff ffdd 	bl	bcea2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bcee8:	b007      	add	sp, #28
   bceea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bceee:	2301      	movs	r3, #1
   bcef0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bcef2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bcef6:	fa5f f989 	uxtb.w	r9, r9
   bcefa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bcefe:	45aa      	cmp	sl, r5
   bcf00:	d012      	beq.n	bcf28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bcf02:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bcf06:	4631      	mov	r1, r6
   bcf08:	1d38      	adds	r0, r7, #4
   bcf0a:	f7ff fe71 	bl	bcbf0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bcf0e:	4581      	cmp	r9, r0
   bcf10:	d3f5      	bcc.n	bcefe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bcf12:	683b      	ldr	r3, [r7, #0]
   bcf14:	9a03      	ldr	r2, [sp, #12]
   bcf16:	9200      	str	r2, [sp, #0]
   bcf18:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bcf1c:	464a      	mov	r2, r9
   bcf1e:	4633      	mov	r3, r6
   bcf20:	4641      	mov	r1, r8
   bcf22:	4638      	mov	r0, r7
   bcf24:	47d8      	blx	fp
   bcf26:	e7ea      	b.n	bcefe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bcf28:	2300      	movs	r3, #0
   bcf2a:	7323      	strb	r3, [r4, #12]
   bcf2c:	e7d9      	b.n	bcee2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bcf2e:	bf00      	nop
   bcf30:	e000ed00 	.word	0xe000ed00

000bcf34 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bcf34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcf38:	469b      	mov	fp, r3
   bcf3a:	4b1a      	ldr	r3, [pc, #104]	; (bcfa4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bcf3c:	685b      	ldr	r3, [r3, #4]
   bcf3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bcf42:	4680      	mov	r8, r0
   bcf44:	4689      	mov	r9, r1
   bcf46:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bcf48:	b96b      	cbnz	r3, bcf66 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bcf4a:	f7ff fec5 	bl	bccd8 <_ZN5spark10LogManager8instanceEv>
   bcf4e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bcf50:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bcf54:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcf56:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bcf58:	f7ff fda0 	bl	bca9c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bcf5c:	7b23      	ldrb	r3, [r4, #12]
   bcf5e:	b12b      	cbz	r3, bcf6c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bcf60:	a801      	add	r0, sp, #4
   bcf62:	f7ff ff9e 	bl	bcea2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bcf66:	b003      	add	sp, #12
   bcf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bcf6c:	2301      	movs	r3, #1
   bcf6e:	7323      	strb	r3, [r4, #12]
   bcf70:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bcf74:	b2f6      	uxtb	r6, r6
   bcf76:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bcf7a:	4555      	cmp	r5, sl
   bcf7c:	d00e      	beq.n	bcf9c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bcf7e:	f855 7b04 	ldr.w	r7, [r5], #4
   bcf82:	4659      	mov	r1, fp
   bcf84:	1d38      	adds	r0, r7, #4
   bcf86:	f7ff fe33 	bl	bcbf0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bcf8a:	4286      	cmp	r6, r0
   bcf8c:	d3f5      	bcc.n	bcf7a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bcf8e:	683b      	ldr	r3, [r7, #0]
   bcf90:	464a      	mov	r2, r9
   bcf92:	68db      	ldr	r3, [r3, #12]
   bcf94:	4641      	mov	r1, r8
   bcf96:	4638      	mov	r0, r7
   bcf98:	4798      	blx	r3
   bcf9a:	e7ee      	b.n	bcf7a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bcf9c:	2300      	movs	r3, #0
   bcf9e:	7323      	strb	r3, [r4, #12]
   bcfa0:	e7de      	b.n	bcf60 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bcfa2:	bf00      	nop
   bcfa4:	e000ed00 	.word	0xe000ed00

000bcfa8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bcfa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bcfac:	4b16      	ldr	r3, [pc, #88]	; (bd008 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bcfae:	685b      	ldr	r3, [r3, #4]
   bcfb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bcfb4:	4605      	mov	r5, r0
   bcfb6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bcfb8:	bb1b      	cbnz	r3, bd002 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bcfba:	f7ff fe8d 	bl	bccd8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bcfbe:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bcfc2:	4604      	mov	r4, r0
   bcfc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcfc6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bcfc8:	f7ff fd68 	bl	bca9c <_ZN14RecursiveMutex4lockEv.isra.0>
   bcfcc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bcfd0:	2446      	movs	r4, #70	; 0x46
   bcfd2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bcfd6:	45b0      	cmp	r8, r6
   bcfd8:	d109      	bne.n	bcfee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bcfda:	a801      	add	r0, sp, #4
   bcfdc:	f7ff ff61 	bl	bcea2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bcfe0:	42a5      	cmp	r5, r4
   bcfe2:	bfb4      	ite	lt
   bcfe4:	2000      	movlt	r0, #0
   bcfe6:	2001      	movge	r0, #1
}
   bcfe8:	b002      	add	sp, #8
   bcfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bcfee:	f856 0b04 	ldr.w	r0, [r6], #4
   bcff2:	4639      	mov	r1, r7
   bcff4:	3004      	adds	r0, #4
   bcff6:	f7ff fdfb 	bl	bcbf0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bcffa:	4284      	cmp	r4, r0
   bcffc:	bfa8      	it	ge
   bcffe:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bd000:	e7e9      	b.n	bcfd6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bd002:	2000      	movs	r0, #0
   bd004:	e7f0      	b.n	bcfe8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bd006:	bf00      	nop
   bd008:	e000ed00 	.word	0xe000ed00

000bd00c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bd00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bd00e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bd012:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bd014:	4604      	mov	r4, r0
   bd016:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bd018:	db0d      	blt.n	bd036 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bd01a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bd01c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bd01e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bd020:	dd04      	ble.n	bd02c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bd022:	00b9      	lsls	r1, r7, #2
   bd024:	f7fe fc8a 	bl	bb93c <realloc>
            if (!d) {
   bd028:	b918      	cbnz	r0, bd032 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bd02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bd02c:	f7fe fc7e 	bl	bb92c <free>
        T* d = nullptr;
   bd030:	2000      	movs	r0, #0
        data_ = d;
   bd032:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bd034:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bd036:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bd038:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bd03a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bd03e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bd040:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bd044:	1d08      	adds	r0, r1, #4
   bd046:	f002 fba5 	bl	bf794 <memmove>
    new(p) T(std::move(value));
   bd04a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bd04e:	6863      	ldr	r3, [r4, #4]
   bd050:	3301      	adds	r3, #1
   bd052:	6063      	str	r3, [r4, #4]
    return true;
   bd054:	2001      	movs	r0, #1
   bd056:	e7e8      	b.n	bd02a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bd058 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bd058:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bd05a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bd05e:	4604      	mov	r4, r0
   bd060:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd062:	9301      	str	r3, [sp, #4]
   bd064:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bd066:	f7ff fd19 	bl	bca9c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bd06a:	e9d4 3200 	ldrd	r3, r2, [r4]
   bd06e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bd072:	4293      	cmp	r3, r2
   bd074:	4619      	mov	r1, r3
   bd076:	d00b      	beq.n	bd090 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bd078:	6809      	ldr	r1, [r1, #0]
   bd07a:	42a9      	cmp	r1, r5
   bd07c:	f103 0304 	add.w	r3, r3, #4
   bd080:	d1f7      	bne.n	bd072 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bd082:	a801      	add	r0, sp, #4
   bd084:	f7ff ff0d 	bl	bcea2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bd088:	2500      	movs	r5, #0
}
   bd08a:	4628      	mov	r0, r5
   bd08c:	b003      	add	sp, #12
   bd08e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bd090:	4629      	mov	r1, r5
   bd092:	4620      	mov	r0, r4
   bd094:	f7ff ffba 	bl	bd00c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bd098:	4605      	mov	r5, r0
   bd09a:	2800      	cmp	r0, #0
   bd09c:	d0f1      	beq.n	bd082 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bd09e:	6863      	ldr	r3, [r4, #4]
   bd0a0:	2b01      	cmp	r3, #1
   bd0a2:	d101      	bne.n	bd0a8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bd0a4:	f7ff fe34 	bl	bcd10 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bd0a8:	a801      	add	r0, sp, #4
   bd0aa:	f7ff fefa 	bl	bcea2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bd0ae:	e7ec      	b.n	bd08a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bd0b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bd0b0:	b570      	push	{r4, r5, r6, lr}
   bd0b2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bd0b4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bd0b8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bd0ba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bd0be:	4282      	cmp	r2, r0
   bd0c0:	d00f      	beq.n	bd0e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bd0c2:	4601      	mov	r1, r0
            if (*p == value) {
   bd0c4:	681d      	ldr	r5, [r3, #0]
   bd0c6:	f851 6b04 	ldr.w	r6, [r1], #4
   bd0ca:	42ae      	cmp	r6, r5
   bd0cc:	d107      	bne.n	bd0de <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bd0ce:	1a52      	subs	r2, r2, r1
   bd0d0:	f002 fb60 	bl	bf794 <memmove>
    --size_;
   bd0d4:	6863      	ldr	r3, [r4, #4]
   bd0d6:	3b01      	subs	r3, #1
   bd0d8:	6063      	str	r3, [r4, #4]
    return true;
   bd0da:	2001      	movs	r0, #1
}
   bd0dc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bd0de:	4608      	mov	r0, r1
   bd0e0:	e7ed      	b.n	bd0be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bd0e2:	2000      	movs	r0, #0
   bd0e4:	e7fa      	b.n	bd0dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bd0e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bd0e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bd0e8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bd0ec:	4604      	mov	r4, r0
   bd0ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bd0f0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd0f2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bd0f4:	f7ff fcd2 	bl	bca9c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bd0f8:	a901      	add	r1, sp, #4
   bd0fa:	4620      	mov	r0, r4
   bd0fc:	f7ff ffd8 	bl	bd0b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bd100:	b118      	cbz	r0, bd10a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bd102:	6863      	ldr	r3, [r4, #4]
   bd104:	b90b      	cbnz	r3, bd10a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bd106:	f7ff fe0f 	bl	bcd28 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bd10a:	a803      	add	r0, sp, #12
   bd10c:	f7ff fec9 	bl	bcea2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bd110:	b004      	add	sp, #16
   bd112:	bd10      	pop	{r4, pc}

000bd114 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bd114:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bd116:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bd11a:	2318      	movs	r3, #24
   bd11c:	4604      	mov	r4, r0
   bd11e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bd122:	42ae      	cmp	r6, r5
   bd124:	d015      	beq.n	bd152 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bd126:	f105 0110 	add.w	r1, r5, #16
   bd12a:	4620      	mov	r0, r4
   bd12c:	f7ff ffc0 	bl	bd0b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bd130:	6863      	ldr	r3, [r4, #4]
   bd132:	b90b      	cbnz	r3, bd138 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bd134:	f7ff fdf8 	bl	bcd28 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bd138:	69e0      	ldr	r0, [r4, #28]
   bd13a:	6929      	ldr	r1, [r5, #16]
   bd13c:	6803      	ldr	r3, [r0, #0]
   bd13e:	68db      	ldr	r3, [r3, #12]
   bd140:	4798      	blx	r3
        if (h.stream) {
   bd142:	6969      	ldr	r1, [r5, #20]
   bd144:	b119      	cbz	r1, bd14e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bd146:	6a20      	ldr	r0, [r4, #32]
   bd148:	6803      	ldr	r3, [r0, #0]
   bd14a:	68db      	ldr	r3, [r3, #12]
   bd14c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bd14e:	3518      	adds	r5, #24
   bd150:	e7e7      	b.n	bd122 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bd152:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bd156:	2618      	movs	r6, #24
   bd158:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bd15c:	42ae      	cmp	r6, r5
   bd15e:	d004      	beq.n	bd16a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bd160:	4628      	mov	r0, r5
   bd162:	f000 ff45 	bl	bdff0 <_ZN6StringD1Ev>
   bd166:	3518      	adds	r5, #24
   bd168:	e7f8      	b.n	bd15c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bd16a:	2300      	movs	r3, #0
   bd16c:	6163      	str	r3, [r4, #20]
}
   bd16e:	bd70      	pop	{r4, r5, r6, pc}

000bd170 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bd170:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd172:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bd174:	f7ff fdd8 	bl	bcd28 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bd178:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bd17c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd17e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bd180:	f7ff fc8c 	bl	bca9c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bd184:	4620      	mov	r0, r4
   bd186:	f7ff ffc5 	bl	bd114 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bd18a:	a801      	add	r0, sp, #4
   bd18c:	f7ff fe89 	bl	bcea2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bd190:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd192:	b108      	cbz	r0, bd198 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bd194:	f7fd ffde 	bl	bb154 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bd198:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bd19c:	2618      	movs	r6, #24
   bd19e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bd1a2:	42ae      	cmp	r6, r5
   bd1a4:	d004      	beq.n	bd1b0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bd1a6:	4628      	mov	r0, r5
   bd1a8:	f000 ff22 	bl	bdff0 <_ZN6StringD1Ev>
   bd1ac:	3518      	adds	r5, #24
   bd1ae:	e7f8      	b.n	bd1a2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bd1b0:	6920      	ldr	r0, [r4, #16]
   bd1b2:	f7fe fbbb 	bl	bb92c <free>
   bd1b6:	6820      	ldr	r0, [r4, #0]
   bd1b8:	f7fe fbb8 	bl	bb92c <free>
}
   bd1bc:	4620      	mov	r0, r4
   bd1be:	b002      	add	sp, #8
   bd1c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd1c4 <__tcf_2>:
    static LogManager mgr;
   bd1c4:	4801      	ldr	r0, [pc, #4]	; (bd1cc <__tcf_2+0x8>)
   bd1c6:	f7ff bfd3 	b.w	bd170 <_ZN5spark10LogManagerD1Ev>
   bd1ca:	bf00      	nop
   bd1cc:	2003e65c 	.word	0x2003e65c

000bd1d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bd1d0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bd1d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd1d4:	4604      	mov	r4, r0
   bd1d6:	460d      	mov	r5, r1
   bd1d8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bd1da:	d915      	bls.n	bd208 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bd1dc:	4290      	cmp	r0, r2
   bd1de:	d214      	bcs.n	bd20a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bd1e0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bd1e4:	1a75      	subs	r5, r6, r1
   bd1e6:	f1a1 0714 	sub.w	r7, r1, #20
   bd1ea:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bd1ec:	42b7      	cmp	r7, r6
   bd1ee:	d01a      	beq.n	bd226 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bd1f0:	b11c      	cbz	r4, bd1fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bd1f2:	4631      	mov	r1, r6
   bd1f4:	4620      	mov	r0, r4
   bd1f6:	f7ff fcab 	bl	bcb50 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bd1fa:	f106 0008 	add.w	r0, r6, #8
   bd1fe:	f7ff fdf9 	bl	bcdf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bd202:	3e14      	subs	r6, #20
   bd204:	3c14      	subs	r4, #20
   bd206:	e7f1      	b.n	bd1ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bd208:	d00d      	beq.n	bd226 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bd20a:	42b5      	cmp	r5, r6
   bd20c:	d00b      	beq.n	bd226 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bd20e:	b11c      	cbz	r4, bd218 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bd210:	4629      	mov	r1, r5
   bd212:	4620      	mov	r0, r4
   bd214:	f7ff fc9c 	bl	bcb50 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bd218:	f105 0008 	add.w	r0, r5, #8
   bd21c:	f7ff fdea 	bl	bcdf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bd220:	3514      	adds	r5, #20
   bd222:	3414      	adds	r4, #20
   bd224:	e7f1      	b.n	bd20a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bd226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd228 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bd228:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bd22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd22c:	4604      	mov	r4, r0
   bd22e:	460d      	mov	r5, r1
   bd230:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bd232:	d914      	bls.n	bd25e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bd234:	4290      	cmp	r0, r2
   bd236:	d213      	bcs.n	bd260 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bd238:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bd23c:	1a75      	subs	r5, r6, r1
   bd23e:	f1a1 0710 	sub.w	r7, r1, #16
   bd242:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bd244:	42b7      	cmp	r7, r6
   bd246:	d018      	beq.n	bd27a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bd248:	b11c      	cbz	r4, bd252 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bd24a:	4631      	mov	r1, r6
   bd24c:	4620      	mov	r0, r4
   bd24e:	f000 ff4b 	bl	be0e8 <_ZN6StringC1EOS_>
                end->~T();
   bd252:	4630      	mov	r0, r6
   bd254:	f000 fecc 	bl	bdff0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bd258:	3e10      	subs	r6, #16
   bd25a:	3c10      	subs	r4, #16
   bd25c:	e7f2      	b.n	bd244 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bd25e:	d00c      	beq.n	bd27a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bd260:	42b5      	cmp	r5, r6
   bd262:	d00a      	beq.n	bd27a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bd264:	b11c      	cbz	r4, bd26e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bd266:	4629      	mov	r1, r5
   bd268:	4620      	mov	r0, r4
   bd26a:	f000 ff3d 	bl	be0e8 <_ZN6StringC1EOS_>
                p->~T();
   bd26e:	4628      	mov	r0, r5
   bd270:	f000 febe 	bl	bdff0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bd274:	3510      	adds	r5, #16
   bd276:	3410      	adds	r4, #16
   bd278:	e7f2      	b.n	bd260 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bd27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd27c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bd27c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bd27e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bd280:	4605      	mov	r5, r0
        if (n > 0) {
   bd282:	dd11      	ble.n	bd2a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bd284:	0130      	lsls	r0, r6, #4
   bd286:	f7fe fb49 	bl	bb91c <malloc>
            if (!d) {
   bd28a:	4604      	mov	r4, r0
   bd28c:	b158      	cbz	r0, bd2a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bd28e:	e9d5 1200 	ldrd	r1, r2, [r5]
   bd292:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bd296:	f7ff ffc7 	bl	bd228 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bd29a:	6828      	ldr	r0, [r5, #0]
   bd29c:	f7fe fb46 	bl	bb92c <free>
        data_ = d;
   bd2a0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bd2a2:	60ae      	str	r6, [r5, #8]
        return true;
   bd2a4:	2001      	movs	r0, #1
    }
   bd2a6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bd2a8:	2400      	movs	r4, #0
   bd2aa:	e7f6      	b.n	bd29a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bd2ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bd2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd2b0:	4690      	mov	r8, r2
   bd2b2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bd2b4:	2300      	movs	r3, #0
   bd2b6:	9103      	str	r1, [sp, #12]
    return size_;
   bd2b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bd2bc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bd2be:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bd2c0:	4299      	cmp	r1, r3
        capacity_(0) {
   bd2c2:	e9c0 3300 	strd	r3, r3, [r0]
   bd2c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bd2ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bd2ce:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bd2d2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bd2d4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bd2d6:	dc23      	bgt.n	bd320 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bd2d8:	e9d8 5700 	ldrd	r5, r7, [r8]
   bd2dc:	2314      	movs	r3, #20
   bd2de:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bd2e2:	42af      	cmp	r7, r5
   bd2e4:	d03b      	beq.n	bd35e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bd2e6:	4629      	mov	r1, r5
   bd2e8:	a80b      	add	r0, sp, #44	; 0x2c
   bd2ea:	f000 fefd 	bl	be0e8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bd2ee:	a90b      	add	r1, sp, #44	; 0x2c
   bd2f0:	a80f      	add	r0, sp, #60	; 0x3c
   bd2f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bd2f4:	f000 fef8 	bl	be0e8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bd2f8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bd2fc:	4299      	cmp	r1, r3
   bd2fe:	da1b      	bge.n	bd338 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bd300:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bd302:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bd304:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bd308:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bd30c:	4631      	mov	r1, r6
   bd30e:	f106 0010 	add.w	r0, r6, #16
   bd312:	f7ff ff89 	bl	bd228 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bd316:	b9ee      	cbnz	r6, bd354 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bd318:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd31a:	3301      	adds	r3, #1
   bd31c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bd31e:	e011      	b.n	bd344 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bd320:	a808      	add	r0, sp, #32
   bd322:	f7ff ffab 	bl	bd27c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bd326:	2800      	cmp	r0, #0
   bd328:	d1d6      	bne.n	bd2d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bd32a:	a808      	add	r0, sp, #32
   bd32c:	f7fe fba1 	bl	bba72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bd330:	4620      	mov	r0, r4
   bd332:	b015      	add	sp, #84	; 0x54
   bd334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bd338:	3101      	adds	r1, #1
   bd33a:	a808      	add	r0, sp, #32
   bd33c:	f7ff ff9e 	bl	bd27c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bd340:	2800      	cmp	r0, #0
   bd342:	d1dd      	bne.n	bd300 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bd344:	a80f      	add	r0, sp, #60	; 0x3c
   bd346:	f000 fe53 	bl	bdff0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bd34a:	a80b      	add	r0, sp, #44	; 0x2c
   bd34c:	f000 fe50 	bl	bdff0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bd350:	3514      	adds	r5, #20
   bd352:	e7c6      	b.n	bd2e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bd354:	a90f      	add	r1, sp, #60	; 0x3c
   bd356:	4630      	mov	r0, r6
   bd358:	f000 fec6 	bl	be0e8 <_ZN6StringC1EOS_>
   bd35c:	e7dc      	b.n	bd318 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bd35e:	2600      	movs	r6, #0
   bd360:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bd364:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bd366:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bd36a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bd36e:	429e      	cmp	r6, r3
   bd370:	da7c      	bge.n	bd46c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bd372:	0133      	lsls	r3, r6, #4
   bd374:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bd376:	9306      	str	r3, [sp, #24]
        if (!category) {
   bd378:	b90b      	cbnz	r3, bd37e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bd37a:	3601      	adds	r6, #1
   bd37c:	e7f5      	b.n	bd36a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bd37e:	2300      	movs	r3, #0
   bd380:	9307      	str	r3, [sp, #28]
   bd382:	fb09 f306 	mul.w	r3, r9, r6
   bd386:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bd388:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bd38a:	a907      	add	r1, sp, #28
   bd38c:	a806      	add	r0, sp, #24
   bd38e:	f7ff fb5e 	bl	bca4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bd392:	4682      	mov	sl, r0
   bd394:	2800      	cmp	r0, #0
   bd396:	d0f0      	beq.n	bd37a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bd398:	f04f 0300 	mov.w	r3, #0
   bd39c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bd3a0:	4601      	mov	r1, r0
   bd3a2:	9a07      	ldr	r2, [sp, #28]
   bd3a4:	f10d 0317 	add.w	r3, sp, #23
   bd3a8:	4628      	mov	r0, r5
   bd3aa:	f7ff fbe5 	bl	bcb78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bd3ae:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bd3b2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bd3b4:	2f00      	cmp	r7, #0
   bd3b6:	d14a      	bne.n	bd44e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bd3b8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bd3bc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bd3c0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bd3c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bd3c8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bd3cc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bd3d0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bd3d2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bd3d6:	4293      	cmp	r3, r2
   bd3d8:	db17      	blt.n	bd40a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bd3da:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bd3de:	f1ba 0f00 	cmp.w	sl, #0
   bd3e2:	dd30      	ble.n	bd446 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bd3e4:	fb09 f00a 	mul.w	r0, r9, sl
   bd3e8:	f7fe fa98 	bl	bb91c <malloc>
            if (!d) {
   bd3ec:	4683      	mov	fp, r0
   bd3ee:	b360      	cbz	r0, bd44a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bd3f0:	e9d5 1200 	ldrd	r1, r2, [r5]
   bd3f4:	fb09 1202 	mla	r2, r9, r2, r1
   bd3f8:	f7ff feea 	bl	bd1d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bd3fc:	6828      	ldr	r0, [r5, #0]
   bd3fe:	f7fe fa95 	bl	bb92c <free>
        data_ = d;
   bd402:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bd406:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bd40a:	682b      	ldr	r3, [r5, #0]
   bd40c:	9a01      	ldr	r2, [sp, #4]
   bd40e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bd412:	686a      	ldr	r2, [r5, #4]
   bd414:	4651      	mov	r1, sl
   bd416:	fb09 3202 	mla	r2, r9, r2, r3
   bd41a:	f10a 0014 	add.w	r0, sl, #20
   bd41e:	f7ff fed7 	bl	bd1d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bd422:	f1ba 0f00 	cmp.w	sl, #0
   bd426:	d003      	beq.n	bd430 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bd428:	a90f      	add	r1, sp, #60	; 0x3c
   bd42a:	4650      	mov	r0, sl
   bd42c:	f7ff fb90 	bl	bcb50 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bd430:	686b      	ldr	r3, [r5, #4]
   bd432:	3301      	adds	r3, #1
   bd434:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bd436:	a811      	add	r0, sp, #68	; 0x44
   bd438:	f7ff fcdc 	bl	bcdf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bd43c:	b13f      	cbz	r7, bd44e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bd43e:	a80b      	add	r0, sp, #44	; 0x2c
   bd440:	f7ff fcd8 	bl	bcdf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bd444:	e771      	b.n	bd32a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bd446:	46bb      	mov	fp, r7
   bd448:	e7d8      	b.n	bd3fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bd44a:	2701      	movs	r7, #1
   bd44c:	e7f3      	b.n	bd436 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bd44e:	9b01      	ldr	r3, [sp, #4]
   bd450:	682d      	ldr	r5, [r5, #0]
   bd452:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bd456:	9b06      	ldr	r3, [sp, #24]
   bd458:	781b      	ldrb	r3, [r3, #0]
   bd45a:	b92b      	cbnz	r3, bd468 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bd45c:	f8d8 3000 	ldr.w	r3, [r8]
   bd460:	9a02      	ldr	r2, [sp, #8]
   bd462:	4413      	add	r3, r2
   bd464:	7c1b      	ldrb	r3, [r3, #16]
   bd466:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bd468:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bd46a:	e78e      	b.n	bd38a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd46c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bd46e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd470:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd472:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd474:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd476:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bd478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bd47a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd47c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bd47e:	60a2      	str	r2, [r4, #8]
   bd480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bd482:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd484:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd486:	60e2      	str	r2, [r4, #12]
   bd488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bd48a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd48c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd48e:	6122      	str	r2, [r4, #16]
   bd490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bd492:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bd494:	9b03      	ldr	r3, [sp, #12]
   bd496:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bd498:	6162      	str	r2, [r4, #20]
   bd49a:	7623      	strb	r3, [r4, #24]
   bd49c:	e7cf      	b.n	bd43e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bd4a0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bd4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd4a2:	4604      	mov	r4, r0
   bd4a4:	b087      	sub	sp, #28
   bd4a6:	460d      	mov	r5, r1
        filter_(level, filters) {
   bd4a8:	4626      	mov	r6, r4
        stream_(&stream) {
   bd4aa:	4619      	mov	r1, r3
   bd4ac:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bd4ae:	4617      	mov	r7, r2
        stream_(&stream) {
   bd4b0:	f7f9 f9e5 	bl	b687e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bd4b4:	4b0b      	ldr	r3, [pc, #44]	; (bd4e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bd4b6:	f846 3b04 	str.w	r3, [r6], #4
   bd4ba:	4669      	mov	r1, sp
   bd4bc:	a803      	add	r0, sp, #12
   bd4be:	f7f9 f9de 	bl	b687e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bd4c2:	aa03      	add	r2, sp, #12
   bd4c4:	4639      	mov	r1, r7
   bd4c6:	4630      	mov	r0, r6
   bd4c8:	f7ff fef0 	bl	bd2ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd4cc:	a803      	add	r0, sp, #12
   bd4ce:	f7f9 f995 	bl	b67fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bd4d2:	4668      	mov	r0, sp
   bd4d4:	f7f9 f992 	bl	b67fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bd4d8:	4b03      	ldr	r3, [pc, #12]	; (bd4e8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bd4da:	6023      	str	r3, [r4, #0]
}
   bd4dc:	4620      	mov	r0, r4
        stream_(&stream) {
   bd4de:	6225      	str	r5, [r4, #32]
}
   bd4e0:	b007      	add	sp, #28
   bd4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd4e4:	000c097c 	.word	0x000c097c
   bd4e8:	000c15ac 	.word	0x000c15ac

000bd4ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bd4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd4ee:	460f      	mov	r7, r1
   bd4f0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bd4f2:	491d      	ldr	r1, [pc, #116]	; (bd568 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bd4f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bd4f6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bd4f8:	4616      	mov	r6, r2
   bd4fa:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bd4fc:	f002 f9ef 	bl	bf8de <strcmp>
   bd500:	b9c0      	cbnz	r0, bd534 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bd502:	b1a4      	cbz	r4, bd52e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bd504:	4629      	mov	r1, r5
   bd506:	a801      	add	r0, sp, #4
   bd508:	f7ff fcbc 	bl	bce84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bd50c:	4917      	ldr	r1, [pc, #92]	; (bd56c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bd50e:	2024      	movs	r0, #36	; 0x24
   bd510:	f001 fc1e 	bl	bed50 <_ZnwjRKSt9nothrow_t>
   bd514:	4605      	mov	r5, r0
   bd516:	b130      	cbz	r0, bd526 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bd518:	ab01      	add	r3, sp, #4
   bd51a:	4632      	mov	r2, r6
   bd51c:	4621      	mov	r1, r4
   bd51e:	f7ff ffbf 	bl	bd4a0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd522:	4b13      	ldr	r3, [pc, #76]	; (bd570 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bd524:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bd526:	a801      	add	r0, sp, #4
   bd528:	f7f9 f968 	bl	b67fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bd52c:	462c      	mov	r4, r5
}
   bd52e:	4620      	mov	r0, r4
   bd530:	b005      	add	sp, #20
   bd532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bd534:	490f      	ldr	r1, [pc, #60]	; (bd574 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bd536:	4638      	mov	r0, r7
   bd538:	f002 f9d1 	bl	bf8de <strcmp>
   bd53c:	b990      	cbnz	r0, bd564 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bd53e:	2c00      	cmp	r4, #0
   bd540:	d0f5      	beq.n	bd52e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bd542:	4629      	mov	r1, r5
   bd544:	a801      	add	r0, sp, #4
   bd546:	f7ff fc9d 	bl	bce84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bd54a:	4908      	ldr	r1, [pc, #32]	; (bd56c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bd54c:	2024      	movs	r0, #36	; 0x24
   bd54e:	f001 fbff 	bl	bed50 <_ZnwjRKSt9nothrow_t>
   bd552:	4605      	mov	r5, r0
   bd554:	2800      	cmp	r0, #0
   bd556:	d0e6      	beq.n	bd526 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bd558:	ab01      	add	r3, sp, #4
   bd55a:	4632      	mov	r2, r6
   bd55c:	4621      	mov	r1, r4
   bd55e:	f7ff ff9f 	bl	bd4a0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd562:	e7e0      	b.n	bd526 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bd564:	2400      	movs	r4, #0
   bd566:	e7e2      	b.n	bd52e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bd568:	000c1536 	.word	0x000c1536
   bd56c:	000c1700 	.word	0x000c1700
   bd570:	000c15c4 	.word	0x000c15c4
   bd574:	000c153a 	.word	0x000c153a

000bd578 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bd578:	4b01      	ldr	r3, [pc, #4]	; (bd580 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bd57a:	4a02      	ldr	r2, [pc, #8]	; (bd584 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bd57c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bd57e:	4770      	bx	lr
   bd580:	2003e658 	.word	0x2003e658
   bd584:	000c154b 	.word	0x000c154b

000bd588 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd58c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bd58e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd592:	4604      	mov	r4, r0
   bd594:	460e      	mov	r6, r1
   bd596:	4617      	mov	r7, r2
   bd598:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bd59a:	f001 f9b7 	bl	be90c <_Z16_fetch_usbserialv>
   bd59e:	4581      	cmp	r9, r0
   bd5a0:	d04c      	beq.n	bd63c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bd5a2:	792b      	ldrb	r3, [r5, #4]
   bd5a4:	0719      	lsls	r1, r3, #28
   bd5a6:	d504      	bpl.n	bd5b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bd5a8:	696a      	ldr	r2, [r5, #20]
   bd5aa:	4954      	ldr	r1, [pc, #336]	; (bd6fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bd5ac:	4620      	mov	r0, r4
   bd5ae:	f7ff fac0 	bl	bcb32 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bd5b2:	f1b8 0f00 	cmp.w	r8, #0
   bd5b6:	d00d      	beq.n	bd5d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bd5b8:	215b      	movs	r1, #91	; 0x5b
   bd5ba:	4620      	mov	r0, r4
   bd5bc:	f7ff faad 	bl	bcb1a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bd5c0:	4641      	mov	r1, r8
   bd5c2:	4620      	mov	r0, r4
   bd5c4:	f7ff fa9a 	bl	bcafc <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bd5c8:	6823      	ldr	r3, [r4, #0]
   bd5ca:	494d      	ldr	r1, [pc, #308]	; (bd700 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bd5cc:	68db      	ldr	r3, [r3, #12]
   bd5ce:	2202      	movs	r2, #2
   bd5d0:	4620      	mov	r0, r4
   bd5d2:	4798      	blx	r3
    if (attr.has_file) {
   bd5d4:	792b      	ldrb	r3, [r5, #4]
   bd5d6:	07da      	lsls	r2, r3, #31
   bd5d8:	d523      	bpl.n	bd622 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bd5da:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bd5de:	212f      	movs	r1, #47	; 0x2f
   bd5e0:	4640      	mov	r0, r8
   bd5e2:	f002 f9db 	bl	bf99c <strrchr>
    if (s1) {
   bd5e6:	b108      	cbz	r0, bd5ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bd5e8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bd5ec:	4641      	mov	r1, r8
   bd5ee:	4620      	mov	r0, r4
   bd5f0:	f7ff fa84 	bl	bcafc <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bd5f4:	792b      	ldrb	r3, [r5, #4]
   bd5f6:	079b      	lsls	r3, r3, #30
   bd5f8:	d508      	bpl.n	bd60c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bd5fa:	213a      	movs	r1, #58	; 0x3a
   bd5fc:	4620      	mov	r0, r4
   bd5fe:	f7ff fa8c 	bl	bcb1a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bd602:	68ea      	ldr	r2, [r5, #12]
   bd604:	493f      	ldr	r1, [pc, #252]	; (bd704 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bd606:	4620      	mov	r0, r4
   bd608:	f7ff fa93 	bl	bcb32 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bd60c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bd60e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bd610:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bd614:	68db      	ldr	r3, [r3, #12]
   bd616:	bf14      	ite	ne
   bd618:	493b      	ldrne	r1, [pc, #236]	; (bd708 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bd61a:	493c      	ldreq	r1, [pc, #240]	; (bd70c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bd61c:	2202      	movs	r2, #2
            write(": ", 2);
   bd61e:	4620      	mov	r0, r4
   bd620:	4798      	blx	r3
    if (attr.has_function) {
   bd622:	792b      	ldrb	r3, [r5, #4]
   bd624:	0758      	lsls	r0, r3, #29
   bd626:	d51d      	bpl.n	bd664 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bd628:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bd62a:	460b      	mov	r3, r1
   bd62c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bd62e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd632:	b160      	cbz	r0, bd64e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bd634:	2820      	cmp	r0, #32
   bd636:	d108      	bne.n	bd64a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bd638:	4619      	mov	r1, r3
   bd63a:	e7f7      	b.n	bd62c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bd63c:	4834      	ldr	r0, [pc, #208]	; (bd710 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bd63e:	f000 f966 	bl	bd90e <_ZN5spark12NetworkClass9listeningEv>
   bd642:	2800      	cmp	r0, #0
   bd644:	d0ad      	beq.n	bd5a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bd646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bd64a:	2828      	cmp	r0, #40	; 0x28
   bd64c:	d1ee      	bne.n	bd62c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bd64e:	6823      	ldr	r3, [r4, #0]
   bd650:	1a52      	subs	r2, r2, r1
   bd652:	68db      	ldr	r3, [r3, #12]
   bd654:	4620      	mov	r0, r4
   bd656:	4798      	blx	r3
        write("(): ", 4);
   bd658:	6823      	ldr	r3, [r4, #0]
   bd65a:	492e      	ldr	r1, [pc, #184]	; (bd714 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bd65c:	68db      	ldr	r3, [r3, #12]
   bd65e:	2204      	movs	r2, #4
   bd660:	4620      	mov	r0, r4
   bd662:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bd664:	2100      	movs	r1, #0
   bd666:	4638      	mov	r0, r7
   bd668:	f7fd fffc 	bl	bb664 <log_level_name>
   bd66c:	4601      	mov	r1, r0
    write(s);
   bd66e:	4620      	mov	r0, r4
   bd670:	f7ff fa44 	bl	bcafc <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bd674:	6823      	ldr	r3, [r4, #0]
   bd676:	4925      	ldr	r1, [pc, #148]	; (bd70c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bd678:	68db      	ldr	r3, [r3, #12]
   bd67a:	2202      	movs	r2, #2
   bd67c:	4620      	mov	r0, r4
   bd67e:	4798      	blx	r3
    if (msg) {
   bd680:	b11e      	cbz	r6, bd68a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bd682:	4631      	mov	r1, r6
   bd684:	4620      	mov	r0, r4
   bd686:	f7ff fa39 	bl	bcafc <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bd68a:	792b      	ldrb	r3, [r5, #4]
   bd68c:	f013 0f30 	tst.w	r3, #48	; 0x30
   bd690:	d02c      	beq.n	bd6ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bd692:	6823      	ldr	r3, [r4, #0]
   bd694:	4920      	ldr	r1, [pc, #128]	; (bd718 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bd696:	68db      	ldr	r3, [r3, #12]
   bd698:	2202      	movs	r2, #2
   bd69a:	4620      	mov	r0, r4
   bd69c:	4798      	blx	r3
        if (attr.has_code) {
   bd69e:	792b      	ldrb	r3, [r5, #4]
   bd6a0:	06d9      	lsls	r1, r3, #27
   bd6a2:	d50a      	bpl.n	bd6ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bd6a4:	6823      	ldr	r3, [r4, #0]
   bd6a6:	491d      	ldr	r1, [pc, #116]	; (bd71c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bd6a8:	68db      	ldr	r3, [r3, #12]
   bd6aa:	2207      	movs	r2, #7
   bd6ac:	4620      	mov	r0, r4
   bd6ae:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bd6b0:	69aa      	ldr	r2, [r5, #24]
   bd6b2:	491b      	ldr	r1, [pc, #108]	; (bd720 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bd6b4:	4620      	mov	r0, r4
   bd6b6:	f7ff fa3c 	bl	bcb32 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bd6ba:	792b      	ldrb	r3, [r5, #4]
   bd6bc:	069a      	lsls	r2, r3, #26
   bd6be:	d511      	bpl.n	bd6e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bd6c0:	06db      	lsls	r3, r3, #27
   bd6c2:	d505      	bpl.n	bd6d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bd6c4:	6823      	ldr	r3, [r4, #0]
   bd6c6:	4910      	ldr	r1, [pc, #64]	; (bd708 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bd6c8:	68db      	ldr	r3, [r3, #12]
   bd6ca:	2202      	movs	r2, #2
   bd6cc:	4620      	mov	r0, r4
   bd6ce:	4798      	blx	r3
            write("details = ", 10);
   bd6d0:	6823      	ldr	r3, [r4, #0]
   bd6d2:	4914      	ldr	r1, [pc, #80]	; (bd724 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bd6d4:	68db      	ldr	r3, [r3, #12]
   bd6d6:	4620      	mov	r0, r4
   bd6d8:	220a      	movs	r2, #10
   bd6da:	4798      	blx	r3
            write(attr.details);
   bd6dc:	69e9      	ldr	r1, [r5, #28]
   bd6de:	4620      	mov	r0, r4
   bd6e0:	f7ff fa0c 	bl	bcafc <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bd6e4:	215d      	movs	r1, #93	; 0x5d
   bd6e6:	4620      	mov	r0, r4
   bd6e8:	f7ff fa17 	bl	bcb1a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bd6ec:	6823      	ldr	r3, [r4, #0]
   bd6ee:	490e      	ldr	r1, [pc, #56]	; (bd728 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bd6f0:	68db      	ldr	r3, [r3, #12]
   bd6f2:	4620      	mov	r0, r4
   bd6f4:	2202      	movs	r2, #2
}
   bd6f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bd6fa:	4718      	bx	r3
   bd6fc:	000c154f 	.word	0x000c154f
   bd700:	000c1556 	.word	0x000c1556
   bd704:	000c0ae7 	.word	0x000c0ae7
   bd708:	000c1559 	.word	0x000c1559
   bd70c:	000c155e 	.word	0x000c155e
   bd710:	2003e684 	.word	0x2003e684
   bd714:	000c155c 	.word	0x000c155c
   bd718:	000c1561 	.word	0x000c1561
   bd71c:	000c1564 	.word	0x000c1564
   bd720:	000c0869 	.word	0x000c0869
   bd724:	000c156c 	.word	0x000c156c
   bd728:	000c1577 	.word	0x000c1577

000bd72c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd730:	b085      	sub	sp, #20
    return stream_;
   bd732:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bd736:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bd738:	4605      	mov	r5, r0
   bd73a:	460f      	mov	r7, r1
   bd73c:	4690      	mov	r8, r2
   bd73e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bd740:	f001 f8e4 	bl	be90c <_Z16_fetch_usbserialv>
   bd744:	4581      	cmp	r9, r0
   bd746:	d105      	bne.n	bd754 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bd748:	4849      	ldr	r0, [pc, #292]	; (bd870 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bd74a:	f000 f8e0 	bl	bd90e <_ZN5spark12NetworkClass9listeningEv>
   bd74e:	2800      	cmp	r0, #0
   bd750:	f040 808a 	bne.w	bd868 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bd754:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bd756:	4a47      	ldr	r2, [pc, #284]	; (bd874 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bd758:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bd75a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bd75e:	a801      	add	r0, sp, #4
        strm_(stream) {
   bd760:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bd762:	f88d 9008 	strb.w	r9, [sp, #8]
   bd766:	f7ff f8b4 	bl	bc8d2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bd76a:	4649      	mov	r1, r9
   bd76c:	4640      	mov	r0, r8
   bd76e:	f7fd ff79 	bl	bb664 <log_level_name>
    json.name("l", 1).value(s);
   bd772:	4941      	ldr	r1, [pc, #260]	; (bd878 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bd774:	4680      	mov	r8, r0
   bd776:	2201      	movs	r2, #1
   bd778:	a801      	add	r0, sp, #4
   bd77a:	f7ff f939 	bl	bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd77e:	4641      	mov	r1, r8
   bd780:	f7ff f9ae 	bl	bcae0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bd784:	b13f      	cbz	r7, bd796 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bd786:	493d      	ldr	r1, [pc, #244]	; (bd87c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bd788:	2201      	movs	r2, #1
   bd78a:	a801      	add	r0, sp, #4
   bd78c:	f7ff f930 	bl	bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd790:	4639      	mov	r1, r7
   bd792:	f7ff f9a5 	bl	bcae0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bd796:	b13e      	cbz	r6, bd7a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bd798:	4939      	ldr	r1, [pc, #228]	; (bd880 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bd79a:	2201      	movs	r2, #1
   bd79c:	a801      	add	r0, sp, #4
   bd79e:	f7ff f927 	bl	bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd7a2:	4631      	mov	r1, r6
   bd7a4:	f7ff f99c 	bl	bcae0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bd7a8:	7923      	ldrb	r3, [r4, #4]
   bd7aa:	07df      	lsls	r7, r3, #31
   bd7ac:	d50e      	bpl.n	bd7cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bd7ae:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bd7b0:	212f      	movs	r1, #47	; 0x2f
   bd7b2:	4630      	mov	r0, r6
   bd7b4:	f002 f8f2 	bl	bf99c <strrchr>
    if (s1) {
   bd7b8:	b100      	cbz	r0, bd7bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bd7ba:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bd7bc:	4931      	ldr	r1, [pc, #196]	; (bd884 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bd7be:	2201      	movs	r2, #1
   bd7c0:	a801      	add	r0, sp, #4
   bd7c2:	f7ff f915 	bl	bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd7c6:	4631      	mov	r1, r6
   bd7c8:	f7ff f98a 	bl	bcae0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bd7cc:	7923      	ldrb	r3, [r4, #4]
   bd7ce:	079e      	lsls	r6, r3, #30
   bd7d0:	d507      	bpl.n	bd7e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bd7d2:	492d      	ldr	r1, [pc, #180]	; (bd888 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bd7d4:	2202      	movs	r2, #2
   bd7d6:	a801      	add	r0, sp, #4
   bd7d8:	f7ff f90a 	bl	bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd7dc:	68e1      	ldr	r1, [r4, #12]
   bd7de:	f7ff f885 	bl	bc8ec <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bd7e2:	7923      	ldrb	r3, [r4, #4]
   bd7e4:	0758      	lsls	r0, r3, #29
   bd7e6:	d514      	bpl.n	bd812 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bd7e8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bd7ea:	4633      	mov	r3, r6
   bd7ec:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bd7ee:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd7f2:	b12a      	cbz	r2, bd800 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bd7f4:	2a20      	cmp	r2, #32
   bd7f6:	d101      	bne.n	bd7fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bd7f8:	461e      	mov	r6, r3
   bd7fa:	e7f7      	b.n	bd7ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bd7fc:	2a28      	cmp	r2, #40	; 0x28
   bd7fe:	d1f5      	bne.n	bd7ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bd800:	4922      	ldr	r1, [pc, #136]	; (bd88c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bd802:	2202      	movs	r2, #2
   bd804:	a801      	add	r0, sp, #4
   bd806:	f7ff f8f3 	bl	bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd80a:	1bba      	subs	r2, r7, r6
   bd80c:	4631      	mov	r1, r6
   bd80e:	f7ff f8ff 	bl	bca10 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bd812:	7923      	ldrb	r3, [r4, #4]
   bd814:	0719      	lsls	r1, r3, #28
   bd816:	d507      	bpl.n	bd828 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bd818:	491d      	ldr	r1, [pc, #116]	; (bd890 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bd81a:	2201      	movs	r2, #1
   bd81c:	a801      	add	r0, sp, #4
   bd81e:	f7ff f8e7 	bl	bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd822:	6961      	ldr	r1, [r4, #20]
   bd824:	f7ff f874 	bl	bc910 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bd828:	7923      	ldrb	r3, [r4, #4]
   bd82a:	06da      	lsls	r2, r3, #27
   bd82c:	d508      	bpl.n	bd840 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bd82e:	2204      	movs	r2, #4
   bd830:	4918      	ldr	r1, [pc, #96]	; (bd894 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bd832:	eb0d 0002 	add.w	r0, sp, r2
   bd836:	f7ff f8db 	bl	bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd83a:	69a1      	ldr	r1, [r4, #24]
   bd83c:	f7ff f856 	bl	bc8ec <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bd840:	7923      	ldrb	r3, [r4, #4]
   bd842:	069b      	lsls	r3, r3, #26
   bd844:	d507      	bpl.n	bd856 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bd846:	4914      	ldr	r1, [pc, #80]	; (bd898 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bd848:	2206      	movs	r2, #6
   bd84a:	a801      	add	r0, sp, #4
   bd84c:	f7ff f8d0 	bl	bc9f0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd850:	69e1      	ldr	r1, [r4, #28]
   bd852:	f7ff f945 	bl	bcae0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bd856:	a801      	add	r0, sp, #4
   bd858:	f7ff f825 	bl	bc8a6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bd85c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bd85e:	490f      	ldr	r1, [pc, #60]	; (bd89c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bd860:	6803      	ldr	r3, [r0, #0]
   bd862:	2202      	movs	r2, #2
   bd864:	68db      	ldr	r3, [r3, #12]
   bd866:	4798      	blx	r3
}
   bd868:	b005      	add	sp, #20
   bd86a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd86e:	bf00      	nop
   bd870:	2003e684 	.word	0x2003e684
   bd874:	000c1594 	.word	0x000c1594
   bd878:	000c152c 	.word	0x000c152c
   bd87c:	000c0e7c 	.word	0x000c0e7c
   bd880:	000c1821 	.word	0x000c1821
   bd884:	000bffea 	.word	0x000bffea
   bd888:	000c157a 	.word	0x000c157a
   bd88c:	000c157d 	.word	0x000c157d
   bd890:	000c0856 	.word	0x000c0856
   bd894:	000c1580 	.word	0x000c1580
   bd898:	000c1585 	.word	0x000c1585
   bd89c:	000c1577 	.word	0x000c1577

000bd8a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bd8a0:	2300      	movs	r3, #0
   bd8a2:	6840      	ldr	r0, [r0, #4]
   bd8a4:	461a      	mov	r2, r3
   bd8a6:	f7fd bfd9 	b.w	bb85c <network_connect>

000bd8aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bd8aa:	6840      	ldr	r0, [r0, #4]
   bd8ac:	2200      	movs	r2, #0
   bd8ae:	2102      	movs	r1, #2
   bd8b0:	f7fd bfe4 	b.w	bb87c <network_disconnect>

000bd8b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bd8b4:	2200      	movs	r2, #0
   bd8b6:	6840      	ldr	r0, [r0, #4]
   bd8b8:	4611      	mov	r1, r2
   bd8ba:	f7fd bfd7 	b.w	bb86c <network_connecting>

000bd8be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bd8be:	2200      	movs	r2, #0
   bd8c0:	6840      	ldr	r0, [r0, #4]
   bd8c2:	4611      	mov	r1, r2
   bd8c4:	f7fd bfe2 	b.w	bb88c <network_ready>

000bd8c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bd8c8:	2300      	movs	r3, #0
   bd8ca:	6840      	ldr	r0, [r0, #4]
   bd8cc:	461a      	mov	r2, r3
   bd8ce:	4619      	mov	r1, r3
   bd8d0:	f7fd bfe4 	b.w	bb89c <network_on>

000bd8d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bd8d4:	2300      	movs	r3, #0
   bd8d6:	6840      	ldr	r0, [r0, #4]
   bd8d8:	461a      	mov	r2, r3
   bd8da:	4619      	mov	r1, r3
   bd8dc:	f7fd bfe6 	b.w	bb8ac <network_off>

000bd8e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bd8e0:	6840      	ldr	r0, [r0, #4]
   bd8e2:	2100      	movs	r1, #0
   bd8e4:	f7fe b80a 	b.w	bb8fc <network_is_on>

000bd8e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bd8e8:	6840      	ldr	r0, [r0, #4]
   bd8ea:	2100      	movs	r1, #0
   bd8ec:	f7fe b80e 	b.w	bb90c <network_is_off>

000bd8f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bd8f0:	6840      	ldr	r0, [r0, #4]
   bd8f2:	2200      	movs	r2, #0
   bd8f4:	f081 0101 	eor.w	r1, r1, #1
   bd8f8:	f7fd bfe0 	b.w	bb8bc <network_listen>

000bd8fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bd8fc:	6840      	ldr	r0, [r0, #4]
   bd8fe:	2200      	movs	r2, #0
   bd900:	f7fd bfec 	b.w	bb8dc <network_set_listen_timeout>

000bd904 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bd904:	2200      	movs	r2, #0
   bd906:	6840      	ldr	r0, [r0, #4]
   bd908:	4611      	mov	r1, r2
   bd90a:	f7fd bfef 	b.w	bb8ec <network_get_listen_timeout>

000bd90e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bd90e:	2200      	movs	r2, #0
   bd910:	6840      	ldr	r0, [r0, #4]
   bd912:	4611      	mov	r1, r2
   bd914:	f7fd bfda 	b.w	bb8cc <network_listening>

000bd918 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bd918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd91c:	b095      	sub	sp, #84	; 0x54
   bd91e:	4614      	mov	r4, r2
   bd920:	460d      	mov	r5, r1
   bd922:	4607      	mov	r7, r0
    IPAddress addr;
   bd924:	f7fe fe6e 	bl	bc604 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bd928:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bd92a:	221c      	movs	r2, #28
   bd92c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bd92e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bd930:	f001 ff4a 	bl	bf7c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bd934:	2340      	movs	r3, #64	; 0x40
   bd936:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bd938:	4620      	mov	r0, r4
   bd93a:	466b      	mov	r3, sp
   bd93c:	aa0c      	add	r2, sp, #48	; 0x30
   bd93e:	2100      	movs	r1, #0
   bd940:	f7fd fd30 	bl	bb3a4 <netdb_getaddrinfo>
    if (!r) {
   bd944:	4604      	mov	r4, r0
   bd946:	2800      	cmp	r0, #0
   bd948:	d14b      	bne.n	bd9e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd94a:	4602      	mov	r2, r0
   bd94c:	2101      	movs	r1, #1
   bd94e:	6868      	ldr	r0, [r5, #4]
   bd950:	f7fd ff9c 	bl	bb88c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd954:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd956:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd958:	4622      	mov	r2, r4
   bd95a:	6868      	ldr	r0, [r5, #4]
   bd95c:	f7fd ff96 	bl	bb88c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd960:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd962:	4681      	mov	r9, r0
        bool ok = false;
   bd964:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd966:	2e00      	cmp	r6, #0
   bd968:	d03b      	beq.n	bd9e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bd96a:	2900      	cmp	r1, #0
   bd96c:	d139      	bne.n	bd9e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bd96e:	6873      	ldr	r3, [r6, #4]
   bd970:	2b02      	cmp	r3, #2
   bd972:	d003      	beq.n	bd97c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bd974:	2b0a      	cmp	r3, #10
   bd976:	d011      	beq.n	bd99c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd978:	69f6      	ldr	r6, [r6, #28]
   bd97a:	e7f4      	b.n	bd966 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bd97c:	f1b8 0f00 	cmp.w	r8, #0
   bd980:	d0fa      	beq.n	bd978 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bd982:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bd984:	a806      	add	r0, sp, #24
   bd986:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bd988:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bd98a:	f7fe fe69 	bl	bc660 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bd98e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd990:	1d3c      	adds	r4, r7, #4
   bd992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd994:	682b      	ldr	r3, [r5, #0]
   bd996:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd998:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bd99a:	e7ed      	b.n	bd978 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bd99c:	f1b9 0f00 	cmp.w	r9, #0
   bd9a0:	d0ea      	beq.n	bd978 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bd9a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bd9a4:	2210      	movs	r2, #16
   bd9a6:	a801      	add	r0, sp, #4
   bd9a8:	f001 ff0e 	bl	bf7c8 <memset>
                    a.v = 6;
   bd9ac:	2306      	movs	r3, #6
   bd9ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bd9b2:	ad01      	add	r5, sp, #4
   bd9b4:	f104 0308 	add.w	r3, r4, #8
   bd9b8:	3418      	adds	r4, #24
   bd9ba:	6818      	ldr	r0, [r3, #0]
   bd9bc:	6859      	ldr	r1, [r3, #4]
   bd9be:	462a      	mov	r2, r5
   bd9c0:	c203      	stmia	r2!, {r0, r1}
   bd9c2:	3308      	adds	r3, #8
   bd9c4:	42a3      	cmp	r3, r4
   bd9c6:	4615      	mov	r5, r2
   bd9c8:	d1f7      	bne.n	bd9ba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bd9ca:	a901      	add	r1, sp, #4
   bd9cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bd9ce:	ad07      	add	r5, sp, #28
   bd9d0:	f7fe fe26 	bl	bc620 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bd9d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd9d6:	1d3c      	adds	r4, r7, #4
   bd9d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd9da:	682b      	ldr	r3, [r5, #0]
   bd9dc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd9de:	4649      	mov	r1, r9
   bd9e0:	e7ca      	b.n	bd978 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bd9e2:	9800      	ldr	r0, [sp, #0]
   bd9e4:	f7fd fcd6 	bl	bb394 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bd9e8:	4638      	mov	r0, r7
   bd9ea:	b015      	add	sp, #84	; 0x54
   bd9ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bd9f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bd9f0:	4b02      	ldr	r3, [pc, #8]	; (bd9fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bd9f2:	4a03      	ldr	r2, [pc, #12]	; (bda00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bd9f4:	601a      	str	r2, [r3, #0]
   bd9f6:	2200      	movs	r2, #0
   bd9f8:	605a      	str	r2, [r3, #4]

} // spark
   bd9fa:	4770      	bx	lr
   bd9fc:	2003e684 	.word	0x2003e684
   bda00:	000c160c 	.word	0x000c160c

000bda04 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bda04:	b508      	push	{r3, lr}
            return &Wire1;
   bda06:	f001 f93f 	bl	bec88 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bda0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bda0e:	f7fe bd67 	b.w	bc4e0 <_ZN7TwoWire4lockEv>

000bda12 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bda12:	b510      	push	{r4, lr}
   bda14:	4604      	mov	r4, r0
    lock_(_lock)
   bda16:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bda18:	b109      	cbz	r1, bda1e <_ZN4PMICC1Eb+0xc>
        lock();
   bda1a:	f7ff fff3 	bl	bda04 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bda1e:	4620      	mov	r0, r4
   bda20:	bd10      	pop	{r4, pc}

000bda22 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bda22:	b508      	push	{r3, lr}
            return &Wire1;
   bda24:	f001 f930 	bl	bec88 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bda28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bda2c:	f7fe bd61 	b.w	bc4f2 <_ZN7TwoWire6unlockEv>

000bda30 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bda30:	b510      	push	{r4, lr}
    if (lock_) {
   bda32:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bda34:	4604      	mov	r4, r0
    if (lock_) {
   bda36:	b10b      	cbz	r3, bda3c <_ZN4PMICD1Ev+0xc>
        unlock();
   bda38:	f7ff fff3 	bl	bda22 <_ZN4PMIC6unlockEv>
}
   bda3c:	4620      	mov	r0, r4
   bda3e:	bd10      	pop	{r4, pc}

000bda40 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bda40:	b510      	push	{r4, lr}
   bda42:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bda44:	6800      	ldr	r0, [r0, #0]
   bda46:	f7ff ffec 	bl	bda22 <_ZN4PMIC6unlockEv>
   bda4a:	4620      	mov	r0, r4
   bda4c:	bd10      	pop	{r4, pc}

000bda4e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bda4e:	b530      	push	{r4, r5, lr}
   bda50:	b087      	sub	sp, #28
   bda52:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bda54:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bda56:	f7ff ffd5 	bl	bda04 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bda5a:	226b      	movs	r2, #107	; 0x6b
   bda5c:	2300      	movs	r3, #0
   bda5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bda62:	2401      	movs	r4, #1
   bda64:	230a      	movs	r3, #10
   bda66:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bda6a:	f001 f90d 	bl	bec88 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bda6e:	a902      	add	r1, sp, #8
   bda70:	f7fe fd1a 	bl	bc4a8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bda74:	f001 f908 	bl	bec88 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bda78:	6803      	ldr	r3, [r0, #0]
   bda7a:	4629      	mov	r1, r5
   bda7c:	689b      	ldr	r3, [r3, #8]
   bda7e:	4798      	blx	r3
            return &Wire1;
   bda80:	f001 f902 	bl	bec88 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bda84:	4621      	mov	r1, r4
   bda86:	f7fe fd27 	bl	bc4d8 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bda8a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bda8c:	f001 f8fc 	bl	bec88 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bda90:	a902      	add	r1, sp, #8
   bda92:	f7fe fcd9 	bl	bc448 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bda96:	f001 f8f7 	bl	bec88 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bda9a:	6803      	ldr	r3, [r0, #0]
   bda9c:	695b      	ldr	r3, [r3, #20]
   bda9e:	4798      	blx	r3
   bdaa0:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bdaa2:	a801      	add	r0, sp, #4
   bdaa4:	f7ff ffcc 	bl	bda40 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bdaa8:	b2e0      	uxtb	r0, r4
   bdaaa:	b007      	add	sp, #28
   bdaac:	bd30      	pop	{r4, r5, pc}

000bdaae <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bdaae:	b570      	push	{r4, r5, r6, lr}
   bdab0:	b086      	sub	sp, #24
   bdab2:	460d      	mov	r5, r1
   bdab4:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdab6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bdab8:	f7ff ffa4 	bl	bda04 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bdabc:	226b      	movs	r2, #107	; 0x6b
   bdabe:	2300      	movs	r3, #0
   bdac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bdac4:	2601      	movs	r6, #1
   bdac6:	230a      	movs	r3, #10
   bdac8:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bdacc:	f001 f8dc 	bl	bec88 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bdad0:	a902      	add	r1, sp, #8
   bdad2:	f7fe fce9 	bl	bc4a8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bdad6:	f001 f8d7 	bl	bec88 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bdada:	6803      	ldr	r3, [r0, #0]
   bdadc:	4629      	mov	r1, r5
   bdade:	689b      	ldr	r3, [r3, #8]
   bdae0:	4798      	blx	r3
            return &Wire1;
   bdae2:	f001 f8d1 	bl	bec88 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bdae6:	6803      	ldr	r3, [r0, #0]
   bdae8:	4621      	mov	r1, r4
   bdaea:	689b      	ldr	r3, [r3, #8]
   bdaec:	4798      	blx	r3
            return &Wire1;
   bdaee:	f001 f8cb 	bl	bec88 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bdaf2:	4631      	mov	r1, r6
   bdaf4:	f7fe fcf0 	bl	bc4d8 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bdaf8:	a801      	add	r0, sp, #4
   bdafa:	f7ff ffa1 	bl	bda40 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bdafe:	b006      	add	sp, #24
   bdb00:	bd70      	pop	{r4, r5, r6, pc}

000bdb02 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bdb02:	b513      	push	{r0, r1, r4, lr}
   bdb04:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdb06:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bdb08:	f7ff ff7c 	bl	bda04 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bdb0c:	2101      	movs	r1, #1
   bdb0e:	4620      	mov	r0, r4
   bdb10:	f7ff ff9d 	bl	bda4e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bdb14:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bdb18:	2b10      	cmp	r3, #16
   bdb1a:	d007      	beq.n	bdb2c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bdb1c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bdb20:	f042 0210 	orr.w	r2, r2, #16
   bdb24:	2101      	movs	r1, #1
   bdb26:	4620      	mov	r0, r4
   bdb28:	f7ff ffc1 	bl	bdaae <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bdb2c:	a801      	add	r0, sp, #4
   bdb2e:	f7ff ff87 	bl	bda40 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bdb32:	2001      	movs	r0, #1
   bdb34:	b002      	add	sp, #8
   bdb36:	bd10      	pop	{r4, pc}

000bdb38 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bdb38:	b513      	push	{r0, r1, r4, lr}
   bdb3a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdb3c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bdb3e:	f7ff ff61 	bl	bda04 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bdb42:	2101      	movs	r1, #1
   bdb44:	4620      	mov	r0, r4
   bdb46:	f7ff ff82 	bl	bda4e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bdb4a:	f010 0f30 	tst.w	r0, #48	; 0x30
   bdb4e:	d005      	beq.n	bdb5c <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bdb50:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bdb54:	2101      	movs	r1, #1
   bdb56:	4620      	mov	r0, r4
   bdb58:	f7ff ffa9 	bl	bdaae <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bdb5c:	a801      	add	r0, sp, #4
   bdb5e:	f7ff ff6f 	bl	bda40 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bdb62:	2001      	movs	r0, #1
   bdb64:	b002      	add	sp, #8
   bdb66:	bd10      	pop	{r4, pc}

000bdb68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bdb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdb6a:	4606      	mov	r6, r0
   bdb6c:	460d      	mov	r5, r1
  size_t n = 0;
   bdb6e:	188f      	adds	r7, r1, r2
   bdb70:	2400      	movs	r4, #0
  while (size--) {
   bdb72:	42bd      	cmp	r5, r7
   bdb74:	d00c      	beq.n	bdb90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bdb76:	6833      	ldr	r3, [r6, #0]
   bdb78:	f815 1b01 	ldrb.w	r1, [r5], #1
   bdb7c:	689b      	ldr	r3, [r3, #8]
   bdb7e:	4630      	mov	r0, r6
   bdb80:	4798      	blx	r3
     if (chunk>=0)
   bdb82:	1e03      	subs	r3, r0, #0
   bdb84:	db01      	blt.n	bdb8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bdb86:	441c      	add	r4, r3
  while (size--) {
   bdb88:	e7f3      	b.n	bdb72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bdb8a:	2c00      	cmp	r4, #0
   bdb8c:	bf08      	it	eq
   bdb8e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bdb90:	4620      	mov	r0, r4
   bdb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdb94 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bdb94:	b513      	push	{r0, r1, r4, lr}
   bdb96:	4604      	mov	r4, r0
    }
   bdb98:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bdb9a:	b159      	cbz	r1, bdbb4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bdb9c:	9101      	str	r1, [sp, #4]
   bdb9e:	f001 fece 	bl	bf93e <strlen>
   bdba2:	6823      	ldr	r3, [r4, #0]
   bdba4:	9901      	ldr	r1, [sp, #4]
   bdba6:	68db      	ldr	r3, [r3, #12]
   bdba8:	4602      	mov	r2, r0
   bdbaa:	4620      	mov	r0, r4
    }
   bdbac:	b002      	add	sp, #8
   bdbae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bdbb2:	4718      	bx	r3
    }
   bdbb4:	b002      	add	sp, #8
   bdbb6:	bd10      	pop	{r4, pc}

000bdbb8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bdbb8:	b508      	push	{r3, lr}
  return write(str);
   bdbba:	f7ff ffeb 	bl	bdb94 <_ZN5Print5writeEPKc>
}
   bdbbe:	bd08      	pop	{r3, pc}

000bdbc0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bdbc0:	6803      	ldr	r3, [r0, #0]
   bdbc2:	689b      	ldr	r3, [r3, #8]
   bdbc4:	4718      	bx	r3

000bdbc6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bdbc6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bdbc8:	210d      	movs	r1, #13
{
   bdbca:	4605      	mov	r5, r0
  size_t n = print('\r');
   bdbcc:	f7ff fff8 	bl	bdbc0 <_ZN5Print5printEc>
  n += print('\n');
   bdbd0:	210a      	movs	r1, #10
  size_t n = print('\r');
   bdbd2:	4604      	mov	r4, r0
  n += print('\n');
   bdbd4:	4628      	mov	r0, r5
   bdbd6:	f7ff fff3 	bl	bdbc0 <_ZN5Print5printEc>
  return n;
}
   bdbda:	4420      	add	r0, r4
   bdbdc:	bd38      	pop	{r3, r4, r5, pc}

000bdbde <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bdbde:	b530      	push	{r4, r5, lr}
   bdbe0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bdbe2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bdbe4:	2a01      	cmp	r2, #1
  *str = '\0';
   bdbe6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bdbea:	bf98      	it	ls
   bdbec:	220a      	movls	r2, #10
   bdbee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bdbf0:	460d      	mov	r5, r1
   bdbf2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bdbf6:	fb01 5312 	mls	r3, r1, r2, r5
   bdbfa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bdbfe:	2b09      	cmp	r3, #9
   bdc00:	bf94      	ite	ls
   bdc02:	3330      	addls	r3, #48	; 0x30
   bdc04:	3337      	addhi	r3, #55	; 0x37
   bdc06:	b2db      	uxtb	r3, r3
  } while(n);
   bdc08:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bdc0a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bdc0e:	d9ef      	bls.n	bdbf0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bdc10:	4621      	mov	r1, r4
   bdc12:	f7ff ffbf 	bl	bdb94 <_ZN5Print5writeEPKc>
}
   bdc16:	b00b      	add	sp, #44	; 0x2c
   bdc18:	bd30      	pop	{r4, r5, pc}
	...

000bdc1c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bdc1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdc20:	ec55 4b10 	vmov	r4, r5, d0
   bdc24:	4606      	mov	r6, r0
   bdc26:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bdc28:	ee10 2a10 	vmov	r2, s0
   bdc2c:	ee10 0a10 	vmov	r0, s0
   bdc30:	462b      	mov	r3, r5
   bdc32:	4629      	mov	r1, r5
   bdc34:	f001 fcf0 	bl	bf618 <__aeabi_dcmpun>
   bdc38:	b140      	cbz	r0, bdc4c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bdc3a:	4953      	ldr	r1, [pc, #332]	; (bdd88 <_ZN5Print10printFloatEdh+0x16c>)
   bdc3c:	4630      	mov	r0, r6
   bdc3e:	f7ff ffa9 	bl	bdb94 <_ZN5Print5writeEPKc>
   bdc42:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bdc44:	4650      	mov	r0, sl
   bdc46:	b003      	add	sp, #12
   bdc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bdc4c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bdc50:	4b4e      	ldr	r3, [pc, #312]	; (bdd8c <_ZN5Print10printFloatEdh+0x170>)
   bdc52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bdc56:	4620      	mov	r0, r4
   bdc58:	4649      	mov	r1, r9
   bdc5a:	f001 fcdd 	bl	bf618 <__aeabi_dcmpun>
   bdc5e:	b948      	cbnz	r0, bdc74 <_ZN5Print10printFloatEdh+0x58>
   bdc60:	4b4a      	ldr	r3, [pc, #296]	; (bdd8c <_ZN5Print10printFloatEdh+0x170>)
   bdc62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bdc66:	4620      	mov	r0, r4
   bdc68:	4649      	mov	r1, r9
   bdc6a:	f001 fcb7 	bl	bf5dc <__aeabi_dcmple>
   bdc6e:	b908      	cbnz	r0, bdc74 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bdc70:	4947      	ldr	r1, [pc, #284]	; (bdd90 <_ZN5Print10printFloatEdh+0x174>)
   bdc72:	e7e3      	b.n	bdc3c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bdc74:	4b47      	ldr	r3, [pc, #284]	; (bdd94 <_ZN5Print10printFloatEdh+0x178>)
   bdc76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bdc7a:	4620      	mov	r0, r4
   bdc7c:	4629      	mov	r1, r5
   bdc7e:	f001 fcc1 	bl	bf604 <__aeabi_dcmpgt>
   bdc82:	b108      	cbz	r0, bdc88 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bdc84:	4944      	ldr	r1, [pc, #272]	; (bdd98 <_ZN5Print10printFloatEdh+0x17c>)
   bdc86:	e7d9      	b.n	bdc3c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bdc88:	4b44      	ldr	r3, [pc, #272]	; (bdd9c <_ZN5Print10printFloatEdh+0x180>)
   bdc8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bdc8e:	4620      	mov	r0, r4
   bdc90:	4629      	mov	r1, r5
   bdc92:	f001 fc99 	bl	bf5c8 <__aeabi_dcmplt>
   bdc96:	2800      	cmp	r0, #0
   bdc98:	d1f4      	bne.n	bdc84 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bdc9a:	2200      	movs	r2, #0
   bdc9c:	2300      	movs	r3, #0
   bdc9e:	4620      	mov	r0, r4
   bdca0:	4629      	mov	r1, r5
   bdca2:	f001 fc91 	bl	bf5c8 <__aeabi_dcmplt>
   bdca6:	b1d0      	cbz	r0, bdcde <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bdca8:	212d      	movs	r1, #45	; 0x2d
   bdcaa:	4630      	mov	r0, r6
   bdcac:	f7ff ff88 	bl	bdbc0 <_ZN5Print5printEc>
     number = -number;
   bdcb0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bdcb4:	4682      	mov	sl, r0
     number = -number;
   bdcb6:	461d      	mov	r5, r3
  double rounding = 0.5;
   bdcb8:	4939      	ldr	r1, [pc, #228]	; (bdda0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bdcba:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bdda8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bdcbe:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bdcc2:	2000      	movs	r0, #0
    rounding /= 10.0;
   bdcc4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bdcc8:	fa5f f38b 	uxtb.w	r3, fp
   bdccc:	429f      	cmp	r7, r3
   bdcce:	d908      	bls.n	bdce2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bdcd0:	4642      	mov	r2, r8
   bdcd2:	464b      	mov	r3, r9
   bdcd4:	f001 fb30 	bl	bf338 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bdcd8:	f10b 0b01 	add.w	fp, fp, #1
   bdcdc:	e7f4      	b.n	bdcc8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bdcde:	4682      	mov	sl, r0
   bdce0:	e7ea      	b.n	bdcb8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bdce2:	4622      	mov	r2, r4
   bdce4:	462b      	mov	r3, r5
   bdce6:	f001 f847 	bl	bed78 <__adddf3>
   bdcea:	460d      	mov	r5, r1
   bdcec:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bdcee:	f001 fcd1 	bl	bf694 <__aeabi_d2uiz>
   bdcf2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bdcf4:	f001 f97c 	bl	beff0 <__aeabi_ui2d>
   bdcf8:	4602      	mov	r2, r0
   bdcfa:	460b      	mov	r3, r1
   bdcfc:	4620      	mov	r0, r4
   bdcfe:	4629      	mov	r1, r5
   bdd00:	f001 f838 	bl	bed74 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bdd04:	220a      	movs	r2, #10
   bdd06:	4604      	mov	r4, r0
   bdd08:	460d      	mov	r5, r1
   bdd0a:	4630      	mov	r0, r6
   bdd0c:	4641      	mov	r1, r8
   bdd0e:	f7ff ff66 	bl	bdbde <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bdd12:	4482      	add	sl, r0
  if (digits > 0) {
   bdd14:	2f00      	cmp	r7, #0
   bdd16:	d095      	beq.n	bdc44 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bdd18:	4922      	ldr	r1, [pc, #136]	; (bdda4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bdd1a:	f8df 908c 	ldr.w	r9, [pc, #140]	; bdda8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bdd1e:	4630      	mov	r0, r6
   bdd20:	f7ff ff38 	bl	bdb94 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bdd24:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bdd28:	4482      	add	sl, r0
  while (digits-- > 0)
   bdd2a:	2f00      	cmp	r7, #0
   bdd2c:	d08a      	beq.n	bdc44 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bdd2e:	4642      	mov	r2, r8
   bdd30:	464b      	mov	r3, r9
   bdd32:	4620      	mov	r0, r4
   bdd34:	4629      	mov	r1, r5
   bdd36:	f001 f9d5 	bl	bf0e4 <__aeabi_dmul>
   bdd3a:	4604      	mov	r4, r0
   bdd3c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bdd3e:	f001 fc81 	bl	bf644 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bdd42:	f1b0 0b00 	subs.w	fp, r0, #0
   bdd46:	da1c      	bge.n	bdd82 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bdd48:	212d      	movs	r1, #45	; 0x2d
   bdd4a:	4630      	mov	r0, r6
   bdd4c:	f7ff ff38 	bl	bdbc0 <_ZN5Print5printEc>
            val = -n;
   bdd50:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bdd54:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bdd56:	220a      	movs	r2, #10
   bdd58:	4630      	mov	r0, r6
   bdd5a:	9301      	str	r3, [sp, #4]
   bdd5c:	f7ff ff3f 	bl	bdbde <_ZN5Print11printNumberEmh>
   bdd60:	9b01      	ldr	r3, [sp, #4]
   bdd62:	4418      	add	r0, r3
    n += print(toPrint);
   bdd64:	4482      	add	sl, r0
    remainder -= toPrint;
   bdd66:	4658      	mov	r0, fp
   bdd68:	f001 f952 	bl	bf010 <__aeabi_i2d>
   bdd6c:	4602      	mov	r2, r0
   bdd6e:	460b      	mov	r3, r1
   bdd70:	4620      	mov	r0, r4
   bdd72:	4629      	mov	r1, r5
   bdd74:	f000 fffe 	bl	bed74 <__aeabi_dsub>
   bdd78:	3f01      	subs	r7, #1
   bdd7a:	4604      	mov	r4, r0
   bdd7c:	460d      	mov	r5, r1
   bdd7e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bdd80:	e7d3      	b.n	bdd2a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bdd82:	4659      	mov	r1, fp
        size_t t = 0;
   bdd84:	2300      	movs	r3, #0
   bdd86:	e7e6      	b.n	bdd56 <_ZN5Print10printFloatEdh+0x13a>
   bdd88:	000c1640 	.word	0x000c1640
   bdd8c:	7fefffff 	.word	0x7fefffff
   bdd90:	000c1644 	.word	0x000c1644
   bdd94:	41efffff 	.word	0x41efffff
   bdd98:	000c1648 	.word	0x000c1648
   bdd9c:	c1efffff 	.word	0xc1efffff
   bdda0:	3fe00000 	.word	0x3fe00000
   bdda4:	000c1680 	.word	0x000c1680
   bdda8:	40240000 	.word	0x40240000

000bddac <_ZN5Print5printEfi>:
{
   bddac:	b538      	push	{r3, r4, r5, lr}
   bddae:	4604      	mov	r4, r0
   bddb0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bddb4:	b2cd      	uxtb	r5, r1
   bddb6:	f001 f93d 	bl	bf034 <__aeabi_f2d>
   bddba:	ec41 0b10 	vmov	d0, r0, r1
   bddbe:	4629      	mov	r1, r5
   bddc0:	4620      	mov	r0, r4
}
   bddc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bddc6:	f7ff bf29 	b.w	bdc1c <_ZN5Print10printFloatEdh>

000bddca <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bddca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bddce:	b086      	sub	sp, #24
   bddd0:	af00      	add	r7, sp, #0
   bddd2:	4605      	mov	r5, r0
   bddd4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bddd6:	1d38      	adds	r0, r7, #4
   bddd8:	2114      	movs	r1, #20
{
   bddda:	4614      	mov	r4, r2
    va_copy(args2, args);
   bdddc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bddde:	f7fd fdcd 	bl	bb97c <vsnprintf>

    if (n<bufsize)
   bdde2:	2813      	cmp	r0, #19
   bdde4:	d80e      	bhi.n	bde04 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bdde6:	1d39      	adds	r1, r7, #4
   bdde8:	4628      	mov	r0, r5
   bddea:	f7ff fed3 	bl	bdb94 <_ZN5Print5writeEPKc>
   bddee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bddf0:	b11e      	cbz	r6, bddfa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bddf2:	4628      	mov	r0, r5
   bddf4:	f7ff fee7 	bl	bdbc6 <_ZN5Print7printlnEv>
   bddf8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bddfa:	4620      	mov	r0, r4
   bddfc:	3718      	adds	r7, #24
   bddfe:	46bd      	mov	sp, r7
   bde00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bde04:	f100 0308 	add.w	r3, r0, #8
   bde08:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bde0c:	46e8      	mov	r8, sp
        char bigger[n+1];
   bde0e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bde12:	4622      	mov	r2, r4
   bde14:	1c41      	adds	r1, r0, #1
   bde16:	683b      	ldr	r3, [r7, #0]
   bde18:	4668      	mov	r0, sp
   bde1a:	f7fd fdaf 	bl	bb97c <vsnprintf>
  return write(str);
   bde1e:	4669      	mov	r1, sp
   bde20:	4628      	mov	r0, r5
   bde22:	f7ff feb7 	bl	bdb94 <_ZN5Print5writeEPKc>
   bde26:	4604      	mov	r4, r0
   bde28:	46c5      	mov	sp, r8
   bde2a:	e7e1      	b.n	bddf0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bde2c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bde2c:	b510      	push	{r4, lr}
  if (0 == max) {
   bde2e:	4604      	mov	r4, r0
   bde30:	b128      	cbz	r0, bde3e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bde32:	f001 fcff 	bl	bf834 <rand>
   bde36:	fb90 f3f4 	sdiv	r3, r0, r4
   bde3a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bde3e:	4620      	mov	r0, r4
   bde40:	bd10      	pop	{r4, pc}

000bde42 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bde42:	4288      	cmp	r0, r1
{
   bde44:	b510      	push	{r4, lr}
   bde46:	4604      	mov	r4, r0
  if (min >= max) {
   bde48:	da03      	bge.n	bde52 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bde4a:	1a08      	subs	r0, r1, r0
   bde4c:	f7ff ffee 	bl	bde2c <_Z6randomi>
   bde50:	4404      	add	r4, r0
}
   bde52:	4620      	mov	r0, r4
   bde54:	bd10      	pop	{r4, pc}
	...

000bde58 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bde58:	4b01      	ldr	r3, [pc, #4]	; (bde60 <_GLOBAL__sub_I_RGB+0x8>)
   bde5a:	2200      	movs	r2, #0
   bde5c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bde5e:	4770      	bx	lr
   bde60:	2003e68c 	.word	0x2003e68c

000bde64 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bde64:	2100      	movs	r1, #0
   bde66:	f7fd bae5 	b.w	bb434 <hal_spi_release>

000bde6a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bde6a:	2100      	movs	r1, #0
   bde6c:	f7fd bada 	b.w	bb424 <hal_spi_acquire>

000bde70 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bde70:	b510      	push	{r4, lr}
   bde72:	4604      	mov	r4, r0
   bde74:	4608      	mov	r0, r1
{
    _spi = spi;
   bde76:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bde78:	f7fd fab4 	bl	bb3e4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bde7c:	2300      	movs	r3, #0
   bde7e:	6063      	str	r3, [r4, #4]
}
   bde80:	4620      	mov	r0, r4
   bde82:	bd10      	pop	{r4, pc}

000bde84 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bde84:	b513      	push	{r0, r1, r4, lr}
   bde86:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bde88:	7800      	ldrb	r0, [r0, #0]
   bde8a:	f7ff ffee 	bl	bde6a <_ZN8SPIClass4lockEv.isra.0>
   bde8e:	b958      	cbnz	r0, bdea8 <_ZN8SPIClass5beginEv+0x24>
   bde90:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bde92:	9001      	str	r0, [sp, #4]
   bde94:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bde98:	f7fd fa8c 	bl	bb3b4 <hal_spi_begin>
        unlock();
   bde9c:	9801      	ldr	r0, [sp, #4]
    }
}
   bde9e:	b002      	add	sp, #8
   bdea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bdea4:	f7ff bfde 	b.w	bde64 <_ZN8SPIClass6unlockEv.isra.0>
   bdea8:	b002      	add	sp, #8
   bdeaa:	bd10      	pop	{r4, pc}

000bdeac <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bdeac:	b513      	push	{r0, r1, r4, lr}
   bdeae:	4604      	mov	r4, r0
    if (!lock())
   bdeb0:	7800      	ldrb	r0, [r0, #0]
   bdeb2:	f7ff ffda 	bl	bde6a <_ZN8SPIClass4lockEv.isra.0>
   bdeb6:	b948      	cbnz	r0, bdecc <_ZN8SPIClass3endEv+0x20>
   bdeb8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bdeba:	9001      	str	r0, [sp, #4]
   bdebc:	f7fd fa82 	bl	bb3c4 <hal_spi_end>
        unlock();
   bdec0:	9801      	ldr	r0, [sp, #4]
    }
}
   bdec2:	b002      	add	sp, #8
   bdec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bdec8:	f7ff bfcc 	b.w	bde64 <_ZN8SPIClass6unlockEv.isra.0>
   bdecc:	b002      	add	sp, #8
   bdece:	bd10      	pop	{r4, pc}

000bded0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bded0:	7800      	ldrb	r0, [r0, #0]
   bded2:	f7ff bfc7 	b.w	bde64 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bded8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bded8:	0840      	lsrs	r0, r0, #1
{
   bdeda:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bdedc:	6018      	str	r0, [r3, #0]
   bdede:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bdee0:	6818      	ldr	r0, [r3, #0]
   bdee2:	4288      	cmp	r0, r1
   bdee4:	b2e5      	uxtb	r5, r4
   bdee6:	d906      	bls.n	bdef6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bdee8:	3401      	adds	r4, #1
   bdeea:	2c08      	cmp	r4, #8
   bdeec:	d002      	beq.n	bdef4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bdeee:	0840      	lsrs	r0, r0, #1
   bdef0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bdef2:	e7f5      	b.n	bdee0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bdef4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bdef6:	4b02      	ldr	r3, [pc, #8]	; (bdf00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bdef8:	5d5b      	ldrb	r3, [r3, r5]
   bdefa:	7013      	strb	r3, [r2, #0]
}
   bdefc:	bd30      	pop	{r4, r5, pc}
   bdefe:	bf00      	nop
   bdf00:	000c164c 	.word	0x000c164c

000bdf04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bdf04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bdf08:	4606      	mov	r6, r0
   bdf0a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bdf0c:	7800      	ldrb	r0, [r0, #0]
{
   bdf0e:	460c      	mov	r4, r1
    CHECK(lock());
   bdf10:	f7ff ffab 	bl	bde6a <_ZN8SPIClass4lockEv.isra.0>
   bdf14:	2800      	cmp	r0, #0
   bdf16:	db1b      	blt.n	bdf50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bdf18:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bdf1a:	2214      	movs	r2, #20
   bdf1c:	2100      	movs	r1, #0
   bdf1e:	a809      	add	r0, sp, #36	; 0x24
   bdf20:	f001 fc52 	bl	bf7c8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bdf24:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bdf26:	2200      	movs	r2, #0
   bdf28:	a909      	add	r1, sp, #36	; 0x24
   bdf2a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bdf2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bdf30:	f7fd fa68 	bl	bb404 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bdf34:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bdf38:	b113      	cbz	r3, bdf40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bdf3a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bdf3e:	b155      	cbz	r5, bdf56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bdf40:	2700      	movs	r7, #0
   bdf42:	46b9      	mov	r9, r7
   bdf44:	46b8      	mov	r8, r7
   bdf46:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bdf48:	7923      	ldrb	r3, [r4, #4]
   bdf4a:	b15d      	cbz	r5, bdf64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bdf4c:	b1c3      	cbz	r3, bdf80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bdf4e:	2000      	movs	r0, #0
}
   bdf50:	b00f      	add	sp, #60	; 0x3c
   bdf52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bdf56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bdf5a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bdf5e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bdf62:	e7f1      	b.n	bdf48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bdf64:	2b00      	cmp	r3, #0
   bdf66:	d135      	bne.n	bdfd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bdf68:	68a3      	ldr	r3, [r4, #8]
   bdf6a:	4543      	cmp	r3, r8
   bdf6c:	d108      	bne.n	bdf80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bdf6e:	f88d 9020 	strb.w	r9, [sp, #32]
   bdf72:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bdf76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bdf7a:	89a3      	ldrh	r3, [r4, #12]
   bdf7c:	429a      	cmp	r2, r3
   bdf7e:	d0e6      	beq.n	bdf4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bdf80:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bdf82:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bdf84:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bdf88:	980a      	ldr	r0, [sp, #40]	; 0x28
   bdf8a:	ab04      	add	r3, sp, #16
   bdf8c:	f10d 020f 	add.w	r2, sp, #15
   bdf90:	f7ff ffa2 	bl	bded8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bdf94:	7921      	ldrb	r1, [r4, #4]
   bdf96:	b985      	cbnz	r5, bdfba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bdf98:	b989      	cbnz	r1, bdfbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bdf9a:	68a3      	ldr	r3, [r4, #8]
   bdf9c:	4543      	cmp	r3, r8
   bdf9e:	d30e      	bcc.n	bdfbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bdfa0:	f88d 9020 	strb.w	r9, [sp, #32]
   bdfa4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bdfa8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bdfac:	89a3      	ldrh	r3, [r4, #12]
   bdfae:	429a      	cmp	r2, r3
   bdfb0:	d105      	bne.n	bdfbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bdfb2:	9b04      	ldr	r3, [sp, #16]
   bdfb4:	4543      	cmp	r3, r8
   bdfb6:	d102      	bne.n	bdfbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bdfb8:	e7c9      	b.n	bdf4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bdfba:	2900      	cmp	r1, #0
   bdfbc:	d1f9      	bne.n	bdfb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bdfbe:	2300      	movs	r3, #0
   bdfc0:	9301      	str	r3, [sp, #4]
   bdfc2:	7b63      	ldrb	r3, [r4, #13]
   bdfc4:	9300      	str	r3, [sp, #0]
   bdfc6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bdfca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bdfcc:	7830      	ldrb	r0, [r6, #0]
   bdfce:	f7fd fa21 	bl	bb414 <hal_spi_set_settings>
   bdfd2:	e7bc      	b.n	bdf4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bdfd4:	e9cd 5500 	strd	r5, r5, [sp]
   bdfd8:	462b      	mov	r3, r5
   bdfda:	462a      	mov	r2, r5
   bdfdc:	2101      	movs	r1, #1
   bdfde:	e7f5      	b.n	bdfcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bdfe0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bdfe0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bdfe2:	7800      	ldrb	r0, [r0, #0]
   bdfe4:	f7fd f9f6 	bl	bb3d4 <hal_spi_transfer>
}
   bdfe8:	b2c0      	uxtb	r0, r0
   bdfea:	bd08      	pop	{r3, pc}

000bdfec <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bdfec:	4770      	bx	lr

000bdfee <_ZN8SPIClass15detachInterruptEv>:
   bdfee:	4770      	bx	lr

000bdff0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bdff0:	b510      	push	{r4, lr}
   bdff2:	4604      	mov	r4, r0
{
	free(buffer);
   bdff4:	6800      	ldr	r0, [r0, #0]
   bdff6:	f7fd fc99 	bl	bb92c <free>
}
   bdffa:	4620      	mov	r0, r4
   bdffc:	bd10      	pop	{r4, pc}

000bdffe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bdffe:	b510      	push	{r4, lr}
   be000:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   be002:	6800      	ldr	r0, [r0, #0]
   be004:	b108      	cbz	r0, be00a <_ZN6String10invalidateEv+0xc>
   be006:	f7fd fc91 	bl	bb92c <free>
	buffer = NULL;
   be00a:	2300      	movs	r3, #0
	capacity = len = 0;
   be00c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   be010:	6023      	str	r3, [r4, #0]
}
   be012:	bd10      	pop	{r4, pc}

000be014 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   be014:	b538      	push	{r3, r4, r5, lr}
   be016:	4604      	mov	r4, r0
   be018:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   be01a:	6800      	ldr	r0, [r0, #0]
   be01c:	3101      	adds	r1, #1
   be01e:	f7fd fc8d 	bl	bb93c <realloc>
	if (newbuffer) {
   be022:	b110      	cbz	r0, be02a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   be024:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   be028:	2001      	movs	r0, #1
	}
	return 0;
}
   be02a:	bd38      	pop	{r3, r4, r5, pc}

000be02c <_ZN6String7reserveEj>:
{
   be02c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   be02e:	6803      	ldr	r3, [r0, #0]
{
   be030:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   be032:	b123      	cbz	r3, be03e <_ZN6String7reserveEj+0x12>
   be034:	6843      	ldr	r3, [r0, #4]
   be036:	428b      	cmp	r3, r1
   be038:	d301      	bcc.n	be03e <_ZN6String7reserveEj+0x12>
   be03a:	2001      	movs	r0, #1
}
   be03c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   be03e:	4620      	mov	r0, r4
   be040:	f7ff ffe8 	bl	be014 <_ZN6String12changeBufferEj>
   be044:	2800      	cmp	r0, #0
   be046:	d0f9      	beq.n	be03c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   be048:	68a3      	ldr	r3, [r4, #8]
   be04a:	2b00      	cmp	r3, #0
   be04c:	d1f5      	bne.n	be03a <_ZN6String7reserveEj+0xe>
   be04e:	6822      	ldr	r2, [r4, #0]
   be050:	7013      	strb	r3, [r2, #0]
   be052:	e7f2      	b.n	be03a <_ZN6String7reserveEj+0xe>

000be054 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   be054:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be056:	460d      	mov	r5, r1
	if (!reserve(length)) {
   be058:	4611      	mov	r1, r2
   be05a:	9201      	str	r2, [sp, #4]
{
   be05c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   be05e:	f7ff ffe5 	bl	be02c <_ZN6String7reserveEj>
   be062:	9a01      	ldr	r2, [sp, #4]
   be064:	b928      	cbnz	r0, be072 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   be066:	4620      	mov	r0, r4
   be068:	f7ff ffc9 	bl	bdffe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   be06c:	4620      	mov	r0, r4
   be06e:	b003      	add	sp, #12
   be070:	bd30      	pop	{r4, r5, pc}
	len = length;
   be072:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   be074:	4629      	mov	r1, r5
   be076:	6820      	ldr	r0, [r4, #0]
   be078:	f001 fb7e 	bl	bf778 <memcpy>
	buffer[len] = 0;
   be07c:	6822      	ldr	r2, [r4, #0]
   be07e:	68a3      	ldr	r3, [r4, #8]
   be080:	2100      	movs	r1, #0
   be082:	54d1      	strb	r1, [r2, r3]
	return *this;
   be084:	e7f2      	b.n	be06c <_ZN6String4copyEPKcj+0x18>

000be086 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   be086:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   be088:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   be08a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   be08e:	4604      	mov	r4, r0
	len = 0;
   be090:	6083      	str	r3, [r0, #8]
	flags = 0;
   be092:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   be094:	b141      	cbz	r1, be0a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   be096:	4608      	mov	r0, r1
   be098:	9101      	str	r1, [sp, #4]
   be09a:	f001 fc50 	bl	bf93e <strlen>
   be09e:	9901      	ldr	r1, [sp, #4]
   be0a0:	4602      	mov	r2, r0
   be0a2:	4620      	mov	r0, r4
   be0a4:	f7ff ffd6 	bl	be054 <_ZN6String4copyEPKcj>
}
   be0a8:	4620      	mov	r0, r4
   be0aa:	b002      	add	sp, #8
   be0ac:	bd10      	pop	{r4, pc}

000be0ae <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   be0ae:	b538      	push	{r3, r4, r5, lr}
   be0b0:	4605      	mov	r5, r0
	if (buffer) {
   be0b2:	6800      	ldr	r0, [r0, #0]
{
   be0b4:	460c      	mov	r4, r1
	if (buffer) {
   be0b6:	b168      	cbz	r0, be0d4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   be0b8:	686a      	ldr	r2, [r5, #4]
   be0ba:	688b      	ldr	r3, [r1, #8]
   be0bc:	429a      	cmp	r2, r3
   be0be:	d307      	bcc.n	be0d0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   be0c0:	6809      	ldr	r1, [r1, #0]
   be0c2:	f001 fc16 	bl	bf8f2 <strcpy>
			len = rhs.len;
   be0c6:	68a3      	ldr	r3, [r4, #8]
   be0c8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   be0ca:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   be0cc:	60a3      	str	r3, [r4, #8]
}
   be0ce:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   be0d0:	f7fd fc2c 	bl	bb92c <free>
	buffer = rhs.buffer;
   be0d4:	6823      	ldr	r3, [r4, #0]
   be0d6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   be0d8:	6863      	ldr	r3, [r4, #4]
   be0da:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   be0dc:	68a3      	ldr	r3, [r4, #8]
   be0de:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   be0e0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   be0e2:	e9c4 3300 	strd	r3, r3, [r4]
   be0e6:	e7f1      	b.n	be0cc <_ZN6String4moveERS_+0x1e>

000be0e8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   be0e8:	b510      	push	{r4, lr}
	buffer = NULL;
   be0ea:	2300      	movs	r3, #0
	capacity = 0;
   be0ec:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   be0f0:	4604      	mov	r4, r0
	len = 0;
   be0f2:	6083      	str	r3, [r0, #8]
	flags = 0;
   be0f4:	7303      	strb	r3, [r0, #12]
	move(rval);
   be0f6:	f7ff ffda 	bl	be0ae <_ZN6String4moveERS_>
}
   be0fa:	4620      	mov	r0, r4
   be0fc:	bd10      	pop	{r4, pc}

000be0fe <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   be0fe:	4288      	cmp	r0, r1
{
   be100:	b510      	push	{r4, lr}
   be102:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   be104:	d005      	beq.n	be112 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   be106:	680b      	ldr	r3, [r1, #0]
   be108:	b12b      	cbz	r3, be116 <_ZN6StringaSERKS_+0x18>
   be10a:	688a      	ldr	r2, [r1, #8]
   be10c:	4619      	mov	r1, r3
   be10e:	f7ff ffa1 	bl	be054 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be112:	4620      	mov	r0, r4
   be114:	bd10      	pop	{r4, pc}
	else invalidate();
   be116:	f7ff ff72 	bl	bdffe <_ZN6String10invalidateEv>
   be11a:	e7fa      	b.n	be112 <_ZN6StringaSERKS_+0x14>

000be11c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   be11c:	b510      	push	{r4, lr}
	buffer = NULL;
   be11e:	2300      	movs	r3, #0
String::String(const String &value)
   be120:	4604      	mov	r4, r0
	capacity = 0;
   be122:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   be126:	6083      	str	r3, [r0, #8]
	flags = 0;
   be128:	7303      	strb	r3, [r0, #12]
	*this = value;
   be12a:	f7ff ffe8 	bl	be0fe <_ZN6StringaSERKS_>
}
   be12e:	4620      	mov	r0, r4
   be130:	bd10      	pop	{r4, pc}

000be132 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   be132:	4288      	cmp	r0, r1
{
   be134:	b510      	push	{r4, lr}
   be136:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   be138:	d001      	beq.n	be13e <_ZN6StringaSEOS_+0xc>
   be13a:	f7ff ffb8 	bl	be0ae <_ZN6String4moveERS_>
	return *this;
}
   be13e:	4620      	mov	r0, r4
   be140:	bd10      	pop	{r4, pc}

000be142 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   be142:	b513      	push	{r0, r1, r4, lr}
   be144:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   be146:	b159      	cbz	r1, be160 <_ZN6StringaSEPKc+0x1e>
   be148:	4608      	mov	r0, r1
   be14a:	9101      	str	r1, [sp, #4]
   be14c:	f001 fbf7 	bl	bf93e <strlen>
   be150:	9901      	ldr	r1, [sp, #4]
   be152:	4602      	mov	r2, r0
   be154:	4620      	mov	r0, r4
   be156:	f7ff ff7d 	bl	be054 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be15a:	4620      	mov	r0, r4
   be15c:	b002      	add	sp, #8
   be15e:	bd10      	pop	{r4, pc}
	else invalidate();
   be160:	f7ff ff4d 	bl	bdffe <_ZN6String10invalidateEv>
   be164:	e7f9      	b.n	be15a <_ZN6StringaSEPKc+0x18>

000be166 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   be166:	b570      	push	{r4, r5, r6, lr}
   be168:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   be16a:	460e      	mov	r6, r1
   be16c:	b909      	cbnz	r1, be172 <_ZN6String6concatEPKcj+0xc>
   be16e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   be170:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   be172:	b16a      	cbz	r2, be190 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   be174:	6884      	ldr	r4, [r0, #8]
   be176:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   be178:	4621      	mov	r1, r4
   be17a:	f7ff ff57 	bl	be02c <_ZN6String7reserveEj>
   be17e:	2800      	cmp	r0, #0
   be180:	d0f5      	beq.n	be16e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   be182:	6828      	ldr	r0, [r5, #0]
   be184:	68ab      	ldr	r3, [r5, #8]
   be186:	4631      	mov	r1, r6
   be188:	4418      	add	r0, r3
   be18a:	f001 fbb2 	bl	bf8f2 <strcpy>
	len = newlen;
   be18e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   be190:	2001      	movs	r0, #1
   be192:	e7ed      	b.n	be170 <_ZN6String6concatEPKcj+0xa>

000be194 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   be194:	b513      	push	{r0, r1, r4, lr}
   be196:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   be198:	4608      	mov	r0, r1
	if (!cstr) return 0;
   be19a:	b151      	cbz	r1, be1b2 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   be19c:	9101      	str	r1, [sp, #4]
   be19e:	f001 fbce 	bl	bf93e <strlen>
   be1a2:	9901      	ldr	r1, [sp, #4]
   be1a4:	4602      	mov	r2, r0
   be1a6:	4620      	mov	r0, r4
}
   be1a8:	b002      	add	sp, #8
   be1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   be1ae:	f7ff bfda 	b.w	be166 <_ZN6String6concatEPKcj>
}
   be1b2:	b002      	add	sp, #8
   be1b4:	bd10      	pop	{r4, pc}

000be1b6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   be1b6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   be1b8:	688a      	ldr	r2, [r1, #8]
   be1ba:	6809      	ldr	r1, [r1, #0]
{
   be1bc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   be1be:	f7ff ffd2 	bl	be166 <_ZN6String6concatEPKcj>
   be1c2:	b910      	cbnz	r0, be1ca <_ZplRK15StringSumHelperRK6String+0x14>
   be1c4:	4620      	mov	r0, r4
   be1c6:	f7ff ff1a 	bl	bdffe <_ZN6String10invalidateEv>
	return a;
}
   be1ca:	4620      	mov	r0, r4
   be1cc:	bd10      	pop	{r4, pc}

000be1ce <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   be1ce:	b513      	push	{r0, r1, r4, lr}
   be1d0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   be1d2:	b929      	cbnz	r1, be1e0 <_ZplRK15StringSumHelperPKc+0x12>
   be1d4:	4620      	mov	r0, r4
   be1d6:	f7ff ff12 	bl	bdffe <_ZN6String10invalidateEv>
	return a;
}
   be1da:	4620      	mov	r0, r4
   be1dc:	b002      	add	sp, #8
   be1de:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   be1e0:	4608      	mov	r0, r1
   be1e2:	9101      	str	r1, [sp, #4]
   be1e4:	f001 fbab 	bl	bf93e <strlen>
   be1e8:	9901      	ldr	r1, [sp, #4]
   be1ea:	4602      	mov	r2, r0
   be1ec:	4620      	mov	r0, r4
   be1ee:	f7ff ffba 	bl	be166 <_ZN6String6concatEPKcj>
   be1f2:	2800      	cmp	r0, #0
   be1f4:	d0ee      	beq.n	be1d4 <_ZplRK15StringSumHelperPKc+0x6>
   be1f6:	e7f0      	b.n	be1da <_ZplRK15StringSumHelperPKc+0xc>

000be1f8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   be1f8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   be1fa:	6882      	ldr	r2, [r0, #8]
   be1fc:	b93a      	cbnz	r2, be20e <_ZNK6String6equalsEPKc+0x16>
   be1fe:	b121      	cbz	r1, be20a <_ZNK6String6equalsEPKc+0x12>
   be200:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   be202:	fab0 f080 	clz	r0, r0
   be206:	0940      	lsrs	r0, r0, #5
   be208:	e000      	b.n	be20c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   be20a:	2001      	movs	r0, #1
}
   be20c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   be20e:	6800      	ldr	r0, [r0, #0]
   be210:	b909      	cbnz	r1, be216 <_ZNK6String6equalsEPKc+0x1e>
   be212:	7800      	ldrb	r0, [r0, #0]
   be214:	e7f5      	b.n	be202 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   be216:	f001 fb62 	bl	bf8de <strcmp>
   be21a:	e7f2      	b.n	be202 <_ZNK6String6equalsEPKc+0xa>

000be21c <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   be21c:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   be21e:	6883      	ldr	r3, [r0, #8]
   be220:	688a      	ldr	r2, [r1, #8]
   be222:	4293      	cmp	r3, r2
   be224:	d30b      	bcc.n	be23e <_ZNK6String8endsWithERKS_+0x22>
   be226:	6800      	ldr	r0, [r0, #0]
   be228:	b140      	cbz	r0, be23c <_ZNK6String8endsWithERKS_+0x20>
   be22a:	6809      	ldr	r1, [r1, #0]
   be22c:	b149      	cbz	r1, be242 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   be22e:	1a9b      	subs	r3, r3, r2
   be230:	4418      	add	r0, r3
   be232:	f001 fb54 	bl	bf8de <strcmp>
   be236:	fab0 f080 	clz	r0, r0
   be23a:	0940      	lsrs	r0, r0, #5
}
   be23c:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   be23e:	2000      	movs	r0, #0
   be240:	e7fc      	b.n	be23c <_ZNK6String8endsWithERKS_+0x20>
   be242:	4608      	mov	r0, r1
   be244:	e7fa      	b.n	be23c <_ZNK6String8endsWithERKS_+0x20>
	...

000be248 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   be248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   be24a:	429a      	cmp	r2, r3
{
   be24c:	460f      	mov	r7, r1
   be24e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   be250:	490c      	ldr	r1, [pc, #48]	; (be284 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   be252:	bf88      	it	hi
   be254:	4613      	movhi	r3, r2
{
   be256:	4614      	mov	r4, r2
   be258:	4606      	mov	r6, r0
	if (left > right) {
   be25a:	bf84      	itt	hi
   be25c:	462c      	movhi	r4, r5
   be25e:	461d      	movhi	r5, r3
	String out;
   be260:	f7ff ff11 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   be264:	68bb      	ldr	r3, [r7, #8]
   be266:	42a3      	cmp	r3, r4
   be268:	d30a      	bcc.n	be280 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   be26a:	6839      	ldr	r1, [r7, #0]
   be26c:	42ab      	cmp	r3, r5
   be26e:	bf94      	ite	ls
   be270:	ebc4 0203 	rsbls	r2, r4, r3
   be274:	ebc4 0205 	rsbhi	r2, r4, r5
   be278:	4421      	add	r1, r4
   be27a:	4630      	mov	r0, r6
   be27c:	f7ff feea 	bl	be054 <_ZN6String4copyEPKcj>
	return out;
}
   be280:	4630      	mov	r0, r6
   be282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   be284:	000c1579 	.word	0x000c1579

000be288 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   be288:	b40e      	push	{r1, r2, r3}
   be28a:	b570      	push	{r4, r5, r6, lr}
   be28c:	b087      	sub	sp, #28
   be28e:	ad0b      	add	r5, sp, #44	; 0x2c
   be290:	4604      	mov	r4, r0
   be292:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   be296:	9201      	str	r2, [sp, #4]
   be298:	462b      	mov	r3, r5
   be29a:	2105      	movs	r1, #5
   be29c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   be29e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   be2a0:	f7fd fb6c 	bl	bb97c <vsnprintf>
    va_end(marker);

    String result;
   be2a4:	490b      	ldr	r1, [pc, #44]	; (be2d4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   be2a6:	4606      	mov	r6, r0
    String result;
   be2a8:	4620      	mov	r0, r4
   be2aa:	f7ff feec 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   be2ae:	4631      	mov	r1, r6
   be2b0:	4620      	mov	r0, r4
   be2b2:	f7ff febb 	bl	be02c <_ZN6String7reserveEj>
    if (result.buffer) {
   be2b6:	6820      	ldr	r0, [r4, #0]
   be2b8:	b130      	cbz	r0, be2c8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   be2ba:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   be2bc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   be2be:	462b      	mov	r3, r5
   be2c0:	1c71      	adds	r1, r6, #1
   be2c2:	f7fd fb5b 	bl	bb97c <vsnprintf>
        va_end(marker);
        result.len = n;
   be2c6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   be2c8:	4620      	mov	r0, r4
   be2ca:	b007      	add	sp, #28
   be2cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   be2d0:	b003      	add	sp, #12
   be2d2:	4770      	bx	lr
   be2d4:	000c1579 	.word	0x000c1579

000be2d8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   be2d8:	b510      	push	{r4, lr}
   be2da:	4604      	mov	r4, r0
        if (wakeupSource_) {
   be2dc:	6800      	ldr	r0, [r0, #0]
   be2de:	b118      	cbz	r0, be2e8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   be2e0:	f7fd fb24 	bl	bb92c <free>
            wakeupSource_ = nullptr;
   be2e4:	2300      	movs	r3, #0
   be2e6:	6023      	str	r3, [r4, #0]
        }
    }
   be2e8:	bd10      	pop	{r4, pc}

000be2ea <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   be2ea:	b538      	push	{r3, r4, r5, lr}
   be2ec:	460c      	mov	r4, r1
   be2ee:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   be2f0:	f7ff fff2 	bl	be2d8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   be2f4:	b154      	cbz	r4, be30c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   be2f6:	8820      	ldrh	r0, [r4, #0]
   be2f8:	f7fd fb10 	bl	bb91c <malloc>
   be2fc:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   be2fe:	b128      	cbz	r0, be30c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   be300:	8822      	ldrh	r2, [r4, #0]
   be302:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   be304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   be308:	f001 ba36 	b.w	bf778 <memcpy>
    }
   be30c:	bd38      	pop	{r3, r4, r5, pc}

000be30e <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   be30e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   be310:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   be314:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   be316:	f8d1 3006 	ldr.w	r3, [r1, #6]
   be31a:	f8c0 3006 	str.w	r3, [r0, #6]
   be31e:	894b      	ldrh	r3, [r1, #10]
   be320:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   be322:	460c      	mov	r4, r1
   be324:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   be326:	f7ff ffd7 	bl	be2d8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   be32a:	6823      	ldr	r3, [r4, #0]
   be32c:	b113      	cbz	r3, be334 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   be32e:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   be330:	2300      	movs	r3, #0
   be332:	6023      	str	r3, [r4, #0]
    }
   be334:	bd38      	pop	{r3, r4, r5, pc}

000be336 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   be336:	b507      	push	{r0, r1, r2, lr}
   be338:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   be33a:	2100      	movs	r1, #0
{
   be33c:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   be33e:	9100      	str	r1, [sp, #0]
   be340:	2001      	movs	r0, #1
   be342:	218c      	movs	r1, #140	; 0x8c
   be344:	f7fd fa18 	bl	bb778 <system_reset>
}
   be348:	b003      	add	sp, #12
   be34a:	f85d fb04 	ldr.w	pc, [sp], #4

000be34e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   be34e:	4601      	mov	r1, r0
    reset(0, flags);
   be350:	2000      	movs	r0, #0
   be352:	f7ff bff0 	b.w	be336 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000be356 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   be356:	2000      	movs	r0, #0
   be358:	f7ff bff9 	b.w	be34e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000be35c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   be35c:	b5f0      	push	{r4, r5, r6, r7, lr}
   be35e:	4d2b      	ldr	r5, [pc, #172]	; (be40c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   be360:	7d0b      	ldrb	r3, [r1, #20]
   be362:	4604      	mov	r4, r0
   be364:	b08b      	sub	sp, #44	; 0x2c
   be366:	4608      	mov	r0, r1
   be368:	1daf      	adds	r7, r5, #6
   be36a:	2b00      	cmp	r3, #0
   be36c:	d036      	beq.n	be3dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   be36e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   be370:	791b      	ldrb	r3, [r3, #4]
   be372:	2b00      	cmp	r3, #0
   be374:	d032      	beq.n	be3dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   be376:	4b26      	ldr	r3, [pc, #152]	; (be410 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   be378:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   be37a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   be37c:	a902      	add	r1, sp, #8
   be37e:	3004      	adds	r0, #4
   be380:	e9cd 2202 	strd	r2, r2, [sp, #8]
   be384:	f7fd f9ee 	bl	bb764 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   be388:	f8dd 300e 	ldr.w	r3, [sp, #14]
   be38c:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   be390:	b200      	sxth	r0, r0
   be392:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   be396:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   be39a:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   be39c:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   be39e:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   be3a0:	4628      	mov	r0, r5
   be3a2:	f7ff ffa2 	bl	be2ea <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   be3a6:	a802      	add	r0, sp, #8
   be3a8:	f7ff ff96 	bl	be2d8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   be3ac:	2300      	movs	r3, #0
   be3ae:	6023      	str	r3, [r4, #0]
   be3b0:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   be3b2:	71a3      	strb	r3, [r4, #6]
   be3b4:	8123      	strh	r3, [r4, #8]
   be3b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be3ba:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   be3bc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   be3c0:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   be3c2:	f8d5 3006 	ldr.w	r3, [r5, #6]
   be3c6:	f8c4 3006 	str.w	r3, [r4, #6]
   be3ca:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   be3cc:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   be3ce:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   be3d0:	4620      	mov	r0, r4
   be3d2:	f7ff ff8a 	bl	be2ea <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   be3d6:	4620      	mov	r0, r4
   be3d8:	b00b      	add	sp, #44	; 0x2c
   be3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   be3dc:	2600      	movs	r6, #0
   be3de:	2320      	movs	r3, #32
   be3e0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   be3e4:	4b0b      	ldr	r3, [pc, #44]	; (be414 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   be3e6:	9300      	str	r3, [sp, #0]
   be3e8:	aa02      	add	r2, sp, #8
   be3ea:	4633      	mov	r3, r6
   be3ec:	490a      	ldr	r1, [pc, #40]	; (be418 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   be3ee:	2032      	movs	r0, #50	; 0x32
   be3f0:	f7fd f928 	bl	bb644 <log_message>
            : wakeupSource_(nullptr),
   be3f4:	4b06      	ldr	r3, [pc, #24]	; (be410 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   be3f6:	4805      	ldr	r0, [pc, #20]	; (be40c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   be3f8:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   be3fa:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   be3fe:	a902      	add	r1, sp, #8
   be400:	e9cd 2303 	strd	r2, r3, [sp, #12]
   be404:	f7ff ff83 	bl	be30e <_ZN17SystemSleepResultaSEOS_.isra.0>
   be408:	e7cd      	b.n	be3a6 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   be40a:	bf00      	nop
   be40c:	2003e69c 	.word	0x2003e69c
   be410:	ffff0000 	.word	0xffff0000
   be414:	000c165b 	.word	0x000c165b
   be418:	000c1654 	.word	0x000c1654

000be41c <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   be41c:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   be41e:	2420      	movs	r4, #32
{
   be420:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   be422:	4622      	mov	r2, r4
   be424:	2100      	movs	r1, #0
   be426:	4668      	mov	r0, sp
   be428:	f001 f9ce 	bl	bf7c8 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   be42c:	2100      	movs	r1, #0
   be42e:	4668      	mov	r0, sp
    info.size = sizeof(info);
   be430:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   be434:	f7fc feae 	bl	bb194 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   be438:	9801      	ldr	r0, [sp, #4]
   be43a:	b008      	add	sp, #32
   be43c:	bd10      	pop	{r4, pc}
	...

000be440 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   be440:	4b05      	ldr	r3, [pc, #20]	; (be458 <_GLOBAL__sub_I_System+0x18>)
   be442:	2202      	movs	r2, #2
   be444:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   be446:	4b05      	ldr	r3, [pc, #20]	; (be45c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   be448:	4a05      	ldr	r2, [pc, #20]	; (be460 <_GLOBAL__sub_I_System+0x20>)
   be44a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   be44c:	2000      	movs	r0, #0
   be44e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   be452:	f7fd b929 	b.w	bb6a8 <set_system_mode>
   be456:	bf00      	nop
   be458:	2003e6a8 	.word	0x2003e6a8
   be45c:	2003e69c 	.word	0x2003e69c
   be460:	ffff0000 	.word	0xffff0000

000be464 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   be464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   be468:	4a15      	ldr	r2, [pc, #84]	; (be4c0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   be46a:	f8df 8060 	ldr.w	r8, [pc, #96]	; be4cc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   be46e:	e9d2 6300 	ldrd	r6, r3, [r2]
   be472:	1980      	adds	r0, r0, r6
   be474:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   be478:	4b12      	ldr	r3, [pc, #72]	; (be4c4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   be47a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   be47e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   be482:	1986      	adds	r6, r0, r6
   be484:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   be488:	42bb      	cmp	r3, r7
   be48a:	bf08      	it	eq
   be48c:	42b2      	cmpeq	r2, r6
{
   be48e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   be490:	d013      	beq.n	be4ba <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   be492:	a903      	add	r1, sp, #12
   be494:	4668      	mov	r0, sp
   be496:	e9cd 6700 	strd	r6, r7, [sp]
   be49a:	f7fd faa7 	bl	bb9ec <localtime_r>
	calendar_time.tm_year += 1900;
   be49e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   be4a0:	4d09      	ldr	r5, [pc, #36]	; (be4c8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   be4a2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   be4a6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   be4a8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   be4aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be4ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   be4ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be4b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   be4b2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   be4b6:	6823      	ldr	r3, [r4, #0]
   be4b8:	602b      	str	r3, [r5, #0]
    }
}
   be4ba:	b00c      	add	sp, #48	; 0x30
   be4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be4c0:	2003e6e0 	.word	0x2003e6e0
   be4c4:	2003e6d8 	.word	0x2003e6d8
   be4c8:	2003e6b4 	.word	0x2003e6b4
   be4cc:	2003e6e8 	.word	0x2003e6e8

000be4d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   be4d0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   be4d2:	2000      	movs	r0, #0
   be4d4:	f7fd f99a 	bl	bb80c <spark_sync_time_pending>
   be4d8:	b128      	cbz	r0, be4e6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   be4da:	f7fd f977 	bl	bb7cc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   be4de:	f080 0001 	eor.w	r0, r0, #1
   be4e2:	b2c0      	uxtb	r0, r0
    }
   be4e4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   be4e6:	2001      	movs	r0, #1
   be4e8:	e7fc      	b.n	be4e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000be4ec <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   be4ec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   be4ee:	f7ff ffb9 	bl	be464 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   be4f2:	4b01      	ldr	r3, [pc, #4]	; (be4f8 <_ZN9TimeClass4hourEx+0xc>)
   be4f4:	6898      	ldr	r0, [r3, #8]
   be4f6:	bd08      	pop	{r3, pc}
   be4f8:	2003e6b4 	.word	0x2003e6b4

000be4fc <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   be4fc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   be4fe:	f7ff ffb1 	bl	be464 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   be502:	4b01      	ldr	r3, [pc, #4]	; (be508 <_ZN9TimeClass3dayEx+0xc>)
   be504:	68d8      	ldr	r0, [r3, #12]
   be506:	bd08      	pop	{r3, pc}
   be508:	2003e6b4 	.word	0x2003e6b4

000be50c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   be50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   be50e:	4602      	mov	r2, r0
   be510:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   be512:	4668      	mov	r0, sp
    struct timeval tv = {
   be514:	2100      	movs	r1, #0
    };
   be516:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   be51a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   be51e:	f7fc fe81 	bl	bb224 <hal_rtc_set_time>
   be522:	4602      	mov	r2, r0
   be524:	b910      	cbnz	r0, be52c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   be526:	4601      	mov	r1, r0
   be528:	f7fd f8f6 	bl	bb718 <system_notify_time_changed>
    }
}
   be52c:	b005      	add	sp, #20
   be52e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be534 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   be534:	b530      	push	{r4, r5, lr}
   be536:	b093      	sub	sp, #76	; 0x4c
   be538:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   be53c:	4b19      	ldr	r3, [pc, #100]	; (be5a4 <_ZN9TimeClass7timeStrEx+0x70>)
{
   be53e:	4604      	mov	r4, r0
    t += time_zone_cache;
   be540:	e9d3 1000 	ldrd	r1, r0, [r3]
   be544:	9b01      	ldr	r3, [sp, #4]
   be546:	1852      	adds	r2, r2, r1
   be548:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   be54c:	4816      	ldr	r0, [pc, #88]	; (be5a8 <_ZN9TimeClass7timeStrEx+0x74>)
   be54e:	e9d0 1000 	ldrd	r1, r0, [r0]
   be552:	1852      	adds	r2, r2, r1
   be554:	eb43 0300 	adc.w	r3, r3, r0
   be558:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   be55c:	2224      	movs	r2, #36	; 0x24
   be55e:	eb0d 0002 	add.w	r0, sp, r2
   be562:	2100      	movs	r1, #0
   be564:	f001 f930 	bl	bf7c8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   be568:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   be56a:	a909      	add	r1, sp, #36	; 0x24
   be56c:	4668      	mov	r0, sp
   be56e:	f7fd fa3d 	bl	bb9ec <localtime_r>
    char ascstr[26] = {};
   be572:	2216      	movs	r2, #22
   be574:	4629      	mov	r1, r5
   be576:	a803      	add	r0, sp, #12
   be578:	9502      	str	r5, [sp, #8]
   be57a:	f001 f925 	bl	bf7c8 <memset>
    asctime_r(&calendar_time, ascstr);
   be57e:	a902      	add	r1, sp, #8
   be580:	a809      	add	r0, sp, #36	; 0x24
   be582:	f001 f8a7 	bl	bf6d4 <asctime_r>
    int len = strlen(ascstr);
   be586:	a802      	add	r0, sp, #8
   be588:	f001 f9d9 	bl	bf93e <strlen>
    ascstr[len-1] = 0; // remove final newline
   be58c:	ab12      	add	r3, sp, #72	; 0x48
   be58e:	4418      	add	r0, r3
    return String(ascstr);
   be590:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   be592:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   be596:	4620      	mov	r0, r4
   be598:	f7ff fd75 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
}
   be59c:	4620      	mov	r0, r4
   be59e:	b013      	add	sp, #76	; 0x4c
   be5a0:	bd30      	pop	{r4, r5, pc}
   be5a2:	bf00      	nop
   be5a4:	2003e6e0 	.word	0x2003e6e0
   be5a8:	2003e6d8 	.word	0x2003e6d8

000be5ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   be5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be5b0:	b0a4      	sub	sp, #144	; 0x90
   be5b2:	4607      	mov	r7, r0
   be5b4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be5b6:	a814      	add	r0, sp, #80	; 0x50
{
   be5b8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be5ba:	223f      	movs	r2, #63	; 0x3f
{
   be5bc:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be5be:	f001 f9da 	bl	bf976 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   be5c2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   be5c4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   be5c6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   be5ca:	f001 f9b8 	bl	bf93e <strlen>
   be5ce:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   be5d0:	bb4c      	cbnz	r4, be626 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   be5d2:	4929      	ldr	r1, [pc, #164]	; (be678 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   be5d4:	a803      	add	r0, sp, #12
   be5d6:	f001 f98c 	bl	bf8f2 <strcpy>
   be5da:	ac14      	add	r4, sp, #80	; 0x50
{
   be5dc:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   be5de:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   be5e2:	45b1      	cmp	r9, r6
   be5e4:	d934      	bls.n	be650 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   be5e6:	7823      	ldrb	r3, [r4, #0]
   be5e8:	2b25      	cmp	r3, #37	; 0x25
   be5ea:	f106 0a01 	add.w	sl, r6, #1
   be5ee:	d117      	bne.n	be620 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   be5f0:	7863      	ldrb	r3, [r4, #1]
   be5f2:	2b7a      	cmp	r3, #122	; 0x7a
   be5f4:	d114      	bne.n	be620 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   be5f6:	a803      	add	r0, sp, #12
   be5f8:	f001 f9a1 	bl	bf93e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   be5fc:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   be5fe:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   be600:	1830      	adds	r0, r6, r0
   be602:	4418      	add	r0, r3
   be604:	eba9 0206 	sub.w	r2, r9, r6
   be608:	1ca1      	adds	r1, r4, #2
   be60a:	f001 f8b5 	bl	bf778 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   be60e:	462a      	mov	r2, r5
   be610:	a903      	add	r1, sp, #12
   be612:	4620      	mov	r0, r4
   be614:	f001 f8b0 	bl	bf778 <memcpy>
            len = strlen(format_str);
   be618:	a814      	add	r0, sp, #80	; 0x50
   be61a:	f001 f990 	bl	bf93e <strlen>
   be61e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   be620:	3401      	adds	r4, #1
   be622:	4656      	mov	r6, sl
   be624:	e7db      	b.n	be5de <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   be626:	233c      	movs	r3, #60	; 0x3c
   be628:	fb94 f2f3 	sdiv	r2, r4, r3
   be62c:	2a00      	cmp	r2, #0
   be62e:	bfb8      	it	lt
   be630:	4252      	neglt	r2, r2
   be632:	fbb2 f1f3 	udiv	r1, r2, r3
   be636:	fb03 2211 	mls	r2, r3, r1, r2
   be63a:	9200      	str	r2, [sp, #0]
   be63c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   be640:	4a0e      	ldr	r2, [pc, #56]	; (be67c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   be642:	fb94 f3f3 	sdiv	r3, r4, r3
   be646:	2110      	movs	r1, #16
   be648:	a803      	add	r0, sp, #12
   be64a:	f7fd f98f 	bl	bb96c <snprintf>
   be64e:	e7c4      	b.n	be5da <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   be650:	2100      	movs	r1, #0
   be652:	222e      	movs	r2, #46	; 0x2e
   be654:	a808      	add	r0, sp, #32
   be656:	9107      	str	r1, [sp, #28]
   be658:	f001 f8b6 	bl	bf7c8 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   be65c:	4643      	mov	r3, r8
   be65e:	aa14      	add	r2, sp, #80	; 0x50
   be660:	2132      	movs	r1, #50	; 0x32
   be662:	a807      	add	r0, sp, #28
   be664:	f7fd f9ba 	bl	bb9dc <strftime>
    return String(buf);
   be668:	a907      	add	r1, sp, #28
   be66a:	4638      	mov	r0, r7
   be66c:	f7ff fd0b 	bl	be086 <_ZN6StringC1EPK19__FlashStringHelper>
}
   be670:	4638      	mov	r0, r7
   be672:	b024      	add	sp, #144	; 0x90
   be674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be678:	000c0cfb 	.word	0x000c0cfb
   be67c:	000c0cfd 	.word	0x000c0cfd

000be680 <_ZN9TimeClass6formatExPKc>:
{
   be680:	b5f0      	push	{r4, r5, r6, r7, lr}
   be682:	b08d      	sub	sp, #52	; 0x34
   be684:	e9cd 2300 	strd	r2, r3, [sp]
   be688:	9d12      	ldr	r5, [sp, #72]	; 0x48
   be68a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   be68c:	b915      	cbnz	r5, be694 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   be68e:	4b19      	ldr	r3, [pc, #100]	; (be6f4 <_ZN9TimeClass6formatExPKc+0x74>)
   be690:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   be692:	b12d      	cbz	r5, be6a0 <_ZN9TimeClass6formatExPKc+0x20>
   be694:	4b18      	ldr	r3, [pc, #96]	; (be6f8 <_ZN9TimeClass6formatExPKc+0x78>)
   be696:	4628      	mov	r0, r5
   be698:	6819      	ldr	r1, [r3, #0]
   be69a:	f001 f920 	bl	bf8de <strcmp>
   be69e:	b938      	cbnz	r0, be6b0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   be6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   be6a4:	4620      	mov	r0, r4
   be6a6:	f7ff ff45 	bl	be534 <_ZN9TimeClass7timeStrEx>
}
   be6aa:	4620      	mov	r0, r4
   be6ac:	b00d      	add	sp, #52	; 0x34
   be6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   be6b0:	4e12      	ldr	r6, [pc, #72]	; (be6fc <_ZN9TimeClass6formatExPKc+0x7c>)
   be6b2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   be6b4:	4f12      	ldr	r7, [pc, #72]	; (be700 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   be6b6:	e9d6 3200 	ldrd	r3, r2, [r6]
   be6ba:	185b      	adds	r3, r3, r1
   be6bc:	9901      	ldr	r1, [sp, #4]
   be6be:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   be6c2:	e9d7 0100 	ldrd	r0, r1, [r7]
   be6c6:	181b      	adds	r3, r3, r0
   be6c8:	eb42 0201 	adc.w	r2, r2, r1
   be6cc:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   be6d0:	2100      	movs	r1, #0
   be6d2:	2224      	movs	r2, #36	; 0x24
   be6d4:	a803      	add	r0, sp, #12
   be6d6:	f001 f877 	bl	bf7c8 <memset>
    localtime_r(&t, &calendar_time);
   be6da:	a903      	add	r1, sp, #12
   be6dc:	4668      	mov	r0, sp
   be6de:	f7fd f985 	bl	bb9ec <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   be6e2:	6832      	ldr	r2, [r6, #0]
   be6e4:	683b      	ldr	r3, [r7, #0]
   be6e6:	a903      	add	r1, sp, #12
   be6e8:	4413      	add	r3, r2
   be6ea:	4620      	mov	r0, r4
   be6ec:	462a      	mov	r2, r5
   be6ee:	f7ff ff5d 	bl	be5ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   be6f2:	e7da      	b.n	be6aa <_ZN9TimeClass6formatExPKc+0x2a>
   be6f4:	2003e6b0 	.word	0x2003e6b0
   be6f8:	2003deb8 	.word	0x2003deb8
   be6fc:	2003e6e0 	.word	0x2003e6e0
   be700:	2003e6d8 	.word	0x2003e6d8

000be704 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   be704:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   be706:	2000      	movs	r0, #0
   be708:	f7fc fd74 	bl	bb1f4 <hal_rtc_time_is_valid>
    if (rtcstate)
   be70c:	4604      	mov	r4, r0
   be70e:	b9a0      	cbnz	r0, be73a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   be710:	f7fc ffc2 	bl	bb698 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   be714:	2801      	cmp	r0, #1
   be716:	d110      	bne.n	be73a <_ZN9TimeClass7isValidEv+0x36>
   be718:	4620      	mov	r0, r4
   be71a:	f7fc fff5 	bl	bb708 <system_thread_get_state>
   be71e:	b960      	cbnz	r0, be73a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   be720:	f7ff fed6 	bl	be4d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   be724:	b910      	cbnz	r0, be72c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   be726:	f7fd f841 	bl	bb7ac <spark_process>
        while (_while() && !_condition()) {
   be72a:	e7f9      	b.n	be720 <_ZN9TimeClass7isValidEv+0x1c>
   be72c:	f7ff fed0 	bl	be4d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   be730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   be734:	2000      	movs	r0, #0
   be736:	f7fc bd5d 	b.w	bb1f4 <hal_rtc_time_is_valid>
}
   be73a:	4620      	mov	r0, r4
   be73c:	bd10      	pop	{r4, pc}

000be73e <_ZN9TimeClass3nowEv>:
{
   be73e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   be740:	f7ff ffe0 	bl	be704 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   be744:	2210      	movs	r2, #16
   be746:	2100      	movs	r1, #0
   be748:	4668      	mov	r0, sp
   be74a:	f001 f83d 	bl	bf7c8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   be74e:	2100      	movs	r1, #0
   be750:	4668      	mov	r0, sp
   be752:	f7fc fd5f 	bl	bb214 <hal_rtc_get_time>
}
   be756:	9800      	ldr	r0, [sp, #0]
   be758:	b005      	add	sp, #20
   be75a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be760 <_ZN9TimeClass4hourEv>:
{
   be760:	b508      	push	{r3, lr}
	return hour(now());
   be762:	f7ff ffec 	bl	be73e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   be766:	17c1      	asrs	r1, r0, #31
   be768:	f7ff fe7c 	bl	be464 <_ZL22Refresh_UnixTime_Cachex>
}
   be76c:	4b01      	ldr	r3, [pc, #4]	; (be774 <_ZN9TimeClass4hourEv+0x14>)
   be76e:	6898      	ldr	r0, [r3, #8]
   be770:	bd08      	pop	{r3, pc}
   be772:	bf00      	nop
   be774:	2003e6b4 	.word	0x2003e6b4

000be778 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   be778:	4b02      	ldr	r3, [pc, #8]	; (be784 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   be77a:	681a      	ldr	r2, [r3, #0]
   be77c:	4b02      	ldr	r3, [pc, #8]	; (be788 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   be77e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   be780:	4770      	bx	lr
   be782:	bf00      	nop
   be784:	2003deb8 	.word	0x2003deb8
   be788:	2003e6b0 	.word	0x2003e6b0

000be78c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   be78c:	4770      	bx	lr

000be78e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   be78e:	7441      	strb	r1, [r0, #17]
}
   be790:	4770      	bx	lr

000be792 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   be792:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   be794:	7c00      	ldrb	r0, [r0, #16]
   be796:	f7fc feed 	bl	bb574 <hal_usart_available_data_for_write>
}
   be79a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be79e:	bd08      	pop	{r3, pc}

000be7a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   be7a0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   be7a2:	7c00      	ldrb	r0, [r0, #16]
   be7a4:	f7fc febe 	bl	bb524 <hal_usart_available>
}
   be7a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be7ac:	bd08      	pop	{r3, pc}

000be7ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   be7ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   be7b0:	7c00      	ldrb	r0, [r0, #16]
   be7b2:	f7fc fec7 	bl	bb544 <hal_usart_peek>
}
   be7b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be7ba:	bd08      	pop	{r3, pc}

000be7bc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   be7bc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   be7be:	7c00      	ldrb	r0, [r0, #16]
   be7c0:	f7fc feb8 	bl	bb534 <hal_usart_read>
}
   be7c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be7c8:	bd08      	pop	{r3, pc}

000be7ca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   be7ca:	7c00      	ldrb	r0, [r0, #16]
   be7cc:	f7fc bec2 	b.w	bb554 <hal_usart_flush>

000be7d0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   be7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be7d2:	7c45      	ldrb	r5, [r0, #17]
{
   be7d4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be7d6:	b12d      	cbz	r5, be7e4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   be7d8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   be7da:	b003      	add	sp, #12
   be7dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   be7e0:	f7fc be98 	b.w	bb514 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be7e4:	7c00      	ldrb	r0, [r0, #16]
   be7e6:	9101      	str	r1, [sp, #4]
   be7e8:	f7fc fec4 	bl	bb574 <hal_usart_available_data_for_write>
   be7ec:	2800      	cmp	r0, #0
   be7ee:	9901      	ldr	r1, [sp, #4]
   be7f0:	dcf2      	bgt.n	be7d8 <_ZN11USARTSerial5writeEh+0x8>
}
   be7f2:	4628      	mov	r0, r5
   be7f4:	b003      	add	sp, #12
   be7f6:	bd30      	pop	{r4, r5, pc}

000be7f8 <_ZN11USARTSerialD0Ev>:
   be7f8:	b510      	push	{r4, lr}
   be7fa:	2114      	movs	r1, #20
   be7fc:	4604      	mov	r4, r0
   be7fe:	f7f5 fc4e 	bl	b409e <_ZdlPvj>
   be802:	4620      	mov	r0, r4
   be804:	bd10      	pop	{r4, pc}
	...

000be808 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   be808:	b510      	push	{r4, lr}
   be80a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   be80e:	4604      	mov	r4, r0
   be810:	4608      	mov	r0, r1
   be812:	4611      	mov	r1, r2
   be814:	2200      	movs	r2, #0
   be816:	e9c4 2301 	strd	r2, r3, [r4, #4]
   be81a:	4b04      	ldr	r3, [pc, #16]	; (be82c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   be81c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   be81e:	2301      	movs	r3, #1
  _serial = serial;
   be820:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   be822:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   be824:	f7fc feb6 	bl	bb594 <hal_usart_init_ex>
}
   be828:	4620      	mov	r0, r4
   be82a:	bd10      	pop	{r4, pc}
   be82c:	000c16a8 	.word	0x000c16a8

000be830 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   be830:	7c00      	ldrb	r0, [r0, #16]
   be832:	2300      	movs	r3, #0
   be834:	f7fc bea6 	b.w	bb584 <hal_usart_begin_config>

000be838 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   be838:	2200      	movs	r2, #0
   be83a:	f7ff bff9 	b.w	be830 <_ZN11USARTSerial5beginEmm>

000be83e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   be83e:	7c00      	ldrb	r0, [r0, #16]
   be840:	f7fc be60 	b.w	bb504 <hal_usart_end>

000be844 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   be844:	7441      	strb	r1, [r0, #17]
}
   be846:	4770      	bx	lr

000be848 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be848:	4770      	bx	lr

000be84a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   be84a:	4770      	bx	lr

000be84c <_ZN9USBSerial4readEv>:
{
   be84c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   be84e:	2100      	movs	r1, #0
   be850:	7c00      	ldrb	r0, [r0, #16]
   be852:	f7fc fecf 	bl	bb5f4 <HAL_USB_USART_Receive_Data>
}
   be856:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be85a:	bd08      	pop	{r3, pc}

000be85c <_ZN9USBSerial4peekEv>:
{
   be85c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   be85e:	2101      	movs	r1, #1
   be860:	7c00      	ldrb	r0, [r0, #16]
   be862:	f7fc fec7 	bl	bb5f4 <HAL_USB_USART_Receive_Data>
}
   be866:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be86a:	bd08      	pop	{r3, pc}

000be86c <_ZN9USBSerial17availableForWriteEv>:
{
   be86c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   be86e:	7c00      	ldrb	r0, [r0, #16]
   be870:	f7fc feb8 	bl	bb5e4 <HAL_USB_USART_Available_Data_For_Write>
}
   be874:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be878:	bd08      	pop	{r3, pc}

000be87a <_ZN9USBSerial9availableEv>:
{
   be87a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   be87c:	7c00      	ldrb	r0, [r0, #16]
   be87e:	f7fc fea9 	bl	bb5d4 <HAL_USB_USART_Available_Data>
}
   be882:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be886:	bd08      	pop	{r3, pc}

000be888 <_ZN9USBSerial5writeEh>:
{
   be888:	b513      	push	{r0, r1, r4, lr}
   be88a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   be88c:	7c00      	ldrb	r0, [r0, #16]
{
   be88e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   be890:	f7fc fea8 	bl	bb5e4 <HAL_USB_USART_Available_Data_For_Write>
   be894:	2800      	cmp	r0, #0
   be896:	9901      	ldr	r1, [sp, #4]
   be898:	dc01      	bgt.n	be89e <_ZN9USBSerial5writeEh+0x16>
   be89a:	7c60      	ldrb	r0, [r4, #17]
   be89c:	b120      	cbz	r0, be8a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   be89e:	7c20      	ldrb	r0, [r4, #16]
   be8a0:	f7fc feb0 	bl	bb604 <HAL_USB_USART_Send_Data>
   be8a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   be8a8:	b002      	add	sp, #8
   be8aa:	bd10      	pop	{r4, pc}

000be8ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   be8ac:	7c00      	ldrb	r0, [r0, #16]
   be8ae:	f7fc beb1 	b.w	bb614 <HAL_USB_USART_Flush_Data>

000be8b2 <_ZN9USBSerialD0Ev>:
   be8b2:	b510      	push	{r4, lr}
   be8b4:	2114      	movs	r1, #20
   be8b6:	4604      	mov	r4, r0
   be8b8:	f7f5 fbf1 	bl	b409e <_ZdlPvj>
   be8bc:	4620      	mov	r0, r4
   be8be:	bd10      	pop	{r4, pc}

000be8c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   be8c0:	b510      	push	{r4, lr}
   be8c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   be8c6:	4604      	mov	r4, r0
   be8c8:	4608      	mov	r0, r1
   be8ca:	2100      	movs	r1, #0
   be8cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   be8d0:	4b04      	ldr	r3, [pc, #16]	; (be8e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   be8d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   be8d4:	2301      	movs	r3, #1
  _serial = serial;
   be8d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   be8d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   be8da:	4611      	mov	r1, r2
   be8dc:	f7fc fe62 	bl	bb5a4 <HAL_USB_USART_Init>
}
   be8e0:	4620      	mov	r0, r4
   be8e2:	bd10      	pop	{r4, pc}
   be8e4:	000c16d8 	.word	0x000c16d8

000be8e8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   be8e8:	7c00      	ldrb	r0, [r0, #16]
   be8ea:	2200      	movs	r2, #0
   be8ec:	f7fc be62 	b.w	bb5b4 <HAL_USB_USART_Begin>

000be8f0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   be8f0:	7c00      	ldrb	r0, [r0, #16]
   be8f2:	f7fc be67 	b.w	bb5c4 <HAL_USB_USART_End>

000be8f6 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   be8f6:	7c00      	ldrb	r0, [r0, #16]
   be8f8:	f7fc be94 	b.w	bb624 <HAL_USB_USART_Is_Connected>

000be8fc <_Z19acquireSerialBufferv>:
{
   be8fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   be8fe:	2214      	movs	r2, #20
{
   be900:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   be902:	2100      	movs	r1, #0
   be904:	f000 ff60 	bl	bf7c8 <memset>
}
   be908:	4620      	mov	r0, r4
   be90a:	bd10      	pop	{r4, pc}

000be90c <_Z16_fetch_usbserialv>:
{
   be90c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be90e:	4c0f      	ldr	r4, [pc, #60]	; (be94c <_Z16_fetch_usbserialv+0x40>)
{
   be910:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   be912:	a803      	add	r0, sp, #12
   be914:	f7ff fff2 	bl	be8fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be918:	7821      	ldrb	r1, [r4, #0]
   be91a:	f3bf 8f5b 	dmb	ish
   be91e:	f011 0101 	ands.w	r1, r1, #1
   be922:	d10f      	bne.n	be944 <_Z16_fetch_usbserialv+0x38>
   be924:	4620      	mov	r0, r4
   be926:	9101      	str	r1, [sp, #4]
   be928:	f7f5 fbc8 	bl	b40bc <__cxa_guard_acquire>
   be92c:	9901      	ldr	r1, [sp, #4]
   be92e:	b148      	cbz	r0, be944 <_Z16_fetch_usbserialv+0x38>
   be930:	aa03      	add	r2, sp, #12
   be932:	4807      	ldr	r0, [pc, #28]	; (be950 <_Z16_fetch_usbserialv+0x44>)
   be934:	f7ff ffc4 	bl	be8c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   be938:	4620      	mov	r0, r4
   be93a:	f7f5 fbc4 	bl	b40c6 <__cxa_guard_release>
   be93e:	4805      	ldr	r0, [pc, #20]	; (be954 <_Z16_fetch_usbserialv+0x48>)
   be940:	f000 feee 	bl	bf720 <atexit>
	return _usbserial;
}
   be944:	4802      	ldr	r0, [pc, #8]	; (be950 <_Z16_fetch_usbserialv+0x44>)
   be946:	b008      	add	sp, #32
   be948:	bd10      	pop	{r4, pc}
   be94a:	bf00      	nop
   be94c:	2003e6f0 	.word	0x2003e6f0
   be950:	2003e6f4 	.word	0x2003e6f4
   be954:	000be849 	.word	0x000be849

000be958 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   be958:	4b01      	ldr	r3, [pc, #4]	; (be960 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   be95a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   be95c:	4770      	bx	lr
   be95e:	bf00      	nop
   be960:	2003debc 	.word	0x2003debc

000be964 <serialEventRun>:
{
   be964:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   be966:	4b0b      	ldr	r3, [pc, #44]	; (be994 <serialEventRun+0x30>)
   be968:	b143      	cbz	r3, be97c <serialEventRun+0x18>
   be96a:	f7ff ffcf 	bl	be90c <_Z16_fetch_usbserialv>
   be96e:	6803      	ldr	r3, [r0, #0]
   be970:	691b      	ldr	r3, [r3, #16]
   be972:	4798      	blx	r3
   be974:	2800      	cmp	r0, #0
   be976:	dd01      	ble.n	be97c <serialEventRun+0x18>
        serialEvent();
   be978:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   be97c:	4b06      	ldr	r3, [pc, #24]	; (be998 <serialEventRun+0x34>)
   be97e:	b143      	cbz	r3, be992 <serialEventRun+0x2e>
   be980:	f000 f9c2 	bl	bed08 <_Z22__fetch_global_Serial1v>
   be984:	6803      	ldr	r3, [r0, #0]
   be986:	691b      	ldr	r3, [r3, #16]
   be988:	4798      	blx	r3
   be98a:	2800      	cmp	r0, #0
   be98c:	dd01      	ble.n	be992 <serialEventRun+0x2e>
        serialEvent1();
   be98e:	f3af 8000 	nop.w
}
   be992:	bd08      	pop	{r3, pc}
	...

000be99c <_post_loop>:
{
   be99c:	b508      	push	{r3, lr}
	serialEventRun();
   be99e:	f7ff ffe1 	bl	be964 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   be9a2:	f7fc fc1f 	bl	bb1e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   be9a6:	4b01      	ldr	r3, [pc, #4]	; (be9ac <_post_loop+0x10>)
   be9a8:	6018      	str	r0, [r3, #0]
}
   be9aa:	bd08      	pop	{r3, pc}
   be9ac:	2003e710 	.word	0x2003e710

000be9b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   be9b0:	4805      	ldr	r0, [pc, #20]	; (be9c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   be9b2:	4a06      	ldr	r2, [pc, #24]	; (be9cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   be9b4:	4906      	ldr	r1, [pc, #24]	; (be9d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   be9b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   be9b8:	1a12      	subs	r2, r2, r0
   be9ba:	f000 fedd 	bl	bf778 <memcpy>
    __backup_sram_signature = signature;
   be9be:	4b05      	ldr	r3, [pc, #20]	; (be9d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   be9c0:	4a05      	ldr	r2, [pc, #20]	; (be9d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   be9c2:	601a      	str	r2, [r3, #0]
}
   be9c4:	bd08      	pop	{r3, pc}
   be9c6:	bf00      	nop
   be9c8:	2003f400 	.word	0x2003f400
   be9cc:	2003f404 	.word	0x2003f404
   be9d0:	000c1994 	.word	0x000c1994
   be9d4:	2003f400 	.word	0x2003f400
   be9d8:	9a271c1e 	.word	0x9a271c1e

000be9dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   be9dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   be9de:	2300      	movs	r3, #0
   be9e0:	9300      	str	r3, [sp, #0]
   be9e2:	461a      	mov	r2, r3
   be9e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   be9e8:	f7fc fea8 	bl	bb73c <system_ctrl_set_result>
}
   be9ec:	b003      	add	sp, #12
   be9ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be9f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   be9f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   be9f6:	8843      	ldrh	r3, [r0, #2]
   be9f8:	2b0a      	cmp	r3, #10
   be9fa:	d008      	beq.n	bea0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   be9fc:	2b50      	cmp	r3, #80	; 0x50
   be9fe:	d10b      	bne.n	bea18 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bea00:	4b09      	ldr	r3, [pc, #36]	; (bea28 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bea02:	681b      	ldr	r3, [r3, #0]
   bea04:	b14b      	cbz	r3, bea1a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bea06:	b003      	add	sp, #12
   bea08:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bea0c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bea0e:	f7ff ffe5 	bl	be9dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bea12:	b003      	add	sp, #12
   bea14:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bea18:	2300      	movs	r3, #0
   bea1a:	9300      	str	r3, [sp, #0]
   bea1c:	461a      	mov	r2, r3
   bea1e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bea22:	f7fc fe8b 	bl	bb73c <system_ctrl_set_result>
}
   bea26:	e7f4      	b.n	bea12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bea28:	2003e70c 	.word	0x2003e70c

000bea2c <module_user_init_hook>:
{
   bea2c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bea2e:	4812      	ldr	r0, [pc, #72]	; (bea78 <module_user_init_hook+0x4c>)
   bea30:	2100      	movs	r1, #0
   bea32:	f7fc ffcb 	bl	bb9cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bea36:	4b11      	ldr	r3, [pc, #68]	; (bea7c <module_user_init_hook+0x50>)
   bea38:	681a      	ldr	r2, [r3, #0]
   bea3a:	4b11      	ldr	r3, [pc, #68]	; (bea80 <module_user_init_hook+0x54>)
   bea3c:	429a      	cmp	r2, r3
   bea3e:	4b11      	ldr	r3, [pc, #68]	; (bea84 <module_user_init_hook+0x58>)
   bea40:	bf0c      	ite	eq
   bea42:	2201      	moveq	r2, #1
   bea44:	2200      	movne	r2, #0
   bea46:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bea48:	d001      	beq.n	bea4e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bea4a:	f7ff ffb1 	bl	be9b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bea4e:	f7fc fbb1 	bl	bb1b4 <HAL_RNG_GetRandomNumber>
   bea52:	4604      	mov	r4, r0
    srand(seed);
   bea54:	f000 fec0 	bl	bf7d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bea58:	4b0b      	ldr	r3, [pc, #44]	; (bea88 <module_user_init_hook+0x5c>)
   bea5a:	b113      	cbz	r3, bea62 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bea5c:	4620      	mov	r0, r4
   bea5e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bea62:	2100      	movs	r1, #0
   bea64:	4808      	ldr	r0, [pc, #32]	; (bea88 <module_user_init_hook+0x5c>)
   bea66:	f7fc fee9 	bl	bb83c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bea6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bea6e:	4807      	ldr	r0, [pc, #28]	; (bea8c <module_user_init_hook+0x60>)
   bea70:	2100      	movs	r1, #0
   bea72:	f7fc be59 	b.w	bb728 <system_ctrl_set_app_request_handler>
   bea76:	bf00      	nop
   bea78:	000be959 	.word	0x000be959
   bea7c:	2003f400 	.word	0x2003f400
   bea80:	9a271c1e 	.word	0x9a271c1e
   bea84:	2003e708 	.word	0x2003e708
   bea88:	00000000 	.word	0x00000000
   bea8c:	000be9f5 	.word	0x000be9f5

000bea90 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bea90:	b508      	push	{r3, lr}
   bea92:	4b02      	ldr	r3, [pc, #8]	; (bea9c <spark_protocol_instance+0xc>)
   bea94:	681b      	ldr	r3, [r3, #0]
   bea96:	681b      	ldr	r3, [r3, #0]
   bea98:	9301      	str	r3, [sp, #4]
   bea9a:	bd08      	pop	{r3, pc}
   bea9c:	0003025c 	.word	0x0003025c

000beaa0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   beaa0:	b508      	push	{r3, lr}
   beaa2:	4b02      	ldr	r3, [pc, #8]	; (beaac <spark_protocol_set_product_id+0xc>)
   beaa4:	681b      	ldr	r3, [r3, #0]
   beaa6:	685b      	ldr	r3, [r3, #4]
   beaa8:	9301      	str	r3, [sp, #4]
   beaaa:	bd08      	pop	{r3, pc}
   beaac:	0003025c 	.word	0x0003025c

000beab0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   beab0:	b508      	push	{r3, lr}
   beab2:	4b02      	ldr	r3, [pc, #8]	; (beabc <spark_protocol_set_product_firmware_version+0xc>)
   beab4:	681b      	ldr	r3, [r3, #0]
   beab6:	689b      	ldr	r3, [r3, #8]
   beab8:	9301      	str	r3, [sp, #4]
   beaba:	bd08      	pop	{r3, pc}
   beabc:	0003025c 	.word	0x0003025c

000beac0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   beac0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   beac2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   beac4:	d902      	bls.n	beacc <pinAvailable+0xc>
    return false;
   beac6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   beac8:	b002      	add	sp, #8
   beaca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   beacc:	f1a0 030b 	sub.w	r3, r0, #11
   bead0:	2b02      	cmp	r3, #2
   bead2:	d81a      	bhi.n	beb0a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bead4:	4c17      	ldr	r4, [pc, #92]	; (beb34 <pinAvailable+0x74>)
   bead6:	7821      	ldrb	r1, [r4, #0]
   bead8:	f3bf 8f5b 	dmb	ish
   beadc:	f011 0101 	ands.w	r1, r1, #1
   beae0:	d10b      	bne.n	beafa <pinAvailable+0x3a>
   beae2:	4620      	mov	r0, r4
   beae4:	9101      	str	r1, [sp, #4]
   beae6:	f7f5 fae9 	bl	b40bc <__cxa_guard_acquire>
   beaea:	9901      	ldr	r1, [sp, #4]
   beaec:	b128      	cbz	r0, beafa <pinAvailable+0x3a>
   beaee:	4812      	ldr	r0, [pc, #72]	; (beb38 <pinAvailable+0x78>)
   beaf0:	f7ff f9be 	bl	bde70 <_ZN8SPIClassC1E19hal_spi_interface_t>
   beaf4:	4620      	mov	r0, r4
   beaf6:	f7f5 fae6 	bl	b40c6 <__cxa_guard_release>
   beafa:	4b0f      	ldr	r3, [pc, #60]	; (beb38 <pinAvailable+0x78>)
   beafc:	7818      	ldrb	r0, [r3, #0]
   beafe:	f7fc fc79 	bl	bb3f4 <hal_spi_is_enabled>
   beb02:	2800      	cmp	r0, #0
   beb04:	d1df      	bne.n	beac6 <pinAvailable+0x6>
  return true; // 'pin' is available
   beb06:	2001      	movs	r0, #1
   beb08:	e7de      	b.n	beac8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   beb0a:	2801      	cmp	r0, #1
   beb0c:	d809      	bhi.n	beb22 <pinAvailable+0x62>
   beb0e:	f000 f897 	bl	bec40 <_Z19__fetch_global_Wirev>
   beb12:	2100      	movs	r1, #0
   beb14:	7c00      	ldrb	r0, [r0, #16]
   beb16:	f7fc fc0d 	bl	bb334 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   beb1a:	f080 0001 	eor.w	r0, r0, #1
   beb1e:	b2c0      	uxtb	r0, r0
   beb20:	e7d2      	b.n	beac8 <pinAvailable+0x8>
   beb22:	3809      	subs	r0, #9
   beb24:	2801      	cmp	r0, #1
   beb26:	d8ee      	bhi.n	beb06 <pinAvailable+0x46>
   beb28:	f000 f8ee 	bl	bed08 <_Z22__fetch_global_Serial1v>
   beb2c:	7c00      	ldrb	r0, [r0, #16]
   beb2e:	f7fc fd19 	bl	bb564 <hal_usart_is_enabled>
   beb32:	e7f2      	b.n	beb1a <pinAvailable+0x5a>
   beb34:	2003e450 	.word	0x2003e450
   beb38:	2003e454 	.word	0x2003e454

000beb3c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   beb3c:	2823      	cmp	r0, #35	; 0x23
{
   beb3e:	b538      	push	{r3, r4, r5, lr}
   beb40:	4604      	mov	r4, r0
   beb42:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   beb44:	d80a      	bhi.n	beb5c <pinMode+0x20>
   beb46:	29ff      	cmp	r1, #255	; 0xff
   beb48:	d008      	beq.n	beb5c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   beb4a:	f7ff ffb9 	bl	beac0 <pinAvailable>
   beb4e:	b128      	cbz	r0, beb5c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   beb50:	4629      	mov	r1, r5
   beb52:	4620      	mov	r0, r4
}
   beb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   beb58:	f7fc bb74 	b.w	bb244 <HAL_Pin_Mode>
}
   beb5c:	bd38      	pop	{r3, r4, r5, pc}

000beb5e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   beb5e:	b538      	push	{r3, r4, r5, lr}
   beb60:	4604      	mov	r4, r0
   beb62:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   beb64:	f7fc fb76 	bl	bb254 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   beb68:	28ff      	cmp	r0, #255	; 0xff
   beb6a:	d010      	beq.n	beb8e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   beb6c:	2806      	cmp	r0, #6
   beb6e:	d804      	bhi.n	beb7a <digitalWrite+0x1c>
   beb70:	234d      	movs	r3, #77	; 0x4d
   beb72:	fa23 f000 	lsr.w	r0, r3, r0
   beb76:	07c3      	lsls	r3, r0, #31
   beb78:	d409      	bmi.n	beb8e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   beb7a:	4620      	mov	r0, r4
   beb7c:	f7ff ffa0 	bl	beac0 <pinAvailable>
   beb80:	b128      	cbz	r0, beb8e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   beb82:	4629      	mov	r1, r5
   beb84:	4620      	mov	r0, r4
}
   beb86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   beb8a:	f7fc bb6b 	b.w	bb264 <HAL_GPIO_Write>
}
   beb8e:	bd38      	pop	{r3, r4, r5, pc}

000beb90 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   beb90:	b510      	push	{r4, lr}
   beb92:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   beb94:	f7fc fb5e 	bl	bb254 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   beb98:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   beb9a:	b2db      	uxtb	r3, r3
   beb9c:	2b01      	cmp	r3, #1
   beb9e:	d908      	bls.n	bebb2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   beba0:	4620      	mov	r0, r4
   beba2:	f7ff ff8d 	bl	beac0 <pinAvailable>
   beba6:	b120      	cbz	r0, bebb2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   beba8:	4620      	mov	r0, r4
}
   bebaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bebae:	f7fc bb61 	b.w	bb274 <HAL_GPIO_Read>
}
   bebb2:	2000      	movs	r0, #0
   bebb4:	bd10      	pop	{r4, pc}

000bebb6 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bebb6:	280d      	cmp	r0, #13
{
   bebb8:	b510      	push	{r4, lr}
   bebba:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bebbc:	bf9c      	itt	ls
   bebbe:	340e      	addls	r4, #14
   bebc0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bebc2:	4620      	mov	r0, r4
   bebc4:	f7ff ff7c 	bl	beac0 <pinAvailable>
   bebc8:	b150      	cbz	r0, bebe0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bebca:	2103      	movs	r1, #3
   bebcc:	4620      	mov	r0, r4
   bebce:	f7fc fb31 	bl	bb234 <HAL_Validate_Pin_Function>
   bebd2:	2803      	cmp	r0, #3
   bebd4:	d104      	bne.n	bebe0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bebd6:	4620      	mov	r0, r4
}
   bebd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bebdc:	f7fc bb62 	b.w	bb2a4 <hal_adc_read>
}
   bebe0:	2000      	movs	r0, #0
   bebe2:	bd10      	pop	{r4, pc}

000bebe4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bebe4:	4770      	bx	lr

000bebe6 <__tcf_1>:
   bebe6:	4770      	bx	lr

000bebe8 <_Z17acquireWireBufferv>:
{
   bebe8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bebea:	2520      	movs	r5, #32
   bebec:	2314      	movs	r3, #20
{
   bebee:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bebf0:	6003      	str	r3, [r0, #0]
   bebf2:	6085      	str	r5, [r0, #8]
   bebf4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bebf6:	4906      	ldr	r1, [pc, #24]	; (bec10 <_Z17acquireWireBufferv+0x28>)
   bebf8:	4628      	mov	r0, r5
   bebfa:	f000 f8ab 	bl	bed54 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bebfe:	4904      	ldr	r1, [pc, #16]	; (bec10 <_Z17acquireWireBufferv+0x28>)
	};
   bec00:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bec02:	4628      	mov	r0, r5
   bec04:	f000 f8a6 	bl	bed54 <_ZnajRKSt9nothrow_t>
	};
   bec08:	60e0      	str	r0, [r4, #12]
}
   bec0a:	4620      	mov	r0, r4
   bec0c:	bd38      	pop	{r3, r4, r5, pc}
   bec0e:	bf00      	nop
   bec10:	000c1700 	.word	0x000c1700

000bec14 <_Z18acquireWire1Bufferv>:
   bec14:	b538      	push	{r3, r4, r5, lr}
   bec16:	2520      	movs	r5, #32
   bec18:	2314      	movs	r3, #20
   bec1a:	4604      	mov	r4, r0
   bec1c:	6003      	str	r3, [r0, #0]
   bec1e:	6085      	str	r5, [r0, #8]
   bec20:	6105      	str	r5, [r0, #16]
   bec22:	4906      	ldr	r1, [pc, #24]	; (bec3c <_Z18acquireWire1Bufferv+0x28>)
   bec24:	4628      	mov	r0, r5
   bec26:	f000 f895 	bl	bed54 <_ZnajRKSt9nothrow_t>
   bec2a:	4904      	ldr	r1, [pc, #16]	; (bec3c <_Z18acquireWire1Bufferv+0x28>)
   bec2c:	6060      	str	r0, [r4, #4]
   bec2e:	4628      	mov	r0, r5
   bec30:	f000 f890 	bl	bed54 <_ZnajRKSt9nothrow_t>
   bec34:	60e0      	str	r0, [r4, #12]
   bec36:	4620      	mov	r0, r4
   bec38:	bd38      	pop	{r3, r4, r5, pc}
   bec3a:	bf00      	nop
   bec3c:	000c1700 	.word	0x000c1700

000bec40 <_Z19__fetch_global_Wirev>:
{
   bec40:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bec42:	4d0e      	ldr	r5, [pc, #56]	; (bec7c <_Z19__fetch_global_Wirev+0x3c>)
   bec44:	7829      	ldrb	r1, [r5, #0]
   bec46:	f3bf 8f5b 	dmb	ish
   bec4a:	f011 0401 	ands.w	r4, r1, #1
{
   bec4e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bec50:	d111      	bne.n	bec76 <_Z19__fetch_global_Wirev+0x36>
   bec52:	4628      	mov	r0, r5
   bec54:	f7f5 fa32 	bl	b40bc <__cxa_guard_acquire>
   bec58:	b168      	cbz	r0, bec76 <_Z19__fetch_global_Wirev+0x36>
   bec5a:	a801      	add	r0, sp, #4
   bec5c:	f7ff ffc4 	bl	bebe8 <_Z17acquireWireBufferv>
   bec60:	aa01      	add	r2, sp, #4
   bec62:	4621      	mov	r1, r4
   bec64:	4806      	ldr	r0, [pc, #24]	; (bec80 <_Z19__fetch_global_Wirev+0x40>)
   bec66:	f7fd fbd7 	bl	bc418 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bec6a:	4628      	mov	r0, r5
   bec6c:	f7f5 fa2b 	bl	b40c6 <__cxa_guard_release>
   bec70:	4804      	ldr	r0, [pc, #16]	; (bec84 <_Z19__fetch_global_Wirev+0x44>)
   bec72:	f000 fd55 	bl	bf720 <atexit>
	return wire;
}
   bec76:	4802      	ldr	r0, [pc, #8]	; (bec80 <_Z19__fetch_global_Wirev+0x40>)
   bec78:	b007      	add	sp, #28
   bec7a:	bd30      	pop	{r4, r5, pc}
   bec7c:	2003e714 	.word	0x2003e714
   bec80:	2003e71c 	.word	0x2003e71c
   bec84:	000bebe5 	.word	0x000bebe5

000bec88 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bec88:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bec8a:	4c0e      	ldr	r4, [pc, #56]	; (becc4 <_Z20__fetch_global_Wire1v+0x3c>)
   bec8c:	7823      	ldrb	r3, [r4, #0]
   bec8e:	f3bf 8f5b 	dmb	ish
   bec92:	07db      	lsls	r3, r3, #31
{
   bec94:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bec96:	d411      	bmi.n	becbc <_Z20__fetch_global_Wire1v+0x34>
   bec98:	4620      	mov	r0, r4
   bec9a:	f7f5 fa0f 	bl	b40bc <__cxa_guard_acquire>
   bec9e:	b168      	cbz	r0, becbc <_Z20__fetch_global_Wire1v+0x34>
   beca0:	a801      	add	r0, sp, #4
   beca2:	f7ff ffb7 	bl	bec14 <_Z18acquireWire1Bufferv>
   beca6:	aa01      	add	r2, sp, #4
   beca8:	2101      	movs	r1, #1
   becaa:	4807      	ldr	r0, [pc, #28]	; (becc8 <_Z20__fetch_global_Wire1v+0x40>)
   becac:	f7fd fbb4 	bl	bc418 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   becb0:	4620      	mov	r0, r4
   becb2:	f7f5 fa08 	bl	b40c6 <__cxa_guard_release>
   becb6:	4805      	ldr	r0, [pc, #20]	; (beccc <_Z20__fetch_global_Wire1v+0x44>)
   becb8:	f000 fd32 	bl	bf720 <atexit>
	return wire;
}
   becbc:	4802      	ldr	r0, [pc, #8]	; (becc8 <_Z20__fetch_global_Wire1v+0x40>)
   becbe:	b006      	add	sp, #24
   becc0:	bd10      	pop	{r4, pc}
   becc2:	bf00      	nop
   becc4:	2003e718 	.word	0x2003e718
   becc8:	2003e730 	.word	0x2003e730
   beccc:	000bebe7 	.word	0x000bebe7

000becd0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   becd0:	4770      	bx	lr
	...

000becd4 <_Z20acquireSerial1Bufferv>:
{
   becd4:	b538      	push	{r3, r4, r5, lr}
   becd6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   becd8:	2514      	movs	r5, #20
   becda:	462a      	mov	r2, r5
   becdc:	2100      	movs	r1, #0
   becde:	f000 fd73 	bl	bf7c8 <memset>
   bece2:	8025      	strh	r5, [r4, #0]
   bece4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bece6:	4907      	ldr	r1, [pc, #28]	; (bed04 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bece8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   becea:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   becec:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   becee:	f000 f831 	bl	bed54 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   becf2:	4904      	ldr	r1, [pc, #16]	; (bed04 <_Z20acquireSerial1Bufferv+0x30>)
    };
   becf4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   becf6:	4628      	mov	r0, r5
   becf8:	f000 f82c 	bl	bed54 <_ZnajRKSt9nothrow_t>
    };
   becfc:	60e0      	str	r0, [r4, #12]
}
   becfe:	4620      	mov	r0, r4
   bed00:	bd38      	pop	{r3, r4, r5, pc}
   bed02:	bf00      	nop
   bed04:	000c1700 	.word	0x000c1700

000bed08 <_Z22__fetch_global_Serial1v>:
{
   bed08:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bed0a:	4d0e      	ldr	r5, [pc, #56]	; (bed44 <_Z22__fetch_global_Serial1v+0x3c>)
   bed0c:	7829      	ldrb	r1, [r5, #0]
   bed0e:	f3bf 8f5b 	dmb	ish
   bed12:	f011 0401 	ands.w	r4, r1, #1
{
   bed16:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bed18:	d111      	bne.n	bed3e <_Z22__fetch_global_Serial1v+0x36>
   bed1a:	4628      	mov	r0, r5
   bed1c:	f7f5 f9ce 	bl	b40bc <__cxa_guard_acquire>
   bed20:	b168      	cbz	r0, bed3e <_Z22__fetch_global_Serial1v+0x36>
   bed22:	a801      	add	r0, sp, #4
   bed24:	f7ff ffd6 	bl	becd4 <_Z20acquireSerial1Bufferv>
   bed28:	aa01      	add	r2, sp, #4
   bed2a:	4621      	mov	r1, r4
   bed2c:	4806      	ldr	r0, [pc, #24]	; (bed48 <_Z22__fetch_global_Serial1v+0x40>)
   bed2e:	f7ff fd6b 	bl	be808 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bed32:	4628      	mov	r0, r5
   bed34:	f7f5 f9c7 	bl	b40c6 <__cxa_guard_release>
   bed38:	4804      	ldr	r0, [pc, #16]	; (bed4c <_Z22__fetch_global_Serial1v+0x44>)
   bed3a:	f000 fcf1 	bl	bf720 <atexit>
    return serial1;
}
   bed3e:	4802      	ldr	r0, [pc, #8]	; (bed48 <_Z22__fetch_global_Serial1v+0x40>)
   bed40:	b007      	add	sp, #28
   bed42:	bd30      	pop	{r4, r5, pc}
   bed44:	2003e744 	.word	0x2003e744
   bed48:	2003e748 	.word	0x2003e748
   bed4c:	000becd1 	.word	0x000becd1

000bed50 <_ZnwjRKSt9nothrow_t>:
   bed50:	f7f5 b9a1 	b.w	b4096 <_Znwj>

000bed54 <_ZnajRKSt9nothrow_t>:
   bed54:	f7f5 b9a1 	b.w	b409a <_Znaj>

000bed58 <_ZSt17__throw_bad_allocv>:
   bed58:	b508      	push	{r3, lr}
   bed5a:	f7fc fe17 	bl	bb98c <abort>

000bed5e <_ZSt20__throw_length_errorPKc>:
   bed5e:	b508      	push	{r3, lr}
   bed60:	f7fc fe14 	bl	bb98c <abort>

000bed64 <_ZSt25__throw_bad_function_callv>:
   bed64:	b508      	push	{r3, lr}
   bed66:	f7fc fe11 	bl	bb98c <abort>
	...

000bed6c <__aeabi_drsub>:
   bed6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bed70:	e002      	b.n	bed78 <__adddf3>
   bed72:	bf00      	nop

000bed74 <__aeabi_dsub>:
   bed74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bed78 <__adddf3>:
   bed78:	b530      	push	{r4, r5, lr}
   bed7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bed7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bed82:	ea94 0f05 	teq	r4, r5
   bed86:	bf08      	it	eq
   bed88:	ea90 0f02 	teqeq	r0, r2
   bed8c:	bf1f      	itttt	ne
   bed8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   bed92:	ea55 0c02 	orrsne.w	ip, r5, r2
   bed96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bed9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bed9e:	f000 80e2 	beq.w	bef66 <__adddf3+0x1ee>
   beda2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   beda6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bedaa:	bfb8      	it	lt
   bedac:	426d      	neglt	r5, r5
   bedae:	dd0c      	ble.n	bedca <__adddf3+0x52>
   bedb0:	442c      	add	r4, r5
   bedb2:	ea80 0202 	eor.w	r2, r0, r2
   bedb6:	ea81 0303 	eor.w	r3, r1, r3
   bedba:	ea82 0000 	eor.w	r0, r2, r0
   bedbe:	ea83 0101 	eor.w	r1, r3, r1
   bedc2:	ea80 0202 	eor.w	r2, r0, r2
   bedc6:	ea81 0303 	eor.w	r3, r1, r3
   bedca:	2d36      	cmp	r5, #54	; 0x36
   bedcc:	bf88      	it	hi
   bedce:	bd30      	pophi	{r4, r5, pc}
   bedd0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bedd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bedd8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   beddc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bede0:	d002      	beq.n	bede8 <__adddf3+0x70>
   bede2:	4240      	negs	r0, r0
   bede4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bede8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bedec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bedf0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bedf4:	d002      	beq.n	bedfc <__adddf3+0x84>
   bedf6:	4252      	negs	r2, r2
   bedf8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bedfc:	ea94 0f05 	teq	r4, r5
   bee00:	f000 80a7 	beq.w	bef52 <__adddf3+0x1da>
   bee04:	f1a4 0401 	sub.w	r4, r4, #1
   bee08:	f1d5 0e20 	rsbs	lr, r5, #32
   bee0c:	db0d      	blt.n	bee2a <__adddf3+0xb2>
   bee0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   bee12:	fa22 f205 	lsr.w	r2, r2, r5
   bee16:	1880      	adds	r0, r0, r2
   bee18:	f141 0100 	adc.w	r1, r1, #0
   bee1c:	fa03 f20e 	lsl.w	r2, r3, lr
   bee20:	1880      	adds	r0, r0, r2
   bee22:	fa43 f305 	asr.w	r3, r3, r5
   bee26:	4159      	adcs	r1, r3
   bee28:	e00e      	b.n	bee48 <__adddf3+0xd0>
   bee2a:	f1a5 0520 	sub.w	r5, r5, #32
   bee2e:	f10e 0e20 	add.w	lr, lr, #32
   bee32:	2a01      	cmp	r2, #1
   bee34:	fa03 fc0e 	lsl.w	ip, r3, lr
   bee38:	bf28      	it	cs
   bee3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   bee3e:	fa43 f305 	asr.w	r3, r3, r5
   bee42:	18c0      	adds	r0, r0, r3
   bee44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bee48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bee4c:	d507      	bpl.n	bee5e <__adddf3+0xe6>
   bee4e:	f04f 0e00 	mov.w	lr, #0
   bee52:	f1dc 0c00 	rsbs	ip, ip, #0
   bee56:	eb7e 0000 	sbcs.w	r0, lr, r0
   bee5a:	eb6e 0101 	sbc.w	r1, lr, r1
   bee5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bee62:	d31b      	bcc.n	bee9c <__adddf3+0x124>
   bee64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bee68:	d30c      	bcc.n	bee84 <__adddf3+0x10c>
   bee6a:	0849      	lsrs	r1, r1, #1
   bee6c:	ea5f 0030 	movs.w	r0, r0, rrx
   bee70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bee74:	f104 0401 	add.w	r4, r4, #1
   bee78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bee7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bee80:	f080 809a 	bcs.w	befb8 <__adddf3+0x240>
   bee84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bee88:	bf08      	it	eq
   bee8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bee8e:	f150 0000 	adcs.w	r0, r0, #0
   bee92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bee96:	ea41 0105 	orr.w	r1, r1, r5
   bee9a:	bd30      	pop	{r4, r5, pc}
   bee9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   beea0:	4140      	adcs	r0, r0
   beea2:	eb41 0101 	adc.w	r1, r1, r1
   beea6:	3c01      	subs	r4, #1
   beea8:	bf28      	it	cs
   beeaa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   beeae:	d2e9      	bcs.n	bee84 <__adddf3+0x10c>
   beeb0:	f091 0f00 	teq	r1, #0
   beeb4:	bf04      	itt	eq
   beeb6:	4601      	moveq	r1, r0
   beeb8:	2000      	moveq	r0, #0
   beeba:	fab1 f381 	clz	r3, r1
   beebe:	bf08      	it	eq
   beec0:	3320      	addeq	r3, #32
   beec2:	f1a3 030b 	sub.w	r3, r3, #11
   beec6:	f1b3 0220 	subs.w	r2, r3, #32
   beeca:	da0c      	bge.n	beee6 <__adddf3+0x16e>
   beecc:	320c      	adds	r2, #12
   beece:	dd08      	ble.n	beee2 <__adddf3+0x16a>
   beed0:	f102 0c14 	add.w	ip, r2, #20
   beed4:	f1c2 020c 	rsb	r2, r2, #12
   beed8:	fa01 f00c 	lsl.w	r0, r1, ip
   beedc:	fa21 f102 	lsr.w	r1, r1, r2
   beee0:	e00c      	b.n	beefc <__adddf3+0x184>
   beee2:	f102 0214 	add.w	r2, r2, #20
   beee6:	bfd8      	it	le
   beee8:	f1c2 0c20 	rsble	ip, r2, #32
   beeec:	fa01 f102 	lsl.w	r1, r1, r2
   beef0:	fa20 fc0c 	lsr.w	ip, r0, ip
   beef4:	bfdc      	itt	le
   beef6:	ea41 010c 	orrle.w	r1, r1, ip
   beefa:	4090      	lslle	r0, r2
   beefc:	1ae4      	subs	r4, r4, r3
   beefe:	bfa2      	ittt	ge
   bef00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bef04:	4329      	orrge	r1, r5
   bef06:	bd30      	popge	{r4, r5, pc}
   bef08:	ea6f 0404 	mvn.w	r4, r4
   bef0c:	3c1f      	subs	r4, #31
   bef0e:	da1c      	bge.n	bef4a <__adddf3+0x1d2>
   bef10:	340c      	adds	r4, #12
   bef12:	dc0e      	bgt.n	bef32 <__adddf3+0x1ba>
   bef14:	f104 0414 	add.w	r4, r4, #20
   bef18:	f1c4 0220 	rsb	r2, r4, #32
   bef1c:	fa20 f004 	lsr.w	r0, r0, r4
   bef20:	fa01 f302 	lsl.w	r3, r1, r2
   bef24:	ea40 0003 	orr.w	r0, r0, r3
   bef28:	fa21 f304 	lsr.w	r3, r1, r4
   bef2c:	ea45 0103 	orr.w	r1, r5, r3
   bef30:	bd30      	pop	{r4, r5, pc}
   bef32:	f1c4 040c 	rsb	r4, r4, #12
   bef36:	f1c4 0220 	rsb	r2, r4, #32
   bef3a:	fa20 f002 	lsr.w	r0, r0, r2
   bef3e:	fa01 f304 	lsl.w	r3, r1, r4
   bef42:	ea40 0003 	orr.w	r0, r0, r3
   bef46:	4629      	mov	r1, r5
   bef48:	bd30      	pop	{r4, r5, pc}
   bef4a:	fa21 f004 	lsr.w	r0, r1, r4
   bef4e:	4629      	mov	r1, r5
   bef50:	bd30      	pop	{r4, r5, pc}
   bef52:	f094 0f00 	teq	r4, #0
   bef56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bef5a:	bf06      	itte	eq
   bef5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bef60:	3401      	addeq	r4, #1
   bef62:	3d01      	subne	r5, #1
   bef64:	e74e      	b.n	bee04 <__adddf3+0x8c>
   bef66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bef6a:	bf18      	it	ne
   bef6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bef70:	d029      	beq.n	befc6 <__adddf3+0x24e>
   bef72:	ea94 0f05 	teq	r4, r5
   bef76:	bf08      	it	eq
   bef78:	ea90 0f02 	teqeq	r0, r2
   bef7c:	d005      	beq.n	bef8a <__adddf3+0x212>
   bef7e:	ea54 0c00 	orrs.w	ip, r4, r0
   bef82:	bf04      	itt	eq
   bef84:	4619      	moveq	r1, r3
   bef86:	4610      	moveq	r0, r2
   bef88:	bd30      	pop	{r4, r5, pc}
   bef8a:	ea91 0f03 	teq	r1, r3
   bef8e:	bf1e      	ittt	ne
   bef90:	2100      	movne	r1, #0
   bef92:	2000      	movne	r0, #0
   bef94:	bd30      	popne	{r4, r5, pc}
   bef96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bef9a:	d105      	bne.n	befa8 <__adddf3+0x230>
   bef9c:	0040      	lsls	r0, r0, #1
   bef9e:	4149      	adcs	r1, r1
   befa0:	bf28      	it	cs
   befa2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   befa6:	bd30      	pop	{r4, r5, pc}
   befa8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   befac:	bf3c      	itt	cc
   befae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   befb2:	bd30      	popcc	{r4, r5, pc}
   befb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   befb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   befbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   befc0:	f04f 0000 	mov.w	r0, #0
   befc4:	bd30      	pop	{r4, r5, pc}
   befc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   befca:	bf1a      	itte	ne
   befcc:	4619      	movne	r1, r3
   befce:	4610      	movne	r0, r2
   befd0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   befd4:	bf1c      	itt	ne
   befd6:	460b      	movne	r3, r1
   befd8:	4602      	movne	r2, r0
   befda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   befde:	bf06      	itte	eq
   befe0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   befe4:	ea91 0f03 	teqeq	r1, r3
   befe8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   befec:	bd30      	pop	{r4, r5, pc}
   befee:	bf00      	nop

000beff0 <__aeabi_ui2d>:
   beff0:	f090 0f00 	teq	r0, #0
   beff4:	bf04      	itt	eq
   beff6:	2100      	moveq	r1, #0
   beff8:	4770      	bxeq	lr
   beffa:	b530      	push	{r4, r5, lr}
   beffc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bf000:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bf004:	f04f 0500 	mov.w	r5, #0
   bf008:	f04f 0100 	mov.w	r1, #0
   bf00c:	e750      	b.n	beeb0 <__adddf3+0x138>
   bf00e:	bf00      	nop

000bf010 <__aeabi_i2d>:
   bf010:	f090 0f00 	teq	r0, #0
   bf014:	bf04      	itt	eq
   bf016:	2100      	moveq	r1, #0
   bf018:	4770      	bxeq	lr
   bf01a:	b530      	push	{r4, r5, lr}
   bf01c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bf020:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bf024:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bf028:	bf48      	it	mi
   bf02a:	4240      	negmi	r0, r0
   bf02c:	f04f 0100 	mov.w	r1, #0
   bf030:	e73e      	b.n	beeb0 <__adddf3+0x138>
   bf032:	bf00      	nop

000bf034 <__aeabi_f2d>:
   bf034:	0042      	lsls	r2, r0, #1
   bf036:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bf03a:	ea4f 0131 	mov.w	r1, r1, rrx
   bf03e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bf042:	bf1f      	itttt	ne
   bf044:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bf048:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bf04c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bf050:	4770      	bxne	lr
   bf052:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bf056:	bf08      	it	eq
   bf058:	4770      	bxeq	lr
   bf05a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bf05e:	bf04      	itt	eq
   bf060:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bf064:	4770      	bxeq	lr
   bf066:	b530      	push	{r4, r5, lr}
   bf068:	f44f 7460 	mov.w	r4, #896	; 0x380
   bf06c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bf070:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bf074:	e71c      	b.n	beeb0 <__adddf3+0x138>
   bf076:	bf00      	nop

000bf078 <__aeabi_ul2d>:
   bf078:	ea50 0201 	orrs.w	r2, r0, r1
   bf07c:	bf08      	it	eq
   bf07e:	4770      	bxeq	lr
   bf080:	b530      	push	{r4, r5, lr}
   bf082:	f04f 0500 	mov.w	r5, #0
   bf086:	e00a      	b.n	bf09e <__aeabi_l2d+0x16>

000bf088 <__aeabi_l2d>:
   bf088:	ea50 0201 	orrs.w	r2, r0, r1
   bf08c:	bf08      	it	eq
   bf08e:	4770      	bxeq	lr
   bf090:	b530      	push	{r4, r5, lr}
   bf092:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bf096:	d502      	bpl.n	bf09e <__aeabi_l2d+0x16>
   bf098:	4240      	negs	r0, r0
   bf09a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bf09e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bf0a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bf0a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bf0aa:	f43f aed8 	beq.w	bee5e <__adddf3+0xe6>
   bf0ae:	f04f 0203 	mov.w	r2, #3
   bf0b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bf0b6:	bf18      	it	ne
   bf0b8:	3203      	addne	r2, #3
   bf0ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bf0be:	bf18      	it	ne
   bf0c0:	3203      	addne	r2, #3
   bf0c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bf0c6:	f1c2 0320 	rsb	r3, r2, #32
   bf0ca:	fa00 fc03 	lsl.w	ip, r0, r3
   bf0ce:	fa20 f002 	lsr.w	r0, r0, r2
   bf0d2:	fa01 fe03 	lsl.w	lr, r1, r3
   bf0d6:	ea40 000e 	orr.w	r0, r0, lr
   bf0da:	fa21 f102 	lsr.w	r1, r1, r2
   bf0de:	4414      	add	r4, r2
   bf0e0:	e6bd      	b.n	bee5e <__adddf3+0xe6>
   bf0e2:	bf00      	nop

000bf0e4 <__aeabi_dmul>:
   bf0e4:	b570      	push	{r4, r5, r6, lr}
   bf0e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bf0ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bf0ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bf0f2:	bf1d      	ittte	ne
   bf0f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bf0f8:	ea94 0f0c 	teqne	r4, ip
   bf0fc:	ea95 0f0c 	teqne	r5, ip
   bf100:	f000 f8de 	bleq	bf2c0 <__aeabi_dmul+0x1dc>
   bf104:	442c      	add	r4, r5
   bf106:	ea81 0603 	eor.w	r6, r1, r3
   bf10a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bf10e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bf112:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bf116:	bf18      	it	ne
   bf118:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bf11c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bf120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bf124:	d038      	beq.n	bf198 <__aeabi_dmul+0xb4>
   bf126:	fba0 ce02 	umull	ip, lr, r0, r2
   bf12a:	f04f 0500 	mov.w	r5, #0
   bf12e:	fbe1 e502 	umlal	lr, r5, r1, r2
   bf132:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bf136:	fbe0 e503 	umlal	lr, r5, r0, r3
   bf13a:	f04f 0600 	mov.w	r6, #0
   bf13e:	fbe1 5603 	umlal	r5, r6, r1, r3
   bf142:	f09c 0f00 	teq	ip, #0
   bf146:	bf18      	it	ne
   bf148:	f04e 0e01 	orrne.w	lr, lr, #1
   bf14c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bf150:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bf154:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bf158:	d204      	bcs.n	bf164 <__aeabi_dmul+0x80>
   bf15a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bf15e:	416d      	adcs	r5, r5
   bf160:	eb46 0606 	adc.w	r6, r6, r6
   bf164:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bf168:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bf16c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bf170:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bf174:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bf178:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bf17c:	bf88      	it	hi
   bf17e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bf182:	d81e      	bhi.n	bf1c2 <__aeabi_dmul+0xde>
   bf184:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bf188:	bf08      	it	eq
   bf18a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bf18e:	f150 0000 	adcs.w	r0, r0, #0
   bf192:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bf196:	bd70      	pop	{r4, r5, r6, pc}
   bf198:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bf19c:	ea46 0101 	orr.w	r1, r6, r1
   bf1a0:	ea40 0002 	orr.w	r0, r0, r2
   bf1a4:	ea81 0103 	eor.w	r1, r1, r3
   bf1a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bf1ac:	bfc2      	ittt	gt
   bf1ae:	ebd4 050c 	rsbsgt	r5, r4, ip
   bf1b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bf1b6:	bd70      	popgt	{r4, r5, r6, pc}
   bf1b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bf1bc:	f04f 0e00 	mov.w	lr, #0
   bf1c0:	3c01      	subs	r4, #1
   bf1c2:	f300 80ab 	bgt.w	bf31c <__aeabi_dmul+0x238>
   bf1c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bf1ca:	bfde      	ittt	le
   bf1cc:	2000      	movle	r0, #0
   bf1ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bf1d2:	bd70      	pople	{r4, r5, r6, pc}
   bf1d4:	f1c4 0400 	rsb	r4, r4, #0
   bf1d8:	3c20      	subs	r4, #32
   bf1da:	da35      	bge.n	bf248 <__aeabi_dmul+0x164>
   bf1dc:	340c      	adds	r4, #12
   bf1de:	dc1b      	bgt.n	bf218 <__aeabi_dmul+0x134>
   bf1e0:	f104 0414 	add.w	r4, r4, #20
   bf1e4:	f1c4 0520 	rsb	r5, r4, #32
   bf1e8:	fa00 f305 	lsl.w	r3, r0, r5
   bf1ec:	fa20 f004 	lsr.w	r0, r0, r4
   bf1f0:	fa01 f205 	lsl.w	r2, r1, r5
   bf1f4:	ea40 0002 	orr.w	r0, r0, r2
   bf1f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bf1fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bf200:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bf204:	fa21 f604 	lsr.w	r6, r1, r4
   bf208:	eb42 0106 	adc.w	r1, r2, r6
   bf20c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bf210:	bf08      	it	eq
   bf212:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bf216:	bd70      	pop	{r4, r5, r6, pc}
   bf218:	f1c4 040c 	rsb	r4, r4, #12
   bf21c:	f1c4 0520 	rsb	r5, r4, #32
   bf220:	fa00 f304 	lsl.w	r3, r0, r4
   bf224:	fa20 f005 	lsr.w	r0, r0, r5
   bf228:	fa01 f204 	lsl.w	r2, r1, r4
   bf22c:	ea40 0002 	orr.w	r0, r0, r2
   bf230:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bf234:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bf238:	f141 0100 	adc.w	r1, r1, #0
   bf23c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bf240:	bf08      	it	eq
   bf242:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bf246:	bd70      	pop	{r4, r5, r6, pc}
   bf248:	f1c4 0520 	rsb	r5, r4, #32
   bf24c:	fa00 f205 	lsl.w	r2, r0, r5
   bf250:	ea4e 0e02 	orr.w	lr, lr, r2
   bf254:	fa20 f304 	lsr.w	r3, r0, r4
   bf258:	fa01 f205 	lsl.w	r2, r1, r5
   bf25c:	ea43 0302 	orr.w	r3, r3, r2
   bf260:	fa21 f004 	lsr.w	r0, r1, r4
   bf264:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bf268:	fa21 f204 	lsr.w	r2, r1, r4
   bf26c:	ea20 0002 	bic.w	r0, r0, r2
   bf270:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bf274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bf278:	bf08      	it	eq
   bf27a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bf27e:	bd70      	pop	{r4, r5, r6, pc}
   bf280:	f094 0f00 	teq	r4, #0
   bf284:	d10f      	bne.n	bf2a6 <__aeabi_dmul+0x1c2>
   bf286:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bf28a:	0040      	lsls	r0, r0, #1
   bf28c:	eb41 0101 	adc.w	r1, r1, r1
   bf290:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bf294:	bf08      	it	eq
   bf296:	3c01      	subeq	r4, #1
   bf298:	d0f7      	beq.n	bf28a <__aeabi_dmul+0x1a6>
   bf29a:	ea41 0106 	orr.w	r1, r1, r6
   bf29e:	f095 0f00 	teq	r5, #0
   bf2a2:	bf18      	it	ne
   bf2a4:	4770      	bxne	lr
   bf2a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bf2aa:	0052      	lsls	r2, r2, #1
   bf2ac:	eb43 0303 	adc.w	r3, r3, r3
   bf2b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bf2b4:	bf08      	it	eq
   bf2b6:	3d01      	subeq	r5, #1
   bf2b8:	d0f7      	beq.n	bf2aa <__aeabi_dmul+0x1c6>
   bf2ba:	ea43 0306 	orr.w	r3, r3, r6
   bf2be:	4770      	bx	lr
   bf2c0:	ea94 0f0c 	teq	r4, ip
   bf2c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bf2c8:	bf18      	it	ne
   bf2ca:	ea95 0f0c 	teqne	r5, ip
   bf2ce:	d00c      	beq.n	bf2ea <__aeabi_dmul+0x206>
   bf2d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bf2d4:	bf18      	it	ne
   bf2d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bf2da:	d1d1      	bne.n	bf280 <__aeabi_dmul+0x19c>
   bf2dc:	ea81 0103 	eor.w	r1, r1, r3
   bf2e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bf2e4:	f04f 0000 	mov.w	r0, #0
   bf2e8:	bd70      	pop	{r4, r5, r6, pc}
   bf2ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bf2ee:	bf06      	itte	eq
   bf2f0:	4610      	moveq	r0, r2
   bf2f2:	4619      	moveq	r1, r3
   bf2f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bf2f8:	d019      	beq.n	bf32e <__aeabi_dmul+0x24a>
   bf2fa:	ea94 0f0c 	teq	r4, ip
   bf2fe:	d102      	bne.n	bf306 <__aeabi_dmul+0x222>
   bf300:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bf304:	d113      	bne.n	bf32e <__aeabi_dmul+0x24a>
   bf306:	ea95 0f0c 	teq	r5, ip
   bf30a:	d105      	bne.n	bf318 <__aeabi_dmul+0x234>
   bf30c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bf310:	bf1c      	itt	ne
   bf312:	4610      	movne	r0, r2
   bf314:	4619      	movne	r1, r3
   bf316:	d10a      	bne.n	bf32e <__aeabi_dmul+0x24a>
   bf318:	ea81 0103 	eor.w	r1, r1, r3
   bf31c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bf320:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bf324:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bf328:	f04f 0000 	mov.w	r0, #0
   bf32c:	bd70      	pop	{r4, r5, r6, pc}
   bf32e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bf332:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bf336:	bd70      	pop	{r4, r5, r6, pc}

000bf338 <__aeabi_ddiv>:
   bf338:	b570      	push	{r4, r5, r6, lr}
   bf33a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bf33e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bf342:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bf346:	bf1d      	ittte	ne
   bf348:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bf34c:	ea94 0f0c 	teqne	r4, ip
   bf350:	ea95 0f0c 	teqne	r5, ip
   bf354:	f000 f8a7 	bleq	bf4a6 <__aeabi_ddiv+0x16e>
   bf358:	eba4 0405 	sub.w	r4, r4, r5
   bf35c:	ea81 0e03 	eor.w	lr, r1, r3
   bf360:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bf364:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bf368:	f000 8088 	beq.w	bf47c <__aeabi_ddiv+0x144>
   bf36c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bf370:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bf374:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bf378:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bf37c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bf380:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bf384:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bf388:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bf38c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bf390:	429d      	cmp	r5, r3
   bf392:	bf08      	it	eq
   bf394:	4296      	cmpeq	r6, r2
   bf396:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bf39a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bf39e:	d202      	bcs.n	bf3a6 <__aeabi_ddiv+0x6e>
   bf3a0:	085b      	lsrs	r3, r3, #1
   bf3a2:	ea4f 0232 	mov.w	r2, r2, rrx
   bf3a6:	1ab6      	subs	r6, r6, r2
   bf3a8:	eb65 0503 	sbc.w	r5, r5, r3
   bf3ac:	085b      	lsrs	r3, r3, #1
   bf3ae:	ea4f 0232 	mov.w	r2, r2, rrx
   bf3b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bf3b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bf3ba:	ebb6 0e02 	subs.w	lr, r6, r2
   bf3be:	eb75 0e03 	sbcs.w	lr, r5, r3
   bf3c2:	bf22      	ittt	cs
   bf3c4:	1ab6      	subcs	r6, r6, r2
   bf3c6:	4675      	movcs	r5, lr
   bf3c8:	ea40 000c 	orrcs.w	r0, r0, ip
   bf3cc:	085b      	lsrs	r3, r3, #1
   bf3ce:	ea4f 0232 	mov.w	r2, r2, rrx
   bf3d2:	ebb6 0e02 	subs.w	lr, r6, r2
   bf3d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bf3da:	bf22      	ittt	cs
   bf3dc:	1ab6      	subcs	r6, r6, r2
   bf3de:	4675      	movcs	r5, lr
   bf3e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bf3e4:	085b      	lsrs	r3, r3, #1
   bf3e6:	ea4f 0232 	mov.w	r2, r2, rrx
   bf3ea:	ebb6 0e02 	subs.w	lr, r6, r2
   bf3ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   bf3f2:	bf22      	ittt	cs
   bf3f4:	1ab6      	subcs	r6, r6, r2
   bf3f6:	4675      	movcs	r5, lr
   bf3f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bf3fc:	085b      	lsrs	r3, r3, #1
   bf3fe:	ea4f 0232 	mov.w	r2, r2, rrx
   bf402:	ebb6 0e02 	subs.w	lr, r6, r2
   bf406:	eb75 0e03 	sbcs.w	lr, r5, r3
   bf40a:	bf22      	ittt	cs
   bf40c:	1ab6      	subcs	r6, r6, r2
   bf40e:	4675      	movcs	r5, lr
   bf410:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bf414:	ea55 0e06 	orrs.w	lr, r5, r6
   bf418:	d018      	beq.n	bf44c <__aeabi_ddiv+0x114>
   bf41a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bf41e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bf422:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bf426:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bf42a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bf42e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bf432:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bf436:	d1c0      	bne.n	bf3ba <__aeabi_ddiv+0x82>
   bf438:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bf43c:	d10b      	bne.n	bf456 <__aeabi_ddiv+0x11e>
   bf43e:	ea41 0100 	orr.w	r1, r1, r0
   bf442:	f04f 0000 	mov.w	r0, #0
   bf446:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bf44a:	e7b6      	b.n	bf3ba <__aeabi_ddiv+0x82>
   bf44c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bf450:	bf04      	itt	eq
   bf452:	4301      	orreq	r1, r0
   bf454:	2000      	moveq	r0, #0
   bf456:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bf45a:	bf88      	it	hi
   bf45c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bf460:	f63f aeaf 	bhi.w	bf1c2 <__aeabi_dmul+0xde>
   bf464:	ebb5 0c03 	subs.w	ip, r5, r3
   bf468:	bf04      	itt	eq
   bf46a:	ebb6 0c02 	subseq.w	ip, r6, r2
   bf46e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bf472:	f150 0000 	adcs.w	r0, r0, #0
   bf476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bf47a:	bd70      	pop	{r4, r5, r6, pc}
   bf47c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bf480:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bf484:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bf488:	bfc2      	ittt	gt
   bf48a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bf48e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bf492:	bd70      	popgt	{r4, r5, r6, pc}
   bf494:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bf498:	f04f 0e00 	mov.w	lr, #0
   bf49c:	3c01      	subs	r4, #1
   bf49e:	e690      	b.n	bf1c2 <__aeabi_dmul+0xde>
   bf4a0:	ea45 0e06 	orr.w	lr, r5, r6
   bf4a4:	e68d      	b.n	bf1c2 <__aeabi_dmul+0xde>
   bf4a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bf4aa:	ea94 0f0c 	teq	r4, ip
   bf4ae:	bf08      	it	eq
   bf4b0:	ea95 0f0c 	teqeq	r5, ip
   bf4b4:	f43f af3b 	beq.w	bf32e <__aeabi_dmul+0x24a>
   bf4b8:	ea94 0f0c 	teq	r4, ip
   bf4bc:	d10a      	bne.n	bf4d4 <__aeabi_ddiv+0x19c>
   bf4be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bf4c2:	f47f af34 	bne.w	bf32e <__aeabi_dmul+0x24a>
   bf4c6:	ea95 0f0c 	teq	r5, ip
   bf4ca:	f47f af25 	bne.w	bf318 <__aeabi_dmul+0x234>
   bf4ce:	4610      	mov	r0, r2
   bf4d0:	4619      	mov	r1, r3
   bf4d2:	e72c      	b.n	bf32e <__aeabi_dmul+0x24a>
   bf4d4:	ea95 0f0c 	teq	r5, ip
   bf4d8:	d106      	bne.n	bf4e8 <__aeabi_ddiv+0x1b0>
   bf4da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bf4de:	f43f aefd 	beq.w	bf2dc <__aeabi_dmul+0x1f8>
   bf4e2:	4610      	mov	r0, r2
   bf4e4:	4619      	mov	r1, r3
   bf4e6:	e722      	b.n	bf32e <__aeabi_dmul+0x24a>
   bf4e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bf4ec:	bf18      	it	ne
   bf4ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bf4f2:	f47f aec5 	bne.w	bf280 <__aeabi_dmul+0x19c>
   bf4f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bf4fa:	f47f af0d 	bne.w	bf318 <__aeabi_dmul+0x234>
   bf4fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bf502:	f47f aeeb 	bne.w	bf2dc <__aeabi_dmul+0x1f8>
   bf506:	e712      	b.n	bf32e <__aeabi_dmul+0x24a>

000bf508 <__gedf2>:
   bf508:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf50c:	e006      	b.n	bf51c <__cmpdf2+0x4>
   bf50e:	bf00      	nop

000bf510 <__ledf2>:
   bf510:	f04f 0c01 	mov.w	ip, #1
   bf514:	e002      	b.n	bf51c <__cmpdf2+0x4>
   bf516:	bf00      	nop

000bf518 <__cmpdf2>:
   bf518:	f04f 0c01 	mov.w	ip, #1
   bf51c:	f84d cd04 	str.w	ip, [sp, #-4]!
   bf520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf52c:	bf18      	it	ne
   bf52e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bf532:	d01b      	beq.n	bf56c <__cmpdf2+0x54>
   bf534:	b001      	add	sp, #4
   bf536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bf53a:	bf0c      	ite	eq
   bf53c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bf540:	ea91 0f03 	teqne	r1, r3
   bf544:	bf02      	ittt	eq
   bf546:	ea90 0f02 	teqeq	r0, r2
   bf54a:	2000      	moveq	r0, #0
   bf54c:	4770      	bxeq	lr
   bf54e:	f110 0f00 	cmn.w	r0, #0
   bf552:	ea91 0f03 	teq	r1, r3
   bf556:	bf58      	it	pl
   bf558:	4299      	cmppl	r1, r3
   bf55a:	bf08      	it	eq
   bf55c:	4290      	cmpeq	r0, r2
   bf55e:	bf2c      	ite	cs
   bf560:	17d8      	asrcs	r0, r3, #31
   bf562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bf566:	f040 0001 	orr.w	r0, r0, #1
   bf56a:	4770      	bx	lr
   bf56c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf574:	d102      	bne.n	bf57c <__cmpdf2+0x64>
   bf576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bf57a:	d107      	bne.n	bf58c <__cmpdf2+0x74>
   bf57c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf584:	d1d6      	bne.n	bf534 <__cmpdf2+0x1c>
   bf586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bf58a:	d0d3      	beq.n	bf534 <__cmpdf2+0x1c>
   bf58c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bf590:	4770      	bx	lr
   bf592:	bf00      	nop

000bf594 <__aeabi_cdrcmple>:
   bf594:	4684      	mov	ip, r0
   bf596:	4610      	mov	r0, r2
   bf598:	4662      	mov	r2, ip
   bf59a:	468c      	mov	ip, r1
   bf59c:	4619      	mov	r1, r3
   bf59e:	4663      	mov	r3, ip
   bf5a0:	e000      	b.n	bf5a4 <__aeabi_cdcmpeq>
   bf5a2:	bf00      	nop

000bf5a4 <__aeabi_cdcmpeq>:
   bf5a4:	b501      	push	{r0, lr}
   bf5a6:	f7ff ffb7 	bl	bf518 <__cmpdf2>
   bf5aa:	2800      	cmp	r0, #0
   bf5ac:	bf48      	it	mi
   bf5ae:	f110 0f00 	cmnmi.w	r0, #0
   bf5b2:	bd01      	pop	{r0, pc}

000bf5b4 <__aeabi_dcmpeq>:
   bf5b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf5b8:	f7ff fff4 	bl	bf5a4 <__aeabi_cdcmpeq>
   bf5bc:	bf0c      	ite	eq
   bf5be:	2001      	moveq	r0, #1
   bf5c0:	2000      	movne	r0, #0
   bf5c2:	f85d fb08 	ldr.w	pc, [sp], #8
   bf5c6:	bf00      	nop

000bf5c8 <__aeabi_dcmplt>:
   bf5c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf5cc:	f7ff ffea 	bl	bf5a4 <__aeabi_cdcmpeq>
   bf5d0:	bf34      	ite	cc
   bf5d2:	2001      	movcc	r0, #1
   bf5d4:	2000      	movcs	r0, #0
   bf5d6:	f85d fb08 	ldr.w	pc, [sp], #8
   bf5da:	bf00      	nop

000bf5dc <__aeabi_dcmple>:
   bf5dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf5e0:	f7ff ffe0 	bl	bf5a4 <__aeabi_cdcmpeq>
   bf5e4:	bf94      	ite	ls
   bf5e6:	2001      	movls	r0, #1
   bf5e8:	2000      	movhi	r0, #0
   bf5ea:	f85d fb08 	ldr.w	pc, [sp], #8
   bf5ee:	bf00      	nop

000bf5f0 <__aeabi_dcmpge>:
   bf5f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf5f4:	f7ff ffce 	bl	bf594 <__aeabi_cdrcmple>
   bf5f8:	bf94      	ite	ls
   bf5fa:	2001      	movls	r0, #1
   bf5fc:	2000      	movhi	r0, #0
   bf5fe:	f85d fb08 	ldr.w	pc, [sp], #8
   bf602:	bf00      	nop

000bf604 <__aeabi_dcmpgt>:
   bf604:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf608:	f7ff ffc4 	bl	bf594 <__aeabi_cdrcmple>
   bf60c:	bf34      	ite	cc
   bf60e:	2001      	movcc	r0, #1
   bf610:	2000      	movcs	r0, #0
   bf612:	f85d fb08 	ldr.w	pc, [sp], #8
   bf616:	bf00      	nop

000bf618 <__aeabi_dcmpun>:
   bf618:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf61c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf620:	d102      	bne.n	bf628 <__aeabi_dcmpun+0x10>
   bf622:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bf626:	d10a      	bne.n	bf63e <__aeabi_dcmpun+0x26>
   bf628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf62c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf630:	d102      	bne.n	bf638 <__aeabi_dcmpun+0x20>
   bf632:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bf636:	d102      	bne.n	bf63e <__aeabi_dcmpun+0x26>
   bf638:	f04f 0000 	mov.w	r0, #0
   bf63c:	4770      	bx	lr
   bf63e:	f04f 0001 	mov.w	r0, #1
   bf642:	4770      	bx	lr

000bf644 <__aeabi_d2iz>:
   bf644:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bf648:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bf64c:	d215      	bcs.n	bf67a <__aeabi_d2iz+0x36>
   bf64e:	d511      	bpl.n	bf674 <__aeabi_d2iz+0x30>
   bf650:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bf654:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bf658:	d912      	bls.n	bf680 <__aeabi_d2iz+0x3c>
   bf65a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bf65e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bf662:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bf666:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bf66a:	fa23 f002 	lsr.w	r0, r3, r2
   bf66e:	bf18      	it	ne
   bf670:	4240      	negne	r0, r0
   bf672:	4770      	bx	lr
   bf674:	f04f 0000 	mov.w	r0, #0
   bf678:	4770      	bx	lr
   bf67a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bf67e:	d105      	bne.n	bf68c <__aeabi_d2iz+0x48>
   bf680:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bf684:	bf08      	it	eq
   bf686:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bf68a:	4770      	bx	lr
   bf68c:	f04f 0000 	mov.w	r0, #0
   bf690:	4770      	bx	lr
   bf692:	bf00      	nop

000bf694 <__aeabi_d2uiz>:
   bf694:	004a      	lsls	r2, r1, #1
   bf696:	d211      	bcs.n	bf6bc <__aeabi_d2uiz+0x28>
   bf698:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bf69c:	d211      	bcs.n	bf6c2 <__aeabi_d2uiz+0x2e>
   bf69e:	d50d      	bpl.n	bf6bc <__aeabi_d2uiz+0x28>
   bf6a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bf6a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bf6a8:	d40e      	bmi.n	bf6c8 <__aeabi_d2uiz+0x34>
   bf6aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bf6ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bf6b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bf6b6:	fa23 f002 	lsr.w	r0, r3, r2
   bf6ba:	4770      	bx	lr
   bf6bc:	f04f 0000 	mov.w	r0, #0
   bf6c0:	4770      	bx	lr
   bf6c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bf6c6:	d102      	bne.n	bf6ce <__aeabi_d2uiz+0x3a>
   bf6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf6cc:	4770      	bx	lr
   bf6ce:	f04f 0000 	mov.w	r0, #0
   bf6d2:	4770      	bx	lr

000bf6d4 <asctime_r>:
   bf6d4:	b510      	push	{r4, lr}
   bf6d6:	460c      	mov	r4, r1
   bf6d8:	6941      	ldr	r1, [r0, #20]
   bf6da:	6903      	ldr	r3, [r0, #16]
   bf6dc:	6982      	ldr	r2, [r0, #24]
   bf6de:	b086      	sub	sp, #24
   bf6e0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bf6e4:	9104      	str	r1, [sp, #16]
   bf6e6:	6801      	ldr	r1, [r0, #0]
   bf6e8:	9103      	str	r1, [sp, #12]
   bf6ea:	6841      	ldr	r1, [r0, #4]
   bf6ec:	9102      	str	r1, [sp, #8]
   bf6ee:	6881      	ldr	r1, [r0, #8]
   bf6f0:	9101      	str	r1, [sp, #4]
   bf6f2:	68c1      	ldr	r1, [r0, #12]
   bf6f4:	9100      	str	r1, [sp, #0]
   bf6f6:	4907      	ldr	r1, [pc, #28]	; (bf714 <asctime_r+0x40>)
   bf6f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bf6fc:	440b      	add	r3, r1
   bf6fe:	4906      	ldr	r1, [pc, #24]	; (bf718 <asctime_r+0x44>)
   bf700:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bf704:	440a      	add	r2, r1
   bf706:	4620      	mov	r0, r4
   bf708:	4904      	ldr	r1, [pc, #16]	; (bf71c <asctime_r+0x48>)
   bf70a:	f7fc f91f 	bl	bb94c <siprintf>
   bf70e:	4620      	mov	r0, r4
   bf710:	b006      	add	sp, #24
   bf712:	bd10      	pop	{r4, pc}
   bf714:	000c1736 	.word	0x000c1736
   bf718:	000c1721 	.word	0x000c1721
   bf71c:	000c1701 	.word	0x000c1701

000bf720 <atexit>:
   bf720:	2300      	movs	r3, #0
   bf722:	4601      	mov	r1, r0
   bf724:	461a      	mov	r2, r3
   bf726:	4618      	mov	r0, r3
   bf728:	f000 ba70 	b.w	bfc0c <__register_exitproc>

000bf72c <gmtime>:
   bf72c:	b538      	push	{r3, r4, r5, lr}
   bf72e:	4b0b      	ldr	r3, [pc, #44]	; (bf75c <gmtime+0x30>)
   bf730:	681d      	ldr	r5, [r3, #0]
   bf732:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bf734:	4604      	mov	r4, r0
   bf736:	b953      	cbnz	r3, bf74e <gmtime+0x22>
   bf738:	2024      	movs	r0, #36	; 0x24
   bf73a:	f7fc f8ef 	bl	bb91c <malloc>
   bf73e:	4602      	mov	r2, r0
   bf740:	63e8      	str	r0, [r5, #60]	; 0x3c
   bf742:	b920      	cbnz	r0, bf74e <gmtime+0x22>
   bf744:	4b06      	ldr	r3, [pc, #24]	; (bf760 <gmtime+0x34>)
   bf746:	4807      	ldr	r0, [pc, #28]	; (bf764 <gmtime+0x38>)
   bf748:	2139      	movs	r1, #57	; 0x39
   bf74a:	f7fc f937 	bl	bb9bc <__assert_func>
   bf74e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bf750:	4620      	mov	r0, r4
   bf752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf756:	f7fc b951 	b.w	bb9fc <gmtime_r>
   bf75a:	bf00      	nop
   bf75c:	2003debc 	.word	0x2003debc
   bf760:	000c175a 	.word	0x000c175a
   bf764:	000c1771 	.word	0x000c1771

000bf768 <isprint>:
   bf768:	4b02      	ldr	r3, [pc, #8]	; (bf774 <isprint+0xc>)
   bf76a:	4418      	add	r0, r3
   bf76c:	7840      	ldrb	r0, [r0, #1]
   bf76e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bf772:	4770      	bx	lr
   bf774:	000c1823 	.word	0x000c1823

000bf778 <memcpy>:
   bf778:	440a      	add	r2, r1
   bf77a:	4291      	cmp	r1, r2
   bf77c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bf780:	d100      	bne.n	bf784 <memcpy+0xc>
   bf782:	4770      	bx	lr
   bf784:	b510      	push	{r4, lr}
   bf786:	f811 4b01 	ldrb.w	r4, [r1], #1
   bf78a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bf78e:	4291      	cmp	r1, r2
   bf790:	d1f9      	bne.n	bf786 <memcpy+0xe>
   bf792:	bd10      	pop	{r4, pc}

000bf794 <memmove>:
   bf794:	4288      	cmp	r0, r1
   bf796:	b510      	push	{r4, lr}
   bf798:	eb01 0402 	add.w	r4, r1, r2
   bf79c:	d902      	bls.n	bf7a4 <memmove+0x10>
   bf79e:	4284      	cmp	r4, r0
   bf7a0:	4623      	mov	r3, r4
   bf7a2:	d807      	bhi.n	bf7b4 <memmove+0x20>
   bf7a4:	1e43      	subs	r3, r0, #1
   bf7a6:	42a1      	cmp	r1, r4
   bf7a8:	d008      	beq.n	bf7bc <memmove+0x28>
   bf7aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf7ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   bf7b2:	e7f8      	b.n	bf7a6 <memmove+0x12>
   bf7b4:	4402      	add	r2, r0
   bf7b6:	4601      	mov	r1, r0
   bf7b8:	428a      	cmp	r2, r1
   bf7ba:	d100      	bne.n	bf7be <memmove+0x2a>
   bf7bc:	bd10      	pop	{r4, pc}
   bf7be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bf7c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bf7c6:	e7f7      	b.n	bf7b8 <memmove+0x24>

000bf7c8 <memset>:
   bf7c8:	4402      	add	r2, r0
   bf7ca:	4603      	mov	r3, r0
   bf7cc:	4293      	cmp	r3, r2
   bf7ce:	d100      	bne.n	bf7d2 <memset+0xa>
   bf7d0:	4770      	bx	lr
   bf7d2:	f803 1b01 	strb.w	r1, [r3], #1
   bf7d6:	e7f9      	b.n	bf7cc <memset+0x4>

000bf7d8 <srand>:
   bf7d8:	b538      	push	{r3, r4, r5, lr}
   bf7da:	4b10      	ldr	r3, [pc, #64]	; (bf81c <srand+0x44>)
   bf7dc:	681d      	ldr	r5, [r3, #0]
   bf7de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bf7e0:	4604      	mov	r4, r0
   bf7e2:	b9b3      	cbnz	r3, bf812 <srand+0x3a>
   bf7e4:	2018      	movs	r0, #24
   bf7e6:	f7fc f899 	bl	bb91c <malloc>
   bf7ea:	4602      	mov	r2, r0
   bf7ec:	63a8      	str	r0, [r5, #56]	; 0x38
   bf7ee:	b920      	cbnz	r0, bf7fa <srand+0x22>
   bf7f0:	4b0b      	ldr	r3, [pc, #44]	; (bf820 <srand+0x48>)
   bf7f2:	480c      	ldr	r0, [pc, #48]	; (bf824 <srand+0x4c>)
   bf7f4:	2142      	movs	r1, #66	; 0x42
   bf7f6:	f7fc f8e1 	bl	bb9bc <__assert_func>
   bf7fa:	490b      	ldr	r1, [pc, #44]	; (bf828 <srand+0x50>)
   bf7fc:	4b0b      	ldr	r3, [pc, #44]	; (bf82c <srand+0x54>)
   bf7fe:	e9c0 1300 	strd	r1, r3, [r0]
   bf802:	4b0b      	ldr	r3, [pc, #44]	; (bf830 <srand+0x58>)
   bf804:	6083      	str	r3, [r0, #8]
   bf806:	230b      	movs	r3, #11
   bf808:	8183      	strh	r3, [r0, #12]
   bf80a:	2100      	movs	r1, #0
   bf80c:	2001      	movs	r0, #1
   bf80e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bf812:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bf814:	2200      	movs	r2, #0
   bf816:	611c      	str	r4, [r3, #16]
   bf818:	615a      	str	r2, [r3, #20]
   bf81a:	bd38      	pop	{r3, r4, r5, pc}
   bf81c:	2003debc 	.word	0x2003debc
   bf820:	000c175a 	.word	0x000c175a
   bf824:	000c17ca 	.word	0x000c17ca
   bf828:	abcd330e 	.word	0xabcd330e
   bf82c:	e66d1234 	.word	0xe66d1234
   bf830:	0005deec 	.word	0x0005deec

000bf834 <rand>:
   bf834:	4b16      	ldr	r3, [pc, #88]	; (bf890 <rand+0x5c>)
   bf836:	b510      	push	{r4, lr}
   bf838:	681c      	ldr	r4, [r3, #0]
   bf83a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bf83c:	b9b3      	cbnz	r3, bf86c <rand+0x38>
   bf83e:	2018      	movs	r0, #24
   bf840:	f7fc f86c 	bl	bb91c <malloc>
   bf844:	63a0      	str	r0, [r4, #56]	; 0x38
   bf846:	b928      	cbnz	r0, bf854 <rand+0x20>
   bf848:	4602      	mov	r2, r0
   bf84a:	4b12      	ldr	r3, [pc, #72]	; (bf894 <rand+0x60>)
   bf84c:	4812      	ldr	r0, [pc, #72]	; (bf898 <rand+0x64>)
   bf84e:	214e      	movs	r1, #78	; 0x4e
   bf850:	f7fc f8b4 	bl	bb9bc <__assert_func>
   bf854:	4a11      	ldr	r2, [pc, #68]	; (bf89c <rand+0x68>)
   bf856:	4b12      	ldr	r3, [pc, #72]	; (bf8a0 <rand+0x6c>)
   bf858:	e9c0 2300 	strd	r2, r3, [r0]
   bf85c:	4b11      	ldr	r3, [pc, #68]	; (bf8a4 <rand+0x70>)
   bf85e:	6083      	str	r3, [r0, #8]
   bf860:	230b      	movs	r3, #11
   bf862:	8183      	strh	r3, [r0, #12]
   bf864:	2201      	movs	r2, #1
   bf866:	2300      	movs	r3, #0
   bf868:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bf86c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bf86e:	4a0e      	ldr	r2, [pc, #56]	; (bf8a8 <rand+0x74>)
   bf870:	6920      	ldr	r0, [r4, #16]
   bf872:	6963      	ldr	r3, [r4, #20]
   bf874:	490d      	ldr	r1, [pc, #52]	; (bf8ac <rand+0x78>)
   bf876:	4342      	muls	r2, r0
   bf878:	fb01 2203 	mla	r2, r1, r3, r2
   bf87c:	fba0 0101 	umull	r0, r1, r0, r1
   bf880:	1c43      	adds	r3, r0, #1
   bf882:	eb42 0001 	adc.w	r0, r2, r1
   bf886:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bf88a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bf88e:	bd10      	pop	{r4, pc}
   bf890:	2003debc 	.word	0x2003debc
   bf894:	000c175a 	.word	0x000c175a
   bf898:	000c17ca 	.word	0x000c17ca
   bf89c:	abcd330e 	.word	0xabcd330e
   bf8a0:	e66d1234 	.word	0xe66d1234
   bf8a4:	0005deec 	.word	0x0005deec
   bf8a8:	5851f42d 	.word	0x5851f42d
   bf8ac:	4c957f2d 	.word	0x4c957f2d

000bf8b0 <strchr>:
   bf8b0:	b2c9      	uxtb	r1, r1
   bf8b2:	4603      	mov	r3, r0
   bf8b4:	f810 2b01 	ldrb.w	r2, [r0], #1
   bf8b8:	b11a      	cbz	r2, bf8c2 <strchr+0x12>
   bf8ba:	428a      	cmp	r2, r1
   bf8bc:	d1f9      	bne.n	bf8b2 <strchr+0x2>
   bf8be:	4618      	mov	r0, r3
   bf8c0:	4770      	bx	lr
   bf8c2:	2900      	cmp	r1, #0
   bf8c4:	bf18      	it	ne
   bf8c6:	2300      	movne	r3, #0
   bf8c8:	e7f9      	b.n	bf8be <strchr+0xe>

000bf8ca <strchrnul>:
   bf8ca:	b510      	push	{r4, lr}
   bf8cc:	4604      	mov	r4, r0
   bf8ce:	f7ff ffef 	bl	bf8b0 <strchr>
   bf8d2:	b918      	cbnz	r0, bf8dc <strchrnul+0x12>
   bf8d4:	4620      	mov	r0, r4
   bf8d6:	f000 f832 	bl	bf93e <strlen>
   bf8da:	4420      	add	r0, r4
   bf8dc:	bd10      	pop	{r4, pc}

000bf8de <strcmp>:
   bf8de:	f810 2b01 	ldrb.w	r2, [r0], #1
   bf8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   bf8e6:	2a01      	cmp	r2, #1
   bf8e8:	bf28      	it	cs
   bf8ea:	429a      	cmpcs	r2, r3
   bf8ec:	d0f7      	beq.n	bf8de <strcmp>
   bf8ee:	1ad0      	subs	r0, r2, r3
   bf8f0:	4770      	bx	lr

000bf8f2 <strcpy>:
   bf8f2:	4603      	mov	r3, r0
   bf8f4:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf8f8:	f803 2b01 	strb.w	r2, [r3], #1
   bf8fc:	2a00      	cmp	r2, #0
   bf8fe:	d1f9      	bne.n	bf8f4 <strcpy+0x2>
   bf900:	4770      	bx	lr
	...

000bf904 <strdup>:
   bf904:	4b02      	ldr	r3, [pc, #8]	; (bf910 <strdup+0xc>)
   bf906:	4601      	mov	r1, r0
   bf908:	6818      	ldr	r0, [r3, #0]
   bf90a:	f000 b803 	b.w	bf914 <_strdup_r>
   bf90e:	bf00      	nop
   bf910:	2003debc 	.word	0x2003debc

000bf914 <_strdup_r>:
   bf914:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf916:	4604      	mov	r4, r0
   bf918:	4608      	mov	r0, r1
   bf91a:	460d      	mov	r5, r1
   bf91c:	f000 f80f 	bl	bf93e <strlen>
   bf920:	1c42      	adds	r2, r0, #1
   bf922:	4611      	mov	r1, r2
   bf924:	4620      	mov	r0, r4
   bf926:	9201      	str	r2, [sp, #4]
   bf928:	f7fc f838 	bl	bb99c <_malloc_r>
   bf92c:	4604      	mov	r4, r0
   bf92e:	b118      	cbz	r0, bf938 <_strdup_r+0x24>
   bf930:	9a01      	ldr	r2, [sp, #4]
   bf932:	4629      	mov	r1, r5
   bf934:	f7ff ff20 	bl	bf778 <memcpy>
   bf938:	4620      	mov	r0, r4
   bf93a:	b003      	add	sp, #12
   bf93c:	bd30      	pop	{r4, r5, pc}

000bf93e <strlen>:
   bf93e:	4603      	mov	r3, r0
   bf940:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf944:	2a00      	cmp	r2, #0
   bf946:	d1fb      	bne.n	bf940 <strlen+0x2>
   bf948:	1a18      	subs	r0, r3, r0
   bf94a:	3801      	subs	r0, #1
   bf94c:	4770      	bx	lr

000bf94e <strncmp>:
   bf94e:	b510      	push	{r4, lr}
   bf950:	b17a      	cbz	r2, bf972 <strncmp+0x24>
   bf952:	4603      	mov	r3, r0
   bf954:	3901      	subs	r1, #1
   bf956:	1884      	adds	r4, r0, r2
   bf958:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf95c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bf960:	4290      	cmp	r0, r2
   bf962:	d101      	bne.n	bf968 <strncmp+0x1a>
   bf964:	42a3      	cmp	r3, r4
   bf966:	d101      	bne.n	bf96c <strncmp+0x1e>
   bf968:	1a80      	subs	r0, r0, r2
   bf96a:	bd10      	pop	{r4, pc}
   bf96c:	2800      	cmp	r0, #0
   bf96e:	d1f3      	bne.n	bf958 <strncmp+0xa>
   bf970:	e7fa      	b.n	bf968 <strncmp+0x1a>
   bf972:	4610      	mov	r0, r2
   bf974:	e7f9      	b.n	bf96a <strncmp+0x1c>

000bf976 <strncpy>:
   bf976:	b510      	push	{r4, lr}
   bf978:	3901      	subs	r1, #1
   bf97a:	4603      	mov	r3, r0
   bf97c:	b132      	cbz	r2, bf98c <strncpy+0x16>
   bf97e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bf982:	f803 4b01 	strb.w	r4, [r3], #1
   bf986:	3a01      	subs	r2, #1
   bf988:	2c00      	cmp	r4, #0
   bf98a:	d1f7      	bne.n	bf97c <strncpy+0x6>
   bf98c:	441a      	add	r2, r3
   bf98e:	2100      	movs	r1, #0
   bf990:	4293      	cmp	r3, r2
   bf992:	d100      	bne.n	bf996 <strncpy+0x20>
   bf994:	bd10      	pop	{r4, pc}
   bf996:	f803 1b01 	strb.w	r1, [r3], #1
   bf99a:	e7f9      	b.n	bf990 <strncpy+0x1a>

000bf99c <strrchr>:
   bf99c:	b538      	push	{r3, r4, r5, lr}
   bf99e:	4603      	mov	r3, r0
   bf9a0:	460c      	mov	r4, r1
   bf9a2:	b969      	cbnz	r1, bf9c0 <strrchr+0x24>
   bf9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf9a8:	f7ff bf82 	b.w	bf8b0 <strchr>
   bf9ac:	1c43      	adds	r3, r0, #1
   bf9ae:	4605      	mov	r5, r0
   bf9b0:	4621      	mov	r1, r4
   bf9b2:	4618      	mov	r0, r3
   bf9b4:	f7ff ff7c 	bl	bf8b0 <strchr>
   bf9b8:	2800      	cmp	r0, #0
   bf9ba:	d1f7      	bne.n	bf9ac <strrchr+0x10>
   bf9bc:	4628      	mov	r0, r5
   bf9be:	bd38      	pop	{r3, r4, r5, pc}
   bf9c0:	2500      	movs	r5, #0
   bf9c2:	e7f5      	b.n	bf9b0 <strrchr+0x14>

000bf9c4 <__strtok_r>:
   bf9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf9c6:	b908      	cbnz	r0, bf9cc <__strtok_r+0x8>
   bf9c8:	6810      	ldr	r0, [r2, #0]
   bf9ca:	b188      	cbz	r0, bf9f0 <__strtok_r+0x2c>
   bf9cc:	4604      	mov	r4, r0
   bf9ce:	4620      	mov	r0, r4
   bf9d0:	f814 5b01 	ldrb.w	r5, [r4], #1
   bf9d4:	460f      	mov	r7, r1
   bf9d6:	f817 6b01 	ldrb.w	r6, [r7], #1
   bf9da:	b91e      	cbnz	r6, bf9e4 <__strtok_r+0x20>
   bf9dc:	b965      	cbnz	r5, bf9f8 <__strtok_r+0x34>
   bf9de:	6015      	str	r5, [r2, #0]
   bf9e0:	4628      	mov	r0, r5
   bf9e2:	e005      	b.n	bf9f0 <__strtok_r+0x2c>
   bf9e4:	42b5      	cmp	r5, r6
   bf9e6:	d1f6      	bne.n	bf9d6 <__strtok_r+0x12>
   bf9e8:	2b00      	cmp	r3, #0
   bf9ea:	d1f0      	bne.n	bf9ce <__strtok_r+0xa>
   bf9ec:	6014      	str	r4, [r2, #0]
   bf9ee:	7003      	strb	r3, [r0, #0]
   bf9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf9f2:	461c      	mov	r4, r3
   bf9f4:	e00c      	b.n	bfa10 <__strtok_r+0x4c>
   bf9f6:	b915      	cbnz	r5, bf9fe <__strtok_r+0x3a>
   bf9f8:	f814 3b01 	ldrb.w	r3, [r4], #1
   bf9fc:	460e      	mov	r6, r1
   bf9fe:	f816 5b01 	ldrb.w	r5, [r6], #1
   bfa02:	42ab      	cmp	r3, r5
   bfa04:	d1f7      	bne.n	bf9f6 <__strtok_r+0x32>
   bfa06:	2b00      	cmp	r3, #0
   bfa08:	d0f3      	beq.n	bf9f2 <__strtok_r+0x2e>
   bfa0a:	2300      	movs	r3, #0
   bfa0c:	f804 3c01 	strb.w	r3, [r4, #-1]
   bfa10:	6014      	str	r4, [r2, #0]
   bfa12:	e7ed      	b.n	bf9f0 <__strtok_r+0x2c>

000bfa14 <strtok_r>:
   bfa14:	2301      	movs	r3, #1
   bfa16:	f7ff bfd5 	b.w	bf9c4 <__strtok_r>
	...

000bfa1c <_strtol_l.constprop.0>:
   bfa1c:	2b01      	cmp	r3, #1
   bfa1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfa22:	d001      	beq.n	bfa28 <_strtol_l.constprop.0+0xc>
   bfa24:	2b24      	cmp	r3, #36	; 0x24
   bfa26:	d906      	bls.n	bfa36 <_strtol_l.constprop.0+0x1a>
   bfa28:	f7fb ffc0 	bl	bb9ac <__errno>
   bfa2c:	2316      	movs	r3, #22
   bfa2e:	6003      	str	r3, [r0, #0]
   bfa30:	2000      	movs	r0, #0
   bfa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bfa36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bfb1c <_strtol_l.constprop.0+0x100>
   bfa3a:	460d      	mov	r5, r1
   bfa3c:	462e      	mov	r6, r5
   bfa3e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bfa42:	f814 700c 	ldrb.w	r7, [r4, ip]
   bfa46:	f017 0708 	ands.w	r7, r7, #8
   bfa4a:	d1f7      	bne.n	bfa3c <_strtol_l.constprop.0+0x20>
   bfa4c:	2c2d      	cmp	r4, #45	; 0x2d
   bfa4e:	d132      	bne.n	bfab6 <_strtol_l.constprop.0+0x9a>
   bfa50:	782c      	ldrb	r4, [r5, #0]
   bfa52:	2701      	movs	r7, #1
   bfa54:	1cb5      	adds	r5, r6, #2
   bfa56:	2b00      	cmp	r3, #0
   bfa58:	d05b      	beq.n	bfb12 <_strtol_l.constprop.0+0xf6>
   bfa5a:	2b10      	cmp	r3, #16
   bfa5c:	d109      	bne.n	bfa72 <_strtol_l.constprop.0+0x56>
   bfa5e:	2c30      	cmp	r4, #48	; 0x30
   bfa60:	d107      	bne.n	bfa72 <_strtol_l.constprop.0+0x56>
   bfa62:	782c      	ldrb	r4, [r5, #0]
   bfa64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bfa68:	2c58      	cmp	r4, #88	; 0x58
   bfa6a:	d14d      	bne.n	bfb08 <_strtol_l.constprop.0+0xec>
   bfa6c:	786c      	ldrb	r4, [r5, #1]
   bfa6e:	2310      	movs	r3, #16
   bfa70:	3502      	adds	r5, #2
   bfa72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bfa76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bfa7a:	f04f 0c00 	mov.w	ip, #0
   bfa7e:	fbb8 f9f3 	udiv	r9, r8, r3
   bfa82:	4666      	mov	r6, ip
   bfa84:	fb03 8a19 	mls	sl, r3, r9, r8
   bfa88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bfa8c:	f1be 0f09 	cmp.w	lr, #9
   bfa90:	d816      	bhi.n	bfac0 <_strtol_l.constprop.0+0xa4>
   bfa92:	4674      	mov	r4, lr
   bfa94:	42a3      	cmp	r3, r4
   bfa96:	dd24      	ble.n	bfae2 <_strtol_l.constprop.0+0xc6>
   bfa98:	f1bc 0f00 	cmp.w	ip, #0
   bfa9c:	db1e      	blt.n	bfadc <_strtol_l.constprop.0+0xc0>
   bfa9e:	45b1      	cmp	r9, r6
   bfaa0:	d31c      	bcc.n	bfadc <_strtol_l.constprop.0+0xc0>
   bfaa2:	d101      	bne.n	bfaa8 <_strtol_l.constprop.0+0x8c>
   bfaa4:	45a2      	cmp	sl, r4
   bfaa6:	db19      	blt.n	bfadc <_strtol_l.constprop.0+0xc0>
   bfaa8:	fb06 4603 	mla	r6, r6, r3, r4
   bfaac:	f04f 0c01 	mov.w	ip, #1
   bfab0:	f815 4b01 	ldrb.w	r4, [r5], #1
   bfab4:	e7e8      	b.n	bfa88 <_strtol_l.constprop.0+0x6c>
   bfab6:	2c2b      	cmp	r4, #43	; 0x2b
   bfab8:	bf04      	itt	eq
   bfaba:	782c      	ldrbeq	r4, [r5, #0]
   bfabc:	1cb5      	addeq	r5, r6, #2
   bfabe:	e7ca      	b.n	bfa56 <_strtol_l.constprop.0+0x3a>
   bfac0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bfac4:	f1be 0f19 	cmp.w	lr, #25
   bfac8:	d801      	bhi.n	bface <_strtol_l.constprop.0+0xb2>
   bfaca:	3c37      	subs	r4, #55	; 0x37
   bfacc:	e7e2      	b.n	bfa94 <_strtol_l.constprop.0+0x78>
   bface:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bfad2:	f1be 0f19 	cmp.w	lr, #25
   bfad6:	d804      	bhi.n	bfae2 <_strtol_l.constprop.0+0xc6>
   bfad8:	3c57      	subs	r4, #87	; 0x57
   bfada:	e7db      	b.n	bfa94 <_strtol_l.constprop.0+0x78>
   bfadc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bfae0:	e7e6      	b.n	bfab0 <_strtol_l.constprop.0+0x94>
   bfae2:	f1bc 0f00 	cmp.w	ip, #0
   bfae6:	da05      	bge.n	bfaf4 <_strtol_l.constprop.0+0xd8>
   bfae8:	2322      	movs	r3, #34	; 0x22
   bfaea:	6003      	str	r3, [r0, #0]
   bfaec:	4646      	mov	r6, r8
   bfaee:	b942      	cbnz	r2, bfb02 <_strtol_l.constprop.0+0xe6>
   bfaf0:	4630      	mov	r0, r6
   bfaf2:	e79e      	b.n	bfa32 <_strtol_l.constprop.0+0x16>
   bfaf4:	b107      	cbz	r7, bfaf8 <_strtol_l.constprop.0+0xdc>
   bfaf6:	4276      	negs	r6, r6
   bfaf8:	2a00      	cmp	r2, #0
   bfafa:	d0f9      	beq.n	bfaf0 <_strtol_l.constprop.0+0xd4>
   bfafc:	f1bc 0f00 	cmp.w	ip, #0
   bfb00:	d000      	beq.n	bfb04 <_strtol_l.constprop.0+0xe8>
   bfb02:	1e69      	subs	r1, r5, #1
   bfb04:	6011      	str	r1, [r2, #0]
   bfb06:	e7f3      	b.n	bfaf0 <_strtol_l.constprop.0+0xd4>
   bfb08:	2430      	movs	r4, #48	; 0x30
   bfb0a:	2b00      	cmp	r3, #0
   bfb0c:	d1b1      	bne.n	bfa72 <_strtol_l.constprop.0+0x56>
   bfb0e:	2308      	movs	r3, #8
   bfb10:	e7af      	b.n	bfa72 <_strtol_l.constprop.0+0x56>
   bfb12:	2c30      	cmp	r4, #48	; 0x30
   bfb14:	d0a5      	beq.n	bfa62 <_strtol_l.constprop.0+0x46>
   bfb16:	230a      	movs	r3, #10
   bfb18:	e7ab      	b.n	bfa72 <_strtol_l.constprop.0+0x56>
   bfb1a:	bf00      	nop
   bfb1c:	000c1824 	.word	0x000c1824

000bfb20 <strtol>:
   bfb20:	4613      	mov	r3, r2
   bfb22:	460a      	mov	r2, r1
   bfb24:	4601      	mov	r1, r0
   bfb26:	4802      	ldr	r0, [pc, #8]	; (bfb30 <strtol+0x10>)
   bfb28:	6800      	ldr	r0, [r0, #0]
   bfb2a:	f7ff bf77 	b.w	bfa1c <_strtol_l.constprop.0>
   bfb2e:	bf00      	nop
   bfb30:	2003debc 	.word	0x2003debc

000bfb34 <close>:
   bfb34:	4b02      	ldr	r3, [pc, #8]	; (bfb40 <close+0xc>)
   bfb36:	4601      	mov	r1, r0
   bfb38:	6818      	ldr	r0, [r3, #0]
   bfb3a:	f000 b8c9 	b.w	bfcd0 <_close_r>
   bfb3e:	bf00      	nop
   bfb40:	2003debc 	.word	0x2003debc

000bfb44 <fstat>:
   bfb44:	4b02      	ldr	r3, [pc, #8]	; (bfb50 <fstat+0xc>)
   bfb46:	460a      	mov	r2, r1
   bfb48:	4601      	mov	r1, r0
   bfb4a:	6818      	ldr	r0, [r3, #0]
   bfb4c:	f000 b8d0 	b.w	bfcf0 <_fstat_r>
   bfb50:	2003debc 	.word	0x2003debc

000bfb54 <lseek>:
   bfb54:	4613      	mov	r3, r2
   bfb56:	460a      	mov	r2, r1
   bfb58:	4601      	mov	r1, r0
   bfb5a:	4802      	ldr	r0, [pc, #8]	; (bfb64 <lseek+0x10>)
   bfb5c:	6800      	ldr	r0, [r0, #0]
   bfb5e:	f000 b8dd 	b.w	bfd1c <_lseek_r>
   bfb62:	bf00      	nop
   bfb64:	2003debc 	.word	0x2003debc

000bfb68 <open>:
   bfb68:	b40e      	push	{r1, r2, r3}
   bfb6a:	b503      	push	{r0, r1, lr}
   bfb6c:	ab03      	add	r3, sp, #12
   bfb6e:	4601      	mov	r1, r0
   bfb70:	4806      	ldr	r0, [pc, #24]	; (bfb8c <open+0x24>)
   bfb72:	f853 2b04 	ldr.w	r2, [r3], #4
   bfb76:	9301      	str	r3, [sp, #4]
   bfb78:	6800      	ldr	r0, [r0, #0]
   bfb7a:	9b04      	ldr	r3, [sp, #16]
   bfb7c:	f000 f8e0 	bl	bfd40 <_open_r>
   bfb80:	b002      	add	sp, #8
   bfb82:	f85d eb04 	ldr.w	lr, [sp], #4
   bfb86:	b003      	add	sp, #12
   bfb88:	4770      	bx	lr
   bfb8a:	bf00      	nop
   bfb8c:	2003debc 	.word	0x2003debc

000bfb90 <read>:
   bfb90:	4613      	mov	r3, r2
   bfb92:	460a      	mov	r2, r1
   bfb94:	4601      	mov	r1, r0
   bfb96:	4802      	ldr	r0, [pc, #8]	; (bfba0 <read+0x10>)
   bfb98:	6800      	ldr	r0, [r0, #0]
   bfb9a:	f000 b8e3 	b.w	bfd64 <_read_r>
   bfb9e:	bf00      	nop
   bfba0:	2003debc 	.word	0x2003debc

000bfba4 <unlink>:
   bfba4:	4b02      	ldr	r3, [pc, #8]	; (bfbb0 <unlink+0xc>)
   bfba6:	4601      	mov	r1, r0
   bfba8:	6818      	ldr	r0, [r3, #0]
   bfbaa:	f000 b80d 	b.w	bfbc8 <_unlink_r>
   bfbae:	bf00      	nop
   bfbb0:	2003debc 	.word	0x2003debc

000bfbb4 <write>:
   bfbb4:	4613      	mov	r3, r2
   bfbb6:	460a      	mov	r2, r1
   bfbb8:	4601      	mov	r1, r0
   bfbba:	4802      	ldr	r0, [pc, #8]	; (bfbc4 <write+0x10>)
   bfbbc:	6800      	ldr	r0, [r0, #0]
   bfbbe:	f000 b813 	b.w	bfbe8 <_write_r>
   bfbc2:	bf00      	nop
   bfbc4:	2003debc 	.word	0x2003debc

000bfbc8 <_unlink_r>:
   bfbc8:	b538      	push	{r3, r4, r5, lr}
   bfbca:	4d06      	ldr	r5, [pc, #24]	; (bfbe4 <_unlink_r+0x1c>)
   bfbcc:	2300      	movs	r3, #0
   bfbce:	4604      	mov	r4, r0
   bfbd0:	4608      	mov	r0, r1
   bfbd2:	602b      	str	r3, [r5, #0]
   bfbd4:	f7fb fc76 	bl	bb4c4 <_unlink>
   bfbd8:	1c43      	adds	r3, r0, #1
   bfbda:	d102      	bne.n	bfbe2 <_unlink_r+0x1a>
   bfbdc:	682b      	ldr	r3, [r5, #0]
   bfbde:	b103      	cbz	r3, bfbe2 <_unlink_r+0x1a>
   bfbe0:	6023      	str	r3, [r4, #0]
   bfbe2:	bd38      	pop	{r3, r4, r5, pc}
   bfbe4:	2003e7f0 	.word	0x2003e7f0

000bfbe8 <_write_r>:
   bfbe8:	b538      	push	{r3, r4, r5, lr}
   bfbea:	4d07      	ldr	r5, [pc, #28]	; (bfc08 <_write_r+0x20>)
   bfbec:	4604      	mov	r4, r0
   bfbee:	4608      	mov	r0, r1
   bfbf0:	4611      	mov	r1, r2
   bfbf2:	2200      	movs	r2, #0
   bfbf4:	602a      	str	r2, [r5, #0]
   bfbf6:	461a      	mov	r2, r3
   bfbf8:	f7fb fc2c 	bl	bb454 <_write>
   bfbfc:	1c43      	adds	r3, r0, #1
   bfbfe:	d102      	bne.n	bfc06 <_write_r+0x1e>
   bfc00:	682b      	ldr	r3, [r5, #0]
   bfc02:	b103      	cbz	r3, bfc06 <_write_r+0x1e>
   bfc04:	6023      	str	r3, [r4, #0]
   bfc06:	bd38      	pop	{r3, r4, r5, pc}
   bfc08:	2003e7f0 	.word	0x2003e7f0

000bfc0c <__register_exitproc>:
   bfc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfc10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bfccc <__register_exitproc+0xc0>
   bfc14:	4606      	mov	r6, r0
   bfc16:	f8d8 0000 	ldr.w	r0, [r8]
   bfc1a:	461f      	mov	r7, r3
   bfc1c:	460d      	mov	r5, r1
   bfc1e:	4691      	mov	r9, r2
   bfc20:	f000 f878 	bl	bfd14 <__retarget_lock_acquire_recursive>
   bfc24:	4b25      	ldr	r3, [pc, #148]	; (bfcbc <__register_exitproc+0xb0>)
   bfc26:	681c      	ldr	r4, [r3, #0]
   bfc28:	b934      	cbnz	r4, bfc38 <__register_exitproc+0x2c>
   bfc2a:	4c25      	ldr	r4, [pc, #148]	; (bfcc0 <__register_exitproc+0xb4>)
   bfc2c:	601c      	str	r4, [r3, #0]
   bfc2e:	4b25      	ldr	r3, [pc, #148]	; (bfcc4 <__register_exitproc+0xb8>)
   bfc30:	b113      	cbz	r3, bfc38 <__register_exitproc+0x2c>
   bfc32:	681b      	ldr	r3, [r3, #0]
   bfc34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bfc38:	6863      	ldr	r3, [r4, #4]
   bfc3a:	2b1f      	cmp	r3, #31
   bfc3c:	dd07      	ble.n	bfc4e <__register_exitproc+0x42>
   bfc3e:	f8d8 0000 	ldr.w	r0, [r8]
   bfc42:	f000 f869 	bl	bfd18 <__retarget_lock_release_recursive>
   bfc46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bfc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfc4e:	b34e      	cbz	r6, bfca4 <__register_exitproc+0x98>
   bfc50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bfc54:	b988      	cbnz	r0, bfc7a <__register_exitproc+0x6e>
   bfc56:	4b1c      	ldr	r3, [pc, #112]	; (bfcc8 <__register_exitproc+0xbc>)
   bfc58:	b923      	cbnz	r3, bfc64 <__register_exitproc+0x58>
   bfc5a:	f8d8 0000 	ldr.w	r0, [r8]
   bfc5e:	f000 f85a 	bl	bfd16 <__retarget_lock_release>
   bfc62:	e7f0      	b.n	bfc46 <__register_exitproc+0x3a>
   bfc64:	f44f 7084 	mov.w	r0, #264	; 0x108
   bfc68:	f7fb fe58 	bl	bb91c <malloc>
   bfc6c:	2800      	cmp	r0, #0
   bfc6e:	d0f4      	beq.n	bfc5a <__register_exitproc+0x4e>
   bfc70:	2300      	movs	r3, #0
   bfc72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bfc76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bfc7a:	6863      	ldr	r3, [r4, #4]
   bfc7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bfc80:	2201      	movs	r2, #1
   bfc82:	409a      	lsls	r2, r3
   bfc84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bfc88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bfc8c:	4313      	orrs	r3, r2
   bfc8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bfc92:	2e02      	cmp	r6, #2
   bfc94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bfc98:	bf02      	ittt	eq
   bfc9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bfc9e:	4313      	orreq	r3, r2
   bfca0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bfca4:	6863      	ldr	r3, [r4, #4]
   bfca6:	f8d8 0000 	ldr.w	r0, [r8]
   bfcaa:	1c5a      	adds	r2, r3, #1
   bfcac:	3302      	adds	r3, #2
   bfcae:	6062      	str	r2, [r4, #4]
   bfcb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bfcb4:	f000 f830 	bl	bfd18 <__retarget_lock_release_recursive>
   bfcb8:	2000      	movs	r0, #0
   bfcba:	e7c6      	b.n	bfc4a <__register_exitproc+0x3e>
   bfcbc:	2003e7e8 	.word	0x2003e7e8
   bfcc0:	2003e75c 	.word	0x2003e75c
   bfcc4:	00000000 	.word	0x00000000
   bfcc8:	000bb91d 	.word	0x000bb91d
   bfccc:	2003df20 	.word	0x2003df20

000bfcd0 <_close_r>:
   bfcd0:	b538      	push	{r3, r4, r5, lr}
   bfcd2:	4d06      	ldr	r5, [pc, #24]	; (bfcec <_close_r+0x1c>)
   bfcd4:	2300      	movs	r3, #0
   bfcd6:	4604      	mov	r4, r0
   bfcd8:	4608      	mov	r0, r1
   bfcda:	602b      	str	r3, [r5, #0]
   bfcdc:	f7fb fbca 	bl	bb474 <_close>
   bfce0:	1c43      	adds	r3, r0, #1
   bfce2:	d102      	bne.n	bfcea <_close_r+0x1a>
   bfce4:	682b      	ldr	r3, [r5, #0]
   bfce6:	b103      	cbz	r3, bfcea <_close_r+0x1a>
   bfce8:	6023      	str	r3, [r4, #0]
   bfcea:	bd38      	pop	{r3, r4, r5, pc}
   bfcec:	2003e7f0 	.word	0x2003e7f0

000bfcf0 <_fstat_r>:
   bfcf0:	b538      	push	{r3, r4, r5, lr}
   bfcf2:	4d07      	ldr	r5, [pc, #28]	; (bfd10 <_fstat_r+0x20>)
   bfcf4:	2300      	movs	r3, #0
   bfcf6:	4604      	mov	r4, r0
   bfcf8:	4608      	mov	r0, r1
   bfcfa:	4611      	mov	r1, r2
   bfcfc:	602b      	str	r3, [r5, #0]
   bfcfe:	f7fb fbc1 	bl	bb484 <_fstat>
   bfd02:	1c43      	adds	r3, r0, #1
   bfd04:	d102      	bne.n	bfd0c <_fstat_r+0x1c>
   bfd06:	682b      	ldr	r3, [r5, #0]
   bfd08:	b103      	cbz	r3, bfd0c <_fstat_r+0x1c>
   bfd0a:	6023      	str	r3, [r4, #0]
   bfd0c:	bd38      	pop	{r3, r4, r5, pc}
   bfd0e:	bf00      	nop
   bfd10:	2003e7f0 	.word	0x2003e7f0

000bfd14 <__retarget_lock_acquire_recursive>:
   bfd14:	4770      	bx	lr

000bfd16 <__retarget_lock_release>:
   bfd16:	4770      	bx	lr

000bfd18 <__retarget_lock_release_recursive>:
   bfd18:	4770      	bx	lr
	...

000bfd1c <_lseek_r>:
   bfd1c:	b538      	push	{r3, r4, r5, lr}
   bfd1e:	4d07      	ldr	r5, [pc, #28]	; (bfd3c <_lseek_r+0x20>)
   bfd20:	4604      	mov	r4, r0
   bfd22:	4608      	mov	r0, r1
   bfd24:	4611      	mov	r1, r2
   bfd26:	2200      	movs	r2, #0
   bfd28:	602a      	str	r2, [r5, #0]
   bfd2a:	461a      	mov	r2, r3
   bfd2c:	f7fb fbb2 	bl	bb494 <_lseek>
   bfd30:	1c43      	adds	r3, r0, #1
   bfd32:	d102      	bne.n	bfd3a <_lseek_r+0x1e>
   bfd34:	682b      	ldr	r3, [r5, #0]
   bfd36:	b103      	cbz	r3, bfd3a <_lseek_r+0x1e>
   bfd38:	6023      	str	r3, [r4, #0]
   bfd3a:	bd38      	pop	{r3, r4, r5, pc}
   bfd3c:	2003e7f0 	.word	0x2003e7f0

000bfd40 <_open_r>:
   bfd40:	b538      	push	{r3, r4, r5, lr}
   bfd42:	4d07      	ldr	r5, [pc, #28]	; (bfd60 <_open_r+0x20>)
   bfd44:	4604      	mov	r4, r0
   bfd46:	4608      	mov	r0, r1
   bfd48:	4611      	mov	r1, r2
   bfd4a:	2200      	movs	r2, #0
   bfd4c:	602a      	str	r2, [r5, #0]
   bfd4e:	461a      	mov	r2, r3
   bfd50:	f7fb fb78 	bl	bb444 <_open>
   bfd54:	1c43      	adds	r3, r0, #1
   bfd56:	d102      	bne.n	bfd5e <_open_r+0x1e>
   bfd58:	682b      	ldr	r3, [r5, #0]
   bfd5a:	b103      	cbz	r3, bfd5e <_open_r+0x1e>
   bfd5c:	6023      	str	r3, [r4, #0]
   bfd5e:	bd38      	pop	{r3, r4, r5, pc}
   bfd60:	2003e7f0 	.word	0x2003e7f0

000bfd64 <_read_r>:
   bfd64:	b538      	push	{r3, r4, r5, lr}
   bfd66:	4d07      	ldr	r5, [pc, #28]	; (bfd84 <_read_r+0x20>)
   bfd68:	4604      	mov	r4, r0
   bfd6a:	4608      	mov	r0, r1
   bfd6c:	4611      	mov	r1, r2
   bfd6e:	2200      	movs	r2, #0
   bfd70:	602a      	str	r2, [r5, #0]
   bfd72:	461a      	mov	r2, r3
   bfd74:	f7fb fb76 	bl	bb464 <_read>
   bfd78:	1c43      	adds	r3, r0, #1
   bfd7a:	d102      	bne.n	bfd82 <_read_r+0x1e>
   bfd7c:	682b      	ldr	r3, [r5, #0]
   bfd7e:	b103      	cbz	r3, bfd82 <_read_r+0x1e>
   bfd80:	6023      	str	r3, [r4, #0]
   bfd82:	bd38      	pop	{r3, r4, r5, pc}
   bfd84:	2003e7f0 	.word	0x2003e7f0

000bfd88 <dynalib_user>:
   bfd88:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   bfd98:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bfda8:	72697620 6c617574 696e6900 61662074      virtual.init fa
   bfdb8:	64656c69 526f4c00 61522041 206f6964     iled.LoRA Radio 
   bfdc8:	74696e69 696c6169 2064657a 61207361     initialized as a
   bfdd8:	74616720 79617765 74697720 20612068      gateway with a 
   bfde8:	69766564 44496563 20666f20 4c007325     deviceID of %s.L
   bfdf8:	2041526f 69646152 6e69206f 61697469     oRA Radio initia
   bfe08:	657a696c 73612064 646f6e20 69252065     lized as node %i
   bfe18:	646e6120 64206120 63697665 20444965      and a deviceID 
   bfe28:	2520666f 6f4c0073 52204152 6f696461     of %s.LoRA Radio
   bfe38:	696e6920 6c616974 64657a69 20736120      initialized as 
   bfe48:	75206e61 6e6f636e 75676966 20646572     an unconfigured 
   bfe58:	65646f6e 20692520 20646e61 65642061     node %i and a de
   bfe68:	65636976 6f204449 73252066 63654400     viceID of %s.Dec
   bfe78:	65687069 20646572 61746164 70657220     iphered data rep
   bfe88:	2074726f 66206425 206d6f72 65646f6e     ort %d from node
   bfe98:	00642520 6373696d 69666e6f 65727567      %d.misconfigure
   bfea8:	30002064 30303030 30303030 30303030     d .0000000000000
   bfeb8:	30303030 30303030 00303030 65646f4e     00000000000.Node
   bfec8:	64203120 63697665 20444965 20746f6e      1 deviceID not 
   bfed8:	20746573 6573202d 6e697474 6c612067     set - setting al
   bfee8:	00747265 65646f4e 64203220 63697665     ert.Node 2 devic
   bfef8:	20444965 20746f6e 20746573 6573202d     eID not set - se
   bff08:	6e697474 6c612067 00747265 65646f4e     tting alert.Node
   bff18:	6d756e20 20726562 20746f6e 666e6f63      number not conf
   bff28:	72756769 2d206465 74657320 676e6974     igured - setting
   bff38:	656c6120 41007472 6f6e6b63 67656c77      alert.Acknowleg
   bff48:	746e656d 206f7420 6f6e7325 25206564     ment to %snode %
   bff58:	656d2064 67617373 64252065 6974202c     d message %d, ti
   bff68:	3d20656d 20732520 20646e61 71657266     me = %s and freq
   bff78:	636e6575 64252079 6e696d20 73657475     uency %d minutes
   bff88:	73655200 736e6f70 65722065 76696563     .Response receiv
   bff98:	73206465 65636375 75667373 20796c6c     ed successfully 
   bffa8:	7573202d 73656363 61722073 25206574     - success rate %
   bffb8:	66322e34 73655200 736e6f70 6f6e2065     4.2f.Response no
   bffc8:	63612074 776f6e6b 6764656c 2d206465     t acknowledged -
   bffd8:	63757320 73736563 74617220 34252065      success rate %4
   bffe8:	0066322e 746e6553 73657220 736e6f70     .2f.Sent respons
   bfff8:	6f742065 6e657320 54726f73 20657079     e to sensorType 
   c0008:	6e206425 2065646f 202c6425 656d6974     %d node %d, time
   c0018:	25203d20 6e612073 72662064 65757165      = %s and freque
   c0028:	2079636e 6d206425 74756e69 52007365     ncy %d minutes.R
   c0038:	6f707365 2065736e 65636572 64657669     esponse received
   c0048:	63757320 73736563 6c6c7566 65520079      successfully.Re
   c0058:	6e6f7073 6e206573 6120746f 6f6e6b63     sponse not ackno
   c0068:	64656c77 00646567 69636544 72656870     wledged.Decipher
   c0078:	61206465 7472656c 70657220 2074726f     ed alert report 
   c0088:	6d6f7266 646f6e20 64252065 6e655300     from node %d.Sen
   c0098:	63612074 776f6e6b 6764656c 746e656d     t acknowledgment
   c00a8:	206f7420 65646f4e 2c642520 6d697420      to Node %d, tim
   c00b8:	203d2065 61207325 6620646e 75716572     e = %s and frequ
   c00c8:	79636e65 20642520 756e696d 00736574     ency %d minutes.
   c00d8:	70736552 69646e6f 7520676e 676e6973     Responding using
   c00e8:	65687420 20732520 7373656d 20656761      the %s message 
   c00f8:	65707974 76656400 49656369 6e6f2044     type.deviceID on
   c0108:	6c696620 202d2065 72746572 69766965      file - retreivi
   c0118:	6e20676e 4965646f 756e2044 7265626d     ng nodeID number
   c0128:	00642520 69766564 44496563 746f6e20      %d.deviceID not
   c0138:	206e6f20 656c6966 73202d20 6e697661      on file - savin
   c0148:	73612067 646f6e20 20444965 626d756e     g as nodeID numb
   c0158:	25207265 756e0064 52006c6c 69656365     er %d.null.Recei
   c0168:	20646576 6d6f7266 76656420 49656369     ved from deviceI
   c0178:	666f2044 20732520 6c6c6977 61686320     D of %s will cha
   c0188:	2065676e 65646f6e 6d756e20 20726562     nge node number 
   c0198:	6d6f7266 20642520 25206f74 6f4a0064     from %d to %d.Jo
   c01a8:	72206e69 65757165 66207473 206d6f72     in request from 
   c01b8:	69766564 44496563 20732520 68746977     deviceID %s with
   c01c8:	646f6e20 64252065 73202d20 69747465      node %d - setti
   c01d8:	6320676e 6b636f6c 646e6120 74657320     ng clock and set
   c01e8:	676e6974 6e657320 54726f73 20657079     ting sensorType 
   c01f8:	25206f74 654d0064 67617373 616d2065     to %d.Message ma
   c0208:	20636967 626d756e 6f207265 64252066     gic number of %d
   c0218:	64696420 746f6e20 74616d20 74206863      did not match t
   c0228:	4d206568 63696761 6d754e20 20726562     he Magic Number 
   c0238:	6d206e69 726f6d65 64252079 49202d20     in memory %d - I
   c0248:	726f6e67 00676e69 6d6f7246 646f6e20     gnoring.From nod
   c0258:	64252065 74697720 73722068 253d6973     e %d with rssi=%
   c0268:	202d2064 73252061 73656d20 65676173     d - a %s message
   c0278:	20666f20 676e656c 25206874 6e692064      of length %d in
   c0288:	20642520 73706f68 20655700 20657261      %d hops.We are 
   c0298:	61647075 676e6974 65687420 62757020     updating the pub
   c02a8:	6873696c 65726620 6e657571 74207963     lish frequency t
   c02b8:	6925206f 6e696d20 73657475 00000000     o %i minutes....

000c02c8 <_ZTV14LoRA_Functions>:
	...
   c02d0:	000b40cd 000b40cf 6f706552 66207472     .@...@..Report f
   c02e0:	75716572 79636e65 20642520 736e696d     requency %d mins
   c02f0:	656e202c 65207478 746e6576 206e6920     , next event in 
   c0300:	20756c25 6f636573 0073646e 6d6f7246     %lu seconds.From
   c0310:	20732520 25206f74 69772073 69206874      %s to %s with i
   c0320:	6c61766e 74206469 00656d69 6d6f7246     nvalid time.From
   c0330:	20732520 25206f74 6f662073 75252072      %s to %s for %u
   c0340:	63657320 73646e6f 6f724600 7325206d      seconds.From %s
   c0350:	206f7420 7b007325 76656422 69656369      to %s.{"devicei
   c0360:	223a2264 2c227325 6f682220 796c7275     d":"%s", "hourly
   c0370:	75253a22 6422202c 796c6961 75253a22     ":%u, "daily":%u
   c0380:	7322202c 6f736e65 70797472 253a2265     , "sensortype":%
   c0390:	22202c64 74746162 22797265 2e34253a     d, "battery":%4.
   c03a0:	222c6632 3179656b 25223a22 222c2273     2f,"key1":"%s","
   c03b0:	706d6574 64253a22 7222202c 74657365     temp":%d, "reset
   c03c0:	253a2273 72222c64 22697373 2c64253a     s":%d,"rssi":%d,
   c03d0:	736d2220 253a2267 74222c64 73656d69      "msg":%d,"times
   c03e0:	706d6174 6c253a22 30303075 6255007d     tamp":%lu000}.Ub
   c03f0:	746f6469 6f4c2d73 4e2d4152 2d65646f     idots-LoRA-Node-
   c0400:	55003176 6f646962 4c2d7374 2d41526f     v1.Ubidots-LoRA-
   c0410:	65746147 2d796177 69003176 73690073     Gateway-v1.is.is
   c0420:	746f6e20 54534500 54444535 2e334d2c      not.EST5EDT,M3.
   c0430:	2f302e32 30303a32 2c30303a 2e31314d     2.0/2:00:00,M11.
   c0440:	2f302e31 30303a32 0030303a 253a4925     1.0/2:00:00.%I:%
   c0450:	53253a4d 4c007025 6c61636f 656d6954     M:%S%p.LocalTime
   c0460:	696e6920 6c616974 64657a69 6974202c      initialized, ti
   c0470:	6920656d 73252073 646e6120 43545220     me is %s and RTC
   c0480:	20732520 00746573 61636f4c 6d69546c      %s set.LocalTim
   c0490:	6f6e2065 6e692074 61697469 657a696c     e not initialize
   c04a0:	6f732064 6c697720 656e206c 74206465     d so will need t
   c04b0:	6f43206f 63656e6e 6f742074 72615020     o Connect to Par
   c04c0:	6c636974 73550065 62207265 6f747475     ticle.User butto
   c04d0:	7270206e 65737365 74202c64 20747365     n pressed, test 
   c04e0:	65646f6d 206f4e00 72657375 74756220     mode.No user but
   c04f0:	206e6f74 68737570 74656420 74686365     ton push detecht
   c0500:	6f006465 006e6570 736f6c63 53006465     ed.open.closed.S
   c0510:	7065656c 726f6620 20692520 6f636573     leep for %i seco
   c0520:	2073646e 6c6c6974 78656e20 76652074     nds till next ev
   c0530:	20746e65 25207461 69772073 25206874     ent at %s with %
   c0540:	6620696c 20656572 6f6d656d 41007972     li free memory.A
   c0550:	656b6f77 20746120 77207325 20687469     woke at %s with 
   c0560:	20696c25 65657266 6d656d20 0079726f     %li free memory.
   c0570:	65746147 20796177 6c207369 65747369     Gateway is liste
   c0580:	676e696e 726f6620 526f4c20 656d2041     ning for LoRA me
   c0590:	67617373 61207365 7420646e 70206568     ssages and the p
   c05a0:	206b7261 25207369 25282073 202f2064     ark is %s (%d / 
   c05b0:	2f206425 29642520 77654e00 79614420     %d / %d).New Day
   c05c0:	52202d20 74657365 676e6974 65766520      - Resetting eve
   c05d0:	68747972 00676e69 70656544 776f7020     rything.Deep pow
   c05e0:	64207265 206e776f 69766564 41006563     er down device.A
   c05f0:	77656e20 79616420 72202d20 74657365      new day - reset
   c0600:	676e6974 65766520 68747972 00676e69     ting everything.

000c0610 <_ZTV8MB85RC64>:
	...
   c0618:	000b59b5 000b59c9 000b85c5 000b865b     .Y...Y......[...
   c0628:	000b86dd                                ....

000c062c <_ZTV10nodeIDData>:
	...
   c0634:	000b5ccd 000b5a15 000b59f3 000bae45     .\...Z...Y..E...
   c0644:	000bae6d 000bb001 000bb099 000b5ab5     m............Z..
   c0654:	000b5ac9                                .Z..

000c0658 <_ZTV13sysStatusData>:
	...
   c0660:	000b5b35 000b5a15 000b59f3 000bae45     5[...Z...Y..E...
   c0670:	000bae6d 000bb001 000bb099 000b5a65     m...........eZ..
   c0680:	000b5a79                                yZ..

000c0684 <_ZTV17currentStatusData>:
	...
   c068c:	000b5b4f 000b5a15 000b59f3 000bae45     O[...Z...Y..E...
   c069c:	000bae6d 000bb001 000bb099 000b5a8d     m............Z..
   c06ac:	000b5aa1 74696e49 7a696c61 20676e69     .Z..Initalizing 
   c06bc:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   c06cc:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   c06dc:	666e6f43 00006769                       Config..

000c06e4 <BLUE_LED>:
   c06e4:	                                         ..

000c06e6 <BUTTON_PIN>:
   c06e6:	                                         ..

000c06e8 <RFM95_CS>:
   c06e8:	                                         ..

000c06ea <RFM95_INT>:
   c06ea:	                                         ..

000c06ec <TMP36_SENSE_PIN>:
   c06ec:	6553000f 6e697474 61762067 7365756c     ..Setting values
   c06fc:	726f6620 65687420 74614720 79617765      for the Gateway
   c070c:	20752500 756e696d 00736572 2500414e     .%u minures.NA.%
   c071c:	30303a69 72655600 6e6f7a69 6b6e5500     i:00.Verizon.Unk
   c072c:	6e776f6e 746f4e00 61684320 6e696772     nown.Not Chargin
   c073c:	68430067 65677261 69440064 61686373     g.Charged.Discha
   c074c:	6e696772 61460067 00746c75 6f636944     rging.Fault.Dico
   c075c:	63656e6e 00646574 74696e49 696c6169     nnected.Initiali
   c076c:	676e697a 72615020 6c636974 75662065     zing Particle fu
   c077c:	6974636e 20736e6f 20646e61 69726176     nctions and vari
   c078c:	656c6261 65520073 7361656c 69530065     ables.Release.Si
   c079c:	6c616e67 61747300 664f6574 00676843     gnal.stateOfChg.
   c07ac:	74746142 43797265 65746e6f 52007478     BatteryContext.R
   c07bc:	726f7065 676e6974 65724620 6e657571     eporting Frequen
   c07cc:	53007963 43204d49 00647261 6e65704f     cy.SIM Card.Open
   c07dc:	6d695420 6c430065 2065736f 656d6954      Time.Close Time
   c07ec:	74655300 65724620 6e657571 53007963     .Set Frequency.S
   c07fc:	57207465 20656b61 656d6954 74655300     et Wake Time.Set
   c080c:	656c5320 54207065 00656d69 6f706552      Sleep Time.Repo
   c081c:	66207472 75716572 79636e65 6c697720     rt frequency wil
   c082c:	6562206c 74657320 206f7420 6d206925     l be set to %i m
   c083c:	74756e69 61207365 656e2074 4c207478     inutes at next L
   c084c:	2041526f 6e6e6f63 00746365 656b6157     oRA connect.Wake
   c085c:	6d697420 65732065 6f742074 00692520      time set to %i.
   c086c:	65656c53 69742070 7320656d 74207465     Sleep time set t
   c087c:	6925206f 74655300 206f7420 69726556     o %i.Set to Veri
   c088c:	206e6f7a 004d4953 65646f4d 74655300     zon SIM.Mode.Set
   c089c:	206f7420 74726150 656c6369 4d495320      to Particle SIM
   c08ac:	206e4900 20656874 63736964 656e6e6f     .In the disconne
   c08bc:	66207463 206d6f72 74726150 656c6369     ct from Particle
   c08cc:	6e756620 6f697463 6146006e 64656c69      function.Failed
   c08dc:	206f7420 63736964 656e6e6f 66207463      to disconnect f
   c08ec:	206d6f72 74726150 656c6369 73694400     rom Particle.Dis
   c08fc:	6e6e6f63 65746365 72662064 50206d6f     connected from P
   c090c:	69747261 20656c63 25206e69 65732069     article in %i se
   c091c:	646e6f63 61460073 64656c69 206f7420     conds.Failed to 
   c092c:	6e727574 66666f20 65687420 6c654320     turn off the Cel
   c093c:	616c756c 6f6d2072 006d6564 6e727554     lular modem.Turn
   c094c:	6f206465 74206666 63206568 756c6c65     ed off the cellu
   c095c:	2072616c 65646f6d 6e69206d 20692520     lar modem in %i 
   c096c:	6f636573 0073646e                       seconds.

000c0974 <_ZTVN5spark10LogHandlerE>:
	...
   c0984:	000b40a5 000b6331                       .@..1c..

000c098c <_ZTVN5spark16SerialLogHandlerE>:
	...
   c0994:	000b63a9 000b63dd 000bd589 000b6333     .c...c......3c..
   c09a4:	656e6f4e 46695700 53470069 4d55004d     None.WiFi.GSM.UM
   c09b4:	43005354 00414d44 0045544c 45454549     TS.CDMA.LTE.IEEE
   c09c4:	31323038 4c003435 435f4554 4d5f5441     802154.LTE_CAT_M
   c09d4:	544c0031 41435f45 424e5f54 73250031     1.LTE_CAT_NB1.%s
   c09e4:	253a5320 66302e32 202c2525 32253a51      S:%2.0f%%, Q:%2
   c09f4:	2566302e 41002025 72657373 6e6f6974     .0f%% .Assertion
   c0a04:	6c696146 20657275 20637273 73202626     Failure src && s
   c0a14:	3e2d6372 6c6c6163 6b636162 20692500     rc->callback.%i 
   c0a24:	00000043 000c0729 000c09a4 000c09a9     C...)...........
   c0a34:	000c09ae 000c09b2 000c09b7 000c09bc     ................
   c0a44:	000c09c0 000c09cb 000c09d6 6c696166     ............fail
   c0a54:	74206465 6572206f 72206461 64416765     ed to read regAd
   c0a64:	253d7264 20783230 6e756f63 75253d74     dr=%02x count=%u
   c0a74:	69616600 2064656c 72206f74 20646165     .failed to read 
   c0a84:	41676572 3d726464 78323025 61747320     regAddr=%02x sta
   c0a94:	64253d74 554f4600 69642054 6f6e2064     t=%d.FOUT did no
   c0aa4:	6f672074 47494820 6f6e0048 65642074     t go HIGH.not de
   c0ab4:	74636574 66006465 656c6961 6f742064     tected.failed to
   c0ac4:	69727720 72206574 64416765 253d7264      write regAddr=%
   c0ad4:	20783230 74617473 0064253d 57746573     02x stat=%d.setW
   c0ae4:	25205444 61770064 64686374 6320676f     DT %d.watchdog c
   c0af4:	7261656c 62206465 75736552 253d746c     leared bResult=%
   c0b04:	61770064 64686374 7320676f 66207465     d.watchdog set f
   c0b14:	5372756f 3d736365 62206425 75736552     ourSecs=%d bResu
   c0b24:	253d746c 41570064 44484354 4400474f     lt=%d.WATCHDOG.D
   c0b34:	5f504545 45574f50 4f445f52 43004e57     EEP_POWER_DOWN.C
   c0b44:	544e554f 4e574f44 4d49545f 41005245     OUNTDOWN_TIMER.A
   c0b54:	4d52414c 69616600 6572756c 206e6920     LARM.failure in 
   c0b64:	61647075 61576574 6552656b 6e6f7361     updateWakeReason
   c0b74:	00642520 656b6177 61657220 206e6f73      %d.wake reason 
   c0b84:	7325203d 69616600 6572756c 206e6920     = %s.failure in 
   c0b94:	43746573 746e756f 6e776f64 656d6954     setCountdownTime
   c0ba4:	64252072 69616600 6572756c 206e6920     r %d.failure in 
   c0bb4:	70656564 65776f50 776f4472 6425206e     deepPowerDown %d
   c0bc4:	47455200 454c535f 435f5045 3d4c5254     .REG_SLEEP_CTRL=
   c0bd4:	32257830 69640078 74276e64 776f7020     0x%2x.didn't pow
   c0be4:	64207265 006e776f 64343025 3230252d     er down.%04d-%02
   c0bf4:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
   c0c04:	3230253a 65670064 63745274 6d547341     :%02d.getRtcAsTm
   c0c14:	00732520 52746573 73416374 25206d54      %s.setRtcAsTm %
   c0c24:	61660073 72756c69 6e692065 74657320     s.failure in set
   c0c34:	46637452 546d6f72 6425206d 74657300     RtcFromTm %d.set
   c0c44:	43545220 6f726620 6c63206d 2064756f      RTC from cloud 
   c0c54:	73007325 73207465 65747379 6c63206d     %s.set system cl
   c0c64:	206b636f 6d6f7266 43545220 00732520     ock from RTC %s.
   c0c74:	6c696166 74206465 6564206f 74636574     failed to detect
   c0c84:	31424120 00353038 2e707061 38316261      AB1805.app.ab18
   c0c94:	00003530                                05..

000c0c98 <_ZTV6AB1805>:
	...
   c0ca0:	000b6d01 000b6d03 000b7379 000b73ff     .m...m..ys...s..
   c0cb0:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   c0cc0:	004b5268                                hRK.

000c0cc4 <_ZTV19BackgroundPublishRK>:
	...
   c0ccc:	000b7935 000b7951 253a6425 64253a64     5y..Qy..%d:%d:%d
   c0cdc:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   c0cec:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   c0cfc:	302b2500 253a6433 00753230              .%+03d:%02u.

000c0d08 <_ZTV9LocalTime>:
	...
   c0d10:	000b7c85 000b7c9d                       .|...|..

000c0d18 <_ZTV12LocalTimeHMS>:
	...
   c0d20:	000b7c33 000b7c37                       3|..7|..

000c0d28 <_ZTV15LocalTimeChange>:
	...
   c0d30:	000b7c35 000b7c45                       5|..E|..

000c0d38 <_ZTV22LocalTimePosixTimezone>:
	...
   c0d40:	000b7c55 000b7c71                       U|..q|..

000c0d48 <_ZTV6MB85RC>:
	...
   c0d50:	000b8585 000b8587 000b85c5 000b865b     ............[...
   c0d60:	000b86dd 656c6966 3d6d754e 73206425     ....fileNum=%d s
   c0d70:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   c0d80:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   c0d90:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   c0da0:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   c0db0:	64657470 65766520 6e20746e 20656d61     pted event name 
   c0dc0:	6420726f 00617461 64616572 75657551     or data.readQueu
   c0dd0:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   c0de0:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   c0df0:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   c0e00:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   c0e10:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   c0e20:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   c0e30:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   c0e40:	76652064 20746e65 72006425 74657365     d event %d.reset
   c0e50:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   c0e60:	746e6576 6173202c 66206576 73656c69     vent, save files
   c0e70:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   c0e80:	72616373 676e6964 726f6320 74707572     scarding corrupt
   c0e90:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c0ea0:	6e696873 73252067 65766520 253d746e     shing %s event=%
   c0eb0:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c0ec0:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c0ed0:	20736920 75716572 64657269 62757000      is required.pub
   c0ee0:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c0ef0:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c0f00:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c0f10:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c0f20:	72656772 61687420 616d206e 69735f78     rger than max_si
   c0f30:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c0f40:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c0f50:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c0f60:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c0f70:	00657565 6c627570 20687369 63637573     eue.publish succ
   c0f80:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c0f90:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c0fa0:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c0fb0:	206f7420 656c6966 66612073 20726574      to files after 
   c0fc0:	6c627570 20687369 6c696166 00657275     publish failure.
   c0fd0:	2e707061 71627570 00000000              app.pubq....

000c0fdc <_ZTV17PublishQueuePosix>:
	...
   c0fe4:	000b9011 000b92cd 000b92f1              ............

000c0ff0 <_ZTV15RHGenericDriver>:
	...
   c1000:	000b9411 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c1010:	000b40a5 000b9473 000b9415 000b94c3     .@..s...........
   c1020:	000b9491 000b94e7 000b941f 000b9427     ............'...
   c1030:	000b942b 000b942f 000b9433 000b9437     +.../...3...7...
   c1040:	000b9423 000b9443 000b9447 000b944b     #...C...G...K...
   c1050:	000b944f 000b9453 000b9459 000b945d     O...S...Y...]...
   c1060:	000b941f 000b9461 000b9467 000b946d     ....a...g...m...

000c1070 <_ZTV12RHGenericSPI>:
	...
   c1078:	000b40a5 000b9545 000b9547 000b40a5     .@..E...G....@..
   c1088:	000b40a5 000b954f 000b9553 000b9557     .@..O...S...W...
   c1098:	000b9549 000b954b 000b954d 61666564     I...K...M...defa
   c10a8:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c10b8:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c10c8:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c10d8:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c10e8 <_ZTVN8particle11SPISettingsE>:
	...
   c10f0:	000b959d 000b9571 000b9573              ....q...s...

000c10fc <_ZTV13RHHardwareSPI>:
	...
   c1104:	000b9651 000b9665 000b9673 000b9681     Q...e...s.......
   c1114:	000b96ed 000b954f 000b9553 000b9557     ....O...S...W...
   c1124:	000b96fb 000b970f 000b971d              ............

000c1130 <_ZTV6RHMesh>:
	...
   c1138:	000b97e9 000b9a91 000b9749 000b9735     ........I...5...

000c1148 <_ZTV8RHRouter>:
	...
   c1150:	000b9cfd 000b9d41                       ....A...

000c1158 <_ZTV11RHSPIDriver>:
	...
   c1168:	000b9fdd 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c1178:	000b40a5 000b9473 000b9415 000b94c3     .@..s...........
   c1188:	000b9491 000b94e7 000b941f 000b9427     ............'...
   c1198:	000b942b 000b942f 000b9433 000b9437     +.../...3...7...
   c11a8:	000b9423 000b9443 000b9447 000b944b     #...C...G...K...
   c11b8:	000b944f 000b9453 000b9459 000b945d     O...S...Y...]...
   c11c8:	000b941f 000b9461 000b9467 000b946d     ....a...g...m...
   c11d8:	000ba009 000ba013                       ........

000c11e0 <_ZL18MODEM_CONFIG_TABLE>:
   c11e0:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c11f0 <_ZTV7RH_RF95>:
	...
   c11f8:	000ba17b 000ba1b3 000ba689 000ba51f     {...............
   c1208:	000ba1e9 000ba567 000ba177 000b9473     ....g...w...s...
   c1218:	000b9415 000b94c3 000b9491 000b94e7     ................
   c1228:	000ba17d 000b9427 000b942b 000b942f     }...'...+.../...
   c1238:	000b9433 000b9437 000b9423 000b9443     3...7...#...C...
   c1248:	000b9447 000b944b 000b944f 000b9453     G...K...O...S...
   c1258:	000b9459 000b945d 000ba1c3 000b9461     Y...].......a...
   c1268:	000b9467 000b946d 000ba009 000ba013     g...m...........
   c1278:	000ba173 64383025 72002f00 766f6d65     s...%08d./.remov
   c1288:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c1298:	20646e61 61207369 72696420 6f746365     and is a directo
   c12a8:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c12b8:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c12c8:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c12d8:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c12e8:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c12f8:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c1308:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c1318:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c1328:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c1338:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c1348:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c1358:	74657220 656e7275 64252064 70706100      returned %d.app
   c1368:	7165732e 656c6966 00000000              .seqfile....

000c1374 <_ZTV14SequentialFile>:
	...
   c137c:	000baae5 000bab11 000ba791 3a746f67     ............got:
   c138c:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c139c:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c13ac:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c13bc:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c13cc:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c13dc:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c13ec <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c13f4:	000bae3f 000bae8b 000bae3d 000bae45     ?.......=...E...
   c1404:	000bae6d 000bb001 000bb099              m...........

000c1410 <_ZTVN5spark13CellularClassE>:
	...
   c1418:	000bbb07 000bbafd 000bbaf3 000bbaa9     ................
   c1428:	000bbae7 000bbadb 000bd8e1 000bd8e9     ................
   c1438:	000bbacf 000bbac7 000bbabd 000bbab3     ................
   c1448:	000bd919                                ....

000c144c <_ZTV14CellularSignal>:
	...
   c1454:	000bbb95 000bbbf9 000bbb97 000bbc09     ................
   c1464:	000bbc3d 000bbc69 000bbc9d 000bbbbd     =...i...........
   c1474:	000bbb9b 000bbbb7 fffffffc 00000000     ................
   c1484:	000bbbf1                                ....

000c1488 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1490:	000bbce1 000bbce7 000bbd25 000bbcf5     ........%.......
   c14a0:	000bbce3                                ....

000c14a4 <_ZTVN5spark13EthernetClassE>:
	...
   c14ac:	000bc2ef 000bc2e5 000bc2db 000bc2d1     ................
   c14bc:	000bc2c5 000bc2b9 000bd8e1 000bd8e9     ................
   c14cc:	000bc2ad 000bc2a5 000bc29b 000bc291     ................
   c14dc:	000bd919                                ....

000c14e0 <_ZTV7TwoWire>:
	...
   c14e8:	000bc3bf 000bc409 000bc3e1 000bc3c1     ................
   c14f8:	000bc3e9 000bc3f1 000bc3f9 000bc401     ................

000c1508 <_ZTV9IPAddress>:
	...
   c1510:	000bc5a1 000bc591 000bc593 34302575     ............u%04
   c1520:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c1530:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c1540:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c1550:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c1560:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   c1570:	20736c69 0d00203d 6e6c000a 006e6600     ils = ....ln.fn.
   c1580:	65646f63 74656400 006c6961              code.detail.

000c158c <_ZTVN5spark16JSONStreamWriterE>:
	...
   c1594:	000bca4d 000bca73 000bca31 000bc6af     M...s...1.......

000c15a4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c15ac:	000bce31 000bce49 000bd589 000b6333     1...I.......3c..

000c15bc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c15c4:	000bce5d 000bce71 000bd72d 000bca39     ]...q...-...9...

000c15d4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c15dc:	000bca4b 000bca81 000bd4ed 000bca3b     K...........;...

000c15ec <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c15f4:	000bca49 000bca8f 000bcd99 000bcab1     I...............

000c1604 <_ZTVN5spark12NetworkClassE>:
	...
   c160c:	000bd8a1 000bd8ab 000bd8b5 000bd8bf     ................
   c161c:	000bd8c9 000bd8d5 000bd8e1 000bd8e9     ................
   c162c:	000bd8f1 000bd8fd 000bd905 000bd90f     ................
   c163c:	000bd919 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000c164c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c164c:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c165c:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c166c:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c167c:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c168c:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c169c:	00000065                                e...

000c16a0 <_ZTV11USARTSerial>:
	...
   c16a8:	000be78d 000be7f9 000be7d1 000bdb69     ............i...
   c16b8:	000be7a1 000be7bd 000be7af 000be7cb     ................
   c16c8:	000be78f 000be793                       ........

000c16d0 <_ZTV9USBSerial>:
	...
   c16d8:	000be84b 000be8b3 000be889 000bdb69     K...........i...
   c16e8:	000be87b 000be84d 000be85d 000be8ad     {...M...].......
   c16f8:	000be86d 000be845                       m...E...

000c1700 <_ZSt7nothrow>:
   c1700:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c1710:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c1721 <day_name.1>:
   c1721:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c1731:	61536972                                 riSat

000c1736 <mon_name.0>:
   c1736:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c1746:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c1756:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c1766:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c1776:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c1786:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c1796:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c17a6:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c17b6:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c17c6:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c17d6:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c17e6:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c17f6:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c1806:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c1816:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c1823 <_ctype_>:
   c1823:	20202000 20202020 28282020 20282828     .         ((((( 
   c1833:	20202020 20202020 20202020 20202020                     
   c1843:	10108820 10101010 10101010 10101010      ...............
   c1853:	04040410 04040404 10040404 10101010     ................
   c1863:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c1873:	01010101 01010101 01010101 10101010     ................
   c1883:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c1893:	02020202 02020202 02020202 10101010     ................
   c18a3:	00000020 00000000 00000000 00000000      ...............
	...

000c1924 <link_const_variable_data_end>:
   c1924:	000b4cbd 	.word	0x000b4cbd
   c1928:	000b51cd 	.word	0x000b51cd
   c192c:	000b6219 	.word	0x000b6219
   c1930:	000b68e5 	.word	0x000b68e5
   c1934:	000b6cf5 	.word	0x000b6cf5
   c1938:	000b7819 	.word	0x000b7819
   c193c:	000b92bd 	.word	0x000b92bd
   c1940:	000b9725 	.word	0x000b9725
   c1944:	000bae2d 	.word	0x000bae2d
   c1948:	000bba99 	.word	0x000bba99
   c194c:	000bbb65 	.word	0x000bbb65
   c1950:	000bc2f9 	.word	0x000bc2f9
   c1954:	000bd579 	.word	0x000bd579
   c1958:	000bd9f1 	.word	0x000bd9f1
   c195c:	000bde59 	.word	0x000bde59
   c1960:	000be441 	.word	0x000be441
   c1964:	000be779 	.word	0x000be779

000c1968 <link_constructors_end>:
	...
