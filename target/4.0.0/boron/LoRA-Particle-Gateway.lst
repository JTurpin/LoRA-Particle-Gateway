
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c9d0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c09f0  000c09f0  000109f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c0a14  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003dd50  000c0a18  0002dd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008ac  2003df48  2003df48  0003df48  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c0c0c  000c0c0c  00030c0c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c0c38  000c0c38  00030c38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00285ec9  00000000  00000000  00030c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002bfd0  00000000  00000000  002b6b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00068a0b  00000000  00000000  002e2ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004c68  00000000  00000000  0034b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011af0  00000000  00000000  00350148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ec3c  00000000  00000000  00361c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000925a8  00000000  00000000  003c0874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cb23  00000000  00000000  00452e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000e490  00000000  00000000  005bf940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a fd8b 	bl	beb4c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a fdad 	bl	beb9c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd50 	.word	0x2003dd50
   b404c:	000c0a18 	.word	0x000c0a18
   b4050:	2003df44 	.word	0x2003df44
   b4054:	2003df48 	.word	0x2003df48
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f009 fecd 	bl	bde00 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c09a8 	.word	0x000c09a8
   b4080:	000c09ec 	.word	0x000c09ec

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bf8e 	b.w	b4fa4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fc35 	bl	b48f8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f009 be6d 	b.w	bdd70 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f006 be31 	b.w	bacfc <malloc>

000b409a <_Znaj>:
   b409a:	f006 be2f 	b.w	bacfc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f006 be35 	b.w	bad0c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f006 fcc2 	bl	baa34 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000ba5d5 	.word	0x000ba5d5
   b40b8:	000bf170 	.word	0x000bf170

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b500      	push	{lr}
   b40e0:	b08c      	sub	sp, #48	; 0x30
   b40e2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40e4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40e8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40ec:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ee:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40f2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40f4:	6801      	ldr	r1, [r0, #0]
   b40f6:	aa04      	add	r2, sp, #16
   b40f8:	201e      	movs	r0, #30
    attr.flags = 0;
   b40fa:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40fe:	f006 fca9 	bl	baa54 <log_message_v>
}
   b4102:	b00c      	add	sp, #48	; 0x30
   b4104:	f85d eb04 	ldr.w	lr, [sp], #4
   b4108:	b003      	add	sp, #12
   b410a:	4770      	bx	lr

000b410c <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b410c:	b510      	push	{r4, lr}
    if (!_instance) {
   b410e:	4c06      	ldr	r4, [pc, #24]	; (b4128 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4110:	6823      	ldr	r3, [r4, #0]
   b4112:	b933      	cbnz	r3, b4122 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4114:	2004      	movs	r0, #4
   b4116:	f7ff ffbe 	bl	b4096 <_Znwj>
   b411a:	b108      	cbz	r0, b4120 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b411c:	4b03      	ldr	r3, [pc, #12]	; (b412c <_ZN14LoRA_Functions8instanceEv+0x20>)
   b411e:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4120:	6020      	str	r0, [r4, #0]
}
   b4122:	6820      	ldr	r0, [r4, #0]
   b4124:	bd10      	pop	{r4, pc}
   b4126:	bf00      	nop
   b4128:	2003df4c 	.word	0x2003df4c
   b412c:	000bf3c0 	.word	0x000bf3c0

000b4130 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
#define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4132:	4832      	ldr	r0, [pc, #200]	; (b41fc <_ZN14LoRA_Functions5setupEb+0xcc>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4134:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4136:	f005 f830 	bl	b919a <_ZN8RHRouter4initEv>
   b413a:	4604      	mov	r4, r0
   b413c:	b930      	cbnz	r0, b414c <_ZN14LoRA_Functions5setupEb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b413e:	4930      	ldr	r1, [pc, #192]	; (b4200 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4140:	4830      	ldr	r0, [pc, #192]	; (b4204 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b4142:	f7ff ffcb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	}
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
	
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
	return true;
}
   b4146:	4620      	mov	r0, r4
   b4148:	b004      	add	sp, #16
   b414a:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b414c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; b4208 <_ZN14LoRA_Functions5setupEb+0xd8>
   b4150:	482e      	ldr	r0, [pc, #184]	; (b420c <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4152:	f005 fb1d 	bl	b9790 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4156:	2200      	movs	r2, #0
   b4158:	2117      	movs	r1, #23
   b415a:	482c      	ldr	r0, [pc, #176]	; (b420c <_ZN14LoRA_Functions5setupEb+0xdc>)
   b415c:	f005 fc92 	bl	b9a84 <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.get_structuresVersion() == 128)) {    	// This will be our indication that the deviceID and nodeID has not yet been set
   b4160:	f001 f89a 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4164:	f001 f9e1 	bl	b552a <_ZNK13sysStatusData21get_structuresVersionEv>
   b4168:	2880      	cmp	r0, #128	; 0x80
   b416a:	d020      	beq.n	b41ae <_ZN14LoRA_Functions5setupEb+0x7e>
		randomSeed(sysStatus.get_lastConnection());			// 32-bit number for seed
   b416c:	f001 f894 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4170:	f001 fa98 	bl	b56a4 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4174:	f009 f85f 	bl	bd236 <_Z10randomSeedj>
		sysStatus.set_deviceID(random(1,65535));			// 16-bit number for deviceID
   b4178:	f001 f88e 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b417c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4180:	4606      	mov	r6, r0
   b4182:	2001      	movs	r0, #1
   b4184:	f009 f84d 	bl	bd222 <_Z6randomii>
   b4188:	b281      	uxth	r1, r0
   b418a:	4630      	mov	r0, r6
   b418c:	f001 f98b 	bl	b54a6 <_ZN13sysStatusData12set_deviceIDEt>
		if (gatewayID) {
   b4190:	b355      	cbz	r5, b41e8 <_ZN14LoRA_Functions5setupEb+0xb8>
			Log.info("Setting node number as Gateway");
   b4192:	491f      	ldr	r1, [pc, #124]	; (b4210 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4194:	481b      	ldr	r0, [pc, #108]	; (b4204 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b4196:	f7ff ffa1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			sysStatus.set_nodeNumber(0);
   b419a:	f001 f87d 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b419e:	2100      	movs	r1, #0
		else sysStatus.set_nodeNumber(random(10,255));	// Random number in - unconfigured - range will trigger a Join request
   b41a0:	f001 f987 	bl	b54b2 <_ZN13sysStatusData14set_nodeNumberEt>
		sysStatus.set_structuresVersion(128);			// Set the structure to the magic number so we can have a stable deviceID
   b41a4:	f001 f878 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b41a8:	2180      	movs	r1, #128	; 0x80
   b41aa:	f001 f9f5 	bl	b5598 <_ZN13sysStatusData21set_structuresVersionEh>
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
   b41ae:	f001 f873 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b41b2:	f001 f937 	bl	b5424 <_ZNK13sysStatusData14get_nodeNumberEv>
   b41b6:	b2c1      	uxtb	r1, r0
   b41b8:	4816      	ldr	r0, [pc, #88]	; (b4214 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b41ba:	f004 faec 	bl	b8796 <_ZN10RHDatagram14setThisAddressEh>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
   b41be:	4815      	ldr	r0, [pc, #84]	; (b4214 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b41c0:	f004 facf 	bl	b8762 <_ZN10RHDatagram11thisAddressEv>
   b41c4:	9003      	str	r0, [sp, #12]
   b41c6:	f001 f867 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b41ca:	f001 f926 	bl	b541a <_ZNK13sysStatusData12get_deviceIDEv>
   b41ce:	9002      	str	r0, [sp, #8]
   b41d0:	f001 f862 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b41d4:	f001 f9a9 	bl	b552a <_ZNK13sysStatusData21get_structuresVersionEv>
   b41d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b41dc:	9000      	str	r0, [sp, #0]
   b41de:	490e      	ldr	r1, [pc, #56]	; (b4218 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b41e0:	4808      	ldr	r0, [pc, #32]	; (b4204 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b41e2:	f7ff ff7b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	return true;
   b41e6:	e7ae      	b.n	b4146 <_ZN14LoRA_Functions5setupEb+0x16>
		else sysStatus.set_nodeNumber(random(10,255));	// Random number in - unconfigured - range will trigger a Join request
   b41e8:	f001 f856 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b41ec:	21ff      	movs	r1, #255	; 0xff
   b41ee:	4605      	mov	r5, r0
   b41f0:	200a      	movs	r0, #10
   b41f2:	f009 f816 	bl	bd222 <_Z6randomii>
   b41f6:	b281      	uxth	r1, r0
   b41f8:	4628      	mov	r0, r5
   b41fa:	e7d1      	b.n	b41a0 <_ZN14LoRA_Functions5setupEb+0x70>
   b41fc:	2003e0b4 	.word	0x2003e0b4
   b4200:	000bf185 	.word	0x000bf185
   b4204:	2003e658 	.word	0x2003e658
   b4208:	4464c000 	.word	0x4464c000
   b420c:	2003df84 	.word	0x2003df84
   b4210:	000bf191 	.word	0x000bf191
   b4214:	2003e0b8 	.word	0x2003e0b8
   b4218:	000bf1b0 	.word	0x000bf1b0

000b421c <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {
   b421c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[5] << 8 | buf[6]);
   b421e:	4c24      	ldr	r4, [pc, #144]	; (b42b0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x94>)
   b4220:	f001 f88a 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4224:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b4228:	ba49      	rev16	r1, r1
   b422a:	b289      	uxth	r1, r1
   b422c:	f001 f95f 	bl	b54ee <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[7] << 8 | buf[8]);
   b4230:	f001 f882 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4234:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   b4238:	ba49      	rev16	r1, r1
   b423a:	b289      	uxth	r1, r1
   b423c:	f001 f95d 	bl	b54fa <_ZN17currentStatusData14set_dailyCountEt>
	current.set_stateOfCharge(buf[10]);
   b4240:	f001 f87a 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4244:	4605      	mov	r5, r0
   b4246:	7aa0      	ldrb	r0, [r4, #10]
   b4248:	f00a f8bc 	bl	be3c4 <__aeabi_ui2d>
   b424c:	ec41 0b10 	vmov	d0, r0, r1
   b4250:	4628      	mov	r0, r5
   b4252:	f001 f8ad 	bl	b53b0 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[11]);
   b4256:	f001 f86f 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b425a:	7ae1      	ldrb	r1, [r4, #11]
   b425c:	f001 f9a8 	bl	b55b0 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_internalTempC(buf[9]);
   b4260:	f001 f86a 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4264:	7a61      	ldrb	r1, [r4, #9]
   b4266:	f001 f99d 	bl	b55a4 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_RSSI((buf[14] << 8 | buf[15]) - 65535);
   b426a:	f001 f865 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b426e:	89e1      	ldrh	r1, [r4, #14]
   b4270:	ba49      	rev16	r1, r1
   b4272:	3101      	adds	r1, #1
   b4274:	b289      	uxth	r1, r1
   b4276:	f001 f934 	bl	b54e2 <_ZN17currentStatusData8set_RSSIEt>
	current.set_messageNumber(buf[16]);
   b427a:	f001 f85d 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b427e:	7c21      	ldrb	r1, [r4, #16]
   b4280:	f001 f99c 	bl	b55bc <_ZN17currentStatusData17set_messageNumberEh>
	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b4284:	f001 f858 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4288:	f001 f963 	bl	b5552 <_ZNK17currentStatusData17get_messageNumberEv>
   b428c:	9001      	str	r0, [sp, #4]
   b428e:	f001 f853 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4292:	f001 f8d6 	bl	b5442 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4296:	9a01      	ldr	r2, [sp, #4]
   b4298:	4906      	ldr	r1, [pc, #24]	; (b42b4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x98>)
   b429a:	4603      	mov	r3, r0
   b429c:	4806      	ldr	r0, [pc, #24]	; (b42b8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x9c>)
   b429e:	f7ff ff1d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b42a2:	4b06      	ldr	r3, [pc, #24]	; (b42bc <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xa0>)
   b42a4:	2204      	movs	r2, #4

	return true;
}
   b42a6:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b42a8:	701a      	strb	r2, [r3, #0]
}
   b42aa:	b003      	add	sp, #12
   b42ac:	bd30      	pop	{r4, r5, pc}
   b42ae:	bf00      	nop
   b42b0:	2003df50 	.word	0x2003df50
   b42b4:	000bf207 	.word	0x000bf207
   b42b8:	2003e658 	.word	0x2003e658
   b42bc:	2003df48 	.word	0x2003df48

000b42c0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi>:

bool LoRA_Functions::acknowledgeDataReportGateway(int nextSeconds) {
   b42c0:	b570      	push	{r4, r5, r6, lr}
   b42c2:	b086      	sub	sp, #24
   b42c4:	460d      	mov	r5, r1
	uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = current.get_messageNumber();			 		// Message number
   b42c6:	f001 f837 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b42ca:	f001 f942 	bl	b5552 <_ZNK17currentStatusData17get_messageNumberEv>
   b42ce:	4c2e      	ldr	r4, [pc, #184]	; (b4388 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xc8>)
   b42d0:	7020      	strb	r0, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b42d2:	f009 fc1e 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b42d6:	1600      	asrs	r0, r0, #24
   b42d8:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b42da:	f009 fc1a 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b42de:	1400      	asrs	r0, r0, #16
   b42e0:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b42e2:	f009 fc16 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b42e6:	1200      	asrs	r0, r0, #8
   b42e8:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    	// First byte			
   b42ea:	f009 fc12 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b42ee:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b42f0:	f000 ffd2 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b42f4:	f001 f89b 	bl	b542e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b42f8:	0a00      	lsrs	r0, r0, #8
   b42fa:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());	
   b42fc:	f000 ffcc 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4300:	f001 f895 	bl	b542e <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[7] = highByte(nextSecondsShort);	// Seconds until next report - for Nodes
   b4304:	f3c5 2307 	ubfx	r3, r5, #8, #8
   b4308:	71e3      	strb	r3, [r4, #7]
	buf[8] = lowByte(nextSecondsShort);
   b430a:	7225      	strb	r5, [r4, #8]
	buf[6] = lowByte(sysStatus.get_frequencyMinutes());	
   b430c:	71a0      	strb	r0, [r4, #6]
	
	Log.info("Sent response to client message %d, time = %s, next report = %u seconds", buf[0], Time.timeStr(Time.now()).c_str(), nextSecondsShort);
   b430e:	7826      	ldrb	r6, [r4, #0]
   b4310:	f009 fbff 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b4314:	b2ad      	uxth	r5, r5
   b4316:	4602      	mov	r2, r0
   b4318:	17c3      	asrs	r3, r0, #31
   b431a:	a802      	add	r0, sp, #8
   b431c:	f009 faf4 	bl	bd908 <_ZN9TimeClass7timeStrEx>
   b4320:	4632      	mov	r2, r6
   b4322:	9b02      	ldr	r3, [sp, #8]
   b4324:	4919      	ldr	r1, [pc, #100]	; (b438c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xcc>)
   b4326:	481a      	ldr	r0, [pc, #104]	; (b4390 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xd0>)
   b4328:	9500      	str	r5, [sp, #0]
   b432a:	f7ff fed7 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b432e:	a802      	add	r0, sp, #8
   b4330:	f009 f850 	bl	bd3d4 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4334:	4b17      	ldr	r3, [pc, #92]	; (b4394 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xd4>)
   b4336:	881d      	ldrh	r5, [r3, #0]
   b4338:	2101      	movs	r1, #1
   b433a:	4628      	mov	r0, r5
   b433c:	f009 fdf9 	bl	bdf32 <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4340:	f000 fffa 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4344:	f001 f87d 	bl	b5442 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4348:	2304      	movs	r3, #4
   b434a:	9300      	str	r3, [sp, #0]
   b434c:	4621      	mov	r1, r4
   b434e:	b2c3      	uxtb	r3, r0
   b4350:	2209      	movs	r2, #9
   b4352:	4811      	ldr	r0, [pc, #68]	; (b4398 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xd8>)
   b4354:	f004 fcb8 	bl	b8cc8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4358:	4604      	mov	r4, r0
   b435a:	b950      	cbnz	r0, b4372 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xb2>
		Log.info("Response received successfully");
   b435c:	490f      	ldr	r1, [pc, #60]	; (b439c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xdc>)
   b435e:	480c      	ldr	r0, [pc, #48]	; (b4390 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xd0>)
   b4360:	f7ff febc 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4364:	4628      	mov	r0, r5
   b4366:	4621      	mov	r1, r4
   b4368:	f009 fde3 	bl	bdf32 <digitalWrite>
		// driver.sleep();                             // Here is where we will power down the LoRA radio module
		return true;
   b436c:	2001      	movs	r0, #1

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	// driver.sleep();                             // Here is where we will power down the LoRA radio module
	return false;
}
   b436e:	b006      	add	sp, #24
   b4370:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b4372:	490b      	ldr	r1, [pc, #44]	; (b43a0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xe0>)
   b4374:	4806      	ldr	r0, [pc, #24]	; (b4390 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xd0>)
   b4376:	f7ff feb1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b437a:	4628      	mov	r0, r5
   b437c:	2100      	movs	r1, #0
   b437e:	f009 fdd8 	bl	bdf32 <digitalWrite>
	return false;
   b4382:	2000      	movs	r0, #0
   b4384:	e7f3      	b.n	b436e <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi+0xae>
   b4386:	bf00      	nop
   b4388:	2003df50 	.word	0x2003df50
   b438c:	000bf22e 	.word	0x000bf22e
   b4390:	2003e658 	.word	0x2003e658
   b4394:	000bf738 	.word	0x000bf738
   b4398:	2003e0b4 	.word	0x2003e0b4
   b439c:	000bf276 	.word	0x000bf276
   b43a0:	000bf295 	.word	0x000bf295

000b43a4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi>:
	lora_state = JOIN_ACK;			// Prepare to respond

	return true;
}

bool LoRA_Functions::acknowledgeJoinRequestGateway(int nextSeconds) {
   b43a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43a6:	b087      	sub	sp, #28
   b43a8:	460d      	mov	r5, r1
	uint16_t newNodeNumber = 0;
	uint16_t nextSecondsShort = (uint16_t)nextSeconds;
   b43aa:	b28f      	uxth	r7, r1

	if (current.get_nodeNumber() < 10) {							// Device needs a new node number
   b43ac:	f000 ffc4 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b43b0:	f001 f847 	bl	b5442 <_ZNK17currentStatusData14get_nodeNumberEv>
   b43b4:	2809      	cmp	r0, #9
   b43b6:	d853      	bhi.n	b4460 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xbc>
		randomSeed(sysStatus.get_lastHookResponse());
   b43b8:	f000 ff6e 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b43bc:	f001 f96d 	bl	b569a <_ZNK13sysStatusData20get_lastHookResponseEv>
   b43c0:	f008 ff39 	bl	bd236 <_Z10randomSeedj>
		newNodeNumber = random(10,255);
   b43c4:	21ff      	movs	r1, #255	; 0xff
   b43c6:	200a      	movs	r0, #10
   b43c8:	f008 ff2b 	bl	bd222 <_Z6randomii>
   b43cc:	b286      	uxth	r6, r0
	}

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = 128;								// Magic number - so you can trust me
   b43ce:	4c2a      	ldr	r4, [pc, #168]	; (b4478 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xd4>)
   b43d0:	2380      	movs	r3, #128	; 0x80
   b43d2:	7023      	strb	r3, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b43d4:	f009 fb9d 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b43d8:	1600      	asrs	r0, r0, #24
   b43da:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b43dc:	f009 fb99 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b43e0:	1400      	asrs	r0, r0, #16
   b43e2:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b43e4:	f009 fb95 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b43e8:	1200      	asrs	r0, r0, #8
   b43ea:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   b43ec:	f009 fb91 	bl	bdb12 <_ZN9TimeClass3nowEv>
	buf[5] = highByte(newNodeNumber);			// New Node Number for device
	buf[6] = lowByte(newNodeNumber);	
	buf[7] = highByte(nextSecondsShort);		// Seconds until next report - for Nodes
   b43f0:	0a3f      	lsrs	r7, r7, #8
	buf[5] = highByte(newNodeNumber);			// New Node Number for device
   b43f2:	0a33      	lsrs	r3, r6, #8
   b43f4:	7163      	strb	r3, [r4, #5]
	buf[8] = lowByte(nextSecondsShort);
   b43f6:	7225      	strb	r5, [r4, #8]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   b43f8:	7120      	strb	r0, [r4, #4]
	buf[6] = lowByte(newNodeNumber);	
   b43fa:	71a6      	strb	r6, [r4, #6]
	buf[7] = highByte(nextSecondsShort);		// Seconds until next report - for Nodes
   b43fc:	71e7      	strb	r7, [r4, #7]
	
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", newNodeNumber, Time.timeStr(Time.now()).c_str(), nextSecondsShort);
   b43fe:	f009 fb88 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b4402:	b2ad      	uxth	r5, r5
   b4404:	4602      	mov	r2, r0
   b4406:	17c3      	asrs	r3, r0, #31
   b4408:	a802      	add	r0, sp, #8
   b440a:	f009 fa7d 	bl	bd908 <_ZN9TimeClass7timeStrEx>
   b440e:	4632      	mov	r2, r6
   b4410:	9b02      	ldr	r3, [sp, #8]
   b4412:	491a      	ldr	r1, [pc, #104]	; (b447c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xd8>)
   b4414:	481a      	ldr	r0, [pc, #104]	; (b4480 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xdc>)
   b4416:	9500      	str	r5, [sp, #0]
   b4418:	f7ff fe60 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b441c:	a802      	add	r0, sp, #8
   b441e:	f008 ffd9 	bl	bd3d4 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4422:	4b18      	ldr	r3, [pc, #96]	; (b4484 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xe0>)
   b4424:	881d      	ldrh	r5, [r3, #0]
   b4426:	2101      	movs	r1, #1
   b4428:	4628      	mov	r0, r5
   b442a:	f009 fd82 	bl	bdf32 <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b442e:	f000 ff83 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4432:	f001 f806 	bl	b5442 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4436:	2302      	movs	r3, #2
   b4438:	9300      	str	r3, [sp, #0]
   b443a:	4621      	mov	r1, r4
   b443c:	b2c3      	uxtb	r3, r0
   b443e:	2209      	movs	r2, #9
   b4440:	4811      	ldr	r0, [pc, #68]	; (b4488 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xe4>)
   b4442:	f004 fc41 	bl	b8cc8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4446:	4604      	mov	r4, r0
   b4448:	b960      	cbnz	r0, b4464 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xc0>
		Log.info("Response received successfully");
   b444a:	4910      	ldr	r1, [pc, #64]	; (b448c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xe8>)
   b444c:	480c      	ldr	r0, [pc, #48]	; (b4480 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xdc>)
   b444e:	f7ff fe45 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4452:	4628      	mov	r0, r5
   b4454:	4621      	mov	r1, r4
   b4456:	f009 fd6c 	bl	bdf32 <digitalWrite>
		// driver.sleep();                             // Here is where we will power down the LoRA radio module
		return true;
   b445a:	2001      	movs	r0, #1

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	// driver.sleep();                             // Here is where we will power down the LoRA radio module
	return false;
}
   b445c:	b007      	add	sp, #28
   b445e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t newNodeNumber = 0;
   b4460:	2600      	movs	r6, #0
   b4462:	e7b4      	b.n	b43ce <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0x2a>
	Log.info("Response not acknowledged");
   b4464:	490a      	ldr	r1, [pc, #40]	; (b4490 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xec>)
   b4466:	4806      	ldr	r0, [pc, #24]	; (b4480 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xdc>)
   b4468:	f7ff fe38 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b446c:	4628      	mov	r0, r5
   b446e:	2100      	movs	r1, #0
   b4470:	f009 fd5f 	bl	bdf32 <digitalWrite>
	return false;
   b4474:	2000      	movs	r0, #0
   b4476:	e7f1      	b.n	b445c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi+0xb8>
   b4478:	2003df50 	.word	0x2003df50
   b447c:	000bf2af 	.word	0x000bf2af
   b4480:	2003e658 	.word	0x2003e658
   b4484:	000bf738 	.word	0x000bf738
   b4488:	2003e0b4 	.word	0x2003e0b4
   b448c:	000bf276 	.word	0x000bf276
   b4490:	000bf295 	.word	0x000bf295

000b4494 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:


bool LoRA_Functions::decipherAlertReportGateway() {
   b4494:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[0]);
   b4496:	4c12      	ldr	r4, [pc, #72]	; (b44e0 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x4c>)
   b4498:	f000 ff4e 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b449c:	7821      	ldrb	r1, [r4, #0]
   b449e:	f001 f893 	bl	b55c8 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]);
   b44a2:	f000 ff49 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b44a6:	f8d4 2001 	ldr.w	r2, [r4, #1]
   b44aa:	ba12      	rev	r2, r2
   b44ac:	17d3      	asrs	r3, r2, #31
   b44ae:	f001 f927 	bl	b5700 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI((buf[5] << 8 | buf[6]) - 65535);
   b44b2:	f000 ff41 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b44b6:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b44ba:	ba49      	rev16	r1, r1
   b44bc:	3101      	adds	r1, #1
   b44be:	b289      	uxth	r1, r1
   b44c0:	f001 f80f 	bl	b54e2 <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b44c4:	f000 ff38 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b44c8:	f000 ffbb 	bl	b5442 <_ZNK17currentStatusData14get_nodeNumberEv>
   b44cc:	4905      	ldr	r1, [pc, #20]	; (b44e4 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x50>)
   b44ce:	4602      	mov	r2, r0
   b44d0:	4805      	ldr	r0, [pc, #20]	; (b44e8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b44d2:	f7ff fe03 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b44d6:	4b05      	ldr	r3, [pc, #20]	; (b44ec <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b44d8:	2206      	movs	r2, #6
   b44da:	701a      	strb	r2, [r3, #0]

	return true;
}
   b44dc:	2001      	movs	r0, #1
   b44de:	bd10      	pop	{r4, pc}
   b44e0:	2003df50 	.word	0x2003df50
   b44e4:	000bf2ed 	.word	0x000bf2ed
   b44e8:	2003e658 	.word	0x2003e658
   b44ec:	2003df48 	.word	0x2003df48

000b44f0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b44f0:	b570      	push	{r4, r5, r6, lr}
   b44f2:	b08a      	sub	sp, #40	; 0x28
	uint8_t len = sizeof(buf);
   b44f4:	2332      	movs	r3, #50	; 0x32
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag))	{	// We have received a message
   b44f6:	2500      	movs	r5, #0
	uint8_t len = sizeof(buf);
   b44f8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag))	{	// We have received a message
   b44fc:	4c2f      	ldr	r4, [pc, #188]	; (b45bc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xcc>)
   b44fe:	4830      	ldr	r0, [pc, #192]	; (b45c0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xd0>)
   b4500:	9504      	str	r5, [sp, #16]
   b4502:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   b4506:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b450a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   b450e:	9300      	str	r3, [sp, #0]
   b4510:	9501      	str	r5, [sp, #4]
   b4512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4516:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   b451a:	4621      	mov	r1, r4
   b451c:	f004 fcd8 	bl	b8ed0 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   b4520:	4606      	mov	r6, r0
   b4522:	b910      	cbnz	r0, b452a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false; 
   b4524:	2000      	movs	r0, #0
}
   b4526:	b00a      	add	sp, #40	; 0x28
   b4528:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b452a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b452e:	54e5      	strb	r5, [r4, r3]
		current.set_deviceID(buf[0] << 8 | buf[1]);					// Set the current device ID for reporting
   b4530:	f000 ff02 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4534:	8821      	ldrh	r1, [r4, #0]
   b4536:	ba49      	rev16	r1, r1
   b4538:	b289      	uxth	r1, r1
   b453a:	f000 ffc6 	bl	b54ca <_ZN17currentStatusData12set_deviceIDEt>
		current.set_nodeNumber(buf[2] << 8 | buf[3]);
   b453e:	f000 fefb 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4542:	8861      	ldrh	r1, [r4, #2]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4544:	4c1f      	ldr	r4, [pc, #124]	; (b45c4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xd4>)
		current.set_nodeNumber(buf[2] << 8 | buf[3]);
   b4546:	ba49      	rev16	r1, r1
   b4548:	b289      	uxth	r1, r1
   b454a:	f000 ffc4 	bl	b54d6 <_ZN17currentStatusData14set_nodeNumberEt>
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b454e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   b4552:	f003 030f 	and.w	r3, r3, #15
   b4556:	7023      	strb	r3, [r4, #0]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d and waited for %lu mSec", current.get_nodeNumber(), driver.lastRssi(), loraStateNames[lora_state], len, waitingFor);
   b4558:	f000 feee 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b455c:	f000 ff71 	bl	b5442 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4560:	9007      	str	r0, [sp, #28]
   b4562:	4819      	ldr	r0, [pc, #100]	; (b45c8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xd8>)
   b4564:	f004 f995 	bl	b8892 <_ZN15RHGenericDriver8lastRssiEv>
   b4568:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
   b456c:	9101      	str	r1, [sp, #4]
   b456e:	9502      	str	r5, [sp, #8]
   b4570:	4603      	mov	r3, r0
   b4572:	4916      	ldr	r1, [pc, #88]	; (b45cc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xdc>)
   b4574:	7820      	ldrb	r0, [r4, #0]
   b4576:	9a07      	ldr	r2, [sp, #28]
   b4578:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b457c:	9100      	str	r1, [sp, #0]
   b457e:	4814      	ldr	r0, [pc, #80]	; (b45d0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xe0>)
   b4580:	4914      	ldr	r1, [pc, #80]	; (b45d4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xe4>)
   b4582:	f7ff fdab 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(LoRA_Functions::instance().decipherDataReportGateway()) return true;}
   b4586:	7823      	ldrb	r3, [r4, #0]
   b4588:	2b03      	cmp	r3, #3
   b458a:	d008      	beq.n	b459e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xae>
		if (lora_state == JOIN_REQ) { if(LoRA_Functions::instance().decipherJoinRequestGateway()) return true;}
   b458c:	7823      	ldrb	r3, [r4, #0]
   b458e:	2b01      	cmp	r3, #1
   b4590:	d10c      	bne.n	b45ac <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xbc>
   b4592:	f7ff fdbb 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
	lora_state = JOIN_ACK;			// Prepare to respond
   b4596:	2302      	movs	r3, #2
   b4598:	7023      	strb	r3, [r4, #0]
		if (lora_state == JOIN_REQ) { if(LoRA_Functions::instance().decipherJoinRequestGateway()) return true;}
   b459a:	4630      	mov	r0, r6
   b459c:	e7c3      	b.n	b4526 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		if (lora_state == DATA_RPT) { if(LoRA_Functions::instance().decipherDataReportGateway()) return true;}
   b459e:	f7ff fdb5 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b45a2:	f7ff fe3b 	bl	b421c <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
   b45a6:	2800      	cmp	r0, #0
   b45a8:	d0f0      	beq.n	b458c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x9c>
   b45aa:	e7bc      	b.n	b4526 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		if (lora_state == ALERT_RPT) { if(LoRA_Functions::instance().decipherAlertReportGateway()) return true;}
   b45ac:	2b05      	cmp	r3, #5
   b45ae:	d1b9      	bne.n	b4524 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
   b45b0:	f7ff fdac 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b45b4:	f7ff ff6e 	bl	b4494 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b45b8:	e7b5      	b.n	b4526 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
   b45ba:	bf00      	nop
   b45bc:	2003df50 	.word	0x2003df50
   b45c0:	2003e0b4 	.word	0x2003e0b4
   b45c4:	2003df48 	.word	0x2003df48
   b45c8:	2003df84 	.word	0x2003df84
   b45cc:	2003dd50 	.word	0x2003dd50
   b45d0:	2003e658 	.word	0x2003e658
   b45d4:	000bf312 	.word	0x000bf312

000b45d8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi>:

bool LoRA_Functions::acknowledgeAlertReportGateway(int nextSeconds) {
   b45d8:	b5f0      	push	{r4, r5, r6, r7, lr}


	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = 0;									// Reserved
   b45da:	4c2e      	ldr	r4, [pc, #184]	; (b4694 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xbc>)
	Log.info("Preparing acknowledgement with %i seconds",nextSecondsShort);
   b45dc:	482e      	ldr	r0, [pc, #184]	; (b4698 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xc0>)
   b45de:	b28f      	uxth	r7, r1
bool LoRA_Functions::acknowledgeAlertReportGateway(int nextSeconds) {
   b45e0:	b087      	sub	sp, #28
	Log.info("Preparing acknowledgement with %i seconds",nextSecondsShort);
   b45e2:	463a      	mov	r2, r7
bool LoRA_Functions::acknowledgeAlertReportGateway(int nextSeconds) {
   b45e4:	460e      	mov	r6, r1
	buf[0] = 0;									// Reserved
   b45e6:	2500      	movs	r5, #0
	Log.info("Preparing acknowledgement with %i seconds",nextSecondsShort);
   b45e8:	492c      	ldr	r1, [pc, #176]	; (b469c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xc4>)
   b45ea:	f7ff fd77 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = 0;									// Reserved
   b45ee:	7025      	strb	r5, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b45f0:	f009 fa8f 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b45f4:	1600      	asrs	r0, r0, #24
   b45f6:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b45f8:	f009 fa8b 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b45fc:	1400      	asrs	r0, r0, #16
   b45fe:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b4600:	f009 fa87 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b4604:	1200      	asrs	r0, r0, #8
   b4606:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   b4608:	f009 fa83 	bl	bdb12 <_ZN9TimeClass3nowEv>
	buf[5] = highByte(nextSecondsShort);		// Seconds until next report - for Nodes
   b460c:	f3c6 2307 	ubfx	r3, r6, #8, #8
   b4610:	7163      	strb	r3, [r4, #5]
	buf[6] = lowByte(nextSecondsShort);
   b4612:	71a6      	strb	r6, [r4, #6]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   b4614:	7120      	strb	r0, [r4, #4]
	
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", current.get_nodeNumber(), Time.timeStr(Time.now()).c_str(), nextSecondsShort);
   b4616:	f000 fe8f 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b461a:	f000 ff12 	bl	b5442 <_ZNK17currentStatusData14get_nodeNumberEv>
   b461e:	4606      	mov	r6, r0
   b4620:	f009 fa77 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b4624:	4602      	mov	r2, r0
   b4626:	17c3      	asrs	r3, r0, #31
   b4628:	a802      	add	r0, sp, #8
   b462a:	f009 f96d 	bl	bd908 <_ZN9TimeClass7timeStrEx>
   b462e:	4632      	mov	r2, r6
   b4630:	9b02      	ldr	r3, [sp, #8]
   b4632:	491b      	ldr	r1, [pc, #108]	; (b46a0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xc8>)
   b4634:	4818      	ldr	r0, [pc, #96]	; (b4698 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xc0>)
   b4636:	9700      	str	r7, [sp, #0]
   b4638:	f7ff fd50 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b463c:	a802      	add	r0, sp, #8
   b463e:	f008 fec9 	bl	bd3d4 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4642:	4b18      	ldr	r3, [pc, #96]	; (b46a4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xcc>)
   b4644:	881e      	ldrh	r6, [r3, #0]
   b4646:	2101      	movs	r1, #1
   b4648:	4630      	mov	r0, r6
   b464a:	f009 fc72 	bl	bdf32 <digitalWrite>

	if (manager.sendtoWait(buf, 7, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b464e:	f000 fe73 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4652:	f000 fef6 	bl	b5442 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4656:	2306      	movs	r3, #6
   b4658:	9300      	str	r3, [sp, #0]
   b465a:	4621      	mov	r1, r4
   b465c:	b2c3      	uxtb	r3, r0
   b465e:	2207      	movs	r2, #7
   b4660:	4811      	ldr	r0, [pc, #68]	; (b46a8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xd0>)
   b4662:	f004 fb31 	bl	b8cc8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4666:	4604      	mov	r4, r0
   b4668:	b950      	cbnz	r0, b4680 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xa8>
		Log.info("Response received successfully");
   b466a:	4910      	ldr	r1, [pc, #64]	; (b46ac <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xd4>)
   b466c:	480a      	ldr	r0, [pc, #40]	; (b4698 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xc0>)
   b466e:	f7ff fd35 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4672:	4630      	mov	r0, r6
   b4674:	4621      	mov	r1, r4
   b4676:	f009 fc5c 	bl	bdf32 <digitalWrite>
		// driver.sleep();                             // Here is where we will power down the LoRA radio module
		return true;
   b467a:	2001      	movs	r0, #1

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	// driver.sleep();                             // Here is where we will power down the LoRA radio module
	return false;
}
   b467c:	b007      	add	sp, #28
   b467e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Log.info("Response not acknowledged");
   b4680:	490b      	ldr	r1, [pc, #44]	; (b46b0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xd8>)
   b4682:	4805      	ldr	r0, [pc, #20]	; (b4698 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xc0>)
   b4684:	f7ff fd2a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b4688:	4630      	mov	r0, r6
   b468a:	4629      	mov	r1, r5
   b468c:	f009 fc51 	bl	bdf32 <digitalWrite>
	return false;
   b4690:	4628      	mov	r0, r5
   b4692:	e7f3      	b.n	b467c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi+0xa4>
   b4694:	2003df50 	.word	0x2003df50
   b4698:	2003e658 	.word	0x2003e658
   b469c:	000bf369 	.word	0x000bf369
   b46a0:	000bf2af 	.word	0x000bf2af
   b46a4:	000bf738 	.word	0x000bf738
   b46a8:	2003e0b4 	.word	0x2003e0b4
   b46ac:	000bf276 	.word	0x000bf276
   b46b0:	000bf295 	.word	0x000bf295

000b46b4 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi>:
bool LoRA_Functions::respondForLoRAMessageGateway(int nextSeconds) {
   b46b4:	b538      	push	{r3, r4, r5, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b46b6:	4d15      	ldr	r5, [pc, #84]	; (b470c <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x58>)
   b46b8:	4b15      	ldr	r3, [pc, #84]	; (b4710 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x5c>)
   b46ba:	782a      	ldrb	r2, [r5, #0]
   b46bc:	4815      	ldr	r0, [pc, #84]	; (b4714 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x60>)
   b46be:	eb03 1202 	add.w	r2, r3, r2, lsl #4
bool LoRA_Functions::respondForLoRAMessageGateway(int nextSeconds) {
   b46c2:	460c      	mov	r4, r1
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b46c4:	4914      	ldr	r1, [pc, #80]	; (b4718 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x64>)
   b46c6:	f7ff fd09 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway(nextSeconds)) return true;}
   b46ca:	782b      	ldrb	r3, [r5, #0]
   b46cc:	2b04      	cmp	r3, #4
   b46ce:	d00d      	beq.n	b46ec <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x38>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway(nextSeconds)) return true;}
   b46d0:	782b      	ldrb	r3, [r5, #0]
   b46d2:	2b02      	cmp	r3, #2
   b46d4:	d105      	bne.n	b46e2 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x2e>
   b46d6:	f7ff fd19 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b46da:	4621      	mov	r1, r4
   b46dc:	f7ff fe62 	bl	b43a4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEi>
   b46e0:	b958      	cbnz	r0, b46fa <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x46>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway(nextSeconds)) return true;}
   b46e2:	782b      	ldrb	r3, [r5, #0]
   b46e4:	2b06      	cmp	r3, #6
   b46e6:	d00a      	beq.n	b46fe <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x4a>
	return false; 
   b46e8:	2000      	movs	r0, #0
   b46ea:	e007      	b.n	b46fc <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x48>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway(nextSeconds)) return true;}
   b46ec:	f7ff fd0e 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b46f0:	4621      	mov	r1, r4
   b46f2:	f7ff fde5 	bl	b42c0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEi>
   b46f6:	2800      	cmp	r0, #0
   b46f8:	d0ea      	beq.n	b46d0 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi+0x1c>
   b46fa:	2001      	movs	r0, #1
}
   b46fc:	bd38      	pop	{r3, r4, r5, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway(nextSeconds)) return true;}
   b46fe:	f7ff fd05 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4702:	4621      	mov	r1, r4
}
   b4704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway(nextSeconds)) return true;}
   b4708:	f7ff bf66 	b.w	b45d8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEi>
   b470c:	2003df48 	.word	0x2003df48
   b4710:	2003dd50 	.word	0x2003dd50
   b4714:	2003e658 	.word	0x2003e658
   b4718:	000bf393 	.word	0x000bf393

000b471c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
	sysStatus.set_nextReportSeconds((buf[5] << 8) | buf[6]);
	Time.setTime(newTime);  // Set time based on response from gateway
	Log.info("Time set to %s, node is %d and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.get_nodeNumber(), sysStatus.get_nextReportSeconds());
	return true;
}
   b471c:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b471e:	4a08      	ldr	r2, [pc, #32]	; (b4740 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b4720:	4c08      	ldr	r4, [pc, #32]	; (b4744 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b4722:	4909      	ldr	r1, [pc, #36]	; (b4748 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b4724:	7812      	ldrb	r2, [r2, #0]
   b4726:	7809      	ldrb	r1, [r1, #0]
   b4728:	4b08      	ldr	r3, [pc, #32]	; (b474c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b472a:	4620      	mov	r0, r4
   b472c:	f004 fff0 	bl	b9710 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4730:	4621      	mov	r1, r4
   b4732:	4807      	ldr	r0, [pc, #28]	; (b4750 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b4734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4738:	2200      	movs	r2, #0
   b473a:	f004 babb 	b.w	b8cb4 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b473e:	bf00      	nop
   b4740:	000bf73e 	.word	0x000bf73e
   b4744:	2003df84 	.word	0x2003df84
   b4748:	000bf73c 	.word	0x000bf73c
   b474c:	2003e45c 	.word	0x2003e45c
   b4750:	2003e0b4 	.word	0x2003e0b4

000b4754 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4754:	4b01      	ldr	r3, [pc, #4]	; (b475c <_Z18outOfMemoryHandleryi+0x8>)
   b4756:	601a      	str	r2, [r3, #0]
}
   b4758:	4770      	bx	lr
   b475a:	bf00      	nop
   b475c:	2003ddc8 	.word	0x2003ddc8

000b4760 <_Z13userSwitchISRv>:

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b4760:	4b01      	ldr	r3, [pc, #4]	; (b4768 <_Z13userSwitchISRv+0x8>)
   b4762:	2201      	movs	r2, #1
   b4764:	701a      	strb	r2, [r3, #0]
}
   b4766:	4770      	bx	lr
   b4768:	2003e3e1 	.word	0x2003e3e1

000b476c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b476c:	b530      	push	{r4, r5, lr}
   b476e:	b085      	sub	sp, #20
   b4770:	4604      	mov	r4, r0
   b4772:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4774:	b160      	cbz	r0, b4790 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b4776:	6840      	ldr	r0, [r0, #4]
   b4778:	b150      	cbz	r0, b4790 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b477a:	6885      	ldr	r5, [r0, #8]
   b477c:	b145      	cbz	r5, b4790 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b477e:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4782:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4786:	68c4      	ldr	r4, [r0, #12]
   b4788:	ab01      	add	r3, sp, #4
   b478a:	466a      	mov	r2, sp
   b478c:	a902      	add	r1, sp, #8
   b478e:	47a0      	blx	r4
    }
   b4790:	b005      	add	sp, #20
   b4792:	bd30      	pop	{r4, r5, pc}

000b4794 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4794:	b530      	push	{r4, r5, lr}
   b4796:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4798:	6800      	ldr	r0, [r0, #0]
   b479a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b47a2:	6883      	ldr	r3, [r0, #8]
   b47a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b47a8:	b90b      	cbnz	r3, b47ae <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b47aa:	f009 fcc5 	bl	be138 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b47ae:	68c3      	ldr	r3, [r0, #12]
   b47b0:	aa01      	add	r2, sp, #4
   b47b2:	a902      	add	r1, sp, #8
   b47b4:	4798      	blx	r3
      }
   b47b6:	b005      	add	sp, #20
   b47b8:	bd30      	pop	{r4, r5, pc}

000b47ba <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b47ba:	2a01      	cmp	r2, #1
   b47bc:	d102      	bne.n	b47c4 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b47be:	6001      	str	r1, [r0, #0]
      }
   b47c0:	2000      	movs	r0, #0
   b47c2:	4770      	bx	lr
	  switch (__op)
   b47c4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b47c6:	bf04      	itt	eq
   b47c8:	680b      	ldreq	r3, [r1, #0]
   b47ca:	6003      	streq	r3, [r0, #0]
	      break;
   b47cc:	e7f8      	b.n	b47c0 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b47ce <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b47ce:	6803      	ldr	r3, [r0, #0]
   b47d0:	6812      	ldr	r2, [r2, #0]
   b47d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   b47d6:	4718      	bx	r3

000b47d8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b47d8:	b510      	push	{r4, lr}
      if (_M_manager)
   b47da:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b47dc:	4604      	mov	r4, r0
      if (_M_manager)
   b47de:	b113      	cbz	r3, b47e6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b47e0:	2203      	movs	r2, #3
   b47e2:	4601      	mov	r1, r0
   b47e4:	4798      	blx	r3
    }
   b47e6:	4620      	mov	r0, r4
   b47e8:	bd10      	pop	{r4, pc}

000b47ea <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b47ea:	b510      	push	{r4, lr}
            delete callableWrapper;
   b47ec:	4604      	mov	r4, r0
   b47ee:	b138      	cbz	r0, b4800 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b47f0:	f7ff fff2 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   b47f4:	4620      	mov	r0, r4
   b47f6:	2110      	movs	r1, #16
        };
   b47f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b47fc:	f7ff bc4f 	b.w	b409e <_ZdlPvj>
        };
   b4800:	bd10      	pop	{r4, pc}
	...

000b4804 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4804:	b530      	push	{r4, r5, lr}
   b4806:	b085      	sub	sp, #20
	unsigned long secondsToReturn = 0;
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4808:	f000 fd46 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b480c:	f000 fe0f 	bl	b542e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4810:	4605      	mov	r5, r0
   	if (Time.isValid()) {
   b4812:	f009 f961 	bl	bdad8 <_ZN9TimeClass7isValidEv>
   b4816:	4604      	mov	r4, r0
   b4818:	b1d0      	cbz	r0, b4850 <_Z21secondsUntilNextEventv+0x4c>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // Adding one second to reduce prospect of round tripping to IDLE
   b481a:	f009 f97a 	bl	bdb12 <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b481e:	243c      	movs	r4, #60	; 0x3c
   b4820:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // Adding one second to reduce prospect of round tripping to IDLE
   b4822:	fbb0 f4f5 	udiv	r4, r0, r5
   b4826:	fb04 0015 	mls	r0, r4, r5, r0
   b482a:	1a2c      	subs	r4, r5, r0
        Log.info("local time: %s and next event is %lu seconds away", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str(), secondsToReturn);
   b482c:	4b0a      	ldr	r3, [pc, #40]	; (b4858 <_Z21secondsUntilNextEventv+0x54>)
   b482e:	490b      	ldr	r1, [pc, #44]	; (b485c <_Z21secondsUntilNextEventv+0x58>)
   b4830:	681a      	ldr	r2, [r3, #0]
   b4832:	42ac      	cmp	r4, r5
   b4834:	bf28      	it	cs
   b4836:	462c      	movcs	r4, r5
   b4838:	4668      	mov	r0, sp
   b483a:	f002 feff 	bl	b763c <_ZN16LocalTimeConvert6formatEPKc>
   b483e:	4808      	ldr	r0, [pc, #32]	; (b4860 <_Z21secondsUntilNextEventv+0x5c>)
   b4840:	9a00      	ldr	r2, [sp, #0]
   b4842:	4908      	ldr	r1, [pc, #32]	; (b4864 <_Z21secondsUntilNextEventv+0x60>)
   b4844:	4623      	mov	r3, r4
   b4846:	f7ff fc49 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b484a:	4668      	mov	r0, sp
   b484c:	f008 fdc2 	bl	bd3d4 <_ZN6StringD1Ev>
    }
	return secondsToReturn;
}
   b4850:	4620      	mov	r0, r4
   b4852:	b005      	add	sp, #20
   b4854:	bd30      	pop	{r4, r5, pc}
   b4856:	bf00      	nop
   b4858:	2003ded4 	.word	0x2003ded4
   b485c:	2003e2b8 	.word	0x2003e2b8
   b4860:	2003e658 	.word	0x2003e658
   b4864:	000bf3c8 	.word	0x000bf3c8

000b4868 <_Z22publishStateTransitionv>:
{
   b4868:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b486a:	4e1c      	ldr	r6, [pc, #112]	; (b48dc <_Z22publishStateTransitionv+0x74>)
   b486c:	4c1c      	ldr	r4, [pc, #112]	; (b48e0 <_Z22publishStateTransitionv+0x78>)
   b486e:	7832      	ldrb	r2, [r6, #0]
   b4870:	4d1c      	ldr	r5, [pc, #112]	; (b48e4 <_Z22publishStateTransitionv+0x7c>)
   b4872:	2a02      	cmp	r2, #2
{
   b4874:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b4876:	d128      	bne.n	b48ca <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4878:	f009 f92e 	bl	bdad8 <_ZN9TimeClass7isValidEv>
   b487c:	7832      	ldrb	r2, [r6, #0]
   b487e:	782b      	ldrb	r3, [r5, #0]
   b4880:	b958      	cbnz	r0, b489a <_Z22publishStateTransitionv+0x32>
   b4882:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4886:	9200      	str	r2, [sp, #0]
   b4888:	4a17      	ldr	r2, [pc, #92]	; (b48e8 <_Z22publishStateTransitionv+0x80>)
   b488a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b488e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4892:	a804      	add	r0, sp, #16
   b4894:	f006 fa5a 	bl	bad4c <snprintf>
   b4898:	e00f      	b.n	b48ba <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b489a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b489e:	9303      	str	r3, [sp, #12]
   b48a0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b48a4:	f7ff ffae 	bl	b4804 <_Z21secondsUntilNextEventv>
   b48a8:	9b03      	ldr	r3, [sp, #12]
   b48aa:	4a10      	ldr	r2, [pc, #64]	; (b48ec <_Z22publishStateTransitionv+0x84>)
   b48ac:	e9cd 4000 	strd	r4, r0, [sp]
   b48b0:	f44f 7180 	mov.w	r1, #256	; 0x100
   b48b4:	a804      	add	r0, sp, #16
   b48b6:	f006 fa49 	bl	bad4c <snprintf>
	oldState = state;
   b48ba:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b48bc:	480c      	ldr	r0, [pc, #48]	; (b48f0 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b48be:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b48c0:	a904      	add	r1, sp, #16
   b48c2:	f7ff fc0b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
}
   b48c6:	b044      	add	sp, #272	; 0x110
   b48c8:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b48ca:	782b      	ldrb	r3, [r5, #0]
   b48cc:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b48d0:	9200      	str	r2, [sp, #0]
   b48d2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b48d6:	4a07      	ldr	r2, [pc, #28]	; (b48f4 <_Z22publishStateTransitionv+0x8c>)
   b48d8:	e7d9      	b.n	b488e <_Z22publishStateTransitionv+0x26>
   b48da:	bf00      	nop
   b48dc:	2003e3e0 	.word	0x2003e3e0
   b48e0:	2003ddcc 	.word	0x2003ddcc
   b48e4:	2003e3a9 	.word	0x2003e3a9
   b48e8:	000bf3fa 	.word	0x000bf3fa
   b48ec:	000bf41a 	.word	0x000bf41a
   b48f0:	2003e658 	.word	0x2003e658
   b48f4:	000bf437 	.word	0x000bf437

000b48f8 <loop>:
void loop() {
   b48f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b48fc:	4d98      	ldr	r5, [pc, #608]	; (b4b60 <loop+0x268>)
void loop() {
   b48fe:	ed2d 8b02 	vpush	{d8}
   b4902:	782b      	ldrb	r3, [r5, #0]
   b4904:	3b01      	subs	r3, #1
   b4906:	b0d1      	sub	sp, #324	; 0x144
   b4908:	2b06      	cmp	r3, #6
   b490a:	d817      	bhi.n	b493c <loop+0x44>
   b490c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4910:	000701ed 	.word	0x000701ed
   b4914:	00d90031 	.word	0x00d90031
   b4918:	01d301ac 	.word	0x01d301ac
   b491c:	014e      	.short	0x014e
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b491e:	4b91      	ldr	r3, [pc, #580]	; (b4b64 <loop+0x26c>)
   b4920:	781b      	ldrb	r3, [r3, #0]
   b4922:	2b02      	cmp	r3, #2
   b4924:	d001      	beq.n	b492a <loop+0x32>
   b4926:	f7ff ff9f 	bl	b4868 <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b492a:	4b8f      	ldr	r3, [pc, #572]	; (b4b68 <loop+0x270>)
   b492c:	781a      	ldrb	r2, [r3, #0]
   b492e:	b11a      	cbz	r2, b4938 <loop+0x40>
				nextEventTime = false;
   b4930:	2200      	movs	r2, #0
   b4932:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b4934:	2304      	movs	r3, #4
   b4936:	e000      	b.n	b493a <loop+0x42>
			else state = SLEEPING_STATE;
   b4938:	2303      	movs	r3, #3
   b493a:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b493c:	488b      	ldr	r0, [pc, #556]	; (b4b6c <loop+0x274>)
   b493e:	f002 f921 	bl	b6b84 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b4942:	f003 fa81 	bl	b7e48 <_ZN17PublishQueuePosix8instanceEv>
   b4946:	f003 f971 	bl	b7c2c <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b494a:	f000 fcf5 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b494e:	f000 fd03 	bl	b5358 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4952:	f000 fca1 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4956:	f000 fcc7 	bl	b52e8 <_ZN13sysStatusData4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b495a:	4b85      	ldr	r3, [pc, #532]	; (b4b70 <loop+0x278>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	2b00      	cmp	r3, #0
   b4960:	f2c0 81f7 	blt.w	b4d52 <loop+0x45a>
}
   b4964:	b051      	add	sp, #324	; 0x144
   b4966:	ecbd 8b02 	vpop	{d8}
   b496a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b496e:	f008 bee4 	b.w	bd73a <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4972:	4b7c      	ldr	r3, [pc, #496]	; (b4b64 <loop+0x26c>)
   b4974:	781b      	ldrb	r3, [r3, #0]
   b4976:	2b03      	cmp	r3, #3
   b4978:	d001      	beq.n	b497e <loop+0x86>
   b497a:	f7ff ff75 	bl	b4868 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b497e:	2100      	movs	r1, #0
   b4980:	487a      	ldr	r0, [pc, #488]	; (b4b6c <loop+0x274>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4982:	4c7c      	ldr	r4, [pc, #496]	; (b4b74 <loop+0x27c>)
   b4984:	f001 fd52 	bl	b642c <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b4988:	f7ff ff3c 	bl	b4804 <_Z21secondsUntilNextEventv>
   b498c:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b498e:	f009 f8c0 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b4992:	19c2      	adds	r2, r0, r7
   b4994:	17d3      	asrs	r3, r2, #31
   b4996:	a810      	add	r0, sp, #64	; 0x40
   b4998:	f008 ffb6 	bl	bd908 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b499c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b499e:	930b      	str	r3, [sp, #44]	; 0x2c
   b49a0:	f008 ff2e 	bl	bd800 <_ZN11SystemClass10freeMemoryEv>
   b49a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b49a6:	4974      	ldr	r1, [pc, #464]	; (b4b78 <loop+0x280>)
   b49a8:	9000      	str	r0, [sp, #0]
   b49aa:	463a      	mov	r2, r7
   b49ac:	4873      	ldr	r0, [pc, #460]	; (b4b7c <loop+0x284>)
   b49ae:	f7ff fb95 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b49b2:	a810      	add	r0, sp, #64	; 0x40
   b49b4:	f008 fd0e 	bl	bd3d4 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b49b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b49bc:	f006 fa1e 	bl	badfc <delay>
   b49c0:	7d23      	ldrb	r3, [r4, #20]
   b49c2:	2b00      	cmp	r3, #0
   b49c4:	d050      	beq.n	b4a68 <loop+0x170>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b49c6:	2302      	movs	r3, #2
   b49c8:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b49ca:	4b6d      	ldr	r3, [pc, #436]	; (b4b80 <loop+0x288>)
   b49cc:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b49d0:	6823      	ldr	r3, [r4, #0]
   b49d2:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b49d4:	b1f3      	cbz	r3, b4a14 <loop+0x11c>
            if (start->type == type) {
   b49d6:	889a      	ldrh	r2, [r3, #4]
   b49d8:	2a01      	cmp	r2, #1
   b49da:	d006      	beq.n	b49ea <loop+0xf2>
            start = start->next;
   b49dc:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b49de:	e7f9      	b.n	b49d4 <loop+0xdc>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b49e0:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b49e2:	b1bb      	cbz	r3, b4a14 <loop+0x11c>
            if (start->type == type) {
   b49e4:	889a      	ldrh	r2, [r3, #4]
   b49e6:	2a01      	cmp	r2, #1
   b49e8:	d1fa      	bne.n	b49e0 <loop+0xe8>
                if (gpioWakeup->pin == pin) {
   b49ea:	899a      	ldrh	r2, [r3, #12]
   b49ec:	4542      	cmp	r2, r8
   b49ee:	d1f7      	bne.n	b49e0 <loop+0xe8>
                    gpioWakeup->mode = mode;
   b49f0:	2200      	movs	r2, #0
   b49f2:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b49f4:	7d23      	ldrb	r3, [r4, #20]
   b49f6:	2b00      	cmp	r3, #0
   b49f8:	d036      	beq.n	b4a68 <loop+0x170>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b49fa:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b49fc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b4a00:	68db      	ldr	r3, [r3, #12]
   b4a02:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b4a06:	b1db      	cbz	r3, b4a40 <loop+0x148>
            if (start->type == type) {
   b4a08:	889a      	ldrh	r2, [r3, #4]
   b4a0a:	2a04      	cmp	r2, #4
   b4a0c:	f000 819c 	beq.w	b4d48 <loop+0x450>
            start = start->next;
   b4a10:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4a12:	e7f8      	b.n	b4a06 <loop+0x10e>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4a14:	495b      	ldr	r1, [pc, #364]	; (b4b84 <loop+0x28c>)
   b4a16:	2010      	movs	r0, #16
   b4a18:	f009 fb84 	bl	be124 <_ZnwjRKSt9nothrow_t>
   b4a1c:	4606      	mov	r6, r0
   b4a1e:	2800      	cmp	r0, #0
   b4a20:	f000 8195 	beq.w	b4d4e <loop+0x456>
   b4a24:	2210      	movs	r2, #16
   b4a26:	2100      	movs	r1, #0
   b4a28:	f00a f8b8 	bl	beb9c <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4a2c:	4b56      	ldr	r3, [pc, #344]	; (b4b88 <loop+0x290>)
   b4a2e:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4a30:	2301      	movs	r3, #1
   b4a32:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4a34:	6923      	ldr	r3, [r4, #16]
   b4a36:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b4a38:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4a3c:	6126      	str	r6, [r4, #16]
   b4a3e:	e7d9      	b.n	b49f4 <loop+0xfc>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4a40:	4950      	ldr	r1, [pc, #320]	; (b4b84 <loop+0x28c>)
   b4a42:	2010      	movs	r0, #16
   b4a44:	f009 fb6e 	bl	be124 <_ZnwjRKSt9nothrow_t>
   b4a48:	4606      	mov	r6, r0
   b4a4a:	2800      	cmp	r0, #0
   b4a4c:	f000 817f 	beq.w	b4d4e <loop+0x456>
   b4a50:	2210      	movs	r2, #16
   b4a52:	2100      	movs	r1, #0
   b4a54:	f00a f8a2 	bl	beb9c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4a58:	4b4b      	ldr	r3, [pc, #300]	; (b4b88 <loop+0x290>)
   b4a5a:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4a5c:	2304      	movs	r3, #4
   b4a5e:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4a60:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4a62:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b4a64:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b4a68:	4942      	ldr	r1, [pc, #264]	; (b4b74 <loop+0x27c>)
   b4a6a:	a80d      	add	r0, sp, #52	; 0x34
   b4a6c:	f008 fe68 	bl	bd740 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4a74:	483d      	ldr	r0, [pc, #244]	; (b4b6c <loop+0x274>)
   b4a76:	f001 fcd9 	bl	b642c <_ZN6AB18056setWDTEi>
			state = IDLE_STATE;
   b4a7a:	2302      	movs	r3, #2
   b4a7c:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b4a7e:	4b3a      	ldr	r3, [pc, #232]	; (b4b68 <loop+0x270>)
   b4a80:	2201      	movs	r2, #1
			delay(5000);
   b4a82:	f241 3088 	movw	r0, #5000	; 0x1388
			nextEventTime = true;
   b4a86:	701a      	strb	r2, [r3, #0]
			delay(5000);
   b4a88:	f006 f9b8 	bl	badfc <delay>
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b4a8c:	f009 f841 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b4a90:	19c2      	adds	r2, r0, r7
   b4a92:	17d3      	asrs	r3, r2, #31
   b4a94:	a810      	add	r0, sp, #64	; 0x40
   b4a96:	f008 ff37 	bl	bd908 <_ZN9TimeClass7timeStrEx>
   b4a9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4a9c:	920b      	str	r2, [sp, #44]	; 0x2c
   b4a9e:	f008 feaf 	bl	bd800 <_ZN11SystemClass10freeMemoryEv>
   b4aa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4aa4:	4939      	ldr	r1, [pc, #228]	; (b4b8c <loop+0x294>)
   b4aa6:	4603      	mov	r3, r0
   b4aa8:	4834      	ldr	r0, [pc, #208]	; (b4b7c <loop+0x284>)
   b4aaa:	f7ff fb17 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4aae:	a810      	add	r0, sp, #64	; 0x40
   b4ab0:	f008 fc90 	bl	bd3d4 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b4ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
   b4ab6:	2800      	cmp	r0, #0
   b4ab8:	f43f af40 	beq.w	b493c <loop+0x44>
            free(wakeupSource_);
   b4abc:	f006 f926 	bl	bad0c <free>
		} break;
   b4ac0:	e73c      	b.n	b493c <loop+0x44>
			if (state != oldState) {
   b4ac2:	4b28      	ldr	r3, [pc, #160]	; (b4b64 <loop+0x26c>)
   b4ac4:	4e32      	ldr	r6, [pc, #200]	; (b4b90 <loop+0x298>)
   b4ac6:	781b      	ldrb	r3, [r3, #0]
   b4ac8:	2b04      	cmp	r3, #4
   b4aca:	d00a      	beq.n	b4ae2 <loop+0x1ea>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b4acc:	2b07      	cmp	r3, #7
   b4ace:	d002      	beq.n	b4ad6 <loop+0x1de>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4ad0:	f005 fd88 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
   b4ad4:	6030      	str	r0, [r6, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4ad6:	f7ff fec7 	bl	b4868 <_Z22publishStateTransitionv>
				Log.info("Gateway is listening for LoRA messages");
   b4ada:	492e      	ldr	r1, [pc, #184]	; (b4b94 <loop+0x29c>)
   b4adc:	4827      	ldr	r0, [pc, #156]	; (b4b7c <loop+0x284>)
   b4ade:	f7ff fafd 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b4ae2:	f7ff fb13 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4ae6:	f7ff fd03 	bl	b44f0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b4aea:	b310      	cbz	r0, b4b32 <loop+0x23a>
				if (frequencyUpdated) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b4aec:	4b2a      	ldr	r3, [pc, #168]	; (b4b98 <loop+0x2a0>)
   b4aee:	781a      	ldrb	r2, [r3, #0]
   b4af0:	b182      	cbz	r2, b4b14 <loop+0x21c>
					frequencyUpdated = false;
   b4af2:	2200      	movs	r2, #0
   b4af4:	701a      	strb	r2, [r3, #0]
					sysStatus.set_frequencyMinutes(updatedFrequencyMins);			// This was the temporary value from the particle function
   b4af6:	f000 fbcf 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4afa:	4b28      	ldr	r3, [pc, #160]	; (b4b9c <loop+0x2a4>)
   b4afc:	8819      	ldrh	r1, [r3, #0]
   b4afe:	f000 fcde 	bl	b54be <_ZN13sysStatusData20set_frequencyMinutesEt>
					Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b4b02:	f000 fbc9 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4b06:	f000 fc92 	bl	b542e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4b0a:	4925      	ldr	r1, [pc, #148]	; (b4ba0 <loop+0x2a8>)
   b4b0c:	4602      	mov	r2, r0
   b4b0e:	481b      	ldr	r0, [pc, #108]	; (b4b7c <loop+0x284>)
   b4b10:	f7ff fae4 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				uint16_t secondsUntilNextEventShort = secondsUntilNextEvent();
   b4b14:	f7ff fe76 	bl	b4804 <_Z21secondsUntilNextEventv>
				Log.info("Sending response with %d seconds until return",secondsUntilNextEventShort);
   b4b18:	b284      	uxth	r4, r0
   b4b1a:	4922      	ldr	r1, [pc, #136]	; (b4ba4 <loop+0x2ac>)
   b4b1c:	4817      	ldr	r0, [pc, #92]	; (b4b7c <loop+0x284>)
   b4b1e:	4622      	mov	r2, r4
   b4b20:	f7ff fadc 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				LoRA_Functions::instance().respondForLoRAMessageGateway(secondsUntilNextEventShort);	    // Here we send our response based on the type of message received.
   b4b24:	f7ff faf2 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4b28:	4621      	mov	r1, r4
   b4b2a:	f7ff fdc3 	bl	b46b4 <_ZN14LoRA_Functions28respondForLoRAMessageGatewayEi>
				state = REPORTING_STATE;
   b4b2e:	2307      	movs	r3, #7
   b4b30:	702b      	strb	r3, [r5, #0]
   b4b32:	f005 fd57 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 90000L) {
   b4b36:	6833      	ldr	r3, [r6, #0]
   b4b38:	1ac0      	subs	r0, r0, r3
   b4b3a:	4b1b      	ldr	r3, [pc, #108]	; (b4ba8 <loop+0x2b0>)
   b4b3c:	4298      	cmp	r0, r3
   b4b3e:	f67f aefd 	bls.w	b493c <loop+0x44>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  // Only Connect once an hour
   b4b42:	f008 fff7 	bl	bdb34 <_ZN9TimeClass4hourEv>
   b4b46:	4604      	mov	r4, r0
   b4b48:	f000 fba6 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4b4c:	f000 fdaa 	bl	b56a4 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4b50:	f008 febe 	bl	bd8d0 <_ZN9TimeClass4hourEx>
   b4b54:	4284      	cmp	r4, r0
   b4b56:	bf14      	ite	ne
   b4b58:	2305      	movne	r3, #5
				else state = IDLE_STATE;
   b4b5a:	2302      	moveq	r3, #2
   b4b5c:	e6ed      	b.n	b493a <loop+0x42>
   b4b5e:	bf00      	nop
   b4b60:	2003e3e0 	.word	0x2003e3e0
   b4b64:	2003e3a9 	.word	0x2003e3a9
   b4b68:	2003e3a8 	.word	0x2003e3a8
   b4b6c:	2003e27c 	.word	0x2003e27c
   b4b70:	2003ddc8 	.word	0x2003ddc8
   b4b74:	2003e29c 	.word	0x2003e29c
   b4b78:	000bf445 	.word	0x000bf445
   b4b7c:	2003e658 	.word	0x2003e658
   b4b80:	000bf73a 	.word	0x000bf73a
   b4b84:	000c0784 	.word	0x000c0784
   b4b88:	00030010 	.word	0x00030010
   b4b8c:	000bf485 	.word	0x000bf485
   b4b90:	2003e270 	.word	0x2003e270
   b4b94:	000bf4a6 	.word	0x000bf4a6
   b4b98:	2003e409 	.word	0x2003e409
   b4b9c:	2003de5c 	.word	0x2003de5c
   b4ba0:	000bf4cd 	.word	0x000bf4cd
   b4ba4:	000bf501 	.word	0x000bf501
   b4ba8:	00015f90 	.word	0x00015f90
			if (state != oldState) publishStateTransition();
   b4bac:	4b6b      	ldr	r3, [pc, #428]	; (b4d5c <loop+0x464>)
   b4bae:	781b      	ldrb	r3, [r3, #0]
   b4bb0:	2b07      	cmp	r3, #7
   b4bb2:	d001      	beq.n	b4bb8 <loop+0x2c0>
   b4bb4:	f7ff fe58 	bl	b4868 <_Z22publishStateTransitionv>
				current.get_deviceID(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()], current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4bb8:	f000 fbbe 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4bbc:	f000 fc3c 	bl	b5438 <_ZNK17currentStatusData12get_deviceIDEv>
   b4bc0:	900b      	str	r0, [sp, #44]	; 0x2c
   b4bc2:	f000 fbb9 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4bc6:	f000 fc46 	bl	b5456 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4bca:	4604      	mov	r4, r0
   b4bcc:	f000 fbb4 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4bd0:	f000 fc46 	bl	b5460 <_ZNK17currentStatusData14get_dailyCountEv>
   b4bd4:	4606      	mov	r6, r0
   b4bd6:	f000 fbaf 	bl	b5338 <_ZN17currentStatusData8instanceEv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}", \
   b4bda:	f000 fbc9 	bl	b5370 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4bde:	eeb0 8a40 	vmov.f32	s16, s0
   b4be2:	eef0 8a60 	vmov.f32	s17, s1
				current.get_deviceID(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()], current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4be6:	f000 fba7 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4bea:	f000 fcad 	bl	b5548 <_ZNK17currentStatusData16get_batteryStateEv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}", \
   b4bee:	4a5c      	ldr	r2, [pc, #368]	; (b4d60 <loop+0x468>)
   b4bf0:	f852 b020 	ldr.w	fp, [r2, r0, lsl #2]
				current.get_deviceID(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()], current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4bf4:	f000 fba0 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4bf8:	f000 fca1 	bl	b553e <_ZNK17currentStatusData17get_internalTempCEv>
   b4bfc:	4607      	mov	r7, r0
   b4bfe:	f000 fb4b 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4c02:	f000 fc97 	bl	b5534 <_ZNK13sysStatusData14get_resetCountEv>
   b4c06:	4680      	mov	r8, r0
   b4c08:	f000 fb96 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4c0c:	f000 fc1e 	bl	b544c <_ZNK17currentStatusData8get_RSSIEv>
   b4c10:	4681      	mov	r9, r0
   b4c12:	f000 fb91 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4c16:	f000 fc9c 	bl	b5552 <_ZNK17currentStatusData17get_messageNumberEv>
   b4c1a:	4682      	mov	sl, r0
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}", \
   b4c1c:	f008 ff79 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b4c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4c22:	4a50      	ldr	r2, [pc, #320]	; (b4d64 <loop+0x46c>)
   b4c24:	e9cd a008 	strd	sl, r0, [sp, #32]
   b4c28:	e9cd 4600 	strd	r4, r6, [sp]
   b4c2c:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4c30:	e9cd 8906 	strd	r8, r9, [sp, #24]
   b4c34:	e9cd b704 	strd	fp, r7, [sp, #16]
   b4c38:	ed8d 8b02 	vstr	d8, [sp, #8]
   b4c3c:	a810      	add	r0, sp, #64	; 0x40
   b4c3e:	f006 f885 	bl	bad4c <snprintf>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   b4c42:	f003 f901 	bl	b7e48 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4c46:	4b48      	ldr	r3, [pc, #288]	; (b4d68 <loop+0x470>)
   b4c48:	4a48      	ldr	r2, [pc, #288]	; (b4d6c <loop+0x474>)
   b4c4a:	781b      	ldrb	r3, [r3, #0]
   b4c4c:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4c4e:	2100      	movs	r1, #0
   b4c50:	4313      	orrs	r3, r2
   b4c52:	6802      	ldr	r2, [r0, #0]
   b4c54:	f88d 1004 	strb.w	r1, [sp, #4]
   b4c58:	f88d 3000 	strb.w	r3, [sp]
   b4c5c:	6814      	ldr	r4, [r2, #0]
   b4c5e:	4944      	ldr	r1, [pc, #272]	; (b4d70 <loop+0x478>)
   b4c60:	233c      	movs	r3, #60	; 0x3c
   b4c62:	aa10      	add	r2, sp, #64	; 0x40
   b4c64:	47a0      	blx	r4
   b4c66:	e665      	b.n	b4934 <loop+0x3c>
			if (state != oldState) {
   b4c68:	4b3c      	ldr	r3, [pc, #240]	; (b4d5c <loop+0x464>)
   b4c6a:	781b      	ldrb	r3, [r3, #0]
   b4c6c:	2b05      	cmp	r3, #5
   b4c6e:	d00a      	beq.n	b4c86 <loop+0x38e>
				publishStateTransition();  
   b4c70:	f7ff fdfa 	bl	b4868 <_Z22publishStateTransitionv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4c74:	f005 ffaa 	bl	babcc <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();
   b4c78:	b908      	cbnz	r0, b4c7e <loop+0x386>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4c7a:	f005 ff9f 	bl	babbc <spark_cloud_flag_connect>
   b4c7e:	f005 fcb1 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b4c82:	4b3c      	ldr	r3, [pc, #240]	; (b4d74 <loop+0x47c>)
   b4c84:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4c86:	f005 ffa1 	bl	babcc <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b4c8a:	b158      	cbz	r0, b4ca4 <loop+0x3ac>
				sysStatus.set_lastConnection(Time.now());
   b4c8c:	f000 fb04 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4c90:	4604      	mov	r4, r0
   b4c92:	f008 ff3e 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b4c96:	17c3      	asrs	r3, r0, #31
   b4c98:	4602      	mov	r2, r0
   b4c9a:	4620      	mov	r0, r4
   b4c9c:	f000 fd2b 	bl	b56f6 <_ZN13sysStatusData18set_lastConnectionEx>
				state = DISCONNECTING_STATE;										// Typically, we will disconnect and sleep to save power
   b4ca0:	2306      	movs	r3, #6
   b4ca2:	e64a      	b.n	b493a <loop+0x42>
   b4ca4:	f005 fc9e 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b4ca8:	4b32      	ldr	r3, [pc, #200]	; (b4d74 <loop+0x47c>)
   b4caa:	681b      	ldr	r3, [r3, #0]
   b4cac:	1ac0      	subs	r0, r0, r3
   b4cae:	4b32      	ldr	r3, [pc, #200]	; (b4d78 <loop+0x480>)
   b4cb0:	4298      	cmp	r0, r3
   b4cb2:	d8eb      	bhi.n	b4c8c <loop+0x394>
   b4cb4:	e642      	b.n	b493c <loop+0x44>
			if (state != oldState) {
   b4cb6:	4b29      	ldr	r3, [pc, #164]	; (b4d5c <loop+0x464>)
   b4cb8:	4c30      	ldr	r4, [pc, #192]	; (b4d7c <loop+0x484>)
   b4cba:	781b      	ldrb	r3, [r3, #0]
   b4cbc:	2b06      	cmp	r3, #6
   b4cbe:	d004      	beq.n	b4cca <loop+0x3d2>
				publishStateTransition(); 
   b4cc0:	f7ff fdd2 	bl	b4868 <_Z22publishStateTransitionv>
   b4cc4:	f005 fc8e 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b4cc8:	6020      	str	r0, [r4, #0]
   b4cca:	f005 fc8b 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stayConnectedWindow > 90000) {							// Stay on-line for 90 seconds
   b4cce:	6823      	ldr	r3, [r4, #0]
   b4cd0:	1ac0      	subs	r0, r0, r3
   b4cd2:	4b2b      	ldr	r3, [pc, #172]	; (b4d80 <loop+0x488>)
   b4cd4:	4298      	cmp	r0, r3
   b4cd6:	f67f ae31 	bls.w	b493c <loop+0x44>
				disconnectFromParticle();
   b4cda:	f001 f8b5 	bl	b5e48 <_Z22disconnectFromParticlev>
				Log.info("Going to deep power cycle device for next circuit");
   b4cde:	4929      	ldr	r1, [pc, #164]	; (b4d84 <loop+0x48c>)
   b4ce0:	4829      	ldr	r0, [pc, #164]	; (b4d88 <loop+0x490>)
   b4ce2:	f7ff f9fb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				state = ERROR_STATE; 											// Not sure if we need this
   b4ce6:	2301      	movs	r3, #1
   b4ce8:	e627      	b.n	b493a <loop+0x42>
			static system_tick_t resetTimeout = millis();
   b4cea:	4c28      	ldr	r4, [pc, #160]	; (b4d8c <loop+0x494>)
   b4cec:	4e28      	ldr	r6, [pc, #160]	; (b4d90 <loop+0x498>)
   b4cee:	7823      	ldrb	r3, [r4, #0]
   b4cf0:	f3bf 8f5b 	dmb	ish
   b4cf4:	f013 0f01 	tst.w	r3, #1
   b4cf8:	d109      	bne.n	b4d0e <loop+0x416>
   b4cfa:	4620      	mov	r0, r4
   b4cfc:	f7ff f9de 	bl	b40bc <__cxa_guard_acquire>
   b4d00:	b128      	cbz	r0, b4d0e <loop+0x416>
   b4d02:	f005 fc6f 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
   b4d06:	6030      	str	r0, [r6, #0]
   b4d08:	4620      	mov	r0, r4
   b4d0a:	f7ff f9dc 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b4d0e:	4b13      	ldr	r3, [pc, #76]	; (b4d5c <loop+0x464>)
   b4d10:	782a      	ldrb	r2, [r5, #0]
   b4d12:	781b      	ldrb	r3, [r3, #0]
   b4d14:	429a      	cmp	r2, r3
   b4d16:	d001      	beq.n	b4d1c <loop+0x424>
   b4d18:	f7ff fda6 	bl	b4868 <_Z22publishStateTransitionv>
   b4d1c:	f005 fc62 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b4d20:	6833      	ldr	r3, [r6, #0]
   b4d22:	1ac0      	subs	r0, r0, r3
   b4d24:	f247 5330 	movw	r3, #30000	; 0x7530
   b4d28:	4298      	cmp	r0, r3
   b4d2a:	f67f ae07 	bls.w	b493c <loop+0x44>
				Log.info("Deep power down device");
   b4d2e:	4919      	ldr	r1, [pc, #100]	; (b4d94 <loop+0x49c>)
   b4d30:	4815      	ldr	r0, [pc, #84]	; (b4d88 <loop+0x490>)
   b4d32:	f7ff f9d3 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b4d36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4d3a:	f006 f85f 	bl	badfc <delay>
				ab1805.deepPowerDown(); 
   b4d3e:	211e      	movs	r1, #30
   b4d40:	4815      	ldr	r0, [pc, #84]	; (b4d98 <loop+0x4a0>)
   b4d42:	f001 fccd 	bl	b66e0 <_ZN6AB180513deepPowerDownEi>
   b4d46:	e5f9      	b.n	b493c <loop+0x44>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4d48:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4d4c:	e68c      	b.n	b4a68 <loop+0x170>
                valid_ = false;
   b4d4e:	7526      	strb	r6, [r4, #20]
                return *this;
   b4d50:	e68a      	b.n	b4a68 <loop+0x170>
}
   b4d52:	b051      	add	sp, #324	; 0x144
   b4d54:	ecbd 8b02 	vpop	{d8}
   b4d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4d5c:	2003e3a9 	.word	0x2003e3a9
   b4d60:	2003de60 	.word	0x2003de60
   b4d64:	000bf52f 	.word	0x000bf52f
   b4d68:	2003e269 	.word	0x2003e269
   b4d6c:	2003e268 	.word	0x2003e268
   b4d70:	000bf5b0 	.word	0x000bf5b0
   b4d74:	2003e274 	.word	0x2003e274
   b4d78:	000493e0 	.word	0x000493e0
   b4d7c:	2003e278 	.word	0x2003e278
   b4d80:	00015f90 	.word	0x00015f90
   b4d84:	000bf5c5 	.word	0x000bf5c5
   b4d88:	2003e658 	.word	0x2003e658
   b4d8c:	2003e264 	.word	0x2003e264
   b4d90:	2003e26c 	.word	0x2003e26c
   b4d94:	000bf5f7 	.word	0x000bf5f7
   b4d98:	2003e27c 	.word	0x2003e27c

000b4d9c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4d9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4d9e:	2300      	movs	r3, #0
   b4da0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4da2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4da4:	4604      	mov	r4, r0
   b4da6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4da8:	b12b      	cbz	r3, b4db6 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4daa:	2202      	movs	r2, #2
   b4dac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4dae:	68eb      	ldr	r3, [r5, #12]
   b4db0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4db2:	68ab      	ldr	r3, [r5, #8]
   b4db4:	60a3      	str	r3, [r4, #8]
    }
   b4db6:	4620      	mov	r0, r4
   b4db8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4dbc <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4dc0:	b095      	sub	sp, #84	; 0x54
   b4dc2:	4605      	mov	r5, r0
        };
   b4dc4:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4dc6:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4dc8:	4690      	mov	r8, r2
   b4dca:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4dcc:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4dce:	f7ff ffe5 	bl	b4d9c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4dd2:	a904      	add	r1, sp, #16
   b4dd4:	a808      	add	r0, sp, #32
   b4dd6:	f7ff ffe1 	bl	b4d9c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4dda:	a908      	add	r1, sp, #32
   b4ddc:	4630      	mov	r0, r6
   b4dde:	f7ff ffdd 	bl	b4d9c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4de2:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4de6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4de8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4dec:	f7ff f953 	bl	b4096 <_Znwj>
   b4df0:	4604      	mov	r4, r0
   b4df2:	b1a0      	cbz	r0, b4e1e <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4df4:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4df8:	ab01      	add	r3, sp, #4
   b4dfa:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4dfe:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4e02:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4e06:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4e0c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e0e:	60a3      	str	r3, [r4, #8]
   b4e10:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4e16:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4e1a:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4e1c:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4e1e:	4b24      	ldr	r3, [pc, #144]	; (b4eb0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4e20:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4e22:	4b24      	ldr	r3, [pc, #144]	; (b4eb4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4e24:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4e26:	2200      	movs	r2, #0
   b4e28:	2300      	movs	r3, #0
   b4e2a:	f04f 0900 	mov.w	r9, #0
   b4e2e:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4e32:	4b21      	ldr	r3, [pc, #132]	; (b4eb8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4e34:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4e38:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4e3a:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4e3c:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4e40:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4e44:	f7ff f927 	bl	b4096 <_Znwj>
   b4e48:	4604      	mov	r4, r0
   b4e4a:	b1d8      	cbz	r0, b4e84 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4e4e:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4e52:	b133      	cbz	r3, b4e62 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4e54:	2202      	movs	r2, #2
   b4e56:	a910      	add	r1, sp, #64	; 0x40
   b4e58:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4e5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4e5c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4e5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4e60:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4e62:	4b16      	ldr	r3, [pc, #88]	; (b4ebc <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4e64:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4e66:	4a16      	ldr	r2, [pc, #88]	; (b4ec0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4e68:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4e6a:	ab01      	add	r3, sp, #4
   b4e6c:	4640      	mov	r0, r8
   b4e6e:	4639      	mov	r1, r7
   b4e70:	f005 fe2a 	bl	baac8 <system_subscribe_event>
        if (r) {
   b4e74:	b1b0      	cbz	r0, b4ea4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4e76:	4620      	mov	r0, r4
   b4e78:	f7ff fcae 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4e7c:	2110      	movs	r1, #16
   b4e7e:	4620      	mov	r0, r4
   b4e80:	f7ff f90d 	bl	b409e <_ZdlPvj>
   b4e84:	a810      	add	r0, sp, #64	; 0x40
   b4e86:	f7ff fca7 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   b4e8a:	4630      	mov	r0, r6
   b4e8c:	f7ff fca4 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   b4e90:	a808      	add	r0, sp, #32
   b4e92:	f7ff fca1 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   b4e96:	a804      	add	r0, sp, #16
   b4e98:	f7ff fc9e 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
    }
   b4e9c:	4628      	mov	r0, r5
   b4e9e:	b015      	add	sp, #84	; 0x54
   b4ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4ea4:	9b02      	ldr	r3, [sp, #8]
   b4ea6:	60ab      	str	r3, [r5, #8]
   b4ea8:	e9c5 8700 	strd	r8, r7, [r5]
   b4eac:	e7ea      	b.n	b4e84 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4eae:	bf00      	nop
   b4eb0:	000b4795 	.word	0x000b4795
   b4eb4:	000b4ec5 	.word	0x000b4ec5
   b4eb8:	000c0002 	.word	0x000c0002
   b4ebc:	000b47eb 	.word	0x000b47eb
   b4ec0:	000b476d 	.word	0x000b476d

000b4ec4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4ec4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4ec6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4ec8:	4604      	mov	r4, r0
	switch (__op)
   b4eca:	d104      	bne.n	b4ed6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4ecc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4ece:	6003      	str	r3, [r0, #0]
      }
   b4ed0:	2000      	movs	r0, #0
   b4ed2:	b003      	add	sp, #12
   b4ed4:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4ed6:	2a02      	cmp	r2, #2
   b4ed8:	d00c      	beq.n	b4ef4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4eda:	2a03      	cmp	r2, #3
   b4edc:	d1f8      	bne.n	b4ed0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4ede:	6804      	ldr	r4, [r0, #0]
   b4ee0:	2c00      	cmp	r4, #0
   b4ee2:	d0f5      	beq.n	b4ed0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4ee4:	4620      	mov	r0, r4
   b4ee6:	f7ff fc77 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4eea:	2110      	movs	r1, #16
   b4eec:	4620      	mov	r0, r4
   b4eee:	f7ff f8d6 	bl	b409e <_ZdlPvj>
   b4ef2:	e7ed      	b.n	b4ed0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4ef4:	6809      	ldr	r1, [r1, #0]
   b4ef6:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4ef8:	2010      	movs	r0, #16
   b4efa:	f7ff f8cc 	bl	b4096 <_Znwj>
   b4efe:	4605      	mov	r5, r0
   b4f00:	b110      	cbz	r0, b4f08 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4f02:	9901      	ldr	r1, [sp, #4]
   b4f04:	f7ff ff4a 	bl	b4d9c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4f08:	6025      	str	r5, [r4, #0]
	}
   b4f0a:	e7e1      	b.n	b4ed0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4f0c <_GLOBAL__sub_I___appProductVersion>:
}
   b4f0c:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b4f0e:	4b1d      	ldr	r3, [pc, #116]	; (b4f84 <_GLOBAL__sub_I___appProductVersion+0x78>)
   b4f10:	2501      	movs	r5, #1
   b4f12:	701d      	strb	r5, [r3, #0]
   b4f14:	4b1c      	ldr	r3, [pc, #112]	; (b4f88 <_GLOBAL__sub_I___appProductVersion+0x7c>)
   b4f16:	2208      	movs	r2, #8
   b4f18:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4f1a:	f008 ffa3 	bl	bde64 <spark_protocol_instance>
   b4f1e:	2300      	movs	r3, #0
   b4f20:	461a      	mov	r2, r3
   b4f22:	4619      	mov	r1, r3
   b4f24:	f008 ffae 	bl	bde84 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4f28:	f008 ff9c 	bl	bde64 <spark_protocol_instance>
   b4f2c:	2300      	movs	r3, #0
   b4f2e:	461a      	mov	r2, r3
   b4f30:	210d      	movs	r1, #13
   b4f32:	f008 ff9f 	bl	bde74 <spark_protocol_set_product_id>
        : config_(config) {
   b4f36:	4b15      	ldr	r3, [pc, #84]	; (b4f8c <_GLOBAL__sub_I___appProductVersion+0x80>)
   b4f38:	1d1a      	adds	r2, r3, #4
              valid_(true) {
   b4f3a:	2400      	movs	r4, #0
        : config_(config) {
   b4f3c:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4f3e:	4a14      	ldr	r2, [pc, #80]	; (b4f90 <_GLOBAL__sub_I___appProductVersion+0x84>)
   b4f40:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4f42:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4f46:	611c      	str	r4, [r3, #16]
   b4f48:	751d      	strb	r5, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4f4a:	f009 f863 	bl	be014 <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   b4f4e:	4d11      	ldr	r5, [pc, #68]	; (b4f94 <_GLOBAL__sub_I___appProductVersion+0x88>)
   b4f50:	4601      	mov	r1, r0
   b4f52:	2269      	movs	r2, #105	; 0x69
   b4f54:	4810      	ldr	r0, [pc, #64]	; (b4f98 <_GLOBAL__sub_I___appProductVersion+0x8c>)
   b4f56:	f001 f96b 	bl	b6230 <_ZN6AB1805C1ER7TwoWireh>
   b4f5a:	4628      	mov	r0, r5
   b4f5c:	490f      	ldr	r1, [pc, #60]	; (b4f9c <_GLOBAL__sub_I___appProductVersion+0x90>)
   b4f5e:	f008 fa84 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b4f62:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b4f64:	480e      	ldr	r0, [pc, #56]	; (b4fa0 <_GLOBAL__sub_I___appProductVersion+0x94>)
    LocalTimeSchedule() {
   b4f66:	612c      	str	r4, [r5, #16]
   b4f68:	2200      	movs	r2, #0
   b4f6a:	e9c5 2306 	strd	r2, r3, [r5, #24]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4f6e:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   b4f72:	2306      	movs	r3, #6
   b4f74:	f840 3b04 	str.w	r3, [r0], #4
   b4f78:	62ac      	str	r4, [r5, #40]	; 0x28
}
   b4f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4f7e:	f002 ba4b 	b.w	b7418 <_ZN22LocalTimePosixTimezoneC1Ev>
   b4f82:	bf00      	nop
   b4f84:	2003e268 	.word	0x2003e268
   b4f88:	2003e269 	.word	0x2003e269
   b4f8c:	2003e29c 	.word	0x2003e29c
   b4f90:	00030010 	.word	0x00030010
   b4f94:	2003e3b0 	.word	0x2003e3b0
   b4f98:	2003e27c 	.word	0x2003e27c
   b4f9c:	000c05fd 	.word	0x000c05fd
   b4fa0:	2003e2b8 	.word	0x2003e2b8

000b4fa4 <setup>:
{
   b4fa4:	b570      	push	{r4, r5, r6, lr}
        return hal_timer_millis(nullptr);
   b4fa6:	2000      	movs	r0, #0
   b4fa8:	b09e      	sub	sp, #120	; 0x78
   b4faa:	f005 fb2b 	bl	ba604 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4fae:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4fb2:	4604      	mov	r4, r0
   b4fb4:	2000      	movs	r0, #0
   b4fb6:	f005 fb25 	bl	ba604 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4fba:	1b00      	subs	r0, r0, r4
   b4fbc:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4fc0:	42a8      	cmp	r0, r5
   b4fc2:	f171 0300 	sbcs.w	r3, r1, #0
   b4fc6:	d207      	bcs.n	b4fd8 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4fc8:	f008 fe8a 	bl	bdce0 <_Z16_fetch_usbserialv>
   b4fcc:	f008 fe7d 	bl	bdcca <_ZN9USBSerial11isConnectedEv>
   b4fd0:	b910      	cbnz	r0, b4fd8 <setup+0x34>
            spark_process();
   b4fd2:	f005 fdeb 	bl	babac <spark_process>
        while (_while() && !_condition()) {
   b4fd6:	e7ed      	b.n	b4fb4 <setup+0x10>
   b4fd8:	f008 fe82 	bl	bdce0 <_Z16_fetch_usbserialv>
   b4fdc:	f008 fe75 	bl	bdcca <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b4fe0:	f000 fbac 	bl	b573c <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b4fe4:	f000 fbd6 	bl	b5794 <_Z18initializePowerCfgv>
	current.setup();
   b4fe8:	f000 f9a6 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b4fec:	6803      	ldr	r3, [r0, #0]
   b4fee:	681b      	ldr	r3, [r3, #0]
   b4ff0:	4798      	blx	r3
  	sysStatus.setup();
   b4ff2:	f000 f951 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b4ff6:	6803      	ldr	r3, [r0, #0]
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	4798      	blx	r3
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   b4ffc:	f000 fc82 	bl	b5904 <_Z18particleInitializev>
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5000:	484d      	ldr	r0, [pc, #308]	; (b5138 <setup+0x194>)
   b5002:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b5004:	2101      	movs	r1, #1
   b5006:	8143      	strh	r3, [r0, #10]
   b5008:	f001 fe0e 	bl	b6c28 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b500c:	217c      	movs	r1, #124	; 0x7c
   b500e:	484a      	ldr	r0, [pc, #296]	; (b5138 <setup+0x194>)
   b5010:	f001 fa0c 	bl	b642c <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5014:	4b49      	ldr	r3, [pc, #292]	; (b513c <setup+0x198>)
   b5016:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b5018:	4b49      	ldr	r3, [pc, #292]	; (b5140 <setup+0x19c>)
   b501a:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b501c:	ad08      	add	r5, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b501e:	4b49      	ldr	r3, [pc, #292]	; (b5144 <setup+0x1a0>)
   b5020:	930a      	str	r3, [sp, #40]	; 0x28
   b5022:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5026:	2300      	movs	r3, #0
   b5028:	a804      	add	r0, sp, #16
   b502a:	9500      	str	r5, [sp, #0]
   b502c:	f7ff fec6 	bl	b4dbc <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5030:	4628      	mov	r0, r5
   b5032:	f7ff fbd1 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5036:	f002 ff07 	bl	b7e48 <_ZN17PublishQueuePosix8instanceEv>
   b503a:	f003 f90b 	bl	b8254 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b503e:	f7ff f865 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b5042:	2101      	movs	r1, #1
   b5044:	f7ff f874 	bl	b4130 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5048:	f002 fb96 	bl	b7778 <_ZN9LocalTime8instanceEv>
   b504c:	493e      	ldr	r1, [pc, #248]	; (b5148 <setup+0x1a4>)
   b504e:	4604      	mov	r4, r0
   b5050:	4628      	mov	r0, r5
   b5052:	f002 fa93 	bl	b757c <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5056:	a909      	add	r1, sp, #36	; 0x24
   b5058:	f104 0008 	add.w	r0, r4, #8
   b505c:	f008 fa41 	bl	bd4e2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b5062:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5064:	a90f      	add	r1, sp, #60	; 0x3c
   b5066:	f104 0020 	add.w	r0, r4, #32
   b506a:	f008 fa3a 	bl	bd4e2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b506e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5070:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5072:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5074:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5076:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5078:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b507a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b507c:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b507e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b5080:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5082:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   b5086:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b508a:	4628      	mov	r0, r5
   b508c:	f002 f844 	bl	b7118 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5090:	f008 fd3f 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b5094:	4c2d      	ldr	r4, [pc, #180]	; (b514c <setup+0x1a8>)
   b5096:	17c3      	asrs	r3, r0, #31
   b5098:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   b509c:	4620      	mov	r0, r4
   b509e:	f002 fbe3 	bl	b7868 <_ZN16LocalTimeConvert7convertEv>
  	Log.info("Gateway startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   b50a2:	4b2b      	ldr	r3, [pc, #172]	; (b5150 <setup+0x1ac>)
   b50a4:	4621      	mov	r1, r4
   b50a6:	681a      	ldr	r2, [r3, #0]
   b50a8:	4628      	mov	r0, r5
   b50aa:	f002 fac7 	bl	b763c <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b50ae:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b50b0:	a903      	add	r1, sp, #12
   b50b2:	2003      	movs	r0, #3
   b50b4:	9e08      	ldr	r6, [sp, #32]
    const diag_source* src = nullptr;
   b50b6:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   b50b8:	f005 fce4 	bl	baa84 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b50bc:	2800      	cmp	r0, #0
   b50be:	d138      	bne.n	b5132 <setup+0x18e>
        return ret;
    }
    return get(src, val);
   b50c0:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   b50c2:	b10c      	cbz	r4, b50c8 <setup+0x124>
   b50c4:	6923      	ldr	r3, [r4, #16]
   b50c6:	b923      	cbnz	r3, b50d2 <setup+0x12e>
   b50c8:	4a22      	ldr	r2, [pc, #136]	; (b5154 <setup+0x1b0>)
   b50ca:	4923      	ldr	r1, [pc, #140]	; (b5158 <setup+0x1b4>)
   b50cc:	200a      	movs	r0, #10
   b50ce:	f005 fcb1 	bl	baa34 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b50d2:	230c      	movs	r3, #12
   b50d4:	9304      	str	r3, [sp, #16]
   b50d6:	ab02      	add	r3, sp, #8
   b50d8:	9305      	str	r3, [sp, #20]
   b50da:	2304      	movs	r3, #4
   b50dc:	9306      	str	r3, [sp, #24]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b50de:	6923      	ldr	r3, [r4, #16]
   b50e0:	aa04      	add	r2, sp, #16
   b50e2:	2101      	movs	r1, #1
   b50e4:	4620      	mov	r0, r4
   b50e6:	4798      	blx	r3
        if (r) {
   b50e8:	bb18      	cbnz	r0, b5132 <setup+0x18e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b50ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b50ee:	ee07 3a90 	vmov	s15, r3
   b50f2:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b50f6:	ee17 0a90 	vmov	r0, s15
   b50fa:	f009 f985 	bl	be408 <__aeabi_f2d>
   b50fe:	4632      	mov	r2, r6
   b5100:	e9cd 0100 	strd	r0, r1, [sp]
   b5104:	4915      	ldr	r1, [pc, #84]	; (b515c <setup+0x1b8>)
   b5106:	4816      	ldr	r0, [pc, #88]	; (b5160 <setup+0x1bc>)
   b5108:	f7fe ffe8 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b510c:	4628      	mov	r0, r5
   b510e:	f008 f961 	bl	bd3d4 <_ZN6StringD1Ev>
  	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5112:	4814      	ldr	r0, [pc, #80]	; (b5164 <setup+0x1c0>)
   b5114:	4914      	ldr	r1, [pc, #80]	; (b5168 <setup+0x1c4>)
   b5116:	8800      	ldrh	r0, [r0, #0]
   b5118:	2200      	movs	r2, #0
   b511a:	9200      	str	r2, [sp, #0]
   b511c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5120:	f006 fbe2 	bl	bb8e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5124:	4b11      	ldr	r3, [pc, #68]	; (b516c <setup+0x1c8>)
   b5126:	781a      	ldrb	r2, [r3, #0]
   b5128:	b90a      	cbnz	r2, b512e <setup+0x18a>
   b512a:	2202      	movs	r2, #2
   b512c:	701a      	strb	r2, [r3, #0]
}
   b512e:	b01e      	add	sp, #120	; 0x78
   b5130:	bd70      	pop	{r4, r5, r6, pc}
            return -1.0f;
   b5132:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5136:	e7de      	b.n	b50f6 <setup+0x152>
   b5138:	2003e27c 	.word	0x2003e27c
   b513c:	000b4755 	.word	0x000b4755
   b5140:	000b47cf 	.word	0x000b47cf
   b5144:	000b47bb 	.word	0x000b47bb
   b5148:	000bf60e 	.word	0x000bf60e
   b514c:	2003e2b8 	.word	0x2003e2b8
   b5150:	2003ded8 	.word	0x2003ded8
   b5154:	000ba5d5 	.word	0x000ba5d5
   b5158:	000bf635 	.word	0x000bf635
   b515c:	000bf65b 	.word	0x000bf65b
   b5160:	2003e658 	.word	0x2003e658
   b5164:	000bf73a 	.word	0x000bf73a
   b5168:	000b4761 	.word	0x000b4761
   b516c:	2003e3e0 	.word	0x2003e3e0

000b5170 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5170:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b5172:	4b04      	ldr	r3, [pc, #16]	; (b5184 <_ZN17currentStatusDataD1Ev+0x14>)
   b5174:	6003      	str	r3, [r0, #0]
   b5176:	4604      	mov	r4, r0
            if (handle_) {
   b5178:	6840      	ldr	r0, [r0, #4]
   b517a:	b108      	cbz	r0, b5180 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b517c:	f005 f9ea 	bl	ba554 <os_mutex_recursive_destroy>
}
   b5180:	4620      	mov	r0, r4
   b5182:	bd10      	pop	{r4, pc}
   b5184:	000c0478 	.word	0x000c0478

000b5188 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5188:	b510      	push	{r4, lr}
   b518a:	4604      	mov	r4, r0
}
   b518c:	f7ff fff0 	bl	b5170 <_ZN17currentStatusDataD1Ev>
   b5190:	4620      	mov	r0, r4
   b5192:	2178      	movs	r1, #120	; 0x78
   b5194:	f7fe ff83 	bl	b409e <_ZdlPvj>
   b5198:	4620      	mov	r0, r4
   b519a:	bd10      	pop	{r4, pc}

000b519c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b519c:	b510      	push	{r4, lr}
   b519e:	4b03      	ldr	r3, [pc, #12]	; (b51ac <_ZN8MB85RC64D1Ev+0x10>)
   b51a0:	6003      	str	r3, [r0, #0]
   b51a2:	4604      	mov	r4, r0
   b51a4:	f002 fc0e 	bl	b79c4 <_ZN6MB85RCD1Ev>
   b51a8:	4620      	mov	r0, r4
   b51aa:	bd10      	pop	{r4, pc}
   b51ac:	000bf698 	.word	0x000bf698

000b51b0 <_ZN8MB85RC64D0Ev>:
   b51b0:	b510      	push	{r4, lr}
   b51b2:	4604      	mov	r4, r0
   b51b4:	f7ff fff2 	bl	b519c <_ZN8MB85RC64D1Ev>
   b51b8:	4620      	mov	r0, r4
   b51ba:	2110      	movs	r1, #16
   b51bc:	f7fe ff6f 	bl	b409e <_ZdlPvj>
   b51c0:	4620      	mov	r0, r4
   b51c2:	bd10      	pop	{r4, pc}

000b51c4 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b51c4:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b51c6:	4b04      	ldr	r3, [pc, #16]	; (b51d8 <_ZN13sysStatusDataD1Ev+0x14>)
   b51c8:	6003      	str	r3, [r0, #0]
   b51ca:	4604      	mov	r4, r0
            if (handle_) {
   b51cc:	6840      	ldr	r0, [r0, #4]
   b51ce:	b108      	cbz	r0, b51d4 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b51d0:	f005 f9c0 	bl	ba554 <os_mutex_recursive_destroy>
}
   b51d4:	4620      	mov	r0, r4
   b51d6:	bd10      	pop	{r4, pc}
   b51d8:	000c0478 	.word	0x000c0478

000b51dc <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b51dc:	b510      	push	{r4, lr}
   b51de:	4604      	mov	r4, r0
}
   b51e0:	f7ff fff0 	bl	b51c4 <_ZN13sysStatusDataD1Ev>
   b51e4:	4620      	mov	r0, r4
   b51e6:	2170      	movs	r1, #112	; 0x70
   b51e8:	f7fe ff59 	bl	b409e <_ZdlPvj>
   b51ec:	4620      	mov	r0, r4
   b51ee:	bd10      	pop	{r4, pc}

000b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b51f0:	b510      	push	{r4, lr}
            if (!handle_) {
   b51f2:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b51f4:	4604      	mov	r4, r0
            if (!handle_) {
   b51f6:	b90b      	cbnz	r3, b51fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b51f8:	f005 f9a4 	bl	ba544 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b51fc:	6820      	ldr	r0, [r4, #0]
        }
   b51fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5202:	f005 b9af 	b.w	ba564 <os_mutex_recursive_lock>

000b5206 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5206:	b538      	push	{r3, r4, r5, lr}
   b5208:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b520a:	3004      	adds	r0, #4
   b520c:	f7ff fff0 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5210:	6a20      	ldr	r0, [r4, #32]
   b5212:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5214:	6803      	ldr	r3, [r0, #0]
   b5216:	68dd      	ldr	r5, [r3, #12]
   b5218:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b521c:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b521e:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5224:	f005 b9a6 	b.w	ba574 <os_mutex_recursive_unlock>

000b5228 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5228:	b538      	push	{r3, r4, r5, lr}
   b522a:	4604      	mov	r4, r0
   b522c:	3004      	adds	r0, #4
   b522e:	f7ff ffdf 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5232:	6a20      	ldr	r0, [r4, #32]
   b5234:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5236:	6803      	ldr	r3, [r0, #0]
   b5238:	689d      	ldr	r5, [r3, #8]
   b523a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b523e:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5240:	68a2      	ldr	r2, [r4, #8]
   b5242:	6823      	ldr	r3, [r4, #0]
   b5244:	88d1      	ldrh	r1, [r2, #6]
   b5246:	695b      	ldr	r3, [r3, #20]
   b5248:	4620      	mov	r0, r4
   b524a:	4798      	blx	r3
   b524c:	b918      	cbnz	r0, b5256 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b524e:	6823      	ldr	r3, [r4, #0]
   b5250:	4620      	mov	r0, r4
   b5252:	699b      	ldr	r3, [r3, #24]
   b5254:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5256:	6860      	ldr	r0, [r4, #4]
   b5258:	f005 f98c 	bl	ba574 <os_mutex_recursive_unlock>
        }
   b525c:	2001      	movs	r0, #1
   b525e:	bd38      	pop	{r3, r4, r5, pc}

000b5260 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5260:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5264:	6081      	str	r1, [r0, #8]
   b5266:	4909      	ldr	r1, [pc, #36]	; (b528c <_ZN13sysStatusDataC1Ev+0x2c>)
   b5268:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b526c:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5270:	2101      	movs	r1, #1
   b5272:	8281      	strh	r1, [r0, #20]
   b5274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5278:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b527a:	4905      	ldr	r1, [pc, #20]	; (b5290 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b527c:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b527e:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5282:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5284:	6182      	str	r2, [r0, #24]
   b5286:	4a03      	ldr	r2, [pc, #12]	; (b5294 <_ZN13sysStatusDataC1Ev+0x34>)
   b5288:	6002      	str	r2, [r0, #0]
};
   b528a:	4770      	bx	lr
   b528c:	20a99e73 	.word	0x20a99e73
   b5290:	2003e3ec 	.word	0x2003e3ec
   b5294:	000bf6b4 	.word	0x000bf6b4

000b5298 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5298:	b510      	push	{r4, lr}
    if (!_instance) {
   b529a:	4c06      	ldr	r4, [pc, #24]	; (b52b4 <_ZN13sysStatusData8instanceEv+0x1c>)
   b529c:	6823      	ldr	r3, [r4, #0]
   b529e:	b93b      	cbnz	r3, b52b0 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b52a0:	2070      	movs	r0, #112	; 0x70
   b52a2:	f7fe fef8 	bl	b4096 <_Znwj>
   b52a6:	4603      	mov	r3, r0
   b52a8:	b108      	cbz	r0, b52ae <_ZN13sysStatusData8instanceEv+0x16>
   b52aa:	f7ff ffd9 	bl	b5260 <_ZN13sysStatusDataC1Ev>
   b52ae:	6023      	str	r3, [r4, #0]
}
   b52b0:	6820      	ldr	r0, [r4, #0]
   b52b2:	bd10      	pop	{r4, pc}
   b52b4:	2003e3e4 	.word	0x2003e3e4

000b52b8 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b52b8:	b508      	push	{r3, lr}
    fram.begin();
   b52ba:	6a00      	ldr	r0, [r0, #32]
   b52bc:	f002 fb98 	bl	b79f0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b52c0:	f7ff ffea 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b52c4:	6803      	ldr	r3, [r0, #0]
   b52c6:	685b      	ldr	r3, [r3, #4]
   b52c8:	4798      	blx	r3
}
   b52ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setNodeConfiguration();                             // Here we will fix the settings specific to the node
   b52ce:	f000 ba99 	b.w	b5804 <_Z20setNodeConfigurationv>

000b52d2 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b52d2:	b510      	push	{r4, lr}
    fram.begin();
   b52d4:	6a00      	ldr	r0, [r0, #32]
   b52d6:	f002 fb8b 	bl	b79f0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b52da:	f7ff ffdd 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b52de:	6803      	ldr	r3, [r0, #0]
}
   b52e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b52e4:	685b      	ldr	r3, [r3, #4]
   b52e6:	4718      	bx	r3

000b52e8 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b52e8:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b52ea:	f7ff ffd5 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b52ee:	6803      	ldr	r3, [r0, #0]
}
   b52f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b52f4:	68db      	ldr	r3, [r3, #12]
   b52f6:	2100      	movs	r1, #0
   b52f8:	4718      	bx	r3
	...

000b52fc <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b52fc:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b52fe:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5302:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5304:	6182      	str	r2, [r0, #24]
   b5306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b530a:	6081      	str	r1, [r0, #8]
   b530c:	61c2      	str	r2, [r0, #28]
   b530e:	4907      	ldr	r1, [pc, #28]	; (b532c <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5310:	4a07      	ldr	r2, [pc, #28]	; (b5330 <_ZN17currentStatusDataC1Ev+0x34>)
   b5312:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5314:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5318:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b531a:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b531e:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5320:	2101      	movs	r1, #1
   b5322:	4a04      	ldr	r2, [pc, #16]	; (b5334 <_ZN17currentStatusDataC1Ev+0x38>)
   b5324:	8281      	strh	r1, [r0, #20]
   b5326:	6002      	str	r2, [r0, #0]
};
   b5328:	4770      	bx	lr
   b532a:	bf00      	nop
   b532c:	20a99e73 	.word	0x20a99e73
   b5330:	2003e3ec 	.word	0x2003e3ec
   b5334:	000bf6e0 	.word	0x000bf6e0

000b5338 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5338:	b510      	push	{r4, lr}
    if (!_instance) {
   b533a:	4c06      	ldr	r4, [pc, #24]	; (b5354 <_ZN17currentStatusData8instanceEv+0x1c>)
   b533c:	6823      	ldr	r3, [r4, #0]
   b533e:	b93b      	cbnz	r3, b5350 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5340:	2078      	movs	r0, #120	; 0x78
   b5342:	f7fe fea8 	bl	b4096 <_Znwj>
   b5346:	4603      	mov	r3, r0
   b5348:	b108      	cbz	r0, b534e <_ZN17currentStatusData8instanceEv+0x16>
   b534a:	f7ff ffd7 	bl	b52fc <_ZN17currentStatusDataC1Ev>
   b534e:	6023      	str	r3, [r4, #0]
}
   b5350:	6820      	ldr	r0, [r4, #0]
   b5352:	bd10      	pop	{r4, pc}
   b5354:	2003e3e8 	.word	0x2003e3e8

000b5358 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b5358:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b535a:	f7ff ff9d 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b535e:	6803      	ldr	r3, [r0, #0]
}
   b5360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5364:	68db      	ldr	r3, [r3, #12]
   b5366:	2100      	movs	r1, #0
   b5368:	4718      	bx	r3
   b536a:	0000      	movs	r0, r0
   b536c:	0000      	movs	r0, r0
	...

000b5370 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b5370:	b510      	push	{r4, lr}
   b5372:	4604      	mov	r4, r0
   b5374:	ed2d 8b02 	vpush	{d8}
   b5378:	3004      	adds	r0, #4
   b537a:	f7ff ff39 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b537e:	68e3      	ldr	r3, [r4, #12]
   b5380:	3b08      	subs	r3, #8
   b5382:	2b17      	cmp	r3, #23
   b5384:	d90c      	bls.n	b53a0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5386:	68a3      	ldr	r3, [r4, #8]
   b5388:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b538c:	6860      	ldr	r0, [r4, #4]
   b538e:	f005 f8f1 	bl	ba574 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b5392:	eeb0 0a48 	vmov.f32	s0, s16
   b5396:	eef0 0a68 	vmov.f32	s1, s17
   b539a:	ecbd 8b02 	vpop	{d8}
   b539e:	bd10      	pop	{r4, pc}
            T result = 0;
   b53a0:	ed9f 8b01 	vldr	d8, [pc, #4]	; b53a8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b53a4:	e7f2      	b.n	b538c <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b53a6:	bf00      	nop
	...

000b53b0 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b53b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53b2:	4604      	mov	r4, r0
   b53b4:	3004      	adds	r0, #4
   b53b6:	ec57 6b10 	vmov	r6, r7, d0
   b53ba:	f7ff ff19 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b53be:	68e3      	ldr	r3, [r4, #12]
   b53c0:	3b08      	subs	r3, #8
   b53c2:	2b17      	cmp	r3, #23
   b53c4:	d912      	bls.n	b53ec <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b53c6:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b53c8:	4630      	mov	r0, r6
   b53ca:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b53ce:	4639      	mov	r1, r7
   b53d0:	f009 fada 	bl	be988 <__aeabi_dcmpeq>
   b53d4:	b950      	cbnz	r0, b53ec <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b53d6:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b53da:	4620      	mov	r0, r4
   b53dc:	68a5      	ldr	r5, [r4, #8]
   b53de:	f004 fff7 	bl	ba3d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b53e2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b53e4:	6823      	ldr	r3, [r4, #0]
   b53e6:	4620      	mov	r0, r4
   b53e8:	691b      	ldr	r3, [r3, #16]
   b53ea:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b53ec:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b53ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b53f2:	f005 b8bf 	b.w	ba574 <os_mutex_recursive_unlock>

000b53f6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b53f6:	b538      	push	{r3, r4, r5, lr}
   b53f8:	4604      	mov	r4, r0
   b53fa:	3004      	adds	r0, #4
   b53fc:	460d      	mov	r5, r1
   b53fe:	f7ff fef7 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5402:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5404:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5406:	3b02      	subs	r3, #2
   b5408:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b540a:	bf26      	itte	cs
   b540c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b540e:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5410:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5412:	f005 f8af 	bl	ba574 <os_mutex_recursive_unlock>
        }
   b5416:	4628      	mov	r0, r5
   b5418:	bd38      	pop	{r3, r4, r5, pc}

000b541a <_ZNK13sysStatusData12get_deviceIDEv>:
uint16_t sysStatusData::get_deviceID() const {
   b541a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, deviceID));
   b541c:	2110      	movs	r1, #16
   b541e:	f7ff ffea 	bl	b53f6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5422:	bd08      	pop	{r3, pc}

000b5424 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint16_t sysStatusData::get_nodeNumber() const {
   b5424:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, nodeNumber));
   b5426:	2112      	movs	r1, #18
   b5428:	f7ff ffe5 	bl	b53f6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b542c:	bd08      	pop	{r3, pc}

000b542e <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b542e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5430:	2134      	movs	r1, #52	; 0x34
   b5432:	f7ff ffe0 	bl	b53f6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5436:	bd08      	pop	{r3, pc}

000b5438 <_ZNK17currentStatusData12get_deviceIDEv>:
uint16_t currentStatusData::get_deviceID() const {
   b5438:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, deviceID));
   b543a:	2110      	movs	r1, #16
   b543c:	f7ff ffdb 	bl	b53f6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5440:	bd08      	pop	{r3, pc}

000b5442 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint16_t currentStatusData::get_nodeNumber() const {
   b5442:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeNumber));
   b5444:	2112      	movs	r1, #18
   b5446:	f7ff ffd6 	bl	b53f6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b544a:	bd08      	pop	{r3, pc}

000b544c <_ZNK17currentStatusData8get_RSSIEv>:

void currentStatusData::set_lastSampleTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastSampleTime), value);
}

uint16_t currentStatusData::get_RSSI() const {
   b544c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b544e:	2130      	movs	r1, #48	; 0x30
   b5450:	f7ff ffd1 	bl	b53f6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5454:	bd08      	pop	{r3, pc}

000b5456 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b5456:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5458:	2140      	movs	r1, #64	; 0x40
   b545a:	f7ff ffcc 	bl	b53f6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b545e:	bd08      	pop	{r3, pc}

000b5460 <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b5460:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b5462:	2142      	movs	r1, #66	; 0x42
   b5464:	f7ff ffc7 	bl	b53f6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5468:	bd08      	pop	{r3, pc}

000b546a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b546a:	b570      	push	{r4, r5, r6, lr}
   b546c:	4604      	mov	r4, r0
   b546e:	3004      	adds	r0, #4
   b5470:	460d      	mov	r5, r1
   b5472:	4616      	mov	r6, r2
   b5474:	f7ff febc 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5478:	68e3      	ldr	r3, [r4, #12]
   b547a:	3b02      	subs	r3, #2
   b547c:	42ab      	cmp	r3, r5
   b547e:	d30d      	bcc.n	b549c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5480:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5482:	5b5a      	ldrh	r2, [r3, r5]
   b5484:	42b2      	cmp	r2, r6
   b5486:	d009      	beq.n	b549c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b5488:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b548a:	4620      	mov	r0, r4
   b548c:	68a5      	ldr	r5, [r4, #8]
   b548e:	f004 ff9f 	bl	ba3d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5492:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5494:	6823      	ldr	r3, [r4, #0]
   b5496:	4620      	mov	r0, r4
   b5498:	691b      	ldr	r3, [r3, #16]
   b549a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b549c:	6860      	ldr	r0, [r4, #4]
        }
   b549e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b54a2:	f005 b867 	b.w	ba574 <os_mutex_recursive_unlock>

000b54a6 <_ZN13sysStatusData12set_deviceIDEt>:
void sysStatusData::set_deviceID(uint16_t value) {
   b54a6:	b508      	push	{r3, lr}
   b54a8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, deviceID), value);
   b54aa:	2110      	movs	r1, #16
   b54ac:	f7ff ffdd 	bl	b546a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54b0:	bd08      	pop	{r3, pc}

000b54b2 <_ZN13sysStatusData14set_nodeNumberEt>:
void sysStatusData::set_nodeNumber(uint16_t value) {
   b54b2:	b508      	push	{r3, lr}
   b54b4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, nodeNumber), value);
   b54b6:	2112      	movs	r1, #18
   b54b8:	f7ff ffd7 	bl	b546a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54bc:	bd08      	pop	{r3, pc}

000b54be <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b54be:	b508      	push	{r3, lr}
   b54c0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b54c2:	2134      	movs	r1, #52	; 0x34
   b54c4:	f7ff ffd1 	bl	b546a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54c8:	bd08      	pop	{r3, pc}

000b54ca <_ZN17currentStatusData12set_deviceIDEt>:
void currentStatusData::set_deviceID(uint16_t value) {
   b54ca:	b508      	push	{r3, lr}
   b54cc:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, deviceID), value);
   b54ce:	2110      	movs	r1, #16
   b54d0:	f7ff ffcb 	bl	b546a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54d4:	bd08      	pop	{r3, pc}

000b54d6 <_ZN17currentStatusData14set_nodeNumberEt>:
void currentStatusData::set_nodeNumber(uint16_t value) {
   b54d6:	b508      	push	{r3, lr}
   b54d8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, nodeNumber), value);
   b54da:	2112      	movs	r1, #18
   b54dc:	f7ff ffc5 	bl	b546a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54e0:	bd08      	pop	{r3, pc}

000b54e2 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b54e2:	b508      	push	{r3, lr}
   b54e4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b54e6:	2130      	movs	r1, #48	; 0x30
   b54e8:	f7ff ffbf 	bl	b546a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54ec:	bd08      	pop	{r3, pc}

000b54ee <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b54ee:	b508      	push	{r3, lr}
   b54f0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b54f2:	2140      	movs	r1, #64	; 0x40
   b54f4:	f7ff ffb9 	bl	b546a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54f8:	bd08      	pop	{r3, pc}

000b54fa <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b54fa:	b508      	push	{r3, lr}
   b54fc:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b54fe:	2142      	movs	r1, #66	; 0x42
   b5500:	f7ff ffb3 	bl	b546a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5504:	bd08      	pop	{r3, pc}

000b5506 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5506:	b538      	push	{r3, r4, r5, lr}
   b5508:	4604      	mov	r4, r0
   b550a:	3004      	adds	r0, #4
   b550c:	460d      	mov	r5, r1
   b550e:	f7ff fe6f 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5512:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5514:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5516:	3b01      	subs	r3, #1
   b5518:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b551a:	bf26      	itte	cs
   b551c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b551e:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5520:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5522:	f005 f827 	bl	ba574 <os_mutex_recursive_unlock>
        }
   b5526:	4628      	mov	r0, r5
   b5528:	bd38      	pop	{r3, r4, r5, pc}

000b552a <_ZNK13sysStatusData21get_structuresVersionEv>:
uint8_t sysStatusData::get_structuresVersion() const {
   b552a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, structuresVersion));
   b552c:	2114      	movs	r1, #20
   b552e:	f7ff ffea 	bl	b5506 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5532:	bd08      	pop	{r3, pc}

000b5534 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5534:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5536:	2118      	movs	r1, #24
   b5538:	f7ff ffe5 	bl	b5506 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b553c:	bd08      	pop	{r3, pc}

000b553e <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b553e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5540:	2114      	movs	r1, #20
   b5542:	f7ff ffe0 	bl	b5506 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5546:	bd08      	pop	{r3, pc}

000b5548 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5548:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b554a:	2120      	movs	r1, #32
   b554c:	f7ff ffdb 	bl	b5506 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5550:	bd08      	pop	{r3, pc}

000b5552 <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b5552:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b5554:	2132      	movs	r1, #50	; 0x32
   b5556:	f7ff ffd6 	bl	b5506 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b555a:	bd08      	pop	{r3, pc}

000b555c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b555c:	b570      	push	{r4, r5, r6, lr}
   b555e:	4604      	mov	r4, r0
   b5560:	3004      	adds	r0, #4
   b5562:	460d      	mov	r5, r1
   b5564:	4616      	mov	r6, r2
   b5566:	f7ff fe43 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b556a:	68e3      	ldr	r3, [r4, #12]
   b556c:	3b01      	subs	r3, #1
   b556e:	42ab      	cmp	r3, r5
   b5570:	d30d      	bcc.n	b558e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5572:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5574:	5d5a      	ldrb	r2, [r3, r5]
   b5576:	42b2      	cmp	r2, r6
   b5578:	d009      	beq.n	b558e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b557a:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b557c:	4620      	mov	r0, r4
   b557e:	68a5      	ldr	r5, [r4, #8]
   b5580:	f004 ff26 	bl	ba3d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5584:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5586:	6823      	ldr	r3, [r4, #0]
   b5588:	4620      	mov	r0, r4
   b558a:	691b      	ldr	r3, [r3, #16]
   b558c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b558e:	6860      	ldr	r0, [r4, #4]
        }
   b5590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5594:	f004 bfee 	b.w	ba574 <os_mutex_recursive_unlock>

000b5598 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b5598:	b508      	push	{r3, lr}
   b559a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b559c:	2114      	movs	r1, #20
   b559e:	f7ff ffdd 	bl	b555c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b55a2:	bd08      	pop	{r3, pc}

000b55a4 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b55a4:	b508      	push	{r3, lr}
   b55a6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b55a8:	2114      	movs	r1, #20
   b55aa:	f7ff ffd7 	bl	b555c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b55ae:	bd08      	pop	{r3, pc}

000b55b0 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b55b0:	b508      	push	{r3, lr}
   b55b2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b55b4:	2120      	movs	r1, #32
   b55b6:	f7ff ffd1 	bl	b555c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b55ba:	bd08      	pop	{r3, pc}

000b55bc <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b55bc:	b508      	push	{r3, lr}
   b55be:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b55c0:	2132      	movs	r1, #50	; 0x32
   b55c2:	f7ff ffcb 	bl	b555c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b55c6:	bd08      	pop	{r3, pc}

000b55c8 <_ZN17currentStatusData17set_alertCodeNodeEh>:

uint8_t currentStatusData::get_alertCodeNode() const {
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
}

void currentStatusData::set_alertCodeNode(uint8_t value) {
   b55c8:	b508      	push	{r3, lr}
   b55ca:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b55cc:	2144      	movs	r1, #68	; 0x44
   b55ce:	f7ff ffc5 	bl	b555c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b55d2:	bd08      	pop	{r3, pc}

000b55d4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b55d4:	b538      	push	{r3, r4, r5, lr}
   b55d6:	4604      	mov	r4, r0
   b55d8:	3004      	adds	r0, #4
   b55da:	460d      	mov	r5, r1
   b55dc:	f7ff fe08 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b55e0:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b55e2:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b55e4:	3b01      	subs	r3, #1
   b55e6:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b55e8:	bf26      	itte	cs
   b55ea:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b55ec:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b55ee:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b55f0:	f004 ffc0 	bl	ba574 <os_mutex_recursive_unlock>
        }
   b55f4:	4628      	mov	r0, r5
   b55f6:	bd38      	pop	{r3, r4, r5, pc}

000b55f8 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b55f8:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b55fa:	2117      	movs	r1, #23
   b55fc:	f7ff ffea 	bl	b55d4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5600:	bd08      	pop	{r3, pc}

000b5602 <_ZNK13sysStatusData14get_verizonSIMEv>:
bool sysStatusData::get_verizonSIM() const {
   b5602:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, verizonSIM));
   b5604:	2143      	movs	r1, #67	; 0x43
   b5606:	f7ff ffe5 	bl	b55d4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b560a:	bd08      	pop	{r3, pc}

000b560c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b560c:	b570      	push	{r4, r5, r6, lr}
   b560e:	4604      	mov	r4, r0
   b5610:	3004      	adds	r0, #4
   b5612:	460d      	mov	r5, r1
   b5614:	4616      	mov	r6, r2
   b5616:	f7ff fdeb 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b561a:	68e3      	ldr	r3, [r4, #12]
   b561c:	3b01      	subs	r3, #1
   b561e:	42ab      	cmp	r3, r5
   b5620:	d30d      	bcc.n	b563e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5622:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5624:	5d5a      	ldrb	r2, [r3, r5]
   b5626:	42b2      	cmp	r2, r6
   b5628:	d009      	beq.n	b563e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b562a:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b562c:	4620      	mov	r0, r4
   b562e:	68a5      	ldr	r5, [r4, #8]
   b5630:	f004 fece 	bl	ba3d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5634:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5636:	6823      	ldr	r3, [r4, #0]
   b5638:	4620      	mov	r0, r4
   b563a:	691b      	ldr	r3, [r3, #16]
   b563c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b563e:	6860      	ldr	r0, [r4, #4]
        }
   b5640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5644:	f004 bf96 	b.w	ba574 <os_mutex_recursive_unlock>

000b5648 <_ZN13sysStatusData16set_lowPowerModeEb>:
void sysStatusData::set_lowPowerMode(bool value) {
   b5648:	b508      	push	{r3, lr}
   b564a:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowPowerMode), value);
   b564c:	2117      	movs	r1, #23
   b564e:	f7ff ffdd 	bl	b560c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5652:	bd08      	pop	{r3, pc}

000b5654 <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b5654:	b508      	push	{r3, lr}
   b5656:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b5658:	2140      	movs	r1, #64	; 0x40
   b565a:	f7ff ffd7 	bl	b560c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b565e:	bd08      	pop	{r3, pc}

000b5660 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b5660:	b508      	push	{r3, lr}
   b5662:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b5664:	2143      	movs	r1, #67	; 0x43
   b5666:	f7ff ffd1 	bl	b560c <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b566a:	bd08      	pop	{r3, pc}

000b566c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b566e:	4604      	mov	r4, r0
   b5670:	3004      	adds	r0, #4
   b5672:	460d      	mov	r5, r1
   b5674:	f7ff fdbc 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5678:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b567a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b567c:	3b08      	subs	r3, #8
   b567e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5680:	bf23      	ittte	cs
   b5682:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5684:	1949      	addcs	r1, r1, r5
   b5686:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b568a:	2600      	movcc	r6, #0
   b568c:	bf38      	it	cc
   b568e:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5690:	f004 ff70 	bl	ba574 <os_mutex_recursive_unlock>
        }
   b5694:	4630      	mov	r0, r6
   b5696:	4639      	mov	r1, r7
   b5698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b569a <_ZNK13sysStatusData20get_lastHookResponseEv>:
time_t sysStatusData::get_lastHookResponse() const {
   b569a:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastHookResponse));
   b569c:	2120      	movs	r1, #32
   b569e:	f7ff ffe5 	bl	b566c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b56a2:	bd08      	pop	{r3, pc}

000b56a4 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b56a4:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b56a6:	2128      	movs	r1, #40	; 0x28
   b56a8:	f7ff ffe0 	bl	b566c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b56ac:	bd08      	pop	{r3, pc}

000b56ae <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b56ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56b0:	4604      	mov	r4, r0
   b56b2:	3004      	adds	r0, #4
   b56b4:	460d      	mov	r5, r1
   b56b6:	461e      	mov	r6, r3
   b56b8:	4617      	mov	r7, r2
   b56ba:	f7ff fd99 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b56be:	68e3      	ldr	r3, [r4, #12]
   b56c0:	3b08      	subs	r3, #8
   b56c2:	42ab      	cmp	r3, r5
   b56c4:	d312      	bcc.n	b56ec <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b56c6:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b56c8:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b56ca:	5958      	ldr	r0, [r3, r5]
   b56cc:	6851      	ldr	r1, [r2, #4]
   b56ce:	42b1      	cmp	r1, r6
   b56d0:	bf08      	it	eq
   b56d2:	42b8      	cmpeq	r0, r7
   b56d4:	d00a      	beq.n	b56ec <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b56d6:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b56d8:	4620      	mov	r0, r4
                        *(T *)p = value;
   b56da:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b56dc:	68a5      	ldr	r5, [r4, #8]
   b56de:	f004 fe77 	bl	ba3d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b56e2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b56e4:	6823      	ldr	r3, [r4, #0]
   b56e6:	4620      	mov	r0, r4
   b56e8:	691b      	ldr	r3, [r3, #16]
   b56ea:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b56ec:	6860      	ldr	r0, [r4, #4]
        }
   b56ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b56f2:	f004 bf3f 	b.w	ba574 <os_mutex_recursive_unlock>

000b56f6 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b56f6:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b56f8:	2128      	movs	r1, #40	; 0x28
   b56fa:	f7ff ffd8 	bl	b56ae <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b56fe:	bd08      	pop	{r3, pc}

000b5700 <_ZN17currentStatusData22set_alertTimestampNodeEx>:

time_t currentStatusData::get_alertTimestampNode() const {
    return getValue<time_t>(offsetof(CurrentData, alertTimestampNode));
}

void currentStatusData::set_alertTimestampNode(time_t value) {
   b5700:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b5702:	2148      	movs	r1, #72	; 0x48
   b5704:	f7ff ffd3 	bl	b56ae <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5708:	bd08      	pop	{r3, pc}
	...

000b570c <_GLOBAL__sub_I_fram>:
   b570c:	4b08      	ldr	r3, [pc, #32]	; (b5730 <_GLOBAL__sub_I_fram+0x24>)
   b570e:	2201      	movs	r2, #1

void currentStatusData::logData(const char *msg) {
    Log.info("Current Structure values - %d, %d, %d, %4.2f", currentData.deviceID, currentData.nodeNumber, currentData.internalTempC, currentData.stateOfCharge);
}
   b5710:	b510      	push	{r4, lr}
   b5712:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b5714:	f008 fc7e 	bl	be014 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5718:	4c06      	ldr	r4, [pc, #24]	; (b5734 <_GLOBAL__sub_I_fram+0x28>)
   b571a:	4601      	mov	r1, r0
   b571c:	2300      	movs	r3, #0
   b571e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5722:	4620      	mov	r0, r4
   b5724:	f002 f95a 	bl	b79dc <_ZN6MB85RCC1ER7TwoWireji>
   b5728:	4b03      	ldr	r3, [pc, #12]	; (b5738 <_GLOBAL__sub_I_fram+0x2c>)
   b572a:	6023      	str	r3, [r4, #0]
}
   b572c:	bd10      	pop	{r4, pc}
   b572e:	bf00      	nop
   b5730:	2003e3e2 	.word	0x2003e3e2
   b5734:	2003e3ec 	.word	0x2003e3ec
   b5738:	000bf698 	.word	0x000bf698

000b573c <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b573c:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b573e:	4913      	ldr	r1, [pc, #76]	; (b578c <_Z18initializePinModesv+0x50>)
   b5740:	4813      	ldr	r0, [pc, #76]	; (b5790 <_Z18initializePinModesv+0x54>)
   b5742:	f7fe fccb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5746:	2102      	movs	r1, #2
   b5748:	2004      	movs	r0, #4
   b574a:	f008 fbe1 	bl	bdf10 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b574e:	2100      	movs	r1, #0
   b5750:	2008      	movs	r0, #8
   b5752:	f008 fbdd 	bl	bdf10 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b5756:	2101      	movs	r1, #1
   b5758:	2007      	movs	r0, #7
   b575a:	f008 fbd9 	bl	bdf10 <pinMode>
    pinMode(INT_PIN, INPUT);
   b575e:	2100      	movs	r1, #0
   b5760:	2012      	movs	r0, #18
   b5762:	f008 fbd5 	bl	bdf10 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b5766:	2101      	movs	r1, #1
   b5768:	2011      	movs	r0, #17
   b576a:	f008 fbd1 	bl	bdf10 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b576e:	2101      	movs	r1, #1
   b5770:	2010      	movs	r0, #16
   b5772:	f008 fbcd 	bl	bdf10 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b5776:	2100      	movs	r1, #0
   b5778:	2010      	movs	r0, #16
   b577a:	f008 fbda 	bl	bdf32 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b577e:	2100      	movs	r1, #0
   b5780:	2011      	movs	r0, #17
   b5782:	f008 fbd6 	bl	bdf32 <digitalWrite>
    return true;
}
   b5786:	2001      	movs	r0, #1
   b5788:	bd08      	pop	{r3, pc}
   b578a:	bf00      	nop
   b578c:	000bf704 	.word	0x000bf704
   b5790:	2003e658 	.word	0x2003e658

000b5794 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b5794:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5796:	4918      	ldr	r1, [pc, #96]	; (b57f8 <_Z18initializePowerCfgv+0x64>)
   b5798:	4818      	ldr	r0, [pc, #96]	; (b57fc <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b579a:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b579c:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b579e:	f7fe fc9d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b57a2:	4622      	mov	r2, r4
   b57a4:	2100      	movs	r1, #0
   b57a6:	4668      	mov	r0, sp
   b57a8:	f009 f9f8 	bl	beb9c <memset>
   b57ac:	4622      	mov	r2, r4
   b57ae:	2100      	movs	r1, #0
   b57b0:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b57b4:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b57b8:	f009 f9f0 	bl	beb9c <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b57bc:	2100      	movs	r1, #0
   b57be:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b57c2:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b57c6:	f005 f9c3 	bl	bab50 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b57ca:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b57ce:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b57d2:	4b0b      	ldr	r3, [pc, #44]	; (b5800 <_Z18initializePowerCfgv+0x6c>)
   b57d4:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b57d6:	f241 0370 	movw	r3, #4208	; 0x1070
   b57da:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b57de:	9b00      	ldr	r3, [sp, #0]
   b57e0:	2100      	movs	r1, #0
   b57e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b57e6:	4668      	mov	r0, sp
   b57e8:	9300      	str	r3, [sp, #0]
   b57ea:	f005 f9b1 	bl	bab50 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b57ee:	3800      	subs	r0, #0
   b57f0:	bf18      	it	ne
   b57f2:	2001      	movne	r0, #1
   b57f4:	b010      	add	sp, #64	; 0x40
   b57f6:	bd10      	pop	{r4, pc}
   b57f8:	000bf71d 	.word	0x000bf71d
   b57fc:	2003e658 	.word	0x2003e658
   b5800:	03840384 	.word	0x03840384

000b5804 <_Z20setNodeConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setNodeConfiguration() {
   b5804:	b508      	push	{r3, lr}
  Log.info("Setting values for the node");
   b5806:	4905      	ldr	r1, [pc, #20]	; (b581c <_Z20setNodeConfigurationv+0x18>)
   b5808:	4805      	ldr	r0, [pc, #20]	; (b5820 <_Z20setNodeConfigurationv+0x1c>)
   b580a:	f7fe fc67 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b580e:	f7ff fd43 	bl	b5298 <_ZN13sysStatusData8instanceEv>
  // sysStatus.set_deviceID(32148);
   b5812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b5816:	2101      	movs	r1, #1
   b5818:	f7ff bf1c 	b.w	b5654 <_ZN13sysStatusData14set_sensorTypeEb>
   b581c:	000bf742 	.word	0x000bf742
   b5820:	2003e658 	.word	0x2003e658

000b5824 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b5824:	4770      	bx	lr

000b5826 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b5826:	6a00      	ldr	r0, [r0, #32]
   b5828:	6803      	ldr	r3, [r0, #0]
   b582a:	68db      	ldr	r3, [r3, #12]
   b582c:	4718      	bx	r3
	...

000b5830 <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b5830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5832:	4604      	mov	r4, r0
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.get_frequencyMinutes());
   b5834:	f7ff fd30 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5838:	f7ff fdf9 	bl	b542e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b583c:	4a06      	ldr	r2, [pc, #24]	; (b5858 <_Z15reportFrequencyv+0x28>)
   b583e:	4603      	mov	r3, r0
   b5840:	2110      	movs	r1, #16
   b5842:	4668      	mov	r0, sp
   b5844:	f005 fa82 	bl	bad4c <snprintf>
    return reportStr;
   b5848:	4669      	mov	r1, sp
   b584a:	4620      	mov	r0, r4
   b584c:	f007 fe0d 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5850:	4620      	mov	r0, r4
   b5852:	b004      	add	sp, #16
   b5854:	bd10      	pop	{r4, pc}
   b5856:	bf00      	nop
   b5858:	000bf75e 	.word	0x000bf75e

000b585c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b585c:	b530      	push	{r4, r5, lr}
   b585e:	b085      	sub	sp, #20
   b5860:	4603      	mov	r3, r0
   b5862:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b5864:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5866:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b5868:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b586a:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b586c:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b586e:	f005 fa45 	bl	bacfc <malloc>
   b5872:	6028      	str	r0, [r5, #0]
        if (!data) {
   b5874:	b150      	cbz	r0, b588c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b5876:	6822      	ldr	r2, [r4, #0]
   b5878:	9900      	ldr	r1, [sp, #0]
   b587a:	f009 f967 	bl	beb4c <memcpy>
        return 0;
   b587e:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b5880:	4668      	mov	r0, sp
   b5882:	f007 fda7 	bl	bd3d4 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5886:	4620      	mov	r0, r4
   b5888:	b005      	add	sp, #20
   b588a:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b588c:	4c00      	ldr	r4, [pc, #0]	; (b5890 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b588e:	e7f7      	b.n	b5880 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b5890:	fffffefc 	.word	0xfffffefc

000b5894 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5894:	2300      	movs	r3, #0
   b5896:	2204      	movs	r2, #4
   b5898:	f005 b978 	b.w	bab8c <spark_variable>

000b589c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b589c:	4b0a      	ldr	r3, [pc, #40]	; (b58c8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b589e:	b510      	push	{r4, lr}
   b58a0:	4604      	mov	r4, r0
   b58a2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b58a4:	f006 fc08 	bl	bc0b8 <_ZN5spark10LogManager8instanceEv>
   b58a8:	4621      	mov	r1, r4
   b58aa:	f006 fe0c 	bl	bc4c6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b58ae:	f008 fa17 	bl	bdce0 <_Z16_fetch_usbserialv>
   b58b2:	f008 fa07 	bl	bdcc4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b58b6:	4620      	mov	r0, r4
   b58b8:	4b04      	ldr	r3, [pc, #16]	; (b58cc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b58ba:	f840 3b04 	str.w	r3, [r0], #4
   b58be:	f006 fc9d 	bl	bc1fc <_ZN5spark6detail9LogFilterD1Ev>
    }
   b58c2:	4620      	mov	r0, r4
   b58c4:	bd10      	pop	{r4, pc}
   b58c6:	bf00      	nop
   b58c8:	000bfa24 	.word	0x000bfa24
   b58cc:	000bfa0c 	.word	0x000bfa0c

000b58d0 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b58d0:	b510      	push	{r4, lr}
   b58d2:	4604      	mov	r4, r0
    }
   b58d4:	f7ff ffe2 	bl	b589c <_ZN5spark16SerialLogHandlerD1Ev>
   b58d8:	4620      	mov	r0, r4
   b58da:	2124      	movs	r1, #36	; 0x24
   b58dc:	f7fe fbdf 	bl	b409e <_ZdlPvj>
   b58e0:	4620      	mov	r0, r4
   b58e2:	bd10      	pop	{r4, pc}

000b58e4 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b58e4:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b58e6:	2301      	movs	r3, #1
   b58e8:	2208      	movs	r2, #8
   b58ea:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b58ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b58f2:	2300      	movs	r3, #0
   b58f4:	4341      	muls	r1, r0
   b58f6:	466a      	mov	r2, sp
   b58f8:	4618      	mov	r0, r3
   b58fa:	f005 f987 	bl	bac0c <spark_set_connection_property>
    }
   b58fe:	b003      	add	sp, #12
   b5900:	f85d fb04 	ldr.w	pc, [sp], #4

000b5904 <_Z18particleInitializev>:
 * @brief Initializes the Particle functions and variables
 * 
 * @details If new particles of functions are defined, they need to be initialized here
 * 
 */
void particleInitialize() {
   b5904:	b510      	push	{r4, lr}
   b5906:	b08c      	sub	sp, #48	; 0x30
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5908:	4b3c      	ldr	r3, [pc, #240]	; (b59fc <_Z18particleInitializev+0xf8>)
   b590a:	9304      	str	r3, [sp, #16]
   b590c:	4b3c      	ldr	r3, [pc, #240]	; (b5a00 <_Z18particleInitializev+0xfc>)
   b590e:	9305      	str	r3, [sp, #20]
   b5910:	4b3c      	ldr	r3, [pc, #240]	; (b5a04 <_Z18particleInitializev+0x100>)
   b5912:	9306      	str	r3, [sp, #24]
   b5914:	4b3c      	ldr	r3, [pc, #240]	; (b5a08 <_Z18particleInitializev+0x104>)
   b5916:	9307      	str	r3, [sp, #28]
   b5918:	4b3c      	ldr	r3, [pc, #240]	; (b5a0c <_Z18particleInitializev+0x108>)
   b591a:	9308      	str	r3, [sp, #32]
   b591c:	4b3c      	ldr	r3, [pc, #240]	; (b5a10 <_Z18particleInitializev+0x10c>)

  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b591e:	493d      	ldr	r1, [pc, #244]	; (b5a14 <_Z18particleInitializev+0x110>)
   b5920:	483d      	ldr	r0, [pc, #244]	; (b5a18 <_Z18particleInitializev+0x114>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5922:	9309      	str	r3, [sp, #36]	; 0x24
   b5924:	2400      	movs	r4, #0
   b5926:	4b3d      	ldr	r3, [pc, #244]	; (b5a1c <_Z18particleInitializev+0x118>)
   b5928:	930a      	str	r3, [sp, #40]	; 0x28
   b592a:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b592c:	f7fe fbd6 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  Particle.variable("Low Power Mode",(sysStatus.get_lowPowerMode()) ? "Yes" : "No");
   b5930:	f7ff fcb2 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5934:	f7ff fe60 	bl	b55f8 <_ZNK13sysStatusData16get_lowPowerModeEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5938:	4a39      	ldr	r2, [pc, #228]	; (b5a20 <_Z18particleInitializev+0x11c>)
   b593a:	493a      	ldr	r1, [pc, #232]	; (b5a24 <_Z18particleInitializev+0x120>)
   b593c:	42a0      	cmp	r0, r4
   b593e:	bf18      	it	ne
   b5940:	4611      	movne	r1, r2
   b5942:	4839      	ldr	r0, [pc, #228]	; (b5a28 <_Z18particleInitializev+0x124>)
   b5944:	f7ff ffa6 	bl	b5894 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5948:	4938      	ldr	r1, [pc, #224]	; (b5a2c <_Z18particleInitializev+0x128>)
   b594a:	4839      	ldr	r0, [pc, #228]	; (b5a30 <_Z18particleInitializev+0x12c>)
   b594c:	f7ff ffa2 	bl	b5894 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5950:	4938      	ldr	r1, [pc, #224]	; (b5a34 <_Z18particleInitializev+0x130>)
   b5952:	4839      	ldr	r0, [pc, #228]	; (b5a38 <_Z18particleInitializev+0x134>)
   b5954:	f7ff ff9e 	bl	b5894 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
  Particle.variable("Release",currentPointRelease);   
  Particle.variable("Signal", signalStr);
  Particle.variable("stateOfChg", current.get_stateOfCharge());
   b5958:	f7ff fcee 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b595c:	f7ff fd08 	bl	b5370 <_ZNK17currentStatusData17get_stateOfChargeEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5960:	4623      	mov	r3, r4
   b5962:	2209      	movs	r2, #9
   b5964:	4669      	mov	r1, sp
   b5966:	4835      	ldr	r0, [pc, #212]	; (b5a3c <_Z18particleInitializev+0x138>)
   b5968:	ed8d 0b00 	vstr	d0, [sp]
   b596c:	f005 f90e 	bl	bab8c <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.get_batteryState()]);
   b5970:	f7ff fce2 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b5974:	f7ff fde8 	bl	b5548 <_ZNK17currentStatusData16get_batteryStateEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b5978:	ab0c      	add	r3, sp, #48	; 0x30
   b597a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b597e:	f850 1c20 	ldr.w	r1, [r0, #-32]
   b5982:	482f      	ldr	r0, [pc, #188]	; (b5a40 <_Z18particleInitializev+0x13c>)
   b5984:	f7ff ff86 	bl	b5894 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        extra.size = sizeof(extra);
   b5988:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b598a:	e9cd 4400 	strd	r4, r4, [sp]
        extra.size = sizeof(extra);
   b598e:	f8ad 3000 	strh.w	r3, [sp]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5992:	4b2c      	ldr	r3, [pc, #176]	; (b5a44 <_Z18particleInitializev+0x140>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b5994:	492c      	ldr	r1, [pc, #176]	; (b5a48 <_Z18particleInitializev+0x144>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5996:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b5998:	2204      	movs	r2, #4
   b599a:	466b      	mov	r3, sp
   b599c:	482b      	ldr	r0, [pc, #172]	; (b5a4c <_Z18particleInitializev+0x148>)
   b599e:	f005 f8f5 	bl	bab8c <spark_variable>
  Particle.variable("Reporting Frequency", reportFrequency);
  Particle.variable("SIM Card", (sysStatus.get_verizonSIM()) ? "Verizon" : "Particle");
   b59a2:	f7ff fc79 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b59a6:	f7ff fe2c 	bl	b5602 <_ZNK13sysStatusData14get_verizonSIMEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b59aa:	4a29      	ldr	r2, [pc, #164]	; (b5a50 <_Z18particleInitializev+0x14c>)
   b59ac:	4929      	ldr	r1, [pc, #164]	; (b5a54 <_Z18particleInitializev+0x150>)
   b59ae:	42a0      	cmp	r0, r4
   b59b0:	bf18      	it	ne
   b59b2:	4611      	movne	r1, r2
   b59b4:	4828      	ldr	r0, [pc, #160]	; (b5a58 <_Z18particleInitializev+0x154>)
   b59b6:	f7ff ff6d 	bl	b5894 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b59ba:	4a28      	ldr	r2, [pc, #160]	; (b5a5c <_Z18particleInitializev+0x158>)
   b59bc:	4928      	ldr	r1, [pc, #160]	; (b5a60 <_Z18particleInitializev+0x15c>)
   b59be:	4829      	ldr	r0, [pc, #164]	; (b5a64 <_Z18particleInitializev+0x160>)
   b59c0:	f005 fbd9 	bl	bb176 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b59c4:	4a28      	ldr	r2, [pc, #160]	; (b5a68 <_Z18particleInitializev+0x164>)
   b59c6:	4929      	ldr	r1, [pc, #164]	; (b5a6c <_Z18particleInitializev+0x168>)
   b59c8:	4826      	ldr	r0, [pc, #152]	; (b5a64 <_Z18particleInitializev+0x160>)
   b59ca:	f005 fbd4 	bl	bb176 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b59ce:	4a22      	ldr	r2, [pc, #136]	; (b5a58 <_Z18particleInitializev+0x154>)
   b59d0:	4927      	ldr	r1, [pc, #156]	; (b5a70 <_Z18particleInitializev+0x16c>)
   b59d2:	4824      	ldr	r0, [pc, #144]	; (b5a64 <_Z18particleInitializev+0x160>)
   b59d4:	f005 fbcf 	bl	bb176 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Set Frequency", setFrequency);
  // Particle.function("Set Wake Time", setWakeTime);
  // Particle.function("Set Sleep Time", setSleepTime);
  Particle.function("SIM Card", setVerizonSIM);

  if (!digitalRead(BUTTON_PIN)) {
   b59d8:	4b26      	ldr	r3, [pc, #152]	; (b5a74 <_Z18particleInitializev+0x170>)
   b59da:	8818      	ldrh	r0, [r3, #0]
   b59dc:	f008 fac2 	bl	bdf64 <digitalRead>
   b59e0:	4604      	mov	r4, r0
   b59e2:	b930      	cbnz	r0, b59f2 <_Z18particleInitializev+0xee>
    sysStatus.set_lowPowerMode(false);     // If the user button is held down while resetting - diable sleep
   b59e4:	f7ff fc58 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b59e8:	4621      	mov	r1, r4
   b59ea:	f7ff fe2d 	bl	b5648 <_ZN13sysStatusData16set_lowPowerModeEb>
        spark_cloud_flag_connect();
   b59ee:	f005 f8e5 	bl	babbc <spark_cloud_flag_connect>
  */

  takeMeasurements();                               // Initialize sensor values

  // makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
}
   b59f2:	b00c      	add	sp, #48	; 0x30
   b59f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  takeMeasurements();                               // Initialize sensor values
   b59f8:	f000 bba8 	b.w	b614c <_Z16takeMeasurementsv>
   b59fc:	000bf778 	.word	0x000bf778
   b5a00:	000bf780 	.word	0x000bf780
   b5a04:	000bf784 	.word	0x000bf784
   b5a08:	000bf78d 	.word	0x000bf78d
   b5a0c:	000bf795 	.word	0x000bf795
   b5a10:	000bf7a1 	.word	0x000bf7a1
   b5a14:	000bf7b3 	.word	0x000bf7b3
   b5a18:	2003e658 	.word	0x2003e658
   b5a1c:	000bf7a7 	.word	0x000bf7a7
   b5a20:	000bf769 	.word	0x000bf769
   b5a24:	000bf76d 	.word	0x000bf76d
   b5a28:	000bf7e1 	.word	0x000bf7e1
   b5a2c:	2003ddc0 	.word	0x2003ddc0
   b5a30:	000bf7f0 	.word	0x000bf7f0
   b5a34:	2003de8c 	.word	0x2003de8c
   b5a38:	000bf7f8 	.word	0x000bf7f8
   b5a3c:	000bf7ff 	.word	0x000bf7ff
   b5a40:	000bf80a 	.word	0x000bf80a
   b5a44:	000b585d 	.word	0x000b585d
   b5a48:	000b5831 	.word	0x000b5831
   b5a4c:	000bf819 	.word	0x000bf819
   b5a50:	000bf770 	.word	0x000bf770
   b5a54:	000bf97e 	.word	0x000bf97e
   b5a58:	000bf82d 	.word	0x000bf82d
   b5a5c:	000bf836 	.word	0x000bf836
   b5a60:	000b5b3d 	.word	0x000b5b3d
   b5a64:	000bb14b 	.word	0x000bb14b
   b5a68:	000bf844 	.word	0x000bf844
   b5a6c:	000b5aa5 	.word	0x000b5aa5
   b5a70:	000b5c11 	.word	0x000b5c11
   b5a74:	000bf73a 	.word	0x000bf73a

000b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5a78:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5a7a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5a7c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5a7e:	b17c      	cbz	r4, b5aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5a80:	6863      	ldr	r3, [r4, #4]
   b5a82:	3b01      	subs	r3, #1
   b5a84:	6063      	str	r3, [r4, #4]
   b5a86:	b95b      	cbnz	r3, b5aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5a88:	6823      	ldr	r3, [r4, #0]
   b5a8a:	4620      	mov	r0, r4
   b5a8c:	689b      	ldr	r3, [r3, #8]
   b5a8e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5a90:	68a3      	ldr	r3, [r4, #8]
   b5a92:	3b01      	subs	r3, #1
   b5a94:	60a3      	str	r3, [r4, #8]
   b5a96:	b91b      	cbnz	r3, b5aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5a98:	6823      	ldr	r3, [r4, #0]
   b5a9a:	4620      	mov	r0, r4
   b5a9c:	68db      	ldr	r3, [r3, #12]
   b5a9e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5aa0:	4628      	mov	r0, r5
   b5aa2:	bd38      	pop	{r3, r4, r5, pc}

000b5aa4 <_Z12setFrequency6String>:
 * sets an interim value for reporting frequency which takes effect once sent to a new node.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setFrequency(String command)
{
   b5aa4:	b530      	push	{r4, r5, lr}
   b5aa6:	b0c7      	sub	sp, #284	; 0x11c
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b5aa8:	6800      	ldr	r0, [r0, #0]
   b5aaa:	220a      	movs	r2, #10
   b5aac:	a903      	add	r1, sp, #12
   b5aae:	f009 fa21 	bl	beef4 <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b5ab2:	2878      	cmp	r0, #120	; 0x78
   b5ab4:	d831      	bhi.n	b5b1a <_Z12setFrequency6String+0x76>
  updatedFrequencyMins = tempTime;
   b5ab6:	4d1a      	ldr	r5, [pc, #104]	; (b5b20 <_Z12setFrequency6String+0x7c>)
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b5ab8:	280b      	cmp	r0, #11
  updatedFrequencyMins = tempTime;
   b5aba:	8028      	strh	r0, [r5, #0]
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b5abc:	dc0d      	bgt.n	b5ada <_Z12setFrequency6String+0x36>
   b5abe:	f7ff fbeb 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5ac2:	f7ff fd99 	bl	b55f8 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5ac6:	b140      	cbz	r0, b5ada <_Z12setFrequency6String+0x36>
    Log.info("Short reporting frequency over-rides low power");
   b5ac8:	4916      	ldr	r1, [pc, #88]	; (b5b24 <_Z12setFrequency6String+0x80>)
   b5aca:	4817      	ldr	r0, [pc, #92]	; (b5b28 <_Z12setFrequency6String+0x84>)
   b5acc:	f7fe fb06 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_lowPowerMode(false);
   b5ad0:	f7ff fbe2 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5ad4:	2100      	movs	r1, #0
   b5ad6:	f7ff fdb7 	bl	b5648 <_ZN13sysStatusData16set_lowPowerModeEb>
  }
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b5ada:	4b14      	ldr	r3, [pc, #80]	; (b5b2c <_Z12setFrequency6String+0x88>)
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b5adc:	4a14      	ldr	r2, [pc, #80]	; (b5b30 <_Z12setFrequency6String+0x8c>)
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b5ade:	2401      	movs	r4, #1
   b5ae0:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b5ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5ae6:	882b      	ldrh	r3, [r5, #0]
   b5ae8:	a806      	add	r0, sp, #24
   b5aea:	f005 f92f 	bl	bad4c <snprintf>
  Log.info(data);
   b5aee:	480e      	ldr	r0, [pc, #56]	; (b5b28 <_Z12setFrequency6String+0x84>)
   b5af0:	a906      	add	r1, sp, #24
   b5af2:	f7fe faf3 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5af6:	f005 f869 	bl	babcc <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b5afa:	b160      	cbz	r0, b5b16 <_Z12setFrequency6String+0x72>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5afc:	4b0d      	ldr	r3, [pc, #52]	; (b5b34 <_Z12setFrequency6String+0x90>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5afe:	490e      	ldr	r1, [pc, #56]	; (b5b38 <_Z12setFrequency6String+0x94>)
   b5b00:	781b      	ldrb	r3, [r3, #0]
   b5b02:	f88d 3000 	strb.w	r3, [sp]
   b5b06:	a804      	add	r0, sp, #16
   b5b08:	233c      	movs	r3, #60	; 0x3c
   b5b0a:	aa06      	add	r2, sp, #24
   b5b0c:	f005 fc44 	bl	bb398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5b10:	a805      	add	r0, sp, #20
   b5b12:	f7ff ffb1 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b5b16:	4620      	mov	r0, r4
   b5b18:	e000      	b.n	b5b1c <_Z12setFrequency6String+0x78>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b5b1a:	2000      	movs	r0, #0
}
   b5b1c:	b047      	add	sp, #284	; 0x11c
   b5b1e:	bd30      	pop	{r4, r5, pc}
   b5b20:	2003de5c 	.word	0x2003de5c
   b5b24:	000bf852 	.word	0x000bf852
   b5b28:	2003e658 	.word	0x2003e658
   b5b2c:	2003e409 	.word	0x2003e409
   b5b30:	000bf881 	.word	0x000bf881
   b5b34:	2003e408 	.word	0x2003e408
   b5b38:	000bf8c1 	.word	0x000bf8c1

000b5b3c <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   b5b3c:	b510      	push	{r4, lr}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5b3e:	492a      	ldr	r1, [pc, #168]	; (b5be8 <_Z15setLowPowerMode6String+0xac>)
   b5b40:	b094      	sub	sp, #80	; 0x50
   b5b42:	4604      	mov	r4, r0
   b5b44:	f007 fd4a 	bl	bd5dc <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b5b48:	b158      	cbz	r0, b5b62 <_Z15setLowPowerMode6String+0x26>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5b4a:	4620      	mov	r0, r4
   b5b4c:	4926      	ldr	r1, [pc, #152]	; (b5be8 <_Z15setLowPowerMode6String+0xac>)
   b5b4e:	f007 fd45 	bl	bd5dc <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   b5b52:	4604      	mov	r4, r0
   b5b54:	b968      	cbnz	r0, b5b72 <_Z15setLowPowerMode6String+0x36>
      sysStatus.set_frequencyMinutes(12);
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.set_lowPowerMode(false);
   b5b56:	f7ff fb9f 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5b5a:	4621      	mov	r1, r4
   b5b5c:	f7ff fd74 	bl	b5648 <_ZN13sysStatusData16set_lowPowerModeEb>
   b5b60:	e01e      	b.n	b5ba0 <_Z15setLowPowerMode6String+0x64>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5b62:	4922      	ldr	r1, [pc, #136]	; (b5bec <_Z15setLowPowerMode6String+0xb0>)
   b5b64:	4620      	mov	r0, r4
   b5b66:	f007 fd39 	bl	bd5dc <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b5b6a:	2800      	cmp	r0, #0
   b5b6c:	d1ed      	bne.n	b5b4a <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   b5b6e:	b014      	add	sp, #80	; 0x50
   b5b70:	bd10      	pop	{r4, pc}
    sysStatus.set_lowPowerMode(true);
   b5b72:	f7ff fb91 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5b76:	2101      	movs	r1, #1
   b5b78:	f7ff fd66 	bl	b5648 <_ZN13sysStatusData16set_lowPowerModeEb>
    if (sysStatus.get_frequencyMinutes() < 12 ) {                          // Need to increase reporting frequency to at least 12 mins for low power
   b5b7c:	f7ff fb8c 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5b80:	f7ff fc55 	bl	b542e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5b84:	280b      	cmp	r0, #11
   b5b86:	d80b      	bhi.n	b5ba0 <_Z15setLowPowerMode6String+0x64>
      Log.info("Increasing reporting frequency to 12 minutes");
   b5b88:	4919      	ldr	r1, [pc, #100]	; (b5bf0 <_Z15setLowPowerMode6String+0xb4>)
   b5b8a:	481a      	ldr	r0, [pc, #104]	; (b5bf4 <_Z15setLowPowerMode6String+0xb8>)
   b5b8c:	f7fe faa6 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.set_frequencyMinutes(12);
   b5b90:	f7ff fb82 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5b94:	210c      	movs	r1, #12
   b5b96:	f7ff fc92 	bl	b54be <_ZN13sysStatusData20set_frequencyMinutesEt>
      frequencyUpdated = true;
   b5b9a:	4b17      	ldr	r3, [pc, #92]	; (b5bf8 <_Z15setLowPowerMode6String+0xbc>)
   b5b9c:	2201      	movs	r2, #1
   b5b9e:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.get_lowPowerMode()) ? "yes" : "no");
   b5ba0:	f7ff fb7a 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5ba4:	f7ff fd28 	bl	b55f8 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5ba8:	4914      	ldr	r1, [pc, #80]	; (b5bfc <_Z15setLowPowerMode6String+0xc0>)
   b5baa:	4b15      	ldr	r3, [pc, #84]	; (b5c00 <_Z15setLowPowerMode6String+0xc4>)
   b5bac:	4a15      	ldr	r2, [pc, #84]	; (b5c04 <_Z15setLowPowerMode6String+0xc8>)
   b5bae:	2800      	cmp	r0, #0
   b5bb0:	bf18      	it	ne
   b5bb2:	460b      	movne	r3, r1
   b5bb4:	2140      	movs	r1, #64	; 0x40
   b5bb6:	a804      	add	r0, sp, #16
   b5bb8:	f005 f8c8 	bl	bad4c <snprintf>
  Log.info(data);
   b5bbc:	480d      	ldr	r0, [pc, #52]	; (b5bf4 <_Z15setLowPowerMode6String+0xb8>)
   b5bbe:	a904      	add	r1, sp, #16
   b5bc0:	f7fe fa8c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5bc4:	f005 f802 	bl	babcc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b5bc8:	b160      	cbz	r0, b5be4 <_Z15setLowPowerMode6String+0xa8>
   b5bca:	4b0f      	ldr	r3, [pc, #60]	; (b5c08 <_Z15setLowPowerMode6String+0xcc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5bcc:	490f      	ldr	r1, [pc, #60]	; (b5c0c <_Z15setLowPowerMode6String+0xd0>)
   b5bce:	781b      	ldrb	r3, [r3, #0]
   b5bd0:	f88d 3000 	strb.w	r3, [sp]
   b5bd4:	a802      	add	r0, sp, #8
   b5bd6:	233c      	movs	r3, #60	; 0x3c
   b5bd8:	aa04      	add	r2, sp, #16
   b5bda:	f005 fbdd 	bl	bb398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5bde:	a803      	add	r0, sp, #12
   b5be0:	f7ff ff4a 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b5be4:	2001      	movs	r0, #1
   b5be6:	e7c2      	b.n	b5b6e <_Z15setLowPowerMode6String+0x32>
   b5be8:	000bfa70 	.word	0x000bfa70
   b5bec:	000bfd68 	.word	0x000bfd68
   b5bf0:	000bf8cd 	.word	0x000bf8cd
   b5bf4:	2003e658 	.word	0x2003e658
   b5bf8:	2003e409 	.word	0x2003e409
   b5bfc:	000bf8c6 	.word	0x000bf8c6
   b5c00:	000bf8ca 	.word	0x000bf8ca
   b5c04:	000bf8fa 	.word	0x000bf8fa
   b5c08:	2003e408 	.word	0x2003e408
   b5c0c:	000bf7eb 	.word	0x000bf7eb

000b5c10 <_Z13setVerizonSIM6String>:
 * 
 * @param command  - 1 for Verizon and 0 for Particle (default)
 * @return int 
 */
int setVerizonSIM(String command)                                   // If we are using a Verizon SIM, we will need to execute "keepAlive" calls in the main loop when not in low power mode
{
   b5c10:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5c12:	491e      	ldr	r1, [pc, #120]	; (b5c8c <_Z13setVerizonSIM6String+0x7c>)
   b5c14:	b085      	sub	sp, #20
   b5c16:	4605      	mov	r5, r0
   b5c18:	f007 fce0 	bl	bd5dc <_ZNK6String6equalsEPKc>
  if (command == "1")
   b5c1c:	4604      	mov	r4, r0
   b5c1e:	b1d8      	cbz	r0, b5c58 <_Z13setVerizonSIM6String+0x48>
  {
    sysStatus.set_verizonSIM(true);
   b5c20:	f7ff fb3a 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5c24:	2101      	movs	r1, #1
   b5c26:	f7ff fd1b 	bl	b5660 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(60);                                         // send a ping every minute
   b5c2a:	203c      	movs	r0, #60	; 0x3c
   b5c2c:	f7ff fe5a 	bl	b58e4 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5c30:	f004 ffcc 	bl	babcc <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   b5c34:	b910      	cbnz	r0, b5c3c <_Z13setVerizonSIM6String+0x2c>
  else if (command == "0")
  {
    sysStatus.set_verizonSIM(false);
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
    return 1;
   b5c36:	2001      	movs	r0, #1
  }
  else return 0;
}
   b5c38:	b005      	add	sp, #20
   b5c3a:	bd30      	pop	{r4, r5, pc}
   b5c3c:	4b14      	ldr	r3, [pc, #80]	; (b5c90 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5c3e:	4a15      	ldr	r2, [pc, #84]	; (b5c94 <_Z13setVerizonSIM6String+0x84>)
   b5c40:	781b      	ldrb	r3, [r3, #0]
   b5c42:	f88d 3000 	strb.w	r3, [sp]
   b5c46:	233c      	movs	r3, #60	; 0x3c
   b5c48:	a802      	add	r0, sp, #8
   b5c4a:	4913      	ldr	r1, [pc, #76]	; (b5c98 <_Z13setVerizonSIM6String+0x88>)
   b5c4c:	f005 fba4 	bl	bb398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5c50:	a803      	add	r0, sp, #12
   b5c52:	f7ff ff11 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5c56:	e7ee      	b.n	b5c36 <_Z13setVerizonSIM6String+0x26>
   b5c58:	4910      	ldr	r1, [pc, #64]	; (b5c9c <_Z13setVerizonSIM6String+0x8c>)
   b5c5a:	4628      	mov	r0, r5
   b5c5c:	f007 fcbe 	bl	bd5dc <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b5c60:	2800      	cmp	r0, #0
   b5c62:	d0e9      	beq.n	b5c38 <_Z13setVerizonSIM6String+0x28>
    sysStatus.set_verizonSIM(false);
   b5c64:	f7ff fb18 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b5c68:	4621      	mov	r1, r4
   b5c6a:	f7ff fcf9 	bl	b5660 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b5c6e:	f240 5064 	movw	r0, #1380	; 0x564
   b5c72:	f7ff fe37 	bl	b58e4 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5c76:	f004 ffa9 	bl	babcc <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   b5c7a:	2800      	cmp	r0, #0
   b5c7c:	d0db      	beq.n	b5c36 <_Z13setVerizonSIM6String+0x26>
   b5c7e:	4b04      	ldr	r3, [pc, #16]	; (b5c90 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5c80:	4a07      	ldr	r2, [pc, #28]	; (b5ca0 <_Z13setVerizonSIM6String+0x90>)
   b5c82:	781b      	ldrb	r3, [r3, #0]
   b5c84:	f88d 3000 	strb.w	r3, [sp]
   b5c88:	233c      	movs	r3, #60	; 0x3c
   b5c8a:	e7dd      	b.n	b5c48 <_Z13setVerizonSIM6String+0x38>
   b5c8c:	000bfa70 	.word	0x000bfa70
   b5c90:	2003e408 	.word	0x2003e408
   b5c94:	000bf914 	.word	0x000bf914
   b5c98:	000bf7eb 	.word	0x000bf7eb
   b5c9c:	000bfd68 	.word	0x000bfd68
   b5ca0:	000bf927 	.word	0x000bf927

000b5ca4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ca4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5ca6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5caa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5cac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5cae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5cb2:	42ae      	cmp	r6, r5
   b5cb4:	d004      	beq.n	b5cc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5cb6:	4628      	mov	r0, r5
   b5cb8:	f007 fb8c 	bl	bd3d4 <_ZN6StringD1Ev>
   b5cbc:	3514      	adds	r5, #20
   b5cbe:	e7f8      	b.n	b5cb2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5cc0:	6820      	ldr	r0, [r4, #0]
   b5cc2:	f005 f823 	bl	bad0c <free>
    AllocatorT::free(data_);
}
   b5cc6:	4620      	mov	r0, r4
   b5cc8:	bd70      	pop	{r4, r5, r6, pc}

000b5cca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5cca:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cce:	4604      	mov	r4, r0
   b5cd0:	460d      	mov	r5, r1
   b5cd2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5cd4:	d916      	bls.n	b5d04 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5cd6:	4290      	cmp	r0, r2
   b5cd8:	d215      	bcs.n	b5d06 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5cda:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5cde:	1a75      	subs	r5, r6, r1
   b5ce0:	f1a1 0714 	sub.w	r7, r1, #20
   b5ce4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5ce6:	42b7      	cmp	r7, r6
   b5ce8:	d01c      	beq.n	b5d24 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5cea:	b12c      	cbz	r4, b5cf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5cec:	4631      	mov	r1, r6
   b5cee:	4620      	mov	r0, r4
   b5cf0:	f007 fbec 	bl	bd4cc <_ZN6StringC1EOS_>
   b5cf4:	7c33      	ldrb	r3, [r6, #16]
   b5cf6:	7423      	strb	r3, [r4, #16]
   b5cf8:	4630      	mov	r0, r6
   b5cfa:	f007 fb6b 	bl	bd3d4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5cfe:	3e14      	subs	r6, #20
   b5d00:	3c14      	subs	r4, #20
   b5d02:	e7f0      	b.n	b5ce6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5d04:	d00e      	beq.n	b5d24 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5d06:	42b5      	cmp	r5, r6
   b5d08:	d00c      	beq.n	b5d24 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5d0a:	b12c      	cbz	r4, b5d18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5d0c:	4629      	mov	r1, r5
   b5d0e:	4620      	mov	r0, r4
   b5d10:	f007 fbdc 	bl	bd4cc <_ZN6StringC1EOS_>
   b5d14:	7c2b      	ldrb	r3, [r5, #16]
   b5d16:	7423      	strb	r3, [r4, #16]
   b5d18:	4628      	mov	r0, r5
   b5d1a:	f007 fb5b 	bl	bd3d4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5d1e:	3514      	adds	r5, #20
   b5d20:	3414      	adds	r4, #20
   b5d22:	e7f0      	b.n	b5d06 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5d2a:	2300      	movs	r3, #0
   b5d2c:	e9c0 3300 	strd	r3, r3, [r0]
   b5d30:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d32:	684f      	ldr	r7, [r1, #4]
   b5d34:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d36:	4604      	mov	r4, r0
   b5d38:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d3a:	dd23      	ble.n	b5d84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5d3c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5d40:	fb08 f007 	mul.w	r0, r8, r7
   b5d44:	f004 ffda 	bl	bacfc <malloc>
            if (!d) {
   b5d48:	4605      	mov	r5, r0
   b5d4a:	b1d8      	cbz	r0, b5d84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5d4c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5d50:	fb08 1202 	mla	r2, r8, r2, r1
   b5d54:	f7ff ffb9 	bl	b5cca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5d58:	6820      	ldr	r0, [r4, #0]
   b5d5a:	f004 ffd7 	bl	bad0c <free>
        data_ = d;
   b5d5e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5d60:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5d62:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5d66:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5d6a:	45b8      	cmp	r8, r7
   b5d6c:	d008      	beq.n	b5d80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5d6e:	4639      	mov	r1, r7
   b5d70:	4628      	mov	r0, r5
   b5d72:	f007 fbc5 	bl	bd500 <_ZN6StringC1ERKS_>
   b5d76:	7c3b      	ldrb	r3, [r7, #16]
   b5d78:	742b      	strb	r3, [r5, #16]
   b5d7a:	3714      	adds	r7, #20
   b5d7c:	3514      	adds	r5, #20
   b5d7e:	e7f4      	b.n	b5d6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5d80:	6873      	ldr	r3, [r6, #4]
   b5d82:	6063      	str	r3, [r4, #4]
}
   b5d84:	4620      	mov	r0, r4
   b5d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5d8c <_GLOBAL__sub_I_SystemMode>:
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }

  else return 0;
   b5d8c:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b5d8e:	4b27      	ldr	r3, [pc, #156]	; (b5e2c <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b5d90:	4a27      	ldr	r2, [pc, #156]	; (b5e30 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b5d92:	2501      	movs	r5, #1
   b5d94:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5d96:	4b27      	ldr	r3, [pc, #156]	; (b5e34 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b5d98:	2400      	movs	r4, #0
   b5d9a:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b5d9c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5d9e:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5da2:	2002      	movs	r0, #2
   b5da4:	f004 fe80 	bl	baaa8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b5da8:	4621      	mov	r1, r4
   b5daa:	4628      	mov	r0, r5
   b5dac:	f004 fe94 	bl	baad8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b5db0:	4629      	mov	r1, r5
   b5db2:	2004      	movs	r0, #4
   b5db4:	f004 fbf6 	bl	ba5a4 <HAL_Feature_Set>
        capacity_(0) {
   b5db8:	e9cd 4400 	strd	r4, r4, [sp]
   b5dbc:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b5dbe:	f007 ff8f 	bl	bdce0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b5dc2:	4c1d      	ldr	r4, [pc, #116]	; (b5e38 <_GLOBAL__sub_I_SystemMode+0xac>)
   b5dc4:	4605      	mov	r5, r0
   b5dc6:	4669      	mov	r1, sp
   b5dc8:	a803      	add	r0, sp, #12
   b5dca:	f7ff ffac 	bl	b5d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5dce:	4626      	mov	r6, r4
        stream_(&stream) {
   b5dd0:	a903      	add	r1, sp, #12
   b5dd2:	a806      	add	r0, sp, #24
   b5dd4:	f7ff ffa7 	bl	b5d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5dd8:	4b18      	ldr	r3, [pc, #96]	; (b5e3c <_GLOBAL__sub_I_SystemMode+0xb0>)
   b5dda:	f846 3b04 	str.w	r3, [r6], #4
   b5dde:	a906      	add	r1, sp, #24
   b5de0:	a809      	add	r0, sp, #36	; 0x24
   b5de2:	f7ff ffa0 	bl	b5d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5de6:	aa09      	add	r2, sp, #36	; 0x24
   b5de8:	211e      	movs	r1, #30
   b5dea:	4630      	mov	r0, r6
   b5dec:	f006 fc4e 	bl	bc68c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5df0:	a809      	add	r0, sp, #36	; 0x24
   b5df2:	f7ff ff57 	bl	b5ca4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5df6:	a806      	add	r0, sp, #24
   b5df8:	f7ff ff54 	bl	b5ca4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5dfc:	4b10      	ldr	r3, [pc, #64]	; (b5e40 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b5dfe:	6023      	str	r3, [r4, #0]
   b5e00:	6225      	str	r5, [r4, #32]
   b5e02:	a803      	add	r0, sp, #12
   b5e04:	f7ff ff4e 	bl	b5ca4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e08:	4b0e      	ldr	r3, [pc, #56]	; (b5e44 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b5e0a:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5e0c:	f007 ff68 	bl	bdce0 <_Z16_fetch_usbserialv>
   b5e10:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5e14:	f007 ff52 	bl	bdcbc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5e18:	f006 f94e 	bl	bc0b8 <_ZN5spark10LogManager8instanceEv>
   b5e1c:	4621      	mov	r1, r4
   b5e1e:	f006 fb0b 	bl	bc438 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b5e22:	4668      	mov	r0, sp
   b5e24:	f7ff ff3e 	bl	b5ca4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e28:	b00c      	add	sp, #48	; 0x30
   b5e2a:	bd70      	pop	{r4, r5, r6, pc}
   b5e2c:	2003e408 	.word	0x2003e408
   b5e30:	ffff0000 	.word	0xffff0000
   b5e34:	2003e3fc 	.word	0x2003e3fc
   b5e38:	2003e40c 	.word	0x2003e40c
   b5e3c:	000bfa0c 	.word	0x000bfa0c
   b5e40:	000c0630 	.word	0x000c0630
   b5e44:	000bfa24 	.word	0x000bfa24

000b5e48 <_Z22disconnectFromParticlev>:
{
   b5e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e4c:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b5e4e:	f007 fe60 	bl	bdb12 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b5e52:	4943      	ldr	r1, [pc, #268]	; (b5f60 <_Z22disconnectFromParticlev+0x118>)
  time_t startTime = Time.now();
   b5e54:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b5e56:	4843      	ldr	r0, [pc, #268]	; (b5f64 <_Z22disconnectFromParticlev+0x11c>)
   b5e58:	f7fe f940 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b5e5c:	4b42      	ldr	r3, [pc, #264]	; (b5f68 <_Z22disconnectFromParticlev+0x120>)
   b5e5e:	8818      	ldrh	r0, [r3, #0]
   b5e60:	f005 fd6c 	bl	bb93c <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b5e64:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b5e66:	a801      	add	r0, sp, #4
   b5e68:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b5e6c:	f8ad 400c 	strh.w	r4, [sp, #12]
   b5e70:	f005 f992 	bl	bb198 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b5e74:	4620      	mov	r0, r4
   b5e76:	f004 fbc5 	bl	ba604 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5e7a:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b5e7e:	4604      	mov	r4, r0
   b5e80:	2000      	movs	r0, #0
   b5e82:	f004 fbbf 	bl	ba604 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5e86:	1b03      	subs	r3, r0, r4
   b5e88:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5e8c:	42b3      	cmp	r3, r6
   b5e8e:	f171 0300 	sbcs.w	r3, r1, #0
   b5e92:	d205      	bcs.n	b5ea0 <_Z22disconnectFromParticlev+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5e94:	f004 fe9a 	bl	babcc <spark_cloud_flag_connected>
   b5e98:	b110      	cbz	r0, b5ea0 <_Z22disconnectFromParticlev+0x58>
            spark_process();
   b5e9a:	f004 fe87 	bl	babac <spark_process>
        while (_while() && !_condition()) {
   b5e9e:	e7ef      	b.n	b5e80 <_Z22disconnectFromParticlev+0x38>
   b5ea0:	f004 fe94 	bl	babcc <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5ea4:	f004 fb9e 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5ea8:	4f30      	ldr	r7, [pc, #192]	; (b5f6c <_Z22disconnectFromParticlev+0x124>)
   b5eaa:	6038      	str	r0, [r7, #0]
    		spark_process();
   b5eac:	f004 fe7e 	bl	babac <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5eb0:	f004 fe8c 	bl	babcc <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b5eb4:	4604      	mov	r4, r0
   b5eb6:	b140      	cbz	r0, b5eca <_Z22disconnectFromParticlev+0x82>
    Log.info("Failed to disconnect from Particle");
   b5eb8:	492d      	ldr	r1, [pc, #180]	; (b5f70 <_Z22disconnectFromParticlev+0x128>)
   b5eba:	482a      	ldr	r0, [pc, #168]	; (b5f64 <_Z22disconnectFromParticlev+0x11c>)
   b5ebc:	f7fe f90e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b5ec0:	2400      	movs	r4, #0
}
   b5ec2:	4620      	mov	r0, r4
   b5ec4:	b005      	add	sp, #20
   b5ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b5eca:	f007 fe22 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b5ece:	4929      	ldr	r1, [pc, #164]	; (b5f74 <_Z22disconnectFromParticlev+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b5ed0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b5f78 <_Z22disconnectFromParticlev+0x130>
   b5ed4:	1b42      	subs	r2, r0, r5
   b5ed6:	4823      	ldr	r0, [pc, #140]	; (b5f64 <_Z22disconnectFromParticlev+0x11c>)
   b5ed8:	f7fe f900 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b5edc:	f007 fe19 	bl	bdb12 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5ee0:	4622      	mov	r2, r4
   b5ee2:	2102      	movs	r1, #2
   b5ee4:	4606      	mov	r6, r0
   b5ee6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b5eea:	f004 feb7 	bl	bac5c <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b5eee:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b5ef2:	4623      	mov	r3, r4
   b5ef4:	4622      	mov	r2, r4
   b5ef6:	4621      	mov	r1, r4
   b5ef8:	f004 fec8 	bl	bac8c <network_off>
        return hal_timer_millis(nullptr);
   b5efc:	4620      	mov	r0, r4
   b5efe:	f004 fb81 	bl	ba604 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5f02:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b5f06:	4605      	mov	r5, r0
   b5f08:	2000      	movs	r0, #0
   b5f0a:	f004 fb7b 	bl	ba604 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5f0e:	1b43      	subs	r3, r0, r5
   b5f10:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5f14:	454b      	cmp	r3, r9
   b5f16:	f171 0300 	sbcs.w	r3, r1, #0
   b5f1a:	d206      	bcs.n	b5f2a <_Z22disconnectFromParticlev+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b5f1c:	4640      	mov	r0, r8
   b5f1e:	f006 fed3 	bl	bccc8 <_ZN5spark12NetworkClass5isOffEv>
   b5f22:	b910      	cbnz	r0, b5f2a <_Z22disconnectFromParticlev+0xe2>
            spark_process();
   b5f24:	f004 fe42 	bl	babac <spark_process>
        while (_while() && !_condition()) {
   b5f28:	e7ee      	b.n	b5f08 <_Z22disconnectFromParticlev+0xc0>
   b5f2a:	4813      	ldr	r0, [pc, #76]	; (b5f78 <_Z22disconnectFromParticlev+0x130>)
   b5f2c:	f006 fecc 	bl	bccc8 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b5f30:	f004 fb58 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b5f34:	6038      	str	r0, [r7, #0]
    		spark_process();
   b5f36:	f004 fe39 	bl	babac <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b5f3a:	480f      	ldr	r0, [pc, #60]	; (b5f78 <_Z22disconnectFromParticlev+0x130>)
   b5f3c:	f006 fec0 	bl	bccc0 <_ZN5spark12NetworkClass4isOnEv>
   b5f40:	b120      	cbz	r0, b5f4c <_Z22disconnectFromParticlev+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b5f42:	490e      	ldr	r1, [pc, #56]	; (b5f7c <_Z22disconnectFromParticlev+0x134>)
   b5f44:	4807      	ldr	r0, [pc, #28]	; (b5f64 <_Z22disconnectFromParticlev+0x11c>)
   b5f46:	f7fe f8c9 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b5f4a:	e7ba      	b.n	b5ec2 <_Z22disconnectFromParticlev+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b5f4c:	f007 fde1 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b5f50:	490b      	ldr	r1, [pc, #44]	; (b5f80 <_Z22disconnectFromParticlev+0x138>)
   b5f52:	1b82      	subs	r2, r0, r6
   b5f54:	4803      	ldr	r0, [pc, #12]	; (b5f64 <_Z22disconnectFromParticlev+0x11c>)
   b5f56:	f7fe f8c1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b5f5a:	2401      	movs	r4, #1
   b5f5c:	e7b1      	b.n	b5ec2 <_Z22disconnectFromParticlev+0x7a>
   b5f5e:	bf00      	nop
   b5f60:	000bf93b 	.word	0x000bf93b
   b5f64:	2003e658 	.word	0x2003e658
   b5f68:	000bf73a 	.word	0x000bf73a
   b5f6c:	2003e710 	.word	0x2003e710
   b5f70:	000bf964 	.word	0x000bf964
   b5f74:	000bf987 	.word	0x000bf987
   b5f78:	2003e584 	.word	0x2003e584
   b5f7c:	000bf9b0 	.word	0x000bf9b0
   b5f80:	000bf9d6 	.word	0x000bf9d6

000b5f84 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b5f84:	ee07 0a90 	vmov	s15, r0
   b5f88:	ed9f 7a09 	vldr	s14, [pc, #36]	; b5fb0 <_Z17tmp36TemperatureCi+0x2c>
   b5f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5f90:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5f94:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5fb4 <_Z17tmp36TemperatureCi+0x30>
   b5f98:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b5f9c:	eddf 7a06 	vldr	s15, [pc, #24]	; b5fb8 <_Z17tmp36TemperatureCi+0x34>
   b5fa0:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b5fa4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b5fa8:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5fac:	4770      	bx	lr
   b5fae:	bf00      	nop
   b5fb0:	454e4000 	.word	0x454e4000
   b5fb4:	457ff000 	.word	0x457ff000
   b5fb8:	43fa0000 	.word	0x43fa0000

000b5fbc <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b5fbc:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b5fbe:	2101      	movs	r1, #1
   b5fc0:	a801      	add	r0, sp, #4
   b5fc2:	f006 ff16 	bl	bcdf2 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5fc6:	f7ff f9b7 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b5fca:	f7ff fab8 	bl	b553e <_ZNK17currentStatusData17get_internalTempCEv>
   b5fce:	f7ff f9b3 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b5fd2:	f7ff fab4 	bl	b553e <_ZNK17currentStatusData17get_internalTempCEv>
   b5fd6:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5fd8:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5fda:	d90d      	bls.n	b5ff8 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5fdc:	f006 ff9c 	bl	bcf18 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b5fe0:	f7ff f9aa 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b5fe4:	2101      	movs	r1, #1
   b5fe6:	f7ff fae3 	bl	b55b0 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b5fea:	2400      	movs	r4, #0
  PMIC pmic(true);
   b5fec:	a801      	add	r0, sp, #4
   b5fee:	f006 ff0f 	bl	bce10 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	b002      	add	sp, #8
   b5ff6:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b5ff8:	f006 ff73 	bl	bcee2 <_ZN4PMIC14enableChargingEv>
    return true;
   b5ffc:	2401      	movs	r4, #1
   b5ffe:	e7f5      	b.n	b5fec <_Z16isItSafeToChargev+0x30>

000b6000 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b6000:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6002:	4d19      	ldr	r5, [pc, #100]	; (b6068 <_Z17getSignalStrengthv+0x68>)
   b6004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b6006:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6008:	ac0c      	add	r4, sp, #48	; 0x30
   b600a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b600c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b600e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6010:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6014:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6018:	4914      	ldr	r1, [pc, #80]	; (b606c <_Z17getSignalStrengthv+0x6c>)
   b601a:	a804      	add	r0, sp, #16
   b601c:	f004 ff68 	bl	baef0 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6020:	a804      	add	r0, sp, #16
   b6022:	f004 ffa8 	bl	baf76 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6026:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6028:	a804      	add	r0, sp, #16
   b602a:	f004 ffdd 	bl	bafe8 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b602e:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b6030:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6034:	f005 f808 	bl	bb048 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6038:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b603a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b603e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b6042:	f008 f9e1 	bl	be408 <__aeabi_f2d>
   b6046:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b604a:	4628      	mov	r0, r5
   b604c:	f008 f9dc 	bl	be408 <__aeabi_f2d>
   b6050:	e9cd 0100 	strd	r0, r1, [sp]
   b6054:	4a06      	ldr	r2, [pc, #24]	; (b6070 <_Z17getSignalStrengthv+0x70>)
   b6056:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b605a:	4806      	ldr	r0, [pc, #24]	; (b6074 <_Z17getSignalStrengthv+0x74>)
   b605c:	2140      	movs	r1, #64	; 0x40
   b605e:	f004 fe75 	bl	bad4c <snprintf>
}
   b6062:	b017      	add	sp, #92	; 0x5c
   b6064:	bd30      	pop	{r4, r5, pc}
   b6066:	bf00      	nop
   b6068:	000bfaac 	.word	0x000bfaac
   b606c:	2003e584 	.word	0x2003e584
   b6070:	000bfa72 	.word	0x000bfa72
   b6074:	2003de8c 	.word	0x2003de8c

000b6078 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6078:	b530      	push	{r4, r5, lr}
   b607a:	b085      	sub	sp, #20
   b607c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b607e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6080:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6082:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6084:	f004 fcfe 	bl	baa84 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6088:	b990      	cbnz	r0, b60b0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
    return get(src, val);
   b608a:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b608c:	b10c      	cbz	r4, b6092 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b608e:	6923      	ldr	r3, [r4, #16]
   b6090:	b923      	cbnz	r3, b609c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6092:	4a08      	ldr	r2, [pc, #32]	; (b60b4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6094:	4908      	ldr	r1, [pc, #32]	; (b60b8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6096:	200a      	movs	r0, #10
   b6098:	f004 fccc 	bl	baa34 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b609c:	230c      	movs	r3, #12
   b609e:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b60a2:	2304      	movs	r3, #4
   b60a4:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b60a6:	aa01      	add	r2, sp, #4
   b60a8:	6923      	ldr	r3, [r4, #16]
   b60aa:	2101      	movs	r1, #1
   b60ac:	4620      	mov	r0, r4
   b60ae:	4798      	blx	r3
}
   b60b0:	b005      	add	sp, #20
   b60b2:	bd30      	pop	{r4, r5, pc}
   b60b4:	000ba5d5 	.word	0x000ba5d5
   b60b8:	000bf635 	.word	0x000bf635

000b60bc <_Z12batteryStatev>:
bool batteryState() {
   b60bc:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b60be:	f7ff f93b 	bl	b5338 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b60c2:	a901      	add	r1, sp, #4
   b60c4:	4604      	mov	r4, r0
   b60c6:	2007      	movs	r0, #7
   b60c8:	f7ff ffd6 	bl	b6078 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b60cc:	1e01      	subs	r1, r0, #0
        return val;
   b60ce:	bfa8      	it	ge
   b60d0:	9901      	ldrge	r1, [sp, #4]
   b60d2:	4620      	mov	r0, r4
   b60d4:	b2c9      	uxtb	r1, r1
   b60d6:	f7ff fa6b 	bl	b55b0 <_ZN17currentStatusData16set_batteryStateEh>
  if (sysStatus.get_lowPowerMode()) {                                        // Need to take these steps if we are sleeping
   b60da:	f7ff f8dd 	bl	b5298 <_ZN13sysStatusData8instanceEv>
   b60de:	f7ff fa8b 	bl	b55f8 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b60e2:	b130      	cbz	r0, b60f2 <_Z12batteryStatev+0x36>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b60e4:	4817      	ldr	r0, [pc, #92]	; (b6144 <_Z12batteryStatev+0x88>)
   b60e6:	f005 fb51 	bl	bb78c <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b60ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b60ee:	f004 fe85 	bl	badfc <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b60f2:	f7ff f921 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b60f6:	a901      	add	r1, sp, #4
   b60f8:	4604      	mov	r4, r0
   b60fa:	2003      	movs	r0, #3
   b60fc:	f7ff ffbc 	bl	b6078 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6100:	b9e8      	cbnz	r0, b613e <_Z12batteryStatev+0x82>
   b6102:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6106:	ee07 3a90 	vmov	s15, r3
   b610a:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b610e:	ee17 0a90 	vmov	r0, s15
   b6112:	f008 f979 	bl	be408 <__aeabi_f2d>
   b6116:	ec41 0b10 	vmov	d0, r0, r1
   b611a:	4620      	mov	r0, r4
   b611c:	f7ff f948 	bl	b53b0 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b6120:	f7ff f90a 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b6124:	f7ff f924 	bl	b5370 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6128:	4b07      	ldr	r3, [pc, #28]	; (b6148 <_Z12batteryStatev+0x8c>)
   b612a:	ec51 0b10 	vmov	r0, r1, d0
   b612e:	2200      	movs	r2, #0
   b6130:	f008 fc52 	bl	be9d8 <__aeabi_dcmpgt>
}
   b6134:	3800      	subs	r0, #0
   b6136:	bf18      	it	ne
   b6138:	2001      	movne	r0, #1
   b613a:	b002      	add	sp, #8
   b613c:	bd10      	pop	{r4, pc}
            return -1.0f;
   b613e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6142:	e7e4      	b.n	b610e <_Z12batteryStatev+0x52>
   b6144:	2003e430 	.word	0x2003e430
   b6148:	404e0000 	.word	0x404e0000

000b614c <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b614c:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b614e:	f7ff f8f3 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b6152:	4b14      	ldr	r3, [pc, #80]	; (b61a4 <_Z16takeMeasurementsv+0x58>)
   b6154:	4604      	mov	r4, r0
   b6156:	8818      	ldrh	r0, [r3, #0]
   b6158:	f007 ff17 	bl	bdf8a <analogRead>
   b615c:	f7ff ff12 	bl	b5f84 <_Z17tmp36TemperatureCi>
   b6160:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6164:	4620      	mov	r0, r4
   b6166:	edcd 7a01 	vstr	s15, [sp, #4]
   b616a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b616e:	4c0e      	ldr	r4, [pc, #56]	; (b61a8 <_Z16takeMeasurementsv+0x5c>)
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6170:	f7ff fa18 	bl	b55a4 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6174:	f7ff f8e0 	bl	b5338 <_ZN17currentStatusData8instanceEv>
   b6178:	f7ff f9e1 	bl	b553e <_ZNK17currentStatusData17get_internalTempCEv>
   b617c:	4a0b      	ldr	r2, [pc, #44]	; (b61ac <_Z16takeMeasurementsv+0x60>)
   b617e:	4603      	mov	r3, r0
   b6180:	2110      	movs	r1, #16
   b6182:	4620      	mov	r0, r4
   b6184:	f004 fde2 	bl	bad4c <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   b6188:	4909      	ldr	r1, [pc, #36]	; (b61b0 <_Z16takeMeasurementsv+0x64>)
   b618a:	480a      	ldr	r0, [pc, #40]	; (b61b4 <_Z16takeMeasurementsv+0x68>)
   b618c:	4622      	mov	r2, r4
   b618e:	f7fd ffa5 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   b6192:	f7ff ff93 	bl	b60bc <_Z12batteryStatev>
    isItSafeToCharge();
   b6196:	f7ff ff11 	bl	b5fbc <_Z16isItSafeToChargev>
    getSignalStrength();
   b619a:	f7ff ff31 	bl	b6000 <_Z17getSignalStrengthv>
}
   b619e:	2001      	movs	r0, #1
   b61a0:	b002      	add	sp, #8
   b61a2:	bd10      	pop	{r4, pc}
   b61a4:	000bf740 	.word	0x000bf740
   b61a8:	2003de7c 	.word	0x2003de7c
   b61ac:	000bfa8b 	.word	0x000bfa8b
   b61b0:	000bfa90 	.word	0x000bfa90
   b61b4:	2003e658 	.word	0x2003e658

000b61b8 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b61b8:	4801      	ldr	r0, [pc, #4]	; (b61c0 <_GLOBAL__sub_I_batteryContext+0x8>)
   b61ba:	2100      	movs	r1, #0
   b61bc:	f005 baa2 	b.w	bb704 <_ZN9FuelGaugeC1Eb>
   b61c0:	2003e430 	.word	0x2003e430

000b61c4 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b61c4:	4770      	bx	lr

000b61c6 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b61c6:	b510      	push	{r4, lr}
}
   b61c8:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b61ca:	4604      	mov	r4, r0
}
   b61cc:	f7fd ff67 	bl	b409e <_ZdlPvj>
   b61d0:	4620      	mov	r0, r4
   b61d2:	bd10      	pop	{r4, pc}

000b61d4 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b61d4:	b510      	push	{r4, lr}
   b61d6:	4604      	mov	r4, r0
   b61d8:	b08a      	sub	sp, #40	; 0x28
   b61da:	4608      	mov	r0, r1
    attr.flags = 0;
   b61dc:	f04f 0c20 	mov.w	ip, #32
   b61e0:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b61e2:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b61e6:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b61ea:	460b      	mov	r3, r1
   b61ec:	aa02      	add	r2, sp, #8
   b61ee:	6821      	ldr	r1, [r4, #0]
   b61f0:	f004 fc30 	bl	baa54 <log_message_v>
}
   b61f4:	b00a      	add	sp, #40	; 0x28
   b61f6:	bd10      	pop	{r4, pc}

000b61f8 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b61f8:	b40e      	push	{r1, r2, r3}
   b61fa:	b503      	push	{r0, r1, lr}
   b61fc:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b61fe:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6200:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6204:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6206:	f7ff ffe5 	bl	b61d4 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b620a:	b002      	add	sp, #8
   b620c:	f85d eb04 	ldr.w	lr, [sp], #4
   b6210:	b003      	add	sp, #12
   b6212:	4770      	bx	lr

000b6214 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6214:	b40e      	push	{r1, r2, r3}
   b6216:	b503      	push	{r0, r1, lr}
   b6218:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b621a:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b621c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6220:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6222:	f7ff ffd7 	bl	b61d4 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6226:	b002      	add	sp, #8
   b6228:	f85d eb04 	ldr.w	lr, [sp], #4
   b622c:	b003      	add	sp, #12
   b622e:	4770      	bx	lr

000b6230 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6230:	b510      	push	{r4, lr}
   b6232:	7202      	strb	r2, [r0, #8]
   b6234:	22ff      	movs	r2, #255	; 0xff
   b6236:	8142      	strh	r2, [r0, #10]
   b6238:	2200      	movs	r2, #0
   b623a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b623e:	6142      	str	r2, [r0, #20]
   b6240:	7602      	strb	r2, [r0, #24]
   b6242:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6244:	4a02      	ldr	r2, [pc, #8]	; (b6250 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6246:	4c03      	ldr	r4, [pc, #12]	; (b6254 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6248:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b624a:	e9c0 4100 	strd	r4, r1, [r0]
}
   b624e:	bd10      	pop	{r4, pc}
   b6250:	2003e43c 	.word	0x2003e43c
   b6254:	000bfd24 	.word	0x000bfd24

000b6258 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b625c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6260:	4604      	mov	r4, r0
   b6262:	4689      	mov	r9, r1
   b6264:	4616      	mov	r6, r2
   b6266:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6268:	f1b8 0f00 	cmp.w	r8, #0
   b626c:	d002      	beq.n	b6274 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b626e:	6840      	ldr	r0, [r0, #4]
   b6270:	f005 fb26 	bl	bb8c0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6274:	7a21      	ldrb	r1, [r4, #8]
   b6276:	6860      	ldr	r0, [r4, #4]
   b6278:	f005 faff 	bl	bb87a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b627c:	6860      	ldr	r0, [r4, #4]
   b627e:	6803      	ldr	r3, [r0, #0]
   b6280:	4649      	mov	r1, r9
   b6282:	689b      	ldr	r3, [r3, #8]
   b6284:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6286:	6860      	ldr	r0, [r4, #4]
   b6288:	2100      	movs	r1, #0
   b628a:	f005 fb15 	bl	bb8b8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b628e:	4605      	mov	r5, r0
   b6290:	bb00      	cbnz	r0, b62d4 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6292:	2301      	movs	r3, #1
   b6294:	7a21      	ldrb	r1, [r4, #8]
   b6296:	6860      	ldr	r0, [r4, #4]
   b6298:	463a      	mov	r2, r7
   b629a:	f005 fadc 	bl	bb856 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b629e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b62a0:	4603      	mov	r3, r0
        if (count == num) {
   b62a2:	d109      	bne.n	b62b8 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b62a4:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b62a6:	42be      	cmp	r6, r7
   b62a8:	d01c      	beq.n	b62e4 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b62aa:	6860      	ldr	r0, [r4, #4]
   b62ac:	6803      	ldr	r3, [r0, #0]
   b62ae:	695b      	ldr	r3, [r3, #20]
   b62b0:	4798      	blx	r3
   b62b2:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b62b6:	e7f6      	b.n	b62a6 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b62b8:	490b      	ldr	r1, [pc, #44]	; (b62e8 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b62ba:	480c      	ldr	r0, [pc, #48]	; (b62ec <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b62bc:	464a      	mov	r2, r9
   b62be:	f7ff ff9b 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b62c2:	f1b8 0f00 	cmp.w	r8, #0
   b62c6:	d002      	beq.n	b62ce <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b62c8:	6860      	ldr	r0, [r4, #4]
   b62ca:	f005 fb02 	bl	bb8d2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b62ce:	4628      	mov	r0, r5
   b62d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b62d4:	4603      	mov	r3, r0
   b62d6:	4906      	ldr	r1, [pc, #24]	; (b62f0 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b62d8:	4804      	ldr	r0, [pc, #16]	; (b62ec <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b62da:	464a      	mov	r2, r9
   b62dc:	f7ff ff8c 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b62e0:	2500      	movs	r5, #0
   b62e2:	e7ee      	b.n	b62c2 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b62e4:	2501      	movs	r5, #1
   b62e6:	e7ec      	b.n	b62c2 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b62e8:	000bfad4 	.word	0x000bfad4
   b62ec:	2003e438 	.word	0x2003e438
   b62f0:	000bfaf9 	.word	0x000bfaf9

000b62f4 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b62f4:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b62f6:	9300      	str	r3, [sp, #0]
   b62f8:	2301      	movs	r3, #1
   b62fa:	f7ff ffad 	bl	b6258 <_ZN6AB180513readRegistersEhPhjb>
}
   b62fe:	b003      	add	sp, #12
   b6300:	f85d fb04 	ldr.w	pc, [sp], #4

000b6304 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6304:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6306:	8943      	ldrh	r3, [r0, #10]
   b6308:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b630a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b630c:	d010      	beq.n	b6330 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b630e:	4e19      	ldr	r6, [pc, #100]	; (b6374 <_ZN6AB180510detectChipEv+0x70>)
   b6310:	4d19      	ldr	r5, [pc, #100]	; (b6378 <_ZN6AB180510detectChipEv+0x74>)
   b6312:	f004 f967 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b6316:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b631a:	d209      	bcs.n	b6330 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b631c:	8960      	ldrh	r0, [r4, #10]
   b631e:	f007 fe21 	bl	bdf64 <digitalRead>
   b6322:	2801      	cmp	r0, #1
   b6324:	d004      	beq.n	b6330 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6326:	4631      	mov	r1, r6
   b6328:	4628      	mov	r0, r5
   b632a:	f7fd fed7 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b632e:	e7f0      	b.n	b6312 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6330:	2301      	movs	r3, #1
   b6332:	f10d 0207 	add.w	r2, sp, #7
   b6336:	2128      	movs	r1, #40	; 0x28
   b6338:	4620      	mov	r0, r4
   b633a:	f7ff ffdb 	bl	b62f4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b633e:	b930      	cbnz	r0, b634e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6340:	480d      	ldr	r0, [pc, #52]	; (b6378 <_ZN6AB180510detectChipEv+0x74>)
   b6342:	490e      	ldr	r1, [pc, #56]	; (b637c <_ZN6AB180510detectChipEv+0x78>)
   b6344:	f7fd feca 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6348:	2000      	movs	r0, #0
}
   b634a:	b002      	add	sp, #8
   b634c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b634e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6352:	2b18      	cmp	r3, #24
   b6354:	d1f4      	bne.n	b6340 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6356:	2301      	movs	r3, #1
   b6358:	f10d 0207 	add.w	r2, sp, #7
   b635c:	2129      	movs	r1, #41	; 0x29
   b635e:	4620      	mov	r0, r4
   b6360:	f7ff ffc8 	bl	b62f4 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6364:	2800      	cmp	r0, #0
   b6366:	d0eb      	beq.n	b6340 <_ZN6AB180510detectChipEv+0x3c>
   b6368:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b636c:	2b05      	cmp	r3, #5
   b636e:	d1e7      	bne.n	b6340 <_ZN6AB180510detectChipEv+0x3c>
   b6370:	e7eb      	b.n	b634a <_ZN6AB180510detectChipEv+0x46>
   b6372:	bf00      	nop
   b6374:	000bfb1d 	.word	0x000bfb1d
   b6378:	2003e438 	.word	0x2003e438
   b637c:	000bfb32 	.word	0x000bfb32

000b6380 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6380:	b507      	push	{r0, r1, r2, lr}
   b6382:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6384:	2200      	movs	r2, #0
   b6386:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b638a:	f10d 0207 	add.w	r2, sp, #7
   b638e:	f7ff ffb1 	bl	b62f4 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6392:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6396:	b003      	add	sp, #12
   b6398:	f85d fb04 	ldr.w	pc, [sp], #4

000b639c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b639c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63a0:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b63a4:	4604      	mov	r4, r0
   b63a6:	460f      	mov	r7, r1
   b63a8:	4615      	mov	r5, r2
   b63aa:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b63ac:	f1b8 0f00 	cmp.w	r8, #0
   b63b0:	d002      	beq.n	b63b8 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b63b2:	6840      	ldr	r0, [r0, #4]
   b63b4:	f005 fa84 	bl	bb8c0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b63b8:	7a21      	ldrb	r1, [r4, #8]
   b63ba:	6860      	ldr	r0, [r4, #4]
   b63bc:	f005 fa5d 	bl	bb87a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b63c0:	6860      	ldr	r0, [r4, #4]
   b63c2:	6803      	ldr	r3, [r0, #0]
   b63c4:	4639      	mov	r1, r7
   b63c6:	689b      	ldr	r3, [r3, #8]
   b63c8:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b63ca:	442e      	add	r6, r5
   b63cc:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b63ce:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b63d0:	d005      	beq.n	b63de <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b63d2:	6803      	ldr	r3, [r0, #0]
   b63d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b63d8:	689b      	ldr	r3, [r3, #8]
   b63da:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b63dc:	e7f6      	b.n	b63cc <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b63de:	2101      	movs	r1, #1
   b63e0:	f005 fa6a 	bl	bb8b8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b63e4:	4603      	mov	r3, r0
   b63e6:	b170      	cbz	r0, b6406 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b63e8:	4908      	ldr	r1, [pc, #32]	; (b640c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b63ea:	4809      	ldr	r0, [pc, #36]	; (b6410 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b63ec:	463a      	mov	r2, r7
   b63ee:	f7ff ff03 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b63f2:	2500      	movs	r5, #0
    }

    if (lock) {
   b63f4:	f1b8 0f00 	cmp.w	r8, #0
   b63f8:	d002      	beq.n	b6400 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b63fa:	6860      	ldr	r0, [r4, #4]
   b63fc:	f005 fa69 	bl	bb8d2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6400:	4628      	mov	r0, r5
   b6402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6406:	2501      	movs	r5, #1
   b6408:	e7f4      	b.n	b63f4 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b640a:	bf00      	nop
   b640c:	000bfb3f 	.word	0x000bfb3f
   b6410:	2003e438 	.word	0x2003e438

000b6414 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6416:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b641a:	9300      	str	r3, [sp, #0]
   b641c:	f10d 020f 	add.w	r2, sp, #15
   b6420:	2301      	movs	r3, #1
   b6422:	f7ff ffbb 	bl	b639c <_ZN6AB180514writeRegistersEhPKhjb>
}
   b6426:	b005      	add	sp, #20
   b6428:	f85d fb04 	ldr.w	pc, [sp], #4

000b642c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b642e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6430:	460c      	mov	r4, r1
   b6432:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b6434:	491a      	ldr	r1, [pc, #104]	; (b64a0 <_ZN6AB18056setWDTEi+0x74>)
   b6436:	481b      	ldr	r0, [pc, #108]	; (b64a4 <_ZN6AB18056setWDTEi+0x78>)
   b6438:	f7fd fe50 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b643c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b643e:	bfb8      	it	lt
   b6440:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b6442:	b97c      	cbnz	r4, b6464 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b6444:	2301      	movs	r3, #1
   b6446:	4622      	mov	r2, r4
   b6448:	211b      	movs	r1, #27
   b644a:	4628      	mov	r0, r5
   b644c:	f7ff ffe2 	bl	b6414 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6450:	4915      	ldr	r1, [pc, #84]	; (b64a8 <_ZN6AB18056setWDTEi+0x7c>)
   b6452:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b6454:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6456:	4813      	ldr	r0, [pc, #76]	; (b64a4 <_ZN6AB18056setWDTEi+0x78>)
   b6458:	f7ff fedc 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b645c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b645e:	616c      	str	r4, [r5, #20]
}
   b6460:	4630      	mov	r0, r6
   b6462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6464:	2c03      	cmp	r4, #3
   b6466:	dd19      	ble.n	b649c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6468:	10a7      	asrs	r7, r4, #2
   b646a:	2f1f      	cmp	r7, #31
   b646c:	bfa8      	it	ge
   b646e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6470:	00ba      	lsls	r2, r7, #2
   b6472:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6476:	2301      	movs	r3, #1
   b6478:	b2d2      	uxtb	r2, r2
   b647a:	211b      	movs	r1, #27
   b647c:	4628      	mov	r0, r5
   b647e:	f7ff ffc9 	bl	b6414 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6482:	463a      	mov	r2, r7
   b6484:	4603      	mov	r3, r0
   b6486:	4909      	ldr	r1, [pc, #36]	; (b64ac <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6488:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b648a:	4806      	ldr	r0, [pc, #24]	; (b64a4 <_ZN6AB18056setWDTEi+0x78>)
   b648c:	f7ff fec2 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6490:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6494:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6496:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6498:	616f      	str	r7, [r5, #20]
   b649a:	e7e1      	b.n	b6460 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b649c:	2701      	movs	r7, #1
   b649e:	e7e7      	b.n	b6470 <_ZN6AB18056setWDTEi+0x44>
   b64a0:	000bfb64 	.word	0x000bfb64
   b64a4:	2003e438 	.word	0x2003e438
   b64a8:	000bfb6e 	.word	0x000bfb6e
   b64ac:	000bfb8a 	.word	0x000bfb8a

000b64b0 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b64b0:	4b06      	ldr	r3, [pc, #24]	; (b64cc <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b64b2:	681a      	ldr	r2, [r3, #0]
   b64b4:	b14a      	cbz	r2, b64ca <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b64b6:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b64ba:	430b      	orrs	r3, r1
   b64bc:	d105      	bne.n	b64ca <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b64be:	68d3      	ldr	r3, [r2, #12]
   b64c0:	b11b      	cbz	r3, b64ca <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b64c2:	2100      	movs	r1, #0
   b64c4:	4610      	mov	r0, r2
   b64c6:	f7ff bfb1 	b.w	b642c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b64ca:	4770      	bx	lr
   b64cc:	2003e43c 	.word	0x2003e43c

000b64d0 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b64d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b64d4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b64d8:	4605      	mov	r5, r0
   b64da:	4616      	mov	r6, r2
   b64dc:	461f      	mov	r7, r3
    if (lock) {
   b64de:	f1b8 0f00 	cmp.w	r8, #0
   b64e2:	d004      	beq.n	b64ee <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b64e4:	6840      	ldr	r0, [r0, #4]
   b64e6:	9101      	str	r1, [sp, #4]
   b64e8:	f005 f9ea 	bl	bb8c0 <_ZN7TwoWire4lockEv>
   b64ec:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b64ee:	9101      	str	r1, [sp, #4]
   b64f0:	2300      	movs	r3, #0
   b64f2:	f10d 020f 	add.w	r2, sp, #15
   b64f6:	4628      	mov	r0, r5
   b64f8:	f7ff fefc 	bl	b62f4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b64fc:	4604      	mov	r4, r0
   b64fe:	b160      	cbz	r0, b651a <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6500:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6504:	ea03 0206 	and.w	r2, r3, r6
   b6508:	433a      	orrs	r2, r7
        if (newValue != value) {
   b650a:	4293      	cmp	r3, r2
   b650c:	d005      	beq.n	b651a <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b650e:	9901      	ldr	r1, [sp, #4]
   b6510:	2300      	movs	r3, #0
   b6512:	4628      	mov	r0, r5
   b6514:	f7ff ff7e 	bl	b6414 <_ZN6AB180513writeRegisterEhhb>
   b6518:	4604      	mov	r4, r0
    if (lock) {
   b651a:	f1b8 0f00 	cmp.w	r8, #0
   b651e:	d002      	beq.n	b6526 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6520:	6868      	ldr	r0, [r5, #4]
   b6522:	f005 f9d6 	bl	bb8d2 <_ZN7TwoWire6unlockEv>
}
   b6526:	4620      	mov	r0, r4
   b6528:	b004      	add	sp, #16
   b652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b652e <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b652e:	b513      	push	{r0, r1, r4, lr}
   b6530:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6532:	f10d 0207 	add.w	r2, sp, #7
   b6536:	f7ff fedd 	bl	b62f4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b653a:	b128      	cbz	r0, b6548 <_ZN6AB180510isBitClearEhhb+0x1a>
   b653c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6540:	421c      	tst	r4, r3
   b6542:	bf0c      	ite	eq
   b6544:	2001      	moveq	r0, #1
   b6546:	2000      	movne	r0, #0
}
   b6548:	b002      	add	sp, #8
   b654a:	bd10      	pop	{r4, pc}

000b654c <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b654c:	b513      	push	{r0, r1, r4, lr}
   b654e:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6550:	f10d 0207 	add.w	r2, sp, #7
   b6554:	f7ff fece 	bl	b62f4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6558:	b128      	cbz	r0, b6566 <_ZN6AB18058isBitSetEhhb+0x1a>
   b655a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b655e:	421c      	tst	r4, r3
   b6560:	bf14      	ite	ne
   b6562:	2001      	movne	r0, #1
   b6564:	2000      	moveq	r0, #0
}
   b6566:	b002      	add	sp, #8
   b6568:	bd10      	pop	{r4, pc}

000b656a <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b656a:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b656c:	43d2      	mvns	r2, r2
   b656e:	9300      	str	r3, [sp, #0]
   b6570:	b2d2      	uxtb	r2, r2
   b6572:	2300      	movs	r3, #0
   b6574:	f7ff ffac 	bl	b64d0 <_ZN6AB180512maskRegisterEhhhb>
}
   b6578:	b003      	add	sp, #12
   b657a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6580 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6580:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6582:	2301      	movs	r3, #1
   b6584:	f10d 0207 	add.w	r2, sp, #7
   b6588:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b658a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b658c:	f7ff feb2 	bl	b62f4 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6590:	4605      	mov	r5, r0
   b6592:	b938      	cbnz	r0, b65a4 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6594:	491e      	ldr	r1, [pc, #120]	; (b6610 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6596:	481f      	ldr	r0, [pc, #124]	; (b6614 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6598:	22ad      	movs	r2, #173	; 0xad
   b659a:	f7ff fe2d 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
}
   b659e:	4628      	mov	r0, r5
   b65a0:	b003      	add	sp, #12
   b65a2:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b65a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b65a8:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b65ac:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b65b0:	d00b      	beq.n	b65ca <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b65b2:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b65b4:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b65b6:	210f      	movs	r1, #15
   b65b8:	4620      	mov	r0, r4
   b65ba:	f7ff ffd6 	bl	b656a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b65be:	4a16      	ldr	r2, [pc, #88]	; (b6618 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b65c0:	4916      	ldr	r1, [pc, #88]	; (b661c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b65c2:	4814      	ldr	r0, [pc, #80]	; (b6614 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b65c4:	f7fd fd8a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b65c8:	e7e9      	b.n	b659e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b65ca:	2208      	movs	r2, #8
   b65cc:	2117      	movs	r1, #23
   b65ce:	4620      	mov	r0, r4
   b65d0:	f7ff ffbc 	bl	b654c <_ZN6AB18058isBitSetEhhb>
   b65d4:	b118      	cbz	r0, b65de <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b65d6:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b65d8:	4a11      	ldr	r2, [pc, #68]	; (b6620 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b65da:	61e3      	str	r3, [r4, #28]
   b65dc:	e7f0      	b.n	b65c0 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b65de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b65e2:	071a      	lsls	r2, r3, #28
   b65e4:	d509      	bpl.n	b65fa <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b65e6:	2303      	movs	r3, #3
   b65e8:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b65ea:	2208      	movs	r2, #8
   b65ec:	2301      	movs	r3, #1
   b65ee:	210f      	movs	r1, #15
   b65f0:	4620      	mov	r0, r4
   b65f2:	f7ff ffba 	bl	b656a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b65f6:	4a0b      	ldr	r2, [pc, #44]	; (b6624 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b65f8:	e7e2      	b.n	b65c0 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b65fa:	075b      	lsls	r3, r3, #29
   b65fc:	d5cf      	bpl.n	b659e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b65fe:	2204      	movs	r2, #4
   b6600:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b6602:	2301      	movs	r3, #1
   b6604:	210f      	movs	r1, #15
   b6606:	4620      	mov	r0, r4
   b6608:	f7ff ffaf 	bl	b656a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b660c:	4a06      	ldr	r2, [pc, #24]	; (b6628 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b660e:	e7d7      	b.n	b65c0 <_ZN6AB180516updateWakeReasonEv+0x40>
   b6610:	000bfbdd 	.word	0x000bfbdd
   b6614:	2003e438 	.word	0x2003e438
   b6618:	000bfbae 	.word	0x000bfbae
   b661c:	000bfbfc 	.word	0x000bfbfc
   b6620:	000bfbb7 	.word	0x000bfbb7
   b6624:	000bfbc7 	.word	0x000bfbc7
   b6628:	000bfbd7 	.word	0x000bfbd7

000b662c <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b662c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b662e:	9300      	str	r3, [sp, #0]
   b6630:	4613      	mov	r3, r2
   b6632:	22ff      	movs	r2, #255	; 0xff
   b6634:	f7ff ff4c 	bl	b64d0 <_ZN6AB180512maskRegisterEhhhb>
}
   b6638:	b003      	add	sp, #12
   b663a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6640 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6642:	460f      	mov	r7, r1
   b6644:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6646:	2301      	movs	r3, #1
   b6648:	2200      	movs	r2, #0
   b664a:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b664c:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b664e:	f7ff fee1 	bl	b6414 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6652:	4604      	mov	r4, r0
   b6654:	b938      	cbnz	r0, b6666 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b6656:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b665a:	491f      	ldr	r1, [pc, #124]	; (b66d8 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b665c:	481f      	ldr	r0, [pc, #124]	; (b66dc <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b665e:	f7ff fdcb 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
}
   b6662:	4620      	mov	r0, r4
   b6664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6666:	2301      	movs	r3, #1
   b6668:	2223      	movs	r2, #35	; 0x23
   b666a:	2118      	movs	r1, #24
   b666c:	4628      	mov	r0, r5
   b666e:	f7ff fed1 	bl	b6414 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6672:	4604      	mov	r4, r0
   b6674:	b910      	cbnz	r0, b667c <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6676:	f240 229b 	movw	r2, #667	; 0x29b
   b667a:	e7ee      	b.n	b665a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b667c:	2fff      	cmp	r7, #255	; 0xff
   b667e:	bfa8      	it	ge
   b6680:	27ff      	movge	r7, #255	; 0xff
   b6682:	2f01      	cmp	r7, #1
   b6684:	bfb8      	it	lt
   b6686:	2701      	movlt	r7, #1
   b6688:	2301      	movs	r3, #1
   b668a:	b2fa      	uxtb	r2, r7
   b668c:	2119      	movs	r1, #25
   b668e:	4628      	mov	r0, r5
   b6690:	f7ff fec0 	bl	b6414 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6694:	4604      	mov	r4, r0
   b6696:	b910      	cbnz	r0, b669e <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6698:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b669c:	e7dd      	b.n	b665a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b669e:	2301      	movs	r3, #1
   b66a0:	2208      	movs	r2, #8
   b66a2:	2112      	movs	r1, #18
   b66a4:	4628      	mov	r0, r5
   b66a6:	f7ff ffc1 	bl	b662c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b66aa:	4604      	mov	r4, r0
   b66ac:	b910      	cbnz	r0, b66b4 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b66ae:	f240 22af 	movw	r2, #687	; 0x2af
   b66b2:	e7d2      	b.n	b665a <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b66b4:	2e00      	cmp	r6, #0
   b66b6:	bf14      	ite	ne
   b66b8:	2203      	movne	r2, #3
   b66ba:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b66bc:	2301      	movs	r3, #1
   b66be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b66c2:	2118      	movs	r1, #24
   b66c4:	4628      	mov	r0, r5
   b66c6:	f7ff fea5 	bl	b6414 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b66ca:	4604      	mov	r4, r0
   b66cc:	2800      	cmp	r0, #0
   b66ce:	d1c8      	bne.n	b6662 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b66d0:	f240 22b9 	movw	r2, #697	; 0x2b9
   b66d4:	e7c1      	b.n	b665a <_ZN6AB180517setCountdownTimerEib+0x1a>
   b66d6:	bf00      	nop
   b66d8:	000bfc0d 	.word	0x000bfc0d
   b66dc:	2003e438 	.word	0x2003e438

000b66e0 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b66e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b66e4:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b66e6:	4605      	mov	r5, r0
   b66e8:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b66ea:	484f      	ldr	r0, [pc, #316]	; (b6828 <_ZN6AB180513deepPowerDownEi+0x148>)
   b66ec:	494f      	ldr	r1, [pc, #316]	; (b682c <_ZN6AB180513deepPowerDownEi+0x14c>)
   b66ee:	f7fd fcf5 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b66f2:	2100      	movs	r1, #0
   b66f4:	4628      	mov	r0, r5
   b66f6:	f7ff fe99 	bl	b642c <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b66fa:	4604      	mov	r4, r0
   b66fc:	b948      	cbnz	r0, b6712 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b66fe:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b6702:	494b      	ldr	r1, [pc, #300]	; (b6830 <_ZN6AB180513deepPowerDownEi+0x150>)
   b6704:	4848      	ldr	r0, [pc, #288]	; (b6828 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6706:	f7ff fd77 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
}
   b670a:	4620      	mov	r0, r4
   b670c:	b003      	add	sp, #12
   b670e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b6712:	2301      	movs	r3, #1
   b6714:	461a      	mov	r2, r3
   b6716:	2130      	movs	r1, #48	; 0x30
   b6718:	4628      	mov	r0, r5
   b671a:	f7ff ff87 	bl	b662c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b671e:	4604      	mov	r4, r0
   b6720:	b910      	cbnz	r0, b6728 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b6722:	f240 2205 	movw	r2, #517	; 0x205
   b6726:	e7ec      	b.n	b6702 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6728:	2210      	movs	r2, #16
   b672a:	2301      	movs	r3, #1
   b672c:	4611      	mov	r1, r2
   b672e:	4628      	mov	r0, r5
   b6730:	f7ff ff1b 	bl	b656a <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b6734:	4604      	mov	r4, r0
   b6736:	b910      	cbnz	r0, b673e <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6738:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b673c:	e7e1      	b.n	b6702 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b673e:	2301      	movs	r3, #1
   b6740:	2226      	movs	r2, #38	; 0x26
   b6742:	2113      	movs	r1, #19
   b6744:	4628      	mov	r0, r5
   b6746:	f7ff fe65 	bl	b6414 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b674a:	4604      	mov	r4, r0
   b674c:	b910      	cbnz	r0, b6754 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b674e:	f240 2213 	movw	r2, #531	; 0x213
   b6752:	e7d6      	b.n	b6702 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b6754:	2601      	movs	r6, #1
   b6756:	9600      	str	r6, [sp, #0]
   b6758:	4633      	mov	r3, r6
   b675a:	22fc      	movs	r2, #252	; 0xfc
   b675c:	2111      	movs	r1, #17
   b675e:	4628      	mov	r0, r5
   b6760:	f7ff feb6 	bl	b64d0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6764:	4604      	mov	r4, r0
   b6766:	b910      	cbnz	r0, b676e <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6768:	f240 221b 	movw	r2, #539	; 0x21b
   b676c:	e7c9      	b.n	b6702 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b676e:	2200      	movs	r2, #0
   b6770:	4639      	mov	r1, r7
   b6772:	4628      	mov	r0, r5
   b6774:	f7ff ff64 	bl	b6640 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6778:	4604      	mov	r4, r0
   b677a:	b910      	cbnz	r0, b6782 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b677c:	f240 2222 	movw	r2, #546	; 0x222
   b6780:	e7bf      	b.n	b6702 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b6782:	9600      	str	r6, [sp, #0]
   b6784:	2302      	movs	r3, #2
   b6786:	2277      	movs	r2, #119	; 0x77
   b6788:	2110      	movs	r1, #16
   b678a:	4628      	mov	r0, r5
   b678c:	f7ff fea0 	bl	b64d0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6790:	4604      	mov	r4, r0
   b6792:	b910      	cbnz	r0, b679a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6794:	f240 222b 	movw	r2, #555	; 0x22b
   b6798:	e7b3      	b.n	b6702 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b679a:	4633      	mov	r3, r6
   b679c:	2204      	movs	r2, #4
   b679e:	211c      	movs	r1, #28
   b67a0:	4628      	mov	r0, r5
   b67a2:	f7ff ff43 	bl	b662c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b67a6:	4604      	mov	r4, r0
   b67a8:	b910      	cbnz	r0, b67b0 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b67aa:	f240 2232 	movw	r2, #562	; 0x232
   b67ae:	e7a8      	b.n	b6702 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b67b0:	9600      	str	r6, [sp, #0]
   b67b2:	2318      	movs	r3, #24
   b67b4:	22e3      	movs	r2, #227	; 0xe3
   b67b6:	2111      	movs	r1, #17
   b67b8:	4628      	mov	r0, r5
   b67ba:	f7ff fe89 	bl	b64d0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b67be:	4604      	mov	r4, r0
   b67c0:	b910      	cbnz	r0, b67c8 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b67c2:	f240 2239 	movw	r2, #569	; 0x239
   b67c6:	e79c      	b.n	b6702 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b67c8:	4633      	mov	r3, r6
   b67ca:	22c0      	movs	r2, #192	; 0xc0
   b67cc:	2117      	movs	r1, #23
   b67ce:	4628      	mov	r0, r5
   b67d0:	f7ff fe20 	bl	b6414 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b67d4:	4604      	mov	r4, r0
   b67d6:	b910      	cbnz	r0, b67de <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b67d8:	f44f 7210 	mov.w	r2, #576	; 0x240
   b67dc:	e791      	b.n	b6702 <_ZN6AB180513deepPowerDownEi+0x22>
   b67de:	f003 ff01 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b67e2:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6838 <_ZN6AB180513deepPowerDownEi+0x158>
   b67e6:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6828 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b67ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b67ee:	4606      	mov	r6, r0
   b67f0:	434f      	muls	r7, r1
   b67f2:	f003 fef7 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
   b67f6:	1b80      	subs	r0, r0, r6
   b67f8:	42b8      	cmp	r0, r7
   b67fa:	d20e      	bcs.n	b681a <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b67fc:	2201      	movs	r2, #1
   b67fe:	2117      	movs	r1, #23
   b6800:	4628      	mov	r0, r5
   b6802:	f7ff fdbd 	bl	b6380 <_ZN6AB180512readRegisterEhb>
   b6806:	4649      	mov	r1, r9
   b6808:	4602      	mov	r2, r0
   b680a:	4640      	mov	r0, r8
   b680c:	f7fd fc66 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6814:	f004 faf2 	bl	badfc <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6818:	e7eb      	b.n	b67f2 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b681a:	4906      	ldr	r1, [pc, #24]	; (b6834 <_ZN6AB180513deepPowerDownEi+0x154>)
   b681c:	4802      	ldr	r0, [pc, #8]	; (b6828 <_ZN6AB180513deepPowerDownEi+0x148>)
   b681e:	f7ff fceb 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b6822:	f006 ff8a 	bl	bd73a <_ZN11SystemClass5resetEv>
    return true;
   b6826:	e770      	b.n	b670a <_ZN6AB180513deepPowerDownEi+0x2a>
   b6828:	2003e438 	.word	0x2003e438
   b682c:	000bfc38 	.word	0x000bfc38
   b6830:	000bfc2d 	.word	0x000bfc2d
   b6834:	000bfc5e 	.word	0x000bfc5e
   b6838:	000bfc49 	.word	0x000bfc49

000b683c <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b683c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6840:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6844:	4605      	mov	r5, r0
   b6846:	460c      	mov	r4, r1
   b6848:	4691      	mov	r9, r2
   b684a:	461f      	mov	r7, r3
    if (lock) {
   b684c:	f1ba 0f00 	cmp.w	sl, #0
   b6850:	d002      	beq.n	b6858 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6852:	6840      	ldr	r0, [r0, #4]
   b6854:	f005 f834 	bl	bb8c0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6858:	b307      	cbz	r7, b689c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b685a:	2f20      	cmp	r7, #32
   b685c:	463e      	mov	r6, r7
   b685e:	bf28      	it	cs
   b6860:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6862:	2c7f      	cmp	r4, #127	; 0x7f
   b6864:	d826      	bhi.n	b68b4 <_ZN6AB18057readRamEjPhjb+0x78>
   b6866:	1933      	adds	r3, r6, r4
   b6868:	2b80      	cmp	r3, #128	; 0x80
   b686a:	d901      	bls.n	b6870 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b686c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6870:	2301      	movs	r3, #1
   b6872:	2204      	movs	r2, #4
   b6874:	213f      	movs	r1, #63	; 0x3f
   b6876:	4628      	mov	r0, r5
   b6878:	f7ff fe77 	bl	b656a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b687c:	2300      	movs	r3, #0
   b687e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6882:	9300      	str	r3, [sp, #0]
   b6884:	464a      	mov	r2, r9
   b6886:	4633      	mov	r3, r6
   b6888:	b2c9      	uxtb	r1, r1
   b688a:	4628      	mov	r0, r5
   b688c:	f7ff fce4 	bl	b6258 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6890:	4680      	mov	r8, r0
   b6892:	b128      	cbz	r0, b68a0 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6894:	4434      	add	r4, r6
        dataLen -= count;
   b6896:	1bbf      	subs	r7, r7, r6
        data += count;
   b6898:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b689a:	e7dd      	b.n	b6858 <_ZN6AB18057readRamEjPhjb+0x1c>
   b689c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b68a0:	f1ba 0f00 	cmp.w	sl, #0
   b68a4:	d002      	beq.n	b68ac <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b68a6:	6868      	ldr	r0, [r5, #4]
   b68a8:	f005 f813 	bl	bb8d2 <_ZN7TwoWire6unlockEv>
}
   b68ac:	4640      	mov	r0, r8
   b68ae:	b002      	add	sp, #8
   b68b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b68b4:	2301      	movs	r3, #1
   b68b6:	2204      	movs	r2, #4
   b68b8:	213f      	movs	r1, #63	; 0x3f
   b68ba:	4628      	mov	r0, r5
   b68bc:	f7ff feb6 	bl	b662c <_ZN6AB180514setRegisterBitEhhb>
   b68c0:	e7dc      	b.n	b687c <_ZN6AB18057readRamEjPhjb+0x40>

000b68c2 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b68c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b68c6:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b68ca:	4605      	mov	r5, r0
   b68cc:	460c      	mov	r4, r1
   b68ce:	4691      	mov	r9, r2
   b68d0:	461f      	mov	r7, r3
    if (lock) {
   b68d2:	f1ba 0f00 	cmp.w	sl, #0
   b68d6:	d002      	beq.n	b68de <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b68d8:	6840      	ldr	r0, [r0, #4]
   b68da:	f004 fff1 	bl	bb8c0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b68de:	b307      	cbz	r7, b6922 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b68e0:	2f1f      	cmp	r7, #31
   b68e2:	463e      	mov	r6, r7
   b68e4:	bf28      	it	cs
   b68e6:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b68e8:	2c7f      	cmp	r4, #127	; 0x7f
   b68ea:	d826      	bhi.n	b693a <_ZN6AB18058writeRamEjPKhjb+0x78>
   b68ec:	1933      	adds	r3, r6, r4
   b68ee:	2b80      	cmp	r3, #128	; 0x80
   b68f0:	d901      	bls.n	b68f6 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b68f2:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b68f6:	2301      	movs	r3, #1
   b68f8:	2204      	movs	r2, #4
   b68fa:	213f      	movs	r1, #63	; 0x3f
   b68fc:	4628      	mov	r0, r5
   b68fe:	f7ff fe34 	bl	b656a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6902:	2300      	movs	r3, #0
   b6904:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6908:	9300      	str	r3, [sp, #0]
   b690a:	464a      	mov	r2, r9
   b690c:	4633      	mov	r3, r6
   b690e:	b2c9      	uxtb	r1, r1
   b6910:	4628      	mov	r0, r5
   b6912:	f7ff fd43 	bl	b639c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b6916:	4680      	mov	r8, r0
   b6918:	b128      	cbz	r0, b6926 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b691a:	4434      	add	r4, r6
        dataLen -= count;
   b691c:	1bbf      	subs	r7, r7, r6
        data += count;
   b691e:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6920:	e7dd      	b.n	b68de <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6922:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6926:	f1ba 0f00 	cmp.w	sl, #0
   b692a:	d002      	beq.n	b6932 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b692c:	6868      	ldr	r0, [r5, #4]
   b692e:	f004 ffd0 	bl	bb8d2 <_ZN7TwoWire6unlockEv>
}
   b6932:	4640      	mov	r0, r8
   b6934:	b002      	add	sp, #8
   b6936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b693a:	2301      	movs	r3, #1
   b693c:	2204      	movs	r2, #4
   b693e:	213f      	movs	r1, #63	; 0x3f
   b6940:	4628      	mov	r0, r5
   b6942:	f7ff fe73 	bl	b662c <_ZN6AB180514setRegisterBitEhhb>
   b6946:	e7dc      	b.n	b6902 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b6948 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b6948:	b530      	push	{r4, r5, lr}
   b694a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b694c:	680d      	ldr	r5, [r1, #0]
   b694e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b6952:	9503      	str	r5, [sp, #12]
   b6954:	684d      	ldr	r5, [r1, #4]
   b6956:	9502      	str	r5, [sp, #8]
   b6958:	688d      	ldr	r5, [r1, #8]
   b695a:	9501      	str	r5, [sp, #4]
   b695c:	68c9      	ldr	r1, [r1, #12]
   b695e:	9100      	str	r1, [sp, #0]
   b6960:	3301      	adds	r3, #1
   b6962:	4904      	ldr	r1, [pc, #16]	; (b6974 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6964:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6968:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b696a:	f006 fe7f 	bl	bd66c <_ZN6String6formatEPKcz>
}
   b696e:	4620      	mov	r0, r4
   b6970:	b005      	add	sp, #20
   b6972:	bd30      	pop	{r4, r5, pc}
   b6974:	000bfc70 	.word	0x000bfc70

000b6978 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6978:	0903      	lsrs	r3, r0, #4
}
   b697a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b697c:	f000 000f 	and.w	r0, r0, #15
}
   b6980:	fb02 0003 	mla	r0, r2, r3, r0
   b6984:	4770      	bx	lr

000b6986 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6986:	b538      	push	{r3, r4, r5, lr}
   b6988:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b698a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b698c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b698e:	f7ff fff3 	bl	b6978 <_ZN6AB180510bcdToValueEh>
   b6992:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6994:	7860      	ldrb	r0, [r4, #1]
   b6996:	f7ff ffef 	bl	b6978 <_ZN6AB180510bcdToValueEh>
   b699a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b699c:	78a0      	ldrb	r0, [r4, #2]
   b699e:	f7ff ffeb 	bl	b6978 <_ZN6AB180510bcdToValueEh>
   b69a2:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b69a4:	78e0      	ldrb	r0, [r4, #3]
   b69a6:	f7ff ffe7 	bl	b6978 <_ZN6AB180510bcdToValueEh>
   b69aa:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b69ac:	7920      	ldrb	r0, [r4, #4]
   b69ae:	f7ff ffe3 	bl	b6978 <_ZN6AB180510bcdToValueEh>
   b69b2:	3801      	subs	r0, #1
   b69b4:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b69b6:	b92d      	cbnz	r5, b69c4 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b69b8:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b69ba:	7828      	ldrb	r0, [r5, #0]
   b69bc:	f7ff ffdc 	bl	b6978 <_ZN6AB180510bcdToValueEh>
   b69c0:	6188      	str	r0, [r1, #24]
}
   b69c2:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b69c4:	7960      	ldrb	r0, [r4, #5]
   b69c6:	f7ff ffd7 	bl	b6978 <_ZN6AB180510bcdToValueEh>
   b69ca:	3064      	adds	r0, #100	; 0x64
   b69cc:	1da5      	adds	r5, r4, #6
   b69ce:	6148      	str	r0, [r1, #20]
   b69d0:	e7f3      	b.n	b69ba <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b69d4 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b69d4:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b69d6:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b69d8:	b088      	sub	sp, #32
   b69da:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b69dc:	461a      	mov	r2, r3
   b69de:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b69e0:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b69e2:	f7ff fda4 	bl	b652e <_ZN6AB180510isBitClearEhhb>
   b69e6:	b1f0      	cbz	r0, b6a26 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b69e8:	2308      	movs	r3, #8
   b69ea:	2601      	movs	r6, #1
   b69ec:	4620      	mov	r0, r4
   b69ee:	9600      	str	r6, [sp, #0]
   b69f0:	eb0d 0203 	add.w	r2, sp, r3
   b69f4:	2100      	movs	r1, #0
   b69f6:	f7ff fc2f 	bl	b6258 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b69fa:	4604      	mov	r4, r0
   b69fc:	b198      	cbz	r0, b6a26 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b69fe:	4632      	mov	r2, r6
   b6a00:	4629      	mov	r1, r5
   b6a02:	f10d 0009 	add.w	r0, sp, #9
   b6a06:	f7ff ffbe 	bl	b6986 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b6a0a:	a804      	add	r0, sp, #16
   b6a0c:	f7ff ff9c 	bl	b6948 <_ZN6AB180510tmToStringEPK2tm>
   b6a10:	4808      	ldr	r0, [pc, #32]	; (b6a34 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b6a12:	9a04      	ldr	r2, [sp, #16]
   b6a14:	4908      	ldr	r1, [pc, #32]	; (b6a38 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b6a16:	f7fd fb61 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6a1a:	a804      	add	r0, sp, #16
   b6a1c:	f006 fcda 	bl	bd3d4 <_ZN6StringD1Ev>
}
   b6a20:	4620      	mov	r0, r4
   b6a22:	b008      	add	sp, #32
   b6a24:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b6a26:	2224      	movs	r2, #36	; 0x24
   b6a28:	2100      	movs	r1, #0
   b6a2a:	4628      	mov	r0, r5
   b6a2c:	f008 f8b6 	bl	beb9c <memset>
   b6a30:	2400      	movs	r4, #0
   b6a32:	e7f5      	b.n	b6a20 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b6a34:	2003e438 	.word	0x2003e438
   b6a38:	000bfc8e 	.word	0x000bfc8e

000b6a3c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b6a3c:	b530      	push	{r4, r5, lr}
   b6a3e:	b08b      	sub	sp, #44	; 0x2c
   b6a40:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b6a42:	a901      	add	r1, sp, #4
   b6a44:	f7ff ffc6 	bl	b69d4 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b6a48:	4604      	mov	r4, r0
   b6a4a:	b120      	cbz	r0, b6a56 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b6a4c:	a801      	add	r0, sp, #4
   b6a4e:	f004 f9cd 	bl	badec <mktime>
   b6a52:	e9c5 0100 	strd	r0, r1, [r5]
}
   b6a56:	4620      	mov	r0, r4
   b6a58:	b00b      	add	sp, #44	; 0x2c
   b6a5a:	bd30      	pop	{r4, r5, pc}

000b6a5c <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b6a5c:	230a      	movs	r3, #10
   b6a5e:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b6a62:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b6a66:	fb91 f2f3 	sdiv	r2, r1, r3
   b6a6a:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b6a6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b6a72:	b2c0      	uxtb	r0, r0
   b6a74:	4770      	bx	lr

000b6a76 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6a76:	b570      	push	{r4, r5, r6, lr}
   b6a78:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b6a7a:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6a7c:	460c      	mov	r4, r1
   b6a7e:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b6a80:	f7ff ffec 	bl	b6a5c <_ZN6AB180510valueToBcdEi>
   b6a84:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6a86:	6868      	ldr	r0, [r5, #4]
   b6a88:	f7ff ffe8 	bl	b6a5c <_ZN6AB180510valueToBcdEi>
   b6a8c:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b6a8e:	68a8      	ldr	r0, [r5, #8]
   b6a90:	f7ff ffe4 	bl	b6a5c <_ZN6AB180510valueToBcdEi>
   b6a94:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6a96:	68e8      	ldr	r0, [r5, #12]
   b6a98:	f7ff ffe0 	bl	b6a5c <_ZN6AB180510valueToBcdEi>
   b6a9c:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6a9e:	6928      	ldr	r0, [r5, #16]
   b6aa0:	3001      	adds	r0, #1
   b6aa2:	f7ff ffdb 	bl	b6a5c <_ZN6AB180510valueToBcdEi>
   b6aa6:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6aa8:	b92e      	cbnz	r6, b6ab6 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6aaa:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6aac:	69a8      	ldr	r0, [r5, #24]
   b6aae:	f7ff ffd5 	bl	b6a5c <_ZN6AB180510valueToBcdEi>
   b6ab2:	7030      	strb	r0, [r6, #0]
}
   b6ab4:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6ab6:	696a      	ldr	r2, [r5, #20]
   b6ab8:	2364      	movs	r3, #100	; 0x64
   b6aba:	fb92 f0f3 	sdiv	r0, r2, r3
   b6abe:	fb03 2010 	mls	r0, r3, r0, r2
   b6ac2:	f7ff ffcb 	bl	b6a5c <_ZN6AB180510valueToBcdEi>
   b6ac6:	1da6      	adds	r6, r4, #6
   b6ac8:	7160      	strb	r0, [r4, #5]
   b6aca:	e7ef      	b.n	b6aac <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6acc <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6acc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6ace:	b087      	sub	sp, #28
   b6ad0:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6ad2:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6ad4:	4616      	mov	r6, r2
   b6ad6:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6ad8:	f7ff ff36 	bl	b6948 <_ZN6AB180510tmToStringEPK2tm>
   b6adc:	481e      	ldr	r0, [pc, #120]	; (b6b58 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6ade:	9a02      	ldr	r2, [sp, #8]
   b6ae0:	491e      	ldr	r1, [pc, #120]	; (b6b5c <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b6ae2:	f7fd fafb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6ae6:	a802      	add	r0, sp, #8
   b6ae8:	f006 fc74 	bl	bd3d4 <_ZN6StringD1Ev>
    if (lock) {
   b6aec:	b116      	cbz	r6, b6af4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b6aee:	6868      	ldr	r0, [r5, #4]
   b6af0:	f004 fee6 	bl	bb8c0 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b6af4:	4620      	mov	r0, r4
   b6af6:	2201      	movs	r2, #1
   b6af8:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6afc:	2700      	movs	r7, #0
   b6afe:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b6b02:	f7ff ffb8 	bl	b6a76 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6b06:	2301      	movs	r3, #1
   b6b08:	461a      	mov	r2, r3
   b6b0a:	2110      	movs	r1, #16
   b6b0c:	4628      	mov	r0, r5
   b6b0e:	f7ff fd8d 	bl	b662c <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b6b12:	4604      	mov	r4, r0
   b6b14:	b1e8      	cbz	r0, b6b52 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b6b16:	2308      	movs	r3, #8
   b6b18:	9700      	str	r7, [sp, #0]
   b6b1a:	eb0d 0203 	add.w	r2, sp, r3
   b6b1e:	4639      	mov	r1, r7
   b6b20:	4628      	mov	r0, r5
   b6b22:	f7ff fc3b 	bl	b639c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b6b26:	4604      	mov	r4, r0
   b6b28:	b160      	cbz	r0, b6b44 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6b2a:	2301      	movs	r3, #1
   b6b2c:	461a      	mov	r2, r3
   b6b2e:	2110      	movs	r1, #16
   b6b30:	4628      	mov	r0, r5
   b6b32:	f7ff fd1a 	bl	b656a <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b6b36:	b116      	cbz	r6, b6b3e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b6b38:	6868      	ldr	r0, [r5, #4]
   b6b3a:	f004 feca 	bl	bb8d2 <_ZN7TwoWire6unlockEv>
}
   b6b3e:	4620      	mov	r0, r4
   b6b40:	b007      	add	sp, #28
   b6b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b6b44:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b6b48:	4905      	ldr	r1, [pc, #20]	; (b6b60 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b6b4a:	4803      	ldr	r0, [pc, #12]	; (b6b58 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6b4c:	f7ff fb54 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
   b6b50:	e7f1      	b.n	b6b36 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b6b52:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b6b56:	e7f7      	b.n	b6b48 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b6b58:	2003e438 	.word	0x2003e438
   b6b5c:	000bfc9c 	.word	0x000bfc9c
   b6b60:	000bfcaa 	.word	0x000bfcaa

000b6b64 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6b64:	b513      	push	{r0, r1, r4, lr}
   b6b66:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b6b68:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6b6a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b6b6e:	f007 ffc7 	bl	beb00 <gmtime>
    return setRtcFromTm(tm, lock);
   b6b72:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b6b76:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6b78:	4620      	mov	r0, r4
   b6b7a:	f7ff ffa7 	bl	b6acc <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b6b7e:	b002      	add	sp, #8
   b6b80:	bd10      	pop	{r4, pc}
	...

000b6b84 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6b86:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6b88:	b089      	sub	sp, #36	; 0x24
   b6b8a:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6b8c:	bb75      	cbnz	r5, b6bec <_ZN6AB18054loopEv+0x68>
   b6b8e:	f006 ffa3 	bl	bdad8 <_ZN9TimeClass7isValidEv>
   b6b92:	b358      	cbz	r0, b6bec <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b6b94:	2600      	movs	r6, #0
   b6b96:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6b98:	a904      	add	r1, sp, #16
   b6b9a:	4628      	mov	r0, r5
        tm = 0;
   b6b9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6ba0:	f004 f82c 	bl	babfc <spark_sync_time_last>
   b6ba4:	b310      	cbz	r0, b6bec <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6ba6:	2501      	movs	r5, #1
   b6ba8:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6baa:	f006 ffb2 	bl	bdb12 <_ZN9TimeClass3nowEv>
   b6bae:	17c3      	asrs	r3, r0, #31
   b6bb0:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6bb4:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6bb6:	9500      	str	r5, [sp, #0]
   b6bb8:	4620      	mov	r0, r4
   b6bba:	f7ff ffd3 	bl	b6b64 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b6bbe:	a902      	add	r1, sp, #8
   b6bc0:	4620      	mov	r0, r4
        time = 0;
   b6bc2:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6bc6:	f7ff ff39 	bl	b6a3c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6bca:	4b13      	ldr	r3, [pc, #76]	; (b6c18 <_ZN6AB18054loopEv+0x94>)
   b6bcc:	4913      	ldr	r1, [pc, #76]	; (b6c1c <_ZN6AB18054loopEv+0x98>)
   b6bce:	681b      	ldr	r3, [r3, #0]
   b6bd0:	9300      	str	r3, [sp, #0]
   b6bd2:	a804      	add	r0, sp, #16
   b6bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6bd8:	f006 ff3c 	bl	bda54 <_ZN9TimeClass6formatExPKc>
   b6bdc:	4810      	ldr	r0, [pc, #64]	; (b6c20 <_ZN6AB18054loopEv+0x9c>)
   b6bde:	9a04      	ldr	r2, [sp, #16]
   b6be0:	4910      	ldr	r1, [pc, #64]	; (b6c24 <_ZN6AB18054loopEv+0xa0>)
   b6be2:	f7fd fa7b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6be6:	a804      	add	r0, sp, #16
   b6be8:	f006 fbf4 	bl	bd3d4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6bec:	6963      	ldr	r3, [r4, #20]
   b6bee:	b18b      	cbz	r3, b6c14 <_ZN6AB18054loopEv+0x90>
   b6bf0:	f003 fcf8 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6bf4:	6923      	ldr	r3, [r4, #16]
   b6bf6:	1ac0      	subs	r0, r0, r3
   b6bf8:	6963      	ldr	r3, [r4, #20]
   b6bfa:	4298      	cmp	r0, r3
   b6bfc:	d30a      	bcc.n	b6c14 <_ZN6AB18054loopEv+0x90>
   b6bfe:	f003 fcf1 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b6c02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b6c06:	6120      	str	r0, [r4, #16]
            setWDT();
   b6c08:	4620      	mov	r0, r4
}
   b6c0a:	b009      	add	sp, #36	; 0x24
   b6c0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6c10:	f7ff bc0c 	b.w	b642c <_ZN6AB18056setWDTEi>
}
   b6c14:	b009      	add	sp, #36	; 0x24
   b6c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6c18:	2003ded4 	.word	0x2003ded4
   b6c1c:	2003e6ac 	.word	0x2003e6ac
   b6c20:	2003e438 	.word	0x2003e438
   b6c24:	000bfcc5 	.word	0x000bfcc5

000b6c28 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6c28:	b530      	push	{r4, r5, lr}
   b6c2a:	4604      	mov	r4, r0
   b6c2c:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b6c2e:	b111      	cbz	r1, b6c36 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b6c30:	6840      	ldr	r0, [r0, #4]
   b6c32:	f004 fdf3 	bl	bb81c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b6c36:	4620      	mov	r0, r4
   b6c38:	f7ff fb64 	bl	b6304 <_ZN6AB180510detectChipEv>
   b6c3c:	ad06      	add	r5, sp, #24
   b6c3e:	2800      	cmp	r0, #0
   b6c40:	d037      	beq.n	b6cb2 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b6c42:	4620      	mov	r0, r4
   b6c44:	f7ff fc9c 	bl	b6580 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b6c48:	2301      	movs	r3, #1
   b6c4a:	461a      	mov	r2, r3
   b6c4c:	2110      	movs	r1, #16
   b6c4e:	4620      	mov	r0, r4
   b6c50:	f7ff fc6d 	bl	b652e <_ZN6AB180510isBitClearEhhb>
   b6c54:	b1d8      	cbz	r0, b6c8e <_ZN6AB18055setupEb+0x66>
   b6c56:	f006 ff3f 	bl	bdad8 <_ZN9TimeClass7isValidEv>
   b6c5a:	b9c0      	cbnz	r0, b6c8e <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b6c5c:	a902      	add	r1, sp, #8
   b6c5e:	4620      	mov	r0, r4
   b6c60:	f7ff feec 	bl	b6a3c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b6c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6c68:	f006 fe3a 	bl	bd8e0 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6c6c:	4b13      	ldr	r3, [pc, #76]	; (b6cbc <_ZN6AB18055setupEb+0x94>)
   b6c6e:	4914      	ldr	r1, [pc, #80]	; (b6cc0 <_ZN6AB18055setupEb+0x98>)
   b6c70:	681b      	ldr	r3, [r3, #0]
   b6c72:	9300      	str	r3, [sp, #0]
   b6c74:	4628      	mov	r0, r5
   b6c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6c7a:	f006 feeb 	bl	bda54 <_ZN9TimeClass6formatExPKc>
   b6c7e:	4811      	ldr	r0, [pc, #68]	; (b6cc4 <_ZN6AB18055setupEb+0x9c>)
   b6c80:	9a06      	ldr	r2, [sp, #24]
   b6c82:	4911      	ldr	r1, [pc, #68]	; (b6cc8 <_ZN6AB18055setupEb+0xa0>)
   b6c84:	f7fd fa2a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6c88:	4628      	mov	r0, r5
   b6c8a:	f006 fba3 	bl	bd3d4 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6c8e:	4b0f      	ldr	r3, [pc, #60]	; (b6ccc <_ZN6AB18055setupEb+0xa4>)
   b6c90:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b6c92:	4b0f      	ldr	r3, [pc, #60]	; (b6cd0 <_ZN6AB18055setupEb+0xa8>)
   b6c94:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6c96:	4b0f      	ldr	r3, [pc, #60]	; (b6cd4 <_ZN6AB18055setupEb+0xac>)
   b6c98:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b6c9e:	2300      	movs	r3, #0
   b6ca0:	a802      	add	r0, sp, #8
   b6ca2:	9500      	str	r5, [sp, #0]
   b6ca4:	f7fe f88a 	bl	b4dbc <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6ca8:	4628      	mov	r0, r5
   b6caa:	f7fd fd95 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
}
   b6cae:	b00b      	add	sp, #44	; 0x2c
   b6cb0:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b6cb2:	4909      	ldr	r1, [pc, #36]	; (b6cd8 <_ZN6AB18055setupEb+0xb0>)
   b6cb4:	4803      	ldr	r0, [pc, #12]	; (b6cc4 <_ZN6AB18055setupEb+0x9c>)
   b6cb6:	f7ff fa9f 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
   b6cba:	e7e8      	b.n	b6c8e <_ZN6AB18055setupEb+0x66>
   b6cbc:	2003ded4 	.word	0x2003ded4
   b6cc0:	2003e6ac 	.word	0x2003e6ac
   b6cc4:	2003e438 	.word	0x2003e438
   b6cc8:	000bfcdb 	.word	0x000bfcdb
   b6ccc:	000b64b1 	.word	0x000b64b1
   b6cd0:	000b47cf 	.word	0x000b47cf
   b6cd4:	000b47bb 	.word	0x000b47bb
   b6cd8:	000bfcf8 	.word	0x000bfcf8

000b6cdc <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6cdc:	4b01      	ldr	r3, [pc, #4]	; (b6ce4 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b6cde:	4a02      	ldr	r2, [pc, #8]	; (b6ce8 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6ce0:	601a      	str	r2, [r3, #0]
}
   b6ce2:	4770      	bx	lr
   b6ce4:	2003e438 	.word	0x2003e438
   b6ce8:	000bfd10 	.word	0x000bfd10

000b6cec <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6cec:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b6cee:	2301      	movs	r3, #1
   b6cf0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b6cf2:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6cf4:	4604      	mov	r4, r0
        if (th->func) {
   b6cf6:	b143      	cbz	r3, b6d0a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6cf8:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6cfa:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6cfc:	2301      	movs	r3, #1
   b6cfe:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b6d00:	2000      	movs	r0, #0
    }
   b6d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b6d06:	f003 bc3d 	b.w	ba584 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6d0a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b6d0c:	2800      	cmp	r0, #0
   b6d0e:	d0f5      	beq.n	b6cfc <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b6d10:	6883      	ldr	r3, [r0, #8]
   b6d12:	b90b      	cbnz	r3, b6d18 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b6d14:	f007 fa10 	bl	be138 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6d18:	68c3      	ldr	r3, [r0, #12]
   b6d1a:	e7ee      	b.n	b6cfa <_ZN6Thread3runEPv+0xe>

000b6d1c <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b6d1c:	2a01      	cmp	r2, #1
   b6d1e:	d102      	bne.n	b6d26 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6d20:	6001      	str	r1, [r0, #0]
      }
   b6d22:	2000      	movs	r0, #0
   b6d24:	4770      	bx	lr
	  switch (__op)
   b6d26:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6d28:	bf04      	itt	eq
   b6d2a:	680b      	ldreq	r3, [r1, #0]
   b6d2c:	6003      	streq	r3, [r0, #0]
	      break;
   b6d2e:	e7f8      	b.n	b6d22 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b6d30 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b6d30:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b6d32:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b6d34:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b6d36:	b135      	cbz	r5, b6d46 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b6d38:	4628      	mov	r0, r5
   b6d3a:	f7fd fd4d 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b6d3e:	2110      	movs	r1, #16
   b6d40:	4628      	mov	r0, r5
   b6d42:	f7fd f9ac 	bl	b409e <_ZdlPvj>
   b6d46:	4620      	mov	r0, r4
   b6d48:	2114      	movs	r1, #20
      }
   b6d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b6d4e:	f7fd b9a6 	b.w	b409e <_ZdlPvj>

000b6d52 <_ZN6Thread7disposeEv>:
    void dispose()
   b6d52:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6d54:	6803      	ldr	r3, [r0, #0]
   b6d56:	4604      	mov	r4, r0
        if (!isValid())
   b6d58:	b1ab      	cbz	r3, b6d86 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b6d5a:	6858      	ldr	r0, [r3, #4]
   b6d5c:	f003 fbc2 	bl	ba4e4 <os_thread_is_current>
   b6d60:	b988      	cbnz	r0, b6d86 <_ZN6Thread7disposeEv+0x34>
   b6d62:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b6d64:	7c5a      	ldrb	r2, [r3, #17]
   b6d66:	b912      	cbnz	r2, b6d6e <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b6d68:	6858      	ldr	r0, [r3, #4]
   b6d6a:	f003 fbc3 	bl	ba4f4 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b6d6e:	6823      	ldr	r3, [r4, #0]
   b6d70:	6858      	ldr	r0, [r3, #4]
   b6d72:	f003 fbc7 	bl	ba504 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b6d76:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b6d78:	2300      	movs	r3, #0
   b6d7a:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b6d7c:	b118      	cbz	r0, b6d86 <_ZN6Thread7disposeEv+0x34>
    }
   b6d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6d82:	f7ff bfd5 	b.w	b6d30 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b6d86:	bd10      	pop	{r4, pc}

000b6d88 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b6d88:	4a05      	ldr	r2, [pc, #20]	; (b6da0 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b6d8a:	6002      	str	r2, [r0, #0]
   b6d8c:	2200      	movs	r2, #0
   b6d8e:	6042      	str	r2, [r0, #4]
   b6d90:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b6d92:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b6d96:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b6d9a:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b6d9e:	4770      	bx	lr
   b6da0:	000bfd50 	.word	0x000bfd50

000b6da4 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b6da4:	b510      	push	{r4, lr}
    if (!_instance) {
   b6da6:	4c07      	ldr	r4, [pc, #28]	; (b6dc4 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b6da8:	6823      	ldr	r3, [r4, #0]
   b6daa:	b943      	cbnz	r3, b6dbe <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b6dac:	f240 4064 	movw	r0, #1124	; 0x464
   b6db0:	f7fd f971 	bl	b4096 <_Znwj>
   b6db4:	4603      	mov	r3, r0
   b6db6:	b108      	cbz	r0, b6dbc <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b6db8:	f7ff ffe6 	bl	b6d88 <_ZN19BackgroundPublishRKC1Ev>
   b6dbc:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b6dbe:	6820      	ldr	r0, [r4, #0]
   b6dc0:	bd10      	pop	{r4, pc}
   b6dc2:	bf00      	nop
   b6dc4:	2003e440 	.word	0x2003e440

000b6dc8 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b6dc8:	b538      	push	{r3, r4, r5, lr}
   b6dca:	4604      	mov	r4, r0
    if(thread)
   b6dcc:	6840      	ldr	r0, [r0, #4]
   b6dce:	b190      	cbz	r0, b6df6 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b6dd0:	2302      	movs	r3, #2
   b6dd2:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b6dd4:	f7ff ffbd 	bl	b6d52 <_ZN6Thread7disposeEv>
        delete thread;
   b6dd8:	6865      	ldr	r5, [r4, #4]
   b6dda:	b155      	cbz	r5, b6df2 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b6ddc:	4628      	mov	r0, r5
   b6dde:	f7ff ffb8 	bl	b6d52 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b6de2:	6828      	ldr	r0, [r5, #0]
   b6de4:	b108      	cbz	r0, b6dea <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b6de6:	f7ff ffa3 	bl	b6d30 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b6dea:	2104      	movs	r1, #4
   b6dec:	4628      	mov	r0, r5
   b6dee:	f7fd f956 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b6df2:	2300      	movs	r3, #0
   b6df4:	6063      	str	r3, [r4, #4]
    }
}
   b6df6:	bd38      	pop	{r3, r4, r5, pc}

000b6df8 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6df8:	b510      	push	{r4, lr}
   b6dfa:	4b05      	ldr	r3, [pc, #20]	; (b6e10 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b6dfc:	6003      	str	r3, [r0, #0]
   b6dfe:	4604      	mov	r4, r0
    stop();
   b6e00:	f7ff ffe2 	bl	b6dc8 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b6e04:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b6e08:	f7fd fce6 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
}
   b6e0c:	4620      	mov	r0, r4
   b6e0e:	bd10      	pop	{r4, pc}
   b6e10:	000bfd50 	.word	0x000bfd50

000b6e14 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6e14:	b510      	push	{r4, lr}
   b6e16:	4604      	mov	r4, r0
}
   b6e18:	f7ff ffee 	bl	b6df8 <_ZN19BackgroundPublishRKD1Ev>
   b6e1c:	4620      	mov	r0, r4
   b6e1e:	f240 4164 	movw	r1, #1124	; 0x464
   b6e22:	f7fd f93c 	bl	b409e <_ZdlPvj>
   b6e26:	4620      	mov	r0, r4
   b6e28:	bd10      	pop	{r4, pc}

000b6e2a <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b6e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6e2c:	4604      	mov	r4, r0
   b6e2e:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b6e30:	f100 060d 	add.w	r6, r0, #13
   b6e34:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b6e38:	7b23      	ldrb	r3, [r4, #12]
   b6e3a:	b91b      	cbnz	r3, b6e44 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b6e3c:	2001      	movs	r0, #1
   b6e3e:	f003 ffdd 	bl	badfc <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b6e42:	e7f9      	b.n	b6e38 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b6e44:	7b23      	ldrb	r3, [r4, #12]
   b6e46:	2b02      	cmp	r3, #2
   b6e48:	d064      	beq.n	b6f14 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b6e4a:	68a0      	ldr	r0, [r4, #8]
   b6e4c:	f003 fb6a 	bl	ba524 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b6e50:	68a0      	ldr	r0, [r4, #8]
   b6e52:	f003 fb6f 	bl	ba534 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6e56:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6e5a:	f88d 3000 	strb.w	r3, [sp]
   b6e5e:	463a      	mov	r2, r7
   b6e60:	233c      	movs	r3, #60	; 0x3c
   b6e62:	4631      	mov	r1, r6
   b6e64:	a806      	add	r0, sp, #24
   b6e66:	f004 fa97 	bl	bb398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b6e6a:	9d06      	ldr	r5, [sp, #24]
   b6e6c:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b6e6e:	b933      	cbnz	r3, b6e7e <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b6e70:	7b23      	ldrb	r3, [r4, #12]
   b6e72:	2b02      	cmp	r3, #2
   b6e74:	d003      	beq.n	b6e7e <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b6e76:	2001      	movs	r0, #1
   b6e78:	f003 ffc0 	bl	badfc <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b6e7c:	e7f5      	b.n	b6e6a <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b6e7e:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b6e82:	b31b      	cbz	r3, b6ecc <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b6e84:	2000      	movs	r0, #0
   b6e86:	f003 fe2f 	bl	baae8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6e8a:	b120      	cbz	r0, b6e96 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b6e8c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b6e8e:	b913      	cbnz	r3, b6e96 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b6e90:	f003 fe8c 	bl	babac <spark_process>
    }
   b6e94:	e7fa      	b.n	b6e8c <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6e96:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b6e98:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b6e9c:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b6e9e:	1e59      	subs	r1, r3, #1
   b6ea0:	424b      	negs	r3, r1
   b6ea2:	414b      	adcs	r3, r1
   b6ea4:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b6ea8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b6eac:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b6eb0:	b90b      	cbnz	r3, b6eb6 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b6eb2:	f007 f941 	bl	be138 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6eb6:	ab05      	add	r3, sp, #20
   b6eb8:	9300      	str	r3, [sp, #0]
   b6eba:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b6ebe:	ab04      	add	r3, sp, #16
   b6ec0:	aa03      	add	r2, sp, #12
   b6ec2:	f10d 010b 	add.w	r1, sp, #11
   b6ec6:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b6eca:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b6ecc:	68a0      	ldr	r0, [r4, #8]
   b6ece:	f003 fb29 	bl	ba524 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b6ed2:	7b23      	ldrb	r3, [r4, #12]
   b6ed4:	2b02      	cmp	r3, #2
   b6ed6:	d017      	beq.n	b6f08 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b6ed8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b6edc:	2500      	movs	r5, #0
   b6ede:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b6ee2:	b143      	cbz	r3, b6ef6 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b6ee4:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b6ee8:	2203      	movs	r2, #3
   b6eea:	4608      	mov	r0, r1
   b6eec:	4798      	blx	r3
	    _M_manager = nullptr;
   b6eee:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b6ef2:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b6ef6:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b6ef8:	68a0      	ldr	r0, [r4, #8]
   b6efa:	7323      	strb	r3, [r4, #12]
   b6efc:	f003 fb1a 	bl	ba534 <os_mutex_unlock>
   b6f00:	a807      	add	r0, sp, #28
   b6f02:	f7fe fdb9 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f06:	e797      	b.n	b6e38 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b6f08:	68a0      	ldr	r0, [r4, #8]
   b6f0a:	f003 fb13 	bl	ba534 <os_mutex_unlock>
   b6f0e:	a807      	add	r0, sp, #28
   b6f10:	f7fe fdb2 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b6f14:	b009      	add	sp, #36	; 0x24
   b6f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6f18 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b6f18:	6800      	ldr	r0, [r0, #0]
   b6f1a:	f7ff bf86 	b.w	b6e2a <_ZN19BackgroundPublishRK8thread_fEv>

000b6f1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6f1e:	b513      	push	{r0, r1, r4, lr}
   b6f20:	460b      	mov	r3, r1
   b6f22:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6f24:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6f28:	466c      	mov	r4, sp
   b6f2a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6f2e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6f32:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6f36:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6f3a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6f3e:	b002      	add	sp, #8
   b6f40:	bd10      	pop	{r4, pc}
	...

000b6f44 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b6f44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6f48:	4606      	mov	r6, r0
   b6f4a:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b6f4c:	2014      	movs	r0, #20
   b6f4e:	4926      	ldr	r1, [pc, #152]	; (b6fe8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b6f50:	4617      	mov	r7, r2
   b6f52:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b6f54:	f007 f8e6 	bl	be124 <_ZnwjRKSt9nothrow_t>
   b6f58:	4604      	mov	r4, r0
   b6f5a:	b130      	cbz	r0, b6f6a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b6f5c:	2000      	movs	r0, #0
            exited(false) {
   b6f5e:	e9c4 0000 	strd	r0, r0, [r4]
   b6f62:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b6f66:	7420      	strb	r0, [r4, #16]
   b6f68:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6f6a:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b6f6c:	2c00      	cmp	r4, #0
   b6f6e:	d031      	beq.n	b6fd4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b6f70:	491d      	ldr	r1, [pc, #116]	; (b6fe8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b6f72:	2010      	movs	r0, #16
   b6f74:	f007 f8d6 	bl	be124 <_ZnwjRKSt9nothrow_t>
   b6f78:	4605      	mov	r5, r0
   b6f7a:	b168      	cbz	r0, b6f98 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b6f7c:	2300      	movs	r3, #0
   b6f7e:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6f80:	4601      	mov	r1, r0
   b6f82:	4638      	mov	r0, r7
   b6f84:	f7ff ffcb 	bl	b6f1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6f88:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6f8a:	68aa      	ldr	r2, [r5, #8]
   b6f8c:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6f8e:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6f90:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6f92:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6f94:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6f96:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b6f98:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b6f9a:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b6f9c:	b137      	cbz	r7, b6fac <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b6f9e:	4638      	mov	r0, r7
   b6fa0:	f7fd fc1a 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b6fa4:	2110      	movs	r1, #16
   b6fa6:	4638      	mov	r0, r7
   b6fa8:	f7fd f879 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6fac:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b6fae:	6803      	ldr	r3, [r0, #0]
   b6fb0:	b183      	cbz	r3, b6fd4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b6fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6fb4:	464a      	mov	r2, r9
   b6fb6:	e9cd 0300 	strd	r0, r3, [sp]
   b6fba:	4641      	mov	r1, r8
   b6fbc:	4b0b      	ldr	r3, [pc, #44]	; (b6fec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b6fbe:	3004      	adds	r0, #4
   b6fc0:	f003 fa88 	bl	ba4d4 <os_thread_create>
   b6fc4:	b930      	cbnz	r0, b6fd4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b6fc6:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b6fc8:	7c1b      	ldrb	r3, [r3, #16]
   b6fca:	b94b      	cbnz	r3, b6fe0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b6fcc:	2001      	movs	r0, #1
   b6fce:	f003 faf9 	bl	ba5c4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b6fd2:	e7f8      	b.n	b6fc6 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b6fd4:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b6fd6:	2300      	movs	r3, #0
   b6fd8:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b6fda:	b108      	cbz	r0, b6fe0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b6fdc:	f7ff fea8 	bl	b6d30 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b6fe0:	4630      	mov	r0, r6
   b6fe2:	b003      	add	sp, #12
   b6fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6fe8:	000c0784 	.word	0x000c0784
   b6fec:	000b6ced 	.word	0x000b6ced

000b6ff0 <_ZN19BackgroundPublishRK5startEv>:
{
   b6ff0:	b530      	push	{r4, r5, lr}
    if(!thread)
   b6ff2:	6843      	ldr	r3, [r0, #4]
{
   b6ff4:	b087      	sub	sp, #28
   b6ff6:	4604      	mov	r4, r0
    if(!thread)
   b6ff8:	b9c3      	cbnz	r3, b702c <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b6ffa:	3008      	adds	r0, #8
   b6ffc:	f003 fa8a 	bl	ba514 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b7000:	4b0b      	ldr	r3, [pc, #44]	; (b7030 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b7002:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b7004:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b7006:	4b0b      	ldr	r3, [pc, #44]	; (b7034 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7008:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b700a:	9304      	str	r3, [sp, #16]
   b700c:	f7fd f843 	bl	b4096 <_Znwj>
   b7010:	4605      	mov	r5, r0
   b7012:	b138      	cbz	r0, b7024 <_ZN19BackgroundPublishRK5startEv+0x34>
   b7014:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7018:	9300      	str	r3, [sp, #0]
   b701a:	4907      	ldr	r1, [pc, #28]	; (b7038 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b701c:	2302      	movs	r3, #2
   b701e:	aa02      	add	r2, sp, #8
   b7020:	f7ff ff90 	bl	b6f44 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b7024:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b7026:	a802      	add	r0, sp, #8
   b7028:	f7fd fbd6 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
}
   b702c:	b007      	add	sp, #28
   b702e:	bd30      	pop	{r4, r5, pc}
   b7030:	000b6f19 	.word	0x000b6f19
   b7034:	000b6d1d 	.word	0x000b6d1d
   b7038:	000bfd34 	.word	0x000bfd34

000b703c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b703c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7040:	4604      	mov	r4, r0
   b7042:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b7044:	6880      	ldr	r0, [r0, #8]
   b7046:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7048:	4698      	mov	r8, r3
   b704a:	460d      	mov	r5, r1
   b704c:	4616      	mov	r6, r2
   b704e:	f003 fa69 	bl	ba524 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b7052:	6863      	ldr	r3, [r4, #4]
   b7054:	b11b      	cbz	r3, b705e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b7056:	7b23      	ldrb	r3, [r4, #12]
   b7058:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b705c:	b133      	cbz	r3, b706c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b705e:	68a0      	ldr	r0, [r4, #8]
   b7060:	f003 fa68 	bl	ba534 <os_mutex_unlock>
    {
        return false;
   b7064:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b7066:	b005      	add	sp, #20
   b7068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b706c:	68a0      	ldr	r0, [r4, #8]
   b706e:	f003 fa61 	bl	ba534 <os_mutex_unlock>
    if(!name)
   b7072:	2d00      	cmp	r5, #0
   b7074:	d03d      	beq.n	b70f2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b7076:	2240      	movs	r2, #64	; 0x40
   b7078:	4629      	mov	r1, r5
   b707a:	f104 000d 	add.w	r0, r4, #13
   b707e:	f007 fe64 	bl	bed4a <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b7082:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b7086:	b38e      	cbz	r6, b70ec <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7088:	f240 4201 	movw	r2, #1025	; 0x401
   b708c:	4631      	mov	r1, r6
   b708e:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b7092:	f007 fe5a 	bl	bed4a <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b7096:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b709a:	2300      	movs	r3, #0
   b709c:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b709e:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b70a0:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b70a4:	b13b      	cbz	r3, b70b6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b70a6:	2202      	movs	r2, #2
   b70a8:	4639      	mov	r1, r7
   b70aa:	4668      	mov	r0, sp
   b70ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b70ae:	68fb      	ldr	r3, [r7, #12]
   b70b0:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b70b2:	68bb      	ldr	r3, [r7, #8]
   b70b4:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b70b6:	4629      	mov	r1, r5
   b70b8:	4668      	mov	r0, sp
   b70ba:	f7ff ff30 	bl	b6f1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b70be:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b70c0:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b70c4:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b70c8:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b70ca:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b70cc:	4668      	mov	r0, sp
   b70ce:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b70d2:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b70d6:	9203      	str	r2, [sp, #12]
   b70d8:	f7fd fb7e 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b70dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b70de:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b70e2:	2001      	movs	r0, #1
    event_flags = flags;
   b70e4:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b70e8:	7320      	strb	r0, [r4, #12]
    return true;
   b70ea:	e7bc      	b.n	b7066 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b70ec:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b70f0:	e7d3      	b.n	b709a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b70f2:	4628      	mov	r0, r5
   b70f4:	e7b7      	b.n	b7066 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000b70f6 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b70f6:	4770      	bx	lr

000b70f8 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b70f8:	4770      	bx	lr

000b70fa <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b70fa:	b510      	push	{r4, lr}
}
   b70fc:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b70fe:	4604      	mov	r4, r0
}
   b7100:	f7fc ffcd 	bl	b409e <_ZdlPvj>
   b7104:	4620      	mov	r0, r4
   b7106:	bd10      	pop	{r4, pc}

000b7108 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b7108:	b510      	push	{r4, lr}
}
   b710a:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b710c:	4604      	mov	r4, r0
}
   b710e:	f7fc ffc6 	bl	b409e <_ZdlPvj>
   b7112:	4620      	mov	r0, r4
   b7114:	bd10      	pop	{r4, pc}
	...

000b7118 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b7118:	b510      	push	{r4, lr}
   b711a:	4b05      	ldr	r3, [pc, #20]	; (b7130 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b711c:	4604      	mov	r4, r0
   b711e:	f840 3b1c 	str.w	r3, [r0], #28
   b7122:	f006 f957 	bl	bd3d4 <_ZN6StringD1Ev>
   b7126:	1d20      	adds	r0, r4, #4
   b7128:	f006 f954 	bl	bd3d4 <_ZN6StringD1Ev>
}
   b712c:	4620      	mov	r0, r4
   b712e:	bd10      	pop	{r4, pc}
   b7130:	000bfdc4 	.word	0x000bfdc4

000b7134 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b7134:	b510      	push	{r4, lr}
   b7136:	4604      	mov	r4, r0
}
   b7138:	f7ff ffee 	bl	b7118 <_ZN22LocalTimePosixTimezoneD1Ev>
   b713c:	4620      	mov	r0, r4
   b713e:	2158      	movs	r1, #88	; 0x58
   b7140:	f7fc ffad 	bl	b409e <_ZdlPvj>
   b7144:	4620      	mov	r0, r4
   b7146:	bd10      	pop	{r4, pc}

000b7148 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b7148:	b510      	push	{r4, lr}
   b714a:	4b04      	ldr	r3, [pc, #16]	; (b715c <_ZN9LocalTimeD1Ev+0x14>)
   b714c:	4604      	mov	r4, r0
   b714e:	f840 3b04 	str.w	r3, [r0], #4
   b7152:	f7ff ffe1 	bl	b7118 <_ZN22LocalTimePosixTimezoneD1Ev>
   b7156:	4620      	mov	r0, r4
   b7158:	bd10      	pop	{r4, pc}
   b715a:	bf00      	nop
   b715c:	000bfd94 	.word	0x000bfd94

000b7160 <_ZN9LocalTimeD0Ev>:
   b7160:	b510      	push	{r4, lr}
   b7162:	4604      	mov	r4, r0
   b7164:	f7ff fff0 	bl	b7148 <_ZN9LocalTimeD1Ev>
   b7168:	4620      	mov	r0, r4
   b716a:	2160      	movs	r1, #96	; 0x60
   b716c:	f7fc ff97 	bl	b409e <_ZdlPvj>
   b7170:	4620      	mov	r0, r4
   b7172:	bd10      	pop	{r4, pc}

000b7174 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b7174:	f020 0302 	bic.w	r3, r0, #2
   b7178:	2b01      	cmp	r3, #1
   b717a:	d003      	beq.n	b7184 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b717c:	1f43      	subs	r3, r0, #5
   b717e:	4258      	negs	r0, r3
   b7180:	4158      	adcs	r0, r3
   b7182:	4770      	bx	lr
   b7184:	4618      	mov	r0, r3
   b7186:	4770      	bx	lr

000b7188 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b7188:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b718c:	7103      	strb	r3, [r0, #4]
   b718e:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b7192:	7143      	strb	r3, [r0, #5]
   b7194:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b7198:	7183      	strb	r3, [r0, #6]
   b719a:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b719e:	71c3      	strb	r3, [r0, #7]
   b71a0:	4770      	bx	lr

000b71a2 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b71a2:	b538      	push	{r3, r4, r5, lr}
   b71a4:	4604      	mov	r4, r0
   b71a6:	460d      	mov	r5, r1
   b71a8:	3004      	adds	r0, #4
   b71aa:	3104      	adds	r1, #4
   b71ac:	f006 f999 	bl	bd4e2 <_ZN6StringaSERKS_>
   b71b0:	f105 0114 	add.w	r1, r5, #20
   b71b4:	f104 0014 	add.w	r0, r4, #20
   b71b8:	f7ff ffe6 	bl	b7188 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b71bc:	f105 011c 	add.w	r1, r5, #28
   b71c0:	f104 001c 	add.w	r0, r4, #28
   b71c4:	f006 f98d 	bl	bd4e2 <_ZN6StringaSERKS_>
   b71c8:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b71cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b71d0:	f7ff ffda 	bl	b7188 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b71d4:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b71d8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b71dc:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b71e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b71e4:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b71e8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b71ec:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b71f0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b71f4:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b71f8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b71fc:	f7ff ffc4 	bl	b7188 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b7200:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b7204:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b7208:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b720c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b7210:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b7214:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b7218:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b721c:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b7220:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b7224:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b7228:	f7ff ffae 	bl	b7188 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b722c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b7230:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b7234:	bd38      	pop	{r3, r4, r5, pc}

000b7236 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7236:	680b      	ldr	r3, [r1, #0]
   b7238:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b723a:	684b      	ldr	r3, [r1, #4]
   b723c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b723e:	b113      	cbz	r3, b7246 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b7240:	685a      	ldr	r2, [r3, #4]
   b7242:	3201      	adds	r2, #1
   b7244:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7246:	4770      	bx	lr

000b7248 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b7248:	4a02      	ldr	r2, [pc, #8]	; (b7254 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b724a:	6002      	str	r2, [r0, #0]
   b724c:	684a      	ldr	r2, [r1, #4]
   b724e:	6042      	str	r2, [r0, #4]
   b7250:	4770      	bx	lr
   b7252:	bf00      	nop
   b7254:	000bfda4 	.word	0x000bfda4

000b7258 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b7258:	4a02      	ldr	r2, [pc, #8]	; (b7264 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b725a:	6002      	str	r2, [r0, #0]
   b725c:	2200      	movs	r2, #0
   b725e:	6042      	str	r2, [r0, #4]
}
   b7260:	4770      	bx	lr
   b7262:	bf00      	nop
   b7264:	000bfda4 	.word	0x000bfda4

000b7268 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b7268:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b726a:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b726c:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b726e:	8083      	strh	r3, [r0, #4]
   b7270:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b7272:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b7274:	ab05      	add	r3, sp, #20
   b7276:	9300      	str	r3, [sp, #0]
   b7278:	4913      	ldr	r1, [pc, #76]	; (b72c8 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b727a:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b727c:	ab04      	add	r3, sp, #16
   b727e:	aa03      	add	r2, sp, #12
   b7280:	4628      	mov	r0, r5
   b7282:	f003 fd5b 	bl	bad3c <sscanf>
   b7286:	2803      	cmp	r0, #3
   b7288:	d107      	bne.n	b729a <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b728a:	9b03      	ldr	r3, [sp, #12]
   b728c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b728e:	9b04      	ldr	r3, [sp, #16]
   b7290:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b7292:	9b05      	ldr	r3, [sp, #20]
   b7294:	71a3      	strb	r3, [r4, #6]
}
   b7296:	b007      	add	sp, #28
   b7298:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b729a:	490c      	ldr	r1, [pc, #48]	; (b72cc <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b729c:	ab04      	add	r3, sp, #16
   b729e:	aa03      	add	r2, sp, #12
   b72a0:	4628      	mov	r0, r5
   b72a2:	f003 fd4b 	bl	bad3c <sscanf>
   b72a6:	2802      	cmp	r0, #2
   b72a8:	d104      	bne.n	b72b4 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b72aa:	9b03      	ldr	r3, [sp, #12]
   b72ac:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b72ae:	9b04      	ldr	r3, [sp, #16]
   b72b0:	7163      	strb	r3, [r4, #5]
   b72b2:	e7f0      	b.n	b7296 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b72b4:	4906      	ldr	r1, [pc, #24]	; (b72d0 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b72b6:	aa03      	add	r2, sp, #12
   b72b8:	4628      	mov	r0, r5
   b72ba:	f003 fd3f 	bl	bad3c <sscanf>
   b72be:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b72c0:	bf04      	itt	eq
   b72c2:	9b03      	ldreq	r3, [sp, #12]
   b72c4:	7123      	strbeq	r3, [r4, #4]
}
   b72c6:	e7e6      	b.n	b7296 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b72c8:	000bfd58 	.word	0x000bfd58
   b72cc:	000bfd5b 	.word	0x000bfd5b
   b72d0:	000bfb6b 	.word	0x000bfb6b

000b72d4 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b72d4:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b72d8:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b72dc:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b72e0:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b72e2:	bfb8      	it	lt
   b72e4:	4808      	ldrlt	r0, [pc, #32]	; (b7308 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b72e6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b72ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b72ee:	bfbd      	ittte	lt
   b72f0:	fb00 3002 	mlalt	r0, r0, r2, r3
   b72f4:	1840      	addlt	r0, r0, r1
   b72f6:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b72f8:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b72fc:	bfa4      	itt	ge
   b72fe:	fb00 3002 	mlage	r0, r0, r2, r3
   b7302:	1840      	addge	r0, r0, r1
}
   b7304:	4770      	bx	lr
   b7306:	bf00      	nop
   b7308:	fffff1f0 	.word	0xfffff1f0

000b730c <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b730c:	b508      	push	{r3, lr}
   b730e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b7312:	b14b      	cbz	r3, b7328 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b7314:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b7318:	b943      	cbnz	r3, b732c <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b731a:	302c      	adds	r0, #44	; 0x2c
   b731c:	f7ff ffda 	bl	b72d4 <_ZNK12LocalTimeHMS9toSecondsEv>
   b7320:	fab0 f080 	clz	r0, r0
   b7324:	0940      	lsrs	r0, r0, #5
   b7326:	bd08      	pop	{r3, pc}
   b7328:	2001      	movs	r0, #1
   b732a:	e7fc      	b.n	b7326 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b732c:	2000      	movs	r0, #0
   b732e:	e7fa      	b.n	b7326 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b7330 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b7330:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b7334:	b943      	cbnz	r3, b7348 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b7336:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b733a:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b733c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7340:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b7342:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b7346:	600b      	str	r3, [r1, #0]
}
   b7348:	4770      	bx	lr

000b734a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b734a:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b734e:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b7350:	b9b3      	cbnz	r3, b7380 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b7352:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b7356:	688c      	ldr	r4, [r1, #8]
   b7358:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b735a:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b735e:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b7360:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b7364:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b7366:	bfb5      	itete	lt
   b7368:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b736a:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b736c:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b736e:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b7370:	bfb5      	itete	lt
   b7372:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b7376:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b737a:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b737c:	189b      	addge	r3, r3, r2
   b737e:	600b      	str	r3, [r1, #0]
}
   b7380:	bd30      	pop	{r4, r5, pc}
	...

000b7384 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b7384:	b508      	push	{r3, lr}
   b7386:	4a05      	ldr	r2, [pc, #20]	; (b739c <_ZN15LocalTimeChangeC1Ev+0x18>)
   b7388:	6002      	str	r2, [r0, #0]
   b738a:	2200      	movs	r2, #0
   b738c:	4603      	mov	r3, r0
   b738e:	6042      	str	r2, [r0, #4]
   b7390:	3008      	adds	r0, #8
   b7392:	f7ff ff61 	bl	b7258 <_ZN12LocalTimeHMSC1Ev>
}
   b7396:	4618      	mov	r0, r3
   b7398:	bd08      	pop	{r3, pc}
   b739a:	bf00      	nop
   b739c:	000bfdb4 	.word	0x000bfdb4

000b73a0 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b73a0:	2300      	movs	r3, #0
   b73a2:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b73a4:	8183      	strh	r3, [r0, #12]
   b73a6:	7383      	strb	r3, [r0, #14]
}
   b73a8:	4770      	bx	lr
	...

000b73ac <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b73ac:	b530      	push	{r4, r5, lr}
   b73ae:	4604      	mov	r4, r0
   b73b0:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b73b2:	460d      	mov	r5, r1
   b73b4:	b111      	cbz	r1, b73bc <_ZN15LocalTimeChange5parseEPKc+0x10>
   b73b6:	780b      	ldrb	r3, [r1, #0]
   b73b8:	2b4d      	cmp	r3, #77	; 0x4d
   b73ba:	d005      	beq.n	b73c8 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b73bc:	4620      	mov	r0, r4
}
   b73be:	b007      	add	sp, #28
   b73c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b73c4:	f7ff bfec 	b.w	b73a0 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b73c8:	ab05      	add	r3, sp, #20
   b73ca:	9300      	str	r3, [sp, #0]
   b73cc:	4911      	ldr	r1, [pc, #68]	; (b7414 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b73ce:	ab04      	add	r3, sp, #16
   b73d0:	aa03      	add	r2, sp, #12
   b73d2:	4628      	mov	r0, r5
   b73d4:	f003 fcb2 	bl	bad3c <sscanf>
   b73d8:	2803      	cmp	r0, #3
   b73da:	d116      	bne.n	b740a <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b73dc:	9b03      	ldr	r3, [sp, #12]
   b73de:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b73e0:	9b04      	ldr	r3, [sp, #16]
   b73e2:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b73e4:	9b05      	ldr	r3, [sp, #20]
   b73e6:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b73e8:	212f      	movs	r1, #47	; 0x2f
   b73ea:	4628      	mov	r0, r5
   b73ec:	f007 fc4a 	bl	bec84 <strchr>
        if (cp) {
   b73f0:	b140      	cbz	r0, b7404 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b73f2:	1c41      	adds	r1, r0, #1
   b73f4:	f104 0008 	add.w	r0, r4, #8
   b73f8:	f7ff ff36 	bl	b7268 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b73fc:	2301      	movs	r3, #1
   b73fe:	71e3      	strb	r3, [r4, #7]
}
   b7400:	b007      	add	sp, #28
   b7402:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b7404:	81a0      	strh	r0, [r4, #12]
   b7406:	73a0      	strb	r0, [r4, #14]
}
   b7408:	e7f8      	b.n	b73fc <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b740a:	4620      	mov	r0, r4
   b740c:	f7ff ffc8 	bl	b73a0 <_ZN15LocalTimeChange5clearEv>
   b7410:	e7f6      	b.n	b7400 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b7412:	bf00      	nop
   b7414:	000bfd73 	.word	0x000bfd73

000b7418 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b7418:	4b10      	ldr	r3, [pc, #64]	; (b745c <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b741a:	4911      	ldr	r1, [pc, #68]	; (b7460 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b741c:	b510      	push	{r4, lr}
   b741e:	4604      	mov	r4, r0
   b7420:	f840 3b04 	str.w	r3, [r0], #4
   b7424:	f006 f821 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b7428:	f104 0014 	add.w	r0, r4, #20
   b742c:	f7ff ff14 	bl	b7258 <_ZN12LocalTimeHMSC1Ev>
   b7430:	490b      	ldr	r1, [pc, #44]	; (b7460 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7432:	f104 001c 	add.w	r0, r4, #28
   b7436:	f006 f818 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b743a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b743e:	f7ff ff0b 	bl	b7258 <_ZN12LocalTimeHMSC1Ev>
   b7442:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7446:	f7ff ff9d 	bl	b7384 <_ZN15LocalTimeChangeC1Ev>
   b744a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b744e:	f7ff ff99 	bl	b7384 <_ZN15LocalTimeChangeC1Ev>
   b7452:	2300      	movs	r3, #0
   b7454:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b7458:	4620      	mov	r0, r4
   b745a:	bd10      	pop	{r4, pc}
   b745c:	000bfdc4 	.word	0x000bfdc4
   b7460:	000c05fd 	.word	0x000c05fd

000b7464 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b7464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7468:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b746a:	4608      	mov	r0, r1
   b746c:	f007 fc34 	bl	becd8 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b7470:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b7472:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b7474:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b7476:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b747a:	493f      	ldr	r1, [pc, #252]	; (b7578 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b747c:	9801      	ldr	r0, [sp, #4]
   b747e:	aa01      	add	r2, sp, #4
   b7480:	f007 fcb2 	bl	bede8 <strtok_r>
   b7484:	4601      	mov	r1, r0
   b7486:	2800      	cmp	r0, #0
   b7488:	d062      	beq.n	b7550 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b748a:	2d01      	cmp	r5, #1
   b748c:	f105 0301 	add.w	r3, r5, #1
   b7490:	d053      	beq.n	b753a <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b7492:	2d02      	cmp	r5, #2
   b7494:	d056      	beq.n	b7544 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b7496:	2d00      	cmp	r5, #0
   b7498:	d146      	bne.n	b7528 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b749a:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b749c:	f892 9000 	ldrb.w	r9, [r2]
   b74a0:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b74a4:	4615      	mov	r5, r2
   b74a6:	4617      	mov	r7, r2
   b74a8:	f102 0201 	add.w	r2, r2, #1
   b74ac:	d8f6      	bhi.n	b749c <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b74ae:	2200      	movs	r2, #0
   b74b0:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b74b2:	f104 001c 	add.w	r0, r4, #28
   b74b6:	f006 f836 	bl	bd526 <_ZN6StringaSEPKc>
                valid = true;
   b74ba:	2201      	movs	r2, #1
                *cp = save2;
   b74bc:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b74c0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b74c4:	782a      	ldrb	r2, [r5, #0]
   b74c6:	b36a      	cbz	r2, b7524 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b74c8:	f897 a000 	ldrb.w	sl, [r7]
   b74cc:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b74d0:	2a3f      	cmp	r2, #63	; 0x3f
   b74d2:	46b9      	mov	r9, r7
   b74d4:	46bb      	mov	fp, r7
   b74d6:	f107 0701 	add.w	r7, r7, #1
   b74da:	d9f5      	bls.n	b74c8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b74dc:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b74de:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b74e2:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b74e6:	4629      	mov	r1, r5
   b74e8:	4638      	mov	r0, r7
   b74ea:	f7ff febd 	bl	b7268 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b74ee:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b74f2:	f1ba 0f00 	cmp.w	sl, #0
   b74f6:	d015      	beq.n	b7524 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b74f8:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b74fa:	f81b ab01 	ldrb.w	sl, [fp], #1
   b74fe:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b7502:	d8f9      	bhi.n	b74f8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b7504:	2200      	movs	r2, #0
   b7506:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b7508:	4649      	mov	r1, r9
   b750a:	1d20      	adds	r0, r4, #4
   b750c:	f006 f80b 	bl	bd526 <_ZN6StringaSEPKc>
                        *cp = save2;
   b7510:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b7514:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b7518:	f1ba 0f00 	cmp.w	sl, #0
   b751c:	d006      	beq.n	b752c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b751e:	4629      	mov	r1, r5
   b7520:	f7ff fea2 	bl	b7268 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b7524:	2501      	movs	r5, #1
   b7526:	e7a8      	b.n	b747a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b7528:	461d      	mov	r5, r3
   b752a:	e7a6      	b.n	b747a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b752c:	4639      	mov	r1, r7
   b752e:	f7ff fe2b 	bl	b7188 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b7532:	7e23      	ldrb	r3, [r4, #24]
   b7534:	3b01      	subs	r3, #1
   b7536:	7623      	strb	r3, [r4, #24]
   b7538:	e7f4      	b.n	b7524 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b753a:	4640      	mov	r0, r8
   b753c:	f7ff ff36 	bl	b73ac <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7540:	2502      	movs	r5, #2
   b7542:	e79a      	b.n	b747a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b7544:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7548:	f7ff ff30 	bl	b73ac <_ZN15LocalTimeChange5parseEPKc>
                break;
   b754c:	2503      	movs	r5, #3
   b754e:	e794      	b.n	b747a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b7550:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b7554:	b143      	cbz	r3, b7568 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b7556:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b755a:	b92a      	cbnz	r2, b7568 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b755c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7560:	f7ff ff1e 	bl	b73a0 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b7564:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b7568:	4630      	mov	r0, r6
   b756a:	f003 fbcf 	bl	bad0c <free>

    return valid;
}
   b756e:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b7572:	b003      	add	sp, #12
   b7574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7578:	000bfd7d 	.word	0x000bfd7d

000b757c <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b757c:	b538      	push	{r3, r4, r5, lr}
   b757e:	4b13      	ldr	r3, [pc, #76]	; (b75cc <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b7580:	4604      	mov	r4, r0
   b7582:	460d      	mov	r5, r1
   b7584:	f840 3b04 	str.w	r3, [r0], #4
   b7588:	4911      	ldr	r1, [pc, #68]	; (b75d0 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b758a:	f005 ff6e 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b758e:	f104 0014 	add.w	r0, r4, #20
   b7592:	f7ff fe61 	bl	b7258 <_ZN12LocalTimeHMSC1Ev>
   b7596:	490e      	ldr	r1, [pc, #56]	; (b75d0 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b7598:	f104 001c 	add.w	r0, r4, #28
   b759c:	f005 ff65 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b75a0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b75a4:	f7ff fe58 	bl	b7258 <_ZN12LocalTimeHMSC1Ev>
   b75a8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b75ac:	f7ff feea 	bl	b7384 <_ZN15LocalTimeChangeC1Ev>
   b75b0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b75b4:	f7ff fee6 	bl	b7384 <_ZN15LocalTimeChangeC1Ev>
   b75b8:	2300      	movs	r3, #0
   b75ba:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b75be:	4629      	mov	r1, r5
   b75c0:	4620      	mov	r0, r4
   b75c2:	f7ff ff4f 	bl	b7464 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b75c6:	4620      	mov	r0, r4
   b75c8:	bd38      	pop	{r3, r4, r5, pc}
   b75ca:	bf00      	nop
   b75cc:	000bfdc4 	.word	0x000bfdc4
   b75d0:	000c05fd 	.word	0x000c05fd

000b75d4 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b75d4:	b510      	push	{r4, lr}
   b75d6:	4604      	mov	r4, r0
   b75d8:	b088      	sub	sp, #32
   b75da:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b75dc:	3068      	adds	r0, #104	; 0x68
   b75de:	a901      	add	r1, sp, #4
   b75e0:	f007 fa62 	bl	beaa8 <asctime_r>
    int len = strlen(ascstr);
   b75e4:	a801      	add	r0, sp, #4
   b75e6:	f007 fb94 	bl	bed12 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b75ea:	ab08      	add	r3, sp, #32
   b75ec:	4418      	add	r0, r3
   b75ee:	2300      	movs	r3, #0
   b75f0:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b75f4:	a901      	add	r1, sp, #4
   b75f6:	4620      	mov	r0, r4
   b75f8:	f005 ff37 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b75fc:	4620      	mov	r0, r4
   b75fe:	b008      	add	sp, #32
   b7600:	bd10      	pop	{r4, pc}
	...

000b7604 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b7604:	b538      	push	{r3, r4, r5, lr}
   b7606:	4604      	mov	r4, r0
    if (config.isZ()) {
   b7608:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b760a:	460d      	mov	r5, r1
    if (config.isZ()) {
   b760c:	f7ff fe7e 	bl	b730c <_ZNK22LocalTimePosixTimezone3isZEv>
   b7610:	b128      	cbz	r0, b761e <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b7612:	4909      	ldr	r1, [pc, #36]	; (b7638 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b7614:	4620      	mov	r0, r4
   b7616:	f005 ff28 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b761a:	4620      	mov	r0, r4
   b761c:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b761e:	6828      	ldr	r0, [r5, #0]
   b7620:	f7ff fda8 	bl	b7174 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b7624:	b128      	cbz	r0, b7632 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b7626:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b762a:	4620      	mov	r0, r4
   b762c:	f005 ff68 	bl	bd500 <_ZN6StringC1ERKS_>
   b7630:	e7f3      	b.n	b761a <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b7632:	f105 0120 	add.w	r1, r5, #32
   b7636:	e7f8      	b.n	b762a <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b7638:	000bfd7f 	.word	0x000bfd7f

000b763c <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7640:	4680      	mov	r8, r0
   b7642:	b0a8      	sub	sp, #160	; 0xa0
   b7644:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b7646:	4615      	mov	r5, r2
   b7648:	b12a      	cbz	r2, b7656 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b764a:	4b47      	ldr	r3, [pc, #284]	; (b7768 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b764c:	4610      	mov	r0, r2
   b764e:	6819      	ldr	r1, [r3, #0]
   b7650:	f007 fb2f 	bl	becb2 <strcmp>
   b7654:	b938      	cbnz	r0, b7666 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b7656:	4621      	mov	r1, r4
   b7658:	4640      	mov	r0, r8
   b765a:	f7ff ffbb 	bl	b75d4 <_ZN16LocalTimeConvert7timeStrEv>
}
   b765e:	4640      	mov	r0, r8
   b7660:	b028      	add	sp, #160	; 0xa0
   b7662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b7666:	4629      	mov	r1, r5
   b7668:	223f      	movs	r2, #63	; 0x3f
   b766a:	a818      	add	r0, sp, #96	; 0x60
   b766c:	f007 fb6d 	bl	bed4a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7670:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7672:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7674:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7678:	f007 fb4b 	bl	bed12 <strlen>
    String zoneNameStr = zoneName();
   b767c:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b767e:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b7680:	a803      	add	r0, sp, #12
   b7682:	f7ff ffbf 	bl	b7604 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b7686:	1d20      	adds	r0, r4, #4
   b7688:	f7ff fe40 	bl	b730c <_ZNK22LocalTimePosixTimezone3isZEv>
   b768c:	b348      	cbz	r0, b76e2 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b768e:	4937      	ldr	r1, [pc, #220]	; (b776c <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b7690:	a807      	add	r0, sp, #28
   b7692:	f007 fb18 	bl	becc6 <strcpy>
   b7696:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b7698:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b769a:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b769e:	45ba      	cmp	sl, r7
   b76a0:	d94c      	bls.n	b773c <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b76a2:	7833      	ldrb	r3, [r6, #0]
   b76a4:	2b25      	cmp	r3, #37	; 0x25
   b76a6:	f107 0901 	add.w	r9, r7, #1
   b76aa:	d117      	bne.n	b76dc <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b76ac:	7873      	ldrb	r3, [r6, #1]
   b76ae:	2b7a      	cmp	r3, #122	; 0x7a
   b76b0:	d136      	bne.n	b7720 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b76b2:	a807      	add	r0, sp, #28
   b76b4:	f007 fb2d 	bl	bed12 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b76b8:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b76ba:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b76bc:	1838      	adds	r0, r7, r0
   b76be:	ebaa 0207 	sub.w	r2, sl, r7
   b76c2:	1cb1      	adds	r1, r6, #2
   b76c4:	4418      	add	r0, r3
   b76c6:	f007 fa41 	bl	beb4c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b76ca:	462a      	mov	r2, r5
   b76cc:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b76ce:	4630      	mov	r0, r6
   b76d0:	f007 fa3c 	bl	beb4c <memcpy>
            len = strlen(format_str);
   b76d4:	a818      	add	r0, sp, #96	; 0x60
   b76d6:	f007 fb1c 	bl	bed12 <strlen>
   b76da:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b76dc:	3601      	adds	r6, #1
   b76de:	464f      	mov	r7, r9
   b76e0:	e7db      	b.n	b769a <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b76e2:	6820      	ldr	r0, [r4, #0]
   b76e4:	f7ff fd46 	bl	b7174 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b76e8:	b1b8      	cbz	r0, b771a <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b76ea:	f104 0018 	add.w	r0, r4, #24
   b76ee:	f7ff fdf1 	bl	b72d4 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b76f2:	223c      	movs	r2, #60	; 0x3c
   b76f4:	fb90 f3f2 	sdiv	r3, r0, r2
   b76f8:	2b00      	cmp	r3, #0
   b76fa:	bfb8      	it	lt
   b76fc:	425b      	neglt	r3, r3
   b76fe:	fbb3 f1f2 	udiv	r1, r3, r2
   b7702:	fb02 3311 	mls	r3, r2, r1, r3
   b7706:	9300      	str	r3, [sp, #0]
   b7708:	4a19      	ldr	r2, [pc, #100]	; (b7770 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b770a:	4b1a      	ldr	r3, [pc, #104]	; (b7774 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b770c:	fb90 f3f3 	sdiv	r3, r0, r3
   b7710:	2110      	movs	r1, #16
   b7712:	a807      	add	r0, sp, #28
   b7714:	f003 fb1a 	bl	bad4c <snprintf>
   b7718:	e7bd      	b.n	b7696 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b771a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b771e:	e7e6      	b.n	b76ee <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b7720:	2b5a      	cmp	r3, #90	; 0x5a
   b7722:	d1db      	bne.n	b76dc <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b7724:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7726:	ab18      	add	r3, sp, #96	; 0x60
   b7728:	1978      	adds	r0, r7, r5
   b772a:	ebaa 0207 	sub.w	r2, sl, r7
   b772e:	1cb1      	adds	r1, r6, #2
   b7730:	4418      	add	r0, r3
   b7732:	f007 fa0b 	bl	beb4c <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b7736:	9903      	ldr	r1, [sp, #12]
   b7738:	462a      	mov	r2, r5
   b773a:	e7c8      	b.n	b76ce <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b773c:	2100      	movs	r1, #0
   b773e:	222e      	movs	r2, #46	; 0x2e
   b7740:	a80c      	add	r0, sp, #48	; 0x30
   b7742:	910b      	str	r1, [sp, #44]	; 0x2c
   b7744:	f007 fa2a 	bl	beb9c <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b7748:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b774c:	aa18      	add	r2, sp, #96	; 0x60
   b774e:	2132      	movs	r1, #50	; 0x32
   b7750:	a80b      	add	r0, sp, #44	; 0x2c
   b7752:	f003 fb33 	bl	badbc <strftime>
    return String(buf);    
   b7756:	a90b      	add	r1, sp, #44	; 0x2c
   b7758:	4640      	mov	r0, r8
   b775a:	f005 fe86 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b775e:	a803      	add	r0, sp, #12
   b7760:	f005 fe38 	bl	bd3d4 <_ZN6StringD1Ev>
   b7764:	e77b      	b.n	b765e <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b7766:	bf00      	nop
   b7768:	2003ded4 	.word	0x2003ded4
   b776c:	000bfd7f 	.word	0x000bfd7f
   b7770:	000bfd81 	.word	0x000bfd81
   b7774:	fffff1f0 	.word	0xfffff1f0

000b7778 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b7778:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b777a:	4d09      	ldr	r5, [pc, #36]	; (b77a0 <_ZN9LocalTime8instanceEv+0x28>)
   b777c:	682b      	ldr	r3, [r5, #0]
   b777e:	b963      	cbnz	r3, b779a <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b7780:	2060      	movs	r0, #96	; 0x60
   b7782:	f7fc fc88 	bl	b4096 <_Znwj>
   b7786:	4604      	mov	r4, r0
   b7788:	b130      	cbz	r0, b7798 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b778a:	4b06      	ldr	r3, [pc, #24]	; (b77a4 <_ZN9LocalTime8instanceEv+0x2c>)
   b778c:	f840 3b04 	str.w	r3, [r0], #4
   b7790:	f7ff fe42 	bl	b7418 <_ZN22LocalTimePosixTimezoneC1Ev>
   b7794:	2364      	movs	r3, #100	; 0x64
   b7796:	65e3      	str	r3, [r4, #92]	; 0x5c
   b7798:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b779a:	6828      	ldr	r0, [r5, #0]
   b779c:	bd38      	pop	{r3, r4, r5, pc}
   b779e:	bf00      	nop
   b77a0:	2003e444 	.word	0x2003e444
   b77a4:	000bfd94 	.word	0x000bfd94

000b77a8 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b77a8:	f003 bb20 	b.w	badec <mktime>

000b77ac <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b77ac:	3901      	subs	r1, #1
   b77ae:	290b      	cmp	r1, #11
   b77b0:	d815      	bhi.n	b77de <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b77b2:	e8df f001 	tbb	[pc, r1]
   b77b6:	0816      	.short	0x0816
   b77b8:	06160616 	.word	0x06160616
   b77bc:	16061616 	.word	0x16061616
   b77c0:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b77c2:	201e      	movs	r0, #30
   b77c4:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b77c6:	0783      	lsls	r3, r0, #30
   b77c8:	d10d      	bne.n	b77e6 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b77ca:	2364      	movs	r3, #100	; 0x64
   b77cc:	fb90 f2f3 	sdiv	r2, r0, r3
   b77d0:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b77d4:	2800      	cmp	r0, #0
   b77d6:	bf0c      	ite	eq
   b77d8:	201c      	moveq	r0, #28
   b77da:	201d      	movne	r0, #29
   b77dc:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b77de:	2000      	movs	r0, #0
   b77e0:	4770      	bx	lr
            return 31;
   b77e2:	201f      	movs	r0, #31
   b77e4:	4770      	bx	lr
                return 28;
   b77e6:	201c      	movs	r0, #28
}
   b77e8:	4770      	bx	lr

000b77ea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b77ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b77ec:	2301      	movs	r3, #1
   b77ee:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b77f0:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b77f4:	3b01      	subs	r3, #1
   b77f6:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b77f8:	2300      	movs	r3, #0
   b77fa:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b77fe:	4606      	mov	r6, r0
   b7800:	460c      	mov	r4, r1
   b7802:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b7804:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b7806:	4620      	mov	r0, r4
   b7808:	f7ff ffce 	bl	b77a8 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b780c:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b7810:	69a2      	ldr	r2, [r4, #24]
   b7812:	429a      	cmp	r2, r3
   b7814:	d003      	beq.n	b781e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b7816:	68e3      	ldr	r3, [r4, #12]
   b7818:	3301      	adds	r3, #1
   b781a:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b781c:	e7f3      	b.n	b7806 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b781e:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b7822:	2d01      	cmp	r5, #1
   b7824:	d013      	beq.n	b784e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b7826:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b7828:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b782a:	3d01      	subs	r5, #1
   b782c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b7830:	441d      	add	r5, r3
   b7832:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b7834:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b7838:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b783c:	f7ff ffb6 	bl	b77ac <_ZN9LocalTime14lastDayOfMonthEii>
   b7840:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b7842:	bfc4      	itt	gt
   b7844:	3d07      	subgt	r5, #7
   b7846:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b7848:	4620      	mov	r0, r4
   b784a:	f7ff ffad 	bl	b77a8 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b784e:	4621      	mov	r1, r4
   b7850:	f106 0008 	add.w	r0, r6, #8
   b7854:	f7ff fd6c 	bl	b7330 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b7858:	4638      	mov	r0, r7
   b785a:	f7ff fd76 	bl	b734a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b785e:	4620      	mov	r0, r4
}
   b7860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b7864:	f003 bac2 	b.w	badec <mktime>

000b7868 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b7868:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b786a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b786e:	b085      	sub	sp, #20
   b7870:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b7872:	b92b      	cbnz	r3, b7880 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b7874:	f7ff ff80 	bl	b7778 <_ZN9LocalTime8instanceEv>
   b7878:	1d01      	adds	r1, r0, #4
   b787a:	1d20      	adds	r0, r4, #4
   b787c:	f7ff fc91 	bl	b71a2 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b7880:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b7884:	2b00      	cmp	r3, #0
   b7886:	d065      	beq.n	b7954 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b7888:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b788c:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b7890:	4639      	mov	r1, r7
   b7892:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b7894:	463e      	mov	r6, r7
   b7896:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b789a:	f003 fa97 	bl	badcc <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b789e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b78a0:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b78a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b78a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b78a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b78aa:	6833      	ldr	r3, [r6, #0]
   b78ac:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b78ae:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b78b2:	a802      	add	r0, sp, #8
   b78b4:	f7ff fcc8 	bl	b7248 <_ZN12LocalTimeHMSC1ERKS_>
   b78b8:	aa02      	add	r2, sp, #8
   b78ba:	4639      	mov	r1, r7
   b78bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b78c0:	f7ff ff93 	bl	b77ea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b78c4:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b78c8:	f104 0118 	add.w	r1, r4, #24
   b78cc:	a802      	add	r0, sp, #8
   b78ce:	f7ff fcbb 	bl	b7248 <_ZN12LocalTimeHMSC1ERKS_>
   b78d2:	aa02      	add	r2, sp, #8
   b78d4:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b78d8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b78dc:	f7ff ff85 	bl	b77ea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b78e0:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b78e4:	4286      	cmp	r6, r0
   b78e6:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b78ea:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b78ee:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b78f2:	da23      	bge.n	b793c <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b78f4:	42b2      	cmp	r2, r6
   b78f6:	eb73 0505 	sbcs.w	r5, r3, r5
   b78fa:	da19      	bge.n	b7930 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b78fc:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b78fe:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b7900:	6820      	ldr	r0, [r4, #0]
   b7902:	f7ff fc37 	bl	b7174 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b7906:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b790a:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b790e:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b7910:	bb10      	cbnz	r0, b7958 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b7912:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b7916:	f7ff fcdd 	bl	b72d4 <_ZNK12LocalTimeHMS9toSecondsEv>
   b791a:	1a2d      	subs	r5, r5, r0
   b791c:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b7920:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b7924:	9901      	ldr	r1, [sp, #4]
   b7926:	a802      	add	r0, sp, #8
   b7928:	f003 fa50 	bl	badcc <localtime_r>
}
   b792c:	b005      	add	sp, #20
   b792e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b7930:	4282      	cmp	r2, r0
   b7932:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b7934:	bfb4      	ite	lt
   b7936:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b7938:	2302      	movge	r3, #2
   b793a:	e7e0      	b.n	b78fe <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b793c:	4282      	cmp	r2, r0
   b793e:	eb73 0101 	sbcs.w	r1, r3, r1
   b7942:	da01      	bge.n	b7948 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b7944:	2303      	movs	r3, #3
   b7946:	e7da      	b.n	b78fe <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b7948:	42b2      	cmp	r2, r6
   b794a:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b794c:	bfb4      	ite	lt
   b794e:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b7950:	2305      	movge	r3, #5
   b7952:	e7d4      	b.n	b78fe <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b7954:	2306      	movs	r3, #6
   b7956:	e7d2      	b.n	b78fe <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b7958:	f104 0018 	add.w	r0, r4, #24
   b795c:	e7db      	b.n	b7916 <_ZN16LocalTimeConvert7convertEv+0xae>

000b795e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b795e:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b7960:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7962:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7964:	4668      	mov	r0, sp
   b7966:	f7ff fc66 	bl	b7236 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b796a:	466a      	mov	r2, sp
   b796c:	4629      	mov	r1, r5
   b796e:	4620      	mov	r0, r4
   b7970:	f004 f95e 	bl	bbc30 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b7974:	a801      	add	r0, sp, #4
   b7976:	f7fe f87f 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b797a:	4620      	mov	r0, r4
   b797c:	b003      	add	sp, #12
   b797e:	bd30      	pop	{r4, r5, pc}

000b7980 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7980:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b7982:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7984:	4604      	mov	r4, r0
   b7986:	4668      	mov	r0, sp
   b7988:	f7ff fc55 	bl	b7236 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b798c:	466a      	mov	r2, sp
   b798e:	4629      	mov	r1, r5
   b7990:	4620      	mov	r0, r4
   b7992:	f004 f929 	bl	bbbe8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7996:	a801      	add	r0, sp, #4
   b7998:	f7fe f86e 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b799c:	4620      	mov	r0, r4
   b799e:	b003      	add	sp, #12
   b79a0:	bd30      	pop	{r4, r5, pc}

000b79a2 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b79a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b79a4:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b79a6:	4604      	mov	r4, r0
   b79a8:	4668      	mov	r0, sp
   b79aa:	f7ff fc44 	bl	b7236 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b79ae:	466a      	mov	r2, sp
   b79b0:	4629      	mov	r1, r5
   b79b2:	4620      	mov	r0, r4
   b79b4:	f004 f8c1 	bl	bbb3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b79b8:	a801      	add	r0, sp, #4
   b79ba:	f7fe f85d 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b79be:	4620      	mov	r0, r4
   b79c0:	b003      	add	sp, #12
   b79c2:	bd30      	pop	{r4, r5, pc}

000b79c4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b79c4:	4770      	bx	lr

000b79c6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b79c6:	b510      	push	{r4, lr}
}
   b79c8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b79ca:	4604      	mov	r4, r0
}
   b79cc:	f7fc fb67 	bl	b409e <_ZdlPvj>
   b79d0:	4620      	mov	r0, r4
   b79d2:	bd10      	pop	{r4, pc}

000b79d4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b79d4:	6803      	ldr	r3, [r0, #0]
   b79d6:	b2c9      	uxtb	r1, r1
   b79d8:	689b      	ldr	r3, [r3, #8]
   b79da:	4718      	bx	r3

000b79dc <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b79dc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b79de:	4d03      	ldr	r5, [pc, #12]	; (b79ec <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b79e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b79e4:	e9c0 5100 	strd	r5, r1, [r0]
}
   b79e8:	bd30      	pop	{r4, r5, pc}
   b79ea:	bf00      	nop
   b79ec:	000bfdd4 	.word	0x000bfdd4

000b79f0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b79f0:	6840      	ldr	r0, [r0, #4]
   b79f2:	f003 bf13 	b.w	bb81c <_ZN7TwoWire5beginEv>

000b79f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b79f6:	b510      	push	{r4, lr}
   b79f8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b79fa:	6800      	ldr	r0, [r0, #0]
   b79fc:	f003 ff69 	bl	bb8d2 <_ZN7TwoWire6unlockEv>
   b7a00:	4620      	mov	r0, r4
   b7a02:	bd10      	pop	{r4, pc}

000b7a04 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b7a04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7a08:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b7a0a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7a0c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b7a0e:	460d      	mov	r5, r1
   b7a10:	4616      	mov	r6, r2
   b7a12:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b7a14:	f003 ff54 	bl	bb8c0 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b7a18:	b1a7      	cbz	r7, b7a44 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7a1a:	68e1      	ldr	r1, [r4, #12]
   b7a1c:	6860      	ldr	r0, [r4, #4]
   b7a1e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7a22:	f003 ff2e 	bl	bb882 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b7a26:	0a29      	lsrs	r1, r5, #8
   b7a28:	6860      	ldr	r0, [r4, #4]
   b7a2a:	f7ff ffd3 	bl	b79d4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7a2e:	4629      	mov	r1, r5
   b7a30:	6860      	ldr	r0, [r4, #4]
   b7a32:	f7ff ffcf 	bl	b79d4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b7a36:	6860      	ldr	r0, [r4, #4]
   b7a38:	2100      	movs	r1, #0
   b7a3a:	f003 ff3d 	bl	bb8b8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b7a3e:	b148      	cbz	r0, b7a54 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b7a40:	2400      	movs	r4, #0
   b7a42:	e000      	b.n	b7a46 <_ZN6MB85RC8readDataEjPhj+0x42>
   b7a44:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b7a46:	a801      	add	r0, sp, #4
   b7a48:	f7ff ffd5 	bl	b79f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b7a4c:	4620      	mov	r0, r4
   b7a4e:	b003      	add	sp, #12
   b7a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b7a54:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b7a56:	7b21      	ldrb	r1, [r4, #12]
   b7a58:	6860      	ldr	r0, [r4, #4]
   b7a5a:	46b8      	mov	r8, r7
   b7a5c:	bf28      	it	cs
   b7a5e:	f04f 0820 	movcs.w	r8, #32
   b7a62:	2301      	movs	r3, #1
   b7a64:	4642      	mov	r2, r8
   b7a66:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7a6a:	f003 fef4 	bl	bb856 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b7a6e:	f006 fad1 	bl	be014 <_Z19__fetch_global_Wirev>
   b7a72:	6803      	ldr	r3, [r0, #0]
   b7a74:	691b      	ldr	r3, [r3, #16]
   b7a76:	4798      	blx	r3
   b7a78:	4540      	cmp	r0, r8
   b7a7a:	dbe1      	blt.n	b7a40 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b7a7c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b7a80:	f006 fac8 	bl	be014 <_Z19__fetch_global_Wirev>
   b7a84:	6803      	ldr	r3, [r0, #0]
   b7a86:	695b      	ldr	r3, [r3, #20]
   b7a88:	4798      	blx	r3
   b7a8a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b7a8e:	454e      	cmp	r6, r9
   b7a90:	d1f6      	bne.n	b7a80 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b7a92:	4445      	add	r5, r8
				dataLen--;
   b7a94:	eba7 0708 	sub.w	r7, r7, r8
   b7a98:	e7be      	b.n	b7a18 <_ZN6MB85RC8readDataEjPhj+0x14>

000b7a9a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7a9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a9e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b7aa0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7aa2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7aa4:	460e      	mov	r6, r1
   b7aa6:	4690      	mov	r8, r2
   b7aa8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b7aaa:	f003 ff09 	bl	bb8c0 <_ZN7TwoWire4lockEv>
   b7aae:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b7ab2:	f1b9 0f00 	cmp.w	r9, #0
   b7ab6:	d02a      	beq.n	b7b0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b7ab8:	b34d      	cbz	r5, b7b0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7aba:	68e1      	ldr	r1, [r4, #12]
   b7abc:	6860      	ldr	r0, [r4, #4]
   b7abe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7ac2:	f003 fede 	bl	bb882 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b7ac6:	0a31      	lsrs	r1, r6, #8
   b7ac8:	6860      	ldr	r0, [r4, #4]
   b7aca:	f7ff ff83 	bl	b79d4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7ace:	6860      	ldr	r0, [r4, #4]
   b7ad0:	4631      	mov	r1, r6
   b7ad2:	f7ff ff7f 	bl	b79d4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7ad6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b7ada:	4647      	mov	r7, r8
   b7adc:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b7ae0:	6860      	ldr	r0, [r4, #4]
   b7ae2:	f817 1b01 	ldrb.w	r1, [r7], #1
   b7ae6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b7ae8:	3d01      	subs	r5, #1
				wire.write(*data);
   b7aea:	689b      	ldr	r3, [r3, #8]
   b7aec:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7aee:	4555      	cmp	r5, sl
   b7af0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b7af4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7af6:	d001      	beq.n	b7afc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b7af8:	2d00      	cmp	r5, #0
   b7afa:	d1f1      	bne.n	b7ae0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b7afc:	6860      	ldr	r0, [r4, #4]
   b7afe:	2101      	movs	r1, #1
   b7b00:	f003 feda 	bl	bb8b8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b7b04:	2800      	cmp	r0, #0
   b7b06:	d0d7      	beq.n	b7ab8 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b7b08:	f04f 0900 	mov.w	r9, #0
   b7b0c:	e7d1      	b.n	b7ab2 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b7b0e:	a801      	add	r0, sp, #4
   b7b10:	f7ff ff71 	bl	b79f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b7b14:	4648      	mov	r0, r9
   b7b16:	b003      	add	sp, #12
   b7b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7b1c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7b20:	b08b      	sub	sp, #44	; 0x2c
   b7b22:	460e      	mov	r6, r1
   b7b24:	4615      	mov	r5, r2
   b7b26:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b7b28:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7b2a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7b2c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b7b2e:	f003 fec7 	bl	bb8c0 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b7b32:	42ae      	cmp	r6, r5
   b7b34:	d229      	bcs.n	b7b8a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b7b36:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b7b38:	4425      	add	r5, r4
			while(numBytes > 0) {
   b7b3a:	b18c      	cbz	r4, b7b60 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b7b3c:	2c1e      	cmp	r4, #30
   b7b3e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b7b40:	f8d8 3000 	ldr.w	r3, [r8]
   b7b44:	bf28      	it	cs
   b7b46:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b7b48:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b7b4a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7b4e:	aa02      	add	r2, sp, #8
   b7b50:	463b      	mov	r3, r7
   b7b52:	4631      	mov	r1, r6
   b7b54:	4640      	mov	r0, r8
				framAddrTo -= count;
   b7b56:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b7b58:	47c8      	blx	r9
				if (!result) {
   b7b5a:	b948      	cbnz	r0, b7b70 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7b5c:	2400      	movs	r4, #0
   b7b5e:	e000      	b.n	b7b62 <_ZN6MB85RC8moveDataEjjj+0x46>
   b7b60:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b7b62:	a801      	add	r0, sp, #4
   b7b64:	f7ff ff47 	bl	b79f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b7b68:	4620      	mov	r0, r4
   b7b6a:	b00b      	add	sp, #44	; 0x2c
   b7b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b7b70:	f8d8 3000 	ldr.w	r3, [r8]
   b7b74:	aa02      	add	r2, sp, #8
   b7b76:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7b7a:	4629      	mov	r1, r5
   b7b7c:	463b      	mov	r3, r7
   b7b7e:	4640      	mov	r0, r8
   b7b80:	47c8      	blx	r9
				if (!result) {
   b7b82:	2800      	cmp	r0, #0
   b7b84:	d0ea      	beq.n	b7b5c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b7b86:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7b88:	e7d7      	b.n	b7b3a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b7b8a:	d9e9      	bls.n	b7b60 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b7b8c:	2c00      	cmp	r4, #0
   b7b8e:	d0e7      	beq.n	b7b60 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b7b90:	f8d8 3000 	ldr.w	r3, [r8]
   b7b94:	2c1e      	cmp	r4, #30
   b7b96:	4627      	mov	r7, r4
   b7b98:	bf28      	it	cs
   b7b9a:	271e      	movcs	r7, #30
   b7b9c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7ba0:	aa02      	add	r2, sp, #8
   b7ba2:	463b      	mov	r3, r7
   b7ba4:	4631      	mov	r1, r6
   b7ba6:	4640      	mov	r0, r8
   b7ba8:	47c8      	blx	r9
				if (!result) {
   b7baa:	2800      	cmp	r0, #0
   b7bac:	d0d6      	beq.n	b7b5c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b7bae:	f8d8 3000 	ldr.w	r3, [r8]
   b7bb2:	aa02      	add	r2, sp, #8
   b7bb4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7bb8:	4629      	mov	r1, r5
   b7bba:	463b      	mov	r3, r7
   b7bbc:	4640      	mov	r0, r8
   b7bbe:	47c8      	blx	r9
				if (!result) {
   b7bc0:	2800      	cmp	r0, #0
   b7bc2:	d0cb      	beq.n	b7b5c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b7bc4:	443e      	add	r6, r7
				framAddrTo += count;
   b7bc6:	443d      	add	r5, r7
				numBytes -= count;
   b7bc8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7bca:	e7df      	b.n	b7b8c <_ZN6MB85RC8moveDataEjjj+0x70>

000b7bcc <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b7bcc:	6803      	ldr	r3, [r0, #0]
   b7bce:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b7bd0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b7bd4:	2101      	movs	r1, #1
   b7bd6:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b7bda:	4770      	bx	lr

000b7bdc <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7bdc:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b7bde:	6842      	ldr	r2, [r0, #4]
   b7be0:	4603      	mov	r3, r0
   b7be2:	1054      	asrs	r4, r2, #1
   b7be4:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b7be8:	07d2      	lsls	r2, r2, #31
   b7bea:	bf48      	it	mi
   b7bec:	590a      	ldrmi	r2, [r1, r4]
   b7bee:	681b      	ldr	r3, [r3, #0]
      }
   b7bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7bf4:	bf48      	it	mi
   b7bf6:	58d3      	ldrmi	r3, [r2, r3]
   b7bf8:	4718      	bx	r3

000b7bfa <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b7bfa:	2a01      	cmp	r2, #1
   b7bfc:	d102      	bne.n	b7c04 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7bfe:	6001      	str	r1, [r0, #0]
      }
   b7c00:	2000      	movs	r0, #0
   b7c02:	4770      	bx	lr
	  switch (__op)
   b7c04:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7c06:	bf04      	itt	eq
   b7c08:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b7c0c:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b7c10:	e7f6      	b.n	b7c00 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b7c12 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b7c12:	2a01      	cmp	r2, #1
   b7c14:	d102      	bne.n	b7c1c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7c16:	6001      	str	r1, [r0, #0]
      }
   b7c18:	2000      	movs	r0, #0
   b7c1a:	4770      	bx	lr
	  switch (__op)
   b7c1c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7c1e:	bf04      	itt	eq
   b7c20:	680b      	ldreq	r3, [r1, #0]
   b7c22:	6003      	streq	r3, [r0, #0]
	      break;
   b7c24:	e7f8      	b.n	b7c18 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b7c26 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b7c26:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b7c28:	f002 bc9c 	b.w	ba564 <os_mutex_recursive_lock>

000b7c2c <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b7c2c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b7c30:	4601      	mov	r1, r0
    if (stateHandler) {
   b7c32:	b11b      	cbz	r3, b7c3c <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7c34:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b7c38:	30c0      	adds	r0, #192	; 0xc0
   b7c3a:	4718      	bx	r3
}
   b7c3c:	4770      	bx	lr
	...

000b7c40 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b7c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b7c42:	4d12      	ldr	r5, [pc, #72]	; (b7c8c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b7c44:	4608      	mov	r0, r1
        eventData = "";
   b7c46:	2a00      	cmp	r2, #0
   b7c48:	bf18      	it	ne
   b7c4a:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b7c4c:	460e      	mov	r6, r1
   b7c4e:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b7c50:	f007 f85f 	bl	bed12 <strlen>
   b7c54:	2840      	cmp	r0, #64	; 0x40
   b7c56:	d816      	bhi.n	b7c86 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b7c58:	4628      	mov	r0, r5
   b7c5a:	f007 f85a 	bl	bed12 <strlen>
   b7c5e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b7c62:	d810      	bhi.n	b7c86 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b7c64:	3043      	adds	r0, #67	; 0x43
   b7c66:	f7fc fa18 	bl	b409a <_Znaj>
    if (event) {
   b7c6a:	4604      	mov	r4, r0
   b7c6c:	b148      	cbz	r0, b7c82 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b7c6e:	4631      	mov	r1, r6
        event->flags = flags;
   b7c70:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b7c74:	f007 f827 	bl	becc6 <strcpy>
        strcpy(event->eventData, eventData);
   b7c78:	4629      	mov	r1, r5
   b7c7a:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b7c7e:	f007 f822 	bl	becc6 <strcpy>
}
   b7c82:	4620      	mov	r0, r4
   b7c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b7c86:	2400      	movs	r4, #0
   b7c88:	e7fb      	b.n	b7c82 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b7c8a:	bf00      	nop
   b7c8c:	000c05fd 	.word	0x000c05fd

000b7c90 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b7c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c92:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b7c94:	460a      	mov	r2, r1
   b7c96:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b7c98:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b7c9a:	1d01      	adds	r1, r0, #4
   b7c9c:	a808      	add	r0, sp, #32
   b7c9e:	f002 f8b1 	bl	b9e04 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b7ca2:	9808      	ldr	r0, [sp, #32]
   b7ca4:	2100      	movs	r1, #0
   b7ca6:	f007 f949 	bl	bef3c <open>
   b7caa:	4605      	mov	r5, r0
   b7cac:	a808      	add	r0, sp, #32
   b7cae:	f005 fb91 	bl	bd3d4 <_ZN6StringD1Ev>
    if (fd) {
   b7cb2:	2d00      	cmp	r5, #0
   b7cb4:	d060      	beq.n	b7d78 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b7cb6:	a908      	add	r1, sp, #32
   b7cb8:	4628      	mov	r0, r5
   b7cba:	f007 f92d 	bl	bef18 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b7cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b7cc0:	492e      	ldr	r1, [pc, #184]	; (b7d7c <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b7cc2:	482f      	ldr	r0, [pc, #188]	; (b7d80 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7cc4:	4632      	mov	r2, r6
   b7cc6:	f7fe faa5 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b7cca:	2200      	movs	r2, #0
   b7ccc:	4611      	mov	r1, r2
   b7cce:	4628      	mov	r0, r5
   b7cd0:	f007 f92a 	bl	bef28 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b7cd4:	2208      	movs	r2, #8
   b7cd6:	a906      	add	r1, sp, #24
   b7cd8:	4628      	mov	r0, r5
   b7cda:	f007 f943 	bl	bef64 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b7cde:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7ce0:	2f4a      	cmp	r7, #74	; 0x4a
   b7ce2:	dd39      	ble.n	b7d58 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b7ce4:	4b27      	ldr	r3, [pc, #156]	; (b7d84 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b7ce6:	9a06      	ldr	r2, [sp, #24]
   b7ce8:	429a      	cmp	r2, r3
   b7cea:	d135      	bne.n	b7d58 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b7cec:	4b26      	ldr	r3, [pc, #152]	; (b7d88 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b7cee:	9a07      	ldr	r2, [sp, #28]
   b7cf0:	429a      	cmp	r2, r3
   b7cf2:	d131      	bne.n	b7d58 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b7cf4:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b7cf8:	4610      	mov	r0, r2
   b7cfa:	9205      	str	r2, [sp, #20]
   b7cfc:	f7fc f9cd 	bl	b409a <_Znaj>
            if (result) {
   b7d00:	4604      	mov	r4, r0
   b7d02:	b1c0      	cbz	r0, b7d36 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b7d04:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b7d06:	4601      	mov	r1, r0
   b7d08:	9a05      	ldr	r2, [sp, #20]
   b7d0a:	4628      	mov	r0, r5
   b7d0c:	f007 f92a 	bl	bef64 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b7d10:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b7d14:	b9ab      	cbnz	r3, b7d42 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b7d16:	1c63      	adds	r3, r4, #1
   b7d18:	4618      	mov	r0, r3
   b7d1a:	9305      	str	r3, [sp, #20]
   b7d1c:	f006 fff9 	bl	bed12 <strlen>
   b7d20:	283f      	cmp	r0, #63	; 0x3f
   b7d22:	9b05      	ldr	r3, [sp, #20]
   b7d24:	d80d      	bhi.n	b7d42 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b7d26:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b7d2a:	9200      	str	r2, [sp, #0]
   b7d2c:	4917      	ldr	r1, [pc, #92]	; (b7d8c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b7d2e:	4814      	ldr	r0, [pc, #80]	; (b7d80 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7d30:	4632      	mov	r2, r6
   b7d32:	f7fe fa6f 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b7d36:	4628      	mov	r0, r5
   b7d38:	f007 f8e6 	bl	bef08 <close>
}
   b7d3c:	4620      	mov	r0, r4
   b7d3e:	b01f      	add	sp, #124	; 0x7c
   b7d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b7d42:	4913      	ldr	r1, [pc, #76]	; (b7d90 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b7d44:	480e      	ldr	r0, [pc, #56]	; (b7d80 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7d46:	4632      	mov	r2, r6
   b7d48:	f7fe fa64 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b7d4c:	2143      	movs	r1, #67	; 0x43
   b7d4e:	4620      	mov	r0, r4
   b7d50:	f7fc f9a5 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b7d54:	2400      	movs	r4, #0
   b7d56:	e7ee      	b.n	b7d36 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b7d58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b7d5c:	9302      	str	r3, [sp, #8]
   b7d5e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7d62:	9301      	str	r3, [sp, #4]
   b7d64:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b7d68:	9300      	str	r3, [sp, #0]
   b7d6a:	490a      	ldr	r1, [pc, #40]	; (b7d94 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b7d6c:	9b06      	ldr	r3, [sp, #24]
   b7d6e:	4804      	ldr	r0, [pc, #16]	; (b7d80 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b7d70:	4632      	mov	r2, r6
   b7d72:	f7fe fa4f 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
   b7d76:	e7ed      	b.n	b7d54 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b7d78:	462c      	mov	r4, r5
    return result;
   b7d7a:	e7df      	b.n	b7d3c <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b7d7c:	000bfde8 	.word	0x000bfde8
   b7d80:	2003e448 	.word	0x2003e448
   b7d84:	31b67663 	.word	0x31b67663
   b7d88:	00410801 	.word	0x00410801
   b7d8c:	000bfdfc 	.word	0x000bfdfc
   b7d90:	000bfe1e 	.word	0x000bfe1e
   b7d94:	000bfe4c 	.word	0x000bfe4c

000b7d98 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b7d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7d9c:	4680      	mov	r8, r0
   b7d9e:	4b28      	ldr	r3, [pc, #160]	; (b7e40 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b7da0:	f848 3b04 	str.w	r3, [r8], #4
   b7da4:	4604      	mov	r4, r0
   b7da6:	4640      	mov	r0, r8
   b7da8:	f001 ff44 	bl	b9c34 <_ZN14SequentialFileC1Ev>
   b7dac:	2202      	movs	r2, #2
   b7dae:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b7db0:	2500      	movs	r5, #0
   b7db2:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b7db6:	2308      	movs	r3, #8
   b7db8:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b7dba:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b7dbe:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b7dc2:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b7dc6:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b7dca:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7dcc:	2020      	movs	r0, #32
   b7dce:	f7fc f962 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7dd2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b7dd4:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b7dd6:	3e01      	subs	r6, #1
   b7dd8:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b7dda:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b7dde:	4607      	mov	r7, r0
   b7de0:	f44f 7000 	mov.w	r0, #512	; 0x200
   b7de4:	f7fc f957 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7de8:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b7dec:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b7df0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7df4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7df8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7dfc:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b7e00:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b7e04:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b7e08:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b7e0c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b7e10:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b7e14:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b7e18:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b7e1c:	4909      	ldr	r1, [pc, #36]	; (b7e44 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b7e1e:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b7e22:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b7e26:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b7e2a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b7e2e:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b7e32:	4640      	mov	r0, r8
   b7e34:	f001 ff44 	bl	b9cc0 <_ZN14SequentialFile11withDirPathEPKc>
}
   b7e38:	4620      	mov	r0, r4
   b7e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7e3e:	bf00      	nop
   b7e40:	000c0068 	.word	0x000c0068
   b7e44:	000bfe91 	.word	0x000bfe91

000b7e48 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b7e48:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b7e4a:	4d06      	ldr	r5, [pc, #24]	; (b7e64 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b7e4c:	682b      	ldr	r3, [r5, #0]
   b7e4e:	b93b      	cbnz	r3, b7e60 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b7e50:	20d0      	movs	r0, #208	; 0xd0
   b7e52:	f7fc f920 	bl	b4096 <_Znwj>
   b7e56:	4604      	mov	r4, r0
   b7e58:	b108      	cbz	r0, b7e5e <_ZN17PublishQueuePosix8instanceEv+0x16>
   b7e5a:	f7ff ff9d 	bl	b7d98 <_ZN17PublishQueuePosixC1Ev>
   b7e5e:	602c      	str	r4, [r5, #0]
}
   b7e60:	6828      	ldr	r0, [r5, #0]
   b7e62:	bd38      	pop	{r3, r4, r5, pc}
   b7e64:	2003e44c 	.word	0x2003e44c

000b7e68 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b7e68:	6942      	ldr	r2, [r0, #20]
   b7e6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b7e6c:	1a9b      	subs	r3, r3, r2
   b7e6e:	109b      	asrs	r3, r3, #2
   b7e70:	1e5a      	subs	r2, r3, #1
   b7e72:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b7e76:	1a5b      	subs	r3, r3, r1
   b7e78:	109b      	asrs	r3, r3, #2
   b7e7a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b7e7e:	6902      	ldr	r2, [r0, #16]
   b7e80:	6880      	ldr	r0, [r0, #8]
   b7e82:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b7e84:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b7e88:	4770      	bx	lr

000b7e8a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b7e8a:	b538      	push	{r3, r4, r5, lr}
   b7e8c:	4605      	mov	r5, r0
   b7e8e:	f7ff feca 	bl	b7c26 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b7e92:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b7e96:	f7ff ffe7 	bl	b7e68 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b7e9a:	4604      	mov	r4, r0
   b7e9c:	b950      	cbnz	r0, b7eb4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b7e9e:	1d28      	adds	r0, r5, #4
   b7ea0:	f002 fa04 	bl	ba2ac <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b7ea4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b7ea8:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b7eaa:	b11b      	cbz	r3, b7eb4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b7eac:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b7eb0:	b903      	cbnz	r3, b7eb4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b7eb2:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b7eb4:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b7eb6:	f002 fb5d 	bl	ba574 <os_mutex_recursive_unlock>
}
   b7eba:	4620      	mov	r0, r4
   b7ebc:	bd38      	pop	{r3, r4, r5, pc}

000b7ebe <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b7ebe:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b7ec0:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b7ec2:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b7ec4:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b7ec6:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b7ec8:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b7eca:	d002      	beq.n	b7ed2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b7ecc:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b7ece:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b7ed0:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7ed2:	68c0      	ldr	r0, [r0, #12]
   b7ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
   b7ed8:	f7fc f8e1 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b7edc:	6963      	ldr	r3, [r4, #20]
   b7ede:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b7ee0:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b7ee2:	685b      	ldr	r3, [r3, #4]
   b7ee4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b7ee6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b7eea:	6122      	str	r2, [r4, #16]
   b7eec:	e7ef      	b.n	b7ece <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b7ef0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b7ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ef4:	b085      	sub	sp, #20
   b7ef6:	4604      	mov	r4, r0
   b7ef8:	f7ff fe95 	bl	b7c26 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b7efc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7fa4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b7f00:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b7fa8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b7f04:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b7fac <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b7f08:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b7f0c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b7f10:	4293      	cmp	r3, r2
   b7f12:	d105      	bne.n	b7f20 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b7f14:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b7f16:	b005      	add	sp, #20
   b7f18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f1c:	f002 bb2a 	b.w	ba574 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b7f20:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b7f24:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b7f28:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b7f2a:	f7ff ffc8 	bl	b7ebe <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b7f2e:	4640      	mov	r0, r8
   b7f30:	f002 f960 	bl	ba1f4 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b7f34:	2300      	movs	r3, #0
   b7f36:	4602      	mov	r2, r0
   b7f38:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b7f3a:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b7f3c:	4668      	mov	r0, sp
   b7f3e:	f001 ff61 	bl	b9e04 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b7f42:	9800      	ldr	r0, [sp, #0]
   b7f44:	f240 2102 	movw	r1, #514	; 0x202
   b7f48:	f006 fff8 	bl	bef3c <open>
   b7f4c:	4605      	mov	r5, r0
   b7f4e:	4668      	mov	r0, sp
   b7f50:	f005 fa40 	bl	bd3d4 <_ZN6StringD1Ev>
            if (fd) {
   b7f54:	b1c5      	cbz	r5, b7f88 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b7f56:	2208      	movs	r2, #8
   b7f58:	4669      	mov	r1, sp
   b7f5a:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b7f5c:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b7f60:	f007 f812 	bl	bef88 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b7f64:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b7f68:	f006 fed3 	bl	bed12 <strlen>
   b7f6c:	4639      	mov	r1, r7
   b7f6e:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b7f72:	4628      	mov	r0, r5
   b7f74:	f007 f808 	bl	bef88 <write>
                close(fd);
   b7f78:	4628      	mov	r0, r5
   b7f7a:	f006 ffc5 	bl	bef08 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b7f7e:	4808      	ldr	r0, [pc, #32]	; (b7fa0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b7f80:	4632      	mov	r2, r6
   b7f82:	4659      	mov	r1, fp
   b7f84:	f7fe f946 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b7f88:	4631      	mov	r1, r6
   b7f8a:	4640      	mov	r0, r8
   b7f8c:	f002 f974 	bl	ba278 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b7f90:	2f00      	cmp	r7, #0
   b7f92:	d0b9      	beq.n	b7f08 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b7f94:	2143      	movs	r1, #67	; 0x43
   b7f96:	4638      	mov	r0, r7
   b7f98:	f7fc f881 	bl	b409e <_ZdlPvj>
   b7f9c:	e7b2      	b.n	b7f04 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b7f9e:	bf00      	nop
   b7fa0:	2003e448 	.word	0x2003e448
   b7fa4:	31b67663 	.word	0x31b67663
   b7fa8:	00410801 	.word	0x00410801
   b7fac:	000bfe9f 	.word	0x000bfe9f

000b7fb0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b7fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7fb4:	4604      	mov	r4, r0
   b7fb6:	f7ff fe36 	bl	b7c26 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b7fba:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b7fbe:	f7ff ff53 	bl	b7e68 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b7fc2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b7fc4:	4298      	cmp	r0, r3
   b7fc6:	d902      	bls.n	b7fce <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b7fc8:	4620      	mov	r0, r4
   b7fca:	f7ff ff91 	bl	b7ef0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b7fce:	f8df 8044 	ldr.w	r8, [pc, #68]	; b8014 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b7fd2:	4f0f      	ldr	r7, [pc, #60]	; (b8010 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b7fd4:	1d26      	adds	r6, r4, #4
   b7fd6:	4630      	mov	r0, r6
   b7fd8:	f002 f968 	bl	ba2ac <_ZNK14SequentialFile11getQueueLenEv>
   b7fdc:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b7fde:	4298      	cmp	r0, r3
   b7fe0:	dc04      	bgt.n	b7fec <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b7fe2:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b7fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7fe8:	f002 bac4 	b.w	ba574 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b7fec:	2101      	movs	r1, #1
   b7fee:	4630      	mov	r0, r6
   b7ff0:	f002 f90c 	bl	ba20c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b7ff4:	4605      	mov	r5, r0
   b7ff6:	2800      	cmp	r0, #0
   b7ff8:	d0ed      	beq.n	b7fd6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b7ffa:	4601      	mov	r1, r0
   b7ffc:	2200      	movs	r2, #0
   b7ffe:	4630      	mov	r0, r6
   b8000:	f001 ff3c 	bl	b9e7c <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b8004:	462a      	mov	r2, r5
   b8006:	4641      	mov	r1, r8
   b8008:	4638      	mov	r0, r7
   b800a:	f7fc f867 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b800e:	e7e2      	b.n	b7fd6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b8010:	2003e448 	.word	0x2003e448
   b8014:	000bfebc 	.word	0x000bfebc

000b8018 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b8018:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b801a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b801e:	430b      	orrs	r3, r1
   b8020:	d005      	beq.n	b802e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b8022:	3840      	subs	r0, #64	; 0x40
   b8024:	ea50 0301 	orrs.w	r3, r0, r1
   b8028:	d10b      	bne.n	b8042 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b802a:	2a09      	cmp	r2, #9
   b802c:	d109      	bne.n	b8042 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b802e:	4905      	ldr	r1, [pc, #20]	; (b8044 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b8030:	4805      	ldr	r0, [pc, #20]	; (b8048 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b8032:	f7fe f8ef 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b8036:	f7ff ff07 	bl	b7e48 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b803a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b803e:	f7ff bf57 	b.w	b7ef0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b8042:	bd08      	pop	{r3, pc}
   b8044:	000bfecf 	.word	0x000bfecf
   b8048:	2003e448 	.word	0x2003e448

000b804c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b804c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b804e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b8050:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b8052:	b183      	cbz	r3, b8076 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b8054:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b8056:	6945      	ldr	r5, [r0, #20]
   b8058:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b805a:	42ae      	cmp	r6, r5
   b805c:	d906      	bls.n	b806c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b805e:	f855 0b04 	ldr.w	r0, [r5], #4
   b8062:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8066:	f7fc f81a 	bl	b409e <_ZdlPvj>
   b806a:	e7f6      	b.n	b805a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b806c:	6861      	ldr	r1, [r4, #4]
   b806e:	6820      	ldr	r0, [r4, #0]
   b8070:	0089      	lsls	r1, r1, #2
   b8072:	f7fc f814 	bl	b409e <_ZdlPvj>
    }
   b8076:	4620      	mov	r0, r4
   b8078:	bd70      	pop	{r4, r5, r6, pc}
	...

000b807c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b807c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b807e:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b8082:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b8084:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8086:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b8088:	b90a      	cbnz	r2, b808e <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b808a:	07d9      	lsls	r1, r3, #31
   b808c:	d505      	bpl.n	b809a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b808e:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b8092:	4b0a      	ldr	r3, [pc, #40]	; (b80bc <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b8094:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8096:	4b0a      	ldr	r3, [pc, #40]	; (b80c0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b8098:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b809a:	4621      	mov	r1, r4
   b809c:	4668      	mov	r0, sp
   b809e:	f7fe ff3e 	bl	b6f1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b80a2:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b80a4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b80a6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b80a8:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b80aa:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b80ac:	4668      	mov	r0, sp
   b80ae:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b80b0:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b80b2:	9203      	str	r2, [sp, #12]
   b80b4:	f7fc fb90 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
	}
   b80b8:	b004      	add	sp, #16
   b80ba:	bd10      	pop	{r4, pc}
   b80bc:	000b7bdd 	.word	0x000b7bdd
   b80c0:	000b7bfb 	.word	0x000b7bfb

000b80c4 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b80c4:	b570      	push	{r4, r5, r6, lr}
   b80c6:	b086      	sub	sp, #24
   b80c8:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b80ca:	f002 fd7f 	bl	babcc <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b80ce:	b948      	cbnz	r0, b80e4 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b80d0:	4b43      	ldr	r3, [pc, #268]	; (b81e0 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b80d2:	a902      	add	r1, sp, #8
   b80d4:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b80d8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b80dc:	f7ff ffce 	bl	b807c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b80e0:	b006      	add	sp, #24
   b80e2:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b80e4:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b80e8:	b11d      	cbz	r5, b80f2 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b80ea:	2301      	movs	r3, #1
   b80ec:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b80f0:	e7f6      	b.n	b80e0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b80f2:	f002 fa77 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b80f6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b80fa:	1ac0      	subs	r0, r0, r3
   b80fc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8100:	4298      	cmp	r0, r3
   b8102:	d3ed      	bcc.n	b80e0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b8104:	1d26      	adds	r6, r4, #4
   b8106:	4629      	mov	r1, r5
   b8108:	4630      	mov	r0, r6
   b810a:	f002 f87f 	bl	ba20c <_ZN14SequentialFile16getFileFromQueueEb>
   b810e:	4601      	mov	r1, r0
   b8110:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b8114:	2800      	cmp	r0, #0
   b8116:	d052      	beq.n	b81be <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b8118:	4620      	mov	r0, r4
   b811a:	f7ff fdb9 	bl	b7c90 <_ZN17PublishQueuePosix13readQueueFileEi>
   b811e:	4605      	mov	r5, r0
   b8120:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b8124:	2800      	cmp	r0, #0
   b8126:	d035      	beq.n	b8194 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b8128:	f002 fa5c 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b812c:	ae02      	add	r6, sp, #8
   b812e:	2500      	movs	r5, #0
   b8130:	4b2c      	ldr	r3, [pc, #176]	; (b81e4 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b8132:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b8136:	4631      	mov	r1, r6
   b8138:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b813c:	9302      	str	r3, [sp, #8]
   b813e:	9503      	str	r5, [sp, #12]
   b8140:	f7ff ff9c 	bl	b807c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8144:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b8148:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b814c:	9200      	str	r2, [sp, #0]
   b814e:	4926      	ldr	r1, [pc, #152]	; (b81e8 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b8150:	4a26      	ldr	r2, [pc, #152]	; (b81ec <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b8152:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8156:	42a8      	cmp	r0, r5
   b8158:	bf08      	it	eq
   b815a:	460a      	moveq	r2, r1
   b815c:	3301      	adds	r3, #1
   b815e:	4924      	ldr	r1, [pc, #144]	; (b81f0 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b8160:	4824      	ldr	r0, [pc, #144]	; (b81f4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b8162:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8166:	f7fe f855 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b816a:	f7fe fe1b 	bl	b6da4 <_ZN19BackgroundPublishRK8instanceEv>
   b816e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b8172:	4b21      	ldr	r3, [pc, #132]	; (b81f8 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b8174:	9305      	str	r3, [sp, #20]
   b8176:	e9cd 6500 	strd	r6, r5, [sp]
   b817a:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b817c:	4b1f      	ldr	r3, [pc, #124]	; (b81fc <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b817e:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b8180:	9304      	str	r3, [sp, #16]
   b8182:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8186:	3242      	adds	r2, #66	; 0x42
   b8188:	f7fe ff58 	bl	b703c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b818c:	4630      	mov	r0, r6
   b818e:	f7fc fb23 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   b8192:	e7a5      	b.n	b80e0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b8194:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b8198:	4919      	ldr	r1, [pc, #100]	; (b8200 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b819a:	4816      	ldr	r0, [pc, #88]	; (b81f4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b819c:	f7fb ff9e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b81a0:	2101      	movs	r1, #1
   b81a2:	4630      	mov	r0, r6
   b81a4:	f002 f832 	bl	ba20c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b81a8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b81ac:	462a      	mov	r2, r5
   b81ae:	4630      	mov	r0, r6
   b81b0:	f001 fe64 	bl	b9e7c <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b81b4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b81b8:	2b00      	cmp	r3, #0
   b81ba:	d1b5      	bne.n	b8128 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b81bc:	e795      	b.n	b80ea <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b81be:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b81c2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b81c6:	429a      	cmp	r2, r3
   b81c8:	d007      	beq.n	b81da <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b81ca:	681b      	ldr	r3, [r3, #0]
   b81cc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b81d0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b81d4:	f7ff fe73 	bl	b7ebe <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b81d8:	e7ec      	b.n	b81b4 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b81da:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b81de:	e784      	b.n	b80ea <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b81e0:	000b8205 	.word	0x000b8205
   b81e4:	000b8585 	.word	0x000b8585
   b81e8:	000bfefe 	.word	0x000bfefe
   b81ec:	000c03f0 	.word	0x000c03f0
   b81f0:	000bff1f 	.word	0x000bff1f
   b81f4:	2003e448 	.word	0x2003e448
   b81f8:	000b7bcd 	.word	0x000b7bcd
   b81fc:	000b7c13 	.word	0x000b7c13
   b8200:	000bff02 	.word	0x000bff02

000b8204 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b8204:	b513      	push	{r0, r1, r4, lr}
   b8206:	4604      	mov	r4, r0
   b8208:	f002 fce0 	bl	babcc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b820c:	b190      	cbz	r0, b8234 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b820e:	f002 f9e9 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b8212:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8216:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b821a:	4b0d      	ldr	r3, [pc, #52]	; (b8250 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b821c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b8220:	9300      	str	r3, [sp, #0]
   b8222:	4669      	mov	r1, sp
   b8224:	2300      	movs	r3, #0
   b8226:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b822a:	9301      	str	r3, [sp, #4]
   b822c:	f7ff ff26 	bl	b807c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b8230:	b002      	add	sp, #8
   b8232:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b8234:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b8238:	b11b      	cbz	r3, b8242 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b823a:	2301      	movs	r3, #1
   b823c:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b8240:	e7f6      	b.n	b8230 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b8242:	4620      	mov	r0, r4
   b8244:	f7ff fe21 	bl	b7e8a <_ZN17PublishQueuePosix12getNumEventsEv>
   b8248:	2800      	cmp	r0, #0
   b824a:	d0f6      	beq.n	b823a <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b824c:	e7f0      	b.n	b8230 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b824e:	bf00      	nop
   b8250:	000b80c5 	.word	0x000b80c5

000b8254 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b8254:	b570      	push	{r4, r5, r6, lr}
   b8256:	4605      	mov	r5, r0
   b8258:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b825a:	2000      	movs	r0, #0
   b825c:	f002 fc54 	bl	bab08 <system_thread_get_state>
   b8260:	2801      	cmp	r0, #1
   b8262:	d005      	beq.n	b8270 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b8264:	493e      	ldr	r1, [pc, #248]	; (b8360 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b8266:	483f      	ldr	r0, [pc, #252]	; (b8364 <_ZN17PublishQueuePosix5setupEv+0x110>)
   b8268:	f7fd ffc6 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
}
   b826c:	b018      	add	sp, #96	; 0x60
   b826e:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b8270:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b8274:	f002 f966 	bl	ba544 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8278:	4b3b      	ldr	r3, [pc, #236]	; (b8368 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b827a:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b827c:	4b3b      	ldr	r3, [pc, #236]	; (b836c <_ZN17PublishQueuePosix5setupEv+0x118>)
   b827e:	9307      	str	r3, [sp, #28]
        };
   b8280:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b8282:	4b3b      	ldr	r3, [pc, #236]	; (b8370 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b8284:	9306      	str	r3, [sp, #24]
   b8286:	a808      	add	r0, sp, #32
   b8288:	f7fc fd88 	bl	b4d9c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b828c:	a908      	add	r1, sp, #32
   b828e:	a80c      	add	r0, sp, #48	; 0x30
   b8290:	f7fc fd84 	bl	b4d9c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b8294:	a90c      	add	r1, sp, #48	; 0x30
   b8296:	a810      	add	r0, sp, #64	; 0x40
   b8298:	f7fc fd80 	bl	b4d9c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b829c:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b829e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b82a0:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b82a2:	f7fb fef8 	bl	b4096 <_Znwj>
   b82a6:	4604      	mov	r4, r0
   b82a8:	b160      	cbz	r0, b82c4 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b82aa:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b82ac:	4601      	mov	r1, r0
   b82ae:	a810      	add	r0, sp, #64	; 0x40
   b82b0:	f7fe fe35 	bl	b6f1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b82b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b82b6:	68a2      	ldr	r2, [r4, #8]
   b82b8:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b82ba:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b82bc:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b82be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b82c0:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b82c2:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b82c4:	4b2b      	ldr	r3, [pc, #172]	; (b8374 <_ZN17PublishQueuePosix5setupEv+0x120>)
   b82c6:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b82c8:	4b2b      	ldr	r3, [pc, #172]	; (b8378 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b82ca:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b82cc:	4b2b      	ldr	r3, [pc, #172]	; (b837c <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b82ce:	9414      	str	r4, [sp, #80]	; 0x50
   b82d0:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b82d2:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b82d4:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b82d8:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b82da:	f7fb fedc 	bl	b4096 <_Znwj>
   b82de:	4604      	mov	r4, r0
   b82e0:	b1d8      	cbz	r0, b831a <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b82e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b82e4:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b82e6:	b133      	cbz	r3, b82f6 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b82e8:	2202      	movs	r2, #2
   b82ea:	a914      	add	r1, sp, #80	; 0x50
   b82ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b82ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b82f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b82f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b82f4:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b82f6:	4b22      	ldr	r3, [pc, #136]	; (b8380 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b82f8:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b82fa:	4a22      	ldr	r2, [pc, #136]	; (b8384 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b82fc:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b82fe:	ab01      	add	r3, sp, #4
   b8300:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b8304:	2100      	movs	r1, #0
   b8306:	f002 fbdf 	bl	baac8 <system_subscribe_event>
        if (r) {
   b830a:	b130      	cbz	r0, b831a <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b830c:	4620      	mov	r0, r4
   b830e:	f7fc fa63 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b8312:	2110      	movs	r1, #16
   b8314:	4620      	mov	r0, r4
   b8316:	f7fb fec2 	bl	b409e <_ZdlPvj>
   b831a:	a814      	add	r0, sp, #80	; 0x50
   b831c:	f7fc fa5c 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   b8320:	a810      	add	r0, sp, #64	; 0x40
   b8322:	f7fc fa59 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   b8326:	a80c      	add	r0, sp, #48	; 0x30
   b8328:	f7fc fa56 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   b832c:	a808      	add	r0, sp, #32
   b832e:	f7fc fa53 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   b8332:	a804      	add	r0, sp, #16
   b8334:	f7fc fa50 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b8338:	f7fe fd34 	bl	b6da4 <_ZN19BackgroundPublishRK8instanceEv>
   b833c:	f7fe fe58 	bl	b6ff0 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b8340:	1d28      	adds	r0, r5, #4
   b8342:	f001 fedf 	bl	ba104 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b8346:	4628      	mov	r0, r5
   b8348:	f7ff fe32 	bl	b7fb0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b834c:	4b0e      	ldr	r3, [pc, #56]	; (b8388 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b834e:	9314      	str	r3, [sp, #80]	; 0x50
   b8350:	a914      	add	r1, sp, #80	; 0x50
   b8352:	2300      	movs	r3, #0
   b8354:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b8358:	9315      	str	r3, [sp, #84]	; 0x54
   b835a:	f7ff fe8f 	bl	b807c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b835e:	e785      	b.n	b826c <_ZN17PublishQueuePosix5setupEv+0x18>
   b8360:	000bff3e 	.word	0x000bff3e
   b8364:	2003e448 	.word	0x2003e448
   b8368:	000b8019 	.word	0x000b8019
   b836c:	000b47cf 	.word	0x000b47cf
   b8370:	000b47bb 	.word	0x000b47bb
   b8374:	000b4795 	.word	0x000b4795
   b8378:	000b4ec5 	.word	0x000b4ec5
   b837c:	000c0002 	.word	0x000c0002
   b8380:	000b47eb 	.word	0x000b47eb
   b8384:	000b476d 	.word	0x000b476d
   b8388:	000b8205 	.word	0x000b8205

000b838c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b838c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8390:	4606      	mov	r6, r0
   b8392:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8394:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8396:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8398:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b839a:	1a47      	subs	r7, r0, r1
   b839c:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b83a0:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b83a2:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b83a6:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b83a8:	d927      	bls.n	b83fa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b83aa:	1b5d      	subs	r5, r3, r5
   b83ac:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b83ae:	6832      	ldr	r2, [r6, #0]
   b83b0:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b83b2:	b10c      	cbz	r4, b83b8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b83b4:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b83b8:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b83ba:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b83bc:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b83be:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b83c0:	eba3 0201 	sub.w	r2, r3, r1
   b83c4:	d913      	bls.n	b83ee <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b83c6:	4299      	cmp	r1, r3
   b83c8:	d002      	beq.n	b83d0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b83ca:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b83cc:	f006 fbcc 	bl	beb68 <memmove>
	_M_node = __new_node;
   b83d0:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b83d2:	6823      	ldr	r3, [r4, #0]
   b83d4:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b83d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b83da:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b83dc:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b83de:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b83e0:	59e3      	ldr	r3, [r4, r7]
   b83e2:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b83e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b83e8:	6233      	str	r3, [r6, #32]
    }
   b83ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b83ee:	4299      	cmp	r1, r3
   b83f0:	d0ee      	beq.n	b83d0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b83f2:	1d38      	adds	r0, r7, #4
   b83f4:	1a80      	subs	r0, r0, r2
   b83f6:	4420      	add	r0, r4
   b83f8:	e7e8      	b.n	b83cc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b83fa:	f103 0802 	add.w	r8, r3, #2
   b83fe:	454b      	cmp	r3, r9
   b8400:	bf2c      	ite	cs
   b8402:	4498      	addcs	r8, r3
   b8404:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b8406:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b840a:	d301      	bcc.n	b8410 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b840c:	f005 fe8e 	bl	be12c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8410:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b8414:	f7fb fe3f 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8418:	eba8 0505 	sub.w	r5, r8, r5
   b841c:	086d      	lsrs	r5, r5, #1
   b841e:	4682      	mov	sl, r0
   b8420:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b8422:	b10c      	cbz	r4, b8428 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b8424:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b8428:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b842a:	6971      	ldr	r1, [r6, #20]
   b842c:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b842e:	442c      	add	r4, r5
	  if (_Num)
   b8430:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8432:	4454      	add	r4, sl
   b8434:	d003      	beq.n	b843e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8436:	1a52      	subs	r2, r2, r1
   b8438:	4620      	mov	r0, r4
   b843a:	f006 fb95 	bl	beb68 <memmove>
	::operator delete(__p
   b843e:	6871      	ldr	r1, [r6, #4]
   b8440:	6830      	ldr	r0, [r6, #0]
   b8442:	0089      	lsls	r1, r1, #2
   b8444:	f7fb fe2b 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b8448:	e9c6 a800 	strd	sl, r8, [r6]
   b844c:	e7c0      	b.n	b83d0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b8450 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8450:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8452:	b085      	sub	sp, #20
   b8454:	4604      	mov	r4, r0
   b8456:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b845a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b845e:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8460:	460f      	mov	r7, r1
   b8462:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8464:	f7ff fbec 	bl	b7c40 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b8468:	4605      	mov	r5, r0
   b846a:	2800      	cmp	r0, #0
   b846c:	d03c      	beq.n	b84e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b846e:	4b3f      	ldr	r3, [pc, #252]	; (b856c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b8470:	493f      	ldr	r1, [pc, #252]	; (b8570 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b8472:	4840      	ldr	r0, [pc, #256]	; (b8574 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8474:	2e00      	cmp	r6, #0
   b8476:	bf18      	it	ne
   b8478:	4633      	movne	r3, r6
   b847a:	463a      	mov	r2, r7
   b847c:	f7fd feca 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
   b8480:	4620      	mov	r0, r4
   b8482:	f7ff fbd0 	bl	b7c26 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b8486:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b848a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b848e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b8490:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b8492:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b8496:	d029      	beq.n	b84ec <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8498:	b103      	cbz	r3, b849c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b849a:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b849c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b84a0:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b84a2:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b84a4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b84a8:	4628      	mov	r0, r5
   b84aa:	f001 feff 	bl	ba2ac <_ZNK14SequentialFile11getQueueLenEv>
   b84ae:	9003      	str	r0, [sp, #12]
   b84b0:	4630      	mov	r0, r6
   b84b2:	f7ff fcd9 	bl	b7e68 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b84b6:	9002      	str	r0, [sp, #8]
   b84b8:	f002 fb88 	bl	babcc <spark_cloud_flag_connected>
   b84bc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b84c0:	9000      	str	r0, [sp, #0]
   b84c2:	492d      	ldr	r1, [pc, #180]	; (b8578 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b84c4:	482b      	ldr	r0, [pc, #172]	; (b8574 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b84c6:	f7fd fea5 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b84ca:	4628      	mov	r0, r5
   b84cc:	f001 feee 	bl	ba2ac <_ZNK14SequentialFile11getQueueLenEv>
   b84d0:	2800      	cmp	r0, #0
   b84d2:	d03b      	beq.n	b854c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b84d4:	4620      	mov	r0, r4
   b84d6:	f7ff fd0b 	bl	b7ef0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b84da:	4620      	mov	r0, r4
   b84dc:	f7ff fd68 	bl	b7fb0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b84e0:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b84e2:	f002 f847 	bl	ba574 <os_mutex_recursive_unlock>
    return true;
   b84e6:	2001      	movs	r0, #1
}
   b84e8:	b005      	add	sp, #20
   b84ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b84ec:	4630      	mov	r0, r6
   b84ee:	f7ff fcbb 	bl	b7e68 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b84f2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b84f6:	4298      	cmp	r0, r3
   b84f8:	d102      	bne.n	b8500 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b84fa:	4820      	ldr	r0, [pc, #128]	; (b857c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b84fc:	f005 fe19 	bl	be132 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b8500:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8504:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b8506:	1a9a      	subs	r2, r3, r2
   b8508:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b850a:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b850e:	2b01      	cmp	r3, #1
   b8510:	d804      	bhi.n	b851c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b8512:	2200      	movs	r2, #0
   b8514:	2101      	movs	r1, #1
   b8516:	4630      	mov	r0, r6
   b8518:	f7ff ff38 	bl	b838c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b851c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b8520:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b8524:	f7fb fdb7 	bl	b4096 <_Znwj>
   b8528:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b852a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b852e:	b103      	cbz	r3, b8532 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b8530:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b8532:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8536:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8538:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b853c:	685b      	ldr	r3, [r3, #4]
   b853e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8542:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8546:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b854a:	e7aa      	b.n	b84a2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b854c:	4630      	mov	r0, r6
   b854e:	f7ff fc8b 	bl	b7e68 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8552:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b8554:	4298      	cmp	r0, r3
   b8556:	d8bd      	bhi.n	b84d4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b8558:	f002 fb38 	bl	babcc <spark_cloud_flag_connected>
   b855c:	2800      	cmp	r0, #0
   b855e:	d0b9      	beq.n	b84d4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b8560:	4907      	ldr	r1, [pc, #28]	; (b8580 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b8562:	4804      	ldr	r0, [pc, #16]	; (b8574 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8564:	f7fd fe56 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
   b8568:	e7b7      	b.n	b84da <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b856a:	bf00      	nop
   b856c:	000c05fd 	.word	0x000c05fd
   b8570:	000bff61 	.word	0x000bff61
   b8574:	2003e448 	.word	0x2003e448
   b8578:	000bffb9 	.word	0x000bffb9
   b857c:	000bff89 	.word	0x000bff89
   b8580:	000bffe5 	.word	0x000bffe5

000b8584 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b8584:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b8586:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b858a:	4604      	mov	r4, r0
    if (!publishComplete) {
   b858c:	2b00      	cmp	r3, #0
   b858e:	d041      	beq.n	b8614 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b8590:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b8594:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b8598:	2b00      	cmp	r3, #0
   b859a:	d03d      	beq.n	b8618 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b859c:	4950      	ldr	r1, [pc, #320]	; (b86e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b859e:	4851      	ldr	r0, [pc, #324]	; (b86e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b85a0:	f7fd fe38 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b85a4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b85a8:	b1d3      	cbz	r3, b85e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b85aa:	1d26      	adds	r6, r4, #4
   b85ac:	2100      	movs	r1, #0
   b85ae:	4630      	mov	r0, r6
   b85b0:	f001 fe2c 	bl	ba20c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b85b4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b85b8:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b85ba:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b85bc:	d10d      	bne.n	b85da <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b85be:	2101      	movs	r1, #1
   b85c0:	4630      	mov	r0, r6
   b85c2:	f001 fe23 	bl	ba20c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b85c6:	2200      	movs	r2, #0
   b85c8:	4629      	mov	r1, r5
   b85ca:	4630      	mov	r0, r6
   b85cc:	f001 fc56 	bl	b9e7c <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b85d0:	4945      	ldr	r1, [pc, #276]	; (b86e8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b85d2:	4844      	ldr	r0, [pc, #272]	; (b86e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b85d4:	462a      	mov	r2, r5
   b85d6:	f7fd fe1d 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b85da:	2300      	movs	r3, #0
   b85dc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b85e0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b85e4:	b110      	cbz	r0, b85ec <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b85e6:	2143      	movs	r1, #67	; 0x43
   b85e8:	f7fb fd59 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b85ec:	2300      	movs	r3, #0
   b85ee:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b85f2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b85f6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b85fa:	4b3c      	ldr	r3, [pc, #240]	; (b86ec <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b85fc:	9300      	str	r3, [sp, #0]
   b85fe:	4669      	mov	r1, sp
   b8600:	2300      	movs	r3, #0
   b8602:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8606:	9301      	str	r3, [sp, #4]
   b8608:	f7ff fd38 	bl	b807c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b860c:	f001 ffea 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b8610:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b8614:	b002      	add	sp, #8
   b8616:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b8618:	4935      	ldr	r1, [pc, #212]	; (b86f0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b861a:	4832      	ldr	r0, [pc, #200]	; (b86e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b861c:	f7fd fdfa 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b8620:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8624:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b8628:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b862c:	b14b      	cbz	r3, b8642 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b862e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b8632:	b110      	cbz	r0, b863a <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b8634:	2143      	movs	r1, #67	; 0x43
   b8636:	f7fb fd32 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b863a:	2300      	movs	r3, #0
   b863c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b8640:	e7db      	b.n	b85fa <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b8642:	4620      	mov	r0, r4
   b8644:	f7ff faef 	bl	b7c26 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b8648:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b864c:	4293      	cmp	r3, r2
   b864e:	d013      	beq.n	b8678 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b8650:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b8654:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b8658:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b865c:	3b04      	subs	r3, #4
   b865e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b8662:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b8664:	f001 ff86 	bl	ba574 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b8668:	4922      	ldr	r1, [pc, #136]	; (b86f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b866a:	481e      	ldr	r0, [pc, #120]	; (b86e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b866c:	f7fd fdd2 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b8670:	4620      	mov	r0, r4
   b8672:	f7ff fc3d 	bl	b7ef0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b8676:	e7c0      	b.n	b85fa <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b8678:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b867c:	4628      	mov	r0, r5
   b867e:	f7ff fbf3 	bl	b7e68 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8682:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8686:	4298      	cmp	r0, r3
   b8688:	d102      	bne.n	b8690 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b868a:	481b      	ldr	r0, [pc, #108]	; (b86f8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b868c:	f005 fd51 	bl	be132 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b8690:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b8694:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b8696:	429a      	cmp	r2, r3
   b8698:	d104      	bne.n	b86a4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b869a:	2201      	movs	r2, #1
   b869c:	4611      	mov	r1, r2
   b869e:	4628      	mov	r0, r5
   b86a0:	f7ff fe74 	bl	b838c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b86a4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b86a8:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b86ac:	f7fb fcf3 	bl	b4096 <_Znwj>
   b86b0:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b86b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b86b8:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b86ba:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b86be:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b86c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b86c6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b86ca:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b86ce:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b86d2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b86d6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b86da:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b86de:	e7c0      	b.n	b8662 <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b86e0:	000bfff8 	.word	0x000bfff8
   b86e4:	2003e448 	.word	0x2003e448
   b86e8:	000c000b 	.word	0x000c000b
   b86ec:	000b80c5 	.word	0x000b80c5
   b86f0:	000c001b 	.word	0x000c001b
   b86f4:	000c002d 	.word	0x000c002d
   b86f8:	000bff89 	.word	0x000bff89

000b86fc <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b86fc:	4b01      	ldr	r3, [pc, #4]	; (b8704 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b86fe:	4a02      	ldr	r2, [pc, #8]	; (b8708 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b8700:	601a      	str	r2, [r3, #0]
}
   b8702:	4770      	bx	lr
   b8704:	2003e448 	.word	0x2003e448
   b8708:	000c0054 	.word	0x000c0054

000b870c <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b870c:	b510      	push	{r4, lr}
   b870e:	4b07      	ldr	r3, [pc, #28]	; (b872c <_ZN17PublishQueuePosixD1Ev+0x20>)
   b8710:	4604      	mov	r4, r0
   b8712:	f840 3bc0 	str.w	r3, [r0], #192
   b8716:	f7fc f85f 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b871a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b871e:	f7ff fc95 	bl	b804c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b8722:	1d20      	adds	r0, r4, #4
   b8724:	f001 fc2e 	bl	b9f84 <_ZN14SequentialFileD1Ev>
}
   b8728:	4620      	mov	r0, r4
   b872a:	bd10      	pop	{r4, pc}
   b872c:	000c0068 	.word	0x000c0068

000b8730 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8730:	b510      	push	{r4, lr}
   b8732:	4604      	mov	r4, r0
}
   b8734:	f7ff ffea 	bl	b870c <_ZN17PublishQueuePosixD1Ev>
   b8738:	4620      	mov	r0, r4
   b873a:	21d0      	movs	r1, #208	; 0xd0
   b873c:	f7fb fcaf 	bl	b409e <_ZdlPvj>
   b8740:	4620      	mov	r0, r4
   b8742:	bd10      	pop	{r4, pc}

000b8744 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b8744:	6001      	str	r1, [r0, #0]
   b8746:	7102      	strb	r2, [r0, #4]
{
}
   b8748:	4770      	bx	lr

000b874a <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b874a:	6800      	ldr	r0, [r0, #0]
   b874c:	6803      	ldr	r3, [r0, #0]
   b874e:	68db      	ldr	r3, [r3, #12]
   b8750:	4718      	bx	r3

000b8752 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b8752:	6800      	ldr	r0, [r0, #0]
   b8754:	6803      	ldr	r3, [r0, #0]
   b8756:	6a1b      	ldr	r3, [r3, #32]
   b8758:	4718      	bx	r3

000b875a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b875a:	6800      	ldr	r0, [r0, #0]
   b875c:	6803      	ldr	r3, [r0, #0]
   b875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8760:	4718      	bx	r3

000b8762 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b8762:	7900      	ldrb	r0, [r0, #4]
   b8764:	4770      	bx	lr

000b8766 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b8766:	6800      	ldr	r0, [r0, #0]
   b8768:	6803      	ldr	r3, [r0, #0]
   b876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b876c:	4718      	bx	r3

000b876e <_ZN10RHDatagram6sendtoEPhhh>:
{
   b876e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8770:	4605      	mov	r5, r0
   b8772:	460c      	mov	r4, r1
    setHeaderTo(address);
   b8774:	4619      	mov	r1, r3
{
   b8776:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b8778:	f7ff fff5 	bl	b8766 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b877c:	6828      	ldr	r0, [r5, #0]
   b877e:	9a01      	ldr	r2, [sp, #4]
   b8780:	6803      	ldr	r3, [r0, #0]
   b8782:	695b      	ldr	r3, [r3, #20]
   b8784:	4621      	mov	r1, r4
}
   b8786:	b003      	add	sp, #12
   b8788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b878c:	4718      	bx	r3

000b878e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b878e:	6800      	ldr	r0, [r0, #0]
   b8790:	6803      	ldr	r3, [r0, #0]
   b8792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8794:	4718      	bx	r3

000b8796 <_ZN10RHDatagram14setThisAddressEh>:
{
   b8796:	b538      	push	{r3, r4, r5, lr}
   b8798:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b879a:	6800      	ldr	r0, [r0, #0]
   b879c:	6803      	ldr	r3, [r0, #0]
{
   b879e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b87a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b87a2:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b87a4:	4629      	mov	r1, r5
   b87a6:	4620      	mov	r0, r4
   b87a8:	f7ff fff1 	bl	b878e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b87ac:	7125      	strb	r5, [r4, #4]
}
   b87ae:	bd38      	pop	{r3, r4, r5, pc}

000b87b0 <_ZN10RHDatagram4initEv>:
{
   b87b0:	b538      	push	{r3, r4, r5, lr}
   b87b2:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b87b4:	6800      	ldr	r0, [r0, #0]
   b87b6:	6803      	ldr	r3, [r0, #0]
   b87b8:	689b      	ldr	r3, [r3, #8]
   b87ba:	4798      	blx	r3
    if (ret)
   b87bc:	4605      	mov	r5, r0
   b87be:	b118      	cbz	r0, b87c8 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b87c0:	7921      	ldrb	r1, [r4, #4]
   b87c2:	4620      	mov	r0, r4
   b87c4:	f7ff ffe7 	bl	b8796 <_ZN10RHDatagram14setThisAddressEh>
}
   b87c8:	4628      	mov	r0, r5
   b87ca:	bd38      	pop	{r3, r4, r5, pc}

000b87cc <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b87cc:	6800      	ldr	r0, [r0, #0]
   b87ce:	6803      	ldr	r3, [r0, #0]
   b87d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b87d2:	4718      	bx	r3

000b87d4 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b87d4:	6800      	ldr	r0, [r0, #0]
   b87d6:	6803      	ldr	r3, [r0, #0]
   b87d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b87da:	4718      	bx	r3

000b87dc <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b87dc:	6800      	ldr	r0, [r0, #0]
   b87de:	6803      	ldr	r3, [r0, #0]
   b87e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b87e2:	4718      	bx	r3

000b87e4 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b87e4:	6800      	ldr	r0, [r0, #0]
   b87e6:	6803      	ldr	r3, [r0, #0]
   b87e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b87ea:	4718      	bx	r3

000b87ec <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b87ec:	6800      	ldr	r0, [r0, #0]
   b87ee:	6803      	ldr	r3, [r0, #0]
   b87f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b87f2:	4718      	bx	r3

000b87f4 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b87f4:	6800      	ldr	r0, [r0, #0]
   b87f6:	6803      	ldr	r3, [r0, #0]
   b87f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b87fa:	4718      	bx	r3

000b87fc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b87fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8800:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b8802:	6800      	ldr	r0, [r0, #0]
{
   b8804:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b8806:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b8808:	6803      	ldr	r3, [r0, #0]
   b880a:	691b      	ldr	r3, [r3, #16]
{
   b880c:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b8810:	4798      	blx	r3
   b8812:	4605      	mov	r5, r0
   b8814:	b1c8      	cbz	r0, b884a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b8816:	b11e      	cbz	r6, b8820 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b8818:	4620      	mov	r0, r4
   b881a:	f7ff ffe3 	bl	b87e4 <_ZN10RHDatagram10headerFromEv>
   b881e:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b8820:	f1b9 0f00 	cmp.w	r9, #0
   b8824:	d004      	beq.n	b8830 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b8826:	4620      	mov	r0, r4
   b8828:	f7ff ffd8 	bl	b87dc <_ZN10RHDatagram8headerToEv>
   b882c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b8830:	f1b8 0f00 	cmp.w	r8, #0
   b8834:	d004      	beq.n	b8840 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b8836:	4620      	mov	r0, r4
   b8838:	f7ff ffd8 	bl	b87ec <_ZN10RHDatagram8headerIdEv>
   b883c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b8840:	b11f      	cbz	r7, b884a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b8842:	4620      	mov	r0, r4
   b8844:	f7ff ffd6 	bl	b87f4 <_ZN10RHDatagram11headerFlagsEv>
   b8848:	7038      	strb	r0, [r7, #0]
}
   b884a:	4628      	mov	r0, r5
   b884c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8850 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b8850:	2001      	movs	r0, #1
   b8852:	4770      	bx	lr

000b8854 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b8854:	7903      	ldrb	r3, [r0, #4]
   b8856:	2b03      	cmp	r3, #3
   b8858:	d0fc      	beq.n	b8854 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b885a:	2001      	movs	r0, #1
   b885c:	4770      	bx	lr

000b885e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b885e:	2000      	movs	r0, #0
   b8860:	4770      	bx	lr

000b8862 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b8862:	7181      	strb	r1, [r0, #6]
}
   b8864:	4770      	bx	lr

000b8866 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b8866:	7141      	strb	r1, [r0, #5]
}
   b8868:	4770      	bx	lr

000b886a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b886a:	72c1      	strb	r1, [r0, #11]
}
   b886c:	4770      	bx	lr

000b886e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b886e:	7301      	strb	r1, [r0, #12]
}
   b8870:	4770      	bx	lr

000b8872 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b8872:	7341      	strb	r1, [r0, #13]
}
   b8874:	4770      	bx	lr

000b8876 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b8876:	7b83      	ldrb	r3, [r0, #14]
   b8878:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b887c:	4311      	orrs	r1, r2
   b887e:	7381      	strb	r1, [r0, #14]
}
   b8880:	4770      	bx	lr

000b8882 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b8882:	79c0      	ldrb	r0, [r0, #7]
}
   b8884:	4770      	bx	lr

000b8886 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b8886:	7a00      	ldrb	r0, [r0, #8]
}
   b8888:	4770      	bx	lr

000b888a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b888a:	7a40      	ldrb	r0, [r0, #9]
}
   b888c:	4770      	bx	lr

000b888e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b888e:	7a80      	ldrb	r0, [r0, #10]
}
   b8890:	4770      	bx	lr

000b8892 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b8892:	8a00      	ldrh	r0, [r0, #16]
}
   b8894:	b200      	sxth	r0, r0
   b8896:	4770      	bx	lr

000b8898 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b8898:	7900      	ldrb	r0, [r0, #4]
}
   b889a:	4770      	bx	lr

000b889c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b889c:	7101      	strb	r1, [r0, #4]
}
   b889e:	4770      	bx	lr

000b88a0 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b88a0:	8a40      	ldrh	r0, [r0, #18]
}
   b88a2:	b280      	uxth	r0, r0
   b88a4:	4770      	bx	lr

000b88a6 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b88a6:	8a80      	ldrh	r0, [r0, #20]
}
   b88a8:	b280      	uxth	r0, r0
   b88aa:	4770      	bx	lr

000b88ac <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b88ac:	8ac0      	ldrh	r0, [r0, #22]
}
   b88ae:	b280      	uxth	r0, r0
   b88b0:	4770      	bx	lr

000b88b2 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b88b2:	b538      	push	{r3, r4, r5, lr}
   b88b4:	4605      	mov	r5, r0
   b88b6:	460c      	mov	r4, r1
    while (!available())
   b88b8:	682b      	ldr	r3, [r5, #0]
   b88ba:	4628      	mov	r0, r5
   b88bc:	68db      	ldr	r3, [r3, #12]
   b88be:	4798      	blx	r3
   b88c0:	b928      	cbnz	r0, b88ce <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b88c2:	2c00      	cmp	r4, #0
   b88c4:	d0f8      	beq.n	b88b8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b88c6:	4620      	mov	r0, r4
   b88c8:	f002 fa98 	bl	badfc <delay>
   b88cc:	e7f4      	b.n	b88b8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b88ce:	bd38      	pop	{r3, r4, r5, pc}

000b88d0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b88d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b88d2:	4605      	mov	r5, r0
   b88d4:	460f      	mov	r7, r1
   b88d6:	4614      	mov	r4, r2
   b88d8:	f001 fe84 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
   b88dc:	4606      	mov	r6, r0
   b88de:	f001 fe81 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b88e2:	1b80      	subs	r0, r0, r6
   b88e4:	42b8      	cmp	r0, r7
   b88e6:	d20a      	bcs.n	b88fe <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b88e8:	682b      	ldr	r3, [r5, #0]
   b88ea:	4628      	mov	r0, r5
   b88ec:	68db      	ldr	r3, [r3, #12]
   b88ee:	4798      	blx	r3
   b88f0:	b930      	cbnz	r0, b8900 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b88f2:	2c00      	cmp	r4, #0
   b88f4:	d0f3      	beq.n	b88de <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b88f6:	4620      	mov	r0, r4
   b88f8:	f002 fa80 	bl	badfc <delay>
   b88fc:	e7ef      	b.n	b88de <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b88fe:	2000      	movs	r0, #0
}
   b8900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8902 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b8902:	b570      	push	{r4, r5, r6, lr}
   b8904:	4604      	mov	r4, r0
   b8906:	460e      	mov	r6, r1
   b8908:	f001 fe6c 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
   b890c:	4605      	mov	r5, r0
   b890e:	f001 fe69 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b8912:	1b40      	subs	r0, r0, r5
   b8914:	42b0      	cmp	r0, r6
   b8916:	d204      	bcs.n	b8922 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b8918:	7923      	ldrb	r3, [r4, #4]
   b891a:	2b03      	cmp	r3, #3
   b891c:	d0f7      	beq.n	b890e <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b891e:	2001      	movs	r0, #1
}
   b8920:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b8922:	2000      	movs	r0, #0
   b8924:	e7fc      	b.n	b8920 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b8926 <_ZN15RHGenericDriver7waitCADEv>:
{
   b8926:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b8928:	69c3      	ldr	r3, [r0, #28]
{
   b892a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b892c:	b1b3      	cbz	r3, b895c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b892e:	f001 fe59 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b8932:	2664      	movs	r6, #100	; 0x64
   b8934:	4605      	mov	r5, r0
    while (isChannelActive())
   b8936:	6823      	ldr	r3, [r4, #0]
   b8938:	4620      	mov	r0, r4
   b893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b893c:	4798      	blx	r3
   b893e:	b168      	cbz	r0, b895c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b8940:	f001 fe50 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b8944:	69e3      	ldr	r3, [r4, #28]
   b8946:	1b40      	subs	r0, r0, r5
   b8948:	4298      	cmp	r0, r3
   b894a:	d809      	bhi.n	b8960 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b894c:	210a      	movs	r1, #10
   b894e:	2001      	movs	r0, #1
   b8950:	f004 fc67 	bl	bd222 <_Z6randomii>
   b8954:	4370      	muls	r0, r6
   b8956:	f002 fa51 	bl	badfc <delay>
    while (isChannelActive())
   b895a:	e7ec      	b.n	b8936 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b895c:	2001      	movs	r0, #1
}
   b895e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b8960:	2000      	movs	r0, #0
   b8962:	e7fc      	b.n	b895e <_ZN15RHGenericDriver7waitCADEv+0x38>

000b8964 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b8964:	4a06      	ldr	r2, [pc, #24]	; (b8980 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b8966:	6002      	str	r2, [r0, #0]
   b8968:	21ff      	movs	r1, #255	; 0xff
   b896a:	2200      	movs	r2, #0
   b896c:	7102      	strb	r2, [r0, #4]
   b896e:	7141      	strb	r1, [r0, #5]
   b8970:	8242      	strh	r2, [r0, #18]
   b8972:	72c1      	strb	r1, [r0, #11]
   b8974:	8282      	strh	r2, [r0, #20]
   b8976:	8181      	strh	r1, [r0, #12]
   b8978:	7382      	strb	r2, [r0, #14]
   b897a:	82c2      	strh	r2, [r0, #22]
   b897c:	61c2      	str	r2, [r0, #28]
}
   b897e:	4770      	bx	lr
   b8980:	000c007c 	.word	0x000c007c

000b8984 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b8984:	4770      	bx	lr

000b8986 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b8986:	4770      	bx	lr

000b8988 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b8988:	4770      	bx	lr

000b898a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b898a:	4770      	bx	lr

000b898c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b898c:	4770      	bx	lr

000b898e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b898e:	7141      	strb	r1, [r0, #5]
}
   b8990:	4770      	bx	lr

000b8992 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b8992:	7181      	strb	r1, [r0, #6]
}
   b8994:	4770      	bx	lr

000b8996 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b8996:	7101      	strb	r1, [r0, #4]
}
   b8998:	4770      	bx	lr
	...

000b899c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b899c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b899e:	4d03      	ldr	r5, [pc, #12]	; (b89ac <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b89a0:	6005      	str	r5, [r0, #0]
   b89a2:	7101      	strb	r1, [r0, #4]
   b89a4:	7142      	strb	r2, [r0, #5]
   b89a6:	7183      	strb	r3, [r0, #6]
}
   b89a8:	bd30      	pop	{r4, r5, pc}
   b89aa:	bf00      	nop
   b89ac:	000c00fc 	.word	0x000c00fc

000b89b0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b89b0:	4770      	bx	lr

000b89b2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b89b2:	b510      	push	{r4, lr}
  }
   b89b4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b89b6:	4604      	mov	r4, r0
  }
   b89b8:	f7fb fb71 	bl	b409e <_ZdlPvj>
   b89bc:	4620      	mov	r0, r4
   b89be:	bd10      	pop	{r4, pc}

000b89c0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b89c0:	b40e      	push	{r1, r2, r3}
   b89c2:	b503      	push	{r0, r1, lr}
   b89c4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b89c6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b89c8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b89cc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b89ce:	f004 fbec 	bl	bd1aa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b89d2:	b002      	add	sp, #8
   b89d4:	f85d eb04 	ldr.w	lr, [sp], #4
   b89d8:	b003      	add	sp, #12
   b89da:	4770      	bx	lr

000b89dc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b89dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b89de:	4604      	mov	r4, r0
   b89e0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b89e2:	7922      	ldrb	r2, [r4, #4]
   b89e4:	68a3      	ldr	r3, [r4, #8]
   b89e6:	b132      	cbz	r2, b89f6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b89e8:	b9a3      	cbnz	r3, b8a14 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b89ea:	490b      	ldr	r1, [pc, #44]	; (b8a18 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b89ec:	b002      	add	sp, #8
   b89ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b89f2:	f004 bad1 	b.w	bcf98 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b89f6:	4a09      	ldr	r2, [pc, #36]	; (b8a1c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b89f8:	7b26      	ldrb	r6, [r4, #12]
   b89fa:	4d09      	ldr	r5, [pc, #36]	; (b8a20 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b89fc:	4909      	ldr	r1, [pc, #36]	; (b8a24 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b89fe:	7b64      	ldrb	r4, [r4, #13]
   b8a00:	2e01      	cmp	r6, #1
   b8a02:	bf18      	it	ne
   b8a04:	4629      	movne	r1, r5
   b8a06:	e9cd 1400 	strd	r1, r4, [sp]
   b8a0a:	4907      	ldr	r1, [pc, #28]	; (b8a28 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b8a0c:	f7ff ffd8 	bl	b89c0 <_ZN5Print6printfEPKcz>
  }
   b8a10:	b002      	add	sp, #8
   b8a12:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b8a14:	4a05      	ldr	r2, [pc, #20]	; (b8a2c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b8a16:	e7ef      	b.n	b89f8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b8a18:	000c0139 	.word	0x000c0139
   b8a1c:	000c05fd 	.word	0x000c05fd
   b8a20:	000c0135 	.word	0x000c0135
   b8a24:	000c0131 	.word	0x000c0131
   b8a28:	000c014f 	.word	0x000c014f
   b8a2c:	000c0128 	.word	0x000c0128

000b8a30 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b8a30:	b510      	push	{r4, lr}
   b8a32:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b8a34:	f7ff ffb2 	bl	b899c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b8a38:	4b05      	ldr	r3, [pc, #20]	; (b8a50 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b8a3a:	6023      	str	r3, [r4, #0]
  {
   b8a3c:	4b05      	ldr	r3, [pc, #20]	; (b8a54 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b8a3e:	60a3      	str	r3, [r4, #8]
   b8a40:	2301      	movs	r3, #1
   b8a42:	7323      	strb	r3, [r4, #12]
   b8a44:	2300      	movs	r3, #0
   b8a46:	6123      	str	r3, [r4, #16]
   b8a48:	82a3      	strh	r3, [r4, #20]
{
}
   b8a4a:	4620      	mov	r0, r4
   b8a4c:	bd10      	pop	{r4, pc}
   b8a4e:	bf00      	nop
   b8a50:	000c0188 	.word	0x000c0188
   b8a54:	000c0174 	.word	0x000c0174

000b8a58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b8a58:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b8a5a:	4c0b      	ldr	r4, [pc, #44]	; (b8a88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b8a5c:	7821      	ldrb	r1, [r4, #0]
   b8a5e:	f3bf 8f5b 	dmb	ish
   b8a62:	f011 0101 	ands.w	r1, r1, #1
   b8a66:	d10b      	bne.n	b8a80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8a68:	4620      	mov	r0, r4
   b8a6a:	9101      	str	r1, [sp, #4]
   b8a6c:	f7fb fb26 	bl	b40bc <__cxa_guard_acquire>
   b8a70:	9901      	ldr	r1, [sp, #4]
   b8a72:	b128      	cbz	r0, b8a80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8a74:	4805      	ldr	r0, [pc, #20]	; (b8a8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8a76:	f004 fbed 	bl	bd254 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8a7a:	4620      	mov	r0, r4
   b8a7c:	f7fb fb23 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b8a80:	4802      	ldr	r0, [pc, #8]	; (b8a8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8a82:	b002      	add	sp, #8
   b8a84:	bd10      	pop	{r4, pc}
   b8a86:	bf00      	nop
   b8a88:	2003e450 	.word	0x2003e450
   b8a8c:	2003e454 	.word	0x2003e454

000b8a90 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b8a90:	b507      	push	{r0, r1, r2, lr}
   b8a92:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b8a94:	f7ff ffe0 	bl	b8a58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b8a98:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b8a9a:	b003      	add	sp, #12
   b8a9c:	f85d eb04 	ldr.w	lr, [sp], #4
   b8aa0:	f004 bc90 	b.w	bd3c4 <_ZN8SPIClass8transferEh>

000b8aa4 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b8aa4:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b8aa6:	f7ff ffd7 	bl	b8a58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b8aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8aae:	f004 bc8f 	b.w	bd3d0 <_ZN8SPIClass15attachInterruptEv>

000b8ab2 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b8ab2:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b8ab4:	f7ff ffd0 	bl	b8a58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b8ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8abc:	f004 bc89 	b.w	bd3d2 <_ZN8SPIClass15detachInterruptEv>

000b8ac0 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b8ac0:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b8ac2:	7903      	ldrb	r3, [r0, #4]
   b8ac4:	2b04      	cmp	r3, #4
   b8ac6:	d020      	beq.n	b8b0a <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b8ac8:	2b03      	cmp	r3, #3
   b8aca:	d020      	beq.n	b8b0e <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b8acc:	2b02      	cmp	r3, #2
   b8ace:	d020      	beq.n	b8b12 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b8ad0:	4a11      	ldr	r2, [pc, #68]	; (b8b18 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b8ad2:	4912      	ldr	r1, [pc, #72]	; (b8b1c <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b8ad4:	2b01      	cmp	r3, #1
   b8ad6:	bf18      	it	ne
   b8ad8:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b8ada:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b8adc:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b8ade:	3901      	subs	r1, #1
   b8ae0:	bf18      	it	ne
   b8ae2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b8ae4:	b133      	cbz	r3, b8af4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b8ae6:	2b01      	cmp	r3, #1
   b8ae8:	d004      	beq.n	b8af4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b8aea:	2b02      	cmp	r3, #2
   b8aec:	d002      	beq.n	b8af4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b8aee:	2b03      	cmp	r3, #3
   b8af0:	bf18      	it	ne
   b8af2:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b8af4:	2400      	movs	r4, #0
   b8af6:	7304      	strb	r4, [r0, #12]
   b8af8:	6102      	str	r2, [r0, #16]
   b8afa:	7501      	strb	r1, [r0, #20]
   b8afc:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b8afe:	f7ff ffab 	bl	b8a58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b8b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8b06:	f004 bbaf 	b.w	bd268 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b8b0a:	4a05      	ldr	r2, [pc, #20]	; (b8b20 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b8b0c:	e7e5      	b.n	b8ada <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b8b0e:	4a05      	ldr	r2, [pc, #20]	; (b8b24 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b8b10:	e7e3      	b.n	b8ada <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b8b12:	4a05      	ldr	r2, [pc, #20]	; (b8b28 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b8b14:	e7e1      	b.n	b8ada <_ZN13RHHardwareSPI5beginEv+0x1a>
   b8b16:	bf00      	nop
   b8b18:	001e8480 	.word	0x001e8480
   b8b1c:	000f4240 	.word	0x000f4240
   b8b20:	00f42400 	.word	0x00f42400
   b8b24:	007a1200 	.word	0x007a1200
   b8b28:	003d0900 	.word	0x003d0900

000b8b2c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b8b2c:	b508      	push	{r3, lr}
        instance().end();
   b8b2e:	f7ff ff93 	bl	b8a58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b8b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8b36:	f004 bbab 	b.w	bd290 <_ZN8SPIClass3endEv>

000b8b3a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b8b3a:	b510      	push	{r4, lr}
   b8b3c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b8b3e:	f7ff ff8b 	bl	b8a58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b8b42:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b8b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8b4a:	f004 bbcd 	b.w	bd2e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b8b4e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b8b4e:	b508      	push	{r3, lr}
        instance().endTransaction();
   b8b50:	f7ff ff82 	bl	b8a58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b8b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8b58:	f004 bbac 	b.w	bd2b4 <_ZN8SPIClass14endTransactionEv>

000b8b5c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b8b5c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b8b5e:	f7ff ff7b 	bl	b8a58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b8b62:	bd08      	pop	{r3, pc}

000b8b64 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b8b64:	2300      	movs	r3, #0
   b8b66:	4802      	ldr	r0, [pc, #8]	; (b8b70 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b8b68:	461a      	mov	r2, r3
   b8b6a:	4619      	mov	r1, r3
   b8b6c:	f7ff bf60 	b.w	b8a30 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b8b70:	2003e45c 	.word	0x2003e45c

000b8b74 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b8b74:	2a01      	cmp	r2, #1
   b8b76:	d105      	bne.n	b8b84 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b8b78:	7a00      	ldrb	r0, [r0, #8]
   b8b7a:	780b      	ldrb	r3, [r1, #0]
   b8b7c:	1a1b      	subs	r3, r3, r0
   b8b7e:	4258      	negs	r0, r3
   b8b80:	4158      	adcs	r0, r3
   b8b82:	4770      	bx	lr
   b8b84:	2000      	movs	r0, #0
}
   b8b86:	4770      	bx	lr

000b8b88 <_ZN6RHMesh5doArpEh>:
{
   b8b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b8b8c:	4c25      	ldr	r4, [pc, #148]	; (b8c24 <_ZN6RHMesh5doArpEh+0x9c>)
   b8b8e:	2301      	movs	r3, #1
{
   b8b90:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b8b92:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b8b94:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b8b96:	2300      	movs	r3, #0
{
   b8b98:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b8b9a:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b8b9c:	9300      	str	r3, [sp, #0]
   b8b9e:	2203      	movs	r2, #3
   b8ba0:	23ff      	movs	r3, #255	; 0xff
   b8ba2:	4621      	mov	r1, r4
{
   b8ba4:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b8ba6:	f000 fbe5 	bl	b9374 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b8baa:	b120      	cbz	r0, b8bb6 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b8bac:	2500      	movs	r5, #0
}
   b8bae:	4628      	mov	r0, r5
   b8bb0:	b006      	add	sp, #24
   b8bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b8bb6:	237a      	movs	r3, #122	; 0x7a
   b8bb8:	f88d 3017 	strb.w	r3, [sp, #23]
   b8bbc:	f001 fd12 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b8bc0:	f106 0904 	add.w	r9, r6, #4
   b8bc4:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b8bc6:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b8bca:	f001 fd0b 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
   b8bce:	1a29      	subs	r1, r5, r0
   b8bd0:	2900      	cmp	r1, #0
   b8bd2:	ddeb      	ble.n	b8bac <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b8bd4:	2200      	movs	r2, #0
   b8bd6:	b289      	uxth	r1, r1
   b8bd8:	4648      	mov	r0, r9
   b8bda:	f7ff fdbe 	bl	b875a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b8bde:	2800      	cmp	r0, #0
   b8be0:	d0f3      	beq.n	b8bca <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b8be2:	2300      	movs	r3, #0
   b8be4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8be8:	e9cd 3300 	strd	r3, r3, [sp]
   b8bec:	f10d 0217 	add.w	r2, sp, #23
   b8bf0:	4621      	mov	r1, r4
   b8bf2:	4630      	mov	r0, r6
   b8bf4:	f000 fbc8 	bl	b9388 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b8bf8:	4605      	mov	r5, r0
   b8bfa:	2800      	cmp	r0, #0
   b8bfc:	d0e3      	beq.n	b8bc6 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b8bfe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b8c02:	2b01      	cmp	r3, #1
   b8c04:	d9df      	bls.n	b8bc6 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b8c06:	f894 a000 	ldrb.w	sl, [r4]
   b8c0a:	f1ba 0f02 	cmp.w	sl, #2
   b8c0e:	d1da      	bne.n	b8bc6 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b8c10:	4648      	mov	r0, r9
   b8c12:	f7ff fde7 	bl	b87e4 <_ZN10RHDatagram10headerFromEv>
   b8c16:	4653      	mov	r3, sl
   b8c18:	4602      	mov	r2, r0
   b8c1a:	4639      	mov	r1, r7
   b8c1c:	4630      	mov	r0, r6
   b8c1e:	f000 fb21 	bl	b9264 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b8c22:	e7c4      	b.n	b8bae <_ZN6RHMesh5doArpEh+0x26>
   b8c24:	2003e474 	.word	0x2003e474

000b8c28 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b8c28:	2a01      	cmp	r2, #1
{
   b8c2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8c2e:	4607      	mov	r7, r0
   b8c30:	460e      	mov	r6, r1
   b8c32:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b8c34:	d93b      	bls.n	b8cae <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b8c36:	794d      	ldrb	r5, [r1, #5]
   b8c38:	2d02      	cmp	r5, #2
   b8c3a:	d130      	bne.n	b8c9e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b8c3c:	f100 0804 	add.w	r8, r0, #4
   b8c40:	79c9      	ldrb	r1, [r1, #7]
   b8c42:	9101      	str	r1, [sp, #4]
   b8c44:	4640      	mov	r0, r8
   b8c46:	f7ff fdcd 	bl	b87e4 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b8c4a:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b8c4c:	462b      	mov	r3, r5
   b8c4e:	4602      	mov	r2, r0
   b8c50:	9901      	ldr	r1, [sp, #4]
   b8c52:	4638      	mov	r0, r7
   b8c54:	f000 fb06 	bl	b9264 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b8c58:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b8c5a:	f106 0308 	add.w	r3, r6, #8
   b8c5e:	2400      	movs	r4, #0
   b8c60:	4622      	mov	r2, r4
   b8c62:	4295      	cmp	r5, r2
   b8c64:	f104 0401 	add.w	r4, r4, #1
   b8c68:	b2e4      	uxtb	r4, r4
   b8c6a:	d904      	bls.n	b8c76 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b8c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8c70:	7a39      	ldrb	r1, [r7, #8]
   b8c72:	4291      	cmp	r1, r2
   b8c74:	d1f4      	bne.n	b8c60 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b8c76:	f104 0108 	add.w	r1, r4, #8
   b8c7a:	440e      	add	r6, r1
	while (i < numRoutes)
   b8c7c:	42a5      	cmp	r5, r4
   b8c7e:	d916      	bls.n	b8cae <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b8c80:	f816 1b01 	ldrb.w	r1, [r6], #1
   b8c84:	9101      	str	r1, [sp, #4]
   b8c86:	4640      	mov	r0, r8
   b8c88:	f7ff fdac 	bl	b87e4 <_ZN10RHDatagram10headerFromEv>
   b8c8c:	3401      	adds	r4, #1
   b8c8e:	4602      	mov	r2, r0
   b8c90:	9901      	ldr	r1, [sp, #4]
   b8c92:	2302      	movs	r3, #2
   b8c94:	4638      	mov	r0, r7
   b8c96:	b2e4      	uxtb	r4, r4
   b8c98:	f000 fae4 	bl	b9264 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b8c9c:	e7ee      	b.n	b8c7c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b8c9e:	2d03      	cmp	r5, #3
   b8ca0:	d105      	bne.n	b8cae <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b8ca2:	7989      	ldrb	r1, [r1, #6]
}
   b8ca4:	b002      	add	sp, #8
   b8ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b8caa:	f000 bac4 	b.w	b9236 <_ZN8RHRouter13deleteRouteToEh>
}
   b8cae:	b002      	add	sp, #8
   b8cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8cb4 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b8cb4:	b510      	push	{r4, lr}
   b8cb6:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b8cb8:	f000 fb14 	bl	b92e4 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b8cbc:	4b01      	ldr	r3, [pc, #4]	; (b8cc4 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b8cbe:	6023      	str	r3, [r4, #0]
}
   b8cc0:	4620      	mov	r0, r4
   b8cc2:	bd10      	pop	{r4, pc}
   b8cc4:	000c01bc 	.word	0x000c01bc

000b8cc8 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b8cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b8ccc:	2a79      	cmp	r2, #121	; 0x79
{
   b8cce:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b8cd2:	4606      	mov	r6, r0
   b8cd4:	460f      	mov	r7, r1
   b8cd6:	4614      	mov	r4, r2
   b8cd8:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b8cda:	d825      	bhi.n	b8d28 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b8cdc:	2bff      	cmp	r3, #255	; 0xff
   b8cde:	d114      	bne.n	b8d0a <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b8ce0:	f8df 8048 	ldr.w	r8, [pc, #72]	; b8d2c <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b8ce4:	4640      	mov	r0, r8
   b8ce6:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b8ce8:	4622      	mov	r2, r4
   b8cea:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b8cec:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b8cf0:	f005 ff2c 	bl	beb4c <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b8cf4:	1c62      	adds	r2, r4, #1
   b8cf6:	f8cd 9020 	str.w	r9, [sp, #32]
   b8cfa:	462b      	mov	r3, r5
   b8cfc:	4641      	mov	r1, r8
   b8cfe:	4630      	mov	r0, r6
   b8d00:	b2d2      	uxtb	r2, r2
}
   b8d02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b8d06:	f000 bb35 	b.w	b9374 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b8d0a:	4619      	mov	r1, r3
   b8d0c:	f000 fa4f 	bl	b91ae <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b8d10:	2800      	cmp	r0, #0
   b8d12:	d1e5      	bne.n	b8ce0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b8d14:	6833      	ldr	r3, [r6, #0]
   b8d16:	4629      	mov	r1, r5
   b8d18:	689b      	ldr	r3, [r3, #8]
   b8d1a:	4630      	mov	r0, r6
   b8d1c:	4798      	blx	r3
   b8d1e:	2800      	cmp	r0, #0
   b8d20:	d1de      	bne.n	b8ce0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b8d22:	2002      	movs	r0, #2
}
   b8d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b8d28:	2001      	movs	r0, #1
   b8d2a:	e7fb      	b.n	b8d24 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b8d2c:	2003e474 	.word	0x2003e474

000b8d30 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b8d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d34:	b089      	sub	sp, #36	; 0x24
   b8d36:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b8d38:	237a      	movs	r3, #122	; 0x7a
   b8d3a:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b8d3e:	f10d 031f 	add.w	r3, sp, #31
   b8d42:	9303      	str	r3, [sp, #12]
   b8d44:	f10d 031e 	add.w	r3, sp, #30
   b8d48:	9302      	str	r3, [sp, #8]
   b8d4a:	4e5d      	ldr	r6, [pc, #372]	; (b8ec0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b8d4c:	f10d 031d 	add.w	r3, sp, #29
   b8d50:	9301      	str	r3, [sp, #4]
   b8d52:	ab07      	add	r3, sp, #28
   b8d54:	9300      	str	r3, [sp, #0]
{     
   b8d56:	4689      	mov	r9, r1
   b8d58:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b8d5a:	f10d 031b 	add.w	r3, sp, #27
   b8d5e:	f10d 021a 	add.w	r2, sp, #26
   b8d62:	4631      	mov	r1, r6
{     
   b8d64:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b8d68:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b8d6a:	f000 fb0d 	bl	b9388 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b8d6e:	4604      	mov	r4, r0
   b8d70:	b920      	cbnz	r0, b8d7c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b8d72:	2400      	movs	r4, #0
}
   b8d74:	4620      	mov	r0, r4
   b8d76:	b009      	add	sp, #36	; 0x24
   b8d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b8d7c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b8d80:	b373      	cbz	r3, b8de0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b8d82:	7832      	ldrb	r2, [r6, #0]
   b8d84:	bb62      	cbnz	r2, b8de0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b8d86:	f1b8 0f00 	cmp.w	r8, #0
   b8d8a:	d003      	beq.n	b8d94 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b8d8c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b8d90:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b8d94:	f1bb 0f00 	cmp.w	fp, #0
   b8d98:	d003      	beq.n	b8da2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b8d9a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b8d9e:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b8da2:	f1ba 0f00 	cmp.w	sl, #0
   b8da6:	d003      	beq.n	b8db0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b8da8:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b8dac:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b8db0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8db2:	b11a      	cbz	r2, b8dbc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b8db4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b8db6:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b8dba:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b8dbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b8dbe:	b11a      	cbz	r2, b8dc8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b8dc0:	9915      	ldr	r1, [sp, #84]	; 0x54
   b8dc2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b8dc6:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b8dc8:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b8dca:	493e      	ldr	r1, [pc, #248]	; (b8ec4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b8dcc:	3b01      	subs	r3, #1
   b8dce:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b8dd0:	429a      	cmp	r2, r3
		*len = msgLen;
   b8dd2:	bf88      	it	hi
   b8dd4:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b8dd6:	783a      	ldrb	r2, [r7, #0]
   b8dd8:	4648      	mov	r0, r9
   b8dda:	f005 feb7 	bl	beb4c <memcpy>
	    return true;
   b8dde:	e7c9      	b.n	b8d74 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b8de0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b8de4:	2aff      	cmp	r2, #255	; 0xff
   b8de6:	d1c4      	bne.n	b8d72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b8de8:	2b01      	cmp	r3, #1
   b8dea:	d9c2      	bls.n	b8d72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b8dec:	7832      	ldrb	r2, [r6, #0]
   b8dee:	2a01      	cmp	r2, #1
   b8df0:	d1bf      	bne.n	b8d72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b8df2:	7a2a      	ldrb	r2, [r5, #8]
   b8df4:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b8df8:	42a2      	cmp	r2, r4
   b8dfa:	d0ba      	beq.n	b8d72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b8dfc:	1edf      	subs	r7, r3, #3
   b8dfe:	4932      	ldr	r1, [pc, #200]	; (b8ec8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b8e00:	b2ff      	uxtb	r7, r7
   b8e02:	2300      	movs	r3, #0
   b8e04:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b8e08:	4547      	cmp	r7, r8
   b8e0a:	d906      	bls.n	b8e1a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b8e0c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8e10:	4282      	cmp	r2, r0
   b8e12:	f103 0301 	add.w	r3, r3, #1
   b8e16:	d1f5      	bne.n	b8e04 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b8e18:	e7ab      	b.n	b8d72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b8e1a:	f105 0904 	add.w	r9, r5, #4
   b8e1e:	4648      	mov	r0, r9
   b8e20:	f7ff fce0 	bl	b87e4 <_ZN10RHDatagram10headerFromEv>
   b8e24:	2302      	movs	r3, #2
   b8e26:	4602      	mov	r2, r0
   b8e28:	4621      	mov	r1, r4
   b8e2a:	4628      	mov	r0, r5
   b8e2c:	f000 fa1a 	bl	b9264 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b8e30:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b8e34:	b193      	cbz	r3, b8e5c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b8e36:	4c22      	ldr	r4, [pc, #136]	; (b8ec0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b8e38:	1ba3      	subs	r3, r4, r6
   b8e3a:	b2db      	uxtb	r3, r3
   b8e3c:	429f      	cmp	r7, r3
   b8e3e:	d90c      	bls.n	b8e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b8e40:	78e1      	ldrb	r1, [r4, #3]
   b8e42:	9105      	str	r1, [sp, #20]
   b8e44:	4648      	mov	r0, r9
   b8e46:	f7ff fccd 	bl	b87e4 <_ZN10RHDatagram10headerFromEv>
   b8e4a:	9905      	ldr	r1, [sp, #20]
   b8e4c:	4602      	mov	r2, r0
   b8e4e:	2302      	movs	r3, #2
   b8e50:	4628      	mov	r0, r5
   b8e52:	f000 fa07 	bl	b9264 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b8e56:	3401      	adds	r4, #1
   b8e58:	e7ee      	b.n	b8e38 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b8e5a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b8e5c:	682b      	ldr	r3, [r5, #0]
   b8e5e:	7872      	ldrb	r2, [r6, #1]
   b8e60:	68db      	ldr	r3, [r3, #12]
   b8e62:	491a      	ldr	r1, [pc, #104]	; (b8ecc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b8e64:	4628      	mov	r0, r5
   b8e66:	4798      	blx	r3
   b8e68:	4604      	mov	r4, r0
   b8e6a:	b160      	cbz	r0, b8e86 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b8e6c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b8e6e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b8e70:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b8e72:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b8e76:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b8e7a:	4911      	ldr	r1, [pc, #68]	; (b8ec0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b8e7c:	9400      	str	r4, [sp, #0]
   b8e7e:	4628      	mov	r0, r5
   b8e80:	f000 fa78 	bl	b9374 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b8e84:	e776      	b.n	b8d74 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b8e86:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b8e8a:	4543      	cmp	r3, r8
   b8e8c:	f67f af71 	bls.w	b8d72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b8e90:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b8e94:	2b00      	cmp	r3, #0
   b8e96:	f43f af6c 	beq.w	b8d72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b8e9a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b8e9e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8ea0:	4907      	ldr	r1, [pc, #28]	; (b8ec0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b8ea2:	443e      	add	r6, r7
		tmpMessageLen++;
   b8ea4:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b8ea6:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8ea8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b8eac:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b8eae:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8eb0:	9300      	str	r3, [sp, #0]
   b8eb2:	4628      	mov	r0, r5
   b8eb4:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b8eb6:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b8eba:	f000 fa25 	bl	b9308 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b8ebe:	e759      	b.n	b8d74 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b8ec0:	2003e474 	.word	0x2003e474
   b8ec4:	2003e475 	.word	0x2003e475
   b8ec8:	2003e477 	.word	0x2003e477
   b8ecc:	2003e476 	.word	0x2003e476

000b8ed0 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b8ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ed4:	b085      	sub	sp, #20
   b8ed6:	4680      	mov	r8, r0
   b8ed8:	461c      	mov	r4, r3
   b8eda:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   b8ede:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b8ee0:	4689      	mov	r9, r1
   b8ee2:	4692      	mov	sl, r2
   b8ee4:	f001 fb7e 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   b8ee8:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   b8eec:	4404      	add	r4, r0
   b8eee:	f001 fb79 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
   b8ef2:	1a20      	subs	r0, r4, r0
   b8ef4:	2800      	cmp	r0, #0
   b8ef6:	dd16      	ble.n	b8f26 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   b8ef8:	b281      	uxth	r1, r0
   b8efa:	2200      	movs	r2, #0
   b8efc:	4658      	mov	r0, fp
   b8efe:	f7ff fc2c 	bl	b875a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b8f02:	2800      	cmp	r0, #0
   b8f04:	d0f3      	beq.n	b8eee <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   b8f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b8f08:	9300      	str	r3, [sp, #0]
   b8f0a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b8f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b8f10:	9501      	str	r5, [sp, #4]
   b8f12:	4652      	mov	r2, sl
   b8f14:	4649      	mov	r1, r9
   b8f16:	4640      	mov	r0, r8
   b8f18:	f7ff ff0a 	bl	b8d30 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b8f1c:	2800      	cmp	r0, #0
   b8f1e:	d0e6      	beq.n	b8eee <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   b8f20:	b005      	add	sp, #20
   b8f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   b8f26:	2000      	movs	r0, #0
   b8f28:	e7fa      	b.n	b8f20 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000b8f2c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b8f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8f2e:	b085      	sub	sp, #20
   b8f30:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b8f32:	3004      	adds	r0, #4
{
   b8f34:	460e      	mov	r6, r1
   b8f36:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b8f38:	f7ff fc54 	bl	b87e4 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b8f3c:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b8f3e:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b8f40:	4631      	mov	r1, r6
   b8f42:	4628      	mov	r0, r5
   b8f44:	f000 f94a 	bl	b91dc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b8f48:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b8f4a:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b8f4c:	d001      	beq.n	b8f52 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b8f4e:	2805      	cmp	r0, #5
   b8f50:	d11b      	bne.n	b8f8a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b8f52:	7831      	ldrb	r1, [r6, #0]
   b8f54:	4628      	mov	r0, r5
   b8f56:	f000 f96e 	bl	b9236 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b8f5a:	7872      	ldrb	r2, [r6, #1]
   b8f5c:	7a2b      	ldrb	r3, [r5, #8]
   b8f5e:	429a      	cmp	r2, r3
   b8f60:	d013      	beq.n	b8f8a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b8f62:	4c0b      	ldr	r4, [pc, #44]	; (b8f90 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b8f64:	2303      	movs	r3, #3
   b8f66:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b8f68:	7833      	ldrb	r3, [r6, #0]
   b8f6a:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b8f6c:	7871      	ldrb	r1, [r6, #1]
   b8f6e:	2302      	movs	r3, #2
   b8f70:	463a      	mov	r2, r7
   b8f72:	4628      	mov	r0, r5
   b8f74:	f000 f976 	bl	b9264 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b8f78:	2300      	movs	r3, #0
   b8f7a:	9300      	str	r3, [sp, #0]
   b8f7c:	4621      	mov	r1, r4
   b8f7e:	7873      	ldrb	r3, [r6, #1]
   b8f80:	2202      	movs	r2, #2
   b8f82:	4628      	mov	r0, r5
   b8f84:	f000 f9f6 	bl	b9374 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b8f88:	4604      	mov	r4, r0
}
   b8f8a:	4620      	mov	r0, r4
   b8f8c:	b005      	add	sp, #20
   b8f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8f90:	2003e474 	.word	0x2003e474

000b8f94 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b8f94:	b510      	push	{r4, lr}
   b8f96:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b8f98:	f7ff fbd4 	bl	b8744 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b8f9c:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b8f9e:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b8fa0:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b8fa2:	2303      	movs	r3, #3
    _retransmissions = 0;
   b8fa4:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b8fa6:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b8fa8:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b8faa:	f44f 7280 	mov.w	r2, #256	; 0x100
   b8fae:	f104 0011 	add.w	r0, r4, #17
   b8fb2:	f005 fdf3 	bl	beb9c <memset>
}
   b8fb6:	4620      	mov	r0, r4
   b8fb8:	bd10      	pop	{r4, pc}

000b8fba <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b8fba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8fbc:	4604      	mov	r4, r0
   b8fbe:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b8fc0:	f7ff fc04 	bl	b87cc <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b8fc4:	4620      	mov	r0, r4
   b8fc6:	2200      	movs	r2, #0
   b8fc8:	2180      	movs	r1, #128	; 0x80
   b8fca:	f7ff fc03 	bl	b87d4 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b8fce:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b8fd0:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b8fd2:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b8fd6:	f10d 010f 	add.w	r1, sp, #15
   b8fda:	2201      	movs	r2, #1
   b8fdc:	4620      	mov	r0, r4
   b8fde:	f7ff fbc6 	bl	b876e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b8fe2:	4620      	mov	r0, r4
   b8fe4:	f7ff fbb5 	bl	b8752 <_ZN10RHDatagram14waitPacketSentEv>
}
   b8fe8:	b004      	add	sp, #16
   b8fea:	bd10      	pop	{r4, pc}

000b8fec <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b8fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b8ff0:	7b05      	ldrb	r5, [r0, #12]
   b8ff2:	3501      	adds	r5, #1
   b8ff4:	b2ed      	uxtb	r5, r5
{
   b8ff6:	b087      	sub	sp, #28
   b8ff8:	4604      	mov	r4, r0
   b8ffa:	4689      	mov	r9, r1
   b8ffc:	4692      	mov	sl, r2
   b8ffe:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b9000:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b9002:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b9004:	7c22      	ldrb	r2, [r4, #16]
   b9006:	463b      	mov	r3, r7
   b9008:	429a      	cmp	r2, r3
   b900a:	f107 0701 	add.w	r7, r7, #1
   b900e:	b2ff      	uxtb	r7, r7
   b9010:	d36b      	bcc.n	b90ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b9012:	4629      	mov	r1, r5
   b9014:	4620      	mov	r0, r4
   b9016:	f7ff fbd9 	bl	b87cc <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b901a:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b901c:	bf0d      	iteet	eq
   b901e:	22c0      	moveq	r2, #192	; 0xc0
   b9020:	2280      	movne	r2, #128	; 0x80
   b9022:	2140      	movne	r1, #64	; 0x40
   b9024:	2100      	moveq	r1, #0
   b9026:	4620      	mov	r0, r4
   b9028:	f7ff fbd4 	bl	b87d4 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b902c:	4643      	mov	r3, r8
   b902e:	4652      	mov	r2, sl
   b9030:	4649      	mov	r1, r9
   b9032:	4620      	mov	r0, r4
   b9034:	f7ff fb9b 	bl	b876e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b9038:	4620      	mov	r0, r4
   b903a:	f7ff fb8a 	bl	b8752 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b903e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b9042:	d054      	beq.n	b90ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b9044:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b9046:	bf82      	ittt	hi
   b9048:	68a3      	ldrhi	r3, [r4, #8]
   b904a:	3301      	addhi	r3, #1
   b904c:	60a3      	strhi	r3, [r4, #8]
   b904e:	f001 fac9 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b9052:	f44f 7180 	mov.w	r1, #256	; 0x100
   b9056:	4683      	mov	fp, r0
   b9058:	2000      	movs	r0, #0
   b905a:	89e6      	ldrh	r6, [r4, #14]
   b905c:	f004 f8e1 	bl	bd222 <_Z6randomii>
   b9060:	4370      	muls	r0, r6
   b9062:	bf48      	it	mi
   b9064:	30ff      	addmi	r0, #255	; 0xff
   b9066:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b906a:	fa1b f686 	uxtah	r6, fp, r6
   b906e:	f001 fab9 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
   b9072:	1a30      	subs	r0, r6, r0
   b9074:	2800      	cmp	r0, #0
   b9076:	ddc5      	ble.n	b9004 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b9078:	b281      	uxth	r1, r0
   b907a:	2200      	movs	r2, #0
   b907c:	4620      	mov	r0, r4
   b907e:	f7ff fb6c 	bl	b875a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b9082:	2800      	cmp	r0, #0
   b9084:	d0f3      	beq.n	b906e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b9086:	f10d 0317 	add.w	r3, sp, #23
   b908a:	9302      	str	r3, [sp, #8]
   b908c:	f10d 0316 	add.w	r3, sp, #22
   b9090:	9301      	str	r3, [sp, #4]
   b9092:	2200      	movs	r2, #0
   b9094:	f10d 0315 	add.w	r3, sp, #21
   b9098:	9300      	str	r3, [sp, #0]
   b909a:	4611      	mov	r1, r2
   b909c:	ab05      	add	r3, sp, #20
   b909e:	4620      	mov	r0, r4
   b90a0:	f7ff fbac 	bl	b87fc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b90a4:	2800      	cmp	r0, #0
   b90a6:	d0e2      	beq.n	b906e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b90a8:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b90ac:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b90b0:	4542      	cmp	r2, r8
   b90b2:	d10e      	bne.n	b90d2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b90b4:	f894 c004 	ldrb.w	ip, [r4, #4]
   b90b8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b90bc:	458c      	cmp	ip, r1
   b90be:	d108      	bne.n	b90d2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b90c0:	2b00      	cmp	r3, #0
   b90c2:	da08      	bge.n	b90d6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b90c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b90c8:	42ab      	cmp	r3, r5
   b90ca:	d1d0      	bne.n	b906e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b90cc:	b007      	add	sp, #28
   b90ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b90d2:	2b00      	cmp	r3, #0
   b90d4:	dbcb      	blt.n	b906e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b90d6:	18a1      	adds	r1, r4, r2
   b90d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b90dc:	7c49      	ldrb	r1, [r1, #17]
   b90de:	4299      	cmp	r1, r3
   b90e0:	d1c5      	bne.n	b906e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b90e2:	4620      	mov	r0, r4
   b90e4:	f7ff ff69 	bl	b8fba <_ZN18RHReliableDatagram11acknowledgeEhh>
   b90e8:	e7c1      	b.n	b906e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b90ea:	2000      	movs	r0, #0
   b90ec:	e7ee      	b.n	b90cc <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b90ee:	2001      	movs	r0, #1
   b90f0:	e7ec      	b.n	b90cc <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b90f2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b90f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b90f6:	b089      	sub	sp, #36	; 0x24
   b90f8:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b90fc:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b9100:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b9102:	4604      	mov	r4, r0
   b9104:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b9106:	f7ff fb20 	bl	b874a <_ZN10RHDatagram9availableEv>
   b910a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b910e:	b920      	cbnz	r0, b911a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b9110:	2500      	movs	r5, #0
}
   b9112:	4628      	mov	r0, r5
   b9114:	b009      	add	sp, #36	; 0x24
   b9116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b911a:	f10d 031f 	add.w	r3, sp, #31
   b911e:	9302      	str	r3, [sp, #8]
   b9120:	f10d 031e 	add.w	r3, sp, #30
   b9124:	9301      	str	r3, [sp, #4]
   b9126:	f10d 031d 	add.w	r3, sp, #29
   b912a:	9300      	str	r3, [sp, #0]
   b912c:	4620      	mov	r0, r4
   b912e:	ab07      	add	r3, sp, #28
   b9130:	f7ff fb64 	bl	b87fc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9134:	4605      	mov	r5, r0
   b9136:	2800      	cmp	r0, #0
   b9138:	d0ea      	beq.n	b9110 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b913a:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b913e:	2b00      	cmp	r3, #0
   b9140:	dbe6      	blt.n	b9110 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b9142:	7922      	ldrb	r2, [r4, #4]
   b9144:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9148:	429a      	cmp	r2, r3
   b914a:	d106      	bne.n	b915a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b914c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b9150:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b9154:	4620      	mov	r0, r4
   b9156:	f7ff ff30 	bl	b8fba <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b915a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b915e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b9162:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b9166:	f012 0f40 	tst.w	r2, #64	; 0x40
   b916a:	440c      	add	r4, r1
   b916c:	d002      	beq.n	b9174 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b916e:	7c60      	ldrb	r0, [r4, #17]
   b9170:	4298      	cmp	r0, r3
   b9172:	d0cd      	beq.n	b9110 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b9174:	b106      	cbz	r6, b9178 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b9176:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b9178:	f1b9 0f00 	cmp.w	r9, #0
   b917c:	d003      	beq.n	b9186 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b917e:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b9182:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b9186:	f1b8 0f00 	cmp.w	r8, #0
   b918a:	d001      	beq.n	b9190 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b918c:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b9190:	b107      	cbz	r7, b9194 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b9192:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b9194:	7463      	strb	r3, [r4, #17]
		return true;
   b9196:	e7bc      	b.n	b9112 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b9198 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b9198:	4770      	bx	lr

000b919a <_ZN8RHRouter4initEv>:
{
   b919a:	b510      	push	{r4, lr}
   b919c:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b919e:	3004      	adds	r0, #4
   b91a0:	f7ff fb06 	bl	b87b0 <_ZN10RHDatagram4initEv>
    if (ret)
   b91a4:	b110      	cbz	r0, b91ac <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b91a6:	231e      	movs	r3, #30
   b91a8:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b91ac:	bd10      	pop	{r4, pc}

000b91ae <_ZN8RHRouter10getRouteToEh>:
{
   b91ae:	b510      	push	{r4, lr}
   b91b0:	4602      	mov	r2, r0
   b91b2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b91b4:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b91b8:	428c      	cmp	r4, r1
   b91ba:	d108      	bne.n	b91ce <_ZN8RHRouter10getRouteToEh+0x20>
   b91bc:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b91c0:	b12c      	cbz	r4, b91ce <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b91c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b91c6:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b91ca:	4418      	add	r0, r3
}
   b91cc:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b91ce:	3301      	adds	r3, #1
   b91d0:	2b32      	cmp	r3, #50	; 0x32
   b91d2:	f102 0203 	add.w	r2, r2, #3
   b91d6:	d1ed      	bne.n	b91b4 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b91d8:	2000      	movs	r0, #0
   b91da:	e7f7      	b.n	b91cc <_ZN8RHRouter10getRouteToEh+0x1e>

000b91dc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b91dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b91de:	780b      	ldrb	r3, [r1, #0]
   b91e0:	2bff      	cmp	r3, #255	; 0xff
{
   b91e2:	4605      	mov	r5, r0
   b91e4:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b91e6:	d006      	beq.n	b91f6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b91e8:	4619      	mov	r1, r3
   b91ea:	9201      	str	r2, [sp, #4]
   b91ec:	f7ff ffdf 	bl	b91ae <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b91f0:	b158      	cbz	r0, b920a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b91f2:	7843      	ldrb	r3, [r0, #1]
   b91f4:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b91f6:	4621      	mov	r1, r4
   b91f8:	1d28      	adds	r0, r5, #4
   b91fa:	f7ff fef7 	bl	b8fec <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b91fe:	2800      	cmp	r0, #0
   b9200:	bf14      	ite	ne
   b9202:	2000      	movne	r0, #0
   b9204:	2005      	moveq	r0, #5
}
   b9206:	b003      	add	sp, #12
   b9208:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b920a:	2002      	movs	r0, #2
   b920c:	e7fb      	b.n	b9206 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b920e <_ZN8RHRouter11deleteRouteEh>:
{
   b920e:	b510      	push	{r4, lr}
   b9210:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b9214:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b9216:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b921a:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b921e:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b9222:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9226:	4421      	add	r1, r4
   b9228:	4420      	add	r0, r4
   b922a:	f005 fc8f 	bl	beb4c <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b922e:	2300      	movs	r3, #0
   b9230:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b9234:	bd10      	pop	{r4, pc}

000b9236 <_ZN8RHRouter13deleteRouteToEh>:
{
   b9236:	b538      	push	{r3, r4, r5, lr}
   b9238:	460a      	mov	r2, r1
   b923a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b923c:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b9240:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b9244:	b2d9      	uxtb	r1, r3
   b9246:	5d65      	ldrb	r5, [r4, r5]
   b9248:	4295      	cmp	r5, r2
   b924a:	d103      	bne.n	b9254 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b924c:	f7ff ffdf 	bl	b920e <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b9250:	2001      	movs	r0, #1
}
   b9252:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9254:	3301      	adds	r3, #1
   b9256:	2b32      	cmp	r3, #50	; 0x32
   b9258:	d1f2      	bne.n	b9240 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b925a:	2000      	movs	r0, #0
   b925c:	e7f9      	b.n	b9252 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b925e <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b925e:	2100      	movs	r1, #0
   b9260:	f7ff bfd5 	b.w	b920e <_ZN8RHRouter11deleteRouteEh>

000b9264 <_ZN8RHRouter10addRouteToEhhh>:
{
   b9264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9266:	4616      	mov	r6, r2
   b9268:	461f      	mov	r7, r3
   b926a:	4604      	mov	r4, r0
   b926c:	460d      	mov	r5, r1
   b926e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b9270:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b9274:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9278:	5c11      	ldrb	r1, [r2, r0]
   b927a:	42a9      	cmp	r1, r5
   b927c:	d105      	bne.n	b928a <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b927e:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b9280:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b9284:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b9288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b928a:	3301      	adds	r3, #1
   b928c:	2b32      	cmp	r3, #50	; 0x32
   b928e:	d1f1      	bne.n	b9274 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b9290:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b9292:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b9296:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b929a:	5c11      	ldrb	r1, [r2, r0]
   b929c:	b919      	cbnz	r1, b92a6 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b929e:	4420      	add	r0, r4
   b92a0:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b92a4:	e7ec      	b.n	b9280 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b92a6:	3301      	adds	r3, #1
   b92a8:	2b32      	cmp	r3, #50	; 0x32
   b92aa:	d1f4      	bne.n	b9296 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b92ac:	4620      	mov	r0, r4
   b92ae:	f7ff ffd6 	bl	b925e <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b92b2:	4620      	mov	r0, r4
   b92b4:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b92b8:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b92bc:	b92a      	cbnz	r2, b92ca <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b92be:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b92c2:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b92c6:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b92ca:	3003      	adds	r0, #3
   b92cc:	4298      	cmp	r0, r3
   b92ce:	d1f3      	bne.n	b92b8 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b92d0:	e7da      	b.n	b9288 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b92d2 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b92d2:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b92d6:	2200      	movs	r2, #0
   b92d8:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b92dc:	3003      	adds	r0, #3
   b92de:	4298      	cmp	r0, r3
   b92e0:	d1fa      	bne.n	b92d8 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b92e2:	4770      	bx	lr

000b92e4 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b92e4:	b510      	push	{r4, lr}
   b92e6:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b92e8:	3004      	adds	r0, #4
   b92ea:	f7ff fe53 	bl	b8f94 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b92ee:	4b05      	ldr	r3, [pc, #20]	; (b9304 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b92f0:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b92f2:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b92f6:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b92f8:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b92fc:	f7ff ffe9 	bl	b92d2 <_ZN8RHRouter17clearRoutingTableEv>
}
   b9300:	4620      	mov	r0, r4
   b9302:	bd10      	pop	{r4, pc}
   b9304:	000c01d4 	.word	0x000c01d4

000b9308 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b9308:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b930c:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b930e:	6840      	ldr	r0, [r0, #4]
{
   b9310:	9101      	str	r1, [sp, #4]
   b9312:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9314:	6803      	ldr	r3, [r0, #0]
{
   b9316:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b931a:	699b      	ldr	r3, [r3, #24]
{
   b931c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b9320:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9322:	4798      	blx	r3
   b9324:	f106 0805 	add.w	r8, r6, #5
   b9328:	4580      	cmp	r8, r0
   b932a:	d81c      	bhi.n	b9366 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b932c:	4d10      	ldr	r5, [pc, #64]	; (b9370 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b932e:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b9330:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b9334:	2300      	movs	r3, #0
   b9336:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b9338:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b933c:	70eb      	strb	r3, [r5, #3]
   b933e:	1c5a      	adds	r2, r3, #1
   b9340:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b9344:	1d68      	adds	r0, r5, #5
   b9346:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b9348:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b934a:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b934e:	f005 fbfd 	bl	beb4c <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9352:	6823      	ldr	r3, [r4, #0]
   b9354:	685b      	ldr	r3, [r3, #4]
   b9356:	fa5f f288 	uxtb.w	r2, r8
   b935a:	4629      	mov	r1, r5
   b935c:	4620      	mov	r0, r4
}
   b935e:	b002      	add	sp, #8
   b9360:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9364:	4718      	bx	r3
}
   b9366:	2001      	movs	r0, #1
   b9368:	b002      	add	sp, #8
   b936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b936e:	bf00      	nop
   b9370:	2003e4ee 	.word	0x2003e4ee

000b9374 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b9374:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b9376:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b937a:	9401      	str	r4, [sp, #4]
   b937c:	7a04      	ldrb	r4, [r0, #8]
   b937e:	9400      	str	r4, [sp, #0]
   b9380:	f7ff ffc2 	bl	b9308 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b9384:	b002      	add	sp, #8
   b9386:	bd10      	pop	{r4, pc}

000b9388 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b9388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b938c:	b087      	sub	sp, #28
   b938e:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b9390:	237f      	movs	r3, #127	; 0x7f
   b9392:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9396:	f10d 0317 	add.w	r3, sp, #23
   b939a:	9302      	str	r3, [sp, #8]
   b939c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b9470 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b93a0:	f10d 0316 	add.w	r3, sp, #22
   b93a4:	9301      	str	r3, [sp, #4]
   b93a6:	f10d 0315 	add.w	r3, sp, #21
   b93aa:	9300      	str	r3, [sp, #0]
{  
   b93ac:	4604      	mov	r4, r0
   b93ae:	4688      	mov	r8, r1
   b93b0:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b93b2:	ab05      	add	r3, sp, #20
   b93b4:	f10d 0213 	add.w	r2, sp, #19
   b93b8:	4649      	mov	r1, r9
   b93ba:	3004      	adds	r0, #4
{  
   b93bc:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b93c0:	f7ff fe97 	bl	b90f2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b93c4:	4605      	mov	r5, r0
   b93c6:	b908      	cbnz	r0, b93cc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b93c8:	2500      	movs	r5, #0
   b93ca:	e038      	b.n	b943e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b93cc:	6823      	ldr	r3, [r4, #0]
   b93ce:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b93d2:	681b      	ldr	r3, [r3, #0]
   b93d4:	4649      	mov	r1, r9
   b93d6:	4620      	mov	r0, r4
   b93d8:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b93da:	f899 3000 	ldrb.w	r3, [r9]
   b93de:	7a22      	ldrb	r2, [r4, #8]
   b93e0:	429a      	cmp	r2, r3
   b93e2:	d001      	beq.n	b93e8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b93e4:	2bff      	cmp	r3, #255	; 0xff
   b93e6:	d12e      	bne.n	b9446 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b93e8:	b117      	cbz	r7, b93f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b93ea:	4b21      	ldr	r3, [pc, #132]	; (b9470 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b93ec:	785b      	ldrb	r3, [r3, #1]
   b93ee:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b93f0:	f1bb 0f00 	cmp.w	fp, #0
   b93f4:	d003      	beq.n	b93fe <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b93f6:	4b1e      	ldr	r3, [pc, #120]	; (b9470 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b93f8:	781b      	ldrb	r3, [r3, #0]
   b93fa:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b93fe:	f1ba 0f00 	cmp.w	sl, #0
   b9402:	d003      	beq.n	b940c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b9404:	4b1a      	ldr	r3, [pc, #104]	; (b9470 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9406:	78db      	ldrb	r3, [r3, #3]
   b9408:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b940c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b940e:	b11b      	cbz	r3, b9418 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b9410:	4b17      	ldr	r3, [pc, #92]	; (b9470 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9412:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9414:	791b      	ldrb	r3, [r3, #4]
   b9416:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b9418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b941a:	b11b      	cbz	r3, b9424 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b941c:	4b14      	ldr	r3, [pc, #80]	; (b9470 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b941e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9420:	789b      	ldrb	r3, [r3, #2]
   b9422:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9424:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b9428:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b942a:	4912      	ldr	r1, [pc, #72]	; (b9474 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b942c:	3b05      	subs	r3, #5
   b942e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b9430:	429a      	cmp	r2, r3
		*len = msgLen;
   b9432:	bf88      	it	hi
   b9434:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9436:	7832      	ldrb	r2, [r6, #0]
   b9438:	4640      	mov	r0, r8
   b943a:	f005 fb87 	bl	beb4c <memcpy>
}
   b943e:	4628      	mov	r0, r5
   b9440:	b007      	add	sp, #28
   b9442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b9446:	f899 3002 	ldrb.w	r3, [r9, #2]
   b944a:	1c5a      	adds	r2, r3, #1
   b944c:	f889 2002 	strb.w	r2, [r9, #2]
   b9450:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b9454:	429a      	cmp	r2, r3
   b9456:	d9b7      	bls.n	b93c8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b9458:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b945c:	2b00      	cmp	r3, #0
   b945e:	d0b3      	beq.n	b93c8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b9460:	6823      	ldr	r3, [r4, #0]
   b9462:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b9466:	685b      	ldr	r3, [r3, #4]
   b9468:	4649      	mov	r1, r9
   b946a:	4620      	mov	r0, r4
   b946c:	4798      	blx	r3
   b946e:	e7ab      	b.n	b93c8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b9470:	2003e4ee 	.word	0x2003e4ee
   b9474:	2003e4f3 	.word	0x2003e4f3

000b9478 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b9478:	b510      	push	{r4, lr}
   b947a:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b947c:	6a00      	ldr	r0, [r0, #32]
   b947e:	6803      	ldr	r3, [r0, #0]
   b9480:	68db      	ldr	r3, [r3, #12]
   b9482:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b9484:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b9488:	28ff      	cmp	r0, #255	; 0xff
   b948a:	d002      	beq.n	b9492 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b948c:	2101      	movs	r1, #1
   b948e:	f004 fd3f 	bl	bdf10 <pinMode>

    deselectSlave();
   b9492:	6823      	ldr	r3, [r4, #0]
   b9494:	4620      	mov	r0, r4
   b9496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9498:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b949a:	2064      	movs	r0, #100	; 0x64
   b949c:	f001 fcae 	bl	badfc <delay>
#endif
    
    return true;
}
   b94a0:	2001      	movs	r0, #1
   b94a2:	bd10      	pop	{r4, pc}

000b94a4 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b94a4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b94a8:	2100      	movs	r1, #0
   b94aa:	f004 bd42 	b.w	bdf32 <digitalWrite>

000b94ae <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b94ae:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b94b2:	2101      	movs	r1, #1
   b94b4:	f004 bd3d 	b.w	bdf32 <digitalWrite>

000b94b8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b94b8:	b570      	push	{r4, r5, r6, lr}
   b94ba:	4604      	mov	r4, r0
   b94bc:	460d      	mov	r5, r1
   b94be:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b94c0:	f7ff fa50 	bl	b8964 <_ZN15RHGenericDriverC1Ev>
   b94c4:	4b03      	ldr	r3, [pc, #12]	; (b94d4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b94c6:	6023      	str	r3, [r4, #0]
   b94c8:	6226      	str	r6, [r4, #32]
   b94ca:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b94ce:	4620      	mov	r0, r4
   b94d0:	bd70      	pop	{r4, r5, r6, pc}
   b94d2:	bf00      	nop
   b94d4:	000c01e4 	.word	0x000c01e4

000b94d8 <_ZN11RHSPIDriver7spiReadEh>:
{
   b94d8:	b538      	push	{r3, r4, r5, lr}
   b94da:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b94dc:	6a00      	ldr	r0, [r0, #32]
   b94de:	6803      	ldr	r3, [r0, #0]
   b94e0:	6a1b      	ldr	r3, [r3, #32]
{
   b94e2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b94e4:	4798      	blx	r3
    selectSlave();
   b94e6:	6823      	ldr	r3, [r4, #0]
   b94e8:	4620      	mov	r0, r4
   b94ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b94ec:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b94ee:	6a20      	ldr	r0, [r4, #32]
   b94f0:	6803      	ldr	r3, [r0, #0]
   b94f2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b94f6:	681b      	ldr	r3, [r3, #0]
   b94f8:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b94fa:	6a20      	ldr	r0, [r4, #32]
   b94fc:	6803      	ldr	r3, [r0, #0]
   b94fe:	2100      	movs	r1, #0
   b9500:	681b      	ldr	r3, [r3, #0]
   b9502:	4798      	blx	r3
    deselectSlave();
   b9504:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9506:	4605      	mov	r5, r0
    deselectSlave();
   b9508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b950a:	4620      	mov	r0, r4
   b950c:	4798      	blx	r3
    _spi.endTransaction();
   b950e:	6a20      	ldr	r0, [r4, #32]
   b9510:	6803      	ldr	r3, [r0, #0]
   b9512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9514:	4798      	blx	r3
}
   b9516:	4628      	mov	r0, r5
   b9518:	bd38      	pop	{r3, r4, r5, pc}

000b951a <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b951a:	b570      	push	{r4, r5, r6, lr}
   b951c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b951e:	6a00      	ldr	r0, [r0, #32]
   b9520:	6803      	ldr	r3, [r0, #0]
   b9522:	6a1b      	ldr	r3, [r3, #32]
{
   b9524:	4616      	mov	r6, r2
   b9526:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b9528:	4798      	blx	r3
    selectSlave();
   b952a:	6823      	ldr	r3, [r4, #0]
   b952c:	4620      	mov	r0, r4
   b952e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9530:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b9532:	6a20      	ldr	r0, [r4, #32]
   b9534:	6803      	ldr	r3, [r0, #0]
   b9536:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b953a:	681b      	ldr	r3, [r3, #0]
   b953c:	4798      	blx	r3
   b953e:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b9540:	6a20      	ldr	r0, [r4, #32]
   b9542:	6803      	ldr	r3, [r0, #0]
   b9544:	4631      	mov	r1, r6
   b9546:	681b      	ldr	r3, [r3, #0]
   b9548:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b954a:	2001      	movs	r0, #1
   b954c:	f001 f842 	bl	ba5d4 <HAL_Delay_Microseconds>
    deselectSlave();
   b9550:	6823      	ldr	r3, [r4, #0]
   b9552:	4620      	mov	r0, r4
   b9554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9556:	4798      	blx	r3
    _spi.endTransaction();
   b9558:	6a20      	ldr	r0, [r4, #32]
   b955a:	6803      	ldr	r3, [r0, #0]
   b955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b955e:	4798      	blx	r3
}
   b9560:	4628      	mov	r0, r5
   b9562:	bd70      	pop	{r4, r5, r6, pc}

000b9564 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b9564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9566:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9568:	6a00      	ldr	r0, [r0, #32]
{
   b956a:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b956c:	6803      	ldr	r3, [r0, #0]
   b956e:	6a1b      	ldr	r3, [r3, #32]
{
   b9570:	460f      	mov	r7, r1
   b9572:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9574:	4798      	blx	r3
    selectSlave();
   b9576:	6823      	ldr	r3, [r4, #0]
   b9578:	4620      	mov	r0, r4
   b957a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b957c:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b957e:	6a20      	ldr	r0, [r4, #32]
   b9580:	6803      	ldr	r3, [r0, #0]
   b9582:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b9586:	681b      	ldr	r3, [r3, #0]
   b9588:	4798      	blx	r3
   b958a:	442e      	add	r6, r5
   b958c:	4607      	mov	r7, r0
    while (len--)
   b958e:	42b5      	cmp	r5, r6
   b9590:	d007      	beq.n	b95a2 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b9592:	6a20      	ldr	r0, [r4, #32]
   b9594:	6803      	ldr	r3, [r0, #0]
   b9596:	2100      	movs	r1, #0
   b9598:	681b      	ldr	r3, [r3, #0]
   b959a:	4798      	blx	r3
   b959c:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b95a0:	e7f5      	b.n	b958e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b95a2:	6823      	ldr	r3, [r4, #0]
   b95a4:	4620      	mov	r0, r4
   b95a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b95a8:	4798      	blx	r3
    _spi.endTransaction();
   b95aa:	6a20      	ldr	r0, [r4, #32]
   b95ac:	6803      	ldr	r3, [r0, #0]
   b95ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b95b0:	4798      	blx	r3
}
   b95b2:	4638      	mov	r0, r7
   b95b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b95b6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b95b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b95b8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b95ba:	6a00      	ldr	r0, [r0, #32]
{
   b95bc:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b95be:	6803      	ldr	r3, [r0, #0]
   b95c0:	6a1b      	ldr	r3, [r3, #32]
{
   b95c2:	460f      	mov	r7, r1
   b95c4:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b95c6:	4798      	blx	r3
    selectSlave();
   b95c8:	6823      	ldr	r3, [r4, #0]
   b95ca:	4620      	mov	r0, r4
   b95cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b95ce:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b95d0:	6a20      	ldr	r0, [r4, #32]
   b95d2:	6803      	ldr	r3, [r0, #0]
   b95d4:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b95d8:	681b      	ldr	r3, [r3, #0]
   b95da:	4798      	blx	r3
   b95dc:	442e      	add	r6, r5
   b95de:	4607      	mov	r7, r0
    while (len--)
   b95e0:	42b5      	cmp	r5, r6
   b95e2:	d006      	beq.n	b95f2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b95e4:	6a20      	ldr	r0, [r4, #32]
   b95e6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b95ea:	6803      	ldr	r3, [r0, #0]
   b95ec:	681b      	ldr	r3, [r3, #0]
   b95ee:	4798      	blx	r3
    while (len--)
   b95f0:	e7f6      	b.n	b95e0 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b95f2:	6823      	ldr	r3, [r4, #0]
   b95f4:	4620      	mov	r0, r4
   b95f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b95f8:	4798      	blx	r3
    _spi.endTransaction();
   b95fa:	6a20      	ldr	r0, [r4, #32]
   b95fc:	6803      	ldr	r3, [r0, #0]
   b95fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9600:	4798      	blx	r3
}
   b9602:	4638      	mov	r0, r7
   b9604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9606 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b9606:	6a00      	ldr	r0, [r0, #32]
   b9608:	6803      	ldr	r3, [r0, #0]
   b960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b960c:	4718      	bx	r3

000b960e <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b960e:	2001      	movs	r0, #1
   b9610:	4770      	bx	lr

000b9612 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b9612:	20fb      	movs	r0, #251	; 0xfb
   b9614:	4770      	bx	lr

000b9616 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b9616:	4770      	bx	lr

000b9618 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b9618:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b961a:	7903      	ldrb	r3, [r0, #4]
   b961c:	2b05      	cmp	r3, #5
{
   b961e:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b9620:	d010      	beq.n	b9644 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b9622:	6803      	ldr	r3, [r0, #0]
   b9624:	2105      	movs	r1, #5
   b9626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b962a:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b962c:	2207      	movs	r2, #7
   b962e:	2101      	movs	r1, #1
   b9630:	4620      	mov	r0, r4
   b9632:	f7ff ff72 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b9636:	2280      	movs	r2, #128	; 0x80
   b9638:	2140      	movs	r1, #64	; 0x40
   b963a:	4620      	mov	r0, r4
   b963c:	f7ff ff6d 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b9640:	2305      	movs	r3, #5
   b9642:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b9644:	7923      	ldrb	r3, [r4, #4]
   b9646:	2b05      	cmp	r3, #5
   b9648:	d0fc      	beq.n	b9644 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b964a:	7e20      	ldrb	r0, [r4, #24]
}
   b964c:	bd10      	pop	{r4, pc}

000b964e <_ZN7RH_RF95D0Ev>:
   b964e:	b510      	push	{r4, lr}
   b9650:	f44f 7198 	mov.w	r1, #304	; 0x130
   b9654:	4604      	mov	r4, r0
   b9656:	f7fa fd22 	bl	b409e <_ZdlPvj>
   b965a:	4620      	mov	r0, r4
   b965c:	bd10      	pop	{r4, pc}

000b965e <_ZN7RH_RF955sleepEv>:
{
   b965e:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b9660:	7903      	ldrb	r3, [r0, #4]
   b9662:	2b01      	cmp	r3, #1
{
   b9664:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b9666:	d00b      	beq.n	b9680 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b9668:	6803      	ldr	r3, [r0, #0]
   b966a:	2101      	movs	r1, #1
   b966c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9670:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b9672:	2200      	movs	r2, #0
   b9674:	2101      	movs	r1, #1
   b9676:	4620      	mov	r0, r4
   b9678:	f7ff ff4f 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b967c:	2301      	movs	r3, #1
   b967e:	7123      	strb	r3, [r4, #4]
}
   b9680:	2001      	movs	r0, #1
   b9682:	bd10      	pop	{r4, pc}

000b9684 <_ZN7RH_RF954recvEPhS0_>:
{
   b9684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b9686:	6803      	ldr	r3, [r0, #0]
   b9688:	68db      	ldr	r3, [r3, #12]
{
   b968a:	4604      	mov	r4, r0
   b968c:	460f      	mov	r7, r1
   b968e:	4615      	mov	r5, r2
    if (!available())
   b9690:	4798      	blx	r3
   b9692:	4606      	mov	r6, r0
   b9694:	b1b0      	cbz	r0, b96c4 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b9696:	b187      	cbz	r7, b96ba <_ZN7RH_RF954recvEPhS0_+0x36>
   b9698:	b17d      	cbz	r5, b96ba <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b969a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b969e:	782a      	ldrb	r2, [r5, #0]
   b96a0:	3b03      	subs	r3, #3
   b96a2:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b96a4:	bfde      	ittt	le
   b96a6:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b96aa:	3b04      	suble	r3, #4
   b96ac:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b96ae:	782a      	ldrb	r2, [r5, #0]
   b96b0:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b96b4:	4638      	mov	r0, r7
   b96b6:	f005 fa49 	bl	beb4c <memcpy>
    _rxBufValid = false;
   b96ba:	2300      	movs	r3, #0
   b96bc:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b96c0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b96c4:	4630      	mov	r0, r6
   b96c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b96c8 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b96c8:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b96ca:	b538      	push	{r3, r4, r5, lr}
   b96cc:	4605      	mov	r5, r0
   b96ce:	460c      	mov	r4, r1
	if (power > 20)
   b96d0:	dc14      	bgt.n	b96fc <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b96d2:	2901      	cmp	r1, #1
   b96d4:	dd14      	ble.n	b9700 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b96d6:	2911      	cmp	r1, #17
   b96d8:	dd13      	ble.n	b9702 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b96da:	2207      	movs	r2, #7
   b96dc:	214d      	movs	r1, #77	; 0x4d
   b96de:	4628      	mov	r0, r5
   b96e0:	f7ff ff1b 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b96e4:	3c03      	subs	r4, #3
   b96e6:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b96e8:	1ea2      	subs	r2, r4, #2
   b96ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b96ee:	4628      	mov	r0, r5
   b96f0:	b2d2      	uxtb	r2, r2
}
   b96f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b96f6:	2109      	movs	r1, #9
   b96f8:	f7ff bf0f 	b.w	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b96fc:	2414      	movs	r4, #20
   b96fe:	e7ec      	b.n	b96da <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b9700:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9702:	2204      	movs	r2, #4
   b9704:	214d      	movs	r1, #77	; 0x4d
   b9706:	4628      	mov	r0, r5
   b9708:	f7ff ff07 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
   b970c:	e7ec      	b.n	b96e8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b9710 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b9710:	b538      	push	{r3, r4, r5, lr}
   b9712:	4604      	mov	r4, r0
   b9714:	4615      	mov	r5, r2
    _rxBufValid(0)
   b9716:	461a      	mov	r2, r3
   b9718:	f7ff fece 	bl	b94b8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b971c:	4b09      	ldr	r3, [pc, #36]	; (b9744 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b971e:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b9720:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b9722:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b9724:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b9728:	2201      	movs	r2, #1
    _rxBufValid(0)
   b972a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b972e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b9732:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b9736:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b973a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b973e:	4620      	mov	r0, r4
   b9740:	bd38      	pop	{r3, r4, r5, pc}
   b9742:	bf00      	nop
   b9744:	000c027c 	.word	0x000c027c

000b9748 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b9748:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b974c:	2b03      	cmp	r3, #3
   b974e:	d91b      	bls.n	b9788 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b9750:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b9754:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b9756:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b975a:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b975c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b9760:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b9762:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b9766:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b9768:	7983      	ldrb	r3, [r0, #6]
   b976a:	b933      	cbnz	r3, b977a <_ZN7RH_RF9513validateRxBufEv+0x32>
   b976c:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b976e:	7942      	ldrb	r2, [r0, #5]
   b9770:	429a      	cmp	r2, r3
   b9772:	d002      	beq.n	b977a <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b9774:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b9776:	2bff      	cmp	r3, #255	; 0xff
   b9778:	d106      	bne.n	b9788 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b977a:	8a83      	ldrh	r3, [r0, #20]
   b977c:	3301      	adds	r3, #1
   b977e:	b29b      	uxth	r3, r3
   b9780:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b9782:	2301      	movs	r3, #1
   b9784:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b9788:	4770      	bx	lr
   b978a:	0000      	movs	r0, r0
   b978c:	0000      	movs	r0, r0
	...

000b9790 <_ZN7RH_RF9512setFrequencyEf>:
{
   b9790:	b538      	push	{r3, r4, r5, lr}
   b9792:	4604      	mov	r4, r0
   b9794:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9798:	ee10 0a10 	vmov	r0, s0
{
   b979c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b97a0:	f004 fe32 	bl	be408 <__aeabi_f2d>
   b97a4:	a317      	add	r3, pc, #92	; (adr r3, b9804 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b97a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b97aa:	f004 fe85 	bl	be4b8 <__aeabi_dmul>
   b97ae:	a317      	add	r3, pc, #92	; (adr r3, b980c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b97b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b97b4:	f004 ffaa 	bl	be70c <__aeabi_ddiv>
   b97b8:	f005 f956 	bl	bea68 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b97bc:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b97be:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b97c0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b97c4:	4620      	mov	r0, r4
   b97c6:	f7ff fea8 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b97ca:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b97ce:	2107      	movs	r1, #7
   b97d0:	4620      	mov	r0, r4
   b97d2:	f7ff fea2 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b97d6:	b2ea      	uxtb	r2, r5
   b97d8:	2108      	movs	r1, #8
   b97da:	4620      	mov	r0, r4
   b97dc:	f7ff fe9d 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b97e0:	eddf 7a07 	vldr	s15, [pc, #28]	; b9800 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b97e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b97e8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b97ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b97f0:	bfac      	ite	ge
   b97f2:	2301      	movge	r3, #1
   b97f4:	2300      	movlt	r3, #0
}
   b97f6:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b97f8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b97fc:	bd38      	pop	{r3, r4, r5, pc}
   b97fe:	bf00      	nop
   b9800:	4442c000 	.word	0x4442c000
   b9804:	00000000 	.word	0x00000000
   b9808:	412e8480 	.word	0x412e8480
   b980c:	00000000 	.word	0x00000000
   b9810:	404e8480 	.word	0x404e8480

000b9814 <_ZN7RH_RF9511setModeIdleEv>:
{
   b9814:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b9816:	7903      	ldrb	r3, [r0, #4]
   b9818:	2b02      	cmp	r3, #2
{
   b981a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b981c:	d00b      	beq.n	b9836 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b981e:	6803      	ldr	r3, [r0, #0]
   b9820:	2102      	movs	r1, #2
   b9822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9826:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b9828:	2201      	movs	r2, #1
   b982a:	4611      	mov	r1, r2
   b982c:	4620      	mov	r0, r4
   b982e:	f7ff fe74 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b9832:	2302      	movs	r3, #2
   b9834:	7123      	strb	r3, [r4, #4]
}
   b9836:	bd10      	pop	{r4, pc}

000b9838 <_ZN7RH_RF9515handleInterruptEv>:
{
   b9838:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b983a:	2112      	movs	r1, #18
{
   b983c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b983e:	f7ff fe4b 	bl	b94d8 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9842:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b9844:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9846:	4620      	mov	r0, r4
   b9848:	f7ff fe46 	bl	b94d8 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b984c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b984e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9850:	2112      	movs	r1, #18
   b9852:	4620      	mov	r0, r4
   b9854:	f7ff fe61 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b9858:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b985a:	2b04      	cmp	r3, #4
   b985c:	d107      	bne.n	b986e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b985e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b9862:	d117      	bne.n	b9894 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b9864:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b9868:	b10b      	cbz	r3, b986e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b986a:	0670      	lsls	r0, r6, #25
   b986c:	d512      	bpl.n	b9894 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b986e:	7923      	ldrb	r3, [r4, #4]
   b9870:	2b04      	cmp	r3, #4
   b9872:	d101      	bne.n	b9878 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b9874:	0669      	lsls	r1, r5, #25
   b9876:	d422      	bmi.n	b98be <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b9878:	7923      	ldrb	r3, [r4, #4]
   b987a:	2b03      	cmp	r3, #3
   b987c:	d101      	bne.n	b9882 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b987e:	072a      	lsls	r2, r5, #28
   b9880:	d468      	bmi.n	b9954 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b9882:	7923      	ldrb	r3, [r4, #4]
   b9884:	2b05      	cmp	r3, #5
   b9886:	d10e      	bne.n	b98a6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b9888:	076b      	lsls	r3, r5, #29
   b988a:	d50c      	bpl.n	b98a6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b988c:	f005 0501 	and.w	r5, r5, #1
   b9890:	7625      	strb	r5, [r4, #24]
   b9892:	e063      	b.n	b995c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b9894:	8a63      	ldrh	r3, [r4, #18]
   b9896:	3301      	adds	r3, #1
   b9898:	b29b      	uxth	r3, r3
   b989a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b989c:	2300      	movs	r3, #0
   b989e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b98a2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b98a6:	22ff      	movs	r2, #255	; 0xff
   b98a8:	2112      	movs	r1, #18
   b98aa:	4620      	mov	r0, r4
   b98ac:	f7ff fe35 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b98b0:	4620      	mov	r0, r4
   b98b2:	22ff      	movs	r2, #255	; 0xff
}
   b98b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b98b8:	2112      	movs	r1, #18
   b98ba:	f7ff be2e 	b.w	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b98be:	2113      	movs	r1, #19
   b98c0:	4620      	mov	r0, r4
   b98c2:	f7ff fe09 	bl	b94d8 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b98c6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b98c8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b98ca:	4620      	mov	r0, r4
   b98cc:	f7ff fe04 	bl	b94d8 <_ZN11RHSPIDriver7spiReadEh>
   b98d0:	210d      	movs	r1, #13
   b98d2:	4602      	mov	r2, r0
   b98d4:	4620      	mov	r0, r4
   b98d6:	f7ff fe20 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b98da:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b98de:	462b      	mov	r3, r5
   b98e0:	2100      	movs	r1, #0
   b98e2:	4620      	mov	r0, r4
   b98e4:	f7ff fe3e 	bl	b9564 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b98e8:	2119      	movs	r1, #25
	_bufLen = len;
   b98ea:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b98ee:	4620      	mov	r0, r4
   b98f0:	f7ff fdf2 	bl	b94d8 <_ZN11RHSPIDriver7spiReadEh>
   b98f4:	b240      	sxtb	r0, r0
   b98f6:	2800      	cmp	r0, #0
   b98f8:	bfb8      	it	lt
   b98fa:	3003      	addlt	r0, #3
   b98fc:	1080      	asrs	r0, r0, #2
   b98fe:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b9902:	211a      	movs	r1, #26
   b9904:	4620      	mov	r0, r4
   b9906:	f7ff fde7 	bl	b94d8 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b990a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b990e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b9910:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b9912:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b9914:	bfa9      	itett	ge
   b9916:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b9918:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b991a:	b21b      	sxthge	r3, r3
   b991c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b991e:	bfb2      	itee	lt
   b9920:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b9922:	220f      	movge	r2, #15
   b9924:	fb93 f3f2 	sdivge	r3, r3, r2
   b9928:	b21b      	sxth	r3, r3
   b992a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b992c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b9930:	b16b      	cbz	r3, b994e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b9932:	8a23      	ldrh	r3, [r4, #16]
   b9934:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b9936:	b21b      	sxth	r3, r3
   b9938:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b993a:	4620      	mov	r0, r4
   b993c:	f7ff ff04 	bl	b9748 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b9940:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b9944:	2b00      	cmp	r3, #0
   b9946:	d0ae      	beq.n	b98a6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b9948:	f7ff ff64 	bl	b9814 <_ZN7RH_RF9511setModeIdleEv>
   b994c:	e7ab      	b.n	b98a6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b994e:	8a23      	ldrh	r3, [r4, #16]
   b9950:	3ba4      	subs	r3, #164	; 0xa4
   b9952:	e7f0      	b.n	b9936 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b9954:	8ae3      	ldrh	r3, [r4, #22]
   b9956:	3301      	adds	r3, #1
   b9958:	b29b      	uxth	r3, r3
   b995a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b995c:	4620      	mov	r0, r4
   b995e:	e7f3      	b.n	b9948 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b9960 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b9960:	4b02      	ldr	r3, [pc, #8]	; (b996c <_ZN7RH_RF954isr0Ev+0xc>)
   b9962:	6818      	ldr	r0, [r3, #0]
   b9964:	b108      	cbz	r0, b996a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b9966:	f7ff bf67 	b.w	b9838 <_ZN7RH_RF9515handleInterruptEv>
}
   b996a:	4770      	bx	lr
   b996c:	2003e570 	.word	0x2003e570

000b9970 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b9970:	4b02      	ldr	r3, [pc, #8]	; (b997c <_ZN7RH_RF954isr1Ev+0xc>)
   b9972:	6858      	ldr	r0, [r3, #4]
   b9974:	b108      	cbz	r0, b997a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b9976:	f7ff bf5f 	b.w	b9838 <_ZN7RH_RF9515handleInterruptEv>
}
   b997a:	4770      	bx	lr
   b997c:	2003e570 	.word	0x2003e570

000b9980 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b9980:	4b02      	ldr	r3, [pc, #8]	; (b998c <_ZN7RH_RF954isr2Ev+0xc>)
   b9982:	6898      	ldr	r0, [r3, #8]
   b9984:	b108      	cbz	r0, b998a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b9986:	f7ff bf57 	b.w	b9838 <_ZN7RH_RF9515handleInterruptEv>
}
   b998a:	4770      	bx	lr
   b998c:	2003e570 	.word	0x2003e570

000b9990 <_ZN7RH_RF959setModeRxEv>:
{
   b9990:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b9992:	7903      	ldrb	r3, [r0, #4]
   b9994:	2b04      	cmp	r3, #4
{
   b9996:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b9998:	d010      	beq.n	b99bc <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b999a:	6803      	ldr	r3, [r0, #0]
   b999c:	2104      	movs	r1, #4
   b999e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b99a2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b99a4:	2205      	movs	r2, #5
   b99a6:	2101      	movs	r1, #1
   b99a8:	4620      	mov	r0, r4
   b99aa:	f7ff fdb6 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b99ae:	2200      	movs	r2, #0
   b99b0:	2140      	movs	r1, #64	; 0x40
   b99b2:	4620      	mov	r0, r4
   b99b4:	f7ff fdb1 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b99b8:	2304      	movs	r3, #4
   b99ba:	7123      	strb	r3, [r4, #4]
}
   b99bc:	bd10      	pop	{r4, pc}

000b99be <_ZN7RH_RF959availableEv>:
{
   b99be:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b99c0:	7903      	ldrb	r3, [r0, #4]
   b99c2:	2b03      	cmp	r3, #3
{
   b99c4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b99c6:	d005      	beq.n	b99d4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b99c8:	f7ff ffe2 	bl	b9990 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b99cc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b99d0:	b2c0      	uxtb	r0, r0
}
   b99d2:	bd10      	pop	{r4, pc}
	return false;
   b99d4:	2000      	movs	r0, #0
   b99d6:	e7fc      	b.n	b99d2 <_ZN7RH_RF959availableEv+0x14>

000b99d8 <_ZN7RH_RF959setModeTxEv>:
{
   b99d8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b99da:	7903      	ldrb	r3, [r0, #4]
   b99dc:	2b03      	cmp	r3, #3
{
   b99de:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b99e0:	d010      	beq.n	b9a04 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b99e2:	6803      	ldr	r3, [r0, #0]
   b99e4:	2103      	movs	r1, #3
   b99e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b99ea:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b99ec:	2203      	movs	r2, #3
   b99ee:	2101      	movs	r1, #1
   b99f0:	4620      	mov	r0, r4
   b99f2:	f7ff fd92 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b99f6:	2240      	movs	r2, #64	; 0x40
   b99f8:	4611      	mov	r1, r2
   b99fa:	4620      	mov	r0, r4
   b99fc:	f7ff fd8d 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b9a00:	2303      	movs	r3, #3
   b9a02:	7123      	strb	r3, [r4, #4]
}
   b9a04:	bd10      	pop	{r4, pc}

000b9a06 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b9a06:	2afb      	cmp	r2, #251	; 0xfb
{
   b9a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9a0a:	4604      	mov	r4, r0
   b9a0c:	460f      	mov	r7, r1
   b9a0e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b9a10:	d902      	bls.n	b9a18 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b9a12:	2600      	movs	r6, #0
}
   b9a14:	4630      	mov	r0, r6
   b9a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b9a18:	6803      	ldr	r3, [r0, #0]
   b9a1a:	6a1b      	ldr	r3, [r3, #32]
   b9a1c:	4798      	blx	r3
    setModeIdle();
   b9a1e:	4620      	mov	r0, r4
   b9a20:	f7ff fef8 	bl	b9814 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b9a24:	6823      	ldr	r3, [r4, #0]
   b9a26:	4620      	mov	r0, r4
   b9a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9a2a:	4798      	blx	r3
   b9a2c:	4606      	mov	r6, r0
   b9a2e:	2800      	cmp	r0, #0
   b9a30:	d0ef      	beq.n	b9a12 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b9a32:	2200      	movs	r2, #0
   b9a34:	210d      	movs	r1, #13
   b9a36:	4620      	mov	r0, r4
   b9a38:	f7ff fd6f 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b9a3c:	7ae2      	ldrb	r2, [r4, #11]
   b9a3e:	2100      	movs	r1, #0
   b9a40:	4620      	mov	r0, r4
   b9a42:	f7ff fd6a 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b9a46:	7b22      	ldrb	r2, [r4, #12]
   b9a48:	2100      	movs	r1, #0
   b9a4a:	4620      	mov	r0, r4
   b9a4c:	f7ff fd65 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b9a50:	7b62      	ldrb	r2, [r4, #13]
   b9a52:	2100      	movs	r1, #0
   b9a54:	4620      	mov	r0, r4
   b9a56:	f7ff fd60 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b9a5a:	7ba2      	ldrb	r2, [r4, #14]
   b9a5c:	2100      	movs	r1, #0
   b9a5e:	4620      	mov	r0, r4
   b9a60:	f7ff fd5b 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b9a64:	462b      	mov	r3, r5
   b9a66:	463a      	mov	r2, r7
   b9a68:	2100      	movs	r1, #0
   b9a6a:	4620      	mov	r0, r4
   b9a6c:	f7ff fda3 	bl	b95b6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b9a70:	1d2a      	adds	r2, r5, #4
   b9a72:	b2d2      	uxtb	r2, r2
   b9a74:	2122      	movs	r1, #34	; 0x22
   b9a76:	4620      	mov	r0, r4
   b9a78:	f7ff fd4f 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b9a7c:	4620      	mov	r0, r4
   b9a7e:	f7ff ffab 	bl	b99d8 <_ZN7RH_RF959setModeTxEv>
    return true;
   b9a82:	e7c7      	b.n	b9a14 <_ZN7RH_RF954sendEPKhh+0xe>

000b9a84 <_ZN7RH_RF9510setTxPowerEab>:
{
   b9a84:	b510      	push	{r4, lr}
   b9a86:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b9a88:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b9a8c:	b172      	cbz	r2, b9aac <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b9a8e:	f381 0204 	usat	r2, #4, r1
   b9a92:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b9a96:	b2d2      	uxtb	r2, r2
   b9a98:	2109      	movs	r1, #9
   b9a9a:	f7ff fd3e 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9a9e:	4620      	mov	r0, r4
   b9aa0:	2204      	movs	r2, #4
}
   b9aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9aa6:	214d      	movs	r1, #77	; 0x4d
   b9aa8:	f7ff bd37 	b.w	b951a <_ZN11RHSPIDriver8spiWriteEhh>
}
   b9aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9ab0:	f7ff be0a 	b.w	b96c8 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b9ab4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b9ab4:	b538      	push	{r3, r4, r5, lr}
   b9ab6:	460c      	mov	r4, r1
   b9ab8:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b9aba:	780a      	ldrb	r2, [r1, #0]
   b9abc:	211d      	movs	r1, #29
   b9abe:	f7ff fd2c 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b9ac2:	7862      	ldrb	r2, [r4, #1]
   b9ac4:	211e      	movs	r1, #30
   b9ac6:	4628      	mov	r0, r5
   b9ac8:	f7ff fd27 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b9acc:	78a2      	ldrb	r2, [r4, #2]
   b9ace:	4628      	mov	r0, r5
   b9ad0:	2126      	movs	r1, #38	; 0x26
}
   b9ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b9ad6:	f7ff bd20 	b.w	b951a <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b9adc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b9adc:	2905      	cmp	r1, #5
{
   b9ade:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b9ae0:	d80f      	bhi.n	b9b02 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b9ae2:	4b09      	ldr	r3, [pc, #36]	; (b9b08 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b9ae4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b9ae8:	185c      	adds	r4, r3, r1
   b9aea:	5a5a      	ldrh	r2, [r3, r1]
   b9aec:	78a3      	ldrb	r3, [r4, #2]
   b9aee:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b9af2:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b9af4:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b9af8:	f7ff ffdc 	bl	b9ab4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b9afc:	2001      	movs	r0, #1
}
   b9afe:	b002      	add	sp, #8
   b9b00:	bd10      	pop	{r4, pc}
        return false;
   b9b02:	2000      	movs	r0, #0
   b9b04:	e7fb      	b.n	b9afe <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b9b06:	bf00      	nop
   b9b08:	000c0264 	.word	0x000c0264

000b9b0c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b9b0c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b9b0e:	0a0a      	lsrs	r2, r1, #8
{
   b9b10:	4605      	mov	r5, r0
   b9b12:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b9b14:	2120      	movs	r1, #32
   b9b16:	f7ff fd00 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b9b1a:	b2e2      	uxtb	r2, r4
   b9b1c:	4628      	mov	r0, r5
   b9b1e:	2121      	movs	r1, #33	; 0x21
}
   b9b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b9b24:	f7ff bcf9 	b.w	b951a <_ZN11RHSPIDriver8spiWriteEhh>

000b9b28 <_ZN7RH_RF954initEv>:
{
   b9b28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9b2a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b9b2c:	f7ff fca4 	bl	b9478 <_ZN11RHSPIDriver4initEv>
   b9b30:	4606      	mov	r6, r0
   b9b32:	b918      	cbnz	r0, b9b3c <_ZN7RH_RF954initEv+0x14>
	return false;
   b9b34:	2600      	movs	r6, #0
}
   b9b36:	4630      	mov	r0, r6
   b9b38:	b002      	add	sp, #8
   b9b3a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b9b3c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b9b40:	2dff      	cmp	r5, #255	; 0xff
   b9b42:	d054      	beq.n	b9bee <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b9b44:	4629      	mov	r1, r5
   b9b46:	4620      	mov	r0, r4
   b9b48:	f7ff fd5d 	bl	b9606 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b9b4c:	2280      	movs	r2, #128	; 0x80
   b9b4e:	2101      	movs	r1, #1
   b9b50:	4620      	mov	r0, r4
   b9b52:	f7ff fce2 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b9b56:	200a      	movs	r0, #10
   b9b58:	f001 f950 	bl	badfc <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b9b5c:	2101      	movs	r1, #1
   b9b5e:	4620      	mov	r0, r4
   b9b60:	f7ff fcba 	bl	b94d8 <_ZN11RHSPIDriver7spiReadEh>
   b9b64:	2880      	cmp	r0, #128	; 0x80
   b9b66:	d1e5      	bne.n	b9b34 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b9b68:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b9b6c:	28ff      	cmp	r0, #255	; 0xff
   b9b6e:	d01c      	beq.n	b9baa <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b9b70:	2100      	movs	r1, #0
   b9b72:	f004 f9cd 	bl	bdf10 <pinMode>
	if (_myInterruptIndex == 0xff)
   b9b76:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b9b7a:	2bff      	cmp	r3, #255	; 0xff
   b9b7c:	d107      	bne.n	b9b8e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b9b7e:	4a26      	ldr	r2, [pc, #152]	; (b9c18 <_ZN7RH_RF954initEv+0xf0>)
   b9b80:	7813      	ldrb	r3, [r2, #0]
   b9b82:	2b03      	cmp	r3, #3
   b9b84:	d8d6      	bhi.n	b9b34 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b9b86:	1c59      	adds	r1, r3, #1
   b9b88:	7011      	strb	r1, [r2, #0]
   b9b8a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b9b8e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b9b92:	4b22      	ldr	r3, [pc, #136]	; (b9c1c <_ZN7RH_RF954initEv+0xf4>)
   b9b94:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b9b98:	bb62      	cbnz	r2, b9bf4 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b9b9a:	4921      	ldr	r1, [pc, #132]	; (b9c20 <_ZN7RH_RF954initEv+0xf8>)
   b9b9c:	9200      	str	r2, [sp, #0]
   b9b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9ba2:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b9ba4:	b2a8      	uxth	r0, r5
   b9ba6:	f001 fe9f 	bl	bb8e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b9baa:	2200      	movs	r2, #0
   b9bac:	210e      	movs	r1, #14
   b9bae:	4620      	mov	r0, r4
   b9bb0:	f7ff fcb3 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b9bb4:	2200      	movs	r2, #0
   b9bb6:	210f      	movs	r1, #15
   b9bb8:	4620      	mov	r0, r4
   b9bba:	f7ff fcae 	bl	b951a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b9bbe:	4620      	mov	r0, r4
   b9bc0:	f7ff fe28 	bl	b9814 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b9bc4:	2100      	movs	r1, #0
   b9bc6:	4620      	mov	r0, r4
   b9bc8:	f7ff ff88 	bl	b9adc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b9bcc:	2108      	movs	r1, #8
   b9bce:	4620      	mov	r0, r4
   b9bd0:	f7ff ff9c 	bl	b9b0c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b9bd4:	ed9f 0a13 	vldr	s0, [pc, #76]	; b9c24 <_ZN7RH_RF954initEv+0xfc>
   b9bd8:	4620      	mov	r0, r4
   b9bda:	f7ff fdd9 	bl	b9790 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b9bde:	2300      	movs	r3, #0
   b9be0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b9be4:	210d      	movs	r1, #13
   b9be6:	4620      	mov	r0, r4
   b9be8:	f7ff fd6e 	bl	b96c8 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b9bec:	e7a3      	b.n	b9b36 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b9bee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b9bf2:	e7ab      	b.n	b9b4c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b9bf4:	2a01      	cmp	r2, #1
   b9bf6:	f04f 0300 	mov.w	r3, #0
   b9bfa:	d104      	bne.n	b9c06 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b9bfc:	9300      	str	r3, [sp, #0]
   b9bfe:	490a      	ldr	r1, [pc, #40]	; (b9c28 <_ZN7RH_RF954initEv+0x100>)
   b9c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c04:	e7ce      	b.n	b9ba4 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b9c06:	2a02      	cmp	r2, #2
   b9c08:	d194      	bne.n	b9b34 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b9c0a:	9300      	str	r3, [sp, #0]
   b9c0c:	4907      	ldr	r1, [pc, #28]	; (b9c2c <_ZN7RH_RF954initEv+0x104>)
   b9c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c12:	2201      	movs	r2, #1
   b9c14:	e7c6      	b.n	b9ba4 <_ZN7RH_RF954initEv+0x7c>
   b9c16:	bf00      	nop
   b9c18:	2003e56d 	.word	0x2003e56d
   b9c1c:	2003e570 	.word	0x2003e570
   b9c20:	000b9961 	.word	0x000b9961
   b9c24:	43d90000 	.word	0x43d90000
   b9c28:	000b9971 	.word	0x000b9971
   b9c2c:	000b9981 	.word	0x000b9981

000b9c30 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   b9c30:	2001      	movs	r0, #1
   b9c32:	4770      	bx	lr

000b9c34 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   b9c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9c36:	4d1f      	ldr	r5, [pc, #124]	; (b9cb4 <_ZN14SequentialFileC1Ev+0x80>)
   b9c38:	4b1f      	ldr	r3, [pc, #124]	; (b9cb8 <_ZN14SequentialFileC1Ev+0x84>)
   b9c3a:	4604      	mov	r4, r0
   b9c3c:	4629      	mov	r1, r5
   b9c3e:	f840 3b04 	str.w	r3, [r0], #4
   b9c42:	f003 fc12 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b9c46:	491d      	ldr	r1, [pc, #116]	; (b9cbc <_ZN14SequentialFileC1Ev+0x88>)
   b9c48:	f104 0014 	add.w	r0, r4, #20
   b9c4c:	f003 fc0d 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b9c50:	4629      	mov	r1, r5
   b9c52:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9c56:	f003 fc08 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b9c5a:	2300      	movs	r3, #0
   b9c5c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b9c60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b9c64:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   b9c68:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   b9c6c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   b9c70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9c74:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b9c76:	2308      	movs	r3, #8
   b9c78:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9c7a:	2020      	movs	r0, #32
   b9c7c:	f7fa fa0b 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9c80:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b9c82:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9c84:	3d01      	subs	r5, #1
   b9c86:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b9c88:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   b9c8c:	4606      	mov	r6, r0
   b9c8e:	f44f 7000 	mov.w	r0, #512	; 0x200
   b9c92:	f7fa fa00 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9c96:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b9c9a:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   b9c9e:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   b9ca2:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b9ca4:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b9ca6:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   b9ca8:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9caa:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   b9cac:	6667      	str	r7, [r4, #100]	; 0x64

}
   b9cae:	4620      	mov	r0, r4
   b9cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9cb2:	bf00      	nop
   b9cb4:	000c05fd 	.word	0x000c05fd
   b9cb8:	000c0400 	.word	0x000c0400
   b9cbc:	000c0300 	.word	0x000c0300

000b9cc0 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b9cc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   b9cc2:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   b9cc4:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   b9cc6:	4628      	mov	r0, r5
   b9cc8:	f003 fc2d 	bl	bd526 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   b9ccc:	490e      	ldr	r1, [pc, #56]	; (b9d08 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   b9cce:	4668      	mov	r0, sp
   b9cd0:	f003 fbcb 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b9cd4:	4669      	mov	r1, sp
   b9cd6:	4628      	mov	r0, r5
   b9cd8:	f003 fc92 	bl	bd600 <_ZNK6String8endsWithERKS_>
   b9cdc:	4606      	mov	r6, r0
   b9cde:	4668      	mov	r0, sp
   b9ce0:	f003 fb78 	bl	bd3d4 <_ZN6StringD1Ev>
   b9ce4:	b16e      	cbz	r6, b9d02 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   b9ce6:	68e3      	ldr	r3, [r4, #12]
   b9ce8:	2200      	movs	r2, #0
   b9cea:	3b01      	subs	r3, #1
   b9cec:	4629      	mov	r1, r5
   b9cee:	4668      	mov	r0, sp
   b9cf0:	f003 fc9c 	bl	bd62c <_ZNK6String9substringEjj>
   b9cf4:	4669      	mov	r1, sp
   b9cf6:	4628      	mov	r0, r5
   b9cf8:	f003 fc0d 	bl	bd516 <_ZN6StringaSEOS_>
   b9cfc:	4668      	mov	r0, sp
   b9cfe:	f003 fb69 	bl	bd3d4 <_ZN6StringD1Ev>
    }
    return *this; 
};
   b9d02:	4620      	mov	r0, r4
   b9d04:	b004      	add	sp, #16
   b9d06:	bd70      	pop	{r4, r5, r6, pc}
   b9d08:	000c0305 	.word	0x000c0305

000b9d0c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   b9d0c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   b9d0e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   b9d10:	4604      	mov	r4, r0
    if (!queueMutex) {
   b9d12:	b913      	cbnz	r3, b9d1a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   b9d14:	303c      	adds	r0, #60	; 0x3c
   b9d16:	f000 fbfd 	bl	ba514 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   b9d1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   b9d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   b9d20:	f000 bc00 	b.w	ba524 <os_mutex_lock>

000b9d24 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   b9d24:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b9d26:	f000 bc05 	b.w	ba534 <os_mutex_unlock>
	...

000b9d2c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   b9d2c:	b510      	push	{r4, lr}
   b9d2e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   b9d30:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   b9d32:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   b9d34:	f000 fdb6 	bl	ba8a4 <stat>
    if (result == 0) {
   b9d38:	b9d0      	cbnz	r0, b9d70 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b9d3a:	9b01      	ldr	r3, [sp, #4]
   b9d3c:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   b9d3e:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   b9d40:	d506      	bpl.n	b9d50 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   b9d42:	4915      	ldr	r1, [pc, #84]	; (b9d98 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   b9d44:	4815      	ldr	r0, [pc, #84]	; (b9d9c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9d46:	f7fa f9c9 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        return true;
   b9d4a:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   b9d4c:	b016      	add	sp, #88	; 0x58
   b9d4e:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   b9d50:	4812      	ldr	r0, [pc, #72]	; (b9d9c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9d52:	4913      	ldr	r1, [pc, #76]	; (b9da0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   b9d54:	f7fc fa50 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   b9d58:	4620      	mov	r0, r4
   b9d5a:	f005 f90d 	bl	bef78 <unlink>
    result = mkdir(path, 0777);
   b9d5e:	f240 11ff 	movw	r1, #511	; 0x1ff
   b9d62:	4620      	mov	r0, r4
   b9d64:	f000 fda6 	bl	ba8b4 <mkdir>
    if (result == 0) {
   b9d68:	b980      	cbnz	r0, b9d8c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   b9d6a:	490e      	ldr	r1, [pc, #56]	; (b9da4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   b9d6c:	4622      	mov	r2, r4
   b9d6e:	e7e9      	b.n	b9d44 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   b9d70:	f001 f80c 	bl	bad8c <__errno>
   b9d74:	6803      	ldr	r3, [r0, #0]
   b9d76:	2b02      	cmp	r3, #2
   b9d78:	d0f1      	beq.n	b9d5e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   b9d7a:	f001 f807 	bl	bad8c <__errno>
   b9d7e:	490a      	ldr	r1, [pc, #40]	; (b9da8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   b9d80:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   b9d82:	4806      	ldr	r0, [pc, #24]	; (b9d9c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   b9d84:	f7fc fa38 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   b9d88:	2000      	movs	r0, #0
   b9d8a:	e7df      	b.n	b9d4c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   b9d8c:	f000 fffe 	bl	bad8c <__errno>
   b9d90:	4906      	ldr	r1, [pc, #24]	; (b9dac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   b9d92:	6802      	ldr	r2, [r0, #0]
   b9d94:	e7f5      	b.n	b9d82 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   b9d96:	bf00      	nop
   b9d98:	000c0312 	.word	0x000c0312
   b9d9c:	2003e57c 	.word	0x2003e57c
   b9da0:	000c032f 	.word	0x000c032f
   b9da4:	000c0360 	.word	0x000c0360
   b9da8:	000c034c 	.word	0x000c034c
   b9dac:	000c036f 	.word	0x000c036f

000b9db0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   b9db0:	b538      	push	{r3, r4, r5, lr}
   b9db2:	4615      	mov	r5, r2
   b9db4:	4604      	mov	r4, r0
    String result = name;
   b9db6:	f003 fb58 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   b9dba:	b14d      	cbz	r5, b9dd0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   b9dbc:	782b      	ldrb	r3, [r5, #0]
   b9dbe:	b13b      	cbz	r3, b9dd0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b9dc0:	4904      	ldr	r1, [pc, #16]	; (b9dd4 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   b9dc2:	4620      	mov	r0, r4
   b9dc4:	f003 fbd8 	bl	bd578 <_ZN6String6concatEPKc>
   b9dc8:	4629      	mov	r1, r5
   b9dca:	4620      	mov	r0, r4
   b9dcc:	f003 fbd4 	bl	bd578 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   b9dd0:	4620      	mov	r0, r4
   b9dd2:	bd38      	pop	{r3, r4, r5, pc}
   b9dd4:	000c0704 	.word	0x000c0704

000b9dd8 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   b9dd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9dda:	4605      	mov	r5, r0
   b9ddc:	460e      	mov	r6, r1
   b9dde:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   b9de0:	6949      	ldr	r1, [r1, #20]
   b9de2:	4668      	mov	r0, sp
   b9de4:	f003 fc42 	bl	bd66c <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   b9de8:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   b9dea:	b904      	cbnz	r4, b9dee <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   b9dec:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9dee:	4622      	mov	r2, r4
   b9df0:	4628      	mov	r0, r5
   b9df2:	f7ff ffdd 	bl	b9db0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   b9df6:	4668      	mov	r0, sp
   b9df8:	f003 faec 	bl	bd3d4 <_ZN6StringD1Ev>
}
   b9dfc:	4628      	mov	r0, r5
   b9dfe:	b004      	add	sp, #16
   b9e00:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9e04 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b9e04:	b570      	push	{r4, r5, r6, lr}
   b9e06:	460c      	mov	r4, r1
   b9e08:	b08e      	sub	sp, #56	; 0x38
    String result;
   b9e0a:	491a      	ldr	r1, [pc, #104]	; (b9e74 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   b9e0c:	e9cd 3200 	strd	r3, r2, [sp]
   b9e10:	4605      	mov	r5, r0
    String result;
   b9e12:	f003 fb2a 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   b9e16:	68e0      	ldr	r0, [r4, #12]
   b9e18:	69e1      	ldr	r1, [r4, #28]
   b9e1a:	4401      	add	r1, r0
   b9e1c:	3104      	adds	r1, #4
   b9e1e:	4628      	mov	r0, r5
   b9e20:	f003 faf6 	bl	bd410 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b9e24:	1d21      	adds	r1, r4, #4
   b9e26:	a806      	add	r0, sp, #24
   b9e28:	f003 fb6a 	bl	bd500 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   b9e2c:	4912      	ldr	r1, [pc, #72]	; (b9e78 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   b9e2e:	a802      	add	r0, sp, #8
   b9e30:	f003 fb1b 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b9e34:	a902      	add	r1, sp, #8
   b9e36:	a806      	add	r0, sp, #24
   b9e38:	f003 fbaf 	bl	bd59a <_ZplRK15StringSumHelperRK6String>
   b9e3c:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9e40:	4606      	mov	r6, r0
   b9e42:	4621      	mov	r1, r4
   b9e44:	a80a      	add	r0, sp, #40	; 0x28
   b9e46:	f7ff ffc7 	bl	b9dd8 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   b9e4a:	a90a      	add	r1, sp, #40	; 0x28
   b9e4c:	4630      	mov	r0, r6
   b9e4e:	f003 fba4 	bl	bd59a <_ZplRK15StringSumHelperRK6String>
   b9e52:	4601      	mov	r1, r0
   b9e54:	4628      	mov	r0, r5
   b9e56:	f003 fb44 	bl	bd4e2 <_ZN6StringaSERKS_>
   b9e5a:	a80a      	add	r0, sp, #40	; 0x28
   b9e5c:	f003 faba 	bl	bd3d4 <_ZN6StringD1Ev>
   b9e60:	a802      	add	r0, sp, #8
   b9e62:	f003 fab7 	bl	bd3d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b9e66:	a806      	add	r0, sp, #24
   b9e68:	f003 fab4 	bl	bd3d4 <_ZN6StringD1Ev>
}
   b9e6c:	4628      	mov	r0, r5
   b9e6e:	b00e      	add	sp, #56	; 0x38
   b9e70:	bd70      	pop	{r4, r5, r6, pc}
   b9e72:	bf00      	nop
   b9e74:	000c05fd 	.word	0x000c05fd
   b9e78:	000c0305 	.word	0x000c0305

000b9e7c <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b9e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   b9e80:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   b9e82:	b08e      	sub	sp, #56	; 0x38
   b9e84:	4605      	mov	r5, r0
   b9e86:	460f      	mov	r7, r1
    if (allExtensions) {
   b9e88:	2a00      	cmp	r2, #0
   b9e8a:	d04a      	beq.n	b9f22 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   b9e8c:	6840      	ldr	r0, [r0, #4]
   b9e8e:	f000 fd21 	bl	ba8d4 <opendir>
        if (dir) {
   b9e92:	4606      	mov	r6, r0
   b9e94:	2800      	cmp	r0, #0
   b9e96:	d054      	beq.n	b9f42 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   b9e98:	f8df a0b4 	ldr.w	sl, [pc, #180]	; b9f50 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   b9e9c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; b9f4c <_ZN14SequentialFile13removeFileNumEib+0xd0>
   b9ea0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9f48 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   b9ea4:	4630      	mov	r0, r6
   b9ea6:	f000 fd1d 	bl	ba8e4 <readdir>
                if (!ent) {
   b9eaa:	2800      	cmp	r0, #0
   b9eac:	d033      	beq.n	b9f16 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   b9eae:	7a82      	ldrb	r2, [r0, #10]
   b9eb0:	2a08      	cmp	r2, #8
   b9eb2:	d1f7      	bne.n	b9ea4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   b9eb4:	f100 040b 	add.w	r4, r0, #11
   b9eb8:	6969      	ldr	r1, [r5, #20]
   b9eba:	aa01      	add	r2, sp, #4
   b9ebc:	4620      	mov	r0, r4
   b9ebe:	f000 ff3d 	bl	bad3c <sscanf>
   b9ec2:	2801      	cmp	r0, #1
   b9ec4:	d1ee      	bne.n	b9ea4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   b9ec6:	9b01      	ldr	r3, [sp, #4]
   b9ec8:	42bb      	cmp	r3, r7
   b9eca:	d1eb      	bne.n	b9ea4 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   b9ecc:	1d29      	adds	r1, r5, #4
   b9ece:	a80a      	add	r0, sp, #40	; 0x28
   b9ed0:	f003 fb16 	bl	bd500 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   b9ed4:	4651      	mov	r1, sl
   b9ed6:	a806      	add	r0, sp, #24
   b9ed8:	f003 fac7 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   b9edc:	a906      	add	r1, sp, #24
   b9ede:	a80a      	add	r0, sp, #40	; 0x28
   b9ee0:	f003 fb5b 	bl	bd59a <_ZplRK15StringSumHelperRK6String>
   b9ee4:	4621      	mov	r1, r4
   b9ee6:	f003 fb64 	bl	bd5b2 <_ZplRK15StringSumHelperPKc>
   b9eea:	4601      	mov	r1, r0
   b9eec:	a802      	add	r0, sp, #8
   b9eee:	f003 fb07 	bl	bd500 <_ZN6StringC1ERKS_>
   b9ef2:	a806      	add	r0, sp, #24
   b9ef4:	f003 fa6e 	bl	bd3d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b9ef8:	a80a      	add	r0, sp, #40	; 0x28
   b9efa:	f003 fa6b 	bl	bd3d4 <_ZN6StringD1Ev>
                        unlink(path);
   b9efe:	9802      	ldr	r0, [sp, #8]
   b9f00:	f005 f83a 	bl	bef78 <unlink>
                        _log.trace("removed %s", path.c_str());
   b9f04:	4640      	mov	r0, r8
   b9f06:	9a02      	ldr	r2, [sp, #8]
   b9f08:	4649      	mov	r1, r9
   b9f0a:	f7fc f983 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   b9f0e:	a802      	add	r0, sp, #8
   b9f10:	f003 fa60 	bl	bd3d4 <_ZN6StringD1Ev>
                    continue;
   b9f14:	e7c6      	b.n	b9ea4 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   b9f16:	4630      	mov	r0, r6
}
   b9f18:	b00e      	add	sp, #56	; 0x38
   b9f1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   b9f1e:	f000 bce9 	b.w	ba8f4 <closedir>
        String path = getPathForFileNum(fileNum); 
   b9f22:	460a      	mov	r2, r1
   b9f24:	4601      	mov	r1, r0
   b9f26:	a80a      	add	r0, sp, #40	; 0x28
   b9f28:	f7ff ff6c 	bl	b9e04 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   b9f2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b9f2e:	f005 f823 	bl	bef78 <unlink>
        _log.trace("removed %s", path.c_str());
   b9f32:	4805      	ldr	r0, [pc, #20]	; (b9f48 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   b9f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b9f36:	4905      	ldr	r1, [pc, #20]	; (b9f4c <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   b9f38:	f7fc f96c 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   b9f3c:	a80a      	add	r0, sp, #40	; 0x28
   b9f3e:	f003 fa49 	bl	bd3d4 <_ZN6StringD1Ev>
}
   b9f42:	b00e      	add	sp, #56	; 0x38
   b9f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9f48:	2003e57c 	.word	0x2003e57c
   b9f4c:	000c0307 	.word	0x000c0307
   b9f50:	000c0305 	.word	0x000c0305

000b9f54 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b9f54:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b9f56:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b9f58:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b9f5a:	b183      	cbz	r3, b9f7e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b9f5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9f5e:	6945      	ldr	r5, [r0, #20]
   b9f60:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b9f62:	42ae      	cmp	r6, r5
   b9f64:	d906      	bls.n	b9f74 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   b9f66:	f855 0b04 	ldr.w	r0, [r5], #4
   b9f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
   b9f6e:	f7fa f896 	bl	b409e <_ZdlPvj>
   b9f72:	e7f6      	b.n	b9f62 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   b9f74:	6861      	ldr	r1, [r4, #4]
   b9f76:	6820      	ldr	r0, [r4, #0]
   b9f78:	0089      	lsls	r1, r1, #2
   b9f7a:	f7fa f890 	bl	b409e <_ZdlPvj>
    }
   b9f7e:	4620      	mov	r0, r4
   b9f80:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9f84 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   b9f84:	b510      	push	{r4, lr}
   b9f86:	4b09      	ldr	r3, [pc, #36]	; (b9fac <_ZN14SequentialFileD1Ev+0x28>)
   b9f88:	4604      	mov	r4, r0
   b9f8a:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b9f8e:	f7ff ffe1 	bl	b9f54 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   b9f92:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9f96:	f003 fa1d 	bl	bd3d4 <_ZN6StringD1Ev>
   b9f9a:	f104 0014 	add.w	r0, r4, #20
   b9f9e:	f003 fa19 	bl	bd3d4 <_ZN6StringD1Ev>
   b9fa2:	1d20      	adds	r0, r4, #4
   b9fa4:	f003 fa16 	bl	bd3d4 <_ZN6StringD1Ev>
}
   b9fa8:	4620      	mov	r0, r4
   b9faa:	bd10      	pop	{r4, pc}
   b9fac:	000c0400 	.word	0x000c0400

000b9fb0 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   b9fb0:	b510      	push	{r4, lr}
   b9fb2:	4604      	mov	r4, r0
}
   b9fb4:	f7ff ffe6 	bl	b9f84 <_ZN14SequentialFileD1Ev>
   b9fb8:	4620      	mov	r0, r4
   b9fba:	2168      	movs	r1, #104	; 0x68
   b9fbc:	f7fa f86f 	bl	b409e <_ZdlPvj>
   b9fc0:	4620      	mov	r0, r4
   b9fc2:	bd10      	pop	{r4, pc}

000b9fc4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b9fc4:	68c3      	ldr	r3, [r0, #12]
   b9fc6:	68ca      	ldr	r2, [r1, #12]
   b9fc8:	1a9b      	subs	r3, r3, r2
   b9fca:	109b      	asrs	r3, r3, #2
   b9fcc:	1e5a      	subs	r2, r3, #1
   b9fce:	e9d0 3000 	ldrd	r3, r0, [r0]
   b9fd2:	1a1b      	subs	r3, r3, r0
   b9fd4:	109b      	asrs	r3, r3, #2
   b9fd6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b9fda:	6888      	ldr	r0, [r1, #8]
   b9fdc:	680a      	ldr	r2, [r1, #0]
   b9fde:	1a80      	subs	r0, r0, r2
      }
   b9fe0:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b9fe4:	4770      	bx	lr
	...

000b9fe8 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   b9fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   b9fec:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   b9fee:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   b9ff0:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b9ff2:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   b9ff4:	4604      	mov	r4, r0
   b9ff6:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   b9ff8:	d007      	beq.n	ba00a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9ffa:	b10b      	cbz	r3, ba000 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   b9ffc:	680a      	ldr	r2, [r1, #0]
   b9ffe:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba000:	69a3      	ldr	r3, [r4, #24]
   ba002:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba004:	61a3      	str	r3, [r4, #24]
      }
   ba006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba00a:	f100 0108 	add.w	r1, r0, #8
   ba00e:	3018      	adds	r0, #24
   ba010:	f7ff ffd8 	bl	b9fc4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   ba014:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba018:	4298      	cmp	r0, r3
   ba01a:	d102      	bne.n	ba022 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   ba01c:	4838      	ldr	r0, [pc, #224]	; (ba100 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   ba01e:	f004 f888 	bl	be132 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba022:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba024:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba026:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba028:	1a11      	subs	r1, r2, r0
   ba02a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba02e:	2901      	cmp	r1, #1
   ba030:	d825      	bhi.n	ba07e <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba032:	6961      	ldr	r1, [r4, #20]
   ba034:	eba2 0801 	sub.w	r8, r2, r1
   ba038:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba03c:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba03e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   ba042:	d936      	bls.n	ba0b2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   ba044:	1b5d      	subs	r5, r3, r5
   ba046:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba048:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   ba04c:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba04e:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   ba050:	eba3 0201 	sub.w	r2, r3, r1
   ba054:	d926      	bls.n	ba0a4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   ba056:	428b      	cmp	r3, r1
   ba058:	d002      	beq.n	ba060 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba05a:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba05c:	f004 fd84 	bl	beb68 <memmove>
	_M_node = __new_node;
   ba060:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   ba062:	682b      	ldr	r3, [r5, #0]
   ba064:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba066:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba06a:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba06c:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   ba070:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba072:	f855 3008 	ldr.w	r3, [r5, r8]
   ba076:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba078:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba07c:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba07e:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba082:	6a65      	ldr	r5, [r4, #36]	; 0x24
   ba084:	f7fa f807 	bl	b4096 <_Znwj>
   ba088:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba08a:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba08c:	b10b      	cbz	r3, ba092 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   ba08e:	683a      	ldr	r2, [r7, #0]
   ba090:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba092:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba094:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba096:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba098:	685b      	ldr	r3, [r3, #4]
   ba09a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba09c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba0a0:	6222      	str	r2, [r4, #32]
   ba0a2:	e7af      	b.n	ba004 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   ba0a4:	428b      	cmp	r3, r1
   ba0a6:	d0db      	beq.n	ba060 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba0a8:	f108 0004 	add.w	r0, r8, #4
   ba0ac:	1a80      	subs	r0, r0, r2
   ba0ae:	4428      	add	r0, r5
   ba0b0:	e7d4      	b.n	ba05c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba0b2:	f103 0902 	add.w	r9, r3, #2
   ba0b6:	2b01      	cmp	r3, #1
   ba0b8:	bf2c      	ite	cs
   ba0ba:	4499      	addcs	r9, r3
   ba0bc:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   ba0c0:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   ba0c4:	d301      	bcc.n	ba0ca <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   ba0c6:	f004 f831 	bl	be12c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba0ca:	ea4f 0089 	mov.w	r0, r9, lsl #2
   ba0ce:	f7f9 ffe2 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   ba0d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba0d4:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba0d6:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   ba0da:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba0dc:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   ba0de:	4291      	cmp	r1, r2
   ba0e0:	4682      	mov	sl, r0
   ba0e2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   ba0e6:	d003      	beq.n	ba0f0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba0e8:	1a52      	subs	r2, r2, r1
   ba0ea:	4628      	mov	r0, r5
   ba0ec:	f004 fd3c 	bl	beb68 <memmove>
	::operator delete(__p
   ba0f0:	6861      	ldr	r1, [r4, #4]
   ba0f2:	6820      	ldr	r0, [r4, #0]
   ba0f4:	0089      	lsls	r1, r1, #2
   ba0f6:	f7f9 ffd2 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba0fa:	e9c4 a900 	strd	sl, r9, [r4]
   ba0fe:	e7af      	b.n	ba060 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   ba100:	000bff89 	.word	0x000bff89

000ba104 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   ba104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   ba108:	68c3      	ldr	r3, [r0, #12]
   ba10a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   ba10c:	b086      	sub	sp, #24
   ba10e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   ba110:	d808      	bhi.n	ba124 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   ba112:	4934      	ldr	r1, [pc, #208]	; (ba1e4 <_ZN14SequentialFile7scanDirEv+0xe0>)
   ba114:	4834      	ldr	r0, [pc, #208]	; (ba1e8 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba116:	f7fc f86f 	bl	b61f8 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba11a:	2600      	movs	r6, #0
}
   ba11c:	4630      	mov	r0, r6
   ba11e:	b006      	add	sp, #24
   ba120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   ba124:	6840      	ldr	r0, [r0, #4]
   ba126:	f7ff fe01 	bl	b9d2c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   ba12a:	4606      	mov	r6, r0
   ba12c:	2800      	cmp	r0, #0
   ba12e:	d0f4      	beq.n	ba11a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   ba130:	6963      	ldr	r3, [r4, #20]
   ba132:	6862      	ldr	r2, [r4, #4]
   ba134:	492d      	ldr	r1, [pc, #180]	; (ba1ec <_ZN14SequentialFile7scanDirEv+0xe8>)
   ba136:	482c      	ldr	r0, [pc, #176]	; (ba1e8 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba138:	f7fc f86c 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   ba13c:	6860      	ldr	r0, [r4, #4]
   ba13e:	f000 fbc9 	bl	ba8d4 <opendir>
    if (!dir) {
   ba142:	4607      	mov	r7, r0
   ba144:	2800      	cmp	r0, #0
   ba146:	d0e8      	beq.n	ba11a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   ba148:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba14a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba1f0 <_ZN14SequentialFile7scanDirEv+0xec>
   ba14e:	f8df 8098 	ldr.w	r8, [pc, #152]	; ba1e8 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   ba152:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   ba154:	4638      	mov	r0, r7
   ba156:	f000 fbc5 	bl	ba8e4 <readdir>
        if (!ent) {
   ba15a:	4605      	mov	r5, r0
   ba15c:	2800      	cmp	r0, #0
   ba15e:	d039      	beq.n	ba1d4 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   ba160:	7a83      	ldrb	r3, [r0, #10]
   ba162:	2b08      	cmp	r3, #8
   ba164:	d1f6      	bne.n	ba154 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   ba166:	350b      	adds	r5, #11
   ba168:	6961      	ldr	r1, [r4, #20]
   ba16a:	aa01      	add	r2, sp, #4
   ba16c:	4628      	mov	r0, r5
   ba16e:	f000 fde5 	bl	bad3c <sscanf>
   ba172:	2801      	cmp	r0, #1
   ba174:	d1ee      	bne.n	ba154 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   ba176:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba178:	b17b      	cbz	r3, ba19a <_ZN14SequentialFile7scanDirEv+0x96>
   ba17a:	4629      	mov	r1, r5
   ba17c:	a802      	add	r0, sp, #8
   ba17e:	f003 f974 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
   ba182:	f104 0124 	add.w	r1, r4, #36	; 0x24
   ba186:	a802      	add	r0, sp, #8
   ba188:	f003 fa3a 	bl	bd600 <_ZNK6String8endsWithERKS_>
   ba18c:	4682      	mov	sl, r0
   ba18e:	a802      	add	r0, sp, #8
   ba190:	f003 f920 	bl	bd3d4 <_ZN6StringD1Ev>
   ba194:	f1ba 0f00 	cmp.w	sl, #0
   ba198:	d0dc      	beq.n	ba154 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   ba19a:	6823      	ldr	r3, [r4, #0]
   ba19c:	4629      	mov	r1, r5
   ba19e:	689b      	ldr	r3, [r3, #8]
   ba1a0:	4620      	mov	r0, r4
   ba1a2:	4798      	blx	r3
   ba1a4:	2800      	cmp	r0, #0
   ba1a6:	d0d5      	beq.n	ba154 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   ba1a8:	9a01      	ldr	r2, [sp, #4]
   ba1aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba1ac:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   ba1ae:	bfb8      	it	lt
   ba1b0:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba1b2:	462b      	mov	r3, r5
   ba1b4:	4649      	mov	r1, r9
   ba1b6:	4640      	mov	r0, r8
   ba1b8:	f7fc f82c 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   ba1bc:	4620      	mov	r0, r4
   ba1be:	f7ff fda5 	bl	b9d0c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   ba1c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba1c6:	a901      	add	r1, sp, #4
   ba1c8:	f7ff ff0e 	bl	b9fe8 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   ba1cc:	4620      	mov	r0, r4
   ba1ce:	f7ff fda9 	bl	b9d24 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   ba1d2:	e7bf      	b.n	ba154 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   ba1d4:	4638      	mov	r0, r7
   ba1d6:	f000 fb8d 	bl	ba8f4 <closedir>
    scanDirCompleted = true;
   ba1da:	2301      	movs	r3, #1
   ba1dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   ba1e0:	e79c      	b.n	ba11c <_ZN14SequentialFile7scanDirEv+0x18>
   ba1e2:	bf00      	nop
   ba1e4:	000c0385 	.word	0x000c0385
   ba1e8:	2003e57c 	.word	0x2003e57c
   ba1ec:	000c039a 	.word	0x000c039a
   ba1f0:	000c03b6 	.word	0x000c03b6

000ba1f4 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   ba1f4:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   ba1f6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   ba1fa:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba1fc:	b90b      	cbnz	r3, ba202 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   ba1fe:	f7ff ff81 	bl	ba104 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   ba202:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   ba204:	3001      	adds	r0, #1
   ba206:	63a0      	str	r0, [r4, #56]	; 0x38
}
   ba208:	bd10      	pop	{r4, pc}
	...

000ba20c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   ba20c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   ba20e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   ba212:	4604      	mov	r4, r0
   ba214:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   ba216:	b90b      	cbnz	r3, ba21c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   ba218:	f7ff ff74 	bl	ba104 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   ba21c:	4620      	mov	r0, r4
   ba21e:	f7ff fd75 	bl	b9d0c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   ba222:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   ba224:	6da2      	ldr	r2, [r4, #88]	; 0x58
   ba226:	429a      	cmp	r2, r3
   ba228:	d020      	beq.n	ba26c <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   ba22a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   ba22e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   ba230:	b126      	cbz	r6, ba23c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   ba232:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba234:	4293      	cmp	r3, r2
   ba236:	d00c      	beq.n	ba252 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   ba238:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba23a:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   ba23c:	4620      	mov	r0, r4
   ba23e:	f7ff fd71 	bl	b9d24 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   ba242:	b125      	cbz	r5, ba24e <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   ba244:	490a      	ldr	r1, [pc, #40]	; (ba270 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   ba246:	480b      	ldr	r0, [pc, #44]	; (ba274 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   ba248:	462a      	mov	r2, r5
   ba24a:	f7fb ffe3 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
}
   ba24e:	4628      	mov	r0, r5
   ba250:	bd70      	pop	{r4, r5, r6, pc}
   ba252:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba256:	f7f9 ff22 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba25a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba25c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba25e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   ba260:	685b      	ldr	r3, [r3, #4]
   ba262:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba264:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba268:	6522      	str	r2, [r4, #80]	; 0x50
   ba26a:	e7e6      	b.n	ba23a <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   ba26c:	2500      	movs	r5, #0
   ba26e:	e7e5      	b.n	ba23c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   ba270:	000c03cc 	.word	0x000c03cc
   ba274:	2003e57c 	.word	0x2003e57c

000ba278 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   ba278:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   ba27a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   ba27e:	9101      	str	r1, [sp, #4]
   ba280:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba282:	b90b      	cbnz	r3, ba288 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   ba284:	f7ff ff3e 	bl	ba104 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   ba288:	9b01      	ldr	r3, [sp, #4]
   ba28a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba28c:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   ba28e:	bfb8      	it	lt
   ba290:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   ba292:	4620      	mov	r0, r4
   ba294:	f7ff fd3a 	bl	b9d0c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   ba298:	a901      	add	r1, sp, #4
   ba29a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba29e:	f7ff fea3 	bl	b9fe8 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   ba2a2:	4620      	mov	r0, r4
   ba2a4:	f7ff fd3e 	bl	b9d24 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba2a8:	b002      	add	sp, #8
   ba2aa:	bd10      	pop	{r4, pc}

000ba2ac <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   ba2ac:	b538      	push	{r3, r4, r5, lr}
   ba2ae:	4604      	mov	r4, r0
    queueMutexLock();
   ba2b0:	f7ff fd2c 	bl	b9d0c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba2b4:	f104 0148 	add.w	r1, r4, #72	; 0x48
   ba2b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   ba2bc:	f7ff fe82 	bl	b9fc4 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   ba2c0:	4605      	mov	r5, r0
    queueMutexUnlock();
   ba2c2:	4620      	mov	r0, r4
   ba2c4:	f7ff fd2e 	bl	b9d24 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba2c8:	4628      	mov	r0, r5
   ba2ca:	bd38      	pop	{r3, r4, r5, pc}

000ba2cc <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   ba2cc:	4b01      	ldr	r3, [pc, #4]	; (ba2d4 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   ba2ce:	4a02      	ldr	r2, [pc, #8]	; (ba2d8 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   ba2d0:	601a      	str	r2, [r3, #0]
}
   ba2d2:	4770      	bx	lr
   ba2d4:	2003e57c 	.word	0x2003e57c
   ba2d8:	000c03e9 	.word	0x000c03e9

000ba2dc <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   ba2dc:	4770      	bx	lr

000ba2de <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   ba2de:	6803      	ldr	r3, [r0, #0]
   ba2e0:	685b      	ldr	r3, [r3, #4]
   ba2e2:	4718      	bx	r3

000ba2e4 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   ba2e4:	b510      	push	{r4, lr}
    if (lastUpdate) {
   ba2e6:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   ba2e8:	4604      	mov	r4, r0
    if (lastUpdate) {
   ba2ea:	b133      	cbz	r3, ba2fa <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   ba2ec:	b131      	cbz	r1, ba2fc <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   ba2ee:	6823      	ldr	r3, [r4, #0]
   ba2f0:	4620      	mov	r0, r4
   ba2f2:	689b      	ldr	r3, [r3, #8]
   ba2f4:	4798      	blx	r3
            lastUpdate = 0;
   ba2f6:	2300      	movs	r3, #0
   ba2f8:	61a3      	str	r3, [r4, #24]
        }
    }
}
   ba2fa:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   ba2fc:	f000 f972 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   ba300:	69a3      	ldr	r3, [r4, #24]
   ba302:	1ac0      	subs	r0, r0, r3
   ba304:	69e3      	ldr	r3, [r4, #28]
   ba306:	4298      	cmp	r0, r3
   ba308:	d2f1      	bcs.n	ba2ee <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   ba30a:	e7f6      	b.n	ba2fa <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000ba30c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   ba30c:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   ba30e:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   ba310:	4604      	mov	r4, r0
    if (saveDelayMs) {
   ba312:	b11b      	cbz	r3, ba31c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   ba314:	f000 f966 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   ba318:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   ba31a:	bd10      	pop	{r4, pc}
        save();
   ba31c:	6803      	ldr	r3, [r0, #0]
}
   ba31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   ba322:	689b      	ldr	r3, [r3, #8]
   ba324:	4718      	bx	r3

000ba326 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   ba326:	f000 b925 	b.w	ba574 <os_mutex_recursive_unlock>

000ba32a <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   ba32a:	b510      	push	{r4, lr}
   ba32c:	4604      	mov	r4, r0
   ba32e:	3004      	adds	r0, #4
   ba330:	f7fa ff5e 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   ba334:	6823      	ldr	r3, [r4, #0]
   ba336:	68e1      	ldr	r1, [r4, #12]
   ba338:	695b      	ldr	r3, [r3, #20]
   ba33a:	4620      	mov	r0, r4
   ba33c:	4798      	blx	r3
   ba33e:	b918      	cbnz	r0, ba348 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   ba340:	6823      	ldr	r3, [r4, #0]
   ba342:	4620      	mov	r0, r4
   ba344:	699b      	ldr	r3, [r3, #24]
   ba346:	4798      	blx	r3
      { _M_device.unlock(); }
   ba348:	6860      	ldr	r0, [r4, #4]
   ba34a:	f7ff ffec 	bl	ba326 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   ba34e:	2001      	movs	r0, #1
   ba350:	bd10      	pop	{r4, pc}
	...

000ba354 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   ba354:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba356:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   ba35a:	4f18      	ldr	r7, [pc, #96]	; (ba3bc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   ba35c:	4e18      	ldr	r6, [pc, #96]	; (ba3c0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   ba35e:	4d19      	ldr	r5, [pc, #100]	; (ba3c4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   ba360:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   ba362:	42a0      	cmp	r0, r4
   ba364:	d00c      	beq.n	ba380 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   ba366:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   ba36a:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   ba36c:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   ba370:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   ba372:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   ba374:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   ba378:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   ba37c:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   ba37e:	e7f0      	b.n	ba362 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   ba380:	f001 0403 	and.w	r4, r1, #3
   ba384:	4404      	add	r4, r0
    k = 0;
   ba386:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   ba388:	42a0      	cmp	r0, r4
   ba38a:	d004      	beq.n	ba396 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   ba38c:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   ba390:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   ba394:	e7f8      	b.n	ba388 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   ba396:	4809      	ldr	r0, [pc, #36]	; (ba3bc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   ba398:	4343      	muls	r3, r0
        k *= 0x1b873593;
   ba39a:	4809      	ldr	r0, [pc, #36]	; (ba3c0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   ba39c:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   ba3a0:	404a      	eors	r2, r1
        k *= 0x1b873593;
   ba3a2:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   ba3a4:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   ba3a6:	4b08      	ldr	r3, [pc, #32]	; (ba3c8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   ba3a8:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   ba3ac:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   ba3ae:	4b07      	ldr	r3, [pc, #28]	; (ba3cc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   ba3b0:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   ba3b4:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   ba3b6:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   ba3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba3bc:	cc9e2d51 	.word	0xcc9e2d51
   ba3c0:	1b873593 	.word	0x1b873593
   ba3c4:	e6546b64 	.word	0xe6546b64
   ba3c8:	85ebca6b 	.word	0x85ebca6b
   ba3cc:	c2b2ae35 	.word	0xc2b2ae35

000ba3d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   ba3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba3d2:	4604      	mov	r4, r0
      { _M_device.lock(); }
   ba3d4:	3004      	adds	r0, #4
   ba3d6:	f7fa ff0b 	bl	b51f0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   ba3da:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   ba3dc:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   ba3de:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   ba3e0:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   ba3e2:	68a6      	ldr	r6, [r4, #8]
   ba3e4:	4a05      	ldr	r2, [pc, #20]	; (ba3fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   ba3e6:	88f1      	ldrh	r1, [r6, #6]
   ba3e8:	4630      	mov	r0, r6
   ba3ea:	f7ff ffb3 	bl	ba354 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   ba3ee:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   ba3f0:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   ba3f2:	6860      	ldr	r0, [r4, #4]
   ba3f4:	f7ff ff97 	bl	ba326 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   ba3f8:	4628      	mov	r0, r5
   ba3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba3fc:	851c2a3f 	.word	0x851c2a3f

000ba400 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   ba400:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba402:	460d      	mov	r5, r1
   ba404:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   ba406:	f7ff ffe3 	bl	ba3d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   ba40a:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   ba40c:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   ba40e:	d923      	bls.n	ba458 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   ba410:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   ba412:	6922      	ldr	r2, [r4, #16]
   ba414:	6819      	ldr	r1, [r3, #0]
   ba416:	4291      	cmp	r1, r2
   ba418:	d11f      	bne.n	ba45a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   ba41a:	8899      	ldrh	r1, [r3, #4]
   ba41c:	8aa2      	ldrh	r2, [r4, #20]
   ba41e:	4291      	cmp	r1, r2
   ba420:	d11b      	bne.n	ba45a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   ba422:	88d9      	ldrh	r1, [r3, #6]
   ba424:	b2aa      	uxth	r2, r5
   ba426:	4291      	cmp	r1, r2
   ba428:	d817      	bhi.n	ba45a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   ba42a:	689a      	ldr	r2, [r3, #8]
   ba42c:	4282      	cmp	r2, r0
   ba42e:	d114      	bne.n	ba45a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   ba430:	68e2      	ldr	r2, [r4, #12]
   ba432:	42aa      	cmp	r2, r5
   ba434:	d905      	bls.n	ba442 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   ba436:	2100      	movs	r1, #0
   ba438:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   ba43a:	68e2      	ldr	r2, [r4, #12]
   ba43c:	3501      	adds	r5, #1
   ba43e:	42aa      	cmp	r2, r5
   ba440:	d8fa      	bhi.n	ba438 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   ba442:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   ba446:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   ba448:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   ba44a:	68a5      	ldr	r5, [r4, #8]
   ba44c:	f7ff ffc0 	bl	ba3d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   ba450:	60a8      	str	r0, [r5, #8]
        isValid = true;
   ba452:	2001      	movs	r0, #1
}
   ba454:	b002      	add	sp, #8
   ba456:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   ba458:	b19d      	cbz	r5, ba482 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   ba45a:	68a1      	ldr	r1, [r4, #8]
   ba45c:	680a      	ldr	r2, [r1, #0]
   ba45e:	b192      	cbz	r2, ba486 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   ba460:	6888      	ldr	r0, [r1, #8]
   ba462:	888b      	ldrh	r3, [r1, #4]
   ba464:	9001      	str	r0, [sp, #4]
   ba466:	88c9      	ldrh	r1, [r1, #6]
   ba468:	4808      	ldr	r0, [pc, #32]	; (ba48c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   ba46a:	9100      	str	r1, [sp, #0]
   ba46c:	4908      	ldr	r1, [pc, #32]	; (ba490 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   ba46e:	f7fb fed1 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   ba472:	e9cd 5600 	strd	r5, r6, [sp]
   ba476:	8aa3      	ldrh	r3, [r4, #20]
   ba478:	6922      	ldr	r2, [r4, #16]
   ba47a:	4906      	ldr	r1, [pc, #24]	; (ba494 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   ba47c:	4803      	ldr	r0, [pc, #12]	; (ba48c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   ba47e:	f7fb fec9 	bl	b6214 <_ZNK5spark6Logger5traceEPKcz>
   ba482:	2000      	movs	r0, #0
   ba484:	e7e6      	b.n	ba454 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   ba486:	4610      	mov	r0, r2
   ba488:	e7e4      	b.n	ba454 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   ba48a:	bf00      	nop
   ba48c:	2003e658 	.word	0x2003e658
   ba490:	000c040c 	.word	0x000c040c
   ba494:	000c043d 	.word	0x000c043d

000ba498 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   ba498:	b538      	push	{r3, r4, r5, lr}
   ba49a:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   ba49c:	68c2      	ldr	r2, [r0, #12]
   ba49e:	6880      	ldr	r0, [r0, #8]
   ba4a0:	2100      	movs	r1, #0
   ba4a2:	f004 fb7b 	bl	beb9c <memset>
    savedDataHeader->magic = savedDataMagic;
   ba4a6:	68a3      	ldr	r3, [r4, #8]
   ba4a8:	6922      	ldr	r2, [r4, #16]
   ba4aa:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   ba4ac:	68a3      	ldr	r3, [r4, #8]
   ba4ae:	8aa2      	ldrh	r2, [r4, #20]
   ba4b0:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   ba4b2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   ba4b6:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   ba4b8:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   ba4ba:	68a5      	ldr	r5, [r4, #8]
   ba4bc:	f7ff ff88 	bl	ba3d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   ba4c0:	60a8      	str	r0, [r5, #8]
}
   ba4c2:	bd38      	pop	{r3, r4, r5, pc}

000ba4c4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   ba4c4:	b508      	push	{r3, lr}
   ba4c6:	4b02      	ldr	r3, [pc, #8]	; (ba4d0 <cellular_signal+0xc>)
   ba4c8:	681b      	ldr	r3, [r3, #0]
   ba4ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba4cc:	9301      	str	r3, [sp, #4]
   ba4ce:	bd08      	pop	{r3, pc}
   ba4d0:	00030274 	.word	0x00030274

000ba4d4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   ba4d4:	b508      	push	{r3, lr}
   ba4d6:	4b02      	ldr	r3, [pc, #8]	; (ba4e0 <os_thread_create+0xc>)
   ba4d8:	681b      	ldr	r3, [r3, #0]
   ba4da:	685b      	ldr	r3, [r3, #4]
   ba4dc:	9301      	str	r3, [sp, #4]
   ba4de:	bd08      	pop	{r3, pc}
   ba4e0:	00030248 	.word	0x00030248

000ba4e4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   ba4e4:	b508      	push	{r3, lr}
   ba4e6:	4b02      	ldr	r3, [pc, #8]	; (ba4f0 <os_thread_is_current+0xc>)
   ba4e8:	681b      	ldr	r3, [r3, #0]
   ba4ea:	689b      	ldr	r3, [r3, #8]
   ba4ec:	9301      	str	r3, [sp, #4]
   ba4ee:	bd08      	pop	{r3, pc}
   ba4f0:	00030248 	.word	0x00030248

000ba4f4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   ba4f4:	b508      	push	{r3, lr}
   ba4f6:	4b02      	ldr	r3, [pc, #8]	; (ba500 <os_thread_join+0xc>)
   ba4f8:	681b      	ldr	r3, [r3, #0]
   ba4fa:	691b      	ldr	r3, [r3, #16]
   ba4fc:	9301      	str	r3, [sp, #4]
   ba4fe:	bd08      	pop	{r3, pc}
   ba500:	00030248 	.word	0x00030248

000ba504 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   ba504:	b508      	push	{r3, lr}
   ba506:	4b02      	ldr	r3, [pc, #8]	; (ba510 <os_thread_cleanup+0xc>)
   ba508:	681b      	ldr	r3, [r3, #0]
   ba50a:	695b      	ldr	r3, [r3, #20]
   ba50c:	9301      	str	r3, [sp, #4]
   ba50e:	bd08      	pop	{r3, pc}
   ba510:	00030248 	.word	0x00030248

000ba514 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   ba514:	b508      	push	{r3, lr}
   ba516:	4b02      	ldr	r3, [pc, #8]	; (ba520 <os_mutex_create+0xc>)
   ba518:	681b      	ldr	r3, [r3, #0]
   ba51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba51c:	9301      	str	r3, [sp, #4]
   ba51e:	bd08      	pop	{r3, pc}
   ba520:	00030248 	.word	0x00030248

000ba524 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   ba524:	b508      	push	{r3, lr}
   ba526:	4b02      	ldr	r3, [pc, #8]	; (ba530 <os_mutex_lock+0xc>)
   ba528:	681b      	ldr	r3, [r3, #0]
   ba52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   ba52c:	9301      	str	r3, [sp, #4]
   ba52e:	bd08      	pop	{r3, pc}
   ba530:	00030248 	.word	0x00030248

000ba534 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   ba534:	b508      	push	{r3, lr}
   ba536:	4b02      	ldr	r3, [pc, #8]	; (ba540 <os_mutex_unlock+0xc>)
   ba538:	681b      	ldr	r3, [r3, #0]
   ba53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba53c:	9301      	str	r3, [sp, #4]
   ba53e:	bd08      	pop	{r3, pc}
   ba540:	00030248 	.word	0x00030248

000ba544 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   ba544:	b508      	push	{r3, lr}
   ba546:	4b02      	ldr	r3, [pc, #8]	; (ba550 <os_mutex_recursive_create+0xc>)
   ba548:	681b      	ldr	r3, [r3, #0]
   ba54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba54c:	9301      	str	r3, [sp, #4]
   ba54e:	bd08      	pop	{r3, pc}
   ba550:	00030248 	.word	0x00030248

000ba554 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   ba554:	b508      	push	{r3, lr}
   ba556:	4b02      	ldr	r3, [pc, #8]	; (ba560 <os_mutex_recursive_destroy+0xc>)
   ba558:	681b      	ldr	r3, [r3, #0]
   ba55a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba55c:	9301      	str	r3, [sp, #4]
   ba55e:	bd08      	pop	{r3, pc}
   ba560:	00030248 	.word	0x00030248

000ba564 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   ba564:	b508      	push	{r3, lr}
   ba566:	4b02      	ldr	r3, [pc, #8]	; (ba570 <os_mutex_recursive_lock+0xc>)
   ba568:	681b      	ldr	r3, [r3, #0]
   ba56a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba56c:	9301      	str	r3, [sp, #4]
   ba56e:	bd08      	pop	{r3, pc}
   ba570:	00030248 	.word	0x00030248

000ba574 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   ba574:	b508      	push	{r3, lr}
   ba576:	4b02      	ldr	r3, [pc, #8]	; (ba580 <os_mutex_recursive_unlock+0xc>)
   ba578:	681b      	ldr	r3, [r3, #0]
   ba57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba57c:	9301      	str	r3, [sp, #4]
   ba57e:	bd08      	pop	{r3, pc}
   ba580:	00030248 	.word	0x00030248

000ba584 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   ba584:	b508      	push	{r3, lr}
   ba586:	4b02      	ldr	r3, [pc, #8]	; (ba590 <os_thread_exit+0xc>)
   ba588:	681b      	ldr	r3, [r3, #0]
   ba58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   ba58c:	9301      	str	r3, [sp, #4]
   ba58e:	bd08      	pop	{r3, pc}
   ba590:	00030248 	.word	0x00030248

000ba594 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   ba594:	b508      	push	{r3, lr}
   ba596:	4b02      	ldr	r3, [pc, #8]	; (ba5a0 <HAL_Core_Runtime_Info+0xc>)
   ba598:	681b      	ldr	r3, [r3, #0]
   ba59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba59c:	9301      	str	r3, [sp, #4]
   ba59e:	bd08      	pop	{r3, pc}
   ba5a0:	00030234 	.word	0x00030234

000ba5a4 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   ba5a4:	b508      	push	{r3, lr}
   ba5a6:	4b02      	ldr	r3, [pc, #8]	; (ba5b0 <HAL_Feature_Set+0xc>)
   ba5a8:	681b      	ldr	r3, [r3, #0]
   ba5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   ba5ac:	9301      	str	r3, [sp, #4]
   ba5ae:	bd08      	pop	{r3, pc}
   ba5b0:	00030234 	.word	0x00030234

000ba5b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   ba5b4:	b508      	push	{r3, lr}
   ba5b6:	4b02      	ldr	r3, [pc, #8]	; (ba5c0 <HAL_RNG_GetRandomNumber+0xc>)
   ba5b8:	681b      	ldr	r3, [r3, #0]
   ba5ba:	685b      	ldr	r3, [r3, #4]
   ba5bc:	9301      	str	r3, [sp, #4]
   ba5be:	bd08      	pop	{r3, pc}
   ba5c0:	00030218 	.word	0x00030218

000ba5c4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   ba5c4:	b508      	push	{r3, lr}
   ba5c6:	4b02      	ldr	r3, [pc, #8]	; (ba5d0 <HAL_Delay_Milliseconds+0xc>)
   ba5c8:	681b      	ldr	r3, [r3, #0]
   ba5ca:	689b      	ldr	r3, [r3, #8]
   ba5cc:	9301      	str	r3, [sp, #4]
   ba5ce:	bd08      	pop	{r3, pc}
   ba5d0:	00030218 	.word	0x00030218

000ba5d4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   ba5d4:	b508      	push	{r3, lr}
   ba5d6:	4b02      	ldr	r3, [pc, #8]	; (ba5e0 <HAL_Delay_Microseconds+0xc>)
   ba5d8:	681b      	ldr	r3, [r3, #0]
   ba5da:	68db      	ldr	r3, [r3, #12]
   ba5dc:	9301      	str	r3, [sp, #4]
   ba5de:	bd08      	pop	{r3, pc}
   ba5e0:	00030218 	.word	0x00030218

000ba5e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   ba5e4:	b508      	push	{r3, lr}
   ba5e6:	4b02      	ldr	r3, [pc, #8]	; (ba5f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   ba5e8:	681b      	ldr	r3, [r3, #0]
   ba5ea:	695b      	ldr	r3, [r3, #20]
   ba5ec:	9301      	str	r3, [sp, #4]
   ba5ee:	bd08      	pop	{r3, pc}
   ba5f0:	00030218 	.word	0x00030218

000ba5f4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   ba5f4:	b508      	push	{r3, lr}
   ba5f6:	4b02      	ldr	r3, [pc, #8]	; (ba600 <hal_rtc_time_is_valid+0xc>)
   ba5f8:	681b      	ldr	r3, [r3, #0]
   ba5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba5fc:	9301      	str	r3, [sp, #4]
   ba5fe:	bd08      	pop	{r3, pc}
   ba600:	00030218 	.word	0x00030218

000ba604 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   ba604:	b508      	push	{r3, lr}
   ba606:	4b02      	ldr	r3, [pc, #8]	; (ba610 <hal_timer_millis+0xc>)
   ba608:	681b      	ldr	r3, [r3, #0]
   ba60a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   ba60c:	9301      	str	r3, [sp, #4]
   ba60e:	bd08      	pop	{r3, pc}
   ba610:	00030218 	.word	0x00030218

000ba614 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   ba614:	b508      	push	{r3, lr}
   ba616:	4b02      	ldr	r3, [pc, #8]	; (ba620 <hal_rtc_get_time+0xc>)
   ba618:	681b      	ldr	r3, [r3, #0]
   ba61a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   ba61c:	9301      	str	r3, [sp, #4]
   ba61e:	bd08      	pop	{r3, pc}
   ba620:	00030218 	.word	0x00030218

000ba624 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   ba624:	b508      	push	{r3, lr}
   ba626:	4b02      	ldr	r3, [pc, #8]	; (ba630 <hal_rtc_set_time+0xc>)
   ba628:	681b      	ldr	r3, [r3, #0]
   ba62a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   ba62c:	9301      	str	r3, [sp, #4]
   ba62e:	bd08      	pop	{r3, pc}
   ba630:	00030218 	.word	0x00030218

000ba634 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   ba634:	b508      	push	{r3, lr}
   ba636:	4b02      	ldr	r3, [pc, #8]	; (ba640 <HAL_Validate_Pin_Function+0xc>)
   ba638:	681b      	ldr	r3, [r3, #0]
   ba63a:	685b      	ldr	r3, [r3, #4]
   ba63c:	9301      	str	r3, [sp, #4]
   ba63e:	bd08      	pop	{r3, pc}
   ba640:	0003022c 	.word	0x0003022c

000ba644 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   ba644:	b508      	push	{r3, lr}
   ba646:	4b02      	ldr	r3, [pc, #8]	; (ba650 <HAL_Pin_Mode+0xc>)
   ba648:	681b      	ldr	r3, [r3, #0]
   ba64a:	689b      	ldr	r3, [r3, #8]
   ba64c:	9301      	str	r3, [sp, #4]
   ba64e:	bd08      	pop	{r3, pc}
   ba650:	0003022c 	.word	0x0003022c

000ba654 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   ba654:	b508      	push	{r3, lr}
   ba656:	4b02      	ldr	r3, [pc, #8]	; (ba660 <HAL_Get_Pin_Mode+0xc>)
   ba658:	681b      	ldr	r3, [r3, #0]
   ba65a:	68db      	ldr	r3, [r3, #12]
   ba65c:	9301      	str	r3, [sp, #4]
   ba65e:	bd08      	pop	{r3, pc}
   ba660:	0003022c 	.word	0x0003022c

000ba664 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   ba664:	b508      	push	{r3, lr}
   ba666:	4b02      	ldr	r3, [pc, #8]	; (ba670 <HAL_GPIO_Write+0xc>)
   ba668:	681b      	ldr	r3, [r3, #0]
   ba66a:	691b      	ldr	r3, [r3, #16]
   ba66c:	9301      	str	r3, [sp, #4]
   ba66e:	bd08      	pop	{r3, pc}
   ba670:	0003022c 	.word	0x0003022c

000ba674 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   ba674:	b508      	push	{r3, lr}
   ba676:	4b02      	ldr	r3, [pc, #8]	; (ba680 <HAL_GPIO_Read+0xc>)
   ba678:	681b      	ldr	r3, [r3, #0]
   ba67a:	695b      	ldr	r3, [r3, #20]
   ba67c:	9301      	str	r3, [sp, #4]
   ba67e:	bd08      	pop	{r3, pc}
   ba680:	0003022c 	.word	0x0003022c

000ba684 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   ba684:	b508      	push	{r3, lr}
   ba686:	4b02      	ldr	r3, [pc, #8]	; (ba690 <HAL_Interrupts_Attach+0xc>)
   ba688:	681b      	ldr	r3, [r3, #0]
   ba68a:	699b      	ldr	r3, [r3, #24]
   ba68c:	9301      	str	r3, [sp, #4]
   ba68e:	bd08      	pop	{r3, pc}
   ba690:	0003022c 	.word	0x0003022c

000ba694 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   ba694:	b508      	push	{r3, lr}
   ba696:	4b02      	ldr	r3, [pc, #8]	; (ba6a0 <HAL_Interrupts_Detach+0xc>)
   ba698:	681b      	ldr	r3, [r3, #0]
   ba69a:	69db      	ldr	r3, [r3, #28]
   ba69c:	9301      	str	r3, [sp, #4]
   ba69e:	bd08      	pop	{r3, pc}
   ba6a0:	0003022c 	.word	0x0003022c

000ba6a4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   ba6a4:	b508      	push	{r3, lr}
   ba6a6:	4b02      	ldr	r3, [pc, #8]	; (ba6b0 <hal_adc_read+0xc>)
   ba6a8:	681b      	ldr	r3, [r3, #0]
   ba6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba6ac:	9301      	str	r3, [sp, #4]
   ba6ae:	bd08      	pop	{r3, pc}
   ba6b0:	0003022c 	.word	0x0003022c

000ba6b4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   ba6b4:	b508      	push	{r3, lr}
   ba6b6:	4b02      	ldr	r3, [pc, #8]	; (ba6c0 <hal_i2c_begin+0xc>)
   ba6b8:	681b      	ldr	r3, [r3, #0]
   ba6ba:	68db      	ldr	r3, [r3, #12]
   ba6bc:	9301      	str	r3, [sp, #4]
   ba6be:	bd08      	pop	{r3, pc}
   ba6c0:	00030228 	.word	0x00030228

000ba6c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   ba6c4:	b508      	push	{r3, lr}
   ba6c6:	4b02      	ldr	r3, [pc, #8]	; (ba6d0 <hal_i2c_begin_transmission+0xc>)
   ba6c8:	681b      	ldr	r3, [r3, #0]
   ba6ca:	699b      	ldr	r3, [r3, #24]
   ba6cc:	9301      	str	r3, [sp, #4]
   ba6ce:	bd08      	pop	{r3, pc}
   ba6d0:	00030228 	.word	0x00030228

000ba6d4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   ba6d4:	b508      	push	{r3, lr}
   ba6d6:	4b02      	ldr	r3, [pc, #8]	; (ba6e0 <hal_i2c_end_transmission+0xc>)
   ba6d8:	681b      	ldr	r3, [r3, #0]
   ba6da:	69db      	ldr	r3, [r3, #28]
   ba6dc:	9301      	str	r3, [sp, #4]
   ba6de:	bd08      	pop	{r3, pc}
   ba6e0:	00030228 	.word	0x00030228

000ba6e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   ba6e4:	b508      	push	{r3, lr}
   ba6e6:	4b02      	ldr	r3, [pc, #8]	; (ba6f0 <hal_i2c_write+0xc>)
   ba6e8:	681b      	ldr	r3, [r3, #0]
   ba6ea:	6a1b      	ldr	r3, [r3, #32]
   ba6ec:	9301      	str	r3, [sp, #4]
   ba6ee:	bd08      	pop	{r3, pc}
   ba6f0:	00030228 	.word	0x00030228

000ba6f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   ba6f4:	b508      	push	{r3, lr}
   ba6f6:	4b02      	ldr	r3, [pc, #8]	; (ba700 <hal_i2c_available+0xc>)
   ba6f8:	681b      	ldr	r3, [r3, #0]
   ba6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba6fc:	9301      	str	r3, [sp, #4]
   ba6fe:	bd08      	pop	{r3, pc}
   ba700:	00030228 	.word	0x00030228

000ba704 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   ba704:	b508      	push	{r3, lr}
   ba706:	4b02      	ldr	r3, [pc, #8]	; (ba710 <hal_i2c_read+0xc>)
   ba708:	681b      	ldr	r3, [r3, #0]
   ba70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba70c:	9301      	str	r3, [sp, #4]
   ba70e:	bd08      	pop	{r3, pc}
   ba710:	00030228 	.word	0x00030228

000ba714 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   ba714:	b508      	push	{r3, lr}
   ba716:	4b02      	ldr	r3, [pc, #8]	; (ba720 <hal_i2c_peek+0xc>)
   ba718:	681b      	ldr	r3, [r3, #0]
   ba71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba71c:	9301      	str	r3, [sp, #4]
   ba71e:	bd08      	pop	{r3, pc}
   ba720:	00030228 	.word	0x00030228

000ba724 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   ba724:	b508      	push	{r3, lr}
   ba726:	4b02      	ldr	r3, [pc, #8]	; (ba730 <hal_i2c_flush+0xc>)
   ba728:	681b      	ldr	r3, [r3, #0]
   ba72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba72c:	9301      	str	r3, [sp, #4]
   ba72e:	bd08      	pop	{r3, pc}
   ba730:	00030228 	.word	0x00030228

000ba734 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   ba734:	b508      	push	{r3, lr}
   ba736:	4b02      	ldr	r3, [pc, #8]	; (ba740 <hal_i2c_is_enabled+0xc>)
   ba738:	681b      	ldr	r3, [r3, #0]
   ba73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba73c:	9301      	str	r3, [sp, #4]
   ba73e:	bd08      	pop	{r3, pc}
   ba740:	00030228 	.word	0x00030228

000ba744 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   ba744:	b508      	push	{r3, lr}
   ba746:	4b02      	ldr	r3, [pc, #8]	; (ba750 <hal_i2c_init+0xc>)
   ba748:	681b      	ldr	r3, [r3, #0]
   ba74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba74c:	9301      	str	r3, [sp, #4]
   ba74e:	bd08      	pop	{r3, pc}
   ba750:	00030228 	.word	0x00030228

000ba754 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   ba754:	b508      	push	{r3, lr}
   ba756:	4b02      	ldr	r3, [pc, #8]	; (ba760 <hal_i2c_lock+0xc>)
   ba758:	681b      	ldr	r3, [r3, #0]
   ba75a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba75c:	9301      	str	r3, [sp, #4]
   ba75e:	bd08      	pop	{r3, pc}
   ba760:	00030228 	.word	0x00030228

000ba764 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   ba764:	b508      	push	{r3, lr}
   ba766:	4b02      	ldr	r3, [pc, #8]	; (ba770 <hal_i2c_unlock+0xc>)
   ba768:	681b      	ldr	r3, [r3, #0]
   ba76a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba76c:	9301      	str	r3, [sp, #4]
   ba76e:	bd08      	pop	{r3, pc}
   ba770:	00030228 	.word	0x00030228

000ba774 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   ba774:	b508      	push	{r3, lr}
   ba776:	4b02      	ldr	r3, [pc, #8]	; (ba780 <hal_i2c_request_ex+0xc>)
   ba778:	681b      	ldr	r3, [r3, #0]
   ba77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba77c:	9301      	str	r3, [sp, #4]
   ba77e:	bd08      	pop	{r3, pc}
   ba780:	00030228 	.word	0x00030228

000ba784 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   ba784:	b508      	push	{r3, lr}
   ba786:	4b02      	ldr	r3, [pc, #8]	; (ba790 <inet_inet_ntop+0xc>)
   ba788:	681b      	ldr	r3, [r3, #0]
   ba78a:	695b      	ldr	r3, [r3, #20]
   ba78c:	9301      	str	r3, [sp, #4]
   ba78e:	bd08      	pop	{r3, pc}
   ba790:	00030264 	.word	0x00030264

000ba794 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   ba794:	b508      	push	{r3, lr}
   ba796:	4b02      	ldr	r3, [pc, #8]	; (ba7a0 <netdb_freeaddrinfo+0xc>)
   ba798:	681b      	ldr	r3, [r3, #0]
   ba79a:	689b      	ldr	r3, [r3, #8]
   ba79c:	9301      	str	r3, [sp, #4]
   ba79e:	bd08      	pop	{r3, pc}
   ba7a0:	00030268 	.word	0x00030268

000ba7a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   ba7a4:	b508      	push	{r3, lr}
   ba7a6:	4b02      	ldr	r3, [pc, #8]	; (ba7b0 <netdb_getaddrinfo+0xc>)
   ba7a8:	681b      	ldr	r3, [r3, #0]
   ba7aa:	68db      	ldr	r3, [r3, #12]
   ba7ac:	9301      	str	r3, [sp, #4]
   ba7ae:	bd08      	pop	{r3, pc}
   ba7b0:	00030268 	.word	0x00030268

000ba7b4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   ba7b4:	b508      	push	{r3, lr}
   ba7b6:	4b02      	ldr	r3, [pc, #8]	; (ba7c0 <hal_spi_begin+0xc>)
   ba7b8:	681b      	ldr	r3, [r3, #0]
   ba7ba:	681b      	ldr	r3, [r3, #0]
   ba7bc:	9301      	str	r3, [sp, #4]
   ba7be:	bd08      	pop	{r3, pc}
   ba7c0:	00030230 	.word	0x00030230

000ba7c4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   ba7c4:	b508      	push	{r3, lr}
   ba7c6:	4b02      	ldr	r3, [pc, #8]	; (ba7d0 <hal_spi_end+0xc>)
   ba7c8:	681b      	ldr	r3, [r3, #0]
   ba7ca:	685b      	ldr	r3, [r3, #4]
   ba7cc:	9301      	str	r3, [sp, #4]
   ba7ce:	bd08      	pop	{r3, pc}
   ba7d0:	00030230 	.word	0x00030230

000ba7d4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   ba7d4:	b508      	push	{r3, lr}
   ba7d6:	4b02      	ldr	r3, [pc, #8]	; (ba7e0 <hal_spi_transfer+0xc>)
   ba7d8:	681b      	ldr	r3, [r3, #0]
   ba7da:	695b      	ldr	r3, [r3, #20]
   ba7dc:	9301      	str	r3, [sp, #4]
   ba7de:	bd08      	pop	{r3, pc}
   ba7e0:	00030230 	.word	0x00030230

000ba7e4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   ba7e4:	b508      	push	{r3, lr}
   ba7e6:	4b02      	ldr	r3, [pc, #8]	; (ba7f0 <hal_spi_init+0xc>)
   ba7e8:	681b      	ldr	r3, [r3, #0]
   ba7ea:	69db      	ldr	r3, [r3, #28]
   ba7ec:	9301      	str	r3, [sp, #4]
   ba7ee:	bd08      	pop	{r3, pc}
   ba7f0:	00030230 	.word	0x00030230

000ba7f4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   ba7f4:	b508      	push	{r3, lr}
   ba7f6:	4b02      	ldr	r3, [pc, #8]	; (ba800 <hal_spi_is_enabled+0xc>)
   ba7f8:	681b      	ldr	r3, [r3, #0]
   ba7fa:	6a1b      	ldr	r3, [r3, #32]
   ba7fc:	9301      	str	r3, [sp, #4]
   ba7fe:	bd08      	pop	{r3, pc}
   ba800:	00030230 	.word	0x00030230

000ba804 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   ba804:	b508      	push	{r3, lr}
   ba806:	4b02      	ldr	r3, [pc, #8]	; (ba810 <hal_spi_info+0xc>)
   ba808:	681b      	ldr	r3, [r3, #0]
   ba80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba80c:	9301      	str	r3, [sp, #4]
   ba80e:	bd08      	pop	{r3, pc}
   ba810:	00030230 	.word	0x00030230

000ba814 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   ba814:	b508      	push	{r3, lr}
   ba816:	4b02      	ldr	r3, [pc, #8]	; (ba820 <hal_spi_set_settings+0xc>)
   ba818:	681b      	ldr	r3, [r3, #0]
   ba81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba81c:	9301      	str	r3, [sp, #4]
   ba81e:	bd08      	pop	{r3, pc}
   ba820:	00030230 	.word	0x00030230

000ba824 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   ba824:	b508      	push	{r3, lr}
   ba826:	4b02      	ldr	r3, [pc, #8]	; (ba830 <hal_spi_acquire+0xc>)
   ba828:	681b      	ldr	r3, [r3, #0]
   ba82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba82c:	9301      	str	r3, [sp, #4]
   ba82e:	bd08      	pop	{r3, pc}
   ba830:	00030230 	.word	0x00030230

000ba834 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   ba834:	b508      	push	{r3, lr}
   ba836:	4b02      	ldr	r3, [pc, #8]	; (ba840 <hal_spi_release+0xc>)
   ba838:	681b      	ldr	r3, [r3, #0]
   ba83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba83c:	9301      	str	r3, [sp, #4]
   ba83e:	bd08      	pop	{r3, pc}
   ba840:	00030230 	.word	0x00030230

000ba844 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   ba844:	b508      	push	{r3, lr}
   ba846:	4b02      	ldr	r3, [pc, #8]	; (ba850 <_open+0xc>)
   ba848:	681b      	ldr	r3, [r3, #0]
   ba84a:	681b      	ldr	r3, [r3, #0]
   ba84c:	9301      	str	r3, [sp, #4]
   ba84e:	bd08      	pop	{r3, pc}
   ba850:	00030284 	.word	0x00030284

000ba854 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   ba854:	b508      	push	{r3, lr}
   ba856:	4b02      	ldr	r3, [pc, #8]	; (ba860 <_write+0xc>)
   ba858:	681b      	ldr	r3, [r3, #0]
   ba85a:	685b      	ldr	r3, [r3, #4]
   ba85c:	9301      	str	r3, [sp, #4]
   ba85e:	bd08      	pop	{r3, pc}
   ba860:	00030284 	.word	0x00030284

000ba864 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   ba864:	b508      	push	{r3, lr}
   ba866:	4b02      	ldr	r3, [pc, #8]	; (ba870 <_read+0xc>)
   ba868:	681b      	ldr	r3, [r3, #0]
   ba86a:	689b      	ldr	r3, [r3, #8]
   ba86c:	9301      	str	r3, [sp, #4]
   ba86e:	bd08      	pop	{r3, pc}
   ba870:	00030284 	.word	0x00030284

000ba874 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   ba874:	b508      	push	{r3, lr}
   ba876:	4b02      	ldr	r3, [pc, #8]	; (ba880 <_close+0xc>)
   ba878:	681b      	ldr	r3, [r3, #0]
   ba87a:	68db      	ldr	r3, [r3, #12]
   ba87c:	9301      	str	r3, [sp, #4]
   ba87e:	bd08      	pop	{r3, pc}
   ba880:	00030284 	.word	0x00030284

000ba884 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   ba884:	b508      	push	{r3, lr}
   ba886:	4b02      	ldr	r3, [pc, #8]	; (ba890 <_fstat+0xc>)
   ba888:	681b      	ldr	r3, [r3, #0]
   ba88a:	695b      	ldr	r3, [r3, #20]
   ba88c:	9301      	str	r3, [sp, #4]
   ba88e:	bd08      	pop	{r3, pc}
   ba890:	00030284 	.word	0x00030284

000ba894 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   ba894:	b508      	push	{r3, lr}
   ba896:	4b02      	ldr	r3, [pc, #8]	; (ba8a0 <_lseek+0xc>)
   ba898:	681b      	ldr	r3, [r3, #0]
   ba89a:	6a1b      	ldr	r3, [r3, #32]
   ba89c:	9301      	str	r3, [sp, #4]
   ba89e:	bd08      	pop	{r3, pc}
   ba8a0:	00030284 	.word	0x00030284

000ba8a4 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   ba8a4:	b508      	push	{r3, lr}
   ba8a6:	4b02      	ldr	r3, [pc, #8]	; (ba8b0 <stat+0xc>)
   ba8a8:	681b      	ldr	r3, [r3, #0]
   ba8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba8ac:	9301      	str	r3, [sp, #4]
   ba8ae:	bd08      	pop	{r3, pc}
   ba8b0:	00030284 	.word	0x00030284

000ba8b4 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   ba8b4:	b508      	push	{r3, lr}
   ba8b6:	4b02      	ldr	r3, [pc, #8]	; (ba8c0 <mkdir+0xc>)
   ba8b8:	681b      	ldr	r3, [r3, #0]
   ba8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba8bc:	9301      	str	r3, [sp, #4]
   ba8be:	bd08      	pop	{r3, pc}
   ba8c0:	00030284 	.word	0x00030284

000ba8c4 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   ba8c4:	b508      	push	{r3, lr}
   ba8c6:	4b02      	ldr	r3, [pc, #8]	; (ba8d0 <_unlink+0xc>)
   ba8c8:	681b      	ldr	r3, [r3, #0]
   ba8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba8cc:	9301      	str	r3, [sp, #4]
   ba8ce:	bd08      	pop	{r3, pc}
   ba8d0:	00030284 	.word	0x00030284

000ba8d4 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   ba8d4:	b508      	push	{r3, lr}
   ba8d6:	4b02      	ldr	r3, [pc, #8]	; (ba8e0 <opendir+0xc>)
   ba8d8:	681b      	ldr	r3, [r3, #0]
   ba8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba8dc:	9301      	str	r3, [sp, #4]
   ba8de:	bd08      	pop	{r3, pc}
   ba8e0:	00030284 	.word	0x00030284

000ba8e4 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   ba8e4:	b508      	push	{r3, lr}
   ba8e6:	4b02      	ldr	r3, [pc, #8]	; (ba8f0 <readdir+0xc>)
   ba8e8:	681b      	ldr	r3, [r3, #0]
   ba8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba8ec:	9301      	str	r3, [sp, #4]
   ba8ee:	bd08      	pop	{r3, pc}
   ba8f0:	00030284 	.word	0x00030284

000ba8f4 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   ba8f4:	b508      	push	{r3, lr}
   ba8f6:	4b02      	ldr	r3, [pc, #8]	; (ba900 <closedir+0xc>)
   ba8f8:	681b      	ldr	r3, [r3, #0]
   ba8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba8fc:	9301      	str	r3, [sp, #4]
   ba8fe:	bd08      	pop	{r3, pc}
   ba900:	00030284 	.word	0x00030284

000ba904 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   ba904:	b508      	push	{r3, lr}
   ba906:	4b02      	ldr	r3, [pc, #8]	; (ba910 <hal_usart_end+0xc>)
   ba908:	681b      	ldr	r3, [r3, #0]
   ba90a:	689b      	ldr	r3, [r3, #8]
   ba90c:	9301      	str	r3, [sp, #4]
   ba90e:	bd08      	pop	{r3, pc}
   ba910:	0003023c 	.word	0x0003023c

000ba914 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   ba914:	b508      	push	{r3, lr}
   ba916:	4b02      	ldr	r3, [pc, #8]	; (ba920 <hal_usart_write+0xc>)
   ba918:	681b      	ldr	r3, [r3, #0]
   ba91a:	68db      	ldr	r3, [r3, #12]
   ba91c:	9301      	str	r3, [sp, #4]
   ba91e:	bd08      	pop	{r3, pc}
   ba920:	0003023c 	.word	0x0003023c

000ba924 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   ba924:	b508      	push	{r3, lr}
   ba926:	4b02      	ldr	r3, [pc, #8]	; (ba930 <hal_usart_available+0xc>)
   ba928:	681b      	ldr	r3, [r3, #0]
   ba92a:	691b      	ldr	r3, [r3, #16]
   ba92c:	9301      	str	r3, [sp, #4]
   ba92e:	bd08      	pop	{r3, pc}
   ba930:	0003023c 	.word	0x0003023c

000ba934 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   ba934:	b508      	push	{r3, lr}
   ba936:	4b02      	ldr	r3, [pc, #8]	; (ba940 <hal_usart_read+0xc>)
   ba938:	681b      	ldr	r3, [r3, #0]
   ba93a:	695b      	ldr	r3, [r3, #20]
   ba93c:	9301      	str	r3, [sp, #4]
   ba93e:	bd08      	pop	{r3, pc}
   ba940:	0003023c 	.word	0x0003023c

000ba944 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   ba944:	b508      	push	{r3, lr}
   ba946:	4b02      	ldr	r3, [pc, #8]	; (ba950 <hal_usart_peek+0xc>)
   ba948:	681b      	ldr	r3, [r3, #0]
   ba94a:	699b      	ldr	r3, [r3, #24]
   ba94c:	9301      	str	r3, [sp, #4]
   ba94e:	bd08      	pop	{r3, pc}
   ba950:	0003023c 	.word	0x0003023c

000ba954 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   ba954:	b508      	push	{r3, lr}
   ba956:	4b02      	ldr	r3, [pc, #8]	; (ba960 <hal_usart_flush+0xc>)
   ba958:	681b      	ldr	r3, [r3, #0]
   ba95a:	69db      	ldr	r3, [r3, #28]
   ba95c:	9301      	str	r3, [sp, #4]
   ba95e:	bd08      	pop	{r3, pc}
   ba960:	0003023c 	.word	0x0003023c

000ba964 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   ba964:	b508      	push	{r3, lr}
   ba966:	4b02      	ldr	r3, [pc, #8]	; (ba970 <hal_usart_is_enabled+0xc>)
   ba968:	681b      	ldr	r3, [r3, #0]
   ba96a:	6a1b      	ldr	r3, [r3, #32]
   ba96c:	9301      	str	r3, [sp, #4]
   ba96e:	bd08      	pop	{r3, pc}
   ba970:	0003023c 	.word	0x0003023c

000ba974 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   ba974:	b508      	push	{r3, lr}
   ba976:	4b02      	ldr	r3, [pc, #8]	; (ba980 <hal_usart_available_data_for_write+0xc>)
   ba978:	681b      	ldr	r3, [r3, #0]
   ba97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba97c:	9301      	str	r3, [sp, #4]
   ba97e:	bd08      	pop	{r3, pc}
   ba980:	0003023c 	.word	0x0003023c

000ba984 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   ba984:	b508      	push	{r3, lr}
   ba986:	4b02      	ldr	r3, [pc, #8]	; (ba990 <hal_usart_begin_config+0xc>)
   ba988:	681b      	ldr	r3, [r3, #0]
   ba98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba98c:	9301      	str	r3, [sp, #4]
   ba98e:	bd08      	pop	{r3, pc}
   ba990:	0003023c 	.word	0x0003023c

000ba994 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   ba994:	b508      	push	{r3, lr}
   ba996:	4b02      	ldr	r3, [pc, #8]	; (ba9a0 <hal_usart_init_ex+0xc>)
   ba998:	681b      	ldr	r3, [r3, #0]
   ba99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba99c:	9301      	str	r3, [sp, #4]
   ba99e:	bd08      	pop	{r3, pc}
   ba9a0:	0003023c 	.word	0x0003023c

000ba9a4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   ba9a4:	b508      	push	{r3, lr}
   ba9a6:	4b02      	ldr	r3, [pc, #8]	; (ba9b0 <HAL_USB_USART_Init+0xc>)
   ba9a8:	681b      	ldr	r3, [r3, #0]
   ba9aa:	681b      	ldr	r3, [r3, #0]
   ba9ac:	9301      	str	r3, [sp, #4]
   ba9ae:	bd08      	pop	{r3, pc}
   ba9b0:	0003024c 	.word	0x0003024c

000ba9b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   ba9b4:	b508      	push	{r3, lr}
   ba9b6:	4b02      	ldr	r3, [pc, #8]	; (ba9c0 <HAL_USB_USART_Begin+0xc>)
   ba9b8:	681b      	ldr	r3, [r3, #0]
   ba9ba:	685b      	ldr	r3, [r3, #4]
   ba9bc:	9301      	str	r3, [sp, #4]
   ba9be:	bd08      	pop	{r3, pc}
   ba9c0:	0003024c 	.word	0x0003024c

000ba9c4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   ba9c4:	b508      	push	{r3, lr}
   ba9c6:	4b02      	ldr	r3, [pc, #8]	; (ba9d0 <HAL_USB_USART_End+0xc>)
   ba9c8:	681b      	ldr	r3, [r3, #0]
   ba9ca:	689b      	ldr	r3, [r3, #8]
   ba9cc:	9301      	str	r3, [sp, #4]
   ba9ce:	bd08      	pop	{r3, pc}
   ba9d0:	0003024c 	.word	0x0003024c

000ba9d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   ba9d4:	b508      	push	{r3, lr}
   ba9d6:	4b02      	ldr	r3, [pc, #8]	; (ba9e0 <HAL_USB_USART_Available_Data+0xc>)
   ba9d8:	681b      	ldr	r3, [r3, #0]
   ba9da:	691b      	ldr	r3, [r3, #16]
   ba9dc:	9301      	str	r3, [sp, #4]
   ba9de:	bd08      	pop	{r3, pc}
   ba9e0:	0003024c 	.word	0x0003024c

000ba9e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   ba9e4:	b508      	push	{r3, lr}
   ba9e6:	4b02      	ldr	r3, [pc, #8]	; (ba9f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   ba9e8:	681b      	ldr	r3, [r3, #0]
   ba9ea:	695b      	ldr	r3, [r3, #20]
   ba9ec:	9301      	str	r3, [sp, #4]
   ba9ee:	bd08      	pop	{r3, pc}
   ba9f0:	0003024c 	.word	0x0003024c

000ba9f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba9f4:	b508      	push	{r3, lr}
   ba9f6:	4b02      	ldr	r3, [pc, #8]	; (baa00 <HAL_USB_USART_Receive_Data+0xc>)
   ba9f8:	681b      	ldr	r3, [r3, #0]
   ba9fa:	699b      	ldr	r3, [r3, #24]
   ba9fc:	9301      	str	r3, [sp, #4]
   ba9fe:	bd08      	pop	{r3, pc}
   baa00:	0003024c 	.word	0x0003024c

000baa04 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   baa04:	b508      	push	{r3, lr}
   baa06:	4b02      	ldr	r3, [pc, #8]	; (baa10 <HAL_USB_USART_Send_Data+0xc>)
   baa08:	681b      	ldr	r3, [r3, #0]
   baa0a:	69db      	ldr	r3, [r3, #28]
   baa0c:	9301      	str	r3, [sp, #4]
   baa0e:	bd08      	pop	{r3, pc}
   baa10:	0003024c 	.word	0x0003024c

000baa14 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   baa14:	b508      	push	{r3, lr}
   baa16:	4b02      	ldr	r3, [pc, #8]	; (baa20 <HAL_USB_USART_Flush_Data+0xc>)
   baa18:	681b      	ldr	r3, [r3, #0]
   baa1a:	6a1b      	ldr	r3, [r3, #32]
   baa1c:	9301      	str	r3, [sp, #4]
   baa1e:	bd08      	pop	{r3, pc}
   baa20:	0003024c 	.word	0x0003024c

000baa24 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   baa24:	b508      	push	{r3, lr}
   baa26:	4b02      	ldr	r3, [pc, #8]	; (baa30 <HAL_USB_USART_Is_Connected+0xc>)
   baa28:	681b      	ldr	r3, [r3, #0]
   baa2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   baa2c:	9301      	str	r3, [sp, #4]
   baa2e:	bd08      	pop	{r3, pc}
   baa30:	0003024c 	.word	0x0003024c

000baa34 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   baa34:	b508      	push	{r3, lr}
   baa36:	4b02      	ldr	r3, [pc, #8]	; (baa40 <panic_+0xc>)
   baa38:	681b      	ldr	r3, [r3, #0]
   baa3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   baa3c:	9301      	str	r3, [sp, #4]
   baa3e:	bd08      	pop	{r3, pc}
   baa40:	00030260 	.word	0x00030260

000baa44 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   baa44:	b508      	push	{r3, lr}
   baa46:	4b02      	ldr	r3, [pc, #8]	; (baa50 <log_message+0xc>)
   baa48:	681b      	ldr	r3, [r3, #0]
   baa4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   baa4c:	9301      	str	r3, [sp, #4]
   baa4e:	bd08      	pop	{r3, pc}
   baa50:	00030260 	.word	0x00030260

000baa54 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   baa54:	b508      	push	{r3, lr}
   baa56:	4b02      	ldr	r3, [pc, #8]	; (baa60 <log_message_v+0xc>)
   baa58:	681b      	ldr	r3, [r3, #0]
   baa5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   baa5c:	9301      	str	r3, [sp, #4]
   baa5e:	bd08      	pop	{r3, pc}
   baa60:	00030260 	.word	0x00030260

000baa64 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   baa64:	b508      	push	{r3, lr}
   baa66:	4b02      	ldr	r3, [pc, #8]	; (baa70 <log_level_name+0xc>)
   baa68:	681b      	ldr	r3, [r3, #0]
   baa6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   baa6c:	9301      	str	r3, [sp, #4]
   baa6e:	bd08      	pop	{r3, pc}
   baa70:	00030260 	.word	0x00030260

000baa74 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   baa74:	b508      	push	{r3, lr}
   baa76:	4b02      	ldr	r3, [pc, #8]	; (baa80 <log_set_callbacks+0xc>)
   baa78:	681b      	ldr	r3, [r3, #0]
   baa7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   baa7c:	9301      	str	r3, [sp, #4]
   baa7e:	bd08      	pop	{r3, pc}
   baa80:	00030260 	.word	0x00030260

000baa84 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   baa84:	b508      	push	{r3, lr}
   baa86:	4b03      	ldr	r3, [pc, #12]	; (baa94 <diag_get_source+0x10>)
   baa88:	681b      	ldr	r3, [r3, #0]
   baa8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   baa8e:	9301      	str	r3, [sp, #4]
   baa90:	bd08      	pop	{r3, pc}
   baa92:	0000      	.short	0x0000
   baa94:	00030260 	.word	0x00030260

000baa98 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   baa98:	b508      	push	{r3, lr}
   baa9a:	4b02      	ldr	r3, [pc, #8]	; (baaa4 <system_mode+0xc>)
   baa9c:	681b      	ldr	r3, [r3, #0]
   baa9e:	681b      	ldr	r3, [r3, #0]
   baaa0:	9301      	str	r3, [sp, #4]
   baaa2:	bd08      	pop	{r3, pc}
   baaa4:	00030220 	.word	0x00030220

000baaa8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   baaa8:	b508      	push	{r3, lr}
   baaaa:	4b02      	ldr	r3, [pc, #8]	; (baab4 <set_system_mode+0xc>)
   baaac:	681b      	ldr	r3, [r3, #0]
   baaae:	685b      	ldr	r3, [r3, #4]
   baab0:	9301      	str	r3, [sp, #4]
   baab2:	bd08      	pop	{r3, pc}
   baab4:	00030220 	.word	0x00030220

000baab8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   baab8:	b508      	push	{r3, lr}
   baaba:	4b02      	ldr	r3, [pc, #8]	; (baac4 <system_delay_ms+0xc>)
   baabc:	681b      	ldr	r3, [r3, #0]
   baabe:	695b      	ldr	r3, [r3, #20]
   baac0:	9301      	str	r3, [sp, #4]
   baac2:	bd08      	pop	{r3, pc}
   baac4:	00030220 	.word	0x00030220

000baac8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   baac8:	b508      	push	{r3, lr}
   baaca:	4b02      	ldr	r3, [pc, #8]	; (baad4 <system_subscribe_event+0xc>)
   baacc:	681b      	ldr	r3, [r3, #0]
   baace:	6a1b      	ldr	r3, [r3, #32]
   baad0:	9301      	str	r3, [sp, #4]
   baad2:	bd08      	pop	{r3, pc}
   baad4:	00030220 	.word	0x00030220

000baad8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   baad8:	b508      	push	{r3, lr}
   baada:	4b02      	ldr	r3, [pc, #8]	; (baae4 <system_thread_set_state+0xc>)
   baadc:	681b      	ldr	r3, [r3, #0]
   baade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   baae0:	9301      	str	r3, [sp, #4]
   baae2:	bd08      	pop	{r3, pc}
   baae4:	00030220 	.word	0x00030220

000baae8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   baae8:	b508      	push	{r3, lr}
   baaea:	4b02      	ldr	r3, [pc, #8]	; (baaf4 <application_thread_current+0xc>)
   baaec:	681b      	ldr	r3, [r3, #0]
   baaee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   baaf0:	9301      	str	r3, [sp, #4]
   baaf2:	bd08      	pop	{r3, pc}
   baaf4:	00030220 	.word	0x00030220

000baaf8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   baaf8:	b508      	push	{r3, lr}
   baafa:	4b02      	ldr	r3, [pc, #8]	; (bab04 <application_thread_invoke+0xc>)
   baafc:	681b      	ldr	r3, [r3, #0]
   baafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bab00:	9301      	str	r3, [sp, #4]
   bab02:	bd08      	pop	{r3, pc}
   bab04:	00030220 	.word	0x00030220

000bab08 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bab08:	b508      	push	{r3, lr}
   bab0a:	4b02      	ldr	r3, [pc, #8]	; (bab14 <system_thread_get_state+0xc>)
   bab0c:	681b      	ldr	r3, [r3, #0]
   bab0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bab10:	9301      	str	r3, [sp, #4]
   bab12:	bd08      	pop	{r3, pc}
   bab14:	00030220 	.word	0x00030220

000bab18 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bab18:	b508      	push	{r3, lr}
   bab1a:	4b02      	ldr	r3, [pc, #8]	; (bab24 <system_notify_time_changed+0xc>)
   bab1c:	681b      	ldr	r3, [r3, #0]
   bab1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bab20:	9301      	str	r3, [sp, #4]
   bab22:	bd08      	pop	{r3, pc}
   bab24:	00030220 	.word	0x00030220

000bab28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bab28:	b508      	push	{r3, lr}
   bab2a:	4b03      	ldr	r3, [pc, #12]	; (bab38 <system_ctrl_set_app_request_handler+0x10>)
   bab2c:	681b      	ldr	r3, [r3, #0]
   bab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bab32:	9301      	str	r3, [sp, #4]
   bab34:	bd08      	pop	{r3, pc}
   bab36:	0000      	.short	0x0000
   bab38:	00030220 	.word	0x00030220

000bab3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bab3c:	b508      	push	{r3, lr}
   bab3e:	4b03      	ldr	r3, [pc, #12]	; (bab4c <system_ctrl_set_result+0x10>)
   bab40:	681b      	ldr	r3, [r3, #0]
   bab42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bab46:	9301      	str	r3, [sp, #4]
   bab48:	bd08      	pop	{r3, pc}
   bab4a:	0000      	.short	0x0000
   bab4c:	00030220 	.word	0x00030220

000bab50 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bab50:	b508      	push	{r3, lr}
   bab52:	4b03      	ldr	r3, [pc, #12]	; (bab60 <system_power_management_set_config+0x10>)
   bab54:	681b      	ldr	r3, [r3, #0]
   bab56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bab5a:	9301      	str	r3, [sp, #4]
   bab5c:	bd08      	pop	{r3, pc}
   bab5e:	0000      	.short	0x0000
   bab60:	00030220 	.word	0x00030220

000bab64 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bab64:	b508      	push	{r3, lr}
   bab66:	4b03      	ldr	r3, [pc, #12]	; (bab74 <system_sleep_ext+0x10>)
   bab68:	681b      	ldr	r3, [r3, #0]
   bab6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bab6e:	9301      	str	r3, [sp, #4]
   bab70:	bd08      	pop	{r3, pc}
   bab72:	0000      	.short	0x0000
   bab74:	00030220 	.word	0x00030220

000bab78 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bab78:	b508      	push	{r3, lr}
   bab7a:	4b03      	ldr	r3, [pc, #12]	; (bab88 <system_reset+0x10>)
   bab7c:	681b      	ldr	r3, [r3, #0]
   bab7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bab82:	9301      	str	r3, [sp, #4]
   bab84:	bd08      	pop	{r3, pc}
   bab86:	0000      	.short	0x0000
   bab88:	00030220 	.word	0x00030220

000bab8c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bab8c:	b508      	push	{r3, lr}
   bab8e:	4b02      	ldr	r3, [pc, #8]	; (bab98 <spark_variable+0xc>)
   bab90:	681b      	ldr	r3, [r3, #0]
   bab92:	681b      	ldr	r3, [r3, #0]
   bab94:	9301      	str	r3, [sp, #4]
   bab96:	bd08      	pop	{r3, pc}
   bab98:	00030244 	.word	0x00030244

000bab9c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bab9c:	b508      	push	{r3, lr}
   bab9e:	4b02      	ldr	r3, [pc, #8]	; (baba8 <spark_function+0xc>)
   baba0:	681b      	ldr	r3, [r3, #0]
   baba2:	685b      	ldr	r3, [r3, #4]
   baba4:	9301      	str	r3, [sp, #4]
   baba6:	bd08      	pop	{r3, pc}
   baba8:	00030244 	.word	0x00030244

000babac <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   babac:	b508      	push	{r3, lr}
   babae:	4b02      	ldr	r3, [pc, #8]	; (babb8 <spark_process+0xc>)
   babb0:	681b      	ldr	r3, [r3, #0]
   babb2:	689b      	ldr	r3, [r3, #8]
   babb4:	9301      	str	r3, [sp, #4]
   babb6:	bd08      	pop	{r3, pc}
   babb8:	00030244 	.word	0x00030244

000babbc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   babbc:	b508      	push	{r3, lr}
   babbe:	4b02      	ldr	r3, [pc, #8]	; (babc8 <spark_cloud_flag_connect+0xc>)
   babc0:	681b      	ldr	r3, [r3, #0]
   babc2:	68db      	ldr	r3, [r3, #12]
   babc4:	9301      	str	r3, [sp, #4]
   babc6:	bd08      	pop	{r3, pc}
   babc8:	00030244 	.word	0x00030244

000babcc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   babcc:	b508      	push	{r3, lr}
   babce:	4b02      	ldr	r3, [pc, #8]	; (babd8 <spark_cloud_flag_connected+0xc>)
   babd0:	681b      	ldr	r3, [r3, #0]
   babd2:	695b      	ldr	r3, [r3, #20]
   babd4:	9301      	str	r3, [sp, #4]
   babd6:	bd08      	pop	{r3, pc}
   babd8:	00030244 	.word	0x00030244

000babdc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   babdc:	b508      	push	{r3, lr}
   babde:	4b02      	ldr	r3, [pc, #8]	; (babe8 <spark_send_event+0xc>)
   babe0:	681b      	ldr	r3, [r3, #0]
   babe2:	6a1b      	ldr	r3, [r3, #32]
   babe4:	9301      	str	r3, [sp, #4]
   babe6:	bd08      	pop	{r3, pc}
   babe8:	00030244 	.word	0x00030244

000babec <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   babec:	b508      	push	{r3, lr}
   babee:	4b02      	ldr	r3, [pc, #8]	; (babf8 <spark_sync_time_pending+0xc>)
   babf0:	681b      	ldr	r3, [r3, #0]
   babf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   babf4:	9301      	str	r3, [sp, #4]
   babf6:	bd08      	pop	{r3, pc}
   babf8:	00030244 	.word	0x00030244

000babfc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   babfc:	b508      	push	{r3, lr}
   babfe:	4b02      	ldr	r3, [pc, #8]	; (bac08 <spark_sync_time_last+0xc>)
   bac00:	681b      	ldr	r3, [r3, #0]
   bac02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bac04:	9301      	str	r3, [sp, #4]
   bac06:	bd08      	pop	{r3, pc}
   bac08:	00030244 	.word	0x00030244

000bac0c <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   bac0c:	b508      	push	{r3, lr}
   bac0e:	4b02      	ldr	r3, [pc, #8]	; (bac18 <spark_set_connection_property+0xc>)
   bac10:	681b      	ldr	r3, [r3, #0]
   bac12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bac14:	9301      	str	r3, [sp, #4]
   bac16:	bd08      	pop	{r3, pc}
   bac18:	00030244 	.word	0x00030244

000bac1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bac1c:	b508      	push	{r3, lr}
   bac1e:	4b02      	ldr	r3, [pc, #8]	; (bac28 <spark_set_random_seed_from_cloud_handler+0xc>)
   bac20:	681b      	ldr	r3, [r3, #0]
   bac22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bac24:	9301      	str	r3, [sp, #4]
   bac26:	bd08      	pop	{r3, pc}
   bac28:	00030244 	.word	0x00030244

000bac2c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bac2c:	b508      	push	{r3, lr}
   bac2e:	4b02      	ldr	r3, [pc, #8]	; (bac38 <spark_cloud_disconnect+0xc>)
   bac30:	681b      	ldr	r3, [r3, #0]
   bac32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bac34:	9301      	str	r3, [sp, #4]
   bac36:	bd08      	pop	{r3, pc}
   bac38:	00030244 	.word	0x00030244

000bac3c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bac3c:	b508      	push	{r3, lr}
   bac3e:	4b02      	ldr	r3, [pc, #8]	; (bac48 <network_connect+0xc>)
   bac40:	681b      	ldr	r3, [r3, #0]
   bac42:	685b      	ldr	r3, [r3, #4]
   bac44:	9301      	str	r3, [sp, #4]
   bac46:	bd08      	pop	{r3, pc}
   bac48:	00030240 	.word	0x00030240

000bac4c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bac4c:	b508      	push	{r3, lr}
   bac4e:	4b02      	ldr	r3, [pc, #8]	; (bac58 <network_connecting+0xc>)
   bac50:	681b      	ldr	r3, [r3, #0]
   bac52:	689b      	ldr	r3, [r3, #8]
   bac54:	9301      	str	r3, [sp, #4]
   bac56:	bd08      	pop	{r3, pc}
   bac58:	00030240 	.word	0x00030240

000bac5c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bac5c:	b508      	push	{r3, lr}
   bac5e:	4b02      	ldr	r3, [pc, #8]	; (bac68 <network_disconnect+0xc>)
   bac60:	681b      	ldr	r3, [r3, #0]
   bac62:	68db      	ldr	r3, [r3, #12]
   bac64:	9301      	str	r3, [sp, #4]
   bac66:	bd08      	pop	{r3, pc}
   bac68:	00030240 	.word	0x00030240

000bac6c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bac6c:	b508      	push	{r3, lr}
   bac6e:	4b02      	ldr	r3, [pc, #8]	; (bac78 <network_ready+0xc>)
   bac70:	681b      	ldr	r3, [r3, #0]
   bac72:	691b      	ldr	r3, [r3, #16]
   bac74:	9301      	str	r3, [sp, #4]
   bac76:	bd08      	pop	{r3, pc}
   bac78:	00030240 	.word	0x00030240

000bac7c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bac7c:	b508      	push	{r3, lr}
   bac7e:	4b02      	ldr	r3, [pc, #8]	; (bac88 <network_on+0xc>)
   bac80:	681b      	ldr	r3, [r3, #0]
   bac82:	695b      	ldr	r3, [r3, #20]
   bac84:	9301      	str	r3, [sp, #4]
   bac86:	bd08      	pop	{r3, pc}
   bac88:	00030240 	.word	0x00030240

000bac8c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bac8c:	b508      	push	{r3, lr}
   bac8e:	4b02      	ldr	r3, [pc, #8]	; (bac98 <network_off+0xc>)
   bac90:	681b      	ldr	r3, [r3, #0]
   bac92:	699b      	ldr	r3, [r3, #24]
   bac94:	9301      	str	r3, [sp, #4]
   bac96:	bd08      	pop	{r3, pc}
   bac98:	00030240 	.word	0x00030240

000bac9c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bac9c:	b508      	push	{r3, lr}
   bac9e:	4b02      	ldr	r3, [pc, #8]	; (baca8 <network_listen+0xc>)
   baca0:	681b      	ldr	r3, [r3, #0]
   baca2:	69db      	ldr	r3, [r3, #28]
   baca4:	9301      	str	r3, [sp, #4]
   baca6:	bd08      	pop	{r3, pc}
   baca8:	00030240 	.word	0x00030240

000bacac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bacac:	b508      	push	{r3, lr}
   bacae:	4b02      	ldr	r3, [pc, #8]	; (bacb8 <network_listening+0xc>)
   bacb0:	681b      	ldr	r3, [r3, #0]
   bacb2:	6a1b      	ldr	r3, [r3, #32]
   bacb4:	9301      	str	r3, [sp, #4]
   bacb6:	bd08      	pop	{r3, pc}
   bacb8:	00030240 	.word	0x00030240

000bacbc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bacbc:	b508      	push	{r3, lr}
   bacbe:	4b02      	ldr	r3, [pc, #8]	; (bacc8 <network_set_listen_timeout+0xc>)
   bacc0:	681b      	ldr	r3, [r3, #0]
   bacc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bacc4:	9301      	str	r3, [sp, #4]
   bacc6:	bd08      	pop	{r3, pc}
   bacc8:	00030240 	.word	0x00030240

000baccc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   baccc:	b508      	push	{r3, lr}
   bacce:	4b02      	ldr	r3, [pc, #8]	; (bacd8 <network_get_listen_timeout+0xc>)
   bacd0:	681b      	ldr	r3, [r3, #0]
   bacd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bacd4:	9301      	str	r3, [sp, #4]
   bacd6:	bd08      	pop	{r3, pc}
   bacd8:	00030240 	.word	0x00030240

000bacdc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bacdc:	b508      	push	{r3, lr}
   bacde:	4b02      	ldr	r3, [pc, #8]	; (bace8 <network_is_on+0xc>)
   bace0:	681b      	ldr	r3, [r3, #0]
   bace2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bace4:	9301      	str	r3, [sp, #4]
   bace6:	bd08      	pop	{r3, pc}
   bace8:	00030240 	.word	0x00030240

000bacec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bacec:	b508      	push	{r3, lr}
   bacee:	4b02      	ldr	r3, [pc, #8]	; (bacf8 <network_is_off+0xc>)
   bacf0:	681b      	ldr	r3, [r3, #0]
   bacf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bacf4:	9301      	str	r3, [sp, #4]
   bacf6:	bd08      	pop	{r3, pc}
   bacf8:	00030240 	.word	0x00030240

000bacfc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bacfc:	b508      	push	{r3, lr}
   bacfe:	4b02      	ldr	r3, [pc, #8]	; (bad08 <malloc+0xc>)
   bad00:	681b      	ldr	r3, [r3, #0]
   bad02:	681b      	ldr	r3, [r3, #0]
   bad04:	9301      	str	r3, [sp, #4]
   bad06:	bd08      	pop	{r3, pc}
   bad08:	0003021c 	.word	0x0003021c

000bad0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bad0c:	b508      	push	{r3, lr}
   bad0e:	4b02      	ldr	r3, [pc, #8]	; (bad18 <free+0xc>)
   bad10:	681b      	ldr	r3, [r3, #0]
   bad12:	685b      	ldr	r3, [r3, #4]
   bad14:	9301      	str	r3, [sp, #4]
   bad16:	bd08      	pop	{r3, pc}
   bad18:	0003021c 	.word	0x0003021c

000bad1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bad1c:	b508      	push	{r3, lr}
   bad1e:	4b02      	ldr	r3, [pc, #8]	; (bad28 <realloc+0xc>)
   bad20:	681b      	ldr	r3, [r3, #0]
   bad22:	689b      	ldr	r3, [r3, #8]
   bad24:	9301      	str	r3, [sp, #4]
   bad26:	bd08      	pop	{r3, pc}
   bad28:	0003021c 	.word	0x0003021c

000bad2c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bad2c:	b508      	push	{r3, lr}
   bad2e:	4b02      	ldr	r3, [pc, #8]	; (bad38 <siprintf+0xc>)
   bad30:	681b      	ldr	r3, [r3, #0]
   bad32:	691b      	ldr	r3, [r3, #16]
   bad34:	9301      	str	r3, [sp, #4]
   bad36:	bd08      	pop	{r3, pc}
   bad38:	0003021c 	.word	0x0003021c

000bad3c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bad3c:	b508      	push	{r3, lr}
   bad3e:	4b02      	ldr	r3, [pc, #8]	; (bad48 <sscanf+0xc>)
   bad40:	681b      	ldr	r3, [r3, #0]
   bad42:	695b      	ldr	r3, [r3, #20]
   bad44:	9301      	str	r3, [sp, #4]
   bad46:	bd08      	pop	{r3, pc}
   bad48:	0003021c 	.word	0x0003021c

000bad4c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bad4c:	b508      	push	{r3, lr}
   bad4e:	4b02      	ldr	r3, [pc, #8]	; (bad58 <snprintf+0xc>)
   bad50:	681b      	ldr	r3, [r3, #0]
   bad52:	69db      	ldr	r3, [r3, #28]
   bad54:	9301      	str	r3, [sp, #4]
   bad56:	bd08      	pop	{r3, pc}
   bad58:	0003021c 	.word	0x0003021c

000bad5c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bad5c:	b508      	push	{r3, lr}
   bad5e:	4b02      	ldr	r3, [pc, #8]	; (bad68 <vsnprintf+0xc>)
   bad60:	681b      	ldr	r3, [r3, #0]
   bad62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bad64:	9301      	str	r3, [sp, #4]
   bad66:	bd08      	pop	{r3, pc}
   bad68:	0003021c 	.word	0x0003021c

000bad6c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bad6c:	b508      	push	{r3, lr}
   bad6e:	4b02      	ldr	r3, [pc, #8]	; (bad78 <abort+0xc>)
   bad70:	681b      	ldr	r3, [r3, #0]
   bad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bad74:	9301      	str	r3, [sp, #4]
   bad76:	bd08      	pop	{r3, pc}
   bad78:	0003021c 	.word	0x0003021c

000bad7c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bad7c:	b508      	push	{r3, lr}
   bad7e:	4b02      	ldr	r3, [pc, #8]	; (bad88 <_malloc_r+0xc>)
   bad80:	681b      	ldr	r3, [r3, #0]
   bad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bad84:	9301      	str	r3, [sp, #4]
   bad86:	bd08      	pop	{r3, pc}
   bad88:	0003021c 	.word	0x0003021c

000bad8c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bad8c:	b508      	push	{r3, lr}
   bad8e:	4b02      	ldr	r3, [pc, #8]	; (bad98 <__errno+0xc>)
   bad90:	681b      	ldr	r3, [r3, #0]
   bad92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bad94:	9301      	str	r3, [sp, #4]
   bad96:	bd08      	pop	{r3, pc}
   bad98:	0003021c 	.word	0x0003021c

000bad9c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bad9c:	b508      	push	{r3, lr}
   bad9e:	4b02      	ldr	r3, [pc, #8]	; (bada8 <__assert_func+0xc>)
   bada0:	681b      	ldr	r3, [r3, #0]
   bada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bada4:	9301      	str	r3, [sp, #4]
   bada6:	bd08      	pop	{r3, pc}
   bada8:	0003021c 	.word	0x0003021c

000badac <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   badac:	b508      	push	{r3, lr}
   badae:	4b02      	ldr	r3, [pc, #8]	; (badb8 <newlib_impure_ptr_callback+0xc>)
   badb0:	681b      	ldr	r3, [r3, #0]
   badb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   badb4:	9301      	str	r3, [sp, #4]
   badb6:	bd08      	pop	{r3, pc}
   badb8:	0003021c 	.word	0x0003021c

000badbc <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   badbc:	b508      	push	{r3, lr}
   badbe:	4b02      	ldr	r3, [pc, #8]	; (badc8 <strftime+0xc>)
   badc0:	681b      	ldr	r3, [r3, #0]
   badc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   badc4:	9301      	str	r3, [sp, #4]
   badc6:	bd08      	pop	{r3, pc}
   badc8:	0003021c 	.word	0x0003021c

000badcc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   badcc:	b508      	push	{r3, lr}
   badce:	4b02      	ldr	r3, [pc, #8]	; (badd8 <localtime_r+0xc>)
   badd0:	681b      	ldr	r3, [r3, #0]
   badd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   badd4:	9301      	str	r3, [sp, #4]
   badd6:	bd08      	pop	{r3, pc}
   badd8:	0003021c 	.word	0x0003021c

000baddc <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   baddc:	b508      	push	{r3, lr}
   badde:	4b02      	ldr	r3, [pc, #8]	; (bade8 <gmtime_r+0xc>)
   bade0:	681b      	ldr	r3, [r3, #0]
   bade2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bade4:	9301      	str	r3, [sp, #4]
   bade6:	bd08      	pop	{r3, pc}
   bade8:	0003021c 	.word	0x0003021c

000badec <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   badec:	b508      	push	{r3, lr}
   badee:	4b02      	ldr	r3, [pc, #8]	; (badf8 <mktime+0xc>)
   badf0:	681b      	ldr	r3, [r3, #0]
   badf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   badf4:	9301      	str	r3, [sp, #4]
   badf6:	bd08      	pop	{r3, pc}
   badf8:	0003021c 	.word	0x0003021c

000badfc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   badfc:	2100      	movs	r1, #0
   badfe:	f7ff be5b 	b.w	baab8 <system_delay_ms>

000bae02 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bae02:	b510      	push	{r4, lr}
      if (_M_empty())
   bae04:	6883      	ldr	r3, [r0, #8]
   bae06:	4604      	mov	r4, r0
   bae08:	b90b      	cbnz	r3, bae0e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bae0a:	f003 f995 	bl	be138 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bae0e:	68c3      	ldr	r3, [r0, #12]
   bae10:	4798      	blx	r3
      if (_M_manager)
   bae12:	68a3      	ldr	r3, [r4, #8]
   bae14:	b11b      	cbz	r3, bae1e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bae16:	2203      	movs	r2, #3
   bae18:	4621      	mov	r1, r4
   bae1a:	4620      	mov	r0, r4
   bae1c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bae1e:	4620      	mov	r0, r4
   bae20:	2110      	movs	r1, #16
}
   bae22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bae26:	f7f9 b93a 	b.w	b409e <_ZdlPvj>

000bae2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bae2a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bae2c:	6843      	ldr	r3, [r0, #4]
   bae2e:	3b01      	subs	r3, #1
    {
   bae30:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bae32:	6043      	str	r3, [r0, #4]
   bae34:	b963      	cbnz	r3, bae50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bae36:	6803      	ldr	r3, [r0, #0]
   bae38:	689b      	ldr	r3, [r3, #8]
   bae3a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bae3c:	68a3      	ldr	r3, [r4, #8]
   bae3e:	3b01      	subs	r3, #1
   bae40:	60a3      	str	r3, [r4, #8]
   bae42:	b92b      	cbnz	r3, bae50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bae44:	6823      	ldr	r3, [r4, #0]
   bae46:	4620      	mov	r0, r4
   bae48:	68db      	ldr	r3, [r3, #12]
    }
   bae4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bae4e:	4718      	bx	r3
    }
   bae50:	bd10      	pop	{r4, pc}

000bae52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bae52:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bae54:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bae58:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bae5a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bae5e:	42ae      	cmp	r6, r5
   bae60:	d004      	beq.n	bae6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bae62:	4628      	mov	r0, r5
   bae64:	f002 fab6 	bl	bd3d4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bae68:	3510      	adds	r5, #16
   bae6a:	e7f8      	b.n	bae5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bae6c:	6820      	ldr	r0, [r4, #0]
   bae6e:	f7ff ff4d 	bl	bad0c <free>
    AllocatorT::free(data_);
}
   bae72:	4620      	mov	r0, r4
   bae74:	bd70      	pop	{r4, r5, r6, pc}
	...

000bae78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bae78:	4802      	ldr	r0, [pc, #8]	; (bae84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bae7a:	2300      	movs	r3, #0
   bae7c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bae7e:	f7ff bb61 	b.w	ba544 <os_mutex_recursive_create>
   bae82:	bf00      	nop
   bae84:	2003e580 	.word	0x2003e580

000bae88 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bae88:	2200      	movs	r2, #0
   bae8a:	6840      	ldr	r0, [r0, #4]
   bae8c:	4611      	mov	r1, r2
   bae8e:	f7ff beed 	b.w	bac6c <network_ready>

000bae92 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bae92:	2200      	movs	r2, #0
   bae94:	6840      	ldr	r0, [r0, #4]
   bae96:	4611      	mov	r1, r2
   bae98:	f7ff bf08 	b.w	bacac <network_listening>

000bae9c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bae9c:	2200      	movs	r2, #0
   bae9e:	6840      	ldr	r0, [r0, #4]
   baea0:	4611      	mov	r1, r2
   baea2:	f7ff bf13 	b.w	baccc <network_get_listen_timeout>

000baea6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   baea6:	6840      	ldr	r0, [r0, #4]
   baea8:	2200      	movs	r2, #0
   baeaa:	f7ff bf07 	b.w	bacbc <network_set_listen_timeout>

000baeae <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   baeae:	6840      	ldr	r0, [r0, #4]
   baeb0:	2200      	movs	r2, #0
   baeb2:	f081 0101 	eor.w	r1, r1, #1
   baeb6:	f7ff bef1 	b.w	bac9c <network_listen>

000baeba <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   baeba:	2300      	movs	r3, #0
   baebc:	6840      	ldr	r0, [r0, #4]
   baebe:	461a      	mov	r2, r3
   baec0:	4619      	mov	r1, r3
   baec2:	f7ff bee3 	b.w	bac8c <network_off>

000baec6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   baec6:	2300      	movs	r3, #0
   baec8:	6840      	ldr	r0, [r0, #4]
   baeca:	461a      	mov	r2, r3
   baecc:	4619      	mov	r1, r3
   baece:	f7ff bed5 	b.w	bac7c <network_on>

000baed2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   baed2:	2200      	movs	r2, #0
   baed4:	6840      	ldr	r0, [r0, #4]
   baed6:	4611      	mov	r1, r2
   baed8:	f7ff beb8 	b.w	bac4c <network_connecting>

000baedc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   baedc:	6840      	ldr	r0, [r0, #4]
   baede:	2200      	movs	r2, #0
   baee0:	2102      	movs	r1, #2
   baee2:	f7ff bebb 	b.w	bac5c <network_disconnect>

000baee6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   baee6:	2300      	movs	r3, #0
   baee8:	6840      	ldr	r0, [r0, #4]
   baeea:	461a      	mov	r2, r3
   baeec:	f7ff bea6 	b.w	bac3c <network_connect>

000baef0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   baef0:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   baef2:	4b13      	ldr	r3, [pc, #76]	; (baf40 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   baef4:	6003      	str	r3, [r0, #0]
   baef6:	2518      	movs	r5, #24
   baef8:	3330      	adds	r3, #48	; 0x30
   baefa:	b086      	sub	sp, #24
   baefc:	460e      	mov	r6, r1
   baefe:	6043      	str	r3, [r0, #4]
   baf00:	462a      	mov	r2, r5
   baf02:	2100      	movs	r1, #0
   baf04:	4604      	mov	r4, r0
   baf06:	3008      	adds	r0, #8
   baf08:	f003 fe48 	bl	beb9c <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   baf0c:	2200      	movs	r2, #0
   baf0e:	6870      	ldr	r0, [r6, #4]
   baf10:	4611      	mov	r1, r2
   baf12:	f7ff feab 	bl	bac6c <network_ready>
   baf16:	b178      	cbz	r0, baf38 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   baf18:	2100      	movs	r1, #0
   baf1a:	462a      	mov	r2, r5
   baf1c:	4668      	mov	r0, sp
   baf1e:	f003 fe3d 	bl	beb9c <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   baf22:	4669      	mov	r1, sp
   baf24:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   baf26:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   baf2a:	f7ff facb 	bl	ba4c4 <cellular_signal>
   baf2e:	b918      	cbnz	r0, baf38 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   baf30:	4669      	mov	r1, sp
   baf32:	4620      	mov	r0, r4
   baf34:	f000 f8b8 	bl	bb0a8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   baf38:	4620      	mov	r0, r4
   baf3a:	b006      	add	sp, #24
   baf3c:	bd70      	pop	{r4, r5, r6, pc}
   baf3e:	bf00      	nop
   baf40:	000c04d8 	.word	0x000c04d8

000baf44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   baf44:	4b08      	ldr	r3, [pc, #32]	; (baf68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   baf46:	b510      	push	{r4, lr}
   baf48:	2428      	movs	r4, #40	; 0x28
   baf4a:	4622      	mov	r2, r4
   baf4c:	4618      	mov	r0, r3
   baf4e:	2100      	movs	r1, #0
   baf50:	f003 fe24 	bl	beb9c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   baf54:	4b05      	ldr	r3, [pc, #20]	; (baf6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   baf56:	8004      	strh	r4, [r0, #0]
        cid = -1;
   baf58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baf5c:	6042      	str	r2, [r0, #4]
   baf5e:	2204      	movs	r2, #4
   baf60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   baf62:	4a03      	ldr	r2, [pc, #12]	; (baf70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   baf64:	601a      	str	r2, [r3, #0]
   baf66:	bd10      	pop	{r4, pc}
   baf68:	2003e58c 	.word	0x2003e58c
   baf6c:	2003e584 	.word	0x2003e584
   baf70:	000c049c 	.word	0x000c049c

000baf74 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   baf74:	4770      	bx	lr

000baf76 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   baf76:	7b00      	ldrb	r0, [r0, #12]
   baf78:	4770      	bx	lr

000baf7a <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   baf7a:	7b03      	ldrb	r3, [r0, #12]
   baf7c:	b14b      	cbz	r3, baf92 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   baf7e:	6903      	ldr	r3, [r0, #16]
   baf80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   baf84:	d005      	beq.n	baf92 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   baf86:	6980      	ldr	r0, [r0, #24]
   baf88:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   baf8c:	bf18      	it	ne
   baf8e:	2001      	movne	r0, #1
   baf90:	4770      	bx	lr
   baf92:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   baf94:	4770      	bx	lr

000baf96 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   baf96:	6803      	ldr	r3, [r0, #0]
   baf98:	6a1b      	ldr	r3, [r3, #32]
   baf9a:	4718      	bx	r3

000baf9c <_ZNK14CellularSignal7printToER5Print>:
{
   baf9c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   baf9e:	6803      	ldr	r3, [r0, #0]
{
   bafa0:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bafa2:	691b      	ldr	r3, [r3, #16]
{
   bafa4:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bafa6:	4798      	blx	r3
   bafa8:	2102      	movs	r1, #2
   bafaa:	4628      	mov	r0, r5
   bafac:	f002 f8ee 	bl	bd18c <_ZN5Print5printEfi>
    n += p.print(',');
   bafb0:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bafb2:	4604      	mov	r4, r0
    n += p.print(',');
   bafb4:	4628      	mov	r0, r5
   bafb6:	f001 fff3 	bl	bcfa0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bafba:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bafbc:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bafbe:	699b      	ldr	r3, [r3, #24]
   bafc0:	4630      	mov	r0, r6
   bafc2:	4798      	blx	r3
   bafc4:	2102      	movs	r1, #2
   bafc6:	4628      	mov	r0, r5
   bafc8:	f002 f8e0 	bl	bd18c <_ZN5Print5printEfi>
}
   bafcc:	4420      	add	r0, r4
   bafce:	bd70      	pop	{r4, r5, r6, pc}

000bafd0 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bafd0:	f1a0 0004 	sub.w	r0, r0, #4
   bafd4:	f7ff bfe2 	b.w	baf9c <_ZNK14CellularSignal7printToER5Print>

000bafd8 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bafd8:	b510      	push	{r4, lr}
   bafda:	2120      	movs	r1, #32
   bafdc:	4604      	mov	r4, r0
   bafde:	f7f9 f85e 	bl	b409e <_ZdlPvj>
   bafe2:	4620      	mov	r0, r4
   bafe4:	bd10      	pop	{r4, pc}
	...

000bafe8 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bafe8:	7b03      	ldrb	r3, [r0, #12]
   bafea:	b17b      	cbz	r3, bb00c <_ZNK14CellularSignal11getStrengthEv+0x24>
   bafec:	6943      	ldr	r3, [r0, #20]
   bafee:	2b00      	cmp	r3, #0
   baff0:	db0c      	blt.n	bb00c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   baff2:	ee07 3a90 	vmov	s15, r3
   baff6:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb014 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   baffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   baffe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb002:	eddf 7a05 	vldr	s15, [pc, #20]	; bb018 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bb006:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb00a:	4770      	bx	lr
    return -1.0f;
   bb00c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb010:	4770      	bx	lr
   bb012:	bf00      	nop
   bb014:	477fff00 	.word	0x477fff00
   bb018:	42c80000 	.word	0x42c80000

000bb01c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bb01c:	7b03      	ldrb	r3, [r0, #12]
   bb01e:	b163      	cbz	r3, bb03a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bb020:	6903      	ldr	r3, [r0, #16]
   bb022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb026:	d008      	beq.n	bb03a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bb028:	ee07 3a90 	vmov	s15, r3
   bb02c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb040 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bb030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb034:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb038:	4770      	bx	lr
    return 0.0f;
   bb03a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb044 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bb03e:	4770      	bx	lr
   bb040:	42c80000 	.word	0x42c80000
   bb044:	00000000 	.word	0x00000000

000bb048 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bb048:	7b03      	ldrb	r3, [r0, #12]
   bb04a:	b17b      	cbz	r3, bb06c <_ZNK14CellularSignal10getQualityEv+0x24>
   bb04c:	69c3      	ldr	r3, [r0, #28]
   bb04e:	2b00      	cmp	r3, #0
   bb050:	db0c      	blt.n	bb06c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bb052:	ee07 3a90 	vmov	s15, r3
   bb056:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb074 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bb05a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb05e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb062:	eddf 7a05 	vldr	s15, [pc, #20]	; bb078 <_ZNK14CellularSignal10getQualityEv+0x30>
   bb066:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb06a:	4770      	bx	lr
    return -1.0f;
   bb06c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb070:	4770      	bx	lr
   bb072:	bf00      	nop
   bb074:	477fff00 	.word	0x477fff00
   bb078:	42c80000 	.word	0x42c80000

000bb07c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bb07c:	7b03      	ldrb	r3, [r0, #12]
   bb07e:	b163      	cbz	r3, bb09a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bb080:	6983      	ldr	r3, [r0, #24]
   bb082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb086:	d008      	beq.n	bb09a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bb088:	ee07 3a90 	vmov	s15, r3
   bb08c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb0a0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bb090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb094:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb098:	4770      	bx	lr
    return 0.0f;
   bb09a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb0a4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bb09e:	4770      	bx	lr
   bb0a0:	42c80000 	.word	0x42c80000
   bb0a4:	00000000 	.word	0x00000000

000bb0a8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bb0a8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bb0aa:	460d      	mov	r5, r1
   bb0ac:	f100 0408 	add.w	r4, r0, #8
   bb0b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb0b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb0b4:	e895 0003 	ldmia.w	r5, {r0, r1}
   bb0b8:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bb0bc:	2001      	movs	r0, #1
   bb0be:	bd30      	pop	{r4, r5, pc}

000bb0c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb0c0:	4770      	bx	lr

000bb0c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bb0c2:	2000      	movs	r0, #0
   bb0c4:	4770      	bx	lr

000bb0c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb0c6:	b510      	push	{r4, lr}
   bb0c8:	2110      	movs	r1, #16
   bb0ca:	4604      	mov	r4, r0
   bb0cc:	f7f8 ffe7 	bl	b409e <_ZdlPvj>
   bb0d0:	4620      	mov	r0, r4
   bb0d2:	bd10      	pop	{r4, pc}

000bb0d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bb0d4:	b508      	push	{r3, lr}
      { delete this; }
   bb0d6:	f7ff fff6 	bl	bb0c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bb0da:	bd08      	pop	{r3, pc}

000bb0dc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bb0dc:	b530      	push	{r4, r5, lr}
        type_(type) {
   bb0de:	2200      	movs	r2, #0
   bb0e0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bb0e4:	6002      	str	r2, [r0, #0]
   bb0e6:	8084      	strh	r4, [r0, #4]
   bb0e8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bb0ea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb0ec:	680c      	ldr	r4, [r1, #0]
   bb0ee:	8085      	strh	r5, [r0, #4]
   bb0f0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bb0f2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bb0f4:	bd30      	pop	{r4, r5, pc}

000bb0f6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bb0f6:	b510      	push	{r4, lr}
   bb0f8:	4604      	mov	r4, r0
    free((void*)msg_);
   bb0fa:	6800      	ldr	r0, [r0, #0]
   bb0fc:	f7ff fe06 	bl	bad0c <free>
}
   bb100:	4620      	mov	r0, r4
   bb102:	bd10      	pop	{r4, pc}

000bb104 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bb104:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bb106:	68c4      	ldr	r4, [r0, #12]
   bb108:	b1f4      	cbz	r4, bb148 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bb10a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bb10c:	2b02      	cmp	r3, #2
   bb10e:	d103      	bne.n	bb118 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bb110:	f104 000c 	add.w	r0, r4, #12
   bb114:	f7ff ffef 	bl	bb0f6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bb118:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bb11a:	b135      	cbz	r5, bb12a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bb11c:	4628      	mov	r0, r5
   bb11e:	f7f9 fb5b 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   bb122:	2110      	movs	r1, #16
   bb124:	4628      	mov	r0, r5
   bb126:	f7f8 ffba 	bl	b409e <_ZdlPvj>
   bb12a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bb12c:	b135      	cbz	r5, bb13c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bb12e:	4628      	mov	r0, r5
   bb130:	f7f9 fb52 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
   bb134:	2110      	movs	r1, #16
   bb136:	4628      	mov	r0, r5
   bb138:	f7f8 ffb1 	bl	b409e <_ZdlPvj>
   bb13c:	4620      	mov	r0, r4
   bb13e:	2114      	movs	r1, #20
   bb140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb144:	f7f8 bfab 	b.w	b409e <_ZdlPvj>
   bb148:	bd38      	pop	{r3, r4, r5, pc}

000bb14a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bb14a:	b510      	push	{r4, lr}
   bb14c:	b088      	sub	sp, #32
   bb14e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bb150:	4668      	mov	r0, sp
   bb152:	f002 f98a 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bb156:	4669      	mov	r1, sp
   bb158:	a804      	add	r0, sp, #16
   bb15a:	f002 f9d1 	bl	bd500 <_ZN6StringC1ERKS_>
   bb15e:	a804      	add	r0, sp, #16
   bb160:	47a0      	blx	r4
   bb162:	4604      	mov	r4, r0
   bb164:	a804      	add	r0, sp, #16
   bb166:	f002 f935 	bl	bd3d4 <_ZN6StringD1Ev>
    String p(param);
   bb16a:	4668      	mov	r0, sp
   bb16c:	f002 f932 	bl	bd3d4 <_ZN6StringD1Ev>
}
   bb170:	4620      	mov	r0, r4
   bb172:	b008      	add	sp, #32
   bb174:	bd10      	pop	{r4, pc}

000bb176 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bb176:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bb178:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bb17a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bb17e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bb180:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bb182:	461a      	mov	r2, r3
   bb184:	4669      	mov	r1, sp
   bb186:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bb188:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bb18c:	f8ad 4000 	strh.w	r4, [sp]
   bb190:	f7ff fd04 	bl	bab9c <spark_function>
}
   bb194:	b004      	add	sp, #16
   bb196:	bd10      	pop	{r4, pc}

000bb198 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bb198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bb19a:	230c      	movs	r3, #12
   bb19c:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bb1a0:	6803      	ldr	r3, [r0, #0]
   bb1a2:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bb1a6:	7a03      	ldrb	r3, [r0, #8]
   bb1a8:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bb1ac:	6843      	ldr	r3, [r0, #4]
   bb1ae:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bb1b0:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bb1b2:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bb1b4:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb1b8:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bb1ba:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bb1be:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb1c2:	f7ff fd33 	bl	bac2c <spark_cloud_disconnect>
}
   bb1c6:	b005      	add	sp, #20
   bb1c8:	f85d fb04 	ldr.w	pc, [sp], #4

000bb1cc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb1cc:	680b      	ldr	r3, [r1, #0]
   bb1ce:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bb1d0:	684b      	ldr	r3, [r1, #4]
   bb1d2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bb1d4:	b113      	cbz	r3, bb1dc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bb1d6:	685a      	ldr	r2, [r3, #4]
   bb1d8:	3201      	adds	r2, #1
   bb1da:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb1dc:	4770      	bx	lr

000bb1de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bb1de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb1e0:	4604      	mov	r4, r0
   bb1e2:	4668      	mov	r0, sp
   bb1e4:	460d      	mov	r5, r1
   bb1e6:	f7ff fff1 	bl	bb1cc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb1ea:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bb1ec:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb1ee:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bb1f0:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bb1f2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bb1f4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bb1f6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bb1f8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bb1fa:	f7fa fc3d 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bb1fe:	b135      	cbz	r5, bb20e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bb200:	1d28      	adds	r0, r5, #4
   bb202:	f7fa fc39 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb206:	2108      	movs	r1, #8
   bb208:	4628      	mov	r0, r5
   bb20a:	f7f8 ff48 	bl	b409e <_ZdlPvj>
        return p;
    }
   bb20e:	4620      	mov	r0, r4
   bb210:	b003      	add	sp, #12
   bb212:	bd30      	pop	{r4, r5, pc}

000bb214 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bb214:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb216:	b510      	push	{r4, lr}
      if (_M_empty())
   bb218:	b90a      	cbnz	r2, bb21e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bb21a:	f002 ff8d 	bl	be138 <_ZSt25__throw_bad_function_callv>
    }
   bb21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb222:	68c3      	ldr	r3, [r0, #12]
   bb224:	4718      	bx	r3

000bb226 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb226:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb228:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bb22a:	f100 0110 	add.w	r1, r0, #16
   bb22e:	f7ff fff1 	bl	bb214 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bb232:	bd08      	pop	{r3, pc}

000bb234 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bb234:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb236:	b510      	push	{r4, lr}
      if (_M_empty())
   bb238:	b90a      	cbnz	r2, bb23e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bb23a:	f002 ff7d 	bl	be138 <_ZSt25__throw_bad_function_callv>
    }
   bb23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb242:	68c3      	ldr	r3, [r0, #12]
   bb244:	4718      	bx	r3

000bb246 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb246:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb248:	6800      	ldr	r0, [r0, #0]
   bb24a:	f100 0110 	add.w	r1, r0, #16
   bb24e:	f7ff fff1 	bl	bb234 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bb252:	bd08      	pop	{r3, pc}

000bb254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bb254:	b538      	push	{r3, r4, r5, lr}
   bb256:	2300      	movs	r3, #0
   bb258:	4604      	mov	r4, r0
   bb25a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb25c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bb25e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb260:	f7f8 ff19 	bl	b4096 <_Znwj>
   bb264:	b128      	cbz	r0, bb272 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bb266:	2301      	movs	r3, #1
   bb268:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bb26c:	4b02      	ldr	r3, [pc, #8]	; (bb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bb26e:	6003      	str	r3, [r0, #0]
   bb270:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb272:	6020      	str	r0, [r4, #0]
	}
   bb274:	4620      	mov	r0, r4
   bb276:	bd38      	pop	{r3, r4, r5, pc}
   bb278:	000c0514 	.word	0x000c0514

000bb27c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bb27c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb27e:	2300      	movs	r3, #0
   bb280:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bb282:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bb284:	4604      	mov	r4, r0
   bb286:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bb288:	b12b      	cbz	r3, bb296 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb28a:	2202      	movs	r2, #2
   bb28c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb28e:	68eb      	ldr	r3, [r5, #12]
   bb290:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bb292:	68ab      	ldr	r3, [r5, #8]
   bb294:	60a3      	str	r3, [r4, #8]
    }
   bb296:	4620      	mov	r0, r4
   bb298:	bd38      	pop	{r3, r4, r5, pc}
	...

000bb29c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bb29c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb29e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bb2a0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bb2a2:	4668      	mov	r0, sp
   bb2a4:	f7ff ff1a 	bl	bb0dc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bb2a8:	f04f 0302 	mov.w	r3, #2
   bb2ac:	e8d4 2f4f 	ldrexb	r2, [r4]
   bb2b0:	2a00      	cmp	r2, #0
   bb2b2:	d103      	bne.n	bb2bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bb2b4:	e8c4 3f41 	strexb	r1, r3, [r4]
   bb2b8:	2900      	cmp	r1, #0
   bb2ba:	d1f7      	bne.n	bb2ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bb2bc:	d125      	bne.n	bb30a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bb2be:	f104 050c 	add.w	r5, r4, #12
   bb2c2:	4669      	mov	r1, sp
   bb2c4:	4628      	mov	r0, r5
   bb2c6:	f7ff ff09 	bl	bb0dc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bb2ca:	f3bf 8f5b 	dmb	ish
   bb2ce:	2301      	movs	r3, #1
   bb2d0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bb2d2:	2000      	movs	r0, #0
   bb2d4:	f104 0308 	add.w	r3, r4, #8
   bb2d8:	f3bf 8f5b 	dmb	ish
   bb2dc:	e853 6f00 	ldrex	r6, [r3]
   bb2e0:	e843 0200 	strex	r2, r0, [r3]
   bb2e4:	2a00      	cmp	r2, #0
   bb2e6:	d1f9      	bne.n	bb2dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bb2e8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bb2ec:	b16e      	cbz	r6, bb30a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bb2ee:	f7ff fbfb 	bl	baae8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bb2f2:	b178      	cbz	r0, bb314 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bb2f4:	4629      	mov	r1, r5
   bb2f6:	4630      	mov	r0, r6
   bb2f8:	f7ff ff8c 	bl	bb214 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bb2fc:	4630      	mov	r0, r6
   bb2fe:	f7f9 fa6b 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bb302:	2110      	movs	r1, #16
   bb304:	4630      	mov	r0, r6
   bb306:	f7f8 feca 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bb30a:	4668      	mov	r0, sp
   bb30c:	f7ff fef3 	bl	bb0f6 <_ZN8particle5ErrorD1Ev>
    }
   bb310:	b009      	add	sp, #36	; 0x24
   bb312:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb314:	4631      	mov	r1, r6
   bb316:	a802      	add	r0, sp, #8
   bb318:	f7ff ffb0 	bl	bb27c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bb31c:	68e0      	ldr	r0, [r4, #12]
   bb31e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb322:	b108      	cbz	r0, bb328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bb324:	f003 fcd8 	bl	becd8 <strdup>
        type_(type) {
   bb328:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bb32a:	2010      	movs	r0, #16
   bb32c:	f8ad 501c 	strh.w	r5, [sp, #28]
   bb330:	f7f8 feb1 	bl	b4096 <_Znwj>
   bb334:	4605      	mov	r5, r0
   bb336:	b1e8      	cbz	r0, bb374 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bb338:	2700      	movs	r7, #0
   bb33a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb33c:	2018      	movs	r0, #24
   bb33e:	f7f8 feaa 	bl	b4096 <_Znwj>
   bb342:	4604      	mov	r4, r0
   bb344:	b188      	cbz	r0, bb36a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bb346:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bb348:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bb34a:	a802      	add	r0, sp, #8
   bb34c:	f7fb fde7 	bl	b6f1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb350:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bb352:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb354:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb356:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb358:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb35a:	a906      	add	r1, sp, #24
   bb35c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb35e:	60e3      	str	r3, [r4, #12]
   bb360:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bb364:	9205      	str	r2, [sp, #20]
   bb366:	f7ff feb9 	bl	bb0dc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bb36a:	4b08      	ldr	r3, [pc, #32]	; (bb38c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bb36c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb36e:	4b08      	ldr	r3, [pc, #32]	; (bb390 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb370:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb372:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bb374:	a806      	add	r0, sp, #24
   bb376:	f7ff febe 	bl	bb0f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bb37a:	a802      	add	r0, sp, #8
   bb37c:	f7f9 fa2c 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bb380:	2200      	movs	r2, #0
   bb382:	4629      	mov	r1, r5
   bb384:	4803      	ldr	r0, [pc, #12]	; (bb394 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bb386:	f7ff fbb7 	bl	baaf8 <application_thread_invoke>
   bb38a:	e7b7      	b.n	bb2fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bb38c:	000bb227 	.word	0x000bb227
   bb390:	000bb4a9 	.word	0x000bb4a9
   bb394:	000bae03 	.word	0x000bae03

000bb398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bb398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb39c:	b08b      	sub	sp, #44	; 0x2c
   bb39e:	4605      	mov	r5, r0
   bb3a0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bb3a4:	460f      	mov	r7, r1
   bb3a6:	4690      	mov	r8, r2
   bb3a8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb3aa:	f7ff fc0f 	bl	babcc <spark_cloud_flag_connected>
   bb3ae:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bb3b0:	4683      	mov	fp, r0
   bb3b2:	bb38      	cbnz	r0, bb404 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bb3b4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bb3b8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb3ba:	a905      	add	r1, sp, #20
   bb3bc:	4630      	mov	r0, r6
   bb3be:	f8ad 3018 	strh.w	r3, [sp, #24]
   bb3c2:	f7ff fe8b 	bl	bb0dc <_ZN8particle5ErrorC1EOS0_>
   bb3c6:	2014      	movs	r0, #20
   bb3c8:	f7f8 fe65 	bl	b4096 <_Znwj>
   bb3cc:	4604      	mov	r4, r0
   bb3ce:	b148      	cbz	r0, bb3e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bb3d0:	2302      	movs	r3, #2
   bb3d2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb3d4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bb3d6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb3da:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bb3dc:	4631      	mov	r1, r6
   bb3de:	300c      	adds	r0, #12
   bb3e0:	f7ff fe7c 	bl	bb0dc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb3e4:	4628      	mov	r0, r5
	: __shared_count(__p)
   bb3e6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb3e8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bb3ec:	f7ff ff32 	bl	bb254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb3f0:	4630      	mov	r0, r6
   bb3f2:	f7ff fe80 	bl	bb0f6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bb3f6:	a805      	add	r0, sp, #20
   bb3f8:	f7ff fe7d 	bl	bb0f6 <_ZN8particle5ErrorD1Ev>
}
   bb3fc:	4628      	mov	r0, r5
   bb3fe:	b00b      	add	sp, #44	; 0x2c
   bb400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bb404:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bb406:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bb408:	2014      	movs	r0, #20
   bb40a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bb40e:	9307      	str	r3, [sp, #28]
   bb410:	f7f8 fe41 	bl	b4096 <_Znwj>
   bb414:	4601      	mov	r1, r0
   bb416:	b118      	cbz	r0, bb420 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bb418:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb41c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb41e:	7044      	strb	r4, [r0, #1]
   bb420:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb422:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bb424:	f7ff ff16 	bl	bb254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bb428:	4b1e      	ldr	r3, [pc, #120]	; (bb4a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bb42a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bb42c:	2008      	movs	r0, #8
   bb42e:	f7f8 fe32 	bl	b4096 <_Znwj>
   bb432:	4604      	mov	r4, r0
   bb434:	b110      	cbz	r0, bb43c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bb436:	a903      	add	r1, sp, #12
   bb438:	f7ff fec8 	bl	bb1cc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bb43c:	9600      	str	r6, [sp, #0]
   bb43e:	fa5f f38a 	uxtb.w	r3, sl
   bb442:	464a      	mov	r2, r9
   bb444:	4641      	mov	r1, r8
   bb446:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bb448:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bb44a:	f7ff fbc7 	bl	babdc <spark_send_event>
   bb44e:	b9b8      	cbnz	r0, bb480 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bb450:	9b03      	ldr	r3, [sp, #12]
   bb452:	785b      	ldrb	r3, [r3, #1]
   bb454:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bb458:	b993      	cbnz	r3, bb480 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bb45a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bb45e:	a905      	add	r1, sp, #20
   bb460:	a803      	add	r0, sp, #12
   bb462:	9205      	str	r2, [sp, #20]
   bb464:	f8ad 3018 	strh.w	r3, [sp, #24]
   bb468:	f7ff ff18 	bl	bb29c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bb46c:	a805      	add	r0, sp, #20
   bb46e:	f7ff fe42 	bl	bb0f6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bb472:	a805      	add	r0, sp, #20
   bb474:	9909      	ldr	r1, [sp, #36]	; 0x24
   bb476:	f7ff feb2 	bl	bb1de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bb47a:	a806      	add	r0, sp, #24
   bb47c:	f7fa fafc 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb480:	a903      	add	r1, sp, #12
   bb482:	a805      	add	r0, sp, #20
   bb484:	f7ff fea2 	bl	bb1cc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb488:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bb48a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb48c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bb48e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bb490:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bb492:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bb494:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bb496:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bb498:	f7fa faee 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb49c:	a804      	add	r0, sp, #16
   bb49e:	f7fa faeb 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bb4a2:	e7ab      	b.n	bb3fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bb4a4:	000bb525 	.word	0x000bb525

000bb4a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bb4a8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bb4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb4ac:	4605      	mov	r5, r0
	switch (__op)
   bb4ae:	d103      	bne.n	bb4b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bb4b0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bb4b2:	6003      	str	r3, [r0, #0]
      }
   bb4b4:	2000      	movs	r0, #0
   bb4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bb4b8:	2a02      	cmp	r2, #2
   bb4ba:	d010      	beq.n	bb4de <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bb4bc:	2a03      	cmp	r2, #3
   bb4be:	d1f9      	bne.n	bb4b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bb4c0:	6804      	ldr	r4, [r0, #0]
   bb4c2:	2c00      	cmp	r4, #0
   bb4c4:	d0f6      	beq.n	bb4b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bb4c6:	f104 0010 	add.w	r0, r4, #16
   bb4ca:	f7ff fe14 	bl	bb0f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bb4ce:	4620      	mov	r0, r4
   bb4d0:	f7f9 f982 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bb4d4:	2118      	movs	r1, #24
   bb4d6:	4620      	mov	r0, r4
   bb4d8:	f7f8 fde1 	bl	b409e <_ZdlPvj>
   bb4dc:	e7ea      	b.n	bb4b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bb4de:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bb4e0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bb4e2:	f7f8 fdd8 	bl	b4096 <_Znwj>
   bb4e6:	4604      	mov	r4, r0
   bb4e8:	b150      	cbz	r0, bb500 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bb4ea:	4631      	mov	r1, r6
   bb4ec:	f7ff fec6 	bl	bb27c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bb4f0:	6930      	ldr	r0, [r6, #16]
   bb4f2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb4f6:	b108      	cbz	r0, bb4fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bb4f8:	f003 fbee 	bl	becd8 <strdup>
        type_(type) {
   bb4fc:	6120      	str	r0, [r4, #16]
   bb4fe:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bb500:	602c      	str	r4, [r5, #0]
	}
   bb502:	e7d7      	b.n	bb4b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bb504 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bb504:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb506:	2300      	movs	r3, #0
   bb508:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bb50a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bb50c:	4604      	mov	r4, r0
   bb50e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bb510:	b12b      	cbz	r3, bb51e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb512:	2202      	movs	r2, #2
   bb514:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb516:	68eb      	ldr	r3, [r5, #12]
   bb518:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bb51a:	68ab      	ldr	r3, [r5, #8]
   bb51c:	60a3      	str	r3, [r4, #8]
    }
   bb51e:	4620      	mov	r0, r4
   bb520:	bd38      	pop	{r3, r4, r5, pc}
	...

000bb524 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bb524:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb526:	b089      	sub	sp, #36	; 0x24
   bb528:	4604      	mov	r4, r0
   bb52a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bb52c:	a801      	add	r0, sp, #4
   bb52e:	4611      	mov	r1, r2
   bb530:	f7ff fe55 	bl	bb1de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bb534:	b1a4      	cbz	r4, bb560 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bb536:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb538:	b11d      	cbz	r5, bb542 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bb53a:	4628      	mov	r0, r5
   bb53c:	f003 fbcc 	bl	becd8 <strdup>
   bb540:	4605      	mov	r5, r0
   bb542:	a801      	add	r0, sp, #4
   bb544:	a903      	add	r1, sp, #12
        type_(type) {
   bb546:	9503      	str	r5, [sp, #12]
   bb548:	f8ad 4010 	strh.w	r4, [sp, #16]
   bb54c:	f7ff fea6 	bl	bb29c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bb550:	a803      	add	r0, sp, #12
   bb552:	f7ff fdd0 	bl	bb0f6 <_ZN8particle5ErrorD1Ev>
   bb556:	a802      	add	r0, sp, #8
   bb558:	f7fa fa8e 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb55c:	b009      	add	sp, #36	; 0x24
   bb55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bb560:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bb562:	2301      	movs	r3, #1
   bb564:	e8d5 2f4f 	ldrexb	r2, [r5]
   bb568:	2a00      	cmp	r2, #0
   bb56a:	d103      	bne.n	bb574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bb56c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bb570:	2900      	cmp	r1, #0
   bb572:	d1f7      	bne.n	bb564 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bb574:	d1ef      	bne.n	bb556 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bb576:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bb578:	f3bf 8f5b 	dmb	ish
   bb57c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bb57e:	1d2b      	adds	r3, r5, #4
   bb580:	f3bf 8f5b 	dmb	ish
   bb584:	e853 6f00 	ldrex	r6, [r3]
   bb588:	e843 4200 	strex	r2, r4, [r3]
   bb58c:	2a00      	cmp	r2, #0
   bb58e:	d1f9      	bne.n	bb584 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bb590:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bb594:	2e00      	cmp	r6, #0
   bb596:	d0de      	beq.n	bb556 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bb598:	4620      	mov	r0, r4
   bb59a:	f7ff faa5 	bl	baae8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bb59e:	4607      	mov	r7, r0
   bb5a0:	b160      	cbz	r0, bb5bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bb5a2:	f105 010c 	add.w	r1, r5, #12
   bb5a6:	4630      	mov	r0, r6
   bb5a8:	f7ff fe44 	bl	bb234 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bb5ac:	4630      	mov	r0, r6
   bb5ae:	f7f9 f913 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bb5b2:	2110      	movs	r1, #16
   bb5b4:	4630      	mov	r0, r6
   bb5b6:	f7f8 fd72 	bl	b409e <_ZdlPvj>
   bb5ba:	e7cc      	b.n	bb556 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb5bc:	4631      	mov	r1, r6
   bb5be:	a803      	add	r0, sp, #12
   bb5c0:	f7ff ffa0 	bl	bb504 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb5c4:	7b2b      	ldrb	r3, [r5, #12]
   bb5c6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bb5ca:	2010      	movs	r0, #16
   bb5cc:	f7f8 fd63 	bl	b4096 <_Znwj>
   bb5d0:	4605      	mov	r5, r0
   bb5d2:	b1d0      	cbz	r0, bb60a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bb5d4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb5d6:	2014      	movs	r0, #20
   bb5d8:	f7f8 fd5d 	bl	b4096 <_Znwj>
   bb5dc:	4604      	mov	r4, r0
   bb5de:	b178      	cbz	r0, bb600 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bb5e0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bb5e2:	4601      	mov	r1, r0
   bb5e4:	a803      	add	r0, sp, #12
   bb5e6:	f7fb fc9a 	bl	b6f1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb5ea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb5ec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb5ee:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb5f0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bb5f2:	9205      	str	r2, [sp, #20]
   bb5f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb5f6:	60e3      	str	r3, [r4, #12]
   bb5f8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bb5fc:	9206      	str	r2, [sp, #24]
   bb5fe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bb600:	4b06      	ldr	r3, [pc, #24]	; (bb61c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bb602:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb604:	4b06      	ldr	r3, [pc, #24]	; (bb620 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb606:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb608:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bb60a:	a803      	add	r0, sp, #12
   bb60c:	f7f9 f8e4 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bb610:	2200      	movs	r2, #0
   bb612:	4629      	mov	r1, r5
   bb614:	4803      	ldr	r0, [pc, #12]	; (bb624 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bb616:	f7ff fa6f 	bl	baaf8 <application_thread_invoke>
   bb61a:	e7c7      	b.n	bb5ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bb61c:	000bb247 	.word	0x000bb247
   bb620:	000bb629 	.word	0x000bb629
   bb624:	000bae03 	.word	0x000bae03

000bb628 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bb628:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bb62a:	b570      	push	{r4, r5, r6, lr}
   bb62c:	4604      	mov	r4, r0
	switch (__op)
   bb62e:	d103      	bne.n	bb638 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bb630:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bb632:	6003      	str	r3, [r0, #0]
      }
   bb634:	2000      	movs	r0, #0
   bb636:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bb638:	2a02      	cmp	r2, #2
   bb63a:	d00c      	beq.n	bb656 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bb63c:	2a03      	cmp	r2, #3
   bb63e:	d1f9      	bne.n	bb634 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bb640:	6804      	ldr	r4, [r0, #0]
   bb642:	2c00      	cmp	r4, #0
   bb644:	d0f6      	beq.n	bb634 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bb646:	4620      	mov	r0, r4
   bb648:	f7f9 f8c6 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bb64c:	2114      	movs	r1, #20
   bb64e:	4620      	mov	r0, r4
   bb650:	f7f8 fd25 	bl	b409e <_ZdlPvj>
   bb654:	e7ee      	b.n	bb634 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bb656:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bb658:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bb65a:	f7f8 fd1c 	bl	b4096 <_Znwj>
   bb65e:	4605      	mov	r5, r0
   bb660:	b120      	cbz	r0, bb66c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bb662:	4631      	mov	r1, r6
   bb664:	f7ff ff4e 	bl	bb504 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bb668:	7c33      	ldrb	r3, [r6, #16]
   bb66a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bb66c:	6025      	str	r5, [r4, #0]
	}
   bb66e:	e7e1      	b.n	bb634 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bb670 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb670:	2200      	movs	r2, #0
   bb672:	6840      	ldr	r0, [r0, #4]
   bb674:	4611      	mov	r1, r2
   bb676:	f7ff bb19 	b.w	bacac <network_listening>

000bb67a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb67a:	2200      	movs	r2, #0
   bb67c:	6840      	ldr	r0, [r0, #4]
   bb67e:	4611      	mov	r1, r2
   bb680:	f7ff bb24 	b.w	baccc <network_get_listen_timeout>

000bb684 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb684:	6840      	ldr	r0, [r0, #4]
   bb686:	2200      	movs	r2, #0
   bb688:	f7ff bb18 	b.w	bacbc <network_set_listen_timeout>

000bb68c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb68c:	6840      	ldr	r0, [r0, #4]
   bb68e:	2200      	movs	r2, #0
   bb690:	f081 0101 	eor.w	r1, r1, #1
   bb694:	f7ff bb02 	b.w	bac9c <network_listen>

000bb698 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb698:	2300      	movs	r3, #0
   bb69a:	6840      	ldr	r0, [r0, #4]
   bb69c:	461a      	mov	r2, r3
   bb69e:	4619      	mov	r1, r3
   bb6a0:	f7ff baf4 	b.w	bac8c <network_off>

000bb6a4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb6a4:	2300      	movs	r3, #0
   bb6a6:	6840      	ldr	r0, [r0, #4]
   bb6a8:	461a      	mov	r2, r3
   bb6aa:	4619      	mov	r1, r3
   bb6ac:	f7ff bae6 	b.w	bac7c <network_on>

000bb6b0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bb6b0:	2200      	movs	r2, #0
   bb6b2:	6840      	ldr	r0, [r0, #4]
   bb6b4:	4611      	mov	r1, r2
   bb6b6:	f7ff bad9 	b.w	bac6c <network_ready>

000bb6ba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb6ba:	2200      	movs	r2, #0
   bb6bc:	6840      	ldr	r0, [r0, #4]
   bb6be:	4611      	mov	r1, r2
   bb6c0:	f7ff bac4 	b.w	bac4c <network_connecting>

000bb6c4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb6c4:	6840      	ldr	r0, [r0, #4]
   bb6c6:	2200      	movs	r2, #0
   bb6c8:	2102      	movs	r1, #2
   bb6ca:	f7ff bac7 	b.w	bac5c <network_disconnect>

000bb6ce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb6ce:	2300      	movs	r3, #0
   bb6d0:	6840      	ldr	r0, [r0, #4]
   bb6d2:	461a      	mov	r2, r3
   bb6d4:	f7ff bab2 	b.w	bac3c <network_connect>

000bb6d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bb6d8:	4b02      	ldr	r3, [pc, #8]	; (bb6e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bb6da:	2203      	movs	r2, #3
   bb6dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bb6de:	4a02      	ldr	r2, [pc, #8]	; (bb6e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bb6e0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bb6e2:	4770      	bx	lr
   bb6e4:	2003e5b4 	.word	0x2003e5b4
   bb6e8:	000c0530 	.word	0x000c0530

000bb6ec <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bb6ec:	6800      	ldr	r0, [r0, #0]
   bb6ee:	f000 b8e7 	b.w	bb8c0 <_ZN7TwoWire4lockEv>

000bb6f2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bb6f2:	b510      	push	{r4, lr}
   bb6f4:	4604      	mov	r4, r0
      lock_(_lock) {
   bb6f6:	6001      	str	r1, [r0, #0]
   bb6f8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bb6fa:	b10a      	cbz	r2, bb700 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bb6fc:	f7ff fff6 	bl	bb6ec <_ZN9FuelGauge4lockEv>
}
   bb700:	4620      	mov	r0, r4
   bb702:	bd10      	pop	{r4, pc}

000bb704 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bb704:	b513      	push	{r0, r1, r4, lr}
   bb706:	4604      	mov	r4, r0
   bb708:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bb70a:	f002 fca7 	bl	be05c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bb70e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bb710:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bb712:	4620      	mov	r0, r4
   bb714:	f7ff ffed 	bl	bb6f2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bb718:	4620      	mov	r0, r4
   bb71a:	b002      	add	sp, #8
   bb71c:	bd10      	pop	{r4, pc}

000bb71e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bb71e:	6800      	ldr	r0, [r0, #0]
   bb720:	f000 b8d7 	b.w	bb8d2 <_ZN7TwoWire6unlockEv>

000bb724 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bb724:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bb728:	4604      	mov	r4, r0
   bb72a:	461d      	mov	r5, r3
   bb72c:	460f      	mov	r7, r1
   bb72e:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bb730:	f7ff ffdc 	bl	bb6ec <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bb734:	2236      	movs	r2, #54	; 0x36
   bb736:	2300      	movs	r3, #0
   bb738:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bb73c:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bb73e:	f04f 0801 	mov.w	r8, #1
   bb742:	230a      	movs	r3, #10
   bb744:	4669      	mov	r1, sp
   bb746:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bb74a:	f000 f89d 	bl	bb888 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bb74e:	6820      	ldr	r0, [r4, #0]
   bb750:	6803      	ldr	r3, [r0, #0]
   bb752:	4639      	mov	r1, r7
   bb754:	689b      	ldr	r3, [r3, #8]
   bb756:	4798      	blx	r3
    i2c_.write(MSB);
   bb758:	6820      	ldr	r0, [r4, #0]
   bb75a:	6803      	ldr	r3, [r0, #0]
   bb75c:	4631      	mov	r1, r6
   bb75e:	689b      	ldr	r3, [r3, #8]
   bb760:	4798      	blx	r3
    i2c_.write(LSB);
   bb762:	6820      	ldr	r0, [r4, #0]
   bb764:	6803      	ldr	r3, [r0, #0]
   bb766:	4629      	mov	r1, r5
   bb768:	689b      	ldr	r3, [r3, #8]
   bb76a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bb76c:	4641      	mov	r1, r8
   bb76e:	6820      	ldr	r0, [r4, #0]
   bb770:	f000 f8a2 	bl	bb8b8 <_ZN7TwoWire15endTransmissionEh>
   bb774:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bb776:	4620      	mov	r0, r4
   bb778:	bf0c      	ite	eq
   bb77a:	2500      	moveq	r5, #0
   bb77c:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bb780:	f7ff ffcd 	bl	bb71e <_ZN9FuelGauge6unlockEv>
}
   bb784:	4628      	mov	r0, r5
   bb786:	b004      	add	sp, #16
   bb788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb78c <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bb78c:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bb78e:	2240      	movs	r2, #64	; 0x40
   bb790:	2300      	movs	r3, #0
   bb792:	2106      	movs	r1, #6
   bb794:	f7ff ffc6 	bl	bb724 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bb798:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bb79c:	bd08      	pop	{r3, pc}

000bb79e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bb79e:	4770      	bx	lr

000bb7a0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bb7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb7a2:	4606      	mov	r6, r0
   bb7a4:	4615      	mov	r5, r2
   bb7a6:	460c      	mov	r4, r1
   bb7a8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bb7aa:	42bc      	cmp	r4, r7
   bb7ac:	d006      	beq.n	bb7bc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bb7ae:	6833      	ldr	r3, [r6, #0]
   bb7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   bb7b4:	689b      	ldr	r3, [r3, #8]
   bb7b6:	4630      	mov	r0, r6
   bb7b8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bb7ba:	e7f6      	b.n	bb7aa <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bb7bc:	4628      	mov	r0, r5
   bb7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb7c0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bb7c0:	7c00      	ldrb	r0, [r0, #16]
   bb7c2:	2200      	movs	r2, #0
   bb7c4:	f7fe bf8e 	b.w	ba6e4 <hal_i2c_write>

000bb7c8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bb7c8:	7c00      	ldrb	r0, [r0, #16]
   bb7ca:	2100      	movs	r1, #0
   bb7cc:	f7fe bf92 	b.w	ba6f4 <hal_i2c_available>

000bb7d0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bb7d0:	7c00      	ldrb	r0, [r0, #16]
   bb7d2:	2100      	movs	r1, #0
   bb7d4:	f7fe bf96 	b.w	ba704 <hal_i2c_read>

000bb7d8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bb7d8:	7c00      	ldrb	r0, [r0, #16]
   bb7da:	2100      	movs	r1, #0
   bb7dc:	f7fe bf9a 	b.w	ba714 <hal_i2c_peek>

000bb7e0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bb7e0:	7c00      	ldrb	r0, [r0, #16]
   bb7e2:	2100      	movs	r1, #0
   bb7e4:	f7fe bf9e 	b.w	ba724 <hal_i2c_flush>

000bb7e8 <_ZN7TwoWireD0Ev>:
   bb7e8:	b510      	push	{r4, lr}
   bb7ea:	2114      	movs	r1, #20
   bb7ec:	4604      	mov	r4, r0
   bb7ee:	f7f8 fc56 	bl	b409e <_ZdlPvj>
   bb7f2:	4620      	mov	r0, r4
   bb7f4:	bd10      	pop	{r4, pc}
	...

000bb7f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb7f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bb7fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb7fe:	4604      	mov	r4, r0
   bb800:	4608      	mov	r0, r1
   bb802:	2100      	movs	r1, #0
   bb804:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb808:	4b03      	ldr	r3, [pc, #12]	; (bb818 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bb80a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bb80c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bb80e:	4611      	mov	r1, r2
   bb810:	f7fe ff98 	bl	ba744 <hal_i2c_init>
}
   bb814:	4620      	mov	r0, r4
   bb816:	bd10      	pop	{r4, pc}
   bb818:	000c056c 	.word	0x000c056c

000bb81c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bb81c:	2300      	movs	r3, #0
   bb81e:	7c00      	ldrb	r0, [r0, #16]
   bb820:	461a      	mov	r2, r3
   bb822:	4619      	mov	r1, r3
   bb824:	f7fe bf46 	b.w	ba6b4 <hal_i2c_begin>

000bb828 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bb828:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb82a:	2200      	movs	r2, #0
   bb82c:	2314      	movs	r3, #20
   bb82e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bb832:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bb836:	780b      	ldrb	r3, [r1, #0]
   bb838:	f88d 3008 	strb.w	r3, [sp, #8]
   bb83c:	684b      	ldr	r3, [r1, #4]
   bb83e:	9303      	str	r3, [sp, #12]
   bb840:	68cb      	ldr	r3, [r1, #12]
   bb842:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bb844:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb846:	7a0b      	ldrb	r3, [r1, #8]
   bb848:	9305      	str	r3, [sp, #20]
   bb84a:	a901      	add	r1, sp, #4
   bb84c:	f7fe ff92 	bl	ba774 <hal_i2c_request_ex>
}
   bb850:	b007      	add	sp, #28
   bb852:	f85d fb04 	ldr.w	pc, [sp], #4

000bb856 <_ZN7TwoWire11requestFromEhjh>:
{
   bb856:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bb858:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bb85a:	f88d 1000 	strb.w	r1, [sp]
   bb85e:	f04f 0164 	mov.w	r1, #100	; 0x64
   bb862:	9103      	str	r1, [sp, #12]
   bb864:	bf18      	it	ne
   bb866:	2301      	movne	r3, #1
   bb868:	4669      	mov	r1, sp
    size_ = size;
   bb86a:	9201      	str	r2, [sp, #4]
   bb86c:	f88d 3008 	strb.w	r3, [sp, #8]
   bb870:	f7ff ffda 	bl	bb828 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bb874:	b005      	add	sp, #20
   bb876:	f85d fb04 	ldr.w	pc, [sp], #4

000bb87a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bb87a:	7c00      	ldrb	r0, [r0, #16]
   bb87c:	2200      	movs	r2, #0
   bb87e:	f7fe bf21 	b.w	ba6c4 <hal_i2c_begin_transmission>

000bb882 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bb882:	b2c9      	uxtb	r1, r1
   bb884:	f7ff bff9 	b.w	bb87a <_ZN7TwoWire17beginTransmissionEh>

000bb888 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bb888:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb88a:	2300      	movs	r3, #0
   bb88c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bb890:	684a      	ldr	r2, [r1, #4]
   bb892:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bb894:	2314      	movs	r3, #20
    };
   bb896:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bb898:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bb89c:	780b      	ldrb	r3, [r1, #0]
    };
   bb89e:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb8a0:	7a0a      	ldrb	r2, [r1, #8]
   bb8a2:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bb8a4:	7c00      	ldrb	r0, [r0, #16]
    };
   bb8a6:	f88d 3008 	strb.w	r3, [sp, #8]
   bb8aa:	aa01      	add	r2, sp, #4
   bb8ac:	4619      	mov	r1, r3
   bb8ae:	f7fe ff09 	bl	ba6c4 <hal_i2c_begin_transmission>
}
   bb8b2:	b007      	add	sp, #28
   bb8b4:	f85d fb04 	ldr.w	pc, [sp], #4

000bb8b8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb8b8:	7c00      	ldrb	r0, [r0, #16]
   bb8ba:	2200      	movs	r2, #0
   bb8bc:	f7fe bf0a 	b.w	ba6d4 <hal_i2c_end_transmission>

000bb8c0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bb8c0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bb8c2:	2100      	movs	r1, #0
   bb8c4:	7c00      	ldrb	r0, [r0, #16]
   bb8c6:	f7fe ff45 	bl	ba754 <hal_i2c_lock>
}
   bb8ca:	fab0 f080 	clz	r0, r0
   bb8ce:	0940      	lsrs	r0, r0, #5
   bb8d0:	bd08      	pop	{r3, pc}

000bb8d2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bb8d2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bb8d4:	2100      	movs	r1, #0
   bb8d6:	7c00      	ldrb	r0, [r0, #16]
   bb8d8:	f7fe ff44 	bl	ba764 <hal_i2c_unlock>
}
   bb8dc:	fab0 f080 	clz	r0, r0
   bb8e0:	0940      	lsrs	r0, r0, #5
   bb8e2:	bd08      	pop	{r3, pc}

000bb8e4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bb8e4:	4700      	bx	r0
	...

000bb8e8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bb8e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bb8ec:	2400      	movs	r4, #0
{
   bb8ee:	461d      	mov	r5, r3
   bb8f0:	460f      	mov	r7, r1
   bb8f2:	4690      	mov	r8, r2
   bb8f4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bb8f6:	f7fe fecd 	bl	ba694 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bb8fa:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bb8fc:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bb900:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bb904:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bb908:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bb90c:	bfa2      	ittt	ge
   bb90e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bb912:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bb916:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bb918:	4907      	ldr	r1, [pc, #28]	; (bb938 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bb91a:	9400      	str	r4, [sp, #0]
   bb91c:	4643      	mov	r3, r8
   bb91e:	463a      	mov	r2, r7
   bb920:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bb922:	bfa8      	it	ge
   bb924:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bb928:	f7fe feac 	bl	ba684 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bb92c:	fab0 f080 	clz	r0, r0
   bb930:	0940      	lsrs	r0, r0, #5
   bb932:	b004      	add	sp, #16
   bb934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb938:	000bb8e5 	.word	0x000bb8e5

000bb93c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bb93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb93e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bb940:	f7fe fea8 	bl	ba694 <HAL_Interrupts_Detach>
   bb944:	4605      	mov	r5, r0
   bb946:	b970      	cbnz	r0, bb966 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bb948:	4f08      	ldr	r7, [pc, #32]	; (bb96c <_Z15detachInterruptt+0x30>)
   bb94a:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bb94e:	b146      	cbz	r6, bb962 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bb950:	4630      	mov	r0, r6
   bb952:	f7f8 ff41 	bl	b47d8 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bb956:	2110      	movs	r1, #16
   bb958:	4630      	mov	r0, r6
   bb95a:	f7f8 fba0 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bb95e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bb962:	2001      	movs	r0, #1
   bb964:	e000      	b.n	bb968 <_Z15detachInterruptt+0x2c>
        return false;
   bb966:	2000      	movs	r0, #0
    }
    return true;
}
   bb968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb96a:	bf00      	nop
   bb96c:	2003e5bc 	.word	0x2003e5bc

000bb970 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bb970:	4770      	bx	lr

000bb972 <_ZN9IPAddressD0Ev>:
   bb972:	b510      	push	{r4, lr}
   bb974:	2118      	movs	r1, #24
   bb976:	4604      	mov	r4, r0
   bb978:	f7f8 fb91 	bl	b409e <_ZdlPvj>
   bb97c:	4620      	mov	r0, r4
   bb97e:	bd10      	pop	{r4, pc}

000bb980 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bb980:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bb982:	7d03      	ldrb	r3, [r0, #20]
   bb984:	2b06      	cmp	r3, #6
{
   bb986:	b08d      	sub	sp, #52	; 0x34
   bb988:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb98a:	f100 0704 	add.w	r7, r0, #4
   bb98e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bb992:	d012      	beq.n	bb9ba <_ZNK9IPAddress7printToER5Print+0x3a>
   bb994:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bb998:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bb99c:	220a      	movs	r2, #10
   bb99e:	4630      	mov	r0, r6
   bb9a0:	f001 fb0d 	bl	bcfbe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bb9a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bb9a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bb9a8:	d019      	beq.n	bb9de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bb9aa:	2c00      	cmp	r4, #0
   bb9ac:	d0f4      	beq.n	bb998 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bb9ae:	212e      	movs	r1, #46	; 0x2e
   bb9b0:	4630      	mov	r0, r6
   bb9b2:	f001 faf5 	bl	bcfa0 <_ZN5Print5printEc>
   bb9b6:	4404      	add	r4, r0
   bb9b8:	e7ee      	b.n	bb998 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb9ba:	232f      	movs	r3, #47	; 0x2f
   bb9bc:	466a      	mov	r2, sp
   bb9be:	4639      	mov	r1, r7
   bb9c0:	200a      	movs	r0, #10
		buf[0] = 0;
   bb9c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb9c6:	f7fe fedd 	bl	ba784 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bb9ca:	4668      	mov	r0, sp
   bb9cc:	f003 f9a1 	bl	bed12 <strlen>
   bb9d0:	6833      	ldr	r3, [r6, #0]
   bb9d2:	4602      	mov	r2, r0
   bb9d4:	68db      	ldr	r3, [r3, #12]
   bb9d6:	4669      	mov	r1, sp
   bb9d8:	4630      	mov	r0, r6
   bb9da:	4798      	blx	r3
   bb9dc:	4604      	mov	r4, r0
    }
    return n;
}
   bb9de:	4620      	mov	r0, r4
   bb9e0:	b00d      	add	sp, #52	; 0x34
   bb9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb9e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bb9e4:	b510      	push	{r4, lr}
   bb9e6:	4b05      	ldr	r3, [pc, #20]	; (bb9fc <_ZN9IPAddressC1Ev+0x18>)
   bb9e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bb9ea:	2211      	movs	r2, #17
   bb9ec:	f840 3b04 	str.w	r3, [r0], #4
   bb9f0:	2100      	movs	r1, #0
   bb9f2:	f003 f8d3 	bl	beb9c <memset>
}
   bb9f6:	4620      	mov	r0, r4
   bb9f8:	bd10      	pop	{r4, pc}
   bb9fa:	bf00      	nop
   bb9fc:	000c0594 	.word	0x000c0594

000bba00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bba00:	4603      	mov	r3, r0
   bba02:	4a07      	ldr	r2, [pc, #28]	; (bba20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bba04:	b510      	push	{r4, lr}
   bba06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bba0a:	f101 0210 	add.w	r2, r1, #16
   bba0e:	f851 4b04 	ldr.w	r4, [r1], #4
   bba12:	f843 4b04 	str.w	r4, [r3], #4
   bba16:	4291      	cmp	r1, r2
   bba18:	d1f9      	bne.n	bba0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bba1a:	780a      	ldrb	r2, [r1, #0]
   bba1c:	701a      	strb	r2, [r3, #0]
}
   bba1e:	bd10      	pop	{r4, pc}
   bba20:	000c0594 	.word	0x000c0594

000bba24 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bba24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bba26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bba2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bba2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bba32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bba36:	2304      	movs	r3, #4
   bba38:	6041      	str	r1, [r0, #4]
   bba3a:	7503      	strb	r3, [r0, #20]
}
   bba3c:	bd10      	pop	{r4, pc}
	...

000bba40 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bba40:	b507      	push	{r0, r1, r2, lr}
   bba42:	4b06      	ldr	r3, [pc, #24]	; (bba5c <_ZN9IPAddressC1EPKh+0x1c>)
   bba44:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bba46:	78cb      	ldrb	r3, [r1, #3]
   bba48:	9300      	str	r3, [sp, #0]
   bba4a:	788b      	ldrb	r3, [r1, #2]
   bba4c:	784a      	ldrb	r2, [r1, #1]
   bba4e:	7809      	ldrb	r1, [r1, #0]
   bba50:	f7ff ffe8 	bl	bba24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bba54:	b003      	add	sp, #12
   bba56:	f85d fb04 	ldr.w	pc, [sp], #4
   bba5a:	bf00      	nop
   bba5c:	000c0594 	.word	0x000c0594

000bba60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bba60:	f100 0310 	add.w	r3, r0, #16
   bba64:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bba66:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bba6a:	2901      	cmp	r1, #1
   bba6c:	4618      	mov	r0, r3
   bba6e:	d108      	bne.n	bba82 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bba70:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bba74:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bba78:	3a01      	subs	r2, #1
   bba7a:	f103 0310 	add.w	r3, r3, #16
   bba7e:	d1f2      	bne.n	bba66 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bba80:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bba82:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bba84:	bf04      	itt	eq
   bba86:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bba8a:	1852      	addeq	r2, r2, r1
   bba8c:	e7f4      	b.n	bba78 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bba8e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bba8e:	b40e      	push	{r1, r2, r3}
   bba90:	b5f0      	push	{r4, r5, r6, r7, lr}
   bba92:	b088      	sub	sp, #32
   bba94:	af00      	add	r7, sp, #0
   bba96:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bba9a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bba9c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbaa0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bbaa2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbaa4:	462b      	mov	r3, r5
   bbaa6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bbaa8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbaaa:	f7ff f957 	bl	bad5c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bbaae:	280f      	cmp	r0, #15
   bbab0:	687a      	ldr	r2, [r7, #4]
   bbab2:	d91a      	bls.n	bbaea <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bbab4:	f100 0308 	add.w	r3, r0, #8
   bbab8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bbabc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bbabe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbac2:	1c41      	adds	r1, r0, #1
   bbac4:	462b      	mov	r3, r5
   bbac6:	4668      	mov	r0, sp
        va_start(args, fmt);
   bbac8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bbaca:	f7ff f947 	bl	bad5c <vsnprintf>
        if (n > 0) {
   bbace:	1e02      	subs	r2, r0, #0
   bbad0:	dd04      	ble.n	bbadc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bbad2:	6823      	ldr	r3, [r4, #0]
   bbad4:	4669      	mov	r1, sp
   bbad6:	689b      	ldr	r3, [r3, #8]
   bbad8:	4620      	mov	r0, r4
   bbada:	4798      	blx	r3
   bbadc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bbade:	3720      	adds	r7, #32
   bbae0:	46bd      	mov	sp, r7
   bbae2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bbae6:	b003      	add	sp, #12
   bbae8:	4770      	bx	lr
    } else if (n > 0) {
   bbaea:	2800      	cmp	r0, #0
   bbaec:	d0f7      	beq.n	bbade <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bbaee:	6823      	ldr	r3, [r4, #0]
   bbaf0:	4602      	mov	r2, r0
   bbaf2:	689b      	ldr	r3, [r3, #8]
   bbaf4:	f107 0110 	add.w	r1, r7, #16
   bbaf8:	4620      	mov	r0, r4
   bbafa:	4798      	blx	r3
}
   bbafc:	e7ef      	b.n	bbade <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bbafe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbafe:	b538      	push	{r3, r4, r5, lr}
   bbb00:	680b      	ldr	r3, [r1, #0]
   bbb02:	6003      	str	r3, [r0, #0]
   bbb04:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bbb06:	6843      	ldr	r3, [r0, #4]
   bbb08:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbb0a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bbb0c:	d008      	beq.n	bbb20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bbb0e:	b115      	cbz	r5, bbb16 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bbb10:	686b      	ldr	r3, [r5, #4]
   bbb12:	3301      	adds	r3, #1
   bbb14:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bbb16:	6860      	ldr	r0, [r4, #4]
   bbb18:	b108      	cbz	r0, bbb1e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bbb1a:	f7ff f986 	bl	bae2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bbb1e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbb20:	bd38      	pop	{r3, r4, r5, pc}

000bbb22 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bbb22:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bbb24:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bbb26:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bbb2a:	689b      	ldr	r3, [r3, #8]
   bbb2c:	2201      	movs	r2, #1
   bbb2e:	f10d 0107 	add.w	r1, sp, #7
   bbb32:	4798      	blx	r3
}
   bbb34:	b003      	add	sp, #12
   bbb36:	f85d fb04 	ldr.w	pc, [sp], #4

000bbb3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bbb3a:	460b      	mov	r3, r1
   bbb3c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bbb3e:	2200      	movs	r2, #0
   bbb40:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bbb42:	e9c0 2200 	strd	r2, r2, [r0]
   bbb46:	4604      	mov	r4, r0
        t_ = t;
   bbb48:	6083      	str	r3, [r0, #8]
    if (t) {
   bbb4a:	b90b      	cbnz	r3, bbb50 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bbb4c:	4620      	mov	r0, r4
   bbb4e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bbb50:	f7ff ffd5 	bl	bbafe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bbb54:	e7fa      	b.n	bbb4c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bbb56 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bbb56:	6883      	ldr	r3, [r0, #8]
   bbb58:	b1eb      	cbz	r3, bbb96 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bbb5a:	781a      	ldrb	r2, [r3, #0]
   bbb5c:	2a03      	cmp	r2, #3
   bbb5e:	d81a      	bhi.n	bbb96 <_ZNK5spark9JSONValue4typeEv+0x40>
   bbb60:	e8df f002 	tbb	[pc, r2]
   bbb64:	1b021704 	.word	0x1b021704
   bbb68:	2005      	movs	r0, #5
   bbb6a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bbb6c:	6802      	ldr	r2, [r0, #0]
   bbb6e:	685b      	ldr	r3, [r3, #4]
   bbb70:	6852      	ldr	r2, [r2, #4]
   bbb72:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bbb74:	282d      	cmp	r0, #45	; 0x2d
   bbb76:	d012      	beq.n	bbb9e <_ZNK5spark9JSONValue4typeEv+0x48>
   bbb78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bbb7c:	2b09      	cmp	r3, #9
   bbb7e:	d90e      	bls.n	bbb9e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bbb80:	2874      	cmp	r0, #116	; 0x74
   bbb82:	d00e      	beq.n	bbba2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bbb84:	2866      	cmp	r0, #102	; 0x66
   bbb86:	d00c      	beq.n	bbba2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bbb88:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bbb8c:	4258      	negs	r0, r3
   bbb8e:	4158      	adcs	r0, r3
   bbb90:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bbb92:	2006      	movs	r0, #6
   bbb94:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bbb96:	2000      	movs	r0, #0
   bbb98:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bbb9a:	2004      	movs	r0, #4
   bbb9c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bbb9e:	2003      	movs	r0, #3
   bbba0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bbba2:	2002      	movs	r0, #2
}
   bbba4:	4770      	bx	lr

000bbba6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bbba6:	b510      	push	{r4, lr}
   bbba8:	4604      	mov	r4, r0
    switch (type()) {
   bbbaa:	f7ff ffd4 	bl	bbb56 <_ZNK5spark9JSONValue4typeEv>
   bbbae:	2802      	cmp	r0, #2
   bbbb0:	d00e      	beq.n	bbbd0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bbbb2:	1ec3      	subs	r3, r0, #3
   bbbb4:	b2db      	uxtb	r3, r3
   bbbb6:	2b01      	cmp	r3, #1
   bbbb8:	d814      	bhi.n	bbbe4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bbbba:	6822      	ldr	r2, [r4, #0]
   bbbbc:	68a3      	ldr	r3, [r4, #8]
   bbbbe:	6850      	ldr	r0, [r2, #4]
   bbbc0:	685b      	ldr	r3, [r3, #4]
}
   bbbc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bbbc6:	220a      	movs	r2, #10
   bbbc8:	2100      	movs	r1, #0
   bbbca:	4418      	add	r0, r3
   bbbcc:	f003 b992 	b.w	beef4 <strtol>
        const char* const s = d_->json + t_->start;
   bbbd0:	6822      	ldr	r2, [r4, #0]
   bbbd2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bbbd4:	6852      	ldr	r2, [r2, #4]
   bbbd6:	685b      	ldr	r3, [r3, #4]
   bbbd8:	5cd0      	ldrb	r0, [r2, r3]
   bbbda:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bbbde:	4258      	negs	r0, r3
   bbbe0:	4158      	adcs	r0, r3
}
   bbbe2:	bd10      	pop	{r4, pc}
    switch (type()) {
   bbbe4:	2000      	movs	r0, #0
   bbbe6:	e7fc      	b.n	bbbe2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bbbe8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bbbe8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bbbea:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bbbec:	e9c0 3300 	strd	r3, r3, [r0]
   bbbf0:	4604      	mov	r4, r0
        n_(0) {
   bbbf2:	480e      	ldr	r0, [pc, #56]	; (bbc2c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bbbf4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bbbf8:	b1a9      	cbz	r1, bbc26 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bbbfa:	780b      	ldrb	r3, [r1, #0]
   bbbfc:	2b03      	cmp	r3, #3
   bbbfe:	d006      	beq.n	bbc0e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bbc00:	b98b      	cbnz	r3, bbc26 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bbc02:	6813      	ldr	r3, [r2, #0]
   bbc04:	6858      	ldr	r0, [r3, #4]
   bbc06:	684b      	ldr	r3, [r1, #4]
   bbc08:	5cc3      	ldrb	r3, [r0, r3]
   bbc0a:	2b6e      	cmp	r3, #110	; 0x6e
   bbc0c:	d007      	beq.n	bbc1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bbc0e:	6813      	ldr	r3, [r2, #0]
   bbc10:	684d      	ldr	r5, [r1, #4]
   bbc12:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bbc14:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bbc16:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bbc18:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bbc1a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bbc1c:	60e3      	str	r3, [r4, #12]
   bbc1e:	4611      	mov	r1, r2
   bbc20:	4620      	mov	r0, r4
   bbc22:	f7ff ff6c 	bl	bbafe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bbc26:	4620      	mov	r0, r4
   bbc28:	bd38      	pop	{r3, r4, r5, pc}
   bbc2a:	bf00      	nop
   bbc2c:	000c05fd 	.word	0x000c05fd

000bbc30 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bbc30:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bbc32:	2500      	movs	r5, #0
   bbc34:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bbc36:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bbc3a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bbc3e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bbc42:	4604      	mov	r4, r0
   bbc44:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bbc46:	b14b      	cbz	r3, bbc5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bbc48:	781a      	ldrb	r2, [r3, #0]
   bbc4a:	2a01      	cmp	r2, #1
   bbc4c:	d106      	bne.n	bbc5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bbc4e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bbc52:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bbc54:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bbc56:	6143      	str	r3, [r0, #20]
   bbc58:	f7ff ff51 	bl	bbafe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bbc5c:	4620      	mov	r0, r4
   bbc5e:	bd38      	pop	{r3, r4, r5, pc}

000bbc60 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bbc60:	b510      	push	{r4, lr}
    if (!n_) {
   bbc62:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bbc64:	4604      	mov	r4, r0
    if (!n_) {
   bbc66:	b163      	cbz	r3, bbc82 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bbc68:	6880      	ldr	r0, [r0, #8]
   bbc6a:	60e0      	str	r0, [r4, #12]
    --n_;
   bbc6c:	3b01      	subs	r3, #1
    ++t_;
   bbc6e:	3010      	adds	r0, #16
   bbc70:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bbc72:	6120      	str	r0, [r4, #16]
    --n_;
   bbc74:	6163      	str	r3, [r4, #20]
    if (n_) {
   bbc76:	b113      	cbz	r3, bbc7e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bbc78:	f7ff fef2 	bl	bba60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bbc7c:	60a0      	str	r0, [r4, #8]
    return true;
   bbc7e:	2001      	movs	r0, #1
   bbc80:	e000      	b.n	bbc84 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bbc82:	4618      	mov	r0, r3
}
   bbc84:	bd10      	pop	{r4, pc}

000bbc86 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bbc86:	b510      	push	{r4, lr}
    write('}');
   bbc88:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bbc8a:	4604      	mov	r4, r0
    write('}');
   bbc8c:	f7ff ff49 	bl	bbb22 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bbc90:	2301      	movs	r3, #1
   bbc92:	7123      	strb	r3, [r4, #4]
}
   bbc94:	4620      	mov	r0, r4
   bbc96:	bd10      	pop	{r4, pc}

000bbc98 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bbc98:	b508      	push	{r3, lr}
    switch (state_) {
   bbc9a:	7903      	ldrb	r3, [r0, #4]
   bbc9c:	2b01      	cmp	r3, #1
   bbc9e:	d002      	beq.n	bbca6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bbca0:	2b02      	cmp	r3, #2
   bbca2:	d004      	beq.n	bbcae <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bbca4:	bd08      	pop	{r3, pc}
        write(',');
   bbca6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bbca8:	f7ff ff3b 	bl	bbb22 <_ZN5spark10JSONWriter5writeEc>
}
   bbcac:	e7fa      	b.n	bbca4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bbcae:	213a      	movs	r1, #58	; 0x3a
   bbcb0:	e7fa      	b.n	bbca8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bbcb2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bbcb2:	b510      	push	{r4, lr}
   bbcb4:	4604      	mov	r4, r0
    writeSeparator();
   bbcb6:	f7ff ffef 	bl	bbc98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bbcba:	4620      	mov	r0, r4
   bbcbc:	217b      	movs	r1, #123	; 0x7b
   bbcbe:	f7ff ff30 	bl	bbb22 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bbcc2:	2300      	movs	r3, #0
   bbcc4:	7123      	strb	r3, [r4, #4]
}
   bbcc6:	4620      	mov	r0, r4
   bbcc8:	bd10      	pop	{r4, pc}
	...

000bbccc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bbccc:	b513      	push	{r0, r1, r4, lr}
   bbcce:	4604      	mov	r4, r0
   bbcd0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bbcd2:	f7ff ffe1 	bl	bbc98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bbcd6:	6823      	ldr	r3, [r4, #0]
   bbcd8:	9a01      	ldr	r2, [sp, #4]
   bbcda:	68db      	ldr	r3, [r3, #12]
   bbcdc:	4903      	ldr	r1, [pc, #12]	; (bbcec <_ZN5spark10JSONWriter5valueEi+0x20>)
   bbcde:	4620      	mov	r0, r4
   bbce0:	4798      	blx	r3
    state_ = NEXT;
   bbce2:	2301      	movs	r3, #1
}
   bbce4:	4620      	mov	r0, r4
    state_ = NEXT;
   bbce6:	7123      	strb	r3, [r4, #4]
}
   bbce8:	b002      	add	sp, #8
   bbcea:	bd10      	pop	{r4, pc}
   bbcec:	000bfb6b 	.word	0x000bfb6b

000bbcf0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bbcf0:	b513      	push	{r0, r1, r4, lr}
   bbcf2:	4604      	mov	r4, r0
   bbcf4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bbcf6:	f7ff ffcf 	bl	bbc98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bbcfa:	6823      	ldr	r3, [r4, #0]
   bbcfc:	9a01      	ldr	r2, [sp, #4]
   bbcfe:	68db      	ldr	r3, [r3, #12]
   bbd00:	4903      	ldr	r1, [pc, #12]	; (bbd10 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bbd02:	4620      	mov	r0, r4
   bbd04:	4798      	blx	r3
    state_ = NEXT;
   bbd06:	2301      	movs	r3, #1
}
   bbd08:	4620      	mov	r0, r4
    state_ = NEXT;
   bbd0a:	7123      	strb	r3, [r4, #4]
}
   bbd0c:	b002      	add	sp, #8
   bbd0e:	bd10      	pop	{r4, pc}
   bbd10:	000bfe8e 	.word	0x000bfe8e

000bbd14 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bbd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbd18:	460d      	mov	r5, r1
    write('"');
   bbd1a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bbd1c:	4690      	mov	r8, r2
   bbd1e:	4604      	mov	r4, r0
    write('"');
   bbd20:	f7ff feff 	bl	bbb22 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bbd24:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bbdcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bbd28:	44a8      	add	r8, r5
    const char *s = str;
   bbd2a:	462f      	mov	r7, r5
    while (s != end) {
   bbd2c:	4547      	cmp	r7, r8
   bbd2e:	46ba      	mov	sl, r7
   bbd30:	d03d      	beq.n	bbdae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bbd32:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bbd36:	2e22      	cmp	r6, #34	; 0x22
   bbd38:	d006      	beq.n	bbd48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bbd3a:	2e5c      	cmp	r6, #92	; 0x5c
   bbd3c:	d004      	beq.n	bbd48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bbd3e:	4630      	mov	r0, r6
   bbd40:	f002 fefc 	bl	beb3c <isprint>
   bbd44:	2800      	cmp	r0, #0
   bbd46:	d1f1      	bne.n	bbd2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bbd48:	6823      	ldr	r3, [r4, #0]
   bbd4a:	ebaa 0205 	sub.w	r2, sl, r5
   bbd4e:	689b      	ldr	r3, [r3, #8]
   bbd50:	4629      	mov	r1, r5
   bbd52:	4620      	mov	r0, r4
   bbd54:	4798      	blx	r3
            write('\\');
   bbd56:	215c      	movs	r1, #92	; 0x5c
   bbd58:	4620      	mov	r0, r4
   bbd5a:	f7ff fee2 	bl	bbb22 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bbd5e:	2e0d      	cmp	r6, #13
   bbd60:	d80a      	bhi.n	bbd78 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bbd62:	2e07      	cmp	r6, #7
   bbd64:	d91c      	bls.n	bbda0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bbd66:	f1a6 0308 	sub.w	r3, r6, #8
   bbd6a:	2b05      	cmp	r3, #5
   bbd6c:	d818      	bhi.n	bbda0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bbd6e:	e8df f003 	tbb	[pc, r3]
   bbd72:	0f0d      	.short	0x0f0d
   bbd74:	15131711 	.word	0x15131711
   bbd78:	2e22      	cmp	r6, #34	; 0x22
   bbd7a:	d001      	beq.n	bbd80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bbd7c:	2e5c      	cmp	r6, #92	; 0x5c
   bbd7e:	d10f      	bne.n	bbda0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bbd80:	4631      	mov	r1, r6
                write('b');
   bbd82:	4620      	mov	r0, r4
   bbd84:	f7ff fecd 	bl	bbb22 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bbd88:	463d      	mov	r5, r7
    while (s != end) {
   bbd8a:	e7cf      	b.n	bbd2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bbd8c:	2162      	movs	r1, #98	; 0x62
   bbd8e:	e7f8      	b.n	bbd82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bbd90:	2174      	movs	r1, #116	; 0x74
   bbd92:	e7f6      	b.n	bbd82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bbd94:	216e      	movs	r1, #110	; 0x6e
   bbd96:	e7f4      	b.n	bbd82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bbd98:	2166      	movs	r1, #102	; 0x66
   bbd9a:	e7f2      	b.n	bbd82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bbd9c:	2172      	movs	r1, #114	; 0x72
   bbd9e:	e7f0      	b.n	bbd82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bbda0:	6823      	ldr	r3, [r4, #0]
   bbda2:	4632      	mov	r2, r6
   bbda4:	68db      	ldr	r3, [r3, #12]
   bbda6:	4649      	mov	r1, r9
   bbda8:	4620      	mov	r0, r4
   bbdaa:	4798      	blx	r3
                break;
   bbdac:	e7ec      	b.n	bbd88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bbdae:	42bd      	cmp	r5, r7
   bbdb0:	d005      	beq.n	bbdbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bbdb2:	6823      	ldr	r3, [r4, #0]
   bbdb4:	1b7a      	subs	r2, r7, r5
   bbdb6:	689b      	ldr	r3, [r3, #8]
   bbdb8:	4629      	mov	r1, r5
   bbdba:	4620      	mov	r0, r4
   bbdbc:	4798      	blx	r3
    }
    write('"');
   bbdbe:	2122      	movs	r1, #34	; 0x22
   bbdc0:	4620      	mov	r0, r4
   bbdc2:	f7ff feae 	bl	bbb22 <_ZN5spark10JSONWriter5writeEc>
}
   bbdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbdca:	bf00      	nop
   bbdcc:	000c05a0 	.word	0x000c05a0

000bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bbdd0:	b513      	push	{r0, r1, r4, lr}
   bbdd2:	4604      	mov	r4, r0
   bbdd4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbdd8:	f7ff ff5e 	bl	bbc98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bbddc:	4620      	mov	r0, r4
   bbdde:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbde2:	f7ff ff97 	bl	bbd14 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bbde6:	2302      	movs	r3, #2
}
   bbde8:	4620      	mov	r0, r4
    state_ = VALUE;
   bbdea:	7123      	strb	r3, [r4, #4]
}
   bbdec:	b002      	add	sp, #8
   bbdee:	bd10      	pop	{r4, pc}

000bbdf0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bbdf0:	b513      	push	{r0, r1, r4, lr}
   bbdf2:	4604      	mov	r4, r0
   bbdf4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbdf8:	f7ff ff4e 	bl	bbc98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bbdfc:	4620      	mov	r0, r4
   bbdfe:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbe02:	f7ff ff87 	bl	bbd14 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bbe06:	2301      	movs	r3, #1
}
   bbe08:	4620      	mov	r0, r4
    state_ = NEXT;
   bbe0a:	7123      	strb	r3, [r4, #4]
}
   bbe0c:	b002      	add	sp, #8
   bbe0e:	bd10      	pop	{r4, pc}

000bbe10 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bbe10:	6880      	ldr	r0, [r0, #8]
   bbe12:	6803      	ldr	r3, [r0, #0]
   bbe14:	68db      	ldr	r3, [r3, #12]
   bbe16:	4718      	bx	r3

000bbe18 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bbe18:	4770      	bx	lr

000bbe1a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bbe1a:	4608      	mov	r0, r1
   bbe1c:	b111      	cbz	r1, bbe24 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bbe1e:	680b      	ldr	r3, [r1, #0]
   bbe20:	685b      	ldr	r3, [r3, #4]
   bbe22:	4718      	bx	r3
}
   bbe24:	4770      	bx	lr

000bbe26 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bbe26:	4770      	bx	lr

000bbe28 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bbe28:	4770      	bx	lr

000bbe2a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bbe2a:	4770      	bx	lr

000bbe2c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bbe2c:	4770      	bx	lr

000bbe2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bbe2e:	b538      	push	{r3, r4, r5, lr}
   bbe30:	4604      	mov	r4, r0
   bbe32:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bbe34:	6800      	ldr	r0, [r0, #0]
   bbe36:	212e      	movs	r1, #46	; 0x2e
   bbe38:	f002 ff31 	bl	bec9e <strchrnul>
    size = s - category;
   bbe3c:	6823      	ldr	r3, [r4, #0]
   bbe3e:	1ac3      	subs	r3, r0, r3
   bbe40:	602b      	str	r3, [r5, #0]
    if (size) {
   bbe42:	b123      	cbz	r3, bbe4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bbe44:	7803      	ldrb	r3, [r0, #0]
   bbe46:	b103      	cbz	r3, bbe4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bbe48:	3001      	adds	r0, #1
   bbe4a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbe4c:	6020      	str	r0, [r4, #0]
}
   bbe4e:	4618      	mov	r0, r3
   bbe50:	bd38      	pop	{r3, r4, r5, pc}

000bbe52 <_ZN5spark16JSONStreamWriterD0Ev>:
   bbe52:	b510      	push	{r4, lr}
   bbe54:	210c      	movs	r1, #12
   bbe56:	4604      	mov	r4, r0
   bbe58:	f7f8 f921 	bl	b409e <_ZdlPvj>
   bbe5c:	4620      	mov	r0, r4
   bbe5e:	bd10      	pop	{r4, pc}

000bbe60 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bbe60:	b510      	push	{r4, lr}
   bbe62:	2104      	movs	r1, #4
   bbe64:	4604      	mov	r4, r0
   bbe66:	f7f8 f91a 	bl	b409e <_ZdlPvj>
   bbe6a:	4620      	mov	r0, r4
   bbe6c:	bd10      	pop	{r4, pc}

000bbe6e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bbe6e:	b510      	push	{r4, lr}
   bbe70:	2104      	movs	r1, #4
   bbe72:	4604      	mov	r4, r0
   bbe74:	f7f8 f913 	bl	b409e <_ZdlPvj>
   bbe78:	4620      	mov	r0, r4
   bbe7a:	bd10      	pop	{r4, pc}

000bbe7c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bbe7c:	f7fe bb72 	b.w	ba564 <os_mutex_recursive_lock>

000bbe80 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bbe80:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bbe82:	f002 ff16 	bl	becb2 <strcmp>
}
   bbe86:	fab0 f080 	clz	r0, r0
   bbe8a:	0940      	lsrs	r0, r0, #5
   bbe8c:	bd08      	pop	{r3, pc}

000bbe8e <__tcf_1>:
   bbe8e:	4770      	bx	lr

000bbe90 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bbe90:	b510      	push	{r4, lr}
   bbe92:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bbe94:	f001 ff24 	bl	bdce0 <_Z16_fetch_usbserialv>
   bbe98:	4284      	cmp	r4, r0
   bbe9a:	d010      	beq.n	bbebe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bbe9c:	f002 f91e 	bl	be0dc <_Z22__fetch_global_Serial1v>
   bbea0:	4284      	cmp	r4, r0
   bbea2:	d105      	bne.n	bbeb0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bbea4:	f002 f91a 	bl	be0dc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bbea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bbeac:	f001 beb1 	b.w	bdc12 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bbeb0:	b12c      	cbz	r4, bbebe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bbeb2:	6823      	ldr	r3, [r4, #0]
   bbeb4:	4620      	mov	r0, r4
   bbeb6:	685b      	ldr	r3, [r3, #4]
}
   bbeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bbebc:	4718      	bx	r3
   bbebe:	bd10      	pop	{r4, pc}

000bbec0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bbec0:	b513      	push	{r0, r1, r4, lr}
   bbec2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bbec4:	4608      	mov	r0, r1
   bbec6:	9101      	str	r1, [sp, #4]
   bbec8:	f002 ff23 	bl	bed12 <strlen>
   bbecc:	9901      	ldr	r1, [sp, #4]
   bbece:	4602      	mov	r2, r0
   bbed0:	4620      	mov	r0, r4
}
   bbed2:	b002      	add	sp, #8
   bbed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bbed8:	f7ff bf8a 	b.w	bbdf0 <_ZN5spark10JSONWriter5valueEPKcj>

000bbedc <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bbedc:	b513      	push	{r0, r1, r4, lr}
   bbede:	4604      	mov	r4, r0
    write(str, strlen(str));
   bbee0:	4608      	mov	r0, r1
   bbee2:	9101      	str	r1, [sp, #4]
   bbee4:	f002 ff15 	bl	bed12 <strlen>
   bbee8:	6823      	ldr	r3, [r4, #0]
   bbeea:	9901      	ldr	r1, [sp, #4]
   bbeec:	68db      	ldr	r3, [r3, #12]
   bbeee:	4602      	mov	r2, r0
   bbef0:	4620      	mov	r0, r4
}
   bbef2:	b002      	add	sp, #8
   bbef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bbef8:	4718      	bx	r3

000bbefa <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bbefa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bbefc:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bbefe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bbf02:	68db      	ldr	r3, [r3, #12]
   bbf04:	2201      	movs	r2, #1
   bbf06:	f10d 0107 	add.w	r1, sp, #7
   bbf0a:	4798      	blx	r3
}
   bbf0c:	b003      	add	sp, #12
   bbf0e:	f85d fb04 	ldr.w	pc, [sp], #4

000bbf12 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bbf12:	b40e      	push	{r1, r2, r3}
   bbf14:	b503      	push	{r0, r1, lr}
   bbf16:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bbf18:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bbf1a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bbf1e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bbf20:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bbf22:	f001 f942 	bl	bd1aa <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bbf26:	b002      	add	sp, #8
   bbf28:	f85d eb04 	ldr.w	lr, [sp], #4
   bbf2c:	b003      	add	sp, #12
   bbf2e:	4770      	bx	lr

000bbf30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bbf30:	680a      	ldr	r2, [r1, #0]
   bbf32:	6002      	str	r2, [r0, #0]
   bbf34:	684a      	ldr	r2, [r1, #4]
   bbf36:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bbf38:	2200      	movs	r2, #0
   bbf3a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bbf3e:	b510      	push	{r4, lr}
   bbf40:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bbf42:	688c      	ldr	r4, [r1, #8]
   bbf44:	6084      	str	r4, [r0, #8]
   bbf46:	68cc      	ldr	r4, [r1, #12]
   bbf48:	60c4      	str	r4, [r0, #12]
   bbf4a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf4c:	608a      	str	r2, [r1, #8]
   bbf4e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bbf50:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf52:	610a      	str	r2, [r1, #16]
   bbf54:	bd10      	pop	{r4, pc}
	...

000bbf58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bbf58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bbf5c:	e9d0 8400 	ldrd	r8, r4, [r0]
   bbf60:	f04f 0a14 	mov.w	sl, #20
   bbf64:	9300      	str	r3, [sp, #0]
   bbf66:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bbf6a:	4b18      	ldr	r3, [pc, #96]	; (bbfcc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bbf6c:	10a4      	asrs	r4, r4, #2
   bbf6e:	4617      	mov	r7, r2
   bbf70:	435c      	muls	r4, r3
   bbf72:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bbf74:	2c00      	cmp	r4, #0
   bbf76:	dd21      	ble.n	bbfbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bbf78:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bbf7a:	fb0a f006 	mul.w	r0, sl, r6
   bbf7e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bbf82:	463a      	mov	r2, r7
   bbf84:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bbf88:	5828      	ldr	r0, [r5, r0]
   bbf8a:	9101      	str	r1, [sp, #4]
   bbf8c:	455f      	cmp	r7, fp
   bbf8e:	bf28      	it	cs
   bbf90:	465a      	movcs	r2, fp
   bbf92:	f002 fec6 	bl	bed22 <strncmp>
                if (cmp == 0) {
   bbf96:	2800      	cmp	r0, #0
   bbf98:	9901      	ldr	r1, [sp, #4]
   bbf9a:	f04f 0301 	mov.w	r3, #1
   bbf9e:	d10b      	bne.n	bbfb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bbfa0:	455f      	cmp	r7, fp
   bbfa2:	d103      	bne.n	bbfac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bbfa4:	9a00      	ldr	r2, [sp, #0]
   bbfa6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bbfa8:	4634      	mov	r4, r6
   bbfaa:	e7e3      	b.n	bbf74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bbfac:	d9fc      	bls.n	bbfa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bbfae:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bbfb0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bbfb4:	3e01      	subs	r6, #1
   bbfb6:	e7f7      	b.n	bbfa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bbfb8:	dbf9      	blt.n	bbfae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bbfba:	e7f5      	b.n	bbfa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bbfbc:	eba5 0508 	sub.w	r5, r5, r8
}
   bbfc0:	4802      	ldr	r0, [pc, #8]	; (bbfcc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bbfc2:	10ad      	asrs	r5, r5, #2
   bbfc4:	4368      	muls	r0, r5
   bbfc6:	b003      	add	sp, #12
   bbfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbfcc:	cccccccd 	.word	0xcccccccd

000bbfd0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bbfd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bbfd2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bbfd4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bbfd6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bbfd8:	b303      	cbz	r3, bc01c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bbfda:	b1f9      	cbz	r1, bc01c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bbfdc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bbfde:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bbfe2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bbfe4:	a903      	add	r1, sp, #12
   bbfe6:	a801      	add	r0, sp, #4
   bbfe8:	f7ff ff21 	bl	bbe2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bbfec:	4601      	mov	r1, r0
   bbfee:	b1a8      	cbz	r0, bc01c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bbff0:	f10d 030b 	add.w	r3, sp, #11
   bbff4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bbff6:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bbffa:	4620      	mov	r0, r4
   bbffc:	f7ff ffac 	bl	bbf58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bc000:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bc004:	b153      	cbz	r3, bc01c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bc006:	6823      	ldr	r3, [r4, #0]
   bc008:	2414      	movs	r4, #20
   bc00a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bc00e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bc010:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bc014:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bc016:	bfa8      	it	ge
   bc018:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bc01a:	e7e3      	b.n	bbfe4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bc01c:	4628      	mov	r0, r5
   bc01e:	b004      	add	sp, #16
   bc020:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc024 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bc024:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bc026:	4c09      	ldr	r4, [pc, #36]	; (bc04c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bc028:	7823      	ldrb	r3, [r4, #0]
   bc02a:	f3bf 8f5b 	dmb	ish
   bc02e:	07db      	lsls	r3, r3, #31
   bc030:	d409      	bmi.n	bc046 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc032:	4620      	mov	r0, r4
   bc034:	f7f8 f842 	bl	b40bc <__cxa_guard_acquire>
   bc038:	b128      	cbz	r0, bc046 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc03a:	4620      	mov	r0, r4
   bc03c:	f7f8 f843 	bl	b40c6 <__cxa_guard_release>
   bc040:	4803      	ldr	r0, [pc, #12]	; (bc050 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bc042:	f002 fd57 	bl	beaf4 <atexit>
}
   bc046:	4803      	ldr	r0, [pc, #12]	; (bc054 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bc048:	bd10      	pop	{r4, pc}
   bc04a:	bf00      	nop
   bc04c:	2003e650 	.word	0x2003e650
   bc050:	000bbe27 	.word	0x000bbe27
   bc054:	2003decc 	.word	0x2003decc

000bc058 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bc058:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bc05a:	4c09      	ldr	r4, [pc, #36]	; (bc080 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bc05c:	7823      	ldrb	r3, [r4, #0]
   bc05e:	f3bf 8f5b 	dmb	ish
   bc062:	07db      	lsls	r3, r3, #31
   bc064:	d409      	bmi.n	bc07a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc066:	4620      	mov	r0, r4
   bc068:	f7f8 f828 	bl	b40bc <__cxa_guard_acquire>
   bc06c:	b128      	cbz	r0, bc07a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc06e:	4620      	mov	r0, r4
   bc070:	f7f8 f829 	bl	b40c6 <__cxa_guard_release>
   bc074:	4803      	ldr	r0, [pc, #12]	; (bc084 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bc076:	f002 fd3d 	bl	beaf4 <atexit>
    return &factory;
}
   bc07a:	4803      	ldr	r0, [pc, #12]	; (bc088 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bc07c:	bd10      	pop	{r4, pc}
   bc07e:	bf00      	nop
   bc080:	2003e654 	.word	0x2003e654
   bc084:	000bbe8f 	.word	0x000bbe8f
   bc088:	2003ded0 	.word	0x2003ded0

000bc08c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bc08c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bc08e:	2500      	movs	r5, #0
   bc090:	4604      	mov	r4, r0
   bc092:	e9c0 5500 	strd	r5, r5, [r0]
   bc096:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc09a:	6085      	str	r5, [r0, #8]
   bc09c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bc09e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bc0a2:	f7fe fa4f 	bl	ba544 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bc0a6:	f7ff ffbd 	bl	bc024 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bc0aa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc0ac:	f7ff ffd4 	bl	bc058 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bc0b0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc0b2:	6220      	str	r0, [r4, #32]
}
   bc0b4:	4620      	mov	r0, r4
   bc0b6:	bd38      	pop	{r3, r4, r5, pc}

000bc0b8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bc0b8:	b510      	push	{r4, lr}
    static LogManager mgr;
   bc0ba:	4c0a      	ldr	r4, [pc, #40]	; (bc0e4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bc0bc:	7823      	ldrb	r3, [r4, #0]
   bc0be:	f3bf 8f5b 	dmb	ish
   bc0c2:	07db      	lsls	r3, r3, #31
   bc0c4:	d40c      	bmi.n	bc0e0 <_ZN5spark10LogManager8instanceEv+0x28>
   bc0c6:	4620      	mov	r0, r4
   bc0c8:	f7f7 fff8 	bl	b40bc <__cxa_guard_acquire>
   bc0cc:	b140      	cbz	r0, bc0e0 <_ZN5spark10LogManager8instanceEv+0x28>
   bc0ce:	4806      	ldr	r0, [pc, #24]	; (bc0e8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc0d0:	f7ff ffdc 	bl	bc08c <_ZN5spark10LogManagerC1Ev>
   bc0d4:	4620      	mov	r0, r4
   bc0d6:	f7f7 fff6 	bl	b40c6 <__cxa_guard_release>
   bc0da:	4804      	ldr	r0, [pc, #16]	; (bc0ec <_ZN5spark10LogManager8instanceEv+0x34>)
   bc0dc:	f002 fd0a 	bl	beaf4 <atexit>
    return &mgr;
}
   bc0e0:	4801      	ldr	r0, [pc, #4]	; (bc0e8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc0e2:	bd10      	pop	{r4, pc}
   bc0e4:	2003e64c 	.word	0x2003e64c
   bc0e8:	2003e65c 	.word	0x2003e65c
   bc0ec:	000bc5a5 	.word	0x000bc5a5

000bc0f0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bc0f0:	4a02      	ldr	r2, [pc, #8]	; (bc0fc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bc0f2:	4903      	ldr	r1, [pc, #12]	; (bc100 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bc0f4:	4803      	ldr	r0, [pc, #12]	; (bc104 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bc0f6:	2300      	movs	r3, #0
   bc0f8:	f7fe bcbc 	b.w	baa74 <log_set_callbacks>
   bc0fc:	000bc389 	.word	0x000bc389
   bc100:	000bc315 	.word	0x000bc315
   bc104:	000bc295 	.word	0x000bc295

000bc108 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bc108:	2300      	movs	r3, #0
   bc10a:	461a      	mov	r2, r3
   bc10c:	4619      	mov	r1, r3
   bc10e:	4618      	mov	r0, r3
   bc110:	f7fe bcb0 	b.w	baa74 <log_set_callbacks>

000bc114 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bc114:	b570      	push	{r4, r5, r6, lr}
   bc116:	b08a      	sub	sp, #40	; 0x28
   bc118:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bc11a:	4601      	mov	r1, r0
   bc11c:	a804      	add	r0, sp, #16
   bc11e:	f7fb fc1e 	bl	b795e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bc122:	4e14      	ldr	r6, [pc, #80]	; (bc174 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bc124:	a804      	add	r0, sp, #16
   bc126:	f7ff fd9b 	bl	bbc60 <_ZN5spark18JSONObjectIterator4nextEv>
   bc12a:	b1e8      	cbz	r0, bc168 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bc12c:	a904      	add	r1, sp, #16
   bc12e:	4668      	mov	r0, sp
   bc130:	f7fb fc26 	bl	b7980 <_ZNK5spark18JSONObjectIterator4nameEv>
   bc134:	9802      	ldr	r0, [sp, #8]
   bc136:	4631      	mov	r1, r6
   bc138:	f7ff fea2 	bl	bbe80 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bc13c:	4604      	mov	r4, r0
   bc13e:	b110      	cbz	r0, bc146 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bc140:	1e2c      	subs	r4, r5, #0
   bc142:	bf18      	it	ne
   bc144:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bc146:	a801      	add	r0, sp, #4
   bc148:	f7f9 fc96 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc14c:	2c00      	cmp	r4, #0
   bc14e:	d0e9      	beq.n	bc124 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bc150:	a904      	add	r1, sp, #16
   bc152:	4668      	mov	r0, sp
   bc154:	f7fb fc25 	bl	b79a2 <_ZNK5spark18JSONObjectIterator5valueEv>
   bc158:	4668      	mov	r0, sp
   bc15a:	f7ff fd24 	bl	bbba6 <_ZNK5spark9JSONValue5toIntEv>
   bc15e:	6028      	str	r0, [r5, #0]
   bc160:	a801      	add	r0, sp, #4
   bc162:	f7f9 fc89 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc166:	e7dd      	b.n	bc124 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bc168:	a805      	add	r0, sp, #20
   bc16a:	f7f9 fc85 	bl	b5a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc16e:	b00a      	add	sp, #40	; 0x28
   bc170:	bd70      	pop	{r4, r5, r6, pc}
   bc172:	bf00      	nop
   bc174:	000c05a6 	.word	0x000c05a6

000bc178 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc178:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc17a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bc17c:	4620      	mov	r0, r4
   bc17e:	4913      	ldr	r1, [pc, #76]	; (bc1cc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc180:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bc182:	f002 fd96 	bl	becb2 <strcmp>
   bc186:	b950      	cbnz	r0, bc19e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bc188:	f001 fdaa 	bl	bdce0 <_Z16_fetch_usbserialv>
   bc18c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bc190:	f001 fd94 	bl	bdcbc <_ZN9USBSerial5beginEl>
}
   bc194:	b003      	add	sp, #12
   bc196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bc19a:	f001 bda1 	b.w	bdce0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bc19e:	490c      	ldr	r1, [pc, #48]	; (bc1d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bc1a0:	4620      	mov	r0, r4
   bc1a2:	f002 fd86 	bl	becb2 <strcmp>
   bc1a6:	b978      	cbnz	r0, bc1c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bc1a8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bc1ac:	a901      	add	r1, sp, #4
   bc1ae:	4628      	mov	r0, r5
        int baud = 9600;
   bc1b0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bc1b2:	f7ff ffaf 	bl	bc114 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bc1b6:	f001 ff91 	bl	be0dc <_Z22__fetch_global_Serial1v>
   bc1ba:	9901      	ldr	r1, [sp, #4]
   bc1bc:	f001 fd26 	bl	bdc0c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bc1c0:	f001 ff8c 	bl	be0dc <_Z22__fetch_global_Serial1v>
}
   bc1c4:	b003      	add	sp, #12
   bc1c6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bc1c8:	2000      	movs	r0, #0
   bc1ca:	e7fb      	b.n	bc1c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bc1cc:	000c05ab 	.word	0x000c05ab
   bc1d0:	000c05b2 	.word	0x000c05b2

000bc1d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc1d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc1d6:	e9d0 5300 	ldrd	r5, r3, [r0]
   bc1da:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc1dc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc1de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc1e2:	42ae      	cmp	r6, r5
   bc1e4:	d005      	beq.n	bc1f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bc1e6:	f105 0008 	add.w	r0, r5, #8
   bc1ea:	f7ff fff3 	bl	bc1d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc1ee:	3514      	adds	r5, #20
   bc1f0:	e7f7      	b.n	bc1e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bc1f2:	6820      	ldr	r0, [r4, #0]
   bc1f4:	f7fe fd8a 	bl	bad0c <free>
}
   bc1f8:	4620      	mov	r0, r4
   bc1fa:	bd70      	pop	{r4, r5, r6, pc}

000bc1fc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bc1fc:	b510      	push	{r4, lr}
   bc1fe:	4604      	mov	r4, r0
   bc200:	300c      	adds	r0, #12
   bc202:	f7ff ffe7 	bl	bc1d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc206:	4620      	mov	r0, r4
   bc208:	f7fe fe23 	bl	bae52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bc20c:	4620      	mov	r0, r4
   bc20e:	bd10      	pop	{r4, pc}

000bc210 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bc210:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bc212:	4b04      	ldr	r3, [pc, #16]	; (bc224 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bc214:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bc216:	f840 3b04 	str.w	r3, [r0], #4
   bc21a:	f7ff ffef 	bl	bc1fc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bc21e:	4620      	mov	r0, r4
   bc220:	bd10      	pop	{r4, pc}
   bc222:	bf00      	nop
   bc224:	000bfa0c 	.word	0x000bfa0c

000bc228 <_ZN5spark16StreamLogHandlerD0Ev>:
   bc228:	b510      	push	{r4, lr}
   bc22a:	4604      	mov	r4, r0
   bc22c:	f7ff fff0 	bl	bc210 <_ZN5spark16StreamLogHandlerD1Ev>
   bc230:	4620      	mov	r0, r4
   bc232:	2124      	movs	r1, #36	; 0x24
   bc234:	f7f7 ff33 	bl	b409e <_ZdlPvj>
   bc238:	4620      	mov	r0, r4
   bc23a:	bd10      	pop	{r4, pc}

000bc23c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bc23c:	b510      	push	{r4, lr}
   bc23e:	4b03      	ldr	r3, [pc, #12]	; (bc24c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bc240:	6003      	str	r3, [r0, #0]
   bc242:	4604      	mov	r4, r0
   bc244:	f7ff ffe4 	bl	bc210 <_ZN5spark16StreamLogHandlerD1Ev>
   bc248:	4620      	mov	r0, r4
   bc24a:	bd10      	pop	{r4, pc}
   bc24c:	000c0648 	.word	0x000c0648

000bc250 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bc250:	b510      	push	{r4, lr}
   bc252:	4604      	mov	r4, r0
   bc254:	f7ff fff2 	bl	bc23c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bc258:	4620      	mov	r0, r4
   bc25a:	2124      	movs	r1, #36	; 0x24
   bc25c:	f7f7 ff1f 	bl	b409e <_ZdlPvj>
   bc260:	4620      	mov	r0, r4
   bc262:	bd10      	pop	{r4, pc}

000bc264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bc264:	2200      	movs	r2, #0
   bc266:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bc26a:	b510      	push	{r4, lr}
        capacity_(0) {
   bc26c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bc26e:	680c      	ldr	r4, [r1, #0]
   bc270:	6004      	str	r4, [r0, #0]
   bc272:	684c      	ldr	r4, [r1, #4]
   bc274:	6044      	str	r4, [r0, #4]
   bc276:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc278:	600a      	str	r2, [r1, #0]
   bc27a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc27c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc27e:	608a      	str	r2, [r1, #8]
}
   bc280:	bd10      	pop	{r4, pc}

000bc282 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bc282:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bc284:	6803      	ldr	r3, [r0, #0]
   bc286:	4604      	mov	r4, r0
   bc288:	6818      	ldr	r0, [r3, #0]
   bc28a:	f7fe f973 	bl	ba574 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bc28e:	4620      	mov	r0, r4
   bc290:	bd10      	pop	{r4, pc}
	...

000bc294 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bc294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc298:	b087      	sub	sp, #28
   bc29a:	4680      	mov	r8, r0
   bc29c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bc29e:	4b1c      	ldr	r3, [pc, #112]	; (bc310 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bc2a0:	685b      	ldr	r3, [r3, #4]
   bc2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc2a6:	4689      	mov	r9, r1
   bc2a8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bc2aa:	b96b      	cbnz	r3, bc2c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bc2ac:	f7ff ff04 	bl	bc0b8 <_ZN5spark10LogManager8instanceEv>
   bc2b0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bc2b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bc2b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc2b8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bc2ba:	f7ff fddf 	bl	bbe7c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bc2be:	7b23      	ldrb	r3, [r4, #12]
   bc2c0:	b12b      	cbz	r3, bc2ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bc2c2:	a805      	add	r0, sp, #20
   bc2c4:	f7ff ffdd 	bl	bc282 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bc2c8:	b007      	add	sp, #28
   bc2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bc2ce:	2301      	movs	r3, #1
   bc2d0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bc2d2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bc2d6:	fa5f f989 	uxtb.w	r9, r9
   bc2da:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc2de:	45aa      	cmp	sl, r5
   bc2e0:	d012      	beq.n	bc308 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bc2e2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bc2e6:	4631      	mov	r1, r6
   bc2e8:	1d38      	adds	r0, r7, #4
   bc2ea:	f7ff fe71 	bl	bbfd0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bc2ee:	4581      	cmp	r9, r0
   bc2f0:	d3f5      	bcc.n	bc2de <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bc2f2:	683b      	ldr	r3, [r7, #0]
   bc2f4:	9a03      	ldr	r2, [sp, #12]
   bc2f6:	9200      	str	r2, [sp, #0]
   bc2f8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bc2fc:	464a      	mov	r2, r9
   bc2fe:	4633      	mov	r3, r6
   bc300:	4641      	mov	r1, r8
   bc302:	4638      	mov	r0, r7
   bc304:	47d8      	blx	fp
   bc306:	e7ea      	b.n	bc2de <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bc308:	2300      	movs	r3, #0
   bc30a:	7323      	strb	r3, [r4, #12]
   bc30c:	e7d9      	b.n	bc2c2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bc30e:	bf00      	nop
   bc310:	e000ed00 	.word	0xe000ed00

000bc314 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bc314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc318:	469b      	mov	fp, r3
   bc31a:	4b1a      	ldr	r3, [pc, #104]	; (bc384 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bc31c:	685b      	ldr	r3, [r3, #4]
   bc31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc322:	4680      	mov	r8, r0
   bc324:	4689      	mov	r9, r1
   bc326:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bc328:	b96b      	cbnz	r3, bc346 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bc32a:	f7ff fec5 	bl	bc0b8 <_ZN5spark10LogManager8instanceEv>
   bc32e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bc330:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bc334:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc336:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc338:	f7ff fda0 	bl	bbe7c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bc33c:	7b23      	ldrb	r3, [r4, #12]
   bc33e:	b12b      	cbz	r3, bc34c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bc340:	a801      	add	r0, sp, #4
   bc342:	f7ff ff9e 	bl	bc282 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bc346:	b003      	add	sp, #12
   bc348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bc34c:	2301      	movs	r3, #1
   bc34e:	7323      	strb	r3, [r4, #12]
   bc350:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bc354:	b2f6      	uxtb	r6, r6
   bc356:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc35a:	4555      	cmp	r5, sl
   bc35c:	d00e      	beq.n	bc37c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bc35e:	f855 7b04 	ldr.w	r7, [r5], #4
   bc362:	4659      	mov	r1, fp
   bc364:	1d38      	adds	r0, r7, #4
   bc366:	f7ff fe33 	bl	bbfd0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bc36a:	4286      	cmp	r6, r0
   bc36c:	d3f5      	bcc.n	bc35a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bc36e:	683b      	ldr	r3, [r7, #0]
   bc370:	464a      	mov	r2, r9
   bc372:	68db      	ldr	r3, [r3, #12]
   bc374:	4641      	mov	r1, r8
   bc376:	4638      	mov	r0, r7
   bc378:	4798      	blx	r3
   bc37a:	e7ee      	b.n	bc35a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bc37c:	2300      	movs	r3, #0
   bc37e:	7323      	strb	r3, [r4, #12]
   bc380:	e7de      	b.n	bc340 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bc382:	bf00      	nop
   bc384:	e000ed00 	.word	0xe000ed00

000bc388 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bc388:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc38c:	4b16      	ldr	r3, [pc, #88]	; (bc3e8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bc38e:	685b      	ldr	r3, [r3, #4]
   bc390:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc394:	4605      	mov	r5, r0
   bc396:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bc398:	bb1b      	cbnz	r3, bc3e2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bc39a:	f7ff fe8d 	bl	bc0b8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bc39e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bc3a2:	4604      	mov	r4, r0
   bc3a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc3a6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc3a8:	f7ff fd68 	bl	bbe7c <_ZN14RecursiveMutex4lockEv.isra.0>
   bc3ac:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bc3b0:	2446      	movs	r4, #70	; 0x46
   bc3b2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc3b6:	45b0      	cmp	r8, r6
   bc3b8:	d109      	bne.n	bc3ce <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bc3ba:	a801      	add	r0, sp, #4
   bc3bc:	f7ff ff61 	bl	bc282 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bc3c0:	42a5      	cmp	r5, r4
   bc3c2:	bfb4      	ite	lt
   bc3c4:	2000      	movlt	r0, #0
   bc3c6:	2001      	movge	r0, #1
}
   bc3c8:	b002      	add	sp, #8
   bc3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bc3ce:	f856 0b04 	ldr.w	r0, [r6], #4
   bc3d2:	4639      	mov	r1, r7
   bc3d4:	3004      	adds	r0, #4
   bc3d6:	f7ff fdfb 	bl	bbfd0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bc3da:	4284      	cmp	r4, r0
   bc3dc:	bfa8      	it	ge
   bc3de:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bc3e0:	e7e9      	b.n	bc3b6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bc3e2:	2000      	movs	r0, #0
   bc3e4:	e7f0      	b.n	bc3c8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bc3e6:	bf00      	nop
   bc3e8:	e000ed00 	.word	0xe000ed00

000bc3ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc3ee:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bc3f2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc3f4:	4604      	mov	r4, r0
   bc3f6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc3f8:	db0d      	blt.n	bc416 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bc3fa:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bc3fc:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bc3fe:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bc400:	dd04      	ble.n	bc40c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bc402:	00b9      	lsls	r1, r7, #2
   bc404:	f7fe fc8a 	bl	bad1c <realloc>
            if (!d) {
   bc408:	b918      	cbnz	r0, bc412 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bc40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bc40c:	f7fe fc7e 	bl	bad0c <free>
        T* d = nullptr;
   bc410:	2000      	movs	r0, #0
        data_ = d;
   bc412:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bc414:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bc416:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc418:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bc41a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bc41e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bc420:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bc424:	1d08      	adds	r0, r1, #4
   bc426:	f002 fb9f 	bl	beb68 <memmove>
    new(p) T(std::move(value));
   bc42a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bc42e:	6863      	ldr	r3, [r4, #4]
   bc430:	3301      	adds	r3, #1
   bc432:	6063      	str	r3, [r4, #4]
    return true;
   bc434:	2001      	movs	r0, #1
   bc436:	e7e8      	b.n	bc40a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bc438 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bc438:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bc43a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bc43e:	4604      	mov	r4, r0
   bc440:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc442:	9301      	str	r3, [sp, #4]
   bc444:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bc446:	f7ff fd19 	bl	bbe7c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bc44a:	e9d4 3200 	ldrd	r3, r2, [r4]
   bc44e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bc452:	4293      	cmp	r3, r2
   bc454:	4619      	mov	r1, r3
   bc456:	d00b      	beq.n	bc470 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bc458:	6809      	ldr	r1, [r1, #0]
   bc45a:	42a9      	cmp	r1, r5
   bc45c:	f103 0304 	add.w	r3, r3, #4
   bc460:	d1f7      	bne.n	bc452 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bc462:	a801      	add	r0, sp, #4
   bc464:	f7ff ff0d 	bl	bc282 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bc468:	2500      	movs	r5, #0
}
   bc46a:	4628      	mov	r0, r5
   bc46c:	b003      	add	sp, #12
   bc46e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bc470:	4629      	mov	r1, r5
   bc472:	4620      	mov	r0, r4
   bc474:	f7ff ffba 	bl	bc3ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bc478:	4605      	mov	r5, r0
   bc47a:	2800      	cmp	r0, #0
   bc47c:	d0f1      	beq.n	bc462 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bc47e:	6863      	ldr	r3, [r4, #4]
   bc480:	2b01      	cmp	r3, #1
   bc482:	d101      	bne.n	bc488 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bc484:	f7ff fe34 	bl	bc0f0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc488:	a801      	add	r0, sp, #4
   bc48a:	f7ff fefa 	bl	bc282 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bc48e:	e7ec      	b.n	bc46a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bc490 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bc490:	b570      	push	{r4, r5, r6, lr}
   bc492:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bc494:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bc498:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bc49a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bc49e:	4282      	cmp	r2, r0
   bc4a0:	d00f      	beq.n	bc4c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bc4a2:	4601      	mov	r1, r0
            if (*p == value) {
   bc4a4:	681d      	ldr	r5, [r3, #0]
   bc4a6:	f851 6b04 	ldr.w	r6, [r1], #4
   bc4aa:	42ae      	cmp	r6, r5
   bc4ac:	d107      	bne.n	bc4be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bc4ae:	1a52      	subs	r2, r2, r1
   bc4b0:	f002 fb5a 	bl	beb68 <memmove>
    --size_;
   bc4b4:	6863      	ldr	r3, [r4, #4]
   bc4b6:	3b01      	subs	r3, #1
   bc4b8:	6063      	str	r3, [r4, #4]
    return true;
   bc4ba:	2001      	movs	r0, #1
}
   bc4bc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bc4be:	4608      	mov	r0, r1
   bc4c0:	e7ed      	b.n	bc49e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bc4c2:	2000      	movs	r0, #0
   bc4c4:	e7fa      	b.n	bc4bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bc4c6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bc4c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bc4c8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bc4cc:	4604      	mov	r4, r0
   bc4ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bc4d0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc4d2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bc4d4:	f7ff fcd2 	bl	bbe7c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bc4d8:	a901      	add	r1, sp, #4
   bc4da:	4620      	mov	r0, r4
   bc4dc:	f7ff ffd8 	bl	bc490 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bc4e0:	b118      	cbz	r0, bc4ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bc4e2:	6863      	ldr	r3, [r4, #4]
   bc4e4:	b90b      	cbnz	r3, bc4ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bc4e6:	f7ff fe0f 	bl	bc108 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc4ea:	a803      	add	r0, sp, #12
   bc4ec:	f7ff fec9 	bl	bc282 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bc4f0:	b004      	add	sp, #16
   bc4f2:	bd10      	pop	{r4, pc}

000bc4f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bc4f4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bc4f6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bc4fa:	2318      	movs	r3, #24
   bc4fc:	4604      	mov	r4, r0
   bc4fe:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bc502:	42ae      	cmp	r6, r5
   bc504:	d015      	beq.n	bc532 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bc506:	f105 0110 	add.w	r1, r5, #16
   bc50a:	4620      	mov	r0, r4
   bc50c:	f7ff ffc0 	bl	bc490 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bc510:	6863      	ldr	r3, [r4, #4]
   bc512:	b90b      	cbnz	r3, bc518 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bc514:	f7ff fdf8 	bl	bc108 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bc518:	69e0      	ldr	r0, [r4, #28]
   bc51a:	6929      	ldr	r1, [r5, #16]
   bc51c:	6803      	ldr	r3, [r0, #0]
   bc51e:	68db      	ldr	r3, [r3, #12]
   bc520:	4798      	blx	r3
        if (h.stream) {
   bc522:	6969      	ldr	r1, [r5, #20]
   bc524:	b119      	cbz	r1, bc52e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bc526:	6a20      	ldr	r0, [r4, #32]
   bc528:	6803      	ldr	r3, [r0, #0]
   bc52a:	68db      	ldr	r3, [r3, #12]
   bc52c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bc52e:	3518      	adds	r5, #24
   bc530:	e7e7      	b.n	bc502 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bc532:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bc536:	2618      	movs	r6, #24
   bc538:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc53c:	42ae      	cmp	r6, r5
   bc53e:	d004      	beq.n	bc54a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bc540:	4628      	mov	r0, r5
   bc542:	f000 ff47 	bl	bd3d4 <_ZN6StringD1Ev>
   bc546:	3518      	adds	r5, #24
   bc548:	e7f8      	b.n	bc53c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bc54a:	2300      	movs	r3, #0
   bc54c:	6163      	str	r3, [r4, #20]
}
   bc54e:	bd70      	pop	{r4, r5, r6, pc}

000bc550 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bc550:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc552:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bc554:	f7ff fdd8 	bl	bc108 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bc558:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bc55c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc55e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bc560:	f7ff fc8c 	bl	bbe7c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bc564:	4620      	mov	r0, r4
   bc566:	f7ff ffc5 	bl	bc4f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bc56a:	a801      	add	r0, sp, #4
   bc56c:	f7ff fe89 	bl	bc282 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bc570:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bc572:	b108      	cbz	r0, bc578 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bc574:	f7fd ffee 	bl	ba554 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bc578:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bc57c:	2618      	movs	r6, #24
   bc57e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc582:	42ae      	cmp	r6, r5
   bc584:	d004      	beq.n	bc590 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bc586:	4628      	mov	r0, r5
   bc588:	f000 ff24 	bl	bd3d4 <_ZN6StringD1Ev>
   bc58c:	3518      	adds	r5, #24
   bc58e:	e7f8      	b.n	bc582 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bc590:	6920      	ldr	r0, [r4, #16]
   bc592:	f7fe fbbb 	bl	bad0c <free>
   bc596:	6820      	ldr	r0, [r4, #0]
   bc598:	f7fe fbb8 	bl	bad0c <free>
}
   bc59c:	4620      	mov	r0, r4
   bc59e:	b002      	add	sp, #8
   bc5a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc5a4 <__tcf_2>:
    static LogManager mgr;
   bc5a4:	4801      	ldr	r0, [pc, #4]	; (bc5ac <__tcf_2+0x8>)
   bc5a6:	f7ff bfd3 	b.w	bc550 <_ZN5spark10LogManagerD1Ev>
   bc5aa:	bf00      	nop
   bc5ac:	2003e65c 	.word	0x2003e65c

000bc5b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bc5b0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc5b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc5b4:	4604      	mov	r4, r0
   bc5b6:	460d      	mov	r5, r1
   bc5b8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc5ba:	d915      	bls.n	bc5e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bc5bc:	4290      	cmp	r0, r2
   bc5be:	d214      	bcs.n	bc5ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bc5c0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bc5c4:	1a75      	subs	r5, r6, r1
   bc5c6:	f1a1 0714 	sub.w	r7, r1, #20
   bc5ca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc5cc:	42b7      	cmp	r7, r6
   bc5ce:	d01a      	beq.n	bc606 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bc5d0:	b11c      	cbz	r4, bc5da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bc5d2:	4631      	mov	r1, r6
   bc5d4:	4620      	mov	r0, r4
   bc5d6:	f7ff fcab 	bl	bbf30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bc5da:	f106 0008 	add.w	r0, r6, #8
   bc5de:	f7ff fdf9 	bl	bc1d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bc5e2:	3e14      	subs	r6, #20
   bc5e4:	3c14      	subs	r4, #20
   bc5e6:	e7f1      	b.n	bc5cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bc5e8:	d00d      	beq.n	bc606 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bc5ea:	42b5      	cmp	r5, r6
   bc5ec:	d00b      	beq.n	bc606 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bc5ee:	b11c      	cbz	r4, bc5f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bc5f0:	4629      	mov	r1, r5
   bc5f2:	4620      	mov	r0, r4
   bc5f4:	f7ff fc9c 	bl	bbf30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bc5f8:	f105 0008 	add.w	r0, r5, #8
   bc5fc:	f7ff fdea 	bl	bc1d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bc600:	3514      	adds	r5, #20
   bc602:	3414      	adds	r4, #20
   bc604:	e7f1      	b.n	bc5ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bc606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc608 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bc608:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc60a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc60c:	4604      	mov	r4, r0
   bc60e:	460d      	mov	r5, r1
   bc610:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc612:	d914      	bls.n	bc63e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bc614:	4290      	cmp	r0, r2
   bc616:	d213      	bcs.n	bc640 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bc618:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bc61c:	1a75      	subs	r5, r6, r1
   bc61e:	f1a1 0710 	sub.w	r7, r1, #16
   bc622:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc624:	42b7      	cmp	r7, r6
   bc626:	d018      	beq.n	bc65a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bc628:	b11c      	cbz	r4, bc632 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bc62a:	4631      	mov	r1, r6
   bc62c:	4620      	mov	r0, r4
   bc62e:	f000 ff4d 	bl	bd4cc <_ZN6StringC1EOS_>
                end->~T();
   bc632:	4630      	mov	r0, r6
   bc634:	f000 fece 	bl	bd3d4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bc638:	3e10      	subs	r6, #16
   bc63a:	3c10      	subs	r4, #16
   bc63c:	e7f2      	b.n	bc624 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bc63e:	d00c      	beq.n	bc65a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bc640:	42b5      	cmp	r5, r6
   bc642:	d00a      	beq.n	bc65a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bc644:	b11c      	cbz	r4, bc64e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bc646:	4629      	mov	r1, r5
   bc648:	4620      	mov	r0, r4
   bc64a:	f000 ff3f 	bl	bd4cc <_ZN6StringC1EOS_>
                p->~T();
   bc64e:	4628      	mov	r0, r5
   bc650:	f000 fec0 	bl	bd3d4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bc654:	3510      	adds	r5, #16
   bc656:	3410      	adds	r4, #16
   bc658:	e7f2      	b.n	bc640 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bc65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc65c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bc65c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bc65e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc660:	4605      	mov	r5, r0
        if (n > 0) {
   bc662:	dd11      	ble.n	bc688 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bc664:	0130      	lsls	r0, r6, #4
   bc666:	f7fe fb49 	bl	bacfc <malloc>
            if (!d) {
   bc66a:	4604      	mov	r4, r0
   bc66c:	b158      	cbz	r0, bc686 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bc66e:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc672:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bc676:	f7ff ffc7 	bl	bc608 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bc67a:	6828      	ldr	r0, [r5, #0]
   bc67c:	f7fe fb46 	bl	bad0c <free>
        data_ = d;
   bc680:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc682:	60ae      	str	r6, [r5, #8]
        return true;
   bc684:	2001      	movs	r0, #1
    }
   bc686:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bc688:	2400      	movs	r4, #0
   bc68a:	e7f6      	b.n	bc67a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bc68c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bc68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc690:	4690      	mov	r8, r2
   bc692:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bc694:	2300      	movs	r3, #0
   bc696:	9103      	str	r1, [sp, #12]
    return size_;
   bc698:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bc69c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bc69e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bc6a0:	4299      	cmp	r1, r3
        capacity_(0) {
   bc6a2:	e9c0 3300 	strd	r3, r3, [r0]
   bc6a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bc6aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bc6ae:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bc6b2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bc6b4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bc6b6:	dc23      	bgt.n	bc700 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bc6b8:	e9d8 5700 	ldrd	r5, r7, [r8]
   bc6bc:	2314      	movs	r3, #20
   bc6be:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bc6c2:	42af      	cmp	r7, r5
   bc6c4:	d03b      	beq.n	bc73e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bc6c6:	4629      	mov	r1, r5
   bc6c8:	a80b      	add	r0, sp, #44	; 0x2c
   bc6ca:	f000 feff 	bl	bd4cc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bc6ce:	a90b      	add	r1, sp, #44	; 0x2c
   bc6d0:	a80f      	add	r0, sp, #60	; 0x3c
   bc6d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bc6d4:	f000 fefa 	bl	bd4cc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc6d8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bc6dc:	4299      	cmp	r1, r3
   bc6de:	da1b      	bge.n	bc718 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bc6e0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bc6e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bc6e4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bc6e8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bc6ec:	4631      	mov	r1, r6
   bc6ee:	f106 0010 	add.w	r0, r6, #16
   bc6f2:	f7ff ff89 	bl	bc608 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bc6f6:	b9ee      	cbnz	r6, bc734 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bc6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc6fa:	3301      	adds	r3, #1
   bc6fc:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bc6fe:	e011      	b.n	bc724 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bc700:	a808      	add	r0, sp, #32
   bc702:	f7ff ffab 	bl	bc65c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bc706:	2800      	cmp	r0, #0
   bc708:	d1d6      	bne.n	bc6b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bc70a:	a808      	add	r0, sp, #32
   bc70c:	f7fe fba1 	bl	bae52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bc710:	4620      	mov	r0, r4
   bc712:	b015      	add	sp, #84	; 0x54
   bc714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc718:	3101      	adds	r1, #1
   bc71a:	a808      	add	r0, sp, #32
   bc71c:	f7ff ff9e 	bl	bc65c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bc720:	2800      	cmp	r0, #0
   bc722:	d1dd      	bne.n	bc6e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bc724:	a80f      	add	r0, sp, #60	; 0x3c
   bc726:	f000 fe55 	bl	bd3d4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bc72a:	a80b      	add	r0, sp, #44	; 0x2c
   bc72c:	f000 fe52 	bl	bd3d4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bc730:	3514      	adds	r5, #20
   bc732:	e7c6      	b.n	bc6c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bc734:	a90f      	add	r1, sp, #60	; 0x3c
   bc736:	4630      	mov	r0, r6
   bc738:	f000 fec8 	bl	bd4cc <_ZN6StringC1EOS_>
   bc73c:	e7dc      	b.n	bc6f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bc73e:	2600      	movs	r6, #0
   bc740:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bc744:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bc746:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bc74a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bc74e:	429e      	cmp	r6, r3
   bc750:	da7c      	bge.n	bc84c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bc752:	0133      	lsls	r3, r6, #4
   bc754:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bc756:	9306      	str	r3, [sp, #24]
        if (!category) {
   bc758:	b90b      	cbnz	r3, bc75e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bc75a:	3601      	adds	r6, #1
   bc75c:	e7f5      	b.n	bc74a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bc75e:	2300      	movs	r3, #0
   bc760:	9307      	str	r3, [sp, #28]
   bc762:	fb09 f306 	mul.w	r3, r9, r6
   bc766:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bc768:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bc76a:	a907      	add	r1, sp, #28
   bc76c:	a806      	add	r0, sp, #24
   bc76e:	f7ff fb5e 	bl	bbe2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bc772:	4682      	mov	sl, r0
   bc774:	2800      	cmp	r0, #0
   bc776:	d0f0      	beq.n	bc75a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bc778:	f04f 0300 	mov.w	r3, #0
   bc77c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc780:	4601      	mov	r1, r0
   bc782:	9a07      	ldr	r2, [sp, #28]
   bc784:	f10d 0317 	add.w	r3, sp, #23
   bc788:	4628      	mov	r0, r5
   bc78a:	f7ff fbe5 	bl	bbf58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc78e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc792:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc794:	2f00      	cmp	r7, #0
   bc796:	d14a      	bne.n	bc82e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bc798:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bc79c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bc7a0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bc7a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bc7a8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bc7ac:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bc7b0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc7b2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bc7b6:	4293      	cmp	r3, r2
   bc7b8:	db17      	blt.n	bc7ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bc7ba:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bc7be:	f1ba 0f00 	cmp.w	sl, #0
   bc7c2:	dd30      	ble.n	bc826 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bc7c4:	fb09 f00a 	mul.w	r0, r9, sl
   bc7c8:	f7fe fa98 	bl	bacfc <malloc>
            if (!d) {
   bc7cc:	4683      	mov	fp, r0
   bc7ce:	b360      	cbz	r0, bc82a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bc7d0:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc7d4:	fb09 1202 	mla	r2, r9, r2, r1
   bc7d8:	f7ff feea 	bl	bc5b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bc7dc:	6828      	ldr	r0, [r5, #0]
   bc7de:	f7fe fa95 	bl	bad0c <free>
        data_ = d;
   bc7e2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bc7e6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bc7ea:	682b      	ldr	r3, [r5, #0]
   bc7ec:	9a01      	ldr	r2, [sp, #4]
   bc7ee:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bc7f2:	686a      	ldr	r2, [r5, #4]
   bc7f4:	4651      	mov	r1, sl
   bc7f6:	fb09 3202 	mla	r2, r9, r2, r3
   bc7fa:	f10a 0014 	add.w	r0, sl, #20
   bc7fe:	f7ff fed7 	bl	bc5b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bc802:	f1ba 0f00 	cmp.w	sl, #0
   bc806:	d003      	beq.n	bc810 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bc808:	a90f      	add	r1, sp, #60	; 0x3c
   bc80a:	4650      	mov	r0, sl
   bc80c:	f7ff fb90 	bl	bbf30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bc810:	686b      	ldr	r3, [r5, #4]
   bc812:	3301      	adds	r3, #1
   bc814:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bc816:	a811      	add	r0, sp, #68	; 0x44
   bc818:	f7ff fcdc 	bl	bc1d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc81c:	b13f      	cbz	r7, bc82e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bc81e:	a80b      	add	r0, sp, #44	; 0x2c
   bc820:	f7ff fcd8 	bl	bc1d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc824:	e771      	b.n	bc70a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bc826:	46bb      	mov	fp, r7
   bc828:	e7d8      	b.n	bc7dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bc82a:	2701      	movs	r7, #1
   bc82c:	e7f3      	b.n	bc816 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bc82e:	9b01      	ldr	r3, [sp, #4]
   bc830:	682d      	ldr	r5, [r5, #0]
   bc832:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bc836:	9b06      	ldr	r3, [sp, #24]
   bc838:	781b      	ldrb	r3, [r3, #0]
   bc83a:	b92b      	cbnz	r3, bc848 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bc83c:	f8d8 3000 	ldr.w	r3, [r8]
   bc840:	9a02      	ldr	r2, [sp, #8]
   bc842:	4413      	add	r3, r2
   bc844:	7c1b      	ldrb	r3, [r3, #16]
   bc846:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bc848:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bc84a:	e78e      	b.n	bc76a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc84c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bc84e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc850:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc852:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc854:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc856:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bc858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bc85a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc85c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bc85e:	60a2      	str	r2, [r4, #8]
   bc860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bc862:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc864:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc866:	60e2      	str	r2, [r4, #12]
   bc868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bc86a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc86c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc86e:	6122      	str	r2, [r4, #16]
   bc870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bc872:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bc874:	9b03      	ldr	r3, [sp, #12]
   bc876:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bc878:	6162      	str	r2, [r4, #20]
   bc87a:	7623      	strb	r3, [r4, #24]
   bc87c:	e7cf      	b.n	bc81e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bc880 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bc880:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc882:	4604      	mov	r4, r0
   bc884:	b087      	sub	sp, #28
   bc886:	460d      	mov	r5, r1
        filter_(level, filters) {
   bc888:	4626      	mov	r6, r4
        stream_(&stream) {
   bc88a:	4619      	mov	r1, r3
   bc88c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bc88e:	4617      	mov	r7, r2
        stream_(&stream) {
   bc890:	f7f9 fa49 	bl	b5d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bc894:	4b0b      	ldr	r3, [pc, #44]	; (bc8c4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bc896:	f846 3b04 	str.w	r3, [r6], #4
   bc89a:	4669      	mov	r1, sp
   bc89c:	a803      	add	r0, sp, #12
   bc89e:	f7f9 fa42 	bl	b5d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bc8a2:	aa03      	add	r2, sp, #12
   bc8a4:	4639      	mov	r1, r7
   bc8a6:	4630      	mov	r0, r6
   bc8a8:	f7ff fef0 	bl	bc68c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc8ac:	a803      	add	r0, sp, #12
   bc8ae:	f7f9 f9f9 	bl	b5ca4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bc8b2:	4668      	mov	r0, sp
   bc8b4:	f7f9 f9f6 	bl	b5ca4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bc8b8:	4b03      	ldr	r3, [pc, #12]	; (bc8c8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bc8ba:	6023      	str	r3, [r4, #0]
}
   bc8bc:	4620      	mov	r0, r4
        stream_(&stream) {
   bc8be:	6225      	str	r5, [r4, #32]
}
   bc8c0:	b007      	add	sp, #28
   bc8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc8c4:	000bfa0c 	.word	0x000bfa0c
   bc8c8:	000c0630 	.word	0x000c0630

000bc8cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bc8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc8ce:	460f      	mov	r7, r1
   bc8d0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc8d2:	491d      	ldr	r1, [pc, #116]	; (bc948 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bc8d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc8d6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bc8d8:	4616      	mov	r6, r2
   bc8da:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bc8dc:	f002 f9e9 	bl	becb2 <strcmp>
   bc8e0:	b9c0      	cbnz	r0, bc914 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bc8e2:	b1a4      	cbz	r4, bc90e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bc8e4:	4629      	mov	r1, r5
   bc8e6:	a801      	add	r0, sp, #4
   bc8e8:	f7ff fcbc 	bl	bc264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bc8ec:	4917      	ldr	r1, [pc, #92]	; (bc94c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bc8ee:	2024      	movs	r0, #36	; 0x24
   bc8f0:	f001 fc18 	bl	be124 <_ZnwjRKSt9nothrow_t>
   bc8f4:	4605      	mov	r5, r0
   bc8f6:	b130      	cbz	r0, bc906 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bc8f8:	ab01      	add	r3, sp, #4
   bc8fa:	4632      	mov	r2, r6
   bc8fc:	4621      	mov	r1, r4
   bc8fe:	f7ff ffbf 	bl	bc880 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc902:	4b13      	ldr	r3, [pc, #76]	; (bc950 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bc904:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bc906:	a801      	add	r0, sp, #4
   bc908:	f7f9 f9cc 	bl	b5ca4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bc90c:	462c      	mov	r4, r5
}
   bc90e:	4620      	mov	r0, r4
   bc910:	b005      	add	sp, #20
   bc912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bc914:	490f      	ldr	r1, [pc, #60]	; (bc954 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bc916:	4638      	mov	r0, r7
   bc918:	f002 f9cb 	bl	becb2 <strcmp>
   bc91c:	b990      	cbnz	r0, bc944 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bc91e:	2c00      	cmp	r4, #0
   bc920:	d0f5      	beq.n	bc90e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bc922:	4629      	mov	r1, r5
   bc924:	a801      	add	r0, sp, #4
   bc926:	f7ff fc9d 	bl	bc264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bc92a:	4908      	ldr	r1, [pc, #32]	; (bc94c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bc92c:	2024      	movs	r0, #36	; 0x24
   bc92e:	f001 fbf9 	bl	be124 <_ZnwjRKSt9nothrow_t>
   bc932:	4605      	mov	r5, r0
   bc934:	2800      	cmp	r0, #0
   bc936:	d0e6      	beq.n	bc906 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bc938:	ab01      	add	r3, sp, #4
   bc93a:	4632      	mov	r2, r6
   bc93c:	4621      	mov	r1, r4
   bc93e:	f7ff ff9f 	bl	bc880 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bc942:	e7e0      	b.n	bc906 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bc944:	2400      	movs	r4, #0
   bc946:	e7e2      	b.n	bc90e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bc948:	000c05ba 	.word	0x000c05ba
   bc94c:	000c0784 	.word	0x000c0784
   bc950:	000c0648 	.word	0x000c0648
   bc954:	000c05be 	.word	0x000c05be

000bc958 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bc958:	4b01      	ldr	r3, [pc, #4]	; (bc960 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bc95a:	4a02      	ldr	r2, [pc, #8]	; (bc964 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bc95c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bc95e:	4770      	bx	lr
   bc960:	2003e658 	.word	0x2003e658
   bc964:	000c05cf 	.word	0x000c05cf

000bc968 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bc968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc96c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bc96e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bc972:	4604      	mov	r4, r0
   bc974:	460e      	mov	r6, r1
   bc976:	4617      	mov	r7, r2
   bc978:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bc97a:	f001 f9b1 	bl	bdce0 <_Z16_fetch_usbserialv>
   bc97e:	4581      	cmp	r9, r0
   bc980:	d04c      	beq.n	bca1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bc982:	792b      	ldrb	r3, [r5, #4]
   bc984:	0719      	lsls	r1, r3, #28
   bc986:	d504      	bpl.n	bc992 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bc988:	696a      	ldr	r2, [r5, #20]
   bc98a:	4954      	ldr	r1, [pc, #336]	; (bcadc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bc98c:	4620      	mov	r0, r4
   bc98e:	f7ff fac0 	bl	bbf12 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bc992:	f1b8 0f00 	cmp.w	r8, #0
   bc996:	d00d      	beq.n	bc9b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bc998:	215b      	movs	r1, #91	; 0x5b
   bc99a:	4620      	mov	r0, r4
   bc99c:	f7ff faad 	bl	bbefa <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bc9a0:	4641      	mov	r1, r8
   bc9a2:	4620      	mov	r0, r4
   bc9a4:	f7ff fa9a 	bl	bbedc <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bc9a8:	6823      	ldr	r3, [r4, #0]
   bc9aa:	494d      	ldr	r1, [pc, #308]	; (bcae0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bc9ac:	68db      	ldr	r3, [r3, #12]
   bc9ae:	2202      	movs	r2, #2
   bc9b0:	4620      	mov	r0, r4
   bc9b2:	4798      	blx	r3
    if (attr.has_file) {
   bc9b4:	792b      	ldrb	r3, [r5, #4]
   bc9b6:	07da      	lsls	r2, r3, #31
   bc9b8:	d523      	bpl.n	bca02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bc9ba:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bc9be:	212f      	movs	r1, #47	; 0x2f
   bc9c0:	4640      	mov	r0, r8
   bc9c2:	f002 f9d5 	bl	bed70 <strrchr>
    if (s1) {
   bc9c6:	b108      	cbz	r0, bc9cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bc9c8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bc9cc:	4641      	mov	r1, r8
   bc9ce:	4620      	mov	r0, r4
   bc9d0:	f7ff fa84 	bl	bbedc <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bc9d4:	792b      	ldrb	r3, [r5, #4]
   bc9d6:	079b      	lsls	r3, r3, #30
   bc9d8:	d508      	bpl.n	bc9ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bc9da:	213a      	movs	r1, #58	; 0x3a
   bc9dc:	4620      	mov	r0, r4
   bc9de:	f7ff fa8c 	bl	bbefa <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bc9e2:	68ea      	ldr	r2, [r5, #12]
   bc9e4:	493f      	ldr	r1, [pc, #252]	; (bcae4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bc9e6:	4620      	mov	r0, r4
   bc9e8:	f7ff fa93 	bl	bbf12 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bc9ec:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bc9ee:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bc9f0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bc9f4:	68db      	ldr	r3, [r3, #12]
   bc9f6:	bf14      	ite	ne
   bc9f8:	493b      	ldrne	r1, [pc, #236]	; (bcae8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bc9fa:	493c      	ldreq	r1, [pc, #240]	; (bcaec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bc9fc:	2202      	movs	r2, #2
            write(": ", 2);
   bc9fe:	4620      	mov	r0, r4
   bca00:	4798      	blx	r3
    if (attr.has_function) {
   bca02:	792b      	ldrb	r3, [r5, #4]
   bca04:	0758      	lsls	r0, r3, #29
   bca06:	d51d      	bpl.n	bca44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bca08:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bca0a:	460b      	mov	r3, r1
   bca0c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bca0e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bca12:	b160      	cbz	r0, bca2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bca14:	2820      	cmp	r0, #32
   bca16:	d108      	bne.n	bca2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bca18:	4619      	mov	r1, r3
   bca1a:	e7f7      	b.n	bca0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bca1c:	4834      	ldr	r0, [pc, #208]	; (bcaf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bca1e:	f000 f966 	bl	bccee <_ZN5spark12NetworkClass9listeningEv>
   bca22:	2800      	cmp	r0, #0
   bca24:	d0ad      	beq.n	bc982 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bca26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bca2a:	2828      	cmp	r0, #40	; 0x28
   bca2c:	d1ee      	bne.n	bca0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bca2e:	6823      	ldr	r3, [r4, #0]
   bca30:	1a52      	subs	r2, r2, r1
   bca32:	68db      	ldr	r3, [r3, #12]
   bca34:	4620      	mov	r0, r4
   bca36:	4798      	blx	r3
        write("(): ", 4);
   bca38:	6823      	ldr	r3, [r4, #0]
   bca3a:	492e      	ldr	r1, [pc, #184]	; (bcaf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bca3c:	68db      	ldr	r3, [r3, #12]
   bca3e:	2204      	movs	r2, #4
   bca40:	4620      	mov	r0, r4
   bca42:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bca44:	2100      	movs	r1, #0
   bca46:	4638      	mov	r0, r7
   bca48:	f7fe f80c 	bl	baa64 <log_level_name>
   bca4c:	4601      	mov	r1, r0
    write(s);
   bca4e:	4620      	mov	r0, r4
   bca50:	f7ff fa44 	bl	bbedc <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bca54:	6823      	ldr	r3, [r4, #0]
   bca56:	4925      	ldr	r1, [pc, #148]	; (bcaec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bca58:	68db      	ldr	r3, [r3, #12]
   bca5a:	2202      	movs	r2, #2
   bca5c:	4620      	mov	r0, r4
   bca5e:	4798      	blx	r3
    if (msg) {
   bca60:	b11e      	cbz	r6, bca6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bca62:	4631      	mov	r1, r6
   bca64:	4620      	mov	r0, r4
   bca66:	f7ff fa39 	bl	bbedc <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bca6a:	792b      	ldrb	r3, [r5, #4]
   bca6c:	f013 0f30 	tst.w	r3, #48	; 0x30
   bca70:	d02c      	beq.n	bcacc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bca72:	6823      	ldr	r3, [r4, #0]
   bca74:	4920      	ldr	r1, [pc, #128]	; (bcaf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bca76:	68db      	ldr	r3, [r3, #12]
   bca78:	2202      	movs	r2, #2
   bca7a:	4620      	mov	r0, r4
   bca7c:	4798      	blx	r3
        if (attr.has_code) {
   bca7e:	792b      	ldrb	r3, [r5, #4]
   bca80:	06d9      	lsls	r1, r3, #27
   bca82:	d50a      	bpl.n	bca9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bca84:	6823      	ldr	r3, [r4, #0]
   bca86:	491d      	ldr	r1, [pc, #116]	; (bcafc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bca88:	68db      	ldr	r3, [r3, #12]
   bca8a:	2207      	movs	r2, #7
   bca8c:	4620      	mov	r0, r4
   bca8e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bca90:	69aa      	ldr	r2, [r5, #24]
   bca92:	491b      	ldr	r1, [pc, #108]	; (bcb00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bca94:	4620      	mov	r0, r4
   bca96:	f7ff fa3c 	bl	bbf12 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bca9a:	792b      	ldrb	r3, [r5, #4]
   bca9c:	069a      	lsls	r2, r3, #26
   bca9e:	d511      	bpl.n	bcac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bcaa0:	06db      	lsls	r3, r3, #27
   bcaa2:	d505      	bpl.n	bcab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bcaa4:	6823      	ldr	r3, [r4, #0]
   bcaa6:	4910      	ldr	r1, [pc, #64]	; (bcae8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bcaa8:	68db      	ldr	r3, [r3, #12]
   bcaaa:	2202      	movs	r2, #2
   bcaac:	4620      	mov	r0, r4
   bcaae:	4798      	blx	r3
            write("details = ", 10);
   bcab0:	6823      	ldr	r3, [r4, #0]
   bcab2:	4914      	ldr	r1, [pc, #80]	; (bcb04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bcab4:	68db      	ldr	r3, [r3, #12]
   bcab6:	4620      	mov	r0, r4
   bcab8:	220a      	movs	r2, #10
   bcaba:	4798      	blx	r3
            write(attr.details);
   bcabc:	69e9      	ldr	r1, [r5, #28]
   bcabe:	4620      	mov	r0, r4
   bcac0:	f7ff fa0c 	bl	bbedc <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bcac4:	215d      	movs	r1, #93	; 0x5d
   bcac6:	4620      	mov	r0, r4
   bcac8:	f7ff fa17 	bl	bbefa <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bcacc:	6823      	ldr	r3, [r4, #0]
   bcace:	490e      	ldr	r1, [pc, #56]	; (bcb08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bcad0:	68db      	ldr	r3, [r3, #12]
   bcad2:	4620      	mov	r0, r4
   bcad4:	2202      	movs	r2, #2
}
   bcad6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bcada:	4718      	bx	r3
   bcadc:	000c05d3 	.word	0x000c05d3
   bcae0:	000c05da 	.word	0x000c05da
   bcae4:	000bfb6b 	.word	0x000bfb6b
   bcae8:	000c05dd 	.word	0x000c05dd
   bcaec:	000c05e2 	.word	0x000c05e2
   bcaf0:	2003e684 	.word	0x2003e684
   bcaf4:	000c05e0 	.word	0x000c05e0
   bcaf8:	000c05e5 	.word	0x000c05e5
   bcafc:	000c05e8 	.word	0x000c05e8
   bcb00:	000bf204 	.word	0x000bf204
   bcb04:	000c05f0 	.word	0x000c05f0
   bcb08:	000c05fb 	.word	0x000c05fb

000bcb0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bcb0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcb10:	b085      	sub	sp, #20
    return stream_;
   bcb12:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bcb16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bcb18:	4605      	mov	r5, r0
   bcb1a:	460f      	mov	r7, r1
   bcb1c:	4690      	mov	r8, r2
   bcb1e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bcb20:	f001 f8de 	bl	bdce0 <_Z16_fetch_usbserialv>
   bcb24:	4581      	cmp	r9, r0
   bcb26:	d105      	bne.n	bcb34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bcb28:	4849      	ldr	r0, [pc, #292]	; (bcc50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bcb2a:	f000 f8e0 	bl	bccee <_ZN5spark12NetworkClass9listeningEv>
   bcb2e:	2800      	cmp	r0, #0
   bcb30:	f040 808a 	bne.w	bcc48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bcb34:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bcb36:	4a47      	ldr	r2, [pc, #284]	; (bcc54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bcb38:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bcb3a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bcb3e:	a801      	add	r0, sp, #4
        strm_(stream) {
   bcb40:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bcb42:	f88d 9008 	strb.w	r9, [sp, #8]
   bcb46:	f7ff f8b4 	bl	bbcb2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bcb4a:	4649      	mov	r1, r9
   bcb4c:	4640      	mov	r0, r8
   bcb4e:	f7fd ff89 	bl	baa64 <log_level_name>
    json.name("l", 1).value(s);
   bcb52:	4941      	ldr	r1, [pc, #260]	; (bcc58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bcb54:	4680      	mov	r8, r0
   bcb56:	2201      	movs	r2, #1
   bcb58:	a801      	add	r0, sp, #4
   bcb5a:	f7ff f939 	bl	bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcb5e:	4641      	mov	r1, r8
   bcb60:	f7ff f9ae 	bl	bbec0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bcb64:	b13f      	cbz	r7, bcb76 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bcb66:	493d      	ldr	r1, [pc, #244]	; (bcc5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bcb68:	2201      	movs	r2, #1
   bcb6a:	a801      	add	r0, sp, #4
   bcb6c:	f7ff f930 	bl	bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcb70:	4639      	mov	r1, r7
   bcb72:	f7ff f9a5 	bl	bbec0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bcb76:	b13e      	cbz	r6, bcb88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bcb78:	4939      	ldr	r1, [pc, #228]	; (bcc60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bcb7a:	2201      	movs	r2, #1
   bcb7c:	a801      	add	r0, sp, #4
   bcb7e:	f7ff f927 	bl	bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcb82:	4631      	mov	r1, r6
   bcb84:	f7ff f99c 	bl	bbec0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bcb88:	7923      	ldrb	r3, [r4, #4]
   bcb8a:	07df      	lsls	r7, r3, #31
   bcb8c:	d50e      	bpl.n	bcbac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bcb8e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bcb90:	212f      	movs	r1, #47	; 0x2f
   bcb92:	4630      	mov	r0, r6
   bcb94:	f002 f8ec 	bl	bed70 <strrchr>
    if (s1) {
   bcb98:	b100      	cbz	r0, bcb9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bcb9a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bcb9c:	4931      	ldr	r1, [pc, #196]	; (bcc64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bcb9e:	2201      	movs	r2, #1
   bcba0:	a801      	add	r0, sp, #4
   bcba2:	f7ff f915 	bl	bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcba6:	4631      	mov	r1, r6
   bcba8:	f7ff f98a 	bl	bbec0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bcbac:	7923      	ldrb	r3, [r4, #4]
   bcbae:	079e      	lsls	r6, r3, #30
   bcbb0:	d507      	bpl.n	bcbc2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bcbb2:	492d      	ldr	r1, [pc, #180]	; (bcc68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bcbb4:	2202      	movs	r2, #2
   bcbb6:	a801      	add	r0, sp, #4
   bcbb8:	f7ff f90a 	bl	bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcbbc:	68e1      	ldr	r1, [r4, #12]
   bcbbe:	f7ff f885 	bl	bbccc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bcbc2:	7923      	ldrb	r3, [r4, #4]
   bcbc4:	0758      	lsls	r0, r3, #29
   bcbc6:	d514      	bpl.n	bcbf2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bcbc8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bcbca:	4633      	mov	r3, r6
   bcbcc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bcbce:	f813 2b01 	ldrb.w	r2, [r3], #1
   bcbd2:	b12a      	cbz	r2, bcbe0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bcbd4:	2a20      	cmp	r2, #32
   bcbd6:	d101      	bne.n	bcbdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bcbd8:	461e      	mov	r6, r3
   bcbda:	e7f7      	b.n	bcbcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bcbdc:	2a28      	cmp	r2, #40	; 0x28
   bcbde:	d1f5      	bne.n	bcbcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bcbe0:	4922      	ldr	r1, [pc, #136]	; (bcc6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bcbe2:	2202      	movs	r2, #2
   bcbe4:	a801      	add	r0, sp, #4
   bcbe6:	f7ff f8f3 	bl	bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcbea:	1bba      	subs	r2, r7, r6
   bcbec:	4631      	mov	r1, r6
   bcbee:	f7ff f8ff 	bl	bbdf0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bcbf2:	7923      	ldrb	r3, [r4, #4]
   bcbf4:	0719      	lsls	r1, r3, #28
   bcbf6:	d507      	bpl.n	bcc08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bcbf8:	491d      	ldr	r1, [pc, #116]	; (bcc70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bcbfa:	2201      	movs	r2, #1
   bcbfc:	a801      	add	r0, sp, #4
   bcbfe:	f7ff f8e7 	bl	bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc02:	6961      	ldr	r1, [r4, #20]
   bcc04:	f7ff f874 	bl	bbcf0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bcc08:	7923      	ldrb	r3, [r4, #4]
   bcc0a:	06da      	lsls	r2, r3, #27
   bcc0c:	d508      	bpl.n	bcc20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bcc0e:	2204      	movs	r2, #4
   bcc10:	4918      	ldr	r1, [pc, #96]	; (bcc74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bcc12:	eb0d 0002 	add.w	r0, sp, r2
   bcc16:	f7ff f8db 	bl	bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc1a:	69a1      	ldr	r1, [r4, #24]
   bcc1c:	f7ff f856 	bl	bbccc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bcc20:	7923      	ldrb	r3, [r4, #4]
   bcc22:	069b      	lsls	r3, r3, #26
   bcc24:	d507      	bpl.n	bcc36 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bcc26:	4914      	ldr	r1, [pc, #80]	; (bcc78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bcc28:	2206      	movs	r2, #6
   bcc2a:	a801      	add	r0, sp, #4
   bcc2c:	f7ff f8d0 	bl	bbdd0 <_ZN5spark10JSONWriter4nameEPKcj>
   bcc30:	69e1      	ldr	r1, [r4, #28]
   bcc32:	f7ff f945 	bl	bbec0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bcc36:	a801      	add	r0, sp, #4
   bcc38:	f7ff f825 	bl	bbc86 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bcc3c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bcc3e:	490f      	ldr	r1, [pc, #60]	; (bcc7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bcc40:	6803      	ldr	r3, [r0, #0]
   bcc42:	2202      	movs	r2, #2
   bcc44:	68db      	ldr	r3, [r3, #12]
   bcc46:	4798      	blx	r3
}
   bcc48:	b005      	add	sp, #20
   bcc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcc4e:	bf00      	nop
   bcc50:	2003e684 	.word	0x2003e684
   bcc54:	000c0618 	.word	0x000c0618
   bcc58:	000c05b0 	.word	0x000c05b0
   bcc5c:	000bff00 	.word	0x000bff00
   bcc60:	000c08a5 	.word	0x000c08a5
   bcc64:	000bf68b 	.word	0x000bf68b
   bcc68:	000c05fe 	.word	0x000c05fe
   bcc6c:	000c0601 	.word	0x000c0601
   bcc70:	000bf8bf 	.word	0x000bf8bf
   bcc74:	000c0604 	.word	0x000c0604
   bcc78:	000c0609 	.word	0x000c0609
   bcc7c:	000c05fb 	.word	0x000c05fb

000bcc80 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bcc80:	2300      	movs	r3, #0
   bcc82:	6840      	ldr	r0, [r0, #4]
   bcc84:	461a      	mov	r2, r3
   bcc86:	f7fd bfd9 	b.w	bac3c <network_connect>

000bcc8a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bcc8a:	6840      	ldr	r0, [r0, #4]
   bcc8c:	2200      	movs	r2, #0
   bcc8e:	2102      	movs	r1, #2
   bcc90:	f7fd bfe4 	b.w	bac5c <network_disconnect>

000bcc94 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bcc94:	2200      	movs	r2, #0
   bcc96:	6840      	ldr	r0, [r0, #4]
   bcc98:	4611      	mov	r1, r2
   bcc9a:	f7fd bfd7 	b.w	bac4c <network_connecting>

000bcc9e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bcc9e:	2200      	movs	r2, #0
   bcca0:	6840      	ldr	r0, [r0, #4]
   bcca2:	4611      	mov	r1, r2
   bcca4:	f7fd bfe2 	b.w	bac6c <network_ready>

000bcca8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bcca8:	2300      	movs	r3, #0
   bccaa:	6840      	ldr	r0, [r0, #4]
   bccac:	461a      	mov	r2, r3
   bccae:	4619      	mov	r1, r3
   bccb0:	f7fd bfe4 	b.w	bac7c <network_on>

000bccb4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bccb4:	2300      	movs	r3, #0
   bccb6:	6840      	ldr	r0, [r0, #4]
   bccb8:	461a      	mov	r2, r3
   bccba:	4619      	mov	r1, r3
   bccbc:	f7fd bfe6 	b.w	bac8c <network_off>

000bccc0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bccc0:	6840      	ldr	r0, [r0, #4]
   bccc2:	2100      	movs	r1, #0
   bccc4:	f7fe b80a 	b.w	bacdc <network_is_on>

000bccc8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bccc8:	6840      	ldr	r0, [r0, #4]
   bccca:	2100      	movs	r1, #0
   bcccc:	f7fe b80e 	b.w	bacec <network_is_off>

000bccd0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bccd0:	6840      	ldr	r0, [r0, #4]
   bccd2:	2200      	movs	r2, #0
   bccd4:	f081 0101 	eor.w	r1, r1, #1
   bccd8:	f7fd bfe0 	b.w	bac9c <network_listen>

000bccdc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bccdc:	6840      	ldr	r0, [r0, #4]
   bccde:	2200      	movs	r2, #0
   bcce0:	f7fd bfec 	b.w	bacbc <network_set_listen_timeout>

000bcce4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bcce4:	2200      	movs	r2, #0
   bcce6:	6840      	ldr	r0, [r0, #4]
   bcce8:	4611      	mov	r1, r2
   bccea:	f7fd bfef 	b.w	baccc <network_get_listen_timeout>

000bccee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bccee:	2200      	movs	r2, #0
   bccf0:	6840      	ldr	r0, [r0, #4]
   bccf2:	4611      	mov	r1, r2
   bccf4:	f7fd bfda 	b.w	bacac <network_listening>

000bccf8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bccf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bccfc:	b095      	sub	sp, #84	; 0x54
   bccfe:	4614      	mov	r4, r2
   bcd00:	460d      	mov	r5, r1
   bcd02:	4607      	mov	r7, r0
    IPAddress addr;
   bcd04:	f7fe fe6e 	bl	bb9e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bcd08:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bcd0a:	221c      	movs	r2, #28
   bcd0c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bcd0e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bcd10:	f001 ff44 	bl	beb9c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bcd14:	2340      	movs	r3, #64	; 0x40
   bcd16:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bcd18:	4620      	mov	r0, r4
   bcd1a:	466b      	mov	r3, sp
   bcd1c:	aa0c      	add	r2, sp, #48	; 0x30
   bcd1e:	2100      	movs	r1, #0
   bcd20:	f7fd fd40 	bl	ba7a4 <netdb_getaddrinfo>
    if (!r) {
   bcd24:	4604      	mov	r4, r0
   bcd26:	2800      	cmp	r0, #0
   bcd28:	d14b      	bne.n	bcdc2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcd2a:	4602      	mov	r2, r0
   bcd2c:	2101      	movs	r1, #1
   bcd2e:	6868      	ldr	r0, [r5, #4]
   bcd30:	f7fd ff9c 	bl	bac6c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcd34:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcd36:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcd38:	4622      	mov	r2, r4
   bcd3a:	6868      	ldr	r0, [r5, #4]
   bcd3c:	f7fd ff96 	bl	bac6c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcd40:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcd42:	4681      	mov	r9, r0
        bool ok = false;
   bcd44:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcd46:	2e00      	cmp	r6, #0
   bcd48:	d03b      	beq.n	bcdc2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bcd4a:	2900      	cmp	r1, #0
   bcd4c:	d139      	bne.n	bcdc2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bcd4e:	6873      	ldr	r3, [r6, #4]
   bcd50:	2b02      	cmp	r3, #2
   bcd52:	d003      	beq.n	bcd5c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bcd54:	2b0a      	cmp	r3, #10
   bcd56:	d011      	beq.n	bcd7c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcd58:	69f6      	ldr	r6, [r6, #28]
   bcd5a:	e7f4      	b.n	bcd46 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bcd5c:	f1b8 0f00 	cmp.w	r8, #0
   bcd60:	d0fa      	beq.n	bcd58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bcd62:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bcd64:	a806      	add	r0, sp, #24
   bcd66:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bcd68:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bcd6a:	f7fe fe69 	bl	bba40 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bcd6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcd70:	1d3c      	adds	r4, r7, #4
   bcd72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bcd74:	682b      	ldr	r3, [r5, #0]
   bcd76:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bcd78:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bcd7a:	e7ed      	b.n	bcd58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bcd7c:	f1b9 0f00 	cmp.w	r9, #0
   bcd80:	d0ea      	beq.n	bcd58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bcd82:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bcd84:	2210      	movs	r2, #16
   bcd86:	a801      	add	r0, sp, #4
   bcd88:	f001 ff08 	bl	beb9c <memset>
                    a.v = 6;
   bcd8c:	2306      	movs	r3, #6
   bcd8e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bcd92:	ad01      	add	r5, sp, #4
   bcd94:	f104 0308 	add.w	r3, r4, #8
   bcd98:	3418      	adds	r4, #24
   bcd9a:	6818      	ldr	r0, [r3, #0]
   bcd9c:	6859      	ldr	r1, [r3, #4]
   bcd9e:	462a      	mov	r2, r5
   bcda0:	c203      	stmia	r2!, {r0, r1}
   bcda2:	3308      	adds	r3, #8
   bcda4:	42a3      	cmp	r3, r4
   bcda6:	4615      	mov	r5, r2
   bcda8:	d1f7      	bne.n	bcd9a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bcdaa:	a901      	add	r1, sp, #4
   bcdac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bcdae:	ad07      	add	r5, sp, #28
   bcdb0:	f7fe fe26 	bl	bba00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bcdb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcdb6:	1d3c      	adds	r4, r7, #4
   bcdb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bcdba:	682b      	ldr	r3, [r5, #0]
   bcdbc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bcdbe:	4649      	mov	r1, r9
   bcdc0:	e7ca      	b.n	bcd58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bcdc2:	9800      	ldr	r0, [sp, #0]
   bcdc4:	f7fd fce6 	bl	ba794 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bcdc8:	4638      	mov	r0, r7
   bcdca:	b015      	add	sp, #84	; 0x54
   bcdcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bcdd0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bcdd0:	4b02      	ldr	r3, [pc, #8]	; (bcddc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bcdd2:	4a03      	ldr	r2, [pc, #12]	; (bcde0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bcdd4:	601a      	str	r2, [r3, #0]
   bcdd6:	2200      	movs	r2, #0
   bcdd8:	605a      	str	r2, [r3, #4]

} // spark
   bcdda:	4770      	bx	lr
   bcddc:	2003e684 	.word	0x2003e684
   bcde0:	000c0690 	.word	0x000c0690

000bcde4 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bcde4:	b508      	push	{r3, lr}
            return &Wire1;
   bcde6:	f001 f939 	bl	be05c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bcdea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bcdee:	f7fe bd67 	b.w	bb8c0 <_ZN7TwoWire4lockEv>

000bcdf2 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bcdf2:	b510      	push	{r4, lr}
   bcdf4:	4604      	mov	r4, r0
    lock_(_lock)
   bcdf6:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bcdf8:	b109      	cbz	r1, bcdfe <_ZN4PMICC1Eb+0xc>
        lock();
   bcdfa:	f7ff fff3 	bl	bcde4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bcdfe:	4620      	mov	r0, r4
   bce00:	bd10      	pop	{r4, pc}

000bce02 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bce02:	b508      	push	{r3, lr}
            return &Wire1;
   bce04:	f001 f92a 	bl	be05c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bce08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bce0c:	f7fe bd61 	b.w	bb8d2 <_ZN7TwoWire6unlockEv>

000bce10 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bce10:	b510      	push	{r4, lr}
    if (lock_) {
   bce12:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bce14:	4604      	mov	r4, r0
    if (lock_) {
   bce16:	b10b      	cbz	r3, bce1c <_ZN4PMICD1Ev+0xc>
        unlock();
   bce18:	f7ff fff3 	bl	bce02 <_ZN4PMIC6unlockEv>
}
   bce1c:	4620      	mov	r0, r4
   bce1e:	bd10      	pop	{r4, pc}

000bce20 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bce20:	b510      	push	{r4, lr}
   bce22:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bce24:	6800      	ldr	r0, [r0, #0]
   bce26:	f7ff ffec 	bl	bce02 <_ZN4PMIC6unlockEv>
   bce2a:	4620      	mov	r0, r4
   bce2c:	bd10      	pop	{r4, pc}

000bce2e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bce2e:	b530      	push	{r4, r5, lr}
   bce30:	b087      	sub	sp, #28
   bce32:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bce34:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bce36:	f7ff ffd5 	bl	bcde4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bce3a:	226b      	movs	r2, #107	; 0x6b
   bce3c:	2300      	movs	r3, #0
   bce3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bce42:	2401      	movs	r4, #1
   bce44:	230a      	movs	r3, #10
   bce46:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bce4a:	f001 f907 	bl	be05c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bce4e:	a902      	add	r1, sp, #8
   bce50:	f7fe fd1a 	bl	bb888 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bce54:	f001 f902 	bl	be05c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bce58:	6803      	ldr	r3, [r0, #0]
   bce5a:	4629      	mov	r1, r5
   bce5c:	689b      	ldr	r3, [r3, #8]
   bce5e:	4798      	blx	r3
            return &Wire1;
   bce60:	f001 f8fc 	bl	be05c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bce64:	4621      	mov	r1, r4
   bce66:	f7fe fd27 	bl	bb8b8 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bce6a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bce6c:	f001 f8f6 	bl	be05c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bce70:	a902      	add	r1, sp, #8
   bce72:	f7fe fcd9 	bl	bb828 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bce76:	f001 f8f1 	bl	be05c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bce7a:	6803      	ldr	r3, [r0, #0]
   bce7c:	695b      	ldr	r3, [r3, #20]
   bce7e:	4798      	blx	r3
   bce80:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bce82:	a801      	add	r0, sp, #4
   bce84:	f7ff ffcc 	bl	bce20 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bce88:	b2e0      	uxtb	r0, r4
   bce8a:	b007      	add	sp, #28
   bce8c:	bd30      	pop	{r4, r5, pc}

000bce8e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bce8e:	b570      	push	{r4, r5, r6, lr}
   bce90:	b086      	sub	sp, #24
   bce92:	460d      	mov	r5, r1
   bce94:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bce96:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bce98:	f7ff ffa4 	bl	bcde4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bce9c:	226b      	movs	r2, #107	; 0x6b
   bce9e:	2300      	movs	r3, #0
   bcea0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bcea4:	2601      	movs	r6, #1
   bcea6:	230a      	movs	r3, #10
   bcea8:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bceac:	f001 f8d6 	bl	be05c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bceb0:	a902      	add	r1, sp, #8
   bceb2:	f7fe fce9 	bl	bb888 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bceb6:	f001 f8d1 	bl	be05c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bceba:	6803      	ldr	r3, [r0, #0]
   bcebc:	4629      	mov	r1, r5
   bcebe:	689b      	ldr	r3, [r3, #8]
   bcec0:	4798      	blx	r3
            return &Wire1;
   bcec2:	f001 f8cb 	bl	be05c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bcec6:	6803      	ldr	r3, [r0, #0]
   bcec8:	4621      	mov	r1, r4
   bceca:	689b      	ldr	r3, [r3, #8]
   bcecc:	4798      	blx	r3
            return &Wire1;
   bcece:	f001 f8c5 	bl	be05c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bced2:	4631      	mov	r1, r6
   bced4:	f7fe fcf0 	bl	bb8b8 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bced8:	a801      	add	r0, sp, #4
   bceda:	f7ff ffa1 	bl	bce20 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcede:	b006      	add	sp, #24
   bcee0:	bd70      	pop	{r4, r5, r6, pc}

000bcee2 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bcee2:	b513      	push	{r0, r1, r4, lr}
   bcee4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcee6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcee8:	f7ff ff7c 	bl	bcde4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bceec:	2101      	movs	r1, #1
   bceee:	4620      	mov	r0, r4
   bcef0:	f7ff ff9d 	bl	bce2e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bcef4:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bcef8:	2b10      	cmp	r3, #16
   bcefa:	d007      	beq.n	bcf0c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bcefc:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bcf00:	f042 0210 	orr.w	r2, r2, #16
   bcf04:	2101      	movs	r1, #1
   bcf06:	4620      	mov	r0, r4
   bcf08:	f7ff ffc1 	bl	bce8e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bcf0c:	a801      	add	r0, sp, #4
   bcf0e:	f7ff ff87 	bl	bce20 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcf12:	2001      	movs	r0, #1
   bcf14:	b002      	add	sp, #8
   bcf16:	bd10      	pop	{r4, pc}

000bcf18 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bcf18:	b513      	push	{r0, r1, r4, lr}
   bcf1a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcf1c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bcf1e:	f7ff ff61 	bl	bcde4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bcf22:	2101      	movs	r1, #1
   bcf24:	4620      	mov	r0, r4
   bcf26:	f7ff ff82 	bl	bce2e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bcf2a:	f010 0f30 	tst.w	r0, #48	; 0x30
   bcf2e:	d005      	beq.n	bcf3c <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bcf30:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bcf34:	2101      	movs	r1, #1
   bcf36:	4620      	mov	r0, r4
   bcf38:	f7ff ffa9 	bl	bce8e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bcf3c:	a801      	add	r0, sp, #4
   bcf3e:	f7ff ff6f 	bl	bce20 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bcf42:	2001      	movs	r0, #1
   bcf44:	b002      	add	sp, #8
   bcf46:	bd10      	pop	{r4, pc}

000bcf48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bcf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcf4a:	4606      	mov	r6, r0
   bcf4c:	460d      	mov	r5, r1
  size_t n = 0;
   bcf4e:	188f      	adds	r7, r1, r2
   bcf50:	2400      	movs	r4, #0
  while (size--) {
   bcf52:	42bd      	cmp	r5, r7
   bcf54:	d00c      	beq.n	bcf70 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bcf56:	6833      	ldr	r3, [r6, #0]
   bcf58:	f815 1b01 	ldrb.w	r1, [r5], #1
   bcf5c:	689b      	ldr	r3, [r3, #8]
   bcf5e:	4630      	mov	r0, r6
   bcf60:	4798      	blx	r3
     if (chunk>=0)
   bcf62:	1e03      	subs	r3, r0, #0
   bcf64:	db01      	blt.n	bcf6a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bcf66:	441c      	add	r4, r3
  while (size--) {
   bcf68:	e7f3      	b.n	bcf52 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bcf6a:	2c00      	cmp	r4, #0
   bcf6c:	bf08      	it	eq
   bcf6e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bcf70:	4620      	mov	r0, r4
   bcf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcf74 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bcf74:	b513      	push	{r0, r1, r4, lr}
   bcf76:	4604      	mov	r4, r0
    }
   bcf78:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bcf7a:	b159      	cbz	r1, bcf94 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bcf7c:	9101      	str	r1, [sp, #4]
   bcf7e:	f001 fec8 	bl	bed12 <strlen>
   bcf82:	6823      	ldr	r3, [r4, #0]
   bcf84:	9901      	ldr	r1, [sp, #4]
   bcf86:	68db      	ldr	r3, [r3, #12]
   bcf88:	4602      	mov	r2, r0
   bcf8a:	4620      	mov	r0, r4
    }
   bcf8c:	b002      	add	sp, #8
   bcf8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bcf92:	4718      	bx	r3
    }
   bcf94:	b002      	add	sp, #8
   bcf96:	bd10      	pop	{r4, pc}

000bcf98 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bcf98:	b508      	push	{r3, lr}
  return write(str);
   bcf9a:	f7ff ffeb 	bl	bcf74 <_ZN5Print5writeEPKc>
}
   bcf9e:	bd08      	pop	{r3, pc}

000bcfa0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bcfa0:	6803      	ldr	r3, [r0, #0]
   bcfa2:	689b      	ldr	r3, [r3, #8]
   bcfa4:	4718      	bx	r3

000bcfa6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bcfa6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bcfa8:	210d      	movs	r1, #13
{
   bcfaa:	4605      	mov	r5, r0
  size_t n = print('\r');
   bcfac:	f7ff fff8 	bl	bcfa0 <_ZN5Print5printEc>
  n += print('\n');
   bcfb0:	210a      	movs	r1, #10
  size_t n = print('\r');
   bcfb2:	4604      	mov	r4, r0
  n += print('\n');
   bcfb4:	4628      	mov	r0, r5
   bcfb6:	f7ff fff3 	bl	bcfa0 <_ZN5Print5printEc>
  return n;
}
   bcfba:	4420      	add	r0, r4
   bcfbc:	bd38      	pop	{r3, r4, r5, pc}

000bcfbe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bcfbe:	b530      	push	{r4, r5, lr}
   bcfc0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bcfc2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bcfc4:	2a01      	cmp	r2, #1
  *str = '\0';
   bcfc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bcfca:	bf98      	it	ls
   bcfcc:	220a      	movls	r2, #10
   bcfce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bcfd0:	460d      	mov	r5, r1
   bcfd2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bcfd6:	fb01 5312 	mls	r3, r1, r2, r5
   bcfda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bcfde:	2b09      	cmp	r3, #9
   bcfe0:	bf94      	ite	ls
   bcfe2:	3330      	addls	r3, #48	; 0x30
   bcfe4:	3337      	addhi	r3, #55	; 0x37
   bcfe6:	b2db      	uxtb	r3, r3
  } while(n);
   bcfe8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bcfea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bcfee:	d9ef      	bls.n	bcfd0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bcff0:	4621      	mov	r1, r4
   bcff2:	f7ff ffbf 	bl	bcf74 <_ZN5Print5writeEPKc>
}
   bcff6:	b00b      	add	sp, #44	; 0x2c
   bcff8:	bd30      	pop	{r4, r5, pc}
	...

000bcffc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bcffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd000:	ec55 4b10 	vmov	r4, r5, d0
   bd004:	4606      	mov	r6, r0
   bd006:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bd008:	ee10 2a10 	vmov	r2, s0
   bd00c:	ee10 0a10 	vmov	r0, s0
   bd010:	462b      	mov	r3, r5
   bd012:	4629      	mov	r1, r5
   bd014:	f001 fcea 	bl	be9ec <__aeabi_dcmpun>
   bd018:	b140      	cbz	r0, bd02c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bd01a:	4953      	ldr	r1, [pc, #332]	; (bd168 <_ZN5Print10printFloatEdh+0x16c>)
   bd01c:	4630      	mov	r0, r6
   bd01e:	f7ff ffa9 	bl	bcf74 <_ZN5Print5writeEPKc>
   bd022:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bd024:	4650      	mov	r0, sl
   bd026:	b003      	add	sp, #12
   bd028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bd02c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bd030:	4b4e      	ldr	r3, [pc, #312]	; (bd16c <_ZN5Print10printFloatEdh+0x170>)
   bd032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd036:	4620      	mov	r0, r4
   bd038:	4649      	mov	r1, r9
   bd03a:	f001 fcd7 	bl	be9ec <__aeabi_dcmpun>
   bd03e:	b948      	cbnz	r0, bd054 <_ZN5Print10printFloatEdh+0x58>
   bd040:	4b4a      	ldr	r3, [pc, #296]	; (bd16c <_ZN5Print10printFloatEdh+0x170>)
   bd042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd046:	4620      	mov	r0, r4
   bd048:	4649      	mov	r1, r9
   bd04a:	f001 fcb1 	bl	be9b0 <__aeabi_dcmple>
   bd04e:	b908      	cbnz	r0, bd054 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bd050:	4947      	ldr	r1, [pc, #284]	; (bd170 <_ZN5Print10printFloatEdh+0x174>)
   bd052:	e7e3      	b.n	bd01c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bd054:	4b47      	ldr	r3, [pc, #284]	; (bd174 <_ZN5Print10printFloatEdh+0x178>)
   bd056:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd05a:	4620      	mov	r0, r4
   bd05c:	4629      	mov	r1, r5
   bd05e:	f001 fcbb 	bl	be9d8 <__aeabi_dcmpgt>
   bd062:	b108      	cbz	r0, bd068 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bd064:	4944      	ldr	r1, [pc, #272]	; (bd178 <_ZN5Print10printFloatEdh+0x17c>)
   bd066:	e7d9      	b.n	bd01c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bd068:	4b44      	ldr	r3, [pc, #272]	; (bd17c <_ZN5Print10printFloatEdh+0x180>)
   bd06a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd06e:	4620      	mov	r0, r4
   bd070:	4629      	mov	r1, r5
   bd072:	f001 fc93 	bl	be99c <__aeabi_dcmplt>
   bd076:	2800      	cmp	r0, #0
   bd078:	d1f4      	bne.n	bd064 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bd07a:	2200      	movs	r2, #0
   bd07c:	2300      	movs	r3, #0
   bd07e:	4620      	mov	r0, r4
   bd080:	4629      	mov	r1, r5
   bd082:	f001 fc8b 	bl	be99c <__aeabi_dcmplt>
   bd086:	b1d0      	cbz	r0, bd0be <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bd088:	212d      	movs	r1, #45	; 0x2d
   bd08a:	4630      	mov	r0, r6
   bd08c:	f7ff ff88 	bl	bcfa0 <_ZN5Print5printEc>
     number = -number;
   bd090:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bd094:	4682      	mov	sl, r0
     number = -number;
   bd096:	461d      	mov	r5, r3
  double rounding = 0.5;
   bd098:	4939      	ldr	r1, [pc, #228]	; (bd180 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bd09a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bd188 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bd09e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bd0a2:	2000      	movs	r0, #0
    rounding /= 10.0;
   bd0a4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bd0a8:	fa5f f38b 	uxtb.w	r3, fp
   bd0ac:	429f      	cmp	r7, r3
   bd0ae:	d908      	bls.n	bd0c2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bd0b0:	4642      	mov	r2, r8
   bd0b2:	464b      	mov	r3, r9
   bd0b4:	f001 fb2a 	bl	be70c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bd0b8:	f10b 0b01 	add.w	fp, fp, #1
   bd0bc:	e7f4      	b.n	bd0a8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bd0be:	4682      	mov	sl, r0
   bd0c0:	e7ea      	b.n	bd098 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bd0c2:	4622      	mov	r2, r4
   bd0c4:	462b      	mov	r3, r5
   bd0c6:	f001 f841 	bl	be14c <__adddf3>
   bd0ca:	460d      	mov	r5, r1
   bd0cc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bd0ce:	f001 fccb 	bl	bea68 <__aeabi_d2uiz>
   bd0d2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bd0d4:	f001 f976 	bl	be3c4 <__aeabi_ui2d>
   bd0d8:	4602      	mov	r2, r0
   bd0da:	460b      	mov	r3, r1
   bd0dc:	4620      	mov	r0, r4
   bd0de:	4629      	mov	r1, r5
   bd0e0:	f001 f832 	bl	be148 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bd0e4:	220a      	movs	r2, #10
   bd0e6:	4604      	mov	r4, r0
   bd0e8:	460d      	mov	r5, r1
   bd0ea:	4630      	mov	r0, r6
   bd0ec:	4641      	mov	r1, r8
   bd0ee:	f7ff ff66 	bl	bcfbe <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bd0f2:	4482      	add	sl, r0
  if (digits > 0) {
   bd0f4:	2f00      	cmp	r7, #0
   bd0f6:	d095      	beq.n	bd024 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bd0f8:	4922      	ldr	r1, [pc, #136]	; (bd184 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bd0fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; bd188 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bd0fe:	4630      	mov	r0, r6
   bd100:	f7ff ff38 	bl	bcf74 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bd104:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bd108:	4482      	add	sl, r0
  while (digits-- > 0)
   bd10a:	2f00      	cmp	r7, #0
   bd10c:	d08a      	beq.n	bd024 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bd10e:	4642      	mov	r2, r8
   bd110:	464b      	mov	r3, r9
   bd112:	4620      	mov	r0, r4
   bd114:	4629      	mov	r1, r5
   bd116:	f001 f9cf 	bl	be4b8 <__aeabi_dmul>
   bd11a:	4604      	mov	r4, r0
   bd11c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bd11e:	f001 fc7b 	bl	bea18 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bd122:	f1b0 0b00 	subs.w	fp, r0, #0
   bd126:	da1c      	bge.n	bd162 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bd128:	212d      	movs	r1, #45	; 0x2d
   bd12a:	4630      	mov	r0, r6
   bd12c:	f7ff ff38 	bl	bcfa0 <_ZN5Print5printEc>
            val = -n;
   bd130:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bd134:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bd136:	220a      	movs	r2, #10
   bd138:	4630      	mov	r0, r6
   bd13a:	9301      	str	r3, [sp, #4]
   bd13c:	f7ff ff3f 	bl	bcfbe <_ZN5Print11printNumberEmh>
   bd140:	9b01      	ldr	r3, [sp, #4]
   bd142:	4418      	add	r0, r3
    n += print(toPrint);
   bd144:	4482      	add	sl, r0
    remainder -= toPrint;
   bd146:	4658      	mov	r0, fp
   bd148:	f001 f94c 	bl	be3e4 <__aeabi_i2d>
   bd14c:	4602      	mov	r2, r0
   bd14e:	460b      	mov	r3, r1
   bd150:	4620      	mov	r0, r4
   bd152:	4629      	mov	r1, r5
   bd154:	f000 fff8 	bl	be148 <__aeabi_dsub>
   bd158:	3f01      	subs	r7, #1
   bd15a:	4604      	mov	r4, r0
   bd15c:	460d      	mov	r5, r1
   bd15e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bd160:	e7d3      	b.n	bd10a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bd162:	4659      	mov	r1, fp
        size_t t = 0;
   bd164:	2300      	movs	r3, #0
   bd166:	e7e6      	b.n	bd136 <_ZN5Print10printFloatEdh+0x13a>
   bd168:	000c06c4 	.word	0x000c06c4
   bd16c:	7fefffff 	.word	0x7fefffff
   bd170:	000c06c8 	.word	0x000c06c8
   bd174:	41efffff 	.word	0x41efffff
   bd178:	000c06cc 	.word	0x000c06cc
   bd17c:	c1efffff 	.word	0xc1efffff
   bd180:	3fe00000 	.word	0x3fe00000
   bd184:	000c0704 	.word	0x000c0704
   bd188:	40240000 	.word	0x40240000

000bd18c <_ZN5Print5printEfi>:
{
   bd18c:	b538      	push	{r3, r4, r5, lr}
   bd18e:	4604      	mov	r4, r0
   bd190:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bd194:	b2cd      	uxtb	r5, r1
   bd196:	f001 f937 	bl	be408 <__aeabi_f2d>
   bd19a:	ec41 0b10 	vmov	d0, r0, r1
   bd19e:	4629      	mov	r1, r5
   bd1a0:	4620      	mov	r0, r4
}
   bd1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bd1a6:	f7ff bf29 	b.w	bcffc <_ZN5Print10printFloatEdh>

000bd1aa <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bd1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd1ae:	b086      	sub	sp, #24
   bd1b0:	af00      	add	r7, sp, #0
   bd1b2:	4605      	mov	r5, r0
   bd1b4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bd1b6:	1d38      	adds	r0, r7, #4
   bd1b8:	2114      	movs	r1, #20
{
   bd1ba:	4614      	mov	r4, r2
    va_copy(args2, args);
   bd1bc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bd1be:	f7fd fdcd 	bl	bad5c <vsnprintf>

    if (n<bufsize)
   bd1c2:	2813      	cmp	r0, #19
   bd1c4:	d80e      	bhi.n	bd1e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bd1c6:	1d39      	adds	r1, r7, #4
   bd1c8:	4628      	mov	r0, r5
   bd1ca:	f7ff fed3 	bl	bcf74 <_ZN5Print5writeEPKc>
   bd1ce:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bd1d0:	b11e      	cbz	r6, bd1da <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bd1d2:	4628      	mov	r0, r5
   bd1d4:	f7ff fee7 	bl	bcfa6 <_ZN5Print7printlnEv>
   bd1d8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bd1da:	4620      	mov	r0, r4
   bd1dc:	3718      	adds	r7, #24
   bd1de:	46bd      	mov	sp, r7
   bd1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bd1e4:	f100 0308 	add.w	r3, r0, #8
   bd1e8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bd1ec:	46e8      	mov	r8, sp
        char bigger[n+1];
   bd1ee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bd1f2:	4622      	mov	r2, r4
   bd1f4:	1c41      	adds	r1, r0, #1
   bd1f6:	683b      	ldr	r3, [r7, #0]
   bd1f8:	4668      	mov	r0, sp
   bd1fa:	f7fd fdaf 	bl	bad5c <vsnprintf>
  return write(str);
   bd1fe:	4669      	mov	r1, sp
   bd200:	4628      	mov	r0, r5
   bd202:	f7ff feb7 	bl	bcf74 <_ZN5Print5writeEPKc>
   bd206:	4604      	mov	r4, r0
   bd208:	46c5      	mov	sp, r8
   bd20a:	e7e1      	b.n	bd1d0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bd20c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bd20c:	b510      	push	{r4, lr}
  if (0 == max) {
   bd20e:	4604      	mov	r4, r0
   bd210:	b128      	cbz	r0, bd21e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bd212:	f001 fcf9 	bl	bec08 <rand>
   bd216:	fb90 f3f4 	sdiv	r3, r0, r4
   bd21a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bd21e:	4620      	mov	r0, r4
   bd220:	bd10      	pop	{r4, pc}

000bd222 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bd222:	4288      	cmp	r0, r1
{
   bd224:	b510      	push	{r4, lr}
   bd226:	4604      	mov	r4, r0
  if (min >= max) {
   bd228:	da03      	bge.n	bd232 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bd22a:	1a08      	subs	r0, r1, r0
   bd22c:	f7ff ffee 	bl	bd20c <_Z6randomi>
   bd230:	4404      	add	r4, r0
}
   bd232:	4620      	mov	r0, r4
   bd234:	bd10      	pop	{r4, pc}

000bd236 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   bd236:	f001 bcb9 	b.w	bebac <srand>
	...

000bd23c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bd23c:	4b01      	ldr	r3, [pc, #4]	; (bd244 <_GLOBAL__sub_I_RGB+0x8>)
   bd23e:	2200      	movs	r2, #0
   bd240:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bd242:	4770      	bx	lr
   bd244:	2003e68c 	.word	0x2003e68c

000bd248 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bd248:	2100      	movs	r1, #0
   bd24a:	f7fd baf3 	b.w	ba834 <hal_spi_release>

000bd24e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bd24e:	2100      	movs	r1, #0
   bd250:	f7fd bae8 	b.w	ba824 <hal_spi_acquire>

000bd254 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bd254:	b510      	push	{r4, lr}
   bd256:	4604      	mov	r4, r0
   bd258:	4608      	mov	r0, r1
{
    _spi = spi;
   bd25a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bd25c:	f7fd fac2 	bl	ba7e4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bd260:	2300      	movs	r3, #0
   bd262:	6063      	str	r3, [r4, #4]
}
   bd264:	4620      	mov	r0, r4
   bd266:	bd10      	pop	{r4, pc}

000bd268 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bd268:	b513      	push	{r0, r1, r4, lr}
   bd26a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bd26c:	7800      	ldrb	r0, [r0, #0]
   bd26e:	f7ff ffee 	bl	bd24e <_ZN8SPIClass4lockEv.isra.0>
   bd272:	b958      	cbnz	r0, bd28c <_ZN8SPIClass5beginEv+0x24>
   bd274:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bd276:	9001      	str	r0, [sp, #4]
   bd278:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bd27c:	f7fd fa9a 	bl	ba7b4 <hal_spi_begin>
        unlock();
   bd280:	9801      	ldr	r0, [sp, #4]
    }
}
   bd282:	b002      	add	sp, #8
   bd284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd288:	f7ff bfde 	b.w	bd248 <_ZN8SPIClass6unlockEv.isra.0>
   bd28c:	b002      	add	sp, #8
   bd28e:	bd10      	pop	{r4, pc}

000bd290 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bd290:	b513      	push	{r0, r1, r4, lr}
   bd292:	4604      	mov	r4, r0
    if (!lock())
   bd294:	7800      	ldrb	r0, [r0, #0]
   bd296:	f7ff ffda 	bl	bd24e <_ZN8SPIClass4lockEv.isra.0>
   bd29a:	b948      	cbnz	r0, bd2b0 <_ZN8SPIClass3endEv+0x20>
   bd29c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bd29e:	9001      	str	r0, [sp, #4]
   bd2a0:	f7fd fa90 	bl	ba7c4 <hal_spi_end>
        unlock();
   bd2a4:	9801      	ldr	r0, [sp, #4]
    }
}
   bd2a6:	b002      	add	sp, #8
   bd2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd2ac:	f7ff bfcc 	b.w	bd248 <_ZN8SPIClass6unlockEv.isra.0>
   bd2b0:	b002      	add	sp, #8
   bd2b2:	bd10      	pop	{r4, pc}

000bd2b4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bd2b4:	7800      	ldrb	r0, [r0, #0]
   bd2b6:	f7ff bfc7 	b.w	bd248 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bd2bc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bd2bc:	0840      	lsrs	r0, r0, #1
{
   bd2be:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bd2c0:	6018      	str	r0, [r3, #0]
   bd2c2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bd2c4:	6818      	ldr	r0, [r3, #0]
   bd2c6:	4288      	cmp	r0, r1
   bd2c8:	b2e5      	uxtb	r5, r4
   bd2ca:	d906      	bls.n	bd2da <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bd2cc:	3401      	adds	r4, #1
   bd2ce:	2c08      	cmp	r4, #8
   bd2d0:	d002      	beq.n	bd2d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bd2d2:	0840      	lsrs	r0, r0, #1
   bd2d4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bd2d6:	e7f5      	b.n	bd2c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bd2d8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bd2da:	4b02      	ldr	r3, [pc, #8]	; (bd2e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bd2dc:	5d5b      	ldrb	r3, [r3, r5]
   bd2de:	7013      	strb	r3, [r2, #0]
}
   bd2e0:	bd30      	pop	{r4, r5, pc}
   bd2e2:	bf00      	nop
   bd2e4:	000c06d0 	.word	0x000c06d0

000bd2e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bd2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd2ec:	4606      	mov	r6, r0
   bd2ee:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bd2f0:	7800      	ldrb	r0, [r0, #0]
{
   bd2f2:	460c      	mov	r4, r1
    CHECK(lock());
   bd2f4:	f7ff ffab 	bl	bd24e <_ZN8SPIClass4lockEv.isra.0>
   bd2f8:	2800      	cmp	r0, #0
   bd2fa:	db1b      	blt.n	bd334 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bd2fc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bd2fe:	2214      	movs	r2, #20
   bd300:	2100      	movs	r1, #0
   bd302:	a809      	add	r0, sp, #36	; 0x24
   bd304:	f001 fc4a 	bl	beb9c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bd308:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bd30a:	2200      	movs	r2, #0
   bd30c:	a909      	add	r1, sp, #36	; 0x24
   bd30e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bd310:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bd314:	f7fd fa76 	bl	ba804 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bd318:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bd31c:	b113      	cbz	r3, bd324 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bd31e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bd322:	b155      	cbz	r5, bd33a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bd324:	2700      	movs	r7, #0
   bd326:	46b9      	mov	r9, r7
   bd328:	46b8      	mov	r8, r7
   bd32a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bd32c:	7923      	ldrb	r3, [r4, #4]
   bd32e:	b15d      	cbz	r5, bd348 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bd330:	b1c3      	cbz	r3, bd364 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bd332:	2000      	movs	r0, #0
}
   bd334:	b00f      	add	sp, #60	; 0x3c
   bd336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bd33a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bd33e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bd342:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bd346:	e7f1      	b.n	bd32c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bd348:	2b00      	cmp	r3, #0
   bd34a:	d135      	bne.n	bd3b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bd34c:	68a3      	ldr	r3, [r4, #8]
   bd34e:	4543      	cmp	r3, r8
   bd350:	d108      	bne.n	bd364 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bd352:	f88d 9020 	strb.w	r9, [sp, #32]
   bd356:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd35a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd35e:	89a3      	ldrh	r3, [r4, #12]
   bd360:	429a      	cmp	r2, r3
   bd362:	d0e6      	beq.n	bd332 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bd364:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd366:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bd368:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd36c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bd36e:	ab04      	add	r3, sp, #16
   bd370:	f10d 020f 	add.w	r2, sp, #15
   bd374:	f7ff ffa2 	bl	bd2bc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bd378:	7921      	ldrb	r1, [r4, #4]
   bd37a:	b985      	cbnz	r5, bd39e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bd37c:	b989      	cbnz	r1, bd3a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd37e:	68a3      	ldr	r3, [r4, #8]
   bd380:	4543      	cmp	r3, r8
   bd382:	d30e      	bcc.n	bd3a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bd384:	f88d 9020 	strb.w	r9, [sp, #32]
   bd388:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd38c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd390:	89a3      	ldrh	r3, [r4, #12]
   bd392:	429a      	cmp	r2, r3
   bd394:	d105      	bne.n	bd3a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bd396:	9b04      	ldr	r3, [sp, #16]
   bd398:	4543      	cmp	r3, r8
   bd39a:	d102      	bne.n	bd3a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd39c:	e7c9      	b.n	bd332 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bd39e:	2900      	cmp	r1, #0
   bd3a0:	d1f9      	bne.n	bd396 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bd3a2:	2300      	movs	r3, #0
   bd3a4:	9301      	str	r3, [sp, #4]
   bd3a6:	7b63      	ldrb	r3, [r4, #13]
   bd3a8:	9300      	str	r3, [sp, #0]
   bd3aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bd3ae:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bd3b0:	7830      	ldrb	r0, [r6, #0]
   bd3b2:	f7fd fa2f 	bl	ba814 <hal_spi_set_settings>
   bd3b6:	e7bc      	b.n	bd332 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bd3b8:	e9cd 5500 	strd	r5, r5, [sp]
   bd3bc:	462b      	mov	r3, r5
   bd3be:	462a      	mov	r2, r5
   bd3c0:	2101      	movs	r1, #1
   bd3c2:	e7f5      	b.n	bd3b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bd3c4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bd3c4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bd3c6:	7800      	ldrb	r0, [r0, #0]
   bd3c8:	f7fd fa04 	bl	ba7d4 <hal_spi_transfer>
}
   bd3cc:	b2c0      	uxtb	r0, r0
   bd3ce:	bd08      	pop	{r3, pc}

000bd3d0 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bd3d0:	4770      	bx	lr

000bd3d2 <_ZN8SPIClass15detachInterruptEv>:
   bd3d2:	4770      	bx	lr

000bd3d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bd3d4:	b510      	push	{r4, lr}
   bd3d6:	4604      	mov	r4, r0
{
	free(buffer);
   bd3d8:	6800      	ldr	r0, [r0, #0]
   bd3da:	f7fd fc97 	bl	bad0c <free>
}
   bd3de:	4620      	mov	r0, r4
   bd3e0:	bd10      	pop	{r4, pc}

000bd3e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bd3e2:	b510      	push	{r4, lr}
   bd3e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bd3e6:	6800      	ldr	r0, [r0, #0]
   bd3e8:	b108      	cbz	r0, bd3ee <_ZN6String10invalidateEv+0xc>
   bd3ea:	f7fd fc8f 	bl	bad0c <free>
	buffer = NULL;
   bd3ee:	2300      	movs	r3, #0
	capacity = len = 0;
   bd3f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bd3f4:	6023      	str	r3, [r4, #0]
}
   bd3f6:	bd10      	pop	{r4, pc}

000bd3f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bd3f8:	b538      	push	{r3, r4, r5, lr}
   bd3fa:	4604      	mov	r4, r0
   bd3fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bd3fe:	6800      	ldr	r0, [r0, #0]
   bd400:	3101      	adds	r1, #1
   bd402:	f7fd fc8b 	bl	bad1c <realloc>
	if (newbuffer) {
   bd406:	b110      	cbz	r0, bd40e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bd408:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bd40c:	2001      	movs	r0, #1
	}
	return 0;
}
   bd40e:	bd38      	pop	{r3, r4, r5, pc}

000bd410 <_ZN6String7reserveEj>:
{
   bd410:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bd412:	6803      	ldr	r3, [r0, #0]
{
   bd414:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bd416:	b123      	cbz	r3, bd422 <_ZN6String7reserveEj+0x12>
   bd418:	6843      	ldr	r3, [r0, #4]
   bd41a:	428b      	cmp	r3, r1
   bd41c:	d301      	bcc.n	bd422 <_ZN6String7reserveEj+0x12>
   bd41e:	2001      	movs	r0, #1
}
   bd420:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bd422:	4620      	mov	r0, r4
   bd424:	f7ff ffe8 	bl	bd3f8 <_ZN6String12changeBufferEj>
   bd428:	2800      	cmp	r0, #0
   bd42a:	d0f9      	beq.n	bd420 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bd42c:	68a3      	ldr	r3, [r4, #8]
   bd42e:	2b00      	cmp	r3, #0
   bd430:	d1f5      	bne.n	bd41e <_ZN6String7reserveEj+0xe>
   bd432:	6822      	ldr	r2, [r4, #0]
   bd434:	7013      	strb	r3, [r2, #0]
   bd436:	e7f2      	b.n	bd41e <_ZN6String7reserveEj+0xe>

000bd438 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bd438:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd43a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bd43c:	4611      	mov	r1, r2
   bd43e:	9201      	str	r2, [sp, #4]
{
   bd440:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bd442:	f7ff ffe5 	bl	bd410 <_ZN6String7reserveEj>
   bd446:	9a01      	ldr	r2, [sp, #4]
   bd448:	b928      	cbnz	r0, bd456 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bd44a:	4620      	mov	r0, r4
   bd44c:	f7ff ffc9 	bl	bd3e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bd450:	4620      	mov	r0, r4
   bd452:	b003      	add	sp, #12
   bd454:	bd30      	pop	{r4, r5, pc}
	len = length;
   bd456:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bd458:	4629      	mov	r1, r5
   bd45a:	6820      	ldr	r0, [r4, #0]
   bd45c:	f001 fb76 	bl	beb4c <memcpy>
	buffer[len] = 0;
   bd460:	6822      	ldr	r2, [r4, #0]
   bd462:	68a3      	ldr	r3, [r4, #8]
   bd464:	2100      	movs	r1, #0
   bd466:	54d1      	strb	r1, [r2, r3]
	return *this;
   bd468:	e7f2      	b.n	bd450 <_ZN6String4copyEPKcj+0x18>

000bd46a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bd46a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bd46c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bd46e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bd472:	4604      	mov	r4, r0
	len = 0;
   bd474:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd476:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bd478:	b141      	cbz	r1, bd48c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bd47a:	4608      	mov	r0, r1
   bd47c:	9101      	str	r1, [sp, #4]
   bd47e:	f001 fc48 	bl	bed12 <strlen>
   bd482:	9901      	ldr	r1, [sp, #4]
   bd484:	4602      	mov	r2, r0
   bd486:	4620      	mov	r0, r4
   bd488:	f7ff ffd6 	bl	bd438 <_ZN6String4copyEPKcj>
}
   bd48c:	4620      	mov	r0, r4
   bd48e:	b002      	add	sp, #8
   bd490:	bd10      	pop	{r4, pc}

000bd492 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bd492:	b538      	push	{r3, r4, r5, lr}
   bd494:	4605      	mov	r5, r0
	if (buffer) {
   bd496:	6800      	ldr	r0, [r0, #0]
{
   bd498:	460c      	mov	r4, r1
	if (buffer) {
   bd49a:	b168      	cbz	r0, bd4b8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bd49c:	686a      	ldr	r2, [r5, #4]
   bd49e:	688b      	ldr	r3, [r1, #8]
   bd4a0:	429a      	cmp	r2, r3
   bd4a2:	d307      	bcc.n	bd4b4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bd4a4:	6809      	ldr	r1, [r1, #0]
   bd4a6:	f001 fc0e 	bl	becc6 <strcpy>
			len = rhs.len;
   bd4aa:	68a3      	ldr	r3, [r4, #8]
   bd4ac:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bd4ae:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bd4b0:	60a3      	str	r3, [r4, #8]
}
   bd4b2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bd4b4:	f7fd fc2a 	bl	bad0c <free>
	buffer = rhs.buffer;
   bd4b8:	6823      	ldr	r3, [r4, #0]
   bd4ba:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bd4bc:	6863      	ldr	r3, [r4, #4]
   bd4be:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bd4c0:	68a3      	ldr	r3, [r4, #8]
   bd4c2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bd4c4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bd4c6:	e9c4 3300 	strd	r3, r3, [r4]
   bd4ca:	e7f1      	b.n	bd4b0 <_ZN6String4moveERS_+0x1e>

000bd4cc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bd4cc:	b510      	push	{r4, lr}
	buffer = NULL;
   bd4ce:	2300      	movs	r3, #0
	capacity = 0;
   bd4d0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bd4d4:	4604      	mov	r4, r0
	len = 0;
   bd4d6:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd4d8:	7303      	strb	r3, [r0, #12]
	move(rval);
   bd4da:	f7ff ffda 	bl	bd492 <_ZN6String4moveERS_>
}
   bd4de:	4620      	mov	r0, r4
   bd4e0:	bd10      	pop	{r4, pc}

000bd4e2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bd4e2:	4288      	cmp	r0, r1
{
   bd4e4:	b510      	push	{r4, lr}
   bd4e6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bd4e8:	d005      	beq.n	bd4f6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bd4ea:	680b      	ldr	r3, [r1, #0]
   bd4ec:	b12b      	cbz	r3, bd4fa <_ZN6StringaSERKS_+0x18>
   bd4ee:	688a      	ldr	r2, [r1, #8]
   bd4f0:	4619      	mov	r1, r3
   bd4f2:	f7ff ffa1 	bl	bd438 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd4f6:	4620      	mov	r0, r4
   bd4f8:	bd10      	pop	{r4, pc}
	else invalidate();
   bd4fa:	f7ff ff72 	bl	bd3e2 <_ZN6String10invalidateEv>
   bd4fe:	e7fa      	b.n	bd4f6 <_ZN6StringaSERKS_+0x14>

000bd500 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bd500:	b510      	push	{r4, lr}
	buffer = NULL;
   bd502:	2300      	movs	r3, #0
String::String(const String &value)
   bd504:	4604      	mov	r4, r0
	capacity = 0;
   bd506:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bd50a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd50c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bd50e:	f7ff ffe8 	bl	bd4e2 <_ZN6StringaSERKS_>
}
   bd512:	4620      	mov	r0, r4
   bd514:	bd10      	pop	{r4, pc}

000bd516 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bd516:	4288      	cmp	r0, r1
{
   bd518:	b510      	push	{r4, lr}
   bd51a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bd51c:	d001      	beq.n	bd522 <_ZN6StringaSEOS_+0xc>
   bd51e:	f7ff ffb8 	bl	bd492 <_ZN6String4moveERS_>
	return *this;
}
   bd522:	4620      	mov	r0, r4
   bd524:	bd10      	pop	{r4, pc}

000bd526 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bd526:	b513      	push	{r0, r1, r4, lr}
   bd528:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bd52a:	b159      	cbz	r1, bd544 <_ZN6StringaSEPKc+0x1e>
   bd52c:	4608      	mov	r0, r1
   bd52e:	9101      	str	r1, [sp, #4]
   bd530:	f001 fbef 	bl	bed12 <strlen>
   bd534:	9901      	ldr	r1, [sp, #4]
   bd536:	4602      	mov	r2, r0
   bd538:	4620      	mov	r0, r4
   bd53a:	f7ff ff7d 	bl	bd438 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd53e:	4620      	mov	r0, r4
   bd540:	b002      	add	sp, #8
   bd542:	bd10      	pop	{r4, pc}
	else invalidate();
   bd544:	f7ff ff4d 	bl	bd3e2 <_ZN6String10invalidateEv>
   bd548:	e7f9      	b.n	bd53e <_ZN6StringaSEPKc+0x18>

000bd54a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bd54a:	b570      	push	{r4, r5, r6, lr}
   bd54c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bd54e:	460e      	mov	r6, r1
   bd550:	b909      	cbnz	r1, bd556 <_ZN6String6concatEPKcj+0xc>
   bd552:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bd554:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bd556:	b16a      	cbz	r2, bd574 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bd558:	6884      	ldr	r4, [r0, #8]
   bd55a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bd55c:	4621      	mov	r1, r4
   bd55e:	f7ff ff57 	bl	bd410 <_ZN6String7reserveEj>
   bd562:	2800      	cmp	r0, #0
   bd564:	d0f5      	beq.n	bd552 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bd566:	6828      	ldr	r0, [r5, #0]
   bd568:	68ab      	ldr	r3, [r5, #8]
   bd56a:	4631      	mov	r1, r6
   bd56c:	4418      	add	r0, r3
   bd56e:	f001 fbaa 	bl	becc6 <strcpy>
	len = newlen;
   bd572:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bd574:	2001      	movs	r0, #1
   bd576:	e7ed      	b.n	bd554 <_ZN6String6concatEPKcj+0xa>

000bd578 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bd578:	b513      	push	{r0, r1, r4, lr}
   bd57a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bd57c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bd57e:	b151      	cbz	r1, bd596 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bd580:	9101      	str	r1, [sp, #4]
   bd582:	f001 fbc6 	bl	bed12 <strlen>
   bd586:	9901      	ldr	r1, [sp, #4]
   bd588:	4602      	mov	r2, r0
   bd58a:	4620      	mov	r0, r4
}
   bd58c:	b002      	add	sp, #8
   bd58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bd592:	f7ff bfda 	b.w	bd54a <_ZN6String6concatEPKcj>
}
   bd596:	b002      	add	sp, #8
   bd598:	bd10      	pop	{r4, pc}

000bd59a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bd59a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bd59c:	688a      	ldr	r2, [r1, #8]
   bd59e:	6809      	ldr	r1, [r1, #0]
{
   bd5a0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bd5a2:	f7ff ffd2 	bl	bd54a <_ZN6String6concatEPKcj>
   bd5a6:	b910      	cbnz	r0, bd5ae <_ZplRK15StringSumHelperRK6String+0x14>
   bd5a8:	4620      	mov	r0, r4
   bd5aa:	f7ff ff1a 	bl	bd3e2 <_ZN6String10invalidateEv>
	return a;
}
   bd5ae:	4620      	mov	r0, r4
   bd5b0:	bd10      	pop	{r4, pc}

000bd5b2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bd5b2:	b513      	push	{r0, r1, r4, lr}
   bd5b4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bd5b6:	b929      	cbnz	r1, bd5c4 <_ZplRK15StringSumHelperPKc+0x12>
   bd5b8:	4620      	mov	r0, r4
   bd5ba:	f7ff ff12 	bl	bd3e2 <_ZN6String10invalidateEv>
	return a;
}
   bd5be:	4620      	mov	r0, r4
   bd5c0:	b002      	add	sp, #8
   bd5c2:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bd5c4:	4608      	mov	r0, r1
   bd5c6:	9101      	str	r1, [sp, #4]
   bd5c8:	f001 fba3 	bl	bed12 <strlen>
   bd5cc:	9901      	ldr	r1, [sp, #4]
   bd5ce:	4602      	mov	r2, r0
   bd5d0:	4620      	mov	r0, r4
   bd5d2:	f7ff ffba 	bl	bd54a <_ZN6String6concatEPKcj>
   bd5d6:	2800      	cmp	r0, #0
   bd5d8:	d0ee      	beq.n	bd5b8 <_ZplRK15StringSumHelperPKc+0x6>
   bd5da:	e7f0      	b.n	bd5be <_ZplRK15StringSumHelperPKc+0xc>

000bd5dc <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bd5dc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bd5de:	6882      	ldr	r2, [r0, #8]
   bd5e0:	b93a      	cbnz	r2, bd5f2 <_ZNK6String6equalsEPKc+0x16>
   bd5e2:	b121      	cbz	r1, bd5ee <_ZNK6String6equalsEPKc+0x12>
   bd5e4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bd5e6:	fab0 f080 	clz	r0, r0
   bd5ea:	0940      	lsrs	r0, r0, #5
   bd5ec:	e000      	b.n	bd5f0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bd5ee:	2001      	movs	r0, #1
}
   bd5f0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bd5f2:	6800      	ldr	r0, [r0, #0]
   bd5f4:	b909      	cbnz	r1, bd5fa <_ZNK6String6equalsEPKc+0x1e>
   bd5f6:	7800      	ldrb	r0, [r0, #0]
   bd5f8:	e7f5      	b.n	bd5e6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bd5fa:	f001 fb5a 	bl	becb2 <strcmp>
   bd5fe:	e7f2      	b.n	bd5e6 <_ZNK6String6equalsEPKc+0xa>

000bd600 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bd600:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bd602:	6883      	ldr	r3, [r0, #8]
   bd604:	688a      	ldr	r2, [r1, #8]
   bd606:	4293      	cmp	r3, r2
   bd608:	d30b      	bcc.n	bd622 <_ZNK6String8endsWithERKS_+0x22>
   bd60a:	6800      	ldr	r0, [r0, #0]
   bd60c:	b140      	cbz	r0, bd620 <_ZNK6String8endsWithERKS_+0x20>
   bd60e:	6809      	ldr	r1, [r1, #0]
   bd610:	b149      	cbz	r1, bd626 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bd612:	1a9b      	subs	r3, r3, r2
   bd614:	4418      	add	r0, r3
   bd616:	f001 fb4c 	bl	becb2 <strcmp>
   bd61a:	fab0 f080 	clz	r0, r0
   bd61e:	0940      	lsrs	r0, r0, #5
}
   bd620:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bd622:	2000      	movs	r0, #0
   bd624:	e7fc      	b.n	bd620 <_ZNK6String8endsWithERKS_+0x20>
   bd626:	4608      	mov	r0, r1
   bd628:	e7fa      	b.n	bd620 <_ZNK6String8endsWithERKS_+0x20>
	...

000bd62c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bd62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bd62e:	429a      	cmp	r2, r3
{
   bd630:	460f      	mov	r7, r1
   bd632:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bd634:	490c      	ldr	r1, [pc, #48]	; (bd668 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bd636:	bf88      	it	hi
   bd638:	4613      	movhi	r3, r2
{
   bd63a:	4614      	mov	r4, r2
   bd63c:	4606      	mov	r6, r0
	if (left > right) {
   bd63e:	bf84      	itt	hi
   bd640:	462c      	movhi	r4, r5
   bd642:	461d      	movhi	r5, r3
	String out;
   bd644:	f7ff ff11 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bd648:	68bb      	ldr	r3, [r7, #8]
   bd64a:	42a3      	cmp	r3, r4
   bd64c:	d30a      	bcc.n	bd664 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bd64e:	6839      	ldr	r1, [r7, #0]
   bd650:	42ab      	cmp	r3, r5
   bd652:	bf94      	ite	ls
   bd654:	ebc4 0203 	rsbls	r2, r4, r3
   bd658:	ebc4 0205 	rsbhi	r2, r4, r5
   bd65c:	4421      	add	r1, r4
   bd65e:	4630      	mov	r0, r6
   bd660:	f7ff feea 	bl	bd438 <_ZN6String4copyEPKcj>
	return out;
}
   bd664:	4630      	mov	r0, r6
   bd666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd668:	000c05fd 	.word	0x000c05fd

000bd66c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bd66c:	b40e      	push	{r1, r2, r3}
   bd66e:	b570      	push	{r4, r5, r6, lr}
   bd670:	b087      	sub	sp, #28
   bd672:	ad0b      	add	r5, sp, #44	; 0x2c
   bd674:	4604      	mov	r4, r0
   bd676:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd67a:	9201      	str	r2, [sp, #4]
   bd67c:	462b      	mov	r3, r5
   bd67e:	2105      	movs	r1, #5
   bd680:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bd682:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd684:	f7fd fb6a 	bl	bad5c <vsnprintf>
    va_end(marker);

    String result;
   bd688:	490b      	ldr	r1, [pc, #44]	; (bd6b8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bd68a:	4606      	mov	r6, r0
    String result;
   bd68c:	4620      	mov	r0, r4
   bd68e:	f7ff feec 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bd692:	4631      	mov	r1, r6
   bd694:	4620      	mov	r0, r4
   bd696:	f7ff febb 	bl	bd410 <_ZN6String7reserveEj>
    if (result.buffer) {
   bd69a:	6820      	ldr	r0, [r4, #0]
   bd69c:	b130      	cbz	r0, bd6ac <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bd69e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bd6a0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bd6a2:	462b      	mov	r3, r5
   bd6a4:	1c71      	adds	r1, r6, #1
   bd6a6:	f7fd fb59 	bl	bad5c <vsnprintf>
        va_end(marker);
        result.len = n;
   bd6aa:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bd6ac:	4620      	mov	r0, r4
   bd6ae:	b007      	add	sp, #28
   bd6b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bd6b4:	b003      	add	sp, #12
   bd6b6:	4770      	bx	lr
   bd6b8:	000c05fd 	.word	0x000c05fd

000bd6bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bd6bc:	b510      	push	{r4, lr}
   bd6be:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bd6c0:	6800      	ldr	r0, [r0, #0]
   bd6c2:	b118      	cbz	r0, bd6cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bd6c4:	f7fd fb22 	bl	bad0c <free>
            wakeupSource_ = nullptr;
   bd6c8:	2300      	movs	r3, #0
   bd6ca:	6023      	str	r3, [r4, #0]
        }
    }
   bd6cc:	bd10      	pop	{r4, pc}

000bd6ce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bd6ce:	b538      	push	{r3, r4, r5, lr}
   bd6d0:	460c      	mov	r4, r1
   bd6d2:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bd6d4:	f7ff fff2 	bl	bd6bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bd6d8:	b154      	cbz	r4, bd6f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bd6da:	8820      	ldrh	r0, [r4, #0]
   bd6dc:	f7fd fb0e 	bl	bacfc <malloc>
   bd6e0:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bd6e2:	b128      	cbz	r0, bd6f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bd6e4:	8822      	ldrh	r2, [r4, #0]
   bd6e6:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bd6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bd6ec:	f001 ba2e 	b.w	beb4c <memcpy>
    }
   bd6f0:	bd38      	pop	{r3, r4, r5, pc}

000bd6f2 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bd6f2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bd6f4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bd6f8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bd6fa:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bd6fe:	f8c0 3006 	str.w	r3, [r0, #6]
   bd702:	894b      	ldrh	r3, [r1, #10]
   bd704:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bd706:	460c      	mov	r4, r1
   bd708:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bd70a:	f7ff ffd7 	bl	bd6bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bd70e:	6823      	ldr	r3, [r4, #0]
   bd710:	b113      	cbz	r3, bd718 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bd712:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bd714:	2300      	movs	r3, #0
   bd716:	6023      	str	r3, [r4, #0]
    }
   bd718:	bd38      	pop	{r3, r4, r5, pc}

000bd71a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bd71a:	b507      	push	{r0, r1, r2, lr}
   bd71c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bd71e:	2100      	movs	r1, #0
{
   bd720:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bd722:	9100      	str	r1, [sp, #0]
   bd724:	2001      	movs	r0, #1
   bd726:	218c      	movs	r1, #140	; 0x8c
   bd728:	f7fd fa26 	bl	bab78 <system_reset>
}
   bd72c:	b003      	add	sp, #12
   bd72e:	f85d fb04 	ldr.w	pc, [sp], #4

000bd732 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bd732:	4601      	mov	r1, r0
    reset(0, flags);
   bd734:	2000      	movs	r0, #0
   bd736:	f7ff bff0 	b.w	bd71a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bd73a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bd73a:	2000      	movs	r0, #0
   bd73c:	f7ff bff9 	b.w	bd732 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bd740 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bd740:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd742:	4d2b      	ldr	r5, [pc, #172]	; (bd7f0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bd744:	7d0b      	ldrb	r3, [r1, #20]
   bd746:	4604      	mov	r4, r0
   bd748:	b08b      	sub	sp, #44	; 0x2c
   bd74a:	4608      	mov	r0, r1
   bd74c:	1daf      	adds	r7, r5, #6
   bd74e:	2b00      	cmp	r3, #0
   bd750:	d036      	beq.n	bd7c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bd752:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bd754:	791b      	ldrb	r3, [r3, #4]
   bd756:	2b00      	cmp	r3, #0
   bd758:	d032      	beq.n	bd7c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bd75a:	4b26      	ldr	r3, [pc, #152]	; (bd7f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bd75c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bd75e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bd760:	a902      	add	r1, sp, #8
   bd762:	3004      	adds	r0, #4
   bd764:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bd768:	f7fd f9fc 	bl	bab64 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bd76c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bd770:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bd774:	b200      	sxth	r0, r0
   bd776:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bd77a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bd77e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bd780:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bd782:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bd784:	4628      	mov	r0, r5
   bd786:	f7ff ffa2 	bl	bd6ce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bd78a:	a802      	add	r0, sp, #8
   bd78c:	f7ff ff96 	bl	bd6bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bd790:	2300      	movs	r3, #0
   bd792:	6023      	str	r3, [r4, #0]
   bd794:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bd796:	71a3      	strb	r3, [r4, #6]
   bd798:	8123      	strh	r3, [r4, #8]
   bd79a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bd79e:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bd7a0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bd7a4:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bd7a6:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bd7aa:	f8c4 3006 	str.w	r3, [r4, #6]
   bd7ae:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bd7b0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bd7b2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bd7b4:	4620      	mov	r0, r4
   bd7b6:	f7ff ff8a 	bl	bd6ce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bd7ba:	4620      	mov	r0, r4
   bd7bc:	b00b      	add	sp, #44	; 0x2c
   bd7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bd7c0:	2600      	movs	r6, #0
   bd7c2:	2320      	movs	r3, #32
   bd7c4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bd7c8:	4b0b      	ldr	r3, [pc, #44]	; (bd7f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bd7ca:	9300      	str	r3, [sp, #0]
   bd7cc:	aa02      	add	r2, sp, #8
   bd7ce:	4633      	mov	r3, r6
   bd7d0:	490a      	ldr	r1, [pc, #40]	; (bd7fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bd7d2:	2032      	movs	r0, #50	; 0x32
   bd7d4:	f7fd f936 	bl	baa44 <log_message>
            : wakeupSource_(nullptr),
   bd7d8:	4b06      	ldr	r3, [pc, #24]	; (bd7f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bd7da:	4805      	ldr	r0, [pc, #20]	; (bd7f0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bd7dc:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bd7de:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bd7e2:	a902      	add	r1, sp, #8
   bd7e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bd7e8:	f7ff ff83 	bl	bd6f2 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bd7ec:	e7cd      	b.n	bd78a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bd7ee:	bf00      	nop
   bd7f0:	2003e69c 	.word	0x2003e69c
   bd7f4:	ffff0000 	.word	0xffff0000
   bd7f8:	000c06df 	.word	0x000c06df
   bd7fc:	000c06d8 	.word	0x000c06d8

000bd800 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bd800:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bd802:	2420      	movs	r4, #32
{
   bd804:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bd806:	4622      	mov	r2, r4
   bd808:	2100      	movs	r1, #0
   bd80a:	4668      	mov	r0, sp
   bd80c:	f001 f9c6 	bl	beb9c <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bd810:	2100      	movs	r1, #0
   bd812:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bd814:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bd818:	f7fc febc 	bl	ba594 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bd81c:	9801      	ldr	r0, [sp, #4]
   bd81e:	b008      	add	sp, #32
   bd820:	bd10      	pop	{r4, pc}
	...

000bd824 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bd824:	4b05      	ldr	r3, [pc, #20]	; (bd83c <_GLOBAL__sub_I_System+0x18>)
   bd826:	2202      	movs	r2, #2
   bd828:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bd82a:	4b05      	ldr	r3, [pc, #20]	; (bd840 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bd82c:	4a05      	ldr	r2, [pc, #20]	; (bd844 <_GLOBAL__sub_I_System+0x20>)
   bd82e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bd830:	2000      	movs	r0, #0
   bd832:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bd836:	f7fd b937 	b.w	baaa8 <set_system_mode>
   bd83a:	bf00      	nop
   bd83c:	2003e6a8 	.word	0x2003e6a8
   bd840:	2003e69c 	.word	0x2003e69c
   bd844:	ffff0000 	.word	0xffff0000

000bd848 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bd848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bd84c:	4a15      	ldr	r2, [pc, #84]	; (bd8a4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bd84e:	f8df 8060 	ldr.w	r8, [pc, #96]	; bd8b0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bd852:	e9d2 6300 	ldrd	r6, r3, [r2]
   bd856:	1980      	adds	r0, r0, r6
   bd858:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bd85c:	4b12      	ldr	r3, [pc, #72]	; (bd8a8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bd85e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bd862:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bd866:	1986      	adds	r6, r0, r6
   bd868:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bd86c:	42bb      	cmp	r3, r7
   bd86e:	bf08      	it	eq
   bd870:	42b2      	cmpeq	r2, r6
{
   bd872:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bd874:	d013      	beq.n	bd89e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bd876:	a903      	add	r1, sp, #12
   bd878:	4668      	mov	r0, sp
   bd87a:	e9cd 6700 	strd	r6, r7, [sp]
   bd87e:	f7fd faa5 	bl	badcc <localtime_r>
	calendar_time.tm_year += 1900;
   bd882:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd884:	4d09      	ldr	r5, [pc, #36]	; (bd8ac <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bd886:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd88a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bd88c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd88e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bd892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bd896:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd89a:	6823      	ldr	r3, [r4, #0]
   bd89c:	602b      	str	r3, [r5, #0]
    }
}
   bd89e:	b00c      	add	sp, #48	; 0x30
   bd8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd8a4:	2003e6e0 	.word	0x2003e6e0
   bd8a8:	2003e6d8 	.word	0x2003e6d8
   bd8ac:	2003e6b4 	.word	0x2003e6b4
   bd8b0:	2003e6e8 	.word	0x2003e6e8

000bd8b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bd8b4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd8b6:	2000      	movs	r0, #0
   bd8b8:	f7fd f998 	bl	babec <spark_sync_time_pending>
   bd8bc:	b128      	cbz	r0, bd8ca <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd8be:	f7fd f985 	bl	babcc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd8c2:	f080 0001 	eor.w	r0, r0, #1
   bd8c6:	b2c0      	uxtb	r0, r0
    }
   bd8c8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd8ca:	2001      	movs	r0, #1
   bd8cc:	e7fc      	b.n	bd8c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bd8d0 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bd8d0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bd8d2:	f7ff ffb9 	bl	bd848 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bd8d6:	4b01      	ldr	r3, [pc, #4]	; (bd8dc <_ZN9TimeClass4hourEx+0xc>)
   bd8d8:	6898      	ldr	r0, [r3, #8]
   bd8da:	bd08      	pop	{r3, pc}
   bd8dc:	2003e6b4 	.word	0x2003e6b4

000bd8e0 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bd8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd8e2:	4602      	mov	r2, r0
   bd8e4:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bd8e6:	4668      	mov	r0, sp
    struct timeval tv = {
   bd8e8:	2100      	movs	r1, #0
    };
   bd8ea:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bd8ee:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bd8f2:	f7fc fe97 	bl	ba624 <hal_rtc_set_time>
   bd8f6:	4602      	mov	r2, r0
   bd8f8:	b910      	cbnz	r0, bd900 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bd8fa:	4601      	mov	r1, r0
   bd8fc:	f7fd f90c 	bl	bab18 <system_notify_time_changed>
    }
}
   bd900:	b005      	add	sp, #20
   bd902:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd908 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bd908:	b530      	push	{r4, r5, lr}
   bd90a:	b093      	sub	sp, #76	; 0x4c
   bd90c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bd910:	4b19      	ldr	r3, [pc, #100]	; (bd978 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bd912:	4604      	mov	r4, r0
    t += time_zone_cache;
   bd914:	e9d3 1000 	ldrd	r1, r0, [r3]
   bd918:	9b01      	ldr	r3, [sp, #4]
   bd91a:	1852      	adds	r2, r2, r1
   bd91c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bd920:	4816      	ldr	r0, [pc, #88]	; (bd97c <_ZN9TimeClass7timeStrEx+0x74>)
   bd922:	e9d0 1000 	ldrd	r1, r0, [r0]
   bd926:	1852      	adds	r2, r2, r1
   bd928:	eb43 0300 	adc.w	r3, r3, r0
   bd92c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bd930:	2224      	movs	r2, #36	; 0x24
   bd932:	eb0d 0002 	add.w	r0, sp, r2
   bd936:	2100      	movs	r1, #0
   bd938:	f001 f930 	bl	beb9c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bd93c:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bd93e:	a909      	add	r1, sp, #36	; 0x24
   bd940:	4668      	mov	r0, sp
   bd942:	f7fd fa43 	bl	badcc <localtime_r>
    char ascstr[26] = {};
   bd946:	2216      	movs	r2, #22
   bd948:	4629      	mov	r1, r5
   bd94a:	a803      	add	r0, sp, #12
   bd94c:	9502      	str	r5, [sp, #8]
   bd94e:	f001 f925 	bl	beb9c <memset>
    asctime_r(&calendar_time, ascstr);
   bd952:	a902      	add	r1, sp, #8
   bd954:	a809      	add	r0, sp, #36	; 0x24
   bd956:	f001 f8a7 	bl	beaa8 <asctime_r>
    int len = strlen(ascstr);
   bd95a:	a802      	add	r0, sp, #8
   bd95c:	f001 f9d9 	bl	bed12 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bd960:	ab12      	add	r3, sp, #72	; 0x48
   bd962:	4418      	add	r0, r3
    return String(ascstr);
   bd964:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bd966:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bd96a:	4620      	mov	r0, r4
   bd96c:	f7ff fd7d 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bd970:	4620      	mov	r0, r4
   bd972:	b013      	add	sp, #76	; 0x4c
   bd974:	bd30      	pop	{r4, r5, pc}
   bd976:	bf00      	nop
   bd978:	2003e6e0 	.word	0x2003e6e0
   bd97c:	2003e6d8 	.word	0x2003e6d8

000bd980 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bd980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd984:	b0a4      	sub	sp, #144	; 0x90
   bd986:	4607      	mov	r7, r0
   bd988:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bd98a:	a814      	add	r0, sp, #80	; 0x50
{
   bd98c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bd98e:	223f      	movs	r2, #63	; 0x3f
{
   bd990:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bd992:	f001 f9da 	bl	bed4a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bd996:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bd998:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bd99a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bd99e:	f001 f9b8 	bl	bed12 <strlen>
   bd9a2:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bd9a4:	bb4c      	cbnz	r4, bd9fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bd9a6:	4929      	ldr	r1, [pc, #164]	; (bda4c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bd9a8:	a803      	add	r0, sp, #12
   bd9aa:	f001 f98c 	bl	becc6 <strcpy>
   bd9ae:	ac14      	add	r4, sp, #80	; 0x50
{
   bd9b0:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bd9b2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bd9b6:	45b1      	cmp	r9, r6
   bd9b8:	d934      	bls.n	bda24 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bd9ba:	7823      	ldrb	r3, [r4, #0]
   bd9bc:	2b25      	cmp	r3, #37	; 0x25
   bd9be:	f106 0a01 	add.w	sl, r6, #1
   bd9c2:	d117      	bne.n	bd9f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bd9c4:	7863      	ldrb	r3, [r4, #1]
   bd9c6:	2b7a      	cmp	r3, #122	; 0x7a
   bd9c8:	d114      	bne.n	bd9f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bd9ca:	a803      	add	r0, sp, #12
   bd9cc:	f001 f9a1 	bl	bed12 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bd9d0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bd9d2:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bd9d4:	1830      	adds	r0, r6, r0
   bd9d6:	4418      	add	r0, r3
   bd9d8:	eba9 0206 	sub.w	r2, r9, r6
   bd9dc:	1ca1      	adds	r1, r4, #2
   bd9de:	f001 f8b5 	bl	beb4c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bd9e2:	462a      	mov	r2, r5
   bd9e4:	a903      	add	r1, sp, #12
   bd9e6:	4620      	mov	r0, r4
   bd9e8:	f001 f8b0 	bl	beb4c <memcpy>
            len = strlen(format_str);
   bd9ec:	a814      	add	r0, sp, #80	; 0x50
   bd9ee:	f001 f990 	bl	bed12 <strlen>
   bd9f2:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bd9f4:	3401      	adds	r4, #1
   bd9f6:	4656      	mov	r6, sl
   bd9f8:	e7db      	b.n	bd9b2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bd9fa:	233c      	movs	r3, #60	; 0x3c
   bd9fc:	fb94 f2f3 	sdiv	r2, r4, r3
   bda00:	2a00      	cmp	r2, #0
   bda02:	bfb8      	it	lt
   bda04:	4252      	neglt	r2, r2
   bda06:	fbb2 f1f3 	udiv	r1, r2, r3
   bda0a:	fb03 2211 	mls	r2, r3, r1, r2
   bda0e:	9200      	str	r2, [sp, #0]
   bda10:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bda14:	4a0e      	ldr	r2, [pc, #56]	; (bda50 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bda16:	fb94 f3f3 	sdiv	r3, r4, r3
   bda1a:	2110      	movs	r1, #16
   bda1c:	a803      	add	r0, sp, #12
   bda1e:	f7fd f995 	bl	bad4c <snprintf>
   bda22:	e7c4      	b.n	bd9ae <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bda24:	2100      	movs	r1, #0
   bda26:	222e      	movs	r2, #46	; 0x2e
   bda28:	a808      	add	r0, sp, #32
   bda2a:	9107      	str	r1, [sp, #28]
   bda2c:	f001 f8b6 	bl	beb9c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bda30:	4643      	mov	r3, r8
   bda32:	aa14      	add	r2, sp, #80	; 0x50
   bda34:	2132      	movs	r1, #50	; 0x32
   bda36:	a807      	add	r0, sp, #28
   bda38:	f7fd f9c0 	bl	badbc <strftime>
    return String(buf);
   bda3c:	a907      	add	r1, sp, #28
   bda3e:	4638      	mov	r0, r7
   bda40:	f7ff fd13 	bl	bd46a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bda44:	4638      	mov	r0, r7
   bda46:	b024      	add	sp, #144	; 0x90
   bda48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bda4c:	000bfd7f 	.word	0x000bfd7f
   bda50:	000bfd81 	.word	0x000bfd81

000bda54 <_ZN9TimeClass6formatExPKc>:
{
   bda54:	b5f0      	push	{r4, r5, r6, r7, lr}
   bda56:	b08d      	sub	sp, #52	; 0x34
   bda58:	e9cd 2300 	strd	r2, r3, [sp]
   bda5c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bda5e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bda60:	b915      	cbnz	r5, bda68 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bda62:	4b19      	ldr	r3, [pc, #100]	; (bdac8 <_ZN9TimeClass6formatExPKc+0x74>)
   bda64:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bda66:	b12d      	cbz	r5, bda74 <_ZN9TimeClass6formatExPKc+0x20>
   bda68:	4b18      	ldr	r3, [pc, #96]	; (bdacc <_ZN9TimeClass6formatExPKc+0x78>)
   bda6a:	4628      	mov	r0, r5
   bda6c:	6819      	ldr	r1, [r3, #0]
   bda6e:	f001 f920 	bl	becb2 <strcmp>
   bda72:	b938      	cbnz	r0, bda84 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bda74:	e9dd 2300 	ldrd	r2, r3, [sp]
   bda78:	4620      	mov	r0, r4
   bda7a:	f7ff ff45 	bl	bd908 <_ZN9TimeClass7timeStrEx>
}
   bda7e:	4620      	mov	r0, r4
   bda80:	b00d      	add	sp, #52	; 0x34
   bda82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bda84:	4e12      	ldr	r6, [pc, #72]	; (bdad0 <_ZN9TimeClass6formatExPKc+0x7c>)
   bda86:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bda88:	4f12      	ldr	r7, [pc, #72]	; (bdad4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bda8a:	e9d6 3200 	ldrd	r3, r2, [r6]
   bda8e:	185b      	adds	r3, r3, r1
   bda90:	9901      	ldr	r1, [sp, #4]
   bda92:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bda96:	e9d7 0100 	ldrd	r0, r1, [r7]
   bda9a:	181b      	adds	r3, r3, r0
   bda9c:	eb42 0201 	adc.w	r2, r2, r1
   bdaa0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bdaa4:	2100      	movs	r1, #0
   bdaa6:	2224      	movs	r2, #36	; 0x24
   bdaa8:	a803      	add	r0, sp, #12
   bdaaa:	f001 f877 	bl	beb9c <memset>
    localtime_r(&t, &calendar_time);
   bdaae:	a903      	add	r1, sp, #12
   bdab0:	4668      	mov	r0, sp
   bdab2:	f7fd f98b 	bl	badcc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bdab6:	6832      	ldr	r2, [r6, #0]
   bdab8:	683b      	ldr	r3, [r7, #0]
   bdaba:	a903      	add	r1, sp, #12
   bdabc:	4413      	add	r3, r2
   bdabe:	4620      	mov	r0, r4
   bdac0:	462a      	mov	r2, r5
   bdac2:	f7ff ff5d 	bl	bd980 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bdac6:	e7da      	b.n	bda7e <_ZN9TimeClass6formatExPKc+0x2a>
   bdac8:	2003e6b0 	.word	0x2003e6b0
   bdacc:	2003ded4 	.word	0x2003ded4
   bdad0:	2003e6e0 	.word	0x2003e6e0
   bdad4:	2003e6d8 	.word	0x2003e6d8

000bdad8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bdad8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bdada:	2000      	movs	r0, #0
   bdadc:	f7fc fd8a 	bl	ba5f4 <hal_rtc_time_is_valid>
    if (rtcstate)
   bdae0:	4604      	mov	r4, r0
   bdae2:	b9a0      	cbnz	r0, bdb0e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bdae4:	f7fc ffd8 	bl	baa98 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bdae8:	2801      	cmp	r0, #1
   bdaea:	d110      	bne.n	bdb0e <_ZN9TimeClass7isValidEv+0x36>
   bdaec:	4620      	mov	r0, r4
   bdaee:	f7fd f80b 	bl	bab08 <system_thread_get_state>
   bdaf2:	b960      	cbnz	r0, bdb0e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bdaf4:	f7ff fede 	bl	bd8b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bdaf8:	b910      	cbnz	r0, bdb00 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bdafa:	f7fd f857 	bl	babac <spark_process>
        while (_while() && !_condition()) {
   bdafe:	e7f9      	b.n	bdaf4 <_ZN9TimeClass7isValidEv+0x1c>
   bdb00:	f7ff fed8 	bl	bd8b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bdb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bdb08:	2000      	movs	r0, #0
   bdb0a:	f7fc bd73 	b.w	ba5f4 <hal_rtc_time_is_valid>
}
   bdb0e:	4620      	mov	r0, r4
   bdb10:	bd10      	pop	{r4, pc}

000bdb12 <_ZN9TimeClass3nowEv>:
{
   bdb12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bdb14:	f7ff ffe0 	bl	bdad8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bdb18:	2210      	movs	r2, #16
   bdb1a:	2100      	movs	r1, #0
   bdb1c:	4668      	mov	r0, sp
   bdb1e:	f001 f83d 	bl	beb9c <memset>
    hal_rtc_get_time(&tv, nullptr);
   bdb22:	2100      	movs	r1, #0
   bdb24:	4668      	mov	r0, sp
   bdb26:	f7fc fd75 	bl	ba614 <hal_rtc_get_time>
}
   bdb2a:	9800      	ldr	r0, [sp, #0]
   bdb2c:	b005      	add	sp, #20
   bdb2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bdb34 <_ZN9TimeClass4hourEv>:
{
   bdb34:	b508      	push	{r3, lr}
	return hour(now());
   bdb36:	f7ff ffec 	bl	bdb12 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bdb3a:	17c1      	asrs	r1, r0, #31
   bdb3c:	f7ff fe84 	bl	bd848 <_ZL22Refresh_UnixTime_Cachex>
}
   bdb40:	4b01      	ldr	r3, [pc, #4]	; (bdb48 <_ZN9TimeClass4hourEv+0x14>)
   bdb42:	6898      	ldr	r0, [r3, #8]
   bdb44:	bd08      	pop	{r3, pc}
   bdb46:	bf00      	nop
   bdb48:	2003e6b4 	.word	0x2003e6b4

000bdb4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bdb4c:	4b02      	ldr	r3, [pc, #8]	; (bdb58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bdb4e:	681a      	ldr	r2, [r3, #0]
   bdb50:	4b02      	ldr	r3, [pc, #8]	; (bdb5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bdb52:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bdb54:	4770      	bx	lr
   bdb56:	bf00      	nop
   bdb58:	2003ded4 	.word	0x2003ded4
   bdb5c:	2003e6b0 	.word	0x2003e6b0

000bdb60 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bdb60:	4770      	bx	lr

000bdb62 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bdb62:	7441      	strb	r1, [r0, #17]
}
   bdb64:	4770      	bx	lr

000bdb66 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bdb66:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bdb68:	7c00      	ldrb	r0, [r0, #16]
   bdb6a:	f7fc ff03 	bl	ba974 <hal_usart_available_data_for_write>
}
   bdb6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdb72:	bd08      	pop	{r3, pc}

000bdb74 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bdb74:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bdb76:	7c00      	ldrb	r0, [r0, #16]
   bdb78:	f7fc fed4 	bl	ba924 <hal_usart_available>
}
   bdb7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdb80:	bd08      	pop	{r3, pc}

000bdb82 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bdb82:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bdb84:	7c00      	ldrb	r0, [r0, #16]
   bdb86:	f7fc fedd 	bl	ba944 <hal_usart_peek>
}
   bdb8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdb8e:	bd08      	pop	{r3, pc}

000bdb90 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bdb90:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bdb92:	7c00      	ldrb	r0, [r0, #16]
   bdb94:	f7fc fece 	bl	ba934 <hal_usart_read>
}
   bdb98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdb9c:	bd08      	pop	{r3, pc}

000bdb9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bdb9e:	7c00      	ldrb	r0, [r0, #16]
   bdba0:	f7fc bed8 	b.w	ba954 <hal_usart_flush>

000bdba4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bdba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdba6:	7c45      	ldrb	r5, [r0, #17]
{
   bdba8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdbaa:	b12d      	cbz	r5, bdbb8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bdbac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bdbae:	b003      	add	sp, #12
   bdbb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bdbb4:	f7fc beae 	b.w	ba914 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdbb8:	7c00      	ldrb	r0, [r0, #16]
   bdbba:	9101      	str	r1, [sp, #4]
   bdbbc:	f7fc feda 	bl	ba974 <hal_usart_available_data_for_write>
   bdbc0:	2800      	cmp	r0, #0
   bdbc2:	9901      	ldr	r1, [sp, #4]
   bdbc4:	dcf2      	bgt.n	bdbac <_ZN11USARTSerial5writeEh+0x8>
}
   bdbc6:	4628      	mov	r0, r5
   bdbc8:	b003      	add	sp, #12
   bdbca:	bd30      	pop	{r4, r5, pc}

000bdbcc <_ZN11USARTSerialD0Ev>:
   bdbcc:	b510      	push	{r4, lr}
   bdbce:	2114      	movs	r1, #20
   bdbd0:	4604      	mov	r4, r0
   bdbd2:	f7f6 fa64 	bl	b409e <_ZdlPvj>
   bdbd6:	4620      	mov	r0, r4
   bdbd8:	bd10      	pop	{r4, pc}
	...

000bdbdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bdbdc:	b510      	push	{r4, lr}
   bdbde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdbe2:	4604      	mov	r4, r0
   bdbe4:	4608      	mov	r0, r1
   bdbe6:	4611      	mov	r1, r2
   bdbe8:	2200      	movs	r2, #0
   bdbea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bdbee:	4b04      	ldr	r3, [pc, #16]	; (bdc00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bdbf0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bdbf2:	2301      	movs	r3, #1
  _serial = serial;
   bdbf4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bdbf6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bdbf8:	f7fc fecc 	bl	ba994 <hal_usart_init_ex>
}
   bdbfc:	4620      	mov	r0, r4
   bdbfe:	bd10      	pop	{r4, pc}
   bdc00:	000c072c 	.word	0x000c072c

000bdc04 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bdc04:	7c00      	ldrb	r0, [r0, #16]
   bdc06:	2300      	movs	r3, #0
   bdc08:	f7fc bebc 	b.w	ba984 <hal_usart_begin_config>

000bdc0c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bdc0c:	2200      	movs	r2, #0
   bdc0e:	f7ff bff9 	b.w	bdc04 <_ZN11USARTSerial5beginEmm>

000bdc12 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bdc12:	7c00      	ldrb	r0, [r0, #16]
   bdc14:	f7fc be76 	b.w	ba904 <hal_usart_end>

000bdc18 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bdc18:	7441      	strb	r1, [r0, #17]
}
   bdc1a:	4770      	bx	lr

000bdc1c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdc1c:	4770      	bx	lr

000bdc1e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bdc1e:	4770      	bx	lr

000bdc20 <_ZN9USBSerial4readEv>:
{
   bdc20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bdc22:	2100      	movs	r1, #0
   bdc24:	7c00      	ldrb	r0, [r0, #16]
   bdc26:	f7fc fee5 	bl	ba9f4 <HAL_USB_USART_Receive_Data>
}
   bdc2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdc2e:	bd08      	pop	{r3, pc}

000bdc30 <_ZN9USBSerial4peekEv>:
{
   bdc30:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bdc32:	2101      	movs	r1, #1
   bdc34:	7c00      	ldrb	r0, [r0, #16]
   bdc36:	f7fc fedd 	bl	ba9f4 <HAL_USB_USART_Receive_Data>
}
   bdc3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdc3e:	bd08      	pop	{r3, pc}

000bdc40 <_ZN9USBSerial17availableForWriteEv>:
{
   bdc40:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bdc42:	7c00      	ldrb	r0, [r0, #16]
   bdc44:	f7fc fece 	bl	ba9e4 <HAL_USB_USART_Available_Data_For_Write>
}
   bdc48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdc4c:	bd08      	pop	{r3, pc}

000bdc4e <_ZN9USBSerial9availableEv>:
{
   bdc4e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bdc50:	7c00      	ldrb	r0, [r0, #16]
   bdc52:	f7fc febf 	bl	ba9d4 <HAL_USB_USART_Available_Data>
}
   bdc56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdc5a:	bd08      	pop	{r3, pc}

000bdc5c <_ZN9USBSerial5writeEh>:
{
   bdc5c:	b513      	push	{r0, r1, r4, lr}
   bdc5e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bdc60:	7c00      	ldrb	r0, [r0, #16]
{
   bdc62:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bdc64:	f7fc febe 	bl	ba9e4 <HAL_USB_USART_Available_Data_For_Write>
   bdc68:	2800      	cmp	r0, #0
   bdc6a:	9901      	ldr	r1, [sp, #4]
   bdc6c:	dc01      	bgt.n	bdc72 <_ZN9USBSerial5writeEh+0x16>
   bdc6e:	7c60      	ldrb	r0, [r4, #17]
   bdc70:	b120      	cbz	r0, bdc7c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bdc72:	7c20      	ldrb	r0, [r4, #16]
   bdc74:	f7fc fec6 	bl	baa04 <HAL_USB_USART_Send_Data>
   bdc78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bdc7c:	b002      	add	sp, #8
   bdc7e:	bd10      	pop	{r4, pc}

000bdc80 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bdc80:	7c00      	ldrb	r0, [r0, #16]
   bdc82:	f7fc bec7 	b.w	baa14 <HAL_USB_USART_Flush_Data>

000bdc86 <_ZN9USBSerialD0Ev>:
   bdc86:	b510      	push	{r4, lr}
   bdc88:	2114      	movs	r1, #20
   bdc8a:	4604      	mov	r4, r0
   bdc8c:	f7f6 fa07 	bl	b409e <_ZdlPvj>
   bdc90:	4620      	mov	r0, r4
   bdc92:	bd10      	pop	{r4, pc}

000bdc94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bdc94:	b510      	push	{r4, lr}
   bdc96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdc9a:	4604      	mov	r4, r0
   bdc9c:	4608      	mov	r0, r1
   bdc9e:	2100      	movs	r1, #0
   bdca0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bdca4:	4b04      	ldr	r3, [pc, #16]	; (bdcb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bdca6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bdca8:	2301      	movs	r3, #1
  _serial = serial;
   bdcaa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bdcac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bdcae:	4611      	mov	r1, r2
   bdcb0:	f7fc fe78 	bl	ba9a4 <HAL_USB_USART_Init>
}
   bdcb4:	4620      	mov	r0, r4
   bdcb6:	bd10      	pop	{r4, pc}
   bdcb8:	000c075c 	.word	0x000c075c

000bdcbc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bdcbc:	7c00      	ldrb	r0, [r0, #16]
   bdcbe:	2200      	movs	r2, #0
   bdcc0:	f7fc be78 	b.w	ba9b4 <HAL_USB_USART_Begin>

000bdcc4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bdcc4:	7c00      	ldrb	r0, [r0, #16]
   bdcc6:	f7fc be7d 	b.w	ba9c4 <HAL_USB_USART_End>

000bdcca <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bdcca:	7c00      	ldrb	r0, [r0, #16]
   bdccc:	f7fc beaa 	b.w	baa24 <HAL_USB_USART_Is_Connected>

000bdcd0 <_Z19acquireSerialBufferv>:
{
   bdcd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bdcd2:	2214      	movs	r2, #20
{
   bdcd4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bdcd6:	2100      	movs	r1, #0
   bdcd8:	f000 ff60 	bl	beb9c <memset>
}
   bdcdc:	4620      	mov	r0, r4
   bdcde:	bd10      	pop	{r4, pc}

000bdce0 <_Z16_fetch_usbserialv>:
{
   bdce0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdce2:	4c0f      	ldr	r4, [pc, #60]	; (bdd20 <_Z16_fetch_usbserialv+0x40>)
{
   bdce4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bdce6:	a803      	add	r0, sp, #12
   bdce8:	f7ff fff2 	bl	bdcd0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdcec:	7821      	ldrb	r1, [r4, #0]
   bdcee:	f3bf 8f5b 	dmb	ish
   bdcf2:	f011 0101 	ands.w	r1, r1, #1
   bdcf6:	d10f      	bne.n	bdd18 <_Z16_fetch_usbserialv+0x38>
   bdcf8:	4620      	mov	r0, r4
   bdcfa:	9101      	str	r1, [sp, #4]
   bdcfc:	f7f6 f9de 	bl	b40bc <__cxa_guard_acquire>
   bdd00:	9901      	ldr	r1, [sp, #4]
   bdd02:	b148      	cbz	r0, bdd18 <_Z16_fetch_usbserialv+0x38>
   bdd04:	aa03      	add	r2, sp, #12
   bdd06:	4807      	ldr	r0, [pc, #28]	; (bdd24 <_Z16_fetch_usbserialv+0x44>)
   bdd08:	f7ff ffc4 	bl	bdc94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bdd0c:	4620      	mov	r0, r4
   bdd0e:	f7f6 f9da 	bl	b40c6 <__cxa_guard_release>
   bdd12:	4805      	ldr	r0, [pc, #20]	; (bdd28 <_Z16_fetch_usbserialv+0x48>)
   bdd14:	f000 feee 	bl	beaf4 <atexit>
	return _usbserial;
}
   bdd18:	4802      	ldr	r0, [pc, #8]	; (bdd24 <_Z16_fetch_usbserialv+0x44>)
   bdd1a:	b008      	add	sp, #32
   bdd1c:	bd10      	pop	{r4, pc}
   bdd1e:	bf00      	nop
   bdd20:	2003e6f0 	.word	0x2003e6f0
   bdd24:	2003e6f4 	.word	0x2003e6f4
   bdd28:	000bdc1d 	.word	0x000bdc1d

000bdd2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bdd2c:	4b01      	ldr	r3, [pc, #4]	; (bdd34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bdd2e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bdd30:	4770      	bx	lr
   bdd32:	bf00      	nop
   bdd34:	2003dedc 	.word	0x2003dedc

000bdd38 <serialEventRun>:
{
   bdd38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bdd3a:	4b0b      	ldr	r3, [pc, #44]	; (bdd68 <serialEventRun+0x30>)
   bdd3c:	b143      	cbz	r3, bdd50 <serialEventRun+0x18>
   bdd3e:	f7ff ffcf 	bl	bdce0 <_Z16_fetch_usbserialv>
   bdd42:	6803      	ldr	r3, [r0, #0]
   bdd44:	691b      	ldr	r3, [r3, #16]
   bdd46:	4798      	blx	r3
   bdd48:	2800      	cmp	r0, #0
   bdd4a:	dd01      	ble.n	bdd50 <serialEventRun+0x18>
        serialEvent();
   bdd4c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bdd50:	4b06      	ldr	r3, [pc, #24]	; (bdd6c <serialEventRun+0x34>)
   bdd52:	b143      	cbz	r3, bdd66 <serialEventRun+0x2e>
   bdd54:	f000 f9c2 	bl	be0dc <_Z22__fetch_global_Serial1v>
   bdd58:	6803      	ldr	r3, [r0, #0]
   bdd5a:	691b      	ldr	r3, [r3, #16]
   bdd5c:	4798      	blx	r3
   bdd5e:	2800      	cmp	r0, #0
   bdd60:	dd01      	ble.n	bdd66 <serialEventRun+0x2e>
        serialEvent1();
   bdd62:	f3af 8000 	nop.w
}
   bdd66:	bd08      	pop	{r3, pc}
	...

000bdd70 <_post_loop>:
{
   bdd70:	b508      	push	{r3, lr}
	serialEventRun();
   bdd72:	f7ff ffe1 	bl	bdd38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bdd76:	f7fc fc35 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bdd7a:	4b01      	ldr	r3, [pc, #4]	; (bdd80 <_post_loop+0x10>)
   bdd7c:	6018      	str	r0, [r3, #0]
}
   bdd7e:	bd08      	pop	{r3, pc}
   bdd80:	2003e710 	.word	0x2003e710

000bdd84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bdd84:	4805      	ldr	r0, [pc, #20]	; (bdd9c <_Z33system_initialize_user_backup_ramv+0x18>)
   bdd86:	4a06      	ldr	r2, [pc, #24]	; (bdda0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bdd88:	4906      	ldr	r1, [pc, #24]	; (bdda4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bdd8a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bdd8c:	1a12      	subs	r2, r2, r0
   bdd8e:	f000 fedd 	bl	beb4c <memcpy>
    __backup_sram_signature = signature;
   bdd92:	4b05      	ldr	r3, [pc, #20]	; (bdda8 <_Z33system_initialize_user_backup_ramv+0x24>)
   bdd94:	4a05      	ldr	r2, [pc, #20]	; (bddac <_Z33system_initialize_user_backup_ramv+0x28>)
   bdd96:	601a      	str	r2, [r3, #0]
}
   bdd98:	bd08      	pop	{r3, pc}
   bdd9a:	bf00      	nop
   bdd9c:	2003f400 	.word	0x2003f400
   bdda0:	2003f404 	.word	0x2003f404
   bdda4:	000c0a14 	.word	0x000c0a14
   bdda8:	2003f400 	.word	0x2003f400
   bddac:	9a271c1e 	.word	0x9a271c1e

000bddb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bddb0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bddb2:	2300      	movs	r3, #0
   bddb4:	9300      	str	r3, [sp, #0]
   bddb6:	461a      	mov	r2, r3
   bddb8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bddbc:	f7fc febe 	bl	bab3c <system_ctrl_set_result>
}
   bddc0:	b003      	add	sp, #12
   bddc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bddc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bddc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bddca:	8843      	ldrh	r3, [r0, #2]
   bddcc:	2b0a      	cmp	r3, #10
   bddce:	d008      	beq.n	bdde2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bddd0:	2b50      	cmp	r3, #80	; 0x50
   bddd2:	d10b      	bne.n	bddec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bddd4:	4b09      	ldr	r3, [pc, #36]	; (bddfc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bddd6:	681b      	ldr	r3, [r3, #0]
   bddd8:	b14b      	cbz	r3, bddee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bddda:	b003      	add	sp, #12
   bdddc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bdde0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bdde2:	f7ff ffe5 	bl	bddb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bdde6:	b003      	add	sp, #12
   bdde8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bddec:	2300      	movs	r3, #0
   bddee:	9300      	str	r3, [sp, #0]
   bddf0:	461a      	mov	r2, r3
   bddf2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bddf6:	f7fc fea1 	bl	bab3c <system_ctrl_set_result>
}
   bddfa:	e7f4      	b.n	bdde6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bddfc:	2003e70c 	.word	0x2003e70c

000bde00 <module_user_init_hook>:
{
   bde00:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bde02:	4812      	ldr	r0, [pc, #72]	; (bde4c <module_user_init_hook+0x4c>)
   bde04:	2100      	movs	r1, #0
   bde06:	f7fc ffd1 	bl	badac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bde0a:	4b11      	ldr	r3, [pc, #68]	; (bde50 <module_user_init_hook+0x50>)
   bde0c:	681a      	ldr	r2, [r3, #0]
   bde0e:	4b11      	ldr	r3, [pc, #68]	; (bde54 <module_user_init_hook+0x54>)
   bde10:	429a      	cmp	r2, r3
   bde12:	4b11      	ldr	r3, [pc, #68]	; (bde58 <module_user_init_hook+0x58>)
   bde14:	bf0c      	ite	eq
   bde16:	2201      	moveq	r2, #1
   bde18:	2200      	movne	r2, #0
   bde1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bde1c:	d001      	beq.n	bde22 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bde1e:	f7ff ffb1 	bl	bdd84 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bde22:	f7fc fbc7 	bl	ba5b4 <HAL_RNG_GetRandomNumber>
   bde26:	4604      	mov	r4, r0
    srand(seed);
   bde28:	f000 fec0 	bl	bebac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bde2c:	4b0b      	ldr	r3, [pc, #44]	; (bde5c <module_user_init_hook+0x5c>)
   bde2e:	b113      	cbz	r3, bde36 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bde30:	4620      	mov	r0, r4
   bde32:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bde36:	2100      	movs	r1, #0
   bde38:	4808      	ldr	r0, [pc, #32]	; (bde5c <module_user_init_hook+0x5c>)
   bde3a:	f7fc feef 	bl	bac1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bde3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bde42:	4807      	ldr	r0, [pc, #28]	; (bde60 <module_user_init_hook+0x60>)
   bde44:	2100      	movs	r1, #0
   bde46:	f7fc be6f 	b.w	bab28 <system_ctrl_set_app_request_handler>
   bde4a:	bf00      	nop
   bde4c:	000bdd2d 	.word	0x000bdd2d
   bde50:	2003f400 	.word	0x2003f400
   bde54:	9a271c1e 	.word	0x9a271c1e
   bde58:	2003e708 	.word	0x2003e708
   bde5c:	00000000 	.word	0x00000000
   bde60:	000bddc9 	.word	0x000bddc9

000bde64 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bde64:	b508      	push	{r3, lr}
   bde66:	4b02      	ldr	r3, [pc, #8]	; (bde70 <spark_protocol_instance+0xc>)
   bde68:	681b      	ldr	r3, [r3, #0]
   bde6a:	681b      	ldr	r3, [r3, #0]
   bde6c:	9301      	str	r3, [sp, #4]
   bde6e:	bd08      	pop	{r3, pc}
   bde70:	0003025c 	.word	0x0003025c

000bde74 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bde74:	b508      	push	{r3, lr}
   bde76:	4b02      	ldr	r3, [pc, #8]	; (bde80 <spark_protocol_set_product_id+0xc>)
   bde78:	681b      	ldr	r3, [r3, #0]
   bde7a:	685b      	ldr	r3, [r3, #4]
   bde7c:	9301      	str	r3, [sp, #4]
   bde7e:	bd08      	pop	{r3, pc}
   bde80:	0003025c 	.word	0x0003025c

000bde84 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bde84:	b508      	push	{r3, lr}
   bde86:	4b02      	ldr	r3, [pc, #8]	; (bde90 <spark_protocol_set_product_firmware_version+0xc>)
   bde88:	681b      	ldr	r3, [r3, #0]
   bde8a:	689b      	ldr	r3, [r3, #8]
   bde8c:	9301      	str	r3, [sp, #4]
   bde8e:	bd08      	pop	{r3, pc}
   bde90:	0003025c 	.word	0x0003025c

000bde94 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bde94:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bde96:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bde98:	d902      	bls.n	bdea0 <pinAvailable+0xc>
    return false;
   bde9a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bde9c:	b002      	add	sp, #8
   bde9e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bdea0:	f1a0 030b 	sub.w	r3, r0, #11
   bdea4:	2b02      	cmp	r3, #2
   bdea6:	d81a      	bhi.n	bdede <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bdea8:	4c17      	ldr	r4, [pc, #92]	; (bdf08 <pinAvailable+0x74>)
   bdeaa:	7821      	ldrb	r1, [r4, #0]
   bdeac:	f3bf 8f5b 	dmb	ish
   bdeb0:	f011 0101 	ands.w	r1, r1, #1
   bdeb4:	d10b      	bne.n	bdece <pinAvailable+0x3a>
   bdeb6:	4620      	mov	r0, r4
   bdeb8:	9101      	str	r1, [sp, #4]
   bdeba:	f7f6 f8ff 	bl	b40bc <__cxa_guard_acquire>
   bdebe:	9901      	ldr	r1, [sp, #4]
   bdec0:	b128      	cbz	r0, bdece <pinAvailable+0x3a>
   bdec2:	4812      	ldr	r0, [pc, #72]	; (bdf0c <pinAvailable+0x78>)
   bdec4:	f7ff f9c6 	bl	bd254 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bdec8:	4620      	mov	r0, r4
   bdeca:	f7f6 f8fc 	bl	b40c6 <__cxa_guard_release>
   bdece:	4b0f      	ldr	r3, [pc, #60]	; (bdf0c <pinAvailable+0x78>)
   bded0:	7818      	ldrb	r0, [r3, #0]
   bded2:	f7fc fc8f 	bl	ba7f4 <hal_spi_is_enabled>
   bded6:	2800      	cmp	r0, #0
   bded8:	d1df      	bne.n	bde9a <pinAvailable+0x6>
  return true; // 'pin' is available
   bdeda:	2001      	movs	r0, #1
   bdedc:	e7de      	b.n	bde9c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bdede:	2801      	cmp	r0, #1
   bdee0:	d809      	bhi.n	bdef6 <pinAvailable+0x62>
   bdee2:	f000 f897 	bl	be014 <_Z19__fetch_global_Wirev>
   bdee6:	2100      	movs	r1, #0
   bdee8:	7c00      	ldrb	r0, [r0, #16]
   bdeea:	f7fc fc23 	bl	ba734 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bdeee:	f080 0001 	eor.w	r0, r0, #1
   bdef2:	b2c0      	uxtb	r0, r0
   bdef4:	e7d2      	b.n	bde9c <pinAvailable+0x8>
   bdef6:	3809      	subs	r0, #9
   bdef8:	2801      	cmp	r0, #1
   bdefa:	d8ee      	bhi.n	bdeda <pinAvailable+0x46>
   bdefc:	f000 f8ee 	bl	be0dc <_Z22__fetch_global_Serial1v>
   bdf00:	7c00      	ldrb	r0, [r0, #16]
   bdf02:	f7fc fd2f 	bl	ba964 <hal_usart_is_enabled>
   bdf06:	e7f2      	b.n	bdeee <pinAvailable+0x5a>
   bdf08:	2003e450 	.word	0x2003e450
   bdf0c:	2003e454 	.word	0x2003e454

000bdf10 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdf10:	2823      	cmp	r0, #35	; 0x23
{
   bdf12:	b538      	push	{r3, r4, r5, lr}
   bdf14:	4604      	mov	r4, r0
   bdf16:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdf18:	d80a      	bhi.n	bdf30 <pinMode+0x20>
   bdf1a:	29ff      	cmp	r1, #255	; 0xff
   bdf1c:	d008      	beq.n	bdf30 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bdf1e:	f7ff ffb9 	bl	bde94 <pinAvailable>
   bdf22:	b128      	cbz	r0, bdf30 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bdf24:	4629      	mov	r1, r5
   bdf26:	4620      	mov	r0, r4
}
   bdf28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bdf2c:	f7fc bb8a 	b.w	ba644 <HAL_Pin_Mode>
}
   bdf30:	bd38      	pop	{r3, r4, r5, pc}

000bdf32 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bdf32:	b538      	push	{r3, r4, r5, lr}
   bdf34:	4604      	mov	r4, r0
   bdf36:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bdf38:	f7fc fb8c 	bl	ba654 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bdf3c:	28ff      	cmp	r0, #255	; 0xff
   bdf3e:	d010      	beq.n	bdf62 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bdf40:	2806      	cmp	r0, #6
   bdf42:	d804      	bhi.n	bdf4e <digitalWrite+0x1c>
   bdf44:	234d      	movs	r3, #77	; 0x4d
   bdf46:	fa23 f000 	lsr.w	r0, r3, r0
   bdf4a:	07c3      	lsls	r3, r0, #31
   bdf4c:	d409      	bmi.n	bdf62 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bdf4e:	4620      	mov	r0, r4
   bdf50:	f7ff ffa0 	bl	bde94 <pinAvailable>
   bdf54:	b128      	cbz	r0, bdf62 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bdf56:	4629      	mov	r1, r5
   bdf58:	4620      	mov	r0, r4
}
   bdf5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bdf5e:	f7fc bb81 	b.w	ba664 <HAL_GPIO_Write>
}
   bdf62:	bd38      	pop	{r3, r4, r5, pc}

000bdf64 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bdf64:	b510      	push	{r4, lr}
   bdf66:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bdf68:	f7fc fb74 	bl	ba654 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bdf6c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bdf6e:	b2db      	uxtb	r3, r3
   bdf70:	2b01      	cmp	r3, #1
   bdf72:	d908      	bls.n	bdf86 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bdf74:	4620      	mov	r0, r4
   bdf76:	f7ff ff8d 	bl	bde94 <pinAvailable>
   bdf7a:	b120      	cbz	r0, bdf86 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bdf7c:	4620      	mov	r0, r4
}
   bdf7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bdf82:	f7fc bb77 	b.w	ba674 <HAL_GPIO_Read>
}
   bdf86:	2000      	movs	r0, #0
   bdf88:	bd10      	pop	{r4, pc}

000bdf8a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bdf8a:	280d      	cmp	r0, #13
{
   bdf8c:	b510      	push	{r4, lr}
   bdf8e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bdf90:	bf9c      	itt	ls
   bdf92:	340e      	addls	r4, #14
   bdf94:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bdf96:	4620      	mov	r0, r4
   bdf98:	f7ff ff7c 	bl	bde94 <pinAvailable>
   bdf9c:	b150      	cbz	r0, bdfb4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bdf9e:	2103      	movs	r1, #3
   bdfa0:	4620      	mov	r0, r4
   bdfa2:	f7fc fb47 	bl	ba634 <HAL_Validate_Pin_Function>
   bdfa6:	2803      	cmp	r0, #3
   bdfa8:	d104      	bne.n	bdfb4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bdfaa:	4620      	mov	r0, r4
}
   bdfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bdfb0:	f7fc bb78 	b.w	ba6a4 <hal_adc_read>
}
   bdfb4:	2000      	movs	r0, #0
   bdfb6:	bd10      	pop	{r4, pc}

000bdfb8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdfb8:	4770      	bx	lr

000bdfba <__tcf_1>:
   bdfba:	4770      	bx	lr

000bdfbc <_Z17acquireWireBufferv>:
{
   bdfbc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bdfbe:	2520      	movs	r5, #32
   bdfc0:	2314      	movs	r3, #20
{
   bdfc2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bdfc4:	6003      	str	r3, [r0, #0]
   bdfc6:	6085      	str	r5, [r0, #8]
   bdfc8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdfca:	4906      	ldr	r1, [pc, #24]	; (bdfe4 <_Z17acquireWireBufferv+0x28>)
   bdfcc:	4628      	mov	r0, r5
   bdfce:	f000 f8ab 	bl	be128 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdfd2:	4904      	ldr	r1, [pc, #16]	; (bdfe4 <_Z17acquireWireBufferv+0x28>)
	};
   bdfd4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdfd6:	4628      	mov	r0, r5
   bdfd8:	f000 f8a6 	bl	be128 <_ZnajRKSt9nothrow_t>
	};
   bdfdc:	60e0      	str	r0, [r4, #12]
}
   bdfde:	4620      	mov	r0, r4
   bdfe0:	bd38      	pop	{r3, r4, r5, pc}
   bdfe2:	bf00      	nop
   bdfe4:	000c0784 	.word	0x000c0784

000bdfe8 <_Z18acquireWire1Bufferv>:
   bdfe8:	b538      	push	{r3, r4, r5, lr}
   bdfea:	2520      	movs	r5, #32
   bdfec:	2314      	movs	r3, #20
   bdfee:	4604      	mov	r4, r0
   bdff0:	6003      	str	r3, [r0, #0]
   bdff2:	6085      	str	r5, [r0, #8]
   bdff4:	6105      	str	r5, [r0, #16]
   bdff6:	4906      	ldr	r1, [pc, #24]	; (be010 <_Z18acquireWire1Bufferv+0x28>)
   bdff8:	4628      	mov	r0, r5
   bdffa:	f000 f895 	bl	be128 <_ZnajRKSt9nothrow_t>
   bdffe:	4904      	ldr	r1, [pc, #16]	; (be010 <_Z18acquireWire1Bufferv+0x28>)
   be000:	6060      	str	r0, [r4, #4]
   be002:	4628      	mov	r0, r5
   be004:	f000 f890 	bl	be128 <_ZnajRKSt9nothrow_t>
   be008:	60e0      	str	r0, [r4, #12]
   be00a:	4620      	mov	r0, r4
   be00c:	bd38      	pop	{r3, r4, r5, pc}
   be00e:	bf00      	nop
   be010:	000c0784 	.word	0x000c0784

000be014 <_Z19__fetch_global_Wirev>:
{
   be014:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be016:	4d0e      	ldr	r5, [pc, #56]	; (be050 <_Z19__fetch_global_Wirev+0x3c>)
   be018:	7829      	ldrb	r1, [r5, #0]
   be01a:	f3bf 8f5b 	dmb	ish
   be01e:	f011 0401 	ands.w	r4, r1, #1
{
   be022:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be024:	d111      	bne.n	be04a <_Z19__fetch_global_Wirev+0x36>
   be026:	4628      	mov	r0, r5
   be028:	f7f6 f848 	bl	b40bc <__cxa_guard_acquire>
   be02c:	b168      	cbz	r0, be04a <_Z19__fetch_global_Wirev+0x36>
   be02e:	a801      	add	r0, sp, #4
   be030:	f7ff ffc4 	bl	bdfbc <_Z17acquireWireBufferv>
   be034:	aa01      	add	r2, sp, #4
   be036:	4621      	mov	r1, r4
   be038:	4806      	ldr	r0, [pc, #24]	; (be054 <_Z19__fetch_global_Wirev+0x40>)
   be03a:	f7fd fbdd 	bl	bb7f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be03e:	4628      	mov	r0, r5
   be040:	f7f6 f841 	bl	b40c6 <__cxa_guard_release>
   be044:	4804      	ldr	r0, [pc, #16]	; (be058 <_Z19__fetch_global_Wirev+0x44>)
   be046:	f000 fd55 	bl	beaf4 <atexit>
	return wire;
}
   be04a:	4802      	ldr	r0, [pc, #8]	; (be054 <_Z19__fetch_global_Wirev+0x40>)
   be04c:	b007      	add	sp, #28
   be04e:	bd30      	pop	{r4, r5, pc}
   be050:	2003e714 	.word	0x2003e714
   be054:	2003e71c 	.word	0x2003e71c
   be058:	000bdfb9 	.word	0x000bdfb9

000be05c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   be05c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be05e:	4c0e      	ldr	r4, [pc, #56]	; (be098 <_Z20__fetch_global_Wire1v+0x3c>)
   be060:	7823      	ldrb	r3, [r4, #0]
   be062:	f3bf 8f5b 	dmb	ish
   be066:	07db      	lsls	r3, r3, #31
{
   be068:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be06a:	d411      	bmi.n	be090 <_Z20__fetch_global_Wire1v+0x34>
   be06c:	4620      	mov	r0, r4
   be06e:	f7f6 f825 	bl	b40bc <__cxa_guard_acquire>
   be072:	b168      	cbz	r0, be090 <_Z20__fetch_global_Wire1v+0x34>
   be074:	a801      	add	r0, sp, #4
   be076:	f7ff ffb7 	bl	bdfe8 <_Z18acquireWire1Bufferv>
   be07a:	aa01      	add	r2, sp, #4
   be07c:	2101      	movs	r1, #1
   be07e:	4807      	ldr	r0, [pc, #28]	; (be09c <_Z20__fetch_global_Wire1v+0x40>)
   be080:	f7fd fbba 	bl	bb7f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be084:	4620      	mov	r0, r4
   be086:	f7f6 f81e 	bl	b40c6 <__cxa_guard_release>
   be08a:	4805      	ldr	r0, [pc, #20]	; (be0a0 <_Z20__fetch_global_Wire1v+0x44>)
   be08c:	f000 fd32 	bl	beaf4 <atexit>
	return wire;
}
   be090:	4802      	ldr	r0, [pc, #8]	; (be09c <_Z20__fetch_global_Wire1v+0x40>)
   be092:	b006      	add	sp, #24
   be094:	bd10      	pop	{r4, pc}
   be096:	bf00      	nop
   be098:	2003e718 	.word	0x2003e718
   be09c:	2003e730 	.word	0x2003e730
   be0a0:	000bdfbb 	.word	0x000bdfbb

000be0a4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be0a4:	4770      	bx	lr
	...

000be0a8 <_Z20acquireSerial1Bufferv>:
{
   be0a8:	b538      	push	{r3, r4, r5, lr}
   be0aa:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   be0ac:	2514      	movs	r5, #20
   be0ae:	462a      	mov	r2, r5
   be0b0:	2100      	movs	r1, #0
   be0b2:	f000 fd73 	bl	beb9c <memset>
   be0b6:	8025      	strh	r5, [r4, #0]
   be0b8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0ba:	4907      	ldr	r1, [pc, #28]	; (be0d8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   be0bc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0be:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   be0c0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0c2:	f000 f831 	bl	be128 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0c6:	4904      	ldr	r1, [pc, #16]	; (be0d8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   be0c8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0ca:	4628      	mov	r0, r5
   be0cc:	f000 f82c 	bl	be128 <_ZnajRKSt9nothrow_t>
    };
   be0d0:	60e0      	str	r0, [r4, #12]
}
   be0d2:	4620      	mov	r0, r4
   be0d4:	bd38      	pop	{r3, r4, r5, pc}
   be0d6:	bf00      	nop
   be0d8:	000c0784 	.word	0x000c0784

000be0dc <_Z22__fetch_global_Serial1v>:
{
   be0dc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be0de:	4d0e      	ldr	r5, [pc, #56]	; (be118 <_Z22__fetch_global_Serial1v+0x3c>)
   be0e0:	7829      	ldrb	r1, [r5, #0]
   be0e2:	f3bf 8f5b 	dmb	ish
   be0e6:	f011 0401 	ands.w	r4, r1, #1
{
   be0ea:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be0ec:	d111      	bne.n	be112 <_Z22__fetch_global_Serial1v+0x36>
   be0ee:	4628      	mov	r0, r5
   be0f0:	f7f5 ffe4 	bl	b40bc <__cxa_guard_acquire>
   be0f4:	b168      	cbz	r0, be112 <_Z22__fetch_global_Serial1v+0x36>
   be0f6:	a801      	add	r0, sp, #4
   be0f8:	f7ff ffd6 	bl	be0a8 <_Z20acquireSerial1Bufferv>
   be0fc:	aa01      	add	r2, sp, #4
   be0fe:	4621      	mov	r1, r4
   be100:	4806      	ldr	r0, [pc, #24]	; (be11c <_Z22__fetch_global_Serial1v+0x40>)
   be102:	f7ff fd6b 	bl	bdbdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   be106:	4628      	mov	r0, r5
   be108:	f7f5 ffdd 	bl	b40c6 <__cxa_guard_release>
   be10c:	4804      	ldr	r0, [pc, #16]	; (be120 <_Z22__fetch_global_Serial1v+0x44>)
   be10e:	f000 fcf1 	bl	beaf4 <atexit>
    return serial1;
}
   be112:	4802      	ldr	r0, [pc, #8]	; (be11c <_Z22__fetch_global_Serial1v+0x40>)
   be114:	b007      	add	sp, #28
   be116:	bd30      	pop	{r4, r5, pc}
   be118:	2003e744 	.word	0x2003e744
   be11c:	2003e748 	.word	0x2003e748
   be120:	000be0a5 	.word	0x000be0a5

000be124 <_ZnwjRKSt9nothrow_t>:
   be124:	f7f5 bfb7 	b.w	b4096 <_Znwj>

000be128 <_ZnajRKSt9nothrow_t>:
   be128:	f7f5 bfb7 	b.w	b409a <_Znaj>

000be12c <_ZSt17__throw_bad_allocv>:
   be12c:	b508      	push	{r3, lr}
   be12e:	f7fc fe1d 	bl	bad6c <abort>

000be132 <_ZSt20__throw_length_errorPKc>:
   be132:	b508      	push	{r3, lr}
   be134:	f7fc fe1a 	bl	bad6c <abort>

000be138 <_ZSt25__throw_bad_function_callv>:
   be138:	b508      	push	{r3, lr}
   be13a:	f7fc fe17 	bl	bad6c <abort>
	...

000be140 <__aeabi_drsub>:
   be140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   be144:	e002      	b.n	be14c <__adddf3>
   be146:	bf00      	nop

000be148 <__aeabi_dsub>:
   be148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000be14c <__adddf3>:
   be14c:	b530      	push	{r4, r5, lr}
   be14e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   be152:	ea4f 0543 	mov.w	r5, r3, lsl #1
   be156:	ea94 0f05 	teq	r4, r5
   be15a:	bf08      	it	eq
   be15c:	ea90 0f02 	teqeq	r0, r2
   be160:	bf1f      	itttt	ne
   be162:	ea54 0c00 	orrsne.w	ip, r4, r0
   be166:	ea55 0c02 	orrsne.w	ip, r5, r2
   be16a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   be16e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be172:	f000 80e2 	beq.w	be33a <__adddf3+0x1ee>
   be176:	ea4f 5454 	mov.w	r4, r4, lsr #21
   be17a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   be17e:	bfb8      	it	lt
   be180:	426d      	neglt	r5, r5
   be182:	dd0c      	ble.n	be19e <__adddf3+0x52>
   be184:	442c      	add	r4, r5
   be186:	ea80 0202 	eor.w	r2, r0, r2
   be18a:	ea81 0303 	eor.w	r3, r1, r3
   be18e:	ea82 0000 	eor.w	r0, r2, r0
   be192:	ea83 0101 	eor.w	r1, r3, r1
   be196:	ea80 0202 	eor.w	r2, r0, r2
   be19a:	ea81 0303 	eor.w	r3, r1, r3
   be19e:	2d36      	cmp	r5, #54	; 0x36
   be1a0:	bf88      	it	hi
   be1a2:	bd30      	pophi	{r4, r5, pc}
   be1a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be1a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be1ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   be1b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   be1b4:	d002      	beq.n	be1bc <__adddf3+0x70>
   be1b6:	4240      	negs	r0, r0
   be1b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be1bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be1c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be1c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be1c8:	d002      	beq.n	be1d0 <__adddf3+0x84>
   be1ca:	4252      	negs	r2, r2
   be1cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be1d0:	ea94 0f05 	teq	r4, r5
   be1d4:	f000 80a7 	beq.w	be326 <__adddf3+0x1da>
   be1d8:	f1a4 0401 	sub.w	r4, r4, #1
   be1dc:	f1d5 0e20 	rsbs	lr, r5, #32
   be1e0:	db0d      	blt.n	be1fe <__adddf3+0xb2>
   be1e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   be1e6:	fa22 f205 	lsr.w	r2, r2, r5
   be1ea:	1880      	adds	r0, r0, r2
   be1ec:	f141 0100 	adc.w	r1, r1, #0
   be1f0:	fa03 f20e 	lsl.w	r2, r3, lr
   be1f4:	1880      	adds	r0, r0, r2
   be1f6:	fa43 f305 	asr.w	r3, r3, r5
   be1fa:	4159      	adcs	r1, r3
   be1fc:	e00e      	b.n	be21c <__adddf3+0xd0>
   be1fe:	f1a5 0520 	sub.w	r5, r5, #32
   be202:	f10e 0e20 	add.w	lr, lr, #32
   be206:	2a01      	cmp	r2, #1
   be208:	fa03 fc0e 	lsl.w	ip, r3, lr
   be20c:	bf28      	it	cs
   be20e:	f04c 0c02 	orrcs.w	ip, ip, #2
   be212:	fa43 f305 	asr.w	r3, r3, r5
   be216:	18c0      	adds	r0, r0, r3
   be218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   be21c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be220:	d507      	bpl.n	be232 <__adddf3+0xe6>
   be222:	f04f 0e00 	mov.w	lr, #0
   be226:	f1dc 0c00 	rsbs	ip, ip, #0
   be22a:	eb7e 0000 	sbcs.w	r0, lr, r0
   be22e:	eb6e 0101 	sbc.w	r1, lr, r1
   be232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   be236:	d31b      	bcc.n	be270 <__adddf3+0x124>
   be238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   be23c:	d30c      	bcc.n	be258 <__adddf3+0x10c>
   be23e:	0849      	lsrs	r1, r1, #1
   be240:	ea5f 0030 	movs.w	r0, r0, rrx
   be244:	ea4f 0c3c 	mov.w	ip, ip, rrx
   be248:	f104 0401 	add.w	r4, r4, #1
   be24c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   be250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   be254:	f080 809a 	bcs.w	be38c <__adddf3+0x240>
   be258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   be25c:	bf08      	it	eq
   be25e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be262:	f150 0000 	adcs.w	r0, r0, #0
   be266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be26a:	ea41 0105 	orr.w	r1, r1, r5
   be26e:	bd30      	pop	{r4, r5, pc}
   be270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   be274:	4140      	adcs	r0, r0
   be276:	eb41 0101 	adc.w	r1, r1, r1
   be27a:	3c01      	subs	r4, #1
   be27c:	bf28      	it	cs
   be27e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   be282:	d2e9      	bcs.n	be258 <__adddf3+0x10c>
   be284:	f091 0f00 	teq	r1, #0
   be288:	bf04      	itt	eq
   be28a:	4601      	moveq	r1, r0
   be28c:	2000      	moveq	r0, #0
   be28e:	fab1 f381 	clz	r3, r1
   be292:	bf08      	it	eq
   be294:	3320      	addeq	r3, #32
   be296:	f1a3 030b 	sub.w	r3, r3, #11
   be29a:	f1b3 0220 	subs.w	r2, r3, #32
   be29e:	da0c      	bge.n	be2ba <__adddf3+0x16e>
   be2a0:	320c      	adds	r2, #12
   be2a2:	dd08      	ble.n	be2b6 <__adddf3+0x16a>
   be2a4:	f102 0c14 	add.w	ip, r2, #20
   be2a8:	f1c2 020c 	rsb	r2, r2, #12
   be2ac:	fa01 f00c 	lsl.w	r0, r1, ip
   be2b0:	fa21 f102 	lsr.w	r1, r1, r2
   be2b4:	e00c      	b.n	be2d0 <__adddf3+0x184>
   be2b6:	f102 0214 	add.w	r2, r2, #20
   be2ba:	bfd8      	it	le
   be2bc:	f1c2 0c20 	rsble	ip, r2, #32
   be2c0:	fa01 f102 	lsl.w	r1, r1, r2
   be2c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   be2c8:	bfdc      	itt	le
   be2ca:	ea41 010c 	orrle.w	r1, r1, ip
   be2ce:	4090      	lslle	r0, r2
   be2d0:	1ae4      	subs	r4, r4, r3
   be2d2:	bfa2      	ittt	ge
   be2d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   be2d8:	4329      	orrge	r1, r5
   be2da:	bd30      	popge	{r4, r5, pc}
   be2dc:	ea6f 0404 	mvn.w	r4, r4
   be2e0:	3c1f      	subs	r4, #31
   be2e2:	da1c      	bge.n	be31e <__adddf3+0x1d2>
   be2e4:	340c      	adds	r4, #12
   be2e6:	dc0e      	bgt.n	be306 <__adddf3+0x1ba>
   be2e8:	f104 0414 	add.w	r4, r4, #20
   be2ec:	f1c4 0220 	rsb	r2, r4, #32
   be2f0:	fa20 f004 	lsr.w	r0, r0, r4
   be2f4:	fa01 f302 	lsl.w	r3, r1, r2
   be2f8:	ea40 0003 	orr.w	r0, r0, r3
   be2fc:	fa21 f304 	lsr.w	r3, r1, r4
   be300:	ea45 0103 	orr.w	r1, r5, r3
   be304:	bd30      	pop	{r4, r5, pc}
   be306:	f1c4 040c 	rsb	r4, r4, #12
   be30a:	f1c4 0220 	rsb	r2, r4, #32
   be30e:	fa20 f002 	lsr.w	r0, r0, r2
   be312:	fa01 f304 	lsl.w	r3, r1, r4
   be316:	ea40 0003 	orr.w	r0, r0, r3
   be31a:	4629      	mov	r1, r5
   be31c:	bd30      	pop	{r4, r5, pc}
   be31e:	fa21 f004 	lsr.w	r0, r1, r4
   be322:	4629      	mov	r1, r5
   be324:	bd30      	pop	{r4, r5, pc}
   be326:	f094 0f00 	teq	r4, #0
   be32a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   be32e:	bf06      	itte	eq
   be330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   be334:	3401      	addeq	r4, #1
   be336:	3d01      	subne	r5, #1
   be338:	e74e      	b.n	be1d8 <__adddf3+0x8c>
   be33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be33e:	bf18      	it	ne
   be340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be344:	d029      	beq.n	be39a <__adddf3+0x24e>
   be346:	ea94 0f05 	teq	r4, r5
   be34a:	bf08      	it	eq
   be34c:	ea90 0f02 	teqeq	r0, r2
   be350:	d005      	beq.n	be35e <__adddf3+0x212>
   be352:	ea54 0c00 	orrs.w	ip, r4, r0
   be356:	bf04      	itt	eq
   be358:	4619      	moveq	r1, r3
   be35a:	4610      	moveq	r0, r2
   be35c:	bd30      	pop	{r4, r5, pc}
   be35e:	ea91 0f03 	teq	r1, r3
   be362:	bf1e      	ittt	ne
   be364:	2100      	movne	r1, #0
   be366:	2000      	movne	r0, #0
   be368:	bd30      	popne	{r4, r5, pc}
   be36a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   be36e:	d105      	bne.n	be37c <__adddf3+0x230>
   be370:	0040      	lsls	r0, r0, #1
   be372:	4149      	adcs	r1, r1
   be374:	bf28      	it	cs
   be376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   be37a:	bd30      	pop	{r4, r5, pc}
   be37c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   be380:	bf3c      	itt	cc
   be382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   be386:	bd30      	popcc	{r4, r5, pc}
   be388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be38c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   be390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be394:	f04f 0000 	mov.w	r0, #0
   be398:	bd30      	pop	{r4, r5, pc}
   be39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be39e:	bf1a      	itte	ne
   be3a0:	4619      	movne	r1, r3
   be3a2:	4610      	movne	r0, r2
   be3a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   be3a8:	bf1c      	itt	ne
   be3aa:	460b      	movne	r3, r1
   be3ac:	4602      	movne	r2, r0
   be3ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be3b2:	bf06      	itte	eq
   be3b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   be3b8:	ea91 0f03 	teqeq	r1, r3
   be3bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   be3c0:	bd30      	pop	{r4, r5, pc}
   be3c2:	bf00      	nop

000be3c4 <__aeabi_ui2d>:
   be3c4:	f090 0f00 	teq	r0, #0
   be3c8:	bf04      	itt	eq
   be3ca:	2100      	moveq	r1, #0
   be3cc:	4770      	bxeq	lr
   be3ce:	b530      	push	{r4, r5, lr}
   be3d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be3d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be3d8:	f04f 0500 	mov.w	r5, #0
   be3dc:	f04f 0100 	mov.w	r1, #0
   be3e0:	e750      	b.n	be284 <__adddf3+0x138>
   be3e2:	bf00      	nop

000be3e4 <__aeabi_i2d>:
   be3e4:	f090 0f00 	teq	r0, #0
   be3e8:	bf04      	itt	eq
   be3ea:	2100      	moveq	r1, #0
   be3ec:	4770      	bxeq	lr
   be3ee:	b530      	push	{r4, r5, lr}
   be3f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be3f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be3f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   be3fc:	bf48      	it	mi
   be3fe:	4240      	negmi	r0, r0
   be400:	f04f 0100 	mov.w	r1, #0
   be404:	e73e      	b.n	be284 <__adddf3+0x138>
   be406:	bf00      	nop

000be408 <__aeabi_f2d>:
   be408:	0042      	lsls	r2, r0, #1
   be40a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   be40e:	ea4f 0131 	mov.w	r1, r1, rrx
   be412:	ea4f 7002 	mov.w	r0, r2, lsl #28
   be416:	bf1f      	itttt	ne
   be418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   be41c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   be420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   be424:	4770      	bxne	lr
   be426:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   be42a:	bf08      	it	eq
   be42c:	4770      	bxeq	lr
   be42e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   be432:	bf04      	itt	eq
   be434:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   be438:	4770      	bxeq	lr
   be43a:	b530      	push	{r4, r5, lr}
   be43c:	f44f 7460 	mov.w	r4, #896	; 0x380
   be440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be444:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be448:	e71c      	b.n	be284 <__adddf3+0x138>
   be44a:	bf00      	nop

000be44c <__aeabi_ul2d>:
   be44c:	ea50 0201 	orrs.w	r2, r0, r1
   be450:	bf08      	it	eq
   be452:	4770      	bxeq	lr
   be454:	b530      	push	{r4, r5, lr}
   be456:	f04f 0500 	mov.w	r5, #0
   be45a:	e00a      	b.n	be472 <__aeabi_l2d+0x16>

000be45c <__aeabi_l2d>:
   be45c:	ea50 0201 	orrs.w	r2, r0, r1
   be460:	bf08      	it	eq
   be462:	4770      	bxeq	lr
   be464:	b530      	push	{r4, r5, lr}
   be466:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   be46a:	d502      	bpl.n	be472 <__aeabi_l2d+0x16>
   be46c:	4240      	negs	r0, r0
   be46e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be472:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be476:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be47a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   be47e:	f43f aed8 	beq.w	be232 <__adddf3+0xe6>
   be482:	f04f 0203 	mov.w	r2, #3
   be486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be48a:	bf18      	it	ne
   be48c:	3203      	addne	r2, #3
   be48e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be492:	bf18      	it	ne
   be494:	3203      	addne	r2, #3
   be496:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   be49a:	f1c2 0320 	rsb	r3, r2, #32
   be49e:	fa00 fc03 	lsl.w	ip, r0, r3
   be4a2:	fa20 f002 	lsr.w	r0, r0, r2
   be4a6:	fa01 fe03 	lsl.w	lr, r1, r3
   be4aa:	ea40 000e 	orr.w	r0, r0, lr
   be4ae:	fa21 f102 	lsr.w	r1, r1, r2
   be4b2:	4414      	add	r4, r2
   be4b4:	e6bd      	b.n	be232 <__adddf3+0xe6>
   be4b6:	bf00      	nop

000be4b8 <__aeabi_dmul>:
   be4b8:	b570      	push	{r4, r5, r6, lr}
   be4ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be4be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be4c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be4c6:	bf1d      	ittte	ne
   be4c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be4cc:	ea94 0f0c 	teqne	r4, ip
   be4d0:	ea95 0f0c 	teqne	r5, ip
   be4d4:	f000 f8de 	bleq	be694 <__aeabi_dmul+0x1dc>
   be4d8:	442c      	add	r4, r5
   be4da:	ea81 0603 	eor.w	r6, r1, r3
   be4de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   be4e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   be4e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   be4ea:	bf18      	it	ne
   be4ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   be4f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be4f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be4f8:	d038      	beq.n	be56c <__aeabi_dmul+0xb4>
   be4fa:	fba0 ce02 	umull	ip, lr, r0, r2
   be4fe:	f04f 0500 	mov.w	r5, #0
   be502:	fbe1 e502 	umlal	lr, r5, r1, r2
   be506:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   be50a:	fbe0 e503 	umlal	lr, r5, r0, r3
   be50e:	f04f 0600 	mov.w	r6, #0
   be512:	fbe1 5603 	umlal	r5, r6, r1, r3
   be516:	f09c 0f00 	teq	ip, #0
   be51a:	bf18      	it	ne
   be51c:	f04e 0e01 	orrne.w	lr, lr, #1
   be520:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   be524:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   be528:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   be52c:	d204      	bcs.n	be538 <__aeabi_dmul+0x80>
   be52e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   be532:	416d      	adcs	r5, r5
   be534:	eb46 0606 	adc.w	r6, r6, r6
   be538:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   be53c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   be540:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   be544:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   be548:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   be54c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be550:	bf88      	it	hi
   be552:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be556:	d81e      	bhi.n	be596 <__aeabi_dmul+0xde>
   be558:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   be55c:	bf08      	it	eq
   be55e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   be562:	f150 0000 	adcs.w	r0, r0, #0
   be566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be56a:	bd70      	pop	{r4, r5, r6, pc}
   be56c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   be570:	ea46 0101 	orr.w	r1, r6, r1
   be574:	ea40 0002 	orr.w	r0, r0, r2
   be578:	ea81 0103 	eor.w	r1, r1, r3
   be57c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   be580:	bfc2      	ittt	gt
   be582:	ebd4 050c 	rsbsgt	r5, r4, ip
   be586:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be58a:	bd70      	popgt	{r4, r5, r6, pc}
   be58c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be590:	f04f 0e00 	mov.w	lr, #0
   be594:	3c01      	subs	r4, #1
   be596:	f300 80ab 	bgt.w	be6f0 <__aeabi_dmul+0x238>
   be59a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   be59e:	bfde      	ittt	le
   be5a0:	2000      	movle	r0, #0
   be5a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   be5a6:	bd70      	pople	{r4, r5, r6, pc}
   be5a8:	f1c4 0400 	rsb	r4, r4, #0
   be5ac:	3c20      	subs	r4, #32
   be5ae:	da35      	bge.n	be61c <__aeabi_dmul+0x164>
   be5b0:	340c      	adds	r4, #12
   be5b2:	dc1b      	bgt.n	be5ec <__aeabi_dmul+0x134>
   be5b4:	f104 0414 	add.w	r4, r4, #20
   be5b8:	f1c4 0520 	rsb	r5, r4, #32
   be5bc:	fa00 f305 	lsl.w	r3, r0, r5
   be5c0:	fa20 f004 	lsr.w	r0, r0, r4
   be5c4:	fa01 f205 	lsl.w	r2, r1, r5
   be5c8:	ea40 0002 	orr.w	r0, r0, r2
   be5cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   be5d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be5d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be5d8:	fa21 f604 	lsr.w	r6, r1, r4
   be5dc:	eb42 0106 	adc.w	r1, r2, r6
   be5e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be5e4:	bf08      	it	eq
   be5e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be5ea:	bd70      	pop	{r4, r5, r6, pc}
   be5ec:	f1c4 040c 	rsb	r4, r4, #12
   be5f0:	f1c4 0520 	rsb	r5, r4, #32
   be5f4:	fa00 f304 	lsl.w	r3, r0, r4
   be5f8:	fa20 f005 	lsr.w	r0, r0, r5
   be5fc:	fa01 f204 	lsl.w	r2, r1, r4
   be600:	ea40 0002 	orr.w	r0, r0, r2
   be604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be60c:	f141 0100 	adc.w	r1, r1, #0
   be610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be614:	bf08      	it	eq
   be616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be61a:	bd70      	pop	{r4, r5, r6, pc}
   be61c:	f1c4 0520 	rsb	r5, r4, #32
   be620:	fa00 f205 	lsl.w	r2, r0, r5
   be624:	ea4e 0e02 	orr.w	lr, lr, r2
   be628:	fa20 f304 	lsr.w	r3, r0, r4
   be62c:	fa01 f205 	lsl.w	r2, r1, r5
   be630:	ea43 0302 	orr.w	r3, r3, r2
   be634:	fa21 f004 	lsr.w	r0, r1, r4
   be638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be63c:	fa21 f204 	lsr.w	r2, r1, r4
   be640:	ea20 0002 	bic.w	r0, r0, r2
   be644:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   be648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be64c:	bf08      	it	eq
   be64e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be652:	bd70      	pop	{r4, r5, r6, pc}
   be654:	f094 0f00 	teq	r4, #0
   be658:	d10f      	bne.n	be67a <__aeabi_dmul+0x1c2>
   be65a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   be65e:	0040      	lsls	r0, r0, #1
   be660:	eb41 0101 	adc.w	r1, r1, r1
   be664:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be668:	bf08      	it	eq
   be66a:	3c01      	subeq	r4, #1
   be66c:	d0f7      	beq.n	be65e <__aeabi_dmul+0x1a6>
   be66e:	ea41 0106 	orr.w	r1, r1, r6
   be672:	f095 0f00 	teq	r5, #0
   be676:	bf18      	it	ne
   be678:	4770      	bxne	lr
   be67a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   be67e:	0052      	lsls	r2, r2, #1
   be680:	eb43 0303 	adc.w	r3, r3, r3
   be684:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   be688:	bf08      	it	eq
   be68a:	3d01      	subeq	r5, #1
   be68c:	d0f7      	beq.n	be67e <__aeabi_dmul+0x1c6>
   be68e:	ea43 0306 	orr.w	r3, r3, r6
   be692:	4770      	bx	lr
   be694:	ea94 0f0c 	teq	r4, ip
   be698:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be69c:	bf18      	it	ne
   be69e:	ea95 0f0c 	teqne	r5, ip
   be6a2:	d00c      	beq.n	be6be <__aeabi_dmul+0x206>
   be6a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be6a8:	bf18      	it	ne
   be6aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be6ae:	d1d1      	bne.n	be654 <__aeabi_dmul+0x19c>
   be6b0:	ea81 0103 	eor.w	r1, r1, r3
   be6b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be6b8:	f04f 0000 	mov.w	r0, #0
   be6bc:	bd70      	pop	{r4, r5, r6, pc}
   be6be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be6c2:	bf06      	itte	eq
   be6c4:	4610      	moveq	r0, r2
   be6c6:	4619      	moveq	r1, r3
   be6c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be6cc:	d019      	beq.n	be702 <__aeabi_dmul+0x24a>
   be6ce:	ea94 0f0c 	teq	r4, ip
   be6d2:	d102      	bne.n	be6da <__aeabi_dmul+0x222>
   be6d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   be6d8:	d113      	bne.n	be702 <__aeabi_dmul+0x24a>
   be6da:	ea95 0f0c 	teq	r5, ip
   be6de:	d105      	bne.n	be6ec <__aeabi_dmul+0x234>
   be6e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   be6e4:	bf1c      	itt	ne
   be6e6:	4610      	movne	r0, r2
   be6e8:	4619      	movne	r1, r3
   be6ea:	d10a      	bne.n	be702 <__aeabi_dmul+0x24a>
   be6ec:	ea81 0103 	eor.w	r1, r1, r3
   be6f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be6f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be6f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be6fc:	f04f 0000 	mov.w	r0, #0
   be700:	bd70      	pop	{r4, r5, r6, pc}
   be702:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be706:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   be70a:	bd70      	pop	{r4, r5, r6, pc}

000be70c <__aeabi_ddiv>:
   be70c:	b570      	push	{r4, r5, r6, lr}
   be70e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be712:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be716:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be71a:	bf1d      	ittte	ne
   be71c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be720:	ea94 0f0c 	teqne	r4, ip
   be724:	ea95 0f0c 	teqne	r5, ip
   be728:	f000 f8a7 	bleq	be87a <__aeabi_ddiv+0x16e>
   be72c:	eba4 0405 	sub.w	r4, r4, r5
   be730:	ea81 0e03 	eor.w	lr, r1, r3
   be734:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be738:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be73c:	f000 8088 	beq.w	be850 <__aeabi_ddiv+0x144>
   be740:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be744:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   be748:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   be74c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   be750:	ea4f 2202 	mov.w	r2, r2, lsl #8
   be754:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   be758:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   be75c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   be760:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   be764:	429d      	cmp	r5, r3
   be766:	bf08      	it	eq
   be768:	4296      	cmpeq	r6, r2
   be76a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   be76e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   be772:	d202      	bcs.n	be77a <__aeabi_ddiv+0x6e>
   be774:	085b      	lsrs	r3, r3, #1
   be776:	ea4f 0232 	mov.w	r2, r2, rrx
   be77a:	1ab6      	subs	r6, r6, r2
   be77c:	eb65 0503 	sbc.w	r5, r5, r3
   be780:	085b      	lsrs	r3, r3, #1
   be782:	ea4f 0232 	mov.w	r2, r2, rrx
   be786:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   be78a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   be78e:	ebb6 0e02 	subs.w	lr, r6, r2
   be792:	eb75 0e03 	sbcs.w	lr, r5, r3
   be796:	bf22      	ittt	cs
   be798:	1ab6      	subcs	r6, r6, r2
   be79a:	4675      	movcs	r5, lr
   be79c:	ea40 000c 	orrcs.w	r0, r0, ip
   be7a0:	085b      	lsrs	r3, r3, #1
   be7a2:	ea4f 0232 	mov.w	r2, r2, rrx
   be7a6:	ebb6 0e02 	subs.w	lr, r6, r2
   be7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   be7ae:	bf22      	ittt	cs
   be7b0:	1ab6      	subcs	r6, r6, r2
   be7b2:	4675      	movcs	r5, lr
   be7b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   be7b8:	085b      	lsrs	r3, r3, #1
   be7ba:	ea4f 0232 	mov.w	r2, r2, rrx
   be7be:	ebb6 0e02 	subs.w	lr, r6, r2
   be7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   be7c6:	bf22      	ittt	cs
   be7c8:	1ab6      	subcs	r6, r6, r2
   be7ca:	4675      	movcs	r5, lr
   be7cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   be7d0:	085b      	lsrs	r3, r3, #1
   be7d2:	ea4f 0232 	mov.w	r2, r2, rrx
   be7d6:	ebb6 0e02 	subs.w	lr, r6, r2
   be7da:	eb75 0e03 	sbcs.w	lr, r5, r3
   be7de:	bf22      	ittt	cs
   be7e0:	1ab6      	subcs	r6, r6, r2
   be7e2:	4675      	movcs	r5, lr
   be7e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   be7e8:	ea55 0e06 	orrs.w	lr, r5, r6
   be7ec:	d018      	beq.n	be820 <__aeabi_ddiv+0x114>
   be7ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   be7f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   be7f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   be7fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   be7fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   be802:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   be806:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   be80a:	d1c0      	bne.n	be78e <__aeabi_ddiv+0x82>
   be80c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be810:	d10b      	bne.n	be82a <__aeabi_ddiv+0x11e>
   be812:	ea41 0100 	orr.w	r1, r1, r0
   be816:	f04f 0000 	mov.w	r0, #0
   be81a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   be81e:	e7b6      	b.n	be78e <__aeabi_ddiv+0x82>
   be820:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be824:	bf04      	itt	eq
   be826:	4301      	orreq	r1, r0
   be828:	2000      	moveq	r0, #0
   be82a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be82e:	bf88      	it	hi
   be830:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be834:	f63f aeaf 	bhi.w	be596 <__aeabi_dmul+0xde>
   be838:	ebb5 0c03 	subs.w	ip, r5, r3
   be83c:	bf04      	itt	eq
   be83e:	ebb6 0c02 	subseq.w	ip, r6, r2
   be842:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be846:	f150 0000 	adcs.w	r0, r0, #0
   be84a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be84e:	bd70      	pop	{r4, r5, r6, pc}
   be850:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   be854:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   be858:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   be85c:	bfc2      	ittt	gt
   be85e:	ebd4 050c 	rsbsgt	r5, r4, ip
   be862:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be866:	bd70      	popgt	{r4, r5, r6, pc}
   be868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be86c:	f04f 0e00 	mov.w	lr, #0
   be870:	3c01      	subs	r4, #1
   be872:	e690      	b.n	be596 <__aeabi_dmul+0xde>
   be874:	ea45 0e06 	orr.w	lr, r5, r6
   be878:	e68d      	b.n	be596 <__aeabi_dmul+0xde>
   be87a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be87e:	ea94 0f0c 	teq	r4, ip
   be882:	bf08      	it	eq
   be884:	ea95 0f0c 	teqeq	r5, ip
   be888:	f43f af3b 	beq.w	be702 <__aeabi_dmul+0x24a>
   be88c:	ea94 0f0c 	teq	r4, ip
   be890:	d10a      	bne.n	be8a8 <__aeabi_ddiv+0x19c>
   be892:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be896:	f47f af34 	bne.w	be702 <__aeabi_dmul+0x24a>
   be89a:	ea95 0f0c 	teq	r5, ip
   be89e:	f47f af25 	bne.w	be6ec <__aeabi_dmul+0x234>
   be8a2:	4610      	mov	r0, r2
   be8a4:	4619      	mov	r1, r3
   be8a6:	e72c      	b.n	be702 <__aeabi_dmul+0x24a>
   be8a8:	ea95 0f0c 	teq	r5, ip
   be8ac:	d106      	bne.n	be8bc <__aeabi_ddiv+0x1b0>
   be8ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be8b2:	f43f aefd 	beq.w	be6b0 <__aeabi_dmul+0x1f8>
   be8b6:	4610      	mov	r0, r2
   be8b8:	4619      	mov	r1, r3
   be8ba:	e722      	b.n	be702 <__aeabi_dmul+0x24a>
   be8bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be8c0:	bf18      	it	ne
   be8c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be8c6:	f47f aec5 	bne.w	be654 <__aeabi_dmul+0x19c>
   be8ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   be8ce:	f47f af0d 	bne.w	be6ec <__aeabi_dmul+0x234>
   be8d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   be8d6:	f47f aeeb 	bne.w	be6b0 <__aeabi_dmul+0x1f8>
   be8da:	e712      	b.n	be702 <__aeabi_dmul+0x24a>

000be8dc <__gedf2>:
   be8dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   be8e0:	e006      	b.n	be8f0 <__cmpdf2+0x4>
   be8e2:	bf00      	nop

000be8e4 <__ledf2>:
   be8e4:	f04f 0c01 	mov.w	ip, #1
   be8e8:	e002      	b.n	be8f0 <__cmpdf2+0x4>
   be8ea:	bf00      	nop

000be8ec <__cmpdf2>:
   be8ec:	f04f 0c01 	mov.w	ip, #1
   be8f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   be8f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be8f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be8fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be900:	bf18      	it	ne
   be902:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   be906:	d01b      	beq.n	be940 <__cmpdf2+0x54>
   be908:	b001      	add	sp, #4
   be90a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   be90e:	bf0c      	ite	eq
   be910:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   be914:	ea91 0f03 	teqne	r1, r3
   be918:	bf02      	ittt	eq
   be91a:	ea90 0f02 	teqeq	r0, r2
   be91e:	2000      	moveq	r0, #0
   be920:	4770      	bxeq	lr
   be922:	f110 0f00 	cmn.w	r0, #0
   be926:	ea91 0f03 	teq	r1, r3
   be92a:	bf58      	it	pl
   be92c:	4299      	cmppl	r1, r3
   be92e:	bf08      	it	eq
   be930:	4290      	cmpeq	r0, r2
   be932:	bf2c      	ite	cs
   be934:	17d8      	asrcs	r0, r3, #31
   be936:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   be93a:	f040 0001 	orr.w	r0, r0, #1
   be93e:	4770      	bx	lr
   be940:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be948:	d102      	bne.n	be950 <__cmpdf2+0x64>
   be94a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   be94e:	d107      	bne.n	be960 <__cmpdf2+0x74>
   be950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be958:	d1d6      	bne.n	be908 <__cmpdf2+0x1c>
   be95a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   be95e:	d0d3      	beq.n	be908 <__cmpdf2+0x1c>
   be960:	f85d 0b04 	ldr.w	r0, [sp], #4
   be964:	4770      	bx	lr
   be966:	bf00      	nop

000be968 <__aeabi_cdrcmple>:
   be968:	4684      	mov	ip, r0
   be96a:	4610      	mov	r0, r2
   be96c:	4662      	mov	r2, ip
   be96e:	468c      	mov	ip, r1
   be970:	4619      	mov	r1, r3
   be972:	4663      	mov	r3, ip
   be974:	e000      	b.n	be978 <__aeabi_cdcmpeq>
   be976:	bf00      	nop

000be978 <__aeabi_cdcmpeq>:
   be978:	b501      	push	{r0, lr}
   be97a:	f7ff ffb7 	bl	be8ec <__cmpdf2>
   be97e:	2800      	cmp	r0, #0
   be980:	bf48      	it	mi
   be982:	f110 0f00 	cmnmi.w	r0, #0
   be986:	bd01      	pop	{r0, pc}

000be988 <__aeabi_dcmpeq>:
   be988:	f84d ed08 	str.w	lr, [sp, #-8]!
   be98c:	f7ff fff4 	bl	be978 <__aeabi_cdcmpeq>
   be990:	bf0c      	ite	eq
   be992:	2001      	moveq	r0, #1
   be994:	2000      	movne	r0, #0
   be996:	f85d fb08 	ldr.w	pc, [sp], #8
   be99a:	bf00      	nop

000be99c <__aeabi_dcmplt>:
   be99c:	f84d ed08 	str.w	lr, [sp, #-8]!
   be9a0:	f7ff ffea 	bl	be978 <__aeabi_cdcmpeq>
   be9a4:	bf34      	ite	cc
   be9a6:	2001      	movcc	r0, #1
   be9a8:	2000      	movcs	r0, #0
   be9aa:	f85d fb08 	ldr.w	pc, [sp], #8
   be9ae:	bf00      	nop

000be9b0 <__aeabi_dcmple>:
   be9b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   be9b4:	f7ff ffe0 	bl	be978 <__aeabi_cdcmpeq>
   be9b8:	bf94      	ite	ls
   be9ba:	2001      	movls	r0, #1
   be9bc:	2000      	movhi	r0, #0
   be9be:	f85d fb08 	ldr.w	pc, [sp], #8
   be9c2:	bf00      	nop

000be9c4 <__aeabi_dcmpge>:
   be9c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   be9c8:	f7ff ffce 	bl	be968 <__aeabi_cdrcmple>
   be9cc:	bf94      	ite	ls
   be9ce:	2001      	movls	r0, #1
   be9d0:	2000      	movhi	r0, #0
   be9d2:	f85d fb08 	ldr.w	pc, [sp], #8
   be9d6:	bf00      	nop

000be9d8 <__aeabi_dcmpgt>:
   be9d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   be9dc:	f7ff ffc4 	bl	be968 <__aeabi_cdrcmple>
   be9e0:	bf34      	ite	cc
   be9e2:	2001      	movcc	r0, #1
   be9e4:	2000      	movcs	r0, #0
   be9e6:	f85d fb08 	ldr.w	pc, [sp], #8
   be9ea:	bf00      	nop

000be9ec <__aeabi_dcmpun>:
   be9ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be9f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be9f4:	d102      	bne.n	be9fc <__aeabi_dcmpun+0x10>
   be9f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   be9fa:	d10a      	bne.n	bea12 <__aeabi_dcmpun+0x26>
   be9fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bea00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bea04:	d102      	bne.n	bea0c <__aeabi_dcmpun+0x20>
   bea06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bea0a:	d102      	bne.n	bea12 <__aeabi_dcmpun+0x26>
   bea0c:	f04f 0000 	mov.w	r0, #0
   bea10:	4770      	bx	lr
   bea12:	f04f 0001 	mov.w	r0, #1
   bea16:	4770      	bx	lr

000bea18 <__aeabi_d2iz>:
   bea18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bea1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bea20:	d215      	bcs.n	bea4e <__aeabi_d2iz+0x36>
   bea22:	d511      	bpl.n	bea48 <__aeabi_d2iz+0x30>
   bea24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bea28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bea2c:	d912      	bls.n	bea54 <__aeabi_d2iz+0x3c>
   bea2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bea32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bea36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bea3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bea3e:	fa23 f002 	lsr.w	r0, r3, r2
   bea42:	bf18      	it	ne
   bea44:	4240      	negne	r0, r0
   bea46:	4770      	bx	lr
   bea48:	f04f 0000 	mov.w	r0, #0
   bea4c:	4770      	bx	lr
   bea4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bea52:	d105      	bne.n	bea60 <__aeabi_d2iz+0x48>
   bea54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bea58:	bf08      	it	eq
   bea5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bea5e:	4770      	bx	lr
   bea60:	f04f 0000 	mov.w	r0, #0
   bea64:	4770      	bx	lr
   bea66:	bf00      	nop

000bea68 <__aeabi_d2uiz>:
   bea68:	004a      	lsls	r2, r1, #1
   bea6a:	d211      	bcs.n	bea90 <__aeabi_d2uiz+0x28>
   bea6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bea70:	d211      	bcs.n	bea96 <__aeabi_d2uiz+0x2e>
   bea72:	d50d      	bpl.n	bea90 <__aeabi_d2uiz+0x28>
   bea74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bea78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bea7c:	d40e      	bmi.n	bea9c <__aeabi_d2uiz+0x34>
   bea7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bea82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bea86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bea8a:	fa23 f002 	lsr.w	r0, r3, r2
   bea8e:	4770      	bx	lr
   bea90:	f04f 0000 	mov.w	r0, #0
   bea94:	4770      	bx	lr
   bea96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bea9a:	d102      	bne.n	beaa2 <__aeabi_d2uiz+0x3a>
   bea9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   beaa0:	4770      	bx	lr
   beaa2:	f04f 0000 	mov.w	r0, #0
   beaa6:	4770      	bx	lr

000beaa8 <asctime_r>:
   beaa8:	b510      	push	{r4, lr}
   beaaa:	460c      	mov	r4, r1
   beaac:	6941      	ldr	r1, [r0, #20]
   beaae:	6903      	ldr	r3, [r0, #16]
   beab0:	6982      	ldr	r2, [r0, #24]
   beab2:	b086      	sub	sp, #24
   beab4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   beab8:	9104      	str	r1, [sp, #16]
   beaba:	6801      	ldr	r1, [r0, #0]
   beabc:	9103      	str	r1, [sp, #12]
   beabe:	6841      	ldr	r1, [r0, #4]
   beac0:	9102      	str	r1, [sp, #8]
   beac2:	6881      	ldr	r1, [r0, #8]
   beac4:	9101      	str	r1, [sp, #4]
   beac6:	68c1      	ldr	r1, [r0, #12]
   beac8:	9100      	str	r1, [sp, #0]
   beaca:	4907      	ldr	r1, [pc, #28]	; (beae8 <asctime_r+0x40>)
   beacc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bead0:	440b      	add	r3, r1
   bead2:	4906      	ldr	r1, [pc, #24]	; (beaec <asctime_r+0x44>)
   bead4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bead8:	440a      	add	r2, r1
   beada:	4620      	mov	r0, r4
   beadc:	4904      	ldr	r1, [pc, #16]	; (beaf0 <asctime_r+0x48>)
   beade:	f7fc f925 	bl	bad2c <siprintf>
   beae2:	4620      	mov	r0, r4
   beae4:	b006      	add	sp, #24
   beae6:	bd10      	pop	{r4, pc}
   beae8:	000c07ba 	.word	0x000c07ba
   beaec:	000c07a5 	.word	0x000c07a5
   beaf0:	000c0785 	.word	0x000c0785

000beaf4 <atexit>:
   beaf4:	2300      	movs	r3, #0
   beaf6:	4601      	mov	r1, r0
   beaf8:	461a      	mov	r2, r3
   beafa:	4618      	mov	r0, r3
   beafc:	f000 ba70 	b.w	befe0 <__register_exitproc>

000beb00 <gmtime>:
   beb00:	b538      	push	{r3, r4, r5, lr}
   beb02:	4b0b      	ldr	r3, [pc, #44]	; (beb30 <gmtime+0x30>)
   beb04:	681d      	ldr	r5, [r3, #0]
   beb06:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   beb08:	4604      	mov	r4, r0
   beb0a:	b953      	cbnz	r3, beb22 <gmtime+0x22>
   beb0c:	2024      	movs	r0, #36	; 0x24
   beb0e:	f7fc f8f5 	bl	bacfc <malloc>
   beb12:	4602      	mov	r2, r0
   beb14:	63e8      	str	r0, [r5, #60]	; 0x3c
   beb16:	b920      	cbnz	r0, beb22 <gmtime+0x22>
   beb18:	4b06      	ldr	r3, [pc, #24]	; (beb34 <gmtime+0x34>)
   beb1a:	4807      	ldr	r0, [pc, #28]	; (beb38 <gmtime+0x38>)
   beb1c:	2139      	movs	r1, #57	; 0x39
   beb1e:	f7fc f93d 	bl	bad9c <__assert_func>
   beb22:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   beb24:	4620      	mov	r0, r4
   beb26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   beb2a:	f7fc b957 	b.w	baddc <gmtime_r>
   beb2e:	bf00      	nop
   beb30:	2003dedc 	.word	0x2003dedc
   beb34:	000c07de 	.word	0x000c07de
   beb38:	000c07f5 	.word	0x000c07f5

000beb3c <isprint>:
   beb3c:	4b02      	ldr	r3, [pc, #8]	; (beb48 <isprint+0xc>)
   beb3e:	4418      	add	r0, r3
   beb40:	7840      	ldrb	r0, [r0, #1]
   beb42:	f000 0097 	and.w	r0, r0, #151	; 0x97
   beb46:	4770      	bx	lr
   beb48:	000c08a7 	.word	0x000c08a7

000beb4c <memcpy>:
   beb4c:	440a      	add	r2, r1
   beb4e:	4291      	cmp	r1, r2
   beb50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   beb54:	d100      	bne.n	beb58 <memcpy+0xc>
   beb56:	4770      	bx	lr
   beb58:	b510      	push	{r4, lr}
   beb5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   beb5e:	f803 4f01 	strb.w	r4, [r3, #1]!
   beb62:	4291      	cmp	r1, r2
   beb64:	d1f9      	bne.n	beb5a <memcpy+0xe>
   beb66:	bd10      	pop	{r4, pc}

000beb68 <memmove>:
   beb68:	4288      	cmp	r0, r1
   beb6a:	b510      	push	{r4, lr}
   beb6c:	eb01 0402 	add.w	r4, r1, r2
   beb70:	d902      	bls.n	beb78 <memmove+0x10>
   beb72:	4284      	cmp	r4, r0
   beb74:	4623      	mov	r3, r4
   beb76:	d807      	bhi.n	beb88 <memmove+0x20>
   beb78:	1e43      	subs	r3, r0, #1
   beb7a:	42a1      	cmp	r1, r4
   beb7c:	d008      	beq.n	beb90 <memmove+0x28>
   beb7e:	f811 2b01 	ldrb.w	r2, [r1], #1
   beb82:	f803 2f01 	strb.w	r2, [r3, #1]!
   beb86:	e7f8      	b.n	beb7a <memmove+0x12>
   beb88:	4402      	add	r2, r0
   beb8a:	4601      	mov	r1, r0
   beb8c:	428a      	cmp	r2, r1
   beb8e:	d100      	bne.n	beb92 <memmove+0x2a>
   beb90:	bd10      	pop	{r4, pc}
   beb92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   beb96:	f802 4d01 	strb.w	r4, [r2, #-1]!
   beb9a:	e7f7      	b.n	beb8c <memmove+0x24>

000beb9c <memset>:
   beb9c:	4402      	add	r2, r0
   beb9e:	4603      	mov	r3, r0
   beba0:	4293      	cmp	r3, r2
   beba2:	d100      	bne.n	beba6 <memset+0xa>
   beba4:	4770      	bx	lr
   beba6:	f803 1b01 	strb.w	r1, [r3], #1
   bebaa:	e7f9      	b.n	beba0 <memset+0x4>

000bebac <srand>:
   bebac:	b538      	push	{r3, r4, r5, lr}
   bebae:	4b10      	ldr	r3, [pc, #64]	; (bebf0 <srand+0x44>)
   bebb0:	681d      	ldr	r5, [r3, #0]
   bebb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bebb4:	4604      	mov	r4, r0
   bebb6:	b9b3      	cbnz	r3, bebe6 <srand+0x3a>
   bebb8:	2018      	movs	r0, #24
   bebba:	f7fc f89f 	bl	bacfc <malloc>
   bebbe:	4602      	mov	r2, r0
   bebc0:	63a8      	str	r0, [r5, #56]	; 0x38
   bebc2:	b920      	cbnz	r0, bebce <srand+0x22>
   bebc4:	4b0b      	ldr	r3, [pc, #44]	; (bebf4 <srand+0x48>)
   bebc6:	480c      	ldr	r0, [pc, #48]	; (bebf8 <srand+0x4c>)
   bebc8:	2142      	movs	r1, #66	; 0x42
   bebca:	f7fc f8e7 	bl	bad9c <__assert_func>
   bebce:	490b      	ldr	r1, [pc, #44]	; (bebfc <srand+0x50>)
   bebd0:	4b0b      	ldr	r3, [pc, #44]	; (bec00 <srand+0x54>)
   bebd2:	e9c0 1300 	strd	r1, r3, [r0]
   bebd6:	4b0b      	ldr	r3, [pc, #44]	; (bec04 <srand+0x58>)
   bebd8:	6083      	str	r3, [r0, #8]
   bebda:	230b      	movs	r3, #11
   bebdc:	8183      	strh	r3, [r0, #12]
   bebde:	2100      	movs	r1, #0
   bebe0:	2001      	movs	r0, #1
   bebe2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bebe6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bebe8:	2200      	movs	r2, #0
   bebea:	611c      	str	r4, [r3, #16]
   bebec:	615a      	str	r2, [r3, #20]
   bebee:	bd38      	pop	{r3, r4, r5, pc}
   bebf0:	2003dedc 	.word	0x2003dedc
   bebf4:	000c07de 	.word	0x000c07de
   bebf8:	000c084e 	.word	0x000c084e
   bebfc:	abcd330e 	.word	0xabcd330e
   bec00:	e66d1234 	.word	0xe66d1234
   bec04:	0005deec 	.word	0x0005deec

000bec08 <rand>:
   bec08:	4b16      	ldr	r3, [pc, #88]	; (bec64 <rand+0x5c>)
   bec0a:	b510      	push	{r4, lr}
   bec0c:	681c      	ldr	r4, [r3, #0]
   bec0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bec10:	b9b3      	cbnz	r3, bec40 <rand+0x38>
   bec12:	2018      	movs	r0, #24
   bec14:	f7fc f872 	bl	bacfc <malloc>
   bec18:	63a0      	str	r0, [r4, #56]	; 0x38
   bec1a:	b928      	cbnz	r0, bec28 <rand+0x20>
   bec1c:	4602      	mov	r2, r0
   bec1e:	4b12      	ldr	r3, [pc, #72]	; (bec68 <rand+0x60>)
   bec20:	4812      	ldr	r0, [pc, #72]	; (bec6c <rand+0x64>)
   bec22:	214e      	movs	r1, #78	; 0x4e
   bec24:	f7fc f8ba 	bl	bad9c <__assert_func>
   bec28:	4a11      	ldr	r2, [pc, #68]	; (bec70 <rand+0x68>)
   bec2a:	4b12      	ldr	r3, [pc, #72]	; (bec74 <rand+0x6c>)
   bec2c:	e9c0 2300 	strd	r2, r3, [r0]
   bec30:	4b11      	ldr	r3, [pc, #68]	; (bec78 <rand+0x70>)
   bec32:	6083      	str	r3, [r0, #8]
   bec34:	230b      	movs	r3, #11
   bec36:	8183      	strh	r3, [r0, #12]
   bec38:	2201      	movs	r2, #1
   bec3a:	2300      	movs	r3, #0
   bec3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bec40:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bec42:	4a0e      	ldr	r2, [pc, #56]	; (bec7c <rand+0x74>)
   bec44:	6920      	ldr	r0, [r4, #16]
   bec46:	6963      	ldr	r3, [r4, #20]
   bec48:	490d      	ldr	r1, [pc, #52]	; (bec80 <rand+0x78>)
   bec4a:	4342      	muls	r2, r0
   bec4c:	fb01 2203 	mla	r2, r1, r3, r2
   bec50:	fba0 0101 	umull	r0, r1, r0, r1
   bec54:	1c43      	adds	r3, r0, #1
   bec56:	eb42 0001 	adc.w	r0, r2, r1
   bec5a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bec5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bec62:	bd10      	pop	{r4, pc}
   bec64:	2003dedc 	.word	0x2003dedc
   bec68:	000c07de 	.word	0x000c07de
   bec6c:	000c084e 	.word	0x000c084e
   bec70:	abcd330e 	.word	0xabcd330e
   bec74:	e66d1234 	.word	0xe66d1234
   bec78:	0005deec 	.word	0x0005deec
   bec7c:	5851f42d 	.word	0x5851f42d
   bec80:	4c957f2d 	.word	0x4c957f2d

000bec84 <strchr>:
   bec84:	b2c9      	uxtb	r1, r1
   bec86:	4603      	mov	r3, r0
   bec88:	f810 2b01 	ldrb.w	r2, [r0], #1
   bec8c:	b11a      	cbz	r2, bec96 <strchr+0x12>
   bec8e:	428a      	cmp	r2, r1
   bec90:	d1f9      	bne.n	bec86 <strchr+0x2>
   bec92:	4618      	mov	r0, r3
   bec94:	4770      	bx	lr
   bec96:	2900      	cmp	r1, #0
   bec98:	bf18      	it	ne
   bec9a:	2300      	movne	r3, #0
   bec9c:	e7f9      	b.n	bec92 <strchr+0xe>

000bec9e <strchrnul>:
   bec9e:	b510      	push	{r4, lr}
   beca0:	4604      	mov	r4, r0
   beca2:	f7ff ffef 	bl	bec84 <strchr>
   beca6:	b918      	cbnz	r0, becb0 <strchrnul+0x12>
   beca8:	4620      	mov	r0, r4
   becaa:	f000 f832 	bl	bed12 <strlen>
   becae:	4420      	add	r0, r4
   becb0:	bd10      	pop	{r4, pc}

000becb2 <strcmp>:
   becb2:	f810 2b01 	ldrb.w	r2, [r0], #1
   becb6:	f811 3b01 	ldrb.w	r3, [r1], #1
   becba:	2a01      	cmp	r2, #1
   becbc:	bf28      	it	cs
   becbe:	429a      	cmpcs	r2, r3
   becc0:	d0f7      	beq.n	becb2 <strcmp>
   becc2:	1ad0      	subs	r0, r2, r3
   becc4:	4770      	bx	lr

000becc6 <strcpy>:
   becc6:	4603      	mov	r3, r0
   becc8:	f811 2b01 	ldrb.w	r2, [r1], #1
   beccc:	f803 2b01 	strb.w	r2, [r3], #1
   becd0:	2a00      	cmp	r2, #0
   becd2:	d1f9      	bne.n	becc8 <strcpy+0x2>
   becd4:	4770      	bx	lr
	...

000becd8 <strdup>:
   becd8:	4b02      	ldr	r3, [pc, #8]	; (bece4 <strdup+0xc>)
   becda:	4601      	mov	r1, r0
   becdc:	6818      	ldr	r0, [r3, #0]
   becde:	f000 b803 	b.w	bece8 <_strdup_r>
   bece2:	bf00      	nop
   bece4:	2003dedc 	.word	0x2003dedc

000bece8 <_strdup_r>:
   bece8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   becea:	4604      	mov	r4, r0
   becec:	4608      	mov	r0, r1
   becee:	460d      	mov	r5, r1
   becf0:	f000 f80f 	bl	bed12 <strlen>
   becf4:	1c42      	adds	r2, r0, #1
   becf6:	4611      	mov	r1, r2
   becf8:	4620      	mov	r0, r4
   becfa:	9201      	str	r2, [sp, #4]
   becfc:	f7fc f83e 	bl	bad7c <_malloc_r>
   bed00:	4604      	mov	r4, r0
   bed02:	b118      	cbz	r0, bed0c <_strdup_r+0x24>
   bed04:	9a01      	ldr	r2, [sp, #4]
   bed06:	4629      	mov	r1, r5
   bed08:	f7ff ff20 	bl	beb4c <memcpy>
   bed0c:	4620      	mov	r0, r4
   bed0e:	b003      	add	sp, #12
   bed10:	bd30      	pop	{r4, r5, pc}

000bed12 <strlen>:
   bed12:	4603      	mov	r3, r0
   bed14:	f813 2b01 	ldrb.w	r2, [r3], #1
   bed18:	2a00      	cmp	r2, #0
   bed1a:	d1fb      	bne.n	bed14 <strlen+0x2>
   bed1c:	1a18      	subs	r0, r3, r0
   bed1e:	3801      	subs	r0, #1
   bed20:	4770      	bx	lr

000bed22 <strncmp>:
   bed22:	b510      	push	{r4, lr}
   bed24:	b17a      	cbz	r2, bed46 <strncmp+0x24>
   bed26:	4603      	mov	r3, r0
   bed28:	3901      	subs	r1, #1
   bed2a:	1884      	adds	r4, r0, r2
   bed2c:	f813 0b01 	ldrb.w	r0, [r3], #1
   bed30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bed34:	4290      	cmp	r0, r2
   bed36:	d101      	bne.n	bed3c <strncmp+0x1a>
   bed38:	42a3      	cmp	r3, r4
   bed3a:	d101      	bne.n	bed40 <strncmp+0x1e>
   bed3c:	1a80      	subs	r0, r0, r2
   bed3e:	bd10      	pop	{r4, pc}
   bed40:	2800      	cmp	r0, #0
   bed42:	d1f3      	bne.n	bed2c <strncmp+0xa>
   bed44:	e7fa      	b.n	bed3c <strncmp+0x1a>
   bed46:	4610      	mov	r0, r2
   bed48:	e7f9      	b.n	bed3e <strncmp+0x1c>

000bed4a <strncpy>:
   bed4a:	b510      	push	{r4, lr}
   bed4c:	3901      	subs	r1, #1
   bed4e:	4603      	mov	r3, r0
   bed50:	b132      	cbz	r2, bed60 <strncpy+0x16>
   bed52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bed56:	f803 4b01 	strb.w	r4, [r3], #1
   bed5a:	3a01      	subs	r2, #1
   bed5c:	2c00      	cmp	r4, #0
   bed5e:	d1f7      	bne.n	bed50 <strncpy+0x6>
   bed60:	441a      	add	r2, r3
   bed62:	2100      	movs	r1, #0
   bed64:	4293      	cmp	r3, r2
   bed66:	d100      	bne.n	bed6a <strncpy+0x20>
   bed68:	bd10      	pop	{r4, pc}
   bed6a:	f803 1b01 	strb.w	r1, [r3], #1
   bed6e:	e7f9      	b.n	bed64 <strncpy+0x1a>

000bed70 <strrchr>:
   bed70:	b538      	push	{r3, r4, r5, lr}
   bed72:	4603      	mov	r3, r0
   bed74:	460c      	mov	r4, r1
   bed76:	b969      	cbnz	r1, bed94 <strrchr+0x24>
   bed78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bed7c:	f7ff bf82 	b.w	bec84 <strchr>
   bed80:	1c43      	adds	r3, r0, #1
   bed82:	4605      	mov	r5, r0
   bed84:	4621      	mov	r1, r4
   bed86:	4618      	mov	r0, r3
   bed88:	f7ff ff7c 	bl	bec84 <strchr>
   bed8c:	2800      	cmp	r0, #0
   bed8e:	d1f7      	bne.n	bed80 <strrchr+0x10>
   bed90:	4628      	mov	r0, r5
   bed92:	bd38      	pop	{r3, r4, r5, pc}
   bed94:	2500      	movs	r5, #0
   bed96:	e7f5      	b.n	bed84 <strrchr+0x14>

000bed98 <__strtok_r>:
   bed98:	b5f0      	push	{r4, r5, r6, r7, lr}
   bed9a:	b908      	cbnz	r0, beda0 <__strtok_r+0x8>
   bed9c:	6810      	ldr	r0, [r2, #0]
   bed9e:	b188      	cbz	r0, bedc4 <__strtok_r+0x2c>
   beda0:	4604      	mov	r4, r0
   beda2:	4620      	mov	r0, r4
   beda4:	f814 5b01 	ldrb.w	r5, [r4], #1
   beda8:	460f      	mov	r7, r1
   bedaa:	f817 6b01 	ldrb.w	r6, [r7], #1
   bedae:	b91e      	cbnz	r6, bedb8 <__strtok_r+0x20>
   bedb0:	b965      	cbnz	r5, bedcc <__strtok_r+0x34>
   bedb2:	6015      	str	r5, [r2, #0]
   bedb4:	4628      	mov	r0, r5
   bedb6:	e005      	b.n	bedc4 <__strtok_r+0x2c>
   bedb8:	42b5      	cmp	r5, r6
   bedba:	d1f6      	bne.n	bedaa <__strtok_r+0x12>
   bedbc:	2b00      	cmp	r3, #0
   bedbe:	d1f0      	bne.n	beda2 <__strtok_r+0xa>
   bedc0:	6014      	str	r4, [r2, #0]
   bedc2:	7003      	strb	r3, [r0, #0]
   bedc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bedc6:	461c      	mov	r4, r3
   bedc8:	e00c      	b.n	bede4 <__strtok_r+0x4c>
   bedca:	b915      	cbnz	r5, bedd2 <__strtok_r+0x3a>
   bedcc:	f814 3b01 	ldrb.w	r3, [r4], #1
   bedd0:	460e      	mov	r6, r1
   bedd2:	f816 5b01 	ldrb.w	r5, [r6], #1
   bedd6:	42ab      	cmp	r3, r5
   bedd8:	d1f7      	bne.n	bedca <__strtok_r+0x32>
   bedda:	2b00      	cmp	r3, #0
   beddc:	d0f3      	beq.n	bedc6 <__strtok_r+0x2e>
   bedde:	2300      	movs	r3, #0
   bede0:	f804 3c01 	strb.w	r3, [r4, #-1]
   bede4:	6014      	str	r4, [r2, #0]
   bede6:	e7ed      	b.n	bedc4 <__strtok_r+0x2c>

000bede8 <strtok_r>:
   bede8:	2301      	movs	r3, #1
   bedea:	f7ff bfd5 	b.w	bed98 <__strtok_r>
	...

000bedf0 <_strtol_l.constprop.0>:
   bedf0:	2b01      	cmp	r3, #1
   bedf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bedf6:	d001      	beq.n	bedfc <_strtol_l.constprop.0+0xc>
   bedf8:	2b24      	cmp	r3, #36	; 0x24
   bedfa:	d906      	bls.n	bee0a <_strtol_l.constprop.0+0x1a>
   bedfc:	f7fb ffc6 	bl	bad8c <__errno>
   bee00:	2316      	movs	r3, #22
   bee02:	6003      	str	r3, [r0, #0]
   bee04:	2000      	movs	r0, #0
   bee06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bee0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; beef0 <_strtol_l.constprop.0+0x100>
   bee0e:	460d      	mov	r5, r1
   bee10:	462e      	mov	r6, r5
   bee12:	f815 4b01 	ldrb.w	r4, [r5], #1
   bee16:	f814 700c 	ldrb.w	r7, [r4, ip]
   bee1a:	f017 0708 	ands.w	r7, r7, #8
   bee1e:	d1f7      	bne.n	bee10 <_strtol_l.constprop.0+0x20>
   bee20:	2c2d      	cmp	r4, #45	; 0x2d
   bee22:	d132      	bne.n	bee8a <_strtol_l.constprop.0+0x9a>
   bee24:	782c      	ldrb	r4, [r5, #0]
   bee26:	2701      	movs	r7, #1
   bee28:	1cb5      	adds	r5, r6, #2
   bee2a:	2b00      	cmp	r3, #0
   bee2c:	d05b      	beq.n	beee6 <_strtol_l.constprop.0+0xf6>
   bee2e:	2b10      	cmp	r3, #16
   bee30:	d109      	bne.n	bee46 <_strtol_l.constprop.0+0x56>
   bee32:	2c30      	cmp	r4, #48	; 0x30
   bee34:	d107      	bne.n	bee46 <_strtol_l.constprop.0+0x56>
   bee36:	782c      	ldrb	r4, [r5, #0]
   bee38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bee3c:	2c58      	cmp	r4, #88	; 0x58
   bee3e:	d14d      	bne.n	beedc <_strtol_l.constprop.0+0xec>
   bee40:	786c      	ldrb	r4, [r5, #1]
   bee42:	2310      	movs	r3, #16
   bee44:	3502      	adds	r5, #2
   bee46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bee4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bee4e:	f04f 0c00 	mov.w	ip, #0
   bee52:	fbb8 f9f3 	udiv	r9, r8, r3
   bee56:	4666      	mov	r6, ip
   bee58:	fb03 8a19 	mls	sl, r3, r9, r8
   bee5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bee60:	f1be 0f09 	cmp.w	lr, #9
   bee64:	d816      	bhi.n	bee94 <_strtol_l.constprop.0+0xa4>
   bee66:	4674      	mov	r4, lr
   bee68:	42a3      	cmp	r3, r4
   bee6a:	dd24      	ble.n	beeb6 <_strtol_l.constprop.0+0xc6>
   bee6c:	f1bc 0f00 	cmp.w	ip, #0
   bee70:	db1e      	blt.n	beeb0 <_strtol_l.constprop.0+0xc0>
   bee72:	45b1      	cmp	r9, r6
   bee74:	d31c      	bcc.n	beeb0 <_strtol_l.constprop.0+0xc0>
   bee76:	d101      	bne.n	bee7c <_strtol_l.constprop.0+0x8c>
   bee78:	45a2      	cmp	sl, r4
   bee7a:	db19      	blt.n	beeb0 <_strtol_l.constprop.0+0xc0>
   bee7c:	fb06 4603 	mla	r6, r6, r3, r4
   bee80:	f04f 0c01 	mov.w	ip, #1
   bee84:	f815 4b01 	ldrb.w	r4, [r5], #1
   bee88:	e7e8      	b.n	bee5c <_strtol_l.constprop.0+0x6c>
   bee8a:	2c2b      	cmp	r4, #43	; 0x2b
   bee8c:	bf04      	itt	eq
   bee8e:	782c      	ldrbeq	r4, [r5, #0]
   bee90:	1cb5      	addeq	r5, r6, #2
   bee92:	e7ca      	b.n	bee2a <_strtol_l.constprop.0+0x3a>
   bee94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bee98:	f1be 0f19 	cmp.w	lr, #25
   bee9c:	d801      	bhi.n	beea2 <_strtol_l.constprop.0+0xb2>
   bee9e:	3c37      	subs	r4, #55	; 0x37
   beea0:	e7e2      	b.n	bee68 <_strtol_l.constprop.0+0x78>
   beea2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   beea6:	f1be 0f19 	cmp.w	lr, #25
   beeaa:	d804      	bhi.n	beeb6 <_strtol_l.constprop.0+0xc6>
   beeac:	3c57      	subs	r4, #87	; 0x57
   beeae:	e7db      	b.n	bee68 <_strtol_l.constprop.0+0x78>
   beeb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   beeb4:	e7e6      	b.n	bee84 <_strtol_l.constprop.0+0x94>
   beeb6:	f1bc 0f00 	cmp.w	ip, #0
   beeba:	da05      	bge.n	beec8 <_strtol_l.constprop.0+0xd8>
   beebc:	2322      	movs	r3, #34	; 0x22
   beebe:	6003      	str	r3, [r0, #0]
   beec0:	4646      	mov	r6, r8
   beec2:	b942      	cbnz	r2, beed6 <_strtol_l.constprop.0+0xe6>
   beec4:	4630      	mov	r0, r6
   beec6:	e79e      	b.n	bee06 <_strtol_l.constprop.0+0x16>
   beec8:	b107      	cbz	r7, beecc <_strtol_l.constprop.0+0xdc>
   beeca:	4276      	negs	r6, r6
   beecc:	2a00      	cmp	r2, #0
   beece:	d0f9      	beq.n	beec4 <_strtol_l.constprop.0+0xd4>
   beed0:	f1bc 0f00 	cmp.w	ip, #0
   beed4:	d000      	beq.n	beed8 <_strtol_l.constprop.0+0xe8>
   beed6:	1e69      	subs	r1, r5, #1
   beed8:	6011      	str	r1, [r2, #0]
   beeda:	e7f3      	b.n	beec4 <_strtol_l.constprop.0+0xd4>
   beedc:	2430      	movs	r4, #48	; 0x30
   beede:	2b00      	cmp	r3, #0
   beee0:	d1b1      	bne.n	bee46 <_strtol_l.constprop.0+0x56>
   beee2:	2308      	movs	r3, #8
   beee4:	e7af      	b.n	bee46 <_strtol_l.constprop.0+0x56>
   beee6:	2c30      	cmp	r4, #48	; 0x30
   beee8:	d0a5      	beq.n	bee36 <_strtol_l.constprop.0+0x46>
   beeea:	230a      	movs	r3, #10
   beeec:	e7ab      	b.n	bee46 <_strtol_l.constprop.0+0x56>
   beeee:	bf00      	nop
   beef0:	000c08a8 	.word	0x000c08a8

000beef4 <strtol>:
   beef4:	4613      	mov	r3, r2
   beef6:	460a      	mov	r2, r1
   beef8:	4601      	mov	r1, r0
   beefa:	4802      	ldr	r0, [pc, #8]	; (bef04 <strtol+0x10>)
   beefc:	6800      	ldr	r0, [r0, #0]
   beefe:	f7ff bf77 	b.w	bedf0 <_strtol_l.constprop.0>
   bef02:	bf00      	nop
   bef04:	2003dedc 	.word	0x2003dedc

000bef08 <close>:
   bef08:	4b02      	ldr	r3, [pc, #8]	; (bef14 <close+0xc>)
   bef0a:	4601      	mov	r1, r0
   bef0c:	6818      	ldr	r0, [r3, #0]
   bef0e:	f000 b8c9 	b.w	bf0a4 <_close_r>
   bef12:	bf00      	nop
   bef14:	2003dedc 	.word	0x2003dedc

000bef18 <fstat>:
   bef18:	4b02      	ldr	r3, [pc, #8]	; (bef24 <fstat+0xc>)
   bef1a:	460a      	mov	r2, r1
   bef1c:	4601      	mov	r1, r0
   bef1e:	6818      	ldr	r0, [r3, #0]
   bef20:	f000 b8d0 	b.w	bf0c4 <_fstat_r>
   bef24:	2003dedc 	.word	0x2003dedc

000bef28 <lseek>:
   bef28:	4613      	mov	r3, r2
   bef2a:	460a      	mov	r2, r1
   bef2c:	4601      	mov	r1, r0
   bef2e:	4802      	ldr	r0, [pc, #8]	; (bef38 <lseek+0x10>)
   bef30:	6800      	ldr	r0, [r0, #0]
   bef32:	f000 b8dd 	b.w	bf0f0 <_lseek_r>
   bef36:	bf00      	nop
   bef38:	2003dedc 	.word	0x2003dedc

000bef3c <open>:
   bef3c:	b40e      	push	{r1, r2, r3}
   bef3e:	b503      	push	{r0, r1, lr}
   bef40:	ab03      	add	r3, sp, #12
   bef42:	4601      	mov	r1, r0
   bef44:	4806      	ldr	r0, [pc, #24]	; (bef60 <open+0x24>)
   bef46:	f853 2b04 	ldr.w	r2, [r3], #4
   bef4a:	9301      	str	r3, [sp, #4]
   bef4c:	6800      	ldr	r0, [r0, #0]
   bef4e:	9b04      	ldr	r3, [sp, #16]
   bef50:	f000 f8e0 	bl	bf114 <_open_r>
   bef54:	b002      	add	sp, #8
   bef56:	f85d eb04 	ldr.w	lr, [sp], #4
   bef5a:	b003      	add	sp, #12
   bef5c:	4770      	bx	lr
   bef5e:	bf00      	nop
   bef60:	2003dedc 	.word	0x2003dedc

000bef64 <read>:
   bef64:	4613      	mov	r3, r2
   bef66:	460a      	mov	r2, r1
   bef68:	4601      	mov	r1, r0
   bef6a:	4802      	ldr	r0, [pc, #8]	; (bef74 <read+0x10>)
   bef6c:	6800      	ldr	r0, [r0, #0]
   bef6e:	f000 b8e3 	b.w	bf138 <_read_r>
   bef72:	bf00      	nop
   bef74:	2003dedc 	.word	0x2003dedc

000bef78 <unlink>:
   bef78:	4b02      	ldr	r3, [pc, #8]	; (bef84 <unlink+0xc>)
   bef7a:	4601      	mov	r1, r0
   bef7c:	6818      	ldr	r0, [r3, #0]
   bef7e:	f000 b80d 	b.w	bef9c <_unlink_r>
   bef82:	bf00      	nop
   bef84:	2003dedc 	.word	0x2003dedc

000bef88 <write>:
   bef88:	4613      	mov	r3, r2
   bef8a:	460a      	mov	r2, r1
   bef8c:	4601      	mov	r1, r0
   bef8e:	4802      	ldr	r0, [pc, #8]	; (bef98 <write+0x10>)
   bef90:	6800      	ldr	r0, [r0, #0]
   bef92:	f000 b813 	b.w	befbc <_write_r>
   bef96:	bf00      	nop
   bef98:	2003dedc 	.word	0x2003dedc

000bef9c <_unlink_r>:
   bef9c:	b538      	push	{r3, r4, r5, lr}
   bef9e:	4d06      	ldr	r5, [pc, #24]	; (befb8 <_unlink_r+0x1c>)
   befa0:	2300      	movs	r3, #0
   befa2:	4604      	mov	r4, r0
   befa4:	4608      	mov	r0, r1
   befa6:	602b      	str	r3, [r5, #0]
   befa8:	f7fb fc8c 	bl	ba8c4 <_unlink>
   befac:	1c43      	adds	r3, r0, #1
   befae:	d102      	bne.n	befb6 <_unlink_r+0x1a>
   befb0:	682b      	ldr	r3, [r5, #0]
   befb2:	b103      	cbz	r3, befb6 <_unlink_r+0x1a>
   befb4:	6023      	str	r3, [r4, #0]
   befb6:	bd38      	pop	{r3, r4, r5, pc}
   befb8:	2003e7f0 	.word	0x2003e7f0

000befbc <_write_r>:
   befbc:	b538      	push	{r3, r4, r5, lr}
   befbe:	4d07      	ldr	r5, [pc, #28]	; (befdc <_write_r+0x20>)
   befc0:	4604      	mov	r4, r0
   befc2:	4608      	mov	r0, r1
   befc4:	4611      	mov	r1, r2
   befc6:	2200      	movs	r2, #0
   befc8:	602a      	str	r2, [r5, #0]
   befca:	461a      	mov	r2, r3
   befcc:	f7fb fc42 	bl	ba854 <_write>
   befd0:	1c43      	adds	r3, r0, #1
   befd2:	d102      	bne.n	befda <_write_r+0x1e>
   befd4:	682b      	ldr	r3, [r5, #0]
   befd6:	b103      	cbz	r3, befda <_write_r+0x1e>
   befd8:	6023      	str	r3, [r4, #0]
   befda:	bd38      	pop	{r3, r4, r5, pc}
   befdc:	2003e7f0 	.word	0x2003e7f0

000befe0 <__register_exitproc>:
   befe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   befe4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf0a0 <__register_exitproc+0xc0>
   befe8:	4606      	mov	r6, r0
   befea:	f8d8 0000 	ldr.w	r0, [r8]
   befee:	461f      	mov	r7, r3
   beff0:	460d      	mov	r5, r1
   beff2:	4691      	mov	r9, r2
   beff4:	f000 f878 	bl	bf0e8 <__retarget_lock_acquire_recursive>
   beff8:	4b25      	ldr	r3, [pc, #148]	; (bf090 <__register_exitproc+0xb0>)
   beffa:	681c      	ldr	r4, [r3, #0]
   beffc:	b934      	cbnz	r4, bf00c <__register_exitproc+0x2c>
   beffe:	4c25      	ldr	r4, [pc, #148]	; (bf094 <__register_exitproc+0xb4>)
   bf000:	601c      	str	r4, [r3, #0]
   bf002:	4b25      	ldr	r3, [pc, #148]	; (bf098 <__register_exitproc+0xb8>)
   bf004:	b113      	cbz	r3, bf00c <__register_exitproc+0x2c>
   bf006:	681b      	ldr	r3, [r3, #0]
   bf008:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf00c:	6863      	ldr	r3, [r4, #4]
   bf00e:	2b1f      	cmp	r3, #31
   bf010:	dd07      	ble.n	bf022 <__register_exitproc+0x42>
   bf012:	f8d8 0000 	ldr.w	r0, [r8]
   bf016:	f000 f869 	bl	bf0ec <__retarget_lock_release_recursive>
   bf01a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf022:	b34e      	cbz	r6, bf078 <__register_exitproc+0x98>
   bf024:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf028:	b988      	cbnz	r0, bf04e <__register_exitproc+0x6e>
   bf02a:	4b1c      	ldr	r3, [pc, #112]	; (bf09c <__register_exitproc+0xbc>)
   bf02c:	b923      	cbnz	r3, bf038 <__register_exitproc+0x58>
   bf02e:	f8d8 0000 	ldr.w	r0, [r8]
   bf032:	f000 f85a 	bl	bf0ea <__retarget_lock_release>
   bf036:	e7f0      	b.n	bf01a <__register_exitproc+0x3a>
   bf038:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf03c:	f7fb fe5e 	bl	bacfc <malloc>
   bf040:	2800      	cmp	r0, #0
   bf042:	d0f4      	beq.n	bf02e <__register_exitproc+0x4e>
   bf044:	2300      	movs	r3, #0
   bf046:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf04a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf04e:	6863      	ldr	r3, [r4, #4]
   bf050:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf054:	2201      	movs	r2, #1
   bf056:	409a      	lsls	r2, r3
   bf058:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf05c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf060:	4313      	orrs	r3, r2
   bf062:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf066:	2e02      	cmp	r6, #2
   bf068:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf06c:	bf02      	ittt	eq
   bf06e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf072:	4313      	orreq	r3, r2
   bf074:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf078:	6863      	ldr	r3, [r4, #4]
   bf07a:	f8d8 0000 	ldr.w	r0, [r8]
   bf07e:	1c5a      	adds	r2, r3, #1
   bf080:	3302      	adds	r3, #2
   bf082:	6062      	str	r2, [r4, #4]
   bf084:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf088:	f000 f830 	bl	bf0ec <__retarget_lock_release_recursive>
   bf08c:	2000      	movs	r0, #0
   bf08e:	e7c6      	b.n	bf01e <__register_exitproc+0x3e>
   bf090:	2003e7e8 	.word	0x2003e7e8
   bf094:	2003e75c 	.word	0x2003e75c
   bf098:	00000000 	.word	0x00000000
   bf09c:	000bacfd 	.word	0x000bacfd
   bf0a0:	2003df40 	.word	0x2003df40

000bf0a4 <_close_r>:
   bf0a4:	b538      	push	{r3, r4, r5, lr}
   bf0a6:	4d06      	ldr	r5, [pc, #24]	; (bf0c0 <_close_r+0x1c>)
   bf0a8:	2300      	movs	r3, #0
   bf0aa:	4604      	mov	r4, r0
   bf0ac:	4608      	mov	r0, r1
   bf0ae:	602b      	str	r3, [r5, #0]
   bf0b0:	f7fb fbe0 	bl	ba874 <_close>
   bf0b4:	1c43      	adds	r3, r0, #1
   bf0b6:	d102      	bne.n	bf0be <_close_r+0x1a>
   bf0b8:	682b      	ldr	r3, [r5, #0]
   bf0ba:	b103      	cbz	r3, bf0be <_close_r+0x1a>
   bf0bc:	6023      	str	r3, [r4, #0]
   bf0be:	bd38      	pop	{r3, r4, r5, pc}
   bf0c0:	2003e7f0 	.word	0x2003e7f0

000bf0c4 <_fstat_r>:
   bf0c4:	b538      	push	{r3, r4, r5, lr}
   bf0c6:	4d07      	ldr	r5, [pc, #28]	; (bf0e4 <_fstat_r+0x20>)
   bf0c8:	2300      	movs	r3, #0
   bf0ca:	4604      	mov	r4, r0
   bf0cc:	4608      	mov	r0, r1
   bf0ce:	4611      	mov	r1, r2
   bf0d0:	602b      	str	r3, [r5, #0]
   bf0d2:	f7fb fbd7 	bl	ba884 <_fstat>
   bf0d6:	1c43      	adds	r3, r0, #1
   bf0d8:	d102      	bne.n	bf0e0 <_fstat_r+0x1c>
   bf0da:	682b      	ldr	r3, [r5, #0]
   bf0dc:	b103      	cbz	r3, bf0e0 <_fstat_r+0x1c>
   bf0de:	6023      	str	r3, [r4, #0]
   bf0e0:	bd38      	pop	{r3, r4, r5, pc}
   bf0e2:	bf00      	nop
   bf0e4:	2003e7f0 	.word	0x2003e7f0

000bf0e8 <__retarget_lock_acquire_recursive>:
   bf0e8:	4770      	bx	lr

000bf0ea <__retarget_lock_release>:
   bf0ea:	4770      	bx	lr

000bf0ec <__retarget_lock_release_recursive>:
   bf0ec:	4770      	bx	lr
	...

000bf0f0 <_lseek_r>:
   bf0f0:	b538      	push	{r3, r4, r5, lr}
   bf0f2:	4d07      	ldr	r5, [pc, #28]	; (bf110 <_lseek_r+0x20>)
   bf0f4:	4604      	mov	r4, r0
   bf0f6:	4608      	mov	r0, r1
   bf0f8:	4611      	mov	r1, r2
   bf0fa:	2200      	movs	r2, #0
   bf0fc:	602a      	str	r2, [r5, #0]
   bf0fe:	461a      	mov	r2, r3
   bf100:	f7fb fbc8 	bl	ba894 <_lseek>
   bf104:	1c43      	adds	r3, r0, #1
   bf106:	d102      	bne.n	bf10e <_lseek_r+0x1e>
   bf108:	682b      	ldr	r3, [r5, #0]
   bf10a:	b103      	cbz	r3, bf10e <_lseek_r+0x1e>
   bf10c:	6023      	str	r3, [r4, #0]
   bf10e:	bd38      	pop	{r3, r4, r5, pc}
   bf110:	2003e7f0 	.word	0x2003e7f0

000bf114 <_open_r>:
   bf114:	b538      	push	{r3, r4, r5, lr}
   bf116:	4d07      	ldr	r5, [pc, #28]	; (bf134 <_open_r+0x20>)
   bf118:	4604      	mov	r4, r0
   bf11a:	4608      	mov	r0, r1
   bf11c:	4611      	mov	r1, r2
   bf11e:	2200      	movs	r2, #0
   bf120:	602a      	str	r2, [r5, #0]
   bf122:	461a      	mov	r2, r3
   bf124:	f7fb fb8e 	bl	ba844 <_open>
   bf128:	1c43      	adds	r3, r0, #1
   bf12a:	d102      	bne.n	bf132 <_open_r+0x1e>
   bf12c:	682b      	ldr	r3, [r5, #0]
   bf12e:	b103      	cbz	r3, bf132 <_open_r+0x1e>
   bf130:	6023      	str	r3, [r4, #0]
   bf132:	bd38      	pop	{r3, r4, r5, pc}
   bf134:	2003e7f0 	.word	0x2003e7f0

000bf138 <_read_r>:
   bf138:	b538      	push	{r3, r4, r5, lr}
   bf13a:	4d07      	ldr	r5, [pc, #28]	; (bf158 <_read_r+0x20>)
   bf13c:	4604      	mov	r4, r0
   bf13e:	4608      	mov	r0, r1
   bf140:	4611      	mov	r1, r2
   bf142:	2200      	movs	r2, #0
   bf144:	602a      	str	r2, [r5, #0]
   bf146:	461a      	mov	r2, r3
   bf148:	f7fb fb8c 	bl	ba864 <_read>
   bf14c:	1c43      	adds	r3, r0, #1
   bf14e:	d102      	bne.n	bf156 <_read_r+0x1e>
   bf150:	682b      	ldr	r3, [r5, #0]
   bf152:	b103      	cbz	r3, bf156 <_read_r+0x1e>
   bf154:	6023      	str	r3, [r4, #0]
   bf156:	bd38      	pop	{r3, r4, r5, pc}
   bf158:	2003e7f0 	.word	0x2003e7f0

000bf15c <dynalib_user>:
   bf15c:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   bf16c:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bf17c:	72697620 6c617574 696e6900 61662074      virtual.init fa
   bf18c:	64656c69 74655300 676e6974 646f6e20     iled.Setting nod
   bf19c:	756e2065 7265626d 20736120 65746147     e number as Gate
   bf1ac:	00796177 41526f4c 64615220 69206f69     way.LoRA Radio i
   bf1bc:	6974696e 7a696c61 61206465 6f4e2073     nitialized as No
   bf1cc:	754e6564 7265626d 20666f20 61206925     deNumber of %i a
   bf1dc:	4420646e 63697665 20444965 2520666f     nd DeviceID of %
   bf1ec:	6e612069 20612064 6967616d 756e2063     i and a magic nu
   bf1fc:	7265626d 20666f20 44006925 70696365     mber of %i.Decip
   bf20c:	65726568 61642064 72206174 726f7065     hered data repor
   bf21c:	64252074 6f726620 6f6e206d 25206564     t %d from node %
   bf22c:	65530064 7220746e 6f707365 2065736e     d.Sent response 
   bf23c:	63206f74 6e65696c 656d2074 67617373     to client messag
   bf24c:	64252065 6974202c 3d20656d 2c732520     e %d, time = %s,
   bf25c:	78656e20 65722074 74726f70 25203d20      next report = %
   bf26c:	65732075 646e6f63 65520073 6e6f7073     u seconds.Respon
   bf27c:	72206573 69656365 20646576 63637573     se received succ
   bf28c:	66737365 796c6c75 73655200 736e6f70     essfully.Respons
   bf29c:	6f6e2065 63612074 776f6e6b 6764656c     e not acknowledg
   bf2ac:	53006465 20746e65 70736572 65736e6f     ed.Sent response
   bf2bc:	206f7420 65646f4e 2c642520 6d697420      to Node %d, tim
   bf2cc:	203d2065 202c7325 7478656e 70657220     e = %s, next rep
   bf2dc:	2074726f 7525203d 63657320 73646e6f     ort = %u seconds
   bf2ec:	63654400 65687069 20646572 72656c61     .Deciphered aler
   bf2fc:	65722074 74726f70 6f726620 6f6e206d     t report from no
   bf30c:	25206564 65520064 76696563 66206465     de %d.Received f
   bf31c:	206d6f72 65646f6e 20642520 68746977     rom node %d with
   bf32c:	73737220 64253d69 61202d20 20732520      rssi=%d - a %s 
   bf33c:	7373656d 20656761 6c20666f 74676e65     message of lengt
   bf34c:	64252068 646e6120 69617720 20646574     h %d and waited 
   bf35c:	20726f66 20756c25 6365536d 65725000     for %lu mSec.Pre
   bf36c:	69726170 6120676e 6f6e6b63 64656c77     paring acknowled
   bf37c:	656d6567 7720746e 20687469 73206925     gement with %i s
   bf38c:	6e6f6365 52007364 6f707365 6e69646e     econds.Respondin
   bf39c:	73752067 20676e69 20656874 6d207325     g using the %s m
   bf3ac:	61737365 74206567 00657079              essage type.

000bf3b8 <_ZTV14LoRA_Functions>:
	...
   bf3c0:	000b40cd 000b40cf 61636f6c 6974206c     .@...@..local ti
   bf3d0:	203a656d 61207325 6e20646e 20747865     me: %s and next 
   bf3e0:	6e657665 73692074 756c2520 63657320     event is %lu sec
   bf3f0:	73646e6f 61776120 72460079 25206d6f     onds away.From %
   bf400:	6f742073 20732520 68746977 766e6920     s to %s with inv
   bf410:	64696c61 6d697420 72460065 25206d6f     alid time.From %
   bf420:	6f742073 20732520 20726f66 73207525     s to %s for %u s
   bf430:	6e6f6365 46007364 206d6f72 74207325     econds.From %s t
   bf440:	7325206f 656c5300 66207065 2520726f     o %s.Sleep for %
   bf450:	65732069 646e6f63 69742073 6e206c6c     i seconds till n
   bf460:	20747865 6e657665 74612074 20732520     ext event at %s 
   bf470:	68746977 696c2520 65726620 656d2065     with %li free me
   bf480:	79726f6d 6f774100 6120656b 73252074     mory.Awoke at %s
   bf490:	74697720 6c252068 72662069 6d206565      with %li free m
   bf4a0:	726f6d65 61470079 61776574 73692079     emory.Gateway is
   bf4b0:	73696c20 696e6574 6620676e 4c20726f      listening for L
   bf4c0:	2041526f 7373656d 73656761 20655700     oRA messages.We 
   bf4d0:	20657261 61647075 676e6974 65687420     are updating the
   bf4e0:	62757020 6873696c 65726620 6e657571      publish frequen
   bf4f0:	74207963 6925206f 6e696d20 73657475     cy to %i minutes
   bf500:	6e655300 676e6964 73657220 736e6f70     .Sending respons
   bf510:	69772065 25206874 65732064 646e6f63     e with %d second
   bf520:	6e752073 206c6974 75746572 7b006e72     s until return.{
   bf530:	646f6e22 22646965 2c75253a 6f682220     "nodeid":%u, "ho
   bf540:	796c7275 75253a22 6422202c 796c6961     urly":%u, "daily
   bf550:	75253a22 6162222c 72657474 253a2279     ":%u,"battery":%
   bf560:	66322e34 656b222c 3a223179 22732522     4.2f,"key1":"%s"
   bf570:	6574222c 3a22706d 202c6425 73657222     ,"temp":%d, "res
   bf580:	22737465 2c64253a 73737222 253a2269     ets":%d,"rssi":%
   bf590:	22202c64 2267736d 2c64253a 6d697422     d, "msg":%d,"tim
   bf5a0:	61747365 3a22706d 30756c25 007d3030     estamp":%lu000}.
   bf5b0:	64696255 2d73746f 41526f4c 6f6f482d     Ubidots-LoRA-Hoo
   bf5c0:	31762d6b 696f4700 7420676e 6564206f     k-v1.Going to de
   bf5d0:	70207065 7265776f 63796320 6420656c     ep power cycle d
   bf5e0:	63697665 6f662065 656e2072 63207478     evice for next c
   bf5f0:	75637269 44007469 20706565 65776f70     ircuit.Deep powe
   bf600:	6f642072 64206e77 63697665 53450065     r down device.ES
   bf610:	44453554 334d2c54 302e322e 303a322f     T5EDT,M3.2.0/2:0
   bf620:	30303a30 31314d2c 302e312e 303a322f     0:00,M11.1.0/2:0
   bf630:	30303a30 73734100 69747265 61466e6f     0:00.AssertionFa
   bf640:	72756c69 72732065 26262063 63727320     ilure src && src
   bf650:	61633e2d 61626c6c 47006b63 77657461     ->callback.Gatew
   bf660:	73207961 74726174 63207075 6c706d6f     ay startup compl
   bf670:	20657465 25207461 69772073 62206874     ete at %s with b
   bf680:	65747461 25207972 66322e34 00000000     attery %4.2f....

000bf690 <_ZTV8MB85RC64>:
	...
   bf698:	000b519d 000b51b1 000b7a05 000b7a9b     .Q...Q...z...z..
   bf6a8:	000b7b1d                                .{..

000bf6ac <_ZTV13sysStatusData>:
	...
   bf6b4:	000b52b9 000b5229 000b5207 000ba2e5     .R..)R...R......
   bf6c4:	000ba30d 000ba401 000ba499 000b51c5     .............Q..
   bf6d4:	000b51dd                                .Q..

000bf6d8 <_ZTV17currentStatusData>:
	...
   bf6e0:	000b52d3 000b5229 000b5207 000ba2e5     .R..)R...R......
   bf6f0:	000ba30d 000ba401 000ba499 000b5171     ............qQ..
   bf700:	000b5189 74696e49 7a696c61 20676e69     .Q..Initalizing 
   bf710:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   bf720:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   bf730:	666e6f43 00006769                       Config..

000bf738 <BLUE_LED>:
   bf738:	                                         ..

000bf73a <BUTTON_PIN>:
   bf73a:	                                         ..

000bf73c <RFM95_CS>:
   bf73c:	                                         ..

000bf73e <RFM95_INT>:
   bf73e:	                                         ..

000bf740 <TMP36_SENSE_PIN>:
   bf740:	6553000f 6e697474 61762067 7365756c     ..Setting values
   bf750:	726f6620 65687420 646f6e20 75250065      for the node.%u
   bf760:	6e696d20 73657275 73655900 006f4e00      minures.Yes.No.
   bf770:	69726556 006e6f7a 6e6b6e55 006e776f     Verizon.Unknown.
   bf780:	20746f4e 72616843 676e6967 61684300     Not Charging.Cha
   bf790:	64656772 73694400 72616863 676e6967     rged.Discharging
   bf7a0:	75614600 4400746c 6e6f6369 7463656e     .Fault.Diconnect
   bf7b0:	49006465 6974696e 7a696c61 20676e69     ed.Initializing 
   bf7c0:	74726150 656c6369 6e756620 6f697463     Particle functio
   bf7d0:	6120736e 7620646e 61697261 73656c62     ns and variables
   bf7e0:	776f4c00 776f5020 4d207265 0065646f     .Low Power Mode.
   bf7f0:	656c6552 00657361 6e676953 73006c61     Release.Signal.s
   bf800:	65746174 6843664f 61420067 72657474     tateOfChg.Batter
   bf810:	6e6f4379 74786574 70655200 6974726f     yContext.Reporti
   bf820:	4620676e 75716572 79636e65 4d495300     ng Frequency.SIM
   bf830:	72614320 65530064 6f4c2074 6f502077      Card.Set Low Po
   bf840:	00726577 20746553 71657246 636e6575     wer.Set Frequenc
   bf850:	68530079 2074726f 6f706572 6e697472     y.Short reportin
   bf860:	72662067 65757165 2079636e 7265766f     g frequency over
   bf870:	6469722d 6c207365 7020776f 7265776f     -rides low power
   bf880:	70655200 2074726f 71657266 636e6575     .Report frequenc
   bf890:	69772079 62206c6c 65732065 6f742074     y will be set to
   bf8a0:	20692520 756e696d 20736574 6e207461      %i minutes at n
   bf8b0:	20747865 41526f4c 6e6f6320 7463656e     ext LoRA connect
   bf8c0:	6d695400 65790065 6f6e0073 636e4900     .Time.yes.no.Inc
   bf8d0:	73616572 20676e69 6f706572 6e697472     reasing reportin
   bf8e0:	72662067 65757165 2079636e 31206f74     g frequency to 1
   bf8f0:	696d2032 6574756e 73490073 776f4c20     2 minutes.Is Low
   bf900:	776f5020 4d207265 2065646f 3f746573      Power Mode set?
   bf910:	00732520 20746553 56206f74 7a697265      %s.Set to Veriz
   bf920:	53206e6f 53004d49 74207465 6150206f     on SIM.Set to Pa
   bf930:	63697472 5320656c 49004d49 6874206e     rticle SIM.In th
   bf940:	69642065 6e6f6373 7463656e 6f726620     e disconnect fro
   bf950:	6150206d 63697472 6620656c 74636e75     m Particle funct
   bf960:	006e6f69 6c696146 74206465 6964206f     ion.Failed to di
   bf970:	6e6f6373 7463656e 6f726620 6150206d     sconnect from Pa
   bf980:	63697472 4400656c 6f637369 63656e6e     rticle.Disconnec
   bf990:	20646574 6d6f7266 72615020 6c636974     ted from Particl
   bf9a0:	6e692065 20692520 6f636573 0073646e     e in %i seconds.
   bf9b0:	6c696146 74206465 7574206f 6f206e72     Failed to turn o
   bf9c0:	74206666 43206568 756c6c65 2072616c     ff the Cellular 
   bf9d0:	65646f6d 7554006d 64656e72 66666f20     modem.Turned off
   bf9e0:	65687420 6c656320 616c756c 6f6d2072      the cellular mo
   bf9f0:	206d6564 25206e69 65732069 646e6f63     dem in %i second
   bfa00:	00000073                                s...

000bfa04 <_ZTVN5spark10LogHandlerE>:
	...
   bfa14:	000b40a5 000b5825                       .@..%X..

000bfa1c <_ZTVN5spark16SerialLogHandlerE>:
	...
   bfa24:	000b589d 000b58d1 000bc969 000b5827     .X...X..i...'X..
   bfa34:	656e6f4e 46695700 53470069 4d55004d     None.WiFi.GSM.UM
   bfa44:	43005354 00414d44 0045544c 45454549     TS.CDMA.LTE.IEEE
   bfa54:	31323038 4c003435 435f4554 4d5f5441     802154.LTE_CAT_M
   bfa64:	544c0031 41435f45 424e5f54 73250031     1.LTE_CAT_NB1.%s
   bfa74:	253a5320 66302e32 202c2525 32253a51      S:%2.0f%%, Q:%2
   bfa84:	2566302e 25002025 00432069 65746e49     .0f%% .%i C.Inte
   bfa94:	6c616e72 6d655420 61726570 65727574     rnal Temperature
   bfaa4:	20736920 00007325 000bf778 000bfa34      is %s..x...4...
   bfab4:	000bfa39 000bfa3e 000bfa42 000bfa47     9...>...B...G...
   bfac4:	000bfa4c 000bfa50 000bfa5b 000bfa66     L...P...[...f...
   bfad4:	6c696166 74206465 6572206f 72206461     failed to read r
   bfae4:	64416765 253d7264 20783230 6e756f63     egAddr=%02x coun
   bfaf4:	75253d74 69616600 2064656c 72206f74     t=%u.failed to r
   bfb04:	20646165 41676572 3d726464 78323025     ead regAddr=%02x
   bfb14:	61747320 64253d74 554f4600 69642054      stat=%d.FOUT di
   bfb24:	6f6e2064 6f672074 47494820 6f6e0048     d not go HIGH.no
   bfb34:	65642074 74636574 66006465 656c6961     t detected.faile
   bfb44:	6f742064 69727720 72206574 64416765     d to write regAd
   bfb54:	253d7264 20783230 74617473 0064253d     dr=%02x stat=%d.
   bfb64:	57746573 25205444 61770064 64686374     setWDT %d.watchd
   bfb74:	6320676f 7261656c 62206465 75736552     og cleared bResu
   bfb84:	253d746c 61770064 64686374 7320676f     lt=%d.watchdog s
   bfb94:	66207465 5372756f 3d736365 62206425     et fourSecs=%d b
   bfba4:	75736552 253d746c 41570064 44484354     Result=%d.WATCHD
   bfbb4:	4400474f 5f504545 45574f50 4f445f52     OG.DEEP_POWER_DO
   bfbc4:	43004e57 544e554f 4e574f44 4d49545f     WN.COUNTDOWN_TIM
   bfbd4:	41005245 4d52414c 69616600 6572756c     ER.ALARM.failure
   bfbe4:	206e6920 61647075 61576574 6552656b      in updateWakeRe
   bfbf4:	6e6f7361 00642520 656b6177 61657220     ason %d.wake rea
   bfc04:	206e6f73 7325203d 69616600 6572756c     son = %s.failure
   bfc14:	206e6920 43746573 746e756f 6e776f64      in setCountdown
   bfc24:	656d6954 64252072 69616600 6572756c     Timer %d.failure
   bfc34:	206e6920 70656564 65776f50 776f4472      in deepPowerDow
   bfc44:	6425206e 47455200 454c535f 435f5045     n %d.REG_SLEEP_C
   bfc54:	3d4c5254 32257830 69640078 74276e64     TRL=0x%2x.didn't
   bfc64:	776f7020 64207265 006e776f 64343025      power down.%04d
   bfc74:	3230252d 30252d64 25206432 3a643230     -%02d-%02d %02d:
   bfc84:	64323025 3230253a 65670064 63745274     %02d:%02d.getRtc
   bfc94:	6d547341 00732520 52746573 73416374     AsTm %s.setRtcAs
   bfca4:	25206d54 61660073 72756c69 6e692065     Tm %s.failure in
   bfcb4:	74657320 46637452 546d6f72 6425206d      setRtcFromTm %d
   bfcc4:	74657300 43545220 6f726620 6c63206d     .set RTC from cl
   bfcd4:	2064756f 73007325 73207465 65747379     oud %s.set syste
   bfce4:	6c63206d 206b636f 6d6f7266 43545220     m clock from RTC
   bfcf4:	00732520 6c696166 74206465 6564206f      %s.failed to de
   bfd04:	74636574 31424120 00353038 2e707061     tect AB1805.app.
   bfd14:	38316261 00003530                       ab1805..

000bfd1c <_ZTV6AB1805>:
	...
   bfd24:	000b61c5 000b61c7 000b683d 000b68c3     .a...a..=h...h..
   bfd34:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   bfd44:	004b5268                                hRK.

000bfd48 <_ZTV19BackgroundPublishRK>:
	...
   bfd50:	000b6df9 000b6e15 253a6425 64253a64     .m...n..%d:%d:%d
   bfd60:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   bfd70:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   bfd80:	302b2500 253a6433 00753230              .%+03d:%02u.

000bfd8c <_ZTV9LocalTime>:
	...
   bfd94:	000b7149 000b7161                       Iq..aq..

000bfd9c <_ZTV12LocalTimeHMS>:
	...
   bfda4:	000b70f7 000b70fb                       .p...p..

000bfdac <_ZTV15LocalTimeChange>:
	...
   bfdb4:	000b70f9 000b7109                       .p...q..

000bfdbc <_ZTV22LocalTimePosixTimezone>:
	...
   bfdc4:	000b7119 000b7135                       .q..5q..

000bfdcc <_ZTV6MB85RC>:
	...
   bfdd4:	000b79c5 000b79c7 000b7a05 000b7a9b     .y...y...z...z..
   bfde4:	000b7b1d 656c6966 3d6d754e 73206425     .{..fileNum=%d s
   bfdf4:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   bfe04:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   bfe14:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   bfe24:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   bfe34:	64657470 65766520 6e20746e 20656d61     pted event name 
   bfe44:	6420726f 00617461 64616572 75657551     or data.readQueu
   bfe54:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   bfe64:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   bfe74:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   bfe84:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   bfe94:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   bfea4:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   bfeb4:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   bfec4:	76652064 20746e65 72006425 74657365     d event %d.reset
   bfed4:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   bfee4:	746e6576 6173202c 66206576 73656c69     vent, save files
   bfef4:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   bff04:	72616373 676e6964 726f6320 74707572     scarding corrupt
   bff14:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   bff24:	6e696873 73252067 65766520 253d746e     shing %s event=%
   bff34:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   bff44:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   bff54:	20736920 75716572 64657269 62757000      is required.pub
   bff64:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   bff74:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   bff84:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   bff94:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   bffa4:	72656772 61687420 616d206e 69735f78     rger than max_si
   bffb4:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   bffc4:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   bffd4:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   bffe4:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   bfff4:	00657565 6c627570 20687369 63637573     eue.publish succ
   c0004:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c0014:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c0024:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c0034:	206f7420 656c6966 66612073 20726574      to files after 
   c0044:	6c627570 20687369 6c696166 00657275     publish failure.
   c0054:	2e707061 71627570 00000000              app.pubq....

000c0060 <_ZTV17PublishQueuePosix>:
	...
   c0068:	000b8451 000b870d 000b8731              Q.......1...

000c0074 <_ZTV15RHGenericDriver>:
	...
   c0084:	000b8851 000b40a5 000b40a5 000b40a5     Q....@...@...@..
   c0094:	000b40a5 000b88b3 000b8855 000b8903     .@......U.......
   c00a4:	000b88d1 000b8927 000b885f 000b8867     ....'..._...g...
   c00b4:	000b886b 000b886f 000b8873 000b8877     k...o...s...w...
   c00c4:	000b8863 000b8883 000b8887 000b888b     c...............
   c00d4:	000b888f 000b8893 000b8899 000b889d     ................
   c00e4:	000b885f 000b88a1 000b88a7 000b88ad     _...............

000c00f4 <_ZTV12RHGenericSPI>:
	...
   c00fc:	000b40a5 000b8985 000b8987 000b40a5     .@...........@..
   c010c:	000b40a5 000b898f 000b8993 000b8997     .@..............
   c011c:	000b8989 000b898b 000b898d 61666564     ............defa
   c012c:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c013c:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c014c:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c015c:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c016c <_ZTVN8particle11SPISettingsE>:
	...
   c0174:	000b89dd 000b89b1 000b89b3              ............

000c0180 <_ZTV13RHHardwareSPI>:
	...
   c0188:	000b8a91 000b8aa5 000b8ab3 000b8ac1     ................
   c0198:	000b8b2d 000b898f 000b8993 000b8997     -...............
   c01a8:	000b8b3b 000b8b4f 000b8b5d              ;...O...]...

000c01b4 <_ZTV6RHMesh>:
	...
   c01bc:	000b8c29 000b8f2d 000b8b89 000b8b75     )...-.......u...

000c01cc <_ZTV8RHRouter>:
	...
   c01d4:	000b9199 000b91dd                       ........

000c01dc <_ZTV11RHSPIDriver>:
	...
   c01ec:	000b9479 000b40a5 000b40a5 000b40a5     y....@...@...@..
   c01fc:	000b40a5 000b88b3 000b8855 000b8903     .@......U.......
   c020c:	000b88d1 000b8927 000b885f 000b8867     ....'..._...g...
   c021c:	000b886b 000b886f 000b8873 000b8877     k...o...s...w...
   c022c:	000b8863 000b8883 000b8887 000b888b     c...............
   c023c:	000b888f 000b8893 000b8899 000b889d     ................
   c024c:	000b885f 000b88a1 000b88a7 000b88ad     _...............
   c025c:	000b94a5 000b94af                       ........

000c0264 <_ZL18MODEM_CONFIG_TABLE>:
   c0264:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c0274 <_ZTV7RH_RF95>:
	...
   c027c:	000b9617 000b964f 000b9b29 000b99bf     ....O...).......
   c028c:	000b9685 000b9a07 000b9613 000b88b3     ................
   c029c:	000b8855 000b8903 000b88d1 000b8927     U...........'...
   c02ac:	000b9619 000b8867 000b886b 000b886f     ....g...k...o...
   c02bc:	000b8873 000b8877 000b8863 000b8883     s...w...c.......
   c02cc:	000b8887 000b888b 000b888f 000b8893     ................
   c02dc:	000b8899 000b889d 000b965f 000b88a1     ........_.......
   c02ec:	000b88a7 000b88ad 000b94a5 000b94af     ................
   c02fc:	000b960f 64383025 72002f00 766f6d65     ....%08d./.remov
   c030c:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c031c:	20646e61 61207369 72696420 6f746365     and is a directo
   c032c:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c033c:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c034c:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c035c:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c036c:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c037c:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c038c:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c039c:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c03ac:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c03bc:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c03cc:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c03dc:	74657220 656e7275 64252064 70706100      returned %d.app
   c03ec:	7165732e 656c6966 00000000              .seqfile....

000c03f8 <_ZTV14SequentialFile>:
	...
   c0400:	000b9f85 000b9fb1 000b9c31 3a746f67     ........1...got:
   c0410:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c0420:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c0430:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c0440:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c0450:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c0460:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c0470 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c0478:	000ba2df 000ba32b 000ba2dd 000ba2e5     ....+...........
   c0488:	000ba30d 000ba401 000ba499              ............

000c0494 <_ZTVN5spark13CellularClassE>:
	...
   c049c:	000baee7 000baedd 000baed3 000bae89     ................
   c04ac:	000baec7 000baebb 000bccc1 000bccc9     ................
   c04bc:	000baeaf 000baea7 000bae9d 000bae93     ................
   c04cc:	000bccf9                                ....

000c04d0 <_ZTV14CellularSignal>:
	...
   c04d8:	000baf75 000bafd9 000baf77 000bafe9     u.......w.......
   c04e8:	000bb01d 000bb049 000bb07d 000baf9d     ....I...}.......
   c04f8:	000baf7b 000baf97 fffffffc 00000000     {...............
   c0508:	000bafd1                                ....

000c050c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0514:	000bb0c1 000bb0c7 000bb105 000bb0d5     ................
   c0524:	000bb0c3                                ....

000c0528 <_ZTVN5spark13EthernetClassE>:
	...
   c0530:	000bb6cf 000bb6c5 000bb6bb 000bb6b1     ................
   c0540:	000bb6a5 000bb699 000bccc1 000bccc9     ................
   c0550:	000bb68d 000bb685 000bb67b 000bb671     ........{...q...
   c0560:	000bccf9                                ....

000c0564 <_ZTV7TwoWire>:
	...
   c056c:	000bb79f 000bb7e9 000bb7c1 000bb7a1     ................
   c057c:	000bb7c9 000bb7d1 000bb7d9 000bb7e1     ................

000c058c <_ZTV9IPAddress>:
	...
   c0594:	000bb981 000bb971 000bb973 34302575     ....q...s...u%04
   c05a4:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c05b4:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c05c4:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c05d4:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c05e4:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   c05f4:	20736c69 0d00203d 6e6c000a 006e6600     ils = ....ln.fn.
   c0604:	65646f63 74656400 006c6961              code.detail.

000c0610 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c0618:	000bbe2d 000bbe53 000bbe11 000bba8f     -...S...........

000c0628 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c0630:	000bc211 000bc229 000bc969 000b5827     ....)...i...'X..

000c0640 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c0648:	000bc23d 000bc251 000bcb0d 000bbe19     =...Q...........

000c0658 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c0660:	000bbe2b 000bbe61 000bc8cd 000bbe1b     +...a...........

000c0670 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c0678:	000bbe29 000bbe6f 000bc179 000bbe91     )...o...y.......

000c0688 <_ZTVN5spark12NetworkClassE>:
	...
   c0690:	000bcc81 000bcc8b 000bcc95 000bcc9f     ................
   c06a0:	000bcca9 000bccb5 000bccc1 000bccc9     ................
   c06b0:	000bccd1 000bccdd 000bcce5 000bccef     ................
   c06c0:	000bccf9 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000c06d0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c06d0:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c06e0:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c06f0:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c0700:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c0710:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c0720:	00000065                                e...

000c0724 <_ZTV11USARTSerial>:
	...
   c072c:	000bdb61 000bdbcd 000bdba5 000bcf49     a...........I...
   c073c:	000bdb75 000bdb91 000bdb83 000bdb9f     u...............
   c074c:	000bdb63 000bdb67                       c...g...

000c0754 <_ZTV9USBSerial>:
	...
   c075c:	000bdc1f 000bdc87 000bdc5d 000bcf49     ........]...I...
   c076c:	000bdc4f 000bdc21 000bdc31 000bdc81     O...!...1.......
   c077c:	000bdc41 000bdc19                       A.......

000c0784 <_ZSt7nothrow>:
   c0784:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c0794:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c07a5 <day_name.1>:
   c07a5:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c07b5:	61536972                                 riSat

000c07ba <mon_name.0>:
   c07ba:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c07ca:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c07da:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c07ea:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c07fa:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c080a:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c081a:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c082a:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c083a:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c084a:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c085a:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c086a:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c087a:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c088a:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c089a:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c08a7 <_ctype_>:
   c08a7:	20202000 20202020 28282020 20282828     .         ((((( 
   c08b7:	20202020 20202020 20202020 20202020                     
   c08c7:	10108820 10101010 10101010 10101010      ...............
   c08d7:	04040410 04040404 10040404 10101010     ................
   c08e7:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c08f7:	01010101 01010101 01010101 10101010     ................
   c0907:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c0917:	02020202 02020202 02020202 10101010     ................
   c0927:	00000020 00000000 00000000 00000000      ...............
	...

000c09a8 <link_const_variable_data_end>:
   c09a8:	000b471d 	.word	0x000b471d
   c09ac:	000b4f0d 	.word	0x000b4f0d
   c09b0:	000b570d 	.word	0x000b570d
   c09b4:	000b5d8d 	.word	0x000b5d8d
   c09b8:	000b61b9 	.word	0x000b61b9
   c09bc:	000b6cdd 	.word	0x000b6cdd
   c09c0:	000b86fd 	.word	0x000b86fd
   c09c4:	000b8b65 	.word	0x000b8b65
   c09c8:	000ba2cd 	.word	0x000ba2cd
   c09cc:	000bae79 	.word	0x000bae79
   c09d0:	000baf45 	.word	0x000baf45
   c09d4:	000bb6d9 	.word	0x000bb6d9
   c09d8:	000bc959 	.word	0x000bc959
   c09dc:	000bcdd1 	.word	0x000bcdd1
   c09e0:	000bd23d 	.word	0x000bd23d
   c09e4:	000bd825 	.word	0x000bd825
   c09e8:	000bdb4d 	.word	0x000bdb4d

000c09ec <link_constructors_end>:
   c09ec:	00000000 	.word	0x00000000
