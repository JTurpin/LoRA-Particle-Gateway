
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d140  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1160  000c1160  00011160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c1184  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  2003dcac  000c1188  0002dcac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000954  2003dea0  2003dea0  0003dea0  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c1378  000c1378  00031378  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c13a4  000c13a4  000313a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002760b0  00000000  00000000  000313a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002a895  00000000  00000000  002a7458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00064ae2  00000000  00000000  002d1ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000048d0  00000000  00000000  003367cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00010e60  00000000  00000000  0033b09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005d30d  00000000  00000000  0034beff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0008da74  00000000  00000000  003a920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169465  00000000  00000000  00436c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000d92c  00000000  00000000  005a00e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00b f909 	bl	bf248 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00b f92b 	bl	bf298 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dcac 	.word	0x2003dcac
   b404c:	000c1188 	.word	0x000c1188
   b4050:	2003de9c 	.word	0x2003de9c
   b4054:	2003dea0 	.word	0x2003dea0
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00a fa4b 	bl	be4fc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1110 	.word	0x000c1110
   b4080:	000c1154 	.word	0x000c1154

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bf4c 	b.w	b4f20 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fcad 	bl	b49e8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00a b9eb 	b.w	be46c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f007 b933 	b.w	bb300 <malloc>

000b409a <_Znaj>:
   b409a:	f007 b931 	b.w	bb300 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f007 b937 	b.w	bb310 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f006 ffba 	bl	bb024 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000babd5 	.word	0x000babd5
   b40b8:	000bf86c 	.word	0x000bf86c

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40cc:	b40e      	push	{r1, r2, r3}
   b40ce:	b500      	push	{lr}
   b40d0:	b08c      	sub	sp, #48	; 0x30
   b40d2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40d4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40d8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40dc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40de:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40e2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40e4:	6801      	ldr	r1, [r0, #0]
   b40e6:	aa04      	add	r2, sp, #16
   b40e8:	201e      	movs	r0, #30
    attr.flags = 0;
   b40ea:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ee:	f006 ffa9 	bl	bb044 <log_message_v>
}
   b40f2:	b00c      	add	sp, #48	; 0x30
   b40f4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f8:	b003      	add	sp, #12
   b40fa:	4770      	bx	lr

000b40fc <_Z14initializeLoRAb>:
 * and the values loaded.  If a device has not had a node and deviceID assigned, it will happen here
 * 
 * @return true - initialization successful
 * @return false - initialization failed
 */
bool initializeLoRA(bool gatewayID) {				// True if Gateway / False if Node
   b40fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b40fe:	4606      	mov	r6, r0
 	// Set up the Radio Module
	if (!manager.init()) {
   b4100:	4820      	ldr	r0, [pc, #128]	; (b4184 <_Z14initializeLoRAb+0x88>)
   b4102:	f005 fc40 	bl	b9986 <_ZN8RHRouter4initEv>
   b4106:	4605      	mov	r5, r0
   b4108:	b930      	cbnz	r0, b4118 <_Z14initializeLoRAb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b410a:	491f      	ldr	r1, [pc, #124]	; (b4188 <_Z14initializeLoRAb+0x8c>)
   b410c:	481f      	ldr	r0, [pc, #124]	; (b418c <_Z14initializeLoRAb+0x90>)
   b410e:	f7ff ffdd 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	}
	manager.setThisAddress(sysStatus.nodeNumber);	// Assign the NodeNumber to this node
	
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.deviceID, sysStatus.structuresVersion);
	return true;
}
   b4112:	4628      	mov	r0, r5
   b4114:	b002      	add	sp, #8
   b4116:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4118:	ed9f 0a1d 	vldr	s0, [pc, #116]	; b4190 <_Z14initializeLoRAb+0x94>
   b411c:	481d      	ldr	r0, [pc, #116]	; (b4194 <_Z14initializeLoRAb+0x98>)
	if (!(sysStatus.structuresVersion == 128)) {    // This will be our indication that the deviceID and nodeID has not yet been set
   b411e:	4c1e      	ldr	r4, [pc, #120]	; (b4198 <_Z14initializeLoRAb+0x9c>)
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4120:	f005 ff2a 	bl	b9f78 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4124:	481b      	ldr	r0, [pc, #108]	; (b4194 <_Z14initializeLoRAb+0x98>)
   b4126:	2200      	movs	r2, #0
   b4128:	2117      	movs	r1, #23
   b412a:	f006 f89f 	bl	ba26c <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.structuresVersion == 128)) {    // This will be our indication that the deviceID and nodeID has not yet been set
   b412e:	7923      	ldrb	r3, [r4, #4]
   b4130:	2b80      	cmp	r3, #128	; 0x80
   b4132:	d011      	beq.n	b4158 <_Z14initializeLoRAb+0x5c>
		randomSeed(sysStatus.lastConnection);		// 32-bit number for seed
   b4134:	6960      	ldr	r0, [r4, #20]
   b4136:	f009 fbfe 	bl	bd936 <_Z10randomSeedj>
		sysStatus.deviceID = random(1,65535);			// 16-bit number for deviceID
   b413a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b413e:	2001      	movs	r0, #1
   b4140:	f009 fbef 	bl	bd922 <_Z6randomii>
   b4144:	8020      	strh	r0, [r4, #0]
		if (gatewayID) {
   b4146:	b1be      	cbz	r6, b4178 <_Z14initializeLoRAb+0x7c>
			Log.info("Setting node number as Gateway");
   b4148:	4914      	ldr	r1, [pc, #80]	; (b419c <_Z14initializeLoRAb+0xa0>)
   b414a:	4810      	ldr	r0, [pc, #64]	; (b418c <_Z14initializeLoRAb+0x90>)
   b414c:	f7ff ffbe 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
			sysStatus.nodeNumber = 0;
   b4150:	2300      	movs	r3, #0
   b4152:	8063      	strh	r3, [r4, #2]
		sysStatus.structuresVersion = 128;			// Set the structure to the magic number so we can have a stable deviceID
   b4154:	2380      	movs	r3, #128	; 0x80
   b4156:	7123      	strb	r3, [r4, #4]
	manager.setThisAddress(sysStatus.nodeNumber);	// Assign the NodeNumber to this node
   b4158:	78a1      	ldrb	r1, [r4, #2]
   b415a:	4811      	ldr	r0, [pc, #68]	; (b41a0 <_Z14initializeLoRAb+0xa4>)
   b415c:	f004 ff11 	bl	b8f82 <_ZN10RHDatagram14setThisAddressEh>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.deviceID, sysStatus.structuresVersion);
   b4160:	480f      	ldr	r0, [pc, #60]	; (b41a0 <_Z14initializeLoRAb+0xa4>)
   b4162:	f004 fef4 	bl	b8f4e <_ZN10RHDatagram11thisAddressEv>
   b4166:	7923      	ldrb	r3, [r4, #4]
   b4168:	9300      	str	r3, [sp, #0]
   b416a:	4602      	mov	r2, r0
   b416c:	8823      	ldrh	r3, [r4, #0]
   b416e:	490d      	ldr	r1, [pc, #52]	; (b41a4 <_Z14initializeLoRAb+0xa8>)
   b4170:	4806      	ldr	r0, [pc, #24]	; (b418c <_Z14initializeLoRAb+0x90>)
   b4172:	f7ff ffab 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	return true;
   b4176:	e7cc      	b.n	b4112 <_Z14initializeLoRAb+0x16>
		else sysStatus.nodeNumber = random(10,255);	// Random number in - unconfigured - range will trigger a Join request
   b4178:	21ff      	movs	r1, #255	; 0xff
   b417a:	200a      	movs	r0, #10
   b417c:	f009 fbd1 	bl	bd922 <_Z6randomii>
   b4180:	8060      	strh	r0, [r4, #2]
   b4182:	e7e7      	b.n	b4154 <_Z14initializeLoRAb+0x58>
   b4184:	2003e04c 	.word	0x2003e04c
   b4188:	000bf881 	.word	0x000bf881
   b418c:	2003e658 	.word	0x2003e658
   b4190:	4464c000 	.word	0x4464c000
   b4194:	2003df1c 	.word	0x2003df1c
   b4198:	2003e408 	.word	0x2003e408
   b419c:	000bf88d 	.word	0x000bf88d
   b41a0:	2003e050 	.word	0x2003e050
   b41a4:	000bf8ac 	.word	0x000bf8ac

000b41a8 <_Z25decipherDataReportGatewayv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool decipherDataReportGateway() {
   b41a8:	b508      	push	{r3, lr}

	current.hourlyCount = buf[5] << 8 | buf[6];
   b41aa:	4a10      	ldr	r2, [pc, #64]	; (b41ec <_Z25decipherDataReportGatewayv+0x44>)
   b41ac:	4b10      	ldr	r3, [pc, #64]	; (b41f0 <_Z25decipherDataReportGatewayv+0x48>)
   b41ae:	f8b2 1005 	ldrh.w	r1, [r2, #5]
	current.stateOfCharge = buf[10];
	current.batteryState = buf[11];
	current.internalTempC = buf[9];
	current.rssi = (buf[14] << 8 | buf[15]) - 65535;
	current.messageNumber = buf[16];
	Log.info("Deciphered data report %d from node %d", current.messageNumber, current.nodeNumber);
   b41b2:	4810      	ldr	r0, [pc, #64]	; (b41f4 <_Z25decipherDataReportGatewayv+0x4c>)
	current.hourlyCount = buf[5] << 8 | buf[6];
   b41b4:	ba49      	rev16	r1, r1
   b41b6:	8419      	strh	r1, [r3, #32]
	current.dailyCount = buf[7] << 8 | buf[8];
   b41b8:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   b41bc:	ba49      	rev16	r1, r1
   b41be:	8459      	strh	r1, [r3, #34]	; 0x22
	current.stateOfCharge = buf[10];
   b41c0:	7a91      	ldrb	r1, [r2, #10]
   b41c2:	6099      	str	r1, [r3, #8]
	current.batteryState = buf[11];
   b41c4:	7ad1      	ldrb	r1, [r2, #11]
   b41c6:	7319      	strb	r1, [r3, #12]
	current.internalTempC = buf[9];
   b41c8:	7a51      	ldrb	r1, [r2, #9]
   b41ca:	7119      	strb	r1, [r3, #4]
	current.rssi = (buf[14] << 8 | buf[15]) - 65535;
   b41cc:	89d1      	ldrh	r1, [r2, #14]
	current.messageNumber = buf[16];
   b41ce:	7c12      	ldrb	r2, [r2, #16]
   b41d0:	769a      	strb	r2, [r3, #26]
	current.rssi = (buf[14] << 8 | buf[15]) - 65535;
   b41d2:	ba49      	rev16	r1, r1
   b41d4:	3101      	adds	r1, #1
   b41d6:	8319      	strh	r1, [r3, #24]
	Log.info("Deciphered data report %d from node %d", current.messageNumber, current.nodeNumber);
   b41d8:	885b      	ldrh	r3, [r3, #2]
   b41da:	4907      	ldr	r1, [pc, #28]	; (b41f8 <_Z25decipherDataReportGatewayv+0x50>)
   b41dc:	f7ff ff76 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b41e0:	4b06      	ldr	r3, [pc, #24]	; (b41fc <_Z25decipherDataReportGatewayv+0x54>)
   b41e2:	2204      	movs	r2, #4
   b41e4:	701a      	strb	r2, [r3, #0]

	return true;
}
   b41e6:	2001      	movs	r0, #1
   b41e8:	bd08      	pop	{r3, pc}
   b41ea:	bf00      	nop
   b41ec:	2003dea1 	.word	0x2003dea1
   b41f0:	2003e3d8 	.word	0x2003e3d8
   b41f4:	2003e658 	.word	0x2003e658
   b41f8:	000bf903 	.word	0x000bf903
   b41fc:	2003dea0 	.word	0x2003dea0

000b4200 <_Z28acknowledgeDataReportGatewayi>:

bool acknowledgeDataReportGateway(int nextSeconds) {
   b4200:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = current.messageNumber;			 		// Message number
   b4202:	4e2b      	ldr	r6, [pc, #172]	; (b42b0 <_Z28acknowledgeDataReportGatewayi+0xb0>)
   b4204:	4c2b      	ldr	r4, [pc, #172]	; (b42b4 <_Z28acknowledgeDataReportGatewayi+0xb4>)
   b4206:	7eb3      	ldrb	r3, [r6, #26]
   b4208:	7023      	strb	r3, [r4, #0]
bool acknowledgeDataReportGateway(int nextSeconds) {
   b420a:	b087      	sub	sp, #28
   b420c:	4605      	mov	r5, r0
	buf[1] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b420e:	f00a f800 	bl	be212 <_ZN9TimeClass3nowEv>
   b4212:	1600      	asrs	r0, r0, #24
   b4214:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4216:	f009 fffc 	bl	be212 <_ZN9TimeClass3nowEv>
   b421a:	1400      	asrs	r0, r0, #16
   b421c:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b421e:	f009 fff8 	bl	be212 <_ZN9TimeClass3nowEv>
   b4222:	1200      	asrs	r0, r0, #8
   b4224:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    	// First byte			
   b4226:	f009 fff4 	bl	be212 <_ZN9TimeClass3nowEv>
	buf[5] = highByte(sysStatus.frequencyMinutes);	// Frequency of reports - for Gateways
   b422a:	4b23      	ldr	r3, [pc, #140]	; (b42b8 <_Z28acknowledgeDataReportGatewayi+0xb8>)
	buf[6] = lowByte(sysStatus.frequencyMinutes);	
	buf[7] = highByte(nextSecondsShort);	// Seconds until next report - for Nodes
	buf[8] = lowByte(nextSecondsShort);
   b422c:	7225      	strb	r5, [r4, #8]
	buf[5] = highByte(sysStatus.frequencyMinutes);	// Frequency of reports - for Gateways
   b422e:	8b9b      	ldrh	r3, [r3, #28]
	buf[6] = lowByte(sysStatus.frequencyMinutes);	
   b4230:	71a3      	strb	r3, [r4, #6]
	buf[5] = highByte(sysStatus.frequencyMinutes);	// Frequency of reports - for Gateways
   b4232:	0a1a      	lsrs	r2, r3, #8
	buf[7] = highByte(nextSecondsShort);	// Seconds until next report - for Nodes
   b4234:	f3c5 2307 	ubfx	r3, r5, #8, #8
	buf[5] = highByte(sysStatus.frequencyMinutes);	// Frequency of reports - for Gateways
   b4238:	7162      	strb	r2, [r4, #5]
	buf[7] = highByte(nextSecondsShort);	// Seconds until next report - for Nodes
   b423a:	71e3      	strb	r3, [r4, #7]
	buf[4] = ((uint8_t) (Time.now()));		    	// First byte			
   b423c:	7120      	strb	r0, [r4, #4]
	
	Log.info("Sent response to client message %d, time = %s, next report = %u seconds", buf[0], Time.timeStr(Time.now()).c_str(), nextSecondsShort);
   b423e:	7827      	ldrb	r7, [r4, #0]
   b4240:	f009 ffe7 	bl	be212 <_ZN9TimeClass3nowEv>
   b4244:	b2ad      	uxth	r5, r5
   b4246:	4602      	mov	r2, r0
   b4248:	17c3      	asrs	r3, r0, #31
   b424a:	a802      	add	r0, sp, #8
   b424c:	f009 fedc 	bl	be008 <_ZN9TimeClass7timeStrEx>
   b4250:	463a      	mov	r2, r7
   b4252:	9b02      	ldr	r3, [sp, #8]
   b4254:	4919      	ldr	r1, [pc, #100]	; (b42bc <_Z28acknowledgeDataReportGatewayi+0xbc>)
   b4256:	481a      	ldr	r0, [pc, #104]	; (b42c0 <_Z28acknowledgeDataReportGatewayi+0xc0>)
   b4258:	9500      	str	r5, [sp, #0]
   b425a:	f7ff ff37 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b425e:	a802      	add	r0, sp, #8
   b4260:	f009 fc38 	bl	bdad4 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4264:	4b17      	ldr	r3, [pc, #92]	; (b42c4 <_Z28acknowledgeDataReportGatewayi+0xc4>)
   b4266:	881d      	ldrh	r5, [r3, #0]
   b4268:	2101      	movs	r1, #1
   b426a:	4628      	mov	r0, r5
   b426c:	f00a f9df 	bl	be62e <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.nodeNumber, DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4270:	2304      	movs	r3, #4
   b4272:	9300      	str	r3, [sp, #0]
   b4274:	4621      	mov	r1, r4
   b4276:	78b3      	ldrb	r3, [r6, #2]
   b4278:	4813      	ldr	r0, [pc, #76]	; (b42c8 <_Z28acknowledgeDataReportGatewayi+0xc8>)
   b427a:	2209      	movs	r2, #9
   b427c:	f005 f91a 	bl	b94b4 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4280:	4604      	mov	r4, r0
   b4282:	b950      	cbnz	r0, b429a <_Z28acknowledgeDataReportGatewayi+0x9a>
		Log.info("Response received successfully");
   b4284:	4911      	ldr	r1, [pc, #68]	; (b42cc <_Z28acknowledgeDataReportGatewayi+0xcc>)
   b4286:	480e      	ldr	r0, [pc, #56]	; (b42c0 <_Z28acknowledgeDataReportGatewayi+0xc0>)
   b4288:	f7ff ff20 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b428c:	4628      	mov	r0, r5
   b428e:	4621      	mov	r1, r4
   b4290:	f00a f9cd 	bl	be62e <digitalWrite>
		// driver.sleep();                             // Here is where we will power down the LoRA radio module
		return true;
   b4294:	2001      	movs	r0, #1

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	// driver.sleep();                             // Here is where we will power down the LoRA radio module
	return false;
}
   b4296:	b007      	add	sp, #28
   b4298:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Log.info("Response not acknowledged");
   b429a:	490d      	ldr	r1, [pc, #52]	; (b42d0 <_Z28acknowledgeDataReportGatewayi+0xd0>)
   b429c:	4808      	ldr	r0, [pc, #32]	; (b42c0 <_Z28acknowledgeDataReportGatewayi+0xc0>)
   b429e:	f7ff ff15 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b42a2:	4628      	mov	r0, r5
   b42a4:	2100      	movs	r1, #0
   b42a6:	f00a f9c2 	bl	be62e <digitalWrite>
	return false;
   b42aa:	2000      	movs	r0, #0
   b42ac:	e7f3      	b.n	b4296 <_Z28acknowledgeDataReportGatewayi+0x96>
   b42ae:	bf00      	nop
   b42b0:	2003e3d8 	.word	0x2003e3d8
   b42b4:	2003dea1 	.word	0x2003dea1
   b42b8:	2003e408 	.word	0x2003e408
   b42bc:	000bf92a 	.word	0x000bf92a
   b42c0:	2003e658 	.word	0x2003e658
   b42c4:	000bfde4 	.word	0x000bfde4
   b42c8:	2003e04c 	.word	0x2003e04c
   b42cc:	000bf972 	.word	0x000bf972
   b42d0:	000bf991 	.word	0x000bf991

000b42d4 <_Z29acknowledgeJoinRequestGatewayi>:
	lora_state = JOIN_ACK;			// Prepare to respond

	return true;
}

bool acknowledgeJoinRequestGateway(int nextSeconds) {
   b42d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t newNodeNumber = 0;
	uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	if (current.nodeNumber < 10) {							// Device needs a new node number
   b42d8:	4f32      	ldr	r7, [pc, #200]	; (b43a4 <_Z29acknowledgeJoinRequestGatewayi+0xd0>)
   b42da:	887b      	ldrh	r3, [r7, #2]
   b42dc:	2b09      	cmp	r3, #9
bool acknowledgeJoinRequestGateway(int nextSeconds) {
   b42de:	b086      	sub	sp, #24
   b42e0:	4605      	mov	r5, r0
	uint16_t nextSecondsShort = (uint16_t)nextSeconds;
   b42e2:	fa1f f880 	uxth.w	r8, r0
	if (current.nodeNumber < 10) {							// Device needs a new node number
   b42e6:	d850      	bhi.n	b438a <_Z29acknowledgeJoinRequestGatewayi+0xb6>
		randomSeed(sysStatus.lastHookResponse);
   b42e8:	4b2f      	ldr	r3, [pc, #188]	; (b43a8 <_Z29acknowledgeJoinRequestGatewayi+0xd4>)
   b42ea:	6918      	ldr	r0, [r3, #16]
   b42ec:	f009 fb23 	bl	bd936 <_Z10randomSeedj>
		newNodeNumber = random(10,255);
   b42f0:	21ff      	movs	r1, #255	; 0xff
   b42f2:	200a      	movs	r0, #10
   b42f4:	f009 fb15 	bl	bd922 <_Z6randomii>
   b42f8:	b286      	uxth	r6, r0
	}

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = 128;								// Magic number - so you can trust me
   b42fa:	4c2c      	ldr	r4, [pc, #176]	; (b43ac <_Z29acknowledgeJoinRequestGatewayi+0xd8>)
   b42fc:	2380      	movs	r3, #128	; 0x80
   b42fe:	7023      	strb	r3, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b4300:	f009 ff87 	bl	be212 <_ZN9TimeClass3nowEv>
   b4304:	1600      	asrs	r0, r0, #24
   b4306:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b4308:	f009 ff83 	bl	be212 <_ZN9TimeClass3nowEv>
   b430c:	1400      	asrs	r0, r0, #16
   b430e:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b4310:	f009 ff7f 	bl	be212 <_ZN9TimeClass3nowEv>
   b4314:	1200      	asrs	r0, r0, #8
   b4316:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   b4318:	f009 ff7b 	bl	be212 <_ZN9TimeClass3nowEv>
	buf[5] = highByte(newNodeNumber);			// New Node Number for device
	buf[6] = lowByte(newNodeNumber);	
	buf[7] = highByte(nextSecondsShort);		// Seconds until next report - for Nodes
   b431c:	ea4f 2818 	mov.w	r8, r8, lsr #8
	buf[5] = highByte(newNodeNumber);			// New Node Number for device
   b4320:	0a33      	lsrs	r3, r6, #8
   b4322:	7163      	strb	r3, [r4, #5]
	buf[8] = lowByte(nextSecondsShort);
   b4324:	7225      	strb	r5, [r4, #8]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   b4326:	7120      	strb	r0, [r4, #4]
	buf[6] = lowByte(newNodeNumber);	
   b4328:	71a6      	strb	r6, [r4, #6]
	buf[7] = highByte(nextSecondsShort);		// Seconds until next report - for Nodes
   b432a:	f884 8007 	strb.w	r8, [r4, #7]
	
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", newNodeNumber, Time.timeStr(Time.now()).c_str(), nextSecondsShort);
   b432e:	f009 ff70 	bl	be212 <_ZN9TimeClass3nowEv>
   b4332:	b2ad      	uxth	r5, r5
   b4334:	4602      	mov	r2, r0
   b4336:	17c3      	asrs	r3, r0, #31
   b4338:	a802      	add	r0, sp, #8
   b433a:	f009 fe65 	bl	be008 <_ZN9TimeClass7timeStrEx>
   b433e:	4632      	mov	r2, r6
   b4340:	9b02      	ldr	r3, [sp, #8]
   b4342:	491b      	ldr	r1, [pc, #108]	; (b43b0 <_Z29acknowledgeJoinRequestGatewayi+0xdc>)
   b4344:	481b      	ldr	r0, [pc, #108]	; (b43b4 <_Z29acknowledgeJoinRequestGatewayi+0xe0>)
   b4346:	9500      	str	r5, [sp, #0]
   b4348:	f7ff fec0 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b434c:	a802      	add	r0, sp, #8
   b434e:	f009 fbc1 	bl	bdad4 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4352:	4b19      	ldr	r3, [pc, #100]	; (b43b8 <_Z29acknowledgeJoinRequestGatewayi+0xe4>)
   b4354:	881d      	ldrh	r5, [r3, #0]
   b4356:	2101      	movs	r1, #1
   b4358:	4628      	mov	r0, r5
   b435a:	f00a f968 	bl	be62e <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.nodeNumber, JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b435e:	2302      	movs	r3, #2
   b4360:	9300      	str	r3, [sp, #0]
   b4362:	4621      	mov	r1, r4
   b4364:	78bb      	ldrb	r3, [r7, #2]
   b4366:	4815      	ldr	r0, [pc, #84]	; (b43bc <_Z29acknowledgeJoinRequestGatewayi+0xe8>)
   b4368:	2209      	movs	r2, #9
   b436a:	f005 f8a3 	bl	b94b4 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b436e:	4604      	mov	r4, r0
   b4370:	b968      	cbnz	r0, b438e <_Z29acknowledgeJoinRequestGatewayi+0xba>
		Log.info("Response received successfully");
   b4372:	4913      	ldr	r1, [pc, #76]	; (b43c0 <_Z29acknowledgeJoinRequestGatewayi+0xec>)
   b4374:	480f      	ldr	r0, [pc, #60]	; (b43b4 <_Z29acknowledgeJoinRequestGatewayi+0xe0>)
   b4376:	f7ff fea9 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b437a:	4628      	mov	r0, r5
   b437c:	4621      	mov	r1, r4
   b437e:	f00a f956 	bl	be62e <digitalWrite>
		// driver.sleep();                             // Here is where we will power down the LoRA radio module
		return true;
   b4382:	2001      	movs	r0, #1

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	// driver.sleep();                             // Here is where we will power down the LoRA radio module
	return false;
}
   b4384:	b006      	add	sp, #24
   b4386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t newNodeNumber = 0;
   b438a:	2600      	movs	r6, #0
   b438c:	e7b5      	b.n	b42fa <_Z29acknowledgeJoinRequestGatewayi+0x26>
	Log.info("Response not acknowledged");
   b438e:	490d      	ldr	r1, [pc, #52]	; (b43c4 <_Z29acknowledgeJoinRequestGatewayi+0xf0>)
   b4390:	4808      	ldr	r0, [pc, #32]	; (b43b4 <_Z29acknowledgeJoinRequestGatewayi+0xe0>)
   b4392:	f7ff fe9b 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b4396:	4628      	mov	r0, r5
   b4398:	2100      	movs	r1, #0
   b439a:	f00a f948 	bl	be62e <digitalWrite>
	return false;
   b439e:	2000      	movs	r0, #0
   b43a0:	e7f0      	b.n	b4384 <_Z29acknowledgeJoinRequestGatewayi+0xb0>
   b43a2:	bf00      	nop
   b43a4:	2003e3d8 	.word	0x2003e3d8
   b43a8:	2003e408 	.word	0x2003e408
   b43ac:	2003dea1 	.word	0x2003dea1
   b43b0:	000bf9ab 	.word	0x000bf9ab
   b43b4:	2003e658 	.word	0x2003e658
   b43b8:	000bfde4 	.word	0x000bfde4
   b43bc:	2003e04c 	.word	0x2003e04c
   b43c0:	000bf972 	.word	0x000bf972
   b43c4:	000bf991 	.word	0x000bf991

000b43c8 <_Z26decipherAlertReportGatewayv>:


bool decipherAlertReportGateway() {
   b43c8:	b508      	push	{r3, lr}
	current.alertCodeNode = buf[0];
   b43ca:	4b0c      	ldr	r3, [pc, #48]	; (b43fc <_Z26decipherAlertReportGatewayv+0x34>)
   b43cc:	4a0c      	ldr	r2, [pc, #48]	; (b4400 <_Z26decipherAlertReportGatewayv+0x38>)
   b43ce:	7819      	ldrb	r1, [r3, #0]
   b43d0:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	current.alertTimestampNode = (buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]);
   b43d4:	f8d3 1001 	ldr.w	r1, [r3, #1]
	current.rssi = (buf[5] << 8 | buf[6]) - 65535;
   b43d8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
	Log.info("Deciphered alert report from node %d", current.nodeNumber);
   b43dc:	4809      	ldr	r0, [pc, #36]	; (b4404 <_Z26decipherAlertReportGatewayv+0x3c>)
	current.rssi = (buf[5] << 8 | buf[6]) - 65535;
   b43de:	ba5b      	rev16	r3, r3
   b43e0:	3301      	adds	r3, #1
   b43e2:	ba09      	rev	r1, r1
	current.alertTimestampNode = (buf[1] << 24 | buf[2] << 16 | buf[3] <<8 | buf[4]);
   b43e4:	6291      	str	r1, [r2, #40]	; 0x28
	current.rssi = (buf[5] << 8 | buf[6]) - 65535;
   b43e6:	8313      	strh	r3, [r2, #24]
	Log.info("Deciphered alert report from node %d", current.nodeNumber);
   b43e8:	4907      	ldr	r1, [pc, #28]	; (b4408 <_Z26decipherAlertReportGatewayv+0x40>)
   b43ea:	8852      	ldrh	r2, [r2, #2]
   b43ec:	f7ff fe6e 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b43f0:	4b06      	ldr	r3, [pc, #24]	; (b440c <_Z26decipherAlertReportGatewayv+0x44>)
   b43f2:	2206      	movs	r2, #6
   b43f4:	701a      	strb	r2, [r3, #0]

	return true;
}
   b43f6:	2001      	movs	r0, #1
   b43f8:	bd08      	pop	{r3, pc}
   b43fa:	bf00      	nop
   b43fc:	2003dea1 	.word	0x2003dea1
   b4400:	2003e3d8 	.word	0x2003e3d8
   b4404:	2003e658 	.word	0x2003e658
   b4408:	000bf9e9 	.word	0x000bf9e9
   b440c:	2003dea0 	.word	0x2003dea0

000b4410 <_Z27listenForLoRAMessageGatewayv>:
bool listenForLoRAMessageGateway() {
   b4410:	b570      	push	{r4, r5, r6, lr}
   b4412:	b08a      	sub	sp, #40	; 0x28
	uint8_t len = sizeof(buf);
   b4414:	2379      	movs	r3, #121	; 0x79
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag))	{	// We have received a message
   b4416:	2500      	movs	r5, #0
	uint8_t len = sizeof(buf);
   b4418:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag))	{	// We have received a message
   b441c:	4c27      	ldr	r4, [pc, #156]	; (b44bc <_Z27listenForLoRAMessageGatewayv+0xac>)
   b441e:	4828      	ldr	r0, [pc, #160]	; (b44c0 <_Z27listenForLoRAMessageGatewayv+0xb0>)
   b4420:	9504      	str	r5, [sp, #16]
   b4422:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   b4426:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b442a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   b442e:	9300      	str	r3, [sp, #0]
   b4430:	9501      	str	r5, [sp, #4]
   b4432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4436:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   b443a:	4621      	mov	r1, r4
   b443c:	f005 f93e 	bl	b96bc <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   b4440:	4606      	mov	r6, r0
   b4442:	b910      	cbnz	r0, b444a <_Z27listenForLoRAMessageGatewayv+0x3a>
	return false; 
   b4444:	2000      	movs	r0, #0
}
   b4446:	b00a      	add	sp, #40	; 0x28
   b4448:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b444a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		current.deviceID = (buf[0] << 8 | buf[1]);					// Set the current device ID for reporting
   b444e:	491d      	ldr	r1, [pc, #116]	; (b44c4 <_Z27listenForLoRAMessageGatewayv+0xb4>)
		buf[len] = 0;
   b4450:	54e5      	strb	r5, [r4, r3]
		current.deviceID = (buf[0] << 8 | buf[1]);					// Set the current device ID for reporting
   b4452:	8823      	ldrh	r3, [r4, #0]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d and waited for %lu mSec", current.nodeNumber, driver.lastRssi(), loraStateNames[lora_state], len, waitingFor);
   b4454:	481c      	ldr	r0, [pc, #112]	; (b44c8 <_Z27listenForLoRAMessageGatewayv+0xb8>)
		current.deviceID = (buf[0] << 8 | buf[1]);					// Set the current device ID for reporting
   b4456:	ba5b      	rev16	r3, r3
   b4458:	800b      	strh	r3, [r1, #0]
		current.nodeNumber = (buf[2] << 8 | buf[3]);
   b445a:	8863      	ldrh	r3, [r4, #2]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b445c:	4c1b      	ldr	r4, [pc, #108]	; (b44cc <_Z27listenForLoRAMessageGatewayv+0xbc>)
   b445e:	ba5b      	rev16	r3, r3
   b4460:	b29a      	uxth	r2, r3
		current.nodeNumber = (buf[2] << 8 | buf[3]);
   b4462:	804b      	strh	r3, [r1, #2]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4464:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   b4468:	9207      	str	r2, [sp, #28]
   b446a:	f003 030f 	and.w	r3, r3, #15
   b446e:	7023      	strb	r3, [r4, #0]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d and waited for %lu mSec", current.nodeNumber, driver.lastRssi(), loraStateNames[lora_state], len, waitingFor);
   b4470:	f004 fe05 	bl	b907e <_ZN15RHGenericDriver8lastRssiEv>
   b4474:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
   b4478:	9101      	str	r1, [sp, #4]
   b447a:	9502      	str	r5, [sp, #8]
   b447c:	4603      	mov	r3, r0
   b447e:	4914      	ldr	r1, [pc, #80]	; (b44d0 <_Z27listenForLoRAMessageGatewayv+0xc0>)
   b4480:	7820      	ldrb	r0, [r4, #0]
   b4482:	9a07      	ldr	r2, [sp, #28]
   b4484:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4488:	9100      	str	r1, [sp, #0]
   b448a:	4812      	ldr	r0, [pc, #72]	; (b44d4 <_Z27listenForLoRAMessageGatewayv+0xc4>)
   b448c:	4912      	ldr	r1, [pc, #72]	; (b44d8 <_Z27listenForLoRAMessageGatewayv+0xc8>)
   b448e:	f7ff fe1d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(decipherDataReportGateway()) return true;}
   b4492:	7823      	ldrb	r3, [r4, #0]
   b4494:	2b03      	cmp	r3, #3
   b4496:	d006      	beq.n	b44a6 <_Z27listenForLoRAMessageGatewayv+0x96>
		if (lora_state == JOIN_REQ) { if(decipherJoinRequestGateway()) return true;}
   b4498:	7823      	ldrb	r3, [r4, #0]
   b449a:	2b01      	cmp	r3, #1
   b449c:	d108      	bne.n	b44b0 <_Z27listenForLoRAMessageGatewayv+0xa0>
	lora_state = JOIN_ACK;			// Prepare to respond
   b449e:	2302      	movs	r3, #2
   b44a0:	7023      	strb	r3, [r4, #0]
		if (lora_state == JOIN_REQ) { if(decipherJoinRequestGateway()) return true;}
   b44a2:	4630      	mov	r0, r6
   b44a4:	e7cf      	b.n	b4446 <_Z27listenForLoRAMessageGatewayv+0x36>
		if (lora_state == DATA_RPT) { if(decipherDataReportGateway()) return true;}
   b44a6:	f7ff fe7f 	bl	b41a8 <_Z25decipherDataReportGatewayv>
   b44aa:	2800      	cmp	r0, #0
   b44ac:	d0f4      	beq.n	b4498 <_Z27listenForLoRAMessageGatewayv+0x88>
   b44ae:	e7ca      	b.n	b4446 <_Z27listenForLoRAMessageGatewayv+0x36>
		if (lora_state == ALERT_RPT) { if(decipherAlertReportGateway()) return true;}
   b44b0:	2b05      	cmp	r3, #5
   b44b2:	d1c7      	bne.n	b4444 <_Z27listenForLoRAMessageGatewayv+0x34>
   b44b4:	f7ff ff88 	bl	b43c8 <_Z26decipherAlertReportGatewayv>
   b44b8:	e7c5      	b.n	b4446 <_Z27listenForLoRAMessageGatewayv+0x36>
   b44ba:	bf00      	nop
   b44bc:	2003dea1 	.word	0x2003dea1
   b44c0:	2003e04c 	.word	0x2003e04c
   b44c4:	2003e3d8 	.word	0x2003e3d8
   b44c8:	2003df1c 	.word	0x2003df1c
   b44cc:	2003dea0 	.word	0x2003dea0
   b44d0:	2003dcac 	.word	0x2003dcac
   b44d4:	2003e658 	.word	0x2003e658
   b44d8:	000bfa0e 	.word	0x000bfa0e

000b44dc <_Z29acknowledgeAlertReportGatewayi>:

bool acknowledgeAlertReportGateway(int nextSeconds) {
   b44dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = 0;									// Reserved
   b44e0:	4c2c      	ldr	r4, [pc, #176]	; (b4594 <_Z29acknowledgeAlertReportGatewayi+0xb8>)
	Log.info("Preparing acknowledgement with %i seconds",nextSecondsShort);
   b44e2:	492d      	ldr	r1, [pc, #180]	; (b4598 <_Z29acknowledgeAlertReportGatewayi+0xbc>)
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
	buf[5] = highByte(nextSecondsShort);		// Seconds until next report - for Nodes
	buf[6] = lowByte(nextSecondsShort);
	
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", current.nodeNumber, Time.timeStr(Time.now()).c_str(), nextSecondsShort);
   b44e4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b45b4 <_Z29acknowledgeAlertReportGatewayi+0xd8>
   b44e8:	b287      	uxth	r7, r0
bool acknowledgeAlertReportGateway(int nextSeconds) {
   b44ea:	b086      	sub	sp, #24
	Log.info("Preparing acknowledgement with %i seconds",nextSecondsShort);
   b44ec:	463a      	mov	r2, r7
bool acknowledgeAlertReportGateway(int nextSeconds) {
   b44ee:	4606      	mov	r6, r0
	buf[0] = 0;									// Reserved
   b44f0:	2500      	movs	r5, #0
	Log.info("Preparing acknowledgement with %i seconds",nextSecondsShort);
   b44f2:	482a      	ldr	r0, [pc, #168]	; (b459c <_Z29acknowledgeAlertReportGatewayi+0xc0>)
   b44f4:	f7ff fdea 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = 0;									// Reserved
   b44f8:	7025      	strb	r5, [r4, #0]
	buf[1] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b44fa:	f009 fe8a 	bl	be212 <_ZN9TimeClass3nowEv>
   b44fe:	1600      	asrs	r0, r0, #24
   b4500:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b4502:	f009 fe86 	bl	be212 <_ZN9TimeClass3nowEv>
   b4506:	1400      	asrs	r0, r0, #16
   b4508:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b450a:	f009 fe82 	bl	be212 <_ZN9TimeClass3nowEv>
   b450e:	1200      	asrs	r0, r0, #8
   b4510:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   b4512:	f009 fe7e 	bl	be212 <_ZN9TimeClass3nowEv>
	buf[5] = highByte(nextSecondsShort);		// Seconds until next report - for Nodes
   b4516:	f3c6 2307 	ubfx	r3, r6, #8, #8
   b451a:	7163      	strb	r3, [r4, #5]
	buf[6] = lowByte(nextSecondsShort);
   b451c:	71a6      	strb	r6, [r4, #6]
	buf[4] = ((uint8_t) (Time.now()));		    // First byte			
   b451e:	7120      	strb	r0, [r4, #4]
	Log.info("Sent response to Node %d, time = %s, next report = %u seconds", current.nodeNumber, Time.timeStr(Time.now()).c_str(), nextSecondsShort);
   b4520:	f8b8 6002 	ldrh.w	r6, [r8, #2]
   b4524:	f009 fe75 	bl	be212 <_ZN9TimeClass3nowEv>
   b4528:	4602      	mov	r2, r0
   b452a:	17c3      	asrs	r3, r0, #31
   b452c:	a802      	add	r0, sp, #8
   b452e:	f009 fd6b 	bl	be008 <_ZN9TimeClass7timeStrEx>
   b4532:	4632      	mov	r2, r6
   b4534:	9b02      	ldr	r3, [sp, #8]
   b4536:	491a      	ldr	r1, [pc, #104]	; (b45a0 <_Z29acknowledgeAlertReportGatewayi+0xc4>)
   b4538:	4818      	ldr	r0, [pc, #96]	; (b459c <_Z29acknowledgeAlertReportGatewayi+0xc0>)
   b453a:	9700      	str	r7, [sp, #0]
   b453c:	f7ff fdc6 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b4540:	a802      	add	r0, sp, #8
   b4542:	f009 fac7 	bl	bdad4 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4546:	4b17      	ldr	r3, [pc, #92]	; (b45a4 <_Z29acknowledgeAlertReportGatewayi+0xc8>)
   b4548:	881e      	ldrh	r6, [r3, #0]
   b454a:	2101      	movs	r1, #1
   b454c:	4630      	mov	r0, r6
   b454e:	f00a f86e 	bl	be62e <digitalWrite>

	if (manager.sendtoWait(buf, 7, current.nodeNumber, ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b4552:	2306      	movs	r3, #6
   b4554:	9300      	str	r3, [sp, #0]
   b4556:	4621      	mov	r1, r4
   b4558:	f898 3002 	ldrb.w	r3, [r8, #2]
   b455c:	4812      	ldr	r0, [pc, #72]	; (b45a8 <_Z29acknowledgeAlertReportGatewayi+0xcc>)
   b455e:	2207      	movs	r2, #7
   b4560:	f004 ffa8 	bl	b94b4 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4564:	4604      	mov	r4, r0
   b4566:	b958      	cbnz	r0, b4580 <_Z29acknowledgeAlertReportGatewayi+0xa4>
		Log.info("Response received successfully");
   b4568:	4910      	ldr	r1, [pc, #64]	; (b45ac <_Z29acknowledgeAlertReportGatewayi+0xd0>)
   b456a:	480c      	ldr	r0, [pc, #48]	; (b459c <_Z29acknowledgeAlertReportGatewayi+0xc0>)
   b456c:	f7ff fdae 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4570:	4630      	mov	r0, r6
   b4572:	4621      	mov	r1, r4
   b4574:	f00a f85b 	bl	be62e <digitalWrite>
		// driver.sleep();                             // Here is where we will power down the LoRA radio module
		return true;
   b4578:	2001      	movs	r0, #1

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	// driver.sleep();                             // Here is where we will power down the LoRA radio module
	return false;
}
   b457a:	b006      	add	sp, #24
   b457c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Log.info("Response not acknowledged");
   b4580:	490b      	ldr	r1, [pc, #44]	; (b45b0 <_Z29acknowledgeAlertReportGatewayi+0xd4>)
   b4582:	4806      	ldr	r0, [pc, #24]	; (b459c <_Z29acknowledgeAlertReportGatewayi+0xc0>)
   b4584:	f7ff fda2 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b4588:	4630      	mov	r0, r6
   b458a:	4629      	mov	r1, r5
   b458c:	f00a f84f 	bl	be62e <digitalWrite>
	return false;
   b4590:	4628      	mov	r0, r5
   b4592:	e7f2      	b.n	b457a <_Z29acknowledgeAlertReportGatewayi+0x9e>
   b4594:	2003dea1 	.word	0x2003dea1
   b4598:	000bfa65 	.word	0x000bfa65
   b459c:	2003e658 	.word	0x2003e658
   b45a0:	000bf9ab 	.word	0x000bf9ab
   b45a4:	000bfde4 	.word	0x000bfde4
   b45a8:	2003e04c 	.word	0x2003e04c
   b45ac:	000bf972 	.word	0x000bf972
   b45b0:	000bf991 	.word	0x000bf991
   b45b4:	2003e3d8 	.word	0x2003e3d8

000b45b8 <_Z28respondForLoRAMessageGatewayi>:
bool respondForLoRAMessageGateway(int nextSeconds) {
   b45b8:	b538      	push	{r3, r4, r5, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b45ba:	4d12      	ldr	r5, [pc, #72]	; (b4604 <_Z28respondForLoRAMessageGatewayi+0x4c>)
   b45bc:	4b12      	ldr	r3, [pc, #72]	; (b4608 <_Z28respondForLoRAMessageGatewayi+0x50>)
   b45be:	782a      	ldrb	r2, [r5, #0]
   b45c0:	4912      	ldr	r1, [pc, #72]	; (b460c <_Z28respondForLoRAMessageGatewayi+0x54>)
   b45c2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
bool respondForLoRAMessageGateway(int nextSeconds) {
   b45c6:	4604      	mov	r4, r0
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b45c8:	4811      	ldr	r0, [pc, #68]	; (b4610 <_Z28respondForLoRAMessageGatewayi+0x58>)
   b45ca:	f7ff fd7f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(acknowledgeDataReportGateway(nextSeconds)) return true;}
   b45ce:	782b      	ldrb	r3, [r5, #0]
   b45d0:	2b04      	cmp	r3, #4
   b45d2:	d00b      	beq.n	b45ec <_Z28respondForLoRAMessageGatewayi+0x34>
	if (lora_state == JOIN_ACK) { if(acknowledgeJoinRequestGateway(nextSeconds)) return true;}
   b45d4:	782b      	ldrb	r3, [r5, #0]
   b45d6:	2b02      	cmp	r3, #2
   b45d8:	d103      	bne.n	b45e2 <_Z28respondForLoRAMessageGatewayi+0x2a>
   b45da:	4620      	mov	r0, r4
   b45dc:	f7ff fe7a 	bl	b42d4 <_Z29acknowledgeJoinRequestGatewayi>
   b45e0:	b948      	cbnz	r0, b45f6 <_Z28respondForLoRAMessageGatewayi+0x3e>
	if (lora_state == ALERT_ACK) { if(acknowledgeAlertReportGateway(nextSeconds)) return true;}
   b45e2:	782b      	ldrb	r3, [r5, #0]
   b45e4:	2b06      	cmp	r3, #6
   b45e6:	d008      	beq.n	b45fa <_Z28respondForLoRAMessageGatewayi+0x42>
	return false; 
   b45e8:	2000      	movs	r0, #0
   b45ea:	e005      	b.n	b45f8 <_Z28respondForLoRAMessageGatewayi+0x40>
	if (lora_state == DATA_ACK) { if(acknowledgeDataReportGateway(nextSeconds)) return true;}
   b45ec:	4620      	mov	r0, r4
   b45ee:	f7ff fe07 	bl	b4200 <_Z28acknowledgeDataReportGatewayi>
   b45f2:	2800      	cmp	r0, #0
   b45f4:	d0ee      	beq.n	b45d4 <_Z28respondForLoRAMessageGatewayi+0x1c>
   b45f6:	2001      	movs	r0, #1
}
   b45f8:	bd38      	pop	{r3, r4, r5, pc}
	if (lora_state == ALERT_ACK) { if(acknowledgeAlertReportGateway(nextSeconds)) return true;}
   b45fa:	4620      	mov	r0, r4
}
   b45fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (lora_state == ALERT_ACK) { if(acknowledgeAlertReportGateway(nextSeconds)) return true;}
   b4600:	f7ff bf6c 	b.w	b44dc <_Z29acknowledgeAlertReportGatewayi>
   b4604:	2003dea0 	.word	0x2003dea0
   b4608:	2003dcac 	.word	0x2003dcac
   b460c:	000bfa8f 	.word	0x000bfa8f
   b4610:	2003e658 	.word	0x2003e658

000b4614 <_GLOBAL__sub_I_loraStateNames>:
	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
	sysStatus.nextReportSeconds = ((buf[5] << 8) | buf[6]);
	Time.setTime(newTime);  // Set time based on response from gateway
	Log.info("Time set to %s, node is %d and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.nodeNumber, sysStatus.nextReportSeconds);
	return true;
}
   b4614:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4616:	4a08      	ldr	r2, [pc, #32]	; (b4638 <_GLOBAL__sub_I_loraStateNames+0x24>)
   b4618:	4c08      	ldr	r4, [pc, #32]	; (b463c <_GLOBAL__sub_I_loraStateNames+0x28>)
   b461a:	4909      	ldr	r1, [pc, #36]	; (b4640 <_GLOBAL__sub_I_loraStateNames+0x2c>)
   b461c:	7812      	ldrb	r2, [r2, #0]
   b461e:	7809      	ldrb	r1, [r1, #0]
   b4620:	4b08      	ldr	r3, [pc, #32]	; (b4644 <_GLOBAL__sub_I_loraStateNames+0x30>)
   b4622:	4620      	mov	r0, r4
   b4624:	f005 fc6a 	bl	b9efc <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4628:	4621      	mov	r1, r4
   b462a:	4807      	ldr	r0, [pc, #28]	; (b4648 <_GLOBAL__sub_I_loraStateNames+0x34>)
}
   b462c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4630:	2200      	movs	r2, #0
   b4632:	f004 bf35 	b.w	b94a0 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4636:	bf00      	nop
   b4638:	000bfdea 	.word	0x000bfdea
   b463c:	2003df1c 	.word	0x2003df1c
   b4640:	000bfde8 	.word	0x000bfde8
   b4644:	2003e45c 	.word	0x2003e45c
   b4648:	2003e04c 	.word	0x2003e04c

000b464c <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b464c:	4b01      	ldr	r3, [pc, #4]	; (b4654 <_Z18outOfMemoryHandleryi+0x8>)
   b464e:	601a      	str	r2, [r3, #0]
}
   b4650:	4770      	bx	lr
   b4652:	bf00      	nop
   b4654:	2003dd24 	.word	0x2003dd24

000b4658 <_Z13userSwitchISRv>:
    System.reset();
  }
}

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b4658:	4b01      	ldr	r3, [pc, #4]	; (b4660 <_Z13userSwitchISRv+0x8>)
   b465a:	2201      	movs	r2, #1
   b465c:	701a      	strb	r2, [r3, #0]
}
   b465e:	4770      	bx	lr
   b4660:	2003e389 	.word	0x2003e389

000b4664 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4664:	b530      	push	{r4, r5, lr}
   b4666:	b085      	sub	sp, #20
   b4668:	4604      	mov	r4, r0
   b466a:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b466c:	b160      	cbz	r0, b4688 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b466e:	6840      	ldr	r0, [r0, #4]
   b4670:	b150      	cbz	r0, b4688 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4672:	6885      	ldr	r5, [r0, #8]
   b4674:	b145      	cbz	r5, b4688 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4676:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b467a:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b467e:	68c4      	ldr	r4, [r0, #12]
   b4680:	ab01      	add	r3, sp, #4
   b4682:	466a      	mov	r2, sp
   b4684:	a902      	add	r1, sp, #8
   b4686:	47a0      	blx	r4
    }
   b4688:	b005      	add	sp, #20
   b468a:	bd30      	pop	{r4, r5, pc}

000b468c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b468c:	b510      	push	{r4, lr}
   b468e:	4b03      	ldr	r3, [pc, #12]	; (b469c <_ZN8MB85RC64D1Ev+0x10>)
   b4690:	6003      	str	r3, [r0, #0]
   b4692:	4604      	mov	r4, r0
   b4694:	f003 fd53 	bl	b813e <_ZN6MB85RCD1Ev>
   b4698:	4620      	mov	r0, r4
   b469a:	bd10      	pop	{r4, pc}
   b469c:	000bfd9c 	.word	0x000bfd9c

000b46a0 <_ZN8MB85RC64D0Ev>:
   b46a0:	b510      	push	{r4, lr}
   b46a2:	4604      	mov	r4, r0
   b46a4:	f7ff fff2 	bl	b468c <_ZN8MB85RC64D1Ev>
   b46a8:	4620      	mov	r0, r4
   b46aa:	2110      	movs	r1, #16
   b46ac:	f7ff fcf7 	bl	b409e <_ZdlPvj>
   b46b0:	4620      	mov	r0, r4
   b46b2:	bd10      	pop	{r4, pc}

000b46b4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b46b4:	b530      	push	{r4, r5, lr}
   b46b6:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b46b8:	6800      	ldr	r0, [r0, #0]
   b46ba:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b46c2:	6883      	ldr	r3, [r0, #8]
   b46c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b46c8:	b90b      	cbnz	r3, b46ce <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b46ca:	f00a f8b3 	bl	be834 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b46ce:	68c3      	ldr	r3, [r0, #12]
   b46d0:	aa01      	add	r2, sp, #4
   b46d2:	a902      	add	r1, sp, #8
   b46d4:	4798      	blx	r3
      }
   b46d6:	b005      	add	sp, #20
   b46d8:	bd30      	pop	{r4, r5, pc}

000b46da <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b46da:	2a01      	cmp	r2, #1
   b46dc:	d102      	bne.n	b46e4 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b46de:	6001      	str	r1, [r0, #0]
      }
   b46e0:	2000      	movs	r0, #0
   b46e2:	4770      	bx	lr
	  switch (__op)
   b46e4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b46e6:	bf04      	itt	eq
   b46e8:	680b      	ldreq	r3, [r1, #0]
   b46ea:	6003      	streq	r3, [r0, #0]
	      break;
   b46ec:	e7f8      	b.n	b46e0 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b46ee <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b46ee:	6803      	ldr	r3, [r0, #0]
   b46f0:	6812      	ldr	r2, [r2, #0]
   b46f2:	e9d1 0100 	ldrd	r0, r1, [r1]
   b46f6:	4718      	bx	r3

000b46f8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b46f8:	b510      	push	{r4, lr}
      if (_M_manager)
   b46fa:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b46fc:	4604      	mov	r4, r0
      if (_M_manager)
   b46fe:	b113      	cbz	r3, b4706 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4700:	2203      	movs	r2, #3
   b4702:	4601      	mov	r1, r0
   b4704:	4798      	blx	r3
    }
   b4706:	4620      	mov	r0, r4
   b4708:	bd10      	pop	{r4, pc}

000b470a <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b470a:	b510      	push	{r4, lr}
            delete callableWrapper;
   b470c:	4604      	mov	r4, r0
   b470e:	b138      	cbz	r0, b4720 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4710:	f7ff fff2 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   b4714:	4620      	mov	r0, r4
   b4716:	2110      	movs	r1, #16
        };
   b4718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b471c:	f7ff bcbf 	b.w	b409e <_ZdlPvj>
        };
   b4720:	bd10      	pop	{r4, pc}
	...

000b4724 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>:
     * 
     * Note that 24:00:00 is not a valid time. You should generally use inclusive times such that
     * 23:59:59 is the end of the day.
     * 
     */
    LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd = LocalTimeHMS("23:59:59")) : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(hmsStart), hmsEnd(hmsEnd) {
   b4724:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   b4726:	247f      	movs	r4, #127	; 0x7f
   b4728:	7004      	strb	r4, [r0, #0]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b472a:	2400      	movs	r4, #0
   b472c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4730:	e9c0 4403 	strd	r4, r4, [r0, #12]
   b4734:	e9c0 4405 	strd	r4, r4, [r0, #20]
class LocalTimeHMS {
   b4738:	6849      	ldr	r1, [r1, #4]
   b473a:	4c03      	ldr	r4, [pc, #12]	; (b4748 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_+0x24>)
   b473c:	6852      	ldr	r2, [r2, #4]
   b473e:	61c4      	str	r4, [r0, #28]
   b4740:	e9c0 1408 	strd	r1, r4, [r0, #32]
   b4744:	6282      	str	r2, [r0, #40]	; 0x28
    }
   b4746:	bd10      	pop	{r4, pc}
   b4748:	000c0568 	.word	0x000c0568

000b474c <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b474c:	b530      	push	{r4, r5, lr}
	unsigned long secondsToReturn = 0;
	unsigned long wakeBoundary = sysStatus.frequencyMinutes * 60UL;
   b474e:	4b13      	ldr	r3, [pc, #76]	; (b479c <_Z21secondsUntilNextEventv+0x50>)
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4750:	b085      	sub	sp, #20
	unsigned long wakeBoundary = sysStatus.frequencyMinutes * 60UL;
   b4752:	8b9c      	ldrh	r4, [r3, #28]
   	if (Time.isValid()) {
   b4754:	f009 fd40 	bl	be1d8 <_ZN9TimeClass7isValidEv>
   b4758:	b1e8      	cbz	r0, b4796 <_Z21secondsUntilNextEventv+0x4a>

		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // Adding one second to reduce prospect of round tripping to IDLE
   b475a:	f009 fd5a 	bl	be212 <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.frequencyMinutes * 60UL;
   b475e:	253c      	movs	r5, #60	; 0x3c
   b4760:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // Adding one second to reduce prospect of round tripping to IDLE
   b4762:	fbb0 f4f5 	udiv	r4, r0, r5
   b4766:	fb04 0015 	mls	r0, r4, r5, r0
   b476a:	1a2c      	subs	r4, r5, r0
    
        Log.info("local time: %s and next event is %lu seconds away", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str(), secondsToReturn);
   b476c:	4b0c      	ldr	r3, [pc, #48]	; (b47a0 <_Z21secondsUntilNextEventv+0x54>)
   b476e:	490d      	ldr	r1, [pc, #52]	; (b47a4 <_Z21secondsUntilNextEventv+0x58>)
   b4770:	681a      	ldr	r2, [r3, #0]
   b4772:	42ac      	cmp	r4, r5
   b4774:	bf28      	it	cs
   b4776:	462c      	movcs	r4, r5
   b4778:	4668      	mov	r0, sp
   b477a:	f002 ff17 	bl	b75ac <_ZN16LocalTimeConvert6formatEPKc>
   b477e:	480a      	ldr	r0, [pc, #40]	; (b47a8 <_Z21secondsUntilNextEventv+0x5c>)
   b4780:	9a00      	ldr	r2, [sp, #0]
   b4782:	490a      	ldr	r1, [pc, #40]	; (b47ac <_Z21secondsUntilNextEventv+0x60>)
   b4784:	4623      	mov	r3, r4
   b4786:	f7ff fca1 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b478a:	4668      	mov	r0, sp
   b478c:	f009 f9a2 	bl	bdad4 <_ZN6StringD1Ev>

    }
	return secondsToReturn;
   b4790:	4620      	mov	r0, r4
   b4792:	b005      	add	sp, #20
   b4794:	bd30      	pop	{r4, r5, pc}
	unsigned long secondsToReturn = 0;
   b4796:	4604      	mov	r4, r0
   b4798:	e7fa      	b.n	b4790 <_Z21secondsUntilNextEventv+0x44>
   b479a:	bf00      	nop
   b479c:	2003e408 	.word	0x2003e408
   b47a0:	2003de2c 	.word	0x2003de2c
   b47a4:	2003e260 	.word	0x2003e260
   b47a8:	2003e658 	.word	0x2003e658
   b47ac:	000bfab4 	.word	0x000bfab4

000b47b0 <_Z22publishStateTransitionv>:
{
   b47b0:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b47b2:	4e1c      	ldr	r6, [pc, #112]	; (b4824 <_Z22publishStateTransitionv+0x74>)
   b47b4:	4c1c      	ldr	r4, [pc, #112]	; (b4828 <_Z22publishStateTransitionv+0x78>)
   b47b6:	7832      	ldrb	r2, [r6, #0]
   b47b8:	4d1c      	ldr	r5, [pc, #112]	; (b482c <_Z22publishStateTransitionv+0x7c>)
   b47ba:	2a02      	cmp	r2, #2
{
   b47bc:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b47be:	d128      	bne.n	b4812 <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b47c0:	f009 fd0a 	bl	be1d8 <_ZN9TimeClass7isValidEv>
   b47c4:	7832      	ldrb	r2, [r6, #0]
   b47c6:	782b      	ldrb	r3, [r5, #0]
   b47c8:	b958      	cbnz	r0, b47e2 <_Z22publishStateTransitionv+0x32>
   b47ca:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b47ce:	9200      	str	r2, [sp, #0]
   b47d0:	4a17      	ldr	r2, [pc, #92]	; (b4830 <_Z22publishStateTransitionv+0x80>)
   b47d2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b47d6:	f44f 7180 	mov.w	r1, #256	; 0x100
   b47da:	a804      	add	r0, sp, #16
   b47dc:	f006 fdb8 	bl	bb350 <snprintf>
   b47e0:	e00f      	b.n	b4802 <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b47e2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b47e6:	9303      	str	r3, [sp, #12]
   b47e8:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b47ec:	f7ff ffae 	bl	b474c <_Z21secondsUntilNextEventv>
   b47f0:	9b03      	ldr	r3, [sp, #12]
   b47f2:	4a10      	ldr	r2, [pc, #64]	; (b4834 <_Z22publishStateTransitionv+0x84>)
   b47f4:	e9cd 4000 	strd	r4, r0, [sp]
   b47f8:	f44f 7180 	mov.w	r1, #256	; 0x100
   b47fc:	a804      	add	r0, sp, #16
   b47fe:	f006 fda7 	bl	bb350 <snprintf>
	oldState = state;
   b4802:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4804:	480c      	ldr	r0, [pc, #48]	; (b4838 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b4806:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4808:	a904      	add	r1, sp, #16
   b480a:	f7ff fc5f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
}
   b480e:	b044      	add	sp, #272	; 0x110
   b4810:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4812:	782b      	ldrb	r3, [r5, #0]
   b4814:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4818:	9200      	str	r2, [sp, #0]
   b481a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b481e:	4a07      	ldr	r2, [pc, #28]	; (b483c <_Z22publishStateTransitionv+0x8c>)
   b4820:	e7d9      	b.n	b47d6 <_Z22publishStateTransitionv+0x26>
   b4822:	bf00      	nop
   b4824:	2003e388 	.word	0x2003e388
   b4828:	2003dd28 	.word	0x2003dd28
   b482c:	2003e351 	.word	0x2003e351
   b4830:	000bfae6 	.word	0x000bfae6
   b4834:	000bfb06 	.word	0x000bfb06
   b4838:	2003e658 	.word	0x2003e658
   b483c:	000bfb23 	.word	0x000bfb23

000b4840 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4840:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4842:	2300      	movs	r3, #0
   b4844:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4846:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4848:	4604      	mov	r4, r0
   b484a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b484c:	b12b      	cbz	r3, b485a <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b484e:	2202      	movs	r2, #2
   b4850:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4852:	68eb      	ldr	r3, [r5, #12]
   b4854:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4856:	68ab      	ldr	r3, [r5, #8]
   b4858:	60a3      	str	r3, [r4, #8]
    }
   b485a:	4620      	mov	r0, r4
   b485c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4860 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4864:	b095      	sub	sp, #84	; 0x54
   b4866:	4605      	mov	r5, r0
        };
   b4868:	991c      	ldr	r1, [sp, #112]	; 0x70
   b486a:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b486c:	4690      	mov	r8, r2
   b486e:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4870:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4872:	f7ff ffe5 	bl	b4840 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4876:	a904      	add	r1, sp, #16
   b4878:	a808      	add	r0, sp, #32
   b487a:	f7ff ffe1 	bl	b4840 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b487e:	a908      	add	r1, sp, #32
   b4880:	4630      	mov	r0, r6
   b4882:	f7ff ffdd 	bl	b4840 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4886:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b488a:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b488c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4890:	f7ff fc01 	bl	b4096 <_Znwj>
   b4894:	4604      	mov	r4, r0
   b4896:	b1a0      	cbz	r0, b48c2 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4898:	e896 0003 	ldmia.w	r6, {r0, r1}
   b489c:	ab01      	add	r3, sp, #4
   b489e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b48a2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b48a6:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b48aa:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b48ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b48b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b48b2:	60a3      	str	r3, [r4, #8]
   b48b4:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b48b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b48ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b48be:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b48c0:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b48c2:	4b24      	ldr	r3, [pc, #144]	; (b4954 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b48c4:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b48c6:	4b24      	ldr	r3, [pc, #144]	; (b4958 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b48c8:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b48ca:	2200      	movs	r2, #0
   b48cc:	2300      	movs	r3, #0
   b48ce:	f04f 0900 	mov.w	r9, #0
   b48d2:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b48d6:	4b21      	ldr	r3, [pc, #132]	; (b495c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b48d8:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b48dc:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b48de:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b48e0:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b48e4:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b48e8:	f7ff fbd5 	bl	b4096 <_Znwj>
   b48ec:	4604      	mov	r4, r0
   b48ee:	b1d8      	cbz	r0, b4928 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b48f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b48f2:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b48f6:	b133      	cbz	r3, b4906 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b48f8:	2202      	movs	r2, #2
   b48fa:	a910      	add	r1, sp, #64	; 0x40
   b48fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b48fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4900:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4902:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4904:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4906:	4b16      	ldr	r3, [pc, #88]	; (b4960 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4908:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b490a:	4a16      	ldr	r2, [pc, #88]	; (b4964 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b490c:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b490e:	ab01      	add	r3, sp, #4
   b4910:	4640      	mov	r0, r8
   b4912:	4639      	mov	r1, r7
   b4914:	f006 fbd0 	bl	bb0b8 <system_subscribe_event>
        if (r) {
   b4918:	b1b0      	cbz	r0, b4948 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b491a:	4620      	mov	r0, r4
   b491c:	f7ff feec 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4920:	2110      	movs	r1, #16
   b4922:	4620      	mov	r0, r4
   b4924:	f7ff fbbb 	bl	b409e <_ZdlPvj>
   b4928:	a810      	add	r0, sp, #64	; 0x40
   b492a:	f7ff fee5 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   b492e:	4630      	mov	r0, r6
   b4930:	f7ff fee2 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   b4934:	a808      	add	r0, sp, #32
   b4936:	f7ff fedf 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   b493a:	a804      	add	r0, sp, #16
   b493c:	f7ff fedc 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
    }
   b4940:	4628      	mov	r0, r5
   b4942:	b015      	add	sp, #84	; 0x54
   b4944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4948:	9b02      	ldr	r3, [sp, #8]
   b494a:	60ab      	str	r3, [r5, #8]
   b494c:	e9c5 8700 	strd	r8, r7, [r5]
   b4950:	e7ea      	b.n	b4928 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4952:	bf00      	nop
   b4954:	000b46b5 	.word	0x000b46b5
   b4958:	000b4969 	.word	0x000b4969
   b495c:	000c0002 	.word	0x000c0002
   b4960:	000b470b 	.word	0x000b470b
   b4964:	000b4665 	.word	0x000b4665

000b4968 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4968:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b496a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b496c:	4604      	mov	r4, r0
	switch (__op)
   b496e:	d104      	bne.n	b497a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4970:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4972:	6003      	str	r3, [r0, #0]
      }
   b4974:	2000      	movs	r0, #0
   b4976:	b003      	add	sp, #12
   b4978:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b497a:	2a02      	cmp	r2, #2
   b497c:	d00c      	beq.n	b4998 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b497e:	2a03      	cmp	r2, #3
   b4980:	d1f8      	bne.n	b4974 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4982:	6804      	ldr	r4, [r0, #0]
   b4984:	2c00      	cmp	r4, #0
   b4986:	d0f5      	beq.n	b4974 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4988:	4620      	mov	r0, r4
   b498a:	f7ff feb5 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b498e:	2110      	movs	r1, #16
   b4990:	4620      	mov	r0, r4
   b4992:	f7ff fb84 	bl	b409e <_ZdlPvj>
   b4996:	e7ed      	b.n	b4974 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4998:	6809      	ldr	r1, [r1, #0]
   b499a:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b499c:	2010      	movs	r0, #16
   b499e:	f7ff fb7a 	bl	b4096 <_Znwj>
   b49a2:	4605      	mov	r5, r0
   b49a4:	b110      	cbz	r0, b49ac <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b49a6:	9901      	ldr	r1, [sp, #4]
   b49a8:	f7ff ff4a 	bl	b4840 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b49ac:	6025      	str	r5, [r4, #0]
	}
   b49ae:	e7e1      	b.n	b4974 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b49b0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b49b0:	b510      	push	{r4, lr}
   b49b2:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
   b49b4:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   b49b6:	b118      	cbz	r0, b49c0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b49b8:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b49ba:	1a09      	subs	r1, r1, r0
   b49bc:	f7ff fb6f 	bl	b409e <_ZdlPvj>
      }
   b49c0:	4620      	mov	r0, r4
   b49c2:	bd10      	pop	{r4, pc}

000b49c4 <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   b49c4:	b510      	push	{r4, lr}
   b49c6:	4604      	mov	r4, r0
   b49c8:	3024      	adds	r0, #36	; 0x24
   b49ca:	f002 f94c 	bl	b6c66 <_ZN12LocalTimeHMSD1Ev>
   b49ce:	f104 001c 	add.w	r0, r4, #28
   b49d2:	f002 f948 	bl	b6c66 <_ZN12LocalTimeHMSD1Ev>
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
   b49d6:	f104 0010 	add.w	r0, r4, #16
   b49da:	f7ff ffe9 	bl	b49b0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EED1Ev>
   b49de:	1d20      	adds	r0, r4, #4
   b49e0:	f7ff ffe6 	bl	b49b0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EED1Ev>
   b49e4:	4620      	mov	r0, r4
   b49e6:	bd10      	pop	{r4, pc}

000b49e8 <loop>:
void loop() {
   b49e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b49ec:	4d9c      	ldr	r5, [pc, #624]	; (b4c60 <loop+0x278>)
   b49ee:	782b      	ldrb	r3, [r5, #0]
   b49f0:	3b01      	subs	r3, #1
void loop() {
   b49f2:	b0d3      	sub	sp, #332	; 0x14c
   b49f4:	2b06      	cmp	r3, #6
   b49f6:	d817      	bhi.n	b4a28 <loop+0x40>
   b49f8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b49fc:	000701da 	.word	0x000701da
   b4a00:	00d10029 	.word	0x00d10029
   b4a04:	01c0019f 	.word	0x01c0019f
   b4a08:	015e      	.short	0x015e
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4a0a:	4b96      	ldr	r3, [pc, #600]	; (b4c64 <loop+0x27c>)
   b4a0c:	781b      	ldrb	r3, [r3, #0]
   b4a0e:	2b02      	cmp	r3, #2
   b4a10:	d001      	beq.n	b4a16 <loop+0x2e>
   b4a12:	f7ff fecd 	bl	b47b0 <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b4a16:	4b94      	ldr	r3, [pc, #592]	; (b4c68 <loop+0x280>)
   b4a18:	781a      	ldrb	r2, [r3, #0]
   b4a1a:	b11a      	cbz	r2, b4a24 <loop+0x3c>
				nextEventTime = false;
   b4a1c:	2200      	movs	r2, #0
   b4a1e:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b4a20:	2304      	movs	r3, #4
   b4a22:	e000      	b.n	b4a26 <loop+0x3e>
			else state = SLEEPING_STATE;
   b4a24:	2303      	movs	r3, #3
   b4a26:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b4a28:	4890      	ldr	r0, [pc, #576]	; (b4c6c <loop+0x284>)
   b4a2a:	f001 fe63 	bl	b66f4 <_ZN6AB18054loopEv>
	storageObjectLoop();   							// Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   b4a2e:	f000 ffa7 	bl	b5980 <_Z17storageObjectLoopv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b4a32:	f003 fdff 	bl	b8634 <_ZN17PublishQueuePosix8instanceEv>
   b4a36:	f003 fcef 	bl	b8418 <_ZN17PublishQueuePosix4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b4a3a:	4b8d      	ldr	r3, [pc, #564]	; (b4c70 <loop+0x288>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	2b00      	cmp	r3, #0
   b4a40:	f2c0 81ea 	blt.w	b4e18 <loop+0x430>
}
   b4a44:	b053      	add	sp, #332	; 0x14c
   b4a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b4a4a:	f009 b9f6 	b.w	bde3a <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4a4e:	4b85      	ldr	r3, [pc, #532]	; (b4c64 <loop+0x27c>)
   b4a50:	781b      	ldrb	r3, [r3, #0]
   b4a52:	2b03      	cmp	r3, #3
   b4a54:	d001      	beq.n	b4a5a <loop+0x72>
   b4a56:	f7ff feab 	bl	b47b0 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4a5a:	2100      	movs	r1, #0
   b4a5c:	4883      	ldr	r0, [pc, #524]	; (b4c6c <loop+0x284>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4a5e:	4c85      	ldr	r4, [pc, #532]	; (b4c74 <loop+0x28c>)
   b4a60:	f001 fa9c 	bl	b5f9c <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b4a64:	f7ff fe72 	bl	b474c <_Z21secondsUntilNextEventv>
   b4a68:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b4a6a:	f009 fbd2 	bl	be212 <_ZN9TimeClass3nowEv>
   b4a6e:	19c2      	adds	r2, r0, r7
   b4a70:	17d3      	asrs	r3, r2, #31
   b4a72:	a812      	add	r0, sp, #72	; 0x48
   b4a74:	f009 fac8 	bl	be008 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4a7a:	930a      	str	r3, [sp, #40]	; 0x28
   b4a7c:	f009 fa40 	bl	bdf00 <_ZN11SystemClass10freeMemoryEv>
   b4a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4a82:	497d      	ldr	r1, [pc, #500]	; (b4c78 <loop+0x290>)
   b4a84:	9000      	str	r0, [sp, #0]
   b4a86:	463a      	mov	r2, r7
   b4a88:	487c      	ldr	r0, [pc, #496]	; (b4c7c <loop+0x294>)
   b4a8a:	f7ff fb1f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b4a8e:	a812      	add	r0, sp, #72	; 0x48
   b4a90:	f009 f820 	bl	bdad4 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b4a94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4a98:	f006 fcb2 	bl	bb400 <delay>
   b4a9c:	7d23      	ldrb	r3, [r4, #20]
   b4a9e:	2b00      	cmp	r3, #0
   b4aa0:	d050      	beq.n	b4b44 <loop+0x15c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4aa2:	2302      	movs	r3, #2
   b4aa4:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b4aa6:	4b76      	ldr	r3, [pc, #472]	; (b4c80 <loop+0x298>)
   b4aa8:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4aac:	6823      	ldr	r3, [r4, #0]
   b4aae:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4ab0:	b1f3      	cbz	r3, b4af0 <loop+0x108>
            if (start->type == type) {
   b4ab2:	889a      	ldrh	r2, [r3, #4]
   b4ab4:	2a01      	cmp	r2, #1
   b4ab6:	d006      	beq.n	b4ac6 <loop+0xde>
            start = start->next;
   b4ab8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4aba:	e7f9      	b.n	b4ab0 <loop+0xc8>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4abc:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4abe:	b1bb      	cbz	r3, b4af0 <loop+0x108>
            if (start->type == type) {
   b4ac0:	889a      	ldrh	r2, [r3, #4]
   b4ac2:	2a01      	cmp	r2, #1
   b4ac4:	d1fa      	bne.n	b4abc <loop+0xd4>
                if (gpioWakeup->pin == pin) {
   b4ac6:	899a      	ldrh	r2, [r3, #12]
   b4ac8:	4542      	cmp	r2, r8
   b4aca:	d1f7      	bne.n	b4abc <loop+0xd4>
                    gpioWakeup->mode = mode;
   b4acc:	2200      	movs	r2, #0
   b4ace:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4ad0:	7d23      	ldrb	r3, [r4, #20]
   b4ad2:	2b00      	cmp	r3, #0
   b4ad4:	d036      	beq.n	b4b44 <loop+0x15c>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4ad6:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b4ad8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b4adc:	68db      	ldr	r3, [r3, #12]
   b4ade:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b4ae2:	b1db      	cbz	r3, b4b1c <loop+0x134>
            if (start->type == type) {
   b4ae4:	889a      	ldrh	r2, [r3, #4]
   b4ae6:	2a04      	cmp	r2, #4
   b4ae8:	f000 8191 	beq.w	b4e0e <loop+0x426>
            start = start->next;
   b4aec:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4aee:	e7f8      	b.n	b4ae2 <loop+0xfa>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4af0:	4964      	ldr	r1, [pc, #400]	; (b4c84 <loop+0x29c>)
   b4af2:	2010      	movs	r0, #16
   b4af4:	f009 fe94 	bl	be820 <_ZnwjRKSt9nothrow_t>
   b4af8:	4606      	mov	r6, r0
   b4afa:	2800      	cmp	r0, #0
   b4afc:	f000 818a 	beq.w	b4e14 <loop+0x42c>
   b4b00:	2210      	movs	r2, #16
   b4b02:	2100      	movs	r1, #0
   b4b04:	f00a fbc8 	bl	bf298 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4b08:	4b5f      	ldr	r3, [pc, #380]	; (b4c88 <loop+0x2a0>)
   b4b0a:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4b0c:	2301      	movs	r3, #1
   b4b0e:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4b10:	6923      	ldr	r3, [r4, #16]
   b4b12:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b4b14:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4b18:	6126      	str	r6, [r4, #16]
   b4b1a:	e7d9      	b.n	b4ad0 <loop+0xe8>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4b1c:	4959      	ldr	r1, [pc, #356]	; (b4c84 <loop+0x29c>)
   b4b1e:	2010      	movs	r0, #16
   b4b20:	f009 fe7e 	bl	be820 <_ZnwjRKSt9nothrow_t>
   b4b24:	4606      	mov	r6, r0
   b4b26:	2800      	cmp	r0, #0
   b4b28:	f000 8174 	beq.w	b4e14 <loop+0x42c>
   b4b2c:	2210      	movs	r2, #16
   b4b2e:	2100      	movs	r1, #0
   b4b30:	f00a fbb2 	bl	bf298 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4b34:	4b54      	ldr	r3, [pc, #336]	; (b4c88 <loop+0x2a0>)
   b4b36:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4b38:	2304      	movs	r3, #4
   b4b3a:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4b3c:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4b3e:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b4b40:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b4b44:	494b      	ldr	r1, [pc, #300]	; (b4c74 <loop+0x28c>)
   b4b46:	a80f      	add	r0, sp, #60	; 0x3c
   b4b48:	f009 f97a 	bl	bde40 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4b50:	4846      	ldr	r0, [pc, #280]	; (b4c6c <loop+0x284>)
   b4b52:	f001 fa23 	bl	b5f9c <_ZN6AB18056setWDTEi>
			state = IDLE_STATE;
   b4b56:	2302      	movs	r3, #2
   b4b58:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b4b5a:	4b43      	ldr	r3, [pc, #268]	; (b4c68 <loop+0x280>)
   b4b5c:	2201      	movs	r2, #1
			delay(5000);
   b4b5e:	f241 3088 	movw	r0, #5000	; 0x1388
			nextEventTime = true;
   b4b62:	701a      	strb	r2, [r3, #0]
			delay(5000);
   b4b64:	f006 fc4c 	bl	bb400 <delay>
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b4b68:	f009 fb53 	bl	be212 <_ZN9TimeClass3nowEv>
   b4b6c:	19c2      	adds	r2, r0, r7
   b4b6e:	17d3      	asrs	r3, r2, #31
   b4b70:	a812      	add	r0, sp, #72	; 0x48
   b4b72:	f009 fa49 	bl	be008 <_ZN9TimeClass7timeStrEx>
   b4b76:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b4b78:	920a      	str	r2, [sp, #40]	; 0x28
   b4b7a:	f009 f9c1 	bl	bdf00 <_ZN11SystemClass10freeMemoryEv>
   b4b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4b80:	4942      	ldr	r1, [pc, #264]	; (b4c8c <loop+0x2a4>)
   b4b82:	4603      	mov	r3, r0
   b4b84:	483d      	ldr	r0, [pc, #244]	; (b4c7c <loop+0x294>)
   b4b86:	f7ff faa1 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b4b8a:	a812      	add	r0, sp, #72	; 0x48
   b4b8c:	f008 ffa2 	bl	bdad4 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b4b90:	980f      	ldr	r0, [sp, #60]	; 0x3c
   b4b92:	2800      	cmp	r0, #0
   b4b94:	f43f af48 	beq.w	b4a28 <loop+0x40>
            free(wakeupSource_);
   b4b98:	f006 fbba 	bl	bb310 <free>
		} break;
   b4b9c:	e744      	b.n	b4a28 <loop+0x40>
			if (state != oldState) {
   b4b9e:	4b31      	ldr	r3, [pc, #196]	; (b4c64 <loop+0x27c>)
   b4ba0:	4e3b      	ldr	r6, [pc, #236]	; (b4c90 <loop+0x2a8>)
   b4ba2:	781b      	ldrb	r3, [r3, #0]
   b4ba4:	2b04      	cmp	r3, #4
   b4ba6:	d00a      	beq.n	b4bbe <loop+0x1d6>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b4ba8:	2b07      	cmp	r3, #7
   b4baa:	d002      	beq.n	b4bb2 <loop+0x1ca>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4bac:	f006 f81a 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b4bb0:	6030      	str	r0, [r6, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4bb2:	f7ff fdfd 	bl	b47b0 <_Z22publishStateTransitionv>
				Log.info("Gateway is listening for LoRA messages");
   b4bb6:	4937      	ldr	r1, [pc, #220]	; (b4c94 <loop+0x2ac>)
   b4bb8:	4830      	ldr	r0, [pc, #192]	; (b4c7c <loop+0x294>)
   b4bba:	f7ff fa87 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
			if (listenForLoRAMessageGateway()) {
   b4bbe:	f7ff fc27 	bl	b4410 <_Z27listenForLoRAMessageGatewayv>
   b4bc2:	2800      	cmp	r0, #0
   b4bc4:	d036      	beq.n	b4c34 <loop+0x24c>
				if (frequencyUpdated) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b4bc6:	4b34      	ldr	r3, [pc, #208]	; (b4c98 <loop+0x2b0>)
   b4bc8:	781a      	ldrb	r2, [r3, #0]
   b4bca:	b332      	cbz	r2, b4c1a <loop+0x232>
					Log.info("We are updating the publish frequency to %i minutes", sysStatus.frequencyMinutes);
   b4bcc:	4c33      	ldr	r4, [pc, #204]	; (b4c9c <loop+0x2b4>)
   b4bce:	4934      	ldr	r1, [pc, #208]	; (b4ca0 <loop+0x2b8>)
   b4bd0:	482a      	ldr	r0, [pc, #168]	; (b4c7c <loop+0x294>)
					frequencyUpdated = false;
   b4bd2:	2200      	movs	r2, #0
   b4bd4:	701a      	strb	r2, [r3, #0]
					Log.info("We are updating the publish frequency to %i minutes", sysStatus.frequencyMinutes);
   b4bd6:	8ba2      	ldrh	r2, [r4, #28]
   b4bd8:	f7ff fa78 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
					publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("21:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   b4bdc:	4931      	ldr	r1, [pc, #196]	; (b4ca4 <loop+0x2bc>)
   b4bde:	8ba4      	ldrh	r4, [r4, #28]
   b4be0:	a80d      	add	r0, sp, #52	; 0x34
   b4be2:	f002 f9f1 	bl	b6fc8 <_ZN12LocalTimeHMSC1EPKc>
   b4be6:	4930      	ldr	r1, [pc, #192]	; (b4ca8 <loop+0x2c0>)
   b4be8:	a80f      	add	r0, sp, #60	; 0x3c
   b4bea:	f002 f9ed 	bl	b6fc8 <_ZN12LocalTimeHMSC1EPKc>
   b4bee:	aa0f      	add	r2, sp, #60	; 0x3c
   b4bf0:	a90d      	add	r1, sp, #52	; 0x34
   b4bf2:	a812      	add	r0, sp, #72	; 0x48
   b4bf4:	f7ff fd96 	bl	b4724 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   b4bf8:	aa12      	add	r2, sp, #72	; 0x48
   b4bfa:	4621      	mov	r1, r4
   b4bfc:	482b      	ldr	r0, [pc, #172]	; (b4cac <loop+0x2c4>)
   b4bfe:	f003 fa84 	bl	b810a <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   b4c02:	a812      	add	r0, sp, #72	; 0x48
   b4c04:	f7ff fede 	bl	b49c4 <_ZN14LocalTimeRangeD1Ev>
   b4c08:	a80f      	add	r0, sp, #60	; 0x3c
   b4c0a:	f002 f82c 	bl	b6c66 <_ZN12LocalTimeHMSD1Ev>
   b4c0e:	a80d      	add	r0, sp, #52	; 0x34
   b4c10:	f002 f829 	bl	b6c66 <_ZN12LocalTimeHMSD1Ev>
					publishSchedule.isScheduledTime(); // Clears this flag
   b4c14:	4825      	ldr	r0, [pc, #148]	; (b4cac <loop+0x2c4>)
   b4c16:	f003 f96c 	bl	b7ef2 <_ZN17LocalTimeSchedule15isScheduledTimeEv>
				uint16_t secondsUntilNextEventShort = secondsUntilNextEvent();
   b4c1a:	f7ff fd97 	bl	b474c <_Z21secondsUntilNextEventv>
				Log.info("Sending response with %d seconds until return",secondsUntilNextEventShort);
   b4c1e:	b284      	uxth	r4, r0
   b4c20:	4923      	ldr	r1, [pc, #140]	; (b4cb0 <loop+0x2c8>)
   b4c22:	4816      	ldr	r0, [pc, #88]	; (b4c7c <loop+0x294>)
   b4c24:	4622      	mov	r2, r4
   b4c26:	f7ff fa51 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				respondForLoRAMessageGateway(secondsUntilNextEventShort);					// Here we send our response based on the type of message received.
   b4c2a:	4620      	mov	r0, r4
   b4c2c:	f7ff fcc4 	bl	b45b8 <_Z28respondForLoRAMessageGatewayi>
				state = REPORTING_STATE;
   b4c30:	2307      	movs	r3, #7
   b4c32:	702b      	strb	r3, [r5, #0]
   b4c34:	f005 ffd6 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 90000L) {
   b4c38:	6833      	ldr	r3, [r6, #0]
   b4c3a:	1ac0      	subs	r0, r0, r3
   b4c3c:	4b1d      	ldr	r3, [pc, #116]	; (b4cb4 <loop+0x2cc>)
   b4c3e:	4298      	cmp	r0, r3
   b4c40:	f67f aef2 	bls.w	b4a28 <loop+0x40>
				if (Time.hour() != Time.hour(sysStatus.lastConnection)) state = CONNECTING_STATE;  // Only Connect once an hour
   b4c44:	f009 faf6 	bl	be234 <_ZN9TimeClass4hourEv>
   b4c48:	4b14      	ldr	r3, [pc, #80]	; (b4c9c <loop+0x2b4>)
   b4c4a:	4604      	mov	r4, r0
   b4c4c:	2100      	movs	r1, #0
   b4c4e:	6958      	ldr	r0, [r3, #20]
   b4c50:	f009 f9be 	bl	bdfd0 <_ZN9TimeClass4hourEx>
   b4c54:	4284      	cmp	r4, r0
   b4c56:	bf14      	ite	ne
   b4c58:	2305      	movne	r3, #5
				else state = IDLE_STATE;
   b4c5a:	2302      	moveq	r3, #2
   b4c5c:	e6e3      	b.n	b4a26 <loop+0x3e>
   b4c5e:	bf00      	nop
   b4c60:	2003e388 	.word	0x2003e388
   b4c64:	2003e351 	.word	0x2003e351
   b4c68:	2003e350 	.word	0x2003e350
   b4c6c:	2003e214 	.word	0x2003e214
   b4c70:	2003dd24 	.word	0x2003dd24
   b4c74:	2003e234 	.word	0x2003e234
   b4c78:	000bfb31 	.word	0x000bfb31
   b4c7c:	2003e658 	.word	0x2003e658
   b4c80:	000bfde6 	.word	0x000bfde6
   b4c84:	000c0eec 	.word	0x000c0eec
   b4c88:	00030010 	.word	0x00030010
   b4c8c:	000bfb71 	.word	0x000bfb71
   b4c90:	2003e208 	.word	0x2003e208
   b4c94:	000bfb92 	.word	0x000bfb92
   b4c98:	2003e399 	.word	0x2003e399
   b4c9c:	2003e408 	.word	0x2003e408
   b4ca0:	000bfbb9 	.word	0x000bfbb9
   b4ca4:	000bfbed 	.word	0x000bfbed
   b4ca8:	000bfbf6 	.word	0x000bfbf6
   b4cac:	2003e358 	.word	0x2003e358
   b4cb0:	000bfbff 	.word	0x000bfbff
   b4cb4:	00015f90 	.word	0x00015f90
			if (state != oldState) publishStateTransition();
   b4cb8:	4b59      	ldr	r3, [pc, #356]	; (b4e20 <loop+0x438>)
   b4cba:	781b      	ldrb	r3, [r3, #0]
   b4cbc:	2b07      	cmp	r3, #7
   b4cbe:	d001      	beq.n	b4cc4 <loop+0x2dc>
   b4cc0:	f7ff fd76 	bl	b47b0 <_Z22publishStateTransitionv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",current.deviceID, current.hourlyCount, current.dailyCount, current.stateOfCharge, batteryContext[current.batteryState], current.internalTempC, sysStatus.resetCount, current.rssi, current.messageNumber, Time.now());
   b4cc4:	4a57      	ldr	r2, [pc, #348]	; (b4e24 <loop+0x43c>)
   b4cc6:	4958      	ldr	r1, [pc, #352]	; (b4e28 <loop+0x440>)
   b4cc8:	7b10      	ldrb	r0, [r2, #12]
   b4cca:	8813      	ldrh	r3, [r2, #0]
   b4ccc:	930b      	str	r3, [sp, #44]	; 0x2c
   b4cce:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   b4cd2:	4956      	ldr	r1, [pc, #344]	; (b4e2c <loop+0x444>)
   b4cd4:	8c14      	ldrh	r4, [r2, #32]
   b4cd6:	8c56      	ldrh	r6, [r2, #34]	; 0x22
   b4cd8:	6897      	ldr	r7, [r2, #8]
   b4cda:	f892 9004 	ldrb.w	r9, [r2, #4]
   b4cde:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   b4ce2:	f8b2 b018 	ldrh.w	fp, [r2, #24]
   b4ce6:	f892 801a 	ldrb.w	r8, [r2, #26]
   b4cea:	930a      	str	r3, [sp, #40]	; 0x28
   b4cec:	f009 fa91 	bl	be212 <_ZN9TimeClass3nowEv>
   b4cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4cf2:	4a4f      	ldr	r2, [pc, #316]	; (b4e30 <loop+0x448>)
   b4cf4:	f8cd 9010 	str.w	r9, [sp, #16]
   b4cf8:	e9cd 8007 	strd	r8, r0, [sp, #28]
   b4cfc:	e9cd 7302 	strd	r7, r3, [sp, #8]
   b4d00:	e9cd 4600 	strd	r4, r6, [sp]
   b4d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4d06:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4d0a:	e9cd ab05 	strd	sl, fp, [sp, #20]
   b4d0e:	a812      	add	r0, sp, #72	; 0x48
   b4d10:	f006 fb1e 	bl	bb350 <snprintf>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   b4d14:	f003 fc8e 	bl	b8634 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4d18:	4b46      	ldr	r3, [pc, #280]	; (b4e34 <loop+0x44c>)
   b4d1a:	4a47      	ldr	r2, [pc, #284]	; (b4e38 <loop+0x450>)
   b4d1c:	781b      	ldrb	r3, [r3, #0]
   b4d1e:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4d20:	2100      	movs	r1, #0
   b4d22:	4313      	orrs	r3, r2
   b4d24:	6802      	ldr	r2, [r0, #0]
   b4d26:	f88d 1004 	strb.w	r1, [sp, #4]
   b4d2a:	f88d 3000 	strb.w	r3, [sp]
   b4d2e:	6814      	ldr	r4, [r2, #0]
   b4d30:	4942      	ldr	r1, [pc, #264]	; (b4e3c <loop+0x454>)
   b4d32:	233c      	movs	r3, #60	; 0x3c
   b4d34:	aa12      	add	r2, sp, #72	; 0x48
   b4d36:	47a0      	blx	r4
   b4d38:	e672      	b.n	b4a20 <loop+0x38>
			if (state != oldState) {
   b4d3a:	4b39      	ldr	r3, [pc, #228]	; (b4e20 <loop+0x438>)
   b4d3c:	781b      	ldrb	r3, [r3, #0]
   b4d3e:	2b05      	cmp	r3, #5
   b4d40:	d00a      	beq.n	b4d58 <loop+0x370>
				publishStateTransition();  
   b4d42:	f7ff fd35 	bl	b47b0 <_Z22publishStateTransitionv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d46:	f006 fa43 	bl	bb1d0 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();
   b4d4a:	b908      	cbnz	r0, b4d50 <loop+0x368>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4d4c:	f006 fa38 	bl	bb1c0 <spark_cloud_flag_connect>
   b4d50:	f005 ff48 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b4d54:	4b3a      	ldr	r3, [pc, #232]	; (b4e40 <loop+0x458>)
   b4d56:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d58:	f006 fa3a 	bl	bb1d0 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b4d5c:	b128      	cbz	r0, b4d6a <loop+0x382>
				sysStatus.lastConnection = Time.now();
   b4d5e:	f009 fa58 	bl	be212 <_ZN9TimeClass3nowEv>
   b4d62:	4b32      	ldr	r3, [pc, #200]	; (b4e2c <loop+0x444>)
   b4d64:	6158      	str	r0, [r3, #20]
				state = DISCONNECTING_STATE;										// Typically, we will disconnect and sleep to save power
   b4d66:	2306      	movs	r3, #6
   b4d68:	e65d      	b.n	b4a26 <loop+0x3e>
   b4d6a:	f005 ff3b 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b4d6e:	4b34      	ldr	r3, [pc, #208]	; (b4e40 <loop+0x458>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	1ac0      	subs	r0, r0, r3
   b4d74:	4b33      	ldr	r3, [pc, #204]	; (b4e44 <loop+0x45c>)
   b4d76:	4298      	cmp	r0, r3
   b4d78:	d8f1      	bhi.n	b4d5e <loop+0x376>
   b4d7a:	e655      	b.n	b4a28 <loop+0x40>
			if (state != oldState) {
   b4d7c:	4b28      	ldr	r3, [pc, #160]	; (b4e20 <loop+0x438>)
   b4d7e:	4c32      	ldr	r4, [pc, #200]	; (b4e48 <loop+0x460>)
   b4d80:	781b      	ldrb	r3, [r3, #0]
   b4d82:	2b06      	cmp	r3, #6
   b4d84:	d004      	beq.n	b4d90 <loop+0x3a8>
				publishStateTransition(); 
   b4d86:	f7ff fd13 	bl	b47b0 <_Z22publishStateTransitionv>
   b4d8a:	f005 ff2b 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b4d8e:	6020      	str	r0, [r4, #0]
   b4d90:	f005 ff28 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stayConnectedWindow > 90000) {							// Stay on-line for 90 seconds
   b4d94:	6823      	ldr	r3, [r4, #0]
   b4d96:	1ac0      	subs	r0, r0, r3
   b4d98:	4b2c      	ldr	r3, [pc, #176]	; (b4e4c <loop+0x464>)
   b4d9a:	4298      	cmp	r0, r3
   b4d9c:	f67f ae44 	bls.w	b4a28 <loop+0x40>
				disconnectFromParticle();
   b4da0:	f000 fd00 	bl	b57a4 <_Z22disconnectFromParticlev>
				Log.info("Going to deep power cycle device for next circuit");
   b4da4:	492a      	ldr	r1, [pc, #168]	; (b4e50 <loop+0x468>)
   b4da6:	482b      	ldr	r0, [pc, #172]	; (b4e54 <loop+0x46c>)
   b4da8:	f7ff f990 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				state = ERROR_STATE; 											// Not sure if we need this
   b4dac:	2301      	movs	r3, #1
   b4dae:	e63a      	b.n	b4a26 <loop+0x3e>
			static system_tick_t resetTimeout = millis();
   b4db0:	4c29      	ldr	r4, [pc, #164]	; (b4e58 <loop+0x470>)
   b4db2:	4e2a      	ldr	r6, [pc, #168]	; (b4e5c <loop+0x474>)
   b4db4:	7823      	ldrb	r3, [r4, #0]
   b4db6:	f3bf 8f5b 	dmb	ish
   b4dba:	f013 0f01 	tst.w	r3, #1
   b4dbe:	d109      	bne.n	b4dd4 <loop+0x3ec>
   b4dc0:	4620      	mov	r0, r4
   b4dc2:	f7ff f97b 	bl	b40bc <__cxa_guard_acquire>
   b4dc6:	b128      	cbz	r0, b4dd4 <loop+0x3ec>
   b4dc8:	f005 ff0c 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b4dcc:	6030      	str	r0, [r6, #0]
   b4dce:	4620      	mov	r0, r4
   b4dd0:	f7ff f979 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b4dd4:	4b12      	ldr	r3, [pc, #72]	; (b4e20 <loop+0x438>)
   b4dd6:	782a      	ldrb	r2, [r5, #0]
   b4dd8:	781b      	ldrb	r3, [r3, #0]
   b4dda:	429a      	cmp	r2, r3
   b4ddc:	d001      	beq.n	b4de2 <loop+0x3fa>
   b4dde:	f7ff fce7 	bl	b47b0 <_Z22publishStateTransitionv>
   b4de2:	f005 feff 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b4de6:	6833      	ldr	r3, [r6, #0]
   b4de8:	1ac0      	subs	r0, r0, r3
   b4dea:	f247 5330 	movw	r3, #30000	; 0x7530
   b4dee:	4298      	cmp	r0, r3
   b4df0:	f67f ae1a 	bls.w	b4a28 <loop+0x40>
				Log.info("Deep power down device");
   b4df4:	491a      	ldr	r1, [pc, #104]	; (b4e60 <loop+0x478>)
   b4df6:	4817      	ldr	r0, [pc, #92]	; (b4e54 <loop+0x46c>)
   b4df8:	f7ff f968 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b4dfc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4e00:	f006 fafe 	bl	bb400 <delay>
				ab1805.deepPowerDown(); 
   b4e04:	211e      	movs	r1, #30
   b4e06:	4817      	ldr	r0, [pc, #92]	; (b4e64 <loop+0x47c>)
   b4e08:	f001 fa22 	bl	b6250 <_ZN6AB180513deepPowerDownEi>
   b4e0c:	e60c      	b.n	b4a28 <loop+0x40>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4e0e:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4e12:	e697      	b.n	b4b44 <loop+0x15c>
                valid_ = false;
   b4e14:	7526      	strb	r6, [r4, #20]
                return *this;
   b4e16:	e695      	b.n	b4b44 <loop+0x15c>
}
   b4e18:	b053      	add	sp, #332	; 0x14c
   b4e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4e1e:	bf00      	nop
   b4e20:	2003e351 	.word	0x2003e351
   b4e24:	2003e3d8 	.word	0x2003e3d8
   b4e28:	2003ddb8 	.word	0x2003ddb8
   b4e2c:	2003e408 	.word	0x2003e408
   b4e30:	000bfc2d 	.word	0x000bfc2d
   b4e34:	2003e201 	.word	0x2003e201
   b4e38:	2003e200 	.word	0x2003e200
   b4e3c:	000bfcab 	.word	0x000bfcab
   b4e40:	2003e20c 	.word	0x2003e20c
   b4e44:	000493e0 	.word	0x000493e0
   b4e48:	2003e210 	.word	0x2003e210
   b4e4c:	00015f90 	.word	0x00015f90
   b4e50:	000bfcc0 	.word	0x000bfcc0
   b4e54:	2003e658 	.word	0x2003e658
   b4e58:	2003e1fc 	.word	0x2003e1fc
   b4e5c:	2003e204 	.word	0x2003e204
   b4e60:	000bfcf2 	.word	0x000bfcf2
   b4e64:	2003e214 	.word	0x2003e214

000b4e68 <_GLOBAL__sub_I___appProductVersion>:
   b4e68:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b4e6a:	4b23      	ldr	r3, [pc, #140]	; (b4ef8 <_GLOBAL__sub_I___appProductVersion+0x90>)
   b4e6c:	2501      	movs	r5, #1
   b4e6e:	701d      	strb	r5, [r3, #0]
   b4e70:	4b22      	ldr	r3, [pc, #136]	; (b4efc <_GLOBAL__sub_I___appProductVersion+0x94>)
   b4e72:	2208      	movs	r2, #8
   b4e74:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4e76:	f009 fb73 	bl	be560 <spark_protocol_instance>
   b4e7a:	2300      	movs	r3, #0
   b4e7c:	461a      	mov	r2, r3
   b4e7e:	4619      	mov	r1, r3
   b4e80:	f009 fb7e 	bl	be580 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4e84:	f009 fb6c 	bl	be560 <spark_protocol_instance>
   b4e88:	2300      	movs	r3, #0
   b4e8a:	461a      	mov	r2, r3
   b4e8c:	210d      	movs	r1, #13
   b4e8e:	f009 fb6f 	bl	be570 <spark_protocol_set_product_id>
        : config_(config) {
   b4e92:	4b1b      	ldr	r3, [pc, #108]	; (b4f00 <_GLOBAL__sub_I___appProductVersion+0x98>)
   b4e94:	1d1a      	adds	r2, r3, #4
              valid_(true) {
   b4e96:	2400      	movs	r4, #0
        : config_(config) {
   b4e98:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4e9a:	4a1a      	ldr	r2, [pc, #104]	; (b4f04 <_GLOBAL__sub_I___appProductVersion+0x9c>)
   b4e9c:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4e9e:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4ea2:	611c      	str	r4, [r3, #16]
   b4ea4:	751d      	strb	r5, [r3, #20]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   b4ea6:	f009 fc33 	bl	be710 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b4eaa:	4d17      	ldr	r5, [pc, #92]	; (b4f08 <_GLOBAL__sub_I___appProductVersion+0xa0>)
   b4eac:	4601      	mov	r1, r0
   b4eae:	4623      	mov	r3, r4
   b4eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b4eb4:	4628      	mov	r0, r5
   b4eb6:	f003 f94f 	bl	b8158 <_ZN6MB85RCC1ER7TwoWireji>
   b4eba:	4b14      	ldr	r3, [pc, #80]	; (b4f0c <_GLOBAL__sub_I___appProductVersion+0xa4>)
   b4ebc:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4ebe:	f009 fc27 	bl	be710 <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   b4ec2:	4d13      	ldr	r5, [pc, #76]	; (b4f10 <_GLOBAL__sub_I___appProductVersion+0xa8>)
   b4ec4:	4601      	mov	r1, r0
   b4ec6:	2269      	movs	r2, #105	; 0x69
   b4ec8:	4812      	ldr	r0, [pc, #72]	; (b4f14 <_GLOBAL__sub_I___appProductVersion+0xac>)
   b4eca:	f000 ff69 	bl	b5da0 <_ZN6AB1805C1ER7TwoWireh>
   b4ece:	4628      	mov	r0, r5
   b4ed0:	4911      	ldr	r1, [pc, #68]	; (b4f18 <_GLOBAL__sub_I___appProductVersion+0xb0>)
   b4ed2:	f008 fe4a 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   b4ed6:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b4ed8:	4810      	ldr	r0, [pc, #64]	; (b4f1c <_GLOBAL__sub_I___appProductVersion+0xb4>)
    LocalTimeSchedule() {
   b4eda:	612c      	str	r4, [r5, #16]
   b4edc:	2200      	movs	r2, #0
   b4ede:	e9c5 2306 	strd	r2, r3, [r5, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4ee2:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   b4ee6:	2306      	movs	r3, #6
   b4ee8:	f840 3b04 	str.w	r3, [r0], #4
   b4eec:	62ac      	str	r4, [r5, #40]	; 0x28
   b4eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4ef2:	f002 b9a7 	b.w	b7244 <_ZN22LocalTimePosixTimezoneC1Ev>
   b4ef6:	bf00      	nop
   b4ef8:	2003e200 	.word	0x2003e200
   b4efc:	2003e201 	.word	0x2003e201
   b4f00:	2003e234 	.word	0x2003e234
   b4f04:	00030010 	.word	0x00030010
   b4f08:	2003e24c 	.word	0x2003e24c
   b4f0c:	000bfd9c 	.word	0x000bfd9c
   b4f10:	2003e358 	.word	0x2003e358
   b4f14:	2003e214 	.word	0x2003e214
   b4f18:	000c0d65 	.word	0x000c0d65
   b4f1c:	2003e260 	.word	0x2003e260

000b4f20 <setup>:
{
   b4f20:	b570      	push	{r4, r5, r6, lr}
	delay(5000);	// Wait for serial 
   b4f22:	f241 3088 	movw	r0, #5000	; 0x1388
{
   b4f26:	b0a0      	sub	sp, #128	; 0x80
	delay(5000);	// Wait for serial 
   b4f28:	f006 fa6a 	bl	bb400 <delay>
    initializePinModes();                           // Sets the pinModes
   b4f2c:	f000 f8e2 	bl	b50f4 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b4f30:	f000 f8f8 	bl	b5124 <_Z18initializePowerCfgv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   b4f34:	f000 fdbc 	bl	b5ab0 <_Z18storageObjectStartv>
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   b4f38:	f000 f9a2 	bl	b5280 <_Z18particleInitializev>
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b4f3c:	485b      	ldr	r0, [pc, #364]	; (b50ac <setup+0x18c>)
   b4f3e:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b4f40:	2101      	movs	r1, #1
   b4f42:	8143      	strh	r3, [r0, #10]
   b4f44:	f001 fc28 	bl	b6798 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b4f48:	217c      	movs	r1, #124	; 0x7c
   b4f4a:	4858      	ldr	r0, [pc, #352]	; (b50ac <setup+0x18c>)
   b4f4c:	f001 f826 	bl	b5f9c <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4f50:	4b57      	ldr	r3, [pc, #348]	; (b50b0 <setup+0x190>)
   b4f52:	930a      	str	r3, [sp, #40]	; 0x28
	    _M_invoker = &_My_handler::_M_invoke;
   b4f54:	4b57      	ldr	r3, [pc, #348]	; (b50b4 <setup+0x194>)
   b4f56:	930d      	str	r3, [sp, #52]	; 0x34
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b4f58:	ad0a      	add	r5, sp, #40	; 0x28
	    _M_manager = &_My_handler::_M_manager;
   b4f5a:	4b57      	ldr	r3, [pc, #348]	; (b50b8 <setup+0x198>)
   b4f5c:	930c      	str	r3, [sp, #48]	; 0x30
   b4f5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b4f62:	2300      	movs	r3, #0
   b4f64:	a806      	add	r0, sp, #24
   b4f66:	9500      	str	r5, [sp, #0]
   b4f68:	f7ff fc7a 	bl	b4860 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4f6c:	4628      	mov	r0, r5
   b4f6e:	f7ff fbc3 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b4f72:	f003 fb5f 	bl	b8634 <_ZN17PublishQueuePosix8instanceEv>
   b4f76:	f003 fd63 	bl	b8a40 <_ZN17PublishQueuePosix5setupEv>
	initializeLoRA(true);							// Start the LoRA radio (true for Gateway and false for Node)
   b4f7a:	2001      	movs	r0, #1
   b4f7c:	f7ff f8be 	bl	b40fc <_Z14initializeLoRAb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b4f80:	f002 fbb2 	bl	b76e8 <_ZN9LocalTime8instanceEv>
   b4f84:	494d      	ldr	r1, [pc, #308]	; (b50bc <setup+0x19c>)
   b4f86:	4604      	mov	r4, r0
   b4f88:	4628      	mov	r0, r5
   b4f8a:	f002 fa0d 	bl	b73a8 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b4f8e:	a90b      	add	r1, sp, #44	; 0x2c
   b4f90:	f104 0008 	add.w	r0, r4, #8
   b4f94:	f008 fe25 	bl	bdbe2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b4f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4f9a:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b4f9c:	a911      	add	r1, sp, #68	; 0x44
   b4f9e:	f104 0020 	add.w	r0, r4, #32
   b4fa2:	f008 fe1e 	bl	bdbe2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b4fa6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b4fa8:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b4faa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b4fac:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b4fae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b4fb0:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b4fb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b4fb4:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b4fb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   b4fb8:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b4fba:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
   b4fbe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b4fc2:	4628      	mov	r0, r5
   b4fc4:	f001 fe62 	bl	b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b4fc8:	f009 f923 	bl	be212 <_ZN9TimeClass3nowEv>
   b4fcc:	4c3c      	ldr	r4, [pc, #240]	; (b50c0 <setup+0x1a0>)
   b4fce:	17c3      	asrs	r3, r0, #31
   b4fd0:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   b4fd4:	4620      	mov	r0, r4
   b4fd6:	f002 fbff 	bl	b77d8 <_ZN16LocalTimeConvert7convertEv>
  	publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   b4fda:	4b3a      	ldr	r3, [pc, #232]	; (b50c4 <setup+0x1a4>)
   b4fdc:	493a      	ldr	r1, [pc, #232]	; (b50c8 <setup+0x1a8>)
   b4fde:	8b9e      	ldrh	r6, [r3, #28]
   b4fe0:	a804      	add	r0, sp, #16
   b4fe2:	f001 fff1 	bl	b6fc8 <_ZN12LocalTimeHMSC1EPKc>
   b4fe6:	4939      	ldr	r1, [pc, #228]	; (b50cc <setup+0x1ac>)
   b4fe8:	a806      	add	r0, sp, #24
   b4fea:	f001 ffed 	bl	b6fc8 <_ZN12LocalTimeHMSC1EPKc>
   b4fee:	aa06      	add	r2, sp, #24
   b4ff0:	a904      	add	r1, sp, #16
   b4ff2:	4628      	mov	r0, r5
   b4ff4:	f7ff fb96 	bl	b4724 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   b4ff8:	4631      	mov	r1, r6
   b4ffa:	462a      	mov	r2, r5
   b4ffc:	4834      	ldr	r0, [pc, #208]	; (b50d0 <setup+0x1b0>)
   b4ffe:	f003 f884 	bl	b810a <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   b5002:	4628      	mov	r0, r5
   b5004:	f7ff fcde 	bl	b49c4 <_ZN14LocalTimeRangeD1Ev>
   b5008:	a806      	add	r0, sp, #24
   b500a:	f001 fe2c 	bl	b6c66 <_ZN12LocalTimeHMSD1Ev>
   b500e:	a804      	add	r0, sp, #16
   b5010:	f001 fe29 	bl	b6c66 <_ZN12LocalTimeHMSD1Ev>
  	Log.info("Gateway startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   b5014:	4b2f      	ldr	r3, [pc, #188]	; (b50d4 <setup+0x1b4>)
   b5016:	4621      	mov	r1, r4
   b5018:	681a      	ldr	r2, [r3, #0]
   b501a:	4628      	mov	r0, r5
   b501c:	f002 fac6 	bl	b75ac <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b5020:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5022:	a904      	add	r1, sp, #16
   b5024:	2003      	movs	r0, #3
   b5026:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    const diag_source* src = nullptr;
   b5028:	9204      	str	r2, [sp, #16]
    const int ret = diag_get_source(id, &src, nullptr);
   b502a:	f006 f823 	bl	bb074 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b502e:	2800      	cmp	r0, #0
   b5030:	d138      	bne.n	b50a4 <setup+0x184>
        return ret;
    }
    return get(src, val);
   b5032:	9c04      	ldr	r4, [sp, #16]
    SPARK_ASSERT(src && src->callback);
   b5034:	b10c      	cbz	r4, b503a <setup+0x11a>
   b5036:	6923      	ldr	r3, [r4, #16]
   b5038:	b923      	cbnz	r3, b5044 <setup+0x124>
   b503a:	4a27      	ldr	r2, [pc, #156]	; (b50d8 <setup+0x1b8>)
   b503c:	4927      	ldr	r1, [pc, #156]	; (b50dc <setup+0x1bc>)
   b503e:	200a      	movs	r0, #10
   b5040:	f005 fff0 	bl	bb024 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5044:	230c      	movs	r3, #12
   b5046:	9306      	str	r3, [sp, #24]
   b5048:	446b      	add	r3, sp
   b504a:	9307      	str	r3, [sp, #28]
   b504c:	2304      	movs	r3, #4
   b504e:	9308      	str	r3, [sp, #32]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b5050:	6923      	ldr	r3, [r4, #16]
   b5052:	aa06      	add	r2, sp, #24
   b5054:	2101      	movs	r1, #1
   b5056:	4620      	mov	r0, r4
   b5058:	4798      	blx	r3
        if (r) {
   b505a:	bb18      	cbnz	r0, b50a4 <setup+0x184>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b505c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5060:	ee07 3a90 	vmov	s15, r3
   b5064:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b5068:	ee17 0a90 	vmov	r0, s15
   b506c:	f009 fd4a 	bl	beb04 <__aeabi_f2d>
   b5070:	4632      	mov	r2, r6
   b5072:	e9cd 0100 	strd	r0, r1, [sp]
   b5076:	491a      	ldr	r1, [pc, #104]	; (b50e0 <setup+0x1c0>)
   b5078:	481a      	ldr	r0, [pc, #104]	; (b50e4 <setup+0x1c4>)
   b507a:	f7ff f827 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b507e:	4628      	mov	r0, r5
   b5080:	f008 fd28 	bl	bdad4 <_ZN6StringD1Ev>
  	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5084:	4818      	ldr	r0, [pc, #96]	; (b50e8 <setup+0x1c8>)
   b5086:	4919      	ldr	r1, [pc, #100]	; (b50ec <setup+0x1cc>)
   b5088:	8800      	ldrh	r0, [r0, #0]
   b508a:	2200      	movs	r2, #0
   b508c:	9200      	str	r2, [sp, #0]
   b508e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5092:	f006 ffa9 	bl	bbfe8 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5096:	4b16      	ldr	r3, [pc, #88]	; (b50f0 <setup+0x1d0>)
   b5098:	781a      	ldrb	r2, [r3, #0]
   b509a:	b90a      	cbnz	r2, b50a0 <setup+0x180>
   b509c:	2202      	movs	r2, #2
   b509e:	701a      	strb	r2, [r3, #0]
}
   b50a0:	b020      	add	sp, #128	; 0x80
   b50a2:	bd70      	pop	{r4, r5, r6, pc}
            return -1.0f;
   b50a4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b50a8:	e7de      	b.n	b5068 <setup+0x148>
   b50aa:	bf00      	nop
   b50ac:	2003e214 	.word	0x2003e214
   b50b0:	000b464d 	.word	0x000b464d
   b50b4:	000b46ef 	.word	0x000b46ef
   b50b8:	000b46db 	.word	0x000b46db
   b50bc:	000bfd09 	.word	0x000bfd09
   b50c0:	2003e260 	.word	0x2003e260
   b50c4:	2003e408 	.word	0x2003e408
   b50c8:	000bfbed 	.word	0x000bfbed
   b50cc:	000bfd30 	.word	0x000bfd30
   b50d0:	2003e358 	.word	0x2003e358
   b50d4:	2003de30 	.word	0x2003de30
   b50d8:	000babd5 	.word	0x000babd5
   b50dc:	000bfd39 	.word	0x000bfd39
   b50e0:	000bfd5f 	.word	0x000bfd5f
   b50e4:	2003e658 	.word	0x2003e658
   b50e8:	000bfde6 	.word	0x000bfde6
   b50ec:	000b4659 	.word	0x000b4659
   b50f0:	2003e388 	.word	0x2003e388

000b50f4 <_Z18initializePinModesv>:
const pin_t TMP36_SENSE_PIN   = A4;
const pin_t BUTTON_PIN        = D4;
const pin_t BLUE_LED          = D7;
const pin_t WAKEUP_PIN        = D8;

bool initializePinModes() {
   b50f4:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b50f6:	4909      	ldr	r1, [pc, #36]	; (b511c <_Z18initializePinModesv+0x28>)
   b50f8:	4809      	ldr	r0, [pc, #36]	; (b5120 <_Z18initializePinModesv+0x2c>)
   b50fa:	f7fe ffe7 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b50fe:	2102      	movs	r1, #2
   b5100:	2004      	movs	r0, #4
   b5102:	f009 fa83 	bl	be60c <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b5106:	2100      	movs	r1, #0
   b5108:	2008      	movs	r0, #8
   b510a:	f009 fa7f 	bl	be60c <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b510e:	2101      	movs	r1, #1
   b5110:	2007      	movs	r0, #7
   b5112:	f009 fa7b 	bl	be60c <pinMode>
    return true;
}
   b5116:	2001      	movs	r0, #1
   b5118:	bd08      	pop	{r3, pc}
   b511a:	bf00      	nop
   b511c:	000bfdb0 	.word	0x000bfdb0
   b5120:	2003e658 	.word	0x2003e658

000b5124 <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   b5124:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5126:	4918      	ldr	r1, [pc, #96]	; (b5188 <_Z18initializePowerCfgv+0x64>)
   b5128:	4818      	ldr	r0, [pc, #96]	; (b518c <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b512a:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b512c:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b512e:	f7fe ffcd 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5132:	4622      	mov	r2, r4
   b5134:	2100      	movs	r1, #0
   b5136:	4668      	mov	r0, sp
   b5138:	f00a f8ae 	bl	bf298 <memset>
   b513c:	4622      	mov	r2, r4
   b513e:	2100      	movs	r1, #0
   b5140:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5144:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b5148:	f00a f8a6 	bl	bf298 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b514c:	2100      	movs	r1, #0
   b514e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5152:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b5156:	f005 fff3 	bl	bb140 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b515a:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b515e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b5162:	4b0b      	ldr	r3, [pc, #44]	; (b5190 <_Z18initializePowerCfgv+0x6c>)
   b5164:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b5166:	f241 0370 	movw	r3, #4208	; 0x1070
   b516a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b516e:	9b00      	ldr	r3, [sp, #0]
   b5170:	2100      	movs	r1, #0
   b5172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b5176:	4668      	mov	r0, sp
   b5178:	9300      	str	r3, [sp, #0]
   b517a:	f005 ffe1 	bl	bb140 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b517e:	3800      	subs	r0, #0
   b5180:	bf18      	it	ne
   b5182:	2001      	movne	r0, #1
   b5184:	b010      	add	sp, #64	; 0x40
   b5186:	bd10      	pop	{r4, pc}
   b5188:	000bfdc9 	.word	0x000bfdc9
   b518c:	2003e658 	.word	0x2003e658
   b5190:	03840384 	.word	0x03840384

000b5194 <_Z20setNodeConfigurationv>:
 */

#include "storage_objects.h"

void setNodeConfiguration() {
  sysStatus.sensorType = false; // Default is the car counter (true for PIR)
   b5194:	4b02      	ldr	r3, [pc, #8]	; (b51a0 <_Z20setNodeConfigurationv+0xc>)
   b5196:	2200      	movs	r2, #0
   b5198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   b519c:	4770      	bx	lr
   b519e:	bf00      	nop
   b51a0:	2003e408 	.word	0x2003e408

000b51a4 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b51a4:	4770      	bx	lr

000b51a6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b51a6:	6a00      	ldr	r0, [r0, #32]
   b51a8:	6803      	ldr	r3, [r0, #0]
   b51aa:	68db      	ldr	r3, [r3, #12]
   b51ac:	4718      	bx	r3
	...

000b51b0 <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b51b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   b51b2:	4b07      	ldr	r3, [pc, #28]	; (b51d0 <_Z15reportFrequencyv+0x20>)
   b51b4:	4a07      	ldr	r2, [pc, #28]	; (b51d4 <_Z15reportFrequencyv+0x24>)
   b51b6:	8b9b      	ldrh	r3, [r3, #28]
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b51b8:	4604      	mov	r4, r0
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   b51ba:	2110      	movs	r1, #16
   b51bc:	4668      	mov	r0, sp
   b51be:	f006 f8c7 	bl	bb350 <snprintf>
    return reportStr;
   b51c2:	4669      	mov	r1, sp
   b51c4:	4620      	mov	r0, r4
   b51c6:	f008 fcd0 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b51ca:	4620      	mov	r0, r4
   b51cc:	b004      	add	sp, #16
   b51ce:	bd10      	pop	{r4, pc}
   b51d0:	2003e408 	.word	0x2003e408
   b51d4:	000bfdee 	.word	0x000bfdee

000b51d8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b51d8:	b530      	push	{r4, r5, lr}
   b51da:	b085      	sub	sp, #20
   b51dc:	4603      	mov	r3, r0
   b51de:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b51e0:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b51e2:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b51e4:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b51e6:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b51e8:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b51ea:	f006 f889 	bl	bb300 <malloc>
   b51ee:	6028      	str	r0, [r5, #0]
        if (!data) {
   b51f0:	b150      	cbz	r0, b5208 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b51f2:	6822      	ldr	r2, [r4, #0]
   b51f4:	9900      	ldr	r1, [sp, #0]
   b51f6:	f00a f827 	bl	bf248 <memcpy>
        return 0;
   b51fa:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b51fc:	4668      	mov	r0, sp
   b51fe:	f008 fc69 	bl	bdad4 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5202:	4620      	mov	r0, r4
   b5204:	b005      	add	sp, #20
   b5206:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b5208:	4c00      	ldr	r4, [pc, #0]	; (b520c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b520a:	e7f7      	b.n	b51fc <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b520c:	fffffefc 	.word	0xfffffefc

000b5210 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5210:	2300      	movs	r3, #0
   b5212:	2204      	movs	r2, #4
   b5214:	f005 bfbc 	b.w	bb190 <spark_variable>

000b5218 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b5218:	4b0a      	ldr	r3, [pc, #40]	; (b5244 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b521a:	b510      	push	{r4, lr}
   b521c:	4604      	mov	r4, r0
   b521e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b5220:	f007 faca 	bl	bc7b8 <_ZN5spark10LogManager8instanceEv>
   b5224:	4621      	mov	r1, r4
   b5226:	f007 fcce 	bl	bcbc6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b522a:	f009 f8d7 	bl	be3dc <_Z16_fetch_usbserialv>
   b522e:	f009 f8c9 	bl	be3c4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b5232:	4620      	mov	r0, r4
   b5234:	4b04      	ldr	r3, [pc, #16]	; (b5248 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b5236:	f840 3b04 	str.w	r3, [r0], #4
   b523a:	f007 fb5f 	bl	bc8fc <_ZN5spark6detail9LogFilterD1Ev>
    }
   b523e:	4620      	mov	r0, r4
   b5240:	bd10      	pop	{r4, pc}
   b5242:	bf00      	nop
   b5244:	000c00b4 	.word	0x000c00b4
   b5248:	000c009c 	.word	0x000c009c

000b524c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b524c:	b510      	push	{r4, lr}
   b524e:	4604      	mov	r4, r0
    }
   b5250:	f7ff ffe2 	bl	b5218 <_ZN5spark16SerialLogHandlerD1Ev>
   b5254:	4620      	mov	r0, r4
   b5256:	2124      	movs	r1, #36	; 0x24
   b5258:	f7fe ff21 	bl	b409e <_ZdlPvj>
   b525c:	4620      	mov	r0, r4
   b525e:	bd10      	pop	{r4, pc}

000b5260 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b5260:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b5262:	2301      	movs	r3, #1
   b5264:	2208      	movs	r2, #8
   b5266:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b526a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b526e:	2300      	movs	r3, #0
   b5270:	4341      	muls	r1, r0
   b5272:	466a      	mov	r2, sp
   b5274:	4618      	mov	r0, r3
   b5276:	f005 ffcb 	bl	bb210 <spark_set_connection_property>
    }
   b527a:	b003      	add	sp, #12
   b527c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5280 <_Z18particleInitializev>:
 * @brief Initializes the Particle functions and variables
 * 
 * @details If new particles of functions are defined, they need to be initialized here
 * 
 */
void particleInitialize() {
   b5280:	b530      	push	{r4, r5, lr}
   b5282:	b08d      	sub	sp, #52	; 0x34
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5284:	4b35      	ldr	r3, [pc, #212]	; (b535c <_Z18particleInitializev+0xdc>)
   b5286:	9304      	str	r3, [sp, #16]
   b5288:	4b35      	ldr	r3, [pc, #212]	; (b5360 <_Z18particleInitializev+0xe0>)
   b528a:	9305      	str	r3, [sp, #20]
   b528c:	4b35      	ldr	r3, [pc, #212]	; (b5364 <_Z18particleInitializev+0xe4>)
   b528e:	9306      	str	r3, [sp, #24]
   b5290:	4b35      	ldr	r3, [pc, #212]	; (b5368 <_Z18particleInitializev+0xe8>)
   b5292:	9307      	str	r3, [sp, #28]
   b5294:	4b35      	ldr	r3, [pc, #212]	; (b536c <_Z18particleInitializev+0xec>)

  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
  Particle.variable("Low Power Mode",(sysStatus.lowPowerMode) ? "Yes" : "No");
   b5296:	4d36      	ldr	r5, [pc, #216]	; (b5370 <_Z18particleInitializev+0xf0>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5298:	9308      	str	r3, [sp, #32]
   b529a:	4b36      	ldr	r3, [pc, #216]	; (b5374 <_Z18particleInitializev+0xf4>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b529c:	4936      	ldr	r1, [pc, #216]	; (b5378 <_Z18particleInitializev+0xf8>)
   b529e:	4837      	ldr	r0, [pc, #220]	; (b537c <_Z18particleInitializev+0xfc>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b52a0:	9309      	str	r3, [sp, #36]	; 0x24
   b52a2:	2400      	movs	r4, #0
   b52a4:	4b36      	ldr	r3, [pc, #216]	; (b5380 <_Z18particleInitializev+0x100>)
   b52a6:	930a      	str	r3, [sp, #40]	; 0x28
   b52a8:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b52aa:	f7fe ff0f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
        return _variable(name, std::forward<ArgsT>(args)...);
   b52ae:	4a35      	ldr	r2, [pc, #212]	; (b5384 <_Z18particleInitializev+0x104>)
   b52b0:	4b35      	ldr	r3, [pc, #212]	; (b5388 <_Z18particleInitializev+0x108>)
  Particle.variable("Low Power Mode",(sysStatus.lowPowerMode) ? "Yes" : "No");
   b52b2:	7a29      	ldrb	r1, [r5, #8]
   b52b4:	4835      	ldr	r0, [pc, #212]	; (b538c <_Z18particleInitializev+0x10c>)
   b52b6:	42a1      	cmp	r1, r4
   b52b8:	bf14      	ite	ne
   b52ba:	4611      	movne	r1, r2
   b52bc:	4619      	moveq	r1, r3
   b52be:	f7ff ffa7 	bl	b5210 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b52c2:	4933      	ldr	r1, [pc, #204]	; (b5390 <_Z18particleInitializev+0x110>)
   b52c4:	4833      	ldr	r0, [pc, #204]	; (b5394 <_Z18particleInitializev+0x114>)
   b52c6:	f7ff ffa3 	bl	b5210 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b52ca:	4933      	ldr	r1, [pc, #204]	; (b5398 <_Z18particleInitializev+0x118>)
   b52cc:	4833      	ldr	r0, [pc, #204]	; (b539c <_Z18particleInitializev+0x11c>)
   b52ce:	f7ff ff9f 	bl	b5210 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b52d2:	4933      	ldr	r1, [pc, #204]	; (b53a0 <_Z18particleInitializev+0x120>)
   b52d4:	4833      	ldr	r0, [pc, #204]	; (b53a4 <_Z18particleInitializev+0x124>)
   b52d6:	4623      	mov	r3, r4
   b52d8:	2202      	movs	r2, #2
   b52da:	f005 ff59 	bl	bb190 <spark_variable>
  Particle.variable("Release",currentPointRelease);   
  Particle.variable("Signal", signalStr);
  Particle.variable("stateOfChg", current.stateOfCharge);
  Particle.variable("BatteryContext",batteryContext[current.batteryState]);
   b52de:	4b32      	ldr	r3, [pc, #200]	; (b53a8 <_Z18particleInitializev+0x128>)
        return _variable(name, std::forward<ArgsT>(args)...);
   b52e0:	4832      	ldr	r0, [pc, #200]	; (b53ac <_Z18particleInitializev+0x12c>)
   b52e2:	7b1b      	ldrb	r3, [r3, #12]
   b52e4:	aa0c      	add	r2, sp, #48	; 0x30
   b52e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b52ea:	f853 1c20 	ldr.w	r1, [r3, #-32]
   b52ee:	f7ff ff8f 	bl	b5210 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        extra.size = sizeof(extra);
   b52f2:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b52f4:	e9cd 4401 	strd	r4, r4, [sp, #4]
        extra.size = sizeof(extra);
   b52f8:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b52fc:	4b2c      	ldr	r3, [pc, #176]	; (b53b0 <_Z18particleInitializev+0x130>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b52fe:	492d      	ldr	r1, [pc, #180]	; (b53b4 <_Z18particleInitializev+0x134>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5300:	9303      	str	r3, [sp, #12]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b5302:	2204      	movs	r2, #4
   b5304:	ab01      	add	r3, sp, #4
   b5306:	482c      	ldr	r0, [pc, #176]	; (b53b8 <_Z18particleInitializev+0x138>)
   b5308:	f005 ff42 	bl	bb190 <spark_variable>
        return _variable(name, std::forward<ArgsT>(args)...);
   b530c:	4b2b      	ldr	r3, [pc, #172]	; (b53bc <_Z18particleInitializev+0x13c>)
   b530e:	4a2c      	ldr	r2, [pc, #176]	; (b53c0 <_Z18particleInitializev+0x140>)
  Particle.variable("Reporting Frequency", reportFrequency);
  Particle.variable("SIM Card", (sysStatus.verizonSIM) ? "Verizon" : "Particle");
   b5310:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
   b5314:	482b      	ldr	r0, [pc, #172]	; (b53c4 <_Z18particleInitializev+0x144>)
   b5316:	42a1      	cmp	r1, r4
   b5318:	bf14      	ite	ne
   b531a:	4611      	movne	r1, r2
   b531c:	4619      	moveq	r1, r3
   b531e:	f7ff ff77 	bl	b5210 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b5322:	4a29      	ldr	r2, [pc, #164]	; (b53c8 <_Z18particleInitializev+0x148>)
   b5324:	4929      	ldr	r1, [pc, #164]	; (b53cc <_Z18particleInitializev+0x14c>)
   b5326:	482a      	ldr	r0, [pc, #168]	; (b53d0 <_Z18particleInitializev+0x150>)
   b5328:	f006 fa27 	bl	bb77a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b532c:	4a29      	ldr	r2, [pc, #164]	; (b53d4 <_Z18particleInitializev+0x154>)
   b532e:	492a      	ldr	r1, [pc, #168]	; (b53d8 <_Z18particleInitializev+0x158>)
   b5330:	4827      	ldr	r0, [pc, #156]	; (b53d0 <_Z18particleInitializev+0x150>)
   b5332:	f006 fa22 	bl	bb77a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5336:	4a23      	ldr	r2, [pc, #140]	; (b53c4 <_Z18particleInitializev+0x144>)
   b5338:	4928      	ldr	r1, [pc, #160]	; (b53dc <_Z18particleInitializev+0x15c>)
   b533a:	4825      	ldr	r0, [pc, #148]	; (b53d0 <_Z18particleInitializev+0x150>)
   b533c:	f006 fa1d 	bl	bb77a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Set Frequency", setFrequency);
  // Particle.function("Set Wake Time", setWakeTime);
  // Particle.function("Set Sleep Time", setSleepTime);
  Particle.function("SIM Card", setVerizonSIM);

  if (!digitalRead(BUTTON_PIN)) {
   b5340:	4b27      	ldr	r3, [pc, #156]	; (b53e0 <_Z18particleInitializev+0x160>)
   b5342:	8818      	ldrh	r0, [r3, #0]
   b5344:	f009 f98c 	bl	be660 <digitalRead>
   b5348:	b910      	cbnz	r0, b5350 <_Z18particleInitializev+0xd0>
    sysStatus.lowPowerMode = false;     // If the user button is held down while resetting - diable sleep
   b534a:	7228      	strb	r0, [r5, #8]
        spark_cloud_flag_connect();
   b534c:	f005 ff38 	bl	bb1c0 <spark_cloud_flag_connect>
  */

  takeMeasurements();                               // Initialize sensor values

  // makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
}
   b5350:	b00d      	add	sp, #52	; 0x34
   b5352:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  takeMeasurements();                               // Initialize sensor values
   b5356:	f000 bcb9 	b.w	b5ccc <_Z16takeMeasurementsv>
   b535a:	bf00      	nop
   b535c:	000bfe08 	.word	0x000bfe08
   b5360:	000bfe10 	.word	0x000bfe10
   b5364:	000bfe14 	.word	0x000bfe14
   b5368:	000bfe1d 	.word	0x000bfe1d
   b536c:	000bfe25 	.word	0x000bfe25
   b5370:	2003e408 	.word	0x2003e408
   b5374:	000bfe31 	.word	0x000bfe31
   b5378:	000bfe43 	.word	0x000bfe43
   b537c:	2003e658 	.word	0x2003e658
   b5380:	000bfe37 	.word	0x000bfe37
   b5384:	000bfdf9 	.word	0x000bfdf9
   b5388:	000bfdfd 	.word	0x000bfdfd
   b538c:	000bfe71 	.word	0x000bfe71
   b5390:	2003dd1c 	.word	0x2003dd1c
   b5394:	000bfe80 	.word	0x000bfe80
   b5398:	2003dde4 	.word	0x2003dde4
   b539c:	000bfe88 	.word	0x000bfe88
   b53a0:	2003e3e0 	.word	0x2003e3e0
   b53a4:	000bfe8f 	.word	0x000bfe8f
   b53a8:	2003e3d8 	.word	0x2003e3d8
   b53ac:	000bfe9a 	.word	0x000bfe9a
   b53b0:	000b51d9 	.word	0x000b51d9
   b53b4:	000b51b1 	.word	0x000b51b1
   b53b8:	000bfea9 	.word	0x000bfea9
   b53bc:	000c000e 	.word	0x000c000e
   b53c0:	000bfe00 	.word	0x000bfe00
   b53c4:	000bfebd 	.word	0x000bfebd
   b53c8:	000bfec6 	.word	0x000bfec6
   b53cc:	000b54b5 	.word	0x000b54b5
   b53d0:	000bb74f 	.word	0x000bb74f
   b53d4:	000bfed4 	.word	0x000bfed4
   b53d8:	000b5475 	.word	0x000b5475
   b53dc:	000b556d 	.word	0x000b556d
   b53e0:	000bfde6 	.word	0x000bfde6

000b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b53e4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b53e6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b53e8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b53ea:	b17c      	cbz	r4, b540c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b53ec:	6863      	ldr	r3, [r4, #4]
   b53ee:	3b01      	subs	r3, #1
   b53f0:	6063      	str	r3, [r4, #4]
   b53f2:	b95b      	cbnz	r3, b540c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b53f4:	6823      	ldr	r3, [r4, #0]
   b53f6:	4620      	mov	r0, r4
   b53f8:	689b      	ldr	r3, [r3, #8]
   b53fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b53fc:	68a3      	ldr	r3, [r4, #8]
   b53fe:	3b01      	subs	r3, #1
   b5400:	60a3      	str	r3, [r4, #8]
   b5402:	b91b      	cbnz	r3, b540c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5404:	6823      	ldr	r3, [r4, #0]
   b5406:	4620      	mov	r0, r4
   b5408:	68db      	ldr	r3, [r3, #12]
   b540a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b540c:	4628      	mov	r0, r5
   b540e:	bd38      	pop	{r3, r4, r5, pc}

000b5410 <_Z12setFrequency6String.part.0>:
 * @param command A string indicating the number of minutes between reporting events.  Note, this function
 * sets an interim value for reporting frequency which takes effect once sent to a new node.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setFrequency(String command)
   b5410:	b500      	push	{lr}
  sysStatus.frequencyMinutes = tempTime;
  if (sysStatus.frequencyMinutes < 12 && sysStatus.lowPowerMode) {
    Log.info("Short reporting frequency over-rides low power");
    sysStatus.lowPowerMode = false;
  }
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b5412:	4b12      	ldr	r3, [pc, #72]	; (b545c <_Z12setFrequency6String.part.0+0x4c>)
   b5414:	2201      	movs	r2, #1
   b5416:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.frequencyMinutes);
   b5418:	4b11      	ldr	r3, [pc, #68]	; (b5460 <_Z12setFrequency6String.part.0+0x50>)
   b541a:	4a12      	ldr	r2, [pc, #72]	; (b5464 <_Z12setFrequency6String.part.0+0x54>)
   b541c:	8b9b      	ldrh	r3, [r3, #28]
int setFrequency(String command)
   b541e:	b0c5      	sub	sp, #276	; 0x114
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.frequencyMinutes);
   b5420:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5424:	a804      	add	r0, sp, #16
   b5426:	f005 ff93 	bl	bb350 <snprintf>
  Log.info(data);
   b542a:	480f      	ldr	r0, [pc, #60]	; (b5468 <_Z12setFrequency6String.part.0+0x58>)
   b542c:	a904      	add	r1, sp, #16
   b542e:	f7fe fe4d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5432:	f005 fecd 	bl	bb1d0 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b5436:	b160      	cbz	r0, b5452 <_Z12setFrequency6String.part.0+0x42>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5438:	4b0c      	ldr	r3, [pc, #48]	; (b546c <_Z12setFrequency6String.part.0+0x5c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b543a:	490d      	ldr	r1, [pc, #52]	; (b5470 <_Z12setFrequency6String.part.0+0x60>)
   b543c:	781b      	ldrb	r3, [r3, #0]
   b543e:	f88d 3000 	strb.w	r3, [sp]
   b5442:	a802      	add	r0, sp, #8
   b5444:	233c      	movs	r3, #60	; 0x3c
   b5446:	aa04      	add	r2, sp, #16
   b5448:	f006 faa8 	bl	bb99c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b544c:	a803      	add	r0, sp, #12
   b544e:	f7ff ffc9 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
}
   b5452:	2001      	movs	r0, #1
   b5454:	b045      	add	sp, #276	; 0x114
   b5456:	f85d fb04 	ldr.w	pc, [sp], #4
   b545a:	bf00      	nop
   b545c:	2003e399 	.word	0x2003e399
   b5460:	2003e408 	.word	0x2003e408
   b5464:	000bfee2 	.word	0x000bfee2
   b5468:	2003e658 	.word	0x2003e658
   b546c:	2003e398 	.word	0x2003e398
   b5470:	000bff22 	.word	0x000bff22

000b5474 <_Z12setFrequency6String>:
{
   b5474:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b5476:	220a      	movs	r2, #10
   b5478:	6800      	ldr	r0, [r0, #0]
   b547a:	a901      	add	r1, sp, #4
   b547c:	f00a f8b8 	bl	bf5f0 <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b5480:	2878      	cmp	r0, #120	; 0x78
   b5482:	d80f      	bhi.n	b54a4 <_Z12setFrequency6String+0x30>
  sysStatus.frequencyMinutes = tempTime;
   b5484:	4c08      	ldr	r4, [pc, #32]	; (b54a8 <_Z12setFrequency6String+0x34>)
  if (sysStatus.frequencyMinutes < 12 && sysStatus.lowPowerMode) {
   b5486:	280b      	cmp	r0, #11
  sysStatus.frequencyMinutes = tempTime;
   b5488:	83a0      	strh	r0, [r4, #28]
  if (sysStatus.frequencyMinutes < 12 && sysStatus.lowPowerMode) {
   b548a:	dc07      	bgt.n	b549c <_Z12setFrequency6String+0x28>
   b548c:	7a23      	ldrb	r3, [r4, #8]
   b548e:	b12b      	cbz	r3, b549c <_Z12setFrequency6String+0x28>
    Log.info("Short reporting frequency over-rides low power");
   b5490:	4906      	ldr	r1, [pc, #24]	; (b54ac <_Z12setFrequency6String+0x38>)
   b5492:	4807      	ldr	r0, [pc, #28]	; (b54b0 <_Z12setFrequency6String+0x3c>)
   b5494:	f7fe fe1a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.lowPowerMode = false;
   b5498:	2300      	movs	r3, #0
   b549a:	7223      	strb	r3, [r4, #8]
   b549c:	f7ff ffb8 	bl	b5410 <_Z12setFrequency6String.part.0>
}
   b54a0:	b002      	add	sp, #8
   b54a2:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b54a4:	2000      	movs	r0, #0
   b54a6:	e7fb      	b.n	b54a0 <_Z12setFrequency6String+0x2c>
   b54a8:	2003e408 	.word	0x2003e408
   b54ac:	000bff27 	.word	0x000bff27
   b54b0:	2003e658 	.word	0x2003e658

000b54b4 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   b54b4:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b54b6:	4922      	ldr	r1, [pc, #136]	; (b5540 <_Z15setLowPowerMode6String+0x8c>)
   b54b8:	b095      	sub	sp, #84	; 0x54
   b54ba:	4604      	mov	r4, r0
   b54bc:	f008 fc0e 	bl	bdcdc <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b54c0:	b138      	cbz	r0, b54d2 <_Z15setLowPowerMode6String+0x1e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b54c2:	4620      	mov	r0, r4
   b54c4:	491e      	ldr	r1, [pc, #120]	; (b5540 <_Z15setLowPowerMode6String+0x8c>)
   b54c6:	4c1f      	ldr	r4, [pc, #124]	; (b5544 <_Z15setLowPowerMode6String+0x90>)
   b54c8:	f008 fc08 	bl	bdcdc <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   b54cc:	b948      	cbnz	r0, b54e2 <_Z15setLowPowerMode6String+0x2e>
      sysStatus.frequencyMinutes = 12;
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.lowPowerMode = false;
   b54ce:	7220      	strb	r0, [r4, #8]
   b54d0:	e033      	b.n	b553a <_Z15setLowPowerMode6String+0x86>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b54d2:	491d      	ldr	r1, [pc, #116]	; (b5548 <_Z15setLowPowerMode6String+0x94>)
   b54d4:	4620      	mov	r0, r4
   b54d6:	f008 fc01 	bl	bdcdc <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b54da:	2800      	cmp	r0, #0
   b54dc:	d1f1      	bne.n	b54c2 <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   b54de:	b015      	add	sp, #84	; 0x54
   b54e0:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   b54e2:	8ba3      	ldrh	r3, [r4, #28]
    sysStatus.lowPowerMode = true;
   b54e4:	2501      	movs	r5, #1
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   b54e6:	2b0b      	cmp	r3, #11
    sysStatus.lowPowerMode = true;
   b54e8:	7225      	strb	r5, [r4, #8]
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   b54ea:	d91b      	bls.n	b5524 <_Z15setLowPowerMode6String+0x70>
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   b54ec:	4b17      	ldr	r3, [pc, #92]	; (b554c <_Z15setLowPowerMode6String+0x98>)
   b54ee:	4a18      	ldr	r2, [pc, #96]	; (b5550 <_Z15setLowPowerMode6String+0x9c>)
   b54f0:	2140      	movs	r1, #64	; 0x40
   b54f2:	a804      	add	r0, sp, #16
   b54f4:	f005 ff2c 	bl	bb350 <snprintf>
  Log.info(data);
   b54f8:	4816      	ldr	r0, [pc, #88]	; (b5554 <_Z15setLowPowerMode6String+0xa0>)
   b54fa:	a904      	add	r1, sp, #16
   b54fc:	f7fe fde6 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5500:	f005 fe66 	bl	bb1d0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b5504:	b160      	cbz	r0, b5520 <_Z15setLowPowerMode6String+0x6c>
   b5506:	4b14      	ldr	r3, [pc, #80]	; (b5558 <_Z15setLowPowerMode6String+0xa4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5508:	4914      	ldr	r1, [pc, #80]	; (b555c <_Z15setLowPowerMode6String+0xa8>)
   b550a:	781b      	ldrb	r3, [r3, #0]
   b550c:	f88d 3000 	strb.w	r3, [sp]
   b5510:	a802      	add	r0, sp, #8
   b5512:	233c      	movs	r3, #60	; 0x3c
   b5514:	aa04      	add	r2, sp, #16
   b5516:	f006 fa41 	bl	bb99c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b551a:	a803      	add	r0, sp, #12
   b551c:	f7ff ff62 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b5520:	2001      	movs	r0, #1
   b5522:	e7dc      	b.n	b54de <_Z15setLowPowerMode6String+0x2a>
      Log.info("Increasing reporting frequency to 12 minutes");
   b5524:	490e      	ldr	r1, [pc, #56]	; (b5560 <_Z15setLowPowerMode6String+0xac>)
   b5526:	480b      	ldr	r0, [pc, #44]	; (b5554 <_Z15setLowPowerMode6String+0xa0>)
   b5528:	f7fe fdd0 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.frequencyMinutes = 12;
   b552c:	230c      	movs	r3, #12
   b552e:	83a3      	strh	r3, [r4, #28]
      frequencyUpdated = true;
   b5530:	4b0c      	ldr	r3, [pc, #48]	; (b5564 <_Z15setLowPowerMode6String+0xb0>)
   b5532:	701d      	strb	r5, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   b5534:	7a23      	ldrb	r3, [r4, #8]
   b5536:	2b00      	cmp	r3, #0
   b5538:	d1d8      	bne.n	b54ec <_Z15setLowPowerMode6String+0x38>
   b553a:	4b0b      	ldr	r3, [pc, #44]	; (b5568 <_Z15setLowPowerMode6String+0xb4>)
   b553c:	e7d7      	b.n	b54ee <_Z15setLowPowerMode6String+0x3a>
   b553e:	bf00      	nop
   b5540:	000c0218 	.word	0x000c0218
   b5544:	2003e408 	.word	0x2003e408
   b5548:	000c0510 	.word	0x000c0510
   b554c:	000bff56 	.word	0x000bff56
   b5550:	000bff8a 	.word	0x000bff8a
   b5554:	2003e658 	.word	0x2003e658
   b5558:	2003e398 	.word	0x2003e398
   b555c:	000bfe7b 	.word	0x000bfe7b
   b5560:	000bff5d 	.word	0x000bff5d
   b5564:	2003e399 	.word	0x2003e399
   b5568:	000bff5a 	.word	0x000bff5a

000b556c <_Z13setVerizonSIM6String>:
 * 
 * @param command  - 1 for Verizon and 0 for Particle (default)
 * @return int 
 */
int setVerizonSIM(String command)                                   // If we are using a Verizon SIM, we will need to execute "keepAlive" calls in the main loop when not in low power mode
{
   b556c:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b556e:	491d      	ldr	r1, [pc, #116]	; (b55e4 <_Z13setVerizonSIM6String+0x78>)
   b5570:	b085      	sub	sp, #20
   b5572:	4605      	mov	r5, r0
   b5574:	f008 fbb2 	bl	bdcdc <_ZNK6String6equalsEPKc>
  if (command == "1")
   b5578:	4604      	mov	r4, r0
   b557a:	b1d0      	cbz	r0, b55b2 <_Z13setVerizonSIM6String+0x46>
  {
    sysStatus.verizonSIM = true;
   b557c:	4b1a      	ldr	r3, [pc, #104]	; (b55e8 <_Z13setVerizonSIM6String+0x7c>)
   b557e:	2401      	movs	r4, #1
    Particle.keepAlive(60);                                         // send a ping every minute
   b5580:	203c      	movs	r0, #60	; 0x3c
    sysStatus.verizonSIM = true;
   b5582:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
    Particle.keepAlive(60);                                         // send a ping every minute
   b5586:	f7ff fe6b 	bl	b5260 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b558a:	f005 fe21 	bl	bb1d0 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   b558e:	b910      	cbnz	r0, b5596 <_Z13setVerizonSIM6String+0x2a>
  else if (command == "0")
  {
    sysStatus.verizonSIM = false;
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
    return 1;
   b5590:	2001      	movs	r0, #1
  }
  else return 0;
}
   b5592:	b005      	add	sp, #20
   b5594:	bd30      	pop	{r4, r5, pc}
   b5596:	4b15      	ldr	r3, [pc, #84]	; (b55ec <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5598:	4a15      	ldr	r2, [pc, #84]	; (b55f0 <_Z13setVerizonSIM6String+0x84>)
   b559a:	781b      	ldrb	r3, [r3, #0]
   b559c:	f88d 3000 	strb.w	r3, [sp]
   b55a0:	233c      	movs	r3, #60	; 0x3c
   b55a2:	a802      	add	r0, sp, #8
   b55a4:	4913      	ldr	r1, [pc, #76]	; (b55f4 <_Z13setVerizonSIM6String+0x88>)
   b55a6:	f006 f9f9 	bl	bb99c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b55aa:	a803      	add	r0, sp, #12
   b55ac:	f7ff ff1a 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55b0:	e7ee      	b.n	b5590 <_Z13setVerizonSIM6String+0x24>
   b55b2:	4911      	ldr	r1, [pc, #68]	; (b55f8 <_Z13setVerizonSIM6String+0x8c>)
   b55b4:	4628      	mov	r0, r5
   b55b6:	f008 fb91 	bl	bdcdc <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b55ba:	2800      	cmp	r0, #0
   b55bc:	d0e9      	beq.n	b5592 <_Z13setVerizonSIM6String+0x26>
    sysStatus.verizonSIM = false;
   b55be:	4b0a      	ldr	r3, [pc, #40]	; (b55e8 <_Z13setVerizonSIM6String+0x7c>)
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b55c0:	f240 5064 	movw	r0, #1380	; 0x564
    sysStatus.verizonSIM = false;
   b55c4:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b55c8:	f7ff fe4a 	bl	b5260 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b55cc:	f005 fe00 	bl	bb1d0 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   b55d0:	2800      	cmp	r0, #0
   b55d2:	d0dd      	beq.n	b5590 <_Z13setVerizonSIM6String+0x24>
   b55d4:	4b05      	ldr	r3, [pc, #20]	; (b55ec <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b55d6:	4a09      	ldr	r2, [pc, #36]	; (b55fc <_Z13setVerizonSIM6String+0x90>)
   b55d8:	781b      	ldrb	r3, [r3, #0]
   b55da:	f88d 3000 	strb.w	r3, [sp]
   b55de:	233c      	movs	r3, #60	; 0x3c
   b55e0:	e7df      	b.n	b55a2 <_Z13setVerizonSIM6String+0x36>
   b55e2:	bf00      	nop
   b55e4:	000c0218 	.word	0x000c0218
   b55e8:	2003e408 	.word	0x2003e408
   b55ec:	2003e398 	.word	0x2003e398
   b55f0:	000bffa4 	.word	0x000bffa4
   b55f4:	000bfe7b 	.word	0x000bfe7b
   b55f8:	000c0510 	.word	0x000c0510
   b55fc:	000bffb7 	.word	0x000bffb7

000b5600 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5600:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5602:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5606:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5608:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b560a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b560e:	42ae      	cmp	r6, r5
   b5610:	d004      	beq.n	b561c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5612:	4628      	mov	r0, r5
   b5614:	f008 fa5e 	bl	bdad4 <_ZN6StringD1Ev>
   b5618:	3514      	adds	r5, #20
   b561a:	e7f8      	b.n	b560e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b561c:	6820      	ldr	r0, [r4, #0]
   b561e:	f005 fe77 	bl	bb310 <free>
    AllocatorT::free(data_);
}
   b5622:	4620      	mov	r0, r4
   b5624:	bd70      	pop	{r4, r5, r6, pc}

000b5626 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5626:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b562a:	4604      	mov	r4, r0
   b562c:	460d      	mov	r5, r1
   b562e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5630:	d916      	bls.n	b5660 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5632:	4290      	cmp	r0, r2
   b5634:	d215      	bcs.n	b5662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5636:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b563a:	1a75      	subs	r5, r6, r1
   b563c:	f1a1 0714 	sub.w	r7, r1, #20
   b5640:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5642:	42b7      	cmp	r7, r6
   b5644:	d01c      	beq.n	b5680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5646:	b12c      	cbz	r4, b5654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5648:	4631      	mov	r1, r6
   b564a:	4620      	mov	r0, r4
   b564c:	f008 fabe 	bl	bdbcc <_ZN6StringC1EOS_>
   b5650:	7c33      	ldrb	r3, [r6, #16]
   b5652:	7423      	strb	r3, [r4, #16]
   b5654:	4630      	mov	r0, r6
   b5656:	f008 fa3d 	bl	bdad4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b565a:	3e14      	subs	r6, #20
   b565c:	3c14      	subs	r4, #20
   b565e:	e7f0      	b.n	b5642 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5660:	d00e      	beq.n	b5680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5662:	42b5      	cmp	r5, r6
   b5664:	d00c      	beq.n	b5680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5666:	b12c      	cbz	r4, b5674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5668:	4629      	mov	r1, r5
   b566a:	4620      	mov	r0, r4
   b566c:	f008 faae 	bl	bdbcc <_ZN6StringC1EOS_>
   b5670:	7c2b      	ldrb	r3, [r5, #16]
   b5672:	7423      	strb	r3, [r4, #16]
   b5674:	4628      	mov	r0, r5
   b5676:	f008 fa2d 	bl	bdad4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b567a:	3514      	adds	r5, #20
   b567c:	3414      	adds	r4, #20
   b567e:	e7f0      	b.n	b5662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5686:	2300      	movs	r3, #0
   b5688:	e9c0 3300 	strd	r3, r3, [r0]
   b568c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b568e:	684f      	ldr	r7, [r1, #4]
   b5690:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5692:	4604      	mov	r4, r0
   b5694:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5696:	dd23      	ble.n	b56e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5698:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b569c:	fb08 f007 	mul.w	r0, r8, r7
   b56a0:	f005 fe2e 	bl	bb300 <malloc>
            if (!d) {
   b56a4:	4605      	mov	r5, r0
   b56a6:	b1d8      	cbz	r0, b56e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b56a8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b56ac:	fb08 1202 	mla	r2, r8, r2, r1
   b56b0:	f7ff ffb9 	bl	b5626 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b56b4:	6820      	ldr	r0, [r4, #0]
   b56b6:	f005 fe2b 	bl	bb310 <free>
        data_ = d;
   b56ba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b56bc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b56be:	e9d6 7300 	ldrd	r7, r3, [r6]
   b56c2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b56c6:	45b8      	cmp	r8, r7
   b56c8:	d008      	beq.n	b56dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b56ca:	4639      	mov	r1, r7
   b56cc:	4628      	mov	r0, r5
   b56ce:	f008 fa97 	bl	bdc00 <_ZN6StringC1ERKS_>
   b56d2:	7c3b      	ldrb	r3, [r7, #16]
   b56d4:	742b      	strb	r3, [r5, #16]
   b56d6:	3714      	adds	r7, #20
   b56d8:	3514      	adds	r5, #20
   b56da:	e7f4      	b.n	b56c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b56dc:	6873      	ldr	r3, [r6, #4]
   b56de:	6063      	str	r3, [r4, #4]
}
   b56e0:	4620      	mov	r0, r4
   b56e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b56e8 <_GLOBAL__sub_I_SystemMode>:
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }

  else return 0;
   b56e8:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b56ea:	4b27      	ldr	r3, [pc, #156]	; (b5788 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b56ec:	4a27      	ldr	r2, [pc, #156]	; (b578c <_GLOBAL__sub_I_SystemMode+0xa4>)
   b56ee:	2501      	movs	r5, #1
   b56f0:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b56f2:	4b27      	ldr	r3, [pc, #156]	; (b5790 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b56f4:	2400      	movs	r4, #0
   b56f6:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b56f8:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b56fa:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b56fe:	2002      	movs	r0, #2
   b5700:	f005 fcca 	bl	bb098 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b5704:	4621      	mov	r1, r4
   b5706:	4628      	mov	r0, r5
   b5708:	f005 fcde 	bl	bb0c8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b570c:	4629      	mov	r1, r5
   b570e:	2004      	movs	r0, #4
   b5710:	f005 fa48 	bl	baba4 <HAL_Feature_Set>
        capacity_(0) {
   b5714:	e9cd 4400 	strd	r4, r4, [sp]
   b5718:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b571a:	f008 fe5f 	bl	be3dc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b571e:	4c1d      	ldr	r4, [pc, #116]	; (b5794 <_GLOBAL__sub_I_SystemMode+0xac>)
   b5720:	4605      	mov	r5, r0
   b5722:	4669      	mov	r1, sp
   b5724:	a803      	add	r0, sp, #12
   b5726:	f7ff ffac 	bl	b5682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b572a:	4626      	mov	r6, r4
        stream_(&stream) {
   b572c:	a903      	add	r1, sp, #12
   b572e:	a806      	add	r0, sp, #24
   b5730:	f7ff ffa7 	bl	b5682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5734:	4b18      	ldr	r3, [pc, #96]	; (b5798 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b5736:	f846 3b04 	str.w	r3, [r6], #4
   b573a:	a906      	add	r1, sp, #24
   b573c:	a809      	add	r0, sp, #36	; 0x24
   b573e:	f7ff ffa0 	bl	b5682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5742:	aa09      	add	r2, sp, #36	; 0x24
   b5744:	211e      	movs	r1, #30
   b5746:	4630      	mov	r0, r6
   b5748:	f007 fb20 	bl	bcd8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b574c:	a809      	add	r0, sp, #36	; 0x24
   b574e:	f7ff ff57 	bl	b5600 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5752:	a806      	add	r0, sp, #24
   b5754:	f7ff ff54 	bl	b5600 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5758:	4b10      	ldr	r3, [pc, #64]	; (b579c <_GLOBAL__sub_I_SystemMode+0xb4>)
   b575a:	6023      	str	r3, [r4, #0]
   b575c:	6225      	str	r5, [r4, #32]
   b575e:	a803      	add	r0, sp, #12
   b5760:	f7ff ff4e 	bl	b5600 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5764:	4b0e      	ldr	r3, [pc, #56]	; (b57a0 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b5766:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5768:	f008 fe38 	bl	be3dc <_Z16_fetch_usbserialv>
   b576c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5770:	f008 fe24 	bl	be3bc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5774:	f007 f820 	bl	bc7b8 <_ZN5spark10LogManager8instanceEv>
   b5778:	4621      	mov	r1, r4
   b577a:	f007 f9dd 	bl	bcb38 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b577e:	4668      	mov	r0, sp
   b5780:	f7ff ff3e 	bl	b5600 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5784:	b00c      	add	sp, #48	; 0x30
   b5786:	bd70      	pop	{r4, r5, r6, pc}
   b5788:	2003e398 	.word	0x2003e398
   b578c:	ffff0000 	.word	0xffff0000
   b5790:	2003e38c 	.word	0x2003e38c
   b5794:	2003e39c 	.word	0x2003e39c
   b5798:	000c009c 	.word	0x000c009c
   b579c:	000c0d98 	.word	0x000c0d98
   b57a0:	000c00b4 	.word	0x000c00b4

000b57a4 <_Z22disconnectFromParticlev>:
{
   b57a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b57a8:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b57aa:	f008 fd32 	bl	be212 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b57ae:	4943      	ldr	r1, [pc, #268]	; (b58bc <_Z22disconnectFromParticlev+0x118>)
  time_t startTime = Time.now();
   b57b0:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b57b2:	4843      	ldr	r0, [pc, #268]	; (b58c0 <_Z22disconnectFromParticlev+0x11c>)
   b57b4:	f7fe fc8a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b57b8:	4b42      	ldr	r3, [pc, #264]	; (b58c4 <_Z22disconnectFromParticlev+0x120>)
   b57ba:	8818      	ldrh	r0, [r3, #0]
   b57bc:	f006 fc3e 	bl	bc03c <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b57c0:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b57c2:	a801      	add	r0, sp, #4
   b57c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b57c8:	f8ad 400c 	strh.w	r4, [sp, #12]
   b57cc:	f005 ffe6 	bl	bb79c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b57d0:	4620      	mov	r0, r4
   b57d2:	f005 fa17 	bl	bac04 <hal_timer_millis>
        while (_while() && !_condition()) {
   b57d6:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b57da:	4604      	mov	r4, r0
   b57dc:	2000      	movs	r0, #0
   b57de:	f005 fa11 	bl	bac04 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b57e2:	1b03      	subs	r3, r0, r4
   b57e4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b57e8:	42b3      	cmp	r3, r6
   b57ea:	f171 0300 	sbcs.w	r3, r1, #0
   b57ee:	d205      	bcs.n	b57fc <_Z22disconnectFromParticlev+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b57f0:	f005 fcee 	bl	bb1d0 <spark_cloud_flag_connected>
   b57f4:	b110      	cbz	r0, b57fc <_Z22disconnectFromParticlev+0x58>
            spark_process();
   b57f6:	f005 fcdb 	bl	bb1b0 <spark_process>
        while (_while() && !_condition()) {
   b57fa:	e7ef      	b.n	b57dc <_Z22disconnectFromParticlev+0x38>
   b57fc:	f005 fce8 	bl	bb1d0 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5800:	f005 f9f0 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5804:	4f30      	ldr	r7, [pc, #192]	; (b58c8 <_Z22disconnectFromParticlev+0x124>)
   b5806:	6038      	str	r0, [r7, #0]
    		spark_process();
   b5808:	f005 fcd2 	bl	bb1b0 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b580c:	f005 fce0 	bl	bb1d0 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b5810:	4604      	mov	r4, r0
   b5812:	b140      	cbz	r0, b5826 <_Z22disconnectFromParticlev+0x82>
    Log.info("Failed to disconnect from Particle");
   b5814:	492d      	ldr	r1, [pc, #180]	; (b58cc <_Z22disconnectFromParticlev+0x128>)
   b5816:	482a      	ldr	r0, [pc, #168]	; (b58c0 <_Z22disconnectFromParticlev+0x11c>)
   b5818:	f7fe fc58 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b581c:	2400      	movs	r4, #0
}
   b581e:	4620      	mov	r0, r4
   b5820:	b005      	add	sp, #20
   b5822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b5826:	f008 fcf4 	bl	be212 <_ZN9TimeClass3nowEv>
   b582a:	4929      	ldr	r1, [pc, #164]	; (b58d0 <_Z22disconnectFromParticlev+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b582c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b58d4 <_Z22disconnectFromParticlev+0x130>
   b5830:	1b42      	subs	r2, r0, r5
   b5832:	4823      	ldr	r0, [pc, #140]	; (b58c0 <_Z22disconnectFromParticlev+0x11c>)
   b5834:	f7fe fc4a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b5838:	f008 fceb 	bl	be212 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b583c:	4622      	mov	r2, r4
   b583e:	2102      	movs	r1, #2
   b5840:	4606      	mov	r6, r0
   b5842:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b5846:	f005 fd0b 	bl	bb260 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b584a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b584e:	4623      	mov	r3, r4
   b5850:	4622      	mov	r2, r4
   b5852:	4621      	mov	r1, r4
   b5854:	f005 fd1c 	bl	bb290 <network_off>
        return hal_timer_millis(nullptr);
   b5858:	4620      	mov	r0, r4
   b585a:	f005 f9d3 	bl	bac04 <hal_timer_millis>
        while (_while() && !_condition()) {
   b585e:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b5862:	4605      	mov	r5, r0
   b5864:	2000      	movs	r0, #0
   b5866:	f005 f9cd 	bl	bac04 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b586a:	1b43      	subs	r3, r0, r5
   b586c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5870:	454b      	cmp	r3, r9
   b5872:	f171 0300 	sbcs.w	r3, r1, #0
   b5876:	d206      	bcs.n	b5886 <_Z22disconnectFromParticlev+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b5878:	4640      	mov	r0, r8
   b587a:	f007 fda5 	bl	bd3c8 <_ZN5spark12NetworkClass5isOffEv>
   b587e:	b910      	cbnz	r0, b5886 <_Z22disconnectFromParticlev+0xe2>
            spark_process();
   b5880:	f005 fc96 	bl	bb1b0 <spark_process>
        while (_while() && !_condition()) {
   b5884:	e7ee      	b.n	b5864 <_Z22disconnectFromParticlev+0xc0>
   b5886:	4813      	ldr	r0, [pc, #76]	; (b58d4 <_Z22disconnectFromParticlev+0x130>)
   b5888:	f007 fd9e 	bl	bd3c8 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b588c:	f005 f9aa 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b5890:	6038      	str	r0, [r7, #0]
    		spark_process();
   b5892:	f005 fc8d 	bl	bb1b0 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b5896:	480f      	ldr	r0, [pc, #60]	; (b58d4 <_Z22disconnectFromParticlev+0x130>)
   b5898:	f007 fd92 	bl	bd3c0 <_ZN5spark12NetworkClass4isOnEv>
   b589c:	b120      	cbz	r0, b58a8 <_Z22disconnectFromParticlev+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b589e:	490e      	ldr	r1, [pc, #56]	; (b58d8 <_Z22disconnectFromParticlev+0x134>)
   b58a0:	4807      	ldr	r0, [pc, #28]	; (b58c0 <_Z22disconnectFromParticlev+0x11c>)
   b58a2:	f7fe fc13 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b58a6:	e7ba      	b.n	b581e <_Z22disconnectFromParticlev+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b58a8:	f008 fcb3 	bl	be212 <_ZN9TimeClass3nowEv>
   b58ac:	490b      	ldr	r1, [pc, #44]	; (b58dc <_Z22disconnectFromParticlev+0x138>)
   b58ae:	1b82      	subs	r2, r0, r6
   b58b0:	4803      	ldr	r0, [pc, #12]	; (b58c0 <_Z22disconnectFromParticlev+0x11c>)
   b58b2:	f7fe fc0b 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b58b6:	2401      	movs	r4, #1
   b58b8:	e7b1      	b.n	b581e <_Z22disconnectFromParticlev+0x7a>
   b58ba:	bf00      	nop
   b58bc:	000bffcb 	.word	0x000bffcb
   b58c0:	2003e658 	.word	0x2003e658
   b58c4:	000bfde6 	.word	0x000bfde6
   b58c8:	2003e710 	.word	0x2003e710
   b58cc:	000bfff4 	.word	0x000bfff4
   b58d0:	000c0017 	.word	0x000c0017
   b58d4:	2003e584 	.word	0x2003e584
   b58d8:	000c0040 	.word	0x000c0040
   b58dc:	000c0066 	.word	0x000c0066

000b58e0 <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   b58e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b58e2:	f005 fc75 	bl	bb1d0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b58e6:	b1d8      	cbz	r0, b5920 <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b58e8:	4b1c      	ldr	r3, [pc, #112]	; (b595c <_Z18loadSystemDefaultsv+0x7c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b58ea:	4a1d      	ldr	r2, [pc, #116]	; (b5960 <_Z18loadSystemDefaultsv+0x80>)
   b58ec:	781b      	ldrb	r3, [r3, #0]
   b58ee:	f88d 3000 	strb.w	r3, [sp]
   b58f2:	491c      	ldr	r1, [pc, #112]	; (b5964 <_Z18loadSystemDefaultsv+0x84>)
   b58f4:	233c      	movs	r3, #60	; 0x3c
   b58f6:	a802      	add	r0, sp, #8
   b58f8:	f006 f850 	bl	bb99c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b58fc:	9c03      	ldr	r4, [sp, #12]
   b58fe:	b17c      	cbz	r4, b5920 <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   b5900:	6863      	ldr	r3, [r4, #4]
   b5902:	3b01      	subs	r3, #1
   b5904:	6063      	str	r3, [r4, #4]
   b5906:	b95b      	cbnz	r3, b5920 <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   b5908:	6823      	ldr	r3, [r4, #0]
   b590a:	4620      	mov	r0, r4
   b590c:	689b      	ldr	r3, [r3, #8]
   b590e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5910:	68a3      	ldr	r3, [r4, #8]
   b5912:	3b01      	subs	r3, #1
   b5914:	60a3      	str	r3, [r4, #8]
   b5916:	b91b      	cbnz	r3, b5920 <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   b5918:	6823      	ldr	r3, [r4, #0]
   b591a:	4620      	mov	r0, r4
   b591c:	68db      	ldr	r3, [r3, #12]
   b591e:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b5920:	4911      	ldr	r1, [pc, #68]	; (b5968 <_Z18loadSystemDefaultsv+0x88>)
   b5922:	4812      	ldr	r0, [pc, #72]	; (b596c <_Z18loadSystemDefaultsv+0x8c>)
   b5924:	f7fe fbd2 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.nodeNumber = 2;
   b5928:	4b11      	ldr	r3, [pc, #68]	; (b5970 <_Z18loadSystemDefaultsv+0x90>)
   b592a:	2202      	movs	r2, #2
   b592c:	805a      	strh	r2, [r3, #2]
  sysStatus.structuresVersion = 1;
   b592e:	f240 1201 	movw	r2, #257	; 0x101
   b5932:	809a      	strh	r2, [r3, #4]
  sysStatus.firmwareRelease = 1;
  sysStatus.solarPowerMode = true;
   b5934:	2201      	movs	r2, #1
   b5936:	71da      	strb	r2, [r3, #7]
  sysStatus.lowPowerMode = true;
   b5938:	721a      	strb	r2, [r3, #8]
  sysStatus.resetCount = 0;
   b593a:	2200      	movs	r2, #0
  sysStatus.lastHookResponse = 0;
   b593c:	e9c3 2203 	strd	r2, r2, [r3, #12]
  sysStatus.frequencyMinutes = 60;
  sysStatus.alertCodeGateway = 0;
   b5940:	779a      	strb	r2, [r3, #30]
  sysStatus.alertTimestampGateway = 0;
   b5942:	621a      	str	r2, [r3, #32]
  sysStatus.openTime = 6;
   b5944:	2206      	movs	r2, #6
  sysStatus.frequencyMinutes = 60;
   b5946:	213c      	movs	r1, #60	; 0x3c
  sysStatus.openTime = 6;
   b5948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  sysStatus.closeTime = 22;
   b594c:	2216      	movs	r2, #22
  sysStatus.frequencyMinutes = 60;
   b594e:	8399      	strh	r1, [r3, #28]
  sysStatus.closeTime = 22;
   b5950:	84da      	strh	r2, [r3, #38]	; 0x26
  sysStatus.verizonSIM = false;

  setNodeConfiguration();                             // Here we will fix the settings specific to the node
}
   b5952:	b004      	add	sp, #16
   b5954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setNodeConfiguration();                             // Here we will fix the settings specific to the node
   b5958:	f7ff bc1c 	b.w	b5194 <_Z20setNodeConfigurationv>
   b595c:	2003e3c0 	.word	0x2003e3c0
   b5960:	000c00c4 	.word	0x000c00c4
   b5964:	000bfe7b 	.word	0x000bfe7b
   b5968:	000c00dc 	.word	0x000c00dc
   b596c:	2003e658 	.word	0x2003e658
   b5970:	2003e408 	.word	0x2003e408

000b5974 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   b5974:	4b01      	ldr	r3, [pc, #4]	; (b597c <_GLOBAL__sub_I_sysStatus+0x8>)
   b5976:	2201      	movs	r2, #1
   b5978:	701a      	strb	r2, [r3, #0]
  current.hourlyCount = 0;
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
  current.alertCodeNode = 0;
  current.alertTimestampNode = 0;
  sysStatus.resetCount = 0;                                           // Reset the reset count as well
   b597a:	4770      	bx	lr
   b597c:	2003e3c0 	.word	0x2003e3c0

000b5980 <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   b5980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (Time.now() - lastCheckTime > 60) {            // Check once a second
   b5982:	4c42      	ldr	r4, [pc, #264]	; (b5a8c <_Z17storageObjectLoopv+0x10c>)
   b5984:	f008 fc45 	bl	be212 <_ZN9TimeClass3nowEv>
   b5988:	e9d4 2100 	ldrd	r2, r1, [r4]
   b598c:	17c3      	asrs	r3, r0, #31
   b598e:	1a80      	subs	r0, r0, r2
   b5990:	eb63 0301 	sbc.w	r3, r3, r1
   b5994:	283d      	cmp	r0, #61	; 0x3d
   b5996:	f173 0300 	sbcs.w	r3, r3, #0
   b599a:	db75      	blt.n	b5a88 <_Z17storageObjectLoopv+0x108>
   b599c:	f005 f922 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b59a0:	4605      	mov	r5, r0
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   b59a2:	f008 fc36 	bl	be212 <_ZN9TimeClass3nowEv>
                      std::hash<uint32_t>{}(sysStatus.lastHookResponse) + \
   b59a6:	4a3a      	ldr	r2, [pc, #232]	; (b5a90 <_Z17storageObjectLoopv+0x110>)
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   b59a8:	4e3a      	ldr	r6, [pc, #232]	; (b5a94 <_Z17storageObjectLoopv+0x114>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   b59aa:	17c3      	asrs	r3, r0, #31
   b59ac:	e9c4 0300 	strd	r0, r3, [r4]
                      std::hash<byte>{}(sysStatus.alertCodeGateway)+ \
   b59b0:	e9d2 3404 	ldrd	r3, r4, [r2, #16]
   b59b4:	441c      	add	r4, r3
   b59b6:	6a13      	ldr	r3, [r2, #32]
   b59b8:	441c      	add	r4, r3

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b59ba:	8813      	ldrh	r3, [r2, #0]
   b59bc:	441c      	add	r4, r3
   b59be:	8853      	ldrh	r3, [r2, #2]
   b59c0:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b59c2:	7913      	ldrb	r3, [r2, #4]
   b59c4:	441c      	add	r4, r3
   b59c6:	7953      	ldrb	r3, [r2, #5]
   b59c8:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   b59ca:	7993      	ldrb	r3, [r2, #6]
   b59cc:	441c      	add	r4, r3
   b59ce:	79d3      	ldrb	r3, [r2, #7]
   b59d0:	441c      	add	r4, r3
   b59d2:	7a13      	ldrb	r3, [r2, #8]
   b59d4:	441c      	add	r4, r3
   b59d6:	68d3      	ldr	r3, [r2, #12]
   b59d8:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b59da:	8b13      	ldrh	r3, [r2, #24]
   b59dc:	441c      	add	r4, r3
   b59de:	8b93      	ldrh	r3, [r2, #28]
   b59e0:	441c      	add	r4, r3
   b59e2:	8b53      	ldrh	r3, [r2, #26]
   b59e4:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b59e6:	7f93      	ldrb	r3, [r2, #30]
   b59e8:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   b59ea:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
                      std::hash<uint32_t>{}(sysStatus.alertTimestampGateway) + \
   b59ee:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b59f0:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
                      std::hash<bool>{}(sysStatus.sensorType) + \
   b59f4:	441c      	add	r4, r3
   b59f6:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
                      std::hash<uint8_t>{}(sysStatus.openTime) + \
   b59fa:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   b59fc:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
                      std::hash<bool>{}(sysStatus.verizonSIM);
   b5a00:	441c      	add	r4, r3
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   b5a02:	6833      	ldr	r3, [r6, #0]
   b5a04:	429c      	cmp	r4, r3
   b5a06:	d03d      	beq.n	b5a84 <_Z17storageObjectLoopv+0x104>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b5a08:	2328      	movs	r3, #40	; 0x28
   b5a0a:	2101      	movs	r1, #1
   b5a0c:	4822      	ldr	r0, [pc, #136]	; (b5a98 <_Z17storageObjectLoopv+0x118>)
   b5a0e:	f002 fc3a 	bl	b8286 <_ZN6MB85RC9writeDataEjPKhj>
      lastSysStatusHash = sysStatusHash;
   b5a12:	6034      	str	r4, [r6, #0]
   b5a14:	f005 f8e6 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
      Log.info("sysStaus object stored and hash updated in %lu mSec", (millis() - stopwatch));
   b5a18:	4920      	ldr	r1, [pc, #128]	; (b5a9c <_Z17storageObjectLoopv+0x11c>)
   b5a1a:	1b42      	subs	r2, r0, r5
   b5a1c:	4820      	ldr	r0, [pc, #128]	; (b5aa0 <_Z17storageObjectLoopv+0x120>)
   b5a1e:	f7fe fb55 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5a22:	f005 f8df 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b5a26:	4605      	mov	r5, r0
      returnValue = true;                           // In case I want to test whether values changed
   b5a28:	2001      	movs	r0, #1
    size_t currentHash = std::hash<uint16_t>{}(current.deviceID) + \
   b5a2a:	4e1e      	ldr	r6, [pc, #120]	; (b5aa4 <_Z17storageObjectLoopv+0x124>)
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   b5a2c:	4f1e      	ldr	r7, [pc, #120]	; (b5aa8 <_Z17storageObjectLoopv+0x128>)
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b5a2e:	8873      	ldrh	r3, [r6, #2]
   b5a30:	8834      	ldrh	r4, [r6, #0]
    size_t currentHash = std::hash<uint16_t>{}(current.deviceID) + \
   b5a32:	441c      	add	r4, r3
                      std::hash<uint32_t>{}(current.alertTimestampNode);
   b5a34:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   b5a36:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b5a38:	7933      	ldrb	r3, [r6, #4]
   b5a3a:	441c      	add	r4, r3
   b5a3c:	68b3      	ldr	r3, [r6, #8]
   b5a3e:	441c      	add	r4, r3
   b5a40:	7b33      	ldrb	r3, [r6, #12]
   b5a42:	441c      	add	r4, r3
   b5a44:	6933      	ldr	r3, [r6, #16]
   b5a46:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b5a48:	8b33      	ldrh	r3, [r6, #24]
   b5a4a:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b5a4c:	7eb3      	ldrb	r3, [r6, #26]
   b5a4e:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b5a50:	8c33      	ldrh	r3, [r6, #32]
   b5a52:	441c      	add	r4, r3
   b5a54:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   b5a56:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b5a58:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   b5a5c:	441c      	add	r4, r3
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   b5a5e:	683b      	ldr	r3, [r7, #0]
   b5a60:	429c      	cmp	r4, r3
   b5a62:	d00e      	beq.n	b5a82 <_Z17storageObjectLoopv+0x102>
   b5a64:	f005 f8be 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
      Log.info("current object stored and hash updated in %lu mSec", (millis() - stopwatch));
   b5a68:	4910      	ldr	r1, [pc, #64]	; (b5aac <_Z17storageObjectLoopv+0x12c>)
   b5a6a:	1b42      	subs	r2, r0, r5
   b5a6c:	480c      	ldr	r0, [pc, #48]	; (b5aa0 <_Z17storageObjectLoopv+0x120>)
   b5a6e:	f7fe fb2d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5a72:	4809      	ldr	r0, [pc, #36]	; (b5a98 <_Z17storageObjectLoopv+0x118>)
   b5a74:	2330      	movs	r3, #48	; 0x30
   b5a76:	4632      	mov	r2, r6
   b5a78:	2150      	movs	r1, #80	; 0x50
   b5a7a:	f002 fc04 	bl	b8286 <_ZN6MB85RC9writeDataEjPKhj>
      lastCurrentHash = currentHash;
   b5a7e:	603c      	str	r4, [r7, #0]
      returnValue = true;
   b5a80:	2001      	movs	r0, #1
}
   b5a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool returnValue = false;
   b5a84:	2000      	movs	r0, #0
   b5a86:	e7d0      	b.n	b5a2a <_Z17storageObjectLoopv+0xaa>
   b5a88:	2000      	movs	r0, #0
   b5a8a:	e7fa      	b.n	b5a82 <_Z17storageObjectLoopv+0x102>
   b5a8c:	2003e3c8 	.word	0x2003e3c8
   b5a90:	2003e408 	.word	0x2003e408
   b5a94:	2003e3d4 	.word	0x2003e3d4
   b5a98:	2003e24c 	.word	0x2003e24c
   b5a9c:	000c00f4 	.word	0x000c00f4
   b5aa0:	2003e658 	.word	0x2003e658
   b5aa4:	2003e3d8 	.word	0x2003e3d8
   b5aa8:	2003e3d0 	.word	0x2003e3d0
   b5aac:	000c0128 	.word	0x000c0128

000b5ab0 <_Z18storageObjectStartv>:
bool storageObjectStart() {
   b5ab0:	b513      	push	{r0, r1, r4, lr}
  Log.info("Initializing the Object Store");
   b5ab2:	4921      	ldr	r1, [pc, #132]	; (b5b38 <_Z18storageObjectStartv+0x88>)
   b5ab4:	4821      	ldr	r0, [pc, #132]	; (b5b3c <_Z18storageObjectStartv+0x8c>)
   b5ab6:	f7fe fb09 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
  fram.begin();                                     // Initialize the FRAM module
   b5aba:	4821      	ldr	r0, [pc, #132]	; (b5b40 <_Z18storageObjectStartv+0x90>)
   b5abc:	f002 fb56 	bl	b816c <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b5ac0:	481f      	ldr	r0, [pc, #124]	; (b5b40 <_Z18storageObjectStartv+0x90>)
   b5ac2:	2301      	movs	r3, #1
   b5ac4:	f10d 0207 	add.w	r2, sp, #7
   b5ac8:	2100      	movs	r1, #0
   b5aca:	f002 fb91 	bl	b81f0 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   b5ace:	f89d 4007 	ldrb.w	r4, [sp, #7]
   b5ad2:	2c01      	cmp	r4, #1
   b5ad4:	d01c      	beq.n	b5b10 <_Z18storageObjectStartv+0x60>
    Log.info("FRAM mismatch, erasing and loading defaults if it checks out");
   b5ad6:	491b      	ldr	r1, [pc, #108]	; (b5b44 <_Z18storageObjectStartv+0x94>)
   b5ad8:	4818      	ldr	r0, [pc, #96]	; (b5b3c <_Z18storageObjectStartv+0x8c>)
   b5ada:	f7fe faf7 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    fram.erase();                                   // Reset the FRAM to correct the issue
   b5ade:	4818      	ldr	r0, [pc, #96]	; (b5b40 <_Z18storageObjectStartv+0x90>)
   b5ae0:	f002 fb4e 	bl	b8180 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b5ae4:	4a18      	ldr	r2, [pc, #96]	; (b5b48 <_Z18storageObjectStartv+0x98>)
   b5ae6:	4816      	ldr	r0, [pc, #88]	; (b5b40 <_Z18storageObjectStartv+0x90>)
   b5ae8:	2304      	movs	r3, #4
   b5aea:	2100      	movs	r1, #0
   b5aec:	f002 fbcb 	bl	b8286 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b5af0:	4813      	ldr	r0, [pc, #76]	; (b5b40 <_Z18storageObjectStartv+0x90>)
   b5af2:	2301      	movs	r3, #1
   b5af4:	f10d 0207 	add.w	r2, sp, #7
   b5af8:	2100      	movs	r1, #0
   b5afa:	f002 fb79 	bl	b81f0 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   b5afe:	f89d 4007 	ldrb.w	r4, [sp, #7]
   b5b02:	2c01      	cmp	r4, #1
   b5b04:	d115      	bne.n	b5b32 <_Z18storageObjectStartv+0x82>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   b5b06:	f7ff feeb 	bl	b58e0 <_Z18loadSystemDefaultsv>
  return true;
   b5b0a:	4620      	mov	r0, r4
}
   b5b0c:	b002      	add	sp, #8
   b5b0e:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   b5b10:	490e      	ldr	r1, [pc, #56]	; (b5b4c <_Z18storageObjectStartv+0x9c>)
   b5b12:	480a      	ldr	r0, [pc, #40]	; (b5b3c <_Z18storageObjectStartv+0x8c>)
   b5b14:	f7fe fada 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5b18:	4621      	mov	r1, r4
   b5b1a:	4a0d      	ldr	r2, [pc, #52]	; (b5b50 <_Z18storageObjectStartv+0xa0>)
   b5b1c:	4808      	ldr	r0, [pc, #32]	; (b5b40 <_Z18storageObjectStartv+0x90>)
   b5b1e:	2328      	movs	r3, #40	; 0x28
   b5b20:	f002 fb66 	bl	b81f0 <_ZN6MB85RC8readDataEjPhj>
   b5b24:	4a0b      	ldr	r2, [pc, #44]	; (b5b54 <_Z18storageObjectStartv+0xa4>)
   b5b26:	4806      	ldr	r0, [pc, #24]	; (b5b40 <_Z18storageObjectStartv+0x90>)
   b5b28:	2330      	movs	r3, #48	; 0x30
   b5b2a:	2150      	movs	r1, #80	; 0x50
   b5b2c:	f002 fb60 	bl	b81f0 <_ZN6MB85RC8readDataEjPhj>
   b5b30:	e7eb      	b.n	b5b0a <_Z18storageObjectStartv+0x5a>
      return false;
   b5b32:	2000      	movs	r0, #0
   b5b34:	e7ea      	b.n	b5b0c <_Z18storageObjectStartv+0x5c>
   b5b36:	bf00      	nop
   b5b38:	000c015b 	.word	0x000c015b
   b5b3c:	2003e658 	.word	0x2003e658
   b5b40:	2003e24c 	.word	0x2003e24c
   b5b44:	000c0179 	.word	0x000c0179
   b5b48:	000c01d8 	.word	0x000c01d8
   b5b4c:	000c01b6 	.word	0x000c01b6
   b5b50:	2003e408 	.word	0x2003e408
   b5b54:	2003e3d8 	.word	0x2003e3d8

000b5b58 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b5b58:	ee07 0a90 	vmov	s15, r0
   b5b5c:	ed9f 7a09 	vldr	s14, [pc, #36]	; b5b84 <_Z17tmp36TemperatureCi+0x2c>
   b5b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5b64:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5b68:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5b88 <_Z17tmp36TemperatureCi+0x30>
   b5b6c:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b5b70:	eddf 7a06 	vldr	s15, [pc, #24]	; b5b8c <_Z17tmp36TemperatureCi+0x34>
   b5b74:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b5b78:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b5b7c:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5b80:	4770      	bx	lr
   b5b82:	bf00      	nop
   b5b84:	454e4000 	.word	0x454e4000
   b5b88:	457ff000 	.word	0x457ff000
   b5b8c:	43fa0000 	.word	0x43fa0000

000b5b90 <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   b5b90:	b510      	push	{r4, lr}
   b5b92:	b086      	sub	sp, #24
    const diag_source* src = nullptr;
   b5b94:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5b96:	a902      	add	r1, sp, #8
   b5b98:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   b5b9a:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   b5b9c:	f005 fa6a 	bl	bb074 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b5ba0:	b998      	cbnz	r0, b5bca <_Z12batteryStatev+0x3a>
    return get(src, val);
   b5ba2:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   b5ba4:	b10c      	cbz	r4, b5baa <_Z12batteryStatev+0x1a>
   b5ba6:	6923      	ldr	r3, [r4, #16]
   b5ba8:	b923      	cbnz	r3, b5bb4 <_Z12batteryStatev+0x24>
   b5baa:	4a17      	ldr	r2, [pc, #92]	; (b5c08 <_Z12batteryStatev+0x78>)
   b5bac:	4917      	ldr	r1, [pc, #92]	; (b5c0c <_Z12batteryStatev+0x7c>)
   b5bae:	200a      	movs	r0, #10
   b5bb0:	f005 fa38 	bl	bb024 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5bb4:	230c      	movs	r3, #12
   b5bb6:	9303      	str	r3, [sp, #12]
   b5bb8:	ab01      	add	r3, sp, #4
   b5bba:	9304      	str	r3, [sp, #16]
   b5bbc:	2304      	movs	r3, #4
   b5bbe:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b5bc0:	aa03      	add	r2, sp, #12
   b5bc2:	6923      	ldr	r3, [r4, #16]
   b5bc4:	2101      	movs	r1, #1
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   b5bca:	4b11      	ldr	r3, [pc, #68]	; (b5c10 <_Z12batteryStatev+0x80>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   b5bcc:	4c11      	ldr	r4, [pc, #68]	; (b5c14 <_Z12batteryStatev+0x84>)
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   b5bce:	7a1b      	ldrb	r3, [r3, #8]
        if (r < 0) {
   b5bd0:	2800      	cmp	r0, #0
        return val;
   b5bd2:	bfa8      	it	ge
   b5bd4:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   b5bd6:	7320      	strb	r0, [r4, #12]
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   b5bd8:	b133      	cbz	r3, b5be8 <_Z12batteryStatev+0x58>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b5bda:	480f      	ldr	r0, [pc, #60]	; (b5c18 <_Z12batteryStatev+0x88>)
   b5bdc:	f006 f956 	bl	bbe8c <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b5be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5be4:	f005 fc0c 	bl	bb400 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   b5be8:	480b      	ldr	r0, [pc, #44]	; (b5c18 <_Z12batteryStatev+0x88>)
   b5bea:	f006 f8ed 	bl	bbdc8 <_ZN9FuelGauge6getSoCEv>
   b5bee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b5bf2:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   b5bf6:	283c      	cmp	r0, #60	; 0x3c
   b5bf8:	bfd4      	ite	le
   b5bfa:	2000      	movle	r0, #0
   b5bfc:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   b5bfe:	edc4 7a02 	vstr	s15, [r4, #8]
}
   b5c02:	b006      	add	sp, #24
   b5c04:	bd10      	pop	{r4, pc}
   b5c06:	bf00      	nop
   b5c08:	000babd5 	.word	0x000babd5
   b5c0c:	000bfd39 	.word	0x000bfd39
   b5c10:	2003e408 	.word	0x2003e408
   b5c14:	2003e3d8 	.word	0x2003e3d8
   b5c18:	2003e430 	.word	0x2003e430

000b5c1c <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b5c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   b5c1e:	4d0c      	ldr	r5, [pc, #48]	; (b5c50 <_Z16isItSafeToChargev+0x34>)
  PMIC pmic(true);
   b5c20:	2101      	movs	r1, #1
   b5c22:	a801      	add	r0, sp, #4
   b5c24:	f007 fc65 	bl	bd4f2 <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   b5c28:	792b      	ldrb	r3, [r5, #4]
   b5c2a:	2b25      	cmp	r3, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5c2c:	a801      	add	r0, sp, #4
   b5c2e:	f04f 0401 	mov.w	r4, #1
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   b5c32:	d909      	bls.n	b5c48 <_Z16isItSafeToChargev+0x2c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5c34:	f007 fcf0 	bl	bd618 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b5c38:	732c      	strb	r4, [r5, #12]
    return false;
   b5c3a:	2400      	movs	r4, #0
  PMIC pmic(true);
   b5c3c:	a801      	add	r0, sp, #4
   b5c3e:	f007 fc67 	bl	bd510 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b5c42:	4620      	mov	r0, r4
   b5c44:	b003      	add	sp, #12
   b5c46:	bd30      	pop	{r4, r5, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b5c48:	f007 fccb 	bl	bd5e2 <_ZN4PMIC14enableChargingEv>
    return true;
   b5c4c:	e7f6      	b.n	b5c3c <_Z16isItSafeToChargev+0x20>
   b5c4e:	bf00      	nop
   b5c50:	2003e3d8 	.word	0x2003e3d8

000b5c54 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b5c54:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5c56:	4d19      	ldr	r5, [pc, #100]	; (b5cbc <_Z17getSignalStrengthv+0x68>)
   b5c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b5c5a:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5c5c:	ac0c      	add	r4, sp, #48	; 0x30
   b5c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c64:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5c68:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b5c6c:	4914      	ldr	r1, [pc, #80]	; (b5cc0 <_Z17getSignalStrengthv+0x6c>)
   b5c6e:	a804      	add	r0, sp, #16
   b5c70:	f005 fc40 	bl	bb4f4 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b5c74:	a804      	add	r0, sp, #16
   b5c76:	f005 fc80 	bl	bb57a <_ZNK14CellularSignal19getAccessTechnologyEv>
   b5c7a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b5c7c:	a804      	add	r0, sp, #16
   b5c7e:	f005 fcb5 	bl	bb5ec <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b5c82:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b5c84:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b5c88:	f005 fce0 	bl	bb64c <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5c8c:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b5c8e:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5c92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b5c96:	f008 ff35 	bl	beb04 <__aeabi_f2d>
   b5c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5c9e:	4628      	mov	r0, r5
   b5ca0:	f008 ff30 	bl	beb04 <__aeabi_f2d>
   b5ca4:	e9cd 0100 	strd	r0, r1, [sp]
   b5ca8:	4a06      	ldr	r2, [pc, #24]	; (b5cc4 <_Z17getSignalStrengthv+0x70>)
   b5caa:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b5cae:	4806      	ldr	r0, [pc, #24]	; (b5cc8 <_Z17getSignalStrengthv+0x74>)
   b5cb0:	2140      	movs	r1, #64	; 0x40
   b5cb2:	f005 fb4d 	bl	bb350 <snprintf>
   b5cb6:	b017      	add	sp, #92	; 0x5c
   b5cb8:	bd30      	pop	{r4, r5, pc}
   b5cba:	bf00      	nop
   b5cbc:	000c0254 	.word	0x000c0254
   b5cc0:	2003e584 	.word	0x2003e584
   b5cc4:	000c021a 	.word	0x000c021a
   b5cc8:	2003dde4 	.word	0x2003dde4

000b5ccc <_Z16takeMeasurementsv>:
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   b5ccc:	4b10      	ldr	r3, [pc, #64]	; (b5d10 <_Z16takeMeasurementsv+0x44>)
bool takeMeasurements() { 
   b5cce:	b510      	push	{r4, lr}
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   b5cd0:	8818      	ldrh	r0, [r3, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   b5cd2:	4c10      	ldr	r4, [pc, #64]	; (b5d14 <_Z16takeMeasurementsv+0x48>)
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   b5cd4:	f008 fcd7 	bl	be686 <analogRead>
   b5cd8:	f7ff ff3e 	bl	b5b58 <_Z17tmp36TemperatureCi>
   b5cdc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b5ce0:	4a0d      	ldr	r2, [pc, #52]	; (b5d18 <_Z16takeMeasurementsv+0x4c>)
   b5ce2:	ee17 3a90 	vmov	r3, s15
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   b5ce6:	2110      	movs	r1, #16
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   b5ce8:	7113      	strb	r3, [r2, #4]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   b5cea:	4620      	mov	r0, r4
   b5cec:	b2db      	uxtb	r3, r3
   b5cee:	4a0b      	ldr	r2, [pc, #44]	; (b5d1c <_Z16takeMeasurementsv+0x50>)
   b5cf0:	f005 fb2e 	bl	bb350 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   b5cf4:	490a      	ldr	r1, [pc, #40]	; (b5d20 <_Z16takeMeasurementsv+0x54>)
   b5cf6:	480b      	ldr	r0, [pc, #44]	; (b5d24 <_Z16takeMeasurementsv+0x58>)
   b5cf8:	4622      	mov	r2, r4
   b5cfa:	f7fe f9e7 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   b5cfe:	f7ff ff47 	bl	b5b90 <_Z12batteryStatev>
    isItSafeToCharge();
   b5d02:	f7ff ff8b 	bl	b5c1c <_Z16isItSafeToChargev>
    getSignalStrength();
   b5d06:	f7ff ffa5 	bl	b5c54 <_Z17getSignalStrengthv>
}
   b5d0a:	2001      	movs	r0, #1
   b5d0c:	bd10      	pop	{r4, pc}
   b5d0e:	bf00      	nop
   b5d10:	000bfdec 	.word	0x000bfdec
   b5d14:	2003ddd4 	.word	0x2003ddd4
   b5d18:	2003e3d8 	.word	0x2003e3d8
   b5d1c:	000c0233 	.word	0x000c0233
   b5d20:	000c0238 	.word	0x000c0238
   b5d24:	2003e658 	.word	0x2003e658

000b5d28 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b5d28:	4801      	ldr	r0, [pc, #4]	; (b5d30 <_GLOBAL__sub_I_batteryContext+0x8>)
   b5d2a:	2100      	movs	r1, #0
   b5d2c:	f006 b800 	b.w	bbd30 <_ZN9FuelGaugeC1Eb>
   b5d30:	2003e430 	.word	0x2003e430

000b5d34 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b5d34:	4770      	bx	lr

000b5d36 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b5d36:	b510      	push	{r4, lr}
}
   b5d38:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b5d3a:	4604      	mov	r4, r0
}
   b5d3c:	f7fe f9af 	bl	b409e <_ZdlPvj>
   b5d40:	4620      	mov	r0, r4
   b5d42:	bd10      	pop	{r4, pc}

000b5d44 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b5d44:	b510      	push	{r4, lr}
   b5d46:	4604      	mov	r4, r0
   b5d48:	b08a      	sub	sp, #40	; 0x28
   b5d4a:	4608      	mov	r0, r1
    attr.flags = 0;
   b5d4c:	f04f 0c20 	mov.w	ip, #32
   b5d50:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5d52:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b5d56:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5d5a:	460b      	mov	r3, r1
   b5d5c:	aa02      	add	r2, sp, #8
   b5d5e:	6821      	ldr	r1, [r4, #0]
   b5d60:	f005 f970 	bl	bb044 <log_message_v>
}
   b5d64:	b00a      	add	sp, #40	; 0x28
   b5d66:	bd10      	pop	{r4, pc}

000b5d68 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b5d68:	b40e      	push	{r1, r2, r3}
   b5d6a:	b503      	push	{r0, r1, lr}
   b5d6c:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b5d6e:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b5d70:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5d74:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b5d76:	f7ff ffe5 	bl	b5d44 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5d7a:	b002      	add	sp, #8
   b5d7c:	f85d eb04 	ldr.w	lr, [sp], #4
   b5d80:	b003      	add	sp, #12
   b5d82:	4770      	bx	lr

000b5d84 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5d84:	b40e      	push	{r1, r2, r3}
   b5d86:	b503      	push	{r0, r1, lr}
   b5d88:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b5d8a:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5d8c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5d90:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b5d92:	f7ff ffd7 	bl	b5d44 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5d96:	b002      	add	sp, #8
   b5d98:	f85d eb04 	ldr.w	lr, [sp], #4
   b5d9c:	b003      	add	sp, #12
   b5d9e:	4770      	bx	lr

000b5da0 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5da0:	b510      	push	{r4, lr}
   b5da2:	7202      	strb	r2, [r0, #8]
   b5da4:	22ff      	movs	r2, #255	; 0xff
   b5da6:	8142      	strh	r2, [r0, #10]
   b5da8:	2200      	movs	r2, #0
   b5daa:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b5dae:	6142      	str	r2, [r0, #20]
   b5db0:	7602      	strb	r2, [r0, #24]
   b5db2:	61c2      	str	r2, [r0, #28]
    instance = this;
   b5db4:	4a02      	ldr	r2, [pc, #8]	; (b5dc0 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5db6:	4c03      	ldr	r4, [pc, #12]	; (b5dc4 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b5db8:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5dba:	e9c0 4100 	strd	r4, r1, [r0]
}
   b5dbe:	bd10      	pop	{r4, pc}
   b5dc0:	2003e43c 	.word	0x2003e43c
   b5dc4:	000c04cc 	.word	0x000c04cc

000b5dc8 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b5dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5dcc:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b5dd0:	4604      	mov	r4, r0
   b5dd2:	4689      	mov	r9, r1
   b5dd4:	4616      	mov	r6, r2
   b5dd6:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b5dd8:	f1b8 0f00 	cmp.w	r8, #0
   b5ddc:	d002      	beq.n	b5de4 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b5dde:	6840      	ldr	r0, [r0, #4]
   b5de0:	f006 f8ee 	bl	bbfc0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b5de4:	7a21      	ldrb	r1, [r4, #8]
   b5de6:	6860      	ldr	r0, [r4, #4]
   b5de8:	f006 f8c7 	bl	bbf7a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b5dec:	6860      	ldr	r0, [r4, #4]
   b5dee:	6803      	ldr	r3, [r0, #0]
   b5df0:	4649      	mov	r1, r9
   b5df2:	689b      	ldr	r3, [r3, #8]
   b5df4:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b5df6:	6860      	ldr	r0, [r4, #4]
   b5df8:	2100      	movs	r1, #0
   b5dfa:	f006 f8dd 	bl	bbfb8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b5dfe:	4605      	mov	r5, r0
   b5e00:	bb00      	cbnz	r0, b5e44 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5e02:	2301      	movs	r3, #1
   b5e04:	7a21      	ldrb	r1, [r4, #8]
   b5e06:	6860      	ldr	r0, [r4, #4]
   b5e08:	463a      	mov	r2, r7
   b5e0a:	f006 f8a4 	bl	bbf56 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b5e0e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5e10:	4603      	mov	r3, r0
        if (count == num) {
   b5e12:	d109      	bne.n	b5e28 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b5e14:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b5e16:	42be      	cmp	r6, r7
   b5e18:	d01c      	beq.n	b5e54 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b5e1a:	6860      	ldr	r0, [r4, #4]
   b5e1c:	6803      	ldr	r3, [r0, #0]
   b5e1e:	695b      	ldr	r3, [r3, #20]
   b5e20:	4798      	blx	r3
   b5e22:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b5e26:	e7f6      	b.n	b5e16 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b5e28:	490b      	ldr	r1, [pc, #44]	; (b5e58 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b5e2a:	480c      	ldr	r0, [pc, #48]	; (b5e5c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5e2c:	464a      	mov	r2, r9
   b5e2e:	f7ff ff9b 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b5e32:	f1b8 0f00 	cmp.w	r8, #0
   b5e36:	d002      	beq.n	b5e3e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b5e38:	6860      	ldr	r0, [r4, #4]
   b5e3a:	f006 f8ca 	bl	bbfd2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b5e3e:	4628      	mov	r0, r5
   b5e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b5e44:	4603      	mov	r3, r0
   b5e46:	4906      	ldr	r1, [pc, #24]	; (b5e60 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b5e48:	4804      	ldr	r0, [pc, #16]	; (b5e5c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5e4a:	464a      	mov	r2, r9
   b5e4c:	f7ff ff8c 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b5e50:	2500      	movs	r5, #0
   b5e52:	e7ee      	b.n	b5e32 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b5e54:	2501      	movs	r5, #1
   b5e56:	e7ec      	b.n	b5e32 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b5e58:	000c027c 	.word	0x000c027c
   b5e5c:	2003e438 	.word	0x2003e438
   b5e60:	000c02a1 	.word	0x000c02a1

000b5e64 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b5e64:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b5e66:	9300      	str	r3, [sp, #0]
   b5e68:	2301      	movs	r3, #1
   b5e6a:	f7ff ffad 	bl	b5dc8 <_ZN6AB180513readRegistersEhPhjb>
}
   b5e6e:	b003      	add	sp, #12
   b5e70:	f85d fb04 	ldr.w	pc, [sp], #4

000b5e74 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b5e74:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b5e76:	8943      	ldrh	r3, [r0, #10]
   b5e78:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b5e7a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b5e7c:	d010      	beq.n	b5ea0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5e7e:	4e19      	ldr	r6, [pc, #100]	; (b5ee4 <_ZN6AB180510detectChipEv+0x70>)
   b5e80:	4d19      	ldr	r5, [pc, #100]	; (b5ee8 <_ZN6AB180510detectChipEv+0x74>)
   b5e82:	f004 feaf 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b5e86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b5e8a:	d209      	bcs.n	b5ea0 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b5e8c:	8960      	ldrh	r0, [r4, #10]
   b5e8e:	f008 fbe7 	bl	be660 <digitalRead>
   b5e92:	2801      	cmp	r0, #1
   b5e94:	d004      	beq.n	b5ea0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5e96:	4631      	mov	r1, r6
   b5e98:	4628      	mov	r0, r5
   b5e9a:	f7fe f917 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5e9e:	e7f0      	b.n	b5e82 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b5ea0:	2301      	movs	r3, #1
   b5ea2:	f10d 0207 	add.w	r2, sp, #7
   b5ea6:	2128      	movs	r1, #40	; 0x28
   b5ea8:	4620      	mov	r0, r4
   b5eaa:	f7ff ffdb 	bl	b5e64 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b5eae:	b930      	cbnz	r0, b5ebe <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b5eb0:	480d      	ldr	r0, [pc, #52]	; (b5ee8 <_ZN6AB180510detectChipEv+0x74>)
   b5eb2:	490e      	ldr	r1, [pc, #56]	; (b5eec <_ZN6AB180510detectChipEv+0x78>)
   b5eb4:	f7fe f90a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5eb8:	2000      	movs	r0, #0
}
   b5eba:	b002      	add	sp, #8
   b5ebc:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b5ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5ec2:	2b18      	cmp	r3, #24
   b5ec4:	d1f4      	bne.n	b5eb0 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b5ec6:	2301      	movs	r3, #1
   b5ec8:	f10d 0207 	add.w	r2, sp, #7
   b5ecc:	2129      	movs	r1, #41	; 0x29
   b5ece:	4620      	mov	r0, r4
   b5ed0:	f7ff ffc8 	bl	b5e64 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b5ed4:	2800      	cmp	r0, #0
   b5ed6:	d0eb      	beq.n	b5eb0 <_ZN6AB180510detectChipEv+0x3c>
   b5ed8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5edc:	2b05      	cmp	r3, #5
   b5ede:	d1e7      	bne.n	b5eb0 <_ZN6AB180510detectChipEv+0x3c>
   b5ee0:	e7eb      	b.n	b5eba <_ZN6AB180510detectChipEv+0x46>
   b5ee2:	bf00      	nop
   b5ee4:	000c02c5 	.word	0x000c02c5
   b5ee8:	2003e438 	.word	0x2003e438
   b5eec:	000c02da 	.word	0x000c02da

000b5ef0 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b5ef0:	b507      	push	{r0, r1, r2, lr}
   b5ef2:	4613      	mov	r3, r2
    uint8_t value = 0;
   b5ef4:	2200      	movs	r2, #0
   b5ef6:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b5efa:	f10d 0207 	add.w	r2, sp, #7
   b5efe:	f7ff ffb1 	bl	b5e64 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b5f02:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b5f06:	b003      	add	sp, #12
   b5f08:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f0c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b5f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f10:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b5f14:	4604      	mov	r4, r0
   b5f16:	460f      	mov	r7, r1
   b5f18:	4615      	mov	r5, r2
   b5f1a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b5f1c:	f1b8 0f00 	cmp.w	r8, #0
   b5f20:	d002      	beq.n	b5f28 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b5f22:	6840      	ldr	r0, [r0, #4]
   b5f24:	f006 f84c 	bl	bbfc0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b5f28:	7a21      	ldrb	r1, [r4, #8]
   b5f2a:	6860      	ldr	r0, [r4, #4]
   b5f2c:	f006 f825 	bl	bbf7a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b5f30:	6860      	ldr	r0, [r4, #4]
   b5f32:	6803      	ldr	r3, [r0, #0]
   b5f34:	4639      	mov	r1, r7
   b5f36:	689b      	ldr	r3, [r3, #8]
   b5f38:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b5f3a:	442e      	add	r6, r5
   b5f3c:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b5f3e:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b5f40:	d005      	beq.n	b5f4e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b5f42:	6803      	ldr	r3, [r0, #0]
   b5f44:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5f48:	689b      	ldr	r3, [r3, #8]
   b5f4a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b5f4c:	e7f6      	b.n	b5f3c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b5f4e:	2101      	movs	r1, #1
   b5f50:	f006 f832 	bl	bbfb8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b5f54:	4603      	mov	r3, r0
   b5f56:	b170      	cbz	r0, b5f76 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b5f58:	4908      	ldr	r1, [pc, #32]	; (b5f7c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b5f5a:	4809      	ldr	r0, [pc, #36]	; (b5f80 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b5f5c:	463a      	mov	r2, r7
   b5f5e:	f7ff ff03 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b5f62:	2500      	movs	r5, #0
    }

    if (lock) {
   b5f64:	f1b8 0f00 	cmp.w	r8, #0
   b5f68:	d002      	beq.n	b5f70 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b5f6a:	6860      	ldr	r0, [r4, #4]
   b5f6c:	f006 f831 	bl	bbfd2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b5f70:	4628      	mov	r0, r5
   b5f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b5f76:	2501      	movs	r5, #1
   b5f78:	e7f4      	b.n	b5f64 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b5f7a:	bf00      	nop
   b5f7c:	000c02e7 	.word	0x000c02e7
   b5f80:	2003e438 	.word	0x2003e438

000b5f84 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b5f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5f86:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b5f8a:	9300      	str	r3, [sp, #0]
   b5f8c:	f10d 020f 	add.w	r2, sp, #15
   b5f90:	2301      	movs	r3, #1
   b5f92:	f7ff ffbb 	bl	b5f0c <_ZN6AB180514writeRegistersEhPKhjb>
}
   b5f96:	b005      	add	sp, #20
   b5f98:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f9c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b5f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b5f9e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b5fa0:	460c      	mov	r4, r1
   b5fa2:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b5fa4:	491a      	ldr	r1, [pc, #104]	; (b6010 <_ZN6AB18056setWDTEi+0x74>)
   b5fa6:	481b      	ldr	r0, [pc, #108]	; (b6014 <_ZN6AB18056setWDTEi+0x78>)
   b5fa8:	f7fe f890 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b5fac:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b5fae:	bfb8      	it	lt
   b5fb0:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b5fb2:	b97c      	cbnz	r4, b5fd4 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b5fb4:	2301      	movs	r3, #1
   b5fb6:	4622      	mov	r2, r4
   b5fb8:	211b      	movs	r1, #27
   b5fba:	4628      	mov	r0, r5
   b5fbc:	f7ff ffe2 	bl	b5f84 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b5fc0:	4915      	ldr	r1, [pc, #84]	; (b6018 <_ZN6AB18056setWDTEi+0x7c>)
   b5fc2:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b5fc4:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b5fc6:	4813      	ldr	r0, [pc, #76]	; (b6014 <_ZN6AB18056setWDTEi+0x78>)
   b5fc8:	f7ff fedc 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b5fcc:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b5fce:	616c      	str	r4, [r5, #20]
}
   b5fd0:	4630      	mov	r0, r6
   b5fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b5fd4:	2c03      	cmp	r4, #3
   b5fd6:	dd19      	ble.n	b600c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b5fd8:	10a7      	asrs	r7, r4, #2
   b5fda:	2f1f      	cmp	r7, #31
   b5fdc:	bfa8      	it	ge
   b5fde:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b5fe0:	00ba      	lsls	r2, r7, #2
   b5fe2:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b5fe6:	2301      	movs	r3, #1
   b5fe8:	b2d2      	uxtb	r2, r2
   b5fea:	211b      	movs	r1, #27
   b5fec:	4628      	mov	r0, r5
   b5fee:	f7ff ffc9 	bl	b5f84 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b5ff2:	463a      	mov	r2, r7
   b5ff4:	4603      	mov	r3, r0
   b5ff6:	4909      	ldr	r1, [pc, #36]	; (b601c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b5ff8:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b5ffa:	4806      	ldr	r0, [pc, #24]	; (b6014 <_ZN6AB18056setWDTEi+0x78>)
   b5ffc:	f7ff fec2 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6000:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6004:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6006:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6008:	616f      	str	r7, [r5, #20]
   b600a:	e7e1      	b.n	b5fd0 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b600c:	2701      	movs	r7, #1
   b600e:	e7e7      	b.n	b5fe0 <_ZN6AB18056setWDTEi+0x44>
   b6010:	000c030c 	.word	0x000c030c
   b6014:	2003e438 	.word	0x2003e438
   b6018:	000c0316 	.word	0x000c0316
   b601c:	000c0332 	.word	0x000c0332

000b6020 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6020:	4b06      	ldr	r3, [pc, #24]	; (b603c <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6022:	681a      	ldr	r2, [r3, #0]
   b6024:	b14a      	cbz	r2, b603a <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6026:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b602a:	430b      	orrs	r3, r1
   b602c:	d105      	bne.n	b603a <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b602e:	68d3      	ldr	r3, [r2, #12]
   b6030:	b11b      	cbz	r3, b603a <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6032:	2100      	movs	r1, #0
   b6034:	4610      	mov	r0, r2
   b6036:	f7ff bfb1 	b.w	b5f9c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b603a:	4770      	bx	lr
   b603c:	2003e43c 	.word	0x2003e43c

000b6040 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6040:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6044:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6048:	4605      	mov	r5, r0
   b604a:	4616      	mov	r6, r2
   b604c:	461f      	mov	r7, r3
    if (lock) {
   b604e:	f1b8 0f00 	cmp.w	r8, #0
   b6052:	d004      	beq.n	b605e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6054:	6840      	ldr	r0, [r0, #4]
   b6056:	9101      	str	r1, [sp, #4]
   b6058:	f005 ffb2 	bl	bbfc0 <_ZN7TwoWire4lockEv>
   b605c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b605e:	9101      	str	r1, [sp, #4]
   b6060:	2300      	movs	r3, #0
   b6062:	f10d 020f 	add.w	r2, sp, #15
   b6066:	4628      	mov	r0, r5
   b6068:	f7ff fefc 	bl	b5e64 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b606c:	4604      	mov	r4, r0
   b606e:	b160      	cbz	r0, b608a <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6070:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6074:	ea03 0206 	and.w	r2, r3, r6
   b6078:	433a      	orrs	r2, r7
        if (newValue != value) {
   b607a:	4293      	cmp	r3, r2
   b607c:	d005      	beq.n	b608a <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b607e:	9901      	ldr	r1, [sp, #4]
   b6080:	2300      	movs	r3, #0
   b6082:	4628      	mov	r0, r5
   b6084:	f7ff ff7e 	bl	b5f84 <_ZN6AB180513writeRegisterEhhb>
   b6088:	4604      	mov	r4, r0
    if (lock) {
   b608a:	f1b8 0f00 	cmp.w	r8, #0
   b608e:	d002      	beq.n	b6096 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6090:	6868      	ldr	r0, [r5, #4]
   b6092:	f005 ff9e 	bl	bbfd2 <_ZN7TwoWire6unlockEv>
}
   b6096:	4620      	mov	r0, r4
   b6098:	b004      	add	sp, #16
   b609a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b609e <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b609e:	b513      	push	{r0, r1, r4, lr}
   b60a0:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b60a2:	f10d 0207 	add.w	r2, sp, #7
   b60a6:	f7ff fedd 	bl	b5e64 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b60aa:	b128      	cbz	r0, b60b8 <_ZN6AB180510isBitClearEhhb+0x1a>
   b60ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b60b0:	421c      	tst	r4, r3
   b60b2:	bf0c      	ite	eq
   b60b4:	2001      	moveq	r0, #1
   b60b6:	2000      	movne	r0, #0
}
   b60b8:	b002      	add	sp, #8
   b60ba:	bd10      	pop	{r4, pc}

000b60bc <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b60bc:	b513      	push	{r0, r1, r4, lr}
   b60be:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b60c0:	f10d 0207 	add.w	r2, sp, #7
   b60c4:	f7ff fece 	bl	b5e64 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b60c8:	b128      	cbz	r0, b60d6 <_ZN6AB18058isBitSetEhhb+0x1a>
   b60ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b60ce:	421c      	tst	r4, r3
   b60d0:	bf14      	ite	ne
   b60d2:	2001      	movne	r0, #1
   b60d4:	2000      	moveq	r0, #0
}
   b60d6:	b002      	add	sp, #8
   b60d8:	bd10      	pop	{r4, pc}

000b60da <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b60da:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b60dc:	43d2      	mvns	r2, r2
   b60de:	9300      	str	r3, [sp, #0]
   b60e0:	b2d2      	uxtb	r2, r2
   b60e2:	2300      	movs	r3, #0
   b60e4:	f7ff ffac 	bl	b6040 <_ZN6AB180512maskRegisterEhhhb>
}
   b60e8:	b003      	add	sp, #12
   b60ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b60f0 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b60f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b60f2:	2301      	movs	r3, #1
   b60f4:	f10d 0207 	add.w	r2, sp, #7
   b60f8:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b60fa:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b60fc:	f7ff feb2 	bl	b5e64 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6100:	4605      	mov	r5, r0
   b6102:	b938      	cbnz	r0, b6114 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6104:	491e      	ldr	r1, [pc, #120]	; (b6180 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6106:	481f      	ldr	r0, [pc, #124]	; (b6184 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6108:	22ad      	movs	r2, #173	; 0xad
   b610a:	f7ff fe2d 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
}
   b610e:	4628      	mov	r0, r5
   b6110:	b003      	add	sp, #12
   b6112:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6114:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6118:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b611c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6120:	d00b      	beq.n	b613a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6122:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6124:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6126:	210f      	movs	r1, #15
   b6128:	4620      	mov	r0, r4
   b612a:	f7ff ffd6 	bl	b60da <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b612e:	4a16      	ldr	r2, [pc, #88]	; (b6188 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6130:	4916      	ldr	r1, [pc, #88]	; (b618c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6132:	4814      	ldr	r0, [pc, #80]	; (b6184 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6134:	f7fd ffca 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b6138:	e7e9      	b.n	b610e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b613a:	2208      	movs	r2, #8
   b613c:	2117      	movs	r1, #23
   b613e:	4620      	mov	r0, r4
   b6140:	f7ff ffbc 	bl	b60bc <_ZN6AB18058isBitSetEhhb>
   b6144:	b118      	cbz	r0, b614e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6146:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6148:	4a11      	ldr	r2, [pc, #68]	; (b6190 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b614a:	61e3      	str	r3, [r4, #28]
   b614c:	e7f0      	b.n	b6130 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b614e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6152:	071a      	lsls	r2, r3, #28
   b6154:	d509      	bpl.n	b616a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6156:	2303      	movs	r3, #3
   b6158:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b615a:	2208      	movs	r2, #8
   b615c:	2301      	movs	r3, #1
   b615e:	210f      	movs	r1, #15
   b6160:	4620      	mov	r0, r4
   b6162:	f7ff ffba 	bl	b60da <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6166:	4a0b      	ldr	r2, [pc, #44]	; (b6194 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6168:	e7e2      	b.n	b6130 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b616a:	075b      	lsls	r3, r3, #29
   b616c:	d5cf      	bpl.n	b610e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b616e:	2204      	movs	r2, #4
   b6170:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b6172:	2301      	movs	r3, #1
   b6174:	210f      	movs	r1, #15
   b6176:	4620      	mov	r0, r4
   b6178:	f7ff ffaf 	bl	b60da <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b617c:	4a06      	ldr	r2, [pc, #24]	; (b6198 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b617e:	e7d7      	b.n	b6130 <_ZN6AB180516updateWakeReasonEv+0x40>
   b6180:	000c0385 	.word	0x000c0385
   b6184:	2003e438 	.word	0x2003e438
   b6188:	000c0356 	.word	0x000c0356
   b618c:	000c03a4 	.word	0x000c03a4
   b6190:	000c035f 	.word	0x000c035f
   b6194:	000c036f 	.word	0x000c036f
   b6198:	000c037f 	.word	0x000c037f

000b619c <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b619c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b619e:	9300      	str	r3, [sp, #0]
   b61a0:	4613      	mov	r3, r2
   b61a2:	22ff      	movs	r2, #255	; 0xff
   b61a4:	f7ff ff4c 	bl	b6040 <_ZN6AB180512maskRegisterEhhhb>
}
   b61a8:	b003      	add	sp, #12
   b61aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b61b0 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b61b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61b2:	460f      	mov	r7, r1
   b61b4:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b61b6:	2301      	movs	r3, #1
   b61b8:	2200      	movs	r2, #0
   b61ba:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b61bc:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b61be:	f7ff fee1 	bl	b5f84 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b61c2:	4604      	mov	r4, r0
   b61c4:	b938      	cbnz	r0, b61d6 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b61c6:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b61ca:	491f      	ldr	r1, [pc, #124]	; (b6248 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b61cc:	481f      	ldr	r0, [pc, #124]	; (b624c <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b61ce:	f7ff fdcb 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
}
   b61d2:	4620      	mov	r0, r4
   b61d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b61d6:	2301      	movs	r3, #1
   b61d8:	2223      	movs	r2, #35	; 0x23
   b61da:	2118      	movs	r1, #24
   b61dc:	4628      	mov	r0, r5
   b61de:	f7ff fed1 	bl	b5f84 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b61e2:	4604      	mov	r4, r0
   b61e4:	b910      	cbnz	r0, b61ec <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b61e6:	f240 229b 	movw	r2, #667	; 0x29b
   b61ea:	e7ee      	b.n	b61ca <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b61ec:	2fff      	cmp	r7, #255	; 0xff
   b61ee:	bfa8      	it	ge
   b61f0:	27ff      	movge	r7, #255	; 0xff
   b61f2:	2f01      	cmp	r7, #1
   b61f4:	bfb8      	it	lt
   b61f6:	2701      	movlt	r7, #1
   b61f8:	2301      	movs	r3, #1
   b61fa:	b2fa      	uxtb	r2, r7
   b61fc:	2119      	movs	r1, #25
   b61fe:	4628      	mov	r0, r5
   b6200:	f7ff fec0 	bl	b5f84 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6204:	4604      	mov	r4, r0
   b6206:	b910      	cbnz	r0, b620e <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6208:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b620c:	e7dd      	b.n	b61ca <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b620e:	2301      	movs	r3, #1
   b6210:	2208      	movs	r2, #8
   b6212:	2112      	movs	r1, #18
   b6214:	4628      	mov	r0, r5
   b6216:	f7ff ffc1 	bl	b619c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b621a:	4604      	mov	r4, r0
   b621c:	b910      	cbnz	r0, b6224 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b621e:	f240 22af 	movw	r2, #687	; 0x2af
   b6222:	e7d2      	b.n	b61ca <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6224:	2e00      	cmp	r6, #0
   b6226:	bf14      	ite	ne
   b6228:	2203      	movne	r2, #3
   b622a:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b622c:	2301      	movs	r3, #1
   b622e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b6232:	2118      	movs	r1, #24
   b6234:	4628      	mov	r0, r5
   b6236:	f7ff fea5 	bl	b5f84 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b623a:	4604      	mov	r4, r0
   b623c:	2800      	cmp	r0, #0
   b623e:	d1c8      	bne.n	b61d2 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b6240:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6244:	e7c1      	b.n	b61ca <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6246:	bf00      	nop
   b6248:	000c03b5 	.word	0x000c03b5
   b624c:	2003e438 	.word	0x2003e438

000b6250 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b6254:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b6256:	4605      	mov	r5, r0
   b6258:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b625a:	484f      	ldr	r0, [pc, #316]	; (b6398 <_ZN6AB180513deepPowerDownEi+0x148>)
   b625c:	494f      	ldr	r1, [pc, #316]	; (b639c <_ZN6AB180513deepPowerDownEi+0x14c>)
   b625e:	f7fd ff35 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b6262:	2100      	movs	r1, #0
   b6264:	4628      	mov	r0, r5
   b6266:	f7ff fe99 	bl	b5f9c <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b626a:	4604      	mov	r4, r0
   b626c:	b948      	cbnz	r0, b6282 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b626e:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b6272:	494b      	ldr	r1, [pc, #300]	; (b63a0 <_ZN6AB180513deepPowerDownEi+0x150>)
   b6274:	4848      	ldr	r0, [pc, #288]	; (b6398 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6276:	f7ff fd77 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
}
   b627a:	4620      	mov	r0, r4
   b627c:	b003      	add	sp, #12
   b627e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b6282:	2301      	movs	r3, #1
   b6284:	461a      	mov	r2, r3
   b6286:	2130      	movs	r1, #48	; 0x30
   b6288:	4628      	mov	r0, r5
   b628a:	f7ff ff87 	bl	b619c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b628e:	4604      	mov	r4, r0
   b6290:	b910      	cbnz	r0, b6298 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b6292:	f240 2205 	movw	r2, #517	; 0x205
   b6296:	e7ec      	b.n	b6272 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6298:	2210      	movs	r2, #16
   b629a:	2301      	movs	r3, #1
   b629c:	4611      	mov	r1, r2
   b629e:	4628      	mov	r0, r5
   b62a0:	f7ff ff1b 	bl	b60da <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b62a4:	4604      	mov	r4, r0
   b62a6:	b910      	cbnz	r0, b62ae <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b62a8:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b62ac:	e7e1      	b.n	b6272 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b62ae:	2301      	movs	r3, #1
   b62b0:	2226      	movs	r2, #38	; 0x26
   b62b2:	2113      	movs	r1, #19
   b62b4:	4628      	mov	r0, r5
   b62b6:	f7ff fe65 	bl	b5f84 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b62ba:	4604      	mov	r4, r0
   b62bc:	b910      	cbnz	r0, b62c4 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b62be:	f240 2213 	movw	r2, #531	; 0x213
   b62c2:	e7d6      	b.n	b6272 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b62c4:	2601      	movs	r6, #1
   b62c6:	9600      	str	r6, [sp, #0]
   b62c8:	4633      	mov	r3, r6
   b62ca:	22fc      	movs	r2, #252	; 0xfc
   b62cc:	2111      	movs	r1, #17
   b62ce:	4628      	mov	r0, r5
   b62d0:	f7ff feb6 	bl	b6040 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b62d4:	4604      	mov	r4, r0
   b62d6:	b910      	cbnz	r0, b62de <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b62d8:	f240 221b 	movw	r2, #539	; 0x21b
   b62dc:	e7c9      	b.n	b6272 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b62de:	2200      	movs	r2, #0
   b62e0:	4639      	mov	r1, r7
   b62e2:	4628      	mov	r0, r5
   b62e4:	f7ff ff64 	bl	b61b0 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b62e8:	4604      	mov	r4, r0
   b62ea:	b910      	cbnz	r0, b62f2 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b62ec:	f240 2222 	movw	r2, #546	; 0x222
   b62f0:	e7bf      	b.n	b6272 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b62f2:	9600      	str	r6, [sp, #0]
   b62f4:	2302      	movs	r3, #2
   b62f6:	2277      	movs	r2, #119	; 0x77
   b62f8:	2110      	movs	r1, #16
   b62fa:	4628      	mov	r0, r5
   b62fc:	f7ff fea0 	bl	b6040 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6300:	4604      	mov	r4, r0
   b6302:	b910      	cbnz	r0, b630a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6304:	f240 222b 	movw	r2, #555	; 0x22b
   b6308:	e7b3      	b.n	b6272 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b630a:	4633      	mov	r3, r6
   b630c:	2204      	movs	r2, #4
   b630e:	211c      	movs	r1, #28
   b6310:	4628      	mov	r0, r5
   b6312:	f7ff ff43 	bl	b619c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6316:	4604      	mov	r4, r0
   b6318:	b910      	cbnz	r0, b6320 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b631a:	f240 2232 	movw	r2, #562	; 0x232
   b631e:	e7a8      	b.n	b6272 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6320:	9600      	str	r6, [sp, #0]
   b6322:	2318      	movs	r3, #24
   b6324:	22e3      	movs	r2, #227	; 0xe3
   b6326:	2111      	movs	r1, #17
   b6328:	4628      	mov	r0, r5
   b632a:	f7ff fe89 	bl	b6040 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b632e:	4604      	mov	r4, r0
   b6330:	b910      	cbnz	r0, b6338 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b6332:	f240 2239 	movw	r2, #569	; 0x239
   b6336:	e79c      	b.n	b6272 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6338:	4633      	mov	r3, r6
   b633a:	22c0      	movs	r2, #192	; 0xc0
   b633c:	2117      	movs	r1, #23
   b633e:	4628      	mov	r0, r5
   b6340:	f7ff fe20 	bl	b5f84 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6344:	4604      	mov	r4, r0
   b6346:	b910      	cbnz	r0, b634e <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6348:	f44f 7210 	mov.w	r2, #576	; 0x240
   b634c:	e791      	b.n	b6272 <_ZN6AB180513deepPowerDownEi+0x22>
   b634e:	f004 fc49 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6352:	f8df 9054 	ldr.w	r9, [pc, #84]	; b63a8 <_ZN6AB180513deepPowerDownEi+0x158>
   b6356:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6398 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b635a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b635e:	4606      	mov	r6, r0
   b6360:	434f      	muls	r7, r1
   b6362:	f004 fc3f 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b6366:	1b80      	subs	r0, r0, r6
   b6368:	42b8      	cmp	r0, r7
   b636a:	d20e      	bcs.n	b638a <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b636c:	2201      	movs	r2, #1
   b636e:	2117      	movs	r1, #23
   b6370:	4628      	mov	r0, r5
   b6372:	f7ff fdbd 	bl	b5ef0 <_ZN6AB180512readRegisterEhb>
   b6376:	4649      	mov	r1, r9
   b6378:	4602      	mov	r2, r0
   b637a:	4640      	mov	r0, r8
   b637c:	f7fd fea6 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6384:	f005 f83c 	bl	bb400 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6388:	e7eb      	b.n	b6362 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b638a:	4906      	ldr	r1, [pc, #24]	; (b63a4 <_ZN6AB180513deepPowerDownEi+0x154>)
   b638c:	4802      	ldr	r0, [pc, #8]	; (b6398 <_ZN6AB180513deepPowerDownEi+0x148>)
   b638e:	f7ff fceb 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b6392:	f007 fd52 	bl	bde3a <_ZN11SystemClass5resetEv>
    return true;
   b6396:	e770      	b.n	b627a <_ZN6AB180513deepPowerDownEi+0x2a>
   b6398:	2003e438 	.word	0x2003e438
   b639c:	000c03e0 	.word	0x000c03e0
   b63a0:	000c03d5 	.word	0x000c03d5
   b63a4:	000c0406 	.word	0x000c0406
   b63a8:	000c03f1 	.word	0x000c03f1

000b63ac <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b63ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b63b0:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b63b4:	4605      	mov	r5, r0
   b63b6:	460c      	mov	r4, r1
   b63b8:	4691      	mov	r9, r2
   b63ba:	461f      	mov	r7, r3
    if (lock) {
   b63bc:	f1ba 0f00 	cmp.w	sl, #0
   b63c0:	d002      	beq.n	b63c8 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b63c2:	6840      	ldr	r0, [r0, #4]
   b63c4:	f005 fdfc 	bl	bbfc0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b63c8:	b307      	cbz	r7, b640c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b63ca:	2f20      	cmp	r7, #32
   b63cc:	463e      	mov	r6, r7
   b63ce:	bf28      	it	cs
   b63d0:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b63d2:	2c7f      	cmp	r4, #127	; 0x7f
   b63d4:	d826      	bhi.n	b6424 <_ZN6AB18057readRamEjPhjb+0x78>
   b63d6:	1933      	adds	r3, r6, r4
   b63d8:	2b80      	cmp	r3, #128	; 0x80
   b63da:	d901      	bls.n	b63e0 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b63dc:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b63e0:	2301      	movs	r3, #1
   b63e2:	2204      	movs	r2, #4
   b63e4:	213f      	movs	r1, #63	; 0x3f
   b63e6:	4628      	mov	r0, r5
   b63e8:	f7ff fe77 	bl	b60da <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b63ec:	2300      	movs	r3, #0
   b63ee:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b63f2:	9300      	str	r3, [sp, #0]
   b63f4:	464a      	mov	r2, r9
   b63f6:	4633      	mov	r3, r6
   b63f8:	b2c9      	uxtb	r1, r1
   b63fa:	4628      	mov	r0, r5
   b63fc:	f7ff fce4 	bl	b5dc8 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6400:	4680      	mov	r8, r0
   b6402:	b128      	cbz	r0, b6410 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6404:	4434      	add	r4, r6
        dataLen -= count;
   b6406:	1bbf      	subs	r7, r7, r6
        data += count;
   b6408:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b640a:	e7dd      	b.n	b63c8 <_ZN6AB18057readRamEjPhjb+0x1c>
   b640c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6410:	f1ba 0f00 	cmp.w	sl, #0
   b6414:	d002      	beq.n	b641c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6416:	6868      	ldr	r0, [r5, #4]
   b6418:	f005 fddb 	bl	bbfd2 <_ZN7TwoWire6unlockEv>
}
   b641c:	4640      	mov	r0, r8
   b641e:	b002      	add	sp, #8
   b6420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6424:	2301      	movs	r3, #1
   b6426:	2204      	movs	r2, #4
   b6428:	213f      	movs	r1, #63	; 0x3f
   b642a:	4628      	mov	r0, r5
   b642c:	f7ff feb6 	bl	b619c <_ZN6AB180514setRegisterBitEhhb>
   b6430:	e7dc      	b.n	b63ec <_ZN6AB18057readRamEjPhjb+0x40>

000b6432 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b6432:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6436:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b643a:	4605      	mov	r5, r0
   b643c:	460c      	mov	r4, r1
   b643e:	4691      	mov	r9, r2
   b6440:	461f      	mov	r7, r3
    if (lock) {
   b6442:	f1ba 0f00 	cmp.w	sl, #0
   b6446:	d002      	beq.n	b644e <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6448:	6840      	ldr	r0, [r0, #4]
   b644a:	f005 fdb9 	bl	bbfc0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b644e:	b307      	cbz	r7, b6492 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b6450:	2f1f      	cmp	r7, #31
   b6452:	463e      	mov	r6, r7
   b6454:	bf28      	it	cs
   b6456:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6458:	2c7f      	cmp	r4, #127	; 0x7f
   b645a:	d826      	bhi.n	b64aa <_ZN6AB18058writeRamEjPKhjb+0x78>
   b645c:	1933      	adds	r3, r6, r4
   b645e:	2b80      	cmp	r3, #128	; 0x80
   b6460:	d901      	bls.n	b6466 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b6462:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6466:	2301      	movs	r3, #1
   b6468:	2204      	movs	r2, #4
   b646a:	213f      	movs	r1, #63	; 0x3f
   b646c:	4628      	mov	r0, r5
   b646e:	f7ff fe34 	bl	b60da <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6472:	2300      	movs	r3, #0
   b6474:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6478:	9300      	str	r3, [sp, #0]
   b647a:	464a      	mov	r2, r9
   b647c:	4633      	mov	r3, r6
   b647e:	b2c9      	uxtb	r1, r1
   b6480:	4628      	mov	r0, r5
   b6482:	f7ff fd43 	bl	b5f0c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b6486:	4680      	mov	r8, r0
   b6488:	b128      	cbz	r0, b6496 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b648a:	4434      	add	r4, r6
        dataLen -= count;
   b648c:	1bbf      	subs	r7, r7, r6
        data += count;
   b648e:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6490:	e7dd      	b.n	b644e <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6492:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6496:	f1ba 0f00 	cmp.w	sl, #0
   b649a:	d002      	beq.n	b64a2 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b649c:	6868      	ldr	r0, [r5, #4]
   b649e:	f005 fd98 	bl	bbfd2 <_ZN7TwoWire6unlockEv>
}
   b64a2:	4640      	mov	r0, r8
   b64a4:	b002      	add	sp, #8
   b64a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b64aa:	2301      	movs	r3, #1
   b64ac:	2204      	movs	r2, #4
   b64ae:	213f      	movs	r1, #63	; 0x3f
   b64b0:	4628      	mov	r0, r5
   b64b2:	f7ff fe73 	bl	b619c <_ZN6AB180514setRegisterBitEhhb>
   b64b6:	e7dc      	b.n	b6472 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b64b8 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b64b8:	b530      	push	{r4, r5, lr}
   b64ba:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b64bc:	680d      	ldr	r5, [r1, #0]
   b64be:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b64c2:	9503      	str	r5, [sp, #12]
   b64c4:	684d      	ldr	r5, [r1, #4]
   b64c6:	9502      	str	r5, [sp, #8]
   b64c8:	688d      	ldr	r5, [r1, #8]
   b64ca:	9501      	str	r5, [sp, #4]
   b64cc:	68c9      	ldr	r1, [r1, #12]
   b64ce:	9100      	str	r1, [sp, #0]
   b64d0:	3301      	adds	r3, #1
   b64d2:	4904      	ldr	r1, [pc, #16]	; (b64e4 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b64d4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b64d8:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b64da:	f007 fc47 	bl	bdd6c <_ZN6String6formatEPKcz>
}
   b64de:	4620      	mov	r0, r4
   b64e0:	b005      	add	sp, #20
   b64e2:	bd30      	pop	{r4, r5, pc}
   b64e4:	000c0418 	.word	0x000c0418

000b64e8 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b64e8:	0903      	lsrs	r3, r0, #4
}
   b64ea:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b64ec:	f000 000f 	and.w	r0, r0, #15
}
   b64f0:	fb02 0003 	mla	r0, r2, r3, r0
   b64f4:	4770      	bx	lr

000b64f6 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b64f6:	b538      	push	{r3, r4, r5, lr}
   b64f8:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b64fa:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b64fc:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b64fe:	f7ff fff3 	bl	b64e8 <_ZN6AB180510bcdToValueEh>
   b6502:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6504:	7860      	ldrb	r0, [r4, #1]
   b6506:	f7ff ffef 	bl	b64e8 <_ZN6AB180510bcdToValueEh>
   b650a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b650c:	78a0      	ldrb	r0, [r4, #2]
   b650e:	f7ff ffeb 	bl	b64e8 <_ZN6AB180510bcdToValueEh>
   b6512:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6514:	78e0      	ldrb	r0, [r4, #3]
   b6516:	f7ff ffe7 	bl	b64e8 <_ZN6AB180510bcdToValueEh>
   b651a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b651c:	7920      	ldrb	r0, [r4, #4]
   b651e:	f7ff ffe3 	bl	b64e8 <_ZN6AB180510bcdToValueEh>
   b6522:	3801      	subs	r0, #1
   b6524:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6526:	b92d      	cbnz	r5, b6534 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6528:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b652a:	7828      	ldrb	r0, [r5, #0]
   b652c:	f7ff ffdc 	bl	b64e8 <_ZN6AB180510bcdToValueEh>
   b6530:	6188      	str	r0, [r1, #24]
}
   b6532:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6534:	7960      	ldrb	r0, [r4, #5]
   b6536:	f7ff ffd7 	bl	b64e8 <_ZN6AB180510bcdToValueEh>
   b653a:	3064      	adds	r0, #100	; 0x64
   b653c:	1da5      	adds	r5, r4, #6
   b653e:	6148      	str	r0, [r1, #20]
   b6540:	e7f3      	b.n	b652a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6544 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6544:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6546:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6548:	b088      	sub	sp, #32
   b654a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b654c:	461a      	mov	r2, r3
   b654e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6550:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6552:	f7ff fda4 	bl	b609e <_ZN6AB180510isBitClearEhhb>
   b6556:	b1f0      	cbz	r0, b6596 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6558:	2308      	movs	r3, #8
   b655a:	2601      	movs	r6, #1
   b655c:	4620      	mov	r0, r4
   b655e:	9600      	str	r6, [sp, #0]
   b6560:	eb0d 0203 	add.w	r2, sp, r3
   b6564:	2100      	movs	r1, #0
   b6566:	f7ff fc2f 	bl	b5dc8 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b656a:	4604      	mov	r4, r0
   b656c:	b198      	cbz	r0, b6596 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b656e:	4632      	mov	r2, r6
   b6570:	4629      	mov	r1, r5
   b6572:	f10d 0009 	add.w	r0, sp, #9
   b6576:	f7ff ffbe 	bl	b64f6 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b657a:	a804      	add	r0, sp, #16
   b657c:	f7ff ff9c 	bl	b64b8 <_ZN6AB180510tmToStringEPK2tm>
   b6580:	4808      	ldr	r0, [pc, #32]	; (b65a4 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b6582:	9a04      	ldr	r2, [sp, #16]
   b6584:	4908      	ldr	r1, [pc, #32]	; (b65a8 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b6586:	f7fd fda1 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b658a:	a804      	add	r0, sp, #16
   b658c:	f007 faa2 	bl	bdad4 <_ZN6StringD1Ev>
}
   b6590:	4620      	mov	r0, r4
   b6592:	b008      	add	sp, #32
   b6594:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b6596:	2224      	movs	r2, #36	; 0x24
   b6598:	2100      	movs	r1, #0
   b659a:	4628      	mov	r0, r5
   b659c:	f008 fe7c 	bl	bf298 <memset>
   b65a0:	2400      	movs	r4, #0
   b65a2:	e7f5      	b.n	b6590 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b65a4:	2003e438 	.word	0x2003e438
   b65a8:	000c0436 	.word	0x000c0436

000b65ac <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b65ac:	b530      	push	{r4, r5, lr}
   b65ae:	b08b      	sub	sp, #44	; 0x2c
   b65b0:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b65b2:	a901      	add	r1, sp, #4
   b65b4:	f7ff ffc6 	bl	b6544 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b65b8:	4604      	mov	r4, r0
   b65ba:	b120      	cbz	r0, b65c6 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b65bc:	a801      	add	r0, sp, #4
   b65be:	f004 ff17 	bl	bb3f0 <mktime>
   b65c2:	e9c5 0100 	strd	r0, r1, [r5]
}
   b65c6:	4620      	mov	r0, r4
   b65c8:	b00b      	add	sp, #44	; 0x2c
   b65ca:	bd30      	pop	{r4, r5, pc}

000b65cc <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b65cc:	230a      	movs	r3, #10
   b65ce:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b65d2:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b65d6:	fb91 f2f3 	sdiv	r2, r1, r3
   b65da:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b65de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b65e2:	b2c0      	uxtb	r0, r0
   b65e4:	4770      	bx	lr

000b65e6 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b65e6:	b570      	push	{r4, r5, r6, lr}
   b65e8:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b65ea:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b65ec:	460c      	mov	r4, r1
   b65ee:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b65f0:	f7ff ffec 	bl	b65cc <_ZN6AB180510valueToBcdEi>
   b65f4:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b65f6:	6868      	ldr	r0, [r5, #4]
   b65f8:	f7ff ffe8 	bl	b65cc <_ZN6AB180510valueToBcdEi>
   b65fc:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b65fe:	68a8      	ldr	r0, [r5, #8]
   b6600:	f7ff ffe4 	bl	b65cc <_ZN6AB180510valueToBcdEi>
   b6604:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6606:	68e8      	ldr	r0, [r5, #12]
   b6608:	f7ff ffe0 	bl	b65cc <_ZN6AB180510valueToBcdEi>
   b660c:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b660e:	6928      	ldr	r0, [r5, #16]
   b6610:	3001      	adds	r0, #1
   b6612:	f7ff ffdb 	bl	b65cc <_ZN6AB180510valueToBcdEi>
   b6616:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6618:	b92e      	cbnz	r6, b6626 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b661a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b661c:	69a8      	ldr	r0, [r5, #24]
   b661e:	f7ff ffd5 	bl	b65cc <_ZN6AB180510valueToBcdEi>
   b6622:	7030      	strb	r0, [r6, #0]
}
   b6624:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6626:	696a      	ldr	r2, [r5, #20]
   b6628:	2364      	movs	r3, #100	; 0x64
   b662a:	fb92 f0f3 	sdiv	r0, r2, r3
   b662e:	fb03 2010 	mls	r0, r3, r0, r2
   b6632:	f7ff ffcb 	bl	b65cc <_ZN6AB180510valueToBcdEi>
   b6636:	1da6      	adds	r6, r4, #6
   b6638:	7160      	strb	r0, [r4, #5]
   b663a:	e7ef      	b.n	b661c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b663c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b663c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b663e:	b087      	sub	sp, #28
   b6640:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6642:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6644:	4616      	mov	r6, r2
   b6646:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6648:	f7ff ff36 	bl	b64b8 <_ZN6AB180510tmToStringEPK2tm>
   b664c:	481e      	ldr	r0, [pc, #120]	; (b66c8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b664e:	9a02      	ldr	r2, [sp, #8]
   b6650:	491e      	ldr	r1, [pc, #120]	; (b66cc <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b6652:	f7fd fd3b 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b6656:	a802      	add	r0, sp, #8
   b6658:	f007 fa3c 	bl	bdad4 <_ZN6StringD1Ev>
    if (lock) {
   b665c:	b116      	cbz	r6, b6664 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b665e:	6868      	ldr	r0, [r5, #4]
   b6660:	f005 fcae 	bl	bbfc0 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b6664:	4620      	mov	r0, r4
   b6666:	2201      	movs	r2, #1
   b6668:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b666c:	2700      	movs	r7, #0
   b666e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b6672:	f7ff ffb8 	bl	b65e6 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6676:	2301      	movs	r3, #1
   b6678:	461a      	mov	r2, r3
   b667a:	2110      	movs	r1, #16
   b667c:	4628      	mov	r0, r5
   b667e:	f7ff fd8d 	bl	b619c <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b6682:	4604      	mov	r4, r0
   b6684:	b1e8      	cbz	r0, b66c2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b6686:	2308      	movs	r3, #8
   b6688:	9700      	str	r7, [sp, #0]
   b668a:	eb0d 0203 	add.w	r2, sp, r3
   b668e:	4639      	mov	r1, r7
   b6690:	4628      	mov	r0, r5
   b6692:	f7ff fc3b 	bl	b5f0c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b6696:	4604      	mov	r4, r0
   b6698:	b160      	cbz	r0, b66b4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b669a:	2301      	movs	r3, #1
   b669c:	461a      	mov	r2, r3
   b669e:	2110      	movs	r1, #16
   b66a0:	4628      	mov	r0, r5
   b66a2:	f7ff fd1a 	bl	b60da <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b66a6:	b116      	cbz	r6, b66ae <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b66a8:	6868      	ldr	r0, [r5, #4]
   b66aa:	f005 fc92 	bl	bbfd2 <_ZN7TwoWire6unlockEv>
}
   b66ae:	4620      	mov	r0, r4
   b66b0:	b007      	add	sp, #28
   b66b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b66b4:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b66b8:	4905      	ldr	r1, [pc, #20]	; (b66d0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b66ba:	4803      	ldr	r0, [pc, #12]	; (b66c8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b66bc:	f7ff fb54 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
   b66c0:	e7f1      	b.n	b66a6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b66c2:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b66c6:	e7f7      	b.n	b66b8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b66c8:	2003e438 	.word	0x2003e438
   b66cc:	000c0444 	.word	0x000c0444
   b66d0:	000c0452 	.word	0x000c0452

000b66d4 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b66d4:	b513      	push	{r0, r1, r4, lr}
   b66d6:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b66d8:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b66da:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b66de:	f008 fd8d 	bl	bf1fc <gmtime>
    return setRtcFromTm(tm, lock);
   b66e2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b66e6:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b66e8:	4620      	mov	r0, r4
   b66ea:	f7ff ffa7 	bl	b663c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b66ee:	b002      	add	sp, #8
   b66f0:	bd10      	pop	{r4, pc}
	...

000b66f4 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b66f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b66f6:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b66f8:	b089      	sub	sp, #36	; 0x24
   b66fa:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b66fc:	bb75      	cbnz	r5, b675c <_ZN6AB18054loopEv+0x68>
   b66fe:	f007 fd6b 	bl	be1d8 <_ZN9TimeClass7isValidEv>
   b6702:	b358      	cbz	r0, b675c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b6704:	2600      	movs	r6, #0
   b6706:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6708:	a904      	add	r1, sp, #16
   b670a:	4628      	mov	r0, r5
        tm = 0;
   b670c:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6710:	f004 fd76 	bl	bb200 <spark_sync_time_last>
   b6714:	b310      	cbz	r0, b675c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6716:	2501      	movs	r5, #1
   b6718:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b671a:	f007 fd7a 	bl	be212 <_ZN9TimeClass3nowEv>
   b671e:	17c3      	asrs	r3, r0, #31
   b6720:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6724:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6726:	9500      	str	r5, [sp, #0]
   b6728:	4620      	mov	r0, r4
   b672a:	f7ff ffd3 	bl	b66d4 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b672e:	a902      	add	r1, sp, #8
   b6730:	4620      	mov	r0, r4
        time = 0;
   b6732:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6736:	f7ff ff39 	bl	b65ac <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b673a:	4b13      	ldr	r3, [pc, #76]	; (b6788 <_ZN6AB18054loopEv+0x94>)
   b673c:	4913      	ldr	r1, [pc, #76]	; (b678c <_ZN6AB18054loopEv+0x98>)
   b673e:	681b      	ldr	r3, [r3, #0]
   b6740:	9300      	str	r3, [sp, #0]
   b6742:	a804      	add	r0, sp, #16
   b6744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6748:	f007 fd04 	bl	be154 <_ZN9TimeClass6formatExPKc>
   b674c:	4810      	ldr	r0, [pc, #64]	; (b6790 <_ZN6AB18054loopEv+0x9c>)
   b674e:	9a04      	ldr	r2, [sp, #16]
   b6750:	4910      	ldr	r1, [pc, #64]	; (b6794 <_ZN6AB18054loopEv+0xa0>)
   b6752:	f7fd fcbb 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b6756:	a804      	add	r0, sp, #16
   b6758:	f007 f9bc 	bl	bdad4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b675c:	6963      	ldr	r3, [r4, #20]
   b675e:	b18b      	cbz	r3, b6784 <_ZN6AB18054loopEv+0x90>
   b6760:	f004 fa40 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6764:	6923      	ldr	r3, [r4, #16]
   b6766:	1ac0      	subs	r0, r0, r3
   b6768:	6963      	ldr	r3, [r4, #20]
   b676a:	4298      	cmp	r0, r3
   b676c:	d30a      	bcc.n	b6784 <_ZN6AB18054loopEv+0x90>
   b676e:	f004 fa39 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b6772:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b6776:	6120      	str	r0, [r4, #16]
            setWDT();
   b6778:	4620      	mov	r0, r4
}
   b677a:	b009      	add	sp, #36	; 0x24
   b677c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6780:	f7ff bc0c 	b.w	b5f9c <_ZN6AB18056setWDTEi>
}
   b6784:	b009      	add	sp, #36	; 0x24
   b6786:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6788:	2003de2c 	.word	0x2003de2c
   b678c:	2003e6ac 	.word	0x2003e6ac
   b6790:	2003e438 	.word	0x2003e438
   b6794:	000c046d 	.word	0x000c046d

000b6798 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6798:	b530      	push	{r4, r5, lr}
   b679a:	4604      	mov	r4, r0
   b679c:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b679e:	b111      	cbz	r1, b67a6 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b67a0:	6840      	ldr	r0, [r0, #4]
   b67a2:	f005 fbbb 	bl	bbf1c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b67a6:	4620      	mov	r0, r4
   b67a8:	f7ff fb64 	bl	b5e74 <_ZN6AB180510detectChipEv>
   b67ac:	ad06      	add	r5, sp, #24
   b67ae:	2800      	cmp	r0, #0
   b67b0:	d037      	beq.n	b6822 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b67b2:	4620      	mov	r0, r4
   b67b4:	f7ff fc9c 	bl	b60f0 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b67b8:	2301      	movs	r3, #1
   b67ba:	461a      	mov	r2, r3
   b67bc:	2110      	movs	r1, #16
   b67be:	4620      	mov	r0, r4
   b67c0:	f7ff fc6d 	bl	b609e <_ZN6AB180510isBitClearEhhb>
   b67c4:	b1d8      	cbz	r0, b67fe <_ZN6AB18055setupEb+0x66>
   b67c6:	f007 fd07 	bl	be1d8 <_ZN9TimeClass7isValidEv>
   b67ca:	b9c0      	cbnz	r0, b67fe <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b67cc:	a902      	add	r1, sp, #8
   b67ce:	4620      	mov	r0, r4
   b67d0:	f7ff feec 	bl	b65ac <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b67d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b67d8:	f007 fc02 	bl	bdfe0 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b67dc:	4b13      	ldr	r3, [pc, #76]	; (b682c <_ZN6AB18055setupEb+0x94>)
   b67de:	4914      	ldr	r1, [pc, #80]	; (b6830 <_ZN6AB18055setupEb+0x98>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	9300      	str	r3, [sp, #0]
   b67e4:	4628      	mov	r0, r5
   b67e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b67ea:	f007 fcb3 	bl	be154 <_ZN9TimeClass6formatExPKc>
   b67ee:	4811      	ldr	r0, [pc, #68]	; (b6834 <_ZN6AB18055setupEb+0x9c>)
   b67f0:	9a06      	ldr	r2, [sp, #24]
   b67f2:	4911      	ldr	r1, [pc, #68]	; (b6838 <_ZN6AB18055setupEb+0xa0>)
   b67f4:	f7fd fc6a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b67f8:	4628      	mov	r0, r5
   b67fa:	f007 f96b 	bl	bdad4 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b67fe:	4b0f      	ldr	r3, [pc, #60]	; (b683c <_ZN6AB18055setupEb+0xa4>)
   b6800:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b6802:	4b0f      	ldr	r3, [pc, #60]	; (b6840 <_ZN6AB18055setupEb+0xa8>)
   b6804:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6806:	4b0f      	ldr	r3, [pc, #60]	; (b6844 <_ZN6AB18055setupEb+0xac>)
   b6808:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b680a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b680e:	2300      	movs	r3, #0
   b6810:	a802      	add	r0, sp, #8
   b6812:	9500      	str	r5, [sp, #0]
   b6814:	f7fe f824 	bl	b4860 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6818:	4628      	mov	r0, r5
   b681a:	f7fd ff6d 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
}
   b681e:	b00b      	add	sp, #44	; 0x2c
   b6820:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b6822:	4909      	ldr	r1, [pc, #36]	; (b6848 <_ZN6AB18055setupEb+0xb0>)
   b6824:	4803      	ldr	r0, [pc, #12]	; (b6834 <_ZN6AB18055setupEb+0x9c>)
   b6826:	f7ff fa9f 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
   b682a:	e7e8      	b.n	b67fe <_ZN6AB18055setupEb+0x66>
   b682c:	2003de2c 	.word	0x2003de2c
   b6830:	2003e6ac 	.word	0x2003e6ac
   b6834:	2003e438 	.word	0x2003e438
   b6838:	000c0483 	.word	0x000c0483
   b683c:	000b6021 	.word	0x000b6021
   b6840:	000b46ef 	.word	0x000b46ef
   b6844:	000b46db 	.word	0x000b46db
   b6848:	000c04a0 	.word	0x000c04a0

000b684c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b684c:	4b01      	ldr	r3, [pc, #4]	; (b6854 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b684e:	4a02      	ldr	r2, [pc, #8]	; (b6858 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6850:	601a      	str	r2, [r3, #0]
}
   b6852:	4770      	bx	lr
   b6854:	2003e438 	.word	0x2003e438
   b6858:	000c04b8 	.word	0x000c04b8

000b685c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b685c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b685e:	2301      	movs	r3, #1
   b6860:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b6862:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6864:	4604      	mov	r4, r0
        if (th->func) {
   b6866:	b143      	cbz	r3, b687a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6868:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b686a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b686c:	2301      	movs	r3, #1
   b686e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b6870:	2000      	movs	r0, #0
    }
   b6872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b6876:	f004 b985 	b.w	bab84 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b687a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b687c:	2800      	cmp	r0, #0
   b687e:	d0f5      	beq.n	b686c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b6880:	6883      	ldr	r3, [r0, #8]
   b6882:	b90b      	cbnz	r3, b6888 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b6884:	f007 ffd6 	bl	be834 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6888:	68c3      	ldr	r3, [r0, #12]
   b688a:	e7ee      	b.n	b686a <_ZN6Thread3runEPv+0xe>

000b688c <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b688c:	2a01      	cmp	r2, #1
   b688e:	d102      	bne.n	b6896 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6890:	6001      	str	r1, [r0, #0]
      }
   b6892:	2000      	movs	r0, #0
   b6894:	4770      	bx	lr
	  switch (__op)
   b6896:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6898:	bf04      	itt	eq
   b689a:	680b      	ldreq	r3, [r1, #0]
   b689c:	6003      	streq	r3, [r0, #0]
	      break;
   b689e:	e7f8      	b.n	b6892 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b68a0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b68a0:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b68a2:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b68a4:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b68a6:	b135      	cbz	r5, b68b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b68a8:	4628      	mov	r0, r5
   b68aa:	f7fd ff25 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b68ae:	2110      	movs	r1, #16
   b68b0:	4628      	mov	r0, r5
   b68b2:	f7fd fbf4 	bl	b409e <_ZdlPvj>
   b68b6:	4620      	mov	r0, r4
   b68b8:	2114      	movs	r1, #20
      }
   b68ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b68be:	f7fd bbee 	b.w	b409e <_ZdlPvj>

000b68c2 <_ZN6Thread7disposeEv>:
    void dispose()
   b68c2:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b68c4:	6803      	ldr	r3, [r0, #0]
   b68c6:	4604      	mov	r4, r0
        if (!isValid())
   b68c8:	b1ab      	cbz	r3, b68f6 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b68ca:	6858      	ldr	r0, [r3, #4]
   b68cc:	f004 f90a 	bl	baae4 <os_thread_is_current>
   b68d0:	b988      	cbnz	r0, b68f6 <_ZN6Thread7disposeEv+0x34>
   b68d2:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b68d4:	7c5a      	ldrb	r2, [r3, #17]
   b68d6:	b912      	cbnz	r2, b68de <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b68d8:	6858      	ldr	r0, [r3, #4]
   b68da:	f004 f90b 	bl	baaf4 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b68de:	6823      	ldr	r3, [r4, #0]
   b68e0:	6858      	ldr	r0, [r3, #4]
   b68e2:	f004 f90f 	bl	bab04 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b68e6:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b68e8:	2300      	movs	r3, #0
   b68ea:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b68ec:	b118      	cbz	r0, b68f6 <_ZN6Thread7disposeEv+0x34>
    }
   b68ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b68f2:	f7ff bfd5 	b.w	b68a0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b68f6:	bd10      	pop	{r4, pc}

000b68f8 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b68f8:	4a05      	ldr	r2, [pc, #20]	; (b6910 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b68fa:	6002      	str	r2, [r0, #0]
   b68fc:	2200      	movs	r2, #0
   b68fe:	6042      	str	r2, [r0, #4]
   b6900:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b6902:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b6906:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b690a:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b690e:	4770      	bx	lr
   b6910:	000c04f8 	.word	0x000c04f8

000b6914 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b6914:	b510      	push	{r4, lr}
    if (!_instance) {
   b6916:	4c07      	ldr	r4, [pc, #28]	; (b6934 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b6918:	6823      	ldr	r3, [r4, #0]
   b691a:	b943      	cbnz	r3, b692e <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b691c:	f240 4064 	movw	r0, #1124	; 0x464
   b6920:	f7fd fbb9 	bl	b4096 <_Znwj>
   b6924:	4603      	mov	r3, r0
   b6926:	b108      	cbz	r0, b692c <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b6928:	f7ff ffe6 	bl	b68f8 <_ZN19BackgroundPublishRKC1Ev>
   b692c:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b692e:	6820      	ldr	r0, [r4, #0]
   b6930:	bd10      	pop	{r4, pc}
   b6932:	bf00      	nop
   b6934:	2003e440 	.word	0x2003e440

000b6938 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b6938:	b538      	push	{r3, r4, r5, lr}
   b693a:	4604      	mov	r4, r0
    if(thread)
   b693c:	6840      	ldr	r0, [r0, #4]
   b693e:	b190      	cbz	r0, b6966 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b6940:	2302      	movs	r3, #2
   b6942:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b6944:	f7ff ffbd 	bl	b68c2 <_ZN6Thread7disposeEv>
        delete thread;
   b6948:	6865      	ldr	r5, [r4, #4]
   b694a:	b155      	cbz	r5, b6962 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b694c:	4628      	mov	r0, r5
   b694e:	f7ff ffb8 	bl	b68c2 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b6952:	6828      	ldr	r0, [r5, #0]
   b6954:	b108      	cbz	r0, b695a <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b6956:	f7ff ffa3 	bl	b68a0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b695a:	2104      	movs	r1, #4
   b695c:	4628      	mov	r0, r5
   b695e:	f7fd fb9e 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b6962:	2300      	movs	r3, #0
   b6964:	6063      	str	r3, [r4, #4]
    }
}
   b6966:	bd38      	pop	{r3, r4, r5, pc}

000b6968 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6968:	b510      	push	{r4, lr}
   b696a:	4b05      	ldr	r3, [pc, #20]	; (b6980 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b696c:	6003      	str	r3, [r0, #0]
   b696e:	4604      	mov	r4, r0
    stop();
   b6970:	f7ff ffe2 	bl	b6938 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b6974:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b6978:	f7fd febe 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
}
   b697c:	4620      	mov	r0, r4
   b697e:	bd10      	pop	{r4, pc}
   b6980:	000c04f8 	.word	0x000c04f8

000b6984 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b6984:	b510      	push	{r4, lr}
   b6986:	4604      	mov	r4, r0
}
   b6988:	f7ff ffee 	bl	b6968 <_ZN19BackgroundPublishRKD1Ev>
   b698c:	4620      	mov	r0, r4
   b698e:	f240 4164 	movw	r1, #1124	; 0x464
   b6992:	f7fd fb84 	bl	b409e <_ZdlPvj>
   b6996:	4620      	mov	r0, r4
   b6998:	bd10      	pop	{r4, pc}

000b699a <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b699a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b699c:	4604      	mov	r4, r0
   b699e:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b69a0:	f100 060d 	add.w	r6, r0, #13
   b69a4:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b69a8:	7b23      	ldrb	r3, [r4, #12]
   b69aa:	b91b      	cbnz	r3, b69b4 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b69ac:	2001      	movs	r0, #1
   b69ae:	f004 fd27 	bl	bb400 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b69b2:	e7f9      	b.n	b69a8 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b69b4:	7b23      	ldrb	r3, [r4, #12]
   b69b6:	2b02      	cmp	r3, #2
   b69b8:	d064      	beq.n	b6a84 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b69ba:	68a0      	ldr	r0, [r4, #8]
   b69bc:	f004 f8b2 	bl	bab24 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b69c0:	68a0      	ldr	r0, [r4, #8]
   b69c2:	f004 f8b7 	bl	bab34 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b69c6:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b69ca:	f88d 3000 	strb.w	r3, [sp]
   b69ce:	463a      	mov	r2, r7
   b69d0:	233c      	movs	r3, #60	; 0x3c
   b69d2:	4631      	mov	r1, r6
   b69d4:	a806      	add	r0, sp, #24
   b69d6:	f004 ffe1 	bl	bb99c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b69da:	9d06      	ldr	r5, [sp, #24]
   b69dc:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b69de:	b933      	cbnz	r3, b69ee <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b69e0:	7b23      	ldrb	r3, [r4, #12]
   b69e2:	2b02      	cmp	r3, #2
   b69e4:	d003      	beq.n	b69ee <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b69e6:	2001      	movs	r0, #1
   b69e8:	f004 fd0a 	bl	bb400 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b69ec:	e7f5      	b.n	b69da <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b69ee:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b69f2:	b31b      	cbz	r3, b6a3c <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b69f4:	2000      	movs	r0, #0
   b69f6:	f004 fb6f 	bl	bb0d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b69fa:	b120      	cbz	r0, b6a06 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b69fc:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b69fe:	b913      	cbnz	r3, b6a06 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b6a00:	f004 fbd6 	bl	bb1b0 <spark_process>
    }
   b6a04:	e7fa      	b.n	b69fc <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6a06:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b6a08:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b6a0c:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b6a0e:	1e59      	subs	r1, r3, #1
   b6a10:	424b      	negs	r3, r1
   b6a12:	414b      	adcs	r3, r1
   b6a14:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b6a18:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b6a1c:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b6a20:	b90b      	cbnz	r3, b6a26 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b6a22:	f007 ff07 	bl	be834 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a26:	ab05      	add	r3, sp, #20
   b6a28:	9300      	str	r3, [sp, #0]
   b6a2a:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b6a2e:	ab04      	add	r3, sp, #16
   b6a30:	aa03      	add	r2, sp, #12
   b6a32:	f10d 010b 	add.w	r1, sp, #11
   b6a36:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b6a3a:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b6a3c:	68a0      	ldr	r0, [r4, #8]
   b6a3e:	f004 f871 	bl	bab24 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b6a42:	7b23      	ldrb	r3, [r4, #12]
   b6a44:	2b02      	cmp	r3, #2
   b6a46:	d017      	beq.n	b6a78 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b6a48:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b6a4c:	2500      	movs	r5, #0
   b6a4e:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b6a52:	b143      	cbz	r3, b6a66 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b6a54:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b6a58:	2203      	movs	r2, #3
   b6a5a:	4608      	mov	r0, r1
   b6a5c:	4798      	blx	r3
	    _M_manager = nullptr;
   b6a5e:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b6a62:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b6a66:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b6a68:	68a0      	ldr	r0, [r4, #8]
   b6a6a:	7323      	strb	r3, [r4, #12]
   b6a6c:	f004 f862 	bl	bab34 <os_mutex_unlock>
      ~__shared_ptr() = default;
   b6a70:	a807      	add	r0, sp, #28
   b6a72:	f7fe fcb7 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a76:	e797      	b.n	b69a8 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b6a78:	68a0      	ldr	r0, [r4, #8]
   b6a7a:	f004 f85b 	bl	bab34 <os_mutex_unlock>
   b6a7e:	a807      	add	r0, sp, #28
   b6a80:	f7fe fcb0 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b6a84:	b009      	add	sp, #36	; 0x24
   b6a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a88 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b6a88:	6800      	ldr	r0, [r0, #0]
   b6a8a:	f7ff bf86 	b.w	b699a <_ZN19BackgroundPublishRK8thread_fEv>

000b6a8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6a8e:	b513      	push	{r0, r1, r4, lr}
   b6a90:	460b      	mov	r3, r1
   b6a92:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a94:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6a98:	466c      	mov	r4, sp
   b6a9a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6aa2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6aaa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6aae:	b002      	add	sp, #8
   b6ab0:	bd10      	pop	{r4, pc}
	...

000b6ab4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b6ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6ab8:	4606      	mov	r6, r0
   b6aba:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b6abc:	2014      	movs	r0, #20
   b6abe:	4926      	ldr	r1, [pc, #152]	; (b6b58 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b6ac0:	4617      	mov	r7, r2
   b6ac2:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b6ac4:	f007 feac 	bl	be820 <_ZnwjRKSt9nothrow_t>
   b6ac8:	4604      	mov	r4, r0
   b6aca:	b130      	cbz	r0, b6ada <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b6acc:	2000      	movs	r0, #0
            exited(false) {
   b6ace:	e9c4 0000 	strd	r0, r0, [r4]
   b6ad2:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b6ad6:	7420      	strb	r0, [r4, #16]
   b6ad8:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6ada:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b6adc:	2c00      	cmp	r4, #0
   b6ade:	d031      	beq.n	b6b44 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b6ae0:	491d      	ldr	r1, [pc, #116]	; (b6b58 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b6ae2:	2010      	movs	r0, #16
   b6ae4:	f007 fe9c 	bl	be820 <_ZnwjRKSt9nothrow_t>
   b6ae8:	4605      	mov	r5, r0
   b6aea:	b168      	cbz	r0, b6b08 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b6aec:	2300      	movs	r3, #0
   b6aee:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6af0:	4601      	mov	r1, r0
   b6af2:	4638      	mov	r0, r7
   b6af4:	f7ff ffcb 	bl	b6a8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6af8:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6afa:	68aa      	ldr	r2, [r5, #8]
   b6afc:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6afe:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6b00:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b02:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b04:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6b06:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b6b08:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b6b0a:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b6b0c:	b137      	cbz	r7, b6b1c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b6b0e:	4638      	mov	r0, r7
   b6b10:	f7fd fdf2 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b6b14:	2110      	movs	r1, #16
   b6b16:	4638      	mov	r0, r7
   b6b18:	f7fd fac1 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6b1c:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b6b1e:	6803      	ldr	r3, [r0, #0]
   b6b20:	b183      	cbz	r3, b6b44 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b6b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6b24:	464a      	mov	r2, r9
   b6b26:	e9cd 0300 	strd	r0, r3, [sp]
   b6b2a:	4641      	mov	r1, r8
   b6b2c:	4b0b      	ldr	r3, [pc, #44]	; (b6b5c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b6b2e:	3004      	adds	r0, #4
   b6b30:	f003 ffd0 	bl	baad4 <os_thread_create>
   b6b34:	b930      	cbnz	r0, b6b44 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b6b36:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b6b38:	7c1b      	ldrb	r3, [r3, #16]
   b6b3a:	b94b      	cbnz	r3, b6b50 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b6b3c:	2001      	movs	r0, #1
   b6b3e:	f004 f841 	bl	babc4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b6b42:	e7f8      	b.n	b6b36 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b6b44:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b6b46:	2300      	movs	r3, #0
   b6b48:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b6b4a:	b108      	cbz	r0, b6b50 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b6b4c:	f7ff fea8 	bl	b68a0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b6b50:	4630      	mov	r0, r6
   b6b52:	b003      	add	sp, #12
   b6b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6b58:	000c0eec 	.word	0x000c0eec
   b6b5c:	000b685d 	.word	0x000b685d

000b6b60 <_ZN19BackgroundPublishRK5startEv>:
{
   b6b60:	b530      	push	{r4, r5, lr}
    if(!thread)
   b6b62:	6843      	ldr	r3, [r0, #4]
{
   b6b64:	b087      	sub	sp, #28
   b6b66:	4604      	mov	r4, r0
    if(!thread)
   b6b68:	b9c3      	cbnz	r3, b6b9c <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b6b6a:	3008      	adds	r0, #8
   b6b6c:	f003 ffd2 	bl	bab14 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b6b70:	4b0b      	ldr	r3, [pc, #44]	; (b6ba0 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b6b72:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b6b74:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b6b76:	4b0b      	ldr	r3, [pc, #44]	; (b6ba4 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6b78:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b6b7a:	9304      	str	r3, [sp, #16]
   b6b7c:	f7fd fa8b 	bl	b4096 <_Znwj>
   b6b80:	4605      	mov	r5, r0
   b6b82:	b138      	cbz	r0, b6b94 <_ZN19BackgroundPublishRK5startEv+0x34>
   b6b84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b6b88:	9300      	str	r3, [sp, #0]
   b6b8a:	4907      	ldr	r1, [pc, #28]	; (b6ba8 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b6b8c:	2302      	movs	r3, #2
   b6b8e:	aa02      	add	r2, sp, #8
   b6b90:	f7ff ff90 	bl	b6ab4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b6b94:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b6b96:	a802      	add	r0, sp, #8
   b6b98:	f7fd fdae 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
}
   b6b9c:	b007      	add	sp, #28
   b6b9e:	bd30      	pop	{r4, r5, pc}
   b6ba0:	000b6a89 	.word	0x000b6a89
   b6ba4:	000b688d 	.word	0x000b688d
   b6ba8:	000c04dc 	.word	0x000c04dc

000b6bac <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b6bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6bb0:	4604      	mov	r4, r0
   b6bb2:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b6bb4:	6880      	ldr	r0, [r0, #8]
   b6bb6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b6bb8:	4698      	mov	r8, r3
   b6bba:	460d      	mov	r5, r1
   b6bbc:	4616      	mov	r6, r2
   b6bbe:	f003 ffb1 	bl	bab24 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b6bc2:	6863      	ldr	r3, [r4, #4]
   b6bc4:	b11b      	cbz	r3, b6bce <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b6bc6:	7b23      	ldrb	r3, [r4, #12]
   b6bc8:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b6bcc:	b133      	cbz	r3, b6bdc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b6bce:	68a0      	ldr	r0, [r4, #8]
   b6bd0:	f003 ffb0 	bl	bab34 <os_mutex_unlock>
    {
        return false;
   b6bd4:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b6bd6:	b005      	add	sp, #20
   b6bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6bdc:	68a0      	ldr	r0, [r4, #8]
   b6bde:	f003 ffa9 	bl	bab34 <os_mutex_unlock>
    if(!name)
   b6be2:	2d00      	cmp	r5, #0
   b6be4:	d03d      	beq.n	b6c62 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b6be6:	2240      	movs	r2, #64	; 0x40
   b6be8:	4629      	mov	r1, r5
   b6bea:	f104 000d 	add.w	r0, r4, #13
   b6bee:	f008 fc2a 	bl	bf446 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b6bf2:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b6bf6:	b38e      	cbz	r6, b6c5c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b6bf8:	f240 4201 	movw	r2, #1025	; 0x401
   b6bfc:	4631      	mov	r1, r6
   b6bfe:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b6c02:	f008 fc20 	bl	bf446 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b6c06:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b6c0a:	2300      	movs	r3, #0
   b6c0c:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b6c0e:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b6c10:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b6c14:	b13b      	cbz	r3, b6c26 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6c16:	2202      	movs	r2, #2
   b6c18:	4639      	mov	r1, r7
   b6c1a:	4668      	mov	r0, sp
   b6c1c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6c1e:	68fb      	ldr	r3, [r7, #12]
   b6c20:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b6c22:	68bb      	ldr	r3, [r7, #8]
   b6c24:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b6c26:	4629      	mov	r1, r5
   b6c28:	4668      	mov	r0, sp
   b6c2a:	f7ff ff30 	bl	b6a8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c2e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6c30:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b6c34:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c38:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6c3a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b6c3c:	4668      	mov	r0, sp
   b6c3e:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b6c42:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b6c46:	9203      	str	r2, [sp, #12]
   b6c48:	f7fd fd56 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b6c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6c4e:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b6c52:	2001      	movs	r0, #1
    event_flags = flags;
   b6c54:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b6c58:	7320      	strb	r0, [r4, #12]
    return true;
   b6c5a:	e7bc      	b.n	b6bd6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b6c5c:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b6c60:	e7d3      	b.n	b6c0a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b6c62:	4628      	mov	r0, r5
   b6c64:	e7b7      	b.n	b6bd6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000b6c66 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b6c66:	4770      	bx	lr

000b6c68 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b6c68:	4770      	bx	lr

000b6c6a <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   b6c6a:	2001      	movs	r0, #1
   b6c6c:	4770      	bx	lr

000b6c6e <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b6c6e:	b510      	push	{r4, lr}
}
   b6c70:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b6c72:	4604      	mov	r4, r0
}
   b6c74:	f7fd fa13 	bl	b409e <_ZdlPvj>
   b6c78:	4620      	mov	r0, r4
   b6c7a:	bd10      	pop	{r4, pc}

000b6c7c <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b6c7c:	b510      	push	{r4, lr}
}
   b6c7e:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b6c80:	4604      	mov	r4, r0
}
   b6c82:	f7fd fa0c 	bl	b409e <_ZdlPvj>
   b6c86:	4620      	mov	r0, r4
   b6c88:	bd10      	pop	{r4, pc}
	...

000b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b6c8c:	b510      	push	{r4, lr}
   b6c8e:	4b05      	ldr	r3, [pc, #20]	; (b6ca4 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b6c90:	4604      	mov	r4, r0
   b6c92:	f840 3b1c 	str.w	r3, [r0], #28
   b6c96:	f006 ff1d 	bl	bdad4 <_ZN6StringD1Ev>
   b6c9a:	1d20      	adds	r0, r4, #4
   b6c9c:	f006 ff1a 	bl	bdad4 <_ZN6StringD1Ev>
}
   b6ca0:	4620      	mov	r0, r4
   b6ca2:	bd10      	pop	{r4, pc}
   b6ca4:	000c0588 	.word	0x000c0588

000b6ca8 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b6ca8:	b510      	push	{r4, lr}
   b6caa:	4604      	mov	r4, r0
}
   b6cac:	f7ff ffee 	bl	b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>
   b6cb0:	4620      	mov	r0, r4
   b6cb2:	2158      	movs	r1, #88	; 0x58
   b6cb4:	f7fd f9f3 	bl	b409e <_ZdlPvj>
   b6cb8:	4620      	mov	r0, r4
   b6cba:	bd10      	pop	{r4, pc}

000b6cbc <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b6cbc:	b510      	push	{r4, lr}
   b6cbe:	4b04      	ldr	r3, [pc, #16]	; (b6cd0 <_ZN9LocalTimeD1Ev+0x14>)
   b6cc0:	4604      	mov	r4, r0
   b6cc2:	f840 3b04 	str.w	r3, [r0], #4
   b6cc6:	f7ff ffe1 	bl	b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>
   b6cca:	4620      	mov	r0, r4
   b6ccc:	bd10      	pop	{r4, pc}
   b6cce:	bf00      	nop
   b6cd0:	000c0558 	.word	0x000c0558

000b6cd4 <_ZN9LocalTimeD0Ev>:
   b6cd4:	b510      	push	{r4, lr}
   b6cd6:	4604      	mov	r4, r0
   b6cd8:	f7ff fff0 	bl	b6cbc <_ZN9LocalTimeD1Ev>
   b6cdc:	4620      	mov	r0, r4
   b6cde:	2160      	movs	r1, #96	; 0x60
   b6ce0:	f7fd f9dd 	bl	b409e <_ZdlPvj>
   b6ce4:	4620      	mov	r0, r4
   b6ce6:	bd10      	pop	{r4, pc}

000b6ce8 <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b6ce8:	2a01      	cmp	r2, #1
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6cea:	bf08      	it	eq
   b6cec:	6001      	streq	r1, [r0, #0]
      }
   b6cee:	2000      	movs	r0, #0
   b6cf0:	4770      	bx	lr

000b6cf2 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b6cf2:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6cf4:	b148      	cbz	r0, b6d0a <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b6cf6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b6cfa:	d301      	bcc.n	b6d00 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b6cfc:	f007 fd94 	bl	be828 <_ZSt17__throw_bad_allocv>
      }
   b6d00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6d04:	0080      	lsls	r0, r0, #2
   b6d06:	f7fd b9c6 	b.w	b4096 <_Znwj>
   b6d0a:	bd08      	pop	{r3, pc}

000b6d0c <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   b6d0c:	b110      	cbz	r0, b6d14 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x8>
	::operator delete(__p
   b6d0e:	0089      	lsls	r1, r1, #2
   b6d10:	f7fd b9c5 	b.w	b409e <_ZdlPvj>
      }
   b6d14:	4770      	bx	lr

000b6d16 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b6d16:	f020 0302 	bic.w	r3, r0, #2
   b6d1a:	2b01      	cmp	r3, #1
   b6d1c:	d003      	beq.n	b6d26 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b6d1e:	1f43      	subs	r3, r0, #5
   b6d20:	4258      	negs	r0, r3
   b6d22:	4158      	adcs	r0, r3
   b6d24:	4770      	bx	lr
   b6d26:	4618      	mov	r0, r3
   b6d28:	4770      	bx	lr

000b6d2a <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b6d2a:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b6d2e:	7103      	strb	r3, [r0, #4]
   b6d30:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b6d34:	7143      	strb	r3, [r0, #5]
   b6d36:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b6d3a:	7183      	strb	r3, [r0, #6]
   b6d3c:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b6d40:	71c3      	strb	r3, [r0, #7]
   b6d42:	4770      	bx	lr

000b6d44 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b6d44:	b538      	push	{r3, r4, r5, lr}
   b6d46:	4604      	mov	r4, r0
   b6d48:	460d      	mov	r5, r1
   b6d4a:	3004      	adds	r0, #4
   b6d4c:	3104      	adds	r1, #4
   b6d4e:	f006 ff48 	bl	bdbe2 <_ZN6StringaSERKS_>
   b6d52:	f105 0114 	add.w	r1, r5, #20
   b6d56:	f104 0014 	add.w	r0, r4, #20
   b6d5a:	f7ff ffe6 	bl	b6d2a <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b6d5e:	f105 011c 	add.w	r1, r5, #28
   b6d62:	f104 001c 	add.w	r0, r4, #28
   b6d66:	f006 ff3c 	bl	bdbe2 <_ZN6StringaSERKS_>
   b6d6a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b6d6e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b6d72:	f7ff ffda 	bl	b6d2a <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b6d76:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b6d7a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b6d7e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b6d82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b6d86:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b6d8a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b6d8e:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b6d92:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b6d96:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b6d9a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6d9e:	f7ff ffc4 	bl	b6d2a <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b6da2:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b6da6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b6daa:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b6dae:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b6db2:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b6db6:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b6dba:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b6dbe:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b6dc2:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b6dc6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b6dca:	f7ff ffae 	bl	b6d2a <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b6dce:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b6dd2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b6dd6:	bd38      	pop	{r3, r4, r5, pc}

000b6dd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6dd8:	680b      	ldr	r3, [r1, #0]
   b6dda:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6ddc:	684b      	ldr	r3, [r1, #4]
   b6dde:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6de0:	b113      	cbz	r3, b6de8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b6de2:	685a      	ldr	r2, [r3, #4]
   b6de4:	3201      	adds	r2, #1
   b6de6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6de8:	4770      	bx	lr

000b6dea <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   b6dea:	f990 2004 	ldrsb.w	r2, [r0, #4]
   b6dee:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b6df2:	429a      	cmp	r2, r3
   b6df4:	db13      	blt.n	b6e1e <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   b6df6:	dc10      	bgt.n	b6e1a <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   b6df8:	f990 2005 	ldrsb.w	r2, [r0, #5]
   b6dfc:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b6e00:	429a      	cmp	r2, r3
   b6e02:	db0c      	blt.n	b6e1e <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   b6e04:	dc09      	bgt.n	b6e1a <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
   b6e06:	f990 2006 	ldrsb.w	r2, [r0, #6]
   b6e0a:	f991 3006 	ldrsb.w	r3, [r1, #6]
                if (second < other.second) {
   b6e0e:	429a      	cmp	r2, r3
   b6e10:	db05      	blt.n	b6e1e <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   b6e12:	bfcc      	ite	gt
   b6e14:	2001      	movgt	r0, #1
   b6e16:	2000      	movle	r0, #0
   b6e18:	4770      	bx	lr
            return +1;
   b6e1a:	2001      	movs	r0, #1
   b6e1c:	4770      	bx	lr
            return -1;
   b6e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   b6e22:	4770      	bx	lr

000b6e24 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b6e24:	4a02      	ldr	r2, [pc, #8]	; (b6e30 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b6e26:	6002      	str	r2, [r0, #0]
   b6e28:	684a      	ldr	r2, [r1, #4]
   b6e2a:	6042      	str	r2, [r0, #4]
   b6e2c:	4770      	bx	lr
   b6e2e:	bf00      	nop
   b6e30:	000c0568 	.word	0x000c0568

000b6e34 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   b6e34:	b538      	push	{r3, r4, r5, lr}
   b6e36:	460c      	mov	r4, r1
   b6e38:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   b6e3a:	f100 011c 	add.w	r1, r0, #28
   b6e3e:	4620      	mov	r0, r4
   b6e40:	f7ff ffd3 	bl	b6dea <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   b6e44:	2800      	cmp	r0, #0
   b6e46:	db09      	blt.n	b6e5c <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   b6e48:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b6e4c:	4620      	mov	r0, r4
   b6e4e:	f7ff ffcc 	bl	b6dea <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   b6e52:	2800      	cmp	r0, #0
   b6e54:	bfd4      	ite	le
   b6e56:	2000      	movle	r0, #0
   b6e58:	2001      	movgt	r0, #1
    }
   b6e5a:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   b6e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6e60:	e7fb      	b.n	b6e5a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000b6e62 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b6e62:	694a      	ldr	r2, [r1, #20]
   b6e64:	6803      	ldr	r3, [r0, #0]
   b6e66:	f362 0316 	bfi	r3, r2, #0, #23
   b6e6a:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b6e6c:	690b      	ldr	r3, [r1, #16]
   b6e6e:	1c5a      	adds	r2, r3, #1
   b6e70:	8843      	ldrh	r3, [r0, #2]
   b6e72:	f362 13ca 	bfi	r3, r2, #7, #4
   b6e76:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b6e78:	68ca      	ldr	r2, [r1, #12]
   b6e7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b6e7e:	f362 03c7 	bfi	r3, r2, #3, #5
   b6e82:	70c3      	strb	r3, [r0, #3]
}
   b6e84:	4770      	bx	lr

000b6e86 <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   b6e86:	b510      	push	{r4, lr}
   b6e88:	4604      	mov	r4, r0
   b6e8a:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   b6e8c:	2224      	movs	r2, #36	; 0x24
   b6e8e:	2100      	movs	r1, #0
   b6e90:	a803      	add	r0, sp, #12
   b6e92:	f008 fa01 	bl	bf298 <memset>
    timeInfo.tm_year = ymd.year;
   b6e96:	6823      	ldr	r3, [r4, #0]
   b6e98:	f3c3 0316 	ubfx	r3, r3, #0, #23
   b6e9c:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   b6e9e:	8863      	ldrh	r3, [r4, #2]
   b6ea0:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   b6ea4:	3b01      	subs	r3, #1
   b6ea6:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   b6ea8:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b6eaa:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   b6eac:	08db      	lsrs	r3, r3, #3
   b6eae:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   b6eb0:	f004 fa9e 	bl	bb3f0 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   b6eb4:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   b6eb8:	a903      	add	r1, sp, #12
   b6eba:	4668      	mov	r0, sp
   b6ebc:	f004 fa88 	bl	bb3d0 <localtime_r>
}
   b6ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
   b6ec2:	b00c      	add	sp, #48	; 0x30
   b6ec4:	bd10      	pop	{r4, pc}

000b6ec6 <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   b6ec6:	b530      	push	{r4, r5, lr}
   b6ec8:	4604      	mov	r4, r0
   b6eca:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   b6ecc:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   b6ece:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   b6ed0:	a803      	add	r0, sp, #12
   b6ed2:	2100      	movs	r1, #0
   b6ed4:	f008 f9e0 	bl	bf298 <memset>
    timeInfo.tm_year = ymd.year;
   b6ed8:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   b6eda:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   b6edc:	f3c3 0316 	ubfx	r3, r3, #0, #23
   b6ee0:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   b6ee2:	8863      	ldrh	r3, [r4, #2]
   b6ee4:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   b6ee8:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   b6eea:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   b6eee:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   b6ef0:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   b6ef2:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   b6ef4:	f004 fa7c 	bl	bb3f0 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   b6ef8:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   b6efc:	a903      	add	r1, sp, #12
   b6efe:	4668      	mov	r0, sp
   b6f00:	f004 fa66 	bl	bb3d0 <localtime_r>
    fromTimeInfo(&timeInfo);
   b6f04:	a903      	add	r1, sp, #12
   b6f06:	4620      	mov	r0, r4
   b6f08:	f7ff ffab 	bl	b6e62 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   b6f0c:	b00d      	add	sp, #52	; 0x34
   b6f0e:	bd30      	pop	{r4, r5, pc}

000b6f10 <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   b6f10:	6803      	ldr	r3, [r0, #0]
   b6f12:	f3c1 0216 	ubfx	r2, r1, #0, #23
   b6f16:	f3c3 0316 	ubfx	r3, r3, #0, #23
   b6f1a:	4293      	cmp	r3, r2
   b6f1c:	d313      	bcc.n	b6f46 <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   b6f1e:	d810      	bhi.n	b6f42 <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   b6f20:	8842      	ldrh	r2, [r0, #2]
   b6f22:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   b6f26:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   b6f2a:	429a      	cmp	r2, r3
   b6f2c:	d30b      	bcc.n	b6f46 <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   b6f2e:	d808      	bhi.n	b6f42 <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   b6f30:	78c3      	ldrb	r3, [r0, #3]
   b6f32:	08db      	lsrs	r3, r3, #3
   b6f34:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   b6f38:	d305      	bcc.n	b6f46 <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   b6f3a:	bf8c      	ite	hi
   b6f3c:	2001      	movhi	r0, #1
   b6f3e:	2000      	movls	r0, #0
   b6f40:	4770      	bx	lr
        cmp = +1;
   b6f42:	2001      	movs	r0, #1
   b6f44:	4770      	bx	lr
        cmp = -1;
   b6f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6f4a:	4770      	bx	lr

000b6f4c <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b6f4c:	4a02      	ldr	r2, [pc, #8]	; (b6f58 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b6f4e:	6002      	str	r2, [r0, #0]
   b6f50:	2200      	movs	r2, #0
   b6f52:	6042      	str	r2, [r0, #4]
}
   b6f54:	4770      	bx	lr
   b6f56:	bf00      	nop
   b6f58:	000c0568 	.word	0x000c0568

000b6f5c <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b6f5c:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b6f5e:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b6f60:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b6f62:	8083      	strh	r3, [r0, #4]
   b6f64:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b6f66:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b6f68:	ab05      	add	r3, sp, #20
   b6f6a:	9300      	str	r3, [sp, #0]
   b6f6c:	4913      	ldr	r1, [pc, #76]	; (b6fbc <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b6f6e:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b6f70:	ab04      	add	r3, sp, #16
   b6f72:	aa03      	add	r2, sp, #12
   b6f74:	4628      	mov	r0, r5
   b6f76:	f004 f9e3 	bl	bb340 <sscanf>
   b6f7a:	2803      	cmp	r0, #3
   b6f7c:	d107      	bne.n	b6f8e <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b6f7e:	9b03      	ldr	r3, [sp, #12]
   b6f80:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b6f82:	9b04      	ldr	r3, [sp, #16]
   b6f84:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b6f86:	9b05      	ldr	r3, [sp, #20]
   b6f88:	71a3      	strb	r3, [r4, #6]
}
   b6f8a:	b007      	add	sp, #28
   b6f8c:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b6f8e:	490c      	ldr	r1, [pc, #48]	; (b6fc0 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b6f90:	ab04      	add	r3, sp, #16
   b6f92:	aa03      	add	r2, sp, #12
   b6f94:	4628      	mov	r0, r5
   b6f96:	f004 f9d3 	bl	bb340 <sscanf>
   b6f9a:	2802      	cmp	r0, #2
   b6f9c:	d104      	bne.n	b6fa8 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b6f9e:	9b03      	ldr	r3, [sp, #12]
   b6fa0:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b6fa2:	9b04      	ldr	r3, [sp, #16]
   b6fa4:	7163      	strb	r3, [r4, #5]
   b6fa6:	e7f0      	b.n	b6f8a <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b6fa8:	4906      	ldr	r1, [pc, #24]	; (b6fc4 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b6faa:	aa03      	add	r2, sp, #12
   b6fac:	4628      	mov	r0, r5
   b6fae:	f004 f9c7 	bl	bb340 <sscanf>
   b6fb2:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b6fb4:	bf04      	itt	eq
   b6fb6:	9b03      	ldreq	r3, [sp, #12]
   b6fb8:	7123      	strbeq	r3, [r4, #4]
}
   b6fba:	e7e6      	b.n	b6f8a <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b6fbc:	000c0500 	.word	0x000c0500
   b6fc0:	000c0503 	.word	0x000c0503
   b6fc4:	000c0313 	.word	0x000c0313

000b6fc8 <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   b6fc8:	b510      	push	{r4, lr}
   b6fca:	4b04      	ldr	r3, [pc, #16]	; (b6fdc <_ZN12LocalTimeHMSC1EPKc+0x14>)
   b6fcc:	6003      	str	r3, [r0, #0]
   b6fce:	2300      	movs	r3, #0
   b6fd0:	4604      	mov	r4, r0
   b6fd2:	6043      	str	r3, [r0, #4]
    parse(str);
   b6fd4:	f7ff ffc2 	bl	b6f5c <_ZN12LocalTimeHMS5parseEPKc>
}
   b6fd8:	4620      	mov	r0, r4
   b6fda:	bd10      	pop	{r4, pc}
   b6fdc:	000c0568 	.word	0x000c0568

000b6fe0 <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   b6fe0:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6fe2:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   b6fe4:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   b6fe6:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   b6fe8:	7003      	strb	r3, [r0, #0]
   b6fea:	e9c0 5501 	strd	r5, r5, [r0, #4]
   b6fee:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b6ff2:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   b6ff6:	490a      	ldr	r1, [pc, #40]	; (b7020 <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   b6ff8:	301c      	adds	r0, #28
   b6ffa:	f7ff ffe5 	bl	b6fc8 <_ZN12LocalTimeHMSC1EPKc>
   b6ffe:	4909      	ldr	r1, [pc, #36]	; (b7024 <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   b7000:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7004:	f7ff ffe0 	bl	b6fc8 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   b7008:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   b700c:	4906      	ldr	r1, [pc, #24]	; (b7028 <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   b700e:	6365      	str	r5, [r4, #52]	; 0x34
   b7010:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b7014:	f006 fda9 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   b7018:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   b701a:	4620      	mov	r0, r4
   b701c:	bd38      	pop	{r3, r4, r5, pc}
   b701e:	bf00      	nop
   b7020:	000c0509 	.word	0x000c0509
   b7024:	000c0512 	.word	0x000c0512
   b7028:	000c0d65 	.word	0x000c0d65

000b702c <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b702c:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b7030:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7034:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b7038:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b703a:	bfb8      	it	lt
   b703c:	4808      	ldrlt	r0, [pc, #32]	; (b7060 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b703e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b7042:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b7046:	bfbd      	ittte	lt
   b7048:	fb00 3002 	mlalt	r0, r0, r2, r3
   b704c:	1840      	addlt	r0, r0, r1
   b704e:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b7050:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b7054:	bfa4      	itt	ge
   b7056:	fb00 3002 	mlage	r0, r0, r2, r3
   b705a:	1840      	addge	r0, r0, r1
}
   b705c:	4770      	bx	lr
   b705e:	bf00      	nop
   b7060:	fffff1f0 	.word	0xfffff1f0

000b7064 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b7064:	b508      	push	{r3, lr}
   b7066:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b706a:	b14b      	cbz	r3, b7080 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b706c:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b7070:	b943      	cbnz	r3, b7084 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b7072:	302c      	adds	r0, #44	; 0x2c
   b7074:	f7ff ffda 	bl	b702c <_ZNK12LocalTimeHMS9toSecondsEv>
   b7078:	fab0 f080 	clz	r0, r0
   b707c:	0940      	lsrs	r0, r0, #5
   b707e:	bd08      	pop	{r3, pc}
   b7080:	2001      	movs	r0, #1
   b7082:	e7fc      	b.n	b707e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b7084:	2000      	movs	r0, #0
   b7086:	e7fa      	b.n	b707e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b7088 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b7088:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b708c:	b943      	cbnz	r3, b70a0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b708e:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7092:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b7094:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7098:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b709a:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b709e:	600b      	str	r3, [r1, #0]
}
   b70a0:	4770      	bx	lr

000b70a2 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b70a2:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b70a6:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b70a8:	b9b3      	cbnz	r3, b70d8 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b70aa:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b70ae:	688c      	ldr	r4, [r1, #8]
   b70b0:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b70b2:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b70b6:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b70b8:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b70bc:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b70be:	bfb5      	itete	lt
   b70c0:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b70c2:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b70c4:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b70c6:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b70c8:	bfb5      	itete	lt
   b70ca:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b70ce:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b70d2:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b70d4:	189b      	addge	r3, r3, r2
   b70d6:	600b      	str	r3, [r1, #0]
}
   b70d8:	bd30      	pop	{r4, r5, pc}

000b70da <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   b70da:	b538      	push	{r3, r4, r5, lr}
   b70dc:	6844      	ldr	r4, [r0, #4]
   b70de:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   b70e0:	68ab      	ldr	r3, [r5, #8]
   b70e2:	429c      	cmp	r4, r3
   b70e4:	d007      	beq.n	b70f6 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   b70e6:	4620      	mov	r0, r4
   b70e8:	f7ff ff12 	bl	b6f10 <_ZNK12LocalTimeYMD9compareToES_>
        if (*it == ymd) {
   b70ec:	3404      	adds	r4, #4
   b70ee:	2800      	cmp	r0, #0
   b70f0:	d1f6      	bne.n	b70e0 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   b70f2:	2001      	movs	r0, #1
}
   b70f4:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b70f6:	2000      	movs	r0, #0
   b70f8:	e7fc      	b.n	b70f4 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000b70fa <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   b70fa:	b538      	push	{r3, r4, r5, lr}
   b70fc:	6904      	ldr	r4, [r0, #16]
   b70fe:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   b7100:	696b      	ldr	r3, [r5, #20]
   b7102:	429c      	cmp	r4, r3
   b7104:	d007      	beq.n	b7116 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   b7106:	4620      	mov	r0, r4
   b7108:	f7ff ff02 	bl	b6f10 <_ZNK12LocalTimeYMD9compareToES_>
        if (*it == ymd) {
   b710c:	3404      	adds	r4, #4
   b710e:	2800      	cmp	r0, #0
   b7110:	d1f6      	bne.n	b7100 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   b7112:	2001      	movs	r0, #1
}
   b7114:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b7116:	2000      	movs	r0, #0
   b7118:	e7fc      	b.n	b7114 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000b711a <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   b711a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b711c:	4604      	mov	r4, r0
   b711e:	460d      	mov	r5, r1
    if (inExceptDates(ymd)) {
   b7120:	f7ff ffeb 	bl	b70fa <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   b7124:	b980      	cbnz	r0, b7148 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2e>
        int dayOfWeek = ymd.getDayOfWeek();
   b7126:	a801      	add	r0, sp, #4
   b7128:	9101      	str	r1, [sp, #4]
   b712a:	f7ff feac 	bl	b6e86 <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   b712e:	7822      	ldrb	r2, [r4, #0]
   b7130:	fa42 f300 	asr.w	r3, r2, r0
        result = isValidDays || isValidDates;
   b7134:	f013 0001 	ands.w	r0, r3, #1
   b7138:	d107      	bne.n	b714a <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x30>
        bool isValidDates = inOnlyOnDates(ymd);
   b713a:	4629      	mov	r1, r5
   b713c:	4620      	mov	r0, r4
}
   b713e:	b003      	add	sp, #12
   b7140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        bool isValidDates = inOnlyOnDates(ymd);
   b7144:	f7ff bfc9 	b.w	b70da <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
        result = false;
   b7148:	2000      	movs	r0, #0
}
   b714a:	b003      	add	sp, #12
   b714c:	bd30      	pop	{r4, r5, pc}

000b714e <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   b714e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   b7152:	2400      	movs	r4, #0
   b7154:	6845      	ldr	r5, [r0, #4]
   b7156:	4681      	mov	r9, r0
   b7158:	4626      	mov	r6, r4
   b715a:	46a0      	mov	r8, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   b715c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   b7160:	42ab      	cmp	r3, r5
   b7162:	d01c      	beq.n	b719e <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x50>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   b7164:	f368 0716 	bfi	r7, r8, #0, #23
   b7168:	f366 57da 	bfi	r7, r6, #23, #4
   b716c:	f364 67df 	bfi	r7, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   b7170:	b94f      	cbnz	r7, b7186 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
            result = *it;
   b7172:	682f      	ldr	r7, [r5, #0]
   b7174:	886e      	ldrh	r6, [r5, #2]
   b7176:	78ec      	ldrb	r4, [r5, #3]
   b7178:	f3c7 0816 	ubfx	r8, r7, #0, #23
   b717c:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   b7180:	08e4      	lsrs	r4, r4, #3
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b7182:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   b7184:	e7ea      	b.n	b715c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   b7186:	f368 0116 	bfi	r1, r8, #0, #23
   b718a:	f366 51da 	bfi	r1, r6, #23, #4
   b718e:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   b7192:	4628      	mov	r0, r5
   b7194:	f7ff febc 	bl	b6f10 <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   b7198:	2800      	cmp	r0, #0
   b719a:	dcea      	bgt.n	b7172 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x24>
   b719c:	e7f1      	b.n	b7182 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x34>
    return result;
   b719e:	2000      	movs	r0, #0
   b71a0:	f368 0016 	bfi	r0, r8, #0, #23
   b71a4:	f366 50da 	bfi	r0, r6, #23, #4
   b71a8:	f364 60df 	bfi	r0, r4, #27, #5
}
   b71ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b71b0 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b71b0:	b508      	push	{r3, lr}
   b71b2:	4a05      	ldr	r2, [pc, #20]	; (b71c8 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b71b4:	6002      	str	r2, [r0, #0]
   b71b6:	2200      	movs	r2, #0
   b71b8:	4603      	mov	r3, r0
   b71ba:	6042      	str	r2, [r0, #4]
   b71bc:	3008      	adds	r0, #8
   b71be:	f7ff fec5 	bl	b6f4c <_ZN12LocalTimeHMSC1Ev>
}
   b71c2:	4618      	mov	r0, r3
   b71c4:	bd08      	pop	{r3, pc}
   b71c6:	bf00      	nop
   b71c8:	000c0578 	.word	0x000c0578

000b71cc <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b71cc:	2300      	movs	r3, #0
   b71ce:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b71d0:	8183      	strh	r3, [r0, #12]
   b71d2:	7383      	strb	r3, [r0, #14]
}
   b71d4:	4770      	bx	lr
	...

000b71d8 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b71d8:	b530      	push	{r4, r5, lr}
   b71da:	4604      	mov	r4, r0
   b71dc:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b71de:	460d      	mov	r5, r1
   b71e0:	b111      	cbz	r1, b71e8 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b71e2:	780b      	ldrb	r3, [r1, #0]
   b71e4:	2b4d      	cmp	r3, #77	; 0x4d
   b71e6:	d005      	beq.n	b71f4 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b71e8:	4620      	mov	r0, r4
}
   b71ea:	b007      	add	sp, #28
   b71ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b71f0:	f7ff bfec 	b.w	b71cc <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b71f4:	ab05      	add	r3, sp, #20
   b71f6:	9300      	str	r3, [sp, #0]
   b71f8:	4911      	ldr	r1, [pc, #68]	; (b7240 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b71fa:	ab04      	add	r3, sp, #16
   b71fc:	aa03      	add	r2, sp, #12
   b71fe:	4628      	mov	r0, r5
   b7200:	f004 f89e 	bl	bb340 <sscanf>
   b7204:	2803      	cmp	r0, #3
   b7206:	d116      	bne.n	b7236 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b7208:	9b03      	ldr	r3, [sp, #12]
   b720a:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b720c:	9b04      	ldr	r3, [sp, #16]
   b720e:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b7210:	9b05      	ldr	r3, [sp, #20]
   b7212:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b7214:	212f      	movs	r1, #47	; 0x2f
   b7216:	4628      	mov	r0, r5
   b7218:	f008 f8b2 	bl	bf380 <strchr>
        if (cp) {
   b721c:	b140      	cbz	r0, b7230 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b721e:	1c41      	adds	r1, r0, #1
   b7220:	f104 0008 	add.w	r0, r4, #8
   b7224:	f7ff fe9a 	bl	b6f5c <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b7228:	2301      	movs	r3, #1
   b722a:	71e3      	strb	r3, [r4, #7]
}
   b722c:	b007      	add	sp, #28
   b722e:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b7230:	81a0      	strh	r0, [r4, #12]
   b7232:	73a0      	strb	r0, [r4, #14]
}
   b7234:	e7f8      	b.n	b7228 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b7236:	4620      	mov	r0, r4
   b7238:	f7ff ffc8 	bl	b71cc <_ZN15LocalTimeChange5clearEv>
   b723c:	e7f6      	b.n	b722c <_ZN15LocalTimeChange5parseEPKc+0x54>
   b723e:	bf00      	nop
   b7240:	000c051b 	.word	0x000c051b

000b7244 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b7244:	4b10      	ldr	r3, [pc, #64]	; (b7288 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b7246:	4911      	ldr	r1, [pc, #68]	; (b728c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7248:	b510      	push	{r4, lr}
   b724a:	4604      	mov	r4, r0
   b724c:	f840 3b04 	str.w	r3, [r0], #4
   b7250:	f006 fc8b 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   b7254:	f104 0014 	add.w	r0, r4, #20
   b7258:	f7ff fe78 	bl	b6f4c <_ZN12LocalTimeHMSC1Ev>
   b725c:	490b      	ldr	r1, [pc, #44]	; (b728c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b725e:	f104 001c 	add.w	r0, r4, #28
   b7262:	f006 fc82 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   b7266:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b726a:	f7ff fe6f 	bl	b6f4c <_ZN12LocalTimeHMSC1Ev>
   b726e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7272:	f7ff ff9d 	bl	b71b0 <_ZN15LocalTimeChangeC1Ev>
   b7276:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b727a:	f7ff ff99 	bl	b71b0 <_ZN15LocalTimeChangeC1Ev>
   b727e:	2300      	movs	r3, #0
   b7280:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b7284:	4620      	mov	r0, r4
   b7286:	bd10      	pop	{r4, pc}
   b7288:	000c0588 	.word	0x000c0588
   b728c:	000c0d65 	.word	0x000c0d65

000b7290 <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   b7290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7294:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b7296:	4608      	mov	r0, r1
   b7298:	f008 f89c 	bl	bf3d4 <strdup>
    size_t ii = 0;
   b729c:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b729e:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b72a0:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   b72a2:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b72a6:	493f      	ldr	r1, [pc, #252]	; (b73a4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b72a8:	9801      	ldr	r0, [sp, #4]
   b72aa:	aa01      	add	r2, sp, #4
   b72ac:	f008 f91a 	bl	bf4e4 <strtok_r>
   b72b0:	4601      	mov	r1, r0
   b72b2:	2800      	cmp	r0, #0
   b72b4:	d062      	beq.n	b737c <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b72b6:	2d01      	cmp	r5, #1
   b72b8:	f105 0301 	add.w	r3, r5, #1
   b72bc:	d053      	beq.n	b7366 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b72be:	2d02      	cmp	r5, #2
   b72c0:	d056      	beq.n	b7370 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b72c2:	2d00      	cmp	r5, #0
   b72c4:	d146      	bne.n	b7354 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b72c6:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b72c8:	f892 9000 	ldrb.w	r9, [r2]
   b72cc:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b72d0:	4615      	mov	r5, r2
   b72d2:	4617      	mov	r7, r2
   b72d4:	f102 0201 	add.w	r2, r2, #1
   b72d8:	d8f6      	bhi.n	b72c8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b72da:	2200      	movs	r2, #0
   b72dc:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b72de:	f104 001c 	add.w	r0, r4, #28
   b72e2:	f006 fca0 	bl	bdc26 <_ZN6StringaSEPKc>
                valid = true;
   b72e6:	2201      	movs	r2, #1
                *cp = save2;
   b72e8:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b72ec:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b72f0:	782a      	ldrb	r2, [r5, #0]
   b72f2:	b36a      	cbz	r2, b7350 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b72f4:	f897 a000 	ldrb.w	sl, [r7]
   b72f8:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b72fc:	2a3f      	cmp	r2, #63	; 0x3f
   b72fe:	46b9      	mov	r9, r7
   b7300:	46bb      	mov	fp, r7
   b7302:	f107 0701 	add.w	r7, r7, #1
   b7306:	d9f5      	bls.n	b72f4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b7308:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b730a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b730e:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b7312:	4629      	mov	r1, r5
   b7314:	4638      	mov	r0, r7
   b7316:	f7ff fe21 	bl	b6f5c <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b731a:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b731e:	f1ba 0f00 	cmp.w	sl, #0
   b7322:	d015      	beq.n	b7350 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b7324:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b7326:	f81b ab01 	ldrb.w	sl, [fp], #1
   b732a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b732e:	d8f9      	bhi.n	b7324 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b7330:	2200      	movs	r2, #0
   b7332:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b7334:	4649      	mov	r1, r9
   b7336:	1d20      	adds	r0, r4, #4
   b7338:	f006 fc75 	bl	bdc26 <_ZN6StringaSEPKc>
                        *cp = save2;
   b733c:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b7340:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b7344:	f1ba 0f00 	cmp.w	sl, #0
   b7348:	d006      	beq.n	b7358 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b734a:	4629      	mov	r1, r5
   b734c:	f7ff fe06 	bl	b6f5c <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b7350:	2501      	movs	r5, #1
   b7352:	e7a8      	b.n	b72a6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b7354:	461d      	mov	r5, r3
   b7356:	e7a6      	b.n	b72a6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b7358:	4639      	mov	r1, r7
   b735a:	f7ff fce6 	bl	b6d2a <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b735e:	7e23      	ldrb	r3, [r4, #24]
   b7360:	3b01      	subs	r3, #1
   b7362:	7623      	strb	r3, [r4, #24]
   b7364:	e7f4      	b.n	b7350 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b7366:	4640      	mov	r0, r8
   b7368:	f7ff ff36 	bl	b71d8 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b736c:	2502      	movs	r5, #2
   b736e:	e79a      	b.n	b72a6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   b7370:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7374:	f7ff ff30 	bl	b71d8 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7378:	2503      	movs	r5, #3
   b737a:	e794      	b.n	b72a6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   b737c:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b7380:	b143      	cbz	r3, b7394 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b7382:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b7386:	b92a      	cbnz	r2, b7394 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   b7388:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b738c:	f7ff ff1e 	bl	b71cc <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b7390:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   b7394:	4630      	mov	r0, r6
   b7396:	f003 ffbb 	bl	bb310 <free>
}
   b739a:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b739e:	b003      	add	sp, #12
   b73a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b73a4:	000c0525 	.word	0x000c0525

000b73a8 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b73a8:	b538      	push	{r3, r4, r5, lr}
   b73aa:	4b13      	ldr	r3, [pc, #76]	; (b73f8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b73ac:	4604      	mov	r4, r0
   b73ae:	460d      	mov	r5, r1
   b73b0:	f840 3b04 	str.w	r3, [r0], #4
   b73b4:	4911      	ldr	r1, [pc, #68]	; (b73fc <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b73b6:	f006 fbd8 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   b73ba:	f104 0014 	add.w	r0, r4, #20
   b73be:	f7ff fdc5 	bl	b6f4c <_ZN12LocalTimeHMSC1Ev>
   b73c2:	490e      	ldr	r1, [pc, #56]	; (b73fc <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b73c4:	f104 001c 	add.w	r0, r4, #28
   b73c8:	f006 fbcf 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   b73cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b73d0:	f7ff fdbc 	bl	b6f4c <_ZN12LocalTimeHMSC1Ev>
   b73d4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b73d8:	f7ff feea 	bl	b71b0 <_ZN15LocalTimeChangeC1Ev>
   b73dc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b73e0:	f7ff fee6 	bl	b71b0 <_ZN15LocalTimeChangeC1Ev>
   b73e4:	2300      	movs	r3, #0
   b73e6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b73ea:	4629      	mov	r1, r5
   b73ec:	4620      	mov	r0, r4
   b73ee:	f7ff ff4f 	bl	b7290 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b73f2:	4620      	mov	r0, r4
   b73f4:	bd38      	pop	{r3, r4, r5, pc}
   b73f6:	bf00      	nop
   b73f8:	000c0588 	.word	0x000c0588
   b73fc:	000c0d65 	.word	0x000c0d65

000b7400 <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   b7400:	b508      	push	{r3, lr}
   b7402:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b7404:	f7ff fda2 	bl	b6f4c <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b7408:	688a      	ldr	r2, [r1, #8]
   b740a:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b740c:	684a      	ldr	r2, [r1, #4]
   b740e:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b7410:	680a      	ldr	r2, [r1, #0]
   b7412:	719a      	strb	r2, [r3, #6]
}
   b7414:	4618      	mov	r0, r3
   b7416:	bd08      	pop	{r3, pc}

000b7418 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b7418:	b513      	push	{r0, r1, r4, lr}
   b741a:	4b07      	ldr	r3, [pc, #28]	; (b7438 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b741c:	6003      	str	r3, [r0, #0]
   b741e:	2300      	movs	r3, #0
   b7420:	6043      	str	r3, [r0, #4]
   b7422:	4604      	mov	r4, r0
    *this = value.hms();
   b7424:	4668      	mov	r0, sp
   b7426:	f7ff ffeb 	bl	b7400 <_ZNK14LocalTimeValue3hmsEv>
   b742a:	4620      	mov	r0, r4
   b742c:	4669      	mov	r1, sp
   b742e:	f7ff fc7c 	bl	b6d2a <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b7432:	b002      	add	sp, #8
   b7434:	bd10      	pop	{r4, pc}
   b7436:	bf00      	nop
   b7438:	000c0568 	.word	0x000c0568

000b743c <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   b743c:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b7440:	b943      	cbnz	r3, b7454 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
   b7442:	f991 2005 	ldrsb.w	r2, [r1, #5]
   b7446:	f991 3006 	ldrsb.w	r3, [r1, #6]
        tm_hour = hms.hour;
   b744a:	f991 1004 	ldrsb.w	r1, [r1, #4]
        tm_sec = hms.second;
   b744e:	6003      	str	r3, [r0, #0]
        tm_min = hms.minute;
   b7450:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
   b7454:	4770      	bx	lr

000b7456 <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   b7456:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b7458:	2300      	movs	r3, #0
   b745a:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   b745c:	a801      	add	r0, sp, #4
   b745e:	9301      	str	r3, [sp, #4]
   b7460:	f7ff fcff 	bl	b6e62 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   b7464:	9801      	ldr	r0, [sp, #4]
   b7466:	b003      	add	sp, #12
   b7468:	f85d fb04 	ldr.w	pc, [sp], #4

000b746c <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   b746c:	4b19      	ldr	r3, [pc, #100]	; (b74d4 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   b746e:	b570      	push	{r4, r5, r6, lr}
   b7470:	4604      	mov	r4, r0
   b7472:	460d      	mov	r5, r1
   b7474:	f840 3b04 	str.w	r3, [r0], #4
   b7478:	3104      	adds	r1, #4
   b747a:	f006 fbc1 	bl	bdc00 <_ZN6StringC1ERKS_>
   b747e:	f105 0114 	add.w	r1, r5, #20
   b7482:	f104 0014 	add.w	r0, r4, #20
   b7486:	f7ff fccd 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b748a:	f105 011c 	add.w	r1, r5, #28
   b748e:	f104 001c 	add.w	r0, r4, #28
   b7492:	f006 fbb5 	bl	bdc00 <_ZN6StringC1ERKS_>
   b7496:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b749a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b749e:	f7ff fcc1 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   b74a2:	4e0d      	ldr	r6, [pc, #52]	; (b74d8 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   b74a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b74a6:	63a3      	str	r3, [r4, #56]	; 0x38
   b74a8:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b74ac:	6366      	str	r6, [r4, #52]	; 0x34
   b74ae:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b74b2:	f7ff fcb7 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b74b6:	6cab      	ldr	r3, [r5, #72]	; 0x48
   b74b8:	64a3      	str	r3, [r4, #72]	; 0x48
   b74ba:	6466      	str	r6, [r4, #68]	; 0x44
   b74bc:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b74c0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b74c4:	f7ff fcae 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   b74c8:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b74cc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b74d0:	4620      	mov	r0, r4
   b74d2:	bd70      	pop	{r4, r5, r6, pc}
   b74d4:	000c0588 	.word	0x000c0588
   b74d8:	000c0578 	.word	0x000c0578

000b74dc <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   b74dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b74de:	460c      	mov	r4, r1
   b74e0:	f851 3b04 	ldr.w	r3, [r1], #4
   b74e4:	4607      	mov	r7, r0
   b74e6:	f840 3b04 	str.w	r3, [r0], #4
   b74ea:	f7ff ffbf 	bl	b746c <_ZN22LocalTimePosixTimezoneC1ERKS_>
   b74ee:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b74f2:	f104 0668 	add.w	r6, r4, #104	; 0x68
   b74f6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   b74fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b74fc:	f107 0568 	add.w	r5, r7, #104	; 0x68
   b7500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7502:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7506:	6833      	ldr	r3, [r6, #0]
   b7508:	602b      	str	r3, [r5, #0]
   b750a:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   b750e:	f104 0698 	add.w	r6, r4, #152	; 0x98
   b7512:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   b7516:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7518:	f107 0598 	add.w	r5, r7, #152	; 0x98
   b751c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b751e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7522:	6833      	ldr	r3, [r6, #0]
   b7524:	602b      	str	r3, [r5, #0]
   b7526:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   b752a:	34c8      	adds	r4, #200	; 0xc8
   b752c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   b7530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7532:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   b7536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b753a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b753c:	6823      	ldr	r3, [r4, #0]
   b753e:	602b      	str	r3, [r5, #0]
   b7540:	4638      	mov	r0, r7
   b7542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7544 <_ZN16LocalTimeConvert7timeStrEv>:
String LocalTimeConvert::timeStr() {
   b7544:	b510      	push	{r4, lr}
   b7546:	4604      	mov	r4, r0
   b7548:	b088      	sub	sp, #32
   b754a:	4608      	mov	r0, r1
    asctime_r(&localTimeValue, ascstr);
   b754c:	3068      	adds	r0, #104	; 0x68
   b754e:	a901      	add	r1, sp, #4
   b7550:	f007 fe28 	bl	bf1a4 <asctime_r>
    int len = strlen(ascstr);
   b7554:	a801      	add	r0, sp, #4
   b7556:	f007 ff5a 	bl	bf40e <strlen>
    ascstr[len-1] = 0; // remove final newline
   b755a:	ab08      	add	r3, sp, #32
   b755c:	4418      	add	r0, r3
   b755e:	2300      	movs	r3, #0
   b7560:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b7564:	a901      	add	r1, sp, #4
   b7566:	4620      	mov	r0, r4
   b7568:	f006 faff 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b756c:	4620      	mov	r0, r4
   b756e:	b008      	add	sp, #32
   b7570:	bd10      	pop	{r4, pc}
	...

000b7574 <_ZNK16LocalTimeConvert8zoneNameEv>:
String LocalTimeConvert::zoneName() const { 
   b7574:	b538      	push	{r3, r4, r5, lr}
   b7576:	4604      	mov	r4, r0
    if (config.isZ()) {
   b7578:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b757a:	460d      	mov	r5, r1
    if (config.isZ()) {
   b757c:	f7ff fd72 	bl	b7064 <_ZNK22LocalTimePosixTimezone3isZEv>
   b7580:	b128      	cbz	r0, b758e <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b7582:	4909      	ldr	r1, [pc, #36]	; (b75a8 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b7584:	4620      	mov	r0, r4
   b7586:	f006 faf0 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
};
   b758a:	4620      	mov	r0, r4
   b758c:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b758e:	6828      	ldr	r0, [r5, #0]
   b7590:	f7ff fbc1 	bl	b6d16 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b7594:	b128      	cbz	r0, b75a2 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b7596:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b759a:	4620      	mov	r0, r4
   b759c:	f006 fb30 	bl	bdc00 <_ZN6StringC1ERKS_>
   b75a0:	e7f3      	b.n	b758a <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b75a2:	f105 0120 	add.w	r1, r5, #32
   b75a6:	e7f8      	b.n	b759a <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b75a8:	000c0527 	.word	0x000c0527

000b75ac <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b75ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b75b0:	4680      	mov	r8, r0
   b75b2:	b0a8      	sub	sp, #160	; 0xa0
   b75b4:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b75b6:	4615      	mov	r5, r2
   b75b8:	b12a      	cbz	r2, b75c6 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b75ba:	4b47      	ldr	r3, [pc, #284]	; (b76d8 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b75bc:	4610      	mov	r0, r2
   b75be:	6819      	ldr	r1, [r3, #0]
   b75c0:	f007 fef5 	bl	bf3ae <strcmp>
   b75c4:	b938      	cbnz	r0, b75d6 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b75c6:	4621      	mov	r1, r4
   b75c8:	4640      	mov	r0, r8
   b75ca:	f7ff ffbb 	bl	b7544 <_ZN16LocalTimeConvert7timeStrEv>
}
   b75ce:	4640      	mov	r0, r8
   b75d0:	b028      	add	sp, #160	; 0xa0
   b75d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b75d6:	4629      	mov	r1, r5
   b75d8:	223f      	movs	r2, #63	; 0x3f
   b75da:	a818      	add	r0, sp, #96	; 0x60
   b75dc:	f007 ff33 	bl	bf446 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b75e0:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b75e2:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b75e4:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b75e8:	f007 ff11 	bl	bf40e <strlen>
    String zoneNameStr = zoneName();
   b75ec:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b75ee:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b75f0:	a803      	add	r0, sp, #12
   b75f2:	f7ff ffbf 	bl	b7574 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b75f6:	1d20      	adds	r0, r4, #4
   b75f8:	f7ff fd34 	bl	b7064 <_ZNK22LocalTimePosixTimezone3isZEv>
   b75fc:	b348      	cbz	r0, b7652 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b75fe:	4937      	ldr	r1, [pc, #220]	; (b76dc <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b7600:	a807      	add	r0, sp, #28
   b7602:	f007 fede 	bl	bf3c2 <strcpy>
   b7606:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b7608:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b760a:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b760e:	45ba      	cmp	sl, r7
   b7610:	d94c      	bls.n	b76ac <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b7612:	7833      	ldrb	r3, [r6, #0]
   b7614:	2b25      	cmp	r3, #37	; 0x25
   b7616:	f107 0901 	add.w	r9, r7, #1
   b761a:	d117      	bne.n	b764c <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b761c:	7873      	ldrb	r3, [r6, #1]
   b761e:	2b7a      	cmp	r3, #122	; 0x7a
   b7620:	d136      	bne.n	b7690 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b7622:	a807      	add	r0, sp, #28
   b7624:	f007 fef3 	bl	bf40e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7628:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b762a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b762c:	1838      	adds	r0, r7, r0
   b762e:	ebaa 0207 	sub.w	r2, sl, r7
   b7632:	1cb1      	adds	r1, r6, #2
   b7634:	4418      	add	r0, r3
   b7636:	f007 fe07 	bl	bf248 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b763a:	462a      	mov	r2, r5
   b763c:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b763e:	4630      	mov	r0, r6
   b7640:	f007 fe02 	bl	bf248 <memcpy>
            len = strlen(format_str);
   b7644:	a818      	add	r0, sp, #96	; 0x60
   b7646:	f007 fee2 	bl	bf40e <strlen>
   b764a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b764c:	3601      	adds	r6, #1
   b764e:	464f      	mov	r7, r9
   b7650:	e7db      	b.n	b760a <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b7652:	6820      	ldr	r0, [r4, #0]
   b7654:	f7ff fb5f 	bl	b6d16 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b7658:	b1b8      	cbz	r0, b768a <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b765a:	f104 0018 	add.w	r0, r4, #24
   b765e:	f7ff fce5 	bl	b702c <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b7662:	223c      	movs	r2, #60	; 0x3c
   b7664:	fb90 f3f2 	sdiv	r3, r0, r2
   b7668:	2b00      	cmp	r3, #0
   b766a:	bfb8      	it	lt
   b766c:	425b      	neglt	r3, r3
   b766e:	fbb3 f1f2 	udiv	r1, r3, r2
   b7672:	fb02 3311 	mls	r3, r2, r1, r3
   b7676:	9300      	str	r3, [sp, #0]
   b7678:	4a19      	ldr	r2, [pc, #100]	; (b76e0 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b767a:	4b1a      	ldr	r3, [pc, #104]	; (b76e4 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b767c:	fb90 f3f3 	sdiv	r3, r0, r3
   b7680:	2110      	movs	r1, #16
   b7682:	a807      	add	r0, sp, #28
   b7684:	f003 fe64 	bl	bb350 <snprintf>
   b7688:	e7bd      	b.n	b7606 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b768a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b768e:	e7e6      	b.n	b765e <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b7690:	2b5a      	cmp	r3, #90	; 0x5a
   b7692:	d1db      	bne.n	b764c <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b7694:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7696:	ab18      	add	r3, sp, #96	; 0x60
   b7698:	1978      	adds	r0, r7, r5
   b769a:	ebaa 0207 	sub.w	r2, sl, r7
   b769e:	1cb1      	adds	r1, r6, #2
   b76a0:	4418      	add	r0, r3
   b76a2:	f007 fdd1 	bl	bf248 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b76a6:	9903      	ldr	r1, [sp, #12]
   b76a8:	462a      	mov	r2, r5
   b76aa:	e7c8      	b.n	b763e <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b76ac:	2100      	movs	r1, #0
   b76ae:	222e      	movs	r2, #46	; 0x2e
   b76b0:	a80c      	add	r0, sp, #48	; 0x30
   b76b2:	910b      	str	r1, [sp, #44]	; 0x2c
   b76b4:	f007 fdf0 	bl	bf298 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b76b8:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b76bc:	aa18      	add	r2, sp, #96	; 0x60
   b76be:	2132      	movs	r1, #50	; 0x32
   b76c0:	a80b      	add	r0, sp, #44	; 0x2c
   b76c2:	f003 fe7d 	bl	bb3c0 <strftime>
    return String(buf);    
   b76c6:	a90b      	add	r1, sp, #44	; 0x2c
   b76c8:	4640      	mov	r0, r8
   b76ca:	f006 fa4e 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b76ce:	a803      	add	r0, sp, #12
   b76d0:	f006 fa00 	bl	bdad4 <_ZN6StringD1Ev>
   b76d4:	e77b      	b.n	b75ce <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b76d6:	bf00      	nop
   b76d8:	2003de2c 	.word	0x2003de2c
   b76dc:	000c0527 	.word	0x000c0527
   b76e0:	000c0529 	.word	0x000c0529
   b76e4:	fffff1f0 	.word	0xfffff1f0

000b76e8 <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   b76e8:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b76ea:	4d09      	ldr	r5, [pc, #36]	; (b7710 <_ZN9LocalTime8instanceEv+0x28>)
   b76ec:	682b      	ldr	r3, [r5, #0]
   b76ee:	b963      	cbnz	r3, b770a <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b76f0:	2060      	movs	r0, #96	; 0x60
   b76f2:	f7fc fcd0 	bl	b4096 <_Znwj>
   b76f6:	4604      	mov	r4, r0
   b76f8:	b130      	cbz	r0, b7708 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b76fa:	4b06      	ldr	r3, [pc, #24]	; (b7714 <_ZN9LocalTime8instanceEv+0x2c>)
   b76fc:	f840 3b04 	str.w	r3, [r0], #4
   b7700:	f7ff fda0 	bl	b7244 <_ZN22LocalTimePosixTimezoneC1Ev>
   b7704:	2364      	movs	r3, #100	; 0x64
   b7706:	65e3      	str	r3, [r4, #92]	; 0x5c
   b7708:	602c      	str	r4, [r5, #0]
}
   b770a:	6828      	ldr	r0, [r5, #0]
   b770c:	bd38      	pop	{r3, r4, r5, pc}
   b770e:	bf00      	nop
   b7710:	2003e444 	.word	0x2003e444
   b7714:	000c0558 	.word	0x000c0558

000b7718 <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   b7718:	f003 be6a 	b.w	bb3f0 <mktime>

000b771c <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b771c:	3901      	subs	r1, #1
   b771e:	290b      	cmp	r1, #11
   b7720:	d815      	bhi.n	b774e <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b7722:	e8df f001 	tbb	[pc, r1]
   b7726:	0816      	.short	0x0816
   b7728:	06160616 	.word	0x06160616
   b772c:	16061616 	.word	0x16061616
   b7730:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b7732:	201e      	movs	r0, #30
   b7734:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b7736:	0783      	lsls	r3, r0, #30
   b7738:	d10d      	bne.n	b7756 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b773a:	2364      	movs	r3, #100	; 0x64
   b773c:	fb90 f2f3 	sdiv	r2, r0, r3
   b7740:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b7744:	2800      	cmp	r0, #0
   b7746:	bf0c      	ite	eq
   b7748:	201c      	moveq	r0, #28
   b774a:	201d      	movne	r0, #29
   b774c:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b774e:	2000      	movs	r0, #0
   b7750:	4770      	bx	lr
            return 31;
   b7752:	201f      	movs	r0, #31
   b7754:	4770      	bx	lr
                return 28;
   b7756:	201c      	movs	r0, #28
}
   b7758:	4770      	bx	lr

000b775a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b775a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b775c:	2301      	movs	r3, #1
   b775e:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b7760:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7764:	3b01      	subs	r3, #1
   b7766:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b7768:	2300      	movs	r3, #0
   b776a:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b776e:	4606      	mov	r6, r0
   b7770:	460c      	mov	r4, r1
   b7772:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b7774:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b7776:	4620      	mov	r0, r4
   b7778:	f7ff ffce 	bl	b7718 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b777c:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b7780:	69a2      	ldr	r2, [r4, #24]
   b7782:	429a      	cmp	r2, r3
   b7784:	d003      	beq.n	b778e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b7786:	68e3      	ldr	r3, [r4, #12]
   b7788:	3301      	adds	r3, #1
   b778a:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b778c:	e7f3      	b.n	b7776 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b778e:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b7792:	2d01      	cmp	r5, #1
   b7794:	d013      	beq.n	b77be <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b7796:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b7798:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b779a:	3d01      	subs	r5, #1
   b779c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b77a0:	441d      	add	r5, r3
   b77a2:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b77a4:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b77a8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b77ac:	f7ff ffb6 	bl	b771c <_ZN9LocalTime14lastDayOfMonthEii>
   b77b0:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b77b2:	bfc4      	itt	gt
   b77b4:	3d07      	subgt	r5, #7
   b77b6:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b77b8:	4620      	mov	r0, r4
   b77ba:	f7ff ffad 	bl	b7718 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b77be:	4621      	mov	r1, r4
   b77c0:	f106 0008 	add.w	r0, r6, #8
   b77c4:	f7ff fc60 	bl	b7088 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b77c8:	4638      	mov	r0, r7
   b77ca:	f7ff fc6a 	bl	b70a2 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b77ce:	4620      	mov	r0, r4
}
   b77d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b77d4:	f003 be0c 	b.w	bb3f0 <mktime>

000b77d8 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b77d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b77da:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b77de:	b085      	sub	sp, #20
   b77e0:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b77e2:	b92b      	cbnz	r3, b77f0 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b77e4:	f7ff ff80 	bl	b76e8 <_ZN9LocalTime8instanceEv>
   b77e8:	1d01      	adds	r1, r0, #4
   b77ea:	1d20      	adds	r0, r4, #4
   b77ec:	f7ff faaa 	bl	b6d44 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b77f0:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b77f4:	2b00      	cmp	r3, #0
   b77f6:	d065      	beq.n	b78c4 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b77f8:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b77fc:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b7800:	4639      	mov	r1, r7
   b7802:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b7804:	463e      	mov	r6, r7
   b7806:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b780a:	f003 fde1 	bl	bb3d0 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b780e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7810:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b7814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7816:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b781a:	6833      	ldr	r3, [r6, #0]
   b781c:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b781e:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b7822:	a802      	add	r0, sp, #8
   b7824:	f7ff fafe 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b7828:	aa02      	add	r2, sp, #8
   b782a:	4639      	mov	r1, r7
   b782c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b7830:	f7ff ff93 	bl	b775a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b7834:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b7838:	f104 0118 	add.w	r1, r4, #24
   b783c:	a802      	add	r0, sp, #8
   b783e:	f7ff faf1 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b7842:	aa02      	add	r2, sp, #8
   b7844:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b7848:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b784c:	f7ff ff85 	bl	b775a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b7850:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b7854:	4286      	cmp	r6, r0
   b7856:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b785a:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b785e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b7862:	da23      	bge.n	b78ac <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b7864:	42b2      	cmp	r2, r6
   b7866:	eb73 0505 	sbcs.w	r5, r3, r5
   b786a:	da19      	bge.n	b78a0 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b786c:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b786e:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b7870:	6820      	ldr	r0, [r4, #0]
   b7872:	f7ff fa50 	bl	b6d16 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b7876:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b787a:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b787e:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b7880:	bb10      	cbnz	r0, b78c8 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b7882:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b7886:	f7ff fbd1 	bl	b702c <_ZNK12LocalTimeHMS9toSecondsEv>
   b788a:	1a2d      	subs	r5, r5, r0
   b788c:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b7890:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b7894:	9901      	ldr	r1, [sp, #4]
   b7896:	a802      	add	r0, sp, #8
   b7898:	f003 fd9a 	bl	bb3d0 <localtime_r>
}
   b789c:	b005      	add	sp, #20
   b789e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b78a0:	4282      	cmp	r2, r0
   b78a2:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b78a4:	bfb4      	ite	lt
   b78a6:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b78a8:	2302      	movge	r3, #2
   b78aa:	e7e0      	b.n	b786e <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b78ac:	4282      	cmp	r2, r0
   b78ae:	eb73 0101 	sbcs.w	r1, r3, r1
   b78b2:	da01      	bge.n	b78b8 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b78b4:	2303      	movs	r3, #3
   b78b6:	e7da      	b.n	b786e <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b78b8:	42b2      	cmp	r2, r6
   b78ba:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b78bc:	bfb4      	ite	lt
   b78be:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b78c0:	2305      	movge	r3, #5
   b78c2:	e7d4      	b.n	b786e <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b78c4:	2306      	movs	r3, #6
   b78c6:	e7d2      	b.n	b786e <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b78c8:	f104 0018 	add.w	r0, r4, #24
   b78cc:	e7db      	b.n	b7886 <_ZN16LocalTimeConvert7convertEv+0xae>

000b78ce <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   b78ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct tm mutableTimeInfo = *this;
   b78d2:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   b78d4:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   b78d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   b78d8:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   b78da:	ad01      	add	r5, sp, #4
   b78dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b78de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b78e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b78e2:	6823      	ldr	r3, [r4, #0]
   b78e4:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   b78e6:	a801      	add	r0, sp, #4
   b78e8:	f003 fd82 	bl	bb3f0 <mktime>
   b78ec:	4605      	mov	r5, r0
    standardTime += config.standardHMS.toSeconds();
   b78ee:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   b78f2:	460f      	mov	r7, r1
    standardTime += config.standardHMS.toSeconds();
   b78f4:	f7ff fb9a 	bl	b702c <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   b78f8:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   b78fc:	eb10 0805 	adds.w	r8, r0, r5
   b7900:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
    if (config.hasDST()) {
   b7904:	b31b      	cbz	r3, b794e <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   b7906:	2306      	movs	r3, #6
   b7908:	a821      	add	r0, sp, #132	; 0x84
   b790a:	9320      	str	r3, [sp, #128]	; 0x80
   b790c:	f7ff fc9a 	bl	b7244 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   b7910:	4631      	mov	r1, r6
   b7912:	a80a      	add	r0, sp, #40	; 0x28
   b7914:	f7ff fdaa 	bl	b746c <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   b7918:	a90a      	add	r1, sp, #40	; 0x28
   b791a:	a821      	add	r0, sp, #132	; 0x84
   b791c:	f7ff fa12 	bl	b6d44 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
   b7920:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   b7922:	e9cd 8438 	strd	r8, r4, [sp, #224]	; 0xe0
   b7926:	f7ff ff57 	bl	b77d8 <_ZN16LocalTimeConvert7convertEv>
   b792a:	a80a      	add	r0, sp, #40	; 0x28
   b792c:	f7ff f9ae 	bl	b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   b7930:	9820      	ldr	r0, [sp, #128]	; 0x80
   b7932:	f7ff f9f0 	bl	b6d16 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b7936:	b138      	cbz	r0, b7948 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   b7938:	f106 0014 	add.w	r0, r6, #20
   b793c:	f7ff fb76 	bl	b702c <_ZNK12LocalTimeHMS9toSecondsEv>
   b7940:	eb10 0805 	adds.w	r8, r0, r5
   b7944:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
class LocalTimeConvert {
   b7948:	a821      	add	r0, sp, #132	; 0x84
   b794a:	f7ff f99f 	bl	b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   b794e:	4640      	mov	r0, r8
   b7950:	4621      	mov	r1, r4
   b7952:	b05c      	add	sp, #368	; 0x170
   b7954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7958 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   b7958:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   b795a:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   b795e:	b097      	sub	sp, #92	; 0x5c
   b7960:	4604      	mov	r4, r0
    if (!hms.ignore) {
   b7962:	b9db      	cbnz	r3, b799c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x44>
        localTimeValue.setHMS(hms);
   b7964:	f100 0568 	add.w	r5, r0, #104	; 0x68
   b7968:	4668      	mov	r0, sp
   b796a:	f7ff fa5b 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b796e:	4669      	mov	r1, sp
   b7970:	4628      	mov	r0, r5
   b7972:	f7ff fd63 	bl	b743c <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   b7976:	1d21      	adds	r1, r4, #4
   b7978:	4668      	mov	r0, sp
   b797a:	f7ff fd77 	bl	b746c <_ZN22LocalTimePosixTimezoneC1ERKS_>
   b797e:	4669      	mov	r1, sp
   b7980:	4628      	mov	r0, r5
   b7982:	f7ff ffa4 	bl	b78ce <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   b7986:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   b798a:	4668      	mov	r0, sp
   b798c:	f7ff f97e 	bl	b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   b7990:	4620      	mov	r0, r4
}
   b7992:	b017      	add	sp, #92	; 0x5c
   b7994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        convert();
   b7998:	f7ff bf1e 	b.w	b77d8 <_ZN16LocalTimeConvert7convertEv>
}
   b799c:	b017      	add	sp, #92	; 0x5c
   b799e:	bd30      	pop	{r4, r5, pc}

000b79a0 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   b79a0:	b530      	push	{r4, r5, lr}
    time += 86400;
   b79a2:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   b79a6:	4d0a      	ldr	r5, [pc, #40]	; (b79d0 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x30>)
   b79a8:	195b      	adds	r3, r3, r5
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   b79aa:	b085      	sub	sp, #20
    time += 86400;
   b79ac:	f142 0200 	adc.w	r2, r2, #0
   b79b0:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   b79b4:	4604      	mov	r4, r0
   b79b6:	9101      	str	r1, [sp, #4]
    convert();
   b79b8:	f7ff ff0e 	bl	b77d8 <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   b79bc:	9901      	ldr	r1, [sp, #4]
   b79be:	a802      	add	r0, sp, #8
   b79c0:	f7ff fa30 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b79c4:	a902      	add	r1, sp, #8
   b79c6:	4620      	mov	r0, r4
   b79c8:	f7ff ffc6 	bl	b7958 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   b79cc:	b005      	add	sp, #20
   b79ce:	bd30      	pop	{r4, r5, pc}
   b79d0:	00015180 	.word	0x00015180

000b79d4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   b79d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79d8:	b08a      	sub	sp, #40	; 0x28
   b79da:	4617      	mov	r7, r2
   b79dc:	4606      	mov	r6, r0
   b79de:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   b79e0:	2224      	movs	r2, #36	; 0x24
   b79e2:	2100      	movs	r1, #0
   b79e4:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   b79e6:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   b79e8:	f007 fc56 	bl	bf298 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   b79ec:	2f06      	cmp	r7, #6
   b79ee:	d829      	bhi.n	b7a44 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   b79f0:	4629      	mov	r1, r5
   b79f2:	4630      	mov	r0, r6
   b79f4:	f7ff fe92 	bl	b771c <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   b79f8:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   b79fa:	4680      	mov	r8, r0
    if (ordinal > 0) {
   b79fc:	dd24      	ble.n	b7a48 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   b79fe:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   b7a02:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   b7a04:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   b7a06:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   b7a08:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   b7a0a:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   b7a0c:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   b7a0e:	f7ff fe83 	bl	b7718 <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   b7a12:	9a07      	ldr	r2, [sp, #28]
            timeInfo.tm_mday++;
   b7a14:	9b04      	ldr	r3, [sp, #16]
        while(timeInfo.tm_wday != dayOfWeek) {
   b7a16:	42ba      	cmp	r2, r7
   b7a18:	d001      	beq.n	b7a1e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   b7a1a:	3301      	adds	r3, #1
   b7a1c:	e7f5      	b.n	b7a0a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   b7a1e:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   b7a20:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   b7a22:	4294      	cmp	r4, r2
   b7a24:	d106      	bne.n	b7a34 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   b7a26:	b101      	cbz	r1, b7a2a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   b7a28:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   b7a2a:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   b7a2c:	4620      	mov	r0, r4
   b7a2e:	b00a      	add	sp, #40	; 0x28
   b7a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   b7a34:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   b7a36:	4543      	cmp	r3, r8
   b7a38:	dc04      	bgt.n	b7a44 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   b7a3a:	3201      	adds	r2, #1
   b7a3c:	2a06      	cmp	r2, #6
   b7a3e:	f04f 0101 	mov.w	r1, #1
   b7a42:	d1ee      	bne.n	b7a22 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   b7a44:	2400      	movs	r4, #0
   b7a46:	e7f1      	b.n	b7a2c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   b7a48:	d0f0      	beq.n	b7a2c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   b7a4a:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   b7a4c:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   b7a50:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   b7a54:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   b7a56:	a801      	add	r0, sp, #4
   b7a58:	f7ff fe5e 	bl	b7718 <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   b7a5c:	9b07      	ldr	r3, [sp, #28]
            timeInfo.tm_mday--;
   b7a5e:	9904      	ldr	r1, [sp, #16]
        while(timeInfo.tm_wday != dayOfWeek) {
   b7a60:	42bb      	cmp	r3, r7
   b7a62:	d002      	beq.n	b7a6a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   b7a64:	3901      	subs	r1, #1
   b7a66:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   b7a68:	e7f5      	b.n	b7a56 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   b7a6a:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   b7a6c:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   b7a6e:	4264      	negs	r4, r4
   b7a70:	4294      	cmp	r4, r2
   b7a72:	dc03      	bgt.n	b7a7c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   b7a74:	2800      	cmp	r0, #0
   b7a76:	d0d8      	beq.n	b7a2a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   b7a78:	9104      	str	r1, [sp, #16]
   b7a7a:	e7d6      	b.n	b7a2a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   b7a7c:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   b7a7e:	2900      	cmp	r1, #0
   b7a80:	dde0      	ble.n	b7a44 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   b7a82:	3201      	adds	r2, #1
   b7a84:	2a06      	cmp	r2, #6
   b7a86:	f04f 0001 	mov.w	r0, #1
   b7a8a:	d1f1      	bne.n	b7a70 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   b7a8c:	e7da      	b.n	b7a44 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000b7a90 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   b7a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a94:	b0cc      	sub	sp, #304	; 0x130
   b7a96:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   b7a98:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   b7a9a:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   b7a9c:	f7ff fd1e 	bl	b74dc <_ZN16LocalTimeConvertC1ERKS_>
    LocalTimeYMD() {
   b7aa0:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   b7aa2:	4620      	mov	r0, r4
    LocalTimeYMD() {
   b7aa4:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   b7aa6:	f7ff fb52 	bl	b714e <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   b7aaa:	bb58      	cbnz	r0, b7b04 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   b7aac:	a82a      	add	r0, sp, #168	; 0xa8
   b7aae:	f7ff fcd2 	bl	b7456 <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   b7ab2:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   b7ab4:	f7ff fe18 	bl	b76e8 <_ZN9LocalTime8instanceEv>
   b7ab8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   b7aba:	a802      	add	r0, sp, #8
   b7abc:	f7ff fa03 	bl	b6ec6 <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   b7ac0:	f8df 820c 	ldr.w	r8, [pc, #524]	; b7cd0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   b7ac4:	a82a      	add	r0, sp, #168	; 0xa8
   b7ac6:	f7ff fcc6 	bl	b7456 <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   b7aca:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   b7acc:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   b7ace:	4606      	mov	r6, r0
   b7ad0:	a803      	add	r0, sp, #12
   b7ad2:	f7ff fa1d 	bl	b6f10 <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   b7ad6:	2800      	cmp	r0, #0
   b7ad8:	f300 80f2 	bgt.w	b7cc0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   b7adc:	4631      	mov	r1, r6
   b7ade:	4620      	mov	r0, r4
   b7ae0:	f7ff fb1b 	bl	b711a <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   b7ae4:	4607      	mov	r7, r0
   b7ae6:	2800      	cmp	r0, #0
   b7ae8:	f000 8094 	beq.w	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   b7aec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b7aee:	3b01      	subs	r3, #1
   b7af0:	2b04      	cmp	r3, #4
   b7af2:	f200 808f 	bhi.w	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   b7af6:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7afa:	0007      	.short	0x0007
   b7afc:	00960007 	.word	0x00960007
   b7b00:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   b7b04:	9002      	str	r0, [sp, #8]
   b7b06:	e7db      	b.n	b7ac0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   b7b08:	a92a      	add	r1, sp, #168	; 0xa8
   b7b0a:	a807      	add	r0, sp, #28
   b7b0c:	f7ff fc78 	bl	b7400 <_ZNK14LocalTimeValue3hmsEv>
   b7b10:	a907      	add	r1, sp, #28
   b7b12:	4620      	mov	r0, r4
   b7b14:	f7ff f98e 	bl	b6e34 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   b7b18:	2800      	cmp	r0, #0
   b7b1a:	da0d      	bge.n	b7b38 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   b7b1c:	f104 011c 	add.w	r1, r4, #28
   b7b20:	a807      	add	r0, sp, #28
   b7b22:	f7ff f97f 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b7b26:	a907      	add	r1, sp, #28
   b7b28:	a810      	add	r0, sp, #64	; 0x40
   b7b2a:	f7ff ff15 	bl	b7958 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   b7b2e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   b7b32:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   b7b36:	e094      	b.n	b7c62 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   b7b38:	d16c      	bne.n	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   b7b3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b7b3c:	2b01      	cmp	r3, #1
   b7b3e:	d025      	beq.n	b7b8c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   b7b40:	2b02      	cmp	r3, #2
   b7b42:	d167      	bne.n	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   b7b44:	f104 011c 	add.w	r1, r4, #28
   b7b48:	a804      	add	r0, sp, #16
   b7b4a:	f7ff f96b 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b7b4e:	f104 0624 	add.w	r6, r4, #36	; 0x24
        return compareTo(other) <= 0;
   b7b52:	4631      	mov	r1, r6
   b7b54:	a804      	add	r0, sp, #16
   b7b56:	f7ff f948 	bl	b6dea <_ZNK12LocalTimeHMS9compareToERKS_>
   b7b5a:	2800      	cmp	r0, #0
   b7b5c:	dc5a      	bgt.n	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   b7b5e:	a904      	add	r1, sp, #16
   b7b60:	a807      	add	r0, sp, #28
   b7b62:	f7ff f95f 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b7b66:	a907      	add	r1, sp, #28
   b7b68:	a810      	add	r0, sp, #64	; 0x40
   b7b6a:	f7ff fef5 	bl	b7958 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   b7b6e:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
   b7b72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b7b74:	4299      	cmp	r1, r3
   b7b76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   b7b78:	eb72 0303 	sbcs.w	r3, r2, r3
   b7b7c:	db41      	blt.n	b7c02 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   b7b7e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b7b82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b7b84:	4413      	add	r3, r2
   b7b86:	f88d 3014 	strb.w	r3, [sp, #20]
   b7b8a:	e7e2      	b.n	b7b52 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   b7b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7b8e:	f994 6021 	ldrsb.w	r6, [r4, #33]	; 0x21
   b7b92:	fb96 f2f3 	sdiv	r2, r6, r3
   b7b96:	fb03 6612 	mls	r6, r3, r2, r6
                        tempConv.time += increment * 60;
   b7b9a:	223c      	movs	r2, #60	; 0x3c
   b7b9c:	4353      	muls	r3, r2
   b7b9e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b7ba0:	9929      	ldr	r1, [sp, #164]	; 0xa4
   b7ba2:	18d2      	adds	r2, r2, r3
   b7ba4:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
                        tempConv.convert();
   b7ba8:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   b7baa:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   b7bae:	f7ff fe13 	bl	b77d8 <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   b7bb2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   b7bb6:	a907      	add	r1, sp, #28
   b7bb8:	a804      	add	r0, sp, #16
   b7bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b7bbe:	f003 fc07 	bl	bb3d0 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   b7bc2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b7bc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b7bc6:	1b9b      	subs	r3, r3, r6
   b7bc8:	fb93 f1f2 	sdiv	r1, r3, r2
   b7bcc:	fb02 3311 	mls	r3, r2, r1, r3
   b7bd0:	9a08      	ldr	r2, [sp, #32]
   b7bd2:	1ad3      	subs	r3, r2, r3
   b7bd4:	9308      	str	r3, [sp, #32]
    return mktime(pTimeInfo);
   b7bd6:	a807      	add	r0, sp, #28
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   b7bd8:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   b7bdc:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   b7bde:	f003 fc07 	bl	bb3f0 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   b7be2:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   b7be6:	a810      	add	r0, sp, #64	; 0x40
   b7be8:	f7ff fdf6 	bl	b77d8 <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b7bec:	a92a      	add	r1, sp, #168	; 0xa8
   b7bee:	a804      	add	r0, sp, #16
   b7bf0:	f7ff fc12 	bl	b7418 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   b7bf4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   b7bf8:	a804      	add	r0, sp, #16
   b7bfa:	f7ff f8f6 	bl	b6dea <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   b7bfe:	2800      	cmp	r0, #0
   b7c00:	da08      	bge.n	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   b7c02:	a82a      	add	r0, sp, #168	; 0xa8
   b7c04:	f7ff fc27 	bl	b7456 <_ZNK14LocalTimeValue3ymdEv>
   b7c08:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   b7c0a:	4620      	mov	r0, r4
   b7c0c:	f7ff fa85 	bl	b711a <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   b7c10:	2800      	cmp	r0, #0
   b7c12:	d18c      	bne.n	b7b2e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   b7c14:	4641      	mov	r1, r8
   b7c16:	a807      	add	r0, sp, #28
   b7c18:	f7ff f9d6 	bl	b6fc8 <_ZN12LocalTimeHMSC1EPKc>
   b7c1c:	a907      	add	r1, sp, #28
   b7c1e:	a810      	add	r0, sp, #64	; 0x40
   b7c20:	f7ff febe 	bl	b79a0 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   b7c24:	e74e      	b.n	b7ac4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   b7c26:	992e      	ldr	r1, [sp, #184]	; 0xb8
   b7c28:	982f      	ldr	r0, [sp, #188]	; 0xbc
   b7c2a:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   b7c2e:	3101      	adds	r1, #1
   b7c30:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b7c34:	f7ff fece 	bl	b79d4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   b7c38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b7c3a:	4298      	cmp	r0, r3
   b7c3c:	d1ea      	bne.n	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   b7c3e:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   b7c42:	a807      	add	r0, sp, #28
   b7c44:	f7ff f8ee 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b7c48:	a907      	add	r1, sp, #28
   b7c4a:	a810      	add	r0, sp, #64	; 0x40
   b7c4c:	f7ff fe84 	bl	b7958 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   b7c50:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   b7c54:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   b7c58:	4290      	cmp	r0, r2
   b7c5a:	4199      	sbcs	r1, r3
   b7c5c:	dada      	bge.n	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   b7c5e:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
                        conv.convert();
   b7c62:	4628      	mov	r0, r5
   b7c64:	f7ff fdb8 	bl	b77d8 <_ZN16LocalTimeConvert7convertEv>
                        return true;
   b7c68:	e02b      	b.n	b7cc2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   b7c6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   b7c6c:	2e00      	cmp	r6, #0
   b7c6e:	da08      	bge.n	b7c82 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   b7c70:	992e      	ldr	r1, [sp, #184]	; 0xb8
   b7c72:	982f      	ldr	r0, [sp, #188]	; 0xbc
   b7c74:	3101      	adds	r1, #1
   b7c76:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b7c7a:	f7ff fd4f 	bl	b771c <_ZN9LocalTime14lastDayOfMonthEii>
   b7c7e:	4406      	add	r6, r0
   b7c80:	3601      	adds	r6, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   b7c82:	a82a      	add	r0, sp, #168	; 0xa8
   b7c84:	f7ff fbe7 	bl	b7456 <_ZNK14LocalTimeValue3ymdEv>
   b7c88:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   b7c8c:	d1c2      	bne.n	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   b7c8e:	a92a      	add	r1, sp, #168	; 0xa8
   b7c90:	a807      	add	r0, sp, #28
   b7c92:	f7ff fbb5 	bl	b7400 <_ZNK14LocalTimeValue3hmsEv>
   b7c96:	a907      	add	r1, sp, #28
   b7c98:	4620      	mov	r0, r4
   b7c9a:	f7ff f8cb 	bl	b6e34 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   b7c9e:	2800      	cmp	r0, #0
   b7ca0:	dcb8      	bgt.n	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   b7ca2:	e7cc      	b.n	b7c3e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   b7ca4:	a92a      	add	r1, sp, #168	; 0xa8
   b7ca6:	a807      	add	r0, sp, #28
   b7ca8:	f7ff fbaa 	bl	b7400 <_ZNK14LocalTimeValue3hmsEv>
   b7cac:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   b7cb0:	a807      	add	r0, sp, #28
   b7cb2:	9101      	str	r1, [sp, #4]
   b7cb4:	f7ff f899 	bl	b6dea <_ZNK12LocalTimeHMS9compareToERKS_>
   b7cb8:	2800      	cmp	r0, #0
   b7cba:	9901      	ldr	r1, [sp, #4]
   b7cbc:	dcaa      	bgt.n	b7c14 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   b7cbe:	e7c0      	b.n	b7c42 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   b7cc0:	2700      	movs	r7, #0
class LocalTimeConvert {
   b7cc2:	a811      	add	r0, sp, #68	; 0x44
   b7cc4:	f7fe ffe2 	bl	b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   b7cc8:	4638      	mov	r0, r7
   b7cca:	b04c      	add	sp, #304	; 0x130
   b7ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7cd0:	000c0509 	.word	0x000c0509

000b7cd4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b7cd6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7cd8:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7cda:	4668      	mov	r0, sp
   b7cdc:	f7ff f87c 	bl	b6dd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b7ce0:	466a      	mov	r2, sp
   b7ce2:	4629      	mov	r1, r5
   b7ce4:	4620      	mov	r0, r4
   b7ce6:	f004 fb23 	bl	bc330 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b7cea:	a801      	add	r0, sp, #4
   b7cec:	f7fd fb7a 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7cf0:	4620      	mov	r0, r4
   b7cf2:	b003      	add	sp, #12
   b7cf4:	bd30      	pop	{r4, r5, pc}

000b7cf6 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7cf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b7cf8:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7cfa:	4604      	mov	r4, r0
   b7cfc:	4668      	mov	r0, sp
   b7cfe:	f7ff f86b 	bl	b6dd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b7d02:	466a      	mov	r2, sp
   b7d04:	4629      	mov	r1, r5
   b7d06:	4620      	mov	r0, r4
   b7d08:	f004 faee 	bl	bc2e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7d0c:	a801      	add	r0, sp, #4
   b7d0e:	f7fd fb69 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7d12:	4620      	mov	r0, r4
   b7d14:	b003      	add	sp, #12
   b7d16:	bd30      	pop	{r4, r5, pc}

000b7d18 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b7d1a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7d1c:	4604      	mov	r4, r0
   b7d1e:	4668      	mov	r0, sp
   b7d20:	f7ff f85a 	bl	b6dd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b7d24:	466a      	mov	r2, sp
   b7d26:	4629      	mov	r1, r5
   b7d28:	4620      	mov	r0, r4
   b7d2a:	f004 fa86 	bl	bc23a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7d2e:	a801      	add	r0, sp, #4
   b7d30:	f7fd fb58 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7d34:	4620      	mov	r0, r4
   b7d36:	b003      	add	sp, #12
   b7d38:	bd30      	pop	{r4, r5, pc}

000b7d3a <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   b7d3a:	b510      	push	{r4, lr}
   b7d3c:	4604      	mov	r4, r0
   b7d3e:	3038      	adds	r0, #56	; 0x38
   b7d40:	f005 fec8 	bl	bdad4 <_ZN6StringD1Ev>
      }
   b7d44:	f104 0010 	add.w	r0, r4, #16
   b7d48:	f7fc fe32 	bl	b49b0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EED1Ev>
   b7d4c:	1d20      	adds	r0, r4, #4
   b7d4e:	f7fc fe2f 	bl	b49b0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EED1Ev>
   b7d52:	4620      	mov	r0, r4
   b7d54:	bd10      	pop	{r4, pc}

000b7d56 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b7d56:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7d58:	e9d1 3600 	ldrd	r3, r6, [r1]
   b7d5c:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b7d5e:	2300      	movs	r3, #0
   b7d60:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b7d64:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b7d66:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b7d68:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b7d6a:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b7d6c:	f7fe ffc1 	bl	b6cf2 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b7d70:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b7d74:	4406      	add	r6, r0
   b7d76:	60a6      	str	r6, [r4, #8]
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b7d78:	e9d5 1500 	ldrd	r1, r5, [r5]
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   b7d7c:	4602      	mov	r2, r0
      : _M_current(__i) { }
   b7d7e:	460b      	mov	r3, r1
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b7d80:	42ab      	cmp	r3, r5
   b7d82:	d005      	beq.n	b7d90 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b7d84:	b10a      	cbz	r2, b7d8a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   b7d86:	681e      	ldr	r6, [r3, #0]
   b7d88:	6016      	str	r6, [r2, #0]
   b7d8a:	3204      	adds	r2, #4
   b7d8c:	3304      	adds	r3, #4
   b7d8e:	e7f7      	b.n	b7d80 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   b7d90:	1a5b      	subs	r3, r3, r1
   b7d92:	4418      	add	r0, r3
   b7d94:	6060      	str	r0, [r4, #4]
      }
   b7d96:	4620      	mov	r0, r4
   b7d98:	bd70      	pop	{r4, r5, r6, pc}

000b7d9a <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   b7d9a:	b538      	push	{r3, r4, r5, lr}
   b7d9c:	460d      	mov	r5, r1
   b7d9e:	f811 3b04 	ldrb.w	r3, [r1], #4
   b7da2:	4604      	mov	r4, r0
   b7da4:	f800 3b04 	strb.w	r3, [r0], #4
   b7da8:	f7ff ffd5 	bl	b7d56 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   b7dac:	f105 0110 	add.w	r1, r5, #16
   b7db0:	f104 0010 	add.w	r0, r4, #16
   b7db4:	f7ff ffcf 	bl	b7d56 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   b7db8:	4620      	mov	r0, r4
   b7dba:	bd38      	pop	{r3, r4, r5, pc}

000b7dbc <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   b7dbc:	b538      	push	{r3, r4, r5, lr}
   b7dbe:	4604      	mov	r4, r0
   b7dc0:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   b7dc2:	f7ff ffea 	bl	b7d9a <_ZN23LocalTimeRestrictedDateC1ERKS_>
   b7dc6:	f105 011c 	add.w	r1, r5, #28
   b7dca:	f104 001c 	add.w	r0, r4, #28
   b7dce:	f7ff f829 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
   b7dd2:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b7dd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7dda:	f7ff f823 	bl	b6e24 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   b7dde:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   b7de0:	62e3      	str	r3, [r4, #44]	; 0x2c
   b7de2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   b7de4:	6323      	str	r3, [r4, #48]	; 0x30
   b7de6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   b7de8:	6363      	str	r3, [r4, #52]	; 0x34
   b7dea:	f105 0138 	add.w	r1, r5, #56	; 0x38
   b7dee:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b7df2:	f005 ff05 	bl	bdc00 <_ZN6StringC1ERKS_>
   b7df6:	6cab      	ldr	r3, [r5, #72]	; 0x48
   b7df8:	64a3      	str	r3, [r4, #72]	; 0x48
   b7dfa:	4620      	mov	r0, r4
   b7dfc:	bd38      	pop	{r3, r4, r5, pc}

000b7dfe <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   b7dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    time_t closestTime = 0;
   b7e02:	2500      	movs	r5, #0
   b7e04:	f8d0 8020 	ldr.w	r8, [r0, #32]
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   b7e08:	b0d1      	sub	sp, #324	; 0x144
   b7e0a:	4681      	mov	r9, r0
   b7e0c:	460c      	mov	r4, r1
   b7e0e:	4617      	mov	r7, r2
    time_t closestTime = 0;
   b7e10:	462e      	mov	r6, r5
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   b7e12:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   b7e16:	4598      	cmp	r8, r3
   b7e18:	d029      	beq.n	b7e6e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   b7e1a:	4641      	mov	r1, r8
   b7e1c:	a801      	add	r0, sp, #4
   b7e1e:	f7ff ffcd 	bl	b7dbc <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   b7e22:	68bb      	ldr	r3, [r7, #8]
   b7e24:	b90b      	cbnz	r3, b7e2a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   b7e26:	f006 fd05 	bl	be834 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7e2a:	68fb      	ldr	r3, [r7, #12]
   b7e2c:	a901      	add	r1, sp, #4
   b7e2e:	4638      	mov	r0, r7
   b7e30:	4798      	blx	r3
        if (filter(item)) {
   b7e32:	b1b0      	cbz	r0, b7e62 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   b7e34:	4621      	mov	r1, r4
   b7e36:	a814      	add	r0, sp, #80	; 0x50
   b7e38:	f7ff fb50 	bl	b74dc <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   b7e3c:	a914      	add	r1, sp, #80	; 0x50
   b7e3e:	a801      	add	r0, sp, #4
   b7e40:	f7ff fe26 	bl	b7a90 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   b7e44:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   b7e48:	b110      	cbz	r0, b7e50 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   b7e4a:	ea55 0106 	orrs.w	r1, r5, r6
   b7e4e:	d003      	beq.n	b7e58 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   b7e50:	42aa      	cmp	r2, r5
   b7e52:	eb73 0106 	sbcs.w	r1, r3, r6
   b7e56:	da01      	bge.n	b7e5c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   b7e58:	4615      	mov	r5, r2
   b7e5a:	461e      	mov	r6, r3
class LocalTimeConvert {
   b7e5c:	a815      	add	r0, sp, #84	; 0x54
   b7e5e:	f7fe ff15 	bl	b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   b7e62:	a801      	add	r0, sp, #4
   b7e64:	f7ff ff69 	bl	b7d3a <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b7e68:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   b7e6c:	e7d1      	b.n	b7e12 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   b7e6e:	ea55 0306 	orrs.w	r3, r5, r6
   b7e72:	d008      	beq.n	b7e86 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   b7e74:	4620      	mov	r0, r4
        conv.time = closestTime;
   b7e76:	e9c4 5618 	strd	r5, r6, [r4, #96]	; 0x60
        conv.convert();
   b7e7a:	f7ff fcad 	bl	b77d8 <_ZN16LocalTimeConvert7convertEv>
        return true;
   b7e7e:	2001      	movs	r0, #1
}
   b7e80:	b051      	add	sp, #324	; 0x144
   b7e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   b7e86:	2000      	movs	r0, #0
   b7e88:	e7fa      	b.n	b7e80 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000b7e8c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   b7e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   b7e8e:	4b08      	ldr	r3, [pc, #32]	; (b7eb0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   b7e90:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   b7e92:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   b7e94:	4b07      	ldr	r3, [pc, #28]	; (b7eb4 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   b7e96:	9302      	str	r3, [sp, #8]
   b7e98:	f7ff ffb1 	bl	b7dfe <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   b7e9c:	9b02      	ldr	r3, [sp, #8]
   b7e9e:	4604      	mov	r4, r0
   b7ea0:	b11b      	cbz	r3, b7eaa <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7ea2:	4669      	mov	r1, sp
   b7ea4:	2203      	movs	r2, #3
   b7ea6:	4608      	mov	r0, r1
   b7ea8:	4798      	blx	r3
}
   b7eaa:	4620      	mov	r0, r4
   b7eac:	b004      	add	sp, #16
   b7eae:	bd10      	pop	{r4, pc}
   b7eb0:	000b6c6b 	.word	0x000b6c6b
   b7eb4:	000b6ce9 	.word	0x000b6ce9

000b7eb8 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>:
bool LocalTimeSchedule::isScheduledTime(LocalTimeConvert &conv, time_t timeNow) {
   b7eb8:	b570      	push	{r4, r5, r6, lr}
   b7eba:	4604      	mov	r4, r0
   b7ebc:	460d      	mov	r5, r1
    if (nextTime != 0 && nextTime <= timeNow) {
   b7ebe:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   b7ec2:	ea50 0601 	orrs.w	r6, r0, r1
   b7ec6:	d012      	beq.n	b7eee <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x36>
   b7ec8:	4282      	cmp	r2, r0
   b7eca:	418b      	sbcs	r3, r1
   b7ecc:	db0f      	blt.n	b7eee <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x36>
        nextTime = 0;
   b7ece:	2200      	movs	r2, #0
   b7ed0:	2300      	movs	r3, #0
   b7ed2:	e9c4 2306 	strd	r2, r3, [r4, #24]
        result = true;
   b7ed6:	2601      	movs	r6, #1
    if (getNextScheduledTime(conv)) {
   b7ed8:	4629      	mov	r1, r5
   b7eda:	4620      	mov	r0, r4
   b7edc:	f7ff ffd6 	bl	b7e8c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   b7ee0:	b118      	cbz	r0, b7eea <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x32>
        nextTime = conv.time;
   b7ee2:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   b7ee6:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
   b7eea:	4630      	mov	r0, r6
   b7eec:	bd70      	pop	{r4, r5, r6, pc}
    bool result = false;
   b7eee:	2600      	movs	r6, #0
   b7ef0:	e7f2      	b.n	b7ed8 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x20>

000b7ef2 <_ZN17LocalTimeSchedule15isScheduledTimeEv>:
bool LocalTimeSchedule::isScheduledTime() {
   b7ef2:	b530      	push	{r4, r5, lr}
   b7ef4:	b0bd      	sub	sp, #244	; 0xf4
   b7ef6:	4605      	mov	r5, r0
    if (!Time.isValid()) {
   b7ef8:	f006 f96e 	bl	be1d8 <_ZN9TimeClass7isValidEv>
   b7efc:	4604      	mov	r4, r0
   b7efe:	b1c0      	cbz	r0, b7f32 <_ZN17LocalTimeSchedule15isScheduledTimeEv+0x40>
   b7f00:	2306      	movs	r3, #6
   b7f02:	a801      	add	r0, sp, #4
   b7f04:	9300      	str	r3, [sp, #0]
   b7f06:	f7ff f99d 	bl	b7244 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b7f0a:	f006 f982 	bl	be212 <_ZN9TimeClass3nowEv>
   b7f0e:	17c2      	asrs	r2, r0, #31
   b7f10:	e9cd 0218 	strd	r0, r2, [sp, #96]	; 0x60
    conv.withCurrentTime().convert();
   b7f14:	4668      	mov	r0, sp
   b7f16:	f7ff fc5f 	bl	b77d8 <_ZN16LocalTimeConvert7convertEv>
    return isScheduledTime(conv, Time.now());
   b7f1a:	f006 f97a 	bl	be212 <_ZN9TimeClass3nowEv>
   b7f1e:	4669      	mov	r1, sp
   b7f20:	4602      	mov	r2, r0
   b7f22:	17c3      	asrs	r3, r0, #31
   b7f24:	4628      	mov	r0, r5
   b7f26:	f7ff ffc7 	bl	b7eb8 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>
   b7f2a:	4604      	mov	r4, r0
class LocalTimeConvert {
   b7f2c:	a801      	add	r0, sp, #4
   b7f2e:	f7fe fead 	bl	b6c8c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   b7f32:	4620      	mov	r0, r4
   b7f34:	b03d      	add	sp, #244	; 0xf4
   b7f36:	bd30      	pop	{r4, r5, pc}

000b7f38 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b7f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7f3c:	e9d0 6800 	ldrd	r6, r8, [r0]
   b7f40:	4b2d      	ldr	r3, [pc, #180]	; (b7ff8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc0>)
   b7f42:	eba8 0406 	sub.w	r4, r8, r6
   b7f46:	10a4      	asrs	r4, r4, #2
   b7f48:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b7f4a:	4b2c      	ldr	r3, [pc, #176]	; (b7ffc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>)
   b7f4c:	429c      	cmp	r4, r3
   b7f4e:	460f      	mov	r7, r1
   b7f50:	4605      	mov	r5, r0
   b7f52:	4611      	mov	r1, r2
   b7f54:	d102      	bne.n	b7f5c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b7f56:	482a      	ldr	r0, [pc, #168]	; (b8000 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc8>)
   b7f58:	f006 fc69 	bl	be82e <_ZSt20__throw_length_errorPKc>
   b7f5c:	2c01      	cmp	r4, #1
   b7f5e:	4622      	mov	r2, r4
   b7f60:	bf38      	it	cc
   b7f62:	2201      	movcc	r2, #1
   b7f64:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b7f66:	eba7 0a06 	sub.w	sl, r7, r6

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b7f6a:	d21d      	bcs.n	b7fa8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b7f6c:	b1f4      	cbz	r4, b7fac <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
   b7f6e:	429c      	cmp	r4, r3
   b7f70:	bf28      	it	cs
   b7f72:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7f74:	204c      	movs	r0, #76	; 0x4c
   b7f76:	4360      	muls	r0, r4
   b7f78:	9101      	str	r1, [sp, #4]
   b7f7a:	f7fc f88c 	bl	b4096 <_Znwj>
   b7f7e:	9901      	ldr	r1, [sp, #4]
   b7f80:	4681      	mov	r9, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7f82:	eb19 000a 	adds.w	r0, r9, sl
   b7f86:	d001      	beq.n	b7f8c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
   b7f88:	f7ff ff18 	bl	b7dbc <_ZN21LocalTimeScheduleItemC1ERKS_>
   b7f8c:	4648      	mov	r0, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7f8e:	46b2      	mov	sl, r6
   b7f90:	4557      	cmp	r7, sl
   b7f92:	f100 0b4c 	add.w	fp, r0, #76	; 0x4c
   b7f96:	d00b      	beq.n	b7fb0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   b7f98:	b110      	cbz	r0, b7fa0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
   b7f9a:	4651      	mov	r1, sl
   b7f9c:	f7ff ff0e 	bl	b7dbc <_ZN21LocalTimeScheduleItemC1ERKS_>
   b7fa0:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   b7fa4:	4658      	mov	r0, fp
   b7fa6:	e7f3      	b.n	b7f90 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x58>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b7fa8:	461c      	mov	r4, r3
   b7faa:	e7e3      	b.n	b7f74 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b7fac:	46a1      	mov	r9, r4
   b7fae:	e7e8      	b.n	b7f82 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b7fb0:	465f      	mov	r7, fp
   b7fb2:	45c2      	cmp	sl, r8
   b7fb4:	d007      	beq.n	b7fc6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8e>
   b7fb6:	4651      	mov	r1, sl
   b7fb8:	4638      	mov	r0, r7
   b7fba:	f7ff feff 	bl	b7dbc <_ZN21LocalTimeScheduleItemC1ERKS_>
   b7fbe:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   b7fc2:	374c      	adds	r7, #76	; 0x4c
   b7fc4:	e7f5      	b.n	b7fb2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7fc6:	46b2      	mov	sl, r6
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b7fc8:	45c2      	cmp	sl, r8
   b7fca:	d005      	beq.n	b7fd8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
      __pointer->~_Tp();
   b7fcc:	4650      	mov	r0, sl
   b7fce:	f7ff feb4 	bl	b7d3a <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   b7fd2:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   b7fd6:	e7f7      	b.n	b7fc8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	if (__p)
   b7fd8:	b126      	cbz	r6, b7fe4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xac>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b7fda:	68a9      	ldr	r1, [r5, #8]
	::operator delete(__p
   b7fdc:	4630      	mov	r0, r6
   b7fde:	1b89      	subs	r1, r1, r6
   b7fe0:	f7fc f85d 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b7fe4:	204c      	movs	r0, #76	; 0x4c
   b7fe6:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   b7fea:	e9c5 9700 	strd	r9, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b7fee:	60ac      	str	r4, [r5, #8]
    }
   b7ff0:	b003      	add	sp, #12
   b7ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7ff6:	bf00      	nop
   b7ff8:	286bca1b 	.word	0x286bca1b
   b7ffc:	01af286b 	.word	0x01af286b
   b8000:	000c0534 	.word	0x000c0534

000b8004 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b8004:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b8006:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b800a:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b800c:	4604      	mov	r4, r0
   b800e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b8010:	d007      	beq.n	b8022 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8012:	b113      	cbz	r3, b801a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   b8014:	4618      	mov	r0, r3
   b8016:	f7ff fed1 	bl	b7dbc <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   b801a:	6863      	ldr	r3, [r4, #4]
   b801c:	334c      	adds	r3, #76	; 0x4c
   b801e:	6063      	str	r3, [r4, #4]
      }
   b8020:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b8022:	4619      	mov	r1, r3
   b8024:	f7ff ff88 	bl	b7f38 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b8028:	e7fa      	b.n	b8020 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000b802a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI12LocalTimeYMDEEPT_PKS4_S7_S5_>:
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b802a:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b802c:	b510      	push	{r4, lr}
   b802e:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b8030:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b8034:	d005      	beq.n	b8042 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI12LocalTimeYMDEEPT_PKS4_S7_S5_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8036:	4601      	mov	r1, r0
   b8038:	4622      	mov	r2, r4
   b803a:	4618      	mov	r0, r3
   b803c:	f007 f912 	bl	bf264 <memmove>
   b8040:	4603      	mov	r3, r0
	  return __result + _Num;
	}
   b8042:	1918      	adds	r0, r3, r4
   b8044:	bd10      	pop	{r4, pc}

000b8046 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b8046:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b8048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b804c:	4604      	mov	r4, r0
   b804e:	460e      	mov	r6, r1
      if (&__x != this)
   b8050:	d021      	beq.n	b8096 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x50>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b8052:	e9d1 5800 	ldrd	r5, r8, [r1]
			 - this->_M_impl._M_start); }
   b8056:	6802      	ldr	r2, [r0, #0]
   b8058:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b805a:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   b805e:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b8060:	429f      	cmp	r7, r3
   b8062:	d91a      	bls.n	b809a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x54>
	  pointer __result = this->_M_allocate(__n);
   b8064:	10b8      	asrs	r0, r7, #2
   b8066:	f7fe fe44 	bl	b6cf2 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   b806a:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b806c:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b806e:	45a8      	cmp	r8, r5
   b8070:	d005      	beq.n	b807e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x38>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b8072:	b10b      	cbz	r3, b8078 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x32>
   b8074:	682a      	ldr	r2, [r5, #0]
   b8076:	601a      	str	r2, [r3, #0]
   b8078:	3304      	adds	r3, #4
   b807a:	3504      	adds	r5, #4
   b807c:	e7f7      	b.n	b806e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x28>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b807e:	6820      	ldr	r0, [r4, #0]
			    - this->_M_impl._M_start);
   b8080:	68a1      	ldr	r1, [r4, #8]
   b8082:	1a09      	subs	r1, r1, r0
	      _M_deallocate(this->_M_impl._M_start,
   b8084:	1089      	asrs	r1, r1, #2
   b8086:	f7fe fe41 	bl	b6d0c <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
	      this->_M_impl._M_start = __tmp;
   b808a:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b808c:	443e      	add	r6, r7
   b808e:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b8090:	6823      	ldr	r3, [r4, #0]
   b8092:	443b      	add	r3, r7
   b8094:	6063      	str	r3, [r4, #4]
    }
   b8096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b809a:	6843      	ldr	r3, [r0, #4]
   b809c:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b809e:	429f      	cmp	r7, r3
   b80a0:	d804      	bhi.n	b80ac <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x66>
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
   b80a2:	4641      	mov	r1, r8
   b80a4:	4628      	mov	r0, r5
   b80a6:	f7ff ffc0 	bl	b802a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI12LocalTimeYMDEEPT_PKS4_S7_S5_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b80aa:	e7f1      	b.n	b8090 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x4a>
   b80ac:	18e9      	adds	r1, r5, r3
   b80ae:	4628      	mov	r0, r5
   b80b0:	f7ff ffbb 	bl	b802a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI12LocalTimeYMDEEPT_PKS4_S7_S5_>
   b80b4:	e9d4 3200 	ldrd	r3, r2, [r4]
   b80b8:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b80ba:	6833      	ldr	r3, [r6, #0]
   b80bc:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   b80be:	6871      	ldr	r1, [r6, #4]
   b80c0:	4299      	cmp	r1, r3
   b80c2:	d0e5      	beq.n	b8090 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x4a>
   b80c4:	b10a      	cbz	r2, b80ca <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x84>
   b80c6:	6818      	ldr	r0, [r3, #0]
   b80c8:	6010      	str	r0, [r2, #0]
   b80ca:	3304      	adds	r3, #4
   b80cc:	3204      	adds	r2, #4
   b80ce:	e7f7      	b.n	b80c0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0+0x7a>

000b80d0 <_ZN14LocalTimeRangeaSERKS_.isra.0>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   b80d0:	b538      	push	{r3, r4, r5, lr}
   b80d2:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   b80d4:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   b80d8:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   b80da:	f800 3b04 	strb.w	r3, [r0], #4
   b80de:	f7ff ffb2 	bl	b8046 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0>
   b80e2:	f105 0110 	add.w	r1, r5, #16
   b80e6:	f104 0010 	add.w	r0, r4, #16
   b80ea:	f7ff ffac 	bl	b8046 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_.isra.0>
class LocalTimeRange : public LocalTimeRestrictedDate {
   b80ee:	f105 011c 	add.w	r1, r5, #28
   b80f2:	f104 001c 	add.w	r0, r4, #28
   b80f6:	f7fe fe18 	bl	b6d2a <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b80fa:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b80fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8106:	f7fe be10 	b.w	b6d2a <_ZN12LocalTimeHMSaSERKS_.isra.0>

000b810a <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   b810a:	b530      	push	{r4, r5, lr}
   b810c:	b097      	sub	sp, #92	; 0x5c
   b810e:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   b8110:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   b8112:	9201      	str	r2, [sp, #4]
   b8114:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   b8116:	f7fe ff63 	bl	b6fe0 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   b811a:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   b811c:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   b811e:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   b8120:	a803      	add	r0, sp, #12
    item.increment = increment;
   b8122:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   b8124:	f7ff ffd4 	bl	b80d0 <_ZN14LocalTimeRangeaSERKS_.isra.0>
    scheduleItems.push_back(item);
   b8128:	a903      	add	r1, sp, #12
   b812a:	f104 0020 	add.w	r0, r4, #32
   b812e:	f7ff ff69 	bl	b8004 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   b8132:	a803      	add	r0, sp, #12
   b8134:	f7ff fe01 	bl	b7d3a <_ZN21LocalTimeScheduleItemD1Ev>
}
   b8138:	4620      	mov	r0, r4
   b813a:	b017      	add	sp, #92	; 0x5c
   b813c:	bd30      	pop	{r4, r5, pc}

000b813e <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b813e:	4770      	bx	lr

000b8140 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b8140:	b510      	push	{r4, lr}
}
   b8142:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b8144:	4604      	mov	r4, r0
}
   b8146:	f7fb ffaa 	bl	b409e <_ZdlPvj>
   b814a:	4620      	mov	r0, r4
   b814c:	bd10      	pop	{r4, pc}

000b814e <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b814e:	6803      	ldr	r3, [r0, #0]
   b8150:	b2c9      	uxtb	r1, r1
   b8152:	689b      	ldr	r3, [r3, #8]
   b8154:	4718      	bx	r3
	...

000b8158 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b8158:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b815a:	4d03      	ldr	r5, [pc, #12]	; (b8168 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b815c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b8160:	e9c0 5100 	strd	r5, r1, [r0]
}
   b8164:	bd30      	pop	{r4, r5, pc}
   b8166:	bf00      	nop
   b8168:	000c05c4 	.word	0x000c05c4

000b816c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b816c:	6840      	ldr	r0, [r0, #4]
   b816e:	f003 bed5 	b.w	bbf1c <_ZN7TwoWire5beginEv>

000b8172 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b8172:	b510      	push	{r4, lr}
   b8174:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b8176:	6800      	ldr	r0, [r0, #0]
   b8178:	f003 ff2b 	bl	bbfd2 <_ZN7TwoWire6unlockEv>
   b817c:	4620      	mov	r0, r4
   b817e:	bd10      	pop	{r4, pc}

000b8180 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   b8180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8184:	b08a      	sub	sp, #40	; 0x28
   b8186:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   b8188:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b818a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b818c:	f003 ff18 	bl	bbfc0 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   b8190:	221e      	movs	r2, #30
   b8192:	2100      	movs	r1, #0
   b8194:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   b8196:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   b8198:	f007 f87e 	bl	bf298 <memset>
		size_t framAddr = 0;
   b819c:	2600      	movs	r6, #0

		while(totalLen > 0) {
   b819e:	b1ef      	cbz	r7, b81dc <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   b81a0:	6823      	ldr	r3, [r4, #0]
   b81a2:	2f1e      	cmp	r7, #30
   b81a4:	46b8      	mov	r8, r7
   b81a6:	bf28      	it	cs
   b81a8:	f04f 081e 	movcs.w	r8, #30
   b81ac:	68dd      	ldr	r5, [r3, #12]
   b81ae:	aa02      	add	r2, sp, #8
   b81b0:	4643      	mov	r3, r8
   b81b2:	4631      	mov	r1, r6
   b81b4:	4620      	mov	r0, r4
   b81b6:	47a8      	blx	r5
			if (!result) {
   b81b8:	4605      	mov	r5, r0
   b81ba:	b958      	cbnz	r0, b81d4 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   b81bc:	480a      	ldr	r0, [pc, #40]	; (b81e8 <_ZN6MB85RC5eraseEv+0x68>)
   b81be:	490b      	ldr	r1, [pc, #44]	; (b81ec <_ZN6MB85RC5eraseEv+0x6c>)
   b81c0:	4632      	mov	r2, r6
   b81c2:	f7fb ff83 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				return false;
   b81c6:	a801      	add	r0, sp, #4
   b81c8:	f7ff ffd3 	bl	b8172 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   b81cc:	4628      	mov	r0, r5
   b81ce:	b00a      	add	sp, #40	; 0x28
   b81d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   b81d4:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   b81d8:	4446      	add	r6, r8
		while(totalLen > 0) {
   b81da:	e7e0      	b.n	b819e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   b81dc:	a801      	add	r0, sp, #4
   b81de:	f7ff ffc8 	bl	b8172 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   b81e2:	2501      	movs	r5, #1
   b81e4:	e7f2      	b.n	b81cc <_ZN6MB85RC5eraseEv+0x4c>
   b81e6:	bf00      	nop
   b81e8:	2003e658 	.word	0x2003e658
   b81ec:	000c0590 	.word	0x000c0590

000b81f0 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b81f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b81f4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b81f6:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b81f8:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b81fa:	460d      	mov	r5, r1
   b81fc:	4616      	mov	r6, r2
   b81fe:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b8200:	f003 fede 	bl	bbfc0 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b8204:	b1a7      	cbz	r7, b8230 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b8206:	68e1      	ldr	r1, [r4, #12]
   b8208:	6860      	ldr	r0, [r4, #4]
   b820a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b820e:	f003 feb8 	bl	bbf82 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b8212:	0a29      	lsrs	r1, r5, #8
   b8214:	6860      	ldr	r0, [r4, #4]
   b8216:	f7ff ff9a 	bl	b814e <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b821a:	4629      	mov	r1, r5
   b821c:	6860      	ldr	r0, [r4, #4]
   b821e:	f7ff ff96 	bl	b814e <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b8222:	6860      	ldr	r0, [r4, #4]
   b8224:	2100      	movs	r1, #0
   b8226:	f003 fec7 	bl	bbfb8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b822a:	b148      	cbz	r0, b8240 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b822c:	2400      	movs	r4, #0
   b822e:	e000      	b.n	b8232 <_ZN6MB85RC8readDataEjPhj+0x42>
   b8230:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b8232:	a801      	add	r0, sp, #4
   b8234:	f7ff ff9d 	bl	b8172 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b8238:	4620      	mov	r0, r4
   b823a:	b003      	add	sp, #12
   b823c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b8240:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b8242:	7b21      	ldrb	r1, [r4, #12]
   b8244:	6860      	ldr	r0, [r4, #4]
   b8246:	46b8      	mov	r8, r7
   b8248:	bf28      	it	cs
   b824a:	f04f 0820 	movcs.w	r8, #32
   b824e:	2301      	movs	r3, #1
   b8250:	4642      	mov	r2, r8
   b8252:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b8256:	f003 fe7e 	bl	bbf56 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b825a:	f006 fa59 	bl	be710 <_Z19__fetch_global_Wirev>
   b825e:	6803      	ldr	r3, [r0, #0]
   b8260:	691b      	ldr	r3, [r3, #16]
   b8262:	4798      	blx	r3
   b8264:	4540      	cmp	r0, r8
   b8266:	dbe1      	blt.n	b822c <_ZN6MB85RC8readDataEjPhj+0x3c>
   b8268:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b826c:	f006 fa50 	bl	be710 <_Z19__fetch_global_Wirev>
   b8270:	6803      	ldr	r3, [r0, #0]
   b8272:	695b      	ldr	r3, [r3, #20]
   b8274:	4798      	blx	r3
   b8276:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b827a:	454e      	cmp	r6, r9
   b827c:	d1f6      	bne.n	b826c <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b827e:	4445      	add	r5, r8
				dataLen--;
   b8280:	eba7 0708 	sub.w	r7, r7, r8
   b8284:	e7be      	b.n	b8204 <_ZN6MB85RC8readDataEjPhj+0x14>

000b8286 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b8286:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b828a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b828c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b828e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b8290:	460e      	mov	r6, r1
   b8292:	4690      	mov	r8, r2
   b8294:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b8296:	f003 fe93 	bl	bbfc0 <_ZN7TwoWire4lockEv>
   b829a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b829e:	f1b9 0f00 	cmp.w	r9, #0
   b82a2:	d02a      	beq.n	b82fa <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b82a4:	b34d      	cbz	r5, b82fa <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b82a6:	68e1      	ldr	r1, [r4, #12]
   b82a8:	6860      	ldr	r0, [r4, #4]
   b82aa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b82ae:	f003 fe68 	bl	bbf82 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b82b2:	0a31      	lsrs	r1, r6, #8
   b82b4:	6860      	ldr	r0, [r4, #4]
   b82b6:	f7ff ff4a 	bl	b814e <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b82ba:	6860      	ldr	r0, [r4, #4]
   b82bc:	4631      	mov	r1, r6
   b82be:	f7ff ff46 	bl	b814e <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b82c2:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b82c6:	4647      	mov	r7, r8
   b82c8:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b82cc:	6860      	ldr	r0, [r4, #4]
   b82ce:	f817 1b01 	ldrb.w	r1, [r7], #1
   b82d2:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b82d4:	3d01      	subs	r5, #1
				wire.write(*data);
   b82d6:	689b      	ldr	r3, [r3, #8]
   b82d8:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b82da:	4555      	cmp	r5, sl
   b82dc:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b82e0:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b82e2:	d001      	beq.n	b82e8 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b82e4:	2d00      	cmp	r5, #0
   b82e6:	d1f1      	bne.n	b82cc <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b82e8:	6860      	ldr	r0, [r4, #4]
   b82ea:	2101      	movs	r1, #1
   b82ec:	f003 fe64 	bl	bbfb8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b82f0:	2800      	cmp	r0, #0
   b82f2:	d0d7      	beq.n	b82a4 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b82f4:	f04f 0900 	mov.w	r9, #0
   b82f8:	e7d1      	b.n	b829e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b82fa:	a801      	add	r0, sp, #4
   b82fc:	f7ff ff39 	bl	b8172 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b8300:	4648      	mov	r0, r9
   b8302:	b003      	add	sp, #12
   b8304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8308 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b8308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b830c:	b08b      	sub	sp, #44	; 0x2c
   b830e:	460e      	mov	r6, r1
   b8310:	4615      	mov	r5, r2
   b8312:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b8314:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8316:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b8318:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b831a:	f003 fe51 	bl	bbfc0 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b831e:	42ae      	cmp	r6, r5
   b8320:	d229      	bcs.n	b8376 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b8322:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b8324:	4425      	add	r5, r4
			while(numBytes > 0) {
   b8326:	b18c      	cbz	r4, b834c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b8328:	2c1e      	cmp	r4, #30
   b832a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b832c:	f8d8 3000 	ldr.w	r3, [r8]
   b8330:	bf28      	it	cs
   b8332:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b8334:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b8336:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b833a:	aa02      	add	r2, sp, #8
   b833c:	463b      	mov	r3, r7
   b833e:	4631      	mov	r1, r6
   b8340:	4640      	mov	r0, r8
				framAddrTo -= count;
   b8342:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b8344:	47c8      	blx	r9
				if (!result) {
   b8346:	b948      	cbnz	r0, b835c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b8348:	2400      	movs	r4, #0
   b834a:	e000      	b.n	b834e <_ZN6MB85RC8moveDataEjjj+0x46>
   b834c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b834e:	a801      	add	r0, sp, #4
   b8350:	f7ff ff0f 	bl	b8172 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b8354:	4620      	mov	r0, r4
   b8356:	b00b      	add	sp, #44	; 0x2c
   b8358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b835c:	f8d8 3000 	ldr.w	r3, [r8]
   b8360:	aa02      	add	r2, sp, #8
   b8362:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b8366:	4629      	mov	r1, r5
   b8368:	463b      	mov	r3, r7
   b836a:	4640      	mov	r0, r8
   b836c:	47c8      	blx	r9
				if (!result) {
   b836e:	2800      	cmp	r0, #0
   b8370:	d0ea      	beq.n	b8348 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b8372:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b8374:	e7d7      	b.n	b8326 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b8376:	d9e9      	bls.n	b834c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b8378:	2c00      	cmp	r4, #0
   b837a:	d0e7      	beq.n	b834c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b837c:	f8d8 3000 	ldr.w	r3, [r8]
   b8380:	2c1e      	cmp	r4, #30
   b8382:	4627      	mov	r7, r4
   b8384:	bf28      	it	cs
   b8386:	271e      	movcs	r7, #30
   b8388:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b838c:	aa02      	add	r2, sp, #8
   b838e:	463b      	mov	r3, r7
   b8390:	4631      	mov	r1, r6
   b8392:	4640      	mov	r0, r8
   b8394:	47c8      	blx	r9
				if (!result) {
   b8396:	2800      	cmp	r0, #0
   b8398:	d0d6      	beq.n	b8348 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b839a:	f8d8 3000 	ldr.w	r3, [r8]
   b839e:	aa02      	add	r2, sp, #8
   b83a0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b83a4:	4629      	mov	r1, r5
   b83a6:	463b      	mov	r3, r7
   b83a8:	4640      	mov	r0, r8
   b83aa:	47c8      	blx	r9
				if (!result) {
   b83ac:	2800      	cmp	r0, #0
   b83ae:	d0cb      	beq.n	b8348 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b83b0:	443e      	add	r6, r7
				framAddrTo += count;
   b83b2:	443d      	add	r5, r7
				numBytes -= count;
   b83b4:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b83b6:	e7df      	b.n	b8378 <_ZN6MB85RC8moveDataEjjj+0x70>

000b83b8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b83b8:	6803      	ldr	r3, [r0, #0]
   b83ba:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b83bc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b83c0:	2101      	movs	r1, #1
   b83c2:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b83c6:	4770      	bx	lr

000b83c8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b83c8:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b83ca:	6842      	ldr	r2, [r0, #4]
   b83cc:	4603      	mov	r3, r0
   b83ce:	1054      	asrs	r4, r2, #1
   b83d0:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b83d4:	07d2      	lsls	r2, r2, #31
   b83d6:	bf48      	it	mi
   b83d8:	590a      	ldrmi	r2, [r1, r4]
   b83da:	681b      	ldr	r3, [r3, #0]
      }
   b83dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   b83e0:	bf48      	it	mi
   b83e2:	58d3      	ldrmi	r3, [r2, r3]
   b83e4:	4718      	bx	r3

000b83e6 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b83e6:	2a01      	cmp	r2, #1
   b83e8:	d102      	bne.n	b83f0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b83ea:	6001      	str	r1, [r0, #0]
      }
   b83ec:	2000      	movs	r0, #0
   b83ee:	4770      	bx	lr
	  switch (__op)
   b83f0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b83f2:	bf04      	itt	eq
   b83f4:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b83f8:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b83fc:	e7f6      	b.n	b83ec <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b83fe <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b83fe:	2a01      	cmp	r2, #1
   b8400:	d102      	bne.n	b8408 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8402:	6001      	str	r1, [r0, #0]
      }
   b8404:	2000      	movs	r0, #0
   b8406:	4770      	bx	lr
	  switch (__op)
   b8408:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b840a:	bf04      	itt	eq
   b840c:	680b      	ldreq	r3, [r1, #0]
   b840e:	6003      	streq	r3, [r0, #0]
	      break;
   b8410:	e7f8      	b.n	b8404 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b8412 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b8412:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b8414:	f002 bba6 	b.w	bab64 <os_mutex_recursive_lock>

000b8418 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b8418:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b841c:	4601      	mov	r1, r0
    if (stateHandler) {
   b841e:	b11b      	cbz	r3, b8428 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8420:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b8424:	30c0      	adds	r0, #192	; 0xc0
   b8426:	4718      	bx	r3
}
   b8428:	4770      	bx	lr
	...

000b842c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b842e:	4d12      	ldr	r5, [pc, #72]	; (b8478 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b8430:	4608      	mov	r0, r1
        eventData = "";
   b8432:	2a00      	cmp	r2, #0
   b8434:	bf18      	it	ne
   b8436:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b8438:	460e      	mov	r6, r1
   b843a:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b843c:	f006 ffe7 	bl	bf40e <strlen>
   b8440:	2840      	cmp	r0, #64	; 0x40
   b8442:	d816      	bhi.n	b8472 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b8444:	4628      	mov	r0, r5
   b8446:	f006 ffe2 	bl	bf40e <strlen>
   b844a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b844e:	d810      	bhi.n	b8472 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b8450:	3043      	adds	r0, #67	; 0x43
   b8452:	f7fb fe22 	bl	b409a <_Znaj>
    if (event) {
   b8456:	4604      	mov	r4, r0
   b8458:	b148      	cbz	r0, b846e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b845a:	4631      	mov	r1, r6
        event->flags = flags;
   b845c:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b8460:	f006 ffaf 	bl	bf3c2 <strcpy>
        strcpy(event->eventData, eventData);
   b8464:	4629      	mov	r1, r5
   b8466:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b846a:	f006 ffaa 	bl	bf3c2 <strcpy>
}
   b846e:	4620      	mov	r0, r4
   b8470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b8472:	2400      	movs	r4, #0
   b8474:	e7fb      	b.n	b846e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b8476:	bf00      	nop
   b8478:	000c0d65 	.word	0x000c0d65

000b847c <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b847c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b847e:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b8480:	460a      	mov	r2, r1
   b8482:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b8484:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b8486:	1d01      	adds	r1, r0, #4
   b8488:	a808      	add	r0, sp, #32
   b848a:	f002 f8af 	bl	ba5ec <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b848e:	9808      	ldr	r0, [sp, #32]
   b8490:	2100      	movs	r1, #0
   b8492:	f007 f8d1 	bl	bf638 <open>
   b8496:	4605      	mov	r5, r0
   b8498:	a808      	add	r0, sp, #32
   b849a:	f005 fb1b 	bl	bdad4 <_ZN6StringD1Ev>
    if (fd) {
   b849e:	2d00      	cmp	r5, #0
   b84a0:	d060      	beq.n	b8564 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b84a2:	a908      	add	r1, sp, #32
   b84a4:	4628      	mov	r0, r5
   b84a6:	f007 f8b5 	bl	bf614 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b84aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b84ac:	492e      	ldr	r1, [pc, #184]	; (b8568 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b84ae:	482f      	ldr	r0, [pc, #188]	; (b856c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b84b0:	4632      	mov	r2, r6
   b84b2:	f7fd fc67 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b84b6:	2200      	movs	r2, #0
   b84b8:	4611      	mov	r1, r2
   b84ba:	4628      	mov	r0, r5
   b84bc:	f007 f8b2 	bl	bf624 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b84c0:	2208      	movs	r2, #8
   b84c2:	a906      	add	r1, sp, #24
   b84c4:	4628      	mov	r0, r5
   b84c6:	f007 f8cb 	bl	bf660 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b84ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b84cc:	2f4a      	cmp	r7, #74	; 0x4a
   b84ce:	dd39      	ble.n	b8544 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b84d0:	4b27      	ldr	r3, [pc, #156]	; (b8570 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b84d2:	9a06      	ldr	r2, [sp, #24]
   b84d4:	429a      	cmp	r2, r3
   b84d6:	d135      	bne.n	b8544 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b84d8:	4b26      	ldr	r3, [pc, #152]	; (b8574 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b84da:	9a07      	ldr	r2, [sp, #28]
   b84dc:	429a      	cmp	r2, r3
   b84de:	d131      	bne.n	b8544 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b84e0:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b84e4:	4610      	mov	r0, r2
   b84e6:	9205      	str	r2, [sp, #20]
   b84e8:	f7fb fdd7 	bl	b409a <_Znaj>
            if (result) {
   b84ec:	4604      	mov	r4, r0
   b84ee:	b1c0      	cbz	r0, b8522 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b84f0:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b84f2:	4601      	mov	r1, r0
   b84f4:	9a05      	ldr	r2, [sp, #20]
   b84f6:	4628      	mov	r0, r5
   b84f8:	f007 f8b2 	bl	bf660 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b84fc:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b8500:	b9ab      	cbnz	r3, b852e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b8502:	1c63      	adds	r3, r4, #1
   b8504:	4618      	mov	r0, r3
   b8506:	9305      	str	r3, [sp, #20]
   b8508:	f006 ff81 	bl	bf40e <strlen>
   b850c:	283f      	cmp	r0, #63	; 0x3f
   b850e:	9b05      	ldr	r3, [sp, #20]
   b8510:	d80d      	bhi.n	b852e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b8512:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b8516:	9200      	str	r2, [sp, #0]
   b8518:	4917      	ldr	r1, [pc, #92]	; (b8578 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b851a:	4814      	ldr	r0, [pc, #80]	; (b856c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b851c:	4632      	mov	r2, r6
   b851e:	f7fd fc31 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b8522:	4628      	mov	r0, r5
   b8524:	f007 f86e 	bl	bf604 <close>
}
   b8528:	4620      	mov	r0, r4
   b852a:	b01f      	add	sp, #124	; 0x7c
   b852c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b852e:	4913      	ldr	r1, [pc, #76]	; (b857c <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b8530:	480e      	ldr	r0, [pc, #56]	; (b856c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8532:	4632      	mov	r2, r6
   b8534:	f7fd fc26 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b8538:	2143      	movs	r1, #67	; 0x43
   b853a:	4620      	mov	r0, r4
   b853c:	f7fb fdaf 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b8540:	2400      	movs	r4, #0
   b8542:	e7ee      	b.n	b8522 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b8544:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b8548:	9302      	str	r3, [sp, #8]
   b854a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b854e:	9301      	str	r3, [sp, #4]
   b8550:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b8554:	9300      	str	r3, [sp, #0]
   b8556:	490a      	ldr	r1, [pc, #40]	; (b8580 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b8558:	9b06      	ldr	r3, [sp, #24]
   b855a:	4804      	ldr	r0, [pc, #16]	; (b856c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b855c:	4632      	mov	r2, r6
   b855e:	f7fd fc11 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
   b8562:	e7ed      	b.n	b8540 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b8564:	462c      	mov	r4, r5
    return result;
   b8566:	e7df      	b.n	b8528 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b8568:	000c05d8 	.word	0x000c05d8
   b856c:	2003e448 	.word	0x2003e448
   b8570:	31b67663 	.word	0x31b67663
   b8574:	00410801 	.word	0x00410801
   b8578:	000c05ec 	.word	0x000c05ec
   b857c:	000c060e 	.word	0x000c060e
   b8580:	000c063c 	.word	0x000c063c

000b8584 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b8584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8588:	4680      	mov	r8, r0
   b858a:	4b28      	ldr	r3, [pc, #160]	; (b862c <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b858c:	f848 3b04 	str.w	r3, [r8], #4
   b8590:	4604      	mov	r4, r0
   b8592:	4640      	mov	r0, r8
   b8594:	f001 ff42 	bl	ba41c <_ZN14SequentialFileC1Ev>
   b8598:	2202      	movs	r2, #2
   b859a:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b859c:	2500      	movs	r5, #0
   b859e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b85a2:	2308      	movs	r3, #8
   b85a4:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b85a6:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b85aa:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b85ae:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b85b2:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b85b6:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b85b8:	2020      	movs	r0, #32
   b85ba:	f7fb fd6c 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b85be:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b85c0:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b85c2:	3e01      	subs	r6, #1
   b85c4:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b85c6:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b85ca:	4607      	mov	r7, r0
   b85cc:	f44f 7000 	mov.w	r0, #512	; 0x200
   b85d0:	f7fb fd61 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b85d4:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b85d8:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b85dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b85e0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b85e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b85e8:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b85ec:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b85f0:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b85f4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b85f8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b85fc:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b8600:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b8604:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b8608:	4909      	ldr	r1, [pc, #36]	; (b8630 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b860a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b860e:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b8612:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b8616:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b861a:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b861e:	4640      	mov	r0, r8
   b8620:	f001 ff42 	bl	ba4a8 <_ZN14SequentialFile11withDirPathEPKc>
}
   b8624:	4620      	mov	r0, r4
   b8626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b862a:	bf00      	nop
   b862c:	000c0858 	.word	0x000c0858
   b8630:	000c0681 	.word	0x000c0681

000b8634 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b8634:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b8636:	4d06      	ldr	r5, [pc, #24]	; (b8650 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b8638:	682b      	ldr	r3, [r5, #0]
   b863a:	b93b      	cbnz	r3, b864c <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b863c:	20d0      	movs	r0, #208	; 0xd0
   b863e:	f7fb fd2a 	bl	b4096 <_Znwj>
   b8642:	4604      	mov	r4, r0
   b8644:	b108      	cbz	r0, b864a <_ZN17PublishQueuePosix8instanceEv+0x16>
   b8646:	f7ff ff9d 	bl	b8584 <_ZN17PublishQueuePosixC1Ev>
   b864a:	602c      	str	r4, [r5, #0]
}
   b864c:	6828      	ldr	r0, [r5, #0]
   b864e:	bd38      	pop	{r3, r4, r5, pc}
   b8650:	2003e44c 	.word	0x2003e44c

000b8654 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b8654:	6942      	ldr	r2, [r0, #20]
   b8656:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b8658:	1a9b      	subs	r3, r3, r2
   b865a:	109b      	asrs	r3, r3, #2
   b865c:	1e5a      	subs	r2, r3, #1
   b865e:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b8662:	1a5b      	subs	r3, r3, r1
   b8664:	109b      	asrs	r3, r3, #2
   b8666:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b866a:	6902      	ldr	r2, [r0, #16]
   b866c:	6880      	ldr	r0, [r0, #8]
   b866e:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b8670:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b8674:	4770      	bx	lr

000b8676 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b8676:	b538      	push	{r3, r4, r5, lr}
   b8678:	4605      	mov	r5, r0
   b867a:	f7ff feca 	bl	b8412 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b867e:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b8682:	f7ff ffe7 	bl	b8654 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b8686:	4604      	mov	r4, r0
   b8688:	b950      	cbnz	r0, b86a0 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b868a:	1d28      	adds	r0, r5, #4
   b868c:	f002 fa02 	bl	baa94 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b8690:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b8694:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b8696:	b11b      	cbz	r3, b86a0 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b8698:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b869c:	b903      	cbnz	r3, b86a0 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b869e:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b86a0:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b86a2:	f002 fa67 	bl	bab74 <os_mutex_recursive_unlock>
}
   b86a6:	4620      	mov	r0, r4
   b86a8:	bd38      	pop	{r3, r4, r5, pc}

000b86aa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b86aa:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b86ac:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b86ae:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b86b0:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b86b2:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b86b4:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b86b6:	d002      	beq.n	b86be <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b86b8:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b86ba:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b86bc:	bd10      	pop	{r4, pc}
	::operator delete(__p
   b86be:	68c0      	ldr	r0, [r0, #12]
   b86c0:	f44f 7100 	mov.w	r1, #512	; 0x200
   b86c4:	f7fb fceb 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b86c8:	6963      	ldr	r3, [r4, #20]
   b86ca:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b86cc:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b86ce:	685b      	ldr	r3, [r3, #4]
   b86d0:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b86d2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b86d6:	6122      	str	r2, [r4, #16]
   b86d8:	e7ef      	b.n	b86ba <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b86dc <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b86dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b86e0:	b085      	sub	sp, #20
   b86e2:	4604      	mov	r4, r0
   b86e4:	f7ff fe95 	bl	b8412 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b86e8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8790 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b86ec:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b8794 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b86f0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b8798 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b86f4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b86f8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b86fc:	4293      	cmp	r3, r2
   b86fe:	d105      	bne.n	b870c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b8700:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b8702:	b005      	add	sp, #20
   b8704:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8708:	f002 ba34 	b.w	bab74 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b870c:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b8710:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b8714:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b8716:	f7ff ffc8 	bl	b86aa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b871a:	4640      	mov	r0, r8
   b871c:	f002 f95e 	bl	ba9dc <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b8720:	2300      	movs	r3, #0
   b8722:	4602      	mov	r2, r0
   b8724:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b8726:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b8728:	4668      	mov	r0, sp
   b872a:	f001 ff5f 	bl	ba5ec <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b872e:	9800      	ldr	r0, [sp, #0]
   b8730:	f240 2102 	movw	r1, #514	; 0x202
   b8734:	f006 ff80 	bl	bf638 <open>
   b8738:	4605      	mov	r5, r0
   b873a:	4668      	mov	r0, sp
   b873c:	f005 f9ca 	bl	bdad4 <_ZN6StringD1Ev>
            if (fd) {
   b8740:	b1c5      	cbz	r5, b8774 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b8742:	2208      	movs	r2, #8
   b8744:	4669      	mov	r1, sp
   b8746:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b8748:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b874c:	f006 ff9a 	bl	bf684 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b8750:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b8754:	f006 fe5b 	bl	bf40e <strlen>
   b8758:	4639      	mov	r1, r7
   b875a:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b875e:	4628      	mov	r0, r5
   b8760:	f006 ff90 	bl	bf684 <write>
                close(fd);
   b8764:	4628      	mov	r0, r5
   b8766:	f006 ff4d 	bl	bf604 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b876a:	4808      	ldr	r0, [pc, #32]	; (b878c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b876c:	4632      	mov	r2, r6
   b876e:	4659      	mov	r1, fp
   b8770:	f7fd fb08 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b8774:	4631      	mov	r1, r6
   b8776:	4640      	mov	r0, r8
   b8778:	f002 f972 	bl	baa60 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b877c:	2f00      	cmp	r7, #0
   b877e:	d0b9      	beq.n	b86f4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b8780:	2143      	movs	r1, #67	; 0x43
   b8782:	4638      	mov	r0, r7
   b8784:	f7fb fc8b 	bl	b409e <_ZdlPvj>
   b8788:	e7b2      	b.n	b86f0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b878a:	bf00      	nop
   b878c:	2003e448 	.word	0x2003e448
   b8790:	31b67663 	.word	0x31b67663
   b8794:	00410801 	.word	0x00410801
   b8798:	000c068f 	.word	0x000c068f

000b879c <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b879c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b87a0:	4604      	mov	r4, r0
   b87a2:	f7ff fe36 	bl	b8412 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b87a6:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b87aa:	f7ff ff53 	bl	b8654 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b87ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b87b0:	4298      	cmp	r0, r3
   b87b2:	d902      	bls.n	b87ba <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b87b4:	4620      	mov	r0, r4
   b87b6:	f7ff ff91 	bl	b86dc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b87ba:	f8df 8044 	ldr.w	r8, [pc, #68]	; b8800 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b87be:	4f0f      	ldr	r7, [pc, #60]	; (b87fc <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b87c0:	1d26      	adds	r6, r4, #4
   b87c2:	4630      	mov	r0, r6
   b87c4:	f002 f966 	bl	baa94 <_ZNK14SequentialFile11getQueueLenEv>
   b87c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b87ca:	4298      	cmp	r0, r3
   b87cc:	dc04      	bgt.n	b87d8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b87ce:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b87d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b87d4:	f002 b9ce 	b.w	bab74 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b87d8:	2101      	movs	r1, #1
   b87da:	4630      	mov	r0, r6
   b87dc:	f002 f90a 	bl	ba9f4 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b87e0:	4605      	mov	r5, r0
   b87e2:	2800      	cmp	r0, #0
   b87e4:	d0ed      	beq.n	b87c2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b87e6:	4601      	mov	r1, r0
   b87e8:	2200      	movs	r2, #0
   b87ea:	4630      	mov	r0, r6
   b87ec:	f001 ff3a 	bl	ba664 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b87f0:	462a      	mov	r2, r5
   b87f2:	4641      	mov	r1, r8
   b87f4:	4638      	mov	r0, r7
   b87f6:	f7fb fc69 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b87fa:	e7e2      	b.n	b87c2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b87fc:	2003e448 	.word	0x2003e448
   b8800:	000c06ac 	.word	0x000c06ac

000b8804 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b8804:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b8806:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b880a:	430b      	orrs	r3, r1
   b880c:	d005      	beq.n	b881a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b880e:	3840      	subs	r0, #64	; 0x40
   b8810:	ea50 0301 	orrs.w	r3, r0, r1
   b8814:	d10b      	bne.n	b882e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b8816:	2a09      	cmp	r2, #9
   b8818:	d109      	bne.n	b882e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b881a:	4905      	ldr	r1, [pc, #20]	; (b8830 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b881c:	4805      	ldr	r0, [pc, #20]	; (b8834 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b881e:	f7fd fab1 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b8822:	f7ff ff07 	bl	b8634 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b8826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b882a:	f7ff bf57 	b.w	b86dc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b882e:	bd08      	pop	{r3, pc}
   b8830:	000c06bf 	.word	0x000c06bf
   b8834:	2003e448 	.word	0x2003e448

000b8838 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b8838:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b883a:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b883c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b883e:	b183      	cbz	r3, b8862 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b8840:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b8842:	6945      	ldr	r5, [r0, #20]
   b8844:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b8846:	42ae      	cmp	r6, r5
   b8848:	d906      	bls.n	b8858 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b884a:	f855 0b04 	ldr.w	r0, [r5], #4
   b884e:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8852:	f7fb fc24 	bl	b409e <_ZdlPvj>
   b8856:	e7f6      	b.n	b8846 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b8858:	6861      	ldr	r1, [r4, #4]
   b885a:	6820      	ldr	r0, [r4, #0]
   b885c:	0089      	lsls	r1, r1, #2
   b885e:	f7fb fc1e 	bl	b409e <_ZdlPvj>
    }
   b8862:	4620      	mov	r0, r4
   b8864:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8868 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b8868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b886a:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b886e:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b8870:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8872:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b8874:	b90a      	cbnz	r2, b887a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b8876:	07d9      	lsls	r1, r3, #31
   b8878:	d505      	bpl.n	b8886 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b887a:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b887e:	4b0a      	ldr	r3, [pc, #40]	; (b88a8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b8880:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8882:	4b0a      	ldr	r3, [pc, #40]	; (b88ac <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b8884:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b8886:	4621      	mov	r1, r4
   b8888:	4668      	mov	r0, sp
   b888a:	f7fe f900 	bl	b6a8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b888e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8890:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8892:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8894:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8896:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b8898:	4668      	mov	r0, sp
   b889a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b889c:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b889e:	9203      	str	r2, [sp, #12]
   b88a0:	f7fb ff2a 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
	}
   b88a4:	b004      	add	sp, #16
   b88a6:	bd10      	pop	{r4, pc}
   b88a8:	000b83c9 	.word	0x000b83c9
   b88ac:	000b83e7 	.word	0x000b83e7

000b88b0 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b88b0:	b570      	push	{r4, r5, r6, lr}
   b88b2:	b086      	sub	sp, #24
   b88b4:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b88b6:	f002 fc8b 	bl	bb1d0 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b88ba:	b948      	cbnz	r0, b88d0 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b88bc:	4b43      	ldr	r3, [pc, #268]	; (b89cc <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b88be:	a902      	add	r1, sp, #8
   b88c0:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b88c4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b88c8:	f7ff ffce 	bl	b8868 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b88cc:	b006      	add	sp, #24
   b88ce:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b88d0:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b88d4:	b11d      	cbz	r5, b88de <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b88d6:	2301      	movs	r3, #1
   b88d8:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b88dc:	e7f6      	b.n	b88cc <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b88de:	f002 f981 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b88e2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b88e6:	1ac0      	subs	r0, r0, r3
   b88e8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b88ec:	4298      	cmp	r0, r3
   b88ee:	d3ed      	bcc.n	b88cc <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b88f0:	1d26      	adds	r6, r4, #4
   b88f2:	4629      	mov	r1, r5
   b88f4:	4630      	mov	r0, r6
   b88f6:	f002 f87d 	bl	ba9f4 <_ZN14SequentialFile16getFileFromQueueEb>
   b88fa:	4601      	mov	r1, r0
   b88fc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b8900:	2800      	cmp	r0, #0
   b8902:	d052      	beq.n	b89aa <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b8904:	4620      	mov	r0, r4
   b8906:	f7ff fdb9 	bl	b847c <_ZN17PublishQueuePosix13readQueueFileEi>
   b890a:	4605      	mov	r5, r0
   b890c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b8910:	2800      	cmp	r0, #0
   b8912:	d035      	beq.n	b8980 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b8914:	f002 f966 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b8918:	ae02      	add	r6, sp, #8
   b891a:	2500      	movs	r5, #0
   b891c:	4b2c      	ldr	r3, [pc, #176]	; (b89d0 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b891e:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b8922:	4631      	mov	r1, r6
   b8924:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8928:	9302      	str	r3, [sp, #8]
   b892a:	9503      	str	r5, [sp, #12]
   b892c:	f7ff ff9c 	bl	b8868 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8930:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b8934:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b8938:	9200      	str	r2, [sp, #0]
   b893a:	4926      	ldr	r1, [pc, #152]	; (b89d4 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b893c:	4a26      	ldr	r2, [pc, #152]	; (b89d8 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b893e:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8942:	42a8      	cmp	r0, r5
   b8944:	bf08      	it	eq
   b8946:	460a      	moveq	r2, r1
   b8948:	3301      	adds	r3, #1
   b894a:	4924      	ldr	r1, [pc, #144]	; (b89dc <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b894c:	4824      	ldr	r0, [pc, #144]	; (b89e0 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b894e:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8952:	f7fd fa17 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b8956:	f7fd ffdd 	bl	b6914 <_ZN19BackgroundPublishRK8instanceEv>
   b895a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b895e:	4b21      	ldr	r3, [pc, #132]	; (b89e4 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b8960:	9305      	str	r3, [sp, #20]
   b8962:	e9cd 6500 	strd	r6, r5, [sp]
   b8966:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b8968:	4b1f      	ldr	r3, [pc, #124]	; (b89e8 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b896a:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b896c:	9304      	str	r3, [sp, #16]
   b896e:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8972:	3242      	adds	r2, #66	; 0x42
   b8974:	f7fe f91a 	bl	b6bac <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b8978:	4630      	mov	r0, r6
   b897a:	f7fb febd 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   b897e:	e7a5      	b.n	b88cc <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b8980:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b8984:	4919      	ldr	r1, [pc, #100]	; (b89ec <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b8986:	4816      	ldr	r0, [pc, #88]	; (b89e0 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b8988:	f7fb fba0 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b898c:	2101      	movs	r1, #1
   b898e:	4630      	mov	r0, r6
   b8990:	f002 f830 	bl	ba9f4 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b8994:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b8998:	462a      	mov	r2, r5
   b899a:	4630      	mov	r0, r6
   b899c:	f001 fe62 	bl	ba664 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b89a0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b89a4:	2b00      	cmp	r3, #0
   b89a6:	d1b5      	bne.n	b8914 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b89a8:	e795      	b.n	b88d6 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b89aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b89ae:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b89b2:	429a      	cmp	r2, r3
   b89b4:	d007      	beq.n	b89c6 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b89b6:	681b      	ldr	r3, [r3, #0]
   b89b8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b89bc:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b89c0:	f7ff fe73 	bl	b86aa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b89c4:	e7ec      	b.n	b89a0 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b89c6:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b89ca:	e784      	b.n	b88d6 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b89cc:	000b89f1 	.word	0x000b89f1
   b89d0:	000b8d71 	.word	0x000b8d71
   b89d4:	000c06ee 	.word	0x000c06ee
   b89d8:	000c0be0 	.word	0x000c0be0
   b89dc:	000c070f 	.word	0x000c070f
   b89e0:	2003e448 	.word	0x2003e448
   b89e4:	000b83b9 	.word	0x000b83b9
   b89e8:	000b83ff 	.word	0x000b83ff
   b89ec:	000c06f2 	.word	0x000c06f2

000b89f0 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b89f0:	b513      	push	{r0, r1, r4, lr}
   b89f2:	4604      	mov	r4, r0
   b89f4:	f002 fbec 	bl	bb1d0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b89f8:	b190      	cbz	r0, b8a20 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b89fa:	f002 f8f3 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b89fe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8a02:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b8a06:	4b0d      	ldr	r3, [pc, #52]	; (b8a3c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b8a08:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b8a0c:	9300      	str	r3, [sp, #0]
   b8a0e:	4669      	mov	r1, sp
   b8a10:	2300      	movs	r3, #0
   b8a12:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8a16:	9301      	str	r3, [sp, #4]
   b8a18:	f7ff ff26 	bl	b8868 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b8a1c:	b002      	add	sp, #8
   b8a1e:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b8a20:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b8a24:	b11b      	cbz	r3, b8a2e <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b8a26:	2301      	movs	r3, #1
   b8a28:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b8a2c:	e7f6      	b.n	b8a1c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b8a2e:	4620      	mov	r0, r4
   b8a30:	f7ff fe21 	bl	b8676 <_ZN17PublishQueuePosix12getNumEventsEv>
   b8a34:	2800      	cmp	r0, #0
   b8a36:	d0f6      	beq.n	b8a26 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b8a38:	e7f0      	b.n	b8a1c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b8a3a:	bf00      	nop
   b8a3c:	000b88b1 	.word	0x000b88b1

000b8a40 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b8a40:	b570      	push	{r4, r5, r6, lr}
   b8a42:	4605      	mov	r5, r0
   b8a44:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b8a46:	2000      	movs	r0, #0
   b8a48:	f002 fb56 	bl	bb0f8 <system_thread_get_state>
   b8a4c:	2801      	cmp	r0, #1
   b8a4e:	d005      	beq.n	b8a5c <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b8a50:	493e      	ldr	r1, [pc, #248]	; (b8b4c <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b8a52:	483f      	ldr	r0, [pc, #252]	; (b8b50 <_ZN17PublishQueuePosix5setupEv+0x110>)
   b8a54:	f7fd f988 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
}
   b8a58:	b018      	add	sp, #96	; 0x60
   b8a5a:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b8a5c:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b8a60:	f002 f870 	bl	bab44 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8a64:	4b3b      	ldr	r3, [pc, #236]	; (b8b54 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b8a66:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8a68:	4b3b      	ldr	r3, [pc, #236]	; (b8b58 <_ZN17PublishQueuePosix5setupEv+0x118>)
   b8a6a:	9307      	str	r3, [sp, #28]
        };
   b8a6c:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b8a6e:	4b3b      	ldr	r3, [pc, #236]	; (b8b5c <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b8a70:	9306      	str	r3, [sp, #24]
   b8a72:	a808      	add	r0, sp, #32
   b8a74:	f7fb fee4 	bl	b4840 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b8a78:	a908      	add	r1, sp, #32
   b8a7a:	a80c      	add	r0, sp, #48	; 0x30
   b8a7c:	f7fb fee0 	bl	b4840 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b8a80:	a90c      	add	r1, sp, #48	; 0x30
   b8a82:	a810      	add	r0, sp, #64	; 0x40
   b8a84:	f7fb fedc 	bl	b4840 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b8a88:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a8a:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b8a8c:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a8e:	f7fb fb02 	bl	b4096 <_Znwj>
   b8a92:	4604      	mov	r4, r0
   b8a94:	b160      	cbz	r0, b8ab0 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b8a96:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8a98:	4601      	mov	r1, r0
   b8a9a:	a810      	add	r0, sp, #64	; 0x40
   b8a9c:	f7fd fff7 	bl	b6a8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8aa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b8aa2:	68a2      	ldr	r2, [r4, #8]
   b8aa4:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b8aa6:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8aa8:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8aaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b8aac:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8aae:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b8ab0:	4b2b      	ldr	r3, [pc, #172]	; (b8b60 <_ZN17PublishQueuePosix5setupEv+0x120>)
   b8ab2:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b8ab4:	4b2b      	ldr	r3, [pc, #172]	; (b8b64 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b8ab6:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b8ab8:	4b2b      	ldr	r3, [pc, #172]	; (b8b68 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8aba:	9414      	str	r4, [sp, #80]	; 0x50
   b8abc:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b8abe:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b8ac0:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b8ac4:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b8ac6:	f7fb fae6 	bl	b4096 <_Znwj>
   b8aca:	4604      	mov	r4, r0
   b8acc:	b1d8      	cbz	r0, b8b06 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b8ace:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b8ad0:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b8ad2:	b133      	cbz	r3, b8ae2 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8ad4:	2202      	movs	r2, #2
   b8ad6:	a914      	add	r1, sp, #80	; 0x50
   b8ad8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8ada:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8adc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8ade:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b8ae0:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b8ae2:	4b22      	ldr	r3, [pc, #136]	; (b8b6c <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b8ae4:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b8ae6:	4a22      	ldr	r2, [pc, #136]	; (b8b70 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b8ae8:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b8aea:	ab01      	add	r3, sp, #4
   b8aec:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b8af0:	2100      	movs	r1, #0
   b8af2:	f002 fae1 	bl	bb0b8 <system_subscribe_event>
        if (r) {
   b8af6:	b130      	cbz	r0, b8b06 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b8af8:	4620      	mov	r0, r4
   b8afa:	f7fb fdfd 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b8afe:	2110      	movs	r1, #16
   b8b00:	4620      	mov	r0, r4
   b8b02:	f7fb facc 	bl	b409e <_ZdlPvj>
   b8b06:	a814      	add	r0, sp, #80	; 0x50
   b8b08:	f7fb fdf6 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   b8b0c:	a810      	add	r0, sp, #64	; 0x40
   b8b0e:	f7fb fdf3 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   b8b12:	a80c      	add	r0, sp, #48	; 0x30
   b8b14:	f7fb fdf0 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   b8b18:	a808      	add	r0, sp, #32
   b8b1a:	f7fb fded 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   b8b1e:	a804      	add	r0, sp, #16
   b8b20:	f7fb fdea 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b8b24:	f7fd fef6 	bl	b6914 <_ZN19BackgroundPublishRK8instanceEv>
   b8b28:	f7fe f81a 	bl	b6b60 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b8b2c:	1d28      	adds	r0, r5, #4
   b8b2e:	f001 fedd 	bl	ba8ec <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b8b32:	4628      	mov	r0, r5
   b8b34:	f7ff fe32 	bl	b879c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b8b38:	4b0e      	ldr	r3, [pc, #56]	; (b8b74 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b8b3a:	9314      	str	r3, [sp, #80]	; 0x50
   b8b3c:	a914      	add	r1, sp, #80	; 0x50
   b8b3e:	2300      	movs	r3, #0
   b8b40:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b8b44:	9315      	str	r3, [sp, #84]	; 0x54
   b8b46:	f7ff fe8f 	bl	b8868 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8b4a:	e785      	b.n	b8a58 <_ZN17PublishQueuePosix5setupEv+0x18>
   b8b4c:	000c072e 	.word	0x000c072e
   b8b50:	2003e448 	.word	0x2003e448
   b8b54:	000b8805 	.word	0x000b8805
   b8b58:	000b46ef 	.word	0x000b46ef
   b8b5c:	000b46db 	.word	0x000b46db
   b8b60:	000b46b5 	.word	0x000b46b5
   b8b64:	000b4969 	.word	0x000b4969
   b8b68:	000c0002 	.word	0x000c0002
   b8b6c:	000b470b 	.word	0x000b470b
   b8b70:	000b4665 	.word	0x000b4665
   b8b74:	000b89f1 	.word	0x000b89f1

000b8b78 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b8b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b7c:	4606      	mov	r6, r0
   b8b7e:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8b80:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8b82:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8b84:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8b86:	1a47      	subs	r7, r0, r1
   b8b88:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b8b8c:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8b8e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b8b92:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8b94:	d927      	bls.n	b8be6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b8b96:	1b5d      	subs	r5, r3, r5
   b8b98:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8b9a:	6832      	ldr	r2, [r6, #0]
   b8b9c:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b8b9e:	b10c      	cbz	r4, b8ba4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b8ba0:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b8ba4:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8ba6:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b8ba8:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b8baa:	42a1      	cmp	r1, r4
	  const ptrdiff_t _Num = __last - __first;
   b8bac:	eba3 0201 	sub.w	r2, r3, r1
   b8bb0:	d913      	bls.n	b8bda <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b8bb2:	4299      	cmp	r1, r3
   b8bb4:	d002      	beq.n	b8bbc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8bb6:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8bb8:	f006 fb54 	bl	bf264 <memmove>
	_M_node = __new_node;
   b8bbc:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b8bbe:	6823      	ldr	r3, [r4, #0]
   b8bc0:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8bc2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8bc6:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b8bc8:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b8bca:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b8bcc:	59e3      	ldr	r3, [r4, r7]
   b8bce:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8bd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8bd4:	6233      	str	r3, [r6, #32]
    }
   b8bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b8bda:	4299      	cmp	r1, r3
   b8bdc:	d0ee      	beq.n	b8bbc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8bde:	1d38      	adds	r0, r7, #4
   b8be0:	1a80      	subs	r0, r0, r2
   b8be2:	4420      	add	r0, r4
   b8be4:	e7e8      	b.n	b8bb8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b8be6:	f103 0802 	add.w	r8, r3, #2
   b8bea:	454b      	cmp	r3, r9
   b8bec:	bf2c      	ite	cs
   b8bee:	4498      	addcs	r8, r3
   b8bf0:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b8bf2:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b8bf6:	d301      	bcc.n	b8bfc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b8bf8:	f005 fe16 	bl	be828 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8bfc:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b8c00:	f7fb fa49 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8c04:	eba8 0505 	sub.w	r5, r8, r5
   b8c08:	086d      	lsrs	r5, r5, #1
   b8c0a:	4682      	mov	sl, r0
   b8c0c:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b8c0e:	b10c      	cbz	r4, b8c14 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b8c10:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b8c14:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b8c16:	6971      	ldr	r1, [r6, #20]
   b8c18:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b8c1a:	442c      	add	r4, r5
	  if (_Num)
   b8c1c:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8c1e:	4454      	add	r4, sl
   b8c20:	d003      	beq.n	b8c2a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8c22:	1a52      	subs	r2, r2, r1
   b8c24:	4620      	mov	r0, r4
   b8c26:	f006 fb1d 	bl	bf264 <memmove>
	::operator delete(__p
   b8c2a:	6871      	ldr	r1, [r6, #4]
   b8c2c:	6830      	ldr	r0, [r6, #0]
   b8c2e:	0089      	lsls	r1, r1, #2
   b8c30:	f7fb fa35 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b8c34:	e9c6 a800 	strd	sl, r8, [r6]
   b8c38:	e7c0      	b.n	b8bbc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b8c3c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c3e:	b085      	sub	sp, #20
   b8c40:	4604      	mov	r4, r0
   b8c42:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b8c46:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8c4a:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8c4c:	460f      	mov	r7, r1
   b8c4e:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8c50:	f7ff fbec 	bl	b842c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b8c54:	4605      	mov	r5, r0
   b8c56:	2800      	cmp	r0, #0
   b8c58:	d03c      	beq.n	b8cd4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b8c5a:	4b3f      	ldr	r3, [pc, #252]	; (b8d58 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b8c5c:	493f      	ldr	r1, [pc, #252]	; (b8d5c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b8c5e:	4840      	ldr	r0, [pc, #256]	; (b8d60 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8c60:	2e00      	cmp	r6, #0
   b8c62:	bf18      	it	ne
   b8c64:	4633      	movne	r3, r6
   b8c66:	463a      	mov	r2, r7
   b8c68:	f7fd f88c 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
   b8c6c:	4620      	mov	r0, r4
   b8c6e:	f7ff fbd0 	bl	b8412 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b8c72:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b8c76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b8c7a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b8c7c:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b8c7e:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b8c82:	d029      	beq.n	b8cd8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8c84:	b103      	cbz	r3, b8c88 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b8c86:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b8c88:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b8c8c:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b8c8e:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b8c90:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b8c94:	4628      	mov	r0, r5
   b8c96:	f001 fefd 	bl	baa94 <_ZNK14SequentialFile11getQueueLenEv>
   b8c9a:	9003      	str	r0, [sp, #12]
   b8c9c:	4630      	mov	r0, r6
   b8c9e:	f7ff fcd9 	bl	b8654 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8ca2:	9002      	str	r0, [sp, #8]
   b8ca4:	f002 fa94 	bl	bb1d0 <spark_cloud_flag_connected>
   b8ca8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b8cac:	9000      	str	r0, [sp, #0]
   b8cae:	492d      	ldr	r1, [pc, #180]	; (b8d64 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b8cb0:	482b      	ldr	r0, [pc, #172]	; (b8d60 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8cb2:	f7fd f867 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b8cb6:	4628      	mov	r0, r5
   b8cb8:	f001 feec 	bl	baa94 <_ZNK14SequentialFile11getQueueLenEv>
   b8cbc:	2800      	cmp	r0, #0
   b8cbe:	d03b      	beq.n	b8d38 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b8cc0:	4620      	mov	r0, r4
   b8cc2:	f7ff fd0b 	bl	b86dc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b8cc6:	4620      	mov	r0, r4
   b8cc8:	f7ff fd68 	bl	b879c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b8ccc:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b8cce:	f001 ff51 	bl	bab74 <os_mutex_recursive_unlock>
    return true;
   b8cd2:	2001      	movs	r0, #1
}
   b8cd4:	b005      	add	sp, #20
   b8cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b8cd8:	4630      	mov	r0, r6
   b8cda:	f7ff fcbb 	bl	b8654 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8cde:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8ce2:	4298      	cmp	r0, r3
   b8ce4:	d102      	bne.n	b8cec <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b8ce6:	4820      	ldr	r0, [pc, #128]	; (b8d68 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b8ce8:	f005 fda1 	bl	be82e <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b8cec:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8cf0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b8cf2:	1a9a      	subs	r2, r3, r2
   b8cf4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b8cf6:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b8cfa:	2b01      	cmp	r3, #1
   b8cfc:	d804      	bhi.n	b8d08 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b8cfe:	2200      	movs	r2, #0
   b8d00:	2101      	movs	r1, #1
   b8d02:	4630      	mov	r0, r6
   b8d04:	f7ff ff38 	bl	b8b78 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8d08:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b8d0c:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b8d10:	f7fb f9c1 	bl	b4096 <_Znwj>
   b8d14:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b8d16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8d1a:	b103      	cbz	r3, b8d1e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b8d1c:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b8d1e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8d22:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8d24:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b8d28:	685b      	ldr	r3, [r3, #4]
   b8d2a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8d2e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8d32:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b8d36:	e7aa      	b.n	b8c8e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b8d38:	4630      	mov	r0, r6
   b8d3a:	f7ff fc8b 	bl	b8654 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8d3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b8d40:	4298      	cmp	r0, r3
   b8d42:	d8bd      	bhi.n	b8cc0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b8d44:	f002 fa44 	bl	bb1d0 <spark_cloud_flag_connected>
   b8d48:	2800      	cmp	r0, #0
   b8d4a:	d0b9      	beq.n	b8cc0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b8d4c:	4907      	ldr	r1, [pc, #28]	; (b8d6c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b8d4e:	4804      	ldr	r0, [pc, #16]	; (b8d60 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8d50:	f7fd f818 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
   b8d54:	e7b7      	b.n	b8cc6 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b8d56:	bf00      	nop
   b8d58:	000c0d65 	.word	0x000c0d65
   b8d5c:	000c0751 	.word	0x000c0751
   b8d60:	2003e448 	.word	0x2003e448
   b8d64:	000c07a9 	.word	0x000c07a9
   b8d68:	000c0779 	.word	0x000c0779
   b8d6c:	000c07d5 	.word	0x000c07d5

000b8d70 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b8d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b8d72:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b8d76:	4604      	mov	r4, r0
    if (!publishComplete) {
   b8d78:	2b00      	cmp	r3, #0
   b8d7a:	d041      	beq.n	b8e00 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b8d7c:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b8d80:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b8d84:	2b00      	cmp	r3, #0
   b8d86:	d03d      	beq.n	b8e04 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b8d88:	4950      	ldr	r1, [pc, #320]	; (b8ecc <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b8d8a:	4851      	ldr	r0, [pc, #324]	; (b8ed0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8d8c:	f7fc fffa 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b8d90:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8d94:	b1d3      	cbz	r3, b8dcc <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b8d96:	1d26      	adds	r6, r4, #4
   b8d98:	2100      	movs	r1, #0
   b8d9a:	4630      	mov	r0, r6
   b8d9c:	f001 fe2a 	bl	ba9f4 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b8da0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8da4:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b8da6:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b8da8:	d10d      	bne.n	b8dc6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b8daa:	2101      	movs	r1, #1
   b8dac:	4630      	mov	r0, r6
   b8dae:	f001 fe21 	bl	ba9f4 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b8db2:	2200      	movs	r2, #0
   b8db4:	4629      	mov	r1, r5
   b8db6:	4630      	mov	r0, r6
   b8db8:	f001 fc54 	bl	ba664 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b8dbc:	4945      	ldr	r1, [pc, #276]	; (b8ed4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b8dbe:	4844      	ldr	r0, [pc, #272]	; (b8ed0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8dc0:	462a      	mov	r2, r5
   b8dc2:	f7fc ffdf 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b8dc6:	2300      	movs	r3, #0
   b8dc8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b8dcc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b8dd0:	b110      	cbz	r0, b8dd8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b8dd2:	2143      	movs	r1, #67	; 0x43
   b8dd4:	f7fb f963 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b8dd8:	2300      	movs	r3, #0
   b8dda:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b8dde:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8de2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b8de6:	4b3c      	ldr	r3, [pc, #240]	; (b8ed8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b8de8:	9300      	str	r3, [sp, #0]
   b8dea:	4669      	mov	r1, sp
   b8dec:	2300      	movs	r3, #0
   b8dee:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8df2:	9301      	str	r3, [sp, #4]
   b8df4:	f7ff fd38 	bl	b8868 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8df8:	f001 fef4 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b8dfc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b8e00:	b002      	add	sp, #8
   b8e02:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b8e04:	4935      	ldr	r1, [pc, #212]	; (b8edc <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b8e06:	4832      	ldr	r0, [pc, #200]	; (b8ed0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8e08:	f7fc ffbc 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b8e0c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8e10:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b8e14:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8e18:	b14b      	cbz	r3, b8e2e <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b8e1a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b8e1e:	b110      	cbz	r0, b8e26 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b8e20:	2143      	movs	r1, #67	; 0x43
   b8e22:	f7fb f93c 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b8e26:	2300      	movs	r3, #0
   b8e28:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b8e2c:	e7db      	b.n	b8de6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b8e2e:	4620      	mov	r0, r4
   b8e30:	f7ff faef 	bl	b8412 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b8e34:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b8e38:	4293      	cmp	r3, r2
   b8e3a:	d013      	beq.n	b8e64 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b8e3c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b8e40:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b8e44:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b8e48:	3b04      	subs	r3, #4
   b8e4a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b8e4e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b8e50:	f001 fe90 	bl	bab74 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b8e54:	4922      	ldr	r1, [pc, #136]	; (b8ee0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b8e56:	481e      	ldr	r0, [pc, #120]	; (b8ed0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8e58:	f7fc ff94 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b8e5c:	4620      	mov	r0, r4
   b8e5e:	f7ff fc3d 	bl	b86dc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b8e62:	e7c0      	b.n	b8de6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b8e64:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b8e68:	4628      	mov	r0, r5
   b8e6a:	f7ff fbf3 	bl	b8654 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8e6e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8e72:	4298      	cmp	r0, r3
   b8e74:	d102      	bne.n	b8e7c <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b8e76:	481b      	ldr	r0, [pc, #108]	; (b8ee4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b8e78:	f005 fcd9 	bl	be82e <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b8e7c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b8e80:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b8e82:	429a      	cmp	r2, r3
   b8e84:	d104      	bne.n	b8e90 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b8e86:	2201      	movs	r2, #1
   b8e88:	4611      	mov	r1, r2
   b8e8a:	4628      	mov	r0, r5
   b8e8c:	f7ff fe74 	bl	b8b78 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8e90:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b8e94:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b8e98:	f7fb f8fd 	bl	b4096 <_Znwj>
   b8e9c:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b8ea0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b8ea4:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b8ea6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b8eaa:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b8eae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8eb2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8eb6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b8eba:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b8ebe:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8ec2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b8ec6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b8eca:	e7c0      	b.n	b8e4e <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b8ecc:	000c07e8 	.word	0x000c07e8
   b8ed0:	2003e448 	.word	0x2003e448
   b8ed4:	000c07fb 	.word	0x000c07fb
   b8ed8:	000b88b1 	.word	0x000b88b1
   b8edc:	000c080b 	.word	0x000c080b
   b8ee0:	000c081d 	.word	0x000c081d
   b8ee4:	000c0779 	.word	0x000c0779

000b8ee8 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b8ee8:	4b01      	ldr	r3, [pc, #4]	; (b8ef0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b8eea:	4a02      	ldr	r2, [pc, #8]	; (b8ef4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b8eec:	601a      	str	r2, [r3, #0]
}
   b8eee:	4770      	bx	lr
   b8ef0:	2003e448 	.word	0x2003e448
   b8ef4:	000c0844 	.word	0x000c0844

000b8ef8 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8ef8:	b510      	push	{r4, lr}
   b8efa:	4b07      	ldr	r3, [pc, #28]	; (b8f18 <_ZN17PublishQueuePosixD1Ev+0x20>)
   b8efc:	4604      	mov	r4, r0
   b8efe:	f840 3bc0 	str.w	r3, [r0], #192
   b8f02:	f7fb fbf9 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b8f06:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b8f0a:	f7ff fc95 	bl	b8838 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b8f0e:	1d20      	adds	r0, r4, #4
   b8f10:	f001 fc2c 	bl	ba76c <_ZN14SequentialFileD1Ev>
}
   b8f14:	4620      	mov	r0, r4
   b8f16:	bd10      	pop	{r4, pc}
   b8f18:	000c0858 	.word	0x000c0858

000b8f1c <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8f1c:	b510      	push	{r4, lr}
   b8f1e:	4604      	mov	r4, r0
}
   b8f20:	f7ff ffea 	bl	b8ef8 <_ZN17PublishQueuePosixD1Ev>
   b8f24:	4620      	mov	r0, r4
   b8f26:	21d0      	movs	r1, #208	; 0xd0
   b8f28:	f7fb f8b9 	bl	b409e <_ZdlPvj>
   b8f2c:	4620      	mov	r0, r4
   b8f2e:	bd10      	pop	{r4, pc}

000b8f30 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b8f30:	6001      	str	r1, [r0, #0]
   b8f32:	7102      	strb	r2, [r0, #4]
{
}
   b8f34:	4770      	bx	lr

000b8f36 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b8f36:	6800      	ldr	r0, [r0, #0]
   b8f38:	6803      	ldr	r3, [r0, #0]
   b8f3a:	68db      	ldr	r3, [r3, #12]
   b8f3c:	4718      	bx	r3

000b8f3e <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b8f3e:	6800      	ldr	r0, [r0, #0]
   b8f40:	6803      	ldr	r3, [r0, #0]
   b8f42:	6a1b      	ldr	r3, [r3, #32]
   b8f44:	4718      	bx	r3

000b8f46 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b8f46:	6800      	ldr	r0, [r0, #0]
   b8f48:	6803      	ldr	r3, [r0, #0]
   b8f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8f4c:	4718      	bx	r3

000b8f4e <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b8f4e:	7900      	ldrb	r0, [r0, #4]
   b8f50:	4770      	bx	lr

000b8f52 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b8f52:	6800      	ldr	r0, [r0, #0]
   b8f54:	6803      	ldr	r3, [r0, #0]
   b8f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8f58:	4718      	bx	r3

000b8f5a <_ZN10RHDatagram6sendtoEPhhh>:
{
   b8f5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8f5c:	4605      	mov	r5, r0
   b8f5e:	460c      	mov	r4, r1
    setHeaderTo(address);
   b8f60:	4619      	mov	r1, r3
{
   b8f62:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b8f64:	f7ff fff5 	bl	b8f52 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b8f68:	6828      	ldr	r0, [r5, #0]
   b8f6a:	9a01      	ldr	r2, [sp, #4]
   b8f6c:	6803      	ldr	r3, [r0, #0]
   b8f6e:	695b      	ldr	r3, [r3, #20]
   b8f70:	4621      	mov	r1, r4
}
   b8f72:	b003      	add	sp, #12
   b8f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b8f78:	4718      	bx	r3

000b8f7a <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b8f7a:	6800      	ldr	r0, [r0, #0]
   b8f7c:	6803      	ldr	r3, [r0, #0]
   b8f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8f80:	4718      	bx	r3

000b8f82 <_ZN10RHDatagram14setThisAddressEh>:
{
   b8f82:	b538      	push	{r3, r4, r5, lr}
   b8f84:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b8f86:	6800      	ldr	r0, [r0, #0]
   b8f88:	6803      	ldr	r3, [r0, #0]
{
   b8f8a:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b8f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8f8e:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b8f90:	4629      	mov	r1, r5
   b8f92:	4620      	mov	r0, r4
   b8f94:	f7ff fff1 	bl	b8f7a <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b8f98:	7125      	strb	r5, [r4, #4]
}
   b8f9a:	bd38      	pop	{r3, r4, r5, pc}

000b8f9c <_ZN10RHDatagram4initEv>:
{
   b8f9c:	b538      	push	{r3, r4, r5, lr}
   b8f9e:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b8fa0:	6800      	ldr	r0, [r0, #0]
   b8fa2:	6803      	ldr	r3, [r0, #0]
   b8fa4:	689b      	ldr	r3, [r3, #8]
   b8fa6:	4798      	blx	r3
    if (ret)
   b8fa8:	4605      	mov	r5, r0
   b8faa:	b118      	cbz	r0, b8fb4 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b8fac:	7921      	ldrb	r1, [r4, #4]
   b8fae:	4620      	mov	r0, r4
   b8fb0:	f7ff ffe7 	bl	b8f82 <_ZN10RHDatagram14setThisAddressEh>
}
   b8fb4:	4628      	mov	r0, r5
   b8fb6:	bd38      	pop	{r3, r4, r5, pc}

000b8fb8 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b8fb8:	6800      	ldr	r0, [r0, #0]
   b8fba:	6803      	ldr	r3, [r0, #0]
   b8fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8fbe:	4718      	bx	r3

000b8fc0 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b8fc0:	6800      	ldr	r0, [r0, #0]
   b8fc2:	6803      	ldr	r3, [r0, #0]
   b8fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8fc6:	4718      	bx	r3

000b8fc8 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b8fc8:	6800      	ldr	r0, [r0, #0]
   b8fca:	6803      	ldr	r3, [r0, #0]
   b8fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8fce:	4718      	bx	r3

000b8fd0 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b8fd0:	6800      	ldr	r0, [r0, #0]
   b8fd2:	6803      	ldr	r3, [r0, #0]
   b8fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8fd6:	4718      	bx	r3

000b8fd8 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b8fd8:	6800      	ldr	r0, [r0, #0]
   b8fda:	6803      	ldr	r3, [r0, #0]
   b8fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8fde:	4718      	bx	r3

000b8fe0 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b8fe0:	6800      	ldr	r0, [r0, #0]
   b8fe2:	6803      	ldr	r3, [r0, #0]
   b8fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8fe6:	4718      	bx	r3

000b8fe8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b8fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8fec:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b8fee:	6800      	ldr	r0, [r0, #0]
{
   b8ff0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b8ff2:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b8ff4:	6803      	ldr	r3, [r0, #0]
   b8ff6:	691b      	ldr	r3, [r3, #16]
{
   b8ff8:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b8ffc:	4798      	blx	r3
   b8ffe:	4605      	mov	r5, r0
   b9000:	b1c8      	cbz	r0, b9036 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b9002:	b11e      	cbz	r6, b900c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b9004:	4620      	mov	r0, r4
   b9006:	f7ff ffe3 	bl	b8fd0 <_ZN10RHDatagram10headerFromEv>
   b900a:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b900c:	f1b9 0f00 	cmp.w	r9, #0
   b9010:	d004      	beq.n	b901c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b9012:	4620      	mov	r0, r4
   b9014:	f7ff ffd8 	bl	b8fc8 <_ZN10RHDatagram8headerToEv>
   b9018:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b901c:	f1b8 0f00 	cmp.w	r8, #0
   b9020:	d004      	beq.n	b902c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b9022:	4620      	mov	r0, r4
   b9024:	f7ff ffd8 	bl	b8fd8 <_ZN10RHDatagram8headerIdEv>
   b9028:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b902c:	b11f      	cbz	r7, b9036 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b902e:	4620      	mov	r0, r4
   b9030:	f7ff ffd6 	bl	b8fe0 <_ZN10RHDatagram11headerFlagsEv>
   b9034:	7038      	strb	r0, [r7, #0]
}
   b9036:	4628      	mov	r0, r5
   b9038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b903c <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b903c:	2001      	movs	r0, #1
   b903e:	4770      	bx	lr

000b9040 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b9040:	7903      	ldrb	r3, [r0, #4]
   b9042:	2b03      	cmp	r3, #3
   b9044:	d0fc      	beq.n	b9040 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b9046:	2001      	movs	r0, #1
   b9048:	4770      	bx	lr

000b904a <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b904a:	2000      	movs	r0, #0
   b904c:	4770      	bx	lr

000b904e <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b904e:	7181      	strb	r1, [r0, #6]
}
   b9050:	4770      	bx	lr

000b9052 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b9052:	7141      	strb	r1, [r0, #5]
}
   b9054:	4770      	bx	lr

000b9056 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b9056:	72c1      	strb	r1, [r0, #11]
}
   b9058:	4770      	bx	lr

000b905a <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b905a:	7301      	strb	r1, [r0, #12]
}
   b905c:	4770      	bx	lr

000b905e <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b905e:	7341      	strb	r1, [r0, #13]
}
   b9060:	4770      	bx	lr

000b9062 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b9062:	7b83      	ldrb	r3, [r0, #14]
   b9064:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b9068:	4311      	orrs	r1, r2
   b906a:	7381      	strb	r1, [r0, #14]
}
   b906c:	4770      	bx	lr

000b906e <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b906e:	79c0      	ldrb	r0, [r0, #7]
}
   b9070:	4770      	bx	lr

000b9072 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b9072:	7a00      	ldrb	r0, [r0, #8]
}
   b9074:	4770      	bx	lr

000b9076 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b9076:	7a40      	ldrb	r0, [r0, #9]
}
   b9078:	4770      	bx	lr

000b907a <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b907a:	7a80      	ldrb	r0, [r0, #10]
}
   b907c:	4770      	bx	lr

000b907e <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b907e:	8a00      	ldrh	r0, [r0, #16]
}
   b9080:	b200      	sxth	r0, r0
   b9082:	4770      	bx	lr

000b9084 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b9084:	7900      	ldrb	r0, [r0, #4]
}
   b9086:	4770      	bx	lr

000b9088 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b9088:	7101      	strb	r1, [r0, #4]
}
   b908a:	4770      	bx	lr

000b908c <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b908c:	8a40      	ldrh	r0, [r0, #18]
}
   b908e:	b280      	uxth	r0, r0
   b9090:	4770      	bx	lr

000b9092 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b9092:	8a80      	ldrh	r0, [r0, #20]
}
   b9094:	b280      	uxth	r0, r0
   b9096:	4770      	bx	lr

000b9098 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b9098:	8ac0      	ldrh	r0, [r0, #22]
}
   b909a:	b280      	uxth	r0, r0
   b909c:	4770      	bx	lr

000b909e <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b909e:	b538      	push	{r3, r4, r5, lr}
   b90a0:	4605      	mov	r5, r0
   b90a2:	460c      	mov	r4, r1
    while (!available())
   b90a4:	682b      	ldr	r3, [r5, #0]
   b90a6:	4628      	mov	r0, r5
   b90a8:	68db      	ldr	r3, [r3, #12]
   b90aa:	4798      	blx	r3
   b90ac:	b928      	cbnz	r0, b90ba <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b90ae:	2c00      	cmp	r4, #0
   b90b0:	d0f8      	beq.n	b90a4 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b90b2:	4620      	mov	r0, r4
   b90b4:	f002 f9a4 	bl	bb400 <delay>
   b90b8:	e7f4      	b.n	b90a4 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b90ba:	bd38      	pop	{r3, r4, r5, pc}

000b90bc <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b90bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b90be:	4605      	mov	r5, r0
   b90c0:	460f      	mov	r7, r1
   b90c2:	4614      	mov	r4, r2
   b90c4:	f001 fd8e 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b90c8:	4606      	mov	r6, r0
   b90ca:	f001 fd8b 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b90ce:	1b80      	subs	r0, r0, r6
   b90d0:	42b8      	cmp	r0, r7
   b90d2:	d20a      	bcs.n	b90ea <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b90d4:	682b      	ldr	r3, [r5, #0]
   b90d6:	4628      	mov	r0, r5
   b90d8:	68db      	ldr	r3, [r3, #12]
   b90da:	4798      	blx	r3
   b90dc:	b930      	cbnz	r0, b90ec <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b90de:	2c00      	cmp	r4, #0
   b90e0:	d0f3      	beq.n	b90ca <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b90e2:	4620      	mov	r0, r4
   b90e4:	f002 f98c 	bl	bb400 <delay>
   b90e8:	e7ef      	b.n	b90ca <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b90ea:	2000      	movs	r0, #0
}
   b90ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b90ee <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b90ee:	b570      	push	{r4, r5, r6, lr}
   b90f0:	4604      	mov	r4, r0
   b90f2:	460e      	mov	r6, r1
   b90f4:	f001 fd76 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b90f8:	4605      	mov	r5, r0
   b90fa:	f001 fd73 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b90fe:	1b40      	subs	r0, r0, r5
   b9100:	42b0      	cmp	r0, r6
   b9102:	d204      	bcs.n	b910e <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b9104:	7923      	ldrb	r3, [r4, #4]
   b9106:	2b03      	cmp	r3, #3
   b9108:	d0f7      	beq.n	b90fa <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b910a:	2001      	movs	r0, #1
}
   b910c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b910e:	2000      	movs	r0, #0
   b9110:	e7fc      	b.n	b910c <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b9112 <_ZN15RHGenericDriver7waitCADEv>:
{
   b9112:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b9114:	69c3      	ldr	r3, [r0, #28]
{
   b9116:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b9118:	b1b3      	cbz	r3, b9148 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b911a:	f001 fd63 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b911e:	2664      	movs	r6, #100	; 0x64
   b9120:	4605      	mov	r5, r0
    while (isChannelActive())
   b9122:	6823      	ldr	r3, [r4, #0]
   b9124:	4620      	mov	r0, r4
   b9126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9128:	4798      	blx	r3
   b912a:	b168      	cbz	r0, b9148 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b912c:	f001 fd5a 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b9130:	69e3      	ldr	r3, [r4, #28]
   b9132:	1b40      	subs	r0, r0, r5
   b9134:	4298      	cmp	r0, r3
   b9136:	d809      	bhi.n	b914c <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b9138:	210a      	movs	r1, #10
   b913a:	2001      	movs	r0, #1
   b913c:	f004 fbf1 	bl	bd922 <_Z6randomii>
   b9140:	4370      	muls	r0, r6
   b9142:	f002 f95d 	bl	bb400 <delay>
    while (isChannelActive())
   b9146:	e7ec      	b.n	b9122 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b9148:	2001      	movs	r0, #1
}
   b914a:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b914c:	2000      	movs	r0, #0
   b914e:	e7fc      	b.n	b914a <_ZN15RHGenericDriver7waitCADEv+0x38>

000b9150 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b9150:	4a06      	ldr	r2, [pc, #24]	; (b916c <_ZN15RHGenericDriverC1Ev+0x1c>)
   b9152:	6002      	str	r2, [r0, #0]
   b9154:	21ff      	movs	r1, #255	; 0xff
   b9156:	2200      	movs	r2, #0
   b9158:	7102      	strb	r2, [r0, #4]
   b915a:	7141      	strb	r1, [r0, #5]
   b915c:	8242      	strh	r2, [r0, #18]
   b915e:	72c1      	strb	r1, [r0, #11]
   b9160:	8282      	strh	r2, [r0, #20]
   b9162:	8181      	strh	r1, [r0, #12]
   b9164:	7382      	strb	r2, [r0, #14]
   b9166:	82c2      	strh	r2, [r0, #22]
   b9168:	61c2      	str	r2, [r0, #28]
}
   b916a:	4770      	bx	lr
   b916c:	000c086c 	.word	0x000c086c

000b9170 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b9170:	4770      	bx	lr

000b9172 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b9172:	4770      	bx	lr

000b9174 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b9174:	4770      	bx	lr

000b9176 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b9176:	4770      	bx	lr

000b9178 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b9178:	4770      	bx	lr

000b917a <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b917a:	7141      	strb	r1, [r0, #5]
}
   b917c:	4770      	bx	lr

000b917e <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b917e:	7181      	strb	r1, [r0, #6]
}
   b9180:	4770      	bx	lr

000b9182 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b9182:	7101      	strb	r1, [r0, #4]
}
   b9184:	4770      	bx	lr
	...

000b9188 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b9188:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b918a:	4d03      	ldr	r5, [pc, #12]	; (b9198 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b918c:	6005      	str	r5, [r0, #0]
   b918e:	7101      	strb	r1, [r0, #4]
   b9190:	7142      	strb	r2, [r0, #5]
   b9192:	7183      	strb	r3, [r0, #6]
}
   b9194:	bd30      	pop	{r4, r5, pc}
   b9196:	bf00      	nop
   b9198:	000c08ec 	.word	0x000c08ec

000b919c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b919c:	4770      	bx	lr

000b919e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b919e:	b510      	push	{r4, lr}
  }
   b91a0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b91a2:	4604      	mov	r4, r0
  }
   b91a4:	f7fa ff7b 	bl	b409e <_ZdlPvj>
   b91a8:	4620      	mov	r0, r4
   b91aa:	bd10      	pop	{r4, pc}

000b91ac <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b91ac:	b40e      	push	{r1, r2, r3}
   b91ae:	b503      	push	{r0, r1, lr}
   b91b0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b91b2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b91b4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b91b8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b91ba:	f004 fb76 	bl	bd8aa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b91be:	b002      	add	sp, #8
   b91c0:	f85d eb04 	ldr.w	lr, [sp], #4
   b91c4:	b003      	add	sp, #12
   b91c6:	4770      	bx	lr

000b91c8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b91c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b91ca:	4604      	mov	r4, r0
   b91cc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b91ce:	7922      	ldrb	r2, [r4, #4]
   b91d0:	68a3      	ldr	r3, [r4, #8]
   b91d2:	b132      	cbz	r2, b91e2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b91d4:	b9a3      	cbnz	r3, b9200 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b91d6:	490b      	ldr	r1, [pc, #44]	; (b9204 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b91d8:	b002      	add	sp, #8
   b91da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b91de:	f004 ba5b 	b.w	bd698 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b91e2:	4a09      	ldr	r2, [pc, #36]	; (b9208 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b91e4:	7b26      	ldrb	r6, [r4, #12]
   b91e6:	4d09      	ldr	r5, [pc, #36]	; (b920c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b91e8:	4909      	ldr	r1, [pc, #36]	; (b9210 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b91ea:	7b64      	ldrb	r4, [r4, #13]
   b91ec:	2e01      	cmp	r6, #1
   b91ee:	bf18      	it	ne
   b91f0:	4629      	movne	r1, r5
   b91f2:	e9cd 1400 	strd	r1, r4, [sp]
   b91f6:	4907      	ldr	r1, [pc, #28]	; (b9214 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b91f8:	f7ff ffd8 	bl	b91ac <_ZN5Print6printfEPKcz>
  }
   b91fc:	b002      	add	sp, #8
   b91fe:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b9200:	4a05      	ldr	r2, [pc, #20]	; (b9218 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b9202:	e7ef      	b.n	b91e4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b9204:	000c0929 	.word	0x000c0929
   b9208:	000c0d65 	.word	0x000c0d65
   b920c:	000c0925 	.word	0x000c0925
   b9210:	000c0921 	.word	0x000c0921
   b9214:	000c093f 	.word	0x000c093f
   b9218:	000c0918 	.word	0x000c0918

000b921c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b921c:	b510      	push	{r4, lr}
   b921e:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b9220:	f7ff ffb2 	bl	b9188 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b9224:	4b05      	ldr	r3, [pc, #20]	; (b923c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b9226:	6023      	str	r3, [r4, #0]
  {
   b9228:	4b05      	ldr	r3, [pc, #20]	; (b9240 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b922a:	60a3      	str	r3, [r4, #8]
   b922c:	2301      	movs	r3, #1
   b922e:	7323      	strb	r3, [r4, #12]
   b9230:	2300      	movs	r3, #0
   b9232:	6123      	str	r3, [r4, #16]
   b9234:	82a3      	strh	r3, [r4, #20]
{
}
   b9236:	4620      	mov	r0, r4
   b9238:	bd10      	pop	{r4, pc}
   b923a:	bf00      	nop
   b923c:	000c0978 	.word	0x000c0978
   b9240:	000c0964 	.word	0x000c0964

000b9244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b9244:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b9246:	4c0b      	ldr	r4, [pc, #44]	; (b9274 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b9248:	7821      	ldrb	r1, [r4, #0]
   b924a:	f3bf 8f5b 	dmb	ish
   b924e:	f011 0101 	ands.w	r1, r1, #1
   b9252:	d10b      	bne.n	b926c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9254:	4620      	mov	r0, r4
   b9256:	9101      	str	r1, [sp, #4]
   b9258:	f7fa ff30 	bl	b40bc <__cxa_guard_acquire>
   b925c:	9901      	ldr	r1, [sp, #4]
   b925e:	b128      	cbz	r0, b926c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9260:	4805      	ldr	r0, [pc, #20]	; (b9278 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9262:	f004 fb77 	bl	bd954 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9266:	4620      	mov	r0, r4
   b9268:	f7fa ff2d 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b926c:	4802      	ldr	r0, [pc, #8]	; (b9278 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b926e:	b002      	add	sp, #8
   b9270:	bd10      	pop	{r4, pc}
   b9272:	bf00      	nop
   b9274:	2003e450 	.word	0x2003e450
   b9278:	2003e454 	.word	0x2003e454

000b927c <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b927c:	b507      	push	{r0, r1, r2, lr}
   b927e:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b9280:	f7ff ffe0 	bl	b9244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b9284:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b9286:	b003      	add	sp, #12
   b9288:	f85d eb04 	ldr.w	lr, [sp], #4
   b928c:	f004 bc1a 	b.w	bdac4 <_ZN8SPIClass8transferEh>

000b9290 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b9290:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b9292:	f7ff ffd7 	bl	b9244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b9296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b929a:	f004 bc19 	b.w	bdad0 <_ZN8SPIClass15attachInterruptEv>

000b929e <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b929e:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b92a0:	f7ff ffd0 	bl	b9244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b92a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b92a8:	f004 bc13 	b.w	bdad2 <_ZN8SPIClass15detachInterruptEv>

000b92ac <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b92ac:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b92ae:	7903      	ldrb	r3, [r0, #4]
   b92b0:	2b04      	cmp	r3, #4
   b92b2:	d020      	beq.n	b92f6 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b92b4:	2b03      	cmp	r3, #3
   b92b6:	d020      	beq.n	b92fa <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b92b8:	2b02      	cmp	r3, #2
   b92ba:	d020      	beq.n	b92fe <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b92bc:	4a11      	ldr	r2, [pc, #68]	; (b9304 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b92be:	4912      	ldr	r1, [pc, #72]	; (b9308 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b92c0:	2b01      	cmp	r3, #1
   b92c2:	bf18      	it	ne
   b92c4:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b92c6:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b92c8:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b92ca:	3901      	subs	r1, #1
   b92cc:	bf18      	it	ne
   b92ce:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b92d0:	b133      	cbz	r3, b92e0 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b92d2:	2b01      	cmp	r3, #1
   b92d4:	d004      	beq.n	b92e0 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b92d6:	2b02      	cmp	r3, #2
   b92d8:	d002      	beq.n	b92e0 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b92da:	2b03      	cmp	r3, #3
   b92dc:	bf18      	it	ne
   b92de:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b92e0:	2400      	movs	r4, #0
   b92e2:	7304      	strb	r4, [r0, #12]
   b92e4:	6102      	str	r2, [r0, #16]
   b92e6:	7501      	strb	r1, [r0, #20]
   b92e8:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b92ea:	f7ff ffab 	bl	b9244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b92ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b92f2:	f004 bb39 	b.w	bd968 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b92f6:	4a05      	ldr	r2, [pc, #20]	; (b930c <_ZN13RHHardwareSPI5beginEv+0x60>)
   b92f8:	e7e5      	b.n	b92c6 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b92fa:	4a05      	ldr	r2, [pc, #20]	; (b9310 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b92fc:	e7e3      	b.n	b92c6 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b92fe:	4a05      	ldr	r2, [pc, #20]	; (b9314 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b9300:	e7e1      	b.n	b92c6 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b9302:	bf00      	nop
   b9304:	001e8480 	.word	0x001e8480
   b9308:	000f4240 	.word	0x000f4240
   b930c:	00f42400 	.word	0x00f42400
   b9310:	007a1200 	.word	0x007a1200
   b9314:	003d0900 	.word	0x003d0900

000b9318 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b9318:	b508      	push	{r3, lr}
        instance().end();
   b931a:	f7ff ff93 	bl	b9244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b931e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9322:	f004 bb35 	b.w	bd990 <_ZN8SPIClass3endEv>

000b9326 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b9326:	b510      	push	{r4, lr}
   b9328:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b932a:	f7ff ff8b 	bl	b9244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b932e:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b9332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9336:	f004 bb57 	b.w	bd9e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b933a <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b933a:	b508      	push	{r3, lr}
        instance().endTransaction();
   b933c:	f7ff ff82 	bl	b9244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b9340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9344:	f004 bb36 	b.w	bd9b4 <_ZN8SPIClass14endTransactionEv>

000b9348 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b9348:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b934a:	f7ff ff7b 	bl	b9244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b934e:	bd08      	pop	{r3, pc}

000b9350 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b9350:	2300      	movs	r3, #0
   b9352:	4802      	ldr	r0, [pc, #8]	; (b935c <_GLOBAL__sub_I_hardware_spi+0xc>)
   b9354:	461a      	mov	r2, r3
   b9356:	4619      	mov	r1, r3
   b9358:	f7ff bf60 	b.w	b921c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b935c:	2003e45c 	.word	0x2003e45c

000b9360 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b9360:	2a01      	cmp	r2, #1
   b9362:	d105      	bne.n	b9370 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b9364:	7a00      	ldrb	r0, [r0, #8]
   b9366:	780b      	ldrb	r3, [r1, #0]
   b9368:	1a1b      	subs	r3, r3, r0
   b936a:	4258      	negs	r0, r3
   b936c:	4158      	adcs	r0, r3
   b936e:	4770      	bx	lr
   b9370:	2000      	movs	r0, #0
}
   b9372:	4770      	bx	lr

000b9374 <_ZN6RHMesh5doArpEh>:
{
   b9374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b9378:	4c25      	ldr	r4, [pc, #148]	; (b9410 <_ZN6RHMesh5doArpEh+0x9c>)
   b937a:	2301      	movs	r3, #1
{
   b937c:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b937e:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b9380:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9382:	2300      	movs	r3, #0
{
   b9384:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b9386:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9388:	9300      	str	r3, [sp, #0]
   b938a:	2203      	movs	r2, #3
   b938c:	23ff      	movs	r3, #255	; 0xff
   b938e:	4621      	mov	r1, r4
{
   b9390:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9392:	f000 fbe5 	bl	b9b60 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b9396:	b120      	cbz	r0, b93a2 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b9398:	2500      	movs	r5, #0
}
   b939a:	4628      	mov	r0, r5
   b939c:	b006      	add	sp, #24
   b939e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b93a2:	237a      	movs	r3, #122	; 0x7a
   b93a4:	f88d 3017 	strb.w	r3, [sp, #23]
   b93a8:	f001 fc1c 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b93ac:	f106 0904 	add.w	r9, r6, #4
   b93b0:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b93b2:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b93b6:	f001 fc15 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b93ba:	1a29      	subs	r1, r5, r0
   b93bc:	2900      	cmp	r1, #0
   b93be:	ddeb      	ble.n	b9398 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b93c0:	2200      	movs	r2, #0
   b93c2:	b289      	uxth	r1, r1
   b93c4:	4648      	mov	r0, r9
   b93c6:	f7ff fdbe 	bl	b8f46 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b93ca:	2800      	cmp	r0, #0
   b93cc:	d0f3      	beq.n	b93b6 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b93ce:	2300      	movs	r3, #0
   b93d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b93d4:	e9cd 3300 	strd	r3, r3, [sp]
   b93d8:	f10d 0217 	add.w	r2, sp, #23
   b93dc:	4621      	mov	r1, r4
   b93de:	4630      	mov	r0, r6
   b93e0:	f000 fbc8 	bl	b9b74 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b93e4:	4605      	mov	r5, r0
   b93e6:	2800      	cmp	r0, #0
   b93e8:	d0e3      	beq.n	b93b2 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b93ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b93ee:	2b01      	cmp	r3, #1
   b93f0:	d9df      	bls.n	b93b2 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b93f2:	f894 a000 	ldrb.w	sl, [r4]
   b93f6:	f1ba 0f02 	cmp.w	sl, #2
   b93fa:	d1da      	bne.n	b93b2 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b93fc:	4648      	mov	r0, r9
   b93fe:	f7ff fde7 	bl	b8fd0 <_ZN10RHDatagram10headerFromEv>
   b9402:	4653      	mov	r3, sl
   b9404:	4602      	mov	r2, r0
   b9406:	4639      	mov	r1, r7
   b9408:	4630      	mov	r0, r6
   b940a:	f000 fb21 	bl	b9a50 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b940e:	e7c4      	b.n	b939a <_ZN6RHMesh5doArpEh+0x26>
   b9410:	2003e474 	.word	0x2003e474

000b9414 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b9414:	2a01      	cmp	r2, #1
{
   b9416:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b941a:	4607      	mov	r7, r0
   b941c:	460e      	mov	r6, r1
   b941e:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b9420:	d93b      	bls.n	b949a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b9422:	794d      	ldrb	r5, [r1, #5]
   b9424:	2d02      	cmp	r5, #2
   b9426:	d130      	bne.n	b948a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b9428:	f100 0804 	add.w	r8, r0, #4
   b942c:	79c9      	ldrb	r1, [r1, #7]
   b942e:	9101      	str	r1, [sp, #4]
   b9430:	4640      	mov	r0, r8
   b9432:	f7ff fdcd 	bl	b8fd0 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b9436:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b9438:	462b      	mov	r3, r5
   b943a:	4602      	mov	r2, r0
   b943c:	9901      	ldr	r1, [sp, #4]
   b943e:	4638      	mov	r0, r7
   b9440:	f000 fb06 	bl	b9a50 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b9444:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b9446:	f106 0308 	add.w	r3, r6, #8
   b944a:	2400      	movs	r4, #0
   b944c:	4622      	mov	r2, r4
   b944e:	4295      	cmp	r5, r2
   b9450:	f104 0401 	add.w	r4, r4, #1
   b9454:	b2e4      	uxtb	r4, r4
   b9456:	d904      	bls.n	b9462 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b9458:	f813 2b01 	ldrb.w	r2, [r3], #1
   b945c:	7a39      	ldrb	r1, [r7, #8]
   b945e:	4291      	cmp	r1, r2
   b9460:	d1f4      	bne.n	b944c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b9462:	f104 0108 	add.w	r1, r4, #8
   b9466:	440e      	add	r6, r1
	while (i < numRoutes)
   b9468:	42a5      	cmp	r5, r4
   b946a:	d916      	bls.n	b949a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b946c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b9470:	9101      	str	r1, [sp, #4]
   b9472:	4640      	mov	r0, r8
   b9474:	f7ff fdac 	bl	b8fd0 <_ZN10RHDatagram10headerFromEv>
   b9478:	3401      	adds	r4, #1
   b947a:	4602      	mov	r2, r0
   b947c:	9901      	ldr	r1, [sp, #4]
   b947e:	2302      	movs	r3, #2
   b9480:	4638      	mov	r0, r7
   b9482:	b2e4      	uxtb	r4, r4
   b9484:	f000 fae4 	bl	b9a50 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b9488:	e7ee      	b.n	b9468 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b948a:	2d03      	cmp	r5, #3
   b948c:	d105      	bne.n	b949a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b948e:	7989      	ldrb	r1, [r1, #6]
}
   b9490:	b002      	add	sp, #8
   b9492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b9496:	f000 bac4 	b.w	b9a22 <_ZN8RHRouter13deleteRouteToEh>
}
   b949a:	b002      	add	sp, #8
   b949c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b94a0 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b94a0:	b510      	push	{r4, lr}
   b94a2:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b94a4:	f000 fb14 	bl	b9ad0 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b94a8:	4b01      	ldr	r3, [pc, #4]	; (b94b0 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b94aa:	6023      	str	r3, [r4, #0]
}
   b94ac:	4620      	mov	r0, r4
   b94ae:	bd10      	pop	{r4, pc}
   b94b0:	000c09ac 	.word	0x000c09ac

000b94b4 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b94b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b94b8:	2a79      	cmp	r2, #121	; 0x79
{
   b94ba:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b94be:	4606      	mov	r6, r0
   b94c0:	460f      	mov	r7, r1
   b94c2:	4614      	mov	r4, r2
   b94c4:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b94c6:	d825      	bhi.n	b9514 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b94c8:	2bff      	cmp	r3, #255	; 0xff
   b94ca:	d114      	bne.n	b94f6 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b94cc:	f8df 8048 	ldr.w	r8, [pc, #72]	; b9518 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b94d0:	4640      	mov	r0, r8
   b94d2:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b94d4:	4622      	mov	r2, r4
   b94d6:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b94d8:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b94dc:	f005 feb4 	bl	bf248 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b94e0:	1c62      	adds	r2, r4, #1
   b94e2:	f8cd 9020 	str.w	r9, [sp, #32]
   b94e6:	462b      	mov	r3, r5
   b94e8:	4641      	mov	r1, r8
   b94ea:	4630      	mov	r0, r6
   b94ec:	b2d2      	uxtb	r2, r2
}
   b94ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b94f2:	f000 bb35 	b.w	b9b60 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b94f6:	4619      	mov	r1, r3
   b94f8:	f000 fa4f 	bl	b999a <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b94fc:	2800      	cmp	r0, #0
   b94fe:	d1e5      	bne.n	b94cc <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b9500:	6833      	ldr	r3, [r6, #0]
   b9502:	4629      	mov	r1, r5
   b9504:	689b      	ldr	r3, [r3, #8]
   b9506:	4630      	mov	r0, r6
   b9508:	4798      	blx	r3
   b950a:	2800      	cmp	r0, #0
   b950c:	d1de      	bne.n	b94cc <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b950e:	2002      	movs	r0, #2
}
   b9510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b9514:	2001      	movs	r0, #1
   b9516:	e7fb      	b.n	b9510 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b9518:	2003e474 	.word	0x2003e474

000b951c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9520:	b089      	sub	sp, #36	; 0x24
   b9522:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b9524:	237a      	movs	r3, #122	; 0x7a
   b9526:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b952a:	f10d 031f 	add.w	r3, sp, #31
   b952e:	9303      	str	r3, [sp, #12]
   b9530:	f10d 031e 	add.w	r3, sp, #30
   b9534:	9302      	str	r3, [sp, #8]
   b9536:	4e5d      	ldr	r6, [pc, #372]	; (b96ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b9538:	f10d 031d 	add.w	r3, sp, #29
   b953c:	9301      	str	r3, [sp, #4]
   b953e:	ab07      	add	r3, sp, #28
   b9540:	9300      	str	r3, [sp, #0]
{     
   b9542:	4689      	mov	r9, r1
   b9544:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b9546:	f10d 031b 	add.w	r3, sp, #27
   b954a:	f10d 021a 	add.w	r2, sp, #26
   b954e:	4631      	mov	r1, r6
{     
   b9550:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b9554:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b9556:	f000 fb0d 	bl	b9b74 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b955a:	4604      	mov	r4, r0
   b955c:	b920      	cbnz	r0, b9568 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b955e:	2400      	movs	r4, #0
}
   b9560:	4620      	mov	r0, r4
   b9562:	b009      	add	sp, #36	; 0x24
   b9564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b9568:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b956c:	b373      	cbz	r3, b95cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b956e:	7832      	ldrb	r2, [r6, #0]
   b9570:	bb62      	cbnz	r2, b95cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b9572:	f1b8 0f00 	cmp.w	r8, #0
   b9576:	d003      	beq.n	b9580 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b9578:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b957c:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b9580:	f1bb 0f00 	cmp.w	fp, #0
   b9584:	d003      	beq.n	b958e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b9586:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b958a:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b958e:	f1ba 0f00 	cmp.w	sl, #0
   b9592:	d003      	beq.n	b959c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b9594:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b9598:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b959c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b959e:	b11a      	cbz	r2, b95a8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b95a0:	9914      	ldr	r1, [sp, #80]	; 0x50
   b95a2:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b95a6:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b95a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b95aa:	b11a      	cbz	r2, b95b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b95ac:	9915      	ldr	r1, [sp, #84]	; 0x54
   b95ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b95b2:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b95b4:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b95b6:	493e      	ldr	r1, [pc, #248]	; (b96b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b95b8:	3b01      	subs	r3, #1
   b95ba:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b95bc:	429a      	cmp	r2, r3
		*len = msgLen;
   b95be:	bf88      	it	hi
   b95c0:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b95c2:	783a      	ldrb	r2, [r7, #0]
   b95c4:	4648      	mov	r0, r9
   b95c6:	f005 fe3f 	bl	bf248 <memcpy>
	    return true;
   b95ca:	e7c9      	b.n	b9560 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b95cc:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b95d0:	2aff      	cmp	r2, #255	; 0xff
   b95d2:	d1c4      	bne.n	b955e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b95d4:	2b01      	cmp	r3, #1
   b95d6:	d9c2      	bls.n	b955e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b95d8:	7832      	ldrb	r2, [r6, #0]
   b95da:	2a01      	cmp	r2, #1
   b95dc:	d1bf      	bne.n	b955e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b95de:	7a2a      	ldrb	r2, [r5, #8]
   b95e0:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b95e4:	42a2      	cmp	r2, r4
   b95e6:	d0ba      	beq.n	b955e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b95e8:	1edf      	subs	r7, r3, #3
   b95ea:	4932      	ldr	r1, [pc, #200]	; (b96b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b95ec:	b2ff      	uxtb	r7, r7
   b95ee:	2300      	movs	r3, #0
   b95f0:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b95f4:	4547      	cmp	r7, r8
   b95f6:	d906      	bls.n	b9606 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b95f8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b95fc:	4282      	cmp	r2, r0
   b95fe:	f103 0301 	add.w	r3, r3, #1
   b9602:	d1f5      	bne.n	b95f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b9604:	e7ab      	b.n	b955e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b9606:	f105 0904 	add.w	r9, r5, #4
   b960a:	4648      	mov	r0, r9
   b960c:	f7ff fce0 	bl	b8fd0 <_ZN10RHDatagram10headerFromEv>
   b9610:	2302      	movs	r3, #2
   b9612:	4602      	mov	r2, r0
   b9614:	4621      	mov	r1, r4
   b9616:	4628      	mov	r0, r5
   b9618:	f000 fa1a 	bl	b9a50 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b961c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b9620:	b193      	cbz	r3, b9648 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b9622:	4c22      	ldr	r4, [pc, #136]	; (b96ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b9624:	1ba3      	subs	r3, r4, r6
   b9626:	b2db      	uxtb	r3, r3
   b9628:	429f      	cmp	r7, r3
   b962a:	d90c      	bls.n	b9646 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b962c:	78e1      	ldrb	r1, [r4, #3]
   b962e:	9105      	str	r1, [sp, #20]
   b9630:	4648      	mov	r0, r9
   b9632:	f7ff fccd 	bl	b8fd0 <_ZN10RHDatagram10headerFromEv>
   b9636:	9905      	ldr	r1, [sp, #20]
   b9638:	4602      	mov	r2, r0
   b963a:	2302      	movs	r3, #2
   b963c:	4628      	mov	r0, r5
   b963e:	f000 fa07 	bl	b9a50 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b9642:	3401      	adds	r4, #1
   b9644:	e7ee      	b.n	b9624 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b9646:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b9648:	682b      	ldr	r3, [r5, #0]
   b964a:	7872      	ldrb	r2, [r6, #1]
   b964c:	68db      	ldr	r3, [r3, #12]
   b964e:	491a      	ldr	r1, [pc, #104]	; (b96b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b9650:	4628      	mov	r0, r5
   b9652:	4798      	blx	r3
   b9654:	4604      	mov	r4, r0
   b9656:	b160      	cbz	r0, b9672 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b9658:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b965a:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b965c:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b965e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b9662:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b9666:	4911      	ldr	r1, [pc, #68]	; (b96ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b9668:	9400      	str	r4, [sp, #0]
   b966a:	4628      	mov	r0, r5
   b966c:	f000 fa78 	bl	b9b60 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b9670:	e776      	b.n	b9560 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b9672:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b9676:	4543      	cmp	r3, r8
   b9678:	f67f af71 	bls.w	b955e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b967c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b9680:	2b00      	cmp	r3, #0
   b9682:	f43f af6c 	beq.w	b955e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b9686:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b968a:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b968c:	4907      	ldr	r1, [pc, #28]	; (b96ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b968e:	443e      	add	r6, r7
		tmpMessageLen++;
   b9690:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b9692:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9694:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b9698:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b969a:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b969c:	9300      	str	r3, [sp, #0]
   b969e:	4628      	mov	r0, r5
   b96a0:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b96a2:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b96a6:	f000 fa25 	bl	b9af4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b96aa:	e759      	b.n	b9560 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b96ac:	2003e474 	.word	0x2003e474
   b96b0:	2003e475 	.word	0x2003e475
   b96b4:	2003e477 	.word	0x2003e477
   b96b8:	2003e476 	.word	0x2003e476

000b96bc <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b96bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b96c0:	b085      	sub	sp, #20
   b96c2:	4680      	mov	r8, r0
   b96c4:	461c      	mov	r4, r3
   b96c6:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   b96ca:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b96cc:	4689      	mov	r9, r1
   b96ce:	4692      	mov	sl, r2
   b96d0:	f001 fa88 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   b96d4:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   b96d8:	4404      	add	r4, r0
   b96da:	f001 fa83 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b96de:	1a20      	subs	r0, r4, r0
   b96e0:	2800      	cmp	r0, #0
   b96e2:	dd16      	ble.n	b9712 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   b96e4:	b281      	uxth	r1, r0
   b96e6:	2200      	movs	r2, #0
   b96e8:	4658      	mov	r0, fp
   b96ea:	f7ff fc2c 	bl	b8f46 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b96ee:	2800      	cmp	r0, #0
   b96f0:	d0f3      	beq.n	b96da <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   b96f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b96f4:	9300      	str	r3, [sp, #0]
   b96f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b96fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b96fc:	9501      	str	r5, [sp, #4]
   b96fe:	4652      	mov	r2, sl
   b9700:	4649      	mov	r1, r9
   b9702:	4640      	mov	r0, r8
   b9704:	f7ff ff0a 	bl	b951c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b9708:	2800      	cmp	r0, #0
   b970a:	d0e6      	beq.n	b96da <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   b970c:	b005      	add	sp, #20
   b970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   b9712:	2000      	movs	r0, #0
   b9714:	e7fa      	b.n	b970c <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000b9718 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b9718:	b5f0      	push	{r4, r5, r6, r7, lr}
   b971a:	b085      	sub	sp, #20
   b971c:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b971e:	3004      	adds	r0, #4
{
   b9720:	460e      	mov	r6, r1
   b9722:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b9724:	f7ff fc54 	bl	b8fd0 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b9728:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b972a:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b972c:	4631      	mov	r1, r6
   b972e:	4628      	mov	r0, r5
   b9730:	f000 f94a 	bl	b99c8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b9734:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b9736:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b9738:	d001      	beq.n	b973e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b973a:	2805      	cmp	r0, #5
   b973c:	d11b      	bne.n	b9776 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b973e:	7831      	ldrb	r1, [r6, #0]
   b9740:	4628      	mov	r0, r5
   b9742:	f000 f96e 	bl	b9a22 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b9746:	7872      	ldrb	r2, [r6, #1]
   b9748:	7a2b      	ldrb	r3, [r5, #8]
   b974a:	429a      	cmp	r2, r3
   b974c:	d013      	beq.n	b9776 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b974e:	4c0b      	ldr	r4, [pc, #44]	; (b977c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b9750:	2303      	movs	r3, #3
   b9752:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b9754:	7833      	ldrb	r3, [r6, #0]
   b9756:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b9758:	7871      	ldrb	r1, [r6, #1]
   b975a:	2302      	movs	r3, #2
   b975c:	463a      	mov	r2, r7
   b975e:	4628      	mov	r0, r5
   b9760:	f000 f976 	bl	b9a50 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b9764:	2300      	movs	r3, #0
   b9766:	9300      	str	r3, [sp, #0]
   b9768:	4621      	mov	r1, r4
   b976a:	7873      	ldrb	r3, [r6, #1]
   b976c:	2202      	movs	r2, #2
   b976e:	4628      	mov	r0, r5
   b9770:	f000 f9f6 	bl	b9b60 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b9774:	4604      	mov	r4, r0
}
   b9776:	4620      	mov	r0, r4
   b9778:	b005      	add	sp, #20
   b977a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b977c:	2003e474 	.word	0x2003e474

000b9780 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b9780:	b510      	push	{r4, lr}
   b9782:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b9784:	f7ff fbd4 	bl	b8f30 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b9788:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b978a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b978c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b978e:	2303      	movs	r3, #3
    _retransmissions = 0;
   b9790:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b9792:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b9794:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b9796:	f44f 7280 	mov.w	r2, #256	; 0x100
   b979a:	f104 0011 	add.w	r0, r4, #17
   b979e:	f005 fd7b 	bl	bf298 <memset>
}
   b97a2:	4620      	mov	r0, r4
   b97a4:	bd10      	pop	{r4, pc}

000b97a6 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b97a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b97a8:	4604      	mov	r4, r0
   b97aa:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b97ac:	f7ff fc04 	bl	b8fb8 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b97b0:	4620      	mov	r0, r4
   b97b2:	2200      	movs	r2, #0
   b97b4:	2180      	movs	r1, #128	; 0x80
   b97b6:	f7ff fc03 	bl	b8fc0 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b97ba:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b97bc:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b97be:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b97c2:	f10d 010f 	add.w	r1, sp, #15
   b97c6:	2201      	movs	r2, #1
   b97c8:	4620      	mov	r0, r4
   b97ca:	f7ff fbc6 	bl	b8f5a <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b97ce:	4620      	mov	r0, r4
   b97d0:	f7ff fbb5 	bl	b8f3e <_ZN10RHDatagram14waitPacketSentEv>
}
   b97d4:	b004      	add	sp, #16
   b97d6:	bd10      	pop	{r4, pc}

000b97d8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b97d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b97dc:	7b05      	ldrb	r5, [r0, #12]
   b97de:	3501      	adds	r5, #1
   b97e0:	b2ed      	uxtb	r5, r5
{
   b97e2:	b087      	sub	sp, #28
   b97e4:	4604      	mov	r4, r0
   b97e6:	4689      	mov	r9, r1
   b97e8:	4692      	mov	sl, r2
   b97ea:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b97ec:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b97ee:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b97f0:	7c22      	ldrb	r2, [r4, #16]
   b97f2:	463b      	mov	r3, r7
   b97f4:	429a      	cmp	r2, r3
   b97f6:	f107 0701 	add.w	r7, r7, #1
   b97fa:	b2ff      	uxtb	r7, r7
   b97fc:	d36b      	bcc.n	b98d6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b97fe:	4629      	mov	r1, r5
   b9800:	4620      	mov	r0, r4
   b9802:	f7ff fbd9 	bl	b8fb8 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b9806:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b9808:	bf0d      	iteet	eq
   b980a:	22c0      	moveq	r2, #192	; 0xc0
   b980c:	2280      	movne	r2, #128	; 0x80
   b980e:	2140      	movne	r1, #64	; 0x40
   b9810:	2100      	moveq	r1, #0
   b9812:	4620      	mov	r0, r4
   b9814:	f7ff fbd4 	bl	b8fc0 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b9818:	4643      	mov	r3, r8
   b981a:	4652      	mov	r2, sl
   b981c:	4649      	mov	r1, r9
   b981e:	4620      	mov	r0, r4
   b9820:	f7ff fb9b 	bl	b8f5a <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b9824:	4620      	mov	r0, r4
   b9826:	f7ff fb8a 	bl	b8f3e <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b982a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b982e:	d054      	beq.n	b98da <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b9830:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b9832:	bf82      	ittt	hi
   b9834:	68a3      	ldrhi	r3, [r4, #8]
   b9836:	3301      	addhi	r3, #1
   b9838:	60a3      	strhi	r3, [r4, #8]
   b983a:	f001 f9d3 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b983e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b9842:	4683      	mov	fp, r0
   b9844:	2000      	movs	r0, #0
   b9846:	89e6      	ldrh	r6, [r4, #14]
   b9848:	f004 f86b 	bl	bd922 <_Z6randomii>
   b984c:	4370      	muls	r0, r6
   b984e:	bf48      	it	mi
   b9850:	30ff      	addmi	r0, #255	; 0xff
   b9852:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b9856:	fa1b f686 	uxtah	r6, fp, r6
   b985a:	f001 f9c3 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
   b985e:	1a30      	subs	r0, r6, r0
   b9860:	2800      	cmp	r0, #0
   b9862:	ddc5      	ble.n	b97f0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b9864:	b281      	uxth	r1, r0
   b9866:	2200      	movs	r2, #0
   b9868:	4620      	mov	r0, r4
   b986a:	f7ff fb6c 	bl	b8f46 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b986e:	2800      	cmp	r0, #0
   b9870:	d0f3      	beq.n	b985a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b9872:	f10d 0317 	add.w	r3, sp, #23
   b9876:	9302      	str	r3, [sp, #8]
   b9878:	f10d 0316 	add.w	r3, sp, #22
   b987c:	9301      	str	r3, [sp, #4]
   b987e:	2200      	movs	r2, #0
   b9880:	f10d 0315 	add.w	r3, sp, #21
   b9884:	9300      	str	r3, [sp, #0]
   b9886:	4611      	mov	r1, r2
   b9888:	ab05      	add	r3, sp, #20
   b988a:	4620      	mov	r0, r4
   b988c:	f7ff fbac 	bl	b8fe8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9890:	2800      	cmp	r0, #0
   b9892:	d0e2      	beq.n	b985a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b9894:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b9898:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b989c:	4542      	cmp	r2, r8
   b989e:	d10e      	bne.n	b98be <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b98a0:	f894 c004 	ldrb.w	ip, [r4, #4]
   b98a4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b98a8:	458c      	cmp	ip, r1
   b98aa:	d108      	bne.n	b98be <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b98ac:	2b00      	cmp	r3, #0
   b98ae:	da08      	bge.n	b98c2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b98b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b98b4:	42ab      	cmp	r3, r5
   b98b6:	d1d0      	bne.n	b985a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b98b8:	b007      	add	sp, #28
   b98ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b98be:	2b00      	cmp	r3, #0
   b98c0:	dbcb      	blt.n	b985a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b98c2:	18a1      	adds	r1, r4, r2
   b98c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b98c8:	7c49      	ldrb	r1, [r1, #17]
   b98ca:	4299      	cmp	r1, r3
   b98cc:	d1c5      	bne.n	b985a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b98ce:	4620      	mov	r0, r4
   b98d0:	f7ff ff69 	bl	b97a6 <_ZN18RHReliableDatagram11acknowledgeEhh>
   b98d4:	e7c1      	b.n	b985a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b98d6:	2000      	movs	r0, #0
   b98d8:	e7ee      	b.n	b98b8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b98da:	2001      	movs	r0, #1
   b98dc:	e7ec      	b.n	b98b8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b98de <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b98de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b98e2:	b089      	sub	sp, #36	; 0x24
   b98e4:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b98e8:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b98ec:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b98ee:	4604      	mov	r4, r0
   b98f0:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b98f2:	f7ff fb20 	bl	b8f36 <_ZN10RHDatagram9availableEv>
   b98f6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b98fa:	b920      	cbnz	r0, b9906 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b98fc:	2500      	movs	r5, #0
}
   b98fe:	4628      	mov	r0, r5
   b9900:	b009      	add	sp, #36	; 0x24
   b9902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b9906:	f10d 031f 	add.w	r3, sp, #31
   b990a:	9302      	str	r3, [sp, #8]
   b990c:	f10d 031e 	add.w	r3, sp, #30
   b9910:	9301      	str	r3, [sp, #4]
   b9912:	f10d 031d 	add.w	r3, sp, #29
   b9916:	9300      	str	r3, [sp, #0]
   b9918:	4620      	mov	r0, r4
   b991a:	ab07      	add	r3, sp, #28
   b991c:	f7ff fb64 	bl	b8fe8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9920:	4605      	mov	r5, r0
   b9922:	2800      	cmp	r0, #0
   b9924:	d0ea      	beq.n	b98fc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b9926:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b992a:	2b00      	cmp	r3, #0
   b992c:	dbe6      	blt.n	b98fc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b992e:	7922      	ldrb	r2, [r4, #4]
   b9930:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9934:	429a      	cmp	r2, r3
   b9936:	d106      	bne.n	b9946 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b9938:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b993c:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b9940:	4620      	mov	r0, r4
   b9942:	f7ff ff30 	bl	b97a6 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b9946:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b994a:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b994e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b9952:	f012 0f40 	tst.w	r2, #64	; 0x40
   b9956:	440c      	add	r4, r1
   b9958:	d002      	beq.n	b9960 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b995a:	7c60      	ldrb	r0, [r4, #17]
   b995c:	4298      	cmp	r0, r3
   b995e:	d0cd      	beq.n	b98fc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b9960:	b106      	cbz	r6, b9964 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b9962:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b9964:	f1b9 0f00 	cmp.w	r9, #0
   b9968:	d003      	beq.n	b9972 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b996a:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b996e:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b9972:	f1b8 0f00 	cmp.w	r8, #0
   b9976:	d001      	beq.n	b997c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b9978:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b997c:	b107      	cbz	r7, b9980 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b997e:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b9980:	7463      	strb	r3, [r4, #17]
		return true;
   b9982:	e7bc      	b.n	b98fe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b9984 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b9984:	4770      	bx	lr

000b9986 <_ZN8RHRouter4initEv>:
{
   b9986:	b510      	push	{r4, lr}
   b9988:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b998a:	3004      	adds	r0, #4
   b998c:	f7ff fb06 	bl	b8f9c <_ZN10RHDatagram4initEv>
    if (ret)
   b9990:	b110      	cbz	r0, b9998 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b9992:	231e      	movs	r3, #30
   b9994:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b9998:	bd10      	pop	{r4, pc}

000b999a <_ZN8RHRouter10getRouteToEh>:
{
   b999a:	b510      	push	{r4, lr}
   b999c:	4602      	mov	r2, r0
   b999e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b99a0:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b99a4:	428c      	cmp	r4, r1
   b99a6:	d108      	bne.n	b99ba <_ZN8RHRouter10getRouteToEh+0x20>
   b99a8:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b99ac:	b12c      	cbz	r4, b99ba <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b99ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b99b2:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b99b6:	4418      	add	r0, r3
}
   b99b8:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b99ba:	3301      	adds	r3, #1
   b99bc:	2b32      	cmp	r3, #50	; 0x32
   b99be:	f102 0203 	add.w	r2, r2, #3
   b99c2:	d1ed      	bne.n	b99a0 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b99c4:	2000      	movs	r0, #0
   b99c6:	e7f7      	b.n	b99b8 <_ZN8RHRouter10getRouteToEh+0x1e>

000b99c8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b99c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b99ca:	780b      	ldrb	r3, [r1, #0]
   b99cc:	2bff      	cmp	r3, #255	; 0xff
{
   b99ce:	4605      	mov	r5, r0
   b99d0:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b99d2:	d006      	beq.n	b99e2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b99d4:	4619      	mov	r1, r3
   b99d6:	9201      	str	r2, [sp, #4]
   b99d8:	f7ff ffdf 	bl	b999a <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b99dc:	b158      	cbz	r0, b99f6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b99de:	7843      	ldrb	r3, [r0, #1]
   b99e0:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b99e2:	4621      	mov	r1, r4
   b99e4:	1d28      	adds	r0, r5, #4
   b99e6:	f7ff fef7 	bl	b97d8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b99ea:	2800      	cmp	r0, #0
   b99ec:	bf14      	ite	ne
   b99ee:	2000      	movne	r0, #0
   b99f0:	2005      	moveq	r0, #5
}
   b99f2:	b003      	add	sp, #12
   b99f4:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b99f6:	2002      	movs	r0, #2
   b99f8:	e7fb      	b.n	b99f2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b99fa <_ZN8RHRouter11deleteRouteEh>:
{
   b99fa:	b510      	push	{r4, lr}
   b99fc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b9a00:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b9a02:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b9a06:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b9a0a:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b9a0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9a12:	4421      	add	r1, r4
   b9a14:	4420      	add	r0, r4
   b9a16:	f005 fc17 	bl	bf248 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b9a1a:	2300      	movs	r3, #0
   b9a1c:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b9a20:	bd10      	pop	{r4, pc}

000b9a22 <_ZN8RHRouter13deleteRouteToEh>:
{
   b9a22:	b538      	push	{r3, r4, r5, lr}
   b9a24:	460a      	mov	r2, r1
   b9a26:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b9a28:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b9a2c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b9a30:	b2d9      	uxtb	r1, r3
   b9a32:	5d65      	ldrb	r5, [r4, r5]
   b9a34:	4295      	cmp	r5, r2
   b9a36:	d103      	bne.n	b9a40 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b9a38:	f7ff ffdf 	bl	b99fa <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b9a3c:	2001      	movs	r0, #1
}
   b9a3e:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9a40:	3301      	adds	r3, #1
   b9a42:	2b32      	cmp	r3, #50	; 0x32
   b9a44:	d1f2      	bne.n	b9a2c <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b9a46:	2000      	movs	r0, #0
   b9a48:	e7f9      	b.n	b9a3e <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b9a4a <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b9a4a:	2100      	movs	r1, #0
   b9a4c:	f7ff bfd5 	b.w	b99fa <_ZN8RHRouter11deleteRouteEh>

000b9a50 <_ZN8RHRouter10addRouteToEhhh>:
{
   b9a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9a52:	4616      	mov	r6, r2
   b9a54:	461f      	mov	r7, r3
   b9a56:	4604      	mov	r4, r0
   b9a58:	460d      	mov	r5, r1
   b9a5a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b9a5c:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b9a60:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9a64:	5c11      	ldrb	r1, [r2, r0]
   b9a66:	42a9      	cmp	r1, r5
   b9a68:	d105      	bne.n	b9a76 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b9a6a:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b9a6c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b9a70:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b9a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9a76:	3301      	adds	r3, #1
   b9a78:	2b32      	cmp	r3, #50	; 0x32
   b9a7a:	d1f1      	bne.n	b9a60 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b9a7c:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b9a7e:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b9a82:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9a86:	5c11      	ldrb	r1, [r2, r0]
   b9a88:	b919      	cbnz	r1, b9a92 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b9a8a:	4420      	add	r0, r4
   b9a8c:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b9a90:	e7ec      	b.n	b9a6c <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9a92:	3301      	adds	r3, #1
   b9a94:	2b32      	cmp	r3, #50	; 0x32
   b9a96:	d1f4      	bne.n	b9a82 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b9a98:	4620      	mov	r0, r4
   b9a9a:	f7ff ffd6 	bl	b9a4a <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9a9e:	4620      	mov	r0, r4
   b9aa0:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b9aa4:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b9aa8:	b92a      	cbnz	r2, b9ab6 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b9aaa:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b9aae:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b9ab2:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9ab6:	3003      	adds	r0, #3
   b9ab8:	4298      	cmp	r0, r3
   b9aba:	d1f3      	bne.n	b9aa4 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b9abc:	e7da      	b.n	b9a74 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b9abe <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9abe:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b9ac2:	2200      	movs	r2, #0
   b9ac4:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9ac8:	3003      	adds	r0, #3
   b9aca:	4298      	cmp	r0, r3
   b9acc:	d1fa      	bne.n	b9ac4 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b9ace:	4770      	bx	lr

000b9ad0 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b9ad0:	b510      	push	{r4, lr}
   b9ad2:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b9ad4:	3004      	adds	r0, #4
   b9ad6:	f7ff fe53 	bl	b9780 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b9ada:	4b05      	ldr	r3, [pc, #20]	; (b9af0 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b9adc:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b9ade:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b9ae2:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b9ae4:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b9ae8:	f7ff ffe9 	bl	b9abe <_ZN8RHRouter17clearRoutingTableEv>
}
   b9aec:	4620      	mov	r0, r4
   b9aee:	bd10      	pop	{r4, pc}
   b9af0:	000c09c4 	.word	0x000c09c4

000b9af4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b9af4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b9af8:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9afa:	6840      	ldr	r0, [r0, #4]
{
   b9afc:	9101      	str	r1, [sp, #4]
   b9afe:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9b00:	6803      	ldr	r3, [r0, #0]
{
   b9b02:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9b06:	699b      	ldr	r3, [r3, #24]
{
   b9b08:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b9b0c:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9b0e:	4798      	blx	r3
   b9b10:	f106 0805 	add.w	r8, r6, #5
   b9b14:	4580      	cmp	r8, r0
   b9b16:	d81c      	bhi.n	b9b52 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b9b18:	4d10      	ldr	r5, [pc, #64]	; (b9b5c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b9b1a:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b9b1c:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b9b20:	2300      	movs	r3, #0
   b9b22:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b9b24:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b9b28:	70eb      	strb	r3, [r5, #3]
   b9b2a:	1c5a      	adds	r2, r3, #1
   b9b2c:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b9b30:	1d68      	adds	r0, r5, #5
   b9b32:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b9b34:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b9b36:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b9b3a:	f005 fb85 	bl	bf248 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9b3e:	6823      	ldr	r3, [r4, #0]
   b9b40:	685b      	ldr	r3, [r3, #4]
   b9b42:	fa5f f288 	uxtb.w	r2, r8
   b9b46:	4629      	mov	r1, r5
   b9b48:	4620      	mov	r0, r4
}
   b9b4a:	b002      	add	sp, #8
   b9b4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b9b50:	4718      	bx	r3
}
   b9b52:	2001      	movs	r0, #1
   b9b54:	b002      	add	sp, #8
   b9b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9b5a:	bf00      	nop
   b9b5c:	2003e4ee 	.word	0x2003e4ee

000b9b60 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b9b60:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b9b62:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b9b66:	9401      	str	r4, [sp, #4]
   b9b68:	7a04      	ldrb	r4, [r0, #8]
   b9b6a:	9400      	str	r4, [sp, #0]
   b9b6c:	f7ff ffc2 	bl	b9af4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b9b70:	b002      	add	sp, #8
   b9b72:	bd10      	pop	{r4, pc}

000b9b74 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b9b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b78:	b087      	sub	sp, #28
   b9b7a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b9b7c:	237f      	movs	r3, #127	; 0x7f
   b9b7e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9b82:	f10d 0317 	add.w	r3, sp, #23
   b9b86:	9302      	str	r3, [sp, #8]
   b9b88:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b9c5c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b9b8c:	f10d 0316 	add.w	r3, sp, #22
   b9b90:	9301      	str	r3, [sp, #4]
   b9b92:	f10d 0315 	add.w	r3, sp, #21
   b9b96:	9300      	str	r3, [sp, #0]
{  
   b9b98:	4604      	mov	r4, r0
   b9b9a:	4688      	mov	r8, r1
   b9b9c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9b9e:	ab05      	add	r3, sp, #20
   b9ba0:	f10d 0213 	add.w	r2, sp, #19
   b9ba4:	4649      	mov	r1, r9
   b9ba6:	3004      	adds	r0, #4
{  
   b9ba8:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9bac:	f7ff fe97 	bl	b98de <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b9bb0:	4605      	mov	r5, r0
   b9bb2:	b908      	cbnz	r0, b9bb8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b9bb4:	2500      	movs	r5, #0
   b9bb6:	e038      	b.n	b9c2a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b9bb8:	6823      	ldr	r3, [r4, #0]
   b9bba:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b9bbe:	681b      	ldr	r3, [r3, #0]
   b9bc0:	4649      	mov	r1, r9
   b9bc2:	4620      	mov	r0, r4
   b9bc4:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b9bc6:	f899 3000 	ldrb.w	r3, [r9]
   b9bca:	7a22      	ldrb	r2, [r4, #8]
   b9bcc:	429a      	cmp	r2, r3
   b9bce:	d001      	beq.n	b9bd4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b9bd0:	2bff      	cmp	r3, #255	; 0xff
   b9bd2:	d12e      	bne.n	b9c32 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b9bd4:	b117      	cbz	r7, b9bdc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b9bd6:	4b21      	ldr	r3, [pc, #132]	; (b9c5c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9bd8:	785b      	ldrb	r3, [r3, #1]
   b9bda:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b9bdc:	f1bb 0f00 	cmp.w	fp, #0
   b9be0:	d003      	beq.n	b9bea <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b9be2:	4b1e      	ldr	r3, [pc, #120]	; (b9c5c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9be4:	781b      	ldrb	r3, [r3, #0]
   b9be6:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b9bea:	f1ba 0f00 	cmp.w	sl, #0
   b9bee:	d003      	beq.n	b9bf8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b9bf0:	4b1a      	ldr	r3, [pc, #104]	; (b9c5c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9bf2:	78db      	ldrb	r3, [r3, #3]
   b9bf4:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b9bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b9bfa:	b11b      	cbz	r3, b9c04 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b9bfc:	4b17      	ldr	r3, [pc, #92]	; (b9c5c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9bfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9c00:	791b      	ldrb	r3, [r3, #4]
   b9c02:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b9c04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9c06:	b11b      	cbz	r3, b9c10 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b9c08:	4b14      	ldr	r3, [pc, #80]	; (b9c5c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9c0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9c0c:	789b      	ldrb	r3, [r3, #2]
   b9c0e:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9c10:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b9c14:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9c16:	4912      	ldr	r1, [pc, #72]	; (b9c60 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9c18:	3b05      	subs	r3, #5
   b9c1a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b9c1c:	429a      	cmp	r2, r3
		*len = msgLen;
   b9c1e:	bf88      	it	hi
   b9c20:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9c22:	7832      	ldrb	r2, [r6, #0]
   b9c24:	4640      	mov	r0, r8
   b9c26:	f005 fb0f 	bl	bf248 <memcpy>
}
   b9c2a:	4628      	mov	r0, r5
   b9c2c:	b007      	add	sp, #28
   b9c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b9c32:	f899 3002 	ldrb.w	r3, [r9, #2]
   b9c36:	1c5a      	adds	r2, r3, #1
   b9c38:	f889 2002 	strb.w	r2, [r9, #2]
   b9c3c:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b9c40:	429a      	cmp	r2, r3
   b9c42:	d9b7      	bls.n	b9bb4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b9c44:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b9c48:	2b00      	cmp	r3, #0
   b9c4a:	d0b3      	beq.n	b9bb4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b9c4c:	6823      	ldr	r3, [r4, #0]
   b9c4e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b9c52:	685b      	ldr	r3, [r3, #4]
   b9c54:	4649      	mov	r1, r9
   b9c56:	4620      	mov	r0, r4
   b9c58:	4798      	blx	r3
   b9c5a:	e7ab      	b.n	b9bb4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b9c5c:	2003e4ee 	.word	0x2003e4ee
   b9c60:	2003e4f3 	.word	0x2003e4f3

000b9c64 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b9c64:	b510      	push	{r4, lr}
   b9c66:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b9c68:	6a00      	ldr	r0, [r0, #32]
   b9c6a:	6803      	ldr	r3, [r0, #0]
   b9c6c:	68db      	ldr	r3, [r3, #12]
   b9c6e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b9c70:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b9c74:	28ff      	cmp	r0, #255	; 0xff
   b9c76:	d002      	beq.n	b9c7e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b9c78:	2101      	movs	r1, #1
   b9c7a:	f004 fcc7 	bl	be60c <pinMode>

    deselectSlave();
   b9c7e:	6823      	ldr	r3, [r4, #0]
   b9c80:	4620      	mov	r0, r4
   b9c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9c84:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b9c86:	2064      	movs	r0, #100	; 0x64
   b9c88:	f001 fbba 	bl	bb400 <delay>
#endif
    
    return true;
}
   b9c8c:	2001      	movs	r0, #1
   b9c8e:	bd10      	pop	{r4, pc}

000b9c90 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b9c90:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b9c94:	2100      	movs	r1, #0
   b9c96:	f004 bcca 	b.w	be62e <digitalWrite>

000b9c9a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b9c9a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b9c9e:	2101      	movs	r1, #1
   b9ca0:	f004 bcc5 	b.w	be62e <digitalWrite>

000b9ca4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b9ca4:	b570      	push	{r4, r5, r6, lr}
   b9ca6:	4604      	mov	r4, r0
   b9ca8:	460d      	mov	r5, r1
   b9caa:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b9cac:	f7ff fa50 	bl	b9150 <_ZN15RHGenericDriverC1Ev>
   b9cb0:	4b03      	ldr	r3, [pc, #12]	; (b9cc0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b9cb2:	6023      	str	r3, [r4, #0]
   b9cb4:	6226      	str	r6, [r4, #32]
   b9cb6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b9cba:	4620      	mov	r0, r4
   b9cbc:	bd70      	pop	{r4, r5, r6, pc}
   b9cbe:	bf00      	nop
   b9cc0:	000c09d4 	.word	0x000c09d4

000b9cc4 <_ZN11RHSPIDriver7spiReadEh>:
{
   b9cc4:	b538      	push	{r3, r4, r5, lr}
   b9cc6:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9cc8:	6a00      	ldr	r0, [r0, #32]
   b9cca:	6803      	ldr	r3, [r0, #0]
   b9ccc:	6a1b      	ldr	r3, [r3, #32]
{
   b9cce:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b9cd0:	4798      	blx	r3
    selectSlave();
   b9cd2:	6823      	ldr	r3, [r4, #0]
   b9cd4:	4620      	mov	r0, r4
   b9cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9cd8:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b9cda:	6a20      	ldr	r0, [r4, #32]
   b9cdc:	6803      	ldr	r3, [r0, #0]
   b9cde:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b9ce2:	681b      	ldr	r3, [r3, #0]
   b9ce4:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9ce6:	6a20      	ldr	r0, [r4, #32]
   b9ce8:	6803      	ldr	r3, [r0, #0]
   b9cea:	2100      	movs	r1, #0
   b9cec:	681b      	ldr	r3, [r3, #0]
   b9cee:	4798      	blx	r3
    deselectSlave();
   b9cf0:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9cf2:	4605      	mov	r5, r0
    deselectSlave();
   b9cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9cf6:	4620      	mov	r0, r4
   b9cf8:	4798      	blx	r3
    _spi.endTransaction();
   b9cfa:	6a20      	ldr	r0, [r4, #32]
   b9cfc:	6803      	ldr	r3, [r0, #0]
   b9cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9d00:	4798      	blx	r3
}
   b9d02:	4628      	mov	r0, r5
   b9d04:	bd38      	pop	{r3, r4, r5, pc}

000b9d06 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b9d06:	b570      	push	{r4, r5, r6, lr}
   b9d08:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9d0a:	6a00      	ldr	r0, [r0, #32]
   b9d0c:	6803      	ldr	r3, [r0, #0]
   b9d0e:	6a1b      	ldr	r3, [r3, #32]
{
   b9d10:	4616      	mov	r6, r2
   b9d12:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b9d14:	4798      	blx	r3
    selectSlave();
   b9d16:	6823      	ldr	r3, [r4, #0]
   b9d18:	4620      	mov	r0, r4
   b9d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9d1c:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b9d1e:	6a20      	ldr	r0, [r4, #32]
   b9d20:	6803      	ldr	r3, [r0, #0]
   b9d22:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b9d26:	681b      	ldr	r3, [r3, #0]
   b9d28:	4798      	blx	r3
   b9d2a:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b9d2c:	6a20      	ldr	r0, [r4, #32]
   b9d2e:	6803      	ldr	r3, [r0, #0]
   b9d30:	4631      	mov	r1, r6
   b9d32:	681b      	ldr	r3, [r3, #0]
   b9d34:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b9d36:	2001      	movs	r0, #1
   b9d38:	f000 ff4c 	bl	babd4 <HAL_Delay_Microseconds>
    deselectSlave();
   b9d3c:	6823      	ldr	r3, [r4, #0]
   b9d3e:	4620      	mov	r0, r4
   b9d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9d42:	4798      	blx	r3
    _spi.endTransaction();
   b9d44:	6a20      	ldr	r0, [r4, #32]
   b9d46:	6803      	ldr	r3, [r0, #0]
   b9d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9d4a:	4798      	blx	r3
}
   b9d4c:	4628      	mov	r0, r5
   b9d4e:	bd70      	pop	{r4, r5, r6, pc}

000b9d50 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b9d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9d52:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9d54:	6a00      	ldr	r0, [r0, #32]
{
   b9d56:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b9d58:	6803      	ldr	r3, [r0, #0]
   b9d5a:	6a1b      	ldr	r3, [r3, #32]
{
   b9d5c:	460f      	mov	r7, r1
   b9d5e:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9d60:	4798      	blx	r3
    selectSlave();
   b9d62:	6823      	ldr	r3, [r4, #0]
   b9d64:	4620      	mov	r0, r4
   b9d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9d68:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b9d6a:	6a20      	ldr	r0, [r4, #32]
   b9d6c:	6803      	ldr	r3, [r0, #0]
   b9d6e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b9d72:	681b      	ldr	r3, [r3, #0]
   b9d74:	4798      	blx	r3
   b9d76:	442e      	add	r6, r5
   b9d78:	4607      	mov	r7, r0
    while (len--)
   b9d7a:	42b5      	cmp	r5, r6
   b9d7c:	d007      	beq.n	b9d8e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b9d7e:	6a20      	ldr	r0, [r4, #32]
   b9d80:	6803      	ldr	r3, [r0, #0]
   b9d82:	2100      	movs	r1, #0
   b9d84:	681b      	ldr	r3, [r3, #0]
   b9d86:	4798      	blx	r3
   b9d88:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b9d8c:	e7f5      	b.n	b9d7a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b9d8e:	6823      	ldr	r3, [r4, #0]
   b9d90:	4620      	mov	r0, r4
   b9d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9d94:	4798      	blx	r3
    _spi.endTransaction();
   b9d96:	6a20      	ldr	r0, [r4, #32]
   b9d98:	6803      	ldr	r3, [r0, #0]
   b9d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9d9c:	4798      	blx	r3
}
   b9d9e:	4638      	mov	r0, r7
   b9da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9da2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b9da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9da4:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9da6:	6a00      	ldr	r0, [r0, #32]
{
   b9da8:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b9daa:	6803      	ldr	r3, [r0, #0]
   b9dac:	6a1b      	ldr	r3, [r3, #32]
{
   b9dae:	460f      	mov	r7, r1
   b9db0:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9db2:	4798      	blx	r3
    selectSlave();
   b9db4:	6823      	ldr	r3, [r4, #0]
   b9db6:	4620      	mov	r0, r4
   b9db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9dba:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b9dbc:	6a20      	ldr	r0, [r4, #32]
   b9dbe:	6803      	ldr	r3, [r0, #0]
   b9dc0:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b9dc4:	681b      	ldr	r3, [r3, #0]
   b9dc6:	4798      	blx	r3
   b9dc8:	442e      	add	r6, r5
   b9dca:	4607      	mov	r7, r0
    while (len--)
   b9dcc:	42b5      	cmp	r5, r6
   b9dce:	d006      	beq.n	b9dde <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b9dd0:	6a20      	ldr	r0, [r4, #32]
   b9dd2:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9dd6:	6803      	ldr	r3, [r0, #0]
   b9dd8:	681b      	ldr	r3, [r3, #0]
   b9dda:	4798      	blx	r3
    while (len--)
   b9ddc:	e7f6      	b.n	b9dcc <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b9dde:	6823      	ldr	r3, [r4, #0]
   b9de0:	4620      	mov	r0, r4
   b9de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9de4:	4798      	blx	r3
    _spi.endTransaction();
   b9de6:	6a20      	ldr	r0, [r4, #32]
   b9de8:	6803      	ldr	r3, [r0, #0]
   b9dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9dec:	4798      	blx	r3
}
   b9dee:	4638      	mov	r0, r7
   b9df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9df2 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b9df2:	6a00      	ldr	r0, [r0, #32]
   b9df4:	6803      	ldr	r3, [r0, #0]
   b9df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9df8:	4718      	bx	r3

000b9dfa <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b9dfa:	2001      	movs	r0, #1
   b9dfc:	4770      	bx	lr

000b9dfe <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b9dfe:	20fb      	movs	r0, #251	; 0xfb
   b9e00:	4770      	bx	lr

000b9e02 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b9e02:	4770      	bx	lr

000b9e04 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b9e04:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b9e06:	7903      	ldrb	r3, [r0, #4]
   b9e08:	2b05      	cmp	r3, #5
{
   b9e0a:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b9e0c:	d010      	beq.n	b9e30 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b9e0e:	6803      	ldr	r3, [r0, #0]
   b9e10:	2105      	movs	r1, #5
   b9e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9e16:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b9e18:	2207      	movs	r2, #7
   b9e1a:	2101      	movs	r1, #1
   b9e1c:	4620      	mov	r0, r4
   b9e1e:	f7ff ff72 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b9e22:	2280      	movs	r2, #128	; 0x80
   b9e24:	2140      	movs	r1, #64	; 0x40
   b9e26:	4620      	mov	r0, r4
   b9e28:	f7ff ff6d 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b9e2c:	2305      	movs	r3, #5
   b9e2e:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b9e30:	7923      	ldrb	r3, [r4, #4]
   b9e32:	2b05      	cmp	r3, #5
   b9e34:	d0fc      	beq.n	b9e30 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b9e36:	7e20      	ldrb	r0, [r4, #24]
}
   b9e38:	bd10      	pop	{r4, pc}

000b9e3a <_ZN7RH_RF95D0Ev>:
   b9e3a:	b510      	push	{r4, lr}
   b9e3c:	f44f 7198 	mov.w	r1, #304	; 0x130
   b9e40:	4604      	mov	r4, r0
   b9e42:	f7fa f92c 	bl	b409e <_ZdlPvj>
   b9e46:	4620      	mov	r0, r4
   b9e48:	bd10      	pop	{r4, pc}

000b9e4a <_ZN7RH_RF955sleepEv>:
{
   b9e4a:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b9e4c:	7903      	ldrb	r3, [r0, #4]
   b9e4e:	2b01      	cmp	r3, #1
{
   b9e50:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b9e52:	d00b      	beq.n	b9e6c <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b9e54:	6803      	ldr	r3, [r0, #0]
   b9e56:	2101      	movs	r1, #1
   b9e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9e5c:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b9e5e:	2200      	movs	r2, #0
   b9e60:	2101      	movs	r1, #1
   b9e62:	4620      	mov	r0, r4
   b9e64:	f7ff ff4f 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b9e68:	2301      	movs	r3, #1
   b9e6a:	7123      	strb	r3, [r4, #4]
}
   b9e6c:	2001      	movs	r0, #1
   b9e6e:	bd10      	pop	{r4, pc}

000b9e70 <_ZN7RH_RF954recvEPhS0_>:
{
   b9e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b9e72:	6803      	ldr	r3, [r0, #0]
   b9e74:	68db      	ldr	r3, [r3, #12]
{
   b9e76:	4604      	mov	r4, r0
   b9e78:	460f      	mov	r7, r1
   b9e7a:	4615      	mov	r5, r2
    if (!available())
   b9e7c:	4798      	blx	r3
   b9e7e:	4606      	mov	r6, r0
   b9e80:	b1b0      	cbz	r0, b9eb0 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b9e82:	b187      	cbz	r7, b9ea6 <_ZN7RH_RF954recvEPhS0_+0x36>
   b9e84:	b17d      	cbz	r5, b9ea6 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b9e86:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b9e8a:	782a      	ldrb	r2, [r5, #0]
   b9e8c:	3b03      	subs	r3, #3
   b9e8e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b9e90:	bfde      	ittt	le
   b9e92:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b9e96:	3b04      	suble	r3, #4
   b9e98:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b9e9a:	782a      	ldrb	r2, [r5, #0]
   b9e9c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b9ea0:	4638      	mov	r0, r7
   b9ea2:	f005 f9d1 	bl	bf248 <memcpy>
    _rxBufValid = false;
   b9ea6:	2300      	movs	r3, #0
   b9ea8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b9eac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b9eb0:	4630      	mov	r0, r6
   b9eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9eb4 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b9eb4:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b9eb6:	b538      	push	{r3, r4, r5, lr}
   b9eb8:	4605      	mov	r5, r0
   b9eba:	460c      	mov	r4, r1
	if (power > 20)
   b9ebc:	dc14      	bgt.n	b9ee8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b9ebe:	2901      	cmp	r1, #1
   b9ec0:	dd14      	ble.n	b9eec <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b9ec2:	2911      	cmp	r1, #17
   b9ec4:	dd13      	ble.n	b9eee <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b9ec6:	2207      	movs	r2, #7
   b9ec8:	214d      	movs	r1, #77	; 0x4d
   b9eca:	4628      	mov	r0, r5
   b9ecc:	f7ff ff1b 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b9ed0:	3c03      	subs	r4, #3
   b9ed2:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b9ed4:	1ea2      	subs	r2, r4, #2
   b9ed6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b9eda:	4628      	mov	r0, r5
   b9edc:	b2d2      	uxtb	r2, r2
}
   b9ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b9ee2:	2109      	movs	r1, #9
   b9ee4:	f7ff bf0f 	b.w	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b9ee8:	2414      	movs	r4, #20
   b9eea:	e7ec      	b.n	b9ec6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b9eec:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9eee:	2204      	movs	r2, #4
   b9ef0:	214d      	movs	r1, #77	; 0x4d
   b9ef2:	4628      	mov	r0, r5
   b9ef4:	f7ff ff07 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
   b9ef8:	e7ec      	b.n	b9ed4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b9efc <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b9efc:	b538      	push	{r3, r4, r5, lr}
   b9efe:	4604      	mov	r4, r0
   b9f00:	4615      	mov	r5, r2
    _rxBufValid(0)
   b9f02:	461a      	mov	r2, r3
   b9f04:	f7ff fece 	bl	b9ca4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b9f08:	4b09      	ldr	r3, [pc, #36]	; (b9f30 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b9f0a:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b9f0c:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b9f0e:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b9f10:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b9f14:	2201      	movs	r2, #1
    _rxBufValid(0)
   b9f16:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b9f1a:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b9f1e:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b9f22:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b9f26:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b9f2a:	4620      	mov	r0, r4
   b9f2c:	bd38      	pop	{r3, r4, r5, pc}
   b9f2e:	bf00      	nop
   b9f30:	000c0a6c 	.word	0x000c0a6c

000b9f34 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b9f34:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b9f38:	2b03      	cmp	r3, #3
   b9f3a:	d91b      	bls.n	b9f74 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b9f3c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b9f40:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b9f42:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b9f46:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b9f48:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b9f4c:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b9f4e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b9f52:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b9f54:	7983      	ldrb	r3, [r0, #6]
   b9f56:	b933      	cbnz	r3, b9f66 <_ZN7RH_RF9513validateRxBufEv+0x32>
   b9f58:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b9f5a:	7942      	ldrb	r2, [r0, #5]
   b9f5c:	429a      	cmp	r2, r3
   b9f5e:	d002      	beq.n	b9f66 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b9f60:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b9f62:	2bff      	cmp	r3, #255	; 0xff
   b9f64:	d106      	bne.n	b9f74 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b9f66:	8a83      	ldrh	r3, [r0, #20]
   b9f68:	3301      	adds	r3, #1
   b9f6a:	b29b      	uxth	r3, r3
   b9f6c:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b9f6e:	2301      	movs	r3, #1
   b9f70:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b9f74:	4770      	bx	lr
	...

000b9f78 <_ZN7RH_RF9512setFrequencyEf>:
{
   b9f78:	b538      	push	{r3, r4, r5, lr}
   b9f7a:	4604      	mov	r4, r0
   b9f7c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9f80:	ee10 0a10 	vmov	r0, s0
{
   b9f84:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9f88:	f004 fdbc 	bl	beb04 <__aeabi_f2d>
   b9f8c:	a317      	add	r3, pc, #92	; (adr r3, b9fec <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b9f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9f92:	f004 fe0f 	bl	bebb4 <__aeabi_dmul>
   b9f96:	a317      	add	r3, pc, #92	; (adr r3, b9ff4 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b9f98:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9f9c:	f004 ff34 	bl	bee08 <__aeabi_ddiv>
   b9fa0:	f005 f8e0 	bl	bf164 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b9fa4:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9fa6:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b9fa8:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b9fac:	4620      	mov	r0, r4
   b9fae:	f7ff feaa 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b9fb2:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b9fb6:	2107      	movs	r1, #7
   b9fb8:	4620      	mov	r0, r4
   b9fba:	f7ff fea4 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b9fbe:	b2ea      	uxtb	r2, r5
   b9fc0:	2108      	movs	r1, #8
   b9fc2:	4620      	mov	r0, r4
   b9fc4:	f7ff fe9f 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b9fc8:	eddf 7a07 	vldr	s15, [pc, #28]	; b9fe8 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b9fcc:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b9fd0:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b9fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9fd8:	bfac      	ite	ge
   b9fda:	2301      	movge	r3, #1
   b9fdc:	2300      	movlt	r3, #0
}
   b9fde:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b9fe0:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b9fe4:	bd38      	pop	{r3, r4, r5, pc}
   b9fe6:	bf00      	nop
   b9fe8:	4442c000 	.word	0x4442c000
   b9fec:	00000000 	.word	0x00000000
   b9ff0:	412e8480 	.word	0x412e8480
   b9ff4:	00000000 	.word	0x00000000
   b9ff8:	404e8480 	.word	0x404e8480

000b9ffc <_ZN7RH_RF9511setModeIdleEv>:
{
   b9ffc:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b9ffe:	7903      	ldrb	r3, [r0, #4]
   ba000:	2b02      	cmp	r3, #2
{
   ba002:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   ba004:	d00b      	beq.n	ba01e <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   ba006:	6803      	ldr	r3, [r0, #0]
   ba008:	2102      	movs	r1, #2
   ba00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba00e:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   ba010:	2201      	movs	r2, #1
   ba012:	4611      	mov	r1, r2
   ba014:	4620      	mov	r0, r4
   ba016:	f7ff fe76 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   ba01a:	2302      	movs	r3, #2
   ba01c:	7123      	strb	r3, [r4, #4]
}
   ba01e:	bd10      	pop	{r4, pc}

000ba020 <_ZN7RH_RF9515handleInterruptEv>:
{
   ba020:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   ba022:	2112      	movs	r1, #18
{
   ba024:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   ba026:	f7ff fe4d 	bl	b9cc4 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   ba02a:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   ba02c:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   ba02e:	4620      	mov	r0, r4
   ba030:	f7ff fe48 	bl	b9cc4 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba034:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   ba036:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba038:	2112      	movs	r1, #18
   ba03a:	4620      	mov	r0, r4
   ba03c:	f7ff fe63 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   ba040:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   ba042:	2b04      	cmp	r3, #4
   ba044:	d107      	bne.n	ba056 <_ZN7RH_RF9515handleInterruptEv+0x36>
   ba046:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   ba04a:	d117      	bne.n	ba07c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   ba04c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   ba050:	b10b      	cbz	r3, ba056 <_ZN7RH_RF9515handleInterruptEv+0x36>
   ba052:	0670      	lsls	r0, r6, #25
   ba054:	d512      	bpl.n	ba07c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   ba056:	7923      	ldrb	r3, [r4, #4]
   ba058:	2b04      	cmp	r3, #4
   ba05a:	d101      	bne.n	ba060 <_ZN7RH_RF9515handleInterruptEv+0x40>
   ba05c:	0669      	lsls	r1, r5, #25
   ba05e:	d422      	bmi.n	ba0a6 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   ba060:	7923      	ldrb	r3, [r4, #4]
   ba062:	2b03      	cmp	r3, #3
   ba064:	d101      	bne.n	ba06a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   ba066:	072a      	lsls	r2, r5, #28
   ba068:	d468      	bmi.n	ba13c <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   ba06a:	7923      	ldrb	r3, [r4, #4]
   ba06c:	2b05      	cmp	r3, #5
   ba06e:	d10e      	bne.n	ba08e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   ba070:	076b      	lsls	r3, r5, #29
   ba072:	d50c      	bpl.n	ba08e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   ba074:	f005 0501 	and.w	r5, r5, #1
   ba078:	7625      	strb	r5, [r4, #24]
   ba07a:	e063      	b.n	ba144 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   ba07c:	8a63      	ldrh	r3, [r4, #18]
   ba07e:	3301      	adds	r3, #1
   ba080:	b29b      	uxth	r3, r3
   ba082:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   ba084:	2300      	movs	r3, #0
   ba086:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   ba08a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba08e:	22ff      	movs	r2, #255	; 0xff
   ba090:	2112      	movs	r1, #18
   ba092:	4620      	mov	r0, r4
   ba094:	f7ff fe37 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba098:	4620      	mov	r0, r4
   ba09a:	22ff      	movs	r2, #255	; 0xff
}
   ba09c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   ba0a0:	2112      	movs	r1, #18
   ba0a2:	f7ff be30 	b.w	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   ba0a6:	2113      	movs	r1, #19
   ba0a8:	4620      	mov	r0, r4
   ba0aa:	f7ff fe0b 	bl	b9cc4 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   ba0ae:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   ba0b0:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   ba0b2:	4620      	mov	r0, r4
   ba0b4:	f7ff fe06 	bl	b9cc4 <_ZN11RHSPIDriver7spiReadEh>
   ba0b8:	210d      	movs	r1, #13
   ba0ba:	4602      	mov	r2, r0
   ba0bc:	4620      	mov	r0, r4
   ba0be:	f7ff fe22 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   ba0c2:	f104 0229 	add.w	r2, r4, #41	; 0x29
   ba0c6:	462b      	mov	r3, r5
   ba0c8:	2100      	movs	r1, #0
   ba0ca:	4620      	mov	r0, r4
   ba0cc:	f7ff fe40 	bl	b9d50 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   ba0d0:	2119      	movs	r1, #25
	_bufLen = len;
   ba0d2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   ba0d6:	4620      	mov	r0, r4
   ba0d8:	f7ff fdf4 	bl	b9cc4 <_ZN11RHSPIDriver7spiReadEh>
   ba0dc:	b240      	sxtb	r0, r0
   ba0de:	2800      	cmp	r0, #0
   ba0e0:	bfb8      	it	lt
   ba0e2:	3003      	addlt	r0, #3
   ba0e4:	1080      	asrs	r0, r0, #2
   ba0e6:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   ba0ea:	211a      	movs	r1, #26
   ba0ec:	4620      	mov	r0, r4
   ba0ee:	f7ff fde9 	bl	b9cc4 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   ba0f2:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   ba0f6:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   ba0f8:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   ba0fa:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   ba0fc:	bfa9      	itett	ge
   ba0fe:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   ba100:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   ba102:	b21b      	sxthge	r3, r3
   ba104:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   ba106:	bfb2      	itee	lt
   ba108:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   ba10a:	220f      	movge	r2, #15
   ba10c:	fb93 f3f2 	sdivge	r3, r3, r2
   ba110:	b21b      	sxth	r3, r3
   ba112:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   ba114:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   ba118:	b16b      	cbz	r3, ba136 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   ba11a:	8a23      	ldrh	r3, [r4, #16]
   ba11c:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   ba11e:	b21b      	sxth	r3, r3
   ba120:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   ba122:	4620      	mov	r0, r4
   ba124:	f7ff ff06 	bl	b9f34 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   ba128:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   ba12c:	2b00      	cmp	r3, #0
   ba12e:	d0ae      	beq.n	ba08e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   ba130:	f7ff ff64 	bl	b9ffc <_ZN7RH_RF9511setModeIdleEv>
   ba134:	e7ab      	b.n	ba08e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   ba136:	8a23      	ldrh	r3, [r4, #16]
   ba138:	3ba4      	subs	r3, #164	; 0xa4
   ba13a:	e7f0      	b.n	ba11e <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   ba13c:	8ae3      	ldrh	r3, [r4, #22]
   ba13e:	3301      	adds	r3, #1
   ba140:	b29b      	uxth	r3, r3
   ba142:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   ba144:	4620      	mov	r0, r4
   ba146:	e7f3      	b.n	ba130 <_ZN7RH_RF9515handleInterruptEv+0x110>

000ba148 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   ba148:	4b02      	ldr	r3, [pc, #8]	; (ba154 <_ZN7RH_RF954isr0Ev+0xc>)
   ba14a:	6818      	ldr	r0, [r3, #0]
   ba14c:	b108      	cbz	r0, ba152 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   ba14e:	f7ff bf67 	b.w	ba020 <_ZN7RH_RF9515handleInterruptEv>
}
   ba152:	4770      	bx	lr
   ba154:	2003e570 	.word	0x2003e570

000ba158 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   ba158:	4b02      	ldr	r3, [pc, #8]	; (ba164 <_ZN7RH_RF954isr1Ev+0xc>)
   ba15a:	6858      	ldr	r0, [r3, #4]
   ba15c:	b108      	cbz	r0, ba162 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   ba15e:	f7ff bf5f 	b.w	ba020 <_ZN7RH_RF9515handleInterruptEv>
}
   ba162:	4770      	bx	lr
   ba164:	2003e570 	.word	0x2003e570

000ba168 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   ba168:	4b02      	ldr	r3, [pc, #8]	; (ba174 <_ZN7RH_RF954isr2Ev+0xc>)
   ba16a:	6898      	ldr	r0, [r3, #8]
   ba16c:	b108      	cbz	r0, ba172 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   ba16e:	f7ff bf57 	b.w	ba020 <_ZN7RH_RF9515handleInterruptEv>
}
   ba172:	4770      	bx	lr
   ba174:	2003e570 	.word	0x2003e570

000ba178 <_ZN7RH_RF959setModeRxEv>:
{
   ba178:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   ba17a:	7903      	ldrb	r3, [r0, #4]
   ba17c:	2b04      	cmp	r3, #4
{
   ba17e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   ba180:	d010      	beq.n	ba1a4 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   ba182:	6803      	ldr	r3, [r0, #0]
   ba184:	2104      	movs	r1, #4
   ba186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba18a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   ba18c:	2205      	movs	r2, #5
   ba18e:	2101      	movs	r1, #1
   ba190:	4620      	mov	r0, r4
   ba192:	f7ff fdb8 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   ba196:	2200      	movs	r2, #0
   ba198:	2140      	movs	r1, #64	; 0x40
   ba19a:	4620      	mov	r0, r4
   ba19c:	f7ff fdb3 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   ba1a0:	2304      	movs	r3, #4
   ba1a2:	7123      	strb	r3, [r4, #4]
}
   ba1a4:	bd10      	pop	{r4, pc}

000ba1a6 <_ZN7RH_RF959availableEv>:
{
   ba1a6:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   ba1a8:	7903      	ldrb	r3, [r0, #4]
   ba1aa:	2b03      	cmp	r3, #3
{
   ba1ac:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   ba1ae:	d005      	beq.n	ba1bc <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   ba1b0:	f7ff ffe2 	bl	ba178 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   ba1b4:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   ba1b8:	b2c0      	uxtb	r0, r0
}
   ba1ba:	bd10      	pop	{r4, pc}
	return false;
   ba1bc:	2000      	movs	r0, #0
   ba1be:	e7fc      	b.n	ba1ba <_ZN7RH_RF959availableEv+0x14>

000ba1c0 <_ZN7RH_RF959setModeTxEv>:
{
   ba1c0:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   ba1c2:	7903      	ldrb	r3, [r0, #4]
   ba1c4:	2b03      	cmp	r3, #3
{
   ba1c6:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   ba1c8:	d010      	beq.n	ba1ec <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   ba1ca:	6803      	ldr	r3, [r0, #0]
   ba1cc:	2103      	movs	r1, #3
   ba1ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba1d2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   ba1d4:	2203      	movs	r2, #3
   ba1d6:	2101      	movs	r1, #1
   ba1d8:	4620      	mov	r0, r4
   ba1da:	f7ff fd94 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   ba1de:	2240      	movs	r2, #64	; 0x40
   ba1e0:	4611      	mov	r1, r2
   ba1e2:	4620      	mov	r0, r4
   ba1e4:	f7ff fd8f 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   ba1e8:	2303      	movs	r3, #3
   ba1ea:	7123      	strb	r3, [r4, #4]
}
   ba1ec:	bd10      	pop	{r4, pc}

000ba1ee <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   ba1ee:	2afb      	cmp	r2, #251	; 0xfb
{
   ba1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba1f2:	4604      	mov	r4, r0
   ba1f4:	460f      	mov	r7, r1
   ba1f6:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   ba1f8:	d902      	bls.n	ba200 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   ba1fa:	2600      	movs	r6, #0
}
   ba1fc:	4630      	mov	r0, r6
   ba1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   ba200:	6803      	ldr	r3, [r0, #0]
   ba202:	6a1b      	ldr	r3, [r3, #32]
   ba204:	4798      	blx	r3
    setModeIdle();
   ba206:	4620      	mov	r0, r4
   ba208:	f7ff fef8 	bl	b9ffc <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   ba20c:	6823      	ldr	r3, [r4, #0]
   ba20e:	4620      	mov	r0, r4
   ba210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba212:	4798      	blx	r3
   ba214:	4606      	mov	r6, r0
   ba216:	2800      	cmp	r0, #0
   ba218:	d0ef      	beq.n	ba1fa <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   ba21a:	2200      	movs	r2, #0
   ba21c:	210d      	movs	r1, #13
   ba21e:	4620      	mov	r0, r4
   ba220:	f7ff fd71 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   ba224:	7ae2      	ldrb	r2, [r4, #11]
   ba226:	2100      	movs	r1, #0
   ba228:	4620      	mov	r0, r4
   ba22a:	f7ff fd6c 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   ba22e:	7b22      	ldrb	r2, [r4, #12]
   ba230:	2100      	movs	r1, #0
   ba232:	4620      	mov	r0, r4
   ba234:	f7ff fd67 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   ba238:	7b62      	ldrb	r2, [r4, #13]
   ba23a:	2100      	movs	r1, #0
   ba23c:	4620      	mov	r0, r4
   ba23e:	f7ff fd62 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   ba242:	7ba2      	ldrb	r2, [r4, #14]
   ba244:	2100      	movs	r1, #0
   ba246:	4620      	mov	r0, r4
   ba248:	f7ff fd5d 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   ba24c:	462b      	mov	r3, r5
   ba24e:	463a      	mov	r2, r7
   ba250:	2100      	movs	r1, #0
   ba252:	4620      	mov	r0, r4
   ba254:	f7ff fda5 	bl	b9da2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   ba258:	1d2a      	adds	r2, r5, #4
   ba25a:	b2d2      	uxtb	r2, r2
   ba25c:	2122      	movs	r1, #34	; 0x22
   ba25e:	4620      	mov	r0, r4
   ba260:	f7ff fd51 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   ba264:	4620      	mov	r0, r4
   ba266:	f7ff ffab 	bl	ba1c0 <_ZN7RH_RF959setModeTxEv>
    return true;
   ba26a:	e7c7      	b.n	ba1fc <_ZN7RH_RF954sendEPKhh+0xe>

000ba26c <_ZN7RH_RF9510setTxPowerEab>:
{
   ba26c:	b510      	push	{r4, lr}
   ba26e:	4604      	mov	r4, r0
    _useRFO = useRFO;
   ba270:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   ba274:	b172      	cbz	r2, ba294 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   ba276:	f381 0204 	usat	r2, #4, r1
   ba27a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   ba27e:	b2d2      	uxtb	r2, r2
   ba280:	2109      	movs	r1, #9
   ba282:	f7ff fd40 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   ba286:	4620      	mov	r0, r4
   ba288:	2204      	movs	r2, #4
}
   ba28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   ba28e:	214d      	movs	r1, #77	; 0x4d
   ba290:	f7ff bd39 	b.w	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
}
   ba294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba298:	f7ff be0c 	b.w	b9eb4 <_ZN7RH_RF9510setTxPowerEab.part.0>

000ba29c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   ba29c:	b538      	push	{r3, r4, r5, lr}
   ba29e:	460c      	mov	r4, r1
   ba2a0:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   ba2a2:	780a      	ldrb	r2, [r1, #0]
   ba2a4:	211d      	movs	r1, #29
   ba2a6:	f7ff fd2e 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   ba2aa:	7862      	ldrb	r2, [r4, #1]
   ba2ac:	211e      	movs	r1, #30
   ba2ae:	4628      	mov	r0, r5
   ba2b0:	f7ff fd29 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   ba2b4:	78a2      	ldrb	r2, [r4, #2]
   ba2b6:	4628      	mov	r0, r5
   ba2b8:	2126      	movs	r1, #38	; 0x26
}
   ba2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   ba2be:	f7ff bd22 	b.w	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000ba2c4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   ba2c4:	2905      	cmp	r1, #5
{
   ba2c6:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   ba2c8:	d80f      	bhi.n	ba2ea <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   ba2ca:	4b09      	ldr	r3, [pc, #36]	; (ba2f0 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   ba2cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   ba2d0:	185c      	adds	r4, r3, r1
   ba2d2:	5a5a      	ldrh	r2, [r3, r1]
   ba2d4:	78a3      	ldrb	r3, [r4, #2]
   ba2d6:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   ba2da:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   ba2dc:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   ba2e0:	f7ff ffdc 	bl	ba29c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   ba2e4:	2001      	movs	r0, #1
}
   ba2e6:	b002      	add	sp, #8
   ba2e8:	bd10      	pop	{r4, pc}
        return false;
   ba2ea:	2000      	movs	r0, #0
   ba2ec:	e7fb      	b.n	ba2e6 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   ba2ee:	bf00      	nop
   ba2f0:	000c0a54 	.word	0x000c0a54

000ba2f4 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   ba2f4:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   ba2f6:	0a0a      	lsrs	r2, r1, #8
{
   ba2f8:	4605      	mov	r5, r0
   ba2fa:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   ba2fc:	2120      	movs	r1, #32
   ba2fe:	f7ff fd02 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   ba302:	b2e2      	uxtb	r2, r4
   ba304:	4628      	mov	r0, r5
   ba306:	2121      	movs	r1, #33	; 0x21
}
   ba308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   ba30c:	f7ff bcfb 	b.w	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>

000ba310 <_ZN7RH_RF954initEv>:
{
   ba310:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba312:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   ba314:	f7ff fca6 	bl	b9c64 <_ZN11RHSPIDriver4initEv>
   ba318:	4606      	mov	r6, r0
   ba31a:	b918      	cbnz	r0, ba324 <_ZN7RH_RF954initEv+0x14>
	return false;
   ba31c:	2600      	movs	r6, #0
}
   ba31e:	4630      	mov	r0, r6
   ba320:	b002      	add	sp, #8
   ba322:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   ba324:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   ba328:	2dff      	cmp	r5, #255	; 0xff
   ba32a:	d054      	beq.n	ba3d6 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   ba32c:	4629      	mov	r1, r5
   ba32e:	4620      	mov	r0, r4
   ba330:	f7ff fd5f 	bl	b9df2 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   ba334:	2280      	movs	r2, #128	; 0x80
   ba336:	2101      	movs	r1, #1
   ba338:	4620      	mov	r0, r4
   ba33a:	f7ff fce4 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   ba33e:	200a      	movs	r0, #10
   ba340:	f001 f85e 	bl	bb400 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   ba344:	2101      	movs	r1, #1
   ba346:	4620      	mov	r0, r4
   ba348:	f7ff fcbc 	bl	b9cc4 <_ZN11RHSPIDriver7spiReadEh>
   ba34c:	2880      	cmp	r0, #128	; 0x80
   ba34e:	d1e5      	bne.n	ba31c <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   ba350:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   ba354:	28ff      	cmp	r0, #255	; 0xff
   ba356:	d01c      	beq.n	ba392 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   ba358:	2100      	movs	r1, #0
   ba35a:	f004 f957 	bl	be60c <pinMode>
	if (_myInterruptIndex == 0xff)
   ba35e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   ba362:	2bff      	cmp	r3, #255	; 0xff
   ba364:	d107      	bne.n	ba376 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   ba366:	4a26      	ldr	r2, [pc, #152]	; (ba400 <_ZN7RH_RF954initEv+0xf0>)
   ba368:	7813      	ldrb	r3, [r2, #0]
   ba36a:	2b03      	cmp	r3, #3
   ba36c:	d8d6      	bhi.n	ba31c <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   ba36e:	1c59      	adds	r1, r3, #1
   ba370:	7011      	strb	r1, [r2, #0]
   ba372:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   ba376:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   ba37a:	4b22      	ldr	r3, [pc, #136]	; (ba404 <_ZN7RH_RF954initEv+0xf4>)
   ba37c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   ba380:	bb62      	cbnz	r2, ba3dc <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   ba382:	4921      	ldr	r1, [pc, #132]	; (ba408 <_ZN7RH_RF954initEv+0xf8>)
   ba384:	9200      	str	r2, [sp, #0]
   ba386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba38a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   ba38c:	b2a8      	uxth	r0, r5
   ba38e:	f001 fe2b 	bl	bbfe8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   ba392:	2200      	movs	r2, #0
   ba394:	210e      	movs	r1, #14
   ba396:	4620      	mov	r0, r4
   ba398:	f7ff fcb5 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   ba39c:	2200      	movs	r2, #0
   ba39e:	210f      	movs	r1, #15
   ba3a0:	4620      	mov	r0, r4
   ba3a2:	f7ff fcb0 	bl	b9d06 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   ba3a6:	4620      	mov	r0, r4
   ba3a8:	f7ff fe28 	bl	b9ffc <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   ba3ac:	2100      	movs	r1, #0
   ba3ae:	4620      	mov	r0, r4
   ba3b0:	f7ff ff88 	bl	ba2c4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   ba3b4:	2108      	movs	r1, #8
   ba3b6:	4620      	mov	r0, r4
   ba3b8:	f7ff ff9c 	bl	ba2f4 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   ba3bc:	ed9f 0a13 	vldr	s0, [pc, #76]	; ba40c <_ZN7RH_RF954initEv+0xfc>
   ba3c0:	4620      	mov	r0, r4
   ba3c2:	f7ff fdd9 	bl	b9f78 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   ba3c6:	2300      	movs	r3, #0
   ba3c8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   ba3cc:	210d      	movs	r1, #13
   ba3ce:	4620      	mov	r0, r4
   ba3d0:	f7ff fd70 	bl	b9eb4 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   ba3d4:	e7a3      	b.n	ba31e <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   ba3d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   ba3da:	e7ab      	b.n	ba334 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   ba3dc:	2a01      	cmp	r2, #1
   ba3de:	f04f 0300 	mov.w	r3, #0
   ba3e2:	d104      	bne.n	ba3ee <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   ba3e4:	9300      	str	r3, [sp, #0]
   ba3e6:	490a      	ldr	r1, [pc, #40]	; (ba410 <_ZN7RH_RF954initEv+0x100>)
   ba3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba3ec:	e7ce      	b.n	ba38c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   ba3ee:	2a02      	cmp	r2, #2
   ba3f0:	d194      	bne.n	ba31c <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   ba3f2:	9300      	str	r3, [sp, #0]
   ba3f4:	4907      	ldr	r1, [pc, #28]	; (ba414 <_ZN7RH_RF954initEv+0x104>)
   ba3f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba3fa:	2201      	movs	r2, #1
   ba3fc:	e7c6      	b.n	ba38c <_ZN7RH_RF954initEv+0x7c>
   ba3fe:	bf00      	nop
   ba400:	2003e56d 	.word	0x2003e56d
   ba404:	2003e570 	.word	0x2003e570
   ba408:	000ba149 	.word	0x000ba149
   ba40c:	43d90000 	.word	0x43d90000
   ba410:	000ba159 	.word	0x000ba159
   ba414:	000ba169 	.word	0x000ba169

000ba418 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   ba418:	2001      	movs	r0, #1
   ba41a:	4770      	bx	lr

000ba41c <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   ba41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba41e:	4d1f      	ldr	r5, [pc, #124]	; (ba49c <_ZN14SequentialFileC1Ev+0x80>)
   ba420:	4b1f      	ldr	r3, [pc, #124]	; (ba4a0 <_ZN14SequentialFileC1Ev+0x84>)
   ba422:	4604      	mov	r4, r0
   ba424:	4629      	mov	r1, r5
   ba426:	f840 3b04 	str.w	r3, [r0], #4
   ba42a:	f003 fb9e 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   ba42e:	491d      	ldr	r1, [pc, #116]	; (ba4a4 <_ZN14SequentialFileC1Ev+0x88>)
   ba430:	f104 0014 	add.w	r0, r4, #20
   ba434:	f003 fb99 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   ba438:	4629      	mov	r1, r5
   ba43a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba43e:	f003 fb94 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   ba442:	2300      	movs	r3, #0
   ba444:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba448:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   ba44c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   ba450:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   ba454:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   ba458:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba45c:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba45e:	2308      	movs	r3, #8
   ba460:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba462:	2020      	movs	r0, #32
   ba464:	f7f9 fe17 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba468:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba46a:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba46c:	3d01      	subs	r5, #1
   ba46e:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba470:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   ba474:	4606      	mov	r6, r0
   ba476:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba47a:	f7f9 fe0c 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba47e:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba482:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   ba486:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   ba48a:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba48c:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba48e:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   ba490:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba492:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   ba494:	6667      	str	r7, [r4, #100]	; 0x64

}
   ba496:	4620      	mov	r0, r4
   ba498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba49a:	bf00      	nop
   ba49c:	000c0d65 	.word	0x000c0d65
   ba4a0:	000c0bf0 	.word	0x000c0bf0
   ba4a4:	000c0af0 	.word	0x000c0af0

000ba4a8 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   ba4a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   ba4aa:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   ba4ac:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   ba4ae:	4628      	mov	r0, r5
   ba4b0:	f003 fbb9 	bl	bdc26 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   ba4b4:	490e      	ldr	r1, [pc, #56]	; (ba4f0 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   ba4b6:	4668      	mov	r0, sp
   ba4b8:	f003 fb57 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   ba4bc:	4669      	mov	r1, sp
   ba4be:	4628      	mov	r0, r5
   ba4c0:	f003 fc1e 	bl	bdd00 <_ZNK6String8endsWithERKS_>
   ba4c4:	4606      	mov	r6, r0
   ba4c6:	4668      	mov	r0, sp
   ba4c8:	f003 fb04 	bl	bdad4 <_ZN6StringD1Ev>
   ba4cc:	b16e      	cbz	r6, ba4ea <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   ba4ce:	68e3      	ldr	r3, [r4, #12]
   ba4d0:	2200      	movs	r2, #0
   ba4d2:	3b01      	subs	r3, #1
   ba4d4:	4629      	mov	r1, r5
   ba4d6:	4668      	mov	r0, sp
   ba4d8:	f003 fc28 	bl	bdd2c <_ZNK6String9substringEjj>
   ba4dc:	4669      	mov	r1, sp
   ba4de:	4628      	mov	r0, r5
   ba4e0:	f003 fb99 	bl	bdc16 <_ZN6StringaSEOS_>
   ba4e4:	4668      	mov	r0, sp
   ba4e6:	f003 faf5 	bl	bdad4 <_ZN6StringD1Ev>
    }
    return *this; 
};
   ba4ea:	4620      	mov	r0, r4
   ba4ec:	b004      	add	sp, #16
   ba4ee:	bd70      	pop	{r4, r5, r6, pc}
   ba4f0:	000c0af5 	.word	0x000c0af5

000ba4f4 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   ba4f4:	b510      	push	{r4, lr}
    if (!queueMutex) {
   ba4f6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   ba4f8:	4604      	mov	r4, r0
    if (!queueMutex) {
   ba4fa:	b913      	cbnz	r3, ba502 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   ba4fc:	303c      	adds	r0, #60	; 0x3c
   ba4fe:	f000 fb09 	bl	bab14 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   ba502:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   ba504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   ba508:	f000 bb0c 	b.w	bab24 <os_mutex_lock>

000ba50c <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   ba50c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   ba50e:	f000 bb11 	b.w	bab34 <os_mutex_unlock>
	...

000ba514 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   ba514:	b510      	push	{r4, lr}
   ba516:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   ba518:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   ba51a:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   ba51c:	f000 fcc2 	bl	baea4 <stat>
    if (result == 0) {
   ba520:	b9d0      	cbnz	r0, ba558 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   ba522:	9b01      	ldr	r3, [sp, #4]
   ba524:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   ba526:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   ba528:	d506      	bpl.n	ba538 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   ba52a:	4915      	ldr	r1, [pc, #84]	; (ba580 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   ba52c:	4815      	ldr	r0, [pc, #84]	; (ba584 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba52e:	f7f9 fdcd 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
        return true;
   ba532:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   ba534:	b016      	add	sp, #88	; 0x58
   ba536:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   ba538:	4812      	ldr	r0, [pc, #72]	; (ba584 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba53a:	4913      	ldr	r1, [pc, #76]	; (ba588 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   ba53c:	f7fb fc14 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   ba540:	4620      	mov	r0, r4
   ba542:	f005 f897 	bl	bf674 <unlink>
    result = mkdir(path, 0777);
   ba546:	f240 11ff 	movw	r1, #511	; 0x1ff
   ba54a:	4620      	mov	r0, r4
   ba54c:	f000 fcb2 	bl	baeb4 <mkdir>
    if (result == 0) {
   ba550:	b980      	cbnz	r0, ba574 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   ba552:	490e      	ldr	r1, [pc, #56]	; (ba58c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   ba554:	4622      	mov	r2, r4
   ba556:	e7e9      	b.n	ba52c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   ba558:	f000 ff1a 	bl	bb390 <__errno>
   ba55c:	6803      	ldr	r3, [r0, #0]
   ba55e:	2b02      	cmp	r3, #2
   ba560:	d0f1      	beq.n	ba546 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   ba562:	f000 ff15 	bl	bb390 <__errno>
   ba566:	490a      	ldr	r1, [pc, #40]	; (ba590 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   ba568:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   ba56a:	4806      	ldr	r0, [pc, #24]	; (ba584 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba56c:	f7fb fbfc 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba570:	2000      	movs	r0, #0
   ba572:	e7df      	b.n	ba534 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   ba574:	f000 ff0c 	bl	bb390 <__errno>
   ba578:	4906      	ldr	r1, [pc, #24]	; (ba594 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   ba57a:	6802      	ldr	r2, [r0, #0]
   ba57c:	e7f5      	b.n	ba56a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   ba57e:	bf00      	nop
   ba580:	000c0b02 	.word	0x000c0b02
   ba584:	2003e57c 	.word	0x2003e57c
   ba588:	000c0b1f 	.word	0x000c0b1f
   ba58c:	000c0b50 	.word	0x000c0b50
   ba590:	000c0b3c 	.word	0x000c0b3c
   ba594:	000c0b5f 	.word	0x000c0b5f

000ba598 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   ba598:	b538      	push	{r3, r4, r5, lr}
   ba59a:	4615      	mov	r5, r2
   ba59c:	4604      	mov	r4, r0
    String result = name;
   ba59e:	f003 fae4 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   ba5a2:	b14d      	cbz	r5, ba5b8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   ba5a4:	782b      	ldrb	r3, [r5, #0]
   ba5a6:	b13b      	cbz	r3, ba5b8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   ba5a8:	4904      	ldr	r1, [pc, #16]	; (ba5bc <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   ba5aa:	4620      	mov	r0, r4
   ba5ac:	f003 fb64 	bl	bdc78 <_ZN6String6concatEPKc>
   ba5b0:	4629      	mov	r1, r5
   ba5b2:	4620      	mov	r0, r4
   ba5b4:	f003 fb60 	bl	bdc78 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   ba5b8:	4620      	mov	r0, r4
   ba5ba:	bd38      	pop	{r3, r4, r5, pc}
   ba5bc:	000c0e6c 	.word	0x000c0e6c

000ba5c0 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   ba5c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba5c2:	4605      	mov	r5, r0
   ba5c4:	460e      	mov	r6, r1
   ba5c6:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   ba5c8:	6949      	ldr	r1, [r1, #20]
   ba5ca:	4668      	mov	r0, sp
   ba5cc:	f003 fbce 	bl	bdd6c <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   ba5d0:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   ba5d2:	b904      	cbnz	r4, ba5d6 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   ba5d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba5d6:	4622      	mov	r2, r4
   ba5d8:	4628      	mov	r0, r5
   ba5da:	f7ff ffdd 	bl	ba598 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   ba5de:	4668      	mov	r0, sp
   ba5e0:	f003 fa78 	bl	bdad4 <_ZN6StringD1Ev>
}
   ba5e4:	4628      	mov	r0, r5
   ba5e6:	b004      	add	sp, #16
   ba5e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba5ec <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   ba5ec:	b570      	push	{r4, r5, r6, lr}
   ba5ee:	460c      	mov	r4, r1
   ba5f0:	b08e      	sub	sp, #56	; 0x38
    String result;
   ba5f2:	491a      	ldr	r1, [pc, #104]	; (ba65c <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   ba5f4:	e9cd 3200 	strd	r3, r2, [sp]
   ba5f8:	4605      	mov	r5, r0
    String result;
   ba5fa:	f003 fab6 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   ba5fe:	68e0      	ldr	r0, [r4, #12]
   ba600:	69e1      	ldr	r1, [r4, #28]
   ba602:	4401      	add	r1, r0
   ba604:	3104      	adds	r1, #4
   ba606:	4628      	mov	r0, r5
   ba608:	f003 fa82 	bl	bdb10 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   ba60c:	1d21      	adds	r1, r4, #4
   ba60e:	a806      	add	r0, sp, #24
   ba610:	f003 faf6 	bl	bdc00 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   ba614:	4912      	ldr	r1, [pc, #72]	; (ba660 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   ba616:	a802      	add	r0, sp, #8
   ba618:	f003 faa7 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   ba61c:	a902      	add	r1, sp, #8
   ba61e:	a806      	add	r0, sp, #24
   ba620:	f003 fb3b 	bl	bdc9a <_ZplRK15StringSumHelperRK6String>
   ba624:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba628:	4606      	mov	r6, r0
   ba62a:	4621      	mov	r1, r4
   ba62c:	a80a      	add	r0, sp, #40	; 0x28
   ba62e:	f7ff ffc7 	bl	ba5c0 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   ba632:	a90a      	add	r1, sp, #40	; 0x28
   ba634:	4630      	mov	r0, r6
   ba636:	f003 fb30 	bl	bdc9a <_ZplRK15StringSumHelperRK6String>
   ba63a:	4601      	mov	r1, r0
   ba63c:	4628      	mov	r0, r5
   ba63e:	f003 fad0 	bl	bdbe2 <_ZN6StringaSERKS_>
   ba642:	a80a      	add	r0, sp, #40	; 0x28
   ba644:	f003 fa46 	bl	bdad4 <_ZN6StringD1Ev>
   ba648:	a802      	add	r0, sp, #8
   ba64a:	f003 fa43 	bl	bdad4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   ba64e:	a806      	add	r0, sp, #24
   ba650:	f003 fa40 	bl	bdad4 <_ZN6StringD1Ev>
}
   ba654:	4628      	mov	r0, r5
   ba656:	b00e      	add	sp, #56	; 0x38
   ba658:	bd70      	pop	{r4, r5, r6, pc}
   ba65a:	bf00      	nop
   ba65c:	000c0d65 	.word	0x000c0d65
   ba660:	000c0af5 	.word	0x000c0af5

000ba664 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   ba664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   ba668:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   ba66a:	b08e      	sub	sp, #56	; 0x38
   ba66c:	4605      	mov	r5, r0
   ba66e:	460f      	mov	r7, r1
    if (allExtensions) {
   ba670:	2a00      	cmp	r2, #0
   ba672:	d04a      	beq.n	ba70a <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   ba674:	6840      	ldr	r0, [r0, #4]
   ba676:	f000 fc2d 	bl	baed4 <opendir>
        if (dir) {
   ba67a:	4606      	mov	r6, r0
   ba67c:	2800      	cmp	r0, #0
   ba67e:	d054      	beq.n	ba72a <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   ba680:	f8df a0b4 	ldr.w	sl, [pc, #180]	; ba738 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   ba684:	f8df 90ac 	ldr.w	r9, [pc, #172]	; ba734 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   ba688:	f8df 80a4 	ldr.w	r8, [pc, #164]	; ba730 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   ba68c:	4630      	mov	r0, r6
   ba68e:	f000 fc29 	bl	baee4 <readdir>
                if (!ent) {
   ba692:	2800      	cmp	r0, #0
   ba694:	d033      	beq.n	ba6fe <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   ba696:	7a82      	ldrb	r2, [r0, #10]
   ba698:	2a08      	cmp	r2, #8
   ba69a:	d1f7      	bne.n	ba68c <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   ba69c:	f100 040b 	add.w	r4, r0, #11
   ba6a0:	6969      	ldr	r1, [r5, #20]
   ba6a2:	aa01      	add	r2, sp, #4
   ba6a4:	4620      	mov	r0, r4
   ba6a6:	f000 fe4b 	bl	bb340 <sscanf>
   ba6aa:	2801      	cmp	r0, #1
   ba6ac:	d1ee      	bne.n	ba68c <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   ba6ae:	9b01      	ldr	r3, [sp, #4]
   ba6b0:	42bb      	cmp	r3, r7
   ba6b2:	d1eb      	bne.n	ba68c <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   ba6b4:	1d29      	adds	r1, r5, #4
   ba6b6:	a80a      	add	r0, sp, #40	; 0x28
   ba6b8:	f003 faa2 	bl	bdc00 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   ba6bc:	4651      	mov	r1, sl
   ba6be:	a806      	add	r0, sp, #24
   ba6c0:	f003 fa53 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   ba6c4:	a906      	add	r1, sp, #24
   ba6c6:	a80a      	add	r0, sp, #40	; 0x28
   ba6c8:	f003 fae7 	bl	bdc9a <_ZplRK15StringSumHelperRK6String>
   ba6cc:	4621      	mov	r1, r4
   ba6ce:	f003 faf0 	bl	bdcb2 <_ZplRK15StringSumHelperPKc>
   ba6d2:	4601      	mov	r1, r0
   ba6d4:	a802      	add	r0, sp, #8
   ba6d6:	f003 fa93 	bl	bdc00 <_ZN6StringC1ERKS_>
   ba6da:	a806      	add	r0, sp, #24
   ba6dc:	f003 f9fa 	bl	bdad4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   ba6e0:	a80a      	add	r0, sp, #40	; 0x28
   ba6e2:	f003 f9f7 	bl	bdad4 <_ZN6StringD1Ev>
                        unlink(path);
   ba6e6:	9802      	ldr	r0, [sp, #8]
   ba6e8:	f004 ffc4 	bl	bf674 <unlink>
                        _log.trace("removed %s", path.c_str());
   ba6ec:	4640      	mov	r0, r8
   ba6ee:	9a02      	ldr	r2, [sp, #8]
   ba6f0:	4649      	mov	r1, r9
   ba6f2:	f7fb fb47 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   ba6f6:	a802      	add	r0, sp, #8
   ba6f8:	f003 f9ec 	bl	bdad4 <_ZN6StringD1Ev>
                    continue;
   ba6fc:	e7c6      	b.n	ba68c <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   ba6fe:	4630      	mov	r0, r6
}
   ba700:	b00e      	add	sp, #56	; 0x38
   ba702:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   ba706:	f000 bbf5 	b.w	baef4 <closedir>
        String path = getPathForFileNum(fileNum); 
   ba70a:	460a      	mov	r2, r1
   ba70c:	4601      	mov	r1, r0
   ba70e:	a80a      	add	r0, sp, #40	; 0x28
   ba710:	f7ff ff6c 	bl	ba5ec <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   ba714:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba716:	f004 ffad 	bl	bf674 <unlink>
        _log.trace("removed %s", path.c_str());
   ba71a:	4805      	ldr	r0, [pc, #20]	; (ba730 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   ba71c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   ba71e:	4905      	ldr	r1, [pc, #20]	; (ba734 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   ba720:	f7fb fb30 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   ba724:	a80a      	add	r0, sp, #40	; 0x28
   ba726:	f003 f9d5 	bl	bdad4 <_ZN6StringD1Ev>
}
   ba72a:	b00e      	add	sp, #56	; 0x38
   ba72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba730:	2003e57c 	.word	0x2003e57c
   ba734:	000c0af7 	.word	0x000c0af7
   ba738:	000c0af5 	.word	0x000c0af5

000ba73c <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba73c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba73e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba740:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba742:	b183      	cbz	r3, ba766 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba744:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba746:	6945      	ldr	r5, [r0, #20]
   ba748:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba74a:	42ae      	cmp	r6, r5
   ba74c:	d906      	bls.n	ba75c <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   ba74e:	f855 0b04 	ldr.w	r0, [r5], #4
   ba752:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba756:	f7f9 fca2 	bl	b409e <_ZdlPvj>
   ba75a:	e7f6      	b.n	ba74a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   ba75c:	6861      	ldr	r1, [r4, #4]
   ba75e:	6820      	ldr	r0, [r4, #0]
   ba760:	0089      	lsls	r1, r1, #2
   ba762:	f7f9 fc9c 	bl	b409e <_ZdlPvj>
    }
   ba766:	4620      	mov	r0, r4
   ba768:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba76c <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   ba76c:	b510      	push	{r4, lr}
   ba76e:	4b09      	ldr	r3, [pc, #36]	; (ba794 <_ZN14SequentialFileD1Ev+0x28>)
   ba770:	4604      	mov	r4, r0
   ba772:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   ba776:	f7ff ffe1 	bl	ba73c <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   ba77a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba77e:	f003 f9a9 	bl	bdad4 <_ZN6StringD1Ev>
   ba782:	f104 0014 	add.w	r0, r4, #20
   ba786:	f003 f9a5 	bl	bdad4 <_ZN6StringD1Ev>
   ba78a:	1d20      	adds	r0, r4, #4
   ba78c:	f003 f9a2 	bl	bdad4 <_ZN6StringD1Ev>
}
   ba790:	4620      	mov	r0, r4
   ba792:	bd10      	pop	{r4, pc}
   ba794:	000c0bf0 	.word	0x000c0bf0

000ba798 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   ba798:	b510      	push	{r4, lr}
   ba79a:	4604      	mov	r4, r0
}
   ba79c:	f7ff ffe6 	bl	ba76c <_ZN14SequentialFileD1Ev>
   ba7a0:	4620      	mov	r0, r4
   ba7a2:	2168      	movs	r1, #104	; 0x68
   ba7a4:	f7f9 fc7b 	bl	b409e <_ZdlPvj>
   ba7a8:	4620      	mov	r0, r4
   ba7aa:	bd10      	pop	{r4, pc}

000ba7ac <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba7ac:	68c3      	ldr	r3, [r0, #12]
   ba7ae:	68ca      	ldr	r2, [r1, #12]
   ba7b0:	1a9b      	subs	r3, r3, r2
   ba7b2:	109b      	asrs	r3, r3, #2
   ba7b4:	1e5a      	subs	r2, r3, #1
   ba7b6:	e9d0 3000 	ldrd	r3, r0, [r0]
   ba7ba:	1a1b      	subs	r3, r3, r0
   ba7bc:	109b      	asrs	r3, r3, #2
   ba7be:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba7c2:	6888      	ldr	r0, [r1, #8]
   ba7c4:	680a      	ldr	r2, [r1, #0]
   ba7c6:	1a80      	subs	r0, r0, r2
      }
   ba7c8:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba7cc:	4770      	bx	lr
	...

000ba7d0 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   ba7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   ba7d4:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   ba7d6:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   ba7d8:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   ba7da:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   ba7dc:	4604      	mov	r4, r0
   ba7de:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   ba7e0:	d007      	beq.n	ba7f2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba7e2:	b10b      	cbz	r3, ba7e8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   ba7e4:	680a      	ldr	r2, [r1, #0]
   ba7e6:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba7e8:	69a3      	ldr	r3, [r4, #24]
   ba7ea:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba7ec:	61a3      	str	r3, [r4, #24]
      }
   ba7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba7f2:	f100 0108 	add.w	r1, r0, #8
   ba7f6:	3018      	adds	r0, #24
   ba7f8:	f7ff ffd8 	bl	ba7ac <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   ba7fc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba800:	4298      	cmp	r0, r3
   ba802:	d102      	bne.n	ba80a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   ba804:	4838      	ldr	r0, [pc, #224]	; (ba8e8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   ba806:	f004 f812 	bl	be82e <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba80a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba80c:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba80e:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba810:	1a11      	subs	r1, r2, r0
   ba812:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba816:	2901      	cmp	r1, #1
   ba818:	d825      	bhi.n	ba866 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba81a:	6961      	ldr	r1, [r4, #20]
   ba81c:	eba2 0801 	sub.w	r8, r2, r1
   ba820:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba824:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba826:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   ba82a:	d936      	bls.n	ba89a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   ba82c:	1b5d      	subs	r5, r3, r5
   ba82e:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba830:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   ba834:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba836:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   ba838:	eba3 0201 	sub.w	r2, r3, r1
   ba83c:	d926      	bls.n	ba88c <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   ba83e:	428b      	cmp	r3, r1
   ba840:	d002      	beq.n	ba848 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba842:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba844:	f004 fd0e 	bl	bf264 <memmove>
	_M_node = __new_node;
   ba848:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   ba84a:	682b      	ldr	r3, [r5, #0]
   ba84c:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba84e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba852:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba854:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   ba858:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba85a:	f855 3008 	ldr.w	r3, [r5, r8]
   ba85e:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba860:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba864:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba866:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba86a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   ba86c:	f7f9 fc13 	bl	b4096 <_Znwj>
   ba870:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba872:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba874:	b10b      	cbz	r3, ba87a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   ba876:	683a      	ldr	r2, [r7, #0]
   ba878:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba87a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba87c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba87e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba880:	685b      	ldr	r3, [r3, #4]
   ba882:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba884:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba888:	6222      	str	r2, [r4, #32]
   ba88a:	e7af      	b.n	ba7ec <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   ba88c:	428b      	cmp	r3, r1
   ba88e:	d0db      	beq.n	ba848 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba890:	f108 0004 	add.w	r0, r8, #4
   ba894:	1a80      	subs	r0, r0, r2
   ba896:	4428      	add	r0, r5
   ba898:	e7d4      	b.n	ba844 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba89a:	f103 0902 	add.w	r9, r3, #2
   ba89e:	2b01      	cmp	r3, #1
   ba8a0:	bf2c      	ite	cs
   ba8a2:	4499      	addcs	r9, r3
   ba8a4:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   ba8a8:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   ba8ac:	d301      	bcc.n	ba8b2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   ba8ae:	f003 ffbb 	bl	be828 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba8b2:	ea4f 0089 	mov.w	r0, r9, lsl #2
   ba8b6:	f7f9 fbee 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   ba8ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba8bc:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba8be:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   ba8c2:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba8c4:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   ba8c6:	4291      	cmp	r1, r2
   ba8c8:	4682      	mov	sl, r0
   ba8ca:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   ba8ce:	d003      	beq.n	ba8d8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba8d0:	1a52      	subs	r2, r2, r1
   ba8d2:	4628      	mov	r0, r5
   ba8d4:	f004 fcc6 	bl	bf264 <memmove>
	::operator delete(__p
   ba8d8:	6861      	ldr	r1, [r4, #4]
   ba8da:	6820      	ldr	r0, [r4, #0]
   ba8dc:	0089      	lsls	r1, r1, #2
   ba8de:	f7f9 fbde 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba8e2:	e9c4 a900 	strd	sl, r9, [r4]
   ba8e6:	e7af      	b.n	ba848 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   ba8e8:	000c0779 	.word	0x000c0779

000ba8ec <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   ba8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   ba8f0:	68c3      	ldr	r3, [r0, #12]
   ba8f2:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   ba8f4:	b086      	sub	sp, #24
   ba8f6:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   ba8f8:	d808      	bhi.n	ba90c <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   ba8fa:	4934      	ldr	r1, [pc, #208]	; (ba9cc <_ZN14SequentialFile7scanDirEv+0xe0>)
   ba8fc:	4834      	ldr	r0, [pc, #208]	; (ba9d0 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba8fe:	f7fb fa33 	bl	b5d68 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba902:	2600      	movs	r6, #0
}
   ba904:	4630      	mov	r0, r6
   ba906:	b006      	add	sp, #24
   ba908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   ba90c:	6840      	ldr	r0, [r0, #4]
   ba90e:	f7ff fe01 	bl	ba514 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   ba912:	4606      	mov	r6, r0
   ba914:	2800      	cmp	r0, #0
   ba916:	d0f4      	beq.n	ba902 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   ba918:	6963      	ldr	r3, [r4, #20]
   ba91a:	6862      	ldr	r2, [r4, #4]
   ba91c:	492d      	ldr	r1, [pc, #180]	; (ba9d4 <_ZN14SequentialFile7scanDirEv+0xe8>)
   ba91e:	482c      	ldr	r0, [pc, #176]	; (ba9d0 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba920:	f7fb fa30 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   ba924:	6860      	ldr	r0, [r4, #4]
   ba926:	f000 fad5 	bl	baed4 <opendir>
    if (!dir) {
   ba92a:	4607      	mov	r7, r0
   ba92c:	2800      	cmp	r0, #0
   ba92e:	d0e8      	beq.n	ba902 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   ba930:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba932:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba9d8 <_ZN14SequentialFile7scanDirEv+0xec>
   ba936:	f8df 8098 	ldr.w	r8, [pc, #152]	; ba9d0 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   ba93a:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   ba93c:	4638      	mov	r0, r7
   ba93e:	f000 fad1 	bl	baee4 <readdir>
        if (!ent) {
   ba942:	4605      	mov	r5, r0
   ba944:	2800      	cmp	r0, #0
   ba946:	d039      	beq.n	ba9bc <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   ba948:	7a83      	ldrb	r3, [r0, #10]
   ba94a:	2b08      	cmp	r3, #8
   ba94c:	d1f6      	bne.n	ba93c <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   ba94e:	350b      	adds	r5, #11
   ba950:	6961      	ldr	r1, [r4, #20]
   ba952:	aa01      	add	r2, sp, #4
   ba954:	4628      	mov	r0, r5
   ba956:	f000 fcf3 	bl	bb340 <sscanf>
   ba95a:	2801      	cmp	r0, #1
   ba95c:	d1ee      	bne.n	ba93c <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   ba95e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba960:	b17b      	cbz	r3, ba982 <_ZN14SequentialFile7scanDirEv+0x96>
   ba962:	4629      	mov	r1, r5
   ba964:	a802      	add	r0, sp, #8
   ba966:	f003 f900 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
   ba96a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   ba96e:	a802      	add	r0, sp, #8
   ba970:	f003 f9c6 	bl	bdd00 <_ZNK6String8endsWithERKS_>
   ba974:	4682      	mov	sl, r0
   ba976:	a802      	add	r0, sp, #8
   ba978:	f003 f8ac 	bl	bdad4 <_ZN6StringD1Ev>
   ba97c:	f1ba 0f00 	cmp.w	sl, #0
   ba980:	d0dc      	beq.n	ba93c <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   ba982:	6823      	ldr	r3, [r4, #0]
   ba984:	4629      	mov	r1, r5
   ba986:	689b      	ldr	r3, [r3, #8]
   ba988:	4620      	mov	r0, r4
   ba98a:	4798      	blx	r3
   ba98c:	2800      	cmp	r0, #0
   ba98e:	d0d5      	beq.n	ba93c <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   ba990:	9a01      	ldr	r2, [sp, #4]
   ba992:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba994:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   ba996:	bfb8      	it	lt
   ba998:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba99a:	462b      	mov	r3, r5
   ba99c:	4649      	mov	r1, r9
   ba99e:	4640      	mov	r0, r8
   ba9a0:	f7fb f9f0 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   ba9a4:	4620      	mov	r0, r4
   ba9a6:	f7ff fda5 	bl	ba4f4 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   ba9aa:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba9ae:	a901      	add	r1, sp, #4
   ba9b0:	f7ff ff0e 	bl	ba7d0 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   ba9b4:	4620      	mov	r0, r4
   ba9b6:	f7ff fda9 	bl	ba50c <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   ba9ba:	e7bf      	b.n	ba93c <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   ba9bc:	4638      	mov	r0, r7
   ba9be:	f000 fa99 	bl	baef4 <closedir>
    scanDirCompleted = true;
   ba9c2:	2301      	movs	r3, #1
   ba9c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   ba9c8:	e79c      	b.n	ba904 <_ZN14SequentialFile7scanDirEv+0x18>
   ba9ca:	bf00      	nop
   ba9cc:	000c0b75 	.word	0x000c0b75
   ba9d0:	2003e57c 	.word	0x2003e57c
   ba9d4:	000c0b8a 	.word	0x000c0b8a
   ba9d8:	000c0ba6 	.word	0x000c0ba6

000ba9dc <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   ba9dc:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   ba9de:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   ba9e2:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba9e4:	b90b      	cbnz	r3, ba9ea <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   ba9e6:	f7ff ff81 	bl	ba8ec <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   ba9ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   ba9ec:	3001      	adds	r0, #1
   ba9ee:	63a0      	str	r0, [r4, #56]	; 0x38
}
   ba9f0:	bd10      	pop	{r4, pc}
	...

000ba9f4 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   ba9f4:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   ba9f6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   ba9fa:	4604      	mov	r4, r0
   ba9fc:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   ba9fe:	b90b      	cbnz	r3, baa04 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   baa00:	f7ff ff74 	bl	ba8ec <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   baa04:	4620      	mov	r0, r4
   baa06:	f7ff fd75 	bl	ba4f4 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   baa0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   baa0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   baa0e:	429a      	cmp	r2, r3
   baa10:	d020      	beq.n	baa54 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   baa12:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   baa16:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   baa18:	b126      	cbz	r6, baa24 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   baa1a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   baa1c:	4293      	cmp	r3, r2
   baa1e:	d00c      	beq.n	baa3a <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   baa20:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   baa22:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   baa24:	4620      	mov	r0, r4
   baa26:	f7ff fd71 	bl	ba50c <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   baa2a:	b125      	cbz	r5, baa36 <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   baa2c:	490a      	ldr	r1, [pc, #40]	; (baa58 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   baa2e:	480b      	ldr	r0, [pc, #44]	; (baa5c <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   baa30:	462a      	mov	r2, r5
   baa32:	f7fb f9a7 	bl	b5d84 <_ZNK5spark6Logger5traceEPKcz>
}
   baa36:	4628      	mov	r0, r5
   baa38:	bd70      	pop	{r4, r5, r6, pc}
   baa3a:	f44f 7100 	mov.w	r1, #512	; 0x200
   baa3e:	f7f9 fb2e 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   baa42:	6d63      	ldr	r3, [r4, #84]	; 0x54
   baa44:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   baa46:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   baa48:	685b      	ldr	r3, [r3, #4]
   baa4a:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   baa4c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   baa50:	6522      	str	r2, [r4, #80]	; 0x50
   baa52:	e7e6      	b.n	baa22 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   baa54:	2500      	movs	r5, #0
   baa56:	e7e5      	b.n	baa24 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   baa58:	000c0bbc 	.word	0x000c0bbc
   baa5c:	2003e57c 	.word	0x2003e57c

000baa60 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   baa60:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   baa62:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   baa66:	9101      	str	r1, [sp, #4]
   baa68:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   baa6a:	b90b      	cbnz	r3, baa70 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   baa6c:	f7ff ff3e 	bl	ba8ec <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   baa70:	9b01      	ldr	r3, [sp, #4]
   baa72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   baa74:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   baa76:	bfb8      	it	lt
   baa78:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   baa7a:	4620      	mov	r0, r4
   baa7c:	f7ff fd3a 	bl	ba4f4 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   baa80:	a901      	add	r1, sp, #4
   baa82:	f104 0040 	add.w	r0, r4, #64	; 0x40
   baa86:	f7ff fea3 	bl	ba7d0 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   baa8a:	4620      	mov	r0, r4
   baa8c:	f7ff fd3e 	bl	ba50c <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   baa90:	b002      	add	sp, #8
   baa92:	bd10      	pop	{r4, pc}

000baa94 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   baa94:	b538      	push	{r3, r4, r5, lr}
   baa96:	4604      	mov	r4, r0
    queueMutexLock();
   baa98:	f7ff fd2c 	bl	ba4f4 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   baa9c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   baaa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   baaa4:	f7ff fe82 	bl	ba7ac <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   baaa8:	4605      	mov	r5, r0
    queueMutexUnlock();
   baaaa:	4620      	mov	r0, r4
   baaac:	f7ff fd2e 	bl	ba50c <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   baab0:	4628      	mov	r0, r5
   baab2:	bd38      	pop	{r3, r4, r5, pc}

000baab4 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   baab4:	4b01      	ldr	r3, [pc, #4]	; (baabc <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   baab6:	4a02      	ldr	r2, [pc, #8]	; (baac0 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   baab8:	601a      	str	r2, [r3, #0]
}
   baaba:	4770      	bx	lr
   baabc:	2003e57c 	.word	0x2003e57c
   baac0:	000c0bd9 	.word	0x000c0bd9

000baac4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   baac4:	b508      	push	{r3, lr}
   baac6:	4b02      	ldr	r3, [pc, #8]	; (baad0 <cellular_signal+0xc>)
   baac8:	681b      	ldr	r3, [r3, #0]
   baaca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   baacc:	9301      	str	r3, [sp, #4]
   baace:	bd08      	pop	{r3, pc}
   baad0:	00030274 	.word	0x00030274

000baad4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   baad4:	b508      	push	{r3, lr}
   baad6:	4b02      	ldr	r3, [pc, #8]	; (baae0 <os_thread_create+0xc>)
   baad8:	681b      	ldr	r3, [r3, #0]
   baada:	685b      	ldr	r3, [r3, #4]
   baadc:	9301      	str	r3, [sp, #4]
   baade:	bd08      	pop	{r3, pc}
   baae0:	00030248 	.word	0x00030248

000baae4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   baae4:	b508      	push	{r3, lr}
   baae6:	4b02      	ldr	r3, [pc, #8]	; (baaf0 <os_thread_is_current+0xc>)
   baae8:	681b      	ldr	r3, [r3, #0]
   baaea:	689b      	ldr	r3, [r3, #8]
   baaec:	9301      	str	r3, [sp, #4]
   baaee:	bd08      	pop	{r3, pc}
   baaf0:	00030248 	.word	0x00030248

000baaf4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   baaf4:	b508      	push	{r3, lr}
   baaf6:	4b02      	ldr	r3, [pc, #8]	; (bab00 <os_thread_join+0xc>)
   baaf8:	681b      	ldr	r3, [r3, #0]
   baafa:	691b      	ldr	r3, [r3, #16]
   baafc:	9301      	str	r3, [sp, #4]
   baafe:	bd08      	pop	{r3, pc}
   bab00:	00030248 	.word	0x00030248

000bab04 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bab04:	b508      	push	{r3, lr}
   bab06:	4b02      	ldr	r3, [pc, #8]	; (bab10 <os_thread_cleanup+0xc>)
   bab08:	681b      	ldr	r3, [r3, #0]
   bab0a:	695b      	ldr	r3, [r3, #20]
   bab0c:	9301      	str	r3, [sp, #4]
   bab0e:	bd08      	pop	{r3, pc}
   bab10:	00030248 	.word	0x00030248

000bab14 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bab14:	b508      	push	{r3, lr}
   bab16:	4b02      	ldr	r3, [pc, #8]	; (bab20 <os_mutex_create+0xc>)
   bab18:	681b      	ldr	r3, [r3, #0]
   bab1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bab1c:	9301      	str	r3, [sp, #4]
   bab1e:	bd08      	pop	{r3, pc}
   bab20:	00030248 	.word	0x00030248

000bab24 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bab24:	b508      	push	{r3, lr}
   bab26:	4b02      	ldr	r3, [pc, #8]	; (bab30 <os_mutex_lock+0xc>)
   bab28:	681b      	ldr	r3, [r3, #0]
   bab2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bab2c:	9301      	str	r3, [sp, #4]
   bab2e:	bd08      	pop	{r3, pc}
   bab30:	00030248 	.word	0x00030248

000bab34 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bab34:	b508      	push	{r3, lr}
   bab36:	4b02      	ldr	r3, [pc, #8]	; (bab40 <os_mutex_unlock+0xc>)
   bab38:	681b      	ldr	r3, [r3, #0]
   bab3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bab3c:	9301      	str	r3, [sp, #4]
   bab3e:	bd08      	pop	{r3, pc}
   bab40:	00030248 	.word	0x00030248

000bab44 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bab44:	b508      	push	{r3, lr}
   bab46:	4b02      	ldr	r3, [pc, #8]	; (bab50 <os_mutex_recursive_create+0xc>)
   bab48:	681b      	ldr	r3, [r3, #0]
   bab4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bab4c:	9301      	str	r3, [sp, #4]
   bab4e:	bd08      	pop	{r3, pc}
   bab50:	00030248 	.word	0x00030248

000bab54 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bab54:	b508      	push	{r3, lr}
   bab56:	4b02      	ldr	r3, [pc, #8]	; (bab60 <os_mutex_recursive_destroy+0xc>)
   bab58:	681b      	ldr	r3, [r3, #0]
   bab5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bab5c:	9301      	str	r3, [sp, #4]
   bab5e:	bd08      	pop	{r3, pc}
   bab60:	00030248 	.word	0x00030248

000bab64 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bab64:	b508      	push	{r3, lr}
   bab66:	4b02      	ldr	r3, [pc, #8]	; (bab70 <os_mutex_recursive_lock+0xc>)
   bab68:	681b      	ldr	r3, [r3, #0]
   bab6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bab6c:	9301      	str	r3, [sp, #4]
   bab6e:	bd08      	pop	{r3, pc}
   bab70:	00030248 	.word	0x00030248

000bab74 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bab74:	b508      	push	{r3, lr}
   bab76:	4b02      	ldr	r3, [pc, #8]	; (bab80 <os_mutex_recursive_unlock+0xc>)
   bab78:	681b      	ldr	r3, [r3, #0]
   bab7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bab7c:	9301      	str	r3, [sp, #4]
   bab7e:	bd08      	pop	{r3, pc}
   bab80:	00030248 	.word	0x00030248

000bab84 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bab84:	b508      	push	{r3, lr}
   bab86:	4b02      	ldr	r3, [pc, #8]	; (bab90 <os_thread_exit+0xc>)
   bab88:	681b      	ldr	r3, [r3, #0]
   bab8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bab8c:	9301      	str	r3, [sp, #4]
   bab8e:	bd08      	pop	{r3, pc}
   bab90:	00030248 	.word	0x00030248

000bab94 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bab94:	b508      	push	{r3, lr}
   bab96:	4b02      	ldr	r3, [pc, #8]	; (baba0 <HAL_Core_Runtime_Info+0xc>)
   bab98:	681b      	ldr	r3, [r3, #0]
   bab9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bab9c:	9301      	str	r3, [sp, #4]
   bab9e:	bd08      	pop	{r3, pc}
   baba0:	00030234 	.word	0x00030234

000baba4 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   baba4:	b508      	push	{r3, lr}
   baba6:	4b02      	ldr	r3, [pc, #8]	; (babb0 <HAL_Feature_Set+0xc>)
   baba8:	681b      	ldr	r3, [r3, #0]
   babaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   babac:	9301      	str	r3, [sp, #4]
   babae:	bd08      	pop	{r3, pc}
   babb0:	00030234 	.word	0x00030234

000babb4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   babb4:	b508      	push	{r3, lr}
   babb6:	4b02      	ldr	r3, [pc, #8]	; (babc0 <HAL_RNG_GetRandomNumber+0xc>)
   babb8:	681b      	ldr	r3, [r3, #0]
   babba:	685b      	ldr	r3, [r3, #4]
   babbc:	9301      	str	r3, [sp, #4]
   babbe:	bd08      	pop	{r3, pc}
   babc0:	00030218 	.word	0x00030218

000babc4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   babc4:	b508      	push	{r3, lr}
   babc6:	4b02      	ldr	r3, [pc, #8]	; (babd0 <HAL_Delay_Milliseconds+0xc>)
   babc8:	681b      	ldr	r3, [r3, #0]
   babca:	689b      	ldr	r3, [r3, #8]
   babcc:	9301      	str	r3, [sp, #4]
   babce:	bd08      	pop	{r3, pc}
   babd0:	00030218 	.word	0x00030218

000babd4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   babd4:	b508      	push	{r3, lr}
   babd6:	4b02      	ldr	r3, [pc, #8]	; (babe0 <HAL_Delay_Microseconds+0xc>)
   babd8:	681b      	ldr	r3, [r3, #0]
   babda:	68db      	ldr	r3, [r3, #12]
   babdc:	9301      	str	r3, [sp, #4]
   babde:	bd08      	pop	{r3, pc}
   babe0:	00030218 	.word	0x00030218

000babe4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   babe4:	b508      	push	{r3, lr}
   babe6:	4b02      	ldr	r3, [pc, #8]	; (babf0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   babe8:	681b      	ldr	r3, [r3, #0]
   babea:	695b      	ldr	r3, [r3, #20]
   babec:	9301      	str	r3, [sp, #4]
   babee:	bd08      	pop	{r3, pc}
   babf0:	00030218 	.word	0x00030218

000babf4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   babf4:	b508      	push	{r3, lr}
   babf6:	4b02      	ldr	r3, [pc, #8]	; (bac00 <hal_rtc_time_is_valid+0xc>)
   babf8:	681b      	ldr	r3, [r3, #0]
   babfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   babfc:	9301      	str	r3, [sp, #4]
   babfe:	bd08      	pop	{r3, pc}
   bac00:	00030218 	.word	0x00030218

000bac04 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bac04:	b508      	push	{r3, lr}
   bac06:	4b02      	ldr	r3, [pc, #8]	; (bac10 <hal_timer_millis+0xc>)
   bac08:	681b      	ldr	r3, [r3, #0]
   bac0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bac0c:	9301      	str	r3, [sp, #4]
   bac0e:	bd08      	pop	{r3, pc}
   bac10:	00030218 	.word	0x00030218

000bac14 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bac14:	b508      	push	{r3, lr}
   bac16:	4b02      	ldr	r3, [pc, #8]	; (bac20 <hal_rtc_get_time+0xc>)
   bac18:	681b      	ldr	r3, [r3, #0]
   bac1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bac1c:	9301      	str	r3, [sp, #4]
   bac1e:	bd08      	pop	{r3, pc}
   bac20:	00030218 	.word	0x00030218

000bac24 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bac24:	b508      	push	{r3, lr}
   bac26:	4b02      	ldr	r3, [pc, #8]	; (bac30 <hal_rtc_set_time+0xc>)
   bac28:	681b      	ldr	r3, [r3, #0]
   bac2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bac2c:	9301      	str	r3, [sp, #4]
   bac2e:	bd08      	pop	{r3, pc}
   bac30:	00030218 	.word	0x00030218

000bac34 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bac34:	b508      	push	{r3, lr}
   bac36:	4b02      	ldr	r3, [pc, #8]	; (bac40 <HAL_Validate_Pin_Function+0xc>)
   bac38:	681b      	ldr	r3, [r3, #0]
   bac3a:	685b      	ldr	r3, [r3, #4]
   bac3c:	9301      	str	r3, [sp, #4]
   bac3e:	bd08      	pop	{r3, pc}
   bac40:	0003022c 	.word	0x0003022c

000bac44 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bac44:	b508      	push	{r3, lr}
   bac46:	4b02      	ldr	r3, [pc, #8]	; (bac50 <HAL_Pin_Mode+0xc>)
   bac48:	681b      	ldr	r3, [r3, #0]
   bac4a:	689b      	ldr	r3, [r3, #8]
   bac4c:	9301      	str	r3, [sp, #4]
   bac4e:	bd08      	pop	{r3, pc}
   bac50:	0003022c 	.word	0x0003022c

000bac54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bac54:	b508      	push	{r3, lr}
   bac56:	4b02      	ldr	r3, [pc, #8]	; (bac60 <HAL_Get_Pin_Mode+0xc>)
   bac58:	681b      	ldr	r3, [r3, #0]
   bac5a:	68db      	ldr	r3, [r3, #12]
   bac5c:	9301      	str	r3, [sp, #4]
   bac5e:	bd08      	pop	{r3, pc}
   bac60:	0003022c 	.word	0x0003022c

000bac64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bac64:	b508      	push	{r3, lr}
   bac66:	4b02      	ldr	r3, [pc, #8]	; (bac70 <HAL_GPIO_Write+0xc>)
   bac68:	681b      	ldr	r3, [r3, #0]
   bac6a:	691b      	ldr	r3, [r3, #16]
   bac6c:	9301      	str	r3, [sp, #4]
   bac6e:	bd08      	pop	{r3, pc}
   bac70:	0003022c 	.word	0x0003022c

000bac74 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bac74:	b508      	push	{r3, lr}
   bac76:	4b02      	ldr	r3, [pc, #8]	; (bac80 <HAL_GPIO_Read+0xc>)
   bac78:	681b      	ldr	r3, [r3, #0]
   bac7a:	695b      	ldr	r3, [r3, #20]
   bac7c:	9301      	str	r3, [sp, #4]
   bac7e:	bd08      	pop	{r3, pc}
   bac80:	0003022c 	.word	0x0003022c

000bac84 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bac84:	b508      	push	{r3, lr}
   bac86:	4b02      	ldr	r3, [pc, #8]	; (bac90 <HAL_Interrupts_Attach+0xc>)
   bac88:	681b      	ldr	r3, [r3, #0]
   bac8a:	699b      	ldr	r3, [r3, #24]
   bac8c:	9301      	str	r3, [sp, #4]
   bac8e:	bd08      	pop	{r3, pc}
   bac90:	0003022c 	.word	0x0003022c

000bac94 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bac94:	b508      	push	{r3, lr}
   bac96:	4b02      	ldr	r3, [pc, #8]	; (baca0 <HAL_Interrupts_Detach+0xc>)
   bac98:	681b      	ldr	r3, [r3, #0]
   bac9a:	69db      	ldr	r3, [r3, #28]
   bac9c:	9301      	str	r3, [sp, #4]
   bac9e:	bd08      	pop	{r3, pc}
   baca0:	0003022c 	.word	0x0003022c

000baca4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   baca4:	b508      	push	{r3, lr}
   baca6:	4b02      	ldr	r3, [pc, #8]	; (bacb0 <hal_adc_read+0xc>)
   baca8:	681b      	ldr	r3, [r3, #0]
   bacaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bacac:	9301      	str	r3, [sp, #4]
   bacae:	bd08      	pop	{r3, pc}
   bacb0:	0003022c 	.word	0x0003022c

000bacb4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bacb4:	b508      	push	{r3, lr}
   bacb6:	4b02      	ldr	r3, [pc, #8]	; (bacc0 <hal_i2c_begin+0xc>)
   bacb8:	681b      	ldr	r3, [r3, #0]
   bacba:	68db      	ldr	r3, [r3, #12]
   bacbc:	9301      	str	r3, [sp, #4]
   bacbe:	bd08      	pop	{r3, pc}
   bacc0:	00030228 	.word	0x00030228

000bacc4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bacc4:	b508      	push	{r3, lr}
   bacc6:	4b02      	ldr	r3, [pc, #8]	; (bacd0 <hal_i2c_begin_transmission+0xc>)
   bacc8:	681b      	ldr	r3, [r3, #0]
   bacca:	699b      	ldr	r3, [r3, #24]
   baccc:	9301      	str	r3, [sp, #4]
   bacce:	bd08      	pop	{r3, pc}
   bacd0:	00030228 	.word	0x00030228

000bacd4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bacd4:	b508      	push	{r3, lr}
   bacd6:	4b02      	ldr	r3, [pc, #8]	; (bace0 <hal_i2c_end_transmission+0xc>)
   bacd8:	681b      	ldr	r3, [r3, #0]
   bacda:	69db      	ldr	r3, [r3, #28]
   bacdc:	9301      	str	r3, [sp, #4]
   bacde:	bd08      	pop	{r3, pc}
   bace0:	00030228 	.word	0x00030228

000bace4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bace4:	b508      	push	{r3, lr}
   bace6:	4b02      	ldr	r3, [pc, #8]	; (bacf0 <hal_i2c_write+0xc>)
   bace8:	681b      	ldr	r3, [r3, #0]
   bacea:	6a1b      	ldr	r3, [r3, #32]
   bacec:	9301      	str	r3, [sp, #4]
   bacee:	bd08      	pop	{r3, pc}
   bacf0:	00030228 	.word	0x00030228

000bacf4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bacf4:	b508      	push	{r3, lr}
   bacf6:	4b02      	ldr	r3, [pc, #8]	; (bad00 <hal_i2c_available+0xc>)
   bacf8:	681b      	ldr	r3, [r3, #0]
   bacfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bacfc:	9301      	str	r3, [sp, #4]
   bacfe:	bd08      	pop	{r3, pc}
   bad00:	00030228 	.word	0x00030228

000bad04 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bad04:	b508      	push	{r3, lr}
   bad06:	4b02      	ldr	r3, [pc, #8]	; (bad10 <hal_i2c_read+0xc>)
   bad08:	681b      	ldr	r3, [r3, #0]
   bad0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bad0c:	9301      	str	r3, [sp, #4]
   bad0e:	bd08      	pop	{r3, pc}
   bad10:	00030228 	.word	0x00030228

000bad14 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bad14:	b508      	push	{r3, lr}
   bad16:	4b02      	ldr	r3, [pc, #8]	; (bad20 <hal_i2c_peek+0xc>)
   bad18:	681b      	ldr	r3, [r3, #0]
   bad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bad1c:	9301      	str	r3, [sp, #4]
   bad1e:	bd08      	pop	{r3, pc}
   bad20:	00030228 	.word	0x00030228

000bad24 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bad24:	b508      	push	{r3, lr}
   bad26:	4b02      	ldr	r3, [pc, #8]	; (bad30 <hal_i2c_flush+0xc>)
   bad28:	681b      	ldr	r3, [r3, #0]
   bad2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bad2c:	9301      	str	r3, [sp, #4]
   bad2e:	bd08      	pop	{r3, pc}
   bad30:	00030228 	.word	0x00030228

000bad34 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bad34:	b508      	push	{r3, lr}
   bad36:	4b02      	ldr	r3, [pc, #8]	; (bad40 <hal_i2c_is_enabled+0xc>)
   bad38:	681b      	ldr	r3, [r3, #0]
   bad3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bad3c:	9301      	str	r3, [sp, #4]
   bad3e:	bd08      	pop	{r3, pc}
   bad40:	00030228 	.word	0x00030228

000bad44 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bad44:	b508      	push	{r3, lr}
   bad46:	4b02      	ldr	r3, [pc, #8]	; (bad50 <hal_i2c_init+0xc>)
   bad48:	681b      	ldr	r3, [r3, #0]
   bad4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bad4c:	9301      	str	r3, [sp, #4]
   bad4e:	bd08      	pop	{r3, pc}
   bad50:	00030228 	.word	0x00030228

000bad54 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bad54:	b508      	push	{r3, lr}
   bad56:	4b02      	ldr	r3, [pc, #8]	; (bad60 <hal_i2c_lock+0xc>)
   bad58:	681b      	ldr	r3, [r3, #0]
   bad5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bad5c:	9301      	str	r3, [sp, #4]
   bad5e:	bd08      	pop	{r3, pc}
   bad60:	00030228 	.word	0x00030228

000bad64 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bad64:	b508      	push	{r3, lr}
   bad66:	4b02      	ldr	r3, [pc, #8]	; (bad70 <hal_i2c_unlock+0xc>)
   bad68:	681b      	ldr	r3, [r3, #0]
   bad6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bad6c:	9301      	str	r3, [sp, #4]
   bad6e:	bd08      	pop	{r3, pc}
   bad70:	00030228 	.word	0x00030228

000bad74 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bad74:	b508      	push	{r3, lr}
   bad76:	4b02      	ldr	r3, [pc, #8]	; (bad80 <hal_i2c_request_ex+0xc>)
   bad78:	681b      	ldr	r3, [r3, #0]
   bad7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bad7c:	9301      	str	r3, [sp, #4]
   bad7e:	bd08      	pop	{r3, pc}
   bad80:	00030228 	.word	0x00030228

000bad84 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bad84:	b508      	push	{r3, lr}
   bad86:	4b02      	ldr	r3, [pc, #8]	; (bad90 <inet_inet_ntop+0xc>)
   bad88:	681b      	ldr	r3, [r3, #0]
   bad8a:	695b      	ldr	r3, [r3, #20]
   bad8c:	9301      	str	r3, [sp, #4]
   bad8e:	bd08      	pop	{r3, pc}
   bad90:	00030264 	.word	0x00030264

000bad94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bad94:	b508      	push	{r3, lr}
   bad96:	4b02      	ldr	r3, [pc, #8]	; (bada0 <netdb_freeaddrinfo+0xc>)
   bad98:	681b      	ldr	r3, [r3, #0]
   bad9a:	689b      	ldr	r3, [r3, #8]
   bad9c:	9301      	str	r3, [sp, #4]
   bad9e:	bd08      	pop	{r3, pc}
   bada0:	00030268 	.word	0x00030268

000bada4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bada4:	b508      	push	{r3, lr}
   bada6:	4b02      	ldr	r3, [pc, #8]	; (badb0 <netdb_getaddrinfo+0xc>)
   bada8:	681b      	ldr	r3, [r3, #0]
   badaa:	68db      	ldr	r3, [r3, #12]
   badac:	9301      	str	r3, [sp, #4]
   badae:	bd08      	pop	{r3, pc}
   badb0:	00030268 	.word	0x00030268

000badb4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   badb4:	b508      	push	{r3, lr}
   badb6:	4b02      	ldr	r3, [pc, #8]	; (badc0 <hal_spi_begin+0xc>)
   badb8:	681b      	ldr	r3, [r3, #0]
   badba:	681b      	ldr	r3, [r3, #0]
   badbc:	9301      	str	r3, [sp, #4]
   badbe:	bd08      	pop	{r3, pc}
   badc0:	00030230 	.word	0x00030230

000badc4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   badc4:	b508      	push	{r3, lr}
   badc6:	4b02      	ldr	r3, [pc, #8]	; (badd0 <hal_spi_end+0xc>)
   badc8:	681b      	ldr	r3, [r3, #0]
   badca:	685b      	ldr	r3, [r3, #4]
   badcc:	9301      	str	r3, [sp, #4]
   badce:	bd08      	pop	{r3, pc}
   badd0:	00030230 	.word	0x00030230

000badd4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   badd4:	b508      	push	{r3, lr}
   badd6:	4b02      	ldr	r3, [pc, #8]	; (bade0 <hal_spi_transfer+0xc>)
   badd8:	681b      	ldr	r3, [r3, #0]
   badda:	695b      	ldr	r3, [r3, #20]
   baddc:	9301      	str	r3, [sp, #4]
   badde:	bd08      	pop	{r3, pc}
   bade0:	00030230 	.word	0x00030230

000bade4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bade4:	b508      	push	{r3, lr}
   bade6:	4b02      	ldr	r3, [pc, #8]	; (badf0 <hal_spi_init+0xc>)
   bade8:	681b      	ldr	r3, [r3, #0]
   badea:	69db      	ldr	r3, [r3, #28]
   badec:	9301      	str	r3, [sp, #4]
   badee:	bd08      	pop	{r3, pc}
   badf0:	00030230 	.word	0x00030230

000badf4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   badf4:	b508      	push	{r3, lr}
   badf6:	4b02      	ldr	r3, [pc, #8]	; (bae00 <hal_spi_is_enabled+0xc>)
   badf8:	681b      	ldr	r3, [r3, #0]
   badfa:	6a1b      	ldr	r3, [r3, #32]
   badfc:	9301      	str	r3, [sp, #4]
   badfe:	bd08      	pop	{r3, pc}
   bae00:	00030230 	.word	0x00030230

000bae04 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bae04:	b508      	push	{r3, lr}
   bae06:	4b02      	ldr	r3, [pc, #8]	; (bae10 <hal_spi_info+0xc>)
   bae08:	681b      	ldr	r3, [r3, #0]
   bae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bae0c:	9301      	str	r3, [sp, #4]
   bae0e:	bd08      	pop	{r3, pc}
   bae10:	00030230 	.word	0x00030230

000bae14 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bae14:	b508      	push	{r3, lr}
   bae16:	4b02      	ldr	r3, [pc, #8]	; (bae20 <hal_spi_set_settings+0xc>)
   bae18:	681b      	ldr	r3, [r3, #0]
   bae1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bae1c:	9301      	str	r3, [sp, #4]
   bae1e:	bd08      	pop	{r3, pc}
   bae20:	00030230 	.word	0x00030230

000bae24 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bae24:	b508      	push	{r3, lr}
   bae26:	4b02      	ldr	r3, [pc, #8]	; (bae30 <hal_spi_acquire+0xc>)
   bae28:	681b      	ldr	r3, [r3, #0]
   bae2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bae2c:	9301      	str	r3, [sp, #4]
   bae2e:	bd08      	pop	{r3, pc}
   bae30:	00030230 	.word	0x00030230

000bae34 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bae34:	b508      	push	{r3, lr}
   bae36:	4b02      	ldr	r3, [pc, #8]	; (bae40 <hal_spi_release+0xc>)
   bae38:	681b      	ldr	r3, [r3, #0]
   bae3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bae3c:	9301      	str	r3, [sp, #4]
   bae3e:	bd08      	pop	{r3, pc}
   bae40:	00030230 	.word	0x00030230

000bae44 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bae44:	b508      	push	{r3, lr}
   bae46:	4b02      	ldr	r3, [pc, #8]	; (bae50 <_open+0xc>)
   bae48:	681b      	ldr	r3, [r3, #0]
   bae4a:	681b      	ldr	r3, [r3, #0]
   bae4c:	9301      	str	r3, [sp, #4]
   bae4e:	bd08      	pop	{r3, pc}
   bae50:	00030284 	.word	0x00030284

000bae54 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bae54:	b508      	push	{r3, lr}
   bae56:	4b02      	ldr	r3, [pc, #8]	; (bae60 <_write+0xc>)
   bae58:	681b      	ldr	r3, [r3, #0]
   bae5a:	685b      	ldr	r3, [r3, #4]
   bae5c:	9301      	str	r3, [sp, #4]
   bae5e:	bd08      	pop	{r3, pc}
   bae60:	00030284 	.word	0x00030284

000bae64 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bae64:	b508      	push	{r3, lr}
   bae66:	4b02      	ldr	r3, [pc, #8]	; (bae70 <_read+0xc>)
   bae68:	681b      	ldr	r3, [r3, #0]
   bae6a:	689b      	ldr	r3, [r3, #8]
   bae6c:	9301      	str	r3, [sp, #4]
   bae6e:	bd08      	pop	{r3, pc}
   bae70:	00030284 	.word	0x00030284

000bae74 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bae74:	b508      	push	{r3, lr}
   bae76:	4b02      	ldr	r3, [pc, #8]	; (bae80 <_close+0xc>)
   bae78:	681b      	ldr	r3, [r3, #0]
   bae7a:	68db      	ldr	r3, [r3, #12]
   bae7c:	9301      	str	r3, [sp, #4]
   bae7e:	bd08      	pop	{r3, pc}
   bae80:	00030284 	.word	0x00030284

000bae84 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bae84:	b508      	push	{r3, lr}
   bae86:	4b02      	ldr	r3, [pc, #8]	; (bae90 <_fstat+0xc>)
   bae88:	681b      	ldr	r3, [r3, #0]
   bae8a:	695b      	ldr	r3, [r3, #20]
   bae8c:	9301      	str	r3, [sp, #4]
   bae8e:	bd08      	pop	{r3, pc}
   bae90:	00030284 	.word	0x00030284

000bae94 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bae94:	b508      	push	{r3, lr}
   bae96:	4b02      	ldr	r3, [pc, #8]	; (baea0 <_lseek+0xc>)
   bae98:	681b      	ldr	r3, [r3, #0]
   bae9a:	6a1b      	ldr	r3, [r3, #32]
   bae9c:	9301      	str	r3, [sp, #4]
   bae9e:	bd08      	pop	{r3, pc}
   baea0:	00030284 	.word	0x00030284

000baea4 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   baea4:	b508      	push	{r3, lr}
   baea6:	4b02      	ldr	r3, [pc, #8]	; (baeb0 <stat+0xc>)
   baea8:	681b      	ldr	r3, [r3, #0]
   baeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baeac:	9301      	str	r3, [sp, #4]
   baeae:	bd08      	pop	{r3, pc}
   baeb0:	00030284 	.word	0x00030284

000baeb4 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   baeb4:	b508      	push	{r3, lr}
   baeb6:	4b02      	ldr	r3, [pc, #8]	; (baec0 <mkdir+0xc>)
   baeb8:	681b      	ldr	r3, [r3, #0]
   baeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   baebc:	9301      	str	r3, [sp, #4]
   baebe:	bd08      	pop	{r3, pc}
   baec0:	00030284 	.word	0x00030284

000baec4 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   baec4:	b508      	push	{r3, lr}
   baec6:	4b02      	ldr	r3, [pc, #8]	; (baed0 <_unlink+0xc>)
   baec8:	681b      	ldr	r3, [r3, #0]
   baeca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   baecc:	9301      	str	r3, [sp, #4]
   baece:	bd08      	pop	{r3, pc}
   baed0:	00030284 	.word	0x00030284

000baed4 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   baed4:	b508      	push	{r3, lr}
   baed6:	4b02      	ldr	r3, [pc, #8]	; (baee0 <opendir+0xc>)
   baed8:	681b      	ldr	r3, [r3, #0]
   baeda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   baedc:	9301      	str	r3, [sp, #4]
   baede:	bd08      	pop	{r3, pc}
   baee0:	00030284 	.word	0x00030284

000baee4 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   baee4:	b508      	push	{r3, lr}
   baee6:	4b02      	ldr	r3, [pc, #8]	; (baef0 <readdir+0xc>)
   baee8:	681b      	ldr	r3, [r3, #0]
   baeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baeec:	9301      	str	r3, [sp, #4]
   baeee:	bd08      	pop	{r3, pc}
   baef0:	00030284 	.word	0x00030284

000baef4 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   baef4:	b508      	push	{r3, lr}
   baef6:	4b02      	ldr	r3, [pc, #8]	; (baf00 <closedir+0xc>)
   baef8:	681b      	ldr	r3, [r3, #0]
   baefa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   baefc:	9301      	str	r3, [sp, #4]
   baefe:	bd08      	pop	{r3, pc}
   baf00:	00030284 	.word	0x00030284

000baf04 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   baf04:	b508      	push	{r3, lr}
   baf06:	4b02      	ldr	r3, [pc, #8]	; (baf10 <hal_usart_end+0xc>)
   baf08:	681b      	ldr	r3, [r3, #0]
   baf0a:	689b      	ldr	r3, [r3, #8]
   baf0c:	9301      	str	r3, [sp, #4]
   baf0e:	bd08      	pop	{r3, pc}
   baf10:	0003023c 	.word	0x0003023c

000baf14 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   baf14:	b508      	push	{r3, lr}
   baf16:	4b02      	ldr	r3, [pc, #8]	; (baf20 <hal_usart_write+0xc>)
   baf18:	681b      	ldr	r3, [r3, #0]
   baf1a:	68db      	ldr	r3, [r3, #12]
   baf1c:	9301      	str	r3, [sp, #4]
   baf1e:	bd08      	pop	{r3, pc}
   baf20:	0003023c 	.word	0x0003023c

000baf24 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   baf24:	b508      	push	{r3, lr}
   baf26:	4b02      	ldr	r3, [pc, #8]	; (baf30 <hal_usart_available+0xc>)
   baf28:	681b      	ldr	r3, [r3, #0]
   baf2a:	691b      	ldr	r3, [r3, #16]
   baf2c:	9301      	str	r3, [sp, #4]
   baf2e:	bd08      	pop	{r3, pc}
   baf30:	0003023c 	.word	0x0003023c

000baf34 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   baf34:	b508      	push	{r3, lr}
   baf36:	4b02      	ldr	r3, [pc, #8]	; (baf40 <hal_usart_read+0xc>)
   baf38:	681b      	ldr	r3, [r3, #0]
   baf3a:	695b      	ldr	r3, [r3, #20]
   baf3c:	9301      	str	r3, [sp, #4]
   baf3e:	bd08      	pop	{r3, pc}
   baf40:	0003023c 	.word	0x0003023c

000baf44 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   baf44:	b508      	push	{r3, lr}
   baf46:	4b02      	ldr	r3, [pc, #8]	; (baf50 <hal_usart_peek+0xc>)
   baf48:	681b      	ldr	r3, [r3, #0]
   baf4a:	699b      	ldr	r3, [r3, #24]
   baf4c:	9301      	str	r3, [sp, #4]
   baf4e:	bd08      	pop	{r3, pc}
   baf50:	0003023c 	.word	0x0003023c

000baf54 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   baf54:	b508      	push	{r3, lr}
   baf56:	4b02      	ldr	r3, [pc, #8]	; (baf60 <hal_usart_flush+0xc>)
   baf58:	681b      	ldr	r3, [r3, #0]
   baf5a:	69db      	ldr	r3, [r3, #28]
   baf5c:	9301      	str	r3, [sp, #4]
   baf5e:	bd08      	pop	{r3, pc}
   baf60:	0003023c 	.word	0x0003023c

000baf64 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   baf64:	b508      	push	{r3, lr}
   baf66:	4b02      	ldr	r3, [pc, #8]	; (baf70 <hal_usart_is_enabled+0xc>)
   baf68:	681b      	ldr	r3, [r3, #0]
   baf6a:	6a1b      	ldr	r3, [r3, #32]
   baf6c:	9301      	str	r3, [sp, #4]
   baf6e:	bd08      	pop	{r3, pc}
   baf70:	0003023c 	.word	0x0003023c

000baf74 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   baf74:	b508      	push	{r3, lr}
   baf76:	4b02      	ldr	r3, [pc, #8]	; (baf80 <hal_usart_available_data_for_write+0xc>)
   baf78:	681b      	ldr	r3, [r3, #0]
   baf7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   baf7c:	9301      	str	r3, [sp, #4]
   baf7e:	bd08      	pop	{r3, pc}
   baf80:	0003023c 	.word	0x0003023c

000baf84 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   baf84:	b508      	push	{r3, lr}
   baf86:	4b02      	ldr	r3, [pc, #8]	; (baf90 <hal_usart_begin_config+0xc>)
   baf88:	681b      	ldr	r3, [r3, #0]
   baf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   baf8c:	9301      	str	r3, [sp, #4]
   baf8e:	bd08      	pop	{r3, pc}
   baf90:	0003023c 	.word	0x0003023c

000baf94 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   baf94:	b508      	push	{r3, lr}
   baf96:	4b02      	ldr	r3, [pc, #8]	; (bafa0 <hal_usart_init_ex+0xc>)
   baf98:	681b      	ldr	r3, [r3, #0]
   baf9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baf9c:	9301      	str	r3, [sp, #4]
   baf9e:	bd08      	pop	{r3, pc}
   bafa0:	0003023c 	.word	0x0003023c

000bafa4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bafa4:	b508      	push	{r3, lr}
   bafa6:	4b02      	ldr	r3, [pc, #8]	; (bafb0 <HAL_USB_USART_Init+0xc>)
   bafa8:	681b      	ldr	r3, [r3, #0]
   bafaa:	681b      	ldr	r3, [r3, #0]
   bafac:	9301      	str	r3, [sp, #4]
   bafae:	bd08      	pop	{r3, pc}
   bafb0:	0003024c 	.word	0x0003024c

000bafb4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bafb4:	b508      	push	{r3, lr}
   bafb6:	4b02      	ldr	r3, [pc, #8]	; (bafc0 <HAL_USB_USART_Begin+0xc>)
   bafb8:	681b      	ldr	r3, [r3, #0]
   bafba:	685b      	ldr	r3, [r3, #4]
   bafbc:	9301      	str	r3, [sp, #4]
   bafbe:	bd08      	pop	{r3, pc}
   bafc0:	0003024c 	.word	0x0003024c

000bafc4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bafc4:	b508      	push	{r3, lr}
   bafc6:	4b02      	ldr	r3, [pc, #8]	; (bafd0 <HAL_USB_USART_End+0xc>)
   bafc8:	681b      	ldr	r3, [r3, #0]
   bafca:	689b      	ldr	r3, [r3, #8]
   bafcc:	9301      	str	r3, [sp, #4]
   bafce:	bd08      	pop	{r3, pc}
   bafd0:	0003024c 	.word	0x0003024c

000bafd4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bafd4:	b508      	push	{r3, lr}
   bafd6:	4b02      	ldr	r3, [pc, #8]	; (bafe0 <HAL_USB_USART_Available_Data+0xc>)
   bafd8:	681b      	ldr	r3, [r3, #0]
   bafda:	691b      	ldr	r3, [r3, #16]
   bafdc:	9301      	str	r3, [sp, #4]
   bafde:	bd08      	pop	{r3, pc}
   bafe0:	0003024c 	.word	0x0003024c

000bafe4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bafe4:	b508      	push	{r3, lr}
   bafe6:	4b02      	ldr	r3, [pc, #8]	; (baff0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bafe8:	681b      	ldr	r3, [r3, #0]
   bafea:	695b      	ldr	r3, [r3, #20]
   bafec:	9301      	str	r3, [sp, #4]
   bafee:	bd08      	pop	{r3, pc}
   baff0:	0003024c 	.word	0x0003024c

000baff4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   baff4:	b508      	push	{r3, lr}
   baff6:	4b02      	ldr	r3, [pc, #8]	; (bb000 <HAL_USB_USART_Receive_Data+0xc>)
   baff8:	681b      	ldr	r3, [r3, #0]
   baffa:	699b      	ldr	r3, [r3, #24]
   baffc:	9301      	str	r3, [sp, #4]
   baffe:	bd08      	pop	{r3, pc}
   bb000:	0003024c 	.word	0x0003024c

000bb004 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bb004:	b508      	push	{r3, lr}
   bb006:	4b02      	ldr	r3, [pc, #8]	; (bb010 <HAL_USB_USART_Send_Data+0xc>)
   bb008:	681b      	ldr	r3, [r3, #0]
   bb00a:	69db      	ldr	r3, [r3, #28]
   bb00c:	9301      	str	r3, [sp, #4]
   bb00e:	bd08      	pop	{r3, pc}
   bb010:	0003024c 	.word	0x0003024c

000bb014 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bb014:	b508      	push	{r3, lr}
   bb016:	4b02      	ldr	r3, [pc, #8]	; (bb020 <HAL_USB_USART_Flush_Data+0xc>)
   bb018:	681b      	ldr	r3, [r3, #0]
   bb01a:	6a1b      	ldr	r3, [r3, #32]
   bb01c:	9301      	str	r3, [sp, #4]
   bb01e:	bd08      	pop	{r3, pc}
   bb020:	0003024c 	.word	0x0003024c

000bb024 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bb024:	b508      	push	{r3, lr}
   bb026:	4b02      	ldr	r3, [pc, #8]	; (bb030 <panic_+0xc>)
   bb028:	681b      	ldr	r3, [r3, #0]
   bb02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb02c:	9301      	str	r3, [sp, #4]
   bb02e:	bd08      	pop	{r3, pc}
   bb030:	00030260 	.word	0x00030260

000bb034 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bb034:	b508      	push	{r3, lr}
   bb036:	4b02      	ldr	r3, [pc, #8]	; (bb040 <log_message+0xc>)
   bb038:	681b      	ldr	r3, [r3, #0]
   bb03a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bb03c:	9301      	str	r3, [sp, #4]
   bb03e:	bd08      	pop	{r3, pc}
   bb040:	00030260 	.word	0x00030260

000bb044 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bb044:	b508      	push	{r3, lr}
   bb046:	4b02      	ldr	r3, [pc, #8]	; (bb050 <log_message_v+0xc>)
   bb048:	681b      	ldr	r3, [r3, #0]
   bb04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb04c:	9301      	str	r3, [sp, #4]
   bb04e:	bd08      	pop	{r3, pc}
   bb050:	00030260 	.word	0x00030260

000bb054 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bb054:	b508      	push	{r3, lr}
   bb056:	4b02      	ldr	r3, [pc, #8]	; (bb060 <log_level_name+0xc>)
   bb058:	681b      	ldr	r3, [r3, #0]
   bb05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bb05c:	9301      	str	r3, [sp, #4]
   bb05e:	bd08      	pop	{r3, pc}
   bb060:	00030260 	.word	0x00030260

000bb064 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bb064:	b508      	push	{r3, lr}
   bb066:	4b02      	ldr	r3, [pc, #8]	; (bb070 <log_set_callbacks+0xc>)
   bb068:	681b      	ldr	r3, [r3, #0]
   bb06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bb06c:	9301      	str	r3, [sp, #4]
   bb06e:	bd08      	pop	{r3, pc}
   bb070:	00030260 	.word	0x00030260

000bb074 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bb074:	b508      	push	{r3, lr}
   bb076:	4b03      	ldr	r3, [pc, #12]	; (bb084 <diag_get_source+0x10>)
   bb078:	681b      	ldr	r3, [r3, #0]
   bb07a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bb07e:	9301      	str	r3, [sp, #4]
   bb080:	bd08      	pop	{r3, pc}
   bb082:	0000      	.short	0x0000
   bb084:	00030260 	.word	0x00030260

000bb088 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bb088:	b508      	push	{r3, lr}
   bb08a:	4b02      	ldr	r3, [pc, #8]	; (bb094 <system_mode+0xc>)
   bb08c:	681b      	ldr	r3, [r3, #0]
   bb08e:	681b      	ldr	r3, [r3, #0]
   bb090:	9301      	str	r3, [sp, #4]
   bb092:	bd08      	pop	{r3, pc}
   bb094:	00030220 	.word	0x00030220

000bb098 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bb098:	b508      	push	{r3, lr}
   bb09a:	4b02      	ldr	r3, [pc, #8]	; (bb0a4 <set_system_mode+0xc>)
   bb09c:	681b      	ldr	r3, [r3, #0]
   bb09e:	685b      	ldr	r3, [r3, #4]
   bb0a0:	9301      	str	r3, [sp, #4]
   bb0a2:	bd08      	pop	{r3, pc}
   bb0a4:	00030220 	.word	0x00030220

000bb0a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bb0a8:	b508      	push	{r3, lr}
   bb0aa:	4b02      	ldr	r3, [pc, #8]	; (bb0b4 <system_delay_ms+0xc>)
   bb0ac:	681b      	ldr	r3, [r3, #0]
   bb0ae:	695b      	ldr	r3, [r3, #20]
   bb0b0:	9301      	str	r3, [sp, #4]
   bb0b2:	bd08      	pop	{r3, pc}
   bb0b4:	00030220 	.word	0x00030220

000bb0b8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bb0b8:	b508      	push	{r3, lr}
   bb0ba:	4b02      	ldr	r3, [pc, #8]	; (bb0c4 <system_subscribe_event+0xc>)
   bb0bc:	681b      	ldr	r3, [r3, #0]
   bb0be:	6a1b      	ldr	r3, [r3, #32]
   bb0c0:	9301      	str	r3, [sp, #4]
   bb0c2:	bd08      	pop	{r3, pc}
   bb0c4:	00030220 	.word	0x00030220

000bb0c8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bb0c8:	b508      	push	{r3, lr}
   bb0ca:	4b02      	ldr	r3, [pc, #8]	; (bb0d4 <system_thread_set_state+0xc>)
   bb0cc:	681b      	ldr	r3, [r3, #0]
   bb0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb0d0:	9301      	str	r3, [sp, #4]
   bb0d2:	bd08      	pop	{r3, pc}
   bb0d4:	00030220 	.word	0x00030220

000bb0d8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bb0d8:	b508      	push	{r3, lr}
   bb0da:	4b02      	ldr	r3, [pc, #8]	; (bb0e4 <application_thread_current+0xc>)
   bb0dc:	681b      	ldr	r3, [r3, #0]
   bb0de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb0e0:	9301      	str	r3, [sp, #4]
   bb0e2:	bd08      	pop	{r3, pc}
   bb0e4:	00030220 	.word	0x00030220

000bb0e8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bb0e8:	b508      	push	{r3, lr}
   bb0ea:	4b02      	ldr	r3, [pc, #8]	; (bb0f4 <application_thread_invoke+0xc>)
   bb0ec:	681b      	ldr	r3, [r3, #0]
   bb0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb0f0:	9301      	str	r3, [sp, #4]
   bb0f2:	bd08      	pop	{r3, pc}
   bb0f4:	00030220 	.word	0x00030220

000bb0f8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bb0f8:	b508      	push	{r3, lr}
   bb0fa:	4b02      	ldr	r3, [pc, #8]	; (bb104 <system_thread_get_state+0xc>)
   bb0fc:	681b      	ldr	r3, [r3, #0]
   bb0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bb100:	9301      	str	r3, [sp, #4]
   bb102:	bd08      	pop	{r3, pc}
   bb104:	00030220 	.word	0x00030220

000bb108 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bb108:	b508      	push	{r3, lr}
   bb10a:	4b02      	ldr	r3, [pc, #8]	; (bb114 <system_notify_time_changed+0xc>)
   bb10c:	681b      	ldr	r3, [r3, #0]
   bb10e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bb110:	9301      	str	r3, [sp, #4]
   bb112:	bd08      	pop	{r3, pc}
   bb114:	00030220 	.word	0x00030220

000bb118 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bb118:	b508      	push	{r3, lr}
   bb11a:	4b03      	ldr	r3, [pc, #12]	; (bb128 <system_ctrl_set_app_request_handler+0x10>)
   bb11c:	681b      	ldr	r3, [r3, #0]
   bb11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bb122:	9301      	str	r3, [sp, #4]
   bb124:	bd08      	pop	{r3, pc}
   bb126:	0000      	.short	0x0000
   bb128:	00030220 	.word	0x00030220

000bb12c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bb12c:	b508      	push	{r3, lr}
   bb12e:	4b03      	ldr	r3, [pc, #12]	; (bb13c <system_ctrl_set_result+0x10>)
   bb130:	681b      	ldr	r3, [r3, #0]
   bb132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bb136:	9301      	str	r3, [sp, #4]
   bb138:	bd08      	pop	{r3, pc}
   bb13a:	0000      	.short	0x0000
   bb13c:	00030220 	.word	0x00030220

000bb140 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bb140:	b508      	push	{r3, lr}
   bb142:	4b03      	ldr	r3, [pc, #12]	; (bb150 <system_power_management_set_config+0x10>)
   bb144:	681b      	ldr	r3, [r3, #0]
   bb146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bb14a:	9301      	str	r3, [sp, #4]
   bb14c:	bd08      	pop	{r3, pc}
   bb14e:	0000      	.short	0x0000
   bb150:	00030220 	.word	0x00030220

000bb154 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bb154:	b508      	push	{r3, lr}
   bb156:	4b03      	ldr	r3, [pc, #12]	; (bb164 <system_sleep_ext+0x10>)
   bb158:	681b      	ldr	r3, [r3, #0]
   bb15a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bb15e:	9301      	str	r3, [sp, #4]
   bb160:	bd08      	pop	{r3, pc}
   bb162:	0000      	.short	0x0000
   bb164:	00030220 	.word	0x00030220

000bb168 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bb168:	b508      	push	{r3, lr}
   bb16a:	4b03      	ldr	r3, [pc, #12]	; (bb178 <system_reset+0x10>)
   bb16c:	681b      	ldr	r3, [r3, #0]
   bb16e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bb172:	9301      	str	r3, [sp, #4]
   bb174:	bd08      	pop	{r3, pc}
   bb176:	0000      	.short	0x0000
   bb178:	00030220 	.word	0x00030220

000bb17c <system_power_management_get_config>:

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
   bb17c:	b508      	push	{r3, lr}
   bb17e:	4b03      	ldr	r3, [pc, #12]	; (bb18c <system_power_management_get_config+0x10>)
   bb180:	681b      	ldr	r3, [r3, #0]
   bb182:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bb186:	9301      	str	r3, [sp, #4]
   bb188:	bd08      	pop	{r3, pc}
   bb18a:	0000      	.short	0x0000
   bb18c:	00030220 	.word	0x00030220

000bb190 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bb190:	b508      	push	{r3, lr}
   bb192:	4b02      	ldr	r3, [pc, #8]	; (bb19c <spark_variable+0xc>)
   bb194:	681b      	ldr	r3, [r3, #0]
   bb196:	681b      	ldr	r3, [r3, #0]
   bb198:	9301      	str	r3, [sp, #4]
   bb19a:	bd08      	pop	{r3, pc}
   bb19c:	00030244 	.word	0x00030244

000bb1a0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bb1a0:	b508      	push	{r3, lr}
   bb1a2:	4b02      	ldr	r3, [pc, #8]	; (bb1ac <spark_function+0xc>)
   bb1a4:	681b      	ldr	r3, [r3, #0]
   bb1a6:	685b      	ldr	r3, [r3, #4]
   bb1a8:	9301      	str	r3, [sp, #4]
   bb1aa:	bd08      	pop	{r3, pc}
   bb1ac:	00030244 	.word	0x00030244

000bb1b0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bb1b0:	b508      	push	{r3, lr}
   bb1b2:	4b02      	ldr	r3, [pc, #8]	; (bb1bc <spark_process+0xc>)
   bb1b4:	681b      	ldr	r3, [r3, #0]
   bb1b6:	689b      	ldr	r3, [r3, #8]
   bb1b8:	9301      	str	r3, [sp, #4]
   bb1ba:	bd08      	pop	{r3, pc}
   bb1bc:	00030244 	.word	0x00030244

000bb1c0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bb1c0:	b508      	push	{r3, lr}
   bb1c2:	4b02      	ldr	r3, [pc, #8]	; (bb1cc <spark_cloud_flag_connect+0xc>)
   bb1c4:	681b      	ldr	r3, [r3, #0]
   bb1c6:	68db      	ldr	r3, [r3, #12]
   bb1c8:	9301      	str	r3, [sp, #4]
   bb1ca:	bd08      	pop	{r3, pc}
   bb1cc:	00030244 	.word	0x00030244

000bb1d0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bb1d0:	b508      	push	{r3, lr}
   bb1d2:	4b02      	ldr	r3, [pc, #8]	; (bb1dc <spark_cloud_flag_connected+0xc>)
   bb1d4:	681b      	ldr	r3, [r3, #0]
   bb1d6:	695b      	ldr	r3, [r3, #20]
   bb1d8:	9301      	str	r3, [sp, #4]
   bb1da:	bd08      	pop	{r3, pc}
   bb1dc:	00030244 	.word	0x00030244

000bb1e0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bb1e0:	b508      	push	{r3, lr}
   bb1e2:	4b02      	ldr	r3, [pc, #8]	; (bb1ec <spark_send_event+0xc>)
   bb1e4:	681b      	ldr	r3, [r3, #0]
   bb1e6:	6a1b      	ldr	r3, [r3, #32]
   bb1e8:	9301      	str	r3, [sp, #4]
   bb1ea:	bd08      	pop	{r3, pc}
   bb1ec:	00030244 	.word	0x00030244

000bb1f0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bb1f0:	b508      	push	{r3, lr}
   bb1f2:	4b02      	ldr	r3, [pc, #8]	; (bb1fc <spark_sync_time_pending+0xc>)
   bb1f4:	681b      	ldr	r3, [r3, #0]
   bb1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb1f8:	9301      	str	r3, [sp, #4]
   bb1fa:	bd08      	pop	{r3, pc}
   bb1fc:	00030244 	.word	0x00030244

000bb200 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bb200:	b508      	push	{r3, lr}
   bb202:	4b02      	ldr	r3, [pc, #8]	; (bb20c <spark_sync_time_last+0xc>)
   bb204:	681b      	ldr	r3, [r3, #0]
   bb206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb208:	9301      	str	r3, [sp, #4]
   bb20a:	bd08      	pop	{r3, pc}
   bb20c:	00030244 	.word	0x00030244

000bb210 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   bb210:	b508      	push	{r3, lr}
   bb212:	4b02      	ldr	r3, [pc, #8]	; (bb21c <spark_set_connection_property+0xc>)
   bb214:	681b      	ldr	r3, [r3, #0]
   bb216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bb218:	9301      	str	r3, [sp, #4]
   bb21a:	bd08      	pop	{r3, pc}
   bb21c:	00030244 	.word	0x00030244

000bb220 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bb220:	b508      	push	{r3, lr}
   bb222:	4b02      	ldr	r3, [pc, #8]	; (bb22c <spark_set_random_seed_from_cloud_handler+0xc>)
   bb224:	681b      	ldr	r3, [r3, #0]
   bb226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb228:	9301      	str	r3, [sp, #4]
   bb22a:	bd08      	pop	{r3, pc}
   bb22c:	00030244 	.word	0x00030244

000bb230 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bb230:	b508      	push	{r3, lr}
   bb232:	4b02      	ldr	r3, [pc, #8]	; (bb23c <spark_cloud_disconnect+0xc>)
   bb234:	681b      	ldr	r3, [r3, #0]
   bb236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb238:	9301      	str	r3, [sp, #4]
   bb23a:	bd08      	pop	{r3, pc}
   bb23c:	00030244 	.word	0x00030244

000bb240 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bb240:	b508      	push	{r3, lr}
   bb242:	4b02      	ldr	r3, [pc, #8]	; (bb24c <network_connect+0xc>)
   bb244:	681b      	ldr	r3, [r3, #0]
   bb246:	685b      	ldr	r3, [r3, #4]
   bb248:	9301      	str	r3, [sp, #4]
   bb24a:	bd08      	pop	{r3, pc}
   bb24c:	00030240 	.word	0x00030240

000bb250 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bb250:	b508      	push	{r3, lr}
   bb252:	4b02      	ldr	r3, [pc, #8]	; (bb25c <network_connecting+0xc>)
   bb254:	681b      	ldr	r3, [r3, #0]
   bb256:	689b      	ldr	r3, [r3, #8]
   bb258:	9301      	str	r3, [sp, #4]
   bb25a:	bd08      	pop	{r3, pc}
   bb25c:	00030240 	.word	0x00030240

000bb260 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bb260:	b508      	push	{r3, lr}
   bb262:	4b02      	ldr	r3, [pc, #8]	; (bb26c <network_disconnect+0xc>)
   bb264:	681b      	ldr	r3, [r3, #0]
   bb266:	68db      	ldr	r3, [r3, #12]
   bb268:	9301      	str	r3, [sp, #4]
   bb26a:	bd08      	pop	{r3, pc}
   bb26c:	00030240 	.word	0x00030240

000bb270 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bb270:	b508      	push	{r3, lr}
   bb272:	4b02      	ldr	r3, [pc, #8]	; (bb27c <network_ready+0xc>)
   bb274:	681b      	ldr	r3, [r3, #0]
   bb276:	691b      	ldr	r3, [r3, #16]
   bb278:	9301      	str	r3, [sp, #4]
   bb27a:	bd08      	pop	{r3, pc}
   bb27c:	00030240 	.word	0x00030240

000bb280 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bb280:	b508      	push	{r3, lr}
   bb282:	4b02      	ldr	r3, [pc, #8]	; (bb28c <network_on+0xc>)
   bb284:	681b      	ldr	r3, [r3, #0]
   bb286:	695b      	ldr	r3, [r3, #20]
   bb288:	9301      	str	r3, [sp, #4]
   bb28a:	bd08      	pop	{r3, pc}
   bb28c:	00030240 	.word	0x00030240

000bb290 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bb290:	b508      	push	{r3, lr}
   bb292:	4b02      	ldr	r3, [pc, #8]	; (bb29c <network_off+0xc>)
   bb294:	681b      	ldr	r3, [r3, #0]
   bb296:	699b      	ldr	r3, [r3, #24]
   bb298:	9301      	str	r3, [sp, #4]
   bb29a:	bd08      	pop	{r3, pc}
   bb29c:	00030240 	.word	0x00030240

000bb2a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bb2a0:	b508      	push	{r3, lr}
   bb2a2:	4b02      	ldr	r3, [pc, #8]	; (bb2ac <network_listen+0xc>)
   bb2a4:	681b      	ldr	r3, [r3, #0]
   bb2a6:	69db      	ldr	r3, [r3, #28]
   bb2a8:	9301      	str	r3, [sp, #4]
   bb2aa:	bd08      	pop	{r3, pc}
   bb2ac:	00030240 	.word	0x00030240

000bb2b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bb2b0:	b508      	push	{r3, lr}
   bb2b2:	4b02      	ldr	r3, [pc, #8]	; (bb2bc <network_listening+0xc>)
   bb2b4:	681b      	ldr	r3, [r3, #0]
   bb2b6:	6a1b      	ldr	r3, [r3, #32]
   bb2b8:	9301      	str	r3, [sp, #4]
   bb2ba:	bd08      	pop	{r3, pc}
   bb2bc:	00030240 	.word	0x00030240

000bb2c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bb2c0:	b508      	push	{r3, lr}
   bb2c2:	4b02      	ldr	r3, [pc, #8]	; (bb2cc <network_set_listen_timeout+0xc>)
   bb2c4:	681b      	ldr	r3, [r3, #0]
   bb2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb2c8:	9301      	str	r3, [sp, #4]
   bb2ca:	bd08      	pop	{r3, pc}
   bb2cc:	00030240 	.word	0x00030240

000bb2d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bb2d0:	b508      	push	{r3, lr}
   bb2d2:	4b02      	ldr	r3, [pc, #8]	; (bb2dc <network_get_listen_timeout+0xc>)
   bb2d4:	681b      	ldr	r3, [r3, #0]
   bb2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb2d8:	9301      	str	r3, [sp, #4]
   bb2da:	bd08      	pop	{r3, pc}
   bb2dc:	00030240 	.word	0x00030240

000bb2e0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bb2e0:	b508      	push	{r3, lr}
   bb2e2:	4b02      	ldr	r3, [pc, #8]	; (bb2ec <network_is_on+0xc>)
   bb2e4:	681b      	ldr	r3, [r3, #0]
   bb2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb2e8:	9301      	str	r3, [sp, #4]
   bb2ea:	bd08      	pop	{r3, pc}
   bb2ec:	00030240 	.word	0x00030240

000bb2f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bb2f0:	b508      	push	{r3, lr}
   bb2f2:	4b02      	ldr	r3, [pc, #8]	; (bb2fc <network_is_off+0xc>)
   bb2f4:	681b      	ldr	r3, [r3, #0]
   bb2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb2f8:	9301      	str	r3, [sp, #4]
   bb2fa:	bd08      	pop	{r3, pc}
   bb2fc:	00030240 	.word	0x00030240

000bb300 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bb300:	b508      	push	{r3, lr}
   bb302:	4b02      	ldr	r3, [pc, #8]	; (bb30c <malloc+0xc>)
   bb304:	681b      	ldr	r3, [r3, #0]
   bb306:	681b      	ldr	r3, [r3, #0]
   bb308:	9301      	str	r3, [sp, #4]
   bb30a:	bd08      	pop	{r3, pc}
   bb30c:	0003021c 	.word	0x0003021c

000bb310 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bb310:	b508      	push	{r3, lr}
   bb312:	4b02      	ldr	r3, [pc, #8]	; (bb31c <free+0xc>)
   bb314:	681b      	ldr	r3, [r3, #0]
   bb316:	685b      	ldr	r3, [r3, #4]
   bb318:	9301      	str	r3, [sp, #4]
   bb31a:	bd08      	pop	{r3, pc}
   bb31c:	0003021c 	.word	0x0003021c

000bb320 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bb320:	b508      	push	{r3, lr}
   bb322:	4b02      	ldr	r3, [pc, #8]	; (bb32c <realloc+0xc>)
   bb324:	681b      	ldr	r3, [r3, #0]
   bb326:	689b      	ldr	r3, [r3, #8]
   bb328:	9301      	str	r3, [sp, #4]
   bb32a:	bd08      	pop	{r3, pc}
   bb32c:	0003021c 	.word	0x0003021c

000bb330 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bb330:	b508      	push	{r3, lr}
   bb332:	4b02      	ldr	r3, [pc, #8]	; (bb33c <siprintf+0xc>)
   bb334:	681b      	ldr	r3, [r3, #0]
   bb336:	691b      	ldr	r3, [r3, #16]
   bb338:	9301      	str	r3, [sp, #4]
   bb33a:	bd08      	pop	{r3, pc}
   bb33c:	0003021c 	.word	0x0003021c

000bb340 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bb340:	b508      	push	{r3, lr}
   bb342:	4b02      	ldr	r3, [pc, #8]	; (bb34c <sscanf+0xc>)
   bb344:	681b      	ldr	r3, [r3, #0]
   bb346:	695b      	ldr	r3, [r3, #20]
   bb348:	9301      	str	r3, [sp, #4]
   bb34a:	bd08      	pop	{r3, pc}
   bb34c:	0003021c 	.word	0x0003021c

000bb350 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bb350:	b508      	push	{r3, lr}
   bb352:	4b02      	ldr	r3, [pc, #8]	; (bb35c <snprintf+0xc>)
   bb354:	681b      	ldr	r3, [r3, #0]
   bb356:	69db      	ldr	r3, [r3, #28]
   bb358:	9301      	str	r3, [sp, #4]
   bb35a:	bd08      	pop	{r3, pc}
   bb35c:	0003021c 	.word	0x0003021c

000bb360 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bb360:	b508      	push	{r3, lr}
   bb362:	4b02      	ldr	r3, [pc, #8]	; (bb36c <vsnprintf+0xc>)
   bb364:	681b      	ldr	r3, [r3, #0]
   bb366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb368:	9301      	str	r3, [sp, #4]
   bb36a:	bd08      	pop	{r3, pc}
   bb36c:	0003021c 	.word	0x0003021c

000bb370 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bb370:	b508      	push	{r3, lr}
   bb372:	4b02      	ldr	r3, [pc, #8]	; (bb37c <abort+0xc>)
   bb374:	681b      	ldr	r3, [r3, #0]
   bb376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb378:	9301      	str	r3, [sp, #4]
   bb37a:	bd08      	pop	{r3, pc}
   bb37c:	0003021c 	.word	0x0003021c

000bb380 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bb380:	b508      	push	{r3, lr}
   bb382:	4b02      	ldr	r3, [pc, #8]	; (bb38c <_malloc_r+0xc>)
   bb384:	681b      	ldr	r3, [r3, #0]
   bb386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb388:	9301      	str	r3, [sp, #4]
   bb38a:	bd08      	pop	{r3, pc}
   bb38c:	0003021c 	.word	0x0003021c

000bb390 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bb390:	b508      	push	{r3, lr}
   bb392:	4b02      	ldr	r3, [pc, #8]	; (bb39c <__errno+0xc>)
   bb394:	681b      	ldr	r3, [r3, #0]
   bb396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb398:	9301      	str	r3, [sp, #4]
   bb39a:	bd08      	pop	{r3, pc}
   bb39c:	0003021c 	.word	0x0003021c

000bb3a0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bb3a0:	b508      	push	{r3, lr}
   bb3a2:	4b02      	ldr	r3, [pc, #8]	; (bb3ac <__assert_func+0xc>)
   bb3a4:	681b      	ldr	r3, [r3, #0]
   bb3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb3a8:	9301      	str	r3, [sp, #4]
   bb3aa:	bd08      	pop	{r3, pc}
   bb3ac:	0003021c 	.word	0x0003021c

000bb3b0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bb3b0:	b508      	push	{r3, lr}
   bb3b2:	4b02      	ldr	r3, [pc, #8]	; (bb3bc <newlib_impure_ptr_callback+0xc>)
   bb3b4:	681b      	ldr	r3, [r3, #0]
   bb3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb3b8:	9301      	str	r3, [sp, #4]
   bb3ba:	bd08      	pop	{r3, pc}
   bb3bc:	0003021c 	.word	0x0003021c

000bb3c0 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bb3c0:	b508      	push	{r3, lr}
   bb3c2:	4b02      	ldr	r3, [pc, #8]	; (bb3cc <strftime+0xc>)
   bb3c4:	681b      	ldr	r3, [r3, #0]
   bb3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bb3c8:	9301      	str	r3, [sp, #4]
   bb3ca:	bd08      	pop	{r3, pc}
   bb3cc:	0003021c 	.word	0x0003021c

000bb3d0 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bb3d0:	b508      	push	{r3, lr}
   bb3d2:	4b02      	ldr	r3, [pc, #8]	; (bb3dc <localtime_r+0xc>)
   bb3d4:	681b      	ldr	r3, [r3, #0]
   bb3d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb3d8:	9301      	str	r3, [sp, #4]
   bb3da:	bd08      	pop	{r3, pc}
   bb3dc:	0003021c 	.word	0x0003021c

000bb3e0 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bb3e0:	b508      	push	{r3, lr}
   bb3e2:	4b02      	ldr	r3, [pc, #8]	; (bb3ec <gmtime_r+0xc>)
   bb3e4:	681b      	ldr	r3, [r3, #0]
   bb3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bb3e8:	9301      	str	r3, [sp, #4]
   bb3ea:	bd08      	pop	{r3, pc}
   bb3ec:	0003021c 	.word	0x0003021c

000bb3f0 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bb3f0:	b508      	push	{r3, lr}
   bb3f2:	4b02      	ldr	r3, [pc, #8]	; (bb3fc <mktime+0xc>)
   bb3f4:	681b      	ldr	r3, [r3, #0]
   bb3f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb3f8:	9301      	str	r3, [sp, #4]
   bb3fa:	bd08      	pop	{r3, pc}
   bb3fc:	0003021c 	.word	0x0003021c

000bb400 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bb400:	2100      	movs	r1, #0
   bb402:	f7ff be51 	b.w	bb0a8 <system_delay_ms>

000bb406 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bb406:	b510      	push	{r4, lr}
      if (_M_empty())
   bb408:	6883      	ldr	r3, [r0, #8]
   bb40a:	4604      	mov	r4, r0
   bb40c:	b90b      	cbnz	r3, bb412 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bb40e:	f003 fa11 	bl	be834 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb412:	68c3      	ldr	r3, [r0, #12]
   bb414:	4798      	blx	r3
      if (_M_manager)
   bb416:	68a3      	ldr	r3, [r4, #8]
   bb418:	b11b      	cbz	r3, bb422 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bb41a:	2203      	movs	r2, #3
   bb41c:	4621      	mov	r1, r4
   bb41e:	4620      	mov	r0, r4
   bb420:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bb422:	4620      	mov	r0, r4
   bb424:	2110      	movs	r1, #16
}
   bb426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bb42a:	f7f8 be38 	b.w	b409e <_ZdlPvj>

000bb42e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bb42e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bb430:	6843      	ldr	r3, [r0, #4]
   bb432:	3b01      	subs	r3, #1
    {
   bb434:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bb436:	6043      	str	r3, [r0, #4]
   bb438:	b963      	cbnz	r3, bb454 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bb43a:	6803      	ldr	r3, [r0, #0]
   bb43c:	689b      	ldr	r3, [r3, #8]
   bb43e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bb440:	68a3      	ldr	r3, [r4, #8]
   bb442:	3b01      	subs	r3, #1
   bb444:	60a3      	str	r3, [r4, #8]
   bb446:	b92b      	cbnz	r3, bb454 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bb448:	6823      	ldr	r3, [r4, #0]
   bb44a:	4620      	mov	r0, r4
   bb44c:	68db      	ldr	r3, [r3, #12]
    }
   bb44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bb452:	4718      	bx	r3
    }
   bb454:	bd10      	pop	{r4, pc}

000bb456 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb456:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb458:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb45c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb45e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bb462:	42ae      	cmp	r6, r5
   bb464:	d004      	beq.n	bb470 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bb466:	4628      	mov	r0, r5
   bb468:	f002 fb34 	bl	bdad4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bb46c:	3510      	adds	r5, #16
   bb46e:	e7f8      	b.n	bb462 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bb470:	6820      	ldr	r0, [r4, #0]
   bb472:	f7ff ff4d 	bl	bb310 <free>
    AllocatorT::free(data_);
}
   bb476:	4620      	mov	r0, r4
   bb478:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb47c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bb47c:	4802      	ldr	r0, [pc, #8]	; (bb488 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bb47e:	2300      	movs	r3, #0
   bb480:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bb482:	f7ff bb5f 	b.w	bab44 <os_mutex_recursive_create>
   bb486:	bf00      	nop
   bb488:	2003e580 	.word	0x2003e580

000bb48c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bb48c:	2200      	movs	r2, #0
   bb48e:	6840      	ldr	r0, [r0, #4]
   bb490:	4611      	mov	r1, r2
   bb492:	f7ff beed 	b.w	bb270 <network_ready>

000bb496 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bb496:	2200      	movs	r2, #0
   bb498:	6840      	ldr	r0, [r0, #4]
   bb49a:	4611      	mov	r1, r2
   bb49c:	f7ff bf08 	b.w	bb2b0 <network_listening>

000bb4a0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb4a0:	2200      	movs	r2, #0
   bb4a2:	6840      	ldr	r0, [r0, #4]
   bb4a4:	4611      	mov	r1, r2
   bb4a6:	f7ff bf13 	b.w	bb2d0 <network_get_listen_timeout>

000bb4aa <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb4aa:	6840      	ldr	r0, [r0, #4]
   bb4ac:	2200      	movs	r2, #0
   bb4ae:	f7ff bf07 	b.w	bb2c0 <network_set_listen_timeout>

000bb4b2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb4b2:	6840      	ldr	r0, [r0, #4]
   bb4b4:	2200      	movs	r2, #0
   bb4b6:	f081 0101 	eor.w	r1, r1, #1
   bb4ba:	f7ff bef1 	b.w	bb2a0 <network_listen>

000bb4be <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb4be:	2300      	movs	r3, #0
   bb4c0:	6840      	ldr	r0, [r0, #4]
   bb4c2:	461a      	mov	r2, r3
   bb4c4:	4619      	mov	r1, r3
   bb4c6:	f7ff bee3 	b.w	bb290 <network_off>

000bb4ca <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb4ca:	2300      	movs	r3, #0
   bb4cc:	6840      	ldr	r0, [r0, #4]
   bb4ce:	461a      	mov	r2, r3
   bb4d0:	4619      	mov	r1, r3
   bb4d2:	f7ff bed5 	b.w	bb280 <network_on>

000bb4d6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb4d6:	2200      	movs	r2, #0
   bb4d8:	6840      	ldr	r0, [r0, #4]
   bb4da:	4611      	mov	r1, r2
   bb4dc:	f7ff beb8 	b.w	bb250 <network_connecting>

000bb4e0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb4e0:	6840      	ldr	r0, [r0, #4]
   bb4e2:	2200      	movs	r2, #0
   bb4e4:	2102      	movs	r1, #2
   bb4e6:	f7ff bebb 	b.w	bb260 <network_disconnect>

000bb4ea <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb4ea:	2300      	movs	r3, #0
   bb4ec:	6840      	ldr	r0, [r0, #4]
   bb4ee:	461a      	mov	r2, r3
   bb4f0:	f7ff bea6 	b.w	bb240 <network_connect>

000bb4f4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bb4f4:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bb4f6:	4b13      	ldr	r3, [pc, #76]	; (bb544 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bb4f8:	6003      	str	r3, [r0, #0]
   bb4fa:	2518      	movs	r5, #24
   bb4fc:	3330      	adds	r3, #48	; 0x30
   bb4fe:	b086      	sub	sp, #24
   bb500:	460e      	mov	r6, r1
   bb502:	6043      	str	r3, [r0, #4]
   bb504:	462a      	mov	r2, r5
   bb506:	2100      	movs	r1, #0
   bb508:	4604      	mov	r4, r0
   bb50a:	3008      	adds	r0, #8
   bb50c:	f003 fec4 	bl	bf298 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bb510:	2200      	movs	r2, #0
   bb512:	6870      	ldr	r0, [r6, #4]
   bb514:	4611      	mov	r1, r2
   bb516:	f7ff feab 	bl	bb270 <network_ready>
   bb51a:	b178      	cbz	r0, bb53c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bb51c:	2100      	movs	r1, #0
   bb51e:	462a      	mov	r2, r5
   bb520:	4668      	mov	r0, sp
   bb522:	f003 feb9 	bl	bf298 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bb526:	4669      	mov	r1, sp
   bb528:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bb52a:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bb52e:	f7ff fac9 	bl	baac4 <cellular_signal>
   bb532:	b918      	cbnz	r0, bb53c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bb534:	4669      	mov	r1, sp
   bb536:	4620      	mov	r0, r4
   bb538:	f000 f8b8 	bl	bb6ac <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bb53c:	4620      	mov	r0, r4
   bb53e:	b006      	add	sp, #24
   bb540:	bd70      	pop	{r4, r5, r6, pc}
   bb542:	bf00      	nop
   bb544:	000c0c40 	.word	0x000c0c40

000bb548 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bb548:	4b08      	ldr	r3, [pc, #32]	; (bb56c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bb54a:	b510      	push	{r4, lr}
   bb54c:	2428      	movs	r4, #40	; 0x28
   bb54e:	4622      	mov	r2, r4
   bb550:	4618      	mov	r0, r3
   bb552:	2100      	movs	r1, #0
   bb554:	f003 fea0 	bl	bf298 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bb558:	4b05      	ldr	r3, [pc, #20]	; (bb570 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bb55a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bb55c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb560:	6042      	str	r2, [r0, #4]
   bb562:	2204      	movs	r2, #4
   bb564:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bb566:	4a03      	ldr	r2, [pc, #12]	; (bb574 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bb568:	601a      	str	r2, [r3, #0]
   bb56a:	bd10      	pop	{r4, pc}
   bb56c:	2003e58c 	.word	0x2003e58c
   bb570:	2003e584 	.word	0x2003e584
   bb574:	000c0c04 	.word	0x000c0c04

000bb578 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bb578:	4770      	bx	lr

000bb57a <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bb57a:	7b00      	ldrb	r0, [r0, #12]
   bb57c:	4770      	bx	lr

000bb57e <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb57e:	7b03      	ldrb	r3, [r0, #12]
   bb580:	b14b      	cbz	r3, bb596 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bb582:	6903      	ldr	r3, [r0, #16]
   bb584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb588:	d005      	beq.n	bb596 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb58a:	6980      	ldr	r0, [r0, #24]
   bb58c:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bb590:	bf18      	it	ne
   bb592:	2001      	movne	r0, #1
   bb594:	4770      	bx	lr
   bb596:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bb598:	4770      	bx	lr

000bb59a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bb59a:	6803      	ldr	r3, [r0, #0]
   bb59c:	6a1b      	ldr	r3, [r3, #32]
   bb59e:	4718      	bx	r3

000bb5a0 <_ZNK14CellularSignal7printToER5Print>:
{
   bb5a0:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bb5a2:	6803      	ldr	r3, [r0, #0]
{
   bb5a4:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bb5a6:	691b      	ldr	r3, [r3, #16]
{
   bb5a8:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bb5aa:	4798      	blx	r3
   bb5ac:	2102      	movs	r1, #2
   bb5ae:	4628      	mov	r0, r5
   bb5b0:	f002 f96c 	bl	bd88c <_ZN5Print5printEfi>
    n += p.print(',');
   bb5b4:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bb5b6:	4604      	mov	r4, r0
    n += p.print(',');
   bb5b8:	4628      	mov	r0, r5
   bb5ba:	f002 f871 	bl	bd6a0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bb5be:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bb5c0:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bb5c2:	699b      	ldr	r3, [r3, #24]
   bb5c4:	4630      	mov	r0, r6
   bb5c6:	4798      	blx	r3
   bb5c8:	2102      	movs	r1, #2
   bb5ca:	4628      	mov	r0, r5
   bb5cc:	f002 f95e 	bl	bd88c <_ZN5Print5printEfi>
}
   bb5d0:	4420      	add	r0, r4
   bb5d2:	bd70      	pop	{r4, r5, r6, pc}

000bb5d4 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bb5d4:	f1a0 0004 	sub.w	r0, r0, #4
   bb5d8:	f7ff bfe2 	b.w	bb5a0 <_ZNK14CellularSignal7printToER5Print>

000bb5dc <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bb5dc:	b510      	push	{r4, lr}
   bb5de:	2120      	movs	r1, #32
   bb5e0:	4604      	mov	r4, r0
   bb5e2:	f7f8 fd5c 	bl	b409e <_ZdlPvj>
   bb5e6:	4620      	mov	r0, r4
   bb5e8:	bd10      	pop	{r4, pc}
	...

000bb5ec <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bb5ec:	7b03      	ldrb	r3, [r0, #12]
   bb5ee:	b17b      	cbz	r3, bb610 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bb5f0:	6943      	ldr	r3, [r0, #20]
   bb5f2:	2b00      	cmp	r3, #0
   bb5f4:	db0c      	blt.n	bb610 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bb5f6:	ee07 3a90 	vmov	s15, r3
   bb5fa:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb618 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bb5fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb602:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb606:	eddf 7a05 	vldr	s15, [pc, #20]	; bb61c <_ZNK14CellularSignal11getStrengthEv+0x30>
   bb60a:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb60e:	4770      	bx	lr
    return -1.0f;
   bb610:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb614:	4770      	bx	lr
   bb616:	bf00      	nop
   bb618:	477fff00 	.word	0x477fff00
   bb61c:	42c80000 	.word	0x42c80000

000bb620 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bb620:	7b03      	ldrb	r3, [r0, #12]
   bb622:	b163      	cbz	r3, bb63e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bb624:	6903      	ldr	r3, [r0, #16]
   bb626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb62a:	d008      	beq.n	bb63e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bb62c:	ee07 3a90 	vmov	s15, r3
   bb630:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb644 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bb634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb638:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb63c:	4770      	bx	lr
    return 0.0f;
   bb63e:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb648 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bb642:	4770      	bx	lr
   bb644:	42c80000 	.word	0x42c80000
   bb648:	00000000 	.word	0x00000000

000bb64c <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bb64c:	7b03      	ldrb	r3, [r0, #12]
   bb64e:	b17b      	cbz	r3, bb670 <_ZNK14CellularSignal10getQualityEv+0x24>
   bb650:	69c3      	ldr	r3, [r0, #28]
   bb652:	2b00      	cmp	r3, #0
   bb654:	db0c      	blt.n	bb670 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bb656:	ee07 3a90 	vmov	s15, r3
   bb65a:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb678 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bb65e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb662:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb666:	eddf 7a05 	vldr	s15, [pc, #20]	; bb67c <_ZNK14CellularSignal10getQualityEv+0x30>
   bb66a:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb66e:	4770      	bx	lr
    return -1.0f;
   bb670:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb674:	4770      	bx	lr
   bb676:	bf00      	nop
   bb678:	477fff00 	.word	0x477fff00
   bb67c:	42c80000 	.word	0x42c80000

000bb680 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bb680:	7b03      	ldrb	r3, [r0, #12]
   bb682:	b163      	cbz	r3, bb69e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bb684:	6983      	ldr	r3, [r0, #24]
   bb686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb68a:	d008      	beq.n	bb69e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bb68c:	ee07 3a90 	vmov	s15, r3
   bb690:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb6a4 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bb694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb698:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb69c:	4770      	bx	lr
    return 0.0f;
   bb69e:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb6a8 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bb6a2:	4770      	bx	lr
   bb6a4:	42c80000 	.word	0x42c80000
   bb6a8:	00000000 	.word	0x00000000

000bb6ac <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bb6ac:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bb6ae:	460d      	mov	r5, r1
   bb6b0:	f100 0408 	add.w	r4, r0, #8
   bb6b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb6b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb6b8:	e895 0003 	ldmia.w	r5, {r0, r1}
   bb6bc:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bb6c0:	2001      	movs	r0, #1
   bb6c2:	bd30      	pop	{r4, r5, pc}

000bb6c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb6c4:	4770      	bx	lr

000bb6c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bb6c6:	2000      	movs	r0, #0
   bb6c8:	4770      	bx	lr

000bb6ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb6ca:	b510      	push	{r4, lr}
   bb6cc:	2110      	movs	r1, #16
   bb6ce:	4604      	mov	r4, r0
   bb6d0:	f7f8 fce5 	bl	b409e <_ZdlPvj>
   bb6d4:	4620      	mov	r0, r4
   bb6d6:	bd10      	pop	{r4, pc}

000bb6d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bb6d8:	b508      	push	{r3, lr}
      { delete this; }
   bb6da:	f7ff fff6 	bl	bb6ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bb6de:	bd08      	pop	{r3, pc}

000bb6e0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bb6e0:	b530      	push	{r4, r5, lr}
        type_(type) {
   bb6e2:	2200      	movs	r2, #0
   bb6e4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bb6e8:	6002      	str	r2, [r0, #0]
   bb6ea:	8084      	strh	r4, [r0, #4]
   bb6ec:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bb6ee:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb6f0:	680c      	ldr	r4, [r1, #0]
   bb6f2:	8085      	strh	r5, [r0, #4]
   bb6f4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bb6f6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bb6f8:	bd30      	pop	{r4, r5, pc}

000bb6fa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bb6fa:	b510      	push	{r4, lr}
   bb6fc:	4604      	mov	r4, r0
    free((void*)msg_);
   bb6fe:	6800      	ldr	r0, [r0, #0]
   bb700:	f7ff fe06 	bl	bb310 <free>
}
   bb704:	4620      	mov	r0, r4
   bb706:	bd10      	pop	{r4, pc}

000bb708 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bb708:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bb70a:	68c4      	ldr	r4, [r0, #12]
   bb70c:	b1f4      	cbz	r4, bb74c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bb70e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bb710:	2b02      	cmp	r3, #2
   bb712:	d103      	bne.n	bb71c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bb714:	f104 000c 	add.w	r0, r4, #12
   bb718:	f7ff ffef 	bl	bb6fa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bb71c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bb71e:	b135      	cbz	r5, bb72e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bb720:	4628      	mov	r0, r5
   bb722:	f7f8 ffe9 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   bb726:	2110      	movs	r1, #16
   bb728:	4628      	mov	r0, r5
   bb72a:	f7f8 fcb8 	bl	b409e <_ZdlPvj>
   bb72e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bb730:	b135      	cbz	r5, bb740 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bb732:	4628      	mov	r0, r5
   bb734:	f7f8 ffe0 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
   bb738:	2110      	movs	r1, #16
   bb73a:	4628      	mov	r0, r5
   bb73c:	f7f8 fcaf 	bl	b409e <_ZdlPvj>
   bb740:	4620      	mov	r0, r4
   bb742:	2114      	movs	r1, #20
   bb744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb748:	f7f8 bca9 	b.w	b409e <_ZdlPvj>
   bb74c:	bd38      	pop	{r3, r4, r5, pc}

000bb74e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bb74e:	b510      	push	{r4, lr}
   bb750:	b088      	sub	sp, #32
   bb752:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bb754:	4668      	mov	r0, sp
   bb756:	f002 fa08 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bb75a:	4669      	mov	r1, sp
   bb75c:	a804      	add	r0, sp, #16
   bb75e:	f002 fa4f 	bl	bdc00 <_ZN6StringC1ERKS_>
   bb762:	a804      	add	r0, sp, #16
   bb764:	47a0      	blx	r4
   bb766:	4604      	mov	r4, r0
   bb768:	a804      	add	r0, sp, #16
   bb76a:	f002 f9b3 	bl	bdad4 <_ZN6StringD1Ev>
    String p(param);
   bb76e:	4668      	mov	r0, sp
   bb770:	f002 f9b0 	bl	bdad4 <_ZN6StringD1Ev>
}
   bb774:	4620      	mov	r0, r4
   bb776:	b008      	add	sp, #32
   bb778:	bd10      	pop	{r4, pc}

000bb77a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bb77a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bb77c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bb77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bb782:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bb784:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bb786:	461a      	mov	r2, r3
   bb788:	4669      	mov	r1, sp
   bb78a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bb78c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bb790:	f8ad 4000 	strh.w	r4, [sp]
   bb794:	f7ff fd04 	bl	bb1a0 <spark_function>
}
   bb798:	b004      	add	sp, #16
   bb79a:	bd10      	pop	{r4, pc}

000bb79c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bb79c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bb79e:	230c      	movs	r3, #12
   bb7a0:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bb7a4:	6803      	ldr	r3, [r0, #0]
   bb7a6:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bb7aa:	7a03      	ldrb	r3, [r0, #8]
   bb7ac:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bb7b0:	6843      	ldr	r3, [r0, #4]
   bb7b2:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bb7b4:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bb7b6:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bb7b8:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb7bc:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bb7be:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bb7c2:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb7c6:	f7ff fd33 	bl	bb230 <spark_cloud_disconnect>
}
   bb7ca:	b005      	add	sp, #20
   bb7cc:	f85d fb04 	ldr.w	pc, [sp], #4

000bb7d0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb7d0:	680b      	ldr	r3, [r1, #0]
   bb7d2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bb7d4:	684b      	ldr	r3, [r1, #4]
   bb7d6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bb7d8:	b113      	cbz	r3, bb7e0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bb7da:	685a      	ldr	r2, [r3, #4]
   bb7dc:	3201      	adds	r2, #1
   bb7de:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb7e0:	4770      	bx	lr

000bb7e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bb7e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb7e4:	4604      	mov	r4, r0
   bb7e6:	4668      	mov	r0, sp
   bb7e8:	460d      	mov	r5, r1
   bb7ea:	f7ff fff1 	bl	bb7d0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb7ee:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bb7f0:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb7f2:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bb7f4:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bb7f6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bb7f8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bb7fa:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bb7fc:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bb7fe:	f7f9 fdf1 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bb802:	b135      	cbz	r5, bb812 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bb804:	1d28      	adds	r0, r5, #4
   bb806:	f7f9 fded 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb80a:	2108      	movs	r1, #8
   bb80c:	4628      	mov	r0, r5
   bb80e:	f7f8 fc46 	bl	b409e <_ZdlPvj>
        return p;
    }
   bb812:	4620      	mov	r0, r4
   bb814:	b003      	add	sp, #12
   bb816:	bd30      	pop	{r4, r5, pc}

000bb818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bb818:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb81a:	b510      	push	{r4, lr}
      if (_M_empty())
   bb81c:	b90a      	cbnz	r2, bb822 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bb81e:	f003 f809 	bl	be834 <_ZSt25__throw_bad_function_callv>
    }
   bb822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb826:	68c3      	ldr	r3, [r0, #12]
   bb828:	4718      	bx	r3

000bb82a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb82a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb82c:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bb82e:	f100 0110 	add.w	r1, r0, #16
   bb832:	f7ff fff1 	bl	bb818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bb836:	bd08      	pop	{r3, pc}

000bb838 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bb838:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb83a:	b510      	push	{r4, lr}
      if (_M_empty())
   bb83c:	b90a      	cbnz	r2, bb842 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bb83e:	f002 fff9 	bl	be834 <_ZSt25__throw_bad_function_callv>
    }
   bb842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb846:	68c3      	ldr	r3, [r0, #12]
   bb848:	4718      	bx	r3

000bb84a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb84a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb84c:	6800      	ldr	r0, [r0, #0]
   bb84e:	f100 0110 	add.w	r1, r0, #16
   bb852:	f7ff fff1 	bl	bb838 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bb856:	bd08      	pop	{r3, pc}

000bb858 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bb858:	b538      	push	{r3, r4, r5, lr}
   bb85a:	2300      	movs	r3, #0
   bb85c:	4604      	mov	r4, r0
   bb85e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb860:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bb862:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb864:	f7f8 fc17 	bl	b4096 <_Znwj>
   bb868:	b128      	cbz	r0, bb876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bb86a:	2301      	movs	r3, #1
   bb86c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bb870:	4b02      	ldr	r3, [pc, #8]	; (bb87c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bb872:	6003      	str	r3, [r0, #0]
   bb874:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb876:	6020      	str	r0, [r4, #0]
	}
   bb878:	4620      	mov	r0, r4
   bb87a:	bd38      	pop	{r3, r4, r5, pc}
   bb87c:	000c0c7c 	.word	0x000c0c7c

000bb880 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bb880:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb882:	2300      	movs	r3, #0
   bb884:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bb886:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bb888:	4604      	mov	r4, r0
   bb88a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bb88c:	b12b      	cbz	r3, bb89a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb88e:	2202      	movs	r2, #2
   bb890:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb892:	68eb      	ldr	r3, [r5, #12]
   bb894:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bb896:	68ab      	ldr	r3, [r5, #8]
   bb898:	60a3      	str	r3, [r4, #8]
    }
   bb89a:	4620      	mov	r0, r4
   bb89c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bb8a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bb8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb8a2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bb8a4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bb8a6:	4668      	mov	r0, sp
   bb8a8:	f7ff ff1a 	bl	bb6e0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bb8ac:	f04f 0302 	mov.w	r3, #2
   bb8b0:	e8d4 2f4f 	ldrexb	r2, [r4]
   bb8b4:	2a00      	cmp	r2, #0
   bb8b6:	d103      	bne.n	bb8c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bb8b8:	e8c4 3f41 	strexb	r1, r3, [r4]
   bb8bc:	2900      	cmp	r1, #0
   bb8be:	d1f7      	bne.n	bb8b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bb8c0:	d125      	bne.n	bb90e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bb8c2:	f104 050c 	add.w	r5, r4, #12
   bb8c6:	4669      	mov	r1, sp
   bb8c8:	4628      	mov	r0, r5
   bb8ca:	f7ff ff09 	bl	bb6e0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bb8ce:	f3bf 8f5b 	dmb	ish
   bb8d2:	2301      	movs	r3, #1
   bb8d4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bb8d6:	2000      	movs	r0, #0
   bb8d8:	f104 0308 	add.w	r3, r4, #8
   bb8dc:	f3bf 8f5b 	dmb	ish
   bb8e0:	e853 6f00 	ldrex	r6, [r3]
   bb8e4:	e843 0200 	strex	r2, r0, [r3]
   bb8e8:	2a00      	cmp	r2, #0
   bb8ea:	d1f9      	bne.n	bb8e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bb8ec:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bb8f0:	b16e      	cbz	r6, bb90e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bb8f2:	f7ff fbf1 	bl	bb0d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bb8f6:	b178      	cbz	r0, bb918 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bb8f8:	4629      	mov	r1, r5
   bb8fa:	4630      	mov	r0, r6
   bb8fc:	f7ff ff8c 	bl	bb818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bb900:	4630      	mov	r0, r6
   bb902:	f7f8 fef9 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bb906:	2110      	movs	r1, #16
   bb908:	4630      	mov	r0, r6
   bb90a:	f7f8 fbc8 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bb90e:	4668      	mov	r0, sp
   bb910:	f7ff fef3 	bl	bb6fa <_ZN8particle5ErrorD1Ev>
    }
   bb914:	b009      	add	sp, #36	; 0x24
   bb916:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb918:	4631      	mov	r1, r6
   bb91a:	a802      	add	r0, sp, #8
   bb91c:	f7ff ffb0 	bl	bb880 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bb920:	68e0      	ldr	r0, [r4, #12]
   bb922:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bb926:	b108      	cbz	r0, bb92c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bb928:	f003 fd54 	bl	bf3d4 <strdup>
        type_(type) {
   bb92c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bb92e:	2010      	movs	r0, #16
   bb930:	f8ad 501c 	strh.w	r5, [sp, #28]
   bb934:	f7f8 fbaf 	bl	b4096 <_Znwj>
   bb938:	4605      	mov	r5, r0
   bb93a:	b1e8      	cbz	r0, bb978 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bb93c:	2700      	movs	r7, #0
   bb93e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb940:	2018      	movs	r0, #24
   bb942:	f7f8 fba8 	bl	b4096 <_Znwj>
   bb946:	4604      	mov	r4, r0
   bb948:	b188      	cbz	r0, bb96e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bb94a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bb94c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bb94e:	a802      	add	r0, sp, #8
   bb950:	f7fb f89d 	bl	b6a8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb954:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bb956:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb958:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb95a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bb95c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb95e:	a906      	add	r1, sp, #24
   bb960:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb962:	60e3      	str	r3, [r4, #12]
   bb964:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bb968:	9205      	str	r2, [sp, #20]
   bb96a:	f7ff feb9 	bl	bb6e0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bb96e:	4b08      	ldr	r3, [pc, #32]	; (bb990 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bb970:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb972:	4b08      	ldr	r3, [pc, #32]	; (bb994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb974:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb976:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bb978:	a806      	add	r0, sp, #24
   bb97a:	f7ff febe 	bl	bb6fa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bb97e:	a802      	add	r0, sp, #8
   bb980:	f7f8 feba 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bb984:	2200      	movs	r2, #0
   bb986:	4629      	mov	r1, r5
   bb988:	4803      	ldr	r0, [pc, #12]	; (bb998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bb98a:	f7ff fbad 	bl	bb0e8 <application_thread_invoke>
   bb98e:	e7b7      	b.n	bb900 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bb990:	000bb82b 	.word	0x000bb82b
   bb994:	000bbaad 	.word	0x000bbaad
   bb998:	000bb407 	.word	0x000bb407

000bb99c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bb99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb9a0:	b08b      	sub	sp, #44	; 0x2c
   bb9a2:	4605      	mov	r5, r0
   bb9a4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bb9a8:	460f      	mov	r7, r1
   bb9aa:	4690      	mov	r8, r2
   bb9ac:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb9ae:	f7ff fc0f 	bl	bb1d0 <spark_cloud_flag_connected>
   bb9b2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bb9b4:	4683      	mov	fp, r0
   bb9b6:	bb38      	cbnz	r0, bba08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bb9b8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bb9bc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb9be:	a905      	add	r1, sp, #20
   bb9c0:	4630      	mov	r0, r6
   bb9c2:	f8ad 3018 	strh.w	r3, [sp, #24]
   bb9c6:	f7ff fe8b 	bl	bb6e0 <_ZN8particle5ErrorC1EOS0_>
   bb9ca:	2014      	movs	r0, #20
   bb9cc:	f7f8 fb63 	bl	b4096 <_Znwj>
   bb9d0:	4604      	mov	r4, r0
   bb9d2:	b148      	cbz	r0, bb9e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bb9d4:	2302      	movs	r3, #2
   bb9d6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb9d8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bb9da:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bb9de:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bb9e0:	4631      	mov	r1, r6
   bb9e2:	300c      	adds	r0, #12
   bb9e4:	f7ff fe7c 	bl	bb6e0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb9e8:	4628      	mov	r0, r5
	: __shared_count(__p)
   bb9ea:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bb9ec:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bb9f0:	f7ff ff32 	bl	bb858 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bb9f4:	4630      	mov	r0, r6
   bb9f6:	f7ff fe80 	bl	bb6fa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bb9fa:	a805      	add	r0, sp, #20
   bb9fc:	f7ff fe7d 	bl	bb6fa <_ZN8particle5ErrorD1Ev>
}
   bba00:	4628      	mov	r0, r5
   bba02:	b00b      	add	sp, #44	; 0x2c
   bba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bba08:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bba0a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bba0c:	2014      	movs	r0, #20
   bba0e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bba12:	9307      	str	r3, [sp, #28]
   bba14:	f7f8 fb3f 	bl	b4096 <_Znwj>
   bba18:	4601      	mov	r1, r0
   bba1a:	b118      	cbz	r0, bba24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bba1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bba20:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bba22:	7044      	strb	r4, [r0, #1]
   bba24:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bba26:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bba28:	f7ff ff16 	bl	bb858 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bba2c:	4b1e      	ldr	r3, [pc, #120]	; (bbaa8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bba2e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bba30:	2008      	movs	r0, #8
   bba32:	f7f8 fb30 	bl	b4096 <_Znwj>
   bba36:	4604      	mov	r4, r0
   bba38:	b110      	cbz	r0, bba40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bba3a:	a903      	add	r1, sp, #12
   bba3c:	f7ff fec8 	bl	bb7d0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bba40:	9600      	str	r6, [sp, #0]
   bba42:	fa5f f38a 	uxtb.w	r3, sl
   bba46:	464a      	mov	r2, r9
   bba48:	4641      	mov	r1, r8
   bba4a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bba4c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bba4e:	f7ff fbc7 	bl	bb1e0 <spark_send_event>
   bba52:	b9b8      	cbnz	r0, bba84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bba54:	9b03      	ldr	r3, [sp, #12]
   bba56:	785b      	ldrb	r3, [r3, #1]
   bba58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bba5c:	b993      	cbnz	r3, bba84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bba5e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bba62:	a905      	add	r1, sp, #20
   bba64:	a803      	add	r0, sp, #12
   bba66:	9205      	str	r2, [sp, #20]
   bba68:	f8ad 3018 	strh.w	r3, [sp, #24]
   bba6c:	f7ff ff18 	bl	bb8a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bba70:	a805      	add	r0, sp, #20
   bba72:	f7ff fe42 	bl	bb6fa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bba76:	a805      	add	r0, sp, #20
   bba78:	9909      	ldr	r1, [sp, #36]	; 0x24
   bba7a:	f7ff feb2 	bl	bb7e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bba7e:	a806      	add	r0, sp, #24
   bba80:	f7f9 fcb0 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bba84:	a903      	add	r1, sp, #12
   bba86:	a805      	add	r0, sp, #20
   bba88:	f7ff fea2 	bl	bb7d0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bba8c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bba8e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bba90:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bba92:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bba94:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bba96:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bba98:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bba9a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bba9c:	f7f9 fca2 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbaa0:	a804      	add	r0, sp, #16
   bbaa2:	f7f9 fc9f 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bbaa6:	e7ab      	b.n	bba00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bbaa8:	000bbb29 	.word	0x000bbb29

000bbaac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bbaac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bbaae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbab0:	4605      	mov	r5, r0
	switch (__op)
   bbab2:	d103      	bne.n	bbabc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bbab4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bbab6:	6003      	str	r3, [r0, #0]
      }
   bbab8:	2000      	movs	r0, #0
   bbaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bbabc:	2a02      	cmp	r2, #2
   bbabe:	d010      	beq.n	bbae2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bbac0:	2a03      	cmp	r2, #3
   bbac2:	d1f9      	bne.n	bbab8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bbac4:	6804      	ldr	r4, [r0, #0]
   bbac6:	2c00      	cmp	r4, #0
   bbac8:	d0f6      	beq.n	bbab8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bbaca:	f104 0010 	add.w	r0, r4, #16
   bbace:	f7ff fe14 	bl	bb6fa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bbad2:	4620      	mov	r0, r4
   bbad4:	f7f8 fe10 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bbad8:	2118      	movs	r1, #24
   bbada:	4620      	mov	r0, r4
   bbadc:	f7f8 fadf 	bl	b409e <_ZdlPvj>
   bbae0:	e7ea      	b.n	bbab8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bbae2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bbae4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bbae6:	f7f8 fad6 	bl	b4096 <_Znwj>
   bbaea:	4604      	mov	r4, r0
   bbaec:	b150      	cbz	r0, bbb04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bbaee:	4631      	mov	r1, r6
   bbaf0:	f7ff fec6 	bl	bb880 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bbaf4:	6930      	ldr	r0, [r6, #16]
   bbaf6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbafa:	b108      	cbz	r0, bbb00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bbafc:	f003 fc6a 	bl	bf3d4 <strdup>
        type_(type) {
   bbb00:	6120      	str	r0, [r4, #16]
   bbb02:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bbb04:	602c      	str	r4, [r5, #0]
	}
   bbb06:	e7d7      	b.n	bbab8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bbb08 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bbb08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bbb0a:	2300      	movs	r3, #0
   bbb0c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bbb0e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bbb10:	4604      	mov	r4, r0
   bbb12:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bbb14:	b12b      	cbz	r3, bbb22 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbb16:	2202      	movs	r2, #2
   bbb18:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbb1a:	68eb      	ldr	r3, [r5, #12]
   bbb1c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bbb1e:	68ab      	ldr	r3, [r5, #8]
   bbb20:	60a3      	str	r3, [r4, #8]
    }
   bbb22:	4620      	mov	r0, r4
   bbb24:	bd38      	pop	{r3, r4, r5, pc}
	...

000bbb28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bbb28:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbb2a:	b089      	sub	sp, #36	; 0x24
   bbb2c:	4604      	mov	r4, r0
   bbb2e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bbb30:	a801      	add	r0, sp, #4
   bbb32:	4611      	mov	r1, r2
   bbb34:	f7ff fe55 	bl	bb7e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bbb38:	b1a4      	cbz	r4, bbb64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bbb3a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbb3c:	b11d      	cbz	r5, bbb46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bbb3e:	4628      	mov	r0, r5
   bbb40:	f003 fc48 	bl	bf3d4 <strdup>
   bbb44:	4605      	mov	r5, r0
   bbb46:	a801      	add	r0, sp, #4
   bbb48:	a903      	add	r1, sp, #12
        type_(type) {
   bbb4a:	9503      	str	r5, [sp, #12]
   bbb4c:	f8ad 4010 	strh.w	r4, [sp, #16]
   bbb50:	f7ff fea6 	bl	bb8a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bbb54:	a803      	add	r0, sp, #12
   bbb56:	f7ff fdd0 	bl	bb6fa <_ZN8particle5ErrorD1Ev>
   bbb5a:	a802      	add	r0, sp, #8
   bbb5c:	f7f9 fc42 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbb60:	b009      	add	sp, #36	; 0x24
   bbb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bbb64:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bbb66:	2301      	movs	r3, #1
   bbb68:	e8d5 2f4f 	ldrexb	r2, [r5]
   bbb6c:	2a00      	cmp	r2, #0
   bbb6e:	d103      	bne.n	bbb78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bbb70:	e8c5 3f41 	strexb	r1, r3, [r5]
   bbb74:	2900      	cmp	r1, #0
   bbb76:	d1f7      	bne.n	bbb68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bbb78:	d1ef      	bne.n	bbb5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bbb7a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bbb7c:	f3bf 8f5b 	dmb	ish
   bbb80:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bbb82:	1d2b      	adds	r3, r5, #4
   bbb84:	f3bf 8f5b 	dmb	ish
   bbb88:	e853 6f00 	ldrex	r6, [r3]
   bbb8c:	e843 4200 	strex	r2, r4, [r3]
   bbb90:	2a00      	cmp	r2, #0
   bbb92:	d1f9      	bne.n	bbb88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bbb94:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bbb98:	2e00      	cmp	r6, #0
   bbb9a:	d0de      	beq.n	bbb5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bbb9c:	4620      	mov	r0, r4
   bbb9e:	f7ff fa9b 	bl	bb0d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bbba2:	4607      	mov	r7, r0
   bbba4:	b160      	cbz	r0, bbbc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bbba6:	f105 010c 	add.w	r1, r5, #12
   bbbaa:	4630      	mov	r0, r6
   bbbac:	f7ff fe44 	bl	bb838 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bbbb0:	4630      	mov	r0, r6
   bbbb2:	f7f8 fda1 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bbbb6:	2110      	movs	r1, #16
   bbbb8:	4630      	mov	r0, r6
   bbbba:	f7f8 fa70 	bl	b409e <_ZdlPvj>
   bbbbe:	e7cc      	b.n	bbb5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bbbc0:	4631      	mov	r1, r6
   bbbc2:	a803      	add	r0, sp, #12
   bbbc4:	f7ff ffa0 	bl	bbb08 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bbbc8:	7b2b      	ldrb	r3, [r5, #12]
   bbbca:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bbbce:	2010      	movs	r0, #16
   bbbd0:	f7f8 fa61 	bl	b4096 <_Znwj>
   bbbd4:	4605      	mov	r5, r0
   bbbd6:	b1d0      	cbz	r0, bbc0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bbbd8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbbda:	2014      	movs	r0, #20
   bbbdc:	f7f8 fa5b 	bl	b4096 <_Znwj>
   bbbe0:	4604      	mov	r4, r0
   bbbe2:	b178      	cbz	r0, bbc04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bbbe4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bbbe6:	4601      	mov	r1, r0
   bbbe8:	a803      	add	r0, sp, #12
   bbbea:	f7fa ff50 	bl	b6a8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbbee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bbbf0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbbf2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbbf4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bbbf6:	9205      	str	r2, [sp, #20]
   bbbf8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbbfa:	60e3      	str	r3, [r4, #12]
   bbbfc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bbc00:	9206      	str	r2, [sp, #24]
   bbc02:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bbc04:	4b06      	ldr	r3, [pc, #24]	; (bbc20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bbc06:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bbc08:	4b06      	ldr	r3, [pc, #24]	; (bbc24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbc0a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bbc0c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bbc0e:	a803      	add	r0, sp, #12
   bbc10:	f7f8 fd72 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bbc14:	2200      	movs	r2, #0
   bbc16:	4629      	mov	r1, r5
   bbc18:	4803      	ldr	r0, [pc, #12]	; (bbc28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bbc1a:	f7ff fa65 	bl	bb0e8 <application_thread_invoke>
   bbc1e:	e7c7      	b.n	bbbb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bbc20:	000bb84b 	.word	0x000bb84b
   bbc24:	000bbc2d 	.word	0x000bbc2d
   bbc28:	000bb407 	.word	0x000bb407

000bbc2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bbc2c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bbc2e:	b570      	push	{r4, r5, r6, lr}
   bbc30:	4604      	mov	r4, r0
	switch (__op)
   bbc32:	d103      	bne.n	bbc3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bbc34:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bbc36:	6003      	str	r3, [r0, #0]
      }
   bbc38:	2000      	movs	r0, #0
   bbc3a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bbc3c:	2a02      	cmp	r2, #2
   bbc3e:	d00c      	beq.n	bbc5a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bbc40:	2a03      	cmp	r2, #3
   bbc42:	d1f9      	bne.n	bbc38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bbc44:	6804      	ldr	r4, [r0, #0]
   bbc46:	2c00      	cmp	r4, #0
   bbc48:	d0f6      	beq.n	bbc38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bbc4a:	4620      	mov	r0, r4
   bbc4c:	f7f8 fd54 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bbc50:	2114      	movs	r1, #20
   bbc52:	4620      	mov	r0, r4
   bbc54:	f7f8 fa23 	bl	b409e <_ZdlPvj>
   bbc58:	e7ee      	b.n	bbc38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bbc5a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bbc5c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bbc5e:	f7f8 fa1a 	bl	b4096 <_Znwj>
   bbc62:	4605      	mov	r5, r0
   bbc64:	b120      	cbz	r0, bbc70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bbc66:	4631      	mov	r1, r6
   bbc68:	f7ff ff4e 	bl	bbb08 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bbc6c:	7c33      	ldrb	r3, [r6, #16]
   bbc6e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bbc70:	6025      	str	r5, [r4, #0]
	}
   bbc72:	e7e1      	b.n	bbc38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bbc74 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bbc74:	2200      	movs	r2, #0
   bbc76:	6840      	ldr	r0, [r0, #4]
   bbc78:	4611      	mov	r1, r2
   bbc7a:	f7ff bb19 	b.w	bb2b0 <network_listening>

000bbc7e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bbc7e:	2200      	movs	r2, #0
   bbc80:	6840      	ldr	r0, [r0, #4]
   bbc82:	4611      	mov	r1, r2
   bbc84:	f7ff bb24 	b.w	bb2d0 <network_get_listen_timeout>

000bbc88 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bbc88:	6840      	ldr	r0, [r0, #4]
   bbc8a:	2200      	movs	r2, #0
   bbc8c:	f7ff bb18 	b.w	bb2c0 <network_set_listen_timeout>

000bbc90 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bbc90:	6840      	ldr	r0, [r0, #4]
   bbc92:	2200      	movs	r2, #0
   bbc94:	f081 0101 	eor.w	r1, r1, #1
   bbc98:	f7ff bb02 	b.w	bb2a0 <network_listen>

000bbc9c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bbc9c:	2300      	movs	r3, #0
   bbc9e:	6840      	ldr	r0, [r0, #4]
   bbca0:	461a      	mov	r2, r3
   bbca2:	4619      	mov	r1, r3
   bbca4:	f7ff baf4 	b.w	bb290 <network_off>

000bbca8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bbca8:	2300      	movs	r3, #0
   bbcaa:	6840      	ldr	r0, [r0, #4]
   bbcac:	461a      	mov	r2, r3
   bbcae:	4619      	mov	r1, r3
   bbcb0:	f7ff bae6 	b.w	bb280 <network_on>

000bbcb4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bbcb4:	2200      	movs	r2, #0
   bbcb6:	6840      	ldr	r0, [r0, #4]
   bbcb8:	4611      	mov	r1, r2
   bbcba:	f7ff bad9 	b.w	bb270 <network_ready>

000bbcbe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bbcbe:	2200      	movs	r2, #0
   bbcc0:	6840      	ldr	r0, [r0, #4]
   bbcc2:	4611      	mov	r1, r2
   bbcc4:	f7ff bac4 	b.w	bb250 <network_connecting>

000bbcc8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bbcc8:	6840      	ldr	r0, [r0, #4]
   bbcca:	2200      	movs	r2, #0
   bbccc:	2102      	movs	r1, #2
   bbcce:	f7ff bac7 	b.w	bb260 <network_disconnect>

000bbcd2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bbcd2:	2300      	movs	r3, #0
   bbcd4:	6840      	ldr	r0, [r0, #4]
   bbcd6:	461a      	mov	r2, r3
   bbcd8:	f7ff bab2 	b.w	bb240 <network_connect>

000bbcdc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bbcdc:	4b02      	ldr	r3, [pc, #8]	; (bbce8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bbcde:	2203      	movs	r2, #3
   bbce0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bbce2:	4a02      	ldr	r2, [pc, #8]	; (bbcec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bbce4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bbce6:	4770      	bx	lr
   bbce8:	2003e5b4 	.word	0x2003e5b4
   bbcec:	000c0c98 	.word	0x000c0c98

000bbcf0 <_ZN8particle6detail7_getSoCEhhh>:

        // Maxim ModelGauge doc only mentions 18 and 19 bit
        // MSB is the whole number
        // LSB is the decimal, resolution in units 1/256%
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   bbcf0:	eb01 2300 	add.w	r3, r1, r0, lsl #8
   bbcf4:	ee00 3a10 	vmov	s0, r3
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
   bbcf8:	2a13      	cmp	r2, #19
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   bbcfa:	bf0c      	ite	eq
   bbcfc:	eddf 7a04 	vldreq	s15, [pc, #16]	; bbd10 <_ZN8particle6detail7_getSoCEhhh+0x20>
        } else { // default to 18-bit calculation
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   bbd00:	eddf 7a04 	vldrne	s15, [pc, #16]	; bbd14 <_ZN8particle6detail7_getSoCEhhh+0x24>
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   bbd04:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   bbd08:	ee20 0a27 	vmul.f32	s0, s0, s15
        }
        return soc_percent;

    }
   bbd0c:	4770      	bx	lr
   bbd0e:	bf00      	nop
   bbd10:	3b000000 	.word	0x3b000000
   bbd14:	3b800000 	.word	0x3b800000

000bbd18 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bbd18:	6800      	ldr	r0, [r0, #0]
   bbd1a:	f000 b951 	b.w	bbfc0 <_ZN7TwoWire4lockEv>

000bbd1e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bbd1e:	b510      	push	{r4, lr}
   bbd20:	4604      	mov	r4, r0
      lock_(_lock) {
   bbd22:	6001      	str	r1, [r0, #0]
   bbd24:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bbd26:	b10a      	cbz	r2, bbd2c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bbd28:	f7ff fff6 	bl	bbd18 <_ZN9FuelGauge4lockEv>
}
   bbd2c:	4620      	mov	r0, r4
   bbd2e:	bd10      	pop	{r4, pc}

000bbd30 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bbd30:	b513      	push	{r0, r1, r4, lr}
   bbd32:	4604      	mov	r4, r0
   bbd34:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bbd36:	f002 fd0f 	bl	be758 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bbd3a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bbd3c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bbd3e:	4620      	mov	r0, r4
   bbd40:	f7ff ffed 	bl	bbd1e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bbd44:	4620      	mov	r0, r4
   bbd46:	b002      	add	sp, #8
   bbd48:	bd10      	pop	{r4, pc}

000bbd4a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bbd4a:	6800      	ldr	r0, [r0, #0]
   bbd4c:	f000 b941 	b.w	bbfd2 <_ZN7TwoWire6unlockEv>

000bbd50 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   bbd50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bbd54:	4604      	mov	r4, r0
   bbd56:	460d      	mov	r5, r1
   bbd58:	4617      	mov	r7, r2
   bbd5a:	461e      	mov	r6, r3
   bbd5c:	f7ff ffdc 	bl	bbd18 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bbd60:	2236      	movs	r2, #54	; 0x36
   bbd62:	2300      	movs	r3, #0
   bbd64:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bbd68:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bbd6a:	230a      	movs	r3, #10
   bbd6c:	f04f 0801 	mov.w	r8, #1
   bbd70:	4669      	mov	r1, sp
   bbd72:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bbd76:	f000 f907 	bl	bbf88 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   bbd7a:	6820      	ldr	r0, [r4, #0]
   bbd7c:	6803      	ldr	r3, [r0, #0]
   bbd7e:	4629      	mov	r1, r5
   bbd80:	689b      	ldr	r3, [r3, #8]
   bbd82:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bbd84:	6820      	ldr	r0, [r4, #0]
   bbd86:	4641      	mov	r1, r8
   bbd88:	f000 f916 	bl	bbfb8 <_ZN7TwoWire15endTransmissionEh>
   bbd8c:	4605      	mov	r5, r0
   bbd8e:	b140      	cbz	r0, bbda2 <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   bbd90:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   bbd94:	4620      	mov	r0, r4
   bbd96:	f7ff ffd8 	bl	bbd4a <_ZN9FuelGauge6unlockEv>
}
   bbd9a:	4628      	mov	r0, r5
   bbd9c:	b004      	add	sp, #16
   bbd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   bbda2:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   bbda4:	6820      	ldr	r0, [r4, #0]
   bbda6:	9301      	str	r3, [sp, #4]
   bbda8:	4669      	mov	r1, sp
   bbdaa:	f000 f8bd 	bl	bbf28 <_ZN7TwoWire11requestFromERK16WireTransmission>
   bbdae:	2802      	cmp	r0, #2
   bbdb0:	d1ee      	bne.n	bbd90 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   bbdb2:	6820      	ldr	r0, [r4, #0]
   bbdb4:	6803      	ldr	r3, [r0, #0]
   bbdb6:	695b      	ldr	r3, [r3, #20]
   bbdb8:	4798      	blx	r3
   bbdba:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   bbdbc:	6820      	ldr	r0, [r4, #0]
   bbdbe:	6803      	ldr	r3, [r0, #0]
   bbdc0:	695b      	ldr	r3, [r3, #20]
   bbdc2:	4798      	blx	r3
   bbdc4:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   bbdc6:	e7e5      	b.n	bbd94 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000bbdc8 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   bbdc8:	b510      	push	{r4, lr}
   bbdca:	b08c      	sub	sp, #48	; 0x30
    byte MSB = 0;
   bbdcc:	2300      	movs	r3, #0
   bbdce:	f88d 300e 	strb.w	r3, [sp, #14]
    byte LSB = 0;
   bbdd2:	f88d 300f 	strb.w	r3, [sp, #15]
    if (readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   bbdd6:	2104      	movs	r1, #4
   bbdd8:	f10d 030f 	add.w	r3, sp, #15
   bbddc:	f10d 020e 	add.w	r2, sp, #14
   bbde0:	f7ff ffb6 	bl	bbd50 <_ZN9FuelGauge12readRegisterEhRhS0_>
   bbde4:	4601      	mov	r1, r0
   bbde6:	b9c8      	cbnz	r0, bbe1c <_ZN9FuelGauge6getSoCEv+0x54>
    hal_power_config config = {};
   bbde8:	2420      	movs	r4, #32
   bbdea:	9001      	str	r0, [sp, #4]
   bbdec:	4622      	mov	r2, r4
   bbdee:	a804      	add	r0, sp, #16
   bbdf0:	f003 fa52 	bl	bf298 <memset>
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   bbdf4:	9901      	ldr	r1, [sp, #4]
    config.size = sizeof(config);
   bbdf6:	f88d 4015 	strb.w	r4, [sp, #21]
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   bbdfa:	a804      	add	r0, sp, #16
   bbdfc:	f7ff f9be 	bl	bb17c <system_power_management_get_config>
   bbe00:	b950      	cbnz	r0, bbe18 <_ZN9FuelGauge6getSoCEv+0x50>
        soc_bits = config.soc_bits;
   bbe02:	f89d 201e 	ldrb.w	r2, [sp, #30]
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   bbe06:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbe0a:	f89d 000e 	ldrb.w	r0, [sp, #14]
}
   bbe0e:	b00c      	add	sp, #48	; 0x30
   bbe10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   bbe14:	f7ff bf6c 	b.w	bbcf0 <_ZN8particle6detail7_getSoCEhhh>
    int soc_bits = particle::power::DEFAULT_SOC_18_BIT_PRECISION;
   bbe18:	2212      	movs	r2, #18
   bbe1a:	e7f4      	b.n	bbe06 <_ZN9FuelGauge6getSoCEv+0x3e>
}
   bbe1c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   bbe20:	b00c      	add	sp, #48	; 0x30
   bbe22:	bd10      	pop	{r4, pc}

000bbe24 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bbe24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bbe28:	4604      	mov	r4, r0
   bbe2a:	461d      	mov	r5, r3
   bbe2c:	460f      	mov	r7, r1
   bbe2e:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bbe30:	f7ff ff72 	bl	bbd18 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bbe34:	2236      	movs	r2, #54	; 0x36
   bbe36:	2300      	movs	r3, #0
   bbe38:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bbe3c:	6820      	ldr	r0, [r4, #0]
    timeout_ = ms;
   bbe3e:	f04f 0801 	mov.w	r8, #1
   bbe42:	230a      	movs	r3, #10
   bbe44:	4669      	mov	r1, sp
   bbe46:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bbe4a:	f000 f89d 	bl	bbf88 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bbe4e:	6820      	ldr	r0, [r4, #0]
   bbe50:	6803      	ldr	r3, [r0, #0]
   bbe52:	4639      	mov	r1, r7
   bbe54:	689b      	ldr	r3, [r3, #8]
   bbe56:	4798      	blx	r3
    i2c_.write(MSB);
   bbe58:	6820      	ldr	r0, [r4, #0]
   bbe5a:	6803      	ldr	r3, [r0, #0]
   bbe5c:	4631      	mov	r1, r6
   bbe5e:	689b      	ldr	r3, [r3, #8]
   bbe60:	4798      	blx	r3
    i2c_.write(LSB);
   bbe62:	6820      	ldr	r0, [r4, #0]
   bbe64:	6803      	ldr	r3, [r0, #0]
   bbe66:	4629      	mov	r1, r5
   bbe68:	689b      	ldr	r3, [r3, #8]
   bbe6a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bbe6c:	4641      	mov	r1, r8
   bbe6e:	6820      	ldr	r0, [r4, #0]
   bbe70:	f000 f8a2 	bl	bbfb8 <_ZN7TwoWire15endTransmissionEh>
   bbe74:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bbe76:	4620      	mov	r0, r4
   bbe78:	bf0c      	ite	eq
   bbe7a:	2500      	moveq	r5, #0
   bbe7c:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bbe80:	f7ff ff63 	bl	bbd4a <_ZN9FuelGauge6unlockEv>
}
   bbe84:	4628      	mov	r0, r5
   bbe86:	b004      	add	sp, #16
   bbe88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbe8c <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bbe8c:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bbe8e:	2240      	movs	r2, #64	; 0x40
   bbe90:	2300      	movs	r3, #0
   bbe92:	2106      	movs	r1, #6
   bbe94:	f7ff ffc6 	bl	bbe24 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bbe98:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bbe9c:	bd08      	pop	{r3, pc}

000bbe9e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bbe9e:	4770      	bx	lr

000bbea0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bbea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbea2:	4606      	mov	r6, r0
   bbea4:	4615      	mov	r5, r2
   bbea6:	460c      	mov	r4, r1
   bbea8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bbeaa:	42bc      	cmp	r4, r7
   bbeac:	d006      	beq.n	bbebc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bbeae:	6833      	ldr	r3, [r6, #0]
   bbeb0:	f814 1b01 	ldrb.w	r1, [r4], #1
   bbeb4:	689b      	ldr	r3, [r3, #8]
   bbeb6:	4630      	mov	r0, r6
   bbeb8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bbeba:	e7f6      	b.n	bbeaa <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bbebc:	4628      	mov	r0, r5
   bbebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbec0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bbec0:	7c00      	ldrb	r0, [r0, #16]
   bbec2:	2200      	movs	r2, #0
   bbec4:	f7fe bf0e 	b.w	bace4 <hal_i2c_write>

000bbec8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bbec8:	7c00      	ldrb	r0, [r0, #16]
   bbeca:	2100      	movs	r1, #0
   bbecc:	f7fe bf12 	b.w	bacf4 <hal_i2c_available>

000bbed0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bbed0:	7c00      	ldrb	r0, [r0, #16]
   bbed2:	2100      	movs	r1, #0
   bbed4:	f7fe bf16 	b.w	bad04 <hal_i2c_read>

000bbed8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bbed8:	7c00      	ldrb	r0, [r0, #16]
   bbeda:	2100      	movs	r1, #0
   bbedc:	f7fe bf1a 	b.w	bad14 <hal_i2c_peek>

000bbee0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bbee0:	7c00      	ldrb	r0, [r0, #16]
   bbee2:	2100      	movs	r1, #0
   bbee4:	f7fe bf1e 	b.w	bad24 <hal_i2c_flush>

000bbee8 <_ZN7TwoWireD0Ev>:
   bbee8:	b510      	push	{r4, lr}
   bbeea:	2114      	movs	r1, #20
   bbeec:	4604      	mov	r4, r0
   bbeee:	f7f8 f8d6 	bl	b409e <_ZdlPvj>
   bbef2:	4620      	mov	r0, r4
   bbef4:	bd10      	pop	{r4, pc}
	...

000bbef8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bbef8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bbefa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bbefe:	4604      	mov	r4, r0
   bbf00:	4608      	mov	r0, r1
   bbf02:	2100      	movs	r1, #0
   bbf04:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bbf08:	4b03      	ldr	r3, [pc, #12]	; (bbf18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bbf0a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bbf0c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bbf0e:	4611      	mov	r1, r2
   bbf10:	f7fe ff18 	bl	bad44 <hal_i2c_init>
}
   bbf14:	4620      	mov	r0, r4
   bbf16:	bd10      	pop	{r4, pc}
   bbf18:	000c0cd4 	.word	0x000c0cd4

000bbf1c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bbf1c:	2300      	movs	r3, #0
   bbf1e:	7c00      	ldrb	r0, [r0, #16]
   bbf20:	461a      	mov	r2, r3
   bbf22:	4619      	mov	r1, r3
   bbf24:	f7fe bec6 	b.w	bacb4 <hal_i2c_begin>

000bbf28 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bbf28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bbf2a:	2200      	movs	r2, #0
   bbf2c:	2314      	movs	r3, #20
   bbf2e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bbf32:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bbf36:	780b      	ldrb	r3, [r1, #0]
   bbf38:	f88d 3008 	strb.w	r3, [sp, #8]
   bbf3c:	684b      	ldr	r3, [r1, #4]
   bbf3e:	9303      	str	r3, [sp, #12]
   bbf40:	68cb      	ldr	r3, [r1, #12]
   bbf42:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bbf44:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bbf46:	7a0b      	ldrb	r3, [r1, #8]
   bbf48:	9305      	str	r3, [sp, #20]
   bbf4a:	a901      	add	r1, sp, #4
   bbf4c:	f7fe ff12 	bl	bad74 <hal_i2c_request_ex>
}
   bbf50:	b007      	add	sp, #28
   bbf52:	f85d fb04 	ldr.w	pc, [sp], #4

000bbf56 <_ZN7TwoWire11requestFromEhjh>:
{
   bbf56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bbf58:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bbf5a:	f88d 1000 	strb.w	r1, [sp]
   bbf5e:	f04f 0164 	mov.w	r1, #100	; 0x64
   bbf62:	9103      	str	r1, [sp, #12]
   bbf64:	bf18      	it	ne
   bbf66:	2301      	movne	r3, #1
   bbf68:	4669      	mov	r1, sp
    size_ = size;
   bbf6a:	9201      	str	r2, [sp, #4]
   bbf6c:	f88d 3008 	strb.w	r3, [sp, #8]
   bbf70:	f7ff ffda 	bl	bbf28 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bbf74:	b005      	add	sp, #20
   bbf76:	f85d fb04 	ldr.w	pc, [sp], #4

000bbf7a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bbf7a:	7c00      	ldrb	r0, [r0, #16]
   bbf7c:	2200      	movs	r2, #0
   bbf7e:	f7fe bea1 	b.w	bacc4 <hal_i2c_begin_transmission>

000bbf82 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bbf82:	b2c9      	uxtb	r1, r1
   bbf84:	f7ff bff9 	b.w	bbf7a <_ZN7TwoWire17beginTransmissionEh>

000bbf88 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bbf88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bbf8a:	2300      	movs	r3, #0
   bbf8c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bbf90:	684a      	ldr	r2, [r1, #4]
   bbf92:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bbf94:	2314      	movs	r3, #20
    };
   bbf96:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bbf98:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bbf9c:	780b      	ldrb	r3, [r1, #0]
    };
   bbf9e:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bbfa0:	7a0a      	ldrb	r2, [r1, #8]
   bbfa2:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bbfa4:	7c00      	ldrb	r0, [r0, #16]
    };
   bbfa6:	f88d 3008 	strb.w	r3, [sp, #8]
   bbfaa:	aa01      	add	r2, sp, #4
   bbfac:	4619      	mov	r1, r3
   bbfae:	f7fe fe89 	bl	bacc4 <hal_i2c_begin_transmission>
}
   bbfb2:	b007      	add	sp, #28
   bbfb4:	f85d fb04 	ldr.w	pc, [sp], #4

000bbfb8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bbfb8:	7c00      	ldrb	r0, [r0, #16]
   bbfba:	2200      	movs	r2, #0
   bbfbc:	f7fe be8a 	b.w	bacd4 <hal_i2c_end_transmission>

000bbfc0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bbfc0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bbfc2:	2100      	movs	r1, #0
   bbfc4:	7c00      	ldrb	r0, [r0, #16]
   bbfc6:	f7fe fec5 	bl	bad54 <hal_i2c_lock>
}
   bbfca:	fab0 f080 	clz	r0, r0
   bbfce:	0940      	lsrs	r0, r0, #5
   bbfd0:	bd08      	pop	{r3, pc}

000bbfd2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bbfd2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bbfd4:	2100      	movs	r1, #0
   bbfd6:	7c00      	ldrb	r0, [r0, #16]
   bbfd8:	f7fe fec4 	bl	bad64 <hal_i2c_unlock>
}
   bbfdc:	fab0 f080 	clz	r0, r0
   bbfe0:	0940      	lsrs	r0, r0, #5
   bbfe2:	bd08      	pop	{r3, pc}

000bbfe4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bbfe4:	4700      	bx	r0
	...

000bbfe8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bbfe8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bbfec:	2400      	movs	r4, #0
{
   bbfee:	461d      	mov	r5, r3
   bbff0:	460f      	mov	r7, r1
   bbff2:	4690      	mov	r8, r2
   bbff4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bbff6:	f7fe fe4d 	bl	bac94 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bbffa:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bbffc:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bc000:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc004:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bc008:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bc00c:	bfa2      	ittt	ge
   bc00e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bc012:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bc016:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc018:	4907      	ldr	r1, [pc, #28]	; (bc038 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bc01a:	9400      	str	r4, [sp, #0]
   bc01c:	4643      	mov	r3, r8
   bc01e:	463a      	mov	r2, r7
   bc020:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bc022:	bfa8      	it	ge
   bc024:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc028:	f7fe fe2c 	bl	bac84 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bc02c:	fab0 f080 	clz	r0, r0
   bc030:	0940      	lsrs	r0, r0, #5
   bc032:	b004      	add	sp, #16
   bc034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc038:	000bbfe5 	.word	0x000bbfe5

000bc03c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bc03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc03e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bc040:	f7fe fe28 	bl	bac94 <HAL_Interrupts_Detach>
   bc044:	4605      	mov	r5, r0
   bc046:	b970      	cbnz	r0, bc066 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bc048:	4f08      	ldr	r7, [pc, #32]	; (bc06c <_Z15detachInterruptt+0x30>)
   bc04a:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bc04e:	b146      	cbz	r6, bc062 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bc050:	4630      	mov	r0, r6
   bc052:	f7f8 fb51 	bl	b46f8 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bc056:	2110      	movs	r1, #16
   bc058:	4630      	mov	r0, r6
   bc05a:	f7f8 f820 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bc05e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bc062:	2001      	movs	r0, #1
   bc064:	e000      	b.n	bc068 <_Z15detachInterruptt+0x2c>
        return false;
   bc066:	2000      	movs	r0, #0
    }
    return true;
}
   bc068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc06a:	bf00      	nop
   bc06c:	2003e5bc 	.word	0x2003e5bc

000bc070 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bc070:	4770      	bx	lr

000bc072 <_ZN9IPAddressD0Ev>:
   bc072:	b510      	push	{r4, lr}
   bc074:	2118      	movs	r1, #24
   bc076:	4604      	mov	r4, r0
   bc078:	f7f8 f811 	bl	b409e <_ZdlPvj>
   bc07c:	4620      	mov	r0, r4
   bc07e:	bd10      	pop	{r4, pc}

000bc080 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc080:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc082:	7d03      	ldrb	r3, [r0, #20]
   bc084:	2b06      	cmp	r3, #6
{
   bc086:	b08d      	sub	sp, #52	; 0x34
   bc088:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc08a:	f100 0704 	add.w	r7, r0, #4
   bc08e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc092:	d012      	beq.n	bc0ba <_ZNK9IPAddress7printToER5Print+0x3a>
   bc094:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc098:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc09c:	220a      	movs	r2, #10
   bc09e:	4630      	mov	r0, r6
   bc0a0:	f001 fb0d 	bl	bd6be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc0a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc0a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc0a8:	d019      	beq.n	bc0de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc0aa:	2c00      	cmp	r4, #0
   bc0ac:	d0f4      	beq.n	bc098 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc0ae:	212e      	movs	r1, #46	; 0x2e
   bc0b0:	4630      	mov	r0, r6
   bc0b2:	f001 faf5 	bl	bd6a0 <_ZN5Print5printEc>
   bc0b6:	4404      	add	r4, r0
   bc0b8:	e7ee      	b.n	bc098 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc0ba:	232f      	movs	r3, #47	; 0x2f
   bc0bc:	466a      	mov	r2, sp
   bc0be:	4639      	mov	r1, r7
   bc0c0:	200a      	movs	r0, #10
		buf[0] = 0;
   bc0c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc0c6:	f7fe fe5d 	bl	bad84 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc0ca:	4668      	mov	r0, sp
   bc0cc:	f003 f99f 	bl	bf40e <strlen>
   bc0d0:	6833      	ldr	r3, [r6, #0]
   bc0d2:	4602      	mov	r2, r0
   bc0d4:	68db      	ldr	r3, [r3, #12]
   bc0d6:	4669      	mov	r1, sp
   bc0d8:	4630      	mov	r0, r6
   bc0da:	4798      	blx	r3
   bc0dc:	4604      	mov	r4, r0
    }
    return n;
}
   bc0de:	4620      	mov	r0, r4
   bc0e0:	b00d      	add	sp, #52	; 0x34
   bc0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc0e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc0e4:	b510      	push	{r4, lr}
   bc0e6:	4b05      	ldr	r3, [pc, #20]	; (bc0fc <_ZN9IPAddressC1Ev+0x18>)
   bc0e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bc0ea:	2211      	movs	r2, #17
   bc0ec:	f840 3b04 	str.w	r3, [r0], #4
   bc0f0:	2100      	movs	r1, #0
   bc0f2:	f003 f8d1 	bl	bf298 <memset>
}
   bc0f6:	4620      	mov	r0, r4
   bc0f8:	bd10      	pop	{r4, pc}
   bc0fa:	bf00      	nop
   bc0fc:	000c0cfc 	.word	0x000c0cfc

000bc100 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc100:	4603      	mov	r3, r0
   bc102:	4a07      	ldr	r2, [pc, #28]	; (bc120 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc104:	b510      	push	{r4, lr}
   bc106:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc10a:	f101 0210 	add.w	r2, r1, #16
   bc10e:	f851 4b04 	ldr.w	r4, [r1], #4
   bc112:	f843 4b04 	str.w	r4, [r3], #4
   bc116:	4291      	cmp	r1, r2
   bc118:	d1f9      	bne.n	bc10e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc11a:	780a      	ldrb	r2, [r1, #0]
   bc11c:	701a      	strb	r2, [r3, #0]
}
   bc11e:	bd10      	pop	{r4, pc}
   bc120:	000c0cfc 	.word	0x000c0cfc

000bc124 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc124:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc126:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc12a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc12e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc132:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc136:	2304      	movs	r3, #4
   bc138:	6041      	str	r1, [r0, #4]
   bc13a:	7503      	strb	r3, [r0, #20]
}
   bc13c:	bd10      	pop	{r4, pc}
	...

000bc140 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc140:	b507      	push	{r0, r1, r2, lr}
   bc142:	4b06      	ldr	r3, [pc, #24]	; (bc15c <_ZN9IPAddressC1EPKh+0x1c>)
   bc144:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc146:	78cb      	ldrb	r3, [r1, #3]
   bc148:	9300      	str	r3, [sp, #0]
   bc14a:	788b      	ldrb	r3, [r1, #2]
   bc14c:	784a      	ldrb	r2, [r1, #1]
   bc14e:	7809      	ldrb	r1, [r1, #0]
   bc150:	f7ff ffe8 	bl	bc124 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc154:	b003      	add	sp, #12
   bc156:	f85d fb04 	ldr.w	pc, [sp], #4
   bc15a:	bf00      	nop
   bc15c:	000c0cfc 	.word	0x000c0cfc

000bc160 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bc160:	f100 0310 	add.w	r3, r0, #16
   bc164:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bc166:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bc16a:	2901      	cmp	r1, #1
   bc16c:	4618      	mov	r0, r3
   bc16e:	d108      	bne.n	bc182 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bc170:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bc174:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bc178:	3a01      	subs	r2, #1
   bc17a:	f103 0310 	add.w	r3, r3, #16
   bc17e:	d1f2      	bne.n	bc166 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bc180:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bc182:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bc184:	bf04      	itt	eq
   bc186:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bc18a:	1852      	addeq	r2, r2, r1
   bc18c:	e7f4      	b.n	bc178 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bc18e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bc18e:	b40e      	push	{r1, r2, r3}
   bc190:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc192:	b088      	sub	sp, #32
   bc194:	af00      	add	r7, sp, #0
   bc196:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc19a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bc19c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc1a0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bc1a2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc1a4:	462b      	mov	r3, r5
   bc1a6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bc1a8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc1aa:	f7ff f8d9 	bl	bb360 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bc1ae:	280f      	cmp	r0, #15
   bc1b0:	687a      	ldr	r2, [r7, #4]
   bc1b2:	d91a      	bls.n	bc1ea <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bc1b4:	f100 0308 	add.w	r3, r0, #8
   bc1b8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bc1bc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bc1be:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc1c2:	1c41      	adds	r1, r0, #1
   bc1c4:	462b      	mov	r3, r5
   bc1c6:	4668      	mov	r0, sp
        va_start(args, fmt);
   bc1c8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc1ca:	f7ff f8c9 	bl	bb360 <vsnprintf>
        if (n > 0) {
   bc1ce:	1e02      	subs	r2, r0, #0
   bc1d0:	dd04      	ble.n	bc1dc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bc1d2:	6823      	ldr	r3, [r4, #0]
   bc1d4:	4669      	mov	r1, sp
   bc1d6:	689b      	ldr	r3, [r3, #8]
   bc1d8:	4620      	mov	r0, r4
   bc1da:	4798      	blx	r3
   bc1dc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bc1de:	3720      	adds	r7, #32
   bc1e0:	46bd      	mov	sp, r7
   bc1e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bc1e6:	b003      	add	sp, #12
   bc1e8:	4770      	bx	lr
    } else if (n > 0) {
   bc1ea:	2800      	cmp	r0, #0
   bc1ec:	d0f7      	beq.n	bc1de <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bc1ee:	6823      	ldr	r3, [r4, #0]
   bc1f0:	4602      	mov	r2, r0
   bc1f2:	689b      	ldr	r3, [r3, #8]
   bc1f4:	f107 0110 	add.w	r1, r7, #16
   bc1f8:	4620      	mov	r0, r4
   bc1fa:	4798      	blx	r3
}
   bc1fc:	e7ef      	b.n	bc1de <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bc1fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc1fe:	b538      	push	{r3, r4, r5, lr}
   bc200:	680b      	ldr	r3, [r1, #0]
   bc202:	6003      	str	r3, [r0, #0]
   bc204:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bc206:	6843      	ldr	r3, [r0, #4]
   bc208:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc20a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bc20c:	d008      	beq.n	bc220 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bc20e:	b115      	cbz	r5, bc216 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bc210:	686b      	ldr	r3, [r5, #4]
   bc212:	3301      	adds	r3, #1
   bc214:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bc216:	6860      	ldr	r0, [r4, #4]
   bc218:	b108      	cbz	r0, bc21e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bc21a:	f7ff f908 	bl	bb42e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bc21e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc220:	bd38      	pop	{r3, r4, r5, pc}

000bc222 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bc222:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bc224:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bc226:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bc22a:	689b      	ldr	r3, [r3, #8]
   bc22c:	2201      	movs	r2, #1
   bc22e:	f10d 0107 	add.w	r1, sp, #7
   bc232:	4798      	blx	r3
}
   bc234:	b003      	add	sp, #12
   bc236:	f85d fb04 	ldr.w	pc, [sp], #4

000bc23a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc23a:	460b      	mov	r3, r1
   bc23c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bc23e:	2200      	movs	r2, #0
   bc240:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bc242:	e9c0 2200 	strd	r2, r2, [r0]
   bc246:	4604      	mov	r4, r0
        t_ = t;
   bc248:	6083      	str	r3, [r0, #8]
    if (t) {
   bc24a:	b90b      	cbnz	r3, bc250 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bc24c:	4620      	mov	r0, r4
   bc24e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bc250:	f7ff ffd5 	bl	bc1fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bc254:	e7fa      	b.n	bc24c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bc256 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bc256:	6883      	ldr	r3, [r0, #8]
   bc258:	b1eb      	cbz	r3, bc296 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bc25a:	781a      	ldrb	r2, [r3, #0]
   bc25c:	2a03      	cmp	r2, #3
   bc25e:	d81a      	bhi.n	bc296 <_ZNK5spark9JSONValue4typeEv+0x40>
   bc260:	e8df f002 	tbb	[pc, r2]
   bc264:	1b021704 	.word	0x1b021704
   bc268:	2005      	movs	r0, #5
   bc26a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bc26c:	6802      	ldr	r2, [r0, #0]
   bc26e:	685b      	ldr	r3, [r3, #4]
   bc270:	6852      	ldr	r2, [r2, #4]
   bc272:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bc274:	282d      	cmp	r0, #45	; 0x2d
   bc276:	d012      	beq.n	bc29e <_ZNK5spark9JSONValue4typeEv+0x48>
   bc278:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc27c:	2b09      	cmp	r3, #9
   bc27e:	d90e      	bls.n	bc29e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bc280:	2874      	cmp	r0, #116	; 0x74
   bc282:	d00e      	beq.n	bc2a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bc284:	2866      	cmp	r0, #102	; 0x66
   bc286:	d00c      	beq.n	bc2a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bc288:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bc28c:	4258      	negs	r0, r3
   bc28e:	4158      	adcs	r0, r3
   bc290:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bc292:	2006      	movs	r0, #6
   bc294:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bc296:	2000      	movs	r0, #0
   bc298:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bc29a:	2004      	movs	r0, #4
   bc29c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bc29e:	2003      	movs	r0, #3
   bc2a0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bc2a2:	2002      	movs	r0, #2
}
   bc2a4:	4770      	bx	lr

000bc2a6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bc2a6:	b510      	push	{r4, lr}
   bc2a8:	4604      	mov	r4, r0
    switch (type()) {
   bc2aa:	f7ff ffd4 	bl	bc256 <_ZNK5spark9JSONValue4typeEv>
   bc2ae:	2802      	cmp	r0, #2
   bc2b0:	d00e      	beq.n	bc2d0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bc2b2:	1ec3      	subs	r3, r0, #3
   bc2b4:	b2db      	uxtb	r3, r3
   bc2b6:	2b01      	cmp	r3, #1
   bc2b8:	d814      	bhi.n	bc2e4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bc2ba:	6822      	ldr	r2, [r4, #0]
   bc2bc:	68a3      	ldr	r3, [r4, #8]
   bc2be:	6850      	ldr	r0, [r2, #4]
   bc2c0:	685b      	ldr	r3, [r3, #4]
}
   bc2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bc2c6:	220a      	movs	r2, #10
   bc2c8:	2100      	movs	r1, #0
   bc2ca:	4418      	add	r0, r3
   bc2cc:	f003 b990 	b.w	bf5f0 <strtol>
        const char* const s = d_->json + t_->start;
   bc2d0:	6822      	ldr	r2, [r4, #0]
   bc2d2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bc2d4:	6852      	ldr	r2, [r2, #4]
   bc2d6:	685b      	ldr	r3, [r3, #4]
   bc2d8:	5cd0      	ldrb	r0, [r2, r3]
   bc2da:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bc2de:	4258      	negs	r0, r3
   bc2e0:	4158      	adcs	r0, r3
}
   bc2e2:	bd10      	pop	{r4, pc}
    switch (type()) {
   bc2e4:	2000      	movs	r0, #0
   bc2e6:	e7fc      	b.n	bc2e2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bc2e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc2e8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bc2ea:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bc2ec:	e9c0 3300 	strd	r3, r3, [r0]
   bc2f0:	4604      	mov	r4, r0
        n_(0) {
   bc2f2:	480e      	ldr	r0, [pc, #56]	; (bc32c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bc2f4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bc2f8:	b1a9      	cbz	r1, bc326 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bc2fa:	780b      	ldrb	r3, [r1, #0]
   bc2fc:	2b03      	cmp	r3, #3
   bc2fe:	d006      	beq.n	bc30e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bc300:	b98b      	cbnz	r3, bc326 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bc302:	6813      	ldr	r3, [r2, #0]
   bc304:	6858      	ldr	r0, [r3, #4]
   bc306:	684b      	ldr	r3, [r1, #4]
   bc308:	5cc3      	ldrb	r3, [r0, r3]
   bc30a:	2b6e      	cmp	r3, #110	; 0x6e
   bc30c:	d007      	beq.n	bc31e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bc30e:	6813      	ldr	r3, [r2, #0]
   bc310:	684d      	ldr	r5, [r1, #4]
   bc312:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bc314:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bc316:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bc318:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bc31a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bc31c:	60e3      	str	r3, [r4, #12]
   bc31e:	4611      	mov	r1, r2
   bc320:	4620      	mov	r0, r4
   bc322:	f7ff ff6c 	bl	bc1fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bc326:	4620      	mov	r0, r4
   bc328:	bd38      	pop	{r3, r4, r5, pc}
   bc32a:	bf00      	nop
   bc32c:	000c0d65 	.word	0x000c0d65

000bc330 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc330:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bc332:	2500      	movs	r5, #0
   bc334:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bc336:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bc33a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bc33e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc342:	4604      	mov	r4, r0
   bc344:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bc346:	b14b      	cbz	r3, bc35c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bc348:	781a      	ldrb	r2, [r3, #0]
   bc34a:	2a01      	cmp	r2, #1
   bc34c:	d106      	bne.n	bc35c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bc34e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bc352:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bc354:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bc356:	6143      	str	r3, [r0, #20]
   bc358:	f7ff ff51 	bl	bc1fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bc35c:	4620      	mov	r0, r4
   bc35e:	bd38      	pop	{r3, r4, r5, pc}

000bc360 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bc360:	b510      	push	{r4, lr}
    if (!n_) {
   bc362:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bc364:	4604      	mov	r4, r0
    if (!n_) {
   bc366:	b163      	cbz	r3, bc382 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bc368:	6880      	ldr	r0, [r0, #8]
   bc36a:	60e0      	str	r0, [r4, #12]
    --n_;
   bc36c:	3b01      	subs	r3, #1
    ++t_;
   bc36e:	3010      	adds	r0, #16
   bc370:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bc372:	6120      	str	r0, [r4, #16]
    --n_;
   bc374:	6163      	str	r3, [r4, #20]
    if (n_) {
   bc376:	b113      	cbz	r3, bc37e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bc378:	f7ff fef2 	bl	bc160 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bc37c:	60a0      	str	r0, [r4, #8]
    return true;
   bc37e:	2001      	movs	r0, #1
   bc380:	e000      	b.n	bc384 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bc382:	4618      	mov	r0, r3
}
   bc384:	bd10      	pop	{r4, pc}

000bc386 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bc386:	b510      	push	{r4, lr}
    write('}');
   bc388:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bc38a:	4604      	mov	r4, r0
    write('}');
   bc38c:	f7ff ff49 	bl	bc222 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bc390:	2301      	movs	r3, #1
   bc392:	7123      	strb	r3, [r4, #4]
}
   bc394:	4620      	mov	r0, r4
   bc396:	bd10      	pop	{r4, pc}

000bc398 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bc398:	b508      	push	{r3, lr}
    switch (state_) {
   bc39a:	7903      	ldrb	r3, [r0, #4]
   bc39c:	2b01      	cmp	r3, #1
   bc39e:	d002      	beq.n	bc3a6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bc3a0:	2b02      	cmp	r3, #2
   bc3a2:	d004      	beq.n	bc3ae <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bc3a4:	bd08      	pop	{r3, pc}
        write(',');
   bc3a6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bc3a8:	f7ff ff3b 	bl	bc222 <_ZN5spark10JSONWriter5writeEc>
}
   bc3ac:	e7fa      	b.n	bc3a4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bc3ae:	213a      	movs	r1, #58	; 0x3a
   bc3b0:	e7fa      	b.n	bc3a8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bc3b2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bc3b2:	b510      	push	{r4, lr}
   bc3b4:	4604      	mov	r4, r0
    writeSeparator();
   bc3b6:	f7ff ffef 	bl	bc398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bc3ba:	4620      	mov	r0, r4
   bc3bc:	217b      	movs	r1, #123	; 0x7b
   bc3be:	f7ff ff30 	bl	bc222 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bc3c2:	2300      	movs	r3, #0
   bc3c4:	7123      	strb	r3, [r4, #4]
}
   bc3c6:	4620      	mov	r0, r4
   bc3c8:	bd10      	pop	{r4, pc}
	...

000bc3cc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bc3cc:	b513      	push	{r0, r1, r4, lr}
   bc3ce:	4604      	mov	r4, r0
   bc3d0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bc3d2:	f7ff ffe1 	bl	bc398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bc3d6:	6823      	ldr	r3, [r4, #0]
   bc3d8:	9a01      	ldr	r2, [sp, #4]
   bc3da:	68db      	ldr	r3, [r3, #12]
   bc3dc:	4903      	ldr	r1, [pc, #12]	; (bc3ec <_ZN5spark10JSONWriter5valueEi+0x20>)
   bc3de:	4620      	mov	r0, r4
   bc3e0:	4798      	blx	r3
    state_ = NEXT;
   bc3e2:	2301      	movs	r3, #1
}
   bc3e4:	4620      	mov	r0, r4
    state_ = NEXT;
   bc3e6:	7123      	strb	r3, [r4, #4]
}
   bc3e8:	b002      	add	sp, #8
   bc3ea:	bd10      	pop	{r4, pc}
   bc3ec:	000c0313 	.word	0x000c0313

000bc3f0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bc3f0:	b513      	push	{r0, r1, r4, lr}
   bc3f2:	4604      	mov	r4, r0
   bc3f4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bc3f6:	f7ff ffcf 	bl	bc398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bc3fa:	6823      	ldr	r3, [r4, #0]
   bc3fc:	9a01      	ldr	r2, [sp, #4]
   bc3fe:	68db      	ldr	r3, [r3, #12]
   bc400:	4903      	ldr	r1, [pc, #12]	; (bc410 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bc402:	4620      	mov	r0, r4
   bc404:	4798      	blx	r3
    state_ = NEXT;
   bc406:	2301      	movs	r3, #1
}
   bc408:	4620      	mov	r0, r4
    state_ = NEXT;
   bc40a:	7123      	strb	r3, [r4, #4]
}
   bc40c:	b002      	add	sp, #8
   bc40e:	bd10      	pop	{r4, pc}
   bc410:	000c067e 	.word	0x000c067e

000bc414 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bc414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc418:	460d      	mov	r5, r1
    write('"');
   bc41a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bc41c:	4690      	mov	r8, r2
   bc41e:	4604      	mov	r4, r0
    write('"');
   bc420:	f7ff feff 	bl	bc222 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bc424:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc4cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bc428:	44a8      	add	r8, r5
    const char *s = str;
   bc42a:	462f      	mov	r7, r5
    while (s != end) {
   bc42c:	4547      	cmp	r7, r8
   bc42e:	46ba      	mov	sl, r7
   bc430:	d03d      	beq.n	bc4ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bc432:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bc436:	2e22      	cmp	r6, #34	; 0x22
   bc438:	d006      	beq.n	bc448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bc43a:	2e5c      	cmp	r6, #92	; 0x5c
   bc43c:	d004      	beq.n	bc448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bc43e:	4630      	mov	r0, r6
   bc440:	f002 fefa 	bl	bf238 <isprint>
   bc444:	2800      	cmp	r0, #0
   bc446:	d1f1      	bne.n	bc42c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bc448:	6823      	ldr	r3, [r4, #0]
   bc44a:	ebaa 0205 	sub.w	r2, sl, r5
   bc44e:	689b      	ldr	r3, [r3, #8]
   bc450:	4629      	mov	r1, r5
   bc452:	4620      	mov	r0, r4
   bc454:	4798      	blx	r3
            write('\\');
   bc456:	215c      	movs	r1, #92	; 0x5c
   bc458:	4620      	mov	r0, r4
   bc45a:	f7ff fee2 	bl	bc222 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bc45e:	2e0d      	cmp	r6, #13
   bc460:	d80a      	bhi.n	bc478 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bc462:	2e07      	cmp	r6, #7
   bc464:	d91c      	bls.n	bc4a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bc466:	f1a6 0308 	sub.w	r3, r6, #8
   bc46a:	2b05      	cmp	r3, #5
   bc46c:	d818      	bhi.n	bc4a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bc46e:	e8df f003 	tbb	[pc, r3]
   bc472:	0f0d      	.short	0x0f0d
   bc474:	15131711 	.word	0x15131711
   bc478:	2e22      	cmp	r6, #34	; 0x22
   bc47a:	d001      	beq.n	bc480 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bc47c:	2e5c      	cmp	r6, #92	; 0x5c
   bc47e:	d10f      	bne.n	bc4a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bc480:	4631      	mov	r1, r6
                write('b');
   bc482:	4620      	mov	r0, r4
   bc484:	f7ff fecd 	bl	bc222 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bc488:	463d      	mov	r5, r7
    while (s != end) {
   bc48a:	e7cf      	b.n	bc42c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bc48c:	2162      	movs	r1, #98	; 0x62
   bc48e:	e7f8      	b.n	bc482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bc490:	2174      	movs	r1, #116	; 0x74
   bc492:	e7f6      	b.n	bc482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bc494:	216e      	movs	r1, #110	; 0x6e
   bc496:	e7f4      	b.n	bc482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bc498:	2166      	movs	r1, #102	; 0x66
   bc49a:	e7f2      	b.n	bc482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bc49c:	2172      	movs	r1, #114	; 0x72
   bc49e:	e7f0      	b.n	bc482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bc4a0:	6823      	ldr	r3, [r4, #0]
   bc4a2:	4632      	mov	r2, r6
   bc4a4:	68db      	ldr	r3, [r3, #12]
   bc4a6:	4649      	mov	r1, r9
   bc4a8:	4620      	mov	r0, r4
   bc4aa:	4798      	blx	r3
                break;
   bc4ac:	e7ec      	b.n	bc488 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bc4ae:	42bd      	cmp	r5, r7
   bc4b0:	d005      	beq.n	bc4be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bc4b2:	6823      	ldr	r3, [r4, #0]
   bc4b4:	1b7a      	subs	r2, r7, r5
   bc4b6:	689b      	ldr	r3, [r3, #8]
   bc4b8:	4629      	mov	r1, r5
   bc4ba:	4620      	mov	r0, r4
   bc4bc:	4798      	blx	r3
    }
    write('"');
   bc4be:	2122      	movs	r1, #34	; 0x22
   bc4c0:	4620      	mov	r0, r4
   bc4c2:	f7ff feae 	bl	bc222 <_ZN5spark10JSONWriter5writeEc>
}
   bc4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc4ca:	bf00      	nop
   bc4cc:	000c0d08 	.word	0x000c0d08

000bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bc4d0:	b513      	push	{r0, r1, r4, lr}
   bc4d2:	4604      	mov	r4, r0
   bc4d4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bc4d8:	f7ff ff5e 	bl	bc398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bc4dc:	4620      	mov	r0, r4
   bc4de:	e9dd 2100 	ldrd	r2, r1, [sp]
   bc4e2:	f7ff ff97 	bl	bc414 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bc4e6:	2302      	movs	r3, #2
}
   bc4e8:	4620      	mov	r0, r4
    state_ = VALUE;
   bc4ea:	7123      	strb	r3, [r4, #4]
}
   bc4ec:	b002      	add	sp, #8
   bc4ee:	bd10      	pop	{r4, pc}

000bc4f0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bc4f0:	b513      	push	{r0, r1, r4, lr}
   bc4f2:	4604      	mov	r4, r0
   bc4f4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bc4f8:	f7ff ff4e 	bl	bc398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bc4fc:	4620      	mov	r0, r4
   bc4fe:	e9dd 2100 	ldrd	r2, r1, [sp]
   bc502:	f7ff ff87 	bl	bc414 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bc506:	2301      	movs	r3, #1
}
   bc508:	4620      	mov	r0, r4
    state_ = NEXT;
   bc50a:	7123      	strb	r3, [r4, #4]
}
   bc50c:	b002      	add	sp, #8
   bc50e:	bd10      	pop	{r4, pc}

000bc510 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bc510:	6880      	ldr	r0, [r0, #8]
   bc512:	6803      	ldr	r3, [r0, #0]
   bc514:	68db      	ldr	r3, [r3, #12]
   bc516:	4718      	bx	r3

000bc518 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bc518:	4770      	bx	lr

000bc51a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bc51a:	4608      	mov	r0, r1
   bc51c:	b111      	cbz	r1, bc524 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bc51e:	680b      	ldr	r3, [r1, #0]
   bc520:	685b      	ldr	r3, [r3, #4]
   bc522:	4718      	bx	r3
}
   bc524:	4770      	bx	lr

000bc526 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bc526:	4770      	bx	lr

000bc528 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bc528:	4770      	bx	lr

000bc52a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bc52a:	4770      	bx	lr

000bc52c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bc52c:	4770      	bx	lr

000bc52e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bc52e:	b538      	push	{r3, r4, r5, lr}
   bc530:	4604      	mov	r4, r0
   bc532:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bc534:	6800      	ldr	r0, [r0, #0]
   bc536:	212e      	movs	r1, #46	; 0x2e
   bc538:	f002 ff2f 	bl	bf39a <strchrnul>
    size = s - category;
   bc53c:	6823      	ldr	r3, [r4, #0]
   bc53e:	1ac3      	subs	r3, r0, r3
   bc540:	602b      	str	r3, [r5, #0]
    if (size) {
   bc542:	b123      	cbz	r3, bc54e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bc544:	7803      	ldrb	r3, [r0, #0]
   bc546:	b103      	cbz	r3, bc54a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bc548:	3001      	adds	r0, #1
   bc54a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc54c:	6020      	str	r0, [r4, #0]
}
   bc54e:	4618      	mov	r0, r3
   bc550:	bd38      	pop	{r3, r4, r5, pc}

000bc552 <_ZN5spark16JSONStreamWriterD0Ev>:
   bc552:	b510      	push	{r4, lr}
   bc554:	210c      	movs	r1, #12
   bc556:	4604      	mov	r4, r0
   bc558:	f7f7 fda1 	bl	b409e <_ZdlPvj>
   bc55c:	4620      	mov	r0, r4
   bc55e:	bd10      	pop	{r4, pc}

000bc560 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bc560:	b510      	push	{r4, lr}
   bc562:	2104      	movs	r1, #4
   bc564:	4604      	mov	r4, r0
   bc566:	f7f7 fd9a 	bl	b409e <_ZdlPvj>
   bc56a:	4620      	mov	r0, r4
   bc56c:	bd10      	pop	{r4, pc}

000bc56e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bc56e:	b510      	push	{r4, lr}
   bc570:	2104      	movs	r1, #4
   bc572:	4604      	mov	r4, r0
   bc574:	f7f7 fd93 	bl	b409e <_ZdlPvj>
   bc578:	4620      	mov	r0, r4
   bc57a:	bd10      	pop	{r4, pc}

000bc57c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bc57c:	f7fe baf2 	b.w	bab64 <os_mutex_recursive_lock>

000bc580 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bc580:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bc582:	f002 ff14 	bl	bf3ae <strcmp>
}
   bc586:	fab0 f080 	clz	r0, r0
   bc58a:	0940      	lsrs	r0, r0, #5
   bc58c:	bd08      	pop	{r3, pc}

000bc58e <__tcf_1>:
   bc58e:	4770      	bx	lr

000bc590 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bc590:	b510      	push	{r4, lr}
   bc592:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bc594:	f001 ff22 	bl	be3dc <_Z16_fetch_usbserialv>
   bc598:	4284      	cmp	r4, r0
   bc59a:	d010      	beq.n	bc5be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bc59c:	f002 f91c 	bl	be7d8 <_Z22__fetch_global_Serial1v>
   bc5a0:	4284      	cmp	r4, r0
   bc5a2:	d105      	bne.n	bc5b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bc5a4:	f002 f918 	bl	be7d8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bc5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bc5ac:	f001 beb1 	b.w	be312 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bc5b0:	b12c      	cbz	r4, bc5be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bc5b2:	6823      	ldr	r3, [r4, #0]
   bc5b4:	4620      	mov	r0, r4
   bc5b6:	685b      	ldr	r3, [r3, #4]
}
   bc5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bc5bc:	4718      	bx	r3
   bc5be:	bd10      	pop	{r4, pc}

000bc5c0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bc5c0:	b513      	push	{r0, r1, r4, lr}
   bc5c2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bc5c4:	4608      	mov	r0, r1
   bc5c6:	9101      	str	r1, [sp, #4]
   bc5c8:	f002 ff21 	bl	bf40e <strlen>
   bc5cc:	9901      	ldr	r1, [sp, #4]
   bc5ce:	4602      	mov	r2, r0
   bc5d0:	4620      	mov	r0, r4
}
   bc5d2:	b002      	add	sp, #8
   bc5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bc5d8:	f7ff bf8a 	b.w	bc4f0 <_ZN5spark10JSONWriter5valueEPKcj>

000bc5dc <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bc5dc:	b513      	push	{r0, r1, r4, lr}
   bc5de:	4604      	mov	r4, r0
    write(str, strlen(str));
   bc5e0:	4608      	mov	r0, r1
   bc5e2:	9101      	str	r1, [sp, #4]
   bc5e4:	f002 ff13 	bl	bf40e <strlen>
   bc5e8:	6823      	ldr	r3, [r4, #0]
   bc5ea:	9901      	ldr	r1, [sp, #4]
   bc5ec:	68db      	ldr	r3, [r3, #12]
   bc5ee:	4602      	mov	r2, r0
   bc5f0:	4620      	mov	r0, r4
}
   bc5f2:	b002      	add	sp, #8
   bc5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bc5f8:	4718      	bx	r3

000bc5fa <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bc5fa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bc5fc:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bc5fe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bc602:	68db      	ldr	r3, [r3, #12]
   bc604:	2201      	movs	r2, #1
   bc606:	f10d 0107 	add.w	r1, sp, #7
   bc60a:	4798      	blx	r3
}
   bc60c:	b003      	add	sp, #12
   bc60e:	f85d fb04 	ldr.w	pc, [sp], #4

000bc612 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bc612:	b40e      	push	{r1, r2, r3}
   bc614:	b503      	push	{r0, r1, lr}
   bc616:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bc618:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bc61a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bc61e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bc620:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bc622:	f001 f942 	bl	bd8aa <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bc626:	b002      	add	sp, #8
   bc628:	f85d eb04 	ldr.w	lr, [sp], #4
   bc62c:	b003      	add	sp, #12
   bc62e:	4770      	bx	lr

000bc630 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bc630:	680a      	ldr	r2, [r1, #0]
   bc632:	6002      	str	r2, [r0, #0]
   bc634:	684a      	ldr	r2, [r1, #4]
   bc636:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bc638:	2200      	movs	r2, #0
   bc63a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bc63e:	b510      	push	{r4, lr}
   bc640:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc642:	688c      	ldr	r4, [r1, #8]
   bc644:	6084      	str	r4, [r0, #8]
   bc646:	68cc      	ldr	r4, [r1, #12]
   bc648:	60c4      	str	r4, [r0, #12]
   bc64a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc64c:	608a      	str	r2, [r1, #8]
   bc64e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bc650:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc652:	610a      	str	r2, [r1, #16]
   bc654:	bd10      	pop	{r4, pc}
	...

000bc658 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bc65c:	e9d0 8400 	ldrd	r8, r4, [r0]
   bc660:	f04f 0a14 	mov.w	sl, #20
   bc664:	9300      	str	r3, [sp, #0]
   bc666:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bc66a:	4b18      	ldr	r3, [pc, #96]	; (bc6cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc66c:	10a4      	asrs	r4, r4, #2
   bc66e:	4617      	mov	r7, r2
   bc670:	435c      	muls	r4, r3
   bc672:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bc674:	2c00      	cmp	r4, #0
   bc676:	dd21      	ble.n	bc6bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bc678:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bc67a:	fb0a f006 	mul.w	r0, sl, r6
   bc67e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bc682:	463a      	mov	r2, r7
   bc684:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bc688:	5828      	ldr	r0, [r5, r0]
   bc68a:	9101      	str	r1, [sp, #4]
   bc68c:	455f      	cmp	r7, fp
   bc68e:	bf28      	it	cs
   bc690:	465a      	movcs	r2, fp
   bc692:	f002 fec4 	bl	bf41e <strncmp>
                if (cmp == 0) {
   bc696:	2800      	cmp	r0, #0
   bc698:	9901      	ldr	r1, [sp, #4]
   bc69a:	f04f 0301 	mov.w	r3, #1
   bc69e:	d10b      	bne.n	bc6b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bc6a0:	455f      	cmp	r7, fp
   bc6a2:	d103      	bne.n	bc6ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bc6a4:	9a00      	ldr	r2, [sp, #0]
   bc6a6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc6a8:	4634      	mov	r4, r6
   bc6aa:	e7e3      	b.n	bc674 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bc6ac:	d9fc      	bls.n	bc6a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bc6ae:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bc6b0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bc6b4:	3e01      	subs	r6, #1
   bc6b6:	e7f7      	b.n	bc6a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bc6b8:	dbf9      	blt.n	bc6ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bc6ba:	e7f5      	b.n	bc6a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bc6bc:	eba5 0508 	sub.w	r5, r5, r8
}
   bc6c0:	4802      	ldr	r0, [pc, #8]	; (bc6cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc6c2:	10ad      	asrs	r5, r5, #2
   bc6c4:	4368      	muls	r0, r5
   bc6c6:	b003      	add	sp, #12
   bc6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc6cc:	cccccccd 	.word	0xcccccccd

000bc6d0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc6d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bc6d2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bc6d4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc6d6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bc6d8:	b303      	cbz	r3, bc71c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bc6da:	b1f9      	cbz	r1, bc71c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bc6dc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bc6de:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bc6e2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bc6e4:	a903      	add	r1, sp, #12
   bc6e6:	a801      	add	r0, sp, #4
   bc6e8:	f7ff ff21 	bl	bc52e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bc6ec:	4601      	mov	r1, r0
   bc6ee:	b1a8      	cbz	r0, bc71c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bc6f0:	f10d 030b 	add.w	r3, sp, #11
   bc6f4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bc6f6:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc6fa:	4620      	mov	r0, r4
   bc6fc:	f7ff ffac 	bl	bc658 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bc700:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bc704:	b153      	cbz	r3, bc71c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bc706:	6823      	ldr	r3, [r4, #0]
   bc708:	2414      	movs	r4, #20
   bc70a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bc70e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bc710:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bc714:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bc716:	bfa8      	it	ge
   bc718:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bc71a:	e7e3      	b.n	bc6e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bc71c:	4628      	mov	r0, r5
   bc71e:	b004      	add	sp, #16
   bc720:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc724 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bc724:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bc726:	4c09      	ldr	r4, [pc, #36]	; (bc74c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bc728:	7823      	ldrb	r3, [r4, #0]
   bc72a:	f3bf 8f5b 	dmb	ish
   bc72e:	07db      	lsls	r3, r3, #31
   bc730:	d409      	bmi.n	bc746 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc732:	4620      	mov	r0, r4
   bc734:	f7f7 fcc2 	bl	b40bc <__cxa_guard_acquire>
   bc738:	b128      	cbz	r0, bc746 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc73a:	4620      	mov	r0, r4
   bc73c:	f7f7 fcc3 	bl	b40c6 <__cxa_guard_release>
   bc740:	4803      	ldr	r0, [pc, #12]	; (bc750 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bc742:	f002 fd55 	bl	bf1f0 <atexit>
}
   bc746:	4803      	ldr	r0, [pc, #12]	; (bc754 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bc748:	bd10      	pop	{r4, pc}
   bc74a:	bf00      	nop
   bc74c:	2003e650 	.word	0x2003e650
   bc750:	000bc527 	.word	0x000bc527
   bc754:	2003de24 	.word	0x2003de24

000bc758 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bc758:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bc75a:	4c09      	ldr	r4, [pc, #36]	; (bc780 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bc75c:	7823      	ldrb	r3, [r4, #0]
   bc75e:	f3bf 8f5b 	dmb	ish
   bc762:	07db      	lsls	r3, r3, #31
   bc764:	d409      	bmi.n	bc77a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc766:	4620      	mov	r0, r4
   bc768:	f7f7 fca8 	bl	b40bc <__cxa_guard_acquire>
   bc76c:	b128      	cbz	r0, bc77a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc76e:	4620      	mov	r0, r4
   bc770:	f7f7 fca9 	bl	b40c6 <__cxa_guard_release>
   bc774:	4803      	ldr	r0, [pc, #12]	; (bc784 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bc776:	f002 fd3b 	bl	bf1f0 <atexit>
    return &factory;
}
   bc77a:	4803      	ldr	r0, [pc, #12]	; (bc788 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bc77c:	bd10      	pop	{r4, pc}
   bc77e:	bf00      	nop
   bc780:	2003e654 	.word	0x2003e654
   bc784:	000bc58f 	.word	0x000bc58f
   bc788:	2003de28 	.word	0x2003de28

000bc78c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bc78c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bc78e:	2500      	movs	r5, #0
   bc790:	4604      	mov	r4, r0
   bc792:	e9c0 5500 	strd	r5, r5, [r0]
   bc796:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc79a:	6085      	str	r5, [r0, #8]
   bc79c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bc79e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bc7a2:	f7fe f9cf 	bl	bab44 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bc7a6:	f7ff ffbd 	bl	bc724 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bc7aa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc7ac:	f7ff ffd4 	bl	bc758 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bc7b0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc7b2:	6220      	str	r0, [r4, #32]
}
   bc7b4:	4620      	mov	r0, r4
   bc7b6:	bd38      	pop	{r3, r4, r5, pc}

000bc7b8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bc7b8:	b510      	push	{r4, lr}
    static LogManager mgr;
   bc7ba:	4c0a      	ldr	r4, [pc, #40]	; (bc7e4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bc7bc:	7823      	ldrb	r3, [r4, #0]
   bc7be:	f3bf 8f5b 	dmb	ish
   bc7c2:	07db      	lsls	r3, r3, #31
   bc7c4:	d40c      	bmi.n	bc7e0 <_ZN5spark10LogManager8instanceEv+0x28>
   bc7c6:	4620      	mov	r0, r4
   bc7c8:	f7f7 fc78 	bl	b40bc <__cxa_guard_acquire>
   bc7cc:	b140      	cbz	r0, bc7e0 <_ZN5spark10LogManager8instanceEv+0x28>
   bc7ce:	4806      	ldr	r0, [pc, #24]	; (bc7e8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc7d0:	f7ff ffdc 	bl	bc78c <_ZN5spark10LogManagerC1Ev>
   bc7d4:	4620      	mov	r0, r4
   bc7d6:	f7f7 fc76 	bl	b40c6 <__cxa_guard_release>
   bc7da:	4804      	ldr	r0, [pc, #16]	; (bc7ec <_ZN5spark10LogManager8instanceEv+0x34>)
   bc7dc:	f002 fd08 	bl	bf1f0 <atexit>
    return &mgr;
}
   bc7e0:	4801      	ldr	r0, [pc, #4]	; (bc7e8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc7e2:	bd10      	pop	{r4, pc}
   bc7e4:	2003e64c 	.word	0x2003e64c
   bc7e8:	2003e65c 	.word	0x2003e65c
   bc7ec:	000bcca5 	.word	0x000bcca5

000bc7f0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bc7f0:	4a02      	ldr	r2, [pc, #8]	; (bc7fc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bc7f2:	4903      	ldr	r1, [pc, #12]	; (bc800 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bc7f4:	4803      	ldr	r0, [pc, #12]	; (bc804 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bc7f6:	2300      	movs	r3, #0
   bc7f8:	f7fe bc34 	b.w	bb064 <log_set_callbacks>
   bc7fc:	000bca89 	.word	0x000bca89
   bc800:	000bca15 	.word	0x000bca15
   bc804:	000bc995 	.word	0x000bc995

000bc808 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bc808:	2300      	movs	r3, #0
   bc80a:	461a      	mov	r2, r3
   bc80c:	4619      	mov	r1, r3
   bc80e:	4618      	mov	r0, r3
   bc810:	f7fe bc28 	b.w	bb064 <log_set_callbacks>

000bc814 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bc814:	b570      	push	{r4, r5, r6, lr}
   bc816:	b08a      	sub	sp, #40	; 0x28
   bc818:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bc81a:	4601      	mov	r1, r0
   bc81c:	a804      	add	r0, sp, #16
   bc81e:	f7fb fa59 	bl	b7cd4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bc822:	4e14      	ldr	r6, [pc, #80]	; (bc874 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bc824:	a804      	add	r0, sp, #16
   bc826:	f7ff fd9b 	bl	bc360 <_ZN5spark18JSONObjectIterator4nextEv>
   bc82a:	b1e8      	cbz	r0, bc868 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bc82c:	a904      	add	r1, sp, #16
   bc82e:	4668      	mov	r0, sp
   bc830:	f7fb fa61 	bl	b7cf6 <_ZNK5spark18JSONObjectIterator4nameEv>
   bc834:	9802      	ldr	r0, [sp, #8]
   bc836:	4631      	mov	r1, r6
   bc838:	f7ff fea2 	bl	bc580 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bc83c:	4604      	mov	r4, r0
   bc83e:	b110      	cbz	r0, bc846 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bc840:	1e2c      	subs	r4, r5, #0
   bc842:	bf18      	it	ne
   bc844:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bc846:	a801      	add	r0, sp, #4
   bc848:	f7f8 fdcc 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc84c:	2c00      	cmp	r4, #0
   bc84e:	d0e9      	beq.n	bc824 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bc850:	a904      	add	r1, sp, #16
   bc852:	4668      	mov	r0, sp
   bc854:	f7fb fa60 	bl	b7d18 <_ZNK5spark18JSONObjectIterator5valueEv>
   bc858:	4668      	mov	r0, sp
   bc85a:	f7ff fd24 	bl	bc2a6 <_ZNK5spark9JSONValue5toIntEv>
   bc85e:	6028      	str	r0, [r5, #0]
   bc860:	a801      	add	r0, sp, #4
   bc862:	f7f8 fdbf 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc866:	e7dd      	b.n	bc824 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bc868:	a805      	add	r0, sp, #20
   bc86a:	f7f8 fdbb 	bl	b53e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc86e:	b00a      	add	sp, #40	; 0x28
   bc870:	bd70      	pop	{r4, r5, r6, pc}
   bc872:	bf00      	nop
   bc874:	000c0d0e 	.word	0x000c0d0e

000bc878 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc878:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc87a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bc87c:	4620      	mov	r0, r4
   bc87e:	4913      	ldr	r1, [pc, #76]	; (bc8cc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc880:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bc882:	f002 fd94 	bl	bf3ae <strcmp>
   bc886:	b950      	cbnz	r0, bc89e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bc888:	f001 fda8 	bl	be3dc <_Z16_fetch_usbserialv>
   bc88c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bc890:	f001 fd94 	bl	be3bc <_ZN9USBSerial5beginEl>
}
   bc894:	b003      	add	sp, #12
   bc896:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bc89a:	f001 bd9f 	b.w	be3dc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bc89e:	490c      	ldr	r1, [pc, #48]	; (bc8d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bc8a0:	4620      	mov	r0, r4
   bc8a2:	f002 fd84 	bl	bf3ae <strcmp>
   bc8a6:	b978      	cbnz	r0, bc8c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bc8a8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bc8ac:	a901      	add	r1, sp, #4
   bc8ae:	4628      	mov	r0, r5
        int baud = 9600;
   bc8b0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bc8b2:	f7ff ffaf 	bl	bc814 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bc8b6:	f001 ff8f 	bl	be7d8 <_Z22__fetch_global_Serial1v>
   bc8ba:	9901      	ldr	r1, [sp, #4]
   bc8bc:	f001 fd26 	bl	be30c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bc8c0:	f001 ff8a 	bl	be7d8 <_Z22__fetch_global_Serial1v>
}
   bc8c4:	b003      	add	sp, #12
   bc8c6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bc8c8:	2000      	movs	r0, #0
   bc8ca:	e7fb      	b.n	bc8c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bc8cc:	000c0d13 	.word	0x000c0d13
   bc8d0:	000c0d1a 	.word	0x000c0d1a

000bc8d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc8d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc8d6:	e9d0 5300 	ldrd	r5, r3, [r0]
   bc8da:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc8dc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc8de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc8e2:	42ae      	cmp	r6, r5
   bc8e4:	d005      	beq.n	bc8f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bc8e6:	f105 0008 	add.w	r0, r5, #8
   bc8ea:	f7ff fff3 	bl	bc8d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc8ee:	3514      	adds	r5, #20
   bc8f0:	e7f7      	b.n	bc8e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bc8f2:	6820      	ldr	r0, [r4, #0]
   bc8f4:	f7fe fd0c 	bl	bb310 <free>
}
   bc8f8:	4620      	mov	r0, r4
   bc8fa:	bd70      	pop	{r4, r5, r6, pc}

000bc8fc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bc8fc:	b510      	push	{r4, lr}
   bc8fe:	4604      	mov	r4, r0
   bc900:	300c      	adds	r0, #12
   bc902:	f7ff ffe7 	bl	bc8d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc906:	4620      	mov	r0, r4
   bc908:	f7fe fda5 	bl	bb456 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bc90c:	4620      	mov	r0, r4
   bc90e:	bd10      	pop	{r4, pc}

000bc910 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bc910:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bc912:	4b04      	ldr	r3, [pc, #16]	; (bc924 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bc914:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bc916:	f840 3b04 	str.w	r3, [r0], #4
   bc91a:	f7ff ffef 	bl	bc8fc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bc91e:	4620      	mov	r0, r4
   bc920:	bd10      	pop	{r4, pc}
   bc922:	bf00      	nop
   bc924:	000c009c 	.word	0x000c009c

000bc928 <_ZN5spark16StreamLogHandlerD0Ev>:
   bc928:	b510      	push	{r4, lr}
   bc92a:	4604      	mov	r4, r0
   bc92c:	f7ff fff0 	bl	bc910 <_ZN5spark16StreamLogHandlerD1Ev>
   bc930:	4620      	mov	r0, r4
   bc932:	2124      	movs	r1, #36	; 0x24
   bc934:	f7f7 fbb3 	bl	b409e <_ZdlPvj>
   bc938:	4620      	mov	r0, r4
   bc93a:	bd10      	pop	{r4, pc}

000bc93c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bc93c:	b510      	push	{r4, lr}
   bc93e:	4b03      	ldr	r3, [pc, #12]	; (bc94c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bc940:	6003      	str	r3, [r0, #0]
   bc942:	4604      	mov	r4, r0
   bc944:	f7ff ffe4 	bl	bc910 <_ZN5spark16StreamLogHandlerD1Ev>
   bc948:	4620      	mov	r0, r4
   bc94a:	bd10      	pop	{r4, pc}
   bc94c:	000c0db0 	.word	0x000c0db0

000bc950 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bc950:	b510      	push	{r4, lr}
   bc952:	4604      	mov	r4, r0
   bc954:	f7ff fff2 	bl	bc93c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bc958:	4620      	mov	r0, r4
   bc95a:	2124      	movs	r1, #36	; 0x24
   bc95c:	f7f7 fb9f 	bl	b409e <_ZdlPvj>
   bc960:	4620      	mov	r0, r4
   bc962:	bd10      	pop	{r4, pc}

000bc964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bc964:	2200      	movs	r2, #0
   bc966:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bc96a:	b510      	push	{r4, lr}
        capacity_(0) {
   bc96c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bc96e:	680c      	ldr	r4, [r1, #0]
   bc970:	6004      	str	r4, [r0, #0]
   bc972:	684c      	ldr	r4, [r1, #4]
   bc974:	6044      	str	r4, [r0, #4]
   bc976:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc978:	600a      	str	r2, [r1, #0]
   bc97a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc97c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc97e:	608a      	str	r2, [r1, #8]
}
   bc980:	bd10      	pop	{r4, pc}

000bc982 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bc982:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bc984:	6803      	ldr	r3, [r0, #0]
   bc986:	4604      	mov	r4, r0
   bc988:	6818      	ldr	r0, [r3, #0]
   bc98a:	f7fe f8f3 	bl	bab74 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bc98e:	4620      	mov	r0, r4
   bc990:	bd10      	pop	{r4, pc}
	...

000bc994 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bc994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc998:	b087      	sub	sp, #28
   bc99a:	4680      	mov	r8, r0
   bc99c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bc99e:	4b1c      	ldr	r3, [pc, #112]	; (bca10 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bc9a0:	685b      	ldr	r3, [r3, #4]
   bc9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc9a6:	4689      	mov	r9, r1
   bc9a8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bc9aa:	b96b      	cbnz	r3, bc9c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bc9ac:	f7ff ff04 	bl	bc7b8 <_ZN5spark10LogManager8instanceEv>
   bc9b0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bc9b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bc9b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bc9b8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bc9ba:	f7ff fddf 	bl	bc57c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bc9be:	7b23      	ldrb	r3, [r4, #12]
   bc9c0:	b12b      	cbz	r3, bc9ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bc9c2:	a805      	add	r0, sp, #20
   bc9c4:	f7ff ffdd 	bl	bc982 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bc9c8:	b007      	add	sp, #28
   bc9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bc9ce:	2301      	movs	r3, #1
   bc9d0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bc9d2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bc9d6:	fa5f f989 	uxtb.w	r9, r9
   bc9da:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bc9de:	45aa      	cmp	sl, r5
   bc9e0:	d012      	beq.n	bca08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bc9e2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bc9e6:	4631      	mov	r1, r6
   bc9e8:	1d38      	adds	r0, r7, #4
   bc9ea:	f7ff fe71 	bl	bc6d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bc9ee:	4581      	cmp	r9, r0
   bc9f0:	d3f5      	bcc.n	bc9de <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bc9f2:	683b      	ldr	r3, [r7, #0]
   bc9f4:	9a03      	ldr	r2, [sp, #12]
   bc9f6:	9200      	str	r2, [sp, #0]
   bc9f8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bc9fc:	464a      	mov	r2, r9
   bc9fe:	4633      	mov	r3, r6
   bca00:	4641      	mov	r1, r8
   bca02:	4638      	mov	r0, r7
   bca04:	47d8      	blx	fp
   bca06:	e7ea      	b.n	bc9de <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bca08:	2300      	movs	r3, #0
   bca0a:	7323      	strb	r3, [r4, #12]
   bca0c:	e7d9      	b.n	bc9c2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bca0e:	bf00      	nop
   bca10:	e000ed00 	.word	0xe000ed00

000bca14 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bca14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bca18:	469b      	mov	fp, r3
   bca1a:	4b1a      	ldr	r3, [pc, #104]	; (bca84 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bca1c:	685b      	ldr	r3, [r3, #4]
   bca1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bca22:	4680      	mov	r8, r0
   bca24:	4689      	mov	r9, r1
   bca26:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bca28:	b96b      	cbnz	r3, bca46 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bca2a:	f7ff fec5 	bl	bc7b8 <_ZN5spark10LogManager8instanceEv>
   bca2e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bca30:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bca34:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bca36:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bca38:	f7ff fda0 	bl	bc57c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bca3c:	7b23      	ldrb	r3, [r4, #12]
   bca3e:	b12b      	cbz	r3, bca4c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bca40:	a801      	add	r0, sp, #4
   bca42:	f7ff ff9e 	bl	bc982 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bca46:	b003      	add	sp, #12
   bca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bca4c:	2301      	movs	r3, #1
   bca4e:	7323      	strb	r3, [r4, #12]
   bca50:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bca54:	b2f6      	uxtb	r6, r6
   bca56:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bca5a:	4555      	cmp	r5, sl
   bca5c:	d00e      	beq.n	bca7c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bca5e:	f855 7b04 	ldr.w	r7, [r5], #4
   bca62:	4659      	mov	r1, fp
   bca64:	1d38      	adds	r0, r7, #4
   bca66:	f7ff fe33 	bl	bc6d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bca6a:	4286      	cmp	r6, r0
   bca6c:	d3f5      	bcc.n	bca5a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bca6e:	683b      	ldr	r3, [r7, #0]
   bca70:	464a      	mov	r2, r9
   bca72:	68db      	ldr	r3, [r3, #12]
   bca74:	4641      	mov	r1, r8
   bca76:	4638      	mov	r0, r7
   bca78:	4798      	blx	r3
   bca7a:	e7ee      	b.n	bca5a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bca7c:	2300      	movs	r3, #0
   bca7e:	7323      	strb	r3, [r4, #12]
   bca80:	e7de      	b.n	bca40 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bca82:	bf00      	nop
   bca84:	e000ed00 	.word	0xe000ed00

000bca88 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bca88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bca8c:	4b16      	ldr	r3, [pc, #88]	; (bcae8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bca8e:	685b      	ldr	r3, [r3, #4]
   bca90:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bca94:	4605      	mov	r5, r0
   bca96:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bca98:	bb1b      	cbnz	r3, bcae2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bca9a:	f7ff fe8d 	bl	bc7b8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bca9e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bcaa2:	4604      	mov	r4, r0
   bcaa4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcaa6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bcaa8:	f7ff fd68 	bl	bc57c <_ZN14RecursiveMutex4lockEv.isra.0>
   bcaac:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bcab0:	2446      	movs	r4, #70	; 0x46
   bcab2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bcab6:	45b0      	cmp	r8, r6
   bcab8:	d109      	bne.n	bcace <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bcaba:	a801      	add	r0, sp, #4
   bcabc:	f7ff ff61 	bl	bc982 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bcac0:	42a5      	cmp	r5, r4
   bcac2:	bfb4      	ite	lt
   bcac4:	2000      	movlt	r0, #0
   bcac6:	2001      	movge	r0, #1
}
   bcac8:	b002      	add	sp, #8
   bcaca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bcace:	f856 0b04 	ldr.w	r0, [r6], #4
   bcad2:	4639      	mov	r1, r7
   bcad4:	3004      	adds	r0, #4
   bcad6:	f7ff fdfb 	bl	bc6d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bcada:	4284      	cmp	r4, r0
   bcadc:	bfa8      	it	ge
   bcade:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bcae0:	e7e9      	b.n	bcab6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bcae2:	2000      	movs	r0, #0
   bcae4:	e7f0      	b.n	bcac8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bcae6:	bf00      	nop
   bcae8:	e000ed00 	.word	0xe000ed00

000bcaec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bcaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcaee:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bcaf2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bcaf4:	4604      	mov	r4, r0
   bcaf6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcaf8:	db0d      	blt.n	bcb16 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bcafa:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bcafc:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bcafe:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bcb00:	dd04      	ble.n	bcb0c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bcb02:	00b9      	lsls	r1, r7, #2
   bcb04:	f7fe fc0c 	bl	bb320 <realloc>
            if (!d) {
   bcb08:	b918      	cbnz	r0, bcb12 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bcb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bcb0c:	f7fe fc00 	bl	bb310 <free>
        T* d = nullptr;
   bcb10:	2000      	movs	r0, #0
        data_ = d;
   bcb12:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bcb14:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bcb16:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bcb18:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bcb1a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bcb1e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bcb20:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bcb24:	1d08      	adds	r0, r1, #4
   bcb26:	f002 fb9d 	bl	bf264 <memmove>
    new(p) T(std::move(value));
   bcb2a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bcb2e:	6863      	ldr	r3, [r4, #4]
   bcb30:	3301      	adds	r3, #1
   bcb32:	6063      	str	r3, [r4, #4]
    return true;
   bcb34:	2001      	movs	r0, #1
   bcb36:	e7e8      	b.n	bcb0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bcb38 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bcb38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bcb3a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bcb3e:	4604      	mov	r4, r0
   bcb40:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcb42:	9301      	str	r3, [sp, #4]
   bcb44:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bcb46:	f7ff fd19 	bl	bc57c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bcb4a:	e9d4 3200 	ldrd	r3, r2, [r4]
   bcb4e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bcb52:	4293      	cmp	r3, r2
   bcb54:	4619      	mov	r1, r3
   bcb56:	d00b      	beq.n	bcb70 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bcb58:	6809      	ldr	r1, [r1, #0]
   bcb5a:	42a9      	cmp	r1, r5
   bcb5c:	f103 0304 	add.w	r3, r3, #4
   bcb60:	d1f7      	bne.n	bcb52 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bcb62:	a801      	add	r0, sp, #4
   bcb64:	f7ff ff0d 	bl	bc982 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bcb68:	2500      	movs	r5, #0
}
   bcb6a:	4628      	mov	r0, r5
   bcb6c:	b003      	add	sp, #12
   bcb6e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bcb70:	4629      	mov	r1, r5
   bcb72:	4620      	mov	r0, r4
   bcb74:	f7ff ffba 	bl	bcaec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bcb78:	4605      	mov	r5, r0
   bcb7a:	2800      	cmp	r0, #0
   bcb7c:	d0f1      	beq.n	bcb62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bcb7e:	6863      	ldr	r3, [r4, #4]
   bcb80:	2b01      	cmp	r3, #1
   bcb82:	d101      	bne.n	bcb88 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bcb84:	f7ff fe34 	bl	bc7f0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bcb88:	a801      	add	r0, sp, #4
   bcb8a:	f7ff fefa 	bl	bc982 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bcb8e:	e7ec      	b.n	bcb6a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bcb90 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bcb90:	b570      	push	{r4, r5, r6, lr}
   bcb92:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bcb94:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bcb98:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bcb9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bcb9e:	4282      	cmp	r2, r0
   bcba0:	d00f      	beq.n	bcbc2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bcba2:	4601      	mov	r1, r0
            if (*p == value) {
   bcba4:	681d      	ldr	r5, [r3, #0]
   bcba6:	f851 6b04 	ldr.w	r6, [r1], #4
   bcbaa:	42ae      	cmp	r6, r5
   bcbac:	d107      	bne.n	bcbbe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bcbae:	1a52      	subs	r2, r2, r1
   bcbb0:	f002 fb58 	bl	bf264 <memmove>
    --size_;
   bcbb4:	6863      	ldr	r3, [r4, #4]
   bcbb6:	3b01      	subs	r3, #1
   bcbb8:	6063      	str	r3, [r4, #4]
    return true;
   bcbba:	2001      	movs	r0, #1
}
   bcbbc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bcbbe:	4608      	mov	r0, r1
   bcbc0:	e7ed      	b.n	bcb9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bcbc2:	2000      	movs	r0, #0
   bcbc4:	e7fa      	b.n	bcbbc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bcbc6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bcbc6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bcbc8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bcbcc:	4604      	mov	r4, r0
   bcbce:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bcbd0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcbd2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bcbd4:	f7ff fcd2 	bl	bc57c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bcbd8:	a901      	add	r1, sp, #4
   bcbda:	4620      	mov	r0, r4
   bcbdc:	f7ff ffd8 	bl	bcb90 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bcbe0:	b118      	cbz	r0, bcbea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bcbe2:	6863      	ldr	r3, [r4, #4]
   bcbe4:	b90b      	cbnz	r3, bcbea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bcbe6:	f7ff fe0f 	bl	bc808 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bcbea:	a803      	add	r0, sp, #12
   bcbec:	f7ff fec9 	bl	bc982 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bcbf0:	b004      	add	sp, #16
   bcbf2:	bd10      	pop	{r4, pc}

000bcbf4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bcbf4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bcbf6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bcbfa:	2318      	movs	r3, #24
   bcbfc:	4604      	mov	r4, r0
   bcbfe:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bcc02:	42ae      	cmp	r6, r5
   bcc04:	d015      	beq.n	bcc32 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bcc06:	f105 0110 	add.w	r1, r5, #16
   bcc0a:	4620      	mov	r0, r4
   bcc0c:	f7ff ffc0 	bl	bcb90 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bcc10:	6863      	ldr	r3, [r4, #4]
   bcc12:	b90b      	cbnz	r3, bcc18 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bcc14:	f7ff fdf8 	bl	bc808 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bcc18:	69e0      	ldr	r0, [r4, #28]
   bcc1a:	6929      	ldr	r1, [r5, #16]
   bcc1c:	6803      	ldr	r3, [r0, #0]
   bcc1e:	68db      	ldr	r3, [r3, #12]
   bcc20:	4798      	blx	r3
        if (h.stream) {
   bcc22:	6969      	ldr	r1, [r5, #20]
   bcc24:	b119      	cbz	r1, bcc2e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bcc26:	6a20      	ldr	r0, [r4, #32]
   bcc28:	6803      	ldr	r3, [r0, #0]
   bcc2a:	68db      	ldr	r3, [r3, #12]
   bcc2c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bcc2e:	3518      	adds	r5, #24
   bcc30:	e7e7      	b.n	bcc02 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bcc32:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bcc36:	2618      	movs	r6, #24
   bcc38:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bcc3c:	42ae      	cmp	r6, r5
   bcc3e:	d004      	beq.n	bcc4a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bcc40:	4628      	mov	r0, r5
   bcc42:	f000 ff47 	bl	bdad4 <_ZN6StringD1Ev>
   bcc46:	3518      	adds	r5, #24
   bcc48:	e7f8      	b.n	bcc3c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bcc4a:	2300      	movs	r3, #0
   bcc4c:	6163      	str	r3, [r4, #20]
}
   bcc4e:	bd70      	pop	{r4, r5, r6, pc}

000bcc50 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bcc50:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bcc52:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bcc54:	f7ff fdd8 	bl	bc808 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bcc58:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bcc5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcc5e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bcc60:	f7ff fc8c 	bl	bc57c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bcc64:	4620      	mov	r0, r4
   bcc66:	f7ff ffc5 	bl	bcbf4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bcc6a:	a801      	add	r0, sp, #4
   bcc6c:	f7ff fe89 	bl	bc982 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bcc70:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bcc72:	b108      	cbz	r0, bcc78 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bcc74:	f7fd ff6e 	bl	bab54 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bcc78:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bcc7c:	2618      	movs	r6, #24
   bcc7e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bcc82:	42ae      	cmp	r6, r5
   bcc84:	d004      	beq.n	bcc90 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bcc86:	4628      	mov	r0, r5
   bcc88:	f000 ff24 	bl	bdad4 <_ZN6StringD1Ev>
   bcc8c:	3518      	adds	r5, #24
   bcc8e:	e7f8      	b.n	bcc82 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bcc90:	6920      	ldr	r0, [r4, #16]
   bcc92:	f7fe fb3d 	bl	bb310 <free>
   bcc96:	6820      	ldr	r0, [r4, #0]
   bcc98:	f7fe fb3a 	bl	bb310 <free>
}
   bcc9c:	4620      	mov	r0, r4
   bcc9e:	b002      	add	sp, #8
   bcca0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bcca4 <__tcf_2>:
    static LogManager mgr;
   bcca4:	4801      	ldr	r0, [pc, #4]	; (bccac <__tcf_2+0x8>)
   bcca6:	f7ff bfd3 	b.w	bcc50 <_ZN5spark10LogManagerD1Ev>
   bccaa:	bf00      	nop
   bccac:	2003e65c 	.word	0x2003e65c

000bccb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bccb0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bccb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bccb4:	4604      	mov	r4, r0
   bccb6:	460d      	mov	r5, r1
   bccb8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bccba:	d915      	bls.n	bcce8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bccbc:	4290      	cmp	r0, r2
   bccbe:	d214      	bcs.n	bccea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bccc0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bccc4:	1a75      	subs	r5, r6, r1
   bccc6:	f1a1 0714 	sub.w	r7, r1, #20
   bccca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bcccc:	42b7      	cmp	r7, r6
   bccce:	d01a      	beq.n	bcd06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bccd0:	b11c      	cbz	r4, bccda <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bccd2:	4631      	mov	r1, r6
   bccd4:	4620      	mov	r0, r4
   bccd6:	f7ff fcab 	bl	bc630 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bccda:	f106 0008 	add.w	r0, r6, #8
   bccde:	f7ff fdf9 	bl	bc8d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bcce2:	3e14      	subs	r6, #20
   bcce4:	3c14      	subs	r4, #20
   bcce6:	e7f1      	b.n	bcccc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bcce8:	d00d      	beq.n	bcd06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bccea:	42b5      	cmp	r5, r6
   bccec:	d00b      	beq.n	bcd06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bccee:	b11c      	cbz	r4, bccf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bccf0:	4629      	mov	r1, r5
   bccf2:	4620      	mov	r0, r4
   bccf4:	f7ff fc9c 	bl	bc630 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bccf8:	f105 0008 	add.w	r0, r5, #8
   bccfc:	f7ff fdea 	bl	bc8d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bcd00:	3514      	adds	r5, #20
   bcd02:	3414      	adds	r4, #20
   bcd04:	e7f1      	b.n	bccea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bcd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcd08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bcd08:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bcd0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcd0c:	4604      	mov	r4, r0
   bcd0e:	460d      	mov	r5, r1
   bcd10:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bcd12:	d914      	bls.n	bcd3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bcd14:	4290      	cmp	r0, r2
   bcd16:	d213      	bcs.n	bcd40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bcd18:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bcd1c:	1a75      	subs	r5, r6, r1
   bcd1e:	f1a1 0710 	sub.w	r7, r1, #16
   bcd22:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bcd24:	42b7      	cmp	r7, r6
   bcd26:	d018      	beq.n	bcd5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bcd28:	b11c      	cbz	r4, bcd32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bcd2a:	4631      	mov	r1, r6
   bcd2c:	4620      	mov	r0, r4
   bcd2e:	f000 ff4d 	bl	bdbcc <_ZN6StringC1EOS_>
                end->~T();
   bcd32:	4630      	mov	r0, r6
   bcd34:	f000 fece 	bl	bdad4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bcd38:	3e10      	subs	r6, #16
   bcd3a:	3c10      	subs	r4, #16
   bcd3c:	e7f2      	b.n	bcd24 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bcd3e:	d00c      	beq.n	bcd5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bcd40:	42b5      	cmp	r5, r6
   bcd42:	d00a      	beq.n	bcd5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bcd44:	b11c      	cbz	r4, bcd4e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bcd46:	4629      	mov	r1, r5
   bcd48:	4620      	mov	r0, r4
   bcd4a:	f000 ff3f 	bl	bdbcc <_ZN6StringC1EOS_>
                p->~T();
   bcd4e:	4628      	mov	r0, r5
   bcd50:	f000 fec0 	bl	bdad4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bcd54:	3510      	adds	r5, #16
   bcd56:	3410      	adds	r4, #16
   bcd58:	e7f2      	b.n	bcd40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bcd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcd5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bcd5c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bcd5e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bcd60:	4605      	mov	r5, r0
        if (n > 0) {
   bcd62:	dd11      	ble.n	bcd88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bcd64:	0130      	lsls	r0, r6, #4
   bcd66:	f7fe facb 	bl	bb300 <malloc>
            if (!d) {
   bcd6a:	4604      	mov	r4, r0
   bcd6c:	b158      	cbz	r0, bcd86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bcd6e:	e9d5 1200 	ldrd	r1, r2, [r5]
   bcd72:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bcd76:	f7ff ffc7 	bl	bcd08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bcd7a:	6828      	ldr	r0, [r5, #0]
   bcd7c:	f7fe fac8 	bl	bb310 <free>
        data_ = d;
   bcd80:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bcd82:	60ae      	str	r6, [r5, #8]
        return true;
   bcd84:	2001      	movs	r0, #1
    }
   bcd86:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bcd88:	2400      	movs	r4, #0
   bcd8a:	e7f6      	b.n	bcd7a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bcd8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bcd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd90:	4690      	mov	r8, r2
   bcd92:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bcd94:	2300      	movs	r3, #0
   bcd96:	9103      	str	r1, [sp, #12]
    return size_;
   bcd98:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bcd9c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bcd9e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bcda0:	4299      	cmp	r1, r3
        capacity_(0) {
   bcda2:	e9c0 3300 	strd	r3, r3, [r0]
   bcda6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bcdaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bcdae:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bcdb2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bcdb4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bcdb6:	dc23      	bgt.n	bce00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bcdb8:	e9d8 5700 	ldrd	r5, r7, [r8]
   bcdbc:	2314      	movs	r3, #20
   bcdbe:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bcdc2:	42af      	cmp	r7, r5
   bcdc4:	d03b      	beq.n	bce3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bcdc6:	4629      	mov	r1, r5
   bcdc8:	a80b      	add	r0, sp, #44	; 0x2c
   bcdca:	f000 feff 	bl	bdbcc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bcdce:	a90b      	add	r1, sp, #44	; 0x2c
   bcdd0:	a80f      	add	r0, sp, #60	; 0x3c
   bcdd2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bcdd4:	f000 fefa 	bl	bdbcc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcdd8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bcddc:	4299      	cmp	r1, r3
   bcdde:	da1b      	bge.n	bce18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bcde0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bcde2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bcde4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bcde8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bcdec:	4631      	mov	r1, r6
   bcdee:	f106 0010 	add.w	r0, r6, #16
   bcdf2:	f7ff ff89 	bl	bcd08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bcdf6:	b9ee      	cbnz	r6, bce34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bcdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bcdfa:	3301      	adds	r3, #1
   bcdfc:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bcdfe:	e011      	b.n	bce24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bce00:	a808      	add	r0, sp, #32
   bce02:	f7ff ffab 	bl	bcd5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bce06:	2800      	cmp	r0, #0
   bce08:	d1d6      	bne.n	bcdb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bce0a:	a808      	add	r0, sp, #32
   bce0c:	f7fe fb23 	bl	bb456 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bce10:	4620      	mov	r0, r4
   bce12:	b015      	add	sp, #84	; 0x54
   bce14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bce18:	3101      	adds	r1, #1
   bce1a:	a808      	add	r0, sp, #32
   bce1c:	f7ff ff9e 	bl	bcd5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bce20:	2800      	cmp	r0, #0
   bce22:	d1dd      	bne.n	bcde0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bce24:	a80f      	add	r0, sp, #60	; 0x3c
   bce26:	f000 fe55 	bl	bdad4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bce2a:	a80b      	add	r0, sp, #44	; 0x2c
   bce2c:	f000 fe52 	bl	bdad4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bce30:	3514      	adds	r5, #20
   bce32:	e7c6      	b.n	bcdc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bce34:	a90f      	add	r1, sp, #60	; 0x3c
   bce36:	4630      	mov	r0, r6
   bce38:	f000 fec8 	bl	bdbcc <_ZN6StringC1EOS_>
   bce3c:	e7dc      	b.n	bcdf8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bce3e:	2600      	movs	r6, #0
   bce40:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bce44:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bce46:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bce4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bce4e:	429e      	cmp	r6, r3
   bce50:	da7c      	bge.n	bcf4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bce52:	0133      	lsls	r3, r6, #4
   bce54:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bce56:	9306      	str	r3, [sp, #24]
        if (!category) {
   bce58:	b90b      	cbnz	r3, bce5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bce5a:	3601      	adds	r6, #1
   bce5c:	e7f5      	b.n	bce4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bce5e:	2300      	movs	r3, #0
   bce60:	9307      	str	r3, [sp, #28]
   bce62:	fb09 f306 	mul.w	r3, r9, r6
   bce66:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bce68:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bce6a:	a907      	add	r1, sp, #28
   bce6c:	a806      	add	r0, sp, #24
   bce6e:	f7ff fb5e 	bl	bc52e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bce72:	4682      	mov	sl, r0
   bce74:	2800      	cmp	r0, #0
   bce76:	d0f0      	beq.n	bce5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bce78:	f04f 0300 	mov.w	r3, #0
   bce7c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bce80:	4601      	mov	r1, r0
   bce82:	9a07      	ldr	r2, [sp, #28]
   bce84:	f10d 0317 	add.w	r3, sp, #23
   bce88:	4628      	mov	r0, r5
   bce8a:	f7ff fbe5 	bl	bc658 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bce8e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bce92:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bce94:	2f00      	cmp	r7, #0
   bce96:	d14a      	bne.n	bcf2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bce98:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bce9c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bcea0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bcea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bcea8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bceac:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bceb0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bceb2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bceb6:	4293      	cmp	r3, r2
   bceb8:	db17      	blt.n	bceea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bceba:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bcebe:	f1ba 0f00 	cmp.w	sl, #0
   bcec2:	dd30      	ble.n	bcf26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bcec4:	fb09 f00a 	mul.w	r0, r9, sl
   bcec8:	f7fe fa1a 	bl	bb300 <malloc>
            if (!d) {
   bcecc:	4683      	mov	fp, r0
   bcece:	b360      	cbz	r0, bcf2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bced0:	e9d5 1200 	ldrd	r1, r2, [r5]
   bced4:	fb09 1202 	mla	r2, r9, r2, r1
   bced8:	f7ff feea 	bl	bccb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bcedc:	6828      	ldr	r0, [r5, #0]
   bcede:	f7fe fa17 	bl	bb310 <free>
        data_ = d;
   bcee2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bcee6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bceea:	682b      	ldr	r3, [r5, #0]
   bceec:	9a01      	ldr	r2, [sp, #4]
   bceee:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bcef2:	686a      	ldr	r2, [r5, #4]
   bcef4:	4651      	mov	r1, sl
   bcef6:	fb09 3202 	mla	r2, r9, r2, r3
   bcefa:	f10a 0014 	add.w	r0, sl, #20
   bcefe:	f7ff fed7 	bl	bccb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bcf02:	f1ba 0f00 	cmp.w	sl, #0
   bcf06:	d003      	beq.n	bcf10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bcf08:	a90f      	add	r1, sp, #60	; 0x3c
   bcf0a:	4650      	mov	r0, sl
   bcf0c:	f7ff fb90 	bl	bc630 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bcf10:	686b      	ldr	r3, [r5, #4]
   bcf12:	3301      	adds	r3, #1
   bcf14:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bcf16:	a811      	add	r0, sp, #68	; 0x44
   bcf18:	f7ff fcdc 	bl	bc8d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bcf1c:	b13f      	cbz	r7, bcf2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bcf1e:	a80b      	add	r0, sp, #44	; 0x2c
   bcf20:	f7ff fcd8 	bl	bc8d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bcf24:	e771      	b.n	bce0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bcf26:	46bb      	mov	fp, r7
   bcf28:	e7d8      	b.n	bcedc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bcf2a:	2701      	movs	r7, #1
   bcf2c:	e7f3      	b.n	bcf16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bcf2e:	9b01      	ldr	r3, [sp, #4]
   bcf30:	682d      	ldr	r5, [r5, #0]
   bcf32:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bcf36:	9b06      	ldr	r3, [sp, #24]
   bcf38:	781b      	ldrb	r3, [r3, #0]
   bcf3a:	b92b      	cbnz	r3, bcf48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bcf3c:	f8d8 3000 	ldr.w	r3, [r8]
   bcf40:	9a02      	ldr	r2, [sp, #8]
   bcf42:	4413      	add	r3, r2
   bcf44:	7c1b      	ldrb	r3, [r3, #16]
   bcf46:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bcf48:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bcf4a:	e78e      	b.n	bce6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcf4c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bcf4e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcf50:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bcf52:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcf54:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bcf56:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bcf58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bcf5a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcf5c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bcf5e:	60a2      	str	r2, [r4, #8]
   bcf60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bcf62:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcf64:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bcf66:	60e2      	str	r2, [r4, #12]
   bcf68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bcf6a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcf6c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bcf6e:	6122      	str	r2, [r4, #16]
   bcf70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bcf72:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bcf74:	9b03      	ldr	r3, [sp, #12]
   bcf76:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bcf78:	6162      	str	r2, [r4, #20]
   bcf7a:	7623      	strb	r3, [r4, #24]
   bcf7c:	e7cf      	b.n	bcf1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bcf80 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bcf80:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcf82:	4604      	mov	r4, r0
   bcf84:	b087      	sub	sp, #28
   bcf86:	460d      	mov	r5, r1
        filter_(level, filters) {
   bcf88:	4626      	mov	r6, r4
        stream_(&stream) {
   bcf8a:	4619      	mov	r1, r3
   bcf8c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bcf8e:	4617      	mov	r7, r2
        stream_(&stream) {
   bcf90:	f7f8 fb77 	bl	b5682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bcf94:	4b0b      	ldr	r3, [pc, #44]	; (bcfc4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bcf96:	f846 3b04 	str.w	r3, [r6], #4
   bcf9a:	4669      	mov	r1, sp
   bcf9c:	a803      	add	r0, sp, #12
   bcf9e:	f7f8 fb70 	bl	b5682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bcfa2:	aa03      	add	r2, sp, #12
   bcfa4:	4639      	mov	r1, r7
   bcfa6:	4630      	mov	r0, r6
   bcfa8:	f7ff fef0 	bl	bcd8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bcfac:	a803      	add	r0, sp, #12
   bcfae:	f7f8 fb27 	bl	b5600 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bcfb2:	4668      	mov	r0, sp
   bcfb4:	f7f8 fb24 	bl	b5600 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bcfb8:	4b03      	ldr	r3, [pc, #12]	; (bcfc8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bcfba:	6023      	str	r3, [r4, #0]
}
   bcfbc:	4620      	mov	r0, r4
        stream_(&stream) {
   bcfbe:	6225      	str	r5, [r4, #32]
}
   bcfc0:	b007      	add	sp, #28
   bcfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bcfc4:	000c009c 	.word	0x000c009c
   bcfc8:	000c0d98 	.word	0x000c0d98

000bcfcc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bcfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcfce:	460f      	mov	r7, r1
   bcfd0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bcfd2:	491d      	ldr	r1, [pc, #116]	; (bd048 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bcfd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bcfd6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bcfd8:	4616      	mov	r6, r2
   bcfda:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bcfdc:	f002 f9e7 	bl	bf3ae <strcmp>
   bcfe0:	b9c0      	cbnz	r0, bd014 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bcfe2:	b1a4      	cbz	r4, bd00e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bcfe4:	4629      	mov	r1, r5
   bcfe6:	a801      	add	r0, sp, #4
   bcfe8:	f7ff fcbc 	bl	bc964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bcfec:	4917      	ldr	r1, [pc, #92]	; (bd04c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bcfee:	2024      	movs	r0, #36	; 0x24
   bcff0:	f001 fc16 	bl	be820 <_ZnwjRKSt9nothrow_t>
   bcff4:	4605      	mov	r5, r0
   bcff6:	b130      	cbz	r0, bd006 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bcff8:	ab01      	add	r3, sp, #4
   bcffa:	4632      	mov	r2, r6
   bcffc:	4621      	mov	r1, r4
   bcffe:	f7ff ffbf 	bl	bcf80 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd002:	4b13      	ldr	r3, [pc, #76]	; (bd050 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bd004:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bd006:	a801      	add	r0, sp, #4
   bd008:	f7f8 fafa 	bl	b5600 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bd00c:	462c      	mov	r4, r5
}
   bd00e:	4620      	mov	r0, r4
   bd010:	b005      	add	sp, #20
   bd012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bd014:	490f      	ldr	r1, [pc, #60]	; (bd054 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bd016:	4638      	mov	r0, r7
   bd018:	f002 f9c9 	bl	bf3ae <strcmp>
   bd01c:	b990      	cbnz	r0, bd044 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bd01e:	2c00      	cmp	r4, #0
   bd020:	d0f5      	beq.n	bd00e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bd022:	4629      	mov	r1, r5
   bd024:	a801      	add	r0, sp, #4
   bd026:	f7ff fc9d 	bl	bc964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bd02a:	4908      	ldr	r1, [pc, #32]	; (bd04c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bd02c:	2024      	movs	r0, #36	; 0x24
   bd02e:	f001 fbf7 	bl	be820 <_ZnwjRKSt9nothrow_t>
   bd032:	4605      	mov	r5, r0
   bd034:	2800      	cmp	r0, #0
   bd036:	d0e6      	beq.n	bd006 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bd038:	ab01      	add	r3, sp, #4
   bd03a:	4632      	mov	r2, r6
   bd03c:	4621      	mov	r1, r4
   bd03e:	f7ff ff9f 	bl	bcf80 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd042:	e7e0      	b.n	bd006 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bd044:	2400      	movs	r4, #0
   bd046:	e7e2      	b.n	bd00e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bd048:	000c0d22 	.word	0x000c0d22
   bd04c:	000c0eec 	.word	0x000c0eec
   bd050:	000c0db0 	.word	0x000c0db0
   bd054:	000c0d26 	.word	0x000c0d26

000bd058 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bd058:	4b01      	ldr	r3, [pc, #4]	; (bd060 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bd05a:	4a02      	ldr	r2, [pc, #8]	; (bd064 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bd05c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bd05e:	4770      	bx	lr
   bd060:	2003e658 	.word	0x2003e658
   bd064:	000c0d37 	.word	0x000c0d37

000bd068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd06c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bd06e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd072:	4604      	mov	r4, r0
   bd074:	460e      	mov	r6, r1
   bd076:	4617      	mov	r7, r2
   bd078:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bd07a:	f001 f9af 	bl	be3dc <_Z16_fetch_usbserialv>
   bd07e:	4581      	cmp	r9, r0
   bd080:	d04c      	beq.n	bd11c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bd082:	792b      	ldrb	r3, [r5, #4]
   bd084:	0719      	lsls	r1, r3, #28
   bd086:	d504      	bpl.n	bd092 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bd088:	696a      	ldr	r2, [r5, #20]
   bd08a:	4954      	ldr	r1, [pc, #336]	; (bd1dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bd08c:	4620      	mov	r0, r4
   bd08e:	f7ff fac0 	bl	bc612 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bd092:	f1b8 0f00 	cmp.w	r8, #0
   bd096:	d00d      	beq.n	bd0b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bd098:	215b      	movs	r1, #91	; 0x5b
   bd09a:	4620      	mov	r0, r4
   bd09c:	f7ff faad 	bl	bc5fa <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bd0a0:	4641      	mov	r1, r8
   bd0a2:	4620      	mov	r0, r4
   bd0a4:	f7ff fa9a 	bl	bc5dc <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bd0a8:	6823      	ldr	r3, [r4, #0]
   bd0aa:	494d      	ldr	r1, [pc, #308]	; (bd1e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bd0ac:	68db      	ldr	r3, [r3, #12]
   bd0ae:	2202      	movs	r2, #2
   bd0b0:	4620      	mov	r0, r4
   bd0b2:	4798      	blx	r3
    if (attr.has_file) {
   bd0b4:	792b      	ldrb	r3, [r5, #4]
   bd0b6:	07da      	lsls	r2, r3, #31
   bd0b8:	d523      	bpl.n	bd102 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bd0ba:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bd0be:	212f      	movs	r1, #47	; 0x2f
   bd0c0:	4640      	mov	r0, r8
   bd0c2:	f002 f9d3 	bl	bf46c <strrchr>
    if (s1) {
   bd0c6:	b108      	cbz	r0, bd0cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bd0c8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bd0cc:	4641      	mov	r1, r8
   bd0ce:	4620      	mov	r0, r4
   bd0d0:	f7ff fa84 	bl	bc5dc <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bd0d4:	792b      	ldrb	r3, [r5, #4]
   bd0d6:	079b      	lsls	r3, r3, #30
   bd0d8:	d508      	bpl.n	bd0ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bd0da:	213a      	movs	r1, #58	; 0x3a
   bd0dc:	4620      	mov	r0, r4
   bd0de:	f7ff fa8c 	bl	bc5fa <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bd0e2:	68ea      	ldr	r2, [r5, #12]
   bd0e4:	493f      	ldr	r1, [pc, #252]	; (bd1e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bd0e6:	4620      	mov	r0, r4
   bd0e8:	f7ff fa93 	bl	bc612 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bd0ec:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bd0ee:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bd0f0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bd0f4:	68db      	ldr	r3, [r3, #12]
   bd0f6:	bf14      	ite	ne
   bd0f8:	493b      	ldrne	r1, [pc, #236]	; (bd1e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bd0fa:	493c      	ldreq	r1, [pc, #240]	; (bd1ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bd0fc:	2202      	movs	r2, #2
            write(": ", 2);
   bd0fe:	4620      	mov	r0, r4
   bd100:	4798      	blx	r3
    if (attr.has_function) {
   bd102:	792b      	ldrb	r3, [r5, #4]
   bd104:	0758      	lsls	r0, r3, #29
   bd106:	d51d      	bpl.n	bd144 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bd108:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bd10a:	460b      	mov	r3, r1
   bd10c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bd10e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd112:	b160      	cbz	r0, bd12e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bd114:	2820      	cmp	r0, #32
   bd116:	d108      	bne.n	bd12a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bd118:	4619      	mov	r1, r3
   bd11a:	e7f7      	b.n	bd10c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bd11c:	4834      	ldr	r0, [pc, #208]	; (bd1f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bd11e:	f000 f966 	bl	bd3ee <_ZN5spark12NetworkClass9listeningEv>
   bd122:	2800      	cmp	r0, #0
   bd124:	d0ad      	beq.n	bd082 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bd126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bd12a:	2828      	cmp	r0, #40	; 0x28
   bd12c:	d1ee      	bne.n	bd10c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bd12e:	6823      	ldr	r3, [r4, #0]
   bd130:	1a52      	subs	r2, r2, r1
   bd132:	68db      	ldr	r3, [r3, #12]
   bd134:	4620      	mov	r0, r4
   bd136:	4798      	blx	r3
        write("(): ", 4);
   bd138:	6823      	ldr	r3, [r4, #0]
   bd13a:	492e      	ldr	r1, [pc, #184]	; (bd1f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bd13c:	68db      	ldr	r3, [r3, #12]
   bd13e:	2204      	movs	r2, #4
   bd140:	4620      	mov	r0, r4
   bd142:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bd144:	2100      	movs	r1, #0
   bd146:	4638      	mov	r0, r7
   bd148:	f7fd ff84 	bl	bb054 <log_level_name>
   bd14c:	4601      	mov	r1, r0
    write(s);
   bd14e:	4620      	mov	r0, r4
   bd150:	f7ff fa44 	bl	bc5dc <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bd154:	6823      	ldr	r3, [r4, #0]
   bd156:	4925      	ldr	r1, [pc, #148]	; (bd1ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bd158:	68db      	ldr	r3, [r3, #12]
   bd15a:	2202      	movs	r2, #2
   bd15c:	4620      	mov	r0, r4
   bd15e:	4798      	blx	r3
    if (msg) {
   bd160:	b11e      	cbz	r6, bd16a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bd162:	4631      	mov	r1, r6
   bd164:	4620      	mov	r0, r4
   bd166:	f7ff fa39 	bl	bc5dc <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bd16a:	792b      	ldrb	r3, [r5, #4]
   bd16c:	f013 0f30 	tst.w	r3, #48	; 0x30
   bd170:	d02c      	beq.n	bd1cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bd172:	6823      	ldr	r3, [r4, #0]
   bd174:	4920      	ldr	r1, [pc, #128]	; (bd1f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bd176:	68db      	ldr	r3, [r3, #12]
   bd178:	2202      	movs	r2, #2
   bd17a:	4620      	mov	r0, r4
   bd17c:	4798      	blx	r3
        if (attr.has_code) {
   bd17e:	792b      	ldrb	r3, [r5, #4]
   bd180:	06d9      	lsls	r1, r3, #27
   bd182:	d50a      	bpl.n	bd19a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bd184:	6823      	ldr	r3, [r4, #0]
   bd186:	491d      	ldr	r1, [pc, #116]	; (bd1fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bd188:	68db      	ldr	r3, [r3, #12]
   bd18a:	2207      	movs	r2, #7
   bd18c:	4620      	mov	r0, r4
   bd18e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bd190:	69aa      	ldr	r2, [r5, #24]
   bd192:	491b      	ldr	r1, [pc, #108]	; (bd200 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bd194:	4620      	mov	r0, r4
   bd196:	f7ff fa3c 	bl	bc612 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bd19a:	792b      	ldrb	r3, [r5, #4]
   bd19c:	069a      	lsls	r2, r3, #26
   bd19e:	d511      	bpl.n	bd1c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bd1a0:	06db      	lsls	r3, r3, #27
   bd1a2:	d505      	bpl.n	bd1b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bd1a4:	6823      	ldr	r3, [r4, #0]
   bd1a6:	4910      	ldr	r1, [pc, #64]	; (bd1e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bd1a8:	68db      	ldr	r3, [r3, #12]
   bd1aa:	2202      	movs	r2, #2
   bd1ac:	4620      	mov	r0, r4
   bd1ae:	4798      	blx	r3
            write("details = ", 10);
   bd1b0:	6823      	ldr	r3, [r4, #0]
   bd1b2:	4914      	ldr	r1, [pc, #80]	; (bd204 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bd1b4:	68db      	ldr	r3, [r3, #12]
   bd1b6:	4620      	mov	r0, r4
   bd1b8:	220a      	movs	r2, #10
   bd1ba:	4798      	blx	r3
            write(attr.details);
   bd1bc:	69e9      	ldr	r1, [r5, #28]
   bd1be:	4620      	mov	r0, r4
   bd1c0:	f7ff fa0c 	bl	bc5dc <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bd1c4:	215d      	movs	r1, #93	; 0x5d
   bd1c6:	4620      	mov	r0, r4
   bd1c8:	f7ff fa17 	bl	bc5fa <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bd1cc:	6823      	ldr	r3, [r4, #0]
   bd1ce:	490e      	ldr	r1, [pc, #56]	; (bd208 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bd1d0:	68db      	ldr	r3, [r3, #12]
   bd1d2:	4620      	mov	r0, r4
   bd1d4:	2202      	movs	r2, #2
}
   bd1d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bd1da:	4718      	bx	r3
   bd1dc:	000c0d3b 	.word	0x000c0d3b
   bd1e0:	000c0d42 	.word	0x000c0d42
   bd1e4:	000c0313 	.word	0x000c0313
   bd1e8:	000c0d45 	.word	0x000c0d45
   bd1ec:	000c0d4a 	.word	0x000c0d4a
   bd1f0:	2003e684 	.word	0x2003e684
   bd1f4:	000c0d48 	.word	0x000c0d48
   bd1f8:	000c0d4d 	.word	0x000c0d4d
   bd1fc:	000c0d50 	.word	0x000c0d50
   bd200:	000bf900 	.word	0x000bf900
   bd204:	000c0d58 	.word	0x000c0d58
   bd208:	000c0d63 	.word	0x000c0d63

000bd20c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd20c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd210:	b085      	sub	sp, #20
    return stream_;
   bd212:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bd216:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bd218:	4605      	mov	r5, r0
   bd21a:	460f      	mov	r7, r1
   bd21c:	4690      	mov	r8, r2
   bd21e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bd220:	f001 f8dc 	bl	be3dc <_Z16_fetch_usbserialv>
   bd224:	4581      	cmp	r9, r0
   bd226:	d105      	bne.n	bd234 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bd228:	4849      	ldr	r0, [pc, #292]	; (bd350 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bd22a:	f000 f8e0 	bl	bd3ee <_ZN5spark12NetworkClass9listeningEv>
   bd22e:	2800      	cmp	r0, #0
   bd230:	f040 808a 	bne.w	bd348 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bd234:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bd236:	4a47      	ldr	r2, [pc, #284]	; (bd354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bd238:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bd23a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bd23e:	a801      	add	r0, sp, #4
        strm_(stream) {
   bd240:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bd242:	f88d 9008 	strb.w	r9, [sp, #8]
   bd246:	f7ff f8b4 	bl	bc3b2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bd24a:	4649      	mov	r1, r9
   bd24c:	4640      	mov	r0, r8
   bd24e:	f7fd ff01 	bl	bb054 <log_level_name>
    json.name("l", 1).value(s);
   bd252:	4941      	ldr	r1, [pc, #260]	; (bd358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bd254:	4680      	mov	r8, r0
   bd256:	2201      	movs	r2, #1
   bd258:	a801      	add	r0, sp, #4
   bd25a:	f7ff f939 	bl	bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd25e:	4641      	mov	r1, r8
   bd260:	f7ff f9ae 	bl	bc5c0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bd264:	b13f      	cbz	r7, bd276 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bd266:	493d      	ldr	r1, [pc, #244]	; (bd35c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bd268:	2201      	movs	r2, #1
   bd26a:	a801      	add	r0, sp, #4
   bd26c:	f7ff f930 	bl	bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd270:	4639      	mov	r1, r7
   bd272:	f7ff f9a5 	bl	bc5c0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bd276:	b13e      	cbz	r6, bd288 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bd278:	4939      	ldr	r1, [pc, #228]	; (bd360 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bd27a:	2201      	movs	r2, #1
   bd27c:	a801      	add	r0, sp, #4
   bd27e:	f7ff f927 	bl	bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd282:	4631      	mov	r1, r6
   bd284:	f7ff f99c 	bl	bc5c0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bd288:	7923      	ldrb	r3, [r4, #4]
   bd28a:	07df      	lsls	r7, r3, #31
   bd28c:	d50e      	bpl.n	bd2ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bd28e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bd290:	212f      	movs	r1, #47	; 0x2f
   bd292:	4630      	mov	r0, r6
   bd294:	f002 f8ea 	bl	bf46c <strrchr>
    if (s1) {
   bd298:	b100      	cbz	r0, bd29c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bd29a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bd29c:	4931      	ldr	r1, [pc, #196]	; (bd364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bd29e:	2201      	movs	r2, #1
   bd2a0:	a801      	add	r0, sp, #4
   bd2a2:	f7ff f915 	bl	bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd2a6:	4631      	mov	r1, r6
   bd2a8:	f7ff f98a 	bl	bc5c0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bd2ac:	7923      	ldrb	r3, [r4, #4]
   bd2ae:	079e      	lsls	r6, r3, #30
   bd2b0:	d507      	bpl.n	bd2c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bd2b2:	492d      	ldr	r1, [pc, #180]	; (bd368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bd2b4:	2202      	movs	r2, #2
   bd2b6:	a801      	add	r0, sp, #4
   bd2b8:	f7ff f90a 	bl	bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd2bc:	68e1      	ldr	r1, [r4, #12]
   bd2be:	f7ff f885 	bl	bc3cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bd2c2:	7923      	ldrb	r3, [r4, #4]
   bd2c4:	0758      	lsls	r0, r3, #29
   bd2c6:	d514      	bpl.n	bd2f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bd2c8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bd2ca:	4633      	mov	r3, r6
   bd2cc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bd2ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd2d2:	b12a      	cbz	r2, bd2e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bd2d4:	2a20      	cmp	r2, #32
   bd2d6:	d101      	bne.n	bd2dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bd2d8:	461e      	mov	r6, r3
   bd2da:	e7f7      	b.n	bd2cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bd2dc:	2a28      	cmp	r2, #40	; 0x28
   bd2de:	d1f5      	bne.n	bd2cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bd2e0:	4922      	ldr	r1, [pc, #136]	; (bd36c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bd2e2:	2202      	movs	r2, #2
   bd2e4:	a801      	add	r0, sp, #4
   bd2e6:	f7ff f8f3 	bl	bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd2ea:	1bba      	subs	r2, r7, r6
   bd2ec:	4631      	mov	r1, r6
   bd2ee:	f7ff f8ff 	bl	bc4f0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bd2f2:	7923      	ldrb	r3, [r4, #4]
   bd2f4:	0719      	lsls	r1, r3, #28
   bd2f6:	d507      	bpl.n	bd308 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bd2f8:	491d      	ldr	r1, [pc, #116]	; (bd370 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bd2fa:	2201      	movs	r2, #1
   bd2fc:	a801      	add	r0, sp, #4
   bd2fe:	f7ff f8e7 	bl	bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd302:	6961      	ldr	r1, [r4, #20]
   bd304:	f7ff f874 	bl	bc3f0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bd308:	7923      	ldrb	r3, [r4, #4]
   bd30a:	06da      	lsls	r2, r3, #27
   bd30c:	d508      	bpl.n	bd320 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bd30e:	2204      	movs	r2, #4
   bd310:	4918      	ldr	r1, [pc, #96]	; (bd374 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bd312:	eb0d 0002 	add.w	r0, sp, r2
   bd316:	f7ff f8db 	bl	bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd31a:	69a1      	ldr	r1, [r4, #24]
   bd31c:	f7ff f856 	bl	bc3cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bd320:	7923      	ldrb	r3, [r4, #4]
   bd322:	069b      	lsls	r3, r3, #26
   bd324:	d507      	bpl.n	bd336 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bd326:	4914      	ldr	r1, [pc, #80]	; (bd378 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bd328:	2206      	movs	r2, #6
   bd32a:	a801      	add	r0, sp, #4
   bd32c:	f7ff f8d0 	bl	bc4d0 <_ZN5spark10JSONWriter4nameEPKcj>
   bd330:	69e1      	ldr	r1, [r4, #28]
   bd332:	f7ff f945 	bl	bc5c0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bd336:	a801      	add	r0, sp, #4
   bd338:	f7ff f825 	bl	bc386 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bd33c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bd33e:	490f      	ldr	r1, [pc, #60]	; (bd37c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bd340:	6803      	ldr	r3, [r0, #0]
   bd342:	2202      	movs	r2, #2
   bd344:	68db      	ldr	r3, [r3, #12]
   bd346:	4798      	blx	r3
}
   bd348:	b005      	add	sp, #20
   bd34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd34e:	bf00      	nop
   bd350:	2003e684 	.word	0x2003e684
   bd354:	000c0d80 	.word	0x000c0d80
   bd358:	000c0d18 	.word	0x000c0d18
   bd35c:	000c06f0 	.word	0x000c06f0
   bd360:	000c100d 	.word	0x000c100d
   bd364:	000bfd8f 	.word	0x000bfd8f
   bd368:	000c0d66 	.word	0x000c0d66
   bd36c:	000c0d69 	.word	0x000c0d69
   bd370:	000bff20 	.word	0x000bff20
   bd374:	000c0d6c 	.word	0x000c0d6c
   bd378:	000c0d71 	.word	0x000c0d71
   bd37c:	000c0d63 	.word	0x000c0d63

000bd380 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bd380:	2300      	movs	r3, #0
   bd382:	6840      	ldr	r0, [r0, #4]
   bd384:	461a      	mov	r2, r3
   bd386:	f7fd bf5b 	b.w	bb240 <network_connect>

000bd38a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bd38a:	6840      	ldr	r0, [r0, #4]
   bd38c:	2200      	movs	r2, #0
   bd38e:	2102      	movs	r1, #2
   bd390:	f7fd bf66 	b.w	bb260 <network_disconnect>

000bd394 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bd394:	2200      	movs	r2, #0
   bd396:	6840      	ldr	r0, [r0, #4]
   bd398:	4611      	mov	r1, r2
   bd39a:	f7fd bf59 	b.w	bb250 <network_connecting>

000bd39e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bd39e:	2200      	movs	r2, #0
   bd3a0:	6840      	ldr	r0, [r0, #4]
   bd3a2:	4611      	mov	r1, r2
   bd3a4:	f7fd bf64 	b.w	bb270 <network_ready>

000bd3a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bd3a8:	2300      	movs	r3, #0
   bd3aa:	6840      	ldr	r0, [r0, #4]
   bd3ac:	461a      	mov	r2, r3
   bd3ae:	4619      	mov	r1, r3
   bd3b0:	f7fd bf66 	b.w	bb280 <network_on>

000bd3b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bd3b4:	2300      	movs	r3, #0
   bd3b6:	6840      	ldr	r0, [r0, #4]
   bd3b8:	461a      	mov	r2, r3
   bd3ba:	4619      	mov	r1, r3
   bd3bc:	f7fd bf68 	b.w	bb290 <network_off>

000bd3c0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bd3c0:	6840      	ldr	r0, [r0, #4]
   bd3c2:	2100      	movs	r1, #0
   bd3c4:	f7fd bf8c 	b.w	bb2e0 <network_is_on>

000bd3c8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bd3c8:	6840      	ldr	r0, [r0, #4]
   bd3ca:	2100      	movs	r1, #0
   bd3cc:	f7fd bf90 	b.w	bb2f0 <network_is_off>

000bd3d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bd3d0:	6840      	ldr	r0, [r0, #4]
   bd3d2:	2200      	movs	r2, #0
   bd3d4:	f081 0101 	eor.w	r1, r1, #1
   bd3d8:	f7fd bf62 	b.w	bb2a0 <network_listen>

000bd3dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bd3dc:	6840      	ldr	r0, [r0, #4]
   bd3de:	2200      	movs	r2, #0
   bd3e0:	f7fd bf6e 	b.w	bb2c0 <network_set_listen_timeout>

000bd3e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bd3e4:	2200      	movs	r2, #0
   bd3e6:	6840      	ldr	r0, [r0, #4]
   bd3e8:	4611      	mov	r1, r2
   bd3ea:	f7fd bf71 	b.w	bb2d0 <network_get_listen_timeout>

000bd3ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bd3ee:	2200      	movs	r2, #0
   bd3f0:	6840      	ldr	r0, [r0, #4]
   bd3f2:	4611      	mov	r1, r2
   bd3f4:	f7fd bf5c 	b.w	bb2b0 <network_listening>

000bd3f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bd3f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd3fc:	b095      	sub	sp, #84	; 0x54
   bd3fe:	4614      	mov	r4, r2
   bd400:	460d      	mov	r5, r1
   bd402:	4607      	mov	r7, r0
    IPAddress addr;
   bd404:	f7fe fe6e 	bl	bc0e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bd408:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bd40a:	221c      	movs	r2, #28
   bd40c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bd40e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bd410:	f001 ff42 	bl	bf298 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bd414:	2340      	movs	r3, #64	; 0x40
   bd416:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bd418:	4620      	mov	r0, r4
   bd41a:	466b      	mov	r3, sp
   bd41c:	aa0c      	add	r2, sp, #48	; 0x30
   bd41e:	2100      	movs	r1, #0
   bd420:	f7fd fcc0 	bl	bada4 <netdb_getaddrinfo>
    if (!r) {
   bd424:	4604      	mov	r4, r0
   bd426:	2800      	cmp	r0, #0
   bd428:	d14b      	bne.n	bd4c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd42a:	4602      	mov	r2, r0
   bd42c:	2101      	movs	r1, #1
   bd42e:	6868      	ldr	r0, [r5, #4]
   bd430:	f7fd ff1e 	bl	bb270 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd434:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd436:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd438:	4622      	mov	r2, r4
   bd43a:	6868      	ldr	r0, [r5, #4]
   bd43c:	f7fd ff18 	bl	bb270 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd440:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd442:	4681      	mov	r9, r0
        bool ok = false;
   bd444:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd446:	2e00      	cmp	r6, #0
   bd448:	d03b      	beq.n	bd4c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bd44a:	2900      	cmp	r1, #0
   bd44c:	d139      	bne.n	bd4c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bd44e:	6873      	ldr	r3, [r6, #4]
   bd450:	2b02      	cmp	r3, #2
   bd452:	d003      	beq.n	bd45c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bd454:	2b0a      	cmp	r3, #10
   bd456:	d011      	beq.n	bd47c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd458:	69f6      	ldr	r6, [r6, #28]
   bd45a:	e7f4      	b.n	bd446 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bd45c:	f1b8 0f00 	cmp.w	r8, #0
   bd460:	d0fa      	beq.n	bd458 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bd462:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bd464:	a806      	add	r0, sp, #24
   bd466:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bd468:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bd46a:	f7fe fe69 	bl	bc140 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bd46e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd470:	1d3c      	adds	r4, r7, #4
   bd472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd474:	682b      	ldr	r3, [r5, #0]
   bd476:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd478:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bd47a:	e7ed      	b.n	bd458 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bd47c:	f1b9 0f00 	cmp.w	r9, #0
   bd480:	d0ea      	beq.n	bd458 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bd482:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bd484:	2210      	movs	r2, #16
   bd486:	a801      	add	r0, sp, #4
   bd488:	f001 ff06 	bl	bf298 <memset>
                    a.v = 6;
   bd48c:	2306      	movs	r3, #6
   bd48e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bd492:	ad01      	add	r5, sp, #4
   bd494:	f104 0308 	add.w	r3, r4, #8
   bd498:	3418      	adds	r4, #24
   bd49a:	6818      	ldr	r0, [r3, #0]
   bd49c:	6859      	ldr	r1, [r3, #4]
   bd49e:	462a      	mov	r2, r5
   bd4a0:	c203      	stmia	r2!, {r0, r1}
   bd4a2:	3308      	adds	r3, #8
   bd4a4:	42a3      	cmp	r3, r4
   bd4a6:	4615      	mov	r5, r2
   bd4a8:	d1f7      	bne.n	bd49a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bd4aa:	a901      	add	r1, sp, #4
   bd4ac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bd4ae:	ad07      	add	r5, sp, #28
   bd4b0:	f7fe fe26 	bl	bc100 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bd4b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd4b6:	1d3c      	adds	r4, r7, #4
   bd4b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd4ba:	682b      	ldr	r3, [r5, #0]
   bd4bc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd4be:	4649      	mov	r1, r9
   bd4c0:	e7ca      	b.n	bd458 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bd4c2:	9800      	ldr	r0, [sp, #0]
   bd4c4:	f7fd fc66 	bl	bad94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bd4c8:	4638      	mov	r0, r7
   bd4ca:	b015      	add	sp, #84	; 0x54
   bd4cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bd4d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bd4d0:	4b02      	ldr	r3, [pc, #8]	; (bd4dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bd4d2:	4a03      	ldr	r2, [pc, #12]	; (bd4e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bd4d4:	601a      	str	r2, [r3, #0]
   bd4d6:	2200      	movs	r2, #0
   bd4d8:	605a      	str	r2, [r3, #4]

} // spark
   bd4da:	4770      	bx	lr
   bd4dc:	2003e684 	.word	0x2003e684
   bd4e0:	000c0df8 	.word	0x000c0df8

000bd4e4 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bd4e4:	b508      	push	{r3, lr}
            return &Wire1;
   bd4e6:	f001 f937 	bl	be758 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bd4ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bd4ee:	f7fe bd67 	b.w	bbfc0 <_ZN7TwoWire4lockEv>

000bd4f2 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bd4f2:	b510      	push	{r4, lr}
   bd4f4:	4604      	mov	r4, r0
    lock_(_lock)
   bd4f6:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bd4f8:	b109      	cbz	r1, bd4fe <_ZN4PMICC1Eb+0xc>
        lock();
   bd4fa:	f7ff fff3 	bl	bd4e4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bd4fe:	4620      	mov	r0, r4
   bd500:	bd10      	pop	{r4, pc}

000bd502 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bd502:	b508      	push	{r3, lr}
            return &Wire1;
   bd504:	f001 f928 	bl	be758 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bd508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bd50c:	f7fe bd61 	b.w	bbfd2 <_ZN7TwoWire6unlockEv>

000bd510 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bd510:	b510      	push	{r4, lr}
    if (lock_) {
   bd512:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bd514:	4604      	mov	r4, r0
    if (lock_) {
   bd516:	b10b      	cbz	r3, bd51c <_ZN4PMICD1Ev+0xc>
        unlock();
   bd518:	f7ff fff3 	bl	bd502 <_ZN4PMIC6unlockEv>
}
   bd51c:	4620      	mov	r0, r4
   bd51e:	bd10      	pop	{r4, pc}

000bd520 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bd520:	b510      	push	{r4, lr}
   bd522:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bd524:	6800      	ldr	r0, [r0, #0]
   bd526:	f7ff ffec 	bl	bd502 <_ZN4PMIC6unlockEv>
   bd52a:	4620      	mov	r0, r4
   bd52c:	bd10      	pop	{r4, pc}

000bd52e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bd52e:	b530      	push	{r4, r5, lr}
   bd530:	b087      	sub	sp, #28
   bd532:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd534:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd536:	f7ff ffd5 	bl	bd4e4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd53a:	226b      	movs	r2, #107	; 0x6b
   bd53c:	2300      	movs	r3, #0
   bd53e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bd542:	2401      	movs	r4, #1
   bd544:	230a      	movs	r3, #10
   bd546:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bd54a:	f001 f905 	bl	be758 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bd54e:	a902      	add	r1, sp, #8
   bd550:	f7fe fd1a 	bl	bbf88 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bd554:	f001 f900 	bl	be758 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bd558:	6803      	ldr	r3, [r0, #0]
   bd55a:	4629      	mov	r1, r5
   bd55c:	689b      	ldr	r3, [r3, #8]
   bd55e:	4798      	blx	r3
            return &Wire1;
   bd560:	f001 f8fa 	bl	be758 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bd564:	4621      	mov	r1, r4
   bd566:	f7fe fd27 	bl	bbfb8 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bd56a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bd56c:	f001 f8f4 	bl	be758 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bd570:	a902      	add	r1, sp, #8
   bd572:	f7fe fcd9 	bl	bbf28 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bd576:	f001 f8ef 	bl	be758 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bd57a:	6803      	ldr	r3, [r0, #0]
   bd57c:	695b      	ldr	r3, [r3, #20]
   bd57e:	4798      	blx	r3
   bd580:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bd582:	a801      	add	r0, sp, #4
   bd584:	f7ff ffcc 	bl	bd520 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd588:	b2e0      	uxtb	r0, r4
   bd58a:	b007      	add	sp, #28
   bd58c:	bd30      	pop	{r4, r5, pc}

000bd58e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bd58e:	b570      	push	{r4, r5, r6, lr}
   bd590:	b086      	sub	sp, #24
   bd592:	460d      	mov	r5, r1
   bd594:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd596:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd598:	f7ff ffa4 	bl	bd4e4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd59c:	226b      	movs	r2, #107	; 0x6b
   bd59e:	2300      	movs	r3, #0
   bd5a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bd5a4:	2601      	movs	r6, #1
   bd5a6:	230a      	movs	r3, #10
   bd5a8:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bd5ac:	f001 f8d4 	bl	be758 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bd5b0:	a902      	add	r1, sp, #8
   bd5b2:	f7fe fce9 	bl	bbf88 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bd5b6:	f001 f8cf 	bl	be758 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bd5ba:	6803      	ldr	r3, [r0, #0]
   bd5bc:	4629      	mov	r1, r5
   bd5be:	689b      	ldr	r3, [r3, #8]
   bd5c0:	4798      	blx	r3
            return &Wire1;
   bd5c2:	f001 f8c9 	bl	be758 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bd5c6:	6803      	ldr	r3, [r0, #0]
   bd5c8:	4621      	mov	r1, r4
   bd5ca:	689b      	ldr	r3, [r3, #8]
   bd5cc:	4798      	blx	r3
            return &Wire1;
   bd5ce:	f001 f8c3 	bl	be758 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bd5d2:	4631      	mov	r1, r6
   bd5d4:	f7fe fcf0 	bl	bbfb8 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bd5d8:	a801      	add	r0, sp, #4
   bd5da:	f7ff ffa1 	bl	bd520 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd5de:	b006      	add	sp, #24
   bd5e0:	bd70      	pop	{r4, r5, r6, pc}

000bd5e2 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bd5e2:	b513      	push	{r0, r1, r4, lr}
   bd5e4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd5e6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd5e8:	f7ff ff7c 	bl	bd4e4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bd5ec:	2101      	movs	r1, #1
   bd5ee:	4620      	mov	r0, r4
   bd5f0:	f7ff ff9d 	bl	bd52e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bd5f4:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bd5f8:	2b10      	cmp	r3, #16
   bd5fa:	d007      	beq.n	bd60c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bd5fc:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bd600:	f042 0210 	orr.w	r2, r2, #16
   bd604:	2101      	movs	r1, #1
   bd606:	4620      	mov	r0, r4
   bd608:	f7ff ffc1 	bl	bd58e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bd60c:	a801      	add	r0, sp, #4
   bd60e:	f7ff ff87 	bl	bd520 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd612:	2001      	movs	r0, #1
   bd614:	b002      	add	sp, #8
   bd616:	bd10      	pop	{r4, pc}

000bd618 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bd618:	b513      	push	{r0, r1, r4, lr}
   bd61a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd61c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd61e:	f7ff ff61 	bl	bd4e4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bd622:	2101      	movs	r1, #1
   bd624:	4620      	mov	r0, r4
   bd626:	f7ff ff82 	bl	bd52e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bd62a:	f010 0f30 	tst.w	r0, #48	; 0x30
   bd62e:	d005      	beq.n	bd63c <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bd630:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bd634:	2101      	movs	r1, #1
   bd636:	4620      	mov	r0, r4
   bd638:	f7ff ffa9 	bl	bd58e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bd63c:	a801      	add	r0, sp, #4
   bd63e:	f7ff ff6f 	bl	bd520 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd642:	2001      	movs	r0, #1
   bd644:	b002      	add	sp, #8
   bd646:	bd10      	pop	{r4, pc}

000bd648 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bd648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd64a:	4606      	mov	r6, r0
   bd64c:	460d      	mov	r5, r1
  size_t n = 0;
   bd64e:	188f      	adds	r7, r1, r2
   bd650:	2400      	movs	r4, #0
  while (size--) {
   bd652:	42bd      	cmp	r5, r7
   bd654:	d00c      	beq.n	bd670 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bd656:	6833      	ldr	r3, [r6, #0]
   bd658:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd65c:	689b      	ldr	r3, [r3, #8]
   bd65e:	4630      	mov	r0, r6
   bd660:	4798      	blx	r3
     if (chunk>=0)
   bd662:	1e03      	subs	r3, r0, #0
   bd664:	db01      	blt.n	bd66a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bd666:	441c      	add	r4, r3
  while (size--) {
   bd668:	e7f3      	b.n	bd652 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bd66a:	2c00      	cmp	r4, #0
   bd66c:	bf08      	it	eq
   bd66e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bd670:	4620      	mov	r0, r4
   bd672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd674 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bd674:	b513      	push	{r0, r1, r4, lr}
   bd676:	4604      	mov	r4, r0
    }
   bd678:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bd67a:	b159      	cbz	r1, bd694 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bd67c:	9101      	str	r1, [sp, #4]
   bd67e:	f001 fec6 	bl	bf40e <strlen>
   bd682:	6823      	ldr	r3, [r4, #0]
   bd684:	9901      	ldr	r1, [sp, #4]
   bd686:	68db      	ldr	r3, [r3, #12]
   bd688:	4602      	mov	r2, r0
   bd68a:	4620      	mov	r0, r4
    }
   bd68c:	b002      	add	sp, #8
   bd68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bd692:	4718      	bx	r3
    }
   bd694:	b002      	add	sp, #8
   bd696:	bd10      	pop	{r4, pc}

000bd698 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bd698:	b508      	push	{r3, lr}
  return write(str);
   bd69a:	f7ff ffeb 	bl	bd674 <_ZN5Print5writeEPKc>
}
   bd69e:	bd08      	pop	{r3, pc}

000bd6a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bd6a0:	6803      	ldr	r3, [r0, #0]
   bd6a2:	689b      	ldr	r3, [r3, #8]
   bd6a4:	4718      	bx	r3

000bd6a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bd6a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bd6a8:	210d      	movs	r1, #13
{
   bd6aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   bd6ac:	f7ff fff8 	bl	bd6a0 <_ZN5Print5printEc>
  n += print('\n');
   bd6b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   bd6b2:	4604      	mov	r4, r0
  n += print('\n');
   bd6b4:	4628      	mov	r0, r5
   bd6b6:	f7ff fff3 	bl	bd6a0 <_ZN5Print5printEc>
  return n;
}
   bd6ba:	4420      	add	r0, r4
   bd6bc:	bd38      	pop	{r3, r4, r5, pc}

000bd6be <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bd6be:	b530      	push	{r4, r5, lr}
   bd6c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bd6c2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bd6c4:	2a01      	cmp	r2, #1
  *str = '\0';
   bd6c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bd6ca:	bf98      	it	ls
   bd6cc:	220a      	movls	r2, #10
   bd6ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bd6d0:	460d      	mov	r5, r1
   bd6d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bd6d6:	fb01 5312 	mls	r3, r1, r2, r5
   bd6da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd6de:	2b09      	cmp	r3, #9
   bd6e0:	bf94      	ite	ls
   bd6e2:	3330      	addls	r3, #48	; 0x30
   bd6e4:	3337      	addhi	r3, #55	; 0x37
   bd6e6:	b2db      	uxtb	r3, r3
  } while(n);
   bd6e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd6ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bd6ee:	d9ef      	bls.n	bd6d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bd6f0:	4621      	mov	r1, r4
   bd6f2:	f7ff ffbf 	bl	bd674 <_ZN5Print5writeEPKc>
}
   bd6f6:	b00b      	add	sp, #44	; 0x2c
   bd6f8:	bd30      	pop	{r4, r5, pc}
	...

000bd6fc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bd6fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd700:	ec55 4b10 	vmov	r4, r5, d0
   bd704:	4606      	mov	r6, r0
   bd706:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bd708:	ee10 2a10 	vmov	r2, s0
   bd70c:	ee10 0a10 	vmov	r0, s0
   bd710:	462b      	mov	r3, r5
   bd712:	4629      	mov	r1, r5
   bd714:	f001 fce8 	bl	bf0e8 <__aeabi_dcmpun>
   bd718:	b140      	cbz	r0, bd72c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bd71a:	4953      	ldr	r1, [pc, #332]	; (bd868 <_ZN5Print10printFloatEdh+0x16c>)
   bd71c:	4630      	mov	r0, r6
   bd71e:	f7ff ffa9 	bl	bd674 <_ZN5Print5writeEPKc>
   bd722:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bd724:	4650      	mov	r0, sl
   bd726:	b003      	add	sp, #12
   bd728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bd72c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bd730:	4b4e      	ldr	r3, [pc, #312]	; (bd86c <_ZN5Print10printFloatEdh+0x170>)
   bd732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd736:	4620      	mov	r0, r4
   bd738:	4649      	mov	r1, r9
   bd73a:	f001 fcd5 	bl	bf0e8 <__aeabi_dcmpun>
   bd73e:	b948      	cbnz	r0, bd754 <_ZN5Print10printFloatEdh+0x58>
   bd740:	4b4a      	ldr	r3, [pc, #296]	; (bd86c <_ZN5Print10printFloatEdh+0x170>)
   bd742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd746:	4620      	mov	r0, r4
   bd748:	4649      	mov	r1, r9
   bd74a:	f001 fcaf 	bl	bf0ac <__aeabi_dcmple>
   bd74e:	b908      	cbnz	r0, bd754 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bd750:	4947      	ldr	r1, [pc, #284]	; (bd870 <_ZN5Print10printFloatEdh+0x174>)
   bd752:	e7e3      	b.n	bd71c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bd754:	4b47      	ldr	r3, [pc, #284]	; (bd874 <_ZN5Print10printFloatEdh+0x178>)
   bd756:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd75a:	4620      	mov	r0, r4
   bd75c:	4629      	mov	r1, r5
   bd75e:	f001 fcb9 	bl	bf0d4 <__aeabi_dcmpgt>
   bd762:	b108      	cbz	r0, bd768 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bd764:	4944      	ldr	r1, [pc, #272]	; (bd878 <_ZN5Print10printFloatEdh+0x17c>)
   bd766:	e7d9      	b.n	bd71c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bd768:	4b44      	ldr	r3, [pc, #272]	; (bd87c <_ZN5Print10printFloatEdh+0x180>)
   bd76a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd76e:	4620      	mov	r0, r4
   bd770:	4629      	mov	r1, r5
   bd772:	f001 fc91 	bl	bf098 <__aeabi_dcmplt>
   bd776:	2800      	cmp	r0, #0
   bd778:	d1f4      	bne.n	bd764 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bd77a:	2200      	movs	r2, #0
   bd77c:	2300      	movs	r3, #0
   bd77e:	4620      	mov	r0, r4
   bd780:	4629      	mov	r1, r5
   bd782:	f001 fc89 	bl	bf098 <__aeabi_dcmplt>
   bd786:	b1d0      	cbz	r0, bd7be <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bd788:	212d      	movs	r1, #45	; 0x2d
   bd78a:	4630      	mov	r0, r6
   bd78c:	f7ff ff88 	bl	bd6a0 <_ZN5Print5printEc>
     number = -number;
   bd790:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bd794:	4682      	mov	sl, r0
     number = -number;
   bd796:	461d      	mov	r5, r3
  double rounding = 0.5;
   bd798:	4939      	ldr	r1, [pc, #228]	; (bd880 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bd79a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bd888 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bd79e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bd7a2:	2000      	movs	r0, #0
    rounding /= 10.0;
   bd7a4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bd7a8:	fa5f f38b 	uxtb.w	r3, fp
   bd7ac:	429f      	cmp	r7, r3
   bd7ae:	d908      	bls.n	bd7c2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bd7b0:	4642      	mov	r2, r8
   bd7b2:	464b      	mov	r3, r9
   bd7b4:	f001 fb28 	bl	bee08 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bd7b8:	f10b 0b01 	add.w	fp, fp, #1
   bd7bc:	e7f4      	b.n	bd7a8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bd7be:	4682      	mov	sl, r0
   bd7c0:	e7ea      	b.n	bd798 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bd7c2:	4622      	mov	r2, r4
   bd7c4:	462b      	mov	r3, r5
   bd7c6:	f001 f83f 	bl	be848 <__adddf3>
   bd7ca:	460d      	mov	r5, r1
   bd7cc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bd7ce:	f001 fcc9 	bl	bf164 <__aeabi_d2uiz>
   bd7d2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bd7d4:	f001 f974 	bl	beac0 <__aeabi_ui2d>
   bd7d8:	4602      	mov	r2, r0
   bd7da:	460b      	mov	r3, r1
   bd7dc:	4620      	mov	r0, r4
   bd7de:	4629      	mov	r1, r5
   bd7e0:	f001 f830 	bl	be844 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bd7e4:	220a      	movs	r2, #10
   bd7e6:	4604      	mov	r4, r0
   bd7e8:	460d      	mov	r5, r1
   bd7ea:	4630      	mov	r0, r6
   bd7ec:	4641      	mov	r1, r8
   bd7ee:	f7ff ff66 	bl	bd6be <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bd7f2:	4482      	add	sl, r0
  if (digits > 0) {
   bd7f4:	2f00      	cmp	r7, #0
   bd7f6:	d095      	beq.n	bd724 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bd7f8:	4922      	ldr	r1, [pc, #136]	; (bd884 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bd7fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; bd888 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bd7fe:	4630      	mov	r0, r6
   bd800:	f7ff ff38 	bl	bd674 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bd804:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bd808:	4482      	add	sl, r0
  while (digits-- > 0)
   bd80a:	2f00      	cmp	r7, #0
   bd80c:	d08a      	beq.n	bd724 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bd80e:	4642      	mov	r2, r8
   bd810:	464b      	mov	r3, r9
   bd812:	4620      	mov	r0, r4
   bd814:	4629      	mov	r1, r5
   bd816:	f001 f9cd 	bl	bebb4 <__aeabi_dmul>
   bd81a:	4604      	mov	r4, r0
   bd81c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bd81e:	f001 fc79 	bl	bf114 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bd822:	f1b0 0b00 	subs.w	fp, r0, #0
   bd826:	da1c      	bge.n	bd862 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bd828:	212d      	movs	r1, #45	; 0x2d
   bd82a:	4630      	mov	r0, r6
   bd82c:	f7ff ff38 	bl	bd6a0 <_ZN5Print5printEc>
            val = -n;
   bd830:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bd834:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bd836:	220a      	movs	r2, #10
   bd838:	4630      	mov	r0, r6
   bd83a:	9301      	str	r3, [sp, #4]
   bd83c:	f7ff ff3f 	bl	bd6be <_ZN5Print11printNumberEmh>
   bd840:	9b01      	ldr	r3, [sp, #4]
   bd842:	4418      	add	r0, r3
    n += print(toPrint);
   bd844:	4482      	add	sl, r0
    remainder -= toPrint;
   bd846:	4658      	mov	r0, fp
   bd848:	f001 f94a 	bl	beae0 <__aeabi_i2d>
   bd84c:	4602      	mov	r2, r0
   bd84e:	460b      	mov	r3, r1
   bd850:	4620      	mov	r0, r4
   bd852:	4629      	mov	r1, r5
   bd854:	f000 fff6 	bl	be844 <__aeabi_dsub>
   bd858:	3f01      	subs	r7, #1
   bd85a:	4604      	mov	r4, r0
   bd85c:	460d      	mov	r5, r1
   bd85e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bd860:	e7d3      	b.n	bd80a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bd862:	4659      	mov	r1, fp
        size_t t = 0;
   bd864:	2300      	movs	r3, #0
   bd866:	e7e6      	b.n	bd836 <_ZN5Print10printFloatEdh+0x13a>
   bd868:	000c0e2c 	.word	0x000c0e2c
   bd86c:	7fefffff 	.word	0x7fefffff
   bd870:	000c0e30 	.word	0x000c0e30
   bd874:	41efffff 	.word	0x41efffff
   bd878:	000c0e34 	.word	0x000c0e34
   bd87c:	c1efffff 	.word	0xc1efffff
   bd880:	3fe00000 	.word	0x3fe00000
   bd884:	000c0e6c 	.word	0x000c0e6c
   bd888:	40240000 	.word	0x40240000

000bd88c <_ZN5Print5printEfi>:
{
   bd88c:	b538      	push	{r3, r4, r5, lr}
   bd88e:	4604      	mov	r4, r0
   bd890:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bd894:	b2cd      	uxtb	r5, r1
   bd896:	f001 f935 	bl	beb04 <__aeabi_f2d>
   bd89a:	ec41 0b10 	vmov	d0, r0, r1
   bd89e:	4629      	mov	r1, r5
   bd8a0:	4620      	mov	r0, r4
}
   bd8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bd8a6:	f7ff bf29 	b.w	bd6fc <_ZN5Print10printFloatEdh>

000bd8aa <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bd8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd8ae:	b086      	sub	sp, #24
   bd8b0:	af00      	add	r7, sp, #0
   bd8b2:	4605      	mov	r5, r0
   bd8b4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bd8b6:	1d38      	adds	r0, r7, #4
   bd8b8:	2114      	movs	r1, #20
{
   bd8ba:	4614      	mov	r4, r2
    va_copy(args2, args);
   bd8bc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bd8be:	f7fd fd4f 	bl	bb360 <vsnprintf>

    if (n<bufsize)
   bd8c2:	2813      	cmp	r0, #19
   bd8c4:	d80e      	bhi.n	bd8e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bd8c6:	1d39      	adds	r1, r7, #4
   bd8c8:	4628      	mov	r0, r5
   bd8ca:	f7ff fed3 	bl	bd674 <_ZN5Print5writeEPKc>
   bd8ce:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bd8d0:	b11e      	cbz	r6, bd8da <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bd8d2:	4628      	mov	r0, r5
   bd8d4:	f7ff fee7 	bl	bd6a6 <_ZN5Print7printlnEv>
   bd8d8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bd8da:	4620      	mov	r0, r4
   bd8dc:	3718      	adds	r7, #24
   bd8de:	46bd      	mov	sp, r7
   bd8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bd8e4:	f100 0308 	add.w	r3, r0, #8
   bd8e8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bd8ec:	46e8      	mov	r8, sp
        char bigger[n+1];
   bd8ee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bd8f2:	4622      	mov	r2, r4
   bd8f4:	1c41      	adds	r1, r0, #1
   bd8f6:	683b      	ldr	r3, [r7, #0]
   bd8f8:	4668      	mov	r0, sp
   bd8fa:	f7fd fd31 	bl	bb360 <vsnprintf>
  return write(str);
   bd8fe:	4669      	mov	r1, sp
   bd900:	4628      	mov	r0, r5
   bd902:	f7ff feb7 	bl	bd674 <_ZN5Print5writeEPKc>
   bd906:	4604      	mov	r4, r0
   bd908:	46c5      	mov	sp, r8
   bd90a:	e7e1      	b.n	bd8d0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bd90c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bd90c:	b510      	push	{r4, lr}
  if (0 == max) {
   bd90e:	4604      	mov	r4, r0
   bd910:	b128      	cbz	r0, bd91e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bd912:	f001 fcf7 	bl	bf304 <rand>
   bd916:	fb90 f3f4 	sdiv	r3, r0, r4
   bd91a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bd91e:	4620      	mov	r0, r4
   bd920:	bd10      	pop	{r4, pc}

000bd922 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bd922:	4288      	cmp	r0, r1
{
   bd924:	b510      	push	{r4, lr}
   bd926:	4604      	mov	r4, r0
  if (min >= max) {
   bd928:	da03      	bge.n	bd932 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bd92a:	1a08      	subs	r0, r1, r0
   bd92c:	f7ff ffee 	bl	bd90c <_Z6randomi>
   bd930:	4404      	add	r4, r0
}
   bd932:	4620      	mov	r0, r4
   bd934:	bd10      	pop	{r4, pc}

000bd936 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   bd936:	f001 bcb7 	b.w	bf2a8 <srand>
	...

000bd93c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bd93c:	4b01      	ldr	r3, [pc, #4]	; (bd944 <_GLOBAL__sub_I_RGB+0x8>)
   bd93e:	2200      	movs	r2, #0
   bd940:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bd942:	4770      	bx	lr
   bd944:	2003e68c 	.word	0x2003e68c

000bd948 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bd948:	2100      	movs	r1, #0
   bd94a:	f7fd ba73 	b.w	bae34 <hal_spi_release>

000bd94e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bd94e:	2100      	movs	r1, #0
   bd950:	f7fd ba68 	b.w	bae24 <hal_spi_acquire>

000bd954 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bd954:	b510      	push	{r4, lr}
   bd956:	4604      	mov	r4, r0
   bd958:	4608      	mov	r0, r1
{
    _spi = spi;
   bd95a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bd95c:	f7fd fa42 	bl	bade4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bd960:	2300      	movs	r3, #0
   bd962:	6063      	str	r3, [r4, #4]
}
   bd964:	4620      	mov	r0, r4
   bd966:	bd10      	pop	{r4, pc}

000bd968 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bd968:	b513      	push	{r0, r1, r4, lr}
   bd96a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bd96c:	7800      	ldrb	r0, [r0, #0]
   bd96e:	f7ff ffee 	bl	bd94e <_ZN8SPIClass4lockEv.isra.0>
   bd972:	b958      	cbnz	r0, bd98c <_ZN8SPIClass5beginEv+0x24>
   bd974:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bd976:	9001      	str	r0, [sp, #4]
   bd978:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bd97c:	f7fd fa1a 	bl	badb4 <hal_spi_begin>
        unlock();
   bd980:	9801      	ldr	r0, [sp, #4]
    }
}
   bd982:	b002      	add	sp, #8
   bd984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd988:	f7ff bfde 	b.w	bd948 <_ZN8SPIClass6unlockEv.isra.0>
   bd98c:	b002      	add	sp, #8
   bd98e:	bd10      	pop	{r4, pc}

000bd990 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bd990:	b513      	push	{r0, r1, r4, lr}
   bd992:	4604      	mov	r4, r0
    if (!lock())
   bd994:	7800      	ldrb	r0, [r0, #0]
   bd996:	f7ff ffda 	bl	bd94e <_ZN8SPIClass4lockEv.isra.0>
   bd99a:	b948      	cbnz	r0, bd9b0 <_ZN8SPIClass3endEv+0x20>
   bd99c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bd99e:	9001      	str	r0, [sp, #4]
   bd9a0:	f7fd fa10 	bl	badc4 <hal_spi_end>
        unlock();
   bd9a4:	9801      	ldr	r0, [sp, #4]
    }
}
   bd9a6:	b002      	add	sp, #8
   bd9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd9ac:	f7ff bfcc 	b.w	bd948 <_ZN8SPIClass6unlockEv.isra.0>
   bd9b0:	b002      	add	sp, #8
   bd9b2:	bd10      	pop	{r4, pc}

000bd9b4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bd9b4:	7800      	ldrb	r0, [r0, #0]
   bd9b6:	f7ff bfc7 	b.w	bd948 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bd9bc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bd9bc:	0840      	lsrs	r0, r0, #1
{
   bd9be:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bd9c0:	6018      	str	r0, [r3, #0]
   bd9c2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bd9c4:	6818      	ldr	r0, [r3, #0]
   bd9c6:	4288      	cmp	r0, r1
   bd9c8:	b2e5      	uxtb	r5, r4
   bd9ca:	d906      	bls.n	bd9da <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bd9cc:	3401      	adds	r4, #1
   bd9ce:	2c08      	cmp	r4, #8
   bd9d0:	d002      	beq.n	bd9d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bd9d2:	0840      	lsrs	r0, r0, #1
   bd9d4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bd9d6:	e7f5      	b.n	bd9c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bd9d8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bd9da:	4b02      	ldr	r3, [pc, #8]	; (bd9e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bd9dc:	5d5b      	ldrb	r3, [r3, r5]
   bd9de:	7013      	strb	r3, [r2, #0]
}
   bd9e0:	bd30      	pop	{r4, r5, pc}
   bd9e2:	bf00      	nop
   bd9e4:	000c0e38 	.word	0x000c0e38

000bd9e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bd9e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd9ec:	4606      	mov	r6, r0
   bd9ee:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bd9f0:	7800      	ldrb	r0, [r0, #0]
{
   bd9f2:	460c      	mov	r4, r1
    CHECK(lock());
   bd9f4:	f7ff ffab 	bl	bd94e <_ZN8SPIClass4lockEv.isra.0>
   bd9f8:	2800      	cmp	r0, #0
   bd9fa:	db1b      	blt.n	bda34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bd9fc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bd9fe:	2214      	movs	r2, #20
   bda00:	2100      	movs	r1, #0
   bda02:	a809      	add	r0, sp, #36	; 0x24
   bda04:	f001 fc48 	bl	bf298 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bda08:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bda0a:	2200      	movs	r2, #0
   bda0c:	a909      	add	r1, sp, #36	; 0x24
   bda0e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bda10:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bda14:	f7fd f9f6 	bl	bae04 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bda18:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bda1c:	b113      	cbz	r3, bda24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bda1e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bda22:	b155      	cbz	r5, bda3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bda24:	2700      	movs	r7, #0
   bda26:	46b9      	mov	r9, r7
   bda28:	46b8      	mov	r8, r7
   bda2a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bda2c:	7923      	ldrb	r3, [r4, #4]
   bda2e:	b15d      	cbz	r5, bda48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bda30:	b1c3      	cbz	r3, bda64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bda32:	2000      	movs	r0, #0
}
   bda34:	b00f      	add	sp, #60	; 0x3c
   bda36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bda3a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bda3e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bda42:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bda46:	e7f1      	b.n	bda2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bda48:	2b00      	cmp	r3, #0
   bda4a:	d135      	bne.n	bdab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bda4c:	68a3      	ldr	r3, [r4, #8]
   bda4e:	4543      	cmp	r3, r8
   bda50:	d108      	bne.n	bda64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bda52:	f88d 9020 	strb.w	r9, [sp, #32]
   bda56:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bda5a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bda5e:	89a3      	ldrh	r3, [r4, #12]
   bda60:	429a      	cmp	r2, r3
   bda62:	d0e6      	beq.n	bda32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bda64:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bda66:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bda68:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bda6c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bda6e:	ab04      	add	r3, sp, #16
   bda70:	f10d 020f 	add.w	r2, sp, #15
   bda74:	f7ff ffa2 	bl	bd9bc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bda78:	7921      	ldrb	r1, [r4, #4]
   bda7a:	b985      	cbnz	r5, bda9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bda7c:	b989      	cbnz	r1, bdaa2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bda7e:	68a3      	ldr	r3, [r4, #8]
   bda80:	4543      	cmp	r3, r8
   bda82:	d30e      	bcc.n	bdaa2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bda84:	f88d 9020 	strb.w	r9, [sp, #32]
   bda88:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bda8c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bda90:	89a3      	ldrh	r3, [r4, #12]
   bda92:	429a      	cmp	r2, r3
   bda94:	d105      	bne.n	bdaa2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bda96:	9b04      	ldr	r3, [sp, #16]
   bda98:	4543      	cmp	r3, r8
   bda9a:	d102      	bne.n	bdaa2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bda9c:	e7c9      	b.n	bda32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bda9e:	2900      	cmp	r1, #0
   bdaa0:	d1f9      	bne.n	bda96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bdaa2:	2300      	movs	r3, #0
   bdaa4:	9301      	str	r3, [sp, #4]
   bdaa6:	7b63      	ldrb	r3, [r4, #13]
   bdaa8:	9300      	str	r3, [sp, #0]
   bdaaa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bdaae:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bdab0:	7830      	ldrb	r0, [r6, #0]
   bdab2:	f7fd f9af 	bl	bae14 <hal_spi_set_settings>
   bdab6:	e7bc      	b.n	bda32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bdab8:	e9cd 5500 	strd	r5, r5, [sp]
   bdabc:	462b      	mov	r3, r5
   bdabe:	462a      	mov	r2, r5
   bdac0:	2101      	movs	r1, #1
   bdac2:	e7f5      	b.n	bdab0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bdac4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bdac4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bdac6:	7800      	ldrb	r0, [r0, #0]
   bdac8:	f7fd f984 	bl	badd4 <hal_spi_transfer>
}
   bdacc:	b2c0      	uxtb	r0, r0
   bdace:	bd08      	pop	{r3, pc}

000bdad0 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bdad0:	4770      	bx	lr

000bdad2 <_ZN8SPIClass15detachInterruptEv>:
   bdad2:	4770      	bx	lr

000bdad4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bdad4:	b510      	push	{r4, lr}
   bdad6:	4604      	mov	r4, r0
{
	free(buffer);
   bdad8:	6800      	ldr	r0, [r0, #0]
   bdada:	f7fd fc19 	bl	bb310 <free>
}
   bdade:	4620      	mov	r0, r4
   bdae0:	bd10      	pop	{r4, pc}

000bdae2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bdae2:	b510      	push	{r4, lr}
   bdae4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bdae6:	6800      	ldr	r0, [r0, #0]
   bdae8:	b108      	cbz	r0, bdaee <_ZN6String10invalidateEv+0xc>
   bdaea:	f7fd fc11 	bl	bb310 <free>
	buffer = NULL;
   bdaee:	2300      	movs	r3, #0
	capacity = len = 0;
   bdaf0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bdaf4:	6023      	str	r3, [r4, #0]
}
   bdaf6:	bd10      	pop	{r4, pc}

000bdaf8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bdaf8:	b538      	push	{r3, r4, r5, lr}
   bdafa:	4604      	mov	r4, r0
   bdafc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bdafe:	6800      	ldr	r0, [r0, #0]
   bdb00:	3101      	adds	r1, #1
   bdb02:	f7fd fc0d 	bl	bb320 <realloc>
	if (newbuffer) {
   bdb06:	b110      	cbz	r0, bdb0e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bdb08:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bdb0c:	2001      	movs	r0, #1
	}
	return 0;
}
   bdb0e:	bd38      	pop	{r3, r4, r5, pc}

000bdb10 <_ZN6String7reserveEj>:
{
   bdb10:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bdb12:	6803      	ldr	r3, [r0, #0]
{
   bdb14:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bdb16:	b123      	cbz	r3, bdb22 <_ZN6String7reserveEj+0x12>
   bdb18:	6843      	ldr	r3, [r0, #4]
   bdb1a:	428b      	cmp	r3, r1
   bdb1c:	d301      	bcc.n	bdb22 <_ZN6String7reserveEj+0x12>
   bdb1e:	2001      	movs	r0, #1
}
   bdb20:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bdb22:	4620      	mov	r0, r4
   bdb24:	f7ff ffe8 	bl	bdaf8 <_ZN6String12changeBufferEj>
   bdb28:	2800      	cmp	r0, #0
   bdb2a:	d0f9      	beq.n	bdb20 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bdb2c:	68a3      	ldr	r3, [r4, #8]
   bdb2e:	2b00      	cmp	r3, #0
   bdb30:	d1f5      	bne.n	bdb1e <_ZN6String7reserveEj+0xe>
   bdb32:	6822      	ldr	r2, [r4, #0]
   bdb34:	7013      	strb	r3, [r2, #0]
   bdb36:	e7f2      	b.n	bdb1e <_ZN6String7reserveEj+0xe>

000bdb38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bdb38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdb3a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bdb3c:	4611      	mov	r1, r2
   bdb3e:	9201      	str	r2, [sp, #4]
{
   bdb40:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bdb42:	f7ff ffe5 	bl	bdb10 <_ZN6String7reserveEj>
   bdb46:	9a01      	ldr	r2, [sp, #4]
   bdb48:	b928      	cbnz	r0, bdb56 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bdb4a:	4620      	mov	r0, r4
   bdb4c:	f7ff ffc9 	bl	bdae2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bdb50:	4620      	mov	r0, r4
   bdb52:	b003      	add	sp, #12
   bdb54:	bd30      	pop	{r4, r5, pc}
	len = length;
   bdb56:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bdb58:	4629      	mov	r1, r5
   bdb5a:	6820      	ldr	r0, [r4, #0]
   bdb5c:	f001 fb74 	bl	bf248 <memcpy>
	buffer[len] = 0;
   bdb60:	6822      	ldr	r2, [r4, #0]
   bdb62:	68a3      	ldr	r3, [r4, #8]
   bdb64:	2100      	movs	r1, #0
   bdb66:	54d1      	strb	r1, [r2, r3]
	return *this;
   bdb68:	e7f2      	b.n	bdb50 <_ZN6String4copyEPKcj+0x18>

000bdb6a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bdb6a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bdb6c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bdb6e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bdb72:	4604      	mov	r4, r0
	len = 0;
   bdb74:	6083      	str	r3, [r0, #8]
	flags = 0;
   bdb76:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bdb78:	b141      	cbz	r1, bdb8c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bdb7a:	4608      	mov	r0, r1
   bdb7c:	9101      	str	r1, [sp, #4]
   bdb7e:	f001 fc46 	bl	bf40e <strlen>
   bdb82:	9901      	ldr	r1, [sp, #4]
   bdb84:	4602      	mov	r2, r0
   bdb86:	4620      	mov	r0, r4
   bdb88:	f7ff ffd6 	bl	bdb38 <_ZN6String4copyEPKcj>
}
   bdb8c:	4620      	mov	r0, r4
   bdb8e:	b002      	add	sp, #8
   bdb90:	bd10      	pop	{r4, pc}

000bdb92 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bdb92:	b538      	push	{r3, r4, r5, lr}
   bdb94:	4605      	mov	r5, r0
	if (buffer) {
   bdb96:	6800      	ldr	r0, [r0, #0]
{
   bdb98:	460c      	mov	r4, r1
	if (buffer) {
   bdb9a:	b168      	cbz	r0, bdbb8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bdb9c:	686a      	ldr	r2, [r5, #4]
   bdb9e:	688b      	ldr	r3, [r1, #8]
   bdba0:	429a      	cmp	r2, r3
   bdba2:	d307      	bcc.n	bdbb4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bdba4:	6809      	ldr	r1, [r1, #0]
   bdba6:	f001 fc0c 	bl	bf3c2 <strcpy>
			len = rhs.len;
   bdbaa:	68a3      	ldr	r3, [r4, #8]
   bdbac:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bdbae:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bdbb0:	60a3      	str	r3, [r4, #8]
}
   bdbb2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bdbb4:	f7fd fbac 	bl	bb310 <free>
	buffer = rhs.buffer;
   bdbb8:	6823      	ldr	r3, [r4, #0]
   bdbba:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bdbbc:	6863      	ldr	r3, [r4, #4]
   bdbbe:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bdbc0:	68a3      	ldr	r3, [r4, #8]
   bdbc2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bdbc4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bdbc6:	e9c4 3300 	strd	r3, r3, [r4]
   bdbca:	e7f1      	b.n	bdbb0 <_ZN6String4moveERS_+0x1e>

000bdbcc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bdbcc:	b510      	push	{r4, lr}
	buffer = NULL;
   bdbce:	2300      	movs	r3, #0
	capacity = 0;
   bdbd0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bdbd4:	4604      	mov	r4, r0
	len = 0;
   bdbd6:	6083      	str	r3, [r0, #8]
	flags = 0;
   bdbd8:	7303      	strb	r3, [r0, #12]
	move(rval);
   bdbda:	f7ff ffda 	bl	bdb92 <_ZN6String4moveERS_>
}
   bdbde:	4620      	mov	r0, r4
   bdbe0:	bd10      	pop	{r4, pc}

000bdbe2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bdbe2:	4288      	cmp	r0, r1
{
   bdbe4:	b510      	push	{r4, lr}
   bdbe6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bdbe8:	d005      	beq.n	bdbf6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bdbea:	680b      	ldr	r3, [r1, #0]
   bdbec:	b12b      	cbz	r3, bdbfa <_ZN6StringaSERKS_+0x18>
   bdbee:	688a      	ldr	r2, [r1, #8]
   bdbf0:	4619      	mov	r1, r3
   bdbf2:	f7ff ffa1 	bl	bdb38 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bdbf6:	4620      	mov	r0, r4
   bdbf8:	bd10      	pop	{r4, pc}
	else invalidate();
   bdbfa:	f7ff ff72 	bl	bdae2 <_ZN6String10invalidateEv>
   bdbfe:	e7fa      	b.n	bdbf6 <_ZN6StringaSERKS_+0x14>

000bdc00 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bdc00:	b510      	push	{r4, lr}
	buffer = NULL;
   bdc02:	2300      	movs	r3, #0
String::String(const String &value)
   bdc04:	4604      	mov	r4, r0
	capacity = 0;
   bdc06:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bdc0a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bdc0c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bdc0e:	f7ff ffe8 	bl	bdbe2 <_ZN6StringaSERKS_>
}
   bdc12:	4620      	mov	r0, r4
   bdc14:	bd10      	pop	{r4, pc}

000bdc16 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bdc16:	4288      	cmp	r0, r1
{
   bdc18:	b510      	push	{r4, lr}
   bdc1a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bdc1c:	d001      	beq.n	bdc22 <_ZN6StringaSEOS_+0xc>
   bdc1e:	f7ff ffb8 	bl	bdb92 <_ZN6String4moveERS_>
	return *this;
}
   bdc22:	4620      	mov	r0, r4
   bdc24:	bd10      	pop	{r4, pc}

000bdc26 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bdc26:	b513      	push	{r0, r1, r4, lr}
   bdc28:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bdc2a:	b159      	cbz	r1, bdc44 <_ZN6StringaSEPKc+0x1e>
   bdc2c:	4608      	mov	r0, r1
   bdc2e:	9101      	str	r1, [sp, #4]
   bdc30:	f001 fbed 	bl	bf40e <strlen>
   bdc34:	9901      	ldr	r1, [sp, #4]
   bdc36:	4602      	mov	r2, r0
   bdc38:	4620      	mov	r0, r4
   bdc3a:	f7ff ff7d 	bl	bdb38 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bdc3e:	4620      	mov	r0, r4
   bdc40:	b002      	add	sp, #8
   bdc42:	bd10      	pop	{r4, pc}
	else invalidate();
   bdc44:	f7ff ff4d 	bl	bdae2 <_ZN6String10invalidateEv>
   bdc48:	e7f9      	b.n	bdc3e <_ZN6StringaSEPKc+0x18>

000bdc4a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bdc4a:	b570      	push	{r4, r5, r6, lr}
   bdc4c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bdc4e:	460e      	mov	r6, r1
   bdc50:	b909      	cbnz	r1, bdc56 <_ZN6String6concatEPKcj+0xc>
   bdc52:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bdc54:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bdc56:	b16a      	cbz	r2, bdc74 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bdc58:	6884      	ldr	r4, [r0, #8]
   bdc5a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bdc5c:	4621      	mov	r1, r4
   bdc5e:	f7ff ff57 	bl	bdb10 <_ZN6String7reserveEj>
   bdc62:	2800      	cmp	r0, #0
   bdc64:	d0f5      	beq.n	bdc52 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bdc66:	6828      	ldr	r0, [r5, #0]
   bdc68:	68ab      	ldr	r3, [r5, #8]
   bdc6a:	4631      	mov	r1, r6
   bdc6c:	4418      	add	r0, r3
   bdc6e:	f001 fba8 	bl	bf3c2 <strcpy>
	len = newlen;
   bdc72:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bdc74:	2001      	movs	r0, #1
   bdc76:	e7ed      	b.n	bdc54 <_ZN6String6concatEPKcj+0xa>

000bdc78 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bdc78:	b513      	push	{r0, r1, r4, lr}
   bdc7a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bdc7c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bdc7e:	b151      	cbz	r1, bdc96 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bdc80:	9101      	str	r1, [sp, #4]
   bdc82:	f001 fbc4 	bl	bf40e <strlen>
   bdc86:	9901      	ldr	r1, [sp, #4]
   bdc88:	4602      	mov	r2, r0
   bdc8a:	4620      	mov	r0, r4
}
   bdc8c:	b002      	add	sp, #8
   bdc8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bdc92:	f7ff bfda 	b.w	bdc4a <_ZN6String6concatEPKcj>
}
   bdc96:	b002      	add	sp, #8
   bdc98:	bd10      	pop	{r4, pc}

000bdc9a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bdc9a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bdc9c:	688a      	ldr	r2, [r1, #8]
   bdc9e:	6809      	ldr	r1, [r1, #0]
{
   bdca0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bdca2:	f7ff ffd2 	bl	bdc4a <_ZN6String6concatEPKcj>
   bdca6:	b910      	cbnz	r0, bdcae <_ZplRK15StringSumHelperRK6String+0x14>
   bdca8:	4620      	mov	r0, r4
   bdcaa:	f7ff ff1a 	bl	bdae2 <_ZN6String10invalidateEv>
	return a;
}
   bdcae:	4620      	mov	r0, r4
   bdcb0:	bd10      	pop	{r4, pc}

000bdcb2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bdcb2:	b513      	push	{r0, r1, r4, lr}
   bdcb4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bdcb6:	b929      	cbnz	r1, bdcc4 <_ZplRK15StringSumHelperPKc+0x12>
   bdcb8:	4620      	mov	r0, r4
   bdcba:	f7ff ff12 	bl	bdae2 <_ZN6String10invalidateEv>
	return a;
}
   bdcbe:	4620      	mov	r0, r4
   bdcc0:	b002      	add	sp, #8
   bdcc2:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bdcc4:	4608      	mov	r0, r1
   bdcc6:	9101      	str	r1, [sp, #4]
   bdcc8:	f001 fba1 	bl	bf40e <strlen>
   bdccc:	9901      	ldr	r1, [sp, #4]
   bdcce:	4602      	mov	r2, r0
   bdcd0:	4620      	mov	r0, r4
   bdcd2:	f7ff ffba 	bl	bdc4a <_ZN6String6concatEPKcj>
   bdcd6:	2800      	cmp	r0, #0
   bdcd8:	d0ee      	beq.n	bdcb8 <_ZplRK15StringSumHelperPKc+0x6>
   bdcda:	e7f0      	b.n	bdcbe <_ZplRK15StringSumHelperPKc+0xc>

000bdcdc <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bdcdc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bdcde:	6882      	ldr	r2, [r0, #8]
   bdce0:	b93a      	cbnz	r2, bdcf2 <_ZNK6String6equalsEPKc+0x16>
   bdce2:	b121      	cbz	r1, bdcee <_ZNK6String6equalsEPKc+0x12>
   bdce4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bdce6:	fab0 f080 	clz	r0, r0
   bdcea:	0940      	lsrs	r0, r0, #5
   bdcec:	e000      	b.n	bdcf0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bdcee:	2001      	movs	r0, #1
}
   bdcf0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bdcf2:	6800      	ldr	r0, [r0, #0]
   bdcf4:	b909      	cbnz	r1, bdcfa <_ZNK6String6equalsEPKc+0x1e>
   bdcf6:	7800      	ldrb	r0, [r0, #0]
   bdcf8:	e7f5      	b.n	bdce6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bdcfa:	f001 fb58 	bl	bf3ae <strcmp>
   bdcfe:	e7f2      	b.n	bdce6 <_ZNK6String6equalsEPKc+0xa>

000bdd00 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bdd00:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bdd02:	6883      	ldr	r3, [r0, #8]
   bdd04:	688a      	ldr	r2, [r1, #8]
   bdd06:	4293      	cmp	r3, r2
   bdd08:	d30b      	bcc.n	bdd22 <_ZNK6String8endsWithERKS_+0x22>
   bdd0a:	6800      	ldr	r0, [r0, #0]
   bdd0c:	b140      	cbz	r0, bdd20 <_ZNK6String8endsWithERKS_+0x20>
   bdd0e:	6809      	ldr	r1, [r1, #0]
   bdd10:	b149      	cbz	r1, bdd26 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bdd12:	1a9b      	subs	r3, r3, r2
   bdd14:	4418      	add	r0, r3
   bdd16:	f001 fb4a 	bl	bf3ae <strcmp>
   bdd1a:	fab0 f080 	clz	r0, r0
   bdd1e:	0940      	lsrs	r0, r0, #5
}
   bdd20:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bdd22:	2000      	movs	r0, #0
   bdd24:	e7fc      	b.n	bdd20 <_ZNK6String8endsWithERKS_+0x20>
   bdd26:	4608      	mov	r0, r1
   bdd28:	e7fa      	b.n	bdd20 <_ZNK6String8endsWithERKS_+0x20>
	...

000bdd2c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bdd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bdd2e:	429a      	cmp	r2, r3
{
   bdd30:	460f      	mov	r7, r1
   bdd32:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bdd34:	490c      	ldr	r1, [pc, #48]	; (bdd68 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bdd36:	bf88      	it	hi
   bdd38:	4613      	movhi	r3, r2
{
   bdd3a:	4614      	mov	r4, r2
   bdd3c:	4606      	mov	r6, r0
	if (left > right) {
   bdd3e:	bf84      	itt	hi
   bdd40:	462c      	movhi	r4, r5
   bdd42:	461d      	movhi	r5, r3
	String out;
   bdd44:	f7ff ff11 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bdd48:	68bb      	ldr	r3, [r7, #8]
   bdd4a:	42a3      	cmp	r3, r4
   bdd4c:	d30a      	bcc.n	bdd64 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bdd4e:	6839      	ldr	r1, [r7, #0]
   bdd50:	42ab      	cmp	r3, r5
   bdd52:	bf94      	ite	ls
   bdd54:	ebc4 0203 	rsbls	r2, r4, r3
   bdd58:	ebc4 0205 	rsbhi	r2, r4, r5
   bdd5c:	4421      	add	r1, r4
   bdd5e:	4630      	mov	r0, r6
   bdd60:	f7ff feea 	bl	bdb38 <_ZN6String4copyEPKcj>
	return out;
}
   bdd64:	4630      	mov	r0, r6
   bdd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bdd68:	000c0d65 	.word	0x000c0d65

000bdd6c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bdd6c:	b40e      	push	{r1, r2, r3}
   bdd6e:	b570      	push	{r4, r5, r6, lr}
   bdd70:	b087      	sub	sp, #28
   bdd72:	ad0b      	add	r5, sp, #44	; 0x2c
   bdd74:	4604      	mov	r4, r0
   bdd76:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bdd7a:	9201      	str	r2, [sp, #4]
   bdd7c:	462b      	mov	r3, r5
   bdd7e:	2105      	movs	r1, #5
   bdd80:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bdd82:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bdd84:	f7fd faec 	bl	bb360 <vsnprintf>
    va_end(marker);

    String result;
   bdd88:	490b      	ldr	r1, [pc, #44]	; (bddb8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bdd8a:	4606      	mov	r6, r0
    String result;
   bdd8c:	4620      	mov	r0, r4
   bdd8e:	f7ff feec 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bdd92:	4631      	mov	r1, r6
   bdd94:	4620      	mov	r0, r4
   bdd96:	f7ff febb 	bl	bdb10 <_ZN6String7reserveEj>
    if (result.buffer) {
   bdd9a:	6820      	ldr	r0, [r4, #0]
   bdd9c:	b130      	cbz	r0, bddac <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bdd9e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bdda0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bdda2:	462b      	mov	r3, r5
   bdda4:	1c71      	adds	r1, r6, #1
   bdda6:	f7fd fadb 	bl	bb360 <vsnprintf>
        va_end(marker);
        result.len = n;
   bddaa:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bddac:	4620      	mov	r0, r4
   bddae:	b007      	add	sp, #28
   bddb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bddb4:	b003      	add	sp, #12
   bddb6:	4770      	bx	lr
   bddb8:	000c0d65 	.word	0x000c0d65

000bddbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bddbc:	b510      	push	{r4, lr}
   bddbe:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bddc0:	6800      	ldr	r0, [r0, #0]
   bddc2:	b118      	cbz	r0, bddcc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bddc4:	f7fd faa4 	bl	bb310 <free>
            wakeupSource_ = nullptr;
   bddc8:	2300      	movs	r3, #0
   bddca:	6023      	str	r3, [r4, #0]
        }
    }
   bddcc:	bd10      	pop	{r4, pc}

000bddce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bddce:	b538      	push	{r3, r4, r5, lr}
   bddd0:	460c      	mov	r4, r1
   bddd2:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bddd4:	f7ff fff2 	bl	bddbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bddd8:	b154      	cbz	r4, bddf0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bddda:	8820      	ldrh	r0, [r4, #0]
   bdddc:	f7fd fa90 	bl	bb300 <malloc>
   bdde0:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bdde2:	b128      	cbz	r0, bddf0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bdde4:	8822      	ldrh	r2, [r4, #0]
   bdde6:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bdde8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bddec:	f001 ba2c 	b.w	bf248 <memcpy>
    }
   bddf0:	bd38      	pop	{r3, r4, r5, pc}

000bddf2 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bddf2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bddf4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bddf8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bddfa:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bddfe:	f8c0 3006 	str.w	r3, [r0, #6]
   bde02:	894b      	ldrh	r3, [r1, #10]
   bde04:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bde06:	460c      	mov	r4, r1
   bde08:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bde0a:	f7ff ffd7 	bl	bddbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bde0e:	6823      	ldr	r3, [r4, #0]
   bde10:	b113      	cbz	r3, bde18 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bde12:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bde14:	2300      	movs	r3, #0
   bde16:	6023      	str	r3, [r4, #0]
    }
   bde18:	bd38      	pop	{r3, r4, r5, pc}

000bde1a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bde1a:	b507      	push	{r0, r1, r2, lr}
   bde1c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bde1e:	2100      	movs	r1, #0
{
   bde20:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bde22:	9100      	str	r1, [sp, #0]
   bde24:	2001      	movs	r0, #1
   bde26:	218c      	movs	r1, #140	; 0x8c
   bde28:	f7fd f99e 	bl	bb168 <system_reset>
}
   bde2c:	b003      	add	sp, #12
   bde2e:	f85d fb04 	ldr.w	pc, [sp], #4

000bde32 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bde32:	4601      	mov	r1, r0
    reset(0, flags);
   bde34:	2000      	movs	r0, #0
   bde36:	f7ff bff0 	b.w	bde1a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bde3a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bde3a:	2000      	movs	r0, #0
   bde3c:	f7ff bff9 	b.w	bde32 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bde40 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bde40:	b5f0      	push	{r4, r5, r6, r7, lr}
   bde42:	4d2b      	ldr	r5, [pc, #172]	; (bdef0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bde44:	7d0b      	ldrb	r3, [r1, #20]
   bde46:	4604      	mov	r4, r0
   bde48:	b08b      	sub	sp, #44	; 0x2c
   bde4a:	4608      	mov	r0, r1
   bde4c:	1daf      	adds	r7, r5, #6
   bde4e:	2b00      	cmp	r3, #0
   bde50:	d036      	beq.n	bdec0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bde52:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bde54:	791b      	ldrb	r3, [r3, #4]
   bde56:	2b00      	cmp	r3, #0
   bde58:	d032      	beq.n	bdec0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bde5a:	4b26      	ldr	r3, [pc, #152]	; (bdef4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bde5c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bde5e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bde60:	a902      	add	r1, sp, #8
   bde62:	3004      	adds	r0, #4
   bde64:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bde68:	f7fd f974 	bl	bb154 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bde6c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bde70:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bde74:	b200      	sxth	r0, r0
   bde76:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bde7a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bde7e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bde80:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bde82:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bde84:	4628      	mov	r0, r5
   bde86:	f7ff ffa2 	bl	bddce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bde8a:	a802      	add	r0, sp, #8
   bde8c:	f7ff ff96 	bl	bddbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bde90:	2300      	movs	r3, #0
   bde92:	6023      	str	r3, [r4, #0]
   bde94:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bde96:	71a3      	strb	r3, [r4, #6]
   bde98:	8123      	strh	r3, [r4, #8]
   bde9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bde9e:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bdea0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bdea4:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bdea6:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bdeaa:	f8c4 3006 	str.w	r3, [r4, #6]
   bdeae:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bdeb0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bdeb2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bdeb4:	4620      	mov	r0, r4
   bdeb6:	f7ff ff8a 	bl	bddce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bdeba:	4620      	mov	r0, r4
   bdebc:	b00b      	add	sp, #44	; 0x2c
   bdebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bdec0:	2600      	movs	r6, #0
   bdec2:	2320      	movs	r3, #32
   bdec4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bdec8:	4b0b      	ldr	r3, [pc, #44]	; (bdef8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bdeca:	9300      	str	r3, [sp, #0]
   bdecc:	aa02      	add	r2, sp, #8
   bdece:	4633      	mov	r3, r6
   bded0:	490a      	ldr	r1, [pc, #40]	; (bdefc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bded2:	2032      	movs	r0, #50	; 0x32
   bded4:	f7fd f8ae 	bl	bb034 <log_message>
            : wakeupSource_(nullptr),
   bded8:	4b06      	ldr	r3, [pc, #24]	; (bdef4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bdeda:	4805      	ldr	r0, [pc, #20]	; (bdef0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bdedc:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bdede:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bdee2:	a902      	add	r1, sp, #8
   bdee4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bdee8:	f7ff ff83 	bl	bddf2 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bdeec:	e7cd      	b.n	bde8a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bdeee:	bf00      	nop
   bdef0:	2003e69c 	.word	0x2003e69c
   bdef4:	ffff0000 	.word	0xffff0000
   bdef8:	000c0e47 	.word	0x000c0e47
   bdefc:	000c0e40 	.word	0x000c0e40

000bdf00 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bdf00:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bdf02:	2420      	movs	r4, #32
{
   bdf04:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bdf06:	4622      	mov	r2, r4
   bdf08:	2100      	movs	r1, #0
   bdf0a:	4668      	mov	r0, sp
   bdf0c:	f001 f9c4 	bl	bf298 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bdf10:	2100      	movs	r1, #0
   bdf12:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bdf14:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bdf18:	f7fc fe3c 	bl	bab94 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bdf1c:	9801      	ldr	r0, [sp, #4]
   bdf1e:	b008      	add	sp, #32
   bdf20:	bd10      	pop	{r4, pc}
	...

000bdf24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bdf24:	4b05      	ldr	r3, [pc, #20]	; (bdf3c <_GLOBAL__sub_I_System+0x18>)
   bdf26:	2202      	movs	r2, #2
   bdf28:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bdf2a:	4b05      	ldr	r3, [pc, #20]	; (bdf40 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bdf2c:	4a05      	ldr	r2, [pc, #20]	; (bdf44 <_GLOBAL__sub_I_System+0x20>)
   bdf2e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bdf30:	2000      	movs	r0, #0
   bdf32:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bdf36:	f7fd b8af 	b.w	bb098 <set_system_mode>
   bdf3a:	bf00      	nop
   bdf3c:	2003e6a8 	.word	0x2003e6a8
   bdf40:	2003e69c 	.word	0x2003e69c
   bdf44:	ffff0000 	.word	0xffff0000

000bdf48 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bdf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bdf4c:	4a15      	ldr	r2, [pc, #84]	; (bdfa4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bdf4e:	f8df 8060 	ldr.w	r8, [pc, #96]	; bdfb0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bdf52:	e9d2 6300 	ldrd	r6, r3, [r2]
   bdf56:	1980      	adds	r0, r0, r6
   bdf58:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bdf5c:	4b12      	ldr	r3, [pc, #72]	; (bdfa8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bdf5e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bdf62:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bdf66:	1986      	adds	r6, r0, r6
   bdf68:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bdf6c:	42bb      	cmp	r3, r7
   bdf6e:	bf08      	it	eq
   bdf70:	42b2      	cmpeq	r2, r6
{
   bdf72:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bdf74:	d013      	beq.n	bdf9e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bdf76:	a903      	add	r1, sp, #12
   bdf78:	4668      	mov	r0, sp
   bdf7a:	e9cd 6700 	strd	r6, r7, [sp]
   bdf7e:	f7fd fa27 	bl	bb3d0 <localtime_r>
	calendar_time.tm_year += 1900;
   bdf82:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdf84:	4d09      	ldr	r5, [pc, #36]	; (bdfac <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bdf86:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdf8a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bdf8c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdf8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bdf90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bdf92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bdf94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bdf96:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdf9a:	6823      	ldr	r3, [r4, #0]
   bdf9c:	602b      	str	r3, [r5, #0]
    }
}
   bdf9e:	b00c      	add	sp, #48	; 0x30
   bdfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdfa4:	2003e6e0 	.word	0x2003e6e0
   bdfa8:	2003e6d8 	.word	0x2003e6d8
   bdfac:	2003e6b4 	.word	0x2003e6b4
   bdfb0:	2003e6e8 	.word	0x2003e6e8

000bdfb4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bdfb4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bdfb6:	2000      	movs	r0, #0
   bdfb8:	f7fd f91a 	bl	bb1f0 <spark_sync_time_pending>
   bdfbc:	b128      	cbz	r0, bdfca <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bdfbe:	f7fd f907 	bl	bb1d0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bdfc2:	f080 0001 	eor.w	r0, r0, #1
   bdfc6:	b2c0      	uxtb	r0, r0
    }
   bdfc8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bdfca:	2001      	movs	r0, #1
   bdfcc:	e7fc      	b.n	bdfc8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bdfd0 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bdfd0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bdfd2:	f7ff ffb9 	bl	bdf48 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bdfd6:	4b01      	ldr	r3, [pc, #4]	; (bdfdc <_ZN9TimeClass4hourEx+0xc>)
   bdfd8:	6898      	ldr	r0, [r3, #8]
   bdfda:	bd08      	pop	{r3, pc}
   bdfdc:	2003e6b4 	.word	0x2003e6b4

000bdfe0 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bdfe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bdfe2:	4602      	mov	r2, r0
   bdfe4:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bdfe6:	4668      	mov	r0, sp
    struct timeval tv = {
   bdfe8:	2100      	movs	r1, #0
    };
   bdfea:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bdfee:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bdff2:	f7fc fe17 	bl	bac24 <hal_rtc_set_time>
   bdff6:	4602      	mov	r2, r0
   bdff8:	b910      	cbnz	r0, be000 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bdffa:	4601      	mov	r1, r0
   bdffc:	f7fd f884 	bl	bb108 <system_notify_time_changed>
    }
}
   be000:	b005      	add	sp, #20
   be002:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be008 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   be008:	b530      	push	{r4, r5, lr}
   be00a:	b093      	sub	sp, #76	; 0x4c
   be00c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   be010:	4b19      	ldr	r3, [pc, #100]	; (be078 <_ZN9TimeClass7timeStrEx+0x70>)
{
   be012:	4604      	mov	r4, r0
    t += time_zone_cache;
   be014:	e9d3 1000 	ldrd	r1, r0, [r3]
   be018:	9b01      	ldr	r3, [sp, #4]
   be01a:	1852      	adds	r2, r2, r1
   be01c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   be020:	4816      	ldr	r0, [pc, #88]	; (be07c <_ZN9TimeClass7timeStrEx+0x74>)
   be022:	e9d0 1000 	ldrd	r1, r0, [r0]
   be026:	1852      	adds	r2, r2, r1
   be028:	eb43 0300 	adc.w	r3, r3, r0
   be02c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   be030:	2224      	movs	r2, #36	; 0x24
   be032:	eb0d 0002 	add.w	r0, sp, r2
   be036:	2100      	movs	r1, #0
   be038:	f001 f92e 	bl	bf298 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   be03c:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   be03e:	a909      	add	r1, sp, #36	; 0x24
   be040:	4668      	mov	r0, sp
   be042:	f7fd f9c5 	bl	bb3d0 <localtime_r>
    char ascstr[26] = {};
   be046:	2216      	movs	r2, #22
   be048:	4629      	mov	r1, r5
   be04a:	a803      	add	r0, sp, #12
   be04c:	9502      	str	r5, [sp, #8]
   be04e:	f001 f923 	bl	bf298 <memset>
    asctime_r(&calendar_time, ascstr);
   be052:	a902      	add	r1, sp, #8
   be054:	a809      	add	r0, sp, #36	; 0x24
   be056:	f001 f8a5 	bl	bf1a4 <asctime_r>
    int len = strlen(ascstr);
   be05a:	a802      	add	r0, sp, #8
   be05c:	f001 f9d7 	bl	bf40e <strlen>
    ascstr[len-1] = 0; // remove final newline
   be060:	ab12      	add	r3, sp, #72	; 0x48
   be062:	4418      	add	r0, r3
    return String(ascstr);
   be064:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   be066:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   be06a:	4620      	mov	r0, r4
   be06c:	f7ff fd7d 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
}
   be070:	4620      	mov	r0, r4
   be072:	b013      	add	sp, #76	; 0x4c
   be074:	bd30      	pop	{r4, r5, pc}
   be076:	bf00      	nop
   be078:	2003e6e0 	.word	0x2003e6e0
   be07c:	2003e6d8 	.word	0x2003e6d8

000be080 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   be080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be084:	b0a4      	sub	sp, #144	; 0x90
   be086:	4607      	mov	r7, r0
   be088:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be08a:	a814      	add	r0, sp, #80	; 0x50
{
   be08c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be08e:	223f      	movs	r2, #63	; 0x3f
{
   be090:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be092:	f001 f9d8 	bl	bf446 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   be096:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   be098:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   be09a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   be09e:	f001 f9b6 	bl	bf40e <strlen>
   be0a2:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   be0a4:	bb4c      	cbnz	r4, be0fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   be0a6:	4929      	ldr	r1, [pc, #164]	; (be14c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   be0a8:	a803      	add	r0, sp, #12
   be0aa:	f001 f98a 	bl	bf3c2 <strcpy>
   be0ae:	ac14      	add	r4, sp, #80	; 0x50
{
   be0b0:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   be0b2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   be0b6:	45b1      	cmp	r9, r6
   be0b8:	d934      	bls.n	be124 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   be0ba:	7823      	ldrb	r3, [r4, #0]
   be0bc:	2b25      	cmp	r3, #37	; 0x25
   be0be:	f106 0a01 	add.w	sl, r6, #1
   be0c2:	d117      	bne.n	be0f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   be0c4:	7863      	ldrb	r3, [r4, #1]
   be0c6:	2b7a      	cmp	r3, #122	; 0x7a
   be0c8:	d114      	bne.n	be0f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   be0ca:	a803      	add	r0, sp, #12
   be0cc:	f001 f99f 	bl	bf40e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   be0d0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   be0d2:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   be0d4:	1830      	adds	r0, r6, r0
   be0d6:	4418      	add	r0, r3
   be0d8:	eba9 0206 	sub.w	r2, r9, r6
   be0dc:	1ca1      	adds	r1, r4, #2
   be0de:	f001 f8b3 	bl	bf248 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   be0e2:	462a      	mov	r2, r5
   be0e4:	a903      	add	r1, sp, #12
   be0e6:	4620      	mov	r0, r4
   be0e8:	f001 f8ae 	bl	bf248 <memcpy>
            len = strlen(format_str);
   be0ec:	a814      	add	r0, sp, #80	; 0x50
   be0ee:	f001 f98e 	bl	bf40e <strlen>
   be0f2:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   be0f4:	3401      	adds	r4, #1
   be0f6:	4656      	mov	r6, sl
   be0f8:	e7db      	b.n	be0b2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   be0fa:	233c      	movs	r3, #60	; 0x3c
   be0fc:	fb94 f2f3 	sdiv	r2, r4, r3
   be100:	2a00      	cmp	r2, #0
   be102:	bfb8      	it	lt
   be104:	4252      	neglt	r2, r2
   be106:	fbb2 f1f3 	udiv	r1, r2, r3
   be10a:	fb03 2211 	mls	r2, r3, r1, r2
   be10e:	9200      	str	r2, [sp, #0]
   be110:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   be114:	4a0e      	ldr	r2, [pc, #56]	; (be150 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   be116:	fb94 f3f3 	sdiv	r3, r4, r3
   be11a:	2110      	movs	r1, #16
   be11c:	a803      	add	r0, sp, #12
   be11e:	f7fd f917 	bl	bb350 <snprintf>
   be122:	e7c4      	b.n	be0ae <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   be124:	2100      	movs	r1, #0
   be126:	222e      	movs	r2, #46	; 0x2e
   be128:	a808      	add	r0, sp, #32
   be12a:	9107      	str	r1, [sp, #28]
   be12c:	f001 f8b4 	bl	bf298 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   be130:	4643      	mov	r3, r8
   be132:	aa14      	add	r2, sp, #80	; 0x50
   be134:	2132      	movs	r1, #50	; 0x32
   be136:	a807      	add	r0, sp, #28
   be138:	f7fd f942 	bl	bb3c0 <strftime>
    return String(buf);
   be13c:	a907      	add	r1, sp, #28
   be13e:	4638      	mov	r0, r7
   be140:	f7ff fd13 	bl	bdb6a <_ZN6StringC1EPK19__FlashStringHelper>
}
   be144:	4638      	mov	r0, r7
   be146:	b024      	add	sp, #144	; 0x90
   be148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be14c:	000c0527 	.word	0x000c0527
   be150:	000c0529 	.word	0x000c0529

000be154 <_ZN9TimeClass6formatExPKc>:
{
   be154:	b5f0      	push	{r4, r5, r6, r7, lr}
   be156:	b08d      	sub	sp, #52	; 0x34
   be158:	e9cd 2300 	strd	r2, r3, [sp]
   be15c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   be15e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   be160:	b915      	cbnz	r5, be168 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   be162:	4b19      	ldr	r3, [pc, #100]	; (be1c8 <_ZN9TimeClass6formatExPKc+0x74>)
   be164:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   be166:	b12d      	cbz	r5, be174 <_ZN9TimeClass6formatExPKc+0x20>
   be168:	4b18      	ldr	r3, [pc, #96]	; (be1cc <_ZN9TimeClass6formatExPKc+0x78>)
   be16a:	4628      	mov	r0, r5
   be16c:	6819      	ldr	r1, [r3, #0]
   be16e:	f001 f91e 	bl	bf3ae <strcmp>
   be172:	b938      	cbnz	r0, be184 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   be174:	e9dd 2300 	ldrd	r2, r3, [sp]
   be178:	4620      	mov	r0, r4
   be17a:	f7ff ff45 	bl	be008 <_ZN9TimeClass7timeStrEx>
}
   be17e:	4620      	mov	r0, r4
   be180:	b00d      	add	sp, #52	; 0x34
   be182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   be184:	4e12      	ldr	r6, [pc, #72]	; (be1d0 <_ZN9TimeClass6formatExPKc+0x7c>)
   be186:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   be188:	4f12      	ldr	r7, [pc, #72]	; (be1d4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   be18a:	e9d6 3200 	ldrd	r3, r2, [r6]
   be18e:	185b      	adds	r3, r3, r1
   be190:	9901      	ldr	r1, [sp, #4]
   be192:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   be196:	e9d7 0100 	ldrd	r0, r1, [r7]
   be19a:	181b      	adds	r3, r3, r0
   be19c:	eb42 0201 	adc.w	r2, r2, r1
   be1a0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   be1a4:	2100      	movs	r1, #0
   be1a6:	2224      	movs	r2, #36	; 0x24
   be1a8:	a803      	add	r0, sp, #12
   be1aa:	f001 f875 	bl	bf298 <memset>
    localtime_r(&t, &calendar_time);
   be1ae:	a903      	add	r1, sp, #12
   be1b0:	4668      	mov	r0, sp
   be1b2:	f7fd f90d 	bl	bb3d0 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   be1b6:	6832      	ldr	r2, [r6, #0]
   be1b8:	683b      	ldr	r3, [r7, #0]
   be1ba:	a903      	add	r1, sp, #12
   be1bc:	4413      	add	r3, r2
   be1be:	4620      	mov	r0, r4
   be1c0:	462a      	mov	r2, r5
   be1c2:	f7ff ff5d 	bl	be080 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   be1c6:	e7da      	b.n	be17e <_ZN9TimeClass6formatExPKc+0x2a>
   be1c8:	2003e6b0 	.word	0x2003e6b0
   be1cc:	2003de2c 	.word	0x2003de2c
   be1d0:	2003e6e0 	.word	0x2003e6e0
   be1d4:	2003e6d8 	.word	0x2003e6d8

000be1d8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   be1d8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   be1da:	2000      	movs	r0, #0
   be1dc:	f7fc fd0a 	bl	babf4 <hal_rtc_time_is_valid>
    if (rtcstate)
   be1e0:	4604      	mov	r4, r0
   be1e2:	b9a0      	cbnz	r0, be20e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   be1e4:	f7fc ff50 	bl	bb088 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   be1e8:	2801      	cmp	r0, #1
   be1ea:	d110      	bne.n	be20e <_ZN9TimeClass7isValidEv+0x36>
   be1ec:	4620      	mov	r0, r4
   be1ee:	f7fc ff83 	bl	bb0f8 <system_thread_get_state>
   be1f2:	b960      	cbnz	r0, be20e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   be1f4:	f7ff fede 	bl	bdfb4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   be1f8:	b910      	cbnz	r0, be200 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   be1fa:	f7fc ffd9 	bl	bb1b0 <spark_process>
        while (_while() && !_condition()) {
   be1fe:	e7f9      	b.n	be1f4 <_ZN9TimeClass7isValidEv+0x1c>
   be200:	f7ff fed8 	bl	bdfb4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   be204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   be208:	2000      	movs	r0, #0
   be20a:	f7fc bcf3 	b.w	babf4 <hal_rtc_time_is_valid>
}
   be20e:	4620      	mov	r0, r4
   be210:	bd10      	pop	{r4, pc}

000be212 <_ZN9TimeClass3nowEv>:
{
   be212:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   be214:	f7ff ffe0 	bl	be1d8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   be218:	2210      	movs	r2, #16
   be21a:	2100      	movs	r1, #0
   be21c:	4668      	mov	r0, sp
   be21e:	f001 f83b 	bl	bf298 <memset>
    hal_rtc_get_time(&tv, nullptr);
   be222:	2100      	movs	r1, #0
   be224:	4668      	mov	r0, sp
   be226:	f7fc fcf5 	bl	bac14 <hal_rtc_get_time>
}
   be22a:	9800      	ldr	r0, [sp, #0]
   be22c:	b005      	add	sp, #20
   be22e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be234 <_ZN9TimeClass4hourEv>:
{
   be234:	b508      	push	{r3, lr}
	return hour(now());
   be236:	f7ff ffec 	bl	be212 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   be23a:	17c1      	asrs	r1, r0, #31
   be23c:	f7ff fe84 	bl	bdf48 <_ZL22Refresh_UnixTime_Cachex>
}
   be240:	4b01      	ldr	r3, [pc, #4]	; (be248 <_ZN9TimeClass4hourEv+0x14>)
   be242:	6898      	ldr	r0, [r3, #8]
   be244:	bd08      	pop	{r3, pc}
   be246:	bf00      	nop
   be248:	2003e6b4 	.word	0x2003e6b4

000be24c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   be24c:	4b02      	ldr	r3, [pc, #8]	; (be258 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   be24e:	681a      	ldr	r2, [r3, #0]
   be250:	4b02      	ldr	r3, [pc, #8]	; (be25c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   be252:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   be254:	4770      	bx	lr
   be256:	bf00      	nop
   be258:	2003de2c 	.word	0x2003de2c
   be25c:	2003e6b0 	.word	0x2003e6b0

000be260 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   be260:	4770      	bx	lr

000be262 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   be262:	7441      	strb	r1, [r0, #17]
}
   be264:	4770      	bx	lr

000be266 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   be266:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   be268:	7c00      	ldrb	r0, [r0, #16]
   be26a:	f7fc fe83 	bl	baf74 <hal_usart_available_data_for_write>
}
   be26e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be272:	bd08      	pop	{r3, pc}

000be274 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   be274:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   be276:	7c00      	ldrb	r0, [r0, #16]
   be278:	f7fc fe54 	bl	baf24 <hal_usart_available>
}
   be27c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be280:	bd08      	pop	{r3, pc}

000be282 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   be282:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   be284:	7c00      	ldrb	r0, [r0, #16]
   be286:	f7fc fe5d 	bl	baf44 <hal_usart_peek>
}
   be28a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be28e:	bd08      	pop	{r3, pc}

000be290 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   be290:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   be292:	7c00      	ldrb	r0, [r0, #16]
   be294:	f7fc fe4e 	bl	baf34 <hal_usart_read>
}
   be298:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be29c:	bd08      	pop	{r3, pc}

000be29e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   be29e:	7c00      	ldrb	r0, [r0, #16]
   be2a0:	f7fc be58 	b.w	baf54 <hal_usart_flush>

000be2a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   be2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be2a6:	7c45      	ldrb	r5, [r0, #17]
{
   be2a8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be2aa:	b12d      	cbz	r5, be2b8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   be2ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   be2ae:	b003      	add	sp, #12
   be2b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   be2b4:	f7fc be2e 	b.w	baf14 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be2b8:	7c00      	ldrb	r0, [r0, #16]
   be2ba:	9101      	str	r1, [sp, #4]
   be2bc:	f7fc fe5a 	bl	baf74 <hal_usart_available_data_for_write>
   be2c0:	2800      	cmp	r0, #0
   be2c2:	9901      	ldr	r1, [sp, #4]
   be2c4:	dcf2      	bgt.n	be2ac <_ZN11USARTSerial5writeEh+0x8>
}
   be2c6:	4628      	mov	r0, r5
   be2c8:	b003      	add	sp, #12
   be2ca:	bd30      	pop	{r4, r5, pc}

000be2cc <_ZN11USARTSerialD0Ev>:
   be2cc:	b510      	push	{r4, lr}
   be2ce:	2114      	movs	r1, #20
   be2d0:	4604      	mov	r4, r0
   be2d2:	f7f5 fee4 	bl	b409e <_ZdlPvj>
   be2d6:	4620      	mov	r0, r4
   be2d8:	bd10      	pop	{r4, pc}
	...

000be2dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   be2dc:	b510      	push	{r4, lr}
   be2de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   be2e2:	4604      	mov	r4, r0
   be2e4:	4608      	mov	r0, r1
   be2e6:	4611      	mov	r1, r2
   be2e8:	2200      	movs	r2, #0
   be2ea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   be2ee:	4b04      	ldr	r3, [pc, #16]	; (be300 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   be2f0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   be2f2:	2301      	movs	r3, #1
  _serial = serial;
   be2f4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   be2f6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   be2f8:	f7fc fe4c 	bl	baf94 <hal_usart_init_ex>
}
   be2fc:	4620      	mov	r0, r4
   be2fe:	bd10      	pop	{r4, pc}
   be300:	000c0e94 	.word	0x000c0e94

000be304 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   be304:	7c00      	ldrb	r0, [r0, #16]
   be306:	2300      	movs	r3, #0
   be308:	f7fc be3c 	b.w	baf84 <hal_usart_begin_config>

000be30c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   be30c:	2200      	movs	r2, #0
   be30e:	f7ff bff9 	b.w	be304 <_ZN11USARTSerial5beginEmm>

000be312 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   be312:	7c00      	ldrb	r0, [r0, #16]
   be314:	f7fc bdf6 	b.w	baf04 <hal_usart_end>

000be318 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   be318:	7441      	strb	r1, [r0, #17]
}
   be31a:	4770      	bx	lr

000be31c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be31c:	4770      	bx	lr

000be31e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   be31e:	4770      	bx	lr

000be320 <_ZN9USBSerial4readEv>:
{
   be320:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   be322:	2100      	movs	r1, #0
   be324:	7c00      	ldrb	r0, [r0, #16]
   be326:	f7fc fe65 	bl	baff4 <HAL_USB_USART_Receive_Data>
}
   be32a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be32e:	bd08      	pop	{r3, pc}

000be330 <_ZN9USBSerial4peekEv>:
{
   be330:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   be332:	2101      	movs	r1, #1
   be334:	7c00      	ldrb	r0, [r0, #16]
   be336:	f7fc fe5d 	bl	baff4 <HAL_USB_USART_Receive_Data>
}
   be33a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be33e:	bd08      	pop	{r3, pc}

000be340 <_ZN9USBSerial17availableForWriteEv>:
{
   be340:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   be342:	7c00      	ldrb	r0, [r0, #16]
   be344:	f7fc fe4e 	bl	bafe4 <HAL_USB_USART_Available_Data_For_Write>
}
   be348:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be34c:	bd08      	pop	{r3, pc}

000be34e <_ZN9USBSerial9availableEv>:
{
   be34e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   be350:	7c00      	ldrb	r0, [r0, #16]
   be352:	f7fc fe3f 	bl	bafd4 <HAL_USB_USART_Available_Data>
}
   be356:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be35a:	bd08      	pop	{r3, pc}

000be35c <_ZN9USBSerial5writeEh>:
{
   be35c:	b513      	push	{r0, r1, r4, lr}
   be35e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   be360:	7c00      	ldrb	r0, [r0, #16]
{
   be362:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   be364:	f7fc fe3e 	bl	bafe4 <HAL_USB_USART_Available_Data_For_Write>
   be368:	2800      	cmp	r0, #0
   be36a:	9901      	ldr	r1, [sp, #4]
   be36c:	dc01      	bgt.n	be372 <_ZN9USBSerial5writeEh+0x16>
   be36e:	7c60      	ldrb	r0, [r4, #17]
   be370:	b120      	cbz	r0, be37c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   be372:	7c20      	ldrb	r0, [r4, #16]
   be374:	f7fc fe46 	bl	bb004 <HAL_USB_USART_Send_Data>
   be378:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   be37c:	b002      	add	sp, #8
   be37e:	bd10      	pop	{r4, pc}

000be380 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   be380:	7c00      	ldrb	r0, [r0, #16]
   be382:	f7fc be47 	b.w	bb014 <HAL_USB_USART_Flush_Data>

000be386 <_ZN9USBSerialD0Ev>:
   be386:	b510      	push	{r4, lr}
   be388:	2114      	movs	r1, #20
   be38a:	4604      	mov	r4, r0
   be38c:	f7f5 fe87 	bl	b409e <_ZdlPvj>
   be390:	4620      	mov	r0, r4
   be392:	bd10      	pop	{r4, pc}

000be394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   be394:	b510      	push	{r4, lr}
   be396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   be39a:	4604      	mov	r4, r0
   be39c:	4608      	mov	r0, r1
   be39e:	2100      	movs	r1, #0
   be3a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   be3a4:	4b04      	ldr	r3, [pc, #16]	; (be3b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   be3a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   be3a8:	2301      	movs	r3, #1
  _serial = serial;
   be3aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   be3ac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   be3ae:	4611      	mov	r1, r2
   be3b0:	f7fc fdf8 	bl	bafa4 <HAL_USB_USART_Init>
}
   be3b4:	4620      	mov	r0, r4
   be3b6:	bd10      	pop	{r4, pc}
   be3b8:	000c0ec4 	.word	0x000c0ec4

000be3bc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   be3bc:	7c00      	ldrb	r0, [r0, #16]
   be3be:	2200      	movs	r2, #0
   be3c0:	f7fc bdf8 	b.w	bafb4 <HAL_USB_USART_Begin>

000be3c4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   be3c4:	7c00      	ldrb	r0, [r0, #16]
   be3c6:	f7fc bdfd 	b.w	bafc4 <HAL_USB_USART_End>

000be3ca <_Z19acquireSerialBufferv>:
{
   be3ca:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   be3cc:	2214      	movs	r2, #20
{
   be3ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   be3d0:	2100      	movs	r1, #0
   be3d2:	f000 ff61 	bl	bf298 <memset>
}
   be3d6:	4620      	mov	r0, r4
   be3d8:	bd10      	pop	{r4, pc}
	...

000be3dc <_Z16_fetch_usbserialv>:
{
   be3dc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be3de:	4c0f      	ldr	r4, [pc, #60]	; (be41c <_Z16_fetch_usbserialv+0x40>)
{
   be3e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   be3e2:	a803      	add	r0, sp, #12
   be3e4:	f7ff fff1 	bl	be3ca <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be3e8:	7821      	ldrb	r1, [r4, #0]
   be3ea:	f3bf 8f5b 	dmb	ish
   be3ee:	f011 0101 	ands.w	r1, r1, #1
   be3f2:	d10f      	bne.n	be414 <_Z16_fetch_usbserialv+0x38>
   be3f4:	4620      	mov	r0, r4
   be3f6:	9101      	str	r1, [sp, #4]
   be3f8:	f7f5 fe60 	bl	b40bc <__cxa_guard_acquire>
   be3fc:	9901      	ldr	r1, [sp, #4]
   be3fe:	b148      	cbz	r0, be414 <_Z16_fetch_usbserialv+0x38>
   be400:	aa03      	add	r2, sp, #12
   be402:	4807      	ldr	r0, [pc, #28]	; (be420 <_Z16_fetch_usbserialv+0x44>)
   be404:	f7ff ffc6 	bl	be394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   be408:	4620      	mov	r0, r4
   be40a:	f7f5 fe5c 	bl	b40c6 <__cxa_guard_release>
   be40e:	4805      	ldr	r0, [pc, #20]	; (be424 <_Z16_fetch_usbserialv+0x48>)
   be410:	f000 feee 	bl	bf1f0 <atexit>
	return _usbserial;
}
   be414:	4802      	ldr	r0, [pc, #8]	; (be420 <_Z16_fetch_usbserialv+0x44>)
   be416:	b008      	add	sp, #32
   be418:	bd10      	pop	{r4, pc}
   be41a:	bf00      	nop
   be41c:	2003e6f0 	.word	0x2003e6f0
   be420:	2003e6f4 	.word	0x2003e6f4
   be424:	000be31d 	.word	0x000be31d

000be428 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   be428:	4b01      	ldr	r3, [pc, #4]	; (be430 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   be42a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   be42c:	4770      	bx	lr
   be42e:	bf00      	nop
   be430:	2003de34 	.word	0x2003de34

000be434 <serialEventRun>:
{
   be434:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   be436:	4b0b      	ldr	r3, [pc, #44]	; (be464 <serialEventRun+0x30>)
   be438:	b143      	cbz	r3, be44c <serialEventRun+0x18>
   be43a:	f7ff ffcf 	bl	be3dc <_Z16_fetch_usbserialv>
   be43e:	6803      	ldr	r3, [r0, #0]
   be440:	691b      	ldr	r3, [r3, #16]
   be442:	4798      	blx	r3
   be444:	2800      	cmp	r0, #0
   be446:	dd01      	ble.n	be44c <serialEventRun+0x18>
        serialEvent();
   be448:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   be44c:	4b06      	ldr	r3, [pc, #24]	; (be468 <serialEventRun+0x34>)
   be44e:	b143      	cbz	r3, be462 <serialEventRun+0x2e>
   be450:	f000 f9c2 	bl	be7d8 <_Z22__fetch_global_Serial1v>
   be454:	6803      	ldr	r3, [r0, #0]
   be456:	691b      	ldr	r3, [r3, #16]
   be458:	4798      	blx	r3
   be45a:	2800      	cmp	r0, #0
   be45c:	dd01      	ble.n	be462 <serialEventRun+0x2e>
        serialEvent1();
   be45e:	f3af 8000 	nop.w
}
   be462:	bd08      	pop	{r3, pc}
	...

000be46c <_post_loop>:
{
   be46c:	b508      	push	{r3, lr}
	serialEventRun();
   be46e:	f7ff ffe1 	bl	be434 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   be472:	f7fc fbb7 	bl	babe4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   be476:	4b01      	ldr	r3, [pc, #4]	; (be47c <_post_loop+0x10>)
   be478:	6018      	str	r0, [r3, #0]
}
   be47a:	bd08      	pop	{r3, pc}
   be47c:	2003e710 	.word	0x2003e710

000be480 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   be480:	4805      	ldr	r0, [pc, #20]	; (be498 <_Z33system_initialize_user_backup_ramv+0x18>)
   be482:	4a06      	ldr	r2, [pc, #24]	; (be49c <_Z33system_initialize_user_backup_ramv+0x1c>)
   be484:	4906      	ldr	r1, [pc, #24]	; (be4a0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   be486:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   be488:	1a12      	subs	r2, r2, r0
   be48a:	f000 fedd 	bl	bf248 <memcpy>
    __backup_sram_signature = signature;
   be48e:	4b05      	ldr	r3, [pc, #20]	; (be4a4 <_Z33system_initialize_user_backup_ramv+0x24>)
   be490:	4a05      	ldr	r2, [pc, #20]	; (be4a8 <_Z33system_initialize_user_backup_ramv+0x28>)
   be492:	601a      	str	r2, [r3, #0]
}
   be494:	bd08      	pop	{r3, pc}
   be496:	bf00      	nop
   be498:	2003f400 	.word	0x2003f400
   be49c:	2003f404 	.word	0x2003f404
   be4a0:	000c1184 	.word	0x000c1184
   be4a4:	2003f400 	.word	0x2003f400
   be4a8:	9a271c1e 	.word	0x9a271c1e

000be4ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   be4ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   be4ae:	2300      	movs	r3, #0
   be4b0:	9300      	str	r3, [sp, #0]
   be4b2:	461a      	mov	r2, r3
   be4b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   be4b8:	f7fc fe38 	bl	bb12c <system_ctrl_set_result>
}
   be4bc:	b003      	add	sp, #12
   be4be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be4c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   be4c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   be4c6:	8843      	ldrh	r3, [r0, #2]
   be4c8:	2b0a      	cmp	r3, #10
   be4ca:	d008      	beq.n	be4de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   be4cc:	2b50      	cmp	r3, #80	; 0x50
   be4ce:	d10b      	bne.n	be4e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   be4d0:	4b09      	ldr	r3, [pc, #36]	; (be4f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   be4d2:	681b      	ldr	r3, [r3, #0]
   be4d4:	b14b      	cbz	r3, be4ea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   be4d6:	b003      	add	sp, #12
   be4d8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   be4dc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   be4de:	f7ff ffe5 	bl	be4ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   be4e2:	b003      	add	sp, #12
   be4e4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   be4e8:	2300      	movs	r3, #0
   be4ea:	9300      	str	r3, [sp, #0]
   be4ec:	461a      	mov	r2, r3
   be4ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   be4f2:	f7fc fe1b 	bl	bb12c <system_ctrl_set_result>
}
   be4f6:	e7f4      	b.n	be4e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   be4f8:	2003e70c 	.word	0x2003e70c

000be4fc <module_user_init_hook>:
{
   be4fc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   be4fe:	4812      	ldr	r0, [pc, #72]	; (be548 <module_user_init_hook+0x4c>)
   be500:	2100      	movs	r1, #0
   be502:	f7fc ff55 	bl	bb3b0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   be506:	4b11      	ldr	r3, [pc, #68]	; (be54c <module_user_init_hook+0x50>)
   be508:	681a      	ldr	r2, [r3, #0]
   be50a:	4b11      	ldr	r3, [pc, #68]	; (be550 <module_user_init_hook+0x54>)
   be50c:	429a      	cmp	r2, r3
   be50e:	4b11      	ldr	r3, [pc, #68]	; (be554 <module_user_init_hook+0x58>)
   be510:	bf0c      	ite	eq
   be512:	2201      	moveq	r2, #1
   be514:	2200      	movne	r2, #0
   be516:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   be518:	d001      	beq.n	be51e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   be51a:	f7ff ffb1 	bl	be480 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   be51e:	f7fc fb49 	bl	babb4 <HAL_RNG_GetRandomNumber>
   be522:	4604      	mov	r4, r0
    srand(seed);
   be524:	f000 fec0 	bl	bf2a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   be528:	4b0b      	ldr	r3, [pc, #44]	; (be558 <module_user_init_hook+0x5c>)
   be52a:	b113      	cbz	r3, be532 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   be52c:	4620      	mov	r0, r4
   be52e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   be532:	2100      	movs	r1, #0
   be534:	4808      	ldr	r0, [pc, #32]	; (be558 <module_user_init_hook+0x5c>)
   be536:	f7fc fe73 	bl	bb220 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   be53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   be53e:	4807      	ldr	r0, [pc, #28]	; (be55c <module_user_init_hook+0x60>)
   be540:	2100      	movs	r1, #0
   be542:	f7fc bde9 	b.w	bb118 <system_ctrl_set_app_request_handler>
   be546:	bf00      	nop
   be548:	000be429 	.word	0x000be429
   be54c:	2003f400 	.word	0x2003f400
   be550:	9a271c1e 	.word	0x9a271c1e
   be554:	2003e708 	.word	0x2003e708
   be558:	00000000 	.word	0x00000000
   be55c:	000be4c5 	.word	0x000be4c5

000be560 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   be560:	b508      	push	{r3, lr}
   be562:	4b02      	ldr	r3, [pc, #8]	; (be56c <spark_protocol_instance+0xc>)
   be564:	681b      	ldr	r3, [r3, #0]
   be566:	681b      	ldr	r3, [r3, #0]
   be568:	9301      	str	r3, [sp, #4]
   be56a:	bd08      	pop	{r3, pc}
   be56c:	0003025c 	.word	0x0003025c

000be570 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   be570:	b508      	push	{r3, lr}
   be572:	4b02      	ldr	r3, [pc, #8]	; (be57c <spark_protocol_set_product_id+0xc>)
   be574:	681b      	ldr	r3, [r3, #0]
   be576:	685b      	ldr	r3, [r3, #4]
   be578:	9301      	str	r3, [sp, #4]
   be57a:	bd08      	pop	{r3, pc}
   be57c:	0003025c 	.word	0x0003025c

000be580 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   be580:	b508      	push	{r3, lr}
   be582:	4b02      	ldr	r3, [pc, #8]	; (be58c <spark_protocol_set_product_firmware_version+0xc>)
   be584:	681b      	ldr	r3, [r3, #0]
   be586:	689b      	ldr	r3, [r3, #8]
   be588:	9301      	str	r3, [sp, #4]
   be58a:	bd08      	pop	{r3, pc}
   be58c:	0003025c 	.word	0x0003025c

000be590 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   be590:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   be592:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   be594:	d902      	bls.n	be59c <pinAvailable+0xc>
    return false;
   be596:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   be598:	b002      	add	sp, #8
   be59a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   be59c:	f1a0 030b 	sub.w	r3, r0, #11
   be5a0:	2b02      	cmp	r3, #2
   be5a2:	d81a      	bhi.n	be5da <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   be5a4:	4c17      	ldr	r4, [pc, #92]	; (be604 <pinAvailable+0x74>)
   be5a6:	7821      	ldrb	r1, [r4, #0]
   be5a8:	f3bf 8f5b 	dmb	ish
   be5ac:	f011 0101 	ands.w	r1, r1, #1
   be5b0:	d10b      	bne.n	be5ca <pinAvailable+0x3a>
   be5b2:	4620      	mov	r0, r4
   be5b4:	9101      	str	r1, [sp, #4]
   be5b6:	f7f5 fd81 	bl	b40bc <__cxa_guard_acquire>
   be5ba:	9901      	ldr	r1, [sp, #4]
   be5bc:	b128      	cbz	r0, be5ca <pinAvailable+0x3a>
   be5be:	4812      	ldr	r0, [pc, #72]	; (be608 <pinAvailable+0x78>)
   be5c0:	f7ff f9c8 	bl	bd954 <_ZN8SPIClassC1E19hal_spi_interface_t>
   be5c4:	4620      	mov	r0, r4
   be5c6:	f7f5 fd7e 	bl	b40c6 <__cxa_guard_release>
   be5ca:	4b0f      	ldr	r3, [pc, #60]	; (be608 <pinAvailable+0x78>)
   be5cc:	7818      	ldrb	r0, [r3, #0]
   be5ce:	f7fc fc11 	bl	badf4 <hal_spi_is_enabled>
   be5d2:	2800      	cmp	r0, #0
   be5d4:	d1df      	bne.n	be596 <pinAvailable+0x6>
  return true; // 'pin' is available
   be5d6:	2001      	movs	r0, #1
   be5d8:	e7de      	b.n	be598 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   be5da:	2801      	cmp	r0, #1
   be5dc:	d809      	bhi.n	be5f2 <pinAvailable+0x62>
   be5de:	f000 f897 	bl	be710 <_Z19__fetch_global_Wirev>
   be5e2:	2100      	movs	r1, #0
   be5e4:	7c00      	ldrb	r0, [r0, #16]
   be5e6:	f7fc fba5 	bl	bad34 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   be5ea:	f080 0001 	eor.w	r0, r0, #1
   be5ee:	b2c0      	uxtb	r0, r0
   be5f0:	e7d2      	b.n	be598 <pinAvailable+0x8>
   be5f2:	3809      	subs	r0, #9
   be5f4:	2801      	cmp	r0, #1
   be5f6:	d8ee      	bhi.n	be5d6 <pinAvailable+0x46>
   be5f8:	f000 f8ee 	bl	be7d8 <_Z22__fetch_global_Serial1v>
   be5fc:	7c00      	ldrb	r0, [r0, #16]
   be5fe:	f7fc fcb1 	bl	baf64 <hal_usart_is_enabled>
   be602:	e7f2      	b.n	be5ea <pinAvailable+0x5a>
   be604:	2003e450 	.word	0x2003e450
   be608:	2003e454 	.word	0x2003e454

000be60c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   be60c:	2823      	cmp	r0, #35	; 0x23
{
   be60e:	b538      	push	{r3, r4, r5, lr}
   be610:	4604      	mov	r4, r0
   be612:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   be614:	d80a      	bhi.n	be62c <pinMode+0x20>
   be616:	29ff      	cmp	r1, #255	; 0xff
   be618:	d008      	beq.n	be62c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   be61a:	f7ff ffb9 	bl	be590 <pinAvailable>
   be61e:	b128      	cbz	r0, be62c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   be620:	4629      	mov	r1, r5
   be622:	4620      	mov	r0, r4
}
   be624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   be628:	f7fc bb0c 	b.w	bac44 <HAL_Pin_Mode>
}
   be62c:	bd38      	pop	{r3, r4, r5, pc}

000be62e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   be62e:	b538      	push	{r3, r4, r5, lr}
   be630:	4604      	mov	r4, r0
   be632:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   be634:	f7fc fb0e 	bl	bac54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   be638:	28ff      	cmp	r0, #255	; 0xff
   be63a:	d010      	beq.n	be65e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   be63c:	2806      	cmp	r0, #6
   be63e:	d804      	bhi.n	be64a <digitalWrite+0x1c>
   be640:	234d      	movs	r3, #77	; 0x4d
   be642:	fa23 f000 	lsr.w	r0, r3, r0
   be646:	07c3      	lsls	r3, r0, #31
   be648:	d409      	bmi.n	be65e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   be64a:	4620      	mov	r0, r4
   be64c:	f7ff ffa0 	bl	be590 <pinAvailable>
   be650:	b128      	cbz	r0, be65e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   be652:	4629      	mov	r1, r5
   be654:	4620      	mov	r0, r4
}
   be656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   be65a:	f7fc bb03 	b.w	bac64 <HAL_GPIO_Write>
}
   be65e:	bd38      	pop	{r3, r4, r5, pc}

000be660 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   be660:	b510      	push	{r4, lr}
   be662:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   be664:	f7fc faf6 	bl	bac54 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   be668:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   be66a:	b2db      	uxtb	r3, r3
   be66c:	2b01      	cmp	r3, #1
   be66e:	d908      	bls.n	be682 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   be670:	4620      	mov	r0, r4
   be672:	f7ff ff8d 	bl	be590 <pinAvailable>
   be676:	b120      	cbz	r0, be682 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   be678:	4620      	mov	r0, r4
}
   be67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   be67e:	f7fc baf9 	b.w	bac74 <HAL_GPIO_Read>
}
   be682:	2000      	movs	r0, #0
   be684:	bd10      	pop	{r4, pc}

000be686 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   be686:	280d      	cmp	r0, #13
{
   be688:	b510      	push	{r4, lr}
   be68a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   be68c:	bf9c      	itt	ls
   be68e:	340e      	addls	r4, #14
   be690:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   be692:	4620      	mov	r0, r4
   be694:	f7ff ff7c 	bl	be590 <pinAvailable>
   be698:	b150      	cbz	r0, be6b0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   be69a:	2103      	movs	r1, #3
   be69c:	4620      	mov	r0, r4
   be69e:	f7fc fac9 	bl	bac34 <HAL_Validate_Pin_Function>
   be6a2:	2803      	cmp	r0, #3
   be6a4:	d104      	bne.n	be6b0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   be6a6:	4620      	mov	r0, r4
}
   be6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   be6ac:	f7fc bafa 	b.w	baca4 <hal_adc_read>
}
   be6b0:	2000      	movs	r0, #0
   be6b2:	bd10      	pop	{r4, pc}

000be6b4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be6b4:	4770      	bx	lr

000be6b6 <__tcf_1>:
   be6b6:	4770      	bx	lr

000be6b8 <_Z17acquireWireBufferv>:
{
   be6b8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   be6ba:	2520      	movs	r5, #32
   be6bc:	2314      	movs	r3, #20
{
   be6be:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   be6c0:	6003      	str	r3, [r0, #0]
   be6c2:	6085      	str	r5, [r0, #8]
   be6c4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be6c6:	4906      	ldr	r1, [pc, #24]	; (be6e0 <_Z17acquireWireBufferv+0x28>)
   be6c8:	4628      	mov	r0, r5
   be6ca:	f000 f8ab 	bl	be824 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be6ce:	4904      	ldr	r1, [pc, #16]	; (be6e0 <_Z17acquireWireBufferv+0x28>)
	};
   be6d0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be6d2:	4628      	mov	r0, r5
   be6d4:	f000 f8a6 	bl	be824 <_ZnajRKSt9nothrow_t>
	};
   be6d8:	60e0      	str	r0, [r4, #12]
}
   be6da:	4620      	mov	r0, r4
   be6dc:	bd38      	pop	{r3, r4, r5, pc}
   be6de:	bf00      	nop
   be6e0:	000c0eec 	.word	0x000c0eec

000be6e4 <_Z18acquireWire1Bufferv>:
   be6e4:	b538      	push	{r3, r4, r5, lr}
   be6e6:	2520      	movs	r5, #32
   be6e8:	2314      	movs	r3, #20
   be6ea:	4604      	mov	r4, r0
   be6ec:	6003      	str	r3, [r0, #0]
   be6ee:	6085      	str	r5, [r0, #8]
   be6f0:	6105      	str	r5, [r0, #16]
   be6f2:	4906      	ldr	r1, [pc, #24]	; (be70c <_Z18acquireWire1Bufferv+0x28>)
   be6f4:	4628      	mov	r0, r5
   be6f6:	f000 f895 	bl	be824 <_ZnajRKSt9nothrow_t>
   be6fa:	4904      	ldr	r1, [pc, #16]	; (be70c <_Z18acquireWire1Bufferv+0x28>)
   be6fc:	6060      	str	r0, [r4, #4]
   be6fe:	4628      	mov	r0, r5
   be700:	f000 f890 	bl	be824 <_ZnajRKSt9nothrow_t>
   be704:	60e0      	str	r0, [r4, #12]
   be706:	4620      	mov	r0, r4
   be708:	bd38      	pop	{r3, r4, r5, pc}
   be70a:	bf00      	nop
   be70c:	000c0eec 	.word	0x000c0eec

000be710 <_Z19__fetch_global_Wirev>:
{
   be710:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be712:	4d0e      	ldr	r5, [pc, #56]	; (be74c <_Z19__fetch_global_Wirev+0x3c>)
   be714:	7829      	ldrb	r1, [r5, #0]
   be716:	f3bf 8f5b 	dmb	ish
   be71a:	f011 0401 	ands.w	r4, r1, #1
{
   be71e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be720:	d111      	bne.n	be746 <_Z19__fetch_global_Wirev+0x36>
   be722:	4628      	mov	r0, r5
   be724:	f7f5 fcca 	bl	b40bc <__cxa_guard_acquire>
   be728:	b168      	cbz	r0, be746 <_Z19__fetch_global_Wirev+0x36>
   be72a:	a801      	add	r0, sp, #4
   be72c:	f7ff ffc4 	bl	be6b8 <_Z17acquireWireBufferv>
   be730:	aa01      	add	r2, sp, #4
   be732:	4621      	mov	r1, r4
   be734:	4806      	ldr	r0, [pc, #24]	; (be750 <_Z19__fetch_global_Wirev+0x40>)
   be736:	f7fd fbdf 	bl	bbef8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be73a:	4628      	mov	r0, r5
   be73c:	f7f5 fcc3 	bl	b40c6 <__cxa_guard_release>
   be740:	4804      	ldr	r0, [pc, #16]	; (be754 <_Z19__fetch_global_Wirev+0x44>)
   be742:	f000 fd55 	bl	bf1f0 <atexit>
	return wire;
}
   be746:	4802      	ldr	r0, [pc, #8]	; (be750 <_Z19__fetch_global_Wirev+0x40>)
   be748:	b007      	add	sp, #28
   be74a:	bd30      	pop	{r4, r5, pc}
   be74c:	2003e714 	.word	0x2003e714
   be750:	2003e71c 	.word	0x2003e71c
   be754:	000be6b5 	.word	0x000be6b5

000be758 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   be758:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be75a:	4c0e      	ldr	r4, [pc, #56]	; (be794 <_Z20__fetch_global_Wire1v+0x3c>)
   be75c:	7823      	ldrb	r3, [r4, #0]
   be75e:	f3bf 8f5b 	dmb	ish
   be762:	07db      	lsls	r3, r3, #31
{
   be764:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be766:	d411      	bmi.n	be78c <_Z20__fetch_global_Wire1v+0x34>
   be768:	4620      	mov	r0, r4
   be76a:	f7f5 fca7 	bl	b40bc <__cxa_guard_acquire>
   be76e:	b168      	cbz	r0, be78c <_Z20__fetch_global_Wire1v+0x34>
   be770:	a801      	add	r0, sp, #4
   be772:	f7ff ffb7 	bl	be6e4 <_Z18acquireWire1Bufferv>
   be776:	aa01      	add	r2, sp, #4
   be778:	2101      	movs	r1, #1
   be77a:	4807      	ldr	r0, [pc, #28]	; (be798 <_Z20__fetch_global_Wire1v+0x40>)
   be77c:	f7fd fbbc 	bl	bbef8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be780:	4620      	mov	r0, r4
   be782:	f7f5 fca0 	bl	b40c6 <__cxa_guard_release>
   be786:	4805      	ldr	r0, [pc, #20]	; (be79c <_Z20__fetch_global_Wire1v+0x44>)
   be788:	f000 fd32 	bl	bf1f0 <atexit>
	return wire;
}
   be78c:	4802      	ldr	r0, [pc, #8]	; (be798 <_Z20__fetch_global_Wire1v+0x40>)
   be78e:	b006      	add	sp, #24
   be790:	bd10      	pop	{r4, pc}
   be792:	bf00      	nop
   be794:	2003e718 	.word	0x2003e718
   be798:	2003e730 	.word	0x2003e730
   be79c:	000be6b7 	.word	0x000be6b7

000be7a0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be7a0:	4770      	bx	lr
	...

000be7a4 <_Z20acquireSerial1Bufferv>:
{
   be7a4:	b538      	push	{r3, r4, r5, lr}
   be7a6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   be7a8:	2514      	movs	r5, #20
   be7aa:	462a      	mov	r2, r5
   be7ac:	2100      	movs	r1, #0
   be7ae:	f000 fd73 	bl	bf298 <memset>
   be7b2:	8025      	strh	r5, [r4, #0]
   be7b4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be7b6:	4907      	ldr	r1, [pc, #28]	; (be7d4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   be7b8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be7ba:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   be7bc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be7be:	f000 f831 	bl	be824 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be7c2:	4904      	ldr	r1, [pc, #16]	; (be7d4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   be7c4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be7c6:	4628      	mov	r0, r5
   be7c8:	f000 f82c 	bl	be824 <_ZnajRKSt9nothrow_t>
    };
   be7cc:	60e0      	str	r0, [r4, #12]
}
   be7ce:	4620      	mov	r0, r4
   be7d0:	bd38      	pop	{r3, r4, r5, pc}
   be7d2:	bf00      	nop
   be7d4:	000c0eec 	.word	0x000c0eec

000be7d8 <_Z22__fetch_global_Serial1v>:
{
   be7d8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be7da:	4d0e      	ldr	r5, [pc, #56]	; (be814 <_Z22__fetch_global_Serial1v+0x3c>)
   be7dc:	7829      	ldrb	r1, [r5, #0]
   be7de:	f3bf 8f5b 	dmb	ish
   be7e2:	f011 0401 	ands.w	r4, r1, #1
{
   be7e6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be7e8:	d111      	bne.n	be80e <_Z22__fetch_global_Serial1v+0x36>
   be7ea:	4628      	mov	r0, r5
   be7ec:	f7f5 fc66 	bl	b40bc <__cxa_guard_acquire>
   be7f0:	b168      	cbz	r0, be80e <_Z22__fetch_global_Serial1v+0x36>
   be7f2:	a801      	add	r0, sp, #4
   be7f4:	f7ff ffd6 	bl	be7a4 <_Z20acquireSerial1Bufferv>
   be7f8:	aa01      	add	r2, sp, #4
   be7fa:	4621      	mov	r1, r4
   be7fc:	4806      	ldr	r0, [pc, #24]	; (be818 <_Z22__fetch_global_Serial1v+0x40>)
   be7fe:	f7ff fd6d 	bl	be2dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   be802:	4628      	mov	r0, r5
   be804:	f7f5 fc5f 	bl	b40c6 <__cxa_guard_release>
   be808:	4804      	ldr	r0, [pc, #16]	; (be81c <_Z22__fetch_global_Serial1v+0x44>)
   be80a:	f000 fcf1 	bl	bf1f0 <atexit>
    return serial1;
}
   be80e:	4802      	ldr	r0, [pc, #8]	; (be818 <_Z22__fetch_global_Serial1v+0x40>)
   be810:	b007      	add	sp, #28
   be812:	bd30      	pop	{r4, r5, pc}
   be814:	2003e744 	.word	0x2003e744
   be818:	2003e748 	.word	0x2003e748
   be81c:	000be7a1 	.word	0x000be7a1

000be820 <_ZnwjRKSt9nothrow_t>:
   be820:	f7f5 bc39 	b.w	b4096 <_Znwj>

000be824 <_ZnajRKSt9nothrow_t>:
   be824:	f7f5 bc39 	b.w	b409a <_Znaj>

000be828 <_ZSt17__throw_bad_allocv>:
   be828:	b508      	push	{r3, lr}
   be82a:	f7fc fda1 	bl	bb370 <abort>

000be82e <_ZSt20__throw_length_errorPKc>:
   be82e:	b508      	push	{r3, lr}
   be830:	f7fc fd9e 	bl	bb370 <abort>

000be834 <_ZSt25__throw_bad_function_callv>:
   be834:	b508      	push	{r3, lr}
   be836:	f7fc fd9b 	bl	bb370 <abort>
	...

000be83c <__aeabi_drsub>:
   be83c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   be840:	e002      	b.n	be848 <__adddf3>
   be842:	bf00      	nop

000be844 <__aeabi_dsub>:
   be844:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000be848 <__adddf3>:
   be848:	b530      	push	{r4, r5, lr}
   be84a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   be84e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   be852:	ea94 0f05 	teq	r4, r5
   be856:	bf08      	it	eq
   be858:	ea90 0f02 	teqeq	r0, r2
   be85c:	bf1f      	itttt	ne
   be85e:	ea54 0c00 	orrsne.w	ip, r4, r0
   be862:	ea55 0c02 	orrsne.w	ip, r5, r2
   be866:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   be86a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be86e:	f000 80e2 	beq.w	bea36 <__adddf3+0x1ee>
   be872:	ea4f 5454 	mov.w	r4, r4, lsr #21
   be876:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   be87a:	bfb8      	it	lt
   be87c:	426d      	neglt	r5, r5
   be87e:	dd0c      	ble.n	be89a <__adddf3+0x52>
   be880:	442c      	add	r4, r5
   be882:	ea80 0202 	eor.w	r2, r0, r2
   be886:	ea81 0303 	eor.w	r3, r1, r3
   be88a:	ea82 0000 	eor.w	r0, r2, r0
   be88e:	ea83 0101 	eor.w	r1, r3, r1
   be892:	ea80 0202 	eor.w	r2, r0, r2
   be896:	ea81 0303 	eor.w	r3, r1, r3
   be89a:	2d36      	cmp	r5, #54	; 0x36
   be89c:	bf88      	it	hi
   be89e:	bd30      	pophi	{r4, r5, pc}
   be8a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be8a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be8a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   be8ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   be8b0:	d002      	beq.n	be8b8 <__adddf3+0x70>
   be8b2:	4240      	negs	r0, r0
   be8b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be8b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be8bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be8c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be8c4:	d002      	beq.n	be8cc <__adddf3+0x84>
   be8c6:	4252      	negs	r2, r2
   be8c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be8cc:	ea94 0f05 	teq	r4, r5
   be8d0:	f000 80a7 	beq.w	bea22 <__adddf3+0x1da>
   be8d4:	f1a4 0401 	sub.w	r4, r4, #1
   be8d8:	f1d5 0e20 	rsbs	lr, r5, #32
   be8dc:	db0d      	blt.n	be8fa <__adddf3+0xb2>
   be8de:	fa02 fc0e 	lsl.w	ip, r2, lr
   be8e2:	fa22 f205 	lsr.w	r2, r2, r5
   be8e6:	1880      	adds	r0, r0, r2
   be8e8:	f141 0100 	adc.w	r1, r1, #0
   be8ec:	fa03 f20e 	lsl.w	r2, r3, lr
   be8f0:	1880      	adds	r0, r0, r2
   be8f2:	fa43 f305 	asr.w	r3, r3, r5
   be8f6:	4159      	adcs	r1, r3
   be8f8:	e00e      	b.n	be918 <__adddf3+0xd0>
   be8fa:	f1a5 0520 	sub.w	r5, r5, #32
   be8fe:	f10e 0e20 	add.w	lr, lr, #32
   be902:	2a01      	cmp	r2, #1
   be904:	fa03 fc0e 	lsl.w	ip, r3, lr
   be908:	bf28      	it	cs
   be90a:	f04c 0c02 	orrcs.w	ip, ip, #2
   be90e:	fa43 f305 	asr.w	r3, r3, r5
   be912:	18c0      	adds	r0, r0, r3
   be914:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   be918:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be91c:	d507      	bpl.n	be92e <__adddf3+0xe6>
   be91e:	f04f 0e00 	mov.w	lr, #0
   be922:	f1dc 0c00 	rsbs	ip, ip, #0
   be926:	eb7e 0000 	sbcs.w	r0, lr, r0
   be92a:	eb6e 0101 	sbc.w	r1, lr, r1
   be92e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   be932:	d31b      	bcc.n	be96c <__adddf3+0x124>
   be934:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   be938:	d30c      	bcc.n	be954 <__adddf3+0x10c>
   be93a:	0849      	lsrs	r1, r1, #1
   be93c:	ea5f 0030 	movs.w	r0, r0, rrx
   be940:	ea4f 0c3c 	mov.w	ip, ip, rrx
   be944:	f104 0401 	add.w	r4, r4, #1
   be948:	ea4f 5244 	mov.w	r2, r4, lsl #21
   be94c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   be950:	f080 809a 	bcs.w	bea88 <__adddf3+0x240>
   be954:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   be958:	bf08      	it	eq
   be95a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be95e:	f150 0000 	adcs.w	r0, r0, #0
   be962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be966:	ea41 0105 	orr.w	r1, r1, r5
   be96a:	bd30      	pop	{r4, r5, pc}
   be96c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   be970:	4140      	adcs	r0, r0
   be972:	eb41 0101 	adc.w	r1, r1, r1
   be976:	3c01      	subs	r4, #1
   be978:	bf28      	it	cs
   be97a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   be97e:	d2e9      	bcs.n	be954 <__adddf3+0x10c>
   be980:	f091 0f00 	teq	r1, #0
   be984:	bf04      	itt	eq
   be986:	4601      	moveq	r1, r0
   be988:	2000      	moveq	r0, #0
   be98a:	fab1 f381 	clz	r3, r1
   be98e:	bf08      	it	eq
   be990:	3320      	addeq	r3, #32
   be992:	f1a3 030b 	sub.w	r3, r3, #11
   be996:	f1b3 0220 	subs.w	r2, r3, #32
   be99a:	da0c      	bge.n	be9b6 <__adddf3+0x16e>
   be99c:	320c      	adds	r2, #12
   be99e:	dd08      	ble.n	be9b2 <__adddf3+0x16a>
   be9a0:	f102 0c14 	add.w	ip, r2, #20
   be9a4:	f1c2 020c 	rsb	r2, r2, #12
   be9a8:	fa01 f00c 	lsl.w	r0, r1, ip
   be9ac:	fa21 f102 	lsr.w	r1, r1, r2
   be9b0:	e00c      	b.n	be9cc <__adddf3+0x184>
   be9b2:	f102 0214 	add.w	r2, r2, #20
   be9b6:	bfd8      	it	le
   be9b8:	f1c2 0c20 	rsble	ip, r2, #32
   be9bc:	fa01 f102 	lsl.w	r1, r1, r2
   be9c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   be9c4:	bfdc      	itt	le
   be9c6:	ea41 010c 	orrle.w	r1, r1, ip
   be9ca:	4090      	lslle	r0, r2
   be9cc:	1ae4      	subs	r4, r4, r3
   be9ce:	bfa2      	ittt	ge
   be9d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   be9d4:	4329      	orrge	r1, r5
   be9d6:	bd30      	popge	{r4, r5, pc}
   be9d8:	ea6f 0404 	mvn.w	r4, r4
   be9dc:	3c1f      	subs	r4, #31
   be9de:	da1c      	bge.n	bea1a <__adddf3+0x1d2>
   be9e0:	340c      	adds	r4, #12
   be9e2:	dc0e      	bgt.n	bea02 <__adddf3+0x1ba>
   be9e4:	f104 0414 	add.w	r4, r4, #20
   be9e8:	f1c4 0220 	rsb	r2, r4, #32
   be9ec:	fa20 f004 	lsr.w	r0, r0, r4
   be9f0:	fa01 f302 	lsl.w	r3, r1, r2
   be9f4:	ea40 0003 	orr.w	r0, r0, r3
   be9f8:	fa21 f304 	lsr.w	r3, r1, r4
   be9fc:	ea45 0103 	orr.w	r1, r5, r3
   bea00:	bd30      	pop	{r4, r5, pc}
   bea02:	f1c4 040c 	rsb	r4, r4, #12
   bea06:	f1c4 0220 	rsb	r2, r4, #32
   bea0a:	fa20 f002 	lsr.w	r0, r0, r2
   bea0e:	fa01 f304 	lsl.w	r3, r1, r4
   bea12:	ea40 0003 	orr.w	r0, r0, r3
   bea16:	4629      	mov	r1, r5
   bea18:	bd30      	pop	{r4, r5, pc}
   bea1a:	fa21 f004 	lsr.w	r0, r1, r4
   bea1e:	4629      	mov	r1, r5
   bea20:	bd30      	pop	{r4, r5, pc}
   bea22:	f094 0f00 	teq	r4, #0
   bea26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bea2a:	bf06      	itte	eq
   bea2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bea30:	3401      	addeq	r4, #1
   bea32:	3d01      	subne	r5, #1
   bea34:	e74e      	b.n	be8d4 <__adddf3+0x8c>
   bea36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bea3a:	bf18      	it	ne
   bea3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bea40:	d029      	beq.n	bea96 <__adddf3+0x24e>
   bea42:	ea94 0f05 	teq	r4, r5
   bea46:	bf08      	it	eq
   bea48:	ea90 0f02 	teqeq	r0, r2
   bea4c:	d005      	beq.n	bea5a <__adddf3+0x212>
   bea4e:	ea54 0c00 	orrs.w	ip, r4, r0
   bea52:	bf04      	itt	eq
   bea54:	4619      	moveq	r1, r3
   bea56:	4610      	moveq	r0, r2
   bea58:	bd30      	pop	{r4, r5, pc}
   bea5a:	ea91 0f03 	teq	r1, r3
   bea5e:	bf1e      	ittt	ne
   bea60:	2100      	movne	r1, #0
   bea62:	2000      	movne	r0, #0
   bea64:	bd30      	popne	{r4, r5, pc}
   bea66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bea6a:	d105      	bne.n	bea78 <__adddf3+0x230>
   bea6c:	0040      	lsls	r0, r0, #1
   bea6e:	4149      	adcs	r1, r1
   bea70:	bf28      	it	cs
   bea72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bea76:	bd30      	pop	{r4, r5, pc}
   bea78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bea7c:	bf3c      	itt	cc
   bea7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bea82:	bd30      	popcc	{r4, r5, pc}
   bea84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bea88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bea8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bea90:	f04f 0000 	mov.w	r0, #0
   bea94:	bd30      	pop	{r4, r5, pc}
   bea96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bea9a:	bf1a      	itte	ne
   bea9c:	4619      	movne	r1, r3
   bea9e:	4610      	movne	r0, r2
   beaa0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   beaa4:	bf1c      	itt	ne
   beaa6:	460b      	movne	r3, r1
   beaa8:	4602      	movne	r2, r0
   beaaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   beaae:	bf06      	itte	eq
   beab0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   beab4:	ea91 0f03 	teqeq	r1, r3
   beab8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   beabc:	bd30      	pop	{r4, r5, pc}
   beabe:	bf00      	nop

000beac0 <__aeabi_ui2d>:
   beac0:	f090 0f00 	teq	r0, #0
   beac4:	bf04      	itt	eq
   beac6:	2100      	moveq	r1, #0
   beac8:	4770      	bxeq	lr
   beaca:	b530      	push	{r4, r5, lr}
   beacc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bead0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bead4:	f04f 0500 	mov.w	r5, #0
   bead8:	f04f 0100 	mov.w	r1, #0
   beadc:	e750      	b.n	be980 <__adddf3+0x138>
   beade:	bf00      	nop

000beae0 <__aeabi_i2d>:
   beae0:	f090 0f00 	teq	r0, #0
   beae4:	bf04      	itt	eq
   beae6:	2100      	moveq	r1, #0
   beae8:	4770      	bxeq	lr
   beaea:	b530      	push	{r4, r5, lr}
   beaec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   beaf0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   beaf4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   beaf8:	bf48      	it	mi
   beafa:	4240      	negmi	r0, r0
   beafc:	f04f 0100 	mov.w	r1, #0
   beb00:	e73e      	b.n	be980 <__adddf3+0x138>
   beb02:	bf00      	nop

000beb04 <__aeabi_f2d>:
   beb04:	0042      	lsls	r2, r0, #1
   beb06:	ea4f 01e2 	mov.w	r1, r2, asr #3
   beb0a:	ea4f 0131 	mov.w	r1, r1, rrx
   beb0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   beb12:	bf1f      	itttt	ne
   beb14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   beb18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   beb1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   beb20:	4770      	bxne	lr
   beb22:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   beb26:	bf08      	it	eq
   beb28:	4770      	bxeq	lr
   beb2a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   beb2e:	bf04      	itt	eq
   beb30:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   beb34:	4770      	bxeq	lr
   beb36:	b530      	push	{r4, r5, lr}
   beb38:	f44f 7460 	mov.w	r4, #896	; 0x380
   beb3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   beb40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   beb44:	e71c      	b.n	be980 <__adddf3+0x138>
   beb46:	bf00      	nop

000beb48 <__aeabi_ul2d>:
   beb48:	ea50 0201 	orrs.w	r2, r0, r1
   beb4c:	bf08      	it	eq
   beb4e:	4770      	bxeq	lr
   beb50:	b530      	push	{r4, r5, lr}
   beb52:	f04f 0500 	mov.w	r5, #0
   beb56:	e00a      	b.n	beb6e <__aeabi_l2d+0x16>

000beb58 <__aeabi_l2d>:
   beb58:	ea50 0201 	orrs.w	r2, r0, r1
   beb5c:	bf08      	it	eq
   beb5e:	4770      	bxeq	lr
   beb60:	b530      	push	{r4, r5, lr}
   beb62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   beb66:	d502      	bpl.n	beb6e <__aeabi_l2d+0x16>
   beb68:	4240      	negs	r0, r0
   beb6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   beb6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   beb72:	f104 0432 	add.w	r4, r4, #50	; 0x32
   beb76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   beb7a:	f43f aed8 	beq.w	be92e <__adddf3+0xe6>
   beb7e:	f04f 0203 	mov.w	r2, #3
   beb82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   beb86:	bf18      	it	ne
   beb88:	3203      	addne	r2, #3
   beb8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   beb8e:	bf18      	it	ne
   beb90:	3203      	addne	r2, #3
   beb92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   beb96:	f1c2 0320 	rsb	r3, r2, #32
   beb9a:	fa00 fc03 	lsl.w	ip, r0, r3
   beb9e:	fa20 f002 	lsr.w	r0, r0, r2
   beba2:	fa01 fe03 	lsl.w	lr, r1, r3
   beba6:	ea40 000e 	orr.w	r0, r0, lr
   bebaa:	fa21 f102 	lsr.w	r1, r1, r2
   bebae:	4414      	add	r4, r2
   bebb0:	e6bd      	b.n	be92e <__adddf3+0xe6>
   bebb2:	bf00      	nop

000bebb4 <__aeabi_dmul>:
   bebb4:	b570      	push	{r4, r5, r6, lr}
   bebb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bebba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bebbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bebc2:	bf1d      	ittte	ne
   bebc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bebc8:	ea94 0f0c 	teqne	r4, ip
   bebcc:	ea95 0f0c 	teqne	r5, ip
   bebd0:	f000 f8de 	bleq	bed90 <__aeabi_dmul+0x1dc>
   bebd4:	442c      	add	r4, r5
   bebd6:	ea81 0603 	eor.w	r6, r1, r3
   bebda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bebde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bebe2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bebe6:	bf18      	it	ne
   bebe8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bebec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bebf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bebf4:	d038      	beq.n	bec68 <__aeabi_dmul+0xb4>
   bebf6:	fba0 ce02 	umull	ip, lr, r0, r2
   bebfa:	f04f 0500 	mov.w	r5, #0
   bebfe:	fbe1 e502 	umlal	lr, r5, r1, r2
   bec02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bec06:	fbe0 e503 	umlal	lr, r5, r0, r3
   bec0a:	f04f 0600 	mov.w	r6, #0
   bec0e:	fbe1 5603 	umlal	r5, r6, r1, r3
   bec12:	f09c 0f00 	teq	ip, #0
   bec16:	bf18      	it	ne
   bec18:	f04e 0e01 	orrne.w	lr, lr, #1
   bec1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bec20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bec24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bec28:	d204      	bcs.n	bec34 <__aeabi_dmul+0x80>
   bec2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bec2e:	416d      	adcs	r5, r5
   bec30:	eb46 0606 	adc.w	r6, r6, r6
   bec34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bec38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bec3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bec40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bec44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bec48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bec4c:	bf88      	it	hi
   bec4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bec52:	d81e      	bhi.n	bec92 <__aeabi_dmul+0xde>
   bec54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bec58:	bf08      	it	eq
   bec5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bec5e:	f150 0000 	adcs.w	r0, r0, #0
   bec62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bec66:	bd70      	pop	{r4, r5, r6, pc}
   bec68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bec6c:	ea46 0101 	orr.w	r1, r6, r1
   bec70:	ea40 0002 	orr.w	r0, r0, r2
   bec74:	ea81 0103 	eor.w	r1, r1, r3
   bec78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bec7c:	bfc2      	ittt	gt
   bec7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bec82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bec86:	bd70      	popgt	{r4, r5, r6, pc}
   bec88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bec8c:	f04f 0e00 	mov.w	lr, #0
   bec90:	3c01      	subs	r4, #1
   bec92:	f300 80ab 	bgt.w	bedec <__aeabi_dmul+0x238>
   bec96:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bec9a:	bfde      	ittt	le
   bec9c:	2000      	movle	r0, #0
   bec9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   beca2:	bd70      	pople	{r4, r5, r6, pc}
   beca4:	f1c4 0400 	rsb	r4, r4, #0
   beca8:	3c20      	subs	r4, #32
   becaa:	da35      	bge.n	bed18 <__aeabi_dmul+0x164>
   becac:	340c      	adds	r4, #12
   becae:	dc1b      	bgt.n	bece8 <__aeabi_dmul+0x134>
   becb0:	f104 0414 	add.w	r4, r4, #20
   becb4:	f1c4 0520 	rsb	r5, r4, #32
   becb8:	fa00 f305 	lsl.w	r3, r0, r5
   becbc:	fa20 f004 	lsr.w	r0, r0, r4
   becc0:	fa01 f205 	lsl.w	r2, r1, r5
   becc4:	ea40 0002 	orr.w	r0, r0, r2
   becc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   beccc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   becd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   becd4:	fa21 f604 	lsr.w	r6, r1, r4
   becd8:	eb42 0106 	adc.w	r1, r2, r6
   becdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bece0:	bf08      	it	eq
   bece2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bece6:	bd70      	pop	{r4, r5, r6, pc}
   bece8:	f1c4 040c 	rsb	r4, r4, #12
   becec:	f1c4 0520 	rsb	r5, r4, #32
   becf0:	fa00 f304 	lsl.w	r3, r0, r4
   becf4:	fa20 f005 	lsr.w	r0, r0, r5
   becf8:	fa01 f204 	lsl.w	r2, r1, r4
   becfc:	ea40 0002 	orr.w	r0, r0, r2
   bed00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bed04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bed08:	f141 0100 	adc.w	r1, r1, #0
   bed0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bed10:	bf08      	it	eq
   bed12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bed16:	bd70      	pop	{r4, r5, r6, pc}
   bed18:	f1c4 0520 	rsb	r5, r4, #32
   bed1c:	fa00 f205 	lsl.w	r2, r0, r5
   bed20:	ea4e 0e02 	orr.w	lr, lr, r2
   bed24:	fa20 f304 	lsr.w	r3, r0, r4
   bed28:	fa01 f205 	lsl.w	r2, r1, r5
   bed2c:	ea43 0302 	orr.w	r3, r3, r2
   bed30:	fa21 f004 	lsr.w	r0, r1, r4
   bed34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bed38:	fa21 f204 	lsr.w	r2, r1, r4
   bed3c:	ea20 0002 	bic.w	r0, r0, r2
   bed40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bed44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bed48:	bf08      	it	eq
   bed4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bed4e:	bd70      	pop	{r4, r5, r6, pc}
   bed50:	f094 0f00 	teq	r4, #0
   bed54:	d10f      	bne.n	bed76 <__aeabi_dmul+0x1c2>
   bed56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bed5a:	0040      	lsls	r0, r0, #1
   bed5c:	eb41 0101 	adc.w	r1, r1, r1
   bed60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bed64:	bf08      	it	eq
   bed66:	3c01      	subeq	r4, #1
   bed68:	d0f7      	beq.n	bed5a <__aeabi_dmul+0x1a6>
   bed6a:	ea41 0106 	orr.w	r1, r1, r6
   bed6e:	f095 0f00 	teq	r5, #0
   bed72:	bf18      	it	ne
   bed74:	4770      	bxne	lr
   bed76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bed7a:	0052      	lsls	r2, r2, #1
   bed7c:	eb43 0303 	adc.w	r3, r3, r3
   bed80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bed84:	bf08      	it	eq
   bed86:	3d01      	subeq	r5, #1
   bed88:	d0f7      	beq.n	bed7a <__aeabi_dmul+0x1c6>
   bed8a:	ea43 0306 	orr.w	r3, r3, r6
   bed8e:	4770      	bx	lr
   bed90:	ea94 0f0c 	teq	r4, ip
   bed94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bed98:	bf18      	it	ne
   bed9a:	ea95 0f0c 	teqne	r5, ip
   bed9e:	d00c      	beq.n	bedba <__aeabi_dmul+0x206>
   beda0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   beda4:	bf18      	it	ne
   beda6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bedaa:	d1d1      	bne.n	bed50 <__aeabi_dmul+0x19c>
   bedac:	ea81 0103 	eor.w	r1, r1, r3
   bedb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bedb4:	f04f 0000 	mov.w	r0, #0
   bedb8:	bd70      	pop	{r4, r5, r6, pc}
   bedba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bedbe:	bf06      	itte	eq
   bedc0:	4610      	moveq	r0, r2
   bedc2:	4619      	moveq	r1, r3
   bedc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bedc8:	d019      	beq.n	bedfe <__aeabi_dmul+0x24a>
   bedca:	ea94 0f0c 	teq	r4, ip
   bedce:	d102      	bne.n	bedd6 <__aeabi_dmul+0x222>
   bedd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bedd4:	d113      	bne.n	bedfe <__aeabi_dmul+0x24a>
   bedd6:	ea95 0f0c 	teq	r5, ip
   bedda:	d105      	bne.n	bede8 <__aeabi_dmul+0x234>
   beddc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bede0:	bf1c      	itt	ne
   bede2:	4610      	movne	r0, r2
   bede4:	4619      	movne	r1, r3
   bede6:	d10a      	bne.n	bedfe <__aeabi_dmul+0x24a>
   bede8:	ea81 0103 	eor.w	r1, r1, r3
   bedec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bedf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bedf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bedf8:	f04f 0000 	mov.w	r0, #0
   bedfc:	bd70      	pop	{r4, r5, r6, pc}
   bedfe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bee02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bee06:	bd70      	pop	{r4, r5, r6, pc}

000bee08 <__aeabi_ddiv>:
   bee08:	b570      	push	{r4, r5, r6, lr}
   bee0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bee0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bee12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bee16:	bf1d      	ittte	ne
   bee18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bee1c:	ea94 0f0c 	teqne	r4, ip
   bee20:	ea95 0f0c 	teqne	r5, ip
   bee24:	f000 f8a7 	bleq	bef76 <__aeabi_ddiv+0x16e>
   bee28:	eba4 0405 	sub.w	r4, r4, r5
   bee2c:	ea81 0e03 	eor.w	lr, r1, r3
   bee30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bee34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bee38:	f000 8088 	beq.w	bef4c <__aeabi_ddiv+0x144>
   bee3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bee40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bee44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bee48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bee4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bee50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bee54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bee58:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bee5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bee60:	429d      	cmp	r5, r3
   bee62:	bf08      	it	eq
   bee64:	4296      	cmpeq	r6, r2
   bee66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bee6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bee6e:	d202      	bcs.n	bee76 <__aeabi_ddiv+0x6e>
   bee70:	085b      	lsrs	r3, r3, #1
   bee72:	ea4f 0232 	mov.w	r2, r2, rrx
   bee76:	1ab6      	subs	r6, r6, r2
   bee78:	eb65 0503 	sbc.w	r5, r5, r3
   bee7c:	085b      	lsrs	r3, r3, #1
   bee7e:	ea4f 0232 	mov.w	r2, r2, rrx
   bee82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bee86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bee8a:	ebb6 0e02 	subs.w	lr, r6, r2
   bee8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bee92:	bf22      	ittt	cs
   bee94:	1ab6      	subcs	r6, r6, r2
   bee96:	4675      	movcs	r5, lr
   bee98:	ea40 000c 	orrcs.w	r0, r0, ip
   bee9c:	085b      	lsrs	r3, r3, #1
   bee9e:	ea4f 0232 	mov.w	r2, r2, rrx
   beea2:	ebb6 0e02 	subs.w	lr, r6, r2
   beea6:	eb75 0e03 	sbcs.w	lr, r5, r3
   beeaa:	bf22      	ittt	cs
   beeac:	1ab6      	subcs	r6, r6, r2
   beeae:	4675      	movcs	r5, lr
   beeb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   beeb4:	085b      	lsrs	r3, r3, #1
   beeb6:	ea4f 0232 	mov.w	r2, r2, rrx
   beeba:	ebb6 0e02 	subs.w	lr, r6, r2
   beebe:	eb75 0e03 	sbcs.w	lr, r5, r3
   beec2:	bf22      	ittt	cs
   beec4:	1ab6      	subcs	r6, r6, r2
   beec6:	4675      	movcs	r5, lr
   beec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   beecc:	085b      	lsrs	r3, r3, #1
   beece:	ea4f 0232 	mov.w	r2, r2, rrx
   beed2:	ebb6 0e02 	subs.w	lr, r6, r2
   beed6:	eb75 0e03 	sbcs.w	lr, r5, r3
   beeda:	bf22      	ittt	cs
   beedc:	1ab6      	subcs	r6, r6, r2
   beede:	4675      	movcs	r5, lr
   beee0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   beee4:	ea55 0e06 	orrs.w	lr, r5, r6
   beee8:	d018      	beq.n	bef1c <__aeabi_ddiv+0x114>
   beeea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   beeee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   beef2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   beef6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   beefa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   beefe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bef02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bef06:	d1c0      	bne.n	bee8a <__aeabi_ddiv+0x82>
   bef08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bef0c:	d10b      	bne.n	bef26 <__aeabi_ddiv+0x11e>
   bef0e:	ea41 0100 	orr.w	r1, r1, r0
   bef12:	f04f 0000 	mov.w	r0, #0
   bef16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bef1a:	e7b6      	b.n	bee8a <__aeabi_ddiv+0x82>
   bef1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bef20:	bf04      	itt	eq
   bef22:	4301      	orreq	r1, r0
   bef24:	2000      	moveq	r0, #0
   bef26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bef2a:	bf88      	it	hi
   bef2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bef30:	f63f aeaf 	bhi.w	bec92 <__aeabi_dmul+0xde>
   bef34:	ebb5 0c03 	subs.w	ip, r5, r3
   bef38:	bf04      	itt	eq
   bef3a:	ebb6 0c02 	subseq.w	ip, r6, r2
   bef3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bef42:	f150 0000 	adcs.w	r0, r0, #0
   bef46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bef4a:	bd70      	pop	{r4, r5, r6, pc}
   bef4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bef50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bef54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bef58:	bfc2      	ittt	gt
   bef5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bef5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bef62:	bd70      	popgt	{r4, r5, r6, pc}
   bef64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bef68:	f04f 0e00 	mov.w	lr, #0
   bef6c:	3c01      	subs	r4, #1
   bef6e:	e690      	b.n	bec92 <__aeabi_dmul+0xde>
   bef70:	ea45 0e06 	orr.w	lr, r5, r6
   bef74:	e68d      	b.n	bec92 <__aeabi_dmul+0xde>
   bef76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bef7a:	ea94 0f0c 	teq	r4, ip
   bef7e:	bf08      	it	eq
   bef80:	ea95 0f0c 	teqeq	r5, ip
   bef84:	f43f af3b 	beq.w	bedfe <__aeabi_dmul+0x24a>
   bef88:	ea94 0f0c 	teq	r4, ip
   bef8c:	d10a      	bne.n	befa4 <__aeabi_ddiv+0x19c>
   bef8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bef92:	f47f af34 	bne.w	bedfe <__aeabi_dmul+0x24a>
   bef96:	ea95 0f0c 	teq	r5, ip
   bef9a:	f47f af25 	bne.w	bede8 <__aeabi_dmul+0x234>
   bef9e:	4610      	mov	r0, r2
   befa0:	4619      	mov	r1, r3
   befa2:	e72c      	b.n	bedfe <__aeabi_dmul+0x24a>
   befa4:	ea95 0f0c 	teq	r5, ip
   befa8:	d106      	bne.n	befb8 <__aeabi_ddiv+0x1b0>
   befaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   befae:	f43f aefd 	beq.w	bedac <__aeabi_dmul+0x1f8>
   befb2:	4610      	mov	r0, r2
   befb4:	4619      	mov	r1, r3
   befb6:	e722      	b.n	bedfe <__aeabi_dmul+0x24a>
   befb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   befbc:	bf18      	it	ne
   befbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   befc2:	f47f aec5 	bne.w	bed50 <__aeabi_dmul+0x19c>
   befc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   befca:	f47f af0d 	bne.w	bede8 <__aeabi_dmul+0x234>
   befce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   befd2:	f47f aeeb 	bne.w	bedac <__aeabi_dmul+0x1f8>
   befd6:	e712      	b.n	bedfe <__aeabi_dmul+0x24a>

000befd8 <__gedf2>:
   befd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   befdc:	e006      	b.n	befec <__cmpdf2+0x4>
   befde:	bf00      	nop

000befe0 <__ledf2>:
   befe0:	f04f 0c01 	mov.w	ip, #1
   befe4:	e002      	b.n	befec <__cmpdf2+0x4>
   befe6:	bf00      	nop

000befe8 <__cmpdf2>:
   befe8:	f04f 0c01 	mov.w	ip, #1
   befec:	f84d cd04 	str.w	ip, [sp, #-4]!
   beff0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   beff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   beff8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   beffc:	bf18      	it	ne
   beffe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bf002:	d01b      	beq.n	bf03c <__cmpdf2+0x54>
   bf004:	b001      	add	sp, #4
   bf006:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bf00a:	bf0c      	ite	eq
   bf00c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bf010:	ea91 0f03 	teqne	r1, r3
   bf014:	bf02      	ittt	eq
   bf016:	ea90 0f02 	teqeq	r0, r2
   bf01a:	2000      	moveq	r0, #0
   bf01c:	4770      	bxeq	lr
   bf01e:	f110 0f00 	cmn.w	r0, #0
   bf022:	ea91 0f03 	teq	r1, r3
   bf026:	bf58      	it	pl
   bf028:	4299      	cmppl	r1, r3
   bf02a:	bf08      	it	eq
   bf02c:	4290      	cmpeq	r0, r2
   bf02e:	bf2c      	ite	cs
   bf030:	17d8      	asrcs	r0, r3, #31
   bf032:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bf036:	f040 0001 	orr.w	r0, r0, #1
   bf03a:	4770      	bx	lr
   bf03c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf040:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf044:	d102      	bne.n	bf04c <__cmpdf2+0x64>
   bf046:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bf04a:	d107      	bne.n	bf05c <__cmpdf2+0x74>
   bf04c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf050:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf054:	d1d6      	bne.n	bf004 <__cmpdf2+0x1c>
   bf056:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bf05a:	d0d3      	beq.n	bf004 <__cmpdf2+0x1c>
   bf05c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bf060:	4770      	bx	lr
   bf062:	bf00      	nop

000bf064 <__aeabi_cdrcmple>:
   bf064:	4684      	mov	ip, r0
   bf066:	4610      	mov	r0, r2
   bf068:	4662      	mov	r2, ip
   bf06a:	468c      	mov	ip, r1
   bf06c:	4619      	mov	r1, r3
   bf06e:	4663      	mov	r3, ip
   bf070:	e000      	b.n	bf074 <__aeabi_cdcmpeq>
   bf072:	bf00      	nop

000bf074 <__aeabi_cdcmpeq>:
   bf074:	b501      	push	{r0, lr}
   bf076:	f7ff ffb7 	bl	befe8 <__cmpdf2>
   bf07a:	2800      	cmp	r0, #0
   bf07c:	bf48      	it	mi
   bf07e:	f110 0f00 	cmnmi.w	r0, #0
   bf082:	bd01      	pop	{r0, pc}

000bf084 <__aeabi_dcmpeq>:
   bf084:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf088:	f7ff fff4 	bl	bf074 <__aeabi_cdcmpeq>
   bf08c:	bf0c      	ite	eq
   bf08e:	2001      	moveq	r0, #1
   bf090:	2000      	movne	r0, #0
   bf092:	f85d fb08 	ldr.w	pc, [sp], #8
   bf096:	bf00      	nop

000bf098 <__aeabi_dcmplt>:
   bf098:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf09c:	f7ff ffea 	bl	bf074 <__aeabi_cdcmpeq>
   bf0a0:	bf34      	ite	cc
   bf0a2:	2001      	movcc	r0, #1
   bf0a4:	2000      	movcs	r0, #0
   bf0a6:	f85d fb08 	ldr.w	pc, [sp], #8
   bf0aa:	bf00      	nop

000bf0ac <__aeabi_dcmple>:
   bf0ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf0b0:	f7ff ffe0 	bl	bf074 <__aeabi_cdcmpeq>
   bf0b4:	bf94      	ite	ls
   bf0b6:	2001      	movls	r0, #1
   bf0b8:	2000      	movhi	r0, #0
   bf0ba:	f85d fb08 	ldr.w	pc, [sp], #8
   bf0be:	bf00      	nop

000bf0c0 <__aeabi_dcmpge>:
   bf0c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf0c4:	f7ff ffce 	bl	bf064 <__aeabi_cdrcmple>
   bf0c8:	bf94      	ite	ls
   bf0ca:	2001      	movls	r0, #1
   bf0cc:	2000      	movhi	r0, #0
   bf0ce:	f85d fb08 	ldr.w	pc, [sp], #8
   bf0d2:	bf00      	nop

000bf0d4 <__aeabi_dcmpgt>:
   bf0d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf0d8:	f7ff ffc4 	bl	bf064 <__aeabi_cdrcmple>
   bf0dc:	bf34      	ite	cc
   bf0de:	2001      	movcc	r0, #1
   bf0e0:	2000      	movcs	r0, #0
   bf0e2:	f85d fb08 	ldr.w	pc, [sp], #8
   bf0e6:	bf00      	nop

000bf0e8 <__aeabi_dcmpun>:
   bf0e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf0ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf0f0:	d102      	bne.n	bf0f8 <__aeabi_dcmpun+0x10>
   bf0f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bf0f6:	d10a      	bne.n	bf10e <__aeabi_dcmpun+0x26>
   bf0f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf0fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf100:	d102      	bne.n	bf108 <__aeabi_dcmpun+0x20>
   bf102:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bf106:	d102      	bne.n	bf10e <__aeabi_dcmpun+0x26>
   bf108:	f04f 0000 	mov.w	r0, #0
   bf10c:	4770      	bx	lr
   bf10e:	f04f 0001 	mov.w	r0, #1
   bf112:	4770      	bx	lr

000bf114 <__aeabi_d2iz>:
   bf114:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bf118:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bf11c:	d215      	bcs.n	bf14a <__aeabi_d2iz+0x36>
   bf11e:	d511      	bpl.n	bf144 <__aeabi_d2iz+0x30>
   bf120:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bf124:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bf128:	d912      	bls.n	bf150 <__aeabi_d2iz+0x3c>
   bf12a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bf12e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bf132:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bf136:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bf13a:	fa23 f002 	lsr.w	r0, r3, r2
   bf13e:	bf18      	it	ne
   bf140:	4240      	negne	r0, r0
   bf142:	4770      	bx	lr
   bf144:	f04f 0000 	mov.w	r0, #0
   bf148:	4770      	bx	lr
   bf14a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bf14e:	d105      	bne.n	bf15c <__aeabi_d2iz+0x48>
   bf150:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bf154:	bf08      	it	eq
   bf156:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bf15a:	4770      	bx	lr
   bf15c:	f04f 0000 	mov.w	r0, #0
   bf160:	4770      	bx	lr
   bf162:	bf00      	nop

000bf164 <__aeabi_d2uiz>:
   bf164:	004a      	lsls	r2, r1, #1
   bf166:	d211      	bcs.n	bf18c <__aeabi_d2uiz+0x28>
   bf168:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bf16c:	d211      	bcs.n	bf192 <__aeabi_d2uiz+0x2e>
   bf16e:	d50d      	bpl.n	bf18c <__aeabi_d2uiz+0x28>
   bf170:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bf174:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bf178:	d40e      	bmi.n	bf198 <__aeabi_d2uiz+0x34>
   bf17a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bf17e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bf182:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bf186:	fa23 f002 	lsr.w	r0, r3, r2
   bf18a:	4770      	bx	lr
   bf18c:	f04f 0000 	mov.w	r0, #0
   bf190:	4770      	bx	lr
   bf192:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bf196:	d102      	bne.n	bf19e <__aeabi_d2uiz+0x3a>
   bf198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf19c:	4770      	bx	lr
   bf19e:	f04f 0000 	mov.w	r0, #0
   bf1a2:	4770      	bx	lr

000bf1a4 <asctime_r>:
   bf1a4:	b510      	push	{r4, lr}
   bf1a6:	460c      	mov	r4, r1
   bf1a8:	6941      	ldr	r1, [r0, #20]
   bf1aa:	6903      	ldr	r3, [r0, #16]
   bf1ac:	6982      	ldr	r2, [r0, #24]
   bf1ae:	b086      	sub	sp, #24
   bf1b0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bf1b4:	9104      	str	r1, [sp, #16]
   bf1b6:	6801      	ldr	r1, [r0, #0]
   bf1b8:	9103      	str	r1, [sp, #12]
   bf1ba:	6841      	ldr	r1, [r0, #4]
   bf1bc:	9102      	str	r1, [sp, #8]
   bf1be:	6881      	ldr	r1, [r0, #8]
   bf1c0:	9101      	str	r1, [sp, #4]
   bf1c2:	68c1      	ldr	r1, [r0, #12]
   bf1c4:	9100      	str	r1, [sp, #0]
   bf1c6:	4907      	ldr	r1, [pc, #28]	; (bf1e4 <asctime_r+0x40>)
   bf1c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bf1cc:	440b      	add	r3, r1
   bf1ce:	4906      	ldr	r1, [pc, #24]	; (bf1e8 <asctime_r+0x44>)
   bf1d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bf1d4:	440a      	add	r2, r1
   bf1d6:	4620      	mov	r0, r4
   bf1d8:	4904      	ldr	r1, [pc, #16]	; (bf1ec <asctime_r+0x48>)
   bf1da:	f7fc f8a9 	bl	bb330 <siprintf>
   bf1de:	4620      	mov	r0, r4
   bf1e0:	b006      	add	sp, #24
   bf1e2:	bd10      	pop	{r4, pc}
   bf1e4:	000c0f22 	.word	0x000c0f22
   bf1e8:	000c0f0d 	.word	0x000c0f0d
   bf1ec:	000c0eed 	.word	0x000c0eed

000bf1f0 <atexit>:
   bf1f0:	2300      	movs	r3, #0
   bf1f2:	4601      	mov	r1, r0
   bf1f4:	461a      	mov	r2, r3
   bf1f6:	4618      	mov	r0, r3
   bf1f8:	f000 ba70 	b.w	bf6dc <__register_exitproc>

000bf1fc <gmtime>:
   bf1fc:	b538      	push	{r3, r4, r5, lr}
   bf1fe:	4b0b      	ldr	r3, [pc, #44]	; (bf22c <gmtime+0x30>)
   bf200:	681d      	ldr	r5, [r3, #0]
   bf202:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bf204:	4604      	mov	r4, r0
   bf206:	b953      	cbnz	r3, bf21e <gmtime+0x22>
   bf208:	2024      	movs	r0, #36	; 0x24
   bf20a:	f7fc f879 	bl	bb300 <malloc>
   bf20e:	4602      	mov	r2, r0
   bf210:	63e8      	str	r0, [r5, #60]	; 0x3c
   bf212:	b920      	cbnz	r0, bf21e <gmtime+0x22>
   bf214:	4b06      	ldr	r3, [pc, #24]	; (bf230 <gmtime+0x34>)
   bf216:	4807      	ldr	r0, [pc, #28]	; (bf234 <gmtime+0x38>)
   bf218:	2139      	movs	r1, #57	; 0x39
   bf21a:	f7fc f8c1 	bl	bb3a0 <__assert_func>
   bf21e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bf220:	4620      	mov	r0, r4
   bf222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf226:	f7fc b8db 	b.w	bb3e0 <gmtime_r>
   bf22a:	bf00      	nop
   bf22c:	2003de34 	.word	0x2003de34
   bf230:	000c0f46 	.word	0x000c0f46
   bf234:	000c0f5d 	.word	0x000c0f5d

000bf238 <isprint>:
   bf238:	4b02      	ldr	r3, [pc, #8]	; (bf244 <isprint+0xc>)
   bf23a:	4418      	add	r0, r3
   bf23c:	7840      	ldrb	r0, [r0, #1]
   bf23e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bf242:	4770      	bx	lr
   bf244:	000c100f 	.word	0x000c100f

000bf248 <memcpy>:
   bf248:	440a      	add	r2, r1
   bf24a:	4291      	cmp	r1, r2
   bf24c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bf250:	d100      	bne.n	bf254 <memcpy+0xc>
   bf252:	4770      	bx	lr
   bf254:	b510      	push	{r4, lr}
   bf256:	f811 4b01 	ldrb.w	r4, [r1], #1
   bf25a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bf25e:	4291      	cmp	r1, r2
   bf260:	d1f9      	bne.n	bf256 <memcpy+0xe>
   bf262:	bd10      	pop	{r4, pc}

000bf264 <memmove>:
   bf264:	4288      	cmp	r0, r1
   bf266:	b510      	push	{r4, lr}
   bf268:	eb01 0402 	add.w	r4, r1, r2
   bf26c:	d902      	bls.n	bf274 <memmove+0x10>
   bf26e:	4284      	cmp	r4, r0
   bf270:	4623      	mov	r3, r4
   bf272:	d807      	bhi.n	bf284 <memmove+0x20>
   bf274:	1e43      	subs	r3, r0, #1
   bf276:	42a1      	cmp	r1, r4
   bf278:	d008      	beq.n	bf28c <memmove+0x28>
   bf27a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf27e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bf282:	e7f8      	b.n	bf276 <memmove+0x12>
   bf284:	4402      	add	r2, r0
   bf286:	4601      	mov	r1, r0
   bf288:	428a      	cmp	r2, r1
   bf28a:	d100      	bne.n	bf28e <memmove+0x2a>
   bf28c:	bd10      	pop	{r4, pc}
   bf28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bf292:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bf296:	e7f7      	b.n	bf288 <memmove+0x24>

000bf298 <memset>:
   bf298:	4402      	add	r2, r0
   bf29a:	4603      	mov	r3, r0
   bf29c:	4293      	cmp	r3, r2
   bf29e:	d100      	bne.n	bf2a2 <memset+0xa>
   bf2a0:	4770      	bx	lr
   bf2a2:	f803 1b01 	strb.w	r1, [r3], #1
   bf2a6:	e7f9      	b.n	bf29c <memset+0x4>

000bf2a8 <srand>:
   bf2a8:	b538      	push	{r3, r4, r5, lr}
   bf2aa:	4b10      	ldr	r3, [pc, #64]	; (bf2ec <srand+0x44>)
   bf2ac:	681d      	ldr	r5, [r3, #0]
   bf2ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bf2b0:	4604      	mov	r4, r0
   bf2b2:	b9b3      	cbnz	r3, bf2e2 <srand+0x3a>
   bf2b4:	2018      	movs	r0, #24
   bf2b6:	f7fc f823 	bl	bb300 <malloc>
   bf2ba:	4602      	mov	r2, r0
   bf2bc:	63a8      	str	r0, [r5, #56]	; 0x38
   bf2be:	b920      	cbnz	r0, bf2ca <srand+0x22>
   bf2c0:	4b0b      	ldr	r3, [pc, #44]	; (bf2f0 <srand+0x48>)
   bf2c2:	480c      	ldr	r0, [pc, #48]	; (bf2f4 <srand+0x4c>)
   bf2c4:	2142      	movs	r1, #66	; 0x42
   bf2c6:	f7fc f86b 	bl	bb3a0 <__assert_func>
   bf2ca:	490b      	ldr	r1, [pc, #44]	; (bf2f8 <srand+0x50>)
   bf2cc:	4b0b      	ldr	r3, [pc, #44]	; (bf2fc <srand+0x54>)
   bf2ce:	e9c0 1300 	strd	r1, r3, [r0]
   bf2d2:	4b0b      	ldr	r3, [pc, #44]	; (bf300 <srand+0x58>)
   bf2d4:	6083      	str	r3, [r0, #8]
   bf2d6:	230b      	movs	r3, #11
   bf2d8:	8183      	strh	r3, [r0, #12]
   bf2da:	2100      	movs	r1, #0
   bf2dc:	2001      	movs	r0, #1
   bf2de:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bf2e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bf2e4:	2200      	movs	r2, #0
   bf2e6:	611c      	str	r4, [r3, #16]
   bf2e8:	615a      	str	r2, [r3, #20]
   bf2ea:	bd38      	pop	{r3, r4, r5, pc}
   bf2ec:	2003de34 	.word	0x2003de34
   bf2f0:	000c0f46 	.word	0x000c0f46
   bf2f4:	000c0fb6 	.word	0x000c0fb6
   bf2f8:	abcd330e 	.word	0xabcd330e
   bf2fc:	e66d1234 	.word	0xe66d1234
   bf300:	0005deec 	.word	0x0005deec

000bf304 <rand>:
   bf304:	4b16      	ldr	r3, [pc, #88]	; (bf360 <rand+0x5c>)
   bf306:	b510      	push	{r4, lr}
   bf308:	681c      	ldr	r4, [r3, #0]
   bf30a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bf30c:	b9b3      	cbnz	r3, bf33c <rand+0x38>
   bf30e:	2018      	movs	r0, #24
   bf310:	f7fb fff6 	bl	bb300 <malloc>
   bf314:	63a0      	str	r0, [r4, #56]	; 0x38
   bf316:	b928      	cbnz	r0, bf324 <rand+0x20>
   bf318:	4602      	mov	r2, r0
   bf31a:	4b12      	ldr	r3, [pc, #72]	; (bf364 <rand+0x60>)
   bf31c:	4812      	ldr	r0, [pc, #72]	; (bf368 <rand+0x64>)
   bf31e:	214e      	movs	r1, #78	; 0x4e
   bf320:	f7fc f83e 	bl	bb3a0 <__assert_func>
   bf324:	4a11      	ldr	r2, [pc, #68]	; (bf36c <rand+0x68>)
   bf326:	4b12      	ldr	r3, [pc, #72]	; (bf370 <rand+0x6c>)
   bf328:	e9c0 2300 	strd	r2, r3, [r0]
   bf32c:	4b11      	ldr	r3, [pc, #68]	; (bf374 <rand+0x70>)
   bf32e:	6083      	str	r3, [r0, #8]
   bf330:	230b      	movs	r3, #11
   bf332:	8183      	strh	r3, [r0, #12]
   bf334:	2201      	movs	r2, #1
   bf336:	2300      	movs	r3, #0
   bf338:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bf33c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bf33e:	4a0e      	ldr	r2, [pc, #56]	; (bf378 <rand+0x74>)
   bf340:	6920      	ldr	r0, [r4, #16]
   bf342:	6963      	ldr	r3, [r4, #20]
   bf344:	490d      	ldr	r1, [pc, #52]	; (bf37c <rand+0x78>)
   bf346:	4342      	muls	r2, r0
   bf348:	fb01 2203 	mla	r2, r1, r3, r2
   bf34c:	fba0 0101 	umull	r0, r1, r0, r1
   bf350:	1c43      	adds	r3, r0, #1
   bf352:	eb42 0001 	adc.w	r0, r2, r1
   bf356:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bf35a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bf35e:	bd10      	pop	{r4, pc}
   bf360:	2003de34 	.word	0x2003de34
   bf364:	000c0f46 	.word	0x000c0f46
   bf368:	000c0fb6 	.word	0x000c0fb6
   bf36c:	abcd330e 	.word	0xabcd330e
   bf370:	e66d1234 	.word	0xe66d1234
   bf374:	0005deec 	.word	0x0005deec
   bf378:	5851f42d 	.word	0x5851f42d
   bf37c:	4c957f2d 	.word	0x4c957f2d

000bf380 <strchr>:
   bf380:	b2c9      	uxtb	r1, r1
   bf382:	4603      	mov	r3, r0
   bf384:	f810 2b01 	ldrb.w	r2, [r0], #1
   bf388:	b11a      	cbz	r2, bf392 <strchr+0x12>
   bf38a:	428a      	cmp	r2, r1
   bf38c:	d1f9      	bne.n	bf382 <strchr+0x2>
   bf38e:	4618      	mov	r0, r3
   bf390:	4770      	bx	lr
   bf392:	2900      	cmp	r1, #0
   bf394:	bf18      	it	ne
   bf396:	2300      	movne	r3, #0
   bf398:	e7f9      	b.n	bf38e <strchr+0xe>

000bf39a <strchrnul>:
   bf39a:	b510      	push	{r4, lr}
   bf39c:	4604      	mov	r4, r0
   bf39e:	f7ff ffef 	bl	bf380 <strchr>
   bf3a2:	b918      	cbnz	r0, bf3ac <strchrnul+0x12>
   bf3a4:	4620      	mov	r0, r4
   bf3a6:	f000 f832 	bl	bf40e <strlen>
   bf3aa:	4420      	add	r0, r4
   bf3ac:	bd10      	pop	{r4, pc}

000bf3ae <strcmp>:
   bf3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
   bf3b2:	f811 3b01 	ldrb.w	r3, [r1], #1
   bf3b6:	2a01      	cmp	r2, #1
   bf3b8:	bf28      	it	cs
   bf3ba:	429a      	cmpcs	r2, r3
   bf3bc:	d0f7      	beq.n	bf3ae <strcmp>
   bf3be:	1ad0      	subs	r0, r2, r3
   bf3c0:	4770      	bx	lr

000bf3c2 <strcpy>:
   bf3c2:	4603      	mov	r3, r0
   bf3c4:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf3c8:	f803 2b01 	strb.w	r2, [r3], #1
   bf3cc:	2a00      	cmp	r2, #0
   bf3ce:	d1f9      	bne.n	bf3c4 <strcpy+0x2>
   bf3d0:	4770      	bx	lr
	...

000bf3d4 <strdup>:
   bf3d4:	4b02      	ldr	r3, [pc, #8]	; (bf3e0 <strdup+0xc>)
   bf3d6:	4601      	mov	r1, r0
   bf3d8:	6818      	ldr	r0, [r3, #0]
   bf3da:	f000 b803 	b.w	bf3e4 <_strdup_r>
   bf3de:	bf00      	nop
   bf3e0:	2003de34 	.word	0x2003de34

000bf3e4 <_strdup_r>:
   bf3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf3e6:	4604      	mov	r4, r0
   bf3e8:	4608      	mov	r0, r1
   bf3ea:	460d      	mov	r5, r1
   bf3ec:	f000 f80f 	bl	bf40e <strlen>
   bf3f0:	1c42      	adds	r2, r0, #1
   bf3f2:	4611      	mov	r1, r2
   bf3f4:	4620      	mov	r0, r4
   bf3f6:	9201      	str	r2, [sp, #4]
   bf3f8:	f7fb ffc2 	bl	bb380 <_malloc_r>
   bf3fc:	4604      	mov	r4, r0
   bf3fe:	b118      	cbz	r0, bf408 <_strdup_r+0x24>
   bf400:	9a01      	ldr	r2, [sp, #4]
   bf402:	4629      	mov	r1, r5
   bf404:	f7ff ff20 	bl	bf248 <memcpy>
   bf408:	4620      	mov	r0, r4
   bf40a:	b003      	add	sp, #12
   bf40c:	bd30      	pop	{r4, r5, pc}

000bf40e <strlen>:
   bf40e:	4603      	mov	r3, r0
   bf410:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf414:	2a00      	cmp	r2, #0
   bf416:	d1fb      	bne.n	bf410 <strlen+0x2>
   bf418:	1a18      	subs	r0, r3, r0
   bf41a:	3801      	subs	r0, #1
   bf41c:	4770      	bx	lr

000bf41e <strncmp>:
   bf41e:	b510      	push	{r4, lr}
   bf420:	b17a      	cbz	r2, bf442 <strncmp+0x24>
   bf422:	4603      	mov	r3, r0
   bf424:	3901      	subs	r1, #1
   bf426:	1884      	adds	r4, r0, r2
   bf428:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf42c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bf430:	4290      	cmp	r0, r2
   bf432:	d101      	bne.n	bf438 <strncmp+0x1a>
   bf434:	42a3      	cmp	r3, r4
   bf436:	d101      	bne.n	bf43c <strncmp+0x1e>
   bf438:	1a80      	subs	r0, r0, r2
   bf43a:	bd10      	pop	{r4, pc}
   bf43c:	2800      	cmp	r0, #0
   bf43e:	d1f3      	bne.n	bf428 <strncmp+0xa>
   bf440:	e7fa      	b.n	bf438 <strncmp+0x1a>
   bf442:	4610      	mov	r0, r2
   bf444:	e7f9      	b.n	bf43a <strncmp+0x1c>

000bf446 <strncpy>:
   bf446:	b510      	push	{r4, lr}
   bf448:	3901      	subs	r1, #1
   bf44a:	4603      	mov	r3, r0
   bf44c:	b132      	cbz	r2, bf45c <strncpy+0x16>
   bf44e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bf452:	f803 4b01 	strb.w	r4, [r3], #1
   bf456:	3a01      	subs	r2, #1
   bf458:	2c00      	cmp	r4, #0
   bf45a:	d1f7      	bne.n	bf44c <strncpy+0x6>
   bf45c:	441a      	add	r2, r3
   bf45e:	2100      	movs	r1, #0
   bf460:	4293      	cmp	r3, r2
   bf462:	d100      	bne.n	bf466 <strncpy+0x20>
   bf464:	bd10      	pop	{r4, pc}
   bf466:	f803 1b01 	strb.w	r1, [r3], #1
   bf46a:	e7f9      	b.n	bf460 <strncpy+0x1a>

000bf46c <strrchr>:
   bf46c:	b538      	push	{r3, r4, r5, lr}
   bf46e:	4603      	mov	r3, r0
   bf470:	460c      	mov	r4, r1
   bf472:	b969      	cbnz	r1, bf490 <strrchr+0x24>
   bf474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf478:	f7ff bf82 	b.w	bf380 <strchr>
   bf47c:	1c43      	adds	r3, r0, #1
   bf47e:	4605      	mov	r5, r0
   bf480:	4621      	mov	r1, r4
   bf482:	4618      	mov	r0, r3
   bf484:	f7ff ff7c 	bl	bf380 <strchr>
   bf488:	2800      	cmp	r0, #0
   bf48a:	d1f7      	bne.n	bf47c <strrchr+0x10>
   bf48c:	4628      	mov	r0, r5
   bf48e:	bd38      	pop	{r3, r4, r5, pc}
   bf490:	2500      	movs	r5, #0
   bf492:	e7f5      	b.n	bf480 <strrchr+0x14>

000bf494 <__strtok_r>:
   bf494:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf496:	b908      	cbnz	r0, bf49c <__strtok_r+0x8>
   bf498:	6810      	ldr	r0, [r2, #0]
   bf49a:	b188      	cbz	r0, bf4c0 <__strtok_r+0x2c>
   bf49c:	4604      	mov	r4, r0
   bf49e:	4620      	mov	r0, r4
   bf4a0:	f814 5b01 	ldrb.w	r5, [r4], #1
   bf4a4:	460f      	mov	r7, r1
   bf4a6:	f817 6b01 	ldrb.w	r6, [r7], #1
   bf4aa:	b91e      	cbnz	r6, bf4b4 <__strtok_r+0x20>
   bf4ac:	b965      	cbnz	r5, bf4c8 <__strtok_r+0x34>
   bf4ae:	6015      	str	r5, [r2, #0]
   bf4b0:	4628      	mov	r0, r5
   bf4b2:	e005      	b.n	bf4c0 <__strtok_r+0x2c>
   bf4b4:	42b5      	cmp	r5, r6
   bf4b6:	d1f6      	bne.n	bf4a6 <__strtok_r+0x12>
   bf4b8:	2b00      	cmp	r3, #0
   bf4ba:	d1f0      	bne.n	bf49e <__strtok_r+0xa>
   bf4bc:	6014      	str	r4, [r2, #0]
   bf4be:	7003      	strb	r3, [r0, #0]
   bf4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf4c2:	461c      	mov	r4, r3
   bf4c4:	e00c      	b.n	bf4e0 <__strtok_r+0x4c>
   bf4c6:	b915      	cbnz	r5, bf4ce <__strtok_r+0x3a>
   bf4c8:	f814 3b01 	ldrb.w	r3, [r4], #1
   bf4cc:	460e      	mov	r6, r1
   bf4ce:	f816 5b01 	ldrb.w	r5, [r6], #1
   bf4d2:	42ab      	cmp	r3, r5
   bf4d4:	d1f7      	bne.n	bf4c6 <__strtok_r+0x32>
   bf4d6:	2b00      	cmp	r3, #0
   bf4d8:	d0f3      	beq.n	bf4c2 <__strtok_r+0x2e>
   bf4da:	2300      	movs	r3, #0
   bf4dc:	f804 3c01 	strb.w	r3, [r4, #-1]
   bf4e0:	6014      	str	r4, [r2, #0]
   bf4e2:	e7ed      	b.n	bf4c0 <__strtok_r+0x2c>

000bf4e4 <strtok_r>:
   bf4e4:	2301      	movs	r3, #1
   bf4e6:	f7ff bfd5 	b.w	bf494 <__strtok_r>
	...

000bf4ec <_strtol_l.constprop.0>:
   bf4ec:	2b01      	cmp	r3, #1
   bf4ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf4f2:	d001      	beq.n	bf4f8 <_strtol_l.constprop.0+0xc>
   bf4f4:	2b24      	cmp	r3, #36	; 0x24
   bf4f6:	d906      	bls.n	bf506 <_strtol_l.constprop.0+0x1a>
   bf4f8:	f7fb ff4a 	bl	bb390 <__errno>
   bf4fc:	2316      	movs	r3, #22
   bf4fe:	6003      	str	r3, [r0, #0]
   bf500:	2000      	movs	r0, #0
   bf502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf506:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bf5ec <_strtol_l.constprop.0+0x100>
   bf50a:	460d      	mov	r5, r1
   bf50c:	462e      	mov	r6, r5
   bf50e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf512:	f814 700c 	ldrb.w	r7, [r4, ip]
   bf516:	f017 0708 	ands.w	r7, r7, #8
   bf51a:	d1f7      	bne.n	bf50c <_strtol_l.constprop.0+0x20>
   bf51c:	2c2d      	cmp	r4, #45	; 0x2d
   bf51e:	d132      	bne.n	bf586 <_strtol_l.constprop.0+0x9a>
   bf520:	782c      	ldrb	r4, [r5, #0]
   bf522:	2701      	movs	r7, #1
   bf524:	1cb5      	adds	r5, r6, #2
   bf526:	2b00      	cmp	r3, #0
   bf528:	d05b      	beq.n	bf5e2 <_strtol_l.constprop.0+0xf6>
   bf52a:	2b10      	cmp	r3, #16
   bf52c:	d109      	bne.n	bf542 <_strtol_l.constprop.0+0x56>
   bf52e:	2c30      	cmp	r4, #48	; 0x30
   bf530:	d107      	bne.n	bf542 <_strtol_l.constprop.0+0x56>
   bf532:	782c      	ldrb	r4, [r5, #0]
   bf534:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bf538:	2c58      	cmp	r4, #88	; 0x58
   bf53a:	d14d      	bne.n	bf5d8 <_strtol_l.constprop.0+0xec>
   bf53c:	786c      	ldrb	r4, [r5, #1]
   bf53e:	2310      	movs	r3, #16
   bf540:	3502      	adds	r5, #2
   bf542:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bf546:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf54a:	f04f 0c00 	mov.w	ip, #0
   bf54e:	fbb8 f9f3 	udiv	r9, r8, r3
   bf552:	4666      	mov	r6, ip
   bf554:	fb03 8a19 	mls	sl, r3, r9, r8
   bf558:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bf55c:	f1be 0f09 	cmp.w	lr, #9
   bf560:	d816      	bhi.n	bf590 <_strtol_l.constprop.0+0xa4>
   bf562:	4674      	mov	r4, lr
   bf564:	42a3      	cmp	r3, r4
   bf566:	dd24      	ble.n	bf5b2 <_strtol_l.constprop.0+0xc6>
   bf568:	f1bc 0f00 	cmp.w	ip, #0
   bf56c:	db1e      	blt.n	bf5ac <_strtol_l.constprop.0+0xc0>
   bf56e:	45b1      	cmp	r9, r6
   bf570:	d31c      	bcc.n	bf5ac <_strtol_l.constprop.0+0xc0>
   bf572:	d101      	bne.n	bf578 <_strtol_l.constprop.0+0x8c>
   bf574:	45a2      	cmp	sl, r4
   bf576:	db19      	blt.n	bf5ac <_strtol_l.constprop.0+0xc0>
   bf578:	fb06 4603 	mla	r6, r6, r3, r4
   bf57c:	f04f 0c01 	mov.w	ip, #1
   bf580:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf584:	e7e8      	b.n	bf558 <_strtol_l.constprop.0+0x6c>
   bf586:	2c2b      	cmp	r4, #43	; 0x2b
   bf588:	bf04      	itt	eq
   bf58a:	782c      	ldrbeq	r4, [r5, #0]
   bf58c:	1cb5      	addeq	r5, r6, #2
   bf58e:	e7ca      	b.n	bf526 <_strtol_l.constprop.0+0x3a>
   bf590:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bf594:	f1be 0f19 	cmp.w	lr, #25
   bf598:	d801      	bhi.n	bf59e <_strtol_l.constprop.0+0xb2>
   bf59a:	3c37      	subs	r4, #55	; 0x37
   bf59c:	e7e2      	b.n	bf564 <_strtol_l.constprop.0+0x78>
   bf59e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bf5a2:	f1be 0f19 	cmp.w	lr, #25
   bf5a6:	d804      	bhi.n	bf5b2 <_strtol_l.constprop.0+0xc6>
   bf5a8:	3c57      	subs	r4, #87	; 0x57
   bf5aa:	e7db      	b.n	bf564 <_strtol_l.constprop.0+0x78>
   bf5ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf5b0:	e7e6      	b.n	bf580 <_strtol_l.constprop.0+0x94>
   bf5b2:	f1bc 0f00 	cmp.w	ip, #0
   bf5b6:	da05      	bge.n	bf5c4 <_strtol_l.constprop.0+0xd8>
   bf5b8:	2322      	movs	r3, #34	; 0x22
   bf5ba:	6003      	str	r3, [r0, #0]
   bf5bc:	4646      	mov	r6, r8
   bf5be:	b942      	cbnz	r2, bf5d2 <_strtol_l.constprop.0+0xe6>
   bf5c0:	4630      	mov	r0, r6
   bf5c2:	e79e      	b.n	bf502 <_strtol_l.constprop.0+0x16>
   bf5c4:	b107      	cbz	r7, bf5c8 <_strtol_l.constprop.0+0xdc>
   bf5c6:	4276      	negs	r6, r6
   bf5c8:	2a00      	cmp	r2, #0
   bf5ca:	d0f9      	beq.n	bf5c0 <_strtol_l.constprop.0+0xd4>
   bf5cc:	f1bc 0f00 	cmp.w	ip, #0
   bf5d0:	d000      	beq.n	bf5d4 <_strtol_l.constprop.0+0xe8>
   bf5d2:	1e69      	subs	r1, r5, #1
   bf5d4:	6011      	str	r1, [r2, #0]
   bf5d6:	e7f3      	b.n	bf5c0 <_strtol_l.constprop.0+0xd4>
   bf5d8:	2430      	movs	r4, #48	; 0x30
   bf5da:	2b00      	cmp	r3, #0
   bf5dc:	d1b1      	bne.n	bf542 <_strtol_l.constprop.0+0x56>
   bf5de:	2308      	movs	r3, #8
   bf5e0:	e7af      	b.n	bf542 <_strtol_l.constprop.0+0x56>
   bf5e2:	2c30      	cmp	r4, #48	; 0x30
   bf5e4:	d0a5      	beq.n	bf532 <_strtol_l.constprop.0+0x46>
   bf5e6:	230a      	movs	r3, #10
   bf5e8:	e7ab      	b.n	bf542 <_strtol_l.constprop.0+0x56>
   bf5ea:	bf00      	nop
   bf5ec:	000c1010 	.word	0x000c1010

000bf5f0 <strtol>:
   bf5f0:	4613      	mov	r3, r2
   bf5f2:	460a      	mov	r2, r1
   bf5f4:	4601      	mov	r1, r0
   bf5f6:	4802      	ldr	r0, [pc, #8]	; (bf600 <strtol+0x10>)
   bf5f8:	6800      	ldr	r0, [r0, #0]
   bf5fa:	f7ff bf77 	b.w	bf4ec <_strtol_l.constprop.0>
   bf5fe:	bf00      	nop
   bf600:	2003de34 	.word	0x2003de34

000bf604 <close>:
   bf604:	4b02      	ldr	r3, [pc, #8]	; (bf610 <close+0xc>)
   bf606:	4601      	mov	r1, r0
   bf608:	6818      	ldr	r0, [r3, #0]
   bf60a:	f000 b8c9 	b.w	bf7a0 <_close_r>
   bf60e:	bf00      	nop
   bf610:	2003de34 	.word	0x2003de34

000bf614 <fstat>:
   bf614:	4b02      	ldr	r3, [pc, #8]	; (bf620 <fstat+0xc>)
   bf616:	460a      	mov	r2, r1
   bf618:	4601      	mov	r1, r0
   bf61a:	6818      	ldr	r0, [r3, #0]
   bf61c:	f000 b8d0 	b.w	bf7c0 <_fstat_r>
   bf620:	2003de34 	.word	0x2003de34

000bf624 <lseek>:
   bf624:	4613      	mov	r3, r2
   bf626:	460a      	mov	r2, r1
   bf628:	4601      	mov	r1, r0
   bf62a:	4802      	ldr	r0, [pc, #8]	; (bf634 <lseek+0x10>)
   bf62c:	6800      	ldr	r0, [r0, #0]
   bf62e:	f000 b8dd 	b.w	bf7ec <_lseek_r>
   bf632:	bf00      	nop
   bf634:	2003de34 	.word	0x2003de34

000bf638 <open>:
   bf638:	b40e      	push	{r1, r2, r3}
   bf63a:	b503      	push	{r0, r1, lr}
   bf63c:	ab03      	add	r3, sp, #12
   bf63e:	4601      	mov	r1, r0
   bf640:	4806      	ldr	r0, [pc, #24]	; (bf65c <open+0x24>)
   bf642:	f853 2b04 	ldr.w	r2, [r3], #4
   bf646:	9301      	str	r3, [sp, #4]
   bf648:	6800      	ldr	r0, [r0, #0]
   bf64a:	9b04      	ldr	r3, [sp, #16]
   bf64c:	f000 f8e0 	bl	bf810 <_open_r>
   bf650:	b002      	add	sp, #8
   bf652:	f85d eb04 	ldr.w	lr, [sp], #4
   bf656:	b003      	add	sp, #12
   bf658:	4770      	bx	lr
   bf65a:	bf00      	nop
   bf65c:	2003de34 	.word	0x2003de34

000bf660 <read>:
   bf660:	4613      	mov	r3, r2
   bf662:	460a      	mov	r2, r1
   bf664:	4601      	mov	r1, r0
   bf666:	4802      	ldr	r0, [pc, #8]	; (bf670 <read+0x10>)
   bf668:	6800      	ldr	r0, [r0, #0]
   bf66a:	f000 b8e3 	b.w	bf834 <_read_r>
   bf66e:	bf00      	nop
   bf670:	2003de34 	.word	0x2003de34

000bf674 <unlink>:
   bf674:	4b02      	ldr	r3, [pc, #8]	; (bf680 <unlink+0xc>)
   bf676:	4601      	mov	r1, r0
   bf678:	6818      	ldr	r0, [r3, #0]
   bf67a:	f000 b80d 	b.w	bf698 <_unlink_r>
   bf67e:	bf00      	nop
   bf680:	2003de34 	.word	0x2003de34

000bf684 <write>:
   bf684:	4613      	mov	r3, r2
   bf686:	460a      	mov	r2, r1
   bf688:	4601      	mov	r1, r0
   bf68a:	4802      	ldr	r0, [pc, #8]	; (bf694 <write+0x10>)
   bf68c:	6800      	ldr	r0, [r0, #0]
   bf68e:	f000 b813 	b.w	bf6b8 <_write_r>
   bf692:	bf00      	nop
   bf694:	2003de34 	.word	0x2003de34

000bf698 <_unlink_r>:
   bf698:	b538      	push	{r3, r4, r5, lr}
   bf69a:	4d06      	ldr	r5, [pc, #24]	; (bf6b4 <_unlink_r+0x1c>)
   bf69c:	2300      	movs	r3, #0
   bf69e:	4604      	mov	r4, r0
   bf6a0:	4608      	mov	r0, r1
   bf6a2:	602b      	str	r3, [r5, #0]
   bf6a4:	f7fb fc0e 	bl	baec4 <_unlink>
   bf6a8:	1c43      	adds	r3, r0, #1
   bf6aa:	d102      	bne.n	bf6b2 <_unlink_r+0x1a>
   bf6ac:	682b      	ldr	r3, [r5, #0]
   bf6ae:	b103      	cbz	r3, bf6b2 <_unlink_r+0x1a>
   bf6b0:	6023      	str	r3, [r4, #0]
   bf6b2:	bd38      	pop	{r3, r4, r5, pc}
   bf6b4:	2003e7f0 	.word	0x2003e7f0

000bf6b8 <_write_r>:
   bf6b8:	b538      	push	{r3, r4, r5, lr}
   bf6ba:	4d07      	ldr	r5, [pc, #28]	; (bf6d8 <_write_r+0x20>)
   bf6bc:	4604      	mov	r4, r0
   bf6be:	4608      	mov	r0, r1
   bf6c0:	4611      	mov	r1, r2
   bf6c2:	2200      	movs	r2, #0
   bf6c4:	602a      	str	r2, [r5, #0]
   bf6c6:	461a      	mov	r2, r3
   bf6c8:	f7fb fbc4 	bl	bae54 <_write>
   bf6cc:	1c43      	adds	r3, r0, #1
   bf6ce:	d102      	bne.n	bf6d6 <_write_r+0x1e>
   bf6d0:	682b      	ldr	r3, [r5, #0]
   bf6d2:	b103      	cbz	r3, bf6d6 <_write_r+0x1e>
   bf6d4:	6023      	str	r3, [r4, #0]
   bf6d6:	bd38      	pop	{r3, r4, r5, pc}
   bf6d8:	2003e7f0 	.word	0x2003e7f0

000bf6dc <__register_exitproc>:
   bf6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf6e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf79c <__register_exitproc+0xc0>
   bf6e4:	4606      	mov	r6, r0
   bf6e6:	f8d8 0000 	ldr.w	r0, [r8]
   bf6ea:	461f      	mov	r7, r3
   bf6ec:	460d      	mov	r5, r1
   bf6ee:	4691      	mov	r9, r2
   bf6f0:	f000 f878 	bl	bf7e4 <__retarget_lock_acquire_recursive>
   bf6f4:	4b25      	ldr	r3, [pc, #148]	; (bf78c <__register_exitproc+0xb0>)
   bf6f6:	681c      	ldr	r4, [r3, #0]
   bf6f8:	b934      	cbnz	r4, bf708 <__register_exitproc+0x2c>
   bf6fa:	4c25      	ldr	r4, [pc, #148]	; (bf790 <__register_exitproc+0xb4>)
   bf6fc:	601c      	str	r4, [r3, #0]
   bf6fe:	4b25      	ldr	r3, [pc, #148]	; (bf794 <__register_exitproc+0xb8>)
   bf700:	b113      	cbz	r3, bf708 <__register_exitproc+0x2c>
   bf702:	681b      	ldr	r3, [r3, #0]
   bf704:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf708:	6863      	ldr	r3, [r4, #4]
   bf70a:	2b1f      	cmp	r3, #31
   bf70c:	dd07      	ble.n	bf71e <__register_exitproc+0x42>
   bf70e:	f8d8 0000 	ldr.w	r0, [r8]
   bf712:	f000 f869 	bl	bf7e8 <__retarget_lock_release_recursive>
   bf716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf71e:	b34e      	cbz	r6, bf774 <__register_exitproc+0x98>
   bf720:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf724:	b988      	cbnz	r0, bf74a <__register_exitproc+0x6e>
   bf726:	4b1c      	ldr	r3, [pc, #112]	; (bf798 <__register_exitproc+0xbc>)
   bf728:	b923      	cbnz	r3, bf734 <__register_exitproc+0x58>
   bf72a:	f8d8 0000 	ldr.w	r0, [r8]
   bf72e:	f000 f85a 	bl	bf7e6 <__retarget_lock_release>
   bf732:	e7f0      	b.n	bf716 <__register_exitproc+0x3a>
   bf734:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf738:	f7fb fde2 	bl	bb300 <malloc>
   bf73c:	2800      	cmp	r0, #0
   bf73e:	d0f4      	beq.n	bf72a <__register_exitproc+0x4e>
   bf740:	2300      	movs	r3, #0
   bf742:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf746:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf74a:	6863      	ldr	r3, [r4, #4]
   bf74c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf750:	2201      	movs	r2, #1
   bf752:	409a      	lsls	r2, r3
   bf754:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf758:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf75c:	4313      	orrs	r3, r2
   bf75e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf762:	2e02      	cmp	r6, #2
   bf764:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf768:	bf02      	ittt	eq
   bf76a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf76e:	4313      	orreq	r3, r2
   bf770:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf774:	6863      	ldr	r3, [r4, #4]
   bf776:	f8d8 0000 	ldr.w	r0, [r8]
   bf77a:	1c5a      	adds	r2, r3, #1
   bf77c:	3302      	adds	r3, #2
   bf77e:	6062      	str	r2, [r4, #4]
   bf780:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf784:	f000 f830 	bl	bf7e8 <__retarget_lock_release_recursive>
   bf788:	2000      	movs	r0, #0
   bf78a:	e7c6      	b.n	bf71a <__register_exitproc+0x3e>
   bf78c:	2003e7e8 	.word	0x2003e7e8
   bf790:	2003e75c 	.word	0x2003e75c
   bf794:	00000000 	.word	0x00000000
   bf798:	000bb301 	.word	0x000bb301
   bf79c:	2003de98 	.word	0x2003de98

000bf7a0 <_close_r>:
   bf7a0:	b538      	push	{r3, r4, r5, lr}
   bf7a2:	4d06      	ldr	r5, [pc, #24]	; (bf7bc <_close_r+0x1c>)
   bf7a4:	2300      	movs	r3, #0
   bf7a6:	4604      	mov	r4, r0
   bf7a8:	4608      	mov	r0, r1
   bf7aa:	602b      	str	r3, [r5, #0]
   bf7ac:	f7fb fb62 	bl	bae74 <_close>
   bf7b0:	1c43      	adds	r3, r0, #1
   bf7b2:	d102      	bne.n	bf7ba <_close_r+0x1a>
   bf7b4:	682b      	ldr	r3, [r5, #0]
   bf7b6:	b103      	cbz	r3, bf7ba <_close_r+0x1a>
   bf7b8:	6023      	str	r3, [r4, #0]
   bf7ba:	bd38      	pop	{r3, r4, r5, pc}
   bf7bc:	2003e7f0 	.word	0x2003e7f0

000bf7c0 <_fstat_r>:
   bf7c0:	b538      	push	{r3, r4, r5, lr}
   bf7c2:	4d07      	ldr	r5, [pc, #28]	; (bf7e0 <_fstat_r+0x20>)
   bf7c4:	2300      	movs	r3, #0
   bf7c6:	4604      	mov	r4, r0
   bf7c8:	4608      	mov	r0, r1
   bf7ca:	4611      	mov	r1, r2
   bf7cc:	602b      	str	r3, [r5, #0]
   bf7ce:	f7fb fb59 	bl	bae84 <_fstat>
   bf7d2:	1c43      	adds	r3, r0, #1
   bf7d4:	d102      	bne.n	bf7dc <_fstat_r+0x1c>
   bf7d6:	682b      	ldr	r3, [r5, #0]
   bf7d8:	b103      	cbz	r3, bf7dc <_fstat_r+0x1c>
   bf7da:	6023      	str	r3, [r4, #0]
   bf7dc:	bd38      	pop	{r3, r4, r5, pc}
   bf7de:	bf00      	nop
   bf7e0:	2003e7f0 	.word	0x2003e7f0

000bf7e4 <__retarget_lock_acquire_recursive>:
   bf7e4:	4770      	bx	lr

000bf7e6 <__retarget_lock_release>:
   bf7e6:	4770      	bx	lr

000bf7e8 <__retarget_lock_release_recursive>:
   bf7e8:	4770      	bx	lr
	...

000bf7ec <_lseek_r>:
   bf7ec:	b538      	push	{r3, r4, r5, lr}
   bf7ee:	4d07      	ldr	r5, [pc, #28]	; (bf80c <_lseek_r+0x20>)
   bf7f0:	4604      	mov	r4, r0
   bf7f2:	4608      	mov	r0, r1
   bf7f4:	4611      	mov	r1, r2
   bf7f6:	2200      	movs	r2, #0
   bf7f8:	602a      	str	r2, [r5, #0]
   bf7fa:	461a      	mov	r2, r3
   bf7fc:	f7fb fb4a 	bl	bae94 <_lseek>
   bf800:	1c43      	adds	r3, r0, #1
   bf802:	d102      	bne.n	bf80a <_lseek_r+0x1e>
   bf804:	682b      	ldr	r3, [r5, #0]
   bf806:	b103      	cbz	r3, bf80a <_lseek_r+0x1e>
   bf808:	6023      	str	r3, [r4, #0]
   bf80a:	bd38      	pop	{r3, r4, r5, pc}
   bf80c:	2003e7f0 	.word	0x2003e7f0

000bf810 <_open_r>:
   bf810:	b538      	push	{r3, r4, r5, lr}
   bf812:	4d07      	ldr	r5, [pc, #28]	; (bf830 <_open_r+0x20>)
   bf814:	4604      	mov	r4, r0
   bf816:	4608      	mov	r0, r1
   bf818:	4611      	mov	r1, r2
   bf81a:	2200      	movs	r2, #0
   bf81c:	602a      	str	r2, [r5, #0]
   bf81e:	461a      	mov	r2, r3
   bf820:	f7fb fb10 	bl	bae44 <_open>
   bf824:	1c43      	adds	r3, r0, #1
   bf826:	d102      	bne.n	bf82e <_open_r+0x1e>
   bf828:	682b      	ldr	r3, [r5, #0]
   bf82a:	b103      	cbz	r3, bf82e <_open_r+0x1e>
   bf82c:	6023      	str	r3, [r4, #0]
   bf82e:	bd38      	pop	{r3, r4, r5, pc}
   bf830:	2003e7f0 	.word	0x2003e7f0

000bf834 <_read_r>:
   bf834:	b538      	push	{r3, r4, r5, lr}
   bf836:	4d07      	ldr	r5, [pc, #28]	; (bf854 <_read_r+0x20>)
   bf838:	4604      	mov	r4, r0
   bf83a:	4608      	mov	r0, r1
   bf83c:	4611      	mov	r1, r2
   bf83e:	2200      	movs	r2, #0
   bf840:	602a      	str	r2, [r5, #0]
   bf842:	461a      	mov	r2, r3
   bf844:	f7fb fb0e 	bl	bae64 <_read>
   bf848:	1c43      	adds	r3, r0, #1
   bf84a:	d102      	bne.n	bf852 <_read_r+0x1e>
   bf84c:	682b      	ldr	r3, [r5, #0]
   bf84e:	b103      	cbz	r3, bf852 <_read_r+0x1e>
   bf850:	6023      	str	r3, [r4, #0]
   bf852:	bd38      	pop	{r3, r4, r5, pc}
   bf854:	2003e7f0 	.word	0x2003e7f0

000bf858 <dynalib_user>:
   bf858:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   bf868:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bf878:	72697620 6c617574 696e6900 61662074      virtual.init fa
   bf888:	64656c69 74655300 676e6974 646f6e20     iled.Setting nod
   bf898:	756e2065 7265626d 20736120 65746147     e number as Gate
   bf8a8:	00796177 41526f4c 64615220 69206f69     way.LoRA Radio i
   bf8b8:	6974696e 7a696c61 61206465 6f4e2073     nitialized as No
   bf8c8:	754e6564 7265626d 20666f20 61206925     deNumber of %i a
   bf8d8:	4420646e 63697665 20444965 2520666f     nd DeviceID of %
   bf8e8:	6e612069 20612064 6967616d 756e2063     i and a magic nu
   bf8f8:	7265626d 20666f20 44006925 70696365     mber of %i.Decip
   bf908:	65726568 61642064 72206174 726f7065     hered data repor
   bf918:	64252074 6f726620 6f6e206d 25206564     t %d from node %
   bf928:	65530064 7220746e 6f707365 2065736e     d.Sent response 
   bf938:	63206f74 6e65696c 656d2074 67617373     to client messag
   bf948:	64252065 6974202c 3d20656d 2c732520     e %d, time = %s,
   bf958:	78656e20 65722074 74726f70 25203d20      next report = %
   bf968:	65732075 646e6f63 65520073 6e6f7073     u seconds.Respon
   bf978:	72206573 69656365 20646576 63637573     se received succ
   bf988:	66737365 796c6c75 73655200 736e6f70     essfully.Respons
   bf998:	6f6e2065 63612074 776f6e6b 6764656c     e not acknowledg
   bf9a8:	53006465 20746e65 70736572 65736e6f     ed.Sent response
   bf9b8:	206f7420 65646f4e 2c642520 6d697420      to Node %d, tim
   bf9c8:	203d2065 202c7325 7478656e 70657220     e = %s, next rep
   bf9d8:	2074726f 7525203d 63657320 73646e6f     ort = %u seconds
   bf9e8:	63654400 65687069 20646572 72656c61     .Deciphered aler
   bf9f8:	65722074 74726f70 6f726620 6f6e206d     t report from no
   bfa08:	25206564 65520064 76696563 66206465     de %d.Received f
   bfa18:	206d6f72 65646f6e 20642520 68746977     rom node %d with
   bfa28:	73737220 64253d69 61202d20 20732520      rssi=%d - a %s 
   bfa38:	7373656d 20656761 6c20666f 74676e65     message of lengt
   bfa48:	64252068 646e6120 69617720 20646574     h %d and waited 
   bfa58:	20726f66 20756c25 6365536d 65725000     for %lu mSec.Pre
   bfa68:	69726170 6120676e 6f6e6b63 64656c77     paring acknowled
   bfa78:	656d6567 7720746e 20687469 73206925     gement with %i s
   bfa88:	6e6f6365 52007364 6f707365 6e69646e     econds.Respondin
   bfa98:	73752067 20676e69 20656874 6d207325     g using the %s m
   bfaa8:	61737365 74206567 00657079 61636f6c     essage type.loca
   bfab8:	6974206c 203a656d 61207325 6e20646e     l time: %s and n
   bfac8:	20747865 6e657665 73692074 756c2520     ext event is %lu
   bfad8:	63657320 73646e6f 61776120 72460079      seconds away.Fr
   bfae8:	25206d6f 6f742073 20732520 68746977     om %s to %s with
   bfaf8:	766e6920 64696c61 6d697420 72460065      invalid time.Fr
   bfb08:	25206d6f 6f742073 20732520 20726f66     om %s to %s for 
   bfb18:	73207525 6e6f6365 46007364 206d6f72     %u seconds.From 
   bfb28:	74207325 7325206f 656c5300 66207065     %s to %s.Sleep f
   bfb38:	2520726f 65732069 646e6f63 69742073     or %i seconds ti
   bfb48:	6e206c6c 20747865 6e657665 74612074     ll next event at
   bfb58:	20732520 68746977 696c2520 65726620      %s with %li fre
   bfb68:	656d2065 79726f6d 6f774100 6120656b     e memory.Awoke a
   bfb78:	73252074 74697720 6c252068 72662069     t %s with %li fr
   bfb88:	6d206565 726f6d65 61470079 61776574     ee memory.Gatewa
   bfb98:	73692079 73696c20 696e6574 6620676e     y is listening f
   bfba8:	4c20726f 2041526f 7373656d 73656761     or LoRA messages
   bfbb8:	20655700 20657261 61647075 676e6974     .We are updating
   bfbc8:	65687420 62757020 6873696c 65726620      the publish fre
   bfbd8:	6e657571 74207963 6925206f 6e696d20     quency to %i min
   bfbe8:	73657475 3a363000 303a3030 31320030     utes.06:00:00.21
   bfbf8:	3a39353a 53003935 69646e65 7220676e     :59:59.Sending r
   bfc08:	6f707365 2065736e 68746977 20642520     esponse with %d 
   bfc18:	6f636573 2073646e 69746e75 6572206c     seconds until re
   bfc28:	6e727574 6e227b00 6965646f 253a2264     turn.{"nodeid":%
   bfc38:	22202c75 72756f68 3a22796c 202c7525     u, "hourly":%u, 
   bfc48:	69616422 3a22796c 222c7525 74746162     "daily":%u,"batt
   bfc58:	22797265 2c64253a 79656b22 223a2231     ery":%d,"key1":"
   bfc68:	2c227325 6d657422 253a2270 22202c64     %s","temp":%d, "
   bfc78:	65736572 3a227374 222c6425 69737372     resets":%d,"rssi
   bfc88:	64253a22 6d22202c 3a226773 222c6425     ":%d, "msg":%d,"
   bfc98:	656d6974 6d617473 253a2270 3030756c     timestamp":%lu00
   bfca8:	55007d30 6f646962 4c2d7374 2d41526f     0}.Ubidots-LoRA-
   bfcb8:	6b6f6f48 0031762d 6e696f47 6f742067     Hook-v1.Going to
   bfcc8:	65656420 6f702070 20726577 6c637963      deep power cycl
   bfcd8:	65642065 65636976 726f6620 78656e20     e device for nex
   bfce8:	69632074 69756372 65440074 70207065     t circuit.Deep p
   bfcf8:	7265776f 776f6420 6564206e 65636976     ower down device
   bfd08:	54534500 54444535 2e334d2c 2f302e32     .EST5EDT,M3.2.0/
   bfd18:	30303a32 2c30303a 2e31314d 2f302e31     2:00:00,M11.1.0/
   bfd28:	30303a32 0030303a 353a3232 39353a39     2:00:00.22:59:59
   bfd38:	73734100 69747265 61466e6f 72756c69     .AssertionFailur
   bfd48:	72732065 26262063 63727320 61633e2d     e src && src->ca
   bfd58:	61626c6c 47006b63 77657461 73207961     llback.Gateway s
   bfd68:	74726174 63207075 6c706d6f 20657465     tartup complete 
   bfd78:	25207461 69772073 62206874 65747461     at %s with batte
   bfd88:	25207972 66322e34 00000000              ry %4.2f....

000bfd94 <_ZTV8MB85RC64>:
	...
   bfd9c:	000b468d 000b46a1 000b81f1 000b8287     .F...F..........
   bfdac:	000b8309 74696e49 7a696c61 20676e69     ....Initalizing 
   bfdbc:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   bfdcc:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   bfddc:	666e6f43 00006769                       Config..

000bfde4 <BLUE_LED>:
   bfde4:	                                         ..

000bfde6 <BUTTON_PIN>:
   bfde6:	                                         ..

000bfde8 <RFM95_CS>:
   bfde8:	                                         ..

000bfdea <RFM95_INT>:
   bfdea:	                                         ..

000bfdec <TMP36_SENSE_PIN>:
   bfdec:	7525000f 6e696d20 73657275 73655900     ..%u minures.Yes
   bfdfc:	006f4e00 69726556 006e6f7a 6e6b6e55     .No.Verizon.Unkn
   bfe0c:	006e776f 20746f4e 72616843 676e6967     own.Not Charging
   bfe1c:	61684300 64656772 73694400 72616863     .Charged.Dischar
   bfe2c:	676e6967 75614600 4400746c 6e6f6369     ging.Fault.Dicon
   bfe3c:	7463656e 49006465 6974696e 7a696c61     nected.Initializ
   bfe4c:	20676e69 74726150 656c6369 6e756620     ing Particle fun
   bfe5c:	6f697463 6120736e 7620646e 61697261     ctions and varia
   bfe6c:	73656c62 776f4c00 776f5020 4d207265     bles.Low Power M
   bfe7c:	0065646f 656c6552 00657361 6e676953     ode.Release.Sign
   bfe8c:	73006c61 65746174 6843664f 61420067     al.stateOfChg.Ba
   bfe9c:	72657474 6e6f4379 74786574 70655200     tteryContext.Rep
   bfeac:	6974726f 4620676e 75716572 79636e65     orting Frequency
   bfebc:	4d495300 72614320 65530064 6f4c2074     .SIM Card.Set Lo
   bfecc:	6f502077 00726577 20746553 71657246     w Power.Set Freq
   bfedc:	636e6575 65520079 74726f70 65726620     uency.Report fre
   bfeec:	6e657571 77207963 206c6c69 73206562     quency will be s
   bfefc:	74207465 6925206f 6e696d20 73657475     et to %i minutes
   bff0c:	20746120 7478656e 526f4c20 6f632041      at next LoRA co
   bff1c:	63656e6e 69540074 5300656d 74726f68     nnect.Time.Short
   bff2c:	70657220 6974726f 6620676e 75716572      reporting frequ
   bff3c:	79636e65 65766f20 69722d72 20736564     ency over-rides 
   bff4c:	20776f6c 65776f70 65790072 6f6e0073     low power.yes.no
   bff5c:	636e4900 73616572 20676e69 6f706572     .Increasing repo
   bff6c:	6e697472 72662067 65757165 2079636e     rting frequency 
   bff7c:	31206f74 696d2032 6574756e 73490073     to 12 minutes.Is
   bff8c:	776f4c20 776f5020 4d207265 2065646f      Low Power Mode 
   bff9c:	3f746573 00732520 20746553 56206f74     set? %s.Set to V
   bffac:	7a697265 53206e6f 53004d49 74207465     erizon SIM.Set t
   bffbc:	6150206f 63697472 5320656c 49004d49     o Particle SIM.I
   bffcc:	6874206e 69642065 6e6f6373 7463656e     n the disconnect
   bffdc:	6f726620 6150206d 63697472 6620656c      from Particle f
   bffec:	74636e75 006e6f69 6c696146 74206465     unction.Failed t
   bfffc:	6964206f 6e6f6373 7463656e 6f726620     o disconnect fro
   c000c:	6150206d 63697472 4400656c 6f637369     m Particle.Disco
   c001c:	63656e6e 20646574 6d6f7266 72615020     nnected from Par
   c002c:	6c636974 6e692065 20692520 6f636573     ticle in %i seco
   c003c:	0073646e 6c696146 74206465 7574206f     nds.Failed to tu
   c004c:	6f206e72 74206666 43206568 756c6c65     rn off the Cellu
   c005c:	2072616c 65646f6d 7554006d 64656e72     lar modem.Turned
   c006c:	66666f20 65687420 6c656320 616c756c      off the cellula
   c007c:	6f6d2072 206d6564 25206e69 65732069     r modem in %i se
   c008c:	646e6f63 00000073                       conds...

000c0094 <_ZTVN5spark10LogHandlerE>:
	...
   c00a4:	000b40a5 000b51a5                       .@...Q..

000c00ac <_ZTVN5spark16SerialLogHandlerE>:
	...
   c00b4:	000b5219 000b524d 000bd069 000b51a7     .R..MR..i....Q..
   c00c4:	64616f4c 20676e69 74737953 44206d65     Loading System D
   c00d4:	75616665 0073746c 64616f4c 20676e69     efaults.Loading 
   c00e4:	74737973 64206d65 75616665 0073746c     system defaults.
   c00f4:	53737973 73756174 6a626f20 20746365     sysStaus object 
   c0104:	726f7473 61206465 6820646e 20687361     stored and hash 
   c0114:	61647075 20646574 25206e69 6d20756c     updated in %lu m
   c0124:	00636553 72727563 20746e65 656a626f     Sec.current obje
   c0134:	73207463 65726f74 6e612064 61682064     ct stored and ha
   c0144:	75206873 74616470 69206465 6c25206e     sh updated in %l
   c0154:	536d2075 49006365 6974696e 7a696c61     u mSec.Initializ
   c0164:	20676e69 20656874 656a624f 53207463     ing the Object S
   c0174:	65726f74 41524600 696d204d 74616d73     tore.FRAM mismat
   c0184:	202c6863 73617265 20676e69 20646e61     ch, erasing and 
   c0194:	64616f6c 20676e69 61666564 73746c75     loading defaults
   c01a4:	20666920 63207469 6b636568 756f2073      if it checks ou
   c01b4:	52460074 69204d41 6974696e 7a696c61     t.FRAM initializ
   c01c4:	202c6465 64616f6c 20676e69 656a626f     ed, loading obje
   c01d4:	00737463                                cts.

000c01d8 <_ZL17FRAMversionNumber>:
   c01d8:	00000001 656e6f4e 46695700 53470069     ....None.WiFi.GS
   c01e8:	4d55004d 43005354 00414d44 0045544c     M.UMTS.CDMA.LTE.
   c01f8:	45454549 31323038 4c003435 435f4554     IEEE802154.LTE_C
   c0208:	4d5f5441 544c0031 41435f45 424e5f54     AT_M1.LTE_CAT_NB
   c0218:	73250031 253a5320 66302e32 202c2525     1.%s S:%2.0f%%, 
   c0228:	32253a51 2566302e 25002025 00432069     Q:%2.0f%% .%i C.
   c0238:	65746e49 6c616e72 6d655420 61726570     Internal Tempera
   c0248:	65727574 20736920 00007325 000bfe08     ture is %s......
   c0258:	000c01dc 000c01e1 000c01e6 000c01ea     ................
   c0268:	000c01ef 000c01f4 000c01f8 000c0203     ................
   c0278:	000c020e 6c696166 74206465 6572206f     ....failed to re
   c0288:	72206461 64416765 253d7264 20783230     ad regAddr=%02x 
   c0298:	6e756f63 75253d74 69616600 2064656c     count=%u.failed 
   c02a8:	72206f74 20646165 41676572 3d726464     to read regAddr=
   c02b8:	78323025 61747320 64253d74 554f4600     %02x stat=%d.FOU
   c02c8:	69642054 6f6e2064 6f672074 47494820     T did not go HIG
   c02d8:	6f6e0048 65642074 74636574 66006465     H.not detected.f
   c02e8:	656c6961 6f742064 69727720 72206574     ailed to write r
   c02f8:	64416765 253d7264 20783230 74617473     egAddr=%02x stat
   c0308:	0064253d 57746573 25205444 61770064     =%d.setWDT %d.wa
   c0318:	64686374 6320676f 7261656c 62206465     tchdog cleared b
   c0328:	75736552 253d746c 61770064 64686374     Result=%d.watchd
   c0338:	7320676f 66207465 5372756f 3d736365     og set fourSecs=
   c0348:	62206425 75736552 253d746c 41570064     %d bResult=%d.WA
   c0358:	44484354 4400474f 5f504545 45574f50     TCHDOG.DEEP_POWE
   c0368:	4f445f52 43004e57 544e554f 4e574f44     R_DOWN.COUNTDOWN
   c0378:	4d49545f 41005245 4d52414c 69616600     _TIMER.ALARM.fai
   c0388:	6572756c 206e6920 61647075 61576574     lure in updateWa
   c0398:	6552656b 6e6f7361 00642520 656b6177     keReason %d.wake
   c03a8:	61657220 206e6f73 7325203d 69616600      reason = %s.fai
   c03b8:	6572756c 206e6920 43746573 746e756f     lure in setCount
   c03c8:	6e776f64 656d6954 64252072 69616600     downTimer %d.fai
   c03d8:	6572756c 206e6920 70656564 65776f50     lure in deepPowe
   c03e8:	776f4472 6425206e 47455200 454c535f     rDown %d.REG_SLE
   c03f8:	435f5045 3d4c5254 32257830 69640078     EP_CTRL=0x%2x.di
   c0408:	74276e64 776f7020 64207265 006e776f     dn't power down.
   c0418:	64343025 3230252d 30252d64 25206432     %04d-%02d-%02d %
   c0428:	3a643230 64323025 3230253a 65670064     02d:%02d:%02d.ge
   c0438:	63745274 6d547341 00732520 52746573     tRtcAsTm %s.setR
   c0448:	73416374 25206d54 61660073 72756c69     tcAsTm %s.failur
   c0458:	6e692065 74657320 46637452 546d6f72     e in setRtcFromT
   c0468:	6425206d 74657300 43545220 6f726620     m %d.set RTC fro
   c0478:	6c63206d 2064756f 73007325 73207465     m cloud %s.set s
   c0488:	65747379 6c63206d 206b636f 6d6f7266     ystem clock from
   c0498:	43545220 00732520 6c696166 74206465      RTC %s.failed t
   c04a8:	6564206f 74636574 31424120 00353038     o detect AB1805.
   c04b8:	2e707061 38316261 00003530              app.ab1805..

000c04c4 <_ZTV6AB1805>:
	...
   c04cc:	000b5d35 000b5d37 000b63ad 000b6433     5]..7]...c..3d..
   c04dc:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   c04ec:	004b5268                                hRK.

000c04f0 <_ZTV19BackgroundPublishRK>:
	...
   c04f8:	000b6969 000b6985 253a6425 64253a64     ii...i..%d:%d:%d
   c0508:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   c0518:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   c0528:	302b2500 253a6433 00753230 74636576     .%+03d:%02u.vect
   c0538:	3a3a726f 725f4d5f 6c6c6165 695f636f     or::_M_realloc_i
   c0548:	7265736e 00000074                       nsert...

000c0550 <_ZTV9LocalTime>:
	...
   c0558:	000b6cbd 000b6cd5                       .l...l..

000c0560 <_ZTV12LocalTimeHMS>:
	...
   c0568:	000b6c67 000b6c6f                       gl..ol..

000c0570 <_ZTV15LocalTimeChange>:
	...
   c0578:	000b6c69 000b6c7d                       il..}l..

000c0580 <_ZTV22LocalTimePosixTimezone>:
	...
   c0588:	000b6c8d 000b6ca9 74697277 74614465     .l...l..writeDat
   c0598:	61662061 64656c69 72756420 20676e69     a failed during 
   c05a8:	73617265 72662065 64416d61 253d7264     erase framAddr=%
   c05b8:	00000075                                u...

000c05bc <_ZTV6MB85RC>:
	...
   c05c4:	000b813f 000b8141 000b81f1 000b8287     ?...A...........
   c05d4:	000b8309 656c6966 3d6d754e 73206425     ....fileNum=%d s
   c05e4:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   c05f4:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   c0604:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   c0614:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   c0624:	64657470 65766520 6e20746e 20656d61     pted event name 
   c0634:	6420726f 00617461 64616572 75657551     or data.readQueu
   c0644:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   c0654:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   c0664:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   c0674:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   c0684:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   c0694:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   c06a4:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   c06b4:	76652064 20746e65 72006425 74657365     d event %d.reset
   c06c4:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   c06d4:	746e6576 6173202c 66206576 73656c69     vent, save files
   c06e4:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   c06f4:	72616373 676e6964 726f6320 74707572     scarding corrupt
   c0704:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c0714:	6e696873 73252067 65766520 253d746e     shing %s event=%
   c0724:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c0734:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c0744:	20736920 75716572 64657269 62757000      is required.pub
   c0754:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c0764:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c0774:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c0784:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c0794:	72656772 61687420 616d206e 69735f78     rger than max_si
   c07a4:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c07b4:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c07c4:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c07d4:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c07e4:	00657565 6c627570 20687369 63637573     eue.publish succ
   c07f4:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c0804:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c0814:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c0824:	206f7420 656c6966 66612073 20726574      to files after 
   c0834:	6c627570 20687369 6c696166 00657275     publish failure.
   c0844:	2e707061 71627570 00000000              app.pubq....

000c0850 <_ZTV17PublishQueuePosix>:
	...
   c0858:	000b8c3d 000b8ef9 000b8f1d              =...........

000c0864 <_ZTV15RHGenericDriver>:
	...
   c0874:	000b903d 000b40a5 000b40a5 000b40a5     =....@...@...@..
   c0884:	000b40a5 000b909f 000b9041 000b90ef     .@......A.......
   c0894:	000b90bd 000b9113 000b904b 000b9053     ........K...S...
   c08a4:	000b9057 000b905b 000b905f 000b9063     W...[..._...c...
   c08b4:	000b904f 000b906f 000b9073 000b9077     O...o...s...w...
   c08c4:	000b907b 000b907f 000b9085 000b9089     {...............
   c08d4:	000b904b 000b908d 000b9093 000b9099     K...............

000c08e4 <_ZTV12RHGenericSPI>:
	...
   c08ec:	000b40a5 000b9171 000b9173 000b40a5     .@..q...s....@..
   c08fc:	000b40a5 000b917b 000b917f 000b9183     .@..{...........
   c090c:	000b9175 000b9177 000b9179 61666564     u...w...y...defa
   c091c:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c092c:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c093c:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c094c:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c095c <_ZTVN8particle11SPISettingsE>:
	...
   c0964:	000b91c9 000b919d 000b919f              ............

000c0970 <_ZTV13RHHardwareSPI>:
	...
   c0978:	000b927d 000b9291 000b929f 000b92ad     }...............
   c0988:	000b9319 000b917b 000b917f 000b9183     ....{...........
   c0998:	000b9327 000b933b 000b9349              '...;...I...

000c09a4 <_ZTV6RHMesh>:
	...
   c09ac:	000b9415 000b9719 000b9375 000b9361     ........u...a...

000c09bc <_ZTV8RHRouter>:
	...
   c09c4:	000b9985 000b99c9                       ........

000c09cc <_ZTV11RHSPIDriver>:
	...
   c09dc:	000b9c65 000b40a5 000b40a5 000b40a5     e....@...@...@..
   c09ec:	000b40a5 000b909f 000b9041 000b90ef     .@......A.......
   c09fc:	000b90bd 000b9113 000b904b 000b9053     ........K...S...
   c0a0c:	000b9057 000b905b 000b905f 000b9063     W...[..._...c...
   c0a1c:	000b904f 000b906f 000b9073 000b9077     O...o...s...w...
   c0a2c:	000b907b 000b907f 000b9085 000b9089     {...............
   c0a3c:	000b904b 000b908d 000b9093 000b9099     K...............
   c0a4c:	000b9c91 000b9c9b                       ........

000c0a54 <_ZL18MODEM_CONFIG_TABLE>:
   c0a54:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c0a64 <_ZTV7RH_RF95>:
	...
   c0a6c:	000b9e03 000b9e3b 000ba311 000ba1a7     ....;...........
   c0a7c:	000b9e71 000ba1ef 000b9dff 000b909f     q...............
   c0a8c:	000b9041 000b90ef 000b90bd 000b9113     A...............
   c0a9c:	000b9e05 000b9053 000b9057 000b905b     ....S...W...[...
   c0aac:	000b905f 000b9063 000b904f 000b906f     _...c...O...o...
   c0abc:	000b9073 000b9077 000b907b 000b907f     s...w...{.......
   c0acc:	000b9085 000b9089 000b9e4b 000b908d     ........K.......
   c0adc:	000b9093 000b9099 000b9c91 000b9c9b     ................
   c0aec:	000b9dfb 64383025 72002f00 766f6d65     ....%08d./.remov
   c0afc:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c0b0c:	20646e61 61207369 72696420 6f746365     and is a directo
   c0b1c:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c0b2c:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c0b3c:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c0b4c:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c0b5c:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c0b6c:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c0b7c:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c0b8c:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c0b9c:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c0bac:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c0bbc:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c0bcc:	74657220 656e7275 64252064 70706100      returned %d.app
   c0bdc:	7165732e 656c6966 00000000              .seqfile....

000c0be8 <_ZTV14SequentialFile>:
	...
   c0bf0:	000ba76d 000ba799 000ba419              m...........

000c0bfc <_ZTVN5spark13CellularClassE>:
	...
   c0c04:	000bb4eb 000bb4e1 000bb4d7 000bb48d     ................
   c0c14:	000bb4cb 000bb4bf 000bd3c1 000bd3c9     ................
   c0c24:	000bb4b3 000bb4ab 000bb4a1 000bb497     ................
   c0c34:	000bd3f9                                ....

000c0c38 <_ZTV14CellularSignal>:
	...
   c0c40:	000bb579 000bb5dd 000bb57b 000bb5ed     y.......{.......
   c0c50:	000bb621 000bb64d 000bb681 000bb5a1     !...M...........
   c0c60:	000bb57f 000bb59b fffffffc 00000000     ................
   c0c70:	000bb5d5                                ....

000c0c74 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0c7c:	000bb6c5 000bb6cb 000bb709 000bb6d9     ................
   c0c8c:	000bb6c7                                ....

000c0c90 <_ZTVN5spark13EthernetClassE>:
	...
   c0c98:	000bbcd3 000bbcc9 000bbcbf 000bbcb5     ................
   c0ca8:	000bbca9 000bbc9d 000bd3c1 000bd3c9     ................
   c0cb8:	000bbc91 000bbc89 000bbc7f 000bbc75     ............u...
   c0cc8:	000bd3f9                                ....

000c0ccc <_ZTV7TwoWire>:
	...
   c0cd4:	000bbe9f 000bbee9 000bbec1 000bbea1     ................
   c0ce4:	000bbec9 000bbed1 000bbed9 000bbee1     ................

000c0cf4 <_ZTV9IPAddress>:
	...
   c0cfc:	000bc081 000bc071 000bc073 34302575     ....q...s...u%04
   c0d0c:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c0d1c:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c0d2c:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c0d3c:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c0d4c:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   c0d5c:	20736c69 0d00203d 6e6c000a 006e6600     ils = ....ln.fn.
   c0d6c:	65646f63 74656400 006c6961              code.detail.

000c0d78 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c0d80:	000bc52d 000bc553 000bc511 000bc18f     -...S...........

000c0d90 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c0d98:	000bc911 000bc929 000bd069 000b51a7     ....)...i....Q..

000c0da8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c0db0:	000bc93d 000bc951 000bd20d 000bc519     =...Q...........

000c0dc0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c0dc8:	000bc52b 000bc561 000bcfcd 000bc51b     +...a...........

000c0dd8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c0de0:	000bc529 000bc56f 000bc879 000bc591     )...o...y.......

000c0df0 <_ZTVN5spark12NetworkClassE>:
	...
   c0df8:	000bd381 000bd38b 000bd395 000bd39f     ................
   c0e08:	000bd3a9 000bd3b5 000bd3c1 000bd3c9     ................
   c0e18:	000bd3d1 000bd3dd 000bd3e5 000bd3ef     ................
   c0e28:	000bd3f9 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000c0e38 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c0e38:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c0e48:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c0e58:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c0e68:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c0e78:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c0e88:	00000065                                e...

000c0e8c <_ZTV11USARTSerial>:
	...
   c0e94:	000be261 000be2cd 000be2a5 000bd649     a...........I...
   c0ea4:	000be275 000be291 000be283 000be29f     u...............
   c0eb4:	000be263 000be267                       c...g...

000c0ebc <_ZTV9USBSerial>:
	...
   c0ec4:	000be31f 000be387 000be35d 000bd649     ........]...I...
   c0ed4:	000be34f 000be321 000be331 000be381     O...!...1.......
   c0ee4:	000be341 000be319                       A.......

000c0eec <_ZSt7nothrow>:
   c0eec:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c0efc:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c0f0d <day_name.1>:
   c0f0d:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c0f1d:	61536972                                 riSat

000c0f22 <mon_name.0>:
   c0f22:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c0f32:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c0f42:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c0f52:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c0f62:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c0f72:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c0f82:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c0f92:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c0fa2:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c0fb2:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c0fc2:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c0fd2:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c0fe2:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c0ff2:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c1002:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c100f <_ctype_>:
   c100f:	20202000 20202020 28282020 20282828     .         ((((( 
   c101f:	20202020 20202020 20202020 20202020                     
   c102f:	10108820 10101010 10101010 10101010      ...............
   c103f:	04040410 04040404 10040404 10101010     ................
   c104f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c105f:	01010101 01010101 01010101 10101010     ................
   c106f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c107f:	02020202 02020202 02020202 10101010     ................
   c108f:	00000020 00000000 00000000 00000000      ...............
	...

000c1110 <link_const_variable_data_end>:
   c1110:	000b4615 	.word	0x000b4615
   c1114:	000b4e69 	.word	0x000b4e69
   c1118:	000b56e9 	.word	0x000b56e9
   c111c:	000b5975 	.word	0x000b5975
   c1120:	000b5d29 	.word	0x000b5d29
   c1124:	000b684d 	.word	0x000b684d
   c1128:	000b8ee9 	.word	0x000b8ee9
   c112c:	000b9351 	.word	0x000b9351
   c1130:	000baab5 	.word	0x000baab5
   c1134:	000bb47d 	.word	0x000bb47d
   c1138:	000bb549 	.word	0x000bb549
   c113c:	000bbcdd 	.word	0x000bbcdd
   c1140:	000bd059 	.word	0x000bd059
   c1144:	000bd4d1 	.word	0x000bd4d1
   c1148:	000bd93d 	.word	0x000bd93d
   c114c:	000bdf25 	.word	0x000bdf25
   c1150:	000be24d 	.word	0x000be24d

000c1154 <link_constructors_end>:
	...
